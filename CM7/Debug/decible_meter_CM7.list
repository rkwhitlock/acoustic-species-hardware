
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ddc4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000b928  0801e080  0801e080  0001f080  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  080299a8  080299a8  0002a9a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  080299b0  080299b0  0002a9b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  080299b4  080299b4  0002a9b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         000010d8  24000000  080299b8  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .bss          00035fc8  240010e0  0802aa90  0002c0e0  2**5
                  ALLOC
  8 ._user_heap_stack 00001400  240370a8  0802aa90  0002d0a8  2**0
                  ALLOC
  9 .ARM.attributes 0000002e  00000000  00000000  0002d200  2**0
                  CONTENTS, READONLY
 10 .RAM_D3       00000200  38000000  38000000  0002d000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 11 .debug_info   000473ec  00000000  00000000  0002d22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .debug_abbrev 0000810d  00000000  00000000  0007461a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_aranges 00003940  00000000  00000000  0007c728  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_rnglists 00002c2c  00000000  00000000  00080068  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_macro  000548aa  00000000  00000000  00082c94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_line   00050086  00000000  00000000  000d753e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_str    001ff642  00000000  00000000  001275c4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .comment      00000105  00000000  00000000  00326c06  2**0
                  CONTENTS, READONLY
 19 .debug_frame  00010050  00000000  00000000  00326d0c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_line_str 00000071  00000000  00000000  00336d5c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	240010e0 	.word	0x240010e0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801e04c 	.word	0x0801e04c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	240010e4 	.word	0x240010e4
 80002dc:	0801e04c 	.word	0x0801e04c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b3d      	ldr	r3, [pc, #244]	@ (80007a8 <SystemInit+0xfc>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a3c      	ldr	r2, [pc, #240]	@ (80007a8 <SystemInit+0xfc>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b39      	ldr	r3, [pc, #228]	@ (80007a8 <SystemInit+0xfc>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a38      	ldr	r2, [pc, #224]	@ (80007a8 <SystemInit+0xfc>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b37      	ldr	r3, [pc, #220]	@ (80007ac <SystemInit+0x100>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b34      	ldr	r3, [pc, #208]	@ (80007ac <SystemInit+0x100>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a32      	ldr	r2, [pc, #200]	@ (80007ac <SystemInit+0x100>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <SystemInit+0x104>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <SystemInit+0x104>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <SystemInit+0x104>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <SystemInit+0x104>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	492c      	ldr	r1, [pc, #176]	@ (80007b0 <SystemInit+0x104>)
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <SystemInit+0x108>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <SystemInit+0x100>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <SystemInit+0x100>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a24      	ldr	r2, [pc, #144]	@ (80007ac <SystemInit+0x100>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <SystemInit+0x104>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <SystemInit+0x104>)
 8000736:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <SystemInit+0x10c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <SystemInit+0x104>)
 800073c:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <SystemInit+0x110>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <SystemInit+0x104>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <SystemInit+0x114>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <SystemInit+0x104>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <SystemInit+0x114>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <SystemInit+0x104>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <SystemInit+0x104>)
 800075a:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <SystemInit+0x114>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <SystemInit+0x104>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <SystemInit+0x104>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <SystemInit+0x104>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <SystemInit+0x104>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <SystemInit+0x118>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <SystemInit+0x118>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <SystemInit+0x11c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <SystemInit+0x120>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <SystemInit+0x124>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <SystemInit+0x128>)
 8000798:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800079c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00
 80007ac:	52002000 	.word	0x52002000
 80007b0:	58024400 	.word	0x58024400
 80007b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b8:	02020200 	.word	0x02020200
 80007bc:	01ff0000 	.word	0x01ff0000
 80007c0:	01010280 	.word	0x01010280
 80007c4:	580000c0 	.word	0x580000c0
 80007c8:	5c001000 	.word	0x5c001000
 80007cc:	ffff0000 	.word	0xffff0000
 80007d0:	51008108 	.word	0x51008108
 80007d4:	52004000 	.word	0x52004000

080007d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007e2:	f023 0302 	bic.w	r3, r3, #2
 80007e6:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007e8:	bf00      	nop
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f9      	beq.n	80007ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	58024800 	.word	0x58024800

08000808 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b084      	sub	sp, #16
 800080c:	af00      	add	r7, sp, #0
 800080e:	6078      	str	r0, [r7, #4]
 8000810:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 8000812:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000816:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000818:	683b      	ldr	r3, [r7, #0]
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	4619      	mov	r1, r3
 800081e:	6878      	ldr	r0, [r7, #4]
 8000820:	f000 f832 	bl	8000888 <IS42S32800J_ClockEnable>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d128      	bne.n	800087c <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 800082a:	2001      	movs	r0, #1
 800082c:	f000 f8e2 	bl	80009f4 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000830:	683b      	ldr	r3, [r7, #0]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	4619      	mov	r1, r3
 8000836:	6878      	ldr	r0, [r7, #4]
 8000838:	f000 f84a 	bl	80008d0 <IS42S32800J_Precharge>
 800083c:	4603      	mov	r3, r0
 800083e:	2b00      	cmp	r3, #0
 8000840:	d11c      	bne.n	800087c <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000842:	683b      	ldr	r3, [r7, #0]
 8000844:	6819      	ldr	r1, [r3, #0]
 8000846:	683b      	ldr	r3, [r7, #0]
 8000848:	685b      	ldr	r3, [r3, #4]
 800084a:	461a      	mov	r2, r3
 800084c:	6878      	ldr	r0, [r7, #4]
 800084e:	f000 f897 	bl	8000980 <IS42S32800J_RefreshMode>
 8000852:	4603      	mov	r3, r0
 8000854:	2b00      	cmp	r3, #0
 8000856:	d111      	bne.n	800087c <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000858:	6839      	ldr	r1, [r7, #0]
 800085a:	6878      	ldr	r0, [r7, #4]
 800085c:	f000 f85c 	bl	8000918 <IS42S32800J_ModeRegConfig>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d10a      	bne.n	800087c <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000866:	683b      	ldr	r3, [r7, #0]
 8000868:	689b      	ldr	r3, [r3, #8]
 800086a:	4619      	mov	r1, r3
 800086c:	6878      	ldr	r0, [r7, #4]
 800086e:	f000 f8ad 	bl	80009cc <IS42S32800J_RefreshRate>
 8000872:	4603      	mov	r3, r0
 8000874:	2b00      	cmp	r3, #0
 8000876:	d101      	bne.n	800087c <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8000878:	2300      	movs	r3, #0
 800087a:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 800087c:	68fb      	ldr	r3, [r7, #12]
}
 800087e:	4618      	mov	r0, r3
 8000880:	3710      	adds	r7, #16
 8000882:	46bd      	mov	sp, r7
 8000884:	bd80      	pop	{r7, pc}
	...

08000888 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b082      	sub	sp, #8
 800088c:	af00      	add	r7, sp, #0
 800088e:	6078      	str	r0, [r7, #4]
 8000890:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000892:	4b0e      	ldr	r3, [pc, #56]	@ (80008cc <IS42S32800J_ClockEnable+0x44>)
 8000894:	2201      	movs	r2, #1
 8000896:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000898:	4a0c      	ldr	r2, [pc, #48]	@ (80008cc <IS42S32800J_ClockEnable+0x44>)
 800089a:	683b      	ldr	r3, [r7, #0]
 800089c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800089e:	4b0b      	ldr	r3, [pc, #44]	@ (80008cc <IS42S32800J_ClockEnable+0x44>)
 80008a0:	2201      	movs	r2, #1
 80008a2:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80008a4:	4b09      	ldr	r3, [pc, #36]	@ (80008cc <IS42S32800J_ClockEnable+0x44>)
 80008a6:	2200      	movs	r2, #0
 80008a8:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80008aa:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008ae:	4907      	ldr	r1, [pc, #28]	@ (80008cc <IS42S32800J_ClockEnable+0x44>)
 80008b0:	6878      	ldr	r0, [r7, #4]
 80008b2:	f013 fe59 	bl	8014568 <HAL_SDRAM_SendCommand>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d002      	beq.n	80008c2 <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 80008bc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80008c0:	e000      	b.n	80008c4 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 80008c2:	2300      	movs	r3, #0
  }
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	3708      	adds	r7, #8
 80008c8:	46bd      	mov	sp, r7
 80008ca:	bd80      	pop	{r7, pc}
 80008cc:	24001100 	.word	0x24001100

080008d0 <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b082      	sub	sp, #8
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	6078      	str	r0, [r7, #4]
 80008d8:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 80008da:	4b0e      	ldr	r3, [pc, #56]	@ (8000914 <IS42S32800J_Precharge+0x44>)
 80008dc:	2202      	movs	r2, #2
 80008de:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 80008e0:	4a0c      	ldr	r2, [pc, #48]	@ (8000914 <IS42S32800J_Precharge+0x44>)
 80008e2:	683b      	ldr	r3, [r7, #0]
 80008e4:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 80008e6:	4b0b      	ldr	r3, [pc, #44]	@ (8000914 <IS42S32800J_Precharge+0x44>)
 80008e8:	2201      	movs	r2, #1
 80008ea:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 80008ec:	4b09      	ldr	r3, [pc, #36]	@ (8000914 <IS42S32800J_Precharge+0x44>)
 80008ee:	2200      	movs	r2, #0
 80008f0:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80008f2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80008f6:	4907      	ldr	r1, [pc, #28]	@ (8000914 <IS42S32800J_Precharge+0x44>)
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f013 fe35 	bl	8014568 <HAL_SDRAM_SendCommand>
 80008fe:	4603      	mov	r3, r0
 8000900:	2b00      	cmp	r3, #0
 8000902:	d002      	beq.n	800090a <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 8000904:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000908:	e000      	b.n	800090c <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 800090a:	2300      	movs	r3, #0
  }
}
 800090c:	4618      	mov	r0, r3
 800090e:	3708      	adds	r7, #8
 8000910:	46bd      	mov	sp, r7
 8000912:	bd80      	pop	{r7, pc}
 8000914:	24001100 	.word	0x24001100

08000918 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000918:	b580      	push	{r7, lr}
 800091a:	b084      	sub	sp, #16
 800091c:	af00      	add	r7, sp, #0
 800091e:	6078      	str	r0, [r7, #4]
 8000920:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000922:	683b      	ldr	r3, [r7, #0]
 8000924:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000926:	683b      	ldr	r3, [r7, #0]
 8000928:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800092a:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 800092c:	683b      	ldr	r3, [r7, #0]
 800092e:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000930:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000932:	683b      	ldr	r3, [r7, #0]
 8000934:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000936:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000938:	683b      	ldr	r3, [r7, #0]
 800093a:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 800093c:	4313      	orrs	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8000940:	4b0e      	ldr	r3, [pc, #56]	@ (800097c <IS42S32800J_ModeRegConfig+0x64>)
 8000942:	2204      	movs	r2, #4
 8000944:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000946:	683b      	ldr	r3, [r7, #0]
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0c      	ldr	r2, [pc, #48]	@ (800097c <IS42S32800J_ModeRegConfig+0x64>)
 800094c:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 800094e:	4b0b      	ldr	r3, [pc, #44]	@ (800097c <IS42S32800J_ModeRegConfig+0x64>)
 8000950:	2201      	movs	r2, #1
 8000952:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000954:	4a09      	ldr	r2, [pc, #36]	@ (800097c <IS42S32800J_ModeRegConfig+0x64>)
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 800095a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800095e:	4907      	ldr	r1, [pc, #28]	@ (800097c <IS42S32800J_ModeRegConfig+0x64>)
 8000960:	6878      	ldr	r0, [r7, #4]
 8000962:	f013 fe01 	bl	8014568 <HAL_SDRAM_SendCommand>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d002      	beq.n	8000972 <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 800096c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000970:	e000      	b.n	8000974 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000972:	2300      	movs	r3, #0
  }
}
 8000974:	4618      	mov	r0, r3
 8000976:	3710      	adds	r7, #16
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}
 800097c:	24001100 	.word	0x24001100

08000980 <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000980:	b580      	push	{r7, lr}
 8000982:	b084      	sub	sp, #16
 8000984:	af00      	add	r7, sp, #0
 8000986:	60f8      	str	r0, [r7, #12]
 8000988:	60b9      	str	r1, [r7, #8]
 800098a:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 800098c:	4a0e      	ldr	r2, [pc, #56]	@ (80009c8 <IS42S32800J_RefreshMode+0x48>)
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000992:	4a0d      	ldr	r2, [pc, #52]	@ (80009c8 <IS42S32800J_RefreshMode+0x48>)
 8000994:	68bb      	ldr	r3, [r7, #8]
 8000996:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000998:	4b0b      	ldr	r3, [pc, #44]	@ (80009c8 <IS42S32800J_RefreshMode+0x48>)
 800099a:	2208      	movs	r2, #8
 800099c:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 800099e:	4b0a      	ldr	r3, [pc, #40]	@ (80009c8 <IS42S32800J_RefreshMode+0x48>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 80009a4:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80009a8:	4907      	ldr	r1, [pc, #28]	@ (80009c8 <IS42S32800J_RefreshMode+0x48>)
 80009aa:	68f8      	ldr	r0, [r7, #12]
 80009ac:	f013 fddc 	bl	8014568 <HAL_SDRAM_SendCommand>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d002      	beq.n	80009bc <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 80009b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009ba:	e000      	b.n	80009be <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 80009bc:	2300      	movs	r3, #0
  }
}
 80009be:	4618      	mov	r0, r3
 80009c0:	3710      	adds	r7, #16
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop
 80009c8:	24001100 	.word	0x24001100

080009cc <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 80009cc:	b580      	push	{r7, lr}
 80009ce:	b082      	sub	sp, #8
 80009d0:	af00      	add	r7, sp, #0
 80009d2:	6078      	str	r0, [r7, #4]
 80009d4:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 80009d6:	6839      	ldr	r1, [r7, #0]
 80009d8:	6878      	ldr	r0, [r7, #4]
 80009da:	f013 fdfa 	bl	80145d2 <HAL_SDRAM_ProgramRefreshRate>
 80009de:	4603      	mov	r3, r0
 80009e0:	2b00      	cmp	r3, #0
 80009e2:	d002      	beq.n	80009ea <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 80009e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80009e8:	e000      	b.n	80009ec <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 80009ea:	2300      	movs	r3, #0
  }
}
 80009ec:	4618      	mov	r0, r3
 80009ee:	3708      	adds	r7, #8
 80009f0:	46bd      	mov	sp, r7
 80009f2:	bd80      	pop	{r7, pc}

080009f4 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 80009fc:	f008 fb54 	bl	80090a8 <HAL_GetTick>
 8000a00:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000a02:	bf00      	nop
 8000a04:	f008 fb50 	bl	80090a8 <HAL_GetTick>
 8000a08:	4602      	mov	r2, r0
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	1ad3      	subs	r3, r2, r3
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	429a      	cmp	r2, r3
 8000a12:	d8f7      	bhi.n	8000a04 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 8000a14:	2300      	movs	r3, #0
}
 8000a16:	4618      	mov	r0, r3
 8000a18:	3710      	adds	r7, #16
 8000a1a:	46bd      	mov	sp, r7
 8000a1c:	bd80      	pop	{r7, pc}
	...

08000a20 <NT35510_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t NT35510_RegisterBusIO (NT35510_Object_t *pObj, NT35510_IO_t *pIO)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b085      	sub	sp, #20
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
  int32_t ret = NT35510_OK;
 8000a2a:	2300      	movs	r3, #0
 8000a2c:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	2b00      	cmp	r3, #0
 8000a32:	d103      	bne.n	8000a3c <NT35510_RegisterBusIO+0x1c>
  {
    ret = NT35510_ERROR;
 8000a34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000a38:	60fb      	str	r3, [r7, #12]
 8000a3a:	e014      	b.n	8000a66 <NT35510_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 8000a3c:	683b      	ldr	r3, [r7, #0]
 8000a3e:	685a      	ldr	r2, [r3, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
 8000a42:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8000a44:	683b      	ldr	r3, [r7, #0]
 8000a46:	689a      	ldr	r2, [r3, #8]
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	68da      	ldr	r2, [r3, #12]
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = NT35510_ReadRegWrap;
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	4a07      	ldr	r2, [pc, #28]	@ (8000a74 <NT35510_RegisterBusIO+0x54>)
 8000a58:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 8000a5a:	687b      	ldr	r3, [r7, #4]
 8000a5c:	4a06      	ldr	r2, [pc, #24]	@ (8000a78 <NT35510_RegisterBusIO+0x58>)
 8000a5e:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	687a      	ldr	r2, [r7, #4]
 8000a64:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 8000a66:	68fb      	ldr	r3, [r7, #12]
}
 8000a68:	4618      	mov	r0, r3
 8000a6a:	3714      	adds	r7, #20
 8000a6c:	46bd      	mov	sp, r7
 8000a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a72:	4770      	bx	lr
 8000a74:	0800130b 	.word	0x0800130b
 8000a78:	0800133d 	.word	0x0800133d

08000a7c <NT35510_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t NT35510_Init(NT35510_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b086      	sub	sp, #24
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	60f8      	str	r0, [r7, #12]
 8000a84:	60b9      	str	r1, [r7, #8]
 8000a86:	607a      	str	r2, [r7, #4]
  static const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
  static const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
  static const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
  static const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};

  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 8000a88:	68fb      	ldr	r3, [r7, #12]
 8000a8a:	f103 0010 	add.w	r0, r3, #16
 8000a8e:	2305      	movs	r3, #5
 8000a90:	4aa2      	ldr	r2, [pc, #648]	@ (8000d1c <NT35510_Init+0x2a0>)
 8000a92:	21f0      	movs	r1, #240	@ 0xf0
 8000a94:	f000 fc9c 	bl	80013d0 <nt35510_write_reg>
 8000a98:	6178      	str	r0, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB0, nt35510_reg1, 3);/* AVDD: 5.2V */
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	f103 0010 	add.w	r0, r3, #16
 8000aa0:	2303      	movs	r3, #3
 8000aa2:	4a9f      	ldr	r2, [pc, #636]	@ (8000d20 <NT35510_Init+0x2a4>)
 8000aa4:	21b0      	movs	r1, #176	@ 0xb0
 8000aa6:	f000 fc93 	bl	80013d0 <nt35510_write_reg>
 8000aaa:	4602      	mov	r2, r0
 8000aac:	697b      	ldr	r3, [r7, #20]
 8000aae:	4413      	add	r3, r2
 8000ab0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg2, 3); /* AVDD: Ratio */
 8000ab2:	68fb      	ldr	r3, [r7, #12]
 8000ab4:	f103 0010 	add.w	r0, r3, #16
 8000ab8:	2303      	movs	r3, #3
 8000aba:	4a9a      	ldr	r2, [pc, #616]	@ (8000d24 <NT35510_Init+0x2a8>)
 8000abc:	21b6      	movs	r1, #182	@ 0xb6
 8000abe:	f000 fc87 	bl	80013d0 <nt35510_write_reg>
 8000ac2:	4602      	mov	r2, r0
 8000ac4:	697b      	ldr	r3, [r7, #20]
 8000ac6:	4413      	add	r3, r2
 8000ac8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg3, 3);/* AVEE: -5.2V */
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f103 0010 	add.w	r0, r3, #16
 8000ad0:	2303      	movs	r3, #3
 8000ad2:	4a95      	ldr	r2, [pc, #596]	@ (8000d28 <NT35510_Init+0x2ac>)
 8000ad4:	21b1      	movs	r1, #177	@ 0xb1
 8000ad6:	f000 fc7b 	bl	80013d0 <nt35510_write_reg>
 8000ada:	4602      	mov	r2, r0
 8000adc:	697b      	ldr	r3, [r7, #20]
 8000ade:	4413      	add	r3, r2
 8000ae0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg4, 3);/* AVEE: Ratio */
 8000ae2:	68fb      	ldr	r3, [r7, #12]
 8000ae4:	f103 0010 	add.w	r0, r3, #16
 8000ae8:	2303      	movs	r3, #3
 8000aea:	4a90      	ldr	r2, [pc, #576]	@ (8000d2c <NT35510_Init+0x2b0>)
 8000aec:	21b7      	movs	r1, #183	@ 0xb7
 8000aee:	f000 fc6f 	bl	80013d0 <nt35510_write_reg>
 8000af2:	4602      	mov	r2, r0
 8000af4:	697b      	ldr	r3, [r7, #20]
 8000af6:	4413      	add	r3, r2
 8000af8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB2, nt35510_reg5, 3);/* VCL: -2.5V */
 8000afa:	68fb      	ldr	r3, [r7, #12]
 8000afc:	f103 0010 	add.w	r0, r3, #16
 8000b00:	2303      	movs	r3, #3
 8000b02:	4a8b      	ldr	r2, [pc, #556]	@ (8000d30 <NT35510_Init+0x2b4>)
 8000b04:	21b2      	movs	r1, #178	@ 0xb2
 8000b06:	f000 fc63 	bl	80013d0 <nt35510_write_reg>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	697b      	ldr	r3, [r7, #20]
 8000b0e:	4413      	add	r3, r2
 8000b10:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg6, 3);/* VCL: Ratio */
 8000b12:	68fb      	ldr	r3, [r7, #12]
 8000b14:	f103 0010 	add.w	r0, r3, #16
 8000b18:	2303      	movs	r3, #3
 8000b1a:	4a86      	ldr	r2, [pc, #536]	@ (8000d34 <NT35510_Init+0x2b8>)
 8000b1c:	21b8      	movs	r1, #184	@ 0xb8
 8000b1e:	f000 fc57 	bl	80013d0 <nt35510_write_reg>
 8000b22:	4602      	mov	r2, r0
 8000b24:	697b      	ldr	r3, [r7, #20]
 8000b26:	4413      	add	r3, r2
 8000b28:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBF, nt35510_reg7, 1);/* VGH: 15V (Free Pump) */
 8000b2a:	68fb      	ldr	r3, [r7, #12]
 8000b2c:	f103 0010 	add.w	r0, r3, #16
 8000b30:	2301      	movs	r3, #1
 8000b32:	4a81      	ldr	r2, [pc, #516]	@ (8000d38 <NT35510_Init+0x2bc>)
 8000b34:	21bf      	movs	r1, #191	@ 0xbf
 8000b36:	f000 fc4b 	bl	80013d0 <nt35510_write_reg>
 8000b3a:	4602      	mov	r2, r0
 8000b3c:	697b      	ldr	r3, [r7, #20]
 8000b3e:	4413      	add	r3, r2
 8000b40:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB3, nt35510_reg8, 3);
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	f103 0010 	add.w	r0, r3, #16
 8000b48:	2303      	movs	r3, #3
 8000b4a:	4a7c      	ldr	r2, [pc, #496]	@ (8000d3c <NT35510_Init+0x2c0>)
 8000b4c:	21b3      	movs	r1, #179	@ 0xb3
 8000b4e:	f000 fc3f 	bl	80013d0 <nt35510_write_reg>
 8000b52:	4602      	mov	r2, r0
 8000b54:	697b      	ldr	r3, [r7, #20]
 8000b56:	4413      	add	r3, r2
 8000b58:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB9, nt35510_reg9, 3);/* VGH: Ratio */ 
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	f103 0010 	add.w	r0, r3, #16
 8000b60:	2303      	movs	r3, #3
 8000b62:	4a77      	ldr	r2, [pc, #476]	@ (8000d40 <NT35510_Init+0x2c4>)
 8000b64:	21b9      	movs	r1, #185	@ 0xb9
 8000b66:	f000 fc33 	bl	80013d0 <nt35510_write_reg>
 8000b6a:	4602      	mov	r2, r0
 8000b6c:	697b      	ldr	r3, [r7, #20]
 8000b6e:	4413      	add	r3, r2
 8000b70:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg10, 3);/* VGL_REG: -10V */
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	f103 0010 	add.w	r0, r3, #16
 8000b78:	2303      	movs	r3, #3
 8000b7a:	4a72      	ldr	r2, [pc, #456]	@ (8000d44 <NT35510_Init+0x2c8>)
 8000b7c:	21b5      	movs	r1, #181	@ 0xb5
 8000b7e:	f000 fc27 	bl	80013d0 <nt35510_write_reg>
 8000b82:	4602      	mov	r2, r0
 8000b84:	697b      	ldr	r3, [r7, #20]
 8000b86:	4413      	add	r3, r2
 8000b88:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg12, 3);/* VGLX: Ratio */
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f103 0010 	add.w	r0, r3, #16
 8000b90:	2303      	movs	r3, #3
 8000b92:	4a6d      	ldr	r2, [pc, #436]	@ (8000d48 <NT35510_Init+0x2cc>)
 8000b94:	21ba      	movs	r1, #186	@ 0xba
 8000b96:	f000 fc1b 	bl	80013d0 <nt35510_write_reg>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	697b      	ldr	r3, [r7, #20]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg13, 3);/* VGMP/VGSP: 4.5V/0V */
 8000ba2:	68fb      	ldr	r3, [r7, #12]
 8000ba4:	f103 0010 	add.w	r0, r3, #16
 8000ba8:	2303      	movs	r3, #3
 8000baa:	4a68      	ldr	r2, [pc, #416]	@ (8000d4c <NT35510_Init+0x2d0>)
 8000bac:	21bc      	movs	r1, #188	@ 0xbc
 8000bae:	f000 fc0f 	bl	80013d0 <nt35510_write_reg>
 8000bb2:	4602      	mov	r2, r0
 8000bb4:	697b      	ldr	r3, [r7, #20]
 8000bb6:	4413      	add	r3, r2
 8000bb8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBD, nt35510_reg14, 3);/* VGMN/VGSN:-4.5V/0V */
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	f103 0010 	add.w	r0, r3, #16
 8000bc0:	2303      	movs	r3, #3
 8000bc2:	4a63      	ldr	r2, [pc, #396]	@ (8000d50 <NT35510_Init+0x2d4>)
 8000bc4:	21bd      	movs	r1, #189	@ 0xbd
 8000bc6:	f000 fc03 	bl	80013d0 <nt35510_write_reg>
 8000bca:	4602      	mov	r2, r0
 8000bcc:	697b      	ldr	r3, [r7, #20]
 8000bce:	4413      	add	r3, r2
 8000bd0:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBE, nt35510_reg15, 2);/* VCOM: -1.325V */
 8000bd2:	68fb      	ldr	r3, [r7, #12]
 8000bd4:	f103 0010 	add.w	r0, r3, #16
 8000bd8:	2302      	movs	r3, #2
 8000bda:	4a5e      	ldr	r2, [pc, #376]	@ (8000d54 <NT35510_Init+0x2d8>)
 8000bdc:	21be      	movs	r1, #190	@ 0xbe
 8000bde:	f000 fbf7 	bl	80013d0 <nt35510_write_reg>
 8000be2:	4602      	mov	r2, r0
 8000be4:	697b      	ldr	r3, [r7, #20]
 8000be6:	4413      	add	r3, r2
 8000be8:	617b      	str	r3, [r7, #20]

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */

  ret += nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg16, 5);/* LV2: Page 0 enable */
 8000bea:	68fb      	ldr	r3, [r7, #12]
 8000bec:	f103 0010 	add.w	r0, r3, #16
 8000bf0:	2305      	movs	r3, #5
 8000bf2:	4a59      	ldr	r2, [pc, #356]	@ (8000d58 <NT35510_Init+0x2dc>)
 8000bf4:	21f0      	movs	r1, #240	@ 0xf0
 8000bf6:	f000 fbeb 	bl	80013d0 <nt35510_write_reg>
 8000bfa:	4602      	mov	r2, r0
 8000bfc:	697b      	ldr	r3, [r7, #20]
 8000bfe:	4413      	add	r3, r2
 8000c00:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg17, 2);/* Display optional control */
 8000c02:	68fb      	ldr	r3, [r7, #12]
 8000c04:	f103 0010 	add.w	r0, r3, #16
 8000c08:	2302      	movs	r3, #2
 8000c0a:	4a54      	ldr	r2, [pc, #336]	@ (8000d5c <NT35510_Init+0x2e0>)
 8000c0c:	21b1      	movs	r1, #177	@ 0xb1
 8000c0e:	f000 fbdf 	bl	80013d0 <nt35510_write_reg>
 8000c12:	4602      	mov	r2, r0
 8000c14:	697b      	ldr	r3, [r7, #20]
 8000c16:	4413      	add	r3, r2
 8000c18:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg18, 1);/* Set source output data hold time */
 8000c1a:	68fb      	ldr	r3, [r7, #12]
 8000c1c:	f103 0010 	add.w	r0, r3, #16
 8000c20:	2301      	movs	r3, #1
 8000c22:	4a4f      	ldr	r2, [pc, #316]	@ (8000d60 <NT35510_Init+0x2e4>)
 8000c24:	21b6      	movs	r1, #182	@ 0xb6
 8000c26:	f000 fbd3 	bl	80013d0 <nt35510_write_reg>
 8000c2a:	4602      	mov	r2, r0
 8000c2c:	697b      	ldr	r3, [r7, #20]
 8000c2e:	4413      	add	r3, r2
 8000c30:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg19, 1);/*Display resolution control */
 8000c32:	68fb      	ldr	r3, [r7, #12]
 8000c34:	f103 0010 	add.w	r0, r3, #16
 8000c38:	2301      	movs	r3, #1
 8000c3a:	4a4a      	ldr	r2, [pc, #296]	@ (8000d64 <NT35510_Init+0x2e8>)
 8000c3c:	21b5      	movs	r1, #181	@ 0xb5
 8000c3e:	f000 fbc7 	bl	80013d0 <nt35510_write_reg>
 8000c42:	4602      	mov	r2, r0
 8000c44:	697b      	ldr	r3, [r7, #20]
 8000c46:	4413      	add	r3, r2
 8000c48:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg20, 2);/* Gate EQ control */
 8000c4a:	68fb      	ldr	r3, [r7, #12]
 8000c4c:	f103 0010 	add.w	r0, r3, #16
 8000c50:	2302      	movs	r3, #2
 8000c52:	4a45      	ldr	r2, [pc, #276]	@ (8000d68 <NT35510_Init+0x2ec>)
 8000c54:	21b7      	movs	r1, #183	@ 0xb7
 8000c56:	f000 fbbb 	bl	80013d0 <nt35510_write_reg>
 8000c5a:	4602      	mov	r2, r0
 8000c5c:	697b      	ldr	r3, [r7, #20]
 8000c5e:	4413      	add	r3, r2
 8000c60:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg21, 4);/* Src EQ control(Mode2) */
 8000c62:	68fb      	ldr	r3, [r7, #12]
 8000c64:	f103 0010 	add.w	r0, r3, #16
 8000c68:	2304      	movs	r3, #4
 8000c6a:	4a40      	ldr	r2, [pc, #256]	@ (8000d6c <NT35510_Init+0x2f0>)
 8000c6c:	21b8      	movs	r1, #184	@ 0xb8
 8000c6e:	f000 fbaf 	bl	80013d0 <nt35510_write_reg>
 8000c72:	4602      	mov	r2, r0
 8000c74:	697b      	ldr	r3, [r7, #20]
 8000c76:	4413      	add	r3, r2
 8000c78:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg22, 3);
 8000c7a:	68fb      	ldr	r3, [r7, #12]
 8000c7c:	f103 0010 	add.w	r0, r3, #16
 8000c80:	2303      	movs	r3, #3
 8000c82:	4a3b      	ldr	r2, [pc, #236]	@ (8000d70 <NT35510_Init+0x2f4>)
 8000c84:	21bc      	movs	r1, #188	@ 0xbc
 8000c86:	f000 fba3 	bl	80013d0 <nt35510_write_reg>
 8000c8a:	4602      	mov	r2, r0
 8000c8c:	697b      	ldr	r3, [r7, #20]
 8000c8e:	4413      	add	r3, r2
 8000c90:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 8000c92:	68fb      	ldr	r3, [r7, #12]
 8000c94:	f103 0010 	add.w	r0, r3, #16
 8000c98:	2303      	movs	r3, #3
 8000c9a:	4a36      	ldr	r2, [pc, #216]	@ (8000d74 <NT35510_Init+0x2f8>)
 8000c9c:	21cc      	movs	r1, #204	@ 0xcc
 8000c9e:	f000 fb97 	bl	80013d0 <nt35510_write_reg>
 8000ca2:	4602      	mov	r2, r0
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	4413      	add	r3, r2
 8000ca8:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 8000caa:	68fb      	ldr	r3, [r7, #12]
 8000cac:	f103 0010 	add.w	r0, r3, #16
 8000cb0:	2301      	movs	r3, #1
 8000cb2:	4a31      	ldr	r2, [pc, #196]	@ (8000d78 <NT35510_Init+0x2fc>)
 8000cb4:	21ba      	movs	r1, #186	@ 0xba
 8000cb6:	f000 fb8b 	bl	80013d0 <nt35510_write_reg>
 8000cba:	4602      	mov	r2, r0
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	4413      	add	r3, r2
 8000cc0:	617b      	str	r3, [r7, #20]

  /* Add a delay, otherwise MADCTL not taken */
  (void)NT35510_IO_Delay(pObj, 200);
 8000cc2:	21c8      	movs	r1, #200	@ 0xc8
 8000cc4:	68f8      	ldr	r0, [r7, #12]
 8000cc6:	f000 fb52 	bl	800136e <NT35510_IO_Delay>

  /* Configure orientation */
  if(Orientation == NT35510_ORIENTATION_PORTRAIT)
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	2b00      	cmp	r3, #0
 8000cce:	d15b      	bne.n	8000d88 <NT35510_Init+0x30c>
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_portrait[1], 0);
 8000cd0:	68fb      	ldr	r3, [r7, #12]
 8000cd2:	f103 0010 	add.w	r0, r3, #16
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	4a28      	ldr	r2, [pc, #160]	@ (8000d7c <NT35510_Init+0x300>)
 8000cda:	2136      	movs	r1, #54	@ 0x36
 8000cdc:	f000 fb78 	bl	80013d0 <nt35510_write_reg>
 8000ce0:	4602      	mov	r2, r0
 8000ce2:	697b      	ldr	r3, [r7, #20]
 8000ce4:	4413      	add	r3, r2
 8000ce6:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	f103 0010 	add.w	r0, r3, #16
 8000cee:	2304      	movs	r3, #4
 8000cf0:	4a23      	ldr	r2, [pc, #140]	@ (8000d80 <NT35510_Init+0x304>)
 8000cf2:	212a      	movs	r1, #42	@ 0x2a
 8000cf4:	f000 fb6c 	bl	80013d0 <nt35510_write_reg>
 8000cf8:	4602      	mov	r2, r0
 8000cfa:	697b      	ldr	r3, [r7, #20]
 8000cfc:	4413      	add	r3, r2
 8000cfe:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	f103 0010 	add.w	r0, r3, #16
 8000d06:	2304      	movs	r3, #4
 8000d08:	4a1e      	ldr	r2, [pc, #120]	@ (8000d84 <NT35510_Init+0x308>)
 8000d0a:	212b      	movs	r1, #43	@ 0x2b
 8000d0c:	f000 fb60 	bl	80013d0 <nt35510_write_reg>
 8000d10:	4602      	mov	r2, r0
 8000d12:	697b      	ldr	r3, [r7, #20]
 8000d14:	4413      	add	r3, r2
 8000d16:	617b      	str	r3, [r7, #20]
 8000d18:	e05a      	b.n	8000dd0 <NT35510_Init+0x354>
 8000d1a:	bf00      	nop
 8000d1c:	0801e5a0 	.word	0x0801e5a0
 8000d20:	0801e5a8 	.word	0x0801e5a8
 8000d24:	0801e5ac 	.word	0x0801e5ac
 8000d28:	0801e5b0 	.word	0x0801e5b0
 8000d2c:	0801e5b4 	.word	0x0801e5b4
 8000d30:	0801e5b8 	.word	0x0801e5b8
 8000d34:	0801e5bc 	.word	0x0801e5bc
 8000d38:	0801e5c0 	.word	0x0801e5c0
 8000d3c:	0801e5c4 	.word	0x0801e5c4
 8000d40:	0801e5c8 	.word	0x0801e5c8
 8000d44:	0801e5cc 	.word	0x0801e5cc
 8000d48:	0801e5d0 	.word	0x0801e5d0
 8000d4c:	0801e5d4 	.word	0x0801e5d4
 8000d50:	0801e5d8 	.word	0x0801e5d8
 8000d54:	0801e5dc 	.word	0x0801e5dc
 8000d58:	0801e5e0 	.word	0x0801e5e0
 8000d5c:	0801e5e8 	.word	0x0801e5e8
 8000d60:	0801e5ec 	.word	0x0801e5ec
 8000d64:	0801e5f0 	.word	0x0801e5f0
 8000d68:	0801e5f4 	.word	0x0801e5f4
 8000d6c:	0801e5f8 	.word	0x0801e5f8
 8000d70:	0801e5fc 	.word	0x0801e5fc
 8000d74:	0801e600 	.word	0x0801e600
 8000d78:	0801e604 	.word	0x0801e604
 8000d7c:	0801e579 	.word	0x0801e579
 8000d80:	0801e57c 	.word	0x0801e57c
 8000d84:	0801e584 	.word	0x0801e584
  }
  else
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_landscape[1], 0);
 8000d88:	68fb      	ldr	r3, [r7, #12]
 8000d8a:	f103 0010 	add.w	r0, r3, #16
 8000d8e:	2300      	movs	r3, #0
 8000d90:	4a5c      	ldr	r2, [pc, #368]	@ (8000f04 <NT35510_Init+0x488>)
 8000d92:	2136      	movs	r1, #54	@ 0x36
 8000d94:	f000 fb1c 	bl	80013d0 <nt35510_write_reg>
 8000d98:	4602      	mov	r2, r0
 8000d9a:	697b      	ldr	r3, [r7, #20]
 8000d9c:	4413      	add	r3, r2
 8000d9e:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8000da0:	68fb      	ldr	r3, [r7, #12]
 8000da2:	f103 0010 	add.w	r0, r3, #16
 8000da6:	2304      	movs	r3, #4
 8000da8:	4a57      	ldr	r2, [pc, #348]	@ (8000f08 <NT35510_Init+0x48c>)
 8000daa:	212a      	movs	r1, #42	@ 0x2a
 8000dac:	f000 fb10 	bl	80013d0 <nt35510_write_reg>
 8000db0:	4602      	mov	r2, r0
 8000db2:	697b      	ldr	r3, [r7, #20]
 8000db4:	4413      	add	r3, r2
 8000db6:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	f103 0010 	add.w	r0, r3, #16
 8000dbe:	2304      	movs	r3, #4
 8000dc0:	4a52      	ldr	r2, [pc, #328]	@ (8000f0c <NT35510_Init+0x490>)
 8000dc2:	212b      	movs	r1, #43	@ 0x2b
 8000dc4:	f000 fb04 	bl	80013d0 <nt35510_write_reg>
 8000dc8:	4602      	mov	r2, r0
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	4413      	add	r3, r2
 8000dce:	617b      	str	r3, [r7, #20]
  }

  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	f103 0010 	add.w	r0, r3, #16
 8000dd6:	2300      	movs	r3, #0
 8000dd8:	4a4d      	ldr	r2, [pc, #308]	@ (8000f10 <NT35510_Init+0x494>)
 8000dda:	2111      	movs	r1, #17
 8000ddc:	f000 faf8 	bl	80013d0 <nt35510_write_reg>
 8000de0:	4602      	mov	r2, r0
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	4413      	add	r3, r2
 8000de6:	617b      	str	r3, [r7, #20]

  /* Wait for sleep out exit */
  (void)NT35510_IO_Delay(pObj, 20);
 8000de8:	2114      	movs	r1, #20
 8000dea:	68f8      	ldr	r0, [r7, #12]
 8000dec:	f000 fabf 	bl	800136e <NT35510_IO_Delay>

  switch(ColorCoding)
 8000df0:	68bb      	ldr	r3, [r7, #8]
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d012      	beq.n	8000e1c <NT35510_Init+0x3a0>
 8000df6:	68bb      	ldr	r3, [r7, #8]
 8000df8:	2b02      	cmp	r3, #2
 8000dfa:	d11f      	bne.n	8000e3c <NT35510_Init+0x3c0>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg36[1], 0);
 8000dfc:	68fb      	ldr	r3, [r7, #12]
 8000dfe:	f103 0010 	add.w	r0, r3, #16
 8000e02:	2300      	movs	r3, #0
 8000e04:	4a43      	ldr	r2, [pc, #268]	@ (8000f14 <NT35510_Init+0x498>)
 8000e06:	213a      	movs	r1, #58	@ 0x3a
 8000e08:	f000 fae2 	bl	80013d0 <nt35510_write_reg>
 8000e0c:	4602      	mov	r2, r0
 8000e0e:	697b      	ldr	r3, [r7, #20]
 8000e10:	4413      	add	r3, r2
 8000e12:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 8000e14:	4b40      	ldr	r3, [pc, #256]	@ (8000f18 <NT35510_Init+0x49c>)
 8000e16:	2202      	movs	r2, #2
 8000e18:	605a      	str	r2, [r3, #4]
      break;
 8000e1a:	e01f      	b.n	8000e5c <NT35510_Init+0x3e0>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8000e1c:	68fb      	ldr	r3, [r7, #12]
 8000e1e:	f103 0010 	add.w	r0, r3, #16
 8000e22:	2300      	movs	r3, #0
 8000e24:	4a3d      	ldr	r2, [pc, #244]	@ (8000f1c <NT35510_Init+0x4a0>)
 8000e26:	213a      	movs	r1, #58	@ 0x3a
 8000e28:	f000 fad2 	bl	80013d0 <nt35510_write_reg>
 8000e2c:	4602      	mov	r2, r0
 8000e2e:	697b      	ldr	r3, [r7, #20]
 8000e30:	4413      	add	r3, r2
 8000e32:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 8000e34:	4b38      	ldr	r3, [pc, #224]	@ (8000f18 <NT35510_Init+0x49c>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	605a      	str	r2, [r3, #4]
      break;
 8000e3a:	e00f      	b.n	8000e5c <NT35510_Init+0x3e0>
    default :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8000e3c:	68fb      	ldr	r3, [r7, #12]
 8000e3e:	f103 0010 	add.w	r0, r3, #16
 8000e42:	2300      	movs	r3, #0
 8000e44:	4a35      	ldr	r2, [pc, #212]	@ (8000f1c <NT35510_Init+0x4a0>)
 8000e46:	213a      	movs	r1, #58	@ 0x3a
 8000e48:	f000 fac2 	bl	80013d0 <nt35510_write_reg>
 8000e4c:	4602      	mov	r2, r0
 8000e4e:	697b      	ldr	r3, [r7, #20]
 8000e50:	4413      	add	r3, r2
 8000e52:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 8000e54:	4b30      	ldr	r3, [pc, #192]	@ (8000f18 <NT35510_Init+0x49c>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	605a      	str	r2, [r3, #4]
      break;
 8000e5a:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	f103 0010 	add.w	r0, r3, #16
 8000e62:	2300      	movs	r3, #0
 8000e64:	4a2e      	ldr	r2, [pc, #184]	@ (8000f20 <NT35510_Init+0x4a4>)
 8000e66:	2151      	movs	r1, #81	@ 0x51
 8000e68:	f000 fab2 	bl	80013d0 <nt35510_write_reg>
 8000e6c:	4602      	mov	r2, r0
 8000e6e:	697b      	ldr	r3, [r7, #20]
 8000e70:	4413      	add	r3, r2
 8000e72:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCTRLD, &nt35510_reg32[1], 0);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	f103 0010 	add.w	r0, r3, #16
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	4a29      	ldr	r2, [pc, #164]	@ (8000f24 <NT35510_Init+0x4a8>)
 8000e7e:	2153      	movs	r1, #83	@ 0x53
 8000e80:	f000 faa6 	bl	80013d0 <nt35510_write_reg>
 8000e84:	4602      	mov	r2, r0
 8000e86:	697b      	ldr	r3, [r7, #20]
 8000e88:	4413      	add	r3, r2
 8000e8a:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABC, &nt35510_reg33[1], 0);
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	f103 0010 	add.w	r0, r3, #16
 8000e92:	2300      	movs	r3, #0
 8000e94:	4a24      	ldr	r2, [pc, #144]	@ (8000f28 <NT35510_Init+0x4ac>)
 8000e96:	2155      	movs	r1, #85	@ 0x55
 8000e98:	f000 fa9a 	bl	80013d0 <nt35510_write_reg>
 8000e9c:	4602      	mov	r2, r0
 8000e9e:	697b      	ldr	r3, [r7, #20]
 8000ea0:	4413      	add	r3, r2
 8000ea2:	617b      	str	r3, [r7, #20]

  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	f103 0010 	add.w	r0, r3, #16
 8000eaa:	2300      	movs	r3, #0
 8000eac:	4a1f      	ldr	r2, [pc, #124]	@ (8000f2c <NT35510_Init+0x4b0>)
 8000eae:	215e      	movs	r1, #94	@ 0x5e
 8000eb0:	f000 fa8e 	bl	80013d0 <nt35510_write_reg>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	4413      	add	r3, r2
 8000eba:	617b      	str	r3, [r7, #20]

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	f103 0010 	add.w	r0, r3, #16
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	4a1a      	ldr	r2, [pc, #104]	@ (8000f30 <NT35510_Init+0x4b4>)
 8000ec6:	2129      	movs	r1, #41	@ 0x29
 8000ec8:	f000 fa82 	bl	80013d0 <nt35510_write_reg>
 8000ecc:	4602      	mov	r2, r0
 8000ece:	697b      	ldr	r3, [r7, #20]
 8000ed0:	4413      	add	r3, r2
 8000ed2:	617b      	str	r3, [r7, #20]

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	f103 0010 	add.w	r0, r3, #16
 8000eda:	2300      	movs	r3, #0
 8000edc:	4a15      	ldr	r2, [pc, #84]	@ (8000f34 <NT35510_Init+0x4b8>)
 8000ede:	212c      	movs	r1, #44	@ 0x2c
 8000ee0:	f000 fa76 	bl	80013d0 <nt35510_write_reg>
 8000ee4:	4602      	mov	r2, r0
 8000ee6:	697b      	ldr	r3, [r7, #20]
 8000ee8:	4413      	add	r3, r2
 8000eea:	617b      	str	r3, [r7, #20]

  if(ret != NT35510_OK)
 8000eec:	697b      	ldr	r3, [r7, #20]
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d002      	beq.n	8000ef8 <NT35510_Init+0x47c>
  {
    ret = NT35510_ERROR;
 8000ef2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ef6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8000ef8:	697b      	ldr	r3, [r7, #20]
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	3718      	adds	r7, #24
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	0801e58d 	.word	0x0801e58d
 8000f08:	0801e590 	.word	0x0801e590
 8000f0c:	0801e598 	.word	0x0801e598
 8000f10:	0801e609 	.word	0x0801e609
 8000f14:	0801e60d 	.word	0x0801e60d
 8000f18:	24001110 	.word	0x24001110
 8000f1c:	0801e611 	.word	0x0801e611
 8000f20:	0801e615 	.word	0x0801e615
 8000f24:	0801e619 	.word	0x0801e619
 8000f28:	0801e61d 	.word	0x0801e61d
 8000f2c:	0801e621 	.word	0x0801e621
 8000f30:	0801e625 	.word	0x0801e625
 8000f34:	0801e629 	.word	0x0801e629

08000f38 <NT35510_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DeInit(NT35510_Object_t *pObj)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b083      	sub	sp, #12
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  return NT35510_ERROR;
 8000f40:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f4e:	4770      	bx	lr

08000f50 <NT35510_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t NT35510_ReadID(NT35510_Object_t *pObj, uint32_t *Id)
{ 
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b084      	sub	sp, #16
 8000f54:	af00      	add	r7, sp, #0
 8000f56:	6078      	str	r0, [r7, #4]
 8000f58:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	f103 0010 	add.w	r0, r3, #16
 8000f60:	2301      	movs	r3, #1
 8000f62:	683a      	ldr	r2, [r7, #0]
 8000f64:	21db      	movs	r1, #219	@ 0xdb
 8000f66:	f000 fa1c 	bl	80013a2 <nt35510_read_reg>
 8000f6a:	4603      	mov	r3, r0
 8000f6c:	2b00      	cmp	r3, #0
 8000f6e:	d003      	beq.n	8000f78 <NT35510_ReadID+0x28>
  {
    ret = NT35510_ERROR;
 8000f70:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f74:	60fb      	str	r3, [r7, #12]
 8000f76:	e001      	b.n	8000f7c <NT35510_ReadID+0x2c>
  }
  else
  {
    ret = NT35510_OK;
 8000f78:	2300      	movs	r3, #0
 8000f7a:	60fb      	str	r3, [r7, #12]
  }

  return ret;  
 8000f7c:	68fb      	ldr	r3, [r7, #12]
}  
 8000f7e:	4618      	mov	r0, r3
 8000f80:	3710      	adds	r7, #16
 8000f82:	46bd      	mov	sp, r7
 8000f84:	bd80      	pop	{r7, pc}
	...

08000f88 <NT35510_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t NT35510_SetBrightness(NT35510_Object_t *pObj, uint32_t Brightness)
{
 8000f88:	b580      	push	{r7, lr}
 8000f8a:	b084      	sub	sp, #16
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8000f92:	683a      	ldr	r2, [r7, #0]
 8000f94:	4613      	mov	r3, r2
 8000f96:	021b      	lsls	r3, r3, #8
 8000f98:	1a9b      	subs	r3, r3, r2
 8000f9a:	4a10      	ldr	r2, [pc, #64]	@ (8000fdc <NT35510_SetBrightness+0x54>)
 8000f9c:	fba2 2303 	umull	r2, r3, r2, r3
 8000fa0:	095b      	lsrs	r3, r3, #5
 8000fa2:	b2db      	uxtb	r3, r3
 8000fa4:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	f103 0010 	add.w	r0, r3, #16
 8000fac:	f107 020b 	add.w	r2, r7, #11
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	2151      	movs	r1, #81	@ 0x51
 8000fb4:	f000 fa0c 	bl	80013d0 <nt35510_write_reg>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d003      	beq.n	8000fc6 <NT35510_SetBrightness+0x3e>
  {
    ret = NT35510_ERROR;
 8000fbe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000fc2:	60fb      	str	r3, [r7, #12]
 8000fc4:	e004      	b.n	8000fd0 <NT35510_SetBrightness+0x48>
  }
  else
  {
    NT35510Ctx.Brightness = Brightness;
 8000fc6:	4a06      	ldr	r2, [pc, #24]	@ (8000fe0 <NT35510_SetBrightness+0x58>)
 8000fc8:	683b      	ldr	r3, [r7, #0]
 8000fca:	6093      	str	r3, [r2, #8]
    ret = NT35510_OK;
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8000fd0:	68fb      	ldr	r3, [r7, #12]
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3710      	adds	r7, #16
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	51eb851f 	.word	0x51eb851f
 8000fe0:	24001110 	.word	0x24001110

08000fe4 <NT35510_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t NT35510_GetBrightness(NT35510_Object_t *pObj, uint32_t *Brightness)
{
 8000fe4:	b480      	push	{r7}
 8000fe6:	b083      	sub	sp, #12
 8000fe8:	af00      	add	r7, sp, #0
 8000fea:	6078      	str	r0, [r7, #4]
 8000fec:	6039      	str	r1, [r7, #0]
  *Brightness = NT35510Ctx.Brightness;
 8000fee:	4b05      	ldr	r3, [pc, #20]	@ (8001004 <NT35510_GetBrightness+0x20>)
 8000ff0:	689a      	ldr	r2, [r3, #8]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	601a      	str	r2, [r3, #0]
  return NT35510_OK;  
 8000ff6:	2300      	movs	r3, #0
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	370c      	adds	r7, #12
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001002:	4770      	bx	lr
 8001004:	24001110 	.word	0x24001110

08001008 <NT35510_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOn(NT35510_Object_t *pObj)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001010:	2300      	movs	r3, #0
 8001012:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	f103 0010 	add.w	r0, r3, #16
 800101a:	f107 020b 	add.w	r2, r7, #11
 800101e:	2300      	movs	r3, #0
 8001020:	2129      	movs	r1, #41	@ 0x29
 8001022:	f000 f9d5 	bl	80013d0 <nt35510_write_reg>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d003      	beq.n	8001034 <NT35510_DisplayOn+0x2c>
  {
    ret = NT35510_ERROR;
 800102c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001030:	60fb      	str	r3, [r7, #12]
 8001032:	e001      	b.n	8001038 <NT35510_DisplayOn+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8001034:	2300      	movs	r3, #0
 8001036:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001038:	68fb      	ldr	r3, [r7, #12]
}
 800103a:	4618      	mov	r0, r3
 800103c:	3710      	adds	r7, #16
 800103e:	46bd      	mov	sp, r7
 8001040:	bd80      	pop	{r7, pc}

08001042 <NT35510_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOff(NT35510_Object_t *pObj)
{
 8001042:	b580      	push	{r7, lr}
 8001044:	b084      	sub	sp, #16
 8001046:	af00      	add	r7, sp, #0
 8001048:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 800104a:	2300      	movs	r3, #0
 800104c:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	f103 0010 	add.w	r0, r3, #16
 8001054:	f107 020b 	add.w	r2, r7, #11
 8001058:	2300      	movs	r3, #0
 800105a:	2128      	movs	r1, #40	@ 0x28
 800105c:	f000 f9b8 	bl	80013d0 <nt35510_write_reg>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d003      	beq.n	800106e <NT35510_DisplayOff+0x2c>
  {
    ret = NT35510_ERROR;
 8001066:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800106a:	60fb      	str	r3, [r7, #12]
 800106c:	e001      	b.n	8001072 <NT35510_DisplayOff+0x30>
  }
  else
  {
    ret = NT35510_OK;
 800106e:	2300      	movs	r3, #0
 8001070:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001072:	68fb      	ldr	r3, [r7, #12]
}
 8001074:	4618      	mov	r0, r3
 8001076:	3710      	adds	r7, #16
 8001078:	46bd      	mov	sp, r7
 800107a:	bd80      	pop	{r7, pc}

0800107c <NT35510_SetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be set
  * @retval Component status
  */
int32_t NT35510_SetOrientation(NT35510_Object_t *pObj, uint32_t Orientation)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b084      	sub	sp, #16
 8001080:	af00      	add	r7, sp, #0
 8001082:	6078      	str	r0, [r7, #4]
 8001084:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 8001086:	2360      	movs	r3, #96	@ 0x60
 8001088:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 800108a:	2300      	movs	r3, #0
 800108c:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 800108e:	683b      	ldr	r3, [r7, #0]
 8001090:	2b01      	cmp	r3, #1
 8001092:	d006      	beq.n	80010a2 <NT35510_SetOrientation+0x26>
 8001094:	683b      	ldr	r3, [r7, #0]
 8001096:	2b00      	cmp	r3, #0
 8001098:	d003      	beq.n	80010a2 <NT35510_SetOrientation+0x26>
  {
    ret = NT35510_ERROR;
 800109a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800109e:	60fb      	str	r3, [r7, #12]
 80010a0:	e04d      	b.n	800113e <NT35510_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == NT35510_ORIENTATION_LANDSCAPE)
 80010a2:	683b      	ldr	r3, [r7, #0]
 80010a4:	2b01      	cmp	r3, #1
 80010a6:	d125      	bne.n	80010f4 <NT35510_SetOrientation+0x78>
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	f103 0010 	add.w	r0, r3, #16
 80010ae:	f107 020b 	add.w	r2, r7, #11
 80010b2:	2300      	movs	r3, #0
 80010b4:	210b      	movs	r1, #11
 80010b6:	f000 f98b 	bl	80013d0 <nt35510_write_reg>
 80010ba:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	f103 0010 	add.w	r0, r3, #16
 80010c2:	2304      	movs	r3, #4
 80010c4:	4a23      	ldr	r2, [pc, #140]	@ (8001154 <NT35510_SetOrientation+0xd8>)
 80010c6:	212a      	movs	r1, #42	@ 0x2a
 80010c8:	f000 f982 	bl	80013d0 <nt35510_write_reg>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	4413      	add	r3, r2
 80010d2:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	f103 0010 	add.w	r0, r3, #16
 80010da:	2304      	movs	r3, #4
 80010dc:	4a1e      	ldr	r2, [pc, #120]	@ (8001158 <NT35510_SetOrientation+0xdc>)
 80010de:	212b      	movs	r1, #43	@ 0x2b
 80010e0:	f000 f976 	bl	80013d0 <nt35510_write_reg>
 80010e4:	4602      	mov	r2, r0
 80010e6:	68fb      	ldr	r3, [r7, #12]
 80010e8:	4413      	add	r3, r2
 80010ea:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_LANDSCAPE;
 80010ec:	4b1b      	ldr	r3, [pc, #108]	@ (800115c <NT35510_SetOrientation+0xe0>)
 80010ee:	2201      	movs	r2, #1
 80010f0:	601a      	str	r2, [r3, #0]
 80010f2:	e024      	b.n	800113e <NT35510_SetOrientation+0xc2>
  }
  else
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f103 0010 	add.w	r0, r3, #16
 80010fa:	f107 020a 	add.w	r2, r7, #10
 80010fe:	2300      	movs	r3, #0
 8001100:	2136      	movs	r1, #54	@ 0x36
 8001102:	f000 f965 	bl	80013d0 <nt35510_write_reg>
 8001106:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	f103 0010 	add.w	r0, r3, #16
 800110e:	2304      	movs	r3, #4
 8001110:	4a13      	ldr	r2, [pc, #76]	@ (8001160 <NT35510_SetOrientation+0xe4>)
 8001112:	212a      	movs	r1, #42	@ 0x2a
 8001114:	f000 f95c 	bl	80013d0 <nt35510_write_reg>
 8001118:	4602      	mov	r2, r0
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	4413      	add	r3, r2
 800111e:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f103 0010 	add.w	r0, r3, #16
 8001126:	2304      	movs	r3, #4
 8001128:	4a0e      	ldr	r2, [pc, #56]	@ (8001164 <NT35510_SetOrientation+0xe8>)
 800112a:	212b      	movs	r1, #43	@ 0x2b
 800112c:	f000 f950 	bl	80013d0 <nt35510_write_reg>
 8001130:	4602      	mov	r2, r0
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	4413      	add	r3, r2
 8001136:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 8001138:	4b08      	ldr	r3, [pc, #32]	@ (800115c <NT35510_SetOrientation+0xe0>)
 800113a:	2200      	movs	r2, #0
 800113c:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != NT35510_OK)
 800113e:	68fb      	ldr	r3, [r7, #12]
 8001140:	2b00      	cmp	r3, #0
 8001142:	d002      	beq.n	800114a <NT35510_SetOrientation+0xce>
  {
    ret = NT35510_ERROR;
 8001144:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001148:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800114a:	68fb      	ldr	r3, [r7, #12]
}
 800114c:	4618      	mov	r0, r3
 800114e:	3710      	adds	r7, #16
 8001150:	46bd      	mov	sp, r7
 8001152:	bd80      	pop	{r7, pc}
 8001154:	0801e590 	.word	0x0801e590
 8001158:	0801e598 	.word	0x0801e598
 800115c:	24001110 	.word	0x24001110
 8001160:	0801e57c 	.word	0x0801e57c
 8001164:	0801e584 	.word	0x0801e584

08001168 <NT35510_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t NT35510_GetOrientation(NT35510_Object_t *pObj, uint32_t *Orientation)
{
 8001168:	b480      	push	{r7}
 800116a:	b083      	sub	sp, #12
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = NT35510Ctx.Orientation;
 8001172:	4b05      	ldr	r3, [pc, #20]	@ (8001188 <NT35510_GetOrientation+0x20>)
 8001174:	681a      	ldr	r2, [r3, #0]
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	601a      	str	r2, [r3, #0]
  
  return NT35510_OK;
 800117a:	2300      	movs	r3, #0
}
 800117c:	4618      	mov	r0, r3
 800117e:	370c      	adds	r7, #12
 8001180:	46bd      	mov	sp, r7
 8001182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001186:	4770      	bx	lr
 8001188:	24001110 	.word	0x24001110

0800118c <NT35510_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t NT35510_GetXSize(NT35510_Object_t *pObj, uint32_t *Xsize)
{
 800118c:	b480      	push	{r7}
 800118e:	b083      	sub	sp, #12
 8001190:	af00      	add	r7, sp, #0
 8001192:	6078      	str	r0, [r7, #4]
 8001194:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8001196:	4b0e      	ldr	r3, [pc, #56]	@ (80011d0 <NT35510_GetXSize+0x44>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d002      	beq.n	80011a4 <NT35510_GetXSize+0x18>
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d005      	beq.n	80011ae <NT35510_GetXSize+0x22>
 80011a2:	e009      	b.n	80011b8 <NT35510_GetXSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Xsize = NT35510_480X800_WIDTH;
 80011a4:	683b      	ldr	r3, [r7, #0]
 80011a6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011aa:	601a      	str	r2, [r3, #0]
    break;
 80011ac:	e009      	b.n	80011c2 <NT35510_GetXSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Xsize = NT35510_800X480_WIDTH;
 80011ae:	683b      	ldr	r3, [r7, #0]
 80011b0:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80011b4:	601a      	str	r2, [r3, #0]
    break;
 80011b6:	e004      	b.n	80011c2 <NT35510_GetXSize+0x36>
  default:
    *Xsize = NT35510_800X480_WIDTH;
 80011b8:	683b      	ldr	r3, [r7, #0]
 80011ba:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80011be:	601a      	str	r2, [r3, #0]
    break;
 80011c0:	bf00      	nop
  }
  
  return NT35510_OK;
 80011c2:	2300      	movs	r3, #0
}
 80011c4:	4618      	mov	r0, r3
 80011c6:	370c      	adds	r7, #12
 80011c8:	46bd      	mov	sp, r7
 80011ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ce:	4770      	bx	lr
 80011d0:	24001110 	.word	0x24001110

080011d4 <NT35510_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t NT35510_GetYSize(NT35510_Object_t *pObj, uint32_t *Ysize)
{
 80011d4:	b480      	push	{r7}
 80011d6:	b083      	sub	sp, #12
 80011d8:	af00      	add	r7, sp, #0
 80011da:	6078      	str	r0, [r7, #4]
 80011dc:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 80011de:	4b0e      	ldr	r3, [pc, #56]	@ (8001218 <NT35510_GetYSize+0x44>)
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d002      	beq.n	80011ec <NT35510_GetYSize+0x18>
 80011e6:	2b01      	cmp	r3, #1
 80011e8:	d005      	beq.n	80011f6 <NT35510_GetYSize+0x22>
 80011ea:	e009      	b.n	8001200 <NT35510_GetYSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Ysize = NT35510_480X800_HEIGHT;
 80011ec:	683b      	ldr	r3, [r7, #0]
 80011ee:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80011f2:	601a      	str	r2, [r3, #0]
    break;
 80011f4:	e009      	b.n	800120a <NT35510_GetYSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Ysize = NT35510_800X480_HEIGHT;
 80011f6:	683b      	ldr	r3, [r7, #0]
 80011f8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80011fc:	601a      	str	r2, [r3, #0]
    break;
 80011fe:	e004      	b.n	800120a <NT35510_GetYSize+0x36>
  default:
    *Ysize = NT35510_800X480_HEIGHT;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001206:	601a      	str	r2, [r3, #0]
    break;
 8001208:	bf00      	nop
  }
  
  return NT35510_OK;
 800120a:	2300      	movs	r3, #0
}
 800120c:	4618      	mov	r0, r3
 800120e:	370c      	adds	r7, #12
 8001210:	46bd      	mov	sp, r7
 8001212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001216:	4770      	bx	lr
 8001218:	24001110 	.word	0x24001110

0800121c <NT35510_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t NT35510_SetCursor(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001228:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800122c:	4618      	mov	r0, r3
 800122e:	3714      	adds	r7, #20
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <NT35510_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t NT35510_DrawBitmap(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8001238:	b480      	push	{r7}
 800123a:	b085      	sub	sp, #20
 800123c:	af00      	add	r7, sp, #0
 800123e:	60f8      	str	r0, [r7, #12]
 8001240:	60b9      	str	r1, [r7, #8]
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001246:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001254:	4770      	bx	lr

08001256 <NT35510_FillRGBRect>:

int32_t NT35510_FillRGBRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001256:	b480      	push	{r7}
 8001258:	b085      	sub	sp, #20
 800125a:	af00      	add	r7, sp, #0
 800125c:	60f8      	str	r0, [r7, #12]
 800125e:	60b9      	str	r1, [r7, #8]
 8001260:	607a      	str	r2, [r7, #4]
 8001262:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001264:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001268:	4618      	mov	r0, r3
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr

08001274 <NT35510_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawHLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
 8001280:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001282:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001286:	4618      	mov	r0, r3
 8001288:	3714      	adds	r7, #20
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr

08001292 <NT35510_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawVLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001292:	b480      	push	{r7}
 8001294:	b085      	sub	sp, #20
 8001296:	af00      	add	r7, sp, #0
 8001298:	60f8      	str	r0, [r7, #12]
 800129a:	60b9      	str	r1, [r7, #8]
 800129c:	607a      	str	r2, [r7, #4]
 800129e:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 80012a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012a4:	4618      	mov	r0, r3
 80012a6:	3714      	adds	r7, #20
 80012a8:	46bd      	mov	sp, r7
 80012aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ae:	4770      	bx	lr

080012b0 <NT35510_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_FillRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80012b0:	b480      	push	{r7}
 80012b2:	b085      	sub	sp, #20
 80012b4:	af00      	add	r7, sp, #0
 80012b6:	60f8      	str	r0, [r7, #12]
 80012b8:	60b9      	str	r1, [r7, #8]
 80012ba:	607a      	str	r2, [r7, #4]
 80012bc:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 80012be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012c2:	4618      	mov	r0, r3
 80012c4:	3714      	adds	r7, #20
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr

080012ce <NT35510_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_GetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 80012ce:	b480      	push	{r7}
 80012d0:	b085      	sub	sp, #20
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	60f8      	str	r0, [r7, #12]
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 80012dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012e0:	4618      	mov	r0, r3
 80012e2:	3714      	adds	r7, #20
 80012e4:	46bd      	mov	sp, r7
 80012e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012ea:	4770      	bx	lr

080012ec <NT35510_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_SetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 80012ec:	b480      	push	{r7}
 80012ee:	b085      	sub	sp, #20
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	60f8      	str	r0, [r7, #12]
 80012f4:	60b9      	str	r1, [r7, #8]
 80012f6:	607a      	str	r2, [r7, #4]
 80012f8:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 80012fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80012fe:	4618      	mov	r0, r3
 8001300:	3714      	adds	r7, #20
 8001302:	46bd      	mov	sp, r7
 8001304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001308:	4770      	bx	lr

0800130a <NT35510_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800130a:	b590      	push	{r4, r7, lr}
 800130c:	b087      	sub	sp, #28
 800130e:	af00      	add	r7, sp, #0
 8001310:	60f8      	str	r0, [r7, #12]
 8001312:	607a      	str	r2, [r7, #4]
 8001314:	461a      	mov	r2, r3
 8001316:	460b      	mov	r3, r1
 8001318:	817b      	strh	r3, [r7, #10]
 800131a:	4613      	mov	r3, r2
 800131c:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001322:	697b      	ldr	r3, [r7, #20]
 8001324:	689c      	ldr	r4, [r3, #8]
 8001326:	697b      	ldr	r3, [r7, #20]
 8001328:	8818      	ldrh	r0, [r3, #0]
 800132a:	893b      	ldrh	r3, [r7, #8]
 800132c:	8979      	ldrh	r1, [r7, #10]
 800132e:	687a      	ldr	r2, [r7, #4]
 8001330:	47a0      	blx	r4
 8001332:	4603      	mov	r3, r0
}
 8001334:	4618      	mov	r0, r3
 8001336:	371c      	adds	r7, #28
 8001338:	46bd      	mov	sp, r7
 800133a:	bd90      	pop	{r4, r7, pc}

0800133c <NT35510_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800133c:	b590      	push	{r4, r7, lr}
 800133e:	b087      	sub	sp, #28
 8001340:	af00      	add	r7, sp, #0
 8001342:	60f8      	str	r0, [r7, #12]
 8001344:	607a      	str	r2, [r7, #4]
 8001346:	461a      	mov	r2, r3
 8001348:	460b      	mov	r3, r1
 800134a:	817b      	strh	r3, [r7, #10]
 800134c:	4613      	mov	r3, r2
 800134e:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8001350:	68fb      	ldr	r3, [r7, #12]
 8001352:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001354:	697b      	ldr	r3, [r7, #20]
 8001356:	685c      	ldr	r4, [r3, #4]
 8001358:	697b      	ldr	r3, [r7, #20]
 800135a:	8818      	ldrh	r0, [r3, #0]
 800135c:	893b      	ldrh	r3, [r7, #8]
 800135e:	8979      	ldrh	r1, [r7, #10]
 8001360:	687a      	ldr	r2, [r7, #4]
 8001362:	47a0      	blx	r4
 8001364:	4603      	mov	r3, r0
}
 8001366:	4618      	mov	r0, r3
 8001368:	371c      	adds	r7, #28
 800136a:	46bd      	mov	sp, r7
 800136c:	bd90      	pop	{r4, r7, pc}

0800136e <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay  Delay in ms
  */
static int32_t NT35510_IO_Delay(NT35510_Object_t *pObj, uint32_t Delay)
{
 800136e:	b580      	push	{r7, lr}
 8001370:	b084      	sub	sp, #16
 8001372:	af00      	add	r7, sp, #0
 8001374:	6078      	str	r0, [r7, #4]
 8001376:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	68db      	ldr	r3, [r3, #12]
 800137c:	4798      	blx	r3
 800137e:	4603      	mov	r3, r0
 8001380:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001382:	bf00      	nop
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	68db      	ldr	r3, [r3, #12]
 8001388:	4798      	blx	r3
 800138a:	4603      	mov	r3, r0
 800138c:	461a      	mov	r2, r3
 800138e:	68fb      	ldr	r3, [r7, #12]
 8001390:	1ad3      	subs	r3, r2, r3
 8001392:	683a      	ldr	r2, [r7, #0]
 8001394:	429a      	cmp	r2, r3
 8001396:	d8f5      	bhi.n	8001384 <NT35510_IO_Delay+0x16>
  {
  }
  return NT35510_OK;
 8001398:	2300      	movs	r3, #0
}
 800139a:	4618      	mov	r0, r3
 800139c:	3710      	adds	r7, #16
 800139e:	46bd      	mov	sp, r7
 80013a0:	bd80      	pop	{r7, pc}

080013a2 <nt35510_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t nt35510_read_reg(nt35510_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 80013a2:	b590      	push	{r4, r7, lr}
 80013a4:	b085      	sub	sp, #20
 80013a6:	af00      	add	r7, sp, #0
 80013a8:	60f8      	str	r0, [r7, #12]
 80013aa:	607a      	str	r2, [r7, #4]
 80013ac:	461a      	mov	r2, r3
 80013ae:	460b      	mov	r3, r1
 80013b0:	817b      	strh	r3, [r7, #10]
 80013b2:	4613      	mov	r3, r2
 80013b4:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80013b6:	68fb      	ldr	r3, [r7, #12]
 80013b8:	685c      	ldr	r4, [r3, #4]
 80013ba:	68fb      	ldr	r3, [r7, #12]
 80013bc:	6898      	ldr	r0, [r3, #8]
 80013be:	893b      	ldrh	r3, [r7, #8]
 80013c0:	8979      	ldrh	r1, [r7, #10]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	47a0      	blx	r4
 80013c6:	4603      	mov	r3, r0
}
 80013c8:	4618      	mov	r0, r3
 80013ca:	3714      	adds	r7, #20
 80013cc:	46bd      	mov	sp, r7
 80013ce:	bd90      	pop	{r4, r7, pc}

080013d0 <nt35510_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t nt35510_write_reg(nt35510_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 80013d0:	b590      	push	{r4, r7, lr}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	60f8      	str	r0, [r7, #12]
 80013d8:	607a      	str	r2, [r7, #4]
 80013da:	461a      	mov	r2, r3
 80013dc:	460b      	mov	r3, r1
 80013de:	817b      	strh	r3, [r7, #10]
 80013e0:	4613      	mov	r3, r2
 80013e2:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 80013e4:	68fb      	ldr	r3, [r7, #12]
 80013e6:	681c      	ldr	r4, [r3, #0]
 80013e8:	68fb      	ldr	r3, [r7, #12]
 80013ea:	6898      	ldr	r0, [r3, #8]
 80013ec:	893b      	ldrh	r3, [r7, #8]
 80013ee:	8979      	ldrh	r1, [r7, #10]
 80013f0:	687a      	ldr	r2, [r7, #4]
 80013f2:	47a0      	blx	r4
 80013f4:	4603      	mov	r3, r0
}
 80013f6:	4618      	mov	r0, r3
 80013f8:	3714      	adds	r7, #20
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd90      	pop	{r4, r7, pc}
	...

08001400 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 8001400:	b480      	push	{r7}
 8001402:	b085      	sub	sp, #20
 8001404:	af00      	add	r7, sp, #0
 8001406:	6078      	str	r0, [r7, #4]
 8001408:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	2b00      	cmp	r3, #0
 8001412:	d103      	bne.n	800141c <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 8001414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001418:	60fb      	str	r3, [r7, #12]
 800141a:	e014      	b.n	8001446 <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 800141c:	683b      	ldr	r3, [r7, #0]
 800141e:	685a      	ldr	r2, [r3, #4]
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	689a      	ldr	r2, [r3, #8]
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 800142c:	683b      	ldr	r3, [r7, #0]
 800142e:	68da      	ldr	r2, [r3, #12]
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	4a07      	ldr	r2, [pc, #28]	@ (8001454 <OTM8009A_RegisterBusIO+0x54>)
 8001438:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a06      	ldr	r2, [pc, #24]	@ (8001458 <OTM8009A_RegisterBusIO+0x58>)
 800143e:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	687a      	ldr	r2, [r7, #4]
 8001444:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 8001446:	68fb      	ldr	r3, [r7, #12]
}
 8001448:	4618      	mov	r0, r3
 800144a:	3714      	adds	r7, #20
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr
 8001454:	080023bb 	.word	0x080023bb
 8001458:	080023ed 	.word	0x080023ed

0800145c <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b086      	sub	sp, #24
 8001460:	af00      	add	r7, sp, #0
 8001462:	60f8      	str	r0, [r7, #12]
 8001464:	60b9      	str	r1, [r7, #8]
 8001466:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001468:	68fb      	ldr	r3, [r7, #12]
 800146a:	f103 0010 	add.w	r0, r3, #16
 800146e:	2300      	movs	r3, #0
 8001470:	4abf      	ldr	r2, [pc, #764]	@ (8001770 <OTM8009A_Init+0x314>)
 8001472:	2100      	movs	r1, #0
 8001474:	f001 f804 	bl	8002480 <otm8009a_write_reg>
 8001478:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f103 0010 	add.w	r0, r3, #16
 8001480:	2303      	movs	r3, #3
 8001482:	4abc      	ldr	r2, [pc, #752]	@ (8001774 <OTM8009A_Init+0x318>)
 8001484:	21ff      	movs	r1, #255	@ 0xff
 8001486:	f000 fffb 	bl	8002480 <otm8009a_write_reg>
 800148a:	4602      	mov	r2, r0
 800148c:	697b      	ldr	r3, [r7, #20]
 800148e:	4413      	add	r3, r2
 8001490:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001492:	68fb      	ldr	r3, [r7, #12]
 8001494:	f103 0010 	add.w	r0, r3, #16
 8001498:	2300      	movs	r3, #0
 800149a:	4ab7      	ldr	r2, [pc, #732]	@ (8001778 <OTM8009A_Init+0x31c>)
 800149c:	2100      	movs	r1, #0
 800149e:	f000 ffef 	bl	8002480 <otm8009a_write_reg>
 80014a2:	4602      	mov	r2, r0
 80014a4:	697b      	ldr	r3, [r7, #20]
 80014a6:	4413      	add	r3, r2
 80014a8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 80014aa:	68fb      	ldr	r3, [r7, #12]
 80014ac:	f103 0010 	add.w	r0, r3, #16
 80014b0:	2302      	movs	r3, #2
 80014b2:	4ab2      	ldr	r2, [pc, #712]	@ (800177c <OTM8009A_Init+0x320>)
 80014b4:	21ff      	movs	r1, #255	@ 0xff
 80014b6:	f000 ffe3 	bl	8002480 <otm8009a_write_reg>
 80014ba:	4602      	mov	r2, r0
 80014bc:	697b      	ldr	r3, [r7, #20]
 80014be:	4413      	add	r3, r2
 80014c0:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 80014c2:	68fb      	ldr	r3, [r7, #12]
 80014c4:	f103 0010 	add.w	r0, r3, #16
 80014c8:	2300      	movs	r3, #0
 80014ca:	4aab      	ldr	r2, [pc, #684]	@ (8001778 <OTM8009A_Init+0x31c>)
 80014cc:	2100      	movs	r1, #0
 80014ce:	f000 ffd7 	bl	8002480 <otm8009a_write_reg>
 80014d2:	4602      	mov	r2, r0
 80014d4:	697b      	ldr	r3, [r7, #20]
 80014d6:	4413      	add	r3, r2
 80014d8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 80014da:	68fb      	ldr	r3, [r7, #12]
 80014dc:	f103 0010 	add.w	r0, r3, #16
 80014e0:	2300      	movs	r3, #0
 80014e2:	4aa7      	ldr	r2, [pc, #668]	@ (8001780 <OTM8009A_Init+0x324>)
 80014e4:	21c4      	movs	r1, #196	@ 0xc4
 80014e6:	f000 ffcb 	bl	8002480 <otm8009a_write_reg>
 80014ea:	4602      	mov	r2, r0
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	4413      	add	r3, r2
 80014f0:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 80014f2:	210a      	movs	r1, #10
 80014f4:	68f8      	ldr	r0, [r7, #12]
 80014f6:	f000 ff92 	bl	800241e <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	f103 0010 	add.w	r0, r3, #16
 8001500:	2300      	movs	r3, #0
 8001502:	4aa0      	ldr	r2, [pc, #640]	@ (8001784 <OTM8009A_Init+0x328>)
 8001504:	2100      	movs	r1, #0
 8001506:	f000 ffbb 	bl	8002480 <otm8009a_write_reg>
 800150a:	4602      	mov	r2, r0
 800150c:	697b      	ldr	r3, [r7, #20]
 800150e:	4413      	add	r3, r2
 8001510:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	f103 0010 	add.w	r0, r3, #16
 8001518:	2300      	movs	r3, #0
 800151a:	4a9b      	ldr	r2, [pc, #620]	@ (8001788 <OTM8009A_Init+0x32c>)
 800151c:	21c4      	movs	r1, #196	@ 0xc4
 800151e:	f000 ffaf 	bl	8002480 <otm8009a_write_reg>
 8001522:	4602      	mov	r2, r0
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	4413      	add	r3, r2
 8001528:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 800152a:	210a      	movs	r1, #10
 800152c:	68f8      	ldr	r0, [r7, #12]
 800152e:	f000 ff76 	bl	800241e <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 8001532:	68fb      	ldr	r3, [r7, #12]
 8001534:	f103 0010 	add.w	r0, r3, #16
 8001538:	2300      	movs	r3, #0
 800153a:	4a94      	ldr	r2, [pc, #592]	@ (800178c <OTM8009A_Init+0x330>)
 800153c:	2100      	movs	r1, #0
 800153e:	f000 ff9f 	bl	8002480 <otm8009a_write_reg>
 8001542:	4602      	mov	r2, r0
 8001544:	697b      	ldr	r3, [r7, #20]
 8001546:	4413      	add	r3, r2
 8001548:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	f103 0010 	add.w	r0, r3, #16
 8001550:	2300      	movs	r3, #0
 8001552:	4a8f      	ldr	r2, [pc, #572]	@ (8001790 <OTM8009A_Init+0x334>)
 8001554:	21c5      	movs	r1, #197	@ 0xc5
 8001556:	f000 ff93 	bl	8002480 <otm8009a_write_reg>
 800155a:	4602      	mov	r2, r0
 800155c:	697b      	ldr	r3, [r7, #20]
 800155e:	4413      	add	r3, r2
 8001560:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	f103 0010 	add.w	r0, r3, #16
 8001568:	2300      	movs	r3, #0
 800156a:	4a8a      	ldr	r2, [pc, #552]	@ (8001794 <OTM8009A_Init+0x338>)
 800156c:	2100      	movs	r1, #0
 800156e:	f000 ff87 	bl	8002480 <otm8009a_write_reg>
 8001572:	4602      	mov	r2, r0
 8001574:	697b      	ldr	r3, [r7, #20]
 8001576:	4413      	add	r3, r2
 8001578:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	f103 0010 	add.w	r0, r3, #16
 8001580:	2300      	movs	r3, #0
 8001582:	4a85      	ldr	r2, [pc, #532]	@ (8001798 <OTM8009A_Init+0x33c>)
 8001584:	21c5      	movs	r1, #197	@ 0xc5
 8001586:	f000 ff7b 	bl	8002480 <otm8009a_write_reg>
 800158a:	4602      	mov	r2, r0
 800158c:	697b      	ldr	r3, [r7, #20]
 800158e:	4413      	add	r3, r2
 8001590:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8001592:	68fb      	ldr	r3, [r7, #12]
 8001594:	f103 0010 	add.w	r0, r3, #16
 8001598:	2300      	movs	r3, #0
 800159a:	4a80      	ldr	r2, [pc, #512]	@ (800179c <OTM8009A_Init+0x340>)
 800159c:	2100      	movs	r1, #0
 800159e:	f000 ff6f 	bl	8002480 <otm8009a_write_reg>
 80015a2:	4602      	mov	r2, r0
 80015a4:	697b      	ldr	r3, [r7, #20]
 80015a6:	4413      	add	r3, r2
 80015a8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 80015aa:	68fb      	ldr	r3, [r7, #12]
 80015ac:	f103 0010 	add.w	r0, r3, #16
 80015b0:	2300      	movs	r3, #0
 80015b2:	4a7b      	ldr	r2, [pc, #492]	@ (80017a0 <OTM8009A_Init+0x344>)
 80015b4:	21c0      	movs	r1, #192	@ 0xc0
 80015b6:	f000 ff63 	bl	8002480 <otm8009a_write_reg>
 80015ba:	4602      	mov	r2, r0
 80015bc:	697b      	ldr	r3, [r7, #20]
 80015be:	4413      	add	r3, r2
 80015c0:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	f103 0010 	add.w	r0, r3, #16
 80015c8:	2300      	movs	r3, #0
 80015ca:	4a69      	ldr	r2, [pc, #420]	@ (8001770 <OTM8009A_Init+0x314>)
 80015cc:	2100      	movs	r1, #0
 80015ce:	f000 ff57 	bl	8002480 <otm8009a_write_reg>
 80015d2:	4602      	mov	r2, r0
 80015d4:	697b      	ldr	r3, [r7, #20]
 80015d6:	4413      	add	r3, r2
 80015d8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	f103 0010 	add.w	r0, r3, #16
 80015e0:	2300      	movs	r3, #0
 80015e2:	4a70      	ldr	r2, [pc, #448]	@ (80017a4 <OTM8009A_Init+0x348>)
 80015e4:	21d9      	movs	r1, #217	@ 0xd9
 80015e6:	f000 ff4b 	bl	8002480 <otm8009a_write_reg>
 80015ea:	4602      	mov	r2, r0
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	4413      	add	r3, r2
 80015f0:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f103 0010 	add.w	r0, r3, #16
 80015f8:	2300      	movs	r3, #0
 80015fa:	4a6b      	ldr	r2, [pc, #428]	@ (80017a8 <OTM8009A_Init+0x34c>)
 80015fc:	2100      	movs	r1, #0
 80015fe:	f000 ff3f 	bl	8002480 <otm8009a_write_reg>
 8001602:	4602      	mov	r2, r0
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4413      	add	r3, r2
 8001608:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	f103 0010 	add.w	r0, r3, #16
 8001610:	2300      	movs	r3, #0
 8001612:	4a66      	ldr	r2, [pc, #408]	@ (80017ac <OTM8009A_Init+0x350>)
 8001614:	21c1      	movs	r1, #193	@ 0xc1
 8001616:	f000 ff33 	bl	8002480 <otm8009a_write_reg>
 800161a:	4602      	mov	r2, r0
 800161c:	697b      	ldr	r3, [r7, #20]
 800161e:	4413      	add	r3, r2
 8001620:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	f103 0010 	add.w	r0, r3, #16
 8001628:	2300      	movs	r3, #0
 800162a:	4a61      	ldr	r2, [pc, #388]	@ (80017b0 <OTM8009A_Init+0x354>)
 800162c:	2100      	movs	r1, #0
 800162e:	f000 ff27 	bl	8002480 <otm8009a_write_reg>
 8001632:	4602      	mov	r2, r0
 8001634:	697b      	ldr	r3, [r7, #20]
 8001636:	4413      	add	r3, r2
 8001638:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	f103 0010 	add.w	r0, r3, #16
 8001640:	2300      	movs	r3, #0
 8001642:	4a5c      	ldr	r2, [pc, #368]	@ (80017b4 <OTM8009A_Init+0x358>)
 8001644:	21c1      	movs	r1, #193	@ 0xc1
 8001646:	f000 ff1b 	bl	8002480 <otm8009a_write_reg>
 800164a:	4602      	mov	r2, r0
 800164c:	697b      	ldr	r3, [r7, #20]
 800164e:	4413      	add	r3, r2
 8001650:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	f103 0010 	add.w	r0, r3, #16
 8001658:	2300      	movs	r3, #0
 800165a:	4a57      	ldr	r2, [pc, #348]	@ (80017b8 <OTM8009A_Init+0x35c>)
 800165c:	2100      	movs	r1, #0
 800165e:	f000 ff0f 	bl	8002480 <otm8009a_write_reg>
 8001662:	4602      	mov	r2, r0
 8001664:	697b      	ldr	r3, [r7, #20]
 8001666:	4413      	add	r3, r2
 8001668:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800166a:	68fb      	ldr	r3, [r7, #12]
 800166c:	f103 0010 	add.w	r0, r3, #16
 8001670:	2300      	movs	r3, #0
 8001672:	4a52      	ldr	r2, [pc, #328]	@ (80017bc <OTM8009A_Init+0x360>)
 8001674:	21c5      	movs	r1, #197	@ 0xc5
 8001676:	f000 ff03 	bl	8002480 <otm8009a_write_reg>
 800167a:	4602      	mov	r2, r0
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	4413      	add	r3, r2
 8001680:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	f103 0010 	add.w	r0, r3, #16
 8001688:	2300      	movs	r3, #0
 800168a:	4a4d      	ldr	r2, [pc, #308]	@ (80017c0 <OTM8009A_Init+0x364>)
 800168c:	2100      	movs	r1, #0
 800168e:	f000 fef7 	bl	8002480 <otm8009a_write_reg>
 8001692:	4602      	mov	r2, r0
 8001694:	697b      	ldr	r3, [r7, #20]
 8001696:	4413      	add	r3, r2
 8001698:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	f103 0010 	add.w	r0, r3, #16
 80016a0:	2300      	movs	r3, #0
 80016a2:	4a3d      	ldr	r2, [pc, #244]	@ (8001798 <OTM8009A_Init+0x33c>)
 80016a4:	21c5      	movs	r1, #197	@ 0xc5
 80016a6:	f000 feeb 	bl	8002480 <otm8009a_write_reg>
 80016aa:	4602      	mov	r2, r0
 80016ac:	697b      	ldr	r3, [r7, #20]
 80016ae:	4413      	add	r3, r2
 80016b0:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	f103 0010 	add.w	r0, r3, #16
 80016b8:	2300      	movs	r3, #0
 80016ba:	4a2d      	ldr	r2, [pc, #180]	@ (8001770 <OTM8009A_Init+0x314>)
 80016bc:	2100      	movs	r1, #0
 80016be:	f000 fedf 	bl	8002480 <otm8009a_write_reg>
 80016c2:	4602      	mov	r2, r0
 80016c4:	697b      	ldr	r3, [r7, #20]
 80016c6:	4413      	add	r3, r2
 80016c8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 80016ca:	68fb      	ldr	r3, [r7, #12]
 80016cc:	f103 0010 	add.w	r0, r3, #16
 80016d0:	2302      	movs	r3, #2
 80016d2:	4a3c      	ldr	r2, [pc, #240]	@ (80017c4 <OTM8009A_Init+0x368>)
 80016d4:	21d8      	movs	r1, #216	@ 0xd8
 80016d6:	f000 fed3 	bl	8002480 <otm8009a_write_reg>
 80016da:	4602      	mov	r2, r0
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	4413      	add	r3, r2
 80016e0:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	f103 0010 	add.w	r0, r3, #16
 80016e8:	2300      	movs	r3, #0
 80016ea:	4a37      	ldr	r2, [pc, #220]	@ (80017c8 <OTM8009A_Init+0x36c>)
 80016ec:	2100      	movs	r1, #0
 80016ee:	f000 fec7 	bl	8002480 <otm8009a_write_reg>
 80016f2:	4602      	mov	r2, r0
 80016f4:	697b      	ldr	r3, [r7, #20]
 80016f6:	4413      	add	r3, r2
 80016f8:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80016fa:	68fb      	ldr	r3, [r7, #12]
 80016fc:	f103 0010 	add.w	r0, r3, #16
 8001700:	2300      	movs	r3, #0
 8001702:	4a32      	ldr	r2, [pc, #200]	@ (80017cc <OTM8009A_Init+0x370>)
 8001704:	21c5      	movs	r1, #197	@ 0xc5
 8001706:	f000 febb 	bl	8002480 <otm8009a_write_reg>
 800170a:	4602      	mov	r2, r0
 800170c:	697b      	ldr	r3, [r7, #20]
 800170e:	4413      	add	r3, r2
 8001710:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 8001712:	68fb      	ldr	r3, [r7, #12]
 8001714:	f103 0010 	add.w	r0, r3, #16
 8001718:	2300      	movs	r3, #0
 800171a:	4a2d      	ldr	r2, [pc, #180]	@ (80017d0 <OTM8009A_Init+0x374>)
 800171c:	2100      	movs	r1, #0
 800171e:	f000 feaf 	bl	8002480 <otm8009a_write_reg>
 8001722:	4602      	mov	r2, r0
 8001724:	697b      	ldr	r3, [r7, #20]
 8001726:	4413      	add	r3, r2
 8001728:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 800172a:	68fb      	ldr	r3, [r7, #12]
 800172c:	f103 0010 	add.w	r0, r3, #16
 8001730:	2300      	movs	r3, #0
 8001732:	4a28      	ldr	r2, [pc, #160]	@ (80017d4 <OTM8009A_Init+0x378>)
 8001734:	21c0      	movs	r1, #192	@ 0xc0
 8001736:	f000 fea3 	bl	8002480 <otm8009a_write_reg>
 800173a:	4602      	mov	r2, r0
 800173c:	697b      	ldr	r3, [r7, #20]
 800173e:	4413      	add	r3, r2
 8001740:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f103 0010 	add.w	r0, r3, #16
 8001748:	2300      	movs	r3, #0
 800174a:	4a23      	ldr	r2, [pc, #140]	@ (80017d8 <OTM8009A_Init+0x37c>)
 800174c:	2100      	movs	r1, #0
 800174e:	f000 fe97 	bl	8002480 <otm8009a_write_reg>
 8001752:	4602      	mov	r2, r0
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	4413      	add	r3, r2
 8001758:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	f103 0010 	add.w	r0, r3, #16
 8001760:	2300      	movs	r3, #0
 8001762:	4a1e      	ldr	r2, [pc, #120]	@ (80017dc <OTM8009A_Init+0x380>)
 8001764:	21c5      	movs	r1, #197	@ 0xc5
 8001766:	f000 fe8b 	bl	8002480 <otm8009a_write_reg>
 800176a:	4602      	mov	r2, r0
 800176c:	e038      	b.n	80017e0 <OTM8009A_Init+0x384>
 800176e:	bf00      	nop
 8001770:	0801e635 	.word	0x0801e635
 8001774:	0801e668 	.word	0x0801e668
 8001778:	0801e636 	.word	0x0801e636
 800177c:	0801e66c 	.word	0x0801e66c
 8001780:	0801e637 	.word	0x0801e637
 8001784:	0801e638 	.word	0x0801e638
 8001788:	0801e639 	.word	0x0801e639
 800178c:	0801e63a 	.word	0x0801e63a
 8001790:	0801e63b 	.word	0x0801e63b
 8001794:	0801e63c 	.word	0x0801e63c
 8001798:	0801e63d 	.word	0x0801e63d
 800179c:	0801e63e 	.word	0x0801e63e
 80017a0:	0801e63f 	.word	0x0801e63f
 80017a4:	0801e640 	.word	0x0801e640
 80017a8:	0801e641 	.word	0x0801e641
 80017ac:	0801e642 	.word	0x0801e642
 80017b0:	0801e643 	.word	0x0801e643
 80017b4:	0801e644 	.word	0x0801e644
 80017b8:	0801e645 	.word	0x0801e645
 80017bc:	0801e646 	.word	0x0801e646
 80017c0:	0801e647 	.word	0x0801e647
 80017c4:	0801e670 	.word	0x0801e670
 80017c8:	0801e648 	.word	0x0801e648
 80017cc:	0801e649 	.word	0x0801e649
 80017d0:	0801e64a 	.word	0x0801e64a
 80017d4:	0801e64b 	.word	0x0801e64b
 80017d8:	0801e64c 	.word	0x0801e64c
 80017dc:	0801e64d 	.word	0x0801e64d
 80017e0:	697b      	ldr	r3, [r7, #20]
 80017e2:	4413      	add	r3, r2
 80017e4:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	f103 0010 	add.w	r0, r3, #16
 80017ec:	2300      	movs	r3, #0
 80017ee:	4abe      	ldr	r2, [pc, #760]	@ (8001ae8 <OTM8009A_Init+0x68c>)
 80017f0:	2100      	movs	r1, #0
 80017f2:	f000 fe45 	bl	8002480 <otm8009a_write_reg>
 80017f6:	4602      	mov	r2, r0
 80017f8:	697b      	ldr	r3, [r7, #20]
 80017fa:	4413      	add	r3, r2
 80017fc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	f103 0010 	add.w	r0, r3, #16
 8001804:	2300      	movs	r3, #0
 8001806:	4ab9      	ldr	r2, [pc, #740]	@ (8001aec <OTM8009A_Init+0x690>)
 8001808:	21c4      	movs	r1, #196	@ 0xc4
 800180a:	f000 fe39 	bl	8002480 <otm8009a_write_reg>
 800180e:	4602      	mov	r2, r0
 8001810:	697b      	ldr	r3, [r7, #20]
 8001812:	4413      	add	r3, r2
 8001814:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	f103 0010 	add.w	r0, r3, #16
 800181c:	2300      	movs	r3, #0
 800181e:	4ab4      	ldr	r2, [pc, #720]	@ (8001af0 <OTM8009A_Init+0x694>)
 8001820:	2100      	movs	r1, #0
 8001822:	f000 fe2d 	bl	8002480 <otm8009a_write_reg>
 8001826:	4602      	mov	r2, r0
 8001828:	697b      	ldr	r3, [r7, #20]
 800182a:	4413      	add	r3, r2
 800182c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 800182e:	68fb      	ldr	r3, [r7, #12]
 8001830:	f103 0010 	add.w	r0, r3, #16
 8001834:	2300      	movs	r3, #0
 8001836:	4aaf      	ldr	r2, [pc, #700]	@ (8001af4 <OTM8009A_Init+0x698>)
 8001838:	21c1      	movs	r1, #193	@ 0xc1
 800183a:	f000 fe21 	bl	8002480 <otm8009a_write_reg>
 800183e:	4602      	mov	r2, r0
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	4413      	add	r3, r2
 8001844:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 8001846:	68fb      	ldr	r3, [r7, #12]
 8001848:	f103 0010 	add.w	r0, r3, #16
 800184c:	2300      	movs	r3, #0
 800184e:	4aaa      	ldr	r2, [pc, #680]	@ (8001af8 <OTM8009A_Init+0x69c>)
 8001850:	2100      	movs	r1, #0
 8001852:	f000 fe15 	bl	8002480 <otm8009a_write_reg>
 8001856:	4602      	mov	r2, r0
 8001858:	697b      	ldr	r3, [r7, #20]
 800185a:	4413      	add	r3, r2
 800185c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	f103 0010 	add.w	r0, r3, #16
 8001864:	2302      	movs	r3, #2
 8001866:	4aa5      	ldr	r2, [pc, #660]	@ (8001afc <OTM8009A_Init+0x6a0>)
 8001868:	21b3      	movs	r1, #179	@ 0xb3
 800186a:	f000 fe09 	bl	8002480 <otm8009a_write_reg>
 800186e:	4602      	mov	r2, r0
 8001870:	697b      	ldr	r3, [r7, #20]
 8001872:	4413      	add	r3, r2
 8001874:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001876:	68fb      	ldr	r3, [r7, #12]
 8001878:	f103 0010 	add.w	r0, r3, #16
 800187c:	2300      	movs	r3, #0
 800187e:	4aa0      	ldr	r2, [pc, #640]	@ (8001b00 <OTM8009A_Init+0x6a4>)
 8001880:	2100      	movs	r1, #0
 8001882:	f000 fdfd 	bl	8002480 <otm8009a_write_reg>
 8001886:	4602      	mov	r2, r0
 8001888:	697b      	ldr	r3, [r7, #20]
 800188a:	4413      	add	r3, r2
 800188c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	f103 0010 	add.w	r0, r3, #16
 8001894:	2306      	movs	r3, #6
 8001896:	4a9b      	ldr	r2, [pc, #620]	@ (8001b04 <OTM8009A_Init+0x6a8>)
 8001898:	21ce      	movs	r1, #206	@ 0xce
 800189a:	f000 fdf1 	bl	8002480 <otm8009a_write_reg>
 800189e:	4602      	mov	r2, r0
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	4413      	add	r3, r2
 80018a4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	f103 0010 	add.w	r0, r3, #16
 80018ac:	2300      	movs	r3, #0
 80018ae:	4a96      	ldr	r2, [pc, #600]	@ (8001b08 <OTM8009A_Init+0x6ac>)
 80018b0:	2100      	movs	r1, #0
 80018b2:	f000 fde5 	bl	8002480 <otm8009a_write_reg>
 80018b6:	4602      	mov	r2, r0
 80018b8:	697b      	ldr	r3, [r7, #20]
 80018ba:	4413      	add	r3, r2
 80018bc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	f103 0010 	add.w	r0, r3, #16
 80018c4:	230e      	movs	r3, #14
 80018c6:	4a91      	ldr	r2, [pc, #580]	@ (8001b0c <OTM8009A_Init+0x6b0>)
 80018c8:	21ce      	movs	r1, #206	@ 0xce
 80018ca:	f000 fdd9 	bl	8002480 <otm8009a_write_reg>
 80018ce:	4602      	mov	r2, r0
 80018d0:	697b      	ldr	r3, [r7, #20]
 80018d2:	4413      	add	r3, r2
 80018d4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80018d6:	68fb      	ldr	r3, [r7, #12]
 80018d8:	f103 0010 	add.w	r0, r3, #16
 80018dc:	2300      	movs	r3, #0
 80018de:	4a8c      	ldr	r2, [pc, #560]	@ (8001b10 <OTM8009A_Init+0x6b4>)
 80018e0:	2100      	movs	r1, #0
 80018e2:	f000 fdcd 	bl	8002480 <otm8009a_write_reg>
 80018e6:	4602      	mov	r2, r0
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	4413      	add	r3, r2
 80018ec:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	f103 0010 	add.w	r0, r3, #16
 80018f4:	230e      	movs	r3, #14
 80018f6:	4a87      	ldr	r2, [pc, #540]	@ (8001b14 <OTM8009A_Init+0x6b8>)
 80018f8:	21ce      	movs	r1, #206	@ 0xce
 80018fa:	f000 fdc1 	bl	8002480 <otm8009a_write_reg>
 80018fe:	4602      	mov	r2, r0
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	4413      	add	r3, r2
 8001904:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001906:	68fb      	ldr	r3, [r7, #12]
 8001908:	f103 0010 	add.w	r0, r3, #16
 800190c:	2300      	movs	r3, #0
 800190e:	4a82      	ldr	r2, [pc, #520]	@ (8001b18 <OTM8009A_Init+0x6bc>)
 8001910:	2100      	movs	r1, #0
 8001912:	f000 fdb5 	bl	8002480 <otm8009a_write_reg>
 8001916:	4602      	mov	r2, r0
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	4413      	add	r3, r2
 800191c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	f103 0010 	add.w	r0, r3, #16
 8001924:	230a      	movs	r3, #10
 8001926:	4a7d      	ldr	r2, [pc, #500]	@ (8001b1c <OTM8009A_Init+0x6c0>)
 8001928:	21cf      	movs	r1, #207	@ 0xcf
 800192a:	f000 fda9 	bl	8002480 <otm8009a_write_reg>
 800192e:	4602      	mov	r2, r0
 8001930:	697b      	ldr	r3, [r7, #20]
 8001932:	4413      	add	r3, r2
 8001934:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001936:	68fb      	ldr	r3, [r7, #12]
 8001938:	f103 0010 	add.w	r0, r3, #16
 800193c:	2300      	movs	r3, #0
 800193e:	4a78      	ldr	r2, [pc, #480]	@ (8001b20 <OTM8009A_Init+0x6c4>)
 8001940:	2100      	movs	r1, #0
 8001942:	f000 fd9d 	bl	8002480 <otm8009a_write_reg>
 8001946:	4602      	mov	r2, r0
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	4413      	add	r3, r2
 800194c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	f103 0010 	add.w	r0, r3, #16
 8001954:	2300      	movs	r3, #0
 8001956:	4a73      	ldr	r2, [pc, #460]	@ (8001b24 <OTM8009A_Init+0x6c8>)
 8001958:	21cf      	movs	r1, #207	@ 0xcf
 800195a:	f000 fd91 	bl	8002480 <otm8009a_write_reg>
 800195e:	4602      	mov	r2, r0
 8001960:	697b      	ldr	r3, [r7, #20]
 8001962:	4413      	add	r3, r2
 8001964:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	f103 0010 	add.w	r0, r3, #16
 800196c:	2300      	movs	r3, #0
 800196e:	4a64      	ldr	r2, [pc, #400]	@ (8001b00 <OTM8009A_Init+0x6a4>)
 8001970:	2100      	movs	r1, #0
 8001972:	f000 fd85 	bl	8002480 <otm8009a_write_reg>
 8001976:	4602      	mov	r2, r0
 8001978:	697b      	ldr	r3, [r7, #20]
 800197a:	4413      	add	r3, r2
 800197c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	f103 0010 	add.w	r0, r3, #16
 8001984:	230a      	movs	r3, #10
 8001986:	4a68      	ldr	r2, [pc, #416]	@ (8001b28 <OTM8009A_Init+0x6cc>)
 8001988:	21cb      	movs	r1, #203	@ 0xcb
 800198a:	f000 fd79 	bl	8002480 <otm8009a_write_reg>
 800198e:	4602      	mov	r2, r0
 8001990:	697b      	ldr	r3, [r7, #20]
 8001992:	4413      	add	r3, r2
 8001994:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001996:	68fb      	ldr	r3, [r7, #12]
 8001998:	f103 0010 	add.w	r0, r3, #16
 800199c:	2300      	movs	r3, #0
 800199e:	4a63      	ldr	r2, [pc, #396]	@ (8001b2c <OTM8009A_Init+0x6d0>)
 80019a0:	2100      	movs	r1, #0
 80019a2:	f000 fd6d 	bl	8002480 <otm8009a_write_reg>
 80019a6:	4602      	mov	r2, r0
 80019a8:	697b      	ldr	r3, [r7, #20]
 80019aa:	4413      	add	r3, r2
 80019ac:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	f103 0010 	add.w	r0, r3, #16
 80019b4:	230f      	movs	r3, #15
 80019b6:	4a5e      	ldr	r2, [pc, #376]	@ (8001b30 <OTM8009A_Init+0x6d4>)
 80019b8:	21cb      	movs	r1, #203	@ 0xcb
 80019ba:	f000 fd61 	bl	8002480 <otm8009a_write_reg>
 80019be:	4602      	mov	r2, r0
 80019c0:	697b      	ldr	r3, [r7, #20]
 80019c2:	4413      	add	r3, r2
 80019c4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	f103 0010 	add.w	r0, r3, #16
 80019cc:	2300      	movs	r3, #0
 80019ce:	4a4e      	ldr	r2, [pc, #312]	@ (8001b08 <OTM8009A_Init+0x6ac>)
 80019d0:	2100      	movs	r1, #0
 80019d2:	f000 fd55 	bl	8002480 <otm8009a_write_reg>
 80019d6:	4602      	mov	r2, r0
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	4413      	add	r3, r2
 80019dc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80019de:	68fb      	ldr	r3, [r7, #12]
 80019e0:	f103 0010 	add.w	r0, r3, #16
 80019e4:	230f      	movs	r3, #15
 80019e6:	4a53      	ldr	r2, [pc, #332]	@ (8001b34 <OTM8009A_Init+0x6d8>)
 80019e8:	21cb      	movs	r1, #203	@ 0xcb
 80019ea:	f000 fd49 	bl	8002480 <otm8009a_write_reg>
 80019ee:	4602      	mov	r2, r0
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	4413      	add	r3, r2
 80019f4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80019f6:	68fb      	ldr	r3, [r7, #12]
 80019f8:	f103 0010 	add.w	r0, r3, #16
 80019fc:	2300      	movs	r3, #0
 80019fe:	4a44      	ldr	r2, [pc, #272]	@ (8001b10 <OTM8009A_Init+0x6b4>)
 8001a00:	2100      	movs	r1, #0
 8001a02:	f000 fd3d 	bl	8002480 <otm8009a_write_reg>
 8001a06:	4602      	mov	r2, r0
 8001a08:	697b      	ldr	r3, [r7, #20]
 8001a0a:	4413      	add	r3, r2
 8001a0c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 8001a0e:	68fb      	ldr	r3, [r7, #12]
 8001a10:	f103 0010 	add.w	r0, r3, #16
 8001a14:	230a      	movs	r3, #10
 8001a16:	4a48      	ldr	r2, [pc, #288]	@ (8001b38 <OTM8009A_Init+0x6dc>)
 8001a18:	21cb      	movs	r1, #203	@ 0xcb
 8001a1a:	f000 fd31 	bl	8002480 <otm8009a_write_reg>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	697b      	ldr	r3, [r7, #20]
 8001a22:	4413      	add	r3, r2
 8001a24:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001a26:	68fb      	ldr	r3, [r7, #12]
 8001a28:	f103 0010 	add.w	r0, r3, #16
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	4a3a      	ldr	r2, [pc, #232]	@ (8001b18 <OTM8009A_Init+0x6bc>)
 8001a30:	2100      	movs	r1, #0
 8001a32:	f000 fd25 	bl	8002480 <otm8009a_write_reg>
 8001a36:	4602      	mov	r2, r0
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	4413      	add	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	f103 0010 	add.w	r0, r3, #16
 8001a44:	230f      	movs	r3, #15
 8001a46:	4a3d      	ldr	r2, [pc, #244]	@ (8001b3c <OTM8009A_Init+0x6e0>)
 8001a48:	21cb      	movs	r1, #203	@ 0xcb
 8001a4a:	f000 fd19 	bl	8002480 <otm8009a_write_reg>
 8001a4e:	4602      	mov	r2, r0
 8001a50:	697b      	ldr	r3, [r7, #20]
 8001a52:	4413      	add	r3, r2
 8001a54:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001a56:	68fb      	ldr	r3, [r7, #12]
 8001a58:	f103 0010 	add.w	r0, r3, #16
 8001a5c:	2300      	movs	r3, #0
 8001a5e:	4a30      	ldr	r2, [pc, #192]	@ (8001b20 <OTM8009A_Init+0x6c4>)
 8001a60:	2100      	movs	r1, #0
 8001a62:	f000 fd0d 	bl	8002480 <otm8009a_write_reg>
 8001a66:	4602      	mov	r2, r0
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8001a6e:	68fb      	ldr	r3, [r7, #12]
 8001a70:	f103 0010 	add.w	r0, r3, #16
 8001a74:	230f      	movs	r3, #15
 8001a76:	4a32      	ldr	r2, [pc, #200]	@ (8001b40 <OTM8009A_Init+0x6e4>)
 8001a78:	21cb      	movs	r1, #203	@ 0xcb
 8001a7a:	f000 fd01 	bl	8002480 <otm8009a_write_reg>
 8001a7e:	4602      	mov	r2, r0
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	4413      	add	r3, r2
 8001a84:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	f103 0010 	add.w	r0, r3, #16
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	4a2d      	ldr	r2, [pc, #180]	@ (8001b44 <OTM8009A_Init+0x6e8>)
 8001a90:	2100      	movs	r1, #0
 8001a92:	f000 fcf5 	bl	8002480 <otm8009a_write_reg>
 8001a96:	4602      	mov	r2, r0
 8001a98:	697b      	ldr	r3, [r7, #20]
 8001a9a:	4413      	add	r3, r2
 8001a9c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8001a9e:	68fb      	ldr	r3, [r7, #12]
 8001aa0:	f103 0010 	add.w	r0, r3, #16
 8001aa4:	230a      	movs	r3, #10
 8001aa6:	4a28      	ldr	r2, [pc, #160]	@ (8001b48 <OTM8009A_Init+0x6ec>)
 8001aa8:	21cb      	movs	r1, #203	@ 0xcb
 8001aaa:	f000 fce9 	bl	8002480 <otm8009a_write_reg>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	4413      	add	r3, r2
 8001ab4:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 8001ab6:	68fb      	ldr	r3, [r7, #12]
 8001ab8:	f103 0010 	add.w	r0, r3, #16
 8001abc:	2300      	movs	r3, #0
 8001abe:	4a23      	ldr	r2, [pc, #140]	@ (8001b4c <OTM8009A_Init+0x6f0>)
 8001ac0:	2100      	movs	r1, #0
 8001ac2:	f000 fcdd 	bl	8002480 <otm8009a_write_reg>
 8001ac6:	4602      	mov	r2, r0
 8001ac8:	697b      	ldr	r3, [r7, #20]
 8001aca:	4413      	add	r3, r2
 8001acc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	f103 0010 	add.w	r0, r3, #16
 8001ad4:	230a      	movs	r3, #10
 8001ad6:	4a1e      	ldr	r2, [pc, #120]	@ (8001b50 <OTM8009A_Init+0x6f4>)
 8001ad8:	21cb      	movs	r1, #203	@ 0xcb
 8001ada:	f000 fcd1 	bl	8002480 <otm8009a_write_reg>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	697b      	ldr	r3, [r7, #20]
 8001ae2:	4413      	add	r3, r2
 8001ae4:	617b      	str	r3, [r7, #20]
 8001ae6:	e035      	b.n	8001b54 <OTM8009A_Init+0x6f8>
 8001ae8:	0801e641 	.word	0x0801e641
 8001aec:	0801e64e 	.word	0x0801e64e
 8001af0:	0801e643 	.word	0x0801e643
 8001af4:	0801e64f 	.word	0x0801e64f
 8001af8:	0801e650 	.word	0x0801e650
 8001afc:	0801e674 	.word	0x0801e674
 8001b00:	0801e636 	.word	0x0801e636
 8001b04:	0801e678 	.word	0x0801e678
 8001b08:	0801e651 	.word	0x0801e651
 8001b0c:	0801e680 	.word	0x0801e680
 8001b10:	0801e652 	.word	0x0801e652
 8001b14:	0801e690 	.word	0x0801e690
 8001b18:	0801e653 	.word	0x0801e653
 8001b1c:	0801e6a0 	.word	0x0801e6a0
 8001b20:	0801e654 	.word	0x0801e654
 8001b24:	0801e661 	.word	0x0801e661
 8001b28:	0801e6ac 	.word	0x0801e6ac
 8001b2c:	0801e655 	.word	0x0801e655
 8001b30:	0801e6b8 	.word	0x0801e6b8
 8001b34:	0801e6c8 	.word	0x0801e6c8
 8001b38:	0801e6d8 	.word	0x0801e6d8
 8001b3c:	0801e6e4 	.word	0x0801e6e4
 8001b40:	0801e6f4 	.word	0x0801e6f4
 8001b44:	0801e656 	.word	0x0801e656
 8001b48:	0801e704 	.word	0x0801e704
 8001b4c:	0801e657 	.word	0x0801e657
 8001b50:	0801e710 	.word	0x0801e710
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	f103 0010 	add.w	r0, r3, #16
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	4aae      	ldr	r2, [pc, #696]	@ (8001e18 <OTM8009A_Init+0x9bc>)
 8001b5e:	2100      	movs	r1, #0
 8001b60:	f000 fc8e 	bl	8002480 <otm8009a_write_reg>
 8001b64:	4602      	mov	r2, r0
 8001b66:	697b      	ldr	r3, [r7, #20]
 8001b68:	4413      	add	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	f103 0010 	add.w	r0, r3, #16
 8001b72:	230a      	movs	r3, #10
 8001b74:	4aa9      	ldr	r2, [pc, #676]	@ (8001e1c <OTM8009A_Init+0x9c0>)
 8001b76:	21cc      	movs	r1, #204	@ 0xcc
 8001b78:	f000 fc82 	bl	8002480 <otm8009a_write_reg>
 8001b7c:	4602      	mov	r2, r0
 8001b7e:	697b      	ldr	r3, [r7, #20]
 8001b80:	4413      	add	r3, r2
 8001b82:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	f103 0010 	add.w	r0, r3, #16
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	4aa4      	ldr	r2, [pc, #656]	@ (8001e20 <OTM8009A_Init+0x9c4>)
 8001b8e:	2100      	movs	r1, #0
 8001b90:	f000 fc76 	bl	8002480 <otm8009a_write_reg>
 8001b94:	4602      	mov	r2, r0
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	4413      	add	r3, r2
 8001b9a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	f103 0010 	add.w	r0, r3, #16
 8001ba2:	230f      	movs	r3, #15
 8001ba4:	4a9f      	ldr	r2, [pc, #636]	@ (8001e24 <OTM8009A_Init+0x9c8>)
 8001ba6:	21cc      	movs	r1, #204	@ 0xcc
 8001ba8:	f000 fc6a 	bl	8002480 <otm8009a_write_reg>
 8001bac:	4602      	mov	r2, r0
 8001bae:	697b      	ldr	r3, [r7, #20]
 8001bb0:	4413      	add	r3, r2
 8001bb2:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8001bb4:	68fb      	ldr	r3, [r7, #12]
 8001bb6:	f103 0010 	add.w	r0, r3, #16
 8001bba:	2300      	movs	r3, #0
 8001bbc:	4a9a      	ldr	r2, [pc, #616]	@ (8001e28 <OTM8009A_Init+0x9cc>)
 8001bbe:	2100      	movs	r1, #0
 8001bc0:	f000 fc5e 	bl	8002480 <otm8009a_write_reg>
 8001bc4:	4602      	mov	r2, r0
 8001bc6:	697b      	ldr	r3, [r7, #20]
 8001bc8:	4413      	add	r3, r2
 8001bca:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	f103 0010 	add.w	r0, r3, #16
 8001bd2:	230f      	movs	r3, #15
 8001bd4:	4a95      	ldr	r2, [pc, #596]	@ (8001e2c <OTM8009A_Init+0x9d0>)
 8001bd6:	21cc      	movs	r1, #204	@ 0xcc
 8001bd8:	f000 fc52 	bl	8002480 <otm8009a_write_reg>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	697b      	ldr	r3, [r7, #20]
 8001be0:	4413      	add	r3, r2
 8001be2:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 8001be4:	68fb      	ldr	r3, [r7, #12]
 8001be6:	f103 0010 	add.w	r0, r3, #16
 8001bea:	2300      	movs	r3, #0
 8001bec:	4a90      	ldr	r2, [pc, #576]	@ (8001e30 <OTM8009A_Init+0x9d4>)
 8001bee:	2100      	movs	r1, #0
 8001bf0:	f000 fc46 	bl	8002480 <otm8009a_write_reg>
 8001bf4:	4602      	mov	r2, r0
 8001bf6:	697b      	ldr	r3, [r7, #20]
 8001bf8:	4413      	add	r3, r2
 8001bfa:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f103 0010 	add.w	r0, r3, #16
 8001c02:	230a      	movs	r3, #10
 8001c04:	4a8b      	ldr	r2, [pc, #556]	@ (8001e34 <OTM8009A_Init+0x9d8>)
 8001c06:	21cc      	movs	r1, #204	@ 0xcc
 8001c08:	f000 fc3a 	bl	8002480 <otm8009a_write_reg>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	697b      	ldr	r3, [r7, #20]
 8001c10:	4413      	add	r3, r2
 8001c12:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 8001c14:	68fb      	ldr	r3, [r7, #12]
 8001c16:	f103 0010 	add.w	r0, r3, #16
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	4a86      	ldr	r2, [pc, #536]	@ (8001e38 <OTM8009A_Init+0x9dc>)
 8001c1e:	2100      	movs	r1, #0
 8001c20:	f000 fc2e 	bl	8002480 <otm8009a_write_reg>
 8001c24:	4602      	mov	r2, r0
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	4413      	add	r3, r2
 8001c2a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	f103 0010 	add.w	r0, r3, #16
 8001c32:	230f      	movs	r3, #15
 8001c34:	4a81      	ldr	r2, [pc, #516]	@ (8001e3c <OTM8009A_Init+0x9e0>)
 8001c36:	21cc      	movs	r1, #204	@ 0xcc
 8001c38:	f000 fc22 	bl	8002480 <otm8009a_write_reg>
 8001c3c:	4602      	mov	r2, r0
 8001c3e:	697b      	ldr	r3, [r7, #20]
 8001c40:	4413      	add	r3, r2
 8001c42:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	f103 0010 	add.w	r0, r3, #16
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	4a7c      	ldr	r2, [pc, #496]	@ (8001e40 <OTM8009A_Init+0x9e4>)
 8001c4e:	2100      	movs	r1, #0
 8001c50:	f000 fc16 	bl	8002480 <otm8009a_write_reg>
 8001c54:	4602      	mov	r2, r0
 8001c56:	697b      	ldr	r3, [r7, #20]
 8001c58:	4413      	add	r3, r2
 8001c5a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8001c5c:	68fb      	ldr	r3, [r7, #12]
 8001c5e:	f103 0010 	add.w	r0, r3, #16
 8001c62:	230f      	movs	r3, #15
 8001c64:	4a77      	ldr	r2, [pc, #476]	@ (8001e44 <OTM8009A_Init+0x9e8>)
 8001c66:	21cc      	movs	r1, #204	@ 0xcc
 8001c68:	f000 fc0a 	bl	8002480 <otm8009a_write_reg>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	697b      	ldr	r3, [r7, #20]
 8001c70:	4413      	add	r3, r2
 8001c72:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8001c74:	68fb      	ldr	r3, [r7, #12]
 8001c76:	f103 0010 	add.w	r0, r3, #16
 8001c7a:	2300      	movs	r3, #0
 8001c7c:	4a72      	ldr	r2, [pc, #456]	@ (8001e48 <OTM8009A_Init+0x9ec>)
 8001c7e:	2100      	movs	r1, #0
 8001c80:	f000 fbfe 	bl	8002480 <otm8009a_write_reg>
 8001c84:	4602      	mov	r2, r0
 8001c86:	697b      	ldr	r3, [r7, #20]
 8001c88:	4413      	add	r3, r2
 8001c8a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	f103 0010 	add.w	r0, r3, #16
 8001c92:	2300      	movs	r3, #0
 8001c94:	4a6d      	ldr	r2, [pc, #436]	@ (8001e4c <OTM8009A_Init+0x9f0>)
 8001c96:	21c5      	movs	r1, #197	@ 0xc5
 8001c98:	f000 fbf2 	bl	8002480 <otm8009a_write_reg>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	697b      	ldr	r3, [r7, #20]
 8001ca0:	4413      	add	r3, r2
 8001ca2:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f103 0010 	add.w	r0, r3, #16
 8001caa:	2300      	movs	r3, #0
 8001cac:	4a68      	ldr	r2, [pc, #416]	@ (8001e50 <OTM8009A_Init+0x9f4>)
 8001cae:	2100      	movs	r1, #0
 8001cb0:	f000 fbe6 	bl	8002480 <otm8009a_write_reg>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	4413      	add	r3, r2
 8001cba:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f103 0010 	add.w	r0, r3, #16
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	4a63      	ldr	r2, [pc, #396]	@ (8001e54 <OTM8009A_Init+0x9f8>)
 8001cc6:	21f5      	movs	r1, #245	@ 0xf5
 8001cc8:	f000 fbda 	bl	8002480 <otm8009a_write_reg>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	697b      	ldr	r3, [r7, #20]
 8001cd0:	4413      	add	r3, r2
 8001cd2:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	f103 0010 	add.w	r0, r3, #16
 8001cda:	2300      	movs	r3, #0
 8001cdc:	4a5e      	ldr	r2, [pc, #376]	@ (8001e58 <OTM8009A_Init+0x9fc>)
 8001cde:	2100      	movs	r1, #0
 8001ce0:	f000 fbce 	bl	8002480 <otm8009a_write_reg>
 8001ce4:	4602      	mov	r2, r0
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	4413      	add	r3, r2
 8001cea:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 8001cec:	68fb      	ldr	r3, [r7, #12]
 8001cee:	f103 0010 	add.w	r0, r3, #16
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	4a59      	ldr	r2, [pc, #356]	@ (8001e5c <OTM8009A_Init+0xa00>)
 8001cf6:	21c6      	movs	r1, #198	@ 0xc6
 8001cf8:	f000 fbc2 	bl	8002480 <otm8009a_write_reg>
 8001cfc:	4602      	mov	r2, r0
 8001cfe:	697b      	ldr	r3, [r7, #20]
 8001d00:	4413      	add	r3, r2
 8001d02:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001d04:	68fb      	ldr	r3, [r7, #12]
 8001d06:	f103 0010 	add.w	r0, r3, #16
 8001d0a:	2300      	movs	r3, #0
 8001d0c:	4a54      	ldr	r2, [pc, #336]	@ (8001e60 <OTM8009A_Init+0xa04>)
 8001d0e:	2100      	movs	r1, #0
 8001d10:	f000 fbb6 	bl	8002480 <otm8009a_write_reg>
 8001d14:	4602      	mov	r2, r0
 8001d16:	697b      	ldr	r3, [r7, #20]
 8001d18:	4413      	add	r3, r2
 8001d1a:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f103 0010 	add.w	r0, r3, #16
 8001d22:	2303      	movs	r3, #3
 8001d24:	4a4f      	ldr	r2, [pc, #316]	@ (8001e64 <OTM8009A_Init+0xa08>)
 8001d26:	21ff      	movs	r1, #255	@ 0xff
 8001d28:	f000 fbaa 	bl	8002480 <otm8009a_write_reg>
 8001d2c:	4602      	mov	r2, r0
 8001d2e:	697b      	ldr	r3, [r7, #20]
 8001d30:	4413      	add	r3, r2
 8001d32:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	f103 0010 	add.w	r0, r3, #16
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	4a48      	ldr	r2, [pc, #288]	@ (8001e60 <OTM8009A_Init+0xa04>)
 8001d3e:	2100      	movs	r1, #0
 8001d40:	f000 fb9e 	bl	8002480 <otm8009a_write_reg>
 8001d44:	4602      	mov	r2, r0
 8001d46:	697b      	ldr	r3, [r7, #20]
 8001d48:	4413      	add	r3, r2
 8001d4a:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001d4c:	68fb      	ldr	r3, [r7, #12]
 8001d4e:	f103 0010 	add.w	r0, r3, #16
 8001d52:	2300      	movs	r3, #0
 8001d54:	4a42      	ldr	r2, [pc, #264]	@ (8001e60 <OTM8009A_Init+0xa04>)
 8001d56:	2100      	movs	r1, #0
 8001d58:	f000 fb92 	bl	8002480 <otm8009a_write_reg>
 8001d5c:	4602      	mov	r2, r0
 8001d5e:	697b      	ldr	r3, [r7, #20]
 8001d60:	4413      	add	r3, r2
 8001d62:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	f103 0010 	add.w	r0, r3, #16
 8001d6a:	2310      	movs	r3, #16
 8001d6c:	4a3e      	ldr	r2, [pc, #248]	@ (8001e68 <OTM8009A_Init+0xa0c>)
 8001d6e:	21e1      	movs	r1, #225	@ 0xe1
 8001d70:	f000 fb86 	bl	8002480 <otm8009a_write_reg>
 8001d74:	4602      	mov	r2, r0
 8001d76:	697b      	ldr	r3, [r7, #20]
 8001d78:	4413      	add	r3, r2
 8001d7a:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	f103 0010 	add.w	r0, r3, #16
 8001d82:	2300      	movs	r3, #0
 8001d84:	4a36      	ldr	r2, [pc, #216]	@ (8001e60 <OTM8009A_Init+0xa04>)
 8001d86:	2100      	movs	r1, #0
 8001d88:	f000 fb7a 	bl	8002480 <otm8009a_write_reg>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	697b      	ldr	r3, [r7, #20]
 8001d90:	4413      	add	r3, r2
 8001d92:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8001d94:	68fb      	ldr	r3, [r7, #12]
 8001d96:	f103 0010 	add.w	r0, r3, #16
 8001d9a:	2310      	movs	r3, #16
 8001d9c:	4a33      	ldr	r2, [pc, #204]	@ (8001e6c <OTM8009A_Init+0xa10>)
 8001d9e:	21e2      	movs	r1, #226	@ 0xe2
 8001da0:	f000 fb6e 	bl	8002480 <otm8009a_write_reg>
 8001da4:	4602      	mov	r2, r0
 8001da6:	697b      	ldr	r3, [r7, #20]
 8001da8:	4413      	add	r3, r2
 8001daa:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8001dac:	68fb      	ldr	r3, [r7, #12]
 8001dae:	f103 0010 	add.w	r0, r3, #16
 8001db2:	2300      	movs	r3, #0
 8001db4:	4a2e      	ldr	r2, [pc, #184]	@ (8001e70 <OTM8009A_Init+0xa14>)
 8001db6:	2111      	movs	r1, #17
 8001db8:	f000 fb62 	bl	8002480 <otm8009a_write_reg>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	4413      	add	r3, r2
 8001dc2:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8001dc4:	2178      	movs	r1, #120	@ 0x78
 8001dc6:	68f8      	ldr	r0, [r7, #12]
 8001dc8:	f000 fb29 	bl	800241e <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8001dcc:	68bb      	ldr	r3, [r7, #8]
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	d012      	beq.n	8001df8 <OTM8009A_Init+0x99c>
 8001dd2:	68bb      	ldr	r3, [r7, #8]
 8001dd4:	2b02      	cmp	r3, #2
 8001dd6:	d153      	bne.n	8001e80 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	f103 0010 	add.w	r0, r3, #16
 8001dde:	2300      	movs	r3, #0
 8001de0:	4a24      	ldr	r2, [pc, #144]	@ (8001e74 <OTM8009A_Init+0xa18>)
 8001de2:	213a      	movs	r1, #58	@ 0x3a
 8001de4:	f000 fb4c 	bl	8002480 <otm8009a_write_reg>
 8001de8:	4602      	mov	r2, r0
 8001dea:	697b      	ldr	r3, [r7, #20]
 8001dec:	4413      	add	r3, r2
 8001dee:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 8001df0:	4b21      	ldr	r3, [pc, #132]	@ (8001e78 <OTM8009A_Init+0xa1c>)
 8001df2:	2202      	movs	r2, #2
 8001df4:	605a      	str	r2, [r3, #4]
    break;
 8001df6:	e044      	b.n	8001e82 <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	f103 0010 	add.w	r0, r3, #16
 8001dfe:	2300      	movs	r3, #0
 8001e00:	4a1e      	ldr	r2, [pc, #120]	@ (8001e7c <OTM8009A_Init+0xa20>)
 8001e02:	213a      	movs	r1, #58	@ 0x3a
 8001e04:	f000 fb3c 	bl	8002480 <otm8009a_write_reg>
 8001e08:	4602      	mov	r2, r0
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 8001e10:	4b19      	ldr	r3, [pc, #100]	@ (8001e78 <OTM8009A_Init+0xa1c>)
 8001e12:	2200      	movs	r2, #0
 8001e14:	605a      	str	r2, [r3, #4]
    break;
 8001e16:	e034      	b.n	8001e82 <OTM8009A_Init+0xa26>
 8001e18:	0801e636 	.word	0x0801e636
 8001e1c:	0801e71c 	.word	0x0801e71c
 8001e20:	0801e655 	.word	0x0801e655
 8001e24:	0801e728 	.word	0x0801e728
 8001e28:	0801e651 	.word	0x0801e651
 8001e2c:	0801e738 	.word	0x0801e738
 8001e30:	0801e652 	.word	0x0801e652
 8001e34:	0801e748 	.word	0x0801e748
 8001e38:	0801e653 	.word	0x0801e653
 8001e3c:	0801e754 	.word	0x0801e754
 8001e40:	0801e654 	.word	0x0801e654
 8001e44:	0801e764 	.word	0x0801e764
 8001e48:	0801e641 	.word	0x0801e641
 8001e4c:	0801e662 	.word	0x0801e662
 8001e50:	0801e663 	.word	0x0801e663
 8001e54:	0801e664 	.word	0x0801e664
 8001e58:	0801e665 	.word	0x0801e665
 8001e5c:	0801e666 	.word	0x0801e666
 8001e60:	0801e635 	.word	0x0801e635
 8001e64:	0801e774 	.word	0x0801e774
 8001e68:	0801e778 	.word	0x0801e778
 8001e6c:	0801e788 	.word	0x0801e788
 8001e70:	0801e658 	.word	0x0801e658
 8001e74:	0801e659 	.word	0x0801e659
 8001e78:	2400111c 	.word	0x2400111c
 8001e7c:	0801e65a 	.word	0x0801e65a
  default :
    break;
 8001e80:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b01      	cmp	r3, #1
 8001e86:	d12a      	bne.n	8001ede <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8001e88:	2360      	movs	r3, #96	@ 0x60
 8001e8a:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	f103 0010 	add.w	r0, r3, #16
 8001e92:	f107 0213 	add.w	r2, r7, #19
 8001e96:	2300      	movs	r3, #0
 8001e98:	2136      	movs	r1, #54	@ 0x36
 8001e9a:	f000 faf1 	bl	8002480 <otm8009a_write_reg>
 8001e9e:	4602      	mov	r2, r0
 8001ea0:	697b      	ldr	r3, [r7, #20]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8001ea6:	68fb      	ldr	r3, [r7, #12]
 8001ea8:	f103 0010 	add.w	r0, r3, #16
 8001eac:	2304      	movs	r3, #4
 8001eae:	4a44      	ldr	r2, [pc, #272]	@ (8001fc0 <OTM8009A_Init+0xb64>)
 8001eb0:	212a      	movs	r1, #42	@ 0x2a
 8001eb2:	f000 fae5 	bl	8002480 <otm8009a_write_reg>
 8001eb6:	4602      	mov	r2, r0
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	4413      	add	r3, r2
 8001ebc:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8001ebe:	68fb      	ldr	r3, [r7, #12]
 8001ec0:	f103 0010 	add.w	r0, r3, #16
 8001ec4:	2304      	movs	r3, #4
 8001ec6:	4a3f      	ldr	r2, [pc, #252]	@ (8001fc4 <OTM8009A_Init+0xb68>)
 8001ec8:	212b      	movs	r1, #43	@ 0x2b
 8001eca:	f000 fad9 	bl	8002480 <otm8009a_write_reg>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	697b      	ldr	r3, [r7, #20]
 8001ed2:	4413      	add	r3, r2
 8001ed4:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8001ed6:	4b3c      	ldr	r3, [pc, #240]	@ (8001fc8 <OTM8009A_Init+0xb6c>)
 8001ed8:	2201      	movs	r2, #1
 8001eda:	601a      	str	r2, [r3, #0]
 8001edc:	e002      	b.n	8001ee4 <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8001ede:	4b3a      	ldr	r3, [pc, #232]	@ (8001fc8 <OTM8009A_Init+0xb6c>)
 8001ee0:	2200      	movs	r2, #0
 8001ee2:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	f103 0010 	add.w	r0, r3, #16
 8001eea:	2300      	movs	r3, #0
 8001eec:	4a37      	ldr	r2, [pc, #220]	@ (8001fcc <OTM8009A_Init+0xb70>)
 8001eee:	2151      	movs	r1, #81	@ 0x51
 8001ef0:	f000 fac6 	bl	8002480 <otm8009a_write_reg>
 8001ef4:	4602      	mov	r2, r0
 8001ef6:	697b      	ldr	r3, [r7, #20]
 8001ef8:	4413      	add	r3, r2
 8001efa:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8001efc:	4b34      	ldr	r3, [pc, #208]	@ (8001fd0 <OTM8009A_Init+0xb74>)
 8001efe:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8001f02:	4a34      	ldr	r2, [pc, #208]	@ (8001fd4 <OTM8009A_Init+0xb78>)
 8001f04:	fba2 2303 	umull	r2, r3, r2, r3
 8001f08:	09db      	lsrs	r3, r3, #7
 8001f0a:	b2db      	uxtb	r3, r3
 8001f0c:	461a      	mov	r2, r3
 8001f0e:	2364      	movs	r3, #100	@ 0x64
 8001f10:	fb02 f303 	mul.w	r3, r2, r3
 8001f14:	4a2c      	ldr	r2, [pc, #176]	@ (8001fc8 <OTM8009A_Init+0xb6c>)
 8001f16:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8001f18:	68fb      	ldr	r3, [r7, #12]
 8001f1a:	f103 0010 	add.w	r0, r3, #16
 8001f1e:	2300      	movs	r3, #0
 8001f20:	4a2d      	ldr	r2, [pc, #180]	@ (8001fd8 <OTM8009A_Init+0xb7c>)
 8001f22:	2153      	movs	r1, #83	@ 0x53
 8001f24:	f000 faac 	bl	8002480 <otm8009a_write_reg>
 8001f28:	4602      	mov	r2, r0
 8001f2a:	697b      	ldr	r3, [r7, #20]
 8001f2c:	4413      	add	r3, r2
 8001f2e:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	f103 0010 	add.w	r0, r3, #16
 8001f36:	2300      	movs	r3, #0
 8001f38:	4a28      	ldr	r2, [pc, #160]	@ (8001fdc <OTM8009A_Init+0xb80>)
 8001f3a:	2155      	movs	r1, #85	@ 0x55
 8001f3c:	f000 faa0 	bl	8002480 <otm8009a_write_reg>
 8001f40:	4602      	mov	r2, r0
 8001f42:	697b      	ldr	r3, [r7, #20]
 8001f44:	4413      	add	r3, r2
 8001f46:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	f103 0010 	add.w	r0, r3, #16
 8001f4e:	2300      	movs	r3, #0
 8001f50:	4a23      	ldr	r2, [pc, #140]	@ (8001fe0 <OTM8009A_Init+0xb84>)
 8001f52:	215e      	movs	r1, #94	@ 0x5e
 8001f54:	f000 fa94 	bl	8002480 <otm8009a_write_reg>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	4413      	add	r3, r2
 8001f5e:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8001f60:	68fb      	ldr	r3, [r7, #12]
 8001f62:	f103 0010 	add.w	r0, r3, #16
 8001f66:	2300      	movs	r3, #0
 8001f68:	4a1e      	ldr	r2, [pc, #120]	@ (8001fe4 <OTM8009A_Init+0xb88>)
 8001f6a:	2129      	movs	r1, #41	@ 0x29
 8001f6c:	f000 fa88 	bl	8002480 <otm8009a_write_reg>
 8001f70:	4602      	mov	r2, r0
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	4413      	add	r3, r2
 8001f76:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8001f78:	68fb      	ldr	r3, [r7, #12]
 8001f7a:	f103 0010 	add.w	r0, r3, #16
 8001f7e:	2300      	movs	r3, #0
 8001f80:	4a19      	ldr	r2, [pc, #100]	@ (8001fe8 <OTM8009A_Init+0xb8c>)
 8001f82:	2100      	movs	r1, #0
 8001f84:	f000 fa7c 	bl	8002480 <otm8009a_write_reg>
 8001f88:	4602      	mov	r2, r0
 8001f8a:	697b      	ldr	r3, [r7, #20]
 8001f8c:	4413      	add	r3, r2
 8001f8e:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	f103 0010 	add.w	r0, r3, #16
 8001f96:	2300      	movs	r3, #0
 8001f98:	4a14      	ldr	r2, [pc, #80]	@ (8001fec <OTM8009A_Init+0xb90>)
 8001f9a:	212c      	movs	r1, #44	@ 0x2c
 8001f9c:	f000 fa70 	bl	8002480 <otm8009a_write_reg>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	4413      	add	r3, r2
 8001fa6:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 8001fae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fb2:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8001fb4:	697b      	ldr	r3, [r7, #20]
}
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	3718      	adds	r7, #24
 8001fba:	46bd      	mov	sp, r7
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	0801e62c 	.word	0x0801e62c
 8001fc4:	0801e630 	.word	0x0801e630
 8001fc8:	2400111c 	.word	0x2400111c
 8001fcc:	0801e65b 	.word	0x0801e65b
 8001fd0:	0801e634 	.word	0x0801e634
 8001fd4:	80808081 	.word	0x80808081
 8001fd8:	0801e65c 	.word	0x0801e65c
 8001fdc:	0801e65d 	.word	0x0801e65d
 8001fe0:	0801e65e 	.word	0x0801e65e
 8001fe4:	0801e65f 	.word	0x0801e65f
 8001fe8:	0801e635 	.word	0x0801e635
 8001fec:	0801e660 	.word	0x0801e660

08001ff0 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 8001ff8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	370c      	adds	r7, #12
 8002000:	46bd      	mov	sp, r7
 8002002:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002006:	4770      	bx	lr

08002008 <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 8002008:	b580      	push	{r7, lr}
 800200a:	b084      	sub	sp, #16
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
 8002010:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	f103 0010 	add.w	r0, r3, #16
 8002018:	2301      	movs	r3, #1
 800201a:	683a      	ldr	r2, [r7, #0]
 800201c:	21da      	movs	r1, #218	@ 0xda
 800201e:	f000 fa18 	bl	8002452 <otm8009a_read_reg>
 8002022:	4603      	mov	r3, r0
 8002024:	2b00      	cmp	r3, #0
 8002026:	d003      	beq.n	8002030 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 8002028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800202c:	60fb      	str	r3, [r7, #12]
 800202e:	e001      	b.n	8002034 <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8002030:	2300      	movs	r3, #0
 8002032:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8002034:	68fb      	ldr	r3, [r7, #12]
}  
 8002036:	4618      	mov	r0, r3
 8002038:	3710      	adds	r7, #16
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
	...

08002040 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b084      	sub	sp, #16
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
 8002048:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 800204a:	683a      	ldr	r2, [r7, #0]
 800204c:	4613      	mov	r3, r2
 800204e:	021b      	lsls	r3, r3, #8
 8002050:	1a9b      	subs	r3, r3, r2
 8002052:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <OTM8009A_SetBrightness+0x54>)
 8002054:	fba2 2303 	umull	r2, r3, r2, r3
 8002058:	095b      	lsrs	r3, r3, #5
 800205a:	b2db      	uxtb	r3, r3
 800205c:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	f103 0010 	add.w	r0, r3, #16
 8002064:	f107 020b 	add.w	r2, r7, #11
 8002068:	2300      	movs	r3, #0
 800206a:	2151      	movs	r1, #81	@ 0x51
 800206c:	f000 fa08 	bl	8002480 <otm8009a_write_reg>
 8002070:	4603      	mov	r3, r0
 8002072:	2b00      	cmp	r3, #0
 8002074:	d003      	beq.n	800207e <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 8002076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800207a:	60fb      	str	r3, [r7, #12]
 800207c:	e004      	b.n	8002088 <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 800207e:	4a06      	ldr	r2, [pc, #24]	@ (8002098 <OTM8009A_SetBrightness+0x58>)
 8002080:	683b      	ldr	r3, [r7, #0]
 8002082:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 8002084:	2300      	movs	r3, #0
 8002086:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8002088:	68fb      	ldr	r3, [r7, #12]
}
 800208a:	4618      	mov	r0, r3
 800208c:	3710      	adds	r7, #16
 800208e:	46bd      	mov	sp, r7
 8002090:	bd80      	pop	{r7, pc}
 8002092:	bf00      	nop
 8002094:	51eb851f 	.word	0x51eb851f
 8002098:	2400111c 	.word	0x2400111c

0800209c <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
 80020a4:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 80020a6:	4b05      	ldr	r3, [pc, #20]	@ (80020bc <OTM8009A_GetBrightness+0x20>)
 80020a8:	689a      	ldr	r2, [r3, #8]
 80020aa:	683b      	ldr	r3, [r7, #0]
 80020ac:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 80020ae:	2300      	movs	r3, #0
}
 80020b0:	4618      	mov	r0, r3
 80020b2:	370c      	adds	r7, #12
 80020b4:	46bd      	mov	sp, r7
 80020b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020ba:	4770      	bx	lr
 80020bc:	2400111c 	.word	0x2400111c

080020c0 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 80020c0:	b580      	push	{r7, lr}
 80020c2:	b084      	sub	sp, #16
 80020c4:	af00      	add	r7, sp, #0
 80020c6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 80020c8:	2300      	movs	r3, #0
 80020ca:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	f103 0010 	add.w	r0, r3, #16
 80020d2:	f107 020b 	add.w	r2, r7, #11
 80020d6:	2300      	movs	r3, #0
 80020d8:	2129      	movs	r1, #41	@ 0x29
 80020da:	f000 f9d1 	bl	8002480 <otm8009a_write_reg>
 80020de:	4603      	mov	r3, r0
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d003      	beq.n	80020ec <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 80020e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020e8:	60fb      	str	r3, [r7, #12]
 80020ea:	e001      	b.n	80020f0 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80020f0:	68fb      	ldr	r3, [r7, #12]
}
 80020f2:	4618      	mov	r0, r3
 80020f4:	3710      	adds	r7, #16
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}

080020fa <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 80020fa:	b580      	push	{r7, lr}
 80020fc:	b084      	sub	sp, #16
 80020fe:	af00      	add	r7, sp, #0
 8002100:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8002102:	2300      	movs	r3, #0
 8002104:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	f103 0010 	add.w	r0, r3, #16
 800210c:	f107 020b 	add.w	r2, r7, #11
 8002110:	2300      	movs	r3, #0
 8002112:	2128      	movs	r1, #40	@ 0x28
 8002114:	f000 f9b4 	bl	8002480 <otm8009a_write_reg>
 8002118:	4603      	mov	r3, r0
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 800211e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002122:	60fb      	str	r3, [r7, #12]
 8002124:	e001      	b.n	800212a <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8002126:	2300      	movs	r3, #0
 8002128:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800212a:	68fb      	ldr	r3, [r7, #12]
}
 800212c:	4618      	mov	r0, r3
 800212e:	3710      	adds	r7, #16
 8002130:	46bd      	mov	sp, r7
 8002132:	bd80      	pop	{r7, pc}

08002134 <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 8002134:	b580      	push	{r7, lr}
 8002136:	b084      	sub	sp, #16
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
 800213c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 800213e:	2360      	movs	r3, #96	@ 0x60
 8002140:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8002142:	2300      	movs	r3, #0
 8002144:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8002146:	683b      	ldr	r3, [r7, #0]
 8002148:	2b01      	cmp	r3, #1
 800214a:	d006      	beq.n	800215a <OTM8009A_SetOrientation+0x26>
 800214c:	683b      	ldr	r3, [r7, #0]
 800214e:	2b00      	cmp	r3, #0
 8002150:	d003      	beq.n	800215a <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 8002152:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002156:	60fb      	str	r3, [r7, #12]
 8002158:	e04d      	b.n	80021f6 <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d125      	bne.n	80021ac <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	f103 0010 	add.w	r0, r3, #16
 8002166:	f107 020b 	add.w	r2, r7, #11
 800216a:	2300      	movs	r3, #0
 800216c:	2136      	movs	r1, #54	@ 0x36
 800216e:	f000 f987 	bl	8002480 <otm8009a_write_reg>
 8002172:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	f103 0010 	add.w	r0, r3, #16
 800217a:	2304      	movs	r3, #4
 800217c:	4a23      	ldr	r2, [pc, #140]	@ (800220c <OTM8009A_SetOrientation+0xd8>)
 800217e:	212a      	movs	r1, #42	@ 0x2a
 8002180:	f000 f97e 	bl	8002480 <otm8009a_write_reg>
 8002184:	4602      	mov	r2, r0
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	4413      	add	r3, r2
 800218a:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	f103 0010 	add.w	r0, r3, #16
 8002192:	2304      	movs	r3, #4
 8002194:	4a1e      	ldr	r2, [pc, #120]	@ (8002210 <OTM8009A_SetOrientation+0xdc>)
 8002196:	212b      	movs	r1, #43	@ 0x2b
 8002198:	f000 f972 	bl	8002480 <otm8009a_write_reg>
 800219c:	4602      	mov	r2, r0
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	4413      	add	r3, r2
 80021a2:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 80021a4:	4b1b      	ldr	r3, [pc, #108]	@ (8002214 <OTM8009A_SetOrientation+0xe0>)
 80021a6:	2201      	movs	r2, #1
 80021a8:	601a      	str	r2, [r3, #0]
 80021aa:	e024      	b.n	80021f6 <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	f103 0010 	add.w	r0, r3, #16
 80021b2:	f107 020a 	add.w	r2, r7, #10
 80021b6:	2300      	movs	r3, #0
 80021b8:	2136      	movs	r1, #54	@ 0x36
 80021ba:	f000 f961 	bl	8002480 <otm8009a_write_reg>
 80021be:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	f103 0010 	add.w	r0, r3, #16
 80021c6:	2304      	movs	r3, #4
 80021c8:	4a10      	ldr	r2, [pc, #64]	@ (800220c <OTM8009A_SetOrientation+0xd8>)
 80021ca:	212a      	movs	r1, #42	@ 0x2a
 80021cc:	f000 f958 	bl	8002480 <otm8009a_write_reg>
 80021d0:	4602      	mov	r2, r0
 80021d2:	68fb      	ldr	r3, [r7, #12]
 80021d4:	4413      	add	r3, r2
 80021d6:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f103 0010 	add.w	r0, r3, #16
 80021de:	2304      	movs	r3, #4
 80021e0:	4a0b      	ldr	r2, [pc, #44]	@ (8002210 <OTM8009A_SetOrientation+0xdc>)
 80021e2:	212b      	movs	r1, #43	@ 0x2b
 80021e4:	f000 f94c 	bl	8002480 <otm8009a_write_reg>
 80021e8:	4602      	mov	r2, r0
 80021ea:	68fb      	ldr	r3, [r7, #12]
 80021ec:	4413      	add	r3, r2
 80021ee:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 80021f0:	4b08      	ldr	r3, [pc, #32]	@ (8002214 <OTM8009A_SetOrientation+0xe0>)
 80021f2:	2200      	movs	r2, #0
 80021f4:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 80021f6:	68fb      	ldr	r3, [r7, #12]
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d002      	beq.n	8002202 <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 80021fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002200:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002202:	68fb      	ldr	r3, [r7, #12]
}
 8002204:	4618      	mov	r0, r3
 8002206:	3710      	adds	r7, #16
 8002208:	46bd      	mov	sp, r7
 800220a:	bd80      	pop	{r7, pc}
 800220c:	0801e62c 	.word	0x0801e62c
 8002210:	0801e630 	.word	0x0801e630
 8002214:	2400111c 	.word	0x2400111c

08002218 <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 8002218:	b480      	push	{r7}
 800221a:	b083      	sub	sp, #12
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
 8002220:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8002222:	4b05      	ldr	r3, [pc, #20]	@ (8002238 <OTM8009A_GetOrientation+0x20>)
 8002224:	681a      	ldr	r2, [r3, #0]
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 800222a:	2300      	movs	r3, #0
}
 800222c:	4618      	mov	r0, r3
 800222e:	370c      	adds	r7, #12
 8002230:	46bd      	mov	sp, r7
 8002232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002236:	4770      	bx	lr
 8002238:	2400111c 	.word	0x2400111c

0800223c <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 800223c:	b480      	push	{r7}
 800223e:	b083      	sub	sp, #12
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
 8002244:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8002246:	4b0e      	ldr	r3, [pc, #56]	@ (8002280 <OTM8009A_GetXSize+0x44>)
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	2b00      	cmp	r3, #0
 800224c:	d002      	beq.n	8002254 <OTM8009A_GetXSize+0x18>
 800224e:	2b01      	cmp	r3, #1
 8002250:	d005      	beq.n	800225e <OTM8009A_GetXSize+0x22>
 8002252:	e009      	b.n	8002268 <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800225a:	601a      	str	r2, [r3, #0]
    break;
 800225c:	e009      	b.n	8002272 <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 800225e:	683b      	ldr	r3, [r7, #0]
 8002260:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002264:	601a      	str	r2, [r3, #0]
    break;
 8002266:	e004      	b.n	8002272 <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	f44f 7248 	mov.w	r2, #800	@ 0x320
 800226e:	601a      	str	r2, [r3, #0]
    break;
 8002270:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8002272:	2300      	movs	r3, #0
}
 8002274:	4618      	mov	r0, r3
 8002276:	370c      	adds	r7, #12
 8002278:	46bd      	mov	sp, r7
 800227a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227e:	4770      	bx	lr
 8002280:	2400111c 	.word	0x2400111c

08002284 <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 800228e:	4b0e      	ldr	r3, [pc, #56]	@ (80022c8 <OTM8009A_GetYSize+0x44>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	2b00      	cmp	r3, #0
 8002294:	d002      	beq.n	800229c <OTM8009A_GetYSize+0x18>
 8002296:	2b01      	cmp	r3, #1
 8002298:	d005      	beq.n	80022a6 <OTM8009A_GetYSize+0x22>
 800229a:	e009      	b.n	80022b0 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 80022a2:	601a      	str	r2, [r3, #0]
    break;
 80022a4:	e009      	b.n	80022ba <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 80022a6:	683b      	ldr	r3, [r7, #0]
 80022a8:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80022ac:	601a      	str	r2, [r3, #0]
    break;
 80022ae:	e004      	b.n	80022ba <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 80022b0:	683b      	ldr	r3, [r7, #0]
 80022b2:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 80022b6:	601a      	str	r2, [r3, #0]
    break;
 80022b8:	bf00      	nop
  }
  
  return OTM8009A_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	370c      	adds	r7, #12
 80022c0:	46bd      	mov	sp, r7
 80022c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022c6:	4770      	bx	lr
 80022c8:	2400111c 	.word	0x2400111c

080022cc <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 80022cc:	b480      	push	{r7}
 80022ce:	b085      	sub	sp, #20
 80022d0:	af00      	add	r7, sp, #0
 80022d2:	60f8      	str	r0, [r7, #12]
 80022d4:	60b9      	str	r1, [r7, #8]
 80022d6:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80022d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022dc:	4618      	mov	r0, r3
 80022de:	3714      	adds	r7, #20
 80022e0:	46bd      	mov	sp, r7
 80022e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e6:	4770      	bx	lr

080022e8 <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 80022e8:	b480      	push	{r7}
 80022ea:	b085      	sub	sp, #20
 80022ec:	af00      	add	r7, sp, #0
 80022ee:	60f8      	str	r0, [r7, #12]
 80022f0:	60b9      	str	r1, [r7, #8]
 80022f2:	607a      	str	r2, [r7, #4]
 80022f4:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80022f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80022fa:	4618      	mov	r0, r3
 80022fc:	3714      	adds	r7, #20
 80022fe:	46bd      	mov	sp, r7
 8002300:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002304:	4770      	bx	lr

08002306 <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002306:	b480      	push	{r7}
 8002308:	b085      	sub	sp, #20
 800230a:	af00      	add	r7, sp, #0
 800230c:	60f8      	str	r0, [r7, #12]
 800230e:	60b9      	str	r1, [r7, #8]
 8002310:	607a      	str	r2, [r7, #4]
 8002312:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002314:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002318:	4618      	mov	r0, r3
 800231a:	3714      	adds	r7, #20
 800231c:	46bd      	mov	sp, r7
 800231e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002322:	4770      	bx	lr

08002324 <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002324:	b480      	push	{r7}
 8002326:	b085      	sub	sp, #20
 8002328:	af00      	add	r7, sp, #0
 800232a:	60f8      	str	r0, [r7, #12]
 800232c:	60b9      	str	r1, [r7, #8]
 800232e:	607a      	str	r2, [r7, #4]
 8002330:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002332:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002336:	4618      	mov	r0, r3
 8002338:	3714      	adds	r7, #20
 800233a:	46bd      	mov	sp, r7
 800233c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002340:	4770      	bx	lr

08002342 <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002342:	b480      	push	{r7}
 8002344:	b085      	sub	sp, #20
 8002346:	af00      	add	r7, sp, #0
 8002348:	60f8      	str	r0, [r7, #12]
 800234a:	60b9      	str	r1, [r7, #8]
 800234c:	607a      	str	r2, [r7, #4]
 800234e:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002350:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002354:	4618      	mov	r0, r3
 8002356:	3714      	adds	r7, #20
 8002358:	46bd      	mov	sp, r7
 800235a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235e:	4770      	bx	lr

08002360 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002360:	b480      	push	{r7}
 8002362:	b085      	sub	sp, #20
 8002364:	af00      	add	r7, sp, #0
 8002366:	60f8      	str	r0, [r7, #12]
 8002368:	60b9      	str	r1, [r7, #8]
 800236a:	607a      	str	r2, [r7, #4]
 800236c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800236e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002372:	4618      	mov	r0, r3
 8002374:	3714      	adds	r7, #20
 8002376:	46bd      	mov	sp, r7
 8002378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237c:	4770      	bx	lr

0800237e <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800237e:	b480      	push	{r7}
 8002380:	b085      	sub	sp, #20
 8002382:	af00      	add	r7, sp, #0
 8002384:	60f8      	str	r0, [r7, #12]
 8002386:	60b9      	str	r1, [r7, #8]
 8002388:	607a      	str	r2, [r7, #4]
 800238a:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 800238c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002390:	4618      	mov	r0, r3
 8002392:	3714      	adds	r7, #20
 8002394:	46bd      	mov	sp, r7
 8002396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800239a:	4770      	bx	lr

0800239c <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800239c:	b480      	push	{r7}
 800239e:	b085      	sub	sp, #20
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	60f8      	str	r0, [r7, #12]
 80023a4:	60b9      	str	r1, [r7, #8]
 80023a6:	607a      	str	r2, [r7, #4]
 80023a8:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 80023aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3714      	adds	r7, #20
 80023b2:	46bd      	mov	sp, r7
 80023b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b8:	4770      	bx	lr

080023ba <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80023ba:	b590      	push	{r4, r7, lr}
 80023bc:	b087      	sub	sp, #28
 80023be:	af00      	add	r7, sp, #0
 80023c0:	60f8      	str	r0, [r7, #12]
 80023c2:	607a      	str	r2, [r7, #4]
 80023c4:	461a      	mov	r2, r3
 80023c6:	460b      	mov	r3, r1
 80023c8:	817b      	strh	r3, [r7, #10]
 80023ca:	4613      	mov	r3, r2
 80023cc:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80023d2:	697b      	ldr	r3, [r7, #20]
 80023d4:	689c      	ldr	r4, [r3, #8]
 80023d6:	697b      	ldr	r3, [r7, #20]
 80023d8:	8818      	ldrh	r0, [r3, #0]
 80023da:	893b      	ldrh	r3, [r7, #8]
 80023dc:	8979      	ldrh	r1, [r7, #10]
 80023de:	687a      	ldr	r2, [r7, #4]
 80023e0:	47a0      	blx	r4
 80023e2:	4603      	mov	r3, r0
}
 80023e4:	4618      	mov	r0, r3
 80023e6:	371c      	adds	r7, #28
 80023e8:	46bd      	mov	sp, r7
 80023ea:	bd90      	pop	{r4, r7, pc}

080023ec <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80023ec:	b590      	push	{r4, r7, lr}
 80023ee:	b087      	sub	sp, #28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	607a      	str	r2, [r7, #4]
 80023f6:	461a      	mov	r2, r3
 80023f8:	460b      	mov	r3, r1
 80023fa:	817b      	strh	r3, [r7, #10]
 80023fc:	4613      	mov	r3, r2
 80023fe:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	685c      	ldr	r4, [r3, #4]
 8002408:	697b      	ldr	r3, [r7, #20]
 800240a:	8818      	ldrh	r0, [r3, #0]
 800240c:	893b      	ldrh	r3, [r7, #8]
 800240e:	8979      	ldrh	r1, [r7, #10]
 8002410:	687a      	ldr	r2, [r7, #4]
 8002412:	47a0      	blx	r4
 8002414:	4603      	mov	r3, r0
}
 8002416:	4618      	mov	r0, r3
 8002418:	371c      	adds	r7, #28
 800241a:	46bd      	mov	sp, r7
 800241c:	bd90      	pop	{r4, r7, pc}

0800241e <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 800241e:	b580      	push	{r7, lr}
 8002420:	b084      	sub	sp, #16
 8002422:	af00      	add	r7, sp, #0
 8002424:	6078      	str	r0, [r7, #4]
 8002426:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	4798      	blx	r3
 800242e:	4603      	mov	r3, r0
 8002430:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002432:	bf00      	nop
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	68db      	ldr	r3, [r3, #12]
 8002438:	4798      	blx	r3
 800243a:	4603      	mov	r3, r0
 800243c:	461a      	mov	r2, r3
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	1ad3      	subs	r3, r2, r3
 8002442:	683a      	ldr	r2, [r7, #0]
 8002444:	429a      	cmp	r2, r3
 8002446:	d8f5      	bhi.n	8002434 <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 8002448:	2300      	movs	r3, #0
}
 800244a:	4618      	mov	r0, r3
 800244c:	3710      	adds	r7, #16
 800244e:	46bd      	mov	sp, r7
 8002450:	bd80      	pop	{r7, pc}

08002452 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8002452:	b590      	push	{r4, r7, lr}
 8002454:	b085      	sub	sp, #20
 8002456:	af00      	add	r7, sp, #0
 8002458:	60f8      	str	r0, [r7, #12]
 800245a:	607a      	str	r2, [r7, #4]
 800245c:	461a      	mov	r2, r3
 800245e:	460b      	mov	r3, r1
 8002460:	817b      	strh	r3, [r7, #10]
 8002462:	4613      	mov	r3, r2
 8002464:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8002466:	68fb      	ldr	r3, [r7, #12]
 8002468:	685c      	ldr	r4, [r3, #4]
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6898      	ldr	r0, [r3, #8]
 800246e:	893b      	ldrh	r3, [r7, #8]
 8002470:	8979      	ldrh	r1, [r7, #10]
 8002472:	687a      	ldr	r2, [r7, #4]
 8002474:	47a0      	blx	r4
 8002476:	4603      	mov	r3, r0
}
 8002478:	4618      	mov	r0, r3
 800247a:	3714      	adds	r7, #20
 800247c:	46bd      	mov	sp, r7
 800247e:	bd90      	pop	{r4, r7, pc}

08002480 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8002480:	b590      	push	{r4, r7, lr}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	607a      	str	r2, [r7, #4]
 800248a:	461a      	mov	r2, r3
 800248c:	460b      	mov	r3, r1
 800248e:	817b      	strh	r3, [r7, #10]
 8002490:	4613      	mov	r3, r2
 8002492:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681c      	ldr	r4, [r3, #0]
 8002498:	68fb      	ldr	r3, [r7, #12]
 800249a:	6898      	ldr	r0, [r3, #8]
 800249c:	893b      	ldrh	r3, [r7, #8]
 800249e:	8979      	ldrh	r1, [r7, #10]
 80024a0:	687a      	ldr	r2, [r7, #4]
 80024a2:	47a0      	blx	r4
 80024a4:	4603      	mov	r3, r0
}
 80024a6:	4618      	mov	r0, r3
 80024a8:	3714      	adds	r7, #20
 80024aa:	46bd      	mov	sp, r7
 80024ac:	bd90      	pop	{r4, r7, pc}
	...

080024b0 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 80024b0:	b580      	push	{r7, lr}
 80024b2:	b084      	sub	sp, #16
 80024b4:	af00      	add	r7, sp, #0
 80024b6:	6078      	str	r0, [r7, #4]
 80024b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 80024ba:	2303      	movs	r3, #3
 80024bc:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	f103 0018 	add.w	r0, r3, #24
 80024c4:	f107 020a 	add.w	r2, r7, #10
 80024c8:	2302      	movs	r3, #2
 80024ca:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80024ce:	f001 fdb9 	bl	8004044 <wm8994_write_reg>
 80024d2:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 80024d4:	2300      	movs	r3, #0
 80024d6:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	f103 0018 	add.w	r0, r3, #24
 80024de:	f107 020a 	add.w	r2, r7, #10
 80024e2:	2302      	movs	r3, #2
 80024e4:	f640 0117 	movw	r1, #2071	@ 0x817
 80024e8:	f001 fdac 	bl	8004044 <wm8994_write_reg>
 80024ec:	4602      	mov	r2, r0
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	4413      	add	r3, r2
 80024f2:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	f103 0018 	add.w	r0, r3, #24
 80024fa:	f107 020a 	add.w	r2, r7, #10
 80024fe:	2302      	movs	r3, #2
 8002500:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8002504:	f001 fd9e 	bl	8004044 <wm8994_write_reg>
 8002508:	4602      	mov	r2, r0
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	4413      	add	r3, r2
 800250e:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8002510:	236c      	movs	r3, #108	@ 0x6c
 8002512:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	f103 0018 	add.w	r0, r3, #24
 800251a:	f107 020a 	add.w	r2, r7, #10
 800251e:	2302      	movs	r3, #2
 8002520:	2139      	movs	r1, #57	@ 0x39
 8002522:	f001 fd8f 	bl	8004044 <wm8994_write_reg>
 8002526:	4602      	mov	r2, r0
 8002528:	68fb      	ldr	r3, [r7, #12]
 800252a:	4413      	add	r3, r2
 800252c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800252e:	683b      	ldr	r3, [r7, #0]
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	2b00      	cmp	r3, #0
 8002534:	d00f      	beq.n	8002556 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8002536:	2313      	movs	r3, #19
 8002538:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	f103 0018 	add.w	r0, r3, #24
 8002540:	f107 020a 	add.w	r2, r7, #10
 8002544:	2302      	movs	r3, #2
 8002546:	2101      	movs	r1, #1
 8002548:	f001 fd7c 	bl	8004044 <wm8994_write_reg>
 800254c:	4602      	mov	r2, r0
 800254e:	68fb      	ldr	r3, [r7, #12]
 8002550:	4413      	add	r3, r2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	e00e      	b.n	8002574 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 8002556:	2303      	movs	r3, #3
 8002558:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	f103 0018 	add.w	r0, r3, #24
 8002560:	f107 020a 	add.w	r2, r7, #10
 8002564:	2302      	movs	r3, #2
 8002566:	2101      	movs	r1, #1
 8002568:	f001 fd6c 	bl	8004044 <wm8994_write_reg>
 800256c:	4602      	mov	r2, r0
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	4413      	add	r3, r2
 8002572:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 8002574:	2132      	movs	r1, #50	@ 0x32
 8002576:	6878      	ldr	r0, [r7, #4]
 8002578:	f001 fcec 	bl	8003f54 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 800257c:	683b      	ldr	r3, [r7, #0]
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	2b03      	cmp	r3, #3
 8002582:	f200 8141 	bhi.w	8002808 <WM8994_Init+0x358>
 8002586:	a201      	add	r2, pc, #4	@ (adr r2, 800258c <WM8994_Init+0xdc>)
 8002588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800258c:	080028a3 	.word	0x080028a3
 8002590:	0800259d 	.word	0x0800259d
 8002594:	08002637 	.word	0x08002637
 8002598:	080026d1 	.word	0x080026d1
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 800259c:	f640 430c 	movw	r3, #3084	@ 0xc0c
 80025a0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	f103 0018 	add.w	r0, r3, #24
 80025a8:	f107 020a 	add.w	r2, r7, #10
 80025ac:	2302      	movs	r3, #2
 80025ae:	2105      	movs	r1, #5
 80025b0:	f001 fd48 	bl	8004044 <wm8994_write_reg>
 80025b4:	4602      	mov	r2, r0
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	4413      	add	r3, r2
 80025ba:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 80025bc:	2300      	movs	r3, #0
 80025be:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	f103 0018 	add.w	r0, r3, #24
 80025c6:	f107 020a 	add.w	r2, r7, #10
 80025ca:	2302      	movs	r3, #2
 80025cc:	f240 6101 	movw	r1, #1537	@ 0x601
 80025d0:	f001 fd38 	bl	8004044 <wm8994_write_reg>
 80025d4:	4602      	mov	r2, r0
 80025d6:	68fb      	ldr	r3, [r7, #12]
 80025d8:	4413      	add	r3, r2
 80025da:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80025dc:	687b      	ldr	r3, [r7, #4]
 80025de:	f103 0018 	add.w	r0, r3, #24
 80025e2:	f107 020a 	add.w	r2, r7, #10
 80025e6:	2302      	movs	r3, #2
 80025e8:	f240 6102 	movw	r1, #1538	@ 0x602
 80025ec:	f001 fd2a 	bl	8004044 <wm8994_write_reg>
 80025f0:	4602      	mov	r2, r0
 80025f2:	68fb      	ldr	r3, [r7, #12]
 80025f4:	4413      	add	r3, r2
 80025f6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 80025f8:	2302      	movs	r3, #2
 80025fa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	f103 0018 	add.w	r0, r3, #24
 8002602:	f107 020a 	add.w	r2, r7, #10
 8002606:	2302      	movs	r3, #2
 8002608:	f240 6104 	movw	r1, #1540	@ 0x604
 800260c:	f001 fd1a 	bl	8004044 <wm8994_write_reg>
 8002610:	4602      	mov	r2, r0
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	4413      	add	r3, r2
 8002616:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	f103 0018 	add.w	r0, r3, #24
 800261e:	f107 020a 	add.w	r2, r7, #10
 8002622:	2302      	movs	r3, #2
 8002624:	f240 6105 	movw	r1, #1541	@ 0x605
 8002628:	f001 fd0c 	bl	8004044 <wm8994_write_reg>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	4413      	add	r3, r2
 8002632:	60fb      	str	r3, [r7, #12]
    break;
 8002634:	e136      	b.n	80028a4 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8002636:	f240 3303 	movw	r3, #771	@ 0x303
 800263a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	f103 0018 	add.w	r0, r3, #24
 8002642:	f107 020a 	add.w	r2, r7, #10
 8002646:	2302      	movs	r3, #2
 8002648:	2105      	movs	r1, #5
 800264a:	f001 fcfb 	bl	8004044 <wm8994_write_reg>
 800264e:	4602      	mov	r2, r0
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8002656:	2301      	movs	r3, #1
 8002658:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	f103 0018 	add.w	r0, r3, #24
 8002660:	f107 020a 	add.w	r2, r7, #10
 8002664:	2302      	movs	r3, #2
 8002666:	f240 6101 	movw	r1, #1537	@ 0x601
 800266a:	f001 fceb 	bl	8004044 <wm8994_write_reg>
 800266e:	4602      	mov	r2, r0
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4413      	add	r3, r2
 8002674:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	f103 0018 	add.w	r0, r3, #24
 800267c:	f107 020a 	add.w	r2, r7, #10
 8002680:	2302      	movs	r3, #2
 8002682:	f240 6102 	movw	r1, #1538	@ 0x602
 8002686:	f001 fcdd 	bl	8004044 <wm8994_write_reg>
 800268a:	4602      	mov	r2, r0
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	4413      	add	r3, r2
 8002690:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8002692:	2300      	movs	r3, #0
 8002694:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	f103 0018 	add.w	r0, r3, #24
 800269c:	f107 020a 	add.w	r2, r7, #10
 80026a0:	2302      	movs	r3, #2
 80026a2:	f240 6104 	movw	r1, #1540	@ 0x604
 80026a6:	f001 fccd 	bl	8004044 <wm8994_write_reg>
 80026aa:	4602      	mov	r2, r0
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	4413      	add	r3, r2
 80026b0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	f103 0018 	add.w	r0, r3, #24
 80026b8:	f107 020a 	add.w	r2, r7, #10
 80026bc:	2302      	movs	r3, #2
 80026be:	f240 6105 	movw	r1, #1541	@ 0x605
 80026c2:	f001 fcbf 	bl	8004044 <wm8994_write_reg>
 80026c6:	4602      	mov	r2, r0
 80026c8:	68fb      	ldr	r3, [r7, #12]
 80026ca:	4413      	add	r3, r2
 80026cc:	60fb      	str	r3, [r7, #12]
    break;
 80026ce:	e0e9      	b.n	80028a4 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	2b05      	cmp	r3, #5
 80026d6:	d14a      	bne.n	800276e <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 80026d8:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80026dc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	f103 0018 	add.w	r0, r3, #24
 80026e4:	f107 020a 	add.w	r2, r7, #10
 80026e8:	2302      	movs	r3, #2
 80026ea:	2105      	movs	r1, #5
 80026ec:	f001 fcaa 	bl	8004044 <wm8994_write_reg>
 80026f0:	4602      	mov	r2, r0
 80026f2:	68fb      	ldr	r3, [r7, #12]
 80026f4:	4413      	add	r3, r2
 80026f6:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 80026f8:	2303      	movs	r3, #3
 80026fa:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	f103 0018 	add.w	r0, r3, #24
 8002702:	f107 020a 	add.w	r2, r7, #10
 8002706:	2302      	movs	r3, #2
 8002708:	f240 6101 	movw	r1, #1537	@ 0x601
 800270c:	f001 fc9a 	bl	8004044 <wm8994_write_reg>
 8002710:	4602      	mov	r2, r0
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	f103 0018 	add.w	r0, r3, #24
 800271e:	f107 020a 	add.w	r2, r7, #10
 8002722:	2302      	movs	r3, #2
 8002724:	f240 6102 	movw	r1, #1538	@ 0x602
 8002728:	f001 fc8c 	bl	8004044 <wm8994_write_reg>
 800272c:	4602      	mov	r2, r0
 800272e:	68fb      	ldr	r3, [r7, #12]
 8002730:	4413      	add	r3, r2
 8002732:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	f103 0018 	add.w	r0, r3, #24
 800273a:	f107 020a 	add.w	r2, r7, #10
 800273e:	2302      	movs	r3, #2
 8002740:	f240 6104 	movw	r1, #1540	@ 0x604
 8002744:	f001 fc7e 	bl	8004044 <wm8994_write_reg>
 8002748:	4602      	mov	r2, r0
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	4413      	add	r3, r2
 800274e:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f103 0018 	add.w	r0, r3, #24
 8002756:	f107 020a 	add.w	r2, r7, #10
 800275a:	2302      	movs	r3, #2
 800275c:	f240 6105 	movw	r1, #1541	@ 0x605
 8002760:	f001 fc70 	bl	8004044 <wm8994_write_reg>
 8002764:	4602      	mov	r2, r0
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	4413      	add	r3, r2
 800276a:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 800276c:	e09a      	b.n	80028a4 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 800276e:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8002772:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	f103 0018 	add.w	r0, r3, #24
 800277a:	f107 020a 	add.w	r2, r7, #10
 800277e:	2302      	movs	r3, #2
 8002780:	2105      	movs	r1, #5
 8002782:	f001 fc5f 	bl	8004044 <wm8994_write_reg>
 8002786:	4602      	mov	r2, r0
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	4413      	add	r3, r2
 800278c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 800278e:	2301      	movs	r3, #1
 8002790:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	f103 0018 	add.w	r0, r3, #24
 8002798:	f107 020a 	add.w	r2, r7, #10
 800279c:	2302      	movs	r3, #2
 800279e:	f240 6101 	movw	r1, #1537	@ 0x601
 80027a2:	f001 fc4f 	bl	8004044 <wm8994_write_reg>
 80027a6:	4602      	mov	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	4413      	add	r3, r2
 80027ac:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	f103 0018 	add.w	r0, r3, #24
 80027b4:	f107 020a 	add.w	r2, r7, #10
 80027b8:	2302      	movs	r3, #2
 80027ba:	f240 6102 	movw	r1, #1538	@ 0x602
 80027be:	f001 fc41 	bl	8004044 <wm8994_write_reg>
 80027c2:	4602      	mov	r2, r0
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	4413      	add	r3, r2
 80027c8:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 80027ca:	2302      	movs	r3, #2
 80027cc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	f103 0018 	add.w	r0, r3, #24
 80027d4:	f107 020a 	add.w	r2, r7, #10
 80027d8:	2302      	movs	r3, #2
 80027da:	f240 6104 	movw	r1, #1540	@ 0x604
 80027de:	f001 fc31 	bl	8004044 <wm8994_write_reg>
 80027e2:	4602      	mov	r2, r0
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	4413      	add	r3, r2
 80027e8:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	f103 0018 	add.w	r0, r3, #24
 80027f0:	f107 020a 	add.w	r2, r7, #10
 80027f4:	2302      	movs	r3, #2
 80027f6:	f240 6105 	movw	r1, #1541	@ 0x605
 80027fa:	f001 fc23 	bl	8004044 <wm8994_write_reg>
 80027fe:	4602      	mov	r2, r0
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	4413      	add	r3, r2
 8002804:	60fb      	str	r3, [r7, #12]
    break;
 8002806:	e04d      	b.n	80028a4 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8002808:	f240 3303 	movw	r3, #771	@ 0x303
 800280c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	f103 0018 	add.w	r0, r3, #24
 8002814:	f107 020a 	add.w	r2, r7, #10
 8002818:	2302      	movs	r3, #2
 800281a:	2105      	movs	r1, #5
 800281c:	f001 fc12 	bl	8004044 <wm8994_write_reg>
 8002820:	4602      	mov	r2, r0
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	4413      	add	r3, r2
 8002826:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8002828:	2301      	movs	r3, #1
 800282a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	f103 0018 	add.w	r0, r3, #24
 8002832:	f107 020a 	add.w	r2, r7, #10
 8002836:	2302      	movs	r3, #2
 8002838:	f240 6101 	movw	r1, #1537	@ 0x601
 800283c:	f001 fc02 	bl	8004044 <wm8994_write_reg>
 8002840:	4602      	mov	r2, r0
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4413      	add	r3, r2
 8002846:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	f103 0018 	add.w	r0, r3, #24
 800284e:	f107 020a 	add.w	r2, r7, #10
 8002852:	2302      	movs	r3, #2
 8002854:	f240 6102 	movw	r1, #1538	@ 0x602
 8002858:	f001 fbf4 	bl	8004044 <wm8994_write_reg>
 800285c:	4602      	mov	r2, r0
 800285e:	68fb      	ldr	r3, [r7, #12]
 8002860:	4413      	add	r3, r2
 8002862:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8002864:	2300      	movs	r3, #0
 8002866:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f103 0018 	add.w	r0, r3, #24
 800286e:	f107 020a 	add.w	r2, r7, #10
 8002872:	2302      	movs	r3, #2
 8002874:	f240 6104 	movw	r1, #1540	@ 0x604
 8002878:	f001 fbe4 	bl	8004044 <wm8994_write_reg>
 800287c:	4602      	mov	r2, r0
 800287e:	68fb      	ldr	r3, [r7, #12]
 8002880:	4413      	add	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f103 0018 	add.w	r0, r3, #24
 800288a:	f107 020a 	add.w	r2, r7, #10
 800288e:	2302      	movs	r3, #2
 8002890:	f240 6105 	movw	r1, #1541	@ 0x605
 8002894:	f001 fbd6 	bl	8004044 <wm8994_write_reg>
 8002898:	4602      	mov	r2, r0
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	4413      	add	r3, r2
 800289e:	60fb      	str	r3, [r7, #12]
    break;
 80028a0:	e000      	b.n	80028a4 <WM8994_Init+0x3f4>
    break;
 80028a2:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 80028a4:	683b      	ldr	r3, [r7, #0]
 80028a6:	681b      	ldr	r3, [r3, #0]
 80028a8:	3b01      	subs	r3, #1
 80028aa:	2b04      	cmp	r3, #4
 80028ac:	f200 81e0 	bhi.w	8002c70 <WM8994_Init+0x7c0>
 80028b0:	a201      	add	r2, pc, #4	@ (adr r2, 80028b8 <WM8994_Init+0x408>)
 80028b2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028b6:	bf00      	nop
 80028b8:	08002aa1 	.word	0x08002aa1
 80028bc:	080028cd 	.word	0x080028cd
 80028c0:	0800298b 	.word	0x0800298b
 80028c4:	08002c71 	.word	0x08002c71
 80028c8:	08002b5f 	.word	0x08002b5f
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 80028cc:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 80028d0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	f103 0018 	add.w	r0, r3, #24
 80028d8:	f107 020a 	add.w	r2, r7, #10
 80028dc:	2302      	movs	r3, #2
 80028de:	2104      	movs	r1, #4
 80028e0:	f001 fbb0 	bl	8004044 <wm8994_write_reg>
 80028e4:	4602      	mov	r2, r0
 80028e6:	68fb      	ldr	r3, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80028ec:	23db      	movs	r3, #219	@ 0xdb
 80028ee:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	f103 0018 	add.w	r0, r3, #24
 80028f6:	f107 020a 	add.w	r2, r7, #10
 80028fa:	2302      	movs	r3, #2
 80028fc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002900:	f001 fba0 	bl	8004044 <wm8994_write_reg>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	4413      	add	r3, r2
 800290a:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 800290c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8002910:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	f103 0018 	add.w	r0, r3, #24
 8002918:	f107 020a 	add.w	r2, r7, #10
 800291c:	2302      	movs	r3, #2
 800291e:	2102      	movs	r1, #2
 8002920:	f001 fb90 	bl	8004044 <wm8994_write_reg>
 8002924:	4602      	mov	r2, r0
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4413      	add	r3, r2
 800292a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800292c:	2302      	movs	r3, #2
 800292e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	f103 0018 	add.w	r0, r3, #24
 8002936:	f107 020a 	add.w	r2, r7, #10
 800293a:	2302      	movs	r3, #2
 800293c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002940:	f001 fb80 	bl	8004044 <wm8994_write_reg>
 8002944:	4602      	mov	r2, r0
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	4413      	add	r3, r2
 800294a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f103 0018 	add.w	r0, r3, #24
 8002952:	f107 020a 	add.w	r2, r7, #10
 8002956:	2302      	movs	r3, #2
 8002958:	f240 6109 	movw	r1, #1545	@ 0x609
 800295c:	f001 fb72 	bl	8004044 <wm8994_write_reg>
 8002960:	4602      	mov	r2, r0
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	4413      	add	r3, r2
 8002966:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8002968:	230e      	movs	r3, #14
 800296a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f103 0018 	add.w	r0, r3, #24
 8002972:	f107 020a 	add.w	r2, r7, #10
 8002976:	2302      	movs	r3, #2
 8002978:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800297c:	f001 fb62 	bl	8004044 <wm8994_write_reg>
 8002980:	4602      	mov	r2, r0
 8002982:	68fb      	ldr	r3, [r7, #12]
 8002984:	4413      	add	r3, r2
 8002986:	60fb      	str	r3, [r7, #12]
    break;
 8002988:	e173      	b.n	8002c72 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 800298a:	2311      	movs	r3, #17
 800298c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	f103 0018 	add.w	r0, r3, #24
 8002994:	f107 020a 	add.w	r2, r7, #10
 8002998:	2302      	movs	r3, #2
 800299a:	2128      	movs	r1, #40	@ 0x28
 800299c:	f001 fb52 	bl	8004044 <wm8994_write_reg>
 80029a0:	4602      	mov	r2, r0
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	4413      	add	r3, r2
 80029a6:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 80029a8:	2335      	movs	r3, #53	@ 0x35
 80029aa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f103 0018 	add.w	r0, r3, #24
 80029b2:	f107 020a 	add.w	r2, r7, #10
 80029b6:	2302      	movs	r3, #2
 80029b8:	2129      	movs	r1, #41	@ 0x29
 80029ba:	f001 fb43 	bl	8004044 <wm8994_write_reg>
 80029be:	4602      	mov	r2, r0
 80029c0:	68fb      	ldr	r3, [r7, #12]
 80029c2:	4413      	add	r3, r2
 80029c4:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	f103 0018 	add.w	r0, r3, #24
 80029cc:	f107 020a 	add.w	r2, r7, #10
 80029d0:	2302      	movs	r3, #2
 80029d2:	212a      	movs	r1, #42	@ 0x2a
 80029d4:	f001 fb36 	bl	8004044 <wm8994_write_reg>
 80029d8:	4602      	mov	r2, r0
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	4413      	add	r3, r2
 80029de:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 80029e0:	f240 3303 	movw	r3, #771	@ 0x303
 80029e4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	f103 0018 	add.w	r0, r3, #24
 80029ec:	f107 020a 	add.w	r2, r7, #10
 80029f0:	2302      	movs	r3, #2
 80029f2:	2104      	movs	r1, #4
 80029f4:	f001 fb26 	bl	8004044 <wm8994_write_reg>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	4413      	add	r3, r2
 80029fe:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8002a00:	23db      	movs	r3, #219	@ 0xdb
 8002a02:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	f103 0018 	add.w	r0, r3, #24
 8002a0a:	f107 020a 	add.w	r2, r7, #10
 8002a0e:	2302      	movs	r3, #2
 8002a10:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002a14:	f001 fb16 	bl	8004044 <wm8994_write_reg>
 8002a18:	4602      	mov	r2, r0
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	4413      	add	r3, r2
 8002a1e:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8002a20:	f246 3350 	movw	r3, #25424	@ 0x6350
 8002a24:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	f103 0018 	add.w	r0, r3, #24
 8002a2c:	f107 020a 	add.w	r2, r7, #10
 8002a30:	2302      	movs	r3, #2
 8002a32:	2102      	movs	r1, #2
 8002a34:	f001 fb06 	bl	8004044 <wm8994_write_reg>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	4413      	add	r3, r2
 8002a3e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002a40:	2302      	movs	r3, #2
 8002a42:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f103 0018 	add.w	r0, r3, #24
 8002a4a:	f107 020a 	add.w	r2, r7, #10
 8002a4e:	2302      	movs	r3, #2
 8002a50:	f240 6106 	movw	r1, #1542	@ 0x606
 8002a54:	f001 faf6 	bl	8004044 <wm8994_write_reg>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4413      	add	r3, r2
 8002a5e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	f103 0018 	add.w	r0, r3, #24
 8002a66:	f107 020a 	add.w	r2, r7, #10
 8002a6a:	2302      	movs	r3, #2
 8002a6c:	f240 6107 	movw	r1, #1543	@ 0x607
 8002a70:	f001 fae8 	bl	8004044 <wm8994_write_reg>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	4413      	add	r3, r2
 8002a7a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 8002a7c:	f248 030d 	movw	r3, #32781	@ 0x800d
 8002a80:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	f103 0018 	add.w	r0, r3, #24
 8002a88:	f107 020a 	add.w	r2, r7, #10
 8002a8c:	2302      	movs	r3, #2
 8002a8e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002a92:	f001 fad7 	bl	8004044 <wm8994_write_reg>
 8002a96:	4602      	mov	r2, r0
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	4413      	add	r3, r2
 8002a9c:	60fb      	str	r3, [r7, #12]
    break;
 8002a9e:	e0e8      	b.n	8002c72 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8002aa0:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8002aa4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f103 0018 	add.w	r0, r3, #24
 8002aac:	f107 020a 	add.w	r2, r7, #10
 8002ab0:	2302      	movs	r3, #2
 8002ab2:	2104      	movs	r1, #4
 8002ab4:	f001 fac6 	bl	8004044 <wm8994_write_reg>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	68fb      	ldr	r3, [r7, #12]
 8002abc:	4413      	add	r3, r2
 8002abe:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8002ac0:	23db      	movs	r3, #219	@ 0xdb
 8002ac2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f103 0018 	add.w	r0, r3, #24
 8002aca:	f107 020a 	add.w	r2, r7, #10
 8002ace:	2302      	movs	r3, #2
 8002ad0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002ad4:	f001 fab6 	bl	8004044 <wm8994_write_reg>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	68fb      	ldr	r3, [r7, #12]
 8002adc:	4413      	add	r3, r2
 8002ade:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8002ae0:	f246 3350 	movw	r3, #25424	@ 0x6350
 8002ae4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	f103 0018 	add.w	r0, r3, #24
 8002aec:	f107 020a 	add.w	r2, r7, #10
 8002af0:	2302      	movs	r3, #2
 8002af2:	2102      	movs	r1, #2
 8002af4:	f001 faa6 	bl	8004044 <wm8994_write_reg>
 8002af8:	4602      	mov	r2, r0
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	4413      	add	r3, r2
 8002afe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002b00:	2302      	movs	r3, #2
 8002b02:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	f103 0018 	add.w	r0, r3, #24
 8002b0a:	f107 020a 	add.w	r2, r7, #10
 8002b0e:	2302      	movs	r3, #2
 8002b10:	f240 6106 	movw	r1, #1542	@ 0x606
 8002b14:	f001 fa96 	bl	8004044 <wm8994_write_reg>
 8002b18:	4602      	mov	r2, r0
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f103 0018 	add.w	r0, r3, #24
 8002b26:	f107 020a 	add.w	r2, r7, #10
 8002b2a:	2302      	movs	r3, #2
 8002b2c:	f240 6107 	movw	r1, #1543	@ 0x607
 8002b30:	f001 fa88 	bl	8004044 <wm8994_write_reg>
 8002b34:	4602      	mov	r2, r0
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	4413      	add	r3, r2
 8002b3a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8002b3c:	230d      	movs	r3, #13
 8002b3e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	f103 0018 	add.w	r0, r3, #24
 8002b46:	f107 020a 	add.w	r2, r7, #10
 8002b4a:	2302      	movs	r3, #2
 8002b4c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002b50:	f001 fa78 	bl	8004044 <wm8994_write_reg>
 8002b54:	4602      	mov	r2, r0
 8002b56:	68fb      	ldr	r3, [r7, #12]
 8002b58:	4413      	add	r3, r2
 8002b5a:	60fb      	str	r3, [r7, #12]
    break;
 8002b5c:	e089      	b.n	8002c72 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8002b5e:	f640 733c 	movw	r3, #3900	@ 0xf3c
 8002b62:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f103 0018 	add.w	r0, r3, #24
 8002b6a:	f107 020a 	add.w	r2, r7, #10
 8002b6e:	2302      	movs	r3, #2
 8002b70:	2104      	movs	r1, #4
 8002b72:	f001 fa67 	bl	8004044 <wm8994_write_reg>
 8002b76:	4602      	mov	r2, r0
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8002b7e:	23db      	movs	r3, #219	@ 0xdb
 8002b80:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	f103 0018 	add.w	r0, r3, #24
 8002b88:	f107 020a 	add.w	r2, r7, #10
 8002b8c:	2302      	movs	r3, #2
 8002b8e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8002b92:	f001 fa57 	bl	8004044 <wm8994_write_reg>
 8002b96:	4602      	mov	r2, r0
 8002b98:	68fb      	ldr	r3, [r7, #12]
 8002b9a:	4413      	add	r3, r2
 8002b9c:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f103 0018 	add.w	r0, r3, #24
 8002ba4:	f107 020a 	add.w	r2, r7, #10
 8002ba8:	2302      	movs	r3, #2
 8002baa:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8002bae:	f001 fa49 	bl	8004044 <wm8994_write_reg>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	68fb      	ldr	r3, [r7, #12]
 8002bb6:	4413      	add	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8002bba:	f246 33a0 	movw	r3, #25504	@ 0x63a0
 8002bbe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	f103 0018 	add.w	r0, r3, #24
 8002bc6:	f107 020a 	add.w	r2, r7, #10
 8002bca:	2302      	movs	r3, #2
 8002bcc:	2102      	movs	r1, #2
 8002bce:	f001 fa39 	bl	8004044 <wm8994_write_reg>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	68fb      	ldr	r3, [r7, #12]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	f103 0018 	add.w	r0, r3, #24
 8002be4:	f107 020a 	add.w	r2, r7, #10
 8002be8:	2302      	movs	r3, #2
 8002bea:	f240 6106 	movw	r1, #1542	@ 0x606
 8002bee:	f001 fa29 	bl	8004044 <wm8994_write_reg>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	4413      	add	r3, r2
 8002bf8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	f103 0018 	add.w	r0, r3, #24
 8002c00:	f107 020a 	add.w	r2, r7, #10
 8002c04:	2302      	movs	r3, #2
 8002c06:	f240 6107 	movw	r1, #1543	@ 0x607
 8002c0a:	f001 fa1b 	bl	8004044 <wm8994_write_reg>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	68fb      	ldr	r3, [r7, #12]
 8002c12:	4413      	add	r3, r2
 8002c14:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	f103 0018 	add.w	r0, r3, #24
 8002c1c:	f107 020a 	add.w	r2, r7, #10
 8002c20:	2302      	movs	r3, #2
 8002c22:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8002c26:	f001 fa0d 	bl	8004044 <wm8994_write_reg>
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	4413      	add	r3, r2
 8002c30:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	f103 0018 	add.w	r0, r3, #24
 8002c38:	f107 020a 	add.w	r2, r7, #10
 8002c3c:	2302      	movs	r3, #2
 8002c3e:	f240 6109 	movw	r1, #1545	@ 0x609
 8002c42:	f001 f9ff 	bl	8004044 <wm8994_write_reg>
 8002c46:	4602      	mov	r2, r0
 8002c48:	68fb      	ldr	r3, [r7, #12]
 8002c4a:	4413      	add	r3, r2
 8002c4c:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8002c4e:	230d      	movs	r3, #13
 8002c50:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	f103 0018 	add.w	r0, r3, #24
 8002c58:	f107 020a 	add.w	r2, r7, #10
 8002c5c:	2302      	movs	r3, #2
 8002c5e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8002c62:	f001 f9ef 	bl	8004044 <wm8994_write_reg>
 8002c66:	4602      	mov	r2, r0
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	60fb      	str	r3, [r7, #12]
    
    break;    
 8002c6e:	e000      	b.n	8002c72 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8002c70:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	4619      	mov	r1, r3
 8002c78:	6878      	ldr	r0, [r7, #4]
 8002c7a:	f000 fff9 	bl	8003c70 <WM8994_SetFrequency>
 8002c7e:	4602      	mov	r2, r0
 8002c80:	68fb      	ldr	r3, [r7, #12]
 8002c82:	4413      	add	r3, r2
 8002c84:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	2b05      	cmp	r3, #5
 8002c8c:	d11a      	bne.n	8002cc4 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8002c8e:	2100      	movs	r1, #0
 8002c90:	6878      	ldr	r0, [r7, #4]
 8002c92:	f000 ff59 	bl	8003b48 <WM8994_SetResolution>
 8002c96:	4602      	mov	r2, r0
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	4413      	add	r3, r2
 8002c9c:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8002c9e:	2103      	movs	r1, #3
 8002ca0:	6878      	ldr	r0, [r7, #4]
 8002ca2:	f000 ffab 	bl	8003bfc <WM8994_SetProtocol>
 8002ca6:	4602      	mov	r2, r0
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	4413      	add	r3, r2
 8002cac:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	3318      	adds	r3, #24
 8002cb2:	2101      	movs	r1, #1
 8002cb4:	4618      	mov	r0, r3
 8002cb6:	f001 faf5 	bl	80042a4 <wm8994_aif1_control1_adcr_src>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	60fb      	str	r3, [r7, #12]
 8002cc2:	e01b      	b.n	8002cfc <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	68db      	ldr	r3, [r3, #12]
 8002cc8:	4619      	mov	r1, r3
 8002cca:	6878      	ldr	r0, [r7, #4]
 8002ccc:	f000 ff3c 	bl	8003b48 <WM8994_SetResolution>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	4413      	add	r3, r2
 8002cd6:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8002cd8:	2102      	movs	r1, #2
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f000 ff8e 	bl	8003bfc <WM8994_SetProtocol>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	4413      	add	r3, r2
 8002ce6:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	3318      	adds	r3, #24
 8002cec:	2101      	movs	r1, #1
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f001 fad8 	bl	80042a4 <wm8994_aif1_control1_adcr_src>
 8002cf4:	4602      	mov	r2, r0
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	4413      	add	r3, r2
 8002cfa:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8002cfc:	2300      	movs	r3, #0
 8002cfe:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f103 0018 	add.w	r0, r3, #24
 8002d06:	f107 020a 	add.w	r2, r7, #10
 8002d0a:	2302      	movs	r3, #2
 8002d0c:	f240 3102 	movw	r1, #770	@ 0x302
 8002d10:	f001 f998 	bl	8004044 <wm8994_write_reg>
 8002d14:	4602      	mov	r2, r0
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	4413      	add	r3, r2
 8002d1a:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8002d1c:	230a      	movs	r3, #10
 8002d1e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	f103 0018 	add.w	r0, r3, #24
 8002d26:	f107 020a 	add.w	r2, r7, #10
 8002d2a:	2302      	movs	r3, #2
 8002d2c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8002d30:	f001 f988 	bl	8004044 <wm8994_write_reg>
 8002d34:	4602      	mov	r2, r0
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	4413      	add	r3, r2
 8002d3a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f103 0018 	add.w	r0, r3, #24
 8002d46:	f107 020a 	add.w	r2, r7, #10
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8002d50:	f001 f978 	bl	8004044 <wm8994_write_reg>
 8002d54:	4602      	mov	r2, r0
 8002d56:	68fb      	ldr	r3, [r7, #12]
 8002d58:	4413      	add	r3, r2
 8002d5a:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 81c6 	beq.w	80030f2 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8002d66:	683b      	ldr	r3, [r7, #0]
 8002d68:	685b      	ldr	r3, [r3, #4]
 8002d6a:	2b02      	cmp	r3, #2
 8002d6c:	d164      	bne.n	8002e38 <WM8994_Init+0x988>
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	2b00      	cmp	r3, #0
 8002d74:	d160      	bne.n	8002e38 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8002d76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8002d7a:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f103 0018 	add.w	r0, r3, #24
 8002d82:	f107 020a 	add.w	r2, r7, #10
 8002d86:	2302      	movs	r3, #2
 8002d88:	212d      	movs	r1, #45	@ 0x2d
 8002d8a:	f001 f95b 	bl	8004044 <wm8994_write_reg>
 8002d8e:	4602      	mov	r2, r0
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	4413      	add	r3, r2
 8002d94:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	f103 0018 	add.w	r0, r3, #24
 8002d9c:	f107 020a 	add.w	r2, r7, #10
 8002da0:	2302      	movs	r3, #2
 8002da2:	212e      	movs	r1, #46	@ 0x2e
 8002da4:	f001 f94e 	bl	8004044 <wm8994_write_reg>
 8002da8:	4602      	mov	r2, r0
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	4413      	add	r3, r2
 8002dae:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8002db0:	4b52      	ldr	r3, [pc, #328]	@ (8002efc <WM8994_Init+0xa4c>)
 8002db2:	781b      	ldrb	r3, [r3, #0]
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d119      	bne.n	8002dec <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8002db8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002dbc:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f103 0018 	add.w	r0, r3, #24
 8002dc4:	f107 020a 	add.w	r2, r7, #10
 8002dc8:	2302      	movs	r3, #2
 8002dca:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002dce:	f001 f939 	bl	8004044 <wm8994_write_reg>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8002dda:	4b48      	ldr	r3, [pc, #288]	@ (8002efc <WM8994_Init+0xa4c>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8002de0:	f240 1145 	movw	r1, #325	@ 0x145
 8002de4:	6878      	ldr	r0, [r7, #4]
 8002de6:	f001 f8b5 	bl	8003f54 <WM8994_Delay>
 8002dea:	e014      	b.n	8002e16 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8002dec:	f248 1308 	movw	r3, #33032	@ 0x8108
 8002df0:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	f103 0018 	add.w	r0, r3, #24
 8002df8:	f107 020a 	add.w	r2, r7, #10
 8002dfc:	2302      	movs	r3, #2
 8002dfe:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8002e02:	f001 f91f 	bl	8004044 <wm8994_write_reg>
 8002e06:	4602      	mov	r2, r0
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	4413      	add	r3, r2
 8002e0c:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8002e0e:	2132      	movs	r1, #50	@ 0x32
 8002e10:	6878      	ldr	r0, [r7, #4]
 8002e12:	f001 f89f 	bl	8003f54 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8002e16:	2300      	movs	r3, #0
 8002e18:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	f103 0018 	add.w	r0, r3, #24
 8002e20:	f107 020a 	add.w	r2, r7, #10
 8002e24:	2302      	movs	r3, #2
 8002e26:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8002e2a:	f001 f90b 	bl	8004044 <wm8994_write_reg>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	4413      	add	r3, r2
 8002e34:	60fb      	str	r3, [r7, #12]
 8002e36:	e0f4      	b.n	8003022 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8002e38:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e3c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	f103 0018 	add.w	r0, r3, #24
 8002e44:	f107 020a 	add.w	r2, r7, #10
 8002e48:	2302      	movs	r3, #2
 8002e4a:	2103      	movs	r1, #3
 8002e4c:	f001 f8fa 	bl	8004044 <wm8994_write_reg>
 8002e50:	4602      	mov	r2, r0
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	4413      	add	r3, r2
 8002e56:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8002e58:	2300      	movs	r3, #0
 8002e5a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	f103 0018 	add.w	r0, r3, #24
 8002e62:	f107 020a 	add.w	r2, r7, #10
 8002e66:	2302      	movs	r3, #2
 8002e68:	2122      	movs	r1, #34	@ 0x22
 8002e6a:	f001 f8eb 	bl	8004044 <wm8994_write_reg>
 8002e6e:	4602      	mov	r2, r0
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	4413      	add	r3, r2
 8002e74:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	f103 0018 	add.w	r0, r3, #24
 8002e7c:	f107 020a 	add.w	r2, r7, #10
 8002e80:	2302      	movs	r3, #2
 8002e82:	2123      	movs	r1, #35	@ 0x23
 8002e84:	f001 f8de 	bl	8004044 <wm8994_write_reg>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	4413      	add	r3, r2
 8002e8e:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8002e90:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8002e94:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	f103 0018 	add.w	r0, r3, #24
 8002e9c:	f107 020a 	add.w	r2, r7, #10
 8002ea0:	2302      	movs	r3, #2
 8002ea2:	2136      	movs	r1, #54	@ 0x36
 8002ea4:	f001 f8ce 	bl	8004044 <wm8994_write_reg>
 8002ea8:	4602      	mov	r2, r0
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	4413      	add	r3, r2
 8002eae:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8002eb0:	f243 0303 	movw	r3, #12291	@ 0x3003
 8002eb4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	f103 0018 	add.w	r0, r3, #24
 8002ebc:	f107 020a 	add.w	r2, r7, #10
 8002ec0:	2302      	movs	r3, #2
 8002ec2:	2101      	movs	r1, #1
 8002ec4:	f001 f8be 	bl	8004044 <wm8994_write_reg>
 8002ec8:	4602      	mov	r2, r0
 8002eca:	68fb      	ldr	r3, [r7, #12]
 8002ecc:	4413      	add	r3, r2
 8002ece:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	2b05      	cmp	r3, #5
 8002ed6:	d113      	bne.n	8002f00 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8002ed8:	f240 2305 	movw	r3, #517	@ 0x205
 8002edc:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	f103 0018 	add.w	r0, r3, #24
 8002ee4:	f107 020a 	add.w	r2, r7, #10
 8002ee8:	2302      	movs	r3, #2
 8002eea:	2151      	movs	r1, #81	@ 0x51
 8002eec:	f001 f8aa 	bl	8004044 <wm8994_write_reg>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	4413      	add	r3, r2
 8002ef6:	60fb      	str	r3, [r7, #12]
 8002ef8:	e011      	b.n	8002f1e <WM8994_Init+0xa6e>
 8002efa:	bf00      	nop
 8002efc:	240004e8 	.word	0x240004e8
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8002f00:	2305      	movs	r3, #5
 8002f02:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	f103 0018 	add.w	r0, r3, #24
 8002f0a:	f107 020a 	add.w	r2, r7, #10
 8002f0e:	2302      	movs	r3, #2
 8002f10:	2151      	movs	r1, #81	@ 0x51
 8002f12:	f001 f897 	bl	8004044 <wm8994_write_reg>
 8002f16:	4602      	mov	r2, r0
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8002f1e:	f243 3303 	movw	r3, #13059	@ 0x3303
 8002f22:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	f103 0018 	add.w	r0, r3, #24
 8002f2a:	f107 020a 	add.w	r2, r7, #10
 8002f2e:	2302      	movs	r3, #2
 8002f30:	2101      	movs	r1, #1
 8002f32:	f001 f887 	bl	8004044 <wm8994_write_reg>
 8002f36:	4602      	mov	r2, r0
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	4413      	add	r3, r2
 8002f3c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8002f3e:	2322      	movs	r3, #34	@ 0x22
 8002f40:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	f103 0018 	add.w	r0, r3, #24
 8002f48:	f107 020a 	add.w	r2, r7, #10
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	2160      	movs	r1, #96	@ 0x60
 8002f50:	f001 f878 	bl	8004044 <wm8994_write_reg>
 8002f54:	4602      	mov	r2, r0
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	4413      	add	r3, r2
 8002f5a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8002f5c:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8002f60:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f103 0018 	add.w	r0, r3, #24
 8002f68:	f107 020a 	add.w	r2, r7, #10
 8002f6c:	2302      	movs	r3, #2
 8002f6e:	214c      	movs	r1, #76	@ 0x4c
 8002f70:	f001 f868 	bl	8004044 <wm8994_write_reg>
 8002f74:	4602      	mov	r2, r0
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	4413      	add	r3, r2
 8002f7a:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8002f7c:	210f      	movs	r1, #15
 8002f7e:	6878      	ldr	r0, [r7, #4]
 8002f80:	f000 ffe8 	bl	8003f54 <WM8994_Delay>
      
      tmp = 0x0001;
 8002f84:	2301      	movs	r3, #1
 8002f86:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	f103 0018 	add.w	r0, r3, #24
 8002f8e:	f107 020a 	add.w	r2, r7, #10
 8002f92:	2302      	movs	r3, #2
 8002f94:	212d      	movs	r1, #45	@ 0x2d
 8002f96:	f001 f855 	bl	8004044 <wm8994_write_reg>
 8002f9a:	4602      	mov	r2, r0
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	4413      	add	r3, r2
 8002fa0:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	f103 0018 	add.w	r0, r3, #24
 8002fa8:	f107 020a 	add.w	r2, r7, #10
 8002fac:	2302      	movs	r3, #2
 8002fae:	212e      	movs	r1, #46	@ 0x2e
 8002fb0:	f001 f848 	bl	8004044 <wm8994_write_reg>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	68fb      	ldr	r3, [r7, #12]
 8002fb8:	4413      	add	r3, r2
 8002fba:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8002fbc:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8002fc0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	f103 0018 	add.w	r0, r3, #24
 8002fc8:	f107 020a 	add.w	r2, r7, #10
 8002fcc:	2302      	movs	r3, #2
 8002fce:	2103      	movs	r1, #3
 8002fd0:	f001 f838 	bl	8004044 <wm8994_write_reg>
 8002fd4:	4602      	mov	r2, r0
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	4413      	add	r3, r2
 8002fda:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8002fdc:	2333      	movs	r3, #51	@ 0x33
 8002fde:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	f103 0018 	add.w	r0, r3, #24
 8002fe6:	f107 020a 	add.w	r2, r7, #10
 8002fea:	2302      	movs	r3, #2
 8002fec:	2154      	movs	r1, #84	@ 0x54
 8002fee:	f001 f829 	bl	8004044 <wm8994_write_reg>
 8002ff2:	4602      	mov	r2, r0
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	4413      	add	r3, r2
 8002ff8:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8002ffa:	f240 1101 	movw	r1, #257	@ 0x101
 8002ffe:	6878      	ldr	r0, [r7, #4]
 8003000:	f000 ffa8 	bl	8003f54 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8003004:	23ee      	movs	r3, #238	@ 0xee
 8003006:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	f103 0018 	add.w	r0, r3, #24
 800300e:	f107 020a 	add.w	r2, r7, #10
 8003012:	2302      	movs	r3, #2
 8003014:	2160      	movs	r1, #96	@ 0x60
 8003016:	f001 f815 	bl	8004044 <wm8994_write_reg>
 800301a:	4602      	mov	r2, r0
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	4413      	add	r3, r2
 8003020:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8003022:	23c0      	movs	r3, #192	@ 0xc0
 8003024:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	f103 0018 	add.w	r0, r3, #24
 800302c:	f107 020a 	add.w	r2, r7, #10
 8003030:	2302      	movs	r3, #2
 8003032:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8003036:	f001 f805 	bl	8004044 <wm8994_write_reg>
 800303a:	4602      	mov	r2, r0
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	4413      	add	r3, r2
 8003040:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	f103 0018 	add.w	r0, r3, #24
 8003048:	f107 020a 	add.w	r2, r7, #10
 800304c:	2302      	movs	r3, #2
 800304e:	f240 6111 	movw	r1, #1553	@ 0x611
 8003052:	f000 fff7 	bl	8004044 <wm8994_write_reg>
 8003056:	4602      	mov	r2, r0
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	4413      	add	r3, r2
 800305c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 800305e:	2310      	movs	r3, #16
 8003060:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	f103 0018 	add.w	r0, r3, #24
 8003068:	f107 020a 	add.w	r2, r7, #10
 800306c:	2302      	movs	r3, #2
 800306e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003072:	f000 ffe7 	bl	8004044 <wm8994_write_reg>
 8003076:	4602      	mov	r2, r0
 8003078:	68fb      	ldr	r3, [r7, #12]
 800307a:	4413      	add	r3, r2
 800307c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 800307e:	23c0      	movs	r3, #192	@ 0xc0
 8003080:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	f103 0018 	add.w	r0, r3, #24
 8003088:	f107 020a 	add.w	r2, r7, #10
 800308c:	2302      	movs	r3, #2
 800308e:	f240 6112 	movw	r1, #1554	@ 0x612
 8003092:	f000 ffd7 	bl	8004044 <wm8994_write_reg>
 8003096:	4602      	mov	r2, r0
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	4413      	add	r3, r2
 800309c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	f103 0018 	add.w	r0, r3, #24
 80030a4:	f107 020a 	add.w	r2, r7, #10
 80030a8:	2302      	movs	r3, #2
 80030aa:	f240 6113 	movw	r1, #1555	@ 0x613
 80030ae:	f000 ffc9 	bl	8004044 <wm8994_write_reg>
 80030b2:	4602      	mov	r2, r0
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	4413      	add	r3, r2
 80030b8:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 80030ba:	2310      	movs	r3, #16
 80030bc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	f103 0018 	add.w	r0, r3, #24
 80030c4:	f107 020a 	add.w	r2, r7, #10
 80030c8:	2302      	movs	r3, #2
 80030ca:	f240 4122 	movw	r1, #1058	@ 0x422
 80030ce:	f000 ffb9 	bl	8004044 <wm8994_write_reg>
 80030d2:	4602      	mov	r2, r0
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	4413      	add	r3, r2
 80030d8:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	691b      	ldr	r3, [r3, #16]
 80030de:	b2db      	uxtb	r3, r3
 80030e0:	461a      	mov	r2, r3
 80030e2:	2101      	movs	r1, #1
 80030e4:	6878      	ldr	r0, [r7, #4]
 80030e6:	f000 f99f 	bl	8003428 <WM8994_SetVolume>
 80030ea:	4602      	mov	r2, r0
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	4413      	add	r3, r2
 80030f0:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	f000 80b5 	beq.w	8003266 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	2b01      	cmp	r3, #1
 8003102:	d003      	beq.n	800310c <WM8994_Init+0xc5c>
 8003104:	683b      	ldr	r3, [r7, #0]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	2b02      	cmp	r3, #2
 800310a:	d130      	bne.n	800316e <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 800310c:	2313      	movs	r3, #19
 800310e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	f103 0018 	add.w	r0, r3, #24
 8003116:	f107 020a 	add.w	r2, r7, #10
 800311a:	2302      	movs	r3, #2
 800311c:	2101      	movs	r1, #1
 800311e:	f000 ff91 	bl	8004044 <wm8994_write_reg>
 8003122:	4602      	mov	r2, r0
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	4413      	add	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 800312a:	2302      	movs	r3, #2
 800312c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	f103 0018 	add.w	r0, r3, #24
 8003134:	f107 020a 	add.w	r2, r7, #10
 8003138:	2302      	movs	r3, #2
 800313a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800313e:	f000 ff81 	bl	8004044 <wm8994_write_reg>
 8003142:	4602      	mov	r2, r0
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	4413      	add	r3, r2
 8003148:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 800314a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800314e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f103 0018 	add.w	r0, r3, #24
 8003156:	f107 020a 	add.w	r2, r7, #10
 800315a:	2302      	movs	r3, #2
 800315c:	f240 4111 	movw	r1, #1041	@ 0x411
 8003160:	f000 ff70 	bl	8004044 <wm8994_write_reg>
 8003164:	4602      	mov	r2, r0
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	4413      	add	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
 800316c:	e06f      	b.n	800324e <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800316e:	683b      	ldr	r3, [r7, #0]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	2b05      	cmp	r3, #5
 8003174:	d13e      	bne.n	80031f4 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8003176:	2313      	movs	r3, #19
 8003178:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	f103 0018 	add.w	r0, r3, #24
 8003180:	f107 020a 	add.w	r2, r7, #10
 8003184:	2302      	movs	r3, #2
 8003186:	2101      	movs	r1, #1
 8003188:	f000 ff5c 	bl	8004044 <wm8994_write_reg>
 800318c:	4602      	mov	r2, r0
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	4413      	add	r3, r2
 8003192:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8003194:	2302      	movs	r3, #2
 8003196:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	f103 0018 	add.w	r0, r3, #24
 800319e:	f107 020a 	add.w	r2, r7, #10
 80031a2:	2302      	movs	r3, #2
 80031a4:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 80031a8:	f000 ff4c 	bl	8004044 <wm8994_write_reg>
 80031ac:	4602      	mov	r2, r0
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	4413      	add	r3, r2
 80031b2:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 80031b4:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 80031b8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	f103 0018 	add.w	r0, r3, #24
 80031c0:	f107 020a 	add.w	r2, r7, #10
 80031c4:	2302      	movs	r3, #2
 80031c6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80031ca:	f000 ff3b 	bl	8004044 <wm8994_write_reg>
 80031ce:	4602      	mov	r2, r0
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	4413      	add	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	f103 0018 	add.w	r0, r3, #24
 80031dc:	f107 020a 	add.w	r2, r7, #10
 80031e0:	2302      	movs	r3, #2
 80031e2:	f240 4111 	movw	r1, #1041	@ 0x411
 80031e6:	f000 ff2d 	bl	8004044 <wm8994_write_reg>
 80031ea:	4602      	mov	r2, r0
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	4413      	add	r3, r2
 80031f0:	60fb      	str	r3, [r7, #12]
 80031f2:	e02c      	b.n	800324e <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 80031f4:	230b      	movs	r3, #11
 80031f6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	f103 0018 	add.w	r0, r3, #24
 80031fe:	f107 020a 	add.w	r2, r7, #10
 8003202:	2302      	movs	r3, #2
 8003204:	2118      	movs	r1, #24
 8003206:	f000 ff1d 	bl	8004044 <wm8994_write_reg>
 800320a:	4602      	mov	r2, r0
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	4413      	add	r3, r2
 8003210:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	f103 0018 	add.w	r0, r3, #24
 8003218:	f107 020a 	add.w	r2, r7, #10
 800321c:	2302      	movs	r3, #2
 800321e:	211a      	movs	r1, #26
 8003220:	f000 ff10 	bl	8004044 <wm8994_write_reg>
 8003224:	4602      	mov	r2, r0
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	4413      	add	r3, r2
 800322a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800322c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8003230:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	f103 0018 	add.w	r0, r3, #24
 8003238:	f107 020a 	add.w	r2, r7, #10
 800323c:	2302      	movs	r3, #2
 800323e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8003242:	f000 feff 	bl	8004044 <wm8994_write_reg>
 8003246:	4602      	mov	r2, r0
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	4413      	add	r3, r2
 800324c:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	691b      	ldr	r3, [r3, #16]
 8003252:	b2db      	uxtb	r3, r3
 8003254:	461a      	mov	r2, r3
 8003256:	2100      	movs	r1, #0
 8003258:	6878      	ldr	r0, [r7, #4]
 800325a:	f000 f8e5 	bl	8003428 <WM8994_SetVolume>
 800325e:	4602      	mov	r2, r0
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	4413      	add	r3, r2
 8003264:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d002      	beq.n	8003272 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 800326c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003270:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003272:	68fb      	ldr	r3, [r7, #12]
}
 8003274:	4618      	mov	r0, r3
 8003276:	3710      	adds	r7, #16
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b082      	sub	sp, #8
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 8003284:	2100      	movs	r1, #0
 8003286:	6878      	ldr	r0, [r7, #4]
 8003288:	f000 f861 	bl	800334e <WM8994_Stop>
 800328c:	4603      	mov	r3, r0
}
 800328e:	4618      	mov	r0, r3
 8003290:	3708      	adds	r7, #8
 8003292:	46bd      	mov	sp, r7
 8003294:	bd80      	pop	{r7, pc}

08003296 <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 8003296:	b580      	push	{r7, lr}
 8003298:	b084      	sub	sp, #16
 800329a:	af00      	add	r7, sp, #0
 800329c:	6078      	str	r0, [r7, #4]
 800329e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	3318      	adds	r3, #24
 80032aa:	f107 020a 	add.w	r2, r7, #10
 80032ae:	4611      	mov	r1, r2
 80032b0:	4618      	mov	r0, r3
 80032b2:	f000 ff00 	bl	80040b6 <wm8994_sw_reset_r>
 80032b6:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 80032b8:	897b      	ldrh	r3, [r7, #10]
 80032ba:	461a      	mov	r2, r3
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	601a      	str	r2, [r3, #0]
  
  return ret;
 80032c0:	68fb      	ldr	r3, [r7, #12]
}
 80032c2:	4618      	mov	r0, r3
 80032c4:	3710      	adds	r7, #16
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bd80      	pop	{r7, pc}

080032ca <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 80032ca:	b580      	push	{r7, lr}
 80032cc:	b082      	sub	sp, #8
 80032ce:	af00      	add	r7, sp, #0
 80032d0:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80032d2:	2100      	movs	r1, #0
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 f9d3 	bl	8003680 <WM8994_SetMute>
 80032da:	4603      	mov	r3, r0
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3708      	adds	r7, #8
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bd80      	pop	{r7, pc}

080032e4 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b084      	sub	sp, #16
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 80032ec:	2301      	movs	r3, #1
 80032ee:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 80032f0:	2101      	movs	r1, #1
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f000 f9c4 	bl	8003680 <WM8994_SetMute>
 80032f8:	4603      	mov	r3, r0
 80032fa:	2b00      	cmp	r3, #0
 80032fc:	d003      	beq.n	8003306 <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 80032fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003302:	60fb      	str	r3, [r7, #12]
 8003304:	e011      	b.n	800332a <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	f103 0018 	add.w	r0, r3, #24
 800330c:	f107 020a 	add.w	r2, r7, #10
 8003310:	2302      	movs	r3, #2
 8003312:	2102      	movs	r1, #2
 8003314:	f000 fe96 	bl	8004044 <wm8994_write_reg>
 8003318:	4603      	mov	r3, r0
 800331a:	2b00      	cmp	r3, #0
 800331c:	d003      	beq.n	8003326 <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 800331e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003322:	60fb      	str	r3, [r7, #12]
 8003324:	e001      	b.n	800332a <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 8003326:	2300      	movs	r3, #0
 8003328:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800332a:	68fb      	ldr	r3, [r7, #12]
}
 800332c:	4618      	mov	r0, r3
 800332e:	3710      	adds	r7, #16
 8003330:	46bd      	mov	sp, r7
 8003332:	bd80      	pop	{r7, pc}

08003334 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8003334:	b580      	push	{r7, lr}
 8003336:	b082      	sub	sp, #8
 8003338:	af00      	add	r7, sp, #0
 800333a:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800333c:	2100      	movs	r1, #0
 800333e:	6878      	ldr	r0, [r7, #4]
 8003340:	f000 f99e 	bl	8003680 <WM8994_SetMute>
 8003344:	4603      	mov	r3, r0
}
 8003346:	4618      	mov	r0, r3
 8003348:	3708      	adds	r7, #8
 800334a:	46bd      	mov	sp, r7
 800334c:	bd80      	pop	{r7, pc}

0800334e <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 800334e:	b580      	push	{r7, lr}
 8003350:	b084      	sub	sp, #16
 8003352:	af00      	add	r7, sp, #0
 8003354:	6078      	str	r0, [r7, #4]
 8003356:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8003358:	2101      	movs	r1, #1
 800335a:	6878      	ldr	r0, [r7, #4]
 800335c:	f000 f990 	bl	8003680 <WM8994_SetMute>
 8003360:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8003362:	683b      	ldr	r3, [r7, #0]
 8003364:	2b01      	cmp	r3, #1
 8003366:	d054      	beq.n	8003412 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 8003368:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800336c:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f103 0018 	add.w	r0, r3, #24
 8003374:	f107 020a 	add.w	r2, r7, #10
 8003378:	2302      	movs	r3, #2
 800337a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800337e:	f000 fe61 	bl	8004044 <wm8994_write_reg>
 8003382:	4602      	mov	r2, r0
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	4413      	add	r3, r2
 8003388:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	f103 0018 	add.w	r0, r3, #24
 8003390:	f107 020a 	add.w	r2, r7, #10
 8003394:	2302      	movs	r3, #2
 8003396:	f240 4122 	movw	r1, #1058	@ 0x422
 800339a:	f000 fe53 	bl	8004044 <wm8994_write_reg>
 800339e:	4602      	mov	r2, r0
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	4413      	add	r3, r2
 80033a4:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 80033a6:	2300      	movs	r3, #0
 80033a8:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	f103 0018 	add.w	r0, r3, #24
 80033b0:	f107 020a 	add.w	r2, r7, #10
 80033b4:	2302      	movs	r3, #2
 80033b6:	212d      	movs	r1, #45	@ 0x2d
 80033b8:	f000 fe44 	bl	8004044 <wm8994_write_reg>
 80033bc:	4602      	mov	r2, r0
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	4413      	add	r3, r2
 80033c2:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	f103 0018 	add.w	r0, r3, #24
 80033ca:	f107 020a 	add.w	r2, r7, #10
 80033ce:	2302      	movs	r3, #2
 80033d0:	212e      	movs	r1, #46	@ 0x2e
 80033d2:	f000 fe37 	bl	8004044 <wm8994_write_reg>
 80033d6:	4602      	mov	r2, r0
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	4413      	add	r3, r2
 80033dc:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f103 0018 	add.w	r0, r3, #24
 80033e4:	f107 020a 	add.w	r2, r7, #10
 80033e8:	2302      	movs	r3, #2
 80033ea:	2105      	movs	r1, #5
 80033ec:	f000 fe2a 	bl	8004044 <wm8994_write_reg>
 80033f0:	4602      	mov	r2, r0
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	4413      	add	r3, r2
 80033f6:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	f103 0018 	add.w	r0, r3, #24
 80033fe:	f107 020a 	add.w	r2, r7, #10
 8003402:	2302      	movs	r3, #2
 8003404:	2100      	movs	r1, #0
 8003406:	f000 fe1d 	bl	8004044 <wm8994_write_reg>
 800340a:	4602      	mov	r2, r0
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	4413      	add	r3, r2
 8003410:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d002      	beq.n	800341e <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 8003418:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800341c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800341e:	68fb      	ldr	r3, [r7, #12]
}
 8003420:	4618      	mov	r0, r3
 8003422:	3710      	adds	r7, #16
 8003424:	46bd      	mov	sp, r7
 8003426:	bd80      	pop	{r7, pc}

08003428 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8003428:	b580      	push	{r7, lr}
 800342a:	b086      	sub	sp, #24
 800342c:	af00      	add	r7, sp, #0
 800342e:	60f8      	str	r0, [r7, #12]
 8003430:	60b9      	str	r1, [r7, #8]
 8003432:	4613      	mov	r3, r2
 8003434:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8003436:	68bb      	ldr	r3, [r7, #8]
 8003438:	2b01      	cmp	r3, #1
 800343a:	f040 8089 	bne.w	8003550 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 800343e:	79fb      	ldrb	r3, [r7, #7]
 8003440:	2b3e      	cmp	r3, #62	@ 0x3e
 8003442:	d93c      	bls.n	80034be <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8003444:	2100      	movs	r1, #0
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 f91a 	bl	8003680 <WM8994_SetMute>
 800344c:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 800344e:	f240 137f 	movw	r3, #383	@ 0x17f
 8003452:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	f103 0018 	add.w	r0, r3, #24
 800345a:	f107 0212 	add.w	r2, r7, #18
 800345e:	2302      	movs	r3, #2
 8003460:	211c      	movs	r1, #28
 8003462:	f000 fdef 	bl	8004044 <wm8994_write_reg>
 8003466:	4602      	mov	r2, r0
 8003468:	697b      	ldr	r3, [r7, #20]
 800346a:	4413      	add	r3, r2
 800346c:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	f103 0018 	add.w	r0, r3, #24
 8003474:	f107 0212 	add.w	r2, r7, #18
 8003478:	2302      	movs	r3, #2
 800347a:	211d      	movs	r1, #29
 800347c:	f000 fde2 	bl	8004044 <wm8994_write_reg>
 8003480:	4602      	mov	r2, r0
 8003482:	697b      	ldr	r3, [r7, #20]
 8003484:	4413      	add	r3, r2
 8003486:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	f103 0018 	add.w	r0, r3, #24
 800348e:	f107 0212 	add.w	r2, r7, #18
 8003492:	2302      	movs	r3, #2
 8003494:	2126      	movs	r1, #38	@ 0x26
 8003496:	f000 fdd5 	bl	8004044 <wm8994_write_reg>
 800349a:	4602      	mov	r2, r0
 800349c:	697b      	ldr	r3, [r7, #20]
 800349e:	4413      	add	r3, r2
 80034a0:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	f103 0018 	add.w	r0, r3, #24
 80034a8:	f107 0212 	add.w	r2, r7, #18
 80034ac:	2302      	movs	r3, #2
 80034ae:	2127      	movs	r1, #39	@ 0x27
 80034b0:	f000 fdc8 	bl	8004044 <wm8994_write_reg>
 80034b4:	4602      	mov	r2, r0
 80034b6:	697b      	ldr	r3, [r7, #20]
 80034b8:	4413      	add	r3, r2
 80034ba:	617b      	str	r3, [r7, #20]
 80034bc:	e083      	b.n	80035c6 <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 80034be:	79fb      	ldrb	r3, [r7, #7]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d105      	bne.n	80034d0 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 80034c4:	2101      	movs	r1, #1
 80034c6:	68f8      	ldr	r0, [r7, #12]
 80034c8:	f000 f8da 	bl	8003680 <WM8994_SetMute>
 80034cc:	6178      	str	r0, [r7, #20]
 80034ce:	e07a      	b.n	80035c6 <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80034d0:	2100      	movs	r1, #0
 80034d2:	68f8      	ldr	r0, [r7, #12]
 80034d4:	f000 f8d4 	bl	8003680 <WM8994_SetMute>
 80034d8:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 80034da:	79fb      	ldrb	r3, [r7, #7]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	f103 0018 	add.w	r0, r3, #24
 80034ec:	f107 0212 	add.w	r2, r7, #18
 80034f0:	2302      	movs	r3, #2
 80034f2:	211c      	movs	r1, #28
 80034f4:	f000 fda6 	bl	8004044 <wm8994_write_reg>
 80034f8:	4602      	mov	r2, r0
 80034fa:	697b      	ldr	r3, [r7, #20]
 80034fc:	4413      	add	r3, r2
 80034fe:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f103 0018 	add.w	r0, r3, #24
 8003506:	f107 0212 	add.w	r2, r7, #18
 800350a:	2302      	movs	r3, #2
 800350c:	211d      	movs	r1, #29
 800350e:	f000 fd99 	bl	8004044 <wm8994_write_reg>
 8003512:	4602      	mov	r2, r0
 8003514:	697b      	ldr	r3, [r7, #20]
 8003516:	4413      	add	r3, r2
 8003518:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	f103 0018 	add.w	r0, r3, #24
 8003520:	f107 0212 	add.w	r2, r7, #18
 8003524:	2302      	movs	r3, #2
 8003526:	2126      	movs	r1, #38	@ 0x26
 8003528:	f000 fd8c 	bl	8004044 <wm8994_write_reg>
 800352c:	4602      	mov	r2, r0
 800352e:	697b      	ldr	r3, [r7, #20]
 8003530:	4413      	add	r3, r2
 8003532:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8003534:	68fb      	ldr	r3, [r7, #12]
 8003536:	f103 0018 	add.w	r0, r3, #24
 800353a:	f107 0212 	add.w	r2, r7, #18
 800353e:	2302      	movs	r3, #2
 8003540:	2127      	movs	r1, #39	@ 0x27
 8003542:	f000 fd7f 	bl	8004044 <wm8994_write_reg>
 8003546:	4602      	mov	r2, r0
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	4413      	add	r3, r2
 800354c:	617b      	str	r3, [r7, #20]
 800354e:	e03a      	b.n	80035c6 <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8003550:	79fb      	ldrb	r3, [r7, #7]
 8003552:	b29b      	uxth	r3, r3
 8003554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003558:	b29b      	uxth	r3, r3
 800355a:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	f103 0018 	add.w	r0, r3, #24
 8003562:	f107 0212 	add.w	r2, r7, #18
 8003566:	2302      	movs	r3, #2
 8003568:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800356c:	f000 fd6a 	bl	8004044 <wm8994_write_reg>
 8003570:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8003572:	68fb      	ldr	r3, [r7, #12]
 8003574:	f103 0018 	add.w	r0, r3, #24
 8003578:	f107 0212 	add.w	r2, r7, #18
 800357c:	2302      	movs	r3, #2
 800357e:	f240 4101 	movw	r1, #1025	@ 0x401
 8003582:	f000 fd5f 	bl	8004044 <wm8994_write_reg>
 8003586:	4602      	mov	r2, r0
 8003588:	697b      	ldr	r3, [r7, #20]
 800358a:	4413      	add	r3, r2
 800358c:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	f103 0018 	add.w	r0, r3, #24
 8003594:	f107 0212 	add.w	r2, r7, #18
 8003598:	2302      	movs	r3, #2
 800359a:	f240 4104 	movw	r1, #1028	@ 0x404
 800359e:	f000 fd51 	bl	8004044 <wm8994_write_reg>
 80035a2:	4602      	mov	r2, r0
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	4413      	add	r3, r2
 80035a8:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	f103 0018 	add.w	r0, r3, #24
 80035b0:	f107 0212 	add.w	r2, r7, #18
 80035b4:	2302      	movs	r3, #2
 80035b6:	f240 4105 	movw	r1, #1029	@ 0x405
 80035ba:	f000 fd43 	bl	8004044 <wm8994_write_reg>
 80035be:	4602      	mov	r2, r0
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4413      	add	r3, r2
 80035c4:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 80035c6:	697b      	ldr	r3, [r7, #20]
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d002      	beq.n	80035d2 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 80035cc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035d0:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80035d2:	697b      	ldr	r3, [r7, #20]
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3718      	adds	r7, #24
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	60b9      	str	r1, [r7, #8]
 80035e6:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 80035e8:	2300      	movs	r3, #0
 80035ea:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	2b01      	cmp	r3, #1
 80035f0:	d11e      	bne.n	8003630 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	3318      	adds	r3, #24
 80035f6:	f107 0212 	add.w	r2, r7, #18
 80035fa:	4611      	mov	r1, r2
 80035fc:	4618      	mov	r0, r3
 80035fe:	f000 fd6a 	bl	80040d6 <wm8994_lo_hpout1l_vol_r>
 8003602:	4603      	mov	r3, r0
 8003604:	2b00      	cmp	r3, #0
 8003606:	d003      	beq.n	8003610 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 8003608:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800360c:	617b      	str	r3, [r7, #20]
 800360e:	e02d      	b.n	800366c <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8003610:	8a7b      	ldrh	r3, [r7, #18]
 8003612:	461a      	mov	r2, r3
 8003614:	2364      	movs	r3, #100	@ 0x64
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	4a17      	ldr	r2, [pc, #92]	@ (8003678 <WM8994_GetVolume+0x9c>)
 800361c:	fb82 1203 	smull	r1, r2, r2, r3
 8003620:	441a      	add	r2, r3
 8003622:	1152      	asrs	r2, r2, #5
 8003624:	17db      	asrs	r3, r3, #31
 8003626:	1ad3      	subs	r3, r2, r3
 8003628:	b2da      	uxtb	r2, r3
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	701a      	strb	r2, [r3, #0]
 800362e:	e01d      	b.n	800366c <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	3318      	adds	r3, #24
 8003634:	f107 0212 	add.w	r2, r7, #18
 8003638:	4611      	mov	r1, r2
 800363a:	4618      	mov	r0, r3
 800363c:	f000 fe63 	bl	8004306 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8003640:	4603      	mov	r3, r0
 8003642:	2b00      	cmp	r3, #0
 8003644:	d003      	beq.n	800364e <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 8003646:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800364a:	617b      	str	r3, [r7, #20]
 800364c:	e00e      	b.n	800366c <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 800364e:	8a7b      	ldrh	r3, [r7, #18]
 8003650:	461a      	mov	r2, r3
 8003652:	2364      	movs	r3, #100	@ 0x64
 8003654:	fb02 f303 	mul.w	r3, r2, r3
 8003658:	4a08      	ldr	r2, [pc, #32]	@ (800367c <WM8994_GetVolume+0xa0>)
 800365a:	fb82 1203 	smull	r1, r2, r2, r3
 800365e:	441a      	add	r2, r3
 8003660:	11d2      	asrs	r2, r2, #7
 8003662:	17db      	asrs	r3, r3, #31
 8003664:	1ad3      	subs	r3, r2, r3
 8003666:	b2da      	uxtb	r2, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 800366c:	697b      	ldr	r3, [r7, #20]
}
 800366e:	4618      	mov	r0, r3
 8003670:	3718      	adds	r7, #24
 8003672:	46bd      	mov	sp, r7
 8003674:	bd80      	pop	{r7, pc}
 8003676:	bf00      	nop
 8003678:	82082083 	.word	0x82082083
 800367c:	891ac73b 	.word	0x891ac73b

08003680 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8003680:	b580      	push	{r7, lr}
 8003682:	b084      	sub	sp, #16
 8003684:	af00      	add	r7, sp, #0
 8003686:	6078      	str	r0, [r7, #4]
 8003688:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d11c      	bne.n	80036ca <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 8003690:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003694:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	f103 0018 	add.w	r0, r3, #24
 800369c:	f107 020a 	add.w	r2, r7, #10
 80036a0:	2302      	movs	r3, #2
 80036a2:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80036a6:	f000 fccd 	bl	8004044 <wm8994_write_reg>
 80036aa:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	f103 0018 	add.w	r0, r3, #24
 80036b2:	f107 020a 	add.w	r2, r7, #10
 80036b6:	2302      	movs	r3, #2
 80036b8:	f240 4122 	movw	r1, #1058	@ 0x422
 80036bc:	f000 fcc2 	bl	8004044 <wm8994_write_reg>
 80036c0:	4602      	mov	r2, r0
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	4413      	add	r3, r2
 80036c6:	60fb      	str	r3, [r7, #12]
 80036c8:	e01a      	b.n	8003700 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 80036ca:	2310      	movs	r3, #16
 80036cc:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	f103 0018 	add.w	r0, r3, #24
 80036d4:	f107 020a 	add.w	r2, r7, #10
 80036d8:	2302      	movs	r3, #2
 80036da:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80036de:	f000 fcb1 	bl	8004044 <wm8994_write_reg>
 80036e2:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	f103 0018 	add.w	r0, r3, #24
 80036ea:	f107 020a 	add.w	r2, r7, #10
 80036ee:	2302      	movs	r3, #2
 80036f0:	f240 4122 	movw	r1, #1058	@ 0x422
 80036f4:	f000 fca6 	bl	8004044 <wm8994_write_reg>
 80036f8:	4602      	mov	r2, r0
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	4413      	add	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d002      	beq.n	800370c <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8003706:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800370a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800370c:	68fb      	ldr	r3, [r7, #12]
}
 800370e:	4618      	mov	r0, r3
 8003710:	3710      	adds	r7, #16
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b084      	sub	sp, #16
 800371a:	af00      	add	r7, sp, #0
 800371c:	6078      	str	r0, [r7, #4]
 800371e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	2b02      	cmp	r3, #2
 8003724:	d003      	beq.n	800372e <WM8994_SetOutputMode+0x18>
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	2b04      	cmp	r3, #4
 800372a:	f040 809c 	bne.w	8003866 <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 800372e:	2300      	movs	r3, #0
 8003730:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f103 0018 	add.w	r0, r3, #24
 8003738:	f107 020a 	add.w	r2, r7, #10
 800373c:	2302      	movs	r3, #2
 800373e:	2101      	movs	r1, #1
 8003740:	f000 fc80 	bl	8004044 <wm8994_write_reg>
 8003744:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8003746:	f240 3303 	movw	r3, #771	@ 0x303
 800374a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	f103 0018 	add.w	r0, r3, #24
 8003752:	f107 020a 	add.w	r2, r7, #10
 8003756:	2302      	movs	r3, #2
 8003758:	2105      	movs	r1, #5
 800375a:	f000 fc73 	bl	8004044 <wm8994_write_reg>
 800375e:	4602      	mov	r2, r0
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	4413      	add	r3, r2
 8003764:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8003766:	2301      	movs	r3, #1
 8003768:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f103 0018 	add.w	r0, r3, #24
 8003770:	f107 020a 	add.w	r2, r7, #10
 8003774:	2302      	movs	r3, #2
 8003776:	f240 6101 	movw	r1, #1537	@ 0x601
 800377a:	f000 fc63 	bl	8004044 <wm8994_write_reg>
 800377e:	4602      	mov	r2, r0
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	4413      	add	r3, r2
 8003784:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	f103 0018 	add.w	r0, r3, #24
 800378c:	f107 020a 	add.w	r2, r7, #10
 8003790:	2302      	movs	r3, #2
 8003792:	f240 6102 	movw	r1, #1538	@ 0x602
 8003796:	f000 fc55 	bl	8004044 <wm8994_write_reg>
 800379a:	4602      	mov	r2, r0
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	4413      	add	r3, r2
 80037a0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 80037a2:	2300      	movs	r3, #0
 80037a4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 0018 	add.w	r0, r3, #24
 80037ac:	f107 020a 	add.w	r2, r7, #10
 80037b0:	2302      	movs	r3, #2
 80037b2:	f240 6104 	movw	r1, #1540	@ 0x604
 80037b6:	f000 fc45 	bl	8004044 <wm8994_write_reg>
 80037ba:	4602      	mov	r2, r0
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	4413      	add	r3, r2
 80037c0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	f103 0018 	add.w	r0, r3, #24
 80037c8:	f107 020a 	add.w	r2, r7, #10
 80037cc:	2302      	movs	r3, #2
 80037ce:	f240 6105 	movw	r1, #1541	@ 0x605
 80037d2:	f000 fc37 	bl	8004044 <wm8994_write_reg>
 80037d6:	4602      	mov	r2, r0
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	4413      	add	r3, r2
 80037dc:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 80037de:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80037e2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	f103 0018 	add.w	r0, r3, #24
 80037ea:	f107 020a 	add.w	r2, r7, #10
 80037ee:	2302      	movs	r3, #2
 80037f0:	212d      	movs	r1, #45	@ 0x2d
 80037f2:	f000 fc27 	bl	8004044 <wm8994_write_reg>
 80037f6:	4602      	mov	r2, r0
 80037f8:	68fb      	ldr	r3, [r7, #12]
 80037fa:	4413      	add	r3, r2
 80037fc:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	f103 0018 	add.w	r0, r3, #24
 8003804:	f107 020a 	add.w	r2, r7, #10
 8003808:	2302      	movs	r3, #2
 800380a:	212e      	movs	r1, #46	@ 0x2e
 800380c:	f000 fc1a 	bl	8004044 <wm8994_write_reg>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	4413      	add	r3, r2
 8003816:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 8003818:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800381c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f103 0018 	add.w	r0, r3, #24
 8003824:	f107 020a 	add.w	r2, r7, #10
 8003828:	2302      	movs	r3, #2
 800382a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800382e:	f000 fc09 	bl	8004044 <wm8994_write_reg>
 8003832:	4602      	mov	r2, r0
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	4413      	add	r3, r2
 8003838:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800383a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fb88 	bl	8003f54 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 8003844:	2300      	movs	r3, #0
 8003846:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	f103 0018 	add.w	r0, r3, #24
 800384e:	f107 020a 	add.w	r2, r7, #10
 8003852:	2302      	movs	r3, #2
 8003854:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8003858:	f000 fbf4 	bl	8004044 <wm8994_write_reg>
 800385c:	4602      	mov	r2, r0
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	4413      	add	r3, r2
 8003862:	60fb      	str	r3, [r7, #12]
 8003864:	e165      	b.n	8003b32 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d149      	bne.n	8003900 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 800386c:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8003870:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	f103 0018 	add.w	r0, r3, #24
 8003878:	f107 020a 	add.w	r2, r7, #10
 800387c:	2302      	movs	r3, #2
 800387e:	2105      	movs	r1, #5
 8003880:	f000 fbe0 	bl	8004044 <wm8994_write_reg>
 8003884:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 8003886:	2300      	movs	r3, #0
 8003888:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	f103 0018 	add.w	r0, r3, #24
 8003890:	f107 020a 	add.w	r2, r7, #10
 8003894:	2302      	movs	r3, #2
 8003896:	f240 6101 	movw	r1, #1537	@ 0x601
 800389a:	f000 fbd3 	bl	8004044 <wm8994_write_reg>
 800389e:	4602      	mov	r2, r0
 80038a0:	68fb      	ldr	r3, [r7, #12]
 80038a2:	4413      	add	r3, r2
 80038a4:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	f103 0018 	add.w	r0, r3, #24
 80038ac:	f107 020a 	add.w	r2, r7, #10
 80038b0:	2302      	movs	r3, #2
 80038b2:	f240 6102 	movw	r1, #1538	@ 0x602
 80038b6:	f000 fbc5 	bl	8004044 <wm8994_write_reg>
 80038ba:	4602      	mov	r2, r0
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	4413      	add	r3, r2
 80038c0:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 80038c2:	2302      	movs	r3, #2
 80038c4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	f103 0018 	add.w	r0, r3, #24
 80038cc:	f107 020a 	add.w	r2, r7, #10
 80038d0:	2302      	movs	r3, #2
 80038d2:	f240 6104 	movw	r1, #1540	@ 0x604
 80038d6:	f000 fbb5 	bl	8004044 <wm8994_write_reg>
 80038da:	4602      	mov	r2, r0
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	4413      	add	r3, r2
 80038e0:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	f103 0018 	add.w	r0, r3, #24
 80038e8:	f107 020a 	add.w	r2, r7, #10
 80038ec:	2302      	movs	r3, #2
 80038ee:	f240 6105 	movw	r1, #1541	@ 0x605
 80038f2:	f000 fba7 	bl	8004044 <wm8994_write_reg>
 80038f6:	4602      	mov	r2, r0
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	4413      	add	r3, r2
 80038fc:	60fb      	str	r3, [r7, #12]
      break;
 80038fe:	e03b      	b.n	8003978 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8003900:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8003904:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	f103 0018 	add.w	r0, r3, #24
 800390c:	f107 020a 	add.w	r2, r7, #10
 8003910:	2302      	movs	r3, #2
 8003912:	2105      	movs	r1, #5
 8003914:	f000 fb96 	bl	8004044 <wm8994_write_reg>
 8003918:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 800391a:	2301      	movs	r3, #1
 800391c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	f103 0018 	add.w	r0, r3, #24
 8003924:	f107 020a 	add.w	r2, r7, #10
 8003928:	2302      	movs	r3, #2
 800392a:	f240 6101 	movw	r1, #1537	@ 0x601
 800392e:	f000 fb89 	bl	8004044 <wm8994_write_reg>
 8003932:	4602      	mov	r2, r0
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	4413      	add	r3, r2
 8003938:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	f103 0018 	add.w	r0, r3, #24
 8003940:	f107 020a 	add.w	r2, r7, #10
 8003944:	2302      	movs	r3, #2
 8003946:	f240 6102 	movw	r1, #1538	@ 0x602
 800394a:	f000 fb7b 	bl	8004044 <wm8994_write_reg>
 800394e:	4602      	mov	r2, r0
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	4413      	add	r3, r2
 8003954:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8003956:	2302      	movs	r3, #2
 8003958:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	f103 0018 	add.w	r0, r3, #24
 8003960:	f107 020a 	add.w	r2, r7, #10
 8003964:	2302      	movs	r3, #2
 8003966:	f240 6104 	movw	r1, #1540	@ 0x604
 800396a:	f000 fb6b 	bl	8004044 <wm8994_write_reg>
 800396e:	4602      	mov	r2, r0
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	4413      	add	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]
      break;
 8003976:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8003978:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800397c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	f103 0018 	add.w	r0, r3, #24
 8003984:	f107 020a 	add.w	r2, r7, #10
 8003988:	2302      	movs	r3, #2
 800398a:	2103      	movs	r1, #3
 800398c:	f000 fb5a 	bl	8004044 <wm8994_write_reg>
 8003990:	4602      	mov	r2, r0
 8003992:	68fb      	ldr	r3, [r7, #12]
 8003994:	4413      	add	r3, r2
 8003996:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8003998:	2300      	movs	r3, #0
 800399a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	f103 0018 	add.w	r0, r3, #24
 80039a2:	f107 020a 	add.w	r2, r7, #10
 80039a6:	2302      	movs	r3, #2
 80039a8:	2122      	movs	r1, #34	@ 0x22
 80039aa:	f000 fb4b 	bl	8004044 <wm8994_write_reg>
 80039ae:	4602      	mov	r2, r0
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	4413      	add	r3, r2
 80039b4:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	f103 0018 	add.w	r0, r3, #24
 80039bc:	f107 020a 	add.w	r2, r7, #10
 80039c0:	2302      	movs	r3, #2
 80039c2:	2123      	movs	r1, #35	@ 0x23
 80039c4:	f000 fb3e 	bl	8004044 <wm8994_write_reg>
 80039c8:	4602      	mov	r2, r0
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	4413      	add	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 80039d0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80039d4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	f103 0018 	add.w	r0, r3, #24
 80039dc:	f107 020a 	add.w	r2, r7, #10
 80039e0:	2302      	movs	r3, #2
 80039e2:	2136      	movs	r1, #54	@ 0x36
 80039e4:	f000 fb2e 	bl	8004044 <wm8994_write_reg>
 80039e8:	4602      	mov	r2, r0
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	4413      	add	r3, r2
 80039ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 80039f0:	f243 0303 	movw	r3, #12291	@ 0x3003
 80039f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	f103 0018 	add.w	r0, r3, #24
 80039fc:	f107 020a 	add.w	r2, r7, #10
 8003a00:	2302      	movs	r3, #2
 8003a02:	2101      	movs	r1, #1
 8003a04:	f000 fb1e 	bl	8004044 <wm8994_write_reg>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8003a10:	2305      	movs	r3, #5
 8003a12:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f103 0018 	add.w	r0, r3, #24
 8003a1a:	f107 020a 	add.w	r2, r7, #10
 8003a1e:	2302      	movs	r3, #2
 8003a20:	2151      	movs	r1, #81	@ 0x51
 8003a22:	f000 fb0f 	bl	8004044 <wm8994_write_reg>
 8003a26:	4602      	mov	r2, r0
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8003a2e:	f243 3303 	movw	r3, #13059	@ 0x3303
 8003a32:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	f103 0018 	add.w	r0, r3, #24
 8003a3a:	f107 020a 	add.w	r2, r7, #10
 8003a3e:	2302      	movs	r3, #2
 8003a40:	2101      	movs	r1, #1
 8003a42:	f000 faff 	bl	8004044 <wm8994_write_reg>
 8003a46:	4602      	mov	r2, r0
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	4413      	add	r3, r2
 8003a4c:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 8003a4e:	2322      	movs	r3, #34	@ 0x22
 8003a50:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	f103 0018 	add.w	r0, r3, #24
 8003a58:	f107 020a 	add.w	r2, r7, #10
 8003a5c:	2302      	movs	r3, #2
 8003a5e:	2160      	movs	r1, #96	@ 0x60
 8003a60:	f000 faf0 	bl	8004044 <wm8994_write_reg>
 8003a64:	4602      	mov	r2, r0
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 8003a6c:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8003a70:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	f103 0018 	add.w	r0, r3, #24
 8003a78:	f107 020a 	add.w	r2, r7, #10
 8003a7c:	2302      	movs	r3, #2
 8003a7e:	214c      	movs	r1, #76	@ 0x4c
 8003a80:	f000 fae0 	bl	8004044 <wm8994_write_reg>
 8003a84:	4602      	mov	r2, r0
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4413      	add	r3, r2
 8003a8a:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 8003a8c:	210f      	movs	r1, #15
 8003a8e:	6878      	ldr	r0, [r7, #4]
 8003a90:	f000 fa60 	bl	8003f54 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8003a94:	2301      	movs	r3, #1
 8003a96:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	f103 0018 	add.w	r0, r3, #24
 8003a9e:	f107 020a 	add.w	r2, r7, #10
 8003aa2:	2302      	movs	r3, #2
 8003aa4:	212d      	movs	r1, #45	@ 0x2d
 8003aa6:	f000 facd 	bl	8004044 <wm8994_write_reg>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4413      	add	r3, r2
 8003ab0:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	f103 0018 	add.w	r0, r3, #24
 8003ab8:	f107 020a 	add.w	r2, r7, #10
 8003abc:	2302      	movs	r3, #2
 8003abe:	212e      	movs	r1, #46	@ 0x2e
 8003ac0:	f000 fac0 	bl	8004044 <wm8994_write_reg>
 8003ac4:	4602      	mov	r2, r0
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	4413      	add	r3, r2
 8003aca:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 8003acc:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8003ad0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f103 0018 	add.w	r0, r3, #24
 8003ad8:	f107 020a 	add.w	r2, r7, #10
 8003adc:	2302      	movs	r3, #2
 8003ade:	2103      	movs	r1, #3
 8003ae0:	f000 fab0 	bl	8004044 <wm8994_write_reg>
 8003ae4:	4602      	mov	r2, r0
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	4413      	add	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 8003aec:	2333      	movs	r3, #51	@ 0x33
 8003aee:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	f103 0018 	add.w	r0, r3, #24
 8003af6:	f107 020a 	add.w	r2, r7, #10
 8003afa:	2302      	movs	r3, #2
 8003afc:	2154      	movs	r1, #84	@ 0x54
 8003afe:	f000 faa1 	bl	8004044 <wm8994_write_reg>
 8003b02:	4602      	mov	r2, r0
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	4413      	add	r3, r2
 8003b08:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 8003b0a:	f240 1101 	movw	r1, #257	@ 0x101
 8003b0e:	6878      	ldr	r0, [r7, #4]
 8003b10:	f000 fa20 	bl	8003f54 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 8003b14:	23ee      	movs	r3, #238	@ 0xee
 8003b16:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	f103 0018 	add.w	r0, r3, #24
 8003b1e:	f107 020a 	add.w	r2, r7, #10
 8003b22:	2302      	movs	r3, #2
 8003b24:	2160      	movs	r1, #96	@ 0x60
 8003b26:	f000 fa8d 	bl	8004044 <wm8994_write_reg>
 8003b2a:	4602      	mov	r2, r0
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	4413      	add	r3, r2
 8003b30:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d002      	beq.n	8003b3e <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8003b38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b3c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
}
 8003b40:	4618      	mov	r0, r3
 8003b42:	3710      	adds	r7, #16
 8003b44:	46bd      	mov	sp, r7
 8003b46:	bd80      	pop	{r7, pc}

08003b48 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	b084      	sub	sp, #16
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
 8003b50:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8003b52:	2300      	movs	r3, #0
 8003b54:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	3318      	adds	r3, #24
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	b292      	uxth	r2, r2
 8003b5e:	4611      	mov	r1, r2
 8003b60:	4618      	mov	r0, r3
 8003b62:	f000 fb4c 	bl	80041fe <wm8994_aif1_control1_wl>
 8003b66:	4603      	mov	r3, r0
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d002      	beq.n	8003b72 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8003b6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b70:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003b72:	68fb      	ldr	r3, [r7, #12]
}
 8003b74:	4618      	mov	r0, r3
 8003b76:	3710      	adds	r7, #16
 8003b78:	46bd      	mov	sp, r7
 8003b7a:	bd80      	pop	{r7, pc}

08003b7c <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8003b7c:	b580      	push	{r7, lr}
 8003b7e:	b084      	sub	sp, #16
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	6078      	str	r0, [r7, #4]
 8003b84:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8003b86:	2300      	movs	r3, #0
 8003b88:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8003b8a:	2300      	movs	r3, #0
 8003b8c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	3318      	adds	r3, #24
 8003b92:	f107 020a 	add.w	r2, r7, #10
 8003b96:	4611      	mov	r1, r2
 8003b98:	4618      	mov	r0, r3
 8003b9a:	f000 fb61 	bl	8004260 <wm8994_aif1_control1_wl_r>
 8003b9e:	4603      	mov	r3, r0
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d003      	beq.n	8003bac <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8003ba4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ba8:	60fb      	str	r3, [r7, #12]
 8003baa:	e021      	b.n	8003bf0 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8003bac:	897b      	ldrh	r3, [r7, #10]
 8003bae:	2b03      	cmp	r3, #3
 8003bb0:	d81a      	bhi.n	8003be8 <WM8994_GetResolution+0x6c>
 8003bb2:	a201      	add	r2, pc, #4	@ (adr r2, 8003bb8 <WM8994_GetResolution+0x3c>)
 8003bb4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bb8:	08003bc9 	.word	0x08003bc9
 8003bbc:	08003bd1 	.word	0x08003bd1
 8003bc0:	08003bd9 	.word	0x08003bd9
 8003bc4:	08003be1 	.word	0x08003be1
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8003bc8:	683b      	ldr	r3, [r7, #0]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	601a      	str	r2, [r3, #0]
      break;
 8003bce:	e00f      	b.n	8003bf0 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	2201      	movs	r2, #1
 8003bd4:	601a      	str	r2, [r3, #0]
      break;
 8003bd6:	e00b      	b.n	8003bf0 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	2202      	movs	r2, #2
 8003bdc:	601a      	str	r2, [r3, #0]
      break;
 8003bde:	e007      	b.n	8003bf0 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8003be0:	683b      	ldr	r3, [r7, #0]
 8003be2:	2203      	movs	r2, #3
 8003be4:	601a      	str	r2, [r3, #0]
      break; 
 8003be6:	e003      	b.n	8003bf0 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	2200      	movs	r2, #0
 8003bec:	601a      	str	r2, [r3, #0]
      break;
 8003bee:	bf00      	nop
    }
  }
  
  return ret;
 8003bf0:	68fb      	ldr	r3, [r7, #12]
}
 8003bf2:	4618      	mov	r0, r3
 8003bf4:	3710      	adds	r7, #16
 8003bf6:	46bd      	mov	sp, r7
 8003bf8:	bd80      	pop	{r7, pc}
 8003bfa:	bf00      	nop

08003bfc <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b084      	sub	sp, #16
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8003c06:	2300      	movs	r3, #0
 8003c08:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	3318      	adds	r3, #24
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	b292      	uxth	r2, r2
 8003c12:	4611      	mov	r1, r2
 8003c14:	4618      	mov	r0, r3
 8003c16:	f000 fa9f 	bl	8004158 <wm8994_aif1_control1_fmt>
 8003c1a:	4603      	mov	r3, r0
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d002      	beq.n	8003c26 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8003c20:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c24:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8003c26:	68fb      	ldr	r3, [r7, #12]
}
 8003c28:	4618      	mov	r0, r3
 8003c2a:	3710      	adds	r7, #16
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	bd80      	pop	{r7, pc}

08003c30 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b084      	sub	sp, #16
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	6078      	str	r0, [r7, #4]
 8003c38:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	3318      	adds	r3, #24
 8003c42:	f107 020a 	add.w	r2, r7, #10
 8003c46:	4611      	mov	r1, r2
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fab6 	bl	80041ba <wm8994_aif1_control1_fmt_r>
 8003c4e:	4603      	mov	r3, r0
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d003      	beq.n	8003c5c <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8003c54:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c58:	60fb      	str	r3, [r7, #12]
 8003c5a:	e003      	b.n	8003c64 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8003c5c:	897b      	ldrh	r3, [r7, #10]
 8003c5e:	461a      	mov	r2, r3
 8003c60:	683b      	ldr	r3, [r7, #0]
 8003c62:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8003c64:	68fb      	ldr	r3, [r7, #12]
}
 8003c66:	4618      	mov	r0, r3
 8003c68:	3710      	adds	r7, #16
 8003c6a:	46bd      	mov	sp, r7
 8003c6c:	bd80      	pop	{r7, pc}
	...

08003c70 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
 8003c78:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8003c7a:	683b      	ldr	r3, [r7, #0]
 8003c7c:	4a55      	ldr	r2, [pc, #340]	@ (8003dd4 <WM8994_SetFrequency+0x164>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d05d      	beq.n	8003d3e <WM8994_SetFrequency+0xce>
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	4a53      	ldr	r2, [pc, #332]	@ (8003dd4 <WM8994_SetFrequency+0x164>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	f200 8091 	bhi.w	8003dae <WM8994_SetFrequency+0x13e>
 8003c8c:	683b      	ldr	r3, [r7, #0]
 8003c8e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003c92:	4293      	cmp	r3, r2
 8003c94:	d07d      	beq.n	8003d92 <WM8994_SetFrequency+0x122>
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	f200 8086 	bhi.w	8003dae <WM8994_SetFrequency+0x13e>
 8003ca2:	683b      	ldr	r3, [r7, #0]
 8003ca4:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003ca8:	d03b      	beq.n	8003d22 <WM8994_SetFrequency+0xb2>
 8003caa:	683b      	ldr	r3, [r7, #0]
 8003cac:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8003cb0:	d87d      	bhi.n	8003dae <WM8994_SetFrequency+0x13e>
 8003cb2:	683b      	ldr	r3, [r7, #0]
 8003cb4:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003cb8:	4293      	cmp	r3, r2
 8003cba:	d05c      	beq.n	8003d76 <WM8994_SetFrequency+0x106>
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d873      	bhi.n	8003dae <WM8994_SetFrequency+0x13e>
 8003cc6:	683b      	ldr	r3, [r7, #0]
 8003cc8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003ccc:	d01b      	beq.n	8003d06 <WM8994_SetFrequency+0x96>
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8003cd4:	d86b      	bhi.n	8003dae <WM8994_SetFrequency+0x13e>
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8003cdc:	d005      	beq.n	8003cea <WM8994_SetFrequency+0x7a>
 8003cde:	683b      	ldr	r3, [r7, #0]
 8003ce0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003ce4:	4293      	cmp	r3, r2
 8003ce6:	d038      	beq.n	8003d5a <WM8994_SetFrequency+0xea>
 8003ce8:	e061      	b.n	8003dae <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8003cea:	2303      	movs	r3, #3
 8003cec:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	f103 0018 	add.w	r0, r3, #24
 8003cf4:	f107 020a 	add.w	r2, r7, #10
 8003cf8:	2302      	movs	r3, #2
 8003cfa:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003cfe:	f000 f9a1 	bl	8004044 <wm8994_write_reg>
 8003d02:	60f8      	str	r0, [r7, #12]
    break;
 8003d04:	e061      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8003d06:	2333      	movs	r3, #51	@ 0x33
 8003d08:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f103 0018 	add.w	r0, r3, #24
 8003d10:	f107 020a 	add.w	r2, r7, #10
 8003d14:	2302      	movs	r3, #2
 8003d16:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d1a:	f000 f993 	bl	8004044 <wm8994_write_reg>
 8003d1e:	60f8      	str	r0, [r7, #12]
    break;
 8003d20:	e053      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8003d22:	2363      	movs	r3, #99	@ 0x63
 8003d24:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	f103 0018 	add.w	r0, r3, #24
 8003d2c:	f107 020a 	add.w	r2, r7, #10
 8003d30:	2302      	movs	r3, #2
 8003d32:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d36:	f000 f985 	bl	8004044 <wm8994_write_reg>
 8003d3a:	60f8      	str	r0, [r7, #12]
    break;
 8003d3c:	e045      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8003d3e:	23a3      	movs	r3, #163	@ 0xa3
 8003d40:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f103 0018 	add.w	r0, r3, #24
 8003d48:	f107 020a 	add.w	r2, r7, #10
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d52:	f000 f977 	bl	8004044 <wm8994_write_reg>
 8003d56:	60f8      	str	r0, [r7, #12]
    break;
 8003d58:	e037      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8003d5a:	2313      	movs	r3, #19
 8003d5c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	f103 0018 	add.w	r0, r3, #24
 8003d64:	f107 020a 	add.w	r2, r7, #10
 8003d68:	2302      	movs	r3, #2
 8003d6a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d6e:	f000 f969 	bl	8004044 <wm8994_write_reg>
 8003d72:	60f8      	str	r0, [r7, #12]
    break;
 8003d74:	e029      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8003d76:	2343      	movs	r3, #67	@ 0x43
 8003d78:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003d7a:	687b      	ldr	r3, [r7, #4]
 8003d7c:	f103 0018 	add.w	r0, r3, #24
 8003d80:	f107 020a 	add.w	r2, r7, #10
 8003d84:	2302      	movs	r3, #2
 8003d86:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003d8a:	f000 f95b 	bl	8004044 <wm8994_write_reg>
 8003d8e:	60f8      	str	r0, [r7, #12]
    break;
 8003d90:	e01b      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8003d92:	2373      	movs	r3, #115	@ 0x73
 8003d94:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	f103 0018 	add.w	r0, r3, #24
 8003d9c:	f107 020a 	add.w	r2, r7, #10
 8003da0:	2302      	movs	r3, #2
 8003da2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003da6:	f000 f94d 	bl	8004044 <wm8994_write_reg>
 8003daa:	60f8      	str	r0, [r7, #12]
    break; 
 8003dac:	e00d      	b.n	8003dca <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8003dae:	2383      	movs	r3, #131	@ 0x83
 8003db0:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f103 0018 	add.w	r0, r3, #24
 8003db8:	f107 020a 	add.w	r2, r7, #10
 8003dbc:	2302      	movs	r3, #2
 8003dbe:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8003dc2:	f000 f93f 	bl	8004044 <wm8994_write_reg>
 8003dc6:	60f8      	str	r0, [r7, #12]
    break; 
 8003dc8:	bf00      	nop
  }
  
  return ret;
 8003dca:	68fb      	ldr	r3, [r7, #12]
}
 8003dcc:	4618      	mov	r0, r3
 8003dce:	3710      	adds	r7, #16
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	bd80      	pop	{r7, pc}
 8003dd4:	00017700 	.word	0x00017700

08003dd8 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8003dd8:	b580      	push	{r7, lr}
 8003dda:	b084      	sub	sp, #16
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8003de2:	2300      	movs	r3, #0
 8003de4:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8003de6:	2300      	movs	r3, #0
 8003de8:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	3318      	adds	r3, #24
 8003dee:	f107 020a 	add.w	r2, r7, #10
 8003df2:	4611      	mov	r1, r2
 8003df4:	4618      	mov	r0, r3
 8003df6:	f000 f98d 	bl	8004114 <wm8994_aif1_sr_r>
 8003dfa:	4603      	mov	r3, r0
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d003      	beq.n	8003e08 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8003e00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e04:	60fb      	str	r3, [r7, #12]
 8003e06:	e043      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8003e08:	897b      	ldrh	r3, [r7, #10]
 8003e0a:	2b0a      	cmp	r3, #10
 8003e0c:	d83f      	bhi.n	8003e8e <WM8994_GetFrequency+0xb6>
 8003e0e:	a201      	add	r2, pc, #4	@ (adr r2, 8003e14 <WM8994_GetFrequency+0x3c>)
 8003e10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e14:	08003e41 	.word	0x08003e41
 8003e18:	08003e4b 	.word	0x08003e4b
 8003e1c:	08003e8f 	.word	0x08003e8f
 8003e20:	08003e55 	.word	0x08003e55
 8003e24:	08003e5f 	.word	0x08003e5f
 8003e28:	08003e8f 	.word	0x08003e8f
 8003e2c:	08003e69 	.word	0x08003e69
 8003e30:	08003e73 	.word	0x08003e73
 8003e34:	08003e7d 	.word	0x08003e7d
 8003e38:	08003e8f 	.word	0x08003e8f
 8003e3c:	08003e87 	.word	0x08003e87
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8003e40:	683b      	ldr	r3, [r7, #0]
 8003e42:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8003e46:	601a      	str	r2, [r3, #0]
      break;
 8003e48:	e022      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003e50:	601a      	str	r2, [r3, #0]
      break;    
 8003e52:	e01d      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8003e5a:	601a      	str	r2, [r3, #0]
      break;
 8003e5c:	e018      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8003e5e:	683b      	ldr	r3, [r7, #0]
 8003e60:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003e64:	601a      	str	r2, [r3, #0]
      break; 
 8003e66:	e013      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8003e6e:	601a      	str	r2, [r3, #0]
      break; 
 8003e70:	e00e      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003e78:	601a      	str	r2, [r3, #0]
      break;    
 8003e7a:	e009      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8003e7c:	683b      	ldr	r3, [r7, #0]
 8003e7e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8003e82:	601a      	str	r2, [r3, #0]
      break;
 8003e84:	e004      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	4a04      	ldr	r2, [pc, #16]	@ (8003e9c <WM8994_GetFrequency+0xc4>)
 8003e8a:	601a      	str	r2, [r3, #0]
      break;    
 8003e8c:	e000      	b.n	8003e90 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8003e8e:	bf00      	nop
    }
  }
  
  return ret;
 8003e90:	68fb      	ldr	r3, [r7, #12]
}
 8003e92:	4618      	mov	r0, r3
 8003e94:	3710      	adds	r7, #16
 8003e96:	46bd      	mov	sp, r7
 8003e98:	bd80      	pop	{r7, pc}
 8003e9a:	bf00      	nop
 8003e9c:	00017700 	.word	0x00017700

08003ea0 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b084      	sub	sp, #16
 8003ea4:	af00      	add	r7, sp, #0
 8003ea6:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8003ea8:	2300      	movs	r3, #0
 8003eaa:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	3318      	adds	r3, #24
 8003eb0:	2100      	movs	r1, #0
 8003eb2:	4618      	mov	r0, r3
 8003eb4:	f000 f8ee 	bl	8004094 <wm8994_sw_reset_w>
 8003eb8:	4603      	mov	r3, r0
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d002      	beq.n	8003ec4 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8003ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ec2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
}
 8003ec6:	4618      	mov	r0, r3
 8003ec8:	3710      	adds	r7, #16
 8003eca:	46bd      	mov	sp, r7
 8003ecc:	bd80      	pop	{r7, pc}
	...

08003ed0 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d103      	bne.n	8003ee8 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8003ee0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003ee4:	60fb      	str	r3, [r7, #12]
 8003ee6:	e02c      	b.n	8003f42 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681a      	ldr	r2, [r3, #0]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003ef0:	683b      	ldr	r3, [r7, #0]
 8003ef2:	685a      	ldr	r2, [r3, #4]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8003ef8:	683b      	ldr	r3, [r7, #0]
 8003efa:	891a      	ldrh	r2, [r3, #8]
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8003f00:	683b      	ldr	r3, [r7, #0]
 8003f02:	68da      	ldr	r2, [r3, #12]
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	691a      	ldr	r2, [r3, #16]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	695a      	ldr	r2, [r3, #20]
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003f4c <WM8994_RegisterBusIO+0x7c>)
 8003f1c:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a0b      	ldr	r2, [pc, #44]	@ (8003f50 <WM8994_RegisterBusIO+0x80>)
 8003f22:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	687a      	ldr	r2, [r7, #4]
 8003f28:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	2b00      	cmp	r3, #0
 8003f30:	d004      	beq.n	8003f3c <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	681b      	ldr	r3, [r3, #0]
 8003f36:	4798      	blx	r3
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	e002      	b.n	8003f42 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8003f3c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f40:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3710      	adds	r7, #16
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	bd80      	pop	{r7, pc}
 8003f4c:	08003f89 	.word	0x08003f89
 8003f50:	08003fbb 	.word	0x08003fbb

08003f54 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	4798      	blx	r3
 8003f64:	4603      	mov	r3, r0
 8003f66:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8003f68:	bf00      	nop
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	695b      	ldr	r3, [r3, #20]
 8003f6e:	4798      	blx	r3
 8003f70:	4603      	mov	r3, r0
 8003f72:	461a      	mov	r2, r3
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	1ad3      	subs	r3, r2, r3
 8003f78:	683a      	ldr	r2, [r7, #0]
 8003f7a:	429a      	cmp	r2, r3
 8003f7c:	d8f5      	bhi.n	8003f6a <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8003f7e:	2300      	movs	r3, #0
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}

08003f88 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003f88:	b590      	push	{r4, r7, lr}
 8003f8a:	b087      	sub	sp, #28
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	60f8      	str	r0, [r7, #12]
 8003f90:	607a      	str	r2, [r7, #4]
 8003f92:	461a      	mov	r2, r3
 8003f94:	460b      	mov	r3, r1
 8003f96:	817b      	strh	r3, [r7, #10]
 8003f98:	4613      	mov	r3, r2
 8003f9a:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8003fa0:	697b      	ldr	r3, [r7, #20]
 8003fa2:	691c      	ldr	r4, [r3, #16]
 8003fa4:	697b      	ldr	r3, [r7, #20]
 8003fa6:	8918      	ldrh	r0, [r3, #8]
 8003fa8:	893b      	ldrh	r3, [r7, #8]
 8003faa:	8979      	ldrh	r1, [r7, #10]
 8003fac:	687a      	ldr	r2, [r7, #4]
 8003fae:	47a0      	blx	r4
 8003fb0:	4603      	mov	r3, r0
}
 8003fb2:	4618      	mov	r0, r3
 8003fb4:	371c      	adds	r7, #28
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	bd90      	pop	{r4, r7, pc}

08003fba <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8003fba:	b590      	push	{r4, r7, lr}
 8003fbc:	b087      	sub	sp, #28
 8003fbe:	af00      	add	r7, sp, #0
 8003fc0:	60f8      	str	r0, [r7, #12]
 8003fc2:	607a      	str	r2, [r7, #4]
 8003fc4:	461a      	mov	r2, r3
 8003fc6:	460b      	mov	r3, r1
 8003fc8:	817b      	strh	r3, [r7, #10]
 8003fca:	4613      	mov	r3, r2
 8003fcc:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	68dc      	ldr	r4, [r3, #12]
 8003fd6:	697b      	ldr	r3, [r7, #20]
 8003fd8:	8918      	ldrh	r0, [r3, #8]
 8003fda:	893b      	ldrh	r3, [r7, #8]
 8003fdc:	8979      	ldrh	r1, [r7, #10]
 8003fde:	687a      	ldr	r2, [r7, #4]
 8003fe0:	47a0      	blx	r4
 8003fe2:	4603      	mov	r3, r0
}
 8003fe4:	4618      	mov	r0, r3
 8003fe6:	371c      	adds	r7, #28
 8003fe8:	46bd      	mov	sp, r7
 8003fea:	bd90      	pop	{r4, r7, pc}

08003fec <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8003fec:	b590      	push	{r4, r7, lr}
 8003fee:	b087      	sub	sp, #28
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	60f8      	str	r0, [r7, #12]
 8003ff4:	607a      	str	r2, [r7, #4]
 8003ff6:	461a      	mov	r2, r3
 8003ff8:	460b      	mov	r3, r1
 8003ffa:	817b      	strh	r3, [r7, #10]
 8003ffc:	4613      	mov	r3, r2
 8003ffe:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	685c      	ldr	r4, [r3, #4]
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6898      	ldr	r0, [r3, #8]
 8004008:	893b      	ldrh	r3, [r7, #8]
 800400a:	8979      	ldrh	r1, [r7, #10]
 800400c:	687a      	ldr	r2, [r7, #4]
 800400e:	47a0      	blx	r4
 8004010:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8004012:	697b      	ldr	r3, [r7, #20]
 8004014:	2b00      	cmp	r3, #0
 8004016:	db10      	blt.n	800403a <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	881b      	ldrh	r3, [r3, #0]
 800401c:	0a1b      	lsrs	r3, r3, #8
 800401e:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	881b      	ldrh	r3, [r3, #0]
 8004024:	b21b      	sxth	r3, r3
 8004026:	021b      	lsls	r3, r3, #8
 8004028:	b21a      	sxth	r2, r3
 800402a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800402e:	4313      	orrs	r3, r2
 8004030:	b21b      	sxth	r3, r3
 8004032:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	8a7a      	ldrh	r2, [r7, #18]
 8004038:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 800403a:	697b      	ldr	r3, [r7, #20]
}
 800403c:	4618      	mov	r0, r3
 800403e:	371c      	adds	r7, #28
 8004040:	46bd      	mov	sp, r7
 8004042:	bd90      	pop	{r4, r7, pc}

08004044 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8004044:	b590      	push	{r4, r7, lr}
 8004046:	b087      	sub	sp, #28
 8004048:	af00      	add	r7, sp, #0
 800404a:	60f8      	str	r0, [r7, #12]
 800404c:	607a      	str	r2, [r7, #4]
 800404e:	461a      	mov	r2, r3
 8004050:	460b      	mov	r3, r1
 8004052:	817b      	strh	r3, [r7, #10]
 8004054:	4613      	mov	r3, r2
 8004056:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	881b      	ldrh	r3, [r3, #0]
 800405c:	0a1b      	lsrs	r3, r3, #8
 800405e:	b29b      	uxth	r3, r3
 8004060:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	881b      	ldrh	r3, [r3, #0]
 8004066:	b21b      	sxth	r3, r3
 8004068:	021b      	lsls	r3, r3, #8
 800406a:	b21a      	sxth	r2, r3
 800406c:	8afb      	ldrh	r3, [r7, #22]
 800406e:	b21b      	sxth	r3, r3
 8004070:	4313      	orrs	r3, r2
 8004072:	b21b      	sxth	r3, r3
 8004074:	b29b      	uxth	r3, r3
 8004076:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	681c      	ldr	r4, [r3, #0]
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	6898      	ldr	r0, [r3, #8]
 8004080:	893b      	ldrh	r3, [r7, #8]
 8004082:	f107 0216 	add.w	r2, r7, #22
 8004086:	8979      	ldrh	r1, [r7, #10]
 8004088:	47a0      	blx	r4
 800408a:	4603      	mov	r3, r0
}
 800408c:	4618      	mov	r0, r3
 800408e:	371c      	adds	r7, #28
 8004090:	46bd      	mov	sp, r7
 8004092:	bd90      	pop	{r4, r7, pc}

08004094 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b082      	sub	sp, #8
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
 800409c:	460b      	mov	r3, r1
 800409e:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 80040a0:	1cba      	adds	r2, r7, #2
 80040a2:	2302      	movs	r3, #2
 80040a4:	2100      	movs	r1, #0
 80040a6:	6878      	ldr	r0, [r7, #4]
 80040a8:	f7ff ffcc 	bl	8004044 <wm8994_write_reg>
 80040ac:	4603      	mov	r3, r0
}
 80040ae:	4618      	mov	r0, r3
 80040b0:	3708      	adds	r7, #8
 80040b2:	46bd      	mov	sp, r7
 80040b4:	bd80      	pop	{r7, pc}

080040b6 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80040b6:	b580      	push	{r7, lr}
 80040b8:	b082      	sub	sp, #8
 80040ba:	af00      	add	r7, sp, #0
 80040bc:	6078      	str	r0, [r7, #4]
 80040be:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 80040c0:	2302      	movs	r3, #2
 80040c2:	683a      	ldr	r2, [r7, #0]
 80040c4:	2100      	movs	r1, #0
 80040c6:	6878      	ldr	r0, [r7, #4]
 80040c8:	f7ff ff90 	bl	8003fec <wm8994_read_reg>
 80040cc:	4603      	mov	r3, r0
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3708      	adds	r7, #8
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	6078      	str	r0, [r7, #4]
 80040de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 80040e0:	2302      	movs	r3, #2
 80040e2:	683a      	ldr	r2, [r7, #0]
 80040e4:	211c      	movs	r1, #28
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f7ff ff80 	bl	8003fec <wm8994_read_reg>
 80040ec:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d10a      	bne.n	800410a <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 80040f4:	683b      	ldr	r3, [r7, #0]
 80040f6:	881b      	ldrh	r3, [r3, #0]
 80040f8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	881a      	ldrh	r2, [r3, #0]
 8004106:	683b      	ldr	r3, [r7, #0]
 8004108:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800410a:	68fb      	ldr	r3, [r7, #12]
}
 800410c:	4618      	mov	r0, r3
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b084      	sub	sp, #16
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
 800411c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 800411e:	2302      	movs	r3, #2
 8004120:	683a      	ldr	r2, [r7, #0]
 8004122:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8004126:	6878      	ldr	r0, [r7, #4]
 8004128:	f7ff ff60 	bl	8003fec <wm8994_read_reg>
 800412c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2b00      	cmp	r3, #0
 8004132:	d10c      	bne.n	800414e <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8004134:	683b      	ldr	r3, [r7, #0]
 8004136:	881b      	ldrh	r3, [r3, #0]
 8004138:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800413c:	b29a      	uxth	r2, r3
 800413e:	683b      	ldr	r3, [r7, #0]
 8004140:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8004142:	683b      	ldr	r3, [r7, #0]
 8004144:	881b      	ldrh	r3, [r3, #0]
 8004146:	091b      	lsrs	r3, r3, #4
 8004148:	b29a      	uxth	r2, r3
 800414a:	683b      	ldr	r3, [r7, #0]
 800414c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800414e:	68fb      	ldr	r3, [r7, #12]
}
 8004150:	4618      	mov	r0, r3
 8004152:	3710      	adds	r7, #16
 8004154:	46bd      	mov	sp, r7
 8004156:	bd80      	pop	{r7, pc}

08004158 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b084      	sub	sp, #16
 800415c:	af00      	add	r7, sp, #0
 800415e:	6078      	str	r0, [r7, #4]
 8004160:	460b      	mov	r3, r1
 8004162:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8004164:	2300      	movs	r3, #0
 8004166:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8004168:	f107 020a 	add.w	r2, r7, #10
 800416c:	2302      	movs	r3, #2
 800416e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004172:	6878      	ldr	r0, [r7, #4]
 8004174:	f7ff ff3a 	bl	8003fec <wm8994_read_reg>
 8004178:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	2b00      	cmp	r3, #0
 800417e:	d117      	bne.n	80041b0 <wm8994_aif1_control1_fmt+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8004180:	897b      	ldrh	r3, [r7, #10]
 8004182:	f023 0318 	bic.w	r3, r3, #24
 8004186:	b29b      	uxth	r3, r3
 8004188:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800418a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	b21a      	sxth	r2, r3
 8004192:	897b      	ldrh	r3, [r7, #10]
 8004194:	b21b      	sxth	r3, r3
 8004196:	4313      	orrs	r3, r2
 8004198:	b21b      	sxth	r3, r3
 800419a:	b29b      	uxth	r3, r3
 800419c:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800419e:	f107 020a 	add.w	r2, r7, #10
 80041a2:	2302      	movs	r3, #2
 80041a4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80041a8:	6878      	ldr	r0, [r7, #4]
 80041aa:	f7ff ff4b 	bl	8004044 <wm8994_write_reg>
 80041ae:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80041b0:	68fb      	ldr	r3, [r7, #12]
}
 80041b2:	4618      	mov	r0, r3
 80041b4:	3710      	adds	r7, #16
 80041b6:	46bd      	mov	sp, r7
 80041b8:	bd80      	pop	{r7, pc}

080041ba <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80041ba:	b580      	push	{r7, lr}
 80041bc:	b084      	sub	sp, #16
 80041be:	af00      	add	r7, sp, #0
 80041c0:	6078      	str	r0, [r7, #4]
 80041c2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80041c4:	2302      	movs	r3, #2
 80041c6:	683a      	ldr	r2, [r7, #0]
 80041c8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80041cc:	6878      	ldr	r0, [r7, #4]
 80041ce:	f7ff ff0d 	bl	8003fec <wm8994_read_reg>
 80041d2:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	2b00      	cmp	r3, #0
 80041d8:	d10c      	bne.n	80041f4 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	881b      	ldrh	r3, [r3, #0]
 80041de:	f003 0318 	and.w	r3, r3, #24
 80041e2:	b29a      	uxth	r2, r3
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	881b      	ldrh	r3, [r3, #0]
 80041ec:	08db      	lsrs	r3, r3, #3
 80041ee:	b29a      	uxth	r2, r3
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80041f4:	68fb      	ldr	r3, [r7, #12]
}
 80041f6:	4618      	mov	r0, r3
 80041f8:	3710      	adds	r7, #16
 80041fa:	46bd      	mov	sp, r7
 80041fc:	bd80      	pop	{r7, pc}

080041fe <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 80041fe:	b580      	push	{r7, lr}
 8004200:	b084      	sub	sp, #16
 8004202:	af00      	add	r7, sp, #0
 8004204:	6078      	str	r0, [r7, #4]
 8004206:	460b      	mov	r3, r1
 8004208:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 800420a:	2300      	movs	r3, #0
 800420c:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800420e:	f107 020a 	add.w	r2, r7, #10
 8004212:	2302      	movs	r3, #2
 8004214:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004218:	6878      	ldr	r0, [r7, #4]
 800421a:	f7ff fee7 	bl	8003fec <wm8994_read_reg>
 800421e:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	2b00      	cmp	r3, #0
 8004224:	d117      	bne.n	8004256 <wm8994_aif1_control1_wl+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8004226:	897b      	ldrh	r3, [r7, #10]
 8004228:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800422c:	b29b      	uxth	r3, r3
 800422e:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8004230:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8004234:	015b      	lsls	r3, r3, #5
 8004236:	b21a      	sxth	r2, r3
 8004238:	897b      	ldrh	r3, [r7, #10]
 800423a:	b21b      	sxth	r3, r3
 800423c:	4313      	orrs	r3, r2
 800423e:	b21b      	sxth	r3, r3
 8004240:	b29b      	uxth	r3, r3
 8004242:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8004244:	f107 020a 	add.w	r2, r7, #10
 8004248:	2302      	movs	r3, #2
 800424a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800424e:	6878      	ldr	r0, [r7, #4]
 8004250:	f7ff fef8 	bl	8004044 <wm8994_write_reg>
 8004254:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8004256:	68fb      	ldr	r3, [r7, #12]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3710      	adds	r7, #16
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 800426a:	2302      	movs	r3, #2
 800426c:	683a      	ldr	r2, [r7, #0]
 800426e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8004272:	6878      	ldr	r0, [r7, #4]
 8004274:	f7ff feba 	bl	8003fec <wm8994_read_reg>
 8004278:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	2b00      	cmp	r3, #0
 800427e:	d10c      	bne.n	800429a <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 8004280:	683b      	ldr	r3, [r7, #0]
 8004282:	881b      	ldrh	r3, [r3, #0]
 8004284:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8004288:	b29a      	uxth	r2, r3
 800428a:	683b      	ldr	r3, [r7, #0]
 800428c:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	881b      	ldrh	r3, [r3, #0]
 8004292:	095b      	lsrs	r3, r3, #5
 8004294:	b29a      	uxth	r2, r3
 8004296:	683b      	ldr	r3, [r7, #0]
 8004298:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800429a:	68fb      	ldr	r3, [r7, #12]
}
 800429c:	4618      	mov	r0, r3
 800429e:	3710      	adds	r7, #16
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}

080042a4 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 80042a4:	b580      	push	{r7, lr}
 80042a6:	b084      	sub	sp, #16
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	6078      	str	r0, [r7, #4]
 80042ac:	460b      	mov	r3, r1
 80042ae:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80042b0:	2300      	movs	r3, #0
 80042b2:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80042b4:	f107 020a 	add.w	r2, r7, #10
 80042b8:	2302      	movs	r3, #2
 80042ba:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80042be:	6878      	ldr	r0, [r7, #4]
 80042c0:	f7ff fe94 	bl	8003fec <wm8994_read_reg>
 80042c4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80042c6:	68fb      	ldr	r3, [r7, #12]
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d117      	bne.n	80042fc <wm8994_aif1_control1_adcr_src+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 80042cc:	897b      	ldrh	r3, [r7, #10]
 80042ce:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80042d2:	b29b      	uxth	r3, r3
 80042d4:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 80042d6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80042da:	039b      	lsls	r3, r3, #14
 80042dc:	b21a      	sxth	r2, r3
 80042de:	897b      	ldrh	r3, [r7, #10]
 80042e0:	b21b      	sxth	r3, r3
 80042e2:	4313      	orrs	r3, r2
 80042e4:	b21b      	sxth	r3, r3
 80042e6:	b29b      	uxth	r3, r3
 80042e8:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80042ea:	f107 020a 	add.w	r2, r7, #10
 80042ee:	2302      	movs	r3, #2
 80042f0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80042f4:	6878      	ldr	r0, [r7, #4]
 80042f6:	f7ff fea5 	bl	8004044 <wm8994_write_reg>
 80042fa:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80042fc:	68fb      	ldr	r3, [r7, #12]
}
 80042fe:	4618      	mov	r0, r3
 8004300:	3710      	adds	r7, #16
 8004302:	46bd      	mov	sp, r7
 8004304:	bd80      	pop	{r7, pc}

08004306 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8004306:	b580      	push	{r7, lr}
 8004308:	b084      	sub	sp, #16
 800430a:	af00      	add	r7, sp, #0
 800430c:	6078      	str	r0, [r7, #4]
 800430e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 8004310:	2302      	movs	r3, #2
 8004312:	683a      	ldr	r2, [r7, #0]
 8004314:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8004318:	6878      	ldr	r0, [r7, #4]
 800431a:	f7ff fe67 	bl	8003fec <wm8994_read_reg>
 800431e:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	2b00      	cmp	r3, #0
 8004324:	d109      	bne.n	800433a <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8004326:	683b      	ldr	r3, [r7, #0]
 8004328:	881b      	ldrh	r3, [r3, #0]
 800432a:	b2db      	uxtb	r3, r3
 800432c:	b29a      	uxth	r2, r3
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8004332:	683b      	ldr	r3, [r7, #0]
 8004334:	881a      	ldrh	r2, [r3, #0]
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800433a:	68fb      	ldr	r3, [r7, #12]
}
 800433c:	4618      	mov	r0, r3
 800433e:	3710      	adds	r7, #16
 8004340:	46bd      	mov	sp, r7
 8004342:	bd80      	pop	{r7, pc}

08004344 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 800434c:	4b06      	ldr	r3, [pc, #24]	@ (8004368 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800434e:	781b      	ldrb	r3, [r3, #0]
 8004350:	2b02      	cmp	r3, #2
 8004352:	d103      	bne.n	800435c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8004354:	4b05      	ldr	r3, [pc, #20]	@ (800436c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x28>)
 8004356:	2202      	movs	r2, #2
 8004358:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  }
}
 800435c:	bf00      	nop
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr
 8004368:	24001950 	.word	0x24001950
 800436c:	24001140 	.word	0x24001140

08004370 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8004370:	b480      	push	{r7}
 8004372:	b083      	sub	sp, #12
 8004374:	af00      	add	r7, sp, #0
 8004376:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 8004378:	4b06      	ldr	r3, [pc, #24]	@ (8004394 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800437a:	781b      	ldrb	r3, [r3, #0]
 800437c:	2b02      	cmp	r3, #2
 800437e:	d103      	bne.n	8004388 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 8004380:	4b05      	ldr	r3, [pc, #20]	@ (8004398 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 8004382:	2201      	movs	r2, #1
 8004384:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  }

}
 8004388:	bf00      	nop
 800438a:	370c      	adds	r7, #12
 800438c:	46bd      	mov	sp, r7
 800438e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004392:	4770      	bx	lr
 8004394:	24001950 	.word	0x24001950
 8004398:	24001140 	.word	0x24001140

0800439c <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b082      	sub	sp, #8
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  /* Display message on the LCD screen */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
 80043a4:	480f      	ldr	r0, [pc, #60]	@ (80043e4 <BSP_AUDIO_OUT_Error_CallBack+0x48>)
 80043a6:	f012 fd81 	bl	8016eac <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 80043aa:	f012 fda7 	bl	8016efc <UTIL_LCD_GetFont>
 80043ae:	4603      	mov	r3, r0
 80043b0:	88db      	ldrh	r3, [r3, #6]
 80043b2:	461a      	mov	r2, r3
 80043b4:	4613      	mov	r3, r2
 80043b6:	00db      	lsls	r3, r3, #3
 80043b8:	1a9b      	subs	r3, r3, r2
 80043ba:	005b      	lsls	r3, r3, #1
 80043bc:	4619      	mov	r1, r3
 80043be:	2301      	movs	r3, #1
 80043c0:	4a09      	ldr	r2, [pc, #36]	@ (80043e8 <BSP_AUDIO_OUT_Error_CallBack+0x4c>)
 80043c2:	2000      	movs	r0, #0
 80043c4:	f012 fe7e 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80043c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80043cc:	f012 fd6e 	bl	8016eac <UTIL_LCD_SetBackColor>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80043d0:	bf00      	nop
 80043d2:	2000      	movs	r0, #0
 80043d4:	f001 f8aa 	bl	800552c <BSP_PB_GetState>
 80043d8:	4603      	mov	r3, r0
 80043da:	2b00      	cmp	r3, #0
  {
    return;
 80043dc:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80043de:	3708      	adds	r7, #8
 80043e0:	46bd      	mov	sp, r7
 80043e2:	bd80      	pop	{r7, pc}
 80043e4:	ffff0000 	.word	0xffff0000
 80043e8:	0801e274 	.word	0x0801e274

080043ec <AudioRecord_demo>:
  *   Audio peripheral.
  * @param  None
  * @retval None
*/
void AudioRecord_demo(void)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b086      	sub	sp, #24
 80043f0:	af02      	add	r7, sp, #8
  uint32_t channel_nbr = 2;
 80043f2:	2302      	movs	r3, #2
 80043f4:	60fb      	str	r3, [r7, #12]

  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 80043f6:	f107 0308 	add.w	r3, r7, #8
 80043fa:	4619      	mov	r1, r3
 80043fc:	2000      	movs	r0, #0
 80043fe:	f003 fe3b 	bl	8008078 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8004402:	1d3b      	adds	r3, r7, #4
 8004404:	4619      	mov	r1, r3
 8004406:	2000      	movs	r0, #0
 8004408:	f003 fe5e 	bl	80080c8 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800440c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004410:	f012 fe0c 	bl	801702c <UTIL_LCD_Clear>
  /* Set Audio Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 90, UTIL_LCD_COLOR_BLUE);
 8004414:	68ba      	ldr	r2, [r7, #8]
 8004416:	4b47      	ldr	r3, [pc, #284]	@ (8004534 <AudioRecord_demo+0x148>)
 8004418:	9300      	str	r3, [sp, #0]
 800441a:	235a      	movs	r3, #90	@ 0x5a
 800441c:	2100      	movs	r1, #0
 800441e:	2000      	movs	r0, #0
 8004420:	f012 ff3e 	bl	80172a0 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004424:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004428:	f012 fd2c 	bl	8016e84 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800442c:	4841      	ldr	r0, [pc, #260]	@ (8004534 <AudioRecord_demo+0x148>)
 800442e:	f012 fd3d 	bl	8016eac <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8004432:	4841      	ldr	r0, [pc, #260]	@ (8004538 <AudioRecord_demo+0x14c>)
 8004434:	f012 fd4e 	bl	8016ed4 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD SAI PDM EXAMPLE", CENTER_MODE);
 8004438:	2301      	movs	r3, #1
 800443a:	4a40      	ldr	r2, [pc, #256]	@ (800453c <AudioRecord_demo+0x150>)
 800443c:	2100      	movs	r1, #0
 800443e:	2000      	movs	r0, #0
 8004440:	f012 fe40 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 8004444:	483e      	ldr	r0, [pc, #248]	@ (8004540 <AudioRecord_demo+0x154>)
 8004446:	f012 fd45 	bl	8016ed4 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 24,  (uint8_t *)"Press User button for next menu", CENTER_MODE);
 800444a:	2301      	movs	r3, #1
 800444c:	4a3d      	ldr	r2, [pc, #244]	@ (8004544 <AudioRecord_demo+0x158>)
 800444e:	2118      	movs	r1, #24
 8004450:	2000      	movs	r0, #0
 8004452:	f012 fe37 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 100, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 8004456:	68bb      	ldr	r3, [r7, #8]
 8004458:	f1a3 0214 	sub.w	r2, r3, #20
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3b6e      	subs	r3, #110	@ 0x6e
 8004460:	4934      	ldr	r1, [pc, #208]	@ (8004534 <AudioRecord_demo+0x148>)
 8004462:	9100      	str	r1, [sp, #0]
 8004464:	2164      	movs	r1, #100	@ 0x64
 8004466:	200a      	movs	r0, #10
 8004468:	f012 feda 	bl	8017220 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 101, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f1a3 0216 	sub.w	r2, r3, #22
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	3b70      	subs	r3, #112	@ 0x70
 8004476:	492f      	ldr	r1, [pc, #188]	@ (8004534 <AudioRecord_demo+0x148>)
 8004478:	9100      	str	r1, [sp, #0]
 800447a:	2165      	movs	r1, #101	@ 0x65
 800447c:	200b      	movs	r0, #11
 800447e:	f012 fecf 	bl	8017220 <UTIL_LCD_DrawRect>

  AudioFreq_ptr = AudioFreq+2; /* AUDIO_FREQUENCY_16K; */
 8004482:	4a31      	ldr	r2, [pc, #196]	@ (8004548 <AudioRecord_demo+0x15c>)
 8004484:	4b31      	ldr	r3, [pc, #196]	@ (800454c <AudioRecord_demo+0x160>)
 8004486:	601a      	str	r2, [r3, #0]

  AudioOutInit.Device = AUDIO_OUT_DEVICE_AUTO;
 8004488:	4b31      	ldr	r3, [pc, #196]	@ (8004550 <AudioRecord_demo+0x164>)
 800448a:	2204      	movs	r2, #4
 800448c:	601a      	str	r2, [r3, #0]
  AudioOutInit.ChannelsNbr = channel_nbr;
 800448e:	4a30      	ldr	r2, [pc, #192]	@ (8004550 <AudioRecord_demo+0x164>)
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	60d3      	str	r3, [r2, #12]
  AudioOutInit.SampleRate = *AudioFreq_ptr;
 8004494:	4b2d      	ldr	r3, [pc, #180]	@ (800454c <AudioRecord_demo+0x160>)
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	4a2d      	ldr	r2, [pc, #180]	@ (8004550 <AudioRecord_demo+0x164>)
 800449c:	6053      	str	r3, [r2, #4]
  AudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 800449e:	4b2c      	ldr	r3, [pc, #176]	@ (8004550 <AudioRecord_demo+0x164>)
 80044a0:	2210      	movs	r2, #16
 80044a2:	609a      	str	r2, [r3, #8]
  AudioOutInit.Volume = VolumeLevel;
 80044a4:	4b2b      	ldr	r3, [pc, #172]	@ (8004554 <AudioRecord_demo+0x168>)
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	4a29      	ldr	r2, [pc, #164]	@ (8004550 <AudioRecord_demo+0x164>)
 80044aa:	6113      	str	r3, [r2, #16]

  AudioInInit.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 80044ac:	4b2a      	ldr	r3, [pc, #168]	@ (8004558 <AudioRecord_demo+0x16c>)
 80044ae:	2210      	movs	r2, #16
 80044b0:	601a      	str	r2, [r3, #0]
  AudioInInit.ChannelsNbr = channel_nbr;
 80044b2:	4a29      	ldr	r2, [pc, #164]	@ (8004558 <AudioRecord_demo+0x16c>)
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	60d3      	str	r3, [r2, #12]
  AudioInInit.SampleRate = *AudioFreq_ptr;
 80044b8:	4b24      	ldr	r3, [pc, #144]	@ (800454c <AudioRecord_demo+0x160>)
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	4a26      	ldr	r2, [pc, #152]	@ (8004558 <AudioRecord_demo+0x16c>)
 80044c0:	6053      	str	r3, [r2, #4]
  AudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80044c2:	4b25      	ldr	r3, [pc, #148]	@ (8004558 <AudioRecord_demo+0x16c>)
 80044c4:	2210      	movs	r2, #16
 80044c6:	609a      	str	r2, [r3, #8]
  AudioInInit.Volume = VolumeLevel;
 80044c8:	4b22      	ldr	r3, [pc, #136]	@ (8004554 <AudioRecord_demo+0x168>)
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	4a22      	ldr	r2, [pc, #136]	@ (8004558 <AudioRecord_demo+0x16c>)
 80044ce:	6113      	str	r3, [r2, #16]

  BSP_JOY_Init(JOY1, JOY_MODE_GPIO, JOY_ALL);
 80044d0:	221f      	movs	r2, #31
 80044d2:	2100      	movs	r1, #0
 80044d4:	2000      	movs	r0, #0
 80044d6:	f001 f859 	bl	800558c <BSP_JOY_Init>

  /* Initialize Audio Recorder with 2 channels to be used */
  BSP_AUDIO_IN_Init(1, &AudioInInit);
 80044da:	491f      	ldr	r1, [pc, #124]	@ (8004558 <AudioRecord_demo+0x16c>)
 80044dc:	2001      	movs	r0, #1
 80044de:	f001 fd1b 	bl	8005f18 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_GetState(1, &InState);
 80044e2:	491e      	ldr	r1, [pc, #120]	@ (800455c <AudioRecord_demo+0x170>)
 80044e4:	2001      	movs	r0, #1
 80044e6:	f002 f96d 	bl	80067c4 <BSP_AUDIO_IN_GetState>

  BSP_AUDIO_OUT_Init(0, &AudioOutInit);
 80044ea:	4919      	ldr	r1, [pc, #100]	@ (8004550 <AudioRecord_demo+0x164>)
 80044ec:	2000      	movs	r0, #0
 80044ee:	f001 f98f 	bl	8005810 <BSP_AUDIO_OUT_Init>

  BSP_AUDIO_OUT_SetDevice(0, AUDIO_OUT_DEVICE_HEADPHONE);
 80044f2:	2102      	movs	r1, #2
 80044f4:	2000      	movs	r0, #0
 80044f6:	f001 fca9 	bl	8005e4c <BSP_AUDIO_OUT_SetDevice>

  /* Start Recording */
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"Start Recording ", CENTER_MODE);
 80044fa:	2301      	movs	r3, #1
 80044fc:	4a18      	ldr	r2, [pc, #96]	@ (8004560 <AudioRecord_demo+0x174>)
 80044fe:	21be      	movs	r1, #190	@ 0xbe
 8004500:	2000      	movs	r0, #0
 8004502:	f012 fddf 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_IN_RecordPDM(1, (uint8_t*)&recordPDMBuf, 2*AUDIO_IN_PDM_BUFFER_SIZE);
 8004506:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800450a:	4916      	ldr	r1, [pc, #88]	@ (8004564 <AudioRecord_demo+0x178>)
 800450c:	2001      	movs	r0, #1
 800450e:	f002 f927 	bl	8006760 <BSP_AUDIO_IN_RecordPDM>

  /* Play the recorded buffer*/
  UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)"Play the recorded buffer... ", CENTER_MODE);
 8004512:	2301      	movs	r3, #1
 8004514:	4a14      	ldr	r2, [pc, #80]	@ (8004568 <AudioRecord_demo+0x17c>)
 8004516:	21dc      	movs	r1, #220	@ 0xdc
 8004518:	2000      	movs	r0, #0
 800451a:	f012 fdd3 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Play(0, (uint8_t*)&RecPlayback[0], 2*RECORD_BUFFER_SIZE);
 800451e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004522:	4912      	ldr	r1, [pc, #72]	@ (800456c <AudioRecord_demo+0x180>)
 8004524:	2000      	movs	r0, #0
 8004526:	f001 fbc9 	bl	8005cbc <BSP_AUDIO_OUT_Play>
}
 800452a:	bf00      	nop
 800452c:	3710      	adds	r7, #16
 800452e:	46bd      	mov	sp, r7
 8004530:	bd80      	pop	{r7, pc}
 8004532:	bf00      	nop
 8004534:	ff0000ff 	.word	0xff0000ff
 8004538:	24001064 	.word	0x24001064
 800453c:	0801e28c 	.word	0x0801e28c
 8004540:	2400106c 	.word	0x2400106c
 8004544:	0801e2ac 	.word	0x0801e2ac
 8004548:	240004f4 	.word	0x240004f4
 800454c:	24005964 	.word	0x24005964
 8004550:	2400597c 	.word	0x2400597c
 8004554:	24000510 	.word	0x24000510
 8004558:	24005968 	.word	0x24005968
 800455c:	24005960 	.word	0x24005960
 8004560:	0801e2cc 	.word	0x0801e2cc
 8004564:	38000000 	.word	0x38000000
 8004568:	0801e2e0 	.word	0x0801e2e0
 800456c:	24001960 	.word	0x24001960

08004570 <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void  BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8004570:	b580      	push	{r7, lr}
 8004572:	b08a      	sub	sp, #40	@ 0x28
 8004574:	af00      	add	r7, sp, #0
 8004576:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2b01      	cmp	r3, #1
 800457c:	d173      	bne.n	8004666 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf6>
 800457e:	4b3d      	ldr	r3, [pc, #244]	@ (8004674 <BSP_AUDIO_IN_TransferComplete_CallBack+0x104>)
 8004580:	617b      	str	r3, [r7, #20]
 8004582:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8004586:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 8004588:	693b      	ldr	r3, [r7, #16]
 800458a:	2b00      	cmp	r3, #0
 800458c:	dd1d      	ble.n	80045ca <BSP_AUDIO_IN_TransferComplete_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800458e:	697b      	ldr	r3, [r7, #20]
 8004590:	f003 021f 	and.w	r2, r3, #31
 8004594:	693b      	ldr	r3, [r7, #16]
 8004596:	4413      	add	r3, r2
 8004598:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800459e:	f3bf 8f4f 	dsb	sy
}
 80045a2:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80045a4:	4a34      	ldr	r2, [pc, #208]	@ (8004678 <BSP_AUDIO_IN_TransferComplete_CallBack+0x108>)
 80045a6:	68bb      	ldr	r3, [r7, #8]
 80045a8:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80045ac:	68bb      	ldr	r3, [r7, #8]
 80045ae:	3320      	adds	r3, #32
 80045b0:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	3b20      	subs	r3, #32
 80045b6:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	dcf2      	bgt.n	80045a4 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80045be:	f3bf 8f4f 	dsb	sy
}
 80045c2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80045c4:	f3bf 8f6f 	isb	sy
}
 80045c8:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80045ca:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], &RecPlayback[playbackPtr]);
 80045cc:	4b2b      	ldr	r3, [pc, #172]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	005b      	lsls	r3, r3, #1
 80045d2:	4a2b      	ldr	r2, [pc, #172]	@ (8004680 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 80045d4:	4413      	add	r3, r2
 80045d6:	461a      	mov	r2, r3
 80045d8:	4926      	ldr	r1, [pc, #152]	@ (8004674 <BSP_AUDIO_IN_TransferComplete_CallBack+0x104>)
 80045da:	6878      	ldr	r0, [r7, #4]
 80045dc:	f002 f844 	bl	8006668 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 80045e0:	4b26      	ldr	r3, [pc, #152]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	005b      	lsls	r3, r3, #1
 80045e6:	4a26      	ldr	r2, [pc, #152]	@ (8004680 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 80045e8:	4413      	add	r3, r2
 80045ea:	627b      	str	r3, [r7, #36]	@ 0x24
 80045ec:	2340      	movs	r3, #64	@ 0x40
 80045ee:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80045f0:	6a3b      	ldr	r3, [r7, #32]
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	dd1d      	ble.n	8004632 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80045f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f8:	f003 021f 	and.w	r2, r3, #31
 80045fc:	6a3b      	ldr	r3, [r7, #32]
 80045fe:	4413      	add	r3, r2
 8004600:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8004602:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004604:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8004606:	f3bf 8f4f 	dsb	sy
}
 800460a:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800460c:	4a1a      	ldr	r2, [pc, #104]	@ (8004678 <BSP_AUDIO_IN_TransferComplete_CallBack+0x108>)
 800460e:	69bb      	ldr	r3, [r7, #24]
 8004610:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004614:	69bb      	ldr	r3, [r7, #24]
 8004616:	3320      	adds	r3, #32
 8004618:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800461a:	69fb      	ldr	r3, [r7, #28]
 800461c:	3b20      	subs	r3, #32
 800461e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8004620:	69fb      	ldr	r3, [r7, #28]
 8004622:	2b00      	cmp	r3, #0
 8004624:	dcf2      	bgt.n	800460c <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8004626:	f3bf 8f4f 	dsb	sy
}
 800462a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800462c:	f3bf 8f6f 	isb	sy
}
 8004630:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8004632:	bf00      	nop

    // TODO MOVE LATER
    printf("processing full");
 8004634:	4813      	ldr	r0, [pc, #76]	@ (8004684 <BSP_AUDIO_IN_TransferComplete_CallBack+0x114>)
 8004636:	f018 fb9f 	bl	801cd78 <iprintf>
    MX_X_CUBE_AI_Process(&RecPlayback[playbackPtr]);
 800463a:	4b10      	ldr	r3, [pc, #64]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	005b      	lsls	r3, r3, #1
 8004640:	4a0f      	ldr	r2, [pc, #60]	@ (8004680 <BSP_AUDIO_IN_TransferComplete_CallBack+0x110>)
 8004642:	4413      	add	r3, r2
 8004644:	4618      	mov	r0, r3
 8004646:	f012 f8c5 	bl	80167d4 <MX_X_CUBE_AI_Process>

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 800464a:	4b0c      	ldr	r3, [pc, #48]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	3320      	adds	r3, #32
 8004650:	4a0a      	ldr	r2, [pc, #40]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 8004652:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 8004654:	4b09      	ldr	r3, [pc, #36]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800465c:	d306      	bcc.n	800466c <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>
      playbackPtr = 0;
 800465e:	4b07      	ldr	r3, [pc, #28]	@ (800467c <BSP_AUDIO_IN_TransferComplete_CallBack+0x10c>)
 8004660:	2200      	movs	r2, #0
 8004662:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_FULL;
  }

}
 8004664:	e002      	b.n	800466c <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>
    AudioBufferOffset = BUFFER_OFFSET_FULL;
 8004666:	4b08      	ldr	r3, [pc, #32]	@ (8004688 <BSP_AUDIO_IN_TransferComplete_CallBack+0x118>)
 8004668:	2202      	movs	r2, #2
 800466a:	601a      	str	r2, [r3, #0]
}
 800466c:	bf00      	nop
 800466e:	3728      	adds	r7, #40	@ 0x28
 8004670:	46bd      	mov	sp, r7
 8004672:	bd80      	pop	{r7, pc}
 8004674:	38000100 	.word	0x38000100
 8004678:	e000ed00 	.word	0xe000ed00
 800467c:	24005990 	.word	0x24005990
 8004680:	24001960 	.word	0x24001960
 8004684:	0801e300 	.word	0x0801e300
 8004688:	24005994 	.word	0x24005994

0800468c <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 800468c:	b580      	push	{r7, lr}
 800468e:	b08a      	sub	sp, #40	@ 0x28
 8004690:	af00      	add	r7, sp, #0
 8004692:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2b01      	cmp	r3, #1
 8004698:	d173      	bne.n	8004782 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf6>
 800469a:	4b3d      	ldr	r3, [pc, #244]	@ (8004790 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x104>)
 800469c:	617b      	str	r3, [r7, #20]
 800469e:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80046a2:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	2b00      	cmp	r3, #0
 80046a8:	dd1d      	ble.n	80046e6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80046aa:	697b      	ldr	r3, [r7, #20]
 80046ac:	f003 021f 	and.w	r2, r3, #31
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	4413      	add	r3, r2
 80046b4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80046b6:	697b      	ldr	r3, [r7, #20]
 80046b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80046ba:	f3bf 8f4f 	dsb	sy
}
 80046be:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80046c0:	4a34      	ldr	r2, [pc, #208]	@ (8004794 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x108>)
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	3320      	adds	r3, #32
 80046cc:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	3b20      	subs	r3, #32
 80046d2:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	dcf2      	bgt.n	80046c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 80046da:	f3bf 8f4f 	dsb	sy
}
 80046de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80046e0:	f3bf 8f6f 	isb	sy
}
 80046e4:	bf00      	nop
}
 80046e6:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[0], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[0], &RecPlayback[playbackPtr]);
 80046e8:	4b2b      	ldr	r3, [pc, #172]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	005b      	lsls	r3, r3, #1
 80046ee:	4a2b      	ldr	r2, [pc, #172]	@ (800479c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 80046f0:	4413      	add	r3, r2
 80046f2:	461a      	mov	r2, r3
 80046f4:	4926      	ldr	r1, [pc, #152]	@ (8004790 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x104>)
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f001 ffb6 	bl	8006668 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 80046fc:	4b26      	ldr	r3, [pc, #152]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	4a26      	ldr	r2, [pc, #152]	@ (800479c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 8004704:	4413      	add	r3, r2
 8004706:	627b      	str	r3, [r7, #36]	@ 0x24
 8004708:	2340      	movs	r3, #64	@ 0x40
 800470a:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800470c:	6a3b      	ldr	r3, [r7, #32]
 800470e:	2b00      	cmp	r3, #0
 8004710:	dd1d      	ble.n	800474e <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8004712:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004714:	f003 021f 	and.w	r2, r3, #31
 8004718:	6a3b      	ldr	r3, [r7, #32]
 800471a:	4413      	add	r3, r2
 800471c:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800471e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004720:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8004722:	f3bf 8f4f 	dsb	sy
}
 8004726:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8004728:	4a1a      	ldr	r2, [pc, #104]	@ (8004794 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x108>)
 800472a:	69bb      	ldr	r3, [r7, #24]
 800472c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8004730:	69bb      	ldr	r3, [r7, #24]
 8004732:	3320      	adds	r3, #32
 8004734:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	3b20      	subs	r3, #32
 800473a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 800473c:	69fb      	ldr	r3, [r7, #28]
 800473e:	2b00      	cmp	r3, #0
 8004740:	dcf2      	bgt.n	8004728 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8004742:	f3bf 8f4f 	dsb	sy
}
 8004746:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004748:	f3bf 8f6f 	isb	sy
}
 800474c:	bf00      	nop
}
 800474e:	bf00      	nop

    // TODO MOVE LATER
    printf("processing half");
 8004750:	4813      	ldr	r0, [pc, #76]	@ (80047a0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x114>)
 8004752:	f018 fb11 	bl	801cd78 <iprintf>
    MX_X_CUBE_AI_Process(RecPlayback[playbackPtr]);
 8004756:	4b10      	ldr	r3, [pc, #64]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a10      	ldr	r2, [pc, #64]	@ (800479c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x110>)
 800475c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004760:	4618      	mov	r0, r3
 8004762:	f012 f837 	bl	80167d4 <MX_X_CUBE_AI_Process>

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8004766:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	3320      	adds	r3, #32
 800476c:	4a0a      	ldr	r2, [pc, #40]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 800476e:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 8004770:	4b09      	ldr	r3, [pc, #36]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004778:	d306      	bcc.n	8004788 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>
    {
      playbackPtr = 0;
 800477a:	4b07      	ldr	r3, [pc, #28]	@ (8004798 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x10c>)
 800477c:	2200      	movs	r2, #0
 800477e:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_HALF;
  }

}
 8004780:	e002      	b.n	8004788 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>
    AudioBufferOffset = BUFFER_OFFSET_HALF;
 8004782:	4b08      	ldr	r3, [pc, #32]	@ (80047a4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x118>)
 8004784:	2201      	movs	r2, #1
 8004786:	601a      	str	r2, [r3, #0]
}
 8004788:	bf00      	nop
 800478a:	3728      	adds	r7, #40	@ 0x28
 800478c:	46bd      	mov	sp, r7
 800478e:	bd80      	pop	{r7, pc}
 8004790:	38000000 	.word	0x38000000
 8004794:	e000ed00 	.word	0xe000ed00
 8004798:	24005990 	.word	0x24005990
 800479c:	24001960 	.word	0x24001960
 80047a0:	0801e310 	.word	0x0801e310
 80047a4:	24005994 	.word	0x24005994

080047a8 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b082      	sub	sp, #8
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  /* Stop the program with an infinite loop */
  Error_Handler();
 80047b0:	f000 fad2 	bl	8004d58 <Error_Handler>
}
 80047b4:	bf00      	nop
 80047b6:	3708      	adds	r7, #8
 80047b8:	46bd      	mov	sp, r7
 80047ba:	bd80      	pop	{r7, pc}

080047bc <BSP_CAMERA_FrameEventCallback>:

/**
  * @brief  Camera Frame Event callback.
  */
void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b082      	sub	sp, #8
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_Suspend(0);
 80047c4:	2000      	movs	r0, #0
 80047c6:	f003 f823 	bl	8007810 <BSP_CAMERA_Suspend>

  /* Convert captured frame to ARGB8888 and copy it to LCD FRAME BUFFER */
  LCD_LL_Convert_RGB565ToARGB8888((uint32_t *)(CAMERA_FRAME_BUFFER), (uint32_t *)(LCD_LAYER_0_ADDRESS), CameraResX[index_resolution], CameraResY[index_resolution]);
 80047ca:	4b0c      	ldr	r3, [pc, #48]	@ (80047fc <BSP_CAMERA_FrameEventCallback+0x40>)
 80047cc:	681b      	ldr	r3, [r3, #0]
 80047ce:	4a0c      	ldr	r2, [pc, #48]	@ (8004800 <BSP_CAMERA_FrameEventCallback+0x44>)
 80047d0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	4b09      	ldr	r3, [pc, #36]	@ (80047fc <BSP_CAMERA_FrameEventCallback+0x40>)
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	490a      	ldr	r1, [pc, #40]	@ (8004804 <BSP_CAMERA_FrameEventCallback+0x48>)
 80047dc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80047e0:	b29b      	uxth	r3, r3
 80047e2:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 80047e6:	4808      	ldr	r0, [pc, #32]	@ (8004808 <BSP_CAMERA_FrameEventCallback+0x4c>)
 80047e8:	f000 f810 	bl	800480c <LCD_LL_Convert_RGB565ToARGB8888>



  BSP_CAMERA_Resume(0);
 80047ec:	2000      	movs	r0, #0
 80047ee:	f003 f82d 	bl	800784c <BSP_CAMERA_Resume>
}
 80047f2:	bf00      	nop
 80047f4:	3708      	adds	r7, #8
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	24005998 	.word	0x24005998
 8004800:	24000514 	.word	0x24000514
 8004804:	24000528 	.word	0x24000528
 8004808:	d0600000 	.word	0xd0600000

0800480c <LCD_LL_Convert_RGB565ToARGB8888>:
  * @param  pSrc: Pointer to source buffer
  * @param  pDst: Pointer to destination buffer
  * @retval None
  */
static void LCD_LL_Convert_RGB565ToARGB8888(void *pSrc, void *pDst, uint16_t xsize, uint16_t ysize)
{
 800480c:	b580      	push	{r7, lr}
 800480e:	b08c      	sub	sp, #48	@ 0x30
 8004810:	af02      	add	r7, sp, #8
 8004812:	60f8      	str	r0, [r7, #12]
 8004814:	60b9      	str	r1, [r7, #8]
 8004816:	4611      	mov	r1, r2
 8004818:	461a      	mov	r2, r3
 800481a:	460b      	mov	r3, r1
 800481c:	80fb      	strh	r3, [r7, #6]
 800481e:	4613      	mov	r3, r2
 8004820:	80bb      	strh	r3, [r7, #4]
  uint32_t xPos, yPos, destination;
  uint32_t LcdResX,LcdResY;
  BSP_LCD_GetXSize(0, &LcdResX);
 8004822:	f107 0318 	add.w	r3, r7, #24
 8004826:	4619      	mov	r1, r3
 8004828:	2000      	movs	r0, #0
 800482a:	f003 fc25 	bl	8008078 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &LcdResY);
 800482e:	f107 0314 	add.w	r3, r7, #20
 8004832:	4619      	mov	r1, r3
 8004834:	2000      	movs	r0, #0
 8004836:	f003 fc47 	bl	80080c8 <BSP_LCD_GetYSize>
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800483a:	4b29      	ldr	r3, [pc, #164]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 800483c:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8004840:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8004842:	4b27      	ldr	r3, [pc, #156]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004844:	2200      	movs	r2, #0
 8004846:	609a      	str	r2, [r3, #8]
  hlcd_dma2d.Init.OutputOffset = LcdResX - xsize;
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	88fb      	ldrh	r3, [r7, #6]
 800484c:	1ad3      	subs	r3, r2, r3
 800484e:	4a24      	ldr	r2, [pc, #144]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004850:	60d3      	str	r3, [r2, #12]
  /* DMA2D Callbacks Configuration */
  hlcd_dma2d.XferCpltCallback  = NULL;
 8004852:	4b23      	ldr	r3, [pc, #140]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004854:	2200      	movs	r2, #0
 8004856:	621a      	str	r2, [r3, #32]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8004858:	4b21      	ldr	r3, [pc, #132]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 800485a:	2201      	movs	r2, #1
 800485c:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800485e:	4b20      	ldr	r3, [pc, #128]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004860:	22ff      	movs	r2, #255	@ 0xff
 8004862:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8004864:	4b1e      	ldr	r3, [pc, #120]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004866:	2202      	movs	r2, #2
 8004868:	649a      	str	r2, [r3, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800486a:	4b1d      	ldr	r3, [pc, #116]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 800486c:	2200      	movs	r2, #0
 800486e:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8004870:	4b1b      	ldr	r3, [pc, #108]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8004872:	4a1c      	ldr	r2, [pc, #112]	@ (80048e4 <LCD_LL_Convert_RGB565ToARGB8888+0xd8>)
 8004874:	601a      	str	r2, [r3, #0]

  /* Calculate the destination transfer address */
  xPos = (LcdResX  - xsize)/2;
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	88fb      	ldrh	r3, [r7, #6]
 800487a:	1ad3      	subs	r3, r2, r3
 800487c:	085b      	lsrs	r3, r3, #1
 800487e:	627b      	str	r3, [r7, #36]	@ 0x24
  yPos = (LcdResY  - ysize)/2;
 8004880:	697a      	ldr	r2, [r7, #20]
 8004882:	88bb      	ldrh	r3, [r7, #4]
 8004884:	1ad3      	subs	r3, r2, r3
 8004886:	085b      	lsrs	r3, r3, #1
 8004888:	623b      	str	r3, [r7, #32]

  destination = (uint32_t)pDst + (yPos * LcdResX + xPos) * 4;
 800488a:	69bb      	ldr	r3, [r7, #24]
 800488c:	6a3a      	ldr	r2, [r7, #32]
 800488e:	fb03 f202 	mul.w	r2, r3, r2
 8004892:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004894:	4413      	add	r3, r2
 8004896:	009a      	lsls	r2, r3, #2
 8004898:	68bb      	ldr	r3, [r7, #8]
 800489a:	4413      	add	r3, r2
 800489c:	61fb      	str	r3, [r7, #28]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800489e:	4810      	ldr	r0, [pc, #64]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80048a0:	f007 ff0c 	bl	800c6bc <HAL_DMA2D_Init>
 80048a4:	4603      	mov	r3, r0
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d116      	bne.n	80048d8 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80048aa:	2101      	movs	r1, #1
 80048ac:	480c      	ldr	r0, [pc, #48]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80048ae:	f008 f887 	bl	800c9c0 <HAL_DMA2D_ConfigLayer>
 80048b2:	4603      	mov	r3, r0
 80048b4:	2b00      	cmp	r3, #0
 80048b6:	d10f      	bne.n	80048d8 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, destination, xsize, ysize) == HAL_OK)
 80048b8:	68f9      	ldr	r1, [r7, #12]
 80048ba:	88fa      	ldrh	r2, [r7, #6]
 80048bc:	88bb      	ldrh	r3, [r7, #4]
 80048be:	9300      	str	r3, [sp, #0]
 80048c0:	4613      	mov	r3, r2
 80048c2:	69fa      	ldr	r2, [r7, #28]
 80048c4:	4806      	ldr	r0, [pc, #24]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80048c6:	f007 ff67 	bl	800c798 <HAL_DMA2D_Start>
 80048ca:	4603      	mov	r3, r0
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d103      	bne.n	80048d8 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 100);
 80048d0:	2164      	movs	r1, #100	@ 0x64
 80048d2:	4803      	ldr	r0, [pc, #12]	@ (80048e0 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 80048d4:	f007 ff8b 	bl	800c7ee <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80048d8:	bf00      	nop
 80048da:	3728      	adds	r7, #40	@ 0x28
 80048dc:	46bd      	mov	sp, r7
 80048de:	bd80      	pop	{r7, pc}
 80048e0:	24006854 	.word	0x24006854
 80048e4:	52001000 	.word	0x52001000

080048e8 <BSP_JOY_Callback>:
     HAL_Delay(6);
  }
}

void BSP_JOY_Callback(JOY_TypeDef JOY, uint32_t JoyPin)
{
 80048e8:	b480      	push	{r7}
 80048ea:	b083      	sub	sp, #12
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	4603      	mov	r3, r0
 80048f0:	6039      	str	r1, [r7, #0]
 80048f2:	71fb      	strb	r3, [r7, #7]
    JoyPinPressed = JoyPin;
 80048f4:	4a04      	ldr	r2, [pc, #16]	@ (8004908 <BSP_JOY_Callback+0x20>)
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	6013      	str	r3, [r2, #0]
}
 80048fa:	bf00      	nop
 80048fc:	370c      	adds	r7, #12
 80048fe:	46bd      	mov	sp, r7
 8004900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004904:	4770      	bx	lr
 8004906:	bf00      	nop
 8004908:	2400599c 	.word	0x2400599c

0800490c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b086      	sub	sp, #24
 8004910:	af00      	add	r7, sp, #0
    int32_t timeout;
    /* USER CODE END Boot_Mode_Sequence_0 */

    /* Enable the CPU Cache */

    MPU_Config();
 8004912:	f000 fa59 	bl	8004dc8 <MPU_Config>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8004916:	4b7a      	ldr	r3, [pc, #488]	@ (8004b00 <main+0x1f4>)
 8004918:	695b      	ldr	r3, [r3, #20]
 800491a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800491e:	2b00      	cmp	r3, #0
 8004920:	d11b      	bne.n	800495a <main+0x4e>
  __ASM volatile ("dsb 0xF":::"memory");
 8004922:	f3bf 8f4f 	dsb	sy
}
 8004926:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004928:	f3bf 8f6f 	isb	sy
}
 800492c:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 800492e:	4b74      	ldr	r3, [pc, #464]	@ (8004b00 <main+0x1f4>)
 8004930:	2200      	movs	r2, #0
 8004932:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 8004936:	f3bf 8f4f 	dsb	sy
}
 800493a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800493c:	f3bf 8f6f 	isb	sy
}
 8004940:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 8004942:	4b6f      	ldr	r3, [pc, #444]	@ (8004b00 <main+0x1f4>)
 8004944:	695b      	ldr	r3, [r3, #20]
 8004946:	4a6e      	ldr	r2, [pc, #440]	@ (8004b00 <main+0x1f4>)
 8004948:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800494c:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800494e:	f3bf 8f4f 	dsb	sy
}
 8004952:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8004954:	f3bf 8f6f 	isb	sy
}
 8004958:	e000      	b.n	800495c <main+0x50>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800495a:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800495c:	4b68      	ldr	r3, [pc, #416]	@ (8004b00 <main+0x1f4>)
 800495e:	695b      	ldr	r3, [r3, #20]
 8004960:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004964:	2b00      	cmp	r3, #0
 8004966:	d138      	bne.n	80049da <main+0xce>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8004968:	4b65      	ldr	r3, [pc, #404]	@ (8004b00 <main+0x1f4>)
 800496a:	2200      	movs	r2, #0
 800496c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8004970:	f3bf 8f4f 	dsb	sy
}
 8004974:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 8004976:	4b62      	ldr	r3, [pc, #392]	@ (8004b00 <main+0x1f4>)
 8004978:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800497c:	613b      	str	r3, [r7, #16]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 800497e:	693b      	ldr	r3, [r7, #16]
 8004980:	0b5b      	lsrs	r3, r3, #13
 8004982:	f3c3 030e 	ubfx	r3, r3, #0, #15
 8004986:	60fb      	str	r3, [r7, #12]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	08db      	lsrs	r3, r3, #3
 800498c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8004990:	60bb      	str	r3, [r7, #8]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	015a      	lsls	r2, r3, #5
 8004996:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800499a:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 800499c:	68ba      	ldr	r2, [r7, #8]
 800499e:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 80049a0:	4957      	ldr	r1, [pc, #348]	@ (8004b00 <main+0x1f4>)
 80049a2:	4313      	orrs	r3, r2
 80049a4:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80049a8:	68bb      	ldr	r3, [r7, #8]
 80049aa:	1e5a      	subs	r2, r3, #1
 80049ac:	60ba      	str	r2, [r7, #8]
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d1ef      	bne.n	8004992 <main+0x86>
    } while(sets-- != 0U);
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	1e5a      	subs	r2, r3, #1
 80049b6:	60fa      	str	r2, [r7, #12]
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d1e5      	bne.n	8004988 <main+0x7c>
  __ASM volatile ("dsb 0xF":::"memory");
 80049bc:	f3bf 8f4f 	dsb	sy
}
 80049c0:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80049c2:	4b4f      	ldr	r3, [pc, #316]	@ (8004b00 <main+0x1f4>)
 80049c4:	695b      	ldr	r3, [r3, #20]
 80049c6:	4a4e      	ldr	r2, [pc, #312]	@ (8004b00 <main+0x1f4>)
 80049c8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80049cc:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80049ce:	f3bf 8f4f 	dsb	sy
}
 80049d2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80049d4:	f3bf 8f6f 	isb	sy
}
 80049d8:	e000      	b.n	80049dc <main+0xd0>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80049da:	bf00      	nop
    /* Enable D-Cache---------------------------------------------------------*/
    SCB_EnableDCache();

    /* USER CODE BEGIN Boot_Mode_Sequence_1 */
    /* Wait until CPU2 boots and enters in stop mode or timeout*/
    timeout = 0xFFFF;
 80049dc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80049e0:	617b      	str	r3, [r7, #20]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80049e2:	bf00      	nop
 80049e4:	4b47      	ldr	r3, [pc, #284]	@ (8004b04 <main+0x1f8>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80049ec:	2b00      	cmp	r3, #0
 80049ee:	d004      	beq.n	80049fa <main+0xee>
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	1e5a      	subs	r2, r3, #1
 80049f4:	617a      	str	r2, [r7, #20]
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	dcf4      	bgt.n	80049e4 <main+0xd8>
        ;
    if (timeout < 0)
 80049fa:	697b      	ldr	r3, [r7, #20]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	da01      	bge.n	8004a04 <main+0xf8>
    {
        Error_Handler();
 8004a00:	f000 f9aa 	bl	8004d58 <Error_Handler>
    }
    /* USER CODE END Boot_Mode_Sequence_1 */
    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8004a04:	f004 fb00 	bl	8009008 <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8004a08:	f000 f886 	bl	8004b18 <SystemClock_Config>

    /* Configure the peripherals common clocks */
    PeriphCommonClock_Config();
 8004a0c:	f000 f9ad 	bl	8004d6a <PeriphCommonClock_Config>

    /* Configure the Wakeup push-button in EXTI Mode */
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_EXTI);
 8004a10:	2101      	movs	r1, #1
 8004a12:	2000      	movs	r0, #0
 8004a14:	f000 fd18 	bl	8005448 <BSP_PB_Init>
    BSP_LED_Init(LED1);
 8004a18:	2000      	movs	r0, #0
 8004a1a:	f000 fcb3 	bl	8005384 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 8004a1e:	2001      	movs	r0, #1
 8004a20:	f000 fcb0 	bl	8005384 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8004a24:	2002      	movs	r0, #2
 8004a26:	f000 fcad 	bl	8005384 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 8004a2a:	2003      	movs	r0, #3
 8004a2c:	f000 fcaa 	bl	8005384 <BSP_LED_Init>
    /*##-1- Initialize the LCD #################################################*/
    /* Initialize the LCD */
    BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8004a30:	2101      	movs	r1, #1
 8004a32:	2000      	movs	r0, #0
 8004a34:	f002 ff90 	bl	8007958 <BSP_LCD_Init>
    UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8004a38:	4833      	ldr	r0, [pc, #204]	@ (8004b08 <main+0x1fc>)
 8004a3a:	f012 f9cd 	bl	8016dd8 <UTIL_LCD_SetFuncDriver>
    UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8004a3e:	4833      	ldr	r0, [pc, #204]	@ (8004b0c <main+0x200>)
 8004a40:	f012 fa48 	bl	8016ed4 <UTIL_LCD_SetFont>
    Display_DemoDescription();
 8004a44:	f000 f8d6 	bl	8004bf4 <Display_DemoDescription>
    /* USER CODE BEGIN Boot_Mode_Sequence_2 */
    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    /*HW semaphore Clock enable*/
    __HAL_RCC_HSEM_CLK_ENABLE();
 8004a48:	4b2e      	ldr	r3, [pc, #184]	@ (8004b04 <main+0x1f8>)
 8004a4a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a4e:	4a2d      	ldr	r2, [pc, #180]	@ (8004b04 <main+0x1f8>)
 8004a50:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004a54:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004a58:	4b2a      	ldr	r3, [pc, #168]	@ (8004b04 <main+0x1f8>)
 8004a5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004a5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004a62:	607b      	str	r3, [r7, #4]
 8004a64:	687b      	ldr	r3, [r7, #4]
    /*Take HSEM */
    HAL_HSEM_FastTake(HSEM_ID_0);
 8004a66:	2000      	movs	r0, #0
 8004a68:	f009 fa0e 	bl	800de88 <HAL_HSEM_FastTake>
    /*Release HSEM in order to notify the CPU2(CM4)*/
    HAL_HSEM_Release(HSEM_ID_0, 0);
 8004a6c:	2100      	movs	r1, #0
 8004a6e:	2000      	movs	r0, #0
 8004a70:	f009 fa24 	bl	800debc <HAL_HSEM_Release>
    /* wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8004a74:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8004a78:	617b      	str	r3, [r7, #20]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 8004a7a:	bf00      	nop
 8004a7c:	4b21      	ldr	r3, [pc, #132]	@ (8004b04 <main+0x1f8>)
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004a84:	2b00      	cmp	r3, #0
 8004a86:	d104      	bne.n	8004a92 <main+0x186>
 8004a88:	697b      	ldr	r3, [r7, #20]
 8004a8a:	1e5a      	subs	r2, r3, #1
 8004a8c:	617a      	str	r2, [r7, #20]
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	dcf4      	bgt.n	8004a7c <main+0x170>
        ;
    if (timeout < 0)
 8004a92:	697b      	ldr	r3, [r7, #20]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	da01      	bge.n	8004a9c <main+0x190>
    {
        Error_Handler();
 8004a98:	f000 f95e 	bl	8004d58 <Error_Handler>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8004a9c:	f000 fa3c 	bl	8004f18 <MX_GPIO_Init>
    MX_USART1_UART_Init();
 8004aa0:	f000 f9ee 	bl	8004e80 <MX_USART1_UART_Init>
    MX_X_CUBE_AI_Init();
 8004aa4:	f011 fe88 	bl	80167b8 <MX_X_CUBE_AI_Init>

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    while (1)
    {
        Display_DemoDescription();
 8004aa8:	f000 f8a4 	bl	8004bf4 <Display_DemoDescription>
        if (ButtonState == 1)
 8004aac:	4b18      	ldr	r3, [pc, #96]	@ (8004b10 <main+0x204>)
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	2b01      	cmp	r3, #1
 8004ab2:	d1f9      	bne.n	8004aa8 <main+0x19c>
        {
            HAL_Delay(400);
 8004ab4:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8004ab8:	f004 fb02 	bl	80090c0 <HAL_Delay>
            ButtonState = 0;
 8004abc:	4b14      	ldr	r3, [pc, #80]	@ (8004b10 <main+0x204>)
 8004abe:	2200      	movs	r2, #0
 8004ac0:	601a      	str	r2, [r3, #0]

            /* USER CODE END WHILE */

            AudioRecord_demo();
 8004ac2:	f7ff fc93 	bl	80043ec <AudioRecord_demo>

            printf("PROCESSING AUDIO...\r\n");
 8004ac6:	4813      	ldr	r0, [pc, #76]	@ (8004b14 <main+0x208>)
 8004ac8:	f018 f9be 	bl	801ce48 <puts>
            HAL_Delay(3000);
 8004acc:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8004ad0:	f004 faf6 	bl	80090c0 <HAL_Delay>

            if (CheckForUserInput() > 0)
 8004ad4:	f000 f920 	bl	8004d18 <CheckForUserInput>
 8004ad8:	4603      	mov	r3, r0
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0e4      	beq.n	8004aa8 <main+0x19c>
            {
                ButtonState = 0;
 8004ade:	4b0c      	ldr	r3, [pc, #48]	@ (8004b10 <main+0x204>)
 8004ae0:	2200      	movs	r2, #0
 8004ae2:	601a      	str	r2, [r3, #0]
                BSP_AUDIO_OUT_Stop(0);
 8004ae4:	2000      	movs	r0, #0
 8004ae6:	f001 f963 	bl	8005db0 <BSP_AUDIO_OUT_Stop>
                BSP_AUDIO_OUT_DeInit(0);
 8004aea:	2000      	movs	r0, #0
 8004aec:	f000 ff8a 	bl	8005a04 <BSP_AUDIO_OUT_DeInit>
                BSP_AUDIO_IN_Stop(1);
 8004af0:	2001      	movs	r0, #1
 8004af2:	f001 fdf3 	bl	80066dc <BSP_AUDIO_IN_Stop>
                BSP_AUDIO_IN_DeInit(1);
 8004af6:	2001      	movs	r0, #1
 8004af8:	f001 fb96 	bl	8006228 <BSP_AUDIO_IN_DeInit>
        Display_DemoDescription();
 8004afc:	e7d4      	b.n	8004aa8 <main+0x19c>
 8004afe:	bf00      	nop
 8004b00:	e000ed00 	.word	0xe000ed00
 8004b04:	58024400 	.word	0x58024400
 8004b08:	08020c34 	.word	0x08020c34
 8004b0c:	24001064 	.word	0x24001064
 8004b10:	240059a4 	.word	0x240059a4
 8004b14:	0801e320 	.word	0x0801e320

08004b18 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
static void SystemClock_Config(void)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b09e      	sub	sp, #120	@ 0x78
 8004b1c:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 8004b1e:	2300      	movs	r3, #0
 8004b20:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
    // {
    // }

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8004b24:	2301      	movs	r3, #1
 8004b26:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8004b28:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004b2c:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 8004b2e:	2300      	movs	r3, #0
 8004b30:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 8004b32:	2300      	movs	r3, #0
 8004b34:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004b36:	2302      	movs	r3, #2
 8004b38:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	633b      	str	r3, [r7, #48]	@ 0x30

    RCC_OscInitStruct.PLL.PLLM = 5;
 8004b3e:	2305      	movs	r3, #5
 8004b40:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 160;
 8004b42:	23a0      	movs	r3, #160	@ 0xa0
 8004b44:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8004b46:	2300      	movs	r3, #0
 8004b48:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = 2;
 8004b4a:	2302      	movs	r3, #2
 8004b4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLR = 2;
 8004b4e:	2302      	movs	r3, #2
 8004b50:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 8004b52:	2304      	movs	r3, #4
 8004b54:	643b      	str	r3, [r7, #64]	@ 0x40

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 8004b56:	2300      	movs	r3, #0
 8004b58:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 8004b5a:	2308      	movs	r3, #8
 8004b5c:	64bb      	str	r3, [r7, #72]	@ 0x48
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 8004b5e:	f107 0308 	add.w	r3, r7, #8
 8004b62:	4618      	mov	r0, r3
 8004b64:	f00a fd2a 	bl	800f5bc <HAL_RCC_OscConfig>
 8004b68:	4603      	mov	r3, r0
 8004b6a:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8004b6e:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d001      	beq.n	8004b7a <SystemClock_Config+0x62>
    {
        Error_Handler();
 8004b76:	f000 f8ef 	bl	8004d58 <Error_Handler>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType =
 8004b7a:	233f      	movs	r3, #63	@ 0x3f
 8004b7c:	657b      	str	r3, [r7, #84]	@ 0x54
        (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
         RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004b7e:	2303      	movs	r3, #3
 8004b80:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8004b82:	2300      	movs	r3, #0
 8004b84:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8004b86:	2308      	movs	r3, #8
 8004b88:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8004b8a:	2340      	movs	r3, #64	@ 0x40
 8004b8c:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8004b8e:	2340      	movs	r3, #64	@ 0x40
 8004b90:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8004b92:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004b96:	66fb      	str	r3, [r7, #108]	@ 0x6c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8004b98:	2340      	movs	r3, #64	@ 0x40
 8004b9a:	673b      	str	r3, [r7, #112]	@ 0x70
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8004b9c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8004ba0:	2104      	movs	r1, #4
 8004ba2:	4618      	mov	r0, r3
 8004ba4:	f00b f964 	bl	800fe70 <HAL_RCC_ClockConfig>
 8004ba8:	4603      	mov	r3, r0
 8004baa:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8004bae:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	d001      	beq.n	8004bba <SystemClock_Config+0xa2>
    {
        Error_Handler();
 8004bb6:	f000 f8cf 	bl	8004d58 <Error_Handler>
           - The activation of the SYSCFG clock
           - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
    */

    /*activate CSI clock mondatory for I/O Compensation Cell*/
    __HAL_RCC_CSI_ENABLE();
 8004bba:	4b0d      	ldr	r3, [pc, #52]	@ (8004bf0 <SystemClock_Config+0xd8>)
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8004bf0 <SystemClock_Config+0xd8>)
 8004bc0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004bc4:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004bc6:	4b0a      	ldr	r3, [pc, #40]	@ (8004bf0 <SystemClock_Config+0xd8>)
 8004bc8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bcc:	4a08      	ldr	r2, [pc, #32]	@ (8004bf0 <SystemClock_Config+0xd8>)
 8004bce:	f043 0302 	orr.w	r3, r3, #2
 8004bd2:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8004bd6:	4b06      	ldr	r3, [pc, #24]	@ (8004bf0 <SystemClock_Config+0xd8>)
 8004bd8:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004bdc:	f003 0302 	and.w	r3, r3, #2
 8004be0:	607b      	str	r3, [r7, #4]
 8004be2:	687b      	ldr	r3, [r7, #4]

    /* Enables the I/O Compensation Cell */
    HAL_EnableCompensationCell();
 8004be4:	f004 fa9c 	bl	8009120 <HAL_EnableCompensationCell>
}
 8004be8:	bf00      	nop
 8004bea:	3778      	adds	r7, #120	@ 0x78
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bd80      	pop	{r7, pc}
 8004bf0:	58024400 	.word	0x58024400

08004bf4 <Display_DemoDescription>:
 * @brief  Display main demo messages
 * @param  None
 * @retval None
 */
static void Display_DemoDescription(void)
{
 8004bf4:	b580      	push	{r7, lr}
 8004bf6:	b094      	sub	sp, #80	@ 0x50
 8004bf8:	af02      	add	r7, sp, #8
    char desc[64];
    uint32_t x_size;
    uint32_t y_size;

    BSP_LCD_GetXSize(0, &x_size);
 8004bfa:	1d3b      	adds	r3, r7, #4
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	2000      	movs	r0, #0
 8004c00:	f003 fa3a 	bl	8008078 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8004c04:	463b      	mov	r3, r7
 8004c06:	4619      	mov	r1, r3
 8004c08:	2000      	movs	r0, #0
 8004c0a:	f003 fa5d 	bl	80080c8 <BSP_LCD_GetYSize>
    /* Set LCD Foreground Layer  */
    UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 8004c0e:	4835      	ldr	r0, [pc, #212]	@ (8004ce4 <Display_DemoDescription+0xf0>)
 8004c10:	f012 f960 	bl	8016ed4 <UTIL_LCD_SetFont>

    /* Clear the LCD */
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8004c14:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c18:	f012 f948 	bl	8016eac <UTIL_LCD_SetBackColor>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8004c1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c20:	f012 fa04 	bl	801702c <UTIL_LCD_Clear>

    /* Set the LCD Text Color */
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 8004c24:	4830      	ldr	r0, [pc, #192]	@ (8004ce8 <Display_DemoDescription+0xf4>)
 8004c26:	f012 f92d 	bl	8016e84 <UTIL_LCD_SetTextColor>

    /* Display LCD messages */
    UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H747I BSP", CENTER_MODE);
 8004c2a:	2301      	movs	r3, #1
 8004c2c:	4a2f      	ldr	r2, [pc, #188]	@ (8004cec <Display_DemoDescription+0xf8>)
 8004c2e:	210a      	movs	r1, #10
 8004c30:	2000      	movs	r0, #0
 8004c32:	f012 fa47 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 8004c36:	2301      	movs	r3, #1
 8004c38:	4a2d      	ldr	r2, [pc, #180]	@ (8004cf0 <Display_DemoDescription+0xfc>)
 8004c3a:	2123      	movs	r1, #35	@ 0x23
 8004c3c:	2000      	movs	r0, #0
 8004c3e:	f012 fa41 	bl	80170c4 <UTIL_LCD_DisplayStringAt>

    /* Draw Bitmap */
    UTIL_LCD_DrawBitmap((x_size - 80) / 2, 65, (uint8_t *)stlogo);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	3b50      	subs	r3, #80	@ 0x50
 8004c46:	085b      	lsrs	r3, r3, #1
 8004c48:	4a2a      	ldr	r2, [pc, #168]	@ (8004cf4 <Display_DemoDescription+0x100>)
 8004c4a:	2141      	movs	r1, #65	@ 0x41
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f012 fb11 	bl	8017274 <UTIL_LCD_DrawBitmap>

    UTIL_LCD_SetFont(&Font12);
 8004c52:	4829      	ldr	r0, [pc, #164]	@ (8004cf8 <Display_DemoDescription+0x104>)
 8004c54:	f012 f93e 	bl	8016ed4 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2018",
 8004c58:	683b      	ldr	r3, [r7, #0]
 8004c5a:	f1a3 0114 	sub.w	r1, r3, #20
 8004c5e:	2301      	movs	r3, #1
 8004c60:	4a26      	ldr	r2, [pc, #152]	@ (8004cfc <Display_DemoDescription+0x108>)
 8004c62:	2000      	movs	r0, #0
 8004c64:	f012 fa2e 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
                             CENTER_MODE);

    UTIL_LCD_SetFont(&Font16);
 8004c68:	4825      	ldr	r0, [pc, #148]	@ (8004d00 <Display_DemoDescription+0x10c>)
 8004c6a:	f012 f933 	bl	8016ed4 <UTIL_LCD_SetFont>
    BSP_LCD_FillRect(0, 0, y_size / 2 + 15, x_size, 60, UTIL_LCD_COLOR_BLUE);
 8004c6e:	683b      	ldr	r3, [r7, #0]
 8004c70:	085b      	lsrs	r3, r3, #1
 8004c72:	f103 020f 	add.w	r2, r3, #15
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	4922      	ldr	r1, [pc, #136]	@ (8004d04 <Display_DemoDescription+0x110>)
 8004c7a:	9101      	str	r1, [sp, #4]
 8004c7c:	213c      	movs	r1, #60	@ 0x3c
 8004c7e:	9100      	str	r1, [sp, #0]
 8004c80:	2100      	movs	r1, #0
 8004c82:	2000      	movs	r0, #0
 8004c84:	f003 fc2a 	bl	80084dc <BSP_LCD_FillRect>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8004c88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c8c:	f012 f8fa 	bl	8016e84 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8004c90:	481c      	ldr	r0, [pc, #112]	@ (8004d04 <Display_DemoDescription+0x110>)
 8004c92:	f012 f90b 	bl	8016eac <UTIL_LCD_SetBackColor>
    UTIL_LCD_DisplayStringAt(0, y_size / 2 + 30,
 8004c96:	683b      	ldr	r3, [r7, #0]
 8004c98:	085b      	lsrs	r3, r3, #1
 8004c9a:	f103 011e 	add.w	r1, r3, #30
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	4a19      	ldr	r2, [pc, #100]	@ (8004d08 <Display_DemoDescription+0x114>)
 8004ca2:	2000      	movs	r0, #0
 8004ca4:	f012 fa0e 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
                             (uint8_t *)"Press Wakeup button to start :", CENTER_MODE);
    sprintf(desc, "%s example", BSP_examples[DemoIndex].DemoName);
 8004ca8:	4b18      	ldr	r3, [pc, #96]	@ (8004d0c <Display_DemoDescription+0x118>)
 8004caa:	781b      	ldrb	r3, [r3, #0]
 8004cac:	461a      	mov	r2, r3
 8004cae:	4613      	mov	r3, r2
 8004cb0:	011b      	lsls	r3, r3, #4
 8004cb2:	1a9b      	subs	r3, r3, r2
 8004cb4:	009b      	lsls	r3, r3, #2
 8004cb6:	4a16      	ldr	r2, [pc, #88]	@ (8004d10 <Display_DemoDescription+0x11c>)
 8004cb8:	4413      	add	r3, r2
 8004cba:	1d1a      	adds	r2, r3, #4
 8004cbc:	f107 0308 	add.w	r3, r7, #8
 8004cc0:	4914      	ldr	r1, [pc, #80]	@ (8004d14 <Display_DemoDescription+0x120>)
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f017 ff46 	bl	801cb54 <siprintf>
    UTIL_LCD_DisplayStringAt(0, y_size / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 8004cc8:	683b      	ldr	r3, [r7, #0]
 8004cca:	085b      	lsrs	r3, r3, #1
 8004ccc:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 8004cd0:	f107 0208 	add.w	r2, r7, #8
 8004cd4:	2301      	movs	r3, #1
 8004cd6:	2000      	movs	r0, #0
 8004cd8:	f012 f9f4 	bl	80170c4 <UTIL_LCD_DisplayStringAt>
}
 8004cdc:	bf00      	nop
 8004cde:	3748      	adds	r7, #72	@ 0x48
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	24001064 	.word	0x24001064
 8004ce8:	ff000080 	.word	0xff000080
 8004cec:	0801e338 	.word	0x0801e338
 8004cf0:	0801e348 	.word	0x0801e348
 8004cf4:	0801e798 	.word	0x0801e798
 8004cf8:	24001074 	.word	0x24001074
 8004cfc:	0801e35c 	.word	0x0801e35c
 8004d00:	2400106c 	.word	0x2400106c
 8004d04:	ff0000ff 	.word	0xff0000ff
 8004d08:	0801e384 	.word	0x0801e384
 8004d0c:	240059a0 	.word	0x240059a0
 8004d10:	2400053c 	.word	0x2400053c
 8004d14:	0801e3a4 	.word	0x0801e3a4

08004d18 <CheckForUserInput>:
/**
 * @brief  Check for user input
 * @param  None
 * @retval Input state (1 : active / 0 : Inactive)
 */
uint8_t CheckForUserInput(void) { return ButtonState; }
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
 8004d1c:	4b03      	ldr	r3, [pc, #12]	@ (8004d2c <CheckForUserInput+0x14>)
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	b2db      	uxtb	r3, r3
 8004d22:	4618      	mov	r0, r3
 8004d24:	46bd      	mov	sp, r7
 8004d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2a:	4770      	bx	lr
 8004d2c:	240059a4 	.word	0x240059a4

08004d30 <BSP_PB_Callback>:
 * @brief  Button Callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 8004d30:	b480      	push	{r7}
 8004d32:	b083      	sub	sp, #12
 8004d34:	af00      	add	r7, sp, #0
 8004d36:	4603      	mov	r3, r0
 8004d38:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_WAKEUP)
 8004d3a:	79fb      	ldrb	r3, [r7, #7]
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d102      	bne.n	8004d46 <BSP_PB_Callback+0x16>
    {

        ButtonState = 1;
 8004d40:	4b04      	ldr	r3, [pc, #16]	@ (8004d54 <BSP_PB_Callback+0x24>)
 8004d42:	2201      	movs	r2, #1
 8004d44:	601a      	str	r2, [r3, #0]
    }
}
 8004d46:	bf00      	nop
 8004d48:	370c      	adds	r7, #12
 8004d4a:	46bd      	mov	sp, r7
 8004d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d50:	4770      	bx	lr
 8004d52:	bf00      	nop
 8004d54:	240059a4 	.word	0x240059a4

08004d58 <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 8004d58:	b580      	push	{r7, lr}
 8004d5a:	af00      	add	r7, sp, #0
    /* Turn LED REDon */
    BSP_LED_On(LED_RED);
 8004d5c:	2002      	movs	r0, #2
 8004d5e:	f000 fb55 	bl	800540c <BSP_LED_On>
  __ASM volatile ("cpsid i" : : : "memory");
 8004d62:	b672      	cpsid	i
}
 8004d64:	bf00      	nop
    __disable_irq();
    while (1)
 8004d66:	bf00      	nop
 8004d68:	e7fd      	b.n	8004d66 <Error_Handler+0xe>

08004d6a <PeriphCommonClock_Config>:
/**
 * @brief Peripherals Common Clock Configuration
 * @retval None
 */
void PeriphCommonClock_Config(void)
{
 8004d6a:	b580      	push	{r7, lr}
 8004d6c:	b0b2      	sub	sp, #200	@ 0xc8
 8004d6e:	af00      	add	r7, sp, #0
    RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004d70:	463b      	mov	r3, r7
 8004d72:	22c8      	movs	r2, #200	@ 0xc8
 8004d74:	2100      	movs	r1, #0
 8004d76:	4618      	mov	r0, r3
 8004d78:	f018 f888 	bl	801ce8c <memset>

    /** Initializes the peripherals clock
     */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8004d7c:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8004d80:	f04f 0300 	mov.w	r3, #0
 8004d84:	e9c7 2300 	strd	r2, r3, [r7]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8004d88:	2302      	movs	r3, #2
 8004d8a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8004d8c:	230c      	movs	r3, #12
 8004d8e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8004d90:	2302      	movs	r3, #2
 8004d92:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8004d94:	2302      	movs	r3, #2
 8004d96:	617b      	str	r3, [r7, #20]
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8004d98:	2302      	movs	r3, #2
 8004d9a:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8004d9c:	23c0      	movs	r3, #192	@ 0xc0
 8004d9e:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8004da0:	2320      	movs	r3, #32
 8004da2:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8004da4:	2300      	movs	r3, #0
 8004da6:	627b      	str	r3, [r7, #36]	@ 0x24
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8004da8:	2300      	movs	r3, #0
 8004daa:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8004dae:	463b      	mov	r3, r7
 8004db0:	4618      	mov	r0, r3
 8004db2:	f00b fc2b 	bl	801060c <HAL_RCCEx_PeriphCLKConfig>
 8004db6:	4603      	mov	r3, r0
 8004db8:	2b00      	cmp	r3, #0
 8004dba:	d001      	beq.n	8004dc0 <PeriphCommonClock_Config+0x56>
    {
        Error_Handler();
 8004dbc:	f7ff ffcc 	bl	8004d58 <Error_Handler>
    }
}
 8004dc0:	bf00      	nop
 8004dc2:	37c8      	adds	r7, #200	@ 0xc8
 8004dc4:	46bd      	mov	sp, r7
 8004dc6:	bd80      	pop	{r7, pc}

08004dc8 <MPU_Config>:

static void MPU_Config(void)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b084      	sub	sp, #16
 8004dcc:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

    /* Disable the MPU */
    HAL_MPU_Disable();
 8004dce:	f004 fac9 	bl	8009364 <HAL_MPU_Disable>

    /* Configure the MPU as Strongly ordered for not defined regions */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004dd2:	2301      	movs	r3, #1
 8004dd4:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x00;
 8004dd6:	2300      	movs	r3, #0
 8004dd8:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8004dda:	231f      	movs	r3, #31
 8004ddc:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8004dde:	2300      	movs	r3, #0
 8004de0:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004de2:	2300      	movs	r3, #0
 8004de4:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8004de6:	2300      	movs	r3, #0
 8004de8:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8004dea:	2301      	movs	r3, #1
 8004dec:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8004dee:	2300      	movs	r3, #0
 8004df0:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004df2:	2300      	movs	r3, #0
 8004df4:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8004df6:	2387      	movs	r3, #135	@ 0x87
 8004df8:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8004dfa:	2301      	movs	r3, #1
 8004dfc:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004dfe:	463b      	mov	r3, r7
 8004e00:	4618      	mov	r0, r3
 8004e02:	f004 fae7 	bl	80093d4 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for SDRAM */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004e06:	2301      	movs	r3, #1
 8004e08:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8004e0a:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8004e0e:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8004e10:	2318      	movs	r3, #24
 8004e12:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e14:	2303      	movs	r3, #3
 8004e16:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e18:	2300      	movs	r3, #0
 8004e1a:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004e1c:	2301      	movs	r3, #1
 8004e1e:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004e20:	2300      	movs	r3, #0
 8004e22:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8004e24:	2301      	movs	r3, #1
 8004e26:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 8004e2c:	2300      	movs	r3, #0
 8004e2e:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004e30:	2300      	movs	r3, #0
 8004e32:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e34:	463b      	mov	r3, r7
 8004e36:	4618      	mov	r0, r3
 8004e38:	f004 facc 	bl	80093d4 <HAL_MPU_ConfigRegion>

    /* Configure the MPU QSPI flash */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8004e3c:	2301      	movs	r3, #1
 8004e3e:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8004e40:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8004e44:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8004e46:	231a      	movs	r3, #26
 8004e48:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8004e4a:	2303      	movs	r3, #3
 8004e4c:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8004e4e:	2300      	movs	r3, #0
 8004e50:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8004e52:	2301      	movs	r3, #1
 8004e54:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8004e56:	2300      	movs	r3, #0
 8004e58:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8004e5e:	2300      	movs	r3, #0
 8004e60:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8004e62:	2300      	movs	r3, #0
 8004e64:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8004e66:	2300      	movs	r3, #0
 8004e68:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8004e6a:	463b      	mov	r3, r7
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	f004 fab1 	bl	80093d4 <HAL_MPU_ConfigRegion>

    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 8004e72:	2004      	movs	r0, #4
 8004e74:	f004 fa8e 	bl	8009394 <HAL_MPU_Enable>
}
 8004e78:	bf00      	nop
 8004e7a:	3710      	adds	r7, #16
 8004e7c:	46bd      	mov	sp, r7
 8004e7e:	bd80      	pop	{r7, pc}

08004e80 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 8004e84:	4b22      	ldr	r3, [pc, #136]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004e86:	4a23      	ldr	r2, [pc, #140]	@ (8004f14 <MX_USART1_UART_Init+0x94>)
 8004e88:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 115200;
 8004e8a:	4b21      	ldr	r3, [pc, #132]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004e8c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004e90:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004e92:	4b1f      	ldr	r3, [pc, #124]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004e94:	2200      	movs	r2, #0
 8004e96:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 8004e98:	4b1d      	ldr	r3, [pc, #116]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 8004e9e:	4b1c      	ldr	r3, [pc, #112]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 8004ea4:	4b1a      	ldr	r3, [pc, #104]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004ea6:	220c      	movs	r2, #12
 8004ea8:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004eaa:	4b19      	ldr	r3, [pc, #100]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004eac:	2200      	movs	r2, #0
 8004eae:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004eb0:	4b17      	ldr	r3, [pc, #92]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	61da      	str	r2, [r3, #28]
    huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8004eb6:	4b16      	ldr	r3, [pc, #88]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004eb8:	2200      	movs	r2, #0
 8004eba:	621a      	str	r2, [r3, #32]
    huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8004ebc:	4b14      	ldr	r3, [pc, #80]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	625a      	str	r2, [r3, #36]	@ 0x24
    huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8004ec2:	4b13      	ldr	r3, [pc, #76]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004ec4:	2200      	movs	r2, #0
 8004ec6:	629a      	str	r2, [r3, #40]	@ 0x28
    if (HAL_UART_Init(&huart1) != HAL_OK)
 8004ec8:	4811      	ldr	r0, [pc, #68]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004eca:	f00f fefb 	bl	8014cc4 <HAL_UART_Init>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d001      	beq.n	8004ed8 <MX_USART1_UART_Init+0x58>
    {
        Error_Handler();
 8004ed4:	f7ff ff40 	bl	8004d58 <Error_Handler>
    }
    if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004ed8:	2100      	movs	r1, #0
 8004eda:	480d      	ldr	r0, [pc, #52]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004edc:	f010 ff91 	bl	8015e02 <HAL_UARTEx_SetTxFifoThreshold>
 8004ee0:	4603      	mov	r3, r0
 8004ee2:	2b00      	cmp	r3, #0
 8004ee4:	d001      	beq.n	8004eea <MX_USART1_UART_Init+0x6a>
    {
        Error_Handler();
 8004ee6:	f7ff ff37 	bl	8004d58 <Error_Handler>
    }
    if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8004eea:	2100      	movs	r1, #0
 8004eec:	4808      	ldr	r0, [pc, #32]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004eee:	f010 ffc6 	bl	8015e7e <HAL_UARTEx_SetRxFifoThreshold>
 8004ef2:	4603      	mov	r3, r0
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d001      	beq.n	8004efc <MX_USART1_UART_Init+0x7c>
    {
        Error_Handler();
 8004ef8:	f7ff ff2e 	bl	8004d58 <Error_Handler>
    }
    if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8004efc:	4804      	ldr	r0, [pc, #16]	@ (8004f10 <MX_USART1_UART_Init+0x90>)
 8004efe:	f010 ff47 	bl	8015d90 <HAL_UARTEx_DisableFifoMode>
 8004f02:	4603      	mov	r3, r0
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d001      	beq.n	8004f0c <MX_USART1_UART_Init+0x8c>
    {
        Error_Handler();
 8004f08:	f7ff ff26 	bl	8004d58 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 8004f0c:	bf00      	nop
 8004f0e:	bd80      	pop	{r7, pc}
 8004f10:	24006b50 	.word	0x24006b50
 8004f14:	40011000 	.word	0x40011000

08004f18 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8004f18:	b580      	push	{r7, lr}
 8004f1a:	b088      	sub	sp, #32
 8004f1c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004f1e:	f107 030c 	add.w	r3, r7, #12
 8004f22:	2200      	movs	r2, #0
 8004f24:	601a      	str	r2, [r3, #0]
 8004f26:	605a      	str	r2, [r3, #4]
 8004f28:	609a      	str	r2, [r3, #8]
 8004f2a:	60da      	str	r2, [r3, #12]
 8004f2c:	611a      	str	r2, [r3, #16]
    /* USER CODE BEGIN MX_GPIO_Init_1 */

    /* USER CODE END MX_GPIO_Init_1 */

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8004f2e:	4b21      	ldr	r3, [pc, #132]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f30:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f34:	4a1f      	ldr	r2, [pc, #124]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f36:	f043 0304 	orr.w	r3, r3, #4
 8004f3a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f3e:	4b1d      	ldr	r3, [pc, #116]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f44:	f003 0304 	and.w	r3, r3, #4
 8004f48:	60bb      	str	r3, [r7, #8]
 8004f4a:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004f4c:	4b19      	ldr	r3, [pc, #100]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f4e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f52:	4a18      	ldr	r2, [pc, #96]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f54:	f043 0301 	orr.w	r3, r3, #1
 8004f58:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f5c:	4b15      	ldr	r3, [pc, #84]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f62:	f003 0301 	and.w	r3, r3, #1
 8004f66:	607b      	str	r3, [r7, #4]
 8004f68:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOH_CLK_ENABLE();
 8004f6a:	4b12      	ldr	r3, [pc, #72]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f6c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f70:	4a10      	ldr	r2, [pc, #64]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f72:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004f76:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004f7a:	4b0e      	ldr	r3, [pc, #56]	@ (8004fb4 <MX_GPIO_Init+0x9c>)
 8004f7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004f80:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f84:	603b      	str	r3, [r7, #0]
 8004f86:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin : CEC_CK_MCO1_Pin */
    GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8004f88:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8004f8c:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004f8e:	2302      	movs	r3, #2
 8004f90:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004f92:	2300      	movs	r3, #0
 8004f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8004f9a:	2300      	movs	r3, #0
 8004f9c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8004f9e:	f107 030c 	add.w	r3, r7, #12
 8004fa2:	4619      	mov	r1, r3
 8004fa4:	4804      	ldr	r0, [pc, #16]	@ (8004fb8 <MX_GPIO_Init+0xa0>)
 8004fa6:	f008 fc83 	bl	800d8b0 <HAL_GPIO_Init>

    /* USER CODE BEGIN MX_GPIO_Init_2 */

    /* USER CODE END MX_GPIO_Init_2 */
}
 8004faa:	bf00      	nop
 8004fac:	3720      	adds	r7, #32
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	bd80      	pop	{r7, pc}
 8004fb2:	bf00      	nop
 8004fb4:	58024400 	.word	0x58024400
 8004fb8:	58020000 	.word	0x58020000

08004fbc <BSP_SD_WriteCpltCallback>:
* @brief Tx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_WriteCpltCallback(uint32_t Instance)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b083      	sub	sp, #12
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  SD1WriteStatus = 1;
 8004fc4:	4b04      	ldr	r3, [pc, #16]	@ (8004fd8 <BSP_SD_WriteCpltCallback+0x1c>)
 8004fc6:	2201      	movs	r2, #1
 8004fc8:	601a      	str	r2, [r3, #0]
}
 8004fca:	bf00      	nop
 8004fcc:	370c      	adds	r7, #12
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd4:	4770      	bx	lr
 8004fd6:	bf00      	nop
 8004fd8:	240059a8 	.word	0x240059a8

08004fdc <BSP_SD_ReadCpltCallback>:
* @brief Rx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_ReadCpltCallback(uint32_t Instance)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
  SD1ReadStatus = 1;
 8004fe4:	4b04      	ldr	r3, [pc, #16]	@ (8004ff8 <BSP_SD_ReadCpltCallback+0x1c>)
 8004fe6:	2201      	movs	r2, #1
 8004fe8:	601a      	str	r2, [r3, #0]
}
 8004fea:	bf00      	nop
 8004fec:	370c      	adds	r7, #12
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff4:	4770      	bx	lr
 8004ff6:	bf00      	nop
 8004ff8:	240059ac 	.word	0x240059ac

08004ffc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004ffc:	b480      	push	{r7}
 8004ffe:	b083      	sub	sp, #12
 8005000:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005002:	4b0a      	ldr	r3, [pc, #40]	@ (800502c <HAL_MspInit+0x30>)
 8005004:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005008:	4a08      	ldr	r2, [pc, #32]	@ (800502c <HAL_MspInit+0x30>)
 800500a:	f043 0302 	orr.w	r3, r3, #2
 800500e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005012:	4b06      	ldr	r3, [pc, #24]	@ (800502c <HAL_MspInit+0x30>)
 8005014:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8005018:	f003 0302 	and.w	r3, r3, #2
 800501c:	607b      	str	r3, [r7, #4]
 800501e:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005020:	bf00      	nop
 8005022:	370c      	adds	r7, #12
 8005024:	46bd      	mov	sp, r7
 8005026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800502a:	4770      	bx	lr
 800502c:	58024400 	.word	0x58024400

08005030 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005030:	b580      	push	{r7, lr}
 8005032:	b0bc      	sub	sp, #240	@ 0xf0
 8005034:	af00      	add	r7, sp, #0
 8005036:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005038:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 800503c:	2200      	movs	r2, #0
 800503e:	601a      	str	r2, [r3, #0]
 8005040:	605a      	str	r2, [r3, #4]
 8005042:	609a      	str	r2, [r3, #8]
 8005044:	60da      	str	r2, [r3, #12]
 8005046:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8005048:	f107 0310 	add.w	r3, r7, #16
 800504c:	22c8      	movs	r2, #200	@ 0xc8
 800504e:	2100      	movs	r1, #0
 8005050:	4618      	mov	r0, r3
 8005052:	f017 ff1b 	bl	801ce8c <memset>
  if(huart->Instance==USART1)
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4a27      	ldr	r2, [pc, #156]	@ (80050f8 <HAL_UART_MspInit+0xc8>)
 800505c:	4293      	cmp	r3, r2
 800505e:	d146      	bne.n	80050ee <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8005060:	f04f 0201 	mov.w	r2, #1
 8005064:	f04f 0300 	mov.w	r3, #0
 8005068:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 800506c:	2300      	movs	r3, #0
 800506e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8005072:	f107 0310 	add.w	r3, r7, #16
 8005076:	4618      	mov	r0, r3
 8005078:	f00b fac8 	bl	801060c <HAL_RCCEx_PeriphCLKConfig>
 800507c:	4603      	mov	r3, r0
 800507e:	2b00      	cmp	r3, #0
 8005080:	d001      	beq.n	8005086 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8005082:	f7ff fe69 	bl	8004d58 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8005086:	4b1d      	ldr	r3, [pc, #116]	@ (80050fc <HAL_UART_MspInit+0xcc>)
 8005088:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800508c:	4a1b      	ldr	r2, [pc, #108]	@ (80050fc <HAL_UART_MspInit+0xcc>)
 800508e:	f043 0310 	orr.w	r3, r3, #16
 8005092:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8005096:	4b19      	ldr	r3, [pc, #100]	@ (80050fc <HAL_UART_MspInit+0xcc>)
 8005098:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800509c:	f003 0310 	and.w	r3, r3, #16
 80050a0:	60fb      	str	r3, [r7, #12]
 80050a2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80050a4:	4b15      	ldr	r3, [pc, #84]	@ (80050fc <HAL_UART_MspInit+0xcc>)
 80050a6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050aa:	4a14      	ldr	r2, [pc, #80]	@ (80050fc <HAL_UART_MspInit+0xcc>)
 80050ac:	f043 0301 	orr.w	r3, r3, #1
 80050b0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80050b4:	4b11      	ldr	r3, [pc, #68]	@ (80050fc <HAL_UART_MspInit+0xcc>)
 80050b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	60bb      	str	r3, [r7, #8]
 80050c0:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 80050c2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80050c6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80050ca:	2302      	movs	r3, #2
 80050cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80050d0:	2300      	movs	r3, #0
 80050d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80050d6:	2300      	movs	r3, #0
 80050d8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80050dc:	2307      	movs	r3, #7
 80050de:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80050e2:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 80050e6:	4619      	mov	r1, r3
 80050e8:	4805      	ldr	r0, [pc, #20]	@ (8005100 <HAL_UART_MspInit+0xd0>)
 80050ea:	f008 fbe1 	bl	800d8b0 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 80050ee:	bf00      	nop
 80050f0:	37f0      	adds	r7, #240	@ 0xf0
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}
 80050f6:	bf00      	nop
 80050f8:	40011000 	.word	0x40011000
 80050fc:	58024400 	.word	0x58024400
 8005100:	58020000 	.word	0x58020000

08005104 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005104:	b480      	push	{r7}
 8005106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8005108:	bf00      	nop
 800510a:	e7fd      	b.n	8005108 <NMI_Handler+0x4>

0800510c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800510c:	b480      	push	{r7}
 800510e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005110:	bf00      	nop
 8005112:	e7fd      	b.n	8005110 <HardFault_Handler+0x4>

08005114 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005114:	b480      	push	{r7}
 8005116:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005118:	bf00      	nop
 800511a:	e7fd      	b.n	8005118 <MemManage_Handler+0x4>

0800511c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800511c:	b480      	push	{r7}
 800511e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005120:	bf00      	nop
 8005122:	e7fd      	b.n	8005120 <BusFault_Handler+0x4>

08005124 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005124:	b480      	push	{r7}
 8005126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005128:	bf00      	nop
 800512a:	e7fd      	b.n	8005128 <UsageFault_Handler+0x4>

0800512c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800512c:	b480      	push	{r7}
 800512e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005130:	bf00      	nop
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr

0800513a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800513a:	b480      	push	{r7}
 800513c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800513e:	bf00      	nop
 8005140:	46bd      	mov	sp, r7
 8005142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005146:	4770      	bx	lr

08005148 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005148:	b480      	push	{r7}
 800514a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800514c:	bf00      	nop
 800514e:	46bd      	mov	sp, r7
 8005150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005154:	4770      	bx	lr

08005156 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005156:	b580      	push	{r7, lr}
 8005158:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800515a:	f003 ff91 	bl	8009080 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800515e:	bf00      	nop
 8005160:	bd80      	pop	{r7, pc}

08005162 <EXTI2_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI2_IRQHandler(void)
{
 8005162:	b580      	push	{r7, lr}
 8005164:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_SEL);
 8005166:	2101      	movs	r1, #1
 8005168:	2000      	movs	r0, #0
 800516a:	f000 fb01 	bl	8005770 <BSP_JOY_IRQHandler>
}
 800516e:	bf00      	nop
 8005170:	bd80      	pop	{r7, pc}

08005172 <EXTI3_IRQHandler>:
* @brief  This function handles External line 3 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 8005172:	b580      	push	{r7, lr}
 8005174:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_DOWN);
 8005176:	2102      	movs	r1, #2
 8005178:	2000      	movs	r0, #0
 800517a:	f000 faf9 	bl	8005770 <BSP_JOY_IRQHandler>
}
 800517e:	bf00      	nop
 8005180:	bd80      	pop	{r7, pc}

08005182 <EXTI4_IRQHandler>:
* @brief  This function handles External line 4 interrupt request.
* @param  None
* @retval None
*/
void EXTI4_IRQHandler(void)
{
 8005182:	b580      	push	{r7, lr}
 8005184:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_LEFT);
 8005186:	2104      	movs	r1, #4
 8005188:	2000      	movs	r0, #0
 800518a:	f000 faf1 	bl	8005770 <BSP_JOY_IRQHandler>
}
 800518e:	bf00      	nop
 8005190:	bd80      	pop	{r7, pc}

08005192 <EXTI9_5_IRQHandler>:
* @brief  This function handles External lines 9 to 5 interrupt request.
* @param  None
* @retval None
*/
void EXTI9_5_IRQHandler(void)
{
 8005192:	b580      	push	{r7, lr}
 8005194:	af00      	add	r7, sp, #0
  BSP_JOY_IRQHandler(JOY1, JOY_RIGHT);
 8005196:	2108      	movs	r1, #8
 8005198:	2000      	movs	r0, #0
 800519a:	f000 fae9 	bl	8005770 <BSP_JOY_IRQHandler>
  BSP_JOY_IRQHandler(JOY1, JOY_UP);
 800519e:	2110      	movs	r1, #16
 80051a0:	2000      	movs	r0, #0
 80051a2:	f000 fae5 	bl	8005770 <BSP_JOY_IRQHandler>
}
 80051a6:	bf00      	nop
 80051a8:	bd80      	pop	{r7, pc}

080051aa <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 80051aa:	b580      	push	{r7, lr}
 80051ac:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_WAKEUP);
 80051ae:	2000      	movs	r0, #0
 80051b0:	f000 f9d2 	bl	8005558 <BSP_PB_IRQHandler>
}
 80051b4:	bf00      	nop
 80051b6:	bd80      	pop	{r7, pc}

080051b8 <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler()
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0,AUDIO_IN_DEVICE_DIGITAL_MIC);
 80051bc:	2110      	movs	r1, #16
 80051be:	2000      	movs	r0, #0
 80051c0:	f001 fb22 	bl	8006808 <BSP_AUDIO_IN_IRQHandler>
}
 80051c4:	bf00      	nop
 80051c6:	bd80      	pop	{r7, pc}

080051c8 <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 80051cc:	2000      	movs	r0, #0
 80051ce:	f000 fe63 	bl	8005e98 <BSP_AUDIO_OUT_IRQHandler>
}
 80051d2:	bf00      	nop
 80051d4:	bd80      	pop	{r7, pc}

080051d6 <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 80051d6:	b580      	push	{r7, lr}
 80051d8:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 80051da:	2110      	movs	r1, #16
 80051dc:	2001      	movs	r0, #1
 80051de:	f001 fb13 	bl	8006808 <BSP_AUDIO_IN_IRQHandler>
}
 80051e2:	bf00      	nop
 80051e4:	bd80      	pop	{r7, pc}

080051e6 <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 80051e6:	b580      	push	{r7, lr}
 80051e8:	af00      	add	r7, sp, #0
    BSP_SDRAM_IRQHandler(0);
 80051ea:	2000      	movs	r0, #0
 80051ec:	f003 fde0 	bl	8008db0 <BSP_SDRAM_IRQHandler>
}
 80051f0:	bf00      	nop
 80051f2:	bd80      	pop	{r7, pc}

080051f4 <SDMMC1_IRQHandler>:
  * @brief  This function handles SD interrupt request.
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler(0);
 80051f8:	2000      	movs	r0, #0
 80051fa:	f003 fd33 	bl	8008c64 <BSP_SD_IRQHandler>
}
 80051fe:	bf00      	nop
 8005200:	bd80      	pop	{r7, pc}

08005202 <DCMI_IRQHandler>:
  * @brief  DCMI interrupt handler.
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
 8005202:	b580      	push	{r7, lr}
 8005204:	af00      	add	r7, sp, #0
   BSP_CAMERA_IRQHandler(0);
 8005206:	2000      	movs	r0, #0
 8005208:	f002 fb3e 	bl	8007888 <BSP_CAMERA_IRQHandler>
}
 800520c:	bf00      	nop
 800520e:	bd80      	pop	{r7, pc}

08005210 <DMA2_Stream3_IRQHandler>:
  * @brief  DMA interrupt handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
 8005210:	b580      	push	{r7, lr}
 8005212:	af00      	add	r7, sp, #0
  BSP_CAMERA_DMA_IRQHandler(0);
 8005214:	2000      	movs	r0, #0
 8005216:	f002 fb45 	bl	80078a4 <BSP_CAMERA_DMA_IRQHandler>
}
 800521a:	bf00      	nop
 800521c:	bd80      	pop	{r7, pc}

0800521e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800521e:	b580      	push	{r7, lr}
 8005220:	b086      	sub	sp, #24
 8005222:	af00      	add	r7, sp, #0
 8005224:	60f8      	str	r0, [r7, #12]
 8005226:	60b9      	str	r1, [r7, #8]
 8005228:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800522a:	2300      	movs	r3, #0
 800522c:	617b      	str	r3, [r7, #20]
 800522e:	e00a      	b.n	8005246 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8005230:	f3af 8000 	nop.w
 8005234:	4601      	mov	r1, r0
 8005236:	68bb      	ldr	r3, [r7, #8]
 8005238:	1c5a      	adds	r2, r3, #1
 800523a:	60ba      	str	r2, [r7, #8]
 800523c:	b2ca      	uxtb	r2, r1
 800523e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	3301      	adds	r3, #1
 8005244:	617b      	str	r3, [r7, #20]
 8005246:	697a      	ldr	r2, [r7, #20]
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	429a      	cmp	r2, r3
 800524c:	dbf0      	blt.n	8005230 <_read+0x12>
  }

  return len;
 800524e:	687b      	ldr	r3, [r7, #4]
}
 8005250:	4618      	mov	r0, r3
 8005252:	3718      	adds	r7, #24
 8005254:	46bd      	mov	sp, r7
 8005256:	bd80      	pop	{r7, pc}

08005258 <_close>:


int _close(int file)
{
 8005258:	b480      	push	{r7}
 800525a:	b083      	sub	sp, #12
 800525c:	af00      	add	r7, sp, #0
 800525e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8005260:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005264:	4618      	mov	r0, r3
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800527a:	683b      	ldr	r3, [r7, #0]
 800527c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005280:	605a      	str	r2, [r3, #4]
  return 0;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	370c      	adds	r7, #12
 8005288:	46bd      	mov	sp, r7
 800528a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800528e:	4770      	bx	lr

08005290 <_isatty>:

int _isatty(int file)
{
 8005290:	b480      	push	{r7}
 8005292:	b083      	sub	sp, #12
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8005298:	2301      	movs	r3, #1
}
 800529a:	4618      	mov	r0, r3
 800529c:	370c      	adds	r7, #12
 800529e:	46bd      	mov	sp, r7
 80052a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a4:	4770      	bx	lr

080052a6 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80052a6:	b480      	push	{r7}
 80052a8:	b085      	sub	sp, #20
 80052aa:	af00      	add	r7, sp, #0
 80052ac:	60f8      	str	r0, [r7, #12]
 80052ae:	60b9      	str	r1, [r7, #8]
 80052b0:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80052b2:	2300      	movs	r3, #0
}
 80052b4:	4618      	mov	r0, r3
 80052b6:	3714      	adds	r7, #20
 80052b8:	46bd      	mov	sp, r7
 80052ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052be:	4770      	bx	lr

080052c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80052c0:	b580      	push	{r7, lr}
 80052c2:	b086      	sub	sp, #24
 80052c4:	af00      	add	r7, sp, #0
 80052c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80052c8:	4a14      	ldr	r2, [pc, #80]	@ (800531c <_sbrk+0x5c>)
 80052ca:	4b15      	ldr	r3, [pc, #84]	@ (8005320 <_sbrk+0x60>)
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80052d0:	697b      	ldr	r3, [r7, #20]
 80052d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80052d4:	4b13      	ldr	r3, [pc, #76]	@ (8005324 <_sbrk+0x64>)
 80052d6:	681b      	ldr	r3, [r3, #0]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d102      	bne.n	80052e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80052dc:	4b11      	ldr	r3, [pc, #68]	@ (8005324 <_sbrk+0x64>)
 80052de:	4a12      	ldr	r2, [pc, #72]	@ (8005328 <_sbrk+0x68>)
 80052e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80052e2:	4b10      	ldr	r3, [pc, #64]	@ (8005324 <_sbrk+0x64>)
 80052e4:	681a      	ldr	r2, [r3, #0]
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	4413      	add	r3, r2
 80052ea:	693a      	ldr	r2, [r7, #16]
 80052ec:	429a      	cmp	r2, r3
 80052ee:	d207      	bcs.n	8005300 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80052f0:	f017 fde4 	bl	801cebc <__errno>
 80052f4:	4603      	mov	r3, r0
 80052f6:	220c      	movs	r2, #12
 80052f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80052fa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80052fe:	e009      	b.n	8005314 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8005300:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <_sbrk+0x64>)
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8005306:	4b07      	ldr	r3, [pc, #28]	@ (8005324 <_sbrk+0x64>)
 8005308:	681a      	ldr	r2, [r3, #0]
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	4413      	add	r3, r2
 800530e:	4a05      	ldr	r2, [pc, #20]	@ (8005324 <_sbrk+0x64>)
 8005310:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8005312:	68fb      	ldr	r3, [r7, #12]
}
 8005314:	4618      	mov	r0, r3
 8005316:	3718      	adds	r7, #24
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}
 800531c:	24080000 	.word	0x24080000
 8005320:	00001000 	.word	0x00001000
 8005324:	240059b0 	.word	0x240059b0
 8005328:	240370a8 	.word	0x240370a8

0800532c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800532c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8005368 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8005330:	f7fb fa52 	bl	80007d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8005334:	f7fb f9ba 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8005338:	480c      	ldr	r0, [pc, #48]	@ (800536c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800533a:	490d      	ldr	r1, [pc, #52]	@ (8005370 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800533c:	4a0d      	ldr	r2, [pc, #52]	@ (8005374 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800533e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8005340:	e002      	b.n	8005348 <LoopCopyDataInit>

08005342 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8005342:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8005344:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8005346:	3304      	adds	r3, #4

08005348 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8005348:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800534a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800534c:	d3f9      	bcc.n	8005342 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800534e:	4a0a      	ldr	r2, [pc, #40]	@ (8005378 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8005350:	4c0a      	ldr	r4, [pc, #40]	@ (800537c <LoopFillZerobss+0x22>)
  movs r3, #0
 8005352:	2300      	movs	r3, #0
  b LoopFillZerobss
 8005354:	e001      	b.n	800535a <LoopFillZerobss>

08005356 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8005356:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8005358:	3204      	adds	r2, #4

0800535a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800535a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800535c:	d3fb      	bcc.n	8005356 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800535e:	f017 fdb3 	bl	801cec8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8005362:	f7ff fad3 	bl	800490c <main>
  bx  lr
 8005366:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8005368:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800536c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8005370:	240010d8 	.word	0x240010d8
  ldr r2, =_sidata
 8005374:	080299b8 	.word	0x080299b8
  ldr r2, =_sbss
 8005378:	240010e0 	.word	0x240010e0
  ldr r4, =_ebss
 800537c:	240370a8 	.word	0x240370a8

08005380 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8005380:	e7fe      	b.n	8005380 <ADC3_IRQHandler>
	...

08005384 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b08a      	sub	sp, #40	@ 0x28
 8005388:	af00      	add	r7, sp, #0
 800538a:	4603      	mov	r3, r0
 800538c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800538e:	2300      	movs	r3, #0
 8005390:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 8005392:	4b1b      	ldr	r3, [pc, #108]	@ (8005400 <BSP_LED_Init+0x7c>)
 8005394:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005398:	4a19      	ldr	r2, [pc, #100]	@ (8005400 <BSP_LED_Init+0x7c>)
 800539a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800539e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80053a2:	4b17      	ldr	r3, [pc, #92]	@ (8005400 <BSP_LED_Init+0x7c>)
 80053a4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80053a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053ac:	60fb      	str	r3, [r7, #12]
 80053ae:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 80053b0:	79fb      	ldrb	r3, [r7, #7]
 80053b2:	4a14      	ldr	r2, [pc, #80]	@ (8005404 <BSP_LED_Init+0x80>)
 80053b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053b8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80053ba:	2301      	movs	r3, #1
 80053bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80053be:	2301      	movs	r3, #1
 80053c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80053c2:	2303      	movs	r3, #3
 80053c4:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 80053c6:	79fb      	ldrb	r3, [r7, #7]
 80053c8:	4a0f      	ldr	r2, [pc, #60]	@ (8005408 <BSP_LED_Init+0x84>)
 80053ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ce:	f107 0210 	add.w	r2, r7, #16
 80053d2:	4611      	mov	r1, r2
 80053d4:	4618      	mov	r0, r3
 80053d6:	f008 fa6b 	bl	800d8b0 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 80053da:	79fb      	ldrb	r3, [r7, #7]
 80053dc:	4a0a      	ldr	r2, [pc, #40]	@ (8005408 <BSP_LED_Init+0x84>)
 80053de:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 80053e2:	79fb      	ldrb	r3, [r7, #7]
 80053e4:	4a07      	ldr	r2, [pc, #28]	@ (8005404 <BSP_LED_Init+0x80>)
 80053e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2201      	movs	r2, #1
 80053ee:	4619      	mov	r1, r3
 80053f0:	f008 fd30 	bl	800de54 <HAL_GPIO_WritePin>
 return ret;
 80053f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80053f6:	4618      	mov	r0, r3
 80053f8:	3728      	adds	r7, #40	@ 0x28
 80053fa:	46bd      	mov	sp, r7
 80053fc:	bd80      	pop	{r7, pc}
 80053fe:	bf00      	nop
 8005400:	58024400 	.word	0x58024400
 8005404:	08020b70 	.word	0x08020b70
 8005408:	24000578 	.word	0x24000578

0800540c <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 800540c:	b580      	push	{r7, lr}
 800540e:	b084      	sub	sp, #16
 8005410:	af00      	add	r7, sp, #0
 8005412:	4603      	mov	r3, r0
 8005414:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8005416:	2300      	movs	r3, #0
 8005418:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800541a:	79fb      	ldrb	r3, [r7, #7]
 800541c:	4a08      	ldr	r2, [pc, #32]	@ (8005440 <BSP_LED_On+0x34>)
 800541e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005422:	79fb      	ldrb	r3, [r7, #7]
 8005424:	4a07      	ldr	r2, [pc, #28]	@ (8005444 <BSP_LED_On+0x38>)
 8005426:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800542a:	b29b      	uxth	r3, r3
 800542c:	2200      	movs	r2, #0
 800542e:	4619      	mov	r1, r3
 8005430:	f008 fd10 	bl	800de54 <HAL_GPIO_WritePin>
  return ret;
 8005434:	68fb      	ldr	r3, [r7, #12]
}
 8005436:	4618      	mov	r0, r3
 8005438:	3710      	adds	r7, #16
 800543a:	46bd      	mov	sp, r7
 800543c:	bd80      	pop	{r7, pc}
 800543e:	bf00      	nop
 8005440:	24000578 	.word	0x24000578
 8005444:	08020b70 	.word	0x08020b70

08005448 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t  BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af00      	add	r7, sp, #0
 800544e:	4603      	mov	r3, r0
 8005450:	460a      	mov	r2, r1
 8005452:	71fb      	strb	r3, [r7, #7]
 8005454:	4613      	mov	r3, r2
 8005456:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 8005458:	4b2e      	ldr	r3, [pc, #184]	@ (8005514 <BSP_PB_Init+0xcc>)
 800545a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800545e:	4a2d      	ldr	r2, [pc, #180]	@ (8005514 <BSP_PB_Init+0xcc>)
 8005460:	f043 0304 	orr.w	r3, r3, #4
 8005464:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005468:	4b2a      	ldr	r3, [pc, #168]	@ (8005514 <BSP_PB_Init+0xcc>)
 800546a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800546e:	f003 0304 	and.w	r3, r3, #4
 8005472:	60bb      	str	r3, [r7, #8]
 8005474:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 8005476:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800547a:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800547c:	2300      	movs	r3, #0
 800547e:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8005480:	2302      	movs	r3, #2
 8005482:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 8005484:	79bb      	ldrb	r3, [r7, #6]
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10c      	bne.n	80054a4 <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800548a:	2300      	movs	r3, #0
 800548c:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800548e:	79fb      	ldrb	r3, [r7, #7]
 8005490:	4a21      	ldr	r2, [pc, #132]	@ (8005518 <BSP_PB_Init+0xd0>)
 8005492:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005496:	f107 020c 	add.w	r2, r7, #12
 800549a:	4611      	mov	r1, r2
 800549c:	4618      	mov	r0, r3
 800549e:	f008 fa07 	bl	800d8b0 <HAL_GPIO_Init>
 80054a2:	e031      	b.n	8005508 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 80054a4:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 80054a8:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 80054aa:	79fb      	ldrb	r3, [r7, #7]
 80054ac:	4a1a      	ldr	r2, [pc, #104]	@ (8005518 <BSP_PB_Init+0xd0>)
 80054ae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054b2:	f107 020c 	add.w	r2, r7, #12
 80054b6:	4611      	mov	r1, r2
 80054b8:	4618      	mov	r0, r3
 80054ba:	f008 f9f9 	bl	800d8b0 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 80054be:	79fb      	ldrb	r3, [r7, #7]
 80054c0:	00db      	lsls	r3, r3, #3
 80054c2:	4a16      	ldr	r2, [pc, #88]	@ (800551c <BSP_PB_Init+0xd4>)
 80054c4:	441a      	add	r2, r3
 80054c6:	79fb      	ldrb	r3, [r7, #7]
 80054c8:	4915      	ldr	r1, [pc, #84]	@ (8005520 <BSP_PB_Init+0xd8>)
 80054ca:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80054ce:	4619      	mov	r1, r3
 80054d0:	4610      	mov	r0, r2
 80054d2:	f008 f99c 	bl	800d80e <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 80054d6:	79fb      	ldrb	r3, [r7, #7]
 80054d8:	00db      	lsls	r3, r3, #3
 80054da:	4a10      	ldr	r2, [pc, #64]	@ (800551c <BSP_PB_Init+0xd4>)
 80054dc:	1898      	adds	r0, r3, r2
 80054de:	79fb      	ldrb	r3, [r7, #7]
 80054e0:	4a10      	ldr	r2, [pc, #64]	@ (8005524 <BSP_PB_Init+0xdc>)
 80054e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054e6:	461a      	mov	r2, r3
 80054e8:	2100      	movs	r1, #0
 80054ea:	f008 f971 	bl	800d7d0 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 80054ee:	2028      	movs	r0, #40	@ 0x28
 80054f0:	79fb      	ldrb	r3, [r7, #7]
 80054f2:	4a0d      	ldr	r2, [pc, #52]	@ (8005528 <BSP_PB_Init+0xe0>)
 80054f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80054f8:	2200      	movs	r2, #0
 80054fa:	4619      	mov	r1, r3
 80054fc:	f003 fefc 	bl	80092f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 8005500:	2328      	movs	r3, #40	@ 0x28
 8005502:	4618      	mov	r0, r3
 8005504:	f003 ff12 	bl	800932c <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 8005508:	2300      	movs	r3, #0
}
 800550a:	4618      	mov	r0, r3
 800550c:	3720      	adds	r7, #32
 800550e:	46bd      	mov	sp, r7
 8005510:	bd80      	pop	{r7, pc}
 8005512:	bf00      	nop
 8005514:	58024400 	.word	0x58024400
 8005518:	24000588 	.word	0x24000588
 800551c:	240059b4 	.word	0x240059b4
 8005520:	08020b98 	.word	0x08020b98
 8005524:	240005a0 	.word	0x240005a0
 8005528:	240005a4 	.word	0x240005a4

0800552c <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
 800552c:	b580      	push	{r7, lr}
 800552e:	b082      	sub	sp, #8
 8005530:	af00      	add	r7, sp, #0
 8005532:	4603      	mov	r3, r0
 8005534:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 8005536:	79fb      	ldrb	r3, [r7, #7]
 8005538:	4a06      	ldr	r2, [pc, #24]	@ (8005554 <BSP_PB_GetState+0x28>)
 800553a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800553e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8005542:	4611      	mov	r1, r2
 8005544:	4618      	mov	r0, r3
 8005546:	f008 fc6d 	bl	800de24 <HAL_GPIO_ReadPin>
 800554a:	4603      	mov	r3, r0
}
 800554c:	4618      	mov	r0, r3
 800554e:	3708      	adds	r7, #8
 8005550:	46bd      	mov	sp, r7
 8005552:	bd80      	pop	{r7, pc}
 8005554:	24000588 	.word	0x24000588

08005558 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 8005558:	b580      	push	{r7, lr}
 800555a:	b082      	sub	sp, #8
 800555c:	af00      	add	r7, sp, #0
 800555e:	4603      	mov	r3, r0
 8005560:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 8005562:	79fb      	ldrb	r3, [r7, #7]
 8005564:	00db      	lsls	r3, r3, #3
 8005566:	4a04      	ldr	r2, [pc, #16]	@ (8005578 <BSP_PB_IRQHandler+0x20>)
 8005568:	4413      	add	r3, r2
 800556a:	4618      	mov	r0, r3
 800556c:	f008 f964 	bl	800d838 <HAL_EXTI_IRQHandler>
}
 8005570:	bf00      	nop
 8005572:	3708      	adds	r7, #8
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	240059b4 	.word	0x240059b4

0800557c <BUTTON_WAKEUP_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_WAKEUP_EXTI_Callback(void)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_WAKEUP);
 8005580:	2000      	movs	r0, #0
 8005582:	f7ff fbd5 	bl	8004d30 <BSP_PB_Callback>
}
 8005586:	bf00      	nop
 8005588:	bd80      	pop	{r7, pc}
	...

0800558c <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b090      	sub	sp, #64	@ 0x40
 8005590:	af00      	add	r7, sp, #0
 8005592:	4603      	mov	r3, r0
 8005594:	71fb      	strb	r3, [r7, #7]
 8005596:	460b      	mov	r3, r1
 8005598:	71bb      	strb	r3, [r7, #6]
 800559a:	4613      	mov	r3, r2
 800559c:	717b      	strb	r3, [r7, #5]
  int32_t ret = BSP_ERROR_NONE;
 800559e:	2300      	movs	r3, #0
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 80055a2:	797a      	ldrb	r2, [r7, #5]
 80055a4:	4b69      	ldr	r3, [pc, #420]	@ (800574c <BSP_JOY_Init+0x1c0>)
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	4313      	orrs	r3, r2
 80055aa:	4a68      	ldr	r2, [pc, #416]	@ (800574c <BSP_JOY_Init+0x1c0>)
 80055ac:	6013      	str	r3, [r2, #0]

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 80055ae:	2300      	movs	r3, #0
 80055b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80055b2:	e0c1      	b.n	8005738 <BSP_JOY_Init+0x1ac>
  {
    key_pressed = 1UL << joykey;
 80055b4:	2201      	movs	r2, #1
 80055b6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80055b8:	fa02 f303 	lsl.w	r3, r2, r3
 80055bc:	637b      	str	r3, [r7, #52]	@ 0x34
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 80055be:	797a      	ldrb	r2, [r7, #5]
 80055c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055c2:	4013      	ands	r3, r2
 80055c4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80055c6:	429a      	cmp	r2, r3
 80055c8:	f040 80b3 	bne.w	8005732 <BSP_JOY_Init+0x1a6>
    {
      if(JOY == JOY1)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	f040 80af 	bne.w	8005732 <BSP_JOY_Init+0x1a6>
      {
      /* Enable the JOY clock */
        if(key_pressed == (uint32_t)JOY_SEL)
 80055d4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055d6:	2b01      	cmp	r3, #1
 80055d8:	d10f      	bne.n	80055fa <BSP_JOY_Init+0x6e>
        {
          JOY1_SEL_GPIO_CLK_ENABLE();
 80055da:	4b5d      	ldr	r3, [pc, #372]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 80055dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055e0:	4a5b      	ldr	r2, [pc, #364]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 80055e2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80055e6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80055ea:	4b59      	ldr	r3, [pc, #356]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 80055ec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80055f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055f4:	61fb      	str	r3, [r7, #28]
 80055f6:	69fb      	ldr	r3, [r7, #28]
 80055f8:	e04a      	b.n	8005690 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t)JOY_DOWN)
 80055fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80055fc:	2b02      	cmp	r3, #2
 80055fe:	d10f      	bne.n	8005620 <BSP_JOY_Init+0x94>
        {
          JOY1_DOWN_GPIO_CLK_ENABLE();
 8005600:	4b53      	ldr	r3, [pc, #332]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005606:	4a52      	ldr	r2, [pc, #328]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005608:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800560c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005610:	4b4f      	ldr	r3, [pc, #316]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005612:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005616:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800561a:	61bb      	str	r3, [r7, #24]
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	e037      	b.n	8005690 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_LEFT)
 8005620:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005622:	2b04      	cmp	r3, #4
 8005624:	d10f      	bne.n	8005646 <BSP_JOY_Init+0xba>
        {
          JOY1_LEFT_GPIO_CLK_ENABLE();
 8005626:	4b4a      	ldr	r3, [pc, #296]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005628:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800562c:	4a48      	ldr	r2, [pc, #288]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 800562e:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005632:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005636:	4b46      	ldr	r3, [pc, #280]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005638:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800563c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005640:	617b      	str	r3, [r7, #20]
 8005642:	697b      	ldr	r3, [r7, #20]
 8005644:	e024      	b.n	8005690 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 8005646:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005648:	2b08      	cmp	r3, #8
 800564a:	d10f      	bne.n	800566c <BSP_JOY_Init+0xe0>
        {
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 800564c:	4b40      	ldr	r3, [pc, #256]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 800564e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005652:	4a3f      	ldr	r2, [pc, #252]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005654:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005658:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800565c:	4b3c      	ldr	r3, [pc, #240]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 800565e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005662:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005666:	613b      	str	r3, [r7, #16]
 8005668:	693b      	ldr	r3, [r7, #16]
 800566a:	e011      	b.n	8005690 <BSP_JOY_Init+0x104>
        }
        else
        {
          if(key_pressed == (uint32_t) JOY_UP)
 800566c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800566e:	2b10      	cmp	r3, #16
 8005670:	d10e      	bne.n	8005690 <BSP_JOY_Init+0x104>
          {
            JOY1_UP_GPIO_CLK_ENABLE();
 8005672:	4b37      	ldr	r3, [pc, #220]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005674:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005678:	4a35      	ldr	r2, [pc, #212]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 800567a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800567e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005682:	4b33      	ldr	r3, [pc, #204]	@ (8005750 <BSP_JOY_Init+0x1c4>)
 8005684:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005688:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800568c:	60fb      	str	r3, [r7, #12]
 800568e:	68fb      	ldr	r3, [r7, #12]
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 8005690:	4a30      	ldr	r2, [pc, #192]	@ (8005754 <BSP_JOY_Init+0x1c8>)
 8005692:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005694:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8005698:	623b      	str	r3, [r7, #32]
        gpio_init_structure.Pull = GPIO_PULLUP;
 800569a:	2301      	movs	r3, #1
 800569c:	62bb      	str	r3, [r7, #40]	@ 0x28
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800569e:	2303      	movs	r3, #3
 80056a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (JoyMode == JOY_MODE_GPIO)
 80056a2:	79bb      	ldrb	r3, [r7, #6]
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10c      	bne.n	80056c2 <BSP_JOY_Init+0x136>
        {
          /* Configure Joy pin as input */
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 80056a8:	2300      	movs	r3, #0
 80056aa:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80056ac:	4a2a      	ldr	r2, [pc, #168]	@ (8005758 <BSP_JOY_Init+0x1cc>)
 80056ae:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056b0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056b4:	f107 0220 	add.w	r2, r7, #32
 80056b8:	4611      	mov	r1, r2
 80056ba:	4618      	mov	r0, r3
 80056bc:	f008 f8f8 	bl	800d8b0 <HAL_GPIO_Init>
 80056c0:	e037      	b.n	8005732 <BSP_JOY_Init+0x1a6>
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 80056c2:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 80056c6:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 80056c8:	4a23      	ldr	r2, [pc, #140]	@ (8005758 <BSP_JOY_Init+0x1cc>)
 80056ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056cc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80056d0:	f107 0220 	add.w	r2, r7, #32
 80056d4:	4611      	mov	r1, r2
 80056d6:	4618      	mov	r0, r3
 80056d8:	f008 f8ea 	bl	800d8b0 <HAL_GPIO_Init>

         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 80056dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056de:	00db      	lsls	r3, r3, #3
 80056e0:	4a1e      	ldr	r2, [pc, #120]	@ (800575c <BSP_JOY_Init+0x1d0>)
 80056e2:	441a      	add	r2, r3
 80056e4:	491e      	ldr	r1, [pc, #120]	@ (8005760 <BSP_JOY_Init+0x1d4>)
 80056e6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056e8:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80056ec:	4619      	mov	r1, r3
 80056ee:	4610      	mov	r0, r2
 80056f0:	f008 f88d 	bl	800d80e <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 80056f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	4a18      	ldr	r2, [pc, #96]	@ (800575c <BSP_JOY_Init+0x1d0>)
 80056fa:	1898      	adds	r0, r3, r2
 80056fc:	4a19      	ldr	r2, [pc, #100]	@ (8005764 <BSP_JOY_Init+0x1d8>)
 80056fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005700:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005704:	461a      	mov	r2, r3
 8005706:	2100      	movs	r1, #0
 8005708:	f008 f862 	bl	800d7d0 <HAL_EXTI_RegisterCallback>

          /* Enable and set Joy EXTI Interrupt to the lowest priority */
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 800570c:	4a16      	ldr	r2, [pc, #88]	@ (8005768 <BSP_JOY_Init+0x1dc>)
 800570e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005710:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 8005714:	4a15      	ldr	r2, [pc, #84]	@ (800576c <BSP_JOY_Init+0x1e0>)
 8005716:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005718:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800571c:	2200      	movs	r2, #0
 800571e:	4619      	mov	r1, r3
 8005720:	f003 fdea 	bl	80092f8 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 8005724:	4a10      	ldr	r2, [pc, #64]	@ (8005768 <BSP_JOY_Init+0x1dc>)
 8005726:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005728:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800572c:	4618      	mov	r0, r3
 800572e:	f003 fdfd 	bl	800932c <HAL_NVIC_EnableIRQ>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 8005732:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005734:	3301      	adds	r3, #1
 8005736:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005738:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800573a:	2b04      	cmp	r3, #4
 800573c:	f67f af3a 	bls.w	80055b4 <BSP_JOY_Init+0x28>
        }
      }
    }
  }

  return ret;
 8005740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8005742:	4618      	mov	r0, r3
 8005744:	3740      	adds	r7, #64	@ 0x40
 8005746:	46bd      	mov	sp, r7
 8005748:	bd80      	pop	{r7, pc}
 800574a:	bf00      	nop
 800574c:	240059bc 	.word	0x240059bc
 8005750:	58024400 	.word	0x58024400
 8005754:	08020b80 	.word	0x08020b80
 8005758:	2400058c 	.word	0x2400058c
 800575c:	240059c0 	.word	0x240059c0
 8005760:	08020b9c 	.word	0x08020b9c
 8005764:	240005a8 	.word	0x240005a8
 8005768:	08020b8c 	.word	0x08020b8c
 800576c:	240005bc 	.word	0x240005bc

08005770 <BSP_JOY_IRQHandler>:
  * @param  JOY Joystick instance
  * @param  JoyPin Specifies the pin connected EXTI handler
  * @retval None
  */
void BSP_JOY_IRQHandler(JOY_TypeDef JOY, JOYPin_TypeDef JoyPin)
{
 8005770:	b580      	push	{r7, lr}
 8005772:	b086      	sub	sp, #24
 8005774:	af00      	add	r7, sp, #0
 8005776:	4603      	mov	r3, r0
 8005778:	460a      	mov	r2, r1
 800577a:	71fb      	strb	r3, [r7, #7]
 800577c:	4613      	mov	r3, r2
 800577e:	71bb      	strb	r3, [r7, #6]
  if(JOY == JOY1)
 8005780:	79fb      	ldrb	r3, [r7, #7]
 8005782:	2b00      	cmp	r3, #0
 8005784:	d116      	bne.n	80057b4 <BSP_JOY_IRQHandler+0x44>
  {
    HAL_EXTI_IRQHandler(&hjoy_exti[POSITION_VAL(JoyPin)]);
 8005786:	79bb      	ldrb	r3, [r7, #6]
 8005788:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800578a:	693b      	ldr	r3, [r7, #16]
 800578c:	fa93 f3a3 	rbit	r3, r3
 8005790:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8005796:	697b      	ldr	r3, [r7, #20]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d101      	bne.n	80057a0 <BSP_JOY_IRQHandler+0x30>
  {
    return 32U;
 800579c:	2320      	movs	r3, #32
 800579e:	e003      	b.n	80057a8 <BSP_JOY_IRQHandler+0x38>
  }
  return __builtin_clz(value);
 80057a0:	697b      	ldr	r3, [r7, #20]
 80057a2:	fab3 f383 	clz	r3, r3
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	00db      	lsls	r3, r3, #3
 80057aa:	4a04      	ldr	r2, [pc, #16]	@ (80057bc <BSP_JOY_IRQHandler+0x4c>)
 80057ac:	4413      	add	r3, r2
 80057ae:	4618      	mov	r0, r3
 80057b0:	f008 f842 	bl	800d838 <HAL_EXTI_IRQHandler>
  }
}
 80057b4:	bf00      	nop
 80057b6:	3718      	adds	r7, #24
 80057b8:	46bd      	mov	sp, r7
 80057ba:	bd80      	pop	{r7, pc}
 80057bc:	240059c0 	.word	0x240059c0

080057c0 <JOY1_UP_EXTI_Callback>:
/**
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
 80057c0:	b580      	push	{r7, lr}
 80057c2:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_UP);
 80057c4:	2110      	movs	r1, #16
 80057c6:	2000      	movs	r0, #0
 80057c8:	f7ff f88e 	bl	80048e8 <BSP_JOY_Callback>
}
 80057cc:	bf00      	nop
 80057ce:	bd80      	pop	{r7, pc}

080057d0 <JOY1_DOWN_EXTI_Callback>:
/**
  * @brief  JOY1 DOWN EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_DOWN_EXTI_Callback(void)
{
 80057d0:	b580      	push	{r7, lr}
 80057d2:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 80057d4:	2102      	movs	r1, #2
 80057d6:	2000      	movs	r0, #0
 80057d8:	f7ff f886 	bl	80048e8 <BSP_JOY_Callback>
}
 80057dc:	bf00      	nop
 80057de:	bd80      	pop	{r7, pc}

080057e0 <JOY1_SEL_EXTI_Callback>:
/**
  * @brief  JOY1 SEL EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_SEL_EXTI_Callback(void)
{
 80057e0:	b580      	push	{r7, lr}
 80057e2:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_SEL);
 80057e4:	2101      	movs	r1, #1
 80057e6:	2000      	movs	r0, #0
 80057e8:	f7ff f87e 	bl	80048e8 <BSP_JOY_Callback>
}
 80057ec:	bf00      	nop
 80057ee:	bd80      	pop	{r7, pc}

080057f0 <JOY1_LEFT_EXTI_Callback>:
/**
  * @brief  JOY1 LEFT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_LEFT_EXTI_Callback(void)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 80057f4:	2104      	movs	r1, #4
 80057f6:	2000      	movs	r0, #0
 80057f8:	f7ff f876 	bl	80048e8 <BSP_JOY_Callback>
}
 80057fc:	bf00      	nop
 80057fe:	bd80      	pop	{r7, pc}

08005800 <JOY1_RIGHT_EXTI_Callback>:
/**
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 8005804:	2108      	movs	r1, #8
 8005806:	2000      	movs	r0, #0
 8005808:	f7ff f86e 	bl	80048e8 <BSP_JOY_Callback>
}
 800580c:	bf00      	nop
 800580e:	bd80      	pop	{r7, pc}

08005810 <BSP_AUDIO_OUT_Init>:
  * @param  Instance  : AUDIO_OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit : AUDIO_OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b094      	sub	sp, #80	@ 0x50
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
 8005818:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800581a:	2300      	movs	r3, #0
 800581c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b01      	cmp	r3, #1
 8005822:	d903      	bls.n	800582c <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005824:	f06f 0301 	mvn.w	r3, #1
 8005828:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800582a:	e0da      	b.n	80059e2 <BSP_AUDIO_OUT_Init+0x1d2>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800582c:	683b      	ldr	r3, [r7, #0]
 800582e:	6819      	ldr	r1, [r3, #0]
 8005830:	486e      	ldr	r0, [pc, #440]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	4613      	mov	r3, r2
 8005836:	00db      	lsls	r3, r3, #3
 8005838:	4413      	add	r3, r2
 800583a:	009b      	lsls	r3, r3, #2
 800583c:	4403      	add	r3, r0
 800583e:	3304      	adds	r3, #4
 8005840:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 8005842:	496a      	ldr	r1, [pc, #424]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 8005844:	687a      	ldr	r2, [r7, #4]
 8005846:	4613      	mov	r3, r2
 8005848:	00db      	lsls	r3, r3, #3
 800584a:	4413      	add	r3, r2
 800584c:	009b      	lsls	r3, r3, #2
 800584e:	440b      	add	r3, r1
 8005850:	687a      	ldr	r2, [r7, #4]
 8005852:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8005854:	683b      	ldr	r3, [r7, #0]
 8005856:	6859      	ldr	r1, [r3, #4]
 8005858:	4864      	ldr	r0, [pc, #400]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 800585a:	687a      	ldr	r2, [r7, #4]
 800585c:	4613      	mov	r3, r2
 800585e:	00db      	lsls	r3, r3, #3
 8005860:	4413      	add	r3, r2
 8005862:	009b      	lsls	r3, r3, #2
 8005864:	4403      	add	r3, r0
 8005866:	3308      	adds	r3, #8
 8005868:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800586a:	683b      	ldr	r3, [r7, #0]
 800586c:	6899      	ldr	r1, [r3, #8]
 800586e:	485f      	ldr	r0, [pc, #380]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	4613      	mov	r3, r2
 8005874:	00db      	lsls	r3, r3, #3
 8005876:	4413      	add	r3, r2
 8005878:	009b      	lsls	r3, r3, #2
 800587a:	4403      	add	r3, r0
 800587c:	330c      	adds	r3, #12
 800587e:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8005880:	683b      	ldr	r3, [r7, #0]
 8005882:	68d9      	ldr	r1, [r3, #12]
 8005884:	4859      	ldr	r0, [pc, #356]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 8005886:	687a      	ldr	r2, [r7, #4]
 8005888:	4613      	mov	r3, r2
 800588a:	00db      	lsls	r3, r3, #3
 800588c:	4413      	add	r3, r2
 800588e:	009b      	lsls	r3, r3, #2
 8005890:	4403      	add	r3, r0
 8005892:	3314      	adds	r3, #20
 8005894:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 8005896:	683b      	ldr	r3, [r7, #0]
 8005898:	6919      	ldr	r1, [r3, #16]
 800589a:	4854      	ldr	r0, [pc, #336]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 800589c:	687a      	ldr	r2, [r7, #4]
 800589e:	4613      	mov	r3, r2
 80058a0:	00db      	lsls	r3, r3, #3
 80058a2:	4413      	add	r3, r2
 80058a4:	009b      	lsls	r3, r3, #2
 80058a6:	4403      	add	r3, r0
 80058a8:	3310      	adds	r3, #16
 80058aa:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 80058ac:	494f      	ldr	r1, [pc, #316]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 80058ae:	687a      	ldr	r2, [r7, #4]
 80058b0:	4613      	mov	r3, r2
 80058b2:	00db      	lsls	r3, r3, #3
 80058b4:	4413      	add	r3, r2
 80058b6:	009b      	lsls	r3, r3, #2
 80058b8:	440b      	add	r3, r1
 80058ba:	331c      	adds	r3, #28
 80058bc:	2200      	movs	r2, #0
 80058be:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if(WM8994_Probe() != BSP_ERROR_NONE)
 80058c0:	f000 ffe6 	bl	8006890 <WM8994_Probe>
 80058c4:	4603      	mov	r3, r0
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d002      	beq.n	80058d0 <BSP_AUDIO_OUT_Init+0xc0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80058ca:	f06f 0304 	mvn.w	r3, #4
 80058ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
#endif

    if(ret == BSP_ERROR_NONE)
 80058d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80058d2:	2b00      	cmp	r3, #0
 80058d4:	f040 8085 	bne.w	80059e2 <BSP_AUDIO_OUT_Init+0x1d2>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	685b      	ldr	r3, [r3, #4]
 80058dc:	4619      	mov	r1, r3
 80058de:	4844      	ldr	r0, [pc, #272]	@ (80059f0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80058e0:	f000 f95d 	bl	8005b9e <MX_SAI1_ClockConfig>
 80058e4:	4603      	mov	r3, r0
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d003      	beq.n	80058f2 <BSP_AUDIO_OUT_Init+0xe2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 80058ea:	f06f 0308 	mvn.w	r3, #8
 80058ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80058f0:	e077      	b.n	80059e2 <BSP_AUDIO_OUT_Init+0x1d2>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80058f2:	4b3f      	ldr	r3, [pc, #252]	@ (80059f0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80058f4:	4a3f      	ldr	r2, [pc, #252]	@ (80059f4 <BSP_AUDIO_OUT_Init+0x1e4>)
 80058f6:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_out_sai);
 80058f8:	483d      	ldr	r0, [pc, #244]	@ (80059f0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80058fa:	f001 f823 	bl	8006944 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
        if(ret == BSP_ERROR_NONE)
 80058fe:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005900:	2b00      	cmp	r3, #0
 8005902:	d16e      	bne.n	80059e2 <BSP_AUDIO_OUT_Init+0x1d2>
	{
          MX_SAI_Config_t mx_sai_config;

          /* Prepare haudio_out_sai handle */
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 8005904:	683b      	ldr	r3, [r7, #0]
 8005906:	685b      	ldr	r3, [r3, #4]
 8005908:	60fb      	str	r3, [r7, #12]
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 800590a:	2300      	movs	r3, #0
 800590c:	613b      	str	r3, [r7, #16]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800590e:	2301      	movs	r3, #1
 8005910:	61fb      	str	r3, [r7, #28]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8005912:	683b      	ldr	r3, [r7, #0]
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d102      	bne.n	8005920 <BSP_AUDIO_OUT_Init+0x110>
 800591a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800591e:	e000      	b.n	8005922 <BSP_AUDIO_OUT_Init+0x112>
 8005920:	2300      	movs	r3, #0
 8005922:	61bb      	str	r3, [r7, #24]
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	689b      	ldr	r3, [r3, #8]
 8005928:	2b20      	cmp	r3, #32
 800592a:	d101      	bne.n	8005930 <BSP_AUDIO_OUT_Init+0x120>
 800592c:	23e0      	movs	r3, #224	@ 0xe0
 800592e:	e000      	b.n	8005932 <BSP_AUDIO_OUT_Init+0x122>
 8005930:	2380      	movs	r3, #128	@ 0x80
 8005932:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 8005934:	2380      	movs	r3, #128	@ 0x80
 8005936:	62fb      	str	r3, [r7, #44]	@ 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 8005938:	2340      	movs	r3, #64	@ 0x40
 800593a:	633b      	str	r3, [r7, #48]	@ 0x30
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800593c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005940:	627b      	str	r3, [r7, #36]	@ 0x24
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 8005942:	2300      	movs	r3, #0
 8005944:	623b      	str	r3, [r7, #32]
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8005946:	2300      	movs	r3, #0
 8005948:	62bb      	str	r3, [r7, #40]	@ 0x28
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 800594a:	2305      	movs	r3, #5
 800594c:	637b      	str	r3, [r7, #52]	@ 0x34

          /* SAI peripheral initialization: this __weak function can be redefined by the application  */
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800594e:	f107 030c 	add.w	r3, r7, #12
 8005952:	4619      	mov	r1, r3
 8005954:	4826      	ldr	r0, [pc, #152]	@ (80059f0 <BSP_AUDIO_OUT_Init+0x1e0>)
 8005956:	f000 f899 	bl	8005a8c <MX_SAI1_Block_A_Init>
 800595a:	4603      	mov	r3, r0
 800595c:	2b00      	cmp	r3, #0
 800595e:	d003      	beq.n	8005968 <BSP_AUDIO_OUT_Init+0x158>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8005960:	f06f 0303 	mvn.w	r3, #3
 8005964:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005966:	e03c      	b.n	80059e2 <BSP_AUDIO_OUT_Init+0x1d2>
#endif
          else
          {
#if (USE_AUDIO_CODEC_WM8994 == 1)
            WM8994_Init_t codec_init;
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	689b      	ldr	r3, [r3, #8]
 800596c:	2b20      	cmp	r3, #32
 800596e:	d101      	bne.n	8005974 <BSP_AUDIO_OUT_Init+0x164>
 8005970:	2303      	movs	r3, #3
 8005972:	e000      	b.n	8005976 <BSP_AUDIO_OUT_Init+0x166>
 8005974:	2300      	movs	r3, #0
 8005976:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Fill codec_init structure */
            codec_init.Frequency    = AudioInit->SampleRate;
 8005978:	683b      	ldr	r3, [r7, #0]
 800597a:	685b      	ldr	r3, [r3, #4]
 800597c:	643b      	str	r3, [r7, #64]	@ 0x40
            codec_init.InputDevice  = WM8994_IN_NONE;
 800597e:	2300      	movs	r3, #0
 8005980:	63bb      	str	r3, [r7, #56]	@ 0x38
            codec_init.OutputDevice = AudioInit->Device;
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	691b      	ldr	r3, [r3, #16]
 800598c:	2b64      	cmp	r3, #100	@ 0x64
 800598e:	d80a      	bhi.n	80059a6 <BSP_AUDIO_OUT_Init+0x196>
 8005990:	683b      	ldr	r3, [r7, #0]
 8005992:	691a      	ldr	r2, [r3, #16]
 8005994:	4613      	mov	r3, r2
 8005996:	019b      	lsls	r3, r3, #6
 8005998:	1a9b      	subs	r3, r3, r2
 800599a:	4a17      	ldr	r2, [pc, #92]	@ (80059f8 <BSP_AUDIO_OUT_Init+0x1e8>)
 800599c:	fba2 2303 	umull	r2, r3, r2, r3
 80059a0:	095b      	lsrs	r3, r3, #5
 80059a2:	b2db      	uxtb	r3, r3
 80059a4:	e000      	b.n	80059a8 <BSP_AUDIO_OUT_Init+0x198>
 80059a6:	233f      	movs	r3, #63	@ 0x3f
 80059a8:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 80059aa:	4b14      	ldr	r3, [pc, #80]	@ (80059fc <BSP_AUDIO_OUT_Init+0x1ec>)
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	4a13      	ldr	r2, [pc, #76]	@ (8005a00 <BSP_AUDIO_OUT_Init+0x1f0>)
 80059b2:	6812      	ldr	r2, [r2, #0]
 80059b4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80059b8:	4610      	mov	r0, r2
 80059ba:	4798      	blx	r3
 80059bc:	4603      	mov	r3, r0
 80059be:	2b00      	cmp	r3, #0
 80059c0:	d002      	beq.n	80059c8 <BSP_AUDIO_OUT_Init+0x1b8>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80059c2:	f06f 0304 	mvn.w	r3, #4
 80059c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
#endif
            if(ret == BSP_ERROR_NONE)
 80059c8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d109      	bne.n	80059e2 <BSP_AUDIO_OUT_Init+0x1d2>
            {
              /* Update BSP AUDIO OUT state */
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 80059ce:	4907      	ldr	r1, [pc, #28]	@ (80059ec <BSP_AUDIO_OUT_Init+0x1dc>)
 80059d0:	687a      	ldr	r2, [r7, #4]
 80059d2:	4613      	mov	r3, r2
 80059d4:	00db      	lsls	r3, r3, #3
 80059d6:	4413      	add	r3, r2
 80059d8:	009b      	lsls	r3, r3, #2
 80059da:	440b      	add	r3, r1
 80059dc:	331c      	adds	r3, #28
 80059de:	2202      	movs	r2, #2
 80059e0:	601a      	str	r2, [r3, #0]
	}
      }
    }
  }

  return ret;
 80059e2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80059e4:	4618      	mov	r0, r3
 80059e6:	3750      	adds	r7, #80	@ 0x50
 80059e8:	46bd      	mov	sp, r7
 80059ea:	bd80      	pop	{r7, pc}
 80059ec:	24005bc4 	.word	0x24005bc4
 80059f0:	24005a94 	.word	0x24005a94
 80059f4:	40015804 	.word	0x40015804
 80059f8:	51eb851f 	.word	0x51eb851f
 80059fc:	240059e8 	.word	0x240059e8
 8005a00:	24005a90 	.word	0x24005a90

08005a04 <BSP_AUDIO_OUT_DeInit>:
  * @brief  De-initializes the audio out peripheral.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
int32_t BSP_AUDIO_OUT_DeInit(uint32_t Instance)
{
 8005a04:	b580      	push	{r7, lr}
 8005a06:	b084      	sub	sp, #16
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005a0c:	2300      	movs	r3, #0
 8005a0e:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005a10:	687b      	ldr	r3, [r7, #4]
 8005a12:	2b01      	cmp	r3, #1
 8005a14:	d903      	bls.n	8005a1e <BSP_AUDIO_OUT_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005a16:	f06f 0301 	mvn.w	r3, #1
 8005a1a:	60fb      	str	r3, [r7, #12]
 8005a1c:	e027      	b.n	8005a6e <BSP_AUDIO_OUT_DeInit+0x6a>
  }
  else
  {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
    SAI_MspDeInit(&haudio_out_sai);
 8005a1e:	4816      	ldr	r0, [pc, #88]	@ (8005a78 <BSP_AUDIO_OUT_DeInit+0x74>)
 8005a20:	f001 fa2e 	bl	8006e80 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8005a24:	4b14      	ldr	r3, [pc, #80]	@ (8005a78 <BSP_AUDIO_OUT_DeInit+0x74>)
 8005a26:	4a15      	ldr	r2, [pc, #84]	@ (8005a7c <BSP_AUDIO_OUT_DeInit+0x78>)
 8005a28:	601a      	str	r2, [r3, #0]
    /* Call the Media layer stop function */
    if(Audio_Drv->DeInit(Audio_CompObj) != 0)
 8005a2a:	4b15      	ldr	r3, [pc, #84]	@ (8005a80 <BSP_AUDIO_OUT_DeInit+0x7c>)
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685b      	ldr	r3, [r3, #4]
 8005a30:	4a14      	ldr	r2, [pc, #80]	@ (8005a84 <BSP_AUDIO_OUT_DeInit+0x80>)
 8005a32:	6812      	ldr	r2, [r2, #0]
 8005a34:	4610      	mov	r0, r2
 8005a36:	4798      	blx	r3
 8005a38:	4603      	mov	r3, r0
 8005a3a:	2b00      	cmp	r3, #0
 8005a3c:	d003      	beq.n	8005a46 <BSP_AUDIO_OUT_DeInit+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005a3e:	f06f 0304 	mvn.w	r3, #4
 8005a42:	60fb      	str	r3, [r7, #12]
 8005a44:	e013      	b.n	8005a6e <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 8005a46:	480c      	ldr	r0, [pc, #48]	@ (8005a78 <BSP_AUDIO_OUT_DeInit+0x74>)
 8005a48:	f00d ff6e 	bl	8013928 <HAL_SAI_DeInit>
 8005a4c:	4603      	mov	r3, r0
 8005a4e:	2b00      	cmp	r3, #0
 8005a50:	d003      	beq.n	8005a5a <BSP_AUDIO_OUT_DeInit+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005a52:	f06f 0303 	mvn.w	r3, #3
 8005a56:	60fb      	str	r3, [r7, #12]
 8005a58:	e009      	b.n	8005a6e <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else
    {
      /* Update BSP AUDIO OUT state */
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_RESET;
 8005a5a:	490b      	ldr	r1, [pc, #44]	@ (8005a88 <BSP_AUDIO_OUT_DeInit+0x84>)
 8005a5c:	687a      	ldr	r2, [r7, #4]
 8005a5e:	4613      	mov	r3, r2
 8005a60:	00db      	lsls	r3, r3, #3
 8005a62:	4413      	add	r3, r2
 8005a64:	009b      	lsls	r3, r3, #2
 8005a66:	440b      	add	r3, r1
 8005a68:	331c      	adds	r3, #28
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 8005a6e:	68fb      	ldr	r3, [r7, #12]
}
 8005a70:	4618      	mov	r0, r3
 8005a72:	3710      	adds	r7, #16
 8005a74:	46bd      	mov	sp, r7
 8005a76:	bd80      	pop	{r7, pc}
 8005a78:	24005a94 	.word	0x24005a94
 8005a7c:	40015804 	.word	0x40015804
 8005a80:	240059e8 	.word	0x240059e8
 8005a84:	24005a90 	.word	0x24005a90
 8005a88:	24005bc4 	.word	0x24005bc4

08005a8c <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8005a8c:	b580      	push	{r7, lr}
 8005a8e:	b084      	sub	sp, #16
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]
 8005a94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8005a96:	2300      	movs	r3, #0
 8005a98:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	681b      	ldr	r3, [r3, #0]
 8005a9e:	681a      	ldr	r2, [r3, #0]
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8005aa8:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_A */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68da      	ldr	r2, [r3, #12]
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	681a      	ldr	r2, [r3, #0]
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8005aba:	683b      	ldr	r3, [r7, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2200      	movs	r2, #0
 8005acc:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689a      	ldr	r2, [r3, #8]
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	2200      	movs	r2, #0
 8005ada:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8005adc:	683b      	ldr	r3, [r7, #0]
 8005ade:	691a      	ldr	r2, [r3, #16]
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 8005ae4:	683b      	ldr	r3, [r7, #0]
 8005ae6:	695a      	ldr	r2, [r3, #20]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	699a      	ldr	r2, [r3, #24]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	69da      	ldr	r2, [r3, #28]
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	2200      	movs	r2, #0
 8005b06:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	2200      	movs	r2, #0
 8005b0c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv               = 0;
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	2200      	movs	r2, #0
 8005b12:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2200      	movs	r2, #0
 8005b18:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	2200      	movs	r2, #0
 8005b1e:	611a      	str	r2, [r3, #16]
  hsai->Init.PdmInit.Activation   = DISABLE;
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	2200      	movs	r2, #0
 8005b24:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.ClockEnable  = 0;
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2200      	movs	r2, #0
 8005b2c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	2200      	movs	r2, #0
 8005b32:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	6a1a      	ldr	r2, [r3, #32]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8005b4a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	2200      	movs	r2, #0
 8005b50:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 8005b58:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2200      	movs	r2, #0
 8005b64:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	2204      	movs	r2, #4
 8005b6a:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 8005b6c:	683b      	ldr	r3, [r7, #0]
 8005b6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f00d fc2d 	bl	80133d4 <HAL_SAI_Init>
 8005b7a:	4603      	mov	r3, r0
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d001      	beq.n	8005b84 <MX_SAI1_Block_A_Init+0xf8>
  {
    ret = HAL_ERROR;
 8005b80:	2301      	movs	r3, #1
 8005b82:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_SAI_ENABLE(hsai);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681b      	ldr	r3, [r3, #0]
 8005b88:	681a      	ldr	r2, [r3, #0]
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8005b92:	601a      	str	r2, [r3, #0]

  return ret;
 8005b94:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3710      	adds	r7, #16
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	bd80      	pop	{r7, pc}

08005b9e <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8005b9e:	b580      	push	{r7, lr}
 8005ba0:	b0b6      	sub	sp, #216	@ 0xd8
 8005ba2:	af00      	add	r7, sp, #0
 8005ba4:	6078      	str	r0, [r7, #4]
 8005ba6:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8005ba8:	2300      	movs	r3, #0
 8005baa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005bae:	f107 0308 	add.w	r3, r7, #8
 8005bb2:	4618      	mov	r0, r3
 8005bb4:	f00b ff74 	bl	8011aa0 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8005bbe:	4293      	cmp	r3, r2
 8005bc0:	d009      	beq.n	8005bd6 <MX_SAI1_ClockConfig+0x38>
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	f245 6222 	movw	r2, #22050	@ 0x5622
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d004      	beq.n	8005bd6 <MX_SAI1_ClockConfig+0x38>
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8005bd2:	4293      	cmp	r3, r2
 8005bd4:	d105      	bne.n	8005be2 <MX_SAI1_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8005bd6:	2326      	movs	r3, #38	@ 0x26
 8005bd8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8005bda:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8005bde:	617b      	str	r3, [r7, #20]
 8005be0:	e004      	b.n	8005bec <MX_SAI1_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8005be2:	2307      	movs	r3, #7
 8005be4:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8005be6:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8005bea:	617b      	str	r3, [r7, #20]
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8005bec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005bf0:	f04f 0300 	mov.w	r3, #0
 8005bf4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	667b      	str	r3, [r7, #100]	@ 0x64
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8005c00:	2301      	movs	r3, #1
 8005c02:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8005c04:	2319      	movs	r3, #25
 8005c06:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8005c08:	f107 0308 	add.w	r3, r7, #8
 8005c0c:	4618      	mov	r0, r3
 8005c0e:	f00a fcfd 	bl	801060c <HAL_RCCEx_PeriphCLKConfig>
 8005c12:	4603      	mov	r3, r0
 8005c14:	2b00      	cmp	r3, #0
 8005c16:	d002      	beq.n	8005c1e <MX_SAI1_ClockConfig+0x80>
  {
    ret = HAL_ERROR;
 8005c18:	2301      	movs	r3, #1
 8005c1a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 8005c1e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	37d8      	adds	r7, #216	@ 0xd8
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}

08005c2a <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8005c2a:	b580      	push	{r7, lr}
 8005c2c:	b0b6      	sub	sp, #216	@ 0xd8
 8005c2e:	af00      	add	r7, sp, #0
 8005c30:	6078      	str	r0, [r7, #4]
 8005c32:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8005c34:	2300      	movs	r3, #0
 8005c36:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8005c3a:	f107 0308 	add.w	r3, r7, #8
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f00b ff2e 	bl	8011aa0 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8005c44:	683b      	ldr	r3, [r7, #0]
 8005c46:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8005c4a:	4293      	cmp	r3, r2
 8005c4c:	d009      	beq.n	8005c62 <MX_SAI4_ClockConfig+0x38>
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	f245 6222 	movw	r2, #22050	@ 0x5622
 8005c54:	4293      	cmp	r3, r2
 8005c56:	d004      	beq.n	8005c62 <MX_SAI4_ClockConfig+0x38>
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8005c5e:	4293      	cmp	r3, r2
 8005c60:	d105      	bne.n	8005c6e <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8005c62:	2326      	movs	r3, #38	@ 0x26
 8005c64:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8005c66:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8005c6a:	617b      	str	r3, [r7, #20]
 8005c6c:	e004      	b.n	8005c78 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8005c6e:	2307      	movs	r3, #7
 8005c70:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8005c72:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8005c76:	617b      	str	r3, [r7, #20]
  }
  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8005c78:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8005c7c:	f04f 0300 	mov.w	r3, #0
 8005c80:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8005c84:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8005c88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8005c8c:	2301      	movs	r3, #1
 8005c8e:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8005c90:	2301      	movs	r3, #1
 8005c92:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8005c94:	2319      	movs	r3, #25
 8005c96:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8005c98:	f107 0308 	add.w	r3, r7, #8
 8005c9c:	4618      	mov	r0, r3
 8005c9e:	f00a fcb5 	bl	801060c <HAL_RCCEx_PeriphCLKConfig>
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d002      	beq.n	8005cae <MX_SAI4_ClockConfig+0x84>
  {
    ret = HAL_ERROR;
 8005ca8:	2301      	movs	r3, #1
 8005caa:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 8005cae:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	37d8      	adds	r7, #216	@ 0xd8
 8005cb6:	46bd      	mov	sp, r7
 8005cb8:	bd80      	pop	{r7, pc}
	...

08005cbc <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b086      	sub	sp, #24
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	60f8      	str	r0, [r7, #12]
 8005cc4:	60b9      	str	r1, [r7, #8]
 8005cc6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005cc8:	2300      	movs	r3, #0
 8005cca:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	2b01      	cmp	r3, #1
 8005cd0:	d80f      	bhi.n	8005cf2 <BSP_AUDIO_OUT_Play+0x36>
 8005cd2:	4933      	ldr	r1, [pc, #204]	@ (8005da0 <BSP_AUDIO_OUT_Play+0xe4>)
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4613      	mov	r3, r2
 8005cd8:	00db      	lsls	r3, r3, #3
 8005cda:	4413      	add	r3, r2
 8005cdc:	009b      	lsls	r3, r3, #2
 8005cde:	440b      	add	r3, r1
 8005ce0:	330c      	adds	r3, #12
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	08db      	lsrs	r3, r3, #3
 8005ce6:	687a      	ldr	r2, [r7, #4]
 8005ce8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005cec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005cf0:	d303      	bcc.n	8005cfa <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005cf2:	f06f 0301 	mvn.w	r3, #1
 8005cf6:	617b      	str	r3, [r7, #20]
 8005cf8:	e04d      	b.n	8005d96 <BSP_AUDIO_OUT_Play+0xda>
  }
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 8005cfa:	4929      	ldr	r1, [pc, #164]	@ (8005da0 <BSP_AUDIO_OUT_Play+0xe4>)
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	4613      	mov	r3, r2
 8005d00:	00db      	lsls	r3, r3, #3
 8005d02:	4413      	add	r3, r2
 8005d04:	009b      	lsls	r3, r3, #2
 8005d06:	440b      	add	r3, r1
 8005d08:	331c      	adds	r3, #28
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	2b02      	cmp	r3, #2
 8005d0e:	d00a      	beq.n	8005d26 <BSP_AUDIO_OUT_Play+0x6a>
 8005d10:	4923      	ldr	r1, [pc, #140]	@ (8005da0 <BSP_AUDIO_OUT_Play+0xe4>)
 8005d12:	68fa      	ldr	r2, [r7, #12]
 8005d14:	4613      	mov	r3, r2
 8005d16:	00db      	lsls	r3, r3, #3
 8005d18:	4413      	add	r3, r2
 8005d1a:	009b      	lsls	r3, r3, #2
 8005d1c:	440b      	add	r3, r1
 8005d1e:	331c      	adds	r3, #28
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d134      	bne.n	8005d90 <BSP_AUDIO_OUT_Play+0xd4>
  {
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8005d26:	491e      	ldr	r1, [pc, #120]	@ (8005da0 <BSP_AUDIO_OUT_Play+0xe4>)
 8005d28:	68fa      	ldr	r2, [r7, #12]
 8005d2a:	4613      	mov	r3, r2
 8005d2c:	00db      	lsls	r3, r3, #3
 8005d2e:	4413      	add	r3, r2
 8005d30:	009b      	lsls	r3, r3, #2
 8005d32:	440b      	add	r3, r1
 8005d34:	330c      	adds	r3, #12
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	08db      	lsrs	r3, r3, #3
 8005d3a:	687a      	ldr	r2, [r7, #4]
 8005d3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005d40:	b29b      	uxth	r3, r3
 8005d42:	461a      	mov	r2, r3
 8005d44:	68b9      	ldr	r1, [r7, #8]
 8005d46:	4817      	ldr	r0, [pc, #92]	@ (8005da4 <BSP_AUDIO_OUT_Play+0xe8>)
 8005d48:	f00d fee6 	bl	8013b18 <HAL_SAI_Transmit_DMA>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d002      	beq.n	8005d58 <BSP_AUDIO_OUT_Play+0x9c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8005d52:	f06f 0303 	mvn.w	r3, #3
 8005d56:	617b      	str	r3, [r7, #20]
    }
    if(ret == BSP_ERROR_NONE)
 8005d58:	697b      	ldr	r3, [r7, #20]
 8005d5a:	2b00      	cmp	r3, #0
 8005d5c:	d11b      	bne.n	8005d96 <BSP_AUDIO_OUT_Play+0xda>
    {
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 8005d5e:	4b12      	ldr	r3, [pc, #72]	@ (8005da8 <BSP_AUDIO_OUT_Play+0xec>)
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	68db      	ldr	r3, [r3, #12]
 8005d64:	4a11      	ldr	r2, [pc, #68]	@ (8005dac <BSP_AUDIO_OUT_Play+0xf0>)
 8005d66:	6812      	ldr	r2, [r2, #0]
 8005d68:	4610      	mov	r0, r2
 8005d6a:	4798      	blx	r3
 8005d6c:	4603      	mov	r3, r0
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d003      	beq.n	8005d7a <BSP_AUDIO_OUT_Play+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8005d72:	f06f 0304 	mvn.w	r3, #4
 8005d76:	617b      	str	r3, [r7, #20]
    if(ret == BSP_ERROR_NONE)
 8005d78:	e00d      	b.n	8005d96 <BSP_AUDIO_OUT_Play+0xda>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8005d7a:	4909      	ldr	r1, [pc, #36]	@ (8005da0 <BSP_AUDIO_OUT_Play+0xe4>)
 8005d7c:	68fa      	ldr	r2, [r7, #12]
 8005d7e:	4613      	mov	r3, r2
 8005d80:	00db      	lsls	r3, r3, #3
 8005d82:	4413      	add	r3, r2
 8005d84:	009b      	lsls	r3, r3, #2
 8005d86:	440b      	add	r3, r1
 8005d88:	331c      	adds	r3, #28
 8005d8a:	2201      	movs	r2, #1
 8005d8c:	601a      	str	r2, [r3, #0]
    if(ret == BSP_ERROR_NONE)
 8005d8e:	e002      	b.n	8005d96 <BSP_AUDIO_OUT_Play+0xda>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 8005d90:	f06f 0302 	mvn.w	r3, #2
 8005d94:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8005d96:	697b      	ldr	r3, [r7, #20]
}
 8005d98:	4618      	mov	r0, r3
 8005d9a:	3718      	adds	r7, #24
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}
 8005da0:	24005bc4 	.word	0x24005bc4
 8005da4:	24005a94 	.word	0x24005a94
 8005da8:	240059e8 	.word	0x240059e8
 8005dac:	24005a90 	.word	0x24005a90

08005db0 <BSP_AUDIO_OUT_Stop>:
  * @brief  Stops audio playing and Power down the Audio Codec.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Stop(uint32_t Instance)
{
 8005db0:	b580      	push	{r7, lr}
 8005db2:	b084      	sub	sp, #16
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2b01      	cmp	r3, #1
 8005dc0:	d903      	bls.n	8005dca <BSP_AUDIO_OUT_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005dc2:	f06f 0301 	mvn.w	r3, #1
 8005dc6:	60fb      	str	r3, [r7, #12]
 8005dc8:	e033      	b.n	8005e32 <BSP_AUDIO_OUT_Stop+0x82>
  }
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_PLAYING)
 8005dca:	491c      	ldr	r1, [pc, #112]	@ (8005e3c <BSP_AUDIO_OUT_Stop+0x8c>)
 8005dcc:	687a      	ldr	r2, [r7, #4]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	00db      	lsls	r3, r3, #3
 8005dd2:	4413      	add	r3, r2
 8005dd4:	009b      	lsls	r3, r3, #2
 8005dd6:	440b      	add	r3, r1
 8005dd8:	331c      	adds	r3, #28
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d125      	bne.n	8005e2c <BSP_AUDIO_OUT_Stop+0x7c>
  {
    /* Call the Media layer stop function */
    if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 8005de0:	4b17      	ldr	r3, [pc, #92]	@ (8005e40 <BSP_AUDIO_OUT_Stop+0x90>)
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	699b      	ldr	r3, [r3, #24]
 8005de6:	4a17      	ldr	r2, [pc, #92]	@ (8005e44 <BSP_AUDIO_OUT_Stop+0x94>)
 8005de8:	6812      	ldr	r2, [r2, #0]
 8005dea:	2101      	movs	r1, #1
 8005dec:	4610      	mov	r0, r2
 8005dee:	4798      	blx	r3
 8005df0:	4603      	mov	r3, r0
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d003      	beq.n	8005dfe <BSP_AUDIO_OUT_Stop+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8005df6:	f06f 0304 	mvn.w	r3, #4
 8005dfa:	60fb      	str	r3, [r7, #12]
 8005dfc:	e019      	b.n	8005e32 <BSP_AUDIO_OUT_Stop+0x82>
    }
    else
    {
      if(HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 8005dfe:	4812      	ldr	r0, [pc, #72]	@ (8005e48 <BSP_AUDIO_OUT_Stop+0x98>)
 8005e00:	f00d fe0c 	bl	8013a1c <HAL_SAI_DMAStop>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d002      	beq.n	8005e10 <BSP_AUDIO_OUT_Stop+0x60>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8005e0a:	f06f 0303 	mvn.w	r3, #3
 8005e0e:	60fb      	str	r3, [r7, #12]
      }

      if( ret==BSP_ERROR_NONE)
 8005e10:	68fb      	ldr	r3, [r7, #12]
 8005e12:	2b00      	cmp	r3, #0
 8005e14:	d10d      	bne.n	8005e32 <BSP_AUDIO_OUT_Stop+0x82>
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 8005e16:	4909      	ldr	r1, [pc, #36]	@ (8005e3c <BSP_AUDIO_OUT_Stop+0x8c>)
 8005e18:	687a      	ldr	r2, [r7, #4]
 8005e1a:	4613      	mov	r3, r2
 8005e1c:	00db      	lsls	r3, r3, #3
 8005e1e:	4413      	add	r3, r2
 8005e20:	009b      	lsls	r3, r3, #2
 8005e22:	440b      	add	r3, r1
 8005e24:	331c      	adds	r3, #28
 8005e26:	2202      	movs	r2, #2
 8005e28:	601a      	str	r2, [r3, #0]
 8005e2a:	e002      	b.n	8005e32 <BSP_AUDIO_OUT_Stop+0x82>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 8005e2c:	f06f 0302 	mvn.w	r3, #2
 8005e30:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 8005e32:	68fb      	ldr	r3, [r7, #12]
}
 8005e34:	4618      	mov	r0, r3
 8005e36:	3710      	adds	r7, #16
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	24005bc4 	.word	0x24005bc4
 8005e40:	240059e8 	.word	0x240059e8
 8005e44:	24005a90 	.word	0x24005a90
 8005e48:	24005a94 	.word	0x24005a94

08005e4c <BSP_AUDIO_OUT_SetDevice>:
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI) or 1 (I2S)
  * @param  Device  The audio output device
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetDevice(uint32_t Instance, uint32_t Device)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b085      	sub	sp, #20
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	6078      	str	r0, [r7, #4]
 8005e54:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8005e56:	2300      	movs	r3, #0
 8005e58:	60fb      	str	r3, [r7, #12]

  UNUSED(Device);

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2b01      	cmp	r3, #1
 8005e5e:	d903      	bls.n	8005e68 <BSP_AUDIO_OUT_SetDevice+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8005e60:	f06f 0301 	mvn.w	r3, #1
 8005e64:	60fb      	str	r3, [r7, #12]
 8005e66:	e00d      	b.n	8005e84 <BSP_AUDIO_OUT_SetDevice+0x38>
  }
  /* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 8005e68:	490a      	ldr	r1, [pc, #40]	@ (8005e94 <BSP_AUDIO_OUT_SetDevice+0x48>)
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4613      	mov	r3, r2
 8005e6e:	00db      	lsls	r3, r3, #3
 8005e70:	4413      	add	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	440b      	add	r3, r1
 8005e76:	331c      	adds	r3, #28
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d002      	beq.n	8005e84 <BSP_AUDIO_OUT_SetDevice+0x38>
  {
    ret = BSP_ERROR_BUSY;
 8005e7e:	f06f 0302 	mvn.w	r3, #2
 8005e82:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do because there is only one device (AUDIO_OUT_DEVICE_HEADPHONE) */
  }

  /* Return BSP status */
  return ret;
 8005e84:	68fb      	ldr	r3, [r7, #12]
}
 8005e86:	4618      	mov	r0, r3
 8005e88:	3714      	adds	r7, #20
 8005e8a:	46bd      	mov	sp, r7
 8005e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop
 8005e94:	24005bc4 	.word	0x24005bc4

08005e98 <BSP_AUDIO_OUT_IRQHandler>:
  /* Return BSP status */
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d105      	bne.n	8005eb2 <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 8005ea6:	4b05      	ldr	r3, [pc, #20]	@ (8005ebc <BSP_AUDIO_OUT_IRQHandler+0x24>)
 8005ea8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005eac:	4618      	mov	r0, r3
 8005eae:	f005 f8e7 	bl	800b080 <HAL_DMA_IRQHandler>
  }
}
 8005eb2:	bf00      	nop
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
 8005eba:	bf00      	nop
 8005ebc:	24005a94 	.word	0x24005a94

08005ec0 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ec0:	b580      	push	{r7, lr}
 8005ec2:	b082      	sub	sp, #8
 8005ec4:	af00      	add	r7, sp, #0
 8005ec6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8005ec8:	2000      	movs	r0, #0
 8005eca:	f7fe fa3b 	bl	8004344 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8005ece:	bf00      	nop
 8005ed0:	3708      	adds	r7, #8
 8005ed2:	46bd      	mov	sp, r7
 8005ed4:	bd80      	pop	{r7, pc}

08005ed6 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8005ed6:	b580      	push	{r7, lr}
 8005ed8:	b082      	sub	sp, #8
 8005eda:	af00      	add	r7, sp, #0
 8005edc:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8005ede:	2000      	movs	r0, #0
 8005ee0:	f7fe fa46 	bl	8004370 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8005ee4:	bf00      	nop
 8005ee6:	3708      	adds	r7, #8
 8005ee8:	46bd      	mov	sp, r7
 8005eea:	bd80      	pop	{r7, pc}

08005eec <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8005eec:	b580      	push	{r7, lr}
 8005eee:	b082      	sub	sp, #8
 8005ef0:	af00      	add	r7, sp, #0
 8005ef2:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	4a06      	ldr	r2, [pc, #24]	@ (8005f14 <HAL_SAI_ErrorCallback+0x28>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d103      	bne.n	8005f06 <HAL_SAI_ErrorCallback+0x1a>
  {
  BSP_AUDIO_OUT_Error_CallBack(0);
 8005efe:	2000      	movs	r0, #0
 8005f00:	f7fe fa4c 	bl	800439c <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
  BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8005f04:	e002      	b.n	8005f0c <HAL_SAI_ErrorCallback+0x20>
  BSP_AUDIO_IN_Error_CallBack(0);
 8005f06:	2000      	movs	r0, #0
 8005f08:	f7fe fc4e 	bl	80047a8 <BSP_AUDIO_IN_Error_CallBack>
}
 8005f0c:	bf00      	nop
 8005f0e:	3708      	adds	r7, #8
 8005f10:	46bd      	mov	sp, r7
 8005f12:	bd80      	pop	{r7, pc}
 8005f14:	40015804 	.word	0x40015804

08005f18 <BSP_AUDIO_IN_Init>:
  *       - 1 if SAI PDM is used
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8005f18:	b590      	push	{r4, r7, lr}
 8005f1a:	b093      	sub	sp, #76	@ 0x4c
 8005f1c:	af00      	add	r7, sp, #0
 8005f1e:	6078      	str	r0, [r7, #4]
 8005f20:	6039      	str	r1, [r7, #0]


  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	2b01      	cmp	r3, #1
 8005f26:	d902      	bls.n	8005f2e <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 8005f28:	f06f 0301 	mvn.w	r3, #1
 8005f2c:	e175      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	6819      	ldr	r1, [r3, #0]
 8005f32:	489c      	ldr	r0, [pc, #624]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4613      	mov	r3, r2
 8005f38:	005b      	lsls	r3, r3, #1
 8005f3a:	4413      	add	r3, r2
 8005f3c:	011b      	lsls	r3, r3, #4
 8005f3e:	4403      	add	r3, r0
 8005f40:	3304      	adds	r3, #4
 8005f42:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8005f44:	683b      	ldr	r3, [r7, #0]
 8005f46:	68d9      	ldr	r1, [r3, #12]
 8005f48:	4896      	ldr	r0, [pc, #600]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8005f4a:	687a      	ldr	r2, [r7, #4]
 8005f4c:	4613      	mov	r3, r2
 8005f4e:	005b      	lsls	r3, r3, #1
 8005f50:	4413      	add	r3, r2
 8005f52:	011b      	lsls	r3, r3, #4
 8005f54:	4403      	add	r3, r0
 8005f56:	3310      	adds	r3, #16
 8005f58:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	6859      	ldr	r1, [r3, #4]
 8005f5e:	4891      	ldr	r0, [pc, #580]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8005f60:	687a      	ldr	r2, [r7, #4]
 8005f62:	4613      	mov	r3, r2
 8005f64:	005b      	lsls	r3, r3, #1
 8005f66:	4413      	add	r3, r2
 8005f68:	011b      	lsls	r3, r3, #4
 8005f6a:	4403      	add	r3, r0
 8005f6c:	3308      	adds	r3, #8
 8005f6e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	6899      	ldr	r1, [r3, #8]
 8005f74:	488b      	ldr	r0, [pc, #556]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8005f76:	687a      	ldr	r2, [r7, #4]
 8005f78:	4613      	mov	r3, r2
 8005f7a:	005b      	lsls	r3, r3, #1
 8005f7c:	4413      	add	r3, r2
 8005f7e:	011b      	lsls	r3, r3, #4
 8005f80:	4403      	add	r3, r0
 8005f82:	330c      	adds	r3, #12
 8005f84:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8005f86:	683b      	ldr	r3, [r7, #0]
 8005f88:	6919      	ldr	r1, [r3, #16]
 8005f8a:	4886      	ldr	r0, [pc, #536]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8005f8c:	687a      	ldr	r2, [r7, #4]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	005b      	lsls	r3, r3, #1
 8005f92:	4413      	add	r3, r2
 8005f94:	011b      	lsls	r3, r3, #4
 8005f96:	4403      	add	r3, r0
 8005f98:	3320      	adds	r3, #32
 8005f9a:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8005f9c:	4981      	ldr	r1, [pc, #516]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8005f9e:	687a      	ldr	r2, [r7, #4]
 8005fa0:	4613      	mov	r3, r2
 8005fa2:	005b      	lsls	r3, r3, #1
 8005fa4:	4413      	add	r3, r2
 8005fa6:	011b      	lsls	r3, r3, #4
 8005fa8:	440b      	add	r3, r1
 8005faa:	3324      	adds	r3, #36	@ 0x24
 8005fac:	2200      	movs	r2, #0
 8005fae:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	f040 80b6 	bne.w	8006124 <BSP_AUDIO_IN_Init+0x20c>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	685b      	ldr	r3, [r3, #4]
 8005fbc:	4619      	mov	r1, r3
 8005fbe:	487a      	ldr	r0, [pc, #488]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8005fc0:	f7ff fded 	bl	8005b9e <MX_SAI1_ClockConfig>
 8005fc4:	4603      	mov	r3, r0
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d002      	beq.n	8005fd0 <BSP_AUDIO_IN_Init+0xb8>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8005fca:	f06f 0308 	mvn.w	r3, #8
 8005fce:	e124      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8005fd0:	4b75      	ldr	r3, [pc, #468]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8005fd2:	4a76      	ldr	r2, [pc, #472]	@ (80061ac <BSP_AUDIO_IN_Init+0x294>)
 8005fd4:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8005fd6:	4874      	ldr	r0, [pc, #464]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8005fd8:	f000 fcb4 	bl	8006944 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      mx_config.MonoStereoMode = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8005fdc:	683b      	ldr	r3, [r7, #0]
 8005fde:	68db      	ldr	r3, [r3, #12]
 8005fe0:	2b01      	cmp	r3, #1
 8005fe2:	d102      	bne.n	8005fea <BSP_AUDIO_IN_Init+0xd2>
 8005fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005fe8:	e000      	b.n	8005fec <BSP_AUDIO_IN_Init+0xd4>
 8005fea:	2300      	movs	r3, #0
 8005fec:	617b      	str	r3, [r7, #20]
      mx_config.FrameLength       = 64;
 8005fee:	2340      	movs	r3, #64	@ 0x40
 8005ff0:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 32;
 8005ff2:	2320      	movs	r3, #32
 8005ff4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.DataSize =(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?SAI_DATASIZE_32: SAI_DATASIZE_16;
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	2b20      	cmp	r3, #32
 8005ffc:	d101      	bne.n	8006002 <BSP_AUDIO_IN_Init+0xea>
 8005ffe:	23e0      	movs	r3, #224	@ 0xe0
 8006000:	e000      	b.n	8006004 <BSP_AUDIO_IN_Init+0xec>
 8006002:	2380      	movs	r3, #128	@ 0x80
 8006004:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?128: 64;
 8006006:	683b      	ldr	r3, [r7, #0]
 8006008:	689b      	ldr	r3, [r3, #8]
 800600a:	2b20      	cmp	r3, #32
 800600c:	d101      	bne.n	8006012 <BSP_AUDIO_IN_Init+0xfa>
 800600e:	2380      	movs	r3, #128	@ 0x80
 8006010:	e000      	b.n	8006014 <BSP_AUDIO_IN_Init+0xfc>
 8006012:	2340      	movs	r3, #64	@ 0x40
 8006014:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?64: 32;
 8006016:	683b      	ldr	r3, [r7, #0]
 8006018:	689b      	ldr	r3, [r3, #8]
 800601a:	2b20      	cmp	r3, #32
 800601c:	d101      	bne.n	8006022 <BSP_AUDIO_IN_Init+0x10a>
 800601e:	2340      	movs	r3, #64	@ 0x40
 8006020:	e000      	b.n	8006024 <BSP_AUDIO_IN_Init+0x10c>
 8006022:	2320      	movs	r3, #32
 8006024:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8006026:	2300      	movs	r3, #0
 8006028:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_0123;
 800602a:	230f      	movs	r3, #15
 800602c:	633b      	str	r3, [r7, #48]	@ 0x30
      /* Prepare haudio_in_sai handle */
      haudio_in_sai.Instance        = SAI1_Block_B;
 800602e:	4b5e      	ldr	r3, [pc, #376]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8006030:	4a5e      	ldr	r2, [pc, #376]	@ (80061ac <BSP_AUDIO_IN_Init+0x294>)
 8006032:	601a      	str	r2, [r3, #0]
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate;
 8006034:	495b      	ldr	r1, [pc, #364]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8006036:	687a      	ldr	r2, [r7, #4]
 8006038:	4613      	mov	r3, r2
 800603a:	005b      	lsls	r3, r3, #1
 800603c:	4413      	add	r3, r2
 800603e:	011b      	lsls	r3, r3, #4
 8006040:	440b      	add	r3, r1
 8006042:	3308      	adds	r3, #8
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODESLAVE_RX;
 8006048:	2303      	movs	r3, #3
 800604a:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800604c:	2301      	movs	r3, #1
 800604e:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_SYNCHRONOUS;
 8006050:	2301      	movs	r3, #1
 8006052:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8006054:	2300      	movs	r3, #0
 8006056:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Disable SAI peripheral to allow access to SAI internal registers */

      if(MX_SAI1_Block_B_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8006058:	f107 0308 	add.w	r3, r7, #8
 800605c:	4619      	mov	r1, r3
 800605e:	4852      	ldr	r0, [pc, #328]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8006060:	f000 f95c 	bl	800631c <MX_SAI1_Block_B_Init>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d002      	beq.n	8006070 <BSP_AUDIO_IN_Init+0x158>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800606a:	f06f 0303 	mvn.w	r3, #3
 800606e:	e0d4      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
      }

      /* Prepare haudio_out_sai handle */
      haudio_out_sai.Instance       = SAI1_Block_A;
 8006070:	4b4f      	ldr	r3, [pc, #316]	@ (80061b0 <BSP_AUDIO_IN_Init+0x298>)
 8006072:	4a50      	ldr	r2, [pc, #320]	@ (80061b4 <BSP_AUDIO_IN_Init+0x29c>)
 8006074:	601a      	str	r2, [r3, #0]
      mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8006076:	2300      	movs	r3, #0
 8006078:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800607a:	2300      	movs	r3, #0
 800607c:	61bb      	str	r3, [r7, #24]
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800607e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8006082:	623b      	str	r3, [r7, #32]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8006084:	2300      	movs	r3, #0
 8006086:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8006088:	2300      	movs	r3, #0
 800608a:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 800608c:	f107 0308 	add.w	r3, r7, #8
 8006090:	4619      	mov	r1, r3
 8006092:	4847      	ldr	r0, [pc, #284]	@ (80061b0 <BSP_AUDIO_IN_Init+0x298>)
 8006094:	f7ff fcfa 	bl	8005a8c <MX_SAI1_Block_A_Init>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d002      	beq.n	80060a4 <BSP_AUDIO_IN_Init+0x18c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800609e:	f06f 0303 	mvn.w	r3, #3
 80060a2:	e0ba      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_AUDIO_CODEC_WM8994 == 1U)
      /* Initialize the codec internal registers */
      if(WM8994_Probe() == BSP_ERROR_NONE)
 80060a4:	f000 fbf4 	bl	8006890 <WM8994_Probe>
 80060a8:	4603      	mov	r3, r0
 80060aa:	2b00      	cmp	r3, #0
 80060ac:	f040 80aa 	bne.w	8006204 <BSP_AUDIO_IN_Init+0x2ec>
      {
        WM8994_Init_t codec_init;

        /* Fill codec_init structure */
        codec_init.Frequency    = AudioInit->SampleRate;
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	685b      	ldr	r3, [r3, #4]
 80060b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        codec_init.OutputDevice = WM8994_OUT_NONE;
 80060b6:	2300      	movs	r3, #0
 80060b8:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC)
 80060ba:	683b      	ldr	r3, [r7, #0]
 80060bc:	681b      	ldr	r3, [r3, #0]
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d104      	bne.n	80060cc <BSP_AUDIO_IN_Init+0x1b4>
        {
          codec_init.InputDevice = WM8994_IN_LINE1;
 80060c2:	2303      	movs	r3, #3
 80060c4:	637b      	str	r3, [r7, #52]	@ 0x34
          codec_init.OutputDevice = AUDIO_OUT_DEVICE_HEADPHONE;
 80060c6:	2302      	movs	r3, #2
 80060c8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80060ca:	e001      	b.n	80060d0 <BSP_AUDIO_IN_Init+0x1b8>
        }
        else /* (AudioInit->Device == AUDIO_IN_DEVICE_DIGITAL_MIC) */
        {
          codec_init.InputDevice = WM8994_IN_MIC2;
 80060cc:	2302      	movs	r3, #2
 80060ce:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        codec_init.Resolution=(AudioInit->BitsPerSample==AUDIO_RESOLUTION_32B)? 3:0;
 80060d0:	683b      	ldr	r3, [r7, #0]
 80060d2:	689b      	ldr	r3, [r3, #8]
 80060d4:	2b20      	cmp	r3, #32
 80060d6:	d101      	bne.n	80060dc <BSP_AUDIO_IN_Init+0x1c4>
 80060d8:	2303      	movs	r3, #3
 80060da:	e000      	b.n	80060de <BSP_AUDIO_IN_Init+0x1c6>
 80060dc:	2300      	movs	r3, #0
 80060de:	643b      	str	r3, [r7, #64]	@ 0x40
        /* Convert volume before sending to the codec */
        codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 80060e0:	683b      	ldr	r3, [r7, #0]
 80060e2:	691b      	ldr	r3, [r3, #16]
 80060e4:	2b63      	cmp	r3, #99	@ 0x63
 80060e6:	d80c      	bhi.n	8006102 <BSP_AUDIO_IN_Init+0x1ea>
 80060e8:	683b      	ldr	r3, [r7, #0]
 80060ea:	691a      	ldr	r2, [r3, #16]
 80060ec:	4613      	mov	r3, r2
 80060ee:	011b      	lsls	r3, r3, #4
 80060f0:	1a9b      	subs	r3, r3, r2
 80060f2:	011b      	lsls	r3, r3, #4
 80060f4:	1a9b      	subs	r3, r3, r2
 80060f6:	4a30      	ldr	r2, [pc, #192]	@ (80061b8 <BSP_AUDIO_IN_Init+0x2a0>)
 80060f8:	fba2 2303 	umull	r2, r3, r2, r3
 80060fc:	095b      	lsrs	r3, r3, #5
 80060fe:	b2db      	uxtb	r3, r3
 8006100:	e000      	b.n	8006104 <BSP_AUDIO_IN_Init+0x1ec>
 8006102:	23ef      	movs	r3, #239	@ 0xef
 8006104:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Initialize the codec internal registers */
        if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 8006106:	4b2d      	ldr	r3, [pc, #180]	@ (80061bc <BSP_AUDIO_IN_Init+0x2a4>)
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	4a2c      	ldr	r2, [pc, #176]	@ (80061c0 <BSP_AUDIO_IN_Init+0x2a8>)
 800610e:	6812      	ldr	r2, [r2, #0]
 8006110:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8006114:	4610      	mov	r0, r2
 8006116:	4798      	blx	r3
 8006118:	4603      	mov	r3, r0
 800611a:	2b00      	cmp	r3, #0
 800611c:	d072      	beq.n	8006204 <BSP_AUDIO_IN_Init+0x2ec>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 800611e:	f06f 0304 	mvn.w	r3, #4
        return BSP_ERROR_CLOCK_FAILURE;
 8006122:	e07a      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
        }
      }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
    }
    else if(Instance == 1U)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	2b01      	cmp	r3, #1
 8006128:	d16c      	bne.n	8006204 <BSP_AUDIO_IN_Init+0x2ec>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 800612a:	683b      	ldr	r3, [r7, #0]
 800612c:	685b      	ldr	r3, [r3, #4]
 800612e:	4619      	mov	r1, r3
 8006130:	481d      	ldr	r0, [pc, #116]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8006132:	f7ff fd7a 	bl	8005c2a <MX_SAI4_ClockConfig>
 8006136:	4603      	mov	r3, r0
 8006138:	2b00      	cmp	r3, #0
 800613a:	d002      	beq.n	8006142 <BSP_AUDIO_IN_Init+0x22a>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 800613c:	f06f 0308 	mvn.w	r3, #8
 8006140:	e06b      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 8006142:	4b19      	ldr	r3, [pc, #100]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8006144:	4a1f      	ldr	r2, [pc, #124]	@ (80061c4 <BSP_AUDIO_IN_Init+0x2ac>)
 8006146:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8006148:	4817      	ldr	r0, [pc, #92]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 800614a:	f000 fbfb 	bl	8006944 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 800614e:	2300      	movs	r3, #0
 8006150:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8006152:	2380      	movs	r3, #128	@ 0x80
 8006154:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8006156:	2310      	movs	r3, #16
 8006158:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 1;
 800615a:	2301      	movs	r3, #1
 800615c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 800615e:	2300      	movs	r3, #0
 8006160:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8006162:	2301      	movs	r3, #1
 8006164:	633b      	str	r3, [r7, #48]	@ 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8006166:	490f      	ldr	r1, [pc, #60]	@ (80061a4 <BSP_AUDIO_IN_Init+0x28c>)
 8006168:	687a      	ldr	r2, [r7, #4]
 800616a:	4613      	mov	r3, r2
 800616c:	005b      	lsls	r3, r3, #1
 800616e:	4413      	add	r3, r2
 8006170:	011b      	lsls	r3, r3, #4
 8006172:	440b      	add	r3, r1
 8006174:	3308      	adds	r3, #8
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	00db      	lsls	r3, r3, #3
 800617a:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 800617c:	2301      	movs	r3, #1
 800617e:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8006180:	2300      	movs	r3, #0
 8006182:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8006184:	2300      	movs	r3, #0
 8006186:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8006188:	2300      	movs	r3, #0
 800618a:	627b      	str	r3, [r7, #36]	@ 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 800618c:	f107 0308 	add.w	r3, r7, #8
 8006190:	4619      	mov	r1, r3
 8006192:	4805      	ldr	r0, [pc, #20]	@ (80061a8 <BSP_AUDIO_IN_Init+0x290>)
 8006194:	f000 f93f 	bl	8006416 <MX_SAI4_Block_A_Init>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d014      	beq.n	80061c8 <BSP_AUDIO_IN_Init+0x2b0>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800619e:	f06f 0303 	mvn.w	r3, #3
 80061a2:	e03a      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
 80061a4:	24005c0c 	.word	0x24005c0c
 80061a8:	24005b2c 	.word	0x24005b2c
 80061ac:	40015824 	.word	0x40015824
 80061b0:	24005a94 	.word	0x24005a94
 80061b4:	40015804 	.word	0x40015804
 80061b8:	51eb851f 	.word	0x51eb851f
 80061bc:	240059e8 	.word	0x240059e8
 80061c0:	24005a90 	.word	0x24005a90
 80061c4:	58005404 	.word	0x58005404
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */

      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	6859      	ldr	r1, [r3, #4]
 80061cc:	4815      	ldr	r0, [pc, #84]	@ (8006224 <BSP_AUDIO_IN_Init+0x30c>)
 80061ce:	687a      	ldr	r2, [r7, #4]
 80061d0:	4613      	mov	r3, r2
 80061d2:	005b      	lsls	r3, r3, #1
 80061d4:	4413      	add	r3, r2
 80061d6:	011b      	lsls	r3, r3, #4
 80061d8:	4403      	add	r3, r0
 80061da:	3310      	adds	r3, #16
 80061dc:	6818      	ldr	r0, [r3, #0]
 80061de:	4c11      	ldr	r4, [pc, #68]	@ (8006224 <BSP_AUDIO_IN_Init+0x30c>)
 80061e0:	687a      	ldr	r2, [r7, #4]
 80061e2:	4613      	mov	r3, r2
 80061e4:	005b      	lsls	r3, r3, #1
 80061e6:	4413      	add	r3, r2
 80061e8:	011b      	lsls	r3, r3, #4
 80061ea:	4423      	add	r3, r4
 80061ec:	3310      	adds	r3, #16
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	4602      	mov	r2, r0
 80061f2:	6878      	ldr	r0, [r7, #4]
 80061f4:	f000 f994 	bl	8006520 <BSP_AUDIO_IN_PDMToPCM_Init>
 80061f8:	4603      	mov	r3, r0
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d002      	beq.n	8006204 <BSP_AUDIO_IN_Init+0x2ec>
      {
        return BSP_ERROR_NO_INIT;
 80061fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006202:	e00a      	b.n	800621a <BSP_AUDIO_IN_Init+0x302>
    }
    else
    {}

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8006204:	4907      	ldr	r1, [pc, #28]	@ (8006224 <BSP_AUDIO_IN_Init+0x30c>)
 8006206:	687a      	ldr	r2, [r7, #4]
 8006208:	4613      	mov	r3, r2
 800620a:	005b      	lsls	r3, r3, #1
 800620c:	4413      	add	r3, r2
 800620e:	011b      	lsls	r3, r3, #4
 8006210:	440b      	add	r3, r1
 8006212:	3324      	adds	r3, #36	@ 0x24
 8006214:	2202      	movs	r2, #2
 8006216:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return BSP_ERROR_NONE;
 8006218:	2300      	movs	r3, #0
  }
}
 800621a:	4618      	mov	r0, r3
 800621c:	374c      	adds	r7, #76	@ 0x4c
 800621e:	46bd      	mov	sp, r7
 8006220:	bd90      	pop	{r4, r7, pc}
 8006222:	bf00      	nop
 8006224:	24005c0c 	.word	0x24005c0c

08006228 <BSP_AUDIO_IN_DeInit>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 if PDM is used
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 8006228:	b580      	push	{r7, lr}
 800622a:	b084      	sub	sp, #16
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8006230:	2300      	movs	r3, #0
 8006232:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2b01      	cmp	r3, #1
 8006238:	d903      	bls.n	8006242 <BSP_AUDIO_IN_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800623a:	f06f 0301 	mvn.w	r3, #1
 800623e:	60fb      	str	r3, [r7, #12]
 8006240:	e056      	b.n	80062f0 <BSP_AUDIO_IN_DeInit+0xc8>
  }
  else
  {
    if(Instance == 0U)
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	2b00      	cmp	r3, #0
 8006246:	d12a      	bne.n	800629e <BSP_AUDIO_IN_DeInit+0x76>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 8006248:	482c      	ldr	r0, [pc, #176]	@ (80062fc <BSP_AUDIO_IN_DeInit+0xd4>)
 800624a:	f000 fe19 	bl	8006e80 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800624e:	4b2b      	ldr	r3, [pc, #172]	@ (80062fc <BSP_AUDIO_IN_DeInit+0xd4>)
 8006250:	4a2b      	ldr	r2, [pc, #172]	@ (8006300 <BSP_AUDIO_IN_DeInit+0xd8>)
 8006252:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 8006254:	4b2b      	ldr	r3, [pc, #172]	@ (8006304 <BSP_AUDIO_IN_DeInit+0xdc>)
 8006256:	4a2c      	ldr	r2, [pc, #176]	@ (8006308 <BSP_AUDIO_IN_DeInit+0xe0>)
 8006258:	601a      	str	r2, [r3, #0]

      if(Audio_Drv->DeInit(Audio_CompObj) != BSP_ERROR_NONE)
 800625a:	4b2c      	ldr	r3, [pc, #176]	@ (800630c <BSP_AUDIO_IN_DeInit+0xe4>)
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	685b      	ldr	r3, [r3, #4]
 8006260:	4a2b      	ldr	r2, [pc, #172]	@ (8006310 <BSP_AUDIO_IN_DeInit+0xe8>)
 8006262:	6812      	ldr	r2, [r2, #0]
 8006264:	4610      	mov	r0, r2
 8006266:	4798      	blx	r3
 8006268:	4603      	mov	r3, r0
 800626a:	2b00      	cmp	r3, #0
 800626c:	d003      	beq.n	8006276 <BSP_AUDIO_IN_DeInit+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800626e:	f06f 0304 	mvn.w	r3, #4
 8006272:	60fb      	str	r3, [r7, #12]
 8006274:	e032      	b.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
      }/* De-Initializes SAI handles */
      else if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 8006276:	4821      	ldr	r0, [pc, #132]	@ (80062fc <BSP_AUDIO_IN_DeInit+0xd4>)
 8006278:	f00d fb56 	bl	8013928 <HAL_SAI_DeInit>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d003      	beq.n	800628a <BSP_AUDIO_IN_DeInit+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8006282:	f06f 0303 	mvn.w	r3, #3
 8006286:	60fb      	str	r3, [r7, #12]
 8006288:	e028      	b.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 800628a:	481e      	ldr	r0, [pc, #120]	@ (8006304 <BSP_AUDIO_IN_DeInit+0xdc>)
 800628c:	f00d fb4c 	bl	8013928 <HAL_SAI_DeInit>
 8006290:	4603      	mov	r3, r0
 8006292:	2b00      	cmp	r3, #0
 8006294:	d022      	beq.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8006296:	f06f 0303 	mvn.w	r3, #3
 800629a:	60fb      	str	r3, [r7, #12]
 800629c:	e01e      	b.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
        }
      }
    }
    else if (Instance == 1U)
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	2b01      	cmp	r3, #1
 80062a2:	d11b      	bne.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 80062a4:	4815      	ldr	r0, [pc, #84]	@ (80062fc <BSP_AUDIO_IN_DeInit+0xd4>)
 80062a6:	f000 fdeb 	bl	8006e80 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 80062aa:	4b14      	ldr	r3, [pc, #80]	@ (80062fc <BSP_AUDIO_IN_DeInit+0xd4>)
 80062ac:	4a19      	ldr	r2, [pc, #100]	@ (8006314 <BSP_AUDIO_IN_DeInit+0xec>)
 80062ae:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80062b0:	4b14      	ldr	r3, [pc, #80]	@ (8006304 <BSP_AUDIO_IN_DeInit+0xdc>)
 80062b2:	4a15      	ldr	r2, [pc, #84]	@ (8006308 <BSP_AUDIO_IN_DeInit+0xe0>)
 80062b4:	601a      	str	r2, [r3, #0]

      if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 80062b6:	4811      	ldr	r0, [pc, #68]	@ (80062fc <BSP_AUDIO_IN_DeInit+0xd4>)
 80062b8:	f00d fb36 	bl	8013928 <HAL_SAI_DeInit>
 80062bc:	4603      	mov	r3, r0
 80062be:	2b00      	cmp	r3, #0
 80062c0:	d003      	beq.n	80062ca <BSP_AUDIO_IN_DeInit+0xa2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80062c2:	f06f 0303 	mvn.w	r3, #3
 80062c6:	60fb      	str	r3, [r7, #12]
 80062c8:	e008      	b.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 80062ca:	480e      	ldr	r0, [pc, #56]	@ (8006304 <BSP_AUDIO_IN_DeInit+0xdc>)
 80062cc:	f00d fb2c 	bl	8013928 <HAL_SAI_DeInit>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d002      	beq.n	80062dc <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 80062d6:	f06f 0303 	mvn.w	r3, #3
 80062da:	60fb      	str	r3, [r7, #12]
      }
    }
    else
    {}
    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 80062dc:	490e      	ldr	r1, [pc, #56]	@ (8006318 <BSP_AUDIO_IN_DeInit+0xf0>)
 80062de:	687a      	ldr	r2, [r7, #4]
 80062e0:	4613      	mov	r3, r2
 80062e2:	005b      	lsls	r3, r3, #1
 80062e4:	4413      	add	r3, r2
 80062e6:	011b      	lsls	r3, r3, #4
 80062e8:	440b      	add	r3, r1
 80062ea:	3324      	adds	r3, #36	@ 0x24
 80062ec:	2200      	movs	r2, #0
 80062ee:	601a      	str	r2, [r3, #0]
  }


  /* Return BSP status */
  return ret;
 80062f0:	68fb      	ldr	r3, [r7, #12]
}
 80062f2:	4618      	mov	r0, r3
 80062f4:	3710      	adds	r7, #16
 80062f6:	46bd      	mov	sp, r7
 80062f8:	bd80      	pop	{r7, pc}
 80062fa:	bf00      	nop
 80062fc:	24005b2c 	.word	0x24005b2c
 8006300:	40015824 	.word	0x40015824
 8006304:	24005a94 	.word	0x24005a94
 8006308:	40015804 	.word	0x40015804
 800630c:	240059e8 	.word	0x240059e8
 8006310:	24005a90 	.word	0x24005a90
 8006314:	58005404 	.word	0x58005404
 8006318:	24005c0c 	.word	0x24005c0c

0800631c <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	681a      	ldr	r2, [r3, #0]
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006338:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8006342:	683b      	ldr	r3, [r7, #0]
 8006344:	68da      	ldr	r2, [r3, #12]
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	685a      	ldr	r2, [r3, #4]
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	2200      	movs	r2, #0
 800635c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	689a      	ldr	r2, [r3, #8]
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	2200      	movs	r2, #0
 800636a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	691a      	ldr	r2, [r3, #16]
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8006374:	683b      	ldr	r3, [r7, #0]
 8006376:	695a      	ldr	r2, [r3, #20]
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800637c:	683b      	ldr	r3, [r7, #0]
 800637e:	699a      	ldr	r2, [r3, #24]
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800638a:	683b      	ldr	r3, [r7, #0]
 800638c:	69da      	ldr	r2, [r3, #28]
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	2200      	movs	r2, #0
 8006396:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2210      	movs	r2, #16
 800639c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	2200      	movs	r2, #0
 80063a2:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = DISABLE;
 80063a4:	687b      	ldr	r3, [r7, #4]
 80063a6:	2200      	movs	r2, #0
 80063a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	6a1a      	ldr	r2, [r3, #32]
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80063c2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	2200      	movs	r2, #0
 80063c8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80063d0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	2200      	movs	r2, #0
 80063d6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	2204      	movs	r2, #4
 80063e2:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80063e4:	683b      	ldr	r3, [r7, #0]
 80063e6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f00c fff1 	bl	80133d4 <HAL_SAI_Init>
 80063f2:	4603      	mov	r3, r0
 80063f4:	2b00      	cmp	r3, #0
 80063f6:	d001      	beq.n	80063fc <MX_SAI1_Block_B_Init+0xe0>
  {
    ret = HAL_ERROR;
 80063f8:	2301      	movs	r3, #1
 80063fa:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	681b      	ldr	r3, [r3, #0]
 8006400:	681a      	ldr	r2, [r3, #0]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800640a:	601a      	str	r2, [r3, #0]

  return ret;
 800640c:	7bfb      	ldrb	r3, [r7, #15]
}
 800640e:	4618      	mov	r0, r3
 8006410:	3710      	adds	r7, #16
 8006412:	46bd      	mov	sp, r7
 8006414:	bd80      	pop	{r7, pc}

08006416 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8006416:	b580      	push	{r7, lr}
 8006418:	b084      	sub	sp, #16
 800641a:	af00      	add	r7, sp, #0
 800641c:	6078      	str	r0, [r7, #4]
 800641e:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8006420:	2300      	movs	r3, #0
 8006422:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	681a      	ldr	r2, [r3, #0]
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006432:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	681a      	ldr	r2, [r3, #0]
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 800643c:	683b      	ldr	r3, [r7, #0]
 800643e:	68da      	ldr	r2, [r3, #12]
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	685a      	ldr	r2, [r3, #4]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8006452:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	2200      	movs	r2, #0
 8006458:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800645a:	683b      	ldr	r3, [r7, #0]
 800645c:	689a      	ldr	r2, [r3, #8]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006468:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	691a      	ldr	r2, [r3, #16]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	695a      	ldr	r2, [r3, #20]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800647a:	683b      	ldr	r3, [r7, #0]
 800647c:	699a      	ldr	r2, [r3, #24]
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2201      	movs	r2, #1
 8006486:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8006488:	683b      	ldr	r3, [r7, #0]
 800648a:	69da      	ldr	r2, [r3, #28]
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	2210      	movs	r2, #16
 800649a:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 80064a2:	687b      	ldr	r3, [r7, #4]
 80064a4:	2201      	movs	r2, #1
 80064a6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2201      	movs	r2, #1
 80064ae:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80064b6:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80064b8:	683b      	ldr	r3, [r7, #0]
 80064ba:	6a1a      	ldr	r2, [r3, #32]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80064c0:	683b      	ldr	r3, [r7, #0]
 80064c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2200      	movs	r2, #0
 80064cc:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80064d4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	2200      	movs	r2, #0
 80064da:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	2200      	movs	r2, #0
 80064e0:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f00c ff6c 	bl	80133d4 <HAL_SAI_Init>
 80064fc:	4603      	mov	r3, r0
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d001      	beq.n	8006506 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 8006502:	2301      	movs	r3, #1
 8006504:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8006514:	601a      	str	r2, [r3, #0]

  return ret;
 8006516:	7bfb      	ldrb	r3, [r7, #15]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}

08006520 <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b086      	sub	sp, #24
 8006524:	af00      	add	r7, sp, #0
 8006526:	60f8      	str	r0, [r7, #12]
 8006528:	60b9      	str	r1, [r7, #8]
 800652a:	607a      	str	r2, [r7, #4]
 800652c:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800652e:	2300      	movs	r3, #0
 8006530:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8006532:	68fb      	ldr	r3, [r7, #12]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d002      	beq.n	800653e <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8006538:	f06f 0301 	mvn.w	r3, #1
 800653c:	e085      	b.n	800664a <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800653e:	4b45      	ldr	r3, [pc, #276]	@ (8006654 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8006540:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006544:	4a43      	ldr	r2, [pc, #268]	@ (8006654 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8006546:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800654a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800654e:	4b41      	ldr	r3, [pc, #260]	@ (8006654 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8006550:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006554:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8006558:	613b      	str	r3, [r7, #16]
 800655a:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 800655c:	2300      	movs	r3, #0
 800655e:	617b      	str	r3, [r7, #20]
 8006560:	e06e      	b.n	8006640 <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 8006562:	4a3d      	ldr	r2, [pc, #244]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	214c      	movs	r1, #76	@ 0x4c
 8006568:	fb01 f303 	mul.w	r3, r1, r3
 800656c:	4413      	add	r3, r2
 800656e:	2201      	movs	r2, #1
 8006570:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 8006572:	4a39      	ldr	r2, [pc, #228]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	214c      	movs	r1, #76	@ 0x4c
 8006578:	fb01 f303 	mul.w	r3, r1, r3
 800657c:	4413      	add	r3, r2
 800657e:	3302      	adds	r3, #2
 8006580:	2200      	movs	r2, #0
 8006582:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8006584:	4a34      	ldr	r2, [pc, #208]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8006586:	697b      	ldr	r3, [r7, #20]
 8006588:	214c      	movs	r1, #76	@ 0x4c
 800658a:	fb01 f303 	mul.w	r3, r1, r3
 800658e:	4413      	add	r3, r2
 8006590:	3304      	adds	r3, #4
 8006592:	4a32      	ldr	r2, [pc, #200]	@ (800665c <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8006594:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	b298      	uxth	r0, r3
 800659a:	4a2f      	ldr	r2, [pc, #188]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800659c:	697b      	ldr	r3, [r7, #20]
 800659e:	214c      	movs	r1, #76	@ 0x4c
 80065a0:	fb01 f303 	mul.w	r3, r1, r3
 80065a4:	4413      	add	r3, r2
 80065a6:	330a      	adds	r3, #10
 80065a8:	4602      	mov	r2, r0
 80065aa:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	b298      	uxth	r0, r3
 80065b0:	4a29      	ldr	r2, [pc, #164]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	214c      	movs	r1, #76	@ 0x4c
 80065b6:	fb01 f303 	mul.w	r3, r1, r3
 80065ba:	4413      	add	r3, r2
 80065bc:	3308      	adds	r3, #8
 80065be:	4602      	mov	r2, r0
 80065c0:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80065c2:	697b      	ldr	r3, [r7, #20]
 80065c4:	224c      	movs	r2, #76	@ 0x4c
 80065c6:	fb02 f303 	mul.w	r3, r2, r3
 80065ca:	4a23      	ldr	r2, [pc, #140]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80065cc:	4413      	add	r3, r2
 80065ce:	4618      	mov	r0, r3
 80065d0:	f016 f850 	bl	801c674 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80065d4:	68bb      	ldr	r3, [r7, #8]
 80065d6:	4a22      	ldr	r2, [pc, #136]	@ (8006660 <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 80065d8:	fba2 2303 	umull	r2, r3, r2, r3
 80065dc:	099b      	lsrs	r3, r3, #6
 80065de:	b298      	uxth	r0, r3
 80065e0:	4920      	ldr	r1, [pc, #128]	@ (8006664 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80065e2:	697a      	ldr	r2, [r7, #20]
 80065e4:	4613      	mov	r3, r2
 80065e6:	005b      	lsls	r3, r3, #1
 80065e8:	4413      	add	r3, r2
 80065ea:	005b      	lsls	r3, r3, #1
 80065ec:	440b      	add	r3, r1
 80065ee:	3302      	adds	r3, #2
 80065f0:	4602      	mov	r2, r0
 80065f2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80065f4:	491b      	ldr	r1, [pc, #108]	@ (8006664 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	4613      	mov	r3, r2
 80065fa:	005b      	lsls	r3, r3, #1
 80065fc:	4413      	add	r3, r2
 80065fe:	005b      	lsls	r3, r3, #1
 8006600:	440b      	add	r3, r1
 8006602:	3304      	adds	r3, #4
 8006604:	2218      	movs	r2, #24
 8006606:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 8006608:	4916      	ldr	r1, [pc, #88]	@ (8006664 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800660a:	697a      	ldr	r2, [r7, #20]
 800660c:	4613      	mov	r3, r2
 800660e:	005b      	lsls	r3, r3, #1
 8006610:	4413      	add	r3, r2
 8006612:	005b      	lsls	r3, r3, #1
 8006614:	440b      	add	r3, r1
 8006616:	2202      	movs	r2, #2
 8006618:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800661a:	697b      	ldr	r3, [r7, #20]
 800661c:	224c      	movs	r2, #76	@ 0x4c
 800661e:	fb02 f303 	mul.w	r3, r2, r3
 8006622:	4a0d      	ldr	r2, [pc, #52]	@ (8006658 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8006624:	1898      	adds	r0, r3, r2
 8006626:	697a      	ldr	r2, [r7, #20]
 8006628:	4613      	mov	r3, r2
 800662a:	005b      	lsls	r3, r3, #1
 800662c:	4413      	add	r3, r2
 800662e:	005b      	lsls	r3, r3, #1
 8006630:	4a0c      	ldr	r2, [pc, #48]	@ (8006664 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 8006632:	4413      	add	r3, r2
 8006634:	4619      	mov	r1, r3
 8006636:	f016 f8a3 	bl	801c780 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 800663a:	697b      	ldr	r3, [r7, #20]
 800663c:	3301      	adds	r3, #1
 800663e:	617b      	str	r3, [r7, #20]
 8006640:	697a      	ldr	r2, [r7, #20]
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	429a      	cmp	r2, r3
 8006646:	d38c      	bcc.n	8006562 <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8006648:	2300      	movs	r3, #0
}
 800664a:	4618      	mov	r0, r3
 800664c:	3718      	adds	r7, #24
 800664e:	46bd      	mov	sp, r7
 8006650:	bd80      	pop	{r7, pc}
 8006652:	bf00      	nop
 8006654:	58024400 	.word	0x58024400
 8006658:	240059ec 	.word	0x240059ec
 800665c:	7e809d48 	.word	0x7e809d48
 8006660:	10624dd3 	.word	0x10624dd3
 8006664:	24005a84 	.word	0x24005a84

08006668 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b086      	sub	sp, #24
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 8006674:	2300      	movs	r3, #0
 8006676:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	2b01      	cmp	r3, #1
 800667c:	d002      	beq.n	8006684 <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 800667e:	f06f 0301 	mvn.w	r3, #1
 8006682:	e022      	b.n	80066ca <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8006684:	2300      	movs	r3, #0
 8006686:	617b      	str	r3, [r7, #20]
 8006688:	e012      	b.n	80066b0 <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 800668a:	68ba      	ldr	r2, [r7, #8]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	18d0      	adds	r0, r2, r3
 8006690:	697b      	ldr	r3, [r7, #20]
 8006692:	005b      	lsls	r3, r3, #1
 8006694:	687a      	ldr	r2, [r7, #4]
 8006696:	18d1      	adds	r1, r2, r3
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	224c      	movs	r2, #76	@ 0x4c
 800669c:	fb02 f303 	mul.w	r3, r2, r3
 80066a0:	4a0c      	ldr	r2, [pc, #48]	@ (80066d4 <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 80066a2:	4413      	add	r3, r2
 80066a4:	461a      	mov	r2, r3
 80066a6:	f016 f959 	bl	801c95c <PDM_Filter>
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 80066aa:	697b      	ldr	r3, [r7, #20]
 80066ac:	3301      	adds	r3, #1
 80066ae:	617b      	str	r3, [r7, #20]
 80066b0:	4909      	ldr	r1, [pc, #36]	@ (80066d8 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 80066b2:	68fa      	ldr	r2, [r7, #12]
 80066b4:	4613      	mov	r3, r2
 80066b6:	005b      	lsls	r3, r3, #1
 80066b8:	4413      	add	r3, r2
 80066ba:	011b      	lsls	r3, r3, #4
 80066bc:	440b      	add	r3, r1
 80066be:	3310      	adds	r3, #16
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	697a      	ldr	r2, [r7, #20]
 80066c4:	429a      	cmp	r2, r3
 80066c6:	d3e0      	bcc.n	800668a <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3718      	adds	r7, #24
 80066ce:	46bd      	mov	sp, r7
 80066d0:	bd80      	pop	{r7, pc}
 80066d2:	bf00      	nop
 80066d4:	240059ec 	.word	0x240059ec
 80066d8:	24005c0c 	.word	0x24005c0c

080066dc <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80066e4:	2300      	movs	r3, #0
 80066e6:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2b01      	cmp	r3, #1
 80066ec:	d903      	bls.n	80066f6 <BSP_AUDIO_IN_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80066ee:	f06f 0301 	mvn.w	r3, #1
 80066f2:	60fb      	str	r3, [r7, #12]
 80066f4:	e01c      	b.n	8006730 <BSP_AUDIO_IN_Stop+0x54>
  }
  else
  {

      if(Instance == 0U)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2b00      	cmp	r3, #0
 80066fa:	d10d      	bne.n	8006718 <BSP_AUDIO_IN_Stop+0x3c>
      {
        /* Call the Media layer stop function */
        if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 80066fc:	4b14      	ldr	r3, [pc, #80]	@ (8006750 <BSP_AUDIO_IN_Stop+0x74>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	699b      	ldr	r3, [r3, #24]
 8006702:	4a14      	ldr	r2, [pc, #80]	@ (8006754 <BSP_AUDIO_IN_Stop+0x78>)
 8006704:	6812      	ldr	r2, [r2, #0]
 8006706:	2101      	movs	r1, #1
 8006708:	4610      	mov	r0, r2
 800670a:	4798      	blx	r3
 800670c:	4603      	mov	r3, r0
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <BSP_AUDIO_IN_Stop+0x3c>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8006712:	f06f 0304 	mvn.w	r3, #4
 8006716:	60fb      	str	r3, [r7, #12]
        }
      }

      if(ret == BSP_ERROR_NONE)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d108      	bne.n	8006730 <BSP_AUDIO_IN_Stop+0x54>
      {
        if(HAL_SAI_DMAStop(&haudio_in_sai) != HAL_OK)
 800671e:	480e      	ldr	r0, [pc, #56]	@ (8006758 <BSP_AUDIO_IN_Stop+0x7c>)
 8006720:	f00d f97c 	bl	8013a1c <HAL_SAI_DMAStop>
 8006724:	4603      	mov	r3, r0
 8006726:	2b00      	cmp	r3, #0
 8006728:	d002      	beq.n	8006730 <BSP_AUDIO_IN_Stop+0x54>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800672a:	f06f 0303 	mvn.w	r3, #3
 800672e:	60fb      	str	r3, [r7, #12]
      }
    }


    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8006730:	490a      	ldr	r1, [pc, #40]	@ (800675c <BSP_AUDIO_IN_Stop+0x80>)
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	4613      	mov	r3, r2
 8006736:	005b      	lsls	r3, r3, #1
 8006738:	4413      	add	r3, r2
 800673a:	011b      	lsls	r3, r3, #4
 800673c:	440b      	add	r3, r1
 800673e:	3324      	adds	r3, #36	@ 0x24
 8006740:	2202      	movs	r2, #2
 8006742:	601a      	str	r2, [r3, #0]

  /* Return BSP status */
  return ret;
 8006744:	68fb      	ldr	r3, [r7, #12]
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	240059e8 	.word	0x240059e8
 8006754:	24005a90 	.word	0x24005a90
 8006758:	24005b2c 	.word	0x24005b2c
 800675c:	24005c0c 	.word	0x24005c0c

08006760 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes  Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b086      	sub	sp, #24
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800676c:	2300      	movs	r3, #0
 800676e:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	2b01      	cmp	r3, #1
 8006774:	d003      	beq.n	800677e <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8006776:	f06f 0301 	mvn.w	r3, #1
 800677a:	617b      	str	r3, [r7, #20]
 800677c:	e018      	b.n	80067b0 <BSP_AUDIO_IN_RecordPDM+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800677e:	490f      	ldr	r1, [pc, #60]	@ (80067bc <BSP_AUDIO_IN_RecordPDM+0x5c>)
 8006780:	68fa      	ldr	r2, [r7, #12]
 8006782:	4613      	mov	r3, r2
 8006784:	005b      	lsls	r3, r3, #1
 8006786:	4413      	add	r3, r2
 8006788:	011b      	lsls	r3, r3, #4
 800678a:	440b      	add	r3, r1
 800678c:	330c      	adds	r3, #12
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	08db      	lsrs	r3, r3, #3
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	fbb2 f3f3 	udiv	r3, r2, r3
 8006798:	b29b      	uxth	r3, r3
 800679a:	461a      	mov	r2, r3
 800679c:	68b9      	ldr	r1, [r7, #8]
 800679e:	4808      	ldr	r0, [pc, #32]	@ (80067c0 <BSP_AUDIO_IN_RecordPDM+0x60>)
 80067a0:	f00d fa70 	bl	8013c84 <HAL_SAI_Receive_DMA>
 80067a4:	4603      	mov	r3, r0
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <BSP_AUDIO_IN_RecordPDM+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 80067aa:	f06f 0303 	mvn.w	r3, #3
 80067ae:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 80067b0:	697b      	ldr	r3, [r7, #20]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}
 80067ba:	bf00      	nop
 80067bc:	24005c0c 	.word	0x24005c0c
 80067c0:	24005b2c 	.word	0x24005b2c

080067c4 <BSP_AUDIO_IN_GetState>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 80067c4:	b480      	push	{r7}
 80067c6:	b085      	sub	sp, #20
 80067c8:	af00      	add	r7, sp, #0
 80067ca:	6078      	str	r0, [r7, #4]
 80067cc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80067ce:	2300      	movs	r3, #0
 80067d0:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	2b01      	cmp	r3, #1
 80067d6:	d903      	bls.n	80067e0 <BSP_AUDIO_IN_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80067d8:	f06f 0301 	mvn.w	r3, #1
 80067dc:	60fb      	str	r3, [r7, #12]
 80067de:	e00a      	b.n	80067f6 <BSP_AUDIO_IN_GetState+0x32>
  }
  else
  {
    /* Input State to be returned */
    *State = Audio_In_Ctx[Instance].State;
 80067e0:	4908      	ldr	r1, [pc, #32]	@ (8006804 <BSP_AUDIO_IN_GetState+0x40>)
 80067e2:	687a      	ldr	r2, [r7, #4]
 80067e4:	4613      	mov	r3, r2
 80067e6:	005b      	lsls	r3, r3, #1
 80067e8:	4413      	add	r3, r2
 80067ea:	011b      	lsls	r3, r3, #4
 80067ec:	440b      	add	r3, r1
 80067ee:	3324      	adds	r3, #36	@ 0x24
 80067f0:	681a      	ldr	r2, [r3, #0]
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	601a      	str	r2, [r3, #0]
  }
  return ret;
 80067f6:	68fb      	ldr	r3, [r7, #12]
}
 80067f8:	4618      	mov	r0, r3
 80067fa:	3714      	adds	r7, #20
 80067fc:	46bd      	mov	sp, r7
 80067fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006802:	4770      	bx	lr
 8006804:	24005c0c 	.word	0x24005c0c

08006808 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_ANALOG_MIC
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8006808:	b580      	push	{r7, lr}
 800680a:	b082      	sub	sp, #8
 800680c:	af00      	add	r7, sp, #0
 800680e:	6078      	str	r0, [r7, #4]
 8006810:	6039      	str	r1, [r7, #0]
  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 8006812:	683b      	ldr	r3, [r7, #0]
 8006814:	2b10      	cmp	r3, #16
 8006816:	d002      	beq.n	800681e <BSP_AUDIO_IN_IRQHandler+0x16>
 8006818:	683b      	ldr	r3, [r7, #0]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d105      	bne.n	800682a <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800681e:	4b05      	ldr	r3, [pc, #20]	@ (8006834 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8006820:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006824:	4618      	mov	r0, r3
 8006826:	f004 fc2b 	bl	800b080 <HAL_DMA_IRQHandler>
  }
}
 800682a:	bf00      	nop
 800682c:	3708      	adds	r7, #8
 800682e:	46bd      	mov	sp, r7
 8006830:	bd80      	pop	{r7, pc}
 8006832:	bf00      	nop
 8006834:	24005b2c 	.word	0x24005b2c

08006838 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
 800683e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the first half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	681b      	ldr	r3, [r3, #0]
 8006844:	4a06      	ldr	r2, [pc, #24]	@ (8006860 <HAL_SAI_RxHalfCpltCallback+0x28>)
 8006846:	4293      	cmp	r3, r2
 8006848:	d103      	bne.n	8006852 <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 800684a:	2000      	movs	r0, #0
 800684c:	f7fd ff1e 	bl	800468c <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 8006850:	e002      	b.n	8006858 <HAL_SAI_RxHalfCpltCallback+0x20>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 8006852:	2001      	movs	r0, #1
 8006854:	f7fd ff1a 	bl	800468c <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 8006858:	bf00      	nop
 800685a:	3708      	adds	r7, #8
 800685c:	46bd      	mov	sp, r7
 800685e:	bd80      	pop	{r7, pc}
 8006860:	40015824 	.word	0x40015824

08006864 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b082      	sub	sp, #8
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the second half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	4a06      	ldr	r2, [pc, #24]	@ (800688c <HAL_SAI_RxCpltCallback+0x28>)
 8006872:	4293      	cmp	r3, r2
 8006874:	d103      	bne.n	800687e <HAL_SAI_RxCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 8006876:	2000      	movs	r0, #0
 8006878:	f7fd fe7a 	bl	8004570 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 800687c:	e002      	b.n	8006884 <HAL_SAI_RxCpltCallback+0x20>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 800687e:	2001      	movs	r0, #1
 8006880:	f7fd fe76 	bl	8004570 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 8006884:	bf00      	nop
 8006886:	3708      	adds	r7, #8
 8006888:	46bd      	mov	sp, r7
 800688a:	bd80      	pop	{r7, pc}
 800688c:	40015824 	.word	0x40015824

08006890 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b088      	sub	sp, #32
 8006894:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006896:	2300      	movs	r3, #0
 8006898:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 800689a:	2334      	movs	r3, #52	@ 0x34
 800689c:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 800689e:	4b20      	ldr	r3, [pc, #128]	@ (8006920 <WM8994_Probe+0x90>)
 80068a0:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 80068a2:	4b20      	ldr	r3, [pc, #128]	@ (8006924 <WM8994_Probe+0x94>)
 80068a4:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 80068a6:	4b20      	ldr	r3, [pc, #128]	@ (8006928 <WM8994_Probe+0x98>)
 80068a8:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 80068aa:	4b20      	ldr	r3, [pc, #128]	@ (800692c <WM8994_Probe+0x9c>)
 80068ac:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 80068ae:	4b20      	ldr	r3, [pc, #128]	@ (8006930 <WM8994_Probe+0xa0>)
 80068b0:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 80068b2:	1d3b      	adds	r3, r7, #4
 80068b4:	4619      	mov	r1, r3
 80068b6:	481f      	ldr	r0, [pc, #124]	@ (8006934 <WM8994_Probe+0xa4>)
 80068b8:	f7fd fb0a 	bl	8003ed0 <WM8994_RegisterBusIO>
 80068bc:	4603      	mov	r3, r0
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d003      	beq.n	80068ca <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 80068c2:	f06f 0307 	mvn.w	r3, #7
 80068c6:	61fb      	str	r3, [r7, #28]
 80068c8:	e024      	b.n	8006914 <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 80068ca:	481a      	ldr	r0, [pc, #104]	@ (8006934 <WM8994_Probe+0xa4>)
 80068cc:	f7fd fae8 	bl	8003ea0 <WM8994_Reset>
 80068d0:	4603      	mov	r3, r0
 80068d2:	2b00      	cmp	r3, #0
 80068d4:	d003      	beq.n	80068de <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80068d6:	f06f 0304 	mvn.w	r3, #4
 80068da:	61fb      	str	r3, [r7, #28]
 80068dc:	e01a      	b.n	8006914 <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 80068de:	463b      	mov	r3, r7
 80068e0:	4619      	mov	r1, r3
 80068e2:	4814      	ldr	r0, [pc, #80]	@ (8006934 <WM8994_Probe+0xa4>)
 80068e4:	f7fc fcd7 	bl	8003296 <WM8994_ReadID>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80068ee:	f06f 0304 	mvn.w	r3, #4
 80068f2:	61fb      	str	r3, [r7, #28]
 80068f4:	e00e      	b.n	8006914 <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	f648 1294 	movw	r2, #35220	@ 0x8994
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d003      	beq.n	8006908 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8006900:	f06f 0306 	mvn.w	r3, #6
 8006904:	61fb      	str	r3, [r7, #28]
 8006906:	e005      	b.n	8006914 <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 8006908:	4b0b      	ldr	r3, [pc, #44]	@ (8006938 <WM8994_Probe+0xa8>)
 800690a:	4a0c      	ldr	r2, [pc, #48]	@ (800693c <WM8994_Probe+0xac>)
 800690c:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 800690e:	4b0c      	ldr	r3, [pc, #48]	@ (8006940 <WM8994_Probe+0xb0>)
 8006910:	4a08      	ldr	r2, [pc, #32]	@ (8006934 <WM8994_Probe+0xa4>)
 8006912:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 8006914:	69fb      	ldr	r3, [r7, #28]
}
 8006916:	4618      	mov	r0, r3
 8006918:	3720      	adds	r7, #32
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	08006f65 	.word	0x08006f65
 8006924:	08006fd9 	.word	0x08006fd9
 8006928:	08007101 	.word	0x08007101
 800692c:	080070a5 	.word	0x080070a5
 8006930:	0800715d 	.word	0x0800715d
 8006934:	24005c6c 	.word	0x24005c6c
 8006938:	240059e8 	.word	0x240059e8
 800693c:	240004a0 	.word	0x240004a0
 8006940:	24005a90 	.word	0x24005a90

08006944 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b098      	sub	sp, #96	@ 0x60
 8006948:	af00      	add	r7, sp, #0
 800694a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800694c:	4b75      	ldr	r3, [pc, #468]	@ (8006b24 <SAI_MspInit+0x1e0>)
 800694e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006952:	4a74      	ldr	r2, [pc, #464]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006954:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006958:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800695c:	4b71      	ldr	r3, [pc, #452]	@ (8006b24 <SAI_MspInit+0x1e0>)
 800695e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006962:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006966:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006968:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
 800696a:	4b6e      	ldr	r3, [pc, #440]	@ (8006b24 <SAI_MspInit+0x1e0>)
 800696c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006970:	4a6c      	ldr	r2, [pc, #432]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006972:	f043 0310 	orr.w	r3, r3, #16
 8006976:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800697a:	4b6a      	ldr	r3, [pc, #424]	@ (8006b24 <SAI_MspInit+0x1e0>)
 800697c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006980:	f003 0310 	and.w	r3, r3, #16
 8006984:	647b      	str	r3, [r7, #68]	@ 0x44
 8006986:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    AUDIO_OUT_SAIx_SD_ENABLE();
 8006988:	4b66      	ldr	r3, [pc, #408]	@ (8006b24 <SAI_MspInit+0x1e0>)
 800698a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800698e:	4a65      	ldr	r2, [pc, #404]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006990:	f043 0310 	orr.w	r3, r3, #16
 8006994:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006998:	4b62      	ldr	r3, [pc, #392]	@ (8006b24 <SAI_MspInit+0x1e0>)
 800699a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800699e:	f003 0310 	and.w	r3, r3, #16
 80069a2:	643b      	str	r3, [r7, #64]	@ 0x40
 80069a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    AUDIO_OUT_SAIx_FS_ENABLE();
 80069a6:	4b5f      	ldr	r3, [pc, #380]	@ (8006b24 <SAI_MspInit+0x1e0>)
 80069a8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069ac:	4a5d      	ldr	r2, [pc, #372]	@ (8006b24 <SAI_MspInit+0x1e0>)
 80069ae:	f043 0310 	orr.w	r3, r3, #16
 80069b2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80069b6:	4b5b      	ldr	r3, [pc, #364]	@ (8006b24 <SAI_MspInit+0x1e0>)
 80069b8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80069bc:	f003 0310 	and.w	r3, r3, #16
 80069c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80069c2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 80069c4:	2310      	movs	r3, #16
 80069c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80069c8:	2302      	movs	r3, #2
 80069ca:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 80069cc:	2300      	movs	r3, #0
 80069ce:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80069d0:	2303      	movs	r3, #3
 80069d2:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 80069d4:	2306      	movs	r3, #6
 80069d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 80069d8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80069dc:	4619      	mov	r1, r3
 80069de:	4852      	ldr	r0, [pc, #328]	@ (8006b28 <SAI_MspInit+0x1e4>)
 80069e0:	f006 ff66 	bl	800d8b0 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 80069e4:	2320      	movs	r3, #32
 80069e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 80069e8:	2306      	movs	r3, #6
 80069ea:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 80069ec:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80069f0:	4619      	mov	r1, r3
 80069f2:	484d      	ldr	r0, [pc, #308]	@ (8006b28 <SAI_MspInit+0x1e4>)
 80069f4:	f006 ff5c 	bl	800d8b0 <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 80069f8:	2340      	movs	r3, #64	@ 0x40
 80069fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 80069fc:	2306      	movs	r3, #6
 80069fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8006a00:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006a04:	4619      	mov	r1, r3
 8006a06:	4848      	ldr	r0, [pc, #288]	@ (8006b28 <SAI_MspInit+0x1e4>)
 8006a08:	f006 ff52 	bl	800d8b0 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	4a46      	ldr	r2, [pc, #280]	@ (8006b2c <SAI_MspInit+0x1e8>)
 8006a12:	4293      	cmp	r3, r2
 8006a14:	d01e      	beq.n	8006a54 <SAI_MspInit+0x110>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 8006a16:	4b46      	ldr	r3, [pc, #280]	@ (8006b30 <SAI_MspInit+0x1ec>)
 8006a18:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8006a1c:	b2db      	uxtb	r3, r3
 8006a1e:	2b01      	cmp	r3, #1
 8006a20:	d018      	beq.n	8006a54 <SAI_MspInit+0x110>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 8006a22:	4b40      	ldr	r3, [pc, #256]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a28:	4a3e      	ldr	r2, [pc, #248]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a2a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006a2e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a32:	4b3c      	ldr	r3, [pc, #240]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a34:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a3c:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006a3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8006a40:	2380      	movs	r3, #128	@ 0x80
 8006a42:	64fb      	str	r3, [r7, #76]	@ 0x4c
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 8006a44:	2306      	movs	r3, #6
 8006a46:	65fb      	str	r3, [r7, #92]	@ 0x5c
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 8006a48:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006a4c:	4619      	mov	r1, r3
 8006a4e:	4839      	ldr	r0, [pc, #228]	@ (8006b34 <SAI_MspInit+0x1f0>)
 8006a50:	f006 ff2e 	bl	800d8b0 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 8006a54:	687b      	ldr	r3, [r7, #4]
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	4a37      	ldr	r2, [pc, #220]	@ (8006b38 <SAI_MspInit+0x1f4>)
 8006a5a:	4293      	cmp	r3, r2
 8006a5c:	f040 80b3 	bne.w	8006bc6 <SAI_MspInit+0x282>
  {

	    /* Enable SAI clock */
    __HAL_RCC_SAI1_CLK_ENABLE();
 8006a60:	4b30      	ldr	r3, [pc, #192]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a62:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a66:	4a2f      	ldr	r2, [pc, #188]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a68:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006a6c:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006a70:	4b2c      	ldr	r3, [pc, #176]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a72:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006a76:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006a7a:	637b      	str	r3, [r7, #52]	@ 0x34
 8006a7c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

  /* CODEC_SAI pins configuration: FS, SCK and SD pins */
  /* Enable FS, SCK and SD clocks */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 8006a7e:	4b29      	ldr	r3, [pc, #164]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a84:	4a27      	ldr	r2, [pc, #156]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a86:	f043 0310 	orr.w	r3, r3, #16
 8006a8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006a8e:	4b25      	ldr	r3, [pc, #148]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006a90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006a94:	f003 0310 	and.w	r3, r3, #16
 8006a98:	633b      	str	r3, [r7, #48]	@ 0x30
 8006a9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  /* Enable FS, SCK and SD pins */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8006a9c:	2370      	movs	r3, #112	@ 0x70
 8006a9e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006aa0:	2302      	movs	r3, #2
 8006aa2:	653b      	str	r3, [r7, #80]	@ 0x50
  gpio_init_structure.Pull = GPIO_NOPULL;
 8006aa4:	2300      	movs	r3, #0
 8006aa6:	657b      	str	r3, [r7, #84]	@ 0x54
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006aa8:	2303      	movs	r3, #3
 8006aaa:	65bb      	str	r3, [r7, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 8006aac:	2306      	movs	r3, #6
 8006aae:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8006ab0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006ab4:	4619      	mov	r1, r3
 8006ab6:	481c      	ldr	r0, [pc, #112]	@ (8006b28 <SAI_MspInit+0x1e4>)
 8006ab8:	f006 fefa 	bl	800d8b0 <HAL_GPIO_Init>

  /* Enable MCLK clock */
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8006abc:	4b19      	ldr	r3, [pc, #100]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006abe:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ac2:	4a18      	ldr	r2, [pc, #96]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006ac4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006ac8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006acc:	4b15      	ldr	r3, [pc, #84]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006ace:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ad2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ad6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006ad8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Enable MCLK pin */
  gpio_init_structure.Pin = GPIO_PIN_7;
 8006ada:	2380      	movs	r3, #128	@ 0x80
 8006adc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8006ade:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006ae2:	4619      	mov	r1, r3
 8006ae4:	4813      	ldr	r0, [pc, #76]	@ (8006b34 <SAI_MspInit+0x1f0>)
 8006ae6:	f006 fee3 	bl	800d8b0 <HAL_GPIO_Init>


    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8006aea:	4b0e      	ldr	r3, [pc, #56]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006aec:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006af0:	4a0c      	ldr	r2, [pc, #48]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006af2:	f043 0302 	orr.w	r3, r3, #2
 8006af6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006afa:	4b0a      	ldr	r3, [pc, #40]	@ (8006b24 <SAI_MspInit+0x1e0>)
 8006afc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006b00:	f003 0302 	and.w	r3, r3, #2
 8006b04:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b06:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure the hdma_saiTx handle parameters */
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8006b08:	4b0c      	ldr	r3, [pc, #48]	@ (8006b3c <SAI_MspInit+0x1f8>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	2b10      	cmp	r3, #16
 8006b0e:	d119      	bne.n	8006b44 <SAI_MspInit+0x200>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006b10:	4b0b      	ldr	r3, [pc, #44]	@ (8006b40 <SAI_MspInit+0x1fc>)
 8006b12:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006b16:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8006b18:	4b09      	ldr	r3, [pc, #36]	@ (8006b40 <SAI_MspInit+0x1fc>)
 8006b1a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006b1e:	619a      	str	r2, [r3, #24]
 8006b20:	e018      	b.n	8006b54 <SAI_MspInit+0x210>
 8006b22:	bf00      	nop
 8006b24:	58024400 	.word	0x58024400
 8006b28:	58021000 	.word	0x58021000
 8006b2c:	58005404 	.word	0x58005404
 8006b30:	24005b2c 	.word	0x24005b2c
 8006b34:	58021800 	.word	0x58021800
 8006b38:	40015804 	.word	0x40015804
 8006b3c:	24005bc4 	.word	0x24005bc4
 8006b40:	24005c94 	.word	0x24005c94
    }
    else
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8006b44:	4baf      	ldr	r3, [pc, #700]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b46:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8006b4a:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 8006b4c:	4bad      	ldr	r3, [pc, #692]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b4e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8006b52:	619a      	str	r2, [r3, #24]
    }

    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 8006b54:	4bab      	ldr	r3, [pc, #684]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b56:	2257      	movs	r2, #87	@ 0x57
 8006b58:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006b5a:	4baa      	ldr	r3, [pc, #680]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b5c:	2200      	movs	r2, #0
 8006b5e:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 8006b60:	4ba8      	ldr	r3, [pc, #672]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b62:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006b66:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 8006b68:	4ba6      	ldr	r3, [pc, #664]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b6a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006b6e:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006b70:	4ba4      	ldr	r3, [pc, #656]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b72:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006b76:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 8006b78:	4ba2      	ldr	r3, [pc, #648]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b7a:	2204      	movs	r2, #4
 8006b7c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006b7e:	4ba1      	ldr	r3, [pc, #644]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b80:	2203      	movs	r2, #3
 8006b82:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 8006b84:	4b9f      	ldr	r3, [pc, #636]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b86:	2240      	movs	r2, #64	@ 0x40
 8006b88:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 8006b8a:	4b9e      	ldr	r3, [pc, #632]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b8c:	4a9e      	ldr	r2, [pc, #632]	@ (8006e08 <SAI_MspInit+0x4c4>)
 8006b8e:	601a      	str	r2, [r3, #0]
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006b90:	4b9c      	ldr	r3, [pc, #624]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b92:	2200      	movs	r2, #0
 8006b94:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 8006b96:	4b9b      	ldr	r3, [pc, #620]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	4a99      	ldr	r2, [pc, #612]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006ba0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 8006ba4:	4a97      	ldr	r2, [pc, #604]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8006baa:	4896      	ldr	r0, [pc, #600]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006bac:	f003 f8e4 	bl	8009d78 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 8006bb0:	4894      	ldr	r0, [pc, #592]	@ (8006e04 <SAI_MspInit+0x4c0>)
 8006bb2:	f002 fd85 	bl	80096c0 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 8006bb6:	2200      	movs	r2, #0
 8006bb8:	210e      	movs	r1, #14
 8006bba:	2039      	movs	r0, #57	@ 0x39
 8006bbc:	f002 fb9c 	bl	80092f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006bc0:	2039      	movs	r0, #57	@ 0x39
 8006bc2:	f002 fbb3 	bl	800932c <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	681b      	ldr	r3, [r3, #0]
 8006bca:	4a90      	ldr	r2, [pc, #576]	@ (8006e0c <SAI_MspInit+0x4c8>)
 8006bcc:	4293      	cmp	r3, r2
 8006bce:	f040 80b8 	bne.w	8006d42 <SAI_MspInit+0x3fe>
  {
     /* Enable SAI clock */
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 8006bd2:	4b8f      	ldr	r3, [pc, #572]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006bd8:	4a8d      	ldr	r2, [pc, #564]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006bda:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006bde:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8006be2:	4b8b      	ldr	r3, [pc, #556]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006be4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8006be8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8006bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8006bf0:	4b87      	ldr	r3, [pc, #540]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006bf2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006bf6:	4a86      	ldr	r2, [pc, #536]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006bf8:	f043 0310 	orr.w	r3, r3, #16
 8006bfc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c00:	4b83      	ldr	r3, [pc, #524]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c02:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c06:	f003 0310 	and.w	r3, r3, #16
 8006c0a:	623b      	str	r3, [r7, #32]
 8006c0c:	6a3b      	ldr	r3, [r7, #32]
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8006c0e:	4b80      	ldr	r3, [pc, #512]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c14:	4a7e      	ldr	r2, [pc, #504]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c16:	f043 0304 	orr.w	r3, r3, #4
 8006c1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c1e:	4b7c      	ldr	r3, [pc, #496]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c24:	f003 0304 	and.w	r3, r3, #4
 8006c28:	61fb      	str	r3, [r7, #28]
 8006c2a:	69fb      	ldr	r3, [r7, #28]

     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 8006c2c:	2304      	movs	r3, #4
 8006c2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006c30:	2302      	movs	r3, #2
 8006c32:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006c34:	2300      	movs	r3, #0
 8006c36:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c38:	2302      	movs	r3, #2
 8006c3a:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 8006c3c:	230a      	movs	r3, #10
 8006c3e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 8006c40:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006c44:	4619      	mov	r1, r3
 8006c46:	4873      	ldr	r0, [pc, #460]	@ (8006e14 <SAI_MspInit+0x4d0>)
 8006c48:	f006 fe32 	bl	800d8b0 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 8006c4c:	2301      	movs	r3, #1
 8006c4e:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8006c50:	2301      	movs	r3, #1
 8006c52:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 8006c54:	2302      	movs	r3, #2
 8006c56:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 8006c58:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006c5c:	4619      	mov	r1, r3
 8006c5e:	486e      	ldr	r0, [pc, #440]	@ (8006e18 <SAI_MspInit+0x4d4>)
 8006c60:	f006 fe26 	bl	800d8b0 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 8006c64:	4b6a      	ldr	r3, [pc, #424]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c66:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c6a:	4a69      	ldr	r2, [pc, #420]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c6c:	f043 0310 	orr.w	r3, r3, #16
 8006c70:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006c74:	4b66      	ldr	r3, [pc, #408]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006c7a:	f003 0310 	and.w	r3, r3, #16
 8006c7e:	61bb      	str	r3, [r7, #24]
 8006c80:	69bb      	ldr	r3, [r7, #24]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 8006c82:	2330      	movs	r3, #48	@ 0x30
 8006c84:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006c86:	2302      	movs	r3, #2
 8006c88:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006c8a:	2300      	movs	r3, #0
 8006c8c:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006c8e:	2302      	movs	r3, #2
 8006c90:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 8006c92:	2308      	movs	r3, #8
 8006c94:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 8006c96:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	485d      	ldr	r0, [pc, #372]	@ (8006e14 <SAI_MspInit+0x4d0>)
 8006c9e:	f006 fe07 	bl	800d8b0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
      __HAL_RCC_BDMA_CLK_ENABLE();
 8006ca2:	4b5b      	ldr	r3, [pc, #364]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006ca4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006ca8:	4a59      	ldr	r2, [pc, #356]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006caa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8006cae:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006cb2:	4b57      	ldr	r3, [pc, #348]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006cb4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006cb8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8006cbc:	617b      	str	r3, [r7, #20]
 8006cbe:	697b      	ldr	r3, [r7, #20]
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8006cc0:	4b56      	ldr	r3, [pc, #344]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cc2:	220f      	movs	r2, #15
 8006cc4:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006cc6:	4b55      	ldr	r3, [pc, #340]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cc8:	2200      	movs	r2, #0
 8006cca:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006ccc:	4b53      	ldr	r3, [pc, #332]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cce:	2200      	movs	r2, #0
 8006cd0:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006cd2:	4b52      	ldr	r3, [pc, #328]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cd4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006cd8:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8006cda:	4b50      	ldr	r3, [pc, #320]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cdc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006ce0:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 8006ce2:	4b4e      	ldr	r3, [pc, #312]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006ce4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006ce8:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8006cea:	4b4c      	ldr	r3, [pc, #304]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cec:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006cf0:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006cf2:	4b4a      	ldr	r3, [pc, #296]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cf4:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006cf8:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006cfa:	4b48      	ldr	r3, [pc, #288]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006d00:	4b46      	ldr	r3, [pc, #280]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d02:	2203      	movs	r2, #3
 8006d04:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006d06:	4b45      	ldr	r3, [pc, #276]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d08:	2200      	movs	r2, #0
 8006d0a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006d0c:	4b43      	ldr	r3, [pc, #268]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d0e:	2200      	movs	r2, #0
 8006d10:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 8006d12:	4b42      	ldr	r3, [pc, #264]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d14:	4a42      	ldr	r2, [pc, #264]	@ (8006e20 <SAI_MspInit+0x4dc>)
 8006d16:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	4a40      	ldr	r2, [pc, #256]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d1c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8006d20:	4a3e      	ldr	r2, [pc, #248]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8006d26:	483d      	ldr	r0, [pc, #244]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d28:	f003 f826 	bl	8009d78 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8006d2c:	483b      	ldr	r0, [pc, #236]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006d2e:	f002 fcc7 	bl	80096c0 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8006d32:	2200      	movs	r2, #0
 8006d34:	210f      	movs	r1, #15
 8006d36:	2082      	movs	r0, #130	@ 0x82
 8006d38:	f002 fade 	bl	80092f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 8006d3c:	2082      	movs	r0, #130	@ 0x82
 8006d3e:	f002 faf5 	bl	800932c <HAL_NVIC_EnableIRQ>
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	4a37      	ldr	r2, [pc, #220]	@ (8006e24 <SAI_MspInit+0x4e0>)
 8006d48:	4293      	cmp	r3, r2
 8006d4a:	f040 8091 	bne.w	8006e70 <SAI_MspInit+0x52c>
  {
        /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 8006d4e:	4b30      	ldr	r3, [pc, #192]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006d50:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d54:	4a2e      	ldr	r2, [pc, #184]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006d56:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8006d5a:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8006d5e:	4b2c      	ldr	r3, [pc, #176]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006d60:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006d64:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006d68:	613b      	str	r3, [r7, #16]
 8006d6a:	693b      	ldr	r3, [r7, #16]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 8006d6c:	4b28      	ldr	r3, [pc, #160]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006d6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d72:	4a27      	ldr	r2, [pc, #156]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006d74:	f043 0310 	orr.w	r3, r3, #16
 8006d78:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8006d7c:	4b24      	ldr	r3, [pc, #144]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006d7e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8006d82:	f003 0310 	and.w	r3, r3, #16
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	68fb      	ldr	r3, [r7, #12]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006d8a:	2308      	movs	r3, #8
 8006d8c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8006d8e:	2302      	movs	r3, #2
 8006d90:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8006d92:	2300      	movs	r3, #0
 8006d94:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8006d96:	2302      	movs	r3, #2
 8006d98:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8006d9a:	2306      	movs	r3, #6
 8006d9c:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8006d9e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8006da2:	4619      	mov	r1, r3
 8006da4:	481b      	ldr	r0, [pc, #108]	@ (8006e14 <SAI_MspInit+0x4d0>)
 8006da6:	f006 fd83 	bl	800d8b0 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8006daa:	4b19      	ldr	r3, [pc, #100]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006dac:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006db0:	4a17      	ldr	r2, [pc, #92]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006db2:	f043 0302 	orr.w	r3, r3, #2
 8006db6:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8006dba:	4b15      	ldr	r3, [pc, #84]	@ (8006e10 <SAI_MspInit+0x4cc>)
 8006dbc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8006dc0:	f003 0302 	and.w	r3, r3, #2
 8006dc4:	60bb      	str	r3, [r7, #8]
 8006dc6:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8006dc8:	4b14      	ldr	r3, [pc, #80]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006dca:	2258      	movs	r2, #88	@ 0x58
 8006dcc:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8006dce:	4b13      	ldr	r3, [pc, #76]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006dd0:	2200      	movs	r2, #0
 8006dd2:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8006dd4:	4b11      	ldr	r3, [pc, #68]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8006dda:	4b10      	ldr	r3, [pc, #64]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006ddc:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8006de0:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8006de2:	4b0e      	ldr	r3, [pc, #56]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006de4:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006de8:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8006dea:	4b0c      	ldr	r3, [pc, #48]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006dec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8006df0:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8006df2:	4b0a      	ldr	r3, [pc, #40]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006df4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8006df8:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8006dfa:	4b08      	ldr	r3, [pc, #32]	@ (8006e1c <SAI_MspInit+0x4d8>)
 8006dfc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8006e00:	621a      	str	r2, [r3, #32]
 8006e02:	e011      	b.n	8006e28 <SAI_MspInit+0x4e4>
 8006e04:	24005c94 	.word	0x24005c94
 8006e08:	40020428 	.word	0x40020428
 8006e0c:	58005404 	.word	0x58005404
 8006e10:	58024400 	.word	0x58024400
 8006e14:	58021000 	.word	0x58021000
 8006e18:	58020800 	.word	0x58020800
 8006e1c:	24005d0c 	.word	0x24005d0c
 8006e20:	5802541c 	.word	0x5802541c
 8006e24:	40015824 	.word	0x40015824
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8006e28:	4b13      	ldr	r3, [pc, #76]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e2a:	2200      	movs	r2, #0
 8006e2c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8006e2e:	4b12      	ldr	r3, [pc, #72]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e30:	2203      	movs	r2, #3
 8006e32:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8006e34:	4b10      	ldr	r3, [pc, #64]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e36:	2200      	movs	r2, #0
 8006e38:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8006e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e3c:	2200      	movs	r2, #0
 8006e3e:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8006e40:	4b0d      	ldr	r3, [pc, #52]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e42:	4a0e      	ldr	r2, [pc, #56]	@ (8006e7c <SAI_MspInit+0x538>)
 8006e44:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a0b      	ldr	r2, [pc, #44]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e4a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8006e4e:	4a0a      	ldr	r2, [pc, #40]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8006e54:	4808      	ldr	r0, [pc, #32]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e56:	f002 ff8f 	bl	8009d78 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8006e5a:	4807      	ldr	r0, [pc, #28]	@ (8006e78 <SAI_MspInit+0x534>)
 8006e5c:	f002 fc30 	bl	80096c0 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8006e60:	2200      	movs	r2, #0
 8006e62:	210f      	movs	r1, #15
 8006e64:	203c      	movs	r0, #60	@ 0x3c
 8006e66:	f002 fa47 	bl	80092f8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006e6a:	203c      	movs	r0, #60	@ 0x3c
 8006e6c:	f002 fa5e 	bl	800932c <HAL_NVIC_EnableIRQ>

  }
}
 8006e70:	bf00      	nop
 8006e72:	3760      	adds	r7, #96	@ 0x60
 8006e74:	46bd      	mov	sp, r7
 8006e76:	bd80      	pop	{r7, pc}
 8006e78:	24005d0c 	.word	0x24005d0c
 8006e7c:	40020470 	.word	0x40020470

08006e80 <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b088      	sub	sp, #32
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	681b      	ldr	r3, [r3, #0]
 8006e8c:	4a30      	ldr	r2, [pc, #192]	@ (8006f50 <SAI_MspDeInit+0xd0>)
 8006e8e:	4293      	cmp	r3, r2
 8006e90:	d134      	bne.n	8006efc <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8006e92:	2039      	movs	r0, #57	@ 0x39
 8006e94:	f002 fa58 	bl	8009348 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006e9e:	4618      	mov	r0, r3
 8006ea0:	f002 ff6a 	bl	8009d78 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	681b      	ldr	r3, [r3, #0]
 8006ea8:	681a      	ldr	r2, [r3, #0]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	681b      	ldr	r3, [r3, #0]
 8006eae:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006eb2:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 8006eb4:	2310      	movs	r3, #16
 8006eb6:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 8006eb8:	68fb      	ldr	r3, [r7, #12]
 8006eba:	4619      	mov	r1, r3
 8006ebc:	4825      	ldr	r0, [pc, #148]	@ (8006f54 <SAI_MspDeInit+0xd4>)
 8006ebe:	f006 fea7 	bl	800dc10 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 8006ec2:	2320      	movs	r3, #32
 8006ec4:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, gpio_init_structure.Pin);
 8006ec6:	68fb      	ldr	r3, [r7, #12]
 8006ec8:	4619      	mov	r1, r3
 8006eca:	4822      	ldr	r0, [pc, #136]	@ (8006f54 <SAI_MspDeInit+0xd4>)
 8006ecc:	f006 fea0 	bl	800dc10 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8006ed0:	2340      	movs	r3, #64	@ 0x40
 8006ed2:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	4619      	mov	r1, r3
 8006ed8:	481e      	ldr	r0, [pc, #120]	@ (8006f54 <SAI_MspDeInit+0xd4>)
 8006eda:	f006 fe99 	bl	800dc10 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 8006ede:	2380      	movs	r3, #128	@ 0x80
 8006ee0:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 8006ee2:	68fb      	ldr	r3, [r7, #12]
 8006ee4:	4619      	mov	r1, r3
 8006ee6:	481c      	ldr	r0, [pc, #112]	@ (8006f58 <SAI_MspDeInit+0xd8>)
 8006ee8:	f006 fe92 	bl	800dc10 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 8006eec:	4b1b      	ldr	r3, [pc, #108]	@ (8006f5c <SAI_MspDeInit+0xdc>)
 8006eee:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006ef2:	4a1a      	ldr	r2, [pc, #104]	@ (8006f5c <SAI_MspDeInit+0xdc>)
 8006ef4:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006ef8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	4a17      	ldr	r2, [pc, #92]	@ (8006f60 <SAI_MspDeInit+0xe0>)
 8006f02:	4293      	cmp	r3, r2
 8006f04:	d11f      	bne.n	8006f46 <SAI_MspDeInit+0xc6>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8006f06:	203c      	movs	r0, #60	@ 0x3c
 8006f08:	f002 fa1e 	bl	8009348 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8006f12:	4618      	mov	r0, r3
 8006f14:	f002 ff30 	bl	8009d78 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	681a      	ldr	r2, [r3, #0]
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8006f26:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pin SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 8006f28:	2308      	movs	r3, #8
 8006f2a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	4619      	mov	r1, r3
 8006f30:	4808      	ldr	r0, [pc, #32]	@ (8006f54 <SAI_MspDeInit+0xd4>)
 8006f32:	f006 fe6d 	bl	800dc10 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 8006f36:	4b09      	ldr	r3, [pc, #36]	@ (8006f5c <SAI_MspDeInit+0xdc>)
 8006f38:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8006f3c:	4a07      	ldr	r2, [pc, #28]	@ (8006f5c <SAI_MspDeInit+0xdc>)
 8006f3e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 8006f42:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  }
}
 8006f46:	bf00      	nop
 8006f48:	3720      	adds	r7, #32
 8006f4a:	46bd      	mov	sp, r7
 8006f4c:	bd80      	pop	{r7, pc}
 8006f4e:	bf00      	nop
 8006f50:	40015804 	.word	0x40015804
 8006f54:	58021000 	.word	0x58021000
 8006f58:	58021800 	.word	0x58021800
 8006f5c:	58024400 	.word	0x58024400
 8006f60:	40015824 	.word	0x40015824

08006f64 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8006f64:	b580      	push	{r7, lr}
 8006f66:	b082      	sub	sp, #8
 8006f68:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8006f6a:	2300      	movs	r3, #0
 8006f6c:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8006f6e:	4b16      	ldr	r3, [pc, #88]	@ (8006fc8 <BSP_I2C4_Init+0x64>)
 8006f70:	4a16      	ldr	r2, [pc, #88]	@ (8006fcc <BSP_I2C4_Init+0x68>)
 8006f72:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8006f74:	4b16      	ldr	r3, [pc, #88]	@ (8006fd0 <BSP_I2C4_Init+0x6c>)
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d11f      	bne.n	8006fbc <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8006f7c:	4b14      	ldr	r3, [pc, #80]	@ (8006fd0 <BSP_I2C4_Init+0x6c>)
 8006f7e:	681b      	ldr	r3, [r3, #0]
 8006f80:	3301      	adds	r3, #1
 8006f82:	4a13      	ldr	r2, [pc, #76]	@ (8006fd0 <BSP_I2C4_Init+0x6c>)
 8006f84:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8006f86:	4810      	ldr	r0, [pc, #64]	@ (8006fc8 <BSP_I2C4_Init+0x64>)
 8006f88:	f007 faba 	bl	800e500 <HAL_I2C_GetState>
 8006f8c:	4603      	mov	r3, r0
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d114      	bne.n	8006fbc <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8006f92:	480d      	ldr	r0, [pc, #52]	@ (8006fc8 <BSP_I2C4_Init+0x64>)
 8006f94:	f000 fb60 	bl	8007658 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8006f98:	f009 fae0 	bl	801055c <HAL_RCC_GetPCLK2Freq>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	490d      	ldr	r1, [pc, #52]	@ (8006fd4 <BSP_I2C4_Init+0x70>)
 8006fa0:	4618      	mov	r0, r3
 8006fa2:	f000 f8e3 	bl	800716c <I2C_GetTiming>
 8006fa6:	4603      	mov	r3, r0
 8006fa8:	4619      	mov	r1, r3
 8006faa:	4807      	ldr	r0, [pc, #28]	@ (8006fc8 <BSP_I2C4_Init+0x64>)
 8006fac:	f000 f838 	bl	8007020 <MX_I2C4_Init>
 8006fb0:	4603      	mov	r3, r0
 8006fb2:	2b00      	cmp	r3, #0
 8006fb4:	d002      	beq.n	8006fbc <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8006fb6:	f06f 0307 	mvn.w	r3, #7
 8006fba:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8006fbc:	687b      	ldr	r3, [r7, #4]
}
 8006fbe:	4618      	mov	r0, r3
 8006fc0:	3708      	adds	r7, #8
 8006fc2:	46bd      	mov	sp, r7
 8006fc4:	bd80      	pop	{r7, pc}
 8006fc6:	bf00      	nop
 8006fc8:	2400678c 	.word	0x2400678c
 8006fcc:	58001c00 	.word	0x58001c00
 8006fd0:	24005d84 	.word	0x24005d84
 8006fd4:	000186a0 	.word	0x000186a0

08006fd8 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8006fd8:	b580      	push	{r7, lr}
 8006fda:	b082      	sub	sp, #8
 8006fdc:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8006fde:	2300      	movs	r3, #0
 8006fe0:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8006fe2:	4b0d      	ldr	r3, [pc, #52]	@ (8007018 <BSP_I2C4_DeInit+0x40>)
 8006fe4:	681b      	ldr	r3, [r3, #0]
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	4a0b      	ldr	r2, [pc, #44]	@ (8007018 <BSP_I2C4_DeInit+0x40>)
 8006fea:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8006fec:	4b0a      	ldr	r3, [pc, #40]	@ (8007018 <BSP_I2C4_DeInit+0x40>)
 8006fee:	681b      	ldr	r3, [r3, #0]
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10b      	bne.n	800700c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8006ff4:	4809      	ldr	r0, [pc, #36]	@ (800701c <BSP_I2C4_DeInit+0x44>)
 8006ff6:	f000 fb9b 	bl	8007730 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8006ffa:	4808      	ldr	r0, [pc, #32]	@ (800701c <BSP_I2C4_DeInit+0x44>)
 8006ffc:	f007 f80e 	bl	800e01c <HAL_I2C_DeInit>
 8007000:	4603      	mov	r3, r0
 8007002:	2b00      	cmp	r3, #0
 8007004:	d002      	beq.n	800700c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8007006:	f06f 0307 	mvn.w	r3, #7
 800700a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800700c:	687b      	ldr	r3, [r7, #4]
}
 800700e:	4618      	mov	r0, r3
 8007010:	3708      	adds	r7, #8
 8007012:	46bd      	mov	sp, r7
 8007014:	bd80      	pop	{r7, pc}
 8007016:	bf00      	nop
 8007018:	24005d84 	.word	0x24005d84
 800701c:	2400678c 	.word	0x2400678c

08007020 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8007020:	b580      	push	{r7, lr}
 8007022:	b084      	sub	sp, #16
 8007024:	af00      	add	r7, sp, #0
 8007026:	6078      	str	r0, [r7, #4]
 8007028:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800702a:	2300      	movs	r3, #0
 800702c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	683a      	ldr	r2, [r7, #0]
 8007032:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	2200      	movs	r2, #0
 8007038:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800703a:	687b      	ldr	r3, [r7, #4]
 800703c:	2201      	movs	r2, #1
 800703e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	2200      	movs	r2, #0
 8007044:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	2200      	movs	r2, #0
 800704a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	2200      	movs	r2, #0
 8007050:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	2200      	movs	r2, #0
 8007056:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	2200      	movs	r2, #0
 800705c:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f006 ff40 	bl	800dee4 <HAL_I2C_Init>
 8007064:	4603      	mov	r3, r0
 8007066:	2b00      	cmp	r3, #0
 8007068:	d002      	beq.n	8007070 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800706a:	2301      	movs	r3, #1
 800706c:	73fb      	strb	r3, [r7, #15]
 800706e:	e014      	b.n	800709a <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8007070:	2300      	movs	r3, #0
 8007072:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8007074:	68b9      	ldr	r1, [r7, #8]
 8007076:	6878      	ldr	r0, [r7, #4]
 8007078:	f007 fd1e 	bl	800eab8 <HAL_I2CEx_ConfigAnalogFilter>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d002      	beq.n	8007088 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	73fb      	strb	r3, [r7, #15]
 8007086:	e008      	b.n	800709a <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8007088:	2100      	movs	r1, #0
 800708a:	6878      	ldr	r0, [r7, #4]
 800708c:	f007 fd5f 	bl	800eb4e <HAL_I2CEx_ConfigDigitalFilter>
 8007090:	4603      	mov	r3, r0
 8007092:	2b00      	cmp	r3, #0
 8007094:	d001      	beq.n	800709a <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8007096:	2301      	movs	r3, #1
 8007098:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800709a:	7bfb      	ldrb	r3, [r7, #15]
}
 800709c:	4618      	mov	r0, r3
 800709e:	3710      	adds	r7, #16
 80070a0:	46bd      	mov	sp, r7
 80070a2:	bd80      	pop	{r7, pc}

080070a4 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 80070a4:	b580      	push	{r7, lr}
 80070a6:	b088      	sub	sp, #32
 80070a8:	af02      	add	r7, sp, #8
 80070aa:	60ba      	str	r2, [r7, #8]
 80070ac:	461a      	mov	r2, r3
 80070ae:	4603      	mov	r3, r0
 80070b0:	81fb      	strh	r3, [r7, #14]
 80070b2:	460b      	mov	r3, r1
 80070b4:	81bb      	strh	r3, [r7, #12]
 80070b6:	4613      	mov	r3, r2
 80070b8:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 80070ba:	89b9      	ldrh	r1, [r7, #12]
 80070bc:	89f8      	ldrh	r0, [r7, #14]
 80070be:	88fb      	ldrh	r3, [r7, #6]
 80070c0:	9300      	str	r3, [sp, #0]
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	2202      	movs	r2, #2
 80070c6:	f000 fb57 	bl	8007778 <I2C4_WriteReg>
 80070ca:	4603      	mov	r3, r0
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d102      	bne.n	80070d6 <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 80070d0:	2300      	movs	r3, #0
 80070d2:	617b      	str	r3, [r7, #20]
 80070d4:	e00c      	b.n	80070f0 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 80070d6:	4809      	ldr	r0, [pc, #36]	@ (80070fc <BSP_I2C4_WriteReg16+0x58>)
 80070d8:	f007 fa20 	bl	800e51c <HAL_I2C_GetError>
 80070dc:	4603      	mov	r3, r0
 80070de:	2b04      	cmp	r3, #4
 80070e0:	d103      	bne.n	80070ea <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 80070e2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 80070e6:	617b      	str	r3, [r7, #20]
 80070e8:	e002      	b.n	80070f0 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 80070ea:	f06f 0303 	mvn.w	r3, #3
 80070ee:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 80070f0:	697b      	ldr	r3, [r7, #20]
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3718      	adds	r7, #24
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
 80070fa:	bf00      	nop
 80070fc:	2400678c 	.word	0x2400678c

08007100 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8007100:	b580      	push	{r7, lr}
 8007102:	b088      	sub	sp, #32
 8007104:	af02      	add	r7, sp, #8
 8007106:	60ba      	str	r2, [r7, #8]
 8007108:	461a      	mov	r2, r3
 800710a:	4603      	mov	r3, r0
 800710c:	81fb      	strh	r3, [r7, #14]
 800710e:	460b      	mov	r3, r1
 8007110:	81bb      	strh	r3, [r7, #12]
 8007112:	4613      	mov	r3, r2
 8007114:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8007116:	89b9      	ldrh	r1, [r7, #12]
 8007118:	89f8      	ldrh	r0, [r7, #14]
 800711a:	88fb      	ldrh	r3, [r7, #6]
 800711c:	9300      	str	r3, [sp, #0]
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	2202      	movs	r2, #2
 8007122:	f000 fb4f 	bl	80077c4 <I2C4_ReadReg>
 8007126:	4603      	mov	r3, r0
 8007128:	2b00      	cmp	r3, #0
 800712a:	d102      	bne.n	8007132 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800712c:	2300      	movs	r3, #0
 800712e:	617b      	str	r3, [r7, #20]
 8007130:	e00c      	b.n	800714c <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8007132:	4809      	ldr	r0, [pc, #36]	@ (8007158 <BSP_I2C4_ReadReg16+0x58>)
 8007134:	f007 f9f2 	bl	800e51c <HAL_I2C_GetError>
 8007138:	4603      	mov	r3, r0
 800713a:	2b04      	cmp	r3, #4
 800713c:	d103      	bne.n	8007146 <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800713e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8007142:	617b      	str	r3, [r7, #20]
 8007144:	e002      	b.n	800714c <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8007146:	f06f 0303 	mvn.w	r3, #3
 800714a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800714c:	697b      	ldr	r3, [r7, #20]
}
 800714e:	4618      	mov	r0, r3
 8007150:	3718      	adds	r7, #24
 8007152:	46bd      	mov	sp, r7
 8007154:	bd80      	pop	{r7, pc}
 8007156:	bf00      	nop
 8007158:	2400678c 	.word	0x2400678c

0800715c <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800715c:	b580      	push	{r7, lr}
 800715e:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8007160:	f001 ffa2 	bl	80090a8 <HAL_GetTick>
 8007164:	4603      	mov	r3, r0
}
 8007166:	4618      	mov	r0, r3
 8007168:	bd80      	pop	{r7, pc}
	...

0800716c <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800716c:	b580      	push	{r7, lr}
 800716e:	b086      	sub	sp, #24
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
 8007174:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8007176:	2300      	movs	r3, #0
 8007178:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d06b      	beq.n	8007258 <I2C_GetTiming+0xec>
 8007180:	683b      	ldr	r3, [r7, #0]
 8007182:	2b00      	cmp	r3, #0
 8007184:	d068      	beq.n	8007258 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8007186:	2300      	movs	r3, #0
 8007188:	613b      	str	r3, [r7, #16]
 800718a:	e060      	b.n	800724e <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800718c:	4a35      	ldr	r2, [pc, #212]	@ (8007264 <I2C_GetTiming+0xf8>)
 800718e:	693b      	ldr	r3, [r7, #16]
 8007190:	212c      	movs	r1, #44	@ 0x2c
 8007192:	fb01 f303 	mul.w	r3, r1, r3
 8007196:	4413      	add	r3, r2
 8007198:	3304      	adds	r3, #4
 800719a:	681b      	ldr	r3, [r3, #0]
 800719c:	683a      	ldr	r2, [r7, #0]
 800719e:	429a      	cmp	r2, r3
 80071a0:	d352      	bcc.n	8007248 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 80071a2:	4a30      	ldr	r2, [pc, #192]	@ (8007264 <I2C_GetTiming+0xf8>)
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	212c      	movs	r1, #44	@ 0x2c
 80071a8:	fb01 f303 	mul.w	r3, r1, r3
 80071ac:	4413      	add	r3, r2
 80071ae:	3308      	adds	r3, #8
 80071b0:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 80071b2:	683a      	ldr	r2, [r7, #0]
 80071b4:	429a      	cmp	r2, r3
 80071b6:	d847      	bhi.n	8007248 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 80071b8:	6939      	ldr	r1, [r7, #16]
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f000 f856 	bl	800726c <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 80071c0:	6939      	ldr	r1, [r7, #16]
 80071c2:	6878      	ldr	r0, [r7, #4]
 80071c4:	f000 f940 	bl	8007448 <I2C_Compute_SCLL_SCLH>
 80071c8:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2b7f      	cmp	r3, #127	@ 0x7f
 80071ce:	d842      	bhi.n	8007256 <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071d0:	4925      	ldr	r1, [pc, #148]	@ (8007268 <I2C_GetTiming+0xfc>)
 80071d2:	68fa      	ldr	r2, [r7, #12]
 80071d4:	4613      	mov	r3, r2
 80071d6:	009b      	lsls	r3, r3, #2
 80071d8:	4413      	add	r3, r2
 80071da:	009b      	lsls	r3, r3, #2
 80071dc:	440b      	add	r3, r1
 80071de:	681b      	ldr	r3, [r3, #0]
 80071e0:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 80071e2:	4821      	ldr	r0, [pc, #132]	@ (8007268 <I2C_GetTiming+0xfc>)
 80071e4:	68fa      	ldr	r2, [r7, #12]
 80071e6:	4613      	mov	r3, r2
 80071e8:	009b      	lsls	r3, r3, #2
 80071ea:	4413      	add	r3, r2
 80071ec:	009b      	lsls	r3, r3, #2
 80071ee:	4403      	add	r3, r0
 80071f0:	3304      	adds	r3, #4
 80071f2:	681b      	ldr	r3, [r3, #0]
 80071f4:	051b      	lsls	r3, r3, #20
 80071f6:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 80071fa:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 80071fc:	481a      	ldr	r0, [pc, #104]	@ (8007268 <I2C_GetTiming+0xfc>)
 80071fe:	68fa      	ldr	r2, [r7, #12]
 8007200:	4613      	mov	r3, r2
 8007202:	009b      	lsls	r3, r3, #2
 8007204:	4413      	add	r3, r2
 8007206:	009b      	lsls	r3, r3, #2
 8007208:	4403      	add	r3, r0
 800720a:	3308      	adds	r3, #8
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	041b      	lsls	r3, r3, #16
 8007210:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8007214:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8007216:	4814      	ldr	r0, [pc, #80]	@ (8007268 <I2C_GetTiming+0xfc>)
 8007218:	68fa      	ldr	r2, [r7, #12]
 800721a:	4613      	mov	r3, r2
 800721c:	009b      	lsls	r3, r3, #2
 800721e:	4413      	add	r3, r2
 8007220:	009b      	lsls	r3, r3, #2
 8007222:	4403      	add	r3, r0
 8007224:	330c      	adds	r3, #12
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	021b      	lsls	r3, r3, #8
 800722a:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800722c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800722e:	480e      	ldr	r0, [pc, #56]	@ (8007268 <I2C_GetTiming+0xfc>)
 8007230:	68fa      	ldr	r2, [r7, #12]
 8007232:	4613      	mov	r3, r2
 8007234:	009b      	lsls	r3, r3, #2
 8007236:	4413      	add	r3, r2
 8007238:	009b      	lsls	r3, r3, #2
 800723a:	4403      	add	r3, r0
 800723c:	3310      	adds	r3, #16
 800723e:	681b      	ldr	r3, [r3, #0]
 8007240:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8007242:	430b      	orrs	r3, r1
 8007244:	617b      	str	r3, [r7, #20]
        }
        break;
 8007246:	e006      	b.n	8007256 <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8007248:	693b      	ldr	r3, [r7, #16]
 800724a:	3301      	adds	r3, #1
 800724c:	613b      	str	r3, [r7, #16]
 800724e:	693b      	ldr	r3, [r7, #16]
 8007250:	2b02      	cmp	r3, #2
 8007252:	d99b      	bls.n	800718c <I2C_GetTiming+0x20>
 8007254:	e000      	b.n	8007258 <I2C_GetTiming+0xec>
        break;
 8007256:	bf00      	nop
      }
    }
  }

  return ret;
 8007258:	697b      	ldr	r3, [r7, #20]
}
 800725a:	4618      	mov	r0, r3
 800725c:	3718      	adds	r7, #24
 800725e:	46bd      	mov	sp, r7
 8007260:	bd80      	pop	{r7, pc}
 8007262:	bf00      	nop
 8007264:	08020bb0 	.word	0x08020bb0
 8007268:	24005d88 	.word	0x24005d88

0800726c <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800726c:	b480      	push	{r7}
 800726e:	b08f      	sub	sp, #60	@ 0x3c
 8007270:	af00      	add	r7, sp, #0
 8007272:	6078      	str	r0, [r7, #4]
 8007274:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8007276:	2310      	movs	r3, #16
 8007278:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800727a:	687b      	ldr	r3, [r7, #4]
 800727c:	085a      	lsrs	r2, r3, #1
 800727e:	4b6e      	ldr	r3, [pc, #440]	@ (8007438 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8007280:	4413      	add	r3, r2
 8007282:	687a      	ldr	r2, [r7, #4]
 8007284:	fbb3 f3f2 	udiv	r3, r3, r2
 8007288:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800728a:	2332      	movs	r3, #50	@ 0x32
 800728c:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800728e:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8007292:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8007294:	4a69      	ldr	r2, [pc, #420]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	212c      	movs	r1, #44	@ 0x2c
 800729a:	fb01 f303 	mul.w	r3, r1, r3
 800729e:	4413      	add	r3, r2
 80072a0:	3324      	adds	r3, #36	@ 0x24
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4618      	mov	r0, r3
 80072a6:	4a65      	ldr	r2, [pc, #404]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80072a8:	683b      	ldr	r3, [r7, #0]
 80072aa:	212c      	movs	r1, #44	@ 0x2c
 80072ac:	fb01 f303 	mul.w	r3, r1, r3
 80072b0:	4413      	add	r3, r2
 80072b2:	330c      	adds	r3, #12
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80072b8:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80072ba:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 80072bc:	495f      	ldr	r1, [pc, #380]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80072be:	683b      	ldr	r3, [r7, #0]
 80072c0:	202c      	movs	r0, #44	@ 0x2c
 80072c2:	fb00 f303 	mul.w	r3, r0, r3
 80072c6:	440b      	add	r3, r1
 80072c8:	3328      	adds	r3, #40	@ 0x28
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	3303      	adds	r3, #3
 80072ce:	69f9      	ldr	r1, [r7, #28]
 80072d0:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 80072d4:	1ad3      	subs	r3, r2, r3
 80072d6:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80072d8:	4a58      	ldr	r2, [pc, #352]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	212c      	movs	r1, #44	@ 0x2c
 80072de:	fb01 f303 	mul.w	r3, r1, r3
 80072e2:	4413      	add	r3, r2
 80072e4:	3310      	adds	r3, #16
 80072e6:	681b      	ldr	r3, [r3, #0]
 80072e8:	4618      	mov	r0, r3
 80072ea:	4a54      	ldr	r2, [pc, #336]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 80072ec:	683b      	ldr	r3, [r7, #0]
 80072ee:	212c      	movs	r1, #44	@ 0x2c
 80072f0:	fb01 f303 	mul.w	r3, r1, r3
 80072f4:	4413      	add	r3, r2
 80072f6:	3320      	adds	r3, #32
 80072f8:	681b      	ldr	r3, [r3, #0]
 80072fa:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 80072fc:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 80072fe:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8007300:	494e      	ldr	r1, [pc, #312]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	202c      	movs	r0, #44	@ 0x2c
 8007306:	fb00 f303 	mul.w	r3, r0, r3
 800730a:	440b      	add	r3, r1
 800730c:	3328      	adds	r3, #40	@ 0x28
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	3304      	adds	r3, #4
 8007312:	69f9      	ldr	r1, [r7, #28]
 8007314:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8007318:	1ad3      	subs	r3, r2, r3
 800731a:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800731c:	4a47      	ldr	r2, [pc, #284]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	212c      	movs	r1, #44	@ 0x2c
 8007322:	fb01 f303 	mul.w	r3, r1, r3
 8007326:	4413      	add	r3, r2
 8007328:	3320      	adds	r3, #32
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4618      	mov	r0, r3
 800732e:	4a43      	ldr	r2, [pc, #268]	@ (800743c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8007330:	683b      	ldr	r3, [r7, #0]
 8007332:	212c      	movs	r1, #44	@ 0x2c
 8007334:	fb01 f303 	mul.w	r3, r1, r3
 8007338:	4413      	add	r3, r2
 800733a:	3314      	adds	r3, #20
 800733c:	681b      	ldr	r3, [r3, #0]
 800733e:	4403      	add	r3, r0
 8007340:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8007342:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007344:	2b00      	cmp	r3, #0
 8007346:	dc01      	bgt.n	800734c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8007348:	2300      	movs	r3, #0
 800734a:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800734c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800734e:	2b00      	cmp	r3, #0
 8007350:	dc01      	bgt.n	8007356 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8007352:	2300      	movs	r3, #0
 8007354:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8007356:	2300      	movs	r3, #0
 8007358:	62bb      	str	r3, [r7, #40]	@ 0x28
 800735a:	e062      	b.n	8007422 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800735c:	2300      	movs	r3, #0
 800735e:	627b      	str	r3, [r7, #36]	@ 0x24
 8007360:	e059      	b.n	8007416 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8007362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007364:	3301      	adds	r3, #1
 8007366:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8007368:	3201      	adds	r2, #1
 800736a:	fb03 f202 	mul.w	r2, r3, r2
 800736e:	69fb      	ldr	r3, [r7, #28]
 8007370:	fb02 f303 	mul.w	r3, r2, r3
 8007374:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	68fa      	ldr	r2, [r7, #12]
 800737a:	429a      	cmp	r2, r3
 800737c:	d348      	bcc.n	8007410 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800737e:	2300      	movs	r3, #0
 8007380:	623b      	str	r3, [r7, #32]
 8007382:	e042      	b.n	800740a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8007384:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007386:	3301      	adds	r3, #1
 8007388:	6a3a      	ldr	r2, [r7, #32]
 800738a:	fb03 f202 	mul.w	r2, r3, r2
 800738e:	69fb      	ldr	r3, [r7, #28]
 8007390:	fb02 f303 	mul.w	r3, r2, r3
 8007394:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8007396:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007398:	68ba      	ldr	r2, [r7, #8]
 800739a:	429a      	cmp	r2, r3
 800739c:	d332      	bcc.n	8007404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800739e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073a0:	68ba      	ldr	r2, [r7, #8]
 80073a2:	429a      	cmp	r2, r3
 80073a4:	d82e      	bhi.n	8007404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 80073a6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80073aa:	429a      	cmp	r2, r3
 80073ac:	d02a      	beq.n	8007404 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 80073ae:	4b24      	ldr	r3, [pc, #144]	@ (8007440 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80073b0:	681a      	ldr	r2, [r3, #0]
 80073b2:	4924      	ldr	r1, [pc, #144]	@ (8007444 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80073b4:	4613      	mov	r3, r2
 80073b6:	009b      	lsls	r3, r3, #2
 80073b8:	4413      	add	r3, r2
 80073ba:	009b      	lsls	r3, r3, #2
 80073bc:	440b      	add	r3, r1
 80073be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80073c0:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 80073c2:	4b1f      	ldr	r3, [pc, #124]	@ (8007440 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80073c4:	681a      	ldr	r2, [r3, #0]
 80073c6:	491f      	ldr	r1, [pc, #124]	@ (8007444 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80073c8:	4613      	mov	r3, r2
 80073ca:	009b      	lsls	r3, r3, #2
 80073cc:	4413      	add	r3, r2
 80073ce:	009b      	lsls	r3, r3, #2
 80073d0:	440b      	add	r3, r1
 80073d2:	3304      	adds	r3, #4
 80073d4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d6:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 80073d8:	4b19      	ldr	r3, [pc, #100]	@ (8007440 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	4919      	ldr	r1, [pc, #100]	@ (8007444 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 80073de:	4613      	mov	r3, r2
 80073e0:	009b      	lsls	r3, r3, #2
 80073e2:	4413      	add	r3, r2
 80073e4:	009b      	lsls	r3, r3, #2
 80073e6:	440b      	add	r3, r1
 80073e8:	3308      	adds	r3, #8
 80073ea:	6a3a      	ldr	r2, [r7, #32]
 80073ec:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 80073ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80073f0:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 80073f2:	4b13      	ldr	r3, [pc, #76]	@ (8007440 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	3301      	adds	r3, #1
 80073f8:	4a11      	ldr	r2, [pc, #68]	@ (8007440 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80073fa:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 80073fc:	4b10      	ldr	r3, [pc, #64]	@ (8007440 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	2b7f      	cmp	r3, #127	@ 0x7f
 8007402:	d812      	bhi.n	800742a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8007404:	6a3b      	ldr	r3, [r7, #32]
 8007406:	3301      	adds	r3, #1
 8007408:	623b      	str	r3, [r7, #32]
 800740a:	6a3b      	ldr	r3, [r7, #32]
 800740c:	2b0f      	cmp	r3, #15
 800740e:	d9b9      	bls.n	8007384 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8007410:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007412:	3301      	adds	r3, #1
 8007414:	627b      	str	r3, [r7, #36]	@ 0x24
 8007416:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007418:	2b0f      	cmp	r3, #15
 800741a:	d9a2      	bls.n	8007362 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800741c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800741e:	3301      	adds	r3, #1
 8007420:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007422:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007424:	2b0f      	cmp	r3, #15
 8007426:	d999      	bls.n	800735c <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8007428:	e000      	b.n	800742c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800742a:	bf00      	nop
          }
        }
      }
    }
  }
}
 800742c:	373c      	adds	r7, #60	@ 0x3c
 800742e:	46bd      	mov	sp, r7
 8007430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007434:	4770      	bx	lr
 8007436:	bf00      	nop
 8007438:	3b9aca00 	.word	0x3b9aca00
 800743c:	08020bb0 	.word	0x08020bb0
 8007440:	24006788 	.word	0x24006788
 8007444:	24005d88 	.word	0x24005d88

08007448 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8007448:	b480      	push	{r7}
 800744a:	b093      	sub	sp, #76	@ 0x4c
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
 8007450:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8007452:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007456:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	085a      	lsrs	r2, r3, #1
 800745c:	4b7a      	ldr	r3, [pc, #488]	@ (8007648 <I2C_Compute_SCLL_SCLH+0x200>)
 800745e:	4413      	add	r3, r2
 8007460:	687a      	ldr	r2, [r7, #4]
 8007462:	fbb3 f3f2 	udiv	r3, r3, r2
 8007466:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8007468:	4a78      	ldr	r2, [pc, #480]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	212c      	movs	r1, #44	@ 0x2c
 800746e:	fb01 f303 	mul.w	r3, r1, r3
 8007472:	4413      	add	r3, r2
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	085a      	lsrs	r2, r3, #1
 8007478:	4b73      	ldr	r3, [pc, #460]	@ (8007648 <I2C_Compute_SCLL_SCLH+0x200>)
 800747a:	4413      	add	r3, r2
 800747c:	4973      	ldr	r1, [pc, #460]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 800747e:	683a      	ldr	r2, [r7, #0]
 8007480:	202c      	movs	r0, #44	@ 0x2c
 8007482:	fb00 f202 	mul.w	r2, r0, r2
 8007486:	440a      	add	r2, r1
 8007488:	6812      	ldr	r2, [r2, #0]
 800748a:	fbb3 f3f2 	udiv	r3, r3, r2
 800748e:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8007490:	2332      	movs	r3, #50	@ 0x32
 8007492:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8007494:	4a6d      	ldr	r2, [pc, #436]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 8007496:	683b      	ldr	r3, [r7, #0]
 8007498:	212c      	movs	r1, #44	@ 0x2c
 800749a:	fb01 f303 	mul.w	r3, r1, r3
 800749e:	4413      	add	r3, r2
 80074a0:	3328      	adds	r3, #40	@ 0x28
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074a6:	fb02 f303 	mul.w	r3, r2, r3
 80074aa:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 80074ac:	4a67      	ldr	r2, [pc, #412]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 80074ae:	683b      	ldr	r3, [r7, #0]
 80074b0:	212c      	movs	r1, #44	@ 0x2c
 80074b2:	fb01 f303 	mul.w	r3, r1, r3
 80074b6:	4413      	add	r3, r2
 80074b8:	3304      	adds	r3, #4
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	4a62      	ldr	r2, [pc, #392]	@ (8007648 <I2C_Compute_SCLL_SCLH+0x200>)
 80074be:	fbb2 f3f3 	udiv	r3, r2, r3
 80074c2:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 80074c4:	4a61      	ldr	r2, [pc, #388]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	212c      	movs	r1, #44	@ 0x2c
 80074ca:	fb01 f303 	mul.w	r3, r1, r3
 80074ce:	4413      	add	r3, r2
 80074d0:	3308      	adds	r3, #8
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	4a5c      	ldr	r2, [pc, #368]	@ (8007648 <I2C_Compute_SCLL_SCLH+0x200>)
 80074d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80074da:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 80074dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074de:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80074e0:	2300      	movs	r3, #0
 80074e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80074e4:	e0a3      	b.n	800762e <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 80074e6:	495a      	ldr	r1, [pc, #360]	@ (8007650 <I2C_Compute_SCLL_SCLH+0x208>)
 80074e8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80074ea:	4613      	mov	r3, r2
 80074ec:	009b      	lsls	r3, r3, #2
 80074ee:	4413      	add	r3, r2
 80074f0:	009b      	lsls	r3, r3, #2
 80074f2:	440b      	add	r3, r1
 80074f4:	681b      	ldr	r3, [r3, #0]
 80074f6:	1c5a      	adds	r2, r3, #1
 80074f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8007500:	2300      	movs	r3, #0
 8007502:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007504:	e08c      	b.n	8007620 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 8007506:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007508:	6a3b      	ldr	r3, [r7, #32]
 800750a:	441a      	add	r2, r3
 800750c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800750e:	3301      	adds	r3, #1
 8007510:	6979      	ldr	r1, [r7, #20]
 8007512:	fb03 f101 	mul.w	r1, r3, r1
 8007516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007518:	005b      	lsls	r3, r3, #1
 800751a:	440b      	add	r3, r1
 800751c:	4413      	add	r3, r2
 800751e:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 8007520:	4a4a      	ldr	r2, [pc, #296]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 8007522:	683b      	ldr	r3, [r7, #0]
 8007524:	212c      	movs	r1, #44	@ 0x2c
 8007526:	fb01 f303 	mul.w	r3, r1, r3
 800752a:	4413      	add	r3, r2
 800752c:	3318      	adds	r3, #24
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	693a      	ldr	r2, [r7, #16]
 8007532:	429a      	cmp	r2, r3
 8007534:	d971      	bls.n	800761a <I2C_Compute_SCLL_SCLH+0x1d2>
 8007536:	693a      	ldr	r2, [r7, #16]
 8007538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800753a:	1ad2      	subs	r2, r2, r3
 800753c:	6a3b      	ldr	r3, [r7, #32]
 800753e:	1ad3      	subs	r3, r2, r3
 8007540:	089b      	lsrs	r3, r3, #2
 8007542:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007544:	429a      	cmp	r2, r3
 8007546:	d268      	bcs.n	800761a <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8007548:	2300      	movs	r3, #0
 800754a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800754c:	e062      	b.n	8007614 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800754e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007550:	6a3b      	ldr	r3, [r7, #32]
 8007552:	441a      	add	r2, r3
 8007554:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007556:	3301      	adds	r3, #1
 8007558:	6979      	ldr	r1, [r7, #20]
 800755a:	fb03 f101 	mul.w	r1, r3, r1
 800755e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007560:	005b      	lsls	r3, r3, #1
 8007562:	440b      	add	r3, r1
 8007564:	4413      	add	r3, r2
 8007566:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 8007568:	693a      	ldr	r2, [r7, #16]
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	441a      	add	r2, r3
 800756e:	4937      	ldr	r1, [pc, #220]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	202c      	movs	r0, #44	@ 0x2c
 8007574:	fb00 f303 	mul.w	r3, r0, r3
 8007578:	440b      	add	r3, r1
 800757a:	3320      	adds	r3, #32
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	441a      	add	r2, r3
 8007580:	4932      	ldr	r1, [pc, #200]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 8007582:	683b      	ldr	r3, [r7, #0]
 8007584:	202c      	movs	r0, #44	@ 0x2c
 8007586:	fb00 f303 	mul.w	r3, r0, r3
 800758a:	440b      	add	r3, r1
 800758c:	3324      	adds	r3, #36	@ 0x24
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4413      	add	r3, r2
 8007592:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8007594:	68ba      	ldr	r2, [r7, #8]
 8007596:	69bb      	ldr	r3, [r7, #24]
 8007598:	429a      	cmp	r2, r3
 800759a:	d338      	bcc.n	800760e <I2C_Compute_SCLL_SCLH+0x1c6>
 800759c:	68ba      	ldr	r2, [r7, #8]
 800759e:	69fb      	ldr	r3, [r7, #28]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d834      	bhi.n	800760e <I2C_Compute_SCLL_SCLH+0x1c6>
 80075a4:	4a29      	ldr	r2, [pc, #164]	@ (800764c <I2C_Compute_SCLL_SCLH+0x204>)
 80075a6:	683b      	ldr	r3, [r7, #0]
 80075a8:	212c      	movs	r1, #44	@ 0x2c
 80075aa:	fb01 f303 	mul.w	r3, r1, r3
 80075ae:	4413      	add	r3, r2
 80075b0:	331c      	adds	r3, #28
 80075b2:	681b      	ldr	r3, [r3, #0]
 80075b4:	68fa      	ldr	r2, [r7, #12]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d329      	bcc.n	800760e <I2C_Compute_SCLL_SCLH+0x1c6>
 80075ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d225      	bcs.n	800760e <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 80075c2:	68ba      	ldr	r2, [r7, #8]
 80075c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c6:	1ad3      	subs	r3, r2, r3
 80075c8:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 80075ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075cc:	2b00      	cmp	r3, #0
 80075ce:	da02      	bge.n	80075d6 <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 80075d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d2:	425b      	negs	r3, r3
 80075d4:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 80075d6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075d8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80075da:	429a      	cmp	r2, r3
 80075dc:	d917      	bls.n	800760e <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 80075de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075e0:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 80075e2:	491b      	ldr	r1, [pc, #108]	@ (8007650 <I2C_Compute_SCLL_SCLH+0x208>)
 80075e4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075e6:	4613      	mov	r3, r2
 80075e8:	009b      	lsls	r3, r3, #2
 80075ea:	4413      	add	r3, r2
 80075ec:	009b      	lsls	r3, r3, #2
 80075ee:	440b      	add	r3, r1
 80075f0:	3310      	adds	r3, #16
 80075f2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80075f4:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 80075f6:	4916      	ldr	r1, [pc, #88]	@ (8007650 <I2C_Compute_SCLL_SCLH+0x208>)
 80075f8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80075fa:	4613      	mov	r3, r2
 80075fc:	009b      	lsls	r3, r3, #2
 80075fe:	4413      	add	r3, r2
 8007600:	009b      	lsls	r3, r3, #2
 8007602:	440b      	add	r3, r1
 8007604:	330c      	adds	r3, #12
 8007606:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8007608:	601a      	str	r2, [r3, #0]
              ret = count;
 800760a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800760c:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800760e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007610:	3301      	adds	r3, #1
 8007612:	63bb      	str	r3, [r7, #56]	@ 0x38
 8007614:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007616:	2bff      	cmp	r3, #255	@ 0xff
 8007618:	d999      	bls.n	800754e <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800761a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800761c:	3301      	adds	r3, #1
 800761e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007620:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007622:	2bff      	cmp	r3, #255	@ 0xff
 8007624:	f67f af6f 	bls.w	8007506 <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8007628:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800762a:	3301      	adds	r3, #1
 800762c:	637b      	str	r3, [r7, #52]	@ 0x34
 800762e:	4b09      	ldr	r3, [pc, #36]	@ (8007654 <I2C_Compute_SCLL_SCLH+0x20c>)
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8007634:	429a      	cmp	r2, r3
 8007636:	f4ff af56 	bcc.w	80074e6 <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800763a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800763c:	4618      	mov	r0, r3
 800763e:	374c      	adds	r7, #76	@ 0x4c
 8007640:	46bd      	mov	sp, r7
 8007642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007646:	4770      	bx	lr
 8007648:	3b9aca00 	.word	0x3b9aca00
 800764c:	08020bb0 	.word	0x08020bb0
 8007650:	24005d88 	.word	0x24005d88
 8007654:	24006788 	.word	0x24006788

08007658 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 8007658:	b580      	push	{r7, lr}
 800765a:	b08a      	sub	sp, #40	@ 0x28
 800765c:	af00      	add	r7, sp, #0
 800765e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 8007660:	4b31      	ldr	r3, [pc, #196]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007666:	4a30      	ldr	r2, [pc, #192]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007668:	f043 0308 	orr.w	r3, r3, #8
 800766c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007670:	4b2d      	ldr	r3, [pc, #180]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007676:	f003 0308 	and.w	r3, r3, #8
 800767a:	613b      	str	r3, [r7, #16]
 800767c:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800767e:	4b2a      	ldr	r3, [pc, #168]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007684:	4a28      	ldr	r2, [pc, #160]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007686:	f043 0308 	orr.w	r3, r3, #8
 800768a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800768e:	4b26      	ldr	r3, [pc, #152]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007694:	f003 0308 	and.w	r3, r3, #8
 8007698:	60fb      	str	r3, [r7, #12]
 800769a:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800769c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80076a0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80076a2:	2312      	movs	r3, #18
 80076a4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80076a6:	2300      	movs	r3, #0
 80076a8:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80076aa:	2302      	movs	r3, #2
 80076ac:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 80076ae:	2304      	movs	r3, #4
 80076b0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 80076b2:	f107 0314 	add.w	r3, r7, #20
 80076b6:	4619      	mov	r1, r3
 80076b8:	481c      	ldr	r0, [pc, #112]	@ (800772c <I2C4_MspInit+0xd4>)
 80076ba:	f006 f8f9 	bl	800d8b0 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 80076be:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80076c2:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 80076c4:	2312      	movs	r3, #18
 80076c6:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 80076c8:	2300      	movs	r3, #0
 80076ca:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 80076cc:	2302      	movs	r3, #2
 80076ce:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 80076d0:	2304      	movs	r3, #4
 80076d2:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 80076d4:	f107 0314 	add.w	r3, r7, #20
 80076d8:	4619      	mov	r1, r3
 80076da:	4814      	ldr	r0, [pc, #80]	@ (800772c <I2C4_MspInit+0xd4>)
 80076dc:	f006 f8e8 	bl	800d8b0 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 80076e0:	4b11      	ldr	r3, [pc, #68]	@ (8007728 <I2C4_MspInit+0xd0>)
 80076e2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076e6:	4a10      	ldr	r2, [pc, #64]	@ (8007728 <I2C4_MspInit+0xd0>)
 80076e8:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80076ec:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80076f0:	4b0d      	ldr	r3, [pc, #52]	@ (8007728 <I2C4_MspInit+0xd0>)
 80076f2:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80076f6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80076fa:	60bb      	str	r3, [r7, #8]
 80076fc:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 80076fe:	4b0a      	ldr	r3, [pc, #40]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007700:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007704:	4a08      	ldr	r2, [pc, #32]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007706:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800770a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800770e:	4b06      	ldr	r3, [pc, #24]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007710:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8007714:	4a04      	ldr	r2, [pc, #16]	@ (8007728 <I2C4_MspInit+0xd0>)
 8007716:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800771a:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 800771e:	bf00      	nop
 8007720:	3728      	adds	r7, #40	@ 0x28
 8007722:	46bd      	mov	sp, r7
 8007724:	bd80      	pop	{r7, pc}
 8007726:	bf00      	nop
 8007728:	58024400 	.word	0x58024400
 800772c:	58020c00 	.word	0x58020c00

08007730 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b088      	sub	sp, #32
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 8007738:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800773c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800773e:	68fb      	ldr	r3, [r7, #12]
 8007740:	4619      	mov	r1, r3
 8007742:	480b      	ldr	r0, [pc, #44]	@ (8007770 <I2C4_MspDeInit+0x40>)
 8007744:	f006 fa64 	bl	800dc10 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 8007748:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800774c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800774e:	68fb      	ldr	r3, [r7, #12]
 8007750:	4619      	mov	r1, r3
 8007752:	4807      	ldr	r0, [pc, #28]	@ (8007770 <I2C4_MspDeInit+0x40>)
 8007754:	f006 fa5c 	bl	800dc10 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 8007758:	4b06      	ldr	r3, [pc, #24]	@ (8007774 <I2C4_MspDeInit+0x44>)
 800775a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800775e:	4a05      	ldr	r2, [pc, #20]	@ (8007774 <I2C4_MspDeInit+0x44>)
 8007760:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8007764:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 8007768:	bf00      	nop
 800776a:	3720      	adds	r7, #32
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	58020c00 	.word	0x58020c00
 8007774:	58024400 	.word	0x58024400

08007778 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8007778:	b580      	push	{r7, lr}
 800777a:	b088      	sub	sp, #32
 800777c:	af04      	add	r7, sp, #16
 800777e:	607b      	str	r3, [r7, #4]
 8007780:	4603      	mov	r3, r0
 8007782:	81fb      	strh	r3, [r7, #14]
 8007784:	460b      	mov	r3, r1
 8007786:	81bb      	strh	r3, [r7, #12]
 8007788:	4613      	mov	r3, r2
 800778a:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800778c:	8978      	ldrh	r0, [r7, #10]
 800778e:	89ba      	ldrh	r2, [r7, #12]
 8007790:	89f9      	ldrh	r1, [r7, #14]
 8007792:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007796:	9302      	str	r3, [sp, #8]
 8007798:	8b3b      	ldrh	r3, [r7, #24]
 800779a:	9301      	str	r3, [sp, #4]
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	9300      	str	r3, [sp, #0]
 80077a0:	4603      	mov	r3, r0
 80077a2:	4807      	ldr	r0, [pc, #28]	@ (80077c0 <I2C4_WriteReg+0x48>)
 80077a4:	f006 fc7e 	bl	800e0a4 <HAL_I2C_Mem_Write>
 80077a8:	4603      	mov	r3, r0
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d101      	bne.n	80077b2 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	e001      	b.n	80077b6 <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80077b2:	f06f 0307 	mvn.w	r3, #7
}
 80077b6:	4618      	mov	r0, r3
 80077b8:	3710      	adds	r7, #16
 80077ba:	46bd      	mov	sp, r7
 80077bc:	bd80      	pop	{r7, pc}
 80077be:	bf00      	nop
 80077c0:	2400678c 	.word	0x2400678c

080077c4 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80077c4:	b580      	push	{r7, lr}
 80077c6:	b088      	sub	sp, #32
 80077c8:	af04      	add	r7, sp, #16
 80077ca:	607b      	str	r3, [r7, #4]
 80077cc:	4603      	mov	r3, r0
 80077ce:	81fb      	strh	r3, [r7, #14]
 80077d0:	460b      	mov	r3, r1
 80077d2:	81bb      	strh	r3, [r7, #12]
 80077d4:	4613      	mov	r3, r2
 80077d6:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 80077d8:	8978      	ldrh	r0, [r7, #10]
 80077da:	89ba      	ldrh	r2, [r7, #12]
 80077dc:	89f9      	ldrh	r1, [r7, #14]
 80077de:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80077e2:	9302      	str	r3, [sp, #8]
 80077e4:	8b3b      	ldrh	r3, [r7, #24]
 80077e6:	9301      	str	r3, [sp, #4]
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	9300      	str	r3, [sp, #0]
 80077ec:	4603      	mov	r3, r0
 80077ee:	4807      	ldr	r0, [pc, #28]	@ (800780c <I2C4_ReadReg+0x48>)
 80077f0:	f006 fd6c 	bl	800e2cc <HAL_I2C_Mem_Read>
 80077f4:	4603      	mov	r3, r0
 80077f6:	2b00      	cmp	r3, #0
 80077f8:	d101      	bne.n	80077fe <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 80077fa:	2300      	movs	r3, #0
 80077fc:	e001      	b.n	8007802 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 80077fe:	f06f 0307 	mvn.w	r3, #7
}
 8007802:	4618      	mov	r0, r3
 8007804:	3710      	adds	r7, #16
 8007806:	46bd      	mov	sp, r7
 8007808:	bd80      	pop	{r7, pc}
 800780a:	bf00      	nop
 800780c:	2400678c 	.word	0x2400678c

08007810 <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Suspend(uint32_t Instance)
{
 8007810:	b580      	push	{r7, lr}
 8007812:	b084      	sub	sp, #16
 8007814:	af00      	add	r7, sp, #0
 8007816:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8007818:	687b      	ldr	r3, [r7, #4]
 800781a:	2b00      	cmp	r3, #0
 800781c:	d003      	beq.n	8007826 <BSP_CAMERA_Suspend+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800781e:	f06f 0301 	mvn.w	r3, #1
 8007822:	60fb      	str	r3, [r7, #12]
 8007824:	e00a      	b.n	800783c <BSP_CAMERA_Suspend+0x2c>
  }
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 8007826:	4808      	ldr	r0, [pc, #32]	@ (8007848 <BSP_CAMERA_Suspend+0x38>)
 8007828:	f001 fe26 	bl	8009478 <HAL_DCMI_Suspend>
 800782c:	4603      	mov	r3, r0
 800782e:	2b00      	cmp	r3, #0
 8007830:	d002      	beq.n	8007838 <BSP_CAMERA_Suspend+0x28>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 8007832:	f06f 0303 	mvn.w	r3, #3
 8007836:	e002      	b.n	800783e <BSP_CAMERA_Suspend+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007838:	2300      	movs	r3, #0
 800783a:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800783c:	68fb      	ldr	r3, [r7, #12]
}
 800783e:	4618      	mov	r0, r3
 8007840:	3710      	adds	r7, #16
 8007842:	46bd      	mov	sp, r7
 8007844:	bd80      	pop	{r7, pc}
 8007846:	bf00      	nop
 8007848:	240067e0 	.word	0x240067e0

0800784c <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Resume(uint32_t Instance)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	2b00      	cmp	r3, #0
 8007858:	d003      	beq.n	8007862 <BSP_CAMERA_Resume+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800785a:	f06f 0301 	mvn.w	r3, #1
 800785e:	60fb      	str	r3, [r7, #12]
 8007860:	e00b      	b.n	800787a <BSP_CAMERA_Resume+0x2e>
  }
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 8007862:	4808      	ldr	r0, [pc, #32]	@ (8007884 <BSP_CAMERA_Resume+0x38>)
 8007864:	f001 fe60 	bl	8009528 <HAL_DCMI_Resume>
 8007868:	4603      	mov	r3, r0
 800786a:	2b00      	cmp	r3, #0
 800786c:	d003      	beq.n	8007876 <BSP_CAMERA_Resume+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800786e:	f06f 0303 	mvn.w	r3, #3
 8007872:	60fb      	str	r3, [r7, #12]
 8007874:	e001      	b.n	800787a <BSP_CAMERA_Resume+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800787a:	68fb      	ldr	r3, [r7, #12]
}
 800787c:	4618      	mov	r0, r3
 800787e:	3710      	adds	r7, #16
 8007880:	46bd      	mov	sp, r7
 8007882:	bd80      	pop	{r7, pc}
 8007884:	240067e0 	.word	0x240067e0

08007888 <BSP_CAMERA_IRQHandler>:
  * @brief  This function handles DCMI interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_IRQHandler(uint32_t Instance)
{
 8007888:	b580      	push	{r7, lr}
 800788a:	b082      	sub	sp, #8
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 8007890:	4803      	ldr	r0, [pc, #12]	@ (80078a0 <BSP_CAMERA_IRQHandler+0x18>)
 8007892:	f001 fe75 	bl	8009580 <HAL_DCMI_IRQHandler>
}
 8007896:	bf00      	nop
 8007898:	3708      	adds	r7, #8
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	bf00      	nop
 80078a0:	240067e0 	.word	0x240067e0

080078a4 <BSP_CAMERA_DMA_IRQHandler>:
  * @brief  This function handles DCMI DMA interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_DMA_IRQHandler(uint32_t Instance)
{
 80078a4:	b580      	push	{r7, lr}
 80078a6:	b082      	sub	sp, #8
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 80078ac:	4b04      	ldr	r3, [pc, #16]	@ (80078c0 <BSP_CAMERA_DMA_IRQHandler+0x1c>)
 80078ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80078b0:	4618      	mov	r0, r3
 80078b2:	f003 fbe5 	bl	800b080 <HAL_DMA_IRQHandler>
}
 80078b6:	bf00      	nop
 80078b8:	3708      	adds	r7, #8
 80078ba:	46bd      	mov	sp, r7
 80078bc:	bd80      	pop	{r7, pc}
 80078be:	bf00      	nop
 80078c0:	240067e0 	.word	0x240067e0

080078c4 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80078c4:	b580      	push	{r7, lr}
 80078c6:	b082      	sub	sp, #8
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 80078cc:	2000      	movs	r0, #0
 80078ce:	f000 f825 	bl	800791c <BSP_CAMERA_LineEventCallback>
}
 80078d2:	bf00      	nop
 80078d4:	3708      	adds	r7, #8
 80078d6:	46bd      	mov	sp, r7
 80078d8:	bd80      	pop	{r7, pc}

080078da <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80078da:	b580      	push	{r7, lr}
 80078dc:	b082      	sub	sp, #8
 80078de:	af00      	add	r7, sp, #0
 80078e0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 80078e2:	2000      	movs	r0, #0
 80078e4:	f7fc ff6a 	bl	80047bc <BSP_CAMERA_FrameEventCallback>
}
 80078e8:	bf00      	nop
 80078ea:	3708      	adds	r7, #8
 80078ec:	46bd      	mov	sp, r7
 80078ee:	bd80      	pop	{r7, pc}

080078f0 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 80078f8:	2000      	movs	r0, #0
 80078fa:	f000 f819 	bl	8007930 <BSP_CAMERA_VsyncEventCallback>
}
 80078fe:	bf00      	nop
 8007900:	3708      	adds	r7, #8
 8007902:	46bd      	mov	sp, r7
 8007904:	bd80      	pop	{r7, pc}

08007906 <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 8007906:	b580      	push	{r7, lr}
 8007908:	b082      	sub	sp, #8
 800790a:	af00      	add	r7, sp, #0
 800790c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 800790e:	2000      	movs	r0, #0
 8007910:	f000 f818 	bl	8007944 <BSP_CAMERA_ErrorCallback>
}
 8007914:	bf00      	nop
 8007916:	3708      	adds	r7, #8
 8007918:	46bd      	mov	sp, r7
 800791a:	bd80      	pop	{r7, pc}

0800791c <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 800791c:	b480      	push	{r7}
 800791e:	b083      	sub	sp, #12
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 8007924:	bf00      	nop
 8007926:	370c      	adds	r7, #12
 8007928:	46bd      	mov	sp, r7
 800792a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800792e:	4770      	bx	lr

08007930 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 8007930:	b480      	push	{r7}
 8007932:	b083      	sub	sp, #12
 8007934:	af00      	add	r7, sp, #0
 8007936:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 8007938:	bf00      	nop
 800793a:	370c      	adds	r7, #12
 800793c:	46bd      	mov	sp, r7
 800793e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007942:	4770      	bx	lr

08007944 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 8007944:	b480      	push	{r7}
 8007946:	b083      	sub	sp, #12
 8007948:	af00      	add	r7, sp, #0
 800794a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800794c:	bf00      	nop
 800794e:	370c      	adds	r7, #12
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b084      	sub	sp, #16
 800795c:	af02      	add	r7, sp, #8
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 8007962:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 8007966:	9300      	str	r3, [sp, #0]
 8007968:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800796c:	2201      	movs	r2, #1
 800796e:	6839      	ldr	r1, [r7, #0]
 8007970:	6878      	ldr	r0, [r7, #4]
 8007972:	f000 f805 	bl	8007980 <BSP_LCD_InitEx>
 8007976:	4603      	mov	r3, r0
}
 8007978:	4618      	mov	r0, r3
 800797a:	3708      	adds	r7, #8
 800797c:	46bd      	mov	sp, r7
 800797e:	bd80      	pop	{r7, pc}

08007980 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 8007980:	b580      	push	{r7, lr}
 8007982:	b08e      	sub	sp, #56	@ 0x38
 8007984:	af00      	add	r7, sp, #0
 8007986:	60f8      	str	r0, [r7, #12]
 8007988:	60b9      	str	r1, [r7, #8]
 800798a:	607a      	str	r2, [r7, #4]
 800798c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800798e:	2300      	movs	r3, #0
 8007990:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 8007992:	68bb      	ldr	r3, [r7, #8]
 8007994:	2b01      	cmp	r3, #1
 8007996:	d808      	bhi.n	80079aa <BSP_LCD_InitEx+0x2a>
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d105      	bne.n	80079aa <BSP_LCD_InitEx+0x2a>
 800799e:	687b      	ldr	r3, [r7, #4]
 80079a0:	2b02      	cmp	r3, #2
 80079a2:	d006      	beq.n	80079b2 <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b01      	cmp	r3, #1
 80079a8:	d003      	beq.n	80079b2 <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80079aa:	f06f 0301 	mvn.w	r3, #1
 80079ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80079b0:	e0db      	b.n	8007b6a <BSP_LCD_InitEx+0x1ea>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	2b02      	cmp	r3, #2
 80079b6:	d10e      	bne.n	80079d6 <BSP_LCD_InitEx+0x56>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 80079b8:	2302      	movs	r3, #2
 80079ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB565;
 80079bc:	2300      	movs	r3, #0
 80079be:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 2U;
 80079c0:	496c      	ldr	r1, [pc, #432]	@ (8007b74 <BSP_LCD_InitEx+0x1f4>)
 80079c2:	68fa      	ldr	r2, [r7, #12]
 80079c4:	4613      	mov	r3, r2
 80079c6:	00db      	lsls	r3, r3, #3
 80079c8:	1a9b      	subs	r3, r3, r2
 80079ca:	009b      	lsls	r3, r3, #2
 80079cc:	440b      	add	r3, r1
 80079ce:	3310      	adds	r3, #16
 80079d0:	2202      	movs	r2, #2
 80079d2:	601a      	str	r2, [r3, #0]
 80079d4:	e00d      	b.n	80079f2 <BSP_LCD_InitEx+0x72>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 80079d6:	2300      	movs	r3, #0
 80079d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB888;
 80079da:	2305      	movs	r3, #5
 80079dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 4U;
 80079de:	4965      	ldr	r1, [pc, #404]	@ (8007b74 <BSP_LCD_InitEx+0x1f4>)
 80079e0:	68fa      	ldr	r2, [r7, #12]
 80079e2:	4613      	mov	r3, r2
 80079e4:	00db      	lsls	r3, r3, #3
 80079e6:	1a9b      	subs	r3, r3, r2
 80079e8:	009b      	lsls	r3, r3, #2
 80079ea:	440b      	add	r3, r1
 80079ec:	3310      	adds	r3, #16
 80079ee:	2204      	movs	r2, #4
 80079f0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 80079f2:	4960      	ldr	r1, [pc, #384]	@ (8007b74 <BSP_LCD_InitEx+0x1f4>)
 80079f4:	68fa      	ldr	r2, [r7, #12]
 80079f6:	4613      	mov	r3, r2
 80079f8:	00db      	lsls	r3, r3, #3
 80079fa:	1a9b      	subs	r3, r3, r2
 80079fc:	009b      	lsls	r3, r3, #2
 80079fe:	440b      	add	r3, r1
 8007a00:	330c      	adds	r3, #12
 8007a02:	687a      	ldr	r2, [r7, #4]
 8007a04:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 8007a06:	495b      	ldr	r1, [pc, #364]	@ (8007b74 <BSP_LCD_InitEx+0x1f4>)
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	4613      	mov	r3, r2
 8007a0c:	00db      	lsls	r3, r3, #3
 8007a0e:	1a9b      	subs	r3, r3, r2
 8007a10:	009b      	lsls	r3, r3, #2
 8007a12:	440b      	add	r3, r1
 8007a14:	683a      	ldr	r2, [r7, #0]
 8007a16:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 8007a18:	4956      	ldr	r1, [pc, #344]	@ (8007b74 <BSP_LCD_InitEx+0x1f4>)
 8007a1a:	68fa      	ldr	r2, [r7, #12]
 8007a1c:	4613      	mov	r3, r2
 8007a1e:	00db      	lsls	r3, r3, #3
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	009b      	lsls	r3, r3, #2
 8007a24:	440b      	add	r3, r1
 8007a26:	3304      	adds	r3, #4
 8007a28:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a2a:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 8007a2c:	68f8      	ldr	r0, [r7, #12]
 8007a2e:	f000 f8af 	bl	8007b90 <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 8007a32:	f000 f8e7 	bl	8007c04 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 8007a36:	4b50      	ldr	r3, [pc, #320]	@ (8007b78 <BSP_LCD_InitEx+0x1f8>)
 8007a38:	4a50      	ldr	r2, [pc, #320]	@ (8007b7c <BSP_LCD_InitEx+0x1fc>)
 8007a3a:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 8007a3c:	4b50      	ldr	r3, [pc, #320]	@ (8007b80 <BSP_LCD_InitEx+0x200>)
 8007a3e:	4a51      	ldr	r2, [pc, #324]	@ (8007b84 <BSP_LCD_InitEx+0x204>)
 8007a40:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 8007a42:	4b51      	ldr	r3, [pc, #324]	@ (8007b88 <BSP_LCD_InitEx+0x208>)
 8007a44:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007a48:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 8007a4a:	484b      	ldr	r0, [pc, #300]	@ (8007b78 <BSP_LCD_InitEx+0x1f8>)
 8007a4c:	f000 ff36 	bl	80088bc <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 8007a50:	484b      	ldr	r0, [pc, #300]	@ (8007b80 <BSP_LCD_InitEx+0x200>)
 8007a52:	f000 ff65 	bl	8008920 <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 8007a56:	484c      	ldr	r0, [pc, #304]	@ (8007b88 <BSP_LCD_InitEx+0x208>)
 8007a58:	f000 ff90 	bl	800897c <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 8007a5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007a5e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a60:	6839      	ldr	r1, [r7, #0]
 8007a62:	4849      	ldr	r0, [pc, #292]	@ (8007b88 <BSP_LCD_InitEx+0x208>)
 8007a64:	f000 f936 	bl	8007cd4 <MX_DSIHOST_DSI_Init>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	d003      	beq.n	8007a76 <BSP_LCD_InitEx+0xf6>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007a6e:	f06f 0303 	mvn.w	r3, #3
 8007a72:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a74:	e014      	b.n	8007aa0 <BSP_LCD_InitEx+0x120>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 8007a76:	4840      	ldr	r0, [pc, #256]	@ (8007b78 <BSP_LCD_InitEx+0x1f8>)
 8007a78:	f000 fa94 	bl	8007fa4 <MX_LTDC_ClockConfig>
 8007a7c:	4603      	mov	r3, r0
 8007a7e:	2b00      	cmp	r3, #0
 8007a80:	d003      	beq.n	8007a8a <BSP_LCD_InitEx+0x10a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8007a82:	f06f 0303 	mvn.w	r3, #3
 8007a86:	637b      	str	r3, [r7, #52]	@ 0x34
 8007a88:	e00a      	b.n	8007aa0 <BSP_LCD_InitEx+0x120>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 8007a8a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007a8c:	6839      	ldr	r1, [r7, #0]
 8007a8e:	483a      	ldr	r0, [pc, #232]	@ (8007b78 <BSP_LCD_InitEx+0x1f8>)
 8007a90:	f000 f9d2 	bl	8007e38 <MX_LTDC_Init>
 8007a94:	4603      	mov	r3, r0
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d002      	beq.n	8007aa0 <BSP_LCD_InitEx+0x120>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 8007a9a:	f06f 0303 	mvn.w	r3, #3
 8007a9e:	637b      	str	r3, [r7, #52]	@ 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 8007aa0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007aa2:	2b00      	cmp	r3, #0
 8007aa4:	d161      	bne.n	8007b6a <BSP_LCD_InitEx+0x1ea>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 8007aa6:	2000      	movs	r0, #0
 8007aa8:	f001 f8f0 	bl	8008c8c <BSP_SDRAM_Init>
 8007aac:	4603      	mov	r3, r0
 8007aae:	2b00      	cmp	r3, #0
 8007ab0:	d002      	beq.n	8007ab8 <BSP_LCD_InitEx+0x138>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 8007ab2:	f06f 0303 	mvn.w	r3, #3
 8007ab6:	e059      	b.n	8007b6c <BSP_LCD_InitEx+0x1ec>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 8007ab8:	2300      	movs	r3, #0
 8007aba:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 8007abc:	683b      	ldr	r3, [r7, #0]
 8007abe:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 8007ac0:	2300      	movs	r3, #0
 8007ac2:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 8007ac4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007ac6:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 8007ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007aca:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 8007acc:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8007ad0:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 8007ad2:	f107 0310 	add.w	r3, r7, #16
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	2100      	movs	r1, #0
 8007ada:	4827      	ldr	r0, [pc, #156]	@ (8007b78 <BSP_LCD_InitEx+0x1f8>)
 8007adc:	f000 fa20 	bl	8007f20 <MX_LTDC_ConfigLayer>
 8007ae0:	4603      	mov	r3, r0
 8007ae2:	2b00      	cmp	r3, #0
 8007ae4:	d003      	beq.n	8007aee <BSP_LCD_InitEx+0x16e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 8007ae6:	f06f 0303 	mvn.w	r3, #3
 8007aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8007aec:	e033      	b.n	8007b56 <BSP_LCD_InitEx+0x1d6>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 8007aee:	4826      	ldr	r0, [pc, #152]	@ (8007b88 <BSP_LCD_InitEx+0x208>)
 8007af0:	f005 fcb4 	bl	800d45c <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 8007af4:	2104      	movs	r1, #4
 8007af6:	4824      	ldr	r0, [pc, #144]	@ (8007b88 <BSP_LCD_InitEx+0x208>)
 8007af8:	f005 fc88 	bl	800d40c <HAL_DSI_ConfigFlowControl>

        /* Initialize the NT35510 LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	2b02      	cmp	r3, #2
 8007b00:	d102      	bne.n	8007b08 <BSP_LCD_InitEx+0x188>
        {
          ctrl_pixel_format = NT35510_FORMAT_RBG565;
 8007b02:	2302      	movs	r3, #2
 8007b04:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b06:	e001      	b.n	8007b0c <BSP_LCD_InitEx+0x18c>
        }
        else /* LCD_PIXEL_FORMAT_RGB888 */
        {
          ctrl_pixel_format = NT35510_FORMAT_RGB888;
 8007b08:	2300      	movs	r3, #0
 8007b0a:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        if(NT35510_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 8007b0c:	68b9      	ldr	r1, [r7, #8]
 8007b0e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b10:	f000 ffc8 	bl	8008aa4 <NT35510_Probe>
 8007b14:	4603      	mov	r3, r0
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d01b      	beq.n	8007b52 <BSP_LCD_InitEx+0x1d2>
        {
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 8007b1a:	4b1c      	ldr	r3, [pc, #112]	@ (8007b8c <BSP_LCD_InitEx+0x20c>)
 8007b1c:	2201      	movs	r2, #1
 8007b1e:	701a      	strb	r2, [r3, #0]

          if(ret == BSP_ERROR_NONE)
 8007b20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d117      	bne.n	8007b56 <BSP_LCD_InitEx+0x1d6>
          {
            /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
            depending on configuration of DSI */
            if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	2b02      	cmp	r3, #2
 8007b2a:	d102      	bne.n	8007b32 <BSP_LCD_InitEx+0x1b2>
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 8007b2c:	2302      	movs	r3, #2
 8007b2e:	633b      	str	r3, [r7, #48]	@ 0x30
 8007b30:	e001      	b.n	8007b36 <BSP_LCD_InitEx+0x1b6>
            }
            else /* LCD_PIXEL_FORMAT_RGB888 */
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 8007b32:	2300      	movs	r3, #0
 8007b34:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 8007b36:	68b9      	ldr	r1, [r7, #8]
 8007b38:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8007b3a:	f001 f80f 	bl	8008b5c <OTM8009A_Probe>
 8007b3e:	4603      	mov	r3, r0
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d003      	beq.n	8007b4c <BSP_LCD_InitEx+0x1cc>
            {
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8007b44:	f06f 0306 	mvn.w	r3, #6
 8007b48:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b4a:	e004      	b.n	8007b56 <BSP_LCD_InitEx+0x1d6>
            }
            else
            {
              ret = BSP_ERROR_NONE;
 8007b4c:	2300      	movs	r3, #0
 8007b4e:	637b      	str	r3, [r7, #52]	@ 0x34
 8007b50:	e001      	b.n	8007b56 <BSP_LCD_InitEx+0x1d6>
            }
          }
        }
        else
        {
          ret = BSP_ERROR_NONE;
 8007b52:	2300      	movs	r3, #0
 8007b54:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 8007b56:	4907      	ldr	r1, [pc, #28]	@ (8007b74 <BSP_LCD_InitEx+0x1f4>)
 8007b58:	68fa      	ldr	r2, [r7, #12]
 8007b5a:	4613      	mov	r3, r2
 8007b5c:	00db      	lsls	r3, r3, #3
 8007b5e:	1a9b      	subs	r3, r3, r2
 8007b60:	009b      	lsls	r3, r3, #2
 8007b62:	440b      	add	r3, r1
 8007b64:	3318      	adds	r3, #24
 8007b66:	2201      	movs	r2, #1
 8007b68:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 8007b6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3738      	adds	r7, #56	@ 0x38
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	24006964 	.word	0x24006964
 8007b78:	240068bc 	.word	0x240068bc
 8007b7c:	50001000 	.word	0x50001000
 8007b80:	24006854 	.word	0x24006854
 8007b84:	52001000 	.word	0x52001000
 8007b88:	24006838 	.word	0x24006838
 8007b8c:	24006980 	.word	0x24006980

08007b90 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 8007b90:	b580      	push	{r7, lr}
 8007b92:	b088      	sub	sp, #32
 8007b94:	af00      	add	r7, sp, #0
 8007b96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 8007b98:	4b18      	ldr	r3, [pc, #96]	@ (8007bfc <BSP_LCD_Reset+0x6c>)
 8007b9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007b9e:	4a17      	ldr	r2, [pc, #92]	@ (8007bfc <BSP_LCD_Reset+0x6c>)
 8007ba0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007ba4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007ba8:	4b14      	ldr	r3, [pc, #80]	@ (8007bfc <BSP_LCD_Reset+0x6c>)
 8007baa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007bae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007bb2:	60bb      	str	r3, [r7, #8]
 8007bb4:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 8007bb6:	2308      	movs	r3, #8
 8007bb8:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 8007bba:	2301      	movs	r3, #1
 8007bbc:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007bc2:	2303      	movs	r3, #3
 8007bc4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 8007bc6:	f107 030c 	add.w	r3, r7, #12
 8007bca:	4619      	mov	r1, r3
 8007bcc:	480c      	ldr	r0, [pc, #48]	@ (8007c00 <BSP_LCD_Reset+0x70>)
 8007bce:	f005 fe6f 	bl	800d8b0 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 8007bd2:	2200      	movs	r2, #0
 8007bd4:	2108      	movs	r1, #8
 8007bd6:	480a      	ldr	r0, [pc, #40]	@ (8007c00 <BSP_LCD_Reset+0x70>)
 8007bd8:	f006 f93c 	bl	800de54 <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 8007bdc:	2014      	movs	r0, #20
 8007bde:	f001 fa6f 	bl	80090c0 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 8007be2:	2201      	movs	r2, #1
 8007be4:	2108      	movs	r1, #8
 8007be6:	4806      	ldr	r0, [pc, #24]	@ (8007c00 <BSP_LCD_Reset+0x70>)
 8007be8:	f006 f934 	bl	800de54 <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 8007bec:	200a      	movs	r0, #10
 8007bee:	f001 fa67 	bl	80090c0 <HAL_Delay>
}
 8007bf2:	bf00      	nop
 8007bf4:	3720      	adds	r7, #32
 8007bf6:	46bd      	mov	sp, r7
 8007bf8:	bd80      	pop	{r7, pc}
 8007bfa:	bf00      	nop
 8007bfc:	58024400 	.word	0x58024400
 8007c00:	58021800 	.word	0x58021800

08007c04 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 8007c04:	b580      	push	{r7, lr}
 8007c06:	b088      	sub	sp, #32
 8007c08:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 8007c0a:	4b30      	ldr	r3, [pc, #192]	@ (8007ccc <LCD_InitSequence+0xc8>)
 8007c0c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c10:	4a2e      	ldr	r2, [pc, #184]	@ (8007ccc <LCD_InitSequence+0xc8>)
 8007c12:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c16:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c1a:	4b2c      	ldr	r3, [pc, #176]	@ (8007ccc <LCD_InitSequence+0xc8>)
 8007c1c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c20:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c24:	60bb      	str	r3, [r7, #8]
 8007c26:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 8007c28:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007c2c:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 8007c2e:	2301      	movs	r3, #1
 8007c30:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007c32:	2302      	movs	r3, #2
 8007c34:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8007c36:	2300      	movs	r3, #0
 8007c38:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 8007c3a:	f107 030c 	add.w	r3, r7, #12
 8007c3e:	4619      	mov	r1, r3
 8007c40:	4823      	ldr	r0, [pc, #140]	@ (8007cd0 <LCD_InitSequence+0xcc>)
 8007c42:	f005 fe35 	bl	800d8b0 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 8007c46:	2201      	movs	r2, #1
 8007c48:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8007c4c:	4820      	ldr	r0, [pc, #128]	@ (8007cd0 <LCD_InitSequence+0xcc>)
 8007c4e:	f006 f901 	bl	800de54 <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 8007c52:	4b1e      	ldr	r3, [pc, #120]	@ (8007ccc <LCD_InitSequence+0xc8>)
 8007c54:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c58:	4a1c      	ldr	r2, [pc, #112]	@ (8007ccc <LCD_InitSequence+0xc8>)
 8007c5a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8007c5e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8007c62:	4b1a      	ldr	r3, [pc, #104]	@ (8007ccc <LCD_InitSequence+0xc8>)
 8007c64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8007c68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007c6c:	607b      	str	r3, [r7, #4]
 8007c6e:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 8007c70:	2304      	movs	r3, #4
 8007c72:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 8007c74:	2300      	movs	r3, #0
 8007c76:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8007c78:	2302      	movs	r3, #2
 8007c7a:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 8007c7c:	f107 030c 	add.w	r3, r7, #12
 8007c80:	4619      	mov	r1, r3
 8007c82:	4813      	ldr	r0, [pc, #76]	@ (8007cd0 <LCD_InitSequence+0xcc>)
 8007c84:	f005 fe14 	bl	800d8b0 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 8007c88:	2201      	movs	r2, #1
 8007c8a:	2104      	movs	r1, #4
 8007c8c:	4810      	ldr	r0, [pc, #64]	@ (8007cd0 <LCD_InitSequence+0xcc>)
 8007c8e:	f006 f8e1 	bl	800de54 <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 8007c92:	2200      	movs	r2, #0
 8007c94:	210f      	movs	r1, #15
 8007c96:	2058      	movs	r0, #88	@ 0x58
 8007c98:	f001 fb2e 	bl	80092f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 8007c9c:	2058      	movs	r0, #88	@ 0x58
 8007c9e:	f001 fb45 	bl	800932c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 8007ca2:	2200      	movs	r2, #0
 8007ca4:	210f      	movs	r1, #15
 8007ca6:	205a      	movs	r0, #90	@ 0x5a
 8007ca8:	f001 fb26 	bl	80092f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 8007cac:	205a      	movs	r0, #90	@ 0x5a
 8007cae:	f001 fb3d 	bl	800932c <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	210f      	movs	r1, #15
 8007cb6:	207b      	movs	r0, #123	@ 0x7b
 8007cb8:	f001 fb1e 	bl	80092f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 8007cbc:	207b      	movs	r0, #123	@ 0x7b
 8007cbe:	f001 fb35 	bl	800932c <HAL_NVIC_EnableIRQ>
}
 8007cc2:	bf00      	nop
 8007cc4:	3720      	adds	r7, #32
 8007cc6:	46bd      	mov	sp, r7
 8007cc8:	bd80      	pop	{r7, pc}
 8007cca:	bf00      	nop
 8007ccc:	58024400 	.word	0x58024400
 8007cd0:	58022400 	.word	0x58022400

08007cd4 <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 8007cd4:	b580      	push	{r7, lr}
 8007cd6:	b0a2      	sub	sp, #136	@ 0x88
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	60f8      	str	r0, [r7, #12]
 8007cdc:	60b9      	str	r1, [r7, #8]
 8007cde:	607a      	str	r2, [r7, #4]
 8007ce0:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 8007ce2:	68fb      	ldr	r3, [r7, #12]
 8007ce4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8007ce8:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 8007cea:	68fb      	ldr	r3, [r7, #12]
 8007cec:	2200      	movs	r2, #0
 8007cee:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 8007cf0:	68fb      	ldr	r3, [r7, #12]
 8007cf2:	2204      	movs	r2, #4
 8007cf4:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	2201      	movs	r2, #1
 8007cfa:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 8007cfc:	2364      	movs	r3, #100	@ 0x64
 8007cfe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 8007d00:	2305      	movs	r3, #5
 8007d02:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 8007d06:	2300      	movs	r3, #0
 8007d08:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 8007d0c:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8007d10:	4619      	mov	r1, r3
 8007d12:	68f8      	ldr	r0, [r7, #12]
 8007d14:	f004 fff0 	bl	800ccf8 <HAL_DSI_Init>
 8007d18:	4603      	mov	r3, r0
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d001      	beq.n	8007d22 <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 8007d1e:	2301      	movs	r3, #1
 8007d20:	e07f      	b.n	8007e22 <MX_DSIHOST_DSI_Init+0x14e>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 8007d22:	2300      	movs	r3, #0
 8007d24:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 8007d26:	683b      	ldr	r3, [r7, #0]
 8007d28:	617b      	str	r3, [r7, #20]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007d2a:	4b40      	ldr	r3, [pc, #256]	@ (8007e2c <MX_DSIHOST_DSI_Init+0x158>)
 8007d2c:	781b      	ldrb	r3, [r3, #0]
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d103      	bne.n	8007d3a <MX_DSIHOST_DSI_Init+0x66>
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_ENABLE;
 8007d32:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007d36:	61bb      	str	r3, [r7, #24]
 8007d38:	e001      	b.n	8007d3e <MX_DSIHOST_DSI_Init+0x6a>
  }
  else
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 8007d3a:	2300      	movs	r3, #0
 8007d3c:	61bb      	str	r3, [r7, #24]
  }

  VidCfg.Mode = DSI_VID_MODE_BURST;
 8007d3e:	2302      	movs	r3, #2
 8007d40:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 8007d42:	68bb      	ldr	r3, [r7, #8]
 8007d44:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 8007d46:	2300      	movs	r3, #0
 8007d48:	627b      	str	r3, [r7, #36]	@ 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 8007d4a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 8007d4e:	62bb      	str	r3, [r7, #40]	@ 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 8007d50:	2300      	movs	r3, #0
 8007d52:	62fb      	str	r3, [r7, #44]	@ 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 8007d54:	2300      	movs	r3, #0
 8007d56:	633b      	str	r3, [r7, #48]	@ 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007d5c:	4b33      	ldr	r3, [pc, #204]	@ (8007e2c <MX_DSIHOST_DSI_Init+0x158>)
 8007d5e:	781b      	ldrb	r3, [r3, #0]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d116      	bne.n	8007d92 <MX_DSIHOST_DSI_Init+0xbe>
  {
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 8007d64:	2304      	movs	r3, #4
 8007d66:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 8007d68:	234d      	movs	r3, #77	@ 0x4d
 8007d6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8007d72:	fb03 f202 	mul.w	r2, r3, r2
 8007d76:	4b2e      	ldr	r3, [pc, #184]	@ (8007e30 <MX_DSIHOST_DSI_Init+0x15c>)
 8007d78:	4413      	add	r3, r2
 8007d7a:	4a2e      	ldr	r2, [pc, #184]	@ (8007e34 <MX_DSIHOST_DSI_Init+0x160>)
 8007d7c:	fba2 2303 	umull	r2, r3, r2, r3
 8007d80:	0b5b      	lsrs	r3, r3, #13
 8007d82:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = NT35510_480X800_VSYNC;
 8007d84:	2378      	movs	r3, #120	@ 0x78
 8007d86:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = NT35510_480X800_VBP;
 8007d88:	2396      	movs	r3, #150	@ 0x96
 8007d8a:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = NT35510_480X800_VFP;
 8007d8c:	2396      	movs	r3, #150	@ 0x96
 8007d8e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d90:	e015      	b.n	8007dbe <MX_DSIHOST_DSI_Init+0xea>
  }
  else
  {
    VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 8007d92:	2304      	movs	r3, #4
 8007d94:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 8007d96:	234d      	movs	r3, #77	@ 0x4d
 8007d98:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 8007d9a:	68bb      	ldr	r3, [r7, #8]
 8007d9c:	f24f 4224 	movw	r2, #62500	@ 0xf424
 8007da0:	fb03 f202 	mul.w	r2, r3, r2
 8007da4:	4b22      	ldr	r3, [pc, #136]	@ (8007e30 <MX_DSIHOST_DSI_Init+0x15c>)
 8007da6:	4413      	add	r3, r2
 8007da8:	4a22      	ldr	r2, [pc, #136]	@ (8007e34 <MX_DSIHOST_DSI_Init+0x160>)
 8007daa:	fba2 2303 	umull	r2, r3, r2, r3
 8007dae:	0b5b      	lsrs	r3, r3, #13
 8007db0:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 8007db2:	2301      	movs	r3, #1
 8007db4:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 8007db6:	230f      	movs	r3, #15
 8007db8:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 8007dba:	2310      	movs	r3, #16
 8007dbc:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  VidCfg.VerticalActive = Height;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	653b      	str	r3, [r7, #80]	@ 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 8007dc2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8007dc6:	657b      	str	r3, [r7, #84]	@ 0x54

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007dc8:	4b18      	ldr	r3, [pc, #96]	@ (8007e2c <MX_DSIHOST_DSI_Init+0x158>)
 8007dca:	781b      	ldrb	r3, [r3, #0]
 8007dcc:	2b00      	cmp	r3, #0
 8007dce:	d104      	bne.n	8007dda <MX_DSIHOST_DSI_Init+0x106>
  {
    VidCfg.LPLargestPacketSize = 64;
 8007dd0:	2340      	movs	r3, #64	@ 0x40
 8007dd2:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 64;
 8007dd4:	2340      	movs	r3, #64	@ 0x40
 8007dd6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007dd8:	e003      	b.n	8007de2 <MX_DSIHOST_DSI_Init+0x10e>
  }
  else
  {
    VidCfg.LPLargestPacketSize = 4;
 8007dda:	2304      	movs	r3, #4
 8007ddc:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 4;
 8007dde:	2304      	movs	r3, #4
 8007de0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 8007de2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8007de6:	663b      	str	r3, [r7, #96]	@ 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 8007de8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8007dec:	667b      	str	r3, [r7, #100]	@ 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 8007dee:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007df2:	66bb      	str	r3, [r7, #104]	@ 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 8007df4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007df8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 8007dfa:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8007dfe:	673b      	str	r3, [r7, #112]	@ 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 8007e00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007e04:	677b      	str	r3, [r7, #116]	@ 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 8007e06:	2300      	movs	r3, #0
 8007e08:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 8007e0a:	f107 0310 	add.w	r3, r7, #16
 8007e0e:	4619      	mov	r1, r3
 8007e10:	68f8      	ldr	r0, [r7, #12]
 8007e12:	f005 f8fb 	bl	800d00c <HAL_DSI_ConfigVideoMode>
 8007e16:	4603      	mov	r3, r0
 8007e18:	2b00      	cmp	r3, #0
 8007e1a:	d001      	beq.n	8007e20 <MX_DSIHOST_DSI_Init+0x14c>
  {
    return HAL_ERROR;
 8007e1c:	2301      	movs	r3, #1
 8007e1e:	e000      	b.n	8007e22 <MX_DSIHOST_DSI_Init+0x14e>
  }

  return HAL_OK;
 8007e20:	2300      	movs	r3, #0
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3788      	adds	r7, #136	@ 0x88
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}
 8007e2a:	bf00      	nop
 8007e2c:	24006980 	.word	0x24006980
 8007e30:	0042c1d8 	.word	0x0042c1d8
 8007e34:	4c751ce3 	.word	0x4c751ce3

08007e38 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 8007e38:	b580      	push	{r7, lr}
 8007e3a:	b084      	sub	sp, #16
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	60f8      	str	r0, [r7, #12]
 8007e40:	60b9      	str	r1, [r7, #8]
 8007e42:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	4a34      	ldr	r2, [pc, #208]	@ (8007f18 <MX_LTDC_Init+0xe0>)
 8007e48:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 8007e4a:	68fb      	ldr	r3, [r7, #12]
 8007e4c:	2200      	movs	r2, #0
 8007e4e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	2200      	movs	r2, #0
 8007e54:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 8007e56:	68fb      	ldr	r3, [r7, #12]
 8007e58:	2200      	movs	r2, #0
 8007e5a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 8007e5c:	68fb      	ldr	r3, [r7, #12]
 8007e5e:	2200      	movs	r2, #0
 8007e60:	611a      	str	r2, [r3, #16]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 8007e62:	4b2e      	ldr	r3, [pc, #184]	@ (8007f1c <MX_LTDC_Init+0xe4>)
 8007e64:	781b      	ldrb	r3, [r3, #0]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d121      	bne.n	8007eae <MX_LTDC_Init+0x76>
  {
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	2201      	movs	r2, #1
 8007e6e:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	2223      	movs	r2, #35	@ 0x23
 8007e74:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 8007e76:	68bb      	ldr	r3, [r7, #8]
 8007e78:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 8007e80:	68bb      	ldr	r3, [r7, #8]
 8007e82:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = NT35510_480X800_VSYNC - 1;
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	2277      	movs	r2, #119	@ 0x77
 8007e8e:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = NT35510_480X800_VSYNC + NT35510_480X800_VBP - 1;
 8007e90:	68fb      	ldr	r3, [r7, #12]
 8007e92:	f240 120d 	movw	r2, #269	@ 0x10d
 8007e96:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 8007e98:	687b      	ldr	r3, [r7, #4]
 8007e9a:	f203 120d 	addw	r2, r3, #269	@ 0x10d
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f203 12a3 	addw	r2, r3, #419	@ 0x1a3
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	631a      	str	r2, [r3, #48]	@ 0x30
 8007eac:	e01f      	b.n	8007eee <MX_LTDC_Init+0xb6>
  }
  else
  {
    hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	2201      	movs	r2, #1
 8007eb2:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	2223      	movs	r2, #35	@ 0x23
 8007eb8:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 8007eba:	68bb      	ldr	r3, [r7, #8]
 8007ebc:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	2200      	movs	r2, #0
 8007ed2:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	220f      	movs	r2, #15
 8007ed8:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	f103 020f 	add.w	r2, r3, #15
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f103 021f 	add.w	r2, r3, #31
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  hltdc->Init.Backcolor.Blue  = 0x00;
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 8007ef6:	68fb      	ldr	r3, [r7, #12]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 8007efe:	68fb      	ldr	r3, [r7, #12]
 8007f00:	2200      	movs	r2, #0
 8007f02:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 8007f06:	68f8      	ldr	r0, [r7, #12]
 8007f08:	f006 fe6d 	bl	800ebe6 <HAL_LTDC_Init>
 8007f0c:	4603      	mov	r3, r0
}
 8007f0e:	4618      	mov	r0, r3
 8007f10:	3710      	adds	r7, #16
 8007f12:	46bd      	mov	sp, r7
 8007f14:	bd80      	pop	{r7, pc}
 8007f16:	bf00      	nop
 8007f18:	50001000 	.word	0x50001000
 8007f1c:	24006980 	.word	0x24006980

08007f20 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 8007f20:	b580      	push	{r7, lr}
 8007f22:	b092      	sub	sp, #72	@ 0x48
 8007f24:	af00      	add	r7, sp, #0
 8007f26:	60f8      	str	r0, [r7, #12]
 8007f28:	60b9      	str	r1, [r7, #8]
 8007f2a:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	685b      	ldr	r3, [r3, #4]
 8007f36:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	68db      	ldr	r3, [r3, #12]
 8007f42:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	691b      	ldr	r3, [r3, #16]
 8007f48:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 8007f4a:	23ff      	movs	r3, #255	@ 0xff
 8007f4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 8007f4e:	2300      	movs	r3, #0
 8007f50:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 8007f52:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8007f56:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 8007f58:	2307      	movs	r3, #7
 8007f5a:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	695b      	ldr	r3, [r3, #20]
 8007f60:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685a      	ldr	r2, [r3, #4]
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	681b      	ldr	r3, [r3, #0]
 8007f6a:	1ad3      	subs	r3, r2, r3
 8007f6c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 8007f6e:	687b      	ldr	r3, [r7, #4]
 8007f70:	68da      	ldr	r2, [r3, #12]
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	689b      	ldr	r3, [r3, #8]
 8007f76:	1ad3      	subs	r3, r2, r3
 8007f78:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 8007f7a:	2300      	movs	r3, #0
 8007f7c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 8007f80:	2300      	movs	r3, #0
 8007f82:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 8007f86:	2300      	movs	r3, #0
 8007f88:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 8007f8c:	f107 0314 	add.w	r3, r7, #20
 8007f90:	68ba      	ldr	r2, [r7, #8]
 8007f92:	4619      	mov	r1, r3
 8007f94:	68f8      	ldr	r0, [r7, #12]
 8007f96:	f006 fecd 	bl	800ed34 <HAL_LTDC_ConfigLayer>
 8007f9a:	4603      	mov	r3, r0
}
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	3748      	adds	r7, #72	@ 0x48
 8007fa0:	46bd      	mov	sp, r7
 8007fa2:	bd80      	pop	{r7, pc}

08007fa4 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b0b4      	sub	sp, #208	@ 0xd0
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 8007fac:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 8007fb8:	2305      	movs	r3, #5
 8007fba:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 8007fbc:	2384      	movs	r3, #132	@ 0x84
 8007fbe:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 8007fc0:	2302      	movs	r3, #2
 8007fc2:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 8007fc4:	2302      	movs	r3, #2
 8007fc6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 8007fc8:	2318      	movs	r3, #24
 8007fca:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 8007fcc:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8007fd0:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 8007fd2:	2300      	movs	r3, #0
 8007fd4:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 8007fda:	f107 0308 	add.w	r3, r7, #8
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f008 fb14 	bl	801060c <HAL_RCCEx_PeriphCLKConfig>
 8007fe4:	4603      	mov	r3, r0
}
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	37d0      	adds	r7, #208	@ 0xd0
 8007fea:	46bd      	mov	sp, r7
 8007fec:	bd80      	pop	{r7, pc}
	...

08007ff0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 8007ff0:	b480      	push	{r7}
 8007ff2:	b085      	sub	sp, #20
 8007ff4:	af00      	add	r7, sp, #0
 8007ff6:	6078      	str	r0, [r7, #4]
 8007ff8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8007ffa:	2300      	movs	r3, #0
 8007ffc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	2b00      	cmp	r3, #0
 8008002:	d003      	beq.n	800800c <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008004:	f06f 0301 	mvn.w	r3, #1
 8008008:	60fb      	str	r3, [r7, #12]
 800800a:	e009      	b.n	8008020 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800800c:	4908      	ldr	r1, [pc, #32]	@ (8008030 <BSP_LCD_SetActiveLayer+0x40>)
 800800e:	687a      	ldr	r2, [r7, #4]
 8008010:	4613      	mov	r3, r2
 8008012:	00db      	lsls	r3, r3, #3
 8008014:	1a9b      	subs	r3, r3, r2
 8008016:	009b      	lsls	r3, r3, #2
 8008018:	440b      	add	r3, r1
 800801a:	3308      	adds	r3, #8
 800801c:	683a      	ldr	r2, [r7, #0]
 800801e:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8008020:	68fb      	ldr	r3, [r7, #12]
}
 8008022:	4618      	mov	r0, r3
 8008024:	3714      	adds	r7, #20
 8008026:	46bd      	mov	sp, r7
 8008028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802c:	4770      	bx	lr
 800802e:	bf00      	nop
 8008030:	24006964 	.word	0x24006964

08008034 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 8008034:	b480      	push	{r7}
 8008036:	b085      	sub	sp, #20
 8008038:	af00      	add	r7, sp, #0
 800803a:	6078      	str	r0, [r7, #4]
 800803c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800803e:	2300      	movs	r3, #0
 8008040:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	2b00      	cmp	r3, #0
 8008046:	d003      	beq.n	8008050 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8008048:	f06f 0301 	mvn.w	r3, #1
 800804c:	60fb      	str	r3, [r7, #12]
 800804e:	e00a      	b.n	8008066 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 8008050:	4908      	ldr	r1, [pc, #32]	@ (8008074 <BSP_LCD_GetPixelFormat+0x40>)
 8008052:	687a      	ldr	r2, [r7, #4]
 8008054:	4613      	mov	r3, r2
 8008056:	00db      	lsls	r3, r3, #3
 8008058:	1a9b      	subs	r3, r3, r2
 800805a:	009b      	lsls	r3, r3, #2
 800805c:	440b      	add	r3, r1
 800805e:	330c      	adds	r3, #12
 8008060:	681a      	ldr	r2, [r3, #0]
 8008062:	683b      	ldr	r3, [r7, #0]
 8008064:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8008066:	68fb      	ldr	r3, [r7, #12]
}
 8008068:	4618      	mov	r0, r3
 800806a:	3714      	adds	r7, #20
 800806c:	46bd      	mov	sp, r7
 800806e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008072:	4770      	bx	lr
 8008074:	24006964 	.word	0x24006964

08008078 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 8008078:	b480      	push	{r7}
 800807a:	b085      	sub	sp, #20
 800807c:	af00      	add	r7, sp, #0
 800807e:	6078      	str	r0, [r7, #4]
 8008080:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8008082:	2300      	movs	r3, #0
 8008084:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d003      	beq.n	8008094 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800808c:	f06f 0301 	mvn.w	r3, #1
 8008090:	60fb      	str	r3, [r7, #12]
 8008092:	e00e      	b.n	80080b2 <BSP_LCD_GetXSize+0x3a>
  }
  else if(Lcd_Drv->GetXSize != NULL)
 8008094:	4b0a      	ldr	r3, [pc, #40]	@ (80080c0 <BSP_LCD_GetXSize+0x48>)
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800809a:	2b00      	cmp	r3, #0
 800809c:	d009      	beq.n	80080b2 <BSP_LCD_GetXSize+0x3a>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800809e:	4909      	ldr	r1, [pc, #36]	@ (80080c4 <BSP_LCD_GetXSize+0x4c>)
 80080a0:	687a      	ldr	r2, [r7, #4]
 80080a2:	4613      	mov	r3, r2
 80080a4:	00db      	lsls	r3, r3, #3
 80080a6:	1a9b      	subs	r3, r3, r2
 80080a8:	009b      	lsls	r3, r3, #2
 80080aa:	440b      	add	r3, r1
 80080ac:	681a      	ldr	r2, [r3, #0]
 80080ae:	683b      	ldr	r3, [r7, #0]
 80080b0:	601a      	str	r2, [r3, #0]
  }

  return ret;
 80080b2:	68fb      	ldr	r3, [r7, #12]
}
 80080b4:	4618      	mov	r0, r3
 80080b6:	3714      	adds	r7, #20
 80080b8:	46bd      	mov	sp, r7
 80080ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080be:	4770      	bx	lr
 80080c0:	24006830 	.word	0x24006830
 80080c4:	24006964 	.word	0x24006964

080080c8 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 80080c8:	b480      	push	{r7}
 80080ca:	b085      	sub	sp, #20
 80080cc:	af00      	add	r7, sp, #0
 80080ce:	6078      	str	r0, [r7, #4]
 80080d0:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80080d2:	2300      	movs	r3, #0
 80080d4:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 80080d6:	687b      	ldr	r3, [r7, #4]
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80080dc:	f06f 0301 	mvn.w	r3, #1
 80080e0:	60fb      	str	r3, [r7, #12]
 80080e2:	e00f      	b.n	8008104 <BSP_LCD_GetYSize+0x3c>
  }
  else if(Lcd_Drv->GetYSize != NULL)
 80080e4:	4b0b      	ldr	r3, [pc, #44]	@ (8008114 <BSP_LCD_GetYSize+0x4c>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d00a      	beq.n	8008104 <BSP_LCD_GetYSize+0x3c>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 80080ee:	490a      	ldr	r1, [pc, #40]	@ (8008118 <BSP_LCD_GetYSize+0x50>)
 80080f0:	687a      	ldr	r2, [r7, #4]
 80080f2:	4613      	mov	r3, r2
 80080f4:	00db      	lsls	r3, r3, #3
 80080f6:	1a9b      	subs	r3, r3, r2
 80080f8:	009b      	lsls	r3, r3, #2
 80080fa:	440b      	add	r3, r1
 80080fc:	3304      	adds	r3, #4
 80080fe:	681a      	ldr	r2, [r3, #0]
 8008100:	683b      	ldr	r3, [r7, #0]
 8008102:	601a      	str	r2, [r3, #0]
  }

  return ret;
 8008104:	68fb      	ldr	r3, [r7, #12]
}
 8008106:	4618      	mov	r0, r3
 8008108:	3714      	adds	r7, #20
 800810a:	46bd      	mov	sp, r7
 800810c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008110:	4770      	bx	lr
 8008112:	bf00      	nop
 8008114:	24006830 	.word	0x24006830
 8008118:	24006964 	.word	0x24006964

0800811c <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800811c:	b590      	push	{r4, r7, lr}
 800811e:	b08f      	sub	sp, #60	@ 0x3c
 8008120:	af02      	add	r7, sp, #8
 8008122:	60f8      	str	r0, [r7, #12]
 8008124:	60b9      	str	r1, [r7, #8]
 8008126:	607a      	str	r2, [r7, #4]
 8008128:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800812a:	2300      	movs	r3, #0
 800812c:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800812e:	683b      	ldr	r3, [r7, #0]
 8008130:	330a      	adds	r3, #10
 8008132:	781b      	ldrb	r3, [r3, #0]
 8008134:	461a      	mov	r2, r3
 8008136:	683b      	ldr	r3, [r7, #0]
 8008138:	330b      	adds	r3, #11
 800813a:	781b      	ldrb	r3, [r3, #0]
 800813c:	021b      	lsls	r3, r3, #8
 800813e:	441a      	add	r2, r3
 8008140:	683b      	ldr	r3, [r7, #0]
 8008142:	330c      	adds	r3, #12
 8008144:	781b      	ldrb	r3, [r3, #0]
 8008146:	041b      	lsls	r3, r3, #16
 8008148:	441a      	add	r2, r3
 800814a:	683b      	ldr	r3, [r7, #0]
 800814c:	330d      	adds	r3, #13
 800814e:	781b      	ldrb	r3, [r3, #0]
 8008150:	061b      	lsls	r3, r3, #24
 8008152:	4413      	add	r3, r2
 8008154:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 8008156:	683b      	ldr	r3, [r7, #0]
 8008158:	3312      	adds	r3, #18
 800815a:	781b      	ldrb	r3, [r3, #0]
 800815c:	461a      	mov	r2, r3
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	3313      	adds	r3, #19
 8008162:	781b      	ldrb	r3, [r3, #0]
 8008164:	021b      	lsls	r3, r3, #8
 8008166:	441a      	add	r2, r3
 8008168:	683b      	ldr	r3, [r7, #0]
 800816a:	3314      	adds	r3, #20
 800816c:	781b      	ldrb	r3, [r3, #0]
 800816e:	041b      	lsls	r3, r3, #16
 8008170:	441a      	add	r2, r3
 8008172:	683b      	ldr	r3, [r7, #0]
 8008174:	3315      	adds	r3, #21
 8008176:	781b      	ldrb	r3, [r3, #0]
 8008178:	061b      	lsls	r3, r3, #24
 800817a:	4413      	add	r3, r2
 800817c:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800817e:	683b      	ldr	r3, [r7, #0]
 8008180:	3316      	adds	r3, #22
 8008182:	781b      	ldrb	r3, [r3, #0]
 8008184:	461a      	mov	r2, r3
 8008186:	683b      	ldr	r3, [r7, #0]
 8008188:	3317      	adds	r3, #23
 800818a:	781b      	ldrb	r3, [r3, #0]
 800818c:	021b      	lsls	r3, r3, #8
 800818e:	441a      	add	r2, r3
 8008190:	683b      	ldr	r3, [r7, #0]
 8008192:	3318      	adds	r3, #24
 8008194:	781b      	ldrb	r3, [r3, #0]
 8008196:	041b      	lsls	r3, r3, #16
 8008198:	441a      	add	r2, r3
 800819a:	683b      	ldr	r3, [r7, #0]
 800819c:	3319      	adds	r3, #25
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	061b      	lsls	r3, r3, #24
 80081a2:	4413      	add	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 80081a6:	683b      	ldr	r3, [r7, #0]
 80081a8:	331c      	adds	r3, #28
 80081aa:	781b      	ldrb	r3, [r3, #0]
 80081ac:	461a      	mov	r2, r3
 80081ae:	683b      	ldr	r3, [r7, #0]
 80081b0:	331d      	adds	r3, #29
 80081b2:	781b      	ldrb	r3, [r3, #0]
 80081b4:	021b      	lsls	r3, r3, #8
 80081b6:	4413      	add	r3, r2
 80081b8:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 80081ba:	493f      	ldr	r1, [pc, #252]	@ (80082b8 <BSP_LCD_DrawBitmap+0x19c>)
 80081bc:	68fa      	ldr	r2, [r7, #12]
 80081be:	4613      	mov	r3, r2
 80081c0:	00db      	lsls	r3, r3, #3
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	009b      	lsls	r3, r3, #2
 80081c6:	440b      	add	r3, r1
 80081c8:	3308      	adds	r3, #8
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	4a3b      	ldr	r2, [pc, #236]	@ (80082bc <BSP_LCD_DrawBitmap+0x1a0>)
 80081ce:	2134      	movs	r1, #52	@ 0x34
 80081d0:	fb01 f303 	mul.w	r3, r1, r3
 80081d4:	4413      	add	r3, r2
 80081d6:	335c      	adds	r3, #92	@ 0x5c
 80081d8:	6819      	ldr	r1, [r3, #0]
 80081da:	4837      	ldr	r0, [pc, #220]	@ (80082b8 <BSP_LCD_DrawBitmap+0x19c>)
 80081dc:	68fa      	ldr	r2, [r7, #12]
 80081de:	4613      	mov	r3, r2
 80081e0:	00db      	lsls	r3, r3, #3
 80081e2:	1a9b      	subs	r3, r3, r2
 80081e4:	009b      	lsls	r3, r3, #2
 80081e6:	4403      	add	r3, r0
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	687a      	ldr	r2, [r7, #4]
 80081ec:	fb03 f202 	mul.w	r2, r3, r2
 80081f0:	68bb      	ldr	r3, [r7, #8]
 80081f2:	18d0      	adds	r0, r2, r3
 80081f4:	4c30      	ldr	r4, [pc, #192]	@ (80082b8 <BSP_LCD_DrawBitmap+0x19c>)
 80081f6:	68fa      	ldr	r2, [r7, #12]
 80081f8:	4613      	mov	r3, r2
 80081fa:	00db      	lsls	r3, r3, #3
 80081fc:	1a9b      	subs	r3, r3, r2
 80081fe:	009b      	lsls	r3, r3, #2
 8008200:	4423      	add	r3, r4
 8008202:	3310      	adds	r3, #16
 8008204:	681b      	ldr	r3, [r3, #0]
 8008206:	fb00 f303 	mul.w	r3, r0, r3
 800820a:	440b      	add	r3, r1
 800820c:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 800820e:	693b      	ldr	r3, [r7, #16]
 8008210:	3b20      	subs	r3, #32
 8008212:	2b07      	cmp	r3, #7
 8008214:	d802      	bhi.n	800821c <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 8008216:	2300      	movs	r3, #0
 8008218:	627b      	str	r3, [r7, #36]	@ 0x24
 800821a:	e008      	b.n	800822e <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 800821c:	693b      	ldr	r3, [r7, #16]
 800821e:	3b10      	subs	r3, #16
 8008220:	2b07      	cmp	r3, #7
 8008222:	d802      	bhi.n	800822a <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 8008224:	2302      	movs	r3, #2
 8008226:	627b      	str	r3, [r7, #36]	@ 0x24
 8008228:	e001      	b.n	800822e <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 800822a:	2301      	movs	r3, #1
 800822c:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800822e:	697b      	ldr	r3, [r7, #20]
 8008230:	3b01      	subs	r3, #1
 8008232:	69ba      	ldr	r2, [r7, #24]
 8008234:	fb02 f303 	mul.w	r3, r2, r3
 8008238:	693a      	ldr	r2, [r7, #16]
 800823a:	08d2      	lsrs	r2, r2, #3
 800823c:	fb03 f202 	mul.w	r2, r3, r2
 8008240:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008242:	4413      	add	r3, r2
 8008244:	683a      	ldr	r2, [r7, #0]
 8008246:	4413      	add	r3, r2
 8008248:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800824a:	2300      	movs	r3, #0
 800824c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800824e:	e029      	b.n	80082a4 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 8008250:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008254:	9300      	str	r3, [sp, #0]
 8008256:	69bb      	ldr	r3, [r7, #24]
 8008258:	6a39      	ldr	r1, [r7, #32]
 800825a:	68f8      	ldr	r0, [r7, #12]
 800825c:	f000 fad6 	bl	800880c <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 8008260:	4915      	ldr	r1, [pc, #84]	@ (80082b8 <BSP_LCD_DrawBitmap+0x19c>)
 8008262:	68fa      	ldr	r2, [r7, #12]
 8008264:	4613      	mov	r3, r2
 8008266:	00db      	lsls	r3, r3, #3
 8008268:	1a9b      	subs	r3, r3, r2
 800826a:	009b      	lsls	r3, r3, #2
 800826c:	440b      	add	r3, r1
 800826e:	6819      	ldr	r1, [r3, #0]
 8008270:	4811      	ldr	r0, [pc, #68]	@ (80082b8 <BSP_LCD_DrawBitmap+0x19c>)
 8008272:	68fa      	ldr	r2, [r7, #12]
 8008274:	4613      	mov	r3, r2
 8008276:	00db      	lsls	r3, r3, #3
 8008278:	1a9b      	subs	r3, r3, r2
 800827a:	009b      	lsls	r3, r3, #2
 800827c:	4403      	add	r3, r0
 800827e:	3310      	adds	r3, #16
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	fb01 f303 	mul.w	r3, r1, r3
 8008286:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8008288:	4413      	add	r3, r2
 800828a:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 800828c:	693b      	ldr	r3, [r7, #16]
 800828e:	08db      	lsrs	r3, r3, #3
 8008290:	69ba      	ldr	r2, [r7, #24]
 8008292:	fb02 f303 	mul.w	r3, r2, r3
 8008296:	425b      	negs	r3, r3
 8008298:	6a3a      	ldr	r2, [r7, #32]
 800829a:	4413      	add	r3, r2
 800829c:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 800829e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80082a0:	3301      	adds	r3, #1
 80082a2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80082a4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80082a6:	697b      	ldr	r3, [r7, #20]
 80082a8:	429a      	cmp	r2, r3
 80082aa:	d3d1      	bcc.n	8008250 <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 80082ac:	69fb      	ldr	r3, [r7, #28]
}
 80082ae:	4618      	mov	r0, r3
 80082b0:	3734      	adds	r7, #52	@ 0x34
 80082b2:	46bd      	mov	sp, r7
 80082b4:	bd90      	pop	{r4, r7, pc}
 80082b6:	bf00      	nop
 80082b8:	24006964 	.word	0x24006964
 80082bc:	240068bc 	.word	0x240068bc

080082c0 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b088      	sub	sp, #32
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	60f8      	str	r0, [r7, #12]
 80082c8:	60b9      	str	r1, [r7, #8]
 80082ca:	607a      	str	r2, [r7, #4]
 80082cc:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 80082ce:	2300      	movs	r3, #0
 80082d0:	61fb      	str	r3, [r7, #28]
 80082d2:	e035      	b.n	8008340 <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 80082d4:	2300      	movs	r3, #0
 80082d6:	61bb      	str	r3, [r7, #24]
 80082d8:	e02b      	b.n	8008332 <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 80082da:	683b      	ldr	r3, [r7, #0]
 80082dc:	781b      	ldrb	r3, [r3, #0]
 80082de:	461a      	mov	r2, r3
 80082e0:	683b      	ldr	r3, [r7, #0]
 80082e2:	3301      	adds	r3, #1
 80082e4:	781b      	ldrb	r3, [r3, #0]
 80082e6:	021b      	lsls	r3, r3, #8
 80082e8:	431a      	orrs	r2, r3
 80082ea:	683b      	ldr	r3, [r7, #0]
 80082ec:	3302      	adds	r3, #2
 80082ee:	781b      	ldrb	r3, [r3, #0]
 80082f0:	041b      	lsls	r3, r3, #16
 80082f2:	431a      	orrs	r2, r3
 80082f4:	683b      	ldr	r3, [r7, #0]
 80082f6:	3303      	adds	r3, #3
 80082f8:	781b      	ldrb	r3, [r3, #0]
 80082fa:	061b      	lsls	r3, r3, #24
 80082fc:	4313      	orrs	r3, r2
 80082fe:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 8008300:	68ba      	ldr	r2, [r7, #8]
 8008302:	69bb      	ldr	r3, [r7, #24]
 8008304:	18d1      	adds	r1, r2, r3
 8008306:	687a      	ldr	r2, [r7, #4]
 8008308:	69fb      	ldr	r3, [r7, #28]
 800830a:	441a      	add	r2, r3
 800830c:	697b      	ldr	r3, [r7, #20]
 800830e:	68f8      	ldr	r0, [r7, #12]
 8008310:	f000 f99e 	bl	8008650 <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 8008314:	490f      	ldr	r1, [pc, #60]	@ (8008354 <BSP_LCD_FillRGBRect+0x94>)
 8008316:	68fa      	ldr	r2, [r7, #12]
 8008318:	4613      	mov	r3, r2
 800831a:	00db      	lsls	r3, r3, #3
 800831c:	1a9b      	subs	r3, r3, r2
 800831e:	009b      	lsls	r3, r3, #2
 8008320:	440b      	add	r3, r1
 8008322:	3310      	adds	r3, #16
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	683a      	ldr	r2, [r7, #0]
 8008328:	4413      	add	r3, r2
 800832a:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 800832c:	69bb      	ldr	r3, [r7, #24]
 800832e:	3301      	adds	r3, #1
 8008330:	61bb      	str	r3, [r7, #24]
 8008332:	69ba      	ldr	r2, [r7, #24]
 8008334:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008336:	429a      	cmp	r2, r3
 8008338:	d3cf      	bcc.n	80082da <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 800833a:	69fb      	ldr	r3, [r7, #28]
 800833c:	3301      	adds	r3, #1
 800833e:	61fb      	str	r3, [r7, #28]
 8008340:	69fa      	ldr	r2, [r7, #28]
 8008342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008344:	429a      	cmp	r2, r3
 8008346:	d3c5      	bcc.n	80082d4 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 8008348:	2300      	movs	r3, #0
}
 800834a:	4618      	mov	r0, r3
 800834c:	3720      	adds	r7, #32
 800834e:	46bd      	mov	sp, r7
 8008350:	bd80      	pop	{r7, pc}
 8008352:	bf00      	nop
 8008354:	24006964 	.word	0x24006964

08008358 <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8008358:	b590      	push	{r4, r7, lr}
 800835a:	b089      	sub	sp, #36	@ 0x24
 800835c:	af02      	add	r7, sp, #8
 800835e:	60f8      	str	r0, [r7, #12]
 8008360:	60b9      	str	r1, [r7, #8]
 8008362:	607a      	str	r2, [r7, #4]
 8008364:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 8008366:	4928      	ldr	r1, [pc, #160]	@ (8008408 <BSP_LCD_DrawHLine+0xb0>)
 8008368:	68fa      	ldr	r2, [r7, #12]
 800836a:	4613      	mov	r3, r2
 800836c:	00db      	lsls	r3, r3, #3
 800836e:	1a9b      	subs	r3, r3, r2
 8008370:	009b      	lsls	r3, r3, #2
 8008372:	440b      	add	r3, r1
 8008374:	3308      	adds	r3, #8
 8008376:	681b      	ldr	r3, [r3, #0]
 8008378:	4a24      	ldr	r2, [pc, #144]	@ (800840c <BSP_LCD_DrawHLine+0xb4>)
 800837a:	2134      	movs	r1, #52	@ 0x34
 800837c:	fb01 f303 	mul.w	r3, r1, r3
 8008380:	4413      	add	r3, r2
 8008382:	335c      	adds	r3, #92	@ 0x5c
 8008384:	6819      	ldr	r1, [r3, #0]
 8008386:	4820      	ldr	r0, [pc, #128]	@ (8008408 <BSP_LCD_DrawHLine+0xb0>)
 8008388:	68fa      	ldr	r2, [r7, #12]
 800838a:	4613      	mov	r3, r2
 800838c:	00db      	lsls	r3, r3, #3
 800838e:	1a9b      	subs	r3, r3, r2
 8008390:	009b      	lsls	r3, r3, #2
 8008392:	4403      	add	r3, r0
 8008394:	3310      	adds	r3, #16
 8008396:	6818      	ldr	r0, [r3, #0]
 8008398:	4c1b      	ldr	r4, [pc, #108]	@ (8008408 <BSP_LCD_DrawHLine+0xb0>)
 800839a:	68fa      	ldr	r2, [r7, #12]
 800839c:	4613      	mov	r3, r2
 800839e:	00db      	lsls	r3, r3, #3
 80083a0:	1a9b      	subs	r3, r3, r2
 80083a2:	009b      	lsls	r3, r3, #2
 80083a4:	4423      	add	r3, r4
 80083a6:	681b      	ldr	r3, [r3, #0]
 80083a8:	687a      	ldr	r2, [r7, #4]
 80083aa:	fb03 f202 	mul.w	r2, r3, r2
 80083ae:	68bb      	ldr	r3, [r7, #8]
 80083b0:	4413      	add	r3, r2
 80083b2:	fb00 f303 	mul.w	r3, r0, r3
 80083b6:	440b      	add	r3, r1
 80083b8:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 80083ba:	68ba      	ldr	r2, [r7, #8]
 80083bc:	683b      	ldr	r3, [r7, #0]
 80083be:	18d1      	adds	r1, r2, r3
 80083c0:	4811      	ldr	r0, [pc, #68]	@ (8008408 <BSP_LCD_DrawHLine+0xb0>)
 80083c2:	68fa      	ldr	r2, [r7, #12]
 80083c4:	4613      	mov	r3, r2
 80083c6:	00db      	lsls	r3, r3, #3
 80083c8:	1a9b      	subs	r3, r3, r2
 80083ca:	009b      	lsls	r3, r3, #2
 80083cc:	4403      	add	r3, r0
 80083ce:	681b      	ldr	r3, [r3, #0]
 80083d0:	4299      	cmp	r1, r3
 80083d2:	d90a      	bls.n	80083ea <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 80083d4:	490c      	ldr	r1, [pc, #48]	@ (8008408 <BSP_LCD_DrawHLine+0xb0>)
 80083d6:	68fa      	ldr	r2, [r7, #12]
 80083d8:	4613      	mov	r3, r2
 80083da:	00db      	lsls	r3, r3, #3
 80083dc:	1a9b      	subs	r3, r3, r2
 80083de:	009b      	lsls	r3, r3, #2
 80083e0:	440b      	add	r3, r1
 80083e2:	681a      	ldr	r2, [r3, #0]
 80083e4:	68bb      	ldr	r3, [r7, #8]
 80083e6:	1ad3      	subs	r3, r2, r3
 80083e8:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 80083ea:	6979      	ldr	r1, [r7, #20]
 80083ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	2300      	movs	r3, #0
 80083f2:	9300      	str	r3, [sp, #0]
 80083f4:	2301      	movs	r3, #1
 80083f6:	683a      	ldr	r2, [r7, #0]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 f993 	bl	8008724 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80083fe:	2300      	movs	r3, #0
}
 8008400:	4618      	mov	r0, r3
 8008402:	371c      	adds	r7, #28
 8008404:	46bd      	mov	sp, r7
 8008406:	bd90      	pop	{r4, r7, pc}
 8008408:	24006964 	.word	0x24006964
 800840c:	240068bc 	.word	0x240068bc

08008410 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8008410:	b590      	push	{r4, r7, lr}
 8008412:	b089      	sub	sp, #36	@ 0x24
 8008414:	af02      	add	r7, sp, #8
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
 800841c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800841e:	492d      	ldr	r1, [pc, #180]	@ (80084d4 <BSP_LCD_DrawVLine+0xc4>)
 8008420:	68fa      	ldr	r2, [r7, #12]
 8008422:	4613      	mov	r3, r2
 8008424:	00db      	lsls	r3, r3, #3
 8008426:	1a9b      	subs	r3, r3, r2
 8008428:	009b      	lsls	r3, r3, #2
 800842a:	440b      	add	r3, r1
 800842c:	3308      	adds	r3, #8
 800842e:	681b      	ldr	r3, [r3, #0]
 8008430:	4a29      	ldr	r2, [pc, #164]	@ (80084d8 <BSP_LCD_DrawVLine+0xc8>)
 8008432:	2134      	movs	r1, #52	@ 0x34
 8008434:	fb01 f303 	mul.w	r3, r1, r3
 8008438:	4413      	add	r3, r2
 800843a:	335c      	adds	r3, #92	@ 0x5c
 800843c:	6819      	ldr	r1, [r3, #0]
 800843e:	4825      	ldr	r0, [pc, #148]	@ (80084d4 <BSP_LCD_DrawVLine+0xc4>)
 8008440:	68fa      	ldr	r2, [r7, #12]
 8008442:	4613      	mov	r3, r2
 8008444:	00db      	lsls	r3, r3, #3
 8008446:	1a9b      	subs	r3, r3, r2
 8008448:	009b      	lsls	r3, r3, #2
 800844a:	4403      	add	r3, r0
 800844c:	3310      	adds	r3, #16
 800844e:	6818      	ldr	r0, [r3, #0]
 8008450:	4c20      	ldr	r4, [pc, #128]	@ (80084d4 <BSP_LCD_DrawVLine+0xc4>)
 8008452:	68fa      	ldr	r2, [r7, #12]
 8008454:	4613      	mov	r3, r2
 8008456:	00db      	lsls	r3, r3, #3
 8008458:	1a9b      	subs	r3, r3, r2
 800845a:	009b      	lsls	r3, r3, #2
 800845c:	4423      	add	r3, r4
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	687a      	ldr	r2, [r7, #4]
 8008462:	fb03 f202 	mul.w	r2, r3, r2
 8008466:	68bb      	ldr	r3, [r7, #8]
 8008468:	4413      	add	r3, r2
 800846a:	fb00 f303 	mul.w	r3, r0, r3
 800846e:	440b      	add	r3, r1
 8008470:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 8008472:	687a      	ldr	r2, [r7, #4]
 8008474:	683b      	ldr	r3, [r7, #0]
 8008476:	18d1      	adds	r1, r2, r3
 8008478:	4816      	ldr	r0, [pc, #88]	@ (80084d4 <BSP_LCD_DrawVLine+0xc4>)
 800847a:	68fa      	ldr	r2, [r7, #12]
 800847c:	4613      	mov	r3, r2
 800847e:	00db      	lsls	r3, r3, #3
 8008480:	1a9b      	subs	r3, r3, r2
 8008482:	009b      	lsls	r3, r3, #2
 8008484:	4403      	add	r3, r0
 8008486:	3304      	adds	r3, #4
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	4299      	cmp	r1, r3
 800848c:	d90b      	bls.n	80084a6 <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800848e:	4911      	ldr	r1, [pc, #68]	@ (80084d4 <BSP_LCD_DrawVLine+0xc4>)
 8008490:	68fa      	ldr	r2, [r7, #12]
 8008492:	4613      	mov	r3, r2
 8008494:	00db      	lsls	r3, r3, #3
 8008496:	1a9b      	subs	r3, r3, r2
 8008498:	009b      	lsls	r3, r3, #2
 800849a:	440b      	add	r3, r1
 800849c:	3304      	adds	r3, #4
 800849e:	681a      	ldr	r2, [r3, #0]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	1ad3      	subs	r3, r2, r3
 80084a4:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 80084a6:	6979      	ldr	r1, [r7, #20]
 80084a8:	480a      	ldr	r0, [pc, #40]	@ (80084d4 <BSP_LCD_DrawVLine+0xc4>)
 80084aa:	68fa      	ldr	r2, [r7, #12]
 80084ac:	4613      	mov	r3, r2
 80084ae:	00db      	lsls	r3, r3, #3
 80084b0:	1a9b      	subs	r3, r3, r2
 80084b2:	009b      	lsls	r3, r3, #2
 80084b4:	4403      	add	r3, r0
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	3b01      	subs	r3, #1
 80084ba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084bc:	9201      	str	r2, [sp, #4]
 80084be:	9300      	str	r3, [sp, #0]
 80084c0:	683b      	ldr	r3, [r7, #0]
 80084c2:	2201      	movs	r2, #1
 80084c4:	68f8      	ldr	r0, [r7, #12]
 80084c6:	f000 f92d 	bl	8008724 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 80084ca:	2300      	movs	r3, #0
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	371c      	adds	r7, #28
 80084d0:	46bd      	mov	sp, r7
 80084d2:	bd90      	pop	{r4, r7, pc}
 80084d4:	24006964 	.word	0x24006964
 80084d8:	240068bc 	.word	0x240068bc

080084dc <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80084dc:	b590      	push	{r4, r7, lr}
 80084de:	b089      	sub	sp, #36	@ 0x24
 80084e0:	af02      	add	r7, sp, #8
 80084e2:	60f8      	str	r0, [r7, #12]
 80084e4:	60b9      	str	r1, [r7, #8]
 80084e6:	607a      	str	r2, [r7, #4]
 80084e8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 80084ea:	4921      	ldr	r1, [pc, #132]	@ (8008570 <BSP_LCD_FillRect+0x94>)
 80084ec:	68fa      	ldr	r2, [r7, #12]
 80084ee:	4613      	mov	r3, r2
 80084f0:	00db      	lsls	r3, r3, #3
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	009b      	lsls	r3, r3, #2
 80084f6:	440b      	add	r3, r1
 80084f8:	3308      	adds	r3, #8
 80084fa:	681b      	ldr	r3, [r3, #0]
 80084fc:	4a1d      	ldr	r2, [pc, #116]	@ (8008574 <BSP_LCD_FillRect+0x98>)
 80084fe:	2134      	movs	r1, #52	@ 0x34
 8008500:	fb01 f303 	mul.w	r3, r1, r3
 8008504:	4413      	add	r3, r2
 8008506:	335c      	adds	r3, #92	@ 0x5c
 8008508:	6819      	ldr	r1, [r3, #0]
 800850a:	4819      	ldr	r0, [pc, #100]	@ (8008570 <BSP_LCD_FillRect+0x94>)
 800850c:	68fa      	ldr	r2, [r7, #12]
 800850e:	4613      	mov	r3, r2
 8008510:	00db      	lsls	r3, r3, #3
 8008512:	1a9b      	subs	r3, r3, r2
 8008514:	009b      	lsls	r3, r3, #2
 8008516:	4403      	add	r3, r0
 8008518:	3310      	adds	r3, #16
 800851a:	6818      	ldr	r0, [r3, #0]
 800851c:	4c14      	ldr	r4, [pc, #80]	@ (8008570 <BSP_LCD_FillRect+0x94>)
 800851e:	68fa      	ldr	r2, [r7, #12]
 8008520:	4613      	mov	r3, r2
 8008522:	00db      	lsls	r3, r3, #3
 8008524:	1a9b      	subs	r3, r3, r2
 8008526:	009b      	lsls	r3, r3, #2
 8008528:	4423      	add	r3, r4
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	687a      	ldr	r2, [r7, #4]
 800852e:	fb03 f202 	mul.w	r2, r3, r2
 8008532:	68bb      	ldr	r3, [r7, #8]
 8008534:	4413      	add	r3, r2
 8008536:	fb00 f303 	mul.w	r3, r0, r3
 800853a:	440b      	add	r3, r1
 800853c:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800853e:	6979      	ldr	r1, [r7, #20]
 8008540:	480b      	ldr	r0, [pc, #44]	@ (8008570 <BSP_LCD_FillRect+0x94>)
 8008542:	68fa      	ldr	r2, [r7, #12]
 8008544:	4613      	mov	r3, r2
 8008546:	00db      	lsls	r3, r3, #3
 8008548:	1a9b      	subs	r3, r3, r2
 800854a:	009b      	lsls	r3, r3, #2
 800854c:	4403      	add	r3, r0
 800854e:	681a      	ldr	r2, [r3, #0]
 8008550:	683b      	ldr	r3, [r7, #0]
 8008552:	1ad3      	subs	r3, r2, r3
 8008554:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008556:	9201      	str	r2, [sp, #4]
 8008558:	9300      	str	r3, [sp, #0]
 800855a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800855c:	683a      	ldr	r2, [r7, #0]
 800855e:	68f8      	ldr	r0, [r7, #12]
 8008560:	f000 f8e0 	bl	8008724 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 8008564:	2300      	movs	r3, #0
}
 8008566:	4618      	mov	r0, r3
 8008568:	371c      	adds	r7, #28
 800856a:	46bd      	mov	sp, r7
 800856c:	bd90      	pop	{r4, r7, pc}
 800856e:	bf00      	nop
 8008570:	24006964 	.word	0x24006964
 8008574:	240068bc 	.word	0x240068bc

08008578 <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8008578:	b480      	push	{r7}
 800857a:	b085      	sub	sp, #20
 800857c:	af00      	add	r7, sp, #0
 800857e:	60f8      	str	r0, [r7, #12]
 8008580:	60b9      	str	r1, [r7, #8]
 8008582:	607a      	str	r2, [r7, #4]
 8008584:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8008586:	4930      	ldr	r1, [pc, #192]	@ (8008648 <BSP_LCD_ReadPixel+0xd0>)
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	4613      	mov	r3, r2
 800858c:	00db      	lsls	r3, r3, #3
 800858e:	1a9b      	subs	r3, r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	440b      	add	r3, r1
 8008594:	3308      	adds	r3, #8
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	4a2c      	ldr	r2, [pc, #176]	@ (800864c <BSP_LCD_ReadPixel+0xd4>)
 800859a:	2134      	movs	r1, #52	@ 0x34
 800859c:	fb01 f303 	mul.w	r3, r1, r3
 80085a0:	4413      	add	r3, r2
 80085a2:	3348      	adds	r3, #72	@ 0x48
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	2b00      	cmp	r3, #0
 80085a8:	d122      	bne.n	80085f0 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80085aa:	4927      	ldr	r1, [pc, #156]	@ (8008648 <BSP_LCD_ReadPixel+0xd0>)
 80085ac:	68fa      	ldr	r2, [r7, #12]
 80085ae:	4613      	mov	r3, r2
 80085b0:	00db      	lsls	r3, r3, #3
 80085b2:	1a9b      	subs	r3, r3, r2
 80085b4:	009b      	lsls	r3, r3, #2
 80085b6:	440b      	add	r3, r1
 80085b8:	3308      	adds	r3, #8
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	4a23      	ldr	r2, [pc, #140]	@ (800864c <BSP_LCD_ReadPixel+0xd4>)
 80085be:	2134      	movs	r1, #52	@ 0x34
 80085c0:	fb01 f303 	mul.w	r3, r1, r3
 80085c4:	4413      	add	r3, r2
 80085c6:	335c      	adds	r3, #92	@ 0x5c
 80085c8:	6819      	ldr	r1, [r3, #0]
 80085ca:	481f      	ldr	r0, [pc, #124]	@ (8008648 <BSP_LCD_ReadPixel+0xd0>)
 80085cc:	68fa      	ldr	r2, [r7, #12]
 80085ce:	4613      	mov	r3, r2
 80085d0:	00db      	lsls	r3, r3, #3
 80085d2:	1a9b      	subs	r3, r3, r2
 80085d4:	009b      	lsls	r3, r3, #2
 80085d6:	4403      	add	r3, r0
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	687a      	ldr	r2, [r7, #4]
 80085dc:	fb03 f202 	mul.w	r2, r3, r2
 80085e0:	68bb      	ldr	r3, [r7, #8]
 80085e2:	4413      	add	r3, r2
 80085e4:	009b      	lsls	r3, r3, #2
 80085e6:	440b      	add	r3, r1
 80085e8:	681a      	ldr	r2, [r3, #0]
 80085ea:	683b      	ldr	r3, [r7, #0]
 80085ec:	601a      	str	r2, [r3, #0]
 80085ee:	e023      	b.n	8008638 <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 80085f0:	4915      	ldr	r1, [pc, #84]	@ (8008648 <BSP_LCD_ReadPixel+0xd0>)
 80085f2:	68fa      	ldr	r2, [r7, #12]
 80085f4:	4613      	mov	r3, r2
 80085f6:	00db      	lsls	r3, r3, #3
 80085f8:	1a9b      	subs	r3, r3, r2
 80085fa:	009b      	lsls	r3, r3, #2
 80085fc:	440b      	add	r3, r1
 80085fe:	3308      	adds	r3, #8
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	4a12      	ldr	r2, [pc, #72]	@ (800864c <BSP_LCD_ReadPixel+0xd4>)
 8008604:	2134      	movs	r1, #52	@ 0x34
 8008606:	fb01 f303 	mul.w	r3, r1, r3
 800860a:	4413      	add	r3, r2
 800860c:	335c      	adds	r3, #92	@ 0x5c
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	480d      	ldr	r0, [pc, #52]	@ (8008648 <BSP_LCD_ReadPixel+0xd0>)
 8008612:	68fa      	ldr	r2, [r7, #12]
 8008614:	4613      	mov	r3, r2
 8008616:	00db      	lsls	r3, r3, #3
 8008618:	1a9b      	subs	r3, r3, r2
 800861a:	009b      	lsls	r3, r3, #2
 800861c:	4403      	add	r3, r0
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	687a      	ldr	r2, [r7, #4]
 8008622:	fb03 f202 	mul.w	r2, r3, r2
 8008626:	68bb      	ldr	r3, [r7, #8]
 8008628:	4413      	add	r3, r2
 800862a:	005b      	lsls	r3, r3, #1
 800862c:	440b      	add	r3, r1
 800862e:	881b      	ldrh	r3, [r3, #0]
 8008630:	b29b      	uxth	r3, r3
 8008632:	461a      	mov	r2, r3
 8008634:	683b      	ldr	r3, [r7, #0]
 8008636:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 8008638:	2300      	movs	r3, #0
}
 800863a:	4618      	mov	r0, r3
 800863c:	3714      	adds	r7, #20
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	24006964 	.word	0x24006964
 800864c:	240068bc 	.word	0x240068bc

08008650 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8008650:	b480      	push	{r7}
 8008652:	b085      	sub	sp, #20
 8008654:	af00      	add	r7, sp, #0
 8008656:	60f8      	str	r0, [r7, #12]
 8008658:	60b9      	str	r1, [r7, #8]
 800865a:	607a      	str	r2, [r7, #4]
 800865c:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800865e:	492f      	ldr	r1, [pc, #188]	@ (800871c <BSP_LCD_WritePixel+0xcc>)
 8008660:	68fa      	ldr	r2, [r7, #12]
 8008662:	4613      	mov	r3, r2
 8008664:	00db      	lsls	r3, r3, #3
 8008666:	1a9b      	subs	r3, r3, r2
 8008668:	009b      	lsls	r3, r3, #2
 800866a:	440b      	add	r3, r1
 800866c:	3308      	adds	r3, #8
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a2b      	ldr	r2, [pc, #172]	@ (8008720 <BSP_LCD_WritePixel+0xd0>)
 8008672:	2134      	movs	r1, #52	@ 0x34
 8008674:	fb01 f303 	mul.w	r3, r1, r3
 8008678:	4413      	add	r3, r2
 800867a:	3348      	adds	r3, #72	@ 0x48
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	2b00      	cmp	r3, #0
 8008680:	d122      	bne.n	80086c8 <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 8008682:	4926      	ldr	r1, [pc, #152]	@ (800871c <BSP_LCD_WritePixel+0xcc>)
 8008684:	68fa      	ldr	r2, [r7, #12]
 8008686:	4613      	mov	r3, r2
 8008688:	00db      	lsls	r3, r3, #3
 800868a:	1a9b      	subs	r3, r3, r2
 800868c:	009b      	lsls	r3, r3, #2
 800868e:	440b      	add	r3, r1
 8008690:	3308      	adds	r3, #8
 8008692:	681b      	ldr	r3, [r3, #0]
 8008694:	4a22      	ldr	r2, [pc, #136]	@ (8008720 <BSP_LCD_WritePixel+0xd0>)
 8008696:	2134      	movs	r1, #52	@ 0x34
 8008698:	fb01 f303 	mul.w	r3, r1, r3
 800869c:	4413      	add	r3, r2
 800869e:	335c      	adds	r3, #92	@ 0x5c
 80086a0:	6819      	ldr	r1, [r3, #0]
 80086a2:	481e      	ldr	r0, [pc, #120]	@ (800871c <BSP_LCD_WritePixel+0xcc>)
 80086a4:	68fa      	ldr	r2, [r7, #12]
 80086a6:	4613      	mov	r3, r2
 80086a8:	00db      	lsls	r3, r3, #3
 80086aa:	1a9b      	subs	r3, r3, r2
 80086ac:	009b      	lsls	r3, r3, #2
 80086ae:	4403      	add	r3, r0
 80086b0:	681b      	ldr	r3, [r3, #0]
 80086b2:	687a      	ldr	r2, [r7, #4]
 80086b4:	fb03 f202 	mul.w	r2, r3, r2
 80086b8:	68bb      	ldr	r3, [r7, #8]
 80086ba:	4413      	add	r3, r2
 80086bc:	009b      	lsls	r3, r3, #2
 80086be:	440b      	add	r3, r1
 80086c0:	461a      	mov	r2, r3
 80086c2:	683b      	ldr	r3, [r7, #0]
 80086c4:	6013      	str	r3, [r2, #0]
 80086c6:	e021      	b.n	800870c <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 80086c8:	4914      	ldr	r1, [pc, #80]	@ (800871c <BSP_LCD_WritePixel+0xcc>)
 80086ca:	68fa      	ldr	r2, [r7, #12]
 80086cc:	4613      	mov	r3, r2
 80086ce:	00db      	lsls	r3, r3, #3
 80086d0:	1a9b      	subs	r3, r3, r2
 80086d2:	009b      	lsls	r3, r3, #2
 80086d4:	440b      	add	r3, r1
 80086d6:	3308      	adds	r3, #8
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	4a11      	ldr	r2, [pc, #68]	@ (8008720 <BSP_LCD_WritePixel+0xd0>)
 80086dc:	2134      	movs	r1, #52	@ 0x34
 80086de:	fb01 f303 	mul.w	r3, r1, r3
 80086e2:	4413      	add	r3, r2
 80086e4:	335c      	adds	r3, #92	@ 0x5c
 80086e6:	6819      	ldr	r1, [r3, #0]
 80086e8:	480c      	ldr	r0, [pc, #48]	@ (800871c <BSP_LCD_WritePixel+0xcc>)
 80086ea:	68fa      	ldr	r2, [r7, #12]
 80086ec:	4613      	mov	r3, r2
 80086ee:	00db      	lsls	r3, r3, #3
 80086f0:	1a9b      	subs	r3, r3, r2
 80086f2:	009b      	lsls	r3, r3, #2
 80086f4:	4403      	add	r3, r0
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	687a      	ldr	r2, [r7, #4]
 80086fa:	fb03 f202 	mul.w	r2, r3, r2
 80086fe:	68bb      	ldr	r3, [r7, #8]
 8008700:	4413      	add	r3, r2
 8008702:	005b      	lsls	r3, r3, #1
 8008704:	440b      	add	r3, r1
 8008706:	683a      	ldr	r2, [r7, #0]
 8008708:	b292      	uxth	r2, r2
 800870a:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800870c:	2300      	movs	r3, #0
}
 800870e:	4618      	mov	r0, r3
 8008710:	3714      	adds	r7, #20
 8008712:	46bd      	mov	sp, r7
 8008714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008718:	4770      	bx	lr
 800871a:	bf00      	nop
 800871c:	24006964 	.word	0x24006964
 8008720:	240068bc 	.word	0x240068bc

08008724 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 8008724:	b580      	push	{r7, lr}
 8008726:	b088      	sub	sp, #32
 8008728:	af02      	add	r7, sp, #8
 800872a:	60f8      	str	r0, [r7, #12]
 800872c:	60b9      	str	r1, [r7, #8]
 800872e:	607a      	str	r2, [r7, #4]
 8008730:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 8008732:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008734:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 8008736:	4932      	ldr	r1, [pc, #200]	@ (8008800 <LL_FillBuffer+0xdc>)
 8008738:	68fa      	ldr	r2, [r7, #12]
 800873a:	4613      	mov	r3, r2
 800873c:	00db      	lsls	r3, r3, #3
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	009b      	lsls	r3, r3, #2
 8008742:	440b      	add	r3, r1
 8008744:	330c      	adds	r3, #12
 8008746:	681b      	ldr	r3, [r3, #0]
 8008748:	2b02      	cmp	r3, #2
 800874a:	d129      	bne.n	80087a0 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800874c:	2302      	movs	r3, #2
 800874e:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 8008750:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008752:	0adb      	lsrs	r3, r3, #11
 8008754:	f003 021f 	and.w	r2, r3, #31
 8008758:	4613      	mov	r3, r2
 800875a:	011b      	lsls	r3, r3, #4
 800875c:	4413      	add	r3, r2
 800875e:	015a      	lsls	r2, r3, #5
 8008760:	1ad3      	subs	r3, r2, r3
 8008762:	3317      	adds	r3, #23
 8008764:	099b      	lsrs	r3, r3, #6
 8008766:	0419      	lsls	r1, r3, #16
 8008768:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800876a:	095b      	lsrs	r3, r3, #5
 800876c:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8008770:	4613      	mov	r3, r2
 8008772:	01db      	lsls	r3, r3, #7
 8008774:	4413      	add	r3, r2
 8008776:	005b      	lsls	r3, r3, #1
 8008778:	4413      	add	r3, r2
 800877a:	3321      	adds	r3, #33	@ 0x21
 800877c:	099b      	lsrs	r3, r3, #6
 800877e:	021b      	lsls	r3, r3, #8
 8008780:	4319      	orrs	r1, r3
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	f003 021f 	and.w	r2, r3, #31
 8008788:	4613      	mov	r3, r2
 800878a:	011b      	lsls	r3, r3, #4
 800878c:	4413      	add	r3, r2
 800878e:	015a      	lsls	r2, r3, #5
 8008790:	1ad3      	subs	r3, r2, r3
 8008792:	3317      	adds	r3, #23
 8008794:	099b      	lsrs	r3, r3, #6
 8008796:	430b      	orrs	r3, r1
 8008798:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800879c:	613b      	str	r3, [r7, #16]
    break;
 800879e:	e002      	b.n	80087a6 <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 80087a0:	2300      	movs	r3, #0
 80087a2:	617b      	str	r3, [r7, #20]
    break;
 80087a4:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 80087a6:	4b17      	ldr	r3, [pc, #92]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087a8:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 80087ac:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 80087ae:	4a15      	ldr	r2, [pc, #84]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087b0:	697b      	ldr	r3, [r7, #20]
 80087b2:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 80087b4:	4a13      	ldr	r2, [pc, #76]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087b6:	6a3b      	ldr	r3, [r7, #32]
 80087b8:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 80087ba:	4b12      	ldr	r3, [pc, #72]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087bc:	4a12      	ldr	r2, [pc, #72]	@ (8008808 <LL_FillBuffer+0xe4>)
 80087be:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 80087c0:	4810      	ldr	r0, [pc, #64]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087c2:	f003 ff7b 	bl	800c6bc <HAL_DMA2D_Init>
 80087c6:	4603      	mov	r3, r0
 80087c8:	2b00      	cmp	r3, #0
 80087ca:	d115      	bne.n	80087f8 <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 80087cc:	2101      	movs	r1, #1
 80087ce:	480d      	ldr	r0, [pc, #52]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087d0:	f004 f8f6 	bl	800c9c0 <HAL_DMA2D_ConfigLayer>
 80087d4:	4603      	mov	r3, r0
 80087d6:	2b00      	cmp	r3, #0
 80087d8:	d10e      	bne.n	80087f8 <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 80087da:	68ba      	ldr	r2, [r7, #8]
 80087dc:	683b      	ldr	r3, [r7, #0]
 80087de:	9300      	str	r3, [sp, #0]
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	6939      	ldr	r1, [r7, #16]
 80087e4:	4807      	ldr	r0, [pc, #28]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087e6:	f003 ffd7 	bl	800c798 <HAL_DMA2D_Start>
 80087ea:	4603      	mov	r3, r0
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d103      	bne.n	80087f8 <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 80087f0:	2119      	movs	r1, #25
 80087f2:	4804      	ldr	r0, [pc, #16]	@ (8008804 <LL_FillBuffer+0xe0>)
 80087f4:	f003 fffb 	bl	800c7ee <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80087f8:	bf00      	nop
 80087fa:	3718      	adds	r7, #24
 80087fc:	46bd      	mov	sp, r7
 80087fe:	bd80      	pop	{r7, pc}
 8008800:	24006964 	.word	0x24006964
 8008804:	24006854 	.word	0x24006854
 8008808:	52001000 	.word	0x52001000

0800880c <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 800880c:	b580      	push	{r7, lr}
 800880e:	b088      	sub	sp, #32
 8008810:	af02      	add	r7, sp, #8
 8008812:	60f8      	str	r0, [r7, #12]
 8008814:	60b9      	str	r1, [r7, #8]
 8008816:	607a      	str	r2, [r7, #4]
 8008818:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800881a:	4925      	ldr	r1, [pc, #148]	@ (80088b0 <LL_ConvertLineToRGB+0xa4>)
 800881c:	68fa      	ldr	r2, [r7, #12]
 800881e:	4613      	mov	r3, r2
 8008820:	00db      	lsls	r3, r3, #3
 8008822:	1a9b      	subs	r3, r3, r2
 8008824:	009b      	lsls	r3, r3, #2
 8008826:	440b      	add	r3, r1
 8008828:	330c      	adds	r3, #12
 800882a:	681b      	ldr	r3, [r3, #0]
 800882c:	2b02      	cmp	r3, #2
 800882e:	d102      	bne.n	8008836 <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 8008830:	2302      	movs	r3, #2
 8008832:	617b      	str	r3, [r7, #20]
    break;
 8008834:	e002      	b.n	800883c <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]
    break;
 800883a:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800883c:	4b1d      	ldr	r3, [pc, #116]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 800883e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008842:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 8008844:	4a1b      	ldr	r2, [pc, #108]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 8008846:	697b      	ldr	r3, [r7, #20]
 8008848:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 800884a:	4b1a      	ldr	r3, [pc, #104]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 800884c:	2200      	movs	r2, #0
 800884e:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 8008850:	4b18      	ldr	r3, [pc, #96]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 8008852:	2200      	movs	r2, #0
 8008854:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8008856:	4b17      	ldr	r3, [pc, #92]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 8008858:	22ff      	movs	r2, #255	@ 0xff
 800885a:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800885c:	4a15      	ldr	r2, [pc, #84]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 800885e:	6a3b      	ldr	r3, [r7, #32]
 8008860:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8008862:	4b14      	ldr	r3, [pc, #80]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 8008864:	2200      	movs	r2, #0
 8008866:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8008868:	4b12      	ldr	r3, [pc, #72]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 800886a:	4a13      	ldr	r2, [pc, #76]	@ (80088b8 <LL_ConvertLineToRGB+0xac>)
 800886c:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800886e:	4811      	ldr	r0, [pc, #68]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 8008870:	f003 ff24 	bl	800c6bc <HAL_DMA2D_Init>
 8008874:	4603      	mov	r3, r0
 8008876:	2b00      	cmp	r3, #0
 8008878:	d115      	bne.n	80088a6 <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800887a:	2101      	movs	r1, #1
 800887c:	480d      	ldr	r0, [pc, #52]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 800887e:	f004 f89f 	bl	800c9c0 <HAL_DMA2D_ConfigLayer>
 8008882:	4603      	mov	r3, r0
 8008884:	2b00      	cmp	r3, #0
 8008886:	d10e      	bne.n	80088a6 <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 8008888:	68b9      	ldr	r1, [r7, #8]
 800888a:	687a      	ldr	r2, [r7, #4]
 800888c:	2301      	movs	r3, #1
 800888e:	9300      	str	r3, [sp, #0]
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	4808      	ldr	r0, [pc, #32]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 8008894:	f003 ff80 	bl	800c798 <HAL_DMA2D_Start>
 8008898:	4603      	mov	r3, r0
 800889a:	2b00      	cmp	r3, #0
 800889c:	d103      	bne.n	80088a6 <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800889e:	2132      	movs	r1, #50	@ 0x32
 80088a0:	4804      	ldr	r0, [pc, #16]	@ (80088b4 <LL_ConvertLineToRGB+0xa8>)
 80088a2:	f003 ffa4 	bl	800c7ee <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 80088a6:	bf00      	nop
 80088a8:	3718      	adds	r7, #24
 80088aa:	46bd      	mov	sp, r7
 80088ac:	bd80      	pop	{r7, pc}
 80088ae:	bf00      	nop
 80088b0:	24006964 	.word	0x24006964
 80088b4:	24006854 	.word	0x24006854
 80088b8:	52001000 	.word	0x52001000

080088bc <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 80088bc:	b480      	push	{r7}
 80088be:	b085      	sub	sp, #20
 80088c0:	af00      	add	r7, sp, #0
 80088c2:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 80088c4:	687b      	ldr	r3, [r7, #4]
 80088c6:	681b      	ldr	r3, [r3, #0]
 80088c8:	4a13      	ldr	r2, [pc, #76]	@ (8008918 <LTDC_MspInit+0x5c>)
 80088ca:	4293      	cmp	r3, r2
 80088cc:	d11e      	bne.n	800890c <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 80088ce:	4b13      	ldr	r3, [pc, #76]	@ (800891c <LTDC_MspInit+0x60>)
 80088d0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088d4:	4a11      	ldr	r2, [pc, #68]	@ (800891c <LTDC_MspInit+0x60>)
 80088d6:	f043 0308 	orr.w	r3, r3, #8
 80088da:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 80088de:	4b0f      	ldr	r3, [pc, #60]	@ (800891c <LTDC_MspInit+0x60>)
 80088e0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80088e4:	f003 0308 	and.w	r3, r3, #8
 80088e8:	60fb      	str	r3, [r7, #12]
 80088ea:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 80088ec:	4b0b      	ldr	r3, [pc, #44]	@ (800891c <LTDC_MspInit+0x60>)
 80088ee:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80088f2:	4a0a      	ldr	r2, [pc, #40]	@ (800891c <LTDC_MspInit+0x60>)
 80088f4:	f043 0308 	orr.w	r3, r3, #8
 80088f8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 80088fc:	4b07      	ldr	r3, [pc, #28]	@ (800891c <LTDC_MspInit+0x60>)
 80088fe:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008902:	4a06      	ldr	r2, [pc, #24]	@ (800891c <LTDC_MspInit+0x60>)
 8008904:	f023 0308 	bic.w	r3, r3, #8
 8008908:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 800890c:	bf00      	nop
 800890e:	3714      	adds	r7, #20
 8008910:	46bd      	mov	sp, r7
 8008912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008916:	4770      	bx	lr
 8008918:	50001000 	.word	0x50001000
 800891c:	58024400 	.word	0x58024400

08008920 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8008920:	b480      	push	{r7}
 8008922:	b085      	sub	sp, #20
 8008924:	af00      	add	r7, sp, #0
 8008926:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	4a11      	ldr	r2, [pc, #68]	@ (8008974 <DMA2D_MspInit+0x54>)
 800892e:	4293      	cmp	r3, r2
 8008930:	d11a      	bne.n	8008968 <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 8008932:	4b11      	ldr	r3, [pc, #68]	@ (8008978 <DMA2D_MspInit+0x58>)
 8008934:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008938:	4a0f      	ldr	r2, [pc, #60]	@ (8008978 <DMA2D_MspInit+0x58>)
 800893a:	f043 0310 	orr.w	r3, r3, #16
 800893e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8008942:	4b0d      	ldr	r3, [pc, #52]	@ (8008978 <DMA2D_MspInit+0x58>)
 8008944:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008948:	f003 0310 	and.w	r3, r3, #16
 800894c:	60fb      	str	r3, [r7, #12]
 800894e:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 8008950:	4b09      	ldr	r3, [pc, #36]	@ (8008978 <DMA2D_MspInit+0x58>)
 8008952:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008954:	4a08      	ldr	r2, [pc, #32]	@ (8008978 <DMA2D_MspInit+0x58>)
 8008956:	f043 0310 	orr.w	r3, r3, #16
 800895a:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800895c:	4b06      	ldr	r3, [pc, #24]	@ (8008978 <DMA2D_MspInit+0x58>)
 800895e:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008960:	4a05      	ldr	r2, [pc, #20]	@ (8008978 <DMA2D_MspInit+0x58>)
 8008962:	f023 0310 	bic.w	r3, r3, #16
 8008966:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 8008968:	bf00      	nop
 800896a:	3714      	adds	r7, #20
 800896c:	46bd      	mov	sp, r7
 800896e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008972:	4770      	bx	lr
 8008974:	52001000 	.word	0x52001000
 8008978:	58024400 	.word	0x58024400

0800897c <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800897c:	b480      	push	{r7}
 800897e:	b085      	sub	sp, #20
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	681b      	ldr	r3, [r3, #0]
 8008988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800898c:	d11e      	bne.n	80089cc <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 800898e:	4b12      	ldr	r3, [pc, #72]	@ (80089d8 <DSI_MspInit+0x5c>)
 8008990:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 8008994:	4a10      	ldr	r2, [pc, #64]	@ (80089d8 <DSI_MspInit+0x5c>)
 8008996:	f043 0310 	orr.w	r3, r3, #16
 800899a:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800899e:	4b0e      	ldr	r3, [pc, #56]	@ (80089d8 <DSI_MspInit+0x5c>)
 80089a0:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 80089a4:	f003 0310 	and.w	r3, r3, #16
 80089a8:	60fb      	str	r3, [r7, #12]
 80089aa:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 80089ac:	4b0a      	ldr	r3, [pc, #40]	@ (80089d8 <DSI_MspInit+0x5c>)
 80089ae:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089b2:	4a09      	ldr	r2, [pc, #36]	@ (80089d8 <DSI_MspInit+0x5c>)
 80089b4:	f043 0310 	orr.w	r3, r3, #16
 80089b8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 80089bc:	4b06      	ldr	r3, [pc, #24]	@ (80089d8 <DSI_MspInit+0x5c>)
 80089be:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80089c2:	4a05      	ldr	r2, [pc, #20]	@ (80089d8 <DSI_MspInit+0x5c>)
 80089c4:	f023 0310 	bic.w	r3, r3, #16
 80089c8:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 80089cc:	bf00      	nop
 80089ce:	3714      	adds	r7, #20
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	58024400 	.word	0x58024400

080089dc <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 80089dc:	b580      	push	{r7, lr}
 80089de:	b088      	sub	sp, #32
 80089e0:	af02      	add	r7, sp, #8
 80089e2:	60ba      	str	r2, [r7, #8]
 80089e4:	461a      	mov	r2, r3
 80089e6:	4603      	mov	r3, r0
 80089e8:	81fb      	strh	r3, [r7, #14]
 80089ea:	460b      	mov	r3, r1
 80089ec:	81bb      	strh	r3, [r7, #12]
 80089ee:	4613      	mov	r3, r2
 80089f0:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 80089f2:	2300      	movs	r3, #0
 80089f4:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 80089f6:	88fb      	ldrh	r3, [r7, #6]
 80089f8:	2b01      	cmp	r3, #1
 80089fa:	d812      	bhi.n	8008a22 <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 80089fc:	89f9      	ldrh	r1, [r7, #14]
 80089fe:	89b8      	ldrh	r0, [r7, #12]
 8008a00:	88fb      	ldrh	r3, [r7, #6]
 8008a02:	68ba      	ldr	r2, [r7, #8]
 8008a04:	4413      	add	r3, r2
 8008a06:	781b      	ldrb	r3, [r3, #0]
 8008a08:	9300      	str	r3, [sp, #0]
 8008a0a:	4603      	mov	r3, r0
 8008a0c:	2215      	movs	r2, #21
 8008a0e:	4810      	ldr	r0, [pc, #64]	@ (8008a50 <DSI_IO_Write+0x74>)
 8008a10:	f004 fd60 	bl	800d4d4 <HAL_DSI_ShortWrite>
 8008a14:	4603      	mov	r3, r0
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d014      	beq.n	8008a44 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008a1a:	f06f 0307 	mvn.w	r3, #7
 8008a1e:	617b      	str	r3, [r7, #20]
 8008a20:	e010      	b.n	8008a44 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 8008a22:	89f9      	ldrh	r1, [r7, #14]
 8008a24:	88f8      	ldrh	r0, [r7, #6]
 8008a26:	89bb      	ldrh	r3, [r7, #12]
 8008a28:	68ba      	ldr	r2, [r7, #8]
 8008a2a:	9201      	str	r2, [sp, #4]
 8008a2c:	9300      	str	r3, [sp, #0]
 8008a2e:	4603      	mov	r3, r0
 8008a30:	2239      	movs	r2, #57	@ 0x39
 8008a32:	4807      	ldr	r0, [pc, #28]	@ (8008a50 <DSI_IO_Write+0x74>)
 8008a34:	f004 fd70 	bl	800d518 <HAL_DSI_LongWrite>
 8008a38:	4603      	mov	r3, r0
 8008a3a:	2b00      	cmp	r3, #0
 8008a3c:	d002      	beq.n	8008a44 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8008a3e:	f06f 0307 	mvn.w	r3, #7
 8008a42:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8008a44:	697b      	ldr	r3, [r7, #20]
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	24006838 	.word	0x24006838

08008a54 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b08a      	sub	sp, #40	@ 0x28
 8008a58:	af04      	add	r7, sp, #16
 8008a5a:	60ba      	str	r2, [r7, #8]
 8008a5c:	461a      	mov	r2, r3
 8008a5e:	4603      	mov	r3, r0
 8008a60:	81fb      	strh	r3, [r7, #14]
 8008a62:	460b      	mov	r3, r1
 8008a64:	81bb      	strh	r3, [r7, #12]
 8008a66:	4613      	mov	r3, r2
 8008a68:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 8008a6a:	2300      	movs	r3, #0
 8008a6c:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 8008a6e:	89f9      	ldrh	r1, [r7, #14]
 8008a70:	88f8      	ldrh	r0, [r7, #6]
 8008a72:	89bb      	ldrh	r3, [r7, #12]
 8008a74:	68ba      	ldr	r2, [r7, #8]
 8008a76:	9202      	str	r2, [sp, #8]
 8008a78:	9301      	str	r3, [sp, #4]
 8008a7a:	2306      	movs	r3, #6
 8008a7c:	9300      	str	r3, [sp, #0]
 8008a7e:	4603      	mov	r3, r0
 8008a80:	68ba      	ldr	r2, [r7, #8]
 8008a82:	4807      	ldr	r0, [pc, #28]	@ (8008aa0 <DSI_IO_Read+0x4c>)
 8008a84:	f004 fde0 	bl	800d648 <HAL_DSI_Read>
 8008a88:	4603      	mov	r3, r0
 8008a8a:	2b00      	cmp	r3, #0
 8008a8c:	d002      	beq.n	8008a94 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008a8e:	f06f 0307 	mvn.w	r3, #7
 8008a92:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8008a94:	697b      	ldr	r3, [r7, #20]
}
 8008a96:	4618      	mov	r0, r3
 8008a98:	3718      	adds	r7, #24
 8008a9a:	46bd      	mov	sp, r7
 8008a9c:	bd80      	pop	{r7, pc}
 8008a9e:	bf00      	nop
 8008aa0:	24006838 	.word	0x24006838

08008aa4 <NT35510_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
int32_t NT35510_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b088      	sub	sp, #32
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
 8008aac:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 8008aae:	2300      	movs	r3, #0
 8008ab0:	61bb      	str	r3, [r7, #24]
  NT35510_IO_t              IOCtx;
  static NT35510_Object_t   NT35510Obj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 8008ab2:	2300      	movs	r3, #0
 8008ab4:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 8008ab6:	4b22      	ldr	r3, [pc, #136]	@ (8008b40 <NT35510_Probe+0x9c>)
 8008ab8:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8008aba:	4b22      	ldr	r3, [pc, #136]	@ (8008b44 <NT35510_Probe+0xa0>)
 8008abc:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8008abe:	4b22      	ldr	r3, [pc, #136]	@ (8008b48 <NT35510_Probe+0xa4>)
 8008ac0:	613b      	str	r3, [r7, #16]

  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 8008ac2:	f107 0308 	add.w	r3, r7, #8
 8008ac6:	4619      	mov	r1, r3
 8008ac8:	4820      	ldr	r0, [pc, #128]	@ (8008b4c <NT35510_Probe+0xa8>)
 8008aca:	f7f7 ffa9 	bl	8000a20 <NT35510_RegisterBusIO>
 8008ace:	4603      	mov	r3, r0
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d003      	beq.n	8008adc <NT35510_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008ad4:	f06f 0307 	mvn.w	r3, #7
 8008ad8:	61fb      	str	r3, [r7, #28]
 8008ada:	e02c      	b.n	8008b36 <NT35510_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &NT35510Obj;
 8008adc:	4b1c      	ldr	r3, [pc, #112]	@ (8008b50 <NT35510_Probe+0xac>)
 8008ade:	4a1b      	ldr	r2, [pc, #108]	@ (8008b4c <NT35510_Probe+0xa8>)
 8008ae0:	601a      	str	r2, [r3, #0]

    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 8008ae2:	4b1b      	ldr	r3, [pc, #108]	@ (8008b50 <NT35510_Probe+0xac>)
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	f107 0218 	add.w	r2, r7, #24
 8008aea:	4611      	mov	r1, r2
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7f8 fa2f 	bl	8000f50 <NT35510_ReadID>
 8008af2:	4603      	mov	r3, r0
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d003      	beq.n	8008b00 <NT35510_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008af8:	f06f 0304 	mvn.w	r3, #4
 8008afc:	61fb      	str	r3, [r7, #28]
 8008afe:	e01a      	b.n	8008b36 <NT35510_Probe+0x92>
    }
    else if (id != NT35510_ID)
 8008b00:	69bb      	ldr	r3, [r7, #24]
 8008b02:	2b80      	cmp	r3, #128	@ 0x80
 8008b04:	d003      	beq.n	8008b0e <NT35510_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008b06:	f06f 0306 	mvn.w	r3, #6
 8008b0a:	61fb      	str	r3, [r7, #28]
 8008b0c:	e013      	b.n	8008b36 <NT35510_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 8008b0e:	4b11      	ldr	r3, [pc, #68]	@ (8008b54 <NT35510_Probe+0xb0>)
 8008b10:	4a11      	ldr	r2, [pc, #68]	@ (8008b58 <NT35510_Probe+0xb4>)
 8008b12:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 8008b14:	4b0f      	ldr	r3, [pc, #60]	@ (8008b54 <NT35510_Probe+0xb0>)
 8008b16:	681b      	ldr	r3, [r3, #0]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	4a0d      	ldr	r2, [pc, #52]	@ (8008b50 <NT35510_Probe+0xac>)
 8008b1c:	6810      	ldr	r0, [r2, #0]
 8008b1e:	683a      	ldr	r2, [r7, #0]
 8008b20:	6879      	ldr	r1, [r7, #4]
 8008b22:	4798      	blx	r3
 8008b24:	4603      	mov	r3, r0
 8008b26:	2b00      	cmp	r3, #0
 8008b28:	d003      	beq.n	8008b32 <NT35510_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008b2a:	f06f 0304 	mvn.w	r3, #4
 8008b2e:	61fb      	str	r3, [r7, #28]
 8008b30:	e001      	b.n	8008b36 <NT35510_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008b32:	2300      	movs	r3, #0
 8008b34:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 8008b36:	69fb      	ldr	r3, [r7, #28]
}
 8008b38:	4618      	mov	r0, r3
 8008b3a:	3720      	adds	r7, #32
 8008b3c:	46bd      	mov	sp, r7
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	0800715d 	.word	0x0800715d
 8008b44:	080089dd 	.word	0x080089dd
 8008b48:	08008a55 	.word	0x08008a55
 8008b4c:	24006984 	.word	0x24006984
 8008b50:	24006834 	.word	0x24006834
 8008b54:	24006830 	.word	0x24006830
 8008b58:	24000408 	.word	0x24000408

08008b5c <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 8008b5c:	b580      	push	{r7, lr}
 8008b5e:	b088      	sub	sp, #32
 8008b60:	af00      	add	r7, sp, #0
 8008b62:	6078      	str	r0, [r7, #4]
 8008b64:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 8008b66:	2300      	movs	r3, #0
 8008b68:	61bb      	str	r3, [r7, #24]
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 8008b6e:	4b22      	ldr	r3, [pc, #136]	@ (8008bf8 <OTM8009A_Probe+0x9c>)
 8008b70:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 8008b72:	4b22      	ldr	r3, [pc, #136]	@ (8008bfc <OTM8009A_Probe+0xa0>)
 8008b74:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 8008b76:	4b22      	ldr	r3, [pc, #136]	@ (8008c00 <OTM8009A_Probe+0xa4>)
 8008b78:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 8008b7a:	f107 0308 	add.w	r3, r7, #8
 8008b7e:	4619      	mov	r1, r3
 8008b80:	4820      	ldr	r0, [pc, #128]	@ (8008c04 <OTM8009A_Probe+0xa8>)
 8008b82:	f7f8 fc3d 	bl	8001400 <OTM8009A_RegisterBusIO>
 8008b86:	4603      	mov	r3, r0
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d003      	beq.n	8008b94 <OTM8009A_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 8008b8c:	f06f 0307 	mvn.w	r3, #7
 8008b90:	61fb      	str	r3, [r7, #28]
 8008b92:	e02c      	b.n	8008bee <OTM8009A_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 8008b94:	4b1c      	ldr	r3, [pc, #112]	@ (8008c08 <OTM8009A_Probe+0xac>)
 8008b96:	4a1b      	ldr	r2, [pc, #108]	@ (8008c04 <OTM8009A_Probe+0xa8>)
 8008b98:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 8008b9a:	4b1b      	ldr	r3, [pc, #108]	@ (8008c08 <OTM8009A_Probe+0xac>)
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f107 0218 	add.w	r2, r7, #24
 8008ba2:	4611      	mov	r1, r2
 8008ba4:	4618      	mov	r0, r3
 8008ba6:	f7f9 fa2f 	bl	8002008 <OTM8009A_ReadID>
 8008baa:	4603      	mov	r3, r0
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d003      	beq.n	8008bb8 <OTM8009A_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8008bb0:	f06f 0304 	mvn.w	r3, #4
 8008bb4:	61fb      	str	r3, [r7, #28]
 8008bb6:	e01a      	b.n	8008bee <OTM8009A_Probe+0x92>
    }
    else if (id != OTM8009A_ID)
 8008bb8:	69bb      	ldr	r3, [r7, #24]
 8008bba:	2b40      	cmp	r3, #64	@ 0x40
 8008bbc:	d003      	beq.n	8008bc6 <OTM8009A_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8008bbe:	f06f 0306 	mvn.w	r3, #6
 8008bc2:	61fb      	str	r3, [r7, #28]
 8008bc4:	e013      	b.n	8008bee <OTM8009A_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 8008bc6:	4b11      	ldr	r3, [pc, #68]	@ (8008c0c <OTM8009A_Probe+0xb0>)
 8008bc8:	4a11      	ldr	r2, [pc, #68]	@ (8008c10 <OTM8009A_Probe+0xb4>)
 8008bca:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 8008bcc:	4b0f      	ldr	r3, [pc, #60]	@ (8008c0c <OTM8009A_Probe+0xb0>)
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	4a0d      	ldr	r2, [pc, #52]	@ (8008c08 <OTM8009A_Probe+0xac>)
 8008bd4:	6810      	ldr	r0, [r2, #0]
 8008bd6:	683a      	ldr	r2, [r7, #0]
 8008bd8:	6879      	ldr	r1, [r7, #4]
 8008bda:	4798      	blx	r3
 8008bdc:	4603      	mov	r3, r0
 8008bde:	2b00      	cmp	r3, #0
 8008be0:	d003      	beq.n	8008bea <OTM8009A_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8008be2:	f06f 0304 	mvn.w	r3, #4
 8008be6:	61fb      	str	r3, [r7, #28]
 8008be8:	e001      	b.n	8008bee <OTM8009A_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008bea:	2300      	movs	r3, #0
 8008bec:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 8008bee:	69fb      	ldr	r3, [r7, #28]
}
 8008bf0:	4618      	mov	r0, r3
 8008bf2:	3720      	adds	r7, #32
 8008bf4:	46bd      	mov	sp, r7
 8008bf6:	bd80      	pop	{r7, pc}
 8008bf8:	0800715d 	.word	0x0800715d
 8008bfc:	080089dd 	.word	0x080089dd
 8008c00:	08008a55 	.word	0x08008a55
 8008c04:	240069a4 	.word	0x240069a4
 8008c08:	24006834 	.word	0x24006834
 8008c0c:	24006830 	.word	0x24006830
 8008c10:	24000454 	.word	0x24000454

08008c14 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008c14:	b580      	push	{r7, lr}
 8008c16:	b082      	sub	sp, #8
 8008c18:	af00      	add	r7, sp, #0
 8008c1a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	4a06      	ldr	r2, [pc, #24]	@ (8008c38 <HAL_SD_TxCpltCallback+0x24>)
 8008c20:	4293      	cmp	r3, r2
 8008c22:	bf14      	ite	ne
 8008c24:	2301      	movne	r3, #1
 8008c26:	2300      	moveq	r3, #0
 8008c28:	b2db      	uxtb	r3, r3
 8008c2a:	4618      	mov	r0, r3
 8008c2c:	f7fc f9c6 	bl	8004fbc <BSP_SD_WriteCpltCallback>
}
 8008c30:	bf00      	nop
 8008c32:	3708      	adds	r7, #8
 8008c34:	46bd      	mov	sp, r7
 8008c36:	bd80      	pop	{r7, pc}
 8008c38:	240069c4 	.word	0x240069c4

08008c3c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b082      	sub	sp, #8
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	4a06      	ldr	r2, [pc, #24]	@ (8008c60 <HAL_SD_RxCpltCallback+0x24>)
 8008c48:	4293      	cmp	r3, r2
 8008c4a:	bf14      	ite	ne
 8008c4c:	2301      	movne	r3, #1
 8008c4e:	2300      	moveq	r3, #0
 8008c50:	b2db      	uxtb	r3, r3
 8008c52:	4618      	mov	r0, r3
 8008c54:	f7fc f9c2 	bl	8004fdc <BSP_SD_ReadCpltCallback>
}
 8008c58:	bf00      	nop
 8008c5a:	3708      	adds	r7, #8
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	bd80      	pop	{r7, pc}
 8008c60:	240069c4 	.word	0x240069c4

08008c64 <BSP_SD_IRQHandler>:
  * @brief  This function handles SDMMC interrupt requests.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_IRQHandler(uint32_t Instance)
{
 8008c64:	b580      	push	{r7, lr}
 8008c66:	b082      	sub	sp, #8
 8008c68:	af00      	add	r7, sp, #0
 8008c6a:	6078      	str	r0, [r7, #4]
  HAL_SD_IRQHandler(&hsd_sdmmc[Instance]);
 8008c6c:	687a      	ldr	r2, [r7, #4]
 8008c6e:	4613      	mov	r3, r2
 8008c70:	015b      	lsls	r3, r3, #5
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	009b      	lsls	r3, r3, #2
 8008c76:	4a04      	ldr	r2, [pc, #16]	@ (8008c88 <BSP_SD_IRQHandler+0x24>)
 8008c78:	4413      	add	r3, r2
 8008c7a:	4618      	mov	r0, r3
 8008c7c:	f00b f9b4 	bl	8013fe8 <HAL_SD_IRQHandler>
}
 8008c80:	bf00      	nop
 8008c82:	3708      	adds	r7, #8
 8008c84:	46bd      	mov	sp, r7
 8008c86:	bd80      	pop	{r7, pc}
 8008c88:	240069c4 	.word	0x240069c4

08008c8c <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8008c8c:	b580      	push	{r7, lr}
 8008c8e:	b084      	sub	sp, #16
 8008c90:	af00      	add	r7, sp, #0
 8008c92:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d003      	beq.n	8008ca2 <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8008c9a:	f06f 0301 	mvn.w	r3, #1
 8008c9e:	60fb      	str	r3, [r7, #12]
 8008ca0:	e033      	b.n	8008d0a <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 8008ca2:	481c      	ldr	r0, [pc, #112]	@ (8008d14 <BSP_SDRAM_Init+0x88>)
 8008ca4:	f000 f89a 	bl	8008ddc <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8008ca8:	481a      	ldr	r0, [pc, #104]	@ (8008d14 <BSP_SDRAM_Init+0x88>)
 8008caa:	f000 f837 	bl	8008d1c <MX_SDRAM_Init>
 8008cae:	4603      	mov	r3, r0
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d003      	beq.n	8008cbc <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 8008cb4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008cb8:	60fb      	str	r3, [r7, #12]
 8008cba:	e026      	b.n	8008d0a <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 8008cbc:	4b16      	ldr	r3, [pc, #88]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cbe:	2208      	movs	r2, #8
 8008cc0:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 8008cc2:	4b15      	ldr	r3, [pc, #84]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cc4:	2203      	movs	r2, #3
 8008cc6:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 8008cc8:	4b13      	ldr	r3, [pc, #76]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cca:	f240 6203 	movw	r2, #1539	@ 0x603
 8008cce:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 8008cd0:	4b11      	ldr	r3, [pc, #68]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cd2:	2200      	movs	r2, #0
 8008cd4:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 8008cd6:	4b10      	ldr	r3, [pc, #64]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cd8:	2200      	movs	r2, #0
 8008cda:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 8008cdc:	4b0e      	ldr	r3, [pc, #56]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cde:	2230      	movs	r2, #48	@ 0x30
 8008ce0:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 8008ce2:	4b0d      	ldr	r3, [pc, #52]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 8008ce8:	4b0b      	ldr	r3, [pc, #44]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8008cee:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 8008cf0:	4909      	ldr	r1, [pc, #36]	@ (8008d18 <BSP_SDRAM_Init+0x8c>)
 8008cf2:	4808      	ldr	r0, [pc, #32]	@ (8008d14 <BSP_SDRAM_Init+0x88>)
 8008cf4:	f7f7 fd88 	bl	8000808 <IS42S32800J_Init>
 8008cf8:	4603      	mov	r3, r0
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d003      	beq.n	8008d06 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 8008cfe:	f06f 0304 	mvn.w	r3, #4
 8008d02:	60fb      	str	r3, [r7, #12]
 8008d04:	e001      	b.n	8008d0a <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 8008d06:	2300      	movs	r3, #0
 8008d08:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8008d0a:	68fb      	ldr	r3, [r7, #12]
}
 8008d0c:	4618      	mov	r0, r3
 8008d0e:	3710      	adds	r7, #16
 8008d10:	46bd      	mov	sp, r7
 8008d12:	bd80      	pop	{r7, pc}
 8008d14:	24006a40 	.word	0x24006a40
 8008d18:	24006a74 	.word	0x24006a74

08008d1c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b08a      	sub	sp, #40	@ 0x28
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	4a20      	ldr	r2, [pc, #128]	@ (8008da8 <MX_SDRAM_Init+0x8c>)
 8008d28:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	2201      	movs	r2, #1
 8008d2e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	2201      	movs	r2, #1
 8008d34:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2204      	movs	r2, #4
 8008d3a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2220      	movs	r2, #32
 8008d40:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	2240      	movs	r2, #64	@ 0x40
 8008d46:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 8008d4e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	2200      	movs	r2, #0
 8008d54:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008d5c:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8008d64:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 8008d66:	4b11      	ldr	r3, [pc, #68]	@ (8008dac <MX_SDRAM_Init+0x90>)
 8008d68:	2200      	movs	r2, #0
 8008d6a:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 8008d6c:	2302      	movs	r3, #2
 8008d6e:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 8008d70:	2307      	movs	r3, #7
 8008d72:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 8008d74:	2304      	movs	r3, #4
 8008d76:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 8008d78:	2307      	movs	r3, #7
 8008d7a:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 8008d7c:	2302      	movs	r3, #2
 8008d7e:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 8008d80:	2302      	movs	r3, #2
 8008d82:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 8008d84:	2302      	movs	r3, #2
 8008d86:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 8008d88:	f107 030c 	add.w	r3, r7, #12
 8008d8c:	4619      	mov	r1, r3
 8008d8e:	6878      	ldr	r0, [r7, #4]
 8008d90:	f00b fba4 	bl	80144dc <HAL_SDRAM_Init>
 8008d94:	4603      	mov	r3, r0
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d001      	beq.n	8008d9e <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 8008d9a:	2301      	movs	r3, #1
 8008d9c:	e000      	b.n	8008da0 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 8008d9e:	2300      	movs	r3, #0
}
 8008da0:	4618      	mov	r0, r3
 8008da2:	3728      	adds	r7, #40	@ 0x28
 8008da4:	46bd      	mov	sp, r7
 8008da6:	bd80      	pop	{r7, pc}
 8008da8:	52004140 	.word	0x52004140
 8008dac:	24006a40 	.word	0x24006a40

08008db0 <BSP_SDRAM_IRQHandler>:
/**
  * @brief  This function handles MDMA_MDMA_Channel0 for SDRAM interrupt request.
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8008db0:	b580      	push	{r7, lr}
 8008db2:	b082      	sub	sp, #8
 8008db4:	af00      	add	r7, sp, #0
 8008db6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8008db8:	4a07      	ldr	r2, [pc, #28]	@ (8008dd8 <BSP_SDRAM_IRQHandler+0x28>)
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	2134      	movs	r1, #52	@ 0x34
 8008dbe:	fb01 f303 	mul.w	r3, r1, r3
 8008dc2:	4413      	add	r3, r2
 8008dc4:	3330      	adds	r3, #48	@ 0x30
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	4618      	mov	r0, r3
 8008dca:	f006 fa0b 	bl	800f1e4 <HAL_MDMA_IRQHandler>
}
 8008dce:	bf00      	nop
 8008dd0:	3708      	adds	r7, #8
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	bd80      	pop	{r7, pc}
 8008dd6:	bf00      	nop
 8008dd8:	24006a40 	.word	0x24006a40

08008ddc <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 8008ddc:	b580      	push	{r7, lr}
 8008dde:	b090      	sub	sp, #64	@ 0x40
 8008de0:	af00      	add	r7, sp, #0
 8008de2:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8008de4:	4b7f      	ldr	r3, [pc, #508]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008de6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008dea:	4a7e      	ldr	r2, [pc, #504]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008dec:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8008df0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8008df4:	4b7b      	ldr	r3, [pc, #492]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008df6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008dfa:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8008dfe:	62bb      	str	r3, [r7, #40]	@ 0x28
 8008e00:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8008e02:	4b78      	ldr	r3, [pc, #480]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e04:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008e08:	4a76      	ldr	r2, [pc, #472]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e0a:	f043 0301 	orr.w	r3, r3, #1
 8008e0e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8008e12:	4b74      	ldr	r3, [pc, #464]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e14:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8008e18:	f003 0301 	and.w	r3, r3, #1
 8008e1c:	627b      	str	r3, [r7, #36]	@ 0x24
 8008e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8008e20:	4b70      	ldr	r3, [pc, #448]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e22:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e26:	4a6f      	ldr	r2, [pc, #444]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e28:	f043 0308 	orr.w	r3, r3, #8
 8008e2c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e30:	4b6c      	ldr	r3, [pc, #432]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e32:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e36:	f003 0308 	and.w	r3, r3, #8
 8008e3a:	623b      	str	r3, [r7, #32]
 8008e3c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8008e3e:	4b69      	ldr	r3, [pc, #420]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e40:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e44:	4a67      	ldr	r2, [pc, #412]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e46:	f043 0310 	orr.w	r3, r3, #16
 8008e4a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e4e:	4b65      	ldr	r3, [pc, #404]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e50:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e54:	f003 0310 	and.w	r3, r3, #16
 8008e58:	61fb      	str	r3, [r7, #28]
 8008e5a:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8008e5c:	4b61      	ldr	r3, [pc, #388]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e62:	4a60      	ldr	r2, [pc, #384]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e64:	f043 0320 	orr.w	r3, r3, #32
 8008e68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e6c:	4b5d      	ldr	r3, [pc, #372]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e6e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e72:	f003 0320 	and.w	r3, r3, #32
 8008e76:	61bb      	str	r3, [r7, #24]
 8008e78:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8008e7a:	4b5a      	ldr	r3, [pc, #360]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e7c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e80:	4a58      	ldr	r2, [pc, #352]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e86:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008e8a:	4b56      	ldr	r3, [pc, #344]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e8c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e94:	617b      	str	r3, [r7, #20]
 8008e96:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8008e98:	4b52      	ldr	r3, [pc, #328]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008e9a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008e9e:	4a51      	ldr	r2, [pc, #324]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008ea0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008ea4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ea8:	4b4e      	ldr	r3, [pc, #312]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008eaa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008eae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008eb2:	613b      	str	r3, [r7, #16]
 8008eb4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8008eb6:	4b4b      	ldr	r3, [pc, #300]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008eb8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ebc:	4a49      	ldr	r2, [pc, #292]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008ebe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008ec2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8008ec6:	4b47      	ldr	r3, [pc, #284]	@ (8008fe4 <SDRAM_MspInit+0x208>)
 8008ec8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8008ecc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8008ed0:	60fb      	str	r3, [r7, #12]
 8008ed2:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8008ed4:	2302      	movs	r3, #2
 8008ed6:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8008ed8:	2301      	movs	r3, #1
 8008eda:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8008edc:	2303      	movs	r3, #3
 8008ede:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8008ee0:	230c      	movs	r3, #12
 8008ee2:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8008ee4:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8008ee8:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 8008eea:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008eee:	4619      	mov	r1, r3
 8008ef0:	483d      	ldr	r0, [pc, #244]	@ (8008fe8 <SDRAM_MspInit+0x20c>)
 8008ef2:	f004 fcdd 	bl	800d8b0 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8008ef6:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8008efa:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8008efc:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f00:	4619      	mov	r1, r3
 8008f02:	483a      	ldr	r0, [pc, #232]	@ (8008fec <SDRAM_MspInit+0x210>)
 8008f04:	f004 fcd4 	bl	800d8b0 <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8008f08:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8008f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 8008f0e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f12:	4619      	mov	r1, r3
 8008f14:	4836      	ldr	r0, [pc, #216]	@ (8008ff0 <SDRAM_MspInit+0x214>)
 8008f16:	f004 fccb 	bl	800d8b0 <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 8008f1a:	f248 1337 	movw	r3, #33079	@ 0x8137
 8008f1e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8008f20:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f24:	4619      	mov	r1, r3
 8008f26:	4833      	ldr	r0, [pc, #204]	@ (8008ff4 <SDRAM_MspInit+0x218>)
 8008f28:	f004 fcc2 	bl	800d8b0 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 8008f2c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8008f30:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8008f32:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f36:	4619      	mov	r1, r3
 8008f38:	482f      	ldr	r0, [pc, #188]	@ (8008ff8 <SDRAM_MspInit+0x21c>)
 8008f3a:	f004 fcb9 	bl	800d8b0 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 8008f3e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8008f42:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8008f44:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8008f48:	4619      	mov	r1, r3
 8008f4a:	482c      	ldr	r0, [pc, #176]	@ (8008ffc <SDRAM_MspInit+0x220>)
 8008f4c:	f004 fcb0 	bl	800d8b0 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 8008f50:	4b2b      	ldr	r3, [pc, #172]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f52:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8008f56:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 8008f58:	4b29      	ldr	r3, [pc, #164]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f5a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008f5e:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 8008f60:	4b27      	ldr	r3, [pc, #156]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f62:	2280      	movs	r2, #128	@ 0x80
 8008f64:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 8008f66:	4b26      	ldr	r3, [pc, #152]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f68:	2200      	movs	r2, #0
 8008f6a:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 8008f6c:	4b24      	ldr	r3, [pc, #144]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f6e:	f240 2202 	movw	r2, #514	@ 0x202
 8008f72:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 8008f74:	4b22      	ldr	r3, [pc, #136]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f76:	f640 0208 	movw	r2, #2056	@ 0x808
 8008f7a:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 8008f7c:	4b20      	ldr	r3, [pc, #128]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f7e:	2220      	movs	r2, #32
 8008f80:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 8008f82:	4b1f      	ldr	r3, [pc, #124]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f84:	2280      	movs	r2, #128	@ 0x80
 8008f86:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 8008f88:	4b1d      	ldr	r3, [pc, #116]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f8a:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8008f8e:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 8008f90:	4b1b      	ldr	r3, [pc, #108]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f92:	2200      	movs	r2, #0
 8008f94:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 8008f96:	4b1a      	ldr	r3, [pc, #104]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 8008f9c:	4b18      	ldr	r3, [pc, #96]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008f9e:	2280      	movs	r2, #128	@ 0x80
 8008fa0:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 8008fa2:	4b17      	ldr	r3, [pc, #92]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 8008fa8:	4b15      	ldr	r3, [pc, #84]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008faa:	2200      	movs	r2, #0
 8008fac:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 8008fae:	4b14      	ldr	r3, [pc, #80]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008fb0:	4a14      	ldr	r2, [pc, #80]	@ (8009004 <SDRAM_MspInit+0x228>)
 8008fb2:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8008fb4:	687b      	ldr	r3, [r7, #4]
 8008fb6:	4a12      	ldr	r2, [pc, #72]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008fb8:	631a      	str	r2, [r3, #48]	@ 0x30
 8008fba:	4a11      	ldr	r2, [pc, #68]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008fbc:	687b      	ldr	r3, [r7, #4]
 8008fbe:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8008fc0:	480f      	ldr	r0, [pc, #60]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008fc2:	f006 f8b7 	bl	800f134 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8008fc6:	480e      	ldr	r0, [pc, #56]	@ (8009000 <SDRAM_MspInit+0x224>)
 8008fc8:	f006 f868 	bl	800f09c <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 8008fcc:	2200      	movs	r2, #0
 8008fce:	210f      	movs	r1, #15
 8008fd0:	207a      	movs	r0, #122	@ 0x7a
 8008fd2:	f000 f991 	bl	80092f8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8008fd6:	207a      	movs	r0, #122	@ 0x7a
 8008fd8:	f000 f9a8 	bl	800932c <HAL_NVIC_EnableIRQ>
}
 8008fdc:	bf00      	nop
 8008fde:	3740      	adds	r7, #64	@ 0x40
 8008fe0:	46bd      	mov	sp, r7
 8008fe2:	bd80      	pop	{r7, pc}
 8008fe4:	58024400 	.word	0x58024400
 8008fe8:	58020c00 	.word	0x58020c00
 8008fec:	58021000 	.word	0x58021000
 8008ff0:	58021400 	.word	0x58021400
 8008ff4:	58021800 	.word	0x58021800
 8008ff8:	58021c00 	.word	0x58021c00
 8008ffc:	58022000 	.word	0x58022000
 8009000:	24006a94 	.word	0x24006a94
 8009004:	52000040 	.word	0x52000040

08009008 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8009008:	b580      	push	{r7, lr}
 800900a:	b082      	sub	sp, #8
 800900c:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800900e:	2003      	movs	r0, #3
 8009010:	f000 f967 	bl	80092e2 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8009014:	f007 f8e2 	bl	80101dc <HAL_RCC_GetSysClockFreq>
 8009018:	4602      	mov	r2, r0
 800901a:	4b15      	ldr	r3, [pc, #84]	@ (8009070 <HAL_Init+0x68>)
 800901c:	699b      	ldr	r3, [r3, #24]
 800901e:	0a1b      	lsrs	r3, r3, #8
 8009020:	f003 030f 	and.w	r3, r3, #15
 8009024:	4913      	ldr	r1, [pc, #76]	@ (8009074 <HAL_Init+0x6c>)
 8009026:	5ccb      	ldrb	r3, [r1, r3]
 8009028:	f003 031f 	and.w	r3, r3, #31
 800902c:	fa22 f303 	lsr.w	r3, r2, r3
 8009030:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8009032:	4b0f      	ldr	r3, [pc, #60]	@ (8009070 <HAL_Init+0x68>)
 8009034:	699b      	ldr	r3, [r3, #24]
 8009036:	f003 030f 	and.w	r3, r3, #15
 800903a:	4a0e      	ldr	r2, [pc, #56]	@ (8009074 <HAL_Init+0x6c>)
 800903c:	5cd3      	ldrb	r3, [r2, r3]
 800903e:	f003 031f 	and.w	r3, r3, #31
 8009042:	687a      	ldr	r2, [r7, #4]
 8009044:	fa22 f303 	lsr.w	r3, r2, r3
 8009048:	4a0b      	ldr	r2, [pc, #44]	@ (8009078 <HAL_Init+0x70>)
 800904a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800904c:	4a0b      	ldr	r2, [pc, #44]	@ (800907c <HAL_Init+0x74>)
 800904e:	687b      	ldr	r3, [r7, #4]
 8009050:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8009052:	2000      	movs	r0, #0
 8009054:	f00b fdac 	bl	8014bb0 <HAL_InitTick>
 8009058:	4603      	mov	r3, r0
 800905a:	2b00      	cmp	r3, #0
 800905c:	d001      	beq.n	8009062 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 800905e:	2301      	movs	r3, #1
 8009060:	e002      	b.n	8009068 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8009062:	f7fb ffcb 	bl	8004ffc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8009066:	2300      	movs	r3, #0
}
 8009068:	4618      	mov	r0, r3
 800906a:	3708      	adds	r7, #8
 800906c:	46bd      	mov	sp, r7
 800906e:	bd80      	pop	{r7, pc}
 8009070:	58024400 	.word	0x58024400
 8009074:	0801e568 	.word	0x0801e568
 8009078:	24000404 	.word	0x24000404
 800907c:	24000400 	.word	0x24000400

08009080 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8009080:	b480      	push	{r7}
 8009082:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8009084:	4b06      	ldr	r3, [pc, #24]	@ (80090a0 <HAL_IncTick+0x20>)
 8009086:	781b      	ldrb	r3, [r3, #0]
 8009088:	461a      	mov	r2, r3
 800908a:	4b06      	ldr	r3, [pc, #24]	@ (80090a4 <HAL_IncTick+0x24>)
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	4413      	add	r3, r2
 8009090:	4a04      	ldr	r2, [pc, #16]	@ (80090a4 <HAL_IncTick+0x24>)
 8009092:	6013      	str	r3, [r2, #0]
}
 8009094:	bf00      	nop
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	240005d4 	.word	0x240005d4
 80090a4:	24006b00 	.word	0x24006b00

080090a8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80090a8:	b480      	push	{r7}
 80090aa:	af00      	add	r7, sp, #0
  return uwTick;
 80090ac:	4b03      	ldr	r3, [pc, #12]	@ (80090bc <HAL_GetTick+0x14>)
 80090ae:	681b      	ldr	r3, [r3, #0]
}
 80090b0:	4618      	mov	r0, r3
 80090b2:	46bd      	mov	sp, r7
 80090b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090b8:	4770      	bx	lr
 80090ba:	bf00      	nop
 80090bc:	24006b00 	.word	0x24006b00

080090c0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80090c0:	b580      	push	{r7, lr}
 80090c2:	b084      	sub	sp, #16
 80090c4:	af00      	add	r7, sp, #0
 80090c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80090c8:	f7ff ffee 	bl	80090a8 <HAL_GetTick>
 80090cc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80090d2:	68fb      	ldr	r3, [r7, #12]
 80090d4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80090d8:	d005      	beq.n	80090e6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80090da:	4b0a      	ldr	r3, [pc, #40]	@ (8009104 <HAL_Delay+0x44>)
 80090dc:	781b      	ldrb	r3, [r3, #0]
 80090de:	461a      	mov	r2, r3
 80090e0:	68fb      	ldr	r3, [r7, #12]
 80090e2:	4413      	add	r3, r2
 80090e4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80090e6:	bf00      	nop
 80090e8:	f7ff ffde 	bl	80090a8 <HAL_GetTick>
 80090ec:	4602      	mov	r2, r0
 80090ee:	68bb      	ldr	r3, [r7, #8]
 80090f0:	1ad3      	subs	r3, r2, r3
 80090f2:	68fa      	ldr	r2, [r7, #12]
 80090f4:	429a      	cmp	r2, r3
 80090f6:	d8f7      	bhi.n	80090e8 <HAL_Delay+0x28>
  {
  }
}
 80090f8:	bf00      	nop
 80090fa:	bf00      	nop
 80090fc:	3710      	adds	r7, #16
 80090fe:	46bd      	mov	sp, r7
 8009100:	bd80      	pop	{r7, pc}
 8009102:	bf00      	nop
 8009104:	240005d4 	.word	0x240005d4

08009108 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8009108:	b480      	push	{r7}
 800910a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 800910c:	4b03      	ldr	r3, [pc, #12]	@ (800911c <HAL_GetREVID+0x14>)
 800910e:	681b      	ldr	r3, [r3, #0]
 8009110:	0c1b      	lsrs	r3, r3, #16
}
 8009112:	4618      	mov	r0, r3
 8009114:	46bd      	mov	sp, r7
 8009116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800911a:	4770      	bx	lr
 800911c:	5c001000 	.word	0x5c001000

08009120 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8009120:	b480      	push	{r7}
 8009122:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8009124:	4b05      	ldr	r3, [pc, #20]	@ (800913c <HAL_EnableCompensationCell+0x1c>)
 8009126:	6a1b      	ldr	r3, [r3, #32]
 8009128:	4a04      	ldr	r2, [pc, #16]	@ (800913c <HAL_EnableCompensationCell+0x1c>)
 800912a:	f043 0301 	orr.w	r3, r3, #1
 800912e:	6213      	str	r3, [r2, #32]
}
 8009130:	bf00      	nop
 8009132:	46bd      	mov	sp, r7
 8009134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009138:	4770      	bx	lr
 800913a:	bf00      	nop
 800913c:	58000400 	.word	0x58000400

08009140 <__NVIC_SetPriorityGrouping>:
{
 8009140:	b480      	push	{r7}
 8009142:	b085      	sub	sp, #20
 8009144:	af00      	add	r7, sp, #0
 8009146:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009148:	687b      	ldr	r3, [r7, #4]
 800914a:	f003 0307 	and.w	r3, r3, #7
 800914e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009150:	4b0b      	ldr	r3, [pc, #44]	@ (8009180 <__NVIC_SetPriorityGrouping+0x40>)
 8009152:	68db      	ldr	r3, [r3, #12]
 8009154:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009156:	68ba      	ldr	r2, [r7, #8]
 8009158:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800915c:	4013      	ands	r3, r2
 800915e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009164:	68bb      	ldr	r3, [r7, #8]
 8009166:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8009168:	4b06      	ldr	r3, [pc, #24]	@ (8009184 <__NVIC_SetPriorityGrouping+0x44>)
 800916a:	4313      	orrs	r3, r2
 800916c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800916e:	4a04      	ldr	r2, [pc, #16]	@ (8009180 <__NVIC_SetPriorityGrouping+0x40>)
 8009170:	68bb      	ldr	r3, [r7, #8]
 8009172:	60d3      	str	r3, [r2, #12]
}
 8009174:	bf00      	nop
 8009176:	3714      	adds	r7, #20
 8009178:	46bd      	mov	sp, r7
 800917a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917e:	4770      	bx	lr
 8009180:	e000ed00 	.word	0xe000ed00
 8009184:	05fa0000 	.word	0x05fa0000

08009188 <__NVIC_GetPriorityGrouping>:
{
 8009188:	b480      	push	{r7}
 800918a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800918c:	4b04      	ldr	r3, [pc, #16]	@ (80091a0 <__NVIC_GetPriorityGrouping+0x18>)
 800918e:	68db      	ldr	r3, [r3, #12]
 8009190:	0a1b      	lsrs	r3, r3, #8
 8009192:	f003 0307 	and.w	r3, r3, #7
}
 8009196:	4618      	mov	r0, r3
 8009198:	46bd      	mov	sp, r7
 800919a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800919e:	4770      	bx	lr
 80091a0:	e000ed00 	.word	0xe000ed00

080091a4 <__NVIC_EnableIRQ>:
{
 80091a4:	b480      	push	{r7}
 80091a6:	b083      	sub	sp, #12
 80091a8:	af00      	add	r7, sp, #0
 80091aa:	4603      	mov	r3, r0
 80091ac:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80091ae:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091b2:	2b00      	cmp	r3, #0
 80091b4:	db0b      	blt.n	80091ce <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091b6:	88fb      	ldrh	r3, [r7, #6]
 80091b8:	f003 021f 	and.w	r2, r3, #31
 80091bc:	4907      	ldr	r1, [pc, #28]	@ (80091dc <__NVIC_EnableIRQ+0x38>)
 80091be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091c2:	095b      	lsrs	r3, r3, #5
 80091c4:	2001      	movs	r0, #1
 80091c6:	fa00 f202 	lsl.w	r2, r0, r2
 80091ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80091ce:	bf00      	nop
 80091d0:	370c      	adds	r7, #12
 80091d2:	46bd      	mov	sp, r7
 80091d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d8:	4770      	bx	lr
 80091da:	bf00      	nop
 80091dc:	e000e100 	.word	0xe000e100

080091e0 <__NVIC_DisableIRQ>:
{
 80091e0:	b480      	push	{r7}
 80091e2:	b083      	sub	sp, #12
 80091e4:	af00      	add	r7, sp, #0
 80091e6:	4603      	mov	r3, r0
 80091e8:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80091ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	db12      	blt.n	8009218 <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80091f2:	88fb      	ldrh	r3, [r7, #6]
 80091f4:	f003 021f 	and.w	r2, r3, #31
 80091f8:	490a      	ldr	r1, [pc, #40]	@ (8009224 <__NVIC_DisableIRQ+0x44>)
 80091fa:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80091fe:	095b      	lsrs	r3, r3, #5
 8009200:	2001      	movs	r0, #1
 8009202:	fa00 f202 	lsl.w	r2, r0, r2
 8009206:	3320      	adds	r3, #32
 8009208:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 800920c:	f3bf 8f4f 	dsb	sy
}
 8009210:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009212:	f3bf 8f6f 	isb	sy
}
 8009216:	bf00      	nop
}
 8009218:	bf00      	nop
 800921a:	370c      	adds	r7, #12
 800921c:	46bd      	mov	sp, r7
 800921e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009222:	4770      	bx	lr
 8009224:	e000e100 	.word	0xe000e100

08009228 <__NVIC_SetPriority>:
{
 8009228:	b480      	push	{r7}
 800922a:	b083      	sub	sp, #12
 800922c:	af00      	add	r7, sp, #0
 800922e:	4603      	mov	r3, r0
 8009230:	6039      	str	r1, [r7, #0]
 8009232:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8009234:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009238:	2b00      	cmp	r3, #0
 800923a:	db0a      	blt.n	8009252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800923c:	683b      	ldr	r3, [r7, #0]
 800923e:	b2da      	uxtb	r2, r3
 8009240:	490c      	ldr	r1, [pc, #48]	@ (8009274 <__NVIC_SetPriority+0x4c>)
 8009242:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009246:	0112      	lsls	r2, r2, #4
 8009248:	b2d2      	uxtb	r2, r2
 800924a:	440b      	add	r3, r1
 800924c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009250:	e00a      	b.n	8009268 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009252:	683b      	ldr	r3, [r7, #0]
 8009254:	b2da      	uxtb	r2, r3
 8009256:	4908      	ldr	r1, [pc, #32]	@ (8009278 <__NVIC_SetPriority+0x50>)
 8009258:	88fb      	ldrh	r3, [r7, #6]
 800925a:	f003 030f 	and.w	r3, r3, #15
 800925e:	3b04      	subs	r3, #4
 8009260:	0112      	lsls	r2, r2, #4
 8009262:	b2d2      	uxtb	r2, r2
 8009264:	440b      	add	r3, r1
 8009266:	761a      	strb	r2, [r3, #24]
}
 8009268:	bf00      	nop
 800926a:	370c      	adds	r7, #12
 800926c:	46bd      	mov	sp, r7
 800926e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009272:	4770      	bx	lr
 8009274:	e000e100 	.word	0xe000e100
 8009278:	e000ed00 	.word	0xe000ed00

0800927c <NVIC_EncodePriority>:
{
 800927c:	b480      	push	{r7}
 800927e:	b089      	sub	sp, #36	@ 0x24
 8009280:	af00      	add	r7, sp, #0
 8009282:	60f8      	str	r0, [r7, #12]
 8009284:	60b9      	str	r1, [r7, #8]
 8009286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f003 0307 	and.w	r3, r3, #7
 800928e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009290:	69fb      	ldr	r3, [r7, #28]
 8009292:	f1c3 0307 	rsb	r3, r3, #7
 8009296:	2b04      	cmp	r3, #4
 8009298:	bf28      	it	cs
 800929a:	2304      	movcs	r3, #4
 800929c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800929e:	69fb      	ldr	r3, [r7, #28]
 80092a0:	3304      	adds	r3, #4
 80092a2:	2b06      	cmp	r3, #6
 80092a4:	d902      	bls.n	80092ac <NVIC_EncodePriority+0x30>
 80092a6:	69fb      	ldr	r3, [r7, #28]
 80092a8:	3b03      	subs	r3, #3
 80092aa:	e000      	b.n	80092ae <NVIC_EncodePriority+0x32>
 80092ac:	2300      	movs	r3, #0
 80092ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092b0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80092b4:	69bb      	ldr	r3, [r7, #24]
 80092b6:	fa02 f303 	lsl.w	r3, r2, r3
 80092ba:	43da      	mvns	r2, r3
 80092bc:	68bb      	ldr	r3, [r7, #8]
 80092be:	401a      	ands	r2, r3
 80092c0:	697b      	ldr	r3, [r7, #20]
 80092c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80092c4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80092c8:	697b      	ldr	r3, [r7, #20]
 80092ca:	fa01 f303 	lsl.w	r3, r1, r3
 80092ce:	43d9      	mvns	r1, r3
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80092d4:	4313      	orrs	r3, r2
}
 80092d6:	4618      	mov	r0, r3
 80092d8:	3724      	adds	r7, #36	@ 0x24
 80092da:	46bd      	mov	sp, r7
 80092dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80092e0:	4770      	bx	lr

080092e2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80092e2:	b580      	push	{r7, lr}
 80092e4:	b082      	sub	sp, #8
 80092e6:	af00      	add	r7, sp, #0
 80092e8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80092ea:	6878      	ldr	r0, [r7, #4]
 80092ec:	f7ff ff28 	bl	8009140 <__NVIC_SetPriorityGrouping>
}
 80092f0:	bf00      	nop
 80092f2:	3708      	adds	r7, #8
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80092f8:	b580      	push	{r7, lr}
 80092fa:	b086      	sub	sp, #24
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	4603      	mov	r3, r0
 8009300:	60b9      	str	r1, [r7, #8]
 8009302:	607a      	str	r2, [r7, #4]
 8009304:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8009306:	f7ff ff3f 	bl	8009188 <__NVIC_GetPriorityGrouping>
 800930a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800930c:	687a      	ldr	r2, [r7, #4]
 800930e:	68b9      	ldr	r1, [r7, #8]
 8009310:	6978      	ldr	r0, [r7, #20]
 8009312:	f7ff ffb3 	bl	800927c <NVIC_EncodePriority>
 8009316:	4602      	mov	r2, r0
 8009318:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800931c:	4611      	mov	r1, r2
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff ff82 	bl	8009228 <__NVIC_SetPriority>
}
 8009324:	bf00      	nop
 8009326:	3718      	adds	r7, #24
 8009328:	46bd      	mov	sp, r7
 800932a:	bd80      	pop	{r7, pc}

0800932c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800932c:	b580      	push	{r7, lr}
 800932e:	b082      	sub	sp, #8
 8009330:	af00      	add	r7, sp, #0
 8009332:	4603      	mov	r3, r0
 8009334:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8009336:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800933a:	4618      	mov	r0, r3
 800933c:	f7ff ff32 	bl	80091a4 <__NVIC_EnableIRQ>
}
 8009340:	bf00      	nop
 8009342:	3708      	adds	r7, #8
 8009344:	46bd      	mov	sp, r7
 8009346:	bd80      	pop	{r7, pc}

08009348 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009348:	b580      	push	{r7, lr}
 800934a:	b082      	sub	sp, #8
 800934c:	af00      	add	r7, sp, #0
 800934e:	4603      	mov	r3, r0
 8009350:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8009352:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009356:	4618      	mov	r0, r3
 8009358:	f7ff ff42 	bl	80091e0 <__NVIC_DisableIRQ>
}
 800935c:	bf00      	nop
 800935e:	3708      	adds	r7, #8
 8009360:	46bd      	mov	sp, r7
 8009362:	bd80      	pop	{r7, pc}

08009364 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8009364:	b480      	push	{r7}
 8009366:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 8009368:	f3bf 8f5f 	dmb	sy
}
 800936c:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 800936e:	4b07      	ldr	r3, [pc, #28]	@ (800938c <HAL_MPU_Disable+0x28>)
 8009370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009372:	4a06      	ldr	r2, [pc, #24]	@ (800938c <HAL_MPU_Disable+0x28>)
 8009374:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8009378:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 800937a:	4b05      	ldr	r3, [pc, #20]	@ (8009390 <HAL_MPU_Disable+0x2c>)
 800937c:	2200      	movs	r2, #0
 800937e:	605a      	str	r2, [r3, #4]
}
 8009380:	bf00      	nop
 8009382:	46bd      	mov	sp, r7
 8009384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009388:	4770      	bx	lr
 800938a:	bf00      	nop
 800938c:	e000ed00 	.word	0xe000ed00
 8009390:	e000ed90 	.word	0xe000ed90

08009394 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8009394:	b480      	push	{r7}
 8009396:	b083      	sub	sp, #12
 8009398:	af00      	add	r7, sp, #0
 800939a:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 800939c:	4a0b      	ldr	r2, [pc, #44]	@ (80093cc <HAL_MPU_Enable+0x38>)
 800939e:	687b      	ldr	r3, [r7, #4]
 80093a0:	f043 0301 	orr.w	r3, r3, #1
 80093a4:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80093a6:	4b0a      	ldr	r3, [pc, #40]	@ (80093d0 <HAL_MPU_Enable+0x3c>)
 80093a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093aa:	4a09      	ldr	r2, [pc, #36]	@ (80093d0 <HAL_MPU_Enable+0x3c>)
 80093ac:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80093b0:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80093b2:	f3bf 8f4f 	dsb	sy
}
 80093b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80093b8:	f3bf 8f6f 	isb	sy
}
 80093bc:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80093be:	bf00      	nop
 80093c0:	370c      	adds	r7, #12
 80093c2:	46bd      	mov	sp, r7
 80093c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093c8:	4770      	bx	lr
 80093ca:	bf00      	nop
 80093cc:	e000ed90 	.word	0xe000ed90
 80093d0:	e000ed00 	.word	0xe000ed00

080093d4 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 80093d4:	b480      	push	{r7}
 80093d6:	b083      	sub	sp, #12
 80093d8:	af00      	add	r7, sp, #0
 80093da:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	785a      	ldrb	r2, [r3, #1]
 80093e0:	4b1b      	ldr	r3, [pc, #108]	@ (8009450 <HAL_MPU_ConfigRegion+0x7c>)
 80093e2:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 80093e4:	4b1a      	ldr	r3, [pc, #104]	@ (8009450 <HAL_MPU_ConfigRegion+0x7c>)
 80093e6:	691b      	ldr	r3, [r3, #16]
 80093e8:	4a19      	ldr	r2, [pc, #100]	@ (8009450 <HAL_MPU_ConfigRegion+0x7c>)
 80093ea:	f023 0301 	bic.w	r3, r3, #1
 80093ee:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 80093f0:	4a17      	ldr	r2, [pc, #92]	@ (8009450 <HAL_MPU_ConfigRegion+0x7c>)
 80093f2:	687b      	ldr	r3, [r7, #4]
 80093f4:	685b      	ldr	r3, [r3, #4]
 80093f6:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	7b1b      	ldrb	r3, [r3, #12]
 80093fc:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	7adb      	ldrb	r3, [r3, #11]
 8009402:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009404:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	7a9b      	ldrb	r3, [r3, #10]
 800940a:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800940c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800940e:	687b      	ldr	r3, [r7, #4]
 8009410:	7b5b      	ldrb	r3, [r3, #13]
 8009412:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8009414:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	7b9b      	ldrb	r3, [r3, #14]
 800941a:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800941c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	7bdb      	ldrb	r3, [r3, #15]
 8009422:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8009424:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	7a5b      	ldrb	r3, [r3, #9]
 800942a:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800942c:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	7a1b      	ldrb	r3, [r3, #8]
 8009432:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8009434:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 8009436:	687a      	ldr	r2, [r7, #4]
 8009438:	7812      	ldrb	r2, [r2, #0]
 800943a:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 800943c:	4a04      	ldr	r2, [pc, #16]	@ (8009450 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800943e:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8009440:	6113      	str	r3, [r2, #16]
}
 8009442:	bf00      	nop
 8009444:	370c      	adds	r7, #12
 8009446:	46bd      	mov	sp, r7
 8009448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800944c:	4770      	bx	lr
 800944e:	bf00      	nop
 8009450:	e000ed90 	.word	0xe000ed90

08009454 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8009454:	b480      	push	{r7}
 8009456:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 8009458:	4b06      	ldr	r3, [pc, #24]	@ (8009474 <HAL_GetCurrentCPUID+0x20>)
 800945a:	681b      	ldr	r3, [r3, #0]
 800945c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009460:	2b70      	cmp	r3, #112	@ 0x70
 8009462:	d101      	bne.n	8009468 <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8009464:	2303      	movs	r3, #3
 8009466:	e000      	b.n	800946a <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 8009468:	2301      	movs	r3, #1
  }
}
 800946a:	4618      	mov	r0, r3
 800946c:	46bd      	mov	sp, r7
 800946e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009472:	4770      	bx	lr
 8009474:	e000ed00 	.word	0xe000ed00

08009478 <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 8009478:	b480      	push	{r7}
 800947a:	b085      	sub	sp, #20
 800947c:	af00      	add	r7, sp, #0
 800947e:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8009480:	4b27      	ldr	r3, [pc, #156]	@ (8009520 <HAL_DCMI_Suspend+0xa8>)
 8009482:	681b      	ldr	r3, [r3, #0]
 8009484:	4a27      	ldr	r2, [pc, #156]	@ (8009524 <HAL_DCMI_Suspend+0xac>)
 8009486:	fba2 2303 	umull	r2, r3, r2, r3
 800948a:	0a5b      	lsrs	r3, r3, #9
 800948c:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8009490:	fb02 f303 	mul.w	r3, r2, r3
 8009494:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8009496:	2300      	movs	r3, #0
 8009498:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80094a0:	2b01      	cmp	r3, #1
 80094a2:	d101      	bne.n	80094a8 <HAL_DCMI_Suspend+0x30>
 80094a4:	2302      	movs	r3, #2
 80094a6:	e034      	b.n	8009512 <HAL_DCMI_Suspend+0x9a>
 80094a8:	687b      	ldr	r3, [r7, #4]
 80094aa:	2201      	movs	r2, #1
 80094ac:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80094b6:	b2db      	uxtb	r3, r3
 80094b8:	2b02      	cmp	r3, #2
 80094ba:	d125      	bne.n	8009508 <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	2205      	movs	r2, #5
 80094c0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	681a      	ldr	r2, [r3, #0]
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	f022 0201 	bic.w	r2, r2, #1
 80094d2:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	3b01      	subs	r3, #1
 80094d8:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	2b00      	cmp	r3, #0
 80094de:	d10c      	bne.n	80094fa <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80094e4:	f043 0220 	orr.w	r2, r3, #32
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	2201      	movs	r2, #1
 80094f0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        status = HAL_TIMEOUT;
 80094f4:	2303      	movs	r3, #3
 80094f6:	72fb      	strb	r3, [r7, #11]
        break;
 80094f8:	e006      	b.n	8009508 <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	f003 0301 	and.w	r3, r3, #1
 8009504:	2b00      	cmp	r3, #0
 8009506:	d1e5      	bne.n	80094d4 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8009508:	687b      	ldr	r3, [r7, #4]
 800950a:	2200      	movs	r2, #0
 800950c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 8009510:	7afb      	ldrb	r3, [r7, #11]
}
 8009512:	4618      	mov	r0, r3
 8009514:	3714      	adds	r7, #20
 8009516:	46bd      	mov	sp, r7
 8009518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800951c:	4770      	bx	lr
 800951e:	bf00      	nop
 8009520:	24000400 	.word	0x24000400
 8009524:	10624dd3 	.word	0x10624dd3

08009528 <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 8009528:	b480      	push	{r7}
 800952a:	b083      	sub	sp, #12
 800952c:	af00      	add	r7, sp, #0
 800952e:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8009536:	2b01      	cmp	r3, #1
 8009538:	d101      	bne.n	800953e <HAL_DCMI_Resume+0x16>
 800953a:	2302      	movs	r3, #2
 800953c:	e01a      	b.n	8009574 <HAL_DCMI_Resume+0x4c>
 800953e:	687b      	ldr	r3, [r7, #4]
 8009540:	2201      	movs	r2, #1
 8009542:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8009546:	687b      	ldr	r3, [r7, #4]
 8009548:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800954c:	b2db      	uxtb	r3, r3
 800954e:	2b05      	cmp	r3, #5
 8009550:	d10b      	bne.n	800956a <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	2202      	movs	r2, #2
 8009556:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	681a      	ldr	r2, [r3, #0]
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	f042 0201 	orr.w	r2, r2, #1
 8009568:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	2200      	movs	r2, #0
 800956e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8009572:	2300      	movs	r3, #0
}
 8009574:	4618      	mov	r0, r3
 8009576:	370c      	adds	r7, #12
 8009578:	46bd      	mov	sp, r7
 800957a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957e:	4770      	bx	lr

08009580 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8009580:	b580      	push	{r7, lr}
 8009582:	b084      	sub	sp, #16
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	691b      	ldr	r3, [r3, #16]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	f003 0304 	and.w	r3, r3, #4
 8009596:	2b00      	cmp	r3, #0
 8009598:	d016      	beq.n	80095c8 <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	2204      	movs	r2, #4
 80095a0:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095a6:	f043 0202 	orr.w	r2, r3, #2
 80095aa:	687b      	ldr	r3, [r7, #4]
 80095ac:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	2204      	movs	r2, #4
 80095b2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095ba:	4a31      	ldr	r2, [pc, #196]	@ (8009680 <HAL_DCMI_IRQHandler+0x100>)
 80095bc:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80095be:	687b      	ldr	r3, [r7, #4]
 80095c0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095c2:	4618      	mov	r0, r3
 80095c4:	f001 fb16 	bl	800abf4 <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	f003 0302 	and.w	r3, r3, #2
 80095ce:	2b00      	cmp	r3, #0
 80095d0:	d016      	beq.n	8009600 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	681b      	ldr	r3, [r3, #0]
 80095d6:	2202      	movs	r2, #2
 80095d8:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80095de:	f043 0201 	orr.w	r2, r3, #1
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 80095e6:	687b      	ldr	r3, [r7, #4]
 80095e8:	2204      	movs	r2, #4
 80095ea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 80095ee:	687b      	ldr	r3, [r7, #4]
 80095f0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095f2:	4a23      	ldr	r2, [pc, #140]	@ (8009680 <HAL_DCMI_IRQHandler+0x100>)
 80095f4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80095fa:	4618      	mov	r0, r3
 80095fc:	f001 fafa 	bl	800abf4 <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	f003 0310 	and.w	r3, r3, #16
 8009606:	2b00      	cmp	r3, #0
 8009608:	d006      	beq.n	8009618 <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	681b      	ldr	r3, [r3, #0]
 800960e:	2210      	movs	r2, #16
 8009610:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8009612:	6878      	ldr	r0, [r7, #4]
 8009614:	f7fe f956 	bl	80078c4 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	f003 0308 	and.w	r3, r3, #8
 800961e:	2b00      	cmp	r3, #0
 8009620:	d006      	beq.n	8009630 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	681b      	ldr	r3, [r3, #0]
 8009626:	2208      	movs	r2, #8
 8009628:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 800962a:	6878      	ldr	r0, [r7, #4]
 800962c:	f7fe f960 	bl	80078f0 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	f003 0301 	and.w	r3, r3, #1
 8009636:	2b00      	cmp	r3, #0
 8009638:	d01d      	beq.n	8009676 <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	681b      	ldr	r3, [r3, #0]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f003 0302 	and.w	r3, r3, #2
 8009644:	2b02      	cmp	r3, #2
 8009646:	d107      	bne.n	8009658 <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8009648:	687b      	ldr	r3, [r7, #4]
 800964a:	681b      	ldr	r3, [r3, #0]
 800964c:	68da      	ldr	r2, [r3, #12]
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	f022 021e 	bic.w	r2, r2, #30
 8009656:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	681b      	ldr	r3, [r3, #0]
 800965c:	68da      	ldr	r2, [r3, #12]
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	681b      	ldr	r3, [r3, #0]
 8009662:	f022 0201 	bic.w	r2, r2, #1
 8009666:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	681b      	ldr	r3, [r3, #0]
 800966c:	2201      	movs	r2, #1
 800966e:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8009670:	6878      	ldr	r0, [r7, #4]
 8009672:	f7fe f932 	bl	80078da <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8009676:	bf00      	nop
 8009678:	3710      	adds	r7, #16
 800967a:	46bd      	mov	sp, r7
 800967c:	bd80      	pop	{r7, pc}
 800967e:	bf00      	nop
 8009680:	08009685 	.word	0x08009685

08009684 <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8009684:	b580      	push	{r7, lr}
 8009686:	b084      	sub	sp, #16
 8009688:	af00      	add	r7, sp, #0
 800968a:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8009690:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009696:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009698:	2b02      	cmp	r3, #2
 800969a:	d009      	beq.n	80096b0 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	2201      	movs	r2, #1
 80096a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 80096a4:	68fb      	ldr	r3, [r7, #12]
 80096a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80096a8:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80096ac:	68fb      	ldr	r3, [r7, #12]
 80096ae:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 80096b0:	68f8      	ldr	r0, [r7, #12]
 80096b2:	f7fe f928 	bl	8007906 <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 80096b6:	bf00      	nop
 80096b8:	3710      	adds	r7, #16
 80096ba:	46bd      	mov	sp, r7
 80096bc:	bd80      	pop	{r7, pc}
	...

080096c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b086      	sub	sp, #24
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80096c8:	f7ff fcee 	bl	80090a8 <HAL_GetTick>
 80096cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d101      	bne.n	80096d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80096d4:	2301      	movs	r3, #1
 80096d6:	e316      	b.n	8009d06 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80096d8:	687b      	ldr	r3, [r7, #4]
 80096da:	681b      	ldr	r3, [r3, #0]
 80096dc:	4a66      	ldr	r2, [pc, #408]	@ (8009878 <HAL_DMA_Init+0x1b8>)
 80096de:	4293      	cmp	r3, r2
 80096e0:	d04a      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 80096e2:	687b      	ldr	r3, [r7, #4]
 80096e4:	681b      	ldr	r3, [r3, #0]
 80096e6:	4a65      	ldr	r2, [pc, #404]	@ (800987c <HAL_DMA_Init+0x1bc>)
 80096e8:	4293      	cmp	r3, r2
 80096ea:	d045      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	681b      	ldr	r3, [r3, #0]
 80096f0:	4a63      	ldr	r2, [pc, #396]	@ (8009880 <HAL_DMA_Init+0x1c0>)
 80096f2:	4293      	cmp	r3, r2
 80096f4:	d040      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4a62      	ldr	r2, [pc, #392]	@ (8009884 <HAL_DMA_Init+0x1c4>)
 80096fc:	4293      	cmp	r3, r2
 80096fe:	d03b      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	681b      	ldr	r3, [r3, #0]
 8009704:	4a60      	ldr	r2, [pc, #384]	@ (8009888 <HAL_DMA_Init+0x1c8>)
 8009706:	4293      	cmp	r3, r2
 8009708:	d036      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	681b      	ldr	r3, [r3, #0]
 800970e:	4a5f      	ldr	r2, [pc, #380]	@ (800988c <HAL_DMA_Init+0x1cc>)
 8009710:	4293      	cmp	r3, r2
 8009712:	d031      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	681b      	ldr	r3, [r3, #0]
 8009718:	4a5d      	ldr	r2, [pc, #372]	@ (8009890 <HAL_DMA_Init+0x1d0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d02c      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 800971e:	687b      	ldr	r3, [r7, #4]
 8009720:	681b      	ldr	r3, [r3, #0]
 8009722:	4a5c      	ldr	r2, [pc, #368]	@ (8009894 <HAL_DMA_Init+0x1d4>)
 8009724:	4293      	cmp	r3, r2
 8009726:	d027      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	4a5a      	ldr	r2, [pc, #360]	@ (8009898 <HAL_DMA_Init+0x1d8>)
 800972e:	4293      	cmp	r3, r2
 8009730:	d022      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	4a59      	ldr	r2, [pc, #356]	@ (800989c <HAL_DMA_Init+0x1dc>)
 8009738:	4293      	cmp	r3, r2
 800973a:	d01d      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	4a57      	ldr	r2, [pc, #348]	@ (80098a0 <HAL_DMA_Init+0x1e0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d018      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	4a56      	ldr	r2, [pc, #344]	@ (80098a4 <HAL_DMA_Init+0x1e4>)
 800974c:	4293      	cmp	r3, r2
 800974e:	d013      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009750:	687b      	ldr	r3, [r7, #4]
 8009752:	681b      	ldr	r3, [r3, #0]
 8009754:	4a54      	ldr	r2, [pc, #336]	@ (80098a8 <HAL_DMA_Init+0x1e8>)
 8009756:	4293      	cmp	r3, r2
 8009758:	d00e      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	4a53      	ldr	r2, [pc, #332]	@ (80098ac <HAL_DMA_Init+0x1ec>)
 8009760:	4293      	cmp	r3, r2
 8009762:	d009      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	4a51      	ldr	r2, [pc, #324]	@ (80098b0 <HAL_DMA_Init+0x1f0>)
 800976a:	4293      	cmp	r3, r2
 800976c:	d004      	beq.n	8009778 <HAL_DMA_Init+0xb8>
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	4a50      	ldr	r2, [pc, #320]	@ (80098b4 <HAL_DMA_Init+0x1f4>)
 8009774:	4293      	cmp	r3, r2
 8009776:	d101      	bne.n	800977c <HAL_DMA_Init+0xbc>
 8009778:	2301      	movs	r3, #1
 800977a:	e000      	b.n	800977e <HAL_DMA_Init+0xbe>
 800977c:	2300      	movs	r3, #0
 800977e:	2b00      	cmp	r3, #0
 8009780:	f000 813b 	beq.w	80099fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	2202      	movs	r2, #2
 8009788:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2200      	movs	r2, #0
 8009790:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	681b      	ldr	r3, [r3, #0]
 8009798:	4a37      	ldr	r2, [pc, #220]	@ (8009878 <HAL_DMA_Init+0x1b8>)
 800979a:	4293      	cmp	r3, r2
 800979c:	d04a      	beq.n	8009834 <HAL_DMA_Init+0x174>
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	681b      	ldr	r3, [r3, #0]
 80097a2:	4a36      	ldr	r2, [pc, #216]	@ (800987c <HAL_DMA_Init+0x1bc>)
 80097a4:	4293      	cmp	r3, r2
 80097a6:	d045      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097a8:	687b      	ldr	r3, [r7, #4]
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	4a34      	ldr	r2, [pc, #208]	@ (8009880 <HAL_DMA_Init+0x1c0>)
 80097ae:	4293      	cmp	r3, r2
 80097b0:	d040      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097b2:	687b      	ldr	r3, [r7, #4]
 80097b4:	681b      	ldr	r3, [r3, #0]
 80097b6:	4a33      	ldr	r2, [pc, #204]	@ (8009884 <HAL_DMA_Init+0x1c4>)
 80097b8:	4293      	cmp	r3, r2
 80097ba:	d03b      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097bc:	687b      	ldr	r3, [r7, #4]
 80097be:	681b      	ldr	r3, [r3, #0]
 80097c0:	4a31      	ldr	r2, [pc, #196]	@ (8009888 <HAL_DMA_Init+0x1c8>)
 80097c2:	4293      	cmp	r3, r2
 80097c4:	d036      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4a30      	ldr	r2, [pc, #192]	@ (800988c <HAL_DMA_Init+0x1cc>)
 80097cc:	4293      	cmp	r3, r2
 80097ce:	d031      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	4a2e      	ldr	r2, [pc, #184]	@ (8009890 <HAL_DMA_Init+0x1d0>)
 80097d6:	4293      	cmp	r3, r2
 80097d8:	d02c      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	681b      	ldr	r3, [r3, #0]
 80097de:	4a2d      	ldr	r2, [pc, #180]	@ (8009894 <HAL_DMA_Init+0x1d4>)
 80097e0:	4293      	cmp	r3, r2
 80097e2:	d027      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	681b      	ldr	r3, [r3, #0]
 80097e8:	4a2b      	ldr	r2, [pc, #172]	@ (8009898 <HAL_DMA_Init+0x1d8>)
 80097ea:	4293      	cmp	r3, r2
 80097ec:	d022      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	4a2a      	ldr	r2, [pc, #168]	@ (800989c <HAL_DMA_Init+0x1dc>)
 80097f4:	4293      	cmp	r3, r2
 80097f6:	d01d      	beq.n	8009834 <HAL_DMA_Init+0x174>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	681b      	ldr	r3, [r3, #0]
 80097fc:	4a28      	ldr	r2, [pc, #160]	@ (80098a0 <HAL_DMA_Init+0x1e0>)
 80097fe:	4293      	cmp	r3, r2
 8009800:	d018      	beq.n	8009834 <HAL_DMA_Init+0x174>
 8009802:	687b      	ldr	r3, [r7, #4]
 8009804:	681b      	ldr	r3, [r3, #0]
 8009806:	4a27      	ldr	r2, [pc, #156]	@ (80098a4 <HAL_DMA_Init+0x1e4>)
 8009808:	4293      	cmp	r3, r2
 800980a:	d013      	beq.n	8009834 <HAL_DMA_Init+0x174>
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	4a25      	ldr	r2, [pc, #148]	@ (80098a8 <HAL_DMA_Init+0x1e8>)
 8009812:	4293      	cmp	r3, r2
 8009814:	d00e      	beq.n	8009834 <HAL_DMA_Init+0x174>
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	681b      	ldr	r3, [r3, #0]
 800981a:	4a24      	ldr	r2, [pc, #144]	@ (80098ac <HAL_DMA_Init+0x1ec>)
 800981c:	4293      	cmp	r3, r2
 800981e:	d009      	beq.n	8009834 <HAL_DMA_Init+0x174>
 8009820:	687b      	ldr	r3, [r7, #4]
 8009822:	681b      	ldr	r3, [r3, #0]
 8009824:	4a22      	ldr	r2, [pc, #136]	@ (80098b0 <HAL_DMA_Init+0x1f0>)
 8009826:	4293      	cmp	r3, r2
 8009828:	d004      	beq.n	8009834 <HAL_DMA_Init+0x174>
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	681b      	ldr	r3, [r3, #0]
 800982e:	4a21      	ldr	r2, [pc, #132]	@ (80098b4 <HAL_DMA_Init+0x1f4>)
 8009830:	4293      	cmp	r3, r2
 8009832:	d108      	bne.n	8009846 <HAL_DMA_Init+0x186>
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	681b      	ldr	r3, [r3, #0]
 8009838:	681a      	ldr	r2, [r3, #0]
 800983a:	687b      	ldr	r3, [r7, #4]
 800983c:	681b      	ldr	r3, [r3, #0]
 800983e:	f022 0201 	bic.w	r2, r2, #1
 8009842:	601a      	str	r2, [r3, #0]
 8009844:	e007      	b.n	8009856 <HAL_DMA_Init+0x196>
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681a      	ldr	r2, [r3, #0]
 800984c:	687b      	ldr	r3, [r7, #4]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	f022 0201 	bic.w	r2, r2, #1
 8009854:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009856:	e02f      	b.n	80098b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009858:	f7ff fc26 	bl	80090a8 <HAL_GetTick>
 800985c:	4602      	mov	r2, r0
 800985e:	693b      	ldr	r3, [r7, #16]
 8009860:	1ad3      	subs	r3, r2, r3
 8009862:	2b05      	cmp	r3, #5
 8009864:	d928      	bls.n	80098b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	2220      	movs	r2, #32
 800986a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	2203      	movs	r2, #3
 8009870:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8009874:	2301      	movs	r3, #1
 8009876:	e246      	b.n	8009d06 <HAL_DMA_Init+0x646>
 8009878:	40020010 	.word	0x40020010
 800987c:	40020028 	.word	0x40020028
 8009880:	40020040 	.word	0x40020040
 8009884:	40020058 	.word	0x40020058
 8009888:	40020070 	.word	0x40020070
 800988c:	40020088 	.word	0x40020088
 8009890:	400200a0 	.word	0x400200a0
 8009894:	400200b8 	.word	0x400200b8
 8009898:	40020410 	.word	0x40020410
 800989c:	40020428 	.word	0x40020428
 80098a0:	40020440 	.word	0x40020440
 80098a4:	40020458 	.word	0x40020458
 80098a8:	40020470 	.word	0x40020470
 80098ac:	40020488 	.word	0x40020488
 80098b0:	400204a0 	.word	0x400204a0
 80098b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80098b8:	687b      	ldr	r3, [r7, #4]
 80098ba:	681b      	ldr	r3, [r3, #0]
 80098bc:	681b      	ldr	r3, [r3, #0]
 80098be:	f003 0301 	and.w	r3, r3, #1
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d1c8      	bne.n	8009858 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80098c6:	687b      	ldr	r3, [r7, #4]
 80098c8:	681b      	ldr	r3, [r3, #0]
 80098ca:	681b      	ldr	r3, [r3, #0]
 80098cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80098ce:	697a      	ldr	r2, [r7, #20]
 80098d0:	4b83      	ldr	r3, [pc, #524]	@ (8009ae0 <HAL_DMA_Init+0x420>)
 80098d2:	4013      	ands	r3, r2
 80098d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80098de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80098ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098ec:	687b      	ldr	r3, [r7, #4]
 80098ee:	699b      	ldr	r3, [r3, #24]
 80098f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80098f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	6a1b      	ldr	r3, [r3, #32]
 80098fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80098fe:	697a      	ldr	r2, [r7, #20]
 8009900:	4313      	orrs	r3, r2
 8009902:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009908:	2b04      	cmp	r3, #4
 800990a:	d107      	bne.n	800991c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009914:	4313      	orrs	r3, r2
 8009916:	697a      	ldr	r2, [r7, #20]
 8009918:	4313      	orrs	r3, r2
 800991a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800991c:	4b71      	ldr	r3, [pc, #452]	@ (8009ae4 <HAL_DMA_Init+0x424>)
 800991e:	681a      	ldr	r2, [r3, #0]
 8009920:	4b71      	ldr	r3, [pc, #452]	@ (8009ae8 <HAL_DMA_Init+0x428>)
 8009922:	4013      	ands	r3, r2
 8009924:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8009928:	d328      	bcc.n	800997c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	685b      	ldr	r3, [r3, #4]
 800992e:	2b28      	cmp	r3, #40	@ 0x28
 8009930:	d903      	bls.n	800993a <HAL_DMA_Init+0x27a>
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	685b      	ldr	r3, [r3, #4]
 8009936:	2b2e      	cmp	r3, #46	@ 0x2e
 8009938:	d917      	bls.n	800996a <HAL_DMA_Init+0x2aa>
 800993a:	687b      	ldr	r3, [r7, #4]
 800993c:	685b      	ldr	r3, [r3, #4]
 800993e:	2b3e      	cmp	r3, #62	@ 0x3e
 8009940:	d903      	bls.n	800994a <HAL_DMA_Init+0x28a>
 8009942:	687b      	ldr	r3, [r7, #4]
 8009944:	685b      	ldr	r3, [r3, #4]
 8009946:	2b42      	cmp	r3, #66	@ 0x42
 8009948:	d90f      	bls.n	800996a <HAL_DMA_Init+0x2aa>
 800994a:	687b      	ldr	r3, [r7, #4]
 800994c:	685b      	ldr	r3, [r3, #4]
 800994e:	2b46      	cmp	r3, #70	@ 0x46
 8009950:	d903      	bls.n	800995a <HAL_DMA_Init+0x29a>
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	685b      	ldr	r3, [r3, #4]
 8009956:	2b48      	cmp	r3, #72	@ 0x48
 8009958:	d907      	bls.n	800996a <HAL_DMA_Init+0x2aa>
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	685b      	ldr	r3, [r3, #4]
 800995e:	2b4e      	cmp	r3, #78	@ 0x4e
 8009960:	d905      	bls.n	800996e <HAL_DMA_Init+0x2ae>
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	685b      	ldr	r3, [r3, #4]
 8009966:	2b52      	cmp	r3, #82	@ 0x52
 8009968:	d801      	bhi.n	800996e <HAL_DMA_Init+0x2ae>
 800996a:	2301      	movs	r3, #1
 800996c:	e000      	b.n	8009970 <HAL_DMA_Init+0x2b0>
 800996e:	2300      	movs	r3, #0
 8009970:	2b00      	cmp	r3, #0
 8009972:	d003      	beq.n	800997c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8009974:	697b      	ldr	r3, [r7, #20]
 8009976:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800997a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	697a      	ldr	r2, [r7, #20]
 8009982:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8009984:	687b      	ldr	r3, [r7, #4]
 8009986:	681b      	ldr	r3, [r3, #0]
 8009988:	695b      	ldr	r3, [r3, #20]
 800998a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800998c:	697b      	ldr	r3, [r7, #20]
 800998e:	f023 0307 	bic.w	r3, r3, #7
 8009992:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009998:	697a      	ldr	r2, [r7, #20]
 800999a:	4313      	orrs	r3, r2
 800999c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800999e:	687b      	ldr	r3, [r7, #4]
 80099a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80099a2:	2b04      	cmp	r3, #4
 80099a4:	d117      	bne.n	80099d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80099aa:	697a      	ldr	r2, [r7, #20]
 80099ac:	4313      	orrs	r3, r2
 80099ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	d00e      	beq.n	80099d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80099b8:	6878      	ldr	r0, [r7, #4]
 80099ba:	f002 fcf5 	bl	800c3a8 <DMA_CheckFifoParam>
 80099be:	4603      	mov	r3, r0
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d008      	beq.n	80099d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	2240      	movs	r2, #64	@ 0x40
 80099c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	2201      	movs	r2, #1
 80099ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80099d2:	2301      	movs	r3, #1
 80099d4:	e197      	b.n	8009d06 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	697a      	ldr	r2, [r7, #20]
 80099dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80099de:	6878      	ldr	r0, [r7, #4]
 80099e0:	f002 fc30 	bl	800c244 <DMA_CalcBaseAndBitshift>
 80099e4:	4603      	mov	r3, r0
 80099e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80099ec:	f003 031f 	and.w	r3, r3, #31
 80099f0:	223f      	movs	r2, #63	@ 0x3f
 80099f2:	409a      	lsls	r2, r3
 80099f4:	68bb      	ldr	r3, [r7, #8]
 80099f6:	609a      	str	r2, [r3, #8]
 80099f8:	e0cd      	b.n	8009b96 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	681b      	ldr	r3, [r3, #0]
 80099fe:	4a3b      	ldr	r2, [pc, #236]	@ (8009aec <HAL_DMA_Init+0x42c>)
 8009a00:	4293      	cmp	r3, r2
 8009a02:	d022      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	4a39      	ldr	r2, [pc, #228]	@ (8009af0 <HAL_DMA_Init+0x430>)
 8009a0a:	4293      	cmp	r3, r2
 8009a0c:	d01d      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	681b      	ldr	r3, [r3, #0]
 8009a12:	4a38      	ldr	r2, [pc, #224]	@ (8009af4 <HAL_DMA_Init+0x434>)
 8009a14:	4293      	cmp	r3, r2
 8009a16:	d018      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a18:	687b      	ldr	r3, [r7, #4]
 8009a1a:	681b      	ldr	r3, [r3, #0]
 8009a1c:	4a36      	ldr	r2, [pc, #216]	@ (8009af8 <HAL_DMA_Init+0x438>)
 8009a1e:	4293      	cmp	r3, r2
 8009a20:	d013      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a22:	687b      	ldr	r3, [r7, #4]
 8009a24:	681b      	ldr	r3, [r3, #0]
 8009a26:	4a35      	ldr	r2, [pc, #212]	@ (8009afc <HAL_DMA_Init+0x43c>)
 8009a28:	4293      	cmp	r3, r2
 8009a2a:	d00e      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a2c:	687b      	ldr	r3, [r7, #4]
 8009a2e:	681b      	ldr	r3, [r3, #0]
 8009a30:	4a33      	ldr	r2, [pc, #204]	@ (8009b00 <HAL_DMA_Init+0x440>)
 8009a32:	4293      	cmp	r3, r2
 8009a34:	d009      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	4a32      	ldr	r2, [pc, #200]	@ (8009b04 <HAL_DMA_Init+0x444>)
 8009a3c:	4293      	cmp	r3, r2
 8009a3e:	d004      	beq.n	8009a4a <HAL_DMA_Init+0x38a>
 8009a40:	687b      	ldr	r3, [r7, #4]
 8009a42:	681b      	ldr	r3, [r3, #0]
 8009a44:	4a30      	ldr	r2, [pc, #192]	@ (8009b08 <HAL_DMA_Init+0x448>)
 8009a46:	4293      	cmp	r3, r2
 8009a48:	d101      	bne.n	8009a4e <HAL_DMA_Init+0x38e>
 8009a4a:	2301      	movs	r3, #1
 8009a4c:	e000      	b.n	8009a50 <HAL_DMA_Init+0x390>
 8009a4e:	2300      	movs	r3, #0
 8009a50:	2b00      	cmp	r3, #0
 8009a52:	f000 8097 	beq.w	8009b84 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	681b      	ldr	r3, [r3, #0]
 8009a5a:	4a24      	ldr	r2, [pc, #144]	@ (8009aec <HAL_DMA_Init+0x42c>)
 8009a5c:	4293      	cmp	r3, r2
 8009a5e:	d021      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	4a22      	ldr	r2, [pc, #136]	@ (8009af0 <HAL_DMA_Init+0x430>)
 8009a66:	4293      	cmp	r3, r2
 8009a68:	d01c      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a6a:	687b      	ldr	r3, [r7, #4]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	4a21      	ldr	r2, [pc, #132]	@ (8009af4 <HAL_DMA_Init+0x434>)
 8009a70:	4293      	cmp	r3, r2
 8009a72:	d017      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	681b      	ldr	r3, [r3, #0]
 8009a78:	4a1f      	ldr	r2, [pc, #124]	@ (8009af8 <HAL_DMA_Init+0x438>)
 8009a7a:	4293      	cmp	r3, r2
 8009a7c:	d012      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	4a1e      	ldr	r2, [pc, #120]	@ (8009afc <HAL_DMA_Init+0x43c>)
 8009a84:	4293      	cmp	r3, r2
 8009a86:	d00d      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	4a1c      	ldr	r2, [pc, #112]	@ (8009b00 <HAL_DMA_Init+0x440>)
 8009a8e:	4293      	cmp	r3, r2
 8009a90:	d008      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	4a1b      	ldr	r2, [pc, #108]	@ (8009b04 <HAL_DMA_Init+0x444>)
 8009a98:	4293      	cmp	r3, r2
 8009a9a:	d003      	beq.n	8009aa4 <HAL_DMA_Init+0x3e4>
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	4a19      	ldr	r2, [pc, #100]	@ (8009b08 <HAL_DMA_Init+0x448>)
 8009aa2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	2202      	movs	r2, #2
 8009aa8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8009aac:	687b      	ldr	r3, [r7, #4]
 8009aae:	2200      	movs	r2, #0
 8009ab0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 8009ab4:	687b      	ldr	r3, [r7, #4]
 8009ab6:	681b      	ldr	r3, [r3, #0]
 8009ab8:	681b      	ldr	r3, [r3, #0]
 8009aba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 8009abc:	697a      	ldr	r2, [r7, #20]
 8009abe:	4b13      	ldr	r3, [pc, #76]	@ (8009b0c <HAL_DMA_Init+0x44c>)
 8009ac0:	4013      	ands	r3, r2
 8009ac2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	689b      	ldr	r3, [r3, #8]
 8009ac8:	2b40      	cmp	r3, #64	@ 0x40
 8009aca:	d021      	beq.n	8009b10 <HAL_DMA_Init+0x450>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	689b      	ldr	r3, [r3, #8]
 8009ad0:	2b80      	cmp	r3, #128	@ 0x80
 8009ad2:	d102      	bne.n	8009ada <HAL_DMA_Init+0x41a>
 8009ad4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8009ad8:	e01b      	b.n	8009b12 <HAL_DMA_Init+0x452>
 8009ada:	2300      	movs	r3, #0
 8009adc:	e019      	b.n	8009b12 <HAL_DMA_Init+0x452>
 8009ade:	bf00      	nop
 8009ae0:	fe10803f 	.word	0xfe10803f
 8009ae4:	5c001000 	.word	0x5c001000
 8009ae8:	ffff0000 	.word	0xffff0000
 8009aec:	58025408 	.word	0x58025408
 8009af0:	5802541c 	.word	0x5802541c
 8009af4:	58025430 	.word	0x58025430
 8009af8:	58025444 	.word	0x58025444
 8009afc:	58025458 	.word	0x58025458
 8009b00:	5802546c 	.word	0x5802546c
 8009b04:	58025480 	.word	0x58025480
 8009b08:	58025494 	.word	0x58025494
 8009b0c:	fffe000f 	.word	0xfffe000f
 8009b10:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009b12:	687a      	ldr	r2, [r7, #4]
 8009b14:	68d2      	ldr	r2, [r2, #12]
 8009b16:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009b18:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009b1a:	687b      	ldr	r3, [r7, #4]
 8009b1c:	691b      	ldr	r3, [r3, #16]
 8009b1e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8009b20:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009b22:	687b      	ldr	r3, [r7, #4]
 8009b24:	695b      	ldr	r3, [r3, #20]
 8009b26:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8009b28:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009b2a:	687b      	ldr	r3, [r7, #4]
 8009b2c:	699b      	ldr	r3, [r3, #24]
 8009b2e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8009b30:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	69db      	ldr	r3, [r3, #28]
 8009b36:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8009b38:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	6a1b      	ldr	r3, [r3, #32]
 8009b3e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8009b40:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8009b42:	697a      	ldr	r2, [r7, #20]
 8009b44:	4313      	orrs	r3, r2
 8009b46:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	697a      	ldr	r2, [r7, #20]
 8009b4e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	681b      	ldr	r3, [r3, #0]
 8009b54:	461a      	mov	r2, r3
 8009b56:	4b6e      	ldr	r3, [pc, #440]	@ (8009d10 <HAL_DMA_Init+0x650>)
 8009b58:	4413      	add	r3, r2
 8009b5a:	4a6e      	ldr	r2, [pc, #440]	@ (8009d14 <HAL_DMA_Init+0x654>)
 8009b5c:	fba2 2303 	umull	r2, r3, r2, r3
 8009b60:	091b      	lsrs	r3, r3, #4
 8009b62:	009a      	lsls	r2, r3, #2
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009b68:	6878      	ldr	r0, [r7, #4]
 8009b6a:	f002 fb6b 	bl	800c244 <DMA_CalcBaseAndBitshift>
 8009b6e:	4603      	mov	r3, r0
 8009b70:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	2201      	movs	r2, #1
 8009b7c:	409a      	lsls	r2, r3
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	605a      	str	r2, [r3, #4]
 8009b82:	e008      	b.n	8009b96 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009b84:	687b      	ldr	r3, [r7, #4]
 8009b86:	2240      	movs	r2, #64	@ 0x40
 8009b88:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	2203      	movs	r2, #3
 8009b8e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8009b92:	2301      	movs	r3, #1
 8009b94:	e0b7      	b.n	8009d06 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	4a5f      	ldr	r2, [pc, #380]	@ (8009d18 <HAL_DMA_Init+0x658>)
 8009b9c:	4293      	cmp	r3, r2
 8009b9e:	d072      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	4a5d      	ldr	r2, [pc, #372]	@ (8009d1c <HAL_DMA_Init+0x65c>)
 8009ba6:	4293      	cmp	r3, r2
 8009ba8:	d06d      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	4a5c      	ldr	r2, [pc, #368]	@ (8009d20 <HAL_DMA_Init+0x660>)
 8009bb0:	4293      	cmp	r3, r2
 8009bb2:	d068      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	681b      	ldr	r3, [r3, #0]
 8009bb8:	4a5a      	ldr	r2, [pc, #360]	@ (8009d24 <HAL_DMA_Init+0x664>)
 8009bba:	4293      	cmp	r3, r2
 8009bbc:	d063      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	681b      	ldr	r3, [r3, #0]
 8009bc2:	4a59      	ldr	r2, [pc, #356]	@ (8009d28 <HAL_DMA_Init+0x668>)
 8009bc4:	4293      	cmp	r3, r2
 8009bc6:	d05e      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	4a57      	ldr	r2, [pc, #348]	@ (8009d2c <HAL_DMA_Init+0x66c>)
 8009bce:	4293      	cmp	r3, r2
 8009bd0:	d059      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	4a56      	ldr	r2, [pc, #344]	@ (8009d30 <HAL_DMA_Init+0x670>)
 8009bd8:	4293      	cmp	r3, r2
 8009bda:	d054      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	681b      	ldr	r3, [r3, #0]
 8009be0:	4a54      	ldr	r2, [pc, #336]	@ (8009d34 <HAL_DMA_Init+0x674>)
 8009be2:	4293      	cmp	r3, r2
 8009be4:	d04f      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	681b      	ldr	r3, [r3, #0]
 8009bea:	4a53      	ldr	r2, [pc, #332]	@ (8009d38 <HAL_DMA_Init+0x678>)
 8009bec:	4293      	cmp	r3, r2
 8009bee:	d04a      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	4a51      	ldr	r2, [pc, #324]	@ (8009d3c <HAL_DMA_Init+0x67c>)
 8009bf6:	4293      	cmp	r3, r2
 8009bf8:	d045      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	4a50      	ldr	r2, [pc, #320]	@ (8009d40 <HAL_DMA_Init+0x680>)
 8009c00:	4293      	cmp	r3, r2
 8009c02:	d040      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	681b      	ldr	r3, [r3, #0]
 8009c08:	4a4e      	ldr	r2, [pc, #312]	@ (8009d44 <HAL_DMA_Init+0x684>)
 8009c0a:	4293      	cmp	r3, r2
 8009c0c:	d03b      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c0e:	687b      	ldr	r3, [r7, #4]
 8009c10:	681b      	ldr	r3, [r3, #0]
 8009c12:	4a4d      	ldr	r2, [pc, #308]	@ (8009d48 <HAL_DMA_Init+0x688>)
 8009c14:	4293      	cmp	r3, r2
 8009c16:	d036      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	681b      	ldr	r3, [r3, #0]
 8009c1c:	4a4b      	ldr	r2, [pc, #300]	@ (8009d4c <HAL_DMA_Init+0x68c>)
 8009c1e:	4293      	cmp	r3, r2
 8009c20:	d031      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c22:	687b      	ldr	r3, [r7, #4]
 8009c24:	681b      	ldr	r3, [r3, #0]
 8009c26:	4a4a      	ldr	r2, [pc, #296]	@ (8009d50 <HAL_DMA_Init+0x690>)
 8009c28:	4293      	cmp	r3, r2
 8009c2a:	d02c      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c2c:	687b      	ldr	r3, [r7, #4]
 8009c2e:	681b      	ldr	r3, [r3, #0]
 8009c30:	4a48      	ldr	r2, [pc, #288]	@ (8009d54 <HAL_DMA_Init+0x694>)
 8009c32:	4293      	cmp	r3, r2
 8009c34:	d027      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	681b      	ldr	r3, [r3, #0]
 8009c3a:	4a47      	ldr	r2, [pc, #284]	@ (8009d58 <HAL_DMA_Init+0x698>)
 8009c3c:	4293      	cmp	r3, r2
 8009c3e:	d022      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c40:	687b      	ldr	r3, [r7, #4]
 8009c42:	681b      	ldr	r3, [r3, #0]
 8009c44:	4a45      	ldr	r2, [pc, #276]	@ (8009d5c <HAL_DMA_Init+0x69c>)
 8009c46:	4293      	cmp	r3, r2
 8009c48:	d01d      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c4a:	687b      	ldr	r3, [r7, #4]
 8009c4c:	681b      	ldr	r3, [r3, #0]
 8009c4e:	4a44      	ldr	r2, [pc, #272]	@ (8009d60 <HAL_DMA_Init+0x6a0>)
 8009c50:	4293      	cmp	r3, r2
 8009c52:	d018      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	681b      	ldr	r3, [r3, #0]
 8009c58:	4a42      	ldr	r2, [pc, #264]	@ (8009d64 <HAL_DMA_Init+0x6a4>)
 8009c5a:	4293      	cmp	r3, r2
 8009c5c:	d013      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c5e:	687b      	ldr	r3, [r7, #4]
 8009c60:	681b      	ldr	r3, [r3, #0]
 8009c62:	4a41      	ldr	r2, [pc, #260]	@ (8009d68 <HAL_DMA_Init+0x6a8>)
 8009c64:	4293      	cmp	r3, r2
 8009c66:	d00e      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c68:	687b      	ldr	r3, [r7, #4]
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	4a3f      	ldr	r2, [pc, #252]	@ (8009d6c <HAL_DMA_Init+0x6ac>)
 8009c6e:	4293      	cmp	r3, r2
 8009c70:	d009      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	681b      	ldr	r3, [r3, #0]
 8009c76:	4a3e      	ldr	r2, [pc, #248]	@ (8009d70 <HAL_DMA_Init+0x6b0>)
 8009c78:	4293      	cmp	r3, r2
 8009c7a:	d004      	beq.n	8009c86 <HAL_DMA_Init+0x5c6>
 8009c7c:	687b      	ldr	r3, [r7, #4]
 8009c7e:	681b      	ldr	r3, [r3, #0]
 8009c80:	4a3c      	ldr	r2, [pc, #240]	@ (8009d74 <HAL_DMA_Init+0x6b4>)
 8009c82:	4293      	cmp	r3, r2
 8009c84:	d101      	bne.n	8009c8a <HAL_DMA_Init+0x5ca>
 8009c86:	2301      	movs	r3, #1
 8009c88:	e000      	b.n	8009c8c <HAL_DMA_Init+0x5cc>
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	2b00      	cmp	r3, #0
 8009c8e:	d032      	beq.n	8009cf6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8009c90:	6878      	ldr	r0, [r7, #4]
 8009c92:	f002 fc05 	bl	800c4a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	689b      	ldr	r3, [r3, #8]
 8009c9a:	2b80      	cmp	r3, #128	@ 0x80
 8009c9c:	d102      	bne.n	8009ca4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8009c9e:	687b      	ldr	r3, [r7, #4]
 8009ca0:	2200      	movs	r2, #0
 8009ca2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	685a      	ldr	r2, [r3, #4]
 8009ca8:	687b      	ldr	r3, [r7, #4]
 8009caa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009cac:	b2d2      	uxtb	r2, r2
 8009cae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8009cb4:	687a      	ldr	r2, [r7, #4]
 8009cb6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8009cb8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8009cba:	687b      	ldr	r3, [r7, #4]
 8009cbc:	685b      	ldr	r3, [r3, #4]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d010      	beq.n	8009ce4 <HAL_DMA_Init+0x624>
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	685b      	ldr	r3, [r3, #4]
 8009cc6:	2b08      	cmp	r3, #8
 8009cc8:	d80c      	bhi.n	8009ce4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8009cca:	6878      	ldr	r0, [r7, #4]
 8009ccc:	f002 fc82 	bl	800c5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009cd4:	2200      	movs	r2, #0
 8009cd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8009cd8:	687b      	ldr	r3, [r7, #4]
 8009cda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8009cdc:	687a      	ldr	r2, [r7, #4]
 8009cde:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8009ce0:	605a      	str	r2, [r3, #4]
 8009ce2:	e008      	b.n	8009cf6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 8009ce4:	687b      	ldr	r3, [r7, #4]
 8009ce6:	2200      	movs	r2, #0
 8009ce8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 8009cea:	687b      	ldr	r3, [r7, #4]
 8009cec:	2200      	movs	r2, #0
 8009cee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 8009cf0:	687b      	ldr	r3, [r7, #4]
 8009cf2:	2200      	movs	r2, #0
 8009cf4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	2200      	movs	r2, #0
 8009cfa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8009d04:	2300      	movs	r3, #0
}
 8009d06:	4618      	mov	r0, r3
 8009d08:	3718      	adds	r7, #24
 8009d0a:	46bd      	mov	sp, r7
 8009d0c:	bd80      	pop	{r7, pc}
 8009d0e:	bf00      	nop
 8009d10:	a7fdabf8 	.word	0xa7fdabf8
 8009d14:	cccccccd 	.word	0xcccccccd
 8009d18:	40020010 	.word	0x40020010
 8009d1c:	40020028 	.word	0x40020028
 8009d20:	40020040 	.word	0x40020040
 8009d24:	40020058 	.word	0x40020058
 8009d28:	40020070 	.word	0x40020070
 8009d2c:	40020088 	.word	0x40020088
 8009d30:	400200a0 	.word	0x400200a0
 8009d34:	400200b8 	.word	0x400200b8
 8009d38:	40020410 	.word	0x40020410
 8009d3c:	40020428 	.word	0x40020428
 8009d40:	40020440 	.word	0x40020440
 8009d44:	40020458 	.word	0x40020458
 8009d48:	40020470 	.word	0x40020470
 8009d4c:	40020488 	.word	0x40020488
 8009d50:	400204a0 	.word	0x400204a0
 8009d54:	400204b8 	.word	0x400204b8
 8009d58:	58025408 	.word	0x58025408
 8009d5c:	5802541c 	.word	0x5802541c
 8009d60:	58025430 	.word	0x58025430
 8009d64:	58025444 	.word	0x58025444
 8009d68:	58025458 	.word	0x58025458
 8009d6c:	5802546c 	.word	0x5802546c
 8009d70:	58025480 	.word	0x58025480
 8009d74:	58025494 	.word	0x58025494

08009d78 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8009d78:	b580      	push	{r7, lr}
 8009d7a:	b084      	sub	sp, #16
 8009d7c:	af00      	add	r7, sp, #0
 8009d7e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8009d80:	687b      	ldr	r3, [r7, #4]
 8009d82:	2b00      	cmp	r3, #0
 8009d84:	d101      	bne.n	8009d8a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8009d86:	2301      	movs	r3, #1
 8009d88:	e1a8      	b.n	800a0dc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8009d8a:	687b      	ldr	r3, [r7, #4]
 8009d8c:	681b      	ldr	r3, [r3, #0]
 8009d8e:	4a82      	ldr	r2, [pc, #520]	@ (8009f98 <HAL_DMA_DeInit+0x220>)
 8009d90:	4293      	cmp	r3, r2
 8009d92:	d04a      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	681b      	ldr	r3, [r3, #0]
 8009d98:	4a80      	ldr	r2, [pc, #512]	@ (8009f9c <HAL_DMA_DeInit+0x224>)
 8009d9a:	4293      	cmp	r3, r2
 8009d9c:	d045      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009d9e:	687b      	ldr	r3, [r7, #4]
 8009da0:	681b      	ldr	r3, [r3, #0]
 8009da2:	4a7f      	ldr	r2, [pc, #508]	@ (8009fa0 <HAL_DMA_DeInit+0x228>)
 8009da4:	4293      	cmp	r3, r2
 8009da6:	d040      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009da8:	687b      	ldr	r3, [r7, #4]
 8009daa:	681b      	ldr	r3, [r3, #0]
 8009dac:	4a7d      	ldr	r2, [pc, #500]	@ (8009fa4 <HAL_DMA_DeInit+0x22c>)
 8009dae:	4293      	cmp	r3, r2
 8009db0:	d03b      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009db2:	687b      	ldr	r3, [r7, #4]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	4a7c      	ldr	r2, [pc, #496]	@ (8009fa8 <HAL_DMA_DeInit+0x230>)
 8009db8:	4293      	cmp	r3, r2
 8009dba:	d036      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	4a7a      	ldr	r2, [pc, #488]	@ (8009fac <HAL_DMA_DeInit+0x234>)
 8009dc2:	4293      	cmp	r3, r2
 8009dc4:	d031      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009dc6:	687b      	ldr	r3, [r7, #4]
 8009dc8:	681b      	ldr	r3, [r3, #0]
 8009dca:	4a79      	ldr	r2, [pc, #484]	@ (8009fb0 <HAL_DMA_DeInit+0x238>)
 8009dcc:	4293      	cmp	r3, r2
 8009dce:	d02c      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009dd0:	687b      	ldr	r3, [r7, #4]
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a77      	ldr	r2, [pc, #476]	@ (8009fb4 <HAL_DMA_DeInit+0x23c>)
 8009dd6:	4293      	cmp	r3, r2
 8009dd8:	d027      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009dda:	687b      	ldr	r3, [r7, #4]
 8009ddc:	681b      	ldr	r3, [r3, #0]
 8009dde:	4a76      	ldr	r2, [pc, #472]	@ (8009fb8 <HAL_DMA_DeInit+0x240>)
 8009de0:	4293      	cmp	r3, r2
 8009de2:	d022      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009de4:	687b      	ldr	r3, [r7, #4]
 8009de6:	681b      	ldr	r3, [r3, #0]
 8009de8:	4a74      	ldr	r2, [pc, #464]	@ (8009fbc <HAL_DMA_DeInit+0x244>)
 8009dea:	4293      	cmp	r3, r2
 8009dec:	d01d      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009dee:	687b      	ldr	r3, [r7, #4]
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	4a73      	ldr	r2, [pc, #460]	@ (8009fc0 <HAL_DMA_DeInit+0x248>)
 8009df4:	4293      	cmp	r3, r2
 8009df6:	d018      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	681b      	ldr	r3, [r3, #0]
 8009dfc:	4a71      	ldr	r2, [pc, #452]	@ (8009fc4 <HAL_DMA_DeInit+0x24c>)
 8009dfe:	4293      	cmp	r3, r2
 8009e00:	d013      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	681b      	ldr	r3, [r3, #0]
 8009e06:	4a70      	ldr	r2, [pc, #448]	@ (8009fc8 <HAL_DMA_DeInit+0x250>)
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	d00e      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	4a6e      	ldr	r2, [pc, #440]	@ (8009fcc <HAL_DMA_DeInit+0x254>)
 8009e12:	4293      	cmp	r3, r2
 8009e14:	d009      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009e16:	687b      	ldr	r3, [r7, #4]
 8009e18:	681b      	ldr	r3, [r3, #0]
 8009e1a:	4a6d      	ldr	r2, [pc, #436]	@ (8009fd0 <HAL_DMA_DeInit+0x258>)
 8009e1c:	4293      	cmp	r3, r2
 8009e1e:	d004      	beq.n	8009e2a <HAL_DMA_DeInit+0xb2>
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	4a6b      	ldr	r2, [pc, #428]	@ (8009fd4 <HAL_DMA_DeInit+0x25c>)
 8009e26:	4293      	cmp	r3, r2
 8009e28:	d108      	bne.n	8009e3c <HAL_DMA_DeInit+0xc4>
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	687b      	ldr	r3, [r7, #4]
 8009e32:	681b      	ldr	r3, [r3, #0]
 8009e34:	f022 0201 	bic.w	r2, r2, #1
 8009e38:	601a      	str	r2, [r3, #0]
 8009e3a:	e007      	b.n	8009e4c <HAL_DMA_DeInit+0xd4>
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	681b      	ldr	r3, [r3, #0]
 8009e40:	681a      	ldr	r2, [r3, #0]
 8009e42:	687b      	ldr	r3, [r7, #4]
 8009e44:	681b      	ldr	r3, [r3, #0]
 8009e46:	f022 0201 	bic.w	r2, r2, #1
 8009e4a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8009e4c:	687b      	ldr	r3, [r7, #4]
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	4a51      	ldr	r2, [pc, #324]	@ (8009f98 <HAL_DMA_DeInit+0x220>)
 8009e52:	4293      	cmp	r3, r2
 8009e54:	d04a      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	681b      	ldr	r3, [r3, #0]
 8009e5a:	4a50      	ldr	r2, [pc, #320]	@ (8009f9c <HAL_DMA_DeInit+0x224>)
 8009e5c:	4293      	cmp	r3, r2
 8009e5e:	d045      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e60:	687b      	ldr	r3, [r7, #4]
 8009e62:	681b      	ldr	r3, [r3, #0]
 8009e64:	4a4e      	ldr	r2, [pc, #312]	@ (8009fa0 <HAL_DMA_DeInit+0x228>)
 8009e66:	4293      	cmp	r3, r2
 8009e68:	d040      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	681b      	ldr	r3, [r3, #0]
 8009e6e:	4a4d      	ldr	r2, [pc, #308]	@ (8009fa4 <HAL_DMA_DeInit+0x22c>)
 8009e70:	4293      	cmp	r3, r2
 8009e72:	d03b      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	681b      	ldr	r3, [r3, #0]
 8009e78:	4a4b      	ldr	r2, [pc, #300]	@ (8009fa8 <HAL_DMA_DeInit+0x230>)
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	d036      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	4a4a      	ldr	r2, [pc, #296]	@ (8009fac <HAL_DMA_DeInit+0x234>)
 8009e84:	4293      	cmp	r3, r2
 8009e86:	d031      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e88:	687b      	ldr	r3, [r7, #4]
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4a48      	ldr	r2, [pc, #288]	@ (8009fb0 <HAL_DMA_DeInit+0x238>)
 8009e8e:	4293      	cmp	r3, r2
 8009e90:	d02c      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	681b      	ldr	r3, [r3, #0]
 8009e96:	4a47      	ldr	r2, [pc, #284]	@ (8009fb4 <HAL_DMA_DeInit+0x23c>)
 8009e98:	4293      	cmp	r3, r2
 8009e9a:	d027      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009e9c:	687b      	ldr	r3, [r7, #4]
 8009e9e:	681b      	ldr	r3, [r3, #0]
 8009ea0:	4a45      	ldr	r2, [pc, #276]	@ (8009fb8 <HAL_DMA_DeInit+0x240>)
 8009ea2:	4293      	cmp	r3, r2
 8009ea4:	d022      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	4a44      	ldr	r2, [pc, #272]	@ (8009fbc <HAL_DMA_DeInit+0x244>)
 8009eac:	4293      	cmp	r3, r2
 8009eae:	d01d      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	681b      	ldr	r3, [r3, #0]
 8009eb4:	4a42      	ldr	r2, [pc, #264]	@ (8009fc0 <HAL_DMA_DeInit+0x248>)
 8009eb6:	4293      	cmp	r3, r2
 8009eb8:	d018      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009eba:	687b      	ldr	r3, [r7, #4]
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	4a41      	ldr	r2, [pc, #260]	@ (8009fc4 <HAL_DMA_DeInit+0x24c>)
 8009ec0:	4293      	cmp	r3, r2
 8009ec2:	d013      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	681b      	ldr	r3, [r3, #0]
 8009ec8:	4a3f      	ldr	r2, [pc, #252]	@ (8009fc8 <HAL_DMA_DeInit+0x250>)
 8009eca:	4293      	cmp	r3, r2
 8009ecc:	d00e      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	4a3e      	ldr	r2, [pc, #248]	@ (8009fcc <HAL_DMA_DeInit+0x254>)
 8009ed4:	4293      	cmp	r3, r2
 8009ed6:	d009      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009ed8:	687b      	ldr	r3, [r7, #4]
 8009eda:	681b      	ldr	r3, [r3, #0]
 8009edc:	4a3c      	ldr	r2, [pc, #240]	@ (8009fd0 <HAL_DMA_DeInit+0x258>)
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	d004      	beq.n	8009eec <HAL_DMA_DeInit+0x174>
 8009ee2:	687b      	ldr	r3, [r7, #4]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	4a3b      	ldr	r2, [pc, #236]	@ (8009fd4 <HAL_DMA_DeInit+0x25c>)
 8009ee8:	4293      	cmp	r3, r2
 8009eea:	d101      	bne.n	8009ef0 <HAL_DMA_DeInit+0x178>
 8009eec:	2301      	movs	r3, #1
 8009eee:	e000      	b.n	8009ef2 <HAL_DMA_DeInit+0x17a>
 8009ef0:	2300      	movs	r3, #0
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d025      	beq.n	8009f42 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8009ef6:	687b      	ldr	r3, [r7, #4]
 8009ef8:	681b      	ldr	r3, [r3, #0]
 8009efa:	2200      	movs	r2, #0
 8009efc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	2200      	movs	r2, #0
 8009f04:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8009f06:	687b      	ldr	r3, [r7, #4]
 8009f08:	681b      	ldr	r3, [r3, #0]
 8009f0a:	2200      	movs	r2, #0
 8009f0c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8009f0e:	687b      	ldr	r3, [r7, #4]
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2200      	movs	r2, #0
 8009f14:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	2200      	movs	r2, #0
 8009f1c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	681b      	ldr	r3, [r3, #0]
 8009f22:	2221      	movs	r2, #33	@ 0x21
 8009f24:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8009f26:	6878      	ldr	r0, [r7, #4]
 8009f28:	f002 f98c 	bl	800c244 <DMA_CalcBaseAndBitshift>
 8009f2c:	4603      	mov	r3, r0
 8009f2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f34:	f003 031f 	and.w	r3, r3, #31
 8009f38:	223f      	movs	r2, #63	@ 0x3f
 8009f3a:	409a      	lsls	r2, r3
 8009f3c:	68bb      	ldr	r3, [r7, #8]
 8009f3e:	609a      	str	r2, [r3, #8]
 8009f40:	e081      	b.n	800a046 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8009f42:	687b      	ldr	r3, [r7, #4]
 8009f44:	681b      	ldr	r3, [r3, #0]
 8009f46:	4a24      	ldr	r2, [pc, #144]	@ (8009fd8 <HAL_DMA_DeInit+0x260>)
 8009f48:	4293      	cmp	r3, r2
 8009f4a:	d022      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f4c:	687b      	ldr	r3, [r7, #4]
 8009f4e:	681b      	ldr	r3, [r3, #0]
 8009f50:	4a22      	ldr	r2, [pc, #136]	@ (8009fdc <HAL_DMA_DeInit+0x264>)
 8009f52:	4293      	cmp	r3, r2
 8009f54:	d01d      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f56:	687b      	ldr	r3, [r7, #4]
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	4a21      	ldr	r2, [pc, #132]	@ (8009fe0 <HAL_DMA_DeInit+0x268>)
 8009f5c:	4293      	cmp	r3, r2
 8009f5e:	d018      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	4a1f      	ldr	r2, [pc, #124]	@ (8009fe4 <HAL_DMA_DeInit+0x26c>)
 8009f66:	4293      	cmp	r3, r2
 8009f68:	d013      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	681b      	ldr	r3, [r3, #0]
 8009f6e:	4a1e      	ldr	r2, [pc, #120]	@ (8009fe8 <HAL_DMA_DeInit+0x270>)
 8009f70:	4293      	cmp	r3, r2
 8009f72:	d00e      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	4a1c      	ldr	r2, [pc, #112]	@ (8009fec <HAL_DMA_DeInit+0x274>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d009      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f7e:	687b      	ldr	r3, [r7, #4]
 8009f80:	681b      	ldr	r3, [r3, #0]
 8009f82:	4a1b      	ldr	r2, [pc, #108]	@ (8009ff0 <HAL_DMA_DeInit+0x278>)
 8009f84:	4293      	cmp	r3, r2
 8009f86:	d004      	beq.n	8009f92 <HAL_DMA_DeInit+0x21a>
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	681b      	ldr	r3, [r3, #0]
 8009f8c:	4a19      	ldr	r2, [pc, #100]	@ (8009ff4 <HAL_DMA_DeInit+0x27c>)
 8009f8e:	4293      	cmp	r3, r2
 8009f90:	d132      	bne.n	8009ff8 <HAL_DMA_DeInit+0x280>
 8009f92:	2301      	movs	r3, #1
 8009f94:	e031      	b.n	8009ffa <HAL_DMA_DeInit+0x282>
 8009f96:	bf00      	nop
 8009f98:	40020010 	.word	0x40020010
 8009f9c:	40020028 	.word	0x40020028
 8009fa0:	40020040 	.word	0x40020040
 8009fa4:	40020058 	.word	0x40020058
 8009fa8:	40020070 	.word	0x40020070
 8009fac:	40020088 	.word	0x40020088
 8009fb0:	400200a0 	.word	0x400200a0
 8009fb4:	400200b8 	.word	0x400200b8
 8009fb8:	40020410 	.word	0x40020410
 8009fbc:	40020428 	.word	0x40020428
 8009fc0:	40020440 	.word	0x40020440
 8009fc4:	40020458 	.word	0x40020458
 8009fc8:	40020470 	.word	0x40020470
 8009fcc:	40020488 	.word	0x40020488
 8009fd0:	400204a0 	.word	0x400204a0
 8009fd4:	400204b8 	.word	0x400204b8
 8009fd8:	58025408 	.word	0x58025408
 8009fdc:	5802541c 	.word	0x5802541c
 8009fe0:	58025430 	.word	0x58025430
 8009fe4:	58025444 	.word	0x58025444
 8009fe8:	58025458 	.word	0x58025458
 8009fec:	5802546c 	.word	0x5802546c
 8009ff0:	58025480 	.word	0x58025480
 8009ff4:	58025494 	.word	0x58025494
 8009ff8:	2300      	movs	r3, #0
 8009ffa:	2b00      	cmp	r3, #0
 8009ffc:	d021      	beq.n	800a042 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8009ffe:	687b      	ldr	r3, [r7, #4]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	2200      	movs	r2, #0
 800a004:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	2200      	movs	r2, #0
 800a00c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	2200      	movs	r2, #0
 800a014:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	681b      	ldr	r3, [r3, #0]
 800a01a:	2200      	movs	r2, #0
 800a01c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 800a01e:	687b      	ldr	r3, [r7, #4]
 800a020:	681b      	ldr	r3, [r3, #0]
 800a022:	2200      	movs	r2, #0
 800a024:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f002 f90c 	bl	800c244 <DMA_CalcBaseAndBitshift>
 800a02c:	4603      	mov	r3, r0
 800a02e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800a030:	687b      	ldr	r3, [r7, #4]
 800a032:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a034:	f003 031f 	and.w	r3, r3, #31
 800a038:	2201      	movs	r2, #1
 800a03a:	409a      	lsls	r2, r3
 800a03c:	68fb      	ldr	r3, [r7, #12]
 800a03e:	605a      	str	r2, [r3, #4]
 800a040:	e001      	b.n	800a046 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 800a042:	2301      	movs	r3, #1
 800a044:	e04a      	b.n	800a0dc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f002 fa2a 	bl	800c4a0 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a050:	2b00      	cmp	r3, #0
 800a052:	d008      	beq.n	800a066 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a058:	2200      	movs	r2, #0
 800a05a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a060:	687a      	ldr	r2, [r7, #4]
 800a062:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a064:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 800a066:	687b      	ldr	r3, [r7, #4]
 800a068:	685b      	ldr	r3, [r3, #4]
 800a06a:	2b00      	cmp	r3, #0
 800a06c:	d00f      	beq.n	800a08e <HAL_DMA_DeInit+0x316>
 800a06e:	687b      	ldr	r3, [r7, #4]
 800a070:	685b      	ldr	r3, [r3, #4]
 800a072:	2b08      	cmp	r3, #8
 800a074:	d80b      	bhi.n	800a08e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800a076:	6878      	ldr	r0, [r7, #4]
 800a078:	f002 faac 	bl	800c5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a080:	2200      	movs	r2, #0
 800a082:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a088:	687a      	ldr	r2, [r7, #4]
 800a08a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a08c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2200      	movs	r2, #0
 800a092:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 800a0a6:	687b      	ldr	r3, [r7, #4]
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 800a0ac:	687b      	ldr	r3, [r7, #4]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 800a0b2:	687b      	ldr	r3, [r7, #4]
 800a0b4:	2200      	movs	r2, #0
 800a0b6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 800a0b8:	687b      	ldr	r3, [r7, #4]
 800a0ba:	2200      	movs	r2, #0
 800a0bc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 800a0be:	687b      	ldr	r3, [r7, #4]
 800a0c0:	2200      	movs	r2, #0
 800a0c2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a0c4:	687b      	ldr	r3, [r7, #4]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 800a0d2:	687b      	ldr	r3, [r7, #4]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800a0da:	2300      	movs	r3, #0
}
 800a0dc:	4618      	mov	r0, r3
 800a0de:	3710      	adds	r7, #16
 800a0e0:	46bd      	mov	sp, r7
 800a0e2:	bd80      	pop	{r7, pc}

0800a0e4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a0e4:	b580      	push	{r7, lr}
 800a0e6:	b086      	sub	sp, #24
 800a0e8:	af00      	add	r7, sp, #0
 800a0ea:	60f8      	str	r0, [r7, #12]
 800a0ec:	60b9      	str	r1, [r7, #8]
 800a0ee:	607a      	str	r2, [r7, #4]
 800a0f0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800a0f2:	2300      	movs	r3, #0
 800a0f4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a0f6:	68fb      	ldr	r3, [r7, #12]
 800a0f8:	2b00      	cmp	r3, #0
 800a0fa:	d101      	bne.n	800a100 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 800a0fc:	2301      	movs	r3, #1
 800a0fe:	e226      	b.n	800a54e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 800a100:	68fb      	ldr	r3, [r7, #12]
 800a102:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a106:	2b01      	cmp	r3, #1
 800a108:	d101      	bne.n	800a10e <HAL_DMA_Start_IT+0x2a>
 800a10a:	2302      	movs	r3, #2
 800a10c:	e21f      	b.n	800a54e <HAL_DMA_Start_IT+0x46a>
 800a10e:	68fb      	ldr	r3, [r7, #12]
 800a110:	2201      	movs	r2, #1
 800a112:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a11c:	b2db      	uxtb	r3, r3
 800a11e:	2b01      	cmp	r3, #1
 800a120:	f040 820a 	bne.w	800a538 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	2202      	movs	r2, #2
 800a128:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800a12c:	68fb      	ldr	r3, [r7, #12]
 800a12e:	2200      	movs	r2, #0
 800a130:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	4a68      	ldr	r2, [pc, #416]	@ (800a2d8 <HAL_DMA_Start_IT+0x1f4>)
 800a138:	4293      	cmp	r3, r2
 800a13a:	d04a      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a13c:	68fb      	ldr	r3, [r7, #12]
 800a13e:	681b      	ldr	r3, [r3, #0]
 800a140:	4a66      	ldr	r2, [pc, #408]	@ (800a2dc <HAL_DMA_Start_IT+0x1f8>)
 800a142:	4293      	cmp	r3, r2
 800a144:	d045      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a146:	68fb      	ldr	r3, [r7, #12]
 800a148:	681b      	ldr	r3, [r3, #0]
 800a14a:	4a65      	ldr	r2, [pc, #404]	@ (800a2e0 <HAL_DMA_Start_IT+0x1fc>)
 800a14c:	4293      	cmp	r3, r2
 800a14e:	d040      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a150:	68fb      	ldr	r3, [r7, #12]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	4a63      	ldr	r2, [pc, #396]	@ (800a2e4 <HAL_DMA_Start_IT+0x200>)
 800a156:	4293      	cmp	r3, r2
 800a158:	d03b      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a15a:	68fb      	ldr	r3, [r7, #12]
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	4a62      	ldr	r2, [pc, #392]	@ (800a2e8 <HAL_DMA_Start_IT+0x204>)
 800a160:	4293      	cmp	r3, r2
 800a162:	d036      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	4a60      	ldr	r2, [pc, #384]	@ (800a2ec <HAL_DMA_Start_IT+0x208>)
 800a16a:	4293      	cmp	r3, r2
 800a16c:	d031      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	681b      	ldr	r3, [r3, #0]
 800a172:	4a5f      	ldr	r2, [pc, #380]	@ (800a2f0 <HAL_DMA_Start_IT+0x20c>)
 800a174:	4293      	cmp	r3, r2
 800a176:	d02c      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a178:	68fb      	ldr	r3, [r7, #12]
 800a17a:	681b      	ldr	r3, [r3, #0]
 800a17c:	4a5d      	ldr	r2, [pc, #372]	@ (800a2f4 <HAL_DMA_Start_IT+0x210>)
 800a17e:	4293      	cmp	r3, r2
 800a180:	d027      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	681b      	ldr	r3, [r3, #0]
 800a186:	4a5c      	ldr	r2, [pc, #368]	@ (800a2f8 <HAL_DMA_Start_IT+0x214>)
 800a188:	4293      	cmp	r3, r2
 800a18a:	d022      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	4a5a      	ldr	r2, [pc, #360]	@ (800a2fc <HAL_DMA_Start_IT+0x218>)
 800a192:	4293      	cmp	r3, r2
 800a194:	d01d      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a196:	68fb      	ldr	r3, [r7, #12]
 800a198:	681b      	ldr	r3, [r3, #0]
 800a19a:	4a59      	ldr	r2, [pc, #356]	@ (800a300 <HAL_DMA_Start_IT+0x21c>)
 800a19c:	4293      	cmp	r3, r2
 800a19e:	d018      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a1a0:	68fb      	ldr	r3, [r7, #12]
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	4a57      	ldr	r2, [pc, #348]	@ (800a304 <HAL_DMA_Start_IT+0x220>)
 800a1a6:	4293      	cmp	r3, r2
 800a1a8:	d013      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a1aa:	68fb      	ldr	r3, [r7, #12]
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	4a56      	ldr	r2, [pc, #344]	@ (800a308 <HAL_DMA_Start_IT+0x224>)
 800a1b0:	4293      	cmp	r3, r2
 800a1b2:	d00e      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a1b4:	68fb      	ldr	r3, [r7, #12]
 800a1b6:	681b      	ldr	r3, [r3, #0]
 800a1b8:	4a54      	ldr	r2, [pc, #336]	@ (800a30c <HAL_DMA_Start_IT+0x228>)
 800a1ba:	4293      	cmp	r3, r2
 800a1bc:	d009      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a1be:	68fb      	ldr	r3, [r7, #12]
 800a1c0:	681b      	ldr	r3, [r3, #0]
 800a1c2:	4a53      	ldr	r2, [pc, #332]	@ (800a310 <HAL_DMA_Start_IT+0x22c>)
 800a1c4:	4293      	cmp	r3, r2
 800a1c6:	d004      	beq.n	800a1d2 <HAL_DMA_Start_IT+0xee>
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	681b      	ldr	r3, [r3, #0]
 800a1cc:	4a51      	ldr	r2, [pc, #324]	@ (800a314 <HAL_DMA_Start_IT+0x230>)
 800a1ce:	4293      	cmp	r3, r2
 800a1d0:	d108      	bne.n	800a1e4 <HAL_DMA_Start_IT+0x100>
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	681b      	ldr	r3, [r3, #0]
 800a1d6:	681a      	ldr	r2, [r3, #0]
 800a1d8:	68fb      	ldr	r3, [r7, #12]
 800a1da:	681b      	ldr	r3, [r3, #0]
 800a1dc:	f022 0201 	bic.w	r2, r2, #1
 800a1e0:	601a      	str	r2, [r3, #0]
 800a1e2:	e007      	b.n	800a1f4 <HAL_DMA_Start_IT+0x110>
 800a1e4:	68fb      	ldr	r3, [r7, #12]
 800a1e6:	681b      	ldr	r3, [r3, #0]
 800a1e8:	681a      	ldr	r2, [r3, #0]
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	f022 0201 	bic.w	r2, r2, #1
 800a1f2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800a1f4:	683b      	ldr	r3, [r7, #0]
 800a1f6:	687a      	ldr	r2, [r7, #4]
 800a1f8:	68b9      	ldr	r1, [r7, #8]
 800a1fa:	68f8      	ldr	r0, [r7, #12]
 800a1fc:	f001 fe76 	bl	800beec <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	681b      	ldr	r3, [r3, #0]
 800a204:	4a34      	ldr	r2, [pc, #208]	@ (800a2d8 <HAL_DMA_Start_IT+0x1f4>)
 800a206:	4293      	cmp	r3, r2
 800a208:	d04a      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	681b      	ldr	r3, [r3, #0]
 800a20e:	4a33      	ldr	r2, [pc, #204]	@ (800a2dc <HAL_DMA_Start_IT+0x1f8>)
 800a210:	4293      	cmp	r3, r2
 800a212:	d045      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	4a31      	ldr	r2, [pc, #196]	@ (800a2e0 <HAL_DMA_Start_IT+0x1fc>)
 800a21a:	4293      	cmp	r3, r2
 800a21c:	d040      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	4a30      	ldr	r2, [pc, #192]	@ (800a2e4 <HAL_DMA_Start_IT+0x200>)
 800a224:	4293      	cmp	r3, r2
 800a226:	d03b      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a228:	68fb      	ldr	r3, [r7, #12]
 800a22a:	681b      	ldr	r3, [r3, #0]
 800a22c:	4a2e      	ldr	r2, [pc, #184]	@ (800a2e8 <HAL_DMA_Start_IT+0x204>)
 800a22e:	4293      	cmp	r3, r2
 800a230:	d036      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	4a2d      	ldr	r2, [pc, #180]	@ (800a2ec <HAL_DMA_Start_IT+0x208>)
 800a238:	4293      	cmp	r3, r2
 800a23a:	d031      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	4a2b      	ldr	r2, [pc, #172]	@ (800a2f0 <HAL_DMA_Start_IT+0x20c>)
 800a242:	4293      	cmp	r3, r2
 800a244:	d02c      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2f4 <HAL_DMA_Start_IT+0x210>)
 800a24c:	4293      	cmp	r3, r2
 800a24e:	d027      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a250:	68fb      	ldr	r3, [r7, #12]
 800a252:	681b      	ldr	r3, [r3, #0]
 800a254:	4a28      	ldr	r2, [pc, #160]	@ (800a2f8 <HAL_DMA_Start_IT+0x214>)
 800a256:	4293      	cmp	r3, r2
 800a258:	d022      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	4a27      	ldr	r2, [pc, #156]	@ (800a2fc <HAL_DMA_Start_IT+0x218>)
 800a260:	4293      	cmp	r3, r2
 800a262:	d01d      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	4a25      	ldr	r2, [pc, #148]	@ (800a300 <HAL_DMA_Start_IT+0x21c>)
 800a26a:	4293      	cmp	r3, r2
 800a26c:	d018      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a26e:	68fb      	ldr	r3, [r7, #12]
 800a270:	681b      	ldr	r3, [r3, #0]
 800a272:	4a24      	ldr	r2, [pc, #144]	@ (800a304 <HAL_DMA_Start_IT+0x220>)
 800a274:	4293      	cmp	r3, r2
 800a276:	d013      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a278:	68fb      	ldr	r3, [r7, #12]
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	4a22      	ldr	r2, [pc, #136]	@ (800a308 <HAL_DMA_Start_IT+0x224>)
 800a27e:	4293      	cmp	r3, r2
 800a280:	d00e      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	681b      	ldr	r3, [r3, #0]
 800a286:	4a21      	ldr	r2, [pc, #132]	@ (800a30c <HAL_DMA_Start_IT+0x228>)
 800a288:	4293      	cmp	r3, r2
 800a28a:	d009      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a28c:	68fb      	ldr	r3, [r7, #12]
 800a28e:	681b      	ldr	r3, [r3, #0]
 800a290:	4a1f      	ldr	r2, [pc, #124]	@ (800a310 <HAL_DMA_Start_IT+0x22c>)
 800a292:	4293      	cmp	r3, r2
 800a294:	d004      	beq.n	800a2a0 <HAL_DMA_Start_IT+0x1bc>
 800a296:	68fb      	ldr	r3, [r7, #12]
 800a298:	681b      	ldr	r3, [r3, #0]
 800a29a:	4a1e      	ldr	r2, [pc, #120]	@ (800a314 <HAL_DMA_Start_IT+0x230>)
 800a29c:	4293      	cmp	r3, r2
 800a29e:	d101      	bne.n	800a2a4 <HAL_DMA_Start_IT+0x1c0>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	e000      	b.n	800a2a6 <HAL_DMA_Start_IT+0x1c2>
 800a2a4:	2300      	movs	r3, #0
 800a2a6:	2b00      	cmp	r3, #0
 800a2a8:	d036      	beq.n	800a318 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	681b      	ldr	r3, [r3, #0]
 800a2b0:	f023 021e 	bic.w	r2, r3, #30
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	f042 0216 	orr.w	r2, r2, #22
 800a2bc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a2be:	68fb      	ldr	r3, [r7, #12]
 800a2c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2c2:	2b00      	cmp	r3, #0
 800a2c4:	d03e      	beq.n	800a344 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	681a      	ldr	r2, [r3, #0]
 800a2cc:	68fb      	ldr	r3, [r7, #12]
 800a2ce:	681b      	ldr	r3, [r3, #0]
 800a2d0:	f042 0208 	orr.w	r2, r2, #8
 800a2d4:	601a      	str	r2, [r3, #0]
 800a2d6:	e035      	b.n	800a344 <HAL_DMA_Start_IT+0x260>
 800a2d8:	40020010 	.word	0x40020010
 800a2dc:	40020028 	.word	0x40020028
 800a2e0:	40020040 	.word	0x40020040
 800a2e4:	40020058 	.word	0x40020058
 800a2e8:	40020070 	.word	0x40020070
 800a2ec:	40020088 	.word	0x40020088
 800a2f0:	400200a0 	.word	0x400200a0
 800a2f4:	400200b8 	.word	0x400200b8
 800a2f8:	40020410 	.word	0x40020410
 800a2fc:	40020428 	.word	0x40020428
 800a300:	40020440 	.word	0x40020440
 800a304:	40020458 	.word	0x40020458
 800a308:	40020470 	.word	0x40020470
 800a30c:	40020488 	.word	0x40020488
 800a310:	400204a0 	.word	0x400204a0
 800a314:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 800a318:	68fb      	ldr	r3, [r7, #12]
 800a31a:	681b      	ldr	r3, [r3, #0]
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	f023 020e 	bic.w	r2, r3, #14
 800a322:	68fb      	ldr	r3, [r7, #12]
 800a324:	681b      	ldr	r3, [r3, #0]
 800a326:	f042 020a 	orr.w	r2, r2, #10
 800a32a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a330:	2b00      	cmp	r3, #0
 800a332:	d007      	beq.n	800a344 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	681a      	ldr	r2, [r3, #0]
 800a33a:	68fb      	ldr	r3, [r7, #12]
 800a33c:	681b      	ldr	r3, [r3, #0]
 800a33e:	f042 0204 	orr.w	r2, r2, #4
 800a342:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a344:	68fb      	ldr	r3, [r7, #12]
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a83      	ldr	r2, [pc, #524]	@ (800a558 <HAL_DMA_Start_IT+0x474>)
 800a34a:	4293      	cmp	r3, r2
 800a34c:	d072      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	681b      	ldr	r3, [r3, #0]
 800a352:	4a82      	ldr	r2, [pc, #520]	@ (800a55c <HAL_DMA_Start_IT+0x478>)
 800a354:	4293      	cmp	r3, r2
 800a356:	d06d      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681b      	ldr	r3, [r3, #0]
 800a35c:	4a80      	ldr	r2, [pc, #512]	@ (800a560 <HAL_DMA_Start_IT+0x47c>)
 800a35e:	4293      	cmp	r3, r2
 800a360:	d068      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	4a7f      	ldr	r2, [pc, #508]	@ (800a564 <HAL_DMA_Start_IT+0x480>)
 800a368:	4293      	cmp	r3, r2
 800a36a:	d063      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a36c:	68fb      	ldr	r3, [r7, #12]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	4a7d      	ldr	r2, [pc, #500]	@ (800a568 <HAL_DMA_Start_IT+0x484>)
 800a372:	4293      	cmp	r3, r2
 800a374:	d05e      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	4a7c      	ldr	r2, [pc, #496]	@ (800a56c <HAL_DMA_Start_IT+0x488>)
 800a37c:	4293      	cmp	r3, r2
 800a37e:	d059      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a380:	68fb      	ldr	r3, [r7, #12]
 800a382:	681b      	ldr	r3, [r3, #0]
 800a384:	4a7a      	ldr	r2, [pc, #488]	@ (800a570 <HAL_DMA_Start_IT+0x48c>)
 800a386:	4293      	cmp	r3, r2
 800a388:	d054      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a38a:	68fb      	ldr	r3, [r7, #12]
 800a38c:	681b      	ldr	r3, [r3, #0]
 800a38e:	4a79      	ldr	r2, [pc, #484]	@ (800a574 <HAL_DMA_Start_IT+0x490>)
 800a390:	4293      	cmp	r3, r2
 800a392:	d04f      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a394:	68fb      	ldr	r3, [r7, #12]
 800a396:	681b      	ldr	r3, [r3, #0]
 800a398:	4a77      	ldr	r2, [pc, #476]	@ (800a578 <HAL_DMA_Start_IT+0x494>)
 800a39a:	4293      	cmp	r3, r2
 800a39c:	d04a      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a39e:	68fb      	ldr	r3, [r7, #12]
 800a3a0:	681b      	ldr	r3, [r3, #0]
 800a3a2:	4a76      	ldr	r2, [pc, #472]	@ (800a57c <HAL_DMA_Start_IT+0x498>)
 800a3a4:	4293      	cmp	r3, r2
 800a3a6:	d045      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3a8:	68fb      	ldr	r3, [r7, #12]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	4a74      	ldr	r2, [pc, #464]	@ (800a580 <HAL_DMA_Start_IT+0x49c>)
 800a3ae:	4293      	cmp	r3, r2
 800a3b0:	d040      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	4a73      	ldr	r2, [pc, #460]	@ (800a584 <HAL_DMA_Start_IT+0x4a0>)
 800a3b8:	4293      	cmp	r3, r2
 800a3ba:	d03b      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3bc:	68fb      	ldr	r3, [r7, #12]
 800a3be:	681b      	ldr	r3, [r3, #0]
 800a3c0:	4a71      	ldr	r2, [pc, #452]	@ (800a588 <HAL_DMA_Start_IT+0x4a4>)
 800a3c2:	4293      	cmp	r3, r2
 800a3c4:	d036      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3c6:	68fb      	ldr	r3, [r7, #12]
 800a3c8:	681b      	ldr	r3, [r3, #0]
 800a3ca:	4a70      	ldr	r2, [pc, #448]	@ (800a58c <HAL_DMA_Start_IT+0x4a8>)
 800a3cc:	4293      	cmp	r3, r2
 800a3ce:	d031      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3d0:	68fb      	ldr	r3, [r7, #12]
 800a3d2:	681b      	ldr	r3, [r3, #0]
 800a3d4:	4a6e      	ldr	r2, [pc, #440]	@ (800a590 <HAL_DMA_Start_IT+0x4ac>)
 800a3d6:	4293      	cmp	r3, r2
 800a3d8:	d02c      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	681b      	ldr	r3, [r3, #0]
 800a3de:	4a6d      	ldr	r2, [pc, #436]	@ (800a594 <HAL_DMA_Start_IT+0x4b0>)
 800a3e0:	4293      	cmp	r3, r2
 800a3e2:	d027      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3e4:	68fb      	ldr	r3, [r7, #12]
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	4a6b      	ldr	r2, [pc, #428]	@ (800a598 <HAL_DMA_Start_IT+0x4b4>)
 800a3ea:	4293      	cmp	r3, r2
 800a3ec:	d022      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	681b      	ldr	r3, [r3, #0]
 800a3f2:	4a6a      	ldr	r2, [pc, #424]	@ (800a59c <HAL_DMA_Start_IT+0x4b8>)
 800a3f4:	4293      	cmp	r3, r2
 800a3f6:	d01d      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a3f8:	68fb      	ldr	r3, [r7, #12]
 800a3fa:	681b      	ldr	r3, [r3, #0]
 800a3fc:	4a68      	ldr	r2, [pc, #416]	@ (800a5a0 <HAL_DMA_Start_IT+0x4bc>)
 800a3fe:	4293      	cmp	r3, r2
 800a400:	d018      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	4a67      	ldr	r2, [pc, #412]	@ (800a5a4 <HAL_DMA_Start_IT+0x4c0>)
 800a408:	4293      	cmp	r3, r2
 800a40a:	d013      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a40c:	68fb      	ldr	r3, [r7, #12]
 800a40e:	681b      	ldr	r3, [r3, #0]
 800a410:	4a65      	ldr	r2, [pc, #404]	@ (800a5a8 <HAL_DMA_Start_IT+0x4c4>)
 800a412:	4293      	cmp	r3, r2
 800a414:	d00e      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	4a64      	ldr	r2, [pc, #400]	@ (800a5ac <HAL_DMA_Start_IT+0x4c8>)
 800a41c:	4293      	cmp	r3, r2
 800a41e:	d009      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a420:	68fb      	ldr	r3, [r7, #12]
 800a422:	681b      	ldr	r3, [r3, #0]
 800a424:	4a62      	ldr	r2, [pc, #392]	@ (800a5b0 <HAL_DMA_Start_IT+0x4cc>)
 800a426:	4293      	cmp	r3, r2
 800a428:	d004      	beq.n	800a434 <HAL_DMA_Start_IT+0x350>
 800a42a:	68fb      	ldr	r3, [r7, #12]
 800a42c:	681b      	ldr	r3, [r3, #0]
 800a42e:	4a61      	ldr	r2, [pc, #388]	@ (800a5b4 <HAL_DMA_Start_IT+0x4d0>)
 800a430:	4293      	cmp	r3, r2
 800a432:	d101      	bne.n	800a438 <HAL_DMA_Start_IT+0x354>
 800a434:	2301      	movs	r3, #1
 800a436:	e000      	b.n	800a43a <HAL_DMA_Start_IT+0x356>
 800a438:	2300      	movs	r3, #0
 800a43a:	2b00      	cmp	r3, #0
 800a43c:	d01a      	beq.n	800a474 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a442:	681b      	ldr	r3, [r3, #0]
 800a444:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d007      	beq.n	800a45c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a450:	681a      	ldr	r2, [r3, #0]
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a456:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a45a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800a45c:	68fb      	ldr	r3, [r7, #12]
 800a45e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a460:	2b00      	cmp	r3, #0
 800a462:	d007      	beq.n	800a474 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a468:	681a      	ldr	r2, [r3, #0]
 800a46a:	68fb      	ldr	r3, [r7, #12]
 800a46c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a46e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800a472:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	4a37      	ldr	r2, [pc, #220]	@ (800a558 <HAL_DMA_Start_IT+0x474>)
 800a47a:	4293      	cmp	r3, r2
 800a47c:	d04a      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a47e:	68fb      	ldr	r3, [r7, #12]
 800a480:	681b      	ldr	r3, [r3, #0]
 800a482:	4a36      	ldr	r2, [pc, #216]	@ (800a55c <HAL_DMA_Start_IT+0x478>)
 800a484:	4293      	cmp	r3, r2
 800a486:	d045      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	681b      	ldr	r3, [r3, #0]
 800a48c:	4a34      	ldr	r2, [pc, #208]	@ (800a560 <HAL_DMA_Start_IT+0x47c>)
 800a48e:	4293      	cmp	r3, r2
 800a490:	d040      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a492:	68fb      	ldr	r3, [r7, #12]
 800a494:	681b      	ldr	r3, [r3, #0]
 800a496:	4a33      	ldr	r2, [pc, #204]	@ (800a564 <HAL_DMA_Start_IT+0x480>)
 800a498:	4293      	cmp	r3, r2
 800a49a:	d03b      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a49c:	68fb      	ldr	r3, [r7, #12]
 800a49e:	681b      	ldr	r3, [r3, #0]
 800a4a0:	4a31      	ldr	r2, [pc, #196]	@ (800a568 <HAL_DMA_Start_IT+0x484>)
 800a4a2:	4293      	cmp	r3, r2
 800a4a4:	d036      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	681b      	ldr	r3, [r3, #0]
 800a4aa:	4a30      	ldr	r2, [pc, #192]	@ (800a56c <HAL_DMA_Start_IT+0x488>)
 800a4ac:	4293      	cmp	r3, r2
 800a4ae:	d031      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4b0:	68fb      	ldr	r3, [r7, #12]
 800a4b2:	681b      	ldr	r3, [r3, #0]
 800a4b4:	4a2e      	ldr	r2, [pc, #184]	@ (800a570 <HAL_DMA_Start_IT+0x48c>)
 800a4b6:	4293      	cmp	r3, r2
 800a4b8:	d02c      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4ba:	68fb      	ldr	r3, [r7, #12]
 800a4bc:	681b      	ldr	r3, [r3, #0]
 800a4be:	4a2d      	ldr	r2, [pc, #180]	@ (800a574 <HAL_DMA_Start_IT+0x490>)
 800a4c0:	4293      	cmp	r3, r2
 800a4c2:	d027      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4c4:	68fb      	ldr	r3, [r7, #12]
 800a4c6:	681b      	ldr	r3, [r3, #0]
 800a4c8:	4a2b      	ldr	r2, [pc, #172]	@ (800a578 <HAL_DMA_Start_IT+0x494>)
 800a4ca:	4293      	cmp	r3, r2
 800a4cc:	d022      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4ce:	68fb      	ldr	r3, [r7, #12]
 800a4d0:	681b      	ldr	r3, [r3, #0]
 800a4d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a57c <HAL_DMA_Start_IT+0x498>)
 800a4d4:	4293      	cmp	r3, r2
 800a4d6:	d01d      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4d8:	68fb      	ldr	r3, [r7, #12]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	4a28      	ldr	r2, [pc, #160]	@ (800a580 <HAL_DMA_Start_IT+0x49c>)
 800a4de:	4293      	cmp	r3, r2
 800a4e0:	d018      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4e2:	68fb      	ldr	r3, [r7, #12]
 800a4e4:	681b      	ldr	r3, [r3, #0]
 800a4e6:	4a27      	ldr	r2, [pc, #156]	@ (800a584 <HAL_DMA_Start_IT+0x4a0>)
 800a4e8:	4293      	cmp	r3, r2
 800a4ea:	d013      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4ec:	68fb      	ldr	r3, [r7, #12]
 800a4ee:	681b      	ldr	r3, [r3, #0]
 800a4f0:	4a25      	ldr	r2, [pc, #148]	@ (800a588 <HAL_DMA_Start_IT+0x4a4>)
 800a4f2:	4293      	cmp	r3, r2
 800a4f4:	d00e      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a4f6:	68fb      	ldr	r3, [r7, #12]
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	4a24      	ldr	r2, [pc, #144]	@ (800a58c <HAL_DMA_Start_IT+0x4a8>)
 800a4fc:	4293      	cmp	r3, r2
 800a4fe:	d009      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	4a22      	ldr	r2, [pc, #136]	@ (800a590 <HAL_DMA_Start_IT+0x4ac>)
 800a506:	4293      	cmp	r3, r2
 800a508:	d004      	beq.n	800a514 <HAL_DMA_Start_IT+0x430>
 800a50a:	68fb      	ldr	r3, [r7, #12]
 800a50c:	681b      	ldr	r3, [r3, #0]
 800a50e:	4a21      	ldr	r2, [pc, #132]	@ (800a594 <HAL_DMA_Start_IT+0x4b0>)
 800a510:	4293      	cmp	r3, r2
 800a512:	d108      	bne.n	800a526 <HAL_DMA_Start_IT+0x442>
 800a514:	68fb      	ldr	r3, [r7, #12]
 800a516:	681b      	ldr	r3, [r3, #0]
 800a518:	681a      	ldr	r2, [r3, #0]
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	681b      	ldr	r3, [r3, #0]
 800a51e:	f042 0201 	orr.w	r2, r2, #1
 800a522:	601a      	str	r2, [r3, #0]
 800a524:	e012      	b.n	800a54c <HAL_DMA_Start_IT+0x468>
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	681b      	ldr	r3, [r3, #0]
 800a52a:	681a      	ldr	r2, [r3, #0]
 800a52c:	68fb      	ldr	r3, [r7, #12]
 800a52e:	681b      	ldr	r3, [r3, #0]
 800a530:	f042 0201 	orr.w	r2, r2, #1
 800a534:	601a      	str	r2, [r3, #0]
 800a536:	e009      	b.n	800a54c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a53e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 800a540:	68fb      	ldr	r3, [r7, #12]
 800a542:	2200      	movs	r2, #0
 800a544:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 800a548:	2301      	movs	r3, #1
 800a54a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800a54c:	7dfb      	ldrb	r3, [r7, #23]
}
 800a54e:	4618      	mov	r0, r3
 800a550:	3718      	adds	r7, #24
 800a552:	46bd      	mov	sp, r7
 800a554:	bd80      	pop	{r7, pc}
 800a556:	bf00      	nop
 800a558:	40020010 	.word	0x40020010
 800a55c:	40020028 	.word	0x40020028
 800a560:	40020040 	.word	0x40020040
 800a564:	40020058 	.word	0x40020058
 800a568:	40020070 	.word	0x40020070
 800a56c:	40020088 	.word	0x40020088
 800a570:	400200a0 	.word	0x400200a0
 800a574:	400200b8 	.word	0x400200b8
 800a578:	40020410 	.word	0x40020410
 800a57c:	40020428 	.word	0x40020428
 800a580:	40020440 	.word	0x40020440
 800a584:	40020458 	.word	0x40020458
 800a588:	40020470 	.word	0x40020470
 800a58c:	40020488 	.word	0x40020488
 800a590:	400204a0 	.word	0x400204a0
 800a594:	400204b8 	.word	0x400204b8
 800a598:	58025408 	.word	0x58025408
 800a59c:	5802541c 	.word	0x5802541c
 800a5a0:	58025430 	.word	0x58025430
 800a5a4:	58025444 	.word	0x58025444
 800a5a8:	58025458 	.word	0x58025458
 800a5ac:	5802546c 	.word	0x5802546c
 800a5b0:	58025480 	.word	0x58025480
 800a5b4:	58025494 	.word	0x58025494

0800a5b8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800a5b8:	b580      	push	{r7, lr}
 800a5ba:	b086      	sub	sp, #24
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 800a5c0:	f7fe fd72 	bl	80090a8 <HAL_GetTick>
 800a5c4:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	2b00      	cmp	r3, #0
 800a5ca:	d101      	bne.n	800a5d0 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 800a5cc:	2301      	movs	r3, #1
 800a5ce:	e2dc      	b.n	800ab8a <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a5d6:	b2db      	uxtb	r3, r3
 800a5d8:	2b02      	cmp	r3, #2
 800a5da:	d008      	beq.n	800a5ee <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	2280      	movs	r2, #128	@ 0x80
 800a5e0:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2200      	movs	r2, #0
 800a5e6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 800a5ea:	2301      	movs	r3, #1
 800a5ec:	e2cd      	b.n	800ab8a <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a5ee:	687b      	ldr	r3, [r7, #4]
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	4a76      	ldr	r2, [pc, #472]	@ (800a7cc <HAL_DMA_Abort+0x214>)
 800a5f4:	4293      	cmp	r3, r2
 800a5f6:	d04a      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	4a74      	ldr	r2, [pc, #464]	@ (800a7d0 <HAL_DMA_Abort+0x218>)
 800a5fe:	4293      	cmp	r3, r2
 800a600:	d045      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	681b      	ldr	r3, [r3, #0]
 800a606:	4a73      	ldr	r2, [pc, #460]	@ (800a7d4 <HAL_DMA_Abort+0x21c>)
 800a608:	4293      	cmp	r3, r2
 800a60a:	d040      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a71      	ldr	r2, [pc, #452]	@ (800a7d8 <HAL_DMA_Abort+0x220>)
 800a612:	4293      	cmp	r3, r2
 800a614:	d03b      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	4a70      	ldr	r2, [pc, #448]	@ (800a7dc <HAL_DMA_Abort+0x224>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d036      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	681b      	ldr	r3, [r3, #0]
 800a624:	4a6e      	ldr	r2, [pc, #440]	@ (800a7e0 <HAL_DMA_Abort+0x228>)
 800a626:	4293      	cmp	r3, r2
 800a628:	d031      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	4a6d      	ldr	r2, [pc, #436]	@ (800a7e4 <HAL_DMA_Abort+0x22c>)
 800a630:	4293      	cmp	r3, r2
 800a632:	d02c      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a634:	687b      	ldr	r3, [r7, #4]
 800a636:	681b      	ldr	r3, [r3, #0]
 800a638:	4a6b      	ldr	r2, [pc, #428]	@ (800a7e8 <HAL_DMA_Abort+0x230>)
 800a63a:	4293      	cmp	r3, r2
 800a63c:	d027      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	4a6a      	ldr	r2, [pc, #424]	@ (800a7ec <HAL_DMA_Abort+0x234>)
 800a644:	4293      	cmp	r3, r2
 800a646:	d022      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a648:	687b      	ldr	r3, [r7, #4]
 800a64a:	681b      	ldr	r3, [r3, #0]
 800a64c:	4a68      	ldr	r2, [pc, #416]	@ (800a7f0 <HAL_DMA_Abort+0x238>)
 800a64e:	4293      	cmp	r3, r2
 800a650:	d01d      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	4a67      	ldr	r2, [pc, #412]	@ (800a7f4 <HAL_DMA_Abort+0x23c>)
 800a658:	4293      	cmp	r3, r2
 800a65a:	d018      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	681b      	ldr	r3, [r3, #0]
 800a660:	4a65      	ldr	r2, [pc, #404]	@ (800a7f8 <HAL_DMA_Abort+0x240>)
 800a662:	4293      	cmp	r3, r2
 800a664:	d013      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	681b      	ldr	r3, [r3, #0]
 800a66a:	4a64      	ldr	r2, [pc, #400]	@ (800a7fc <HAL_DMA_Abort+0x244>)
 800a66c:	4293      	cmp	r3, r2
 800a66e:	d00e      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	681b      	ldr	r3, [r3, #0]
 800a674:	4a62      	ldr	r2, [pc, #392]	@ (800a800 <HAL_DMA_Abort+0x248>)
 800a676:	4293      	cmp	r3, r2
 800a678:	d009      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	681b      	ldr	r3, [r3, #0]
 800a67e:	4a61      	ldr	r2, [pc, #388]	@ (800a804 <HAL_DMA_Abort+0x24c>)
 800a680:	4293      	cmp	r3, r2
 800a682:	d004      	beq.n	800a68e <HAL_DMA_Abort+0xd6>
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	681b      	ldr	r3, [r3, #0]
 800a688:	4a5f      	ldr	r2, [pc, #380]	@ (800a808 <HAL_DMA_Abort+0x250>)
 800a68a:	4293      	cmp	r3, r2
 800a68c:	d101      	bne.n	800a692 <HAL_DMA_Abort+0xda>
 800a68e:	2301      	movs	r3, #1
 800a690:	e000      	b.n	800a694 <HAL_DMA_Abort+0xdc>
 800a692:	2300      	movs	r3, #0
 800a694:	2b00      	cmp	r3, #0
 800a696:	d013      	beq.n	800a6c0 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	681b      	ldr	r3, [r3, #0]
 800a69c:	681a      	ldr	r2, [r3, #0]
 800a69e:	687b      	ldr	r3, [r7, #4]
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	f022 021e 	bic.w	r2, r2, #30
 800a6a6:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	681b      	ldr	r3, [r3, #0]
 800a6ac:	695a      	ldr	r2, [r3, #20]
 800a6ae:	687b      	ldr	r3, [r7, #4]
 800a6b0:	681b      	ldr	r3, [r3, #0]
 800a6b2:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800a6b6:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 800a6b8:	687b      	ldr	r3, [r7, #4]
 800a6ba:	681b      	ldr	r3, [r3, #0]
 800a6bc:	617b      	str	r3, [r7, #20]
 800a6be:	e00a      	b.n	800a6d6 <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	681b      	ldr	r3, [r3, #0]
 800a6c4:	681a      	ldr	r2, [r3, #0]
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	681b      	ldr	r3, [r3, #0]
 800a6ca:	f022 020e 	bic.w	r2, r2, #14
 800a6ce:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 800a6d0:	687b      	ldr	r3, [r7, #4]
 800a6d2:	681b      	ldr	r3, [r3, #0]
 800a6d4:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a6d6:	687b      	ldr	r3, [r7, #4]
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a3c      	ldr	r2, [pc, #240]	@ (800a7cc <HAL_DMA_Abort+0x214>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d072      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a6e0:	687b      	ldr	r3, [r7, #4]
 800a6e2:	681b      	ldr	r3, [r3, #0]
 800a6e4:	4a3a      	ldr	r2, [pc, #232]	@ (800a7d0 <HAL_DMA_Abort+0x218>)
 800a6e6:	4293      	cmp	r3, r2
 800a6e8:	d06d      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	4a39      	ldr	r2, [pc, #228]	@ (800a7d4 <HAL_DMA_Abort+0x21c>)
 800a6f0:	4293      	cmp	r3, r2
 800a6f2:	d068      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	4a37      	ldr	r2, [pc, #220]	@ (800a7d8 <HAL_DMA_Abort+0x220>)
 800a6fa:	4293      	cmp	r3, r2
 800a6fc:	d063      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a6fe:	687b      	ldr	r3, [r7, #4]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	4a36      	ldr	r2, [pc, #216]	@ (800a7dc <HAL_DMA_Abort+0x224>)
 800a704:	4293      	cmp	r3, r2
 800a706:	d05e      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a708:	687b      	ldr	r3, [r7, #4]
 800a70a:	681b      	ldr	r3, [r3, #0]
 800a70c:	4a34      	ldr	r2, [pc, #208]	@ (800a7e0 <HAL_DMA_Abort+0x228>)
 800a70e:	4293      	cmp	r3, r2
 800a710:	d059      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a712:	687b      	ldr	r3, [r7, #4]
 800a714:	681b      	ldr	r3, [r3, #0]
 800a716:	4a33      	ldr	r2, [pc, #204]	@ (800a7e4 <HAL_DMA_Abort+0x22c>)
 800a718:	4293      	cmp	r3, r2
 800a71a:	d054      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a71c:	687b      	ldr	r3, [r7, #4]
 800a71e:	681b      	ldr	r3, [r3, #0]
 800a720:	4a31      	ldr	r2, [pc, #196]	@ (800a7e8 <HAL_DMA_Abort+0x230>)
 800a722:	4293      	cmp	r3, r2
 800a724:	d04f      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	4a30      	ldr	r2, [pc, #192]	@ (800a7ec <HAL_DMA_Abort+0x234>)
 800a72c:	4293      	cmp	r3, r2
 800a72e:	d04a      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	681b      	ldr	r3, [r3, #0]
 800a734:	4a2e      	ldr	r2, [pc, #184]	@ (800a7f0 <HAL_DMA_Abort+0x238>)
 800a736:	4293      	cmp	r3, r2
 800a738:	d045      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	4a2d      	ldr	r2, [pc, #180]	@ (800a7f4 <HAL_DMA_Abort+0x23c>)
 800a740:	4293      	cmp	r3, r2
 800a742:	d040      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a744:	687b      	ldr	r3, [r7, #4]
 800a746:	681b      	ldr	r3, [r3, #0]
 800a748:	4a2b      	ldr	r2, [pc, #172]	@ (800a7f8 <HAL_DMA_Abort+0x240>)
 800a74a:	4293      	cmp	r3, r2
 800a74c:	d03b      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	4a2a      	ldr	r2, [pc, #168]	@ (800a7fc <HAL_DMA_Abort+0x244>)
 800a754:	4293      	cmp	r3, r2
 800a756:	d036      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	681b      	ldr	r3, [r3, #0]
 800a75c:	4a28      	ldr	r2, [pc, #160]	@ (800a800 <HAL_DMA_Abort+0x248>)
 800a75e:	4293      	cmp	r3, r2
 800a760:	d031      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a762:	687b      	ldr	r3, [r7, #4]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	4a27      	ldr	r2, [pc, #156]	@ (800a804 <HAL_DMA_Abort+0x24c>)
 800a768:	4293      	cmp	r3, r2
 800a76a:	d02c      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a76c:	687b      	ldr	r3, [r7, #4]
 800a76e:	681b      	ldr	r3, [r3, #0]
 800a770:	4a25      	ldr	r2, [pc, #148]	@ (800a808 <HAL_DMA_Abort+0x250>)
 800a772:	4293      	cmp	r3, r2
 800a774:	d027      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a776:	687b      	ldr	r3, [r7, #4]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	4a24      	ldr	r2, [pc, #144]	@ (800a80c <HAL_DMA_Abort+0x254>)
 800a77c:	4293      	cmp	r3, r2
 800a77e:	d022      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a780:	687b      	ldr	r3, [r7, #4]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	4a22      	ldr	r2, [pc, #136]	@ (800a810 <HAL_DMA_Abort+0x258>)
 800a786:	4293      	cmp	r3, r2
 800a788:	d01d      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	4a21      	ldr	r2, [pc, #132]	@ (800a814 <HAL_DMA_Abort+0x25c>)
 800a790:	4293      	cmp	r3, r2
 800a792:	d018      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a794:	687b      	ldr	r3, [r7, #4]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	4a1f      	ldr	r2, [pc, #124]	@ (800a818 <HAL_DMA_Abort+0x260>)
 800a79a:	4293      	cmp	r3, r2
 800a79c:	d013      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a79e:	687b      	ldr	r3, [r7, #4]
 800a7a0:	681b      	ldr	r3, [r3, #0]
 800a7a2:	4a1e      	ldr	r2, [pc, #120]	@ (800a81c <HAL_DMA_Abort+0x264>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d00e      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	681b      	ldr	r3, [r3, #0]
 800a7ac:	4a1c      	ldr	r2, [pc, #112]	@ (800a820 <HAL_DMA_Abort+0x268>)
 800a7ae:	4293      	cmp	r3, r2
 800a7b0:	d009      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a7b2:	687b      	ldr	r3, [r7, #4]
 800a7b4:	681b      	ldr	r3, [r3, #0]
 800a7b6:	4a1b      	ldr	r2, [pc, #108]	@ (800a824 <HAL_DMA_Abort+0x26c>)
 800a7b8:	4293      	cmp	r3, r2
 800a7ba:	d004      	beq.n	800a7c6 <HAL_DMA_Abort+0x20e>
 800a7bc:	687b      	ldr	r3, [r7, #4]
 800a7be:	681b      	ldr	r3, [r3, #0]
 800a7c0:	4a19      	ldr	r2, [pc, #100]	@ (800a828 <HAL_DMA_Abort+0x270>)
 800a7c2:	4293      	cmp	r3, r2
 800a7c4:	d132      	bne.n	800a82c <HAL_DMA_Abort+0x274>
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	e031      	b.n	800a82e <HAL_DMA_Abort+0x276>
 800a7ca:	bf00      	nop
 800a7cc:	40020010 	.word	0x40020010
 800a7d0:	40020028 	.word	0x40020028
 800a7d4:	40020040 	.word	0x40020040
 800a7d8:	40020058 	.word	0x40020058
 800a7dc:	40020070 	.word	0x40020070
 800a7e0:	40020088 	.word	0x40020088
 800a7e4:	400200a0 	.word	0x400200a0
 800a7e8:	400200b8 	.word	0x400200b8
 800a7ec:	40020410 	.word	0x40020410
 800a7f0:	40020428 	.word	0x40020428
 800a7f4:	40020440 	.word	0x40020440
 800a7f8:	40020458 	.word	0x40020458
 800a7fc:	40020470 	.word	0x40020470
 800a800:	40020488 	.word	0x40020488
 800a804:	400204a0 	.word	0x400204a0
 800a808:	400204b8 	.word	0x400204b8
 800a80c:	58025408 	.word	0x58025408
 800a810:	5802541c 	.word	0x5802541c
 800a814:	58025430 	.word	0x58025430
 800a818:	58025444 	.word	0x58025444
 800a81c:	58025458 	.word	0x58025458
 800a820:	5802546c 	.word	0x5802546c
 800a824:	58025480 	.word	0x58025480
 800a828:	58025494 	.word	0x58025494
 800a82c:	2300      	movs	r3, #0
 800a82e:	2b00      	cmp	r3, #0
 800a830:	d007      	beq.n	800a842 <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800a832:	687b      	ldr	r3, [r7, #4]
 800a834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a836:	681a      	ldr	r2, [r3, #0]
 800a838:	687b      	ldr	r3, [r7, #4]
 800a83a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a83c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800a840:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800a842:	687b      	ldr	r3, [r7, #4]
 800a844:	681b      	ldr	r3, [r3, #0]
 800a846:	4a6d      	ldr	r2, [pc, #436]	@ (800a9fc <HAL_DMA_Abort+0x444>)
 800a848:	4293      	cmp	r3, r2
 800a84a:	d04a      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a84c:	687b      	ldr	r3, [r7, #4]
 800a84e:	681b      	ldr	r3, [r3, #0]
 800a850:	4a6b      	ldr	r2, [pc, #428]	@ (800aa00 <HAL_DMA_Abort+0x448>)
 800a852:	4293      	cmp	r3, r2
 800a854:	d045      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	681b      	ldr	r3, [r3, #0]
 800a85a:	4a6a      	ldr	r2, [pc, #424]	@ (800aa04 <HAL_DMA_Abort+0x44c>)
 800a85c:	4293      	cmp	r3, r2
 800a85e:	d040      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a860:	687b      	ldr	r3, [r7, #4]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	4a68      	ldr	r2, [pc, #416]	@ (800aa08 <HAL_DMA_Abort+0x450>)
 800a866:	4293      	cmp	r3, r2
 800a868:	d03b      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a86a:	687b      	ldr	r3, [r7, #4]
 800a86c:	681b      	ldr	r3, [r3, #0]
 800a86e:	4a67      	ldr	r2, [pc, #412]	@ (800aa0c <HAL_DMA_Abort+0x454>)
 800a870:	4293      	cmp	r3, r2
 800a872:	d036      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a874:	687b      	ldr	r3, [r7, #4]
 800a876:	681b      	ldr	r3, [r3, #0]
 800a878:	4a65      	ldr	r2, [pc, #404]	@ (800aa10 <HAL_DMA_Abort+0x458>)
 800a87a:	4293      	cmp	r3, r2
 800a87c:	d031      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	4a64      	ldr	r2, [pc, #400]	@ (800aa14 <HAL_DMA_Abort+0x45c>)
 800a884:	4293      	cmp	r3, r2
 800a886:	d02c      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	4a62      	ldr	r2, [pc, #392]	@ (800aa18 <HAL_DMA_Abort+0x460>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d027      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	681b      	ldr	r3, [r3, #0]
 800a896:	4a61      	ldr	r2, [pc, #388]	@ (800aa1c <HAL_DMA_Abort+0x464>)
 800a898:	4293      	cmp	r3, r2
 800a89a:	d022      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	4a5f      	ldr	r2, [pc, #380]	@ (800aa20 <HAL_DMA_Abort+0x468>)
 800a8a2:	4293      	cmp	r3, r2
 800a8a4:	d01d      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	681b      	ldr	r3, [r3, #0]
 800a8aa:	4a5e      	ldr	r2, [pc, #376]	@ (800aa24 <HAL_DMA_Abort+0x46c>)
 800a8ac:	4293      	cmp	r3, r2
 800a8ae:	d018      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a8b0:	687b      	ldr	r3, [r7, #4]
 800a8b2:	681b      	ldr	r3, [r3, #0]
 800a8b4:	4a5c      	ldr	r2, [pc, #368]	@ (800aa28 <HAL_DMA_Abort+0x470>)
 800a8b6:	4293      	cmp	r3, r2
 800a8b8:	d013      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	681b      	ldr	r3, [r3, #0]
 800a8be:	4a5b      	ldr	r2, [pc, #364]	@ (800aa2c <HAL_DMA_Abort+0x474>)
 800a8c0:	4293      	cmp	r3, r2
 800a8c2:	d00e      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	681b      	ldr	r3, [r3, #0]
 800a8c8:	4a59      	ldr	r2, [pc, #356]	@ (800aa30 <HAL_DMA_Abort+0x478>)
 800a8ca:	4293      	cmp	r3, r2
 800a8cc:	d009      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a8ce:	687b      	ldr	r3, [r7, #4]
 800a8d0:	681b      	ldr	r3, [r3, #0]
 800a8d2:	4a58      	ldr	r2, [pc, #352]	@ (800aa34 <HAL_DMA_Abort+0x47c>)
 800a8d4:	4293      	cmp	r3, r2
 800a8d6:	d004      	beq.n	800a8e2 <HAL_DMA_Abort+0x32a>
 800a8d8:	687b      	ldr	r3, [r7, #4]
 800a8da:	681b      	ldr	r3, [r3, #0]
 800a8dc:	4a56      	ldr	r2, [pc, #344]	@ (800aa38 <HAL_DMA_Abort+0x480>)
 800a8de:	4293      	cmp	r3, r2
 800a8e0:	d108      	bne.n	800a8f4 <HAL_DMA_Abort+0x33c>
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	681b      	ldr	r3, [r3, #0]
 800a8e6:	681a      	ldr	r2, [r3, #0]
 800a8e8:	687b      	ldr	r3, [r7, #4]
 800a8ea:	681b      	ldr	r3, [r3, #0]
 800a8ec:	f022 0201 	bic.w	r2, r2, #1
 800a8f0:	601a      	str	r2, [r3, #0]
 800a8f2:	e007      	b.n	800a904 <HAL_DMA_Abort+0x34c>
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	681b      	ldr	r3, [r3, #0]
 800a8f8:	681a      	ldr	r2, [r3, #0]
 800a8fa:	687b      	ldr	r3, [r7, #4]
 800a8fc:	681b      	ldr	r3, [r3, #0]
 800a8fe:	f022 0201 	bic.w	r2, r2, #1
 800a902:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a904:	e013      	b.n	800a92e <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800a906:	f7fe fbcf 	bl	80090a8 <HAL_GetTick>
 800a90a:	4602      	mov	r2, r0
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	1ad3      	subs	r3, r2, r3
 800a910:	2b05      	cmp	r3, #5
 800a912:	d90c      	bls.n	800a92e <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	2220      	movs	r2, #32
 800a918:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800a91a:	687b      	ldr	r3, [r7, #4]
 800a91c:	2203      	movs	r2, #3
 800a91e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	2200      	movs	r2, #0
 800a926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 800a92a:	2301      	movs	r3, #1
 800a92c:	e12d      	b.n	800ab8a <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 800a92e:	697b      	ldr	r3, [r7, #20]
 800a930:	681b      	ldr	r3, [r3, #0]
 800a932:	f003 0301 	and.w	r3, r3, #1
 800a936:	2b00      	cmp	r3, #0
 800a938:	d1e5      	bne.n	800a906 <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a93a:	687b      	ldr	r3, [r7, #4]
 800a93c:	681b      	ldr	r3, [r3, #0]
 800a93e:	4a2f      	ldr	r2, [pc, #188]	@ (800a9fc <HAL_DMA_Abort+0x444>)
 800a940:	4293      	cmp	r3, r2
 800a942:	d04a      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a944:	687b      	ldr	r3, [r7, #4]
 800a946:	681b      	ldr	r3, [r3, #0]
 800a948:	4a2d      	ldr	r2, [pc, #180]	@ (800aa00 <HAL_DMA_Abort+0x448>)
 800a94a:	4293      	cmp	r3, r2
 800a94c:	d045      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a94e:	687b      	ldr	r3, [r7, #4]
 800a950:	681b      	ldr	r3, [r3, #0]
 800a952:	4a2c      	ldr	r2, [pc, #176]	@ (800aa04 <HAL_DMA_Abort+0x44c>)
 800a954:	4293      	cmp	r3, r2
 800a956:	d040      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a958:	687b      	ldr	r3, [r7, #4]
 800a95a:	681b      	ldr	r3, [r3, #0]
 800a95c:	4a2a      	ldr	r2, [pc, #168]	@ (800aa08 <HAL_DMA_Abort+0x450>)
 800a95e:	4293      	cmp	r3, r2
 800a960:	d03b      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a962:	687b      	ldr	r3, [r7, #4]
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	4a29      	ldr	r2, [pc, #164]	@ (800aa0c <HAL_DMA_Abort+0x454>)
 800a968:	4293      	cmp	r3, r2
 800a96a:	d036      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	4a27      	ldr	r2, [pc, #156]	@ (800aa10 <HAL_DMA_Abort+0x458>)
 800a972:	4293      	cmp	r3, r2
 800a974:	d031      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a976:	687b      	ldr	r3, [r7, #4]
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	4a26      	ldr	r2, [pc, #152]	@ (800aa14 <HAL_DMA_Abort+0x45c>)
 800a97c:	4293      	cmp	r3, r2
 800a97e:	d02c      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a980:	687b      	ldr	r3, [r7, #4]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	4a24      	ldr	r2, [pc, #144]	@ (800aa18 <HAL_DMA_Abort+0x460>)
 800a986:	4293      	cmp	r3, r2
 800a988:	d027      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a98a:	687b      	ldr	r3, [r7, #4]
 800a98c:	681b      	ldr	r3, [r3, #0]
 800a98e:	4a23      	ldr	r2, [pc, #140]	@ (800aa1c <HAL_DMA_Abort+0x464>)
 800a990:	4293      	cmp	r3, r2
 800a992:	d022      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	681b      	ldr	r3, [r3, #0]
 800a998:	4a21      	ldr	r2, [pc, #132]	@ (800aa20 <HAL_DMA_Abort+0x468>)
 800a99a:	4293      	cmp	r3, r2
 800a99c:	d01d      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	681b      	ldr	r3, [r3, #0]
 800a9a2:	4a20      	ldr	r2, [pc, #128]	@ (800aa24 <HAL_DMA_Abort+0x46c>)
 800a9a4:	4293      	cmp	r3, r2
 800a9a6:	d018      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	4a1e      	ldr	r2, [pc, #120]	@ (800aa28 <HAL_DMA_Abort+0x470>)
 800a9ae:	4293      	cmp	r3, r2
 800a9b0:	d013      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a9b2:	687b      	ldr	r3, [r7, #4]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	4a1d      	ldr	r2, [pc, #116]	@ (800aa2c <HAL_DMA_Abort+0x474>)
 800a9b8:	4293      	cmp	r3, r2
 800a9ba:	d00e      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	4a1b      	ldr	r2, [pc, #108]	@ (800aa30 <HAL_DMA_Abort+0x478>)
 800a9c2:	4293      	cmp	r3, r2
 800a9c4:	d009      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a9c6:	687b      	ldr	r3, [r7, #4]
 800a9c8:	681b      	ldr	r3, [r3, #0]
 800a9ca:	4a1a      	ldr	r2, [pc, #104]	@ (800aa34 <HAL_DMA_Abort+0x47c>)
 800a9cc:	4293      	cmp	r3, r2
 800a9ce:	d004      	beq.n	800a9da <HAL_DMA_Abort+0x422>
 800a9d0:	687b      	ldr	r3, [r7, #4]
 800a9d2:	681b      	ldr	r3, [r3, #0]
 800a9d4:	4a18      	ldr	r2, [pc, #96]	@ (800aa38 <HAL_DMA_Abort+0x480>)
 800a9d6:	4293      	cmp	r3, r2
 800a9d8:	d101      	bne.n	800a9de <HAL_DMA_Abort+0x426>
 800a9da:	2301      	movs	r3, #1
 800a9dc:	e000      	b.n	800a9e0 <HAL_DMA_Abort+0x428>
 800a9de:	2300      	movs	r3, #0
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d02b      	beq.n	800aa3c <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a9e4:	687b      	ldr	r3, [r7, #4]
 800a9e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a9e8:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a9ea:	687b      	ldr	r3, [r7, #4]
 800a9ec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a9ee:	f003 031f 	and.w	r3, r3, #31
 800a9f2:	223f      	movs	r2, #63	@ 0x3f
 800a9f4:	409a      	lsls	r2, r3
 800a9f6:	68bb      	ldr	r3, [r7, #8]
 800a9f8:	609a      	str	r2, [r3, #8]
 800a9fa:	e02a      	b.n	800aa52 <HAL_DMA_Abort+0x49a>
 800a9fc:	40020010 	.word	0x40020010
 800aa00:	40020028 	.word	0x40020028
 800aa04:	40020040 	.word	0x40020040
 800aa08:	40020058 	.word	0x40020058
 800aa0c:	40020070 	.word	0x40020070
 800aa10:	40020088 	.word	0x40020088
 800aa14:	400200a0 	.word	0x400200a0
 800aa18:	400200b8 	.word	0x400200b8
 800aa1c:	40020410 	.word	0x40020410
 800aa20:	40020428 	.word	0x40020428
 800aa24:	40020440 	.word	0x40020440
 800aa28:	40020458 	.word	0x40020458
 800aa2c:	40020470 	.word	0x40020470
 800aa30:	40020488 	.word	0x40020488
 800aa34:	400204a0 	.word	0x400204a0
 800aa38:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800aa3c:	687b      	ldr	r3, [r7, #4]
 800aa3e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800aa40:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800aa42:	687b      	ldr	r3, [r7, #4]
 800aa44:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800aa46:	f003 031f 	and.w	r3, r3, #31
 800aa4a:	2201      	movs	r2, #1
 800aa4c:	409a      	lsls	r2, r3
 800aa4e:	68fb      	ldr	r3, [r7, #12]
 800aa50:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	681b      	ldr	r3, [r3, #0]
 800aa56:	4a4f      	ldr	r2, [pc, #316]	@ (800ab94 <HAL_DMA_Abort+0x5dc>)
 800aa58:	4293      	cmp	r3, r2
 800aa5a:	d072      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	681b      	ldr	r3, [r3, #0]
 800aa60:	4a4d      	ldr	r2, [pc, #308]	@ (800ab98 <HAL_DMA_Abort+0x5e0>)
 800aa62:	4293      	cmp	r3, r2
 800aa64:	d06d      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa66:	687b      	ldr	r3, [r7, #4]
 800aa68:	681b      	ldr	r3, [r3, #0]
 800aa6a:	4a4c      	ldr	r2, [pc, #304]	@ (800ab9c <HAL_DMA_Abort+0x5e4>)
 800aa6c:	4293      	cmp	r3, r2
 800aa6e:	d068      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa70:	687b      	ldr	r3, [r7, #4]
 800aa72:	681b      	ldr	r3, [r3, #0]
 800aa74:	4a4a      	ldr	r2, [pc, #296]	@ (800aba0 <HAL_DMA_Abort+0x5e8>)
 800aa76:	4293      	cmp	r3, r2
 800aa78:	d063      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	681b      	ldr	r3, [r3, #0]
 800aa7e:	4a49      	ldr	r2, [pc, #292]	@ (800aba4 <HAL_DMA_Abort+0x5ec>)
 800aa80:	4293      	cmp	r3, r2
 800aa82:	d05e      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	681b      	ldr	r3, [r3, #0]
 800aa88:	4a47      	ldr	r2, [pc, #284]	@ (800aba8 <HAL_DMA_Abort+0x5f0>)
 800aa8a:	4293      	cmp	r3, r2
 800aa8c:	d059      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa8e:	687b      	ldr	r3, [r7, #4]
 800aa90:	681b      	ldr	r3, [r3, #0]
 800aa92:	4a46      	ldr	r2, [pc, #280]	@ (800abac <HAL_DMA_Abort+0x5f4>)
 800aa94:	4293      	cmp	r3, r2
 800aa96:	d054      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	681b      	ldr	r3, [r3, #0]
 800aa9c:	4a44      	ldr	r2, [pc, #272]	@ (800abb0 <HAL_DMA_Abort+0x5f8>)
 800aa9e:	4293      	cmp	r3, r2
 800aaa0:	d04f      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aaa2:	687b      	ldr	r3, [r7, #4]
 800aaa4:	681b      	ldr	r3, [r3, #0]
 800aaa6:	4a43      	ldr	r2, [pc, #268]	@ (800abb4 <HAL_DMA_Abort+0x5fc>)
 800aaa8:	4293      	cmp	r3, r2
 800aaaa:	d04a      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	681b      	ldr	r3, [r3, #0]
 800aab0:	4a41      	ldr	r2, [pc, #260]	@ (800abb8 <HAL_DMA_Abort+0x600>)
 800aab2:	4293      	cmp	r3, r2
 800aab4:	d045      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	4a40      	ldr	r2, [pc, #256]	@ (800abbc <HAL_DMA_Abort+0x604>)
 800aabc:	4293      	cmp	r3, r2
 800aabe:	d040      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	4a3e      	ldr	r2, [pc, #248]	@ (800abc0 <HAL_DMA_Abort+0x608>)
 800aac6:	4293      	cmp	r3, r2
 800aac8:	d03b      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	681b      	ldr	r3, [r3, #0]
 800aace:	4a3d      	ldr	r2, [pc, #244]	@ (800abc4 <HAL_DMA_Abort+0x60c>)
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d036      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aad4:	687b      	ldr	r3, [r7, #4]
 800aad6:	681b      	ldr	r3, [r3, #0]
 800aad8:	4a3b      	ldr	r2, [pc, #236]	@ (800abc8 <HAL_DMA_Abort+0x610>)
 800aada:	4293      	cmp	r3, r2
 800aadc:	d031      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aade:	687b      	ldr	r3, [r7, #4]
 800aae0:	681b      	ldr	r3, [r3, #0]
 800aae2:	4a3a      	ldr	r2, [pc, #232]	@ (800abcc <HAL_DMA_Abort+0x614>)
 800aae4:	4293      	cmp	r3, r2
 800aae6:	d02c      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	681b      	ldr	r3, [r3, #0]
 800aaec:	4a38      	ldr	r2, [pc, #224]	@ (800abd0 <HAL_DMA_Abort+0x618>)
 800aaee:	4293      	cmp	r3, r2
 800aaf0:	d027      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aaf2:	687b      	ldr	r3, [r7, #4]
 800aaf4:	681b      	ldr	r3, [r3, #0]
 800aaf6:	4a37      	ldr	r2, [pc, #220]	@ (800abd4 <HAL_DMA_Abort+0x61c>)
 800aaf8:	4293      	cmp	r3, r2
 800aafa:	d022      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800aafc:	687b      	ldr	r3, [r7, #4]
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	4a35      	ldr	r2, [pc, #212]	@ (800abd8 <HAL_DMA_Abort+0x620>)
 800ab02:	4293      	cmp	r3, r2
 800ab04:	d01d      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800ab06:	687b      	ldr	r3, [r7, #4]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	4a34      	ldr	r2, [pc, #208]	@ (800abdc <HAL_DMA_Abort+0x624>)
 800ab0c:	4293      	cmp	r3, r2
 800ab0e:	d018      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800ab10:	687b      	ldr	r3, [r7, #4]
 800ab12:	681b      	ldr	r3, [r3, #0]
 800ab14:	4a32      	ldr	r2, [pc, #200]	@ (800abe0 <HAL_DMA_Abort+0x628>)
 800ab16:	4293      	cmp	r3, r2
 800ab18:	d013      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800ab1a:	687b      	ldr	r3, [r7, #4]
 800ab1c:	681b      	ldr	r3, [r3, #0]
 800ab1e:	4a31      	ldr	r2, [pc, #196]	@ (800abe4 <HAL_DMA_Abort+0x62c>)
 800ab20:	4293      	cmp	r3, r2
 800ab22:	d00e      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800ab24:	687b      	ldr	r3, [r7, #4]
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	4a2f      	ldr	r2, [pc, #188]	@ (800abe8 <HAL_DMA_Abort+0x630>)
 800ab2a:	4293      	cmp	r3, r2
 800ab2c:	d009      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	681b      	ldr	r3, [r3, #0]
 800ab32:	4a2e      	ldr	r2, [pc, #184]	@ (800abec <HAL_DMA_Abort+0x634>)
 800ab34:	4293      	cmp	r3, r2
 800ab36:	d004      	beq.n	800ab42 <HAL_DMA_Abort+0x58a>
 800ab38:	687b      	ldr	r3, [r7, #4]
 800ab3a:	681b      	ldr	r3, [r3, #0]
 800ab3c:	4a2c      	ldr	r2, [pc, #176]	@ (800abf0 <HAL_DMA_Abort+0x638>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d101      	bne.n	800ab46 <HAL_DMA_Abort+0x58e>
 800ab42:	2301      	movs	r3, #1
 800ab44:	e000      	b.n	800ab48 <HAL_DMA_Abort+0x590>
 800ab46:	2300      	movs	r3, #0
 800ab48:	2b00      	cmp	r3, #0
 800ab4a:	d015      	beq.n	800ab78 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800ab4c:	687b      	ldr	r3, [r7, #4]
 800ab4e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800ab50:	687a      	ldr	r2, [r7, #4]
 800ab52:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800ab54:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 800ab56:	687b      	ldr	r3, [r7, #4]
 800ab58:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab5a:	2b00      	cmp	r3, #0
 800ab5c:	d00c      	beq.n	800ab78 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800ab5e:	687b      	ldr	r3, [r7, #4]
 800ab60:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab62:	681a      	ldr	r2, [r3, #0]
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ab68:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800ab6c:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800ab6e:	687b      	ldr	r3, [r7, #4]
 800ab70:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800ab72:	687a      	ldr	r2, [r7, #4]
 800ab74:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800ab76:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	2201      	movs	r2, #1
 800ab7c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ab80:	687b      	ldr	r3, [r7, #4]
 800ab82:	2200      	movs	r2, #0
 800ab84:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 800ab88:	2300      	movs	r3, #0
}
 800ab8a:	4618      	mov	r0, r3
 800ab8c:	3718      	adds	r7, #24
 800ab8e:	46bd      	mov	sp, r7
 800ab90:	bd80      	pop	{r7, pc}
 800ab92:	bf00      	nop
 800ab94:	40020010 	.word	0x40020010
 800ab98:	40020028 	.word	0x40020028
 800ab9c:	40020040 	.word	0x40020040
 800aba0:	40020058 	.word	0x40020058
 800aba4:	40020070 	.word	0x40020070
 800aba8:	40020088 	.word	0x40020088
 800abac:	400200a0 	.word	0x400200a0
 800abb0:	400200b8 	.word	0x400200b8
 800abb4:	40020410 	.word	0x40020410
 800abb8:	40020428 	.word	0x40020428
 800abbc:	40020440 	.word	0x40020440
 800abc0:	40020458 	.word	0x40020458
 800abc4:	40020470 	.word	0x40020470
 800abc8:	40020488 	.word	0x40020488
 800abcc:	400204a0 	.word	0x400204a0
 800abd0:	400204b8 	.word	0x400204b8
 800abd4:	58025408 	.word	0x58025408
 800abd8:	5802541c 	.word	0x5802541c
 800abdc:	58025430 	.word	0x58025430
 800abe0:	58025444 	.word	0x58025444
 800abe4:	58025458 	.word	0x58025458
 800abe8:	5802546c 	.word	0x5802546c
 800abec:	58025480 	.word	0x58025480
 800abf0:	58025494 	.word	0x58025494

0800abf4 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800abf4:	b580      	push	{r7, lr}
 800abf6:	b084      	sub	sp, #16
 800abf8:	af00      	add	r7, sp, #0
 800abfa:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	2b00      	cmp	r3, #0
 800ac00:	d101      	bne.n	800ac06 <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 800ac02:	2301      	movs	r3, #1
 800ac04:	e237      	b.n	800b076 <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 800ac06:	687b      	ldr	r3, [r7, #4]
 800ac08:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ac0c:	b2db      	uxtb	r3, r3
 800ac0e:	2b02      	cmp	r3, #2
 800ac10:	d004      	beq.n	800ac1c <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	2280      	movs	r2, #128	@ 0x80
 800ac16:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 800ac18:	2301      	movs	r3, #1
 800ac1a:	e22c      	b.n	800b076 <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800ac1c:	687b      	ldr	r3, [r7, #4]
 800ac1e:	681b      	ldr	r3, [r3, #0]
 800ac20:	4a5c      	ldr	r2, [pc, #368]	@ (800ad94 <HAL_DMA_Abort_IT+0x1a0>)
 800ac22:	4293      	cmp	r3, r2
 800ac24:	d04a      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	681b      	ldr	r3, [r3, #0]
 800ac2a:	4a5b      	ldr	r2, [pc, #364]	@ (800ad98 <HAL_DMA_Abort_IT+0x1a4>)
 800ac2c:	4293      	cmp	r3, r2
 800ac2e:	d045      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	681b      	ldr	r3, [r3, #0]
 800ac34:	4a59      	ldr	r2, [pc, #356]	@ (800ad9c <HAL_DMA_Abort_IT+0x1a8>)
 800ac36:	4293      	cmp	r3, r2
 800ac38:	d040      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	4a58      	ldr	r2, [pc, #352]	@ (800ada0 <HAL_DMA_Abort_IT+0x1ac>)
 800ac40:	4293      	cmp	r3, r2
 800ac42:	d03b      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac44:	687b      	ldr	r3, [r7, #4]
 800ac46:	681b      	ldr	r3, [r3, #0]
 800ac48:	4a56      	ldr	r2, [pc, #344]	@ (800ada4 <HAL_DMA_Abort_IT+0x1b0>)
 800ac4a:	4293      	cmp	r3, r2
 800ac4c:	d036      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	681b      	ldr	r3, [r3, #0]
 800ac52:	4a55      	ldr	r2, [pc, #340]	@ (800ada8 <HAL_DMA_Abort_IT+0x1b4>)
 800ac54:	4293      	cmp	r3, r2
 800ac56:	d031      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	4a53      	ldr	r2, [pc, #332]	@ (800adac <HAL_DMA_Abort_IT+0x1b8>)
 800ac5e:	4293      	cmp	r3, r2
 800ac60:	d02c      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	681b      	ldr	r3, [r3, #0]
 800ac66:	4a52      	ldr	r2, [pc, #328]	@ (800adb0 <HAL_DMA_Abort_IT+0x1bc>)
 800ac68:	4293      	cmp	r3, r2
 800ac6a:	d027      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac6c:	687b      	ldr	r3, [r7, #4]
 800ac6e:	681b      	ldr	r3, [r3, #0]
 800ac70:	4a50      	ldr	r2, [pc, #320]	@ (800adb4 <HAL_DMA_Abort_IT+0x1c0>)
 800ac72:	4293      	cmp	r3, r2
 800ac74:	d022      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	681b      	ldr	r3, [r3, #0]
 800ac7a:	4a4f      	ldr	r2, [pc, #316]	@ (800adb8 <HAL_DMA_Abort_IT+0x1c4>)
 800ac7c:	4293      	cmp	r3, r2
 800ac7e:	d01d      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac80:	687b      	ldr	r3, [r7, #4]
 800ac82:	681b      	ldr	r3, [r3, #0]
 800ac84:	4a4d      	ldr	r2, [pc, #308]	@ (800adbc <HAL_DMA_Abort_IT+0x1c8>)
 800ac86:	4293      	cmp	r3, r2
 800ac88:	d018      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac8a:	687b      	ldr	r3, [r7, #4]
 800ac8c:	681b      	ldr	r3, [r3, #0]
 800ac8e:	4a4c      	ldr	r2, [pc, #304]	@ (800adc0 <HAL_DMA_Abort_IT+0x1cc>)
 800ac90:	4293      	cmp	r3, r2
 800ac92:	d013      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	681b      	ldr	r3, [r3, #0]
 800ac98:	4a4a      	ldr	r2, [pc, #296]	@ (800adc4 <HAL_DMA_Abort_IT+0x1d0>)
 800ac9a:	4293      	cmp	r3, r2
 800ac9c:	d00e      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	681b      	ldr	r3, [r3, #0]
 800aca2:	4a49      	ldr	r2, [pc, #292]	@ (800adc8 <HAL_DMA_Abort_IT+0x1d4>)
 800aca4:	4293      	cmp	r3, r2
 800aca6:	d009      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	681b      	ldr	r3, [r3, #0]
 800acac:	4a47      	ldr	r2, [pc, #284]	@ (800adcc <HAL_DMA_Abort_IT+0x1d8>)
 800acae:	4293      	cmp	r3, r2
 800acb0:	d004      	beq.n	800acbc <HAL_DMA_Abort_IT+0xc8>
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	4a46      	ldr	r2, [pc, #280]	@ (800add0 <HAL_DMA_Abort_IT+0x1dc>)
 800acb8:	4293      	cmp	r3, r2
 800acba:	d101      	bne.n	800acc0 <HAL_DMA_Abort_IT+0xcc>
 800acbc:	2301      	movs	r3, #1
 800acbe:	e000      	b.n	800acc2 <HAL_DMA_Abort_IT+0xce>
 800acc0:	2300      	movs	r3, #0
 800acc2:	2b00      	cmp	r3, #0
 800acc4:	f000 8086 	beq.w	800add4 <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	2204      	movs	r2, #4
 800accc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	4a2f      	ldr	r2, [pc, #188]	@ (800ad94 <HAL_DMA_Abort_IT+0x1a0>)
 800acd6:	4293      	cmp	r3, r2
 800acd8:	d04a      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	4a2e      	ldr	r2, [pc, #184]	@ (800ad98 <HAL_DMA_Abort_IT+0x1a4>)
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d045      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ace4:	687b      	ldr	r3, [r7, #4]
 800ace6:	681b      	ldr	r3, [r3, #0]
 800ace8:	4a2c      	ldr	r2, [pc, #176]	@ (800ad9c <HAL_DMA_Abort_IT+0x1a8>)
 800acea:	4293      	cmp	r3, r2
 800acec:	d040      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	4a2b      	ldr	r2, [pc, #172]	@ (800ada0 <HAL_DMA_Abort_IT+0x1ac>)
 800acf4:	4293      	cmp	r3, r2
 800acf6:	d03b      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	681b      	ldr	r3, [r3, #0]
 800acfc:	4a29      	ldr	r2, [pc, #164]	@ (800ada4 <HAL_DMA_Abort_IT+0x1b0>)
 800acfe:	4293      	cmp	r3, r2
 800ad00:	d036      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad02:	687b      	ldr	r3, [r7, #4]
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	4a28      	ldr	r2, [pc, #160]	@ (800ada8 <HAL_DMA_Abort_IT+0x1b4>)
 800ad08:	4293      	cmp	r3, r2
 800ad0a:	d031      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad0c:	687b      	ldr	r3, [r7, #4]
 800ad0e:	681b      	ldr	r3, [r3, #0]
 800ad10:	4a26      	ldr	r2, [pc, #152]	@ (800adac <HAL_DMA_Abort_IT+0x1b8>)
 800ad12:	4293      	cmp	r3, r2
 800ad14:	d02c      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad16:	687b      	ldr	r3, [r7, #4]
 800ad18:	681b      	ldr	r3, [r3, #0]
 800ad1a:	4a25      	ldr	r2, [pc, #148]	@ (800adb0 <HAL_DMA_Abort_IT+0x1bc>)
 800ad1c:	4293      	cmp	r3, r2
 800ad1e:	d027      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	4a23      	ldr	r2, [pc, #140]	@ (800adb4 <HAL_DMA_Abort_IT+0x1c0>)
 800ad26:	4293      	cmp	r3, r2
 800ad28:	d022      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad2a:	687b      	ldr	r3, [r7, #4]
 800ad2c:	681b      	ldr	r3, [r3, #0]
 800ad2e:	4a22      	ldr	r2, [pc, #136]	@ (800adb8 <HAL_DMA_Abort_IT+0x1c4>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d01d      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	681b      	ldr	r3, [r3, #0]
 800ad38:	4a20      	ldr	r2, [pc, #128]	@ (800adbc <HAL_DMA_Abort_IT+0x1c8>)
 800ad3a:	4293      	cmp	r3, r2
 800ad3c:	d018      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	681b      	ldr	r3, [r3, #0]
 800ad42:	4a1f      	ldr	r2, [pc, #124]	@ (800adc0 <HAL_DMA_Abort_IT+0x1cc>)
 800ad44:	4293      	cmp	r3, r2
 800ad46:	d013      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	681b      	ldr	r3, [r3, #0]
 800ad4c:	4a1d      	ldr	r2, [pc, #116]	@ (800adc4 <HAL_DMA_Abort_IT+0x1d0>)
 800ad4e:	4293      	cmp	r3, r2
 800ad50:	d00e      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad52:	687b      	ldr	r3, [r7, #4]
 800ad54:	681b      	ldr	r3, [r3, #0]
 800ad56:	4a1c      	ldr	r2, [pc, #112]	@ (800adc8 <HAL_DMA_Abort_IT+0x1d4>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d009      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	681b      	ldr	r3, [r3, #0]
 800ad60:	4a1a      	ldr	r2, [pc, #104]	@ (800adcc <HAL_DMA_Abort_IT+0x1d8>)
 800ad62:	4293      	cmp	r3, r2
 800ad64:	d004      	beq.n	800ad70 <HAL_DMA_Abort_IT+0x17c>
 800ad66:	687b      	ldr	r3, [r7, #4]
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	4a19      	ldr	r2, [pc, #100]	@ (800add0 <HAL_DMA_Abort_IT+0x1dc>)
 800ad6c:	4293      	cmp	r3, r2
 800ad6e:	d108      	bne.n	800ad82 <HAL_DMA_Abort_IT+0x18e>
 800ad70:	687b      	ldr	r3, [r7, #4]
 800ad72:	681b      	ldr	r3, [r3, #0]
 800ad74:	681a      	ldr	r2, [r3, #0]
 800ad76:	687b      	ldr	r3, [r7, #4]
 800ad78:	681b      	ldr	r3, [r3, #0]
 800ad7a:	f022 0201 	bic.w	r2, r2, #1
 800ad7e:	601a      	str	r2, [r3, #0]
 800ad80:	e178      	b.n	800b074 <HAL_DMA_Abort_IT+0x480>
 800ad82:	687b      	ldr	r3, [r7, #4]
 800ad84:	681b      	ldr	r3, [r3, #0]
 800ad86:	681a      	ldr	r2, [r3, #0]
 800ad88:	687b      	ldr	r3, [r7, #4]
 800ad8a:	681b      	ldr	r3, [r3, #0]
 800ad8c:	f022 0201 	bic.w	r2, r2, #1
 800ad90:	601a      	str	r2, [r3, #0]
 800ad92:	e16f      	b.n	800b074 <HAL_DMA_Abort_IT+0x480>
 800ad94:	40020010 	.word	0x40020010
 800ad98:	40020028 	.word	0x40020028
 800ad9c:	40020040 	.word	0x40020040
 800ada0:	40020058 	.word	0x40020058
 800ada4:	40020070 	.word	0x40020070
 800ada8:	40020088 	.word	0x40020088
 800adac:	400200a0 	.word	0x400200a0
 800adb0:	400200b8 	.word	0x400200b8
 800adb4:	40020410 	.word	0x40020410
 800adb8:	40020428 	.word	0x40020428
 800adbc:	40020440 	.word	0x40020440
 800adc0:	40020458 	.word	0x40020458
 800adc4:	40020470 	.word	0x40020470
 800adc8:	40020488 	.word	0x40020488
 800adcc:	400204a0 	.word	0x400204a0
 800add0:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 800add4:	687b      	ldr	r3, [r7, #4]
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	681a      	ldr	r2, [r3, #0]
 800adda:	687b      	ldr	r3, [r7, #4]
 800addc:	681b      	ldr	r3, [r3, #0]
 800adde:	f022 020e 	bic.w	r2, r2, #14
 800ade2:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	681b      	ldr	r3, [r3, #0]
 800ade8:	4a6c      	ldr	r2, [pc, #432]	@ (800af9c <HAL_DMA_Abort_IT+0x3a8>)
 800adea:	4293      	cmp	r3, r2
 800adec:	d04a      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	681b      	ldr	r3, [r3, #0]
 800adf2:	4a6b      	ldr	r2, [pc, #428]	@ (800afa0 <HAL_DMA_Abort_IT+0x3ac>)
 800adf4:	4293      	cmp	r3, r2
 800adf6:	d045      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	681b      	ldr	r3, [r3, #0]
 800adfc:	4a69      	ldr	r2, [pc, #420]	@ (800afa4 <HAL_DMA_Abort_IT+0x3b0>)
 800adfe:	4293      	cmp	r3, r2
 800ae00:	d040      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae02:	687b      	ldr	r3, [r7, #4]
 800ae04:	681b      	ldr	r3, [r3, #0]
 800ae06:	4a68      	ldr	r2, [pc, #416]	@ (800afa8 <HAL_DMA_Abort_IT+0x3b4>)
 800ae08:	4293      	cmp	r3, r2
 800ae0a:	d03b      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	4a66      	ldr	r2, [pc, #408]	@ (800afac <HAL_DMA_Abort_IT+0x3b8>)
 800ae12:	4293      	cmp	r3, r2
 800ae14:	d036      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae16:	687b      	ldr	r3, [r7, #4]
 800ae18:	681b      	ldr	r3, [r3, #0]
 800ae1a:	4a65      	ldr	r2, [pc, #404]	@ (800afb0 <HAL_DMA_Abort_IT+0x3bc>)
 800ae1c:	4293      	cmp	r3, r2
 800ae1e:	d031      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	4a63      	ldr	r2, [pc, #396]	@ (800afb4 <HAL_DMA_Abort_IT+0x3c0>)
 800ae26:	4293      	cmp	r3, r2
 800ae28:	d02c      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	681b      	ldr	r3, [r3, #0]
 800ae2e:	4a62      	ldr	r2, [pc, #392]	@ (800afb8 <HAL_DMA_Abort_IT+0x3c4>)
 800ae30:	4293      	cmp	r3, r2
 800ae32:	d027      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	681b      	ldr	r3, [r3, #0]
 800ae38:	4a60      	ldr	r2, [pc, #384]	@ (800afbc <HAL_DMA_Abort_IT+0x3c8>)
 800ae3a:	4293      	cmp	r3, r2
 800ae3c:	d022      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	681b      	ldr	r3, [r3, #0]
 800ae42:	4a5f      	ldr	r2, [pc, #380]	@ (800afc0 <HAL_DMA_Abort_IT+0x3cc>)
 800ae44:	4293      	cmp	r3, r2
 800ae46:	d01d      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	4a5d      	ldr	r2, [pc, #372]	@ (800afc4 <HAL_DMA_Abort_IT+0x3d0>)
 800ae4e:	4293      	cmp	r3, r2
 800ae50:	d018      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae52:	687b      	ldr	r3, [r7, #4]
 800ae54:	681b      	ldr	r3, [r3, #0]
 800ae56:	4a5c      	ldr	r2, [pc, #368]	@ (800afc8 <HAL_DMA_Abort_IT+0x3d4>)
 800ae58:	4293      	cmp	r3, r2
 800ae5a:	d013      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae5c:	687b      	ldr	r3, [r7, #4]
 800ae5e:	681b      	ldr	r3, [r3, #0]
 800ae60:	4a5a      	ldr	r2, [pc, #360]	@ (800afcc <HAL_DMA_Abort_IT+0x3d8>)
 800ae62:	4293      	cmp	r3, r2
 800ae64:	d00e      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	681b      	ldr	r3, [r3, #0]
 800ae6a:	4a59      	ldr	r2, [pc, #356]	@ (800afd0 <HAL_DMA_Abort_IT+0x3dc>)
 800ae6c:	4293      	cmp	r3, r2
 800ae6e:	d009      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae70:	687b      	ldr	r3, [r7, #4]
 800ae72:	681b      	ldr	r3, [r3, #0]
 800ae74:	4a57      	ldr	r2, [pc, #348]	@ (800afd4 <HAL_DMA_Abort_IT+0x3e0>)
 800ae76:	4293      	cmp	r3, r2
 800ae78:	d004      	beq.n	800ae84 <HAL_DMA_Abort_IT+0x290>
 800ae7a:	687b      	ldr	r3, [r7, #4]
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4a56      	ldr	r2, [pc, #344]	@ (800afd8 <HAL_DMA_Abort_IT+0x3e4>)
 800ae80:	4293      	cmp	r3, r2
 800ae82:	d108      	bne.n	800ae96 <HAL_DMA_Abort_IT+0x2a2>
 800ae84:	687b      	ldr	r3, [r7, #4]
 800ae86:	681b      	ldr	r3, [r3, #0]
 800ae88:	681a      	ldr	r2, [r3, #0]
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	681b      	ldr	r3, [r3, #0]
 800ae8e:	f022 0201 	bic.w	r2, r2, #1
 800ae92:	601a      	str	r2, [r3, #0]
 800ae94:	e007      	b.n	800aea6 <HAL_DMA_Abort_IT+0x2b2>
 800ae96:	687b      	ldr	r3, [r7, #4]
 800ae98:	681b      	ldr	r3, [r3, #0]
 800ae9a:	681a      	ldr	r2, [r3, #0]
 800ae9c:	687b      	ldr	r3, [r7, #4]
 800ae9e:	681b      	ldr	r3, [r3, #0]
 800aea0:	f022 0201 	bic.w	r2, r2, #1
 800aea4:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800aea6:	687b      	ldr	r3, [r7, #4]
 800aea8:	681b      	ldr	r3, [r3, #0]
 800aeaa:	4a3c      	ldr	r2, [pc, #240]	@ (800af9c <HAL_DMA_Abort_IT+0x3a8>)
 800aeac:	4293      	cmp	r3, r2
 800aeae:	d072      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aeb0:	687b      	ldr	r3, [r7, #4]
 800aeb2:	681b      	ldr	r3, [r3, #0]
 800aeb4:	4a3a      	ldr	r2, [pc, #232]	@ (800afa0 <HAL_DMA_Abort_IT+0x3ac>)
 800aeb6:	4293      	cmp	r3, r2
 800aeb8:	d06d      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aeba:	687b      	ldr	r3, [r7, #4]
 800aebc:	681b      	ldr	r3, [r3, #0]
 800aebe:	4a39      	ldr	r2, [pc, #228]	@ (800afa4 <HAL_DMA_Abort_IT+0x3b0>)
 800aec0:	4293      	cmp	r3, r2
 800aec2:	d068      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	4a37      	ldr	r2, [pc, #220]	@ (800afa8 <HAL_DMA_Abort_IT+0x3b4>)
 800aeca:	4293      	cmp	r3, r2
 800aecc:	d063      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	4a36      	ldr	r2, [pc, #216]	@ (800afac <HAL_DMA_Abort_IT+0x3b8>)
 800aed4:	4293      	cmp	r3, r2
 800aed6:	d05e      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	4a34      	ldr	r2, [pc, #208]	@ (800afb0 <HAL_DMA_Abort_IT+0x3bc>)
 800aede:	4293      	cmp	r3, r2
 800aee0:	d059      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	681b      	ldr	r3, [r3, #0]
 800aee6:	4a33      	ldr	r2, [pc, #204]	@ (800afb4 <HAL_DMA_Abort_IT+0x3c0>)
 800aee8:	4293      	cmp	r3, r2
 800aeea:	d054      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aeec:	687b      	ldr	r3, [r7, #4]
 800aeee:	681b      	ldr	r3, [r3, #0]
 800aef0:	4a31      	ldr	r2, [pc, #196]	@ (800afb8 <HAL_DMA_Abort_IT+0x3c4>)
 800aef2:	4293      	cmp	r3, r2
 800aef4:	d04f      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800aef6:	687b      	ldr	r3, [r7, #4]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	4a30      	ldr	r2, [pc, #192]	@ (800afbc <HAL_DMA_Abort_IT+0x3c8>)
 800aefc:	4293      	cmp	r3, r2
 800aefe:	d04a      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af00:	687b      	ldr	r3, [r7, #4]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	4a2e      	ldr	r2, [pc, #184]	@ (800afc0 <HAL_DMA_Abort_IT+0x3cc>)
 800af06:	4293      	cmp	r3, r2
 800af08:	d045      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af0a:	687b      	ldr	r3, [r7, #4]
 800af0c:	681b      	ldr	r3, [r3, #0]
 800af0e:	4a2d      	ldr	r2, [pc, #180]	@ (800afc4 <HAL_DMA_Abort_IT+0x3d0>)
 800af10:	4293      	cmp	r3, r2
 800af12:	d040      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af14:	687b      	ldr	r3, [r7, #4]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	4a2b      	ldr	r2, [pc, #172]	@ (800afc8 <HAL_DMA_Abort_IT+0x3d4>)
 800af1a:	4293      	cmp	r3, r2
 800af1c:	d03b      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af1e:	687b      	ldr	r3, [r7, #4]
 800af20:	681b      	ldr	r3, [r3, #0]
 800af22:	4a2a      	ldr	r2, [pc, #168]	@ (800afcc <HAL_DMA_Abort_IT+0x3d8>)
 800af24:	4293      	cmp	r3, r2
 800af26:	d036      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af28:	687b      	ldr	r3, [r7, #4]
 800af2a:	681b      	ldr	r3, [r3, #0]
 800af2c:	4a28      	ldr	r2, [pc, #160]	@ (800afd0 <HAL_DMA_Abort_IT+0x3dc>)
 800af2e:	4293      	cmp	r3, r2
 800af30:	d031      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af32:	687b      	ldr	r3, [r7, #4]
 800af34:	681b      	ldr	r3, [r3, #0]
 800af36:	4a27      	ldr	r2, [pc, #156]	@ (800afd4 <HAL_DMA_Abort_IT+0x3e0>)
 800af38:	4293      	cmp	r3, r2
 800af3a:	d02c      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af3c:	687b      	ldr	r3, [r7, #4]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	4a25      	ldr	r2, [pc, #148]	@ (800afd8 <HAL_DMA_Abort_IT+0x3e4>)
 800af42:	4293      	cmp	r3, r2
 800af44:	d027      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af46:	687b      	ldr	r3, [r7, #4]
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	4a24      	ldr	r2, [pc, #144]	@ (800afdc <HAL_DMA_Abort_IT+0x3e8>)
 800af4c:	4293      	cmp	r3, r2
 800af4e:	d022      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af50:	687b      	ldr	r3, [r7, #4]
 800af52:	681b      	ldr	r3, [r3, #0]
 800af54:	4a22      	ldr	r2, [pc, #136]	@ (800afe0 <HAL_DMA_Abort_IT+0x3ec>)
 800af56:	4293      	cmp	r3, r2
 800af58:	d01d      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af5a:	687b      	ldr	r3, [r7, #4]
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	4a21      	ldr	r2, [pc, #132]	@ (800afe4 <HAL_DMA_Abort_IT+0x3f0>)
 800af60:	4293      	cmp	r3, r2
 800af62:	d018      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	4a1f      	ldr	r2, [pc, #124]	@ (800afe8 <HAL_DMA_Abort_IT+0x3f4>)
 800af6a:	4293      	cmp	r3, r2
 800af6c:	d013      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	681b      	ldr	r3, [r3, #0]
 800af72:	4a1e      	ldr	r2, [pc, #120]	@ (800afec <HAL_DMA_Abort_IT+0x3f8>)
 800af74:	4293      	cmp	r3, r2
 800af76:	d00e      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	4a1c      	ldr	r2, [pc, #112]	@ (800aff0 <HAL_DMA_Abort_IT+0x3fc>)
 800af7e:	4293      	cmp	r3, r2
 800af80:	d009      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af82:	687b      	ldr	r3, [r7, #4]
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	4a1b      	ldr	r2, [pc, #108]	@ (800aff4 <HAL_DMA_Abort_IT+0x400>)
 800af88:	4293      	cmp	r3, r2
 800af8a:	d004      	beq.n	800af96 <HAL_DMA_Abort_IT+0x3a2>
 800af8c:	687b      	ldr	r3, [r7, #4]
 800af8e:	681b      	ldr	r3, [r3, #0]
 800af90:	4a19      	ldr	r2, [pc, #100]	@ (800aff8 <HAL_DMA_Abort_IT+0x404>)
 800af92:	4293      	cmp	r3, r2
 800af94:	d132      	bne.n	800affc <HAL_DMA_Abort_IT+0x408>
 800af96:	2301      	movs	r3, #1
 800af98:	e031      	b.n	800affe <HAL_DMA_Abort_IT+0x40a>
 800af9a:	bf00      	nop
 800af9c:	40020010 	.word	0x40020010
 800afa0:	40020028 	.word	0x40020028
 800afa4:	40020040 	.word	0x40020040
 800afa8:	40020058 	.word	0x40020058
 800afac:	40020070 	.word	0x40020070
 800afb0:	40020088 	.word	0x40020088
 800afb4:	400200a0 	.word	0x400200a0
 800afb8:	400200b8 	.word	0x400200b8
 800afbc:	40020410 	.word	0x40020410
 800afc0:	40020428 	.word	0x40020428
 800afc4:	40020440 	.word	0x40020440
 800afc8:	40020458 	.word	0x40020458
 800afcc:	40020470 	.word	0x40020470
 800afd0:	40020488 	.word	0x40020488
 800afd4:	400204a0 	.word	0x400204a0
 800afd8:	400204b8 	.word	0x400204b8
 800afdc:	58025408 	.word	0x58025408
 800afe0:	5802541c 	.word	0x5802541c
 800afe4:	58025430 	.word	0x58025430
 800afe8:	58025444 	.word	0x58025444
 800afec:	58025458 	.word	0x58025458
 800aff0:	5802546c 	.word	0x5802546c
 800aff4:	58025480 	.word	0x58025480
 800aff8:	58025494 	.word	0x58025494
 800affc:	2300      	movs	r3, #0
 800affe:	2b00      	cmp	r3, #0
 800b000:	d028      	beq.n	800b054 <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b006:	681a      	ldr	r2, [r3, #0]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800b00c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b010:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b016:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b01c:	f003 031f 	and.w	r3, r3, #31
 800b020:	2201      	movs	r2, #1
 800b022:	409a      	lsls	r2, r3
 800b024:	68fb      	ldr	r3, [r7, #12]
 800b026:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800b028:	687b      	ldr	r3, [r7, #4]
 800b02a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800b02c:	687a      	ldr	r2, [r7, #4]
 800b02e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800b030:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 800b032:	687b      	ldr	r3, [r7, #4]
 800b034:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b036:	2b00      	cmp	r3, #0
 800b038:	d00c      	beq.n	800b054 <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800b03a:	687b      	ldr	r3, [r7, #4]
 800b03c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b03e:	681a      	ldr	r2, [r3, #0]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800b044:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800b048:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800b04a:	687b      	ldr	r3, [r7, #4]
 800b04c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800b04e:	687a      	ldr	r2, [r7, #4]
 800b050:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800b052:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800b054:	687b      	ldr	r3, [r7, #4]
 800b056:	2201      	movs	r2, #1
 800b058:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 800b064:	687b      	ldr	r3, [r7, #4]
 800b066:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b068:	2b00      	cmp	r3, #0
 800b06a:	d003      	beq.n	800b074 <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 800b06c:	687b      	ldr	r3, [r7, #4]
 800b06e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b070:	6878      	ldr	r0, [r7, #4]
 800b072:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 800b074:	2300      	movs	r3, #0
}
 800b076:	4618      	mov	r0, r3
 800b078:	3710      	adds	r7, #16
 800b07a:	46bd      	mov	sp, r7
 800b07c:	bd80      	pop	{r7, pc}
 800b07e:	bf00      	nop

0800b080 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800b080:	b580      	push	{r7, lr}
 800b082:	b08a      	sub	sp, #40	@ 0x28
 800b084:	af00      	add	r7, sp, #0
 800b086:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 800b088:	2300      	movs	r3, #0
 800b08a:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 800b08c:	4b67      	ldr	r3, [pc, #412]	@ (800b22c <HAL_DMA_IRQHandler+0x1ac>)
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	4a67      	ldr	r2, [pc, #412]	@ (800b230 <HAL_DMA_IRQHandler+0x1b0>)
 800b092:	fba2 2303 	umull	r2, r3, r2, r3
 800b096:	0a9b      	lsrs	r3, r3, #10
 800b098:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b09e:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800b0a0:	687b      	ldr	r3, [r7, #4]
 800b0a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800b0a4:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 800b0a6:	6a3b      	ldr	r3, [r7, #32]
 800b0a8:	681b      	ldr	r3, [r3, #0]
 800b0aa:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 800b0ac:	69fb      	ldr	r3, [r7, #28]
 800b0ae:	681b      	ldr	r3, [r3, #0]
 800b0b0:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 800b0b2:	687b      	ldr	r3, [r7, #4]
 800b0b4:	681b      	ldr	r3, [r3, #0]
 800b0b6:	4a5f      	ldr	r2, [pc, #380]	@ (800b234 <HAL_DMA_IRQHandler+0x1b4>)
 800b0b8:	4293      	cmp	r3, r2
 800b0ba:	d04a      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	681b      	ldr	r3, [r3, #0]
 800b0c0:	4a5d      	ldr	r2, [pc, #372]	@ (800b238 <HAL_DMA_IRQHandler+0x1b8>)
 800b0c2:	4293      	cmp	r3, r2
 800b0c4:	d045      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	681b      	ldr	r3, [r3, #0]
 800b0ca:	4a5c      	ldr	r2, [pc, #368]	@ (800b23c <HAL_DMA_IRQHandler+0x1bc>)
 800b0cc:	4293      	cmp	r3, r2
 800b0ce:	d040      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0d0:	687b      	ldr	r3, [r7, #4]
 800b0d2:	681b      	ldr	r3, [r3, #0]
 800b0d4:	4a5a      	ldr	r2, [pc, #360]	@ (800b240 <HAL_DMA_IRQHandler+0x1c0>)
 800b0d6:	4293      	cmp	r3, r2
 800b0d8:	d03b      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0da:	687b      	ldr	r3, [r7, #4]
 800b0dc:	681b      	ldr	r3, [r3, #0]
 800b0de:	4a59      	ldr	r2, [pc, #356]	@ (800b244 <HAL_DMA_IRQHandler+0x1c4>)
 800b0e0:	4293      	cmp	r3, r2
 800b0e2:	d036      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0e4:	687b      	ldr	r3, [r7, #4]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	4a57      	ldr	r2, [pc, #348]	@ (800b248 <HAL_DMA_IRQHandler+0x1c8>)
 800b0ea:	4293      	cmp	r3, r2
 800b0ec:	d031      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	4a56      	ldr	r2, [pc, #344]	@ (800b24c <HAL_DMA_IRQHandler+0x1cc>)
 800b0f4:	4293      	cmp	r3, r2
 800b0f6:	d02c      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b0f8:	687b      	ldr	r3, [r7, #4]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	4a54      	ldr	r2, [pc, #336]	@ (800b250 <HAL_DMA_IRQHandler+0x1d0>)
 800b0fe:	4293      	cmp	r3, r2
 800b100:	d027      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b102:	687b      	ldr	r3, [r7, #4]
 800b104:	681b      	ldr	r3, [r3, #0]
 800b106:	4a53      	ldr	r2, [pc, #332]	@ (800b254 <HAL_DMA_IRQHandler+0x1d4>)
 800b108:	4293      	cmp	r3, r2
 800b10a:	d022      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b10c:	687b      	ldr	r3, [r7, #4]
 800b10e:	681b      	ldr	r3, [r3, #0]
 800b110:	4a51      	ldr	r2, [pc, #324]	@ (800b258 <HAL_DMA_IRQHandler+0x1d8>)
 800b112:	4293      	cmp	r3, r2
 800b114:	d01d      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	4a50      	ldr	r2, [pc, #320]	@ (800b25c <HAL_DMA_IRQHandler+0x1dc>)
 800b11c:	4293      	cmp	r3, r2
 800b11e:	d018      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	681b      	ldr	r3, [r3, #0]
 800b124:	4a4e      	ldr	r2, [pc, #312]	@ (800b260 <HAL_DMA_IRQHandler+0x1e0>)
 800b126:	4293      	cmp	r3, r2
 800b128:	d013      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b12a:	687b      	ldr	r3, [r7, #4]
 800b12c:	681b      	ldr	r3, [r3, #0]
 800b12e:	4a4d      	ldr	r2, [pc, #308]	@ (800b264 <HAL_DMA_IRQHandler+0x1e4>)
 800b130:	4293      	cmp	r3, r2
 800b132:	d00e      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b134:	687b      	ldr	r3, [r7, #4]
 800b136:	681b      	ldr	r3, [r3, #0]
 800b138:	4a4b      	ldr	r2, [pc, #300]	@ (800b268 <HAL_DMA_IRQHandler+0x1e8>)
 800b13a:	4293      	cmp	r3, r2
 800b13c:	d009      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b13e:	687b      	ldr	r3, [r7, #4]
 800b140:	681b      	ldr	r3, [r3, #0]
 800b142:	4a4a      	ldr	r2, [pc, #296]	@ (800b26c <HAL_DMA_IRQHandler+0x1ec>)
 800b144:	4293      	cmp	r3, r2
 800b146:	d004      	beq.n	800b152 <HAL_DMA_IRQHandler+0xd2>
 800b148:	687b      	ldr	r3, [r7, #4]
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	4a48      	ldr	r2, [pc, #288]	@ (800b270 <HAL_DMA_IRQHandler+0x1f0>)
 800b14e:	4293      	cmp	r3, r2
 800b150:	d101      	bne.n	800b156 <HAL_DMA_IRQHandler+0xd6>
 800b152:	2301      	movs	r3, #1
 800b154:	e000      	b.n	800b158 <HAL_DMA_IRQHandler+0xd8>
 800b156:	2300      	movs	r3, #0
 800b158:	2b00      	cmp	r3, #0
 800b15a:	f000 842b 	beq.w	800b9b4 <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b15e:	687b      	ldr	r3, [r7, #4]
 800b160:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b162:	f003 031f 	and.w	r3, r3, #31
 800b166:	2208      	movs	r2, #8
 800b168:	409a      	lsls	r2, r3
 800b16a:	69bb      	ldr	r3, [r7, #24]
 800b16c:	4013      	ands	r3, r2
 800b16e:	2b00      	cmp	r3, #0
 800b170:	f000 80a2 	beq.w	800b2b8 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 800b174:	687b      	ldr	r3, [r7, #4]
 800b176:	681b      	ldr	r3, [r3, #0]
 800b178:	4a2e      	ldr	r2, [pc, #184]	@ (800b234 <HAL_DMA_IRQHandler+0x1b4>)
 800b17a:	4293      	cmp	r3, r2
 800b17c:	d04a      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	681b      	ldr	r3, [r3, #0]
 800b182:	4a2d      	ldr	r2, [pc, #180]	@ (800b238 <HAL_DMA_IRQHandler+0x1b8>)
 800b184:	4293      	cmp	r3, r2
 800b186:	d045      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	4a2b      	ldr	r2, [pc, #172]	@ (800b23c <HAL_DMA_IRQHandler+0x1bc>)
 800b18e:	4293      	cmp	r3, r2
 800b190:	d040      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b192:	687b      	ldr	r3, [r7, #4]
 800b194:	681b      	ldr	r3, [r3, #0]
 800b196:	4a2a      	ldr	r2, [pc, #168]	@ (800b240 <HAL_DMA_IRQHandler+0x1c0>)
 800b198:	4293      	cmp	r3, r2
 800b19a:	d03b      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b19c:	687b      	ldr	r3, [r7, #4]
 800b19e:	681b      	ldr	r3, [r3, #0]
 800b1a0:	4a28      	ldr	r2, [pc, #160]	@ (800b244 <HAL_DMA_IRQHandler+0x1c4>)
 800b1a2:	4293      	cmp	r3, r2
 800b1a4:	d036      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a27      	ldr	r2, [pc, #156]	@ (800b248 <HAL_DMA_IRQHandler+0x1c8>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d031      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1b0:	687b      	ldr	r3, [r7, #4]
 800b1b2:	681b      	ldr	r3, [r3, #0]
 800b1b4:	4a25      	ldr	r2, [pc, #148]	@ (800b24c <HAL_DMA_IRQHandler+0x1cc>)
 800b1b6:	4293      	cmp	r3, r2
 800b1b8:	d02c      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	681b      	ldr	r3, [r3, #0]
 800b1be:	4a24      	ldr	r2, [pc, #144]	@ (800b250 <HAL_DMA_IRQHandler+0x1d0>)
 800b1c0:	4293      	cmp	r3, r2
 800b1c2:	d027      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1c4:	687b      	ldr	r3, [r7, #4]
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	4a22      	ldr	r2, [pc, #136]	@ (800b254 <HAL_DMA_IRQHandler+0x1d4>)
 800b1ca:	4293      	cmp	r3, r2
 800b1cc:	d022      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	4a21      	ldr	r2, [pc, #132]	@ (800b258 <HAL_DMA_IRQHandler+0x1d8>)
 800b1d4:	4293      	cmp	r3, r2
 800b1d6:	d01d      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	4a1f      	ldr	r2, [pc, #124]	@ (800b25c <HAL_DMA_IRQHandler+0x1dc>)
 800b1de:	4293      	cmp	r3, r2
 800b1e0:	d018      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4a1e      	ldr	r2, [pc, #120]	@ (800b260 <HAL_DMA_IRQHandler+0x1e0>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d013      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4a1c      	ldr	r2, [pc, #112]	@ (800b264 <HAL_DMA_IRQHandler+0x1e4>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	d00e      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	681b      	ldr	r3, [r3, #0]
 800b1fa:	4a1b      	ldr	r2, [pc, #108]	@ (800b268 <HAL_DMA_IRQHandler+0x1e8>)
 800b1fc:	4293      	cmp	r3, r2
 800b1fe:	d009      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	681b      	ldr	r3, [r3, #0]
 800b204:	4a19      	ldr	r2, [pc, #100]	@ (800b26c <HAL_DMA_IRQHandler+0x1ec>)
 800b206:	4293      	cmp	r3, r2
 800b208:	d004      	beq.n	800b214 <HAL_DMA_IRQHandler+0x194>
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	681b      	ldr	r3, [r3, #0]
 800b20e:	4a18      	ldr	r2, [pc, #96]	@ (800b270 <HAL_DMA_IRQHandler+0x1f0>)
 800b210:	4293      	cmp	r3, r2
 800b212:	d12f      	bne.n	800b274 <HAL_DMA_IRQHandler+0x1f4>
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	681b      	ldr	r3, [r3, #0]
 800b21a:	f003 0304 	and.w	r3, r3, #4
 800b21e:	2b00      	cmp	r3, #0
 800b220:	bf14      	ite	ne
 800b222:	2301      	movne	r3, #1
 800b224:	2300      	moveq	r3, #0
 800b226:	b2db      	uxtb	r3, r3
 800b228:	e02e      	b.n	800b288 <HAL_DMA_IRQHandler+0x208>
 800b22a:	bf00      	nop
 800b22c:	24000400 	.word	0x24000400
 800b230:	1b4e81b5 	.word	0x1b4e81b5
 800b234:	40020010 	.word	0x40020010
 800b238:	40020028 	.word	0x40020028
 800b23c:	40020040 	.word	0x40020040
 800b240:	40020058 	.word	0x40020058
 800b244:	40020070 	.word	0x40020070
 800b248:	40020088 	.word	0x40020088
 800b24c:	400200a0 	.word	0x400200a0
 800b250:	400200b8 	.word	0x400200b8
 800b254:	40020410 	.word	0x40020410
 800b258:	40020428 	.word	0x40020428
 800b25c:	40020440 	.word	0x40020440
 800b260:	40020458 	.word	0x40020458
 800b264:	40020470 	.word	0x40020470
 800b268:	40020488 	.word	0x40020488
 800b26c:	400204a0 	.word	0x400204a0
 800b270:	400204b8 	.word	0x400204b8
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	681b      	ldr	r3, [r3, #0]
 800b278:	681b      	ldr	r3, [r3, #0]
 800b27a:	f003 0308 	and.w	r3, r3, #8
 800b27e:	2b00      	cmp	r3, #0
 800b280:	bf14      	ite	ne
 800b282:	2301      	movne	r3, #1
 800b284:	2300      	moveq	r3, #0
 800b286:	b2db      	uxtb	r3, r3
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d015      	beq.n	800b2b8 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	681b      	ldr	r3, [r3, #0]
 800b290:	681a      	ldr	r2, [r3, #0]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	681b      	ldr	r3, [r3, #0]
 800b296:	f022 0204 	bic.w	r2, r2, #4
 800b29a:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b29c:	687b      	ldr	r3, [r7, #4]
 800b29e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2a0:	f003 031f 	and.w	r3, r3, #31
 800b2a4:	2208      	movs	r2, #8
 800b2a6:	409a      	lsls	r2, r3
 800b2a8:	6a3b      	ldr	r3, [r7, #32]
 800b2aa:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800b2ac:	687b      	ldr	r3, [r7, #4]
 800b2ae:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b2b0:	f043 0201 	orr.w	r2, r3, #1
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b2b8:	687b      	ldr	r3, [r7, #4]
 800b2ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b2bc:	f003 031f 	and.w	r3, r3, #31
 800b2c0:	69ba      	ldr	r2, [r7, #24]
 800b2c2:	fa22 f303 	lsr.w	r3, r2, r3
 800b2c6:	f003 0301 	and.w	r3, r3, #1
 800b2ca:	2b00      	cmp	r3, #0
 800b2cc:	d06e      	beq.n	800b3ac <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 800b2ce:	687b      	ldr	r3, [r7, #4]
 800b2d0:	681b      	ldr	r3, [r3, #0]
 800b2d2:	4a69      	ldr	r2, [pc, #420]	@ (800b478 <HAL_DMA_IRQHandler+0x3f8>)
 800b2d4:	4293      	cmp	r3, r2
 800b2d6:	d04a      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	4a67      	ldr	r2, [pc, #412]	@ (800b47c <HAL_DMA_IRQHandler+0x3fc>)
 800b2de:	4293      	cmp	r3, r2
 800b2e0:	d045      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b2e2:	687b      	ldr	r3, [r7, #4]
 800b2e4:	681b      	ldr	r3, [r3, #0]
 800b2e6:	4a66      	ldr	r2, [pc, #408]	@ (800b480 <HAL_DMA_IRQHandler+0x400>)
 800b2e8:	4293      	cmp	r3, r2
 800b2ea:	d040      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b2ec:	687b      	ldr	r3, [r7, #4]
 800b2ee:	681b      	ldr	r3, [r3, #0]
 800b2f0:	4a64      	ldr	r2, [pc, #400]	@ (800b484 <HAL_DMA_IRQHandler+0x404>)
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	d03b      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	4a63      	ldr	r2, [pc, #396]	@ (800b488 <HAL_DMA_IRQHandler+0x408>)
 800b2fc:	4293      	cmp	r3, r2
 800b2fe:	d036      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a61      	ldr	r2, [pc, #388]	@ (800b48c <HAL_DMA_IRQHandler+0x40c>)
 800b306:	4293      	cmp	r3, r2
 800b308:	d031      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b30a:	687b      	ldr	r3, [r7, #4]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	4a60      	ldr	r2, [pc, #384]	@ (800b490 <HAL_DMA_IRQHandler+0x410>)
 800b310:	4293      	cmp	r3, r2
 800b312:	d02c      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	4a5e      	ldr	r2, [pc, #376]	@ (800b494 <HAL_DMA_IRQHandler+0x414>)
 800b31a:	4293      	cmp	r3, r2
 800b31c:	d027      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	681b      	ldr	r3, [r3, #0]
 800b322:	4a5d      	ldr	r2, [pc, #372]	@ (800b498 <HAL_DMA_IRQHandler+0x418>)
 800b324:	4293      	cmp	r3, r2
 800b326:	d022      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b328:	687b      	ldr	r3, [r7, #4]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	4a5b      	ldr	r2, [pc, #364]	@ (800b49c <HAL_DMA_IRQHandler+0x41c>)
 800b32e:	4293      	cmp	r3, r2
 800b330:	d01d      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b332:	687b      	ldr	r3, [r7, #4]
 800b334:	681b      	ldr	r3, [r3, #0]
 800b336:	4a5a      	ldr	r2, [pc, #360]	@ (800b4a0 <HAL_DMA_IRQHandler+0x420>)
 800b338:	4293      	cmp	r3, r2
 800b33a:	d018      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b33c:	687b      	ldr	r3, [r7, #4]
 800b33e:	681b      	ldr	r3, [r3, #0]
 800b340:	4a58      	ldr	r2, [pc, #352]	@ (800b4a4 <HAL_DMA_IRQHandler+0x424>)
 800b342:	4293      	cmp	r3, r2
 800b344:	d013      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b346:	687b      	ldr	r3, [r7, #4]
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	4a57      	ldr	r2, [pc, #348]	@ (800b4a8 <HAL_DMA_IRQHandler+0x428>)
 800b34c:	4293      	cmp	r3, r2
 800b34e:	d00e      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b350:	687b      	ldr	r3, [r7, #4]
 800b352:	681b      	ldr	r3, [r3, #0]
 800b354:	4a55      	ldr	r2, [pc, #340]	@ (800b4ac <HAL_DMA_IRQHandler+0x42c>)
 800b356:	4293      	cmp	r3, r2
 800b358:	d009      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b35a:	687b      	ldr	r3, [r7, #4]
 800b35c:	681b      	ldr	r3, [r3, #0]
 800b35e:	4a54      	ldr	r2, [pc, #336]	@ (800b4b0 <HAL_DMA_IRQHandler+0x430>)
 800b360:	4293      	cmp	r3, r2
 800b362:	d004      	beq.n	800b36e <HAL_DMA_IRQHandler+0x2ee>
 800b364:	687b      	ldr	r3, [r7, #4]
 800b366:	681b      	ldr	r3, [r3, #0]
 800b368:	4a52      	ldr	r2, [pc, #328]	@ (800b4b4 <HAL_DMA_IRQHandler+0x434>)
 800b36a:	4293      	cmp	r3, r2
 800b36c:	d10a      	bne.n	800b384 <HAL_DMA_IRQHandler+0x304>
 800b36e:	687b      	ldr	r3, [r7, #4]
 800b370:	681b      	ldr	r3, [r3, #0]
 800b372:	695b      	ldr	r3, [r3, #20]
 800b374:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800b378:	2b00      	cmp	r3, #0
 800b37a:	bf14      	ite	ne
 800b37c:	2301      	movne	r3, #1
 800b37e:	2300      	moveq	r3, #0
 800b380:	b2db      	uxtb	r3, r3
 800b382:	e003      	b.n	800b38c <HAL_DMA_IRQHandler+0x30c>
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	681b      	ldr	r3, [r3, #0]
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2300      	movs	r3, #0
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	d00d      	beq.n	800b3ac <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b390:	687b      	ldr	r3, [r7, #4]
 800b392:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b394:	f003 031f 	and.w	r3, r3, #31
 800b398:	2201      	movs	r2, #1
 800b39a:	409a      	lsls	r2, r3
 800b39c:	6a3b      	ldr	r3, [r7, #32]
 800b39e:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800b3a0:	687b      	ldr	r3, [r7, #4]
 800b3a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b3a4:	f043 0202 	orr.w	r2, r3, #2
 800b3a8:	687b      	ldr	r3, [r7, #4]
 800b3aa:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b3ac:	687b      	ldr	r3, [r7, #4]
 800b3ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b3b0:	f003 031f 	and.w	r3, r3, #31
 800b3b4:	2204      	movs	r2, #4
 800b3b6:	409a      	lsls	r2, r3
 800b3b8:	69bb      	ldr	r3, [r7, #24]
 800b3ba:	4013      	ands	r3, r2
 800b3bc:	2b00      	cmp	r3, #0
 800b3be:	f000 808f 	beq.w	800b4e0 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	681b      	ldr	r3, [r3, #0]
 800b3c6:	4a2c      	ldr	r2, [pc, #176]	@ (800b478 <HAL_DMA_IRQHandler+0x3f8>)
 800b3c8:	4293      	cmp	r3, r2
 800b3ca:	d04a      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b3cc:	687b      	ldr	r3, [r7, #4]
 800b3ce:	681b      	ldr	r3, [r3, #0]
 800b3d0:	4a2a      	ldr	r2, [pc, #168]	@ (800b47c <HAL_DMA_IRQHandler+0x3fc>)
 800b3d2:	4293      	cmp	r3, r2
 800b3d4:	d045      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b3d6:	687b      	ldr	r3, [r7, #4]
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	4a29      	ldr	r2, [pc, #164]	@ (800b480 <HAL_DMA_IRQHandler+0x400>)
 800b3dc:	4293      	cmp	r3, r2
 800b3de:	d040      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b3e0:	687b      	ldr	r3, [r7, #4]
 800b3e2:	681b      	ldr	r3, [r3, #0]
 800b3e4:	4a27      	ldr	r2, [pc, #156]	@ (800b484 <HAL_DMA_IRQHandler+0x404>)
 800b3e6:	4293      	cmp	r3, r2
 800b3e8:	d03b      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b3ea:	687b      	ldr	r3, [r7, #4]
 800b3ec:	681b      	ldr	r3, [r3, #0]
 800b3ee:	4a26      	ldr	r2, [pc, #152]	@ (800b488 <HAL_DMA_IRQHandler+0x408>)
 800b3f0:	4293      	cmp	r3, r2
 800b3f2:	d036      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b3f4:	687b      	ldr	r3, [r7, #4]
 800b3f6:	681b      	ldr	r3, [r3, #0]
 800b3f8:	4a24      	ldr	r2, [pc, #144]	@ (800b48c <HAL_DMA_IRQHandler+0x40c>)
 800b3fa:	4293      	cmp	r3, r2
 800b3fc:	d031      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b3fe:	687b      	ldr	r3, [r7, #4]
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	4a23      	ldr	r2, [pc, #140]	@ (800b490 <HAL_DMA_IRQHandler+0x410>)
 800b404:	4293      	cmp	r3, r2
 800b406:	d02c      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b408:	687b      	ldr	r3, [r7, #4]
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	4a21      	ldr	r2, [pc, #132]	@ (800b494 <HAL_DMA_IRQHandler+0x414>)
 800b40e:	4293      	cmp	r3, r2
 800b410:	d027      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b412:	687b      	ldr	r3, [r7, #4]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	4a20      	ldr	r2, [pc, #128]	@ (800b498 <HAL_DMA_IRQHandler+0x418>)
 800b418:	4293      	cmp	r3, r2
 800b41a:	d022      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	4a1e      	ldr	r2, [pc, #120]	@ (800b49c <HAL_DMA_IRQHandler+0x41c>)
 800b422:	4293      	cmp	r3, r2
 800b424:	d01d      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	681b      	ldr	r3, [r3, #0]
 800b42a:	4a1d      	ldr	r2, [pc, #116]	@ (800b4a0 <HAL_DMA_IRQHandler+0x420>)
 800b42c:	4293      	cmp	r3, r2
 800b42e:	d018      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b430:	687b      	ldr	r3, [r7, #4]
 800b432:	681b      	ldr	r3, [r3, #0]
 800b434:	4a1b      	ldr	r2, [pc, #108]	@ (800b4a4 <HAL_DMA_IRQHandler+0x424>)
 800b436:	4293      	cmp	r3, r2
 800b438:	d013      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	4a1a      	ldr	r2, [pc, #104]	@ (800b4a8 <HAL_DMA_IRQHandler+0x428>)
 800b440:	4293      	cmp	r3, r2
 800b442:	d00e      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a18      	ldr	r2, [pc, #96]	@ (800b4ac <HAL_DMA_IRQHandler+0x42c>)
 800b44a:	4293      	cmp	r3, r2
 800b44c:	d009      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b44e:	687b      	ldr	r3, [r7, #4]
 800b450:	681b      	ldr	r3, [r3, #0]
 800b452:	4a17      	ldr	r2, [pc, #92]	@ (800b4b0 <HAL_DMA_IRQHandler+0x430>)
 800b454:	4293      	cmp	r3, r2
 800b456:	d004      	beq.n	800b462 <HAL_DMA_IRQHandler+0x3e2>
 800b458:	687b      	ldr	r3, [r7, #4]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4a15      	ldr	r2, [pc, #84]	@ (800b4b4 <HAL_DMA_IRQHandler+0x434>)
 800b45e:	4293      	cmp	r3, r2
 800b460:	d12a      	bne.n	800b4b8 <HAL_DMA_IRQHandler+0x438>
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	681b      	ldr	r3, [r3, #0]
 800b468:	f003 0302 	and.w	r3, r3, #2
 800b46c:	2b00      	cmp	r3, #0
 800b46e:	bf14      	ite	ne
 800b470:	2301      	movne	r3, #1
 800b472:	2300      	moveq	r3, #0
 800b474:	b2db      	uxtb	r3, r3
 800b476:	e023      	b.n	800b4c0 <HAL_DMA_IRQHandler+0x440>
 800b478:	40020010 	.word	0x40020010
 800b47c:	40020028 	.word	0x40020028
 800b480:	40020040 	.word	0x40020040
 800b484:	40020058 	.word	0x40020058
 800b488:	40020070 	.word	0x40020070
 800b48c:	40020088 	.word	0x40020088
 800b490:	400200a0 	.word	0x400200a0
 800b494:	400200b8 	.word	0x400200b8
 800b498:	40020410 	.word	0x40020410
 800b49c:	40020428 	.word	0x40020428
 800b4a0:	40020440 	.word	0x40020440
 800b4a4:	40020458 	.word	0x40020458
 800b4a8:	40020470 	.word	0x40020470
 800b4ac:	40020488 	.word	0x40020488
 800b4b0:	400204a0 	.word	0x400204a0
 800b4b4:	400204b8 	.word	0x400204b8
 800b4b8:	687b      	ldr	r3, [r7, #4]
 800b4ba:	681b      	ldr	r3, [r3, #0]
 800b4bc:	681b      	ldr	r3, [r3, #0]
 800b4be:	2300      	movs	r3, #0
 800b4c0:	2b00      	cmp	r3, #0
 800b4c2:	d00d      	beq.n	800b4e0 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4c8:	f003 031f 	and.w	r3, r3, #31
 800b4cc:	2204      	movs	r2, #4
 800b4ce:	409a      	lsls	r2, r3
 800b4d0:	6a3b      	ldr	r3, [r7, #32]
 800b4d2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b4d8:	f043 0204 	orr.w	r2, r3, #4
 800b4dc:	687b      	ldr	r3, [r7, #4]
 800b4de:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b4e0:	687b      	ldr	r3, [r7, #4]
 800b4e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b4e4:	f003 031f 	and.w	r3, r3, #31
 800b4e8:	2210      	movs	r2, #16
 800b4ea:	409a      	lsls	r2, r3
 800b4ec:	69bb      	ldr	r3, [r7, #24]
 800b4ee:	4013      	ands	r3, r2
 800b4f0:	2b00      	cmp	r3, #0
 800b4f2:	f000 80a6 	beq.w	800b642 <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	681b      	ldr	r3, [r3, #0]
 800b4fa:	4a85      	ldr	r2, [pc, #532]	@ (800b710 <HAL_DMA_IRQHandler+0x690>)
 800b4fc:	4293      	cmp	r3, r2
 800b4fe:	d04a      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b500:	687b      	ldr	r3, [r7, #4]
 800b502:	681b      	ldr	r3, [r3, #0]
 800b504:	4a83      	ldr	r2, [pc, #524]	@ (800b714 <HAL_DMA_IRQHandler+0x694>)
 800b506:	4293      	cmp	r3, r2
 800b508:	d045      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	4a82      	ldr	r2, [pc, #520]	@ (800b718 <HAL_DMA_IRQHandler+0x698>)
 800b510:	4293      	cmp	r3, r2
 800b512:	d040      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	681b      	ldr	r3, [r3, #0]
 800b518:	4a80      	ldr	r2, [pc, #512]	@ (800b71c <HAL_DMA_IRQHandler+0x69c>)
 800b51a:	4293      	cmp	r3, r2
 800b51c:	d03b      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	681b      	ldr	r3, [r3, #0]
 800b522:	4a7f      	ldr	r2, [pc, #508]	@ (800b720 <HAL_DMA_IRQHandler+0x6a0>)
 800b524:	4293      	cmp	r3, r2
 800b526:	d036      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b528:	687b      	ldr	r3, [r7, #4]
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	4a7d      	ldr	r2, [pc, #500]	@ (800b724 <HAL_DMA_IRQHandler+0x6a4>)
 800b52e:	4293      	cmp	r3, r2
 800b530:	d031      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b532:	687b      	ldr	r3, [r7, #4]
 800b534:	681b      	ldr	r3, [r3, #0]
 800b536:	4a7c      	ldr	r2, [pc, #496]	@ (800b728 <HAL_DMA_IRQHandler+0x6a8>)
 800b538:	4293      	cmp	r3, r2
 800b53a:	d02c      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	681b      	ldr	r3, [r3, #0]
 800b540:	4a7a      	ldr	r2, [pc, #488]	@ (800b72c <HAL_DMA_IRQHandler+0x6ac>)
 800b542:	4293      	cmp	r3, r2
 800b544:	d027      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b546:	687b      	ldr	r3, [r7, #4]
 800b548:	681b      	ldr	r3, [r3, #0]
 800b54a:	4a79      	ldr	r2, [pc, #484]	@ (800b730 <HAL_DMA_IRQHandler+0x6b0>)
 800b54c:	4293      	cmp	r3, r2
 800b54e:	d022      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b550:	687b      	ldr	r3, [r7, #4]
 800b552:	681b      	ldr	r3, [r3, #0]
 800b554:	4a77      	ldr	r2, [pc, #476]	@ (800b734 <HAL_DMA_IRQHandler+0x6b4>)
 800b556:	4293      	cmp	r3, r2
 800b558:	d01d      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	681b      	ldr	r3, [r3, #0]
 800b55e:	4a76      	ldr	r2, [pc, #472]	@ (800b738 <HAL_DMA_IRQHandler+0x6b8>)
 800b560:	4293      	cmp	r3, r2
 800b562:	d018      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b564:	687b      	ldr	r3, [r7, #4]
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	4a74      	ldr	r2, [pc, #464]	@ (800b73c <HAL_DMA_IRQHandler+0x6bc>)
 800b56a:	4293      	cmp	r3, r2
 800b56c:	d013      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b56e:	687b      	ldr	r3, [r7, #4]
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	4a73      	ldr	r2, [pc, #460]	@ (800b740 <HAL_DMA_IRQHandler+0x6c0>)
 800b574:	4293      	cmp	r3, r2
 800b576:	d00e      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b578:	687b      	ldr	r3, [r7, #4]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	4a71      	ldr	r2, [pc, #452]	@ (800b744 <HAL_DMA_IRQHandler+0x6c4>)
 800b57e:	4293      	cmp	r3, r2
 800b580:	d009      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b582:	687b      	ldr	r3, [r7, #4]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	4a70      	ldr	r2, [pc, #448]	@ (800b748 <HAL_DMA_IRQHandler+0x6c8>)
 800b588:	4293      	cmp	r3, r2
 800b58a:	d004      	beq.n	800b596 <HAL_DMA_IRQHandler+0x516>
 800b58c:	687b      	ldr	r3, [r7, #4]
 800b58e:	681b      	ldr	r3, [r3, #0]
 800b590:	4a6e      	ldr	r2, [pc, #440]	@ (800b74c <HAL_DMA_IRQHandler+0x6cc>)
 800b592:	4293      	cmp	r3, r2
 800b594:	d10a      	bne.n	800b5ac <HAL_DMA_IRQHandler+0x52c>
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	681b      	ldr	r3, [r3, #0]
 800b59a:	681b      	ldr	r3, [r3, #0]
 800b59c:	f003 0308 	and.w	r3, r3, #8
 800b5a0:	2b00      	cmp	r3, #0
 800b5a2:	bf14      	ite	ne
 800b5a4:	2301      	movne	r3, #1
 800b5a6:	2300      	moveq	r3, #0
 800b5a8:	b2db      	uxtb	r3, r3
 800b5aa:	e009      	b.n	800b5c0 <HAL_DMA_IRQHandler+0x540>
 800b5ac:	687b      	ldr	r3, [r7, #4]
 800b5ae:	681b      	ldr	r3, [r3, #0]
 800b5b0:	681b      	ldr	r3, [r3, #0]
 800b5b2:	f003 0304 	and.w	r3, r3, #4
 800b5b6:	2b00      	cmp	r3, #0
 800b5b8:	bf14      	ite	ne
 800b5ba:	2301      	movne	r3, #1
 800b5bc:	2300      	moveq	r3, #0
 800b5be:	b2db      	uxtb	r3, r3
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d03e      	beq.n	800b642 <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b5c4:	687b      	ldr	r3, [r7, #4]
 800b5c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b5c8:	f003 031f 	and.w	r3, r3, #31
 800b5cc:	2210      	movs	r2, #16
 800b5ce:	409a      	lsls	r2, r3
 800b5d0:	6a3b      	ldr	r3, [r7, #32]
 800b5d2:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	681b      	ldr	r3, [r3, #0]
 800b5d8:	681b      	ldr	r3, [r3, #0]
 800b5da:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b5de:	2b00      	cmp	r3, #0
 800b5e0:	d018      	beq.n	800b614 <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b5ec:	2b00      	cmp	r3, #0
 800b5ee:	d108      	bne.n	800b602 <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 800b5f0:	687b      	ldr	r3, [r7, #4]
 800b5f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5f4:	2b00      	cmp	r3, #0
 800b5f6:	d024      	beq.n	800b642 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 800b5f8:	687b      	ldr	r3, [r7, #4]
 800b5fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b5fc:	6878      	ldr	r0, [r7, #4]
 800b5fe:	4798      	blx	r3
 800b600:	e01f      	b.n	800b642 <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800b602:	687b      	ldr	r3, [r7, #4]
 800b604:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b606:	2b00      	cmp	r3, #0
 800b608:	d01b      	beq.n	800b642 <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 800b60a:	687b      	ldr	r3, [r7, #4]
 800b60c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	4798      	blx	r3
 800b612:	e016      	b.n	800b642 <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	681b      	ldr	r3, [r3, #0]
 800b618:	681b      	ldr	r3, [r3, #0]
 800b61a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b61e:	2b00      	cmp	r3, #0
 800b620:	d107      	bne.n	800b632 <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b622:	687b      	ldr	r3, [r7, #4]
 800b624:	681b      	ldr	r3, [r3, #0]
 800b626:	681a      	ldr	r2, [r3, #0]
 800b628:	687b      	ldr	r3, [r7, #4]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	f022 0208 	bic.w	r2, r2, #8
 800b630:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800b632:	687b      	ldr	r3, [r7, #4]
 800b634:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b636:	2b00      	cmp	r3, #0
 800b638:	d003      	beq.n	800b642 <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800b63a:	687b      	ldr	r3, [r7, #4]
 800b63c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b63e:	6878      	ldr	r0, [r7, #4]
 800b640:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800b642:	687b      	ldr	r3, [r7, #4]
 800b644:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b646:	f003 031f 	and.w	r3, r3, #31
 800b64a:	2220      	movs	r2, #32
 800b64c:	409a      	lsls	r2, r3
 800b64e:	69bb      	ldr	r3, [r7, #24]
 800b650:	4013      	ands	r3, r2
 800b652:	2b00      	cmp	r3, #0
 800b654:	f000 8110 	beq.w	800b878 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 800b658:	687b      	ldr	r3, [r7, #4]
 800b65a:	681b      	ldr	r3, [r3, #0]
 800b65c:	4a2c      	ldr	r2, [pc, #176]	@ (800b710 <HAL_DMA_IRQHandler+0x690>)
 800b65e:	4293      	cmp	r3, r2
 800b660:	d04a      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b662:	687b      	ldr	r3, [r7, #4]
 800b664:	681b      	ldr	r3, [r3, #0]
 800b666:	4a2b      	ldr	r2, [pc, #172]	@ (800b714 <HAL_DMA_IRQHandler+0x694>)
 800b668:	4293      	cmp	r3, r2
 800b66a:	d045      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b66c:	687b      	ldr	r3, [r7, #4]
 800b66e:	681b      	ldr	r3, [r3, #0]
 800b670:	4a29      	ldr	r2, [pc, #164]	@ (800b718 <HAL_DMA_IRQHandler+0x698>)
 800b672:	4293      	cmp	r3, r2
 800b674:	d040      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	681b      	ldr	r3, [r3, #0]
 800b67a:	4a28      	ldr	r2, [pc, #160]	@ (800b71c <HAL_DMA_IRQHandler+0x69c>)
 800b67c:	4293      	cmp	r3, r2
 800b67e:	d03b      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b680:	687b      	ldr	r3, [r7, #4]
 800b682:	681b      	ldr	r3, [r3, #0]
 800b684:	4a26      	ldr	r2, [pc, #152]	@ (800b720 <HAL_DMA_IRQHandler+0x6a0>)
 800b686:	4293      	cmp	r3, r2
 800b688:	d036      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	4a25      	ldr	r2, [pc, #148]	@ (800b724 <HAL_DMA_IRQHandler+0x6a4>)
 800b690:	4293      	cmp	r3, r2
 800b692:	d031      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b694:	687b      	ldr	r3, [r7, #4]
 800b696:	681b      	ldr	r3, [r3, #0]
 800b698:	4a23      	ldr	r2, [pc, #140]	@ (800b728 <HAL_DMA_IRQHandler+0x6a8>)
 800b69a:	4293      	cmp	r3, r2
 800b69c:	d02c      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b69e:	687b      	ldr	r3, [r7, #4]
 800b6a0:	681b      	ldr	r3, [r3, #0]
 800b6a2:	4a22      	ldr	r2, [pc, #136]	@ (800b72c <HAL_DMA_IRQHandler+0x6ac>)
 800b6a4:	4293      	cmp	r3, r2
 800b6a6:	d027      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	4a20      	ldr	r2, [pc, #128]	@ (800b730 <HAL_DMA_IRQHandler+0x6b0>)
 800b6ae:	4293      	cmp	r3, r2
 800b6b0:	d022      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6b2:	687b      	ldr	r3, [r7, #4]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	4a1f      	ldr	r2, [pc, #124]	@ (800b734 <HAL_DMA_IRQHandler+0x6b4>)
 800b6b8:	4293      	cmp	r3, r2
 800b6ba:	d01d      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	681b      	ldr	r3, [r3, #0]
 800b6c0:	4a1d      	ldr	r2, [pc, #116]	@ (800b738 <HAL_DMA_IRQHandler+0x6b8>)
 800b6c2:	4293      	cmp	r3, r2
 800b6c4:	d018      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6c6:	687b      	ldr	r3, [r7, #4]
 800b6c8:	681b      	ldr	r3, [r3, #0]
 800b6ca:	4a1c      	ldr	r2, [pc, #112]	@ (800b73c <HAL_DMA_IRQHandler+0x6bc>)
 800b6cc:	4293      	cmp	r3, r2
 800b6ce:	d013      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6d0:	687b      	ldr	r3, [r7, #4]
 800b6d2:	681b      	ldr	r3, [r3, #0]
 800b6d4:	4a1a      	ldr	r2, [pc, #104]	@ (800b740 <HAL_DMA_IRQHandler+0x6c0>)
 800b6d6:	4293      	cmp	r3, r2
 800b6d8:	d00e      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6da:	687b      	ldr	r3, [r7, #4]
 800b6dc:	681b      	ldr	r3, [r3, #0]
 800b6de:	4a19      	ldr	r2, [pc, #100]	@ (800b744 <HAL_DMA_IRQHandler+0x6c4>)
 800b6e0:	4293      	cmp	r3, r2
 800b6e2:	d009      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	4a17      	ldr	r2, [pc, #92]	@ (800b748 <HAL_DMA_IRQHandler+0x6c8>)
 800b6ea:	4293      	cmp	r3, r2
 800b6ec:	d004      	beq.n	800b6f8 <HAL_DMA_IRQHandler+0x678>
 800b6ee:	687b      	ldr	r3, [r7, #4]
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	4a16      	ldr	r2, [pc, #88]	@ (800b74c <HAL_DMA_IRQHandler+0x6cc>)
 800b6f4:	4293      	cmp	r3, r2
 800b6f6:	d12b      	bne.n	800b750 <HAL_DMA_IRQHandler+0x6d0>
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	681b      	ldr	r3, [r3, #0]
 800b6fe:	f003 0310 	and.w	r3, r3, #16
 800b702:	2b00      	cmp	r3, #0
 800b704:	bf14      	ite	ne
 800b706:	2301      	movne	r3, #1
 800b708:	2300      	moveq	r3, #0
 800b70a:	b2db      	uxtb	r3, r3
 800b70c:	e02a      	b.n	800b764 <HAL_DMA_IRQHandler+0x6e4>
 800b70e:	bf00      	nop
 800b710:	40020010 	.word	0x40020010
 800b714:	40020028 	.word	0x40020028
 800b718:	40020040 	.word	0x40020040
 800b71c:	40020058 	.word	0x40020058
 800b720:	40020070 	.word	0x40020070
 800b724:	40020088 	.word	0x40020088
 800b728:	400200a0 	.word	0x400200a0
 800b72c:	400200b8 	.word	0x400200b8
 800b730:	40020410 	.word	0x40020410
 800b734:	40020428 	.word	0x40020428
 800b738:	40020440 	.word	0x40020440
 800b73c:	40020458 	.word	0x40020458
 800b740:	40020470 	.word	0x40020470
 800b744:	40020488 	.word	0x40020488
 800b748:	400204a0 	.word	0x400204a0
 800b74c:	400204b8 	.word	0x400204b8
 800b750:	687b      	ldr	r3, [r7, #4]
 800b752:	681b      	ldr	r3, [r3, #0]
 800b754:	681b      	ldr	r3, [r3, #0]
 800b756:	f003 0302 	and.w	r3, r3, #2
 800b75a:	2b00      	cmp	r3, #0
 800b75c:	bf14      	ite	ne
 800b75e:	2301      	movne	r3, #1
 800b760:	2300      	moveq	r3, #0
 800b762:	b2db      	uxtb	r3, r3
 800b764:	2b00      	cmp	r3, #0
 800b766:	f000 8087 	beq.w	800b878 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 800b76a:	687b      	ldr	r3, [r7, #4]
 800b76c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b76e:	f003 031f 	and.w	r3, r3, #31
 800b772:	2220      	movs	r2, #32
 800b774:	409a      	lsls	r2, r3
 800b776:	6a3b      	ldr	r3, [r7, #32]
 800b778:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 800b77a:	687b      	ldr	r3, [r7, #4]
 800b77c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800b780:	b2db      	uxtb	r3, r3
 800b782:	2b04      	cmp	r3, #4
 800b784:	d139      	bne.n	800b7fa <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800b786:	687b      	ldr	r3, [r7, #4]
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	681a      	ldr	r2, [r3, #0]
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	f022 0216 	bic.w	r2, r2, #22
 800b794:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	695a      	ldr	r2, [r3, #20]
 800b79c:	687b      	ldr	r3, [r7, #4]
 800b79e:	681b      	ldr	r3, [r3, #0]
 800b7a0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800b7a4:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800b7a6:	687b      	ldr	r3, [r7, #4]
 800b7a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d103      	bne.n	800b7b6 <HAL_DMA_IRQHandler+0x736>
 800b7ae:	687b      	ldr	r3, [r7, #4]
 800b7b0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800b7b2:	2b00      	cmp	r3, #0
 800b7b4:	d007      	beq.n	800b7c6 <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800b7b6:	687b      	ldr	r3, [r7, #4]
 800b7b8:	681b      	ldr	r3, [r3, #0]
 800b7ba:	681a      	ldr	r2, [r3, #0]
 800b7bc:	687b      	ldr	r3, [r7, #4]
 800b7be:	681b      	ldr	r3, [r3, #0]
 800b7c0:	f022 0208 	bic.w	r2, r2, #8
 800b7c4:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800b7c6:	687b      	ldr	r3, [r7, #4]
 800b7c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800b7ca:	f003 031f 	and.w	r3, r3, #31
 800b7ce:	223f      	movs	r2, #63	@ 0x3f
 800b7d0:	409a      	lsls	r2, r3
 800b7d2:	6a3b      	ldr	r3, [r7, #32]
 800b7d4:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2201      	movs	r2, #1
 800b7da:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800b7de:	687b      	ldr	r3, [r7, #4]
 800b7e0:	2200      	movs	r2, #0
 800b7e2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7ea:	2b00      	cmp	r3, #0
 800b7ec:	f000 834a 	beq.w	800be84 <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 800b7f0:	687b      	ldr	r3, [r7, #4]
 800b7f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800b7f4:	6878      	ldr	r0, [r7, #4]
 800b7f6:	4798      	blx	r3
          }
          return;
 800b7f8:	e344      	b.n	800be84 <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800b7fa:	687b      	ldr	r3, [r7, #4]
 800b7fc:	681b      	ldr	r3, [r3, #0]
 800b7fe:	681b      	ldr	r3, [r3, #0]
 800b800:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800b804:	2b00      	cmp	r3, #0
 800b806:	d018      	beq.n	800b83a <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800b808:	687b      	ldr	r3, [r7, #4]
 800b80a:	681b      	ldr	r3, [r3, #0]
 800b80c:	681b      	ldr	r3, [r3, #0]
 800b80e:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800b812:	2b00      	cmp	r3, #0
 800b814:	d108      	bne.n	800b828 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800b816:	687b      	ldr	r3, [r7, #4]
 800b818:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b81a:	2b00      	cmp	r3, #0
 800b81c:	d02c      	beq.n	800b878 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 800b81e:	687b      	ldr	r3, [r7, #4]
 800b820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b822:	6878      	ldr	r0, [r7, #4]
 800b824:	4798      	blx	r3
 800b826:	e027      	b.n	800b878 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 800b828:	687b      	ldr	r3, [r7, #4]
 800b82a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b82c:	2b00      	cmp	r3, #0
 800b82e:	d023      	beq.n	800b878 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 800b830:	687b      	ldr	r3, [r7, #4]
 800b832:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b834:	6878      	ldr	r0, [r7, #4]
 800b836:	4798      	blx	r3
 800b838:	e01e      	b.n	800b878 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800b83a:	687b      	ldr	r3, [r7, #4]
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	681b      	ldr	r3, [r3, #0]
 800b840:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b844:	2b00      	cmp	r3, #0
 800b846:	d10f      	bne.n	800b868 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	681a      	ldr	r2, [r3, #0]
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	681b      	ldr	r3, [r3, #0]
 800b852:	f022 0210 	bic.w	r2, r2, #16
 800b856:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 800b858:	687b      	ldr	r3, [r7, #4]
 800b85a:	2201      	movs	r2, #1
 800b85c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	2200      	movs	r2, #0
 800b864:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 800b868:	687b      	ldr	r3, [r7, #4]
 800b86a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	d003      	beq.n	800b878 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 800b870:	687b      	ldr	r3, [r7, #4]
 800b872:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800b874:	6878      	ldr	r0, [r7, #4]
 800b876:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b87c:	2b00      	cmp	r3, #0
 800b87e:	f000 8306 	beq.w	800be8e <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800b886:	f003 0301 	and.w	r3, r3, #1
 800b88a:	2b00      	cmp	r3, #0
 800b88c:	f000 8088 	beq.w	800b9a0 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2204      	movs	r2, #4
 800b894:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 800b898:	687b      	ldr	r3, [r7, #4]
 800b89a:	681b      	ldr	r3, [r3, #0]
 800b89c:	4a7a      	ldr	r2, [pc, #488]	@ (800ba88 <HAL_DMA_IRQHandler+0xa08>)
 800b89e:	4293      	cmp	r3, r2
 800b8a0:	d04a      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	4a79      	ldr	r2, [pc, #484]	@ (800ba8c <HAL_DMA_IRQHandler+0xa0c>)
 800b8a8:	4293      	cmp	r3, r2
 800b8aa:	d045      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	4a77      	ldr	r2, [pc, #476]	@ (800ba90 <HAL_DMA_IRQHandler+0xa10>)
 800b8b2:	4293      	cmp	r3, r2
 800b8b4:	d040      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8b6:	687b      	ldr	r3, [r7, #4]
 800b8b8:	681b      	ldr	r3, [r3, #0]
 800b8ba:	4a76      	ldr	r2, [pc, #472]	@ (800ba94 <HAL_DMA_IRQHandler+0xa14>)
 800b8bc:	4293      	cmp	r3, r2
 800b8be:	d03b      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8c0:	687b      	ldr	r3, [r7, #4]
 800b8c2:	681b      	ldr	r3, [r3, #0]
 800b8c4:	4a74      	ldr	r2, [pc, #464]	@ (800ba98 <HAL_DMA_IRQHandler+0xa18>)
 800b8c6:	4293      	cmp	r3, r2
 800b8c8:	d036      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	4a73      	ldr	r2, [pc, #460]	@ (800ba9c <HAL_DMA_IRQHandler+0xa1c>)
 800b8d0:	4293      	cmp	r3, r2
 800b8d2:	d031      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	681b      	ldr	r3, [r3, #0]
 800b8d8:	4a71      	ldr	r2, [pc, #452]	@ (800baa0 <HAL_DMA_IRQHandler+0xa20>)
 800b8da:	4293      	cmp	r3, r2
 800b8dc:	d02c      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8de:	687b      	ldr	r3, [r7, #4]
 800b8e0:	681b      	ldr	r3, [r3, #0]
 800b8e2:	4a70      	ldr	r2, [pc, #448]	@ (800baa4 <HAL_DMA_IRQHandler+0xa24>)
 800b8e4:	4293      	cmp	r3, r2
 800b8e6:	d027      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	4a6e      	ldr	r2, [pc, #440]	@ (800baa8 <HAL_DMA_IRQHandler+0xa28>)
 800b8ee:	4293      	cmp	r3, r2
 800b8f0:	d022      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	4a6d      	ldr	r2, [pc, #436]	@ (800baac <HAL_DMA_IRQHandler+0xa2c>)
 800b8f8:	4293      	cmp	r3, r2
 800b8fa:	d01d      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	681b      	ldr	r3, [r3, #0]
 800b900:	4a6b      	ldr	r2, [pc, #428]	@ (800bab0 <HAL_DMA_IRQHandler+0xa30>)
 800b902:	4293      	cmp	r3, r2
 800b904:	d018      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b906:	687b      	ldr	r3, [r7, #4]
 800b908:	681b      	ldr	r3, [r3, #0]
 800b90a:	4a6a      	ldr	r2, [pc, #424]	@ (800bab4 <HAL_DMA_IRQHandler+0xa34>)
 800b90c:	4293      	cmp	r3, r2
 800b90e:	d013      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b910:	687b      	ldr	r3, [r7, #4]
 800b912:	681b      	ldr	r3, [r3, #0]
 800b914:	4a68      	ldr	r2, [pc, #416]	@ (800bab8 <HAL_DMA_IRQHandler+0xa38>)
 800b916:	4293      	cmp	r3, r2
 800b918:	d00e      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	4a67      	ldr	r2, [pc, #412]	@ (800babc <HAL_DMA_IRQHandler+0xa3c>)
 800b920:	4293      	cmp	r3, r2
 800b922:	d009      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b924:	687b      	ldr	r3, [r7, #4]
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	4a65      	ldr	r2, [pc, #404]	@ (800bac0 <HAL_DMA_IRQHandler+0xa40>)
 800b92a:	4293      	cmp	r3, r2
 800b92c:	d004      	beq.n	800b938 <HAL_DMA_IRQHandler+0x8b8>
 800b92e:	687b      	ldr	r3, [r7, #4]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	4a64      	ldr	r2, [pc, #400]	@ (800bac4 <HAL_DMA_IRQHandler+0xa44>)
 800b934:	4293      	cmp	r3, r2
 800b936:	d108      	bne.n	800b94a <HAL_DMA_IRQHandler+0x8ca>
 800b938:	687b      	ldr	r3, [r7, #4]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	681a      	ldr	r2, [r3, #0]
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	681b      	ldr	r3, [r3, #0]
 800b942:	f022 0201 	bic.w	r2, r2, #1
 800b946:	601a      	str	r2, [r3, #0]
 800b948:	e007      	b.n	800b95a <HAL_DMA_IRQHandler+0x8da>
 800b94a:	687b      	ldr	r3, [r7, #4]
 800b94c:	681b      	ldr	r3, [r3, #0]
 800b94e:	681a      	ldr	r2, [r3, #0]
 800b950:	687b      	ldr	r3, [r7, #4]
 800b952:	681b      	ldr	r3, [r3, #0]
 800b954:	f022 0201 	bic.w	r2, r2, #1
 800b958:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 800b95a:	68fb      	ldr	r3, [r7, #12]
 800b95c:	3301      	adds	r3, #1
 800b95e:	60fb      	str	r3, [r7, #12]
 800b960:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800b962:	429a      	cmp	r2, r3
 800b964:	d307      	bcc.n	800b976 <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	681b      	ldr	r3, [r3, #0]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	f003 0301 	and.w	r3, r3, #1
 800b970:	2b00      	cmp	r3, #0
 800b972:	d1f2      	bne.n	800b95a <HAL_DMA_IRQHandler+0x8da>
 800b974:	e000      	b.n	800b978 <HAL_DMA_IRQHandler+0x8f8>
            break;
 800b976:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 800b978:	687b      	ldr	r3, [r7, #4]
 800b97a:	681b      	ldr	r3, [r3, #0]
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	f003 0301 	and.w	r3, r3, #1
 800b982:	2b00      	cmp	r3, #0
 800b984:	d004      	beq.n	800b990 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 800b986:	687b      	ldr	r3, [r7, #4]
 800b988:	2203      	movs	r2, #3
 800b98a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 800b98e:	e003      	b.n	800b998 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 800b990:	687b      	ldr	r3, [r7, #4]
 800b992:	2201      	movs	r2, #1
 800b994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800b998:	687b      	ldr	r3, [r7, #4]
 800b99a:	2200      	movs	r2, #0
 800b99c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 800b9a0:	687b      	ldr	r3, [r7, #4]
 800b9a2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	f000 8272 	beq.w	800be8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800b9aa:	687b      	ldr	r3, [r7, #4]
 800b9ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800b9ae:	6878      	ldr	r0, [r7, #4]
 800b9b0:	4798      	blx	r3
 800b9b2:	e26c      	b.n	800be8e <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 800b9b4:	687b      	ldr	r3, [r7, #4]
 800b9b6:	681b      	ldr	r3, [r3, #0]
 800b9b8:	4a43      	ldr	r2, [pc, #268]	@ (800bac8 <HAL_DMA_IRQHandler+0xa48>)
 800b9ba:	4293      	cmp	r3, r2
 800b9bc:	d022      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	681b      	ldr	r3, [r3, #0]
 800b9c2:	4a42      	ldr	r2, [pc, #264]	@ (800bacc <HAL_DMA_IRQHandler+0xa4c>)
 800b9c4:	4293      	cmp	r3, r2
 800b9c6:	d01d      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9c8:	687b      	ldr	r3, [r7, #4]
 800b9ca:	681b      	ldr	r3, [r3, #0]
 800b9cc:	4a40      	ldr	r2, [pc, #256]	@ (800bad0 <HAL_DMA_IRQHandler+0xa50>)
 800b9ce:	4293      	cmp	r3, r2
 800b9d0:	d018      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	4a3f      	ldr	r2, [pc, #252]	@ (800bad4 <HAL_DMA_IRQHandler+0xa54>)
 800b9d8:	4293      	cmp	r3, r2
 800b9da:	d013      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9dc:	687b      	ldr	r3, [r7, #4]
 800b9de:	681b      	ldr	r3, [r3, #0]
 800b9e0:	4a3d      	ldr	r2, [pc, #244]	@ (800bad8 <HAL_DMA_IRQHandler+0xa58>)
 800b9e2:	4293      	cmp	r3, r2
 800b9e4:	d00e      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	681b      	ldr	r3, [r3, #0]
 800b9ea:	4a3c      	ldr	r2, [pc, #240]	@ (800badc <HAL_DMA_IRQHandler+0xa5c>)
 800b9ec:	4293      	cmp	r3, r2
 800b9ee:	d009      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	681b      	ldr	r3, [r3, #0]
 800b9f4:	4a3a      	ldr	r2, [pc, #232]	@ (800bae0 <HAL_DMA_IRQHandler+0xa60>)
 800b9f6:	4293      	cmp	r3, r2
 800b9f8:	d004      	beq.n	800ba04 <HAL_DMA_IRQHandler+0x984>
 800b9fa:	687b      	ldr	r3, [r7, #4]
 800b9fc:	681b      	ldr	r3, [r3, #0]
 800b9fe:	4a39      	ldr	r2, [pc, #228]	@ (800bae4 <HAL_DMA_IRQHandler+0xa64>)
 800ba00:	4293      	cmp	r3, r2
 800ba02:	d101      	bne.n	800ba08 <HAL_DMA_IRQHandler+0x988>
 800ba04:	2301      	movs	r3, #1
 800ba06:	e000      	b.n	800ba0a <HAL_DMA_IRQHandler+0x98a>
 800ba08:	2300      	movs	r3, #0
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	f000 823f 	beq.w	800be8e <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 800ba10:	687b      	ldr	r3, [r7, #4]
 800ba12:	681b      	ldr	r3, [r3, #0]
 800ba14:	681b      	ldr	r3, [r3, #0]
 800ba16:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 800ba18:	687b      	ldr	r3, [r7, #4]
 800ba1a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba1c:	f003 031f 	and.w	r3, r3, #31
 800ba20:	2204      	movs	r2, #4
 800ba22:	409a      	lsls	r2, r3
 800ba24:	697b      	ldr	r3, [r7, #20]
 800ba26:	4013      	ands	r3, r2
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	f000 80cd 	beq.w	800bbc8 <HAL_DMA_IRQHandler+0xb48>
 800ba2e:	693b      	ldr	r3, [r7, #16]
 800ba30:	f003 0304 	and.w	r3, r3, #4
 800ba34:	2b00      	cmp	r3, #0
 800ba36:	f000 80c7 	beq.w	800bbc8 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 800ba3a:	687b      	ldr	r3, [r7, #4]
 800ba3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ba3e:	f003 031f 	and.w	r3, r3, #31
 800ba42:	2204      	movs	r2, #4
 800ba44:	409a      	lsls	r2, r3
 800ba46:	69fb      	ldr	r3, [r7, #28]
 800ba48:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba4a:	693b      	ldr	r3, [r7, #16]
 800ba4c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d049      	beq.n	800bae8 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800ba54:	693b      	ldr	r3, [r7, #16]
 800ba56:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ba5a:	2b00      	cmp	r3, #0
 800ba5c:	d109      	bne.n	800ba72 <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800ba5e:	687b      	ldr	r3, [r7, #4]
 800ba60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	f000 8210 	beq.w	800be88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 800ba68:	687b      	ldr	r3, [r7, #4]
 800ba6a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800ba6c:	6878      	ldr	r0, [r7, #4]
 800ba6e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba70:	e20a      	b.n	800be88 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800ba72:	687b      	ldr	r3, [r7, #4]
 800ba74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba76:	2b00      	cmp	r3, #0
 800ba78:	f000 8206 	beq.w	800be88 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ba80:	6878      	ldr	r0, [r7, #4]
 800ba82:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800ba84:	e200      	b.n	800be88 <HAL_DMA_IRQHandler+0xe08>
 800ba86:	bf00      	nop
 800ba88:	40020010 	.word	0x40020010
 800ba8c:	40020028 	.word	0x40020028
 800ba90:	40020040 	.word	0x40020040
 800ba94:	40020058 	.word	0x40020058
 800ba98:	40020070 	.word	0x40020070
 800ba9c:	40020088 	.word	0x40020088
 800baa0:	400200a0 	.word	0x400200a0
 800baa4:	400200b8 	.word	0x400200b8
 800baa8:	40020410 	.word	0x40020410
 800baac:	40020428 	.word	0x40020428
 800bab0:	40020440 	.word	0x40020440
 800bab4:	40020458 	.word	0x40020458
 800bab8:	40020470 	.word	0x40020470
 800babc:	40020488 	.word	0x40020488
 800bac0:	400204a0 	.word	0x400204a0
 800bac4:	400204b8 	.word	0x400204b8
 800bac8:	58025408 	.word	0x58025408
 800bacc:	5802541c 	.word	0x5802541c
 800bad0:	58025430 	.word	0x58025430
 800bad4:	58025444 	.word	0x58025444
 800bad8:	58025458 	.word	0x58025458
 800badc:	5802546c 	.word	0x5802546c
 800bae0:	58025480 	.word	0x58025480
 800bae4:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bae8:	693b      	ldr	r3, [r7, #16]
 800baea:	f003 0320 	and.w	r3, r3, #32
 800baee:	2b00      	cmp	r3, #0
 800baf0:	d160      	bne.n	800bbb4 <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	681b      	ldr	r3, [r3, #0]
 800baf6:	4a7f      	ldr	r2, [pc, #508]	@ (800bcf4 <HAL_DMA_IRQHandler+0xc74>)
 800baf8:	4293      	cmp	r3, r2
 800bafa:	d04a      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bafc:	687b      	ldr	r3, [r7, #4]
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	4a7d      	ldr	r2, [pc, #500]	@ (800bcf8 <HAL_DMA_IRQHandler+0xc78>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d045      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	681b      	ldr	r3, [r3, #0]
 800bb0a:	4a7c      	ldr	r2, [pc, #496]	@ (800bcfc <HAL_DMA_IRQHandler+0xc7c>)
 800bb0c:	4293      	cmp	r3, r2
 800bb0e:	d040      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb10:	687b      	ldr	r3, [r7, #4]
 800bb12:	681b      	ldr	r3, [r3, #0]
 800bb14:	4a7a      	ldr	r2, [pc, #488]	@ (800bd00 <HAL_DMA_IRQHandler+0xc80>)
 800bb16:	4293      	cmp	r3, r2
 800bb18:	d03b      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	681b      	ldr	r3, [r3, #0]
 800bb1e:	4a79      	ldr	r2, [pc, #484]	@ (800bd04 <HAL_DMA_IRQHandler+0xc84>)
 800bb20:	4293      	cmp	r3, r2
 800bb22:	d036      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb24:	687b      	ldr	r3, [r7, #4]
 800bb26:	681b      	ldr	r3, [r3, #0]
 800bb28:	4a77      	ldr	r2, [pc, #476]	@ (800bd08 <HAL_DMA_IRQHandler+0xc88>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d031      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	4a76      	ldr	r2, [pc, #472]	@ (800bd0c <HAL_DMA_IRQHandler+0xc8c>)
 800bb34:	4293      	cmp	r3, r2
 800bb36:	d02c      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	4a74      	ldr	r2, [pc, #464]	@ (800bd10 <HAL_DMA_IRQHandler+0xc90>)
 800bb3e:	4293      	cmp	r3, r2
 800bb40:	d027      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb42:	687b      	ldr	r3, [r7, #4]
 800bb44:	681b      	ldr	r3, [r3, #0]
 800bb46:	4a73      	ldr	r2, [pc, #460]	@ (800bd14 <HAL_DMA_IRQHandler+0xc94>)
 800bb48:	4293      	cmp	r3, r2
 800bb4a:	d022      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	4a71      	ldr	r2, [pc, #452]	@ (800bd18 <HAL_DMA_IRQHandler+0xc98>)
 800bb52:	4293      	cmp	r3, r2
 800bb54:	d01d      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	681b      	ldr	r3, [r3, #0]
 800bb5a:	4a70      	ldr	r2, [pc, #448]	@ (800bd1c <HAL_DMA_IRQHandler+0xc9c>)
 800bb5c:	4293      	cmp	r3, r2
 800bb5e:	d018      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	681b      	ldr	r3, [r3, #0]
 800bb64:	4a6e      	ldr	r2, [pc, #440]	@ (800bd20 <HAL_DMA_IRQHandler+0xca0>)
 800bb66:	4293      	cmp	r3, r2
 800bb68:	d013      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	681b      	ldr	r3, [r3, #0]
 800bb6e:	4a6d      	ldr	r2, [pc, #436]	@ (800bd24 <HAL_DMA_IRQHandler+0xca4>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d00e      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	4a6b      	ldr	r2, [pc, #428]	@ (800bd28 <HAL_DMA_IRQHandler+0xca8>)
 800bb7a:	4293      	cmp	r3, r2
 800bb7c:	d009      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	4a6a      	ldr	r2, [pc, #424]	@ (800bd2c <HAL_DMA_IRQHandler+0xcac>)
 800bb84:	4293      	cmp	r3, r2
 800bb86:	d004      	beq.n	800bb92 <HAL_DMA_IRQHandler+0xb12>
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	4a68      	ldr	r2, [pc, #416]	@ (800bd30 <HAL_DMA_IRQHandler+0xcb0>)
 800bb8e:	4293      	cmp	r3, r2
 800bb90:	d108      	bne.n	800bba4 <HAL_DMA_IRQHandler+0xb24>
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	681b      	ldr	r3, [r3, #0]
 800bb96:	681a      	ldr	r2, [r3, #0]
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	681b      	ldr	r3, [r3, #0]
 800bb9c:	f022 0208 	bic.w	r2, r2, #8
 800bba0:	601a      	str	r2, [r3, #0]
 800bba2:	e007      	b.n	800bbb4 <HAL_DMA_IRQHandler+0xb34>
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	681b      	ldr	r3, [r3, #0]
 800bba8:	681a      	ldr	r2, [r3, #0]
 800bbaa:	687b      	ldr	r3, [r7, #4]
 800bbac:	681b      	ldr	r3, [r3, #0]
 800bbae:	f022 0204 	bic.w	r2, r2, #4
 800bbb2:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 800bbb4:	687b      	ldr	r3, [r7, #4]
 800bbb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbb8:	2b00      	cmp	r3, #0
 800bbba:	f000 8165 	beq.w	800be88 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800bbbe:	687b      	ldr	r3, [r7, #4]
 800bbc0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800bbc2:	6878      	ldr	r0, [r7, #4]
 800bbc4:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bbc6:	e15f      	b.n	800be88 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbcc:	f003 031f 	and.w	r3, r3, #31
 800bbd0:	2202      	movs	r2, #2
 800bbd2:	409a      	lsls	r2, r3
 800bbd4:	697b      	ldr	r3, [r7, #20]
 800bbd6:	4013      	ands	r3, r2
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	f000 80c5 	beq.w	800bd68 <HAL_DMA_IRQHandler+0xce8>
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	f003 0302 	and.w	r3, r3, #2
 800bbe4:	2b00      	cmp	r3, #0
 800bbe6:	f000 80bf 	beq.w	800bd68 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bbee:	f003 031f 	and.w	r3, r3, #31
 800bbf2:	2202      	movs	r2, #2
 800bbf4:	409a      	lsls	r2, r3
 800bbf6:	69fb      	ldr	r3, [r7, #28]
 800bbf8:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bbfa:	693b      	ldr	r3, [r7, #16]
 800bbfc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800bc00:	2b00      	cmp	r3, #0
 800bc02:	d018      	beq.n	800bc36 <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800bc0a:	2b00      	cmp	r3, #0
 800bc0c:	d109      	bne.n	800bc22 <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800bc0e:	687b      	ldr	r3, [r7, #4]
 800bc10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc12:	2b00      	cmp	r3, #0
 800bc14:	f000 813a 	beq.w	800be8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800bc1c:	6878      	ldr	r0, [r7, #4]
 800bc1e:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bc20:	e134      	b.n	800be8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800bc22:	687b      	ldr	r3, [r7, #4]
 800bc24:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc26:	2b00      	cmp	r3, #0
 800bc28:	f000 8130 	beq.w	800be8c <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 800bc2c:	687b      	ldr	r3, [r7, #4]
 800bc2e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bc30:	6878      	ldr	r0, [r7, #4]
 800bc32:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bc34:	e12a      	b.n	800be8c <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 800bc36:	693b      	ldr	r3, [r7, #16]
 800bc38:	f003 0320 	and.w	r3, r3, #32
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	f040 8089 	bne.w	800bd54 <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	681b      	ldr	r3, [r3, #0]
 800bc46:	4a2b      	ldr	r2, [pc, #172]	@ (800bcf4 <HAL_DMA_IRQHandler+0xc74>)
 800bc48:	4293      	cmp	r3, r2
 800bc4a:	d04a      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	4a29      	ldr	r2, [pc, #164]	@ (800bcf8 <HAL_DMA_IRQHandler+0xc78>)
 800bc52:	4293      	cmp	r3, r2
 800bc54:	d045      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	4a28      	ldr	r2, [pc, #160]	@ (800bcfc <HAL_DMA_IRQHandler+0xc7c>)
 800bc5c:	4293      	cmp	r3, r2
 800bc5e:	d040      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	681b      	ldr	r3, [r3, #0]
 800bc64:	4a26      	ldr	r2, [pc, #152]	@ (800bd00 <HAL_DMA_IRQHandler+0xc80>)
 800bc66:	4293      	cmp	r3, r2
 800bc68:	d03b      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc6a:	687b      	ldr	r3, [r7, #4]
 800bc6c:	681b      	ldr	r3, [r3, #0]
 800bc6e:	4a25      	ldr	r2, [pc, #148]	@ (800bd04 <HAL_DMA_IRQHandler+0xc84>)
 800bc70:	4293      	cmp	r3, r2
 800bc72:	d036      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	4a23      	ldr	r2, [pc, #140]	@ (800bd08 <HAL_DMA_IRQHandler+0xc88>)
 800bc7a:	4293      	cmp	r3, r2
 800bc7c:	d031      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	4a22      	ldr	r2, [pc, #136]	@ (800bd0c <HAL_DMA_IRQHandler+0xc8c>)
 800bc84:	4293      	cmp	r3, r2
 800bc86:	d02c      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	681b      	ldr	r3, [r3, #0]
 800bc8c:	4a20      	ldr	r2, [pc, #128]	@ (800bd10 <HAL_DMA_IRQHandler+0xc90>)
 800bc8e:	4293      	cmp	r3, r2
 800bc90:	d027      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc92:	687b      	ldr	r3, [r7, #4]
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	4a1f      	ldr	r2, [pc, #124]	@ (800bd14 <HAL_DMA_IRQHandler+0xc94>)
 800bc98:	4293      	cmp	r3, r2
 800bc9a:	d022      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	4a1d      	ldr	r2, [pc, #116]	@ (800bd18 <HAL_DMA_IRQHandler+0xc98>)
 800bca2:	4293      	cmp	r3, r2
 800bca4:	d01d      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bca6:	687b      	ldr	r3, [r7, #4]
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	4a1c      	ldr	r2, [pc, #112]	@ (800bd1c <HAL_DMA_IRQHandler+0xc9c>)
 800bcac:	4293      	cmp	r3, r2
 800bcae:	d018      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bcb0:	687b      	ldr	r3, [r7, #4]
 800bcb2:	681b      	ldr	r3, [r3, #0]
 800bcb4:	4a1a      	ldr	r2, [pc, #104]	@ (800bd20 <HAL_DMA_IRQHandler+0xca0>)
 800bcb6:	4293      	cmp	r3, r2
 800bcb8:	d013      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	4a19      	ldr	r2, [pc, #100]	@ (800bd24 <HAL_DMA_IRQHandler+0xca4>)
 800bcc0:	4293      	cmp	r3, r2
 800bcc2:	d00e      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bcc4:	687b      	ldr	r3, [r7, #4]
 800bcc6:	681b      	ldr	r3, [r3, #0]
 800bcc8:	4a17      	ldr	r2, [pc, #92]	@ (800bd28 <HAL_DMA_IRQHandler+0xca8>)
 800bcca:	4293      	cmp	r3, r2
 800bccc:	d009      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	681b      	ldr	r3, [r3, #0]
 800bcd2:	4a16      	ldr	r2, [pc, #88]	@ (800bd2c <HAL_DMA_IRQHandler+0xcac>)
 800bcd4:	4293      	cmp	r3, r2
 800bcd6:	d004      	beq.n	800bce2 <HAL_DMA_IRQHandler+0xc62>
 800bcd8:	687b      	ldr	r3, [r7, #4]
 800bcda:	681b      	ldr	r3, [r3, #0]
 800bcdc:	4a14      	ldr	r2, [pc, #80]	@ (800bd30 <HAL_DMA_IRQHandler+0xcb0>)
 800bcde:	4293      	cmp	r3, r2
 800bce0:	d128      	bne.n	800bd34 <HAL_DMA_IRQHandler+0xcb4>
 800bce2:	687b      	ldr	r3, [r7, #4]
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	681a      	ldr	r2, [r3, #0]
 800bce8:	687b      	ldr	r3, [r7, #4]
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f022 0214 	bic.w	r2, r2, #20
 800bcf0:	601a      	str	r2, [r3, #0]
 800bcf2:	e027      	b.n	800bd44 <HAL_DMA_IRQHandler+0xcc4>
 800bcf4:	40020010 	.word	0x40020010
 800bcf8:	40020028 	.word	0x40020028
 800bcfc:	40020040 	.word	0x40020040
 800bd00:	40020058 	.word	0x40020058
 800bd04:	40020070 	.word	0x40020070
 800bd08:	40020088 	.word	0x40020088
 800bd0c:	400200a0 	.word	0x400200a0
 800bd10:	400200b8 	.word	0x400200b8
 800bd14:	40020410 	.word	0x40020410
 800bd18:	40020428 	.word	0x40020428
 800bd1c:	40020440 	.word	0x40020440
 800bd20:	40020458 	.word	0x40020458
 800bd24:	40020470 	.word	0x40020470
 800bd28:	40020488 	.word	0x40020488
 800bd2c:	400204a0 	.word	0x400204a0
 800bd30:	400204b8 	.word	0x400204b8
 800bd34:	687b      	ldr	r3, [r7, #4]
 800bd36:	681b      	ldr	r3, [r3, #0]
 800bd38:	681a      	ldr	r2, [r3, #0]
 800bd3a:	687b      	ldr	r3, [r7, #4]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	f022 020a 	bic.w	r2, r2, #10
 800bd42:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800bd44:	687b      	ldr	r3, [r7, #4]
 800bd46:	2201      	movs	r2, #1
 800bd48:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800bd4c:	687b      	ldr	r3, [r7, #4]
 800bd4e:	2200      	movs	r2, #0
 800bd50:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800bd54:	687b      	ldr	r3, [r7, #4]
 800bd56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd58:	2b00      	cmp	r3, #0
 800bd5a:	f000 8097 	beq.w	800be8c <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800bd5e:	687b      	ldr	r3, [r7, #4]
 800bd60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800bd62:	6878      	ldr	r0, [r7, #4]
 800bd64:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800bd66:	e091      	b.n	800be8c <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 800bd68:	687b      	ldr	r3, [r7, #4]
 800bd6a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800bd6c:	f003 031f 	and.w	r3, r3, #31
 800bd70:	2208      	movs	r2, #8
 800bd72:	409a      	lsls	r2, r3
 800bd74:	697b      	ldr	r3, [r7, #20]
 800bd76:	4013      	ands	r3, r2
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	f000 8088 	beq.w	800be8e <HAL_DMA_IRQHandler+0xe0e>
 800bd7e:	693b      	ldr	r3, [r7, #16]
 800bd80:	f003 0308 	and.w	r3, r3, #8
 800bd84:	2b00      	cmp	r3, #0
 800bd86:	f000 8082 	beq.w	800be8e <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800bd8a:	687b      	ldr	r3, [r7, #4]
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	4a41      	ldr	r2, [pc, #260]	@ (800be94 <HAL_DMA_IRQHandler+0xe14>)
 800bd90:	4293      	cmp	r3, r2
 800bd92:	d04a      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bd94:	687b      	ldr	r3, [r7, #4]
 800bd96:	681b      	ldr	r3, [r3, #0]
 800bd98:	4a3f      	ldr	r2, [pc, #252]	@ (800be98 <HAL_DMA_IRQHandler+0xe18>)
 800bd9a:	4293      	cmp	r3, r2
 800bd9c:	d045      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bd9e:	687b      	ldr	r3, [r7, #4]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	4a3e      	ldr	r2, [pc, #248]	@ (800be9c <HAL_DMA_IRQHandler+0xe1c>)
 800bda4:	4293      	cmp	r3, r2
 800bda6:	d040      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	4a3c      	ldr	r2, [pc, #240]	@ (800bea0 <HAL_DMA_IRQHandler+0xe20>)
 800bdae:	4293      	cmp	r3, r2
 800bdb0:	d03b      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	681b      	ldr	r3, [r3, #0]
 800bdb6:	4a3b      	ldr	r2, [pc, #236]	@ (800bea4 <HAL_DMA_IRQHandler+0xe24>)
 800bdb8:	4293      	cmp	r3, r2
 800bdba:	d036      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	681b      	ldr	r3, [r3, #0]
 800bdc0:	4a39      	ldr	r2, [pc, #228]	@ (800bea8 <HAL_DMA_IRQHandler+0xe28>)
 800bdc2:	4293      	cmp	r3, r2
 800bdc4:	d031      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	4a38      	ldr	r2, [pc, #224]	@ (800beac <HAL_DMA_IRQHandler+0xe2c>)
 800bdcc:	4293      	cmp	r3, r2
 800bdce:	d02c      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdd0:	687b      	ldr	r3, [r7, #4]
 800bdd2:	681b      	ldr	r3, [r3, #0]
 800bdd4:	4a36      	ldr	r2, [pc, #216]	@ (800beb0 <HAL_DMA_IRQHandler+0xe30>)
 800bdd6:	4293      	cmp	r3, r2
 800bdd8:	d027      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	681b      	ldr	r3, [r3, #0]
 800bdde:	4a35      	ldr	r2, [pc, #212]	@ (800beb4 <HAL_DMA_IRQHandler+0xe34>)
 800bde0:	4293      	cmp	r3, r2
 800bde2:	d022      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	681b      	ldr	r3, [r3, #0]
 800bde8:	4a33      	ldr	r2, [pc, #204]	@ (800beb8 <HAL_DMA_IRQHandler+0xe38>)
 800bdea:	4293      	cmp	r3, r2
 800bdec:	d01d      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdee:	687b      	ldr	r3, [r7, #4]
 800bdf0:	681b      	ldr	r3, [r3, #0]
 800bdf2:	4a32      	ldr	r2, [pc, #200]	@ (800bebc <HAL_DMA_IRQHandler+0xe3c>)
 800bdf4:	4293      	cmp	r3, r2
 800bdf6:	d018      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	4a30      	ldr	r2, [pc, #192]	@ (800bec0 <HAL_DMA_IRQHandler+0xe40>)
 800bdfe:	4293      	cmp	r3, r2
 800be00:	d013      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800be02:	687b      	ldr	r3, [r7, #4]
 800be04:	681b      	ldr	r3, [r3, #0]
 800be06:	4a2f      	ldr	r2, [pc, #188]	@ (800bec4 <HAL_DMA_IRQHandler+0xe44>)
 800be08:	4293      	cmp	r3, r2
 800be0a:	d00e      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800be0c:	687b      	ldr	r3, [r7, #4]
 800be0e:	681b      	ldr	r3, [r3, #0]
 800be10:	4a2d      	ldr	r2, [pc, #180]	@ (800bec8 <HAL_DMA_IRQHandler+0xe48>)
 800be12:	4293      	cmp	r3, r2
 800be14:	d009      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	681b      	ldr	r3, [r3, #0]
 800be1a:	4a2c      	ldr	r2, [pc, #176]	@ (800becc <HAL_DMA_IRQHandler+0xe4c>)
 800be1c:	4293      	cmp	r3, r2
 800be1e:	d004      	beq.n	800be2a <HAL_DMA_IRQHandler+0xdaa>
 800be20:	687b      	ldr	r3, [r7, #4]
 800be22:	681b      	ldr	r3, [r3, #0]
 800be24:	4a2a      	ldr	r2, [pc, #168]	@ (800bed0 <HAL_DMA_IRQHandler+0xe50>)
 800be26:	4293      	cmp	r3, r2
 800be28:	d108      	bne.n	800be3c <HAL_DMA_IRQHandler+0xdbc>
 800be2a:	687b      	ldr	r3, [r7, #4]
 800be2c:	681b      	ldr	r3, [r3, #0]
 800be2e:	681a      	ldr	r2, [r3, #0]
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	681b      	ldr	r3, [r3, #0]
 800be34:	f022 021c 	bic.w	r2, r2, #28
 800be38:	601a      	str	r2, [r3, #0]
 800be3a:	e007      	b.n	800be4c <HAL_DMA_IRQHandler+0xdcc>
 800be3c:	687b      	ldr	r3, [r7, #4]
 800be3e:	681b      	ldr	r3, [r3, #0]
 800be40:	681a      	ldr	r2, [r3, #0]
 800be42:	687b      	ldr	r3, [r7, #4]
 800be44:	681b      	ldr	r3, [r3, #0]
 800be46:	f022 020e 	bic.w	r2, r2, #14
 800be4a:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800be4c:	687b      	ldr	r3, [r7, #4]
 800be4e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800be50:	f003 031f 	and.w	r3, r3, #31
 800be54:	2201      	movs	r2, #1
 800be56:	409a      	lsls	r2, r3
 800be58:	69fb      	ldr	r3, [r7, #28]
 800be5a:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800be5c:	687b      	ldr	r3, [r7, #4]
 800be5e:	2201      	movs	r2, #1
 800be60:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800be62:	687b      	ldr	r3, [r7, #4]
 800be64:	2201      	movs	r2, #1
 800be66:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800be6a:	687b      	ldr	r3, [r7, #4]
 800be6c:	2200      	movs	r2, #0
 800be6e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be76:	2b00      	cmp	r3, #0
 800be78:	d009      	beq.n	800be8e <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 800be7a:	687b      	ldr	r3, [r7, #4]
 800be7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800be7e:	6878      	ldr	r0, [r7, #4]
 800be80:	4798      	blx	r3
 800be82:	e004      	b.n	800be8e <HAL_DMA_IRQHandler+0xe0e>
          return;
 800be84:	bf00      	nop
 800be86:	e002      	b.n	800be8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be88:	bf00      	nop
 800be8a:	e000      	b.n	800be8e <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 800be8c:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 800be8e:	3728      	adds	r7, #40	@ 0x28
 800be90:	46bd      	mov	sp, r7
 800be92:	bd80      	pop	{r7, pc}
 800be94:	40020010 	.word	0x40020010
 800be98:	40020028 	.word	0x40020028
 800be9c:	40020040 	.word	0x40020040
 800bea0:	40020058 	.word	0x40020058
 800bea4:	40020070 	.word	0x40020070
 800bea8:	40020088 	.word	0x40020088
 800beac:	400200a0 	.word	0x400200a0
 800beb0:	400200b8 	.word	0x400200b8
 800beb4:	40020410 	.word	0x40020410
 800beb8:	40020428 	.word	0x40020428
 800bebc:	40020440 	.word	0x40020440
 800bec0:	40020458 	.word	0x40020458
 800bec4:	40020470 	.word	0x40020470
 800bec8:	40020488 	.word	0x40020488
 800becc:	400204a0 	.word	0x400204a0
 800bed0:	400204b8 	.word	0x400204b8

0800bed4 <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800bed4:	b480      	push	{r7}
 800bed6:	b083      	sub	sp, #12
 800bed8:	af00      	add	r7, sp, #0
 800beda:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800bedc:	687b      	ldr	r3, [r7, #4]
 800bede:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800bee0:	4618      	mov	r0, r3
 800bee2:	370c      	adds	r7, #12
 800bee4:	46bd      	mov	sp, r7
 800bee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800beea:	4770      	bx	lr

0800beec <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800beec:	b480      	push	{r7}
 800beee:	b087      	sub	sp, #28
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	60f8      	str	r0, [r7, #12]
 800bef4:	60b9      	str	r1, [r7, #8]
 800bef6:	607a      	str	r2, [r7, #4]
 800bef8:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800befa:	68fb      	ldr	r3, [r7, #12]
 800befc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800befe:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800bf04:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800bf06:	68fb      	ldr	r3, [r7, #12]
 800bf08:	681b      	ldr	r3, [r3, #0]
 800bf0a:	4a7f      	ldr	r2, [pc, #508]	@ (800c108 <DMA_SetConfig+0x21c>)
 800bf0c:	4293      	cmp	r3, r2
 800bf0e:	d072      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf10:	68fb      	ldr	r3, [r7, #12]
 800bf12:	681b      	ldr	r3, [r3, #0]
 800bf14:	4a7d      	ldr	r2, [pc, #500]	@ (800c10c <DMA_SetConfig+0x220>)
 800bf16:	4293      	cmp	r3, r2
 800bf18:	d06d      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf1a:	68fb      	ldr	r3, [r7, #12]
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	4a7c      	ldr	r2, [pc, #496]	@ (800c110 <DMA_SetConfig+0x224>)
 800bf20:	4293      	cmp	r3, r2
 800bf22:	d068      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf24:	68fb      	ldr	r3, [r7, #12]
 800bf26:	681b      	ldr	r3, [r3, #0]
 800bf28:	4a7a      	ldr	r2, [pc, #488]	@ (800c114 <DMA_SetConfig+0x228>)
 800bf2a:	4293      	cmp	r3, r2
 800bf2c:	d063      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf2e:	68fb      	ldr	r3, [r7, #12]
 800bf30:	681b      	ldr	r3, [r3, #0]
 800bf32:	4a79      	ldr	r2, [pc, #484]	@ (800c118 <DMA_SetConfig+0x22c>)
 800bf34:	4293      	cmp	r3, r2
 800bf36:	d05e      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf38:	68fb      	ldr	r3, [r7, #12]
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	4a77      	ldr	r2, [pc, #476]	@ (800c11c <DMA_SetConfig+0x230>)
 800bf3e:	4293      	cmp	r3, r2
 800bf40:	d059      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	4a76      	ldr	r2, [pc, #472]	@ (800c120 <DMA_SetConfig+0x234>)
 800bf48:	4293      	cmp	r3, r2
 800bf4a:	d054      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf4c:	68fb      	ldr	r3, [r7, #12]
 800bf4e:	681b      	ldr	r3, [r3, #0]
 800bf50:	4a74      	ldr	r2, [pc, #464]	@ (800c124 <DMA_SetConfig+0x238>)
 800bf52:	4293      	cmp	r3, r2
 800bf54:	d04f      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf56:	68fb      	ldr	r3, [r7, #12]
 800bf58:	681b      	ldr	r3, [r3, #0]
 800bf5a:	4a73      	ldr	r2, [pc, #460]	@ (800c128 <DMA_SetConfig+0x23c>)
 800bf5c:	4293      	cmp	r3, r2
 800bf5e:	d04a      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf60:	68fb      	ldr	r3, [r7, #12]
 800bf62:	681b      	ldr	r3, [r3, #0]
 800bf64:	4a71      	ldr	r2, [pc, #452]	@ (800c12c <DMA_SetConfig+0x240>)
 800bf66:	4293      	cmp	r3, r2
 800bf68:	d045      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf6a:	68fb      	ldr	r3, [r7, #12]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	4a70      	ldr	r2, [pc, #448]	@ (800c130 <DMA_SetConfig+0x244>)
 800bf70:	4293      	cmp	r3, r2
 800bf72:	d040      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf74:	68fb      	ldr	r3, [r7, #12]
 800bf76:	681b      	ldr	r3, [r3, #0]
 800bf78:	4a6e      	ldr	r2, [pc, #440]	@ (800c134 <DMA_SetConfig+0x248>)
 800bf7a:	4293      	cmp	r3, r2
 800bf7c:	d03b      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf7e:	68fb      	ldr	r3, [r7, #12]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	4a6d      	ldr	r2, [pc, #436]	@ (800c138 <DMA_SetConfig+0x24c>)
 800bf84:	4293      	cmp	r3, r2
 800bf86:	d036      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf88:	68fb      	ldr	r3, [r7, #12]
 800bf8a:	681b      	ldr	r3, [r3, #0]
 800bf8c:	4a6b      	ldr	r2, [pc, #428]	@ (800c13c <DMA_SetConfig+0x250>)
 800bf8e:	4293      	cmp	r3, r2
 800bf90:	d031      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf92:	68fb      	ldr	r3, [r7, #12]
 800bf94:	681b      	ldr	r3, [r3, #0]
 800bf96:	4a6a      	ldr	r2, [pc, #424]	@ (800c140 <DMA_SetConfig+0x254>)
 800bf98:	4293      	cmp	r3, r2
 800bf9a:	d02c      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bf9c:	68fb      	ldr	r3, [r7, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	4a68      	ldr	r2, [pc, #416]	@ (800c144 <DMA_SetConfig+0x258>)
 800bfa2:	4293      	cmp	r3, r2
 800bfa4:	d027      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	4a67      	ldr	r2, [pc, #412]	@ (800c148 <DMA_SetConfig+0x25c>)
 800bfac:	4293      	cmp	r3, r2
 800bfae:	d022      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfb0:	68fb      	ldr	r3, [r7, #12]
 800bfb2:	681b      	ldr	r3, [r3, #0]
 800bfb4:	4a65      	ldr	r2, [pc, #404]	@ (800c14c <DMA_SetConfig+0x260>)
 800bfb6:	4293      	cmp	r3, r2
 800bfb8:	d01d      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfba:	68fb      	ldr	r3, [r7, #12]
 800bfbc:	681b      	ldr	r3, [r3, #0]
 800bfbe:	4a64      	ldr	r2, [pc, #400]	@ (800c150 <DMA_SetConfig+0x264>)
 800bfc0:	4293      	cmp	r3, r2
 800bfc2:	d018      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfc4:	68fb      	ldr	r3, [r7, #12]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	4a62      	ldr	r2, [pc, #392]	@ (800c154 <DMA_SetConfig+0x268>)
 800bfca:	4293      	cmp	r3, r2
 800bfcc:	d013      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfce:	68fb      	ldr	r3, [r7, #12]
 800bfd0:	681b      	ldr	r3, [r3, #0]
 800bfd2:	4a61      	ldr	r2, [pc, #388]	@ (800c158 <DMA_SetConfig+0x26c>)
 800bfd4:	4293      	cmp	r3, r2
 800bfd6:	d00e      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfd8:	68fb      	ldr	r3, [r7, #12]
 800bfda:	681b      	ldr	r3, [r3, #0]
 800bfdc:	4a5f      	ldr	r2, [pc, #380]	@ (800c15c <DMA_SetConfig+0x270>)
 800bfde:	4293      	cmp	r3, r2
 800bfe0:	d009      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	681b      	ldr	r3, [r3, #0]
 800bfe6:	4a5e      	ldr	r2, [pc, #376]	@ (800c160 <DMA_SetConfig+0x274>)
 800bfe8:	4293      	cmp	r3, r2
 800bfea:	d004      	beq.n	800bff6 <DMA_SetConfig+0x10a>
 800bfec:	68fb      	ldr	r3, [r7, #12]
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	4a5c      	ldr	r2, [pc, #368]	@ (800c164 <DMA_SetConfig+0x278>)
 800bff2:	4293      	cmp	r3, r2
 800bff4:	d101      	bne.n	800bffa <DMA_SetConfig+0x10e>
 800bff6:	2301      	movs	r3, #1
 800bff8:	e000      	b.n	800bffc <DMA_SetConfig+0x110>
 800bffa:	2300      	movs	r3, #0
 800bffc:	2b00      	cmp	r3, #0
 800bffe:	d00d      	beq.n	800c01c <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800c000:	68fb      	ldr	r3, [r7, #12]
 800c002:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c004:	68fa      	ldr	r2, [r7, #12]
 800c006:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800c008:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800c00e:	2b00      	cmp	r3, #0
 800c010:	d004      	beq.n	800c01c <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800c012:	68fb      	ldr	r3, [r7, #12]
 800c014:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800c01a:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c01c:	68fb      	ldr	r3, [r7, #12]
 800c01e:	681b      	ldr	r3, [r3, #0]
 800c020:	4a39      	ldr	r2, [pc, #228]	@ (800c108 <DMA_SetConfig+0x21c>)
 800c022:	4293      	cmp	r3, r2
 800c024:	d04a      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c026:	68fb      	ldr	r3, [r7, #12]
 800c028:	681b      	ldr	r3, [r3, #0]
 800c02a:	4a38      	ldr	r2, [pc, #224]	@ (800c10c <DMA_SetConfig+0x220>)
 800c02c:	4293      	cmp	r3, r2
 800c02e:	d045      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c030:	68fb      	ldr	r3, [r7, #12]
 800c032:	681b      	ldr	r3, [r3, #0]
 800c034:	4a36      	ldr	r2, [pc, #216]	@ (800c110 <DMA_SetConfig+0x224>)
 800c036:	4293      	cmp	r3, r2
 800c038:	d040      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	681b      	ldr	r3, [r3, #0]
 800c03e:	4a35      	ldr	r2, [pc, #212]	@ (800c114 <DMA_SetConfig+0x228>)
 800c040:	4293      	cmp	r3, r2
 800c042:	d03b      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	681b      	ldr	r3, [r3, #0]
 800c048:	4a33      	ldr	r2, [pc, #204]	@ (800c118 <DMA_SetConfig+0x22c>)
 800c04a:	4293      	cmp	r3, r2
 800c04c:	d036      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c04e:	68fb      	ldr	r3, [r7, #12]
 800c050:	681b      	ldr	r3, [r3, #0]
 800c052:	4a32      	ldr	r2, [pc, #200]	@ (800c11c <DMA_SetConfig+0x230>)
 800c054:	4293      	cmp	r3, r2
 800c056:	d031      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c058:	68fb      	ldr	r3, [r7, #12]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	4a30      	ldr	r2, [pc, #192]	@ (800c120 <DMA_SetConfig+0x234>)
 800c05e:	4293      	cmp	r3, r2
 800c060:	d02c      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	4a2f      	ldr	r2, [pc, #188]	@ (800c124 <DMA_SetConfig+0x238>)
 800c068:	4293      	cmp	r3, r2
 800c06a:	d027      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	4a2d      	ldr	r2, [pc, #180]	@ (800c128 <DMA_SetConfig+0x23c>)
 800c072:	4293      	cmp	r3, r2
 800c074:	d022      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	681b      	ldr	r3, [r3, #0]
 800c07a:	4a2c      	ldr	r2, [pc, #176]	@ (800c12c <DMA_SetConfig+0x240>)
 800c07c:	4293      	cmp	r3, r2
 800c07e:	d01d      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c080:	68fb      	ldr	r3, [r7, #12]
 800c082:	681b      	ldr	r3, [r3, #0]
 800c084:	4a2a      	ldr	r2, [pc, #168]	@ (800c130 <DMA_SetConfig+0x244>)
 800c086:	4293      	cmp	r3, r2
 800c088:	d018      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c08a:	68fb      	ldr	r3, [r7, #12]
 800c08c:	681b      	ldr	r3, [r3, #0]
 800c08e:	4a29      	ldr	r2, [pc, #164]	@ (800c134 <DMA_SetConfig+0x248>)
 800c090:	4293      	cmp	r3, r2
 800c092:	d013      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c094:	68fb      	ldr	r3, [r7, #12]
 800c096:	681b      	ldr	r3, [r3, #0]
 800c098:	4a27      	ldr	r2, [pc, #156]	@ (800c138 <DMA_SetConfig+0x24c>)
 800c09a:	4293      	cmp	r3, r2
 800c09c:	d00e      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c09e:	68fb      	ldr	r3, [r7, #12]
 800c0a0:	681b      	ldr	r3, [r3, #0]
 800c0a2:	4a26      	ldr	r2, [pc, #152]	@ (800c13c <DMA_SetConfig+0x250>)
 800c0a4:	4293      	cmp	r3, r2
 800c0a6:	d009      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c0a8:	68fb      	ldr	r3, [r7, #12]
 800c0aa:	681b      	ldr	r3, [r3, #0]
 800c0ac:	4a24      	ldr	r2, [pc, #144]	@ (800c140 <DMA_SetConfig+0x254>)
 800c0ae:	4293      	cmp	r3, r2
 800c0b0:	d004      	beq.n	800c0bc <DMA_SetConfig+0x1d0>
 800c0b2:	68fb      	ldr	r3, [r7, #12]
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	4a23      	ldr	r2, [pc, #140]	@ (800c144 <DMA_SetConfig+0x258>)
 800c0b8:	4293      	cmp	r3, r2
 800c0ba:	d101      	bne.n	800c0c0 <DMA_SetConfig+0x1d4>
 800c0bc:	2301      	movs	r3, #1
 800c0be:	e000      	b.n	800c0c2 <DMA_SetConfig+0x1d6>
 800c0c0:	2300      	movs	r3, #0
 800c0c2:	2b00      	cmp	r3, #0
 800c0c4:	d059      	beq.n	800c17a <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800c0c6:	68fb      	ldr	r3, [r7, #12]
 800c0c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c0ca:	f003 031f 	and.w	r3, r3, #31
 800c0ce:	223f      	movs	r2, #63	@ 0x3f
 800c0d0:	409a      	lsls	r2, r3
 800c0d2:	697b      	ldr	r3, [r7, #20]
 800c0d4:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800c0d6:	68fb      	ldr	r3, [r7, #12]
 800c0d8:	681b      	ldr	r3, [r3, #0]
 800c0da:	681a      	ldr	r2, [r3, #0]
 800c0dc:	68fb      	ldr	r3, [r7, #12]
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800c0e4:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800c0e6:	68fb      	ldr	r3, [r7, #12]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	683a      	ldr	r2, [r7, #0]
 800c0ec:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c0ee:	68fb      	ldr	r3, [r7, #12]
 800c0f0:	689b      	ldr	r3, [r3, #8]
 800c0f2:	2b40      	cmp	r3, #64	@ 0x40
 800c0f4:	d138      	bne.n	800c168 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800c0f6:	68fb      	ldr	r3, [r7, #12]
 800c0f8:	681b      	ldr	r3, [r3, #0]
 800c0fa:	687a      	ldr	r2, [r7, #4]
 800c0fc:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800c0fe:	68fb      	ldr	r3, [r7, #12]
 800c100:	681b      	ldr	r3, [r3, #0]
 800c102:	68ba      	ldr	r2, [r7, #8]
 800c104:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800c106:	e086      	b.n	800c216 <DMA_SetConfig+0x32a>
 800c108:	40020010 	.word	0x40020010
 800c10c:	40020028 	.word	0x40020028
 800c110:	40020040 	.word	0x40020040
 800c114:	40020058 	.word	0x40020058
 800c118:	40020070 	.word	0x40020070
 800c11c:	40020088 	.word	0x40020088
 800c120:	400200a0 	.word	0x400200a0
 800c124:	400200b8 	.word	0x400200b8
 800c128:	40020410 	.word	0x40020410
 800c12c:	40020428 	.word	0x40020428
 800c130:	40020440 	.word	0x40020440
 800c134:	40020458 	.word	0x40020458
 800c138:	40020470 	.word	0x40020470
 800c13c:	40020488 	.word	0x40020488
 800c140:	400204a0 	.word	0x400204a0
 800c144:	400204b8 	.word	0x400204b8
 800c148:	58025408 	.word	0x58025408
 800c14c:	5802541c 	.word	0x5802541c
 800c150:	58025430 	.word	0x58025430
 800c154:	58025444 	.word	0x58025444
 800c158:	58025458 	.word	0x58025458
 800c15c:	5802546c 	.word	0x5802546c
 800c160:	58025480 	.word	0x58025480
 800c164:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800c168:	68fb      	ldr	r3, [r7, #12]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	68ba      	ldr	r2, [r7, #8]
 800c16e:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800c170:	68fb      	ldr	r3, [r7, #12]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	687a      	ldr	r2, [r7, #4]
 800c176:	60da      	str	r2, [r3, #12]
}
 800c178:	e04d      	b.n	800c216 <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800c17a:	68fb      	ldr	r3, [r7, #12]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a29      	ldr	r2, [pc, #164]	@ (800c224 <DMA_SetConfig+0x338>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d022      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c184:	68fb      	ldr	r3, [r7, #12]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a27      	ldr	r2, [pc, #156]	@ (800c228 <DMA_SetConfig+0x33c>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d01d      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c18e:	68fb      	ldr	r3, [r7, #12]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a26      	ldr	r2, [pc, #152]	@ (800c22c <DMA_SetConfig+0x340>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d018      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c198:	68fb      	ldr	r3, [r7, #12]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a24      	ldr	r2, [pc, #144]	@ (800c230 <DMA_SetConfig+0x344>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d013      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c1a2:	68fb      	ldr	r3, [r7, #12]
 800c1a4:	681b      	ldr	r3, [r3, #0]
 800c1a6:	4a23      	ldr	r2, [pc, #140]	@ (800c234 <DMA_SetConfig+0x348>)
 800c1a8:	4293      	cmp	r3, r2
 800c1aa:	d00e      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c1ac:	68fb      	ldr	r3, [r7, #12]
 800c1ae:	681b      	ldr	r3, [r3, #0]
 800c1b0:	4a21      	ldr	r2, [pc, #132]	@ (800c238 <DMA_SetConfig+0x34c>)
 800c1b2:	4293      	cmp	r3, r2
 800c1b4:	d009      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c1b6:	68fb      	ldr	r3, [r7, #12]
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	4a20      	ldr	r2, [pc, #128]	@ (800c23c <DMA_SetConfig+0x350>)
 800c1bc:	4293      	cmp	r3, r2
 800c1be:	d004      	beq.n	800c1ca <DMA_SetConfig+0x2de>
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	681b      	ldr	r3, [r3, #0]
 800c1c4:	4a1e      	ldr	r2, [pc, #120]	@ (800c240 <DMA_SetConfig+0x354>)
 800c1c6:	4293      	cmp	r3, r2
 800c1c8:	d101      	bne.n	800c1ce <DMA_SetConfig+0x2e2>
 800c1ca:	2301      	movs	r3, #1
 800c1cc:	e000      	b.n	800c1d0 <DMA_SetConfig+0x2e4>
 800c1ce:	2300      	movs	r3, #0
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	d020      	beq.n	800c216 <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800c1d8:	f003 031f 	and.w	r3, r3, #31
 800c1dc:	2201      	movs	r2, #1
 800c1de:	409a      	lsls	r2, r3
 800c1e0:	693b      	ldr	r3, [r7, #16]
 800c1e2:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	683a      	ldr	r2, [r7, #0]
 800c1ea:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	689b      	ldr	r3, [r3, #8]
 800c1f0:	2b40      	cmp	r3, #64	@ 0x40
 800c1f2:	d108      	bne.n	800c206 <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800c1f4:	68fb      	ldr	r3, [r7, #12]
 800c1f6:	681b      	ldr	r3, [r3, #0]
 800c1f8:	687a      	ldr	r2, [r7, #4]
 800c1fa:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800c1fc:	68fb      	ldr	r3, [r7, #12]
 800c1fe:	681b      	ldr	r3, [r3, #0]
 800c200:	68ba      	ldr	r2, [r7, #8]
 800c202:	60da      	str	r2, [r3, #12]
}
 800c204:	e007      	b.n	800c216 <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800c206:	68fb      	ldr	r3, [r7, #12]
 800c208:	681b      	ldr	r3, [r3, #0]
 800c20a:	68ba      	ldr	r2, [r7, #8]
 800c20c:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	681b      	ldr	r3, [r3, #0]
 800c212:	687a      	ldr	r2, [r7, #4]
 800c214:	60da      	str	r2, [r3, #12]
}
 800c216:	bf00      	nop
 800c218:	371c      	adds	r7, #28
 800c21a:	46bd      	mov	sp, r7
 800c21c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c220:	4770      	bx	lr
 800c222:	bf00      	nop
 800c224:	58025408 	.word	0x58025408
 800c228:	5802541c 	.word	0x5802541c
 800c22c:	58025430 	.word	0x58025430
 800c230:	58025444 	.word	0x58025444
 800c234:	58025458 	.word	0x58025458
 800c238:	5802546c 	.word	0x5802546c
 800c23c:	58025480 	.word	0x58025480
 800c240:	58025494 	.word	0x58025494

0800c244 <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800c244:	b480      	push	{r7}
 800c246:	b085      	sub	sp, #20
 800c248:	af00      	add	r7, sp, #0
 800c24a:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	4a42      	ldr	r2, [pc, #264]	@ (800c35c <DMA_CalcBaseAndBitshift+0x118>)
 800c252:	4293      	cmp	r3, r2
 800c254:	d04a      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	4a41      	ldr	r2, [pc, #260]	@ (800c360 <DMA_CalcBaseAndBitshift+0x11c>)
 800c25c:	4293      	cmp	r3, r2
 800c25e:	d045      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c260:	687b      	ldr	r3, [r7, #4]
 800c262:	681b      	ldr	r3, [r3, #0]
 800c264:	4a3f      	ldr	r2, [pc, #252]	@ (800c364 <DMA_CalcBaseAndBitshift+0x120>)
 800c266:	4293      	cmp	r3, r2
 800c268:	d040      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c26a:	687b      	ldr	r3, [r7, #4]
 800c26c:	681b      	ldr	r3, [r3, #0]
 800c26e:	4a3e      	ldr	r2, [pc, #248]	@ (800c368 <DMA_CalcBaseAndBitshift+0x124>)
 800c270:	4293      	cmp	r3, r2
 800c272:	d03b      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c274:	687b      	ldr	r3, [r7, #4]
 800c276:	681b      	ldr	r3, [r3, #0]
 800c278:	4a3c      	ldr	r2, [pc, #240]	@ (800c36c <DMA_CalcBaseAndBitshift+0x128>)
 800c27a:	4293      	cmp	r3, r2
 800c27c:	d036      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c27e:	687b      	ldr	r3, [r7, #4]
 800c280:	681b      	ldr	r3, [r3, #0]
 800c282:	4a3b      	ldr	r2, [pc, #236]	@ (800c370 <DMA_CalcBaseAndBitshift+0x12c>)
 800c284:	4293      	cmp	r3, r2
 800c286:	d031      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	4a39      	ldr	r2, [pc, #228]	@ (800c374 <DMA_CalcBaseAndBitshift+0x130>)
 800c28e:	4293      	cmp	r3, r2
 800c290:	d02c      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	681b      	ldr	r3, [r3, #0]
 800c296:	4a38      	ldr	r2, [pc, #224]	@ (800c378 <DMA_CalcBaseAndBitshift+0x134>)
 800c298:	4293      	cmp	r3, r2
 800c29a:	d027      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	4a36      	ldr	r2, [pc, #216]	@ (800c37c <DMA_CalcBaseAndBitshift+0x138>)
 800c2a2:	4293      	cmp	r3, r2
 800c2a4:	d022      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2a6:	687b      	ldr	r3, [r7, #4]
 800c2a8:	681b      	ldr	r3, [r3, #0]
 800c2aa:	4a35      	ldr	r2, [pc, #212]	@ (800c380 <DMA_CalcBaseAndBitshift+0x13c>)
 800c2ac:	4293      	cmp	r3, r2
 800c2ae:	d01d      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	681b      	ldr	r3, [r3, #0]
 800c2b4:	4a33      	ldr	r2, [pc, #204]	@ (800c384 <DMA_CalcBaseAndBitshift+0x140>)
 800c2b6:	4293      	cmp	r3, r2
 800c2b8:	d018      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2ba:	687b      	ldr	r3, [r7, #4]
 800c2bc:	681b      	ldr	r3, [r3, #0]
 800c2be:	4a32      	ldr	r2, [pc, #200]	@ (800c388 <DMA_CalcBaseAndBitshift+0x144>)
 800c2c0:	4293      	cmp	r3, r2
 800c2c2:	d013      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2c4:	687b      	ldr	r3, [r7, #4]
 800c2c6:	681b      	ldr	r3, [r3, #0]
 800c2c8:	4a30      	ldr	r2, [pc, #192]	@ (800c38c <DMA_CalcBaseAndBitshift+0x148>)
 800c2ca:	4293      	cmp	r3, r2
 800c2cc:	d00e      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2ce:	687b      	ldr	r3, [r7, #4]
 800c2d0:	681b      	ldr	r3, [r3, #0]
 800c2d2:	4a2f      	ldr	r2, [pc, #188]	@ (800c390 <DMA_CalcBaseAndBitshift+0x14c>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d009      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	681b      	ldr	r3, [r3, #0]
 800c2dc:	4a2d      	ldr	r2, [pc, #180]	@ (800c394 <DMA_CalcBaseAndBitshift+0x150>)
 800c2de:	4293      	cmp	r3, r2
 800c2e0:	d004      	beq.n	800c2ec <DMA_CalcBaseAndBitshift+0xa8>
 800c2e2:	687b      	ldr	r3, [r7, #4]
 800c2e4:	681b      	ldr	r3, [r3, #0]
 800c2e6:	4a2c      	ldr	r2, [pc, #176]	@ (800c398 <DMA_CalcBaseAndBitshift+0x154>)
 800c2e8:	4293      	cmp	r3, r2
 800c2ea:	d101      	bne.n	800c2f0 <DMA_CalcBaseAndBitshift+0xac>
 800c2ec:	2301      	movs	r3, #1
 800c2ee:	e000      	b.n	800c2f2 <DMA_CalcBaseAndBitshift+0xae>
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	2b00      	cmp	r3, #0
 800c2f4:	d024      	beq.n	800c340 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c2f6:	687b      	ldr	r3, [r7, #4]
 800c2f8:	681b      	ldr	r3, [r3, #0]
 800c2fa:	b2db      	uxtb	r3, r3
 800c2fc:	3b10      	subs	r3, #16
 800c2fe:	4a27      	ldr	r2, [pc, #156]	@ (800c39c <DMA_CalcBaseAndBitshift+0x158>)
 800c300:	fba2 2303 	umull	r2, r3, r2, r3
 800c304:	091b      	lsrs	r3, r3, #4
 800c306:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800c308:	68fb      	ldr	r3, [r7, #12]
 800c30a:	f003 0307 	and.w	r3, r3, #7
 800c30e:	4a24      	ldr	r2, [pc, #144]	@ (800c3a0 <DMA_CalcBaseAndBitshift+0x15c>)
 800c310:	5cd3      	ldrb	r3, [r2, r3]
 800c312:	461a      	mov	r2, r3
 800c314:	687b      	ldr	r3, [r7, #4]
 800c316:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800c318:	68fb      	ldr	r3, [r7, #12]
 800c31a:	2b03      	cmp	r3, #3
 800c31c:	d908      	bls.n	800c330 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800c31e:	687b      	ldr	r3, [r7, #4]
 800c320:	681b      	ldr	r3, [r3, #0]
 800c322:	461a      	mov	r2, r3
 800c324:	4b1f      	ldr	r3, [pc, #124]	@ (800c3a4 <DMA_CalcBaseAndBitshift+0x160>)
 800c326:	4013      	ands	r3, r2
 800c328:	1d1a      	adds	r2, r3, #4
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	659a      	str	r2, [r3, #88]	@ 0x58
 800c32e:	e00d      	b.n	800c34c <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800c330:	687b      	ldr	r3, [r7, #4]
 800c332:	681b      	ldr	r3, [r3, #0]
 800c334:	461a      	mov	r2, r3
 800c336:	4b1b      	ldr	r3, [pc, #108]	@ (800c3a4 <DMA_CalcBaseAndBitshift+0x160>)
 800c338:	4013      	ands	r3, r2
 800c33a:	687a      	ldr	r2, [r7, #4]
 800c33c:	6593      	str	r3, [r2, #88]	@ 0x58
 800c33e:	e005      	b.n	800c34c <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800c340:	687b      	ldr	r3, [r7, #4]
 800c342:	681b      	ldr	r3, [r3, #0]
 800c344:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800c34c:	687b      	ldr	r3, [r7, #4]
 800c34e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800c350:	4618      	mov	r0, r3
 800c352:	3714      	adds	r7, #20
 800c354:	46bd      	mov	sp, r7
 800c356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35a:	4770      	bx	lr
 800c35c:	40020010 	.word	0x40020010
 800c360:	40020028 	.word	0x40020028
 800c364:	40020040 	.word	0x40020040
 800c368:	40020058 	.word	0x40020058
 800c36c:	40020070 	.word	0x40020070
 800c370:	40020088 	.word	0x40020088
 800c374:	400200a0 	.word	0x400200a0
 800c378:	400200b8 	.word	0x400200b8
 800c37c:	40020410 	.word	0x40020410
 800c380:	40020428 	.word	0x40020428
 800c384:	40020440 	.word	0x40020440
 800c388:	40020458 	.word	0x40020458
 800c38c:	40020470 	.word	0x40020470
 800c390:	40020488 	.word	0x40020488
 800c394:	400204a0 	.word	0x400204a0
 800c398:	400204b8 	.word	0x400204b8
 800c39c:	aaaaaaab 	.word	0xaaaaaaab
 800c3a0:	08020c60 	.word	0x08020c60
 800c3a4:	fffffc00 	.word	0xfffffc00

0800c3a8 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800c3a8:	b480      	push	{r7}
 800c3aa:	b085      	sub	sp, #20
 800c3ac:	af00      	add	r7, sp, #0
 800c3ae:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c3b0:	2300      	movs	r3, #0
 800c3b2:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800c3b4:	687b      	ldr	r3, [r7, #4]
 800c3b6:	699b      	ldr	r3, [r3, #24]
 800c3b8:	2b00      	cmp	r3, #0
 800c3ba:	d120      	bne.n	800c3fe <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c3c0:	2b03      	cmp	r3, #3
 800c3c2:	d858      	bhi.n	800c476 <DMA_CheckFifoParam+0xce>
 800c3c4:	a201      	add	r2, pc, #4	@ (adr r2, 800c3cc <DMA_CheckFifoParam+0x24>)
 800c3c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c3ca:	bf00      	nop
 800c3cc:	0800c3dd 	.word	0x0800c3dd
 800c3d0:	0800c3ef 	.word	0x0800c3ef
 800c3d4:	0800c3dd 	.word	0x0800c3dd
 800c3d8:	0800c477 	.word	0x0800c477
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3e0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c3e4:	2b00      	cmp	r3, #0
 800c3e6:	d048      	beq.n	800c47a <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800c3e8:	2301      	movs	r3, #1
 800c3ea:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c3ec:	e045      	b.n	800c47a <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c3ee:	687b      	ldr	r3, [r7, #4]
 800c3f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3f2:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c3f6:	d142      	bne.n	800c47e <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c3fc:	e03f      	b.n	800c47e <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800c3fe:	687b      	ldr	r3, [r7, #4]
 800c400:	699b      	ldr	r3, [r3, #24]
 800c402:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800c406:	d123      	bne.n	800c450 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800c408:	687b      	ldr	r3, [r7, #4]
 800c40a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c40c:	2b03      	cmp	r3, #3
 800c40e:	d838      	bhi.n	800c482 <DMA_CheckFifoParam+0xda>
 800c410:	a201      	add	r2, pc, #4	@ (adr r2, 800c418 <DMA_CheckFifoParam+0x70>)
 800c412:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c416:	bf00      	nop
 800c418:	0800c429 	.word	0x0800c429
 800c41c:	0800c42f 	.word	0x0800c42f
 800c420:	0800c429 	.word	0x0800c429
 800c424:	0800c441 	.word	0x0800c441
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800c428:	2301      	movs	r3, #1
 800c42a:	73fb      	strb	r3, [r7, #15]
        break;
 800c42c:	e030      	b.n	800c490 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c42e:	687b      	ldr	r3, [r7, #4]
 800c430:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c432:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c436:	2b00      	cmp	r3, #0
 800c438:	d025      	beq.n	800c486 <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800c43a:	2301      	movs	r3, #1
 800c43c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c43e:	e022      	b.n	800c486 <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800c440:	687b      	ldr	r3, [r7, #4]
 800c442:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c444:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800c448:	d11f      	bne.n	800c48a <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800c44a:	2301      	movs	r3, #1
 800c44c:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800c44e:	e01c      	b.n	800c48a <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800c450:	687b      	ldr	r3, [r7, #4]
 800c452:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c454:	2b02      	cmp	r3, #2
 800c456:	d902      	bls.n	800c45e <DMA_CheckFifoParam+0xb6>
 800c458:	2b03      	cmp	r3, #3
 800c45a:	d003      	beq.n	800c464 <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800c45c:	e018      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800c45e:	2301      	movs	r3, #1
 800c460:	73fb      	strb	r3, [r7, #15]
        break;
 800c462:	e015      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c468:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800c46c:	2b00      	cmp	r3, #0
 800c46e:	d00e      	beq.n	800c48e <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800c470:	2301      	movs	r3, #1
 800c472:	73fb      	strb	r3, [r7, #15]
    break;
 800c474:	e00b      	b.n	800c48e <DMA_CheckFifoParam+0xe6>
        break;
 800c476:	bf00      	nop
 800c478:	e00a      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        break;
 800c47a:	bf00      	nop
 800c47c:	e008      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        break;
 800c47e:	bf00      	nop
 800c480:	e006      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        break;
 800c482:	bf00      	nop
 800c484:	e004      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        break;
 800c486:	bf00      	nop
 800c488:	e002      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
        break;
 800c48a:	bf00      	nop
 800c48c:	e000      	b.n	800c490 <DMA_CheckFifoParam+0xe8>
    break;
 800c48e:	bf00      	nop
    }
  }

  return status;
 800c490:	7bfb      	ldrb	r3, [r7, #15]
}
 800c492:	4618      	mov	r0, r3
 800c494:	3714      	adds	r7, #20
 800c496:	46bd      	mov	sp, r7
 800c498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c49c:	4770      	bx	lr
 800c49e:	bf00      	nop

0800c4a0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c4a0:	b480      	push	{r7}
 800c4a2:	b085      	sub	sp, #20
 800c4a4:	af00      	add	r7, sp, #0
 800c4a6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800c4a8:	687b      	ldr	r3, [r7, #4]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c4ae:	687b      	ldr	r3, [r7, #4]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	4a38      	ldr	r2, [pc, #224]	@ (800c594 <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800c4b4:	4293      	cmp	r3, r2
 800c4b6:	d022      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	4a36      	ldr	r2, [pc, #216]	@ (800c598 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800c4be:	4293      	cmp	r3, r2
 800c4c0:	d01d      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4c2:	687b      	ldr	r3, [r7, #4]
 800c4c4:	681b      	ldr	r3, [r3, #0]
 800c4c6:	4a35      	ldr	r2, [pc, #212]	@ (800c59c <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800c4c8:	4293      	cmp	r3, r2
 800c4ca:	d018      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4cc:	687b      	ldr	r3, [r7, #4]
 800c4ce:	681b      	ldr	r3, [r3, #0]
 800c4d0:	4a33      	ldr	r2, [pc, #204]	@ (800c5a0 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d013      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4d6:	687b      	ldr	r3, [r7, #4]
 800c4d8:	681b      	ldr	r3, [r3, #0]
 800c4da:	4a32      	ldr	r2, [pc, #200]	@ (800c5a4 <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800c4dc:	4293      	cmp	r3, r2
 800c4de:	d00e      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a30      	ldr	r2, [pc, #192]	@ (800c5a8 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d009      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	681b      	ldr	r3, [r3, #0]
 800c4ee:	4a2f      	ldr	r2, [pc, #188]	@ (800c5ac <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800c4f0:	4293      	cmp	r3, r2
 800c4f2:	d004      	beq.n	800c4fe <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800c4f4:	687b      	ldr	r3, [r7, #4]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	4a2d      	ldr	r2, [pc, #180]	@ (800c5b0 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800c4fa:	4293      	cmp	r3, r2
 800c4fc:	d101      	bne.n	800c502 <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800c4fe:	2301      	movs	r3, #1
 800c500:	e000      	b.n	800c504 <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800c502:	2300      	movs	r3, #0
 800c504:	2b00      	cmp	r3, #0
 800c506:	d01a      	beq.n	800c53e <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800c508:	687b      	ldr	r3, [r7, #4]
 800c50a:	681b      	ldr	r3, [r3, #0]
 800c50c:	b2db      	uxtb	r3, r3
 800c50e:	3b08      	subs	r3, #8
 800c510:	4a28      	ldr	r2, [pc, #160]	@ (800c5b4 <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800c512:	fba2 2303 	umull	r2, r3, r2, r3
 800c516:	091b      	lsrs	r3, r3, #4
 800c518:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800c51a:	68fa      	ldr	r2, [r7, #12]
 800c51c:	4b26      	ldr	r3, [pc, #152]	@ (800c5b8 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800c51e:	4413      	add	r3, r2
 800c520:	009b      	lsls	r3, r3, #2
 800c522:	461a      	mov	r2, r3
 800c524:	687b      	ldr	r3, [r7, #4]
 800c526:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800c528:	687b      	ldr	r3, [r7, #4]
 800c52a:	4a24      	ldr	r2, [pc, #144]	@ (800c5bc <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800c52c:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	f003 031f 	and.w	r3, r3, #31
 800c534:	2201      	movs	r2, #1
 800c536:	409a      	lsls	r2, r3
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800c53c:	e024      	b.n	800c588 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800c53e:	687b      	ldr	r3, [r7, #4]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	b2db      	uxtb	r3, r3
 800c544:	3b10      	subs	r3, #16
 800c546:	4a1e      	ldr	r2, [pc, #120]	@ (800c5c0 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800c548:	fba2 2303 	umull	r2, r3, r2, r3
 800c54c:	091b      	lsrs	r3, r3, #4
 800c54e:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800c550:	68bb      	ldr	r3, [r7, #8]
 800c552:	4a1c      	ldr	r2, [pc, #112]	@ (800c5c4 <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800c554:	4293      	cmp	r3, r2
 800c556:	d806      	bhi.n	800c566 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800c558:	68bb      	ldr	r3, [r7, #8]
 800c55a:	4a1b      	ldr	r2, [pc, #108]	@ (800c5c8 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800c55c:	4293      	cmp	r3, r2
 800c55e:	d902      	bls.n	800c566 <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800c560:	68fb      	ldr	r3, [r7, #12]
 800c562:	3308      	adds	r3, #8
 800c564:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800c566:	68fa      	ldr	r2, [r7, #12]
 800c568:	4b18      	ldr	r3, [pc, #96]	@ (800c5cc <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800c56a:	4413      	add	r3, r2
 800c56c:	009b      	lsls	r3, r3, #2
 800c56e:	461a      	mov	r2, r3
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800c574:	687b      	ldr	r3, [r7, #4]
 800c576:	4a16      	ldr	r2, [pc, #88]	@ (800c5d0 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800c578:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800c57a:	68fb      	ldr	r3, [r7, #12]
 800c57c:	f003 031f 	and.w	r3, r3, #31
 800c580:	2201      	movs	r2, #1
 800c582:	409a      	lsls	r2, r3
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800c588:	bf00      	nop
 800c58a:	3714      	adds	r7, #20
 800c58c:	46bd      	mov	sp, r7
 800c58e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c592:	4770      	bx	lr
 800c594:	58025408 	.word	0x58025408
 800c598:	5802541c 	.word	0x5802541c
 800c59c:	58025430 	.word	0x58025430
 800c5a0:	58025444 	.word	0x58025444
 800c5a4:	58025458 	.word	0x58025458
 800c5a8:	5802546c 	.word	0x5802546c
 800c5ac:	58025480 	.word	0x58025480
 800c5b0:	58025494 	.word	0x58025494
 800c5b4:	cccccccd 	.word	0xcccccccd
 800c5b8:	16009600 	.word	0x16009600
 800c5bc:	58025880 	.word	0x58025880
 800c5c0:	aaaaaaab 	.word	0xaaaaaaab
 800c5c4:	400204b8 	.word	0x400204b8
 800c5c8:	4002040f 	.word	0x4002040f
 800c5cc:	10008200 	.word	0x10008200
 800c5d0:	40020880 	.word	0x40020880

0800c5d4 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800c5d4:	b480      	push	{r7}
 800c5d6:	b085      	sub	sp, #20
 800c5d8:	af00      	add	r7, sp, #0
 800c5da:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800c5dc:	687b      	ldr	r3, [r7, #4]
 800c5de:	685b      	ldr	r3, [r3, #4]
 800c5e0:	b2db      	uxtb	r3, r3
 800c5e2:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800c5e4:	68fb      	ldr	r3, [r7, #12]
 800c5e6:	2b00      	cmp	r3, #0
 800c5e8:	d04a      	beq.n	800c680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800c5ea:	68fb      	ldr	r3, [r7, #12]
 800c5ec:	2b08      	cmp	r3, #8
 800c5ee:	d847      	bhi.n	800c680 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800c5f0:	687b      	ldr	r3, [r7, #4]
 800c5f2:	681b      	ldr	r3, [r3, #0]
 800c5f4:	4a25      	ldr	r2, [pc, #148]	@ (800c68c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800c5f6:	4293      	cmp	r3, r2
 800c5f8:	d022      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	681b      	ldr	r3, [r3, #0]
 800c5fe:	4a24      	ldr	r2, [pc, #144]	@ (800c690 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800c600:	4293      	cmp	r3, r2
 800c602:	d01d      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	4a22      	ldr	r2, [pc, #136]	@ (800c694 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800c60a:	4293      	cmp	r3, r2
 800c60c:	d018      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	681b      	ldr	r3, [r3, #0]
 800c612:	4a21      	ldr	r2, [pc, #132]	@ (800c698 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800c614:	4293      	cmp	r3, r2
 800c616:	d013      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c618:	687b      	ldr	r3, [r7, #4]
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a1f      	ldr	r2, [pc, #124]	@ (800c69c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d00e      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	681b      	ldr	r3, [r3, #0]
 800c626:	4a1e      	ldr	r2, [pc, #120]	@ (800c6a0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800c628:	4293      	cmp	r3, r2
 800c62a:	d009      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c62c:	687b      	ldr	r3, [r7, #4]
 800c62e:	681b      	ldr	r3, [r3, #0]
 800c630:	4a1c      	ldr	r2, [pc, #112]	@ (800c6a4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800c632:	4293      	cmp	r3, r2
 800c634:	d004      	beq.n	800c640 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800c636:	687b      	ldr	r3, [r7, #4]
 800c638:	681b      	ldr	r3, [r3, #0]
 800c63a:	4a1b      	ldr	r2, [pc, #108]	@ (800c6a8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800c63c:	4293      	cmp	r3, r2
 800c63e:	d101      	bne.n	800c644 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800c640:	2301      	movs	r3, #1
 800c642:	e000      	b.n	800c646 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800c644:	2300      	movs	r3, #0
 800c646:	2b00      	cmp	r3, #0
 800c648:	d00a      	beq.n	800c660 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800c64a:	68fa      	ldr	r2, [r7, #12]
 800c64c:	4b17      	ldr	r3, [pc, #92]	@ (800c6ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800c64e:	4413      	add	r3, r2
 800c650:	009b      	lsls	r3, r3, #2
 800c652:	461a      	mov	r2, r3
 800c654:	687b      	ldr	r3, [r7, #4]
 800c656:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800c658:	687b      	ldr	r3, [r7, #4]
 800c65a:	4a15      	ldr	r2, [pc, #84]	@ (800c6b0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800c65c:	671a      	str	r2, [r3, #112]	@ 0x70
 800c65e:	e009      	b.n	800c674 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800c660:	68fa      	ldr	r2, [r7, #12]
 800c662:	4b14      	ldr	r3, [pc, #80]	@ (800c6b4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800c664:	4413      	add	r3, r2
 800c666:	009b      	lsls	r3, r3, #2
 800c668:	461a      	mov	r2, r3
 800c66a:	687b      	ldr	r3, [r7, #4]
 800c66c:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800c66e:	687b      	ldr	r3, [r7, #4]
 800c670:	4a11      	ldr	r2, [pc, #68]	@ (800c6b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800c672:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	3b01      	subs	r3, #1
 800c678:	2201      	movs	r2, #1
 800c67a:	409a      	lsls	r2, r3
 800c67c:	687b      	ldr	r3, [r7, #4]
 800c67e:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800c680:	bf00      	nop
 800c682:	3714      	adds	r7, #20
 800c684:	46bd      	mov	sp, r7
 800c686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c68a:	4770      	bx	lr
 800c68c:	58025408 	.word	0x58025408
 800c690:	5802541c 	.word	0x5802541c
 800c694:	58025430 	.word	0x58025430
 800c698:	58025444 	.word	0x58025444
 800c69c:	58025458 	.word	0x58025458
 800c6a0:	5802546c 	.word	0x5802546c
 800c6a4:	58025480 	.word	0x58025480
 800c6a8:	58025494 	.word	0x58025494
 800c6ac:	1600963f 	.word	0x1600963f
 800c6b0:	58025940 	.word	0x58025940
 800c6b4:	1000823f 	.word	0x1000823f
 800c6b8:	40020940 	.word	0x40020940

0800c6bc <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 800c6bc:	b580      	push	{r7, lr}
 800c6be:	b082      	sub	sp, #8
 800c6c0:	af00      	add	r7, sp, #0
 800c6c2:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	2b00      	cmp	r3, #0
 800c6c8:	d101      	bne.n	800c6ce <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 800c6ca:	2301      	movs	r3, #1
 800c6cc:	e04f      	b.n	800c76e <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 800c6ce:	687b      	ldr	r3, [r7, #4]
 800c6d0:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 800c6d4:	b2db      	uxtb	r3, r3
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d106      	bne.n	800c6e8 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 800c6da:	687b      	ldr	r3, [r7, #4]
 800c6dc:	2200      	movs	r2, #0
 800c6de:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 800c6e2:	6878      	ldr	r0, [r7, #4]
 800c6e4:	f000 f84e 	bl	800c784 <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c6e8:	687b      	ldr	r3, [r7, #4]
 800c6ea:	2202      	movs	r2, #2
 800c6ec:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 800c6f0:	687b      	ldr	r3, [r7, #4]
 800c6f2:	681b      	ldr	r3, [r3, #0]
 800c6f4:	681a      	ldr	r2, [r3, #0]
 800c6f6:	4b20      	ldr	r3, [pc, #128]	@ (800c778 <HAL_DMA2D_Init+0xbc>)
 800c6f8:	4013      	ands	r3, r2
 800c6fa:	687a      	ldr	r2, [r7, #4]
 800c6fc:	6851      	ldr	r1, [r2, #4]
 800c6fe:	687a      	ldr	r2, [r7, #4]
 800c700:	69d2      	ldr	r2, [r2, #28]
 800c702:	4311      	orrs	r1, r2
 800c704:	687a      	ldr	r2, [r7, #4]
 800c706:	6812      	ldr	r2, [r2, #0]
 800c708:	430b      	orrs	r3, r1
 800c70a:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	681b      	ldr	r3, [r3, #0]
 800c710:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c712:	4b1a      	ldr	r3, [pc, #104]	@ (800c77c <HAL_DMA2D_Init+0xc0>)
 800c714:	4013      	ands	r3, r2
 800c716:	687a      	ldr	r2, [r7, #4]
 800c718:	6891      	ldr	r1, [r2, #8]
 800c71a:	687a      	ldr	r2, [r7, #4]
 800c71c:	6992      	ldr	r2, [r2, #24]
 800c71e:	4311      	orrs	r1, r2
 800c720:	687a      	ldr	r2, [r7, #4]
 800c722:	6812      	ldr	r2, [r2, #0]
 800c724:	430b      	orrs	r3, r1
 800c726:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 800c728:	687b      	ldr	r3, [r7, #4]
 800c72a:	681b      	ldr	r3, [r3, #0]
 800c72c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800c72e:	4b14      	ldr	r3, [pc, #80]	@ (800c780 <HAL_DMA2D_Init+0xc4>)
 800c730:	4013      	ands	r3, r2
 800c732:	687a      	ldr	r2, [r7, #4]
 800c734:	68d1      	ldr	r1, [r2, #12]
 800c736:	687a      	ldr	r2, [r7, #4]
 800c738:	6812      	ldr	r2, [r2, #0]
 800c73a:	430b      	orrs	r3, r1
 800c73c:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 800c73e:	687b      	ldr	r3, [r7, #4]
 800c740:	681b      	ldr	r3, [r3, #0]
 800c742:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c744:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800c748:	687b      	ldr	r3, [r7, #4]
 800c74a:	691b      	ldr	r3, [r3, #16]
 800c74c:	051a      	lsls	r2, r3, #20
 800c74e:	687b      	ldr	r3, [r7, #4]
 800c750:	695b      	ldr	r3, [r3, #20]
 800c752:	055b      	lsls	r3, r3, #21
 800c754:	431a      	orrs	r2, r3
 800c756:	687b      	ldr	r3, [r7, #4]
 800c758:	681b      	ldr	r3, [r3, #0]
 800c75a:	430a      	orrs	r2, r1
 800c75c:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 800c75e:	687b      	ldr	r3, [r7, #4]
 800c760:	2200      	movs	r2, #0
 800c762:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 800c764:	687b      	ldr	r3, [r7, #4]
 800c766:	2201      	movs	r2, #1
 800c768:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 800c76c:	2300      	movs	r3, #0
}
 800c76e:	4618      	mov	r0, r3
 800c770:	3708      	adds	r7, #8
 800c772:	46bd      	mov	sp, r7
 800c774:	bd80      	pop	{r7, pc}
 800c776:	bf00      	nop
 800c778:	fff8ffbf 	.word	0xfff8ffbf
 800c77c:	fffffef8 	.word	0xfffffef8
 800c780:	ffff0000 	.word	0xffff0000

0800c784 <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800c784:	b480      	push	{r7}
 800c786:	b083      	sub	sp, #12
 800c788:	af00      	add	r7, sp, #0
 800c78a:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 800c78c:	bf00      	nop
 800c78e:	370c      	adds	r7, #12
 800c790:	46bd      	mov	sp, r7
 800c792:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c796:	4770      	bx	lr

0800c798 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 800c798:	b580      	push	{r7, lr}
 800c79a:	b086      	sub	sp, #24
 800c79c:	af02      	add	r7, sp, #8
 800c79e:	60f8      	str	r0, [r7, #12]
 800c7a0:	60b9      	str	r1, [r7, #8]
 800c7a2:	607a      	str	r2, [r7, #4]
 800c7a4:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c7a6:	68fb      	ldr	r3, [r7, #12]
 800c7a8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c7ac:	2b01      	cmp	r3, #1
 800c7ae:	d101      	bne.n	800c7b4 <HAL_DMA2D_Start+0x1c>
 800c7b0:	2302      	movs	r3, #2
 800c7b2:	e018      	b.n	800c7e6 <HAL_DMA2D_Start+0x4e>
 800c7b4:	68fb      	ldr	r3, [r7, #12]
 800c7b6:	2201      	movs	r2, #1
 800c7b8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c7bc:	68fb      	ldr	r3, [r7, #12]
 800c7be:	2202      	movs	r2, #2
 800c7c0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 800c7c4:	69bb      	ldr	r3, [r7, #24]
 800c7c6:	9300      	str	r3, [sp, #0]
 800c7c8:	683b      	ldr	r3, [r7, #0]
 800c7ca:	687a      	ldr	r2, [r7, #4]
 800c7cc:	68b9      	ldr	r1, [r7, #8]
 800c7ce:	68f8      	ldr	r0, [r7, #12]
 800c7d0:	f000 f9a4 	bl	800cb1c <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 800c7d4:	68fb      	ldr	r3, [r7, #12]
 800c7d6:	681b      	ldr	r3, [r3, #0]
 800c7d8:	681a      	ldr	r2, [r3, #0]
 800c7da:	68fb      	ldr	r3, [r7, #12]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f042 0201 	orr.w	r2, r2, #1
 800c7e2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800c7e4:	2300      	movs	r3, #0
}
 800c7e6:	4618      	mov	r0, r3
 800c7e8:	3710      	adds	r7, #16
 800c7ea:	46bd      	mov	sp, r7
 800c7ec:	bd80      	pop	{r7, pc}

0800c7ee <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 800c7ee:	b580      	push	{r7, lr}
 800c7f0:	b086      	sub	sp, #24
 800c7f2:	af00      	add	r7, sp, #0
 800c7f4:	6078      	str	r0, [r7, #4]
 800c7f6:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 800c7f8:	2300      	movs	r3, #0
 800c7fa:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 800c7fc:	687b      	ldr	r3, [r7, #4]
 800c7fe:	681b      	ldr	r3, [r3, #0]
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	f003 0301 	and.w	r3, r3, #1
 800c806:	2b00      	cmp	r3, #0
 800c808:	d056      	beq.n	800c8b8 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c80a:	f7fc fc4d 	bl	80090a8 <HAL_GetTick>
 800c80e:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c810:	e04b      	b.n	800c8aa <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c812:	687b      	ldr	r3, [r7, #4]
 800c814:	681b      	ldr	r3, [r3, #0]
 800c816:	685b      	ldr	r3, [r3, #4]
 800c818:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800c81a:	68fb      	ldr	r3, [r7, #12]
 800c81c:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 800c820:	2b00      	cmp	r3, #0
 800c822:	d023      	beq.n	800c86c <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c824:	68fb      	ldr	r3, [r7, #12]
 800c826:	f003 0320 	and.w	r3, r3, #32
 800c82a:	2b00      	cmp	r3, #0
 800c82c:	d005      	beq.n	800c83a <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c832:	f043 0202 	orr.w	r2, r3, #2
 800c836:	687b      	ldr	r3, [r7, #4]
 800c838:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c83a:	68fb      	ldr	r3, [r7, #12]
 800c83c:	f003 0301 	and.w	r3, r3, #1
 800c840:	2b00      	cmp	r3, #0
 800c842:	d005      	beq.n	800c850 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c844:	687b      	ldr	r3, [r7, #4]
 800c846:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c848:	f043 0201 	orr.w	r2, r3, #1
 800c84c:	687b      	ldr	r3, [r7, #4]
 800c84e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c850:	687b      	ldr	r3, [r7, #4]
 800c852:	681b      	ldr	r3, [r3, #0]
 800c854:	2221      	movs	r2, #33	@ 0x21
 800c856:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	2204      	movs	r2, #4
 800c85c:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800c860:	687b      	ldr	r3, [r7, #4]
 800c862:	2200      	movs	r2, #0
 800c864:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800c868:	2301      	movs	r3, #1
 800c86a:	e0a5      	b.n	800c9b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c86c:	683b      	ldr	r3, [r7, #0]
 800c86e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c872:	d01a      	beq.n	800c8aa <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c874:	f7fc fc18 	bl	80090a8 <HAL_GetTick>
 800c878:	4602      	mov	r2, r0
 800c87a:	697b      	ldr	r3, [r7, #20]
 800c87c:	1ad3      	subs	r3, r2, r3
 800c87e:	683a      	ldr	r2, [r7, #0]
 800c880:	429a      	cmp	r2, r3
 800c882:	d302      	bcc.n	800c88a <HAL_DMA2D_PollForTransfer+0x9c>
 800c884:	683b      	ldr	r3, [r7, #0]
 800c886:	2b00      	cmp	r3, #0
 800c888:	d10f      	bne.n	800c8aa <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c88e:	f043 0220 	orr.w	r2, r3, #32
 800c892:	687b      	ldr	r3, [r7, #4]
 800c894:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	2203      	movs	r2, #3
 800c89a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800c89e:	687b      	ldr	r3, [r7, #4]
 800c8a0:	2200      	movs	r2, #0
 800c8a2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800c8a6:	2303      	movs	r3, #3
 800c8a8:	e086      	b.n	800c9b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	681b      	ldr	r3, [r3, #0]
 800c8ae:	685b      	ldr	r3, [r3, #4]
 800c8b0:	f003 0302 	and.w	r3, r3, #2
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d0ac      	beq.n	800c812 <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 800c8b8:	687b      	ldr	r3, [r7, #4]
 800c8ba:	681b      	ldr	r3, [r3, #0]
 800c8bc:	69db      	ldr	r3, [r3, #28]
 800c8be:	f003 0320 	and.w	r3, r3, #32
 800c8c2:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 800c8c4:	687b      	ldr	r3, [r7, #4]
 800c8c6:	681b      	ldr	r3, [r3, #0]
 800c8c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c8ca:	f003 0320 	and.w	r3, r3, #32
 800c8ce:	693a      	ldr	r2, [r7, #16]
 800c8d0:	4313      	orrs	r3, r2
 800c8d2:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 800c8d4:	693b      	ldr	r3, [r7, #16]
 800c8d6:	2b00      	cmp	r3, #0
 800c8d8:	d061      	beq.n	800c99e <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 800c8da:	f7fc fbe5 	bl	80090a8 <HAL_GetTick>
 800c8de:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c8e0:	e056      	b.n	800c990 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 800c8e2:	687b      	ldr	r3, [r7, #4]
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	685b      	ldr	r3, [r3, #4]
 800c8e8:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 800c8ea:	68fb      	ldr	r3, [r7, #12]
 800c8ec:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 800c8f0:	2b00      	cmp	r3, #0
 800c8f2:	d02e      	beq.n	800c952 <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 800c8f4:	68fb      	ldr	r3, [r7, #12]
 800c8f6:	f003 0308 	and.w	r3, r3, #8
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d005      	beq.n	800c90a <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 800c8fe:	687b      	ldr	r3, [r7, #4]
 800c900:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c902:	f043 0204 	orr.w	r2, r3, #4
 800c906:	687b      	ldr	r3, [r7, #4]
 800c908:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 800c90a:	68fb      	ldr	r3, [r7, #12]
 800c90c:	f003 0320 	and.w	r3, r3, #32
 800c910:	2b00      	cmp	r3, #0
 800c912:	d005      	beq.n	800c920 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 800c914:	687b      	ldr	r3, [r7, #4]
 800c916:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c918:	f043 0202 	orr.w	r2, r3, #2
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	f003 0301 	and.w	r3, r3, #1
 800c926:	2b00      	cmp	r3, #0
 800c928:	d005      	beq.n	800c936 <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c92e:	f043 0201 	orr.w	r2, r3, #1
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2229      	movs	r2, #41	@ 0x29
 800c93c:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2204      	movs	r2, #4
 800c942:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 800c946:	687b      	ldr	r3, [r7, #4]
 800c948:	2200      	movs	r2, #0
 800c94a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 800c94e:	2301      	movs	r3, #1
 800c950:	e032      	b.n	800c9b8 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800c952:	683b      	ldr	r3, [r7, #0]
 800c954:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c958:	d01a      	beq.n	800c990 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800c95a:	f7fc fba5 	bl	80090a8 <HAL_GetTick>
 800c95e:	4602      	mov	r2, r0
 800c960:	697b      	ldr	r3, [r7, #20]
 800c962:	1ad3      	subs	r3, r2, r3
 800c964:	683a      	ldr	r2, [r7, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d302      	bcc.n	800c970 <HAL_DMA2D_PollForTransfer+0x182>
 800c96a:	683b      	ldr	r3, [r7, #0]
 800c96c:	2b00      	cmp	r3, #0
 800c96e:	d10f      	bne.n	800c990 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800c974:	f043 0220 	orr.w	r2, r3, #32
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2203      	movs	r2, #3
 800c980:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2200      	movs	r2, #0
 800c988:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 800c98c:	2303      	movs	r3, #3
 800c98e:	e013      	b.n	800c9b8 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	681b      	ldr	r3, [r3, #0]
 800c994:	685b      	ldr	r3, [r3, #4]
 800c996:	f003 0310 	and.w	r3, r3, #16
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d0a1      	beq.n	800c8e2 <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	2212      	movs	r2, #18
 800c9a4:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2201      	movs	r2, #1
 800c9aa:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	2200      	movs	r2, #0
 800c9b2:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800c9b6:	2300      	movs	r3, #0
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3718      	adds	r7, #24
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}

0800c9c0 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 800c9c0:	b480      	push	{r7}
 800c9c2:	b087      	sub	sp, #28
 800c9c4:	af00      	add	r7, sp, #0
 800c9c6:	6078      	str	r0, [r7, #4]
 800c9c8:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	685b      	ldr	r3, [r3, #4]
 800c9ce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 800c9d2:	683b      	ldr	r3, [r7, #0]
 800c9d4:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 800c9d6:	687b      	ldr	r3, [r7, #4]
 800c9d8:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 800c9dc:	2b01      	cmp	r3, #1
 800c9de:	d101      	bne.n	800c9e4 <HAL_DMA2D_ConfigLayer+0x24>
 800c9e0:	2302      	movs	r3, #2
 800c9e2:	e092      	b.n	800cb0a <HAL_DMA2D_ConfigLayer+0x14a>
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2201      	movs	r2, #1
 800c9e8:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 800c9ec:	687b      	ldr	r3, [r7, #4]
 800c9ee:	2202      	movs	r2, #2
 800c9f0:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 800c9f4:	683a      	ldr	r2, [r7, #0]
 800c9f6:	4613      	mov	r3, r2
 800c9f8:	00db      	lsls	r3, r3, #3
 800c9fa:	1a9b      	subs	r3, r3, r2
 800c9fc:	009b      	lsls	r3, r3, #2
 800c9fe:	3328      	adds	r3, #40	@ 0x28
 800ca00:	687a      	ldr	r2, [r7, #4]
 800ca02:	4413      	add	r3, r2
 800ca04:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ca06:	68fb      	ldr	r3, [r7, #12]
 800ca08:	685a      	ldr	r2, [r3, #4]
 800ca0a:	68fb      	ldr	r3, [r7, #12]
 800ca0c:	689b      	ldr	r3, [r3, #8]
 800ca0e:	041b      	lsls	r3, r3, #16
 800ca10:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ca12:	68fb      	ldr	r3, [r7, #12]
 800ca14:	691b      	ldr	r3, [r3, #16]
 800ca16:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ca18:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 800ca1a:	68fb      	ldr	r3, [r7, #12]
 800ca1c:	695b      	ldr	r3, [r3, #20]
 800ca1e:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 800ca20:	4313      	orrs	r3, r2
 800ca22:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 800ca24:	4b3c      	ldr	r3, [pc, #240]	@ (800cb18 <HAL_DMA2D_ConfigLayer+0x158>)
 800ca26:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ca28:	68fb      	ldr	r3, [r7, #12]
 800ca2a:	685b      	ldr	r3, [r3, #4]
 800ca2c:	2b0a      	cmp	r3, #10
 800ca2e:	d003      	beq.n	800ca38 <HAL_DMA2D_ConfigLayer+0x78>
 800ca30:	68fb      	ldr	r3, [r7, #12]
 800ca32:	685b      	ldr	r3, [r3, #4]
 800ca34:	2b09      	cmp	r3, #9
 800ca36:	d107      	bne.n	800ca48 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 800ca38:	68fb      	ldr	r3, [r7, #12]
 800ca3a:	68db      	ldr	r3, [r3, #12]
 800ca3c:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800ca40:	693a      	ldr	r2, [r7, #16]
 800ca42:	4313      	orrs	r3, r2
 800ca44:	613b      	str	r3, [r7, #16]
 800ca46:	e005      	b.n	800ca54 <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 800ca48:	68fb      	ldr	r3, [r7, #12]
 800ca4a:	68db      	ldr	r3, [r3, #12]
 800ca4c:	061b      	lsls	r3, r3, #24
 800ca4e:	693a      	ldr	r2, [r7, #16]
 800ca50:	4313      	orrs	r3, r2
 800ca52:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 800ca54:	683b      	ldr	r3, [r7, #0]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d120      	bne.n	800ca9c <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	681b      	ldr	r3, [r3, #0]
 800ca5e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800ca60:	697b      	ldr	r3, [r7, #20]
 800ca62:	43db      	mvns	r3, r3
 800ca64:	ea02 0103 	and.w	r1, r2, r3
 800ca68:	687b      	ldr	r3, [r7, #4]
 800ca6a:	681b      	ldr	r3, [r3, #0]
 800ca6c:	693a      	ldr	r2, [r7, #16]
 800ca6e:	430a      	orrs	r2, r1
 800ca70:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 800ca72:	687b      	ldr	r3, [r7, #4]
 800ca74:	681b      	ldr	r3, [r3, #0]
 800ca76:	68fa      	ldr	r2, [r7, #12]
 800ca78:	6812      	ldr	r2, [r2, #0]
 800ca7a:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800ca7c:	68fb      	ldr	r3, [r7, #12]
 800ca7e:	685b      	ldr	r3, [r3, #4]
 800ca80:	2b0a      	cmp	r3, #10
 800ca82:	d003      	beq.n	800ca8c <HAL_DMA2D_ConfigLayer+0xcc>
 800ca84:	68fb      	ldr	r3, [r7, #12]
 800ca86:	685b      	ldr	r3, [r3, #4]
 800ca88:	2b09      	cmp	r3, #9
 800ca8a:	d135      	bne.n	800caf8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 800ca8c:	68fb      	ldr	r3, [r7, #12]
 800ca8e:	68da      	ldr	r2, [r3, #12]
 800ca90:	687b      	ldr	r3, [r7, #4]
 800ca92:	681b      	ldr	r3, [r3, #0]
 800ca94:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800ca98:	629a      	str	r2, [r3, #40]	@ 0x28
 800ca9a:	e02d      	b.n	800caf8 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 800ca9c:	68fb      	ldr	r3, [r7, #12]
 800ca9e:	685b      	ldr	r3, [r3, #4]
 800caa0:	2b0b      	cmp	r3, #11
 800caa2:	d109      	bne.n	800cab8 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 800caa4:	68fb      	ldr	r3, [r7, #12]
 800caa6:	699b      	ldr	r3, [r3, #24]
 800caa8:	049b      	lsls	r3, r3, #18
 800caaa:	693a      	ldr	r2, [r7, #16]
 800caac:	4313      	orrs	r3, r2
 800caae:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 800cab0:	697b      	ldr	r3, [r7, #20]
 800cab2:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 800cab6:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 800cab8:	687b      	ldr	r3, [r7, #4]
 800caba:	681b      	ldr	r3, [r3, #0]
 800cabc:	69da      	ldr	r2, [r3, #28]
 800cabe:	697b      	ldr	r3, [r7, #20]
 800cac0:	43db      	mvns	r3, r3
 800cac2:	ea02 0103 	and.w	r1, r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	693a      	ldr	r2, [r7, #16]
 800cacc:	430a      	orrs	r2, r1
 800cace:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 800cad0:	687b      	ldr	r3, [r7, #4]
 800cad2:	681b      	ldr	r3, [r3, #0]
 800cad4:	68fa      	ldr	r2, [r7, #12]
 800cad6:	6812      	ldr	r2, [r2, #0]
 800cad8:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 800cada:	68fb      	ldr	r3, [r7, #12]
 800cadc:	685b      	ldr	r3, [r3, #4]
 800cade:	2b0a      	cmp	r3, #10
 800cae0:	d003      	beq.n	800caea <HAL_DMA2D_ConfigLayer+0x12a>
 800cae2:	68fb      	ldr	r3, [r7, #12]
 800cae4:	685b      	ldr	r3, [r3, #4]
 800cae6:	2b09      	cmp	r3, #9
 800cae8:	d106      	bne.n	800caf8 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 800caea:	68fb      	ldr	r3, [r7, #12]
 800caec:	68da      	ldr	r2, [r3, #12]
 800caee:	687b      	ldr	r3, [r7, #4]
 800caf0:	681b      	ldr	r3, [r3, #0]
 800caf2:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 800caf6:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	2201      	movs	r2, #1
 800cafc:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 800cb00:	687b      	ldr	r3, [r7, #4]
 800cb02:	2200      	movs	r2, #0
 800cb04:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 800cb08:	2300      	movs	r3, #0
}
 800cb0a:	4618      	mov	r0, r3
 800cb0c:	371c      	adds	r7, #28
 800cb0e:	46bd      	mov	sp, r7
 800cb10:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb14:	4770      	bx	lr
 800cb16:	bf00      	nop
 800cb18:	ff33000f 	.word	0xff33000f

0800cb1c <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 800cb1c:	b480      	push	{r7}
 800cb1e:	b08b      	sub	sp, #44	@ 0x2c
 800cb20:	af00      	add	r7, sp, #0
 800cb22:	60f8      	str	r0, [r7, #12]
 800cb24:	60b9      	str	r1, [r7, #8]
 800cb26:	607a      	str	r2, [r7, #4]
 800cb28:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 800cb2a:	68fb      	ldr	r3, [r7, #12]
 800cb2c:	681b      	ldr	r3, [r3, #0]
 800cb2e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb30:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 800cb34:	683b      	ldr	r3, [r7, #0]
 800cb36:	041a      	lsls	r2, r3, #16
 800cb38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800cb3a:	431a      	orrs	r2, r3
 800cb3c:	68fb      	ldr	r3, [r7, #12]
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	430a      	orrs	r2, r1
 800cb42:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 800cb44:	68fb      	ldr	r3, [r7, #12]
 800cb46:	681b      	ldr	r3, [r3, #0]
 800cb48:	687a      	ldr	r2, [r7, #4]
 800cb4a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 800cb4c:	68fb      	ldr	r3, [r7, #12]
 800cb4e:	685b      	ldr	r3, [r3, #4]
 800cb50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800cb54:	d174      	bne.n	800cc40 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 800cb56:	68bb      	ldr	r3, [r7, #8]
 800cb58:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 800cb5c:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 800cb5e:	68bb      	ldr	r3, [r7, #8]
 800cb60:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 800cb64:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 800cb66:	68bb      	ldr	r3, [r7, #8]
 800cb68:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 800cb6c:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 800cb6e:	68bb      	ldr	r3, [r7, #8]
 800cb70:	b2db      	uxtb	r3, r3
 800cb72:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 800cb74:	68fb      	ldr	r3, [r7, #12]
 800cb76:	689b      	ldr	r3, [r3, #8]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	d108      	bne.n	800cb8e <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 800cb7c:	69ba      	ldr	r2, [r7, #24]
 800cb7e:	69fb      	ldr	r3, [r7, #28]
 800cb80:	431a      	orrs	r2, r3
 800cb82:	6a3b      	ldr	r3, [r7, #32]
 800cb84:	4313      	orrs	r3, r2
 800cb86:	697a      	ldr	r2, [r7, #20]
 800cb88:	4313      	orrs	r3, r2
 800cb8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800cb8c:	e053      	b.n	800cc36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 800cb8e:	68fb      	ldr	r3, [r7, #12]
 800cb90:	689b      	ldr	r3, [r3, #8]
 800cb92:	2b01      	cmp	r3, #1
 800cb94:	d106      	bne.n	800cba4 <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 800cb96:	69ba      	ldr	r2, [r7, #24]
 800cb98:	69fb      	ldr	r3, [r7, #28]
 800cb9a:	4313      	orrs	r3, r2
 800cb9c:	697a      	ldr	r2, [r7, #20]
 800cb9e:	4313      	orrs	r3, r2
 800cba0:	627b      	str	r3, [r7, #36]	@ 0x24
 800cba2:	e048      	b.n	800cc36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 800cba4:	68fb      	ldr	r3, [r7, #12]
 800cba6:	689b      	ldr	r3, [r3, #8]
 800cba8:	2b02      	cmp	r3, #2
 800cbaa:	d111      	bne.n	800cbd0 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 800cbac:	69fb      	ldr	r3, [r7, #28]
 800cbae:	0cdb      	lsrs	r3, r3, #19
 800cbb0:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 800cbb2:	69bb      	ldr	r3, [r7, #24]
 800cbb4:	0a9b      	lsrs	r3, r3, #10
 800cbb6:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800cbb8:	697b      	ldr	r3, [r7, #20]
 800cbba:	08db      	lsrs	r3, r3, #3
 800cbbc:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 800cbbe:	69bb      	ldr	r3, [r7, #24]
 800cbc0:	015a      	lsls	r2, r3, #5
 800cbc2:	69fb      	ldr	r3, [r7, #28]
 800cbc4:	02db      	lsls	r3, r3, #11
 800cbc6:	4313      	orrs	r3, r2
 800cbc8:	697a      	ldr	r2, [r7, #20]
 800cbca:	4313      	orrs	r3, r2
 800cbcc:	627b      	str	r3, [r7, #36]	@ 0x24
 800cbce:	e032      	b.n	800cc36 <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 800cbd0:	68fb      	ldr	r3, [r7, #12]
 800cbd2:	689b      	ldr	r3, [r3, #8]
 800cbd4:	2b03      	cmp	r3, #3
 800cbd6:	d117      	bne.n	800cc08 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 800cbd8:	6a3b      	ldr	r3, [r7, #32]
 800cbda:	0fdb      	lsrs	r3, r3, #31
 800cbdc:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 800cbde:	69fb      	ldr	r3, [r7, #28]
 800cbe0:	0cdb      	lsrs	r3, r3, #19
 800cbe2:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 800cbe4:	69bb      	ldr	r3, [r7, #24]
 800cbe6:	0adb      	lsrs	r3, r3, #11
 800cbe8:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 800cbea:	697b      	ldr	r3, [r7, #20]
 800cbec:	08db      	lsrs	r3, r3, #3
 800cbee:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 800cbf0:	69bb      	ldr	r3, [r7, #24]
 800cbf2:	015a      	lsls	r2, r3, #5
 800cbf4:	69fb      	ldr	r3, [r7, #28]
 800cbf6:	029b      	lsls	r3, r3, #10
 800cbf8:	431a      	orrs	r2, r3
 800cbfa:	6a3b      	ldr	r3, [r7, #32]
 800cbfc:	03db      	lsls	r3, r3, #15
 800cbfe:	4313      	orrs	r3, r2
 800cc00:	697a      	ldr	r2, [r7, #20]
 800cc02:	4313      	orrs	r3, r2
 800cc04:	627b      	str	r3, [r7, #36]	@ 0x24
 800cc06:	e016      	b.n	800cc36 <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 800cc08:	6a3b      	ldr	r3, [r7, #32]
 800cc0a:	0f1b      	lsrs	r3, r3, #28
 800cc0c:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 800cc0e:	69fb      	ldr	r3, [r7, #28]
 800cc10:	0d1b      	lsrs	r3, r3, #20
 800cc12:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 800cc14:	69bb      	ldr	r3, [r7, #24]
 800cc16:	0b1b      	lsrs	r3, r3, #12
 800cc18:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 800cc1a:	697b      	ldr	r3, [r7, #20]
 800cc1c:	091b      	lsrs	r3, r3, #4
 800cc1e:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 800cc20:	69bb      	ldr	r3, [r7, #24]
 800cc22:	011a      	lsls	r2, r3, #4
 800cc24:	69fb      	ldr	r3, [r7, #28]
 800cc26:	021b      	lsls	r3, r3, #8
 800cc28:	431a      	orrs	r2, r3
 800cc2a:	6a3b      	ldr	r3, [r7, #32]
 800cc2c:	031b      	lsls	r3, r3, #12
 800cc2e:	4313      	orrs	r3, r2
 800cc30:	697a      	ldr	r2, [r7, #20]
 800cc32:	4313      	orrs	r3, r2
 800cc34:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 800cc36:	68fb      	ldr	r3, [r7, #12]
 800cc38:	681b      	ldr	r3, [r3, #0]
 800cc3a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800cc3c:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 800cc3e:	e00d      	b.n	800cc5c <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 800cc40:	68fb      	ldr	r3, [r7, #12]
 800cc42:	685b      	ldr	r3, [r3, #4]
 800cc44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800cc48:	d104      	bne.n	800cc54 <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 800cc4a:	68fb      	ldr	r3, [r7, #12]
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	68ba      	ldr	r2, [r7, #8]
 800cc50:	615a      	str	r2, [r3, #20]
}
 800cc52:	e003      	b.n	800cc5c <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 800cc54:	68fb      	ldr	r3, [r7, #12]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	68ba      	ldr	r2, [r7, #8]
 800cc5a:	60da      	str	r2, [r3, #12]
}
 800cc5c:	bf00      	nop
 800cc5e:	372c      	adds	r7, #44	@ 0x2c
 800cc60:	46bd      	mov	sp, r7
 800cc62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc66:	4770      	bx	lr

0800cc68 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 800cc68:	b480      	push	{r7}
 800cc6a:	b085      	sub	sp, #20
 800cc6c:	af00      	add	r7, sp, #0
 800cc6e:	60f8      	str	r0, [r7, #12]
 800cc70:	60b9      	str	r1, [r7, #8]
 800cc72:	607a      	str	r2, [r7, #4]
 800cc74:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 800cc76:	68bb      	ldr	r3, [r7, #8]
 800cc78:	019a      	lsls	r2, r3, #6
 800cc7a:	687b      	ldr	r3, [r7, #4]
 800cc7c:	431a      	orrs	r2, r3
 800cc7e:	683b      	ldr	r3, [r7, #0]
 800cc80:	021b      	lsls	r3, r3, #8
 800cc82:	431a      	orrs	r2, r3
 800cc84:	69bb      	ldr	r3, [r7, #24]
 800cc86:	041b      	lsls	r3, r3, #16
 800cc88:	431a      	orrs	r2, r3
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 800cc8e:	bf00      	nop
 800cc90:	3714      	adds	r7, #20
 800cc92:	46bd      	mov	sp, r7
 800cc94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc98:	4770      	bx	lr

0800cc9a <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 800cc9a:	b580      	push	{r7, lr}
 800cc9c:	b086      	sub	sp, #24
 800cc9e:	af00      	add	r7, sp, #0
 800cca0:	60f8      	str	r0, [r7, #12]
 800cca2:	60b9      	str	r1, [r7, #8]
 800cca4:	607a      	str	r2, [r7, #4]
 800cca6:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800cca8:	f7fc f9fe 	bl	80090a8 <HAL_GetTick>
 800ccac:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ccae:	e009      	b.n	800ccc4 <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ccb0:	f7fc f9fa 	bl	80090a8 <HAL_GetTick>
 800ccb4:	4602      	mov	r2, r0
 800ccb6:	697b      	ldr	r3, [r7, #20]
 800ccb8:	1ad3      	subs	r3, r2, r3
 800ccba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800ccbe:	d901      	bls.n	800ccc4 <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 800ccc0:	2303      	movs	r3, #3
 800ccc2:	e015      	b.n	800ccf0 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800ccc4:	68fb      	ldr	r3, [r7, #12]
 800ccc6:	681b      	ldr	r3, [r3, #0]
 800ccc8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800ccca:	f003 0301 	and.w	r3, r3, #1
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	d0ee      	beq.n	800ccb0 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 800ccd2:	68bb      	ldr	r3, [r7, #8]
 800ccd4:	019a      	lsls	r2, r3, #6
 800ccd6:	687b      	ldr	r3, [r7, #4]
 800ccd8:	431a      	orrs	r2, r3
 800ccda:	683b      	ldr	r3, [r7, #0]
 800ccdc:	021b      	lsls	r3, r3, #8
 800ccde:	ea42 0103 	orr.w	r1, r2, r3
 800cce2:	6a3b      	ldr	r3, [r7, #32]
 800cce4:	041a      	lsls	r2, r3, #16
 800cce6:	68fb      	ldr	r3, [r7, #12]
 800cce8:	681b      	ldr	r3, [r3, #0]
 800ccea:	430a      	orrs	r2, r1
 800ccec:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 800ccee:	2300      	movs	r3, #0
}
 800ccf0:	4618      	mov	r0, r3
 800ccf2:	3718      	adds	r7, #24
 800ccf4:	46bd      	mov	sp, r7
 800ccf6:	bd80      	pop	{r7, pc}

0800ccf8 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 800ccf8:	b580      	push	{r7, lr}
 800ccfa:	b08a      	sub	sp, #40	@ 0x28
 800ccfc:	af00      	add	r7, sp, #0
 800ccfe:	6078      	str	r0, [r7, #4]
 800cd00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 800cd02:	687b      	ldr	r3, [r7, #4]
 800cd04:	2b00      	cmp	r3, #0
 800cd06:	d101      	bne.n	800cd0c <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 800cd08:	2301      	movs	r3, #1
 800cd0a:	e16c      	b.n	800cfe6 <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	7c5b      	ldrb	r3, [r3, #17]
 800cd10:	b2db      	uxtb	r3, r3
 800cd12:	2b00      	cmp	r3, #0
 800cd14:	d102      	bne.n	800cd1c <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 800cd16:	6878      	ldr	r0, [r7, #4]
 800cd18:	f000 f96e 	bl	800cff8 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	2203      	movs	r2, #3
 800cd20:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 800cd22:	2300      	movs	r3, #0
 800cd24:	61bb      	str	r3, [r7, #24]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	681b      	ldr	r3, [r3, #0]
 800cd2a:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 800cd36:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800cd3a:	687b      	ldr	r3, [r7, #4]
 800cd3c:	681b      	ldr	r3, [r3, #0]
 800cd3e:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800cd42:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800cd46:	61bb      	str	r3, [r7, #24]
 800cd48:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 800cd4a:	f7fc f9ad 	bl	80090a8 <HAL_GetTick>
 800cd4e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cd50:	e009      	b.n	800cd66 <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cd52:	f7fc f9a9 	bl	80090a8 <HAL_GetTick>
 800cd56:	4602      	mov	r2, r0
 800cd58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cd5a:	1ad3      	subs	r3, r2, r3
 800cd5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cd60:	d901      	bls.n	800cd66 <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 800cd62:	2303      	movs	r3, #3
 800cd64:	e13f      	b.n	800cfe6 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 800cd66:	687b      	ldr	r3, [r7, #4]
 800cd68:	681b      	ldr	r3, [r3, #0]
 800cd6a:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800cd6e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800cd72:	2b00      	cmp	r3, #0
 800cd74:	d0ed      	beq.n	800cd52 <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 800cd76:	687b      	ldr	r3, [r7, #4]
 800cd78:	681b      	ldr	r3, [r3, #0]
 800cd7a:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800cd7e:	687b      	ldr	r3, [r7, #4]
 800cd80:	681a      	ldr	r2, [r3, #0]
 800cd82:	4b9b      	ldr	r3, [pc, #620]	@ (800cff0 <HAL_DSI_Init+0x2f8>)
 800cd84:	400b      	ands	r3, r1
 800cd86:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800cd8a:	687b      	ldr	r3, [r7, #4]
 800cd8c:	681b      	ldr	r3, [r3, #0]
 800cd8e:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 800cd92:	683b      	ldr	r3, [r7, #0]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800cd98:	683b      	ldr	r3, [r7, #0]
 800cd9a:	685b      	ldr	r3, [r3, #4]
 800cd9c:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800cd9e:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 800cda0:	683b      	ldr	r3, [r7, #0]
 800cda2:	689b      	ldr	r3, [r3, #8]
 800cda4:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 800cda6:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 800cda8:	687b      	ldr	r3, [r7, #4]
 800cdaa:	681b      	ldr	r3, [r3, #0]
 800cdac:	430a      	orrs	r2, r1
 800cdae:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 800cdb2:	2300      	movs	r3, #0
 800cdb4:	617b      	str	r3, [r7, #20]
 800cdb6:	687b      	ldr	r3, [r7, #4]
 800cdb8:	681b      	ldr	r3, [r3, #0]
 800cdba:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 800cdbe:	687b      	ldr	r3, [r7, #4]
 800cdc0:	681b      	ldr	r3, [r3, #0]
 800cdc2:	f042 0201 	orr.w	r2, r2, #1
 800cdc6:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 800cdca:	687b      	ldr	r3, [r7, #4]
 800cdcc:	681b      	ldr	r3, [r3, #0]
 800cdce:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 800cdd2:	f003 0301 	and.w	r3, r3, #1
 800cdd6:	617b      	str	r3, [r7, #20]
 800cdd8:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 800cdda:	2001      	movs	r0, #1
 800cddc:	f7fc f970 	bl	80090c0 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 800cde0:	f7fc f962 	bl	80090a8 <HAL_GetTick>
 800cde4:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cde6:	e009      	b.n	800cdfc <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cde8:	f7fc f95e 	bl	80090a8 <HAL_GetTick>
 800cdec:	4602      	mov	r2, r0
 800cdee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cdf0:	1ad3      	subs	r3, r2, r3
 800cdf2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cdf6:	d901      	bls.n	800cdfc <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 800cdf8:	2303      	movs	r3, #3
 800cdfa:	e0f4      	b.n	800cfe6 <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 800cdfc:	687b      	ldr	r3, [r7, #4]
 800cdfe:	681b      	ldr	r3, [r3, #0]
 800ce00:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 800ce04:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ce08:	2b00      	cmp	r3, #0
 800ce0a:	d0ed      	beq.n	800cde8 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 800ce0c:	2300      	movs	r3, #0
 800ce0e:	613b      	str	r3, [r7, #16]
 800ce10:	687b      	ldr	r3, [r7, #4]
 800ce12:	681b      	ldr	r3, [r3, #0]
 800ce14:	685a      	ldr	r2, [r3, #4]
 800ce16:	687b      	ldr	r3, [r7, #4]
 800ce18:	681b      	ldr	r3, [r3, #0]
 800ce1a:	f042 0201 	orr.w	r2, r2, #1
 800ce1e:	605a      	str	r2, [r3, #4]
 800ce20:	687b      	ldr	r3, [r7, #4]
 800ce22:	681b      	ldr	r3, [r3, #0]
 800ce24:	685b      	ldr	r3, [r3, #4]
 800ce26:	f003 0301 	and.w	r3, r3, #1
 800ce2a:	613b      	str	r3, [r7, #16]
 800ce2c:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 800ce2e:	687b      	ldr	r3, [r7, #4]
 800ce30:	681b      	ldr	r3, [r3, #0]
 800ce32:	689a      	ldr	r2, [r3, #8]
 800ce34:	687b      	ldr	r3, [r7, #4]
 800ce36:	681b      	ldr	r3, [r3, #0]
 800ce38:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800ce3c:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	681b      	ldr	r3, [r3, #0]
 800ce42:	6899      	ldr	r1, [r3, #8]
 800ce44:	687b      	ldr	r3, [r7, #4]
 800ce46:	689a      	ldr	r2, [r3, #8]
 800ce48:	687b      	ldr	r3, [r7, #4]
 800ce4a:	681b      	ldr	r3, [r3, #0]
 800ce4c:	430a      	orrs	r2, r1
 800ce4e:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	681b      	ldr	r3, [r3, #0]
 800ce54:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	681b      	ldr	r3, [r3, #0]
 800ce5c:	f042 0202 	orr.w	r2, r2, #2
 800ce60:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	681b      	ldr	r3, [r3, #0]
 800ce68:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 800ce6c:	687b      	ldr	r3, [r7, #4]
 800ce6e:	681b      	ldr	r3, [r3, #0]
 800ce70:	f042 0204 	orr.w	r2, r2, #4
 800ce74:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 800ce78:	687b      	ldr	r3, [r7, #4]
 800ce7a:	681b      	ldr	r3, [r3, #0]
 800ce7c:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 800ce80:	687b      	ldr	r3, [r7, #4]
 800ce82:	681b      	ldr	r3, [r3, #0]
 800ce84:	f022 0203 	bic.w	r2, r2, #3
 800ce88:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 800ce94:	687b      	ldr	r3, [r7, #4]
 800ce96:	68da      	ldr	r2, [r3, #12]
 800ce98:	687b      	ldr	r3, [r7, #4]
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	430a      	orrs	r2, r1
 800ce9e:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 800cea2:	f7fc f901 	bl	80090a8 <HAL_GetTick>
 800cea6:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	681b      	ldr	r3, [r3, #0]
 800ceac:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800ceb0:	f003 0303 	and.w	r3, r3, #3
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d123      	bne.n	800cf00 <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800ceb8:	e00c      	b.n	800ced4 <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800ceba:	f7fc f8f5 	bl	80090a8 <HAL_GetTick>
 800cebe:	4602      	mov	r2, r0
 800cec0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cec2:	1ad3      	subs	r3, r2, r3
 800cec4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cec8:	d904      	bls.n	800ced4 <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800ceca:	687b      	ldr	r3, [r7, #4]
 800cecc:	2200      	movs	r2, #0
 800cece:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800ced0:	2303      	movs	r3, #3
 800ced2:	e088      	b.n	800cfe6 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 800ced4:	687b      	ldr	r3, [r7, #4]
 800ced6:	681b      	ldr	r3, [r3, #0]
 800ced8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cedc:	f003 0314 	and.w	r3, r3, #20
 800cee0:	2b14      	cmp	r3, #20
 800cee2:	d1ea      	bne.n	800ceba <HAL_DSI_Init+0x1c2>
 800cee4:	e014      	b.n	800cf10 <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800cee6:	f7fc f8df 	bl	80090a8 <HAL_GetTick>
 800ceea:	4602      	mov	r2, r0
 800ceec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ceee:	1ad3      	subs	r3, r2, r3
 800cef0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800cef4:	d904      	bls.n	800cf00 <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800cef6:	687b      	ldr	r3, [r7, #4]
 800cef8:	2200      	movs	r2, #0
 800cefa:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 800cefc:	2303      	movs	r3, #3
 800cefe:	e072      	b.n	800cfe6 <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 800cf00:	687b      	ldr	r3, [r7, #4]
 800cf02:	681b      	ldr	r3, [r3, #0]
 800cf04:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf08:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 800cf0c:	2b94      	cmp	r3, #148	@ 0x94
 800cf0e:	d1ea      	bne.n	800cee6 <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 800cf10:	683b      	ldr	r3, [r7, #0]
 800cf12:	685b      	ldr	r3, [r3, #4]
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	d002      	beq.n	800cf1e <HAL_DSI_Init+0x226>
 800cf18:	683b      	ldr	r3, [r7, #0]
 800cf1a:	685b      	ldr	r3, [r3, #4]
 800cf1c:	e000      	b.n	800cf20 <HAL_DSI_Init+0x228>
 800cf1e:	2301      	movs	r3, #1
 800cf20:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 800cf22:	6a3b      	ldr	r3, [r7, #32]
 800cf24:	4a33      	ldr	r2, [pc, #204]	@ (800cff4 <HAL_DSI_Init+0x2fc>)
 800cf26:	fb03 f202 	mul.w	r2, r3, r2
 800cf2a:	683b      	ldr	r3, [r7, #0]
 800cf2c:	689b      	ldr	r3, [r3, #8]
 800cf2e:	f003 0303 	and.w	r3, r3, #3
 800cf32:	409a      	lsls	r2, r3
 800cf34:	683b      	ldr	r3, [r7, #0]
 800cf36:	681b      	ldr	r3, [r3, #0]
 800cf38:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 800cf3c:	fb01 f303 	mul.w	r3, r1, r3
 800cf40:	fbb2 f3f3 	udiv	r3, r2, r3
 800cf44:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 800cf46:	687b      	ldr	r3, [r7, #4]
 800cf48:	681b      	ldr	r3, [r3, #0]
 800cf4a:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 800cf4e:	687b      	ldr	r3, [r7, #4]
 800cf50:	681b      	ldr	r3, [r3, #0]
 800cf52:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 800cf56:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 800cf5a:	687b      	ldr	r3, [r7, #4]
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 800cf62:	687b      	ldr	r3, [r7, #4]
 800cf64:	681b      	ldr	r3, [r3, #0]
 800cf66:	69fa      	ldr	r2, [r7, #28]
 800cf68:	430a      	orrs	r2, r1
 800cf6a:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	681b      	ldr	r3, [r3, #0]
 800cf72:	2200      	movs	r2, #0
 800cf74:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 800cf78:	687b      	ldr	r3, [r7, #4]
 800cf7a:	681b      	ldr	r3, [r3, #0]
 800cf7c:	2200      	movs	r2, #0
 800cf7e:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 800cf82:	687b      	ldr	r3, [r7, #4]
 800cf84:	2200      	movs	r2, #0
 800cf86:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 800cf88:	2300      	movs	r3, #0
 800cf8a:	60fb      	str	r3, [r7, #12]
 800cf8c:	687b      	ldr	r3, [r7, #4]
 800cf8e:	681b      	ldr	r3, [r3, #0]
 800cf90:	685a      	ldr	r2, [r3, #4]
 800cf92:	687b      	ldr	r3, [r7, #4]
 800cf94:	681b      	ldr	r3, [r3, #0]
 800cf96:	f022 0201 	bic.w	r2, r2, #1
 800cf9a:	605a      	str	r2, [r3, #4]
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	681b      	ldr	r3, [r3, #0]
 800cfa0:	685b      	ldr	r3, [r3, #4]
 800cfa2:	f003 0301 	and.w	r3, r3, #1
 800cfa6:	60fb      	str	r3, [r7, #12]
 800cfa8:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 800cfaa:	687b      	ldr	r3, [r7, #4]
 800cfac:	681b      	ldr	r3, [r3, #0]
 800cfae:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800cfb2:	687b      	ldr	r3, [r7, #4]
 800cfb4:	681b      	ldr	r3, [r3, #0]
 800cfb6:	f022 0203 	bic.w	r2, r2, #3
 800cfba:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 800cfbe:	687b      	ldr	r3, [r7, #4]
 800cfc0:	681b      	ldr	r3, [r3, #0]
 800cfc2:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	685b      	ldr	r3, [r3, #4]
 800cfca:	431a      	orrs	r2, r3
 800cfcc:	687b      	ldr	r3, [r7, #4]
 800cfce:	681b      	ldr	r3, [r3, #0]
 800cfd0:	f042 0201 	orr.w	r2, r2, #1
 800cfd4:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 800cfd8:	687b      	ldr	r3, [r7, #4]
 800cfda:	2200      	movs	r2, #0
 800cfdc:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 800cfde:	687b      	ldr	r3, [r7, #4]
 800cfe0:	2201      	movs	r2, #1
 800cfe2:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 800cfe4:	2300      	movs	r3, #0
}
 800cfe6:	4618      	mov	r0, r3
 800cfe8:	3728      	adds	r7, #40	@ 0x28
 800cfea:	46bd      	mov	sp, r7
 800cfec:	bd80      	pop	{r7, pc}
 800cfee:	bf00      	nop
 800cff0:	fffc8603 	.word	0xfffc8603
 800cff4:	003d0900 	.word	0x003d0900

0800cff8 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800cff8:	b480      	push	{r7}
 800cffa:	b083      	sub	sp, #12
 800cffc:	af00      	add	r7, sp, #0
 800cffe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 800d000:	bf00      	nop
 800d002:	370c      	adds	r7, #12
 800d004:	46bd      	mov	sp, r7
 800d006:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d00a:	4770      	bx	lr

0800d00c <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 800d00c:	b480      	push	{r7}
 800d00e:	b083      	sub	sp, #12
 800d010:	af00      	add	r7, sp, #0
 800d012:	6078      	str	r0, [r7, #4]
 800d014:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d016:	687b      	ldr	r3, [r7, #4]
 800d018:	7c1b      	ldrb	r3, [r3, #16]
 800d01a:	2b01      	cmp	r3, #1
 800d01c:	d101      	bne.n	800d022 <HAL_DSI_ConfigVideoMode+0x16>
 800d01e:	2302      	movs	r3, #2
 800d020:	e1ee      	b.n	800d400 <HAL_DSI_ConfigVideoMode+0x3f4>
 800d022:	687b      	ldr	r3, [r7, #4]
 800d024:	2201      	movs	r2, #1
 800d026:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 800d028:	687b      	ldr	r3, [r7, #4]
 800d02a:	681b      	ldr	r3, [r3, #0]
 800d02c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d02e:	687b      	ldr	r3, [r7, #4]
 800d030:	681b      	ldr	r3, [r3, #0]
 800d032:	f022 0201 	bic.w	r2, r2, #1
 800d036:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 800d038:	687b      	ldr	r3, [r7, #4]
 800d03a:	681b      	ldr	r3, [r3, #0]
 800d03c:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	f022 0201 	bic.w	r2, r2, #1
 800d048:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 800d04c:	687b      	ldr	r3, [r7, #4]
 800d04e:	681b      	ldr	r3, [r3, #0]
 800d050:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d052:	687b      	ldr	r3, [r7, #4]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f022 0203 	bic.w	r2, r2, #3
 800d05a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d062:	683b      	ldr	r3, [r7, #0]
 800d064:	68da      	ldr	r2, [r3, #12]
 800d066:	687b      	ldr	r3, [r7, #4]
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	430a      	orrs	r2, r1
 800d06c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	681b      	ldr	r3, [r3, #0]
 800d072:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d074:	687b      	ldr	r3, [r7, #4]
 800d076:	681a      	ldr	r2, [r3, #0]
 800d078:	4b8b      	ldr	r3, [pc, #556]	@ (800d2a8 <HAL_DSI_ConfigVideoMode+0x29c>)
 800d07a:	400b      	ands	r3, r1
 800d07c:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 800d07e:	687b      	ldr	r3, [r7, #4]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 800d084:	683b      	ldr	r3, [r7, #0]
 800d086:	691a      	ldr	r2, [r3, #16]
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	681b      	ldr	r3, [r3, #0]
 800d08c:	430a      	orrs	r2, r1
 800d08e:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 800d090:	687b      	ldr	r3, [r7, #4]
 800d092:	681b      	ldr	r3, [r3, #0]
 800d094:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681a      	ldr	r2, [r3, #0]
 800d09a:	4b84      	ldr	r3, [pc, #528]	@ (800d2ac <HAL_DSI_ConfigVideoMode+0x2a0>)
 800d09c:	400b      	ands	r3, r1
 800d09e:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 800d0a0:	687b      	ldr	r3, [r7, #4]
 800d0a2:	681b      	ldr	r3, [r3, #0]
 800d0a4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800d0a6:	683b      	ldr	r3, [r7, #0]
 800d0a8:	695a      	ldr	r2, [r3, #20]
 800d0aa:	687b      	ldr	r3, [r7, #4]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	430a      	orrs	r2, r1
 800d0b0:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 800d0b2:	687b      	ldr	r3, [r7, #4]
 800d0b4:	681b      	ldr	r3, [r3, #0]
 800d0b6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800d0b8:	687b      	ldr	r3, [r7, #4]
 800d0ba:	681a      	ldr	r2, [r3, #0]
 800d0bc:	4b7b      	ldr	r3, [pc, #492]	@ (800d2ac <HAL_DSI_ConfigVideoMode+0x2a0>)
 800d0be:	400b      	ands	r3, r1
 800d0c0:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 800d0c2:	687b      	ldr	r3, [r7, #4]
 800d0c4:	681b      	ldr	r3, [r3, #0]
 800d0c6:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 800d0c8:	683b      	ldr	r3, [r7, #0]
 800d0ca:	699a      	ldr	r2, [r3, #24]
 800d0cc:	687b      	ldr	r3, [r7, #4]
 800d0ce:	681b      	ldr	r3, [r3, #0]
 800d0d0:	430a      	orrs	r2, r1
 800d0d2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 800d0d4:	687b      	ldr	r3, [r7, #4]
 800d0d6:	681b      	ldr	r3, [r3, #0]
 800d0d8:	68da      	ldr	r2, [r3, #12]
 800d0da:	687b      	ldr	r3, [r7, #4]
 800d0dc:	681b      	ldr	r3, [r3, #0]
 800d0de:	f022 0203 	bic.w	r2, r2, #3
 800d0e2:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 800d0e4:	687b      	ldr	r3, [r7, #4]
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	68d9      	ldr	r1, [r3, #12]
 800d0ea:	683b      	ldr	r3, [r7, #0]
 800d0ec:	681a      	ldr	r2, [r3, #0]
 800d0ee:	687b      	ldr	r3, [r7, #4]
 800d0f0:	681b      	ldr	r3, [r3, #0]
 800d0f2:	430a      	orrs	r2, r1
 800d0f4:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 800d0f6:	687b      	ldr	r3, [r7, #4]
 800d0f8:	681b      	ldr	r3, [r3, #0]
 800d0fa:	695a      	ldr	r2, [r3, #20]
 800d0fc:	687b      	ldr	r3, [r7, #4]
 800d0fe:	681b      	ldr	r3, [r3, #0]
 800d100:	f022 0207 	bic.w	r2, r2, #7
 800d104:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	6959      	ldr	r1, [r3, #20]
 800d10c:	683b      	ldr	r3, [r7, #0]
 800d10e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800d110:	683b      	ldr	r3, [r7, #0]
 800d112:	6a1b      	ldr	r3, [r3, #32]
 800d114:	431a      	orrs	r2, r3
 800d116:	683b      	ldr	r3, [r7, #0]
 800d118:	69db      	ldr	r3, [r3, #28]
 800d11a:	431a      	orrs	r2, r3
 800d11c:	687b      	ldr	r3, [r7, #4]
 800d11e:	681b      	ldr	r3, [r3, #0]
 800d120:	430a      	orrs	r2, r1
 800d122:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 800d124:	687b      	ldr	r3, [r7, #4]
 800d126:	681b      	ldr	r3, [r3, #0]
 800d128:	691a      	ldr	r2, [r3, #16]
 800d12a:	687b      	ldr	r3, [r7, #4]
 800d12c:	681b      	ldr	r3, [r3, #0]
 800d12e:	f022 020f 	bic.w	r2, r2, #15
 800d132:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 800d134:	687b      	ldr	r3, [r7, #4]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	6919      	ldr	r1, [r3, #16]
 800d13a:	683b      	ldr	r3, [r7, #0]
 800d13c:	685a      	ldr	r2, [r3, #4]
 800d13e:	687b      	ldr	r3, [r7, #4]
 800d140:	681b      	ldr	r3, [r3, #0]
 800d142:	430a      	orrs	r2, r1
 800d144:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 800d146:	687b      	ldr	r3, [r7, #4]
 800d148:	681b      	ldr	r3, [r3, #0]
 800d14a:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 800d14e:	687b      	ldr	r3, [r7, #4]
 800d150:	681b      	ldr	r3, [r3, #0]
 800d152:	f022 020e 	bic.w	r2, r2, #14
 800d156:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 800d15a:	687b      	ldr	r3, [r7, #4]
 800d15c:	681b      	ldr	r3, [r3, #0]
 800d15e:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 800d162:	683b      	ldr	r3, [r7, #0]
 800d164:	685b      	ldr	r3, [r3, #4]
 800d166:	005a      	lsls	r2, r3, #1
 800d168:	687b      	ldr	r3, [r7, #4]
 800d16a:	681b      	ldr	r3, [r3, #0]
 800d16c:	430a      	orrs	r2, r1
 800d16e:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 800d172:	683b      	ldr	r3, [r7, #0]
 800d174:	685b      	ldr	r3, [r3, #4]
 800d176:	2b03      	cmp	r3, #3
 800d178:	d110      	bne.n	800d19c <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 800d17a:	687b      	ldr	r3, [r7, #4]
 800d17c:	681b      	ldr	r3, [r3, #0]
 800d17e:	691a      	ldr	r2, [r3, #16]
 800d180:	687b      	ldr	r3, [r7, #4]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d188:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 800d18a:	687b      	ldr	r3, [r7, #4]
 800d18c:	681b      	ldr	r3, [r3, #0]
 800d18e:	6919      	ldr	r1, [r3, #16]
 800d190:	683b      	ldr	r3, [r7, #0]
 800d192:	689a      	ldr	r2, [r3, #8]
 800d194:	687b      	ldr	r3, [r7, #4]
 800d196:	681b      	ldr	r3, [r3, #0]
 800d198:	430a      	orrs	r2, r1
 800d19a:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	681a      	ldr	r2, [r3, #0]
 800d1a6:	4b42      	ldr	r3, [pc, #264]	@ (800d2b0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800d1a8:	400b      	ands	r3, r1
 800d1aa:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 800d1ac:	687b      	ldr	r3, [r7, #4]
 800d1ae:	681b      	ldr	r3, [r3, #0]
 800d1b0:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 800d1b2:	683b      	ldr	r3, [r7, #0]
 800d1b4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800d1b6:	687b      	ldr	r3, [r7, #4]
 800d1b8:	681b      	ldr	r3, [r3, #0]
 800d1ba:	430a      	orrs	r2, r1
 800d1bc:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	681b      	ldr	r3, [r3, #0]
 800d1c2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	681a      	ldr	r2, [r3, #0]
 800d1c8:	4b39      	ldr	r3, [pc, #228]	@ (800d2b0 <HAL_DSI_ConfigVideoMode+0x2a4>)
 800d1ca:	400b      	ands	r3, r1
 800d1cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	681b      	ldr	r3, [r3, #0]
 800d1d2:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 800d1d4:	683b      	ldr	r3, [r7, #0]
 800d1d6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d1d8:	687b      	ldr	r3, [r7, #4]
 800d1da:	681b      	ldr	r3, [r3, #0]
 800d1dc:	430a      	orrs	r2, r1
 800d1de:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 800d1e0:	687b      	ldr	r3, [r7, #4]
 800d1e2:	681b      	ldr	r3, [r3, #0]
 800d1e4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d1e6:	687b      	ldr	r3, [r7, #4]
 800d1e8:	681a      	ldr	r2, [r3, #0]
 800d1ea:	4b32      	ldr	r3, [pc, #200]	@ (800d2b4 <HAL_DSI_ConfigVideoMode+0x2a8>)
 800d1ec:	400b      	ands	r3, r1
 800d1ee:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 800d1f0:	687b      	ldr	r3, [r7, #4]
 800d1f2:	681b      	ldr	r3, [r3, #0]
 800d1f4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 800d1f6:	683b      	ldr	r3, [r7, #0]
 800d1f8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800d1fa:	687b      	ldr	r3, [r7, #4]
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	430a      	orrs	r2, r1
 800d200:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 800d202:	687b      	ldr	r3, [r7, #4]
 800d204:	681b      	ldr	r3, [r3, #0]
 800d206:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d208:	687b      	ldr	r3, [r7, #4]
 800d20a:	681a      	ldr	r2, [r3, #0]
 800d20c:	4b2a      	ldr	r3, [pc, #168]	@ (800d2b8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800d20e:	400b      	ands	r3, r1
 800d210:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 800d212:	687b      	ldr	r3, [r7, #4]
 800d214:	681b      	ldr	r3, [r3, #0]
 800d216:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 800d218:	683b      	ldr	r3, [r7, #0]
 800d21a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d21c:	687b      	ldr	r3, [r7, #4]
 800d21e:	681b      	ldr	r3, [r3, #0]
 800d220:	430a      	orrs	r2, r1
 800d222:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800d22a:	687b      	ldr	r3, [r7, #4]
 800d22c:	681a      	ldr	r2, [r3, #0]
 800d22e:	4b22      	ldr	r3, [pc, #136]	@ (800d2b8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800d230:	400b      	ands	r3, r1
 800d232:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 800d234:	687b      	ldr	r3, [r7, #4]
 800d236:	681b      	ldr	r3, [r3, #0]
 800d238:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 800d23a:	683b      	ldr	r3, [r7, #0]
 800d23c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d23e:	687b      	ldr	r3, [r7, #4]
 800d240:	681b      	ldr	r3, [r3, #0]
 800d242:	430a      	orrs	r2, r1
 800d244:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 800d246:	687b      	ldr	r3, [r7, #4]
 800d248:	681b      	ldr	r3, [r3, #0]
 800d24a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	681a      	ldr	r2, [r3, #0]
 800d250:	4b19      	ldr	r3, [pc, #100]	@ (800d2b8 <HAL_DSI_ConfigVideoMode+0x2ac>)
 800d252:	400b      	ands	r3, r1
 800d254:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 800d25c:	683b      	ldr	r3, [r7, #0]
 800d25e:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	681b      	ldr	r3, [r3, #0]
 800d264:	430a      	orrs	r2, r1
 800d266:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 800d268:	687b      	ldr	r3, [r7, #4]
 800d26a:	681b      	ldr	r3, [r3, #0]
 800d26c:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800d26e:	687b      	ldr	r3, [r7, #4]
 800d270:	681a      	ldr	r2, [r3, #0]
 800d272:	4b0d      	ldr	r3, [pc, #52]	@ (800d2a8 <HAL_DSI_ConfigVideoMode+0x29c>)
 800d274:	400b      	ands	r3, r1
 800d276:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	681b      	ldr	r3, [r3, #0]
 800d27c:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 800d27e:	683b      	ldr	r3, [r7, #0]
 800d280:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800d282:	687b      	ldr	r3, [r7, #4]
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	430a      	orrs	r2, r1
 800d288:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 800d28a:	687b      	ldr	r3, [r7, #4]
 800d28c:	681b      	ldr	r3, [r3, #0]
 800d28e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d290:	687b      	ldr	r3, [r7, #4]
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800d298:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 800d29a:	687b      	ldr	r3, [r7, #4]
 800d29c:	681b      	ldr	r3, [r3, #0]
 800d29e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800d2a4:	e00a      	b.n	800d2bc <HAL_DSI_ConfigVideoMode+0x2b0>
 800d2a6:	bf00      	nop
 800d2a8:	ffffc000 	.word	0xffffc000
 800d2ac:	ffffe000 	.word	0xffffe000
 800d2b0:	fffff000 	.word	0xfffff000
 800d2b4:	ffff8000 	.word	0xffff8000
 800d2b8:	fffffc00 	.word	0xfffffc00
 800d2bc:	687b      	ldr	r3, [r7, #4]
 800d2be:	681b      	ldr	r3, [r3, #0]
 800d2c0:	430a      	orrs	r2, r1
 800d2c2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	681b      	ldr	r3, [r3, #0]
 800d2c8:	699a      	ldr	r2, [r3, #24]
 800d2ca:	687b      	ldr	r3, [r7, #4]
 800d2cc:	681b      	ldr	r3, [r3, #0]
 800d2ce:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 800d2d2:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 800d2d4:	687b      	ldr	r3, [r7, #4]
 800d2d6:	681b      	ldr	r3, [r3, #0]
 800d2d8:	6999      	ldr	r1, [r3, #24]
 800d2da:	683b      	ldr	r3, [r7, #0]
 800d2dc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d2de:	041a      	lsls	r2, r3, #16
 800d2e0:	687b      	ldr	r3, [r7, #4]
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	430a      	orrs	r2, r1
 800d2e6:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 800d2e8:	687b      	ldr	r3, [r7, #4]
 800d2ea:	681b      	ldr	r3, [r3, #0]
 800d2ec:	699a      	ldr	r2, [r3, #24]
 800d2ee:	687b      	ldr	r3, [r7, #4]
 800d2f0:	681b      	ldr	r3, [r3, #0]
 800d2f2:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800d2f6:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 800d2f8:	687b      	ldr	r3, [r7, #4]
 800d2fa:	681b      	ldr	r3, [r3, #0]
 800d2fc:	6999      	ldr	r1, [r3, #24]
 800d2fe:	683b      	ldr	r3, [r7, #0]
 800d300:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800d302:	687b      	ldr	r3, [r7, #4]
 800d304:	681b      	ldr	r3, [r3, #0]
 800d306:	430a      	orrs	r2, r1
 800d308:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 800d30a:	687b      	ldr	r3, [r7, #4]
 800d30c:	681b      	ldr	r3, [r3, #0]
 800d30e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	681b      	ldr	r3, [r3, #0]
 800d314:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800d318:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 800d31a:	687b      	ldr	r3, [r7, #4]
 800d31c:	681b      	ldr	r3, [r3, #0]
 800d31e:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d320:	683b      	ldr	r3, [r7, #0]
 800d322:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800d324:	687b      	ldr	r3, [r7, #4]
 800d326:	681b      	ldr	r3, [r3, #0]
 800d328:	430a      	orrs	r2, r1
 800d32a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 800d32c:	687b      	ldr	r3, [r7, #4]
 800d32e:	681b      	ldr	r3, [r3, #0]
 800d330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d332:	687b      	ldr	r3, [r7, #4]
 800d334:	681b      	ldr	r3, [r3, #0]
 800d336:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800d33a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 800d33c:	687b      	ldr	r3, [r7, #4]
 800d33e:	681b      	ldr	r3, [r3, #0]
 800d340:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d342:	683b      	ldr	r3, [r7, #0]
 800d344:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 800d346:	687b      	ldr	r3, [r7, #4]
 800d348:	681b      	ldr	r3, [r3, #0]
 800d34a:	430a      	orrs	r2, r1
 800d34c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 800d34e:	687b      	ldr	r3, [r7, #4]
 800d350:	681b      	ldr	r3, [r3, #0]
 800d352:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	681b      	ldr	r3, [r3, #0]
 800d358:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800d35c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	681b      	ldr	r3, [r3, #0]
 800d362:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d364:	683b      	ldr	r3, [r7, #0]
 800d366:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	430a      	orrs	r2, r1
 800d36e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 800d370:	687b      	ldr	r3, [r7, #4]
 800d372:	681b      	ldr	r3, [r3, #0]
 800d374:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d376:	687b      	ldr	r3, [r7, #4]
 800d378:	681b      	ldr	r3, [r3, #0]
 800d37a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800d37e:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 800d380:	687b      	ldr	r3, [r7, #4]
 800d382:	681b      	ldr	r3, [r3, #0]
 800d384:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d386:	683b      	ldr	r3, [r7, #0]
 800d388:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 800d38a:	687b      	ldr	r3, [r7, #4]
 800d38c:	681b      	ldr	r3, [r3, #0]
 800d38e:	430a      	orrs	r2, r1
 800d390:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d398:	687b      	ldr	r3, [r7, #4]
 800d39a:	681b      	ldr	r3, [r3, #0]
 800d39c:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 800d3a0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 800d3a2:	687b      	ldr	r3, [r7, #4]
 800d3a4:	681b      	ldr	r3, [r3, #0]
 800d3a6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d3a8:	683b      	ldr	r3, [r7, #0]
 800d3aa:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	681b      	ldr	r3, [r3, #0]
 800d3b0:	430a      	orrs	r2, r1
 800d3b2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 800d3b4:	687b      	ldr	r3, [r7, #4]
 800d3b6:	681b      	ldr	r3, [r3, #0]
 800d3b8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3ba:	687b      	ldr	r3, [r7, #4]
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800d3c2:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	681b      	ldr	r3, [r3, #0]
 800d3c8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d3ca:	683b      	ldr	r3, [r7, #0]
 800d3cc:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	430a      	orrs	r2, r1
 800d3d4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 800d3d6:	687b      	ldr	r3, [r7, #4]
 800d3d8:	681b      	ldr	r3, [r3, #0]
 800d3da:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800d3dc:	687b      	ldr	r3, [r7, #4]
 800d3de:	681b      	ldr	r3, [r3, #0]
 800d3e0:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800d3e4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 800d3e6:	687b      	ldr	r3, [r7, #4]
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 800d3ec:	683b      	ldr	r3, [r7, #0]
 800d3ee:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	681b      	ldr	r3, [r3, #0]
 800d3f4:	430a      	orrs	r2, r1
 800d3f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d3f8:	687b      	ldr	r3, [r7, #4]
 800d3fa:	2200      	movs	r2, #0
 800d3fc:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d3fe:	2300      	movs	r3, #0
}
 800d400:	4618      	mov	r0, r3
 800d402:	370c      	adds	r7, #12
 800d404:	46bd      	mov	sp, r7
 800d406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d40a:	4770      	bx	lr

0800d40c <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 800d40c:	b480      	push	{r7}
 800d40e:	b083      	sub	sp, #12
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	7c1b      	ldrb	r3, [r3, #16]
 800d41a:	2b01      	cmp	r3, #1
 800d41c:	d101      	bne.n	800d422 <HAL_DSI_ConfigFlowControl+0x16>
 800d41e:	2302      	movs	r3, #2
 800d420:	e016      	b.n	800d450 <HAL_DSI_ConfigFlowControl+0x44>
 800d422:	687b      	ldr	r3, [r7, #4]
 800d424:	2201      	movs	r2, #1
 800d426:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 800d428:	687b      	ldr	r3, [r7, #4]
 800d42a:	681b      	ldr	r3, [r3, #0]
 800d42c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	f022 021f 	bic.w	r2, r2, #31
 800d436:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 800d438:	687b      	ldr	r3, [r7, #4]
 800d43a:	681b      	ldr	r3, [r3, #0]
 800d43c:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800d43e:	687b      	ldr	r3, [r7, #4]
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	683a      	ldr	r2, [r7, #0]
 800d444:	430a      	orrs	r2, r1
 800d446:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d448:	687b      	ldr	r3, [r7, #4]
 800d44a:	2200      	movs	r2, #0
 800d44c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d44e:	2300      	movs	r3, #0
}
 800d450:	4618      	mov	r0, r3
 800d452:	370c      	adds	r7, #12
 800d454:	46bd      	mov	sp, r7
 800d456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d45a:	4770      	bx	lr

0800d45c <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 800d45c:	b480      	push	{r7}
 800d45e:	b085      	sub	sp, #20
 800d460:	af00      	add	r7, sp, #0
 800d462:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 800d464:	687b      	ldr	r3, [r7, #4]
 800d466:	7c1b      	ldrb	r3, [r3, #16]
 800d468:	2b01      	cmp	r3, #1
 800d46a:	d101      	bne.n	800d470 <HAL_DSI_Start+0x14>
 800d46c:	2302      	movs	r3, #2
 800d46e:	e02b      	b.n	800d4c8 <HAL_DSI_Start+0x6c>
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	2201      	movs	r2, #1
 800d474:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 800d476:	2300      	movs	r3, #0
 800d478:	60fb      	str	r3, [r7, #12]
 800d47a:	687b      	ldr	r3, [r7, #4]
 800d47c:	681b      	ldr	r3, [r3, #0]
 800d47e:	685a      	ldr	r2, [r3, #4]
 800d480:	687b      	ldr	r3, [r7, #4]
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	f042 0201 	orr.w	r2, r2, #1
 800d488:	605a      	str	r2, [r3, #4]
 800d48a:	687b      	ldr	r3, [r7, #4]
 800d48c:	681b      	ldr	r3, [r3, #0]
 800d48e:	685b      	ldr	r3, [r3, #4]
 800d490:	f003 0301 	and.w	r3, r3, #1
 800d494:	60fb      	str	r3, [r7, #12]
 800d496:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 800d498:	2300      	movs	r3, #0
 800d49a:	60bb      	str	r3, [r7, #8]
 800d49c:	687b      	ldr	r3, [r7, #4]
 800d49e:	681b      	ldr	r3, [r3, #0]
 800d4a0:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 800d4a4:	687b      	ldr	r3, [r7, #4]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	f042 0208 	orr.w	r2, r2, #8
 800d4ac:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 800d4b0:	687b      	ldr	r3, [r7, #4]
 800d4b2:	681b      	ldr	r3, [r3, #0]
 800d4b4:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 800d4b8:	f003 0308 	and.w	r3, r3, #8
 800d4bc:	60bb      	str	r3, [r7, #8]
 800d4be:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d4c0:	687b      	ldr	r3, [r7, #4]
 800d4c2:	2200      	movs	r2, #0
 800d4c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d4c6:	2300      	movs	r3, #0
}
 800d4c8:	4618      	mov	r0, r3
 800d4ca:	3714      	adds	r7, #20
 800d4cc:	46bd      	mov	sp, r7
 800d4ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d4d2:	4770      	bx	lr

0800d4d4 <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 800d4d4:	b580      	push	{r7, lr}
 800d4d6:	b088      	sub	sp, #32
 800d4d8:	af02      	add	r7, sp, #8
 800d4da:	60f8      	str	r0, [r7, #12]
 800d4dc:	60b9      	str	r1, [r7, #8]
 800d4de:	607a      	str	r2, [r7, #4]
 800d4e0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	7c1b      	ldrb	r3, [r3, #16]
 800d4e6:	2b01      	cmp	r3, #1
 800d4e8:	d101      	bne.n	800d4ee <HAL_DSI_ShortWrite+0x1a>
 800d4ea:	2302      	movs	r3, #2
 800d4ec:	e010      	b.n	800d510 <HAL_DSI_ShortWrite+0x3c>
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2201      	movs	r2, #1
 800d4f2:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 800d4f4:	6a3b      	ldr	r3, [r7, #32]
 800d4f6:	9300      	str	r3, [sp, #0]
 800d4f8:	683b      	ldr	r3, [r7, #0]
 800d4fa:	687a      	ldr	r2, [r7, #4]
 800d4fc:	68b9      	ldr	r1, [r7, #8]
 800d4fe:	68f8      	ldr	r0, [r7, #12]
 800d500:	f7ff fbcb 	bl	800cc9a <DSI_ShortWrite>
 800d504:	4603      	mov	r3, r0
 800d506:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	2200      	movs	r2, #0
 800d50c:	741a      	strb	r2, [r3, #16]

  return status;
 800d50e:	7dfb      	ldrb	r3, [r7, #23]
}
 800d510:	4618      	mov	r0, r3
 800d512:	3718      	adds	r7, #24
 800d514:	46bd      	mov	sp, r7
 800d516:	bd80      	pop	{r7, pc}

0800d518 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 800d518:	b580      	push	{r7, lr}
 800d51a:	b08c      	sub	sp, #48	@ 0x30
 800d51c:	af02      	add	r7, sp, #8
 800d51e:	60f8      	str	r0, [r7, #12]
 800d520:	60b9      	str	r1, [r7, #8]
 800d522:	607a      	str	r2, [r7, #4]
 800d524:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 800d526:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d528:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d52a:	68fb      	ldr	r3, [r7, #12]
 800d52c:	7c1b      	ldrb	r3, [r3, #16]
 800d52e:	2b01      	cmp	r3, #1
 800d530:	d101      	bne.n	800d536 <HAL_DSI_LongWrite+0x1e>
 800d532:	2302      	movs	r3, #2
 800d534:	e084      	b.n	800d640 <HAL_DSI_LongWrite+0x128>
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	2201      	movs	r2, #1
 800d53a:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 800d53c:	f7fb fdb4 	bl	80090a8 <HAL_GetTick>
 800d540:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d542:	e00c      	b.n	800d55e <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d544:	f7fb fdb0 	bl	80090a8 <HAL_GetTick>
 800d548:	4602      	mov	r2, r0
 800d54a:	697b      	ldr	r3, [r7, #20]
 800d54c:	1ad3      	subs	r3, r2, r3
 800d54e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d552:	d904      	bls.n	800d55e <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d554:	68fb      	ldr	r3, [r7, #12]
 800d556:	2200      	movs	r2, #0
 800d558:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800d55a:	2303      	movs	r3, #3
 800d55c:	e070      	b.n	800d640 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d564:	f003 0301 	and.w	r3, r3, #1
 800d568:	2b00      	cmp	r3, #0
 800d56a:	d0eb      	beq.n	800d544 <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 800d56c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d56e:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 800d570:	683b      	ldr	r3, [r7, #0]
 800d572:	2b03      	cmp	r3, #3
 800d574:	bf28      	it	cs
 800d576:	2303      	movcs	r3, #3
 800d578:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 800d57a:	2300      	movs	r3, #0
 800d57c:	623b      	str	r3, [r7, #32]
 800d57e:	e00f      	b.n	800d5a0 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 800d580:	69ba      	ldr	r2, [r7, #24]
 800d582:	6a3b      	ldr	r3, [r7, #32]
 800d584:	4413      	add	r3, r2
 800d586:	781b      	ldrb	r3, [r3, #0]
 800d588:	461a      	mov	r2, r3
 800d58a:	6a3b      	ldr	r3, [r7, #32]
 800d58c:	3301      	adds	r3, #1
 800d58e:	00db      	lsls	r3, r3, #3
 800d590:	fa02 f303 	lsl.w	r3, r2, r3
 800d594:	69fa      	ldr	r2, [r7, #28]
 800d596:	4313      	orrs	r3, r2
 800d598:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 800d59a:	6a3b      	ldr	r3, [r7, #32]
 800d59c:	3301      	adds	r3, #1
 800d59e:	623b      	str	r3, [r7, #32]
 800d5a0:	6a3a      	ldr	r2, [r7, #32]
 800d5a2:	693b      	ldr	r3, [r7, #16]
 800d5a4:	429a      	cmp	r2, r3
 800d5a6:	d3eb      	bcc.n	800d580 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 800d5a8:	68fb      	ldr	r3, [r7, #12]
 800d5aa:	681b      	ldr	r3, [r3, #0]
 800d5ac:	69fa      	ldr	r2, [r7, #28]
 800d5ae:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 800d5b0:	683a      	ldr	r2, [r7, #0]
 800d5b2:	693b      	ldr	r3, [r7, #16]
 800d5b4:	1ad3      	subs	r3, r2, r3
 800d5b6:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 800d5b8:	69ba      	ldr	r2, [r7, #24]
 800d5ba:	693b      	ldr	r3, [r7, #16]
 800d5bc:	4413      	add	r3, r2
 800d5be:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 800d5c0:	e028      	b.n	800d614 <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 800d5c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d5c4:	2b04      	cmp	r3, #4
 800d5c6:	bf28      	it	cs
 800d5c8:	2304      	movcs	r3, #4
 800d5ca:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 800d5cc:	2300      	movs	r3, #0
 800d5ce:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800d5d0:	2300      	movs	r3, #0
 800d5d2:	623b      	str	r3, [r7, #32]
 800d5d4:	e00e      	b.n	800d5f4 <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 800d5d6:	69ba      	ldr	r2, [r7, #24]
 800d5d8:	6a3b      	ldr	r3, [r7, #32]
 800d5da:	4413      	add	r3, r2
 800d5dc:	781b      	ldrb	r3, [r3, #0]
 800d5de:	461a      	mov	r2, r3
 800d5e0:	6a3b      	ldr	r3, [r7, #32]
 800d5e2:	00db      	lsls	r3, r3, #3
 800d5e4:	fa02 f303 	lsl.w	r3, r2, r3
 800d5e8:	69fa      	ldr	r2, [r7, #28]
 800d5ea:	4313      	orrs	r3, r2
 800d5ec:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 800d5ee:	6a3b      	ldr	r3, [r7, #32]
 800d5f0:	3301      	adds	r3, #1
 800d5f2:	623b      	str	r3, [r7, #32]
 800d5f4:	6a3a      	ldr	r2, [r7, #32]
 800d5f6:	693b      	ldr	r3, [r7, #16]
 800d5f8:	429a      	cmp	r2, r3
 800d5fa:	d3ec      	bcc.n	800d5d6 <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 800d5fc:	68fb      	ldr	r3, [r7, #12]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	69fa      	ldr	r2, [r7, #28]
 800d602:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 800d604:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800d606:	693b      	ldr	r3, [r7, #16]
 800d608:	1ad3      	subs	r3, r2, r3
 800d60a:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 800d60c:	69ba      	ldr	r2, [r7, #24]
 800d60e:	693b      	ldr	r3, [r7, #16]
 800d610:	4413      	add	r3, r2
 800d612:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 800d614:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d616:	2b00      	cmp	r3, #0
 800d618:	d1d3      	bne.n	800d5c2 <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 800d61e:	683b      	ldr	r3, [r7, #0]
 800d620:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 800d622:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 800d624:	683b      	ldr	r3, [r7, #0]
 800d626:	3301      	adds	r3, #1
 800d628:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 800d62a:	b2db      	uxtb	r3, r3
 800d62c:	9300      	str	r3, [sp, #0]
 800d62e:	4613      	mov	r3, r2
 800d630:	687a      	ldr	r2, [r7, #4]
 800d632:	68b9      	ldr	r1, [r7, #8]
 800d634:	f7ff fb18 	bl	800cc68 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d638:	68fb      	ldr	r3, [r7, #12]
 800d63a:	2200      	movs	r2, #0
 800d63c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d63e:	2300      	movs	r3, #0
}
 800d640:	4618      	mov	r0, r3
 800d642:	3728      	adds	r7, #40	@ 0x28
 800d644:	46bd      	mov	sp, r7
 800d646:	bd80      	pop	{r7, pc}

0800d648 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 800d648:	b580      	push	{r7, lr}
 800d64a:	b08c      	sub	sp, #48	@ 0x30
 800d64c:	af02      	add	r7, sp, #8
 800d64e:	60f8      	str	r0, [r7, #12]
 800d650:	60b9      	str	r1, [r7, #8]
 800d652:	607a      	str	r2, [r7, #4]
 800d654:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 800d656:	687b      	ldr	r3, [r7, #4]
 800d658:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 800d65a:	683b      	ldr	r3, [r7, #0]
 800d65c:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 800d65e:	68fb      	ldr	r3, [r7, #12]
 800d660:	7c1b      	ldrb	r3, [r3, #16]
 800d662:	2b01      	cmp	r3, #1
 800d664:	d101      	bne.n	800d66a <HAL_DSI_Read+0x22>
 800d666:	2302      	movs	r3, #2
 800d668:	e0ae      	b.n	800d7c8 <HAL_DSI_Read+0x180>
 800d66a:	68fb      	ldr	r3, [r7, #12]
 800d66c:	2201      	movs	r2, #1
 800d66e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 800d670:	6a3b      	ldr	r3, [r7, #32]
 800d672:	2b02      	cmp	r3, #2
 800d674:	d913      	bls.n	800d69e <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800d676:	6a3b      	ldr	r3, [r7, #32]
 800d678:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 800d67a:	6a3b      	ldr	r3, [r7, #32]
 800d67c:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 800d67e:	b2db      	uxtb	r3, r3
 800d680:	9300      	str	r3, [sp, #0]
 800d682:	4613      	mov	r3, r2
 800d684:	2237      	movs	r2, #55	@ 0x37
 800d686:	68b9      	ldr	r1, [r7, #8]
 800d688:	68f8      	ldr	r0, [r7, #12]
 800d68a:	f7ff fb06 	bl	800cc9a <DSI_ShortWrite>
 800d68e:	4603      	mov	r3, r0
 800d690:	2b00      	cmp	r3, #0
 800d692:	d004      	beq.n	800d69e <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d694:	68fb      	ldr	r3, [r7, #12]
 800d696:	2200      	movs	r2, #0
 800d698:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 800d69a:	2301      	movs	r3, #1
 800d69c:	e094      	b.n	800d7c8 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 800d69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6a0:	2b06      	cmp	r3, #6
 800d6a2:	d109      	bne.n	800d6b8 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 800d6a4:	68fb      	ldr	r3, [r7, #12]
 800d6a6:	6818      	ldr	r0, [r3, #0]
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	9300      	str	r3, [sp, #0]
 800d6ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800d6ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6b0:	68b9      	ldr	r1, [r7, #8]
 800d6b2:	f7ff fad9 	bl	800cc68 <DSI_ConfigPacketHeader>
 800d6b6:	e033      	b.n	800d720 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 800d6b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6ba:	2b04      	cmp	r3, #4
 800d6bc:	d109      	bne.n	800d6d2 <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 800d6be:	68fb      	ldr	r3, [r7, #12]
 800d6c0:	6818      	ldr	r0, [r3, #0]
 800d6c2:	2300      	movs	r3, #0
 800d6c4:	9300      	str	r3, [sp, #0]
 800d6c6:	2300      	movs	r3, #0
 800d6c8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ca:	68b9      	ldr	r1, [r7, #8]
 800d6cc:	f7ff facc 	bl	800cc68 <DSI_ConfigPacketHeader>
 800d6d0:	e026      	b.n	800d720 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 800d6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6d4:	2b14      	cmp	r3, #20
 800d6d6:	d10c      	bne.n	800d6f2 <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 800d6d8:	68fb      	ldr	r3, [r7, #12]
 800d6da:	6818      	ldr	r0, [r3, #0]
 800d6dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6de:	781b      	ldrb	r3, [r3, #0]
 800d6e0:	461a      	mov	r2, r3
 800d6e2:	2300      	movs	r3, #0
 800d6e4:	9300      	str	r3, [sp, #0]
 800d6e6:	4613      	mov	r3, r2
 800d6e8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d6ea:	68b9      	ldr	r1, [r7, #8]
 800d6ec:	f7ff fabc 	bl	800cc68 <DSI_ConfigPacketHeader>
 800d6f0:	e016      	b.n	800d720 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 800d6f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800d6f4:	2b24      	cmp	r3, #36	@ 0x24
 800d6f6:	d10e      	bne.n	800d716 <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 800d6f8:	68fb      	ldr	r3, [r7, #12]
 800d6fa:	6818      	ldr	r0, [r3, #0]
 800d6fc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d6fe:	781b      	ldrb	r3, [r3, #0]
 800d700:	461a      	mov	r2, r3
 800d702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800d704:	3301      	adds	r3, #1
 800d706:	781b      	ldrb	r3, [r3, #0]
 800d708:	9300      	str	r3, [sp, #0]
 800d70a:	4613      	mov	r3, r2
 800d70c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800d70e:	68b9      	ldr	r1, [r7, #8]
 800d710:	f7ff faaa 	bl	800cc68 <DSI_ConfigPacketHeader>
 800d714:	e004      	b.n	800d720 <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 800d716:	68fb      	ldr	r3, [r7, #12]
 800d718:	2200      	movs	r2, #0
 800d71a:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800d71c:	2301      	movs	r3, #1
 800d71e:	e053      	b.n	800d7c8 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 800d720:	f7fb fcc2 	bl	80090a8 <HAL_GetTick>
 800d724:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 800d726:	e048      	b.n	800d7ba <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d72e:	f003 0310 	and.w	r3, r3, #16
 800d732:	2b00      	cmp	r3, #0
 800d734:	d120      	bne.n	800d778 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 800d736:	68fb      	ldr	r3, [r7, #12]
 800d738:	681b      	ldr	r3, [r3, #0]
 800d73a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d73c:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 800d73e:	6a3b      	ldr	r3, [r7, #32]
 800d740:	2b04      	cmp	r3, #4
 800d742:	bf28      	it	cs
 800d744:	2304      	movcs	r3, #4
 800d746:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 800d748:	2300      	movs	r3, #0
 800d74a:	61fb      	str	r3, [r7, #28]
 800d74c:	e010      	b.n	800d770 <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 800d74e:	69fb      	ldr	r3, [r7, #28]
 800d750:	00db      	lsls	r3, r3, #3
 800d752:	697a      	ldr	r2, [r7, #20]
 800d754:	fa22 f303 	lsr.w	r3, r2, r3
 800d758:	b2da      	uxtb	r2, r3
 800d75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d75c:	701a      	strb	r2, [r3, #0]
        pdata++;
 800d75e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800d760:	3301      	adds	r3, #1
 800d762:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 800d764:	6a3b      	ldr	r3, [r7, #32]
 800d766:	3b01      	subs	r3, #1
 800d768:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 800d76a:	69fb      	ldr	r3, [r7, #28]
 800d76c:	3301      	adds	r3, #1
 800d76e:	61fb      	str	r3, [r7, #28]
 800d770:	69fa      	ldr	r2, [r7, #28]
 800d772:	693b      	ldr	r3, [r7, #16]
 800d774:	429a      	cmp	r2, r3
 800d776:	d3ea      	bcc.n	800d74e <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 800d778:	f7fb fc96 	bl	80090a8 <HAL_GetTick>
 800d77c:	4602      	mov	r2, r0
 800d77e:	69bb      	ldr	r3, [r7, #24]
 800d780:	1ad3      	subs	r3, r2, r3
 800d782:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800d786:	d904      	bls.n	800d792 <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	2200      	movs	r2, #0
 800d78c:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 800d78e:	2303      	movs	r3, #3
 800d790:	e01a      	b.n	800d7c8 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	681b      	ldr	r3, [r3, #0]
 800d796:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d798:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d79c:	2b00      	cmp	r3, #0
 800d79e:	d10c      	bne.n	800d7ba <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	681b      	ldr	r3, [r3, #0]
 800d7a4:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800d7a8:	f003 0320 	and.w	r3, r3, #32
 800d7ac:	2b20      	cmp	r3, #32
 800d7ae:	d104      	bne.n	800d7ba <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 800d7b0:	68fb      	ldr	r3, [r7, #12]
 800d7b2:	2200      	movs	r2, #0
 800d7b4:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e006      	b.n	800d7c8 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 800d7ba:	6a3b      	ldr	r3, [r7, #32]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	dcb3      	bgt.n	800d728 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 800d7c0:	68fb      	ldr	r3, [r7, #12]
 800d7c2:	2200      	movs	r2, #0
 800d7c4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 800d7c6:	2300      	movs	r3, #0
}
 800d7c8:	4618      	mov	r0, r3
 800d7ca:	3728      	adds	r7, #40	@ 0x28
 800d7cc:	46bd      	mov	sp, r7
 800d7ce:	bd80      	pop	{r7, pc}

0800d7d0 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 800d7d0:	b480      	push	{r7}
 800d7d2:	b087      	sub	sp, #28
 800d7d4:	af00      	add	r7, sp, #0
 800d7d6:	60f8      	str	r0, [r7, #12]
 800d7d8:	460b      	mov	r3, r1
 800d7da:	607a      	str	r2, [r7, #4]
 800d7dc:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 800d7de:	2300      	movs	r3, #0
 800d7e0:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	2b00      	cmp	r3, #0
 800d7e6:	d101      	bne.n	800d7ec <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 800d7e8:	2301      	movs	r3, #1
 800d7ea:	e00a      	b.n	800d802 <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 800d7ec:	7afb      	ldrb	r3, [r7, #11]
 800d7ee:	2b00      	cmp	r3, #0
 800d7f0:	d103      	bne.n	800d7fa <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 800d7f2:	68fb      	ldr	r3, [r7, #12]
 800d7f4:	687a      	ldr	r2, [r7, #4]
 800d7f6:	605a      	str	r2, [r3, #4]
      break;
 800d7f8:	e002      	b.n	800d800 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 800d7fa:	2301      	movs	r3, #1
 800d7fc:	75fb      	strb	r3, [r7, #23]
      break;
 800d7fe:	bf00      	nop
  }

  return status;
 800d800:	7dfb      	ldrb	r3, [r7, #23]
}
 800d802:	4618      	mov	r0, r3
 800d804:	371c      	adds	r7, #28
 800d806:	46bd      	mov	sp, r7
 800d808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d80c:	4770      	bx	lr

0800d80e <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 800d80e:	b480      	push	{r7}
 800d810:	b083      	sub	sp, #12
 800d812:	af00      	add	r7, sp, #0
 800d814:	6078      	str	r0, [r7, #4]
 800d816:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 800d818:	687b      	ldr	r3, [r7, #4]
 800d81a:	2b00      	cmp	r3, #0
 800d81c:	d101      	bne.n	800d822 <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 800d81e:	2301      	movs	r3, #1
 800d820:	e003      	b.n	800d82a <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 800d822:	687b      	ldr	r3, [r7, #4]
 800d824:	683a      	ldr	r2, [r7, #0]
 800d826:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 800d828:	2300      	movs	r3, #0
  }
}
 800d82a:	4618      	mov	r0, r3
 800d82c:	370c      	adds	r7, #12
 800d82e:	46bd      	mov	sp, r7
 800d830:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d834:	4770      	bx	lr
	...

0800d838 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	b086      	sub	sp, #24
 800d83c:	af00      	add	r7, sp, #0
 800d83e:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 800d840:	687b      	ldr	r3, [r7, #4]
 800d842:	681b      	ldr	r3, [r3, #0]
 800d844:	0c1b      	lsrs	r3, r3, #16
 800d846:	f003 0303 	and.w	r3, r3, #3
 800d84a:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 800d84c:	687b      	ldr	r3, [r7, #4]
 800d84e:	681b      	ldr	r3, [r3, #0]
 800d850:	f003 031f 	and.w	r3, r3, #31
 800d854:	2201      	movs	r2, #1
 800d856:	fa02 f303 	lsl.w	r3, r2, r3
 800d85a:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 800d85c:	f7fb fdfa 	bl	8009454 <HAL_GetCurrentCPUID>
 800d860:	4603      	mov	r3, r0
 800d862:	2b03      	cmp	r3, #3
 800d864:	d105      	bne.n	800d872 <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 800d866:	693b      	ldr	r3, [r7, #16]
 800d868:	011a      	lsls	r2, r3, #4
 800d86a:	4b0f      	ldr	r3, [pc, #60]	@ (800d8a8 <HAL_EXTI_IRQHandler+0x70>)
 800d86c:	4413      	add	r3, r2
 800d86e:	617b      	str	r3, [r7, #20]
 800d870:	e004      	b.n	800d87c <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 800d872:	693b      	ldr	r3, [r7, #16]
 800d874:	011a      	lsls	r2, r3, #4
 800d876:	4b0d      	ldr	r3, [pc, #52]	@ (800d8ac <HAL_EXTI_IRQHandler+0x74>)
 800d878:	4413      	add	r3, r2
 800d87a:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 800d87c:	697b      	ldr	r3, [r7, #20]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	68fa      	ldr	r2, [r7, #12]
 800d882:	4013      	ands	r3, r2
 800d884:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 800d886:	68bb      	ldr	r3, [r7, #8]
 800d888:	2b00      	cmp	r3, #0
 800d88a:	d009      	beq.n	800d8a0 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 800d88c:	697b      	ldr	r3, [r7, #20]
 800d88e:	68fa      	ldr	r2, [r7, #12]
 800d890:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 800d892:	687b      	ldr	r3, [r7, #4]
 800d894:	685b      	ldr	r3, [r3, #4]
 800d896:	2b00      	cmp	r3, #0
 800d898:	d002      	beq.n	800d8a0 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 800d89a:	687b      	ldr	r3, [r7, #4]
 800d89c:	685b      	ldr	r3, [r3, #4]
 800d89e:	4798      	blx	r3
    }
  }
}
 800d8a0:	bf00      	nop
 800d8a2:	3718      	adds	r7, #24
 800d8a4:	46bd      	mov	sp, r7
 800d8a6:	bd80      	pop	{r7, pc}
 800d8a8:	58000088 	.word	0x58000088
 800d8ac:	580000c8 	.word	0x580000c8

0800d8b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800d8b0:	b480      	push	{r7}
 800d8b2:	b089      	sub	sp, #36	@ 0x24
 800d8b4:	af00      	add	r7, sp, #0
 800d8b6:	6078      	str	r0, [r7, #4]
 800d8b8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800d8ba:	2300      	movs	r3, #0
 800d8bc:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800d8be:	4b89      	ldr	r3, [pc, #548]	@ (800dae4 <HAL_GPIO_Init+0x234>)
 800d8c0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800d8c2:	e194      	b.n	800dbee <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800d8c4:	683b      	ldr	r3, [r7, #0]
 800d8c6:	681a      	ldr	r2, [r3, #0]
 800d8c8:	2101      	movs	r1, #1
 800d8ca:	69fb      	ldr	r3, [r7, #28]
 800d8cc:	fa01 f303 	lsl.w	r3, r1, r3
 800d8d0:	4013      	ands	r3, r2
 800d8d2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800d8d4:	693b      	ldr	r3, [r7, #16]
 800d8d6:	2b00      	cmp	r3, #0
 800d8d8:	f000 8186 	beq.w	800dbe8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d8dc:	683b      	ldr	r3, [r7, #0]
 800d8de:	685b      	ldr	r3, [r3, #4]
 800d8e0:	f003 0303 	and.w	r3, r3, #3
 800d8e4:	2b01      	cmp	r3, #1
 800d8e6:	d005      	beq.n	800d8f4 <HAL_GPIO_Init+0x44>
 800d8e8:	683b      	ldr	r3, [r7, #0]
 800d8ea:	685b      	ldr	r3, [r3, #4]
 800d8ec:	f003 0303 	and.w	r3, r3, #3
 800d8f0:	2b02      	cmp	r3, #2
 800d8f2:	d130      	bne.n	800d956 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d8f4:	687b      	ldr	r3, [r7, #4]
 800d8f6:	689b      	ldr	r3, [r3, #8]
 800d8f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800d8fa:	69fb      	ldr	r3, [r7, #28]
 800d8fc:	005b      	lsls	r3, r3, #1
 800d8fe:	2203      	movs	r2, #3
 800d900:	fa02 f303 	lsl.w	r3, r2, r3
 800d904:	43db      	mvns	r3, r3
 800d906:	69ba      	ldr	r2, [r7, #24]
 800d908:	4013      	ands	r3, r2
 800d90a:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d90c:	683b      	ldr	r3, [r7, #0]
 800d90e:	68da      	ldr	r2, [r3, #12]
 800d910:	69fb      	ldr	r3, [r7, #28]
 800d912:	005b      	lsls	r3, r3, #1
 800d914:	fa02 f303 	lsl.w	r3, r2, r3
 800d918:	69ba      	ldr	r2, [r7, #24]
 800d91a:	4313      	orrs	r3, r2
 800d91c:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	69ba      	ldr	r2, [r7, #24]
 800d922:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d924:	687b      	ldr	r3, [r7, #4]
 800d926:	685b      	ldr	r3, [r3, #4]
 800d928:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800d92a:	2201      	movs	r2, #1
 800d92c:	69fb      	ldr	r3, [r7, #28]
 800d92e:	fa02 f303 	lsl.w	r3, r2, r3
 800d932:	43db      	mvns	r3, r3
 800d934:	69ba      	ldr	r2, [r7, #24]
 800d936:	4013      	ands	r3, r2
 800d938:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d93a:	683b      	ldr	r3, [r7, #0]
 800d93c:	685b      	ldr	r3, [r3, #4]
 800d93e:	091b      	lsrs	r3, r3, #4
 800d940:	f003 0201 	and.w	r2, r3, #1
 800d944:	69fb      	ldr	r3, [r7, #28]
 800d946:	fa02 f303 	lsl.w	r3, r2, r3
 800d94a:	69ba      	ldr	r2, [r7, #24]
 800d94c:	4313      	orrs	r3, r2
 800d94e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800d950:	687b      	ldr	r3, [r7, #4]
 800d952:	69ba      	ldr	r2, [r7, #24]
 800d954:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d956:	683b      	ldr	r3, [r7, #0]
 800d958:	685b      	ldr	r3, [r3, #4]
 800d95a:	f003 0303 	and.w	r3, r3, #3
 800d95e:	2b03      	cmp	r3, #3
 800d960:	d017      	beq.n	800d992 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	68db      	ldr	r3, [r3, #12]
 800d966:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d968:	69fb      	ldr	r3, [r7, #28]
 800d96a:	005b      	lsls	r3, r3, #1
 800d96c:	2203      	movs	r2, #3
 800d96e:	fa02 f303 	lsl.w	r3, r2, r3
 800d972:	43db      	mvns	r3, r3
 800d974:	69ba      	ldr	r2, [r7, #24]
 800d976:	4013      	ands	r3, r2
 800d978:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d97a:	683b      	ldr	r3, [r7, #0]
 800d97c:	689a      	ldr	r2, [r3, #8]
 800d97e:	69fb      	ldr	r3, [r7, #28]
 800d980:	005b      	lsls	r3, r3, #1
 800d982:	fa02 f303 	lsl.w	r3, r2, r3
 800d986:	69ba      	ldr	r2, [r7, #24]
 800d988:	4313      	orrs	r3, r2
 800d98a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800d98c:	687b      	ldr	r3, [r7, #4]
 800d98e:	69ba      	ldr	r2, [r7, #24]
 800d990:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d992:	683b      	ldr	r3, [r7, #0]
 800d994:	685b      	ldr	r3, [r3, #4]
 800d996:	f003 0303 	and.w	r3, r3, #3
 800d99a:	2b02      	cmp	r3, #2
 800d99c:	d123      	bne.n	800d9e6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d99e:	69fb      	ldr	r3, [r7, #28]
 800d9a0:	08da      	lsrs	r2, r3, #3
 800d9a2:	687b      	ldr	r3, [r7, #4]
 800d9a4:	3208      	adds	r2, #8
 800d9a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800d9aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800d9ac:	69fb      	ldr	r3, [r7, #28]
 800d9ae:	f003 0307 	and.w	r3, r3, #7
 800d9b2:	009b      	lsls	r3, r3, #2
 800d9b4:	220f      	movs	r2, #15
 800d9b6:	fa02 f303 	lsl.w	r3, r2, r3
 800d9ba:	43db      	mvns	r3, r3
 800d9bc:	69ba      	ldr	r2, [r7, #24]
 800d9be:	4013      	ands	r3, r2
 800d9c0:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800d9c2:	683b      	ldr	r3, [r7, #0]
 800d9c4:	691a      	ldr	r2, [r3, #16]
 800d9c6:	69fb      	ldr	r3, [r7, #28]
 800d9c8:	f003 0307 	and.w	r3, r3, #7
 800d9cc:	009b      	lsls	r3, r3, #2
 800d9ce:	fa02 f303 	lsl.w	r3, r2, r3
 800d9d2:	69ba      	ldr	r2, [r7, #24]
 800d9d4:	4313      	orrs	r3, r2
 800d9d6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800d9d8:	69fb      	ldr	r3, [r7, #28]
 800d9da:	08da      	lsrs	r2, r3, #3
 800d9dc:	687b      	ldr	r3, [r7, #4]
 800d9de:	3208      	adds	r2, #8
 800d9e0:	69b9      	ldr	r1, [r7, #24]
 800d9e2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d9e6:	687b      	ldr	r3, [r7, #4]
 800d9e8:	681b      	ldr	r3, [r3, #0]
 800d9ea:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d9ec:	69fb      	ldr	r3, [r7, #28]
 800d9ee:	005b      	lsls	r3, r3, #1
 800d9f0:	2203      	movs	r2, #3
 800d9f2:	fa02 f303 	lsl.w	r3, r2, r3
 800d9f6:	43db      	mvns	r3, r3
 800d9f8:	69ba      	ldr	r2, [r7, #24]
 800d9fa:	4013      	ands	r3, r2
 800d9fc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d9fe:	683b      	ldr	r3, [r7, #0]
 800da00:	685b      	ldr	r3, [r3, #4]
 800da02:	f003 0203 	and.w	r2, r3, #3
 800da06:	69fb      	ldr	r3, [r7, #28]
 800da08:	005b      	lsls	r3, r3, #1
 800da0a:	fa02 f303 	lsl.w	r3, r2, r3
 800da0e:	69ba      	ldr	r2, [r7, #24]
 800da10:	4313      	orrs	r3, r2
 800da12:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	69ba      	ldr	r2, [r7, #24]
 800da18:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800da1a:	683b      	ldr	r3, [r7, #0]
 800da1c:	685b      	ldr	r3, [r3, #4]
 800da1e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800da22:	2b00      	cmp	r3, #0
 800da24:	f000 80e0 	beq.w	800dbe8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800da28:	4b2f      	ldr	r3, [pc, #188]	@ (800dae8 <HAL_GPIO_Init+0x238>)
 800da2a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da2e:	4a2e      	ldr	r2, [pc, #184]	@ (800dae8 <HAL_GPIO_Init+0x238>)
 800da30:	f043 0302 	orr.w	r3, r3, #2
 800da34:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800da38:	4b2b      	ldr	r3, [pc, #172]	@ (800dae8 <HAL_GPIO_Init+0x238>)
 800da3a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800da3e:	f003 0302 	and.w	r3, r3, #2
 800da42:	60fb      	str	r3, [r7, #12]
 800da44:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800da46:	4a29      	ldr	r2, [pc, #164]	@ (800daec <HAL_GPIO_Init+0x23c>)
 800da48:	69fb      	ldr	r3, [r7, #28]
 800da4a:	089b      	lsrs	r3, r3, #2
 800da4c:	3302      	adds	r3, #2
 800da4e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800da52:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800da54:	69fb      	ldr	r3, [r7, #28]
 800da56:	f003 0303 	and.w	r3, r3, #3
 800da5a:	009b      	lsls	r3, r3, #2
 800da5c:	220f      	movs	r2, #15
 800da5e:	fa02 f303 	lsl.w	r3, r2, r3
 800da62:	43db      	mvns	r3, r3
 800da64:	69ba      	ldr	r2, [r7, #24]
 800da66:	4013      	ands	r3, r2
 800da68:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	4a20      	ldr	r2, [pc, #128]	@ (800daf0 <HAL_GPIO_Init+0x240>)
 800da6e:	4293      	cmp	r3, r2
 800da70:	d052      	beq.n	800db18 <HAL_GPIO_Init+0x268>
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	4a1f      	ldr	r2, [pc, #124]	@ (800daf4 <HAL_GPIO_Init+0x244>)
 800da76:	4293      	cmp	r3, r2
 800da78:	d031      	beq.n	800dade <HAL_GPIO_Init+0x22e>
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	4a1e      	ldr	r2, [pc, #120]	@ (800daf8 <HAL_GPIO_Init+0x248>)
 800da7e:	4293      	cmp	r3, r2
 800da80:	d02b      	beq.n	800dada <HAL_GPIO_Init+0x22a>
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	4a1d      	ldr	r2, [pc, #116]	@ (800dafc <HAL_GPIO_Init+0x24c>)
 800da86:	4293      	cmp	r3, r2
 800da88:	d025      	beq.n	800dad6 <HAL_GPIO_Init+0x226>
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	4a1c      	ldr	r2, [pc, #112]	@ (800db00 <HAL_GPIO_Init+0x250>)
 800da8e:	4293      	cmp	r3, r2
 800da90:	d01f      	beq.n	800dad2 <HAL_GPIO_Init+0x222>
 800da92:	687b      	ldr	r3, [r7, #4]
 800da94:	4a1b      	ldr	r2, [pc, #108]	@ (800db04 <HAL_GPIO_Init+0x254>)
 800da96:	4293      	cmp	r3, r2
 800da98:	d019      	beq.n	800dace <HAL_GPIO_Init+0x21e>
 800da9a:	687b      	ldr	r3, [r7, #4]
 800da9c:	4a1a      	ldr	r2, [pc, #104]	@ (800db08 <HAL_GPIO_Init+0x258>)
 800da9e:	4293      	cmp	r3, r2
 800daa0:	d013      	beq.n	800daca <HAL_GPIO_Init+0x21a>
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	4a19      	ldr	r2, [pc, #100]	@ (800db0c <HAL_GPIO_Init+0x25c>)
 800daa6:	4293      	cmp	r3, r2
 800daa8:	d00d      	beq.n	800dac6 <HAL_GPIO_Init+0x216>
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	4a18      	ldr	r2, [pc, #96]	@ (800db10 <HAL_GPIO_Init+0x260>)
 800daae:	4293      	cmp	r3, r2
 800dab0:	d007      	beq.n	800dac2 <HAL_GPIO_Init+0x212>
 800dab2:	687b      	ldr	r3, [r7, #4]
 800dab4:	4a17      	ldr	r2, [pc, #92]	@ (800db14 <HAL_GPIO_Init+0x264>)
 800dab6:	4293      	cmp	r3, r2
 800dab8:	d101      	bne.n	800dabe <HAL_GPIO_Init+0x20e>
 800daba:	2309      	movs	r3, #9
 800dabc:	e02d      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dabe:	230a      	movs	r3, #10
 800dac0:	e02b      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dac2:	2308      	movs	r3, #8
 800dac4:	e029      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dac6:	2307      	movs	r3, #7
 800dac8:	e027      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800daca:	2306      	movs	r3, #6
 800dacc:	e025      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dace:	2305      	movs	r3, #5
 800dad0:	e023      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dad2:	2304      	movs	r3, #4
 800dad4:	e021      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dad6:	2303      	movs	r3, #3
 800dad8:	e01f      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dada:	2302      	movs	r3, #2
 800dadc:	e01d      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dade:	2301      	movs	r3, #1
 800dae0:	e01b      	b.n	800db1a <HAL_GPIO_Init+0x26a>
 800dae2:	bf00      	nop
 800dae4:	58000080 	.word	0x58000080
 800dae8:	58024400 	.word	0x58024400
 800daec:	58000400 	.word	0x58000400
 800daf0:	58020000 	.word	0x58020000
 800daf4:	58020400 	.word	0x58020400
 800daf8:	58020800 	.word	0x58020800
 800dafc:	58020c00 	.word	0x58020c00
 800db00:	58021000 	.word	0x58021000
 800db04:	58021400 	.word	0x58021400
 800db08:	58021800 	.word	0x58021800
 800db0c:	58021c00 	.word	0x58021c00
 800db10:	58022000 	.word	0x58022000
 800db14:	58022400 	.word	0x58022400
 800db18:	2300      	movs	r3, #0
 800db1a:	69fa      	ldr	r2, [r7, #28]
 800db1c:	f002 0203 	and.w	r2, r2, #3
 800db20:	0092      	lsls	r2, r2, #2
 800db22:	4093      	lsls	r3, r2
 800db24:	69ba      	ldr	r2, [r7, #24]
 800db26:	4313      	orrs	r3, r2
 800db28:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800db2a:	4938      	ldr	r1, [pc, #224]	@ (800dc0c <HAL_GPIO_Init+0x35c>)
 800db2c:	69fb      	ldr	r3, [r7, #28]
 800db2e:	089b      	lsrs	r3, r3, #2
 800db30:	3302      	adds	r3, #2
 800db32:	69ba      	ldr	r2, [r7, #24]
 800db34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800db38:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db3c:	681b      	ldr	r3, [r3, #0]
 800db3e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800db40:	693b      	ldr	r3, [r7, #16]
 800db42:	43db      	mvns	r3, r3
 800db44:	69ba      	ldr	r2, [r7, #24]
 800db46:	4013      	ands	r3, r2
 800db48:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800db4a:	683b      	ldr	r3, [r7, #0]
 800db4c:	685b      	ldr	r3, [r3, #4]
 800db4e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800db52:	2b00      	cmp	r3, #0
 800db54:	d003      	beq.n	800db5e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800db56:	69ba      	ldr	r2, [r7, #24]
 800db58:	693b      	ldr	r3, [r7, #16]
 800db5a:	4313      	orrs	r3, r2
 800db5c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800db5e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800db62:	69bb      	ldr	r3, [r7, #24]
 800db64:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800db66:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800db6a:	685b      	ldr	r3, [r3, #4]
 800db6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800db6e:	693b      	ldr	r3, [r7, #16]
 800db70:	43db      	mvns	r3, r3
 800db72:	69ba      	ldr	r2, [r7, #24]
 800db74:	4013      	ands	r3, r2
 800db76:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800db78:	683b      	ldr	r3, [r7, #0]
 800db7a:	685b      	ldr	r3, [r3, #4]
 800db7c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800db80:	2b00      	cmp	r3, #0
 800db82:	d003      	beq.n	800db8c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800db84:	69ba      	ldr	r2, [r7, #24]
 800db86:	693b      	ldr	r3, [r7, #16]
 800db88:	4313      	orrs	r3, r2
 800db8a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800db8c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800db90:	69bb      	ldr	r3, [r7, #24]
 800db92:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800db94:	697b      	ldr	r3, [r7, #20]
 800db96:	685b      	ldr	r3, [r3, #4]
 800db98:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800db9a:	693b      	ldr	r3, [r7, #16]
 800db9c:	43db      	mvns	r3, r3
 800db9e:	69ba      	ldr	r2, [r7, #24]
 800dba0:	4013      	ands	r3, r2
 800dba2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800dba4:	683b      	ldr	r3, [r7, #0]
 800dba6:	685b      	ldr	r3, [r3, #4]
 800dba8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800dbac:	2b00      	cmp	r3, #0
 800dbae:	d003      	beq.n	800dbb8 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800dbb0:	69ba      	ldr	r2, [r7, #24]
 800dbb2:	693b      	ldr	r3, [r7, #16]
 800dbb4:	4313      	orrs	r3, r2
 800dbb6:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800dbb8:	697b      	ldr	r3, [r7, #20]
 800dbba:	69ba      	ldr	r2, [r7, #24]
 800dbbc:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800dbbe:	697b      	ldr	r3, [r7, #20]
 800dbc0:	681b      	ldr	r3, [r3, #0]
 800dbc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800dbc4:	693b      	ldr	r3, [r7, #16]
 800dbc6:	43db      	mvns	r3, r3
 800dbc8:	69ba      	ldr	r2, [r7, #24]
 800dbca:	4013      	ands	r3, r2
 800dbcc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	685b      	ldr	r3, [r3, #4]
 800dbd2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800dbd6:	2b00      	cmp	r3, #0
 800dbd8:	d003      	beq.n	800dbe2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800dbda:	69ba      	ldr	r2, [r7, #24]
 800dbdc:	693b      	ldr	r3, [r7, #16]
 800dbde:	4313      	orrs	r3, r2
 800dbe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800dbe2:	697b      	ldr	r3, [r7, #20]
 800dbe4:	69ba      	ldr	r2, [r7, #24]
 800dbe6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800dbe8:	69fb      	ldr	r3, [r7, #28]
 800dbea:	3301      	adds	r3, #1
 800dbec:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800dbee:	683b      	ldr	r3, [r7, #0]
 800dbf0:	681a      	ldr	r2, [r3, #0]
 800dbf2:	69fb      	ldr	r3, [r7, #28]
 800dbf4:	fa22 f303 	lsr.w	r3, r2, r3
 800dbf8:	2b00      	cmp	r3, #0
 800dbfa:	f47f ae63 	bne.w	800d8c4 <HAL_GPIO_Init+0x14>
  }
}
 800dbfe:	bf00      	nop
 800dc00:	bf00      	nop
 800dc02:	3724      	adds	r7, #36	@ 0x24
 800dc04:	46bd      	mov	sp, r7
 800dc06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dc0a:	4770      	bx	lr
 800dc0c:	58000400 	.word	0x58000400

0800dc10 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800dc10:	b480      	push	{r7}
 800dc12:	b087      	sub	sp, #28
 800dc14:	af00      	add	r7, sp, #0
 800dc16:	6078      	str	r0, [r7, #4]
 800dc18:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800dc1e:	4b75      	ldr	r3, [pc, #468]	@ (800ddf4 <HAL_GPIO_DeInit+0x1e4>)
 800dc20:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800dc22:	e0d9      	b.n	800ddd8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800dc24:	2201      	movs	r2, #1
 800dc26:	697b      	ldr	r3, [r7, #20]
 800dc28:	fa02 f303 	lsl.w	r3, r2, r3
 800dc2c:	683a      	ldr	r2, [r7, #0]
 800dc2e:	4013      	ands	r3, r2
 800dc30:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800dc32:	68fb      	ldr	r3, [r7, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	f000 80cc 	beq.w	800ddd2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800dc3a:	4a6f      	ldr	r2, [pc, #444]	@ (800ddf8 <HAL_GPIO_DeInit+0x1e8>)
 800dc3c:	697b      	ldr	r3, [r7, #20]
 800dc3e:	089b      	lsrs	r3, r3, #2
 800dc40:	3302      	adds	r3, #2
 800dc42:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dc46:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	f003 0303 	and.w	r3, r3, #3
 800dc4e:	009b      	lsls	r3, r3, #2
 800dc50:	220f      	movs	r2, #15
 800dc52:	fa02 f303 	lsl.w	r3, r2, r3
 800dc56:	68ba      	ldr	r2, [r7, #8]
 800dc58:	4013      	ands	r3, r2
 800dc5a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800dc5c:	687b      	ldr	r3, [r7, #4]
 800dc5e:	4a67      	ldr	r2, [pc, #412]	@ (800ddfc <HAL_GPIO_DeInit+0x1ec>)
 800dc60:	4293      	cmp	r3, r2
 800dc62:	d037      	beq.n	800dcd4 <HAL_GPIO_DeInit+0xc4>
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	4a66      	ldr	r2, [pc, #408]	@ (800de00 <HAL_GPIO_DeInit+0x1f0>)
 800dc68:	4293      	cmp	r3, r2
 800dc6a:	d031      	beq.n	800dcd0 <HAL_GPIO_DeInit+0xc0>
 800dc6c:	687b      	ldr	r3, [r7, #4]
 800dc6e:	4a65      	ldr	r2, [pc, #404]	@ (800de04 <HAL_GPIO_DeInit+0x1f4>)
 800dc70:	4293      	cmp	r3, r2
 800dc72:	d02b      	beq.n	800dccc <HAL_GPIO_DeInit+0xbc>
 800dc74:	687b      	ldr	r3, [r7, #4]
 800dc76:	4a64      	ldr	r2, [pc, #400]	@ (800de08 <HAL_GPIO_DeInit+0x1f8>)
 800dc78:	4293      	cmp	r3, r2
 800dc7a:	d025      	beq.n	800dcc8 <HAL_GPIO_DeInit+0xb8>
 800dc7c:	687b      	ldr	r3, [r7, #4]
 800dc7e:	4a63      	ldr	r2, [pc, #396]	@ (800de0c <HAL_GPIO_DeInit+0x1fc>)
 800dc80:	4293      	cmp	r3, r2
 800dc82:	d01f      	beq.n	800dcc4 <HAL_GPIO_DeInit+0xb4>
 800dc84:	687b      	ldr	r3, [r7, #4]
 800dc86:	4a62      	ldr	r2, [pc, #392]	@ (800de10 <HAL_GPIO_DeInit+0x200>)
 800dc88:	4293      	cmp	r3, r2
 800dc8a:	d019      	beq.n	800dcc0 <HAL_GPIO_DeInit+0xb0>
 800dc8c:	687b      	ldr	r3, [r7, #4]
 800dc8e:	4a61      	ldr	r2, [pc, #388]	@ (800de14 <HAL_GPIO_DeInit+0x204>)
 800dc90:	4293      	cmp	r3, r2
 800dc92:	d013      	beq.n	800dcbc <HAL_GPIO_DeInit+0xac>
 800dc94:	687b      	ldr	r3, [r7, #4]
 800dc96:	4a60      	ldr	r2, [pc, #384]	@ (800de18 <HAL_GPIO_DeInit+0x208>)
 800dc98:	4293      	cmp	r3, r2
 800dc9a:	d00d      	beq.n	800dcb8 <HAL_GPIO_DeInit+0xa8>
 800dc9c:	687b      	ldr	r3, [r7, #4]
 800dc9e:	4a5f      	ldr	r2, [pc, #380]	@ (800de1c <HAL_GPIO_DeInit+0x20c>)
 800dca0:	4293      	cmp	r3, r2
 800dca2:	d007      	beq.n	800dcb4 <HAL_GPIO_DeInit+0xa4>
 800dca4:	687b      	ldr	r3, [r7, #4]
 800dca6:	4a5e      	ldr	r2, [pc, #376]	@ (800de20 <HAL_GPIO_DeInit+0x210>)
 800dca8:	4293      	cmp	r3, r2
 800dcaa:	d101      	bne.n	800dcb0 <HAL_GPIO_DeInit+0xa0>
 800dcac:	2309      	movs	r3, #9
 800dcae:	e012      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcb0:	230a      	movs	r3, #10
 800dcb2:	e010      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcb4:	2308      	movs	r3, #8
 800dcb6:	e00e      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcb8:	2307      	movs	r3, #7
 800dcba:	e00c      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcbc:	2306      	movs	r3, #6
 800dcbe:	e00a      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcc0:	2305      	movs	r3, #5
 800dcc2:	e008      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcc4:	2304      	movs	r3, #4
 800dcc6:	e006      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcc8:	2303      	movs	r3, #3
 800dcca:	e004      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dccc:	2302      	movs	r3, #2
 800dcce:	e002      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcd0:	2301      	movs	r3, #1
 800dcd2:	e000      	b.n	800dcd6 <HAL_GPIO_DeInit+0xc6>
 800dcd4:	2300      	movs	r3, #0
 800dcd6:	697a      	ldr	r2, [r7, #20]
 800dcd8:	f002 0203 	and.w	r2, r2, #3
 800dcdc:	0092      	lsls	r2, r2, #2
 800dcde:	4093      	lsls	r3, r2
 800dce0:	68ba      	ldr	r2, [r7, #8]
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d136      	bne.n	800dd54 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800dce6:	693b      	ldr	r3, [r7, #16]
 800dce8:	681a      	ldr	r2, [r3, #0]
 800dcea:	68fb      	ldr	r3, [r7, #12]
 800dcec:	43db      	mvns	r3, r3
 800dcee:	401a      	ands	r2, r3
 800dcf0:	693b      	ldr	r3, [r7, #16]
 800dcf2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800dcf4:	693b      	ldr	r3, [r7, #16]
 800dcf6:	685a      	ldr	r2, [r3, #4]
 800dcf8:	68fb      	ldr	r3, [r7, #12]
 800dcfa:	43db      	mvns	r3, r3
 800dcfc:	401a      	ands	r2, r3
 800dcfe:	693b      	ldr	r3, [r7, #16]
 800dd00:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800dd02:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd06:	685a      	ldr	r2, [r3, #4]
 800dd08:	68fb      	ldr	r3, [r7, #12]
 800dd0a:	43db      	mvns	r3, r3
 800dd0c:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd10:	4013      	ands	r3, r2
 800dd12:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800dd14:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800dd18:	681a      	ldr	r2, [r3, #0]
 800dd1a:	68fb      	ldr	r3, [r7, #12]
 800dd1c:	43db      	mvns	r3, r3
 800dd1e:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800dd22:	4013      	ands	r3, r2
 800dd24:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800dd26:	697b      	ldr	r3, [r7, #20]
 800dd28:	f003 0303 	and.w	r3, r3, #3
 800dd2c:	009b      	lsls	r3, r3, #2
 800dd2e:	220f      	movs	r2, #15
 800dd30:	fa02 f303 	lsl.w	r3, r2, r3
 800dd34:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800dd36:	4a30      	ldr	r2, [pc, #192]	@ (800ddf8 <HAL_GPIO_DeInit+0x1e8>)
 800dd38:	697b      	ldr	r3, [r7, #20]
 800dd3a:	089b      	lsrs	r3, r3, #2
 800dd3c:	3302      	adds	r3, #2
 800dd3e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800dd42:	68bb      	ldr	r3, [r7, #8]
 800dd44:	43da      	mvns	r2, r3
 800dd46:	482c      	ldr	r0, [pc, #176]	@ (800ddf8 <HAL_GPIO_DeInit+0x1e8>)
 800dd48:	697b      	ldr	r3, [r7, #20]
 800dd4a:	089b      	lsrs	r3, r3, #2
 800dd4c:	400a      	ands	r2, r1
 800dd4e:	3302      	adds	r3, #2
 800dd50:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800dd54:	687b      	ldr	r3, [r7, #4]
 800dd56:	681a      	ldr	r2, [r3, #0]
 800dd58:	697b      	ldr	r3, [r7, #20]
 800dd5a:	005b      	lsls	r3, r3, #1
 800dd5c:	2103      	movs	r1, #3
 800dd5e:	fa01 f303 	lsl.w	r3, r1, r3
 800dd62:	431a      	orrs	r2, r3
 800dd64:	687b      	ldr	r3, [r7, #4]
 800dd66:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800dd68:	697b      	ldr	r3, [r7, #20]
 800dd6a:	08da      	lsrs	r2, r3, #3
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	3208      	adds	r2, #8
 800dd70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd74:	697b      	ldr	r3, [r7, #20]
 800dd76:	f003 0307 	and.w	r3, r3, #7
 800dd7a:	009b      	lsls	r3, r3, #2
 800dd7c:	220f      	movs	r2, #15
 800dd7e:	fa02 f303 	lsl.w	r3, r2, r3
 800dd82:	43db      	mvns	r3, r3
 800dd84:	697a      	ldr	r2, [r7, #20]
 800dd86:	08d2      	lsrs	r2, r2, #3
 800dd88:	4019      	ands	r1, r3
 800dd8a:	687b      	ldr	r3, [r7, #4]
 800dd8c:	3208      	adds	r2, #8
 800dd8e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	68da      	ldr	r2, [r3, #12]
 800dd96:	697b      	ldr	r3, [r7, #20]
 800dd98:	005b      	lsls	r3, r3, #1
 800dd9a:	2103      	movs	r1, #3
 800dd9c:	fa01 f303 	lsl.w	r3, r1, r3
 800dda0:	43db      	mvns	r3, r3
 800dda2:	401a      	ands	r2, r3
 800dda4:	687b      	ldr	r3, [r7, #4]
 800dda6:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800dda8:	687b      	ldr	r3, [r7, #4]
 800ddaa:	685a      	ldr	r2, [r3, #4]
 800ddac:	2101      	movs	r1, #1
 800ddae:	697b      	ldr	r3, [r7, #20]
 800ddb0:	fa01 f303 	lsl.w	r3, r1, r3
 800ddb4:	43db      	mvns	r3, r3
 800ddb6:	401a      	ands	r2, r3
 800ddb8:	687b      	ldr	r3, [r7, #4]
 800ddba:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ddbc:	687b      	ldr	r3, [r7, #4]
 800ddbe:	689a      	ldr	r2, [r3, #8]
 800ddc0:	697b      	ldr	r3, [r7, #20]
 800ddc2:	005b      	lsls	r3, r3, #1
 800ddc4:	2103      	movs	r1, #3
 800ddc6:	fa01 f303 	lsl.w	r3, r1, r3
 800ddca:	43db      	mvns	r3, r3
 800ddcc:	401a      	ands	r2, r3
 800ddce:	687b      	ldr	r3, [r7, #4]
 800ddd0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800ddd2:	697b      	ldr	r3, [r7, #20]
 800ddd4:	3301      	adds	r3, #1
 800ddd6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800ddd8:	683a      	ldr	r2, [r7, #0]
 800ddda:	697b      	ldr	r3, [r7, #20]
 800dddc:	fa22 f303 	lsr.w	r3, r2, r3
 800dde0:	2b00      	cmp	r3, #0
 800dde2:	f47f af1f 	bne.w	800dc24 <HAL_GPIO_DeInit+0x14>
  }
}
 800dde6:	bf00      	nop
 800dde8:	bf00      	nop
 800ddea:	371c      	adds	r7, #28
 800ddec:	46bd      	mov	sp, r7
 800ddee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddf2:	4770      	bx	lr
 800ddf4:	58000080 	.word	0x58000080
 800ddf8:	58000400 	.word	0x58000400
 800ddfc:	58020000 	.word	0x58020000
 800de00:	58020400 	.word	0x58020400
 800de04:	58020800 	.word	0x58020800
 800de08:	58020c00 	.word	0x58020c00
 800de0c:	58021000 	.word	0x58021000
 800de10:	58021400 	.word	0x58021400
 800de14:	58021800 	.word	0x58021800
 800de18:	58021c00 	.word	0x58021c00
 800de1c:	58022000 	.word	0x58022000
 800de20:	58022400 	.word	0x58022400

0800de24 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800de24:	b480      	push	{r7}
 800de26:	b085      	sub	sp, #20
 800de28:	af00      	add	r7, sp, #0
 800de2a:	6078      	str	r0, [r7, #4]
 800de2c:	460b      	mov	r3, r1
 800de2e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 800de30:	687b      	ldr	r3, [r7, #4]
 800de32:	691a      	ldr	r2, [r3, #16]
 800de34:	887b      	ldrh	r3, [r7, #2]
 800de36:	4013      	ands	r3, r2
 800de38:	2b00      	cmp	r3, #0
 800de3a:	d002      	beq.n	800de42 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800de3c:	2301      	movs	r3, #1
 800de3e:	73fb      	strb	r3, [r7, #15]
 800de40:	e001      	b.n	800de46 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800de42:	2300      	movs	r3, #0
 800de44:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800de46:	7bfb      	ldrb	r3, [r7, #15]
}
 800de48:	4618      	mov	r0, r3
 800de4a:	3714      	adds	r7, #20
 800de4c:	46bd      	mov	sp, r7
 800de4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de52:	4770      	bx	lr

0800de54 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800de54:	b480      	push	{r7}
 800de56:	b083      	sub	sp, #12
 800de58:	af00      	add	r7, sp, #0
 800de5a:	6078      	str	r0, [r7, #4]
 800de5c:	460b      	mov	r3, r1
 800de5e:	807b      	strh	r3, [r7, #2]
 800de60:	4613      	mov	r3, r2
 800de62:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800de64:	787b      	ldrb	r3, [r7, #1]
 800de66:	2b00      	cmp	r3, #0
 800de68:	d003      	beq.n	800de72 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800de6a:	887a      	ldrh	r2, [r7, #2]
 800de6c:	687b      	ldr	r3, [r7, #4]
 800de6e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 800de70:	e003      	b.n	800de7a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 800de72:	887b      	ldrh	r3, [r7, #2]
 800de74:	041a      	lsls	r2, r3, #16
 800de76:	687b      	ldr	r3, [r7, #4]
 800de78:	619a      	str	r2, [r3, #24]
}
 800de7a:	bf00      	nop
 800de7c:	370c      	adds	r7, #12
 800de7e:	46bd      	mov	sp, r7
 800de80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de84:	4770      	bx	lr
	...

0800de88 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800de88:	b480      	push	{r7}
 800de8a:	b083      	sub	sp, #12
 800de8c:	af00      	add	r7, sp, #0
 800de8e:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800de90:	4a08      	ldr	r2, [pc, #32]	@ (800deb4 <HAL_HSEM_FastTake+0x2c>)
 800de92:	687b      	ldr	r3, [r7, #4]
 800de94:	3320      	adds	r3, #32
 800de96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800de9a:	4a07      	ldr	r2, [pc, #28]	@ (800deb8 <HAL_HSEM_FastTake+0x30>)
 800de9c:	4293      	cmp	r3, r2
 800de9e:	d101      	bne.n	800dea4 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800dea0:	2300      	movs	r3, #0
 800dea2:	e000      	b.n	800dea6 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800dea4:	2301      	movs	r3, #1
}
 800dea6:	4618      	mov	r0, r3
 800dea8:	370c      	adds	r7, #12
 800deaa:	46bd      	mov	sp, r7
 800deac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deb0:	4770      	bx	lr
 800deb2:	bf00      	nop
 800deb4:	58026400 	.word	0x58026400
 800deb8:	80000300 	.word	0x80000300

0800debc <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800debc:	b480      	push	{r7}
 800debe:	b083      	sub	sp, #12
 800dec0:	af00      	add	r7, sp, #0
 800dec2:	6078      	str	r0, [r7, #4]
 800dec4:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800dec6:	4906      	ldr	r1, [pc, #24]	@ (800dee0 <HAL_HSEM_Release+0x24>)
 800dec8:	683b      	ldr	r3, [r7, #0]
 800deca:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800dece:	687b      	ldr	r3, [r7, #4]
 800ded0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800ded4:	bf00      	nop
 800ded6:	370c      	adds	r7, #12
 800ded8:	46bd      	mov	sp, r7
 800deda:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dede:	4770      	bx	lr
 800dee0:	58026400 	.word	0x58026400

0800dee4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800dee4:	b580      	push	{r7, lr}
 800dee6:	b082      	sub	sp, #8
 800dee8:	af00      	add	r7, sp, #0
 800deea:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	2b00      	cmp	r3, #0
 800def0:	d101      	bne.n	800def6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800def2:	2301      	movs	r3, #1
 800def4:	e08b      	b.n	800e00e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800def6:	687b      	ldr	r3, [r7, #4]
 800def8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800defc:	b2db      	uxtb	r3, r3
 800defe:	2b00      	cmp	r3, #0
 800df00:	d106      	bne.n	800df10 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800df02:	687b      	ldr	r3, [r7, #4]
 800df04:	2200      	movs	r2, #0
 800df06:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800df0a:	6878      	ldr	r0, [r7, #4]
 800df0c:	f000 f8b5 	bl	800e07a <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800df10:	687b      	ldr	r3, [r7, #4]
 800df12:	2224      	movs	r2, #36	@ 0x24
 800df14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800df18:	687b      	ldr	r3, [r7, #4]
 800df1a:	681b      	ldr	r3, [r3, #0]
 800df1c:	681a      	ldr	r2, [r3, #0]
 800df1e:	687b      	ldr	r3, [r7, #4]
 800df20:	681b      	ldr	r3, [r3, #0]
 800df22:	f022 0201 	bic.w	r2, r2, #1
 800df26:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	685a      	ldr	r2, [r3, #4]
 800df2c:	687b      	ldr	r3, [r7, #4]
 800df2e:	681b      	ldr	r3, [r3, #0]
 800df30:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800df34:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800df36:	687b      	ldr	r3, [r7, #4]
 800df38:	681b      	ldr	r3, [r3, #0]
 800df3a:	689a      	ldr	r2, [r3, #8]
 800df3c:	687b      	ldr	r3, [r7, #4]
 800df3e:	681b      	ldr	r3, [r3, #0]
 800df40:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800df44:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800df46:	687b      	ldr	r3, [r7, #4]
 800df48:	68db      	ldr	r3, [r3, #12]
 800df4a:	2b01      	cmp	r3, #1
 800df4c:	d107      	bne.n	800df5e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800df4e:	687b      	ldr	r3, [r7, #4]
 800df50:	689a      	ldr	r2, [r3, #8]
 800df52:	687b      	ldr	r3, [r7, #4]
 800df54:	681b      	ldr	r3, [r3, #0]
 800df56:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800df5a:	609a      	str	r2, [r3, #8]
 800df5c:	e006      	b.n	800df6c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800df5e:	687b      	ldr	r3, [r7, #4]
 800df60:	689a      	ldr	r2, [r3, #8]
 800df62:	687b      	ldr	r3, [r7, #4]
 800df64:	681b      	ldr	r3, [r3, #0]
 800df66:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800df6a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800df6c:	687b      	ldr	r3, [r7, #4]
 800df6e:	68db      	ldr	r3, [r3, #12]
 800df70:	2b02      	cmp	r3, #2
 800df72:	d108      	bne.n	800df86 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800df74:	687b      	ldr	r3, [r7, #4]
 800df76:	681b      	ldr	r3, [r3, #0]
 800df78:	685a      	ldr	r2, [r3, #4]
 800df7a:	687b      	ldr	r3, [r7, #4]
 800df7c:	681b      	ldr	r3, [r3, #0]
 800df7e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800df82:	605a      	str	r2, [r3, #4]
 800df84:	e007      	b.n	800df96 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800df86:	687b      	ldr	r3, [r7, #4]
 800df88:	681b      	ldr	r3, [r3, #0]
 800df8a:	685a      	ldr	r2, [r3, #4]
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800df94:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800df96:	687b      	ldr	r3, [r7, #4]
 800df98:	681b      	ldr	r3, [r3, #0]
 800df9a:	6859      	ldr	r1, [r3, #4]
 800df9c:	687b      	ldr	r3, [r7, #4]
 800df9e:	681a      	ldr	r2, [r3, #0]
 800dfa0:	4b1d      	ldr	r3, [pc, #116]	@ (800e018 <HAL_I2C_Init+0x134>)
 800dfa2:	430b      	orrs	r3, r1
 800dfa4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800dfa6:	687b      	ldr	r3, [r7, #4]
 800dfa8:	681b      	ldr	r3, [r3, #0]
 800dfaa:	68da      	ldr	r2, [r3, #12]
 800dfac:	687b      	ldr	r3, [r7, #4]
 800dfae:	681b      	ldr	r3, [r3, #0]
 800dfb0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800dfb4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dfb6:	687b      	ldr	r3, [r7, #4]
 800dfb8:	691a      	ldr	r2, [r3, #16]
 800dfba:	687b      	ldr	r3, [r7, #4]
 800dfbc:	695b      	ldr	r3, [r3, #20]
 800dfbe:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800dfc2:	687b      	ldr	r3, [r7, #4]
 800dfc4:	699b      	ldr	r3, [r3, #24]
 800dfc6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	430a      	orrs	r2, r1
 800dfce:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800dfd0:	687b      	ldr	r3, [r7, #4]
 800dfd2:	69d9      	ldr	r1, [r3, #28]
 800dfd4:	687b      	ldr	r3, [r7, #4]
 800dfd6:	6a1a      	ldr	r2, [r3, #32]
 800dfd8:	687b      	ldr	r3, [r7, #4]
 800dfda:	681b      	ldr	r3, [r3, #0]
 800dfdc:	430a      	orrs	r2, r1
 800dfde:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800dfe0:	687b      	ldr	r3, [r7, #4]
 800dfe2:	681b      	ldr	r3, [r3, #0]
 800dfe4:	681a      	ldr	r2, [r3, #0]
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	681b      	ldr	r3, [r3, #0]
 800dfea:	f042 0201 	orr.w	r2, r2, #1
 800dfee:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	2200      	movs	r2, #0
 800dff4:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800dff6:	687b      	ldr	r3, [r7, #4]
 800dff8:	2220      	movs	r2, #32
 800dffa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e004:	687b      	ldr	r3, [r7, #4]
 800e006:	2200      	movs	r2, #0
 800e008:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800e00c:	2300      	movs	r3, #0
}
 800e00e:	4618      	mov	r0, r3
 800e010:	3708      	adds	r7, #8
 800e012:	46bd      	mov	sp, r7
 800e014:	bd80      	pop	{r7, pc}
 800e016:	bf00      	nop
 800e018:	02008000 	.word	0x02008000

0800e01c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800e01c:	b580      	push	{r7, lr}
 800e01e:	b082      	sub	sp, #8
 800e020:	af00      	add	r7, sp, #0
 800e022:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	2b00      	cmp	r3, #0
 800e028:	d101      	bne.n	800e02e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800e02a:	2301      	movs	r3, #1
 800e02c:	e021      	b.n	800e072 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	2224      	movs	r2, #36	@ 0x24
 800e032:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	681b      	ldr	r3, [r3, #0]
 800e03a:	681a      	ldr	r2, [r3, #0]
 800e03c:	687b      	ldr	r3, [r7, #4]
 800e03e:	681b      	ldr	r3, [r3, #0]
 800e040:	f022 0201 	bic.w	r2, r2, #1
 800e044:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800e046:	6878      	ldr	r0, [r7, #4]
 800e048:	f000 f821 	bl	800e08e <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e04c:	687b      	ldr	r3, [r7, #4]
 800e04e:	2200      	movs	r2, #0
 800e050:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800e052:	687b      	ldr	r3, [r7, #4]
 800e054:	2200      	movs	r2, #0
 800e056:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	2200      	movs	r2, #0
 800e05e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e060:	687b      	ldr	r3, [r7, #4]
 800e062:	2200      	movs	r2, #0
 800e064:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800e068:	687b      	ldr	r3, [r7, #4]
 800e06a:	2200      	movs	r2, #0
 800e06c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800e070:	2300      	movs	r3, #0
}
 800e072:	4618      	mov	r0, r3
 800e074:	3708      	adds	r7, #8
 800e076:	46bd      	mov	sp, r7
 800e078:	bd80      	pop	{r7, pc}

0800e07a <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800e07a:	b480      	push	{r7}
 800e07c:	b083      	sub	sp, #12
 800e07e:	af00      	add	r7, sp, #0
 800e080:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800e082:	bf00      	nop
 800e084:	370c      	adds	r7, #12
 800e086:	46bd      	mov	sp, r7
 800e088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e08c:	4770      	bx	lr

0800e08e <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800e08e:	b480      	push	{r7}
 800e090:	b083      	sub	sp, #12
 800e092:	af00      	add	r7, sp, #0
 800e094:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800e096:	bf00      	nop
 800e098:	370c      	adds	r7, #12
 800e09a:	46bd      	mov	sp, r7
 800e09c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e0a0:	4770      	bx	lr
	...

0800e0a4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b088      	sub	sp, #32
 800e0a8:	af02      	add	r7, sp, #8
 800e0aa:	60f8      	str	r0, [r7, #12]
 800e0ac:	4608      	mov	r0, r1
 800e0ae:	4611      	mov	r1, r2
 800e0b0:	461a      	mov	r2, r3
 800e0b2:	4603      	mov	r3, r0
 800e0b4:	817b      	strh	r3, [r7, #10]
 800e0b6:	460b      	mov	r3, r1
 800e0b8:	813b      	strh	r3, [r7, #8]
 800e0ba:	4613      	mov	r3, r2
 800e0bc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e0c4:	b2db      	uxtb	r3, r3
 800e0c6:	2b20      	cmp	r3, #32
 800e0c8:	f040 80f9 	bne.w	800e2be <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800e0cc:	6a3b      	ldr	r3, [r7, #32]
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d002      	beq.n	800e0d8 <HAL_I2C_Mem_Write+0x34>
 800e0d2:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d105      	bne.n	800e0e4 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e0d8:	68fb      	ldr	r3, [r7, #12]
 800e0da:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e0de:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e0e0:	2301      	movs	r3, #1
 800e0e2:	e0ed      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e0e4:	68fb      	ldr	r3, [r7, #12]
 800e0e6:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e0ea:	2b01      	cmp	r3, #1
 800e0ec:	d101      	bne.n	800e0f2 <HAL_I2C_Mem_Write+0x4e>
 800e0ee:	2302      	movs	r3, #2
 800e0f0:	e0e6      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
 800e0f2:	68fb      	ldr	r3, [r7, #12]
 800e0f4:	2201      	movs	r2, #1
 800e0f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e0fa:	f7fa ffd5 	bl	80090a8 <HAL_GetTick>
 800e0fe:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e100:	697b      	ldr	r3, [r7, #20]
 800e102:	9300      	str	r3, [sp, #0]
 800e104:	2319      	movs	r3, #25
 800e106:	2201      	movs	r2, #1
 800e108:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e10c:	68f8      	ldr	r0, [r7, #12]
 800e10e:	f000 fadd 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e112:	4603      	mov	r3, r0
 800e114:	2b00      	cmp	r3, #0
 800e116:	d001      	beq.n	800e11c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800e118:	2301      	movs	r3, #1
 800e11a:	e0d1      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800e11c:	68fb      	ldr	r3, [r7, #12]
 800e11e:	2221      	movs	r2, #33	@ 0x21
 800e120:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	2240      	movs	r2, #64	@ 0x40
 800e128:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e12c:	68fb      	ldr	r3, [r7, #12]
 800e12e:	2200      	movs	r2, #0
 800e130:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e132:	68fb      	ldr	r3, [r7, #12]
 800e134:	6a3a      	ldr	r2, [r7, #32]
 800e136:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e138:	68fb      	ldr	r3, [r7, #12]
 800e13a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e13c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e13e:	68fb      	ldr	r3, [r7, #12]
 800e140:	2200      	movs	r2, #0
 800e142:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e144:	88f8      	ldrh	r0, [r7, #6]
 800e146:	893a      	ldrh	r2, [r7, #8]
 800e148:	8979      	ldrh	r1, [r7, #10]
 800e14a:	697b      	ldr	r3, [r7, #20]
 800e14c:	9301      	str	r3, [sp, #4]
 800e14e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e150:	9300      	str	r3, [sp, #0]
 800e152:	4603      	mov	r3, r0
 800e154:	68f8      	ldr	r0, [r7, #12]
 800e156:	f000 f9ed 	bl	800e534 <I2C_RequestMemoryWrite>
 800e15a:	4603      	mov	r3, r0
 800e15c:	2b00      	cmp	r3, #0
 800e15e:	d005      	beq.n	800e16c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e160:	68fb      	ldr	r3, [r7, #12]
 800e162:	2200      	movs	r2, #0
 800e164:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e168:	2301      	movs	r3, #1
 800e16a:	e0a9      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e16c:	68fb      	ldr	r3, [r7, #12]
 800e16e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e170:	b29b      	uxth	r3, r3
 800e172:	2bff      	cmp	r3, #255	@ 0xff
 800e174:	d90e      	bls.n	800e194 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e176:	68fb      	ldr	r3, [r7, #12]
 800e178:	22ff      	movs	r2, #255	@ 0xff
 800e17a:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e180:	b2da      	uxtb	r2, r3
 800e182:	8979      	ldrh	r1, [r7, #10]
 800e184:	2300      	movs	r3, #0
 800e186:	9300      	str	r3, [sp, #0]
 800e188:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e18c:	68f8      	ldr	r0, [r7, #12]
 800e18e:	f000 fc61 	bl	800ea54 <I2C_TransferConfig>
 800e192:	e00f      	b.n	800e1b4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e198:	b29a      	uxth	r2, r3
 800e19a:	68fb      	ldr	r3, [r7, #12]
 800e19c:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1a2:	b2da      	uxtb	r2, r3
 800e1a4:	8979      	ldrh	r1, [r7, #10]
 800e1a6:	2300      	movs	r3, #0
 800e1a8:	9300      	str	r3, [sp, #0]
 800e1aa:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e1ae:	68f8      	ldr	r0, [r7, #12]
 800e1b0:	f000 fc50 	bl	800ea54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e1b4:	697a      	ldr	r2, [r7, #20]
 800e1b6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e1b8:	68f8      	ldr	r0, [r7, #12]
 800e1ba:	f000 fae0 	bl	800e77e <I2C_WaitOnTXISFlagUntilTimeout>
 800e1be:	4603      	mov	r3, r0
 800e1c0:	2b00      	cmp	r3, #0
 800e1c2:	d001      	beq.n	800e1c8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800e1c4:	2301      	movs	r3, #1
 800e1c6:	e07b      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1cc:	781a      	ldrb	r2, [r3, #0]
 800e1ce:	68fb      	ldr	r3, [r7, #12]
 800e1d0:	681b      	ldr	r3, [r3, #0]
 800e1d2:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e1d4:	68fb      	ldr	r3, [r7, #12]
 800e1d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e1d8:	1c5a      	adds	r2, r3, #1
 800e1da:	68fb      	ldr	r3, [r7, #12]
 800e1dc:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800e1de:	68fb      	ldr	r3, [r7, #12]
 800e1e0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1e2:	b29b      	uxth	r3, r3
 800e1e4:	3b01      	subs	r3, #1
 800e1e6:	b29a      	uxth	r2, r3
 800e1e8:	68fb      	ldr	r3, [r7, #12]
 800e1ea:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1f0:	3b01      	subs	r3, #1
 800e1f2:	b29a      	uxth	r2, r3
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e1f8:	68fb      	ldr	r3, [r7, #12]
 800e1fa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1fc:	b29b      	uxth	r3, r3
 800e1fe:	2b00      	cmp	r3, #0
 800e200:	d034      	beq.n	800e26c <HAL_I2C_Mem_Write+0x1c8>
 800e202:	68fb      	ldr	r3, [r7, #12]
 800e204:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e206:	2b00      	cmp	r3, #0
 800e208:	d130      	bne.n	800e26c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e20a:	697b      	ldr	r3, [r7, #20]
 800e20c:	9300      	str	r3, [sp, #0]
 800e20e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e210:	2200      	movs	r2, #0
 800e212:	2180      	movs	r1, #128	@ 0x80
 800e214:	68f8      	ldr	r0, [r7, #12]
 800e216:	f000 fa59 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e21a:	4603      	mov	r3, r0
 800e21c:	2b00      	cmp	r3, #0
 800e21e:	d001      	beq.n	800e224 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800e220:	2301      	movs	r3, #1
 800e222:	e04d      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e224:	68fb      	ldr	r3, [r7, #12]
 800e226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e228:	b29b      	uxth	r3, r3
 800e22a:	2bff      	cmp	r3, #255	@ 0xff
 800e22c:	d90e      	bls.n	800e24c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e22e:	68fb      	ldr	r3, [r7, #12]
 800e230:	22ff      	movs	r2, #255	@ 0xff
 800e232:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e234:	68fb      	ldr	r3, [r7, #12]
 800e236:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e238:	b2da      	uxtb	r2, r3
 800e23a:	8979      	ldrh	r1, [r7, #10]
 800e23c:	2300      	movs	r3, #0
 800e23e:	9300      	str	r3, [sp, #0]
 800e240:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e244:	68f8      	ldr	r0, [r7, #12]
 800e246:	f000 fc05 	bl	800ea54 <I2C_TransferConfig>
 800e24a:	e00f      	b.n	800e26c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e250:	b29a      	uxth	r2, r3
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e25a:	b2da      	uxtb	r2, r3
 800e25c:	8979      	ldrh	r1, [r7, #10]
 800e25e:	2300      	movs	r3, #0
 800e260:	9300      	str	r3, [sp, #0]
 800e262:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e266:	68f8      	ldr	r0, [r7, #12]
 800e268:	f000 fbf4 	bl	800ea54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800e26c:	68fb      	ldr	r3, [r7, #12]
 800e26e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e270:	b29b      	uxth	r3, r3
 800e272:	2b00      	cmp	r3, #0
 800e274:	d19e      	bne.n	800e1b4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e276:	697a      	ldr	r2, [r7, #20]
 800e278:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e27a:	68f8      	ldr	r0, [r7, #12]
 800e27c:	f000 fac6 	bl	800e80c <I2C_WaitOnSTOPFlagUntilTimeout>
 800e280:	4603      	mov	r3, r0
 800e282:	2b00      	cmp	r3, #0
 800e284:	d001      	beq.n	800e28a <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800e286:	2301      	movs	r3, #1
 800e288:	e01a      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	681b      	ldr	r3, [r3, #0]
 800e28e:	2220      	movs	r2, #32
 800e290:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	6859      	ldr	r1, [r3, #4]
 800e298:	68fb      	ldr	r3, [r7, #12]
 800e29a:	681a      	ldr	r2, [r3, #0]
 800e29c:	4b0a      	ldr	r3, [pc, #40]	@ (800e2c8 <HAL_I2C_Mem_Write+0x224>)
 800e29e:	400b      	ands	r3, r1
 800e2a0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e2a2:	68fb      	ldr	r3, [r7, #12]
 800e2a4:	2220      	movs	r2, #32
 800e2a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	2200      	movs	r2, #0
 800e2ae:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e2b2:	68fb      	ldr	r3, [r7, #12]
 800e2b4:	2200      	movs	r2, #0
 800e2b6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e2ba:	2300      	movs	r3, #0
 800e2bc:	e000      	b.n	800e2c0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800e2be:	2302      	movs	r3, #2
  }
}
 800e2c0:	4618      	mov	r0, r3
 800e2c2:	3718      	adds	r7, #24
 800e2c4:	46bd      	mov	sp, r7
 800e2c6:	bd80      	pop	{r7, pc}
 800e2c8:	fe00e800 	.word	0xfe00e800

0800e2cc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800e2cc:	b580      	push	{r7, lr}
 800e2ce:	b088      	sub	sp, #32
 800e2d0:	af02      	add	r7, sp, #8
 800e2d2:	60f8      	str	r0, [r7, #12]
 800e2d4:	4608      	mov	r0, r1
 800e2d6:	4611      	mov	r1, r2
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4603      	mov	r3, r0
 800e2dc:	817b      	strh	r3, [r7, #10]
 800e2de:	460b      	mov	r3, r1
 800e2e0:	813b      	strh	r3, [r7, #8]
 800e2e2:	4613      	mov	r3, r2
 800e2e4:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e2ec:	b2db      	uxtb	r3, r3
 800e2ee:	2b20      	cmp	r3, #32
 800e2f0:	f040 80fd 	bne.w	800e4ee <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800e2f4:	6a3b      	ldr	r3, [r7, #32]
 800e2f6:	2b00      	cmp	r3, #0
 800e2f8:	d002      	beq.n	800e300 <HAL_I2C_Mem_Read+0x34>
 800e2fa:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d105      	bne.n	800e30c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800e300:	68fb      	ldr	r3, [r7, #12]
 800e302:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e306:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800e308:	2301      	movs	r3, #1
 800e30a:	e0f1      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800e30c:	68fb      	ldr	r3, [r7, #12]
 800e30e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800e312:	2b01      	cmp	r3, #1
 800e314:	d101      	bne.n	800e31a <HAL_I2C_Mem_Read+0x4e>
 800e316:	2302      	movs	r3, #2
 800e318:	e0ea      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
 800e31a:	68fb      	ldr	r3, [r7, #12]
 800e31c:	2201      	movs	r2, #1
 800e31e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800e322:	f7fa fec1 	bl	80090a8 <HAL_GetTick>
 800e326:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800e328:	697b      	ldr	r3, [r7, #20]
 800e32a:	9300      	str	r3, [sp, #0]
 800e32c:	2319      	movs	r3, #25
 800e32e:	2201      	movs	r2, #1
 800e330:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800e334:	68f8      	ldr	r0, [r7, #12]
 800e336:	f000 f9c9 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e33a:	4603      	mov	r3, r0
 800e33c:	2b00      	cmp	r3, #0
 800e33e:	d001      	beq.n	800e344 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800e340:	2301      	movs	r3, #1
 800e342:	e0d5      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800e344:	68fb      	ldr	r3, [r7, #12]
 800e346:	2222      	movs	r2, #34	@ 0x22
 800e348:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800e34c:	68fb      	ldr	r3, [r7, #12]
 800e34e:	2240      	movs	r2, #64	@ 0x40
 800e350:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800e354:	68fb      	ldr	r3, [r7, #12]
 800e356:	2200      	movs	r2, #0
 800e358:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800e35a:	68fb      	ldr	r3, [r7, #12]
 800e35c:	6a3a      	ldr	r2, [r7, #32]
 800e35e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800e360:	68fb      	ldr	r3, [r7, #12]
 800e362:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800e364:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800e366:	68fb      	ldr	r3, [r7, #12]
 800e368:	2200      	movs	r2, #0
 800e36a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800e36c:	88f8      	ldrh	r0, [r7, #6]
 800e36e:	893a      	ldrh	r2, [r7, #8]
 800e370:	8979      	ldrh	r1, [r7, #10]
 800e372:	697b      	ldr	r3, [r7, #20]
 800e374:	9301      	str	r3, [sp, #4]
 800e376:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e378:	9300      	str	r3, [sp, #0]
 800e37a:	4603      	mov	r3, r0
 800e37c:	68f8      	ldr	r0, [r7, #12]
 800e37e:	f000 f92d 	bl	800e5dc <I2C_RequestMemoryRead>
 800e382:	4603      	mov	r3, r0
 800e384:	2b00      	cmp	r3, #0
 800e386:	d005      	beq.n	800e394 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800e388:	68fb      	ldr	r3, [r7, #12]
 800e38a:	2200      	movs	r2, #0
 800e38c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800e390:	2301      	movs	r3, #1
 800e392:	e0ad      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e394:	68fb      	ldr	r3, [r7, #12]
 800e396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e398:	b29b      	uxth	r3, r3
 800e39a:	2bff      	cmp	r3, #255	@ 0xff
 800e39c:	d90e      	bls.n	800e3bc <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	22ff      	movs	r2, #255	@ 0xff
 800e3a2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800e3a4:	68fb      	ldr	r3, [r7, #12]
 800e3a6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3a8:	b2da      	uxtb	r2, r3
 800e3aa:	8979      	ldrh	r1, [r7, #10]
 800e3ac:	4b52      	ldr	r3, [pc, #328]	@ (800e4f8 <HAL_I2C_Mem_Read+0x22c>)
 800e3ae:	9300      	str	r3, [sp, #0]
 800e3b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e3b4:	68f8      	ldr	r0, [r7, #12]
 800e3b6:	f000 fb4d 	bl	800ea54 <I2C_TransferConfig>
 800e3ba:	e00f      	b.n	800e3dc <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e3bc:	68fb      	ldr	r3, [r7, #12]
 800e3be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e3c0:	b29a      	uxth	r2, r3
 800e3c2:	68fb      	ldr	r3, [r7, #12]
 800e3c4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e3c6:	68fb      	ldr	r3, [r7, #12]
 800e3c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e3ca:	b2da      	uxtb	r2, r3
 800e3cc:	8979      	ldrh	r1, [r7, #10]
 800e3ce:	4b4a      	ldr	r3, [pc, #296]	@ (800e4f8 <HAL_I2C_Mem_Read+0x22c>)
 800e3d0:	9300      	str	r3, [sp, #0]
 800e3d2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e3d6:	68f8      	ldr	r0, [r7, #12]
 800e3d8:	f000 fb3c 	bl	800ea54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800e3dc:	697b      	ldr	r3, [r7, #20]
 800e3de:	9300      	str	r3, [sp, #0]
 800e3e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e3e2:	2200      	movs	r2, #0
 800e3e4:	2104      	movs	r1, #4
 800e3e6:	68f8      	ldr	r0, [r7, #12]
 800e3e8:	f000 f970 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e3ec:	4603      	mov	r3, r0
 800e3ee:	2b00      	cmp	r3, #0
 800e3f0:	d001      	beq.n	800e3f6 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800e3f2:	2301      	movs	r3, #1
 800e3f4:	e07c      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e3f6:	68fb      	ldr	r3, [r7, #12]
 800e3f8:	681b      	ldr	r3, [r3, #0]
 800e3fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e3fc:	68fb      	ldr	r3, [r7, #12]
 800e3fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e400:	b2d2      	uxtb	r2, r2
 800e402:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800e404:	68fb      	ldr	r3, [r7, #12]
 800e406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e408:	1c5a      	adds	r2, r3, #1
 800e40a:	68fb      	ldr	r3, [r7, #12]
 800e40c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800e40e:	68fb      	ldr	r3, [r7, #12]
 800e410:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e412:	3b01      	subs	r3, #1
 800e414:	b29a      	uxth	r2, r3
 800e416:	68fb      	ldr	r3, [r7, #12]
 800e418:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e41a:	68fb      	ldr	r3, [r7, #12]
 800e41c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e41e:	b29b      	uxth	r3, r3
 800e420:	3b01      	subs	r3, #1
 800e422:	b29a      	uxth	r2, r3
 800e424:	68fb      	ldr	r3, [r7, #12]
 800e426:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800e428:	68fb      	ldr	r3, [r7, #12]
 800e42a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e42c:	b29b      	uxth	r3, r3
 800e42e:	2b00      	cmp	r3, #0
 800e430:	d034      	beq.n	800e49c <HAL_I2C_Mem_Read+0x1d0>
 800e432:	68fb      	ldr	r3, [r7, #12]
 800e434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e436:	2b00      	cmp	r3, #0
 800e438:	d130      	bne.n	800e49c <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800e43a:	697b      	ldr	r3, [r7, #20]
 800e43c:	9300      	str	r3, [sp, #0]
 800e43e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e440:	2200      	movs	r2, #0
 800e442:	2180      	movs	r1, #128	@ 0x80
 800e444:	68f8      	ldr	r0, [r7, #12]
 800e446:	f000 f941 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e44a:	4603      	mov	r3, r0
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	d001      	beq.n	800e454 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800e450:	2301      	movs	r3, #1
 800e452:	e04d      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e454:	68fb      	ldr	r3, [r7, #12]
 800e456:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e458:	b29b      	uxth	r3, r3
 800e45a:	2bff      	cmp	r3, #255	@ 0xff
 800e45c:	d90e      	bls.n	800e47c <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800e45e:	68fb      	ldr	r3, [r7, #12]
 800e460:	22ff      	movs	r2, #255	@ 0xff
 800e462:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800e464:	68fb      	ldr	r3, [r7, #12]
 800e466:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e468:	b2da      	uxtb	r2, r3
 800e46a:	8979      	ldrh	r1, [r7, #10]
 800e46c:	2300      	movs	r3, #0
 800e46e:	9300      	str	r3, [sp, #0]
 800e470:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e474:	68f8      	ldr	r0, [r7, #12]
 800e476:	f000 faed 	bl	800ea54 <I2C_TransferConfig>
 800e47a:	e00f      	b.n	800e49c <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800e47c:	68fb      	ldr	r3, [r7, #12]
 800e47e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e480:	b29a      	uxth	r2, r3
 800e482:	68fb      	ldr	r3, [r7, #12]
 800e484:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800e486:	68fb      	ldr	r3, [r7, #12]
 800e488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e48a:	b2da      	uxtb	r2, r3
 800e48c:	8979      	ldrh	r1, [r7, #10]
 800e48e:	2300      	movs	r3, #0
 800e490:	9300      	str	r3, [sp, #0]
 800e492:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800e496:	68f8      	ldr	r0, [r7, #12]
 800e498:	f000 fadc 	bl	800ea54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800e49c:	68fb      	ldr	r3, [r7, #12]
 800e49e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e4a0:	b29b      	uxth	r3, r3
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d19a      	bne.n	800e3dc <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800e4a6:	697a      	ldr	r2, [r7, #20]
 800e4a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800e4aa:	68f8      	ldr	r0, [r7, #12]
 800e4ac:	f000 f9ae 	bl	800e80c <I2C_WaitOnSTOPFlagUntilTimeout>
 800e4b0:	4603      	mov	r3, r0
 800e4b2:	2b00      	cmp	r3, #0
 800e4b4:	d001      	beq.n	800e4ba <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800e4b6:	2301      	movs	r3, #1
 800e4b8:	e01a      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e4ba:	68fb      	ldr	r3, [r7, #12]
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	2220      	movs	r2, #32
 800e4c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800e4c2:	68fb      	ldr	r3, [r7, #12]
 800e4c4:	681b      	ldr	r3, [r3, #0]
 800e4c6:	6859      	ldr	r1, [r3, #4]
 800e4c8:	68fb      	ldr	r3, [r7, #12]
 800e4ca:	681a      	ldr	r2, [r3, #0]
 800e4cc:	4b0b      	ldr	r3, [pc, #44]	@ (800e4fc <HAL_I2C_Mem_Read+0x230>)
 800e4ce:	400b      	ands	r3, r1
 800e4d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800e4d2:	68fb      	ldr	r3, [r7, #12]
 800e4d4:	2220      	movs	r2, #32
 800e4d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800e4da:	68fb      	ldr	r3, [r7, #12]
 800e4dc:	2200      	movs	r2, #0
 800e4de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e4e2:	68fb      	ldr	r3, [r7, #12]
 800e4e4:	2200      	movs	r2, #0
 800e4e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800e4ea:	2300      	movs	r3, #0
 800e4ec:	e000      	b.n	800e4f0 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800e4ee:	2302      	movs	r3, #2
  }
}
 800e4f0:	4618      	mov	r0, r3
 800e4f2:	3718      	adds	r7, #24
 800e4f4:	46bd      	mov	sp, r7
 800e4f6:	bd80      	pop	{r7, pc}
 800e4f8:	80002400 	.word	0x80002400
 800e4fc:	fe00e800 	.word	0xfe00e800

0800e500 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800e500:	b480      	push	{r7}
 800e502:	b083      	sub	sp, #12
 800e504:	af00      	add	r7, sp, #0
 800e506:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800e508:	687b      	ldr	r3, [r7, #4]
 800e50a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800e50e:	b2db      	uxtb	r3, r3
}
 800e510:	4618      	mov	r0, r3
 800e512:	370c      	adds	r7, #12
 800e514:	46bd      	mov	sp, r7
 800e516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e51a:	4770      	bx	lr

0800e51c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800e51c:	b480      	push	{r7}
 800e51e:	b083      	sub	sp, #12
 800e520:	af00      	add	r7, sp, #0
 800e522:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800e528:	4618      	mov	r0, r3
 800e52a:	370c      	adds	r7, #12
 800e52c:	46bd      	mov	sp, r7
 800e52e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e532:	4770      	bx	lr

0800e534 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800e534:	b580      	push	{r7, lr}
 800e536:	b086      	sub	sp, #24
 800e538:	af02      	add	r7, sp, #8
 800e53a:	60f8      	str	r0, [r7, #12]
 800e53c:	4608      	mov	r0, r1
 800e53e:	4611      	mov	r1, r2
 800e540:	461a      	mov	r2, r3
 800e542:	4603      	mov	r3, r0
 800e544:	817b      	strh	r3, [r7, #10]
 800e546:	460b      	mov	r3, r1
 800e548:	813b      	strh	r3, [r7, #8]
 800e54a:	4613      	mov	r3, r2
 800e54c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800e54e:	88fb      	ldrh	r3, [r7, #6]
 800e550:	b2da      	uxtb	r2, r3
 800e552:	8979      	ldrh	r1, [r7, #10]
 800e554:	4b20      	ldr	r3, [pc, #128]	@ (800e5d8 <I2C_RequestMemoryWrite+0xa4>)
 800e556:	9300      	str	r3, [sp, #0]
 800e558:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800e55c:	68f8      	ldr	r0, [r7, #12]
 800e55e:	f000 fa79 	bl	800ea54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e562:	69fa      	ldr	r2, [r7, #28]
 800e564:	69b9      	ldr	r1, [r7, #24]
 800e566:	68f8      	ldr	r0, [r7, #12]
 800e568:	f000 f909 	bl	800e77e <I2C_WaitOnTXISFlagUntilTimeout>
 800e56c:	4603      	mov	r3, r0
 800e56e:	2b00      	cmp	r3, #0
 800e570:	d001      	beq.n	800e576 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800e572:	2301      	movs	r3, #1
 800e574:	e02c      	b.n	800e5d0 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e576:	88fb      	ldrh	r3, [r7, #6]
 800e578:	2b01      	cmp	r3, #1
 800e57a:	d105      	bne.n	800e588 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e57c:	893b      	ldrh	r3, [r7, #8]
 800e57e:	b2da      	uxtb	r2, r3
 800e580:	68fb      	ldr	r3, [r7, #12]
 800e582:	681b      	ldr	r3, [r3, #0]
 800e584:	629a      	str	r2, [r3, #40]	@ 0x28
 800e586:	e015      	b.n	800e5b4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e588:	893b      	ldrh	r3, [r7, #8]
 800e58a:	0a1b      	lsrs	r3, r3, #8
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	b2da      	uxtb	r2, r3
 800e590:	68fb      	ldr	r3, [r7, #12]
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e596:	69fa      	ldr	r2, [r7, #28]
 800e598:	69b9      	ldr	r1, [r7, #24]
 800e59a:	68f8      	ldr	r0, [r7, #12]
 800e59c:	f000 f8ef 	bl	800e77e <I2C_WaitOnTXISFlagUntilTimeout>
 800e5a0:	4603      	mov	r3, r0
 800e5a2:	2b00      	cmp	r3, #0
 800e5a4:	d001      	beq.n	800e5aa <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800e5a6:	2301      	movs	r3, #1
 800e5a8:	e012      	b.n	800e5d0 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e5aa:	893b      	ldrh	r3, [r7, #8]
 800e5ac:	b2da      	uxtb	r2, r3
 800e5ae:	68fb      	ldr	r3, [r7, #12]
 800e5b0:	681b      	ldr	r3, [r3, #0]
 800e5b2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800e5b4:	69fb      	ldr	r3, [r7, #28]
 800e5b6:	9300      	str	r3, [sp, #0]
 800e5b8:	69bb      	ldr	r3, [r7, #24]
 800e5ba:	2200      	movs	r2, #0
 800e5bc:	2180      	movs	r1, #128	@ 0x80
 800e5be:	68f8      	ldr	r0, [r7, #12]
 800e5c0:	f000 f884 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e5c4:	4603      	mov	r3, r0
 800e5c6:	2b00      	cmp	r3, #0
 800e5c8:	d001      	beq.n	800e5ce <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800e5ca:	2301      	movs	r3, #1
 800e5cc:	e000      	b.n	800e5d0 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800e5ce:	2300      	movs	r3, #0
}
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	3710      	adds	r7, #16
 800e5d4:	46bd      	mov	sp, r7
 800e5d6:	bd80      	pop	{r7, pc}
 800e5d8:	80002000 	.word	0x80002000

0800e5dc <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800e5dc:	b580      	push	{r7, lr}
 800e5de:	b086      	sub	sp, #24
 800e5e0:	af02      	add	r7, sp, #8
 800e5e2:	60f8      	str	r0, [r7, #12]
 800e5e4:	4608      	mov	r0, r1
 800e5e6:	4611      	mov	r1, r2
 800e5e8:	461a      	mov	r2, r3
 800e5ea:	4603      	mov	r3, r0
 800e5ec:	817b      	strh	r3, [r7, #10]
 800e5ee:	460b      	mov	r3, r1
 800e5f0:	813b      	strh	r3, [r7, #8]
 800e5f2:	4613      	mov	r3, r2
 800e5f4:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800e5f6:	88fb      	ldrh	r3, [r7, #6]
 800e5f8:	b2da      	uxtb	r2, r3
 800e5fa:	8979      	ldrh	r1, [r7, #10]
 800e5fc:	4b20      	ldr	r3, [pc, #128]	@ (800e680 <I2C_RequestMemoryRead+0xa4>)
 800e5fe:	9300      	str	r3, [sp, #0]
 800e600:	2300      	movs	r3, #0
 800e602:	68f8      	ldr	r0, [r7, #12]
 800e604:	f000 fa26 	bl	800ea54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e608:	69fa      	ldr	r2, [r7, #28]
 800e60a:	69b9      	ldr	r1, [r7, #24]
 800e60c:	68f8      	ldr	r0, [r7, #12]
 800e60e:	f000 f8b6 	bl	800e77e <I2C_WaitOnTXISFlagUntilTimeout>
 800e612:	4603      	mov	r3, r0
 800e614:	2b00      	cmp	r3, #0
 800e616:	d001      	beq.n	800e61c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800e618:	2301      	movs	r3, #1
 800e61a:	e02c      	b.n	800e676 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800e61c:	88fb      	ldrh	r3, [r7, #6]
 800e61e:	2b01      	cmp	r3, #1
 800e620:	d105      	bne.n	800e62e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e622:	893b      	ldrh	r3, [r7, #8]
 800e624:	b2da      	uxtb	r2, r3
 800e626:	68fb      	ldr	r3, [r7, #12]
 800e628:	681b      	ldr	r3, [r3, #0]
 800e62a:	629a      	str	r2, [r3, #40]	@ 0x28
 800e62c:	e015      	b.n	800e65a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800e62e:	893b      	ldrh	r3, [r7, #8]
 800e630:	0a1b      	lsrs	r3, r3, #8
 800e632:	b29b      	uxth	r3, r3
 800e634:	b2da      	uxtb	r2, r3
 800e636:	68fb      	ldr	r3, [r7, #12]
 800e638:	681b      	ldr	r3, [r3, #0]
 800e63a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800e63c:	69fa      	ldr	r2, [r7, #28]
 800e63e:	69b9      	ldr	r1, [r7, #24]
 800e640:	68f8      	ldr	r0, [r7, #12]
 800e642:	f000 f89c 	bl	800e77e <I2C_WaitOnTXISFlagUntilTimeout>
 800e646:	4603      	mov	r3, r0
 800e648:	2b00      	cmp	r3, #0
 800e64a:	d001      	beq.n	800e650 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800e64c:	2301      	movs	r3, #1
 800e64e:	e012      	b.n	800e676 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800e650:	893b      	ldrh	r3, [r7, #8]
 800e652:	b2da      	uxtb	r2, r3
 800e654:	68fb      	ldr	r3, [r7, #12]
 800e656:	681b      	ldr	r3, [r3, #0]
 800e658:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800e65a:	69fb      	ldr	r3, [r7, #28]
 800e65c:	9300      	str	r3, [sp, #0]
 800e65e:	69bb      	ldr	r3, [r7, #24]
 800e660:	2200      	movs	r2, #0
 800e662:	2140      	movs	r1, #64	@ 0x40
 800e664:	68f8      	ldr	r0, [r7, #12]
 800e666:	f000 f831 	bl	800e6cc <I2C_WaitOnFlagUntilTimeout>
 800e66a:	4603      	mov	r3, r0
 800e66c:	2b00      	cmp	r3, #0
 800e66e:	d001      	beq.n	800e674 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800e670:	2301      	movs	r3, #1
 800e672:	e000      	b.n	800e676 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800e674:	2300      	movs	r3, #0
}
 800e676:	4618      	mov	r0, r3
 800e678:	3710      	adds	r7, #16
 800e67a:	46bd      	mov	sp, r7
 800e67c:	bd80      	pop	{r7, pc}
 800e67e:	bf00      	nop
 800e680:	80002000 	.word	0x80002000

0800e684 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800e684:	b480      	push	{r7}
 800e686:	b083      	sub	sp, #12
 800e688:	af00      	add	r7, sp, #0
 800e68a:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800e68c:	687b      	ldr	r3, [r7, #4]
 800e68e:	681b      	ldr	r3, [r3, #0]
 800e690:	699b      	ldr	r3, [r3, #24]
 800e692:	f003 0302 	and.w	r3, r3, #2
 800e696:	2b02      	cmp	r3, #2
 800e698:	d103      	bne.n	800e6a2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800e69a:	687b      	ldr	r3, [r7, #4]
 800e69c:	681b      	ldr	r3, [r3, #0]
 800e69e:	2200      	movs	r2, #0
 800e6a0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	681b      	ldr	r3, [r3, #0]
 800e6a6:	699b      	ldr	r3, [r3, #24]
 800e6a8:	f003 0301 	and.w	r3, r3, #1
 800e6ac:	2b01      	cmp	r3, #1
 800e6ae:	d007      	beq.n	800e6c0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800e6b0:	687b      	ldr	r3, [r7, #4]
 800e6b2:	681b      	ldr	r3, [r3, #0]
 800e6b4:	699a      	ldr	r2, [r3, #24]
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	681b      	ldr	r3, [r3, #0]
 800e6ba:	f042 0201 	orr.w	r2, r2, #1
 800e6be:	619a      	str	r2, [r3, #24]
  }
}
 800e6c0:	bf00      	nop
 800e6c2:	370c      	adds	r7, #12
 800e6c4:	46bd      	mov	sp, r7
 800e6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6ca:	4770      	bx	lr

0800e6cc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800e6cc:	b580      	push	{r7, lr}
 800e6ce:	b084      	sub	sp, #16
 800e6d0:	af00      	add	r7, sp, #0
 800e6d2:	60f8      	str	r0, [r7, #12]
 800e6d4:	60b9      	str	r1, [r7, #8]
 800e6d6:	603b      	str	r3, [r7, #0]
 800e6d8:	4613      	mov	r3, r2
 800e6da:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e6dc:	e03b      	b.n	800e756 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e6de:	69ba      	ldr	r2, [r7, #24]
 800e6e0:	6839      	ldr	r1, [r7, #0]
 800e6e2:	68f8      	ldr	r0, [r7, #12]
 800e6e4:	f000 f8d6 	bl	800e894 <I2C_IsErrorOccurred>
 800e6e8:	4603      	mov	r3, r0
 800e6ea:	2b00      	cmp	r3, #0
 800e6ec:	d001      	beq.n	800e6f2 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800e6ee:	2301      	movs	r3, #1
 800e6f0:	e041      	b.n	800e776 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e6f2:	683b      	ldr	r3, [r7, #0]
 800e6f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e6f8:	d02d      	beq.n	800e756 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e6fa:	f7fa fcd5 	bl	80090a8 <HAL_GetTick>
 800e6fe:	4602      	mov	r2, r0
 800e700:	69bb      	ldr	r3, [r7, #24]
 800e702:	1ad3      	subs	r3, r2, r3
 800e704:	683a      	ldr	r2, [r7, #0]
 800e706:	429a      	cmp	r2, r3
 800e708:	d302      	bcc.n	800e710 <I2C_WaitOnFlagUntilTimeout+0x44>
 800e70a:	683b      	ldr	r3, [r7, #0]
 800e70c:	2b00      	cmp	r3, #0
 800e70e:	d122      	bne.n	800e756 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800e710:	68fb      	ldr	r3, [r7, #12]
 800e712:	681b      	ldr	r3, [r3, #0]
 800e714:	699a      	ldr	r2, [r3, #24]
 800e716:	68bb      	ldr	r3, [r7, #8]
 800e718:	4013      	ands	r3, r2
 800e71a:	68ba      	ldr	r2, [r7, #8]
 800e71c:	429a      	cmp	r2, r3
 800e71e:	bf0c      	ite	eq
 800e720:	2301      	moveq	r3, #1
 800e722:	2300      	movne	r3, #0
 800e724:	b2db      	uxtb	r3, r3
 800e726:	461a      	mov	r2, r3
 800e728:	79fb      	ldrb	r3, [r7, #7]
 800e72a:	429a      	cmp	r2, r3
 800e72c:	d113      	bne.n	800e756 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e72e:	68fb      	ldr	r3, [r7, #12]
 800e730:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e732:	f043 0220 	orr.w	r2, r3, #32
 800e736:	68fb      	ldr	r3, [r7, #12]
 800e738:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e73a:	68fb      	ldr	r3, [r7, #12]
 800e73c:	2220      	movs	r2, #32
 800e73e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e742:	68fb      	ldr	r3, [r7, #12]
 800e744:	2200      	movs	r2, #0
 800e746:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e74a:	68fb      	ldr	r3, [r7, #12]
 800e74c:	2200      	movs	r2, #0
 800e74e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800e752:	2301      	movs	r3, #1
 800e754:	e00f      	b.n	800e776 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800e756:	68fb      	ldr	r3, [r7, #12]
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	699a      	ldr	r2, [r3, #24]
 800e75c:	68bb      	ldr	r3, [r7, #8]
 800e75e:	4013      	ands	r3, r2
 800e760:	68ba      	ldr	r2, [r7, #8]
 800e762:	429a      	cmp	r2, r3
 800e764:	bf0c      	ite	eq
 800e766:	2301      	moveq	r3, #1
 800e768:	2300      	movne	r3, #0
 800e76a:	b2db      	uxtb	r3, r3
 800e76c:	461a      	mov	r2, r3
 800e76e:	79fb      	ldrb	r3, [r7, #7]
 800e770:	429a      	cmp	r2, r3
 800e772:	d0b4      	beq.n	800e6de <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800e774:	2300      	movs	r3, #0
}
 800e776:	4618      	mov	r0, r3
 800e778:	3710      	adds	r7, #16
 800e77a:	46bd      	mov	sp, r7
 800e77c:	bd80      	pop	{r7, pc}

0800e77e <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e77e:	b580      	push	{r7, lr}
 800e780:	b084      	sub	sp, #16
 800e782:	af00      	add	r7, sp, #0
 800e784:	60f8      	str	r0, [r7, #12]
 800e786:	60b9      	str	r1, [r7, #8]
 800e788:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e78a:	e033      	b.n	800e7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e78c:	687a      	ldr	r2, [r7, #4]
 800e78e:	68b9      	ldr	r1, [r7, #8]
 800e790:	68f8      	ldr	r0, [r7, #12]
 800e792:	f000 f87f 	bl	800e894 <I2C_IsErrorOccurred>
 800e796:	4603      	mov	r3, r0
 800e798:	2b00      	cmp	r3, #0
 800e79a:	d001      	beq.n	800e7a0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e79c:	2301      	movs	r3, #1
 800e79e:	e031      	b.n	800e804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800e7a0:	68bb      	ldr	r3, [r7, #8]
 800e7a2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e7a6:	d025      	beq.n	800e7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e7a8:	f7fa fc7e 	bl	80090a8 <HAL_GetTick>
 800e7ac:	4602      	mov	r2, r0
 800e7ae:	687b      	ldr	r3, [r7, #4]
 800e7b0:	1ad3      	subs	r3, r2, r3
 800e7b2:	68ba      	ldr	r2, [r7, #8]
 800e7b4:	429a      	cmp	r2, r3
 800e7b6:	d302      	bcc.n	800e7be <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800e7b8:	68bb      	ldr	r3, [r7, #8]
 800e7ba:	2b00      	cmp	r3, #0
 800e7bc:	d11a      	bne.n	800e7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800e7be:	68fb      	ldr	r3, [r7, #12]
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	699b      	ldr	r3, [r3, #24]
 800e7c4:	f003 0302 	and.w	r3, r3, #2
 800e7c8:	2b02      	cmp	r3, #2
 800e7ca:	d013      	beq.n	800e7f4 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e7cc:	68fb      	ldr	r3, [r7, #12]
 800e7ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7d0:	f043 0220 	orr.w	r2, r3, #32
 800e7d4:	68fb      	ldr	r3, [r7, #12]
 800e7d6:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	2220      	movs	r2, #32
 800e7dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800e7e0:	68fb      	ldr	r3, [r7, #12]
 800e7e2:	2200      	movs	r2, #0
 800e7e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e7e8:	68fb      	ldr	r3, [r7, #12]
 800e7ea:	2200      	movs	r2, #0
 800e7ec:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800e7f0:	2301      	movs	r3, #1
 800e7f2:	e007      	b.n	800e804 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800e7f4:	68fb      	ldr	r3, [r7, #12]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	699b      	ldr	r3, [r3, #24]
 800e7fa:	f003 0302 	and.w	r3, r3, #2
 800e7fe:	2b02      	cmp	r3, #2
 800e800:	d1c4      	bne.n	800e78c <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800e802:	2300      	movs	r3, #0
}
 800e804:	4618      	mov	r0, r3
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}

0800e80c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800e80c:	b580      	push	{r7, lr}
 800e80e:	b084      	sub	sp, #16
 800e810:	af00      	add	r7, sp, #0
 800e812:	60f8      	str	r0, [r7, #12]
 800e814:	60b9      	str	r1, [r7, #8]
 800e816:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e818:	e02f      	b.n	800e87a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800e81a:	687a      	ldr	r2, [r7, #4]
 800e81c:	68b9      	ldr	r1, [r7, #8]
 800e81e:	68f8      	ldr	r0, [r7, #12]
 800e820:	f000 f838 	bl	800e894 <I2C_IsErrorOccurred>
 800e824:	4603      	mov	r3, r0
 800e826:	2b00      	cmp	r3, #0
 800e828:	d001      	beq.n	800e82e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800e82a:	2301      	movs	r3, #1
 800e82c:	e02d      	b.n	800e88a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800e82e:	f7fa fc3b 	bl	80090a8 <HAL_GetTick>
 800e832:	4602      	mov	r2, r0
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	1ad3      	subs	r3, r2, r3
 800e838:	68ba      	ldr	r2, [r7, #8]
 800e83a:	429a      	cmp	r2, r3
 800e83c:	d302      	bcc.n	800e844 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800e83e:	68bb      	ldr	r3, [r7, #8]
 800e840:	2b00      	cmp	r3, #0
 800e842:	d11a      	bne.n	800e87a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800e844:	68fb      	ldr	r3, [r7, #12]
 800e846:	681b      	ldr	r3, [r3, #0]
 800e848:	699b      	ldr	r3, [r3, #24]
 800e84a:	f003 0320 	and.w	r3, r3, #32
 800e84e:	2b20      	cmp	r3, #32
 800e850:	d013      	beq.n	800e87a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800e852:	68fb      	ldr	r3, [r7, #12]
 800e854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e856:	f043 0220 	orr.w	r2, r3, #32
 800e85a:	68fb      	ldr	r3, [r7, #12]
 800e85c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800e85e:	68fb      	ldr	r3, [r7, #12]
 800e860:	2220      	movs	r2, #32
 800e862:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800e866:	68fb      	ldr	r3, [r7, #12]
 800e868:	2200      	movs	r2, #0
 800e86a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800e86e:	68fb      	ldr	r3, [r7, #12]
 800e870:	2200      	movs	r2, #0
 800e872:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800e876:	2301      	movs	r3, #1
 800e878:	e007      	b.n	800e88a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e87a:	68fb      	ldr	r3, [r7, #12]
 800e87c:	681b      	ldr	r3, [r3, #0]
 800e87e:	699b      	ldr	r3, [r3, #24]
 800e880:	f003 0320 	and.w	r3, r3, #32
 800e884:	2b20      	cmp	r3, #32
 800e886:	d1c8      	bne.n	800e81a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800e888:	2300      	movs	r3, #0
}
 800e88a:	4618      	mov	r0, r3
 800e88c:	3710      	adds	r7, #16
 800e88e:	46bd      	mov	sp, r7
 800e890:	bd80      	pop	{r7, pc}
	...

0800e894 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800e894:	b580      	push	{r7, lr}
 800e896:	b08a      	sub	sp, #40	@ 0x28
 800e898:	af00      	add	r7, sp, #0
 800e89a:	60f8      	str	r0, [r7, #12]
 800e89c:	60b9      	str	r1, [r7, #8]
 800e89e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800e8a0:	2300      	movs	r3, #0
 800e8a2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800e8a6:	68fb      	ldr	r3, [r7, #12]
 800e8a8:	681b      	ldr	r3, [r3, #0]
 800e8aa:	699b      	ldr	r3, [r3, #24]
 800e8ac:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800e8ae:	2300      	movs	r3, #0
 800e8b0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800e8b6:	69bb      	ldr	r3, [r7, #24]
 800e8b8:	f003 0310 	and.w	r3, r3, #16
 800e8bc:	2b00      	cmp	r3, #0
 800e8be:	d068      	beq.n	800e992 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e8c0:	68fb      	ldr	r3, [r7, #12]
 800e8c2:	681b      	ldr	r3, [r3, #0]
 800e8c4:	2210      	movs	r2, #16
 800e8c6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e8c8:	e049      	b.n	800e95e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800e8ca:	68bb      	ldr	r3, [r7, #8]
 800e8cc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800e8d0:	d045      	beq.n	800e95e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800e8d2:	f7fa fbe9 	bl	80090a8 <HAL_GetTick>
 800e8d6:	4602      	mov	r2, r0
 800e8d8:	69fb      	ldr	r3, [r7, #28]
 800e8da:	1ad3      	subs	r3, r2, r3
 800e8dc:	68ba      	ldr	r2, [r7, #8]
 800e8de:	429a      	cmp	r2, r3
 800e8e0:	d302      	bcc.n	800e8e8 <I2C_IsErrorOccurred+0x54>
 800e8e2:	68bb      	ldr	r3, [r7, #8]
 800e8e4:	2b00      	cmp	r3, #0
 800e8e6:	d13a      	bne.n	800e95e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800e8e8:	68fb      	ldr	r3, [r7, #12]
 800e8ea:	681b      	ldr	r3, [r3, #0]
 800e8ec:	685b      	ldr	r3, [r3, #4]
 800e8ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800e8f2:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800e8f4:	68fb      	ldr	r3, [r7, #12]
 800e8f6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800e8fa:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800e8fc:	68fb      	ldr	r3, [r7, #12]
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	699b      	ldr	r3, [r3, #24]
 800e902:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e906:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800e90a:	d121      	bne.n	800e950 <I2C_IsErrorOccurred+0xbc>
 800e90c:	697b      	ldr	r3, [r7, #20]
 800e90e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e912:	d01d      	beq.n	800e950 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800e914:	7cfb      	ldrb	r3, [r7, #19]
 800e916:	2b20      	cmp	r3, #32
 800e918:	d01a      	beq.n	800e950 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e91a:	68fb      	ldr	r3, [r7, #12]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	68fb      	ldr	r3, [r7, #12]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800e928:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800e92a:	f7fa fbbd 	bl	80090a8 <HAL_GetTick>
 800e92e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e930:	e00e      	b.n	800e950 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800e932:	f7fa fbb9 	bl	80090a8 <HAL_GetTick>
 800e936:	4602      	mov	r2, r0
 800e938:	69fb      	ldr	r3, [r7, #28]
 800e93a:	1ad3      	subs	r3, r2, r3
 800e93c:	2b19      	cmp	r3, #25
 800e93e:	d907      	bls.n	800e950 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800e940:	6a3b      	ldr	r3, [r7, #32]
 800e942:	f043 0320 	orr.w	r3, r3, #32
 800e946:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800e948:	2301      	movs	r3, #1
 800e94a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800e94e:	e006      	b.n	800e95e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800e950:	68fb      	ldr	r3, [r7, #12]
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	699b      	ldr	r3, [r3, #24]
 800e956:	f003 0320 	and.w	r3, r3, #32
 800e95a:	2b20      	cmp	r3, #32
 800e95c:	d1e9      	bne.n	800e932 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800e95e:	68fb      	ldr	r3, [r7, #12]
 800e960:	681b      	ldr	r3, [r3, #0]
 800e962:	699b      	ldr	r3, [r3, #24]
 800e964:	f003 0320 	and.w	r3, r3, #32
 800e968:	2b20      	cmp	r3, #32
 800e96a:	d003      	beq.n	800e974 <I2C_IsErrorOccurred+0xe0>
 800e96c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e970:	2b00      	cmp	r3, #0
 800e972:	d0aa      	beq.n	800e8ca <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800e974:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800e978:	2b00      	cmp	r3, #0
 800e97a:	d103      	bne.n	800e984 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e97c:	68fb      	ldr	r3, [r7, #12]
 800e97e:	681b      	ldr	r3, [r3, #0]
 800e980:	2220      	movs	r2, #32
 800e982:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800e984:	6a3b      	ldr	r3, [r7, #32]
 800e986:	f043 0304 	orr.w	r3, r3, #4
 800e98a:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800e98c:	2301      	movs	r3, #1
 800e98e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800e992:	68fb      	ldr	r3, [r7, #12]
 800e994:	681b      	ldr	r3, [r3, #0]
 800e996:	699b      	ldr	r3, [r3, #24]
 800e998:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800e99a:	69bb      	ldr	r3, [r7, #24]
 800e99c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e9a0:	2b00      	cmp	r3, #0
 800e9a2:	d00b      	beq.n	800e9bc <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800e9a4:	6a3b      	ldr	r3, [r7, #32]
 800e9a6:	f043 0301 	orr.w	r3, r3, #1
 800e9aa:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800e9ac:	68fb      	ldr	r3, [r7, #12]
 800e9ae:	681b      	ldr	r3, [r3, #0]
 800e9b0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e9b4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9b6:	2301      	movs	r3, #1
 800e9b8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800e9bc:	69bb      	ldr	r3, [r7, #24]
 800e9be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800e9c2:	2b00      	cmp	r3, #0
 800e9c4:	d00b      	beq.n	800e9de <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800e9c6:	6a3b      	ldr	r3, [r7, #32]
 800e9c8:	f043 0308 	orr.w	r3, r3, #8
 800e9cc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800e9ce:	68fb      	ldr	r3, [r7, #12]
 800e9d0:	681b      	ldr	r3, [r3, #0]
 800e9d2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e9d6:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9d8:	2301      	movs	r3, #1
 800e9da:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800e9de:	69bb      	ldr	r3, [r7, #24]
 800e9e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e9e4:	2b00      	cmp	r3, #0
 800e9e6:	d00b      	beq.n	800ea00 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800e9e8:	6a3b      	ldr	r3, [r7, #32]
 800e9ea:	f043 0302 	orr.w	r3, r3, #2
 800e9ee:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800e9f0:	68fb      	ldr	r3, [r7, #12]
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800e9f8:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800e9fa:	2301      	movs	r3, #1
 800e9fc:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ea00:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ea04:	2b00      	cmp	r3, #0
 800ea06:	d01c      	beq.n	800ea42 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ea08:	68f8      	ldr	r0, [r7, #12]
 800ea0a:	f7ff fe3b 	bl	800e684 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ea0e:	68fb      	ldr	r3, [r7, #12]
 800ea10:	681b      	ldr	r3, [r3, #0]
 800ea12:	6859      	ldr	r1, [r3, #4]
 800ea14:	68fb      	ldr	r3, [r7, #12]
 800ea16:	681a      	ldr	r2, [r3, #0]
 800ea18:	4b0d      	ldr	r3, [pc, #52]	@ (800ea50 <I2C_IsErrorOccurred+0x1bc>)
 800ea1a:	400b      	ands	r3, r1
 800ea1c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ea1e:	68fb      	ldr	r3, [r7, #12]
 800ea20:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea22:	6a3b      	ldr	r3, [r7, #32]
 800ea24:	431a      	orrs	r2, r3
 800ea26:	68fb      	ldr	r3, [r7, #12]
 800ea28:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ea2a:	68fb      	ldr	r3, [r7, #12]
 800ea2c:	2220      	movs	r2, #32
 800ea2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea32:	68fb      	ldr	r3, [r7, #12]
 800ea34:	2200      	movs	r2, #0
 800ea36:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ea3a:	68fb      	ldr	r3, [r7, #12]
 800ea3c:	2200      	movs	r2, #0
 800ea3e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800ea42:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3728      	adds	r7, #40	@ 0x28
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}
 800ea4e:	bf00      	nop
 800ea50:	fe00e800 	.word	0xfe00e800

0800ea54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800ea54:	b480      	push	{r7}
 800ea56:	b087      	sub	sp, #28
 800ea58:	af00      	add	r7, sp, #0
 800ea5a:	60f8      	str	r0, [r7, #12]
 800ea5c:	607b      	str	r3, [r7, #4]
 800ea5e:	460b      	mov	r3, r1
 800ea60:	817b      	strh	r3, [r7, #10]
 800ea62:	4613      	mov	r3, r2
 800ea64:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea66:	897b      	ldrh	r3, [r7, #10]
 800ea68:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea6c:	7a7b      	ldrb	r3, [r7, #9]
 800ea6e:	041b      	lsls	r3, r3, #16
 800ea70:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea74:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800ea7a:	6a3b      	ldr	r3, [r7, #32]
 800ea7c:	4313      	orrs	r3, r2
 800ea7e:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800ea82:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800ea84:	68fb      	ldr	r3, [r7, #12]
 800ea86:	681b      	ldr	r3, [r3, #0]
 800ea88:	685a      	ldr	r2, [r3, #4]
 800ea8a:	6a3b      	ldr	r3, [r7, #32]
 800ea8c:	0d5b      	lsrs	r3, r3, #21
 800ea8e:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800ea92:	4b08      	ldr	r3, [pc, #32]	@ (800eab4 <I2C_TransferConfig+0x60>)
 800ea94:	430b      	orrs	r3, r1
 800ea96:	43db      	mvns	r3, r3
 800ea98:	ea02 0103 	and.w	r1, r2, r3
 800ea9c:	68fb      	ldr	r3, [r7, #12]
 800ea9e:	681b      	ldr	r3, [r3, #0]
 800eaa0:	697a      	ldr	r2, [r7, #20]
 800eaa2:	430a      	orrs	r2, r1
 800eaa4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800eaa6:	bf00      	nop
 800eaa8:	371c      	adds	r7, #28
 800eaaa:	46bd      	mov	sp, r7
 800eaac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eab0:	4770      	bx	lr
 800eab2:	bf00      	nop
 800eab4:	03ff63ff 	.word	0x03ff63ff

0800eab8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800eab8:	b480      	push	{r7}
 800eaba:	b083      	sub	sp, #12
 800eabc:	af00      	add	r7, sp, #0
 800eabe:	6078      	str	r0, [r7, #4]
 800eac0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eac2:	687b      	ldr	r3, [r7, #4]
 800eac4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eac8:	b2db      	uxtb	r3, r3
 800eaca:	2b20      	cmp	r3, #32
 800eacc:	d138      	bne.n	800eb40 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800ead4:	2b01      	cmp	r3, #1
 800ead6:	d101      	bne.n	800eadc <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800ead8:	2302      	movs	r3, #2
 800eada:	e032      	b.n	800eb42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800eadc:	687b      	ldr	r3, [r7, #4]
 800eade:	2201      	movs	r2, #1
 800eae0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eae4:	687b      	ldr	r3, [r7, #4]
 800eae6:	2224      	movs	r2, #36	@ 0x24
 800eae8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eaec:	687b      	ldr	r3, [r7, #4]
 800eaee:	681b      	ldr	r3, [r3, #0]
 800eaf0:	681a      	ldr	r2, [r3, #0]
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	681b      	ldr	r3, [r3, #0]
 800eaf6:	f022 0201 	bic.w	r2, r2, #1
 800eafa:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800eafc:	687b      	ldr	r3, [r7, #4]
 800eafe:	681b      	ldr	r3, [r3, #0]
 800eb00:	681a      	ldr	r2, [r3, #0]
 800eb02:	687b      	ldr	r3, [r7, #4]
 800eb04:	681b      	ldr	r3, [r3, #0]
 800eb06:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800eb0a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800eb0c:	687b      	ldr	r3, [r7, #4]
 800eb0e:	681b      	ldr	r3, [r3, #0]
 800eb10:	6819      	ldr	r1, [r3, #0]
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	681b      	ldr	r3, [r3, #0]
 800eb16:	683a      	ldr	r2, [r7, #0]
 800eb18:	430a      	orrs	r2, r1
 800eb1a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	681a      	ldr	r2, [r3, #0]
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	681b      	ldr	r3, [r3, #0]
 800eb26:	f042 0201 	orr.w	r2, r2, #1
 800eb2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800eb2c:	687b      	ldr	r3, [r7, #4]
 800eb2e:	2220      	movs	r2, #32
 800eb30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	2200      	movs	r2, #0
 800eb38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800eb3c:	2300      	movs	r3, #0
 800eb3e:	e000      	b.n	800eb42 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800eb40:	2302      	movs	r3, #2
  }
}
 800eb42:	4618      	mov	r0, r3
 800eb44:	370c      	adds	r7, #12
 800eb46:	46bd      	mov	sp, r7
 800eb48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eb4c:	4770      	bx	lr

0800eb4e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800eb4e:	b480      	push	{r7}
 800eb50:	b085      	sub	sp, #20
 800eb52:	af00      	add	r7, sp, #0
 800eb54:	6078      	str	r0, [r7, #4]
 800eb56:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800eb58:	687b      	ldr	r3, [r7, #4]
 800eb5a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800eb5e:	b2db      	uxtb	r3, r3
 800eb60:	2b20      	cmp	r3, #32
 800eb62:	d139      	bne.n	800ebd8 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800eb6a:	2b01      	cmp	r3, #1
 800eb6c:	d101      	bne.n	800eb72 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800eb6e:	2302      	movs	r3, #2
 800eb70:	e033      	b.n	800ebda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800eb72:	687b      	ldr	r3, [r7, #4]
 800eb74:	2201      	movs	r2, #1
 800eb76:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800eb7a:	687b      	ldr	r3, [r7, #4]
 800eb7c:	2224      	movs	r2, #36	@ 0x24
 800eb7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800eb82:	687b      	ldr	r3, [r7, #4]
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	681a      	ldr	r2, [r3, #0]
 800eb88:	687b      	ldr	r3, [r7, #4]
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f022 0201 	bic.w	r2, r2, #1
 800eb90:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800eb92:	687b      	ldr	r3, [r7, #4]
 800eb94:	681b      	ldr	r3, [r3, #0]
 800eb96:	681b      	ldr	r3, [r3, #0]
 800eb98:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800eb9a:	68fb      	ldr	r3, [r7, #12]
 800eb9c:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800eba0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800eba2:	683b      	ldr	r3, [r7, #0]
 800eba4:	021b      	lsls	r3, r3, #8
 800eba6:	68fa      	ldr	r2, [r7, #12]
 800eba8:	4313      	orrs	r3, r2
 800ebaa:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800ebac:	687b      	ldr	r3, [r7, #4]
 800ebae:	681b      	ldr	r3, [r3, #0]
 800ebb0:	68fa      	ldr	r2, [r7, #12]
 800ebb2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800ebb4:	687b      	ldr	r3, [r7, #4]
 800ebb6:	681b      	ldr	r3, [r3, #0]
 800ebb8:	681a      	ldr	r2, [r3, #0]
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	681b      	ldr	r3, [r3, #0]
 800ebbe:	f042 0201 	orr.w	r2, r2, #1
 800ebc2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800ebc4:	687b      	ldr	r3, [r7, #4]
 800ebc6:	2220      	movs	r2, #32
 800ebc8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800ebcc:	687b      	ldr	r3, [r7, #4]
 800ebce:	2200      	movs	r2, #0
 800ebd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800ebd4:	2300      	movs	r3, #0
 800ebd6:	e000      	b.n	800ebda <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800ebd8:	2302      	movs	r3, #2
  }
}
 800ebda:	4618      	mov	r0, r3
 800ebdc:	3714      	adds	r7, #20
 800ebde:	46bd      	mov	sp, r7
 800ebe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ebe4:	4770      	bx	lr

0800ebe6 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 800ebe6:	b580      	push	{r7, lr}
 800ebe8:	b084      	sub	sp, #16
 800ebea:	af00      	add	r7, sp, #0
 800ebec:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 800ebee:	687b      	ldr	r3, [r7, #4]
 800ebf0:	2b00      	cmp	r3, #0
 800ebf2:	d101      	bne.n	800ebf8 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 800ebf4:	2301      	movs	r3, #1
 800ebf6:	e08f      	b.n	800ed18 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 800ebfe:	b2db      	uxtb	r3, r3
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	d106      	bne.n	800ec12 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2200      	movs	r2, #0
 800ec08:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 800ec0c:	6878      	ldr	r0, [r7, #4]
 800ec0e:	f000 f887 	bl	800ed20 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	2202      	movs	r2, #2
 800ec16:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	681b      	ldr	r3, [r3, #0]
 800ec1e:	699a      	ldr	r2, [r3, #24]
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	681b      	ldr	r3, [r3, #0]
 800ec24:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 800ec28:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec2a:	687b      	ldr	r3, [r7, #4]
 800ec2c:	681b      	ldr	r3, [r3, #0]
 800ec2e:	6999      	ldr	r1, [r3, #24]
 800ec30:	687b      	ldr	r3, [r7, #4]
 800ec32:	685a      	ldr	r2, [r3, #4]
 800ec34:	687b      	ldr	r3, [r7, #4]
 800ec36:	689b      	ldr	r3, [r3, #8]
 800ec38:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec3a:	687b      	ldr	r3, [r7, #4]
 800ec3c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec3e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 800ec40:	687b      	ldr	r3, [r7, #4]
 800ec42:	691b      	ldr	r3, [r3, #16]
 800ec44:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 800ec46:	687b      	ldr	r3, [r7, #4]
 800ec48:	681b      	ldr	r3, [r3, #0]
 800ec4a:	430a      	orrs	r2, r1
 800ec4c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 800ec4e:	687b      	ldr	r3, [r7, #4]
 800ec50:	695b      	ldr	r3, [r3, #20]
 800ec52:	041b      	lsls	r3, r3, #16
 800ec54:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 800ec56:	687b      	ldr	r3, [r7, #4]
 800ec58:	6999      	ldr	r1, [r3, #24]
 800ec5a:	687b      	ldr	r3, [r7, #4]
 800ec5c:	681b      	ldr	r3, [r3, #0]
 800ec5e:	68fa      	ldr	r2, [r7, #12]
 800ec60:	430a      	orrs	r2, r1
 800ec62:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	69db      	ldr	r3, [r3, #28]
 800ec68:	041b      	lsls	r3, r3, #16
 800ec6a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6a19      	ldr	r1, [r3, #32]
 800ec70:	687b      	ldr	r3, [r7, #4]
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	68fa      	ldr	r2, [r7, #12]
 800ec76:	430a      	orrs	r2, r1
 800ec78:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 800ec7a:	687b      	ldr	r3, [r7, #4]
 800ec7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ec7e:	041b      	lsls	r3, r3, #16
 800ec80:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 800ec82:	687b      	ldr	r3, [r7, #4]
 800ec84:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800ec86:	687b      	ldr	r3, [r7, #4]
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	68fa      	ldr	r2, [r7, #12]
 800ec8c:	430a      	orrs	r2, r1
 800ec8e:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 800ec90:	687b      	ldr	r3, [r7, #4]
 800ec92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ec94:	041b      	lsls	r3, r3, #16
 800ec96:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 800ec98:	687b      	ldr	r3, [r7, #4]
 800ec9a:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 800ec9c:	687b      	ldr	r3, [r7, #4]
 800ec9e:	681b      	ldr	r3, [r3, #0]
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	430a      	orrs	r2, r1
 800eca4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 800eca6:	687b      	ldr	r3, [r7, #4]
 800eca8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800ecac:	021b      	lsls	r3, r3, #8
 800ecae:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 800ecb0:	687b      	ldr	r3, [r7, #4]
 800ecb2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 800ecb6:	041b      	lsls	r3, r3, #16
 800ecb8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 800ecba:	687b      	ldr	r3, [r7, #4]
 800ecbc:	681b      	ldr	r3, [r3, #0]
 800ecbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ecc0:	687b      	ldr	r3, [r7, #4]
 800ecc2:	681b      	ldr	r3, [r3, #0]
 800ecc4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 800ecc8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	681b      	ldr	r3, [r3, #0]
 800ecce:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800ecd0:	68ba      	ldr	r2, [r7, #8]
 800ecd2:	68fb      	ldr	r3, [r7, #12]
 800ecd4:	4313      	orrs	r3, r2
 800ecd6:	687a      	ldr	r2, [r7, #4]
 800ecd8:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 800ecdc:	431a      	orrs	r2, r3
 800ecde:	687b      	ldr	r3, [r7, #4]
 800ece0:	681b      	ldr	r3, [r3, #0]
 800ece2:	430a      	orrs	r2, r1
 800ece4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 800ece6:	687b      	ldr	r3, [r7, #4]
 800ece8:	681b      	ldr	r3, [r3, #0]
 800ecea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	681b      	ldr	r3, [r3, #0]
 800ecf0:	f042 0206 	orr.w	r2, r2, #6
 800ecf4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 800ecf6:	687b      	ldr	r3, [r7, #4]
 800ecf8:	681b      	ldr	r3, [r3, #0]
 800ecfa:	699a      	ldr	r2, [r3, #24]
 800ecfc:	687b      	ldr	r3, [r7, #4]
 800ecfe:	681b      	ldr	r3, [r3, #0]
 800ed00:	f042 0201 	orr.w	r2, r2, #1
 800ed04:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 800ed06:	687b      	ldr	r3, [r7, #4]
 800ed08:	2200      	movs	r2, #0
 800ed0a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 800ed0e:	687b      	ldr	r3, [r7, #4]
 800ed10:	2201      	movs	r2, #1
 800ed12:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 800ed16:	2300      	movs	r3, #0
}
 800ed18:	4618      	mov	r0, r3
 800ed1a:	3710      	adds	r7, #16
 800ed1c:	46bd      	mov	sp, r7
 800ed1e:	bd80      	pop	{r7, pc}

0800ed20 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800ed20:	b480      	push	{r7}
 800ed22:	b083      	sub	sp, #12
 800ed24:	af00      	add	r7, sp, #0
 800ed26:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 800ed28:	bf00      	nop
 800ed2a:	370c      	adds	r7, #12
 800ed2c:	46bd      	mov	sp, r7
 800ed2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ed32:	4770      	bx	lr

0800ed34 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800ed34:	b5b0      	push	{r4, r5, r7, lr}
 800ed36:	b084      	sub	sp, #16
 800ed38:	af00      	add	r7, sp, #0
 800ed3a:	60f8      	str	r0, [r7, #12]
 800ed3c:	60b9      	str	r1, [r7, #8]
 800ed3e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 800ed40:	68fb      	ldr	r3, [r7, #12]
 800ed42:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 800ed46:	2b01      	cmp	r3, #1
 800ed48:	d101      	bne.n	800ed4e <HAL_LTDC_ConfigLayer+0x1a>
 800ed4a:	2302      	movs	r3, #2
 800ed4c:	e02c      	b.n	800eda8 <HAL_LTDC_ConfigLayer+0x74>
 800ed4e:	68fb      	ldr	r3, [r7, #12]
 800ed50:	2201      	movs	r2, #1
 800ed52:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	2202      	movs	r2, #2
 800ed5a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 800ed5e:	68fa      	ldr	r2, [r7, #12]
 800ed60:	687b      	ldr	r3, [r7, #4]
 800ed62:	2134      	movs	r1, #52	@ 0x34
 800ed64:	fb01 f303 	mul.w	r3, r1, r3
 800ed68:	4413      	add	r3, r2
 800ed6a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 800ed6e:	68bb      	ldr	r3, [r7, #8]
 800ed70:	4614      	mov	r4, r2
 800ed72:	461d      	mov	r5, r3
 800ed74:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed76:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed78:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed7a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800ed7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800ed80:	682b      	ldr	r3, [r5, #0]
 800ed82:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 800ed84:	687a      	ldr	r2, [r7, #4]
 800ed86:	68b9      	ldr	r1, [r7, #8]
 800ed88:	68f8      	ldr	r0, [r7, #12]
 800ed8a:	f000 f811 	bl	800edb0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 800ed8e:	68fb      	ldr	r3, [r7, #12]
 800ed90:	681b      	ldr	r3, [r3, #0]
 800ed92:	2201      	movs	r2, #1
 800ed94:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 800ed96:	68fb      	ldr	r3, [r7, #12]
 800ed98:	2201      	movs	r2, #1
 800ed9a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 800ed9e:	68fb      	ldr	r3, [r7, #12]
 800eda0:	2200      	movs	r2, #0
 800eda2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 800eda6:	2300      	movs	r3, #0
}
 800eda8:	4618      	mov	r0, r3
 800edaa:	3710      	adds	r7, #16
 800edac:	46bd      	mov	sp, r7
 800edae:	bdb0      	pop	{r4, r5, r7, pc}

0800edb0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 800edb0:	b480      	push	{r7}
 800edb2:	b089      	sub	sp, #36	@ 0x24
 800edb4:	af00      	add	r7, sp, #0
 800edb6:	60f8      	str	r0, [r7, #12]
 800edb8:	60b9      	str	r1, [r7, #8]
 800edba:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 800edbc:	68bb      	ldr	r3, [r7, #8]
 800edbe:	685a      	ldr	r2, [r3, #4]
 800edc0:	68fb      	ldr	r3, [r7, #12]
 800edc2:	681b      	ldr	r3, [r3, #0]
 800edc4:	68db      	ldr	r3, [r3, #12]
 800edc6:	0c1b      	lsrs	r3, r3, #16
 800edc8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800edcc:	4413      	add	r3, r2
 800edce:	041b      	lsls	r3, r3, #16
 800edd0:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 800edd2:	68fb      	ldr	r3, [r7, #12]
 800edd4:	681b      	ldr	r3, [r3, #0]
 800edd6:	461a      	mov	r2, r3
 800edd8:	687b      	ldr	r3, [r7, #4]
 800edda:	01db      	lsls	r3, r3, #7
 800eddc:	4413      	add	r3, r2
 800edde:	3384      	adds	r3, #132	@ 0x84
 800ede0:	685b      	ldr	r3, [r3, #4]
 800ede2:	68fa      	ldr	r2, [r7, #12]
 800ede4:	6812      	ldr	r2, [r2, #0]
 800ede6:	4611      	mov	r1, r2
 800ede8:	687a      	ldr	r2, [r7, #4]
 800edea:	01d2      	lsls	r2, r2, #7
 800edec:	440a      	add	r2, r1
 800edee:	3284      	adds	r2, #132	@ 0x84
 800edf0:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800edf4:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800edf6:	68bb      	ldr	r3, [r7, #8]
 800edf8:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800edfa:	68fb      	ldr	r3, [r7, #12]
 800edfc:	681b      	ldr	r3, [r3, #0]
 800edfe:	68db      	ldr	r3, [r3, #12]
 800ee00:	0c1b      	lsrs	r3, r3, #16
 800ee02:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ee06:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ee08:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	681b      	ldr	r3, [r3, #0]
 800ee0e:	4619      	mov	r1, r3
 800ee10:	687b      	ldr	r3, [r7, #4]
 800ee12:	01db      	lsls	r3, r3, #7
 800ee14:	440b      	add	r3, r1
 800ee16:	3384      	adds	r3, #132	@ 0x84
 800ee18:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 800ee1a:	69fb      	ldr	r3, [r7, #28]
 800ee1c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 800ee1e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 800ee20:	68bb      	ldr	r3, [r7, #8]
 800ee22:	68da      	ldr	r2, [r3, #12]
 800ee24:	68fb      	ldr	r3, [r7, #12]
 800ee26:	681b      	ldr	r3, [r3, #0]
 800ee28:	68db      	ldr	r3, [r3, #12]
 800ee2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ee2e:	4413      	add	r3, r2
 800ee30:	041b      	lsls	r3, r3, #16
 800ee32:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 800ee34:	68fb      	ldr	r3, [r7, #12]
 800ee36:	681b      	ldr	r3, [r3, #0]
 800ee38:	461a      	mov	r2, r3
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	01db      	lsls	r3, r3, #7
 800ee3e:	4413      	add	r3, r2
 800ee40:	3384      	adds	r3, #132	@ 0x84
 800ee42:	689b      	ldr	r3, [r3, #8]
 800ee44:	68fa      	ldr	r2, [r7, #12]
 800ee46:	6812      	ldr	r2, [r2, #0]
 800ee48:	4611      	mov	r1, r2
 800ee4a:	687a      	ldr	r2, [r7, #4]
 800ee4c:	01d2      	lsls	r2, r2, #7
 800ee4e:	440a      	add	r2, r1
 800ee50:	3284      	adds	r2, #132	@ 0x84
 800ee52:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 800ee56:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 800ee58:	68bb      	ldr	r3, [r7, #8]
 800ee5a:	689a      	ldr	r2, [r3, #8]
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	681b      	ldr	r3, [r3, #0]
 800ee60:	68db      	ldr	r3, [r3, #12]
 800ee62:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800ee66:	4413      	add	r3, r2
 800ee68:	1c5a      	adds	r2, r3, #1
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	681b      	ldr	r3, [r3, #0]
 800ee6e:	4619      	mov	r1, r3
 800ee70:	687b      	ldr	r3, [r7, #4]
 800ee72:	01db      	lsls	r3, r3, #7
 800ee74:	440b      	add	r3, r1
 800ee76:	3384      	adds	r3, #132	@ 0x84
 800ee78:	4619      	mov	r1, r3
 800ee7a:	69fb      	ldr	r3, [r7, #28]
 800ee7c:	4313      	orrs	r3, r2
 800ee7e:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	681b      	ldr	r3, [r3, #0]
 800ee84:	461a      	mov	r2, r3
 800ee86:	687b      	ldr	r3, [r7, #4]
 800ee88:	01db      	lsls	r3, r3, #7
 800ee8a:	4413      	add	r3, r2
 800ee8c:	3384      	adds	r3, #132	@ 0x84
 800ee8e:	691b      	ldr	r3, [r3, #16]
 800ee90:	68fa      	ldr	r2, [r7, #12]
 800ee92:	6812      	ldr	r2, [r2, #0]
 800ee94:	4611      	mov	r1, r2
 800ee96:	687a      	ldr	r2, [r7, #4]
 800ee98:	01d2      	lsls	r2, r2, #7
 800ee9a:	440a      	add	r2, r1
 800ee9c:	3284      	adds	r2, #132	@ 0x84
 800ee9e:	f023 0307 	bic.w	r3, r3, #7
 800eea2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	681b      	ldr	r3, [r3, #0]
 800eea8:	461a      	mov	r2, r3
 800eeaa:	687b      	ldr	r3, [r7, #4]
 800eeac:	01db      	lsls	r3, r3, #7
 800eeae:	4413      	add	r3, r2
 800eeb0:	3384      	adds	r3, #132	@ 0x84
 800eeb2:	461a      	mov	r2, r3
 800eeb4:	68bb      	ldr	r3, [r7, #8]
 800eeb6:	691b      	ldr	r3, [r3, #16]
 800eeb8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 800eeba:	68bb      	ldr	r3, [r7, #8]
 800eebc:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 800eec0:	021b      	lsls	r3, r3, #8
 800eec2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 800eec4:	68bb      	ldr	r3, [r7, #8]
 800eec6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 800eeca:	041b      	lsls	r3, r3, #16
 800eecc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 800eece:	68bb      	ldr	r3, [r7, #8]
 800eed0:	699b      	ldr	r3, [r3, #24]
 800eed2:	061b      	lsls	r3, r3, #24
 800eed4:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 800eed6:	68bb      	ldr	r3, [r7, #8]
 800eed8:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 800eedc:	461a      	mov	r2, r3
 800eede:	69fb      	ldr	r3, [r7, #28]
 800eee0:	431a      	orrs	r2, r3
 800eee2:	69bb      	ldr	r3, [r7, #24]
 800eee4:	431a      	orrs	r2, r3
 800eee6:	68fb      	ldr	r3, [r7, #12]
 800eee8:	681b      	ldr	r3, [r3, #0]
 800eeea:	4619      	mov	r1, r3
 800eeec:	687b      	ldr	r3, [r7, #4]
 800eeee:	01db      	lsls	r3, r3, #7
 800eef0:	440b      	add	r3, r1
 800eef2:	3384      	adds	r3, #132	@ 0x84
 800eef4:	4619      	mov	r1, r3
 800eef6:	697b      	ldr	r3, [r7, #20]
 800eef8:	4313      	orrs	r3, r2
 800eefa:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	681b      	ldr	r3, [r3, #0]
 800ef00:	461a      	mov	r2, r3
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	01db      	lsls	r3, r3, #7
 800ef06:	4413      	add	r3, r2
 800ef08:	3384      	adds	r3, #132	@ 0x84
 800ef0a:	695b      	ldr	r3, [r3, #20]
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	6812      	ldr	r2, [r2, #0]
 800ef10:	4611      	mov	r1, r2
 800ef12:	687a      	ldr	r2, [r7, #4]
 800ef14:	01d2      	lsls	r2, r2, #7
 800ef16:	440a      	add	r2, r1
 800ef18:	3284      	adds	r2, #132	@ 0x84
 800ef1a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800ef1e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	681b      	ldr	r3, [r3, #0]
 800ef24:	461a      	mov	r2, r3
 800ef26:	687b      	ldr	r3, [r7, #4]
 800ef28:	01db      	lsls	r3, r3, #7
 800ef2a:	4413      	add	r3, r2
 800ef2c:	3384      	adds	r3, #132	@ 0x84
 800ef2e:	461a      	mov	r2, r3
 800ef30:	68bb      	ldr	r3, [r7, #8]
 800ef32:	695b      	ldr	r3, [r3, #20]
 800ef34:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	461a      	mov	r2, r3
 800ef3c:	687b      	ldr	r3, [r7, #4]
 800ef3e:	01db      	lsls	r3, r3, #7
 800ef40:	4413      	add	r3, r2
 800ef42:	3384      	adds	r3, #132	@ 0x84
 800ef44:	69da      	ldr	r2, [r3, #28]
 800ef46:	68fb      	ldr	r3, [r7, #12]
 800ef48:	681b      	ldr	r3, [r3, #0]
 800ef4a:	4619      	mov	r1, r3
 800ef4c:	687b      	ldr	r3, [r7, #4]
 800ef4e:	01db      	lsls	r3, r3, #7
 800ef50:	440b      	add	r3, r1
 800ef52:	3384      	adds	r3, #132	@ 0x84
 800ef54:	4619      	mov	r1, r3
 800ef56:	4b4f      	ldr	r3, [pc, #316]	@ (800f094 <LTDC_SetConfig+0x2e4>)
 800ef58:	4013      	ands	r3, r2
 800ef5a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 800ef5c:	68bb      	ldr	r3, [r7, #8]
 800ef5e:	69da      	ldr	r2, [r3, #28]
 800ef60:	68bb      	ldr	r3, [r7, #8]
 800ef62:	6a1b      	ldr	r3, [r3, #32]
 800ef64:	68f9      	ldr	r1, [r7, #12]
 800ef66:	6809      	ldr	r1, [r1, #0]
 800ef68:	4608      	mov	r0, r1
 800ef6a:	6879      	ldr	r1, [r7, #4]
 800ef6c:	01c9      	lsls	r1, r1, #7
 800ef6e:	4401      	add	r1, r0
 800ef70:	3184      	adds	r1, #132	@ 0x84
 800ef72:	4313      	orrs	r3, r2
 800ef74:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	681b      	ldr	r3, [r3, #0]
 800ef7a:	461a      	mov	r2, r3
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	01db      	lsls	r3, r3, #7
 800ef80:	4413      	add	r3, r2
 800ef82:	3384      	adds	r3, #132	@ 0x84
 800ef84:	461a      	mov	r2, r3
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef8a:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800ef8c:	68bb      	ldr	r3, [r7, #8]
 800ef8e:	691b      	ldr	r3, [r3, #16]
 800ef90:	2b00      	cmp	r3, #0
 800ef92:	d102      	bne.n	800ef9a <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 800ef94:	2304      	movs	r3, #4
 800ef96:	61fb      	str	r3, [r7, #28]
 800ef98:	e01b      	b.n	800efd2 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 800ef9a:	68bb      	ldr	r3, [r7, #8]
 800ef9c:	691b      	ldr	r3, [r3, #16]
 800ef9e:	2b01      	cmp	r3, #1
 800efa0:	d102      	bne.n	800efa8 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 800efa2:	2303      	movs	r3, #3
 800efa4:	61fb      	str	r3, [r7, #28]
 800efa6:	e014      	b.n	800efd2 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800efa8:	68bb      	ldr	r3, [r7, #8]
 800efaa:	691b      	ldr	r3, [r3, #16]
 800efac:	2b04      	cmp	r3, #4
 800efae:	d00b      	beq.n	800efc8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800efb0:	68bb      	ldr	r3, [r7, #8]
 800efb2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 800efb4:	2b02      	cmp	r3, #2
 800efb6:	d007      	beq.n	800efc8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800efb8:	68bb      	ldr	r3, [r7, #8]
 800efba:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 800efbc:	2b03      	cmp	r3, #3
 800efbe:	d003      	beq.n	800efc8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 800efc0:	68bb      	ldr	r3, [r7, #8]
 800efc2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 800efc4:	2b07      	cmp	r3, #7
 800efc6:	d102      	bne.n	800efce <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 800efc8:	2302      	movs	r3, #2
 800efca:	61fb      	str	r3, [r7, #28]
 800efcc:	e001      	b.n	800efd2 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 800efce:	2301      	movs	r3, #1
 800efd0:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 800efd2:	68fb      	ldr	r3, [r7, #12]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	461a      	mov	r2, r3
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	01db      	lsls	r3, r3, #7
 800efdc:	4413      	add	r3, r2
 800efde:	3384      	adds	r3, #132	@ 0x84
 800efe0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800efe2:	68fa      	ldr	r2, [r7, #12]
 800efe4:	6812      	ldr	r2, [r2, #0]
 800efe6:	4611      	mov	r1, r2
 800efe8:	687a      	ldr	r2, [r7, #4]
 800efea:	01d2      	lsls	r2, r2, #7
 800efec:	440a      	add	r2, r1
 800efee:	3284      	adds	r2, #132	@ 0x84
 800eff0:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 800eff4:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800eff6:	68bb      	ldr	r3, [r7, #8]
 800eff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800effa:	69fa      	ldr	r2, [r7, #28]
 800effc:	fb02 f303 	mul.w	r3, r2, r3
 800f000:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	6859      	ldr	r1, [r3, #4]
 800f006:	68bb      	ldr	r3, [r7, #8]
 800f008:	681b      	ldr	r3, [r3, #0]
 800f00a:	1acb      	subs	r3, r1, r3
 800f00c:	69f9      	ldr	r1, [r7, #28]
 800f00e:	fb01 f303 	mul.w	r3, r1, r3
 800f012:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 800f014:	68f9      	ldr	r1, [r7, #12]
 800f016:	6809      	ldr	r1, [r1, #0]
 800f018:	4608      	mov	r0, r1
 800f01a:	6879      	ldr	r1, [r7, #4]
 800f01c:	01c9      	lsls	r1, r1, #7
 800f01e:	4401      	add	r1, r0
 800f020:	3184      	adds	r1, #132	@ 0x84
 800f022:	4313      	orrs	r3, r2
 800f024:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	461a      	mov	r2, r3
 800f02c:	687b      	ldr	r3, [r7, #4]
 800f02e:	01db      	lsls	r3, r3, #7
 800f030:	4413      	add	r3, r2
 800f032:	3384      	adds	r3, #132	@ 0x84
 800f034:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800f036:	68fb      	ldr	r3, [r7, #12]
 800f038:	681b      	ldr	r3, [r3, #0]
 800f03a:	4619      	mov	r1, r3
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	01db      	lsls	r3, r3, #7
 800f040:	440b      	add	r3, r1
 800f042:	3384      	adds	r3, #132	@ 0x84
 800f044:	4619      	mov	r1, r3
 800f046:	4b14      	ldr	r3, [pc, #80]	@ (800f098 <LTDC_SetConfig+0x2e8>)
 800f048:	4013      	ands	r3, r2
 800f04a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 800f04c:	68fb      	ldr	r3, [r7, #12]
 800f04e:	681b      	ldr	r3, [r3, #0]
 800f050:	461a      	mov	r2, r3
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	01db      	lsls	r3, r3, #7
 800f056:	4413      	add	r3, r2
 800f058:	3384      	adds	r3, #132	@ 0x84
 800f05a:	461a      	mov	r2, r3
 800f05c:	68bb      	ldr	r3, [r7, #8]
 800f05e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f060:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 800f062:	68fb      	ldr	r3, [r7, #12]
 800f064:	681b      	ldr	r3, [r3, #0]
 800f066:	461a      	mov	r2, r3
 800f068:	687b      	ldr	r3, [r7, #4]
 800f06a:	01db      	lsls	r3, r3, #7
 800f06c:	4413      	add	r3, r2
 800f06e:	3384      	adds	r3, #132	@ 0x84
 800f070:	681b      	ldr	r3, [r3, #0]
 800f072:	68fa      	ldr	r2, [r7, #12]
 800f074:	6812      	ldr	r2, [r2, #0]
 800f076:	4611      	mov	r1, r2
 800f078:	687a      	ldr	r2, [r7, #4]
 800f07a:	01d2      	lsls	r2, r2, #7
 800f07c:	440a      	add	r2, r1
 800f07e:	3284      	adds	r2, #132	@ 0x84
 800f080:	f043 0301 	orr.w	r3, r3, #1
 800f084:	6013      	str	r3, [r2, #0]
}
 800f086:	bf00      	nop
 800f088:	3724      	adds	r7, #36	@ 0x24
 800f08a:	46bd      	mov	sp, r7
 800f08c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f090:	4770      	bx	lr
 800f092:	bf00      	nop
 800f094:	fffff8f8 	.word	0xfffff8f8
 800f098:	fffff800 	.word	0xfffff800

0800f09c <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f09c:	b580      	push	{r7, lr}
 800f09e:	b084      	sub	sp, #16
 800f0a0:	af00      	add	r7, sp, #0
 800f0a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800f0a4:	f7fa f800 	bl	80090a8 <HAL_GetTick>
 800f0a8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f0aa:	687b      	ldr	r3, [r7, #4]
 800f0ac:	2b00      	cmp	r3, #0
 800f0ae:	d101      	bne.n	800f0b4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 800f0b0:	2301      	movs	r3, #1
 800f0b2:	e03b      	b.n	800f12c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 800f0b4:	687b      	ldr	r3, [r7, #4]
 800f0b6:	2200      	movs	r2, #0
 800f0b8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 800f0bc:	687b      	ldr	r3, [r7, #4]
 800f0be:	2202      	movs	r2, #2
 800f0c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	681b      	ldr	r3, [r3, #0]
 800f0c8:	68da      	ldr	r2, [r3, #12]
 800f0ca:	687b      	ldr	r3, [r7, #4]
 800f0cc:	681b      	ldr	r3, [r3, #0]
 800f0ce:	f022 0201 	bic.w	r2, r2, #1
 800f0d2:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f0d4:	e00f      	b.n	800f0f6 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 800f0d6:	f7f9 ffe7 	bl	80090a8 <HAL_GetTick>
 800f0da:	4602      	mov	r2, r0
 800f0dc:	68fb      	ldr	r3, [r7, #12]
 800f0de:	1ad3      	subs	r3, r2, r3
 800f0e0:	2b05      	cmp	r3, #5
 800f0e2:	d908      	bls.n	800f0f6 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 800f0e4:	687b      	ldr	r3, [r7, #4]
 800f0e6:	2240      	movs	r2, #64	@ 0x40
 800f0e8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f0ea:	687b      	ldr	r3, [r7, #4]
 800f0ec:	2203      	movs	r2, #3
 800f0ee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 800f0f2:	2301      	movs	r3, #1
 800f0f4:	e01a      	b.n	800f12c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f0f6:	687b      	ldr	r3, [r7, #4]
 800f0f8:	681b      	ldr	r3, [r3, #0]
 800f0fa:	68db      	ldr	r3, [r3, #12]
 800f0fc:	f003 0301 	and.w	r3, r3, #1
 800f100:	2b00      	cmp	r3, #0
 800f102:	d1e8      	bne.n	800f0d6 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 800f104:	6878      	ldr	r0, [r7, #4]
 800f106:	f000 f9c1 	bl	800f48c <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f10a:	687b      	ldr	r3, [r7, #4]
 800f10c:	2200      	movs	r2, #0
 800f10e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	2200      	movs	r2, #0
 800f114:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f116:	687b      	ldr	r3, [r7, #4]
 800f118:	2200      	movs	r2, #0
 800f11a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f11c:	687b      	ldr	r3, [r7, #4]
 800f11e:	2200      	movs	r2, #0
 800f120:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 800f122:	687b      	ldr	r3, [r7, #4]
 800f124:	2201      	movs	r2, #1
 800f126:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800f12a:	2300      	movs	r3, #0
}
 800f12c:	4618      	mov	r0, r3
 800f12e:	3710      	adds	r7, #16
 800f130:	46bd      	mov	sp, r7
 800f132:	bd80      	pop	{r7, pc}

0800f134 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 800f134:	b480      	push	{r7}
 800f136:	b083      	sub	sp, #12
 800f138:	af00      	add	r7, sp, #0
 800f13a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 800f13c:	687b      	ldr	r3, [r7, #4]
 800f13e:	2b00      	cmp	r3, #0
 800f140:	d101      	bne.n	800f146 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 800f142:	2301      	movs	r3, #1
 800f144:	e048      	b.n	800f1d8 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 800f146:	687b      	ldr	r3, [r7, #4]
 800f148:	681b      	ldr	r3, [r3, #0]
 800f14a:	68da      	ldr	r2, [r3, #12]
 800f14c:	687b      	ldr	r3, [r7, #4]
 800f14e:	681b      	ldr	r3, [r3, #0]
 800f150:	f022 0201 	bic.w	r2, r2, #1
 800f154:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	2200      	movs	r2, #0
 800f15c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	681b      	ldr	r3, [r3, #0]
 800f162:	2200      	movs	r2, #0
 800f164:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 800f166:	687b      	ldr	r3, [r7, #4]
 800f168:	681b      	ldr	r3, [r3, #0]
 800f16a:	2200      	movs	r2, #0
 800f16c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 800f16e:	687b      	ldr	r3, [r7, #4]
 800f170:	681b      	ldr	r3, [r3, #0]
 800f172:	2200      	movs	r2, #0
 800f174:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 800f176:	687b      	ldr	r3, [r7, #4]
 800f178:	681b      	ldr	r3, [r3, #0]
 800f17a:	2200      	movs	r2, #0
 800f17c:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 800f17e:	687b      	ldr	r3, [r7, #4]
 800f180:	681b      	ldr	r3, [r3, #0]
 800f182:	2200      	movs	r2, #0
 800f184:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 800f186:	687b      	ldr	r3, [r7, #4]
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	2200      	movs	r2, #0
 800f18c:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	681b      	ldr	r3, [r3, #0]
 800f192:	2200      	movs	r2, #0
 800f194:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	681b      	ldr	r3, [r3, #0]
 800f19a:	2200      	movs	r2, #0
 800f19c:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 800f19e:	687b      	ldr	r3, [r7, #4]
 800f1a0:	681b      	ldr	r3, [r3, #0]
 800f1a2:	2200      	movs	r2, #0
 800f1a4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	681b      	ldr	r3, [r3, #0]
 800f1aa:	221f      	movs	r2, #31
 800f1ac:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 800f1b4:	687b      	ldr	r3, [r7, #4]
 800f1b6:	2200      	movs	r2, #0
 800f1b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 800f1ba:	687b      	ldr	r3, [r7, #4]
 800f1bc:	2200      	movs	r2, #0
 800f1be:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 800f1c0:	687b      	ldr	r3, [r7, #4]
 800f1c2:	2200      	movs	r2, #0
 800f1c4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	2200      	movs	r2, #0
 800f1ca:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 800f1ce:	687b      	ldr	r3, [r7, #4]
 800f1d0:	2200      	movs	r2, #0
 800f1d2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 800f1d6:	2300      	movs	r3, #0
}
 800f1d8:	4618      	mov	r0, r3
 800f1da:	370c      	adds	r7, #12
 800f1dc:	46bd      	mov	sp, r7
 800f1de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1e2:	4770      	bx	lr

0800f1e4 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 800f1e4:	b580      	push	{r7, lr}
 800f1e6:	b086      	sub	sp, #24
 800f1e8:	af00      	add	r7, sp, #0
 800f1ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800f1f0:	4b91      	ldr	r3, [pc, #580]	@ (800f438 <HAL_MDMA_IRQHandler+0x254>)
 800f1f2:	681b      	ldr	r3, [r3, #0]
 800f1f4:	4a91      	ldr	r2, [pc, #580]	@ (800f43c <HAL_MDMA_IRQHandler+0x258>)
 800f1f6:	fba2 2303 	umull	r2, r3, r2, r3
 800f1fa:	0a9b      	lsrs	r3, r3, #10
 800f1fc:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	681b      	ldr	r3, [r3, #0]
 800f202:	461a      	mov	r2, r3
 800f204:	4b8e      	ldr	r3, [pc, #568]	@ (800f440 <HAL_MDMA_IRQHandler+0x25c>)
 800f206:	4413      	add	r3, r2
 800f208:	099b      	lsrs	r3, r3, #6
 800f20a:	f003 031f 	and.w	r3, r3, #31
 800f20e:	2201      	movs	r2, #1
 800f210:	fa02 f303 	lsl.w	r3, r2, r3
 800f214:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 800f216:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 800f21a:	681a      	ldr	r2, [r3, #0]
 800f21c:	693b      	ldr	r3, [r7, #16]
 800f21e:	4013      	ands	r3, r2
 800f220:	2b00      	cmp	r3, #0
 800f222:	f000 812d 	beq.w	800f480 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	681b      	ldr	r3, [r3, #0]
 800f22c:	f003 0301 	and.w	r3, r3, #1
 800f230:	2b00      	cmp	r3, #0
 800f232:	d054      	beq.n	800f2de <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 800f234:	687b      	ldr	r3, [r7, #4]
 800f236:	681b      	ldr	r3, [r3, #0]
 800f238:	68db      	ldr	r3, [r3, #12]
 800f23a:	f003 0302 	and.w	r3, r3, #2
 800f23e:	2b00      	cmp	r3, #0
 800f240:	d04d      	beq.n	800f2de <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 800f242:	687b      	ldr	r3, [r7, #4]
 800f244:	681b      	ldr	r3, [r3, #0]
 800f246:	68da      	ldr	r2, [r3, #12]
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	681b      	ldr	r3, [r3, #0]
 800f24c:	f022 0202 	bic.w	r2, r2, #2
 800f250:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	681b      	ldr	r3, [r3, #0]
 800f256:	689b      	ldr	r3, [r3, #8]
 800f258:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 800f25a:	68fb      	ldr	r3, [r7, #12]
 800f25c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800f260:	2b00      	cmp	r3, #0
 800f262:	d106      	bne.n	800f272 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f268:	f043 0201 	orr.w	r2, r3, #1
 800f26c:	687b      	ldr	r3, [r7, #4]
 800f26e:	669a      	str	r2, [r3, #104]	@ 0x68
 800f270:	e005      	b.n	800f27e <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f276:	f043 0202 	orr.w	r2, r3, #2
 800f27a:	687b      	ldr	r3, [r7, #4]
 800f27c:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 800f27e:	68fb      	ldr	r3, [r7, #12]
 800f280:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800f284:	2b00      	cmp	r3, #0
 800f286:	d005      	beq.n	800f294 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 800f288:	687b      	ldr	r3, [r7, #4]
 800f28a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f28c:	f043 0204 	orr.w	r2, r3, #4
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 800f294:	68fb      	ldr	r3, [r7, #12]
 800f296:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f29a:	2b00      	cmp	r3, #0
 800f29c:	d005      	beq.n	800f2aa <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 800f29e:	687b      	ldr	r3, [r7, #4]
 800f2a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f2a2:	f043 0208 	orr.w	r2, r3, #8
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 800f2aa:	68fb      	ldr	r3, [r7, #12]
 800f2ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800f2b0:	2b00      	cmp	r3, #0
 800f2b2:	d005      	beq.n	800f2c0 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 800f2b4:	687b      	ldr	r3, [r7, #4]
 800f2b6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f2b8:	f043 0210 	orr.w	r2, r3, #16
 800f2bc:	687b      	ldr	r3, [r7, #4]
 800f2be:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 800f2c0:	68fb      	ldr	r3, [r7, #12]
 800f2c2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800f2c6:	2b00      	cmp	r3, #0
 800f2c8:	d005      	beq.n	800f2d6 <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 800f2ca:	687b      	ldr	r3, [r7, #4]
 800f2cc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f2ce:	f043 0220 	orr.w	r2, r3, #32
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 800f2d6:	687b      	ldr	r3, [r7, #4]
 800f2d8:	681b      	ldr	r3, [r3, #0]
 800f2da:	2201      	movs	r2, #1
 800f2dc:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	681b      	ldr	r3, [r3, #0]
 800f2e4:	f003 0310 	and.w	r3, r3, #16
 800f2e8:	2b00      	cmp	r3, #0
 800f2ea:	d012      	beq.n	800f312 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 800f2ec:	687b      	ldr	r3, [r7, #4]
 800f2ee:	681b      	ldr	r3, [r3, #0]
 800f2f0:	68db      	ldr	r3, [r3, #12]
 800f2f2:	f003 0320 	and.w	r3, r3, #32
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d00b      	beq.n	800f312 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 800f2fa:	687b      	ldr	r3, [r7, #4]
 800f2fc:	681b      	ldr	r3, [r3, #0]
 800f2fe:	2210      	movs	r2, #16
 800f300:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f306:	2b00      	cmp	r3, #0
 800f308:	d003      	beq.n	800f312 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 800f30a:	687b      	ldr	r3, [r7, #4]
 800f30c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f30e:	6878      	ldr	r0, [r7, #4]
 800f310:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 800f312:	687b      	ldr	r3, [r7, #4]
 800f314:	681b      	ldr	r3, [r3, #0]
 800f316:	681b      	ldr	r3, [r3, #0]
 800f318:	f003 0308 	and.w	r3, r3, #8
 800f31c:	2b00      	cmp	r3, #0
 800f31e:	d012      	beq.n	800f346 <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 800f320:	687b      	ldr	r3, [r7, #4]
 800f322:	681b      	ldr	r3, [r3, #0]
 800f324:	68db      	ldr	r3, [r3, #12]
 800f326:	f003 0310 	and.w	r3, r3, #16
 800f32a:	2b00      	cmp	r3, #0
 800f32c:	d00b      	beq.n	800f346 <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 800f32e:	687b      	ldr	r3, [r7, #4]
 800f330:	681b      	ldr	r3, [r3, #0]
 800f332:	2208      	movs	r2, #8
 800f334:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 800f336:	687b      	ldr	r3, [r7, #4]
 800f338:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f33a:	2b00      	cmp	r3, #0
 800f33c:	d003      	beq.n	800f346 <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 800f33e:	687b      	ldr	r3, [r7, #4]
 800f340:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800f342:	6878      	ldr	r0, [r7, #4]
 800f344:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	681b      	ldr	r3, [r3, #0]
 800f34a:	681b      	ldr	r3, [r3, #0]
 800f34c:	f003 0304 	and.w	r3, r3, #4
 800f350:	2b00      	cmp	r3, #0
 800f352:	d012      	beq.n	800f37a <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 800f354:	687b      	ldr	r3, [r7, #4]
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	68db      	ldr	r3, [r3, #12]
 800f35a:	f003 0308 	and.w	r3, r3, #8
 800f35e:	2b00      	cmp	r3, #0
 800f360:	d00b      	beq.n	800f37a <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 800f362:	687b      	ldr	r3, [r7, #4]
 800f364:	681b      	ldr	r3, [r3, #0]
 800f366:	2204      	movs	r2, #4
 800f368:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 800f36a:	687b      	ldr	r3, [r7, #4]
 800f36c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f36e:	2b00      	cmp	r3, #0
 800f370:	d003      	beq.n	800f37a <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 800f372:	687b      	ldr	r3, [r7, #4]
 800f374:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800f376:	6878      	ldr	r0, [r7, #4]
 800f378:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 800f37a:	687b      	ldr	r3, [r7, #4]
 800f37c:	681b      	ldr	r3, [r3, #0]
 800f37e:	681b      	ldr	r3, [r3, #0]
 800f380:	f003 0302 	and.w	r3, r3, #2
 800f384:	2b00      	cmp	r3, #0
 800f386:	d039      	beq.n	800f3fc <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 800f388:	687b      	ldr	r3, [r7, #4]
 800f38a:	681b      	ldr	r3, [r3, #0]
 800f38c:	68db      	ldr	r3, [r3, #12]
 800f38e:	f003 0304 	and.w	r3, r3, #4
 800f392:	2b00      	cmp	r3, #0
 800f394:	d032      	beq.n	800f3fc <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	681b      	ldr	r3, [r3, #0]
 800f39a:	68da      	ldr	r2, [r3, #12]
 800f39c:	687b      	ldr	r3, [r7, #4]
 800f39e:	681b      	ldr	r3, [r3, #0]
 800f3a0:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 800f3a4:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 800f3a6:	687b      	ldr	r3, [r7, #4]
 800f3a8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800f3ac:	b2db      	uxtb	r3, r3
 800f3ae:	2b04      	cmp	r3, #4
 800f3b0:	d110      	bne.n	800f3d4 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	2200      	movs	r2, #0
 800f3b6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	2201      	movs	r2, #1
 800f3be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d05c      	beq.n	800f484 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 800f3ca:	687b      	ldr	r3, [r7, #4]
 800f3cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800f3ce:	6878      	ldr	r0, [r7, #4]
 800f3d0:	4798      	blx	r3
        }
        return;
 800f3d2:	e057      	b.n	800f484 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	681b      	ldr	r3, [r3, #0]
 800f3d8:	2202      	movs	r2, #2
 800f3da:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 800f3dc:	687b      	ldr	r3, [r7, #4]
 800f3de:	2200      	movs	r2, #0
 800f3e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2201      	movs	r2, #1
 800f3e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 800f3ec:	687b      	ldr	r3, [r7, #4]
 800f3ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3f0:	2b00      	cmp	r3, #0
 800f3f2:	d003      	beq.n	800f3fc <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 800f3f4:	687b      	ldr	r3, [r7, #4]
 800f3f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f3f8:	6878      	ldr	r0, [r7, #4]
 800f3fa:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 800f3fc:	687b      	ldr	r3, [r7, #4]
 800f3fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800f400:	2b00      	cmp	r3, #0
 800f402:	d040      	beq.n	800f486 <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 800f404:	687b      	ldr	r3, [r7, #4]
 800f406:	2204      	movs	r2, #4
 800f408:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 800f40c:	687b      	ldr	r3, [r7, #4]
 800f40e:	681b      	ldr	r3, [r3, #0]
 800f410:	68da      	ldr	r2, [r3, #12]
 800f412:	687b      	ldr	r3, [r7, #4]
 800f414:	681b      	ldr	r3, [r3, #0]
 800f416:	f022 0201 	bic.w	r2, r2, #1
 800f41a:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 800f41c:	68bb      	ldr	r3, [r7, #8]
 800f41e:	3301      	adds	r3, #1
 800f420:	60bb      	str	r3, [r7, #8]
 800f422:	697a      	ldr	r2, [r7, #20]
 800f424:	429a      	cmp	r2, r3
 800f426:	d30d      	bcc.n	800f444 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 800f428:	687b      	ldr	r3, [r7, #4]
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	68db      	ldr	r3, [r3, #12]
 800f42e:	f003 0301 	and.w	r3, r3, #1
 800f432:	2b00      	cmp	r3, #0
 800f434:	d1f2      	bne.n	800f41c <HAL_MDMA_IRQHandler+0x238>
 800f436:	e006      	b.n	800f446 <HAL_MDMA_IRQHandler+0x262>
 800f438:	24000400 	.word	0x24000400
 800f43c:	1b4e81b5 	.word	0x1b4e81b5
 800f440:	adffffc0 	.word	0xadffffc0
        break;
 800f444:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	2200      	movs	r2, #0
 800f44a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 800f44e:	687b      	ldr	r3, [r7, #4]
 800f450:	681b      	ldr	r3, [r3, #0]
 800f452:	68db      	ldr	r3, [r3, #12]
 800f454:	f003 0301 	and.w	r3, r3, #1
 800f458:	2b00      	cmp	r3, #0
 800f45a:	d004      	beq.n	800f466 <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 800f45c:	687b      	ldr	r3, [r7, #4]
 800f45e:	2203      	movs	r2, #3
 800f460:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 800f464:	e003      	b.n	800f46e <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 800f466:	687b      	ldr	r3, [r7, #4]
 800f468:	2201      	movs	r2, #1
 800f46a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 800f46e:	687b      	ldr	r3, [r7, #4]
 800f470:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f472:	2b00      	cmp	r3, #0
 800f474:	d007      	beq.n	800f486 <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 800f476:	687b      	ldr	r3, [r7, #4]
 800f478:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800f47a:	6878      	ldr	r0, [r7, #4]
 800f47c:	4798      	blx	r3
 800f47e:	e002      	b.n	800f486 <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 800f480:	bf00      	nop
 800f482:	e000      	b.n	800f486 <HAL_MDMA_IRQHandler+0x2a2>
        return;
 800f484:	bf00      	nop
    }
  }
}
 800f486:	3718      	adds	r7, #24
 800f488:	46bd      	mov	sp, r7
 800f48a:	bd80      	pop	{r7, pc}

0800f48c <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 800f48c:	b480      	push	{r7}
 800f48e:	b085      	sub	sp, #20
 800f490:	af00      	add	r7, sp, #0
 800f492:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 800f494:	687b      	ldr	r3, [r7, #4]
 800f496:	68d9      	ldr	r1, [r3, #12]
 800f498:	687b      	ldr	r3, [r7, #4]
 800f49a:	691a      	ldr	r2, [r3, #16]
 800f49c:	687b      	ldr	r3, [r7, #4]
 800f49e:	681b      	ldr	r3, [r3, #0]
 800f4a0:	430a      	orrs	r2, r1
 800f4a2:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4a4:	687b      	ldr	r3, [r7, #4]
 800f4a6:	695a      	ldr	r2, [r3, #20]
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	699b      	ldr	r3, [r3, #24]
 800f4ac:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f4ae:	687b      	ldr	r3, [r7, #4]
 800f4b0:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4b2:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f4b4:	687b      	ldr	r3, [r7, #4]
 800f4b6:	6a1b      	ldr	r3, [r3, #32]
 800f4b8:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f4ba:	687b      	ldr	r3, [r7, #4]
 800f4bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 800f4be:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f4c0:	687b      	ldr	r3, [r7, #4]
 800f4c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f4c4:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 800f4ca:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f4cc:	687b      	ldr	r3, [r7, #4]
 800f4ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f4d0:	3b01      	subs	r3, #1
 800f4d2:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 800f4d4:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4dc:	687b      	ldr	r3, [r7, #4]
 800f4de:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 800f4e0:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 800f4e2:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 800f4e4:	687b      	ldr	r3, [r7, #4]
 800f4e6:	685b      	ldr	r3, [r3, #4]
 800f4e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f4ec:	d107      	bne.n	800f4fe <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 800f4ee:	687b      	ldr	r3, [r7, #4]
 800f4f0:	681b      	ldr	r3, [r3, #0]
 800f4f2:	691a      	ldr	r2, [r3, #16]
 800f4f4:	687b      	ldr	r3, [r7, #4]
 800f4f6:	681b      	ldr	r3, [r3, #0]
 800f4f8:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 800f4fc:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 800f4fe:	687b      	ldr	r3, [r7, #4]
 800f500:	681b      	ldr	r3, [r3, #0]
 800f502:	2200      	movs	r2, #0
 800f504:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 800f506:	687b      	ldr	r3, [r7, #4]
 800f508:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f50a:	2b00      	cmp	r3, #0
 800f50c:	da11      	bge.n	800f532 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 800f50e:	687b      	ldr	r3, [r7, #4]
 800f510:	681b      	ldr	r3, [r3, #0]
 800f512:	695a      	ldr	r2, [r3, #20]
 800f514:	687b      	ldr	r3, [r7, #4]
 800f516:	681b      	ldr	r3, [r3, #0]
 800f518:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 800f51c:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 800f51e:	687b      	ldr	r3, [r7, #4]
 800f520:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f522:	425b      	negs	r3, r3
 800f524:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	68fa      	ldr	r2, [r7, #12]
 800f52c:	b292      	uxth	r2, r2
 800f52e:	621a      	str	r2, [r3, #32]
 800f530:	e006      	b.n	800f540 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f536:	461a      	mov	r2, r3
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	681b      	ldr	r3, [r3, #0]
 800f53c:	b292      	uxth	r2, r2
 800f53e:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 800f540:	687b      	ldr	r3, [r7, #4]
 800f542:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f544:	2b00      	cmp	r3, #0
 800f546:	da15      	bge.n	800f574 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 800f548:	687b      	ldr	r3, [r7, #4]
 800f54a:	681b      	ldr	r3, [r3, #0]
 800f54c:	695a      	ldr	r2, [r3, #20]
 800f54e:	687b      	ldr	r3, [r7, #4]
 800f550:	681b      	ldr	r3, [r3, #0]
 800f552:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 800f556:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 800f558:	687b      	ldr	r3, [r7, #4]
 800f55a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f55c:	425b      	negs	r3, r3
 800f55e:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f560:	687b      	ldr	r3, [r7, #4]
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	6a19      	ldr	r1, [r3, #32]
 800f566:	68fb      	ldr	r3, [r7, #12]
 800f568:	041a      	lsls	r2, r3, #16
 800f56a:	687b      	ldr	r3, [r7, #4]
 800f56c:	681b      	ldr	r3, [r3, #0]
 800f56e:	430a      	orrs	r2, r1
 800f570:	621a      	str	r2, [r3, #32]
 800f572:	e009      	b.n	800f588 <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 800f574:	687b      	ldr	r3, [r7, #4]
 800f576:	681b      	ldr	r3, [r3, #0]
 800f578:	6a19      	ldr	r1, [r3, #32]
 800f57a:	687b      	ldr	r3, [r7, #4]
 800f57c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f57e:	041a      	lsls	r2, r3, #16
 800f580:	687b      	ldr	r3, [r7, #4]
 800f582:	681b      	ldr	r3, [r3, #0]
 800f584:	430a      	orrs	r2, r1
 800f586:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 800f588:	687b      	ldr	r3, [r7, #4]
 800f58a:	685b      	ldr	r3, [r3, #4]
 800f58c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800f590:	d006      	beq.n	800f5a0 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	685a      	ldr	r2, [r3, #4]
 800f596:	687b      	ldr	r3, [r7, #4]
 800f598:	681b      	ldr	r3, [r3, #0]
 800f59a:	b2d2      	uxtb	r2, r2
 800f59c:	629a      	str	r2, [r3, #40]	@ 0x28
 800f59e:	e003      	b.n	800f5a8 <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 800f5a0:	687b      	ldr	r3, [r7, #4]
 800f5a2:	681b      	ldr	r3, [r3, #0]
 800f5a4:	2200      	movs	r2, #0
 800f5a6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 800f5a8:	687b      	ldr	r3, [r7, #4]
 800f5aa:	681b      	ldr	r3, [r3, #0]
 800f5ac:	2200      	movs	r2, #0
 800f5ae:	625a      	str	r2, [r3, #36]	@ 0x24
}
 800f5b0:	bf00      	nop
 800f5b2:	3714      	adds	r7, #20
 800f5b4:	46bd      	mov	sp, r7
 800f5b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f5ba:	4770      	bx	lr

0800f5bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800f5bc:	b580      	push	{r7, lr}
 800f5be:	b08c      	sub	sp, #48	@ 0x30
 800f5c0:	af00      	add	r7, sp, #0
 800f5c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800f5c4:	687b      	ldr	r3, [r7, #4]
 800f5c6:	2b00      	cmp	r3, #0
 800f5c8:	d102      	bne.n	800f5d0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800f5ca:	2301      	movs	r3, #1
 800f5cc:	f000 bc48 	b.w	800fe60 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800f5d0:	687b      	ldr	r3, [r7, #4]
 800f5d2:	681b      	ldr	r3, [r3, #0]
 800f5d4:	f003 0301 	and.w	r3, r3, #1
 800f5d8:	2b00      	cmp	r3, #0
 800f5da:	f000 8088 	beq.w	800f6ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f5de:	4b99      	ldr	r3, [pc, #612]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f5e0:	691b      	ldr	r3, [r3, #16]
 800f5e2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f5e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f5e8:	4b96      	ldr	r3, [pc, #600]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f5ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f5ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800f5ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f0:	2b10      	cmp	r3, #16
 800f5f2:	d007      	beq.n	800f604 <HAL_RCC_OscConfig+0x48>
 800f5f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f6:	2b18      	cmp	r3, #24
 800f5f8:	d111      	bne.n	800f61e <HAL_RCC_OscConfig+0x62>
 800f5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f5fc:	f003 0303 	and.w	r3, r3, #3
 800f600:	2b02      	cmp	r3, #2
 800f602:	d10c      	bne.n	800f61e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f604:	4b8f      	ldr	r3, [pc, #572]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f606:	681b      	ldr	r3, [r3, #0]
 800f608:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f60c:	2b00      	cmp	r3, #0
 800f60e:	d06d      	beq.n	800f6ec <HAL_RCC_OscConfig+0x130>
 800f610:	687b      	ldr	r3, [r7, #4]
 800f612:	685b      	ldr	r3, [r3, #4]
 800f614:	2b00      	cmp	r3, #0
 800f616:	d169      	bne.n	800f6ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800f618:	2301      	movs	r3, #1
 800f61a:	f000 bc21 	b.w	800fe60 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800f61e:	687b      	ldr	r3, [r7, #4]
 800f620:	685b      	ldr	r3, [r3, #4]
 800f622:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800f626:	d106      	bne.n	800f636 <HAL_RCC_OscConfig+0x7a>
 800f628:	4b86      	ldr	r3, [pc, #536]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f62a:	681b      	ldr	r3, [r3, #0]
 800f62c:	4a85      	ldr	r2, [pc, #532]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f62e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f632:	6013      	str	r3, [r2, #0]
 800f634:	e02e      	b.n	800f694 <HAL_RCC_OscConfig+0xd8>
 800f636:	687b      	ldr	r3, [r7, #4]
 800f638:	685b      	ldr	r3, [r3, #4]
 800f63a:	2b00      	cmp	r3, #0
 800f63c:	d10c      	bne.n	800f658 <HAL_RCC_OscConfig+0x9c>
 800f63e:	4b81      	ldr	r3, [pc, #516]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f640:	681b      	ldr	r3, [r3, #0]
 800f642:	4a80      	ldr	r2, [pc, #512]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f644:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f648:	6013      	str	r3, [r2, #0]
 800f64a:	4b7e      	ldr	r3, [pc, #504]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f64c:	681b      	ldr	r3, [r3, #0]
 800f64e:	4a7d      	ldr	r2, [pc, #500]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f650:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f654:	6013      	str	r3, [r2, #0]
 800f656:	e01d      	b.n	800f694 <HAL_RCC_OscConfig+0xd8>
 800f658:	687b      	ldr	r3, [r7, #4]
 800f65a:	685b      	ldr	r3, [r3, #4]
 800f65c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800f660:	d10c      	bne.n	800f67c <HAL_RCC_OscConfig+0xc0>
 800f662:	4b78      	ldr	r3, [pc, #480]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f664:	681b      	ldr	r3, [r3, #0]
 800f666:	4a77      	ldr	r2, [pc, #476]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f668:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800f66c:	6013      	str	r3, [r2, #0]
 800f66e:	4b75      	ldr	r3, [pc, #468]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f670:	681b      	ldr	r3, [r3, #0]
 800f672:	4a74      	ldr	r2, [pc, #464]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f674:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800f678:	6013      	str	r3, [r2, #0]
 800f67a:	e00b      	b.n	800f694 <HAL_RCC_OscConfig+0xd8>
 800f67c:	4b71      	ldr	r3, [pc, #452]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f67e:	681b      	ldr	r3, [r3, #0]
 800f680:	4a70      	ldr	r2, [pc, #448]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f682:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800f686:	6013      	str	r3, [r2, #0]
 800f688:	4b6e      	ldr	r3, [pc, #440]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f68a:	681b      	ldr	r3, [r3, #0]
 800f68c:	4a6d      	ldr	r2, [pc, #436]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f68e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800f692:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800f694:	687b      	ldr	r3, [r7, #4]
 800f696:	685b      	ldr	r3, [r3, #4]
 800f698:	2b00      	cmp	r3, #0
 800f69a:	d013      	beq.n	800f6c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f69c:	f7f9 fd04 	bl	80090a8 <HAL_GetTick>
 800f6a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f6a2:	e008      	b.n	800f6b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f6a4:	f7f9 fd00 	bl	80090a8 <HAL_GetTick>
 800f6a8:	4602      	mov	r2, r0
 800f6aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6ac:	1ad3      	subs	r3, r2, r3
 800f6ae:	2b64      	cmp	r3, #100	@ 0x64
 800f6b0:	d901      	bls.n	800f6b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800f6b2:	2303      	movs	r3, #3
 800f6b4:	e3d4      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800f6b6:	4b63      	ldr	r3, [pc, #396]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6be:	2b00      	cmp	r3, #0
 800f6c0:	d0f0      	beq.n	800f6a4 <HAL_RCC_OscConfig+0xe8>
 800f6c2:	e014      	b.n	800f6ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f6c4:	f7f9 fcf0 	bl	80090a8 <HAL_GetTick>
 800f6c8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f6ca:	e008      	b.n	800f6de <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800f6cc:	f7f9 fcec 	bl	80090a8 <HAL_GetTick>
 800f6d0:	4602      	mov	r2, r0
 800f6d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f6d4:	1ad3      	subs	r3, r2, r3
 800f6d6:	2b64      	cmp	r3, #100	@ 0x64
 800f6d8:	d901      	bls.n	800f6de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800f6da:	2303      	movs	r3, #3
 800f6dc:	e3c0      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800f6de:	4b59      	ldr	r3, [pc, #356]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f6e0:	681b      	ldr	r3, [r3, #0]
 800f6e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800f6e6:	2b00      	cmp	r3, #0
 800f6e8:	d1f0      	bne.n	800f6cc <HAL_RCC_OscConfig+0x110>
 800f6ea:	e000      	b.n	800f6ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800f6ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800f6ee:	687b      	ldr	r3, [r7, #4]
 800f6f0:	681b      	ldr	r3, [r3, #0]
 800f6f2:	f003 0302 	and.w	r3, r3, #2
 800f6f6:	2b00      	cmp	r3, #0
 800f6f8:	f000 80ca 	beq.w	800f890 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f6fc:	4b51      	ldr	r3, [pc, #324]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f6fe:	691b      	ldr	r3, [r3, #16]
 800f700:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f704:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f706:	4b4f      	ldr	r3, [pc, #316]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f708:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f70a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800f70c:	6a3b      	ldr	r3, [r7, #32]
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d007      	beq.n	800f722 <HAL_RCC_OscConfig+0x166>
 800f712:	6a3b      	ldr	r3, [r7, #32]
 800f714:	2b18      	cmp	r3, #24
 800f716:	d156      	bne.n	800f7c6 <HAL_RCC_OscConfig+0x20a>
 800f718:	69fb      	ldr	r3, [r7, #28]
 800f71a:	f003 0303 	and.w	r3, r3, #3
 800f71e:	2b00      	cmp	r3, #0
 800f720:	d151      	bne.n	800f7c6 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f722:	4b48      	ldr	r3, [pc, #288]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f724:	681b      	ldr	r3, [r3, #0]
 800f726:	f003 0304 	and.w	r3, r3, #4
 800f72a:	2b00      	cmp	r3, #0
 800f72c:	d005      	beq.n	800f73a <HAL_RCC_OscConfig+0x17e>
 800f72e:	687b      	ldr	r3, [r7, #4]
 800f730:	68db      	ldr	r3, [r3, #12]
 800f732:	2b00      	cmp	r3, #0
 800f734:	d101      	bne.n	800f73a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800f736:	2301      	movs	r3, #1
 800f738:	e392      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f73a:	4b42      	ldr	r3, [pc, #264]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f73c:	681b      	ldr	r3, [r3, #0]
 800f73e:	f023 0219 	bic.w	r2, r3, #25
 800f742:	687b      	ldr	r3, [r7, #4]
 800f744:	68db      	ldr	r3, [r3, #12]
 800f746:	493f      	ldr	r1, [pc, #252]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f748:	4313      	orrs	r3, r2
 800f74a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f74c:	f7f9 fcac 	bl	80090a8 <HAL_GetTick>
 800f750:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f752:	e008      	b.n	800f766 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f754:	f7f9 fca8 	bl	80090a8 <HAL_GetTick>
 800f758:	4602      	mov	r2, r0
 800f75a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f75c:	1ad3      	subs	r3, r2, r3
 800f75e:	2b02      	cmp	r3, #2
 800f760:	d901      	bls.n	800f766 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800f762:	2303      	movs	r3, #3
 800f764:	e37c      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f766:	4b37      	ldr	r3, [pc, #220]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f768:	681b      	ldr	r3, [r3, #0]
 800f76a:	f003 0304 	and.w	r3, r3, #4
 800f76e:	2b00      	cmp	r3, #0
 800f770:	d0f0      	beq.n	800f754 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f772:	f7f9 fcc9 	bl	8009108 <HAL_GetREVID>
 800f776:	4603      	mov	r3, r0
 800f778:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f77c:	4293      	cmp	r3, r2
 800f77e:	d817      	bhi.n	800f7b0 <HAL_RCC_OscConfig+0x1f4>
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	691b      	ldr	r3, [r3, #16]
 800f784:	2b40      	cmp	r3, #64	@ 0x40
 800f786:	d108      	bne.n	800f79a <HAL_RCC_OscConfig+0x1de>
 800f788:	4b2e      	ldr	r3, [pc, #184]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f78a:	685b      	ldr	r3, [r3, #4]
 800f78c:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f790:	4a2c      	ldr	r2, [pc, #176]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f792:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f796:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f798:	e07a      	b.n	800f890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f79a:	4b2a      	ldr	r3, [pc, #168]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f79c:	685b      	ldr	r3, [r3, #4]
 800f79e:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f7a2:	687b      	ldr	r3, [r7, #4]
 800f7a4:	691b      	ldr	r3, [r3, #16]
 800f7a6:	031b      	lsls	r3, r3, #12
 800f7a8:	4926      	ldr	r1, [pc, #152]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f7aa:	4313      	orrs	r3, r2
 800f7ac:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f7ae:	e06f      	b.n	800f890 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f7b0:	4b24      	ldr	r3, [pc, #144]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f7b2:	685b      	ldr	r3, [r3, #4]
 800f7b4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f7b8:	687b      	ldr	r3, [r7, #4]
 800f7ba:	691b      	ldr	r3, [r3, #16]
 800f7bc:	061b      	lsls	r3, r3, #24
 800f7be:	4921      	ldr	r1, [pc, #132]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f7c0:	4313      	orrs	r3, r2
 800f7c2:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800f7c4:	e064      	b.n	800f890 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800f7c6:	687b      	ldr	r3, [r7, #4]
 800f7c8:	68db      	ldr	r3, [r3, #12]
 800f7ca:	2b00      	cmp	r3, #0
 800f7cc:	d047      	beq.n	800f85e <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800f7ce:	4b1d      	ldr	r3, [pc, #116]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f7d0:	681b      	ldr	r3, [r3, #0]
 800f7d2:	f023 0219 	bic.w	r2, r3, #25
 800f7d6:	687b      	ldr	r3, [r7, #4]
 800f7d8:	68db      	ldr	r3, [r3, #12]
 800f7da:	491a      	ldr	r1, [pc, #104]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f7dc:	4313      	orrs	r3, r2
 800f7de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f7e0:	f7f9 fc62 	bl	80090a8 <HAL_GetTick>
 800f7e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f7e6:	e008      	b.n	800f7fa <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f7e8:	f7f9 fc5e 	bl	80090a8 <HAL_GetTick>
 800f7ec:	4602      	mov	r2, r0
 800f7ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f7f0:	1ad3      	subs	r3, r2, r3
 800f7f2:	2b02      	cmp	r3, #2
 800f7f4:	d901      	bls.n	800f7fa <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800f7f6:	2303      	movs	r3, #3
 800f7f8:	e332      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800f7fa:	4b12      	ldr	r3, [pc, #72]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f7fc:	681b      	ldr	r3, [r3, #0]
 800f7fe:	f003 0304 	and.w	r3, r3, #4
 800f802:	2b00      	cmp	r3, #0
 800f804:	d0f0      	beq.n	800f7e8 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800f806:	f7f9 fc7f 	bl	8009108 <HAL_GetREVID>
 800f80a:	4603      	mov	r3, r0
 800f80c:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f810:	4293      	cmp	r3, r2
 800f812:	d819      	bhi.n	800f848 <HAL_RCC_OscConfig+0x28c>
 800f814:	687b      	ldr	r3, [r7, #4]
 800f816:	691b      	ldr	r3, [r3, #16]
 800f818:	2b40      	cmp	r3, #64	@ 0x40
 800f81a:	d108      	bne.n	800f82e <HAL_RCC_OscConfig+0x272>
 800f81c:	4b09      	ldr	r3, [pc, #36]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800f824:	4a07      	ldr	r2, [pc, #28]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f826:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800f82a:	6053      	str	r3, [r2, #4]
 800f82c:	e030      	b.n	800f890 <HAL_RCC_OscConfig+0x2d4>
 800f82e:	4b05      	ldr	r3, [pc, #20]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	691b      	ldr	r3, [r3, #16]
 800f83a:	031b      	lsls	r3, r3, #12
 800f83c:	4901      	ldr	r1, [pc, #4]	@ (800f844 <HAL_RCC_OscConfig+0x288>)
 800f83e:	4313      	orrs	r3, r2
 800f840:	604b      	str	r3, [r1, #4]
 800f842:	e025      	b.n	800f890 <HAL_RCC_OscConfig+0x2d4>
 800f844:	58024400 	.word	0x58024400
 800f848:	4b9a      	ldr	r3, [pc, #616]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f84a:	685b      	ldr	r3, [r3, #4]
 800f84c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800f850:	687b      	ldr	r3, [r7, #4]
 800f852:	691b      	ldr	r3, [r3, #16]
 800f854:	061b      	lsls	r3, r3, #24
 800f856:	4997      	ldr	r1, [pc, #604]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f858:	4313      	orrs	r3, r2
 800f85a:	604b      	str	r3, [r1, #4]
 800f85c:	e018      	b.n	800f890 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800f85e:	4b95      	ldr	r3, [pc, #596]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f860:	681b      	ldr	r3, [r3, #0]
 800f862:	4a94      	ldr	r2, [pc, #592]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f864:	f023 0301 	bic.w	r3, r3, #1
 800f868:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f86a:	f7f9 fc1d 	bl	80090a8 <HAL_GetTick>
 800f86e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f870:	e008      	b.n	800f884 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800f872:	f7f9 fc19 	bl	80090a8 <HAL_GetTick>
 800f876:	4602      	mov	r2, r0
 800f878:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f87a:	1ad3      	subs	r3, r2, r3
 800f87c:	2b02      	cmp	r3, #2
 800f87e:	d901      	bls.n	800f884 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800f880:	2303      	movs	r3, #3
 800f882:	e2ed      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800f884:	4b8b      	ldr	r3, [pc, #556]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f886:	681b      	ldr	r3, [r3, #0]
 800f888:	f003 0304 	and.w	r3, r3, #4
 800f88c:	2b00      	cmp	r3, #0
 800f88e:	d1f0      	bne.n	800f872 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800f890:	687b      	ldr	r3, [r7, #4]
 800f892:	681b      	ldr	r3, [r3, #0]
 800f894:	f003 0310 	and.w	r3, r3, #16
 800f898:	2b00      	cmp	r3, #0
 800f89a:	f000 80a9 	beq.w	800f9f0 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800f89e:	4b85      	ldr	r3, [pc, #532]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f8a0:	691b      	ldr	r3, [r3, #16]
 800f8a2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800f8a6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800f8a8:	4b82      	ldr	r3, [pc, #520]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f8aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8ac:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800f8ae:	69bb      	ldr	r3, [r7, #24]
 800f8b0:	2b08      	cmp	r3, #8
 800f8b2:	d007      	beq.n	800f8c4 <HAL_RCC_OscConfig+0x308>
 800f8b4:	69bb      	ldr	r3, [r7, #24]
 800f8b6:	2b18      	cmp	r3, #24
 800f8b8:	d13a      	bne.n	800f930 <HAL_RCC_OscConfig+0x374>
 800f8ba:	697b      	ldr	r3, [r7, #20]
 800f8bc:	f003 0303 	and.w	r3, r3, #3
 800f8c0:	2b01      	cmp	r3, #1
 800f8c2:	d135      	bne.n	800f930 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f8c4:	4b7b      	ldr	r3, [pc, #492]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f8c6:	681b      	ldr	r3, [r3, #0]
 800f8c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f8cc:	2b00      	cmp	r3, #0
 800f8ce:	d005      	beq.n	800f8dc <HAL_RCC_OscConfig+0x320>
 800f8d0:	687b      	ldr	r3, [r7, #4]
 800f8d2:	69db      	ldr	r3, [r3, #28]
 800f8d4:	2b80      	cmp	r3, #128	@ 0x80
 800f8d6:	d001      	beq.n	800f8dc <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800f8d8:	2301      	movs	r3, #1
 800f8da:	e2c1      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f8dc:	f7f9 fc14 	bl	8009108 <HAL_GetREVID>
 800f8e0:	4603      	mov	r3, r0
 800f8e2:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f8e6:	4293      	cmp	r3, r2
 800f8e8:	d817      	bhi.n	800f91a <HAL_RCC_OscConfig+0x35e>
 800f8ea:	687b      	ldr	r3, [r7, #4]
 800f8ec:	6a1b      	ldr	r3, [r3, #32]
 800f8ee:	2b20      	cmp	r3, #32
 800f8f0:	d108      	bne.n	800f904 <HAL_RCC_OscConfig+0x348>
 800f8f2:	4b70      	ldr	r3, [pc, #448]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f8f4:	685b      	ldr	r3, [r3, #4]
 800f8f6:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f8fa:	4a6e      	ldr	r2, [pc, #440]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f8fc:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f900:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f902:	e075      	b.n	800f9f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f904:	4b6b      	ldr	r3, [pc, #428]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f906:	685b      	ldr	r3, [r3, #4]
 800f908:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	6a1b      	ldr	r3, [r3, #32]
 800f910:	069b      	lsls	r3, r3, #26
 800f912:	4968      	ldr	r1, [pc, #416]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f914:	4313      	orrs	r3, r2
 800f916:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f918:	e06a      	b.n	800f9f0 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f91a:	4b66      	ldr	r3, [pc, #408]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f91c:	68db      	ldr	r3, [r3, #12]
 800f91e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f922:	687b      	ldr	r3, [r7, #4]
 800f924:	6a1b      	ldr	r3, [r3, #32]
 800f926:	061b      	lsls	r3, r3, #24
 800f928:	4962      	ldr	r1, [pc, #392]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f92a:	4313      	orrs	r3, r2
 800f92c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800f92e:	e05f      	b.n	800f9f0 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800f930:	687b      	ldr	r3, [r7, #4]
 800f932:	69db      	ldr	r3, [r3, #28]
 800f934:	2b00      	cmp	r3, #0
 800f936:	d042      	beq.n	800f9be <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800f938:	4b5e      	ldr	r3, [pc, #376]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f93a:	681b      	ldr	r3, [r3, #0]
 800f93c:	4a5d      	ldr	r2, [pc, #372]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f93e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f942:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f944:	f7f9 fbb0 	bl	80090a8 <HAL_GetTick>
 800f948:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f94a:	e008      	b.n	800f95e <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f94c:	f7f9 fbac 	bl	80090a8 <HAL_GetTick>
 800f950:	4602      	mov	r2, r0
 800f952:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f954:	1ad3      	subs	r3, r2, r3
 800f956:	2b02      	cmp	r3, #2
 800f958:	d901      	bls.n	800f95e <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800f95a:	2303      	movs	r3, #3
 800f95c:	e280      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800f95e:	4b55      	ldr	r3, [pc, #340]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f960:	681b      	ldr	r3, [r3, #0]
 800f962:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f966:	2b00      	cmp	r3, #0
 800f968:	d0f0      	beq.n	800f94c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800f96a:	f7f9 fbcd 	bl	8009108 <HAL_GetREVID>
 800f96e:	4603      	mov	r3, r0
 800f970:	f241 0203 	movw	r2, #4099	@ 0x1003
 800f974:	4293      	cmp	r3, r2
 800f976:	d817      	bhi.n	800f9a8 <HAL_RCC_OscConfig+0x3ec>
 800f978:	687b      	ldr	r3, [r7, #4]
 800f97a:	6a1b      	ldr	r3, [r3, #32]
 800f97c:	2b20      	cmp	r3, #32
 800f97e:	d108      	bne.n	800f992 <HAL_RCC_OscConfig+0x3d6>
 800f980:	4b4c      	ldr	r3, [pc, #304]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f982:	685b      	ldr	r3, [r3, #4]
 800f984:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800f988:	4a4a      	ldr	r2, [pc, #296]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f98a:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800f98e:	6053      	str	r3, [r2, #4]
 800f990:	e02e      	b.n	800f9f0 <HAL_RCC_OscConfig+0x434>
 800f992:	4b48      	ldr	r3, [pc, #288]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f994:	685b      	ldr	r3, [r3, #4]
 800f996:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800f99a:	687b      	ldr	r3, [r7, #4]
 800f99c:	6a1b      	ldr	r3, [r3, #32]
 800f99e:	069b      	lsls	r3, r3, #26
 800f9a0:	4944      	ldr	r1, [pc, #272]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f9a2:	4313      	orrs	r3, r2
 800f9a4:	604b      	str	r3, [r1, #4]
 800f9a6:	e023      	b.n	800f9f0 <HAL_RCC_OscConfig+0x434>
 800f9a8:	4b42      	ldr	r3, [pc, #264]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f9aa:	68db      	ldr	r3, [r3, #12]
 800f9ac:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800f9b0:	687b      	ldr	r3, [r7, #4]
 800f9b2:	6a1b      	ldr	r3, [r3, #32]
 800f9b4:	061b      	lsls	r3, r3, #24
 800f9b6:	493f      	ldr	r1, [pc, #252]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f9b8:	4313      	orrs	r3, r2
 800f9ba:	60cb      	str	r3, [r1, #12]
 800f9bc:	e018      	b.n	800f9f0 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800f9be:	4b3d      	ldr	r3, [pc, #244]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f9c0:	681b      	ldr	r3, [r3, #0]
 800f9c2:	4a3c      	ldr	r2, [pc, #240]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f9c4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800f9c8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800f9ca:	f7f9 fb6d 	bl	80090a8 <HAL_GetTick>
 800f9ce:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f9d0:	e008      	b.n	800f9e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800f9d2:	f7f9 fb69 	bl	80090a8 <HAL_GetTick>
 800f9d6:	4602      	mov	r2, r0
 800f9d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f9da:	1ad3      	subs	r3, r2, r3
 800f9dc:	2b02      	cmp	r3, #2
 800f9de:	d901      	bls.n	800f9e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800f9e0:	2303      	movs	r3, #3
 800f9e2:	e23d      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800f9e4:	4b33      	ldr	r3, [pc, #204]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800f9ec:	2b00      	cmp	r3, #0
 800f9ee:	d1f0      	bne.n	800f9d2 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	681b      	ldr	r3, [r3, #0]
 800f9f4:	f003 0308 	and.w	r3, r3, #8
 800f9f8:	2b00      	cmp	r3, #0
 800f9fa:	d036      	beq.n	800fa6a <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800f9fc:	687b      	ldr	r3, [r7, #4]
 800f9fe:	695b      	ldr	r3, [r3, #20]
 800fa00:	2b00      	cmp	r3, #0
 800fa02:	d019      	beq.n	800fa38 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800fa04:	4b2b      	ldr	r3, [pc, #172]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa06:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa08:	4a2a      	ldr	r2, [pc, #168]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa0a:	f043 0301 	orr.w	r3, r3, #1
 800fa0e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa10:	f7f9 fb4a 	bl	80090a8 <HAL_GetTick>
 800fa14:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fa16:	e008      	b.n	800fa2a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa18:	f7f9 fb46 	bl	80090a8 <HAL_GetTick>
 800fa1c:	4602      	mov	r2, r0
 800fa1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa20:	1ad3      	subs	r3, r2, r3
 800fa22:	2b02      	cmp	r3, #2
 800fa24:	d901      	bls.n	800fa2a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800fa26:	2303      	movs	r3, #3
 800fa28:	e21a      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800fa2a:	4b22      	ldr	r3, [pc, #136]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa2c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa2e:	f003 0302 	and.w	r3, r3, #2
 800fa32:	2b00      	cmp	r3, #0
 800fa34:	d0f0      	beq.n	800fa18 <HAL_RCC_OscConfig+0x45c>
 800fa36:	e018      	b.n	800fa6a <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800fa38:	4b1e      	ldr	r3, [pc, #120]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa3a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa3c:	4a1d      	ldr	r2, [pc, #116]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa3e:	f023 0301 	bic.w	r3, r3, #1
 800fa42:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fa44:	f7f9 fb30 	bl	80090a8 <HAL_GetTick>
 800fa48:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fa4a:	e008      	b.n	800fa5e <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800fa4c:	f7f9 fb2c 	bl	80090a8 <HAL_GetTick>
 800fa50:	4602      	mov	r2, r0
 800fa52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa54:	1ad3      	subs	r3, r2, r3
 800fa56:	2b02      	cmp	r3, #2
 800fa58:	d901      	bls.n	800fa5e <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800fa5a:	2303      	movs	r3, #3
 800fa5c:	e200      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800fa5e:	4b15      	ldr	r3, [pc, #84]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa60:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fa62:	f003 0302 	and.w	r3, r3, #2
 800fa66:	2b00      	cmp	r3, #0
 800fa68:	d1f0      	bne.n	800fa4c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800fa6a:	687b      	ldr	r3, [r7, #4]
 800fa6c:	681b      	ldr	r3, [r3, #0]
 800fa6e:	f003 0320 	and.w	r3, r3, #32
 800fa72:	2b00      	cmp	r3, #0
 800fa74:	d039      	beq.n	800faea <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	699b      	ldr	r3, [r3, #24]
 800fa7a:	2b00      	cmp	r3, #0
 800fa7c:	d01c      	beq.n	800fab8 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800fa7e:	4b0d      	ldr	r3, [pc, #52]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a0c      	ldr	r2, [pc, #48]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800fa84:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800fa88:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800fa8a:	f7f9 fb0d 	bl	80090a8 <HAL_GetTick>
 800fa8e:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800fa90:	e008      	b.n	800faa4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800fa92:	f7f9 fb09 	bl	80090a8 <HAL_GetTick>
 800fa96:	4602      	mov	r2, r0
 800fa98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa9a:	1ad3      	subs	r3, r2, r3
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d901      	bls.n	800faa4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800faa0:	2303      	movs	r3, #3
 800faa2:	e1dd      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800faa4:	4b03      	ldr	r3, [pc, #12]	@ (800fab4 <HAL_RCC_OscConfig+0x4f8>)
 800faa6:	681b      	ldr	r3, [r3, #0]
 800faa8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800faac:	2b00      	cmp	r3, #0
 800faae:	d0f0      	beq.n	800fa92 <HAL_RCC_OscConfig+0x4d6>
 800fab0:	e01b      	b.n	800faea <HAL_RCC_OscConfig+0x52e>
 800fab2:	bf00      	nop
 800fab4:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800fab8:	4b9b      	ldr	r3, [pc, #620]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800faba:	681b      	ldr	r3, [r3, #0]
 800fabc:	4a9a      	ldr	r2, [pc, #616]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fabe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800fac2:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800fac4:	f7f9 faf0 	bl	80090a8 <HAL_GetTick>
 800fac8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800faca:	e008      	b.n	800fade <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800facc:	f7f9 faec 	bl	80090a8 <HAL_GetTick>
 800fad0:	4602      	mov	r2, r0
 800fad2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad4:	1ad3      	subs	r3, r2, r3
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	d901      	bls.n	800fade <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800fada:	2303      	movs	r3, #3
 800fadc:	e1c0      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800fade:	4b92      	ldr	r3, [pc, #584]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fae0:	681b      	ldr	r3, [r3, #0]
 800fae2:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800fae6:	2b00      	cmp	r3, #0
 800fae8:	d1f0      	bne.n	800facc <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800faea:	687b      	ldr	r3, [r7, #4]
 800faec:	681b      	ldr	r3, [r3, #0]
 800faee:	f003 0304 	and.w	r3, r3, #4
 800faf2:	2b00      	cmp	r3, #0
 800faf4:	f000 8081 	beq.w	800fbfa <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800faf8:	4b8c      	ldr	r3, [pc, #560]	@ (800fd2c <HAL_RCC_OscConfig+0x770>)
 800fafa:	681b      	ldr	r3, [r3, #0]
 800fafc:	4a8b      	ldr	r2, [pc, #556]	@ (800fd2c <HAL_RCC_OscConfig+0x770>)
 800fafe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800fb02:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800fb04:	f7f9 fad0 	bl	80090a8 <HAL_GetTick>
 800fb08:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb0a:	e008      	b.n	800fb1e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800fb0c:	f7f9 facc 	bl	80090a8 <HAL_GetTick>
 800fb10:	4602      	mov	r2, r0
 800fb12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb14:	1ad3      	subs	r3, r2, r3
 800fb16:	2b64      	cmp	r3, #100	@ 0x64
 800fb18:	d901      	bls.n	800fb1e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800fb1a:	2303      	movs	r3, #3
 800fb1c:	e1a0      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800fb1e:	4b83      	ldr	r3, [pc, #524]	@ (800fd2c <HAL_RCC_OscConfig+0x770>)
 800fb20:	681b      	ldr	r3, [r3, #0]
 800fb22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fb26:	2b00      	cmp	r3, #0
 800fb28:	d0f0      	beq.n	800fb0c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800fb2a:	687b      	ldr	r3, [r7, #4]
 800fb2c:	689b      	ldr	r3, [r3, #8]
 800fb2e:	2b01      	cmp	r3, #1
 800fb30:	d106      	bne.n	800fb40 <HAL_RCC_OscConfig+0x584>
 800fb32:	4b7d      	ldr	r3, [pc, #500]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb36:	4a7c      	ldr	r2, [pc, #496]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb38:	f043 0301 	orr.w	r3, r3, #1
 800fb3c:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb3e:	e02d      	b.n	800fb9c <HAL_RCC_OscConfig+0x5e0>
 800fb40:	687b      	ldr	r3, [r7, #4]
 800fb42:	689b      	ldr	r3, [r3, #8]
 800fb44:	2b00      	cmp	r3, #0
 800fb46:	d10c      	bne.n	800fb62 <HAL_RCC_OscConfig+0x5a6>
 800fb48:	4b77      	ldr	r3, [pc, #476]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb4a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb4c:	4a76      	ldr	r2, [pc, #472]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb4e:	f023 0301 	bic.w	r3, r3, #1
 800fb52:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb54:	4b74      	ldr	r3, [pc, #464]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb56:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb58:	4a73      	ldr	r2, [pc, #460]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb5a:	f023 0304 	bic.w	r3, r3, #4
 800fb5e:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb60:	e01c      	b.n	800fb9c <HAL_RCC_OscConfig+0x5e0>
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	689b      	ldr	r3, [r3, #8]
 800fb66:	2b05      	cmp	r3, #5
 800fb68:	d10c      	bne.n	800fb84 <HAL_RCC_OscConfig+0x5c8>
 800fb6a:	4b6f      	ldr	r3, [pc, #444]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb6e:	4a6e      	ldr	r2, [pc, #440]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb70:	f043 0304 	orr.w	r3, r3, #4
 800fb74:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb76:	4b6c      	ldr	r3, [pc, #432]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb7a:	4a6b      	ldr	r2, [pc, #428]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb7c:	f043 0301 	orr.w	r3, r3, #1
 800fb80:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb82:	e00b      	b.n	800fb9c <HAL_RCC_OscConfig+0x5e0>
 800fb84:	4b68      	ldr	r3, [pc, #416]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb88:	4a67      	ldr	r2, [pc, #412]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb8a:	f023 0301 	bic.w	r3, r3, #1
 800fb8e:	6713      	str	r3, [r2, #112]	@ 0x70
 800fb90:	4b65      	ldr	r3, [pc, #404]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb92:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fb94:	4a64      	ldr	r2, [pc, #400]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fb96:	f023 0304 	bic.w	r3, r3, #4
 800fb9a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800fb9c:	687b      	ldr	r3, [r7, #4]
 800fb9e:	689b      	ldr	r3, [r3, #8]
 800fba0:	2b00      	cmp	r3, #0
 800fba2:	d015      	beq.n	800fbd0 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fba4:	f7f9 fa80 	bl	80090a8 <HAL_GetTick>
 800fba8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbaa:	e00a      	b.n	800fbc2 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbac:	f7f9 fa7c 	bl	80090a8 <HAL_GetTick>
 800fbb0:	4602      	mov	r2, r0
 800fbb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbb4:	1ad3      	subs	r3, r2, r3
 800fbb6:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbba:	4293      	cmp	r3, r2
 800fbbc:	d901      	bls.n	800fbc2 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800fbbe:	2303      	movs	r3, #3
 800fbc0:	e14e      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800fbc2:	4b59      	ldr	r3, [pc, #356]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fbc4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbc6:	f003 0302 	and.w	r3, r3, #2
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d0ee      	beq.n	800fbac <HAL_RCC_OscConfig+0x5f0>
 800fbce:	e014      	b.n	800fbfa <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800fbd0:	f7f9 fa6a 	bl	80090a8 <HAL_GetTick>
 800fbd4:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fbd6:	e00a      	b.n	800fbee <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800fbd8:	f7f9 fa66 	bl	80090a8 <HAL_GetTick>
 800fbdc:	4602      	mov	r2, r0
 800fbde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fbe0:	1ad3      	subs	r3, r2, r3
 800fbe2:	f241 3288 	movw	r2, #5000	@ 0x1388
 800fbe6:	4293      	cmp	r3, r2
 800fbe8:	d901      	bls.n	800fbee <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800fbea:	2303      	movs	r3, #3
 800fbec:	e138      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800fbee:	4b4e      	ldr	r3, [pc, #312]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fbf0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fbf2:	f003 0302 	and.w	r3, r3, #2
 800fbf6:	2b00      	cmp	r3, #0
 800fbf8:	d1ee      	bne.n	800fbd8 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800fbfa:	687b      	ldr	r3, [r7, #4]
 800fbfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fbfe:	2b00      	cmp	r3, #0
 800fc00:	f000 812d 	beq.w	800fe5e <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800fc04:	4b48      	ldr	r3, [pc, #288]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc06:	691b      	ldr	r3, [r3, #16]
 800fc08:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800fc0c:	2b18      	cmp	r3, #24
 800fc0e:	f000 80bd 	beq.w	800fd8c <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800fc12:	687b      	ldr	r3, [r7, #4]
 800fc14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fc16:	2b02      	cmp	r3, #2
 800fc18:	f040 809e 	bne.w	800fd58 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fc1c:	4b42      	ldr	r3, [pc, #264]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc1e:	681b      	ldr	r3, [r3, #0]
 800fc20:	4a41      	ldr	r2, [pc, #260]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc22:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fc26:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fc28:	f7f9 fa3e 	bl	80090a8 <HAL_GetTick>
 800fc2c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fc2e:	e008      	b.n	800fc42 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fc30:	f7f9 fa3a 	bl	80090a8 <HAL_GetTick>
 800fc34:	4602      	mov	r2, r0
 800fc36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fc38:	1ad3      	subs	r3, r2, r3
 800fc3a:	2b02      	cmp	r3, #2
 800fc3c:	d901      	bls.n	800fc42 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800fc3e:	2303      	movs	r3, #3
 800fc40:	e10e      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fc42:	4b39      	ldr	r3, [pc, #228]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc44:	681b      	ldr	r3, [r3, #0]
 800fc46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fc4a:	2b00      	cmp	r3, #0
 800fc4c:	d1f0      	bne.n	800fc30 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800fc4e:	4b36      	ldr	r3, [pc, #216]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc50:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800fc52:	4b37      	ldr	r3, [pc, #220]	@ (800fd30 <HAL_RCC_OscConfig+0x774>)
 800fc54:	4013      	ands	r3, r2
 800fc56:	687a      	ldr	r2, [r7, #4]
 800fc58:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800fc5a:	687a      	ldr	r2, [r7, #4]
 800fc5c:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800fc5e:	0112      	lsls	r2, r2, #4
 800fc60:	430a      	orrs	r2, r1
 800fc62:	4931      	ldr	r1, [pc, #196]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc64:	4313      	orrs	r3, r2
 800fc66:	628b      	str	r3, [r1, #40]	@ 0x28
 800fc68:	687b      	ldr	r3, [r7, #4]
 800fc6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fc6c:	3b01      	subs	r3, #1
 800fc6e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fc72:	687b      	ldr	r3, [r7, #4]
 800fc74:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fc76:	3b01      	subs	r3, #1
 800fc78:	025b      	lsls	r3, r3, #9
 800fc7a:	b29b      	uxth	r3, r3
 800fc7c:	431a      	orrs	r2, r3
 800fc7e:	687b      	ldr	r3, [r7, #4]
 800fc80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fc82:	3b01      	subs	r3, #1
 800fc84:	041b      	lsls	r3, r3, #16
 800fc86:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800fc8a:	431a      	orrs	r2, r3
 800fc8c:	687b      	ldr	r3, [r7, #4]
 800fc8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fc90:	3b01      	subs	r3, #1
 800fc92:	061b      	lsls	r3, r3, #24
 800fc94:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800fc98:	4923      	ldr	r1, [pc, #140]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fc9a:	4313      	orrs	r3, r2
 800fc9c:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800fc9e:	4b22      	ldr	r3, [pc, #136]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fca2:	4a21      	ldr	r2, [pc, #132]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fca4:	f023 0301 	bic.w	r3, r3, #1
 800fca8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fcaa:	4b1f      	ldr	r3, [pc, #124]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcac:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fcae:	4b21      	ldr	r3, [pc, #132]	@ (800fd34 <HAL_RCC_OscConfig+0x778>)
 800fcb0:	4013      	ands	r3, r2
 800fcb2:	687a      	ldr	r2, [r7, #4]
 800fcb4:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800fcb6:	00d2      	lsls	r2, r2, #3
 800fcb8:	491b      	ldr	r1, [pc, #108]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcba:	4313      	orrs	r3, r2
 800fcbc:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800fcbe:	4b1a      	ldr	r3, [pc, #104]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcc2:	f023 020c 	bic.w	r2, r3, #12
 800fcc6:	687b      	ldr	r3, [r7, #4]
 800fcc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800fcca:	4917      	ldr	r1, [pc, #92]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fccc:	4313      	orrs	r3, r2
 800fcce:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800fcd0:	4b15      	ldr	r3, [pc, #84]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcd4:	f023 0202 	bic.w	r2, r3, #2
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcdc:	4912      	ldr	r1, [pc, #72]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcde:	4313      	orrs	r3, r2
 800fce0:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800fce2:	4b11      	ldr	r3, [pc, #68]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fce6:	4a10      	ldr	r2, [pc, #64]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fce8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800fcec:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800fcee:	4b0e      	ldr	r3, [pc, #56]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcf2:	4a0d      	ldr	r2, [pc, #52]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcf4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800fcf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800fcfa:	4b0b      	ldr	r3, [pc, #44]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fcfe:	4a0a      	ldr	r2, [pc, #40]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fd00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800fd04:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800fd06:	4b08      	ldr	r3, [pc, #32]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fd08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fd0a:	4a07      	ldr	r2, [pc, #28]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fd0c:	f043 0301 	orr.w	r3, r3, #1
 800fd10:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800fd12:	4b05      	ldr	r3, [pc, #20]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fd14:	681b      	ldr	r3, [r3, #0]
 800fd16:	4a04      	ldr	r2, [pc, #16]	@ (800fd28 <HAL_RCC_OscConfig+0x76c>)
 800fd18:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800fd1c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd1e:	f7f9 f9c3 	bl	80090a8 <HAL_GetTick>
 800fd22:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fd24:	e011      	b.n	800fd4a <HAL_RCC_OscConfig+0x78e>
 800fd26:	bf00      	nop
 800fd28:	58024400 	.word	0x58024400
 800fd2c:	58024800 	.word	0x58024800
 800fd30:	fffffc0c 	.word	0xfffffc0c
 800fd34:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd38:	f7f9 f9b6 	bl	80090a8 <HAL_GetTick>
 800fd3c:	4602      	mov	r2, r0
 800fd3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd40:	1ad3      	subs	r3, r2, r3
 800fd42:	2b02      	cmp	r3, #2
 800fd44:	d901      	bls.n	800fd4a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800fd46:	2303      	movs	r3, #3
 800fd48:	e08a      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800fd4a:	4b47      	ldr	r3, [pc, #284]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fd4c:	681b      	ldr	r3, [r3, #0]
 800fd4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd52:	2b00      	cmp	r3, #0
 800fd54:	d0f0      	beq.n	800fd38 <HAL_RCC_OscConfig+0x77c>
 800fd56:	e082      	b.n	800fe5e <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800fd58:	4b43      	ldr	r3, [pc, #268]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fd5a:	681b      	ldr	r3, [r3, #0]
 800fd5c:	4a42      	ldr	r2, [pc, #264]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fd5e:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800fd62:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800fd64:	f7f9 f9a0 	bl	80090a8 <HAL_GetTick>
 800fd68:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fd6a:	e008      	b.n	800fd7e <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800fd6c:	f7f9 f99c 	bl	80090a8 <HAL_GetTick>
 800fd70:	4602      	mov	r2, r0
 800fd72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fd74:	1ad3      	subs	r3, r2, r3
 800fd76:	2b02      	cmp	r3, #2
 800fd78:	d901      	bls.n	800fd7e <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800fd7a:	2303      	movs	r3, #3
 800fd7c:	e070      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800fd7e:	4b3a      	ldr	r3, [pc, #232]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fd80:	681b      	ldr	r3, [r3, #0]
 800fd82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800fd86:	2b00      	cmp	r3, #0
 800fd88:	d1f0      	bne.n	800fd6c <HAL_RCC_OscConfig+0x7b0>
 800fd8a:	e068      	b.n	800fe5e <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800fd8c:	4b36      	ldr	r3, [pc, #216]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fd8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fd90:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800fd92:	4b35      	ldr	r3, [pc, #212]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fd94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fd96:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fd98:	687b      	ldr	r3, [r7, #4]
 800fd9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd9c:	2b01      	cmp	r3, #1
 800fd9e:	d031      	beq.n	800fe04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fda0:	693b      	ldr	r3, [r7, #16]
 800fda2:	f003 0203 	and.w	r2, r3, #3
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800fdaa:	429a      	cmp	r2, r3
 800fdac:	d12a      	bne.n	800fe04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fdae:	693b      	ldr	r3, [r7, #16]
 800fdb0:	091b      	lsrs	r3, r3, #4
 800fdb2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800fdba:	429a      	cmp	r2, r3
 800fdbc:	d122      	bne.n	800fe04 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fdbe:	68fb      	ldr	r3, [r7, #12]
 800fdc0:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800fdc4:	687b      	ldr	r3, [r7, #4]
 800fdc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fdc8:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800fdca:	429a      	cmp	r2, r3
 800fdcc:	d11a      	bne.n	800fe04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fdce:	68fb      	ldr	r3, [r7, #12]
 800fdd0:	0a5b      	lsrs	r3, r3, #9
 800fdd2:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fdda:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800fddc:	429a      	cmp	r2, r3
 800fdde:	d111      	bne.n	800fe04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fde0:	68fb      	ldr	r3, [r7, #12]
 800fde2:	0c1b      	lsrs	r3, r3, #16
 800fde4:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800fdec:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800fdee:	429a      	cmp	r2, r3
 800fdf0:	d108      	bne.n	800fe04 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800fdf2:	68fb      	ldr	r3, [r7, #12]
 800fdf4:	0e1b      	lsrs	r3, r3, #24
 800fdf6:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800fdfa:	687b      	ldr	r3, [r7, #4]
 800fdfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fdfe:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800fe00:	429a      	cmp	r2, r3
 800fe02:	d001      	beq.n	800fe08 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800fe04:	2301      	movs	r3, #1
 800fe06:	e02b      	b.n	800fe60 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800fe08:	4b17      	ldr	r3, [pc, #92]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe0a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe0c:	08db      	lsrs	r3, r3, #3
 800fe0e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800fe12:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800fe18:	693a      	ldr	r2, [r7, #16]
 800fe1a:	429a      	cmp	r2, r3
 800fe1c:	d01f      	beq.n	800fe5e <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800fe1e:	4b12      	ldr	r3, [pc, #72]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe22:	4a11      	ldr	r2, [pc, #68]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe24:	f023 0301 	bic.w	r3, r3, #1
 800fe28:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800fe2a:	f7f9 f93d 	bl	80090a8 <HAL_GetTick>
 800fe2e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800fe30:	bf00      	nop
 800fe32:	f7f9 f939 	bl	80090a8 <HAL_GetTick>
 800fe36:	4602      	mov	r2, r0
 800fe38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fe3a:	4293      	cmp	r3, r2
 800fe3c:	d0f9      	beq.n	800fe32 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800fe3e:	4b0a      	ldr	r3, [pc, #40]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe40:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800fe42:	4b0a      	ldr	r3, [pc, #40]	@ (800fe6c <HAL_RCC_OscConfig+0x8b0>)
 800fe44:	4013      	ands	r3, r2
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800fe4a:	00d2      	lsls	r2, r2, #3
 800fe4c:	4906      	ldr	r1, [pc, #24]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe4e:	4313      	orrs	r3, r2
 800fe50:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800fe52:	4b05      	ldr	r3, [pc, #20]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe54:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800fe56:	4a04      	ldr	r2, [pc, #16]	@ (800fe68 <HAL_RCC_OscConfig+0x8ac>)
 800fe58:	f043 0301 	orr.w	r3, r3, #1
 800fe5c:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800fe5e:	2300      	movs	r3, #0
}
 800fe60:	4618      	mov	r0, r3
 800fe62:	3730      	adds	r7, #48	@ 0x30
 800fe64:	46bd      	mov	sp, r7
 800fe66:	bd80      	pop	{r7, pc}
 800fe68:	58024400 	.word	0x58024400
 800fe6c:	ffff0007 	.word	0xffff0007

0800fe70 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800fe70:	b580      	push	{r7, lr}
 800fe72:	b086      	sub	sp, #24
 800fe74:	af00      	add	r7, sp, #0
 800fe76:	6078      	str	r0, [r7, #4]
 800fe78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	2b00      	cmp	r3, #0
 800fe7e:	d101      	bne.n	800fe84 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800fe80:	2301      	movs	r3, #1
 800fe82:	e19c      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800fe84:	4b8a      	ldr	r3, [pc, #552]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 800fe86:	681b      	ldr	r3, [r3, #0]
 800fe88:	f003 030f 	and.w	r3, r3, #15
 800fe8c:	683a      	ldr	r2, [r7, #0]
 800fe8e:	429a      	cmp	r2, r3
 800fe90:	d910      	bls.n	800feb4 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800fe92:	4b87      	ldr	r3, [pc, #540]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 800fe94:	681b      	ldr	r3, [r3, #0]
 800fe96:	f023 020f 	bic.w	r2, r3, #15
 800fe9a:	4985      	ldr	r1, [pc, #532]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 800fe9c:	683b      	ldr	r3, [r7, #0]
 800fe9e:	4313      	orrs	r3, r2
 800fea0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800fea2:	4b83      	ldr	r3, [pc, #524]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 800fea4:	681b      	ldr	r3, [r3, #0]
 800fea6:	f003 030f 	and.w	r3, r3, #15
 800feaa:	683a      	ldr	r2, [r7, #0]
 800feac:	429a      	cmp	r2, r3
 800feae:	d001      	beq.n	800feb4 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800feb0:	2301      	movs	r3, #1
 800feb2:	e184      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800feb4:	687b      	ldr	r3, [r7, #4]
 800feb6:	681b      	ldr	r3, [r3, #0]
 800feb8:	f003 0304 	and.w	r3, r3, #4
 800febc:	2b00      	cmp	r3, #0
 800febe:	d010      	beq.n	800fee2 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	691a      	ldr	r2, [r3, #16]
 800fec4:	4b7b      	ldr	r3, [pc, #492]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800fec6:	699b      	ldr	r3, [r3, #24]
 800fec8:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800fecc:	429a      	cmp	r2, r3
 800fece:	d908      	bls.n	800fee2 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800fed0:	4b78      	ldr	r3, [pc, #480]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800fed2:	699b      	ldr	r3, [r3, #24]
 800fed4:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800fed8:	687b      	ldr	r3, [r7, #4]
 800feda:	691b      	ldr	r3, [r3, #16]
 800fedc:	4975      	ldr	r1, [pc, #468]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800fede:	4313      	orrs	r3, r2
 800fee0:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	681b      	ldr	r3, [r3, #0]
 800fee6:	f003 0308 	and.w	r3, r3, #8
 800feea:	2b00      	cmp	r3, #0
 800feec:	d010      	beq.n	800ff10 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800feee:	687b      	ldr	r3, [r7, #4]
 800fef0:	695a      	ldr	r2, [r3, #20]
 800fef2:	4b70      	ldr	r3, [pc, #448]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800fef4:	69db      	ldr	r3, [r3, #28]
 800fef6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800fefa:	429a      	cmp	r2, r3
 800fefc:	d908      	bls.n	800ff10 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800fefe:	4b6d      	ldr	r3, [pc, #436]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff00:	69db      	ldr	r3, [r3, #28]
 800ff02:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	695b      	ldr	r3, [r3, #20]
 800ff0a:	496a      	ldr	r1, [pc, #424]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff0c:	4313      	orrs	r3, r2
 800ff0e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800ff10:	687b      	ldr	r3, [r7, #4]
 800ff12:	681b      	ldr	r3, [r3, #0]
 800ff14:	f003 0310 	and.w	r3, r3, #16
 800ff18:	2b00      	cmp	r3, #0
 800ff1a:	d010      	beq.n	800ff3e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800ff1c:	687b      	ldr	r3, [r7, #4]
 800ff1e:	699a      	ldr	r2, [r3, #24]
 800ff20:	4b64      	ldr	r3, [pc, #400]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff22:	69db      	ldr	r3, [r3, #28]
 800ff24:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800ff28:	429a      	cmp	r2, r3
 800ff2a:	d908      	bls.n	800ff3e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800ff2c:	4b61      	ldr	r3, [pc, #388]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff2e:	69db      	ldr	r3, [r3, #28]
 800ff30:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800ff34:	687b      	ldr	r3, [r7, #4]
 800ff36:	699b      	ldr	r3, [r3, #24]
 800ff38:	495e      	ldr	r1, [pc, #376]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff3a:	4313      	orrs	r3, r2
 800ff3c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800ff3e:	687b      	ldr	r3, [r7, #4]
 800ff40:	681b      	ldr	r3, [r3, #0]
 800ff42:	f003 0320 	and.w	r3, r3, #32
 800ff46:	2b00      	cmp	r3, #0
 800ff48:	d010      	beq.n	800ff6c <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800ff4a:	687b      	ldr	r3, [r7, #4]
 800ff4c:	69da      	ldr	r2, [r3, #28]
 800ff4e:	4b59      	ldr	r3, [pc, #356]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff50:	6a1b      	ldr	r3, [r3, #32]
 800ff52:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800ff56:	429a      	cmp	r2, r3
 800ff58:	d908      	bls.n	800ff6c <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800ff5a:	4b56      	ldr	r3, [pc, #344]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff5c:	6a1b      	ldr	r3, [r3, #32]
 800ff5e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800ff62:	687b      	ldr	r3, [r7, #4]
 800ff64:	69db      	ldr	r3, [r3, #28]
 800ff66:	4953      	ldr	r1, [pc, #332]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff68:	4313      	orrs	r3, r2
 800ff6a:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800ff6c:	687b      	ldr	r3, [r7, #4]
 800ff6e:	681b      	ldr	r3, [r3, #0]
 800ff70:	f003 0302 	and.w	r3, r3, #2
 800ff74:	2b00      	cmp	r3, #0
 800ff76:	d010      	beq.n	800ff9a <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800ff78:	687b      	ldr	r3, [r7, #4]
 800ff7a:	68da      	ldr	r2, [r3, #12]
 800ff7c:	4b4d      	ldr	r3, [pc, #308]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff7e:	699b      	ldr	r3, [r3, #24]
 800ff80:	f003 030f 	and.w	r3, r3, #15
 800ff84:	429a      	cmp	r2, r3
 800ff86:	d908      	bls.n	800ff9a <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800ff88:	4b4a      	ldr	r3, [pc, #296]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff8a:	699b      	ldr	r3, [r3, #24]
 800ff8c:	f023 020f 	bic.w	r2, r3, #15
 800ff90:	687b      	ldr	r3, [r7, #4]
 800ff92:	68db      	ldr	r3, [r3, #12]
 800ff94:	4947      	ldr	r1, [pc, #284]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ff96:	4313      	orrs	r3, r2
 800ff98:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800ff9a:	687b      	ldr	r3, [r7, #4]
 800ff9c:	681b      	ldr	r3, [r3, #0]
 800ff9e:	f003 0301 	and.w	r3, r3, #1
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d055      	beq.n	8010052 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800ffa6:	4b43      	ldr	r3, [pc, #268]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ffa8:	699b      	ldr	r3, [r3, #24]
 800ffaa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800ffae:	687b      	ldr	r3, [r7, #4]
 800ffb0:	689b      	ldr	r3, [r3, #8]
 800ffb2:	4940      	ldr	r1, [pc, #256]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ffb4:	4313      	orrs	r3, r2
 800ffb6:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800ffb8:	687b      	ldr	r3, [r7, #4]
 800ffba:	685b      	ldr	r3, [r3, #4]
 800ffbc:	2b02      	cmp	r3, #2
 800ffbe:	d107      	bne.n	800ffd0 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800ffc0:	4b3c      	ldr	r3, [pc, #240]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ffc2:	681b      	ldr	r3, [r3, #0]
 800ffc4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ffc8:	2b00      	cmp	r3, #0
 800ffca:	d121      	bne.n	8010010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ffcc:	2301      	movs	r3, #1
 800ffce:	e0f6      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800ffd0:	687b      	ldr	r3, [r7, #4]
 800ffd2:	685b      	ldr	r3, [r3, #4]
 800ffd4:	2b03      	cmp	r3, #3
 800ffd6:	d107      	bne.n	800ffe8 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800ffd8:	4b36      	ldr	r3, [pc, #216]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800ffda:	681b      	ldr	r3, [r3, #0]
 800ffdc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ffe0:	2b00      	cmp	r3, #0
 800ffe2:	d115      	bne.n	8010010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800ffe4:	2301      	movs	r3, #1
 800ffe6:	e0ea      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800ffe8:	687b      	ldr	r3, [r7, #4]
 800ffea:	685b      	ldr	r3, [r3, #4]
 800ffec:	2b01      	cmp	r3, #1
 800ffee:	d107      	bne.n	8010000 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800fff0:	4b30      	ldr	r3, [pc, #192]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 800fff2:	681b      	ldr	r3, [r3, #0]
 800fff4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800fff8:	2b00      	cmp	r3, #0
 800fffa:	d109      	bne.n	8010010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800fffc:	2301      	movs	r3, #1
 800fffe:	e0de      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8010000:	4b2c      	ldr	r3, [pc, #176]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 8010002:	681b      	ldr	r3, [r3, #0]
 8010004:	f003 0304 	and.w	r3, r3, #4
 8010008:	2b00      	cmp	r3, #0
 801000a:	d101      	bne.n	8010010 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801000c:	2301      	movs	r3, #1
 801000e:	e0d6      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8010010:	4b28      	ldr	r3, [pc, #160]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 8010012:	691b      	ldr	r3, [r3, #16]
 8010014:	f023 0207 	bic.w	r2, r3, #7
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	685b      	ldr	r3, [r3, #4]
 801001c:	4925      	ldr	r1, [pc, #148]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 801001e:	4313      	orrs	r3, r2
 8010020:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8010022:	f7f9 f841 	bl	80090a8 <HAL_GetTick>
 8010026:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010028:	e00a      	b.n	8010040 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801002a:	f7f9 f83d 	bl	80090a8 <HAL_GetTick>
 801002e:	4602      	mov	r2, r0
 8010030:	697b      	ldr	r3, [r7, #20]
 8010032:	1ad3      	subs	r3, r2, r3
 8010034:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010038:	4293      	cmp	r3, r2
 801003a:	d901      	bls.n	8010040 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801003c:	2303      	movs	r3, #3
 801003e:	e0be      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8010040:	4b1c      	ldr	r3, [pc, #112]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 8010042:	691b      	ldr	r3, [r3, #16]
 8010044:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8010048:	687b      	ldr	r3, [r7, #4]
 801004a:	685b      	ldr	r3, [r3, #4]
 801004c:	00db      	lsls	r3, r3, #3
 801004e:	429a      	cmp	r2, r3
 8010050:	d1eb      	bne.n	801002a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	681b      	ldr	r3, [r3, #0]
 8010056:	f003 0302 	and.w	r3, r3, #2
 801005a:	2b00      	cmp	r3, #0
 801005c:	d010      	beq.n	8010080 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801005e:	687b      	ldr	r3, [r7, #4]
 8010060:	68da      	ldr	r2, [r3, #12]
 8010062:	4b14      	ldr	r3, [pc, #80]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 8010064:	699b      	ldr	r3, [r3, #24]
 8010066:	f003 030f 	and.w	r3, r3, #15
 801006a:	429a      	cmp	r2, r3
 801006c:	d208      	bcs.n	8010080 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801006e:	4b11      	ldr	r3, [pc, #68]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 8010070:	699b      	ldr	r3, [r3, #24]
 8010072:	f023 020f 	bic.w	r2, r3, #15
 8010076:	687b      	ldr	r3, [r7, #4]
 8010078:	68db      	ldr	r3, [r3, #12]
 801007a:	490e      	ldr	r1, [pc, #56]	@ (80100b4 <HAL_RCC_ClockConfig+0x244>)
 801007c:	4313      	orrs	r3, r2
 801007e:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8010080:	4b0b      	ldr	r3, [pc, #44]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 8010082:	681b      	ldr	r3, [r3, #0]
 8010084:	f003 030f 	and.w	r3, r3, #15
 8010088:	683a      	ldr	r2, [r7, #0]
 801008a:	429a      	cmp	r2, r3
 801008c:	d214      	bcs.n	80100b8 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801008e:	4b08      	ldr	r3, [pc, #32]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 8010090:	681b      	ldr	r3, [r3, #0]
 8010092:	f023 020f 	bic.w	r2, r3, #15
 8010096:	4906      	ldr	r1, [pc, #24]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 8010098:	683b      	ldr	r3, [r7, #0]
 801009a:	4313      	orrs	r3, r2
 801009c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801009e:	4b04      	ldr	r3, [pc, #16]	@ (80100b0 <HAL_RCC_ClockConfig+0x240>)
 80100a0:	681b      	ldr	r3, [r3, #0]
 80100a2:	f003 030f 	and.w	r3, r3, #15
 80100a6:	683a      	ldr	r2, [r7, #0]
 80100a8:	429a      	cmp	r2, r3
 80100aa:	d005      	beq.n	80100b8 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80100ac:	2301      	movs	r3, #1
 80100ae:	e086      	b.n	80101be <HAL_RCC_ClockConfig+0x34e>
 80100b0:	52002000 	.word	0x52002000
 80100b4:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 80100b8:	687b      	ldr	r3, [r7, #4]
 80100ba:	681b      	ldr	r3, [r3, #0]
 80100bc:	f003 0304 	and.w	r3, r3, #4
 80100c0:	2b00      	cmp	r3, #0
 80100c2:	d010      	beq.n	80100e6 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 80100c4:	687b      	ldr	r3, [r7, #4]
 80100c6:	691a      	ldr	r2, [r3, #16]
 80100c8:	4b3f      	ldr	r3, [pc, #252]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 80100ca:	699b      	ldr	r3, [r3, #24]
 80100cc:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80100d0:	429a      	cmp	r2, r3
 80100d2:	d208      	bcs.n	80100e6 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 80100d4:	4b3c      	ldr	r3, [pc, #240]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 80100d6:	699b      	ldr	r3, [r3, #24]
 80100d8:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80100dc:	687b      	ldr	r3, [r7, #4]
 80100de:	691b      	ldr	r3, [r3, #16]
 80100e0:	4939      	ldr	r1, [pc, #228]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 80100e2:	4313      	orrs	r3, r2
 80100e4:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	681b      	ldr	r3, [r3, #0]
 80100ea:	f003 0308 	and.w	r3, r3, #8
 80100ee:	2b00      	cmp	r3, #0
 80100f0:	d010      	beq.n	8010114 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	695a      	ldr	r2, [r3, #20]
 80100f6:	4b34      	ldr	r3, [pc, #208]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 80100f8:	69db      	ldr	r3, [r3, #28]
 80100fa:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80100fe:	429a      	cmp	r2, r3
 8010100:	d208      	bcs.n	8010114 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8010102:	4b31      	ldr	r3, [pc, #196]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010104:	69db      	ldr	r3, [r3, #28]
 8010106:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801010a:	687b      	ldr	r3, [r7, #4]
 801010c:	695b      	ldr	r3, [r3, #20]
 801010e:	492e      	ldr	r1, [pc, #184]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010110:	4313      	orrs	r3, r2
 8010112:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8010114:	687b      	ldr	r3, [r7, #4]
 8010116:	681b      	ldr	r3, [r3, #0]
 8010118:	f003 0310 	and.w	r3, r3, #16
 801011c:	2b00      	cmp	r3, #0
 801011e:	d010      	beq.n	8010142 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8010120:	687b      	ldr	r3, [r7, #4]
 8010122:	699a      	ldr	r2, [r3, #24]
 8010124:	4b28      	ldr	r3, [pc, #160]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010126:	69db      	ldr	r3, [r3, #28]
 8010128:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801012c:	429a      	cmp	r2, r3
 801012e:	d208      	bcs.n	8010142 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8010130:	4b25      	ldr	r3, [pc, #148]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010132:	69db      	ldr	r3, [r3, #28]
 8010134:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8010138:	687b      	ldr	r3, [r7, #4]
 801013a:	699b      	ldr	r3, [r3, #24]
 801013c:	4922      	ldr	r1, [pc, #136]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 801013e:	4313      	orrs	r3, r2
 8010140:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8010142:	687b      	ldr	r3, [r7, #4]
 8010144:	681b      	ldr	r3, [r3, #0]
 8010146:	f003 0320 	and.w	r3, r3, #32
 801014a:	2b00      	cmp	r3, #0
 801014c:	d010      	beq.n	8010170 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801014e:	687b      	ldr	r3, [r7, #4]
 8010150:	69da      	ldr	r2, [r3, #28]
 8010152:	4b1d      	ldr	r3, [pc, #116]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010154:	6a1b      	ldr	r3, [r3, #32]
 8010156:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801015a:	429a      	cmp	r2, r3
 801015c:	d208      	bcs.n	8010170 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801015e:	4b1a      	ldr	r3, [pc, #104]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010160:	6a1b      	ldr	r3, [r3, #32]
 8010162:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8010166:	687b      	ldr	r3, [r7, #4]
 8010168:	69db      	ldr	r3, [r3, #28]
 801016a:	4917      	ldr	r1, [pc, #92]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 801016c:	4313      	orrs	r3, r2
 801016e:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8010170:	f000 f834 	bl	80101dc <HAL_RCC_GetSysClockFreq>
 8010174:	4602      	mov	r2, r0
 8010176:	4b14      	ldr	r3, [pc, #80]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010178:	699b      	ldr	r3, [r3, #24]
 801017a:	0a1b      	lsrs	r3, r3, #8
 801017c:	f003 030f 	and.w	r3, r3, #15
 8010180:	4912      	ldr	r1, [pc, #72]	@ (80101cc <HAL_RCC_ClockConfig+0x35c>)
 8010182:	5ccb      	ldrb	r3, [r1, r3]
 8010184:	f003 031f 	and.w	r3, r3, #31
 8010188:	fa22 f303 	lsr.w	r3, r2, r3
 801018c:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801018e:	4b0e      	ldr	r3, [pc, #56]	@ (80101c8 <HAL_RCC_ClockConfig+0x358>)
 8010190:	699b      	ldr	r3, [r3, #24]
 8010192:	f003 030f 	and.w	r3, r3, #15
 8010196:	4a0d      	ldr	r2, [pc, #52]	@ (80101cc <HAL_RCC_ClockConfig+0x35c>)
 8010198:	5cd3      	ldrb	r3, [r2, r3]
 801019a:	f003 031f 	and.w	r3, r3, #31
 801019e:	693a      	ldr	r2, [r7, #16]
 80101a0:	fa22 f303 	lsr.w	r3, r2, r3
 80101a4:	4a0a      	ldr	r2, [pc, #40]	@ (80101d0 <HAL_RCC_ClockConfig+0x360>)
 80101a6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80101a8:	4a0a      	ldr	r2, [pc, #40]	@ (80101d4 <HAL_RCC_ClockConfig+0x364>)
 80101aa:	693b      	ldr	r3, [r7, #16]
 80101ac:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80101ae:	4b0a      	ldr	r3, [pc, #40]	@ (80101d8 <HAL_RCC_ClockConfig+0x368>)
 80101b0:	681b      	ldr	r3, [r3, #0]
 80101b2:	4618      	mov	r0, r3
 80101b4:	f004 fcfc 	bl	8014bb0 <HAL_InitTick>
 80101b8:	4603      	mov	r3, r0
 80101ba:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 80101bc:	7bfb      	ldrb	r3, [r7, #15]
}
 80101be:	4618      	mov	r0, r3
 80101c0:	3718      	adds	r7, #24
 80101c2:	46bd      	mov	sp, r7
 80101c4:	bd80      	pop	{r7, pc}
 80101c6:	bf00      	nop
 80101c8:	58024400 	.word	0x58024400
 80101cc:	0801e568 	.word	0x0801e568
 80101d0:	24000404 	.word	0x24000404
 80101d4:	24000400 	.word	0x24000400
 80101d8:	240005d0 	.word	0x240005d0

080101dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80101dc:	b480      	push	{r7}
 80101de:	b089      	sub	sp, #36	@ 0x24
 80101e0:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 80101e2:	4bb3      	ldr	r3, [pc, #716]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80101e4:	691b      	ldr	r3, [r3, #16]
 80101e6:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80101ea:	2b18      	cmp	r3, #24
 80101ec:	f200 8155 	bhi.w	801049a <HAL_RCC_GetSysClockFreq+0x2be>
 80101f0:	a201      	add	r2, pc, #4	@ (adr r2, 80101f8 <HAL_RCC_GetSysClockFreq+0x1c>)
 80101f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101f6:	bf00      	nop
 80101f8:	0801025d 	.word	0x0801025d
 80101fc:	0801049b 	.word	0x0801049b
 8010200:	0801049b 	.word	0x0801049b
 8010204:	0801049b 	.word	0x0801049b
 8010208:	0801049b 	.word	0x0801049b
 801020c:	0801049b 	.word	0x0801049b
 8010210:	0801049b 	.word	0x0801049b
 8010214:	0801049b 	.word	0x0801049b
 8010218:	08010283 	.word	0x08010283
 801021c:	0801049b 	.word	0x0801049b
 8010220:	0801049b 	.word	0x0801049b
 8010224:	0801049b 	.word	0x0801049b
 8010228:	0801049b 	.word	0x0801049b
 801022c:	0801049b 	.word	0x0801049b
 8010230:	0801049b 	.word	0x0801049b
 8010234:	0801049b 	.word	0x0801049b
 8010238:	08010289 	.word	0x08010289
 801023c:	0801049b 	.word	0x0801049b
 8010240:	0801049b 	.word	0x0801049b
 8010244:	0801049b 	.word	0x0801049b
 8010248:	0801049b 	.word	0x0801049b
 801024c:	0801049b 	.word	0x0801049b
 8010250:	0801049b 	.word	0x0801049b
 8010254:	0801049b 	.word	0x0801049b
 8010258:	0801028f 	.word	0x0801028f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801025c:	4b94      	ldr	r3, [pc, #592]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	f003 0320 	and.w	r3, r3, #32
 8010264:	2b00      	cmp	r3, #0
 8010266:	d009      	beq.n	801027c <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8010268:	4b91      	ldr	r3, [pc, #580]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801026a:	681b      	ldr	r3, [r3, #0]
 801026c:	08db      	lsrs	r3, r3, #3
 801026e:	f003 0303 	and.w	r3, r3, #3
 8010272:	4a90      	ldr	r2, [pc, #576]	@ (80104b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010274:	fa22 f303 	lsr.w	r3, r2, r3
 8010278:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801027a:	e111      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801027c:	4b8d      	ldr	r3, [pc, #564]	@ (80104b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801027e:	61bb      	str	r3, [r7, #24]
      break;
 8010280:	e10e      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8010282:	4b8d      	ldr	r3, [pc, #564]	@ (80104b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8010284:	61bb      	str	r3, [r7, #24]
      break;
 8010286:	e10b      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8010288:	4b8c      	ldr	r3, [pc, #560]	@ (80104bc <HAL_RCC_GetSysClockFreq+0x2e0>)
 801028a:	61bb      	str	r3, [r7, #24]
      break;
 801028c:	e108      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801028e:	4b88      	ldr	r3, [pc, #544]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010290:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8010292:	f003 0303 	and.w	r3, r3, #3
 8010296:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8010298:	4b85      	ldr	r3, [pc, #532]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801029a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801029c:	091b      	lsrs	r3, r3, #4
 801029e:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80102a2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80102a4:	4b82      	ldr	r3, [pc, #520]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80102a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80102a8:	f003 0301 	and.w	r3, r3, #1
 80102ac:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80102ae:	4b80      	ldr	r3, [pc, #512]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80102b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80102b2:	08db      	lsrs	r3, r3, #3
 80102b4:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80102b8:	68fa      	ldr	r2, [r7, #12]
 80102ba:	fb02 f303 	mul.w	r3, r2, r3
 80102be:	ee07 3a90 	vmov	s15, r3
 80102c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80102c6:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 80102ca:	693b      	ldr	r3, [r7, #16]
 80102cc:	2b00      	cmp	r3, #0
 80102ce:	f000 80e1 	beq.w	8010494 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 80102d2:	697b      	ldr	r3, [r7, #20]
 80102d4:	2b02      	cmp	r3, #2
 80102d6:	f000 8083 	beq.w	80103e0 <HAL_RCC_GetSysClockFreq+0x204>
 80102da:	697b      	ldr	r3, [r7, #20]
 80102dc:	2b02      	cmp	r3, #2
 80102de:	f200 80a1 	bhi.w	8010424 <HAL_RCC_GetSysClockFreq+0x248>
 80102e2:	697b      	ldr	r3, [r7, #20]
 80102e4:	2b00      	cmp	r3, #0
 80102e6:	d003      	beq.n	80102f0 <HAL_RCC_GetSysClockFreq+0x114>
 80102e8:	697b      	ldr	r3, [r7, #20]
 80102ea:	2b01      	cmp	r3, #1
 80102ec:	d056      	beq.n	801039c <HAL_RCC_GetSysClockFreq+0x1c0>
 80102ee:	e099      	b.n	8010424 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80102f0:	4b6f      	ldr	r3, [pc, #444]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	f003 0320 	and.w	r3, r3, #32
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d02d      	beq.n	8010358 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80102fc:	4b6c      	ldr	r3, [pc, #432]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80102fe:	681b      	ldr	r3, [r3, #0]
 8010300:	08db      	lsrs	r3, r3, #3
 8010302:	f003 0303 	and.w	r3, r3, #3
 8010306:	4a6b      	ldr	r2, [pc, #428]	@ (80104b4 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8010308:	fa22 f303 	lsr.w	r3, r2, r3
 801030c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801030e:	687b      	ldr	r3, [r7, #4]
 8010310:	ee07 3a90 	vmov	s15, r3
 8010314:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010318:	693b      	ldr	r3, [r7, #16]
 801031a:	ee07 3a90 	vmov	s15, r3
 801031e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010322:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010326:	4b62      	ldr	r3, [pc, #392]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801032a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801032e:	ee07 3a90 	vmov	s15, r3
 8010332:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010336:	ed97 6a02 	vldr	s12, [r7, #8]
 801033a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 80104c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801033e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010342:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010346:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801034a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801034e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010352:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8010356:	e087      	b.n	8010468 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010358:	693b      	ldr	r3, [r7, #16]
 801035a:	ee07 3a90 	vmov	s15, r3
 801035e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8010362:	eddf 6a58 	vldr	s13, [pc, #352]	@ 80104c4 <HAL_RCC_GetSysClockFreq+0x2e8>
 8010366:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801036a:	4b51      	ldr	r3, [pc, #324]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801036c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801036e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8010372:	ee07 3a90 	vmov	s15, r3
 8010376:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801037a:	ed97 6a02 	vldr	s12, [r7, #8]
 801037e:	eddf 5a50 	vldr	s11, [pc, #320]	@ 80104c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 8010382:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010386:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801038a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801038e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8010392:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010396:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801039a:	e065      	b.n	8010468 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801039c:	693b      	ldr	r3, [r7, #16]
 801039e:	ee07 3a90 	vmov	s15, r3
 80103a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103a6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 80104c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 80103aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103ae:	4b40      	ldr	r3, [pc, #256]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80103b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103b6:	ee07 3a90 	vmov	s15, r3
 80103ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80103be:	ed97 6a02 	vldr	s12, [r7, #8]
 80103c2:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 80104c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 80103c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80103ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80103ce:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80103d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80103d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80103da:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80103de:	e043      	b.n	8010468 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80103e0:	693b      	ldr	r3, [r7, #16]
 80103e2:	ee07 3a90 	vmov	s15, r3
 80103e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80103ea:	eddf 6a38 	vldr	s13, [pc, #224]	@ 80104cc <HAL_RCC_GetSysClockFreq+0x2f0>
 80103ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80103f2:	4b2f      	ldr	r3, [pc, #188]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80103f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80103f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80103fa:	ee07 3a90 	vmov	s15, r3
 80103fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010402:	ed97 6a02 	vldr	s12, [r7, #8]
 8010406:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 80104c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801040a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801040e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010412:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8010416:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801041a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801041e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010422:	e021      	b.n	8010468 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8010424:	693b      	ldr	r3, [r7, #16]
 8010426:	ee07 3a90 	vmov	s15, r3
 801042a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801042e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 80104c8 <HAL_RCC_GetSysClockFreq+0x2ec>
 8010432:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8010436:	4b1e      	ldr	r3, [pc, #120]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8010438:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801043a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801043e:	ee07 3a90 	vmov	s15, r3
 8010442:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8010446:	ed97 6a02 	vldr	s12, [r7, #8]
 801044a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 80104c0 <HAL_RCC_GetSysClockFreq+0x2e4>
 801044e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8010452:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8010456:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801045a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801045e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8010462:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8010466:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8010468:	4b11      	ldr	r3, [pc, #68]	@ (80104b0 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801046a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801046c:	0a5b      	lsrs	r3, r3, #9
 801046e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8010472:	3301      	adds	r3, #1
 8010474:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 8010476:	683b      	ldr	r3, [r7, #0]
 8010478:	ee07 3a90 	vmov	s15, r3
 801047c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8010480:	edd7 6a07 	vldr	s13, [r7, #28]
 8010484:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010488:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801048c:	ee17 3a90 	vmov	r3, s15
 8010490:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 8010492:	e005      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 8010494:	2300      	movs	r3, #0
 8010496:	61bb      	str	r3, [r7, #24]
      break;
 8010498:	e002      	b.n	80104a0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801049a:	4b07      	ldr	r3, [pc, #28]	@ (80104b8 <HAL_RCC_GetSysClockFreq+0x2dc>)
 801049c:	61bb      	str	r3, [r7, #24]
      break;
 801049e:	bf00      	nop
  }

  return sysclockfreq;
 80104a0:	69bb      	ldr	r3, [r7, #24]
}
 80104a2:	4618      	mov	r0, r3
 80104a4:	3724      	adds	r7, #36	@ 0x24
 80104a6:	46bd      	mov	sp, r7
 80104a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80104ac:	4770      	bx	lr
 80104ae:	bf00      	nop
 80104b0:	58024400 	.word	0x58024400
 80104b4:	03d09000 	.word	0x03d09000
 80104b8:	003d0900 	.word	0x003d0900
 80104bc:	017d7840 	.word	0x017d7840
 80104c0:	46000000 	.word	0x46000000
 80104c4:	4c742400 	.word	0x4c742400
 80104c8:	4a742400 	.word	0x4a742400
 80104cc:	4bbebc20 	.word	0x4bbebc20

080104d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80104d0:	b580      	push	{r7, lr}
 80104d2:	b082      	sub	sp, #8
 80104d4:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80104d6:	f7ff fe81 	bl	80101dc <HAL_RCC_GetSysClockFreq>
 80104da:	4602      	mov	r2, r0
 80104dc:	4b10      	ldr	r3, [pc, #64]	@ (8010520 <HAL_RCC_GetHCLKFreq+0x50>)
 80104de:	699b      	ldr	r3, [r3, #24]
 80104e0:	0a1b      	lsrs	r3, r3, #8
 80104e2:	f003 030f 	and.w	r3, r3, #15
 80104e6:	490f      	ldr	r1, [pc, #60]	@ (8010524 <HAL_RCC_GetHCLKFreq+0x54>)
 80104e8:	5ccb      	ldrb	r3, [r1, r3]
 80104ea:	f003 031f 	and.w	r3, r3, #31
 80104ee:	fa22 f303 	lsr.w	r3, r2, r3
 80104f2:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80104f4:	4b0a      	ldr	r3, [pc, #40]	@ (8010520 <HAL_RCC_GetHCLKFreq+0x50>)
 80104f6:	699b      	ldr	r3, [r3, #24]
 80104f8:	f003 030f 	and.w	r3, r3, #15
 80104fc:	4a09      	ldr	r2, [pc, #36]	@ (8010524 <HAL_RCC_GetHCLKFreq+0x54>)
 80104fe:	5cd3      	ldrb	r3, [r2, r3]
 8010500:	f003 031f 	and.w	r3, r3, #31
 8010504:	687a      	ldr	r2, [r7, #4]
 8010506:	fa22 f303 	lsr.w	r3, r2, r3
 801050a:	4a07      	ldr	r2, [pc, #28]	@ (8010528 <HAL_RCC_GetHCLKFreq+0x58>)
 801050c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801050e:	4a07      	ldr	r2, [pc, #28]	@ (801052c <HAL_RCC_GetHCLKFreq+0x5c>)
 8010510:	687b      	ldr	r3, [r7, #4]
 8010512:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8010514:	4b04      	ldr	r3, [pc, #16]	@ (8010528 <HAL_RCC_GetHCLKFreq+0x58>)
 8010516:	681b      	ldr	r3, [r3, #0]
}
 8010518:	4618      	mov	r0, r3
 801051a:	3708      	adds	r7, #8
 801051c:	46bd      	mov	sp, r7
 801051e:	bd80      	pop	{r7, pc}
 8010520:	58024400 	.word	0x58024400
 8010524:	0801e568 	.word	0x0801e568
 8010528:	24000404 	.word	0x24000404
 801052c:	24000400 	.word	0x24000400

08010530 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8010530:	b580      	push	{r7, lr}
 8010532:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8010534:	f7ff ffcc 	bl	80104d0 <HAL_RCC_GetHCLKFreq>
 8010538:	4602      	mov	r2, r0
 801053a:	4b06      	ldr	r3, [pc, #24]	@ (8010554 <HAL_RCC_GetPCLK1Freq+0x24>)
 801053c:	69db      	ldr	r3, [r3, #28]
 801053e:	091b      	lsrs	r3, r3, #4
 8010540:	f003 0307 	and.w	r3, r3, #7
 8010544:	4904      	ldr	r1, [pc, #16]	@ (8010558 <HAL_RCC_GetPCLK1Freq+0x28>)
 8010546:	5ccb      	ldrb	r3, [r1, r3]
 8010548:	f003 031f 	and.w	r3, r3, #31
 801054c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8010550:	4618      	mov	r0, r3
 8010552:	bd80      	pop	{r7, pc}
 8010554:	58024400 	.word	0x58024400
 8010558:	0801e568 	.word	0x0801e568

0801055c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801055c:	b580      	push	{r7, lr}
 801055e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8010560:	f7ff ffb6 	bl	80104d0 <HAL_RCC_GetHCLKFreq>
 8010564:	4602      	mov	r2, r0
 8010566:	4b06      	ldr	r3, [pc, #24]	@ (8010580 <HAL_RCC_GetPCLK2Freq+0x24>)
 8010568:	69db      	ldr	r3, [r3, #28]
 801056a:	0a1b      	lsrs	r3, r3, #8
 801056c:	f003 0307 	and.w	r3, r3, #7
 8010570:	4904      	ldr	r1, [pc, #16]	@ (8010584 <HAL_RCC_GetPCLK2Freq+0x28>)
 8010572:	5ccb      	ldrb	r3, [r1, r3]
 8010574:	f003 031f 	and.w	r3, r3, #31
 8010578:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801057c:	4618      	mov	r0, r3
 801057e:	bd80      	pop	{r7, pc}
 8010580:	58024400 	.word	0x58024400
 8010584:	0801e568 	.word	0x0801e568

08010588 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency: Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8010588:	b480      	push	{r7}
 801058a:	b083      	sub	sp, #12
 801058c:	af00      	add	r7, sp, #0
 801058e:	6078      	str	r0, [r7, #4]
 8010590:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
 8010592:	687b      	ldr	r3, [r7, #4]
 8010594:	223f      	movs	r2, #63	@ 0x3f
 8010596:	601a      	str	r2, [r3, #0]
                                 RCC_CLOCKTYPE_PCLK2 |  RCC_CLOCKTYPE_D3PCLK1  ;

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8010598:	4b1a      	ldr	r3, [pc, #104]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 801059a:	691b      	ldr	r3, [r3, #16]
 801059c:	f003 0207 	and.w	r2, r3, #7
 80105a0:	687b      	ldr	r3, [r7, #4]
 80105a2:	605a      	str	r2, [r3, #4]

#if defined(RCC_D1CFGR_D1CPRE)
  /* Get the SYSCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1CPRE);
 80105a4:	4b17      	ldr	r3, [pc, #92]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 80105a6:	699b      	ldr	r3, [r3, #24]
 80105a8:	f403 6270 	and.w	r2, r3, #3840	@ 0xf00
 80105ac:	687b      	ldr	r3, [r7, #4]
 80105ae:	609a      	str	r2, [r3, #8]

  /* Get the D1HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_HPRE);
 80105b0:	4b14      	ldr	r3, [pc, #80]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 80105b2:	699b      	ldr	r3, [r3, #24]
 80105b4:	f003 020f 	and.w	r2, r3, #15
 80105b8:	687b      	ldr	r3, [r7, #4]
 80105ba:	60da      	str	r2, [r3, #12]

  /* Get the APB3 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB3CLKDivider = (uint32_t)(RCC->D1CFGR & RCC_D1CFGR_D1PPRE);
 80105bc:	4b11      	ldr	r3, [pc, #68]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 80105be:	699b      	ldr	r3, [r3, #24]
 80105c0:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80105c4:	687b      	ldr	r3, [r7, #4]
 80105c6:	611a      	str	r2, [r3, #16]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1);
 80105c8:	4b0e      	ldr	r3, [pc, #56]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 80105ca:	69db      	ldr	r3, [r3, #28]
 80105cc:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80105d0:	687b      	ldr	r3, [r7, #4]
 80105d2:	615a      	str	r2, [r3, #20]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2);
 80105d4:	4b0b      	ldr	r3, [pc, #44]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 80105d6:	69db      	ldr	r3, [r3, #28]
 80105d8:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80105dc:	687b      	ldr	r3, [r7, #4]
 80105de:	619a      	str	r2, [r3, #24]

  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->D3CFGR & RCC_D3CFGR_D3PPRE);
 80105e0:	4b08      	ldr	r3, [pc, #32]	@ (8010604 <HAL_RCC_GetClockConfig+0x7c>)
 80105e2:	6a1b      	ldr	r3, [r3, #32]
 80105e4:	f003 0270 	and.w	r2, r3, #112	@ 0x70
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	61da      	str	r2, [r3, #28]
  /* Get the APB4 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB4CLKDivider = (uint32_t)(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE);
#endif

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80105ec:	4b06      	ldr	r3, [pc, #24]	@ (8010608 <HAL_RCC_GetClockConfig+0x80>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	f003 020f 	and.w	r2, r3, #15
 80105f4:	683b      	ldr	r3, [r7, #0]
 80105f6:	601a      	str	r2, [r3, #0]
}
 80105f8:	bf00      	nop
 80105fa:	370c      	adds	r7, #12
 80105fc:	46bd      	mov	sp, r7
 80105fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010602:	4770      	bx	lr
 8010604:	58024400 	.word	0x58024400
 8010608:	52002000 	.word	0x52002000

0801060c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801060c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8010610:	b0cc      	sub	sp, #304	@ 0x130
 8010612:	af00      	add	r7, sp, #0
 8010614:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8010618:	2300      	movs	r3, #0
 801061a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801061e:	2300      	movs	r3, #0
 8010620:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8010624:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010628:	e9d3 2300 	ldrd	r2, r3, [r3]
 801062c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 8010630:	2500      	movs	r5, #0
 8010632:	ea54 0305 	orrs.w	r3, r4, r5
 8010636:	d049      	beq.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8010638:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801063c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801063e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010642:	d02f      	beq.n	80106a4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8010644:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8010648:	d828      	bhi.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x90>
 801064a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801064e:	d01a      	beq.n	8010686 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 8010650:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010654:	d822      	bhi.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x90>
 8010656:	2b00      	cmp	r3, #0
 8010658:	d003      	beq.n	8010662 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801065a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801065e:	d007      	beq.n	8010670 <HAL_RCCEx_PeriphCLKConfig+0x64>
 8010660:	e01c      	b.n	801069c <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010662:	4bb8      	ldr	r3, [pc, #736]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010664:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010666:	4ab7      	ldr	r2, [pc, #732]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010668:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801066c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801066e:	e01a      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010670:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010674:	3308      	adds	r3, #8
 8010676:	2102      	movs	r1, #2
 8010678:	4618      	mov	r0, r3
 801067a:	f002 fd47 	bl	801310c <RCCEx_PLL2_Config>
 801067e:	4603      	mov	r3, r0
 8010680:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8010684:	e00f      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8010686:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801068a:	3328      	adds	r3, #40	@ 0x28
 801068c:	2102      	movs	r1, #2
 801068e:	4618      	mov	r0, r3
 8010690:	f002 fdee 	bl	8013270 <RCCEx_PLL3_Config>
 8010694:	4603      	mov	r3, r0
 8010696:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801069a:	e004      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801069c:	2301      	movs	r3, #1
 801069e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80106a2:	e000      	b.n	80106a6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80106a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80106a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80106aa:	2b00      	cmp	r3, #0
 80106ac:	d10a      	bne.n	80106c4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 80106ae:	4ba5      	ldr	r3, [pc, #660]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80106b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80106b2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 80106b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106ba:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80106bc:	4aa1      	ldr	r2, [pc, #644]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80106be:	430b      	orrs	r3, r1
 80106c0:	6513      	str	r3, [r2, #80]	@ 0x50
 80106c2:	e003      	b.n	80106cc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80106c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80106c8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80106cc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80106d4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80106d8:	f04f 0900 	mov.w	r9, #0
 80106dc:	ea58 0309 	orrs.w	r3, r8, r9
 80106e0:	d047      	beq.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80106e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80106e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80106e8:	2b04      	cmp	r3, #4
 80106ea:	d82a      	bhi.n	8010742 <HAL_RCCEx_PeriphCLKConfig+0x136>
 80106ec:	a201      	add	r2, pc, #4	@ (adr r2, 80106f4 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80106ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80106f2:	bf00      	nop
 80106f4:	08010709 	.word	0x08010709
 80106f8:	08010717 	.word	0x08010717
 80106fc:	0801072d 	.word	0x0801072d
 8010700:	0801074b 	.word	0x0801074b
 8010704:	0801074b 	.word	0x0801074b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010708:	4b8e      	ldr	r3, [pc, #568]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801070a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801070c:	4a8d      	ldr	r2, [pc, #564]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801070e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010712:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010714:	e01a      	b.n	801074c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801071a:	3308      	adds	r3, #8
 801071c:	2100      	movs	r1, #0
 801071e:	4618      	mov	r0, r3
 8010720:	f002 fcf4 	bl	801310c <RCCEx_PLL2_Config>
 8010724:	4603      	mov	r3, r0
 8010726:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801072a:	e00f      	b.n	801074c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801072c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010730:	3328      	adds	r3, #40	@ 0x28
 8010732:	2100      	movs	r1, #0
 8010734:	4618      	mov	r0, r3
 8010736:	f002 fd9b 	bl	8013270 <RCCEx_PLL3_Config>
 801073a:	4603      	mov	r3, r0
 801073c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010740:	e004      	b.n	801074c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010742:	2301      	movs	r3, #1
 8010744:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010748:	e000      	b.n	801074c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801074a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801074c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010750:	2b00      	cmp	r3, #0
 8010752:	d10a      	bne.n	801076a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8010754:	4b7b      	ldr	r3, [pc, #492]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010756:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010758:	f023 0107 	bic.w	r1, r3, #7
 801075c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010760:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8010762:	4a78      	ldr	r2, [pc, #480]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010764:	430b      	orrs	r3, r1
 8010766:	6513      	str	r3, [r2, #80]	@ 0x50
 8010768:	e003      	b.n	8010772 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801076a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801076e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 8010772:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010776:	e9d3 2300 	ldrd	r2, r3, [r3]
 801077a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801077e:	f04f 0b00 	mov.w	fp, #0
 8010782:	ea5a 030b 	orrs.w	r3, sl, fp
 8010786:	d04c      	beq.n	8010822 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8010788:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801078c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801078e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010792:	d030      	beq.n	80107f6 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8010794:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010798:	d829      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801079a:	2bc0      	cmp	r3, #192	@ 0xc0
 801079c:	d02d      	beq.n	80107fa <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801079e:	2bc0      	cmp	r3, #192	@ 0xc0
 80107a0:	d825      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80107a2:	2b80      	cmp	r3, #128	@ 0x80
 80107a4:	d018      	beq.n	80107d8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80107a6:	2b80      	cmp	r3, #128	@ 0x80
 80107a8:	d821      	bhi.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80107aa:	2b00      	cmp	r3, #0
 80107ac:	d002      	beq.n	80107b4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 80107ae:	2b40      	cmp	r3, #64	@ 0x40
 80107b0:	d007      	beq.n	80107c2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 80107b2:	e01c      	b.n	80107ee <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80107b4:	4b63      	ldr	r3, [pc, #396]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80107b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80107b8:	4a62      	ldr	r2, [pc, #392]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80107ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80107be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80107c0:	e01c      	b.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80107c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80107c6:	3308      	adds	r3, #8
 80107c8:	2100      	movs	r1, #0
 80107ca:	4618      	mov	r0, r3
 80107cc:	f002 fc9e 	bl	801310c <RCCEx_PLL2_Config>
 80107d0:	4603      	mov	r3, r0
 80107d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80107d6:	e011      	b.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80107d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80107dc:	3328      	adds	r3, #40	@ 0x28
 80107de:	2100      	movs	r1, #0
 80107e0:	4618      	mov	r0, r3
 80107e2:	f002 fd45 	bl	8013270 <RCCEx_PLL3_Config>
 80107e6:	4603      	mov	r3, r0
 80107e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80107ec:	e006      	b.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80107ee:	2301      	movs	r3, #1
 80107f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80107f4:	e002      	b.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80107f6:	bf00      	nop
 80107f8:	e000      	b.n	80107fc <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80107fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80107fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010800:	2b00      	cmp	r3, #0
 8010802:	d10a      	bne.n	801081a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8010804:	4b4f      	ldr	r3, [pc, #316]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010806:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010808:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801080c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010810:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8010812:	4a4c      	ldr	r2, [pc, #304]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010814:	430b      	orrs	r3, r1
 8010816:	6513      	str	r3, [r2, #80]	@ 0x50
 8010818:	e003      	b.n	8010822 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801081a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801081e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8010822:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010826:	e9d3 2300 	ldrd	r2, r3, [r3]
 801082a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801082e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 8010832:	2300      	movs	r3, #0
 8010834:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8010838:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 801083c:	460b      	mov	r3, r1
 801083e:	4313      	orrs	r3, r2
 8010840:	d053      	beq.n	80108ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8010842:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010846:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801084a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801084e:	d035      	beq.n	80108bc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 8010850:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8010854:	d82e      	bhi.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8010856:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801085a:	d031      	beq.n	80108c0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801085c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8010860:	d828      	bhi.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8010862:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8010866:	d01a      	beq.n	801089e <HAL_RCCEx_PeriphCLKConfig+0x292>
 8010868:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801086c:	d822      	bhi.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801086e:	2b00      	cmp	r3, #0
 8010870:	d003      	beq.n	801087a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 8010872:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8010876:	d007      	beq.n	8010888 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8010878:	e01c      	b.n	80108b4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801087a:	4b32      	ldr	r3, [pc, #200]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801087c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801087e:	4a31      	ldr	r2, [pc, #196]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8010880:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010884:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010886:	e01c      	b.n	80108c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010888:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801088c:	3308      	adds	r3, #8
 801088e:	2100      	movs	r1, #0
 8010890:	4618      	mov	r0, r3
 8010892:	f002 fc3b 	bl	801310c <RCCEx_PLL2_Config>
 8010896:	4603      	mov	r3, r0
 8010898:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801089c:	e011      	b.n	80108c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801089e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80108a2:	3328      	adds	r3, #40	@ 0x28
 80108a4:	2100      	movs	r1, #0
 80108a6:	4618      	mov	r0, r3
 80108a8:	f002 fce2 	bl	8013270 <RCCEx_PLL3_Config>
 80108ac:	4603      	mov	r3, r0
 80108ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80108b2:	e006      	b.n	80108c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80108b4:	2301      	movs	r3, #1
 80108b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80108ba:	e002      	b.n	80108c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80108bc:	bf00      	nop
 80108be:	e000      	b.n	80108c2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 80108c0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80108c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80108c6:	2b00      	cmp	r3, #0
 80108c8:	d10b      	bne.n	80108e2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 80108ca:	4b1e      	ldr	r3, [pc, #120]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80108cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80108ce:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 80108d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80108d6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80108da:	4a1a      	ldr	r2, [pc, #104]	@ (8010944 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80108dc:	430b      	orrs	r3, r1
 80108de:	6593      	str	r3, [r2, #88]	@ 0x58
 80108e0:	e003      	b.n	80108ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80108e2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80108e6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80108ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80108ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80108f2:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80108f6:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80108fa:	2300      	movs	r3, #0
 80108fc:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 8010900:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 8010904:	460b      	mov	r3, r1
 8010906:	4313      	orrs	r3, r2
 8010908:	d056      	beq.n	80109b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801090a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801090e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8010912:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8010916:	d038      	beq.n	801098a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 8010918:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801091c:	d831      	bhi.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801091e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010922:	d034      	beq.n	801098e <HAL_RCCEx_PeriphCLKConfig+0x382>
 8010924:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8010928:	d82b      	bhi.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801092a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801092e:	d01d      	beq.n	801096c <HAL_RCCEx_PeriphCLKConfig+0x360>
 8010930:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8010934:	d825      	bhi.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010936:	2b00      	cmp	r3, #0
 8010938:	d006      	beq.n	8010948 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801093a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801093e:	d00a      	beq.n	8010956 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8010940:	e01f      	b.n	8010982 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8010942:	bf00      	nop
 8010944:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010948:	4ba2      	ldr	r3, [pc, #648]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801094a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801094c:	4aa1      	ldr	r2, [pc, #644]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801094e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010952:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010954:	e01c      	b.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010956:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801095a:	3308      	adds	r3, #8
 801095c:	2100      	movs	r1, #0
 801095e:	4618      	mov	r0, r3
 8010960:	f002 fbd4 	bl	801310c <RCCEx_PLL2_Config>
 8010964:	4603      	mov	r3, r0
 8010966:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801096a:	e011      	b.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801096c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010970:	3328      	adds	r3, #40	@ 0x28
 8010972:	2100      	movs	r1, #0
 8010974:	4618      	mov	r0, r3
 8010976:	f002 fc7b 	bl	8013270 <RCCEx_PLL3_Config>
 801097a:	4603      	mov	r3, r0
 801097c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8010980:	e006      	b.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8010982:	2301      	movs	r3, #1
 8010984:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010988:	e002      	b.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801098a:	bf00      	nop
 801098c:	e000      	b.n	8010990 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801098e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010990:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010994:	2b00      	cmp	r3, #0
 8010996:	d10b      	bne.n	80109b0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8010998:	4b8e      	ldr	r3, [pc, #568]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801099a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801099c:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 80109a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109a4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80109a8:	4a8a      	ldr	r2, [pc, #552]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80109aa:	430b      	orrs	r3, r1
 80109ac:	6593      	str	r3, [r2, #88]	@ 0x58
 80109ae:	e003      	b.n	80109b8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80109b0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80109b4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80109b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80109c0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 80109c4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 80109c8:	2300      	movs	r3, #0
 80109ca:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 80109ce:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 80109d2:	460b      	mov	r3, r1
 80109d4:	4313      	orrs	r3, r2
 80109d6:	d03a      	beq.n	8010a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80109d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80109dc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80109de:	2b30      	cmp	r3, #48	@ 0x30
 80109e0:	d01f      	beq.n	8010a22 <HAL_RCCEx_PeriphCLKConfig+0x416>
 80109e2:	2b30      	cmp	r3, #48	@ 0x30
 80109e4:	d819      	bhi.n	8010a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80109e6:	2b20      	cmp	r3, #32
 80109e8:	d00c      	beq.n	8010a04 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80109ea:	2b20      	cmp	r3, #32
 80109ec:	d815      	bhi.n	8010a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80109ee:	2b00      	cmp	r3, #0
 80109f0:	d019      	beq.n	8010a26 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80109f2:	2b10      	cmp	r3, #16
 80109f4:	d111      	bne.n	8010a1a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80109f6:	4b77      	ldr	r3, [pc, #476]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80109f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80109fa:	4a76      	ldr	r2, [pc, #472]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80109fc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010a00:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010a02:	e011      	b.n	8010a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a08:	3308      	adds	r3, #8
 8010a0a:	2102      	movs	r1, #2
 8010a0c:	4618      	mov	r0, r3
 8010a0e:	f002 fb7d 	bl	801310c <RCCEx_PLL2_Config>
 8010a12:	4603      	mov	r3, r0
 8010a14:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8010a18:	e006      	b.n	8010a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010a1a:	2301      	movs	r3, #1
 8010a1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010a20:	e002      	b.n	8010a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010a22:	bf00      	nop
 8010a24:	e000      	b.n	8010a28 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8010a26:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010a28:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10a      	bne.n	8010a46 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8010a30:	4b68      	ldr	r3, [pc, #416]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010a32:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a34:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8010a38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010a3e:	4a65      	ldr	r2, [pc, #404]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010a40:	430b      	orrs	r3, r1
 8010a42:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010a44:	e003      	b.n	8010a4e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010a46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010a4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8010a4e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010a56:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8010a5a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8010a5e:	2300      	movs	r3, #0
 8010a60:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8010a64:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8010a68:	460b      	mov	r3, r1
 8010a6a:	4313      	orrs	r3, r2
 8010a6c:	d051      	beq.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8010a6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010a72:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010a74:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010a78:	d035      	beq.n	8010ae6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8010a7a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8010a7e:	d82e      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010a80:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010a84:	d031      	beq.n	8010aea <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8010a86:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8010a8a:	d828      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010a8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a90:	d01a      	beq.n	8010ac8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8010a92:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8010a96:	d822      	bhi.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8010a98:	2b00      	cmp	r3, #0
 8010a9a:	d003      	beq.n	8010aa4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8010a9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8010aa0:	d007      	beq.n	8010ab2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8010aa2:	e01c      	b.n	8010ade <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010aa4:	4b4b      	ldr	r3, [pc, #300]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010aa6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010aa8:	4a4a      	ldr	r2, [pc, #296]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010aaa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010aae:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010ab0:	e01c      	b.n	8010aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8010ab2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ab6:	3308      	adds	r3, #8
 8010ab8:	2100      	movs	r1, #0
 8010aba:	4618      	mov	r0, r3
 8010abc:	f002 fb26 	bl	801310c <RCCEx_PLL2_Config>
 8010ac0:	4603      	mov	r3, r0
 8010ac2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010ac6:	e011      	b.n	8010aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8010ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010acc:	3328      	adds	r3, #40	@ 0x28
 8010ace:	2100      	movs	r1, #0
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f002 fbcd 	bl	8013270 <RCCEx_PLL3_Config>
 8010ad6:	4603      	mov	r3, r0
 8010ad8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8010adc:	e006      	b.n	8010aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010ade:	2301      	movs	r3, #1
 8010ae0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010ae4:	e002      	b.n	8010aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010ae6:	bf00      	nop
 8010ae8:	e000      	b.n	8010aec <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8010aea:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010aec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010af0:	2b00      	cmp	r3, #0
 8010af2:	d10a      	bne.n	8010b0a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8010af4:	4b37      	ldr	r3, [pc, #220]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010af6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010af8:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8010afc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b00:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8010b02:	4a34      	ldr	r2, [pc, #208]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010b04:	430b      	orrs	r3, r1
 8010b06:	6513      	str	r3, [r2, #80]	@ 0x50
 8010b08:	e003      	b.n	8010b12 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010b0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010b0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8010b12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010b1a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8010b1e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8010b22:	2300      	movs	r3, #0
 8010b24:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8010b28:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8010b2c:	460b      	mov	r3, r1
 8010b2e:	4313      	orrs	r3, r2
 8010b30:	d056      	beq.n	8010be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8010b32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b36:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010b38:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010b3c:	d033      	beq.n	8010ba6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8010b3e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8010b42:	d82c      	bhi.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010b44:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010b48:	d02f      	beq.n	8010baa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8010b4a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8010b4e:	d826      	bhi.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010b50:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010b54:	d02b      	beq.n	8010bae <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8010b56:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8010b5a:	d820      	bhi.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010b5c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b60:	d012      	beq.n	8010b88 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8010b62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8010b66:	d81a      	bhi.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
 8010b68:	2b00      	cmp	r3, #0
 8010b6a:	d022      	beq.n	8010bb2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8010b6c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8010b70:	d115      	bne.n	8010b9e <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010b72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b76:	3308      	adds	r3, #8
 8010b78:	2101      	movs	r1, #1
 8010b7a:	4618      	mov	r0, r3
 8010b7c:	f002 fac6 	bl	801310c <RCCEx_PLL2_Config>
 8010b80:	4603      	mov	r3, r0
 8010b82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010b86:	e015      	b.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010b88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010b8c:	3328      	adds	r3, #40	@ 0x28
 8010b8e:	2101      	movs	r1, #1
 8010b90:	4618      	mov	r0, r3
 8010b92:	f002 fb6d 	bl	8013270 <RCCEx_PLL3_Config>
 8010b96:	4603      	mov	r3, r0
 8010b98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8010b9c:	e00a      	b.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010ba4:	e006      	b.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010ba6:	bf00      	nop
 8010ba8:	e004      	b.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010baa:	bf00      	nop
 8010bac:	e002      	b.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010bae:	bf00      	nop
 8010bb0:	e000      	b.n	8010bb4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8010bb2:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010bb4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010bb8:	2b00      	cmp	r3, #0
 8010bba:	d10d      	bne.n	8010bd8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8010bbc:	4b05      	ldr	r3, [pc, #20]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010bbe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010bc0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8010bc4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010bc8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8010bca:	4a02      	ldr	r2, [pc, #8]	@ (8010bd4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8010bcc:	430b      	orrs	r3, r1
 8010bce:	6513      	str	r3, [r2, #80]	@ 0x50
 8010bd0:	e006      	b.n	8010be0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8010bd2:	bf00      	nop
 8010bd4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010bd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010bdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8010be0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010be4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010be8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8010bec:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8010bf0:	2300      	movs	r3, #0
 8010bf2:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8010bf6:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8010bfa:	460b      	mov	r3, r1
 8010bfc:	4313      	orrs	r3, r2
 8010bfe:	d055      	beq.n	8010cac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8010c00:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c04:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010c08:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c0c:	d033      	beq.n	8010c76 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8010c0e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8010c12:	d82c      	bhi.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c18:	d02f      	beq.n	8010c7a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8010c1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8010c1e:	d826      	bhi.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010c20:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010c24:	d02b      	beq.n	8010c7e <HAL_RCCEx_PeriphCLKConfig+0x672>
 8010c26:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8010c2a:	d820      	bhi.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010c2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c30:	d012      	beq.n	8010c58 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8010c32:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010c36:	d81a      	bhi.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	d022      	beq.n	8010c82 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8010c3c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010c40:	d115      	bne.n	8010c6e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010c42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c46:	3308      	adds	r3, #8
 8010c48:	2101      	movs	r1, #1
 8010c4a:	4618      	mov	r0, r3
 8010c4c:	f002 fa5e 	bl	801310c <RCCEx_PLL2_Config>
 8010c50:	4603      	mov	r3, r0
 8010c52:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010c56:	e015      	b.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8010c58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c5c:	3328      	adds	r3, #40	@ 0x28
 8010c5e:	2101      	movs	r1, #1
 8010c60:	4618      	mov	r0, r3
 8010c62:	f002 fb05 	bl	8013270 <RCCEx_PLL3_Config>
 8010c66:	4603      	mov	r3, r0
 8010c68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8010c6c:	e00a      	b.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8010c6e:	2301      	movs	r3, #1
 8010c70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010c74:	e006      	b.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010c76:	bf00      	nop
 8010c78:	e004      	b.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010c7a:	bf00      	nop
 8010c7c:	e002      	b.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010c7e:	bf00      	nop
 8010c80:	e000      	b.n	8010c84 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8010c82:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010c84:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d10b      	bne.n	8010ca4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8010c8c:	4bb6      	ldr	r3, [pc, #728]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010c8e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8010c90:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8010c94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010c98:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8010c9c:	4ab2      	ldr	r2, [pc, #712]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010c9e:	430b      	orrs	r3, r1
 8010ca0:	6593      	str	r3, [r2, #88]	@ 0x58
 8010ca2:	e003      	b.n	8010cac <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010ca4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010ca8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8010cac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010cb4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8010cb8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8010cbc:	2300      	movs	r3, #0
 8010cbe:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8010cc2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8010cc6:	460b      	mov	r3, r1
 8010cc8:	4313      	orrs	r3, r2
 8010cca:	d02a      	beq.n	8010d22 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8010ccc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010cd2:	2b00      	cmp	r3, #0
 8010cd4:	d011      	beq.n	8010cfa <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8010cd6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010cda:	d10a      	bne.n	8010cf2 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ce0:	3308      	adds	r3, #8
 8010ce2:	2101      	movs	r1, #1
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	f002 fa11 	bl	801310c <RCCEx_PLL2_Config>
 8010cea:	4603      	mov	r3, r0
 8010cec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8010cf0:	e004      	b.n	8010cfc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010cf2:	2301      	movs	r3, #1
 8010cf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010cf8:	e000      	b.n	8010cfc <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8010cfa:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010cfc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010d00:	2b00      	cmp	r3, #0
 8010d02:	d10a      	bne.n	8010d1a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8010d04:	4b98      	ldr	r3, [pc, #608]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010d06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010d08:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8010d0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d10:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d12:	4a95      	ldr	r2, [pc, #596]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010d14:	430b      	orrs	r3, r1
 8010d16:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010d18:	e003      	b.n	8010d22 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010d1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010d1e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8010d22:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010d2a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8010d2e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8010d32:	2300      	movs	r3, #0
 8010d34:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8010d38:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8010d3c:	460b      	mov	r3, r1
 8010d3e:	4313      	orrs	r3, r2
 8010d40:	d037      	beq.n	8010db2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8010d42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d46:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010d48:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d4c:	d00e      	beq.n	8010d6c <HAL_RCCEx_PeriphCLKConfig+0x760>
 8010d4e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8010d52:	d816      	bhi.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0x776>
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d018      	beq.n	8010d8a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8010d58:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8010d5c:	d111      	bne.n	8010d82 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010d5e:	4b82      	ldr	r3, [pc, #520]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010d62:	4a81      	ldr	r2, [pc, #516]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010d64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010d68:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010d6a:	e00f      	b.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8010d6c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010d70:	3308      	adds	r3, #8
 8010d72:	2101      	movs	r1, #1
 8010d74:	4618      	mov	r0, r3
 8010d76:	f002 f9c9 	bl	801310c <RCCEx_PLL2_Config>
 8010d7a:	4603      	mov	r3, r0
 8010d7c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8010d80:	e004      	b.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8010d82:	2301      	movs	r3, #1
 8010d84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010d88:	e000      	b.n	8010d8c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8010d8a:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010d8c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010d90:	2b00      	cmp	r3, #0
 8010d92:	d10a      	bne.n	8010daa <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8010d94:	4b74      	ldr	r3, [pc, #464]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010d96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8010d98:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8010d9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010da0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8010da2:	4a71      	ldr	r2, [pc, #452]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010da4:	430b      	orrs	r3, r1
 8010da6:	6513      	str	r3, [r2, #80]	@ 0x50
 8010da8:	e003      	b.n	8010db2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010daa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010dae:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8010db2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010db6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010dba:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8010dbe:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8010dc2:	2300      	movs	r3, #0
 8010dc4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8010dc8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8010dcc:	460b      	mov	r3, r1
 8010dce:	4313      	orrs	r3, r2
 8010dd0:	d03a      	beq.n	8010e48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8010dd2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010dd6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010dd8:	2b03      	cmp	r3, #3
 8010dda:	d81d      	bhi.n	8010e18 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8010ddc:	a201      	add	r2, pc, #4	@ (adr r2, 8010de4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8010dde:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010de2:	bf00      	nop
 8010de4:	08010e21 	.word	0x08010e21
 8010de8:	08010df5 	.word	0x08010df5
 8010dec:	08010e03 	.word	0x08010e03
 8010df0:	08010e21 	.word	0x08010e21
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8010df4:	4b5c      	ldr	r3, [pc, #368]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010df6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8010df8:	4a5b      	ldr	r2, [pc, #364]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010dfa:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8010dfe:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010e00:	e00f      	b.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8010e02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e06:	3308      	adds	r3, #8
 8010e08:	2102      	movs	r1, #2
 8010e0a:	4618      	mov	r0, r3
 8010e0c:	f002 f97e 	bl	801310c <RCCEx_PLL2_Config>
 8010e10:	4603      	mov	r3, r0
 8010e12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8010e16:	e004      	b.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8010e18:	2301      	movs	r3, #1
 8010e1a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010e1e:	e000      	b.n	8010e22 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8010e20:	bf00      	nop
    }

    if (ret == HAL_OK)
 8010e22:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010e26:	2b00      	cmp	r3, #0
 8010e28:	d10a      	bne.n	8010e40 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8010e2a:	4b4f      	ldr	r3, [pc, #316]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010e2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8010e2e:	f023 0103 	bic.w	r1, r3, #3
 8010e32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e36:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8010e38:	4a4b      	ldr	r2, [pc, #300]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010e3a:	430b      	orrs	r3, r1
 8010e3c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8010e3e:	e003      	b.n	8010e48 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010e40:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010e44:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8010e48:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010e50:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8010e54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8010e58:	2300      	movs	r3, #0
 8010e5a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8010e5e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8010e62:	460b      	mov	r3, r1
 8010e64:	4313      	orrs	r3, r2
 8010e66:	f000 80a0 	beq.w	8010faa <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8010e6a:	4b40      	ldr	r3, [pc, #256]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8010e6c:	681b      	ldr	r3, [r3, #0]
 8010e6e:	4a3f      	ldr	r2, [pc, #252]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8010e70:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010e74:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8010e76:	f7f8 f917 	bl	80090a8 <HAL_GetTick>
 8010e7a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010e7e:	e00b      	b.n	8010e98 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8010e80:	f7f8 f912 	bl	80090a8 <HAL_GetTick>
 8010e84:	4602      	mov	r2, r0
 8010e86:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010e8a:	1ad3      	subs	r3, r2, r3
 8010e8c:	2b64      	cmp	r3, #100	@ 0x64
 8010e8e:	d903      	bls.n	8010e98 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8010e90:	2303      	movs	r3, #3
 8010e92:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8010e96:	e005      	b.n	8010ea4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8010e98:	4b34      	ldr	r3, [pc, #208]	@ (8010f6c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8010e9a:	681b      	ldr	r3, [r3, #0]
 8010e9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010ea0:	2b00      	cmp	r3, #0
 8010ea2:	d0ed      	beq.n	8010e80 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8010ea4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010ea8:	2b00      	cmp	r3, #0
 8010eaa:	d17a      	bne.n	8010fa2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8010eac:	4b2e      	ldr	r3, [pc, #184]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010eae:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8010eb0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010eb4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010eb8:	4053      	eors	r3, r2
 8010eba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010ebe:	2b00      	cmp	r3, #0
 8010ec0:	d015      	beq.n	8010eee <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8010ec2:	4b29      	ldr	r3, [pc, #164]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010ec4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ec6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8010eca:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8010ece:	4b26      	ldr	r3, [pc, #152]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010ed0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ed2:	4a25      	ldr	r2, [pc, #148]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010ed4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8010ed8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8010eda:	4b23      	ldr	r3, [pc, #140]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010edc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010ede:	4a22      	ldr	r2, [pc, #136]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010ee0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8010ee4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8010ee6:	4a20      	ldr	r2, [pc, #128]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010ee8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8010eec:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8010eee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010ef2:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010ef6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010efa:	d118      	bne.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8010efc:	f7f8 f8d4 	bl	80090a8 <HAL_GetTick>
 8010f00:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010f04:	e00d      	b.n	8010f22 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8010f06:	f7f8 f8cf 	bl	80090a8 <HAL_GetTick>
 8010f0a:	4602      	mov	r2, r0
 8010f0c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8010f10:	1ad2      	subs	r2, r2, r3
 8010f12:	f241 3388 	movw	r3, #5000	@ 0x1388
 8010f16:	429a      	cmp	r2, r3
 8010f18:	d903      	bls.n	8010f22 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8010f1a:	2303      	movs	r3, #3
 8010f1c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8010f20:	e005      	b.n	8010f2e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8010f22:	4b11      	ldr	r3, [pc, #68]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010f24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8010f26:	f003 0302 	and.w	r3, r3, #2
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d0eb      	beq.n	8010f06 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8010f2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010f32:	2b00      	cmp	r3, #0
 8010f34:	d130      	bne.n	8010f98 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8010f36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f3a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010f3e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8010f42:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8010f46:	d115      	bne.n	8010f74 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8010f48:	4b07      	ldr	r3, [pc, #28]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010f4a:	691b      	ldr	r3, [r3, #16]
 8010f4c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8010f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010f58:	091a      	lsrs	r2, r3, #4
 8010f5a:	4b05      	ldr	r3, [pc, #20]	@ (8010f70 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8010f5c:	4013      	ands	r3, r2
 8010f5e:	4a02      	ldr	r2, [pc, #8]	@ (8010f68 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8010f60:	430b      	orrs	r3, r1
 8010f62:	6113      	str	r3, [r2, #16]
 8010f64:	e00c      	b.n	8010f80 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8010f66:	bf00      	nop
 8010f68:	58024400 	.word	0x58024400
 8010f6c:	58024800 	.word	0x58024800
 8010f70:	00ffffcf 	.word	0x00ffffcf
 8010f74:	4bd4      	ldr	r3, [pc, #848]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010f76:	691b      	ldr	r3, [r3, #16]
 8010f78:	4ad3      	ldr	r2, [pc, #844]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010f7a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8010f7e:	6113      	str	r3, [r2, #16]
 8010f80:	4bd1      	ldr	r3, [pc, #836]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010f82:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8010f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010f88:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8010f8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8010f90:	4acd      	ldr	r2, [pc, #820]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8010f92:	430b      	orrs	r3, r1
 8010f94:	6713      	str	r3, [r2, #112]	@ 0x70
 8010f96:	e008      	b.n	8010faa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8010f98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010f9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8010fa0:	e003      	b.n	8010faa <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8010fa2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8010fa6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8010faa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010fb2:	f002 0301 	and.w	r3, r2, #1
 8010fb6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8010fba:	2300      	movs	r3, #0
 8010fbc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8010fc0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8010fc4:	460b      	mov	r3, r1
 8010fc6:	4313      	orrs	r3, r2
 8010fc8:	f000 808b 	beq.w	80110e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8010fcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8010fd0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8010fd4:	2b28      	cmp	r3, #40	@ 0x28
 8010fd6:	d86b      	bhi.n	80110b0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8010fd8:	a201      	add	r2, pc, #4	@ (adr r2, 8010fe0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8010fda:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8010fde:	bf00      	nop
 8010fe0:	080110b9 	.word	0x080110b9
 8010fe4:	080110b1 	.word	0x080110b1
 8010fe8:	080110b1 	.word	0x080110b1
 8010fec:	080110b1 	.word	0x080110b1
 8010ff0:	080110b1 	.word	0x080110b1
 8010ff4:	080110b1 	.word	0x080110b1
 8010ff8:	080110b1 	.word	0x080110b1
 8010ffc:	080110b1 	.word	0x080110b1
 8011000:	08011085 	.word	0x08011085
 8011004:	080110b1 	.word	0x080110b1
 8011008:	080110b1 	.word	0x080110b1
 801100c:	080110b1 	.word	0x080110b1
 8011010:	080110b1 	.word	0x080110b1
 8011014:	080110b1 	.word	0x080110b1
 8011018:	080110b1 	.word	0x080110b1
 801101c:	080110b1 	.word	0x080110b1
 8011020:	0801109b 	.word	0x0801109b
 8011024:	080110b1 	.word	0x080110b1
 8011028:	080110b1 	.word	0x080110b1
 801102c:	080110b1 	.word	0x080110b1
 8011030:	080110b1 	.word	0x080110b1
 8011034:	080110b1 	.word	0x080110b1
 8011038:	080110b1 	.word	0x080110b1
 801103c:	080110b1 	.word	0x080110b1
 8011040:	080110b9 	.word	0x080110b9
 8011044:	080110b1 	.word	0x080110b1
 8011048:	080110b1 	.word	0x080110b1
 801104c:	080110b1 	.word	0x080110b1
 8011050:	080110b1 	.word	0x080110b1
 8011054:	080110b1 	.word	0x080110b1
 8011058:	080110b1 	.word	0x080110b1
 801105c:	080110b1 	.word	0x080110b1
 8011060:	080110b9 	.word	0x080110b9
 8011064:	080110b1 	.word	0x080110b1
 8011068:	080110b1 	.word	0x080110b1
 801106c:	080110b1 	.word	0x080110b1
 8011070:	080110b1 	.word	0x080110b1
 8011074:	080110b1 	.word	0x080110b1
 8011078:	080110b1 	.word	0x080110b1
 801107c:	080110b1 	.word	0x080110b1
 8011080:	080110b9 	.word	0x080110b9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8011084:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011088:	3308      	adds	r3, #8
 801108a:	2101      	movs	r1, #1
 801108c:	4618      	mov	r0, r3
 801108e:	f002 f83d 	bl	801310c <RCCEx_PLL2_Config>
 8011092:	4603      	mov	r3, r0
 8011094:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8011098:	e00f      	b.n	80110ba <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801109a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801109e:	3328      	adds	r3, #40	@ 0x28
 80110a0:	2101      	movs	r1, #1
 80110a2:	4618      	mov	r0, r3
 80110a4:	f002 f8e4 	bl	8013270 <RCCEx_PLL3_Config>
 80110a8:	4603      	mov	r3, r0
 80110aa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 80110ae:	e004      	b.n	80110ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80110b0:	2301      	movs	r3, #1
 80110b2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80110b6:	e000      	b.n	80110ba <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 80110b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80110ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80110be:	2b00      	cmp	r3, #0
 80110c0:	d10b      	bne.n	80110da <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 80110c2:	4b81      	ldr	r3, [pc, #516]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80110c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80110c6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 80110ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80110ce:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80110d2:	4a7d      	ldr	r2, [pc, #500]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80110d4:	430b      	orrs	r3, r1
 80110d6:	6553      	str	r3, [r2, #84]	@ 0x54
 80110d8:	e003      	b.n	80110e2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80110da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80110de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80110e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80110e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80110ea:	f002 0302 	and.w	r3, r2, #2
 80110ee:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80110f2:	2300      	movs	r3, #0
 80110f4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80110f8:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80110fc:	460b      	mov	r3, r1
 80110fe:	4313      	orrs	r3, r2
 8011100:	d042      	beq.n	8011188 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8011102:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011106:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011108:	2b05      	cmp	r3, #5
 801110a:	d825      	bhi.n	8011158 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 801110c:	a201      	add	r2, pc, #4	@ (adr r2, 8011114 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 801110e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011112:	bf00      	nop
 8011114:	08011161 	.word	0x08011161
 8011118:	0801112d 	.word	0x0801112d
 801111c:	08011143 	.word	0x08011143
 8011120:	08011161 	.word	0x08011161
 8011124:	08011161 	.word	0x08011161
 8011128:	08011161 	.word	0x08011161
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801112c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011130:	3308      	adds	r3, #8
 8011132:	2101      	movs	r1, #1
 8011134:	4618      	mov	r0, r3
 8011136:	f001 ffe9 	bl	801310c <RCCEx_PLL2_Config>
 801113a:	4603      	mov	r3, r0
 801113c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011140:	e00f      	b.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011142:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011146:	3328      	adds	r3, #40	@ 0x28
 8011148:	2101      	movs	r1, #1
 801114a:	4618      	mov	r0, r3
 801114c:	f002 f890 	bl	8013270 <RCCEx_PLL3_Config>
 8011150:	4603      	mov	r3, r0
 8011152:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8011156:	e004      	b.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011158:	2301      	movs	r3, #1
 801115a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801115e:	e000      	b.n	8011162 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8011160:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011162:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011166:	2b00      	cmp	r3, #0
 8011168:	d10a      	bne.n	8011180 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801116a:	4b57      	ldr	r3, [pc, #348]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801116c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801116e:	f023 0107 	bic.w	r1, r3, #7
 8011172:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011176:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8011178:	4a53      	ldr	r2, [pc, #332]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801117a:	430b      	orrs	r3, r1
 801117c:	6553      	str	r3, [r2, #84]	@ 0x54
 801117e:	e003      	b.n	8011188 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011180:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011184:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8011188:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801118c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011190:	f002 0304 	and.w	r3, r2, #4
 8011194:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8011198:	2300      	movs	r3, #0
 801119a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801119e:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 80111a2:	460b      	mov	r3, r1
 80111a4:	4313      	orrs	r3, r2
 80111a6:	d044      	beq.n	8011232 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 80111a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80111ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80111b0:	2b05      	cmp	r3, #5
 80111b2:	d825      	bhi.n	8011200 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 80111b4:	a201      	add	r2, pc, #4	@ (adr r2, 80111bc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 80111b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80111ba:	bf00      	nop
 80111bc:	08011209 	.word	0x08011209
 80111c0:	080111d5 	.word	0x080111d5
 80111c4:	080111eb 	.word	0x080111eb
 80111c8:	08011209 	.word	0x08011209
 80111cc:	08011209 	.word	0x08011209
 80111d0:	08011209 	.word	0x08011209
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80111d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80111d8:	3308      	adds	r3, #8
 80111da:	2101      	movs	r1, #1
 80111dc:	4618      	mov	r0, r3
 80111de:	f001 ff95 	bl	801310c <RCCEx_PLL2_Config>
 80111e2:	4603      	mov	r3, r0
 80111e4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80111e8:	e00f      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80111ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80111ee:	3328      	adds	r3, #40	@ 0x28
 80111f0:	2101      	movs	r1, #1
 80111f2:	4618      	mov	r0, r3
 80111f4:	f002 f83c 	bl	8013270 <RCCEx_PLL3_Config>
 80111f8:	4603      	mov	r3, r0
 80111fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80111fe:	e004      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011200:	2301      	movs	r3, #1
 8011202:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8011206:	e000      	b.n	801120a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8011208:	bf00      	nop
    }

    if (ret == HAL_OK)
 801120a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801120e:	2b00      	cmp	r3, #0
 8011210:	d10b      	bne.n	801122a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8011212:	4b2d      	ldr	r3, [pc, #180]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8011214:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011216:	f023 0107 	bic.w	r1, r3, #7
 801121a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801121e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8011222:	4a29      	ldr	r2, [pc, #164]	@ (80112c8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8011224:	430b      	orrs	r3, r1
 8011226:	6593      	str	r3, [r2, #88]	@ 0x58
 8011228:	e003      	b.n	8011232 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801122a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801122e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8011232:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011236:	e9d3 2300 	ldrd	r2, r3, [r3]
 801123a:	f002 0320 	and.w	r3, r2, #32
 801123e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8011242:	2300      	movs	r3, #0
 8011244:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8011248:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801124c:	460b      	mov	r3, r1
 801124e:	4313      	orrs	r3, r2
 8011250:	d057      	beq.n	8011302 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8011252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011256:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801125a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801125e:	d035      	beq.n	80112cc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8011260:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011264:	d82c      	bhi.n	80112c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8011266:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801126a:	d031      	beq.n	80112d0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 801126c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8011270:	d826      	bhi.n	80112c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8011272:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8011276:	d02d      	beq.n	80112d4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8011278:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801127c:	d820      	bhi.n	80112c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801127e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011282:	d012      	beq.n	80112aa <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8011284:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011288:	d81a      	bhi.n	80112c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801128a:	2b00      	cmp	r3, #0
 801128c:	d024      	beq.n	80112d8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 801128e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011292:	d115      	bne.n	80112c0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011294:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011298:	3308      	adds	r3, #8
 801129a:	2100      	movs	r1, #0
 801129c:	4618      	mov	r0, r3
 801129e:	f001 ff35 	bl	801310c <RCCEx_PLL2_Config>
 80112a2:	4603      	mov	r3, r0
 80112a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80112a8:	e017      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80112aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80112ae:	3328      	adds	r3, #40	@ 0x28
 80112b0:	2102      	movs	r1, #2
 80112b2:	4618      	mov	r0, r3
 80112b4:	f001 ffdc 	bl	8013270 <RCCEx_PLL3_Config>
 80112b8:	4603      	mov	r3, r0
 80112ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 80112be:	e00c      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80112c0:	2301      	movs	r3, #1
 80112c2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80112c6:	e008      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xcce>
 80112c8:	58024400 	.word	0x58024400
        break;
 80112cc:	bf00      	nop
 80112ce:	e004      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80112d0:	bf00      	nop
 80112d2:	e002      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80112d4:	bf00      	nop
 80112d6:	e000      	b.n	80112da <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80112d8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80112da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80112de:	2b00      	cmp	r3, #0
 80112e0:	d10b      	bne.n	80112fa <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80112e2:	4bc2      	ldr	r3, [pc, #776]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80112e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80112e6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80112ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80112ee:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80112f2:	4abe      	ldr	r2, [pc, #760]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80112f4:	430b      	orrs	r3, r1
 80112f6:	6553      	str	r3, [r2, #84]	@ 0x54
 80112f8:	e003      	b.n	8011302 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80112fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80112fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8011302:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011306:	e9d3 2300 	ldrd	r2, r3, [r3]
 801130a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801130e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8011312:	2300      	movs	r3, #0
 8011314:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 8011318:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801131c:	460b      	mov	r3, r1
 801131e:	4313      	orrs	r3, r2
 8011320:	d055      	beq.n	80113ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8011322:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011326:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801132a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801132e:	d033      	beq.n	8011398 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8011330:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8011334:	d82c      	bhi.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8011336:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801133a:	d02f      	beq.n	801139c <HAL_RCCEx_PeriphCLKConfig+0xd90>
 801133c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8011340:	d826      	bhi.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8011342:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8011346:	d02b      	beq.n	80113a0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8011348:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801134c:	d820      	bhi.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801134e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011352:	d012      	beq.n	801137a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8011354:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8011358:	d81a      	bhi.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801135a:	2b00      	cmp	r3, #0
 801135c:	d022      	beq.n	80113a4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 801135e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8011362:	d115      	bne.n	8011390 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011364:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011368:	3308      	adds	r3, #8
 801136a:	2100      	movs	r1, #0
 801136c:	4618      	mov	r0, r3
 801136e:	f001 fecd 	bl	801310c <RCCEx_PLL2_Config>
 8011372:	4603      	mov	r3, r0
 8011374:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8011378:	e015      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801137a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801137e:	3328      	adds	r3, #40	@ 0x28
 8011380:	2102      	movs	r1, #2
 8011382:	4618      	mov	r0, r3
 8011384:	f001 ff74 	bl	8013270 <RCCEx_PLL3_Config>
 8011388:	4603      	mov	r3, r0
 801138a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801138e:	e00a      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011390:	2301      	movs	r3, #1
 8011392:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8011396:	e006      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8011398:	bf00      	nop
 801139a:	e004      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 801139c:	bf00      	nop
 801139e:	e002      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80113a0:	bf00      	nop
 80113a2:	e000      	b.n	80113a6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 80113a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80113a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80113aa:	2b00      	cmp	r3, #0
 80113ac:	d10b      	bne.n	80113c6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80113ae:	4b8f      	ldr	r3, [pc, #572]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80113b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80113b2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 80113b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80113ba:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80113be:	4a8b      	ldr	r2, [pc, #556]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80113c0:	430b      	orrs	r3, r1
 80113c2:	6593      	str	r3, [r2, #88]	@ 0x58
 80113c4:	e003      	b.n	80113ce <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80113c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80113ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 80113ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80113d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80113d6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80113da:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80113de:	2300      	movs	r3, #0
 80113e0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80113e4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80113e8:	460b      	mov	r3, r1
 80113ea:	4313      	orrs	r3, r2
 80113ec:	d055      	beq.n	801149a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80113ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80113f2:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80113f6:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80113fa:	d033      	beq.n	8011464 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80113fc:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 8011400:	d82c      	bhi.n	801145c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8011402:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8011406:	d02f      	beq.n	8011468 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8011408:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801140c:	d826      	bhi.n	801145c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801140e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011412:	d02b      	beq.n	801146c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8011414:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 8011418:	d820      	bhi.n	801145c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801141a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801141e:	d012      	beq.n	8011446 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8011420:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8011424:	d81a      	bhi.n	801145c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8011426:	2b00      	cmp	r3, #0
 8011428:	d022      	beq.n	8011470 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 801142a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801142e:	d115      	bne.n	801145c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011430:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011434:	3308      	adds	r3, #8
 8011436:	2100      	movs	r1, #0
 8011438:	4618      	mov	r0, r3
 801143a:	f001 fe67 	bl	801310c <RCCEx_PLL2_Config>
 801143e:	4603      	mov	r3, r0
 8011440:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8011444:	e015      	b.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801144a:	3328      	adds	r3, #40	@ 0x28
 801144c:	2102      	movs	r1, #2
 801144e:	4618      	mov	r0, r3
 8011450:	f001 ff0e 	bl	8013270 <RCCEx_PLL3_Config>
 8011454:	4603      	mov	r3, r0
 8011456:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801145a:	e00a      	b.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801145c:	2301      	movs	r3, #1
 801145e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8011462:	e006      	b.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8011464:	bf00      	nop
 8011466:	e004      	b.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8011468:	bf00      	nop
 801146a:	e002      	b.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 801146c:	bf00      	nop
 801146e:	e000      	b.n	8011472 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8011470:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011472:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011476:	2b00      	cmp	r3, #0
 8011478:	d10b      	bne.n	8011492 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801147a:	4b5c      	ldr	r3, [pc, #368]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801147c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801147e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 8011482:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011486:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801148a:	4a58      	ldr	r2, [pc, #352]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801148c:	430b      	orrs	r3, r1
 801148e:	6593      	str	r3, [r2, #88]	@ 0x58
 8011490:	e003      	b.n	801149a <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011492:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011496:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801149a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801149e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80114a2:	f002 0308 	and.w	r3, r2, #8
 80114a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80114aa:	2300      	movs	r3, #0
 80114ac:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80114b0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 80114b4:	460b      	mov	r3, r1
 80114b6:	4313      	orrs	r3, r2
 80114b8:	d01e      	beq.n	80114f8 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 80114ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80114be:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114c2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80114c6:	d10c      	bne.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80114c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80114cc:	3328      	adds	r3, #40	@ 0x28
 80114ce:	2102      	movs	r1, #2
 80114d0:	4618      	mov	r0, r3
 80114d2:	f001 fecd 	bl	8013270 <RCCEx_PLL3_Config>
 80114d6:	4603      	mov	r3, r0
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d002      	beq.n	80114e2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80114dc:	2301      	movs	r3, #1
 80114de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80114e2:	4b42      	ldr	r3, [pc, #264]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80114e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80114e6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80114ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80114ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80114f2:	4a3e      	ldr	r2, [pc, #248]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80114f4:	430b      	orrs	r3, r1
 80114f6:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80114f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80114fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011500:	f002 0310 	and.w	r3, r2, #16
 8011504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8011508:	2300      	movs	r3, #0
 801150a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801150e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 8011512:	460b      	mov	r3, r1
 8011514:	4313      	orrs	r3, r2
 8011516:	d01e      	beq.n	8011556 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 8011518:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801151c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011520:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011524:	d10c      	bne.n	8011540 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011526:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801152a:	3328      	adds	r3, #40	@ 0x28
 801152c:	2102      	movs	r1, #2
 801152e:	4618      	mov	r0, r3
 8011530:	f001 fe9e 	bl	8013270 <RCCEx_PLL3_Config>
 8011534:	4603      	mov	r3, r0
 8011536:	2b00      	cmp	r3, #0
 8011538:	d002      	beq.n	8011540 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 801153a:	2301      	movs	r3, #1
 801153c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8011540:	4b2a      	ldr	r3, [pc, #168]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8011542:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011544:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8011548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801154c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8011550:	4a26      	ldr	r2, [pc, #152]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8011552:	430b      	orrs	r3, r1
 8011554:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8011556:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801155a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801155e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 8011562:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8011566:	2300      	movs	r3, #0
 8011568:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801156c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 8011570:	460b      	mov	r3, r1
 8011572:	4313      	orrs	r3, r2
 8011574:	d040      	beq.n	80115f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8011576:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801157a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801157e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011582:	d022      	beq.n	80115ca <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8011584:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011588:	d81b      	bhi.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801158a:	2b00      	cmp	r3, #0
 801158c:	d003      	beq.n	8011596 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 801158e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8011592:	d00b      	beq.n	80115ac <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8011594:	e015      	b.n	80115c2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8011596:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801159a:	3308      	adds	r3, #8
 801159c:	2100      	movs	r1, #0
 801159e:	4618      	mov	r0, r3
 80115a0:	f001 fdb4 	bl	801310c <RCCEx_PLL2_Config>
 80115a4:	4603      	mov	r3, r0
 80115a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80115aa:	e00f      	b.n	80115cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80115ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80115b0:	3328      	adds	r3, #40	@ 0x28
 80115b2:	2102      	movs	r1, #2
 80115b4:	4618      	mov	r0, r3
 80115b6:	f001 fe5b 	bl	8013270 <RCCEx_PLL3_Config>
 80115ba:	4603      	mov	r3, r0
 80115bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80115c0:	e004      	b.n	80115cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80115c2:	2301      	movs	r3, #1
 80115c4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80115c8:	e000      	b.n	80115cc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 80115ca:	bf00      	nop
    }

    if (ret == HAL_OK)
 80115cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80115d0:	2b00      	cmp	r3, #0
 80115d2:	d10d      	bne.n	80115f0 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80115d4:	4b05      	ldr	r3, [pc, #20]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80115d6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80115d8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80115dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80115e0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80115e4:	4a01      	ldr	r2, [pc, #4]	@ (80115ec <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80115e6:	430b      	orrs	r3, r1
 80115e8:	6593      	str	r3, [r2, #88]	@ 0x58
 80115ea:	e005      	b.n	80115f8 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80115ec:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80115f0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80115f4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80115f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80115fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011600:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 8011604:	67bb      	str	r3, [r7, #120]	@ 0x78
 8011606:	2300      	movs	r3, #0
 8011608:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801160a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801160e:	460b      	mov	r3, r1
 8011610:	4313      	orrs	r3, r2
 8011612:	d03b      	beq.n	801168c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8011614:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011618:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801161c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011620:	d01f      	beq.n	8011662 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8011622:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8011626:	d818      	bhi.n	801165a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 8011628:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801162c:	d003      	beq.n	8011636 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 801162e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8011632:	d007      	beq.n	8011644 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8011634:	e011      	b.n	801165a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011636:	4b64      	ldr	r3, [pc, #400]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8011638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801163a:	4a63      	ldr	r2, [pc, #396]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801163c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011640:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8011642:	e00f      	b.n	8011664 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011644:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011648:	3328      	adds	r3, #40	@ 0x28
 801164a:	2101      	movs	r1, #1
 801164c:	4618      	mov	r0, r3
 801164e:	f001 fe0f 	bl	8013270 <RCCEx_PLL3_Config>
 8011652:	4603      	mov	r3, r0
 8011654:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8011658:	e004      	b.n	8011664 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801165a:	2301      	movs	r3, #1
 801165c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8011660:	e000      	b.n	8011664 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 8011662:	bf00      	nop
    }

    if (ret == HAL_OK)
 8011664:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011668:	2b00      	cmp	r3, #0
 801166a:	d10b      	bne.n	8011684 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801166c:	4b56      	ldr	r3, [pc, #344]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801166e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011670:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8011674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011678:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801167c:	4a52      	ldr	r2, [pc, #328]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801167e:	430b      	orrs	r3, r1
 8011680:	6553      	str	r3, [r2, #84]	@ 0x54
 8011682:	e003      	b.n	801168c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011684:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011688:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801168c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011694:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8011698:	673b      	str	r3, [r7, #112]	@ 0x70
 801169a:	2300      	movs	r3, #0
 801169c:	677b      	str	r3, [r7, #116]	@ 0x74
 801169e:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 80116a2:	460b      	mov	r3, r1
 80116a4:	4313      	orrs	r3, r2
 80116a6:	d031      	beq.n	801170c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80116a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d003      	beq.n	80116ba <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 80116b2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80116b6:	d007      	beq.n	80116c8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 80116b8:	e011      	b.n	80116de <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80116ba:	4b43      	ldr	r3, [pc, #268]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80116bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80116be:	4a42      	ldr	r2, [pc, #264]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80116c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80116c4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80116c6:	e00e      	b.n	80116e6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80116c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116cc:	3308      	adds	r3, #8
 80116ce:	2102      	movs	r1, #2
 80116d0:	4618      	mov	r0, r3
 80116d2:	f001 fd1b 	bl	801310c <RCCEx_PLL2_Config>
 80116d6:	4603      	mov	r3, r0
 80116d8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80116dc:	e003      	b.n	80116e6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80116de:	2301      	movs	r3, #1
 80116e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80116e4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80116e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	d10a      	bne.n	8011704 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80116ee:	4b36      	ldr	r3, [pc, #216]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80116f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80116f2:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80116f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80116fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80116fc:	4a32      	ldr	r2, [pc, #200]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80116fe:	430b      	orrs	r3, r1
 8011700:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011702:	e003      	b.n	801170c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011704:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011708:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801170c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011710:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011714:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 8011718:	66bb      	str	r3, [r7, #104]	@ 0x68
 801171a:	2300      	movs	r3, #0
 801171c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801171e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 8011722:	460b      	mov	r3, r1
 8011724:	4313      	orrs	r3, r2
 8011726:	d00c      	beq.n	8011742 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8011728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801172c:	3328      	adds	r3, #40	@ 0x28
 801172e:	2102      	movs	r1, #2
 8011730:	4618      	mov	r0, r3
 8011732:	f001 fd9d 	bl	8013270 <RCCEx_PLL3_Config>
 8011736:	4603      	mov	r3, r0
 8011738:	2b00      	cmp	r3, #0
 801173a:	d002      	beq.n	8011742 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 801173c:	2301      	movs	r3, #1
 801173e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8011742:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011746:	e9d3 2300 	ldrd	r2, r3, [r3]
 801174a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801174e:	663b      	str	r3, [r7, #96]	@ 0x60
 8011750:	2300      	movs	r3, #0
 8011752:	667b      	str	r3, [r7, #100]	@ 0x64
 8011754:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8011758:	460b      	mov	r3, r1
 801175a:	4313      	orrs	r3, r2
 801175c:	d03a      	beq.n	80117d4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 801175e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011762:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8011766:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801176a:	d018      	beq.n	801179e <HAL_RCCEx_PeriphCLKConfig+0x1192>
 801176c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8011770:	d811      	bhi.n	8011796 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 8011772:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8011776:	d014      	beq.n	80117a2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8011778:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801177c:	d80b      	bhi.n	8011796 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 801177e:	2b00      	cmp	r3, #0
 8011780:	d011      	beq.n	80117a6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 8011782:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011786:	d106      	bne.n	8011796 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8011788:	4b0f      	ldr	r3, [pc, #60]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801178a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801178c:	4a0e      	ldr	r2, [pc, #56]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801178e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8011792:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8011794:	e008      	b.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8011796:	2301      	movs	r3, #1
 8011798:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801179c:	e004      	b.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 801179e:	bf00      	nop
 80117a0:	e002      	b.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80117a2:	bf00      	nop
 80117a4:	e000      	b.n	80117a8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80117a6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80117a8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80117ac:	2b00      	cmp	r3, #0
 80117ae:	d10d      	bne.n	80117cc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80117b0:	4b05      	ldr	r3, [pc, #20]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80117b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80117b4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80117b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80117bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80117c0:	4a01      	ldr	r2, [pc, #4]	@ (80117c8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80117c2:	430b      	orrs	r3, r1
 80117c4:	6553      	str	r3, [r2, #84]	@ 0x54
 80117c6:	e005      	b.n	80117d4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 80117c8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80117cc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80117d0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80117d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80117d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80117dc:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80117e0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80117e2:	2300      	movs	r3, #0
 80117e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80117e6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80117ea:	460b      	mov	r3, r1
 80117ec:	4313      	orrs	r3, r2
 80117ee:	d009      	beq.n	8011804 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80117f0:	4baa      	ldr	r3, [pc, #680]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80117f2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80117f4:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80117f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80117fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80117fe:	4aa7      	ldr	r2, [pc, #668]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011800:	430b      	orrs	r3, r1
 8011802:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8011804:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011808:	e9d3 2300 	ldrd	r2, r3, [r3]
 801180c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 8011810:	653b      	str	r3, [r7, #80]	@ 0x50
 8011812:	2300      	movs	r3, #0
 8011814:	657b      	str	r3, [r7, #84]	@ 0x54
 8011816:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801181a:	460b      	mov	r3, r1
 801181c:	4313      	orrs	r3, r2
 801181e:	d00a      	beq.n	8011836 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8011820:	4b9e      	ldr	r3, [pc, #632]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011822:	691b      	ldr	r3, [r3, #16]
 8011824:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 8011828:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801182c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 8011830:	4a9a      	ldr	r2, [pc, #616]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011832:	430b      	orrs	r3, r1
 8011834:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8011836:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801183a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801183e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 8011842:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011844:	2300      	movs	r3, #0
 8011846:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8011848:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801184c:	460b      	mov	r3, r1
 801184e:	4313      	orrs	r3, r2
 8011850:	d009      	beq.n	8011866 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 8011852:	4b92      	ldr	r3, [pc, #584]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011854:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011856:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801185a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801185e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011860:	4a8e      	ldr	r2, [pc, #568]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011862:	430b      	orrs	r3, r1
 8011864:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8011866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801186a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801186e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 8011872:	643b      	str	r3, [r7, #64]	@ 0x40
 8011874:	2300      	movs	r3, #0
 8011876:	647b      	str	r3, [r7, #68]	@ 0x44
 8011878:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801187c:	460b      	mov	r3, r1
 801187e:	4313      	orrs	r3, r2
 8011880:	d00e      	beq.n	80118a0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8011882:	4b86      	ldr	r3, [pc, #536]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011884:	691b      	ldr	r3, [r3, #16]
 8011886:	4a85      	ldr	r2, [pc, #532]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011888:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801188c:	6113      	str	r3, [r2, #16]
 801188e:	4b83      	ldr	r3, [pc, #524]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8011890:	6919      	ldr	r1, [r3, #16]
 8011892:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011896:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801189a:	4a80      	ldr	r2, [pc, #512]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801189c:	430b      	orrs	r3, r1
 801189e:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80118a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80118a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118a8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 80118ac:	63bb      	str	r3, [r7, #56]	@ 0x38
 80118ae:	2300      	movs	r3, #0
 80118b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118b2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 80118b6:	460b      	mov	r3, r1
 80118b8:	4313      	orrs	r3, r2
 80118ba:	d009      	beq.n	80118d0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 80118bc:	4b77      	ldr	r3, [pc, #476]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80118be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80118c0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 80118c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80118c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80118ca:	4a74      	ldr	r2, [pc, #464]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80118cc:	430b      	orrs	r3, r1
 80118ce:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80118d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80118d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80118d8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80118dc:	633b      	str	r3, [r7, #48]	@ 0x30
 80118de:	2300      	movs	r3, #0
 80118e0:	637b      	str	r3, [r7, #52]	@ 0x34
 80118e2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80118e6:	460b      	mov	r3, r1
 80118e8:	4313      	orrs	r3, r2
 80118ea:	d00a      	beq.n	8011902 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80118ec:	4b6b      	ldr	r3, [pc, #428]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80118ee:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80118f0:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80118f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80118f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80118fc:	4a67      	ldr	r2, [pc, #412]	@ (8011a9c <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80118fe:	430b      	orrs	r3, r1
 8011900:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8011902:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011906:	e9d3 2300 	ldrd	r2, r3, [r3]
 801190a:	2100      	movs	r1, #0
 801190c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801190e:	f003 0301 	and.w	r3, r3, #1
 8011912:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8011914:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 8011918:	460b      	mov	r3, r1
 801191a:	4313      	orrs	r3, r2
 801191c:	d011      	beq.n	8011942 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801191e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011922:	3308      	adds	r3, #8
 8011924:	2100      	movs	r1, #0
 8011926:	4618      	mov	r0, r3
 8011928:	f001 fbf0 	bl	801310c <RCCEx_PLL2_Config>
 801192c:	4603      	mov	r3, r0
 801192e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011932:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011936:	2b00      	cmp	r3, #0
 8011938:	d003      	beq.n	8011942 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801193a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801193e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8011942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011946:	e9d3 2300 	ldrd	r2, r3, [r3]
 801194a:	2100      	movs	r1, #0
 801194c:	6239      	str	r1, [r7, #32]
 801194e:	f003 0302 	and.w	r3, r3, #2
 8011952:	627b      	str	r3, [r7, #36]	@ 0x24
 8011954:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011958:	460b      	mov	r3, r1
 801195a:	4313      	orrs	r3, r2
 801195c:	d011      	beq.n	8011982 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801195e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011962:	3308      	adds	r3, #8
 8011964:	2101      	movs	r1, #1
 8011966:	4618      	mov	r0, r3
 8011968:	f001 fbd0 	bl	801310c <RCCEx_PLL2_Config>
 801196c:	4603      	mov	r3, r0
 801196e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011972:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011976:	2b00      	cmp	r3, #0
 8011978:	d003      	beq.n	8011982 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801197a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801197e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 8011982:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011986:	e9d3 2300 	ldrd	r2, r3, [r3]
 801198a:	2100      	movs	r1, #0
 801198c:	61b9      	str	r1, [r7, #24]
 801198e:	f003 0304 	and.w	r3, r3, #4
 8011992:	61fb      	str	r3, [r7, #28]
 8011994:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011998:	460b      	mov	r3, r1
 801199a:	4313      	orrs	r3, r2
 801199c:	d011      	beq.n	80119c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801199e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119a2:	3308      	adds	r3, #8
 80119a4:	2102      	movs	r1, #2
 80119a6:	4618      	mov	r0, r3
 80119a8:	f001 fbb0 	bl	801310c <RCCEx_PLL2_Config>
 80119ac:	4603      	mov	r3, r0
 80119ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80119b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80119b6:	2b00      	cmp	r3, #0
 80119b8:	d003      	beq.n	80119c2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80119be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 80119c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80119ca:	2100      	movs	r1, #0
 80119cc:	6139      	str	r1, [r7, #16]
 80119ce:	f003 0308 	and.w	r3, r3, #8
 80119d2:	617b      	str	r3, [r7, #20]
 80119d4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80119d8:	460b      	mov	r3, r1
 80119da:	4313      	orrs	r3, r2
 80119dc:	d011      	beq.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80119de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80119e2:	3328      	adds	r3, #40	@ 0x28
 80119e4:	2100      	movs	r1, #0
 80119e6:	4618      	mov	r0, r3
 80119e8:	f001 fc42 	bl	8013270 <RCCEx_PLL3_Config>
 80119ec:	4603      	mov	r3, r0
 80119ee:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80119f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80119f6:	2b00      	cmp	r3, #0
 80119f8:	d003      	beq.n	8011a02 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80119fa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80119fe:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8011a02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011a06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a0a:	2100      	movs	r1, #0
 8011a0c:	60b9      	str	r1, [r7, #8]
 8011a0e:	f003 0310 	and.w	r3, r3, #16
 8011a12:	60fb      	str	r3, [r7, #12]
 8011a14:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011a18:	460b      	mov	r3, r1
 8011a1a:	4313      	orrs	r3, r2
 8011a1c:	d011      	beq.n	8011a42 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8011a1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011a22:	3328      	adds	r3, #40	@ 0x28
 8011a24:	2101      	movs	r1, #1
 8011a26:	4618      	mov	r0, r3
 8011a28:	f001 fc22 	bl	8013270 <RCCEx_PLL3_Config>
 8011a2c:	4603      	mov	r3, r0
 8011a2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011a32:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011a36:	2b00      	cmp	r3, #0
 8011a38:	d003      	beq.n	8011a42 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011a3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8011a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011a4a:	2100      	movs	r1, #0
 8011a4c:	6039      	str	r1, [r7, #0]
 8011a4e:	f003 0320 	and.w	r3, r3, #32
 8011a52:	607b      	str	r3, [r7, #4]
 8011a54:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011a58:	460b      	mov	r3, r1
 8011a5a:	4313      	orrs	r3, r2
 8011a5c:	d011      	beq.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8011a5e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8011a62:	3328      	adds	r3, #40	@ 0x28
 8011a64:	2102      	movs	r1, #2
 8011a66:	4618      	mov	r0, r3
 8011a68:	f001 fc02 	bl	8013270 <RCCEx_PLL3_Config>
 8011a6c:	4603      	mov	r3, r0
 8011a6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8011a72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011a76:	2b00      	cmp	r3, #0
 8011a78:	d003      	beq.n	8011a82 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8011a7a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8011a7e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8011a82:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8011a86:	2b00      	cmp	r3, #0
 8011a88:	d101      	bne.n	8011a8e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8011a8a:	2300      	movs	r3, #0
 8011a8c:	e000      	b.n	8011a90 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8011a8e:	2301      	movs	r3, #1
}
 8011a90:	4618      	mov	r0, r3
 8011a92:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8011a96:	46bd      	mov	sp, r7
 8011a98:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8011a9c:	58024400 	.word	0x58024400

08011aa0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8011aa0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011aa4:	b08d      	sub	sp, #52	@ 0x34
 8011aa6:	af00      	add	r7, sp, #0
 8011aa8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 8011aaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8011aac:	4aad      	ldr	r2, [pc, #692]	@ (8011d64 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>)
 8011aae:	f04f 0300 	mov.w	r3, #0
 8011ab2:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 8011ab6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011abc:	f042 0408 	orr.w	r4, r2, #8
 8011ac0:	461d      	mov	r5, r3
 8011ac2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ac4:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 8011ac8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ace:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 8011ad2:	4699      	mov	r9, r3
 8011ad4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ad6:	e9c3 8900 	strd	r8, r9, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 8011ada:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011adc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011ae0:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
 8011ae4:	6239      	str	r1, [r7, #32]
 8011ae6:	627b      	str	r3, [r7, #36]	@ 0x24
 8011ae8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011aea:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8011aee:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 8011af2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011af4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011af8:	f442 6100 	orr.w	r1, r2, #2048	@ 0x800
 8011afc:	61b9      	str	r1, [r7, #24]
 8011afe:	61fb      	str	r3, [r7, #28]
 8011b00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b02:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8011b06:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 8011b0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b0c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b10:	f042 7100 	orr.w	r1, r2, #33554432	@ 0x2000000
 8011b14:	6139      	str	r1, [r7, #16]
 8011b16:	617b      	str	r3, [r7, #20]
 8011b18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b1a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 8011b1e:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 8011b22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b28:	f042 5180 	orr.w	r1, r2, #268435456	@ 0x10000000
 8011b2c:	60b9      	str	r1, [r7, #8]
 8011b2e:	60fb      	str	r3, [r7, #12]
 8011b30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b32:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 8011b36:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 8011b3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b40:	f042 5100 	orr.w	r1, r2, #536870912	@ 0x20000000
 8011b44:	6039      	str	r1, [r7, #0]
 8011b46:	607b      	str	r3, [r7, #4]
 8011b48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b4a:	e9d7 1200 	ldrd	r1, r2, [r7]
 8011b4e:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* LTDC */
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 8011b52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8011b58:	f042 6a80 	orr.w	sl, r2, #67108864	@ 0x4000000
 8011b5c:	469b      	mov	fp, r3
 8011b5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b60:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
 8011b64:	4b80      	ldr	r3, [pc, #512]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011b66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011b68:	0d1b      	lsrs	r3, r3, #20
 8011b6a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011b6e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b70:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
 8011b72:	4b7d      	ldr	r3, [pc, #500]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011b7a:	1c5a      	adds	r2, r3, #1
 8011b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b7e:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
 8011b80:	4b79      	ldr	r3, [pc, #484]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011b82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b84:	0e1b      	lsrs	r3, r3, #24
 8011b86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b8a:	1c5a      	adds	r2, r3, #1
 8011b8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b8e:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
 8011b90:	4b75      	ldr	r3, [pc, #468]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011b92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011b94:	0a5b      	lsrs	r3, r3, #9
 8011b96:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011b9a:	1c5a      	adds	r2, r3, #1
 8011b9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011b9e:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
 8011ba0:	4b71      	ldr	r3, [pc, #452]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011ba2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8011ba4:	0c1b      	lsrs	r3, r3, #16
 8011ba6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011baa:	1c5a      	adds	r2, r3, #1
 8011bac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bae:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 8011bb0:	4b6d      	ldr	r3, [pc, #436]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011bb2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bb4:	0a9b      	lsrs	r3, r3, #10
 8011bb6:	f003 0203 	and.w	r2, r3, #3
 8011bba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bbc:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 8011bbe:	4b6a      	ldr	r3, [pc, #424]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011bc0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011bc2:	0a5b      	lsrs	r3, r3, #9
 8011bc4:	f003 0201 	and.w	r2, r3, #1
 8011bc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bca:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
 8011bcc:	4b66      	ldr	r3, [pc, #408]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011bce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011bd0:	0b1b      	lsrs	r3, r3, #12
 8011bd2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8011bd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bd8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
 8011bda:	4b63      	ldr	r3, [pc, #396]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011bdc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bde:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8011be2:	1c5a      	adds	r2, r3, #1
 8011be4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011be6:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
 8011be8:	4b5f      	ldr	r3, [pc, #380]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011bea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bec:	0e1b      	lsrs	r3, r3, #24
 8011bee:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011bf2:	1c5a      	adds	r2, r3, #1
 8011bf4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011bf6:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
 8011bf8:	4b5b      	ldr	r3, [pc, #364]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011bfa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011bfc:	0a5b      	lsrs	r3, r3, #9
 8011bfe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c02:	1c5a      	adds	r2, r3, #1
 8011c04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c06:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
 8011c08:	4b57      	ldr	r3, [pc, #348]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c0a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8011c0c:	0c1b      	lsrs	r3, r3, #16
 8011c0e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8011c12:	1c5a      	adds	r2, r3, #1
 8011c14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c16:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 8011c18:	4b53      	ldr	r3, [pc, #332]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c1c:	099b      	lsrs	r3, r3, #6
 8011c1e:	f003 0203 	and.w	r2, r3, #3
 8011c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c24:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 8011c26:	4b50      	ldr	r3, [pc, #320]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011c2a:	095b      	lsrs	r3, r3, #5
 8011c2c:	f003 0201 	and.w	r2, r3, #1
 8011c30:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c32:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 8011c34:	4b4c      	ldr	r3, [pc, #304]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c38:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8011c3c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c3e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 8011c42:	4b49      	ldr	r3, [pc, #292]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c46:	f003 0207 	and.w	r2, r3, #7
 8011c4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c4c:	67da      	str	r2, [r3, #124]	@ 0x7c
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 8011c4e:	4b46      	ldr	r3, [pc, #280]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c50:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c52:	f003 0207 	and.w	r2, r3, #7
 8011c56:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c58:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 8011c5c:	4b42      	ldr	r3, [pc, #264]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c5e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c60:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 8011c64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c66:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 8011c6a:	4b3f      	ldr	r3, [pc, #252]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c6c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011c6e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8011c72:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c74:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 8011c78:	4b3b      	ldr	r3, [pc, #236]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c7a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c7c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8011c80:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c82:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 8011c86:	4b38      	ldr	r3, [pc, #224]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c88:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011c8a:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
 8011c8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c90:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 8011c94:	4b34      	ldr	r3, [pc, #208]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011c96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011c98:	f003 0207 	and.w	r2, r3, #7
 8011c9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011c9e:	65da      	str	r2, [r3, #92]	@ 0x5c
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 8011ca0:	4b31      	ldr	r3, [pc, #196]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011ca2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011ca4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 8011ca8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011caa:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 8011cac:	4b2e      	ldr	r3, [pc, #184]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011cae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011cb0:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
 8011cb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cb6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 8011cba:	4b2b      	ldr	r3, [pc, #172]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011cbc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011cbe:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 8011cc2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cc4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 8011cc8:	4b27      	ldr	r3, [pc, #156]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011cca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8011ccc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8011cd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cd2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 8011cd6:	4b24      	ldr	r3, [pc, #144]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011cd8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cda:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8011cde:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011ce0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 8011ce4:	4b20      	ldr	r3, [pc, #128]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011ce6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ce8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8011cec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cee:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 8011cf0:	4b1d      	ldr	r3, [pc, #116]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011cf2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011cf4:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 8011cf8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011cfa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 8011cfe:	4b1a      	ldr	r3, [pc, #104]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d00:	691b      	ldr	r3, [r3, #16]
 8011d02:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 8011d06:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d08:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 8011d0c:	4b16      	ldr	r3, [pc, #88]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d0e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d10:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8011d14:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d16:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 8011d1a:	4b13      	ldr	r3, [pc, #76]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d1e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 8011d22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d24:	679a      	str	r2, [r3, #120]	@ 0x78
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 8011d26:	4b10      	ldr	r3, [pc, #64]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d28:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d2a:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 8011d2e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d30:	671a      	str	r2, [r3, #112]	@ 0x70
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 8011d32:	4b0d      	ldr	r3, [pc, #52]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d34:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d36:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 8011d3a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d3c:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 8011d3e:	4b0a      	ldr	r3, [pc, #40]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d40:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d42:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 8011d46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d48:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 8011d4a:	4b07      	ldr	r3, [pc, #28]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d4e:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
 8011d52:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d54:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 8011d56:	4b04      	ldr	r3, [pc, #16]	@ (8011d68 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 8011d58:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8011d5a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8011d5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d60:	e004      	b.n	8011d6c <HAL_RCCEx_GetPeriphCLKConfig+0x2cc>
 8011d62:	bf00      	nop
 8011d64:	c9fff1f7 	.word	0xc9fff1f7
 8011d68:	58024400 	.word	0x58024400
 8011d6c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 8011d70:	4b1d      	ldr	r3, [pc, #116]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011d72:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011d74:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 8011d78:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d7a:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 8011d7c:	4b1a      	ldr	r3, [pc, #104]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011d7e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8011d80:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8011d84:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 8011d8a:	4b17      	ldr	r3, [pc, #92]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011d8c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d8e:	f003 0203 	and.w	r2, r3, #3
 8011d92:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011d94:	649a      	str	r2, [r3, #72]	@ 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 8011d96:	4b14      	ldr	r3, [pc, #80]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011d98:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011d9a:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 8011d9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011da0:	64da      	str	r2, [r3, #76]	@ 0x4c
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */

#if defined(DSI)
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 8011da2:	4b11      	ldr	r3, [pc, #68]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011da4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011da6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 8011daa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dac:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 8011dae:	4b0e      	ldr	r3, [pc, #56]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011db0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011db2:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 8011db6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011db8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 8011dba:	4b0b      	ldr	r3, [pc, #44]	@ (8011de8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 8011dbc:	691b      	ldr	r3, [r3, #16]
 8011dbe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8011dc2:	2b00      	cmp	r3, #0
 8011dc4:	d104      	bne.n	8011dd0 <HAL_RCCEx_GetPeriphCLKConfig+0x330>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 8011dc6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dc8:	2200      	movs	r2, #0
 8011dca:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 8011dce:	e004      	b.n	8011dda <HAL_RCCEx_GetPeriphCLKConfig+0x33a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 8011dd0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8011dd2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8011dd6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 8011dda:	bf00      	nop
 8011ddc:	3734      	adds	r7, #52	@ 0x34
 8011dde:	46bd      	mov	sp, r7
 8011de0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 8011de4:	4770      	bx	lr
 8011de6:	bf00      	nop
 8011de8:	58024400 	.word	0x58024400

08011dec <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b090      	sub	sp, #64	@ 0x40
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 8011df6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011dfa:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 8011dfe:	430b      	orrs	r3, r1
 8011e00:	f040 8094 	bne.w	8011f2c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 8011e04:	4b9e      	ldr	r3, [pc, #632]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011e06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011e08:	f003 0307 	and.w	r3, r3, #7
 8011e0c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8011e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011e10:	2b04      	cmp	r3, #4
 8011e12:	f200 8087 	bhi.w	8011f24 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 8011e16:	a201      	add	r2, pc, #4	@ (adr r2, 8011e1c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8011e18:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e1c:	08011e31 	.word	0x08011e31
 8011e20:	08011e59 	.word	0x08011e59
 8011e24:	08011e81 	.word	0x08011e81
 8011e28:	08011f1d 	.word	0x08011f1d
 8011e2c:	08011ea9 	.word	0x08011ea9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011e30:	4b93      	ldr	r3, [pc, #588]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011e32:	681b      	ldr	r3, [r3, #0]
 8011e34:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011e38:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011e3c:	d108      	bne.n	8011e50 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011e3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011e42:	4618      	mov	r0, r3
 8011e44:	f001 f810 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011e48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011e4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e4c:	f000 bd45 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e50:	2300      	movs	r3, #0
 8011e52:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e54:	f000 bd41 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011e58:	4b89      	ldr	r3, [pc, #548]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011e60:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011e64:	d108      	bne.n	8011e78 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011e66:	f107 0318 	add.w	r3, r7, #24
 8011e6a:	4618      	mov	r0, r3
 8011e6c:	f000 fd54 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011e70:	69bb      	ldr	r3, [r7, #24]
 8011e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e74:	f000 bd31 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011e78:	2300      	movs	r3, #0
 8011e7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011e7c:	f000 bd2d 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011e80:	4b7f      	ldr	r3, [pc, #508]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011e82:	681b      	ldr	r3, [r3, #0]
 8011e84:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011e88:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011e8c:	d108      	bne.n	8011ea0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011e8e:	f107 030c 	add.w	r3, r7, #12
 8011e92:	4618      	mov	r0, r3
 8011e94:	f000 fe94 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011e98:	68fb      	ldr	r3, [r7, #12]
 8011e9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011e9c:	f000 bd1d 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ea4:	f000 bd19 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011ea8:	4b75      	ldr	r3, [pc, #468]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011eaa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011eac:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8011eb0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8011eb2:	4b73      	ldr	r3, [pc, #460]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011eb4:	681b      	ldr	r3, [r3, #0]
 8011eb6:	f003 0304 	and.w	r3, r3, #4
 8011eba:	2b04      	cmp	r3, #4
 8011ebc:	d10c      	bne.n	8011ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 8011ebe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ec0:	2b00      	cmp	r3, #0
 8011ec2:	d109      	bne.n	8011ed8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8011ec4:	4b6e      	ldr	r3, [pc, #440]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011ec6:	681b      	ldr	r3, [r3, #0]
 8011ec8:	08db      	lsrs	r3, r3, #3
 8011eca:	f003 0303 	and.w	r3, r3, #3
 8011ece:	4a6d      	ldr	r2, [pc, #436]	@ (8012084 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8011ed0:	fa22 f303 	lsr.w	r3, r2, r3
 8011ed4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ed6:	e01f      	b.n	8011f18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8011ed8:	4b69      	ldr	r3, [pc, #420]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011eda:	681b      	ldr	r3, [r3, #0]
 8011edc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011ee0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011ee4:	d106      	bne.n	8011ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 8011ee6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011ee8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8011eec:	d102      	bne.n	8011ef4 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8011eee:	4b66      	ldr	r3, [pc, #408]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8011ef0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011ef2:	e011      	b.n	8011f18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8011ef4:	4b62      	ldr	r3, [pc, #392]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011ef6:	681b      	ldr	r3, [r3, #0]
 8011ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8011efc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8011f00:	d106      	bne.n	8011f10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 8011f02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8011f04:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011f08:	d102      	bne.n	8011f10 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8011f0a:	4b60      	ldr	r3, [pc, #384]	@ (801208c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8011f0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011f0e:	e003      	b.n	8011f18 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8011f10:	2300      	movs	r3, #0
 8011f12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8011f14:	f000 bce1 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8011f18:	f000 bcdf 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8011f1c:	4b5c      	ldr	r3, [pc, #368]	@ (8012090 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8011f1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f20:	f000 bcdb 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8011f24:	2300      	movs	r3, #0
 8011f26:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011f28:	f000 bcd7 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8011f2c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8011f30:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 8011f34:	430b      	orrs	r3, r1
 8011f36:	f040 80ad 	bne.w	8012094 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8011f3a:	4b51      	ldr	r3, [pc, #324]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011f3c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011f3e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 8011f42:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 8011f44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f46:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f4a:	d056      	beq.n	8011ffa <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8011f4c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f4e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8011f52:	f200 8090 	bhi.w	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011f56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f58:	2bc0      	cmp	r3, #192	@ 0xc0
 8011f5a:	f000 8088 	beq.w	801206e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8011f5e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f60:	2bc0      	cmp	r3, #192	@ 0xc0
 8011f62:	f200 8088 	bhi.w	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011f66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f68:	2b80      	cmp	r3, #128	@ 0x80
 8011f6a:	d032      	beq.n	8011fd2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8011f6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f6e:	2b80      	cmp	r3, #128	@ 0x80
 8011f70:	f200 8081 	bhi.w	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 8011f74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f76:	2b00      	cmp	r3, #0
 8011f78:	d003      	beq.n	8011f82 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8011f7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8011f7c:	2b40      	cmp	r3, #64	@ 0x40
 8011f7e:	d014      	beq.n	8011faa <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8011f80:	e079      	b.n	8012076 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8011f82:	4b3f      	ldr	r3, [pc, #252]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011f84:	681b      	ldr	r3, [r3, #0]
 8011f86:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8011f8a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8011f8e:	d108      	bne.n	8011fa2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8011f90:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011f94:	4618      	mov	r0, r3
 8011f96:	f000 ff67 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8011f9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8011f9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011f9e:	f000 bc9c 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fa2:	2300      	movs	r3, #0
 8011fa4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011fa6:	f000 bc98 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8011faa:	4b35      	ldr	r3, [pc, #212]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011fac:	681b      	ldr	r3, [r3, #0]
 8011fae:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8011fb2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011fb6:	d108      	bne.n	8011fca <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8011fb8:	f107 0318 	add.w	r3, r7, #24
 8011fbc:	4618      	mov	r0, r3
 8011fbe:	f000 fcab 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8011fc2:	69bb      	ldr	r3, [r7, #24]
 8011fc4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fc6:	f000 bc88 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011fca:	2300      	movs	r3, #0
 8011fcc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011fce:	f000 bc84 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8011fd2:	4b2b      	ldr	r3, [pc, #172]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011fd4:	681b      	ldr	r3, [r3, #0]
 8011fd6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8011fda:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011fde:	d108      	bne.n	8011ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8011fe0:	f107 030c 	add.w	r3, r7, #12
 8011fe4:	4618      	mov	r0, r3
 8011fe6:	f000 fdeb 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8011fea:	68fb      	ldr	r3, [r7, #12]
 8011fec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8011fee:	f000 bc74 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8011ff6:	f000 bc70 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8011ffa:	4b21      	ldr	r3, [pc, #132]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8011ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011ffe:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012002:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012004:	4b1e      	ldr	r3, [pc, #120]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012006:	681b      	ldr	r3, [r3, #0]
 8012008:	f003 0304 	and.w	r3, r3, #4
 801200c:	2b04      	cmp	r3, #4
 801200e:	d10c      	bne.n	801202a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8012010:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012012:	2b00      	cmp	r3, #0
 8012014:	d109      	bne.n	801202a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012016:	4b1a      	ldr	r3, [pc, #104]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012018:	681b      	ldr	r3, [r3, #0]
 801201a:	08db      	lsrs	r3, r3, #3
 801201c:	f003 0303 	and.w	r3, r3, #3
 8012020:	4a18      	ldr	r2, [pc, #96]	@ (8012084 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 8012022:	fa22 f303 	lsr.w	r3, r2, r3
 8012026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012028:	e01f      	b.n	801206a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801202a:	4b15      	ldr	r3, [pc, #84]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801202c:	681b      	ldr	r3, [r3, #0]
 801202e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012032:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012036:	d106      	bne.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8012038:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801203a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801203e:	d102      	bne.n	8012046 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012040:	4b11      	ldr	r3, [pc, #68]	@ (8012088 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 8012042:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012044:	e011      	b.n	801206a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012046:	4b0e      	ldr	r3, [pc, #56]	@ (8012080 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8012048:	681b      	ldr	r3, [r3, #0]
 801204a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801204e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012052:	d106      	bne.n	8012062 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 8012054:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012056:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801205a:	d102      	bne.n	8012062 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801205c:	4b0b      	ldr	r3, [pc, #44]	@ (801208c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801205e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012060:	e003      	b.n	801206a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012062:	2300      	movs	r3, #0
 8012064:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012066:	f000 bc38 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801206a:	f000 bc36 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801206e:	4b08      	ldr	r3, [pc, #32]	@ (8012090 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8012070:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012072:	f000 bc32 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8012076:	2300      	movs	r3, #0
 8012078:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801207a:	f000 bc2e 	b.w	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801207e:	bf00      	nop
 8012080:	58024400 	.word	0x58024400
 8012084:	03d09000 	.word	0x03d09000
 8012088:	003d0900 	.word	0x003d0900
 801208c:	017d7840 	.word	0x017d7840
 8012090:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 8012094:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012098:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801209c:	430b      	orrs	r3, r1
 801209e:	f040 809c 	bne.w	80121da <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80120a2:	4b9e      	ldr	r3, [pc, #632]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80120a4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80120a6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 80120aa:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80120ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ae:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80120b2:	d054      	beq.n	801215e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80120b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120b6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80120ba:	f200 808b 	bhi.w	80121d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80120be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120c0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80120c4:	f000 8083 	beq.w	80121ce <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80120c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ca:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 80120ce:	f200 8081 	bhi.w	80121d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80120d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120d4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80120d8:	d02f      	beq.n	801213a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80120da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120dc:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80120e0:	d878      	bhi.n	80121d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80120e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120e4:	2b00      	cmp	r3, #0
 80120e6:	d004      	beq.n	80120f2 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80120e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80120ea:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80120ee:	d012      	beq.n	8012116 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80120f0:	e070      	b.n	80121d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80120f2:	4b8a      	ldr	r3, [pc, #552]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80120f4:	681b      	ldr	r3, [r3, #0]
 80120f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80120fa:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80120fe:	d107      	bne.n	8012110 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012100:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8012104:	4618      	mov	r0, r3
 8012106:	f000 feaf 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801210a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801210c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801210e:	e3e4      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012110:	2300      	movs	r3, #0
 8012112:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012114:	e3e1      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012116:	4b81      	ldr	r3, [pc, #516]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012118:	681b      	ldr	r3, [r3, #0]
 801211a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801211e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8012122:	d107      	bne.n	8012134 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8012124:	f107 0318 	add.w	r3, r7, #24
 8012128:	4618      	mov	r0, r3
 801212a:	f000 fbf5 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801212e:	69bb      	ldr	r3, [r7, #24]
 8012130:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012132:	e3d2      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012134:	2300      	movs	r3, #0
 8012136:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012138:	e3cf      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801213a:	4b78      	ldr	r3, [pc, #480]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801213c:	681b      	ldr	r3, [r3, #0]
 801213e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012142:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012146:	d107      	bne.n	8012158 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012148:	f107 030c 	add.w	r3, r7, #12
 801214c:	4618      	mov	r0, r3
 801214e:	f000 fd37 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8012152:	68fb      	ldr	r3, [r7, #12]
 8012154:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012156:	e3c0      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012158:	2300      	movs	r3, #0
 801215a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801215c:	e3bd      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801215e:	4b6f      	ldr	r3, [pc, #444]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012160:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012162:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012166:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012168:	4b6c      	ldr	r3, [pc, #432]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801216a:	681b      	ldr	r3, [r3, #0]
 801216c:	f003 0304 	and.w	r3, r3, #4
 8012170:	2b04      	cmp	r3, #4
 8012172:	d10c      	bne.n	801218e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 8012174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012176:	2b00      	cmp	r3, #0
 8012178:	d109      	bne.n	801218e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801217a:	4b68      	ldr	r3, [pc, #416]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801217c:	681b      	ldr	r3, [r3, #0]
 801217e:	08db      	lsrs	r3, r3, #3
 8012180:	f003 0303 	and.w	r3, r3, #3
 8012184:	4a66      	ldr	r2, [pc, #408]	@ (8012320 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8012186:	fa22 f303 	lsr.w	r3, r2, r3
 801218a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801218c:	e01e      	b.n	80121cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801218e:	4b63      	ldr	r3, [pc, #396]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012190:	681b      	ldr	r3, [r3, #0]
 8012192:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012196:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801219a:	d106      	bne.n	80121aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801219c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801219e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80121a2:	d102      	bne.n	80121aa <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80121a4:	4b5f      	ldr	r3, [pc, #380]	@ (8012324 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80121a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80121a8:	e010      	b.n	80121cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80121aa:	4b5c      	ldr	r3, [pc, #368]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80121ac:	681b      	ldr	r3, [r3, #0]
 80121ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80121b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80121b6:	d106      	bne.n	80121c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80121b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80121ba:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80121be:	d102      	bne.n	80121c6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80121c0:	4b59      	ldr	r3, [pc, #356]	@ (8012328 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80121c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80121c4:	e002      	b.n	80121cc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80121c6:	2300      	movs	r3, #0
 80121c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 80121ca:	e386      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80121cc:	e385      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80121ce:	4b57      	ldr	r3, [pc, #348]	@ (801232c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80121d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121d2:	e382      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80121d4:	2300      	movs	r3, #0
 80121d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80121d8:	e37f      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80121da:	e9d7 2300 	ldrd	r2, r3, [r7]
 80121de:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 80121e2:	430b      	orrs	r3, r1
 80121e4:	f040 80a7 	bne.w	8012336 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80121e8:	4b4c      	ldr	r3, [pc, #304]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80121ea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80121ec:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 80121f0:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 80121f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121f4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80121f8:	d055      	beq.n	80122a6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 80121fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80121fc:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8012200:	f200 8096 	bhi.w	8012330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8012204:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012206:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801220a:	f000 8084 	beq.w	8012316 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801220e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012210:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 8012214:	f200 808c 	bhi.w	8012330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8012218:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801221a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801221e:	d030      	beq.n	8012282 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8012220:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012222:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012226:	f200 8083 	bhi.w	8012330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801222a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801222c:	2b00      	cmp	r3, #0
 801222e:	d004      	beq.n	801223a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8012230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8012232:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8012236:	d012      	beq.n	801225e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8012238:	e07a      	b.n	8012330 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801223a:	4b38      	ldr	r3, [pc, #224]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801223c:	681b      	ldr	r3, [r3, #0]
 801223e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012242:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012246:	d107      	bne.n	8012258 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012248:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801224c:	4618      	mov	r0, r3
 801224e:	f000 fe0b 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8012252:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012254:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012256:	e340      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012258:	2300      	movs	r3, #0
 801225a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801225c:	e33d      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801225e:	4b2f      	ldr	r3, [pc, #188]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012260:	681b      	ldr	r3, [r3, #0]
 8012262:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012266:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801226a:	d107      	bne.n	801227c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801226c:	f107 0318 	add.w	r3, r7, #24
 8012270:	4618      	mov	r0, r3
 8012272:	f000 fb51 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8012276:	69bb      	ldr	r3, [r7, #24]
 8012278:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801227a:	e32e      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801227c:	2300      	movs	r3, #0
 801227e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012280:	e32b      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012282:	4b26      	ldr	r3, [pc, #152]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8012284:	681b      	ldr	r3, [r3, #0]
 8012286:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801228a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801228e:	d107      	bne.n	80122a0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012290:	f107 030c 	add.w	r3, r7, #12
 8012294:	4618      	mov	r0, r3
 8012296:	f000 fc93 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801229a:	68fb      	ldr	r3, [r7, #12]
 801229c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801229e:	e31c      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80122a0:	2300      	movs	r3, #0
 80122a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80122a4:	e319      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80122a6:	4b1d      	ldr	r3, [pc, #116]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80122a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80122aa:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 80122ae:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80122b0:	4b1a      	ldr	r3, [pc, #104]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80122b2:	681b      	ldr	r3, [r3, #0]
 80122b4:	f003 0304 	and.w	r3, r3, #4
 80122b8:	2b04      	cmp	r3, #4
 80122ba:	d10c      	bne.n	80122d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 80122bc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122be:	2b00      	cmp	r3, #0
 80122c0:	d109      	bne.n	80122d6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80122c2:	4b16      	ldr	r3, [pc, #88]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80122c4:	681b      	ldr	r3, [r3, #0]
 80122c6:	08db      	lsrs	r3, r3, #3
 80122c8:	f003 0303 	and.w	r3, r3, #3
 80122cc:	4a14      	ldr	r2, [pc, #80]	@ (8012320 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 80122ce:	fa22 f303 	lsr.w	r3, r2, r3
 80122d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122d4:	e01e      	b.n	8012314 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80122d6:	4b11      	ldr	r3, [pc, #68]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80122d8:	681b      	ldr	r3, [r3, #0]
 80122da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80122de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80122e2:	d106      	bne.n	80122f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 80122e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80122e6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80122ea:	d102      	bne.n	80122f2 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80122ec:	4b0d      	ldr	r3, [pc, #52]	@ (8012324 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80122ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80122f0:	e010      	b.n	8012314 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80122f2:	4b0a      	ldr	r3, [pc, #40]	@ (801231c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80122f4:	681b      	ldr	r3, [r3, #0]
 80122f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80122fa:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80122fe:	d106      	bne.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8012300:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012302:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012306:	d102      	bne.n	801230e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012308:	4b07      	ldr	r3, [pc, #28]	@ (8012328 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801230a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801230c:	e002      	b.n	8012314 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801230e:	2300      	movs	r3, #0
 8012310:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012312:	e2e2      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012314:	e2e1      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012316:	4b05      	ldr	r3, [pc, #20]	@ (801232c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8012318:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801231a:	e2de      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801231c:	58024400 	.word	0x58024400
 8012320:	03d09000 	.word	0x03d09000
 8012324:	003d0900 	.word	0x003d0900
 8012328:	017d7840 	.word	0x017d7840
 801232c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8012330:	2300      	movs	r3, #0
 8012332:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012334:	e2d1      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8012336:	e9d7 2300 	ldrd	r2, r3, [r7]
 801233a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801233e:	430b      	orrs	r3, r1
 8012340:	f040 809c 	bne.w	801247c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8012344:	4b93      	ldr	r3, [pc, #588]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012346:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012348:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801234c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801234e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012350:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8012354:	d054      	beq.n	8012400 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8012356:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012358:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801235c:	f200 808b 	bhi.w	8012476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8012360:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012362:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012366:	f000 8083 	beq.w	8012470 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801236a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801236c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8012370:	f200 8081 	bhi.w	8012476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8012374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012376:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801237a:	d02f      	beq.n	80123dc <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801237c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801237e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8012382:	d878      	bhi.n	8012476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8012384:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012386:	2b00      	cmp	r3, #0
 8012388:	d004      	beq.n	8012394 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801238a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801238c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8012390:	d012      	beq.n	80123b8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8012392:	e070      	b.n	8012476 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012394:	4b7f      	ldr	r3, [pc, #508]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012396:	681b      	ldr	r3, [r3, #0]
 8012398:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801239c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80123a0:	d107      	bne.n	80123b2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80123a2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80123a6:	4618      	mov	r0, r3
 80123a8:	f000 fd5e 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80123ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80123ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80123b0:	e293      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80123b2:	2300      	movs	r3, #0
 80123b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123b6:	e290      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80123b8:	4b76      	ldr	r3, [pc, #472]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80123ba:	681b      	ldr	r3, [r3, #0]
 80123bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80123c0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80123c4:	d107      	bne.n	80123d6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80123c6:	f107 0318 	add.w	r3, r7, #24
 80123ca:	4618      	mov	r0, r3
 80123cc:	f000 faa4 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80123d0:	69bb      	ldr	r3, [r7, #24]
 80123d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80123d4:	e281      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80123d6:	2300      	movs	r3, #0
 80123d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123da:	e27e      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80123dc:	4b6d      	ldr	r3, [pc, #436]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80123de:	681b      	ldr	r3, [r3, #0]
 80123e0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80123e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80123e8:	d107      	bne.n	80123fa <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80123ea:	f107 030c 	add.w	r3, r7, #12
 80123ee:	4618      	mov	r0, r3
 80123f0:	f000 fbe6 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80123f4:	68fb      	ldr	r3, [r7, #12]
 80123f6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80123f8:	e26f      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80123fa:	2300      	movs	r3, #0
 80123fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80123fe:	e26c      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012400:	4b64      	ldr	r3, [pc, #400]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012402:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012404:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8012408:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801240a:	4b62      	ldr	r3, [pc, #392]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	f003 0304 	and.w	r3, r3, #4
 8012412:	2b04      	cmp	r3, #4
 8012414:	d10c      	bne.n	8012430 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8012416:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012418:	2b00      	cmp	r3, #0
 801241a:	d109      	bne.n	8012430 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801241c:	4b5d      	ldr	r3, [pc, #372]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801241e:	681b      	ldr	r3, [r3, #0]
 8012420:	08db      	lsrs	r3, r3, #3
 8012422:	f003 0303 	and.w	r3, r3, #3
 8012426:	4a5c      	ldr	r2, [pc, #368]	@ (8012598 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8012428:	fa22 f303 	lsr.w	r3, r2, r3
 801242c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801242e:	e01e      	b.n	801246e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012430:	4b58      	ldr	r3, [pc, #352]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012432:	681b      	ldr	r3, [r3, #0]
 8012434:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012438:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801243c:	d106      	bne.n	801244c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801243e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012440:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012444:	d102      	bne.n	801244c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8012446:	4b55      	ldr	r3, [pc, #340]	@ (801259c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8012448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801244a:	e010      	b.n	801246e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801244c:	4b51      	ldr	r3, [pc, #324]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012454:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012458:	d106      	bne.n	8012468 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801245a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801245c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012460:	d102      	bne.n	8012468 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012462:	4b4f      	ldr	r3, [pc, #316]	@ (80125a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8012464:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012466:	e002      	b.n	801246e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8012468:	2300      	movs	r3, #0
 801246a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801246c:	e235      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801246e:	e234      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8012470:	4b4c      	ldr	r3, [pc, #304]	@ (80125a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8012472:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012474:	e231      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8012476:	2300      	movs	r3, #0
 8012478:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801247a:	e22e      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801247c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012480:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 8012484:	430b      	orrs	r3, r1
 8012486:	f040 808f 	bne.w	80125a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801248a:	4b42      	ldr	r3, [pc, #264]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801248c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801248e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8012492:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 8012494:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012496:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801249a:	d06b      	beq.n	8012574 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801249c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801249e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80124a2:	d874      	bhi.n	801258e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80124a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124a6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80124aa:	d056      	beq.n	801255a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 80124ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ae:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80124b2:	d86c      	bhi.n	801258e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80124b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124b6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80124ba:	d03b      	beq.n	8012534 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 80124bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124be:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 80124c2:	d864      	bhi.n	801258e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80124c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124ca:	d021      	beq.n	8012510 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 80124cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124ce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80124d2:	d85c      	bhi.n	801258e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 80124d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124d6:	2b00      	cmp	r3, #0
 80124d8:	d004      	beq.n	80124e4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 80124da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80124dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80124e0:	d004      	beq.n	80124ec <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 80124e2:	e054      	b.n	801258e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 80124e4:	f7fe f824 	bl	8010530 <HAL_RCC_GetPCLK1Freq>
 80124e8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80124ea:	e1f6      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80124ec:	4b29      	ldr	r3, [pc, #164]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 80124ee:	681b      	ldr	r3, [r3, #0]
 80124f0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80124f4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80124f8:	d107      	bne.n	801250a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80124fa:	f107 0318 	add.w	r3, r7, #24
 80124fe:	4618      	mov	r0, r3
 8012500:	f000 fa0a 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012504:	69fb      	ldr	r3, [r7, #28]
 8012506:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012508:	e1e7      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801250a:	2300      	movs	r3, #0
 801250c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801250e:	e1e4      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012510:	4b20      	ldr	r3, [pc, #128]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012512:	681b      	ldr	r3, [r3, #0]
 8012514:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801251c:	d107      	bne.n	801252e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801251e:	f107 030c 	add.w	r3, r7, #12
 8012522:	4618      	mov	r0, r3
 8012524:	f000 fb4c 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8012528:	693b      	ldr	r3, [r7, #16]
 801252a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801252c:	e1d5      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801252e:	2300      	movs	r3, #0
 8012530:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012532:	e1d2      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8012534:	4b17      	ldr	r3, [pc, #92]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012536:	681b      	ldr	r3, [r3, #0]
 8012538:	f003 0304 	and.w	r3, r3, #4
 801253c:	2b04      	cmp	r3, #4
 801253e:	d109      	bne.n	8012554 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012540:	4b14      	ldr	r3, [pc, #80]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012542:	681b      	ldr	r3, [r3, #0]
 8012544:	08db      	lsrs	r3, r3, #3
 8012546:	f003 0303 	and.w	r3, r3, #3
 801254a:	4a13      	ldr	r2, [pc, #76]	@ (8012598 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801254c:	fa22 f303 	lsr.w	r3, r2, r3
 8012550:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012552:	e1c2      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012554:	2300      	movs	r3, #0
 8012556:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012558:	e1bf      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801255a:	4b0e      	ldr	r3, [pc, #56]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801255c:	681b      	ldr	r3, [r3, #0]
 801255e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012566:	d102      	bne.n	801256e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8012568:	4b0c      	ldr	r3, [pc, #48]	@ (801259c <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801256a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801256c:	e1b5      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801256e:	2300      	movs	r3, #0
 8012570:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012572:	e1b2      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012574:	4b07      	ldr	r3, [pc, #28]	@ (8012594 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801257c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012580:	d102      	bne.n	8012588 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8012582:	4b07      	ldr	r3, [pc, #28]	@ (80125a0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8012584:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012586:	e1a8      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012588:	2300      	movs	r3, #0
 801258a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801258c:	e1a5      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801258e:	2300      	movs	r3, #0
 8012590:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012592:	e1a2      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012594:	58024400 	.word	0x58024400
 8012598:	03d09000 	.word	0x03d09000
 801259c:	003d0900 	.word	0x003d0900
 80125a0:	017d7840 	.word	0x017d7840
 80125a4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 80125a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80125ac:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 80125b0:	430b      	orrs	r3, r1
 80125b2:	d173      	bne.n	801269c <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 80125b4:	4b9c      	ldr	r3, [pc, #624]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80125b6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125b8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80125bc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80125be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80125c4:	d02f      	beq.n	8012626 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 80125c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125c8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80125cc:	d863      	bhi.n	8012696 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 80125ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d0:	2b00      	cmp	r3, #0
 80125d2:	d004      	beq.n	80125de <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 80125d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80125d6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80125da:	d012      	beq.n	8012602 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 80125dc:	e05b      	b.n	8012696 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80125de:	4b92      	ldr	r3, [pc, #584]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80125e0:	681b      	ldr	r3, [r3, #0]
 80125e2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80125e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80125ea:	d107      	bne.n	80125fc <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80125ec:	f107 0318 	add.w	r3, r7, #24
 80125f0:	4618      	mov	r0, r3
 80125f2:	f000 f991 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80125f6:	69bb      	ldr	r3, [r7, #24]
 80125f8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80125fa:	e16e      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80125fc:	2300      	movs	r3, #0
 80125fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012600:	e16b      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8012602:	4b89      	ldr	r3, [pc, #548]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012604:	681b      	ldr	r3, [r3, #0]
 8012606:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801260a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801260e:	d107      	bne.n	8012620 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8012610:	f107 030c 	add.w	r3, r7, #12
 8012614:	4618      	mov	r0, r3
 8012616:	f000 fad3 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801261a:	697b      	ldr	r3, [r7, #20]
 801261c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801261e:	e15c      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012620:	2300      	movs	r3, #0
 8012622:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012624:	e159      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8012626:	4b80      	ldr	r3, [pc, #512]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012628:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801262a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801262e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8012630:	4b7d      	ldr	r3, [pc, #500]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012632:	681b      	ldr	r3, [r3, #0]
 8012634:	f003 0304 	and.w	r3, r3, #4
 8012638:	2b04      	cmp	r3, #4
 801263a:	d10c      	bne.n	8012656 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801263c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801263e:	2b00      	cmp	r3, #0
 8012640:	d109      	bne.n	8012656 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012642:	4b79      	ldr	r3, [pc, #484]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012644:	681b      	ldr	r3, [r3, #0]
 8012646:	08db      	lsrs	r3, r3, #3
 8012648:	f003 0303 	and.w	r3, r3, #3
 801264c:	4a77      	ldr	r2, [pc, #476]	@ (801282c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801264e:	fa22 f303 	lsr.w	r3, r2, r3
 8012652:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012654:	e01e      	b.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8012656:	4b74      	ldr	r3, [pc, #464]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012658:	681b      	ldr	r3, [r3, #0]
 801265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801265e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8012662:	d106      	bne.n	8012672 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8012664:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012666:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801266a:	d102      	bne.n	8012672 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801266c:	4b70      	ldr	r3, [pc, #448]	@ (8012830 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801266e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012670:	e010      	b.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8012672:	4b6d      	ldr	r3, [pc, #436]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801267a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801267e:	d106      	bne.n	801268e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8012680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012682:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012686:	d102      	bne.n	801268e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8012688:	4b6a      	ldr	r3, [pc, #424]	@ (8012834 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801268a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801268c:	e002      	b.n	8012694 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801268e:	2300      	movs	r3, #0
 8012690:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 8012692:	e122      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012694:	e121      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8012696:	2300      	movs	r3, #0
 8012698:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801269a:	e11e      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801269c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80126a0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 80126a4:	430b      	orrs	r3, r1
 80126a6:	d133      	bne.n	8012710 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 80126a8:	4b5f      	ldr	r3, [pc, #380]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80126aa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80126ac:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80126b0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 80126b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126b4:	2b00      	cmp	r3, #0
 80126b6:	d004      	beq.n	80126c2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 80126b8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80126ba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80126be:	d012      	beq.n	80126e6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 80126c0:	e023      	b.n	801270a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80126c2:	4b59      	ldr	r3, [pc, #356]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80126c4:	681b      	ldr	r3, [r3, #0]
 80126c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80126ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80126ce:	d107      	bne.n	80126e0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 80126d0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80126d4:	4618      	mov	r0, r3
 80126d6:	f000 fbc7 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80126da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80126dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80126de:	e0fc      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80126e0:	2300      	movs	r3, #0
 80126e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80126e4:	e0f9      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80126e6:	4b50      	ldr	r3, [pc, #320]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80126e8:	681b      	ldr	r3, [r3, #0]
 80126ea:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80126ee:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80126f2:	d107      	bne.n	8012704 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80126f4:	f107 0318 	add.w	r3, r7, #24
 80126f8:	4618      	mov	r0, r3
 80126fa:	f000 f90d 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 80126fe:	6a3b      	ldr	r3, [r7, #32]
 8012700:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012702:	e0ea      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012704:	2300      	movs	r3, #0
 8012706:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012708:	e0e7      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801270a:	2300      	movs	r3, #0
 801270c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801270e:	e0e4      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8012710:	e9d7 2300 	ldrd	r2, r3, [r7]
 8012714:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 8012718:	430b      	orrs	r3, r1
 801271a:	f040 808d 	bne.w	8012838 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801271e:	4b42      	ldr	r3, [pc, #264]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012720:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012722:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 8012726:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 8012728:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801272a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801272e:	d06b      	beq.n	8012808 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8012730:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012732:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012736:	d874      	bhi.n	8012822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8012738:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801273a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801273e:	d056      	beq.n	80127ee <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8012740:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012742:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8012746:	d86c      	bhi.n	8012822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8012748:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801274a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801274e:	d03b      	beq.n	80127c8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8012750:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012752:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8012756:	d864      	bhi.n	8012822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8012758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801275a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801275e:	d021      	beq.n	80127a4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8012760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012762:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012766:	d85c      	bhi.n	8012822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8012768:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801276a:	2b00      	cmp	r3, #0
 801276c:	d004      	beq.n	8012778 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801276e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012770:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012774:	d004      	beq.n	8012780 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8012776:	e054      	b.n	8012822 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8012778:	f000 f8b8 	bl	80128ec <HAL_RCCEx_GetD3PCLK1Freq>
 801277c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801277e:	e0ac      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8012780:	4b29      	ldr	r3, [pc, #164]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8012782:	681b      	ldr	r3, [r3, #0]
 8012784:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8012788:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801278c:	d107      	bne.n	801279e <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801278e:	f107 0318 	add.w	r3, r7, #24
 8012792:	4618      	mov	r0, r3
 8012794:	f000 f8c0 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8012798:	69fb      	ldr	r3, [r7, #28]
 801279a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801279c:	e09d      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801279e:	2300      	movs	r3, #0
 80127a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127a2:	e09a      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80127a4:	4b20      	ldr	r3, [pc, #128]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80127a6:	681b      	ldr	r3, [r3, #0]
 80127a8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80127ac:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80127b0:	d107      	bne.n	80127c2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80127b2:	f107 030c 	add.w	r3, r7, #12
 80127b6:	4618      	mov	r0, r3
 80127b8:	f000 fa02 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 80127bc:	693b      	ldr	r3, [r7, #16]
 80127be:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127c0:	e08b      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80127c2:	2300      	movs	r3, #0
 80127c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127c6:	e088      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80127c8:	4b17      	ldr	r3, [pc, #92]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80127ca:	681b      	ldr	r3, [r3, #0]
 80127cc:	f003 0304 	and.w	r3, r3, #4
 80127d0:	2b04      	cmp	r3, #4
 80127d2:	d109      	bne.n	80127e8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80127d4:	4b14      	ldr	r3, [pc, #80]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80127d6:	681b      	ldr	r3, [r3, #0]
 80127d8:	08db      	lsrs	r3, r3, #3
 80127da:	f003 0303 	and.w	r3, r3, #3
 80127de:	4a13      	ldr	r2, [pc, #76]	@ (801282c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 80127e0:	fa22 f303 	lsr.w	r3, r2, r3
 80127e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80127e6:	e078      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80127e8:	2300      	movs	r3, #0
 80127ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80127ec:	e075      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 80127ee:	4b0e      	ldr	r3, [pc, #56]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 80127f0:	681b      	ldr	r3, [r3, #0]
 80127f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80127f6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80127fa:	d102      	bne.n	8012802 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 80127fc:	4b0c      	ldr	r3, [pc, #48]	@ (8012830 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 80127fe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012800:	e06b      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012802:	2300      	movs	r3, #0
 8012804:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012806:	e068      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8012808:	4b07      	ldr	r3, [pc, #28]	@ (8012828 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801280a:	681b      	ldr	r3, [r3, #0]
 801280c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012810:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012814:	d102      	bne.n	801281c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 8012816:	4b07      	ldr	r3, [pc, #28]	@ (8012834 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8012818:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801281a:	e05e      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801281c:	2300      	movs	r3, #0
 801281e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012820:	e05b      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 8012822:	2300      	movs	r3, #0
 8012824:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012826:	e058      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8012828:	58024400 	.word	0x58024400
 801282c:	03d09000 	.word	0x03d09000
 8012830:	003d0900 	.word	0x003d0900
 8012834:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8012838:	e9d7 2300 	ldrd	r2, r3, [r7]
 801283c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 8012840:	430b      	orrs	r3, r1
 8012842:	d148      	bne.n	80128d6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 8012844:	4b27      	ldr	r3, [pc, #156]	@ (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8012846:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012848:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801284c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801284e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012850:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012854:	d02a      	beq.n	80128ac <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8012856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801285c:	d838      	bhi.n	80128d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801285e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012860:	2b00      	cmp	r3, #0
 8012862:	d004      	beq.n	801286e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 8012864:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012866:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801286a:	d00d      	beq.n	8012888 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801286c:	e030      	b.n	80128d0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801286e:	4b1d      	ldr	r3, [pc, #116]	@ (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8012876:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801287a:	d102      	bne.n	8012882 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801287c:	4b1a      	ldr	r3, [pc, #104]	@ (80128e8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801287e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8012880:	e02b      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8012882:	2300      	movs	r3, #0
 8012884:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8012886:	e028      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8012888:	4b16      	ldr	r3, [pc, #88]	@ (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801288a:	681b      	ldr	r3, [r3, #0]
 801288c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8012890:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8012894:	d107      	bne.n	80128a6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8012896:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801289a:	4618      	mov	r0, r3
 801289c:	f000 fae4 	bl	8012e68 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80128a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80128a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80128a4:	e019      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80128a6:	2300      	movs	r3, #0
 80128a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80128aa:	e016      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80128ac:	4b0d      	ldr	r3, [pc, #52]	@ (80128e4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80128ae:	681b      	ldr	r3, [r3, #0]
 80128b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80128b4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80128b8:	d107      	bne.n	80128ca <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80128ba:	f107 0318 	add.w	r3, r7, #24
 80128be:	4618      	mov	r0, r3
 80128c0:	f000 f82a 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80128c4:	69fb      	ldr	r3, [r7, #28]
 80128c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80128c8:	e007      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80128ca:	2300      	movs	r3, #0
 80128cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80128ce:	e004      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80128d0:	2300      	movs	r3, #0
 80128d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80128d4:	e001      	b.n	80128da <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80128d6:	2300      	movs	r3, #0
 80128d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 80128da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80128dc:	4618      	mov	r0, r3
 80128de:	3740      	adds	r7, #64	@ 0x40
 80128e0:	46bd      	mov	sp, r7
 80128e2:	bd80      	pop	{r7, pc}
 80128e4:	58024400 	.word	0x58024400
 80128e8:	017d7840 	.word	0x017d7840

080128ec <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80128ec:	b580      	push	{r7, lr}
 80128ee:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80128f0:	f7fd fdee 	bl	80104d0 <HAL_RCC_GetHCLKFreq>
 80128f4:	4602      	mov	r2, r0
 80128f6:	4b06      	ldr	r3, [pc, #24]	@ (8012910 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 80128f8:	6a1b      	ldr	r3, [r3, #32]
 80128fa:	091b      	lsrs	r3, r3, #4
 80128fc:	f003 0307 	and.w	r3, r3, #7
 8012900:	4904      	ldr	r1, [pc, #16]	@ (8012914 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8012902:	5ccb      	ldrb	r3, [r1, r3]
 8012904:	f003 031f 	and.w	r3, r3, #31
 8012908:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801290c:	4618      	mov	r0, r3
 801290e:	bd80      	pop	{r7, pc}
 8012910:	58024400 	.word	0x58024400
 8012914:	0801e568 	.word	0x0801e568

08012918 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8012918:	b480      	push	{r7}
 801291a:	b089      	sub	sp, #36	@ 0x24
 801291c:	af00      	add	r7, sp, #0
 801291e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012920:	4ba1      	ldr	r3, [pc, #644]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012924:	f003 0303 	and.w	r3, r3, #3
 8012928:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801292a:	4b9f      	ldr	r3, [pc, #636]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801292c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801292e:	0b1b      	lsrs	r3, r3, #12
 8012930:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012934:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8012936:	4b9c      	ldr	r3, [pc, #624]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012938:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801293a:	091b      	lsrs	r3, r3, #4
 801293c:	f003 0301 	and.w	r3, r3, #1
 8012940:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8012942:	4b99      	ldr	r3, [pc, #612]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012944:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012946:	08db      	lsrs	r3, r3, #3
 8012948:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801294c:	693a      	ldr	r2, [r7, #16]
 801294e:	fb02 f303 	mul.w	r3, r2, r3
 8012952:	ee07 3a90 	vmov	s15, r3
 8012956:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801295a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801295e:	697b      	ldr	r3, [r7, #20]
 8012960:	2b00      	cmp	r3, #0
 8012962:	f000 8111 	beq.w	8012b88 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8012966:	69bb      	ldr	r3, [r7, #24]
 8012968:	2b02      	cmp	r3, #2
 801296a:	f000 8083 	beq.w	8012a74 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801296e:	69bb      	ldr	r3, [r7, #24]
 8012970:	2b02      	cmp	r3, #2
 8012972:	f200 80a1 	bhi.w	8012ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8012976:	69bb      	ldr	r3, [r7, #24]
 8012978:	2b00      	cmp	r3, #0
 801297a:	d003      	beq.n	8012984 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801297c:	69bb      	ldr	r3, [r7, #24]
 801297e:	2b01      	cmp	r3, #1
 8012980:	d056      	beq.n	8012a30 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8012982:	e099      	b.n	8012ab8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012984:	4b88      	ldr	r3, [pc, #544]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012986:	681b      	ldr	r3, [r3, #0]
 8012988:	f003 0320 	and.w	r3, r3, #32
 801298c:	2b00      	cmp	r3, #0
 801298e:	d02d      	beq.n	80129ec <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012990:	4b85      	ldr	r3, [pc, #532]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012992:	681b      	ldr	r3, [r3, #0]
 8012994:	08db      	lsrs	r3, r3, #3
 8012996:	f003 0303 	and.w	r3, r3, #3
 801299a:	4a84      	ldr	r2, [pc, #528]	@ (8012bac <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801299c:	fa22 f303 	lsr.w	r3, r2, r3
 80129a0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80129a2:	68bb      	ldr	r3, [r7, #8]
 80129a4:	ee07 3a90 	vmov	s15, r3
 80129a8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	ee07 3a90 	vmov	s15, r3
 80129b2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129ba:	4b7b      	ldr	r3, [pc, #492]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80129bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80129be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80129c2:	ee07 3a90 	vmov	s15, r3
 80129c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80129ca:	ed97 6a03 	vldr	s12, [r7, #12]
 80129ce:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8012bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80129d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80129d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80129da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80129de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80129e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80129e6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80129ea:	e087      	b.n	8012afc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80129ec:	697b      	ldr	r3, [r7, #20]
 80129ee:	ee07 3a90 	vmov	s15, r3
 80129f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80129f6:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8012bb4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 80129fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80129fe:	4b6a      	ldr	r3, [pc, #424]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a00:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a06:	ee07 3a90 	vmov	s15, r3
 8012a0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a0e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a12:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8012bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012a16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012a22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a2a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a2e:	e065      	b.n	8012afc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012a30:	697b      	ldr	r3, [r7, #20]
 8012a32:	ee07 3a90 	vmov	s15, r3
 8012a36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a3a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8012bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012a3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a42:	4b59      	ldr	r3, [pc, #356]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a4a:	ee07 3a90 	vmov	s15, r3
 8012a4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a52:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a56:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8012bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012a5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012a5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012a62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012a66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012a6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012a6e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012a72:	e043      	b.n	8012afc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012a74:	697b      	ldr	r3, [r7, #20]
 8012a76:	ee07 3a90 	vmov	s15, r3
 8012a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012a7e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8012bbc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8012a82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012a86:	4b48      	ldr	r3, [pc, #288]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012a8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012a8e:	ee07 3a90 	vmov	s15, r3
 8012a92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012a96:	ed97 6a03 	vldr	s12, [r7, #12]
 8012a9a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8012bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012a9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012aa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012aa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012aaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012aae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012ab2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012ab6:	e021      	b.n	8012afc <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8012ab8:	697b      	ldr	r3, [r7, #20]
 8012aba:	ee07 3a90 	vmov	s15, r3
 8012abe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ac2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8012bb8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8012ac6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012aca:	4b37      	ldr	r3, [pc, #220]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012acc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ace:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012ad2:	ee07 3a90 	vmov	s15, r3
 8012ad6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012ada:	ed97 6a03 	vldr	s12, [r7, #12]
 8012ade:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8012bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8012ae2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012ae6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012aea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012aee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012af2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012af6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012afa:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8012afc:	4b2a      	ldr	r3, [pc, #168]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012afe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b00:	0a5b      	lsrs	r3, r3, #9
 8012b02:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b06:	ee07 3a90 	vmov	s15, r3
 8012b0a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b0e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012b12:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012b16:	edd7 6a07 	vldr	s13, [r7, #28]
 8012b1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b1e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b22:	ee17 2a90 	vmov	r2, s15
 8012b26:	687b      	ldr	r3, [r7, #4]
 8012b28:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8012b2a:	4b1f      	ldr	r3, [pc, #124]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012b2c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b2e:	0c1b      	lsrs	r3, r3, #16
 8012b30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b34:	ee07 3a90 	vmov	s15, r3
 8012b38:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b3c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012b40:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012b44:	edd7 6a07 	vldr	s13, [r7, #28]
 8012b48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b4c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b50:	ee17 2a90 	vmov	r2, s15
 8012b54:	687b      	ldr	r3, [r7, #4]
 8012b56:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8012b58:	4b13      	ldr	r3, [pc, #76]	@ (8012ba8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8012b5a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012b5c:	0e1b      	lsrs	r3, r3, #24
 8012b5e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012b62:	ee07 3a90 	vmov	s15, r3
 8012b66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012b6a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012b6e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012b72:	edd7 6a07 	vldr	s13, [r7, #28]
 8012b76:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012b7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012b7e:	ee17 2a90 	vmov	r2, s15
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8012b86:	e008      	b.n	8012b9a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8012b88:	687b      	ldr	r3, [r7, #4]
 8012b8a:	2200      	movs	r2, #0
 8012b8c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8012b8e:	687b      	ldr	r3, [r7, #4]
 8012b90:	2200      	movs	r2, #0
 8012b92:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	2200      	movs	r2, #0
 8012b98:	609a      	str	r2, [r3, #8]
}
 8012b9a:	bf00      	nop
 8012b9c:	3724      	adds	r7, #36	@ 0x24
 8012b9e:	46bd      	mov	sp, r7
 8012ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ba4:	4770      	bx	lr
 8012ba6:	bf00      	nop
 8012ba8:	58024400 	.word	0x58024400
 8012bac:	03d09000 	.word	0x03d09000
 8012bb0:	46000000 	.word	0x46000000
 8012bb4:	4c742400 	.word	0x4c742400
 8012bb8:	4a742400 	.word	0x4a742400
 8012bbc:	4bbebc20 	.word	0x4bbebc20

08012bc0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b089      	sub	sp, #36	@ 0x24
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012bc8:	4ba1      	ldr	r3, [pc, #644]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bcc:	f003 0303 	and.w	r3, r3, #3
 8012bd0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8012bd2:	4b9f      	ldr	r3, [pc, #636]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bd4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012bd6:	0d1b      	lsrs	r3, r3, #20
 8012bd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012bdc:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8012bde:	4b9c      	ldr	r3, [pc, #624]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012be0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012be2:	0a1b      	lsrs	r3, r3, #8
 8012be4:	f003 0301 	and.w	r3, r3, #1
 8012be8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8012bea:	4b99      	ldr	r3, [pc, #612]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012bec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012bee:	08db      	lsrs	r3, r3, #3
 8012bf0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012bf4:	693a      	ldr	r2, [r7, #16]
 8012bf6:	fb02 f303 	mul.w	r3, r2, r3
 8012bfa:	ee07 3a90 	vmov	s15, r3
 8012bfe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c02:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8012c06:	697b      	ldr	r3, [r7, #20]
 8012c08:	2b00      	cmp	r3, #0
 8012c0a:	f000 8111 	beq.w	8012e30 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8012c0e:	69bb      	ldr	r3, [r7, #24]
 8012c10:	2b02      	cmp	r3, #2
 8012c12:	f000 8083 	beq.w	8012d1c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8012c16:	69bb      	ldr	r3, [r7, #24]
 8012c18:	2b02      	cmp	r3, #2
 8012c1a:	f200 80a1 	bhi.w	8012d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8012c1e:	69bb      	ldr	r3, [r7, #24]
 8012c20:	2b00      	cmp	r3, #0
 8012c22:	d003      	beq.n	8012c2c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8012c24:	69bb      	ldr	r3, [r7, #24]
 8012c26:	2b01      	cmp	r3, #1
 8012c28:	d056      	beq.n	8012cd8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8012c2a:	e099      	b.n	8012d60 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012c2c:	4b88      	ldr	r3, [pc, #544]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c2e:	681b      	ldr	r3, [r3, #0]
 8012c30:	f003 0320 	and.w	r3, r3, #32
 8012c34:	2b00      	cmp	r3, #0
 8012c36:	d02d      	beq.n	8012c94 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012c38:	4b85      	ldr	r3, [pc, #532]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	08db      	lsrs	r3, r3, #3
 8012c3e:	f003 0303 	and.w	r3, r3, #3
 8012c42:	4a84      	ldr	r2, [pc, #528]	@ (8012e54 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8012c44:	fa22 f303 	lsr.w	r3, r2, r3
 8012c48:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012c4a:	68bb      	ldr	r3, [r7, #8]
 8012c4c:	ee07 3a90 	vmov	s15, r3
 8012c50:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c54:	697b      	ldr	r3, [r7, #20]
 8012c56:	ee07 3a90 	vmov	s15, r3
 8012c5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c5e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012c62:	4b7b      	ldr	r3, [pc, #492]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012c66:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012c6a:	ee07 3a90 	vmov	s15, r3
 8012c6e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012c72:	ed97 6a03 	vldr	s12, [r7, #12]
 8012c76:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8012e58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012c7a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012c7e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012c82:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012c86:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012c8a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012c8e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012c92:	e087      	b.n	8012da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012c94:	697b      	ldr	r3, [r7, #20]
 8012c96:	ee07 3a90 	vmov	s15, r3
 8012c9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012c9e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8012e5c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8012ca2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012ca6:	4b6a      	ldr	r3, [pc, #424]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012ca8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012caa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cae:	ee07 3a90 	vmov	s15, r3
 8012cb2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012cb6:	ed97 6a03 	vldr	s12, [r7, #12]
 8012cba:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8012e58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012cbe:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012cc2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012cc6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012cca:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012cce:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012cd2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012cd6:	e065      	b.n	8012da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012cd8:	697b      	ldr	r3, [r7, #20]
 8012cda:	ee07 3a90 	vmov	s15, r3
 8012cde:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ce2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8012e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012ce6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012cea:	4b59      	ldr	r3, [pc, #356]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012cec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012cee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012cf2:	ee07 3a90 	vmov	s15, r3
 8012cf6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012cfa:	ed97 6a03 	vldr	s12, [r7, #12]
 8012cfe:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8012e58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012d02:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d06:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d0a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012d0e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d16:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012d1a:	e043      	b.n	8012da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012d1c:	697b      	ldr	r3, [r7, #20]
 8012d1e:	ee07 3a90 	vmov	s15, r3
 8012d22:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d26:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8012e64 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8012d2a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d2e:	4b48      	ldr	r3, [pc, #288]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d32:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d36:	ee07 3a90 	vmov	s15, r3
 8012d3a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d3e:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d42:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8012e58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012d46:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d4a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d4e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012d52:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d56:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d5a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012d5e:	e021      	b.n	8012da4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8012d60:	697b      	ldr	r3, [r7, #20]
 8012d62:	ee07 3a90 	vmov	s15, r3
 8012d66:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012d6a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8012e60 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8012d6e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012d72:	4b37      	ldr	r3, [pc, #220]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012d74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012d7a:	ee07 3a90 	vmov	s15, r3
 8012d7e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012d82:	ed97 6a03 	vldr	s12, [r7, #12]
 8012d86:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8012e58 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8012d8a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012d8e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012d92:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012d96:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012d9a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012d9e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012da2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8012da4:	4b2a      	ldr	r3, [pc, #168]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012da6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012da8:	0a5b      	lsrs	r3, r3, #9
 8012daa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012dae:	ee07 3a90 	vmov	s15, r3
 8012db2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012db6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012dba:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012dbe:	edd7 6a07 	vldr	s13, [r7, #28]
 8012dc2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012dc6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012dca:	ee17 2a90 	vmov	r2, s15
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8012dd2:	4b1f      	ldr	r3, [pc, #124]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012dd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012dd6:	0c1b      	lsrs	r3, r3, #16
 8012dd8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012ddc:	ee07 3a90 	vmov	s15, r3
 8012de0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012de4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012de8:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012dec:	edd7 6a07 	vldr	s13, [r7, #28]
 8012df0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012df4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012df8:	ee17 2a90 	vmov	r2, s15
 8012dfc:	687b      	ldr	r3, [r7, #4]
 8012dfe:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8012e00:	4b13      	ldr	r3, [pc, #76]	@ (8012e50 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8012e02:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012e04:	0e1b      	lsrs	r3, r3, #24
 8012e06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8012e0a:	ee07 3a90 	vmov	s15, r3
 8012e0e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012e12:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8012e16:	ee37 7a87 	vadd.f32	s14, s15, s14
 8012e1a:	edd7 6a07 	vldr	s13, [r7, #28]
 8012e1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8012e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8012e26:	ee17 2a90 	vmov	r2, s15
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8012e2e:	e008      	b.n	8012e42 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8012e30:	687b      	ldr	r3, [r7, #4]
 8012e32:	2200      	movs	r2, #0
 8012e34:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8012e36:	687b      	ldr	r3, [r7, #4]
 8012e38:	2200      	movs	r2, #0
 8012e3a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	2200      	movs	r2, #0
 8012e40:	609a      	str	r2, [r3, #8]
}
 8012e42:	bf00      	nop
 8012e44:	3724      	adds	r7, #36	@ 0x24
 8012e46:	46bd      	mov	sp, r7
 8012e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4c:	4770      	bx	lr
 8012e4e:	bf00      	nop
 8012e50:	58024400 	.word	0x58024400
 8012e54:	03d09000 	.word	0x03d09000
 8012e58:	46000000 	.word	0x46000000
 8012e5c:	4c742400 	.word	0x4c742400
 8012e60:	4a742400 	.word	0x4a742400
 8012e64:	4bbebc20 	.word	0x4bbebc20

08012e68 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8012e68:	b480      	push	{r7}
 8012e6a:	b089      	sub	sp, #36	@ 0x24
 8012e6c:	af00      	add	r7, sp, #0
 8012e6e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8012e70:	4ba0      	ldr	r3, [pc, #640]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012e72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e74:	f003 0303 	and.w	r3, r3, #3
 8012e78:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8012e7a:	4b9e      	ldr	r3, [pc, #632]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012e7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8012e7e:	091b      	lsrs	r3, r3, #4
 8012e80:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8012e84:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 8012e86:	4b9b      	ldr	r3, [pc, #620]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012e88:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012e8a:	f003 0301 	and.w	r3, r3, #1
 8012e8e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8012e90:	4b98      	ldr	r3, [pc, #608]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012e92:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8012e94:	08db      	lsrs	r3, r3, #3
 8012e96:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8012e9a:	693a      	ldr	r2, [r7, #16]
 8012e9c:	fb02 f303 	mul.w	r3, r2, r3
 8012ea0:	ee07 3a90 	vmov	s15, r3
 8012ea4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012ea8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 8012eac:	697b      	ldr	r3, [r7, #20]
 8012eae:	2b00      	cmp	r3, #0
 8012eb0:	f000 8111 	beq.w	80130d6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 8012eb4:	69bb      	ldr	r3, [r7, #24]
 8012eb6:	2b02      	cmp	r3, #2
 8012eb8:	f000 8083 	beq.w	8012fc2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 8012ebc:	69bb      	ldr	r3, [r7, #24]
 8012ebe:	2b02      	cmp	r3, #2
 8012ec0:	f200 80a1 	bhi.w	8013006 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 8012ec4:	69bb      	ldr	r3, [r7, #24]
 8012ec6:	2b00      	cmp	r3, #0
 8012ec8:	d003      	beq.n	8012ed2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 8012eca:	69bb      	ldr	r3, [r7, #24]
 8012ecc:	2b01      	cmp	r3, #1
 8012ece:	d056      	beq.n	8012f7e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 8012ed0:	e099      	b.n	8013006 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8012ed2:	4b88      	ldr	r3, [pc, #544]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	f003 0320 	and.w	r3, r3, #32
 8012eda:	2b00      	cmp	r3, #0
 8012edc:	d02d      	beq.n	8012f3a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8012ede:	4b85      	ldr	r3, [pc, #532]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012ee0:	681b      	ldr	r3, [r3, #0]
 8012ee2:	08db      	lsrs	r3, r3, #3
 8012ee4:	f003 0303 	and.w	r3, r3, #3
 8012ee8:	4a83      	ldr	r2, [pc, #524]	@ (80130f8 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 8012eea:	fa22 f303 	lsr.w	r3, r2, r3
 8012eee:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012ef0:	68bb      	ldr	r3, [r7, #8]
 8012ef2:	ee07 3a90 	vmov	s15, r3
 8012ef6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012efa:	697b      	ldr	r3, [r7, #20]
 8012efc:	ee07 3a90 	vmov	s15, r3
 8012f00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f04:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012f08:	4b7a      	ldr	r3, [pc, #488]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012f0a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f10:	ee07 3a90 	vmov	s15, r3
 8012f14:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012f18:	ed97 6a03 	vldr	s12, [r7, #12]
 8012f1c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 80130fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012f20:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012f24:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012f28:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012f2c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f34:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8012f38:	e087      	b.n	801304a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012f3a:	697b      	ldr	r3, [r7, #20]
 8012f3c:	ee07 3a90 	vmov	s15, r3
 8012f40:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f44:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 8013100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8012f48:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012f4c:	4b69      	ldr	r3, [pc, #420]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f54:	ee07 3a90 	vmov	s15, r3
 8012f58:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012f5c:	ed97 6a03 	vldr	s12, [r7, #12]
 8012f60:	eddf 5a66 	vldr	s11, [pc, #408]	@ 80130fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012f64:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012f68:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012f6c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012f70:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012f78:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012f7c:	e065      	b.n	801304a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012f7e:	697b      	ldr	r3, [r7, #20]
 8012f80:	ee07 3a90 	vmov	s15, r3
 8012f84:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012f88:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 8013104 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8012f8c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012f90:	4b58      	ldr	r3, [pc, #352]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012f92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012f94:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012f98:	ee07 3a90 	vmov	s15, r3
 8012f9c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012fa0:	ed97 6a03 	vldr	s12, [r7, #12]
 8012fa4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 80130fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012fa8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012fac:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012fb0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012fb4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8012fbc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8012fc0:	e043      	b.n	801304a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8012fc2:	697b      	ldr	r3, [r7, #20]
 8012fc4:	ee07 3a90 	vmov	s15, r3
 8012fc8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8012fcc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 8013108 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 8012fd0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8012fd4:	4b47      	ldr	r3, [pc, #284]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8012fd6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8012fd8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8012fdc:	ee07 3a90 	vmov	s15, r3
 8012fe0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8012fe4:	ed97 6a03 	vldr	s12, [r7, #12]
 8012fe8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 80130fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8012fec:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8012ff0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8012ff4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8012ff8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8012ffc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013000:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013004:	e021      	b.n	801304a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8013006:	697b      	ldr	r3, [r7, #20]
 8013008:	ee07 3a90 	vmov	s15, r3
 801300c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8013010:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 8013100 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8013014:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8013018:	4b36      	ldr	r3, [pc, #216]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801301a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801301c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8013020:	ee07 3a90 	vmov	s15, r3
 8013024:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8013028:	ed97 6a03 	vldr	s12, [r7, #12]
 801302c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 80130fc <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8013030:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8013034:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8013038:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801303c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8013040:	ee67 7a27 	vmul.f32	s15, s14, s15
 8013044:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8013048:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801304a:	4b2a      	ldr	r3, [pc, #168]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801304c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801304e:	0a5b      	lsrs	r3, r3, #9
 8013050:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013054:	ee07 3a90 	vmov	s15, r3
 8013058:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801305c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8013060:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013064:	edd7 6a07 	vldr	s13, [r7, #28]
 8013068:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801306c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8013070:	ee17 2a90 	vmov	r2, s15
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8013078:	4b1e      	ldr	r3, [pc, #120]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801307a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801307c:	0c1b      	lsrs	r3, r3, #16
 801307e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8013082:	ee07 3a90 	vmov	s15, r3
 8013086:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801308a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801308e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8013092:	edd7 6a07 	vldr	s13, [r7, #28]
 8013096:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801309a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801309e:	ee17 2a90 	vmov	r2, s15
 80130a2:	687b      	ldr	r3, [r7, #4]
 80130a4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80130a6:	4b13      	ldr	r3, [pc, #76]	@ (80130f4 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80130a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130aa:	0e1b      	lsrs	r3, r3, #24
 80130ac:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80130b0:	ee07 3a90 	vmov	s15, r3
 80130b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80130b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80130bc:	ee37 7a87 	vadd.f32	s14, s15, s14
 80130c0:	edd7 6a07 	vldr	s13, [r7, #28]
 80130c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80130c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80130cc:	ee17 2a90 	vmov	r2, s15
 80130d0:	687b      	ldr	r3, [r7, #4]
 80130d2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80130d4:	e008      	b.n	80130e8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80130d6:	687b      	ldr	r3, [r7, #4]
 80130d8:	2200      	movs	r2, #0
 80130da:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80130dc:	687b      	ldr	r3, [r7, #4]
 80130de:	2200      	movs	r2, #0
 80130e0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	2200      	movs	r2, #0
 80130e6:	609a      	str	r2, [r3, #8]
}
 80130e8:	bf00      	nop
 80130ea:	3724      	adds	r7, #36	@ 0x24
 80130ec:	46bd      	mov	sp, r7
 80130ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80130f2:	4770      	bx	lr
 80130f4:	58024400 	.word	0x58024400
 80130f8:	03d09000 	.word	0x03d09000
 80130fc:	46000000 	.word	0x46000000
 8013100:	4c742400 	.word	0x4c742400
 8013104:	4a742400 	.word	0x4a742400
 8013108:	4bbebc20 	.word	0x4bbebc20

0801310c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801310c:	b580      	push	{r7, lr}
 801310e:	b084      	sub	sp, #16
 8013110:	af00      	add	r7, sp, #0
 8013112:	6078      	str	r0, [r7, #4]
 8013114:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8013116:	2300      	movs	r3, #0
 8013118:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801311a:	4b53      	ldr	r3, [pc, #332]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 801311c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801311e:	f003 0303 	and.w	r3, r3, #3
 8013122:	2b03      	cmp	r3, #3
 8013124:	d101      	bne.n	801312a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8013126:	2301      	movs	r3, #1
 8013128:	e099      	b.n	801325e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801312a:	4b4f      	ldr	r3, [pc, #316]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 801312c:	681b      	ldr	r3, [r3, #0]
 801312e:	4a4e      	ldr	r2, [pc, #312]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013130:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8013134:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013136:	f7f5 ffb7 	bl	80090a8 <HAL_GetTick>
 801313a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801313c:	e008      	b.n	8013150 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801313e:	f7f5 ffb3 	bl	80090a8 <HAL_GetTick>
 8013142:	4602      	mov	r2, r0
 8013144:	68bb      	ldr	r3, [r7, #8]
 8013146:	1ad3      	subs	r3, r2, r3
 8013148:	2b02      	cmp	r3, #2
 801314a:	d901      	bls.n	8013150 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801314c:	2303      	movs	r3, #3
 801314e:	e086      	b.n	801325e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8013150:	4b45      	ldr	r3, [pc, #276]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013152:	681b      	ldr	r3, [r3, #0]
 8013154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013158:	2b00      	cmp	r3, #0
 801315a:	d1f0      	bne.n	801313e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801315c:	4b42      	ldr	r3, [pc, #264]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 801315e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013160:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	681b      	ldr	r3, [r3, #0]
 8013168:	031b      	lsls	r3, r3, #12
 801316a:	493f      	ldr	r1, [pc, #252]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 801316c:	4313      	orrs	r3, r2
 801316e:	628b      	str	r3, [r1, #40]	@ 0x28
 8013170:	687b      	ldr	r3, [r7, #4]
 8013172:	685b      	ldr	r3, [r3, #4]
 8013174:	3b01      	subs	r3, #1
 8013176:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801317a:	687b      	ldr	r3, [r7, #4]
 801317c:	689b      	ldr	r3, [r3, #8]
 801317e:	3b01      	subs	r3, #1
 8013180:	025b      	lsls	r3, r3, #9
 8013182:	b29b      	uxth	r3, r3
 8013184:	431a      	orrs	r2, r3
 8013186:	687b      	ldr	r3, [r7, #4]
 8013188:	68db      	ldr	r3, [r3, #12]
 801318a:	3b01      	subs	r3, #1
 801318c:	041b      	lsls	r3, r3, #16
 801318e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8013192:	431a      	orrs	r2, r3
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	691b      	ldr	r3, [r3, #16]
 8013198:	3b01      	subs	r3, #1
 801319a:	061b      	lsls	r3, r3, #24
 801319c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80131a0:	4931      	ldr	r1, [pc, #196]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131a2:	4313      	orrs	r3, r2
 80131a4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80131a6:	4b30      	ldr	r3, [pc, #192]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131aa:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 80131ae:	687b      	ldr	r3, [r7, #4]
 80131b0:	695b      	ldr	r3, [r3, #20]
 80131b2:	492d      	ldr	r1, [pc, #180]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131b4:	4313      	orrs	r3, r2
 80131b6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80131b8:	4b2b      	ldr	r3, [pc, #172]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131bc:	f023 0220 	bic.w	r2, r3, #32
 80131c0:	687b      	ldr	r3, [r7, #4]
 80131c2:	699b      	ldr	r3, [r3, #24]
 80131c4:	4928      	ldr	r1, [pc, #160]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131c6:	4313      	orrs	r3, r2
 80131c8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80131ca:	4b27      	ldr	r3, [pc, #156]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ce:	4a26      	ldr	r2, [pc, #152]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131d0:	f023 0310 	bic.w	r3, r3, #16
 80131d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80131d6:	4b24      	ldr	r3, [pc, #144]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131d8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80131da:	4b24      	ldr	r3, [pc, #144]	@ (801326c <RCCEx_PLL2_Config+0x160>)
 80131dc:	4013      	ands	r3, r2
 80131de:	687a      	ldr	r2, [r7, #4]
 80131e0:	69d2      	ldr	r2, [r2, #28]
 80131e2:	00d2      	lsls	r2, r2, #3
 80131e4:	4920      	ldr	r1, [pc, #128]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131e6:	4313      	orrs	r3, r2
 80131e8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80131ea:	4b1f      	ldr	r3, [pc, #124]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ee:	4a1e      	ldr	r2, [pc, #120]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131f0:	f043 0310 	orr.w	r3, r3, #16
 80131f4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80131f6:	683b      	ldr	r3, [r7, #0]
 80131f8:	2b00      	cmp	r3, #0
 80131fa:	d106      	bne.n	801320a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80131fc:	4b1a      	ldr	r3, [pc, #104]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 80131fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013200:	4a19      	ldr	r2, [pc, #100]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013202:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8013206:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013208:	e00f      	b.n	801322a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	2b01      	cmp	r3, #1
 801320e:	d106      	bne.n	801321e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8013210:	4b15      	ldr	r3, [pc, #84]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013212:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013214:	4a14      	ldr	r2, [pc, #80]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013216:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801321a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801321c:	e005      	b.n	801322a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801321e:	4b12      	ldr	r3, [pc, #72]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013220:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013222:	4a11      	ldr	r2, [pc, #68]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013224:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8013228:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801322a:	4b0f      	ldr	r3, [pc, #60]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 801322c:	681b      	ldr	r3, [r3, #0]
 801322e:	4a0e      	ldr	r2, [pc, #56]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013230:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8013234:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8013236:	f7f5 ff37 	bl	80090a8 <HAL_GetTick>
 801323a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801323c:	e008      	b.n	8013250 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801323e:	f7f5 ff33 	bl	80090a8 <HAL_GetTick>
 8013242:	4602      	mov	r2, r0
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	1ad3      	subs	r3, r2, r3
 8013248:	2b02      	cmp	r3, #2
 801324a:	d901      	bls.n	8013250 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801324c:	2303      	movs	r3, #3
 801324e:	e006      	b.n	801325e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8013250:	4b05      	ldr	r3, [pc, #20]	@ (8013268 <RCCEx_PLL2_Config+0x15c>)
 8013252:	681b      	ldr	r3, [r3, #0]
 8013254:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8013258:	2b00      	cmp	r3, #0
 801325a:	d0f0      	beq.n	801323e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801325c:	7bfb      	ldrb	r3, [r7, #15]
}
 801325e:	4618      	mov	r0, r3
 8013260:	3710      	adds	r7, #16
 8013262:	46bd      	mov	sp, r7
 8013264:	bd80      	pop	{r7, pc}
 8013266:	bf00      	nop
 8013268:	58024400 	.word	0x58024400
 801326c:	ffff0007 	.word	0xffff0007

08013270 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8013270:	b580      	push	{r7, lr}
 8013272:	b084      	sub	sp, #16
 8013274:	af00      	add	r7, sp, #0
 8013276:	6078      	str	r0, [r7, #4]
 8013278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801327a:	2300      	movs	r3, #0
 801327c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801327e:	4b53      	ldr	r3, [pc, #332]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013280:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013282:	f003 0303 	and.w	r3, r3, #3
 8013286:	2b03      	cmp	r3, #3
 8013288:	d101      	bne.n	801328e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801328a:	2301      	movs	r3, #1
 801328c:	e099      	b.n	80133c2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801328e:	4b4f      	ldr	r3, [pc, #316]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a4e      	ldr	r2, [pc, #312]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013294:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8013298:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801329a:	f7f5 ff05 	bl	80090a8 <HAL_GetTick>
 801329e:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80132a0:	e008      	b.n	80132b4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80132a2:	f7f5 ff01 	bl	80090a8 <HAL_GetTick>
 80132a6:	4602      	mov	r2, r0
 80132a8:	68bb      	ldr	r3, [r7, #8]
 80132aa:	1ad3      	subs	r3, r2, r3
 80132ac:	2b02      	cmp	r3, #2
 80132ae:	d901      	bls.n	80132b4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 80132b0:	2303      	movs	r3, #3
 80132b2:	e086      	b.n	80133c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 80132b4:	4b45      	ldr	r3, [pc, #276]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 80132b6:	681b      	ldr	r3, [r3, #0]
 80132b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80132bc:	2b00      	cmp	r3, #0
 80132be:	d1f0      	bne.n	80132a2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 80132c0:	4b42      	ldr	r3, [pc, #264]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 80132c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80132c8:	687b      	ldr	r3, [r7, #4]
 80132ca:	681b      	ldr	r3, [r3, #0]
 80132cc:	051b      	lsls	r3, r3, #20
 80132ce:	493f      	ldr	r1, [pc, #252]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 80132d0:	4313      	orrs	r3, r2
 80132d2:	628b      	str	r3, [r1, #40]	@ 0x28
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	685b      	ldr	r3, [r3, #4]
 80132d8:	3b01      	subs	r3, #1
 80132da:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	689b      	ldr	r3, [r3, #8]
 80132e2:	3b01      	subs	r3, #1
 80132e4:	025b      	lsls	r3, r3, #9
 80132e6:	b29b      	uxth	r3, r3
 80132e8:	431a      	orrs	r2, r3
 80132ea:	687b      	ldr	r3, [r7, #4]
 80132ec:	68db      	ldr	r3, [r3, #12]
 80132ee:	3b01      	subs	r3, #1
 80132f0:	041b      	lsls	r3, r3, #16
 80132f2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80132f6:	431a      	orrs	r2, r3
 80132f8:	687b      	ldr	r3, [r7, #4]
 80132fa:	691b      	ldr	r3, [r3, #16]
 80132fc:	3b01      	subs	r3, #1
 80132fe:	061b      	lsls	r3, r3, #24
 8013300:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8013304:	4931      	ldr	r1, [pc, #196]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013306:	4313      	orrs	r3, r2
 8013308:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801330a:	4b30      	ldr	r3, [pc, #192]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 801330c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801330e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	695b      	ldr	r3, [r3, #20]
 8013316:	492d      	ldr	r1, [pc, #180]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013318:	4313      	orrs	r3, r2
 801331a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801331c:	4b2b      	ldr	r3, [pc, #172]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 801331e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013320:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	699b      	ldr	r3, [r3, #24]
 8013328:	4928      	ldr	r1, [pc, #160]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 801332a:	4313      	orrs	r3, r2
 801332c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801332e:	4b27      	ldr	r3, [pc, #156]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013330:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013332:	4a26      	ldr	r2, [pc, #152]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013338:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801333a:	4b24      	ldr	r3, [pc, #144]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 801333c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801333e:	4b24      	ldr	r3, [pc, #144]	@ (80133d0 <RCCEx_PLL3_Config+0x160>)
 8013340:	4013      	ands	r3, r2
 8013342:	687a      	ldr	r2, [r7, #4]
 8013344:	69d2      	ldr	r2, [r2, #28]
 8013346:	00d2      	lsls	r2, r2, #3
 8013348:	4920      	ldr	r1, [pc, #128]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 801334a:	4313      	orrs	r3, r2
 801334c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801334e:	4b1f      	ldr	r3, [pc, #124]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013350:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013352:	4a1e      	ldr	r2, [pc, #120]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013354:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013358:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801335a:	683b      	ldr	r3, [r7, #0]
 801335c:	2b00      	cmp	r3, #0
 801335e:	d106      	bne.n	801336e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8013360:	4b1a      	ldr	r3, [pc, #104]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013362:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013364:	4a19      	ldr	r2, [pc, #100]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013366:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801336a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801336c:	e00f      	b.n	801338e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801336e:	683b      	ldr	r3, [r7, #0]
 8013370:	2b01      	cmp	r3, #1
 8013372:	d106      	bne.n	8013382 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8013374:	4b15      	ldr	r3, [pc, #84]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013376:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013378:	4a14      	ldr	r2, [pc, #80]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 801337a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801337e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8013380:	e005      	b.n	801338e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8013382:	4b12      	ldr	r3, [pc, #72]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013386:	4a11      	ldr	r2, [pc, #68]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013388:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801338c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801338e:	4b0f      	ldr	r3, [pc, #60]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013390:	681b      	ldr	r3, [r3, #0]
 8013392:	4a0e      	ldr	r2, [pc, #56]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 8013394:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8013398:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801339a:	f7f5 fe85 	bl	80090a8 <HAL_GetTick>
 801339e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80133a0:	e008      	b.n	80133b4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 80133a2:	f7f5 fe81 	bl	80090a8 <HAL_GetTick>
 80133a6:	4602      	mov	r2, r0
 80133a8:	68bb      	ldr	r3, [r7, #8]
 80133aa:	1ad3      	subs	r3, r2, r3
 80133ac:	2b02      	cmp	r3, #2
 80133ae:	d901      	bls.n	80133b4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 80133b0:	2303      	movs	r3, #3
 80133b2:	e006      	b.n	80133c2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 80133b4:	4b05      	ldr	r3, [pc, #20]	@ (80133cc <RCCEx_PLL3_Config+0x15c>)
 80133b6:	681b      	ldr	r3, [r3, #0]
 80133b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80133bc:	2b00      	cmp	r3, #0
 80133be:	d0f0      	beq.n	80133a2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 80133c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80133c2:	4618      	mov	r0, r3
 80133c4:	3710      	adds	r7, #16
 80133c6:	46bd      	mov	sp, r7
 80133c8:	bd80      	pop	{r7, pc}
 80133ca:	bf00      	nop
 80133cc:	58024400 	.word	0x58024400
 80133d0:	ffff0007 	.word	0xffff0007

080133d4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80133d4:	b580      	push	{r7, lr}
 80133d6:	b08a      	sub	sp, #40	@ 0x28
 80133d8:	af00      	add	r7, sp, #0
 80133da:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d101      	bne.n	80133e6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80133e2:	2301      	movs	r3, #1
 80133e4:	e28e      	b.n	8013904 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 80133e6:	f7f5 fe8f 	bl	8009108 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80133f0:	2b01      	cmp	r3, #1
 80133f2:	d113      	bne.n	801341c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	681b      	ldr	r3, [r3, #0]
 80133f8:	4a96      	ldr	r2, [pc, #600]	@ (8013654 <HAL_SAI_Init+0x280>)
 80133fa:	4293      	cmp	r3, r2
 80133fc:	d004      	beq.n	8013408 <HAL_SAI_Init+0x34>
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	681b      	ldr	r3, [r3, #0]
 8013402:	4a95      	ldr	r2, [pc, #596]	@ (8013658 <HAL_SAI_Init+0x284>)
 8013404:	4293      	cmp	r3, r2
 8013406:	d107      	bne.n	8013418 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8013408:	687b      	ldr	r3, [r7, #4]
 801340a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 801340c:	2b01      	cmp	r3, #1
 801340e:	d103      	bne.n	8013418 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 8013414:	2b00      	cmp	r3, #0
 8013416:	d001      	beq.n	801341c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 8013418:	2301      	movs	r3, #1
 801341a:	e273      	b.n	8013904 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	681b      	ldr	r3, [r3, #0]
 8013420:	4a8c      	ldr	r2, [pc, #560]	@ (8013654 <HAL_SAI_Init+0x280>)
 8013422:	4293      	cmp	r3, r2
 8013424:	d004      	beq.n	8013430 <HAL_SAI_Init+0x5c>
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	681b      	ldr	r3, [r3, #0]
 801342a:	4a8c      	ldr	r2, [pc, #560]	@ (801365c <HAL_SAI_Init+0x288>)
 801342c:	4293      	cmp	r3, r2
 801342e:	d102      	bne.n	8013436 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 8013430:	4b8b      	ldr	r3, [pc, #556]	@ (8013660 <HAL_SAI_Init+0x28c>)
 8013432:	61bb      	str	r3, [r7, #24]
 8013434:	e028      	b.n	8013488 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	681b      	ldr	r3, [r3, #0]
 801343a:	4a8a      	ldr	r2, [pc, #552]	@ (8013664 <HAL_SAI_Init+0x290>)
 801343c:	4293      	cmp	r3, r2
 801343e:	d004      	beq.n	801344a <HAL_SAI_Init+0x76>
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	681b      	ldr	r3, [r3, #0]
 8013444:	4a88      	ldr	r2, [pc, #544]	@ (8013668 <HAL_SAI_Init+0x294>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d102      	bne.n	8013450 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 801344a:	4b88      	ldr	r3, [pc, #544]	@ (801366c <HAL_SAI_Init+0x298>)
 801344c:	61bb      	str	r3, [r7, #24]
 801344e:	e01b      	b.n	8013488 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 8013450:	687b      	ldr	r3, [r7, #4]
 8013452:	681b      	ldr	r3, [r3, #0]
 8013454:	4a86      	ldr	r2, [pc, #536]	@ (8013670 <HAL_SAI_Init+0x29c>)
 8013456:	4293      	cmp	r3, r2
 8013458:	d004      	beq.n	8013464 <HAL_SAI_Init+0x90>
 801345a:	687b      	ldr	r3, [r7, #4]
 801345c:	681b      	ldr	r3, [r3, #0]
 801345e:	4a85      	ldr	r2, [pc, #532]	@ (8013674 <HAL_SAI_Init+0x2a0>)
 8013460:	4293      	cmp	r3, r2
 8013462:	d102      	bne.n	801346a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 8013464:	4b84      	ldr	r3, [pc, #528]	@ (8013678 <HAL_SAI_Init+0x2a4>)
 8013466:	61bb      	str	r3, [r7, #24]
 8013468:	e00e      	b.n	8013488 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 801346a:	687b      	ldr	r3, [r7, #4]
 801346c:	681b      	ldr	r3, [r3, #0]
 801346e:	4a7a      	ldr	r2, [pc, #488]	@ (8013658 <HAL_SAI_Init+0x284>)
 8013470:	4293      	cmp	r3, r2
 8013472:	d004      	beq.n	801347e <HAL_SAI_Init+0xaa>
 8013474:	687b      	ldr	r3, [r7, #4]
 8013476:	681b      	ldr	r3, [r3, #0]
 8013478:	4a80      	ldr	r2, [pc, #512]	@ (801367c <HAL_SAI_Init+0x2a8>)
 801347a:	4293      	cmp	r3, r2
 801347c:	d102      	bne.n	8013484 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 801347e:	4b80      	ldr	r3, [pc, #512]	@ (8013680 <HAL_SAI_Init+0x2ac>)
 8013480:	61bb      	str	r3, [r7, #24]
 8013482:	e001      	b.n	8013488 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 8013484:	2301      	movs	r3, #1
 8013486:	e23d      	b.n	8013904 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801348e:	b2db      	uxtb	r3, r3
 8013490:	2b00      	cmp	r3, #0
 8013492:	d106      	bne.n	80134a2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8013494:	687b      	ldr	r3, [r7, #4]
 8013496:	2200      	movs	r2, #0
 8013498:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f000 faa9 	bl	80139f4 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 80134a2:	6878      	ldr	r0, [r7, #4]
 80134a4:	f000 fcba 	bl	8013e1c <SAI_Disable>
 80134a8:	4603      	mov	r3, r0
 80134aa:	2b00      	cmp	r3, #0
 80134ac:	d001      	beq.n	80134b2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 80134ae:	2301      	movs	r3, #1
 80134b0:	e228      	b.n	8013904 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 80134b2:	687b      	ldr	r3, [r7, #4]
 80134b4:	2202      	movs	r2, #2
 80134b6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	68db      	ldr	r3, [r3, #12]
 80134be:	2b02      	cmp	r3, #2
 80134c0:	d00c      	beq.n	80134dc <HAL_SAI_Init+0x108>
 80134c2:	2b02      	cmp	r3, #2
 80134c4:	d80d      	bhi.n	80134e2 <HAL_SAI_Init+0x10e>
 80134c6:	2b00      	cmp	r3, #0
 80134c8:	d002      	beq.n	80134d0 <HAL_SAI_Init+0xfc>
 80134ca:	2b01      	cmp	r3, #1
 80134cc:	d003      	beq.n	80134d6 <HAL_SAI_Init+0x102>
 80134ce:	e008      	b.n	80134e2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 80134d0:	2300      	movs	r3, #0
 80134d2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80134d4:	e008      	b.n	80134e8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 80134d6:	2310      	movs	r3, #16
 80134d8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80134da:	e005      	b.n	80134e8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 80134dc:	2320      	movs	r3, #32
 80134de:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80134e0:	e002      	b.n	80134e8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 80134e2:	2300      	movs	r3, #0
 80134e4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80134e6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 80134e8:	687b      	ldr	r3, [r7, #4]
 80134ea:	689b      	ldr	r3, [r3, #8]
 80134ec:	2b05      	cmp	r3, #5
 80134ee:	d832      	bhi.n	8013556 <HAL_SAI_Init+0x182>
 80134f0:	a201      	add	r2, pc, #4	@ (adr r2, 80134f8 <HAL_SAI_Init+0x124>)
 80134f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80134f6:	bf00      	nop
 80134f8:	08013511 	.word	0x08013511
 80134fc:	08013517 	.word	0x08013517
 8013500:	0801351f 	.word	0x0801351f
 8013504:	08013527 	.word	0x08013527
 8013508:	08013537 	.word	0x08013537
 801350c:	08013547 	.word	0x08013547
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8013510:	2300      	movs	r3, #0
 8013512:	61fb      	str	r3, [r7, #28]
      break;
 8013514:	e022      	b.n	801355c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8013516:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801351a:	61fb      	str	r3, [r7, #28]
      break;
 801351c:	e01e      	b.n	801355c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801351e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8013522:	61fb      	str	r3, [r7, #28]
      break;
 8013524:	e01a      	b.n	801355c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8013526:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801352a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801352c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801352e:	f043 0301 	orr.w	r3, r3, #1
 8013532:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8013534:	e012      	b.n	801355c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8013536:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801353a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 801353c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801353e:	f043 0302 	orr.w	r3, r3, #2
 8013542:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8013544:	e00a      	b.n	801355c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8013546:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801354a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 801354c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801354e:	f043 0303 	orr.w	r3, r3, #3
 8013552:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8013554:	e002      	b.n	801355c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 8013556:	2300      	movs	r3, #0
 8013558:	61fb      	str	r3, [r7, #28]
      break;
 801355a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 801355c:	69bb      	ldr	r3, [r7, #24]
 801355e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8013560:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	6a1b      	ldr	r3, [r3, #32]
 8013566:	2b00      	cmp	r3, #0
 8013568:	f000 80c5 	beq.w	80136f6 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 801356c:	2300      	movs	r3, #0
 801356e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4a37      	ldr	r2, [pc, #220]	@ (8013654 <HAL_SAI_Init+0x280>)
 8013576:	4293      	cmp	r3, r2
 8013578:	d004      	beq.n	8013584 <HAL_SAI_Init+0x1b0>
 801357a:	687b      	ldr	r3, [r7, #4]
 801357c:	681b      	ldr	r3, [r3, #0]
 801357e:	4a37      	ldr	r2, [pc, #220]	@ (801365c <HAL_SAI_Init+0x288>)
 8013580:	4293      	cmp	r3, r2
 8013582:	d106      	bne.n	8013592 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8013584:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8013588:	f04f 0100 	mov.w	r1, #0
 801358c:	f7fe fc2e 	bl	8011dec <HAL_RCCEx_GetPeriphCLKFreq>
 8013590:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	681b      	ldr	r3, [r3, #0]
 8013596:	4a33      	ldr	r2, [pc, #204]	@ (8013664 <HAL_SAI_Init+0x290>)
 8013598:	4293      	cmp	r3, r2
 801359a:	d004      	beq.n	80135a6 <HAL_SAI_Init+0x1d2>
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	681b      	ldr	r3, [r3, #0]
 80135a0:	4a31      	ldr	r2, [pc, #196]	@ (8013668 <HAL_SAI_Init+0x294>)
 80135a2:	4293      	cmp	r3, r2
 80135a4:	d106      	bne.n	80135b4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 80135a6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80135aa:	f04f 0100 	mov.w	r1, #0
 80135ae:	f7fe fc1d 	bl	8011dec <HAL_RCCEx_GetPeriphCLKFreq>
 80135b2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 80135b4:	687b      	ldr	r3, [r7, #4]
 80135b6:	681b      	ldr	r3, [r3, #0]
 80135b8:	4a2d      	ldr	r2, [pc, #180]	@ (8013670 <HAL_SAI_Init+0x29c>)
 80135ba:	4293      	cmp	r3, r2
 80135bc:	d004      	beq.n	80135c8 <HAL_SAI_Init+0x1f4>
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	681b      	ldr	r3, [r3, #0]
 80135c2:	4a2c      	ldr	r2, [pc, #176]	@ (8013674 <HAL_SAI_Init+0x2a0>)
 80135c4:	4293      	cmp	r3, r2
 80135c6:	d106      	bne.n	80135d6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 80135c8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 80135cc:	f04f 0100 	mov.w	r1, #0
 80135d0:	f7fe fc0c 	bl	8011dec <HAL_RCCEx_GetPeriphCLKFreq>
 80135d4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 80135d6:	687b      	ldr	r3, [r7, #4]
 80135d8:	681b      	ldr	r3, [r3, #0]
 80135da:	4a1f      	ldr	r2, [pc, #124]	@ (8013658 <HAL_SAI_Init+0x284>)
 80135dc:	4293      	cmp	r3, r2
 80135de:	d106      	bne.n	80135ee <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 80135e0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 80135e4:	f04f 0100 	mov.w	r1, #0
 80135e8:	f7fe fc00 	bl	8011dec <HAL_RCCEx_GetPeriphCLKFreq>
 80135ec:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	4a22      	ldr	r2, [pc, #136]	@ (801367c <HAL_SAI_Init+0x2a8>)
 80135f4:	4293      	cmp	r3, r2
 80135f6:	d106      	bne.n	8013606 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 80135f8:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 80135fc:	f04f 0100 	mov.w	r1, #0
 8013600:	f7fe fbf4 	bl	8011dec <HAL_RCCEx_GetPeriphCLKFreq>
 8013604:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	699b      	ldr	r3, [r3, #24]
 801360a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801360e:	d139      	bne.n	8013684 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8013610:	687b      	ldr	r3, [r7, #4]
 8013612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013614:	2b04      	cmp	r3, #4
 8013616:	d102      	bne.n	801361e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 8013618:	2340      	movs	r3, #64	@ 0x40
 801361a:	60fb      	str	r3, [r7, #12]
 801361c:	e00a      	b.n	8013634 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 801361e:	687b      	ldr	r3, [r7, #4]
 8013620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013622:	2b08      	cmp	r3, #8
 8013624:	d103      	bne.n	801362e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 8013626:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801362a:	60fb      	str	r3, [r7, #12]
 801362c:	e002      	b.n	8013634 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 801362e:	687b      	ldr	r3, [r7, #4]
 8013630:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013632:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 8013634:	697a      	ldr	r2, [r7, #20]
 8013636:	4613      	mov	r3, r2
 8013638:	009b      	lsls	r3, r3, #2
 801363a:	4413      	add	r3, r2
 801363c:	005b      	lsls	r3, r3, #1
 801363e:	4619      	mov	r1, r3
 8013640:	687b      	ldr	r3, [r7, #4]
 8013642:	6a1b      	ldr	r3, [r3, #32]
 8013644:	68fa      	ldr	r2, [r7, #12]
 8013646:	fb02 f303 	mul.w	r3, r2, r3
 801364a:	fbb1 f3f3 	udiv	r3, r1, r3
 801364e:	613b      	str	r3, [r7, #16]
 8013650:	e030      	b.n	80136b4 <HAL_SAI_Init+0x2e0>
 8013652:	bf00      	nop
 8013654:	40015804 	.word	0x40015804
 8013658:	58005404 	.word	0x58005404
 801365c:	40015824 	.word	0x40015824
 8013660:	40015800 	.word	0x40015800
 8013664:	40015c04 	.word	0x40015c04
 8013668:	40015c24 	.word	0x40015c24
 801366c:	40015c00 	.word	0x40015c00
 8013670:	40016004 	.word	0x40016004
 8013674:	40016024 	.word	0x40016024
 8013678:	40016000 	.word	0x40016000
 801367c:	58005424 	.word	0x58005424
 8013680:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 8013684:	687b      	ldr	r3, [r7, #4]
 8013686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8013688:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801368c:	d101      	bne.n	8013692 <HAL_SAI_Init+0x2be>
 801368e:	2302      	movs	r3, #2
 8013690:	e000      	b.n	8013694 <HAL_SAI_Init+0x2c0>
 8013692:	2301      	movs	r3, #1
 8013694:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 8013696:	697a      	ldr	r2, [r7, #20]
 8013698:	4613      	mov	r3, r2
 801369a:	009b      	lsls	r3, r3, #2
 801369c:	4413      	add	r3, r2
 801369e:	005b      	lsls	r3, r3, #1
 80136a0:	4619      	mov	r1, r3
 80136a2:	687b      	ldr	r3, [r7, #4]
 80136a4:	6a1b      	ldr	r3, [r3, #32]
 80136a6:	68ba      	ldr	r2, [r7, #8]
 80136a8:	fb02 f303 	mul.w	r3, r2, r3
 80136ac:	021b      	lsls	r3, r3, #8
 80136ae:	fbb1 f3f3 	udiv	r3, r1, r3
 80136b2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 80136b4:	693b      	ldr	r3, [r7, #16]
 80136b6:	4a95      	ldr	r2, [pc, #596]	@ (801390c <HAL_SAI_Init+0x538>)
 80136b8:	fba2 2303 	umull	r2, r3, r2, r3
 80136bc:	08da      	lsrs	r2, r3, #3
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 80136c2:	6939      	ldr	r1, [r7, #16]
 80136c4:	4b91      	ldr	r3, [pc, #580]	@ (801390c <HAL_SAI_Init+0x538>)
 80136c6:	fba3 2301 	umull	r2, r3, r3, r1
 80136ca:	08da      	lsrs	r2, r3, #3
 80136cc:	4613      	mov	r3, r2
 80136ce:	009b      	lsls	r3, r3, #2
 80136d0:	4413      	add	r3, r2
 80136d2:	005b      	lsls	r3, r3, #1
 80136d4:	1aca      	subs	r2, r1, r3
 80136d6:	2a08      	cmp	r2, #8
 80136d8:	d904      	bls.n	80136e4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 80136da:	687b      	ldr	r3, [r7, #4]
 80136dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136de:	1c5a      	adds	r2, r3, #1
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 80136e4:	687b      	ldr	r3, [r7, #4]
 80136e6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80136e8:	2b04      	cmp	r3, #4
 80136ea:	d104      	bne.n	80136f6 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80136f0:	085a      	lsrs	r2, r3, #1
 80136f2:	687b      	ldr	r3, [r7, #4]
 80136f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	685b      	ldr	r3, [r3, #4]
 80136fa:	2b00      	cmp	r3, #0
 80136fc:	d003      	beq.n	8013706 <HAL_SAI_Init+0x332>
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	685b      	ldr	r3, [r3, #4]
 8013702:	2b02      	cmp	r3, #2
 8013704:	d109      	bne.n	801371a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801370a:	2b01      	cmp	r3, #1
 801370c:	d101      	bne.n	8013712 <HAL_SAI_Init+0x33e>
 801370e:	2300      	movs	r3, #0
 8013710:	e001      	b.n	8013716 <HAL_SAI_Init+0x342>
 8013712:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013716:	623b      	str	r3, [r7, #32]
 8013718:	e008      	b.n	801372c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 801371a:	687b      	ldr	r3, [r7, #4]
 801371c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801371e:	2b01      	cmp	r3, #1
 8013720:	d102      	bne.n	8013728 <HAL_SAI_Init+0x354>
 8013722:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8013726:	e000      	b.n	801372a <HAL_SAI_Init+0x356>
 8013728:	2300      	movs	r3, #0
 801372a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801372c:	f7f5 fcec 	bl	8009108 <HAL_GetREVID>
 8013730:	4603      	mov	r3, r0
 8013732:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8013736:	d331      	bcc.n	801379c <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	6819      	ldr	r1, [r3, #0]
 801373e:	687b      	ldr	r3, [r7, #4]
 8013740:	681a      	ldr	r2, [r3, #0]
 8013742:	4b73      	ldr	r3, [pc, #460]	@ (8013910 <HAL_SAI_Init+0x53c>)
 8013744:	400b      	ands	r3, r1
 8013746:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8013748:	687b      	ldr	r3, [r7, #4]
 801374a:	681b      	ldr	r3, [r3, #0]
 801374c:	6819      	ldr	r1, [r3, #0]
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	685a      	ldr	r2, [r3, #4]
 8013752:	687b      	ldr	r3, [r7, #4]
 8013754:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013756:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8013758:	687b      	ldr	r3, [r7, #4]
 801375a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801375c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8013762:	431a      	orrs	r2, r3
 8013764:	6a3b      	ldr	r3, [r7, #32]
 8013766:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 8013768:	69fb      	ldr	r3, [r7, #28]
 801376a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801376c:	687b      	ldr	r3, [r7, #4]
 801376e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 8013770:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8013772:	687b      	ldr	r3, [r7, #4]
 8013774:	695b      	ldr	r3, [r3, #20]
 8013776:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 8013778:	687b      	ldr	r3, [r7, #4]
 801377a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801377c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801377e:	687b      	ldr	r3, [r7, #4]
 8013780:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013782:	051b      	lsls	r3, r3, #20
 8013784:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801378a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	691b      	ldr	r3, [r3, #16]
 8013790:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	681b      	ldr	r3, [r3, #0]
 8013796:	430a      	orrs	r2, r1
 8013798:	601a      	str	r2, [r3, #0]
 801379a:	e02d      	b.n	80137f8 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	681b      	ldr	r3, [r3, #0]
 80137a0:	6819      	ldr	r1, [r3, #0]
 80137a2:	687b      	ldr	r3, [r7, #4]
 80137a4:	681a      	ldr	r2, [r3, #0]
 80137a6:	4b5b      	ldr	r3, [pc, #364]	@ (8013914 <HAL_SAI_Init+0x540>)
 80137a8:	400b      	ands	r3, r1
 80137aa:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80137ac:	687b      	ldr	r3, [r7, #4]
 80137ae:	681b      	ldr	r3, [r3, #0]
 80137b0:	6819      	ldr	r1, [r3, #0]
 80137b2:	687b      	ldr	r3, [r7, #4]
 80137b4:	685a      	ldr	r2, [r3, #4]
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80137ba:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80137c0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80137c6:	431a      	orrs	r2, r3
 80137c8:	6a3b      	ldr	r3, [r7, #32]
 80137ca:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 80137cc:	69fb      	ldr	r3, [r7, #28]
 80137ce:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80137d0:	687b      	ldr	r3, [r7, #4]
 80137d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 80137d4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80137d6:	687b      	ldr	r3, [r7, #4]
 80137d8:	695b      	ldr	r3, [r3, #20]
 80137da:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80137dc:	687b      	ldr	r3, [r7, #4]
 80137de:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 80137e0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80137e6:	051b      	lsls	r3, r3, #20
 80137e8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 80137ee:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 80137f0:	687b      	ldr	r3, [r7, #4]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	430a      	orrs	r2, r1
 80137f6:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 80137f8:	687b      	ldr	r3, [r7, #4]
 80137fa:	681b      	ldr	r3, [r3, #0]
 80137fc:	6859      	ldr	r1, [r3, #4]
 80137fe:	687b      	ldr	r3, [r7, #4]
 8013800:	681a      	ldr	r2, [r3, #0]
 8013802:	4b45      	ldr	r3, [pc, #276]	@ (8013918 <HAL_SAI_Init+0x544>)
 8013804:	400b      	ands	r3, r1
 8013806:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8013808:	687b      	ldr	r3, [r7, #4]
 801380a:	681b      	ldr	r3, [r3, #0]
 801380c:	6859      	ldr	r1, [r3, #4]
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	69da      	ldr	r2, [r3, #28]
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013816:	431a      	orrs	r2, r3
 8013818:	687b      	ldr	r3, [r7, #4]
 801381a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801381c:	431a      	orrs	r2, r3
 801381e:	687b      	ldr	r3, [r7, #4]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	430a      	orrs	r2, r1
 8013824:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8013826:	687b      	ldr	r3, [r7, #4]
 8013828:	681b      	ldr	r3, [r3, #0]
 801382a:	6899      	ldr	r1, [r3, #8]
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681a      	ldr	r2, [r3, #0]
 8013830:	4b3a      	ldr	r3, [pc, #232]	@ (801391c <HAL_SAI_Init+0x548>)
 8013832:	400b      	ands	r3, r1
 8013834:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8013836:	687b      	ldr	r3, [r7, #4]
 8013838:	681b      	ldr	r3, [r3, #0]
 801383a:	6899      	ldr	r1, [r3, #8]
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013840:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8013842:	687b      	ldr	r3, [r7, #4]
 8013844:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8013846:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 801384c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 801384e:	687b      	ldr	r3, [r7, #4]
 8013850:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 8013852:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8013858:	3b01      	subs	r3, #1
 801385a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 801385c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801385e:	687b      	ldr	r3, [r7, #4]
 8013860:	681b      	ldr	r3, [r3, #0]
 8013862:	430a      	orrs	r2, r1
 8013864:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8013866:	687b      	ldr	r3, [r7, #4]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	68d9      	ldr	r1, [r3, #12]
 801386c:	687b      	ldr	r3, [r7, #4]
 801386e:	681a      	ldr	r2, [r3, #0]
 8013870:	f24f 0320 	movw	r3, #61472	@ 0xf020
 8013874:	400b      	ands	r3, r1
 8013876:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8013878:	687b      	ldr	r3, [r7, #4]
 801387a:	681b      	ldr	r3, [r3, #0]
 801387c:	68d9      	ldr	r1, [r3, #12]
 801387e:	687b      	ldr	r3, [r7, #4]
 8013880:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8013882:	687b      	ldr	r3, [r7, #4]
 8013884:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013886:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801388c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801388e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8013890:	687b      	ldr	r3, [r7, #4]
 8013892:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013894:	3b01      	subs	r3, #1
 8013896:	021b      	lsls	r3, r3, #8
 8013898:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801389a:	687b      	ldr	r3, [r7, #4]
 801389c:	681b      	ldr	r3, [r3, #0]
 801389e:	430a      	orrs	r2, r1
 80138a0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 80138a2:	687b      	ldr	r3, [r7, #4]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4a1e      	ldr	r2, [pc, #120]	@ (8013920 <HAL_SAI_Init+0x54c>)
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d004      	beq.n	80138b6 <HAL_SAI_Init+0x4e2>
 80138ac:	687b      	ldr	r3, [r7, #4]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a1c      	ldr	r2, [pc, #112]	@ (8013924 <HAL_SAI_Init+0x550>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d119      	bne.n	80138ea <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80138b6:	69bb      	ldr	r3, [r7, #24]
 80138b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138ba:	f023 0201 	bic.w	r2, r3, #1
 80138be:	69bb      	ldr	r3, [r7, #24]
 80138c0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 80138c2:	687b      	ldr	r3, [r7, #4]
 80138c4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80138c8:	2b01      	cmp	r3, #1
 80138ca:	d10e      	bne.n	80138ea <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 80138d0:	687b      	ldr	r3, [r7, #4]
 80138d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80138d4:	3b01      	subs	r3, #1
 80138d6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 80138d8:	431a      	orrs	r2, r3
 80138da:	69bb      	ldr	r3, [r7, #24]
 80138dc:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 80138de:	69bb      	ldr	r3, [r7, #24]
 80138e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80138e2:	f043 0201 	orr.w	r2, r3, #1
 80138e6:	69bb      	ldr	r3, [r7, #24]
 80138e8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80138ea:	687b      	ldr	r3, [r7, #4]
 80138ec:	2200      	movs	r2, #0
 80138ee:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 80138f2:	687b      	ldr	r3, [r7, #4]
 80138f4:	2201      	movs	r2, #1
 80138f6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80138fa:	687b      	ldr	r3, [r7, #4]
 80138fc:	2200      	movs	r2, #0
 80138fe:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 8013902:	2300      	movs	r3, #0
}
 8013904:	4618      	mov	r0, r3
 8013906:	3728      	adds	r7, #40	@ 0x28
 8013908:	46bd      	mov	sp, r7
 801390a:	bd80      	pop	{r7, pc}
 801390c:	cccccccd 	.word	0xcccccccd
 8013910:	f005c010 	.word	0xf005c010
 8013914:	f805c010 	.word	0xf805c010
 8013918:	ffff1ff0 	.word	0xffff1ff0
 801391c:	fff88000 	.word	0xfff88000
 8013920:	40015804 	.word	0x40015804
 8013924:	58005404 	.word	0x58005404

08013928 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 8013928:	b580      	push	{r7, lr}
 801392a:	b084      	sub	sp, #16
 801392c:	af00      	add	r7, sp, #0
 801392e:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 8013930:	687b      	ldr	r3, [r7, #4]
 8013932:	2b00      	cmp	r3, #0
 8013934:	d101      	bne.n	801393a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 8013936:	2301      	movs	r3, #1
 8013938:	e050      	b.n	80139dc <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 801393a:	687b      	ldr	r3, [r7, #4]
 801393c:	2202      	movs	r2, #2
 801393e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 8013942:	687b      	ldr	r3, [r7, #4]
 8013944:	681b      	ldr	r3, [r3, #0]
 8013946:	2200      	movs	r2, #0
 8013948:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8013952:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 8013954:	6878      	ldr	r0, [r7, #4]
 8013956:	f000 fa61 	bl	8013e1c <SAI_Disable>
 801395a:	4603      	mov	r3, r0
 801395c:	2b00      	cmp	r3, #0
 801395e:	d009      	beq.n	8013974 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 8013960:	687b      	ldr	r3, [r7, #4]
 8013962:	2201      	movs	r2, #1
 8013964:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 8013968:	687b      	ldr	r3, [r7, #4]
 801396a:	2200      	movs	r2, #0
 801396c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 8013970:	2301      	movs	r3, #1
 8013972:	e033      	b.n	80139dc <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8013974:	687b      	ldr	r3, [r7, #4]
 8013976:	681b      	ldr	r3, [r3, #0]
 8013978:	685a      	ldr	r2, [r3, #4]
 801397a:	687b      	ldr	r3, [r7, #4]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	f042 0208 	orr.w	r2, r2, #8
 8013982:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 8013984:	687b      	ldr	r3, [r7, #4]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	4a16      	ldr	r2, [pc, #88]	@ (80139e4 <HAL_SAI_DeInit+0xbc>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d004      	beq.n	8013998 <HAL_SAI_DeInit+0x70>
 801398e:	687b      	ldr	r3, [r7, #4]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	4a15      	ldr	r2, [pc, #84]	@ (80139e8 <HAL_SAI_DeInit+0xc0>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d111      	bne.n	80139bc <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 8013998:	687b      	ldr	r3, [r7, #4]
 801399a:	681b      	ldr	r3, [r3, #0]
 801399c:	4a11      	ldr	r2, [pc, #68]	@ (80139e4 <HAL_SAI_DeInit+0xbc>)
 801399e:	4293      	cmp	r3, r2
 80139a0:	d101      	bne.n	80139a6 <HAL_SAI_DeInit+0x7e>
 80139a2:	4b12      	ldr	r3, [pc, #72]	@ (80139ec <HAL_SAI_DeInit+0xc4>)
 80139a4:	e000      	b.n	80139a8 <HAL_SAI_DeInit+0x80>
 80139a6:	4b12      	ldr	r3, [pc, #72]	@ (80139f0 <HAL_SAI_DeInit+0xc8>)
 80139a8:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 80139aa:	68fb      	ldr	r3, [r7, #12]
 80139ac:	2200      	movs	r2, #0
 80139ae:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 80139b0:	68fb      	ldr	r3, [r7, #12]
 80139b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80139b4:	f023 0201 	bic.w	r2, r3, #1
 80139b8:	68fb      	ldr	r3, [r7, #12]
 80139ba:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 80139bc:	6878      	ldr	r0, [r7, #4]
 80139be:	f000 f823 	bl	8013a08 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	2200      	movs	r2, #0
 80139c6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	2200      	movs	r2, #0
 80139ce:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 80139d2:	687b      	ldr	r3, [r7, #4]
 80139d4:	2200      	movs	r2, #0
 80139d6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 80139da:	2300      	movs	r3, #0
}
 80139dc:	4618      	mov	r0, r3
 80139de:	3710      	adds	r7, #16
 80139e0:	46bd      	mov	sp, r7
 80139e2:	bd80      	pop	{r7, pc}
 80139e4:	40015804 	.word	0x40015804
 80139e8:	58005404 	.word	0x58005404
 80139ec:	40015800 	.word	0x40015800
 80139f0:	58005400 	.word	0x58005400

080139f4 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80139f4:	b480      	push	{r7}
 80139f6:	b083      	sub	sp, #12
 80139f8:	af00      	add	r7, sp, #0
 80139fa:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 80139fc:	bf00      	nop
 80139fe:	370c      	adds	r7, #12
 8013a00:	46bd      	mov	sp, r7
 8013a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a06:	4770      	bx	lr

08013a08 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 8013a08:	b480      	push	{r7}
 8013a0a:	b083      	sub	sp, #12
 8013a0c:	af00      	add	r7, sp, #0
 8013a0e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 8013a10:	bf00      	nop
 8013a12:	370c      	adds	r7, #12
 8013a14:	46bd      	mov	sp, r7
 8013a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013a1a:	4770      	bx	lr

08013a1c <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	b084      	sub	sp, #16
 8013a20:	af00      	add	r7, sp, #0
 8013a22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013a24:	2300      	movs	r3, #0
 8013a26:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 8013a28:	687b      	ldr	r3, [r7, #4]
 8013a2a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8013a2e:	2b01      	cmp	r3, #1
 8013a30:	d101      	bne.n	8013a36 <HAL_SAI_DMAStop+0x1a>
 8013a32:	2302      	movs	r3, #2
 8013a34:	e06c      	b.n	8013b10 <HAL_SAI_DMAStop+0xf4>
 8013a36:	687b      	ldr	r3, [r7, #4]
 8013a38:	2201      	movs	r2, #1
 8013a3a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8013a3e:	6878      	ldr	r0, [r7, #4]
 8013a40:	f000 f9ec 	bl	8013e1c <SAI_Disable>
 8013a44:	4603      	mov	r3, r0
 8013a46:	2b00      	cmp	r3, #0
 8013a48:	d001      	beq.n	8013a4e <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 8013a4a:	2301      	movs	r3, #1
 8013a4c:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013a4e:	687b      	ldr	r3, [r7, #4]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	681a      	ldr	r2, [r3, #0]
 8013a54:	687b      	ldr	r3, [r7, #4]
 8013a56:	681b      	ldr	r3, [r3, #0]
 8013a58:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8013a5c:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 8013a5e:	687b      	ldr	r3, [r7, #4]
 8013a60:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8013a64:	b2db      	uxtb	r3, r3
 8013a66:	2b12      	cmp	r3, #18
 8013a68:	d11d      	bne.n	8013aa6 <HAL_SAI_DMAStop+0x8a>
 8013a6a:	687b      	ldr	r3, [r7, #4]
 8013a6c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a70:	2b00      	cmp	r3, #0
 8013a72:	d018      	beq.n	8013aa6 <HAL_SAI_DMAStop+0x8a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 8013a74:	687b      	ldr	r3, [r7, #4]
 8013a76:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a7a:	4618      	mov	r0, r3
 8013a7c:	f7f6 fd9c 	bl	800a5b8 <HAL_DMA_Abort>
 8013a80:	4603      	mov	r3, r0
 8013a82:	2b00      	cmp	r3, #0
 8013a84:	d00f      	beq.n	8013aa6 <HAL_SAI_DMAStop+0x8a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8013a86:	687b      	ldr	r3, [r7, #4]
 8013a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013a8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013a8e:	2b80      	cmp	r3, #128	@ 0x80
 8013a90:	d009      	beq.n	8013aa6 <HAL_SAI_DMAStop+0x8a>
      {
        status = HAL_ERROR;
 8013a92:	2301      	movs	r3, #1
 8013a94:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013a96:	687b      	ldr	r3, [r7, #4]
 8013a98:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013a9c:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013aa0:	687b      	ldr	r3, [r7, #4]
 8013aa2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 8013aa6:	687b      	ldr	r3, [r7, #4]
 8013aa8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8013aac:	b2db      	uxtb	r3, r3
 8013aae:	2b22      	cmp	r3, #34	@ 0x22
 8013ab0:	d11d      	bne.n	8013aee <HAL_SAI_DMAStop+0xd2>
 8013ab2:	687b      	ldr	r3, [r7, #4]
 8013ab4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ab8:	2b00      	cmp	r3, #0
 8013aba:	d018      	beq.n	8013aee <HAL_SAI_DMAStop+0xd2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 8013abc:	687b      	ldr	r3, [r7, #4]
 8013abe:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ac2:	4618      	mov	r0, r3
 8013ac4:	f7f6 fd78 	bl	800a5b8 <HAL_DMA_Abort>
 8013ac8:	4603      	mov	r3, r0
 8013aca:	2b00      	cmp	r3, #0
 8013acc:	d00f      	beq.n	8013aee <HAL_SAI_DMAStop+0xd2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 8013ace:	687b      	ldr	r3, [r7, #4]
 8013ad0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013ad4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8013ad6:	2b80      	cmp	r3, #128	@ 0x80
 8013ad8:	d009      	beq.n	8013aee <HAL_SAI_DMAStop+0xd2>
      {
        status = HAL_ERROR;
 8013ada:	2301      	movs	r3, #1
 8013adc:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013ade:	687b      	ldr	r3, [r7, #4]
 8013ae0:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013ae4:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013ae8:	687b      	ldr	r3, [r7, #4]
 8013aea:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	681b      	ldr	r3, [r3, #0]
 8013af2:	685a      	ldr	r2, [r3, #4]
 8013af4:	687b      	ldr	r3, [r7, #4]
 8013af6:	681b      	ldr	r3, [r3, #0]
 8013af8:	f042 0208 	orr.w	r2, r2, #8
 8013afc:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 8013afe:	687b      	ldr	r3, [r7, #4]
 8013b00:	2201      	movs	r2, #1
 8013b02:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 8013b06:	687b      	ldr	r3, [r7, #4]
 8013b08:	2200      	movs	r2, #0
 8013b0a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 8013b0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8013b10:	4618      	mov	r0, r3
 8013b12:	3710      	adds	r7, #16
 8013b14:	46bd      	mov	sp, r7
 8013b16:	bd80      	pop	{r7, pc}

08013b18 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8013b18:	b580      	push	{r7, lr}
 8013b1a:	b086      	sub	sp, #24
 8013b1c:	af00      	add	r7, sp, #0
 8013b1e:	60f8      	str	r0, [r7, #12]
 8013b20:	60b9      	str	r1, [r7, #8]
 8013b22:	4613      	mov	r3, r2
 8013b24:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 8013b26:	f7f5 fabf 	bl	80090a8 <HAL_GetTick>
 8013b2a:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 8013b2c:	68bb      	ldr	r3, [r7, #8]
 8013b2e:	2b00      	cmp	r3, #0
 8013b30:	d002      	beq.n	8013b38 <HAL_SAI_Transmit_DMA+0x20>
 8013b32:	88fb      	ldrh	r3, [r7, #6]
 8013b34:	2b00      	cmp	r3, #0
 8013b36:	d101      	bne.n	8013b3c <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 8013b38:	2301      	movs	r3, #1
 8013b3a:	e098      	b.n	8013c6e <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8013b3c:	68fb      	ldr	r3, [r7, #12]
 8013b3e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8013b42:	b2db      	uxtb	r3, r3
 8013b44:	2b01      	cmp	r3, #1
 8013b46:	f040 8091 	bne.w	8013c6c <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d101      	bne.n	8013b58 <HAL_SAI_Transmit_DMA+0x40>
 8013b54:	2302      	movs	r3, #2
 8013b56:	e08a      	b.n	8013c6e <HAL_SAI_Transmit_DMA+0x156>
 8013b58:	68fb      	ldr	r3, [r7, #12]
 8013b5a:	2201      	movs	r2, #1
 8013b5c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8013b60:	68fb      	ldr	r3, [r7, #12]
 8013b62:	68ba      	ldr	r2, [r7, #8]
 8013b64:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8013b66:	68fb      	ldr	r3, [r7, #12]
 8013b68:	88fa      	ldrh	r2, [r7, #6]
 8013b6a:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8013b6e:	68fb      	ldr	r3, [r7, #12]
 8013b70:	88fa      	ldrh	r2, [r7, #6]
 8013b72:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	2200      	movs	r2, #0
 8013b7a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 8013b7e:	68fb      	ldr	r3, [r7, #12]
 8013b80:	2212      	movs	r2, #18
 8013b82:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 8013b86:	68fb      	ldr	r3, [r7, #12]
 8013b88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b8c:	4a3a      	ldr	r2, [pc, #232]	@ (8013c78 <HAL_SAI_Transmit_DMA+0x160>)
 8013b8e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 8013b90:	68fb      	ldr	r3, [r7, #12]
 8013b92:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013b96:	4a39      	ldr	r2, [pc, #228]	@ (8013c7c <HAL_SAI_Transmit_DMA+0x164>)
 8013b98:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 8013b9a:	68fb      	ldr	r3, [r7, #12]
 8013b9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013ba0:	4a37      	ldr	r2, [pc, #220]	@ (8013c80 <HAL_SAI_Transmit_DMA+0x168>)
 8013ba2:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 8013ba4:	68fb      	ldr	r3, [r7, #12]
 8013ba6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013baa:	2200      	movs	r2, #0
 8013bac:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 8013bae:	68fb      	ldr	r3, [r7, #12]
 8013bb0:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 8013bb4:	68fb      	ldr	r3, [r7, #12]
 8013bb6:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013bb8:	4619      	mov	r1, r3
 8013bba:	68fb      	ldr	r3, [r7, #12]
 8013bbc:	681b      	ldr	r3, [r3, #0]
 8013bbe:	331c      	adds	r3, #28
 8013bc0:	461a      	mov	r2, r3
 8013bc2:	68fb      	ldr	r3, [r7, #12]
 8013bc4:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8013bc8:	f7f6 fa8c 	bl	800a0e4 <HAL_DMA_Start_IT>
 8013bcc:	4603      	mov	r3, r0
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d005      	beq.n	8013bde <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 8013bd2:	68fb      	ldr	r3, [r7, #12]
 8013bd4:	2200      	movs	r2, #0
 8013bd6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8013bda:	2301      	movs	r3, #1
 8013bdc:	e047      	b.n	8013c6e <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013bde:	2100      	movs	r1, #0
 8013be0:	68f8      	ldr	r0, [r7, #12]
 8013be2:	f000 f8e3 	bl	8013dac <SAI_InterruptFlag>
 8013be6:	4601      	mov	r1, r0
 8013be8:	68fb      	ldr	r3, [r7, #12]
 8013bea:	681b      	ldr	r3, [r3, #0]
 8013bec:	691a      	ldr	r2, [r3, #16]
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	430a      	orrs	r2, r1
 8013bf4:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8013bf6:	68fb      	ldr	r3, [r7, #12]
 8013bf8:	681b      	ldr	r3, [r3, #0]
 8013bfa:	681a      	ldr	r2, [r3, #0]
 8013bfc:	68fb      	ldr	r3, [r7, #12]
 8013bfe:	681b      	ldr	r3, [r3, #0]
 8013c00:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013c04:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8013c06:	e015      	b.n	8013c34 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 8013c08:	f7f5 fa4e 	bl	80090a8 <HAL_GetTick>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	697b      	ldr	r3, [r7, #20]
 8013c10:	1ad3      	subs	r3, r2, r3
 8013c12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8013c16:	d90d      	bls.n	8013c34 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8013c18:	68fb      	ldr	r3, [r7, #12]
 8013c1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013c1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013c22:	68fb      	ldr	r3, [r7, #12]
 8013c24:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	2200      	movs	r2, #0
 8013c2c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8013c30:	2303      	movs	r3, #3
 8013c32:	e01c      	b.n	8013c6e <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8013c34:	68fb      	ldr	r3, [r7, #12]
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	695b      	ldr	r3, [r3, #20]
 8013c3a:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8013c3e:	2b00      	cmp	r3, #0
 8013c40:	d0e2      	beq.n	8013c08 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8013c42:	68fb      	ldr	r3, [r7, #12]
 8013c44:	681b      	ldr	r3, [r3, #0]
 8013c46:	681b      	ldr	r3, [r3, #0]
 8013c48:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013c4c:	2b00      	cmp	r3, #0
 8013c4e:	d107      	bne.n	8013c60 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8013c50:	68fb      	ldr	r3, [r7, #12]
 8013c52:	681b      	ldr	r3, [r3, #0]
 8013c54:	681a      	ldr	r2, [r3, #0]
 8013c56:	68fb      	ldr	r3, [r7, #12]
 8013c58:	681b      	ldr	r3, [r3, #0]
 8013c5a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8013c5e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	2200      	movs	r2, #0
 8013c64:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8013c68:	2300      	movs	r3, #0
 8013c6a:	e000      	b.n	8013c6e <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8013c6c:	2302      	movs	r3, #2
  }
}
 8013c6e:	4618      	mov	r0, r3
 8013c70:	3718      	adds	r7, #24
 8013c72:	46bd      	mov	sp, r7
 8013c74:	bd80      	pop	{r7, pc}
 8013c76:	bf00      	nop
 8013c78:	08013ef1 	.word	0x08013ef1
 8013c7c:	08013e91 	.word	0x08013e91
 8013c80:	08013f89 	.word	0x08013f89

08013c84 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 8013c84:	b580      	push	{r7, lr}
 8013c86:	b084      	sub	sp, #16
 8013c88:	af00      	add	r7, sp, #0
 8013c8a:	60f8      	str	r0, [r7, #12]
 8013c8c:	60b9      	str	r1, [r7, #8]
 8013c8e:	4613      	mov	r3, r2
 8013c90:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 8013c92:	68bb      	ldr	r3, [r7, #8]
 8013c94:	2b00      	cmp	r3, #0
 8013c96:	d002      	beq.n	8013c9e <HAL_SAI_Receive_DMA+0x1a>
 8013c98:	88fb      	ldrh	r3, [r7, #6]
 8013c9a:	2b00      	cmp	r3, #0
 8013c9c:	d101      	bne.n	8013ca2 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 8013c9e:	2301      	movs	r3, #1
 8013ca0:	e079      	b.n	8013d96 <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 8013ca2:	68fb      	ldr	r3, [r7, #12]
 8013ca4:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8013ca8:	b2db      	uxtb	r3, r3
 8013caa:	2b01      	cmp	r3, #1
 8013cac:	d172      	bne.n	8013d94 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 8013cae:	68fb      	ldr	r3, [r7, #12]
 8013cb0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 8013cb4:	2b01      	cmp	r3, #1
 8013cb6:	d101      	bne.n	8013cbc <HAL_SAI_Receive_DMA+0x38>
 8013cb8:	2302      	movs	r3, #2
 8013cba:	e06c      	b.n	8013d96 <HAL_SAI_Receive_DMA+0x112>
 8013cbc:	68fb      	ldr	r3, [r7, #12]
 8013cbe:	2201      	movs	r2, #1
 8013cc0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 8013cc4:	68fb      	ldr	r3, [r7, #12]
 8013cc6:	68ba      	ldr	r2, [r7, #8]
 8013cc8:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 8013cca:	68fb      	ldr	r3, [r7, #12]
 8013ccc:	88fa      	ldrh	r2, [r7, #6]
 8013cce:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 8013cd2:	68fb      	ldr	r3, [r7, #12]
 8013cd4:	88fa      	ldrh	r2, [r7, #6]
 8013cd6:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8013cda:	68fb      	ldr	r3, [r7, #12]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2222      	movs	r2, #34	@ 0x22
 8013ce6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 8013cea:	68fb      	ldr	r3, [r7, #12]
 8013cec:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013cf0:	4a2b      	ldr	r2, [pc, #172]	@ (8013da0 <HAL_SAI_Receive_DMA+0x11c>)
 8013cf2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8013cf4:	68fb      	ldr	r3, [r7, #12]
 8013cf6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013cfa:	4a2a      	ldr	r2, [pc, #168]	@ (8013da4 <HAL_SAI_Receive_DMA+0x120>)
 8013cfc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8013cfe:	68fb      	ldr	r3, [r7, #12]
 8013d00:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d04:	4a28      	ldr	r2, [pc, #160]	@ (8013da8 <HAL_SAI_Receive_DMA+0x124>)
 8013d06:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 8013d08:	68fb      	ldr	r3, [r7, #12]
 8013d0a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8013d0e:	2200      	movs	r2, #0
 8013d10:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8013d12:	68fb      	ldr	r3, [r7, #12]
 8013d14:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 8013d18:	68fb      	ldr	r3, [r7, #12]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	331c      	adds	r3, #28
 8013d1e:	4619      	mov	r1, r3
 8013d20:	68fb      	ldr	r3, [r7, #12]
 8013d22:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8013d24:	461a      	mov	r2, r3
 8013d26:	68fb      	ldr	r3, [r7, #12]
 8013d28:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8013d2c:	f7f6 f9da 	bl	800a0e4 <HAL_DMA_Start_IT>
 8013d30:	4603      	mov	r3, r0
 8013d32:	2b00      	cmp	r3, #0
 8013d34:	d005      	beq.n	8013d42 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 8013d36:	68fb      	ldr	r3, [r7, #12]
 8013d38:	2200      	movs	r2, #0
 8013d3a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8013d3e:	2301      	movs	r3, #1
 8013d40:	e029      	b.n	8013d96 <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013d42:	2100      	movs	r1, #0
 8013d44:	68f8      	ldr	r0, [r7, #12]
 8013d46:	f000 f831 	bl	8013dac <SAI_InterruptFlag>
 8013d4a:	4601      	mov	r1, r0
 8013d4c:	68fb      	ldr	r3, [r7, #12]
 8013d4e:	681b      	ldr	r3, [r3, #0]
 8013d50:	691a      	ldr	r2, [r3, #16]
 8013d52:	68fb      	ldr	r3, [r7, #12]
 8013d54:	681b      	ldr	r3, [r3, #0]
 8013d56:	430a      	orrs	r2, r1
 8013d58:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	681a      	ldr	r2, [r3, #0]
 8013d60:	68fb      	ldr	r3, [r7, #12]
 8013d62:	681b      	ldr	r3, [r3, #0]
 8013d64:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8013d68:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8013d6a:	68fb      	ldr	r3, [r7, #12]
 8013d6c:	681b      	ldr	r3, [r3, #0]
 8013d6e:	681b      	ldr	r3, [r3, #0]
 8013d70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013d74:	2b00      	cmp	r3, #0
 8013d76:	d107      	bne.n	8013d88 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8013d78:	68fb      	ldr	r3, [r7, #12]
 8013d7a:	681b      	ldr	r3, [r3, #0]
 8013d7c:	681a      	ldr	r2, [r3, #0]
 8013d7e:	68fb      	ldr	r3, [r7, #12]
 8013d80:	681b      	ldr	r3, [r3, #0]
 8013d82:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8013d86:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8013d88:	68fb      	ldr	r3, [r7, #12]
 8013d8a:	2200      	movs	r2, #0
 8013d8c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 8013d90:	2300      	movs	r3, #0
 8013d92:	e000      	b.n	8013d96 <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 8013d94:	2302      	movs	r3, #2
  }
}
 8013d96:	4618      	mov	r0, r3
 8013d98:	3710      	adds	r7, #16
 8013d9a:	46bd      	mov	sp, r7
 8013d9c:	bd80      	pop	{r7, pc}
 8013d9e:	bf00      	nop
 8013da0:	08013f6d 	.word	0x08013f6d
 8013da4:	08013f0d 	.word	0x08013f0d
 8013da8:	08013f89 	.word	0x08013f89

08013dac <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 8013dac:	b480      	push	{r7}
 8013dae:	b085      	sub	sp, #20
 8013db0:	af00      	add	r7, sp, #0
 8013db2:	6078      	str	r0, [r7, #4]
 8013db4:	460b      	mov	r3, r1
 8013db6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 8013db8:	2301      	movs	r3, #1
 8013dba:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 8013dbc:	78fb      	ldrb	r3, [r7, #3]
 8013dbe:	2b01      	cmp	r3, #1
 8013dc0:	d103      	bne.n	8013dca <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 8013dc2:	68fb      	ldr	r3, [r7, #12]
 8013dc4:	f043 0308 	orr.w	r3, r3, #8
 8013dc8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013dce:	2b08      	cmp	r3, #8
 8013dd0:	d10b      	bne.n	8013dea <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8013dd2:	687b      	ldr	r3, [r7, #4]
 8013dd4:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 8013dd6:	2b03      	cmp	r3, #3
 8013dd8:	d003      	beq.n	8013de2 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 8013dda:	687b      	ldr	r3, [r7, #4]
 8013ddc:	685b      	ldr	r3, [r3, #4]
 8013dde:	2b01      	cmp	r3, #1
 8013de0:	d103      	bne.n	8013dea <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8013de2:	68fb      	ldr	r3, [r7, #12]
 8013de4:	f043 0310 	orr.w	r3, r3, #16
 8013de8:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8013dea:	687b      	ldr	r3, [r7, #4]
 8013dec:	685b      	ldr	r3, [r3, #4]
 8013dee:	2b03      	cmp	r3, #3
 8013df0:	d003      	beq.n	8013dfa <SAI_InterruptFlag+0x4e>
 8013df2:	687b      	ldr	r3, [r7, #4]
 8013df4:	685b      	ldr	r3, [r3, #4]
 8013df6:	2b02      	cmp	r3, #2
 8013df8:	d104      	bne.n	8013e04 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 8013dfa:	68fb      	ldr	r3, [r7, #12]
 8013dfc:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8013e00:	60fb      	str	r3, [r7, #12]
 8013e02:	e003      	b.n	8013e0c <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8013e04:	68fb      	ldr	r3, [r7, #12]
 8013e06:	f043 0304 	orr.w	r3, r3, #4
 8013e0a:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8013e0c:	68fb      	ldr	r3, [r7, #12]
}
 8013e0e:	4618      	mov	r0, r3
 8013e10:	3714      	adds	r7, #20
 8013e12:	46bd      	mov	sp, r7
 8013e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e18:	4770      	bx	lr
	...

08013e1c <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8013e1c:	b480      	push	{r7}
 8013e1e:	b085      	sub	sp, #20
 8013e20:	af00      	add	r7, sp, #0
 8013e22:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8013e24:	4b18      	ldr	r3, [pc, #96]	@ (8013e88 <SAI_Disable+0x6c>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	4a18      	ldr	r2, [pc, #96]	@ (8013e8c <SAI_Disable+0x70>)
 8013e2a:	fba2 2303 	umull	r2, r3, r2, r3
 8013e2e:	0b1b      	lsrs	r3, r3, #12
 8013e30:	009b      	lsls	r3, r3, #2
 8013e32:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8013e34:	2300      	movs	r3, #0
 8013e36:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	681b      	ldr	r3, [r3, #0]
 8013e3c:	681a      	ldr	r2, [r3, #0]
 8013e3e:	687b      	ldr	r3, [r7, #4]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8013e46:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8013e48:	68fb      	ldr	r3, [r7, #12]
 8013e4a:	2b00      	cmp	r3, #0
 8013e4c:	d10a      	bne.n	8013e64 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8013e4e:	687b      	ldr	r3, [r7, #4]
 8013e50:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013e54:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8013e58:	687b      	ldr	r3, [r7, #4]
 8013e5a:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8013e5e:	2303      	movs	r3, #3
 8013e60:	72fb      	strb	r3, [r7, #11]
      break;
 8013e62:	e009      	b.n	8013e78 <SAI_Disable+0x5c>
    }
    count--;
 8013e64:	68fb      	ldr	r3, [r7, #12]
 8013e66:	3b01      	subs	r3, #1
 8013e68:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8013e6a:	687b      	ldr	r3, [r7, #4]
 8013e6c:	681b      	ldr	r3, [r3, #0]
 8013e6e:	681b      	ldr	r3, [r3, #0]
 8013e70:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013e74:	2b00      	cmp	r3, #0
 8013e76:	d1e7      	bne.n	8013e48 <SAI_Disable+0x2c>

  return status;
 8013e78:	7afb      	ldrb	r3, [r7, #11]
}
 8013e7a:	4618      	mov	r0, r3
 8013e7c:	3714      	adds	r7, #20
 8013e7e:	46bd      	mov	sp, r7
 8013e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e84:	4770      	bx	lr
 8013e86:	bf00      	nop
 8013e88:	24000400 	.word	0x24000400
 8013e8c:	95cbec1b 	.word	0x95cbec1b

08013e90 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 8013e90:	b580      	push	{r7, lr}
 8013e92:	b084      	sub	sp, #16
 8013e94:	af00      	add	r7, sp, #0
 8013e96:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013e98:	687b      	ldr	r3, [r7, #4]
 8013e9a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013e9c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	69db      	ldr	r3, [r3, #28]
 8013ea2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013ea6:	d01c      	beq.n	8013ee2 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 8013ea8:	68fb      	ldr	r3, [r7, #12]
 8013eaa:	2200      	movs	r2, #0
 8013eac:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	681a      	ldr	r2, [r3, #0]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8013ebe:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013ec0:	2100      	movs	r1, #0
 8013ec2:	68f8      	ldr	r0, [r7, #12]
 8013ec4:	f7ff ff72 	bl	8013dac <SAI_InterruptFlag>
 8013ec8:	4603      	mov	r3, r0
 8013eca:	43d9      	mvns	r1, r3
 8013ecc:	68fb      	ldr	r3, [r7, #12]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	691a      	ldr	r2, [r3, #16]
 8013ed2:	68fb      	ldr	r3, [r7, #12]
 8013ed4:	681b      	ldr	r3, [r3, #0]
 8013ed6:	400a      	ands	r2, r1
 8013ed8:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8013eda:	68fb      	ldr	r3, [r7, #12]
 8013edc:	2201      	movs	r2, #1
 8013ede:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8013ee2:	68f8      	ldr	r0, [r7, #12]
 8013ee4:	f7f1 ffec 	bl	8005ec0 <HAL_SAI_TxCpltCallback>
#endif
}
 8013ee8:	bf00      	nop
 8013eea:	3710      	adds	r7, #16
 8013eec:	46bd      	mov	sp, r7
 8013eee:	bd80      	pop	{r7, pc}

08013ef0 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013ef0:	b580      	push	{r7, lr}
 8013ef2:	b084      	sub	sp, #16
 8013ef4:	af00      	add	r7, sp, #0
 8013ef6:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013ef8:	687b      	ldr	r3, [r7, #4]
 8013efa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013efc:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8013efe:	68f8      	ldr	r0, [r7, #12]
 8013f00:	f7f1 ffe9 	bl	8005ed6 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8013f04:	bf00      	nop
 8013f06:	3710      	adds	r7, #16
 8013f08:	46bd      	mov	sp, r7
 8013f0a:	bd80      	pop	{r7, pc}

08013f0c <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8013f0c:	b580      	push	{r7, lr}
 8013f0e:	b084      	sub	sp, #16
 8013f10:	af00      	add	r7, sp, #0
 8013f12:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013f14:	687b      	ldr	r3, [r7, #4]
 8013f16:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f18:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 8013f1a:	687b      	ldr	r3, [r7, #4]
 8013f1c:	69db      	ldr	r3, [r3, #28]
 8013f1e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013f22:	d01c      	beq.n	8013f5e <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8013f24:	68fb      	ldr	r3, [r7, #12]
 8013f26:	681b      	ldr	r3, [r3, #0]
 8013f28:	681a      	ldr	r2, [r3, #0]
 8013f2a:	68fb      	ldr	r3, [r7, #12]
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8013f32:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8013f34:	68fb      	ldr	r3, [r7, #12]
 8013f36:	2200      	movs	r2, #0
 8013f38:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8013f3c:	2100      	movs	r1, #0
 8013f3e:	68f8      	ldr	r0, [r7, #12]
 8013f40:	f7ff ff34 	bl	8013dac <SAI_InterruptFlag>
 8013f44:	4603      	mov	r3, r0
 8013f46:	43d9      	mvns	r1, r3
 8013f48:	68fb      	ldr	r3, [r7, #12]
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	691a      	ldr	r2, [r3, #16]
 8013f4e:	68fb      	ldr	r3, [r7, #12]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	400a      	ands	r2, r1
 8013f54:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 8013f56:	68fb      	ldr	r3, [r7, #12]
 8013f58:	2201      	movs	r2, #1
 8013f5a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8013f5e:	68f8      	ldr	r0, [r7, #12]
 8013f60:	f7f2 fc80 	bl	8006864 <HAL_SAI_RxCpltCallback>
#endif
}
 8013f64:	bf00      	nop
 8013f66:	3710      	adds	r7, #16
 8013f68:	46bd      	mov	sp, r7
 8013f6a:	bd80      	pop	{r7, pc}

08013f6c <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8013f6c:	b580      	push	{r7, lr}
 8013f6e:	b084      	sub	sp, #16
 8013f70:	af00      	add	r7, sp, #0
 8013f72:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013f74:	687b      	ldr	r3, [r7, #4]
 8013f76:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f78:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 8013f7a:	68f8      	ldr	r0, [r7, #12]
 8013f7c:	f7f2 fc5c 	bl	8006838 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 8013f80:	bf00      	nop
 8013f82:	3710      	adds	r7, #16
 8013f84:	46bd      	mov	sp, r7
 8013f86:	bd80      	pop	{r7, pc}

08013f88 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 8013f88:	b580      	push	{r7, lr}
 8013f8a:	b084      	sub	sp, #16
 8013f8c:	af00      	add	r7, sp, #0
 8013f8e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8013f90:	687b      	ldr	r3, [r7, #4]
 8013f92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8013f94:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7f7 ff9c 	bl	800bed4 <HAL_DMA_GetError>
 8013f9c:	4603      	mov	r3, r0
 8013f9e:	2b02      	cmp	r3, #2
 8013fa0:	d01d      	beq.n	8013fde <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 8013fa2:	68fb      	ldr	r3, [r7, #12]
 8013fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8013fa8:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8013fac:	68fb      	ldr	r3, [r7, #12]
 8013fae:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 8013fb2:	68fb      	ldr	r3, [r7, #12]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	681a      	ldr	r2, [r3, #0]
 8013fb8:	68fb      	ldr	r3, [r7, #12]
 8013fba:	681b      	ldr	r3, [r3, #0]
 8013fbc:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8013fc0:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 8013fc2:	68f8      	ldr	r0, [r7, #12]
 8013fc4:	f7ff ff2a 	bl	8013e1c <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 8013fc8:	68fb      	ldr	r3, [r7, #12]
 8013fca:	2201      	movs	r2, #1
 8013fcc:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 8013fd0:	68fb      	ldr	r3, [r7, #12]
 8013fd2:	2200      	movs	r2, #0
 8013fd4:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 8013fd8:	68f8      	ldr	r0, [r7, #12]
 8013fda:	f7f1 ff87 	bl	8005eec <HAL_SAI_ErrorCallback>
#endif
  }
}
 8013fde:	bf00      	nop
 8013fe0:	3710      	adds	r7, #16
 8013fe2:	46bd      	mov	sp, r7
 8013fe4:	bd80      	pop	{r7, pc}
	...

08013fe8 <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 8013fe8:	b580      	push	{r7, lr}
 8013fea:	b084      	sub	sp, #16
 8013fec:	af00      	add	r7, sp, #0
 8013fee:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 8013ff0:	687b      	ldr	r3, [r7, #4]
 8013ff2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013ff4:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 8013ff6:	687b      	ldr	r3, [r7, #4]
 8013ff8:	681b      	ldr	r3, [r3, #0]
 8013ffa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013ffc:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014000:	2b00      	cmp	r3, #0
 8014002:	d008      	beq.n	8014016 <HAL_SD_IRQHandler+0x2e>
 8014004:	68fb      	ldr	r3, [r7, #12]
 8014006:	f003 0308 	and.w	r3, r3, #8
 801400a:	2b00      	cmp	r3, #0
 801400c:	d003      	beq.n	8014016 <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801400e:	6878      	ldr	r0, [r7, #4]
 8014010:	f000 f9ac 	bl	801436c <SD_Read_IT>
 8014014:	e19a      	b.n	801434c <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 8014016:	687b      	ldr	r3, [r7, #4]
 8014018:	681b      	ldr	r3, [r3, #0]
 801401a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801401c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014020:	2b00      	cmp	r3, #0
 8014022:	f000 80ac 	beq.w	801417e <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 8014026:	687b      	ldr	r3, [r7, #4]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801402e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	681b      	ldr	r3, [r3, #0]
 8014034:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 8014036:	687b      	ldr	r3, [r7, #4]
 8014038:	681a      	ldr	r2, [r3, #0]
 801403a:	4b59      	ldr	r3, [pc, #356]	@ (80141a0 <HAL_SD_IRQHandler+0x1b8>)
 801403c:	400b      	ands	r3, r1
 801403e:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 8014040:	687b      	ldr	r3, [r7, #4]
 8014042:	681b      	ldr	r3, [r3, #0]
 8014044:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801404e:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	68da      	ldr	r2, [r3, #12]
 8014056:	687b      	ldr	r3, [r7, #4]
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801405e:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 8014060:	68fb      	ldr	r3, [r7, #12]
 8014062:	f003 0308 	and.w	r3, r3, #8
 8014066:	2b00      	cmp	r3, #0
 8014068:	d038      	beq.n	80140dc <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801406a:	68fb      	ldr	r3, [r7, #12]
 801406c:	f003 0302 	and.w	r3, r3, #2
 8014070:	2b00      	cmp	r3, #0
 8014072:	d104      	bne.n	801407e <HAL_SD_IRQHandler+0x96>
 8014074:	68fb      	ldr	r3, [r7, #12]
 8014076:	f003 0320 	and.w	r3, r3, #32
 801407a:	2b00      	cmp	r3, #0
 801407c:	d011      	beq.n	80140a2 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801407e:	687b      	ldr	r3, [r7, #4]
 8014080:	681b      	ldr	r3, [r3, #0]
 8014082:	4618      	mov	r0, r3
 8014084:	f002 f8f2 	bl	801626c <SDMMC_CmdStopTransfer>
 8014088:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d008      	beq.n	80140a2 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8014094:	68bb      	ldr	r3, [r7, #8]
 8014096:	431a      	orrs	r2, r3
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801409c:	6878      	ldr	r0, [r7, #4]
 801409e:	f000 f95b 	bl	8014358 <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 80140a2:	687b      	ldr	r3, [r7, #4]
 80140a4:	681b      	ldr	r3, [r3, #0]
 80140a6:	4a3f      	ldr	r2, [pc, #252]	@ (80141a4 <HAL_SD_IRQHandler+0x1bc>)
 80140a8:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	2201      	movs	r2, #1
 80140ae:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80140b2:	687b      	ldr	r3, [r7, #4]
 80140b4:	2200      	movs	r2, #0
 80140b6:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 80140b8:	68fb      	ldr	r3, [r7, #12]
 80140ba:	f003 0301 	and.w	r3, r3, #1
 80140be:	2b00      	cmp	r3, #0
 80140c0:	d104      	bne.n	80140cc <HAL_SD_IRQHandler+0xe4>
 80140c2:	68fb      	ldr	r3, [r7, #12]
 80140c4:	f003 0302 	and.w	r3, r3, #2
 80140c8:	2b00      	cmp	r3, #0
 80140ca:	d003      	beq.n	80140d4 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 80140cc:	6878      	ldr	r0, [r7, #4]
 80140ce:	f7f4 fdb5 	bl	8008c3c <HAL_SD_RxCpltCallback>
 80140d2:	e13b      	b.n	801434c <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 80140d4:	6878      	ldr	r0, [r7, #4]
 80140d6:	f7f4 fd9d 	bl	8008c14 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80140da:	e137      	b.n	801434c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80140dc:	68fb      	ldr	r3, [r7, #12]
 80140de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80140e2:	2b00      	cmp	r3, #0
 80140e4:	f000 8132 	beq.w	801434c <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	681b      	ldr	r3, [r3, #0]
 80140ec:	2200      	movs	r2, #0
 80140ee:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 80140f0:	687b      	ldr	r3, [r7, #4]
 80140f2:	681b      	ldr	r3, [r3, #0]
 80140f4:	2200      	movs	r2, #0
 80140f6:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2200      	movs	r2, #0
 80140fe:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014100:	68fb      	ldr	r3, [r7, #12]
 8014102:	f003 0302 	and.w	r3, r3, #2
 8014106:	2b00      	cmp	r3, #0
 8014108:	d104      	bne.n	8014114 <HAL_SD_IRQHandler+0x12c>
 801410a:	68fb      	ldr	r3, [r7, #12]
 801410c:	f003 0320 	and.w	r3, r3, #32
 8014110:	2b00      	cmp	r3, #0
 8014112:	d011      	beq.n	8014138 <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	681b      	ldr	r3, [r3, #0]
 8014118:	4618      	mov	r0, r3
 801411a:	f002 f8a7 	bl	801626c <SDMMC_CmdStopTransfer>
 801411e:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 8014120:	68bb      	ldr	r3, [r7, #8]
 8014122:	2b00      	cmp	r3, #0
 8014124:	d008      	beq.n	8014138 <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801412a:	68bb      	ldr	r3, [r7, #8]
 801412c:	431a      	orrs	r2, r3
 801412e:	687b      	ldr	r3, [r7, #4]
 8014130:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 8014132:	6878      	ldr	r0, [r7, #4]
 8014134:	f000 f910 	bl	8014358 <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 8014138:	687b      	ldr	r3, [r7, #4]
 801413a:	2201      	movs	r2, #1
 801413c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 8014140:	687b      	ldr	r3, [r7, #4]
 8014142:	2200      	movs	r2, #0
 8014144:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	f003 0310 	and.w	r3, r3, #16
 801414c:	2b00      	cmp	r3, #0
 801414e:	d104      	bne.n	801415a <HAL_SD_IRQHandler+0x172>
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	f003 0320 	and.w	r3, r3, #32
 8014156:	2b00      	cmp	r3, #0
 8014158:	d002      	beq.n	8014160 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801415a:	6878      	ldr	r0, [r7, #4]
 801415c:	f7f4 fd5a 	bl	8008c14 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	f003 0301 	and.w	r3, r3, #1
 8014166:	2b00      	cmp	r3, #0
 8014168:	d105      	bne.n	8014176 <HAL_SD_IRQHandler+0x18e>
 801416a:	68fb      	ldr	r3, [r7, #12]
 801416c:	f003 0302 	and.w	r3, r3, #2
 8014170:	2b00      	cmp	r3, #0
 8014172:	f000 80eb 	beq.w	801434c <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 8014176:	6878      	ldr	r0, [r7, #4]
 8014178:	f7f4 fd60 	bl	8008c3c <HAL_SD_RxCpltCallback>
}
 801417c:	e0e6      	b.n	801434c <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801417e:	687b      	ldr	r3, [r7, #4]
 8014180:	681b      	ldr	r3, [r3, #0]
 8014182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014184:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014188:	2b00      	cmp	r3, #0
 801418a:	d00d      	beq.n	80141a8 <HAL_SD_IRQHandler+0x1c0>
 801418c:	68fb      	ldr	r3, [r7, #12]
 801418e:	f003 0308 	and.w	r3, r3, #8
 8014192:	2b00      	cmp	r3, #0
 8014194:	d008      	beq.n	80141a8 <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 8014196:	6878      	ldr	r0, [r7, #4]
 8014198:	f000 f92e 	bl	80143f8 <SD_Write_IT>
 801419c:	e0d6      	b.n	801434c <HAL_SD_IRQHandler+0x364>
 801419e:	bf00      	nop
 80141a0:	ffff3ec5 	.word	0xffff3ec5
 80141a4:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 80141a8:	687b      	ldr	r3, [r7, #4]
 80141aa:	681b      	ldr	r3, [r3, #0]
 80141ac:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141ae:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 80141b2:	2b00      	cmp	r3, #0
 80141b4:	f000 809d 	beq.w	80142f2 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141be:	f003 0302 	and.w	r3, r3, #2
 80141c2:	2b00      	cmp	r3, #0
 80141c4:	d005      	beq.n	80141d2 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 80141c6:	687b      	ldr	r3, [r7, #4]
 80141c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141ca:	f043 0202 	orr.w	r2, r3, #2
 80141ce:	687b      	ldr	r3, [r7, #4]
 80141d0:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 80141d2:	687b      	ldr	r3, [r7, #4]
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141d8:	f003 0308 	and.w	r3, r3, #8
 80141dc:	2b00      	cmp	r3, #0
 80141de:	d005      	beq.n	80141ec <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141e4:	f043 0208 	orr.w	r2, r3, #8
 80141e8:	687b      	ldr	r3, [r7, #4]
 80141ea:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 80141ec:	687b      	ldr	r3, [r7, #4]
 80141ee:	681b      	ldr	r3, [r3, #0]
 80141f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141f2:	f003 0320 	and.w	r3, r3, #32
 80141f6:	2b00      	cmp	r3, #0
 80141f8:	d005      	beq.n	8014206 <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 80141fa:	687b      	ldr	r3, [r7, #4]
 80141fc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80141fe:	f043 0220 	orr.w	r2, r3, #32
 8014202:	687b      	ldr	r3, [r7, #4]
 8014204:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 8014206:	687b      	ldr	r3, [r7, #4]
 8014208:	681b      	ldr	r3, [r3, #0]
 801420a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801420c:	f003 0310 	and.w	r3, r3, #16
 8014210:	2b00      	cmp	r3, #0
 8014212:	d005      	beq.n	8014220 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 8014214:	687b      	ldr	r3, [r7, #4]
 8014216:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014218:	f043 0210 	orr.w	r2, r3, #16
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8014220:	687b      	ldr	r3, [r7, #4]
 8014222:	681b      	ldr	r3, [r3, #0]
 8014224:	4a4b      	ldr	r2, [pc, #300]	@ (8014354 <HAL_SD_IRQHandler+0x36c>)
 8014226:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 8014228:	687b      	ldr	r3, [r7, #4]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801422e:	687b      	ldr	r3, [r7, #4]
 8014230:	681b      	ldr	r3, [r3, #0]
 8014232:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 8014236:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 8014238:	687b      	ldr	r3, [r7, #4]
 801423a:	681b      	ldr	r3, [r3, #0]
 801423c:	68da      	ldr	r2, [r3, #12]
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	681b      	ldr	r3, [r3, #0]
 8014242:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8014246:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 8014248:	687b      	ldr	r3, [r7, #4]
 801424a:	681b      	ldr	r3, [r3, #0]
 801424c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	681b      	ldr	r3, [r3, #0]
 8014252:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8014256:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	681b      	ldr	r3, [r3, #0]
 801425c:	68da      	ldr	r2, [r3, #12]
 801425e:	687b      	ldr	r3, [r7, #4]
 8014260:	681b      	ldr	r3, [r3, #0]
 8014262:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8014266:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 8014268:	687b      	ldr	r3, [r7, #4]
 801426a:	681b      	ldr	r3, [r3, #0]
 801426c:	4618      	mov	r0, r3
 801426e:	f001 fffd 	bl	801626c <SDMMC_CmdStopTransfer>
 8014272:	4602      	mov	r2, r0
 8014274:	687b      	ldr	r3, [r7, #4]
 8014276:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014278:	431a      	orrs	r2, r3
 801427a:	687b      	ldr	r3, [r7, #4]
 801427c:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801427e:	687b      	ldr	r3, [r7, #4]
 8014280:	681b      	ldr	r3, [r3, #0]
 8014282:	68da      	ldr	r2, [r3, #12]
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801428c:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801428e:	687b      	ldr	r3, [r7, #4]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8014296:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 8014298:	68fb      	ldr	r3, [r7, #12]
 801429a:	f003 0308 	and.w	r3, r3, #8
 801429e:	2b00      	cmp	r3, #0
 80142a0:	d00a      	beq.n	80142b8 <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 80142a2:	687b      	ldr	r3, [r7, #4]
 80142a4:	2201      	movs	r2, #1
 80142a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 80142aa:	687b      	ldr	r3, [r7, #4]
 80142ac:	2200      	movs	r2, #0
 80142ae:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 80142b0:	6878      	ldr	r0, [r7, #4]
 80142b2:	f000 f851 	bl	8014358 <HAL_SD_ErrorCallback>
}
 80142b6:	e049      	b.n	801434c <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 80142b8:	68fb      	ldr	r3, [r7, #12]
 80142ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d044      	beq.n	801434c <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d040      	beq.n	801434c <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	681b      	ldr	r3, [r3, #0]
 80142ce:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80142d0:	687b      	ldr	r3, [r7, #4]
 80142d2:	681b      	ldr	r3, [r3, #0]
 80142d4:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 80142d8:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 80142da:	687b      	ldr	r3, [r7, #4]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2200      	movs	r2, #0
 80142e0:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 80142e2:	687b      	ldr	r3, [r7, #4]
 80142e4:	2201      	movs	r2, #1
 80142e6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 80142ea:	6878      	ldr	r0, [r7, #4]
 80142ec:	f000 f834 	bl	8014358 <HAL_SD_ErrorCallback>
}
 80142f0:	e02c      	b.n	801434c <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 80142f2:	687b      	ldr	r3, [r7, #4]
 80142f4:	681b      	ldr	r3, [r3, #0]
 80142f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80142f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80142fc:	2b00      	cmp	r3, #0
 80142fe:	d025      	beq.n	801434c <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 8014300:	687b      	ldr	r3, [r7, #4]
 8014302:	681b      	ldr	r3, [r3, #0]
 8014304:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8014308:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	681b      	ldr	r3, [r3, #0]
 801430e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014310:	f003 0304 	and.w	r3, r3, #4
 8014314:	2b00      	cmp	r3, #0
 8014316:	d10c      	bne.n	8014332 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	f003 0320 	and.w	r3, r3, #32
 801431e:	2b00      	cmp	r3, #0
 8014320:	d003      	beq.n	801432a <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 8014322:	6878      	ldr	r0, [r7, #4]
 8014324:	f000 f8d0 	bl	80144c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 8014328:	e010      	b.n	801434c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801432a:	6878      	ldr	r0, [r7, #4]
 801432c:	f000 f8b8 	bl	80144a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 8014330:	e00c      	b.n	801434c <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 8014332:	68fb      	ldr	r3, [r7, #12]
 8014334:	f003 0320 	and.w	r3, r3, #32
 8014338:	2b00      	cmp	r3, #0
 801433a:	d003      	beq.n	8014344 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801433c:	6878      	ldr	r0, [r7, #4]
 801433e:	f000 f8b9 	bl	80144b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 8014342:	e003      	b.n	801434c <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 8014344:	6878      	ldr	r0, [r7, #4]
 8014346:	f000 f8a1 	bl	801448c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801434a:	e7ff      	b.n	801434c <HAL_SD_IRQHandler+0x364>
 801434c:	bf00      	nop
 801434e:	3710      	adds	r7, #16
 8014350:	46bd      	mov	sp, r7
 8014352:	bd80      	pop	{r7, pc}
 8014354:	18000f3a 	.word	0x18000f3a

08014358 <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 8014358:	b480      	push	{r7}
 801435a:	b083      	sub	sp, #12
 801435c:	af00      	add	r7, sp, #0
 801435e:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 8014360:	bf00      	nop
 8014362:	370c      	adds	r7, #12
 8014364:	46bd      	mov	sp, r7
 8014366:	f85d 7b04 	ldr.w	r7, [sp], #4
 801436a:	4770      	bx	lr

0801436c <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 801436c:	b580      	push	{r7, lr}
 801436e:	b086      	sub	sp, #24
 8014370:	af00      	add	r7, sp, #0
 8014372:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8014374:	687b      	ldr	r3, [r7, #4]
 8014376:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014378:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 801437a:	687b      	ldr	r3, [r7, #4]
 801437c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801437e:	2b1f      	cmp	r3, #31
 8014380:	d936      	bls.n	80143f0 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8014382:	2300      	movs	r3, #0
 8014384:	617b      	str	r3, [r7, #20]
 8014386:	e027      	b.n	80143d8 <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8014388:	687b      	ldr	r3, [r7, #4]
 801438a:	681b      	ldr	r3, [r3, #0]
 801438c:	4618      	mov	r0, r3
 801438e:	f001 ff05 	bl	801619c <SDMMC_ReadFIFO>
 8014392:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8014394:	68fb      	ldr	r3, [r7, #12]
 8014396:	b2da      	uxtb	r2, r3
 8014398:	693b      	ldr	r3, [r7, #16]
 801439a:	701a      	strb	r2, [r3, #0]
      tmp++;
 801439c:	693b      	ldr	r3, [r7, #16]
 801439e:	3301      	adds	r3, #1
 80143a0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 80143a2:	68fb      	ldr	r3, [r7, #12]
 80143a4:	0a1b      	lsrs	r3, r3, #8
 80143a6:	b2da      	uxtb	r2, r3
 80143a8:	693b      	ldr	r3, [r7, #16]
 80143aa:	701a      	strb	r2, [r3, #0]
      tmp++;
 80143ac:	693b      	ldr	r3, [r7, #16]
 80143ae:	3301      	adds	r3, #1
 80143b0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 80143b2:	68fb      	ldr	r3, [r7, #12]
 80143b4:	0c1b      	lsrs	r3, r3, #16
 80143b6:	b2da      	uxtb	r2, r3
 80143b8:	693b      	ldr	r3, [r7, #16]
 80143ba:	701a      	strb	r2, [r3, #0]
      tmp++;
 80143bc:	693b      	ldr	r3, [r7, #16]
 80143be:	3301      	adds	r3, #1
 80143c0:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 80143c2:	68fb      	ldr	r3, [r7, #12]
 80143c4:	0e1b      	lsrs	r3, r3, #24
 80143c6:	b2da      	uxtb	r2, r3
 80143c8:	693b      	ldr	r3, [r7, #16]
 80143ca:	701a      	strb	r2, [r3, #0]
      tmp++;
 80143cc:	693b      	ldr	r3, [r7, #16]
 80143ce:	3301      	adds	r3, #1
 80143d0:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 80143d2:	697b      	ldr	r3, [r7, #20]
 80143d4:	3301      	adds	r3, #1
 80143d6:	617b      	str	r3, [r7, #20]
 80143d8:	697b      	ldr	r3, [r7, #20]
 80143da:	2b07      	cmp	r3, #7
 80143dc:	d9d4      	bls.n	8014388 <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 80143de:	687b      	ldr	r3, [r7, #4]
 80143e0:	693a      	ldr	r2, [r7, #16]
 80143e2:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 80143e4:	687b      	ldr	r3, [r7, #4]
 80143e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e8:	f1a3 0220 	sub.w	r2, r3, #32
 80143ec:	687b      	ldr	r3, [r7, #4]
 80143ee:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 80143f0:	bf00      	nop
 80143f2:	3718      	adds	r7, #24
 80143f4:	46bd      	mov	sp, r7
 80143f6:	bd80      	pop	{r7, pc}

080143f8 <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 80143f8:	b580      	push	{r7, lr}
 80143fa:	b086      	sub	sp, #24
 80143fc:	af00      	add	r7, sp, #0
 80143fe:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8014400:	687b      	ldr	r3, [r7, #4]
 8014402:	69db      	ldr	r3, [r3, #28]
 8014404:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 8014406:	687b      	ldr	r3, [r7, #4]
 8014408:	6a1b      	ldr	r3, [r3, #32]
 801440a:	2b1f      	cmp	r3, #31
 801440c:	d93a      	bls.n	8014484 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801440e:	2300      	movs	r3, #0
 8014410:	617b      	str	r3, [r7, #20]
 8014412:	e02b      	b.n	801446c <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8014414:	693b      	ldr	r3, [r7, #16]
 8014416:	781b      	ldrb	r3, [r3, #0]
 8014418:	60fb      	str	r3, [r7, #12]
      tmp++;
 801441a:	693b      	ldr	r3, [r7, #16]
 801441c:	3301      	adds	r3, #1
 801441e:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8014420:	693b      	ldr	r3, [r7, #16]
 8014422:	781b      	ldrb	r3, [r3, #0]
 8014424:	021a      	lsls	r2, r3, #8
 8014426:	68fb      	ldr	r3, [r7, #12]
 8014428:	4313      	orrs	r3, r2
 801442a:	60fb      	str	r3, [r7, #12]
      tmp++;
 801442c:	693b      	ldr	r3, [r7, #16]
 801442e:	3301      	adds	r3, #1
 8014430:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8014432:	693b      	ldr	r3, [r7, #16]
 8014434:	781b      	ldrb	r3, [r3, #0]
 8014436:	041a      	lsls	r2, r3, #16
 8014438:	68fb      	ldr	r3, [r7, #12]
 801443a:	4313      	orrs	r3, r2
 801443c:	60fb      	str	r3, [r7, #12]
      tmp++;
 801443e:	693b      	ldr	r3, [r7, #16]
 8014440:	3301      	adds	r3, #1
 8014442:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8014444:	693b      	ldr	r3, [r7, #16]
 8014446:	781b      	ldrb	r3, [r3, #0]
 8014448:	061a      	lsls	r2, r3, #24
 801444a:	68fb      	ldr	r3, [r7, #12]
 801444c:	4313      	orrs	r3, r2
 801444e:	60fb      	str	r3, [r7, #12]
      tmp++;
 8014450:	693b      	ldr	r3, [r7, #16]
 8014452:	3301      	adds	r3, #1
 8014454:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8014456:	687b      	ldr	r3, [r7, #4]
 8014458:	681b      	ldr	r3, [r3, #0]
 801445a:	f107 020c 	add.w	r2, r7, #12
 801445e:	4611      	mov	r1, r2
 8014460:	4618      	mov	r0, r3
 8014462:	f001 fea8 	bl	80161b6 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8014466:	697b      	ldr	r3, [r7, #20]
 8014468:	3301      	adds	r3, #1
 801446a:	617b      	str	r3, [r7, #20]
 801446c:	697b      	ldr	r3, [r7, #20]
 801446e:	2b07      	cmp	r3, #7
 8014470:	d9d0      	bls.n	8014414 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8014472:	687b      	ldr	r3, [r7, #4]
 8014474:	693a      	ldr	r2, [r7, #16]
 8014476:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 8014478:	687b      	ldr	r3, [r7, #4]
 801447a:	6a1b      	ldr	r3, [r3, #32]
 801447c:	f1a3 0220 	sub.w	r2, r3, #32
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	621a      	str	r2, [r3, #32]
  }
}
 8014484:	bf00      	nop
 8014486:	3718      	adds	r7, #24
 8014488:	46bd      	mov	sp, r7
 801448a:	bd80      	pop	{r7, pc}

0801448c <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 801448c:	b480      	push	{r7}
 801448e:	b083      	sub	sp, #12
 8014490:	af00      	add	r7, sp, #0
 8014492:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 8014494:	bf00      	nop
 8014496:	370c      	adds	r7, #12
 8014498:	46bd      	mov	sp, r7
 801449a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801449e:	4770      	bx	lr

080144a0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80144a0:	b480      	push	{r7}
 80144a2:	b083      	sub	sp, #12
 80144a4:	af00      	add	r7, sp, #0
 80144a6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80144a8:	bf00      	nop
 80144aa:	370c      	adds	r7, #12
 80144ac:	46bd      	mov	sp, r7
 80144ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144b2:	4770      	bx	lr

080144b4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80144b4:	b480      	push	{r7}
 80144b6:	b083      	sub	sp, #12
 80144b8:	af00      	add	r7, sp, #0
 80144ba:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80144bc:	bf00      	nop
 80144be:	370c      	adds	r7, #12
 80144c0:	46bd      	mov	sp, r7
 80144c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144c6:	4770      	bx	lr

080144c8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80144c8:	b480      	push	{r7}
 80144ca:	b083      	sub	sp, #12
 80144cc:	af00      	add	r7, sp, #0
 80144ce:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80144d0:	bf00      	nop
 80144d2:	370c      	adds	r7, #12
 80144d4:	46bd      	mov	sp, r7
 80144d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80144da:	4770      	bx	lr

080144dc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80144dc:	b580      	push	{r7, lr}
 80144de:	b082      	sub	sp, #8
 80144e0:	af00      	add	r7, sp, #0
 80144e2:	6078      	str	r0, [r7, #4]
 80144e4:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	2b00      	cmp	r3, #0
 80144ea:	d101      	bne.n	80144f0 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 80144ec:	2301      	movs	r3, #1
 80144ee:	e02b      	b.n	8014548 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80144f6:	b2db      	uxtb	r3, r3
 80144f8:	2b00      	cmp	r3, #0
 80144fa:	d106      	bne.n	801450a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 80144fc:	687b      	ldr	r3, [r7, #4]
 80144fe:	2200      	movs	r2, #0
 8014500:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8014504:	6878      	ldr	r0, [r7, #4]
 8014506:	f000 f825 	bl	8014554 <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 801450a:	687b      	ldr	r3, [r7, #4]
 801450c:	2202      	movs	r2, #2
 801450e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8014512:	687b      	ldr	r3, [r7, #4]
 8014514:	681a      	ldr	r2, [r3, #0]
 8014516:	687b      	ldr	r3, [r7, #4]
 8014518:	3304      	adds	r3, #4
 801451a:	4619      	mov	r1, r3
 801451c:	4610      	mov	r0, r2
 801451e:	f001 fd3b 	bl	8015f98 <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	6818      	ldr	r0, [r3, #0]
 8014526:	687b      	ldr	r3, [r7, #4]
 8014528:	685b      	ldr	r3, [r3, #4]
 801452a:	461a      	mov	r2, r3
 801452c:	6839      	ldr	r1, [r7, #0]
 801452e:	f001 fd8f 	bl	8016050 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8014532:	4b07      	ldr	r3, [pc, #28]	@ (8014550 <HAL_SDRAM_Init+0x74>)
 8014534:	681b      	ldr	r3, [r3, #0]
 8014536:	4a06      	ldr	r2, [pc, #24]	@ (8014550 <HAL_SDRAM_Init+0x74>)
 8014538:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 801453c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 801453e:	687b      	ldr	r3, [r7, #4]
 8014540:	2201      	movs	r2, #1
 8014542:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8014546:	2300      	movs	r3, #0
}
 8014548:	4618      	mov	r0, r3
 801454a:	3708      	adds	r7, #8
 801454c:	46bd      	mov	sp, r7
 801454e:	bd80      	pop	{r7, pc}
 8014550:	52004000 	.word	0x52004000

08014554 <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 8014554:	b480      	push	{r7}
 8014556:	b083      	sub	sp, #12
 8014558:	af00      	add	r7, sp, #0
 801455a:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 801455c:	bf00      	nop
 801455e:	370c      	adds	r7, #12
 8014560:	46bd      	mov	sp, r7
 8014562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014566:	4770      	bx	lr

08014568 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8014568:	b580      	push	{r7, lr}
 801456a:	b086      	sub	sp, #24
 801456c:	af00      	add	r7, sp, #0
 801456e:	60f8      	str	r0, [r7, #12]
 8014570:	60b9      	str	r1, [r7, #8]
 8014572:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8014574:	68fb      	ldr	r3, [r7, #12]
 8014576:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 801457a:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 801457c:	7dfb      	ldrb	r3, [r7, #23]
 801457e:	2b02      	cmp	r3, #2
 8014580:	d101      	bne.n	8014586 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 8014582:	2302      	movs	r3, #2
 8014584:	e021      	b.n	80145ca <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8014586:	7dfb      	ldrb	r3, [r7, #23]
 8014588:	2b01      	cmp	r3, #1
 801458a:	d002      	beq.n	8014592 <HAL_SDRAM_SendCommand+0x2a>
 801458c:	7dfb      	ldrb	r3, [r7, #23]
 801458e:	2b05      	cmp	r3, #5
 8014590:	d118      	bne.n	80145c4 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 8014592:	68fb      	ldr	r3, [r7, #12]
 8014594:	2202      	movs	r2, #2
 8014596:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 801459a:	68fb      	ldr	r3, [r7, #12]
 801459c:	681b      	ldr	r3, [r3, #0]
 801459e:	687a      	ldr	r2, [r7, #4]
 80145a0:	68b9      	ldr	r1, [r7, #8]
 80145a2:	4618      	mov	r0, r3
 80145a4:	f001 fdbe 	bl	8016124 <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80145a8:	68bb      	ldr	r3, [r7, #8]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	2b02      	cmp	r3, #2
 80145ae:	d104      	bne.n	80145ba <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 80145b0:	68fb      	ldr	r3, [r7, #12]
 80145b2:	2205      	movs	r2, #5
 80145b4:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80145b8:	e006      	b.n	80145c8 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 80145ba:	68fb      	ldr	r3, [r7, #12]
 80145bc:	2201      	movs	r2, #1
 80145be:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 80145c2:	e001      	b.n	80145c8 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80145c4:	2301      	movs	r3, #1
 80145c6:	e000      	b.n	80145ca <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80145c8:	2300      	movs	r3, #0
}
 80145ca:	4618      	mov	r0, r3
 80145cc:	3718      	adds	r7, #24
 80145ce:	46bd      	mov	sp, r7
 80145d0:	bd80      	pop	{r7, pc}

080145d2 <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80145d2:	b580      	push	{r7, lr}
 80145d4:	b082      	sub	sp, #8
 80145d6:	af00      	add	r7, sp, #0
 80145d8:	6078      	str	r0, [r7, #4]
 80145da:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145e2:	b2db      	uxtb	r3, r3
 80145e4:	2b02      	cmp	r3, #2
 80145e6:	d101      	bne.n	80145ec <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80145e8:	2302      	movs	r3, #2
 80145ea:	e016      	b.n	801461a <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80145ec:	687b      	ldr	r3, [r7, #4]
 80145ee:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80145f2:	b2db      	uxtb	r3, r3
 80145f4:	2b01      	cmp	r3, #1
 80145f6:	d10f      	bne.n	8014618 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	2202      	movs	r2, #2
 80145fc:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 8014600:	687b      	ldr	r3, [r7, #4]
 8014602:	681b      	ldr	r3, [r3, #0]
 8014604:	6839      	ldr	r1, [r7, #0]
 8014606:	4618      	mov	r0, r3
 8014608:	f001 fdb0 	bl	801616c <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	2201      	movs	r2, #1
 8014610:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 8014614:	2300      	movs	r3, #0
 8014616:	e000      	b.n	801461a <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 8014618:	2301      	movs	r3, #1
}
 801461a:	4618      	mov	r0, r3
 801461c:	3708      	adds	r7, #8
 801461e:	46bd      	mov	sp, r7
 8014620:	bd80      	pop	{r7, pc}

08014622 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8014622:	b580      	push	{r7, lr}
 8014624:	b082      	sub	sp, #8
 8014626:	af00      	add	r7, sp, #0
 8014628:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	2b00      	cmp	r3, #0
 801462e:	d101      	bne.n	8014634 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8014630:	2301      	movs	r3, #1
 8014632:	e049      	b.n	80146c8 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 801463a:	b2db      	uxtb	r3, r3
 801463c:	2b00      	cmp	r3, #0
 801463e:	d106      	bne.n	801464e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8014640:	687b      	ldr	r3, [r7, #4]
 8014642:	2200      	movs	r2, #0
 8014644:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8014648:	6878      	ldr	r0, [r7, #4]
 801464a:	f000 f841 	bl	80146d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801464e:	687b      	ldr	r3, [r7, #4]
 8014650:	2202      	movs	r2, #2
 8014652:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8014656:	687b      	ldr	r3, [r7, #4]
 8014658:	681a      	ldr	r2, [r3, #0]
 801465a:	687b      	ldr	r3, [r7, #4]
 801465c:	3304      	adds	r3, #4
 801465e:	4619      	mov	r1, r3
 8014660:	4610      	mov	r0, r2
 8014662:	f000 f9e7 	bl	8014a34 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	2201      	movs	r2, #1
 801466a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	2201      	movs	r2, #1
 8014672:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	2201      	movs	r2, #1
 801467a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 801467e:	687b      	ldr	r3, [r7, #4]
 8014680:	2201      	movs	r2, #1
 8014682:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8014686:	687b      	ldr	r3, [r7, #4]
 8014688:	2201      	movs	r2, #1
 801468a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801468e:	687b      	ldr	r3, [r7, #4]
 8014690:	2201      	movs	r2, #1
 8014692:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8014696:	687b      	ldr	r3, [r7, #4]
 8014698:	2201      	movs	r2, #1
 801469a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801469e:	687b      	ldr	r3, [r7, #4]
 80146a0:	2201      	movs	r2, #1
 80146a2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80146a6:	687b      	ldr	r3, [r7, #4]
 80146a8:	2201      	movs	r2, #1
 80146aa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2201      	movs	r2, #1
 80146b2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80146b6:	687b      	ldr	r3, [r7, #4]
 80146b8:	2201      	movs	r2, #1
 80146ba:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	2201      	movs	r2, #1
 80146c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80146c6:	2300      	movs	r3, #0
}
 80146c8:	4618      	mov	r0, r3
 80146ca:	3708      	adds	r7, #8
 80146cc:	46bd      	mov	sp, r7
 80146ce:	bd80      	pop	{r7, pc}

080146d0 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80146d0:	b480      	push	{r7}
 80146d2:	b083      	sub	sp, #12
 80146d4:	af00      	add	r7, sp, #0
 80146d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80146d8:	bf00      	nop
 80146da:	370c      	adds	r7, #12
 80146dc:	46bd      	mov	sp, r7
 80146de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80146e2:	4770      	bx	lr

080146e4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80146e4:	b480      	push	{r7}
 80146e6:	b085      	sub	sp, #20
 80146e8:	af00      	add	r7, sp, #0
 80146ea:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80146ec:	687b      	ldr	r3, [r7, #4]
 80146ee:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80146f2:	b2db      	uxtb	r3, r3
 80146f4:	2b01      	cmp	r3, #1
 80146f6:	d001      	beq.n	80146fc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80146f8:	2301      	movs	r3, #1
 80146fa:	e054      	b.n	80147a6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	2202      	movs	r2, #2
 8014700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8014704:	687b      	ldr	r3, [r7, #4]
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	68da      	ldr	r2, [r3, #12]
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	681b      	ldr	r3, [r3, #0]
 801470e:	f042 0201 	orr.w	r2, r2, #1
 8014712:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	681b      	ldr	r3, [r3, #0]
 8014718:	4a26      	ldr	r2, [pc, #152]	@ (80147b4 <HAL_TIM_Base_Start_IT+0xd0>)
 801471a:	4293      	cmp	r3, r2
 801471c:	d022      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 801471e:	687b      	ldr	r3, [r7, #4]
 8014720:	681b      	ldr	r3, [r3, #0]
 8014722:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014726:	d01d      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 8014728:	687b      	ldr	r3, [r7, #4]
 801472a:	681b      	ldr	r3, [r3, #0]
 801472c:	4a22      	ldr	r2, [pc, #136]	@ (80147b8 <HAL_TIM_Base_Start_IT+0xd4>)
 801472e:	4293      	cmp	r3, r2
 8014730:	d018      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	681b      	ldr	r3, [r3, #0]
 8014736:	4a21      	ldr	r2, [pc, #132]	@ (80147bc <HAL_TIM_Base_Start_IT+0xd8>)
 8014738:	4293      	cmp	r3, r2
 801473a:	d013      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 801473c:	687b      	ldr	r3, [r7, #4]
 801473e:	681b      	ldr	r3, [r3, #0]
 8014740:	4a1f      	ldr	r2, [pc, #124]	@ (80147c0 <HAL_TIM_Base_Start_IT+0xdc>)
 8014742:	4293      	cmp	r3, r2
 8014744:	d00e      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 8014746:	687b      	ldr	r3, [r7, #4]
 8014748:	681b      	ldr	r3, [r3, #0]
 801474a:	4a1e      	ldr	r2, [pc, #120]	@ (80147c4 <HAL_TIM_Base_Start_IT+0xe0>)
 801474c:	4293      	cmp	r3, r2
 801474e:	d009      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 8014750:	687b      	ldr	r3, [r7, #4]
 8014752:	681b      	ldr	r3, [r3, #0]
 8014754:	4a1c      	ldr	r2, [pc, #112]	@ (80147c8 <HAL_TIM_Base_Start_IT+0xe4>)
 8014756:	4293      	cmp	r3, r2
 8014758:	d004      	beq.n	8014764 <HAL_TIM_Base_Start_IT+0x80>
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	681b      	ldr	r3, [r3, #0]
 801475e:	4a1b      	ldr	r2, [pc, #108]	@ (80147cc <HAL_TIM_Base_Start_IT+0xe8>)
 8014760:	4293      	cmp	r3, r2
 8014762:	d115      	bne.n	8014790 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	681b      	ldr	r3, [r3, #0]
 8014768:	689a      	ldr	r2, [r3, #8]
 801476a:	4b19      	ldr	r3, [pc, #100]	@ (80147d0 <HAL_TIM_Base_Start_IT+0xec>)
 801476c:	4013      	ands	r3, r2
 801476e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8014770:	68fb      	ldr	r3, [r7, #12]
 8014772:	2b06      	cmp	r3, #6
 8014774:	d015      	beq.n	80147a2 <HAL_TIM_Base_Start_IT+0xbe>
 8014776:	68fb      	ldr	r3, [r7, #12]
 8014778:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801477c:	d011      	beq.n	80147a2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 801477e:	687b      	ldr	r3, [r7, #4]
 8014780:	681b      	ldr	r3, [r3, #0]
 8014782:	681a      	ldr	r2, [r3, #0]
 8014784:	687b      	ldr	r3, [r7, #4]
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	f042 0201 	orr.w	r2, r2, #1
 801478c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801478e:	e008      	b.n	80147a2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8014790:	687b      	ldr	r3, [r7, #4]
 8014792:	681b      	ldr	r3, [r3, #0]
 8014794:	681a      	ldr	r2, [r3, #0]
 8014796:	687b      	ldr	r3, [r7, #4]
 8014798:	681b      	ldr	r3, [r3, #0]
 801479a:	f042 0201 	orr.w	r2, r2, #1
 801479e:	601a      	str	r2, [r3, #0]
 80147a0:	e000      	b.n	80147a4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80147a2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80147a4:	2300      	movs	r3, #0
}
 80147a6:	4618      	mov	r0, r3
 80147a8:	3714      	adds	r7, #20
 80147aa:	46bd      	mov	sp, r7
 80147ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147b0:	4770      	bx	lr
 80147b2:	bf00      	nop
 80147b4:	40010000 	.word	0x40010000
 80147b8:	40000400 	.word	0x40000400
 80147bc:	40000800 	.word	0x40000800
 80147c0:	40000c00 	.word	0x40000c00
 80147c4:	40010400 	.word	0x40010400
 80147c8:	40001800 	.word	0x40001800
 80147cc:	40014000 	.word	0x40014000
 80147d0:	00010007 	.word	0x00010007

080147d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80147d4:	b580      	push	{r7, lr}
 80147d6:	b084      	sub	sp, #16
 80147d8:	af00      	add	r7, sp, #0
 80147da:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	68db      	ldr	r3, [r3, #12]
 80147e2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80147e4:	687b      	ldr	r3, [r7, #4]
 80147e6:	681b      	ldr	r3, [r3, #0]
 80147e8:	691b      	ldr	r3, [r3, #16]
 80147ea:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	f003 0302 	and.w	r3, r3, #2
 80147f2:	2b00      	cmp	r3, #0
 80147f4:	d020      	beq.n	8014838 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80147f6:	68fb      	ldr	r3, [r7, #12]
 80147f8:	f003 0302 	and.w	r3, r3, #2
 80147fc:	2b00      	cmp	r3, #0
 80147fe:	d01b      	beq.n	8014838 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8014800:	687b      	ldr	r3, [r7, #4]
 8014802:	681b      	ldr	r3, [r3, #0]
 8014804:	f06f 0202 	mvn.w	r2, #2
 8014808:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801480a:	687b      	ldr	r3, [r7, #4]
 801480c:	2201      	movs	r2, #1
 801480e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8014810:	687b      	ldr	r3, [r7, #4]
 8014812:	681b      	ldr	r3, [r3, #0]
 8014814:	699b      	ldr	r3, [r3, #24]
 8014816:	f003 0303 	and.w	r3, r3, #3
 801481a:	2b00      	cmp	r3, #0
 801481c:	d003      	beq.n	8014826 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801481e:	6878      	ldr	r0, [r7, #4]
 8014820:	f000 f8e9 	bl	80149f6 <HAL_TIM_IC_CaptureCallback>
 8014824:	e005      	b.n	8014832 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8014826:	6878      	ldr	r0, [r7, #4]
 8014828:	f000 f8db 	bl	80149e2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801482c:	6878      	ldr	r0, [r7, #4]
 801482e:	f000 f8ec 	bl	8014a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014832:	687b      	ldr	r3, [r7, #4]
 8014834:	2200      	movs	r2, #0
 8014836:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8014838:	68bb      	ldr	r3, [r7, #8]
 801483a:	f003 0304 	and.w	r3, r3, #4
 801483e:	2b00      	cmp	r3, #0
 8014840:	d020      	beq.n	8014884 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8014842:	68fb      	ldr	r3, [r7, #12]
 8014844:	f003 0304 	and.w	r3, r3, #4
 8014848:	2b00      	cmp	r3, #0
 801484a:	d01b      	beq.n	8014884 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801484c:	687b      	ldr	r3, [r7, #4]
 801484e:	681b      	ldr	r3, [r3, #0]
 8014850:	f06f 0204 	mvn.w	r2, #4
 8014854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	2202      	movs	r2, #2
 801485a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801485c:	687b      	ldr	r3, [r7, #4]
 801485e:	681b      	ldr	r3, [r3, #0]
 8014860:	699b      	ldr	r3, [r3, #24]
 8014862:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014866:	2b00      	cmp	r3, #0
 8014868:	d003      	beq.n	8014872 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801486a:	6878      	ldr	r0, [r7, #4]
 801486c:	f000 f8c3 	bl	80149f6 <HAL_TIM_IC_CaptureCallback>
 8014870:	e005      	b.n	801487e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f000 f8b5 	bl	80149e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014878:	6878      	ldr	r0, [r7, #4]
 801487a:	f000 f8c6 	bl	8014a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	2200      	movs	r2, #0
 8014882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8014884:	68bb      	ldr	r3, [r7, #8]
 8014886:	f003 0308 	and.w	r3, r3, #8
 801488a:	2b00      	cmp	r3, #0
 801488c:	d020      	beq.n	80148d0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801488e:	68fb      	ldr	r3, [r7, #12]
 8014890:	f003 0308 	and.w	r3, r3, #8
 8014894:	2b00      	cmp	r3, #0
 8014896:	d01b      	beq.n	80148d0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8014898:	687b      	ldr	r3, [r7, #4]
 801489a:	681b      	ldr	r3, [r3, #0]
 801489c:	f06f 0208 	mvn.w	r2, #8
 80148a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	2204      	movs	r2, #4
 80148a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	69db      	ldr	r3, [r3, #28]
 80148ae:	f003 0303 	and.w	r3, r3, #3
 80148b2:	2b00      	cmp	r3, #0
 80148b4:	d003      	beq.n	80148be <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80148b6:	6878      	ldr	r0, [r7, #4]
 80148b8:	f000 f89d 	bl	80149f6 <HAL_TIM_IC_CaptureCallback>
 80148bc:	e005      	b.n	80148ca <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80148be:	6878      	ldr	r0, [r7, #4]
 80148c0:	f000 f88f 	bl	80149e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80148c4:	6878      	ldr	r0, [r7, #4]
 80148c6:	f000 f8a0 	bl	8014a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80148ca:	687b      	ldr	r3, [r7, #4]
 80148cc:	2200      	movs	r2, #0
 80148ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80148d0:	68bb      	ldr	r3, [r7, #8]
 80148d2:	f003 0310 	and.w	r3, r3, #16
 80148d6:	2b00      	cmp	r3, #0
 80148d8:	d020      	beq.n	801491c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	f003 0310 	and.w	r3, r3, #16
 80148e0:	2b00      	cmp	r3, #0
 80148e2:	d01b      	beq.n	801491c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	f06f 0210 	mvn.w	r2, #16
 80148ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	2208      	movs	r2, #8
 80148f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	681b      	ldr	r3, [r3, #0]
 80148f8:	69db      	ldr	r3, [r3, #28]
 80148fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80148fe:	2b00      	cmp	r3, #0
 8014900:	d003      	beq.n	801490a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8014902:	6878      	ldr	r0, [r7, #4]
 8014904:	f000 f877 	bl	80149f6 <HAL_TIM_IC_CaptureCallback>
 8014908:	e005      	b.n	8014916 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801490a:	6878      	ldr	r0, [r7, #4]
 801490c:	f000 f869 	bl	80149e2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8014910:	6878      	ldr	r0, [r7, #4]
 8014912:	f000 f87a 	bl	8014a0a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	2200      	movs	r2, #0
 801491a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801491c:	68bb      	ldr	r3, [r7, #8]
 801491e:	f003 0301 	and.w	r3, r3, #1
 8014922:	2b00      	cmp	r3, #0
 8014924:	d00c      	beq.n	8014940 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8014926:	68fb      	ldr	r3, [r7, #12]
 8014928:	f003 0301 	and.w	r3, r3, #1
 801492c:	2b00      	cmp	r3, #0
 801492e:	d007      	beq.n	8014940 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8014930:	687b      	ldr	r3, [r7, #4]
 8014932:	681b      	ldr	r3, [r3, #0]
 8014934:	f06f 0201 	mvn.w	r2, #1
 8014938:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801493a:	6878      	ldr	r0, [r7, #4]
 801493c:	f000 f9ae 	bl	8014c9c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014940:	68bb      	ldr	r3, [r7, #8]
 8014942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014946:	2b00      	cmp	r3, #0
 8014948:	d104      	bne.n	8014954 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801494a:	68bb      	ldr	r3, [r7, #8]
 801494c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8014950:	2b00      	cmp	r3, #0
 8014952:	d00c      	beq.n	801496e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014954:	68fb      	ldr	r3, [r7, #12]
 8014956:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801495a:	2b00      	cmp	r3, #0
 801495c:	d007      	beq.n	801496e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	681b      	ldr	r3, [r3, #0]
 8014962:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8014966:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8014968:	6878      	ldr	r0, [r7, #4]
 801496a:	f000 f90d 	bl	8014b88 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801496e:	68bb      	ldr	r3, [r7, #8]
 8014970:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014974:	2b00      	cmp	r3, #0
 8014976:	d00c      	beq.n	8014992 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8014978:	68fb      	ldr	r3, [r7, #12]
 801497a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801497e:	2b00      	cmp	r3, #0
 8014980:	d007      	beq.n	8014992 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	681b      	ldr	r3, [r3, #0]
 8014986:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801498a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801498c:	6878      	ldr	r0, [r7, #4]
 801498e:	f000 f905 	bl	8014b9c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8014992:	68bb      	ldr	r3, [r7, #8]
 8014994:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014998:	2b00      	cmp	r3, #0
 801499a:	d00c      	beq.n	80149b6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 801499c:	68fb      	ldr	r3, [r7, #12]
 801499e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80149a2:	2b00      	cmp	r3, #0
 80149a4:	d007      	beq.n	80149b6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80149a6:	687b      	ldr	r3, [r7, #4]
 80149a8:	681b      	ldr	r3, [r3, #0]
 80149aa:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80149ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80149b0:	6878      	ldr	r0, [r7, #4]
 80149b2:	f000 f834 	bl	8014a1e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80149b6:	68bb      	ldr	r3, [r7, #8]
 80149b8:	f003 0320 	and.w	r3, r3, #32
 80149bc:	2b00      	cmp	r3, #0
 80149be:	d00c      	beq.n	80149da <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80149c0:	68fb      	ldr	r3, [r7, #12]
 80149c2:	f003 0320 	and.w	r3, r3, #32
 80149c6:	2b00      	cmp	r3, #0
 80149c8:	d007      	beq.n	80149da <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80149ca:	687b      	ldr	r3, [r7, #4]
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	f06f 0220 	mvn.w	r2, #32
 80149d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80149d4:	6878      	ldr	r0, [r7, #4]
 80149d6:	f000 f8cd 	bl	8014b74 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80149da:	bf00      	nop
 80149dc:	3710      	adds	r7, #16
 80149de:	46bd      	mov	sp, r7
 80149e0:	bd80      	pop	{r7, pc}

080149e2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80149e2:	b480      	push	{r7}
 80149e4:	b083      	sub	sp, #12
 80149e6:	af00      	add	r7, sp, #0
 80149e8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80149ea:	bf00      	nop
 80149ec:	370c      	adds	r7, #12
 80149ee:	46bd      	mov	sp, r7
 80149f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80149f4:	4770      	bx	lr

080149f6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80149f6:	b480      	push	{r7}
 80149f8:	b083      	sub	sp, #12
 80149fa:	af00      	add	r7, sp, #0
 80149fc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80149fe:	bf00      	nop
 8014a00:	370c      	adds	r7, #12
 8014a02:	46bd      	mov	sp, r7
 8014a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a08:	4770      	bx	lr

08014a0a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8014a0a:	b480      	push	{r7}
 8014a0c:	b083      	sub	sp, #12
 8014a0e:	af00      	add	r7, sp, #0
 8014a10:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8014a12:	bf00      	nop
 8014a14:	370c      	adds	r7, #12
 8014a16:	46bd      	mov	sp, r7
 8014a18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a1c:	4770      	bx	lr

08014a1e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8014a1e:	b480      	push	{r7}
 8014a20:	b083      	sub	sp, #12
 8014a22:	af00      	add	r7, sp, #0
 8014a24:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8014a26:	bf00      	nop
 8014a28:	370c      	adds	r7, #12
 8014a2a:	46bd      	mov	sp, r7
 8014a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014a30:	4770      	bx	lr
	...

08014a34 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8014a34:	b480      	push	{r7}
 8014a36:	b085      	sub	sp, #20
 8014a38:	af00      	add	r7, sp, #0
 8014a3a:	6078      	str	r0, [r7, #4]
 8014a3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8014a44:	687b      	ldr	r3, [r7, #4]
 8014a46:	4a43      	ldr	r2, [pc, #268]	@ (8014b54 <TIM_Base_SetConfig+0x120>)
 8014a48:	4293      	cmp	r3, r2
 8014a4a:	d013      	beq.n	8014a74 <TIM_Base_SetConfig+0x40>
 8014a4c:	687b      	ldr	r3, [r7, #4]
 8014a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a52:	d00f      	beq.n	8014a74 <TIM_Base_SetConfig+0x40>
 8014a54:	687b      	ldr	r3, [r7, #4]
 8014a56:	4a40      	ldr	r2, [pc, #256]	@ (8014b58 <TIM_Base_SetConfig+0x124>)
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	d00b      	beq.n	8014a74 <TIM_Base_SetConfig+0x40>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	4a3f      	ldr	r2, [pc, #252]	@ (8014b5c <TIM_Base_SetConfig+0x128>)
 8014a60:	4293      	cmp	r3, r2
 8014a62:	d007      	beq.n	8014a74 <TIM_Base_SetConfig+0x40>
 8014a64:	687b      	ldr	r3, [r7, #4]
 8014a66:	4a3e      	ldr	r2, [pc, #248]	@ (8014b60 <TIM_Base_SetConfig+0x12c>)
 8014a68:	4293      	cmp	r3, r2
 8014a6a:	d003      	beq.n	8014a74 <TIM_Base_SetConfig+0x40>
 8014a6c:	687b      	ldr	r3, [r7, #4]
 8014a6e:	4a3d      	ldr	r2, [pc, #244]	@ (8014b64 <TIM_Base_SetConfig+0x130>)
 8014a70:	4293      	cmp	r3, r2
 8014a72:	d108      	bne.n	8014a86 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8014a74:	68fb      	ldr	r3, [r7, #12]
 8014a76:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8014a7a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8014a7c:	683b      	ldr	r3, [r7, #0]
 8014a7e:	685b      	ldr	r3, [r3, #4]
 8014a80:	68fa      	ldr	r2, [r7, #12]
 8014a82:	4313      	orrs	r3, r2
 8014a84:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8014a86:	687b      	ldr	r3, [r7, #4]
 8014a88:	4a32      	ldr	r2, [pc, #200]	@ (8014b54 <TIM_Base_SetConfig+0x120>)
 8014a8a:	4293      	cmp	r3, r2
 8014a8c:	d01f      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014a8e:	687b      	ldr	r3, [r7, #4]
 8014a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8014a94:	d01b      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	4a2f      	ldr	r2, [pc, #188]	@ (8014b58 <TIM_Base_SetConfig+0x124>)
 8014a9a:	4293      	cmp	r3, r2
 8014a9c:	d017      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	4a2e      	ldr	r2, [pc, #184]	@ (8014b5c <TIM_Base_SetConfig+0x128>)
 8014aa2:	4293      	cmp	r3, r2
 8014aa4:	d013      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014aa6:	687b      	ldr	r3, [r7, #4]
 8014aa8:	4a2d      	ldr	r2, [pc, #180]	@ (8014b60 <TIM_Base_SetConfig+0x12c>)
 8014aaa:	4293      	cmp	r3, r2
 8014aac:	d00f      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014aae:	687b      	ldr	r3, [r7, #4]
 8014ab0:	4a2c      	ldr	r2, [pc, #176]	@ (8014b64 <TIM_Base_SetConfig+0x130>)
 8014ab2:	4293      	cmp	r3, r2
 8014ab4:	d00b      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014ab6:	687b      	ldr	r3, [r7, #4]
 8014ab8:	4a2b      	ldr	r2, [pc, #172]	@ (8014b68 <TIM_Base_SetConfig+0x134>)
 8014aba:	4293      	cmp	r3, r2
 8014abc:	d007      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014abe:	687b      	ldr	r3, [r7, #4]
 8014ac0:	4a2a      	ldr	r2, [pc, #168]	@ (8014b6c <TIM_Base_SetConfig+0x138>)
 8014ac2:	4293      	cmp	r3, r2
 8014ac4:	d003      	beq.n	8014ace <TIM_Base_SetConfig+0x9a>
 8014ac6:	687b      	ldr	r3, [r7, #4]
 8014ac8:	4a29      	ldr	r2, [pc, #164]	@ (8014b70 <TIM_Base_SetConfig+0x13c>)
 8014aca:	4293      	cmp	r3, r2
 8014acc:	d108      	bne.n	8014ae0 <TIM_Base_SetConfig+0xac>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8014ace:	68fb      	ldr	r3, [r7, #12]
 8014ad0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014ad4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8014ad6:	683b      	ldr	r3, [r7, #0]
 8014ad8:	68db      	ldr	r3, [r3, #12]
 8014ada:	68fa      	ldr	r2, [r7, #12]
 8014adc:	4313      	orrs	r3, r2
 8014ade:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8014ae6:	683b      	ldr	r3, [r7, #0]
 8014ae8:	695b      	ldr	r3, [r3, #20]
 8014aea:	4313      	orrs	r3, r2
 8014aec:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8014aee:	683b      	ldr	r3, [r7, #0]
 8014af0:	689a      	ldr	r2, [r3, #8]
 8014af2:	687b      	ldr	r3, [r7, #4]
 8014af4:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8014af6:	683b      	ldr	r3, [r7, #0]
 8014af8:	681a      	ldr	r2, [r3, #0]
 8014afa:	687b      	ldr	r3, [r7, #4]
 8014afc:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8014afe:	687b      	ldr	r3, [r7, #4]
 8014b00:	4a14      	ldr	r2, [pc, #80]	@ (8014b54 <TIM_Base_SetConfig+0x120>)
 8014b02:	4293      	cmp	r3, r2
 8014b04:	d00f      	beq.n	8014b26 <TIM_Base_SetConfig+0xf2>
 8014b06:	687b      	ldr	r3, [r7, #4]
 8014b08:	4a16      	ldr	r2, [pc, #88]	@ (8014b64 <TIM_Base_SetConfig+0x130>)
 8014b0a:	4293      	cmp	r3, r2
 8014b0c:	d00b      	beq.n	8014b26 <TIM_Base_SetConfig+0xf2>
 8014b0e:	687b      	ldr	r3, [r7, #4]
 8014b10:	4a15      	ldr	r2, [pc, #84]	@ (8014b68 <TIM_Base_SetConfig+0x134>)
 8014b12:	4293      	cmp	r3, r2
 8014b14:	d007      	beq.n	8014b26 <TIM_Base_SetConfig+0xf2>
 8014b16:	687b      	ldr	r3, [r7, #4]
 8014b18:	4a14      	ldr	r2, [pc, #80]	@ (8014b6c <TIM_Base_SetConfig+0x138>)
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	d003      	beq.n	8014b26 <TIM_Base_SetConfig+0xf2>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	4a13      	ldr	r2, [pc, #76]	@ (8014b70 <TIM_Base_SetConfig+0x13c>)
 8014b22:	4293      	cmp	r3, r2
 8014b24:	d103      	bne.n	8014b2e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8014b26:	683b      	ldr	r3, [r7, #0]
 8014b28:	691a      	ldr	r2, [r3, #16]
 8014b2a:	687b      	ldr	r3, [r7, #4]
 8014b2c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8014b2e:	687b      	ldr	r3, [r7, #4]
 8014b30:	681b      	ldr	r3, [r3, #0]
 8014b32:	f043 0204 	orr.w	r2, r3, #4
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8014b3a:	687b      	ldr	r3, [r7, #4]
 8014b3c:	2201      	movs	r2, #1
 8014b3e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8014b40:	687b      	ldr	r3, [r7, #4]
 8014b42:	68fa      	ldr	r2, [r7, #12]
 8014b44:	601a      	str	r2, [r3, #0]
}
 8014b46:	bf00      	nop
 8014b48:	3714      	adds	r7, #20
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	40010000 	.word	0x40010000
 8014b58:	40000400 	.word	0x40000400
 8014b5c:	40000800 	.word	0x40000800
 8014b60:	40000c00 	.word	0x40000c00
 8014b64:	40010400 	.word	0x40010400
 8014b68:	40014000 	.word	0x40014000
 8014b6c:	40014400 	.word	0x40014400
 8014b70:	40014800 	.word	0x40014800

08014b74 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8014b74:	b480      	push	{r7}
 8014b76:	b083      	sub	sp, #12
 8014b78:	af00      	add	r7, sp, #0
 8014b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8014b7c:	bf00      	nop
 8014b7e:	370c      	adds	r7, #12
 8014b80:	46bd      	mov	sp, r7
 8014b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b86:	4770      	bx	lr

08014b88 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8014b88:	b480      	push	{r7}
 8014b8a:	b083      	sub	sp, #12
 8014b8c:	af00      	add	r7, sp, #0
 8014b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8014b90:	bf00      	nop
 8014b92:	370c      	adds	r7, #12
 8014b94:	46bd      	mov	sp, r7
 8014b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b9a:	4770      	bx	lr

08014b9c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8014b9c:	b480      	push	{r7}
 8014b9e:	b083      	sub	sp, #12
 8014ba0:	af00      	add	r7, sp, #0
 8014ba2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8014ba4:	bf00      	nop
 8014ba6:	370c      	adds	r7, #12
 8014ba8:	46bd      	mov	sp, r7
 8014baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014bae:	4770      	bx	lr

08014bb0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick (uint32_t TickPriority)
{
 8014bb0:	b580      	push	{r7, lr}
 8014bb2:	b090      	sub	sp, #64	@ 0x40
 8014bb4:	af00      	add	r7, sp, #0
 8014bb6:	6078      	str	r0, [r7, #4]
  uint32_t              uwPrescalerValue;
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8014bb8:	4b33      	ldr	r3, [pc, #204]	@ (8014c88 <HAL_InitTick+0xd8>)
 8014bba:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014bbe:	4a32      	ldr	r2, [pc, #200]	@ (8014c88 <HAL_InitTick+0xd8>)
 8014bc0:	f043 0310 	orr.w	r3, r3, #16
 8014bc4:	f8c2 30e8 	str.w	r3, [r2, #232]	@ 0xe8
 8014bc8:	4b2f      	ldr	r3, [pc, #188]	@ (8014c88 <HAL_InitTick+0xd8>)
 8014bca:	f8d3 30e8 	ldr.w	r3, [r3, #232]	@ 0xe8
 8014bce:	f003 0310 	and.w	r3, r3, #16
 8014bd2:	60bb      	str	r3, [r7, #8]
 8014bd4:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8014bd6:	f107 020c 	add.w	r2, r7, #12
 8014bda:	f107 0310 	add.w	r3, r7, #16
 8014bde:	4611      	mov	r1, r2
 8014be0:	4618      	mov	r0, r3
 8014be2:	f7fb fcd1 	bl	8010588 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8014be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014be8:	637b      	str	r3, [r7, #52]	@ 0x34

  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8014bea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	d103      	bne.n	8014bf8 <HAL_InitTick+0x48>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8014bf0:	f7fb fc9e 	bl	8010530 <HAL_RCC_GetPCLK1Freq>
 8014bf4:	63f8      	str	r0, [r7, #60]	@ 0x3c
 8014bf6:	e004      	b.n	8014c02 <HAL_InitTick+0x52>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8014bf8:	f7fb fc9a 	bl	8010530 <HAL_RCC_GetPCLK1Freq>
 8014bfc:	4603      	mov	r3, r0
 8014bfe:	005b      	lsls	r3, r3, #1
 8014c00:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8014c02:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c04:	4a21      	ldr	r2, [pc, #132]	@ (8014c8c <HAL_InitTick+0xdc>)
 8014c06:	fba2 2303 	umull	r2, r3, r2, r3
 8014c0a:	0c9b      	lsrs	r3, r3, #18
 8014c0c:	3b01      	subs	r3, #1
 8014c0e:	633b      	str	r3, [r7, #48]	@ 0x30

  /* Initialize TIM6 */
  TimHandle.Instance = TIM6;
 8014c10:	4b1f      	ldr	r3, [pc, #124]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c12:	4a20      	ldr	r2, [pc, #128]	@ (8014c94 <HAL_InitTick+0xe4>)
 8014c14:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  TimHandle.Init.Period = (1000000U / 1000U) - 1U;
 8014c16:	4b1e      	ldr	r3, [pc, #120]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c18:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8014c1c:	60da      	str	r2, [r3, #12]
  TimHandle.Init.Prescaler = uwPrescalerValue;
 8014c1e:	4a1c      	ldr	r2, [pc, #112]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c22:	6053      	str	r3, [r2, #4]
  TimHandle.Init.ClockDivision = 0U;
 8014c24:	4b1a      	ldr	r3, [pc, #104]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c26:	2200      	movs	r2, #0
 8014c28:	611a      	str	r2, [r3, #16]
  TimHandle.Init.CounterMode = TIM_COUNTERMODE_UP;
 8014c2a:	4b19      	ldr	r3, [pc, #100]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c2c:	2200      	movs	r2, #0
 8014c2e:	609a      	str	r2, [r3, #8]
  status = HAL_TIM_Base_Init(&TimHandle);
 8014c30:	4817      	ldr	r0, [pc, #92]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c32:	f7ff fcf6 	bl	8014622 <HAL_TIM_Base_Init>
 8014c36:	4603      	mov	r3, r0
 8014c38:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
  if (status == HAL_OK)
 8014c3c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014c40:	2b00      	cmp	r3, #0
 8014c42:	d11b      	bne.n	8014c7c <HAL_InitTick+0xcc>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&TimHandle);
 8014c44:	4812      	ldr	r0, [pc, #72]	@ (8014c90 <HAL_InitTick+0xe0>)
 8014c46:	f7ff fd4d 	bl	80146e4 <HAL_TIM_Base_Start_IT>
 8014c4a:	4603      	mov	r3, r0
 8014c4c:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
    if (status == HAL_OK)
 8014c50:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d111      	bne.n	8014c7c <HAL_InitTick+0xcc>
    {
	  /* Enable the TIM6 global Interrupt */
      HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8014c58:	2036      	movs	r0, #54	@ 0x36
 8014c5a:	f7f4 fb67 	bl	800932c <HAL_NVIC_EnableIRQ>
   
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8014c5e:	687b      	ldr	r3, [r7, #4]
 8014c60:	2b0f      	cmp	r3, #15
 8014c62:	d808      	bhi.n	8014c76 <HAL_InitTick+0xc6>
      {
        /* Enable the TIM6 global Interrupt */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0);
 8014c64:	2200      	movs	r2, #0
 8014c66:	6879      	ldr	r1, [r7, #4]
 8014c68:	2036      	movs	r0, #54	@ 0x36
 8014c6a:	f7f4 fb45 	bl	80092f8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8014c6e:	4a0a      	ldr	r2, [pc, #40]	@ (8014c98 <HAL_InitTick+0xe8>)
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	6013      	str	r3, [r2, #0]
 8014c74:	e002      	b.n	8014c7c <HAL_InitTick+0xcc>
      }
      else
      {
        status = HAL_ERROR;
 8014c76:	2301      	movs	r3, #1
 8014c78:	f887 303b 	strb.w	r3, [r7, #59]	@ 0x3b
      }
   }
}

  /* Return function status */
  return status;
 8014c7c:	f897 303b 	ldrb.w	r3, [r7, #59]	@ 0x3b
}
 8014c80:	4618      	mov	r0, r3
 8014c82:	3740      	adds	r7, #64	@ 0x40
 8014c84:	46bd      	mov	sp, r7
 8014c86:	bd80      	pop	{r7, pc}
 8014c88:	58024400 	.word	0x58024400
 8014c8c:	431bde83 	.word	0x431bde83
 8014c90:	24006b04 	.word	0x24006b04
 8014c94:	40001000 	.word	0x40001000
 8014c98:	240005d0 	.word	0x240005d0

08014c9c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8014c9c:	b580      	push	{r7, lr}
 8014c9e:	b082      	sub	sp, #8
 8014ca0:	af00      	add	r7, sp, #0
 8014ca2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(htim);

  HAL_IncTick();
 8014ca4:	f7f4 f9ec 	bl	8009080 <HAL_IncTick>
}
 8014ca8:	bf00      	nop
 8014caa:	3708      	adds	r7, #8
 8014cac:	46bd      	mov	sp, r7
 8014cae:	bd80      	pop	{r7, pc}

08014cb0 <TIM6_DAC_IRQHandler>:
  * @brief  This function handles TIM interrupt request.
  * @param  None
  * @retval None
  */
void TIM6_DAC_IRQHandler(void)
{
 8014cb0:	b580      	push	{r7, lr}
 8014cb2:	af00      	add	r7, sp, #0
  HAL_TIM_IRQHandler(&TimHandle);
 8014cb4:	4802      	ldr	r0, [pc, #8]	@ (8014cc0 <TIM6_DAC_IRQHandler+0x10>)
 8014cb6:	f7ff fd8d 	bl	80147d4 <HAL_TIM_IRQHandler>
}
 8014cba:	bf00      	nop
 8014cbc:	bd80      	pop	{r7, pc}
 8014cbe:	bf00      	nop
 8014cc0:	24006b04 	.word	0x24006b04

08014cc4 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8014cc4:	b580      	push	{r7, lr}
 8014cc6:	b082      	sub	sp, #8
 8014cc8:	af00      	add	r7, sp, #0
 8014cca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	2b00      	cmp	r3, #0
 8014cd0:	d101      	bne.n	8014cd6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8014cd2:	2301      	movs	r3, #1
 8014cd4:	e042      	b.n	8014d5c <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8014cd6:	687b      	ldr	r3, [r7, #4]
 8014cd8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014cdc:	2b00      	cmp	r3, #0
 8014cde:	d106      	bne.n	8014cee <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8014ce0:	687b      	ldr	r3, [r7, #4]
 8014ce2:	2200      	movs	r2, #0
 8014ce4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8014ce8:	6878      	ldr	r0, [r7, #4]
 8014cea:	f7f0 f9a1 	bl	8005030 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8014cee:	687b      	ldr	r3, [r7, #4]
 8014cf0:	2224      	movs	r2, #36	@ 0x24
 8014cf2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8014cf6:	687b      	ldr	r3, [r7, #4]
 8014cf8:	681b      	ldr	r3, [r3, #0]
 8014cfa:	681a      	ldr	r2, [r3, #0]
 8014cfc:	687b      	ldr	r3, [r7, #4]
 8014cfe:	681b      	ldr	r3, [r3, #0]
 8014d00:	f022 0201 	bic.w	r2, r2, #1
 8014d04:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8014d06:	687b      	ldr	r3, [r7, #4]
 8014d08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d002      	beq.n	8014d14 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 8014d0e:	6878      	ldr	r0, [r7, #4]
 8014d10:	f000 fe1e 	bl	8015950 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8014d14:	6878      	ldr	r0, [r7, #4]
 8014d16:	f000 f8b3 	bl	8014e80 <UART_SetConfig>
 8014d1a:	4603      	mov	r3, r0
 8014d1c:	2b01      	cmp	r3, #1
 8014d1e:	d101      	bne.n	8014d24 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 8014d20:	2301      	movs	r3, #1
 8014d22:	e01b      	b.n	8014d5c <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8014d24:	687b      	ldr	r3, [r7, #4]
 8014d26:	681b      	ldr	r3, [r3, #0]
 8014d28:	685a      	ldr	r2, [r3, #4]
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	681b      	ldr	r3, [r3, #0]
 8014d2e:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8014d32:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8014d34:	687b      	ldr	r3, [r7, #4]
 8014d36:	681b      	ldr	r3, [r3, #0]
 8014d38:	689a      	ldr	r2, [r3, #8]
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	681b      	ldr	r3, [r3, #0]
 8014d3e:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8014d42:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	681a      	ldr	r2, [r3, #0]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	f042 0201 	orr.w	r2, r2, #1
 8014d52:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8014d54:	6878      	ldr	r0, [r7, #4]
 8014d56:	f000 fe9d 	bl	8015a94 <UART_CheckIdleState>
 8014d5a:	4603      	mov	r3, r0
}
 8014d5c:	4618      	mov	r0, r3
 8014d5e:	3708      	adds	r7, #8
 8014d60:	46bd      	mov	sp, r7
 8014d62:	bd80      	pop	{r7, pc}

08014d64 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8014d64:	b580      	push	{r7, lr}
 8014d66:	b08a      	sub	sp, #40	@ 0x28
 8014d68:	af02      	add	r7, sp, #8
 8014d6a:	60f8      	str	r0, [r7, #12]
 8014d6c:	60b9      	str	r1, [r7, #8]
 8014d6e:	603b      	str	r3, [r7, #0]
 8014d70:	4613      	mov	r3, r2
 8014d72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8014d74:	68fb      	ldr	r3, [r7, #12]
 8014d76:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014d7a:	2b20      	cmp	r3, #32
 8014d7c:	d17b      	bne.n	8014e76 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8014d7e:	68bb      	ldr	r3, [r7, #8]
 8014d80:	2b00      	cmp	r3, #0
 8014d82:	d002      	beq.n	8014d8a <HAL_UART_Transmit+0x26>
 8014d84:	88fb      	ldrh	r3, [r7, #6]
 8014d86:	2b00      	cmp	r3, #0
 8014d88:	d101      	bne.n	8014d8e <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8014d8a:	2301      	movs	r3, #1
 8014d8c:	e074      	b.n	8014e78 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014d8e:	68fb      	ldr	r3, [r7, #12]
 8014d90:	2200      	movs	r2, #0
 8014d92:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	2221      	movs	r2, #33	@ 0x21
 8014d9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8014d9e:	f7f4 f983 	bl	80090a8 <HAL_GetTick>
 8014da2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8014da4:	68fb      	ldr	r3, [r7, #12]
 8014da6:	88fa      	ldrh	r2, [r7, #6]
 8014da8:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8014dac:	68fb      	ldr	r3, [r7, #12]
 8014dae:	88fa      	ldrh	r2, [r7, #6]
 8014db0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014db4:	68fb      	ldr	r3, [r7, #12]
 8014db6:	689b      	ldr	r3, [r3, #8]
 8014db8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8014dbc:	d108      	bne.n	8014dd0 <HAL_UART_Transmit+0x6c>
 8014dbe:	68fb      	ldr	r3, [r7, #12]
 8014dc0:	691b      	ldr	r3, [r3, #16]
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d104      	bne.n	8014dd0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8014dc6:	2300      	movs	r3, #0
 8014dc8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	61bb      	str	r3, [r7, #24]
 8014dce:	e003      	b.n	8014dd8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8014dd0:	68bb      	ldr	r3, [r7, #8]
 8014dd2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8014dd4:	2300      	movs	r3, #0
 8014dd6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8014dd8:	e030      	b.n	8014e3c <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8014dda:	683b      	ldr	r3, [r7, #0]
 8014ddc:	9300      	str	r3, [sp, #0]
 8014dde:	697b      	ldr	r3, [r7, #20]
 8014de0:	2200      	movs	r2, #0
 8014de2:	2180      	movs	r1, #128	@ 0x80
 8014de4:	68f8      	ldr	r0, [r7, #12]
 8014de6:	f000 feff 	bl	8015be8 <UART_WaitOnFlagUntilTimeout>
 8014dea:	4603      	mov	r3, r0
 8014dec:	2b00      	cmp	r3, #0
 8014dee:	d005      	beq.n	8014dfc <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8014df0:	68fb      	ldr	r3, [r7, #12]
 8014df2:	2220      	movs	r2, #32
 8014df4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8014df8:	2303      	movs	r3, #3
 8014dfa:	e03d      	b.n	8014e78 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8014dfc:	69fb      	ldr	r3, [r7, #28]
 8014dfe:	2b00      	cmp	r3, #0
 8014e00:	d10b      	bne.n	8014e1a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8014e02:	69bb      	ldr	r3, [r7, #24]
 8014e04:	881b      	ldrh	r3, [r3, #0]
 8014e06:	461a      	mov	r2, r3
 8014e08:	68fb      	ldr	r3, [r7, #12]
 8014e0a:	681b      	ldr	r3, [r3, #0]
 8014e0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8014e10:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8014e12:	69bb      	ldr	r3, [r7, #24]
 8014e14:	3302      	adds	r3, #2
 8014e16:	61bb      	str	r3, [r7, #24]
 8014e18:	e007      	b.n	8014e2a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8014e1a:	69fb      	ldr	r3, [r7, #28]
 8014e1c:	781a      	ldrb	r2, [r3, #0]
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	681b      	ldr	r3, [r3, #0]
 8014e22:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8014e24:	69fb      	ldr	r3, [r7, #28]
 8014e26:	3301      	adds	r3, #1
 8014e28:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8014e2a:	68fb      	ldr	r3, [r7, #12]
 8014e2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8014e30:	b29b      	uxth	r3, r3
 8014e32:	3b01      	subs	r3, #1
 8014e34:	b29a      	uxth	r2, r3
 8014e36:	68fb      	ldr	r3, [r7, #12]
 8014e38:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8014e3c:	68fb      	ldr	r3, [r7, #12]
 8014e3e:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8014e42:	b29b      	uxth	r3, r3
 8014e44:	2b00      	cmp	r3, #0
 8014e46:	d1c8      	bne.n	8014dda <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8014e48:	683b      	ldr	r3, [r7, #0]
 8014e4a:	9300      	str	r3, [sp, #0]
 8014e4c:	697b      	ldr	r3, [r7, #20]
 8014e4e:	2200      	movs	r2, #0
 8014e50:	2140      	movs	r1, #64	@ 0x40
 8014e52:	68f8      	ldr	r0, [r7, #12]
 8014e54:	f000 fec8 	bl	8015be8 <UART_WaitOnFlagUntilTimeout>
 8014e58:	4603      	mov	r3, r0
 8014e5a:	2b00      	cmp	r3, #0
 8014e5c:	d005      	beq.n	8014e6a <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8014e5e:	68fb      	ldr	r3, [r7, #12]
 8014e60:	2220      	movs	r2, #32
 8014e62:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8014e66:	2303      	movs	r3, #3
 8014e68:	e006      	b.n	8014e78 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8014e6a:	68fb      	ldr	r3, [r7, #12]
 8014e6c:	2220      	movs	r2, #32
 8014e6e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8014e72:	2300      	movs	r3, #0
 8014e74:	e000      	b.n	8014e78 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8014e76:	2302      	movs	r3, #2
  }
}
 8014e78:	4618      	mov	r0, r3
 8014e7a:	3720      	adds	r7, #32
 8014e7c:	46bd      	mov	sp, r7
 8014e7e:	bd80      	pop	{r7, pc}

08014e80 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014e80:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8014e84:	b092      	sub	sp, #72	@ 0x48
 8014e86:	af00      	add	r7, sp, #0
 8014e88:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014e8a:	2300      	movs	r3, #0
 8014e8c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014e90:	697b      	ldr	r3, [r7, #20]
 8014e92:	689a      	ldr	r2, [r3, #8]
 8014e94:	697b      	ldr	r3, [r7, #20]
 8014e96:	691b      	ldr	r3, [r3, #16]
 8014e98:	431a      	orrs	r2, r3
 8014e9a:	697b      	ldr	r3, [r7, #20]
 8014e9c:	695b      	ldr	r3, [r3, #20]
 8014e9e:	431a      	orrs	r2, r3
 8014ea0:	697b      	ldr	r3, [r7, #20]
 8014ea2:	69db      	ldr	r3, [r3, #28]
 8014ea4:	4313      	orrs	r3, r2
 8014ea6:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8014ea8:	697b      	ldr	r3, [r7, #20]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	681a      	ldr	r2, [r3, #0]
 8014eae:	4bbe      	ldr	r3, [pc, #760]	@ (80151a8 <UART_SetConfig+0x328>)
 8014eb0:	4013      	ands	r3, r2
 8014eb2:	697a      	ldr	r2, [r7, #20]
 8014eb4:	6812      	ldr	r2, [r2, #0]
 8014eb6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014eb8:	430b      	orrs	r3, r1
 8014eba:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014ebc:	697b      	ldr	r3, [r7, #20]
 8014ebe:	681b      	ldr	r3, [r3, #0]
 8014ec0:	685b      	ldr	r3, [r3, #4]
 8014ec2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8014ec6:	697b      	ldr	r3, [r7, #20]
 8014ec8:	68da      	ldr	r2, [r3, #12]
 8014eca:	697b      	ldr	r3, [r7, #20]
 8014ecc:	681b      	ldr	r3, [r3, #0]
 8014ece:	430a      	orrs	r2, r1
 8014ed0:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8014ed2:	697b      	ldr	r3, [r7, #20]
 8014ed4:	699b      	ldr	r3, [r3, #24]
 8014ed6:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014ed8:	697b      	ldr	r3, [r7, #20]
 8014eda:	681b      	ldr	r3, [r3, #0]
 8014edc:	4ab3      	ldr	r2, [pc, #716]	@ (80151ac <UART_SetConfig+0x32c>)
 8014ede:	4293      	cmp	r3, r2
 8014ee0:	d004      	beq.n	8014eec <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8014ee2:	697b      	ldr	r3, [r7, #20]
 8014ee4:	6a1b      	ldr	r3, [r3, #32]
 8014ee6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8014ee8:	4313      	orrs	r3, r2
 8014eea:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014eec:	697b      	ldr	r3, [r7, #20]
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	689a      	ldr	r2, [r3, #8]
 8014ef2:	4baf      	ldr	r3, [pc, #700]	@ (80151b0 <UART_SetConfig+0x330>)
 8014ef4:	4013      	ands	r3, r2
 8014ef6:	697a      	ldr	r2, [r7, #20]
 8014ef8:	6812      	ldr	r2, [r2, #0]
 8014efa:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8014efc:	430b      	orrs	r3, r1
 8014efe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8014f00:	697b      	ldr	r3, [r7, #20]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f06:	f023 010f 	bic.w	r1, r3, #15
 8014f0a:	697b      	ldr	r3, [r7, #20]
 8014f0c:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8014f0e:	697b      	ldr	r3, [r7, #20]
 8014f10:	681b      	ldr	r3, [r3, #0]
 8014f12:	430a      	orrs	r2, r1
 8014f14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8014f16:	697b      	ldr	r3, [r7, #20]
 8014f18:	681b      	ldr	r3, [r3, #0]
 8014f1a:	4aa6      	ldr	r2, [pc, #664]	@ (80151b4 <UART_SetConfig+0x334>)
 8014f1c:	4293      	cmp	r3, r2
 8014f1e:	d177      	bne.n	8015010 <UART_SetConfig+0x190>
 8014f20:	4ba5      	ldr	r3, [pc, #660]	@ (80151b8 <UART_SetConfig+0x338>)
 8014f22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f24:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8014f28:	2b28      	cmp	r3, #40	@ 0x28
 8014f2a:	d86d      	bhi.n	8015008 <UART_SetConfig+0x188>
 8014f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8014f34 <UART_SetConfig+0xb4>)
 8014f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8014f32:	bf00      	nop
 8014f34:	08014fd9 	.word	0x08014fd9
 8014f38:	08015009 	.word	0x08015009
 8014f3c:	08015009 	.word	0x08015009
 8014f40:	08015009 	.word	0x08015009
 8014f44:	08015009 	.word	0x08015009
 8014f48:	08015009 	.word	0x08015009
 8014f4c:	08015009 	.word	0x08015009
 8014f50:	08015009 	.word	0x08015009
 8014f54:	08014fe1 	.word	0x08014fe1
 8014f58:	08015009 	.word	0x08015009
 8014f5c:	08015009 	.word	0x08015009
 8014f60:	08015009 	.word	0x08015009
 8014f64:	08015009 	.word	0x08015009
 8014f68:	08015009 	.word	0x08015009
 8014f6c:	08015009 	.word	0x08015009
 8014f70:	08015009 	.word	0x08015009
 8014f74:	08014fe9 	.word	0x08014fe9
 8014f78:	08015009 	.word	0x08015009
 8014f7c:	08015009 	.word	0x08015009
 8014f80:	08015009 	.word	0x08015009
 8014f84:	08015009 	.word	0x08015009
 8014f88:	08015009 	.word	0x08015009
 8014f8c:	08015009 	.word	0x08015009
 8014f90:	08015009 	.word	0x08015009
 8014f94:	08014ff1 	.word	0x08014ff1
 8014f98:	08015009 	.word	0x08015009
 8014f9c:	08015009 	.word	0x08015009
 8014fa0:	08015009 	.word	0x08015009
 8014fa4:	08015009 	.word	0x08015009
 8014fa8:	08015009 	.word	0x08015009
 8014fac:	08015009 	.word	0x08015009
 8014fb0:	08015009 	.word	0x08015009
 8014fb4:	08014ff9 	.word	0x08014ff9
 8014fb8:	08015009 	.word	0x08015009
 8014fbc:	08015009 	.word	0x08015009
 8014fc0:	08015009 	.word	0x08015009
 8014fc4:	08015009 	.word	0x08015009
 8014fc8:	08015009 	.word	0x08015009
 8014fcc:	08015009 	.word	0x08015009
 8014fd0:	08015009 	.word	0x08015009
 8014fd4:	08015001 	.word	0x08015001
 8014fd8:	2301      	movs	r3, #1
 8014fda:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014fde:	e222      	b.n	8015426 <UART_SetConfig+0x5a6>
 8014fe0:	2304      	movs	r3, #4
 8014fe2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014fe6:	e21e      	b.n	8015426 <UART_SetConfig+0x5a6>
 8014fe8:	2308      	movs	r3, #8
 8014fea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014fee:	e21a      	b.n	8015426 <UART_SetConfig+0x5a6>
 8014ff0:	2310      	movs	r3, #16
 8014ff2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ff6:	e216      	b.n	8015426 <UART_SetConfig+0x5a6>
 8014ff8:	2320      	movs	r3, #32
 8014ffa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8014ffe:	e212      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015000:	2340      	movs	r3, #64	@ 0x40
 8015002:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015006:	e20e      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015008:	2380      	movs	r3, #128	@ 0x80
 801500a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801500e:	e20a      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015010:	697b      	ldr	r3, [r7, #20]
 8015012:	681b      	ldr	r3, [r3, #0]
 8015014:	4a69      	ldr	r2, [pc, #420]	@ (80151bc <UART_SetConfig+0x33c>)
 8015016:	4293      	cmp	r3, r2
 8015018:	d130      	bne.n	801507c <UART_SetConfig+0x1fc>
 801501a:	4b67      	ldr	r3, [pc, #412]	@ (80151b8 <UART_SetConfig+0x338>)
 801501c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801501e:	f003 0307 	and.w	r3, r3, #7
 8015022:	2b05      	cmp	r3, #5
 8015024:	d826      	bhi.n	8015074 <UART_SetConfig+0x1f4>
 8015026:	a201      	add	r2, pc, #4	@ (adr r2, 801502c <UART_SetConfig+0x1ac>)
 8015028:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801502c:	08015045 	.word	0x08015045
 8015030:	0801504d 	.word	0x0801504d
 8015034:	08015055 	.word	0x08015055
 8015038:	0801505d 	.word	0x0801505d
 801503c:	08015065 	.word	0x08015065
 8015040:	0801506d 	.word	0x0801506d
 8015044:	2300      	movs	r3, #0
 8015046:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801504a:	e1ec      	b.n	8015426 <UART_SetConfig+0x5a6>
 801504c:	2304      	movs	r3, #4
 801504e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015052:	e1e8      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015054:	2308      	movs	r3, #8
 8015056:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801505a:	e1e4      	b.n	8015426 <UART_SetConfig+0x5a6>
 801505c:	2310      	movs	r3, #16
 801505e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015062:	e1e0      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015064:	2320      	movs	r3, #32
 8015066:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801506a:	e1dc      	b.n	8015426 <UART_SetConfig+0x5a6>
 801506c:	2340      	movs	r3, #64	@ 0x40
 801506e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015072:	e1d8      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015074:	2380      	movs	r3, #128	@ 0x80
 8015076:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801507a:	e1d4      	b.n	8015426 <UART_SetConfig+0x5a6>
 801507c:	697b      	ldr	r3, [r7, #20]
 801507e:	681b      	ldr	r3, [r3, #0]
 8015080:	4a4f      	ldr	r2, [pc, #316]	@ (80151c0 <UART_SetConfig+0x340>)
 8015082:	4293      	cmp	r3, r2
 8015084:	d130      	bne.n	80150e8 <UART_SetConfig+0x268>
 8015086:	4b4c      	ldr	r3, [pc, #304]	@ (80151b8 <UART_SetConfig+0x338>)
 8015088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801508a:	f003 0307 	and.w	r3, r3, #7
 801508e:	2b05      	cmp	r3, #5
 8015090:	d826      	bhi.n	80150e0 <UART_SetConfig+0x260>
 8015092:	a201      	add	r2, pc, #4	@ (adr r2, 8015098 <UART_SetConfig+0x218>)
 8015094:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015098:	080150b1 	.word	0x080150b1
 801509c:	080150b9 	.word	0x080150b9
 80150a0:	080150c1 	.word	0x080150c1
 80150a4:	080150c9 	.word	0x080150c9
 80150a8:	080150d1 	.word	0x080150d1
 80150ac:	080150d9 	.word	0x080150d9
 80150b0:	2300      	movs	r3, #0
 80150b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150b6:	e1b6      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150b8:	2304      	movs	r3, #4
 80150ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150be:	e1b2      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150c0:	2308      	movs	r3, #8
 80150c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150c6:	e1ae      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150c8:	2310      	movs	r3, #16
 80150ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150ce:	e1aa      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150d0:	2320      	movs	r3, #32
 80150d2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150d6:	e1a6      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150d8:	2340      	movs	r3, #64	@ 0x40
 80150da:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150de:	e1a2      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150e0:	2380      	movs	r3, #128	@ 0x80
 80150e2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80150e6:	e19e      	b.n	8015426 <UART_SetConfig+0x5a6>
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	4a35      	ldr	r2, [pc, #212]	@ (80151c4 <UART_SetConfig+0x344>)
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d130      	bne.n	8015154 <UART_SetConfig+0x2d4>
 80150f2:	4b31      	ldr	r3, [pc, #196]	@ (80151b8 <UART_SetConfig+0x338>)
 80150f4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80150f6:	f003 0307 	and.w	r3, r3, #7
 80150fa:	2b05      	cmp	r3, #5
 80150fc:	d826      	bhi.n	801514c <UART_SetConfig+0x2cc>
 80150fe:	a201      	add	r2, pc, #4	@ (adr r2, 8015104 <UART_SetConfig+0x284>)
 8015100:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015104:	0801511d 	.word	0x0801511d
 8015108:	08015125 	.word	0x08015125
 801510c:	0801512d 	.word	0x0801512d
 8015110:	08015135 	.word	0x08015135
 8015114:	0801513d 	.word	0x0801513d
 8015118:	08015145 	.word	0x08015145
 801511c:	2300      	movs	r3, #0
 801511e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015122:	e180      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015124:	2304      	movs	r3, #4
 8015126:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801512a:	e17c      	b.n	8015426 <UART_SetConfig+0x5a6>
 801512c:	2308      	movs	r3, #8
 801512e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015132:	e178      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015134:	2310      	movs	r3, #16
 8015136:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801513a:	e174      	b.n	8015426 <UART_SetConfig+0x5a6>
 801513c:	2320      	movs	r3, #32
 801513e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015142:	e170      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015144:	2340      	movs	r3, #64	@ 0x40
 8015146:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801514a:	e16c      	b.n	8015426 <UART_SetConfig+0x5a6>
 801514c:	2380      	movs	r3, #128	@ 0x80
 801514e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015152:	e168      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015154:	697b      	ldr	r3, [r7, #20]
 8015156:	681b      	ldr	r3, [r3, #0]
 8015158:	4a1b      	ldr	r2, [pc, #108]	@ (80151c8 <UART_SetConfig+0x348>)
 801515a:	4293      	cmp	r3, r2
 801515c:	d142      	bne.n	80151e4 <UART_SetConfig+0x364>
 801515e:	4b16      	ldr	r3, [pc, #88]	@ (80151b8 <UART_SetConfig+0x338>)
 8015160:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015162:	f003 0307 	and.w	r3, r3, #7
 8015166:	2b05      	cmp	r3, #5
 8015168:	d838      	bhi.n	80151dc <UART_SetConfig+0x35c>
 801516a:	a201      	add	r2, pc, #4	@ (adr r2, 8015170 <UART_SetConfig+0x2f0>)
 801516c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015170:	08015189 	.word	0x08015189
 8015174:	08015191 	.word	0x08015191
 8015178:	08015199 	.word	0x08015199
 801517c:	080151a1 	.word	0x080151a1
 8015180:	080151cd 	.word	0x080151cd
 8015184:	080151d5 	.word	0x080151d5
 8015188:	2300      	movs	r3, #0
 801518a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801518e:	e14a      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015190:	2304      	movs	r3, #4
 8015192:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015196:	e146      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015198:	2308      	movs	r3, #8
 801519a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801519e:	e142      	b.n	8015426 <UART_SetConfig+0x5a6>
 80151a0:	2310      	movs	r3, #16
 80151a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151a6:	e13e      	b.n	8015426 <UART_SetConfig+0x5a6>
 80151a8:	cfff69f3 	.word	0xcfff69f3
 80151ac:	58000c00 	.word	0x58000c00
 80151b0:	11fff4ff 	.word	0x11fff4ff
 80151b4:	40011000 	.word	0x40011000
 80151b8:	58024400 	.word	0x58024400
 80151bc:	40004400 	.word	0x40004400
 80151c0:	40004800 	.word	0x40004800
 80151c4:	40004c00 	.word	0x40004c00
 80151c8:	40005000 	.word	0x40005000
 80151cc:	2320      	movs	r3, #32
 80151ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151d2:	e128      	b.n	8015426 <UART_SetConfig+0x5a6>
 80151d4:	2340      	movs	r3, #64	@ 0x40
 80151d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151da:	e124      	b.n	8015426 <UART_SetConfig+0x5a6>
 80151dc:	2380      	movs	r3, #128	@ 0x80
 80151de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80151e2:	e120      	b.n	8015426 <UART_SetConfig+0x5a6>
 80151e4:	697b      	ldr	r3, [r7, #20]
 80151e6:	681b      	ldr	r3, [r3, #0]
 80151e8:	4acb      	ldr	r2, [pc, #812]	@ (8015518 <UART_SetConfig+0x698>)
 80151ea:	4293      	cmp	r3, r2
 80151ec:	d176      	bne.n	80152dc <UART_SetConfig+0x45c>
 80151ee:	4bcb      	ldr	r3, [pc, #812]	@ (801551c <UART_SetConfig+0x69c>)
 80151f0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80151f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80151f6:	2b28      	cmp	r3, #40	@ 0x28
 80151f8:	d86c      	bhi.n	80152d4 <UART_SetConfig+0x454>
 80151fa:	a201      	add	r2, pc, #4	@ (adr r2, 8015200 <UART_SetConfig+0x380>)
 80151fc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015200:	080152a5 	.word	0x080152a5
 8015204:	080152d5 	.word	0x080152d5
 8015208:	080152d5 	.word	0x080152d5
 801520c:	080152d5 	.word	0x080152d5
 8015210:	080152d5 	.word	0x080152d5
 8015214:	080152d5 	.word	0x080152d5
 8015218:	080152d5 	.word	0x080152d5
 801521c:	080152d5 	.word	0x080152d5
 8015220:	080152ad 	.word	0x080152ad
 8015224:	080152d5 	.word	0x080152d5
 8015228:	080152d5 	.word	0x080152d5
 801522c:	080152d5 	.word	0x080152d5
 8015230:	080152d5 	.word	0x080152d5
 8015234:	080152d5 	.word	0x080152d5
 8015238:	080152d5 	.word	0x080152d5
 801523c:	080152d5 	.word	0x080152d5
 8015240:	080152b5 	.word	0x080152b5
 8015244:	080152d5 	.word	0x080152d5
 8015248:	080152d5 	.word	0x080152d5
 801524c:	080152d5 	.word	0x080152d5
 8015250:	080152d5 	.word	0x080152d5
 8015254:	080152d5 	.word	0x080152d5
 8015258:	080152d5 	.word	0x080152d5
 801525c:	080152d5 	.word	0x080152d5
 8015260:	080152bd 	.word	0x080152bd
 8015264:	080152d5 	.word	0x080152d5
 8015268:	080152d5 	.word	0x080152d5
 801526c:	080152d5 	.word	0x080152d5
 8015270:	080152d5 	.word	0x080152d5
 8015274:	080152d5 	.word	0x080152d5
 8015278:	080152d5 	.word	0x080152d5
 801527c:	080152d5 	.word	0x080152d5
 8015280:	080152c5 	.word	0x080152c5
 8015284:	080152d5 	.word	0x080152d5
 8015288:	080152d5 	.word	0x080152d5
 801528c:	080152d5 	.word	0x080152d5
 8015290:	080152d5 	.word	0x080152d5
 8015294:	080152d5 	.word	0x080152d5
 8015298:	080152d5 	.word	0x080152d5
 801529c:	080152d5 	.word	0x080152d5
 80152a0:	080152cd 	.word	0x080152cd
 80152a4:	2301      	movs	r3, #1
 80152a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152aa:	e0bc      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152ac:	2304      	movs	r3, #4
 80152ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152b2:	e0b8      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152b4:	2308      	movs	r3, #8
 80152b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152ba:	e0b4      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152bc:	2310      	movs	r3, #16
 80152be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152c2:	e0b0      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152c4:	2320      	movs	r3, #32
 80152c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152ca:	e0ac      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152cc:	2340      	movs	r3, #64	@ 0x40
 80152ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152d2:	e0a8      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152d4:	2380      	movs	r3, #128	@ 0x80
 80152d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80152da:	e0a4      	b.n	8015426 <UART_SetConfig+0x5a6>
 80152dc:	697b      	ldr	r3, [r7, #20]
 80152de:	681b      	ldr	r3, [r3, #0]
 80152e0:	4a8f      	ldr	r2, [pc, #572]	@ (8015520 <UART_SetConfig+0x6a0>)
 80152e2:	4293      	cmp	r3, r2
 80152e4:	d130      	bne.n	8015348 <UART_SetConfig+0x4c8>
 80152e6:	4b8d      	ldr	r3, [pc, #564]	@ (801551c <UART_SetConfig+0x69c>)
 80152e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80152ea:	f003 0307 	and.w	r3, r3, #7
 80152ee:	2b05      	cmp	r3, #5
 80152f0:	d826      	bhi.n	8015340 <UART_SetConfig+0x4c0>
 80152f2:	a201      	add	r2, pc, #4	@ (adr r2, 80152f8 <UART_SetConfig+0x478>)
 80152f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80152f8:	08015311 	.word	0x08015311
 80152fc:	08015319 	.word	0x08015319
 8015300:	08015321 	.word	0x08015321
 8015304:	08015329 	.word	0x08015329
 8015308:	08015331 	.word	0x08015331
 801530c:	08015339 	.word	0x08015339
 8015310:	2300      	movs	r3, #0
 8015312:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015316:	e086      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015318:	2304      	movs	r3, #4
 801531a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801531e:	e082      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015320:	2308      	movs	r3, #8
 8015322:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015326:	e07e      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015328:	2310      	movs	r3, #16
 801532a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801532e:	e07a      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015330:	2320      	movs	r3, #32
 8015332:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015336:	e076      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015338:	2340      	movs	r3, #64	@ 0x40
 801533a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801533e:	e072      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015340:	2380      	movs	r3, #128	@ 0x80
 8015342:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015346:	e06e      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015348:	697b      	ldr	r3, [r7, #20]
 801534a:	681b      	ldr	r3, [r3, #0]
 801534c:	4a75      	ldr	r2, [pc, #468]	@ (8015524 <UART_SetConfig+0x6a4>)
 801534e:	4293      	cmp	r3, r2
 8015350:	d130      	bne.n	80153b4 <UART_SetConfig+0x534>
 8015352:	4b72      	ldr	r3, [pc, #456]	@ (801551c <UART_SetConfig+0x69c>)
 8015354:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015356:	f003 0307 	and.w	r3, r3, #7
 801535a:	2b05      	cmp	r3, #5
 801535c:	d826      	bhi.n	80153ac <UART_SetConfig+0x52c>
 801535e:	a201      	add	r2, pc, #4	@ (adr r2, 8015364 <UART_SetConfig+0x4e4>)
 8015360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015364:	0801537d 	.word	0x0801537d
 8015368:	08015385 	.word	0x08015385
 801536c:	0801538d 	.word	0x0801538d
 8015370:	08015395 	.word	0x08015395
 8015374:	0801539d 	.word	0x0801539d
 8015378:	080153a5 	.word	0x080153a5
 801537c:	2300      	movs	r3, #0
 801537e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015382:	e050      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015384:	2304      	movs	r3, #4
 8015386:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801538a:	e04c      	b.n	8015426 <UART_SetConfig+0x5a6>
 801538c:	2308      	movs	r3, #8
 801538e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015392:	e048      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015394:	2310      	movs	r3, #16
 8015396:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801539a:	e044      	b.n	8015426 <UART_SetConfig+0x5a6>
 801539c:	2320      	movs	r3, #32
 801539e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153a2:	e040      	b.n	8015426 <UART_SetConfig+0x5a6>
 80153a4:	2340      	movs	r3, #64	@ 0x40
 80153a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153aa:	e03c      	b.n	8015426 <UART_SetConfig+0x5a6>
 80153ac:	2380      	movs	r3, #128	@ 0x80
 80153ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153b2:	e038      	b.n	8015426 <UART_SetConfig+0x5a6>
 80153b4:	697b      	ldr	r3, [r7, #20]
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	4a5b      	ldr	r2, [pc, #364]	@ (8015528 <UART_SetConfig+0x6a8>)
 80153ba:	4293      	cmp	r3, r2
 80153bc:	d130      	bne.n	8015420 <UART_SetConfig+0x5a0>
 80153be:	4b57      	ldr	r3, [pc, #348]	@ (801551c <UART_SetConfig+0x69c>)
 80153c0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80153c2:	f003 0307 	and.w	r3, r3, #7
 80153c6:	2b05      	cmp	r3, #5
 80153c8:	d826      	bhi.n	8015418 <UART_SetConfig+0x598>
 80153ca:	a201      	add	r2, pc, #4	@ (adr r2, 80153d0 <UART_SetConfig+0x550>)
 80153cc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80153d0:	080153e9 	.word	0x080153e9
 80153d4:	080153f1 	.word	0x080153f1
 80153d8:	080153f9 	.word	0x080153f9
 80153dc:	08015401 	.word	0x08015401
 80153e0:	08015409 	.word	0x08015409
 80153e4:	08015411 	.word	0x08015411
 80153e8:	2302      	movs	r3, #2
 80153ea:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153ee:	e01a      	b.n	8015426 <UART_SetConfig+0x5a6>
 80153f0:	2304      	movs	r3, #4
 80153f2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153f6:	e016      	b.n	8015426 <UART_SetConfig+0x5a6>
 80153f8:	2308      	movs	r3, #8
 80153fa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80153fe:	e012      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015400:	2310      	movs	r3, #16
 8015402:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015406:	e00e      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015408:	2320      	movs	r3, #32
 801540a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801540e:	e00a      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015410:	2340      	movs	r3, #64	@ 0x40
 8015412:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8015416:	e006      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015418:	2380      	movs	r3, #128	@ 0x80
 801541a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 801541e:	e002      	b.n	8015426 <UART_SetConfig+0x5a6>
 8015420:	2380      	movs	r3, #128	@ 0x80
 8015422:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8015426:	697b      	ldr	r3, [r7, #20]
 8015428:	681b      	ldr	r3, [r3, #0]
 801542a:	4a3f      	ldr	r2, [pc, #252]	@ (8015528 <UART_SetConfig+0x6a8>)
 801542c:	4293      	cmp	r3, r2
 801542e:	f040 80f8 	bne.w	8015622 <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8015432:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015436:	2b20      	cmp	r3, #32
 8015438:	dc46      	bgt.n	80154c8 <UART_SetConfig+0x648>
 801543a:	2b02      	cmp	r3, #2
 801543c:	f2c0 8082 	blt.w	8015544 <UART_SetConfig+0x6c4>
 8015440:	3b02      	subs	r3, #2
 8015442:	2b1e      	cmp	r3, #30
 8015444:	d87e      	bhi.n	8015544 <UART_SetConfig+0x6c4>
 8015446:	a201      	add	r2, pc, #4	@ (adr r2, 801544c <UART_SetConfig+0x5cc>)
 8015448:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801544c:	080154cf 	.word	0x080154cf
 8015450:	08015545 	.word	0x08015545
 8015454:	080154d7 	.word	0x080154d7
 8015458:	08015545 	.word	0x08015545
 801545c:	08015545 	.word	0x08015545
 8015460:	08015545 	.word	0x08015545
 8015464:	080154e7 	.word	0x080154e7
 8015468:	08015545 	.word	0x08015545
 801546c:	08015545 	.word	0x08015545
 8015470:	08015545 	.word	0x08015545
 8015474:	08015545 	.word	0x08015545
 8015478:	08015545 	.word	0x08015545
 801547c:	08015545 	.word	0x08015545
 8015480:	08015545 	.word	0x08015545
 8015484:	080154f7 	.word	0x080154f7
 8015488:	08015545 	.word	0x08015545
 801548c:	08015545 	.word	0x08015545
 8015490:	08015545 	.word	0x08015545
 8015494:	08015545 	.word	0x08015545
 8015498:	08015545 	.word	0x08015545
 801549c:	08015545 	.word	0x08015545
 80154a0:	08015545 	.word	0x08015545
 80154a4:	08015545 	.word	0x08015545
 80154a8:	08015545 	.word	0x08015545
 80154ac:	08015545 	.word	0x08015545
 80154b0:	08015545 	.word	0x08015545
 80154b4:	08015545 	.word	0x08015545
 80154b8:	08015545 	.word	0x08015545
 80154bc:	08015545 	.word	0x08015545
 80154c0:	08015545 	.word	0x08015545
 80154c4:	08015537 	.word	0x08015537
 80154c8:	2b40      	cmp	r3, #64	@ 0x40
 80154ca:	d037      	beq.n	801553c <UART_SetConfig+0x6bc>
 80154cc:	e03a      	b.n	8015544 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80154ce:	f7fd fa0d 	bl	80128ec <HAL_RCCEx_GetD3PCLK1Freq>
 80154d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80154d4:	e03c      	b.n	8015550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80154d6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80154da:	4618      	mov	r0, r3
 80154dc:	f7fd fa1c 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80154e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80154e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80154e4:	e034      	b.n	8015550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80154e6:	f107 0318 	add.w	r3, r7, #24
 80154ea:	4618      	mov	r0, r3
 80154ec:	f7fd fb68 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80154f0:	69fb      	ldr	r3, [r7, #28]
 80154f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80154f4:	e02c      	b.n	8015550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80154f6:	4b09      	ldr	r3, [pc, #36]	@ (801551c <UART_SetConfig+0x69c>)
 80154f8:	681b      	ldr	r3, [r3, #0]
 80154fa:	f003 0320 	and.w	r3, r3, #32
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d016      	beq.n	8015530 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015502:	4b06      	ldr	r3, [pc, #24]	@ (801551c <UART_SetConfig+0x69c>)
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	08db      	lsrs	r3, r3, #3
 8015508:	f003 0303 	and.w	r3, r3, #3
 801550c:	4a07      	ldr	r2, [pc, #28]	@ (801552c <UART_SetConfig+0x6ac>)
 801550e:	fa22 f303 	lsr.w	r3, r2, r3
 8015512:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8015514:	e01c      	b.n	8015550 <UART_SetConfig+0x6d0>
 8015516:	bf00      	nop
 8015518:	40011400 	.word	0x40011400
 801551c:	58024400 	.word	0x58024400
 8015520:	40007800 	.word	0x40007800
 8015524:	40007c00 	.word	0x40007c00
 8015528:	58000c00 	.word	0x58000c00
 801552c:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8015530:	4b9d      	ldr	r3, [pc, #628]	@ (80157a8 <UART_SetConfig+0x928>)
 8015532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015534:	e00c      	b.n	8015550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015536:	4b9d      	ldr	r3, [pc, #628]	@ (80157ac <UART_SetConfig+0x92c>)
 8015538:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801553a:	e009      	b.n	8015550 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801553c:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8015540:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015542:	e005      	b.n	8015550 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8015544:	2300      	movs	r3, #0
 8015546:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8015548:	2301      	movs	r3, #1
 801554a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801554e:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8015550:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015552:	2b00      	cmp	r3, #0
 8015554:	f000 81de 	beq.w	8015914 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8015558:	697b      	ldr	r3, [r7, #20]
 801555a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801555c:	4a94      	ldr	r2, [pc, #592]	@ (80157b0 <UART_SetConfig+0x930>)
 801555e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015562:	461a      	mov	r2, r3
 8015564:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015566:	fbb3 f3f2 	udiv	r3, r3, r2
 801556a:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 801556c:	697b      	ldr	r3, [r7, #20]
 801556e:	685a      	ldr	r2, [r3, #4]
 8015570:	4613      	mov	r3, r2
 8015572:	005b      	lsls	r3, r3, #1
 8015574:	4413      	add	r3, r2
 8015576:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015578:	429a      	cmp	r2, r3
 801557a:	d305      	bcc.n	8015588 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	685b      	ldr	r3, [r3, #4]
 8015580:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8015582:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015584:	429a      	cmp	r2, r3
 8015586:	d903      	bls.n	8015590 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8015588:	2301      	movs	r3, #1
 801558a:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 801558e:	e1c1      	b.n	8015914 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015592:	2200      	movs	r2, #0
 8015594:	60bb      	str	r3, [r7, #8]
 8015596:	60fa      	str	r2, [r7, #12]
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801559c:	4a84      	ldr	r2, [pc, #528]	@ (80157b0 <UART_SetConfig+0x930>)
 801559e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80155a2:	b29b      	uxth	r3, r3
 80155a4:	2200      	movs	r2, #0
 80155a6:	603b      	str	r3, [r7, #0]
 80155a8:	607a      	str	r2, [r7, #4]
 80155aa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80155ae:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80155b2:	f7ea fee5 	bl	8000380 <__aeabi_uldivmod>
 80155b6:	4602      	mov	r2, r0
 80155b8:	460b      	mov	r3, r1
 80155ba:	4610      	mov	r0, r2
 80155bc:	4619      	mov	r1, r3
 80155be:	f04f 0200 	mov.w	r2, #0
 80155c2:	f04f 0300 	mov.w	r3, #0
 80155c6:	020b      	lsls	r3, r1, #8
 80155c8:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80155cc:	0202      	lsls	r2, r0, #8
 80155ce:	6979      	ldr	r1, [r7, #20]
 80155d0:	6849      	ldr	r1, [r1, #4]
 80155d2:	0849      	lsrs	r1, r1, #1
 80155d4:	2000      	movs	r0, #0
 80155d6:	460c      	mov	r4, r1
 80155d8:	4605      	mov	r5, r0
 80155da:	eb12 0804 	adds.w	r8, r2, r4
 80155de:	eb43 0905 	adc.w	r9, r3, r5
 80155e2:	697b      	ldr	r3, [r7, #20]
 80155e4:	685b      	ldr	r3, [r3, #4]
 80155e6:	2200      	movs	r2, #0
 80155e8:	469a      	mov	sl, r3
 80155ea:	4693      	mov	fp, r2
 80155ec:	4652      	mov	r2, sl
 80155ee:	465b      	mov	r3, fp
 80155f0:	4640      	mov	r0, r8
 80155f2:	4649      	mov	r1, r9
 80155f4:	f7ea fec4 	bl	8000380 <__aeabi_uldivmod>
 80155f8:	4602      	mov	r2, r0
 80155fa:	460b      	mov	r3, r1
 80155fc:	4613      	mov	r3, r2
 80155fe:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8015600:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015602:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8015606:	d308      	bcc.n	801561a <UART_SetConfig+0x79a>
 8015608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801560a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801560e:	d204      	bcs.n	801561a <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8015610:	697b      	ldr	r3, [r7, #20]
 8015612:	681b      	ldr	r3, [r3, #0]
 8015614:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8015616:	60da      	str	r2, [r3, #12]
 8015618:	e17c      	b.n	8015914 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 801561a:	2301      	movs	r3, #1
 801561c:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8015620:	e178      	b.n	8015914 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8015622:	697b      	ldr	r3, [r7, #20]
 8015624:	69db      	ldr	r3, [r3, #28]
 8015626:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801562a:	f040 80c5 	bne.w	80157b8 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 801562e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8015632:	2b20      	cmp	r3, #32
 8015634:	dc48      	bgt.n	80156c8 <UART_SetConfig+0x848>
 8015636:	2b00      	cmp	r3, #0
 8015638:	db7b      	blt.n	8015732 <UART_SetConfig+0x8b2>
 801563a:	2b20      	cmp	r3, #32
 801563c:	d879      	bhi.n	8015732 <UART_SetConfig+0x8b2>
 801563e:	a201      	add	r2, pc, #4	@ (adr r2, 8015644 <UART_SetConfig+0x7c4>)
 8015640:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015644:	080156cf 	.word	0x080156cf
 8015648:	080156d7 	.word	0x080156d7
 801564c:	08015733 	.word	0x08015733
 8015650:	08015733 	.word	0x08015733
 8015654:	080156df 	.word	0x080156df
 8015658:	08015733 	.word	0x08015733
 801565c:	08015733 	.word	0x08015733
 8015660:	08015733 	.word	0x08015733
 8015664:	080156ef 	.word	0x080156ef
 8015668:	08015733 	.word	0x08015733
 801566c:	08015733 	.word	0x08015733
 8015670:	08015733 	.word	0x08015733
 8015674:	08015733 	.word	0x08015733
 8015678:	08015733 	.word	0x08015733
 801567c:	08015733 	.word	0x08015733
 8015680:	08015733 	.word	0x08015733
 8015684:	080156ff 	.word	0x080156ff
 8015688:	08015733 	.word	0x08015733
 801568c:	08015733 	.word	0x08015733
 8015690:	08015733 	.word	0x08015733
 8015694:	08015733 	.word	0x08015733
 8015698:	08015733 	.word	0x08015733
 801569c:	08015733 	.word	0x08015733
 80156a0:	08015733 	.word	0x08015733
 80156a4:	08015733 	.word	0x08015733
 80156a8:	08015733 	.word	0x08015733
 80156ac:	08015733 	.word	0x08015733
 80156b0:	08015733 	.word	0x08015733
 80156b4:	08015733 	.word	0x08015733
 80156b8:	08015733 	.word	0x08015733
 80156bc:	08015733 	.word	0x08015733
 80156c0:	08015733 	.word	0x08015733
 80156c4:	08015725 	.word	0x08015725
 80156c8:	2b40      	cmp	r3, #64	@ 0x40
 80156ca:	d02e      	beq.n	801572a <UART_SetConfig+0x8aa>
 80156cc:	e031      	b.n	8015732 <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80156ce:	f7fa ff2f 	bl	8010530 <HAL_RCC_GetPCLK1Freq>
 80156d2:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80156d4:	e033      	b.n	801573e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80156d6:	f7fa ff41 	bl	801055c <HAL_RCC_GetPCLK2Freq>
 80156da:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 80156dc:	e02f      	b.n	801573e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80156de:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80156e2:	4618      	mov	r0, r3
 80156e4:	f7fd f918 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80156e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80156ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80156ec:	e027      	b.n	801573e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80156ee:	f107 0318 	add.w	r3, r7, #24
 80156f2:	4618      	mov	r0, r3
 80156f4:	f7fd fa64 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 80156f8:	69fb      	ldr	r3, [r7, #28]
 80156fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80156fc:	e01f      	b.n	801573e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80156fe:	4b2d      	ldr	r3, [pc, #180]	@ (80157b4 <UART_SetConfig+0x934>)
 8015700:	681b      	ldr	r3, [r3, #0]
 8015702:	f003 0320 	and.w	r3, r3, #32
 8015706:	2b00      	cmp	r3, #0
 8015708:	d009      	beq.n	801571e <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 801570a:	4b2a      	ldr	r3, [pc, #168]	@ (80157b4 <UART_SetConfig+0x934>)
 801570c:	681b      	ldr	r3, [r3, #0]
 801570e:	08db      	lsrs	r3, r3, #3
 8015710:	f003 0303 	and.w	r3, r3, #3
 8015714:	4a24      	ldr	r2, [pc, #144]	@ (80157a8 <UART_SetConfig+0x928>)
 8015716:	fa22 f303 	lsr.w	r3, r2, r3
 801571a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801571c:	e00f      	b.n	801573e <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 801571e:	4b22      	ldr	r3, [pc, #136]	@ (80157a8 <UART_SetConfig+0x928>)
 8015720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015722:	e00c      	b.n	801573e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8015724:	4b21      	ldr	r3, [pc, #132]	@ (80157ac <UART_SetConfig+0x92c>)
 8015726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015728:	e009      	b.n	801573e <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 801572a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 801572e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015730:	e005      	b.n	801573e <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8015732:	2300      	movs	r3, #0
 8015734:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8015736:	2301      	movs	r3, #1
 8015738:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 801573c:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 801573e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015740:	2b00      	cmp	r3, #0
 8015742:	f000 80e7 	beq.w	8015914 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8015746:	697b      	ldr	r3, [r7, #20]
 8015748:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801574a:	4a19      	ldr	r2, [pc, #100]	@ (80157b0 <UART_SetConfig+0x930>)
 801574c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8015750:	461a      	mov	r2, r3
 8015752:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015754:	fbb3 f3f2 	udiv	r3, r3, r2
 8015758:	005a      	lsls	r2, r3, #1
 801575a:	697b      	ldr	r3, [r7, #20]
 801575c:	685b      	ldr	r3, [r3, #4]
 801575e:	085b      	lsrs	r3, r3, #1
 8015760:	441a      	add	r2, r3
 8015762:	697b      	ldr	r3, [r7, #20]
 8015764:	685b      	ldr	r3, [r3, #4]
 8015766:	fbb2 f3f3 	udiv	r3, r2, r3
 801576a:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 801576c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801576e:	2b0f      	cmp	r3, #15
 8015770:	d916      	bls.n	80157a0 <UART_SetConfig+0x920>
 8015772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015774:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015778:	d212      	bcs.n	80157a0 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 801577a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801577c:	b29b      	uxth	r3, r3
 801577e:	f023 030f 	bic.w	r3, r3, #15
 8015782:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8015784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015786:	085b      	lsrs	r3, r3, #1
 8015788:	b29b      	uxth	r3, r3
 801578a:	f003 0307 	and.w	r3, r3, #7
 801578e:	b29a      	uxth	r2, r3
 8015790:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8015792:	4313      	orrs	r3, r2
 8015794:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8015796:	697b      	ldr	r3, [r7, #20]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 801579c:	60da      	str	r2, [r3, #12]
 801579e:	e0b9      	b.n	8015914 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80157a0:	2301      	movs	r3, #1
 80157a2:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 80157a6:	e0b5      	b.n	8015914 <UART_SetConfig+0xa94>
 80157a8:	03d09000 	.word	0x03d09000
 80157ac:	003d0900 	.word	0x003d0900
 80157b0:	08020c68 	.word	0x08020c68
 80157b4:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80157b8:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 80157bc:	2b20      	cmp	r3, #32
 80157be:	dc49      	bgt.n	8015854 <UART_SetConfig+0x9d4>
 80157c0:	2b00      	cmp	r3, #0
 80157c2:	db7c      	blt.n	80158be <UART_SetConfig+0xa3e>
 80157c4:	2b20      	cmp	r3, #32
 80157c6:	d87a      	bhi.n	80158be <UART_SetConfig+0xa3e>
 80157c8:	a201      	add	r2, pc, #4	@ (adr r2, 80157d0 <UART_SetConfig+0x950>)
 80157ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80157ce:	bf00      	nop
 80157d0:	0801585b 	.word	0x0801585b
 80157d4:	08015863 	.word	0x08015863
 80157d8:	080158bf 	.word	0x080158bf
 80157dc:	080158bf 	.word	0x080158bf
 80157e0:	0801586b 	.word	0x0801586b
 80157e4:	080158bf 	.word	0x080158bf
 80157e8:	080158bf 	.word	0x080158bf
 80157ec:	080158bf 	.word	0x080158bf
 80157f0:	0801587b 	.word	0x0801587b
 80157f4:	080158bf 	.word	0x080158bf
 80157f8:	080158bf 	.word	0x080158bf
 80157fc:	080158bf 	.word	0x080158bf
 8015800:	080158bf 	.word	0x080158bf
 8015804:	080158bf 	.word	0x080158bf
 8015808:	080158bf 	.word	0x080158bf
 801580c:	080158bf 	.word	0x080158bf
 8015810:	0801588b 	.word	0x0801588b
 8015814:	080158bf 	.word	0x080158bf
 8015818:	080158bf 	.word	0x080158bf
 801581c:	080158bf 	.word	0x080158bf
 8015820:	080158bf 	.word	0x080158bf
 8015824:	080158bf 	.word	0x080158bf
 8015828:	080158bf 	.word	0x080158bf
 801582c:	080158bf 	.word	0x080158bf
 8015830:	080158bf 	.word	0x080158bf
 8015834:	080158bf 	.word	0x080158bf
 8015838:	080158bf 	.word	0x080158bf
 801583c:	080158bf 	.word	0x080158bf
 8015840:	080158bf 	.word	0x080158bf
 8015844:	080158bf 	.word	0x080158bf
 8015848:	080158bf 	.word	0x080158bf
 801584c:	080158bf 	.word	0x080158bf
 8015850:	080158b1 	.word	0x080158b1
 8015854:	2b40      	cmp	r3, #64	@ 0x40
 8015856:	d02e      	beq.n	80158b6 <UART_SetConfig+0xa36>
 8015858:	e031      	b.n	80158be <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801585a:	f7fa fe69 	bl	8010530 <HAL_RCC_GetPCLK1Freq>
 801585e:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015860:	e033      	b.n	80158ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8015862:	f7fa fe7b 	bl	801055c <HAL_RCC_GetPCLK2Freq>
 8015866:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8015868:	e02f      	b.n	80158ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801586a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801586e:	4618      	mov	r0, r3
 8015870:	f7fd f852 	bl	8012918 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8015874:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015876:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015878:	e027      	b.n	80158ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801587a:	f107 0318 	add.w	r3, r7, #24
 801587e:	4618      	mov	r0, r3
 8015880:	f7fd f99e 	bl	8012bc0 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8015884:	69fb      	ldr	r3, [r7, #28]
 8015886:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8015888:	e01f      	b.n	80158ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801588a:	4b2d      	ldr	r3, [pc, #180]	@ (8015940 <UART_SetConfig+0xac0>)
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f003 0320 	and.w	r3, r3, #32
 8015892:	2b00      	cmp	r3, #0
 8015894:	d009      	beq.n	80158aa <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8015896:	4b2a      	ldr	r3, [pc, #168]	@ (8015940 <UART_SetConfig+0xac0>)
 8015898:	681b      	ldr	r3, [r3, #0]
 801589a:	08db      	lsrs	r3, r3, #3
 801589c:	f003 0303 	and.w	r3, r3, #3
 80158a0:	4a28      	ldr	r2, [pc, #160]	@ (8015944 <UART_SetConfig+0xac4>)
 80158a2:	fa22 f303 	lsr.w	r3, r2, r3
 80158a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80158a8:	e00f      	b.n	80158ca <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80158aa:	4b26      	ldr	r3, [pc, #152]	@ (8015944 <UART_SetConfig+0xac4>)
 80158ac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158ae:	e00c      	b.n	80158ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80158b0:	4b25      	ldr	r3, [pc, #148]	@ (8015948 <UART_SetConfig+0xac8>)
 80158b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158b4:	e009      	b.n	80158ca <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80158b6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80158ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 80158bc:	e005      	b.n	80158ca <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80158be:	2300      	movs	r3, #0
 80158c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 80158c2:	2301      	movs	r3, #1
 80158c4:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 80158c8:	bf00      	nop
    }

    if (pclk != 0U)
 80158ca:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158cc:	2b00      	cmp	r3, #0
 80158ce:	d021      	beq.n	8015914 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80158d0:	697b      	ldr	r3, [r7, #20]
 80158d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80158d4:	4a1d      	ldr	r2, [pc, #116]	@ (801594c <UART_SetConfig+0xacc>)
 80158d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80158da:	461a      	mov	r2, r3
 80158dc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80158de:	fbb3 f2f2 	udiv	r2, r3, r2
 80158e2:	697b      	ldr	r3, [r7, #20]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	085b      	lsrs	r3, r3, #1
 80158e8:	441a      	add	r2, r3
 80158ea:	697b      	ldr	r3, [r7, #20]
 80158ec:	685b      	ldr	r3, [r3, #4]
 80158ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80158f2:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80158f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158f6:	2b0f      	cmp	r3, #15
 80158f8:	d909      	bls.n	801590e <UART_SetConfig+0xa8e>
 80158fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80158fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015900:	d205      	bcs.n	801590e <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8015902:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015904:	b29a      	uxth	r2, r3
 8015906:	697b      	ldr	r3, [r7, #20]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	60da      	str	r2, [r3, #12]
 801590c:	e002      	b.n	8015914 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 801590e:	2301      	movs	r3, #1
 8015910:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8015914:	697b      	ldr	r3, [r7, #20]
 8015916:	2201      	movs	r2, #1
 8015918:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 801591c:	697b      	ldr	r3, [r7, #20]
 801591e:	2201      	movs	r2, #1
 8015920:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8015924:	697b      	ldr	r3, [r7, #20]
 8015926:	2200      	movs	r2, #0
 8015928:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 801592a:	697b      	ldr	r3, [r7, #20]
 801592c:	2200      	movs	r2, #0
 801592e:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8015930:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8015934:	4618      	mov	r0, r3
 8015936:	3748      	adds	r7, #72	@ 0x48
 8015938:	46bd      	mov	sp, r7
 801593a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801593e:	bf00      	nop
 8015940:	58024400 	.word	0x58024400
 8015944:	03d09000 	.word	0x03d09000
 8015948:	003d0900 	.word	0x003d0900
 801594c:	08020c68 	.word	0x08020c68

08015950 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8015950:	b480      	push	{r7}
 8015952:	b083      	sub	sp, #12
 8015954:	af00      	add	r7, sp, #0
 8015956:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801595c:	f003 0308 	and.w	r3, r3, #8
 8015960:	2b00      	cmp	r3, #0
 8015962:	d00a      	beq.n	801597a <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8015964:	687b      	ldr	r3, [r7, #4]
 8015966:	681b      	ldr	r3, [r3, #0]
 8015968:	685b      	ldr	r3, [r3, #4]
 801596a:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 801596e:	687b      	ldr	r3, [r7, #4]
 8015970:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8015972:	687b      	ldr	r3, [r7, #4]
 8015974:	681b      	ldr	r3, [r3, #0]
 8015976:	430a      	orrs	r2, r1
 8015978:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 801597a:	687b      	ldr	r3, [r7, #4]
 801597c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801597e:	f003 0301 	and.w	r3, r3, #1
 8015982:	2b00      	cmp	r3, #0
 8015984:	d00a      	beq.n	801599c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8015986:	687b      	ldr	r3, [r7, #4]
 8015988:	681b      	ldr	r3, [r3, #0]
 801598a:	685b      	ldr	r3, [r3, #4]
 801598c:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	430a      	orrs	r2, r1
 801599a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159a0:	f003 0302 	and.w	r3, r3, #2
 80159a4:	2b00      	cmp	r3, #0
 80159a6:	d00a      	beq.n	80159be <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	685b      	ldr	r3, [r3, #4]
 80159ae:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80159b6:	687b      	ldr	r3, [r7, #4]
 80159b8:	681b      	ldr	r3, [r3, #0]
 80159ba:	430a      	orrs	r2, r1
 80159bc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80159be:	687b      	ldr	r3, [r7, #4]
 80159c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159c2:	f003 0304 	and.w	r3, r3, #4
 80159c6:	2b00      	cmp	r3, #0
 80159c8:	d00a      	beq.n	80159e0 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80159ca:	687b      	ldr	r3, [r7, #4]
 80159cc:	681b      	ldr	r3, [r3, #0]
 80159ce:	685b      	ldr	r3, [r3, #4]
 80159d0:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 80159d4:	687b      	ldr	r3, [r7, #4]
 80159d6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80159d8:	687b      	ldr	r3, [r7, #4]
 80159da:	681b      	ldr	r3, [r3, #0]
 80159dc:	430a      	orrs	r2, r1
 80159de:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80159e0:	687b      	ldr	r3, [r7, #4]
 80159e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80159e4:	f003 0310 	and.w	r3, r3, #16
 80159e8:	2b00      	cmp	r3, #0
 80159ea:	d00a      	beq.n	8015a02 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	681b      	ldr	r3, [r3, #0]
 80159f0:	689b      	ldr	r3, [r3, #8]
 80159f2:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80159fa:	687b      	ldr	r3, [r7, #4]
 80159fc:	681b      	ldr	r3, [r3, #0]
 80159fe:	430a      	orrs	r2, r1
 8015a00:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8015a02:	687b      	ldr	r3, [r7, #4]
 8015a04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a06:	f003 0320 	and.w	r3, r3, #32
 8015a0a:	2b00      	cmp	r3, #0
 8015a0c:	d00a      	beq.n	8015a24 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8015a0e:	687b      	ldr	r3, [r7, #4]
 8015a10:	681b      	ldr	r3, [r3, #0]
 8015a12:	689b      	ldr	r3, [r3, #8]
 8015a14:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8015a18:	687b      	ldr	r3, [r7, #4]
 8015a1a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015a1c:	687b      	ldr	r3, [r7, #4]
 8015a1e:	681b      	ldr	r3, [r3, #0]
 8015a20:	430a      	orrs	r2, r1
 8015a22:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8015a24:	687b      	ldr	r3, [r7, #4]
 8015a26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a28:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015a2c:	2b00      	cmp	r3, #0
 8015a2e:	d01a      	beq.n	8015a66 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8015a30:	687b      	ldr	r3, [r7, #4]
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	685b      	ldr	r3, [r3, #4]
 8015a36:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8015a3a:	687b      	ldr	r3, [r7, #4]
 8015a3c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	681b      	ldr	r3, [r3, #0]
 8015a42:	430a      	orrs	r2, r1
 8015a44:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015a4a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015a4e:	d10a      	bne.n	8015a66 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8015a50:	687b      	ldr	r3, [r7, #4]
 8015a52:	681b      	ldr	r3, [r3, #0]
 8015a54:	685b      	ldr	r3, [r3, #4]
 8015a56:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8015a5a:	687b      	ldr	r3, [r7, #4]
 8015a5c:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8015a5e:	687b      	ldr	r3, [r7, #4]
 8015a60:	681b      	ldr	r3, [r3, #0]
 8015a62:	430a      	orrs	r2, r1
 8015a64:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8015a66:	687b      	ldr	r3, [r7, #4]
 8015a68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015a6a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d00a      	beq.n	8015a88 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	681b      	ldr	r3, [r3, #0]
 8015a76:	685b      	ldr	r3, [r3, #4]
 8015a78:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8015a7c:	687b      	ldr	r3, [r7, #4]
 8015a7e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	681b      	ldr	r3, [r3, #0]
 8015a84:	430a      	orrs	r2, r1
 8015a86:	605a      	str	r2, [r3, #4]
  }
}
 8015a88:	bf00      	nop
 8015a8a:	370c      	adds	r7, #12
 8015a8c:	46bd      	mov	sp, r7
 8015a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a92:	4770      	bx	lr

08015a94 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8015a94:	b580      	push	{r7, lr}
 8015a96:	b098      	sub	sp, #96	@ 0x60
 8015a98:	af02      	add	r7, sp, #8
 8015a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	2200      	movs	r2, #0
 8015aa0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8015aa4:	f7f3 fb00 	bl	80090a8 <HAL_GetTick>
 8015aa8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8015aaa:	687b      	ldr	r3, [r7, #4]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	681b      	ldr	r3, [r3, #0]
 8015ab0:	f003 0308 	and.w	r3, r3, #8
 8015ab4:	2b08      	cmp	r3, #8
 8015ab6:	d12f      	bne.n	8015b18 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015ab8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015abc:	9300      	str	r3, [sp, #0]
 8015abe:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015ac0:	2200      	movs	r2, #0
 8015ac2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8015ac6:	6878      	ldr	r0, [r7, #4]
 8015ac8:	f000 f88e 	bl	8015be8 <UART_WaitOnFlagUntilTimeout>
 8015acc:	4603      	mov	r3, r0
 8015ace:	2b00      	cmp	r3, #0
 8015ad0:	d022      	beq.n	8015b18 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8015ad2:	687b      	ldr	r3, [r7, #4]
 8015ad4:	681b      	ldr	r3, [r3, #0]
 8015ad6:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015ad8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015ada:	e853 3f00 	ldrex	r3, [r3]
 8015ade:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8015ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015ae2:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8015ae6:	653b      	str	r3, [r7, #80]	@ 0x50
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	681b      	ldr	r3, [r3, #0]
 8015aec:	461a      	mov	r2, r3
 8015aee:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015af0:	647b      	str	r3, [r7, #68]	@ 0x44
 8015af2:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015af4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8015af6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8015af8:	e841 2300 	strex	r3, r2, [r1]
 8015afc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8015afe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015b00:	2b00      	cmp	r3, #0
 8015b02:	d1e6      	bne.n	8015ad2 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8015b04:	687b      	ldr	r3, [r7, #4]
 8015b06:	2220      	movs	r2, #32
 8015b08:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8015b0c:	687b      	ldr	r3, [r7, #4]
 8015b0e:	2200      	movs	r2, #0
 8015b10:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015b14:	2303      	movs	r3, #3
 8015b16:	e063      	b.n	8015be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	681b      	ldr	r3, [r3, #0]
 8015b1c:	681b      	ldr	r3, [r3, #0]
 8015b1e:	f003 0304 	and.w	r3, r3, #4
 8015b22:	2b04      	cmp	r3, #4
 8015b24:	d149      	bne.n	8015bba <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8015b26:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8015b2a:	9300      	str	r3, [sp, #0]
 8015b2c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8015b2e:	2200      	movs	r2, #0
 8015b30:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8015b34:	6878      	ldr	r0, [r7, #4]
 8015b36:	f000 f857 	bl	8015be8 <UART_WaitOnFlagUntilTimeout>
 8015b3a:	4603      	mov	r3, r0
 8015b3c:	2b00      	cmp	r3, #0
 8015b3e:	d03c      	beq.n	8015bba <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015b40:	687b      	ldr	r3, [r7, #4]
 8015b42:	681b      	ldr	r3, [r3, #0]
 8015b44:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015b48:	e853 3f00 	ldrex	r3, [r3]
 8015b4c:	623b      	str	r3, [r7, #32]
   return(result);
 8015b4e:	6a3b      	ldr	r3, [r7, #32]
 8015b50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015b54:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015b56:	687b      	ldr	r3, [r7, #4]
 8015b58:	681b      	ldr	r3, [r3, #0]
 8015b5a:	461a      	mov	r2, r3
 8015b5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015b5e:	633b      	str	r3, [r7, #48]	@ 0x30
 8015b60:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b62:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8015b64:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8015b66:	e841 2300 	strex	r3, r2, [r1]
 8015b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8015b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015b6e:	2b00      	cmp	r3, #0
 8015b70:	d1e6      	bne.n	8015b40 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8015b72:	687b      	ldr	r3, [r7, #4]
 8015b74:	681b      	ldr	r3, [r3, #0]
 8015b76:	3308      	adds	r3, #8
 8015b78:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015b7a:	693b      	ldr	r3, [r7, #16]
 8015b7c:	e853 3f00 	ldrex	r3, [r3]
 8015b80:	60fb      	str	r3, [r7, #12]
   return(result);
 8015b82:	68fb      	ldr	r3, [r7, #12]
 8015b84:	f023 0301 	bic.w	r3, r3, #1
 8015b88:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015b8a:	687b      	ldr	r3, [r7, #4]
 8015b8c:	681b      	ldr	r3, [r3, #0]
 8015b8e:	3308      	adds	r3, #8
 8015b90:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015b92:	61fa      	str	r2, [r7, #28]
 8015b94:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015b96:	69b9      	ldr	r1, [r7, #24]
 8015b98:	69fa      	ldr	r2, [r7, #28]
 8015b9a:	e841 2300 	strex	r3, r2, [r1]
 8015b9e:	617b      	str	r3, [r7, #20]
   return(result);
 8015ba0:	697b      	ldr	r3, [r7, #20]
 8015ba2:	2b00      	cmp	r3, #0
 8015ba4:	d1e5      	bne.n	8015b72 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	2220      	movs	r2, #32
 8015baa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8015bae:	687b      	ldr	r3, [r7, #4]
 8015bb0:	2200      	movs	r2, #0
 8015bb2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8015bb6:	2303      	movs	r3, #3
 8015bb8:	e012      	b.n	8015be0 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	2220      	movs	r2, #32
 8015bbe:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8015bc2:	687b      	ldr	r3, [r7, #4]
 8015bc4:	2220      	movs	r2, #32
 8015bc6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015bca:	687b      	ldr	r3, [r7, #4]
 8015bcc:	2200      	movs	r2, #0
 8015bce:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8015bd0:	687b      	ldr	r3, [r7, #4]
 8015bd2:	2200      	movs	r2, #0
 8015bd4:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8015bd6:	687b      	ldr	r3, [r7, #4]
 8015bd8:	2200      	movs	r2, #0
 8015bda:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015bde:	2300      	movs	r3, #0
}
 8015be0:	4618      	mov	r0, r3
 8015be2:	3758      	adds	r7, #88	@ 0x58
 8015be4:	46bd      	mov	sp, r7
 8015be6:	bd80      	pop	{r7, pc}

08015be8 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8015be8:	b580      	push	{r7, lr}
 8015bea:	b084      	sub	sp, #16
 8015bec:	af00      	add	r7, sp, #0
 8015bee:	60f8      	str	r0, [r7, #12]
 8015bf0:	60b9      	str	r1, [r7, #8]
 8015bf2:	603b      	str	r3, [r7, #0]
 8015bf4:	4613      	mov	r3, r2
 8015bf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015bf8:	e04f      	b.n	8015c9a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8015bfa:	69bb      	ldr	r3, [r7, #24]
 8015bfc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015c00:	d04b      	beq.n	8015c9a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8015c02:	f7f3 fa51 	bl	80090a8 <HAL_GetTick>
 8015c06:	4602      	mov	r2, r0
 8015c08:	683b      	ldr	r3, [r7, #0]
 8015c0a:	1ad3      	subs	r3, r2, r3
 8015c0c:	69ba      	ldr	r2, [r7, #24]
 8015c0e:	429a      	cmp	r2, r3
 8015c10:	d302      	bcc.n	8015c18 <UART_WaitOnFlagUntilTimeout+0x30>
 8015c12:	69bb      	ldr	r3, [r7, #24]
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d101      	bne.n	8015c1c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8015c18:	2303      	movs	r3, #3
 8015c1a:	e04e      	b.n	8015cba <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8015c1c:	68fb      	ldr	r3, [r7, #12]
 8015c1e:	681b      	ldr	r3, [r3, #0]
 8015c20:	681b      	ldr	r3, [r3, #0]
 8015c22:	f003 0304 	and.w	r3, r3, #4
 8015c26:	2b00      	cmp	r3, #0
 8015c28:	d037      	beq.n	8015c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8015c2a:	68bb      	ldr	r3, [r7, #8]
 8015c2c:	2b80      	cmp	r3, #128	@ 0x80
 8015c2e:	d034      	beq.n	8015c9a <UART_WaitOnFlagUntilTimeout+0xb2>
 8015c30:	68bb      	ldr	r3, [r7, #8]
 8015c32:	2b40      	cmp	r3, #64	@ 0x40
 8015c34:	d031      	beq.n	8015c9a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8015c36:	68fb      	ldr	r3, [r7, #12]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	69db      	ldr	r3, [r3, #28]
 8015c3c:	f003 0308 	and.w	r3, r3, #8
 8015c40:	2b08      	cmp	r3, #8
 8015c42:	d110      	bne.n	8015c66 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015c44:	68fb      	ldr	r3, [r7, #12]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	2208      	movs	r2, #8
 8015c4a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015c4c:	68f8      	ldr	r0, [r7, #12]
 8015c4e:	f000 f839 	bl	8015cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8015c52:	68fb      	ldr	r3, [r7, #12]
 8015c54:	2208      	movs	r2, #8
 8015c56:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015c5a:	68fb      	ldr	r3, [r7, #12]
 8015c5c:	2200      	movs	r2, #0
 8015c5e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8015c62:	2301      	movs	r3, #1
 8015c64:	e029      	b.n	8015cba <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8015c66:	68fb      	ldr	r3, [r7, #12]
 8015c68:	681b      	ldr	r3, [r3, #0]
 8015c6a:	69db      	ldr	r3, [r3, #28]
 8015c6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015c70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8015c74:	d111      	bne.n	8015c9a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015c76:	68fb      	ldr	r3, [r7, #12]
 8015c78:	681b      	ldr	r3, [r3, #0]
 8015c7a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8015c7e:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8015c80:	68f8      	ldr	r0, [r7, #12]
 8015c82:	f000 f81f 	bl	8015cc4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8015c86:	68fb      	ldr	r3, [r7, #12]
 8015c88:	2220      	movs	r2, #32
 8015c8a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8015c8e:	68fb      	ldr	r3, [r7, #12]
 8015c90:	2200      	movs	r2, #0
 8015c92:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8015c96:	2303      	movs	r3, #3
 8015c98:	e00f      	b.n	8015cba <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8015c9a:	68fb      	ldr	r3, [r7, #12]
 8015c9c:	681b      	ldr	r3, [r3, #0]
 8015c9e:	69da      	ldr	r2, [r3, #28]
 8015ca0:	68bb      	ldr	r3, [r7, #8]
 8015ca2:	4013      	ands	r3, r2
 8015ca4:	68ba      	ldr	r2, [r7, #8]
 8015ca6:	429a      	cmp	r2, r3
 8015ca8:	bf0c      	ite	eq
 8015caa:	2301      	moveq	r3, #1
 8015cac:	2300      	movne	r3, #0
 8015cae:	b2db      	uxtb	r3, r3
 8015cb0:	461a      	mov	r2, r3
 8015cb2:	79fb      	ldrb	r3, [r7, #7]
 8015cb4:	429a      	cmp	r2, r3
 8015cb6:	d0a0      	beq.n	8015bfa <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8015cb8:	2300      	movs	r3, #0
}
 8015cba:	4618      	mov	r0, r3
 8015cbc:	3710      	adds	r7, #16
 8015cbe:	46bd      	mov	sp, r7
 8015cc0:	bd80      	pop	{r7, pc}
	...

08015cc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8015cc4:	b480      	push	{r7}
 8015cc6:	b095      	sub	sp, #84	@ 0x54
 8015cc8:	af00      	add	r7, sp, #0
 8015cca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8015ccc:	687b      	ldr	r3, [r7, #4]
 8015cce:	681b      	ldr	r3, [r3, #0]
 8015cd0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015cd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8015cd4:	e853 3f00 	ldrex	r3, [r3]
 8015cd8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8015cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015cdc:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8015ce0:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8015ce2:	687b      	ldr	r3, [r7, #4]
 8015ce4:	681b      	ldr	r3, [r3, #0]
 8015ce6:	461a      	mov	r2, r3
 8015ce8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8015cea:	643b      	str	r3, [r7, #64]	@ 0x40
 8015cec:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015cee:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8015cf0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8015cf2:	e841 2300 	strex	r3, r2, [r1]
 8015cf6:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8015cf8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8015cfa:	2b00      	cmp	r3, #0
 8015cfc:	d1e6      	bne.n	8015ccc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8015cfe:	687b      	ldr	r3, [r7, #4]
 8015d00:	681b      	ldr	r3, [r3, #0]
 8015d02:	3308      	adds	r3, #8
 8015d04:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d06:	6a3b      	ldr	r3, [r7, #32]
 8015d08:	e853 3f00 	ldrex	r3, [r3]
 8015d0c:	61fb      	str	r3, [r7, #28]
   return(result);
 8015d0e:	69fa      	ldr	r2, [r7, #28]
 8015d10:	4b1e      	ldr	r3, [pc, #120]	@ (8015d8c <UART_EndRxTransfer+0xc8>)
 8015d12:	4013      	ands	r3, r2
 8015d14:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015d16:	687b      	ldr	r3, [r7, #4]
 8015d18:	681b      	ldr	r3, [r3, #0]
 8015d1a:	3308      	adds	r3, #8
 8015d1c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8015d1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8015d20:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d22:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8015d24:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8015d26:	e841 2300 	strex	r3, r2, [r1]
 8015d2a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8015d2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015d2e:	2b00      	cmp	r3, #0
 8015d30:	d1e5      	bne.n	8015cfe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015d32:	687b      	ldr	r3, [r7, #4]
 8015d34:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015d36:	2b01      	cmp	r3, #1
 8015d38:	d118      	bne.n	8015d6c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015d3a:	687b      	ldr	r3, [r7, #4]
 8015d3c:	681b      	ldr	r3, [r3, #0]
 8015d3e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015d40:	68fb      	ldr	r3, [r7, #12]
 8015d42:	e853 3f00 	ldrex	r3, [r3]
 8015d46:	60bb      	str	r3, [r7, #8]
   return(result);
 8015d48:	68bb      	ldr	r3, [r7, #8]
 8015d4a:	f023 0310 	bic.w	r3, r3, #16
 8015d4e:	647b      	str	r3, [r7, #68]	@ 0x44
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	681b      	ldr	r3, [r3, #0]
 8015d54:	461a      	mov	r2, r3
 8015d56:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8015d58:	61bb      	str	r3, [r7, #24]
 8015d5a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015d5c:	6979      	ldr	r1, [r7, #20]
 8015d5e:	69ba      	ldr	r2, [r7, #24]
 8015d60:	e841 2300 	strex	r3, r2, [r1]
 8015d64:	613b      	str	r3, [r7, #16]
   return(result);
 8015d66:	693b      	ldr	r3, [r7, #16]
 8015d68:	2b00      	cmp	r3, #0
 8015d6a:	d1e6      	bne.n	8015d3a <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	2220      	movs	r2, #32
 8015d70:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	2200      	movs	r2, #0
 8015d78:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8015d7a:	687b      	ldr	r3, [r7, #4]
 8015d7c:	2200      	movs	r2, #0
 8015d7e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8015d80:	bf00      	nop
 8015d82:	3754      	adds	r7, #84	@ 0x54
 8015d84:	46bd      	mov	sp, r7
 8015d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d8a:	4770      	bx	lr
 8015d8c:	effffffe 	.word	0xeffffffe

08015d90 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8015d90:	b480      	push	{r7}
 8015d92:	b085      	sub	sp, #20
 8015d94:	af00      	add	r7, sp, #0
 8015d96:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015d9e:	2b01      	cmp	r3, #1
 8015da0:	d101      	bne.n	8015da6 <HAL_UARTEx_DisableFifoMode+0x16>
 8015da2:	2302      	movs	r3, #2
 8015da4:	e027      	b.n	8015df6 <HAL_UARTEx_DisableFifoMode+0x66>
 8015da6:	687b      	ldr	r3, [r7, #4]
 8015da8:	2201      	movs	r2, #1
 8015daa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015dae:	687b      	ldr	r3, [r7, #4]
 8015db0:	2224      	movs	r2, #36	@ 0x24
 8015db2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015db6:	687b      	ldr	r3, [r7, #4]
 8015db8:	681b      	ldr	r3, [r3, #0]
 8015dba:	681b      	ldr	r3, [r3, #0]
 8015dbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015dbe:	687b      	ldr	r3, [r7, #4]
 8015dc0:	681b      	ldr	r3, [r3, #0]
 8015dc2:	681a      	ldr	r2, [r3, #0]
 8015dc4:	687b      	ldr	r3, [r7, #4]
 8015dc6:	681b      	ldr	r3, [r3, #0]
 8015dc8:	f022 0201 	bic.w	r2, r2, #1
 8015dcc:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8015dce:	68fb      	ldr	r3, [r7, #12]
 8015dd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8015dd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	2200      	movs	r2, #0
 8015dda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015ddc:	687b      	ldr	r3, [r7, #4]
 8015dde:	681b      	ldr	r3, [r3, #0]
 8015de0:	68fa      	ldr	r2, [r7, #12]
 8015de2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	2220      	movs	r2, #32
 8015de8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015dec:	687b      	ldr	r3, [r7, #4]
 8015dee:	2200      	movs	r2, #0
 8015df0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015df4:	2300      	movs	r3, #0
}
 8015df6:	4618      	mov	r0, r3
 8015df8:	3714      	adds	r7, #20
 8015dfa:	46bd      	mov	sp, r7
 8015dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e00:	4770      	bx	lr

08015e02 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015e02:	b580      	push	{r7, lr}
 8015e04:	b084      	sub	sp, #16
 8015e06:	af00      	add	r7, sp, #0
 8015e08:	6078      	str	r0, [r7, #4]
 8015e0a:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015e0c:	687b      	ldr	r3, [r7, #4]
 8015e0e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015e12:	2b01      	cmp	r3, #1
 8015e14:	d101      	bne.n	8015e1a <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8015e16:	2302      	movs	r3, #2
 8015e18:	e02d      	b.n	8015e76 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	2201      	movs	r2, #1
 8015e1e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015e22:	687b      	ldr	r3, [r7, #4]
 8015e24:	2224      	movs	r2, #36	@ 0x24
 8015e26:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015e2a:	687b      	ldr	r3, [r7, #4]
 8015e2c:	681b      	ldr	r3, [r3, #0]
 8015e2e:	681b      	ldr	r3, [r3, #0]
 8015e30:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	681b      	ldr	r3, [r3, #0]
 8015e36:	681a      	ldr	r2, [r3, #0]
 8015e38:	687b      	ldr	r3, [r7, #4]
 8015e3a:	681b      	ldr	r3, [r3, #0]
 8015e3c:	f022 0201 	bic.w	r2, r2, #1
 8015e40:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8015e42:	687b      	ldr	r3, [r7, #4]
 8015e44:	681b      	ldr	r3, [r3, #0]
 8015e46:	689b      	ldr	r3, [r3, #8]
 8015e48:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	681b      	ldr	r3, [r3, #0]
 8015e50:	683a      	ldr	r2, [r7, #0]
 8015e52:	430a      	orrs	r2, r1
 8015e54:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015e56:	6878      	ldr	r0, [r7, #4]
 8015e58:	f000 f850 	bl	8015efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	68fa      	ldr	r2, [r7, #12]
 8015e62:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015e64:	687b      	ldr	r3, [r7, #4]
 8015e66:	2220      	movs	r2, #32
 8015e68:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015e6c:	687b      	ldr	r3, [r7, #4]
 8015e6e:	2200      	movs	r2, #0
 8015e70:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015e74:	2300      	movs	r3, #0
}
 8015e76:	4618      	mov	r0, r3
 8015e78:	3710      	adds	r7, #16
 8015e7a:	46bd      	mov	sp, r7
 8015e7c:	bd80      	pop	{r7, pc}

08015e7e <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8015e7e:	b580      	push	{r7, lr}
 8015e80:	b084      	sub	sp, #16
 8015e82:	af00      	add	r7, sp, #0
 8015e84:	6078      	str	r0, [r7, #4]
 8015e86:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8015e8e:	2b01      	cmp	r3, #1
 8015e90:	d101      	bne.n	8015e96 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8015e92:	2302      	movs	r3, #2
 8015e94:	e02d      	b.n	8015ef2 <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	2201      	movs	r2, #1
 8015e9a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8015e9e:	687b      	ldr	r3, [r7, #4]
 8015ea0:	2224      	movs	r2, #36	@ 0x24
 8015ea2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8015ea6:	687b      	ldr	r3, [r7, #4]
 8015ea8:	681b      	ldr	r3, [r3, #0]
 8015eaa:	681b      	ldr	r3, [r3, #0]
 8015eac:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8015eae:	687b      	ldr	r3, [r7, #4]
 8015eb0:	681b      	ldr	r3, [r3, #0]
 8015eb2:	681a      	ldr	r2, [r3, #0]
 8015eb4:	687b      	ldr	r3, [r7, #4]
 8015eb6:	681b      	ldr	r3, [r3, #0]
 8015eb8:	f022 0201 	bic.w	r2, r2, #1
 8015ebc:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8015ebe:	687b      	ldr	r3, [r7, #4]
 8015ec0:	681b      	ldr	r3, [r3, #0]
 8015ec2:	689b      	ldr	r3, [r3, #8]
 8015ec4:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8015ec8:	687b      	ldr	r3, [r7, #4]
 8015eca:	681b      	ldr	r3, [r3, #0]
 8015ecc:	683a      	ldr	r2, [r7, #0]
 8015ece:	430a      	orrs	r2, r1
 8015ed0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8015ed2:	6878      	ldr	r0, [r7, #4]
 8015ed4:	f000 f812 	bl	8015efc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8015ed8:	687b      	ldr	r3, [r7, #4]
 8015eda:	681b      	ldr	r3, [r3, #0]
 8015edc:	68fa      	ldr	r2, [r7, #12]
 8015ede:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	2220      	movs	r2, #32
 8015ee4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	2200      	movs	r2, #0
 8015eec:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8015ef0:	2300      	movs	r3, #0
}
 8015ef2:	4618      	mov	r0, r3
 8015ef4:	3710      	adds	r7, #16
 8015ef6:	46bd      	mov	sp, r7
 8015ef8:	bd80      	pop	{r7, pc}
	...

08015efc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8015efc:	b480      	push	{r7}
 8015efe:	b085      	sub	sp, #20
 8015f00:	af00      	add	r7, sp, #0
 8015f02:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8015f04:	687b      	ldr	r3, [r7, #4]
 8015f06:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d108      	bne.n	8015f1e <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8015f0c:	687b      	ldr	r3, [r7, #4]
 8015f0e:	2201      	movs	r2, #1
 8015f10:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8015f14:	687b      	ldr	r3, [r7, #4]
 8015f16:	2201      	movs	r2, #1
 8015f18:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8015f1c:	e031      	b.n	8015f82 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8015f1e:	2310      	movs	r3, #16
 8015f20:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8015f22:	2310      	movs	r3, #16
 8015f24:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	681b      	ldr	r3, [r3, #0]
 8015f2a:	689b      	ldr	r3, [r3, #8]
 8015f2c:	0e5b      	lsrs	r3, r3, #25
 8015f2e:	b2db      	uxtb	r3, r3
 8015f30:	f003 0307 	and.w	r3, r3, #7
 8015f34:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8015f36:	687b      	ldr	r3, [r7, #4]
 8015f38:	681b      	ldr	r3, [r3, #0]
 8015f3a:	689b      	ldr	r3, [r3, #8]
 8015f3c:	0f5b      	lsrs	r3, r3, #29
 8015f3e:	b2db      	uxtb	r3, r3
 8015f40:	f003 0307 	and.w	r3, r3, #7
 8015f44:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015f46:	7bbb      	ldrb	r3, [r7, #14]
 8015f48:	7b3a      	ldrb	r2, [r7, #12]
 8015f4a:	4911      	ldr	r1, [pc, #68]	@ (8015f90 <UARTEx_SetNbDataToProcess+0x94>)
 8015f4c:	5c8a      	ldrb	r2, [r1, r2]
 8015f4e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8015f52:	7b3a      	ldrb	r2, [r7, #12]
 8015f54:	490f      	ldr	r1, [pc, #60]	@ (8015f94 <UARTEx_SetNbDataToProcess+0x98>)
 8015f56:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8015f58:	fb93 f3f2 	sdiv	r3, r3, r2
 8015f5c:	b29a      	uxth	r2, r3
 8015f5e:	687b      	ldr	r3, [r7, #4]
 8015f60:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015f64:	7bfb      	ldrb	r3, [r7, #15]
 8015f66:	7b7a      	ldrb	r2, [r7, #13]
 8015f68:	4909      	ldr	r1, [pc, #36]	@ (8015f90 <UARTEx_SetNbDataToProcess+0x94>)
 8015f6a:	5c8a      	ldrb	r2, [r1, r2]
 8015f6c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8015f70:	7b7a      	ldrb	r2, [r7, #13]
 8015f72:	4908      	ldr	r1, [pc, #32]	@ (8015f94 <UARTEx_SetNbDataToProcess+0x98>)
 8015f74:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8015f76:	fb93 f3f2 	sdiv	r3, r3, r2
 8015f7a:	b29a      	uxth	r2, r3
 8015f7c:	687b      	ldr	r3, [r7, #4]
 8015f7e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8015f82:	bf00      	nop
 8015f84:	3714      	adds	r7, #20
 8015f86:	46bd      	mov	sp, r7
 8015f88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015f8c:	4770      	bx	lr
 8015f8e:	bf00      	nop
 8015f90:	08020c80 	.word	0x08020c80
 8015f94:	08020c88 	.word	0x08020c88

08015f98 <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 8015f98:	b480      	push	{r7}
 8015f9a:	b083      	sub	sp, #12
 8015f9c:	af00      	add	r7, sp, #0
 8015f9e:	6078      	str	r0, [r7, #4]
 8015fa0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 8015fa2:	683b      	ldr	r3, [r7, #0]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d121      	bne.n	8015fee <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	681a      	ldr	r2, [r3, #0]
 8015fae:	4b27      	ldr	r3, [pc, #156]	@ (801604c <FMC_SDRAM_Init+0xb4>)
 8015fb0:	4013      	ands	r3, r2
 8015fb2:	683a      	ldr	r2, [r7, #0]
 8015fb4:	6851      	ldr	r1, [r2, #4]
 8015fb6:	683a      	ldr	r2, [r7, #0]
 8015fb8:	6892      	ldr	r2, [r2, #8]
 8015fba:	4311      	orrs	r1, r2
 8015fbc:	683a      	ldr	r2, [r7, #0]
 8015fbe:	68d2      	ldr	r2, [r2, #12]
 8015fc0:	4311      	orrs	r1, r2
 8015fc2:	683a      	ldr	r2, [r7, #0]
 8015fc4:	6912      	ldr	r2, [r2, #16]
 8015fc6:	4311      	orrs	r1, r2
 8015fc8:	683a      	ldr	r2, [r7, #0]
 8015fca:	6952      	ldr	r2, [r2, #20]
 8015fcc:	4311      	orrs	r1, r2
 8015fce:	683a      	ldr	r2, [r7, #0]
 8015fd0:	6992      	ldr	r2, [r2, #24]
 8015fd2:	4311      	orrs	r1, r2
 8015fd4:	683a      	ldr	r2, [r7, #0]
 8015fd6:	69d2      	ldr	r2, [r2, #28]
 8015fd8:	4311      	orrs	r1, r2
 8015fda:	683a      	ldr	r2, [r7, #0]
 8015fdc:	6a12      	ldr	r2, [r2, #32]
 8015fde:	4311      	orrs	r1, r2
 8015fe0:	683a      	ldr	r2, [r7, #0]
 8015fe2:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8015fe4:	430a      	orrs	r2, r1
 8015fe6:	431a      	orrs	r2, r3
 8015fe8:	687b      	ldr	r3, [r7, #4]
 8015fea:	601a      	str	r2, [r3, #0]
 8015fec:	e026      	b.n	801603c <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 8015fee:	687b      	ldr	r3, [r7, #4]
 8015ff0:	681b      	ldr	r3, [r3, #0]
 8015ff2:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 8015ff6:	683b      	ldr	r3, [r7, #0]
 8015ff8:	69d9      	ldr	r1, [r3, #28]
 8015ffa:	683b      	ldr	r3, [r7, #0]
 8015ffc:	6a1b      	ldr	r3, [r3, #32]
 8015ffe:	4319      	orrs	r1, r3
 8016000:	683b      	ldr	r3, [r7, #0]
 8016002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016004:	430b      	orrs	r3, r1
 8016006:	431a      	orrs	r2, r3
 8016008:	687b      	ldr	r3, [r7, #4]
 801600a:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	685a      	ldr	r2, [r3, #4]
 8016010:	4b0e      	ldr	r3, [pc, #56]	@ (801604c <FMC_SDRAM_Init+0xb4>)
 8016012:	4013      	ands	r3, r2
 8016014:	683a      	ldr	r2, [r7, #0]
 8016016:	6851      	ldr	r1, [r2, #4]
 8016018:	683a      	ldr	r2, [r7, #0]
 801601a:	6892      	ldr	r2, [r2, #8]
 801601c:	4311      	orrs	r1, r2
 801601e:	683a      	ldr	r2, [r7, #0]
 8016020:	68d2      	ldr	r2, [r2, #12]
 8016022:	4311      	orrs	r1, r2
 8016024:	683a      	ldr	r2, [r7, #0]
 8016026:	6912      	ldr	r2, [r2, #16]
 8016028:	4311      	orrs	r1, r2
 801602a:	683a      	ldr	r2, [r7, #0]
 801602c:	6952      	ldr	r2, [r2, #20]
 801602e:	4311      	orrs	r1, r2
 8016030:	683a      	ldr	r2, [r7, #0]
 8016032:	6992      	ldr	r2, [r2, #24]
 8016034:	430a      	orrs	r2, r1
 8016036:	431a      	orrs	r2, r3
 8016038:	687b      	ldr	r3, [r7, #4]
 801603a:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 801603c:	2300      	movs	r3, #0
}
 801603e:	4618      	mov	r0, r3
 8016040:	370c      	adds	r7, #12
 8016042:	46bd      	mov	sp, r7
 8016044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016048:	4770      	bx	lr
 801604a:	bf00      	nop
 801604c:	ffff8000 	.word	0xffff8000

08016050 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8016050:	b480      	push	{r7}
 8016052:	b085      	sub	sp, #20
 8016054:	af00      	add	r7, sp, #0
 8016056:	60f8      	str	r0, [r7, #12]
 8016058:	60b9      	str	r1, [r7, #8]
 801605a:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 801605c:	687b      	ldr	r3, [r7, #4]
 801605e:	2b00      	cmp	r3, #0
 8016060:	d128      	bne.n	80160b4 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8016062:	68fb      	ldr	r3, [r7, #12]
 8016064:	689b      	ldr	r3, [r3, #8]
 8016066:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 801606a:	68bb      	ldr	r3, [r7, #8]
 801606c:	681b      	ldr	r3, [r3, #0]
 801606e:	1e59      	subs	r1, r3, #1
 8016070:	68bb      	ldr	r3, [r7, #8]
 8016072:	685b      	ldr	r3, [r3, #4]
 8016074:	3b01      	subs	r3, #1
 8016076:	011b      	lsls	r3, r3, #4
 8016078:	4319      	orrs	r1, r3
 801607a:	68bb      	ldr	r3, [r7, #8]
 801607c:	689b      	ldr	r3, [r3, #8]
 801607e:	3b01      	subs	r3, #1
 8016080:	021b      	lsls	r3, r3, #8
 8016082:	4319      	orrs	r1, r3
 8016084:	68bb      	ldr	r3, [r7, #8]
 8016086:	68db      	ldr	r3, [r3, #12]
 8016088:	3b01      	subs	r3, #1
 801608a:	031b      	lsls	r3, r3, #12
 801608c:	4319      	orrs	r1, r3
 801608e:	68bb      	ldr	r3, [r7, #8]
 8016090:	691b      	ldr	r3, [r3, #16]
 8016092:	3b01      	subs	r3, #1
 8016094:	041b      	lsls	r3, r3, #16
 8016096:	4319      	orrs	r1, r3
 8016098:	68bb      	ldr	r3, [r7, #8]
 801609a:	695b      	ldr	r3, [r3, #20]
 801609c:	3b01      	subs	r3, #1
 801609e:	051b      	lsls	r3, r3, #20
 80160a0:	4319      	orrs	r1, r3
 80160a2:	68bb      	ldr	r3, [r7, #8]
 80160a4:	699b      	ldr	r3, [r3, #24]
 80160a6:	3b01      	subs	r3, #1
 80160a8:	061b      	lsls	r3, r3, #24
 80160aa:	430b      	orrs	r3, r1
 80160ac:	431a      	orrs	r2, r3
 80160ae:	68fb      	ldr	r3, [r7, #12]
 80160b0:	609a      	str	r2, [r3, #8]
 80160b2:	e02d      	b.n	8016110 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80160b4:	68fb      	ldr	r3, [r7, #12]
 80160b6:	689a      	ldr	r2, [r3, #8]
 80160b8:	4b19      	ldr	r3, [pc, #100]	@ (8016120 <FMC_SDRAM_Timing_Init+0xd0>)
 80160ba:	4013      	ands	r3, r2
 80160bc:	68ba      	ldr	r2, [r7, #8]
 80160be:	68d2      	ldr	r2, [r2, #12]
 80160c0:	3a01      	subs	r2, #1
 80160c2:	0311      	lsls	r1, r2, #12
 80160c4:	68ba      	ldr	r2, [r7, #8]
 80160c6:	6952      	ldr	r2, [r2, #20]
 80160c8:	3a01      	subs	r2, #1
 80160ca:	0512      	lsls	r2, r2, #20
 80160cc:	430a      	orrs	r2, r1
 80160ce:	431a      	orrs	r2, r3
 80160d0:	68fb      	ldr	r3, [r7, #12]
 80160d2:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80160d4:	68fb      	ldr	r3, [r7, #12]
 80160d6:	68db      	ldr	r3, [r3, #12]
 80160d8:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80160dc:	68bb      	ldr	r3, [r7, #8]
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	1e59      	subs	r1, r3, #1
 80160e2:	68bb      	ldr	r3, [r7, #8]
 80160e4:	685b      	ldr	r3, [r3, #4]
 80160e6:	3b01      	subs	r3, #1
 80160e8:	011b      	lsls	r3, r3, #4
 80160ea:	4319      	orrs	r1, r3
 80160ec:	68bb      	ldr	r3, [r7, #8]
 80160ee:	689b      	ldr	r3, [r3, #8]
 80160f0:	3b01      	subs	r3, #1
 80160f2:	021b      	lsls	r3, r3, #8
 80160f4:	4319      	orrs	r1, r3
 80160f6:	68bb      	ldr	r3, [r7, #8]
 80160f8:	691b      	ldr	r3, [r3, #16]
 80160fa:	3b01      	subs	r3, #1
 80160fc:	041b      	lsls	r3, r3, #16
 80160fe:	4319      	orrs	r1, r3
 8016100:	68bb      	ldr	r3, [r7, #8]
 8016102:	699b      	ldr	r3, [r3, #24]
 8016104:	3b01      	subs	r3, #1
 8016106:	061b      	lsls	r3, r3, #24
 8016108:	430b      	orrs	r3, r1
 801610a:	431a      	orrs	r2, r3
 801610c:	68fb      	ldr	r3, [r7, #12]
 801610e:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8016110:	2300      	movs	r3, #0
}
 8016112:	4618      	mov	r0, r3
 8016114:	3714      	adds	r7, #20
 8016116:	46bd      	mov	sp, r7
 8016118:	f85d 7b04 	ldr.w	r7, [sp], #4
 801611c:	4770      	bx	lr
 801611e:	bf00      	nop
 8016120:	ff0f0fff 	.word	0xff0f0fff

08016124 <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 8016124:	b480      	push	{r7}
 8016126:	b085      	sub	sp, #20
 8016128:	af00      	add	r7, sp, #0
 801612a:	60f8      	str	r0, [r7, #12]
 801612c:	60b9      	str	r1, [r7, #8]
 801612e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	691a      	ldr	r2, [r3, #16]
 8016134:	4b0c      	ldr	r3, [pc, #48]	@ (8016168 <FMC_SDRAM_SendCommand+0x44>)
 8016136:	4013      	ands	r3, r2
 8016138:	68ba      	ldr	r2, [r7, #8]
 801613a:	6811      	ldr	r1, [r2, #0]
 801613c:	68ba      	ldr	r2, [r7, #8]
 801613e:	6852      	ldr	r2, [r2, #4]
 8016140:	4311      	orrs	r1, r2
 8016142:	68ba      	ldr	r2, [r7, #8]
 8016144:	6892      	ldr	r2, [r2, #8]
 8016146:	3a01      	subs	r2, #1
 8016148:	0152      	lsls	r2, r2, #5
 801614a:	4311      	orrs	r1, r2
 801614c:	68ba      	ldr	r2, [r7, #8]
 801614e:	68d2      	ldr	r2, [r2, #12]
 8016150:	0252      	lsls	r2, r2, #9
 8016152:	430a      	orrs	r2, r1
 8016154:	431a      	orrs	r2, r3
 8016156:	68fb      	ldr	r3, [r7, #12]
 8016158:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 801615a:	2300      	movs	r3, #0
}
 801615c:	4618      	mov	r0, r3
 801615e:	3714      	adds	r7, #20
 8016160:	46bd      	mov	sp, r7
 8016162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016166:	4770      	bx	lr
 8016168:	ffc00000 	.word	0xffc00000

0801616c <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 801616c:	b480      	push	{r7}
 801616e:	b083      	sub	sp, #12
 8016170:	af00      	add	r7, sp, #0
 8016172:	6078      	str	r0, [r7, #4]
 8016174:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 8016176:	687b      	ldr	r3, [r7, #4]
 8016178:	695a      	ldr	r2, [r3, #20]
 801617a:	4b07      	ldr	r3, [pc, #28]	@ (8016198 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 801617c:	4013      	ands	r3, r2
 801617e:	683a      	ldr	r2, [r7, #0]
 8016180:	0052      	lsls	r2, r2, #1
 8016182:	431a      	orrs	r2, r3
 8016184:	687b      	ldr	r3, [r7, #4]
 8016186:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8016188:	2300      	movs	r3, #0
}
 801618a:	4618      	mov	r0, r3
 801618c:	370c      	adds	r7, #12
 801618e:	46bd      	mov	sp, r7
 8016190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016194:	4770      	bx	lr
 8016196:	bf00      	nop
 8016198:	ffffc001 	.word	0xffffc001

0801619c <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 801619c:	b480      	push	{r7}
 801619e:	b083      	sub	sp, #12
 80161a0:	af00      	add	r7, sp, #0
 80161a2:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 80161a4:	687b      	ldr	r3, [r7, #4]
 80161a6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 80161aa:	4618      	mov	r0, r3
 80161ac:	370c      	adds	r7, #12
 80161ae:	46bd      	mov	sp, r7
 80161b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161b4:	4770      	bx	lr

080161b6 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 80161b6:	b480      	push	{r7}
 80161b8:	b083      	sub	sp, #12
 80161ba:	af00      	add	r7, sp, #0
 80161bc:	6078      	str	r0, [r7, #4]
 80161be:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 80161c0:	683b      	ldr	r3, [r7, #0]
 80161c2:	681a      	ldr	r2, [r3, #0]
 80161c4:	687b      	ldr	r3, [r7, #4]
 80161c6:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 80161ca:	2300      	movs	r3, #0
}
 80161cc:	4618      	mov	r0, r3
 80161ce:	370c      	adds	r7, #12
 80161d0:	46bd      	mov	sp, r7
 80161d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80161d6:	4770      	bx	lr

080161d8 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 80161d8:	b480      	push	{r7}
 80161da:	b085      	sub	sp, #20
 80161dc:	af00      	add	r7, sp, #0
 80161de:	6078      	str	r0, [r7, #4]
 80161e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80161e2:	2300      	movs	r3, #0
 80161e4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80161e6:	683b      	ldr	r3, [r7, #0]
 80161e8:	681a      	ldr	r2, [r3, #0]
 80161ea:	687b      	ldr	r3, [r7, #4]
 80161ec:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80161ee:	683b      	ldr	r3, [r7, #0]
 80161f0:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80161f2:	683b      	ldr	r3, [r7, #0]
 80161f4:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80161f6:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80161f8:	683b      	ldr	r3, [r7, #0]
 80161fa:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80161fc:	431a      	orrs	r2, r3
                       Command->CPSM);
 80161fe:	683b      	ldr	r3, [r7, #0]
 8016200:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 8016202:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8016204:	68fa      	ldr	r2, [r7, #12]
 8016206:	4313      	orrs	r3, r2
 8016208:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	68da      	ldr	r2, [r3, #12]
 801620e:	4b06      	ldr	r3, [pc, #24]	@ (8016228 <SDMMC_SendCommand+0x50>)
 8016210:	4013      	ands	r3, r2
 8016212:	68fa      	ldr	r2, [r7, #12]
 8016214:	431a      	orrs	r2, r3
 8016216:	687b      	ldr	r3, [r7, #4]
 8016218:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 801621a:	2300      	movs	r3, #0
}
 801621c:	4618      	mov	r0, r3
 801621e:	3714      	adds	r7, #20
 8016220:	46bd      	mov	sp, r7
 8016222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016226:	4770      	bx	lr
 8016228:	fffee0c0 	.word	0xfffee0c0

0801622c <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 801622c:	b480      	push	{r7}
 801622e:	b083      	sub	sp, #12
 8016230:	af00      	add	r7, sp, #0
 8016232:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	691b      	ldr	r3, [r3, #16]
 8016238:	b2db      	uxtb	r3, r3
}
 801623a:	4618      	mov	r0, r3
 801623c:	370c      	adds	r7, #12
 801623e:	46bd      	mov	sp, r7
 8016240:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016244:	4770      	bx	lr

08016246 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8016246:	b480      	push	{r7}
 8016248:	b085      	sub	sp, #20
 801624a:	af00      	add	r7, sp, #0
 801624c:	6078      	str	r0, [r7, #4]
 801624e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8016250:	687b      	ldr	r3, [r7, #4]
 8016252:	3314      	adds	r3, #20
 8016254:	461a      	mov	r2, r3
 8016256:	683b      	ldr	r3, [r7, #0]
 8016258:	4413      	add	r3, r2
 801625a:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 801625c:	68fb      	ldr	r3, [r7, #12]
 801625e:	681b      	ldr	r3, [r3, #0]
}
 8016260:	4618      	mov	r0, r3
 8016262:	3714      	adds	r7, #20
 8016264:	46bd      	mov	sp, r7
 8016266:	f85d 7b04 	ldr.w	r7, [sp], #4
 801626a:	4770      	bx	lr

0801626c <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 801626c:	b580      	push	{r7, lr}
 801626e:	b088      	sub	sp, #32
 8016270:	af00      	add	r7, sp, #0
 8016272:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8016274:	2300      	movs	r3, #0
 8016276:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8016278:	230c      	movs	r3, #12
 801627a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 801627c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8016280:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8016282:	2300      	movs	r3, #0
 8016284:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8016286:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 801628a:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 801628c:	687b      	ldr	r3, [r7, #4]
 801628e:	68db      	ldr	r3, [r3, #12]
 8016290:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8016298:	687b      	ldr	r3, [r7, #4]
 801629a:	68db      	ldr	r3, [r3, #12]
 801629c:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 80162a0:	687b      	ldr	r3, [r7, #4]
 80162a2:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80162a4:	f107 0308 	add.w	r3, r7, #8
 80162a8:	4619      	mov	r1, r3
 80162aa:	6878      	ldr	r0, [r7, #4]
 80162ac:	f7ff ff94 	bl	80161d8 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 80162b0:	4a0b      	ldr	r2, [pc, #44]	@ (80162e0 <SDMMC_CmdStopTransfer+0x74>)
 80162b2:	210c      	movs	r1, #12
 80162b4:	6878      	ldr	r0, [r7, #4]
 80162b6:	f000 f815 	bl	80162e4 <SDMMC_GetCmdResp1>
 80162ba:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	68db      	ldr	r3, [r3, #12]
 80162c0:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80162c4:	687b      	ldr	r3, [r7, #4]
 80162c6:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 80162c8:	69fb      	ldr	r3, [r7, #28]
 80162ca:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80162ce:	d101      	bne.n	80162d4 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 80162d0:	2300      	movs	r3, #0
 80162d2:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 80162d4:	69fb      	ldr	r3, [r7, #28]
}
 80162d6:	4618      	mov	r0, r3
 80162d8:	3720      	adds	r7, #32
 80162da:	46bd      	mov	sp, r7
 80162dc:	bd80      	pop	{r7, pc}
 80162de:	bf00      	nop
 80162e0:	05f5e100 	.word	0x05f5e100

080162e4 <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80162e4:	b580      	push	{r7, lr}
 80162e6:	b088      	sub	sp, #32
 80162e8:	af00      	add	r7, sp, #0
 80162ea:	60f8      	str	r0, [r7, #12]
 80162ec:	460b      	mov	r3, r1
 80162ee:	607a      	str	r2, [r7, #4]
 80162f0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80162f2:	4b70      	ldr	r3, [pc, #448]	@ (80164b4 <SDMMC_GetCmdResp1+0x1d0>)
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	4a70      	ldr	r2, [pc, #448]	@ (80164b8 <SDMMC_GetCmdResp1+0x1d4>)
 80162f8:	fba2 2303 	umull	r2, r3, r2, r3
 80162fc:	0a5a      	lsrs	r2, r3, #9
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	fb02 f303 	mul.w	r3, r2, r3
 8016304:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 8016306:	69fb      	ldr	r3, [r7, #28]
 8016308:	1e5a      	subs	r2, r3, #1
 801630a:	61fa      	str	r2, [r7, #28]
 801630c:	2b00      	cmp	r3, #0
 801630e:	d102      	bne.n	8016316 <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 8016310:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8016314:	e0c9      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 8016316:	68fb      	ldr	r3, [r7, #12]
 8016318:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801631a:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 801631c:	69ba      	ldr	r2, [r7, #24]
 801631e:	4b67      	ldr	r3, [pc, #412]	@ (80164bc <SDMMC_GetCmdResp1+0x1d8>)
 8016320:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8016322:	2b00      	cmp	r3, #0
 8016324:	d0ef      	beq.n	8016306 <SDMMC_GetCmdResp1+0x22>
 8016326:	69bb      	ldr	r3, [r7, #24]
 8016328:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801632c:	2b00      	cmp	r3, #0
 801632e:	d1ea      	bne.n	8016306 <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8016330:	68fb      	ldr	r3, [r7, #12]
 8016332:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016334:	f003 0304 	and.w	r3, r3, #4
 8016338:	2b00      	cmp	r3, #0
 801633a:	d004      	beq.n	8016346 <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 801633c:	68fb      	ldr	r3, [r7, #12]
 801633e:	2204      	movs	r2, #4
 8016340:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8016342:	2304      	movs	r3, #4
 8016344:	e0b1      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8016346:	68fb      	ldr	r3, [r7, #12]
 8016348:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801634a:	f003 0301 	and.w	r3, r3, #1
 801634e:	2b00      	cmp	r3, #0
 8016350:	d004      	beq.n	801635c <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8016352:	68fb      	ldr	r3, [r7, #12]
 8016354:	2201      	movs	r2, #1
 8016356:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016358:	2301      	movs	r3, #1
 801635a:	e0a6      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 801635c:	68fb      	ldr	r3, [r7, #12]
 801635e:	4a58      	ldr	r2, [pc, #352]	@ (80164c0 <SDMMC_GetCmdResp1+0x1dc>)
 8016360:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 8016362:	68f8      	ldr	r0, [r7, #12]
 8016364:	f7ff ff62 	bl	801622c <SDMMC_GetCommandResponse>
 8016368:	4603      	mov	r3, r0
 801636a:	461a      	mov	r2, r3
 801636c:	7afb      	ldrb	r3, [r7, #11]
 801636e:	4293      	cmp	r3, r2
 8016370:	d001      	beq.n	8016376 <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 8016372:	2301      	movs	r3, #1
 8016374:	e099      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8016376:	2100      	movs	r1, #0
 8016378:	68f8      	ldr	r0, [r7, #12]
 801637a:	f7ff ff64 	bl	8016246 <SDMMC_GetResponse>
 801637e:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8016380:	697a      	ldr	r2, [r7, #20]
 8016382:	4b50      	ldr	r3, [pc, #320]	@ (80164c4 <SDMMC_GetCmdResp1+0x1e0>)
 8016384:	4013      	ands	r3, r2
 8016386:	2b00      	cmp	r3, #0
 8016388:	d101      	bne.n	801638e <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 801638a:	2300      	movs	r3, #0
 801638c:	e08d      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 801638e:	697b      	ldr	r3, [r7, #20]
 8016390:	2b00      	cmp	r3, #0
 8016392:	da02      	bge.n	801639a <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 8016394:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8016398:	e087      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 801639a:	697b      	ldr	r3, [r7, #20]
 801639c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 80163a0:	2b00      	cmp	r3, #0
 80163a2:	d001      	beq.n	80163a8 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 80163a4:	2340      	movs	r3, #64	@ 0x40
 80163a6:	e080      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 80163a8:	697b      	ldr	r3, [r7, #20]
 80163aa:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 80163ae:	2b00      	cmp	r3, #0
 80163b0:	d001      	beq.n	80163b6 <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 80163b2:	2380      	movs	r3, #128	@ 0x80
 80163b4:	e079      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 80163b6:	697b      	ldr	r3, [r7, #20]
 80163b8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d002      	beq.n	80163c6 <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80163c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80163c4:	e071      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80163c6:	697b      	ldr	r3, [r7, #20]
 80163c8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80163cc:	2b00      	cmp	r3, #0
 80163ce:	d002      	beq.n	80163d6 <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80163d0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80163d4:	e069      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80163d6:	697b      	ldr	r3, [r7, #20]
 80163d8:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d002      	beq.n	80163e6 <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80163e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80163e4:	e061      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80163e6:	697b      	ldr	r3, [r7, #20]
 80163e8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80163ec:	2b00      	cmp	r3, #0
 80163ee:	d002      	beq.n	80163f6 <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80163f0:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80163f4:	e059      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80163f6:	697b      	ldr	r3, [r7, #20]
 80163f8:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d002      	beq.n	8016406 <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8016400:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8016404:	e051      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 8016406:	697b      	ldr	r3, [r7, #20]
 8016408:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801640c:	2b00      	cmp	r3, #0
 801640e:	d002      	beq.n	8016416 <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8016410:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8016414:	e049      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 8016416:	697b      	ldr	r3, [r7, #20]
 8016418:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801641c:	2b00      	cmp	r3, #0
 801641e:	d002      	beq.n	8016426 <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8016420:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8016424:	e041      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 8016426:	697b      	ldr	r3, [r7, #20]
 8016428:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 801642c:	2b00      	cmp	r3, #0
 801642e:	d002      	beq.n	8016436 <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8016430:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016434:	e039      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 8016436:	697b      	ldr	r3, [r7, #20]
 8016438:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 801643c:	2b00      	cmp	r3, #0
 801643e:	d002      	beq.n	8016446 <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8016440:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 8016444:	e031      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 8016446:	697b      	ldr	r3, [r7, #20]
 8016448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801644c:	2b00      	cmp	r3, #0
 801644e:	d002      	beq.n	8016456 <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8016450:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8016454:	e029      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 8016456:	697b      	ldr	r3, [r7, #20]
 8016458:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801645c:	2b00      	cmp	r3, #0
 801645e:	d002      	beq.n	8016466 <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8016460:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8016464:	e021      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 8016466:	697b      	ldr	r3, [r7, #20]
 8016468:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801646c:	2b00      	cmp	r3, #0
 801646e:	d002      	beq.n	8016476 <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8016470:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 8016474:	e019      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 8016476:	697b      	ldr	r3, [r7, #20]
 8016478:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801647c:	2b00      	cmp	r3, #0
 801647e:	d002      	beq.n	8016486 <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8016480:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8016484:	e011      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 8016486:	697b      	ldr	r3, [r7, #20]
 8016488:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801648c:	2b00      	cmp	r3, #0
 801648e:	d002      	beq.n	8016496 <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8016490:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8016494:	e009      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 8016496:	697b      	ldr	r3, [r7, #20]
 8016498:	f003 0308 	and.w	r3, r3, #8
 801649c:	2b00      	cmp	r3, #0
 801649e:	d002      	beq.n	80164a6 <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 80164a0:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 80164a4:	e001      	b.n	80164aa <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 80164a6:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 80164aa:	4618      	mov	r0, r3
 80164ac:	3720      	adds	r7, #32
 80164ae:	46bd      	mov	sp, r7
 80164b0:	bd80      	pop	{r7, pc}
 80164b2:	bf00      	nop
 80164b4:	24000400 	.word	0x24000400
 80164b8:	10624dd3 	.word	0x10624dd3
 80164bc:	00200045 	.word	0x00200045
 80164c0:	002000c5 	.word	0x002000c5
 80164c4:	fdffe008 	.word	0xfdffe008

080164c8 <_write>:
#include "tinyaudiocnn.h"
#include "tinyaudiocnn_data.h"
#include "mel_spec_buffer.h"

int _write(int file, char *ptr, int len)
{
 80164c8:	b580      	push	{r7, lr}
 80164ca:	b084      	sub	sp, #16
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	60f8      	str	r0, [r7, #12]
 80164d0:	60b9      	str	r1, [r7, #8]
 80164d2:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 80164d4:	687b      	ldr	r3, [r7, #4]
 80164d6:	b29a      	uxth	r2, r3
 80164d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80164dc:	68b9      	ldr	r1, [r7, #8]
 80164de:	4804      	ldr	r0, [pc, #16]	@ (80164f0 <_write+0x28>)
 80164e0:	f7fe fc40 	bl	8014d64 <HAL_UART_Transmit>
    return len;
 80164e4:	687b      	ldr	r3, [r7, #4]
}
 80164e6:	4618      	mov	r0, r3
 80164e8:	3710      	adds	r7, #16
 80164ea:	46bd      	mov	sp, r7
 80164ec:	bd80      	pop	{r7, pc}
 80164ee:	bf00      	nop
 80164f0:	24006b50 	.word	0x24006b50

080164f4 <ai_log_err>:

// simulated spectrogram 64 mel bands × 258 time frames = 16512 float values
// float dummy_mel_spectrogram[64 * 258];

static void ai_log_err(const ai_error err, const char *fct)
{
 80164f4:	b580      	push	{r7, lr}
 80164f6:	b082      	sub	sp, #8
 80164f8:	af00      	add	r7, sp, #0
 80164fa:	6078      	str	r0, [r7, #4]
 80164fc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80164fe:	683b      	ldr	r3, [r7, #0]
 8016500:	2b00      	cmp	r3, #0
 8016502:	d009      	beq.n	8016518 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 8016504:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 8016506:	461a      	mov	r2, r3
        err.type, err.code);
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 801650e:	6839      	ldr	r1, [r7, #0]
 8016510:	4807      	ldr	r0, [pc, #28]	@ (8016530 <ai_log_err+0x3c>)
 8016512:	f006 fc31 	bl	801cd78 <iprintf>
 8016516:	e009      	b.n	801652c <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 8016518:	793b      	ldrb	r3, [r7, #4]
 801651a:	4619      	mov	r1, r3
 801651c:	687b      	ldr	r3, [r7, #4]
 801651e:	f3c3 2317 	ubfx	r3, r3, #8, #24
 8016522:	461a      	mov	r2, r3
 8016524:	4803      	ldr	r0, [pc, #12]	@ (8016534 <ai_log_err+0x40>)
 8016526:	f006 fc27 	bl	801cd78 <iprintf>

  do {} while (1);
 801652a:	bf00      	nop
 801652c:	bf00      	nop
 801652e:	e7fd      	b.n	801652c <ai_log_err+0x38>
 8016530:	0801e3b0 	.word	0x0801e3b0
 8016534:	0801e3e4 	.word	0x0801e3e4

08016538 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 8016538:	b580      	push	{r7, lr}
 801653a:	b086      	sub	sp, #24
 801653c:	af00      	add	r7, sp, #0
 801653e:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_tinyaudiocnn_create_and_init(&tinyaudiocnn, act_addr, NULL);
 8016540:	2200      	movs	r2, #0
 8016542:	6879      	ldr	r1, [r7, #4]
 8016544:	4828      	ldr	r0, [pc, #160]	@ (80165e8 <ai_boostrap+0xb0>)
 8016546:	f000 fb21 	bl	8016b8c <ai_tinyaudiocnn_create_and_init>
 801654a:	4603      	mov	r3, r0
 801654c:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 801654e:	7b3b      	ldrb	r3, [r7, #12]
 8016550:	2b00      	cmp	r3, #0
 8016552:	d006      	beq.n	8016562 <ai_boostrap+0x2a>
    ai_log_err(err, "ai_tinyaudiocnn_create_and_init");
 8016554:	4925      	ldr	r1, [pc, #148]	@ (80165ec <ai_boostrap+0xb4>)
 8016556:	68f8      	ldr	r0, [r7, #12]
 8016558:	f7ff ffcc 	bl	80164f4 <ai_log_err>
    return -1;
 801655c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016560:	e03e      	b.n	80165e0 <ai_boostrap+0xa8>
  }

  ai_input = ai_tinyaudiocnn_inputs_get(tinyaudiocnn, NULL);
 8016562:	4b21      	ldr	r3, [pc, #132]	@ (80165e8 <ai_boostrap+0xb0>)
 8016564:	681b      	ldr	r3, [r3, #0]
 8016566:	2100      	movs	r1, #0
 8016568:	4618      	mov	r0, r3
 801656a:	f000 fb8d 	bl	8016c88 <ai_tinyaudiocnn_inputs_get>
 801656e:	4603      	mov	r3, r0
 8016570:	4a1f      	ldr	r2, [pc, #124]	@ (80165f0 <ai_boostrap+0xb8>)
 8016572:	6013      	str	r3, [r2, #0]
  ai_output = ai_tinyaudiocnn_outputs_get(tinyaudiocnn, NULL);
 8016574:	4b1c      	ldr	r3, [pc, #112]	@ (80165e8 <ai_boostrap+0xb0>)
 8016576:	681b      	ldr	r3, [r3, #0]
 8016578:	2100      	movs	r1, #0
 801657a:	4618      	mov	r0, r3
 801657c:	f000 fb9e 	bl	8016cbc <ai_tinyaudiocnn_outputs_get>
 8016580:	4603      	mov	r3, r0
 8016582:	4a1c      	ldr	r2, [pc, #112]	@ (80165f4 <ai_boostrap+0xbc>)
 8016584:	6013      	str	r3, [r2, #0]

#if defined(AI_TINYAUDIOCNN_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_TINYAUDIOCNN_IN_NUM; idx++) {
 8016586:	2300      	movs	r3, #0
 8016588:	617b      	str	r3, [r7, #20]
 801658a:	e00f      	b.n	80165ac <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 801658c:	4b18      	ldr	r3, [pc, #96]	@ (80165f0 <ai_boostrap+0xb8>)
 801658e:	6819      	ldr	r1, [r3, #0]
 8016590:	697a      	ldr	r2, [r7, #20]
 8016592:	4613      	mov	r3, r2
 8016594:	00db      	lsls	r3, r3, #3
 8016596:	1a9b      	subs	r3, r3, r2
 8016598:	009b      	lsls	r3, r3, #2
 801659a:	440b      	add	r3, r1
 801659c:	685a      	ldr	r2, [r3, #4]
 801659e:	4916      	ldr	r1, [pc, #88]	@ (80165f8 <ai_boostrap+0xc0>)
 80165a0:	697b      	ldr	r3, [r7, #20]
 80165a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_TINYAUDIOCNN_IN_NUM; idx++) {
 80165a6:	697b      	ldr	r3, [r7, #20]
 80165a8:	3301      	adds	r3, #1
 80165aa:	617b      	str	r3, [r7, #20]
 80165ac:	697b      	ldr	r3, [r7, #20]
 80165ae:	2b00      	cmp	r3, #0
 80165b0:	ddec      	ble.n	801658c <ai_boostrap+0x54>

#if defined(AI_TINYAUDIOCNN_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_TINYAUDIOCNN_OUT_NUM; idx++) {
 80165b2:	2300      	movs	r3, #0
 80165b4:	613b      	str	r3, [r7, #16]
 80165b6:	e00f      	b.n	80165d8 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 80165b8:	4b0e      	ldr	r3, [pc, #56]	@ (80165f4 <ai_boostrap+0xbc>)
 80165ba:	6819      	ldr	r1, [r3, #0]
 80165bc:	693a      	ldr	r2, [r7, #16]
 80165be:	4613      	mov	r3, r2
 80165c0:	00db      	lsls	r3, r3, #3
 80165c2:	1a9b      	subs	r3, r3, r2
 80165c4:	009b      	lsls	r3, r3, #2
 80165c6:	440b      	add	r3, r1
 80165c8:	685a      	ldr	r2, [r3, #4]
 80165ca:	490c      	ldr	r1, [pc, #48]	@ (80165fc <ai_boostrap+0xc4>)
 80165cc:	693b      	ldr	r3, [r7, #16]
 80165ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_TINYAUDIOCNN_OUT_NUM; idx++) {
 80165d2:	693b      	ldr	r3, [r7, #16]
 80165d4:	3301      	adds	r3, #1
 80165d6:	613b      	str	r3, [r7, #16]
 80165d8:	693b      	ldr	r3, [r7, #16]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	ddec      	ble.n	80165b8 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_TINYAUDIOCNN_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 80165de:	2300      	movs	r3, #0
}
 80165e0:	4618      	mov	r0, r3
 80165e2:	3718      	adds	r7, #24
 80165e4:	46bd      	mov	sp, r7
 80165e6:	bd80      	pop	{r7, pc}
 80165e8:	24036e40 	.word	0x24036e40
 80165ec:	0801e414 	.word	0x0801e414
 80165f0:	24036e44 	.word	0x24036e44
 80165f4:	24036e48 	.word	0x24036e48
 80165f8:	24006be4 	.word	0x24006be4
 80165fc:	24006be8 	.word	0x24006be8

08016600 <ai_run>:

static int ai_run(void)
{
 8016600:	b580      	push	{r7, lr}
 8016602:	b082      	sub	sp, #8
 8016604:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_tinyaudiocnn_run(tinyaudiocnn, ai_input, ai_output);
 8016606:	4b0f      	ldr	r3, [pc, #60]	@ (8016644 <ai_run+0x44>)
 8016608:	681b      	ldr	r3, [r3, #0]
 801660a:	4a0f      	ldr	r2, [pc, #60]	@ (8016648 <ai_run+0x48>)
 801660c:	6811      	ldr	r1, [r2, #0]
 801660e:	4a0f      	ldr	r2, [pc, #60]	@ (801664c <ai_run+0x4c>)
 8016610:	6812      	ldr	r2, [r2, #0]
 8016612:	4618      	mov	r0, r3
 8016614:	f000 fba8 	bl	8016d68 <ai_tinyaudiocnn_run>
 8016618:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 801661a:	687b      	ldr	r3, [r7, #4]
 801661c:	2b01      	cmp	r3, #1
 801661e:	d00c      	beq.n	801663a <ai_run+0x3a>
    ai_log_err(ai_tinyaudiocnn_get_error(tinyaudiocnn),
 8016620:	4b08      	ldr	r3, [pc, #32]	@ (8016644 <ai_run+0x44>)
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	4618      	mov	r0, r3
 8016626:	f000 fa8f 	bl	8016b48 <ai_tinyaudiocnn_get_error>
 801662a:	4603      	mov	r3, r0
 801662c:	4908      	ldr	r1, [pc, #32]	@ (8016650 <ai_run+0x50>)
 801662e:	4618      	mov	r0, r3
 8016630:	f7ff ff60 	bl	80164f4 <ai_log_err>
        "ai_tinyaudiocnn_run");
    return -1;
 8016634:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8016638:	e000      	b.n	801663c <ai_run+0x3c>
  }

  return 0;
 801663a:	2300      	movs	r3, #0
}
 801663c:	4618      	mov	r0, r3
 801663e:	3708      	adds	r7, #8
 8016640:	46bd      	mov	sp, r7
 8016642:	bd80      	pop	{r7, pc}
 8016644:	24036e40 	.word	0x24036e40
 8016648:	24036e44 	.word	0x24036e44
 801664c:	24036e48 	.word	0x24036e48
 8016650:	0801e434 	.word	0x0801e434

08016654 <acquire_and_process_data>:
// non dummy integration part
// extern float mel_spec_buffer[64 * 258]; 

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[], uint16_t* pcm_buffer)
{
 8016654:	b480      	push	{r7}
 8016656:	b085      	sub	sp, #20
 8016658:	af00      	add	r7, sp, #0
 801665a:	6078      	str	r0, [r7, #4]
 801665c:	6039      	str	r1, [r7, #0]
    float *dst = (float *)data[0];
 801665e:	687b      	ldr	r3, [r7, #4]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < AI_TINYAUDIOCNN_IN_1_SIZE; ++i) {
 8016664:	2300      	movs	r3, #0
 8016666:	60fb      	str	r3, [r7, #12]
 8016668:	e011      	b.n	801668e <acquire_and_process_data+0x3a>
        dst[i] = pcm_buffer[i];  // 64 * 258 = 16512
 801666a:	68fb      	ldr	r3, [r7, #12]
 801666c:	005b      	lsls	r3, r3, #1
 801666e:	683a      	ldr	r2, [r7, #0]
 8016670:	4413      	add	r3, r2
 8016672:	8819      	ldrh	r1, [r3, #0]
 8016674:	68fb      	ldr	r3, [r7, #12]
 8016676:	009b      	lsls	r3, r3, #2
 8016678:	68ba      	ldr	r2, [r7, #8]
 801667a:	4413      	add	r3, r2
 801667c:	ee07 1a90 	vmov	s15, r1
 8016680:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8016684:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < AI_TINYAUDIOCNN_IN_1_SIZE; ++i) {
 8016688:	68fb      	ldr	r3, [r7, #12]
 801668a:	3301      	adds	r3, #1
 801668c:	60fb      	str	r3, [r7, #12]
 801668e:	68fb      	ldr	r3, [r7, #12]
 8016690:	f5b3 4f81 	cmp.w	r3, #16512	@ 0x4080
 8016694:	dbe9      	blt.n	801666a <acquire_and_process_data+0x16>
        // printf("pcm buf: %d\r\n", pcm_buffer[i]);
    }

    return 0;
 8016696:	2300      	movs	r3, #0
}
 8016698:	4618      	mov	r0, r3
 801669a:	3714      	adds	r7, #20
 801669c:	46bd      	mov	sp, r7
 801669e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80166a2:	4770      	bx	lr

080166a4 <post_process>:


int post_process(ai_i8* data[])
{
 80166a4:	b5b0      	push	{r4, r5, r7, lr}
 80166a6:	b08e      	sub	sp, #56	@ 0x38
 80166a8:	af00      	add	r7, sp, #0
 80166aa:	6078      	str	r0, [r7, #4]
  /* process the predictions
  */

    // data[0] is a void pointer to a float buffer
    float *predictions = (float *)data[0]; 
 80166ac:	687b      	ldr	r3, [r7, #4]
 80166ae:	681b      	ldr	r3, [r3, #0]
 80166b0:	627b      	str	r3, [r7, #36]	@ 0x24

    char *class_names[] = {
 80166b2:	4b3c      	ldr	r3, [pc, #240]	@ (80167a4 <post_process+0x100>)
 80166b4:	f107 0408 	add.w	r4, r7, #8
 80166b8:	461d      	mov	r5, r3
 80166ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80166bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80166be:	e895 0003 	ldmia.w	r5, {r0, r1}
 80166c2:	e884 0003 	stmia.w	r4, {r0, r1}
        "Alarm",
        "Chick Begging",
        "no_buow"
    };

    int max_index = 0;
 80166c6:	2300      	movs	r3, #0
 80166c8:	637b      	str	r3, [r7, #52]	@ 0x34
    float max_value = predictions[0];
 80166ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	633b      	str	r3, [r7, #48]	@ 0x30
    for (int i = 0; i < AI_TINYAUDIOCNN_OUT_1_SIZE; ++i) {
 80166d0:	2300      	movs	r3, #0
 80166d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80166d4:	e04f      	b.n	8016776 <post_process+0xd2>
        if (predictions[i] > max_value) {
 80166d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166d8:	009b      	lsls	r3, r3, #2
 80166da:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166dc:	4413      	add	r3, r2
 80166de:	edd3 7a00 	vldr	s15, [r3]
 80166e2:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 80166e6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80166ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80166ee:	d507      	bpl.n	8016700 <post_process+0x5c>
            max_value = predictions[i];
 80166f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166f2:	009b      	lsls	r3, r3, #2
 80166f4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80166f6:	4413      	add	r3, r2
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	633b      	str	r3, [r7, #48]	@ 0x30
            max_index = i;
 80166fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80166fe:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        int predict = predictions[i] * 100;
 8016700:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016702:	009b      	lsls	r3, r3, #2
 8016704:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016706:	4413      	add	r3, r2
 8016708:	edd3 7a00 	vldr	s15, [r3]
 801670c:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 80167a8 <post_process+0x104>
 8016710:	ee67 7a87 	vmul.f32	s15, s15, s14
 8016714:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8016718:	ee17 3a90 	vmov	r3, s15
 801671c:	62bb      	str	r3, [r7, #40]	@ 0x28
        int whole_part = predict / 100;
 801671e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016720:	4a22      	ldr	r2, [pc, #136]	@ (80167ac <post_process+0x108>)
 8016722:	fb82 1203 	smull	r1, r2, r2, r3
 8016726:	1152      	asrs	r2, r2, #5
 8016728:	17db      	asrs	r3, r3, #31
 801672a:	1ad3      	subs	r3, r2, r3
 801672c:	623b      	str	r3, [r7, #32]
        if (predict < 0) {
 801672e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016730:	2b00      	cmp	r3, #0
 8016732:	da02      	bge.n	801673a <post_process+0x96>
          predict -= 2 * predict; // convert to positive
 8016734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016736:	425b      	negs	r3, r3
 8016738:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

      printf("Class: %s, Score: %d.%d\n\r", class_names[i], whole_part, predict%100);
 801673a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801673c:	009b      	lsls	r3, r3, #2
 801673e:	3338      	adds	r3, #56	@ 0x38
 8016740:	443b      	add	r3, r7
 8016742:	f853 0c30 	ldr.w	r0, [r3, #-48]
 8016746:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016748:	4a18      	ldr	r2, [pc, #96]	@ (80167ac <post_process+0x108>)
 801674a:	fb82 1203 	smull	r1, r2, r2, r3
 801674e:	1151      	asrs	r1, r2, #5
 8016750:	17da      	asrs	r2, r3, #31
 8016752:	1a8a      	subs	r2, r1, r2
 8016754:	2164      	movs	r1, #100	@ 0x64
 8016756:	fb01 f202 	mul.w	r2, r1, r2
 801675a:	1a9a      	subs	r2, r3, r2
 801675c:	4613      	mov	r3, r2
 801675e:	6a3a      	ldr	r2, [r7, #32]
 8016760:	4601      	mov	r1, r0
 8016762:	4813      	ldr	r0, [pc, #76]	@ (80167b0 <post_process+0x10c>)
 8016764:	f006 fb08 	bl	801cd78 <iprintf>
      HAL_Delay(2000);
 8016768:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 801676c:	f7f2 fca8 	bl	80090c0 <HAL_Delay>
    for (int i = 0; i < AI_TINYAUDIOCNN_OUT_1_SIZE; ++i) {
 8016770:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016772:	3301      	adds	r3, #1
 8016774:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016776:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8016778:	2b05      	cmp	r3, #5
 801677a:	ddac      	ble.n	80166d6 <post_process+0x32>
    }
    printf("Predicted Class: %s\n\r", class_names[max_index]);
 801677c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801677e:	009b      	lsls	r3, r3, #2
 8016780:	3338      	adds	r3, #56	@ 0x38
 8016782:	443b      	add	r3, r7
 8016784:	f853 3c30 	ldr.w	r3, [r3, #-48]
 8016788:	4619      	mov	r1, r3
 801678a:	480a      	ldr	r0, [pc, #40]	@ (80167b4 <post_process+0x110>)
 801678c:	f006 faf4 	bl	801cd78 <iprintf>
    HAL_Delay(8000);
 8016790:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8016794:	f7f2 fc94 	bl	80090c0 <HAL_Delay>

    return 0;
 8016798:	2300      	movs	r3, #0

    // output tensor is the first element of data array

    // return 0;
}
 801679a:	4618      	mov	r0, r3
 801679c:	3738      	adds	r7, #56	@ 0x38
 801679e:	46bd      	mov	sp, r7
 80167a0:	bdb0      	pop	{r4, r5, r7, pc}
 80167a2:	bf00      	nop
 80167a4:	0801e4b4 	.word	0x0801e4b4
 80167a8:	42c80000 	.word	0x42c80000
 80167ac:	51eb851f 	.word	0x51eb851f
 80167b0:	0801e448 	.word	0x0801e448
 80167b4:	0801e464 	.word	0x0801e464

080167b8 <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 80167b8:	b580      	push	{r7, lr}
 80167ba:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 80167bc:	4803      	ldr	r0, [pc, #12]	@ (80167cc <MX_X_CUBE_AI_Init+0x14>)
 80167be:	f006 fb43 	bl	801ce48 <puts>

  ai_boostrap(data_activations0);
 80167c2:	4803      	ldr	r0, [pc, #12]	@ (80167d0 <MX_X_CUBE_AI_Init+0x18>)
 80167c4:	f7ff feb8 	bl	8016538 <ai_boostrap>
    /* USER CODE END 5 */
}
 80167c8:	bf00      	nop
 80167ca:	bd80      	pop	{r7, pc}
 80167cc:	0801e4cc 	.word	0x0801e4cc
 80167d0:	240005d8 	.word	0x240005d8

080167d4 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(uint16_t *pcm_buffer)
{
 80167d4:	b580      	push	{r7, lr}
 80167d6:	b084      	sub	sp, #16
 80167d8:	af00      	add	r7, sp, #0
 80167da:	6078      	str	r0, [r7, #4]
    /* USER CODE BEGIN 6 */
  int res = -1;
 80167dc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80167e0:	60fb      	str	r3, [r7, #12]

  if (tinyaudiocnn) {
 80167e2:	4b15      	ldr	r3, [pc, #84]	@ (8016838 <MX_X_CUBE_AI_Process+0x64>)
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	2b00      	cmp	r3, #0
 80167e8:	d015      	beq.n	8016816 <MX_X_CUBE_AI_Process+0x42>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins, pcm_buffer);
 80167ea:	6879      	ldr	r1, [r7, #4]
 80167ec:	4813      	ldr	r0, [pc, #76]	@ (801683c <MX_X_CUBE_AI_Process+0x68>)
 80167ee:	f7ff ff31 	bl	8016654 <acquire_and_process_data>
 80167f2:	60f8      	str	r0, [r7, #12]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80167f4:	68fb      	ldr	r3, [r7, #12]
 80167f6:	2b00      	cmp	r3, #0
 80167f8:	d102      	bne.n	8016800 <MX_X_CUBE_AI_Process+0x2c>
        res = ai_run();
 80167fa:	f7ff ff01 	bl	8016600 <ai_run>
 80167fe:	60f8      	str	r0, [r7, #12]
      /* 3- post-process the predictions */
      if (res == 0) {
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	2b00      	cmp	r3, #0
 8016804:	d104      	bne.n	8016810 <MX_X_CUBE_AI_Process+0x3c>
        res = post_process(data_outs);
 8016806:	480e      	ldr	r0, [pc, #56]	@ (8016840 <MX_X_CUBE_AI_Process+0x6c>)
 8016808:	f7ff ff4c 	bl	80166a4 <post_process>
 801680c:	60f8      	str	r0, [r7, #12]
        return;
 801680e:	e010      	b.n	8016832 <MX_X_CUBE_AI_Process+0x5e>
      }
    } while (res==0);
 8016810:	68fb      	ldr	r3, [r7, #12]
 8016812:	2b00      	cmp	r3, #0
 8016814:	d0e9      	beq.n	80167ea <MX_X_CUBE_AI_Process+0x16>
  }

  if (res) {
 8016816:	68fb      	ldr	r3, [r7, #12]
 8016818:	2b00      	cmp	r3, #0
 801681a:	d00a      	beq.n	8016832 <MX_X_CUBE_AI_Process+0x5e>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 801681c:	2311      	movs	r3, #17
 801681e:	723b      	strb	r3, [r7, #8]
 8016820:	68bb      	ldr	r3, [r7, #8]
 8016822:	2210      	movs	r2, #16
 8016824:	f362 231f 	bfi	r3, r2, #8, #24
 8016828:	60bb      	str	r3, [r7, #8]
    ai_log_err(err, "Process has FAILED");
 801682a:	4906      	ldr	r1, [pc, #24]	@ (8016844 <MX_X_CUBE_AI_Process+0x70>)
 801682c:	68b8      	ldr	r0, [r7, #8]
 801682e:	f7ff fe61 	bl	80164f4 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 8016832:	3710      	adds	r7, #16
 8016834:	46bd      	mov	sp, r7
 8016836:	bd80      	pop	{r7, pc}
 8016838:	24036e40 	.word	0x24036e40
 801683c:	24006be4 	.word	0x24006be4
 8016840:	24006be8 	.word	0x24006be8
 8016844:	0801e4ec 	.word	0x0801e4ec

08016848 <tinyaudiocnn_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool tinyaudiocnn_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 8016848:	b580      	push	{r7, lr}
 801684a:	b082      	sub	sp, #8
 801684c:	af00      	add	r7, sp, #0
 801684e:	6078      	str	r0, [r7, #4]
 8016850:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_tinyaudiocnn_activations_map, 1, params)) {
 8016852:	683a      	ldr	r2, [r7, #0]
 8016854:	2101      	movs	r1, #1
 8016856:	484d      	ldr	r0, [pc, #308]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016858:	f000 ff56 	bl	8017708 <ai_platform_get_activations_map>
 801685c:	4603      	mov	r3, r0
 801685e:	2b00      	cmp	r3, #0
 8016860:	f000 808a 	beq.w	8016978 <tinyaudiocnn_configure_activations+0x130>
    /* Updating activations (byte) offsets */
    
    serving_default_args_00_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 85848);
 8016864:	4b49      	ldr	r3, [pc, #292]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016866:	681a      	ldr	r2, [r3, #0]
 8016868:	4b49      	ldr	r3, [pc, #292]	@ (8016990 <tinyaudiocnn_configure_activations+0x148>)
 801686a:	4413      	add	r3, r2
 801686c:	4a49      	ldr	r2, [pc, #292]	@ (8016994 <tinyaudiocnn_configure_activations+0x14c>)
 801686e:	6093      	str	r3, [r2, #8]
    serving_default_args_00_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 85848);
 8016870:	4b46      	ldr	r3, [pc, #280]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016872:	681a      	ldr	r2, [r3, #0]
 8016874:	4b46      	ldr	r3, [pc, #280]	@ (8016990 <tinyaudiocnn_configure_activations+0x148>)
 8016876:	4413      	add	r3, r2
 8016878:	4a46      	ldr	r2, [pc, #280]	@ (8016994 <tinyaudiocnn_configure_activations+0x14c>)
 801687a:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151896);
 801687c:	4b43      	ldr	r3, [pc, #268]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801687e:	681a      	ldr	r2, [r3, #0]
 8016880:	4b45      	ldr	r3, [pc, #276]	@ (8016998 <tinyaudiocnn_configure_activations+0x150>)
 8016882:	4413      	add	r3, r2
 8016884:	4a45      	ldr	r2, [pc, #276]	@ (801699c <tinyaudiocnn_configure_activations+0x154>)
 8016886:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151896);
 8016888:	4b40      	ldr	r3, [pc, #256]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801688a:	681a      	ldr	r2, [r3, #0]
 801688c:	4b42      	ldr	r3, [pc, #264]	@ (8016998 <tinyaudiocnn_configure_activations+0x150>)
 801688e:	4413      	add	r3, r2
 8016890:	4a42      	ldr	r2, [pc, #264]	@ (801699c <tinyaudiocnn_configure_activations+0x154>)
 8016892:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151932);
 8016894:	4b3d      	ldr	r3, [pc, #244]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016896:	681a      	ldr	r2, [r3, #0]
 8016898:	4b41      	ldr	r3, [pc, #260]	@ (80169a0 <tinyaudiocnn_configure_activations+0x158>)
 801689a:	4413      	add	r3, r2
 801689c:	4a41      	ldr	r2, [pc, #260]	@ (80169a4 <tinyaudiocnn_configure_activations+0x15c>)
 801689e:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151932);
 80168a0:	4b3a      	ldr	r3, [pc, #232]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168a2:	681a      	ldr	r2, [r3, #0]
 80168a4:	4b3e      	ldr	r3, [pc, #248]	@ (80169a0 <tinyaudiocnn_configure_activations+0x158>)
 80168a6:	4413      	add	r3, r2
 80168a8:	4a3e      	ldr	r2, [pc, #248]	@ (80169a4 <tinyaudiocnn_configure_activations+0x15c>)
 80168aa:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 8352);
 80168ac:	4b37      	ldr	r3, [pc, #220]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168ae:	681a      	ldr	r2, [r3, #0]
 80168b0:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 80168b4:	4413      	add	r3, r2
 80168b6:	4a3c      	ldr	r2, [pc, #240]	@ (80169a8 <tinyaudiocnn_configure_activations+0x160>)
 80168b8:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 8352);
 80168ba:	4b34      	ldr	r3, [pc, #208]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 80168c2:	4413      	add	r3, r2
 80168c4:	4a38      	ldr	r2, [pc, #224]	@ (80169a8 <tinyaudiocnn_configure_activations+0x160>)
 80168c6:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch0_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140448);
 80168c8:	4b30      	ldr	r3, [pc, #192]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168ca:	681a      	ldr	r2, [r3, #0]
 80168cc:	4b37      	ldr	r3, [pc, #220]	@ (80169ac <tinyaudiocnn_configure_activations+0x164>)
 80168ce:	4413      	add	r3, r2
 80168d0:	4a37      	ldr	r2, [pc, #220]	@ (80169b0 <tinyaudiocnn_configure_activations+0x168>)
 80168d2:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140448);
 80168d4:	4b2d      	ldr	r3, [pc, #180]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168d6:	681a      	ldr	r2, [r3, #0]
 80168d8:	4b34      	ldr	r3, [pc, #208]	@ (80169ac <tinyaudiocnn_configure_activations+0x164>)
 80168da:	4413      	add	r3, r2
 80168dc:	4a34      	ldr	r2, [pc, #208]	@ (80169b0 <tinyaudiocnn_configure_activations+0x168>)
 80168de:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch1_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140736);
 80168e0:	4b2a      	ldr	r3, [pc, #168]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168e2:	681a      	ldr	r2, [r3, #0]
 80168e4:	4b33      	ldr	r3, [pc, #204]	@ (80169b4 <tinyaudiocnn_configure_activations+0x16c>)
 80168e6:	4413      	add	r3, r2
 80168e8:	4a33      	ldr	r2, [pc, #204]	@ (80169b8 <tinyaudiocnn_configure_activations+0x170>)
 80168ea:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140736);
 80168ec:	4b27      	ldr	r3, [pc, #156]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168ee:	681a      	ldr	r2, [r3, #0]
 80168f0:	4b30      	ldr	r3, [pc, #192]	@ (80169b4 <tinyaudiocnn_configure_activations+0x16c>)
 80168f2:	4413      	add	r3, r2
 80168f4:	4a30      	ldr	r2, [pc, #192]	@ (80169b8 <tinyaudiocnn_configure_activations+0x170>)
 80168f6:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 80168f8:	4b24      	ldr	r3, [pc, #144]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 80168fa:	681b      	ldr	r3, [r3, #0]
 80168fc:	4a2f      	ldr	r2, [pc, #188]	@ (80169bc <tinyaudiocnn_configure_activations+0x174>)
 80168fe:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 8016900:	4b22      	ldr	r3, [pc, #136]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016902:	681b      	ldr	r3, [r3, #0]
 8016904:	4a2d      	ldr	r2, [pc, #180]	@ (80169bc <tinyaudiocnn_configure_activations+0x174>)
 8016906:	60d3      	str	r3, [r2, #12]
    conv2d_5_scratch0_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 65536);
 8016908:	4b20      	ldr	r3, [pc, #128]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 8016910:	4a2b      	ldr	r2, [pc, #172]	@ (80169c0 <tinyaudiocnn_configure_activations+0x178>)
 8016912:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 65536);
 8016914:	4b1d      	ldr	r3, [pc, #116]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016916:	681b      	ldr	r3, [r3, #0]
 8016918:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 801691c:	4a28      	ldr	r2, [pc, #160]	@ (80169c0 <tinyaudiocnn_configure_activations+0x178>)
 801691e:	60d3      	str	r3, [r2, #12]
    conv2d_5_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 8016920:	4b1a      	ldr	r3, [pc, #104]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016922:	681a      	ldr	r2, [r3, #0]
 8016924:	4b27      	ldr	r3, [pc, #156]	@ (80169c4 <tinyaudiocnn_configure_activations+0x17c>)
 8016926:	4413      	add	r3, r2
 8016928:	4a27      	ldr	r2, [pc, #156]	@ (80169c8 <tinyaudiocnn_configure_activations+0x180>)
 801692a:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 801692c:	4b17      	ldr	r3, [pc, #92]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801692e:	681a      	ldr	r2, [r3, #0]
 8016930:	4b24      	ldr	r3, [pc, #144]	@ (80169c4 <tinyaudiocnn_configure_activations+0x17c>)
 8016932:	4413      	add	r3, r2
 8016934:	4a24      	ldr	r2, [pc, #144]	@ (80169c8 <tinyaudiocnn_configure_activations+0x180>)
 8016936:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 8016938:	4b14      	ldr	r3, [pc, #80]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801693a:	681a      	ldr	r2, [r3, #0]
 801693c:	4b21      	ldr	r3, [pc, #132]	@ (80169c4 <tinyaudiocnn_configure_activations+0x17c>)
 801693e:	4413      	add	r3, r2
 8016940:	4a22      	ldr	r2, [pc, #136]	@ (80169cc <tinyaudiocnn_configure_activations+0x184>)
 8016942:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 8016944:	4b11      	ldr	r3, [pc, #68]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016946:	681a      	ldr	r2, [r3, #0]
 8016948:	4b1e      	ldr	r3, [pc, #120]	@ (80169c4 <tinyaudiocnn_configure_activations+0x17c>)
 801694a:	4413      	add	r3, r2
 801694c:	4a1f      	ldr	r2, [pc, #124]	@ (80169cc <tinyaudiocnn_configure_activations+0x184>)
 801694e:	60d3      	str	r3, [r2, #12]
    reduce_6_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 8016950:	4b0e      	ldr	r3, [pc, #56]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	4a1e      	ldr	r2, [pc, #120]	@ (80169d0 <tinyaudiocnn_configure_activations+0x188>)
 8016956:	6093      	str	r3, [r2, #8]
    reduce_6_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 8016958:	4b0c      	ldr	r3, [pc, #48]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4a1c      	ldr	r2, [pc, #112]	@ (80169d0 <tinyaudiocnn_configure_activations+0x188>)
 801695e:	60d3      	str	r3, [r2, #12]
    gemm_7_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 128);
 8016960:	4b0a      	ldr	r3, [pc, #40]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 8016962:	681b      	ldr	r3, [r3, #0]
 8016964:	3380      	adds	r3, #128	@ 0x80
 8016966:	4a1b      	ldr	r2, [pc, #108]	@ (80169d4 <tinyaudiocnn_configure_activations+0x18c>)
 8016968:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 128);
 801696a:	4b08      	ldr	r3, [pc, #32]	@ (801698c <tinyaudiocnn_configure_activations+0x144>)
 801696c:	681b      	ldr	r3, [r3, #0]
 801696e:	3380      	adds	r3, #128	@ 0x80
 8016970:	4a18      	ldr	r2, [pc, #96]	@ (80169d4 <tinyaudiocnn_configure_activations+0x18c>)
 8016972:	60d3      	str	r3, [r2, #12]
    return true;
 8016974:	2301      	movs	r3, #1
 8016976:	e005      	b.n	8016984 <tinyaudiocnn_configure_activations+0x13c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8016978:	2213      	movs	r2, #19
 801697a:	2130      	movs	r1, #48	@ 0x30
 801697c:	6878      	ldr	r0, [r7, #4]
 801697e:	f000 ff43 	bl	8017808 <ai_platform_network_set_error>
  return false;
 8016982:	2300      	movs	r3, #0
}
 8016984:	4618      	mov	r0, r3
 8016986:	3708      	adds	r7, #8
 8016988:	46bd      	mov	sp, r7
 801698a:	bd80      	pop	{r7, pc}
 801698c:	24036e4c 	.word	0x24036e4c
 8016990:	00014f58 	.word	0x00014f58
 8016994:	240005dc 	.word	0x240005dc
 8016998:	00025158 	.word	0x00025158
 801699c:	240006cc 	.word	0x240006cc
 80169a0:	0002517c 	.word	0x0002517c
 80169a4:	240006dc 	.word	0x240006dc
 80169a8:	240005ec 	.word	0x240005ec
 80169ac:	000224a0 	.word	0x000224a0
 80169b0:	240006ec 	.word	0x240006ec
 80169b4:	000225c0 	.word	0x000225c0
 80169b8:	240006fc 	.word	0x240006fc
 80169bc:	240005fc 	.word	0x240005fc
 80169c0:	2400070c 	.word	0x2400070c
 80169c4:	00010240 	.word	0x00010240
 80169c8:	2400060c 	.word	0x2400060c
 80169cc:	2400061c 	.word	0x2400061c
 80169d0:	2400062c 	.word	0x2400062c
 80169d4:	2400063c 	.word	0x2400063c

080169d8 <tinyaudiocnn_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool tinyaudiocnn_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 80169d8:	b580      	push	{r7, lr}
 80169da:	b082      	sub	sp, #8
 80169dc:	af00      	add	r7, sp, #0
 80169de:	6078      	str	r0, [r7, #4]
 80169e0:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_tinyaudiocnn_weights_map, 1, params)) {
 80169e2:	683a      	ldr	r2, [r7, #0]
 80169e4:	2101      	movs	r1, #1
 80169e6:	484f      	ldr	r0, [pc, #316]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 80169e8:	f000 fe36 	bl	8017658 <ai_platform_get_weights_map>
 80169ec:	4603      	mov	r3, r0
 80169ee:	2b00      	cmp	r3, #0
 80169f0:	f000 808e 	beq.w	8016b10 <tinyaudiocnn_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 80169f4:	4b4c      	ldr	r3, [pc, #304]	@ (8016b28 <tinyaudiocnn_configure_weights+0x150>)
 80169f6:	681b      	ldr	r3, [r3, #0]
 80169f8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80169fc:	4a4a      	ldr	r2, [pc, #296]	@ (8016b28 <tinyaudiocnn_configure_weights+0x150>)
 80169fe:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 0);
 8016a00:	4b48      	ldr	r3, [pc, #288]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a02:	681b      	ldr	r3, [r3, #0]
 8016a04:	4a48      	ldr	r2, [pc, #288]	@ (8016b28 <tinyaudiocnn_configure_weights+0x150>)
 8016a06:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 0);
 8016a08:	4b46      	ldr	r3, [pc, #280]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a0a:	681b      	ldr	r3, [r3, #0]
 8016a0c:	4a46      	ldr	r2, [pc, #280]	@ (8016b28 <tinyaudiocnn_configure_weights+0x150>)
 8016a0e:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8016a10:	4b46      	ldr	r3, [pc, #280]	@ (8016b2c <tinyaudiocnn_configure_weights+0x154>)
 8016a12:	681b      	ldr	r3, [r3, #0]
 8016a14:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016a18:	4a44      	ldr	r2, [pc, #272]	@ (8016b2c <tinyaudiocnn_configure_weights+0x154>)
 8016a1a:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 288);
 8016a1c:	4b41      	ldr	r3, [pc, #260]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a1e:	681b      	ldr	r3, [r3, #0]
 8016a20:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8016a24:	4a41      	ldr	r2, [pc, #260]	@ (8016b2c <tinyaudiocnn_configure_weights+0x154>)
 8016a26:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 288);
 8016a28:	4b3e      	ldr	r3, [pc, #248]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a2a:	681b      	ldr	r3, [r3, #0]
 8016a2c:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8016a30:	4a3e      	ldr	r2, [pc, #248]	@ (8016b2c <tinyaudiocnn_configure_weights+0x154>)
 8016a32:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8016a34:	4b3e      	ldr	r3, [pc, #248]	@ (8016b30 <tinyaudiocnn_configure_weights+0x158>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016a3c:	4a3c      	ldr	r2, [pc, #240]	@ (8016b30 <tinyaudiocnn_configure_weights+0x158>)
 8016a3e:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 320);
 8016a40:	4b38      	ldr	r3, [pc, #224]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a42:	681b      	ldr	r3, [r3, #0]
 8016a44:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8016a48:	4a39      	ldr	r2, [pc, #228]	@ (8016b30 <tinyaudiocnn_configure_weights+0x158>)
 8016a4a:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 320);
 8016a4c:	4b35      	ldr	r3, [pc, #212]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a4e:	681b      	ldr	r3, [r3, #0]
 8016a50:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8016a54:	4a36      	ldr	r2, [pc, #216]	@ (8016b30 <tinyaudiocnn_configure_weights+0x158>)
 8016a56:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8016a58:	4b36      	ldr	r3, [pc, #216]	@ (8016b34 <tinyaudiocnn_configure_weights+0x15c>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016a60:	4a34      	ldr	r2, [pc, #208]	@ (8016b34 <tinyaudiocnn_configure_weights+0x15c>)
 8016a62:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4928);
 8016a64:	4b2f      	ldr	r3, [pc, #188]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a66:	681b      	ldr	r3, [r3, #0]
 8016a68:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8016a6c:	4a31      	ldr	r2, [pc, #196]	@ (8016b34 <tinyaudiocnn_configure_weights+0x15c>)
 8016a6e:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4928);
 8016a70:	4b2c      	ldr	r3, [pc, #176]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8016a78:	4a2e      	ldr	r2, [pc, #184]	@ (8016b34 <tinyaudiocnn_configure_weights+0x15c>)
 8016a7a:	60d3      	str	r3, [r2, #12]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8016a7c:	4b2e      	ldr	r3, [pc, #184]	@ (8016b38 <tinyaudiocnn_configure_weights+0x160>)
 8016a7e:	681b      	ldr	r3, [r3, #0]
 8016a80:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016a84:	4a2c      	ldr	r2, [pc, #176]	@ (8016b38 <tinyaudiocnn_configure_weights+0x160>)
 8016a86:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4992);
 8016a88:	4b26      	ldr	r3, [pc, #152]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a8a:	681b      	ldr	r3, [r3, #0]
 8016a8c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8016a90:	4a29      	ldr	r2, [pc, #164]	@ (8016b38 <tinyaudiocnn_configure_weights+0x160>)
 8016a92:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4992);
 8016a94:	4b23      	ldr	r3, [pc, #140]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016a96:	681b      	ldr	r3, [r3, #0]
 8016a98:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8016a9c:	4a26      	ldr	r2, [pc, #152]	@ (8016b38 <tinyaudiocnn_configure_weights+0x160>)
 8016a9e:	60d3      	str	r3, [r2, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8016aa0:	4b26      	ldr	r3, [pc, #152]	@ (8016b3c <tinyaudiocnn_configure_weights+0x164>)
 8016aa2:	681b      	ldr	r3, [r3, #0]
 8016aa4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016aa8:	4a24      	ldr	r2, [pc, #144]	@ (8016b3c <tinyaudiocnn_configure_weights+0x164>)
 8016aaa:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23424);
 8016aac:	4b1d      	ldr	r3, [pc, #116]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	f503 43b7 	add.w	r3, r3, #23424	@ 0x5b80
 8016ab4:	4a21      	ldr	r2, [pc, #132]	@ (8016b3c <tinyaudiocnn_configure_weights+0x164>)
 8016ab6:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23424);
 8016ab8:	4b1a      	ldr	r3, [pc, #104]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016aba:	681b      	ldr	r3, [r3, #0]
 8016abc:	f503 43b7 	add.w	r3, r3, #23424	@ 0x5b80
 8016ac0:	4a1e      	ldr	r2, [pc, #120]	@ (8016b3c <tinyaudiocnn_configure_weights+0x164>)
 8016ac2:	60d3      	str	r3, [r2, #12]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8016ac4:	4b1e      	ldr	r3, [pc, #120]	@ (8016b40 <tinyaudiocnn_configure_weights+0x168>)
 8016ac6:	681b      	ldr	r3, [r3, #0]
 8016ac8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016acc:	4a1c      	ldr	r2, [pc, #112]	@ (8016b40 <tinyaudiocnn_configure_weights+0x168>)
 8016ace:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23552);
 8016ad0:	4b14      	ldr	r3, [pc, #80]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016ad2:	681b      	ldr	r3, [r3, #0]
 8016ad4:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8016ad8:	4a19      	ldr	r2, [pc, #100]	@ (8016b40 <tinyaudiocnn_configure_weights+0x168>)
 8016ada:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23552);
 8016adc:	4b11      	ldr	r3, [pc, #68]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8016ae4:	4a16      	ldr	r2, [pc, #88]	@ (8016b40 <tinyaudiocnn_configure_weights+0x168>)
 8016ae6:	60d3      	str	r3, [r2, #12]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8016ae8:	4b16      	ldr	r3, [pc, #88]	@ (8016b44 <tinyaudiocnn_configure_weights+0x16c>)
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8016af0:	4a14      	ldr	r2, [pc, #80]	@ (8016b44 <tinyaudiocnn_configure_weights+0x16c>)
 8016af2:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 24320);
 8016af4:	4b0b      	ldr	r3, [pc, #44]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	f503 43be 	add.w	r3, r3, #24320	@ 0x5f00
 8016afc:	4a11      	ldr	r2, [pc, #68]	@ (8016b44 <tinyaudiocnn_configure_weights+0x16c>)
 8016afe:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 24320);
 8016b00:	4b08      	ldr	r3, [pc, #32]	@ (8016b24 <tinyaudiocnn_configure_weights+0x14c>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	f503 43be 	add.w	r3, r3, #24320	@ 0x5f00
 8016b08:	4a0e      	ldr	r2, [pc, #56]	@ (8016b44 <tinyaudiocnn_configure_weights+0x16c>)
 8016b0a:	60d3      	str	r3, [r2, #12]
    return true;
 8016b0c:	2301      	movs	r3, #1
 8016b0e:	e005      	b.n	8016b1c <tinyaudiocnn_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8016b10:	2212      	movs	r2, #18
 8016b12:	2130      	movs	r1, #48	@ 0x30
 8016b14:	6878      	ldr	r0, [r7, #4]
 8016b16:	f000 fe77 	bl	8017808 <ai_platform_network_set_error>
  return false;
 8016b1a:	2300      	movs	r3, #0
}
 8016b1c:	4618      	mov	r0, r3
 8016b1e:	3708      	adds	r7, #8
 8016b20:	46bd      	mov	sp, r7
 8016b22:	bd80      	pop	{r7, pc}
 8016b24:	24036e50 	.word	0x24036e50
 8016b28:	2400064c 	.word	0x2400064c
 8016b2c:	2400065c 	.word	0x2400065c
 8016b30:	2400066c 	.word	0x2400066c
 8016b34:	2400067c 	.word	0x2400067c
 8016b38:	2400068c 	.word	0x2400068c
 8016b3c:	2400069c 	.word	0x2400069c
 8016b40:	240006ac 	.word	0x240006ac
 8016b44:	240006bc 	.word	0x240006bc

08016b48 <ai_tinyaudiocnn_get_error>:
}


AI_API_ENTRY
ai_error ai_tinyaudiocnn_get_error(ai_handle network)
{
 8016b48:	b580      	push	{r7, lr}
 8016b4a:	b082      	sub	sp, #8
 8016b4c:	af00      	add	r7, sp, #0
 8016b4e:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8016b50:	6878      	ldr	r0, [r7, #4]
 8016b52:	f000 fe4d 	bl	80177f0 <ai_platform_network_get_error>
 8016b56:	4603      	mov	r3, r0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <ai_tinyaudiocnn_create>:


AI_API_ENTRY
ai_error ai_tinyaudiocnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b084      	sub	sp, #16
 8016b64:	af02      	add	r7, sp, #8
 8016b66:	6078      	str	r0, [r7, #4]
 8016b68:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8016b6a:	2300      	movs	r3, #0
 8016b6c:	9301      	str	r3, [sp, #4]
 8016b6e:	2305      	movs	r3, #5
 8016b70:	9300      	str	r3, [sp, #0]
 8016b72:	2301      	movs	r3, #1
 8016b74:	4a04      	ldr	r2, [pc, #16]	@ (8016b88 <ai_tinyaudiocnn_create+0x28>)
 8016b76:	6839      	ldr	r1, [r7, #0]
 8016b78:	6878      	ldr	r0, [r7, #4]
 8016b7a:	f000 ff3b 	bl	80179f4 <ai_platform_network_create>
 8016b7e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8016b80:	4618      	mov	r0, r3
 8016b82:	3708      	adds	r7, #8
 8016b84:	46bd      	mov	sp, r7
 8016b86:	bd80      	pop	{r7, pc}
 8016b88:	24000fc0 	.word	0x24000fc0

08016b8c <ai_tinyaudiocnn_create_and_init>:


AI_API_ENTRY
ai_error ai_tinyaudiocnn_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8016b8c:	b580      	push	{r7, lr}
 8016b8e:	b094      	sub	sp, #80	@ 0x50
 8016b90:	af00      	add	r7, sp, #0
 8016b92:	60f8      	str	r0, [r7, #12]
 8016b94:	60b9      	str	r1, [r7, #8]
 8016b96:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_tinyaudiocnn_create(network, AI_TINYAUDIOCNN_DATA_CONFIG);
 8016b98:	2100      	movs	r1, #0
 8016b9a:	68f8      	ldr	r0, [r7, #12]
 8016b9c:	f7ff ffe0 	bl	8016b60 <ai_tinyaudiocnn_create>
 8016ba0:	4603      	mov	r3, r0
 8016ba2:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8016ba4:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8016ba8:	2b00      	cmp	r3, #0
 8016baa:	d001      	beq.n	8016bb0 <ai_tinyaudiocnn_create_and_init+0x24>
    return err;
 8016bac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bae:	e067      	b.n	8016c80 <ai_tinyaudiocnn_create_and_init+0xf4>
  }
  
  if (ai_tinyaudiocnn_data_params_get(&params) != true) {
 8016bb0:	f107 0310 	add.w	r3, r7, #16
 8016bb4:	4618      	mov	r0, r3
 8016bb6:	f000 f8e7 	bl	8016d88 <ai_tinyaudiocnn_data_params_get>
 8016bba:	4603      	mov	r3, r0
 8016bbc:	f083 0301 	eor.w	r3, r3, #1
 8016bc0:	b2db      	uxtb	r3, r3
 8016bc2:	2b00      	cmp	r3, #0
 8016bc4:	d008      	beq.n	8016bd8 <ai_tinyaudiocnn_create_and_init+0x4c>
    err = ai_tinyaudiocnn_get_error(*network);
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	4618      	mov	r0, r3
 8016bcc:	f7ff ffbc 	bl	8016b48 <ai_tinyaudiocnn_get_error>
 8016bd0:	4603      	mov	r3, r0
 8016bd2:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8016bd4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016bd6:	e053      	b.n	8016c80 <ai_tinyaudiocnn_create_and_init+0xf4>
  }
#if defined(AI_TINYAUDIOCNN_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8016bd8:	2300      	movs	r3, #0
 8016bda:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016bde:	e012      	b.n	8016c06 <ai_tinyaudiocnn_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8016be0:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8016be4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016be8:	009b      	lsls	r3, r3, #2
 8016bea:	68ba      	ldr	r2, [r7, #8]
 8016bec:	4413      	add	r3, r2
 8016bee:	681a      	ldr	r2, [r3, #0]
 8016bf0:	f107 0310 	add.w	r3, r7, #16
 8016bf4:	330c      	adds	r3, #12
 8016bf6:	4618      	mov	r0, r3
 8016bf8:	f000 fd20 	bl	801763c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8016bfc:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8016c00:	3301      	adds	r3, #1
 8016c02:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8016c06:	68bb      	ldr	r3, [r7, #8]
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d004      	beq.n	8016c16 <ai_tinyaudiocnn_create_and_init+0x8a>
 8016c0c:	8bfb      	ldrh	r3, [r7, #30]
 8016c0e:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d3e4      	bcc.n	8016be0 <ai_tinyaudiocnn_create_and_init+0x54>
  }
#endif
#if defined(AI_TINYAUDIOCNN_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8016c16:	2300      	movs	r3, #0
 8016c18:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8016c1c:	e012      	b.n	8016c44 <ai_tinyaudiocnn_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8016c1e:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8016c22:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8016c26:	009b      	lsls	r3, r3, #2
 8016c28:	687a      	ldr	r2, [r7, #4]
 8016c2a:	4413      	add	r3, r2
 8016c2c:	681a      	ldr	r2, [r3, #0]
 8016c2e:	f107 0310 	add.w	r3, r7, #16
 8016c32:	3304      	adds	r3, #4
 8016c34:	4618      	mov	r0, r3
 8016c36:	f000 fd01 	bl	801763c <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8016c3a:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8016c3e:	3301      	adds	r3, #1
 8016c40:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8016c44:	687b      	ldr	r3, [r7, #4]
 8016c46:	2b00      	cmp	r3, #0
 8016c48:	d004      	beq.n	8016c54 <ai_tinyaudiocnn_create_and_init+0xc8>
 8016c4a:	8afb      	ldrh	r3, [r7, #22]
 8016c4c:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8016c50:	429a      	cmp	r2, r3
 8016c52:	d3e4      	bcc.n	8016c1e <ai_tinyaudiocnn_create_and_init+0x92>
  }
#endif
  if (ai_tinyaudiocnn_init(*network, &params) != true) {
 8016c54:	68fb      	ldr	r3, [r7, #12]
 8016c56:	681b      	ldr	r3, [r3, #0]
 8016c58:	f107 0210 	add.w	r2, r7, #16
 8016c5c:	4611      	mov	r1, r2
 8016c5e:	4618      	mov	r0, r3
 8016c60:	f000 f846 	bl	8016cf0 <ai_tinyaudiocnn_init>
 8016c64:	4603      	mov	r3, r0
 8016c66:	f083 0301 	eor.w	r3, r3, #1
 8016c6a:	b2db      	uxtb	r3, r3
 8016c6c:	2b00      	cmp	r3, #0
 8016c6e:	d006      	beq.n	8016c7e <ai_tinyaudiocnn_create_and_init+0xf2>
    err = ai_tinyaudiocnn_get_error(*network);
 8016c70:	68fb      	ldr	r3, [r7, #12]
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	4618      	mov	r0, r3
 8016c76:	f7ff ff67 	bl	8016b48 <ai_tinyaudiocnn_get_error>
 8016c7a:	4603      	mov	r3, r0
 8016c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8016c7e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8016c80:	4618      	mov	r0, r3
 8016c82:	3750      	adds	r7, #80	@ 0x50
 8016c84:	46bd      	mov	sp, r7
 8016c86:	bd80      	pop	{r7, pc}

08016c88 <ai_tinyaudiocnn_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_tinyaudiocnn_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8016c88:	b580      	push	{r7, lr}
 8016c8a:	b082      	sub	sp, #8
 8016c8c:	af00      	add	r7, sp, #0
 8016c8e:	6078      	str	r0, [r7, #4]
 8016c90:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	2b00      	cmp	r3, #0
 8016c96:	d104      	bne.n	8016ca2 <ai_tinyaudiocnn_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8016c98:	4b06      	ldr	r3, [pc, #24]	@ (8016cb4 <ai_tinyaudiocnn_inputs_get+0x2c>)
 8016c9a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8016c9c:	687b      	ldr	r3, [r7, #4]
 8016c9e:	4a06      	ldr	r2, [pc, #24]	@ (8016cb8 <ai_tinyaudiocnn_inputs_get+0x30>)
 8016ca0:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8016ca2:	6839      	ldr	r1, [r7, #0]
 8016ca4:	6878      	ldr	r0, [r7, #4]
 8016ca6:	f000 fdb5 	bl	8017814 <ai_platform_inputs_get>
 8016caa:	4603      	mov	r3, r0
}
 8016cac:	4618      	mov	r0, r3
 8016cae:	3708      	adds	r7, #8
 8016cb0:	46bd      	mov	sp, r7
 8016cb2:	bd80      	pop	{r7, pc}
 8016cb4:	24000fc0 	.word	0x24000fc0
 8016cb8:	a1c00100 	.word	0xa1c00100

08016cbc <ai_tinyaudiocnn_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_tinyaudiocnn_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8016cbc:	b580      	push	{r7, lr}
 8016cbe:	b082      	sub	sp, #8
 8016cc0:	af00      	add	r7, sp, #0
 8016cc2:	6078      	str	r0, [r7, #4]
 8016cc4:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8016cc6:	687b      	ldr	r3, [r7, #4]
 8016cc8:	2b00      	cmp	r3, #0
 8016cca:	d104      	bne.n	8016cd6 <ai_tinyaudiocnn_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8016ccc:	4b06      	ldr	r3, [pc, #24]	@ (8016ce8 <ai_tinyaudiocnn_outputs_get+0x2c>)
 8016cce:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	4a06      	ldr	r2, [pc, #24]	@ (8016cec <ai_tinyaudiocnn_outputs_get+0x30>)
 8016cd4:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8016cd6:	6839      	ldr	r1, [r7, #0]
 8016cd8:	6878      	ldr	r0, [r7, #4]
 8016cda:	f000 fe15 	bl	8017908 <ai_platform_outputs_get>
 8016cde:	4603      	mov	r3, r0
}
 8016ce0:	4618      	mov	r0, r3
 8016ce2:	3708      	adds	r7, #8
 8016ce4:	46bd      	mov	sp, r7
 8016ce6:	bd80      	pop	{r7, pc}
 8016ce8:	24000fc0 	.word	0x24000fc0
 8016cec:	a1c00100 	.word	0xa1c00100

08016cf0 <ai_tinyaudiocnn_init>:


AI_API_ENTRY
ai_bool ai_tinyaudiocnn_init(
  ai_handle network, const ai_network_params* params)
{
 8016cf0:	b580      	push	{r7, lr}
 8016cf2:	b084      	sub	sp, #16
 8016cf4:	af00      	add	r7, sp, #0
 8016cf6:	6078      	str	r0, [r7, #4]
 8016cf8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8016cfa:	6839      	ldr	r1, [r7, #0]
 8016cfc:	6878      	ldr	r0, [r7, #4]
 8016cfe:	f000 febb 	bl	8017a78 <ai_platform_network_init>
 8016d02:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8016d04:	2301      	movs	r3, #1
 8016d06:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8016d08:	68fb      	ldr	r3, [r7, #12]
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d101      	bne.n	8016d12 <ai_tinyaudiocnn_init+0x22>
 8016d0e:	2300      	movs	r3, #0
 8016d10:	e026      	b.n	8016d60 <ai_tinyaudiocnn_init+0x70>
  ok &= tinyaudiocnn_configure_weights(net_ctx, params);
 8016d12:	6839      	ldr	r1, [r7, #0]
 8016d14:	68f8      	ldr	r0, [r7, #12]
 8016d16:	f7ff fe5f 	bl	80169d8 <tinyaudiocnn_configure_weights>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	461a      	mov	r2, r3
 8016d1e:	7afb      	ldrb	r3, [r7, #11]
 8016d20:	4013      	ands	r3, r2
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	bf14      	ite	ne
 8016d26:	2301      	movne	r3, #1
 8016d28:	2300      	moveq	r3, #0
 8016d2a:	72fb      	strb	r3, [r7, #11]
  ok &= tinyaudiocnn_configure_activations(net_ctx, params);
 8016d2c:	6839      	ldr	r1, [r7, #0]
 8016d2e:	68f8      	ldr	r0, [r7, #12]
 8016d30:	f7ff fd8a 	bl	8016848 <tinyaudiocnn_configure_activations>
 8016d34:	4603      	mov	r3, r0
 8016d36:	461a      	mov	r2, r3
 8016d38:	7afb      	ldrb	r3, [r7, #11]
 8016d3a:	4013      	ands	r3, r2
 8016d3c:	2b00      	cmp	r3, #0
 8016d3e:	bf14      	ite	ne
 8016d40:	2301      	movne	r3, #1
 8016d42:	2300      	moveq	r3, #0
 8016d44:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8016d46:	6878      	ldr	r0, [r7, #4]
 8016d48:	f000 ff38 	bl	8017bbc <ai_platform_network_post_init>
 8016d4c:	4603      	mov	r3, r0
 8016d4e:	461a      	mov	r2, r3
 8016d50:	7afb      	ldrb	r3, [r7, #11]
 8016d52:	4013      	ands	r3, r2
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	bf14      	ite	ne
 8016d58:	2301      	movne	r3, #1
 8016d5a:	2300      	moveq	r3, #0
 8016d5c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8016d5e:	7afb      	ldrb	r3, [r7, #11]
}
 8016d60:	4618      	mov	r0, r3
 8016d62:	3710      	adds	r7, #16
 8016d64:	46bd      	mov	sp, r7
 8016d66:	bd80      	pop	{r7, pc}

08016d68 <ai_tinyaudiocnn_run>:


AI_API_ENTRY
ai_i32 ai_tinyaudiocnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8016d68:	b580      	push	{r7, lr}
 8016d6a:	b084      	sub	sp, #16
 8016d6c:	af00      	add	r7, sp, #0
 8016d6e:	60f8      	str	r0, [r7, #12]
 8016d70:	60b9      	str	r1, [r7, #8]
 8016d72:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8016d74:	687a      	ldr	r2, [r7, #4]
 8016d76:	68b9      	ldr	r1, [r7, #8]
 8016d78:	68f8      	ldr	r0, [r7, #12]
 8016d7a:	f000 ff4b 	bl	8017c14 <ai_platform_network_process>
 8016d7e:	4603      	mov	r3, r0
}
 8016d80:	4618      	mov	r0, r3
 8016d82:	3710      	adds	r7, #16
 8016d84:	46bd      	mov	sp, r7
 8016d86:	bd80      	pop	{r7, pc}

08016d88 <ai_tinyaudiocnn_data_params_get>:
 * @ingroup tinyaudiocnn_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_tinyaudiocnn_data_params_get(ai_network_params* params)
{
 8016d88:	b580      	push	{r7, lr}
 8016d8a:	b086      	sub	sp, #24
 8016d8c:	af00      	add	r7, sp, #0
 8016d8e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8016d90:	687b      	ldr	r3, [r7, #4]
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d101      	bne.n	8016d9a <ai_tinyaudiocnn_data_params_get+0x12>
 8016d96:	2300      	movs	r3, #0
 8016d98:	e016      	b.n	8016dc8 <ai_tinyaudiocnn_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8016d9a:	4a0d      	ldr	r2, [pc, #52]	@ (8016dd0 <ai_tinyaudiocnn_data_params_get+0x48>)
 8016d9c:	f107 0310 	add.w	r3, r7, #16
 8016da0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016da4:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TINYAUDIOCNN_DATA_ACTIVATIONS_COUNT, g_tinyaudiocnn_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8016da8:	4a0a      	ldr	r2, [pc, #40]	@ (8016dd4 <ai_tinyaudiocnn_data_params_get+0x4c>)
 8016daa:	f107 0308 	add.w	r3, r7, #8
 8016dae:	e892 0003 	ldmia.w	r2, {r0, r1}
 8016db2:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TINYAUDIOCNN_DATA_WEIGHTS_COUNT, g_tinyaudiocnn_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8016db6:	f107 0210 	add.w	r2, r7, #16
 8016dba:	f107 0308 	add.w	r3, r7, #8
 8016dbe:	4619      	mov	r1, r3
 8016dc0:	6878      	ldr	r0, [r7, #4]
 8016dc2:	f000 fcfb 	bl	80177bc <ai_platform_bind_network_params>
 8016dc6:	4603      	mov	r3, r0
}
 8016dc8:	4618      	mov	r0, r3
 8016dca:	3718      	adds	r7, #24
 8016dcc:	46bd      	mov	sp, r7
 8016dce:	bd80      	pop	{r7, pc}
 8016dd0:	0801e520 	.word	0x0801e520
 8016dd4:	0801e528 	.word	0x0801e528

08016dd8 <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 8016dd8:	b580      	push	{r7, lr}
 8016dda:	b082      	sub	sp, #8
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 8016de0:	687b      	ldr	r3, [r7, #4]
 8016de2:	681b      	ldr	r3, [r3, #0]
 8016de4:	4a22      	ldr	r2, [pc, #136]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016de6:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 8016de8:	687b      	ldr	r3, [r7, #4]
 8016dea:	685b      	ldr	r3, [r3, #4]
 8016dec:	4a20      	ldr	r2, [pc, #128]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016dee:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 8016df0:	687b      	ldr	r3, [r7, #4]
 8016df2:	689b      	ldr	r3, [r3, #8]
 8016df4:	4a1e      	ldr	r2, [pc, #120]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016df6:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 8016df8:	687b      	ldr	r3, [r7, #4]
 8016dfa:	68db      	ldr	r3, [r3, #12]
 8016dfc:	4a1c      	ldr	r2, [pc, #112]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016dfe:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	691b      	ldr	r3, [r3, #16]
 8016e04:	4a1a      	ldr	r2, [pc, #104]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e06:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	695b      	ldr	r3, [r3, #20]
 8016e0c:	4a18      	ldr	r2, [pc, #96]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e0e:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 8016e10:	687b      	ldr	r3, [r7, #4]
 8016e12:	699b      	ldr	r3, [r3, #24]
 8016e14:	4a16      	ldr	r2, [pc, #88]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e16:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 8016e18:	687b      	ldr	r3, [r7, #4]
 8016e1a:	69db      	ldr	r3, [r3, #28]
 8016e1c:	4a14      	ldr	r2, [pc, #80]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e1e:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 8016e20:	687b      	ldr	r3, [r7, #4]
 8016e22:	6a1b      	ldr	r3, [r3, #32]
 8016e24:	4a12      	ldr	r2, [pc, #72]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e26:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 8016e28:	687b      	ldr	r3, [r7, #4]
 8016e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016e2c:	4a10      	ldr	r2, [pc, #64]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e2e:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e34:	4a0e      	ldr	r2, [pc, #56]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e36:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 8016e38:	4b0e      	ldr	r3, [pc, #56]	@ (8016e74 <UTIL_LCD_SetFuncDriver+0x9c>)
 8016e3a:	2200      	movs	r2, #0
 8016e3c:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8016e3e:	4b0d      	ldr	r3, [pc, #52]	@ (8016e74 <UTIL_LCD_SetFuncDriver+0x9c>)
 8016e40:	2200      	movs	r2, #0
 8016e42:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8016e44:	4b0a      	ldr	r3, [pc, #40]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e46:	69db      	ldr	r3, [r3, #28]
 8016e48:	4a0b      	ldr	r2, [pc, #44]	@ (8016e78 <UTIL_LCD_SetFuncDriver+0xa0>)
 8016e4a:	4611      	mov	r1, r2
 8016e4c:	2000      	movs	r0, #0
 8016e4e:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8016e50:	4b07      	ldr	r3, [pc, #28]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e52:	6a1b      	ldr	r3, [r3, #32]
 8016e54:	4a09      	ldr	r2, [pc, #36]	@ (8016e7c <UTIL_LCD_SetFuncDriver+0xa4>)
 8016e56:	4611      	mov	r1, r2
 8016e58:	2000      	movs	r0, #0
 8016e5a:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8016e5c:	4b04      	ldr	r3, [pc, #16]	@ (8016e70 <UTIL_LCD_SetFuncDriver+0x98>)
 8016e5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016e60:	4a07      	ldr	r2, [pc, #28]	@ (8016e80 <UTIL_LCD_SetFuncDriver+0xa8>)
 8016e62:	4611      	mov	r1, r2
 8016e64:	2000      	movs	r0, #0
 8016e66:	4798      	blx	r3
}
 8016e68:	bf00      	nop
 8016e6a:	3708      	adds	r7, #8
 8016e6c:	46bd      	mov	sp, r7
 8016e6e:	bd80      	pop	{r7, pc}
 8016e70:	24036f30 	.word	0x24036f30
 8016e74:	24036ef0 	.word	0x24036ef0
 8016e78:	24036f04 	.word	0x24036f04
 8016e7c:	24036f08 	.word	0x24036f08
 8016e80:	24036f0c 	.word	0x24036f0c

08016e84 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8016e84:	b480      	push	{r7}
 8016e86:	b083      	sub	sp, #12
 8016e88:	af00      	add	r7, sp, #0
 8016e8a:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8016e8c:	4b06      	ldr	r3, [pc, #24]	@ (8016ea8 <UTIL_LCD_SetTextColor+0x24>)
 8016e8e:	68db      	ldr	r3, [r3, #12]
 8016e90:	4a05      	ldr	r2, [pc, #20]	@ (8016ea8 <UTIL_LCD_SetTextColor+0x24>)
 8016e92:	015b      	lsls	r3, r3, #5
 8016e94:	4413      	add	r3, r2
 8016e96:	687a      	ldr	r2, [r7, #4]
 8016e98:	601a      	str	r2, [r3, #0]
}
 8016e9a:	bf00      	nop
 8016e9c:	370c      	adds	r7, #12
 8016e9e:	46bd      	mov	sp, r7
 8016ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ea4:	4770      	bx	lr
 8016ea6:	bf00      	nop
 8016ea8:	24036ef0 	.word	0x24036ef0

08016eac <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8016eac:	b480      	push	{r7}
 8016eae:	b083      	sub	sp, #12
 8016eb0:	af00      	add	r7, sp, #0
 8016eb2:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8016eb4:	4b06      	ldr	r3, [pc, #24]	@ (8016ed0 <UTIL_LCD_SetBackColor+0x24>)
 8016eb6:	68db      	ldr	r3, [r3, #12]
 8016eb8:	4a05      	ldr	r2, [pc, #20]	@ (8016ed0 <UTIL_LCD_SetBackColor+0x24>)
 8016eba:	015b      	lsls	r3, r3, #5
 8016ebc:	4413      	add	r3, r2
 8016ebe:	3304      	adds	r3, #4
 8016ec0:	687a      	ldr	r2, [r7, #4]
 8016ec2:	601a      	str	r2, [r3, #0]
}
 8016ec4:	bf00      	nop
 8016ec6:	370c      	adds	r7, #12
 8016ec8:	46bd      	mov	sp, r7
 8016eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ece:	4770      	bx	lr
 8016ed0:	24036ef0 	.word	0x24036ef0

08016ed4 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 8016ed4:	b480      	push	{r7}
 8016ed6:	b083      	sub	sp, #12
 8016ed8:	af00      	add	r7, sp, #0
 8016eda:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 8016edc:	4b06      	ldr	r3, [pc, #24]	@ (8016ef8 <UTIL_LCD_SetFont+0x24>)
 8016ede:	68db      	ldr	r3, [r3, #12]
 8016ee0:	4a05      	ldr	r2, [pc, #20]	@ (8016ef8 <UTIL_LCD_SetFont+0x24>)
 8016ee2:	015b      	lsls	r3, r3, #5
 8016ee4:	4413      	add	r3, r2
 8016ee6:	3308      	adds	r3, #8
 8016ee8:	687a      	ldr	r2, [r7, #4]
 8016eea:	601a      	str	r2, [r3, #0]
}
 8016eec:	bf00      	nop
 8016eee:	370c      	adds	r7, #12
 8016ef0:	46bd      	mov	sp, r7
 8016ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016ef6:	4770      	bx	lr
 8016ef8:	24036ef0 	.word	0x24036ef0

08016efc <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 8016efc:	b480      	push	{r7}
 8016efe:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 8016f00:	4b05      	ldr	r3, [pc, #20]	@ (8016f18 <UTIL_LCD_GetFont+0x1c>)
 8016f02:	68db      	ldr	r3, [r3, #12]
 8016f04:	4a04      	ldr	r2, [pc, #16]	@ (8016f18 <UTIL_LCD_GetFont+0x1c>)
 8016f06:	015b      	lsls	r3, r3, #5
 8016f08:	4413      	add	r3, r2
 8016f0a:	3308      	adds	r3, #8
 8016f0c:	681b      	ldr	r3, [r3, #0]
}
 8016f0e:	4618      	mov	r0, r3
 8016f10:	46bd      	mov	sp, r7
 8016f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016f16:	4770      	bx	lr
 8016f18:	24036ef0 	.word	0x24036ef0

08016f1c <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8016f1c:	b590      	push	{r4, r7, lr}
 8016f1e:	b087      	sub	sp, #28
 8016f20:	af02      	add	r7, sp, #8
 8016f22:	60f8      	str	r0, [r7, #12]
 8016f24:	60b9      	str	r1, [r7, #8]
 8016f26:	607a      	str	r2, [r7, #4]
 8016f28:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 8016f2a:	4b08      	ldr	r3, [pc, #32]	@ (8016f4c <UTIL_LCD_FillRGBRect+0x30>)
 8016f2c:	685c      	ldr	r4, [r3, #4]
 8016f2e:	4b08      	ldr	r3, [pc, #32]	@ (8016f50 <UTIL_LCD_FillRGBRect+0x34>)
 8016f30:	6918      	ldr	r0, [r3, #16]
 8016f32:	6a3b      	ldr	r3, [r7, #32]
 8016f34:	9301      	str	r3, [sp, #4]
 8016f36:	683b      	ldr	r3, [r7, #0]
 8016f38:	9300      	str	r3, [sp, #0]
 8016f3a:	687b      	ldr	r3, [r7, #4]
 8016f3c:	68ba      	ldr	r2, [r7, #8]
 8016f3e:	68f9      	ldr	r1, [r7, #12]
 8016f40:	47a0      	blx	r4
}
 8016f42:	bf00      	nop
 8016f44:	3714      	adds	r7, #20
 8016f46:	46bd      	mov	sp, r7
 8016f48:	bd90      	pop	{r4, r7, pc}
 8016f4a:	bf00      	nop
 8016f4c:	24036f30 	.word	0x24036f30
 8016f50:	24036ef0 	.word	0x24036ef0

08016f54 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8016f54:	b590      	push	{r4, r7, lr}
 8016f56:	b087      	sub	sp, #28
 8016f58:	af02      	add	r7, sp, #8
 8016f5a:	60f8      	str	r0, [r7, #12]
 8016f5c:	60b9      	str	r1, [r7, #8]
 8016f5e:	607a      	str	r2, [r7, #4]
 8016f60:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8016f62:	4b15      	ldr	r3, [pc, #84]	@ (8016fb8 <UTIL_LCD_DrawHLine+0x64>)
 8016f64:	69db      	ldr	r3, [r3, #28]
 8016f66:	2b02      	cmp	r3, #2
 8016f68:	d118      	bne.n	8016f9c <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8016f6a:	4b14      	ldr	r3, [pc, #80]	@ (8016fbc <UTIL_LCD_DrawHLine+0x68>)
 8016f6c:	689c      	ldr	r4, [r3, #8]
 8016f6e:	4b12      	ldr	r3, [pc, #72]	@ (8016fb8 <UTIL_LCD_DrawHLine+0x64>)
 8016f70:	6918      	ldr	r0, [r3, #16]
 8016f72:	683b      	ldr	r3, [r7, #0]
 8016f74:	08db      	lsrs	r3, r3, #3
 8016f76:	f003 021f 	and.w	r2, r3, #31
 8016f7a:	683b      	ldr	r3, [r7, #0]
 8016f7c:	0a9b      	lsrs	r3, r3, #10
 8016f7e:	015b      	lsls	r3, r3, #5
 8016f80:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016f84:	431a      	orrs	r2, r3
 8016f86:	683b      	ldr	r3, [r7, #0]
 8016f88:	0cdb      	lsrs	r3, r3, #19
 8016f8a:	02db      	lsls	r3, r3, #11
 8016f8c:	b29b      	uxth	r3, r3
 8016f8e:	4313      	orrs	r3, r2
 8016f90:	9300      	str	r3, [sp, #0]
 8016f92:	687b      	ldr	r3, [r7, #4]
 8016f94:	68ba      	ldr	r2, [r7, #8]
 8016f96:	68f9      	ldr	r1, [r7, #12]
 8016f98:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8016f9a:	e009      	b.n	8016fb0 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8016f9c:	4b07      	ldr	r3, [pc, #28]	@ (8016fbc <UTIL_LCD_DrawHLine+0x68>)
 8016f9e:	689c      	ldr	r4, [r3, #8]
 8016fa0:	4b05      	ldr	r3, [pc, #20]	@ (8016fb8 <UTIL_LCD_DrawHLine+0x64>)
 8016fa2:	6918      	ldr	r0, [r3, #16]
 8016fa4:	683b      	ldr	r3, [r7, #0]
 8016fa6:	9300      	str	r3, [sp, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	68ba      	ldr	r2, [r7, #8]
 8016fac:	68f9      	ldr	r1, [r7, #12]
 8016fae:	47a0      	blx	r4
}
 8016fb0:	bf00      	nop
 8016fb2:	3714      	adds	r7, #20
 8016fb4:	46bd      	mov	sp, r7
 8016fb6:	bd90      	pop	{r4, r7, pc}
 8016fb8:	24036ef0 	.word	0x24036ef0
 8016fbc:	24036f30 	.word	0x24036f30

08016fc0 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8016fc0:	b590      	push	{r4, r7, lr}
 8016fc2:	b087      	sub	sp, #28
 8016fc4:	af02      	add	r7, sp, #8
 8016fc6:	60f8      	str	r0, [r7, #12]
 8016fc8:	60b9      	str	r1, [r7, #8]
 8016fca:	607a      	str	r2, [r7, #4]
 8016fcc:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8016fce:	4b15      	ldr	r3, [pc, #84]	@ (8017024 <UTIL_LCD_DrawVLine+0x64>)
 8016fd0:	69db      	ldr	r3, [r3, #28]
 8016fd2:	2b02      	cmp	r3, #2
 8016fd4:	d118      	bne.n	8017008 <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 8016fd6:	4b14      	ldr	r3, [pc, #80]	@ (8017028 <UTIL_LCD_DrawVLine+0x68>)
 8016fd8:	68dc      	ldr	r4, [r3, #12]
 8016fda:	4b12      	ldr	r3, [pc, #72]	@ (8017024 <UTIL_LCD_DrawVLine+0x64>)
 8016fdc:	6918      	ldr	r0, [r3, #16]
 8016fde:	683b      	ldr	r3, [r7, #0]
 8016fe0:	08db      	lsrs	r3, r3, #3
 8016fe2:	f003 021f 	and.w	r2, r3, #31
 8016fe6:	683b      	ldr	r3, [r7, #0]
 8016fe8:	0a9b      	lsrs	r3, r3, #10
 8016fea:	015b      	lsls	r3, r3, #5
 8016fec:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8016ff0:	431a      	orrs	r2, r3
 8016ff2:	683b      	ldr	r3, [r7, #0]
 8016ff4:	0cdb      	lsrs	r3, r3, #19
 8016ff6:	02db      	lsls	r3, r3, #11
 8016ff8:	b29b      	uxth	r3, r3
 8016ffa:	4313      	orrs	r3, r2
 8016ffc:	9300      	str	r3, [sp, #0]
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	68ba      	ldr	r2, [r7, #8]
 8017002:	68f9      	ldr	r1, [r7, #12]
 8017004:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 8017006:	e009      	b.n	801701c <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8017008:	4b07      	ldr	r3, [pc, #28]	@ (8017028 <UTIL_LCD_DrawVLine+0x68>)
 801700a:	68dc      	ldr	r4, [r3, #12]
 801700c:	4b05      	ldr	r3, [pc, #20]	@ (8017024 <UTIL_LCD_DrawVLine+0x64>)
 801700e:	6918      	ldr	r0, [r3, #16]
 8017010:	683b      	ldr	r3, [r7, #0]
 8017012:	9300      	str	r3, [sp, #0]
 8017014:	687b      	ldr	r3, [r7, #4]
 8017016:	68ba      	ldr	r2, [r7, #8]
 8017018:	68f9      	ldr	r1, [r7, #12]
 801701a:	47a0      	blx	r4
}
 801701c:	bf00      	nop
 801701e:	3714      	adds	r7, #20
 8017020:	46bd      	mov	sp, r7
 8017022:	bd90      	pop	{r4, r7, pc}
 8017024:	24036ef0 	.word	0x24036ef0
 8017028:	24036f30 	.word	0x24036f30

0801702c <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 801702c:	b580      	push	{r7, lr}
 801702e:	b084      	sub	sp, #16
 8017030:	af02      	add	r7, sp, #8
 8017032:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8017034:	4b07      	ldr	r3, [pc, #28]	@ (8017054 <UTIL_LCD_Clear+0x28>)
 8017036:	695a      	ldr	r2, [r3, #20]
 8017038:	4b06      	ldr	r3, [pc, #24]	@ (8017054 <UTIL_LCD_Clear+0x28>)
 801703a:	6999      	ldr	r1, [r3, #24]
 801703c:	687b      	ldr	r3, [r7, #4]
 801703e:	9300      	str	r3, [sp, #0]
 8017040:	460b      	mov	r3, r1
 8017042:	2100      	movs	r1, #0
 8017044:	2000      	movs	r0, #0
 8017046:	f000 f92b 	bl	80172a0 <UTIL_LCD_FillRect>
}
 801704a:	bf00      	nop
 801704c:	3708      	adds	r7, #8
 801704e:	46bd      	mov	sp, r7
 8017050:	bd80      	pop	{r7, pc}
 8017052:	bf00      	nop
 8017054:	24036ef0 	.word	0x24036ef0

08017058 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8017058:	b580      	push	{r7, lr}
 801705a:	b084      	sub	sp, #16
 801705c:	af00      	add	r7, sp, #0
 801705e:	60f8      	str	r0, [r7, #12]
 8017060:	60b9      	str	r1, [r7, #8]
 8017062:	4613      	mov	r3, r2
 8017064:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 8017066:	4b16      	ldr	r3, [pc, #88]	@ (80170c0 <UTIL_LCD_DisplayChar+0x68>)
 8017068:	68db      	ldr	r3, [r3, #12]
 801706a:	4a15      	ldr	r2, [pc, #84]	@ (80170c0 <UTIL_LCD_DisplayChar+0x68>)
 801706c:	015b      	lsls	r3, r3, #5
 801706e:	4413      	add	r3, r2
 8017070:	3308      	adds	r3, #8
 8017072:	681b      	ldr	r3, [r3, #0]
 8017074:	681a      	ldr	r2, [r3, #0]
 8017076:	79fb      	ldrb	r3, [r7, #7]
 8017078:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801707a:	4911      	ldr	r1, [pc, #68]	@ (80170c0 <UTIL_LCD_DisplayChar+0x68>)
 801707c:	68c9      	ldr	r1, [r1, #12]
 801707e:	4810      	ldr	r0, [pc, #64]	@ (80170c0 <UTIL_LCD_DisplayChar+0x68>)
 8017080:	0149      	lsls	r1, r1, #5
 8017082:	4401      	add	r1, r0
 8017084:	3108      	adds	r1, #8
 8017086:	6809      	ldr	r1, [r1, #0]
 8017088:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 801708a:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 801708e:	4b0c      	ldr	r3, [pc, #48]	@ (80170c0 <UTIL_LCD_DisplayChar+0x68>)
 8017090:	68db      	ldr	r3, [r3, #12]
 8017092:	480b      	ldr	r0, [pc, #44]	@ (80170c0 <UTIL_LCD_DisplayChar+0x68>)
 8017094:	015b      	lsls	r3, r3, #5
 8017096:	4403      	add	r3, r0
 8017098:	3308      	adds	r3, #8
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	889b      	ldrh	r3, [r3, #4]
 801709e:	3307      	adds	r3, #7
 80170a0:	2b00      	cmp	r3, #0
 80170a2:	da00      	bge.n	80170a6 <UTIL_LCD_DisplayChar+0x4e>
 80170a4:	3307      	adds	r3, #7
 80170a6:	10db      	asrs	r3, r3, #3
 80170a8:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80170ac:	4413      	add	r3, r2
 80170ae:	461a      	mov	r2, r3
 80170b0:	68b9      	ldr	r1, [r7, #8]
 80170b2:	68f8      	ldr	r0, [r7, #12]
 80170b4:	f000 f92e 	bl	8017314 <DrawChar>
}
 80170b8:	bf00      	nop
 80170ba:	3710      	adds	r7, #16
 80170bc:	46bd      	mov	sp, r7
 80170be:	bd80      	pop	{r7, pc}
 80170c0:	24036ef0 	.word	0x24036ef0

080170c4 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 80170c4:	b580      	push	{r7, lr}
 80170c6:	b08a      	sub	sp, #40	@ 0x28
 80170c8:	af00      	add	r7, sp, #0
 80170ca:	60f8      	str	r0, [r7, #12]
 80170cc:	60b9      	str	r1, [r7, #8]
 80170ce:	607a      	str	r2, [r7, #4]
 80170d0:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 80170d2:	2301      	movs	r3, #1
 80170d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80170d6:	2300      	movs	r3, #0
 80170d8:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 80170da:	2300      	movs	r3, #0
 80170dc:	61fb      	str	r3, [r7, #28]
 80170de:	2300      	movs	r3, #0
 80170e0:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 80170e6:	e002      	b.n	80170ee <UTIL_LCD_DisplayStringAt+0x2a>
 80170e8:	69fb      	ldr	r3, [r7, #28]
 80170ea:	3301      	adds	r3, #1
 80170ec:	61fb      	str	r3, [r7, #28]
 80170ee:	69bb      	ldr	r3, [r7, #24]
 80170f0:	1c5a      	adds	r2, r3, #1
 80170f2:	61ba      	str	r2, [r7, #24]
 80170f4:	781b      	ldrb	r3, [r3, #0]
 80170f6:	2b00      	cmp	r3, #0
 80170f8:	d1f6      	bne.n	80170e8 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 80170fa:	4b48      	ldr	r3, [pc, #288]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80170fc:	695b      	ldr	r3, [r3, #20]
 80170fe:	4a47      	ldr	r2, [pc, #284]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 8017100:	68d2      	ldr	r2, [r2, #12]
 8017102:	4946      	ldr	r1, [pc, #280]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 8017104:	0152      	lsls	r2, r2, #5
 8017106:	440a      	add	r2, r1
 8017108:	3208      	adds	r2, #8
 801710a:	6812      	ldr	r2, [r2, #0]
 801710c:	8892      	ldrh	r2, [r2, #4]
 801710e:	fbb3 f3f2 	udiv	r3, r3, r2
 8017112:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8017114:	78fb      	ldrb	r3, [r7, #3]
 8017116:	2b03      	cmp	r3, #3
 8017118:	d018      	beq.n	801714c <UTIL_LCD_DisplayStringAt+0x88>
 801711a:	2b03      	cmp	r3, #3
 801711c:	dc2a      	bgt.n	8017174 <UTIL_LCD_DisplayStringAt+0xb0>
 801711e:	2b01      	cmp	r3, #1
 8017120:	d002      	beq.n	8017128 <UTIL_LCD_DisplayStringAt+0x64>
 8017122:	2b02      	cmp	r3, #2
 8017124:	d015      	beq.n	8017152 <UTIL_LCD_DisplayStringAt+0x8e>
 8017126:	e025      	b.n	8017174 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8017128:	697a      	ldr	r2, [r7, #20]
 801712a:	69fb      	ldr	r3, [r7, #28]
 801712c:	1ad3      	subs	r3, r2, r3
 801712e:	4a3b      	ldr	r2, [pc, #236]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 8017130:	68d2      	ldr	r2, [r2, #12]
 8017132:	493a      	ldr	r1, [pc, #232]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 8017134:	0152      	lsls	r2, r2, #5
 8017136:	440a      	add	r2, r1
 8017138:	3208      	adds	r2, #8
 801713a:	6812      	ldr	r2, [r2, #0]
 801713c:	8892      	ldrh	r2, [r2, #4]
 801713e:	fb02 f303 	mul.w	r3, r2, r3
 8017142:	085b      	lsrs	r3, r3, #1
 8017144:	68fa      	ldr	r2, [r7, #12]
 8017146:	4413      	add	r3, r2
 8017148:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801714a:	e016      	b.n	801717a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 801714c:	68fb      	ldr	r3, [r7, #12]
 801714e:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017150:	e013      	b.n	801717a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 8017152:	697a      	ldr	r2, [r7, #20]
 8017154:	69fb      	ldr	r3, [r7, #28]
 8017156:	1ad3      	subs	r3, r2, r3
 8017158:	4a30      	ldr	r2, [pc, #192]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 801715a:	68d2      	ldr	r2, [r2, #12]
 801715c:	492f      	ldr	r1, [pc, #188]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 801715e:	0152      	lsls	r2, r2, #5
 8017160:	440a      	add	r2, r1
 8017162:	3208      	adds	r2, #8
 8017164:	6812      	ldr	r2, [r2, #0]
 8017166:	8892      	ldrh	r2, [r2, #4]
 8017168:	fb03 f202 	mul.w	r2, r3, r2
 801716c:	68fb      	ldr	r3, [r7, #12]
 801716e:	1ad3      	subs	r3, r2, r3
 8017170:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017172:	e002      	b.n	801717a <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 8017174:	68fb      	ldr	r3, [r7, #12]
 8017176:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8017178:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 801717a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801717c:	2b00      	cmp	r3, #0
 801717e:	d003      	beq.n	8017188 <UTIL_LCD_DisplayStringAt+0xc4>
 8017180:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017182:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017186:	d31b      	bcc.n	80171c0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 8017188:	2301      	movs	r3, #1
 801718a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 801718c:	e018      	b.n	80171c0 <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	781b      	ldrb	r3, [r3, #0]
 8017192:	461a      	mov	r2, r3
 8017194:	68b9      	ldr	r1, [r7, #8]
 8017196:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8017198:	f7ff ff5e 	bl	8017058 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 801719c:	4b1f      	ldr	r3, [pc, #124]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 801719e:	68db      	ldr	r3, [r3, #12]
 80171a0:	4a1e      	ldr	r2, [pc, #120]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80171a2:	015b      	lsls	r3, r3, #5
 80171a4:	4413      	add	r3, r2
 80171a6:	3308      	adds	r3, #8
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	889b      	ldrh	r3, [r3, #4]
 80171ac:	461a      	mov	r2, r3
 80171ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80171b0:	4413      	add	r3, r2
 80171b2:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 80171b4:	687b      	ldr	r3, [r7, #4]
 80171b6:	3301      	adds	r3, #1
 80171b8:	607b      	str	r3, [r7, #4]
    i++;
 80171ba:	6a3b      	ldr	r3, [r7, #32]
 80171bc:	3301      	adds	r3, #1
 80171be:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	781b      	ldrb	r3, [r3, #0]
 80171c4:	2b00      	cmp	r3, #0
 80171c6:	bf14      	ite	ne
 80171c8:	2301      	movne	r3, #1
 80171ca:	2300      	moveq	r3, #0
 80171cc:	b2da      	uxtb	r2, r3
 80171ce:	4b13      	ldr	r3, [pc, #76]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80171d0:	6959      	ldr	r1, [r3, #20]
 80171d2:	4b12      	ldr	r3, [pc, #72]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80171d4:	68db      	ldr	r3, [r3, #12]
 80171d6:	4811      	ldr	r0, [pc, #68]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80171d8:	015b      	lsls	r3, r3, #5
 80171da:	4403      	add	r3, r0
 80171dc:	3308      	adds	r3, #8
 80171de:	681b      	ldr	r3, [r3, #0]
 80171e0:	889b      	ldrh	r3, [r3, #4]
 80171e2:	4618      	mov	r0, r3
 80171e4:	6a3b      	ldr	r3, [r7, #32]
 80171e6:	fb00 f303 	mul.w	r3, r0, r3
 80171ea:	1acb      	subs	r3, r1, r3
 80171ec:	b29b      	uxth	r3, r3
 80171ee:	490b      	ldr	r1, [pc, #44]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80171f0:	68c9      	ldr	r1, [r1, #12]
 80171f2:	480a      	ldr	r0, [pc, #40]	@ (801721c <UTIL_LCD_DisplayStringAt+0x158>)
 80171f4:	0149      	lsls	r1, r1, #5
 80171f6:	4401      	add	r1, r0
 80171f8:	3108      	adds	r1, #8
 80171fa:	6809      	ldr	r1, [r1, #0]
 80171fc:	8889      	ldrh	r1, [r1, #4]
 80171fe:	428b      	cmp	r3, r1
 8017200:	bf2c      	ite	cs
 8017202:	2301      	movcs	r3, #1
 8017204:	2300      	movcc	r3, #0
 8017206:	b2db      	uxtb	r3, r3
 8017208:	4013      	ands	r3, r2
 801720a:	b2db      	uxtb	r3, r3
 801720c:	2b00      	cmp	r3, #0
 801720e:	d1be      	bne.n	801718e <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8017210:	bf00      	nop
 8017212:	bf00      	nop
 8017214:	3728      	adds	r7, #40	@ 0x28
 8017216:	46bd      	mov	sp, r7
 8017218:	bd80      	pop	{r7, pc}
 801721a:	bf00      	nop
 801721c:	24036ef0 	.word	0x24036ef0

08017220 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8017220:	b580      	push	{r7, lr}
 8017222:	b084      	sub	sp, #16
 8017224:	af00      	add	r7, sp, #0
 8017226:	60f8      	str	r0, [r7, #12]
 8017228:	60b9      	str	r1, [r7, #8]
 801722a:	607a      	str	r2, [r7, #4]
 801722c:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 801722e:	69bb      	ldr	r3, [r7, #24]
 8017230:	687a      	ldr	r2, [r7, #4]
 8017232:	68b9      	ldr	r1, [r7, #8]
 8017234:	68f8      	ldr	r0, [r7, #12]
 8017236:	f7ff fe8d 	bl	8016f54 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 801723a:	68ba      	ldr	r2, [r7, #8]
 801723c:	683b      	ldr	r3, [r7, #0]
 801723e:	4413      	add	r3, r2
 8017240:	1e59      	subs	r1, r3, #1
 8017242:	69bb      	ldr	r3, [r7, #24]
 8017244:	687a      	ldr	r2, [r7, #4]
 8017246:	68f8      	ldr	r0, [r7, #12]
 8017248:	f7ff fe84 	bl	8016f54 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 801724c:	69bb      	ldr	r3, [r7, #24]
 801724e:	683a      	ldr	r2, [r7, #0]
 8017250:	68b9      	ldr	r1, [r7, #8]
 8017252:	68f8      	ldr	r0, [r7, #12]
 8017254:	f7ff feb4 	bl	8016fc0 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8017258:	68fa      	ldr	r2, [r7, #12]
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	4413      	add	r3, r2
 801725e:	1e58      	subs	r0, r3, #1
 8017260:	69bb      	ldr	r3, [r7, #24]
 8017262:	683a      	ldr	r2, [r7, #0]
 8017264:	68b9      	ldr	r1, [r7, #8]
 8017266:	f7ff feab 	bl	8016fc0 <UTIL_LCD_DrawVLine>
}
 801726a:	bf00      	nop
 801726c:	3710      	adds	r7, #16
 801726e:	46bd      	mov	sp, r7
 8017270:	bd80      	pop	{r7, pc}
	...

08017274 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 8017274:	b590      	push	{r4, r7, lr}
 8017276:	b085      	sub	sp, #20
 8017278:	af00      	add	r7, sp, #0
 801727a:	60f8      	str	r0, [r7, #12]
 801727c:	60b9      	str	r1, [r7, #8]
 801727e:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 8017280:	4b05      	ldr	r3, [pc, #20]	@ (8017298 <UTIL_LCD_DrawBitmap+0x24>)
 8017282:	681c      	ldr	r4, [r3, #0]
 8017284:	4b05      	ldr	r3, [pc, #20]	@ (801729c <UTIL_LCD_DrawBitmap+0x28>)
 8017286:	6918      	ldr	r0, [r3, #16]
 8017288:	687b      	ldr	r3, [r7, #4]
 801728a:	68ba      	ldr	r2, [r7, #8]
 801728c:	68f9      	ldr	r1, [r7, #12]
 801728e:	47a0      	blx	r4
}
 8017290:	bf00      	nop
 8017292:	3714      	adds	r7, #20
 8017294:	46bd      	mov	sp, r7
 8017296:	bd90      	pop	{r4, r7, pc}
 8017298:	24036f30 	.word	0x24036f30
 801729c:	24036ef0 	.word	0x24036ef0

080172a0 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80172a0:	b590      	push	{r4, r7, lr}
 80172a2:	b087      	sub	sp, #28
 80172a4:	af02      	add	r7, sp, #8
 80172a6:	60f8      	str	r0, [r7, #12]
 80172a8:	60b9      	str	r1, [r7, #8]
 80172aa:	607a      	str	r2, [r7, #4]
 80172ac:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80172ae:	4b17      	ldr	r3, [pc, #92]	@ (801730c <UTIL_LCD_FillRect+0x6c>)
 80172b0:	69db      	ldr	r3, [r3, #28]
 80172b2:	2b02      	cmp	r3, #2
 80172b4:	d11a      	bne.n	80172ec <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80172b6:	4b16      	ldr	r3, [pc, #88]	@ (8017310 <UTIL_LCD_FillRect+0x70>)
 80172b8:	691c      	ldr	r4, [r3, #16]
 80172ba:	4b14      	ldr	r3, [pc, #80]	@ (801730c <UTIL_LCD_FillRect+0x6c>)
 80172bc:	6918      	ldr	r0, [r3, #16]
 80172be:	6a3b      	ldr	r3, [r7, #32]
 80172c0:	08db      	lsrs	r3, r3, #3
 80172c2:	f003 021f 	and.w	r2, r3, #31
 80172c6:	6a3b      	ldr	r3, [r7, #32]
 80172c8:	0a9b      	lsrs	r3, r3, #10
 80172ca:	015b      	lsls	r3, r3, #5
 80172cc:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80172d0:	431a      	orrs	r2, r3
 80172d2:	6a3b      	ldr	r3, [r7, #32]
 80172d4:	0cdb      	lsrs	r3, r3, #19
 80172d6:	02db      	lsls	r3, r3, #11
 80172d8:	b29b      	uxth	r3, r3
 80172da:	4313      	orrs	r3, r2
 80172dc:	9301      	str	r3, [sp, #4]
 80172de:	683b      	ldr	r3, [r7, #0]
 80172e0:	9300      	str	r3, [sp, #0]
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	68ba      	ldr	r2, [r7, #8]
 80172e6:	68f9      	ldr	r1, [r7, #12]
 80172e8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80172ea:	e00b      	b.n	8017304 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 80172ec:	4b08      	ldr	r3, [pc, #32]	@ (8017310 <UTIL_LCD_FillRect+0x70>)
 80172ee:	691c      	ldr	r4, [r3, #16]
 80172f0:	4b06      	ldr	r3, [pc, #24]	@ (801730c <UTIL_LCD_FillRect+0x6c>)
 80172f2:	6918      	ldr	r0, [r3, #16]
 80172f4:	6a3b      	ldr	r3, [r7, #32]
 80172f6:	9301      	str	r3, [sp, #4]
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	9300      	str	r3, [sp, #0]
 80172fc:	687b      	ldr	r3, [r7, #4]
 80172fe:	68ba      	ldr	r2, [r7, #8]
 8017300:	68f9      	ldr	r1, [r7, #12]
 8017302:	47a0      	blx	r4
}
 8017304:	bf00      	nop
 8017306:	3714      	adds	r7, #20
 8017308:	46bd      	mov	sp, r7
 801730a:	bd90      	pop	{r4, r7, pc}
 801730c:	24036ef0 	.word	0x24036ef0
 8017310:	24036f30 	.word	0x24036f30

08017314 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8017314:	b580      	push	{r7, lr}
 8017316:	b0b2      	sub	sp, #200	@ 0xc8
 8017318:	af02      	add	r7, sp, #8
 801731a:	60f8      	str	r0, [r7, #12]
 801731c:	60b9      	str	r1, [r7, #8]
 801731e:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 8017320:	2300      	movs	r3, #0
 8017322:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8017326:	2300      	movs	r3, #0
 8017328:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 801732c:	4ba5      	ldr	r3, [pc, #660]	@ (80175c4 <DrawChar+0x2b0>)
 801732e:	68db      	ldr	r3, [r3, #12]
 8017330:	4aa4      	ldr	r2, [pc, #656]	@ (80175c4 <DrawChar+0x2b0>)
 8017332:	015b      	lsls	r3, r3, #5
 8017334:	4413      	add	r3, r2
 8017336:	3308      	adds	r3, #8
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	88db      	ldrh	r3, [r3, #6]
 801733c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 8017340:	4ba0      	ldr	r3, [pc, #640]	@ (80175c4 <DrawChar+0x2b0>)
 8017342:	68db      	ldr	r3, [r3, #12]
 8017344:	4a9f      	ldr	r2, [pc, #636]	@ (80175c4 <DrawChar+0x2b0>)
 8017346:	015b      	lsls	r3, r3, #5
 8017348:	4413      	add	r3, r2
 801734a:	3308      	adds	r3, #8
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	889b      	ldrh	r3, [r3, #4]
 8017350:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8017354:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017358:	3307      	adds	r3, #7
 801735a:	f023 0207 	bic.w	r2, r3, #7
 801735e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017362:	1ad3      	subs	r3, r2, r3
 8017364:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8017368:	2300      	movs	r3, #0
 801736a:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801736e:	e11c      	b.n	80175aa <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 8017370:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017374:	3307      	adds	r3, #7
 8017376:	08db      	lsrs	r3, r3, #3
 8017378:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 801737c:	fb02 f303 	mul.w	r3, r2, r3
 8017380:	687a      	ldr	r2, [r7, #4]
 8017382:	4413      	add	r3, r2
 8017384:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8017388:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801738c:	3307      	adds	r3, #7
 801738e:	08db      	lsrs	r3, r3, #3
 8017390:	2b01      	cmp	r3, #1
 8017392:	d002      	beq.n	801739a <DrawChar+0x86>
 8017394:	2b02      	cmp	r3, #2
 8017396:	d006      	beq.n	80173a6 <DrawChar+0x92>
 8017398:	e011      	b.n	80173be <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 801739a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801739e:	781b      	ldrb	r3, [r3, #0]
 80173a0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80173a4:	e01d      	b.n	80173e2 <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80173a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	021b      	lsls	r3, r3, #8
 80173ae:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80173b2:	3201      	adds	r2, #1
 80173b4:	7812      	ldrb	r2, [r2, #0]
 80173b6:	4313      	orrs	r3, r2
 80173b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80173bc:	e011      	b.n	80173e2 <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80173be:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80173c2:	781b      	ldrb	r3, [r3, #0]
 80173c4:	041a      	lsls	r2, r3, #16
 80173c6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80173ca:	3301      	adds	r3, #1
 80173cc:	781b      	ldrb	r3, [r3, #0]
 80173ce:	021b      	lsls	r3, r3, #8
 80173d0:	4313      	orrs	r3, r2
 80173d2:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80173d6:	3202      	adds	r2, #2
 80173d8:	7812      	ldrb	r2, [r2, #0]
 80173da:	4313      	orrs	r3, r2
 80173dc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80173e0:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80173e2:	4b78      	ldr	r3, [pc, #480]	@ (80175c4 <DrawChar+0x2b0>)
 80173e4:	68db      	ldr	r3, [r3, #12]
 80173e6:	4a77      	ldr	r2, [pc, #476]	@ (80175c4 <DrawChar+0x2b0>)
 80173e8:	015b      	lsls	r3, r3, #5
 80173ea:	4413      	add	r3, r2
 80173ec:	331c      	adds	r3, #28
 80173ee:	681b      	ldr	r3, [r3, #0]
 80173f0:	2b02      	cmp	r3, #2
 80173f2:	f040 808c 	bne.w	801750e <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 80173f6:	2300      	movs	r3, #0
 80173f8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80173fc:	e074      	b.n	80174e8 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 80173fe:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8017402:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017406:	1ad2      	subs	r2, r2, r3
 8017408:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801740c:	4413      	add	r3, r2
 801740e:	3b01      	subs	r3, #1
 8017410:	2201      	movs	r2, #1
 8017412:	fa02 f303 	lsl.w	r3, r2, r3
 8017416:	461a      	mov	r2, r3
 8017418:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801741c:	4013      	ands	r3, r2
 801741e:	2b00      	cmp	r3, #0
 8017420:	d02d      	beq.n	801747e <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 8017422:	4b68      	ldr	r3, [pc, #416]	@ (80175c4 <DrawChar+0x2b0>)
 8017424:	68db      	ldr	r3, [r3, #12]
 8017426:	4a67      	ldr	r2, [pc, #412]	@ (80175c4 <DrawChar+0x2b0>)
 8017428:	015b      	lsls	r3, r3, #5
 801742a:	4413      	add	r3, r2
 801742c:	681b      	ldr	r3, [r3, #0]
 801742e:	08db      	lsrs	r3, r3, #3
 8017430:	b29b      	uxth	r3, r3
 8017432:	f003 031f 	and.w	r3, r3, #31
 8017436:	b29a      	uxth	r2, r3
 8017438:	4b62      	ldr	r3, [pc, #392]	@ (80175c4 <DrawChar+0x2b0>)
 801743a:	68db      	ldr	r3, [r3, #12]
 801743c:	4961      	ldr	r1, [pc, #388]	@ (80175c4 <DrawChar+0x2b0>)
 801743e:	015b      	lsls	r3, r3, #5
 8017440:	440b      	add	r3, r1
 8017442:	681b      	ldr	r3, [r3, #0]
 8017444:	0a9b      	lsrs	r3, r3, #10
 8017446:	b29b      	uxth	r3, r3
 8017448:	015b      	lsls	r3, r3, #5
 801744a:	b29b      	uxth	r3, r3
 801744c:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8017450:	b29b      	uxth	r3, r3
 8017452:	4313      	orrs	r3, r2
 8017454:	b29a      	uxth	r2, r3
 8017456:	4b5b      	ldr	r3, [pc, #364]	@ (80175c4 <DrawChar+0x2b0>)
 8017458:	68db      	ldr	r3, [r3, #12]
 801745a:	495a      	ldr	r1, [pc, #360]	@ (80175c4 <DrawChar+0x2b0>)
 801745c:	015b      	lsls	r3, r3, #5
 801745e:	440b      	add	r3, r1
 8017460:	681b      	ldr	r3, [r3, #0]
 8017462:	0cdb      	lsrs	r3, r3, #19
 8017464:	b29b      	uxth	r3, r3
 8017466:	02db      	lsls	r3, r3, #11
 8017468:	b29b      	uxth	r3, r3
 801746a:	4313      	orrs	r3, r2
 801746c:	b29a      	uxth	r2, r3
 801746e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017472:	005b      	lsls	r3, r3, #1
 8017474:	33c0      	adds	r3, #192	@ 0xc0
 8017476:	443b      	add	r3, r7
 8017478:	f823 2c4c 	strh.w	r2, [r3, #-76]
 801747c:	e02f      	b.n	80174de <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 801747e:	4b51      	ldr	r3, [pc, #324]	@ (80175c4 <DrawChar+0x2b0>)
 8017480:	68db      	ldr	r3, [r3, #12]
 8017482:	4a50      	ldr	r2, [pc, #320]	@ (80175c4 <DrawChar+0x2b0>)
 8017484:	015b      	lsls	r3, r3, #5
 8017486:	4413      	add	r3, r2
 8017488:	3304      	adds	r3, #4
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	08db      	lsrs	r3, r3, #3
 801748e:	b29b      	uxth	r3, r3
 8017490:	f003 031f 	and.w	r3, r3, #31
 8017494:	b29a      	uxth	r2, r3
 8017496:	4b4b      	ldr	r3, [pc, #300]	@ (80175c4 <DrawChar+0x2b0>)
 8017498:	68db      	ldr	r3, [r3, #12]
 801749a:	494a      	ldr	r1, [pc, #296]	@ (80175c4 <DrawChar+0x2b0>)
 801749c:	015b      	lsls	r3, r3, #5
 801749e:	440b      	add	r3, r1
 80174a0:	3304      	adds	r3, #4
 80174a2:	681b      	ldr	r3, [r3, #0]
 80174a4:	0a9b      	lsrs	r3, r3, #10
 80174a6:	b29b      	uxth	r3, r3
 80174a8:	015b      	lsls	r3, r3, #5
 80174aa:	b29b      	uxth	r3, r3
 80174ac:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80174b0:	b29b      	uxth	r3, r3
 80174b2:	4313      	orrs	r3, r2
 80174b4:	b29a      	uxth	r2, r3
 80174b6:	4b43      	ldr	r3, [pc, #268]	@ (80175c4 <DrawChar+0x2b0>)
 80174b8:	68db      	ldr	r3, [r3, #12]
 80174ba:	4942      	ldr	r1, [pc, #264]	@ (80175c4 <DrawChar+0x2b0>)
 80174bc:	015b      	lsls	r3, r3, #5
 80174be:	440b      	add	r3, r1
 80174c0:	3304      	adds	r3, #4
 80174c2:	681b      	ldr	r3, [r3, #0]
 80174c4:	0cdb      	lsrs	r3, r3, #19
 80174c6:	b29b      	uxth	r3, r3
 80174c8:	02db      	lsls	r3, r3, #11
 80174ca:	b29b      	uxth	r3, r3
 80174cc:	4313      	orrs	r3, r2
 80174ce:	b29a      	uxth	r2, r3
 80174d0:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80174d4:	005b      	lsls	r3, r3, #1
 80174d6:	33c0      	adds	r3, #192	@ 0xc0
 80174d8:	443b      	add	r3, r7
 80174da:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80174de:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80174e2:	3301      	adds	r3, #1
 80174e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80174e8:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80174ec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80174f0:	429a      	cmp	r2, r3
 80174f2:	d384      	bcc.n	80173fe <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 80174f4:	68b9      	ldr	r1, [r7, #8]
 80174f6:	1c4b      	adds	r3, r1, #1
 80174f8:	60bb      	str	r3, [r7, #8]
 80174fa:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 80174fe:	2301      	movs	r3, #1
 8017500:	9300      	str	r3, [sp, #0]
 8017502:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017506:	68f8      	ldr	r0, [r7, #12]
 8017508:	f7ff fd08 	bl	8016f1c <UTIL_LCD_FillRGBRect>
 801750c:	e048      	b.n	80175a0 <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 801750e:	2300      	movs	r3, #0
 8017510:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8017514:	e032      	b.n	801757c <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8017516:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 801751a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801751e:	1ad2      	subs	r2, r2, r3
 8017520:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017524:	4413      	add	r3, r2
 8017526:	3b01      	subs	r3, #1
 8017528:	2201      	movs	r2, #1
 801752a:	fa02 f303 	lsl.w	r3, r2, r3
 801752e:	461a      	mov	r2, r3
 8017530:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017534:	4013      	ands	r3, r2
 8017536:	2b00      	cmp	r3, #0
 8017538:	d00d      	beq.n	8017556 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 801753a:	4b22      	ldr	r3, [pc, #136]	@ (80175c4 <DrawChar+0x2b0>)
 801753c:	68db      	ldr	r3, [r3, #12]
 801753e:	4a21      	ldr	r2, [pc, #132]	@ (80175c4 <DrawChar+0x2b0>)
 8017540:	015b      	lsls	r3, r3, #5
 8017542:	4413      	add	r3, r2
 8017544:	681a      	ldr	r2, [r3, #0]
 8017546:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 801754a:	009b      	lsls	r3, r3, #2
 801754c:	33c0      	adds	r3, #192	@ 0xc0
 801754e:	443b      	add	r3, r7
 8017550:	f843 2cac 	str.w	r2, [r3, #-172]
 8017554:	e00d      	b.n	8017572 <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8017556:	4b1b      	ldr	r3, [pc, #108]	@ (80175c4 <DrawChar+0x2b0>)
 8017558:	68db      	ldr	r3, [r3, #12]
 801755a:	4a1a      	ldr	r2, [pc, #104]	@ (80175c4 <DrawChar+0x2b0>)
 801755c:	015b      	lsls	r3, r3, #5
 801755e:	4413      	add	r3, r2
 8017560:	3304      	adds	r3, #4
 8017562:	681a      	ldr	r2, [r3, #0]
 8017564:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017568:	009b      	lsls	r3, r3, #2
 801756a:	33c0      	adds	r3, #192	@ 0xc0
 801756c:	443b      	add	r3, r7
 801756e:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 8017572:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8017576:	3301      	adds	r3, #1
 8017578:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801757c:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8017580:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017584:	429a      	cmp	r2, r3
 8017586:	d3c6      	bcc.n	8017516 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8017588:	68b9      	ldr	r1, [r7, #8]
 801758a:	1c4b      	adds	r3, r1, #1
 801758c:	60bb      	str	r3, [r7, #8]
 801758e:	f107 0214 	add.w	r2, r7, #20
 8017592:	2301      	movs	r3, #1
 8017594:	9300      	str	r3, [sp, #0]
 8017596:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801759a:	68f8      	ldr	r0, [r7, #12]
 801759c:	f7ff fcbe 	bl	8016f1c <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80175a0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80175a4:	3301      	adds	r3, #1
 80175a6:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80175aa:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80175ae:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80175b2:	429a      	cmp	r2, r3
 80175b4:	f4ff aedc 	bcc.w	8017370 <DrawChar+0x5c>
    }
  }
}
 80175b8:	bf00      	nop
 80175ba:	bf00      	nop
 80175bc:	37c0      	adds	r7, #192	@ 0xc0
 80175be:	46bd      	mov	sp, r7
 80175c0:	bd80      	pop	{r7, pc}
 80175c2:	bf00      	nop
 80175c4:	24036ef0 	.word	0x24036ef0

080175c8 <ai_buffer_get_size>:
 80175c8:	b348      	cbz	r0, 801761e <ai_buffer_get_size+0x56>
 80175ca:	4b15      	ldr	r3, [pc, #84]	@ (8017620 <ai_buffer_get_size+0x58>)
 80175cc:	b430      	push	{r4, r5}
 80175ce:	6802      	ldr	r2, [r0, #0]
 80175d0:	4d14      	ldr	r5, [pc, #80]	@ (8017624 <ai_buffer_get_size+0x5c>)
 80175d2:	4013      	ands	r3, r2
 80175d4:	6984      	ldr	r4, [r0, #24]
 80175d6:	42ab      	cmp	r3, r5
 80175d8:	6862      	ldr	r2, [r4, #4]
 80175da:	d103      	bne.n	80175e4 <ai_buffer_get_size+0x1c>
 80175dc:	b111      	cbz	r1, 80175e4 <ai_buffer_get_size+0x1c>
 80175de:	321f      	adds	r2, #31
 80175e0:	f022 021f 	bic.w	r2, r2, #31
 80175e4:	7d03      	ldrb	r3, [r0, #20]
 80175e6:	6941      	ldr	r1, [r0, #20]
 80175e8:	f1a3 0301 	sub.w	r3, r3, #1
 80175ec:	f3c1 2017 	ubfx	r0, r1, #8, #24
 80175f0:	fab3 f383 	clz	r3, r3
 80175f4:	095b      	lsrs	r3, r3, #5
 80175f6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 80175fa:	da0c      	bge.n	8017616 <ai_buffer_get_size+0x4e>
 80175fc:	2b01      	cmp	r3, #1
 80175fe:	d103      	bne.n	8017608 <ai_buffer_get_size+0x40>
 8017600:	2802      	cmp	r0, #2
 8017602:	f04f 0302 	mov.w	r3, #2
 8017606:	d006      	beq.n	8017616 <ai_buffer_get_size+0x4e>
 8017608:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 801760c:	3301      	adds	r3, #1
 801760e:	4298      	cmp	r0, r3
 8017610:	fb01 f202 	mul.w	r2, r1, r2
 8017614:	d1f2      	bne.n	80175fc <ai_buffer_get_size+0x34>
 8017616:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 801761a:	bc30      	pop	{r4, r5}
 801761c:	4770      	bx	lr
 801761e:	4770      	bx	lr
 8017620:	017fffff 	.word	0x017fffff
 8017624:	000400c0 	.word	0x000400c0

08017628 <ai_buffer_array_sane>:
 8017628:	b138      	cbz	r0, 801763a <ai_buffer_array_sane+0x12>
 801762a:	6843      	ldr	r3, [r0, #4]
 801762c:	b123      	cbz	r3, 8017638 <ai_buffer_array_sane+0x10>
 801762e:	8840      	ldrh	r0, [r0, #2]
 8017630:	3800      	subs	r0, #0
 8017632:	bf18      	it	ne
 8017634:	2001      	movne	r0, #1
 8017636:	4770      	bx	lr
 8017638:	4618      	mov	r0, r3
 801763a:	4770      	bx	lr

0801763c <ai_buffer_array_item_set_address>:
 801763c:	b158      	cbz	r0, 8017656 <ai_buffer_array_item_set_address+0x1a>
 801763e:	6843      	ldr	r3, [r0, #4]
 8017640:	b143      	cbz	r3, 8017654 <ai_buffer_array_item_set_address+0x18>
 8017642:	8840      	ldrh	r0, [r0, #2]
 8017644:	b138      	cbz	r0, 8017656 <ai_buffer_array_item_set_address+0x1a>
 8017646:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 801764a:	2001      	movs	r0, #1
 801764c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8017650:	605a      	str	r2, [r3, #4]
 8017652:	4770      	bx	lr
 8017654:	4618      	mov	r0, r3
 8017656:	4770      	bx	lr

08017658 <ai_platform_get_weights_map>:
 8017658:	2900      	cmp	r1, #0
 801765a:	bf18      	it	ne
 801765c:	2800      	cmpne	r0, #0
 801765e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017660:	bf0c      	ite	eq
 8017662:	2401      	moveq	r4, #1
 8017664:	2400      	movne	r4, #0
 8017666:	2a00      	cmp	r2, #0
 8017668:	bf08      	it	eq
 801766a:	f044 0401 	orreq.w	r4, r4, #1
 801766e:	b114      	cbz	r4, 8017676 <ai_platform_get_weights_map+0x1e>
 8017670:	2400      	movs	r4, #0
 8017672:	4620      	mov	r0, r4
 8017674:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017676:	4616      	mov	r6, r2
 8017678:	4b22      	ldr	r3, [pc, #136]	@ (8017704 <ai_platform_get_weights_map+0xac>)
 801767a:	6812      	ldr	r2, [r2, #0]
 801767c:	4605      	mov	r5, r0
 801767e:	460f      	mov	r7, r1
 8017680:	429a      	cmp	r2, r3
 8017682:	d024      	beq.n	80176ce <ai_platform_get_weights_map+0x76>
 8017684:	6870      	ldr	r0, [r6, #4]
 8017686:	2800      	cmp	r0, #0
 8017688:	d0f2      	beq.n	8017670 <ai_platform_get_weights_map+0x18>
 801768a:	6806      	ldr	r6, [r0, #0]
 801768c:	429e      	cmp	r6, r3
 801768e:	d006      	beq.n	801769e <ai_platform_get_weights_map+0x46>
 8017690:	f1a1 0401 	sub.w	r4, r1, #1
 8017694:	6028      	str	r0, [r5, #0]
 8017696:	fab4 f484 	clz	r4, r4
 801769a:	0964      	lsrs	r4, r4, #5
 801769c:	e7e9      	b.n	8017672 <ai_platform_get_weights_map+0x1a>
 801769e:	3d04      	subs	r5, #4
 80176a0:	4601      	mov	r1, r0
 80176a2:	4623      	mov	r3, r4
 80176a4:	e004      	b.n	80176b0 <ai_platform_get_weights_map+0x58>
 80176a6:	3301      	adds	r3, #1
 80176a8:	f845 2f04 	str.w	r2, [r5, #4]!
 80176ac:	429f      	cmp	r7, r3
 80176ae:	d903      	bls.n	80176b8 <ai_platform_get_weights_map+0x60>
 80176b0:	f851 2f04 	ldr.w	r2, [r1, #4]!
 80176b4:	42b2      	cmp	r2, r6
 80176b6:	d1f6      	bne.n	80176a6 <ai_platform_get_weights_map+0x4e>
 80176b8:	429f      	cmp	r7, r3
 80176ba:	d1da      	bne.n	8017672 <ai_platform_get_weights_map+0x1a>
 80176bc:	1c79      	adds	r1, r7, #1
 80176be:	4b11      	ldr	r3, [pc, #68]	@ (8017704 <ai_platform_get_weights_map+0xac>)
 80176c0:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 80176c4:	1ae4      	subs	r4, r4, r3
 80176c6:	fab4 f484 	clz	r4, r4
 80176ca:	0964      	lsrs	r4, r4, #5
 80176cc:	e7d1      	b.n	8017672 <ai_platform_get_weights_map+0x1a>
 80176ce:	1d30      	adds	r0, r6, #4
 80176d0:	f7ff ffaa 	bl	8017628 <ai_buffer_array_sane>
 80176d4:	2800      	cmp	r0, #0
 80176d6:	d0cb      	beq.n	8017670 <ai_platform_get_weights_map+0x18>
 80176d8:	88f3      	ldrh	r3, [r6, #6]
 80176da:	429f      	cmp	r7, r3
 80176dc:	d1c8      	bne.n	8017670 <ai_platform_get_weights_map+0x18>
 80176de:	3d04      	subs	r5, #4
 80176e0:	4622      	mov	r2, r4
 80176e2:	e004      	b.n	80176ee <ai_platform_get_weights_map+0x96>
 80176e4:	3201      	adds	r2, #1
 80176e6:	f845 3f04 	str.w	r3, [r5, #4]!
 80176ea:	4297      	cmp	r7, r2
 80176ec:	d905      	bls.n	80176fa <ai_platform_get_weights_map+0xa2>
 80176ee:	68b3      	ldr	r3, [r6, #8]
 80176f0:	4423      	add	r3, r4
 80176f2:	341c      	adds	r4, #28
 80176f4:	685b      	ldr	r3, [r3, #4]
 80176f6:	2b00      	cmp	r3, #0
 80176f8:	d1f4      	bne.n	80176e4 <ai_platform_get_weights_map+0x8c>
 80176fa:	1abc      	subs	r4, r7, r2
 80176fc:	fab4 f484 	clz	r4, r4
 8017700:	0964      	lsrs	r4, r4, #5
 8017702:	e7b6      	b.n	8017672 <ai_platform_get_weights_map+0x1a>
 8017704:	a1facade 	.word	0xa1facade

08017708 <ai_platform_get_activations_map>:
 8017708:	2900      	cmp	r1, #0
 801770a:	bf18      	it	ne
 801770c:	2800      	cmpne	r0, #0
 801770e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017710:	bf0c      	ite	eq
 8017712:	2401      	moveq	r4, #1
 8017714:	2400      	movne	r4, #0
 8017716:	2a00      	cmp	r2, #0
 8017718:	bf08      	it	eq
 801771a:	f044 0401 	orreq.w	r4, r4, #1
 801771e:	b114      	cbz	r4, 8017726 <ai_platform_get_activations_map+0x1e>
 8017720:	2400      	movs	r4, #0
 8017722:	4620      	mov	r0, r4
 8017724:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017726:	4616      	mov	r6, r2
 8017728:	4b23      	ldr	r3, [pc, #140]	@ (80177b8 <ai_platform_get_activations_map+0xb0>)
 801772a:	6812      	ldr	r2, [r2, #0]
 801772c:	4605      	mov	r5, r0
 801772e:	460f      	mov	r7, r1
 8017730:	429a      	cmp	r2, r3
 8017732:	d024      	beq.n	801777e <ai_platform_get_activations_map+0x76>
 8017734:	6a30      	ldr	r0, [r6, #32]
 8017736:	2800      	cmp	r0, #0
 8017738:	d0f2      	beq.n	8017720 <ai_platform_get_activations_map+0x18>
 801773a:	6806      	ldr	r6, [r0, #0]
 801773c:	429e      	cmp	r6, r3
 801773e:	d006      	beq.n	801774e <ai_platform_get_activations_map+0x46>
 8017740:	f1a1 0401 	sub.w	r4, r1, #1
 8017744:	6028      	str	r0, [r5, #0]
 8017746:	fab4 f484 	clz	r4, r4
 801774a:	0964      	lsrs	r4, r4, #5
 801774c:	e7e9      	b.n	8017722 <ai_platform_get_activations_map+0x1a>
 801774e:	3d04      	subs	r5, #4
 8017750:	4601      	mov	r1, r0
 8017752:	4623      	mov	r3, r4
 8017754:	e004      	b.n	8017760 <ai_platform_get_activations_map+0x58>
 8017756:	3301      	adds	r3, #1
 8017758:	f845 2f04 	str.w	r2, [r5, #4]!
 801775c:	429f      	cmp	r7, r3
 801775e:	d903      	bls.n	8017768 <ai_platform_get_activations_map+0x60>
 8017760:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8017764:	42b2      	cmp	r2, r6
 8017766:	d1f6      	bne.n	8017756 <ai_platform_get_activations_map+0x4e>
 8017768:	429f      	cmp	r7, r3
 801776a:	d1da      	bne.n	8017722 <ai_platform_get_activations_map+0x1a>
 801776c:	1c79      	adds	r1, r7, #1
 801776e:	4b12      	ldr	r3, [pc, #72]	@ (80177b8 <ai_platform_get_activations_map+0xb0>)
 8017770:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8017774:	1ae4      	subs	r4, r4, r3
 8017776:	fab4 f484 	clz	r4, r4
 801777a:	0964      	lsrs	r4, r4, #5
 801777c:	e7d1      	b.n	8017722 <ai_platform_get_activations_map+0x1a>
 801777e:	f106 000c 	add.w	r0, r6, #12
 8017782:	f7ff ff51 	bl	8017628 <ai_buffer_array_sane>
 8017786:	2800      	cmp	r0, #0
 8017788:	d0ca      	beq.n	8017720 <ai_platform_get_activations_map+0x18>
 801778a:	89f3      	ldrh	r3, [r6, #14]
 801778c:	429f      	cmp	r7, r3
 801778e:	d1c7      	bne.n	8017720 <ai_platform_get_activations_map+0x18>
 8017790:	3d04      	subs	r5, #4
 8017792:	4622      	mov	r2, r4
 8017794:	e004      	b.n	80177a0 <ai_platform_get_activations_map+0x98>
 8017796:	3201      	adds	r2, #1
 8017798:	f845 3f04 	str.w	r3, [r5, #4]!
 801779c:	4297      	cmp	r7, r2
 801779e:	d905      	bls.n	80177ac <ai_platform_get_activations_map+0xa4>
 80177a0:	6933      	ldr	r3, [r6, #16]
 80177a2:	4423      	add	r3, r4
 80177a4:	341c      	adds	r4, #28
 80177a6:	685b      	ldr	r3, [r3, #4]
 80177a8:	2b00      	cmp	r3, #0
 80177aa:	d1f4      	bne.n	8017796 <ai_platform_get_activations_map+0x8e>
 80177ac:	1abc      	subs	r4, r7, r2
 80177ae:	fab4 f484 	clz	r4, r4
 80177b2:	0964      	lsrs	r4, r4, #5
 80177b4:	e7b5      	b.n	8017722 <ai_platform_get_activations_map+0x1a>
 80177b6:	bf00      	nop
 80177b8:	a1facade 	.word	0xa1facade

080177bc <ai_platform_bind_network_params>:
 80177bc:	2a00      	cmp	r2, #0
 80177be:	bf18      	it	ne
 80177c0:	2900      	cmpne	r1, #0
 80177c2:	d010      	beq.n	80177e6 <ai_platform_bind_network_params+0x2a>
 80177c4:	b178      	cbz	r0, 80177e6 <ai_platform_bind_network_params+0x2a>
 80177c6:	4603      	mov	r3, r0
 80177c8:	4808      	ldr	r0, [pc, #32]	@ (80177ec <ai_platform_bind_network_params+0x30>)
 80177ca:	f103 0c0c 	add.w	ip, r3, #12
 80177ce:	f843 0b04 	str.w	r0, [r3], #4
 80177d2:	c903      	ldmia	r1, {r0, r1}
 80177d4:	e883 0003 	stmia.w	r3, {r0, r1}
 80177d8:	2301      	movs	r3, #1
 80177da:	e892 0003 	ldmia.w	r2, {r0, r1}
 80177de:	e88c 0003 	stmia.w	ip, {r0, r1}
 80177e2:	4618      	mov	r0, r3
 80177e4:	4770      	bx	lr
 80177e6:	2300      	movs	r3, #0
 80177e8:	4618      	mov	r0, r3
 80177ea:	4770      	bx	lr
 80177ec:	a1facade 	.word	0xa1facade

080177f0 <ai_platform_network_get_error>:
 80177f0:	4b04      	ldr	r3, [pc, #16]	@ (8017804 <ai_platform_network_get_error+0x14>)
 80177f2:	6802      	ldr	r2, [r0, #0]
 80177f4:	4393      	bics	r3, r2
 80177f6:	d102      	bne.n	80177fe <ai_platform_network_get_error+0xe>
 80177f8:	300c      	adds	r0, #12
 80177fa:	f000 bc33 	b.w	8018064 <core_get_error>
 80177fe:	f241 0010 	movw	r0, #4112	@ 0x1010
 8017802:	4770      	bx	lr
 8017804:	a1c00100 	.word	0xa1c00100

08017808 <ai_platform_network_set_error>:
 8017808:	b110      	cbz	r0, 8017810 <ai_platform_network_set_error+0x8>
 801780a:	300c      	adds	r0, #12
 801780c:	f000 bc30 	b.w	8018070 <core_set_error>
 8017810:	4770      	bx	lr
 8017812:	bf00      	nop

08017814 <ai_platform_inputs_get>:
 8017814:	4b3b      	ldr	r3, [pc, #236]	@ (8017904 <ai_platform_inputs_get+0xf0>)
 8017816:	6802      	ldr	r2, [r0, #0]
 8017818:	4393      	bics	r3, r2
 801781a:	d168      	bne.n	80178ee <ai_platform_inputs_get+0xda>
 801781c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017820:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8017822:	b085      	sub	sp, #20
 8017824:	4605      	mov	r5, r0
 8017826:	460f      	mov	r7, r1
 8017828:	2b00      	cmp	r3, #0
 801782a:	d053      	beq.n	80178d4 <ai_platform_inputs_get+0xc0>
 801782c:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 8017830:	f1bb 0f00 	cmp.w	fp, #0
 8017834:	d04e      	beq.n	80178d4 <ai_platform_inputs_get+0xc0>
 8017836:	f04f 0a00 	mov.w	sl, #0
 801783a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 801783e:	4656      	mov	r6, sl
 8017840:	46d1      	mov	r9, sl
 8017842:	46da      	mov	sl, fp
 8017844:	e016      	b.n	8017874 <ai_platform_inputs_get+0x60>
 8017846:	9a01      	ldr	r2, [sp, #4]
 8017848:	2301      	movs	r3, #1
 801784a:	f84b 3002 	str.w	r3, [fp, r2]
 801784e:	69aa      	ldr	r2, [r5, #24]
 8017850:	f04f 0301 	mov.w	r3, #1
 8017854:	6855      	ldr	r5, [r2, #4]
 8017856:	6020      	str	r0, [r4, #0]
 8017858:	3601      	adds	r6, #1
 801785a:	7523      	strb	r3, [r4, #20]
 801785c:	f109 091c 	add.w	r9, r9, #28
 8017860:	6960      	ldr	r0, [r4, #20]
 8017862:	2300      	movs	r3, #0
 8017864:	f368 201f 	bfi	r0, r8, #8, #24
 8017868:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801786c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8017870:	e9c4 0105 	strd	r0, r1, [r4, #20]
 8017874:	f8ba 3000 	ldrh.w	r3, [sl]
 8017878:	00f2      	lsls	r2, r6, #3
 801787a:	42b3      	cmp	r3, r6
 801787c:	9201      	str	r2, [sp, #4]
 801787e:	d938      	bls.n	80178f2 <ai_platform_inputs_get+0xde>
 8017880:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017884:	2b00      	cmp	r3, #0
 8017886:	d034      	beq.n	80178f2 <ai_platform_inputs_get+0xde>
 8017888:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801788c:	2d00      	cmp	r5, #0
 801788e:	d030      	beq.n	80178f2 <ai_platform_inputs_get+0xde>
 8017890:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017894:	69a8      	ldr	r0, [r5, #24]
 8017896:	68e9      	ldr	r1, [r5, #12]
 8017898:	6800      	ldr	r0, [r0, #0]
 801789a:	9100      	str	r1, [sp, #0]
 801789c:	e9d3 4b01 	ldrd	r4, fp, [r3, #4]
 80178a0:	68ab      	ldr	r3, [r5, #8]
 80178a2:	eb0b 07c6 	add.w	r7, fp, r6, lsl #3
 80178a6:	444c      	add	r4, r9
 80178a8:	f3c3 2817 	ubfx	r8, r3, #8, #24
 80178ac:	f003 f886 	bl	801a9bc <ai_array_to_buffer_fmt>
 80178b0:	69aa      	ldr	r2, [r5, #24]
 80178b2:	9900      	ldr	r1, [sp, #0]
 80178b4:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80178b8:	2f00      	cmp	r7, #0
 80178ba:	d0c9      	beq.n	8017850 <ai_platform_inputs_get+0x3c>
 80178bc:	2200      	movs	r2, #0
 80178be:	f84b 2036 	str.w	r2, [fp, r6, lsl #3]
 80178c2:	682a      	ldr	r2, [r5, #0]
 80178c4:	607a      	str	r2, [r7, #4]
 80178c6:	b112      	cbz	r2, 80178ce <ai_platform_inputs_get+0xba>
 80178c8:	8852      	ldrh	r2, [r2, #2]
 80178ca:	2a00      	cmp	r2, #0
 80178cc:	d1bb      	bne.n	8017846 <ai_platform_inputs_get+0x32>
 80178ce:	69aa      	ldr	r2, [r5, #24]
 80178d0:	2700      	movs	r7, #0
 80178d2:	e7bd      	b.n	8017850 <ai_platform_inputs_get+0x3c>
 80178d4:	2600      	movs	r6, #0
 80178d6:	2218      	movs	r2, #24
 80178d8:	2111      	movs	r1, #17
 80178da:	f105 000c 	add.w	r0, r5, #12
 80178de:	f000 fbc7 	bl	8018070 <core_set_error>
 80178e2:	4630      	mov	r0, r6
 80178e4:	b107      	cbz	r7, 80178e8 <ai_platform_inputs_get+0xd4>
 80178e6:	803e      	strh	r6, [r7, #0]
 80178e8:	b005      	add	sp, #20
 80178ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80178ee:	2000      	movs	r0, #0
 80178f0:	4770      	bx	lr
 80178f2:	b2b6      	uxth	r6, r6
 80178f4:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 80178f8:	2e00      	cmp	r6, #0
 80178fa:	d0eb      	beq.n	80178d4 <ai_platform_inputs_get+0xc0>
 80178fc:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017900:	6858      	ldr	r0, [r3, #4]
 8017902:	e7ef      	b.n	80178e4 <ai_platform_inputs_get+0xd0>
 8017904:	a1c00100 	.word	0xa1c00100

08017908 <ai_platform_outputs_get>:
 8017908:	4b39      	ldr	r3, [pc, #228]	@ (80179f0 <ai_platform_outputs_get+0xe8>)
 801790a:	6802      	ldr	r2, [r0, #0]
 801790c:	4393      	bics	r3, r2
 801790e:	d16d      	bne.n	80179ec <ai_platform_outputs_get+0xe4>
 8017910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017914:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 8017916:	b085      	sub	sp, #20
 8017918:	4605      	mov	r5, r0
 801791a:	460f      	mov	r7, r1
 801791c:	2b01      	cmp	r3, #1
 801791e:	d94f      	bls.n	80179c0 <ai_platform_outputs_get+0xb8>
 8017920:	f04f 0a00 	mov.w	sl, #0
 8017924:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 8017928:	4656      	mov	r6, sl
 801792a:	46d1      	mov	r9, sl
 801792c:	46da      	mov	sl, fp
 801792e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8017932:	e016      	b.n	8017962 <ai_platform_outputs_get+0x5a>
 8017934:	9a01      	ldr	r2, [sp, #4]
 8017936:	2301      	movs	r3, #1
 8017938:	f84b 3002 	str.w	r3, [fp, r2]
 801793c:	69aa      	ldr	r2, [r5, #24]
 801793e:	f04f 0301 	mov.w	r3, #1
 8017942:	6855      	ldr	r5, [r2, #4]
 8017944:	6020      	str	r0, [r4, #0]
 8017946:	3601      	adds	r6, #1
 8017948:	7523      	strb	r3, [r4, #20]
 801794a:	f109 091c 	add.w	r9, r9, #28
 801794e:	6960      	ldr	r0, [r4, #20]
 8017950:	2300      	movs	r3, #0
 8017952:	f368 201f 	bfi	r0, r8, #8, #24
 8017956:	e9c4 c701 	strd	ip, r7, [r4, #4]
 801795a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 801795e:	e9c4 0105 	strd	r0, r1, [r4, #20]
 8017962:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8017966:	00f2      	lsls	r2, r6, #3
 8017968:	42b3      	cmp	r3, r6
 801796a:	9201      	str	r2, [sp, #4]
 801796c:	d935      	bls.n	80179da <ai_platform_outputs_get+0xd2>
 801796e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8017972:	2b00      	cmp	r3, #0
 8017974:	d031      	beq.n	80179da <ai_platform_outputs_get+0xd2>
 8017976:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 801797a:	b375      	cbz	r5, 80179da <ai_platform_outputs_get+0xd2>
 801797c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8017980:	69a8      	ldr	r0, [r5, #24]
 8017982:	68e9      	ldr	r1, [r5, #12]
 8017984:	6800      	ldr	r0, [r0, #0]
 8017986:	9100      	str	r1, [sp, #0]
 8017988:	e9d3 4b01 	ldrd	r4, fp, [r3, #4]
 801798c:	68ab      	ldr	r3, [r5, #8]
 801798e:	eb0b 07c6 	add.w	r7, fp, r6, lsl #3
 8017992:	444c      	add	r4, r9
 8017994:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8017998:	f003 f810 	bl	801a9bc <ai_array_to_buffer_fmt>
 801799c:	69aa      	ldr	r2, [r5, #24]
 801799e:	9900      	ldr	r1, [sp, #0]
 80179a0:	f8d2 c008 	ldr.w	ip, [r2, #8]
 80179a4:	2f00      	cmp	r7, #0
 80179a6:	d0ca      	beq.n	801793e <ai_platform_outputs_get+0x36>
 80179a8:	2200      	movs	r2, #0
 80179aa:	f84b 2036 	str.w	r2, [fp, r6, lsl #3]
 80179ae:	682a      	ldr	r2, [r5, #0]
 80179b0:	607a      	str	r2, [r7, #4]
 80179b2:	b112      	cbz	r2, 80179ba <ai_platform_outputs_get+0xb2>
 80179b4:	8852      	ldrh	r2, [r2, #2]
 80179b6:	2a00      	cmp	r2, #0
 80179b8:	d1bc      	bne.n	8017934 <ai_platform_outputs_get+0x2c>
 80179ba:	69aa      	ldr	r2, [r5, #24]
 80179bc:	2700      	movs	r7, #0
 80179be:	e7be      	b.n	801793e <ai_platform_outputs_get+0x36>
 80179c0:	2600      	movs	r6, #0
 80179c2:	2218      	movs	r2, #24
 80179c4:	2111      	movs	r1, #17
 80179c6:	f105 000c 	add.w	r0, r5, #12
 80179ca:	f000 fb51 	bl	8018070 <core_set_error>
 80179ce:	4630      	mov	r0, r6
 80179d0:	b107      	cbz	r7, 80179d4 <ai_platform_outputs_get+0xcc>
 80179d2:	803e      	strh	r6, [r7, #0]
 80179d4:	b005      	add	sp, #20
 80179d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80179da:	b2b6      	uxth	r6, r6
 80179dc:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 80179e0:	2e00      	cmp	r6, #0
 80179e2:	d0ed      	beq.n	80179c0 <ai_platform_outputs_get+0xb8>
 80179e4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80179e8:	6858      	ldr	r0, [r3, #4]
 80179ea:	e7f1      	b.n	80179d0 <ai_platform_outputs_get+0xc8>
 80179ec:	2000      	movs	r0, #0
 80179ee:	4770      	bx	lr
 80179f0:	a1c00100 	.word	0xa1c00100

080179f4 <ai_platform_network_create>:
 80179f4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80179f8:	b083      	sub	sp, #12
 80179fa:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80179fe:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 8017a02:	b320      	cbz	r0, 8017a4e <ai_platform_network_create+0x5a>
 8017a04:	6002      	str	r2, [r0, #0]
 8017a06:	4616      	mov	r6, r2
 8017a08:	461f      	mov	r7, r3
 8017a0a:	4604      	mov	r4, r0
 8017a0c:	f000 fb28 	bl	8018060 <core_init>
 8017a10:	b970      	cbnz	r0, 8017a30 <ai_platform_network_create+0x3c>
 8017a12:	2530      	movs	r5, #48	@ 0x30
 8017a14:	2300      	movs	r3, #0
 8017a16:	6023      	str	r3, [r4, #0]
 8017a18:	2410      	movs	r4, #16
 8017a1a:	464a      	mov	r2, r9
 8017a1c:	4641      	mov	r1, r8
 8017a1e:	4638      	mov	r0, r7
 8017a20:	f003 f86e 	bl	801ab00 <ai_version_get>
 8017a24:	60b0      	str	r0, [r6, #8]
 8017a26:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8017a2a:	b003      	add	sp, #12
 8017a2c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a30:	2200      	movs	r2, #0
 8017a32:	4641      	mov	r1, r8
 8017a34:	4638      	mov	r0, r7
 8017a36:	f003 f863 	bl	801ab00 <ai_version_get>
 8017a3a:	4605      	mov	r5, r0
 8017a3c:	2200      	movs	r2, #0
 8017a3e:	2105      	movs	r1, #5
 8017a40:	2001      	movs	r0, #1
 8017a42:	f003 f85d 	bl	801ab00 <ai_version_get>
 8017a46:	4285      	cmp	r5, r0
 8017a48:	d008      	beq.n	8017a5c <ai_platform_network_create+0x68>
 8017a4a:	2501      	movs	r5, #1
 8017a4c:	e7e2      	b.n	8017a14 <ai_platform_network_create+0x20>
 8017a4e:	2510      	movs	r5, #16
 8017a50:	462c      	mov	r4, r5
 8017a52:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8017a56:	b003      	add	sp, #12
 8017a58:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8017a5c:	4b05      	ldr	r3, [pc, #20]	@ (8017a74 <ai_platform_network_create+0x80>)
 8017a5e:	a801      	add	r0, sp, #4
 8017a60:	9301      	str	r3, [sp, #4]
 8017a62:	f000 fb11 	bl	8018088 <ai_check_custom_types>
 8017a66:	b110      	cbz	r0, 8017a6e <ai_platform_network_create+0x7a>
 8017a68:	2400      	movs	r4, #0
 8017a6a:	4625      	mov	r5, r4
 8017a6c:	e7d5      	b.n	8017a1a <ai_platform_network_create+0x26>
 8017a6e:	2502      	movs	r5, #2
 8017a70:	e7d0      	b.n	8017a14 <ai_platform_network_create+0x20>
 8017a72:	bf00      	nop
 8017a74:	84048403 	.word	0x84048403

08017a78 <ai_platform_network_init>:
 8017a78:	4a4e      	ldr	r2, [pc, #312]	@ (8017bb4 <ai_platform_network_init+0x13c>)
 8017a7a:	460b      	mov	r3, r1
 8017a7c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017a80:	6801      	ldr	r1, [r0, #0]
 8017a82:	ea01 0802 	and.w	r8, r1, r2
 8017a86:	438a      	bics	r2, r1
 8017a88:	d13b      	bne.n	8017b02 <ai_platform_network_init+0x8a>
 8017a8a:	4604      	mov	r4, r0
 8017a8c:	2b00      	cmp	r3, #0
 8017a8e:	d05b      	beq.n	8017b48 <ai_platform_network_init+0xd0>
 8017a90:	4a49      	ldr	r2, [pc, #292]	@ (8017bb8 <ai_platform_network_init+0x140>)
 8017a92:	6818      	ldr	r0, [r3, #0]
 8017a94:	4290      	cmp	r0, r2
 8017a96:	d10a      	bne.n	8017aae <ai_platform_network_init+0x36>
 8017a98:	4541      	cmp	r1, r8
 8017a9a:	e9d3 7203 	ldrd	r7, r2, [r3, #12]
 8017a9e:	e9d3 0301 	ldrd	r0, r3, [r3, #4]
 8017aa2:	d042      	beq.n	8017b2a <ai_platform_network_init+0xb2>
 8017aa4:	2303      	movs	r3, #3
 8017aa6:	4620      	mov	r0, r4
 8017aa8:	6123      	str	r3, [r4, #16]
 8017aaa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017aae:	461d      	mov	r5, r3
 8017ab0:	2101      	movs	r1, #1
 8017ab2:	4618      	mov	r0, r3
 8017ab4:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8017ab8:	f105 061c 	add.w	r6, r5, #28
 8017abc:	f7ff fd84 	bl	80175c8 <ai_buffer_get_size>
 8017ac0:	4607      	mov	r7, r0
 8017ac2:	2101      	movs	r1, #1
 8017ac4:	4630      	mov	r0, r6
 8017ac6:	f8d5 a020 	ldr.w	sl, [r5, #32]
 8017aca:	f7ff fd7d 	bl	80175c8 <ai_buffer_get_size>
 8017ace:	b1d7      	cbz	r7, 8017b06 <ai_platform_network_init+0x8e>
 8017ad0:	b340      	cbz	r0, 8017b24 <ai_platform_network_init+0xac>
 8017ad2:	f1ba 0f00 	cmp.w	sl, #0
 8017ad6:	d030      	beq.n	8017b3a <ai_platform_network_init+0xc2>
 8017ad8:	f04f 0e01 	mov.w	lr, #1
 8017adc:	f1b9 0f00 	cmp.w	r9, #0
 8017ae0:	d038      	beq.n	8017b54 <ai_platform_network_init+0xdc>
 8017ae2:	2001      	movs	r0, #1
 8017ae4:	4b33      	ldr	r3, [pc, #204]	@ (8017bb4 <ai_platform_network_init+0x13c>)
 8017ae6:	ea4f 470e 	mov.w	r7, lr, lsl #16
 8017aea:	6822      	ldr	r2, [r4, #0]
 8017aec:	429a      	cmp	r2, r3
 8017aee:	d1d9      	bne.n	8017aa4 <ai_platform_network_init+0x2c>
 8017af0:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 8017af2:	4283      	cmp	r3, r0
 8017af4:	d235      	bcs.n	8017b62 <ai_platform_network_init+0xea>
 8017af6:	2212      	movs	r2, #18
 8017af8:	2116      	movs	r1, #22
 8017afa:	f104 000c 	add.w	r0, r4, #12
 8017afe:	f000 fab7 	bl	8018070 <core_set_error>
 8017b02:	2000      	movs	r0, #0
 8017b04:	e7d1      	b.n	8017aaa <ai_platform_network_init+0x32>
 8017b06:	b138      	cbz	r0, 8017b18 <ai_platform_network_init+0xa0>
 8017b08:	f1ba 0f00 	cmp.w	sl, #0
 8017b0c:	d015      	beq.n	8017b3a <ai_platform_network_init+0xc2>
 8017b0e:	4638      	mov	r0, r7
 8017b10:	f04f 0e01 	mov.w	lr, #1
 8017b14:	463d      	mov	r5, r7
 8017b16:	e7e5      	b.n	8017ae4 <ai_platform_network_init+0x6c>
 8017b18:	6823      	ldr	r3, [r4, #0]
 8017b1a:	4543      	cmp	r3, r8
 8017b1c:	d1c2      	bne.n	8017aa4 <ai_platform_network_init+0x2c>
 8017b1e:	4607      	mov	r7, r0
 8017b20:	6220      	str	r0, [r4, #32]
 8017b22:	e005      	b.n	8017b30 <ai_platform_network_init+0xb8>
 8017b24:	4606      	mov	r6, r0
 8017b26:	4686      	mov	lr, r0
 8017b28:	e7d8      	b.n	8017adc <ai_platform_network_init+0x64>
 8017b2a:	e9c4 0308 	strd	r0, r3, [r4, #32]
 8017b2e:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8017b30:	4620      	mov	r0, r4
 8017b32:	62a7      	str	r7, [r4, #40]	@ 0x28
 8017b34:	f000 fad0 	bl	80180d8 <ai_layers_init_all>
 8017b38:	e7b4      	b.n	8017aa4 <ai_platform_network_init+0x2c>
 8017b3a:	2213      	movs	r2, #19
 8017b3c:	2110      	movs	r1, #16
 8017b3e:	f104 000c 	add.w	r0, r4, #12
 8017b42:	f000 fa95 	bl	8018070 <core_set_error>
 8017b46:	e7dc      	b.n	8017b02 <ai_platform_network_init+0x8a>
 8017b48:	2211      	movs	r2, #17
 8017b4a:	2110      	movs	r1, #16
 8017b4c:	300c      	adds	r0, #12
 8017b4e:	f000 fa8f 	bl	8018070 <core_set_error>
 8017b52:	e7d6      	b.n	8017b02 <ai_platform_network_init+0x8a>
 8017b54:	2212      	movs	r2, #18
 8017b56:	2110      	movs	r1, #16
 8017b58:	f104 000c 	add.w	r0, r4, #12
 8017b5c:	f000 fa88 	bl	8018070 <core_set_error>
 8017b60:	e7cf      	b.n	8017b02 <ai_platform_network_init+0x8a>
 8017b62:	b1e0      	cbz	r0, 8017b9e <ai_platform_network_init+0x126>
 8017b64:	46ac      	mov	ip, r5
 8017b66:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8017b68:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8017b6c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017b72:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017b76:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017b7a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8017b7c:	f8c4 8020 	str.w	r8, [r4, #32]
 8017b80:	4573      	cmp	r3, lr
 8017b82:	d310      	bcc.n	8017ba6 <ai_platform_network_init+0x12e>
 8017b84:	f1be 0f00 	cmp.w	lr, #0
 8017b88:	d0d2      	beq.n	8017b30 <ai_platform_network_init+0xb8>
 8017b8a:	46b4      	mov	ip, r6
 8017b8c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 8017b8e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8017b92:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8017b94:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8017b98:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 8017b9c:	e7c8      	b.n	8017b30 <ai_platform_network_init+0xb8>
 8017b9e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8017ba0:	6220      	str	r0, [r4, #32]
 8017ba2:	4573      	cmp	r3, lr
 8017ba4:	d2ee      	bcs.n	8017b84 <ai_platform_network_init+0x10c>
 8017ba6:	2213      	movs	r2, #19
 8017ba8:	2116      	movs	r1, #22
 8017baa:	f104 000c 	add.w	r0, r4, #12
 8017bae:	f000 fa5f 	bl	8018070 <core_set_error>
 8017bb2:	e7a6      	b.n	8017b02 <ai_platform_network_init+0x8a>
 8017bb4:	a1c00100 	.word	0xa1c00100
 8017bb8:	a1facade 	.word	0xa1facade

08017bbc <ai_platform_network_post_init>:
 8017bbc:	b538      	push	{r3, r4, r5, lr}
 8017bbe:	4b14      	ldr	r3, [pc, #80]	@ (8017c10 <ai_platform_network_post_init+0x54>)
 8017bc0:	6802      	ldr	r2, [r0, #0]
 8017bc2:	ea02 0103 	and.w	r1, r2, r3
 8017bc6:	4393      	bics	r3, r2
 8017bc8:	d10c      	bne.n	8017be4 <ai_platform_network_post_init+0x28>
 8017bca:	6903      	ldr	r3, [r0, #16]
 8017bcc:	4604      	mov	r4, r0
 8017bce:	079b      	lsls	r3, r3, #30
 8017bd0:	d503      	bpl.n	8017bda <ai_platform_network_post_init+0x1e>
 8017bd2:	428a      	cmp	r2, r1
 8017bd4:	d008      	beq.n	8017be8 <ai_platform_network_post_init+0x2c>
 8017bd6:	2001      	movs	r0, #1
 8017bd8:	bd38      	pop	{r3, r4, r5, pc}
 8017bda:	2210      	movs	r2, #16
 8017bdc:	2111      	movs	r1, #17
 8017bde:	300c      	adds	r0, #12
 8017be0:	f000 fa46 	bl	8018070 <core_set_error>
 8017be4:	2000      	movs	r0, #0
 8017be6:	bd38      	pop	{r3, r4, r5, pc}
 8017be8:	f000 fa86 	bl	80180f8 <ai_layers_post_init_all>
 8017bec:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017bee:	2b00      	cmp	r3, #0
 8017bf0:	d0f1      	beq.n	8017bd6 <ai_platform_network_post_init+0x1a>
 8017bf2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 8017bf4:	2d00      	cmp	r5, #0
 8017bf6:	d0ee      	beq.n	8017bd6 <ai_platform_network_post_init+0x1a>
 8017bf8:	4629      	mov	r1, r5
 8017bfa:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8017bfc:	2000      	movs	r0, #0
 8017bfe:	4798      	blx	r3
 8017c00:	692b      	ldr	r3, [r5, #16]
 8017c02:	42ab      	cmp	r3, r5
 8017c04:	461d      	mov	r5, r3
 8017c06:	d0e6      	beq.n	8017bd6 <ai_platform_network_post_init+0x1a>
 8017c08:	2b00      	cmp	r3, #0
 8017c0a:	d0e4      	beq.n	8017bd6 <ai_platform_network_post_init+0x1a>
 8017c0c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8017c0e:	e7f3      	b.n	8017bf8 <ai_platform_network_post_init+0x3c>
 8017c10:	a1c00100 	.word	0xa1c00100

08017c14 <ai_platform_network_process>:
 8017c14:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017c18:	4bba      	ldr	r3, [pc, #744]	@ (8017f04 <ai_platform_network_process+0x2f0>)
 8017c1a:	4691      	mov	r9, r2
 8017c1c:	6802      	ldr	r2, [r0, #0]
 8017c1e:	b085      	sub	sp, #20
 8017c20:	4393      	bics	r3, r2
 8017c22:	f040 812f 	bne.w	8017e84 <ai_platform_network_process+0x270>
 8017c26:	6903      	ldr	r3, [r0, #16]
 8017c28:	4604      	mov	r4, r0
 8017c2a:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 8017c2c:	f003 0303 	and.w	r3, r3, #3
 8017c30:	2a00      	cmp	r2, #0
 8017c32:	f000 811e 	beq.w	8017e72 <ai_platform_network_process+0x25e>
 8017c36:	2200      	movs	r2, #0
 8017c38:	2b03      	cmp	r3, #3
 8017c3a:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 8017c3e:	6182      	str	r2, [r0, #24]
 8017c40:	f040 811a 	bne.w	8017e78 <ai_platform_network_process+0x264>
 8017c44:	2900      	cmp	r1, #0
 8017c46:	f000 8128 	beq.w	8017e9a <ai_platform_network_process+0x286>
 8017c4a:	faba f78a 	clz	r7, sl
 8017c4e:	097f      	lsrs	r7, r7, #5
 8017c50:	f1ba 0f00 	cmp.w	sl, #0
 8017c54:	f000 8121 	beq.w	8017e9a <ai_platform_network_process+0x286>
 8017c58:	f8ba 3000 	ldrh.w	r3, [sl]
 8017c5c:	2b00      	cmp	r3, #0
 8017c5e:	f000 811c 	beq.w	8017e9a <ai_platform_network_process+0x286>
 8017c62:	698b      	ldr	r3, [r1, #24]
 8017c64:	460d      	mov	r5, r1
 8017c66:	f8cd 900c 	str.w	r9, [sp, #12]
 8017c6a:	681b      	ldr	r3, [r3, #0]
 8017c6c:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8017c70:	f8da 3004 	ldr.w	r3, [sl, #4]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d072      	beq.n	8017d5e <ai_platform_network_process+0x14a>
 8017c78:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 8017c7c:	2e00      	cmp	r6, #0
 8017c7e:	d06e      	beq.n	8017d5e <ai_platform_network_process+0x14a>
 8017c80:	f8da 3008 	ldr.w	r3, [sl, #8]
 8017c84:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8017c88:	f8d3 b000 	ldr.w	fp, [r3]
 8017c8c:	eb1b 1807 	adds.w	r8, fp, r7, lsl #4
 8017c90:	f000 8102 	beq.w	8017e98 <ai_platform_network_process+0x284>
 8017c94:	69b3      	ldr	r3, [r6, #24]
 8017c96:	2101      	movs	r1, #1
 8017c98:	4628      	mov	r0, r5
 8017c9a:	685c      	ldr	r4, [r3, #4]
 8017c9c:	f7ff fc94 	bl	80175c8 <ai_buffer_get_size>
 8017ca0:	4284      	cmp	r4, r0
 8017ca2:	f0c0 8101 	bcc.w	8017ea8 <ai_platform_network_process+0x294>
 8017ca6:	68f0      	ldr	r0, [r6, #12]
 8017ca8:	69a9      	ldr	r1, [r5, #24]
 8017caa:	68c2      	ldr	r2, [r0, #12]
 8017cac:	68cb      	ldr	r3, [r1, #12]
 8017cae:	429a      	cmp	r2, r3
 8017cb0:	f040 80fa 	bne.w	8017ea8 <ai_platform_network_process+0x294>
 8017cb4:	6882      	ldr	r2, [r0, #8]
 8017cb6:	688b      	ldr	r3, [r1, #8]
 8017cb8:	429a      	cmp	r2, r3
 8017cba:	f040 80f5 	bne.w	8017ea8 <ai_platform_network_process+0x294>
 8017cbe:	6842      	ldr	r2, [r0, #4]
 8017cc0:	684b      	ldr	r3, [r1, #4]
 8017cc2:	429a      	cmp	r2, r3
 8017cc4:	f040 80f0 	bne.w	8017ea8 <ai_platform_network_process+0x294>
 8017cc8:	69b3      	ldr	r3, [r6, #24]
 8017cca:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017cce:	f002 ff07 	bl	801aae0 <ai_array_get_data_byte_size>
 8017cd2:	4604      	mov	r4, r0
 8017cd4:	4630      	mov	r0, r6
 8017cd6:	f002 ff19 	bl	801ab0c <get_tensor_byte_size>
 8017cda:	4284      	cmp	r4, r0
 8017cdc:	f0c0 80e4 	bcc.w	8017ea8 <ai_platform_network_process+0x294>
 8017ce0:	69b3      	ldr	r3, [r6, #24]
 8017ce2:	6818      	ldr	r0, [r3, #0]
 8017ce4:	f002 fe6a 	bl	801a9bc <ai_array_to_buffer_fmt>
 8017ce8:	682b      	ldr	r3, [r5, #0]
 8017cea:	4058      	eors	r0, r3
 8017cec:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 8017cf0:	f040 8192 	bne.w	8018018 <ai_platform_network_process+0x404>
 8017cf4:	686b      	ldr	r3, [r5, #4]
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	f000 80ce 	beq.w	8017e98 <ai_platform_network_process+0x284>
 8017cfc:	69ab      	ldr	r3, [r5, #24]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	2b00      	cmp	r3, #0
 8017d02:	f000 8181 	beq.w	8018008 <ai_platform_network_process+0x3f4>
 8017d06:	9a01      	ldr	r2, [sp, #4]
 8017d08:	4630      	mov	r0, r6
 8017d0a:	3701      	adds	r7, #1
 8017d0c:	351c      	adds	r5, #28
 8017d0e:	429a      	cmp	r2, r3
 8017d10:	bf38      	it	cc
 8017d12:	461a      	movcc	r2, r3
 8017d14:	9201      	str	r2, [sp, #4]
 8017d16:	f002 fef9 	bl	801ab0c <get_tensor_byte_size>
 8017d1a:	f8c8 0008 	str.w	r0, [r8, #8]
 8017d1e:	f855 3c04 	ldr.w	r3, [r5, #-4]
 8017d22:	681b      	ldr	r3, [r3, #0]
 8017d24:	fb00 f303 	mul.w	r3, r0, r3
 8017d28:	f8c8 300c 	str.w	r3, [r8, #12]
 8017d2c:	f855 1c18 	ldr.w	r1, [r5, #-24]
 8017d30:	440b      	add	r3, r1
 8017d32:	f8c8 1004 	str.w	r1, [r8, #4]
 8017d36:	f84b 3009 	str.w	r3, [fp, r9]
 8017d3a:	69b0      	ldr	r0, [r6, #24]
 8017d3c:	6803      	ldr	r3, [r0, #0]
 8017d3e:	009a      	lsls	r2, r3, #2
 8017d40:	f100 80a4 	bmi.w	8017e8c <ai_platform_network_process+0x278>
 8017d44:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8017d48:	1a9b      	subs	r3, r3, r2
 8017d4a:	4419      	add	r1, r3
 8017d4c:	6081      	str	r1, [r0, #8]
 8017d4e:	69b3      	ldr	r3, [r6, #24]
 8017d50:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017d54:	60da      	str	r2, [r3, #12]
 8017d56:	f8ba 3000 	ldrh.w	r3, [sl]
 8017d5a:	42bb      	cmp	r3, r7
 8017d5c:	d888      	bhi.n	8017c70 <ai_platform_network_process+0x5c>
 8017d5e:	e9dd 4902 	ldrd	r4, r9, [sp, #8]
 8017d62:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8017d64:	f1b9 0f00 	cmp.w	r9, #0
 8017d68:	f000 815e 	beq.w	8018028 <ai_platform_network_process+0x414>
 8017d6c:	2a01      	cmp	r2, #1
 8017d6e:	f240 80a4 	bls.w	8017eba <ai_platform_network_process+0x2a6>
 8017d72:	f8d4 8034 	ldr.w	r8, [r4, #52]	@ 0x34
 8017d76:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f000 809d 	beq.w	8017eba <ai_platform_network_process+0x2a6>
 8017d80:	464e      	mov	r6, r9
 8017d82:	2700      	movs	r7, #0
 8017d84:	9402      	str	r4, [sp, #8]
 8017d86:	f8d8 3010 	ldr.w	r3, [r8, #16]
 8017d8a:	2b00      	cmp	r3, #0
 8017d8c:	f000 80a1 	beq.w	8017ed2 <ai_platform_network_process+0x2be>
 8017d90:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8017d94:	2d00      	cmp	r5, #0
 8017d96:	f000 809c 	beq.w	8017ed2 <ai_platform_network_process+0x2be>
 8017d9a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 8017d9e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8017da2:	f8d3 9000 	ldr.w	r9, [r3]
 8017da6:	eb19 1a07 	adds.w	sl, r9, r7, lsl #4
 8017daa:	f000 8150 	beq.w	801804e <ai_platform_network_process+0x43a>
 8017dae:	69ab      	ldr	r3, [r5, #24]
 8017db0:	2101      	movs	r1, #1
 8017db2:	4630      	mov	r0, r6
 8017db4:	685c      	ldr	r4, [r3, #4]
 8017db6:	f7ff fc07 	bl	80175c8 <ai_buffer_get_size>
 8017dba:	4284      	cmp	r4, r0
 8017dbc:	d37c      	bcc.n	8017eb8 <ai_platform_network_process+0x2a4>
 8017dbe:	68e8      	ldr	r0, [r5, #12]
 8017dc0:	69b1      	ldr	r1, [r6, #24]
 8017dc2:	68c2      	ldr	r2, [r0, #12]
 8017dc4:	68cb      	ldr	r3, [r1, #12]
 8017dc6:	429a      	cmp	r2, r3
 8017dc8:	d176      	bne.n	8017eb8 <ai_platform_network_process+0x2a4>
 8017dca:	6882      	ldr	r2, [r0, #8]
 8017dcc:	688b      	ldr	r3, [r1, #8]
 8017dce:	429a      	cmp	r2, r3
 8017dd0:	d172      	bne.n	8017eb8 <ai_platform_network_process+0x2a4>
 8017dd2:	6842      	ldr	r2, [r0, #4]
 8017dd4:	684b      	ldr	r3, [r1, #4]
 8017dd6:	429a      	cmp	r2, r3
 8017dd8:	d16e      	bne.n	8017eb8 <ai_platform_network_process+0x2a4>
 8017dda:	69ab      	ldr	r3, [r5, #24]
 8017ddc:	e9d3 0100 	ldrd	r0, r1, [r3]
 8017de0:	f002 fe7e 	bl	801aae0 <ai_array_get_data_byte_size>
 8017de4:	9003      	str	r0, [sp, #12]
 8017de6:	4628      	mov	r0, r5
 8017de8:	f002 fe90 	bl	801ab0c <get_tensor_byte_size>
 8017dec:	9b03      	ldr	r3, [sp, #12]
 8017dee:	4283      	cmp	r3, r0
 8017df0:	d362      	bcc.n	8017eb8 <ai_platform_network_process+0x2a4>
 8017df2:	69ab      	ldr	r3, [r5, #24]
 8017df4:	6818      	ldr	r0, [r3, #0]
 8017df6:	f002 fde1 	bl	801a9bc <ai_array_to_buffer_fmt>
 8017dfa:	6833      	ldr	r3, [r6, #0]
 8017dfc:	4043      	eors	r3, r0
 8017dfe:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 8017e02:	f040 8114 	bne.w	801802e <ai_platform_network_process+0x41a>
 8017e06:	6873      	ldr	r3, [r6, #4]
 8017e08:	2b00      	cmp	r3, #0
 8017e0a:	f000 8120 	beq.w	801804e <ai_platform_network_process+0x43a>
 8017e0e:	69b3      	ldr	r3, [r6, #24]
 8017e10:	681b      	ldr	r3, [r3, #0]
 8017e12:	2b00      	cmp	r3, #0
 8017e14:	f000 8113 	beq.w	801803e <ai_platform_network_process+0x42a>
 8017e18:	9a01      	ldr	r2, [sp, #4]
 8017e1a:	4628      	mov	r0, r5
 8017e1c:	3701      	adds	r7, #1
 8017e1e:	361c      	adds	r6, #28
 8017e20:	429a      	cmp	r2, r3
 8017e22:	bf38      	it	cc
 8017e24:	461a      	movcc	r2, r3
 8017e26:	9201      	str	r2, [sp, #4]
 8017e28:	f002 fe70 	bl	801ab0c <get_tensor_byte_size>
 8017e2c:	f8ca 0008 	str.w	r0, [sl, #8]
 8017e30:	4603      	mov	r3, r0
 8017e32:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8017e36:	6812      	ldr	r2, [r2, #0]
 8017e38:	fb02 f303 	mul.w	r3, r2, r3
 8017e3c:	f8ca 300c 	str.w	r3, [sl, #12]
 8017e40:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8017e44:	440b      	add	r3, r1
 8017e46:	f8ca 1004 	str.w	r1, [sl, #4]
 8017e4a:	f849 300b 	str.w	r3, [r9, fp]
 8017e4e:	69a8      	ldr	r0, [r5, #24]
 8017e50:	6803      	ldr	r3, [r0, #0]
 8017e52:	009b      	lsls	r3, r3, #2
 8017e54:	d438      	bmi.n	8017ec8 <ai_platform_network_process+0x2b4>
 8017e56:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8017e5a:	1a9b      	subs	r3, r3, r2
 8017e5c:	4419      	add	r1, r3
 8017e5e:	6081      	str	r1, [r0, #8]
 8017e60:	69ab      	ldr	r3, [r5, #24]
 8017e62:	f8da 2004 	ldr.w	r2, [sl, #4]
 8017e66:	60da      	str	r2, [r3, #12]
 8017e68:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8017e6c:	429f      	cmp	r7, r3
 8017e6e:	d38a      	bcc.n	8017d86 <ai_platform_network_process+0x172>
 8017e70:	e02f      	b.n	8017ed2 <ai_platform_network_process+0x2be>
 8017e72:	2b03      	cmp	r3, #3
 8017e74:	6182      	str	r2, [r0, #24]
 8017e76:	d010      	beq.n	8017e9a <ai_platform_network_process+0x286>
 8017e78:	2230      	movs	r2, #48	@ 0x30
 8017e7a:	2111      	movs	r1, #17
 8017e7c:	f104 000c 	add.w	r0, r4, #12
 8017e80:	f000 f8f6 	bl	8018070 <core_set_error>
 8017e84:	2000      	movs	r0, #0
 8017e86:	b005      	add	sp, #20
 8017e88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017e8c:	f8ba 3000 	ldrh.w	r3, [sl]
 8017e90:	429f      	cmp	r7, r3
 8017e92:	f4ff aeed 	bcc.w	8017c70 <ai_platform_network_process+0x5c>
 8017e96:	e762      	b.n	8017d5e <ai_platform_network_process+0x14a>
 8017e98:	9c02      	ldr	r4, [sp, #8]
 8017e9a:	2217      	movs	r2, #23
 8017e9c:	2112      	movs	r1, #18
 8017e9e:	f104 000c 	add.w	r0, r4, #12
 8017ea2:	f000 f8e5 	bl	8018070 <core_set_error>
 8017ea6:	e7ed      	b.n	8017e84 <ai_platform_network_process+0x270>
 8017ea8:	9c02      	ldr	r4, [sp, #8]
 8017eaa:	2218      	movs	r2, #24
 8017eac:	2112      	movs	r1, #18
 8017eae:	f104 000c 	add.w	r0, r4, #12
 8017eb2:	f000 f8dd 	bl	8018070 <core_set_error>
 8017eb6:	e7e5      	b.n	8017e84 <ai_platform_network_process+0x270>
 8017eb8:	9c02      	ldr	r4, [sp, #8]
 8017eba:	2218      	movs	r2, #24
 8017ebc:	2113      	movs	r1, #19
 8017ebe:	f104 000c 	add.w	r0, r4, #12
 8017ec2:	f000 f8d5 	bl	8018070 <core_set_error>
 8017ec6:	e7dd      	b.n	8017e84 <ai_platform_network_process+0x270>
 8017ec8:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 8017ecc:	429f      	cmp	r7, r3
 8017ece:	f4ff af5a 	bcc.w	8017d86 <ai_platform_network_process+0x172>
 8017ed2:	9c02      	ldr	r4, [sp, #8]
 8017ed4:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8017ed8:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8017eda:	8323      	strh	r3, [r4, #24]
 8017edc:	2a00      	cmp	r2, #0
 8017ede:	f000 808d 	beq.w	8017ffc <ai_platform_network_process+0x3e8>
 8017ee2:	2a01      	cmp	r2, #1
 8017ee4:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 8017ee6:	f000 808c 	beq.w	8018002 <ai_platform_network_process+0x3ee>
 8017eea:	f107 080c 	add.w	r8, r7, #12
 8017eee:	8b60      	ldrh	r0, [r4, #26]
 8017ef0:	4283      	cmp	r3, r0
 8017ef2:	d9c8      	bls.n	8017e86 <ai_platform_network_process+0x272>
 8017ef4:	4646      	mov	r6, r8
 8017ef6:	46a3      	mov	fp, r4
 8017ef8:	2f00      	cmp	r7, #0
 8017efa:	d031      	beq.n	8017f60 <ai_platform_network_process+0x34c>
 8017efc:	f04f 0800 	mov.w	r8, #0
 8017f00:	e015      	b.n	8017f2e <ai_platform_network_process+0x31a>
 8017f02:	bf00      	nop
 8017f04:	a1c00100 	.word	0xa1c00100
 8017f08:	68dc      	ldr	r4, [r3, #12]
 8017f0a:	1b09      	subs	r1, r1, r4
 8017f0c:	4408      	add	r0, r1
 8017f0e:	6098      	str	r0, [r3, #8]
 8017f10:	6993      	ldr	r3, [r2, #24]
 8017f12:	686a      	ldr	r2, [r5, #4]
 8017f14:	60da      	str	r2, [r3, #12]
 8017f16:	f859 200a 	ldr.w	r2, [r9, sl]
 8017f1a:	f108 0801 	add.w	r8, r8, #1
 8017f1e:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 8017f22:	440b      	add	r3, r1
 8017f24:	4293      	cmp	r3, r2
 8017f26:	d301      	bcc.n	8017f2c <ai_platform_network_process+0x318>
 8017f28:	68eb      	ldr	r3, [r5, #12]
 8017f2a:	1ad3      	subs	r3, r2, r3
 8017f2c:	606b      	str	r3, [r5, #4]
 8017f2e:	883b      	ldrh	r3, [r7, #0]
 8017f30:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 8017f34:	4543      	cmp	r3, r8
 8017f36:	d913      	bls.n	8017f60 <ai_platform_network_process+0x34c>
 8017f38:	687b      	ldr	r3, [r7, #4]
 8017f3a:	b18b      	cbz	r3, 8017f60 <ai_platform_network_process+0x34c>
 8017f3c:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8017f40:	b172      	cbz	r2, 8017f60 <ai_platform_network_process+0x34c>
 8017f42:	68b9      	ldr	r1, [r7, #8]
 8017f44:	6993      	ldr	r3, [r2, #24]
 8017f46:	f8d1 9000 	ldr.w	r9, [r1]
 8017f4a:	681c      	ldr	r4, [r3, #0]
 8017f4c:	eb09 1508 	add.w	r5, r9, r8, lsl #4
 8017f50:	6899      	ldr	r1, [r3, #8]
 8017f52:	00a4      	lsls	r4, r4, #2
 8017f54:	6868      	ldr	r0, [r5, #4]
 8017f56:	d5d7      	bpl.n	8017f08 <ai_platform_network_process+0x2f4>
 8017f58:	68aa      	ldr	r2, [r5, #8]
 8017f5a:	f002 fc7d 	bl	801a858 <st_int8_copy>
 8017f5e:	e7da      	b.n	8017f16 <ai_platform_network_process+0x302>
 8017f60:	4658      	mov	r0, fp
 8017f62:	f000 f8e1 	bl	8018128 <ai_layers_forward_all>
 8017f66:	2e00      	cmp	r6, #0
 8017f68:	d03b      	beq.n	8017fe2 <ai_platform_network_process+0x3ce>
 8017f6a:	2500      	movs	r5, #0
 8017f6c:	e014      	b.n	8017f98 <ai_platform_network_process+0x384>
 8017f6e:	4411      	add	r1, r2
 8017f70:	f859 300a 	ldr.w	r3, [r9, sl]
 8017f74:	4299      	cmp	r1, r3
 8017f76:	d302      	bcc.n	8017f7e <ai_platform_network_process+0x36a>
 8017f78:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8017f7c:	1a59      	subs	r1, r3, r1
 8017f7e:	f8c8 1004 	str.w	r1, [r8, #4]
 8017f82:	6982      	ldr	r2, [r0, #24]
 8017f84:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8017f88:	1b1b      	subs	r3, r3, r4
 8017f8a:	4419      	add	r1, r3
 8017f8c:	6091      	str	r1, [r2, #8]
 8017f8e:	6983      	ldr	r3, [r0, #24]
 8017f90:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8017f94:	60da      	str	r2, [r3, #12]
 8017f96:	3501      	adds	r5, #1
 8017f98:	8833      	ldrh	r3, [r6, #0]
 8017f9a:	42ab      	cmp	r3, r5
 8017f9c:	d921      	bls.n	8017fe2 <ai_platform_network_process+0x3ce>
 8017f9e:	6873      	ldr	r3, [r6, #4]
 8017fa0:	b1fb      	cbz	r3, 8017fe2 <ai_platform_network_process+0x3ce>
 8017fa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8017fa6:	b1e0      	cbz	r0, 8017fe2 <ai_platform_network_process+0x3ce>
 8017fa8:	68b2      	ldr	r2, [r6, #8]
 8017faa:	ea4f 1a05 	mov.w	sl, r5, lsl #4
 8017fae:	6983      	ldr	r3, [r0, #24]
 8017fb0:	f8d2 9000 	ldr.w	r9, [r2]
 8017fb4:	681c      	ldr	r4, [r3, #0]
 8017fb6:	eb09 1805 	add.w	r8, r9, r5, lsl #4
 8017fba:	00a4      	lsls	r4, r4, #2
 8017fbc:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8017fc0:	d5d5      	bpl.n	8017f6e <ai_platform_network_process+0x35a>
 8017fc2:	6898      	ldr	r0, [r3, #8]
 8017fc4:	f002 fc48 	bl	801a858 <st_int8_copy>
 8017fc8:	f859 200a 	ldr.w	r2, [r9, sl]
 8017fcc:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8017fd0:	440b      	add	r3, r1
 8017fd2:	4293      	cmp	r3, r2
 8017fd4:	d302      	bcc.n	8017fdc <ai_platform_network_process+0x3c8>
 8017fd6:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8017fda:	1ad3      	subs	r3, r2, r3
 8017fdc:	f8c8 3004 	str.w	r3, [r8, #4]
 8017fe0:	e7d9      	b.n	8017f96 <ai_platform_network_process+0x382>
 8017fe2:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 8017fe6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 8017fea:	3001      	adds	r0, #1
 8017fec:	b280      	uxth	r0, r0
 8017fee:	4283      	cmp	r3, r0
 8017ff0:	f8ab 001a 	strh.w	r0, [fp, #26]
 8017ff4:	d880      	bhi.n	8017ef8 <ai_platform_network_process+0x2e4>
 8017ff6:	b005      	add	sp, #20
 8017ff8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017ffc:	4617      	mov	r7, r2
 8017ffe:	4690      	mov	r8, r2
 8018000:	e775      	b.n	8017eee <ai_platform_network_process+0x2da>
 8018002:	f04f 0800 	mov.w	r8, #0
 8018006:	e772      	b.n	8017eee <ai_platform_network_process+0x2da>
 8018008:	9c02      	ldr	r4, [sp, #8]
 801800a:	2221      	movs	r2, #33	@ 0x21
 801800c:	2112      	movs	r1, #18
 801800e:	f104 000c 	add.w	r0, r4, #12
 8018012:	f000 f82d 	bl	8018070 <core_set_error>
 8018016:	e735      	b.n	8017e84 <ai_platform_network_process+0x270>
 8018018:	9c02      	ldr	r4, [sp, #8]
 801801a:	2219      	movs	r2, #25
 801801c:	2112      	movs	r1, #18
 801801e:	f104 000c 	add.w	r0, r4, #12
 8018022:	f000 f825 	bl	8018070 <core_set_error>
 8018026:	e72d      	b.n	8017e84 <ai_platform_network_process+0x270>
 8018028:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 801802c:	e755      	b.n	8017eda <ai_platform_network_process+0x2c6>
 801802e:	9c02      	ldr	r4, [sp, #8]
 8018030:	2219      	movs	r2, #25
 8018032:	2113      	movs	r1, #19
 8018034:	f104 000c 	add.w	r0, r4, #12
 8018038:	f000 f81a 	bl	8018070 <core_set_error>
 801803c:	e722      	b.n	8017e84 <ai_platform_network_process+0x270>
 801803e:	9c02      	ldr	r4, [sp, #8]
 8018040:	2221      	movs	r2, #33	@ 0x21
 8018042:	2113      	movs	r1, #19
 8018044:	f104 000c 	add.w	r0, r4, #12
 8018048:	f000 f812 	bl	8018070 <core_set_error>
 801804c:	e71a      	b.n	8017e84 <ai_platform_network_process+0x270>
 801804e:	9c02      	ldr	r4, [sp, #8]
 8018050:	2217      	movs	r2, #23
 8018052:	2113      	movs	r1, #19
 8018054:	f104 000c 	add.w	r0, r4, #12
 8018058:	f000 f80a 	bl	8018070 <core_set_error>
 801805c:	e712      	b.n	8017e84 <ai_platform_network_process+0x270>
 801805e:	bf00      	nop

08018060 <core_init>:
 8018060:	2001      	movs	r0, #1
 8018062:	4770      	bx	lr

08018064 <core_get_error>:
 8018064:	4603      	mov	r3, r0
 8018066:	2200      	movs	r2, #0
 8018068:	6800      	ldr	r0, [r0, #0]
 801806a:	601a      	str	r2, [r3, #0]
 801806c:	4770      	bx	lr
 801806e:	bf00      	nop

08018070 <core_set_error>:
 8018070:	4603      	mov	r3, r0
 8018072:	7800      	ldrb	r0, [r0, #0]
 8018074:	b108      	cbz	r0, 801807a <core_set_error+0xa>
 8018076:	2000      	movs	r0, #0
 8018078:	4770      	bx	lr
 801807a:	7019      	strb	r1, [r3, #0]
 801807c:	2001      	movs	r0, #1
 801807e:	6819      	ldr	r1, [r3, #0]
 8018080:	f362 211f 	bfi	r1, r2, #8, #24
 8018084:	6019      	str	r1, [r3, #0]
 8018086:	4770      	bx	lr

08018088 <ai_check_custom_types>:
 8018088:	b082      	sub	sp, #8
 801808a:	4b12      	ldr	r3, [pc, #72]	@ (80180d4 <ai_check_custom_types+0x4c>)
 801808c:	9301      	str	r3, [sp, #4]
 801808e:	b118      	cbz	r0, 8018098 <ai_check_custom_types+0x10>
 8018090:	7803      	ldrb	r3, [r0, #0]
 8018092:	2b03      	cmp	r3, #3
 8018094:	d002      	beq.n	801809c <ai_check_custom_types+0x14>
 8018096:	2000      	movs	r0, #0
 8018098:	b002      	add	sp, #8
 801809a:	4770      	bx	lr
 801809c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 80180a0:	4293      	cmp	r3, r2
 80180a2:	d004      	beq.n	80180ae <ai_check_custom_types+0x26>
 80180a4:	2001      	movs	r0, #1
 80180a6:	f080 0001 	eor.w	r0, r0, #1
 80180aa:	b002      	add	sp, #8
 80180ac:	4770      	bx	lr
 80180ae:	7842      	ldrb	r2, [r0, #1]
 80180b0:	3001      	adds	r0, #1
 80180b2:	f89d 3005 	ldrb.w	r3, [sp, #5]
 80180b6:	429a      	cmp	r2, r3
 80180b8:	d1f4      	bne.n	80180a4 <ai_check_custom_types+0x1c>
 80180ba:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 80180be:	f89d 3006 	ldrb.w	r3, [sp, #6]
 80180c2:	429a      	cmp	r2, r3
 80180c4:	d1ee      	bne.n	80180a4 <ai_check_custom_types+0x1c>
 80180c6:	7842      	ldrb	r2, [r0, #1]
 80180c8:	f89d 3007 	ldrb.w	r3, [sp, #7]
 80180cc:	429a      	cmp	r2, r3
 80180ce:	d1e9      	bne.n	80180a4 <ai_check_custom_types+0x1c>
 80180d0:	2000      	movs	r0, #0
 80180d2:	e7e8      	b.n	80180a6 <ai_check_custom_types+0x1e>
 80180d4:	84048403 	.word	0x84048403

080180d8 <ai_layers_init_all>:
 80180d8:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 80180da:	4601      	mov	r1, r0
 80180dc:	b14b      	cbz	r3, 80180f2 <ai_layers_init_all+0x1a>
 80180de:	2000      	movs	r0, #0
 80180e0:	461a      	mov	r2, r3
 80180e2:	60d9      	str	r1, [r3, #12]
 80180e4:	691b      	ldr	r3, [r3, #16]
 80180e6:	3001      	adds	r0, #1
 80180e8:	4293      	cmp	r3, r2
 80180ea:	d003      	beq.n	80180f4 <ai_layers_init_all+0x1c>
 80180ec:	2b00      	cmp	r3, #0
 80180ee:	d1f7      	bne.n	80180e0 <ai_layers_init_all+0x8>
 80180f0:	4770      	bx	lr
 80180f2:	4618      	mov	r0, r3
 80180f4:	4770      	bx	lr
 80180f6:	bf00      	nop

080180f8 <ai_layers_post_init_all>:
 80180f8:	b538      	push	{r3, r4, r5, lr}
 80180fa:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80180fc:	b184      	cbz	r4, 8018120 <ai_layers_post_init_all+0x28>
 80180fe:	2500      	movs	r5, #0
 8018100:	6863      	ldr	r3, [r4, #4]
 8018102:	07db      	lsls	r3, r3, #31
 8018104:	d504      	bpl.n	8018110 <ai_layers_post_init_all+0x18>
 8018106:	6a23      	ldr	r3, [r4, #32]
 8018108:	4620      	mov	r0, r4
 801810a:	b10b      	cbz	r3, 8018110 <ai_layers_post_init_all+0x18>
 801810c:	3501      	adds	r5, #1
 801810e:	4798      	blx	r3
 8018110:	6923      	ldr	r3, [r4, #16]
 8018112:	42a3      	cmp	r3, r4
 8018114:	461c      	mov	r4, r3
 8018116:	d001      	beq.n	801811c <ai_layers_post_init_all+0x24>
 8018118:	2b00      	cmp	r3, #0
 801811a:	d1f1      	bne.n	8018100 <ai_layers_post_init_all+0x8>
 801811c:	4628      	mov	r0, r5
 801811e:	bd38      	pop	{r3, r4, r5, pc}
 8018120:	4625      	mov	r5, r4
 8018122:	4628      	mov	r0, r5
 8018124:	bd38      	pop	{r3, r4, r5, pc}
 8018126:	bf00      	nop

08018128 <ai_layers_forward_all>:
 8018128:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801812c:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 801812e:	4604      	mov	r4, r0
 8018130:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 8018134:	63c5      	str	r5, [r0, #60]	@ 0x3c
 8018136:	f1b8 0f00 	cmp.w	r8, #0
 801813a:	d029      	beq.n	8018190 <ai_layers_forward_all+0x68>
 801813c:	b325      	cbz	r5, 8018188 <ai_layers_forward_all+0x60>
 801813e:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8018140:	4629      	mov	r1, r5
 8018142:	2001      	movs	r0, #1
 8018144:	47c0      	blx	r8
 8018146:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8018148:	b1f6      	cbz	r6, 8018188 <ai_layers_forward_all+0x60>
 801814a:	2700      	movs	r7, #0
 801814c:	4631      	mov	r1, r6
 801814e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8018150:	2002      	movs	r0, #2
 8018152:	47c0      	blx	r8
 8018154:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8018156:	4628      	mov	r0, r5
 8018158:	696b      	ldr	r3, [r5, #20]
 801815a:	4798      	blx	r3
 801815c:	692e      	ldr	r6, [r5, #16]
 801815e:	2003      	movs	r0, #3
 8018160:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8018162:	42b5      	cmp	r5, r6
 8018164:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8018166:	d007      	beq.n	8018178 <ai_layers_forward_all+0x50>
 8018168:	47c0      	blx	r8
 801816a:	3701      	adds	r7, #1
 801816c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 801816e:	2e00      	cmp	r6, #0
 8018170:	d1ec      	bne.n	801814c <ai_layers_forward_all+0x24>
 8018172:	4638      	mov	r0, r7
 8018174:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018178:	2003      	movs	r0, #3
 801817a:	3701      	adds	r7, #1
 801817c:	47c0      	blx	r8
 801817e:	2300      	movs	r3, #0
 8018180:	4638      	mov	r0, r7
 8018182:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8018184:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018188:	2700      	movs	r7, #0
 801818a:	4638      	mov	r0, r7
 801818c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8018190:	2d00      	cmp	r5, #0
 8018192:	d0f9      	beq.n	8018188 <ai_layers_forward_all+0x60>
 8018194:	4647      	mov	r7, r8
 8018196:	696b      	ldr	r3, [r5, #20]
 8018198:	4628      	mov	r0, r5
 801819a:	4798      	blx	r3
 801819c:	462b      	mov	r3, r5
 801819e:	692d      	ldr	r5, [r5, #16]
 80181a0:	429d      	cmp	r5, r3
 80181a2:	d004      	beq.n	80181ae <ai_layers_forward_all+0x86>
 80181a4:	3701      	adds	r7, #1
 80181a6:	63e5      	str	r5, [r4, #60]	@ 0x3c
 80181a8:	2d00      	cmp	r5, #0
 80181aa:	d1f4      	bne.n	8018196 <ai_layers_forward_all+0x6e>
 80181ac:	e7e1      	b.n	8018172 <ai_layers_forward_all+0x4a>
 80181ae:	2300      	movs	r3, #0
 80181b0:	3701      	adds	r7, #1
 80181b2:	63e3      	str	r3, [r4, #60]	@ 0x3c
 80181b4:	e7dd      	b.n	8018172 <ai_layers_forward_all+0x4a>
 80181b6:	bf00      	nop

080181b8 <forward_conv2d_if32of32wf32>:
 80181b8:	6982      	ldr	r2, [r0, #24]
 80181ba:	8813      	ldrh	r3, [r2, #0]
 80181bc:	b90b      	cbnz	r3, 80181c2 <forward_conv2d_if32of32wf32+0xa>
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	deff      	udf	#255	@ 0xff
 80181c2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80181c6:	6857      	ldr	r7, [r2, #4]
 80181c8:	b0a3      	sub	sp, #140	@ 0x8c
 80181ca:	4686      	mov	lr, r0
 80181cc:	687a      	ldr	r2, [r7, #4]
 80181ce:	b102      	cbz	r2, 80181d2 <forward_conv2d_if32of32wf32+0x1a>
 80181d0:	6812      	ldr	r2, [r2, #0]
 80181d2:	2b01      	cmp	r3, #1
 80181d4:	f000 80c0 	beq.w	8018358 <forward_conv2d_if32of32wf32+0x1a0>
 80181d8:	6938      	ldr	r0, [r7, #16]
 80181da:	b100      	cbz	r0, 80181de <forward_conv2d_if32of32wf32+0x26>
 80181dc:	6800      	ldr	r0, [r0, #0]
 80181de:	2b02      	cmp	r3, #2
 80181e0:	f000 80b5 	beq.w	801834e <forward_conv2d_if32of32wf32+0x196>
 80181e4:	69fe      	ldr	r6, [r7, #28]
 80181e6:	2e00      	cmp	r6, #0
 80181e8:	f000 80b4 	beq.w	8018354 <forward_conv2d_if32of32wf32+0x19c>
 80181ec:	8b39      	ldrh	r1, [r7, #24]
 80181ee:	6834      	ldr	r4, [r6, #0]
 80181f0:	2901      	cmp	r1, #1
 80181f2:	f240 80b4 	bls.w	801835e <forward_conv2d_if32of32wf32+0x1a6>
 80181f6:	6876      	ldr	r6, [r6, #4]
 80181f8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80181fc:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8018200:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8018204:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 8018208:	9113      	str	r1, [sp, #76]	@ 0x4c
 801820a:	f8d9 1004 	ldr.w	r1, [r9, #4]
 801820e:	6992      	ldr	r2, [r2, #24]
 8018210:	9115      	str	r1, [sp, #84]	@ 0x54
 8018212:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8018216:	6892      	ldr	r2, [r2, #8]
 8018218:	9116      	str	r1, [sp, #88]	@ 0x58
 801821a:	f8d9 1008 	ldr.w	r1, [r9, #8]
 801821e:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8018222:	9117      	str	r1, [sp, #92]	@ 0x5c
 8018224:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8018228:	9220      	str	r2, [sp, #128]	@ 0x80
 801822a:	9118      	str	r1, [sp, #96]	@ 0x60
 801822c:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8018230:	69a2      	ldr	r2, [r4, #24]
 8018232:	9119      	str	r1, [sp, #100]	@ 0x64
 8018234:	f8be 102c 	ldrh.w	r1, [lr, #44]	@ 0x2c
 8018238:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 801823c:	911a      	str	r1, [sp, #104]	@ 0x68
 801823e:	f8de 101c 	ldr.w	r1, [lr, #28]
 8018242:	911f      	str	r1, [sp, #124]	@ 0x7c
 8018244:	f8bc 1000 	ldrh.w	r1, [ip]
 8018248:	e9de 540c 	ldrd	r5, r4, [lr, #48]	@ 0x30
 801824c:	911b      	str	r1, [sp, #108]	@ 0x6c
 801824e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8018252:	911c      	str	r1, [sp, #112]	@ 0x70
 8018254:	b2a9      	uxth	r1, r5
 8018256:	911d      	str	r1, [sp, #116]	@ 0x74
 8018258:	b2a1      	uxth	r1, r4
 801825a:	911e      	str	r1, [sp, #120]	@ 0x78
 801825c:	6891      	ldr	r1, [r2, #8]
 801825e:	e9da 9801 	ldrd	r9, r8, [sl, #4]
 8018262:	b10e      	cbz	r6, 8018268 <forward_conv2d_if32of32wf32+0xb0>
 8018264:	69b6      	ldr	r6, [r6, #24]
 8018266:	68b6      	ldr	r6, [r6, #8]
 8018268:	6980      	ldr	r0, [r0, #24]
 801826a:	b2a4      	uxth	r4, r4
 801826c:	b2ad      	uxth	r5, r5
 801826e:	2b03      	cmp	r3, #3
 8018270:	6880      	ldr	r0, [r0, #8]
 8018272:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8018276:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 801827a:	9014      	str	r0, [sp, #80]	@ 0x50
 801827c:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8018280:	fb00 8404 	mla	r4, r0, r4, r8
 8018284:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
 8018288:	fb00 9505 	mla	r5, r0, r5, r9
 801828c:	d074      	beq.n	8018378 <forward_conv2d_if32of32wf32+0x1c0>
 801828e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018290:	2b00      	cmp	r3, #0
 8018292:	d03e      	beq.n	8018312 <forward_conv2d_if32of32wf32+0x15a>
 8018294:	f8d3 a000 	ldr.w	sl, [r3]
 8018298:	f1ba 0f00 	cmp.w	sl, #0
 801829c:	d003      	beq.n	80182a6 <forward_conv2d_if32of32wf32+0xee>
 801829e:	f8da 0018 	ldr.w	r0, [sl, #24]
 80182a2:	f8d0 a008 	ldr.w	sl, [r0, #8]
 80182a6:	6858      	ldr	r0, [r3, #4]
 80182a8:	2800      	cmp	r0, #0
 80182aa:	d033      	beq.n	8018314 <forward_conv2d_if32of32wf32+0x15c>
 80182ac:	6983      	ldr	r3, [r0, #24]
 80182ae:	f8d2 c000 	ldr.w	ip, [r2]
 80182b2:	689f      	ldr	r7, [r3, #8]
 80182b4:	f3cc 4343 	ubfx	r3, ip, #17, #4
 80182b8:	2b08      	cmp	r3, #8
 80182ba:	d052      	beq.n	8018362 <forward_conv2d_if32of32wf32+0x1aa>
 80182bc:	2f00      	cmp	r7, #0
 80182be:	bf08      	it	eq
 80182c0:	460f      	moveq	r7, r1
 80182c2:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 80182c4:	463a      	mov	r2, r7
 80182c6:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80182c8:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80182ca:	940d      	str	r4, [sp, #52]	@ 0x34
 80182cc:	f8cd 901c 	str.w	r9, [sp, #28]
 80182d0:	950e      	str	r5, [sp, #56]	@ 0x38
 80182d2:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 80182d6:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80182d8:	930a      	str	r3, [sp, #40]	@ 0x28
 80182da:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80182dc:	e9cd 8308 	strd	r8, r3, [sp, #32]
 80182e0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80182e2:	9306      	str	r3, [sp, #24]
 80182e4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 80182e6:	9305      	str	r3, [sp, #20]
 80182e8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 80182ea:	9304      	str	r3, [sp, #16]
 80182ec:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80182ee:	9303      	str	r3, [sp, #12]
 80182f0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80182f2:	9302      	str	r3, [sp, #8]
 80182f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80182f6:	e9cd a300 	strd	sl, r3, [sp]
 80182fa:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 80182fc:	9311      	str	r3, [sp, #68]	@ 0x44
 80182fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8018300:	9310      	str	r3, [sp, #64]	@ 0x40
 8018302:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8018304:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018306:	4633      	mov	r3, r6
 8018308:	f000 fb4e 	bl	80189a8 <forward_lite_conv2d_if32of32wf32>
 801830c:	b023      	add	sp, #140	@ 0x8c
 801830e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018312:	469a      	mov	sl, r3
 8018314:	6810      	ldr	r0, [r2, #0]
 8018316:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801831a:	2b08      	cmp	r3, #8
 801831c:	d001      	beq.n	8018322 <forward_conv2d_if32of32wf32+0x16a>
 801831e:	460f      	mov	r7, r1
 8018320:	e7cf      	b.n	80182c2 <forward_conv2d_if32of32wf32+0x10a>
 8018322:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8018326:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801832a:	68d2      	ldr	r2, [r2, #12]
 801832c:	4103      	asrs	r3, r0
 801832e:	b29b      	uxth	r3, r3
 8018330:	2a00      	cmp	r2, #0
 8018332:	d0f4      	beq.n	801831e <forward_conv2d_if32of32wf32+0x166>
 8018334:	2700      	movs	r7, #0
 8018336:	4638      	mov	r0, r7
 8018338:	6980      	ldr	r0, [r0, #24]
 801833a:	9121      	str	r1, [sp, #132]	@ 0x84
 801833c:	6840      	ldr	r0, [r0, #4]
 801833e:	9001      	str	r0, [sp, #4]
 8018340:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8018342:	9000      	str	r0, [sp, #0]
 8018344:	4638      	mov	r0, r7
 8018346:	f001 fca9 	bl	8019c9c <lite_decompress_ilutof32>
 801834a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 801834c:	e7b6      	b.n	80182bc <forward_conv2d_if32of32wf32+0x104>
 801834e:	2300      	movs	r3, #0
 8018350:	685b      	ldr	r3, [r3, #4]
 8018352:	deff      	udf	#255	@ 0xff
 8018354:	4634      	mov	r4, r6
 8018356:	e74f      	b.n	80181f8 <forward_conv2d_if32of32wf32+0x40>
 8018358:	2300      	movs	r3, #0
 801835a:	685b      	ldr	r3, [r3, #4]
 801835c:	deff      	udf	#255	@ 0xff
 801835e:	2600      	movs	r6, #0
 8018360:	e74a      	b.n	80181f8 <forward_conv2d_if32of32wf32+0x40>
 8018362:	68d2      	ldr	r2, [r2, #12]
 8018364:	2a00      	cmp	r2, #0
 8018366:	d0a9      	beq.n	80182bc <forward_conv2d_if32of32wf32+0x104>
 8018368:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 801836c:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 8018370:	fa43 f30c 	asr.w	r3, r3, ip
 8018374:	b29b      	uxth	r3, r3
 8018376:	e7df      	b.n	8018338 <forward_conv2d_if32of32wf32+0x180>
 8018378:	2300      	movs	r3, #0
 801837a:	685b      	ldr	r3, [r3, #4]
 801837c:	deff      	udf	#255	@ 0xff
 801837e:	bf00      	nop

08018380 <forward_conv2d_if32of32wf32_nl_pool>:
 8018380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018384:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8018388:	b0c1      	sub	sp, #260	@ 0x104
 801838a:	f8bc 7000 	ldrh.w	r7, [ip]
 801838e:	b90f      	cbnz	r7, 8018394 <forward_conv2d_if32of32wf32_nl_pool+0x14>
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	deff      	udf	#255	@ 0xff
 8018394:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8018398:	4604      	mov	r4, r0
 801839a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 801839e:	f1ba 0f00 	cmp.w	sl, #0
 80183a2:	d001      	beq.n	80183a8 <forward_conv2d_if32of32wf32_nl_pool+0x28>
 80183a4:	f8da a000 	ldr.w	sl, [sl]
 80183a8:	2f01      	cmp	r7, #1
 80183aa:	f000 812d 	beq.w	8018608 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 80183ae:	f8d3 9010 	ldr.w	r9, [r3, #16]
 80183b2:	f1b9 0f00 	cmp.w	r9, #0
 80183b6:	d001      	beq.n	80183bc <forward_conv2d_if32of32wf32_nl_pool+0x3c>
 80183b8:	f8d9 9000 	ldr.w	r9, [r9]
 80183bc:	2f02      	cmp	r7, #2
 80183be:	f000 8123 	beq.w	8018608 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 80183c2:	69d9      	ldr	r1, [r3, #28]
 80183c4:	2900      	cmp	r1, #0
 80183c6:	f000 8142 	beq.w	801864e <forward_conv2d_if32of32wf32_nl_pool+0x2ce>
 80183ca:	8b1b      	ldrh	r3, [r3, #24]
 80183cc:	680a      	ldr	r2, [r1, #0]
 80183ce:	2b01      	cmp	r3, #1
 80183d0:	f240 812c 	bls.w	801862c <forward_conv2d_if32of32wf32_nl_pool+0x2ac>
 80183d4:	684b      	ldr	r3, [r1, #4]
 80183d6:	933e      	str	r3, [sp, #248]	@ 0xf8
 80183d8:	f8da 000c 	ldr.w	r0, [sl, #12]
 80183dc:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 80183e0:	9021      	str	r0, [sp, #132]	@ 0x84
 80183e2:	f8d9 000c 	ldr.w	r0, [r9, #12]
 80183e6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 80183e8:	9022      	str	r0, [sp, #136]	@ 0x88
 80183ea:	9821      	ldr	r0, [sp, #132]	@ 0x84
 80183ec:	f8d1 b008 	ldr.w	fp, [r1, #8]
 80183f0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 80183f4:	f8de 1004 	ldr.w	r1, [lr, #4]
 80183f8:	902e      	str	r0, [sp, #184]	@ 0xb8
 80183fa:	9822      	ldr	r0, [sp, #136]	@ 0x88
 80183fc:	681e      	ldr	r6, [r3, #0]
 80183fe:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8018402:	9129      	str	r1, [sp, #164]	@ 0xa4
 8018404:	902f      	str	r0, [sp, #188]	@ 0xbc
 8018406:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8018408:	f8de 1008 	ldr.w	r1, [lr, #8]
 801840c:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8018410:	9627      	str	r6, [sp, #156]	@ 0x9c
 8018412:	9030      	str	r0, [sp, #192]	@ 0xc0
 8018414:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8018416:	912d      	str	r1, [sp, #180]	@ 0xb4
 8018418:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801841c:	e9d4 850a 	ldrd	r8, r5, [r4, #40]	@ 0x28
 8018420:	9031      	str	r0, [sp, #196]	@ 0xc4
 8018422:	9526      	str	r5, [sp, #152]	@ 0x98
 8018424:	685d      	ldr	r5, [r3, #4]
 8018426:	9528      	str	r5, [sp, #160]	@ 0xa0
 8018428:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 801842c:	9821      	ldr	r0, [sp, #132]	@ 0x84
 801842e:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8018432:	9022      	str	r0, [sp, #136]	@ 0x88
 8018434:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8018436:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 801843a:	9023      	str	r0, [sp, #140]	@ 0x8c
 801843c:	fa1f f088 	uxth.w	r0, r8
 8018440:	9032      	str	r0, [sp, #200]	@ 0xc8
 8018442:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 8018446:	9033      	str	r0, [sp, #204]	@ 0xcc
 8018448:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 801844c:	9034      	str	r0, [sp, #208]	@ 0xd0
 801844e:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	@ 0xa0
 8018452:	9035      	str	r0, [sp, #212]	@ 0xd4
 8018454:	6898      	ldr	r0, [r3, #8]
 8018456:	68db      	ldr	r3, [r3, #12]
 8018458:	902b      	str	r0, [sp, #172]	@ 0xac
 801845a:	932c      	str	r3, [sp, #176]	@ 0xb0
 801845c:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8018460:	9336      	str	r3, [sp, #216]	@ 0xd8
 8018462:	b2ab      	uxth	r3, r5
 8018464:	9337      	str	r3, [sp, #220]	@ 0xdc
 8018466:	b2b3      	uxth	r3, r6
 8018468:	9338      	str	r3, [sp, #224]	@ 0xe0
 801846a:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 801846e:	9324      	str	r3, [sp, #144]	@ 0x90
 8018470:	b20b      	sxth	r3, r1
 8018472:	9325      	str	r3, [sp, #148]	@ 0x94
 8018474:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8018478:	9339      	str	r3, [sp, #228]	@ 0xe4
 801847a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 801847e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8018480:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8018484:	933b      	str	r3, [sp, #236]	@ 0xec
 8018486:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018488:	f9b3 3000 	ldrsh.w	r3, [r3]
 801848c:	933c      	str	r3, [sp, #240]	@ 0xf0
 801848e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8018490:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8018494:	933d      	str	r3, [sp, #244]	@ 0xf4
 8018496:	6a23      	ldr	r3, [r4, #32]
 8018498:	9321      	str	r3, [sp, #132]	@ 0x84
 801849a:	f1bb 0f00 	cmp.w	fp, #0
 801849e:	f000 80b6 	beq.w	801860e <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 80184a2:	f8db 3018 	ldr.w	r3, [fp, #24]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	f000 80b7 	beq.w	801861a <forward_conv2d_if32of32wf32_nl_pool+0x29a>
 80184ac:	922a      	str	r2, [sp, #168]	@ 0xa8
 80184ae:	e9d3 0100 	ldrd	r0, r1, [r3]
 80184b2:	689b      	ldr	r3, [r3, #8]
 80184b4:	9321      	str	r3, [sp, #132]	@ 0x84
 80184b6:	f002 faf1 	bl	801aa9c <ai_array_get_byte_size>
 80184ba:	f8db 7018 	ldr.w	r7, [fp, #24]
 80184be:	4683      	mov	fp, r0
 80184c0:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80184c2:	2f00      	cmp	r7, #0
 80184c4:	f000 80b9 	beq.w	801863a <forward_conv2d_if32of32wf32_nl_pool+0x2ba>
 80184c8:	923f      	str	r2, [sp, #252]	@ 0xfc
 80184ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80184ce:	f002 fae5 	bl	801aa9c <ai_array_get_byte_size>
 80184d2:	f8d4 c018 	ldr.w	ip, [r4, #24]
 80184d6:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80184d8:	f8bc 7000 	ldrh.w	r7, [ip]
 80184dc:	902a      	str	r0, [sp, #168]	@ 0xa8
 80184de:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 80184e0:	b2ad      	uxth	r5, r5
 80184e2:	f8da 0018 	ldr.w	r0, [sl, #24]
 80184e6:	b2b6      	uxth	r6, r6
 80184e8:	699b      	ldr	r3, [r3, #24]
 80184ea:	3d01      	subs	r5, #1
 80184ec:	f8d9 1018 	ldr.w	r1, [r9, #24]
 80184f0:	3e01      	subs	r6, #1
 80184f2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 80184f6:	fa1f f888 	uxth.w	r8, r8
 80184fa:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80184fc:	2f03      	cmp	r7, #3
 80184fe:	f8bd e098 	ldrh.w	lr, [sp, #152]	@ 0x98
 8018502:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 8018506:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8018508:	6992      	ldr	r2, [r2, #24]
 801850a:	fb15 3509 	smlabb	r5, r5, r9, r3
 801850e:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8018510:	6880      	ldr	r0, [r0, #8]
 8018512:	fa0f f985 	sxth.w	r9, r5
 8018516:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
 801851a:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 801851c:	6889      	ldr	r1, [r1, #8]
 801851e:	fb16 3605 	smlabb	r6, r6, r5, r3
 8018522:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8018524:	6892      	ldr	r2, [r2, #8]
 8018526:	eba3 0509 	sub.w	r5, r3, r9
 801852a:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 801852c:	b236      	sxth	r6, r6
 801852e:	fa15 f583 	uxtah	r5, r5, r3
 8018532:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8018534:	fa15 f583 	uxtah	r5, r5, r3
 8018538:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801853a:	fb95 f5f8 	sdiv	r5, r5, r8
 801853e:	eba3 0806 	sub.w	r8, r3, r6
 8018542:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8018544:	f105 0501 	add.w	r5, r5, #1
 8018548:	fa18 f883 	uxtah	r8, r8, r3
 801854c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 801854e:	b22d      	sxth	r5, r5
 8018550:	fa18 f883 	uxtah	r8, r8, r3
 8018554:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8018556:	fb98 fefe 	sdiv	lr, r8, lr
 801855a:	9326      	str	r3, [sp, #152]	@ 0x98
 801855c:	f10e 0e01 	add.w	lr, lr, #1
 8018560:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8018564:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8018568:	d94e      	bls.n	8018608 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 801856a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 801856e:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8018572:	f1bc 0f00 	cmp.w	ip, #0
 8018576:	d067      	beq.n	8018648 <forward_conv2d_if32of32wf32_nl_pool+0x2c8>
 8018578:	f8dc 7000 	ldr.w	r7, [ip]
 801857c:	b10f      	cbz	r7, 8018582 <forward_conv2d_if32of32wf32_nl_pool+0x202>
 801857e:	69bf      	ldr	r7, [r7, #24]
 8018580:	68bf      	ldr	r7, [r7, #8]
 8018582:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8018584:	9513      	str	r5, [sp, #76]	@ 0x4c
 8018586:	931f      	str	r3, [sp, #124]	@ 0x7c
 8018588:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 801858a:	960e      	str	r6, [sp, #56]	@ 0x38
 801858c:	931e      	str	r3, [sp, #120]	@ 0x78
 801858e:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8018590:	931d      	str	r3, [sp, #116]	@ 0x74
 8018592:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8018594:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8018598:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 801859a:	931a      	str	r3, [sp, #104]	@ 0x68
 801859c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801859e:	9319      	str	r3, [sp, #100]	@ 0x64
 80185a0:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 80185a2:	e9cd b317 	strd	fp, r3, [sp, #92]	@ 0x5c
 80185a6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80185a8:	e9cd 8315 	strd	r8, r3, [sp, #84]	@ 0x54
 80185ac:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 80185ae:	9312      	str	r3, [sp, #72]	@ 0x48
 80185b0:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 80185b2:	9311      	str	r3, [sp, #68]	@ 0x44
 80185b4:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 80185b6:	e9cd 930f 	strd	r9, r3, [sp, #60]	@ 0x3c
 80185ba:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 80185bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80185be:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 80185c0:	930c      	str	r3, [sp, #48]	@ 0x30
 80185c2:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80185c4:	930b      	str	r3, [sp, #44]	@ 0x2c
 80185c6:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 80185c8:	930a      	str	r3, [sp, #40]	@ 0x28
 80185ca:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 80185cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80185ce:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 80185d0:	9308      	str	r3, [sp, #32]
 80185d2:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 80185d4:	9307      	str	r3, [sp, #28]
 80185d6:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80185d8:	9306      	str	r3, [sp, #24]
 80185da:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 80185dc:	9305      	str	r3, [sp, #20]
 80185de:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80185e0:	9304      	str	r3, [sp, #16]
 80185e2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 80185e4:	9303      	str	r3, [sp, #12]
 80185e6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 80185e8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 80185ec:	fa0f f38e 	sxth.w	r3, lr
 80185f0:	9314      	str	r3, [sp, #80]	@ 0x50
 80185f2:	4653      	mov	r3, sl
 80185f4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 80185f8:	69a4      	ldr	r4, [r4, #24]
 80185fa:	68a4      	ldr	r4, [r4, #8]
 80185fc:	9400      	str	r4, [sp, #0]
 80185fe:	f000 fcab 	bl	8018f58 <forward_lite_conv2d_if32of32wf32_pool>
 8018602:	b041      	add	sp, #260	@ 0x104
 8018604:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018608:	2300      	movs	r3, #0
 801860a:	685b      	ldr	r3, [r3, #4]
 801860c:	deff      	udf	#255	@ 0xff
 801860e:	b183      	cbz	r3, 8018632 <forward_conv2d_if32of32wf32_nl_pool+0x2b2>
 8018610:	689b      	ldr	r3, [r3, #8]
 8018612:	9321      	str	r3, [sp, #132]	@ 0x84
 8018614:	2301      	movs	r3, #1
 8018616:	932a      	str	r3, [sp, #168]	@ 0xa8
 8018618:	e761      	b.n	80184de <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 801861a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801861c:	b10b      	cbz	r3, 8018622 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 801861e:	689b      	ldr	r3, [r3, #8]
 8018620:	9321      	str	r3, [sp, #132]	@ 0x84
 8018622:	2301      	movs	r3, #1
 8018624:	f04f 0b00 	mov.w	fp, #0
 8018628:	932a      	str	r3, [sp, #168]	@ 0xa8
 801862a:	e758      	b.n	80184de <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 801862c:	2300      	movs	r3, #0
 801862e:	933e      	str	r3, [sp, #248]	@ 0xf8
 8018630:	e6d2      	b.n	80183d8 <forward_conv2d_if32of32wf32_nl_pool+0x58>
 8018632:	469b      	mov	fp, r3
 8018634:	2301      	movs	r3, #1
 8018636:	932a      	str	r3, [sp, #168]	@ 0xa8
 8018638:	e751      	b.n	80184de <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 801863a:	f8d4 c018 	ldr.w	ip, [r4, #24]
 801863e:	2301      	movs	r3, #1
 8018640:	f8bc 7000 	ldrh.w	r7, [ip]
 8018644:	932a      	str	r3, [sp, #168]	@ 0xa8
 8018646:	e74a      	b.n	80184de <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 8018648:	f8dc 3018 	ldr.w	r3, [ip, #24]
 801864c:	deff      	udf	#255	@ 0xff
 801864e:	68cb      	ldr	r3, [r1, #12]
 8018650:	deff      	udf	#255	@ 0xff
 8018652:	bf00      	nop

08018654 <forward_dense>:
 8018654:	6982      	ldr	r2, [r0, #24]
 8018656:	8813      	ldrh	r3, [r2, #0]
 8018658:	b90b      	cbnz	r3, 801865e <forward_dense+0xa>
 801865a:	685b      	ldr	r3, [r3, #4]
 801865c:	deff      	udf	#255	@ 0xff
 801865e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8018662:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8018666:	b08e      	sub	sp, #56	@ 0x38
 8018668:	f8da 0004 	ldr.w	r0, [sl, #4]
 801866c:	b100      	cbz	r0, 8018670 <forward_dense+0x1c>
 801866e:	6800      	ldr	r0, [r0, #0]
 8018670:	2b01      	cmp	r3, #1
 8018672:	d061      	beq.n	8018738 <forward_dense+0xe4>
 8018674:	f8da 2010 	ldr.w	r2, [sl, #16]
 8018678:	b102      	cbz	r2, 801867c <forward_dense+0x28>
 801867a:	6812      	ldr	r2, [r2, #0]
 801867c:	2b02      	cmp	r3, #2
 801867e:	d035      	beq.n	80186ec <forward_dense+0x98>
 8018680:	f8da 501c 	ldr.w	r5, [sl, #28]
 8018684:	2d00      	cmp	r5, #0
 8018686:	d055      	beq.n	8018734 <forward_dense+0xe0>
 8018688:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 801868c:	6829      	ldr	r1, [r5, #0]
 801868e:	2c01      	cmp	r4, #1
 8018690:	d955      	bls.n	801873e <forward_dense+0xea>
 8018692:	686d      	ldr	r5, [r5, #4]
 8018694:	698e      	ldr	r6, [r1, #24]
 8018696:	2b03      	cmp	r3, #3
 8018698:	68d1      	ldr	r1, [r2, #12]
 801869a:	68c4      	ldr	r4, [r0, #12]
 801869c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 80186a0:	f8d4 e004 	ldr.w	lr, [r4, #4]
 80186a4:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 80186a8:	6831      	ldr	r1, [r6, #0]
 80186aa:	fb07 f804 	mul.w	r8, r7, r4
 80186ae:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 80186b2:	d046      	beq.n	8018742 <forward_dense+0xee>
 80186b4:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 80186b8:	b11c      	cbz	r4, 80186c2 <forward_dense+0x6e>
 80186ba:	6824      	ldr	r4, [r4, #0]
 80186bc:	b10c      	cbz	r4, 80186c2 <forward_dense+0x6e>
 80186be:	69a3      	ldr	r3, [r4, #24]
 80186c0:	689c      	ldr	r4, [r3, #8]
 80186c2:	6983      	ldr	r3, [r0, #24]
 80186c4:	6992      	ldr	r2, [r2, #24]
 80186c6:	6899      	ldr	r1, [r3, #8]
 80186c8:	6890      	ldr	r0, [r2, #8]
 80186ca:	b10d      	cbz	r5, 80186d0 <forward_dense+0x7c>
 80186cc:	69ab      	ldr	r3, [r5, #24]
 80186ce:	689d      	ldr	r5, [r3, #8]
 80186d0:	4f1d      	ldr	r7, [pc, #116]	@ (8018748 <forward_dense+0xf4>)
 80186d2:	45bc      	cmp	ip, r7
 80186d4:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 80186d8:	d022      	beq.n	8018720 <forward_dense+0xcc>
 80186da:	4e1c      	ldr	r6, [pc, #112]	@ (801874c <forward_dense+0xf8>)
 80186dc:	45b4      	cmp	ip, r6
 80186de:	d015      	beq.n	801870c <forward_dense+0xb8>
 80186e0:	4b1b      	ldr	r3, [pc, #108]	@ (8018750 <forward_dense+0xfc>)
 80186e2:	459c      	cmp	ip, r3
 80186e4:	d005      	beq.n	80186f2 <forward_dense+0x9e>
 80186e6:	b00e      	add	sp, #56	@ 0x38
 80186e8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80186ec:	2300      	movs	r3, #0
 80186ee:	685b      	ldr	r3, [r3, #4]
 80186f0:	deff      	udf	#255	@ 0xff
 80186f2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 80186f6:	a807      	add	r0, sp, #28
 80186f8:	9209      	str	r2, [sp, #36]	@ 0x24
 80186fa:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 80186fe:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 8018702:	f001 fb21 	bl	8019d48 <forward_lite_dense_if32of32wf32>
 8018706:	b00e      	add	sp, #56	@ 0x38
 8018708:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801870c:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8018710:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8018714:	9400      	str	r4, [sp, #0]
 8018716:	f001 fc71 	bl	8019ffc <forward_lite_dense_if32of32wf32_lut4>
 801871a:	b00e      	add	sp, #56	@ 0x38
 801871c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018720:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8018724:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8018728:	9400      	str	r4, [sp, #0]
 801872a:	f001 fdaf 	bl	801a28c <forward_lite_dense_if32of32wf32_lut8>
 801872e:	b00e      	add	sp, #56	@ 0x38
 8018730:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8018734:	4629      	mov	r1, r5
 8018736:	e7ad      	b.n	8018694 <forward_dense+0x40>
 8018738:	2300      	movs	r3, #0
 801873a:	685b      	ldr	r3, [r3, #4]
 801873c:	deff      	udf	#255	@ 0xff
 801873e:	2500      	movs	r5, #0
 8018740:	e7a8      	b.n	8018694 <forward_dense+0x40>
 8018742:	2300      	movs	r3, #0
 8018744:	685b      	ldr	r3, [r3, #4]
 8018746:	deff      	udf	#255	@ 0xff
 8018748:	00d01040 	.word	0x00d01040
 801874c:	00f01040 	.word	0x00f01040
 8018750:	00821040 	.word	0x00821040

08018754 <forward_reduce>:
 8018754:	6981      	ldr	r1, [r0, #24]
 8018756:	880a      	ldrh	r2, [r1, #0]
 8018758:	b90a      	cbnz	r2, 801875e <forward_reduce+0xa>
 801875a:	6853      	ldr	r3, [r2, #4]
 801875c:	deff      	udf	#255	@ 0xff
 801875e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018762:	6849      	ldr	r1, [r1, #4]
 8018764:	b08b      	sub	sp, #44	@ 0x2c
 8018766:	4603      	mov	r3, r0
 8018768:	684e      	ldr	r6, [r1, #4]
 801876a:	b106      	cbz	r6, 801876e <forward_reduce+0x1a>
 801876c:	6836      	ldr	r6, [r6, #0]
 801876e:	2a01      	cmp	r2, #1
 8018770:	f000 8081 	beq.w	8018876 <forward_reduce+0x122>
 8018774:	690a      	ldr	r2, [r1, #16]
 8018776:	2a00      	cmp	r2, #0
 8018778:	d07b      	beq.n	8018872 <forward_reduce+0x11e>
 801877a:	6814      	ldr	r4, [r2, #0]
 801877c:	2200      	movs	r2, #0
 801877e:	6971      	ldr	r1, [r6, #20]
 8018780:	a803      	add	r0, sp, #12
 8018782:	e9d3 3807 	ldrd	r3, r8, [r3, #28]
 8018786:	684f      	ldr	r7, [r1, #4]
 8018788:	f104 0108 	add.w	r1, r4, #8
 801878c:	9301      	str	r3, [sp, #4]
 801878e:	6963      	ldr	r3, [r4, #20]
 8018790:	685d      	ldr	r5, [r3, #4]
 8018792:	ab05      	add	r3, sp, #20
 8018794:	9209      	str	r2, [sp, #36]	@ 0x24
 8018796:	9304      	str	r3, [sp, #16]
 8018798:	f240 5302 	movw	r3, #1282	@ 0x502
 801879c:	e9cd 2205 	strd	r2, r2, [sp, #20]
 80187a0:	e9cd 2207 	strd	r2, r2, [sp, #28]
 80187a4:	9303      	str	r3, [sp, #12]
 80187a6:	f106 0208 	add.w	r2, r6, #8
 80187aa:	463b      	mov	r3, r7
 80187ac:	f002 f9c4 	bl	801ab38 <core_compute_offsets>
 80187b0:	69b3      	ldr	r3, [r6, #24]
 80187b2:	e9d3 0100 	ldrd	r0, r1, [r3]
 80187b6:	f8d3 b008 	ldr.w	fp, [r3, #8]
 80187ba:	f002 f96f 	bl	801aa9c <ai_array_get_byte_size>
 80187be:	69a2      	ldr	r2, [r4, #24]
 80187c0:	6894      	ldr	r4, [r2, #8]
 80187c2:	e9d2 0100 	ldrd	r0, r1, [r2]
 80187c6:	f002 f969 	bl	801aa9c <ai_array_get_byte_size>
 80187ca:	eb04 0900 	add.w	r9, r4, r0
 80187ce:	454c      	cmp	r4, r9
 80187d0:	d209      	bcs.n	80187e6 <forward_reduce+0x92>
 80187d2:	46a2      	mov	sl, r4
 80187d4:	9b01      	ldr	r3, [sp, #4]
 80187d6:	4651      	mov	r1, sl
 80187d8:	44aa      	add	sl, r5
 80187da:	462a      	mov	r2, r5
 80187dc:	6898      	ldr	r0, [r3, #8]
 80187de:	f002 f83b 	bl	801a858 <st_int8_copy>
 80187e2:	45d1      	cmp	r9, sl
 80187e4:	d8f6      	bhi.n	80187d4 <forward_reduce+0x80>
 80187e6:	68f2      	ldr	r2, [r6, #12]
 80187e8:	68d1      	ldr	r1, [r2, #12]
 80187ea:	2900      	cmp	r1, #0
 80187ec:	d03e      	beq.n	801886c <forward_reduce+0x118>
 80187ee:	2300      	movs	r3, #0
 80187f0:	6895      	ldr	r5, [r2, #8]
 80187f2:	9301      	str	r3, [sp, #4]
 80187f4:	2d00      	cmp	r5, #0
 80187f6:	d039      	beq.n	801886c <forward_reduce+0x118>
 80187f8:	68b1      	ldr	r1, [r6, #8]
 80187fa:	f04f 0a00 	mov.w	sl, #0
 80187fe:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8018802:	f04f 0900 	mov.w	r9, #0
 8018806:	2904      	cmp	r1, #4
 8018808:	bf8c      	ite	hi
 801880a:	6910      	ldrhi	r0, [r2, #16]
 801880c:	2001      	movls	r0, #1
 801880e:	4581      	cmp	r9, r0
 8018810:	d21c      	bcs.n	801884c <forward_reduce+0xf8>
 8018812:	6850      	ldr	r0, [r2, #4]
 8018814:	b180      	cbz	r0, 8018838 <forward_reduce+0xe4>
 8018816:	2500      	movs	r5, #0
 8018818:	465a      	mov	r2, fp
 801881a:	4621      	mov	r1, r4
 801881c:	4620      	mov	r0, r4
 801881e:	3501      	adds	r5, #1
 8018820:	47c0      	blx	r8
 8018822:	9904      	ldr	r1, [sp, #16]
 8018824:	68f2      	ldr	r2, [r6, #12]
 8018826:	44bb      	add	fp, r7
 8018828:	6848      	ldr	r0, [r1, #4]
 801882a:	6851      	ldr	r1, [r2, #4]
 801882c:	4404      	add	r4, r0
 801882e:	42a9      	cmp	r1, r5
 8018830:	d8f2      	bhi.n	8018818 <forward_reduce+0xc4>
 8018832:	68b1      	ldr	r1, [r6, #8]
 8018834:	f3c1 2117 	ubfx	r1, r1, #8, #24
 8018838:	9803      	ldr	r0, [sp, #12]
 801883a:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 801883e:	d302      	bcc.n	8018846 <forward_reduce+0xf2>
 8018840:	9804      	ldr	r0, [sp, #16]
 8018842:	6900      	ldr	r0, [r0, #16]
 8018844:	4404      	add	r4, r0
 8018846:	f109 0901 	add.w	r9, r9, #1
 801884a:	e7dc      	b.n	8018806 <forward_reduce+0xb2>
 801884c:	9b04      	ldr	r3, [sp, #16]
 801884e:	f10a 0a01 	add.w	sl, sl, #1
 8018852:	6895      	ldr	r5, [r2, #8]
 8018854:	6898      	ldr	r0, [r3, #8]
 8018856:	4555      	cmp	r5, sl
 8018858:	4404      	add	r4, r0
 801885a:	d8d2      	bhi.n	8018802 <forward_reduce+0xae>
 801885c:	68d8      	ldr	r0, [r3, #12]
 801885e:	9b01      	ldr	r3, [sp, #4]
 8018860:	68d1      	ldr	r1, [r2, #12]
 8018862:	4404      	add	r4, r0
 8018864:	3301      	adds	r3, #1
 8018866:	428b      	cmp	r3, r1
 8018868:	9301      	str	r3, [sp, #4]
 801886a:	d3c3      	bcc.n	80187f4 <forward_reduce+0xa0>
 801886c:	b00b      	add	sp, #44	@ 0x2c
 801886e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018872:	6953      	ldr	r3, [r2, #20]
 8018874:	deff      	udf	#255	@ 0xff
 8018876:	2300      	movs	r3, #0
 8018878:	685b      	ldr	r3, [r3, #4]
 801887a:	deff      	udf	#255	@ 0xff

0801887c <forward_relu>:
 801887c:	6982      	ldr	r2, [r0, #24]
 801887e:	8813      	ldrh	r3, [r2, #0]
 8018880:	b90b      	cbnz	r3, 8018886 <forward_relu+0xa>
 8018882:	685b      	ldr	r3, [r3, #4]
 8018884:	deff      	udf	#255	@ 0xff
 8018886:	6851      	ldr	r1, [r2, #4]
 8018888:	684a      	ldr	r2, [r1, #4]
 801888a:	b102      	cbz	r2, 801888e <forward_relu+0x12>
 801888c:	6812      	ldr	r2, [r2, #0]
 801888e:	2b01      	cmp	r3, #1
 8018890:	f000 8084 	beq.w	801899c <forward_relu+0x120>
 8018894:	b470      	push	{r4, r5, r6}
 8018896:	690b      	ldr	r3, [r1, #16]
 8018898:	b103      	cbz	r3, 801889c <forward_relu+0x20>
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	699c      	ldr	r4, [r3, #24]
 801889e:	6991      	ldr	r1, [r2, #24]
 80188a0:	6893      	ldr	r3, [r2, #8]
 80188a2:	69c6      	ldr	r6, [r0, #28]
 80188a4:	6889      	ldr	r1, [r1, #8]
 80188a6:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80188aa:	68a0      	ldr	r0, [r4, #8]
 80188ac:	b196      	cbz	r6, 80188d4 <forward_relu+0x58>
 80188ae:	6874      	ldr	r4, [r6, #4]
 80188b0:	2c01      	cmp	r4, #1
 80188b2:	d036      	beq.n	8018922 <forward_relu+0xa6>
 80188b4:	2b00      	cmp	r3, #0
 80188b6:	d068      	beq.n	801898a <forward_relu+0x10e>
 80188b8:	68d5      	ldr	r5, [r2, #12]
 80188ba:	2201      	movs	r2, #1
 80188bc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80188c0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80188c4:	429d      	cmp	r5, r3
 80188c6:	fb04 f202 	mul.w	r2, r4, r2
 80188ca:	d1f9      	bne.n	80188c0 <forward_relu+0x44>
 80188cc:	68b3      	ldr	r3, [r6, #8]
 80188ce:	bc70      	pop	{r4, r5, r6}
 80188d0:	f000 bf5c 	b.w	801978c <forward_lite_nl_relu_generic_if32of32_kernel>
 80188d4:	2b00      	cmp	r3, #0
 80188d6:	d05a      	beq.n	801898e <forward_relu+0x112>
 80188d8:	68d5      	ldr	r5, [r2, #12]
 80188da:	2201      	movs	r2, #1
 80188dc:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80188e0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80188e4:	429d      	cmp	r5, r3
 80188e6:	fb04 f202 	mul.w	r2, r4, r2
 80188ea:	d1f9      	bne.n	80188e0 <forward_relu+0x64>
 80188ec:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80188f0:	4413      	add	r3, r2
 80188f2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80188f6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80188fa:	428a      	cmp	r2, r1
 80188fc:	d30f      	bcc.n	801891e <forward_relu+0xa2>
 80188fe:	1a51      	subs	r1, r2, r1
 8018900:	1d13      	adds	r3, r2, #4
 8018902:	3004      	adds	r0, #4
 8018904:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 80189a4 <forward_relu+0x128>
 8018908:	f021 0103 	bic.w	r1, r1, #3
 801890c:	1a52      	subs	r2, r2, r1
 801890e:	ed73 7a01 	vldmdb	r3!, {s15}
 8018912:	429a      	cmp	r2, r3
 8018914:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8018918:	ed60 7a01 	vstmdb	r0!, {s15}
 801891c:	d1f7      	bne.n	801890e <forward_relu+0x92>
 801891e:	bc70      	pop	{r4, r5, r6}
 8018920:	4770      	bx	lr
 8018922:	b3b3      	cbz	r3, 8018992 <forward_relu+0x116>
 8018924:	68d5      	ldr	r5, [r2, #12]
 8018926:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 801892a:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 801892e:	429d      	cmp	r5, r3
 8018930:	fb02 f404 	mul.w	r4, r2, r4
 8018934:	d1f9      	bne.n	801892a <forward_relu+0xae>
 8018936:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801893a:	68b2      	ldr	r2, [r6, #8]
 801893c:	4423      	add	r3, r4
 801893e:	ed92 7a00 	vldr	s14, [r2]
 8018942:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8018946:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 801894a:	428a      	cmp	r2, r1
 801894c:	d3e7      	bcc.n	801891e <forward_relu+0xa2>
 801894e:	1a51      	subs	r1, r2, r1
 8018950:	1d13      	adds	r3, r2, #4
 8018952:	3004      	adds	r0, #4
 8018954:	2400      	movs	r4, #0
 8018956:	f021 0103 	bic.w	r1, r1, #3
 801895a:	1a52      	subs	r2, r2, r1
 801895c:	ed73 7a01 	vldmdb	r3!, {s15}
 8018960:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8018964:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8018968:	d50a      	bpl.n	8018980 <forward_relu+0x104>
 801896a:	429a      	cmp	r2, r3
 801896c:	ed60 7a01 	vstmdb	r0!, {s15}
 8018970:	d0d5      	beq.n	801891e <forward_relu+0xa2>
 8018972:	ed73 7a01 	vldmdb	r3!, {s15}
 8018976:	eeb4 7ae7 	vcmpe.f32	s14, s15
 801897a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801897e:	d4f4      	bmi.n	801896a <forward_relu+0xee>
 8018980:	429a      	cmp	r2, r3
 8018982:	f840 4d04 	str.w	r4, [r0, #-4]!
 8018986:	d1e9      	bne.n	801895c <forward_relu+0xe0>
 8018988:	e7c9      	b.n	801891e <forward_relu+0xa2>
 801898a:	2201      	movs	r2, #1
 801898c:	e79e      	b.n	80188cc <forward_relu+0x50>
 801898e:	460a      	mov	r2, r1
 8018990:	e7b5      	b.n	80188fe <forward_relu+0x82>
 8018992:	68b3      	ldr	r3, [r6, #8]
 8018994:	460a      	mov	r2, r1
 8018996:	ed93 7a00 	vldr	s14, [r3]
 801899a:	e7d8      	b.n	801894e <forward_relu+0xd2>
 801899c:	2300      	movs	r3, #0
 801899e:	685b      	ldr	r3, [r3, #4]
 80189a0:	deff      	udf	#255	@ 0xff
 80189a2:	bf00      	nop
 80189a4:	00000000 	.word	0x00000000

080189a8 <forward_lite_conv2d_if32of32wf32>:
 80189a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80189ac:	ed2d 8b0e 	vpush	{d8-d14}
 80189b0:	b0a1      	sub	sp, #132	@ 0x84
 80189b2:	4681      	mov	r9, r0
 80189b4:	460c      	mov	r4, r1
 80189b6:	4690      	mov	r8, r2
 80189b8:	f8bd 5104 	ldrh.w	r5, [sp, #260]	@ 0x104
 80189bc:	f8bd 610c 	ldrh.w	r6, [sp, #268]	@ 0x10c
 80189c0:	9f3e      	ldr	r7, [sp, #248]	@ 0xf8
 80189c2:	9018      	str	r0, [sp, #96]	@ 0x60
 80189c4:	9211      	str	r2, [sp, #68]	@ 0x44
 80189c6:	930c      	str	r3, [sp, #48]	@ 0x30
 80189c8:	f8bd 2108 	ldrh.w	r2, [sp, #264]	@ 0x108
 80189cc:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 80189ce:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 80189d0:	f8bd 1110 	ldrh.w	r1, [sp, #272]	@ 0x110
 80189d4:	9512      	str	r5, [sp, #72]	@ 0x48
 80189d6:	9605      	str	r6, [sp, #20]
 80189d8:	2f00      	cmp	r7, #0
 80189da:	f000 817a 	beq.w	8018cd2 <forward_lite_conv2d_if32of32wf32+0x32a>
 80189de:	9f3f      	ldr	r7, [sp, #252]	@ 0xfc
 80189e0:	f1c2 0e00 	rsb	lr, r2, #0
 80189e4:	4694      	mov	ip, r2
 80189e6:	426d      	negs	r5, r5
 80189e8:	fb07 f303 	mul.w	r3, r7, r3
 80189ec:	9f39      	ldr	r7, [sp, #228]	@ 0xe4
 80189ee:	9510      	str	r5, [sp, #64]	@ 0x40
 80189f0:	fb07 f303 	mul.w	r3, r7, r3
 80189f4:	ed9f 8ac0 	vldr	s16, [pc, #768]	@ 8018cf8 <forward_lite_conv2d_if32of32wf32+0x350>
 80189f8:	9119      	str	r1, [sp, #100]	@ 0x64
 80189fa:	009b      	lsls	r3, r3, #2
 80189fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80189fe:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8018a00:	fb07 f303 	mul.w	r3, r7, r3
 8018a04:	9f3d      	ldr	r7, [sp, #244]	@ 0xf4
 8018a06:	fb07 f200 	mul.w	r2, r7, r0
 8018a0a:	0087      	lsls	r7, r0, #2
 8018a0c:	9702      	str	r7, [sp, #8]
 8018a0e:	0097      	lsls	r7, r2, #2
 8018a10:	fb01 f203 	mul.w	r2, r1, r3
 8018a14:	fb03 f30e 	mul.w	r3, r3, lr
 8018a18:	9714      	str	r7, [sp, #80]	@ 0x50
 8018a1a:	0097      	lsls	r7, r2, #2
 8018a1c:	eb09 0083 	add.w	r0, r9, r3, lsl #2
 8018a20:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8018a22:	f108 4278 	add.w	r2, r8, #4160749568	@ 0xf8000000
 8018a26:	9716      	str	r7, [sp, #88]	@ 0x58
 8018a28:	fb06 f303 	mul.w	r3, r6, r3
 8018a2c:	4677      	mov	r7, lr
 8018a2e:	9213      	str	r2, [sp, #76]	@ 0x4c
 8018a30:	4606      	mov	r6, r0
 8018a32:	009b      	lsls	r3, r3, #2
 8018a34:	2200      	movs	r2, #0
 8018a36:	9304      	str	r3, [sp, #16]
 8018a38:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8018a3a:	920f      	str	r2, [sp, #60]	@ 0x3c
 8018a3c:	009b      	lsls	r3, r3, #2
 8018a3e:	fb03 f905 	mul.w	r9, r3, r5
 8018a42:	4665      	mov	r5, ip
 8018a44:	9300      	str	r3, [sp, #0]
 8018a46:	2f00      	cmp	r7, #0
 8018a48:	f2c0 8281 	blt.w	8018f4e <forward_lite_conv2d_if32of32wf32+0x5a6>
 8018a4c:	2300      	movs	r3, #0
 8018a4e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8018a50:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 8018a52:	9945      	ldr	r1, [sp, #276]	@ 0x114
 8018a54:	442a      	add	r2, r5
 8018a56:	428a      	cmp	r2, r1
 8018a58:	bf94      	ite	ls
 8018a5a:	ebc3 0202 	rsbls	r2, r3, r2
 8018a5e:	ebc3 0201 	rsbhi	r2, r3, r1
 8018a62:	4610      	mov	r0, r2
 8018a64:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8018a66:	2a00      	cmp	r2, #0
 8018a68:	f000 8148 	beq.w	8018cfc <forward_lite_conv2d_if32of32wf32+0x354>
 8018a6c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 8018a6e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8018a72:	f0c0 8143 	bcc.w	8018cfc <forward_lite_conv2d_if32of32wf32+0x354>
 8018a76:	9a02      	ldr	r2, [sp, #8]
 8018a78:	18a2      	adds	r2, r4, r2
 8018a7a:	4294      	cmp	r4, r2
 8018a7c:	9215      	str	r2, [sp, #84]	@ 0x54
 8018a7e:	f080 811a 	bcs.w	8018cb6 <forward_lite_conv2d_if32of32wf32+0x30e>
 8018a82:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018a84:	46a2      	mov	sl, r4
 8018a86:	4680      	mov	r8, r0
 8018a88:	941e      	str	r4, [sp, #120]	@ 0x78
 8018a8a:	fb02 f303 	mul.w	r3, r2, r3
 8018a8e:	9309      	str	r3, [sp, #36]	@ 0x24
 8018a90:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018a92:	444b      	add	r3, r9
 8018a94:	9317      	str	r3, [sp, #92]	@ 0x5c
 8018a96:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018a98:	930e      	str	r3, [sp, #56]	@ 0x38
 8018a9a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8018a9c:	e9cd 761a 	strd	r7, r6, [sp, #104]	@ 0x68
 8018aa0:	930a      	str	r3, [sp, #40]	@ 0x28
 8018aa2:	e9cd 591c 	strd	r5, r9, [sp, #112]	@ 0x70
 8018aa6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018aa8:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8018aaa:	980a      	ldr	r0, [sp, #40]	@ 0x28
 8018aac:	f001 fed4 	bl	801a858 <st_int8_copy>
 8018ab0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018ab2:	2b00      	cmp	r3, #0
 8018ab4:	f000 811d 	beq.w	8018cf2 <forward_lite_conv2d_if32of32wf32+0x34a>
 8018ab8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8018aba:	ecf3 6a01 	vldmia	r3!, {s13}
 8018abe:	930e      	str	r3, [sp, #56]	@ 0x38
 8018ac0:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8018ac2:	2b00      	cmp	r3, #0
 8018ac4:	f000 80e8 	beq.w	8018c98 <forward_lite_conv2d_if32of32wf32+0x2f0>
 8018ac8:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8018aca:	2000      	movs	r0, #0
 8018acc:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8018ace:	9201      	str	r2, [sp, #4]
 8018ad0:	4602      	mov	r2, r0
 8018ad2:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8018ad4:	4650      	mov	r0, sl
 8018ad6:	4614      	mov	r4, r2
 8018ad8:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 8018adc:	2d00      	cmp	r5, #0
 8018ade:	f2c0 80ff 	blt.w	8018ce0 <forward_lite_conv2d_if32of32wf32+0x338>
 8018ae2:	9a01      	ldr	r2, [sp, #4]
 8018ae4:	2600      	movs	r6, #0
 8018ae6:	9203      	str	r2, [sp, #12]
 8018ae8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018aea:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 8018aec:	9f00      	ldr	r7, [sp, #0]
 8018aee:	fb02 1207 	mla	r2, r2, r7, r1
 8018af2:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8018af4:	18cf      	adds	r7, r1, r3
 8018af6:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8018af8:	428f      	cmp	r7, r1
 8018afa:	bf94      	ite	ls
 8018afc:	ebc6 0607 	rsbls	r6, r6, r7
 8018b00:	ebc6 0601 	rsbhi	r6, r6, r1
 8018b04:	993b      	ldr	r1, [sp, #236]	@ 0xec
 8018b06:	f1b8 0f00 	cmp.w	r8, #0
 8018b0a:	eba1 0b06 	sub.w	fp, r1, r6
 8018b0e:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 8018b10:	eba1 0a06 	sub.w	sl, r1, r6
 8018b14:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 8018b16:	fb01 f606 	mul.w	r6, r1, r6
 8018b1a:	f340 80e7 	ble.w	8018cec <forward_lite_conv2d_if32of32wf32+0x344>
 8018b1e:	9f00      	ldr	r7, [sp, #0]
 8018b20:	eeb0 7a66 	vmov.f32	s14, s13
 8018b24:	f04f 0c00 	mov.w	ip, #0
 8018b28:	9903      	ldr	r1, [sp, #12]
 8018b2a:	fb07 fb0b 	mul.w	fp, r7, fp
 8018b2e:	fb07 fa0a 	mul.w	sl, r7, sl
 8018b32:	f026 070f 	bic.w	r7, r6, #15
 8018b36:	9408      	str	r4, [sp, #32]
 8018b38:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 8018b3c:	9303      	str	r3, [sp, #12]
 8018b3e:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8018b42:	f109 0901 	add.w	r9, r9, #1
 8018b46:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 8018b4a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8018b4e:	e9cd 0506 	strd	r0, r5, [sp, #24]
 8018b52:	2f00      	cmp	r7, #0
 8018b54:	f340 80c2 	ble.w	8018cdc <forward_lite_conv2d_if32of32wf32+0x334>
 8018b58:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8018b5c:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8018b60:	2400      	movs	r4, #0
 8018b62:	ed10 6a0f 	vldr	s12, [r0, #-60]	@ 0xffffffc4
 8018b66:	3410      	adds	r4, #16
 8018b68:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 8018b6c:	3040      	adds	r0, #64	@ 0x40
 8018b6e:	ed53 4a10 	vldr	s9, [r3, #-64]	@ 0xffffffc0
 8018b72:	42bc      	cmp	r4, r7
 8018b74:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018b78:	ed10 5a20 	vldr	s10, [r0, #-128]	@ 0xffffff80
 8018b7c:	ed53 5a0e 	vldr	s11, [r3, #-56]	@ 0xffffffc8
 8018b80:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8018b84:	ed10 6a1e 	vldr	s12, [r0, #-120]	@ 0xffffff88
 8018b88:	eee4 7a85 	vfma.f32	s15, s9, s10
 8018b8c:	ed53 da1d 	vldr	s27, [r3, #-116]	@ 0xffffff8c
 8018b90:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8018b94:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8018b98:	ed50 ca1c 	vldr	s25, [r0, #-112]	@ 0xffffff90
 8018b9c:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8018ba0:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8018ba4:	eee5 7a86 	vfma.f32	s15, s11, s12
 8018ba8:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 8018bac:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8018bb0:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8018bb4:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8018bb8:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8018bbc:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 8018bc0:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8018bc4:	ed10 0a17 	vldr	s0, [r0, #-92]	@ 0xffffffa4
 8018bc8:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8018bcc:	ed10 1a16 	vldr	s2, [r0, #-88]	@ 0xffffffa8
 8018bd0:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8018bd4:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8018bd8:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8018bdc:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8018be0:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 8018be4:	ed50 3a14 	vldr	s7, [r0, #-80]	@ 0xffffffb0
 8018be8:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 8018bec:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8018bf0:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 8018bf4:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 8018bf8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8018bfc:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8018c00:	ed53 da11 	vldr	s27, [r3, #-68]	@ 0xffffffbc
 8018c04:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8018c08:	eeea 7a29 	vfma.f32	s15, s20, s19
 8018c0c:	eee9 7a28 	vfma.f32	s15, s18, s17
 8018c10:	eee0 7a20 	vfma.f32	s15, s0, s1
 8018c14:	eee1 7a21 	vfma.f32	s15, s2, s3
 8018c18:	eee2 7a22 	vfma.f32	s15, s4, s5
 8018c1c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8018c20:	eee4 7a24 	vfma.f32	s15, s8, s9
 8018c24:	eee5 7a25 	vfma.f32	s15, s10, s11
 8018c28:	eee6 7a2d 	vfma.f32	s15, s12, s27
 8018c2c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018c30:	db97      	blt.n	8018b62 <forward_lite_conv2d_if32of32wf32+0x1ba>
 8018c32:	4471      	add	r1, lr
 8018c34:	4472      	add	r2, lr
 8018c36:	4648      	mov	r0, r9
 8018c38:	4286      	cmp	r6, r0
 8018c3a:	dd10      	ble.n	8018c5e <forward_lite_conv2d_if32of32wf32+0x2b6>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	460d      	mov	r5, r1
 8018c40:	4614      	mov	r4, r2
 8018c42:	3301      	adds	r3, #1
 8018c44:	ecb4 6a01 	vldmia	r4!, {s12}
 8018c48:	ecf5 7a01 	vldmia	r5!, {s15}
 8018c4c:	429e      	cmp	r6, r3
 8018c4e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018c52:	d1f6      	bne.n	8018c42 <forward_lite_conv2d_if32of32wf32+0x29a>
 8018c54:	1a30      	subs	r0, r6, r0
 8018c56:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8018c5a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 8018c5e:	f10c 0c01 	add.w	ip, ip, #1
 8018c62:	4459      	add	r1, fp
 8018c64:	4452      	add	r2, sl
 8018c66:	45e0      	cmp	r8, ip
 8018c68:	f47f af73 	bne.w	8018b52 <forward_lite_conv2d_if32of32wf32+0x1aa>
 8018c6c:	9c08      	ldr	r4, [sp, #32]
 8018c6e:	9b03      	ldr	r3, [sp, #12]
 8018c70:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 8018c74:	9a05      	ldr	r2, [sp, #20]
 8018c76:	3401      	adds	r4, #1
 8018c78:	9902      	ldr	r1, [sp, #8]
 8018c7a:	4415      	add	r5, r2
 8018c7c:	1a9b      	subs	r3, r3, r2
 8018c7e:	ed80 7a00 	vstr	s14, [r0]
 8018c82:	4408      	add	r0, r1
 8018c84:	9a01      	ldr	r2, [sp, #4]
 8018c86:	9904      	ldr	r1, [sp, #16]
 8018c88:	440a      	add	r2, r1
 8018c8a:	9201      	str	r2, [sp, #4]
 8018c8c:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 8018c8e:	42a2      	cmp	r2, r4
 8018c90:	f47f af24 	bne.w	8018adc <forward_lite_conv2d_if32of32wf32+0x134>
 8018c94:	f8dd a07c 	ldr.w	sl, [sp, #124]	@ 0x7c
 8018c98:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018c9a:	f10a 0a04 	add.w	sl, sl, #4
 8018c9e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8018ca0:	4413      	add	r3, r2
 8018ca2:	930a      	str	r3, [sp, #40]	@ 0x28
 8018ca4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8018ca6:	459a      	cmp	sl, r3
 8018ca8:	f4ff aefd 	bcc.w	8018aa6 <forward_lite_conv2d_if32of32wf32+0xfe>
 8018cac:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 8018cae:	e9dd 761a 	ldrd	r7, r6, [sp, #104]	@ 0x68
 8018cb2:	e9dd 591c 	ldrd	r5, r9, [sp, #112]	@ 0x70
 8018cb6:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8018cb8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8018cba:	4414      	add	r4, r2
 8018cbc:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8018cbe:	3301      	adds	r3, #1
 8018cc0:	4417      	add	r7, r2
 8018cc2:	1aad      	subs	r5, r5, r2
 8018cc4:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8018cc6:	930f      	str	r3, [sp, #60]	@ 0x3c
 8018cc8:	4416      	add	r6, r2
 8018cca:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 8018ccc:	429a      	cmp	r2, r3
 8018cce:	f47f aeba 	bne.w	8018a46 <forward_lite_conv2d_if32of32wf32+0x9e>
 8018cd2:	b021      	add	sp, #132	@ 0x84
 8018cd4:	ecbd 8b0e 	vpop	{d8-d14}
 8018cd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8018cdc:	2000      	movs	r0, #0
 8018cde:	e7ab      	b.n	8018c38 <forward_lite_conv2d_if32of32wf32+0x290>
 8018ce0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018ce2:	461e      	mov	r6, r3
 8018ce4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8018ce6:	441a      	add	r2, r3
 8018ce8:	9103      	str	r1, [sp, #12]
 8018cea:	e6fe      	b.n	8018aea <forward_lite_conv2d_if32of32wf32+0x142>
 8018cec:	eeb0 7a66 	vmov.f32	s14, s13
 8018cf0:	e7c0      	b.n	8018c74 <forward_lite_conv2d_if32of32wf32+0x2cc>
 8018cf2:	eef0 6a48 	vmov.f32	s13, s16
 8018cf6:	e6e3      	b.n	8018ac0 <forward_lite_conv2d_if32of32wf32+0x118>
 8018cf8:	00000000 	.word	0x00000000
 8018cfc:	9a02      	ldr	r2, [sp, #8]
 8018cfe:	eb04 0c02 	add.w	ip, r4, r2
 8018d02:	4564      	cmp	r4, ip
 8018d04:	d2d7      	bcs.n	8018cb6 <forward_lite_conv2d_if32of32wf32+0x30e>
 8018d06:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018d08:	4683      	mov	fp, r0
 8018d0a:	9911      	ldr	r1, [sp, #68]	@ 0x44
 8018d0c:	fb02 f303 	mul.w	r3, r2, r3
 8018d10:	4622      	mov	r2, r4
 8018d12:	9109      	str	r1, [sp, #36]	@ 0x24
 8018d14:	930a      	str	r3, [sp, #40]	@ 0x28
 8018d16:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8018d18:	970e      	str	r7, [sp, #56]	@ 0x38
 8018d1a:	eb03 0e09 	add.w	lr, r3, r9
 8018d1e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8018d20:	9615      	str	r6, [sp, #84]	@ 0x54
 8018d22:	9517      	str	r5, [sp, #92]	@ 0x5c
 8018d24:	941a      	str	r4, [sp, #104]	@ 0x68
 8018d26:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8018d28:	2900      	cmp	r1, #0
 8018d2a:	f000 810d 	beq.w	8018f48 <forward_lite_conv2d_if32of32wf32+0x5a0>
 8018d2e:	ecf3 6a01 	vldmia	r3!, {s13}
 8018d32:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 8018d34:	2900      	cmp	r1, #0
 8018d36:	f000 80ef 	beq.w	8018f18 <forward_lite_conv2d_if32of32wf32+0x570>
 8018d3a:	2100      	movs	r1, #0
 8018d3c:	9812      	ldr	r0, [sp, #72]	@ 0x48
 8018d3e:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8018d40:	f8cd e004 	str.w	lr, [sp, #4]
 8018d44:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
 8018d48:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
 8018d4c:	460b      	mov	r3, r1
 8018d4e:	4611      	mov	r1, r2
 8018d50:	461d      	mov	r5, r3
 8018d52:	e9cd c91d 	strd	ip, r9, [sp, #116]	@ 0x74
 8018d56:	2e00      	cmp	r6, #0
 8018d58:	f2c0 80ed 	blt.w	8018f36 <forward_lite_conv2d_if32of32wf32+0x58e>
 8018d5c:	9b01      	ldr	r3, [sp, #4]
 8018d5e:	2400      	movs	r4, #0
 8018d60:	9303      	str	r3, [sp, #12]
 8018d62:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018d64:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8018d66:	9f00      	ldr	r7, [sp, #0]
 8018d68:	fb03 2307 	mla	r3, r3, r7, r2
 8018d6c:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8018d6e:	1817      	adds	r7, r2, r0
 8018d70:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018d72:	4297      	cmp	r7, r2
 8018d74:	bf94      	ite	ls
 8018d76:	ebc4 0407 	rsbls	r4, r4, r7
 8018d7a:	ebc4 0402 	rsbhi	r4, r4, r2
 8018d7e:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8018d80:	f1bb 0f00 	cmp.w	fp, #0
 8018d84:	eba2 0a04 	sub.w	sl, r2, r4
 8018d88:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8018d8a:	eba2 0904 	sub.w	r9, r2, r4
 8018d8e:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8018d90:	fb02 f404 	mul.w	r4, r2, r4
 8018d94:	f340 80d5 	ble.w	8018f42 <forward_lite_conv2d_if32of32wf32+0x59a>
 8018d98:	f024 0c0f 	bic.w	ip, r4, #15
 8018d9c:	9f00      	ldr	r7, [sp, #0]
 8018d9e:	eeb0 7a66 	vmov.f32	s14, s13
 8018da2:	9a03      	ldr	r2, [sp, #12]
 8018da4:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8018da8:	fb07 fa0a 	mul.w	sl, r7, sl
 8018dac:	fb07 f909 	mul.w	r9, r7, r9
 8018db0:	2700      	movs	r7, #0
 8018db2:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8018db6:	9508      	str	r5, [sp, #32]
 8018db8:	9003      	str	r0, [sp, #12]
 8018dba:	f108 0801 	add.w	r8, r8, #1
 8018dbe:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8018dc2:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8018dc6:	e9cd 1606 	strd	r1, r6, [sp, #24]
 8018dca:	f1bc 0f00 	cmp.w	ip, #0
 8018dce:	f340 80b0 	ble.w	8018f32 <forward_lite_conv2d_if32of32wf32+0x58a>
 8018dd2:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8018dd6:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8018dda:	2500      	movs	r5, #0
 8018ddc:	ed11 6a0f 	vldr	s12, [r1, #-60]	@ 0xffffffc4
 8018de0:	3510      	adds	r5, #16
 8018de2:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8018de6:	3140      	adds	r1, #64	@ 0x40
 8018de8:	ed10 5a10 	vldr	s10, [r0, #-64]	@ 0xffffffc0
 8018dec:	4565      	cmp	r5, ip
 8018dee:	ee67 7a86 	vmul.f32	s15, s15, s12
 8018df2:	ed51 4a20 	vldr	s9, [r1, #-128]	@ 0xffffff80
 8018df6:	ed10 6a0e 	vldr	s12, [r0, #-56]	@ 0xffffffc8
 8018dfa:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8018dfe:	ed51 5a1e 	vldr	s11, [r1, #-120]	@ 0xffffff88
 8018e02:	eee4 7a85 	vfma.f32	s15, s9, s10
 8018e06:	ed51 da1d 	vldr	s27, [r1, #-116]	@ 0xffffff8c
 8018e0a:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8018e0e:	ed10 da1c 	vldr	s26, [r0, #-112]	@ 0xffffff90
 8018e12:	ed51 ca1c 	vldr	s25, [r1, #-112]	@ 0xffffff90
 8018e16:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8018e1a:	ed51 ba1b 	vldr	s23, [r1, #-108]	@ 0xffffff94
 8018e1e:	eee5 7a86 	vfma.f32	s15, s11, s12
 8018e22:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 8018e26:	ed51 aa1a 	vldr	s21, [r1, #-104]	@ 0xffffff98
 8018e2a:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8018e2e:	ed51 9a19 	vldr	s19, [r1, #-100]	@ 0xffffff9c
 8018e32:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8018e36:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 8018e3a:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8018e3e:	ed50 0a17 	vldr	s1, [r0, #-92]	@ 0xffffffa4
 8018e42:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8018e46:	ed50 1a16 	vldr	s3, [r0, #-88]	@ 0xffffffa8
 8018e4a:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8018e4e:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8018e52:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 8018e56:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8018e5a:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8018e5e:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8018e62:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 8018e66:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 8018e6a:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8018e6e:	ed11 5a12 	vldr	s10, [r1, #-72]	@ 0xffffffb8
 8018e72:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8018e76:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 8018e7a:	ed51 da11 	vldr	s27, [r1, #-68]	@ 0xffffffbc
 8018e7e:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8018e82:	eeea 7a29 	vfma.f32	s15, s20, s19
 8018e86:	eee9 7a28 	vfma.f32	s15, s18, s17
 8018e8a:	eee0 7a20 	vfma.f32	s15, s0, s1
 8018e8e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8018e92:	eee2 7a22 	vfma.f32	s15, s4, s5
 8018e96:	eee3 7a23 	vfma.f32	s15, s6, s7
 8018e9a:	eee4 7a24 	vfma.f32	s15, s8, s9
 8018e9e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8018ea2:	eee6 7a2d 	vfma.f32	s15, s12, s27
 8018ea6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8018eaa:	db97      	blt.n	8018ddc <forward_lite_conv2d_if32of32wf32+0x434>
 8018eac:	4472      	add	r2, lr
 8018eae:	4473      	add	r3, lr
 8018eb0:	4641      	mov	r1, r8
 8018eb2:	428c      	cmp	r4, r1
 8018eb4:	dd10      	ble.n	8018ed8 <forward_lite_conv2d_if32of32wf32+0x530>
 8018eb6:	4608      	mov	r0, r1
 8018eb8:	4616      	mov	r6, r2
 8018eba:	461d      	mov	r5, r3
 8018ebc:	3001      	adds	r0, #1
 8018ebe:	ecb5 6a01 	vldmia	r5!, {s12}
 8018ec2:	ecf6 7a01 	vldmia	r6!, {s15}
 8018ec6:	4284      	cmp	r4, r0
 8018ec8:	eea6 7a27 	vfma.f32	s14, s12, s15
 8018ecc:	d1f6      	bne.n	8018ebc <forward_lite_conv2d_if32of32wf32+0x514>
 8018ece:	1a61      	subs	r1, r4, r1
 8018ed0:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8018ed4:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8018ed8:	3701      	adds	r7, #1
 8018eda:	4452      	add	r2, sl
 8018edc:	444b      	add	r3, r9
 8018ede:	45bb      	cmp	fp, r7
 8018ee0:	f47f af73 	bne.w	8018dca <forward_lite_conv2d_if32of32wf32+0x422>
 8018ee4:	9d08      	ldr	r5, [sp, #32]
 8018ee6:	9803      	ldr	r0, [sp, #12]
 8018ee8:	e9dd 1606 	ldrd	r1, r6, [sp, #24]
 8018eec:	9b05      	ldr	r3, [sp, #20]
 8018eee:	3501      	adds	r5, #1
 8018ef0:	9a02      	ldr	r2, [sp, #8]
 8018ef2:	441e      	add	r6, r3
 8018ef4:	1ac0      	subs	r0, r0, r3
 8018ef6:	ed81 7a00 	vstr	s14, [r1]
 8018efa:	4411      	add	r1, r2
 8018efc:	9b01      	ldr	r3, [sp, #4]
 8018efe:	9a04      	ldr	r2, [sp, #16]
 8018f00:	4413      	add	r3, r2
 8018f02:	9301      	str	r3, [sp, #4]
 8018f04:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8018f06:	42ab      	cmp	r3, r5
 8018f08:	f47f af25 	bne.w	8018d56 <forward_lite_conv2d_if32of32wf32+0x3ae>
 8018f0c:	f8dd e07c 	ldr.w	lr, [sp, #124]	@ 0x7c
 8018f10:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	@ 0x6c
 8018f14:	e9dd c91d 	ldrd	ip, r9, [sp, #116]	@ 0x74
 8018f18:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8018f1a:	3204      	adds	r2, #4
 8018f1c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 8018f1e:	4562      	cmp	r2, ip
 8018f20:	4401      	add	r1, r0
 8018f22:	9109      	str	r1, [sp, #36]	@ 0x24
 8018f24:	f4ff aeff 	bcc.w	8018d26 <forward_lite_conv2d_if32of32wf32+0x37e>
 8018f28:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 8018f2a:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8018f2c:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 8018f2e:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 8018f30:	e6c1      	b.n	8018cb6 <forward_lite_conv2d_if32of32wf32+0x30e>
 8018f32:	2100      	movs	r1, #0
 8018f34:	e7bd      	b.n	8018eb2 <forward_lite_conv2d_if32of32wf32+0x50a>
 8018f36:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8018f38:	4604      	mov	r4, r0
 8018f3a:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8018f3c:	4403      	add	r3, r0
 8018f3e:	9203      	str	r2, [sp, #12]
 8018f40:	e710      	b.n	8018d64 <forward_lite_conv2d_if32of32wf32+0x3bc>
 8018f42:	eeb0 7a66 	vmov.f32	s14, s13
 8018f46:	e7d1      	b.n	8018eec <forward_lite_conv2d_if32of32wf32+0x544>
 8018f48:	eef0 6a48 	vmov.f32	s13, s16
 8018f4c:	e6f1      	b.n	8018d32 <forward_lite_conv2d_if32of32wf32+0x38a>
 8018f4e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8018f50:	462b      	mov	r3, r5
 8018f52:	920b      	str	r2, [sp, #44]	@ 0x2c
 8018f54:	e57c      	b.n	8018a50 <forward_lite_conv2d_if32of32wf32+0xa8>
 8018f56:	bf00      	nop

08018f58 <forward_lite_conv2d_if32of32wf32_pool>:
 8018f58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018f5c:	ed2d 8b0e 	vpush	{d8-d14}
 8018f60:	b0c5      	sub	sp, #276	@ 0x114
 8018f62:	4694      	mov	ip, r2
 8018f64:	4680      	mov	r8, r0
 8018f66:	f9bd 4178 	ldrsh.w	r4, [sp, #376]	@ 0x178
 8018f6a:	f9bd 51bc 	ldrsh.w	r5, [sp, #444]	@ 0x1bc
 8018f6e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8018f70:	9410      	str	r4, [sp, #64]	@ 0x40
 8018f72:	f9bd 31dc 	ldrsh.w	r3, [sp, #476]	@ 0x1dc
 8018f76:	f8bd 41a0 	ldrh.w	r4, [sp, #416]	@ 0x1a0
 8018f7a:	912e      	str	r1, [sp, #184]	@ 0xb8
 8018f7c:	922f      	str	r2, [sp, #188]	@ 0xbc
 8018f7e:	fb05 f103 	mul.w	r1, r5, r3
 8018f82:	f9bd 2190 	ldrsh.w	r2, [sp, #400]	@ 0x190
 8018f86:	9327      	str	r3, [sp, #156]	@ 0x9c
 8018f88:	9411      	str	r4, [sp, #68]	@ 0x44
 8018f8a:	f9bd 3184 	ldrsh.w	r3, [sp, #388]	@ 0x184
 8018f8e:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	@ 0x1a4
 8018f92:	f9bd 718c 	ldrsh.w	r7, [sp, #396]	@ 0x18c
 8018f96:	f9bd 6180 	ldrsh.w	r6, [sp, #384]	@ 0x180
 8018f9a:	9339      	str	r3, [sp, #228]	@ 0xe4
 8018f9c:	2f00      	cmp	r7, #0
 8018f9e:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	@ 0x188
 8018fa2:	920a      	str	r2, [sp, #40]	@ 0x28
 8018fa4:	9426      	str	r4, [sp, #152]	@ 0x98
 8018fa6:	f8bd 2198 	ldrh.w	r2, [sp, #408]	@ 0x198
 8018faa:	f9bd 41a8 	ldrsh.w	r4, [sp, #424]	@ 0x1a8
 8018fae:	f9bd e17c 	ldrsh.w	lr, [sp, #380]	@ 0x17c
 8018fb2:	9038      	str	r0, [sp, #224]	@ 0xe0
 8018fb4:	9330      	str	r3, [sp, #192]	@ 0xc0
 8018fb6:	f8bd 019c 	ldrh.w	r0, [sp, #412]	@ 0x19c
 8018fba:	fb0e f101 	mul.w	r1, lr, r1
 8018fbe:	9225      	str	r2, [sp, #148]	@ 0x94
 8018fc0:	f9bd 3194 	ldrsh.w	r3, [sp, #404]	@ 0x194
 8018fc4:	950d      	str	r5, [sp, #52]	@ 0x34
 8018fc6:	9731      	str	r7, [sp, #196]	@ 0xc4
 8018fc8:	960f      	str	r6, [sp, #60]	@ 0x3c
 8018fca:	943a      	str	r4, [sp, #232]	@ 0xe8
 8018fcc:	f9bd 41d8 	ldrsh.w	r4, [sp, #472]	@ 0x1d8
 8018fd0:	f9bd 21c0 	ldrsh.w	r2, [sp, #448]	@ 0x1c0
 8018fd4:	943b      	str	r4, [sp, #236]	@ 0xec
 8018fd6:	f9bd 41e0 	ldrsh.w	r4, [sp, #480]	@ 0x1e0
 8018fda:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8018fde:	943c      	str	r4, [sp, #240]	@ 0xf0
 8018fe0:	f9bd 41e4 	ldrsh.w	r4, [sp, #484]	@ 0x1e4
 8018fe4:	9420      	str	r4, [sp, #128]	@ 0x80
 8018fe6:	f9bd 41e8 	ldrsh.w	r4, [sp, #488]	@ 0x1e8
 8018fea:	943d      	str	r4, [sp, #244]	@ 0xf4
 8018fec:	f9bd 41ec 	ldrsh.w	r4, [sp, #492]	@ 0x1ec
 8018ff0:	940c      	str	r4, [sp, #48]	@ 0x30
 8018ff2:	f1c0 0400 	rsb	r4, r0, #0
 8018ff6:	941b      	str	r4, [sp, #108]	@ 0x6c
 8018ff8:	f340 8270 	ble.w	80194dc <forward_lite_conv2d_if32of32wf32_pool+0x584>
 8018ffc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8018ffe:	2a00      	cmp	r2, #0
 8019000:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 8019002:	fb07 f303 	mul.w	r3, r7, r3
 8019006:	ed9f 8a72 	vldr	s16, [pc, #456]	@ 80191d0 <forward_lite_conv2d_if32of32wf32_pool+0x278>
 801900a:	901c      	str	r0, [sp, #112]	@ 0x70
 801900c:	fb04 f303 	mul.w	r3, r4, r3
 8019010:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8019012:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8019016:	fb0e f300 	mul.w	r3, lr, r0
 801901a:	fb05 f303 	mul.w	r3, r5, r3
 801901e:	9721      	str	r7, [sp, #132]	@ 0x84
 8019020:	ea4f 0784 	mov.w	r7, r4, lsl #2
 8019024:	ea4f 0083 	mov.w	r0, r3, lsl #2
 8019028:	fb0e f505 	mul.w	r5, lr, r5
 801902c:	9712      	str	r7, [sp, #72]	@ 0x48
 801902e:	9035      	str	r0, [sp, #212]	@ 0xd4
 8019030:	9826      	ldr	r0, [sp, #152]	@ 0x98
 8019032:	9534      	str	r5, [sp, #208]	@ 0xd0
 8019034:	f10c 4578 	add.w	r5, ip, #4160749568	@ 0xf8000000
 8019038:	fb00 f306 	mul.w	r3, r0, r6
 801903c:	9532      	str	r5, [sp, #200]	@ 0xc8
 801903e:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8019042:	fb04 f303 	mul.w	r3, r4, r3
 8019046:	950e      	str	r5, [sp, #56]	@ 0x38
 8019048:	ea4f 0083 	mov.w	r0, r3, lsl #2
 801904c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 801904e:	902c      	str	r0, [sp, #176]	@ 0xb0
 8019050:	ea4f 0081 	mov.w	r0, r1, lsl #2
 8019054:	fb0e f303 	mul.w	r3, lr, r3
 8019058:	902a      	str	r0, [sp, #168]	@ 0xa8
 801905a:	985c      	ldr	r0, [sp, #368]	@ 0x170
 801905c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8019060:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8019062:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019064:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8019068:	fb06 f307 	mul.w	r3, r6, r7
 801906c:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8019070:	9133      	str	r1, [sp, #204]	@ 0xcc
 8019072:	4639      	mov	r1, r7
 8019074:	fb00 8603 	mla	r6, r0, r3, r8
 8019078:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801907a:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 801907c:	961d      	str	r6, [sp, #116]	@ 0x74
 801907e:	f1c3 0600 	rsb	r6, r3, #0
 8019082:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8019084:	f1c0 0000 	rsb	r0, r0, #0
 8019088:	9629      	str	r6, [sp, #164]	@ 0xa4
 801908a:	fb03 f304 	mul.w	r3, r3, r4
 801908e:	f04f 0400 	mov.w	r4, #0
 8019092:	9023      	str	r0, [sp, #140]	@ 0x8c
 8019094:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8019098:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801909a:	fb06 f001 	mul.w	r0, r6, r1
 801909e:	9e5c      	ldr	r6, [sp, #368]	@ 0x170
 80190a0:	932b      	str	r3, [sp, #172]	@ 0xac
 80190a2:	4698      	mov	r8, r3
 80190a4:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
 80190a8:	9713      	str	r7, [sp, #76]	@ 0x4c
 80190aa:	9424      	str	r4, [sp, #144]	@ 0x90
 80190ac:	464f      	mov	r7, r9
 80190ae:	b21b      	sxth	r3, r3
 80190b0:	941e      	str	r4, [sp, #120]	@ 0x78
 80190b2:	902d      	str	r0, [sp, #180]	@ 0xb4
 80190b4:	4634      	mov	r4, r6
 80190b6:	9322      	str	r3, [sp, #136]	@ 0x88
 80190b8:	4676      	mov	r6, lr
 80190ba:	f300 808b 	bgt.w	80191d4 <forward_lite_conv2d_if32of32wf32_pool+0x27c>
 80190be:	2b00      	cmp	r3, #0
 80190c0:	f280 822b 	bge.w	801951a <forward_lite_conv2d_if32of32wf32_pool+0x5c2>
 80190c4:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 80190c6:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 80190c8:	fb03 f308 	mul.w	r3, r3, r8
 80190cc:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 80190d0:	429a      	cmp	r2, r3
 80190d2:	d901      	bls.n	80190d8 <forward_lite_conv2d_if32of32wf32_pool+0x180>
 80190d4:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 80190d6:	4413      	add	r3, r2
 80190d8:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 80190da:	429a      	cmp	r2, r3
 80190dc:	d213      	bcs.n	8019106 <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80190de:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80190e0:	4542      	cmp	r2, r8
 80190e2:	d010      	beq.n	8019106 <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80190e4:	459b      	cmp	fp, r3
 80190e6:	d90e      	bls.n	8019106 <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80190e8:	4621      	mov	r1, r4
 80190ea:	461a      	mov	r2, r3
 80190ec:	f852 0b04 	ldr.w	r0, [r2], #4
 80190f0:	4593      	cmp	fp, r2
 80190f2:	f841 0b04 	str.w	r0, [r1], #4
 80190f6:	d8f9      	bhi.n	80190ec <forward_lite_conv2d_if32of32wf32_pool+0x194>
 80190f8:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80190fc:	1ad3      	subs	r3, r2, r3
 80190fe:	f023 0303 	bic.w	r3, r3, #3
 8019102:	3304      	adds	r3, #4
 8019104:	441c      	add	r4, r3
 8019106:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8019108:	fa1f f388 	uxth.w	r3, r8
 801910c:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 801910e:	440a      	add	r2, r1
 8019110:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 8019112:	1ad2      	subs	r2, r2, r3
 8019114:	440c      	add	r4, r1
 8019116:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8019118:	b212      	sxth	r2, r2
 801911a:	45a3      	cmp	fp, r4
 801911c:	440b      	add	r3, r1
 801911e:	9224      	str	r2, [sp, #144]	@ 0x90
 8019120:	fa0f f883 	sxth.w	r8, r3
 8019124:	d803      	bhi.n	801912e <forward_lite_conv2d_if32of32wf32_pool+0x1d6>
 8019126:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8019128:	441c      	add	r4, r3
 801912a:	45a3      	cmp	fp, r4
 801912c:	d9fc      	bls.n	8019128 <forward_lite_conv2d_if32of32wf32_pool+0x1d0>
 801912e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8019130:	4542      	cmp	r2, r8
 8019132:	f300 81c3 	bgt.w	80194bc <forward_lite_conv2d_if32of32wf32_pool+0x564>
 8019136:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 8019138:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 801913a:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 801913c:	4428      	add	r0, r5
 801913e:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8019140:	9108      	str	r1, [sp, #32]
 8019142:	901b      	str	r0, [sp, #108]	@ 0x6c
 8019144:	3301      	adds	r3, #1
 8019146:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8019148:	b21b      	sxth	r3, r3
 801914a:	f8dd a0ac 	ldr.w	sl, [sp, #172]	@ 0xac
 801914e:	4401      	add	r1, r0
 8019150:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8019152:	931e      	str	r3, [sp, #120]	@ 0x78
 8019154:	b293      	uxth	r3, r2
 8019156:	912e      	str	r1, [sp, #184]	@ 0xb8
 8019158:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801915a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801915c:	1b49      	subs	r1, r1, r5
 801915e:	9301      	str	r3, [sp, #4]
 8019160:	1a9b      	subs	r3, r3, r2
 8019162:	9d75      	ldr	r5, [sp, #468]	@ 0x1d4
 8019164:	911c      	str	r1, [sp, #112]	@ 0x70
 8019166:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8019168:	b29a      	uxth	r2, r3
 801916a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 801916e:	4401      	add	r1, r0
 8019170:	985c      	ldr	r0, [sp, #368]	@ 0x170
 8019172:	9305      	str	r3, [sp, #20]
 8019174:	911d      	str	r1, [sp, #116]	@ 0x74
 8019176:	eba8 0103 	sub.w	r1, r8, r3
 801917a:	fa1f f38a 	uxth.w	r3, sl
 801917e:	fa0f f881 	sxth.w	r8, r1
 8019182:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8019186:	9303      	str	r3, [sp, #12]
 8019188:	2301      	movs	r3, #1
 801918a:	9307      	str	r3, [sp, #28]
 801918c:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	@ 0xc0
 8019190:	9306      	str	r3, [sp, #24]
 8019192:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 8019196:	9304      	str	r3, [sp, #16]
 8019198:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 801919c:	9302      	str	r3, [sp, #8]
 801919e:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	@ 0xec
 80191a2:	9300      	str	r3, [sp, #0]
 80191a4:	b2b3      	uxth	r3, r6
 80191a6:	47a8      	blx	r5
 80191a8:	4652      	mov	r2, sl
 80191aa:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80191ac:	1a53      	subs	r3, r2, r1
 80191ae:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80191b2:	b21a      	sxth	r2, r3
 80191b4:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 80191b6:	922b      	str	r2, [sp, #172]	@ 0xac
 80191b8:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 80191ba:	429a      	cmp	r2, r3
 80191bc:	f340 818e 	ble.w	80194dc <forward_lite_conv2d_if32of32wf32_pool+0x584>
 80191c0:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 80191c2:	1e53      	subs	r3, r2, #1
 80191c4:	2a00      	cmp	r2, #0
 80191c6:	b21b      	sxth	r3, r3
 80191c8:	9322      	str	r3, [sp, #136]	@ 0x88
 80191ca:	f77f af78 	ble.w	80190be <forward_lite_conv2d_if32of32wf32_pool+0x166>
 80191ce:	e001      	b.n	80191d4 <forward_lite_conv2d_if32of32wf32_pool+0x27c>
 80191d0:	00000000 	.word	0x00000000
 80191d4:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80191d6:	2b00      	cmp	r3, #0
 80191d8:	f2c0 82d3 	blt.w	8019782 <forward_lite_conv2d_if32of32wf32_pool+0x82a>
 80191dc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80191de:	931a      	str	r3, [sp, #104]	@ 0x68
 80191e0:	2300      	movs	r3, #0
 80191e2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 80191e4:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 80191e6:	440a      	add	r2, r1
 80191e8:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 80191ea:	428a      	cmp	r2, r1
 80191ec:	bfd4      	ite	le
 80191ee:	ebc3 0202 	rsble	r2, r3, r2
 80191f2:	ebc3 0201 	rsbgt	r2, r3, r1
 80191f6:	4615      	mov	r5, r2
 80191f8:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 80191fa:	2a00      	cmp	r2, #0
 80191fc:	f000 8191 	beq.w	8019522 <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 8019200:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8019202:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8019206:	f0c0 818c 	bcc.w	8019522 <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 801920a:	2e00      	cmp	r6, #0
 801920c:	f340 8127 	ble.w	801945e <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8019210:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019212:	46a2      	mov	sl, r4
 8019214:	f8cd 8108 	str.w	r8, [sp, #264]	@ 0x108
 8019218:	46a8      	mov	r8, r5
 801921a:	fb02 f303 	mul.w	r3, r2, r3
 801921e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8019220:	f8cd 91c8 	str.w	r9, [sp, #456]	@ 0x1c8
 8019224:	9318      	str	r3, [sp, #96]	@ 0x60
 8019226:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019228:	18e3      	adds	r3, r4, r3
 801922a:	9336      	str	r3, [sp, #216]	@ 0xd8
 801922c:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801922e:	4413      	add	r3, r2
 8019230:	9337      	str	r3, [sp, #220]	@ 0xdc
 8019232:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8019234:	9328      	str	r3, [sp, #160]	@ 0xa0
 8019236:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8019238:	e9cd 7b3e 	strd	r7, fp, [sp, #248]	@ 0xf8
 801923c:	9319      	str	r3, [sp, #100]	@ 0x64
 801923e:	e9cd 4640 	strd	r4, r6, [sp, #256]	@ 0x100
 8019242:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019244:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8019246:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8019248:	f001 fb06 	bl	801a858 <st_int8_copy>
 801924c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801924e:	2b00      	cmp	r3, #0
 8019250:	f000 8160 	beq.w	8019514 <forward_lite_conv2d_if32of32wf32_pool+0x5bc>
 8019254:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8019256:	ecf3 6a01 	vldmia	r3!, {s13}
 801925a:	9328      	str	r3, [sp, #160]	@ 0xa0
 801925c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801925e:	2b00      	cmp	r3, #0
 8019260:	f000 80eb 	beq.w	801943a <forward_lite_conv2d_if32of32wf32_pool+0x4e2>
 8019264:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8019266:	2500      	movs	r5, #0
 8019268:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801926a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 801926c:	4413      	add	r3, r2
 801926e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8019270:	f8cd a10c 	str.w	sl, [sp, #268]	@ 0x10c
 8019274:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
 8019278:	462a      	mov	r2, r5
 801927a:	4655      	mov	r5, sl
 801927c:	4610      	mov	r0, r2
 801927e:	2c00      	cmp	r4, #0
 8019280:	f2c0 813e 	blt.w	8019500 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8019284:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019286:	2600      	movs	r6, #0
 8019288:	9214      	str	r2, [sp, #80]	@ 0x50
 801928a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801928c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 801928e:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8019290:	429f      	cmp	r7, r3
 8019292:	bf94      	ite	ls
 8019294:	ebc6 0607 	rsbls	r6, r6, r7
 8019298:	ebc6 0603 	rsbhi	r6, r6, r3
 801929c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 801929e:	f1b8 0f00 	cmp.w	r8, #0
 80192a2:	fb02 1207 	mla	r2, r2, r7, r1
 80192a6:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80192a8:	eba1 0b06 	sub.w	fp, r1, r6
 80192ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80192ae:	eba1 0a06 	sub.w	sl, r1, r6
 80192b2:	9910      	ldr	r1, [sp, #64]	@ 0x40
 80192b4:	fb01 f606 	mul.w	r6, r1, r6
 80192b8:	f340 8129 	ble.w	801950e <forward_lite_conv2d_if32of32wf32_pool+0x5b6>
 80192bc:	fb07 fb0b 	mul.w	fp, r7, fp
 80192c0:	eeb0 7a66 	vmov.f32	s14, s13
 80192c4:	fb07 fa0a 	mul.w	sl, r7, sl
 80192c8:	f026 070f 	bic.w	r7, r6, #15
 80192cc:	f04f 0c00 	mov.w	ip, #0
 80192d0:	9914      	ldr	r1, [sp, #80]	@ 0x50
 80192d2:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 80192d6:	ea4f 1919 	mov.w	r9, r9, lsr #4
 80192da:	f109 0901 	add.w	r9, r9, #1
 80192de:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 80192e2:	ea4f 1909 	mov.w	r9, r9, lsl #4
 80192e6:	e9cd 5414 	strd	r5, r4, [sp, #80]	@ 0x50
 80192ea:	e9cd 0316 	strd	r0, r3, [sp, #88]	@ 0x58
 80192ee:	2f00      	cmp	r7, #0
 80192f0:	f340 8104 	ble.w	80194fc <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 80192f4:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 80192f8:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 80192fc:	2400      	movs	r4, #0
 80192fe:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 8019302:	3410      	adds	r4, #16
 8019304:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8019308:	3340      	adds	r3, #64	@ 0x40
 801930a:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 801930e:	42bc      	cmp	r4, r7
 8019310:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019314:	ed13 4a20 	vldr	s8, [r3, #-128]	@ 0xffffff80
 8019318:	ed10 5a0e 	vldr	s10, [r0, #-56]	@ 0xffffffc8
 801931c:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8019320:	ed53 5a1e 	vldr	s11, [r3, #-120]	@ 0xffffff88
 8019324:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019328:	ed13 6a1d 	vldr	s12, [r3, #-116]	@ 0xffffff8c
 801932c:	ed50 da1d 	vldr	s27, [r0, #-116]	@ 0xffffff8c
 8019330:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8019334:	ed50 ca1c 	vldr	s25, [r0, #-112]	@ 0xffffff90
 8019338:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 801933c:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8019340:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019344:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 8019348:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 801934c:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8019350:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8019354:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8019358:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 801935c:	eeed 7a86 	vfma.f32	s15, s27, s12
 8019360:	ed50 0a17 	vldr	s1, [r0, #-92]	@ 0xffffffa4
 8019364:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8019368:	ed50 1a16 	vldr	s3, [r0, #-88]	@ 0xffffffa8
 801936c:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8019370:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8019374:	ed13 2a15 	vldr	s4, [r3, #-84]	@ 0xffffffac
 8019378:	eeed 7a2c 	vfma.f32	s15, s26, s25
 801937c:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8019380:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8019384:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8019388:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 801938c:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8019390:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8019394:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8019398:	ed10 ea11 	vldr	s28, [r0, #-68]	@ 0xffffffbc
 801939c:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 80193a0:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80193a4:	eeea 7a29 	vfma.f32	s15, s20, s19
 80193a8:	eee9 7a28 	vfma.f32	s15, s18, s17
 80193ac:	eee0 7a20 	vfma.f32	s15, s0, s1
 80193b0:	eee1 7a21 	vfma.f32	s15, s2, s3
 80193b4:	eee2 7a22 	vfma.f32	s15, s4, s5
 80193b8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80193bc:	eee4 7a24 	vfma.f32	s15, s8, s9
 80193c0:	eee5 7a25 	vfma.f32	s15, s10, s11
 80193c4:	eee6 7a0e 	vfma.f32	s15, s12, s28
 80193c8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80193cc:	db97      	blt.n	80192fe <forward_lite_conv2d_if32of32wf32_pool+0x3a6>
 80193ce:	4471      	add	r1, lr
 80193d0:	4472      	add	r2, lr
 80193d2:	464d      	mov	r5, r9
 80193d4:	42ae      	cmp	r6, r5
 80193d6:	dd10      	ble.n	80193fa <forward_lite_conv2d_if32of32wf32_pool+0x4a2>
 80193d8:	462b      	mov	r3, r5
 80193da:	460c      	mov	r4, r1
 80193dc:	4610      	mov	r0, r2
 80193de:	3301      	adds	r3, #1
 80193e0:	ecb0 6a01 	vldmia	r0!, {s12}
 80193e4:	ecf4 7a01 	vldmia	r4!, {s15}
 80193e8:	429e      	cmp	r6, r3
 80193ea:	eea6 7a27 	vfma.f32	s14, s12, s15
 80193ee:	d1f6      	bne.n	80193de <forward_lite_conv2d_if32of32wf32_pool+0x486>
 80193f0:	1b75      	subs	r5, r6, r5
 80193f2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 80193f6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 80193fa:	f10c 0c01 	add.w	ip, ip, #1
 80193fe:	4459      	add	r1, fp
 8019400:	4452      	add	r2, sl
 8019402:	45e0      	cmp	r8, ip
 8019404:	f47f af73 	bne.w	80192ee <forward_lite_conv2d_if32of32wf32_pool+0x396>
 8019408:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	@ 0x50
 801940c:	e9dd 0316 	ldrd	r0, r3, [sp, #88]	@ 0x58
 8019410:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8019412:	3001      	adds	r0, #1
 8019414:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8019416:	ed85 7a00 	vstr	s14, [r5]
 801941a:	440d      	add	r5, r1
 801941c:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801941e:	4414      	add	r4, r2
 8019420:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8019422:	1a9b      	subs	r3, r3, r2
 8019424:	1a89      	subs	r1, r1, r2
 8019426:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8019428:	910c      	str	r1, [sp, #48]	@ 0x30
 801942a:	4282      	cmp	r2, r0
 801942c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801942e:	4431      	add	r1, r6
 8019430:	910b      	str	r1, [sp, #44]	@ 0x2c
 8019432:	f47f af24 	bne.w	801927e <forward_lite_conv2d_if32of32wf32_pool+0x326>
 8019436:	f8dd a10c 	ldr.w	sl, [sp, #268]	@ 0x10c
 801943a:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801943c:	f10a 0a04 	add.w	sl, sl, #4
 8019440:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8019442:	4413      	add	r3, r2
 8019444:	9319      	str	r3, [sp, #100]	@ 0x64
 8019446:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8019448:	459a      	cmp	sl, r3
 801944a:	f47f aefa 	bne.w	8019242 <forward_lite_conv2d_if32of32wf32_pool+0x2ea>
 801944e:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8019452:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8019456:	e9dd 7b3e 	ldrd	r7, fp, [sp, #248]	@ 0xf8
 801945a:	e9dd 4640 	ldrd	r4, r6, [sp, #256]	@ 0x100
 801945e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8019460:	2b00      	cmp	r3, #0
 8019462:	dd23      	ble.n	80194ac <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8019464:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8019466:	2b00      	cmp	r3, #0
 8019468:	d03d      	beq.n	80194e6 <forward_lite_conv2d_if32of32wf32_pool+0x58e>
 801946a:	469a      	mov	sl, r3
 801946c:	4643      	mov	r3, r8
 801946e:	2500      	movs	r5, #0
 8019470:	46b0      	mov	r8, r6
 8019472:	4626      	mov	r6, r4
 8019474:	461c      	mov	r4, r3
 8019476:	9a73      	ldr	r2, [sp, #460]	@ 0x1cc
 8019478:	463b      	mov	r3, r7
 801947a:	4631      	mov	r1, r6
 801947c:	4630      	mov	r0, r6
 801947e:	4417      	add	r7, r2
 8019480:	4642      	mov	r2, r8
 8019482:	47d0      	blx	sl
 8019484:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8019486:	9a74      	ldr	r2, [sp, #464]	@ 0x1d0
 8019488:	3501      	adds	r5, #1
 801948a:	441e      	add	r6, r3
 801948c:	eba7 0309 	sub.w	r3, r7, r9
 8019490:	4293      	cmp	r3, r2
 8019492:	bfa8      	it	ge
 8019494:	464f      	movge	r7, r9
 8019496:	455e      	cmp	r6, fp
 8019498:	d301      	bcc.n	801949e <forward_lite_conv2d_if32of32wf32_pool+0x546>
 801949a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801949c:	441e      	add	r6, r3
 801949e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 80194a0:	42ab      	cmp	r3, r5
 80194a2:	d1e8      	bne.n	8019476 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 80194a4:	4623      	mov	r3, r4
 80194a6:	4634      	mov	r4, r6
 80194a8:	4646      	mov	r6, r8
 80194aa:	4698      	mov	r8, r3
 80194ac:	f108 0301 	add.w	r3, r8, #1
 80194b0:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80194b2:	fa0f f883 	sxth.w	r8, r3
 80194b6:	4542      	cmp	r2, r8
 80194b8:	f77f ae3d 	ble.w	8019136 <forward_lite_conv2d_if32of32wf32_pool+0x1de>
 80194bc:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 80194be:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 80194c0:	4413      	add	r3, r2
 80194c2:	931b      	str	r3, [sp, #108]	@ 0x6c
 80194c4:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 80194c6:	1a9b      	subs	r3, r3, r2
 80194c8:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 80194ca:	931c      	str	r3, [sp, #112]	@ 0x70
 80194cc:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80194ce:	4413      	add	r3, r2
 80194d0:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 80194d2:	931d      	str	r3, [sp, #116]	@ 0x74
 80194d4:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 80194d6:	4293      	cmp	r3, r2
 80194d8:	f73f ae72 	bgt.w	80191c0 <forward_lite_conv2d_if32of32wf32_pool+0x268>
 80194dc:	b045      	add	sp, #276	@ 0x114
 80194de:	ecbd 8b0e 	vpop	{d8-d14}
 80194e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80194e6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80194e8:	3301      	adds	r3, #1
 80194ea:	4414      	add	r4, r2
 80194ec:	45a3      	cmp	fp, r4
 80194ee:	d801      	bhi.n	80194f4 <forward_lite_conv2d_if32of32wf32_pool+0x59c>
 80194f0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80194f2:	4414      	add	r4, r2
 80194f4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80194f6:	429a      	cmp	r2, r3
 80194f8:	d1f5      	bne.n	80194e6 <forward_lite_conv2d_if32of32wf32_pool+0x58e>
 80194fa:	e7d7      	b.n	80194ac <forward_lite_conv2d_if32of32wf32_pool+0x554>
 80194fc:	2500      	movs	r5, #0
 80194fe:	e769      	b.n	80193d4 <forward_lite_conv2d_if32of32wf32_pool+0x47c>
 8019500:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8019502:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8019504:	460e      	mov	r6, r1
 8019506:	440a      	add	r2, r1
 8019508:	991a      	ldr	r1, [sp, #104]	@ 0x68
 801950a:	9114      	str	r1, [sp, #80]	@ 0x50
 801950c:	e6be      	b.n	801928c <forward_lite_conv2d_if32of32wf32_pool+0x334>
 801950e:	eeb0 7a66 	vmov.f32	s14, s13
 8019512:	e77d      	b.n	8019410 <forward_lite_conv2d_if32of32wf32_pool+0x4b8>
 8019514:	eef0 6a48 	vmov.f32	s13, s16
 8019518:	e6a0      	b.n	801925c <forward_lite_conv2d_if32of32wf32_pool+0x304>
 801951a:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 801951e:	9322      	str	r3, [sp, #136]	@ 0x88
 8019520:	e605      	b.n	801912e <forward_lite_conv2d_if32of32wf32_pool+0x1d6>
 8019522:	2e00      	cmp	r6, #0
 8019524:	dd9b      	ble.n	801945e <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8019526:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8019528:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 801952a:	fb02 f303 	mul.w	r3, r2, r3
 801952e:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8019530:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 8019534:	46ab      	mov	fp, r5
 8019536:	9319      	str	r3, [sp, #100]	@ 0x64
 8019538:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801953a:	9118      	str	r1, [sp, #96]	@ 0x60
 801953c:	18e0      	adds	r0, r4, r3
 801953e:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8019540:	9728      	str	r7, [sp, #160]	@ 0xa0
 8019542:	eb03 0a02 	add.w	sl, r3, r2
 8019546:	4623      	mov	r3, r4
 8019548:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 801954a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 801954c:	2900      	cmp	r1, #0
 801954e:	f000 8115 	beq.w	801977c <forward_lite_conv2d_if32of32wf32_pool+0x824>
 8019552:	ecf2 6a01 	vldmia	r2!, {s13}
 8019556:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8019558:	2900      	cmp	r1, #0
 801955a:	f000 80f8 	beq.w	801974e <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 801955e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8019560:	469c      	mov	ip, r3
 8019562:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8019564:	933e      	str	r3, [sp, #248]	@ 0xf8
 8019566:	440d      	add	r5, r1
 8019568:	f8dd e0a4 	ldr.w	lr, [sp, #164]	@ 0xa4
 801956c:	9237      	str	r2, [sp, #220]	@ 0xdc
 801956e:	f8cd 91c8 	str.w	r9, [sp, #456]	@ 0x1c8
 8019572:	f8cd 810c 	str.w	r8, [sp, #268]	@ 0x10c
 8019576:	e9cd a10b 	strd	sl, r1, [sp, #44]	@ 0x2c
 801957a:	2100      	movs	r1, #0
 801957c:	460b      	mov	r3, r1
 801957e:	4661      	mov	r1, ip
 8019580:	469c      	mov	ip, r3
 8019582:	e9cd 403f 	strd	r4, r0, [sp, #252]	@ 0xfc
 8019586:	e9cd a641 	strd	sl, r6, [sp, #260]	@ 0x104
 801958a:	f1be 0f00 	cmp.w	lr, #0
 801958e:	f2c0 80ec 	blt.w	801976a <forward_lite_conv2d_if32of32wf32_pool+0x812>
 8019592:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019594:	2000      	movs	r0, #0
 8019596:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8019598:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801959a:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 801959c:	42ae      	cmp	r6, r5
 801959e:	bf94      	ite	ls
 80195a0:	ebc0 0006 	rsbls	r0, r0, r6
 80195a4:	ebc0 0005 	rsbhi	r0, r0, r5
 80195a8:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 80195aa:	f1bb 0f00 	cmp.w	fp, #0
 80195ae:	eba6 0900 	sub.w	r9, r6, r0
 80195b2:	fb03 7304 	mla	r3, r3, r4, r7
 80195b6:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 80195b8:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 80195ba:	eba7 0a00 	sub.w	sl, r7, r0
 80195be:	fb06 f000 	mul.w	r0, r6, r0
 80195c2:	f340 80d8 	ble.w	8019776 <forward_lite_conv2d_if32of32wf32_pool+0x81e>
 80195c6:	f020 080f 	bic.w	r8, r0, #15
 80195ca:	eeb0 7a66 	vmov.f32	s14, s13
 80195ce:	fb04 fa0a 	mul.w	sl, r4, sl
 80195d2:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 80195d6:	fb04 f909 	mul.w	r9, r4, r9
 80195da:	2400      	movs	r4, #0
 80195dc:	093f      	lsrs	r7, r7, #4
 80195de:	3701      	adds	r7, #1
 80195e0:	01be      	lsls	r6, r7, #6
 80195e2:	013f      	lsls	r7, r7, #4
 80195e4:	e9cd 1e14 	strd	r1, lr, [sp, #80]	@ 0x50
 80195e8:	e9cd c516 	strd	ip, r5, [sp, #88]	@ 0x58
 80195ec:	f1b8 0f00 	cmp.w	r8, #0
 80195f0:	f340 80b9 	ble.w	8019766 <forward_lite_conv2d_if32of32wf32_pool+0x80e>
 80195f4:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 80195f8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 80195fc:	f04f 0c00 	mov.w	ip, #0
 8019600:	ed15 6a0f 	vldr	s12, [r5, #-60]	@ 0xffffffc4
 8019604:	f10c 0c10 	add.w	ip, ip, #16
 8019608:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 801960c:	3540      	adds	r5, #64	@ 0x40
 801960e:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 8019612:	45c4      	cmp	ip, r8
 8019614:	ee67 7a86 	vmul.f32	s15, s15, s12
 8019618:	ed15 5a20 	vldr	s10, [r5, #-128]	@ 0xffffff80
 801961c:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 8019620:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8019624:	ed15 6a1e 	vldr	s12, [r5, #-120]	@ 0xffffff88
 8019628:	eee4 7a85 	vfma.f32	s15, s9, s10
 801962c:	ed51 da1d 	vldr	s27, [r1, #-116]	@ 0xffffff8c
 8019630:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8019634:	ed15 da1c 	vldr	s26, [r5, #-112]	@ 0xffffff90
 8019638:	ed51 ca1c 	vldr	s25, [r1, #-112]	@ 0xffffff90
 801963c:	ed15 ca1b 	vldr	s24, [r5, #-108]	@ 0xffffff94
 8019640:	ed51 ba1b 	vldr	s23, [r1, #-108]	@ 0xffffff94
 8019644:	eee5 7a86 	vfma.f32	s15, s11, s12
 8019648:	ed15 ba1a 	vldr	s22, [r5, #-104]	@ 0xffffff98
 801964c:	ed51 aa1a 	vldr	s21, [r1, #-104]	@ 0xffffff98
 8019650:	ed15 aa19 	vldr	s20, [r5, #-100]	@ 0xffffff9c
 8019654:	ed51 9a19 	vldr	s19, [r1, #-100]	@ 0xffffff9c
 8019658:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 801965c:	ed55 8a18 	vldr	s17, [r5, #-96]	@ 0xffffffa0
 8019660:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8019664:	ed55 0a17 	vldr	s1, [r5, #-92]	@ 0xffffffa4
 8019668:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 801966c:	ed55 1a16 	vldr	s3, [r5, #-88]	@ 0xffffffa8
 8019670:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8019674:	ed55 2a15 	vldr	s5, [r5, #-84]	@ 0xffffffac
 8019678:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 801967c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8019680:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8019684:	ed55 3a14 	vldr	s7, [r5, #-80]	@ 0xffffffb0
 8019688:	ed55 4a13 	vldr	s9, [r5, #-76]	@ 0xffffffb4
 801968c:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 8019690:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8019694:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8019698:	eeec 7a2b 	vfma.f32	s15, s24, s23
 801969c:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 80196a0:	ed51 da11 	vldr	s27, [r1, #-68]	@ 0xffffffbc
 80196a4:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80196a8:	eeea 7a29 	vfma.f32	s15, s20, s19
 80196ac:	eee9 7a28 	vfma.f32	s15, s18, s17
 80196b0:	eee0 7a20 	vfma.f32	s15, s0, s1
 80196b4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80196b8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80196bc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80196c0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80196c4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80196c8:	eee6 7a2d 	vfma.f32	s15, s12, s27
 80196cc:	ee37 7a27 	vadd.f32	s14, s14, s15
 80196d0:	db96      	blt.n	8019600 <forward_lite_conv2d_if32of32wf32_pool+0x6a8>
 80196d2:	4432      	add	r2, r6
 80196d4:	4433      	add	r3, r6
 80196d6:	4639      	mov	r1, r7
 80196d8:	4288      	cmp	r0, r1
 80196da:	dd10      	ble.n	80196fe <forward_lite_conv2d_if32of32wf32_pool+0x7a6>
 80196dc:	460d      	mov	r5, r1
 80196de:	4696      	mov	lr, r2
 80196e0:	469c      	mov	ip, r3
 80196e2:	3501      	adds	r5, #1
 80196e4:	ecbc 6a01 	vldmia	ip!, {s12}
 80196e8:	ecfe 7a01 	vldmia	lr!, {s15}
 80196ec:	42a8      	cmp	r0, r5
 80196ee:	eea6 7a27 	vfma.f32	s14, s12, s15
 80196f2:	d1f6      	bne.n	80196e2 <forward_lite_conv2d_if32of32wf32_pool+0x78a>
 80196f4:	1a41      	subs	r1, r0, r1
 80196f6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 80196fa:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 80196fe:	3401      	adds	r4, #1
 8019700:	4452      	add	r2, sl
 8019702:	444b      	add	r3, r9
 8019704:	45a3      	cmp	fp, r4
 8019706:	f47f af71 	bne.w	80195ec <forward_lite_conv2d_if32of32wf32_pool+0x694>
 801970a:	e9dd 1e14 	ldrd	r1, lr, [sp, #80]	@ 0x50
 801970e:	e9dd c516 	ldrd	ip, r5, [sp, #88]	@ 0x58
 8019712:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8019714:	f10c 0c01 	add.w	ip, ip, #1
 8019718:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801971a:	ed81 7a00 	vstr	s14, [r1]
 801971e:	4411      	add	r1, r2
 8019720:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019722:	449e      	add	lr, r3
 8019724:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8019726:	1aed      	subs	r5, r5, r3
 8019728:	1ad2      	subs	r2, r2, r3
 801972a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801972c:	920c      	str	r2, [sp, #48]	@ 0x30
 801972e:	4563      	cmp	r3, ip
 8019730:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8019732:	4402      	add	r2, r0
 8019734:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019736:	f47f af28 	bne.w	801958a <forward_lite_conv2d_if32of32wf32_pool+0x632>
 801973a:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 801973c:	9e42      	ldr	r6, [sp, #264]	@ 0x108
 801973e:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8019742:	f8dd 810c 	ldr.w	r8, [sp, #268]	@ 0x10c
 8019746:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	@ 0xf8
 801974a:	e9dd 0a40 	ldrd	r0, sl, [sp, #256]	@ 0x100
 801974e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8019750:	3304      	adds	r3, #4
 8019752:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8019754:	4283      	cmp	r3, r0
 8019756:	4429      	add	r1, r5
 8019758:	9118      	str	r1, [sp, #96]	@ 0x60
 801975a:	f47f aef6 	bne.w	801954a <forward_lite_conv2d_if32of32wf32_pool+0x5f2>
 801975e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8019760:	f8dd b0d8 	ldr.w	fp, [sp, #216]	@ 0xd8
 8019764:	e67b      	b.n	801945e <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8019766:	2100      	movs	r1, #0
 8019768:	e7b6      	b.n	80196d8 <forward_lite_conv2d_if32of32wf32_pool+0x780>
 801976a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801976c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801976e:	4610      	mov	r0, r2
 8019770:	4413      	add	r3, r2
 8019772:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8019774:	e710      	b.n	8019598 <forward_lite_conv2d_if32of32wf32_pool+0x640>
 8019776:	eeb0 7a66 	vmov.f32	s14, s13
 801977a:	e7ca      	b.n	8019712 <forward_lite_conv2d_if32of32wf32_pool+0x7ba>
 801977c:	eef0 6a48 	vmov.f32	s13, s16
 8019780:	e6e9      	b.n	8019556 <forward_lite_conv2d_if32of32wf32_pool+0x5fe>
 8019782:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8019784:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8019786:	921a      	str	r2, [sp, #104]	@ 0x68
 8019788:	e52b      	b.n	80191e2 <forward_lite_conv2d_if32of32wf32_pool+0x28a>
 801978a:	bf00      	nop

0801978c <forward_lite_nl_relu_generic_if32of32_kernel>:
 801978c:	b500      	push	{lr}
 801978e:	edd3 6a02 	vldr	s13, [r3, #8]
 8019792:	f06f 4c40 	mvn.w	ip, #3221225472	@ 0xc0000000
 8019796:	ed93 7a00 	vldr	s14, [r3]
 801979a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 801979e:	4494      	add	ip, r2
 80197a0:	ed93 6a01 	vldr	s12, [r3, #4]
 80197a4:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 80197a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ac:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 80197b0:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 80197b4:	d422      	bmi.n	80197fc <forward_lite_nl_relu_generic_if32of32_kernel+0x70>
 80197b6:	428a      	cmp	r2, r1
 80197b8:	d31e      	bcc.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80197ba:	1d13      	adds	r3, r2, #4
 80197bc:	3004      	adds	r0, #4
 80197be:	eba2 020e 	sub.w	r2, r2, lr
 80197c2:	e00c      	b.n	80197de <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 80197c4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80197c8:	ee77 5ac7 	vsub.f32	s11, s15, s14
 80197cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197d0:	db01      	blt.n	80197d6 <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 80197d2:	ee65 7a86 	vmul.f32	s15, s11, s12
 80197d6:	4293      	cmp	r3, r2
 80197d8:	ed60 7a01 	vstmdb	r0!, {s15}
 80197dc:	d00c      	beq.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80197de:	ed73 7a01 	vldmdb	r3!, {s15}
 80197e2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80197e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80197ea:	daeb      	bge.n	80197c4 <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 80197ec:	eef0 7a66 	vmov.f32	s15, s13
 80197f0:	4293      	cmp	r3, r2
 80197f2:	ed60 7a01 	vstmdb	r0!, {s15}
 80197f6:	d1f2      	bne.n	80197de <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 80197f8:	f85d fb04 	ldr.w	pc, [sp], #4
 80197fc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 8019800:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019804:	d015      	beq.n	8019832 <forward_lite_nl_relu_generic_if32of32_kernel+0xa6>
 8019806:	428a      	cmp	r2, r1
 8019808:	d3f6      	bcc.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 801980a:	1d13      	adds	r3, r2, #4
 801980c:	3004      	adds	r0, #4
 801980e:	eba2 020e 	sub.w	r2, r2, lr
 8019812:	ed73 7a01 	vldmdb	r3!, {s15}
 8019816:	eef4 7ac7 	vcmpe.f32	s15, s14
 801981a:	ee77 6ac7 	vsub.f32	s13, s15, s14
 801981e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019822:	ee66 6a86 	vmul.f32	s13, s13, s12
 8019826:	d822      	bhi.n	801986e <forward_lite_nl_relu_generic_if32of32_kernel+0xe2>
 8019828:	4293      	cmp	r3, r2
 801982a:	ed60 6a01 	vstmdb	r0!, {s13}
 801982e:	d1f0      	bne.n	8019812 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8019830:	e7e2      	b.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8019832:	428a      	cmp	r2, r1
 8019834:	d3e0      	bcc.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8019836:	1d13      	adds	r3, r2, #4
 8019838:	3004      	adds	r0, #4
 801983a:	eba2 020e 	sub.w	r2, r2, lr
 801983e:	2100      	movs	r1, #0
 8019840:	ed73 7a01 	vldmdb	r3!, {s15}
 8019844:	eef4 7ac7 	vcmpe.f32	s15, s14
 8019848:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801984c:	dd0a      	ble.n	8019864 <forward_lite_nl_relu_generic_if32of32_kernel+0xd8>
 801984e:	429a      	cmp	r2, r3
 8019850:	ed60 7a01 	vstmdb	r0!, {s15}
 8019854:	d0d0      	beq.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8019856:	ed73 7a01 	vldmdb	r3!, {s15}
 801985a:	eef4 7ac7 	vcmpe.f32	s15, s14
 801985e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8019862:	dcf4      	bgt.n	801984e <forward_lite_nl_relu_generic_if32of32_kernel+0xc2>
 8019864:	429a      	cmp	r2, r3
 8019866:	f840 1d04 	str.w	r1, [r0, #-4]!
 801986a:	d1e9      	bne.n	8019840 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 801986c:	e7c4      	b.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 801986e:	4293      	cmp	r3, r2
 8019870:	ed60 7a01 	vstmdb	r0!, {s15}
 8019874:	d1cd      	bne.n	8019812 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8019876:	e7bf      	b.n	80197f8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>

08019878 <pool_func_mp_array_f32>:
 8019878:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801987c:	b091      	sub	sp, #68	@ 0x44
 801987e:	4688      	mov	r8, r1
 8019880:	469a      	mov	sl, r3
 8019882:	4694      	mov	ip, r2
 8019884:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8019888:	4681      	mov	r9, r0
 801988a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 801988e:	9103      	str	r1, [sp, #12]
 8019890:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8019894:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8019898:	9302      	str	r3, [sp, #8]
 801989a:	9105      	str	r1, [sp, #20]
 801989c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 80198a0:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 80198a4:	ea52 0503 	orrs.w	r5, r2, r3
 80198a8:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 80198ac:	9101      	str	r1, [sp, #4]
 80198ae:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 80198b2:	9104      	str	r1, [sp, #16]
 80198b4:	d179      	bne.n	80199aa <pool_func_mp_array_f32+0x132>
 80198b6:	9902      	ldr	r1, [sp, #8]
 80198b8:	9e01      	ldr	r6, [sp, #4]
 80198ba:	eba1 0008 	sub.w	r0, r1, r8
 80198be:	9f05      	ldr	r7, [sp, #20]
 80198c0:	1e71      	subs	r1, r6, #1
 80198c2:	3801      	subs	r0, #1
 80198c4:	fb11 0107 	smlabb	r1, r1, r7, r0
 80198c8:	0408      	lsls	r0, r1, #16
 80198ca:	d56e      	bpl.n	80199aa <pool_func_mp_array_f32+0x132>
 80198cc:	9903      	ldr	r1, [sp, #12]
 80198ce:	9f04      	ldr	r7, [sp, #16]
 80198d0:	eba1 000c 	sub.w	r0, r1, ip
 80198d4:	1e79      	subs	r1, r7, #1
 80198d6:	3801      	subs	r0, #1
 80198d8:	fb11 0104 	smlabb	r1, r1, r4, r0
 80198dc:	0409      	lsls	r1, r1, #16
 80198de:	d564      	bpl.n	80199aa <pool_func_mp_array_f32+0x132>
 80198e0:	2f00      	cmp	r7, #0
 80198e2:	d05f      	beq.n	80199a4 <pool_func_mp_array_f32+0x12c>
 80198e4:	2e00      	cmp	r6, #0
 80198e6:	d05d      	beq.n	80199a4 <pool_func_mp_array_f32+0x12c>
 80198e8:	4653      	mov	r3, sl
 80198ea:	2b00      	cmp	r3, #0
 80198ec:	d05a      	beq.n	80199a4 <pool_func_mp_array_f32+0x12c>
 80198ee:	2b01      	cmp	r3, #1
 80198f0:	f040 8164 	bne.w	8019bbc <pool_func_mp_array_f32+0x344>
 80198f4:	462b      	mov	r3, r5
 80198f6:	462a      	mov	r2, r5
 80198f8:	4629      	mov	r1, r5
 80198fa:	f8dd b014 	ldr.w	fp, [sp, #20]
 80198fe:	9801      	ldr	r0, [sp, #4]
 8019900:	f04f 0c00 	mov.w	ip, #0
 8019904:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 8019908:	fb00 f101 	mul.w	r1, r0, r1
 801990c:	f8dd a008 	ldr.w	sl, [sp, #8]
 8019910:	4660      	mov	r0, ip
 8019912:	46e6      	mov	lr, ip
 8019914:	9107      	str	r1, [sp, #28]
 8019916:	b219      	sxth	r1, r3
 8019918:	e9cd 2308 	strd	r2, r3, [sp, #32]
 801991c:	4622      	mov	r2, r4
 801991e:	9b07      	ldr	r3, [sp, #28]
 8019920:	42b9      	cmp	r1, r7
 8019922:	fa0f f58a 	sxth.w	r5, sl
 8019926:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8019bb8 <pool_func_mp_array_f32+0x340>
 801992a:	eb0e 0403 	add.w	r4, lr, r3
 801992e:	fa0f fe8c 	sxth.w	lr, ip
 8019932:	da17      	bge.n	8019964 <pool_func_mp_array_f32+0xec>
 8019934:	460e      	mov	r6, r1
 8019936:	e9cd 0405 	strd	r0, r4, [sp, #20]
 801993a:	45ae      	cmp	lr, r5
 801993c:	da0c      	bge.n	8019958 <pool_func_mp_array_f32+0xe0>
 801993e:	fb06 e008 	mla	r0, r6, r8, lr
 8019942:	4673      	mov	r3, lr
 8019944:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8019948:	3301      	adds	r3, #1
 801994a:	ecb0 7a01 	vldmia	r0!, {s14}
 801994e:	b21c      	sxth	r4, r3
 8019950:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8019954:	42ac      	cmp	r4, r5
 8019956:	dbf7      	blt.n	8019948 <pool_func_mp_array_f32+0xd0>
 8019958:	3601      	adds	r6, #1
 801995a:	b236      	sxth	r6, r6
 801995c:	42be      	cmp	r6, r7
 801995e:	dbec      	blt.n	801993a <pool_func_mp_array_f32+0xc2>
 8019960:	e9dd 0405 	ldrd	r0, r4, [sp, #20]
 8019964:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019966:	3001      	adds	r0, #1
 8019968:	44da      	add	sl, fp
 801996a:	44dc      	add	ip, fp
 801996c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8019970:	9b01      	ldr	r3, [sp, #4]
 8019972:	b200      	sxth	r0, r0
 8019974:	fa1f fa8a 	uxth.w	sl, sl
 8019978:	edc4 7a00 	vstr	s15, [r4]
 801997c:	4283      	cmp	r3, r0
 801997e:	fa1f fc8c 	uxth.w	ip, ip
 8019982:	4686      	mov	lr, r0
 8019984:	dccb      	bgt.n	801991e <pool_func_mp_array_f32+0xa6>
 8019986:	4614      	mov	r4, r2
 8019988:	9a08      	ldr	r2, [sp, #32]
 801998a:	9903      	ldr	r1, [sp, #12]
 801998c:	3201      	adds	r2, #1
 801998e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019990:	4421      	add	r1, r4
 8019992:	9804      	ldr	r0, [sp, #16]
 8019994:	b212      	sxth	r2, r2
 8019996:	4423      	add	r3, r4
 8019998:	b289      	uxth	r1, r1
 801999a:	4290      	cmp	r0, r2
 801999c:	b29b      	uxth	r3, r3
 801999e:	9103      	str	r1, [sp, #12]
 80199a0:	4611      	mov	r1, r2
 80199a2:	dcac      	bgt.n	80198fe <pool_func_mp_array_f32+0x86>
 80199a4:	b011      	add	sp, #68	@ 0x44
 80199a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80199aa:	9904      	ldr	r1, [sp, #16]
 80199ac:	2900      	cmp	r1, #0
 80199ae:	d0f9      	beq.n	80199a4 <pool_func_mp_array_f32+0x12c>
 80199b0:	9901      	ldr	r1, [sp, #4]
 80199b2:	2900      	cmp	r1, #0
 80199b4:	d0f6      	beq.n	80199a4 <pool_func_mp_array_f32+0x12c>
 80199b6:	4651      	mov	r1, sl
 80199b8:	2900      	cmp	r1, #0
 80199ba:	d0f3      	beq.n	80199a4 <pool_func_mp_array_f32+0x12c>
 80199bc:	2901      	cmp	r1, #1
 80199be:	9903      	ldr	r1, [sp, #12]
 80199c0:	d16e      	bne.n	8019aa0 <pool_func_mp_array_f32+0x228>
 80199c2:	1a8a      	subs	r2, r1, r2
 80199c4:	9902      	ldr	r1, [sp, #8]
 80199c6:	9407      	str	r4, [sp, #28]
 80199c8:	1ac9      	subs	r1, r1, r3
 80199ca:	425b      	negs	r3, r3
 80199cc:	b292      	uxth	r2, r2
 80199ce:	fa1f fb81 	uxth.w	fp, r1
 80199d2:	9901      	ldr	r1, [sp, #4]
 80199d4:	b29d      	uxth	r5, r3
 80199d6:	2300      	movs	r3, #0
 80199d8:	4618      	mov	r0, r3
 80199da:	461c      	mov	r4, r3
 80199dc:	4613      	mov	r3, r2
 80199de:	465a      	mov	r2, fp
 80199e0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80199e4:	fb01 f000 	mul.w	r0, r1, r0
 80199e8:	4692      	mov	sl, r2
 80199ea:	46ae      	mov	lr, r5
 80199ec:	b21e      	sxth	r6, r3
 80199ee:	9005      	str	r0, [sp, #20]
 80199f0:	9803      	ldr	r0, [sp, #12]
 80199f2:	1a18      	subs	r0, r3, r0
 80199f4:	b200      	sxth	r0, r0
 80199f6:	9006      	str	r0, [sp, #24]
 80199f8:	2000      	movs	r0, #0
 80199fa:	e9cd 4308 	strd	r4, r3, [sp, #32]
 80199fe:	4607      	mov	r7, r0
 8019a00:	460c      	mov	r4, r1
 8019a02:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
 8019a06:	9a06      	ldr	r2, [sp, #24]
 8019a08:	fa0f f58a 	sxth.w	r5, sl
 8019a0c:	9b05      	ldr	r3, [sp, #20]
 8019a0e:	42b2      	cmp	r2, r6
 8019a10:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8019bb8 <pool_func_mp_array_f32+0x340>
 8019a14:	eb07 0103 	add.w	r1, r7, r3
 8019a18:	fa0f f78e 	sxth.w	r7, lr
 8019a1c:	da1f      	bge.n	8019a5e <pool_func_mp_array_f32+0x1e6>
 8019a1e:	e9cd 1001 	strd	r1, r0, [sp, #4]
 8019a22:	42af      	cmp	r7, r5
 8019a24:	da15      	bge.n	8019a52 <pool_func_mp_array_f32+0x1da>
 8019a26:	4594      	cmp	ip, r2
 8019a28:	dd13      	ble.n	8019a52 <pool_func_mp_array_f32+0x1da>
 8019a2a:	fb02 7108 	mla	r1, r2, r8, r7
 8019a2e:	463b      	mov	r3, r7
 8019a30:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 8019a34:	ea42 0003 	orr.w	r0, r2, r3
 8019a38:	0400      	lsls	r0, r0, #16
 8019a3a:	d405      	bmi.n	8019a48 <pool_func_mp_array_f32+0x1d0>
 8019a3c:	4598      	cmp	r8, r3
 8019a3e:	dd03      	ble.n	8019a48 <pool_func_mp_array_f32+0x1d0>
 8019a40:	ed91 7a00 	vldr	s14, [r1]
 8019a44:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8019a48:	3301      	adds	r3, #1
 8019a4a:	3104      	adds	r1, #4
 8019a4c:	b218      	sxth	r0, r3
 8019a4e:	42a8      	cmp	r0, r5
 8019a50:	dbf0      	blt.n	8019a34 <pool_func_mp_array_f32+0x1bc>
 8019a52:	3201      	adds	r2, #1
 8019a54:	b212      	sxth	r2, r2
 8019a56:	42b2      	cmp	r2, r6
 8019a58:	dbe3      	blt.n	8019a22 <pool_func_mp_array_f32+0x1aa>
 8019a5a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 8019a5e:	3001      	adds	r0, #1
 8019a60:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019a62:	44da      	add	sl, fp
 8019a64:	44de      	add	lr, fp
 8019a66:	b200      	sxth	r0, r0
 8019a68:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 8019a6c:	4284      	cmp	r4, r0
 8019a6e:	fa1f fa8a 	uxth.w	sl, sl
 8019a72:	fa1f fe8e 	uxth.w	lr, lr
 8019a76:	4607      	mov	r7, r0
 8019a78:	edc1 7a00 	vstr	s15, [r1]
 8019a7c:	dcc3      	bgt.n	8019a06 <pool_func_mp_array_f32+0x18e>
 8019a7e:	4621      	mov	r1, r4
 8019a80:	9c08      	ldr	r4, [sp, #32]
 8019a82:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019a84:	1c60      	adds	r0, r4, #1
 8019a86:	9c07      	ldr	r4, [sp, #28]
 8019a88:	9e04      	ldr	r6, [sp, #16]
 8019a8a:	4423      	add	r3, r4
 8019a8c:	b204      	sxth	r4, r0
 8019a8e:	42a6      	cmp	r6, r4
 8019a90:	b29b      	uxth	r3, r3
 8019a92:	4620      	mov	r0, r4
 8019a94:	e9dd 250a 	ldrd	r2, r5, [sp, #40]	@ 0x28
 8019a98:	dca4      	bgt.n	80199e4 <pool_func_mp_array_f32+0x16c>
 8019a9a:	b011      	add	sp, #68	@ 0x44
 8019a9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019aa0:	1a88      	subs	r0, r1, r2
 8019aa2:	9902      	ldr	r1, [sp, #8]
 8019aa4:	4252      	negs	r2, r2
 8019aa6:	4656      	mov	r6, sl
 8019aa8:	1ac9      	subs	r1, r1, r3
 8019aaa:	425b      	negs	r3, r3
 8019aac:	b280      	uxth	r0, r0
 8019aae:	fa1f fe81 	uxth.w	lr, r1
 8019ab2:	2100      	movs	r1, #0
 8019ab4:	b29f      	uxth	r7, r3
 8019ab6:	b295      	uxth	r5, r2
 8019ab8:	460b      	mov	r3, r1
 8019aba:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 8019abe:	4602      	mov	r2, r0
 8019ac0:	468a      	mov	sl, r1
 8019ac2:	4639      	mov	r1, r7
 8019ac4:	4677      	mov	r7, lr
 8019ac6:	46b6      	mov	lr, r6
 8019ac8:	9801      	ldr	r0, [sp, #4]
 8019aca:	b216      	sxth	r6, r2
 8019acc:	970e      	str	r7, [sp, #56]	@ 0x38
 8019ace:	fb00 f00a 	mul.w	r0, r0, sl
 8019ad2:	f04f 0a00 	mov.w	sl, #0
 8019ad6:	9009      	str	r0, [sp, #36]	@ 0x24
 8019ad8:	b228      	sxth	r0, r5
 8019ada:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
 8019ade:	9008      	str	r0, [sp, #32]
 8019ae0:	460b      	mov	r3, r1
 8019ae2:	4650      	mov	r0, sl
 8019ae4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 8019ae8:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
 8019aec:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019aee:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 8019af2:	469a      	mov	sl, r3
 8019af4:	4410      	add	r0, r2
 8019af6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 8019afa:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 8019afe:	fb0e f200 	mul.w	r2, lr, r0
 8019b02:	2000      	movs	r0, #0
 8019b04:	4607      	mov	r7, r0
 8019b06:	9207      	str	r2, [sp, #28]
 8019b08:	9908      	ldr	r1, [sp, #32]
 8019b0a:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8019bb8 <pool_func_mp_array_f32+0x340>
 8019b0e:	42b1      	cmp	r1, r6
 8019b10:	da1f      	bge.n	8019b52 <pool_func_mp_array_f32+0x2da>
 8019b12:	9006      	str	r0, [sp, #24]
 8019b14:	42a5      	cmp	r5, r4
 8019b16:	da17      	bge.n	8019b48 <pool_func_mp_array_f32+0x2d0>
 8019b18:	4561      	cmp	r1, ip
 8019b1a:	da15      	bge.n	8019b48 <pool_func_mp_array_f32+0x2d0>
 8019b1c:	fb01 5208 	mla	r2, r1, r8, r5
 8019b20:	462b      	mov	r3, r5
 8019b22:	fb0e 7202 	mla	r2, lr, r2, r7
 8019b26:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 8019b2a:	ea41 0003 	orr.w	r0, r1, r3
 8019b2e:	0400      	lsls	r0, r0, #16
 8019b30:	d405      	bmi.n	8019b3e <pool_func_mp_array_f32+0x2c6>
 8019b32:	4598      	cmp	r8, r3
 8019b34:	dd03      	ble.n	8019b3e <pool_func_mp_array_f32+0x2c6>
 8019b36:	ed92 7a00 	vldr	s14, [r2]
 8019b3a:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8019b3e:	3301      	adds	r3, #1
 8019b40:	445a      	add	r2, fp
 8019b42:	b218      	sxth	r0, r3
 8019b44:	42a0      	cmp	r0, r4
 8019b46:	dbf0      	blt.n	8019b2a <pool_func_mp_array_f32+0x2b2>
 8019b48:	3101      	adds	r1, #1
 8019b4a:	b209      	sxth	r1, r1
 8019b4c:	42b1      	cmp	r1, r6
 8019b4e:	dbe1      	blt.n	8019b14 <pool_func_mp_array_f32+0x29c>
 8019b50:	9806      	ldr	r0, [sp, #24]
 8019b52:	9b07      	ldr	r3, [sp, #28]
 8019b54:	3001      	adds	r0, #1
 8019b56:	441f      	add	r7, r3
 8019b58:	b200      	sxth	r0, r0
 8019b5a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019b5c:	4570      	cmp	r0, lr
 8019b5e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8019b62:	edc7 7a00 	vstr	s15, [r7]
 8019b66:	4607      	mov	r7, r0
 8019b68:	dbce      	blt.n	8019b08 <pool_func_mp_array_f32+0x290>
 8019b6a:	9a05      	ldr	r2, [sp, #20]
 8019b6c:	4653      	mov	r3, sl
 8019b6e:	9c02      	ldr	r4, [sp, #8]
 8019b70:	9803      	ldr	r0, [sp, #12]
 8019b72:	4414      	add	r4, r2
 8019b74:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8019b78:	4410      	add	r0, r2
 8019b7a:	b2a2      	uxth	r2, r4
 8019b7c:	f10a 0501 	add.w	r5, sl, #1
 8019b80:	9202      	str	r2, [sp, #8]
 8019b82:	b282      	uxth	r2, r0
 8019b84:	fa0f fa85 	sxth.w	sl, r5
 8019b88:	9203      	str	r2, [sp, #12]
 8019b8a:	9a01      	ldr	r2, [sp, #4]
 8019b8c:	4650      	mov	r0, sl
 8019b8e:	4552      	cmp	r2, sl
 8019b90:	dcac      	bgt.n	8019aec <pool_func_mp_array_f32+0x274>
 8019b92:	4619      	mov	r1, r3
 8019b94:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019b96:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	@ 0x2c
 8019b9a:	e9dd 470d 	ldrd	r4, r7, [sp, #52]	@ 0x34
 8019b9e:	3301      	adds	r3, #1
 8019ba0:	1960      	adds	r0, r4, r5
 8019ba2:	4422      	add	r2, r4
 8019ba4:	b21b      	sxth	r3, r3
 8019ba6:	b285      	uxth	r5, r0
 8019ba8:	9804      	ldr	r0, [sp, #16]
 8019baa:	b292      	uxth	r2, r2
 8019bac:	469a      	mov	sl, r3
 8019bae:	4298      	cmp	r0, r3
 8019bb0:	dc8a      	bgt.n	8019ac8 <pool_func_mp_array_f32+0x250>
 8019bb2:	b011      	add	sp, #68	@ 0x44
 8019bb4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019bb8:	cf000000 	.word	0xcf000000
 8019bbc:	4652      	mov	r2, sl
 8019bbe:	4628      	mov	r0, r5
 8019bc0:	462e      	mov	r6, r5
 8019bc2:	462b      	mov	r3, r5
 8019bc4:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8019bc8:	4696      	mov	lr, r2
 8019bca:	9d03      	ldr	r5, [sp, #12]
 8019bcc:	9a01      	ldr	r2, [sp, #4]
 8019bce:	fa0f fc85 	sxth.w	ip, r5
 8019bd2:	f8dd b008 	ldr.w	fp, [sp, #8]
 8019bd6:	fb03 f302 	mul.w	r3, r3, r2
 8019bda:	2200      	movs	r2, #0
 8019bdc:	e9cd 6008 	strd	r6, r0, [sp, #32]
 8019be0:	9303      	str	r3, [sp, #12]
 8019be2:	462e      	mov	r6, r5
 8019be4:	b203      	sxth	r3, r0
 8019be6:	4625      	mov	r5, r4
 8019be8:	4658      	mov	r0, fp
 8019bea:	4614      	mov	r4, r2
 8019bec:	9307      	str	r3, [sp, #28]
 8019bee:	4629      	mov	r1, r5
 8019bf0:	4613      	mov	r3, r2
 8019bf2:	9d03      	ldr	r5, [sp, #12]
 8019bf4:	b217      	sxth	r7, r2
 8019bf6:	920c      	str	r2, [sp, #48]	@ 0x30
 8019bf8:	442c      	add	r4, r5
 8019bfa:	b205      	sxth	r5, r0
 8019bfc:	fb0e f404 	mul.w	r4, lr, r4
 8019c00:	9406      	str	r4, [sp, #24]
 8019c02:	2400      	movs	r4, #0
 8019c04:	e9cd 300a 	strd	r3, r0, [sp, #40]	@ 0x28
 8019c08:	46a3      	mov	fp, r4
 8019c0a:	4630      	mov	r0, r6
 8019c0c:	9e07      	ldr	r6, [sp, #28]
 8019c0e:	ed5f 7a16 	vldr	s15, [pc, #-88]	@ 8019bb8 <pool_func_mp_array_f32+0x340>
 8019c12:	4566      	cmp	r6, ip
 8019c14:	da17      	bge.n	8019c46 <pool_func_mp_array_f32+0x3ce>
 8019c16:	940d      	str	r4, [sp, #52]	@ 0x34
 8019c18:	42af      	cmp	r7, r5
 8019c1a:	da0f      	bge.n	8019c3c <pool_func_mp_array_f32+0x3c4>
 8019c1c:	fb08 7306 	mla	r3, r8, r6, r7
 8019c20:	463a      	mov	r2, r7
 8019c22:	fb0e b303 	mla	r3, lr, r3, fp
 8019c26:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 8019c2a:	3201      	adds	r2, #1
 8019c2c:	ed93 7a00 	vldr	s14, [r3]
 8019c30:	4453      	add	r3, sl
 8019c32:	b214      	sxth	r4, r2
 8019c34:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8019c38:	42ac      	cmp	r4, r5
 8019c3a:	dbf6      	blt.n	8019c2a <pool_func_mp_array_f32+0x3b2>
 8019c3c:	3601      	adds	r6, #1
 8019c3e:	b236      	sxth	r6, r6
 8019c40:	4566      	cmp	r6, ip
 8019c42:	dbe9      	blt.n	8019c18 <pool_func_mp_array_f32+0x3a0>
 8019c44:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8019c46:	9b06      	ldr	r3, [sp, #24]
 8019c48:	3401      	adds	r4, #1
 8019c4a:	449b      	add	fp, r3
 8019c4c:	b224      	sxth	r4, r4
 8019c4e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8019c50:	4574      	cmp	r4, lr
 8019c52:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8019c56:	edcb 7a00 	vstr	s15, [fp]
 8019c5a:	46a3      	mov	fp, r4
 8019c5c:	dbd6      	blt.n	8019c0c <pool_func_mp_array_f32+0x394>
 8019c5e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019c60:	4606      	mov	r6, r0
 8019c62:	9c05      	ldr	r4, [sp, #20]
 8019c64:	3301      	adds	r3, #1
 8019c66:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8019c68:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8019c6a:	b21b      	sxth	r3, r3
 8019c6c:	9d01      	ldr	r5, [sp, #4]
 8019c6e:	4420      	add	r0, r4
 8019c70:	4422      	add	r2, r4
 8019c72:	429d      	cmp	r5, r3
 8019c74:	461c      	mov	r4, r3
 8019c76:	b280      	uxth	r0, r0
 8019c78:	b292      	uxth	r2, r2
 8019c7a:	dcba      	bgt.n	8019bf2 <pool_func_mp_array_f32+0x37a>
 8019c7c:	4635      	mov	r5, r6
 8019c7e:	9e08      	ldr	r6, [sp, #32]
 8019c80:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019c82:	460c      	mov	r4, r1
 8019c84:	194a      	adds	r2, r1, r5
 8019c86:	3601      	adds	r6, #1
 8019c88:	180b      	adds	r3, r1, r0
 8019c8a:	b236      	sxth	r6, r6
 8019c8c:	b295      	uxth	r5, r2
 8019c8e:	9a04      	ldr	r2, [sp, #16]
 8019c90:	b298      	uxth	r0, r3
 8019c92:	4633      	mov	r3, r6
 8019c94:	42b2      	cmp	r2, r6
 8019c96:	dc99      	bgt.n	8019bcc <pool_func_mp_array_f32+0x354>
 8019c98:	e684      	b.n	80199a4 <pool_func_mp_array_f32+0x12c>
 8019c9a:	bf00      	nop

08019c9c <lite_decompress_ilutof32>:
 8019c9c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8019ca0:	9d08      	ldr	r5, [sp, #32]
 8019ca2:	4604      	mov	r4, r0
 8019ca4:	2b04      	cmp	r3, #4
 8019ca6:	4608      	mov	r0, r1
 8019ca8:	ea4f 0685 	mov.w	r6, r5, lsl #2
 8019cac:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8019cb0:	d012      	beq.n	8019cd8 <lite_decompress_ilutof32+0x3c>
 8019cb2:	2b08      	cmp	r3, #8
 8019cb4:	d10e      	bne.n	8019cd4 <lite_decompress_ilutof32+0x38>
 8019cb6:	42ac      	cmp	r4, r5
 8019cb8:	d20c      	bcs.n	8019cd4 <lite_decompress_ilutof32+0x38>
 8019cba:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019cbe:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019cc2:	681b      	ldr	r3, [r3, #0]
 8019cc4:	f844 3b04 	str.w	r3, [r4], #4
 8019cc8:	42a5      	cmp	r5, r4
 8019cca:	d8f6      	bhi.n	8019cba <lite_decompress_ilutof32+0x1e>
 8019ccc:	3e01      	subs	r6, #1
 8019cce:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 8019cd2:	1c70      	adds	r0, r6, #1
 8019cd4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019cd8:	9b07      	ldr	r3, [sp, #28]
 8019cda:	085f      	lsrs	r7, r3, #1
 8019cdc:	f003 0601 	and.w	r6, r3, #1
 8019ce0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 8019ce4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 8019ce8:	42ac      	cmp	r4, r5
 8019cea:	d2f3      	bcs.n	8019cd4 <lite_decompress_ilutof32+0x38>
 8019cec:	b30f      	cbz	r7, 8019d32 <lite_decompress_ilutof32+0x96>
 8019cee:	f104 0e08 	add.w	lr, r4, #8
 8019cf2:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 8019cf6:	eb00 0108 	add.w	r1, r0, r8
 8019cfa:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 8019cfe:	f10e 0e08 	add.w	lr, lr, #8
 8019d02:	091b      	lsrs	r3, r3, #4
 8019d04:	4561      	cmp	r1, ip
 8019d06:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d0a:	681b      	ldr	r3, [r3, #0]
 8019d0c:	f84e 3c10 	str.w	r3, [lr, #-16]
 8019d10:	f89c 3000 	ldrb.w	r3, [ip]
 8019d14:	f003 030f 	and.w	r3, r3, #15
 8019d18:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d1c:	681b      	ldr	r3, [r3, #0]
 8019d1e:	f84e 3c0c 	str.w	r3, [lr, #-12]
 8019d22:	d1ea      	bne.n	8019cfa <lite_decompress_ilutof32+0x5e>
 8019d24:	4438      	add	r0, r7
 8019d26:	444c      	add	r4, r9
 8019d28:	b92e      	cbnz	r6, 8019d36 <lite_decompress_ilutof32+0x9a>
 8019d2a:	42a5      	cmp	r5, r4
 8019d2c:	d8df      	bhi.n	8019cee <lite_decompress_ilutof32+0x52>
 8019d2e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019d32:	b906      	cbnz	r6, 8019d36 <lite_decompress_ilutof32+0x9a>
 8019d34:	e7fe      	b.n	8019d34 <lite_decompress_ilutof32+0x98>
 8019d36:	f810 3b01 	ldrb.w	r3, [r0], #1
 8019d3a:	091b      	lsrs	r3, r3, #4
 8019d3c:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8019d40:	681b      	ldr	r3, [r3, #0]
 8019d42:	f844 3b04 	str.w	r3, [r4], #4
 8019d46:	e7cf      	b.n	8019ce8 <lite_decompress_ilutof32+0x4c>

08019d48 <forward_lite_dense_if32of32wf32>:
 8019d48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d4c:	ed2d 8b0c 	vpush	{d8-d13}
 8019d50:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 8019d54:	e9d0 1700 	ldrd	r1, r7, [r0]
 8019d58:	fb03 f30c 	mul.w	r3, r3, ip
 8019d5c:	4602      	mov	r2, r0
 8019d5e:	b083      	sub	sp, #12
 8019d60:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8019d64:	4281      	cmp	r1, r0
 8019d66:	f080 811d 	bcs.w	8019fa4 <forward_lite_dense_if32of32wf32+0x25c>
 8019d6a:	6915      	ldr	r5, [r2, #16]
 8019d6c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8019d70:	4664      	mov	r4, ip
 8019d72:	eb01 0806 	add.w	r8, r1, r6
 8019d76:	6896      	ldr	r6, [r2, #8]
 8019d78:	4588      	cmp	r8, r1
 8019d7a:	f240 8108 	bls.w	8019f8e <forward_lite_dense_if32of32wf32+0x246>
 8019d7e:	f1a5 0e10 	sub.w	lr, r5, #16
 8019d82:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8019d86:	468c      	mov	ip, r1
 8019d88:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8019d8c:	f10e 0e01 	add.w	lr, lr, #1
 8019d90:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 8019d94:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 8019d98:	e9cd 0100 	strd	r0, r1, [sp]
 8019d9c:	2d0f      	cmp	r5, #15
 8019d9e:	f240 8106 	bls.w	8019fae <forward_lite_dense_if32of32wf32+0x266>
 8019da2:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8019da6:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 8019daa:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 8019ff8 <forward_lite_dense_if32of32wf32+0x2b0>
 8019dae:	4628      	mov	r0, r5
 8019db0:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8019db4:	3810      	subs	r0, #16
 8019db6:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 8019dba:	3340      	adds	r3, #64	@ 0x40
 8019dbc:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 8019dc0:	280f      	cmp	r0, #15
 8019dc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019dc6:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 8019dca:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 8019dce:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8019dd2:	ed53 6a1e 	vldr	s13, [r3, #-120]	@ 0xffffff88
 8019dd6:	eee4 7a85 	vfma.f32	s15, s9, s10
 8019dda:	ed11 6a1d 	vldr	s12, [r1, #-116]	@ 0xffffff8c
 8019dde:	ed13 da1d 	vldr	s26, [r3, #-116]	@ 0xffffff8c
 8019de2:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 8019de6:	ed11 ca1c 	vldr	s24, [r1, #-112]	@ 0xffffff90
 8019dea:	ed11 ba1b 	vldr	s22, [r1, #-108]	@ 0xffffff94
 8019dee:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8019df2:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8019df6:	ed11 aa1a 	vldr	s20, [r1, #-104]	@ 0xffffff98
 8019dfa:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8019dfe:	ed11 9a19 	vldr	s18, [r1, #-100]	@ 0xffffff9c
 8019e02:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8019e06:	ed51 8a18 	vldr	s17, [r1, #-96]	@ 0xffffffa0
 8019e0a:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 8019e0e:	eeed 7a06 	vfma.f32	s15, s26, s12
 8019e12:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8019e16:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 8019e1a:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8019e1e:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8019e22:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 8019e26:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 8019e2a:	eeec 7a8c 	vfma.f32	s15, s25, s24
 8019e2e:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8019e32:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8019e36:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 8019e3a:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 8019e3e:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8019e42:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8019e46:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 8019e4a:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 8019e4e:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8019e52:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8019e56:	eee9 7a89 	vfma.f32	s15, s19, s18
 8019e5a:	eee8 7a88 	vfma.f32	s15, s17, s16
 8019e5e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8019e62:	eee1 7a21 	vfma.f32	s15, s2, s3
 8019e66:	eee2 7a22 	vfma.f32	s15, s4, s5
 8019e6a:	eee3 7a23 	vfma.f32	s15, s6, s7
 8019e6e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019e72:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019e76:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019e7a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019e7e:	d897      	bhi.n	8019db0 <forward_lite_dense_if32of32wf32+0x68>
 8019e80:	eb06 010b 	add.w	r1, r6, fp
 8019e84:	f005 000f 	and.w	r0, r5, #15
 8019e88:	4673      	mov	r3, lr
 8019e8a:	2803      	cmp	r0, #3
 8019e8c:	d95f      	bls.n	8019f4e <forward_lite_dense_if32of32wf32+0x206>
 8019e8e:	edd1 6a01 	vldr	s13, [r1, #4]
 8019e92:	1f04      	subs	r4, r0, #4
 8019e94:	edd3 7a01 	vldr	s15, [r3, #4]
 8019e98:	ed93 4a00 	vldr	s8, [r3]
 8019e9c:	2c03      	cmp	r4, #3
 8019e9e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019ea2:	edd1 4a00 	vldr	s9, [r1]
 8019ea6:	ed93 5a02 	vldr	s10, [r3, #8]
 8019eaa:	edd1 5a02 	vldr	s11, [r1, #8]
 8019eae:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019eb2:	ed93 6a03 	vldr	s12, [r3, #12]
 8019eb6:	edd1 6a03 	vldr	s13, [r1, #12]
 8019eba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8019ebe:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019ec2:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019ec6:	eeb0 7a67 	vmov.f32	s14, s15
 8019eca:	d938      	bls.n	8019f3e <forward_lite_dense_if32of32wf32+0x1f6>
 8019ecc:	edd1 6a05 	vldr	s13, [r1, #20]
 8019ed0:	f1a0 0a08 	sub.w	sl, r0, #8
 8019ed4:	edd3 7a05 	vldr	s15, [r3, #20]
 8019ed8:	ed93 4a04 	vldr	s8, [r3, #16]
 8019edc:	f1ba 0f03 	cmp.w	sl, #3
 8019ee0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019ee4:	edd1 4a04 	vldr	s9, [r1, #16]
 8019ee8:	ed93 5a06 	vldr	s10, [r3, #24]
 8019eec:	edd1 5a06 	vldr	s11, [r1, #24]
 8019ef0:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019ef4:	ed93 6a07 	vldr	s12, [r3, #28]
 8019ef8:	edd1 6a07 	vldr	s13, [r1, #28]
 8019efc:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019f00:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019f04:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f08:	d919      	bls.n	8019f3e <forward_lite_dense_if32of32wf32+0x1f6>
 8019f0a:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 8019f0e:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 8019f12:	ed91 4a08 	vldr	s8, [r1, #32]
 8019f16:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8019f1a:	edd3 4a08 	vldr	s9, [r3, #32]
 8019f1e:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 8019f22:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 8019f26:	eee4 7a24 	vfma.f32	s15, s8, s9
 8019f2a:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 8019f2e:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 8019f32:	eee5 7a25 	vfma.f32	s15, s10, s11
 8019f36:	eee6 7a26 	vfma.f32	s15, s12, s13
 8019f3a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8019f3e:	08a4      	lsrs	r4, r4, #2
 8019f40:	f000 0003 	and.w	r0, r0, #3
 8019f44:	3401      	adds	r4, #1
 8019f46:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 8019f4a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 8019f4e:	b1a8      	cbz	r0, 8019f7c <forward_lite_dense_if32of32wf32+0x234>
 8019f50:	edd3 6a00 	vldr	s13, [r3]
 8019f54:	2801      	cmp	r0, #1
 8019f56:	edd1 7a00 	vldr	s15, [r1]
 8019f5a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019f5e:	d00d      	beq.n	8019f7c <forward_lite_dense_if32of32wf32+0x234>
 8019f60:	edd3 6a01 	vldr	s13, [r3, #4]
 8019f64:	2802      	cmp	r0, #2
 8019f66:	edd1 7a01 	vldr	s15, [r1, #4]
 8019f6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019f6e:	d005      	beq.n	8019f7c <forward_lite_dense_if32of32wf32+0x234>
 8019f70:	edd1 6a02 	vldr	s13, [r1, #8]
 8019f74:	edd3 7a02 	vldr	s15, [r3, #8]
 8019f78:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8019f7c:	ecac 7a01 	vstmia	ip!, {s14}
 8019f80:	45e0      	cmp	r8, ip
 8019f82:	444e      	add	r6, r9
 8019f84:	f63f af0a 	bhi.w	8019d9c <forward_lite_dense_if32of32wf32+0x54>
 8019f88:	6954      	ldr	r4, [r2, #20]
 8019f8a:	e9dd 0100 	ldrd	r0, r1, [sp]
 8019f8e:	68d3      	ldr	r3, [r2, #12]
 8019f90:	b99b      	cbnz	r3, 8019fba <forward_lite_dense_if32of32wf32+0x272>
 8019f92:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8019f96:	6915      	ldr	r5, [r2, #16]
 8019f98:	00a6      	lsls	r6, r4, #2
 8019f9a:	4288      	cmp	r0, r1
 8019f9c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8019fa0:	f63f aee7 	bhi.w	8019d72 <forward_lite_dense_if32of32wf32+0x2a>
 8019fa4:	b003      	add	sp, #12
 8019fa6:	ecbd 8b0c 	vpop	{d8-d13}
 8019faa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019fae:	4628      	mov	r0, r5
 8019fb0:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8019ff8 <forward_lite_dense_if32of32wf32+0x2b0>
 8019fb4:	4631      	mov	r1, r6
 8019fb6:	463b      	mov	r3, r7
 8019fb8:	e767      	b.n	8019e8a <forward_lite_dense_if32of32wf32+0x142>
 8019fba:	2c00      	cmp	r4, #0
 8019fbc:	d0e9      	beq.n	8019f92 <forward_lite_dense_if32of32wf32+0x24a>
 8019fbe:	edd1 7a00 	vldr	s15, [r1]
 8019fc2:	ed93 7a00 	vldr	s14, [r3]
 8019fc6:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fca:	edc1 7a00 	vstr	s15, [r1]
 8019fce:	6954      	ldr	r4, [r2, #20]
 8019fd0:	2c01      	cmp	r4, #1
 8019fd2:	d9de      	bls.n	8019f92 <forward_lite_dense_if32of32wf32+0x24a>
 8019fd4:	1d0d      	adds	r5, r1, #4
 8019fd6:	2301      	movs	r3, #1
 8019fd8:	68d4      	ldr	r4, [r2, #12]
 8019fda:	ed95 7a00 	vldr	s14, [r5]
 8019fde:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 8019fe2:	3301      	adds	r3, #1
 8019fe4:	edd4 7a00 	vldr	s15, [r4]
 8019fe8:	ee77 7a87 	vadd.f32	s15, s15, s14
 8019fec:	ece5 7a01 	vstmia	r5!, {s15}
 8019ff0:	6954      	ldr	r4, [r2, #20]
 8019ff2:	429c      	cmp	r4, r3
 8019ff4:	d8f0      	bhi.n	8019fd8 <forward_lite_dense_if32of32wf32+0x290>
 8019ff6:	e7cc      	b.n	8019f92 <forward_lite_dense_if32of32wf32+0x24a>
 8019ff8:	00000000 	.word	0x00000000

08019ffc <forward_lite_dense_if32of32wf32_lut4>:
 8019ffc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a000:	b08d      	sub	sp, #52	@ 0x34
 801a002:	4604      	mov	r4, r0
 801a004:	4618      	mov	r0, r3
 801a006:	460d      	mov	r5, r1
 801a008:	920a      	str	r2, [sp, #40]	@ 0x28
 801a00a:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801a00e:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 801a012:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 801a016:	fb02 f303 	mul.w	r3, r2, r3
 801a01a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 801a01e:	9308      	str	r3, [sp, #32]
 801a020:	f1b8 0f00 	cmp.w	r8, #0
 801a024:	d004      	beq.n	801a030 <forward_lite_dense_if32of32wf32_lut4+0x34>
 801a026:	2240      	movs	r2, #64	@ 0x40
 801a028:	4641      	mov	r1, r8
 801a02a:	f000 fc15 	bl	801a858 <st_int8_copy>
 801a02e:	4640      	mov	r0, r8
 801a030:	9b08      	ldr	r3, [sp, #32]
 801a032:	429c      	cmp	r4, r3
 801a034:	f080 810c 	bcs.w	801a250 <forward_lite_dense_if32of32wf32_lut4+0x254>
 801a038:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a03a:	08fa      	lsrs	r2, r7, #3
 801a03c:	f027 0901 	bic.w	r9, r7, #1
 801a040:	9405      	str	r4, [sp, #20]
 801a042:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801a046:	f007 0301 	and.w	r3, r7, #1
 801a04a:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 801a04e:	9202      	str	r2, [sp, #8]
 801a050:	9303      	str	r3, [sp, #12]
 801a052:	00bb      	lsls	r3, r7, #2
 801a054:	0092      	lsls	r2, r2, #2
 801a056:	f105 0120 	add.w	r1, r5, #32
 801a05a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a05c:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 801a060:	46e6      	mov	lr, ip
 801a062:	465c      	mov	r4, fp
 801a064:	9b05      	ldr	r3, [sp, #20]
 801a066:	9204      	str	r2, [sp, #16]
 801a068:	f8cd c01c 	str.w	ip, [sp, #28]
 801a06c:	9617      	str	r6, [sp, #92]	@ 0x5c
 801a06e:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 801a072:	9a07      	ldr	r2, [sp, #28]
 801a074:	eb03 0a02 	add.w	sl, r3, r2
 801a078:	f1a1 0220 	sub.w	r2, r1, #32
 801a07c:	459a      	cmp	sl, r3
 801a07e:	9206      	str	r2, [sp, #24]
 801a080:	f240 80e9 	bls.w	801a256 <forward_lite_dense_if32of32wf32_lut4+0x25a>
 801a084:	f109 3bff 	add.w	fp, r9, #4294967295	@ 0xffffffff
 801a088:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a08a:	4698      	mov	r8, r3
 801a08c:	465d      	mov	r5, fp
 801a08e:	9b02      	ldr	r3, [sp, #8]
 801a090:	2b00      	cmp	r3, #0
 801a092:	f000 80c0 	beq.w	801a216 <forward_lite_dense_if32of32wf32_lut4+0x21a>
 801a096:	9b04      	ldr	r3, [sp, #16]
 801a098:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 801a288 <forward_lite_dense_if32of32wf32_lut4+0x28c>
 801a09c:	eb02 0c03 	add.w	ip, r2, r3
 801a0a0:	460b      	mov	r3, r1
 801a0a2:	f892 e000 	ldrb.w	lr, [r2]
 801a0a6:	3204      	adds	r2, #4
 801a0a8:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 801a0ac:	3320      	adds	r3, #32
 801a0ae:	f00e 0b0f 	and.w	fp, lr, #15
 801a0b2:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 801a0b6:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 801a0ba:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 801a0be:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 801a0c2:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 801a0c6:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 801a0ca:	eddb 7a00 	vldr	s15, [fp]
 801a0ce:	ed9e 3a00 	vldr	s6, [lr]
 801a0d2:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 801a0d6:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801a0da:	f007 070f 	and.w	r7, r7, #15
 801a0de:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 801a0e2:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 801a0e6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801a0ea:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 801a0ee:	eee3 7a04 	vfma.f32	s15, s6, s8
 801a0f2:	ed9e 3a00 	vldr	s6, [lr]
 801a0f6:	ed97 4a00 	vldr	s8, [r7]
 801a0fa:	0937      	lsrs	r7, r6, #4
 801a0fc:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 801a100:	f006 060f 	and.w	r6, r6, #15
 801a104:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801a108:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 801a10c:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801a110:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 801a114:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 801a118:	eee3 7a23 	vfma.f32	s15, s6, s7
 801a11c:	eee4 7a05 	vfma.f32	s15, s8, s10
 801a120:	ed97 4a00 	vldr	s8, [r7]
 801a124:	ed96 5a00 	vldr	s10, [r6]
 801a128:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 801a12c:	4562      	cmp	r2, ip
 801a12e:	ea4f 1716 	mov.w	r7, r6, lsr #4
 801a132:	f006 060f 	and.w	r6, r6, #15
 801a136:	eee4 7a24 	vfma.f32	s15, s8, s9
 801a13a:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 801a13e:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 801a142:	eee5 7a06 	vfma.f32	s15, s10, s12
 801a146:	ed97 5a00 	vldr	s10, [r7]
 801a14a:	ed96 6a00 	vldr	s12, [r6]
 801a14e:	eee5 7a25 	vfma.f32	s15, s10, s11
 801a152:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a156:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a15a:	d1a2      	bne.n	801a0a2 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 801a15c:	46a6      	mov	lr, r4
 801a15e:	45ce      	cmp	lr, r9
 801a160:	d260      	bcs.n	801a224 <forward_lite_dense_if32of32wf32_lut4+0x228>
 801a162:	eba5 070e 	sub.w	r7, r5, lr
 801a166:	f10e 0208 	add.w	r2, lr, #8
 801a16a:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
 801a16e:	f8cd a004 	str.w	sl, [sp, #4]
 801a172:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 801a176:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 801a17a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 801a17e:	3208      	adds	r2, #8
 801a180:	ed52 5a03 	vldr	s11, [r2, #-12]
 801a184:	f003 0a0f 	and.w	sl, r3, #15
 801a188:	091b      	lsrs	r3, r3, #4
 801a18a:	ed52 6a04 	vldr	s13, [r2, #-16]
 801a18e:	42b7      	cmp	r7, r6
 801a190:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 801a194:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801a198:	edda 7a00 	vldr	s15, [sl]
 801a19c:	ed93 6a00 	vldr	s12, [r3]
 801a1a0:	ee67 7aa5 	vmul.f32	s15, s15, s11
 801a1a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a1a8:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a1ac:	d1e5      	bne.n	801a17a <forward_lite_dense_if32of32wf32_lut4+0x17e>
 801a1ae:	f10b 0b01 	add.w	fp, fp, #1
 801a1b2:	f8dd a004 	ldr.w	sl, [sp, #4]
 801a1b6:	eb0c 020b 	add.w	r2, ip, fp
 801a1ba:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 801a1be:	9b03      	ldr	r3, [sp, #12]
 801a1c0:	b30b      	cbz	r3, 801a206 <forward_lite_dense_if32of32wf32_lut4+0x20a>
 801a1c2:	f812 3b01 	ldrb.w	r3, [r2], #1
 801a1c6:	edde 7a00 	vldr	s15, [lr]
 801a1ca:	091b      	lsrs	r3, r3, #4
 801a1cc:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801a1d0:	edd3 6a00 	vldr	s13, [r3]
 801a1d4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a1d8:	eca8 7a01 	vstmia	r8!, {s14}
 801a1dc:	45c2      	cmp	sl, r8
 801a1de:	f63f af56 	bhi.w	801a08e <forward_lite_dense_if32of32wf32_lut4+0x92>
 801a1e2:	9b05      	ldr	r3, [sp, #20]
 801a1e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a1e6:	189d      	adds	r5, r3, r2
 801a1e8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801a1ea:	b9eb      	cbnz	r3, 801a228 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 801a1ec:	9b08      	ldr	r3, [sp, #32]
 801a1ee:	42ab      	cmp	r3, r5
 801a1f0:	d92e      	bls.n	801a250 <forward_lite_dense_if32of32wf32_lut4+0x254>
 801a1f2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a1f4:	4499      	add	r9, r3
 801a1f6:	441c      	add	r4, r3
 801a1f8:	4419      	add	r1, r3
 801a1fa:	9b05      	ldr	r3, [sp, #20]
 801a1fc:	459a      	cmp	sl, r3
 801a1fe:	d92c      	bls.n	801a25a <forward_lite_dense_if32of32wf32_lut4+0x25e>
 801a200:	462b      	mov	r3, r5
 801a202:	9505      	str	r5, [sp, #20]
 801a204:	e735      	b.n	801a072 <forward_lite_dense_if32of32wf32_lut4+0x76>
 801a206:	eca8 7a01 	vstmia	r8!, {s14}
 801a20a:	45c2      	cmp	sl, r8
 801a20c:	d9e9      	bls.n	801a1e2 <forward_lite_dense_if32of32wf32_lut4+0x1e6>
 801a20e:	9b02      	ldr	r3, [sp, #8]
 801a210:	2b00      	cmp	r3, #0
 801a212:	f47f af40 	bne.w	801a096 <forward_lite_dense_if32of32wf32_lut4+0x9a>
 801a216:	f8dd e018 	ldr.w	lr, [sp, #24]
 801a21a:	4694      	mov	ip, r2
 801a21c:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 801a288 <forward_lite_dense_if32of32wf32_lut4+0x28c>
 801a220:	45ce      	cmp	lr, r9
 801a222:	d39e      	bcc.n	801a162 <forward_lite_dense_if32of32wf32_lut4+0x166>
 801a224:	4662      	mov	r2, ip
 801a226:	e7ca      	b.n	801a1be <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 801a228:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a22a:	2b00      	cmp	r3, #0
 801a22c:	d0de      	beq.n	801a1ec <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 801a22e:	9b07      	ldr	r3, [sp, #28]
 801a230:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 801a234:	1aea      	subs	r2, r5, r3
 801a236:	edd2 7a00 	vldr	s15, [r2]
 801a23a:	ecbc 7a01 	vldmia	ip!, {s14}
 801a23e:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a242:	ece2 7a01 	vstmia	r2!, {s15}
 801a246:	42aa      	cmp	r2, r5
 801a248:	d1f5      	bne.n	801a236 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 801a24a:	9b08      	ldr	r3, [sp, #32]
 801a24c:	42ab      	cmp	r3, r5
 801a24e:	d8d0      	bhi.n	801a1f2 <forward_lite_dense_if32of32wf32_lut4+0x1f6>
 801a250:	b00d      	add	sp, #52	@ 0x34
 801a252:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a256:	461d      	mov	r5, r3
 801a258:	e7c6      	b.n	801a1e8 <forward_lite_dense_if32of32wf32_lut4+0x1ec>
 801a25a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 801a25e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 801a260:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 801a262:	eba5 0c0c 	sub.w	ip, r5, ip
 801a266:	b169      	cbz	r1, 801a284 <forward_lite_dense_if32of32wf32_lut4+0x288>
 801a268:	4663      	mov	r3, ip
 801a26a:	4632      	mov	r2, r6
 801a26c:	ed93 7a00 	vldr	s14, [r3]
 801a270:	ecf2 7a01 	vldmia	r2!, {s15}
 801a274:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a278:	ece3 7a01 	vstmia	r3!, {s15}
 801a27c:	429d      	cmp	r5, r3
 801a27e:	d1f5      	bne.n	801a26c <forward_lite_dense_if32of32wf32_lut4+0x270>
 801a280:	2900      	cmp	r1, #0
 801a282:	d1f1      	bne.n	801a268 <forward_lite_dense_if32of32wf32_lut4+0x26c>
 801a284:	e7fe      	b.n	801a284 <forward_lite_dense_if32of32wf32_lut4+0x288>
 801a286:	bf00      	nop
 801a288:	00000000 	.word	0x00000000

0801a28c <forward_lite_dense_if32of32wf32_lut8>:
 801a28c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801a290:	b093      	sub	sp, #76	@ 0x4c
 801a292:	469a      	mov	sl, r3
 801a294:	4604      	mov	r4, r0
 801a296:	468b      	mov	fp, r1
 801a298:	920d      	str	r2, [sp, #52]	@ 0x34
 801a29a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 801a29c:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 801a2a0:	e9dd 591d 	ldrd	r5, r9, [sp, #116]	@ 0x74
 801a2a4:	fb02 f303 	mul.w	r3, r2, r3
 801a2a8:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 801a2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801a2ae:	b136      	cbz	r6, 801a2be <forward_lite_dense_if32of32wf32_lut8+0x32>
 801a2b0:	4650      	mov	r0, sl
 801a2b2:	46b2      	mov	sl, r6
 801a2b4:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 801a2b8:	4631      	mov	r1, r6
 801a2ba:	f000 facd 	bl	801a858 <st_int8_copy>
 801a2be:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a2c0:	429c      	cmp	r4, r3
 801a2c2:	f080 8290 	bcs.w	801a7e6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 801a2c6:	4ab5      	ldr	r2, [pc, #724]	@ (801a59c <forward_lite_dense_if32of32wf32_lut8+0x310>)
 801a2c8:	462f      	mov	r7, r5
 801a2ca:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a2cc:	444a      	add	r2, r9
 801a2ce:	eddf 3ab4 	vldr	s7, [pc, #720]	@ 801a5a0 <forward_lite_dense_if32of32wf32_lut8+0x314>
 801a2d2:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801a2d6:	0092      	lsls	r2, r2, #2
 801a2d8:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 801a2dc:	0953      	lsrs	r3, r2, #5
 801a2de:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 801a2e2:	f102 0020 	add.w	r0, r2, #32
 801a2e6:	4616      	mov	r6, r2
 801a2e8:	930e      	str	r3, [sp, #56]	@ 0x38
 801a2ea:	3301      	adds	r3, #1
 801a2ec:	eb0b 0800 	add.w	r8, fp, r0
 801a2f0:	4602      	mov	r2, r0
 801a2f2:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a2f4:	00db      	lsls	r3, r3, #3
 801a2f6:	9310      	str	r3, [sp, #64]	@ 0x40
 801a2f8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a2fa:	eb04 0c03 	add.w	ip, r4, r3
 801a2fe:	45a4      	cmp	ip, r4
 801a300:	d952      	bls.n	801a3a8 <forward_lite_dense_if32of32wf32_lut8+0x11c>
 801a302:	f106 031f 	add.w	r3, r6, #31
 801a306:	eb06 000b 	add.w	r0, r6, fp
 801a30a:	4625      	mov	r5, r4
 801a30c:	eb0b 0e02 	add.w	lr, fp, r2
 801a310:	089b      	lsrs	r3, r3, #2
 801a312:	f100 011f 	add.w	r1, r0, #31
 801a316:	9001      	str	r0, [sp, #4]
 801a318:	3301      	adds	r3, #1
 801a31a:	9103      	str	r1, [sp, #12]
 801a31c:	1f01      	subs	r1, r0, #4
 801a31e:	940a      	str	r4, [sp, #40]	@ 0x28
 801a320:	9302      	str	r3, [sp, #8]
 801a322:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a324:	9104      	str	r1, [sp, #16]
 801a326:	f10b 0104 	add.w	r1, fp, #4
 801a32a:	00db      	lsls	r3, r3, #3
 801a32c:	971d      	str	r7, [sp, #116]	@ 0x74
 801a32e:	9105      	str	r1, [sp, #20]
 801a330:	3310      	adds	r3, #16
 801a332:	9307      	str	r3, [sp, #28]
 801a334:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a336:	eb0b 1343 	add.w	r3, fp, r3, lsl #5
 801a33a:	9306      	str	r3, [sp, #24]
 801a33c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a33e:	e9cd 2608 	strd	r2, r6, [sp, #32]
 801a342:	f1b9 0f07 	cmp.w	r9, #7
 801a346:	d83f      	bhi.n	801a3c8 <forward_lite_dense_if32of32wf32_lut8+0x13c>
 801a348:	45c3      	cmp	fp, r8
 801a34a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 801a5a0 <forward_lite_dense_if32of32wf32_lut8+0x314>
 801a34e:	d20f      	bcs.n	801a370 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 801a350:	4659      	mov	r1, fp
 801a352:	4618      	mov	r0, r3
 801a354:	f810 2b01 	ldrb.w	r2, [r0], #1
 801a358:	ecf1 7a01 	vldmia	r1!, {s15}
 801a35c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a360:	4541      	cmp	r1, r8
 801a362:	edd2 6a00 	vldr	s13, [r2]
 801a366:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a36a:	d3f3      	bcc.n	801a354 <forward_lite_dense_if32of32wf32_lut8+0xc8>
 801a36c:	9a02      	ldr	r2, [sp, #8]
 801a36e:	4413      	add	r3, r2
 801a370:	eca5 7a01 	vstmia	r5!, {s14}
 801a374:	45ac      	cmp	ip, r5
 801a376:	d8e4      	bhi.n	801a342 <forward_lite_dense_if32of32wf32_lut8+0xb6>
 801a378:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 801a37a:	46f3      	mov	fp, lr
 801a37c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a37e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 801a380:	18e0      	adds	r0, r4, r3
 801a382:	e9dd 2608 	ldrd	r2, r6, [sp, #32]
 801a386:	2f00      	cmp	r7, #0
 801a388:	f040 8218 	bne.w	801a7bc <forward_lite_dense_if32of32wf32_lut8+0x530>
 801a38c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a38e:	4283      	cmp	r3, r0
 801a390:	f240 8229 	bls.w	801a7e6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 801a394:	45a4      	cmp	ip, r4
 801a396:	4490      	add	r8, r2
 801a398:	f240 823d 	bls.w	801a816 <forward_lite_dense_if32of32wf32_lut8+0x58a>
 801a39c:	4604      	mov	r4, r0
 801a39e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a3a0:	eb04 0c03 	add.w	ip, r4, r3
 801a3a4:	45a4      	cmp	ip, r4
 801a3a6:	d8ac      	bhi.n	801a302 <forward_lite_dense_if32of32wf32_lut8+0x76>
 801a3a8:	2f00      	cmp	r7, #0
 801a3aa:	f040 8205 	bne.w	801a7b8 <forward_lite_dense_if32of32wf32_lut8+0x52c>
 801a3ae:	469c      	mov	ip, r3
 801a3b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a3b2:	463d      	mov	r5, r7
 801a3b4:	42a3      	cmp	r3, r4
 801a3b6:	f240 8216 	bls.w	801a7e6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 801a3ba:	f1cc 0100 	rsb	r1, ip, #0
 801a3be:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a3c0:	2d00      	cmp	r5, #0
 801a3c2:	f040 8217 	bne.w	801a7f4 <forward_lite_dense_if32of32wf32_lut8+0x568>
 801a3c6:	e7fe      	b.n	801a3c6 <forward_lite_dense_if32of32wf32_lut8+0x13a>
 801a3c8:	f003 0203 	and.w	r2, r3, #3
 801a3cc:	2a02      	cmp	r2, #2
 801a3ce:	f000 81ef 	beq.w	801a7b0 <forward_lite_dense_if32of32wf32_lut8+0x524>
 801a3d2:	2a03      	cmp	r2, #3
 801a3d4:	f000 80e6 	beq.w	801a5a4 <forward_lite_dense_if32of32wf32_lut8+0x318>
 801a3d8:	2a01      	cmp	r2, #1
 801a3da:	f000 81d3 	beq.w	801a784 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 801a3de:	9a01      	ldr	r2, [sp, #4]
 801a3e0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 801a5a0 <forward_lite_dense_if32of32wf32_lut8+0x314>
 801a3e4:	4593      	cmp	fp, r2
 801a3e6:	f200 8203 	bhi.w	801a7f0 <forward_lite_dense_if32of32wf32_lut8+0x564>
 801a3ea:	9807      	ldr	r0, [sp, #28]
 801a3ec:	f103 0208 	add.w	r2, r3, #8
 801a3f0:	f10b 0120 	add.w	r1, fp, #32
 801a3f4:	18c4      	adds	r4, r0, r3
 801a3f6:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 801a3fa:	3208      	adds	r2, #8
 801a3fc:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 801a400:	3120      	adds	r1, #32
 801a402:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a406:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 801a40a:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 801a40e:	edd0 7a00 	vldr	s15, [r0]
 801a412:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 801a416:	ee67 7aa2 	vmul.f32	s15, s15, s5
 801a41a:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 801a41e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a422:	ed51 6a0c 	vldr	s13, [r1, #-48]	@ 0xffffffd0
 801a426:	ed11 5a0b 	vldr	s10, [r1, #-44]	@ 0xffffffd4
 801a42a:	edd0 2a00 	vldr	s5, [r0]
 801a42e:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 801a432:	eee2 7a83 	vfma.f32	s15, s5, s6
 801a436:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 801a43a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a43e:	ed11 6a09 	vldr	s12, [r1, #-36]	@ 0xffffffdc
 801a442:	ed90 3a00 	vldr	s6, [r0]
 801a446:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 801a44a:	eee3 7a04 	vfma.f32	s15, s6, s8
 801a44e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a452:	ed90 4a00 	vldr	s8, [r0]
 801a456:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 801a45a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a45e:	eee4 7a24 	vfma.f32	s15, s8, s9
 801a462:	edd0 4a00 	vldr	s9, [r0]
 801a466:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 801a46a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a46e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 801a472:	edd0 6a00 	vldr	s13, [r0]
 801a476:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 801a47a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a47e:	eee5 7a26 	vfma.f32	s15, s10, s13
 801a482:	edd0 6a00 	vldr	s13, [r0]
 801a486:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 801a48a:	4294      	cmp	r4, r2
 801a48c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 801a490:	eee5 7aa6 	vfma.f32	s15, s11, s13
 801a494:	edd0 6a00 	vldr	s13, [r0]
 801a498:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a49c:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a4a0:	d1a9      	bne.n	801a3f6 <forward_lite_dense_if32of32wf32_lut8+0x16a>
 801a4a2:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801a4a4:	4413      	add	r3, r2
 801a4a6:	9a06      	ldr	r2, [sp, #24]
 801a4a8:	4572      	cmp	r2, lr
 801a4aa:	f4bf af61 	bcs.w	801a370 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 801a4ae:	7819      	ldrb	r1, [r3, #0]
 801a4b0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a4b4:	edd1 7a00 	vldr	s15, [r1]
 801a4b8:	4611      	mov	r1, r2
 801a4ba:	ecf1 6a01 	vldmia	r1!, {s13}
 801a4be:	458e      	cmp	lr, r1
 801a4c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a4c4:	d963      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a4c6:	7859      	ldrb	r1, [r3, #1]
 801a4c8:	edd2 6a01 	vldr	s13, [r2, #4]
 801a4cc:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a4d0:	edd1 7a00 	vldr	s15, [r1]
 801a4d4:	f102 0108 	add.w	r1, r2, #8
 801a4d8:	4588      	cmp	r8, r1
 801a4da:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a4de:	d956      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a4e0:	7899      	ldrb	r1, [r3, #2]
 801a4e2:	edd2 7a02 	vldr	s15, [r2, #8]
 801a4e6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a4ea:	edd1 6a00 	vldr	s13, [r1]
 801a4ee:	f102 010c 	add.w	r1, r2, #12
 801a4f2:	4588      	cmp	r8, r1
 801a4f4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a4f8:	d949      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a4fa:	78d9      	ldrb	r1, [r3, #3]
 801a4fc:	edd2 6a03 	vldr	s13, [r2, #12]
 801a500:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a504:	edd1 7a00 	vldr	s15, [r1]
 801a508:	f102 0110 	add.w	r1, r2, #16
 801a50c:	4588      	cmp	r8, r1
 801a50e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a512:	d93c      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a514:	7919      	ldrb	r1, [r3, #4]
 801a516:	edd2 6a04 	vldr	s13, [r2, #16]
 801a51a:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a51e:	edd1 7a00 	vldr	s15, [r1]
 801a522:	f102 0114 	add.w	r1, r2, #20
 801a526:	4588      	cmp	r8, r1
 801a528:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a52c:	d92f      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a52e:	7959      	ldrb	r1, [r3, #5]
 801a530:	edd2 6a05 	vldr	s13, [r2, #20]
 801a534:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a538:	edd1 7a00 	vldr	s15, [r1]
 801a53c:	f102 0118 	add.w	r1, r2, #24
 801a540:	4588      	cmp	r8, r1
 801a542:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a546:	d922      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a548:	7999      	ldrb	r1, [r3, #6]
 801a54a:	edd2 6a06 	vldr	s13, [r2, #24]
 801a54e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a552:	edd1 7a00 	vldr	s15, [r1]
 801a556:	f102 011c 	add.w	r1, r2, #28
 801a55a:	4588      	cmp	r8, r1
 801a55c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a560:	d915      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a562:	79d9      	ldrb	r1, [r3, #7]
 801a564:	edd2 7a07 	vldr	s15, [r2, #28]
 801a568:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a56c:	edd1 6a00 	vldr	s13, [r1]
 801a570:	f102 0120 	add.w	r1, r2, #32
 801a574:	4588      	cmp	r8, r1
 801a576:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a57a:	d908      	bls.n	801a58e <forward_lite_dense_if32of32wf32_lut8+0x302>
 801a57c:	7a19      	ldrb	r1, [r3, #8]
 801a57e:	edd2 7a08 	vldr	s15, [r2, #32]
 801a582:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a586:	edd1 6a00 	vldr	s13, [r1]
 801a58a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a58e:	9903      	ldr	r1, [sp, #12]
 801a590:	1a8a      	subs	r2, r1, r2
 801a592:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 801a596:	1c53      	adds	r3, r2, #1
 801a598:	e6ea      	b.n	801a370 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 801a59a:	bf00      	nop
 801a59c:	3ffffff8 	.word	0x3ffffff8
 801a5a0:	00000000 	.word	0x00000000
 801a5a4:	eeb0 7a63 	vmov.f32	s14, s7
 801a5a8:	465a      	mov	r2, fp
 801a5aa:	461f      	mov	r7, r3
 801a5ac:	4610      	mov	r0, r2
 801a5ae:	f817 1b01 	ldrb.w	r1, [r7], #1
 801a5b2:	ecf0 7a01 	vldmia	r0!, {s15}
 801a5b6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a5ba:	edd1 6a00 	vldr	s13, [r1]
 801a5be:	9901      	ldr	r1, [sp, #4]
 801a5c0:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a5c4:	4288      	cmp	r0, r1
 801a5c6:	f200 8111 	bhi.w	801a7ec <forward_lite_dense_if32of32wf32_lut8+0x560>
 801a5ca:	9904      	ldr	r1, [sp, #16]
 801a5cc:	f103 0411 	add.w	r4, r3, #17
 801a5d0:	3309      	adds	r3, #9
 801a5d2:	1a8e      	subs	r6, r1, r2
 801a5d4:	3224      	adds	r2, #36	@ 0x24
 801a5d6:	0976      	lsrs	r6, r6, #5
 801a5d8:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 801a5dc:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 801a5e0:	3308      	adds	r3, #8
 801a5e2:	ed12 6a07 	vldr	s12, [r2, #-28]	@ 0xffffffe4
 801a5e6:	3220      	adds	r2, #32
 801a5e8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a5ec:	ed52 2a10 	vldr	s5, [r2, #-64]	@ 0xffffffc0
 801a5f0:	ed12 3a0e 	vldr	s6, [r2, #-56]	@ 0xffffffc8
 801a5f4:	edd1 7a00 	vldr	s15, [r1]
 801a5f8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 801a5fc:	ee67 7a86 	vmul.f32	s15, s15, s12
 801a600:	ed12 4a0d 	vldr	s8, [r2, #-52]	@ 0xffffffcc
 801a604:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a608:	ed52 4a0c 	vldr	s9, [r2, #-48]	@ 0xffffffd0
 801a60c:	ed12 5a0b 	vldr	s10, [r2, #-44]	@ 0xffffffd4
 801a610:	ed91 6a00 	vldr	s12, [r1]
 801a614:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 801a618:	eee2 7a86 	vfma.f32	s15, s5, s12
 801a61c:	ed52 5a0a 	vldr	s11, [r2, #-40]	@ 0xffffffd8
 801a620:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a624:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 801a628:	ed91 6a00 	vldr	s12, [r1]
 801a62c:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 801a630:	eee3 7a06 	vfma.f32	s15, s6, s12
 801a634:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a638:	ed91 6a00 	vldr	s12, [r1]
 801a63c:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 801a640:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a644:	eee4 7a06 	vfma.f32	s15, s8, s12
 801a648:	ed91 6a00 	vldr	s12, [r1]
 801a64c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 801a650:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a654:	eee4 7a86 	vfma.f32	s15, s9, s12
 801a658:	ed91 6a00 	vldr	s12, [r1]
 801a65c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 801a660:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a664:	eee5 7a06 	vfma.f32	s15, s10, s12
 801a668:	ed91 6a00 	vldr	s12, [r1]
 801a66c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 801a670:	429c      	cmp	r4, r3
 801a672:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a676:	eee5 7a86 	vfma.f32	s15, s11, s12
 801a67a:	ed91 6a00 	vldr	s12, [r1]
 801a67e:	eee6 7a26 	vfma.f32	s15, s12, s13
 801a682:	ee37 7a27 	vadd.f32	s14, s14, s15
 801a686:	d1a9      	bne.n	801a5dc <forward_lite_dense_if32of32wf32_lut8+0x350>
 801a688:	3601      	adds	r6, #1
 801a68a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 801a68e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 801a692:	4540      	cmp	r0, r8
 801a694:	f4bf ae6c 	bcs.w	801a370 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 801a698:	781a      	ldrb	r2, [r3, #0]
 801a69a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a69e:	edd2 7a00 	vldr	s15, [r2]
 801a6a2:	4602      	mov	r2, r0
 801a6a4:	ecf2 6a01 	vldmia	r2!, {s13}
 801a6a8:	4590      	cmp	r8, r2
 801a6aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a6ae:	d963      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a6b0:	785a      	ldrb	r2, [r3, #1]
 801a6b2:	edd0 6a01 	vldr	s13, [r0, #4]
 801a6b6:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a6ba:	edd2 7a00 	vldr	s15, [r2]
 801a6be:	f100 0208 	add.w	r2, r0, #8
 801a6c2:	4590      	cmp	r8, r2
 801a6c4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a6c8:	d956      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a6ca:	789a      	ldrb	r2, [r3, #2]
 801a6cc:	edd0 6a02 	vldr	s13, [r0, #8]
 801a6d0:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a6d4:	edd2 7a00 	vldr	s15, [r2]
 801a6d8:	f100 020c 	add.w	r2, r0, #12
 801a6dc:	4590      	cmp	r8, r2
 801a6de:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a6e2:	d949      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a6e4:	78da      	ldrb	r2, [r3, #3]
 801a6e6:	edd0 6a03 	vldr	s13, [r0, #12]
 801a6ea:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a6ee:	edd2 7a00 	vldr	s15, [r2]
 801a6f2:	f100 0210 	add.w	r2, r0, #16
 801a6f6:	4590      	cmp	r8, r2
 801a6f8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a6fc:	d93c      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a6fe:	791a      	ldrb	r2, [r3, #4]
 801a700:	edd0 6a04 	vldr	s13, [r0, #16]
 801a704:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a708:	edd2 7a00 	vldr	s15, [r2]
 801a70c:	f100 0214 	add.w	r2, r0, #20
 801a710:	4590      	cmp	r8, r2
 801a712:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a716:	d92f      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a718:	795a      	ldrb	r2, [r3, #5]
 801a71a:	edd0 6a05 	vldr	s13, [r0, #20]
 801a71e:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a722:	edd2 7a00 	vldr	s15, [r2]
 801a726:	f100 0218 	add.w	r2, r0, #24
 801a72a:	4596      	cmp	lr, r2
 801a72c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a730:	d922      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a732:	799a      	ldrb	r2, [r3, #6]
 801a734:	edd0 6a06 	vldr	s13, [r0, #24]
 801a738:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a73c:	edd2 7a00 	vldr	s15, [r2]
 801a740:	f100 021c 	add.w	r2, r0, #28
 801a744:	4596      	cmp	lr, r2
 801a746:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a74a:	d915      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a74c:	79da      	ldrb	r2, [r3, #7]
 801a74e:	edd0 6a07 	vldr	s13, [r0, #28]
 801a752:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a756:	edd2 7a00 	vldr	s15, [r2]
 801a75a:	f100 0220 	add.w	r2, r0, #32
 801a75e:	4596      	cmp	lr, r2
 801a760:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a764:	d908      	bls.n	801a778 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 801a766:	7a1a      	ldrb	r2, [r3, #8]
 801a768:	edd0 7a08 	vldr	s15, [r0, #32]
 801a76c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 801a770:	edd2 6a00 	vldr	s13, [r2]
 801a774:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a778:	9a03      	ldr	r2, [sp, #12]
 801a77a:	1a10      	subs	r0, r2, r0
 801a77c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 801a780:	1c43      	adds	r3, r0, #1
 801a782:	e5f5      	b.n	801a370 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 801a784:	f813 1b01 	ldrb.w	r1, [r3], #1
 801a788:	eddb 7a00 	vldr	s15, [fp]
 801a78c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a790:	9a05      	ldr	r2, [sp, #20]
 801a792:	ed91 7a00 	vldr	s14, [r1]
 801a796:	ee27 7a27 	vmul.f32	s14, s14, s15
 801a79a:	f813 1b01 	ldrb.w	r1, [r3], #1
 801a79e:	ecf2 7a01 	vldmia	r2!, {s15}
 801a7a2:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 801a7a6:	edd1 6a00 	vldr	s13, [r1]
 801a7aa:	eea6 7aa7 	vfma.f32	s14, s13, s15
 801a7ae:	e6fc      	b.n	801a5aa <forward_lite_dense_if32of32wf32_lut8+0x31e>
 801a7b0:	eeb0 7a63 	vmov.f32	s14, s7
 801a7b4:	465a      	mov	r2, fp
 801a7b6:	e7f0      	b.n	801a79a <forward_lite_dense_if32of32wf32_lut8+0x50e>
 801a7b8:	4493      	add	fp, r2
 801a7ba:	4620      	mov	r0, r4
 801a7bc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a7be:	2b00      	cmp	r3, #0
 801a7c0:	f43f ade4 	beq.w	801a38c <forward_lite_dense_if32of32wf32_lut8+0x100>
 801a7c4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a7c6:	4639      	mov	r1, r7
 801a7c8:	1ac3      	subs	r3, r0, r3
 801a7ca:	edd3 7a00 	vldr	s15, [r3]
 801a7ce:	ecb1 7a01 	vldmia	r1!, {s14}
 801a7d2:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a7d6:	ece3 7a01 	vstmia	r3!, {s15}
 801a7da:	4298      	cmp	r0, r3
 801a7dc:	d1f5      	bne.n	801a7ca <forward_lite_dense_if32of32wf32_lut8+0x53e>
 801a7de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a7e0:	4283      	cmp	r3, r0
 801a7e2:	f63f add7 	bhi.w	801a394 <forward_lite_dense_if32of32wf32_lut8+0x108>
 801a7e6:	b013      	add	sp, #76	@ 0x4c
 801a7e8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801a7ec:	463b      	mov	r3, r7
 801a7ee:	e750      	b.n	801a692 <forward_lite_dense_if32of32wf32_lut8+0x406>
 801a7f0:	465a      	mov	r2, fp
 801a7f2:	e659      	b.n	801a4a8 <forward_lite_dense_if32of32wf32_lut8+0x21c>
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	f43f ade3 	beq.w	801a3c0 <forward_lite_dense_if32of32wf32_lut8+0x134>
 801a7fa:	4421      	add	r1, r4
 801a7fc:	460b      	mov	r3, r1
 801a7fe:	462a      	mov	r2, r5
 801a800:	ed93 7a00 	vldr	s14, [r3]
 801a804:	ecf2 7a01 	vldmia	r2!, {s15}
 801a808:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a80c:	ece3 7a01 	vstmia	r3!, {s15}
 801a810:	429c      	cmp	r4, r3
 801a812:	d1f5      	bne.n	801a800 <forward_lite_dense_if32of32wf32_lut8+0x574>
 801a814:	e7f2      	b.n	801a7fc <forward_lite_dense_if32of32wf32_lut8+0x570>
 801a816:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 801a81a:	463d      	mov	r5, r7
 801a81c:	4604      	mov	r4, r0
 801a81e:	e5cc      	b.n	801a3ba <forward_lite_dense_if32of32wf32_lut8+0x12e>

0801a820 <forward_lite_nl_relu_if32of32>:
 801a820:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 801a824:	4413      	add	r3, r2
 801a826:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 801a82a:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 801a82e:	4291      	cmp	r1, r2
 801a830:	d80f      	bhi.n	801a852 <forward_lite_nl_relu_if32of32+0x32>
 801a832:	f10c 0104 	add.w	r1, ip, #4
 801a836:	1d13      	adds	r3, r2, #4
 801a838:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 801a854 <forward_lite_nl_relu_if32of32+0x34>
 801a83c:	eba2 020c 	sub.w	r2, r2, ip
 801a840:	4408      	add	r0, r1
 801a842:	ed73 7a01 	vldmdb	r3!, {s15}
 801a846:	4293      	cmp	r3, r2
 801a848:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 801a84c:	ed60 7a01 	vstmdb	r0!, {s15}
 801a850:	d1f7      	bne.n	801a842 <forward_lite_nl_relu_if32of32+0x22>
 801a852:	4770      	bx	lr
 801a854:	00000000 	.word	0x00000000

0801a858 <st_int8_copy>:
 801a858:	4288      	cmp	r0, r1
 801a85a:	d00e      	beq.n	801a87a <st_int8_copy+0x22>
 801a85c:	b16a      	cbz	r2, 801a87a <st_int8_copy+0x22>
 801a85e:	4288      	cmp	r0, r1
 801a860:	eb00 0302 	add.w	r3, r0, r2
 801a864:	d20a      	bcs.n	801a87c <st_int8_copy+0x24>
 801a866:	4299      	cmp	r1, r3
 801a868:	d208      	bcs.n	801a87c <st_int8_copy+0x24>
 801a86a:	440a      	add	r2, r1
 801a86c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 801a870:	4298      	cmp	r0, r3
 801a872:	f802 1d01 	strb.w	r1, [r2, #-1]!
 801a876:	d1f9      	bne.n	801a86c <st_int8_copy+0x14>
 801a878:	4770      	bx	lr
 801a87a:	4770      	bx	lr
 801a87c:	2a03      	cmp	r2, #3
 801a87e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 801a882:	d81b      	bhi.n	801a8bc <st_int8_copy+0x64>
 801a884:	1e54      	subs	r4, r2, #1
 801a886:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a88a:	f801 3b01 	strb.w	r3, [r1], #1
 801a88e:	b19c      	cbz	r4, 801a8b8 <st_int8_copy+0x60>
 801a890:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a894:	f801 3b01 	strb.w	r3, [r1], #1
 801a898:	2a02      	cmp	r2, #2
 801a89a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801a89e:	bf18      	it	ne
 801a8a0:	2200      	movne	r2, #0
 801a8a2:	2c01      	cmp	r4, #1
 801a8a4:	d008      	beq.n	801a8b8 <st_int8_copy+0x60>
 801a8a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8aa:	f801 3b01 	strb.w	r3, [r1], #1
 801a8ae:	b11a      	cbz	r2, 801a8b8 <st_int8_copy+0x60>
 801a8b0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8b4:	f801 3b01 	strb.w	r3, [r1], #1
 801a8b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a8bc:	f001 0e03 	and.w	lr, r1, #3
 801a8c0:	f000 0803 	and.w	r8, r0, #3
 801a8c4:	f1ce 0304 	rsb	r3, lr, #4
 801a8c8:	eba2 0c03 	sub.w	ip, r2, r3
 801a8cc:	f1ce 0203 	rsb	r2, lr, #3
 801a8d0:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8d4:	f801 3b01 	strb.w	r3, [r1], #1
 801a8d8:	b182      	cbz	r2, 801a8fc <st_int8_copy+0xa4>
 801a8da:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8de:	f801 3b01 	strb.w	r3, [r1], #1
 801a8e2:	2a01      	cmp	r2, #1
 801a8e4:	d00a      	beq.n	801a8fc <st_int8_copy+0xa4>
 801a8e6:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8ea:	f801 3b01 	strb.w	r3, [r1], #1
 801a8ee:	f1be 0f01 	cmp.w	lr, #1
 801a8f2:	d003      	beq.n	801a8fc <st_int8_copy+0xa4>
 801a8f4:	f810 3b01 	ldrb.w	r3, [r0], #1
 801a8f8:	f801 3b01 	strb.w	r3, [r1], #1
 801a8fc:	45c6      	cmp	lr, r8
 801a8fe:	d02a      	beq.n	801a956 <st_int8_copy+0xfe>
 801a900:	ea5f 121c 	movs.w	r2, ip, lsr #4
 801a904:	d00a      	beq.n	801a91c <st_int8_copy+0xc4>
 801a906:	f850 3b04 	ldr.w	r3, [r0], #4
 801a90a:	f850 4b04 	ldr.w	r4, [r0], #4
 801a90e:	f850 5b04 	ldr.w	r5, [r0], #4
 801a912:	f850 6b04 	ldr.w	r6, [r0], #4
 801a916:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801a918:	3a01      	subs	r2, #1
 801a91a:	d1f4      	bne.n	801a906 <st_int8_copy+0xae>
 801a91c:	f01c 0f08 	tst.w	ip, #8
 801a920:	d004      	beq.n	801a92c <st_int8_copy+0xd4>
 801a922:	f850 3b04 	ldr.w	r3, [r0], #4
 801a926:	f850 4b04 	ldr.w	r4, [r0], #4
 801a92a:	c118      	stmia	r1!, {r3, r4}
 801a92c:	f01c 0f04 	tst.w	ip, #4
 801a930:	d003      	beq.n	801a93a <st_int8_copy+0xe2>
 801a932:	f850 3b04 	ldr.w	r3, [r0], #4
 801a936:	f841 3b04 	str.w	r3, [r1], #4
 801a93a:	f01c 0f02 	tst.w	ip, #2
 801a93e:	d003      	beq.n	801a948 <st_int8_copy+0xf0>
 801a940:	f830 3b02 	ldrh.w	r3, [r0], #2
 801a944:	f821 3b02 	strh.w	r3, [r1], #2
 801a948:	f01c 0f01 	tst.w	ip, #1
 801a94c:	d0b4      	beq.n	801a8b8 <st_int8_copy+0x60>
 801a94e:	7803      	ldrb	r3, [r0, #0]
 801a950:	700b      	strb	r3, [r1, #0]
 801a952:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801a956:	ea5f 199c 	movs.w	r9, ip, lsr #6
 801a95a:	d00e      	beq.n	801a97a <st_int8_copy+0x122>
 801a95c:	4688      	mov	r8, r1
 801a95e:	4686      	mov	lr, r0
 801a960:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801a964:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801a968:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801a96c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801a970:	f1b9 0901 	subs.w	r9, r9, #1
 801a974:	4641      	mov	r1, r8
 801a976:	4670      	mov	r0, lr
 801a978:	d1f0      	bne.n	801a95c <st_int8_copy+0x104>
 801a97a:	f01c 0f20 	tst.w	ip, #32
 801a97e:	d007      	beq.n	801a990 <st_int8_copy+0x138>
 801a980:	4688      	mov	r8, r1
 801a982:	4686      	mov	lr, r0
 801a984:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801a988:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 801a98c:	4641      	mov	r1, r8
 801a98e:	4670      	mov	r0, lr
 801a990:	f01c 0f10 	tst.w	ip, #16
 801a994:	d001      	beq.n	801a99a <st_int8_copy+0x142>
 801a996:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 801a998:	c178      	stmia	r1!, {r3, r4, r5, r6}
 801a99a:	f01c 0f08 	tst.w	ip, #8
 801a99e:	d0c5      	beq.n	801a92c <st_int8_copy+0xd4>
 801a9a0:	c818      	ldmia	r0!, {r3, r4}
 801a9a2:	c118      	stmia	r1!, {r3, r4}
 801a9a4:	e7c2      	b.n	801a92c <st_int8_copy+0xd4>
 801a9a6:	bf00      	nop

0801a9a8 <ai_sum>:
 801a9a8:	edd1 7a00 	vldr	s15, [r1]
 801a9ac:	ed92 7a00 	vldr	s14, [r2]
 801a9b0:	ee77 7a87 	vadd.f32	s15, s15, s14
 801a9b4:	edc0 7a00 	vstr	s15, [r0]
 801a9b8:	4770      	bx	lr
 801a9ba:	bf00      	nop

0801a9bc <ai_array_to_buffer_fmt>:
 801a9bc:	f3c0 4343 	ubfx	r3, r0, #17, #4
 801a9c0:	2b02      	cmp	r3, #2
 801a9c2:	d055      	beq.n	801aa70 <ai_array_to_buffer_fmt+0xb4>
 801a9c4:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 801a9c8:	4a2c      	ldr	r2, [pc, #176]	@ (801aa7c <ai_array_to_buffer_fmt+0xc0>)
 801a9ca:	4293      	cmp	r3, r2
 801a9cc:	d010      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801a9ce:	dc21      	bgt.n	801aa14 <ai_array_to_buffer_fmt+0x58>
 801a9d0:	4a2b      	ldr	r2, [pc, #172]	@ (801aa80 <ai_array_to_buffer_fmt+0xc4>)
 801a9d2:	4293      	cmp	r3, r2
 801a9d4:	d00c      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801a9d6:	dd0f      	ble.n	801a9f8 <ai_array_to_buffer_fmt+0x3c>
 801a9d8:	4a2a      	ldr	r2, [pc, #168]	@ (801aa84 <ai_array_to_buffer_fmt+0xc8>)
 801a9da:	4293      	cmp	r3, r2
 801a9dc:	d008      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801a9de:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 801a9e2:	4293      	cmp	r3, r2
 801a9e4:	d004      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801a9e6:	4a28      	ldr	r2, [pc, #160]	@ (801aa88 <ai_array_to_buffer_fmt+0xcc>)
 801a9e8:	4293      	cmp	r3, r2
 801a9ea:	bf0c      	ite	eq
 801a9ec:	4613      	moveq	r3, r2
 801a9ee:	2340      	movne	r3, #64	@ 0x40
 801a9f0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801a9f4:	4318      	orrs	r0, r3
 801a9f6:	4770      	bx	lr
 801a9f8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801a9fc:	4293      	cmp	r3, r2
 801a9fe:	d0f7      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa00:	dd2c      	ble.n	801aa5c <ai_array_to_buffer_fmt+0xa0>
 801aa02:	4a22      	ldr	r2, [pc, #136]	@ (801aa8c <ai_array_to_buffer_fmt+0xd0>)
 801aa04:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801aa08:	4293      	cmp	r3, r2
 801aa0a:	bf0c      	ite	eq
 801aa0c:	4613      	moveq	r3, r2
 801aa0e:	2340      	movne	r3, #64	@ 0x40
 801aa10:	4318      	orrs	r0, r3
 801aa12:	4770      	bx	lr
 801aa14:	4a1e      	ldr	r2, [pc, #120]	@ (801aa90 <ai_array_to_buffer_fmt+0xd4>)
 801aa16:	4293      	cmp	r3, r2
 801aa18:	d0ea      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa1a:	dd10      	ble.n	801aa3e <ai_array_to_buffer_fmt+0x82>
 801aa1c:	4a1d      	ldr	r2, [pc, #116]	@ (801aa94 <ai_array_to_buffer_fmt+0xd8>)
 801aa1e:	4293      	cmp	r3, r2
 801aa20:	d0e6      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa22:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 801aa26:	4293      	cmp	r3, r2
 801aa28:	d0e2      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa2a:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 801aa2e:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 801aa32:	4293      	cmp	r3, r2
 801aa34:	bf0c      	ite	eq
 801aa36:	4613      	moveq	r3, r2
 801aa38:	2340      	movne	r3, #64	@ 0x40
 801aa3a:	4318      	orrs	r0, r3
 801aa3c:	4770      	bx	lr
 801aa3e:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 801aa42:	4293      	cmp	r3, r2
 801aa44:	d0d4      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa46:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 801aa4a:	4293      	cmp	r3, r2
 801aa4c:	d0d0      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa4e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801aa52:	4293      	cmp	r3, r2
 801aa54:	bf0c      	ite	eq
 801aa56:	4613      	moveq	r3, r2
 801aa58:	2340      	movne	r3, #64	@ 0x40
 801aa5a:	e7c9      	b.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa5c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 801aa60:	4293      	cmp	r3, r2
 801aa62:	d0c5      	beq.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa64:	3280      	adds	r2, #128	@ 0x80
 801aa66:	4293      	cmp	r3, r2
 801aa68:	bf0c      	ite	eq
 801aa6a:	4613      	moveq	r3, r2
 801aa6c:	2340      	movne	r3, #64	@ 0x40
 801aa6e:	e7bf      	b.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa70:	4b09      	ldr	r3, [pc, #36]	@ (801aa98 <ai_array_to_buffer_fmt+0xdc>)
 801aa72:	4003      	ands	r3, r0
 801aa74:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801aa78:	e7ba      	b.n	801a9f0 <ai_array_to_buffer_fmt+0x34>
 801aa7a:	bf00      	nop
 801aa7c:	00821040 	.word	0x00821040
 801aa80:	00040840 	.word	0x00040840
 801aa84:	00041040 	.word	0x00041040
 801aa88:	0004084f 	.word	0x0004084f
 801aa8c:	00040447 	.word	0x00040447
 801aa90:	00840447 	.word	0x00840447
 801aa94:	0084084f 	.word	0x0084084f
 801aa98:	00803fff 	.word	0x00803fff

0801aa9c <ai_array_get_byte_size>:
 801aa9c:	b1f1      	cbz	r1, 801aadc <ai_array_get_byte_size+0x40>
 801aa9e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801aaa2:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 801aaa6:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 801aaaa:	f3c0 5041 	ubfx	r0, r0, #21, #2
 801aaae:	fb03 f101 	mul.w	r1, r3, r1
 801aab2:	fa42 f20c 	asr.w	r2, r2, ip
 801aab6:	3107      	adds	r1, #7
 801aab8:	07d2      	lsls	r2, r2, #31
 801aaba:	f021 0107 	bic.w	r1, r1, #7
 801aabe:	fa21 f100 	lsr.w	r1, r1, r0
 801aac2:	d504      	bpl.n	801aace <ai_array_get_byte_size+0x32>
 801aac4:	2300      	movs	r3, #0
 801aac6:	3107      	adds	r1, #7
 801aac8:	4419      	add	r1, r3
 801aaca:	08c8      	lsrs	r0, r1, #3
 801aacc:	4770      	bx	lr
 801aace:	fa43 f000 	asr.w	r0, r3, r0
 801aad2:	3107      	adds	r1, #7
 801aad4:	4083      	lsls	r3, r0
 801aad6:	4419      	add	r1, r3
 801aad8:	08c8      	lsrs	r0, r1, #3
 801aada:	4770      	bx	lr
 801aadc:	4608      	mov	r0, r1
 801aade:	4770      	bx	lr

0801aae0 <ai_array_get_data_byte_size>:
 801aae0:	b161      	cbz	r1, 801aafc <ai_array_get_data_byte_size+0x1c>
 801aae2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 801aae6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 801aaea:	fb01 f003 	mul.w	r0, r1, r3
 801aaee:	3007      	adds	r0, #7
 801aaf0:	f020 0007 	bic.w	r0, r0, #7
 801aaf4:	40d0      	lsrs	r0, r2
 801aaf6:	3007      	adds	r0, #7
 801aaf8:	08c0      	lsrs	r0, r0, #3
 801aafa:	4770      	bx	lr
 801aafc:	4608      	mov	r0, r1
 801aafe:	4770      	bx	lr

0801ab00 <ai_version_get>:
 801ab00:	0212      	lsls	r2, r2, #8
 801ab02:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 801ab06:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 801ab0a:	4770      	bx	lr

0801ab0c <get_tensor_byte_size>:
 801ab0c:	b430      	push	{r4, r5}
 801ab0e:	6985      	ldr	r5, [r0, #24]
 801ab10:	68c4      	ldr	r4, [r0, #12]
 801ab12:	6941      	ldr	r1, [r0, #20]
 801ab14:	4b06      	ldr	r3, [pc, #24]	@ (801ab30 <get_tensor_byte_size+0x24>)
 801ab16:	6828      	ldr	r0, [r5, #0]
 801ab18:	4a06      	ldr	r2, [pc, #24]	@ (801ab34 <get_tensor_byte_size+0x28>)
 801ab1a:	4003      	ands	r3, r0
 801ab1c:	68c9      	ldr	r1, [r1, #12]
 801ab1e:	68e0      	ldr	r0, [r4, #12]
 801ab20:	4293      	cmp	r3, r2
 801ab22:	fb01 f000 	mul.w	r0, r1, r0
 801ab26:	d101      	bne.n	801ab2c <get_tensor_byte_size+0x20>
 801ab28:	3007      	adds	r0, #7
 801ab2a:	08c0      	lsrs	r0, r0, #3
 801ab2c:	bc30      	pop	{r4, r5}
 801ab2e:	4770      	bx	lr
 801ab30:	017fffff 	.word	0x017fffff
 801ab34:	000400c0 	.word	0x000400c0

0801ab38 <core_compute_offsets>:
 801ab38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ab3c:	e9d1 4600 	ldrd	r4, r6, [r1]
 801ab40:	f8d2 c004 	ldr.w	ip, [r2, #4]
 801ab44:	b083      	sub	sp, #12
 801ab46:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 801ab4a:	6871      	ldr	r1, [r6, #4]
 801ab4c:	f8dc 8004 	ldr.w	r8, [ip, #4]
 801ab50:	d37b      	bcc.n	801ac4a <core_compute_offsets+0x112>
 801ab52:	6935      	ldr	r5, [r6, #16]
 801ab54:	fb05 fe01 	mul.w	lr, r5, r1
 801ab58:	6812      	ldr	r2, [r2, #0]
 801ab5a:	e9d6 4602 	ldrd	r4, r6, [r6, #8]
 801ab5e:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 801ab62:	6802      	ldr	r2, [r0, #0]
 801ab64:	9600      	str	r6, [sp, #0]
 801ab66:	bf2c      	ite	cs
 801ab68:	f8dc 9010 	ldrcs.w	r9, [ip, #16]
 801ab6c:	f04f 0901 	movcc.w	r9, #1
 801ab70:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 801ab74:	e9dc 6702 	ldrd	r6, r7, [ip, #8]
 801ab78:	9701      	str	r7, [sp, #4]
 801ab7a:	d363      	bcc.n	801ac44 <core_compute_offsets+0x10c>
 801ab7c:	4541      	cmp	r1, r8
 801ab7e:	6847      	ldr	r7, [r0, #4]
 801ab80:	bf0c      	ite	eq
 801ab82:	461a      	moveq	r2, r3
 801ab84:	2200      	movne	r2, #0
 801ab86:	607a      	str	r2, [r7, #4]
 801ab88:	bf18      	it	ne
 801ab8a:	2201      	movne	r2, #1
 801ab8c:	f8d0 a000 	ldr.w	sl, [r0]
 801ab90:	bf08      	it	eq
 801ab92:	2200      	moveq	r2, #0
 801ab94:	ebb5 0c09 	subs.w	ip, r5, r9
 801ab98:	f3ca 2b17 	ubfx	fp, sl, #8, #24
 801ab9c:	bf18      	it	ne
 801ab9e:	f04f 0c01 	movne.w	ip, #1
 801aba2:	f5ba 6fa0 	cmp.w	sl, #1280	@ 0x500
 801aba6:	d313      	bcc.n	801abd0 <core_compute_offsets+0x98>
 801aba8:	454d      	cmp	r5, r9
 801abaa:	bf14      	ite	ne
 801abac:	f04f 0a00 	movne.w	sl, #0
 801abb0:	f002 0a01 	andeq.w	sl, r2, #1
 801abb4:	4541      	cmp	r1, r8
 801abb6:	bf14      	ite	ne
 801abb8:	2500      	movne	r5, #0
 801abba:	f00c 0501 	andeq.w	r5, ip, #1
 801abbe:	6847      	ldr	r7, [r0, #4]
 801abc0:	fb01 a815 	mls	r8, r1, r5, sl
 801abc4:	fb03 f508 	mul.w	r5, r3, r8
 801abc8:	613d      	str	r5, [r7, #16]
 801abca:	6805      	ldr	r5, [r0, #0]
 801abcc:	f3c5 2b17 	ubfx	fp, r5, #8, #24
 801abd0:	ebb4 0806 	subs.w	r8, r4, r6
 801abd4:	bf18      	it	ne
 801abd6:	f04f 0801 	movne.w	r8, #1
 801abda:	f1bb 0f02 	cmp.w	fp, #2
 801abde:	fb08 f50e 	mul.w	r5, r8, lr
 801abe2:	d92f      	bls.n	801ac44 <core_compute_offsets+0x10c>
 801abe4:	42b4      	cmp	r4, r6
 801abe6:	bf14      	ite	ne
 801abe8:	f04f 0900 	movne.w	r9, #0
 801abec:	f002 0901 	andeq.w	r9, r2, #1
 801abf0:	9f01      	ldr	r7, [sp, #4]
 801abf2:	ea0c 0909 	and.w	r9, ip, r9
 801abf6:	eba9 0905 	sub.w	r9, r9, r5
 801abfa:	fb01 990c 	mla	r9, r1, ip, r9
 801abfe:	9900      	ldr	r1, [sp, #0]
 801ac00:	f1a1 0601 	sub.w	r6, r1, #1
 801ac04:	fb03 f909 	mul.w	r9, r3, r9
 801ac08:	fab6 f686 	clz	r6, r6
 801ac0c:	0976      	lsrs	r6, r6, #5
 801ac0e:	42b9      	cmp	r1, r7
 801ac10:	bf18      	it	ne
 801ac12:	f046 0601 	orrne.w	r6, r6, #1
 801ac16:	6847      	ldr	r7, [r0, #4]
 801ac18:	f8c7 9008 	str.w	r9, [r7, #8]
 801ac1c:	6801      	ldr	r1, [r0, #0]
 801ac1e:	f3c1 2117 	ubfx	r1, r1, #8, #24
 801ac22:	b9ae      	cbnz	r6, 801ac50 <core_compute_offsets+0x118>
 801ac24:	f1b8 0f00 	cmp.w	r8, #0
 801ac28:	d012      	beq.n	801ac50 <core_compute_offsets+0x118>
 801ac2a:	ea02 020c 	and.w	r2, r2, ip
 801ac2e:	2903      	cmp	r1, #3
 801ac30:	d908      	bls.n	801ac44 <core_compute_offsets+0x10c>
 801ac32:	fb0e f404 	mul.w	r4, lr, r4
 801ac36:	6841      	ldr	r1, [r0, #4]
 801ac38:	fb06 2214 	mls	r2, r6, r4, r2
 801ac3c:	442a      	add	r2, r5
 801ac3e:	fb03 f202 	mul.w	r2, r3, r2
 801ac42:	60ca      	str	r2, [r1, #12]
 801ac44:	b003      	add	sp, #12
 801ac46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ac4a:	468e      	mov	lr, r1
 801ac4c:	2501      	movs	r5, #1
 801ac4e:	e783      	b.n	801ab58 <core_compute_offsets+0x20>
 801ac50:	2200      	movs	r2, #0
 801ac52:	e7ec      	b.n	801ac2e <core_compute_offsets+0xf6>

0801ac54 <D16_GENERIC>:
 801ac54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ac58:	b087      	sub	sp, #28
 801ac5a:	6993      	ldr	r3, [r2, #24]
 801ac5c:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801ac5e:	9101      	str	r1, [sp, #4]
 801ac60:	68d1      	ldr	r1, [r2, #12]
 801ac62:	9304      	str	r3, [sp, #16]
 801ac64:	9105      	str	r1, [sp, #20]
 801ac66:	6914      	ldr	r4, [r2, #16]
 801ac68:	f8d2 a014 	ldr.w	sl, [r2, #20]
 801ac6c:	69d3      	ldr	r3, [r2, #28]
 801ac6e:	f8d2 e008 	ldr.w	lr, [r2, #8]
 801ac72:	f8d2 8030 	ldr.w	r8, [r2, #48]	@ 0x30
 801ac76:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801ac78:	2d00      	cmp	r5, #0
 801ac7a:	d05e      	beq.n	801ad3a <D16_GENERIC+0xe6>
 801ac7c:	f001 0510 	and.w	r5, r1, #16
 801ac80:	f001 0120 	and.w	r1, r1, #32
 801ac84:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 801ad60 <D16_GENERIC+0x10c>
 801ac88:	46c1      	mov	r9, r8
 801ac8a:	9103      	str	r1, [sp, #12]
 801ac8c:	2100      	movs	r1, #0
 801ac8e:	9502      	str	r5, [sp, #8]
 801ac90:	e048      	b.n	801ad24 <D16_GENERIC+0xd0>
 801ac92:	5d87      	ldrb	r7, [r0, r6]
 801ac94:	7805      	ldrb	r5, [r0, #0]
 801ac96:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801ac9a:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 801ac9e:	b2fe      	uxtb	r6, r7
 801aca0:	f3c7 2707 	ubfx	r7, r7, #8, #8
 801aca4:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 801aca8:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 801acac:	441d      	add	r5, r3
 801acae:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 801acb2:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801acb6:	f3c3 0609 	ubfx	r6, r3, #0, #10
 801acba:	0a9b      	lsrs	r3, r3, #10
 801acbc:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 801acc0:	4d25      	ldr	r5, [pc, #148]	@ (801ad58 <D16_GENERIC+0x104>)
 801acc2:	fb26 e505 	smlad	r5, r6, r5, lr
 801acc6:	4f25      	ldr	r7, [pc, #148]	@ (801ad5c <D16_GENERIC+0x108>)
 801acc8:	fb26 fe07 	smuad	lr, r6, r7
 801accc:	9e02      	ldr	r6, [sp, #8]
 801acce:	f101 0801 	add.w	r8, r1, #1
 801acd2:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 801acd6:	b186      	cbz	r6, 801acfa <D16_GENERIC+0xa6>
 801acd8:	442c      	add	r4, r5
 801acda:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801acde:	eba4 040a 	sub.w	r4, r4, sl
 801ace2:	46aa      	mov	sl, r5
 801ace4:	17e7      	asrs	r7, r4, #31
 801ace6:	fba4 450b 	umull	r4, r5, r4, fp
 801acea:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801acee:	fb0b 5507 	mla	r5, fp, r7, r5
 801acf2:	f145 0500 	adc.w	r5, r5, #0
 801acf6:	006c      	lsls	r4, r5, #1
 801acf8:	4625      	mov	r5, r4
 801acfa:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 801acfe:	042d      	lsls	r5, r5, #16
 801ad00:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801ad04:	2700      	movs	r7, #0
 801ad06:	fb01 fb0b 	mul.w	fp, r1, fp
 801ad0a:	fa1f f188 	uxth.w	r1, r8
 801ad0e:	fbc9 6705 	smlal	r6, r7, r9, r5
 801ad12:	9e01      	ldr	r6, [sp, #4]
 801ad14:	10bd      	asrs	r5, r7, #2
 801ad16:	f305 050f 	ssat	r5, #16, r5
 801ad1a:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801ad1e:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801ad20:	428d      	cmp	r5, r1
 801ad22:	d90a      	bls.n	801ad3a <D16_GENERIC+0xe6>
 801ad24:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801ad26:	2d01      	cmp	r5, #1
 801ad28:	b2ee      	uxtb	r6, r5
 801ad2a:	d1b2      	bne.n	801ac92 <D16_GENERIC+0x3e>
 801ad2c:	9d03      	ldr	r5, [sp, #12]
 801ad2e:	f850 7b02 	ldr.w	r7, [r0], #2
 801ad32:	2d00      	cmp	r5, #0
 801ad34:	d0b3      	beq.n	801ac9e <D16_GENERIC+0x4a>
 801ad36:	ba7f      	rev16	r7, r7
 801ad38:	e7b1      	b.n	801ac9e <D16_GENERIC+0x4a>
 801ad3a:	2000      	movs	r0, #0
 801ad3c:	9905      	ldr	r1, [sp, #20]
 801ad3e:	61d3      	str	r3, [r2, #28]
 801ad40:	9b04      	ldr	r3, [sp, #16]
 801ad42:	f8c2 e008 	str.w	lr, [r2, #8]
 801ad46:	60d1      	str	r1, [r2, #12]
 801ad48:	6114      	str	r4, [r2, #16]
 801ad4a:	f8c2 a014 	str.w	sl, [r2, #20]
 801ad4e:	6193      	str	r3, [r2, #24]
 801ad50:	b007      	add	sp, #28
 801ad52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ad56:	bf00      	nop
 801ad58:	00030001 	.word	0x00030001
 801ad5c:	00010003 	.word	0x00010003
 801ad60:	24000000 	.word	0x24000000

0801ad64 <D24_GENERIC>:
 801ad64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801ad68:	6953      	ldr	r3, [r2, #20]
 801ad6a:	b087      	sub	sp, #28
 801ad6c:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 801ad6e:	9301      	str	r3, [sp, #4]
 801ad70:	6993      	ldr	r3, [r2, #24]
 801ad72:	9102      	str	r1, [sp, #8]
 801ad74:	9305      	str	r3, [sp, #20]
 801ad76:	6914      	ldr	r4, [r2, #16]
 801ad78:	69d1      	ldr	r1, [r2, #28]
 801ad7a:	6893      	ldr	r3, [r2, #8]
 801ad7c:	f8d2 800c 	ldr.w	r8, [r2, #12]
 801ad80:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 801ad84:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 801ad86:	2e00      	cmp	r6, #0
 801ad88:	f000 808c 	beq.w	801aea4 <D24_GENERIC+0x140>
 801ad8c:	f005 0610 	and.w	r6, r5, #16
 801ad90:	f005 0520 	and.w	r5, r5, #32
 801ad94:	f04f 0e00 	mov.w	lr, #0
 801ad98:	f8df c140 	ldr.w	ip, [pc, #320]	@ 801aedc <D24_GENERIC+0x178>
 801ad9c:	9603      	str	r6, [sp, #12]
 801ad9e:	9504      	str	r5, [sp, #16]
 801ada0:	e061      	b.n	801ae66 <D24_GENERIC+0x102>
 801ada2:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 801ada6:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801adaa:	f810 b007 	ldrb.w	fp, [r0, r7]
 801adae:	042d      	lsls	r5, r5, #16
 801adb0:	f890 9000 	ldrb.w	r9, [r0]
 801adb4:	19f0      	adds	r0, r6, r7
 801adb6:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 801adba:	44a9      	add	r9, r5
 801adbc:	fa5f f689 	uxtb.w	r6, r9
 801adc0:	f3c9 2707 	ubfx	r7, r9, #8, #8
 801adc4:	ea4f 4919 	mov.w	r9, r9, lsr #16
 801adc8:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 801adcc:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 801add0:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801add4:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 801add8:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 801addc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801ade0:	f3c7 0509 	ubfx	r5, r7, #0, #10
 801ade4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801ade8:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801adec:	4d39      	ldr	r5, [pc, #228]	@ (801aed4 <D24_GENERIC+0x170>)
 801adee:	fb26 8705 	smlad	r7, r6, r5, r8
 801adf2:	4d39      	ldr	r5, [pc, #228]	@ (801aed8 <D24_GENERIC+0x174>)
 801adf4:	fb26 3805 	smlad	r8, r6, r5, r3
 801adf8:	f3c1 0309 	ubfx	r3, r1, #0, #10
 801adfc:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 801ae00:	2301      	movs	r3, #1
 801ae02:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 801ae06:	fb26 f603 	smuad	r6, r6, r3
 801ae0a:	eb0e 0903 	add.w	r9, lr, r3
 801ae0e:	eb0b 0306 	add.w	r3, fp, r6
 801ae12:	9e03      	ldr	r6, [sp, #12]
 801ae14:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 801ae18:	b186      	cbz	r6, 801ae3c <D24_GENERIC+0xd8>
 801ae1a:	442c      	add	r4, r5
 801ae1c:	9e01      	ldr	r6, [sp, #4]
 801ae1e:	f8d2 b020 	ldr.w	fp, [r2, #32]
 801ae22:	1ba4      	subs	r4, r4, r6
 801ae24:	9501      	str	r5, [sp, #4]
 801ae26:	17e7      	asrs	r7, r4, #31
 801ae28:	fba4 450b 	umull	r4, r5, r4, fp
 801ae2c:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801ae30:	fb0b 5507 	mla	r5, fp, r7, r5
 801ae34:	f145 0500 	adc.w	r5, r5, #0
 801ae38:	006c      	lsls	r4, r5, #1
 801ae3a:	4625      	mov	r5, r4
 801ae3c:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 801ae40:	03ad      	lsls	r5, r5, #14
 801ae42:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801ae46:	2700      	movs	r7, #0
 801ae48:	fb0e fb0b 	mul.w	fp, lr, fp
 801ae4c:	fa1f fe89 	uxth.w	lr, r9
 801ae50:	fbca 6705 	smlal	r6, r7, sl, r5
 801ae54:	9e02      	ldr	r6, [sp, #8]
 801ae56:	10bd      	asrs	r5, r7, #2
 801ae58:	f305 050f 	ssat	r5, #16, r5
 801ae5c:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801ae60:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801ae62:	4575      	cmp	r5, lr
 801ae64:	d91e      	bls.n	801aea4 <D24_GENERIC+0x140>
 801ae66:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801ae68:	b2ef      	uxtb	r7, r5
 801ae6a:	2d01      	cmp	r5, #1
 801ae6c:	b23e      	sxth	r6, r7
 801ae6e:	d198      	bne.n	801ada2 <D24_GENERIC+0x3e>
 801ae70:	9d04      	ldr	r5, [sp, #16]
 801ae72:	b16d      	cbz	r5, 801ae90 <D24_GENERIC+0x12c>
 801ae74:	f01e 0f01 	tst.w	lr, #1
 801ae78:	d121      	bne.n	801aebe <D24_GENERIC+0x15a>
 801ae7a:	7805      	ldrb	r5, [r0, #0]
 801ae7c:	3002      	adds	r0, #2
 801ae7e:	f890 9001 	ldrb.w	r9, [r0, #1]
 801ae82:	022d      	lsls	r5, r5, #8
 801ae84:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801ae88:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 801ae8c:	44b1      	add	r9, r6
 801ae8e:	e795      	b.n	801adbc <D24_GENERIC+0x58>
 801ae90:	7846      	ldrb	r6, [r0, #1]
 801ae92:	f890 9002 	ldrb.w	r9, [r0, #2]
 801ae96:	0236      	lsls	r6, r6, #8
 801ae98:	f810 5b03 	ldrb.w	r5, [r0], #3
 801ae9c:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 801aea0:	44a9      	add	r9, r5
 801aea2:	e78b      	b.n	801adbc <D24_GENERIC+0x58>
 801aea4:	6093      	str	r3, [r2, #8]
 801aea6:	2000      	movs	r0, #0
 801aea8:	9b01      	ldr	r3, [sp, #4]
 801aeaa:	f8c2 800c 	str.w	r8, [r2, #12]
 801aeae:	6153      	str	r3, [r2, #20]
 801aeb0:	9b05      	ldr	r3, [sp, #20]
 801aeb2:	61d1      	str	r1, [r2, #28]
 801aeb4:	6114      	str	r4, [r2, #16]
 801aeb6:	6193      	str	r3, [r2, #24]
 801aeb8:	b007      	add	sp, #28
 801aeba:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801aebe:	78c5      	ldrb	r5, [r0, #3]
 801aec0:	f890 9002 	ldrb.w	r9, [r0, #2]
 801aec4:	022d      	lsls	r5, r5, #8
 801aec6:	f810 6b04 	ldrb.w	r6, [r0], #4
 801aeca:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 801aece:	44b1      	add	r9, r6
 801aed0:	e774      	b.n	801adbc <D24_GENERIC+0x58>
 801aed2:	bf00      	nop
 801aed4:	00030001 	.word	0x00030001
 801aed8:	00060007 	.word	0x00060007
 801aedc:	24000000 	.word	0x24000000

0801aee0 <D32_GENERIC>:
 801aee0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801aee4:	6953      	ldr	r3, [r2, #20]
 801aee6:	b087      	sub	sp, #28
 801aee8:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801aeea:	9300      	str	r3, [sp, #0]
 801aeec:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 801aeee:	6993      	ldr	r3, [r2, #24]
 801aef0:	9102      	str	r1, [sp, #8]
 801aef2:	9305      	str	r3, [sp, #20]
 801aef4:	9501      	str	r5, [sp, #4]
 801aef6:	6914      	ldr	r4, [r2, #16]
 801aef8:	69d1      	ldr	r1, [r2, #28]
 801aefa:	6893      	ldr	r3, [r2, #8]
 801aefc:	f8d2 800c 	ldr.w	r8, [r2, #12]
 801af00:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 801af02:	2e00      	cmp	r6, #0
 801af04:	f000 8098 	beq.w	801b038 <D32_GENERIC+0x158>
 801af08:	f005 0610 	and.w	r6, r5, #16
 801af0c:	f005 0520 	and.w	r5, r5, #32
 801af10:	f04f 0c00 	mov.w	ip, #0
 801af14:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 801b064 <D32_GENERIC+0x184>
 801af18:	9603      	str	r6, [sp, #12]
 801af1a:	9504      	str	r5, [sp, #16]
 801af1c:	e078      	b.n	801b010 <D32_GENERIC+0x130>
 801af1e:	eb00 0905 	add.w	r9, r0, r5
 801af22:	f810 b005 	ldrb.w	fp, [r0, r5]
 801af26:	f810 a006 	ldrb.w	sl, [r0, r6]
 801af2a:	f819 5007 	ldrb.w	r5, [r9, r7]
 801af2e:	444f      	add	r7, r9
 801af30:	f890 9000 	ldrb.w	r9, [r0]
 801af34:	042d      	lsls	r5, r5, #16
 801af36:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 801af3a:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 801af3e:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 801af42:	44a9      	add	r9, r5
 801af44:	fa5f f789 	uxtb.w	r7, r9
 801af48:	f3c9 2507 	ubfx	r5, r9, #8, #8
 801af4c:	f3c9 4607 	ubfx	r6, r9, #16, #8
 801af50:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801af54:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801af58:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 801af5c:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 801af60:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 801af64:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 801af68:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801af6c:	f3c1 0909 	ubfx	r9, r1, #0, #10
 801af70:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801af74:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801af78:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 801af7c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801af80:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 801af84:	f3c1 0509 	ubfx	r5, r1, #0, #10
 801af88:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 801af8c:	4d31      	ldr	r5, [pc, #196]	@ (801b054 <D32_GENERIC+0x174>)
 801af8e:	fb29 8805 	smlad	r8, r9, r5, r8
 801af92:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 801af96:	fb26 8705 	smlad	r7, r6, r5, r8
 801af9a:	4d2f      	ldr	r5, [pc, #188]	@ (801b058 <D32_GENERIC+0x178>)
 801af9c:	fb29 3305 	smlad	r3, r9, r5, r3
 801afa0:	4d2e      	ldr	r5, [pc, #184]	@ (801b05c <D32_GENERIC+0x17c>)
 801afa2:	fb26 3805 	smlad	r8, r6, r5, r3
 801afa6:	2301      	movs	r3, #1
 801afa8:	fb29 f903 	smuad	r9, r9, r3
 801afac:	4b2c      	ldr	r3, [pc, #176]	@ (801b060 <D32_GENERIC+0x180>)
 801afae:	fb26 9303 	smlad	r3, r6, r3, r9
 801afb2:	9e03      	ldr	r6, [sp, #12]
 801afb4:	f10c 0901 	add.w	r9, ip, #1
 801afb8:	f5a7 4580 	sub.w	r5, r7, #16384	@ 0x4000
 801afbc:	b186      	cbz	r6, 801afe0 <D32_GENERIC+0x100>
 801afbe:	442c      	add	r4, r5
 801afc0:	9e00      	ldr	r6, [sp, #0]
 801afc2:	f8d2 a020 	ldr.w	sl, [r2, #32]
 801afc6:	1ba4      	subs	r4, r4, r6
 801afc8:	9500      	str	r5, [sp, #0]
 801afca:	17e7      	asrs	r7, r4, #31
 801afcc:	fba4 450a 	umull	r4, r5, r4, sl
 801afd0:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801afd4:	fb0a 5507 	mla	r5, sl, r7, r5
 801afd8:	f145 0500 	adc.w	r5, r5, #0
 801afdc:	006c      	lsls	r4, r5, #1
 801afde:	4625      	mov	r5, r4
 801afe0:	f8b2 a028 	ldrh.w	sl, [r2, #40]	@ 0x28
 801afe4:	036d      	lsls	r5, r5, #13
 801afe6:	9f01      	ldr	r7, [sp, #4]
 801afe8:	fb0c fb0a 	mul.w	fp, ip, sl
 801afec:	fa1f fc89 	uxth.w	ip, r9
 801aff0:	f04f 0a00 	mov.w	sl, #0
 801aff4:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 801aff8:	9e02      	ldr	r6, [sp, #8]
 801affa:	fbc7 9a05 	smlal	r9, sl, r7, r5
 801affe:	4657      	mov	r7, sl
 801b000:	10bd      	asrs	r5, r7, #2
 801b002:	f305 050f 	ssat	r5, #16, r5
 801b006:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 801b00a:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 801b00c:	4565      	cmp	r5, ip
 801b00e:	d913      	bls.n	801b038 <D32_GENERIC+0x158>
 801b010:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801b012:	b2ee      	uxtb	r6, r5
 801b014:	2d01      	cmp	r5, #1
 801b016:	f1c6 0700 	rsb	r7, r6, #0
 801b01a:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 801b01e:	f47f af7e 	bne.w	801af1e <D32_GENERIC+0x3e>
 801b022:	1d05      	adds	r5, r0, #4
 801b024:	f8d0 9000 	ldr.w	r9, [r0]
 801b028:	9804      	ldr	r0, [sp, #16]
 801b02a:	b118      	cbz	r0, 801b034 <D32_GENERIC+0x154>
 801b02c:	fa99 f999 	rev16.w	r9, r9
 801b030:	4628      	mov	r0, r5
 801b032:	e787      	b.n	801af44 <D32_GENERIC+0x64>
 801b034:	4628      	mov	r0, r5
 801b036:	e785      	b.n	801af44 <D32_GENERIC+0x64>
 801b038:	6093      	str	r3, [r2, #8]
 801b03a:	2000      	movs	r0, #0
 801b03c:	9b00      	ldr	r3, [sp, #0]
 801b03e:	f8c2 800c 	str.w	r8, [r2, #12]
 801b042:	6153      	str	r3, [r2, #20]
 801b044:	9b05      	ldr	r3, [sp, #20]
 801b046:	61d1      	str	r1, [r2, #28]
 801b048:	6114      	str	r4, [r2, #16]
 801b04a:	6193      	str	r3, [r2, #24]
 801b04c:	b007      	add	sp, #28
 801b04e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b052:	bf00      	nop
 801b054:	00060003 	.word	0x00060003
 801b058:	000a000c 	.word	0x000a000c
 801b05c:	000c000a 	.word	0x000c000a
 801b060:	00030006 	.word	0x00030006
 801b064:	24000000 	.word	0x24000000

0801b068 <D48_GENERIC>:
 801b068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b06c:	6913      	ldr	r3, [r2, #16]
 801b06e:	b08b      	sub	sp, #44	@ 0x2c
 801b070:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 801b072:	9106      	str	r1, [sp, #24]
 801b074:	9303      	str	r3, [sp, #12]
 801b076:	68d1      	ldr	r1, [r2, #12]
 801b078:	6953      	ldr	r3, [r2, #20]
 801b07a:	9101      	str	r1, [sp, #4]
 801b07c:	9304      	str	r3, [sp, #16]
 801b07e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801b080:	6993      	ldr	r3, [r2, #24]
 801b082:	9105      	str	r1, [sp, #20]
 801b084:	9309      	str	r3, [sp, #36]	@ 0x24
 801b086:	69d6      	ldr	r6, [r2, #28]
 801b088:	6893      	ldr	r3, [r2, #8]
 801b08a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801b08c:	2c00      	cmp	r4, #0
 801b08e:	f000 80c6 	beq.w	801b21e <D48_GENERIC+0x1b6>
 801b092:	f001 0410 	and.w	r4, r1, #16
 801b096:	f001 0120 	and.w	r1, r1, #32
 801b09a:	2700      	movs	r7, #0
 801b09c:	9302      	str	r3, [sp, #8]
 801b09e:	9108      	str	r1, [sp, #32]
 801b0a0:	9407      	str	r4, [sp, #28]
 801b0a2:	4966      	ldr	r1, [pc, #408]	@ (801b23c <D48_GENERIC+0x1d4>)
 801b0a4:	e0a6      	b.n	801b1f4 <D48_GENERIC+0x18c>
 801b0a6:	eb00 0e08 	add.w	lr, r0, r8
 801b0aa:	f810 a008 	ldrb.w	sl, [r0, r8]
 801b0ae:	f810 9005 	ldrb.w	r9, [r0, r5]
 801b0b2:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801b0b6:	44e6      	add	lr, ip
 801b0b8:	f890 b000 	ldrb.w	fp, [r0]
 801b0bc:	0420      	lsls	r0, r4, #16
 801b0be:	eb0e 0408 	add.w	r4, lr, r8
 801b0c2:	f81e e008 	ldrb.w	lr, [lr, r8]
 801b0c6:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 801b0ca:	f814 800c 	ldrb.w	r8, [r4, ip]
 801b0ce:	44a4      	add	ip, r4
 801b0d0:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 801b0d4:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 801b0d8:	eb0a 040b 	add.w	r4, sl, fp
 801b0dc:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 801b0e0:	fa5f f884 	uxtb.w	r8, r4
 801b0e4:	f3c4 2507 	ubfx	r5, r4, #8, #8
 801b0e8:	f3c4 4907 	ubfx	r9, r4, #16, #8
 801b0ec:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 801b0f0:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801b0f4:	fa5f fc8e 	uxtb.w	ip, lr
 801b0f8:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 801b0fc:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 801b100:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 801b104:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 801b108:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 801b10c:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 801b110:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 801b114:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 801b118:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801b11c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801b120:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801b124:	9b01      	ldr	r3, [sp, #4]
 801b126:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 801b12a:	f3c6 0909 	ubfx	r9, r6, #0, #10
 801b12e:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 801b132:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 801b136:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801b13a:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 801b13e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801b142:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 801b146:	f3c6 0509 	ubfx	r5, r6, #0, #10
 801b14a:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 801b14e:	4d3c      	ldr	r5, [pc, #240]	@ (801b240 <D48_GENERIC+0x1d8>)
 801b150:	fb28 3a05 	smlad	sl, r8, r5, r3
 801b154:	4b3b      	ldr	r3, [pc, #236]	@ (801b244 <D48_GENERIC+0x1dc>)
 801b156:	fb24 aa03 	smlad	sl, r4, r3, sl
 801b15a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801b15e:	fb2c aa03 	smlad	sl, ip, r3, sl
 801b162:	4b39      	ldr	r3, [pc, #228]	@ (801b248 <D48_GENERIC+0x1e0>)
 801b164:	9d02      	ldr	r5, [sp, #8]
 801b166:	fb28 5303 	smlad	r3, r8, r3, r5
 801b16a:	f04f 151b 	mov.w	r5, #1769499	@ 0x1b001b
 801b16e:	fb24 3305 	smlad	r3, r4, r5, r3
 801b172:	4d36      	ldr	r5, [pc, #216]	@ (801b24c <D48_GENERIC+0x1e4>)
 801b174:	fb2c 3305 	smlad	r3, ip, r5, r3
 801b178:	2501      	movs	r5, #1
 801b17a:	9301      	str	r3, [sp, #4]
 801b17c:	fb28 f805 	smuad	r8, r8, r5
 801b180:	4b33      	ldr	r3, [pc, #204]	@ (801b250 <D48_GENERIC+0x1e8>)
 801b182:	fb24 8403 	smlad	r4, r4, r3, r8
 801b186:	4b33      	ldr	r3, [pc, #204]	@ (801b254 <D48_GENERIC+0x1ec>)
 801b188:	fb2c 4303 	smlad	r3, ip, r3, r4
 801b18c:	9302      	str	r3, [sp, #8]
 801b18e:	eb07 0e05 	add.w	lr, r7, r5
 801b192:	9b07      	ldr	r3, [sp, #28]
 801b194:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 801b198:	b1ab      	cbz	r3, 801b1c6 <D48_GENERIC+0x15e>
 801b19a:	9b03      	ldr	r3, [sp, #12]
 801b19c:	f8d2 c020 	ldr.w	ip, [r2, #32]
 801b1a0:	4453      	add	r3, sl
 801b1a2:	461c      	mov	r4, r3
 801b1a4:	9b04      	ldr	r3, [sp, #16]
 801b1a6:	f8cd a010 	str.w	sl, [sp, #16]
 801b1aa:	1ae4      	subs	r4, r4, r3
 801b1ac:	ea4f 79e4 	mov.w	r9, r4, asr #31
 801b1b0:	fba4 450c 	umull	r4, r5, r4, ip
 801b1b4:	fb0c 5509 	mla	r5, ip, r9, r5
 801b1b8:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801b1bc:	f145 0500 	adc.w	r5, r5, #0
 801b1c0:	006b      	lsls	r3, r5, #1
 801b1c2:	469a      	mov	sl, r3
 801b1c4:	9303      	str	r3, [sp, #12]
 801b1c6:	f8b2 c028 	ldrh.w	ip, [r2, #40]	@ 0x28
 801b1ca:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 801b1ce:	9b05      	ldr	r3, [sp, #20]
 801b1d0:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801b1d4:	2500      	movs	r5, #0
 801b1d6:	fb07 fc0c 	mul.w	ip, r7, ip
 801b1da:	fa1f f78e 	uxth.w	r7, lr
 801b1de:	fbc3 450a 	smlal	r4, r5, r3, sl
 801b1e2:	9b06      	ldr	r3, [sp, #24]
 801b1e4:	10ac      	asrs	r4, r5, #2
 801b1e6:	f304 040f 	ssat	r4, #16, r4
 801b1ea:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 801b1ee:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 801b1f0:	42bc      	cmp	r4, r7
 801b1f2:	d913      	bls.n	801b21c <D48_GENERIC+0x1b4>
 801b1f4:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 801b1f6:	b2e5      	uxtb	r5, r4
 801b1f8:	2c01      	cmp	r4, #1
 801b1fa:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 801b1fe:	f1c5 0c00 	rsb	ip, r5, #0
 801b202:	f47f af50 	bne.w	801b0a6 <D48_GENERIC+0x3e>
 801b206:	9b08      	ldr	r3, [sp, #32]
 801b208:	e890 4010 	ldmia.w	r0, {r4, lr}
 801b20c:	3006      	adds	r0, #6
 801b20e:	2b00      	cmp	r3, #0
 801b210:	f43f af66 	beq.w	801b0e0 <D48_GENERIC+0x78>
 801b214:	ba64      	rev16	r4, r4
 801b216:	fa9e fe9e 	rev16.w	lr, lr
 801b21a:	e761      	b.n	801b0e0 <D48_GENERIC+0x78>
 801b21c:	9b02      	ldr	r3, [sp, #8]
 801b21e:	6093      	str	r3, [r2, #8]
 801b220:	2000      	movs	r0, #0
 801b222:	9b01      	ldr	r3, [sp, #4]
 801b224:	61d6      	str	r6, [r2, #28]
 801b226:	60d3      	str	r3, [r2, #12]
 801b228:	9b03      	ldr	r3, [sp, #12]
 801b22a:	6113      	str	r3, [r2, #16]
 801b22c:	9b04      	ldr	r3, [sp, #16]
 801b22e:	6153      	str	r3, [r2, #20]
 801b230:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b232:	6193      	str	r3, [r2, #24]
 801b234:	b00b      	add	sp, #44	@ 0x2c
 801b236:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b23a:	bf00      	nop
 801b23c:	24000000 	.word	0x24000000
 801b240:	000f000a 	.word	0x000f000a
 801b244:	00060003 	.word	0x00060003
 801b248:	00150019 	.word	0x00150019
 801b24c:	00190015 	.word	0x00190015
 801b250:	00030006 	.word	0x00030006
 801b254:	000a000f 	.word	0x000a000f

0801b258 <D64_GENERIC>:
 801b258:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b25c:	6913      	ldr	r3, [r2, #16]
 801b25e:	b089      	sub	sp, #36	@ 0x24
 801b260:	68d5      	ldr	r5, [r2, #12]
 801b262:	9302      	str	r3, [sp, #8]
 801b264:	6953      	ldr	r3, [r2, #20]
 801b266:	462e      	mov	r6, r5
 801b268:	9105      	str	r1, [sp, #20]
 801b26a:	9303      	str	r3, [sp, #12]
 801b26c:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 801b26e:	6993      	ldr	r3, [r2, #24]
 801b270:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 801b272:	9307      	str	r3, [sp, #28]
 801b274:	69d4      	ldr	r4, [r2, #28]
 801b276:	6893      	ldr	r3, [r2, #8]
 801b278:	9504      	str	r5, [sp, #16]
 801b27a:	2900      	cmp	r1, #0
 801b27c:	f000 80e5 	beq.w	801b44a <D64_GENERIC+0x1f2>
 801b280:	6a11      	ldr	r1, [r2, #32]
 801b282:	2500      	movs	r5, #0
 801b284:	46b3      	mov	fp, r6
 801b286:	9301      	str	r3, [sp, #4]
 801b288:	9106      	str	r1, [sp, #24]
 801b28a:	4976      	ldr	r1, [pc, #472]	@ (801b464 <D64_GENERIC+0x20c>)
 801b28c:	e0c7      	b.n	801b41e <D64_GENERIC+0x1c6>
 801b28e:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 801b292:	f1cc 0e00 	rsb	lr, ip, #0
 801b296:	f890 9000 	ldrb.w	r9, [r0]
 801b29a:	eb00 0708 	add.w	r7, r0, r8
 801b29e:	f810 6008 	ldrb.w	r6, [r0, r8]
 801b2a2:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 801b2a6:	f817 000e 	ldrb.w	r0, [r7, lr]
 801b2aa:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 801b2ae:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 801b2b2:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 801b2b6:	ea4f 4800 	mov.w	r8, r0, lsl #16
 801b2ba:	f817 000e 	ldrb.w	r0, [r7, lr]
 801b2be:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 801b2c2:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 801b2c6:	0400      	lsls	r0, r0, #16
 801b2c8:	4477      	add	r7, lr
 801b2ca:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 801b2ce:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 801b2d2:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 801b2d6:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 801b2da:	444e      	add	r6, r9
 801b2dc:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 801b2e0:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 801b2e4:	44c2      	add	sl, r8
 801b2e6:	b2f7      	uxtb	r7, r6
 801b2e8:	f3c6 2807 	ubfx	r8, r6, #8, #8
 801b2ec:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 801b2f0:	0e36      	lsrs	r6, r6, #24
 801b2f2:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801b2f6:	fa5f fe8a 	uxtb.w	lr, sl
 801b2fa:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801b2fe:	f3ca 2907 	ubfx	r9, sl, #8, #8
 801b302:	443c      	add	r4, r7
 801b304:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 801b308:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801b30c:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 801b310:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 801b314:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801b318:	4b53      	ldr	r3, [pc, #332]	@ (801b468 <D64_GENERIC+0x210>)
 801b31a:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 801b31e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801b322:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 801b326:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 801b32a:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801b32e:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 801b332:	f3ca 4407 	ubfx	r4, sl, #16, #8
 801b336:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 801b33a:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801b33e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801b342:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 801b346:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 801b34a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801b34e:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 801b352:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 801b356:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 801b35a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801b35e:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 801b362:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801b366:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 801b36a:	f3c9 0709 	ubfx	r7, r9, #0, #10
 801b36e:	ea4f 2499 	mov.w	r4, r9, lsr #10
 801b372:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 801b376:	fb28 b903 	smlad	r9, r8, r3, fp
 801b37a:	4b3c      	ldr	r3, [pc, #240]	@ (801b46c <D64_GENERIC+0x214>)
 801b37c:	fb26 9903 	smlad	r9, r6, r3, r9
 801b380:	4b3b      	ldr	r3, [pc, #236]	@ (801b470 <D64_GENERIC+0x218>)
 801b382:	fb2e 9703 	smlad	r7, lr, r3, r9
 801b386:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 801b38a:	fb2a 7909 	smlad	r9, sl, r9, r7
 801b38e:	4b39      	ldr	r3, [pc, #228]	@ (801b474 <D64_GENERIC+0x21c>)
 801b390:	9f01      	ldr	r7, [sp, #4]
 801b392:	fb28 7303 	smlad	r3, r8, r3, r7
 801b396:	4f37      	ldr	r7, [pc, #220]	@ (801b474 <D64_GENERIC+0x21c>)
 801b398:	fb2a 3317 	smladx	r3, sl, r7, r3
 801b39c:	4f36      	ldr	r7, [pc, #216]	@ (801b478 <D64_GENERIC+0x220>)
 801b39e:	fb26 3307 	smlad	r3, r6, r7, r3
 801b3a2:	fb2e 3b17 	smladx	fp, lr, r7, r3
 801b3a6:	f04f 0c01 	mov.w	ip, #1
 801b3aa:	fb28 f80c 	smuad	r8, r8, ip
 801b3ae:	4b33      	ldr	r3, [pc, #204]	@ (801b47c <D64_GENERIC+0x224>)
 801b3b0:	fb26 8603 	smlad	r6, r6, r3, r8
 801b3b4:	4b32      	ldr	r3, [pc, #200]	@ (801b480 <D64_GENERIC+0x228>)
 801b3b6:	fb2e 6e03 	smlad	lr, lr, r3, r6
 801b3ba:	4b32      	ldr	r3, [pc, #200]	@ (801b484 <D64_GENERIC+0x22c>)
 801b3bc:	fb2a e303 	smlad	r3, sl, r3, lr
 801b3c0:	9301      	str	r3, [sp, #4]
 801b3c2:	f5a9 3900 	sub.w	r9, r9, #131072	@ 0x20000
 801b3c6:	9b06      	ldr	r3, [sp, #24]
 801b3c8:	b19b      	cbz	r3, 801b3f2 <D64_GENERIC+0x19a>
 801b3ca:	9e02      	ldr	r6, [sp, #8]
 801b3cc:	9f03      	ldr	r7, [sp, #12]
 801b3ce:	444e      	add	r6, r9
 801b3d0:	f8cd 900c 	str.w	r9, [sp, #12]
 801b3d4:	1bf6      	subs	r6, r6, r7
 801b3d6:	ea4f 79e6 	mov.w	r9, r6, asr #31
 801b3da:	fba6 6703 	umull	r6, r7, r6, r3
 801b3de:	fb03 7709 	mla	r7, r3, r9, r7
 801b3e2:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 801b3e6:	f147 0700 	adc.w	r7, r7, #0
 801b3ea:	fa07 f30c 	lsl.w	r3, r7, ip
 801b3ee:	4699      	mov	r9, r3
 801b3f0:	9302      	str	r3, [sp, #8]
 801b3f2:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 801b3f6:	ea4f 2989 	mov.w	r9, r9, lsl #10
 801b3fa:	9b04      	ldr	r3, [sp, #16]
 801b3fc:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801b400:	2700      	movs	r7, #0
 801b402:	fb05 fe0e 	mul.w	lr, r5, lr
 801b406:	3501      	adds	r5, #1
 801b408:	fbc3 6709 	smlal	r6, r7, r3, r9
 801b40c:	9b05      	ldr	r3, [sp, #20]
 801b40e:	10be      	asrs	r6, r7, #2
 801b410:	f306 060f 	ssat	r6, #16, r6
 801b414:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 801b418:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 801b41a:	42ae      	cmp	r6, r5
 801b41c:	dd13      	ble.n	801b446 <D64_GENERIC+0x1ee>
 801b41e:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	@ 0x2a
 801b422:	f1bc 0f01 	cmp.w	ip, #1
 801b426:	f47f af32 	bne.w	801b28e <D64_GENERIC+0x36>
 801b42a:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 801b42c:	f100 0e08 	add.w	lr, r0, #8
 801b430:	06bb      	lsls	r3, r7, #26
 801b432:	e890 0440 	ldmia.w	r0, {r6, sl}
 801b436:	d504      	bpl.n	801b442 <D64_GENERIC+0x1ea>
 801b438:	ba76      	rev16	r6, r6
 801b43a:	fa9a fa9a 	rev16.w	sl, sl
 801b43e:	4670      	mov	r0, lr
 801b440:	e751      	b.n	801b2e6 <D64_GENERIC+0x8e>
 801b442:	4670      	mov	r0, lr
 801b444:	e74f      	b.n	801b2e6 <D64_GENERIC+0x8e>
 801b446:	465e      	mov	r6, fp
 801b448:	9b01      	ldr	r3, [sp, #4]
 801b44a:	6093      	str	r3, [r2, #8]
 801b44c:	2000      	movs	r0, #0
 801b44e:	9b02      	ldr	r3, [sp, #8]
 801b450:	60d6      	str	r6, [r2, #12]
 801b452:	6113      	str	r3, [r2, #16]
 801b454:	9b03      	ldr	r3, [sp, #12]
 801b456:	61d4      	str	r4, [r2, #28]
 801b458:	6153      	str	r3, [r2, #20]
 801b45a:	9b07      	ldr	r3, [sp, #28]
 801b45c:	6193      	str	r3, [r2, #24]
 801b45e:	b009      	add	sp, #36	@ 0x24
 801b460:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b464:	24000000 	.word	0x24000000
 801b468:	001c0015 	.word	0x001c0015
 801b46c:	000f000a 	.word	0x000f000a
 801b470:	00060003 	.word	0x00060003
 801b474:	0024002a 	.word	0x0024002a
 801b478:	002e0030 	.word	0x002e0030
 801b47c:	00030006 	.word	0x00030006
 801b480:	000a000f 	.word	0x000a000f
 801b484:	0015001c 	.word	0x0015001c

0801b488 <D80_GENERIC>:
 801b488:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b48c:	b08b      	sub	sp, #44	@ 0x2c
 801b48e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 801b490:	9107      	str	r1, [sp, #28]
 801b492:	6911      	ldr	r1, [r2, #16]
 801b494:	9104      	str	r1, [sp, #16]
 801b496:	6951      	ldr	r1, [r2, #20]
 801b498:	9105      	str	r1, [sp, #20]
 801b49a:	6991      	ldr	r1, [r2, #24]
 801b49c:	9109      	str	r1, [sp, #36]	@ 0x24
 801b49e:	69d1      	ldr	r1, [r2, #28]
 801b4a0:	9101      	str	r1, [sp, #4]
 801b4a2:	6891      	ldr	r1, [r2, #8]
 801b4a4:	9103      	str	r1, [sp, #12]
 801b4a6:	68d1      	ldr	r1, [r2, #12]
 801b4a8:	9102      	str	r1, [sp, #8]
 801b4aa:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 801b4ac:	9106      	str	r1, [sp, #24]
 801b4ae:	2b00      	cmp	r3, #0
 801b4b0:	f000 810d 	beq.w	801b6ce <D80_GENERIC+0x246>
 801b4b4:	6a13      	ldr	r3, [r2, #32]
 801b4b6:	f04f 0800 	mov.w	r8, #0
 801b4ba:	f8df e264 	ldr.w	lr, [pc, #612]	@ 801b720 <D80_GENERIC+0x298>
 801b4be:	9308      	str	r3, [sp, #32]
 801b4c0:	9200      	str	r2, [sp, #0]
 801b4c2:	e0ee      	b.n	801b6a2 <D80_GENERIC+0x21a>
 801b4c4:	b2db      	uxtb	r3, r3
 801b4c6:	f890 c000 	ldrb.w	ip, [r0]
 801b4ca:	b219      	sxth	r1, r3
 801b4cc:	425c      	negs	r4, r3
 801b4ce:	f810 9003 	ldrb.w	r9, [r0, r3]
 801b4d2:	004e      	lsls	r6, r1, #1
 801b4d4:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 801b4d8:	4431      	add	r1, r6
 801b4da:	1843      	adds	r3, r0, r1
 801b4dc:	f810 b001 	ldrb.w	fp, [r0, r1]
 801b4e0:	1919      	adds	r1, r3, r4
 801b4e2:	5d1b      	ldrb	r3, [r3, r4]
 801b4e4:	1948      	adds	r0, r1, r5
 801b4e6:	f811 a005 	ldrb.w	sl, [r1, r5]
 801b4ea:	041b      	lsls	r3, r3, #16
 801b4ec:	1907      	adds	r7, r0, r4
 801b4ee:	5d01      	ldrb	r1, [r0, r4]
 801b4f0:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 801b4f4:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 801b4f8:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 801b4fc:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 801b500:	0409      	lsls	r1, r1, #16
 801b502:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 801b506:	eb0b 0905 	add.w	r9, fp, r5
 801b50a:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 801b50e:	f81b 5005 	ldrb.w	r5, [fp, r5]
 801b512:	eb09 0b04 	add.w	fp, r9, r4
 801b516:	f819 4004 	ldrb.w	r4, [r9, r4]
 801b51a:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 801b51e:	4463      	add	r3, ip
 801b520:	eb0b 0006 	add.w	r0, fp, r6
 801b524:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 801b528:	4439      	add	r1, r7
 801b52a:	f3c3 2407 	ubfx	r4, r3, #8, #8
 801b52e:	b2df      	uxtb	r7, r3
 801b530:	f3c3 4607 	ubfx	r6, r3, #16, #8
 801b534:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 801b538:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 801b53c:	fa5f fa81 	uxtb.w	sl, r1
 801b540:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 801b544:	9c01      	ldr	r4, [sp, #4]
 801b546:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 801b54a:	441c      	add	r4, r3
 801b54c:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 801b550:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 801b554:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 801b558:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801b55c:	f3c4 0309 	ubfx	r3, r4, #0, #10
 801b560:	f3c1 2407 	ubfx	r4, r1, #8, #8
 801b564:	b2ed      	uxtb	r5, r5
 801b566:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 801b56a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801b56e:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 801b572:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 801b576:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 801b57a:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 801b57e:	f3c1 4707 	ubfx	r7, r1, #16, #8
 801b582:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 801b586:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 801b58a:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801b58e:	0e09      	lsrs	r1, r1, #24
 801b590:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 801b594:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801b598:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 801b59c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801b5a0:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801b5a4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801b5a8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801b5ac:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801b5b0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801b5b4:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 801b5b8:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 801b5bc:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801b5c0:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 801b5c4:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 801b5c8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801b5cc:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 801b5d0:	ea4f 229a 	mov.w	r2, sl, lsr #10
 801b5d4:	f3ca 0709 	ubfx	r7, sl, #0, #10
 801b5d8:	9201      	str	r2, [sp, #4]
 801b5da:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 801b5de:	4a44      	ldr	r2, [pc, #272]	@ (801b6f0 <D80_GENERIC+0x268>)
 801b5e0:	9f02      	ldr	r7, [sp, #8]
 801b5e2:	fb23 7a02 	smlad	sl, r3, r2, r7
 801b5e6:	4a43      	ldr	r2, [pc, #268]	@ (801b6f4 <D80_GENERIC+0x26c>)
 801b5e8:	fb26 aa02 	smlad	sl, r6, r2, sl
 801b5ec:	4a42      	ldr	r2, [pc, #264]	@ (801b6f8 <D80_GENERIC+0x270>)
 801b5ee:	fb24 aa02 	smlad	sl, r4, r2, sl
 801b5f2:	4a42      	ldr	r2, [pc, #264]	@ (801b6fc <D80_GENERIC+0x274>)
 801b5f4:	fb21 a702 	smlad	r7, r1, r2, sl
 801b5f8:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 801b5fc:	fb25 7a0a 	smlad	sl, r5, sl, r7
 801b600:	4a3f      	ldr	r2, [pc, #252]	@ (801b700 <D80_GENERIC+0x278>)
 801b602:	9f03      	ldr	r7, [sp, #12]
 801b604:	fb23 7c02 	smlad	ip, r3, r2, r7
 801b608:	4a3e      	ldr	r2, [pc, #248]	@ (801b704 <D80_GENERIC+0x27c>)
 801b60a:	fb26 cc02 	smlad	ip, r6, r2, ip
 801b60e:	f04f 174b 	mov.w	r7, #4915275	@ 0x4b004b
 801b612:	fb24 c707 	smlad	r7, r4, r7, ip
 801b616:	4a3c      	ldr	r2, [pc, #240]	@ (801b708 <D80_GENERIC+0x280>)
 801b618:	fb21 7702 	smlad	r7, r1, r2, r7
 801b61c:	4a3b      	ldr	r2, [pc, #236]	@ (801b70c <D80_GENERIC+0x284>)
 801b61e:	fb25 7202 	smlad	r2, r5, r2, r7
 801b622:	f04f 0901 	mov.w	r9, #1
 801b626:	9202      	str	r2, [sp, #8]
 801b628:	fb23 f909 	smuad	r9, r3, r9
 801b62c:	4b38      	ldr	r3, [pc, #224]	@ (801b710 <D80_GENERIC+0x288>)
 801b62e:	fb26 9603 	smlad	r6, r6, r3, r9
 801b632:	4f38      	ldr	r7, [pc, #224]	@ (801b714 <D80_GENERIC+0x28c>)
 801b634:	fb24 6407 	smlad	r4, r4, r7, r6
 801b638:	4f37      	ldr	r7, [pc, #220]	@ (801b718 <D80_GENERIC+0x290>)
 801b63a:	fb21 4707 	smlad	r7, r1, r7, r4
 801b63e:	4937      	ldr	r1, [pc, #220]	@ (801b71c <D80_GENERIC+0x294>)
 801b640:	fb25 7301 	smlad	r3, r5, r1, r7
 801b644:	9303      	str	r3, [sp, #12]
 801b646:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 801b64a:	9b08      	ldr	r3, [sp, #32]
 801b64c:	b193      	cbz	r3, 801b674 <D80_GENERIC+0x1ec>
 801b64e:	9a04      	ldr	r2, [sp, #16]
 801b650:	4452      	add	r2, sl
 801b652:	4614      	mov	r4, r2
 801b654:	9a05      	ldr	r2, [sp, #20]
 801b656:	f8cd a014 	str.w	sl, [sp, #20]
 801b65a:	1aa4      	subs	r4, r4, r2
 801b65c:	17e7      	asrs	r7, r4, #31
 801b65e:	fba4 4503 	umull	r4, r5, r4, r3
 801b662:	fb03 5507 	mla	r5, r3, r7, r5
 801b666:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801b66a:	f145 0500 	adc.w	r5, r5, #0
 801b66e:	006b      	lsls	r3, r5, #1
 801b670:	469a      	mov	sl, r3
 801b672:	9304      	str	r3, [sp, #16]
 801b674:	9e00      	ldr	r6, [sp, #0]
 801b676:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 801b67a:	9a06      	ldr	r2, [sp, #24]
 801b67c:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801b680:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 801b682:	2500      	movs	r5, #0
 801b684:	fb08 f303 	mul.w	r3, r8, r3
 801b688:	fbc2 450a 	smlal	r4, r5, r2, sl
 801b68c:	9a07      	ldr	r2, [sp, #28]
 801b68e:	f108 0801 	add.w	r8, r8, #1
 801b692:	10a9      	asrs	r1, r5, #2
 801b694:	f301 010f 	ssat	r1, #16, r1
 801b698:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 801b69c:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 801b69e:	4543      	cmp	r3, r8
 801b6a0:	dd14      	ble.n	801b6cc <D80_GENERIC+0x244>
 801b6a2:	9b00      	ldr	r3, [sp, #0]
 801b6a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801b6a6:	2b01      	cmp	r3, #1
 801b6a8:	f47f af0c 	bne.w	801b4c4 <D80_GENERIC+0x3c>
 801b6ac:	9b00      	ldr	r3, [sp, #0]
 801b6ae:	300a      	adds	r0, #10
 801b6b0:	f850 1c06 	ldr.w	r1, [r0, #-6]
 801b6b4:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 801b6b6:	f850 5c02 	ldr.w	r5, [r0, #-2]
 801b6ba:	06b2      	lsls	r2, r6, #26
 801b6bc:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 801b6c0:	f57f af33 	bpl.w	801b52a <D80_GENERIC+0xa2>
 801b6c4:	ba5b      	rev16	r3, r3
 801b6c6:	ba49      	rev16	r1, r1
 801b6c8:	ba6d      	rev16	r5, r5
 801b6ca:	e72e      	b.n	801b52a <D80_GENERIC+0xa2>
 801b6cc:	4632      	mov	r2, r6
 801b6ce:	9b03      	ldr	r3, [sp, #12]
 801b6d0:	2000      	movs	r0, #0
 801b6d2:	6093      	str	r3, [r2, #8]
 801b6d4:	9b02      	ldr	r3, [sp, #8]
 801b6d6:	60d3      	str	r3, [r2, #12]
 801b6d8:	9b01      	ldr	r3, [sp, #4]
 801b6da:	61d3      	str	r3, [r2, #28]
 801b6dc:	9b04      	ldr	r3, [sp, #16]
 801b6de:	6113      	str	r3, [r2, #16]
 801b6e0:	9b05      	ldr	r3, [sp, #20]
 801b6e2:	6153      	str	r3, [r2, #20]
 801b6e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6e6:	6193      	str	r3, [r2, #24]
 801b6e8:	b00b      	add	sp, #44	@ 0x2c
 801b6ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801b6ee:	bf00      	nop
 801b6f0:	002d0024 	.word	0x002d0024
 801b6f4:	001c0015 	.word	0x001c0015
 801b6f8:	000f000a 	.word	0x000f000a
 801b6fc:	00060003 	.word	0x00060003
 801b700:	0037003f 	.word	0x0037003f
 801b704:	00450049 	.word	0x00450049
 801b708:	00490045 	.word	0x00490045
 801b70c:	003f0037 	.word	0x003f0037
 801b710:	00030006 	.word	0x00030006
 801b714:	000a000f 	.word	0x000a000f
 801b718:	0015001c 	.word	0x0015001c
 801b71c:	0024002d 	.word	0x0024002d
 801b720:	24000000 	.word	0x24000000

0801b724 <D128_GENERIC>:
 801b724:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801b728:	b08d      	sub	sp, #52	@ 0x34
 801b72a:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 801b72c:	9201      	str	r2, [sp, #4]
 801b72e:	9109      	str	r1, [sp, #36]	@ 0x24
 801b730:	4611      	mov	r1, r2
 801b732:	6912      	ldr	r2, [r2, #16]
 801b734:	9206      	str	r2, [sp, #24]
 801b736:	460a      	mov	r2, r1
 801b738:	6949      	ldr	r1, [r1, #20]
 801b73a:	4614      	mov	r4, r2
 801b73c:	9107      	str	r1, [sp, #28]
 801b73e:	4611      	mov	r1, r2
 801b740:	6992      	ldr	r2, [r2, #24]
 801b742:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 801b746:	920b      	str	r2, [sp, #44]	@ 0x2c
 801b748:	68e2      	ldr	r2, [r4, #12]
 801b74a:	6889      	ldr	r1, [r1, #8]
 801b74c:	9202      	str	r2, [sp, #8]
 801b74e:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 801b750:	9103      	str	r1, [sp, #12]
 801b752:	9208      	str	r2, [sp, #32]
 801b754:	2b00      	cmp	r3, #0
 801b756:	f000 8180 	beq.w	801ba5a <D128_GENERIC+0x336>
 801b75a:	6a23      	ldr	r3, [r4, #32]
 801b75c:	4681      	mov	r9, r0
 801b75e:	49c8      	ldr	r1, [pc, #800]	@ (801ba80 <D128_GENERIC+0x35c>)
 801b760:	930a      	str	r3, [sp, #40]	@ 0x28
 801b762:	2300      	movs	r3, #0
 801b764:	f8cd a010 	str.w	sl, [sp, #16]
 801b768:	9305      	str	r3, [sp, #20]
 801b76a:	e15d      	b.n	801ba28 <D128_GENERIC+0x304>
 801b76c:	b2d2      	uxtb	r2, r2
 801b76e:	f899 b000 	ldrb.w	fp, [r9]
 801b772:	b213      	sxth	r3, r2
 801b774:	4255      	negs	r5, r2
 801b776:	f819 0002 	ldrb.w	r0, [r9, r2]
 801b77a:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 801b77e:	009f      	lsls	r7, r3, #2
 801b780:	eb09 0402 	add.w	r4, r9, r2
 801b784:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 801b788:	f819 8002 	ldrb.w	r8, [r9, r2]
 801b78c:	443b      	add	r3, r7
 801b78e:	1962      	adds	r2, r4, r5
 801b790:	5d64      	ldrb	r4, [r4, r5]
 801b792:	eb02 0e03 	add.w	lr, r2, r3
 801b796:	0424      	lsls	r4, r4, #16
 801b798:	5cd3      	ldrb	r3, [r2, r3]
 801b79a:	eb0e 0c05 	add.w	ip, lr, r5
 801b79e:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 801b7a2:	f81e 2005 	ldrb.w	r2, [lr, r5]
 801b7a6:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 801b7aa:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 801b7ae:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 801b7b2:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 801b7b6:	eb0e 0c06 	add.w	ip, lr, r6
 801b7ba:	f81e a006 	ldrb.w	sl, [lr, r6]
 801b7be:	0412      	lsls	r2, r2, #16
 801b7c0:	445c      	add	r4, fp
 801b7c2:	eb0c 0e05 	add.w	lr, ip, r5
 801b7c6:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 801b7ca:	f81c 3005 	ldrb.w	r3, [ip, r5]
 801b7ce:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 801b7d2:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 801b7d6:	041b      	lsls	r3, r3, #16
 801b7d8:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 801b7dc:	eb00 0b06 	add.w	fp, r0, r6
 801b7e0:	5d80      	ldrb	r0, [r0, r6]
 801b7e2:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 801b7e6:	f81b 6005 	ldrb.w	r6, [fp, r5]
 801b7ea:	eb0b 0a05 	add.w	sl, fp, r5
 801b7ee:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 801b7f2:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 801b7f6:	0436      	lsls	r6, r6, #16
 801b7f8:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 801b7fc:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 801b800:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 801b804:	4442      	add	r2, r8
 801b806:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 801b80a:	44b9      	add	r9, r7
 801b80c:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 801b810:	4473      	add	r3, lr
 801b812:	442e      	add	r6, r5
 801b814:	f3c4 2007 	ubfx	r0, r4, #8, #8
 801b818:	b2e7      	uxtb	r7, r4
 801b81a:	f3c4 4507 	ubfx	r5, r4, #16, #8
 801b81e:	0e24      	lsrs	r4, r4, #24
 801b820:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 801b824:	fa5f fe82 	uxtb.w	lr, r2
 801b828:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801b82c:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 801b830:	9804      	ldr	r0, [sp, #16]
 801b832:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 801b836:	4438      	add	r0, r7
 801b838:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 801b83c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 801b840:	f3c2 4707 	ubfx	r7, r2, #16, #8
 801b844:	4680      	mov	r8, r0
 801b846:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 801b84a:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 801b84e:	0e12      	lsrs	r2, r2, #24
 801b850:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 801b854:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801b858:	fa5f fa83 	uxtb.w	sl, r3
 801b85c:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801b860:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 801b864:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801b868:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 801b86c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801b870:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 801b874:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801b878:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801b87c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 801b880:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801b884:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 801b888:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 801b88c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 801b890:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801b894:	f3c4 0809 	ubfx	r8, r4, #0, #10
 801b898:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 801b89c:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 801b8a0:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 801b8a4:	0e1b      	lsrs	r3, r3, #24
 801b8a6:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 801b8aa:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801b8ae:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 801b8b2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801b8b6:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 801b8ba:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 801b8be:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 801b8c2:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 801b8c6:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 801b8ca:	f3cc 0409 	ubfx	r4, ip, #0, #10
 801b8ce:	fa5f f886 	uxtb.w	r8, r6
 801b8d2:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 801b8d6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801b8da:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 801b8de:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 801b8e2:	f3c6 2207 	ubfx	r2, r6, #8, #8
 801b8e6:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 801b8ea:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 801b8ee:	f3c6 4407 	ubfx	r4, r6, #16, #8
 801b8f2:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 801b8f6:	0e36      	lsrs	r6, r6, #24
 801b8f8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 801b8fc:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801b900:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801b904:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 801b908:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801b90c:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 801b910:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801b914:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801b918:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 801b91c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801b920:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 801b924:	f3c6 0309 	ubfx	r3, r6, #0, #10
 801b928:	0ab2      	lsrs	r2, r6, #10
 801b92a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801b92e:	9204      	str	r2, [sp, #16]
 801b930:	9c02      	ldr	r4, [sp, #8]
 801b932:	4a54      	ldr	r2, [pc, #336]	@ (801ba84 <D128_GENERIC+0x360>)
 801b934:	fb20 4602 	smlad	r6, r0, r2, r4
 801b938:	4a53      	ldr	r2, [pc, #332]	@ (801ba88 <D128_GENERIC+0x364>)
 801b93a:	fb25 6602 	smlad	r6, r5, r2, r6
 801b93e:	4a53      	ldr	r2, [pc, #332]	@ (801ba8c <D128_GENERIC+0x368>)
 801b940:	fb2e 6602 	smlad	r6, lr, r2, r6
 801b944:	4a52      	ldr	r2, [pc, #328]	@ (801ba90 <D128_GENERIC+0x36c>)
 801b946:	fb27 6602 	smlad	r6, r7, r2, r6
 801b94a:	4a52      	ldr	r2, [pc, #328]	@ (801ba94 <D128_GENERIC+0x370>)
 801b94c:	fb2b 6602 	smlad	r6, fp, r2, r6
 801b950:	4a51      	ldr	r2, [pc, #324]	@ (801ba98 <D128_GENERIC+0x374>)
 801b952:	fb2a 6602 	smlad	r6, sl, r2, r6
 801b956:	4a51      	ldr	r2, [pc, #324]	@ (801ba9c <D128_GENERIC+0x378>)
 801b958:	fb28 6202 	smlad	r2, r8, r2, r6
 801b95c:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 801b960:	fb23 2606 	smlad	r6, r3, r6, r2
 801b964:	4a4e      	ldr	r2, [pc, #312]	@ (801baa0 <D128_GENERIC+0x37c>)
 801b966:	9c03      	ldr	r4, [sp, #12]
 801b968:	fb20 4202 	smlad	r2, r0, r2, r4
 801b96c:	4c4d      	ldr	r4, [pc, #308]	@ (801baa4 <D128_GENERIC+0x380>)
 801b96e:	fb25 2404 	smlad	r4, r5, r4, r2
 801b972:	4a4d      	ldr	r2, [pc, #308]	@ (801baa8 <D128_GENERIC+0x384>)
 801b974:	fb2e 4202 	smlad	r2, lr, r2, r4
 801b978:	4c4c      	ldr	r4, [pc, #304]	@ (801baac <D128_GENERIC+0x388>)
 801b97a:	fb27 2204 	smlad	r2, r7, r4, r2
 801b97e:	4c4c      	ldr	r4, [pc, #304]	@ (801bab0 <D128_GENERIC+0x38c>)
 801b980:	fb2b 2404 	smlad	r4, fp, r4, r2
 801b984:	4a4b      	ldr	r2, [pc, #300]	@ (801bab4 <D128_GENERIC+0x390>)
 801b986:	fb2a 4402 	smlad	r4, sl, r2, r4
 801b98a:	4a4b      	ldr	r2, [pc, #300]	@ (801bab8 <D128_GENERIC+0x394>)
 801b98c:	fb28 4202 	smlad	r2, r8, r2, r4
 801b990:	4c4a      	ldr	r4, [pc, #296]	@ (801babc <D128_GENERIC+0x398>)
 801b992:	fb23 2204 	smlad	r2, r3, r4, r2
 801b996:	f04f 0c01 	mov.w	ip, #1
 801b99a:	9202      	str	r2, [sp, #8]
 801b99c:	fb20 f00c 	smuad	r0, r0, ip
 801b9a0:	4a47      	ldr	r2, [pc, #284]	@ (801bac0 <D128_GENERIC+0x39c>)
 801b9a2:	fb25 0502 	smlad	r5, r5, r2, r0
 801b9a6:	4a47      	ldr	r2, [pc, #284]	@ (801bac4 <D128_GENERIC+0x3a0>)
 801b9a8:	fb2e 5e02 	smlad	lr, lr, r2, r5
 801b9ac:	4a46      	ldr	r2, [pc, #280]	@ (801bac8 <D128_GENERIC+0x3a4>)
 801b9ae:	fb27 e202 	smlad	r2, r7, r2, lr
 801b9b2:	4c46      	ldr	r4, [pc, #280]	@ (801bacc <D128_GENERIC+0x3a8>)
 801b9b4:	fb2b 2204 	smlad	r2, fp, r4, r2
 801b9b8:	4c45      	ldr	r4, [pc, #276]	@ (801bad0 <D128_GENERIC+0x3ac>)
 801b9ba:	fb2a 2204 	smlad	r2, sl, r4, r2
 801b9be:	4c45      	ldr	r4, [pc, #276]	@ (801bad4 <D128_GENERIC+0x3b0>)
 801b9c0:	fb28 2204 	smlad	r2, r8, r4, r2
 801b9c4:	4c44      	ldr	r4, [pc, #272]	@ (801bad8 <D128_GENERIC+0x3b4>)
 801b9c6:	fb23 2304 	smlad	r3, r3, r4, r2
 801b9ca:	9303      	str	r3, [sp, #12]
 801b9cc:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 801b9d0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801b9d2:	b193      	cbz	r3, 801b9fa <D128_GENERIC+0x2d6>
 801b9d4:	9a06      	ldr	r2, [sp, #24]
 801b9d6:	9807      	ldr	r0, [sp, #28]
 801b9d8:	4432      	add	r2, r6
 801b9da:	9607      	str	r6, [sp, #28]
 801b9dc:	461e      	mov	r6, r3
 801b9de:	1a12      	subs	r2, r2, r0
 801b9e0:	17d5      	asrs	r5, r2, #31
 801b9e2:	fba2 2303 	umull	r2, r3, r2, r3
 801b9e6:	fb06 3305 	mla	r3, r6, r5, r3
 801b9ea:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801b9ee:	f143 0300 	adc.w	r3, r3, #0
 801b9f2:	fa03 f30c 	lsl.w	r3, r3, ip
 801b9f6:	461e      	mov	r6, r3
 801b9f8:	9306      	str	r3, [sp, #24]
 801b9fa:	9c01      	ldr	r4, [sp, #4]
 801b9fc:	01f6      	lsls	r6, r6, #7
 801b9fe:	9d05      	ldr	r5, [sp, #20]
 801ba00:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ba04:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 801ba06:	2300      	movs	r3, #0
 801ba08:	9f08      	ldr	r7, [sp, #32]
 801ba0a:	fb05 f000 	mul.w	r0, r5, r0
 801ba0e:	3501      	adds	r5, #1
 801ba10:	fbc7 2306 	smlal	r2, r3, r7, r6
 801ba14:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ba16:	109b      	asrs	r3, r3, #2
 801ba18:	9505      	str	r5, [sp, #20]
 801ba1a:	f303 030f 	ssat	r3, #16, r3
 801ba1e:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 801ba22:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 801ba24:	42ab      	cmp	r3, r5
 801ba26:	dd16      	ble.n	801ba56 <D128_GENERIC+0x332>
 801ba28:	9b01      	ldr	r3, [sp, #4]
 801ba2a:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 801ba2c:	2a01      	cmp	r2, #1
 801ba2e:	f47f ae9d 	bne.w	801b76c <D128_GENERIC+0x48>
 801ba32:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 801ba34:	f109 0204 	add.w	r2, r9, #4
 801ba38:	f109 0510 	add.w	r5, r9, #16
 801ba3c:	f8d9 4000 	ldr.w	r4, [r9]
 801ba40:	0680      	lsls	r0, r0, #26
 801ba42:	ca4c      	ldmia	r2, {r2, r3, r6}
 801ba44:	d505      	bpl.n	801ba52 <D128_GENERIC+0x32e>
 801ba46:	ba64      	rev16	r4, r4
 801ba48:	ba52      	rev16	r2, r2
 801ba4a:	ba5b      	rev16	r3, r3
 801ba4c:	ba76      	rev16	r6, r6
 801ba4e:	46a9      	mov	r9, r5
 801ba50:	e6e0      	b.n	801b814 <D128_GENERIC+0xf0>
 801ba52:	46a9      	mov	r9, r5
 801ba54:	e6de      	b.n	801b814 <D128_GENERIC+0xf0>
 801ba56:	f8dd a010 	ldr.w	sl, [sp, #16]
 801ba5a:	9a01      	ldr	r2, [sp, #4]
 801ba5c:	2000      	movs	r0, #0
 801ba5e:	9903      	ldr	r1, [sp, #12]
 801ba60:	4613      	mov	r3, r2
 801ba62:	f8c2 a01c 	str.w	sl, [r2, #28]
 801ba66:	6091      	str	r1, [r2, #8]
 801ba68:	9902      	ldr	r1, [sp, #8]
 801ba6a:	60d1      	str	r1, [r2, #12]
 801ba6c:	9907      	ldr	r1, [sp, #28]
 801ba6e:	9a06      	ldr	r2, [sp, #24]
 801ba70:	6159      	str	r1, [r3, #20]
 801ba72:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801ba74:	611a      	str	r2, [r3, #16]
 801ba76:	6199      	str	r1, [r3, #24]
 801ba78:	b00d      	add	sp, #52	@ 0x34
 801ba7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801ba7e:	bf00      	nop
 801ba80:	24000000 	.word	0x24000000
 801ba84:	00780069 	.word	0x00780069
 801ba88:	005b004e 	.word	0x005b004e
 801ba8c:	00420037 	.word	0x00420037
 801ba90:	002d0024 	.word	0x002d0024
 801ba94:	001c0015 	.word	0x001c0015
 801ba98:	000f000a 	.word	0x000f000a
 801ba9c:	00060003 	.word	0x00060003
 801baa0:	00880096 	.word	0x00880096
 801baa4:	00a200ac 	.word	0x00a200ac
 801baa8:	00b400ba 	.word	0x00b400ba
 801baac:	00be00c0 	.word	0x00be00c0
 801bab0:	00c000be 	.word	0x00c000be
 801bab4:	00ba00b4 	.word	0x00ba00b4
 801bab8:	00ac00a2 	.word	0x00ac00a2
 801babc:	00960088 	.word	0x00960088
 801bac0:	00030006 	.word	0x00030006
 801bac4:	000a000f 	.word	0x000a000f
 801bac8:	0015001c 	.word	0x0015001c
 801bacc:	0024002d 	.word	0x0024002d
 801bad0:	00370042 	.word	0x00370042
 801bad4:	004e005b 	.word	0x004e005b
 801bad8:	00690078 	.word	0x00690078

0801badc <D16_1CH_HTONS_VOL_HP>:
 801badc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bae0:	4692      	mov	sl, r2
 801bae2:	b087      	sub	sp, #28
 801bae4:	4681      	mov	r9, r0
 801bae6:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801bae8:	f8da 3018 	ldr.w	r3, [sl, #24]
 801baec:	f8da 000c 	ldr.w	r0, [sl, #12]
 801baf0:	9303      	str	r3, [sp, #12]
 801baf2:	f8da 6010 	ldr.w	r6, [sl, #16]
 801baf6:	f8da 5014 	ldr.w	r5, [sl, #20]
 801bafa:	f8da 301c 	ldr.w	r3, [sl, #28]
 801bafe:	f8da 4008 	ldr.w	r4, [sl, #8]
 801bb02:	9004      	str	r0, [sp, #16]
 801bb04:	f8da b030 	ldr.w	fp, [sl, #48]	@ 0x30
 801bb08:	f8da e020 	ldr.w	lr, [sl, #32]
 801bb0c:	2a00      	cmp	r2, #0
 801bb0e:	d05a      	beq.n	801bbc6 <D16_1CH_HTONS_VOL_HP+0xea>
 801bb10:	f1a1 0802 	sub.w	r8, r1, #2
 801bb14:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 801bb18:	f8cd b008 	str.w	fp, [sp, #8]
 801bb1c:	46cb      	mov	fp, r9
 801bb1e:	f8cd a014 	str.w	sl, [sp, #20]
 801bb22:	46c2      	mov	sl, r8
 801bb24:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 801bbd4 <D16_1CH_HTONS_VOL_HP+0xf8>
 801bb28:	9201      	str	r2, [sp, #4]
 801bb2a:	f85b 2b02 	ldr.w	r2, [fp], #2
 801bb2e:	ba52      	rev16	r2, r2
 801bb30:	b2d0      	uxtb	r0, r2
 801bb32:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801bb36:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 801bb3a:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 801bb3e:	4413      	add	r3, r2
 801bb40:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 801bb44:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801bb48:	f3c0 0109 	ubfx	r1, r0, #0, #10
 801bb4c:	0a83      	lsrs	r3, r0, #10
 801bb4e:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 801bb52:	491e      	ldr	r1, [pc, #120]	@ (801bbcc <D16_1CH_HTONS_VOL_HP+0xf0>)
 801bb54:	fb22 4101 	smlad	r1, r2, r1, r4
 801bb58:	481d      	ldr	r0, [pc, #116]	@ (801bbd0 <D16_1CH_HTONS_VOL_HP+0xf4>)
 801bb5a:	fb22 f400 	smuad	r4, r2, r0
 801bb5e:	f5a1 6200 	sub.w	r2, r1, #2048	@ 0x800
 801bb62:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801bb66:	f04f 0900 	mov.w	r9, #0
 801bb6a:	1990      	adds	r0, r2, r6
 801bb6c:	1b40      	subs	r0, r0, r5
 801bb6e:	4615      	mov	r5, r2
 801bb70:	17c7      	asrs	r7, r0, #31
 801bb72:	fba0 010e 	umull	r0, r1, r0, lr
 801bb76:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 801bb7a:	fb0e 1107 	mla	r1, lr, r7, r1
 801bb7e:	f141 0100 	adc.w	r1, r1, #0
 801bb82:	0448      	lsls	r0, r1, #17
 801bb84:	004e      	lsls	r6, r1, #1
 801bb86:	9902      	ldr	r1, [sp, #8]
 801bb88:	fbc0 8901 	smlal	r8, r9, r0, r1
 801bb8c:	ea4f 01a9 	mov.w	r1, r9, asr #2
 801bb90:	f301 010f 	ssat	r1, #16, r1
 801bb94:	f82a 1f02 	strh.w	r1, [sl, #2]!
 801bb98:	9901      	ldr	r1, [sp, #4]
 801bb9a:	458b      	cmp	fp, r1
 801bb9c:	d1c5      	bne.n	801bb2a <D16_1CH_HTONS_VOL_HP+0x4e>
 801bb9e:	f8dd a014 	ldr.w	sl, [sp, #20]
 801bba2:	9904      	ldr	r1, [sp, #16]
 801bba4:	2000      	movs	r0, #0
 801bba6:	f8ca 301c 	str.w	r3, [sl, #28]
 801bbaa:	9b03      	ldr	r3, [sp, #12]
 801bbac:	f8ca 4008 	str.w	r4, [sl, #8]
 801bbb0:	f8ca 100c 	str.w	r1, [sl, #12]
 801bbb4:	f8ca 6010 	str.w	r6, [sl, #16]
 801bbb8:	f8ca 2014 	str.w	r2, [sl, #20]
 801bbbc:	f8ca 3018 	str.w	r3, [sl, #24]
 801bbc0:	b007      	add	sp, #28
 801bbc2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bbc6:	462a      	mov	r2, r5
 801bbc8:	4601      	mov	r1, r0
 801bbca:	e7eb      	b.n	801bba4 <D16_1CH_HTONS_VOL_HP+0xc8>
 801bbcc:	00030001 	.word	0x00030001
 801bbd0:	00010003 	.word	0x00010003
 801bbd4:	24000000 	.word	0x24000000

0801bbd8 <D24_1CH_HTONS_VOL_HP>:
 801bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bbdc:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 801bbde:	b087      	sub	sp, #28
 801bbe0:	4616      	mov	r6, r2
 801bbe2:	6914      	ldr	r4, [r2, #16]
 801bbe4:	9302      	str	r3, [sp, #8]
 801bbe6:	9205      	str	r2, [sp, #20]
 801bbe8:	f8d2 9014 	ldr.w	r9, [r2, #20]
 801bbec:	6b37      	ldr	r7, [r6, #48]	@ 0x30
 801bbee:	6992      	ldr	r2, [r2, #24]
 801bbf0:	9d02      	ldr	r5, [sp, #8]
 801bbf2:	9204      	str	r2, [sp, #16]
 801bbf4:	68b3      	ldr	r3, [r6, #8]
 801bbf6:	69f2      	ldr	r2, [r6, #28]
 801bbf8:	f8d6 800c 	ldr.w	r8, [r6, #12]
 801bbfc:	9703      	str	r7, [sp, #12]
 801bbfe:	f8d6 a020 	ldr.w	sl, [r6, #32]
 801bc02:	2d00      	cmp	r5, #0
 801bc04:	d076      	beq.n	801bcf4 <D24_1CH_HTONS_VOL_HP+0x11c>
 801bc06:	f04f 0e00 	mov.w	lr, #0
 801bc0a:	f1a1 0b02 	sub.w	fp, r1, #2
 801bc0e:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 801bd04 <D24_1CH_HTONS_VOL_HP+0x12c>
 801bc12:	f8cd 8004 	str.w	r8, [sp, #4]
 801bc16:	e052      	b.n	801bcbe <D24_1CH_HTONS_VOL_HP+0xe6>
 801bc18:	7801      	ldrb	r1, [r0, #0]
 801bc1a:	3002      	adds	r0, #2
 801bc1c:	7847      	ldrb	r7, [r0, #1]
 801bc1e:	0209      	lsls	r1, r1, #8
 801bc20:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 801bc24:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 801bc28:	442f      	add	r7, r5
 801bc2a:	b2fd      	uxtb	r5, r7
 801bc2c:	f3c7 2107 	ubfx	r1, r7, #8, #8
 801bc30:	0c3f      	lsrs	r7, r7, #16
 801bc32:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801bc36:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 801bc3a:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801bc3e:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 801bc42:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801bc46:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801bc4a:	f3c6 0109 	ubfx	r1, r6, #0, #10
 801bc4e:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 801bc52:	9e01      	ldr	r6, [sp, #4]
 801bc54:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 801bc58:	4928      	ldr	r1, [pc, #160]	@ (801bcfc <D24_1CH_HTONS_VOL_HP+0x124>)
 801bc5a:	fb25 6701 	smlad	r7, r5, r1, r6
 801bc5e:	4928      	ldr	r1, [pc, #160]	@ (801bd00 <D24_1CH_HTONS_VOL_HP+0x128>)
 801bc60:	fb25 3801 	smlad	r8, r5, r1, r3
 801bc64:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801bc68:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 801bc6c:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 801bc70:	9301      	str	r3, [sp, #4]
 801bc72:	2301      	movs	r3, #1
 801bc74:	fb25 f503 	smuad	r5, r5, r3
 801bc78:	f5a7 51d8 	sub.w	r1, r7, #6912	@ 0x1b00
 801bc7c:	449e      	add	lr, r3
 801bc7e:	1973      	adds	r3, r6, r5
 801bc80:	f04f 0800 	mov.w	r8, #0
 801bc84:	440c      	add	r4, r1
 801bc86:	eba4 0409 	sub.w	r4, r4, r9
 801bc8a:	4689      	mov	r9, r1
 801bc8c:	17e7      	asrs	r7, r4, #31
 801bc8e:	fba4 450a 	umull	r4, r5, r4, sl
 801bc92:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801bc96:	fb0a 5507 	mla	r5, sl, r7, r5
 801bc9a:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 801bc9e:	f145 0500 	adc.w	r5, r5, #0
 801bca2:	03ee      	lsls	r6, r5, #15
 801bca4:	006c      	lsls	r4, r5, #1
 801bca6:	9d03      	ldr	r5, [sp, #12]
 801bca8:	fbc5 7806 	smlal	r7, r8, r5, r6
 801bcac:	4647      	mov	r7, r8
 801bcae:	10bd      	asrs	r5, r7, #2
 801bcb0:	f305 050f 	ssat	r5, #16, r5
 801bcb4:	f82b 5f02 	strh.w	r5, [fp, #2]!
 801bcb8:	9d02      	ldr	r5, [sp, #8]
 801bcba:	45ae      	cmp	lr, r5
 801bcbc:	d00b      	beq.n	801bcd6 <D24_1CH_HTONS_VOL_HP+0xfe>
 801bcbe:	f01e 0f01 	tst.w	lr, #1
 801bcc2:	d0a9      	beq.n	801bc18 <D24_1CH_HTONS_VOL_HP+0x40>
 801bcc4:	78c1      	ldrb	r1, [r0, #3]
 801bcc6:	7887      	ldrb	r7, [r0, #2]
 801bcc8:	0209      	lsls	r1, r1, #8
 801bcca:	f810 5b04 	ldrb.w	r5, [r0], #4
 801bcce:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 801bcd2:	442f      	add	r7, r5
 801bcd4:	e7a9      	b.n	801bc2a <D24_1CH_HTONS_VOL_HP+0x52>
 801bcd6:	f8dd 8004 	ldr.w	r8, [sp, #4]
 801bcda:	9d05      	ldr	r5, [sp, #20]
 801bcdc:	2000      	movs	r0, #0
 801bcde:	6169      	str	r1, [r5, #20]
 801bce0:	9904      	ldr	r1, [sp, #16]
 801bce2:	60ab      	str	r3, [r5, #8]
 801bce4:	f8c5 800c 	str.w	r8, [r5, #12]
 801bce8:	61ea      	str	r2, [r5, #28]
 801bcea:	612c      	str	r4, [r5, #16]
 801bcec:	61a9      	str	r1, [r5, #24]
 801bcee:	b007      	add	sp, #28
 801bcf0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bcf4:	4649      	mov	r1, r9
 801bcf6:	4635      	mov	r5, r6
 801bcf8:	e7f0      	b.n	801bcdc <D24_1CH_HTONS_VOL_HP+0x104>
 801bcfa:	bf00      	nop
 801bcfc:	00030001 	.word	0x00030001
 801bd00:	00060007 	.word	0x00060007
 801bd04:	24000000 	.word	0x24000000

0801bd08 <D32_1CH_HTONS_VOL_HP>:
 801bd08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bd0c:	4693      	mov	fp, r2
 801bd0e:	b087      	sub	sp, #28
 801bd10:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801bd12:	f8db 3018 	ldr.w	r3, [fp, #24]
 801bd16:	f8db 5030 	ldr.w	r5, [fp, #48]	@ 0x30
 801bd1a:	9304      	str	r3, [sp, #16]
 801bd1c:	f8db 4010 	ldr.w	r4, [fp, #16]
 801bd20:	f8db c014 	ldr.w	ip, [fp, #20]
 801bd24:	f8db 601c 	ldr.w	r6, [fp, #28]
 801bd28:	f8db 3008 	ldr.w	r3, [fp, #8]
 801bd2c:	f8db e00c 	ldr.w	lr, [fp, #12]
 801bd30:	9502      	str	r5, [sp, #8]
 801bd32:	f8db a020 	ldr.w	sl, [fp, #32]
 801bd36:	2a00      	cmp	r2, #0
 801bd38:	d07d      	beq.n	801be36 <D32_1CH_HTONS_VOL_HP+0x12e>
 801bd3a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801bd3e:	9101      	str	r1, [sp, #4]
 801bd40:	f8cd b014 	str.w	fp, [sp, #20]
 801bd44:	4621      	mov	r1, r4
 801bd46:	4f3d      	ldr	r7, [pc, #244]	@ (801be3c <D32_1CH_HTONS_VOL_HP+0x134>)
 801bd48:	4693      	mov	fp, r2
 801bd4a:	f8cd a00c 	str.w	sl, [sp, #12]
 801bd4e:	f850 2b04 	ldr.w	r2, [r0], #4
 801bd52:	fa92 f992 	rev16.w	r9, r2
 801bd56:	fa5f f889 	uxtb.w	r8, r9
 801bd5a:	f3c9 2207 	ubfx	r2, r9, #8, #8
 801bd5e:	f3c9 4507 	ubfx	r5, r9, #16, #8
 801bd62:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801bd66:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 801bd6a:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 801bd6e:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 801bd72:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801bd76:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801bd7a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801bd7e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801bd82:	4c2f      	ldr	r4, [pc, #188]	@ (801be40 <D32_1CH_HTONS_VOL_HP+0x138>)
 801bd84:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801bd88:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801bd8c:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801bd90:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801bd94:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 801bd98:	f3c6 0809 	ubfx	r8, r6, #0, #10
 801bd9c:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 801bda0:	fb22 ee04 	smlad	lr, r2, r4, lr
 801bda4:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801bda8:	fb25 e904 	smlad	r9, r5, r4, lr
 801bdac:	4c25      	ldr	r4, [pc, #148]	@ (801be44 <D32_1CH_HTONS_VOL_HP+0x13c>)
 801bdae:	fb22 3e04 	smlad	lr, r2, r4, r3
 801bdb2:	4b25      	ldr	r3, [pc, #148]	@ (801be48 <D32_1CH_HTONS_VOL_HP+0x140>)
 801bdb4:	fb25 ee03 	smlad	lr, r5, r3, lr
 801bdb8:	2301      	movs	r3, #1
 801bdba:	fb22 f203 	smuad	r2, r2, r3
 801bdbe:	4b23      	ldr	r3, [pc, #140]	@ (801be4c <D32_1CH_HTONS_VOL_HP+0x144>)
 801bdc0:	fb25 2303 	smlad	r3, r5, r3, r2
 801bdc4:	f5a9 4280 	sub.w	r2, r9, #16384	@ 0x4000
 801bdc8:	f04f 0a00 	mov.w	sl, #0
 801bdcc:	4411      	add	r1, r2
 801bdce:	eba1 040c 	sub.w	r4, r1, ip
 801bdd2:	9903      	ldr	r1, [sp, #12]
 801bdd4:	4694      	mov	ip, r2
 801bdd6:	ea4f 79e4 	mov.w	r9, r4, asr #31
 801bdda:	fba4 4501 	umull	r4, r5, r4, r1
 801bdde:	fb01 5509 	mla	r5, r1, r9, r5
 801bde2:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801bde6:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 801bdea:	9c02      	ldr	r4, [sp, #8]
 801bdec:	f145 0500 	adc.w	r5, r5, #0
 801bdf0:	ea4f 3885 	mov.w	r8, r5, lsl #14
 801bdf4:	0069      	lsls	r1, r5, #1
 801bdf6:	fbc8 9a04 	smlal	r9, sl, r8, r4
 801bdfa:	9c01      	ldr	r4, [sp, #4]
 801bdfc:	ea4f 05aa 	mov.w	r5, sl, asr #2
 801be00:	f305 050f 	ssat	r5, #16, r5
 801be04:	f824 5b02 	strh.w	r5, [r4], #2
 801be08:	455c      	cmp	r4, fp
 801be0a:	9401      	str	r4, [sp, #4]
 801be0c:	d19f      	bne.n	801bd4e <D32_1CH_HTONS_VOL_HP+0x46>
 801be0e:	460c      	mov	r4, r1
 801be10:	f8dd b014 	ldr.w	fp, [sp, #20]
 801be14:	f8cb 3008 	str.w	r3, [fp, #8]
 801be18:	2000      	movs	r0, #0
 801be1a:	9b04      	ldr	r3, [sp, #16]
 801be1c:	f8cb e00c 	str.w	lr, [fp, #12]
 801be20:	f8cb 601c 	str.w	r6, [fp, #28]
 801be24:	f8cb 4010 	str.w	r4, [fp, #16]
 801be28:	f8cb 2014 	str.w	r2, [fp, #20]
 801be2c:	f8cb 3018 	str.w	r3, [fp, #24]
 801be30:	b007      	add	sp, #28
 801be32:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801be36:	4662      	mov	r2, ip
 801be38:	e7ec      	b.n	801be14 <D32_1CH_HTONS_VOL_HP+0x10c>
 801be3a:	bf00      	nop
 801be3c:	24000000 	.word	0x24000000
 801be40:	00060003 	.word	0x00060003
 801be44:	000a000c 	.word	0x000a000c
 801be48:	000c000a 	.word	0x000c000a
 801be4c:	00030006 	.word	0x00030006

0801be50 <D48_1CH_HTONS_VOL_HP>:
 801be50:	4613      	mov	r3, r2
 801be52:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801be56:	461c      	mov	r4, r3
 801be58:	b087      	sub	sp, #28
 801be5a:	4680      	mov	r8, r0
 801be5c:	691e      	ldr	r6, [r3, #16]
 801be5e:	4610      	mov	r0, r2
 801be60:	f8d3 9014 	ldr.w	r9, [r3, #20]
 801be64:	699b      	ldr	r3, [r3, #24]
 801be66:	9205      	str	r2, [sp, #20]
 801be68:	9304      	str	r3, [sp, #16]
 801be6a:	69c5      	ldr	r5, [r0, #28]
 801be6c:	6883      	ldr	r3, [r0, #8]
 801be6e:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 801be72:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801be74:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801be76:	f8d4 b020 	ldr.w	fp, [r4, #32]
 801be7a:	9002      	str	r0, [sp, #8]
 801be7c:	2a00      	cmp	r2, #0
 801be7e:	f000 8097 	beq.w	801bfb0 <D48_1CH_HTONS_VOL_HP+0x160>
 801be82:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801be86:	468c      	mov	ip, r1
 801be88:	4c4a      	ldr	r4, [pc, #296]	@ (801bfb4 <D48_1CH_HTONS_VOL_HP+0x164>)
 801be8a:	4619      	mov	r1, r3
 801be8c:	4640      	mov	r0, r8
 801be8e:	9203      	str	r2, [sp, #12]
 801be90:	f8cd 9004 	str.w	r9, [sp, #4]
 801be94:	6803      	ldr	r3, [r0, #0]
 801be96:	3006      	adds	r0, #6
 801be98:	f850 2c02 	ldr.w	r2, [r0, #-2]
 801be9c:	ba5b      	rev16	r3, r3
 801be9e:	fa92 fa92 	rev16.w	sl, r2
 801bea2:	fa5f f883 	uxtb.w	r8, r3
 801bea6:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801beaa:	f3c3 4207 	ubfx	r2, r3, #16, #8
 801beae:	0e1b      	lsrs	r3, r3, #24
 801beb0:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 801beb4:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 801beb8:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 801bebc:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 801bec0:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 801bec4:	fa5f f28a 	uxtb.w	r2, sl
 801bec8:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 801becc:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 801bed0:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 801bed4:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801bed8:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 801bedc:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 801bee0:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801bee4:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 801bee8:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801beec:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 801bef0:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 801bef4:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801bef8:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801befc:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801bf00:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 801bf04:	f3c5 0309 	ubfx	r3, r5, #0, #10
 801bf08:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 801bf0c:	4b2a      	ldr	r3, [pc, #168]	@ (801bfb8 <D48_1CH_HTONS_VOL_HP+0x168>)
 801bf0e:	fb27 ea03 	smlad	sl, r7, r3, lr
 801bf12:	4b2a      	ldr	r3, [pc, #168]	@ (801bfbc <D48_1CH_HTONS_VOL_HP+0x16c>)
 801bf14:	fb28 aa03 	smlad	sl, r8, r3, sl
 801bf18:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 801bf1c:	fb22 aa03 	smlad	sl, r2, r3, sl
 801bf20:	4b27      	ldr	r3, [pc, #156]	@ (801bfc0 <D48_1CH_HTONS_VOL_HP+0x170>)
 801bf22:	fb27 1e03 	smlad	lr, r7, r3, r1
 801bf26:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 801bf2a:	fb28 ee03 	smlad	lr, r8, r3, lr
 801bf2e:	4b25      	ldr	r3, [pc, #148]	@ (801bfc4 <D48_1CH_HTONS_VOL_HP+0x174>)
 801bf30:	fb22 ee03 	smlad	lr, r2, r3, lr
 801bf34:	f04f 0901 	mov.w	r9, #1
 801bf38:	fb27 f709 	smuad	r7, r7, r9
 801bf3c:	4b22      	ldr	r3, [pc, #136]	@ (801bfc8 <D48_1CH_HTONS_VOL_HP+0x178>)
 801bf3e:	fb28 7803 	smlad	r8, r8, r3, r7
 801bf42:	4b22      	ldr	r3, [pc, #136]	@ (801bfcc <D48_1CH_HTONS_VOL_HP+0x17c>)
 801bf44:	fb22 8103 	smlad	r1, r2, r3, r8
 801bf48:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 801bf4c:	9b01      	ldr	r3, [sp, #4]
 801bf4e:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801bf52:	eb0a 0206 	add.w	r2, sl, r6
 801bf56:	f8cd a004 	str.w	sl, [sp, #4]
 801bf5a:	1ad2      	subs	r2, r2, r3
 801bf5c:	17d7      	asrs	r7, r2, #31
 801bf5e:	fba2 230b 	umull	r2, r3, r2, fp
 801bf62:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801bf66:	fb0b 3307 	mla	r3, fp, r7, r3
 801bf6a:	f143 0300 	adc.w	r3, r3, #0
 801bf6e:	031a      	lsls	r2, r3, #12
 801bf70:	fa03 f609 	lsl.w	r6, r3, r9
 801bf74:	9b02      	ldr	r3, [sp, #8]
 801bf76:	f04f 0900 	mov.w	r9, #0
 801bf7a:	fbc2 8903 	smlal	r8, r9, r2, r3
 801bf7e:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801bf82:	f303 030f 	ssat	r3, #16, r3
 801bf86:	f82c 3b02 	strh.w	r3, [ip], #2
 801bf8a:	9b03      	ldr	r3, [sp, #12]
 801bf8c:	459c      	cmp	ip, r3
 801bf8e:	d181      	bne.n	801be94 <D48_1CH_HTONS_VOL_HP+0x44>
 801bf90:	460b      	mov	r3, r1
 801bf92:	9905      	ldr	r1, [sp, #20]
 801bf94:	2000      	movs	r0, #0
 801bf96:	460a      	mov	r2, r1
 801bf98:	608b      	str	r3, [r1, #8]
 801bf9a:	f8c1 e00c 	str.w	lr, [r1, #12]
 801bf9e:	61cd      	str	r5, [r1, #28]
 801bfa0:	610e      	str	r6, [r1, #16]
 801bfa2:	f8c1 a014 	str.w	sl, [r1, #20]
 801bfa6:	9904      	ldr	r1, [sp, #16]
 801bfa8:	6191      	str	r1, [r2, #24]
 801bfaa:	b007      	add	sp, #28
 801bfac:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801bfb0:	46ca      	mov	sl, r9
 801bfb2:	e7ee      	b.n	801bf92 <D48_1CH_HTONS_VOL_HP+0x142>
 801bfb4:	24000000 	.word	0x24000000
 801bfb8:	000f000a 	.word	0x000f000a
 801bfbc:	00060003 	.word	0x00060003
 801bfc0:	00150019 	.word	0x00150019
 801bfc4:	00190015 	.word	0x00190015
 801bfc8:	00030006 	.word	0x00030006
 801bfcc:	000a000f 	.word	0x000a000f

0801bfd0 <D64_1CH_HTONS_VOL_HP>:
 801bfd0:	4613      	mov	r3, r2
 801bfd2:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801bfd6:	f8d3 c014 	ldr.w	ip, [r3, #20]
 801bfda:	461d      	mov	r5, r3
 801bfdc:	b087      	sub	sp, #28
 801bfde:	699b      	ldr	r3, [r3, #24]
 801bfe0:	462e      	mov	r6, r5
 801bfe2:	69ef      	ldr	r7, [r5, #28]
 801bfe4:	9304      	str	r3, [sp, #16]
 801bfe6:	4614      	mov	r4, r2
 801bfe8:	68ab      	ldr	r3, [r5, #8]
 801bfea:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 801bfee:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 801bff0:	9205      	str	r2, [sp, #20]
 801bff2:	9501      	str	r5, [sp, #4]
 801bff4:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801bff6:	6a35      	ldr	r5, [r6, #32]
 801bff8:	6924      	ldr	r4, [r4, #16]
 801bffa:	9502      	str	r5, [sp, #8]
 801bffc:	2a00      	cmp	r2, #0
 801bffe:	f000 80ae 	beq.w	801c15e <D64_1CH_HTONS_VOL_HP+0x18e>
 801c002:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c006:	4e57      	ldr	r6, [pc, #348]	@ (801c164 <D64_1CH_HTONS_VOL_HP+0x194>)
 801c008:	461d      	mov	r5, r3
 801c00a:	9203      	str	r2, [sp, #12]
 801c00c:	f850 2b08 	ldr.w	r2, [r0], #8
 801c010:	f850 3c04 	ldr.w	r3, [r0, #-4]
 801c014:	fa92 f892 	rev16.w	r8, r2
 801c018:	fa93 fb93 	rev16.w	fp, r3
 801c01c:	fa5f f288 	uxtb.w	r2, r8
 801c020:	f3c8 2907 	ubfx	r9, r8, #8, #8
 801c024:	f3c8 4307 	ubfx	r3, r8, #16, #8
 801c028:	ea4f 6818 	mov.w	r8, r8, lsr #24
 801c02c:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 801c030:	fa5f f28b 	uxtb.w	r2, fp
 801c034:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801c038:	4457      	add	r7, sl
 801c03a:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c03e:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 801c042:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 801c046:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801c04a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801c04e:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 801c052:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801c056:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801c05a:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 801c05e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c062:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 801c066:	f3cb 4707 	ubfx	r7, fp, #16, #8
 801c06a:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801c06e:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801c072:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 801c076:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801c07a:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 801c07e:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801c082:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801c086:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801c08a:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 801c08e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c092:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 801c096:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 801c09a:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 801c09e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801c0a2:	f3cb 0209 	ubfx	r2, fp, #0, #10
 801c0a6:	ea4f 279b 	mov.w	r7, fp, lsr #10
 801c0aa:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 801c0ae:	4a2e      	ldr	r2, [pc, #184]	@ (801c168 <D64_1CH_HTONS_VOL_HP+0x198>)
 801c0b0:	fb29 ee02 	smlad	lr, r9, r2, lr
 801c0b4:	4a2d      	ldr	r2, [pc, #180]	@ (801c16c <D64_1CH_HTONS_VOL_HP+0x19c>)
 801c0b6:	fb28 ee02 	smlad	lr, r8, r2, lr
 801c0ba:	4a2d      	ldr	r2, [pc, #180]	@ (801c170 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 801c0bc:	fb23 ee02 	smlad	lr, r3, r2, lr
 801c0c0:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 801c0c4:	fb2b ea0a 	smlad	sl, fp, sl, lr
 801c0c8:	4a2a      	ldr	r2, [pc, #168]	@ (801c174 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 801c0ca:	fb29 5e02 	smlad	lr, r9, r2, r5
 801c0ce:	fb2b ee12 	smladx	lr, fp, r2, lr
 801c0d2:	4a29      	ldr	r2, [pc, #164]	@ (801c178 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 801c0d4:	fb28 ee02 	smlad	lr, r8, r2, lr
 801c0d8:	fb23 ee12 	smladx	lr, r3, r2, lr
 801c0dc:	2501      	movs	r5, #1
 801c0de:	fb29 f905 	smuad	r9, r9, r5
 801c0e2:	4a26      	ldr	r2, [pc, #152]	@ (801c17c <D64_1CH_HTONS_VOL_HP+0x1ac>)
 801c0e4:	fb28 9802 	smlad	r8, r8, r2, r9
 801c0e8:	4a25      	ldr	r2, [pc, #148]	@ (801c180 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 801c0ea:	fb23 8302 	smlad	r3, r3, r2, r8
 801c0ee:	4a25      	ldr	r2, [pc, #148]	@ (801c184 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 801c0f0:	fb2b 3502 	smlad	r5, fp, r2, r3
 801c0f4:	f5aa 3a00 	sub.w	sl, sl, #131072	@ 0x20000
 801c0f8:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801c0fc:	eb0a 0204 	add.w	r2, sl, r4
 801c100:	9c02      	ldr	r4, [sp, #8]
 801c102:	eba2 020c 	sub.w	r2, r2, ip
 801c106:	46d4      	mov	ip, sl
 801c108:	ea4f 79e2 	mov.w	r9, r2, asr #31
 801c10c:	fba2 2304 	umull	r2, r3, r2, r4
 801c110:	fb04 3309 	mla	r3, r4, r9, r3
 801c114:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801c118:	f04f 0900 	mov.w	r9, #0
 801c11c:	f143 0300 	adc.w	r3, r3, #0
 801c120:	02da      	lsls	r2, r3, #11
 801c122:	005c      	lsls	r4, r3, #1
 801c124:	9b01      	ldr	r3, [sp, #4]
 801c126:	fbc3 8902 	smlal	r8, r9, r3, r2
 801c12a:	ea4f 03a9 	mov.w	r3, r9, asr #2
 801c12e:	f303 030f 	ssat	r3, #16, r3
 801c132:	f821 3b02 	strh.w	r3, [r1], #2
 801c136:	9b03      	ldr	r3, [sp, #12]
 801c138:	4299      	cmp	r1, r3
 801c13a:	f47f af67 	bne.w	801c00c <D64_1CH_HTONS_VOL_HP+0x3c>
 801c13e:	462b      	mov	r3, r5
 801c140:	9905      	ldr	r1, [sp, #20]
 801c142:	2000      	movs	r0, #0
 801c144:	460a      	mov	r2, r1
 801c146:	608b      	str	r3, [r1, #8]
 801c148:	f8c1 e00c 	str.w	lr, [r1, #12]
 801c14c:	61cf      	str	r7, [r1, #28]
 801c14e:	610c      	str	r4, [r1, #16]
 801c150:	f8c1 a014 	str.w	sl, [r1, #20]
 801c154:	9904      	ldr	r1, [sp, #16]
 801c156:	6191      	str	r1, [r2, #24]
 801c158:	b007      	add	sp, #28
 801c15a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c15e:	46e2      	mov	sl, ip
 801c160:	e7ee      	b.n	801c140 <D64_1CH_HTONS_VOL_HP+0x170>
 801c162:	bf00      	nop
 801c164:	24000000 	.word	0x24000000
 801c168:	001c0015 	.word	0x001c0015
 801c16c:	000f000a 	.word	0x000f000a
 801c170:	00060003 	.word	0x00060003
 801c174:	0024002a 	.word	0x0024002a
 801c178:	002e0030 	.word	0x002e0030
 801c17c:	00030006 	.word	0x00030006
 801c180:	000a000f 	.word	0x000a000f
 801c184:	0015001c 	.word	0x0015001c

0801c188 <D80_1CH_HTONS_VOL_HP>:
 801c188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c18c:	4614      	mov	r4, r2
 801c18e:	b089      	sub	sp, #36	@ 0x24
 801c190:	4613      	mov	r3, r2
 801c192:	6924      	ldr	r4, [r4, #16]
 801c194:	461d      	mov	r5, r3
 801c196:	9207      	str	r2, [sp, #28]
 801c198:	9401      	str	r4, [sp, #4]
 801c19a:	461c      	mov	r4, r3
 801c19c:	695b      	ldr	r3, [r3, #20]
 801c19e:	68a7      	ldr	r7, [r4, #8]
 801c1a0:	9302      	str	r3, [sp, #8]
 801c1a2:	69a3      	ldr	r3, [r4, #24]
 801c1a4:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 801c1a8:	9306      	str	r3, [sp, #24]
 801c1aa:	69e3      	ldr	r3, [r4, #28]
 801c1ac:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 801c1ae:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 801c1b0:	9403      	str	r4, [sp, #12]
 801c1b2:	6a2c      	ldr	r4, [r5, #32]
 801c1b4:	9404      	str	r4, [sp, #16]
 801c1b6:	2a00      	cmp	r2, #0
 801c1b8:	f000 80ca 	beq.w	801c350 <D80_1CH_HTONS_VOL_HP+0x1c8>
 801c1bc:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801c1c0:	4e64      	ldr	r6, [pc, #400]	@ (801c354 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 801c1c2:	468c      	mov	ip, r1
 801c1c4:	4682      	mov	sl, r0
 801c1c6:	9205      	str	r2, [sp, #20]
 801c1c8:	f8da 2008 	ldr.w	r2, [sl, #8]
 801c1cc:	e89a 0011 	ldmia.w	sl, {r0, r4}
 801c1d0:	f10a 0a0a 	add.w	sl, sl, #10
 801c1d4:	ba40      	rev16	r0, r0
 801c1d6:	ba64      	rev16	r4, r4
 801c1d8:	fa92 f992 	rev16.w	r9, r2
 801c1dc:	b2c5      	uxtb	r5, r0
 801c1de:	f3c0 2107 	ubfx	r1, r0, #8, #8
 801c1e2:	f3c0 4207 	ubfx	r2, r0, #16, #8
 801c1e6:	0e00      	lsrs	r0, r0, #24
 801c1e8:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 801c1ec:	b2e5      	uxtb	r5, r4
 801c1ee:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 801c1f2:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 801c1f6:	4443      	add	r3, r8
 801c1f8:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801c1fc:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 801c200:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 801c204:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 801c208:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c20c:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 801c210:	f3c4 2207 	ubfx	r2, r4, #8, #8
 801c214:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801c218:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 801c21c:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801c220:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 801c224:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801c228:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 801c22c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 801c230:	0e23      	lsrs	r3, r4, #24
 801c232:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 801c236:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 801c23a:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 801c23e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 801c242:	fa5f f989 	uxtb.w	r9, r9
 801c246:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 801c24a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801c24e:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801c252:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801c256:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 801c25a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801c25e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801c262:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 801c266:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 801c26a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 801c26e:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 801c272:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 801c276:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801c27a:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 801c27e:	f3cb 0209 	ubfx	r2, fp, #0, #10
 801c282:	ea4f 239b 	mov.w	r3, fp, lsr #10
 801c286:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 801c28a:	4a33      	ldr	r2, [pc, #204]	@ (801c358 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 801c28c:	fb21 ee02 	smlad	lr, r1, r2, lr
 801c290:	4a32      	ldr	r2, [pc, #200]	@ (801c35c <D80_1CH_HTONS_VOL_HP+0x1d4>)
 801c292:	fb20 ee02 	smlad	lr, r0, r2, lr
 801c296:	4a32      	ldr	r2, [pc, #200]	@ (801c360 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 801c298:	fb25 ee02 	smlad	lr, r5, r2, lr
 801c29c:	4a31      	ldr	r2, [pc, #196]	@ (801c364 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 801c29e:	fb24 ee02 	smlad	lr, r4, r2, lr
 801c2a2:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 801c2a6:	fb29 eb02 	smlad	fp, r9, r2, lr
 801c2aa:	4a2f      	ldr	r2, [pc, #188]	@ (801c368 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 801c2ac:	fb21 7702 	smlad	r7, r1, r2, r7
 801c2b0:	4a2e      	ldr	r2, [pc, #184]	@ (801c36c <D80_1CH_HTONS_VOL_HP+0x1e4>)
 801c2b2:	fb20 7702 	smlad	r7, r0, r2, r7
 801c2b6:	f04f 1e4b 	mov.w	lr, #4915275	@ 0x4b004b
 801c2ba:	fb25 7e0e 	smlad	lr, r5, lr, r7
 801c2be:	4a2c      	ldr	r2, [pc, #176]	@ (801c370 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 801c2c0:	fb24 ee02 	smlad	lr, r4, r2, lr
 801c2c4:	4a2b      	ldr	r2, [pc, #172]	@ (801c374 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 801c2c6:	fb29 ee02 	smlad	lr, r9, r2, lr
 801c2ca:	f04f 0801 	mov.w	r8, #1
 801c2ce:	fb21 f808 	smuad	r8, r1, r8
 801c2d2:	4a29      	ldr	r2, [pc, #164]	@ (801c378 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 801c2d4:	fb20 8002 	smlad	r0, r0, r2, r8
 801c2d8:	4a28      	ldr	r2, [pc, #160]	@ (801c37c <D80_1CH_HTONS_VOL_HP+0x1f4>)
 801c2da:	fb25 0002 	smlad	r0, r5, r2, r0
 801c2de:	4a28      	ldr	r2, [pc, #160]	@ (801c380 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 801c2e0:	fb24 0402 	smlad	r4, r4, r2, r0
 801c2e4:	4f27      	ldr	r7, [pc, #156]	@ (801c384 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 801c2e6:	fb29 4707 	smlad	r7, r9, r7, r4
 801c2ea:	f5ab 327a 	sub.w	r2, fp, #256000	@ 0x3e800
 801c2ee:	9901      	ldr	r1, [sp, #4]
 801c2f0:	9c04      	ldr	r4, [sp, #16]
 801c2f2:	2500      	movs	r5, #0
 801c2f4:	4411      	add	r1, r2
 801c2f6:	4608      	mov	r0, r1
 801c2f8:	9902      	ldr	r1, [sp, #8]
 801c2fa:	9202      	str	r2, [sp, #8]
 801c2fc:	1a40      	subs	r0, r0, r1
 801c2fe:	ea4f 79e0 	mov.w	r9, r0, asr #31
 801c302:	fba0 0104 	umull	r0, r1, r0, r4
 801c306:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 801c30a:	fb04 1109 	mla	r1, r4, r9, r1
 801c30e:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 801c312:	f141 0100 	adc.w	r1, r1, #0
 801c316:	0288      	lsls	r0, r1, #10
 801c318:	0049      	lsls	r1, r1, #1
 801c31a:	9101      	str	r1, [sp, #4]
 801c31c:	9903      	ldr	r1, [sp, #12]
 801c31e:	fbc1 4500 	smlal	r4, r5, r1, r0
 801c322:	10a9      	asrs	r1, r5, #2
 801c324:	f301 010f 	ssat	r1, #16, r1
 801c328:	f82c 1b02 	strh.w	r1, [ip], #2
 801c32c:	9905      	ldr	r1, [sp, #20]
 801c32e:	458c      	cmp	ip, r1
 801c330:	f47f af4a 	bne.w	801c1c8 <D80_1CH_HTONS_VOL_HP+0x40>
 801c334:	9c07      	ldr	r4, [sp, #28]
 801c336:	2000      	movs	r0, #0
 801c338:	9901      	ldr	r1, [sp, #4]
 801c33a:	6162      	str	r2, [r4, #20]
 801c33c:	9a06      	ldr	r2, [sp, #24]
 801c33e:	60a7      	str	r7, [r4, #8]
 801c340:	f8c4 e00c 	str.w	lr, [r4, #12]
 801c344:	61e3      	str	r3, [r4, #28]
 801c346:	6121      	str	r1, [r4, #16]
 801c348:	61a2      	str	r2, [r4, #24]
 801c34a:	b009      	add	sp, #36	@ 0x24
 801c34c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c350:	9a02      	ldr	r2, [sp, #8]
 801c352:	e7ef      	b.n	801c334 <D80_1CH_HTONS_VOL_HP+0x1ac>
 801c354:	24000000 	.word	0x24000000
 801c358:	002d0024 	.word	0x002d0024
 801c35c:	001c0015 	.word	0x001c0015
 801c360:	000f000a 	.word	0x000f000a
 801c364:	00060003 	.word	0x00060003
 801c368:	0037003f 	.word	0x0037003f
 801c36c:	00450049 	.word	0x00450049
 801c370:	00490045 	.word	0x00490045
 801c374:	003f0037 	.word	0x003f0037
 801c378:	00030006 	.word	0x00030006
 801c37c:	000a000f 	.word	0x000a000f
 801c380:	0015001c 	.word	0x0015001c
 801c384:	0024002d 	.word	0x0024002d

0801c388 <D128_1CH_HTONS_VOL_HP>:
 801c388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c38c:	b08d      	sub	sp, #52	@ 0x34
 801c38e:	4614      	mov	r4, r2
 801c390:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 801c392:	920b      	str	r2, [sp, #44]	@ 0x2c
 801c394:	6912      	ldr	r2, [r2, #16]
 801c396:	9202      	str	r2, [sp, #8]
 801c398:	4622      	mov	r2, r4
 801c39a:	6964      	ldr	r4, [r4, #20]
 801c39c:	4615      	mov	r5, r2
 801c39e:	9405      	str	r4, [sp, #20]
 801c3a0:	4614      	mov	r4, r2
 801c3a2:	6992      	ldr	r2, [r2, #24]
 801c3a4:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 801c3a8:	920a      	str	r2, [sp, #40]	@ 0x28
 801c3aa:	68ea      	ldr	r2, [r5, #12]
 801c3ac:	68a4      	ldr	r4, [r4, #8]
 801c3ae:	9203      	str	r2, [sp, #12]
 801c3b0:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 801c3b2:	9404      	str	r4, [sp, #16]
 801c3b4:	9207      	str	r2, [sp, #28]
 801c3b6:	6a2a      	ldr	r2, [r5, #32]
 801c3b8:	9208      	str	r2, [sp, #32]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	f000 8129 	beq.w	801c612 <D128_1CH_HTONS_VOL_HP+0x28a>
 801c3c0:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 801c3c4:	f100 0b10 	add.w	fp, r0, #16
 801c3c8:	f8df 92a0 	ldr.w	r9, [pc, #672]	@ 801c66c <D128_1CH_HTONS_VOL_HP+0x2e4>
 801c3cc:	9106      	str	r1, [sp, #24]
 801c3ce:	9309      	str	r3, [sp, #36]	@ 0x24
 801c3d0:	f1ab 0010 	sub.w	r0, fp, #16
 801c3d4:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 801c3d8:	c80d      	ldmia	r0, {r0, r2, r3}
 801c3da:	ba40      	rev16	r0, r0
 801c3dc:	ba52      	rev16	r2, r2
 801c3de:	ba5b      	rev16	r3, r3
 801c3e0:	fa91 fc91 	rev16.w	ip, r1
 801c3e4:	b2c5      	uxtb	r5, r0
 801c3e6:	f3c0 2407 	ubfx	r4, r0, #8, #8
 801c3ea:	f3c0 4107 	ubfx	r1, r0, #16, #8
 801c3ee:	0e00      	lsrs	r0, r0, #24
 801c3f0:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 801c3f4:	b2d5      	uxtb	r5, r2
 801c3f6:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 801c3fa:	f3c2 2407 	ubfx	r4, r2, #8, #8
 801c3fe:	44b6      	add	lr, r6
 801c400:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 801c404:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 801c408:	f3c2 4007 	ubfx	r0, r2, #16, #8
 801c40c:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 801c410:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 801c414:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 801c418:	0e12      	lsrs	r2, r2, #24
 801c41a:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 801c41e:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 801c422:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801c426:	f3c7 0709 	ubfx	r7, r7, #0, #10
 801c42a:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 801c42e:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 801c432:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801c436:	b2da      	uxtb	r2, r3
 801c438:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 801c43c:	f3c6 0609 	ubfx	r6, r6, #0, #10
 801c440:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 801c444:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 801c448:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 801c44c:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801c450:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 801c454:	f3c3 2107 	ubfx	r1, r3, #8, #8
 801c458:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 801c45c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801c460:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 801c464:	f3c3 4107 	ubfx	r1, r3, #16, #8
 801c468:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 801c46c:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 801c470:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 801c474:	0e1b      	lsrs	r3, r3, #24
 801c476:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 801c47a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 801c47e:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 801c482:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 801c486:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 801c48a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801c48e:	fa5f f38c 	uxtb.w	r3, ip
 801c492:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 801c496:	f3c8 0009 	ubfx	r0, r8, #0, #10
 801c49a:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c49e:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 801c4a2:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 801c4a6:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 801c4aa:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 801c4ae:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 801c4b2:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 801c4b6:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 801c4ba:	f3cc 4307 	ubfx	r3, ip, #16, #8
 801c4be:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 801c4c2:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 801c4c6:	f3c8 0809 	ubfx	r8, r8, #0, #10
 801c4ca:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 801c4ce:	f3c1 0109 	ubfx	r1, r1, #0, #10
 801c4d2:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 801c4d6:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 801c4da:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801c4de:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 801c4e2:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 801c4e6:	9b03      	ldr	r3, [sp, #12]
 801c4e8:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 801c4ec:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801c4f0:	9201      	str	r2, [sp, #4]
 801c4f2:	f3ce 0209 	ubfx	r2, lr, #0, #10
 801c4f6:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 801c4fa:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 801c4fe:	4a46      	ldr	r2, [pc, #280]	@ (801c618 <D128_1CH_HTONS_VOL_HP+0x290>)
 801c500:	fb27 3802 	smlad	r8, r7, r2, r3
 801c504:	4b45      	ldr	r3, [pc, #276]	@ (801c61c <D128_1CH_HTONS_VOL_HP+0x294>)
 801c506:	fb26 8803 	smlad	r8, r6, r3, r8
 801c50a:	4b45      	ldr	r3, [pc, #276]	@ (801c620 <D128_1CH_HTONS_VOL_HP+0x298>)
 801c50c:	fb25 8803 	smlad	r8, r5, r3, r8
 801c510:	4b44      	ldr	r3, [pc, #272]	@ (801c624 <D128_1CH_HTONS_VOL_HP+0x29c>)
 801c512:	fb24 8803 	smlad	r8, r4, r3, r8
 801c516:	4b44      	ldr	r3, [pc, #272]	@ (801c628 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 801c518:	fb20 8803 	smlad	r8, r0, r3, r8
 801c51c:	4b43      	ldr	r3, [pc, #268]	@ (801c62c <D128_1CH_HTONS_VOL_HP+0x2a4>)
 801c51e:	fb21 8803 	smlad	r8, r1, r3, r8
 801c522:	4b43      	ldr	r3, [pc, #268]	@ (801c630 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 801c524:	9a01      	ldr	r2, [sp, #4]
 801c526:	fb22 8203 	smlad	r2, r2, r3, r8
 801c52a:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 801c52e:	fb2c 2808 	smlad	r8, ip, r8, r2
 801c532:	4b40      	ldr	r3, [pc, #256]	@ (801c634 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 801c534:	9a04      	ldr	r2, [sp, #16]
 801c536:	fb27 2a03 	smlad	sl, r7, r3, r2
 801c53a:	4b3f      	ldr	r3, [pc, #252]	@ (801c638 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 801c53c:	fb26 aa03 	smlad	sl, r6, r3, sl
 801c540:	4a3e      	ldr	r2, [pc, #248]	@ (801c63c <D128_1CH_HTONS_VOL_HP+0x2b4>)
 801c542:	fb25 aa02 	smlad	sl, r5, r2, sl
 801c546:	4a3e      	ldr	r2, [pc, #248]	@ (801c640 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 801c548:	fb24 aa02 	smlad	sl, r4, r2, sl
 801c54c:	4a3d      	ldr	r2, [pc, #244]	@ (801c644 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 801c54e:	fb20 aa02 	smlad	sl, r0, r2, sl
 801c552:	4a3d      	ldr	r2, [pc, #244]	@ (801c648 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 801c554:	fb21 aa02 	smlad	sl, r1, r2, sl
 801c558:	4a3c      	ldr	r2, [pc, #240]	@ (801c64c <D128_1CH_HTONS_VOL_HP+0x2c4>)
 801c55a:	9b01      	ldr	r3, [sp, #4]
 801c55c:	fb23 a202 	smlad	r2, r3, r2, sl
 801c560:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 801c670 <D128_1CH_HTONS_VOL_HP+0x2e8>
 801c564:	fb2c 230a 	smlad	r3, ip, sl, r2
 801c568:	2201      	movs	r2, #1
 801c56a:	9303      	str	r3, [sp, #12]
 801c56c:	fb27 f702 	smuad	r7, r7, r2
 801c570:	4a37      	ldr	r2, [pc, #220]	@ (801c650 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 801c572:	fb26 7702 	smlad	r7, r6, r2, r7
 801c576:	4a37      	ldr	r2, [pc, #220]	@ (801c654 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 801c578:	fb25 7702 	smlad	r7, r5, r2, r7
 801c57c:	4a36      	ldr	r2, [pc, #216]	@ (801c658 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 801c57e:	fb24 7702 	smlad	r7, r4, r2, r7
 801c582:	4a36      	ldr	r2, [pc, #216]	@ (801c65c <D128_1CH_HTONS_VOL_HP+0x2d4>)
 801c584:	fb20 7702 	smlad	r7, r0, r2, r7
 801c588:	4a35      	ldr	r2, [pc, #212]	@ (801c660 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 801c58a:	fb21 7702 	smlad	r7, r1, r2, r7
 801c58e:	4a35      	ldr	r2, [pc, #212]	@ (801c664 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 801c590:	9b01      	ldr	r3, [sp, #4]
 801c592:	fb23 7202 	smlad	r2, r3, r2, r7
 801c596:	4b34      	ldr	r3, [pc, #208]	@ (801c668 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 801c598:	fb2c 2303 	smlad	r3, ip, r3, r2
 801c59c:	f5a8 1880 	sub.w	r8, r8, #1048576	@ 0x100000
 801c5a0:	9304      	str	r3, [sp, #16]
 801c5a2:	9b02      	ldr	r3, [sp, #8]
 801c5a4:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 801c5a8:	9e08      	ldr	r6, [sp, #32]
 801c5aa:	2100      	movs	r1, #0
 801c5ac:	4443      	add	r3, r8
 801c5ae:	f10b 0b10 	add.w	fp, fp, #16
 801c5b2:	461a      	mov	r2, r3
 801c5b4:	9b05      	ldr	r3, [sp, #20]
 801c5b6:	f8cd 8014 	str.w	r8, [sp, #20]
 801c5ba:	1ad2      	subs	r2, r2, r3
 801c5bc:	17d5      	asrs	r5, r2, #31
 801c5be:	fba2 2306 	umull	r2, r3, r2, r6
 801c5c2:	1812      	adds	r2, r2, r0
 801c5c4:	fb06 3305 	mla	r3, r6, r5, r3
 801c5c8:	414b      	adcs	r3, r1
 801c5ca:	021a      	lsls	r2, r3, #8
 801c5cc:	005b      	lsls	r3, r3, #1
 801c5ce:	9302      	str	r3, [sp, #8]
 801c5d0:	9b07      	ldr	r3, [sp, #28]
 801c5d2:	fbc3 0102 	smlal	r0, r1, r3, r2
 801c5d6:	9a06      	ldr	r2, [sp, #24]
 801c5d8:	108b      	asrs	r3, r1, #2
 801c5da:	f303 030f 	ssat	r3, #16, r3
 801c5de:	f822 3b02 	strh.w	r3, [r2], #2
 801c5e2:	4613      	mov	r3, r2
 801c5e4:	9206      	str	r2, [sp, #24]
 801c5e6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c5e8:	4293      	cmp	r3, r2
 801c5ea:	f47f aef1 	bne.w	801c3d0 <D128_1CH_HTONS_VOL_HP+0x48>
 801c5ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801c5f0:	2000      	movs	r0, #0
 801c5f2:	9904      	ldr	r1, [sp, #16]
 801c5f4:	4613      	mov	r3, r2
 801c5f6:	f8c2 e01c 	str.w	lr, [r2, #28]
 801c5fa:	6091      	str	r1, [r2, #8]
 801c5fc:	9903      	ldr	r1, [sp, #12]
 801c5fe:	60d1      	str	r1, [r2, #12]
 801c600:	9a02      	ldr	r2, [sp, #8]
 801c602:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801c604:	611a      	str	r2, [r3, #16]
 801c606:	f8c3 8014 	str.w	r8, [r3, #20]
 801c60a:	6199      	str	r1, [r3, #24]
 801c60c:	b00d      	add	sp, #52	@ 0x34
 801c60e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801c612:	f8dd 8014 	ldr.w	r8, [sp, #20]
 801c616:	e7ea      	b.n	801c5ee <D128_1CH_HTONS_VOL_HP+0x266>
 801c618:	00780069 	.word	0x00780069
 801c61c:	005b004e 	.word	0x005b004e
 801c620:	00420037 	.word	0x00420037
 801c624:	002d0024 	.word	0x002d0024
 801c628:	001c0015 	.word	0x001c0015
 801c62c:	000f000a 	.word	0x000f000a
 801c630:	00060003 	.word	0x00060003
 801c634:	00880096 	.word	0x00880096
 801c638:	00a200ac 	.word	0x00a200ac
 801c63c:	00b400ba 	.word	0x00b400ba
 801c640:	00be00c0 	.word	0x00be00c0
 801c644:	00c000be 	.word	0x00c000be
 801c648:	00ba00b4 	.word	0x00ba00b4
 801c64c:	00ac00a2 	.word	0x00ac00a2
 801c650:	00030006 	.word	0x00030006
 801c654:	000a000f 	.word	0x000a000f
 801c658:	0015001c 	.word	0x0015001c
 801c65c:	0024002d 	.word	0x0024002d
 801c660:	00370042 	.word	0x00370042
 801c664:	004e005b 	.word	0x004e005b
 801c668:	00690078 	.word	0x00690078
 801c66c:	24000000 	.word	0x24000000
 801c670:	00960088 	.word	0x00960088

0801c674 <PDM_Filter_Init>:
 801c674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c676:	2240      	movs	r2, #64	@ 0x40
 801c678:	4604      	mov	r4, r0
 801c67a:	2100      	movs	r1, #0
 801c67c:	300c      	adds	r0, #12
 801c67e:	f000 fc05 	bl	801ce8c <memset>
 801c682:	4939      	ldr	r1, [pc, #228]	@ (801c768 <PDM_Filter_Init+0xf4>)
 801c684:	4839      	ldr	r0, [pc, #228]	@ (801c76c <PDM_Filter_Init+0xf8>)
 801c686:	f000 f977 	bl	801c978 <CRC_Lock>
 801c68a:	2300      	movs	r3, #0
 801c68c:	2801      	cmp	r0, #1
 801c68e:	8820      	ldrh	r0, [r4, #0]
 801c690:	4a35      	ldr	r2, [pc, #212]	@ (801c768 <PDM_Filter_Init+0xf4>)
 801c692:	8965      	ldrh	r5, [r4, #10]
 801c694:	bf18      	it	ne
 801c696:	461a      	movne	r2, r3
 801c698:	8921      	ldrh	r1, [r4, #8]
 801c69a:	2801      	cmp	r0, #1
 801c69c:	86a5      	strh	r5, [r4, #52]	@ 0x34
 801c69e:	6462      	str	r2, [r4, #68]	@ 0x44
 801c6a0:	86e1      	strh	r1, [r4, #54]	@ 0x36
 801c6a2:	61a3      	str	r3, [r4, #24]
 801c6a4:	6123      	str	r3, [r4, #16]
 801c6a6:	6163      	str	r3, [r4, #20]
 801c6a8:	60e3      	str	r3, [r4, #12]
 801c6aa:	6263      	str	r3, [r4, #36]	@ 0x24
 801c6ac:	61e3      	str	r3, [r4, #28]
 801c6ae:	6223      	str	r3, [r4, #32]
 801c6b0:	6423      	str	r3, [r4, #64]	@ 0x40
 801c6b2:	d91c      	bls.n	801c6ee <PDM_Filter_Init+0x7a>
 801c6b4:	2003      	movs	r0, #3
 801c6b6:	2302      	movs	r3, #2
 801c6b8:	8862      	ldrh	r2, [r4, #2]
 801c6ba:	2a01      	cmp	r2, #1
 801c6bc:	d914      	bls.n	801c6e8 <PDM_Filter_Init+0x74>
 801c6be:	2140      	movs	r1, #64	@ 0x40
 801c6c0:	2300      	movs	r3, #0
 801c6c2:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 801c6c4:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 801c6c8:	d00b      	beq.n	801c6e2 <PDM_Filter_Init+0x6e>
 801c6ca:	6862      	ldr	r2, [r4, #4]
 801c6cc:	b11a      	cbz	r2, 801c6d6 <PDM_Filter_Init+0x62>
 801c6ce:	f043 0310 	orr.w	r3, r3, #16
 801c6d2:	62e2      	str	r2, [r4, #44]	@ 0x2c
 801c6d4:	6423      	str	r3, [r4, #64]	@ 0x40
 801c6d6:	2200      	movs	r2, #0
 801c6d8:	8722      	strh	r2, [r4, #56]	@ 0x38
 801c6da:	b908      	cbnz	r0, 801c6e0 <PDM_Filter_Init+0x6c>
 801c6dc:	3380      	adds	r3, #128	@ 0x80
 801c6de:	6423      	str	r3, [r4, #64]	@ 0x40
 801c6e0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c6e2:	460b      	mov	r3, r1
 801c6e4:	6421      	str	r1, [r4, #64]	@ 0x40
 801c6e6:	e7f0      	b.n	801c6ca <PDM_Filter_Init+0x56>
 801c6e8:	d008      	beq.n	801c6fc <PDM_Filter_Init+0x88>
 801c6ea:	4618      	mov	r0, r3
 801c6ec:	e7e7      	b.n	801c6be <PDM_Filter_Init+0x4a>
 801c6ee:	4d20      	ldr	r5, [pc, #128]	@ (801c770 <PDM_Filter_Init+0xfc>)
 801c6f0:	782a      	ldrb	r2, [r5, #0]
 801c6f2:	d009      	beq.n	801c708 <PDM_Filter_Init+0x94>
 801c6f4:	2a01      	cmp	r2, #1
 801c6f6:	d020      	beq.n	801c73a <PDM_Filter_Init+0xc6>
 801c6f8:	2001      	movs	r0, #1
 801c6fa:	e7dd      	b.n	801c6b8 <PDM_Filter_Init+0x44>
 801c6fc:	2220      	movs	r2, #32
 801c6fe:	4618      	mov	r0, r3
 801c700:	2160      	movs	r1, #96	@ 0x60
 801c702:	6422      	str	r2, [r4, #64]	@ 0x40
 801c704:	4613      	mov	r3, r2
 801c706:	e7dc      	b.n	801c6c2 <PDM_Filter_Init+0x4e>
 801c708:	2a00      	cmp	r2, #0
 801c70a:	d1d5      	bne.n	801c6b8 <PDM_Filter_Init+0x44>
 801c70c:	4919      	ldr	r1, [pc, #100]	@ (801c774 <PDM_Filter_Init+0x100>)
 801c70e:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 801c77c <PDM_Filter_Init+0x108>
 801c712:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 801c716:	4e18      	ldr	r6, [pc, #96]	@ (801c778 <PDM_Filter_Init+0x104>)
 801c718:	684a      	ldr	r2, [r1, #4]
 801c71a:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 801c71e:	ea02 0006 	and.w	r0, r2, r6
 801c722:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801c726:	4303      	orrs	r3, r0
 801c728:	4413      	add	r3, r2
 801c72a:	f841 3f04 	str.w	r3, [r1, #4]!
 801c72e:	428f      	cmp	r7, r1
 801c730:	d1f2      	bne.n	801c718 <PDM_Filter_Init+0xa4>
 801c732:	2001      	movs	r0, #1
 801c734:	2300      	movs	r3, #0
 801c736:	7028      	strb	r0, [r5, #0]
 801c738:	e7be      	b.n	801c6b8 <PDM_Filter_Init+0x44>
 801c73a:	490e      	ldr	r1, [pc, #56]	@ (801c774 <PDM_Filter_Init+0x100>)
 801c73c:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 801c77c <PDM_Filter_Init+0x108>
 801c740:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 801c744:	4e0c      	ldr	r6, [pc, #48]	@ (801c778 <PDM_Filter_Init+0x104>)
 801c746:	684a      	ldr	r2, [r1, #4]
 801c748:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 801c74c:	ea02 0006 	and.w	r0, r2, r6
 801c750:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801c754:	4303      	orrs	r3, r0
 801c756:	4413      	add	r3, r2
 801c758:	f841 3f04 	str.w	r3, [r1, #4]!
 801c75c:	428f      	cmp	r7, r1
 801c75e:	d1f2      	bne.n	801c746 <PDM_Filter_Init+0xd2>
 801c760:	2300      	movs	r3, #0
 801c762:	2001      	movs	r0, #1
 801c764:	702b      	strb	r3, [r5, #0]
 801c766:	e7a7      	b.n	801c6b8 <PDM_Filter_Init+0x44>
 801c768:	b5e8b5cd 	.word	0xb5e8b5cd
 801c76c:	f407a5c2 	.word	0xf407a5c2
 801c770:	240010fc 	.word	0x240010fc
 801c774:	23fffffc 	.word	0x23fffffc
 801c778:	000ffc00 	.word	0x000ffc00
 801c77c:	3ff00000 	.word	0x3ff00000

0801c780 <PDM_Filter_setConfig>:
 801c780:	b570      	push	{r4, r5, r6, lr}
 801c782:	460e      	mov	r6, r1
 801c784:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 801c786:	4604      	mov	r4, r0
 801c788:	8832      	ldrh	r2, [r6, #0]
 801c78a:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 801c78e:	1e53      	subs	r3, r2, #1
 801c790:	2b06      	cmp	r3, #6
 801c792:	ed2d 8b04 	vpush	{d8-d9}
 801c796:	6420      	str	r0, [r4, #64]	@ 0x40
 801c798:	d91b      	bls.n	801c7d2 <PDM_Filter_setConfig+0x52>
 801c79a:	2508      	movs	r5, #8
 801c79c:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 801c7a0:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801c7a4:	4299      	cmp	r1, r3
 801c7a6:	d07b      	beq.n	801c8a0 <PDM_Filter_setConfig+0x120>
 801c7a8:	f113 0f0c 	cmn.w	r3, #12
 801c7ac:	db29      	blt.n	801c802 <PDM_Filter_setConfig+0x82>
 801c7ae:	2b33      	cmp	r3, #51	@ 0x33
 801c7b0:	dd2c      	ble.n	801c80c <PDM_Filter_setConfig+0x8c>
 801c7b2:	2333      	movs	r3, #51	@ 0x33
 801c7b4:	3540      	adds	r5, #64	@ 0x40
 801c7b6:	80b3      	strh	r3, [r6, #4]
 801c7b8:	8622      	strh	r2, [r4, #48]	@ 0x30
 801c7ba:	8873      	ldrh	r3, [r6, #2]
 801c7bc:	8663      	strh	r3, [r4, #50]	@ 0x32
 801c7be:	b925      	cbnz	r5, 801c7ca <PDM_Filter_setConfig+0x4a>
 801c7c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801c7c2:	2500      	movs	r5, #0
 801c7c4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801c7c8:	6423      	str	r3, [r4, #64]	@ 0x40
 801c7ca:	4628      	mov	r0, r5
 801c7cc:	ecbd 8b04 	vpop	{d8-d9}
 801c7d0:	bd70      	pop	{r4, r5, r6, pc}
 801c7d2:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 801c7d4:	4293      	cmp	r3, r2
 801c7d6:	d04a      	beq.n	801c86e <PDM_Filter_setConfig+0xee>
 801c7d8:	4b4e      	ldr	r3, [pc, #312]	@ (801c914 <PDM_Filter_setConfig+0x194>)
 801c7da:	400b      	ands	r3, r1
 801c7dc:	4313      	orrs	r3, r2
 801c7de:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 801c7e2:	6423      	str	r3, [r4, #64]	@ 0x40
 801c7e4:	f003 030f 	and.w	r3, r3, #15
 801c7e8:	2970      	cmp	r1, #112	@ 0x70
 801c7ea:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801c7ee:	d04a      	beq.n	801c886 <PDM_Filter_setConfig+0x106>
 801c7f0:	2b06      	cmp	r3, #6
 801c7f2:	f200 808d 	bhi.w	801c910 <PDM_Filter_setConfig+0x190>
 801c7f6:	e8df f003 	tbb	[pc, r3]
 801c7fa:	6467      	.short	0x6467
 801c7fc:	6a6d7073 	.word	0x6a6d7073
 801c800:	5a          	.byte	0x5a
 801c801:	00          	.byte	0x00
 801c802:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 801c806:	3540      	adds	r5, #64	@ 0x40
 801c808:	80b3      	strh	r3, [r6, #4]
 801c80a:	e7d5      	b.n	801c7b8 <PDM_Filter_setConfig+0x38>
 801c80c:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 801c80e:	f002 020f 	and.w	r2, r2, #15
 801c812:	3a01      	subs	r2, #1
 801c814:	2a06      	cmp	r2, #6
 801c816:	d83e      	bhi.n	801c896 <PDM_Filter_setConfig+0x116>
 801c818:	493f      	ldr	r1, [pc, #252]	@ (801c918 <PDM_Filter_setConfig+0x198>)
 801c81a:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 801c81e:	ed92 9a00 	vldr	s18, [r2]
 801c822:	ed92 8a07 	vldr	s16, [r2, #28]
 801c826:	ee07 3a90 	vmov	s15, r3
 801c82a:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 801c82e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 801c832:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801c836:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 801c83a:	f001 fa59 	bl	801dcf0 <powf>
 801c83e:	eddf 0a37 	vldr	s1, [pc, #220]	@ 801c91c <PDM_Filter_setConfig+0x19c>
 801c842:	eef0 8a40 	vmov.f32	s17, s0
 801c846:	ee70 0ac9 	vsub.f32	s1, s1, s18
 801c84a:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 801c84e:	f001 fa4f 	bl	801dcf0 <powf>
 801c852:	ee28 8a28 	vmul.f32	s16, s16, s17
 801c856:	88b3      	ldrh	r3, [r6, #4]
 801c858:	8832      	ldrh	r2, [r6, #0]
 801c85a:	ee28 8a00 	vmul.f32	s16, s16, s0
 801c85e:	8723      	strh	r3, [r4, #56]	@ 0x38
 801c860:	feb8 8a48 	vrinta.f32	s16, s16
 801c864:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 801c868:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
 801c86c:	e7a4      	b.n	801c7b8 <PDM_Filter_setConfig+0x38>
 801c86e:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801c872:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 801c876:	4299      	cmp	r1, r3
 801c878:	d016      	beq.n	801c8a8 <PDM_Filter_setConfig+0x128>
 801c87a:	f113 0f0c 	cmn.w	r3, #12
 801c87e:	f04f 0500 	mov.w	r5, #0
 801c882:	da94      	bge.n	801c7ae <PDM_Filter_setConfig+0x2e>
 801c884:	e7bd      	b.n	801c802 <PDM_Filter_setConfig+0x82>
 801c886:	2b06      	cmp	r3, #6
 801c888:	d842      	bhi.n	801c910 <PDM_Filter_setConfig+0x190>
 801c88a:	e8df f003 	tbb	[pc, r3]
 801c88e:	3b3e      	.short	0x3b3e
 801c890:	2f323538 	.word	0x2f323538
 801c894:	2c          	.byte	0x2c
 801c895:	00          	.byte	0x00
 801c896:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 801c920 <PDM_Filter_setConfig+0x1a0>
 801c89a:	eeb0 9a48 	vmov.f32	s18, s16
 801c89e:	e7c2      	b.n	801c826 <PDM_Filter_setConfig+0xa6>
 801c8a0:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 801c8a2:	4291      	cmp	r1, r2
 801c8a4:	d180      	bne.n	801c7a8 <PDM_Filter_setConfig+0x28>
 801c8a6:	e788      	b.n	801c7ba <PDM_Filter_setConfig+0x3a>
 801c8a8:	8873      	ldrh	r3, [r6, #2]
 801c8aa:	8663      	strh	r3, [r4, #50]	@ 0x32
 801c8ac:	e788      	b.n	801c7c0 <PDM_Filter_setConfig+0x40>
 801c8ae:	4b1d      	ldr	r3, [pc, #116]	@ (801c924 <PDM_Filter_setConfig+0x1a4>)
 801c8b0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8b2:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801c8b6:	2500      	movs	r5, #0
 801c8b8:	f113 0f0c 	cmn.w	r3, #12
 801c8bc:	f6bf af77 	bge.w	801c7ae <PDM_Filter_setConfig+0x2e>
 801c8c0:	e79f      	b.n	801c802 <PDM_Filter_setConfig+0x82>
 801c8c2:	4b19      	ldr	r3, [pc, #100]	@ (801c928 <PDM_Filter_setConfig+0x1a8>)
 801c8c4:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8c6:	e7f4      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8c8:	4b18      	ldr	r3, [pc, #96]	@ (801c92c <PDM_Filter_setConfig+0x1ac>)
 801c8ca:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8cc:	e7f1      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8ce:	4b18      	ldr	r3, [pc, #96]	@ (801c930 <PDM_Filter_setConfig+0x1b0>)
 801c8d0:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8d2:	e7ee      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8d4:	4b17      	ldr	r3, [pc, #92]	@ (801c934 <PDM_Filter_setConfig+0x1b4>)
 801c8d6:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8d8:	e7eb      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8da:	4b17      	ldr	r3, [pc, #92]	@ (801c938 <PDM_Filter_setConfig+0x1b8>)
 801c8dc:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8de:	e7e8      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8e0:	4b16      	ldr	r3, [pc, #88]	@ (801c93c <PDM_Filter_setConfig+0x1bc>)
 801c8e2:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8e4:	e7e5      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8e6:	4b16      	ldr	r3, [pc, #88]	@ (801c940 <PDM_Filter_setConfig+0x1c0>)
 801c8e8:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8ea:	e7e2      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8ec:	4b15      	ldr	r3, [pc, #84]	@ (801c944 <PDM_Filter_setConfig+0x1c4>)
 801c8ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8f0:	e7df      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8f2:	4b15      	ldr	r3, [pc, #84]	@ (801c948 <PDM_Filter_setConfig+0x1c8>)
 801c8f4:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8f6:	e7dc      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8f8:	4b14      	ldr	r3, [pc, #80]	@ (801c94c <PDM_Filter_setConfig+0x1cc>)
 801c8fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c8fc:	e7d9      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c8fe:	4b14      	ldr	r3, [pc, #80]	@ (801c950 <PDM_Filter_setConfig+0x1d0>)
 801c900:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c902:	e7d6      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c904:	4b13      	ldr	r3, [pc, #76]	@ (801c954 <PDM_Filter_setConfig+0x1d4>)
 801c906:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c908:	e7d3      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c90a:	4b13      	ldr	r3, [pc, #76]	@ (801c958 <PDM_Filter_setConfig+0x1d8>)
 801c90c:	64a3      	str	r3, [r4, #72]	@ 0x48
 801c90e:	e7d0      	b.n	801c8b2 <PDM_Filter_setConfig+0x132>
 801c910:	2500      	movs	r5, #0
 801c912:	e743      	b.n	801c79c <PDM_Filter_setConfig+0x1c>
 801c914:	fffffef0 	.word	0xfffffef0
 801c918:	0801e530 	.word	0x0801e530
 801c91c:	42000000 	.word	0x42000000
 801c920:	00000000 	.word	0x00000000
 801c924:	0801aee1 	.word	0x0801aee1
 801c928:	0801b259 	.word	0x0801b259
 801c92c:	0801b069 	.word	0x0801b069
 801c930:	0801ad65 	.word	0x0801ad65
 801c934:	0801ac55 	.word	0x0801ac55
 801c938:	0801b725 	.word	0x0801b725
 801c93c:	0801b489 	.word	0x0801b489
 801c940:	0801bd09 	.word	0x0801bd09
 801c944:	0801bbd9 	.word	0x0801bbd9
 801c948:	0801badd 	.word	0x0801badd
 801c94c:	0801c389 	.word	0x0801c389
 801c950:	0801c189 	.word	0x0801c189
 801c954:	0801bfd1 	.word	0x0801bfd1
 801c958:	0801be51 	.word	0x0801be51

0801c95c <PDM_Filter>:
 801c95c:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 801c95e:	f413 7f80 	tst.w	r3, #256	@ 0x100
 801c962:	d105      	bne.n	801c970 <PDM_Filter+0x14>
 801c964:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801c968:	bf14      	ite	ne
 801c96a:	2020      	movne	r0, #32
 801c96c:	2030      	moveq	r0, #48	@ 0x30
 801c96e:	4770      	bx	lr
 801c970:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 801c972:	320c      	adds	r2, #12
 801c974:	4718      	bx	r3
 801c976:	bf00      	nop

0801c978 <CRC_Lock>:
 801c978:	4a18      	ldr	r2, [pc, #96]	@ (801c9dc <CRC_Lock+0x64>)
 801c97a:	6813      	ldr	r3, [r2, #0]
 801c97c:	b410      	push	{r4}
 801c97e:	f023 0301 	bic.w	r3, r3, #1
 801c982:	4c17      	ldr	r4, [pc, #92]	@ (801c9e0 <CRC_Lock+0x68>)
 801c984:	6013      	str	r3, [r2, #0]
 801c986:	6823      	ldr	r3, [r4, #0]
 801c988:	b933      	cbnz	r3, 801c998 <CRC_Lock+0x20>
 801c98a:	4b16      	ldr	r3, [pc, #88]	@ (801c9e4 <CRC_Lock+0x6c>)
 801c98c:	681b      	ldr	r3, [r3, #0]
 801c98e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801c992:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801c996:	d010      	beq.n	801c9ba <CRC_Lock+0x42>
 801c998:	4b13      	ldr	r3, [pc, #76]	@ (801c9e8 <CRC_Lock+0x70>)
 801c99a:	2401      	movs	r4, #1
 801c99c:	461a      	mov	r2, r3
 801c99e:	601c      	str	r4, [r3, #0]
 801c9a0:	6813      	ldr	r3, [r2, #0]
 801c9a2:	2b00      	cmp	r3, #0
 801c9a4:	d1fc      	bne.n	801c9a0 <CRC_Lock+0x28>
 801c9a6:	4b11      	ldr	r3, [pc, #68]	@ (801c9ec <CRC_Lock+0x74>)
 801c9a8:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9ac:	6018      	str	r0, [r3, #0]
 801c9ae:	6818      	ldr	r0, [r3, #0]
 801c9b0:	1a08      	subs	r0, r1, r0
 801c9b2:	fab0 f080 	clz	r0, r0
 801c9b6:	0940      	lsrs	r0, r0, #5
 801c9b8:	4770      	bx	lr
 801c9ba:	4b0d      	ldr	r3, [pc, #52]	@ (801c9f0 <CRC_Lock+0x78>)
 801c9bc:	2401      	movs	r4, #1
 801c9be:	461a      	mov	r2, r3
 801c9c0:	601c      	str	r4, [r3, #0]
 801c9c2:	6813      	ldr	r3, [r2, #0]
 801c9c4:	2b00      	cmp	r3, #0
 801c9c6:	d1fc      	bne.n	801c9c2 <CRC_Lock+0x4a>
 801c9c8:	4b0a      	ldr	r3, [pc, #40]	@ (801c9f4 <CRC_Lock+0x7c>)
 801c9ca:	f85d 4b04 	ldr.w	r4, [sp], #4
 801c9ce:	6018      	str	r0, [r3, #0]
 801c9d0:	6818      	ldr	r0, [r3, #0]
 801c9d2:	1a40      	subs	r0, r0, r1
 801c9d4:	fab0 f080 	clz	r0, r0
 801c9d8:	0940      	lsrs	r0, r0, #5
 801c9da:	4770      	bx	lr
 801c9dc:	e0002000 	.word	0xe0002000
 801c9e0:	e0042000 	.word	0xe0042000
 801c9e4:	5c001000 	.word	0x5c001000
 801c9e8:	40023008 	.word	0x40023008
 801c9ec:	40023000 	.word	0x40023000
 801c9f0:	58024c08 	.word	0x58024c08
 801c9f4:	58024c00 	.word	0x58024c00

0801c9f8 <sbrk_aligned>:
 801c9f8:	b570      	push	{r4, r5, r6, lr}
 801c9fa:	4e0f      	ldr	r6, [pc, #60]	@ (801ca38 <sbrk_aligned+0x40>)
 801c9fc:	460c      	mov	r4, r1
 801c9fe:	6831      	ldr	r1, [r6, #0]
 801ca00:	4605      	mov	r5, r0
 801ca02:	b911      	cbnz	r1, 801ca0a <sbrk_aligned+0x12>
 801ca04:	f000 fa4a 	bl	801ce9c <_sbrk_r>
 801ca08:	6030      	str	r0, [r6, #0]
 801ca0a:	4621      	mov	r1, r4
 801ca0c:	4628      	mov	r0, r5
 801ca0e:	f000 fa45 	bl	801ce9c <_sbrk_r>
 801ca12:	1c43      	adds	r3, r0, #1
 801ca14:	d103      	bne.n	801ca1e <sbrk_aligned+0x26>
 801ca16:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 801ca1a:	4620      	mov	r0, r4
 801ca1c:	bd70      	pop	{r4, r5, r6, pc}
 801ca1e:	1cc4      	adds	r4, r0, #3
 801ca20:	f024 0403 	bic.w	r4, r4, #3
 801ca24:	42a0      	cmp	r0, r4
 801ca26:	d0f8      	beq.n	801ca1a <sbrk_aligned+0x22>
 801ca28:	1a21      	subs	r1, r4, r0
 801ca2a:	4628      	mov	r0, r5
 801ca2c:	f000 fa36 	bl	801ce9c <_sbrk_r>
 801ca30:	3001      	adds	r0, #1
 801ca32:	d1f2      	bne.n	801ca1a <sbrk_aligned+0x22>
 801ca34:	e7ef      	b.n	801ca16 <sbrk_aligned+0x1e>
 801ca36:	bf00      	nop
 801ca38:	24036f5c 	.word	0x24036f5c

0801ca3c <_malloc_r>:
 801ca3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801ca40:	1ccd      	adds	r5, r1, #3
 801ca42:	f025 0503 	bic.w	r5, r5, #3
 801ca46:	3508      	adds	r5, #8
 801ca48:	2d0c      	cmp	r5, #12
 801ca4a:	bf38      	it	cc
 801ca4c:	250c      	movcc	r5, #12
 801ca4e:	2d00      	cmp	r5, #0
 801ca50:	4606      	mov	r6, r0
 801ca52:	db01      	blt.n	801ca58 <_malloc_r+0x1c>
 801ca54:	42a9      	cmp	r1, r5
 801ca56:	d904      	bls.n	801ca62 <_malloc_r+0x26>
 801ca58:	230c      	movs	r3, #12
 801ca5a:	6033      	str	r3, [r6, #0]
 801ca5c:	2000      	movs	r0, #0
 801ca5e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801ca62:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801cb38 <_malloc_r+0xfc>
 801ca66:	f000 f869 	bl	801cb3c <__malloc_lock>
 801ca6a:	f8d8 3000 	ldr.w	r3, [r8]
 801ca6e:	461c      	mov	r4, r3
 801ca70:	bb44      	cbnz	r4, 801cac4 <_malloc_r+0x88>
 801ca72:	4629      	mov	r1, r5
 801ca74:	4630      	mov	r0, r6
 801ca76:	f7ff ffbf 	bl	801c9f8 <sbrk_aligned>
 801ca7a:	1c43      	adds	r3, r0, #1
 801ca7c:	4604      	mov	r4, r0
 801ca7e:	d158      	bne.n	801cb32 <_malloc_r+0xf6>
 801ca80:	f8d8 4000 	ldr.w	r4, [r8]
 801ca84:	4627      	mov	r7, r4
 801ca86:	2f00      	cmp	r7, #0
 801ca88:	d143      	bne.n	801cb12 <_malloc_r+0xd6>
 801ca8a:	2c00      	cmp	r4, #0
 801ca8c:	d04b      	beq.n	801cb26 <_malloc_r+0xea>
 801ca8e:	6823      	ldr	r3, [r4, #0]
 801ca90:	4639      	mov	r1, r7
 801ca92:	4630      	mov	r0, r6
 801ca94:	eb04 0903 	add.w	r9, r4, r3
 801ca98:	f000 fa00 	bl	801ce9c <_sbrk_r>
 801ca9c:	4581      	cmp	r9, r0
 801ca9e:	d142      	bne.n	801cb26 <_malloc_r+0xea>
 801caa0:	6821      	ldr	r1, [r4, #0]
 801caa2:	1a6d      	subs	r5, r5, r1
 801caa4:	4629      	mov	r1, r5
 801caa6:	4630      	mov	r0, r6
 801caa8:	f7ff ffa6 	bl	801c9f8 <sbrk_aligned>
 801caac:	3001      	adds	r0, #1
 801caae:	d03a      	beq.n	801cb26 <_malloc_r+0xea>
 801cab0:	6823      	ldr	r3, [r4, #0]
 801cab2:	442b      	add	r3, r5
 801cab4:	6023      	str	r3, [r4, #0]
 801cab6:	f8d8 3000 	ldr.w	r3, [r8]
 801caba:	685a      	ldr	r2, [r3, #4]
 801cabc:	bb62      	cbnz	r2, 801cb18 <_malloc_r+0xdc>
 801cabe:	f8c8 7000 	str.w	r7, [r8]
 801cac2:	e00f      	b.n	801cae4 <_malloc_r+0xa8>
 801cac4:	6822      	ldr	r2, [r4, #0]
 801cac6:	1b52      	subs	r2, r2, r5
 801cac8:	d420      	bmi.n	801cb0c <_malloc_r+0xd0>
 801caca:	2a0b      	cmp	r2, #11
 801cacc:	d917      	bls.n	801cafe <_malloc_r+0xc2>
 801cace:	1961      	adds	r1, r4, r5
 801cad0:	42a3      	cmp	r3, r4
 801cad2:	6025      	str	r5, [r4, #0]
 801cad4:	bf18      	it	ne
 801cad6:	6059      	strne	r1, [r3, #4]
 801cad8:	6863      	ldr	r3, [r4, #4]
 801cada:	bf08      	it	eq
 801cadc:	f8c8 1000 	streq.w	r1, [r8]
 801cae0:	5162      	str	r2, [r4, r5]
 801cae2:	604b      	str	r3, [r1, #4]
 801cae4:	4630      	mov	r0, r6
 801cae6:	f000 f82f 	bl	801cb48 <__malloc_unlock>
 801caea:	f104 000b 	add.w	r0, r4, #11
 801caee:	1d23      	adds	r3, r4, #4
 801caf0:	f020 0007 	bic.w	r0, r0, #7
 801caf4:	1ac2      	subs	r2, r0, r3
 801caf6:	bf1c      	itt	ne
 801caf8:	1a1b      	subne	r3, r3, r0
 801cafa:	50a3      	strne	r3, [r4, r2]
 801cafc:	e7af      	b.n	801ca5e <_malloc_r+0x22>
 801cafe:	6862      	ldr	r2, [r4, #4]
 801cb00:	42a3      	cmp	r3, r4
 801cb02:	bf0c      	ite	eq
 801cb04:	f8c8 2000 	streq.w	r2, [r8]
 801cb08:	605a      	strne	r2, [r3, #4]
 801cb0a:	e7eb      	b.n	801cae4 <_malloc_r+0xa8>
 801cb0c:	4623      	mov	r3, r4
 801cb0e:	6864      	ldr	r4, [r4, #4]
 801cb10:	e7ae      	b.n	801ca70 <_malloc_r+0x34>
 801cb12:	463c      	mov	r4, r7
 801cb14:	687f      	ldr	r7, [r7, #4]
 801cb16:	e7b6      	b.n	801ca86 <_malloc_r+0x4a>
 801cb18:	461a      	mov	r2, r3
 801cb1a:	685b      	ldr	r3, [r3, #4]
 801cb1c:	42a3      	cmp	r3, r4
 801cb1e:	d1fb      	bne.n	801cb18 <_malloc_r+0xdc>
 801cb20:	2300      	movs	r3, #0
 801cb22:	6053      	str	r3, [r2, #4]
 801cb24:	e7de      	b.n	801cae4 <_malloc_r+0xa8>
 801cb26:	230c      	movs	r3, #12
 801cb28:	6033      	str	r3, [r6, #0]
 801cb2a:	4630      	mov	r0, r6
 801cb2c:	f000 f80c 	bl	801cb48 <__malloc_unlock>
 801cb30:	e794      	b.n	801ca5c <_malloc_r+0x20>
 801cb32:	6005      	str	r5, [r0, #0]
 801cb34:	e7d6      	b.n	801cae4 <_malloc_r+0xa8>
 801cb36:	bf00      	nop
 801cb38:	24036f60 	.word	0x24036f60

0801cb3c <__malloc_lock>:
 801cb3c:	4801      	ldr	r0, [pc, #4]	@ (801cb44 <__malloc_lock+0x8>)
 801cb3e:	f000 b9e8 	b.w	801cf12 <__retarget_lock_acquire_recursive>
 801cb42:	bf00      	nop
 801cb44:	240370a0 	.word	0x240370a0

0801cb48 <__malloc_unlock>:
 801cb48:	4801      	ldr	r0, [pc, #4]	@ (801cb50 <__malloc_unlock+0x8>)
 801cb4a:	f000 b9e3 	b.w	801cf14 <__retarget_lock_release_recursive>
 801cb4e:	bf00      	nop
 801cb50:	240370a0 	.word	0x240370a0

0801cb54 <siprintf>:
 801cb54:	b40e      	push	{r1, r2, r3}
 801cb56:	b510      	push	{r4, lr}
 801cb58:	b09d      	sub	sp, #116	@ 0x74
 801cb5a:	ab1f      	add	r3, sp, #124	@ 0x7c
 801cb5c:	9002      	str	r0, [sp, #8]
 801cb5e:	9006      	str	r0, [sp, #24]
 801cb60:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 801cb64:	480a      	ldr	r0, [pc, #40]	@ (801cb90 <siprintf+0x3c>)
 801cb66:	9107      	str	r1, [sp, #28]
 801cb68:	9104      	str	r1, [sp, #16]
 801cb6a:	490a      	ldr	r1, [pc, #40]	@ (801cb94 <siprintf+0x40>)
 801cb6c:	f853 2b04 	ldr.w	r2, [r3], #4
 801cb70:	9105      	str	r1, [sp, #20]
 801cb72:	2400      	movs	r4, #0
 801cb74:	a902      	add	r1, sp, #8
 801cb76:	6800      	ldr	r0, [r0, #0]
 801cb78:	9301      	str	r3, [sp, #4]
 801cb7a:	941b      	str	r4, [sp, #108]	@ 0x6c
 801cb7c:	f000 fa80 	bl	801d080 <_svfiprintf_r>
 801cb80:	9b02      	ldr	r3, [sp, #8]
 801cb82:	701c      	strb	r4, [r3, #0]
 801cb84:	b01d      	add	sp, #116	@ 0x74
 801cb86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cb8a:	b003      	add	sp, #12
 801cb8c:	4770      	bx	lr
 801cb8e:	bf00      	nop
 801cb90:	24001088 	.word	0x24001088
 801cb94:	ffff0208 	.word	0xffff0208

0801cb98 <std>:
 801cb98:	2300      	movs	r3, #0
 801cb9a:	b510      	push	{r4, lr}
 801cb9c:	4604      	mov	r4, r0
 801cb9e:	e9c0 3300 	strd	r3, r3, [r0]
 801cba2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801cba6:	6083      	str	r3, [r0, #8]
 801cba8:	8181      	strh	r1, [r0, #12]
 801cbaa:	6643      	str	r3, [r0, #100]	@ 0x64
 801cbac:	81c2      	strh	r2, [r0, #14]
 801cbae:	6183      	str	r3, [r0, #24]
 801cbb0:	4619      	mov	r1, r3
 801cbb2:	2208      	movs	r2, #8
 801cbb4:	305c      	adds	r0, #92	@ 0x5c
 801cbb6:	f000 f969 	bl	801ce8c <memset>
 801cbba:	4b0d      	ldr	r3, [pc, #52]	@ (801cbf0 <std+0x58>)
 801cbbc:	6263      	str	r3, [r4, #36]	@ 0x24
 801cbbe:	4b0d      	ldr	r3, [pc, #52]	@ (801cbf4 <std+0x5c>)
 801cbc0:	62a3      	str	r3, [r4, #40]	@ 0x28
 801cbc2:	4b0d      	ldr	r3, [pc, #52]	@ (801cbf8 <std+0x60>)
 801cbc4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801cbc6:	4b0d      	ldr	r3, [pc, #52]	@ (801cbfc <std+0x64>)
 801cbc8:	6323      	str	r3, [r4, #48]	@ 0x30
 801cbca:	4b0d      	ldr	r3, [pc, #52]	@ (801cc00 <std+0x68>)
 801cbcc:	6224      	str	r4, [r4, #32]
 801cbce:	429c      	cmp	r4, r3
 801cbd0:	d006      	beq.n	801cbe0 <std+0x48>
 801cbd2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801cbd6:	4294      	cmp	r4, r2
 801cbd8:	d002      	beq.n	801cbe0 <std+0x48>
 801cbda:	33d0      	adds	r3, #208	@ 0xd0
 801cbdc:	429c      	cmp	r4, r3
 801cbde:	d105      	bne.n	801cbec <std+0x54>
 801cbe0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801cbe4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cbe8:	f000 b992 	b.w	801cf10 <__retarget_lock_init_recursive>
 801cbec:	bd10      	pop	{r4, pc}
 801cbee:	bf00      	nop
 801cbf0:	0801d97d 	.word	0x0801d97d
 801cbf4:	0801d99f 	.word	0x0801d99f
 801cbf8:	0801d9d7 	.word	0x0801d9d7
 801cbfc:	0801d9fb 	.word	0x0801d9fb
 801cc00:	24036f64 	.word	0x24036f64

0801cc04 <stdio_exit_handler>:
 801cc04:	4a02      	ldr	r2, [pc, #8]	@ (801cc10 <stdio_exit_handler+0xc>)
 801cc06:	4903      	ldr	r1, [pc, #12]	@ (801cc14 <stdio_exit_handler+0x10>)
 801cc08:	4803      	ldr	r0, [pc, #12]	@ (801cc18 <stdio_exit_handler+0x14>)
 801cc0a:	f000 b897 	b.w	801cd3c <_fwalk_sglue>
 801cc0e:	bf00      	nop
 801cc10:	2400107c 	.word	0x2400107c
 801cc14:	0801d91d 	.word	0x0801d91d
 801cc18:	2400108c 	.word	0x2400108c

0801cc1c <cleanup_stdio>:
 801cc1c:	6841      	ldr	r1, [r0, #4]
 801cc1e:	4b0c      	ldr	r3, [pc, #48]	@ (801cc50 <cleanup_stdio+0x34>)
 801cc20:	4299      	cmp	r1, r3
 801cc22:	b510      	push	{r4, lr}
 801cc24:	4604      	mov	r4, r0
 801cc26:	d001      	beq.n	801cc2c <cleanup_stdio+0x10>
 801cc28:	f000 fe78 	bl	801d91c <_fflush_r>
 801cc2c:	68a1      	ldr	r1, [r4, #8]
 801cc2e:	4b09      	ldr	r3, [pc, #36]	@ (801cc54 <cleanup_stdio+0x38>)
 801cc30:	4299      	cmp	r1, r3
 801cc32:	d002      	beq.n	801cc3a <cleanup_stdio+0x1e>
 801cc34:	4620      	mov	r0, r4
 801cc36:	f000 fe71 	bl	801d91c <_fflush_r>
 801cc3a:	68e1      	ldr	r1, [r4, #12]
 801cc3c:	4b06      	ldr	r3, [pc, #24]	@ (801cc58 <cleanup_stdio+0x3c>)
 801cc3e:	4299      	cmp	r1, r3
 801cc40:	d004      	beq.n	801cc4c <cleanup_stdio+0x30>
 801cc42:	4620      	mov	r0, r4
 801cc44:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc48:	f000 be68 	b.w	801d91c <_fflush_r>
 801cc4c:	bd10      	pop	{r4, pc}
 801cc4e:	bf00      	nop
 801cc50:	24036f64 	.word	0x24036f64
 801cc54:	24036fcc 	.word	0x24036fcc
 801cc58:	24037034 	.word	0x24037034

0801cc5c <global_stdio_init.part.0>:
 801cc5c:	b510      	push	{r4, lr}
 801cc5e:	4b0b      	ldr	r3, [pc, #44]	@ (801cc8c <global_stdio_init.part.0+0x30>)
 801cc60:	4c0b      	ldr	r4, [pc, #44]	@ (801cc90 <global_stdio_init.part.0+0x34>)
 801cc62:	4a0c      	ldr	r2, [pc, #48]	@ (801cc94 <global_stdio_init.part.0+0x38>)
 801cc64:	601a      	str	r2, [r3, #0]
 801cc66:	4620      	mov	r0, r4
 801cc68:	2200      	movs	r2, #0
 801cc6a:	2104      	movs	r1, #4
 801cc6c:	f7ff ff94 	bl	801cb98 <std>
 801cc70:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801cc74:	2201      	movs	r2, #1
 801cc76:	2109      	movs	r1, #9
 801cc78:	f7ff ff8e 	bl	801cb98 <std>
 801cc7c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801cc80:	2202      	movs	r2, #2
 801cc82:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801cc86:	2112      	movs	r1, #18
 801cc88:	f7ff bf86 	b.w	801cb98 <std>
 801cc8c:	2403709c 	.word	0x2403709c
 801cc90:	24036f64 	.word	0x24036f64
 801cc94:	0801cc05 	.word	0x0801cc05

0801cc98 <__sfp_lock_acquire>:
 801cc98:	4801      	ldr	r0, [pc, #4]	@ (801cca0 <__sfp_lock_acquire+0x8>)
 801cc9a:	f000 b93a 	b.w	801cf12 <__retarget_lock_acquire_recursive>
 801cc9e:	bf00      	nop
 801cca0:	240370a1 	.word	0x240370a1

0801cca4 <__sfp_lock_release>:
 801cca4:	4801      	ldr	r0, [pc, #4]	@ (801ccac <__sfp_lock_release+0x8>)
 801cca6:	f000 b935 	b.w	801cf14 <__retarget_lock_release_recursive>
 801ccaa:	bf00      	nop
 801ccac:	240370a1 	.word	0x240370a1

0801ccb0 <__sinit>:
 801ccb0:	b510      	push	{r4, lr}
 801ccb2:	4604      	mov	r4, r0
 801ccb4:	f7ff fff0 	bl	801cc98 <__sfp_lock_acquire>
 801ccb8:	6a23      	ldr	r3, [r4, #32]
 801ccba:	b11b      	cbz	r3, 801ccc4 <__sinit+0x14>
 801ccbc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801ccc0:	f7ff bff0 	b.w	801cca4 <__sfp_lock_release>
 801ccc4:	4b04      	ldr	r3, [pc, #16]	@ (801ccd8 <__sinit+0x28>)
 801ccc6:	6223      	str	r3, [r4, #32]
 801ccc8:	4b04      	ldr	r3, [pc, #16]	@ (801ccdc <__sinit+0x2c>)
 801ccca:	681b      	ldr	r3, [r3, #0]
 801cccc:	2b00      	cmp	r3, #0
 801ccce:	d1f5      	bne.n	801ccbc <__sinit+0xc>
 801ccd0:	f7ff ffc4 	bl	801cc5c <global_stdio_init.part.0>
 801ccd4:	e7f2      	b.n	801ccbc <__sinit+0xc>
 801ccd6:	bf00      	nop
 801ccd8:	0801cc1d 	.word	0x0801cc1d
 801ccdc:	2403709c 	.word	0x2403709c

0801cce0 <_realloc_r>:
 801cce0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801cce4:	4607      	mov	r7, r0
 801cce6:	4614      	mov	r4, r2
 801cce8:	460d      	mov	r5, r1
 801ccea:	b921      	cbnz	r1, 801ccf6 <_realloc_r+0x16>
 801ccec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ccf0:	4611      	mov	r1, r2
 801ccf2:	f7ff bea3 	b.w	801ca3c <_malloc_r>
 801ccf6:	b92a      	cbnz	r2, 801cd04 <_realloc_r+0x24>
 801ccf8:	f000 f91c 	bl	801cf34 <_free_r>
 801ccfc:	4625      	mov	r5, r4
 801ccfe:	4628      	mov	r0, r5
 801cd00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801cd04:	f000 fe32 	bl	801d96c <_malloc_usable_size_r>
 801cd08:	4284      	cmp	r4, r0
 801cd0a:	4606      	mov	r6, r0
 801cd0c:	d802      	bhi.n	801cd14 <_realloc_r+0x34>
 801cd0e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 801cd12:	d8f4      	bhi.n	801ccfe <_realloc_r+0x1e>
 801cd14:	4621      	mov	r1, r4
 801cd16:	4638      	mov	r0, r7
 801cd18:	f7ff fe90 	bl	801ca3c <_malloc_r>
 801cd1c:	4680      	mov	r8, r0
 801cd1e:	b908      	cbnz	r0, 801cd24 <_realloc_r+0x44>
 801cd20:	4645      	mov	r5, r8
 801cd22:	e7ec      	b.n	801ccfe <_realloc_r+0x1e>
 801cd24:	42b4      	cmp	r4, r6
 801cd26:	4622      	mov	r2, r4
 801cd28:	4629      	mov	r1, r5
 801cd2a:	bf28      	it	cs
 801cd2c:	4632      	movcs	r2, r6
 801cd2e:	f000 f8f2 	bl	801cf16 <memcpy>
 801cd32:	4629      	mov	r1, r5
 801cd34:	4638      	mov	r0, r7
 801cd36:	f000 f8fd 	bl	801cf34 <_free_r>
 801cd3a:	e7f1      	b.n	801cd20 <_realloc_r+0x40>

0801cd3c <_fwalk_sglue>:
 801cd3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801cd40:	4607      	mov	r7, r0
 801cd42:	4688      	mov	r8, r1
 801cd44:	4614      	mov	r4, r2
 801cd46:	2600      	movs	r6, #0
 801cd48:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801cd4c:	f1b9 0901 	subs.w	r9, r9, #1
 801cd50:	d505      	bpl.n	801cd5e <_fwalk_sglue+0x22>
 801cd52:	6824      	ldr	r4, [r4, #0]
 801cd54:	2c00      	cmp	r4, #0
 801cd56:	d1f7      	bne.n	801cd48 <_fwalk_sglue+0xc>
 801cd58:	4630      	mov	r0, r6
 801cd5a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801cd5e:	89ab      	ldrh	r3, [r5, #12]
 801cd60:	2b01      	cmp	r3, #1
 801cd62:	d907      	bls.n	801cd74 <_fwalk_sglue+0x38>
 801cd64:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801cd68:	3301      	adds	r3, #1
 801cd6a:	d003      	beq.n	801cd74 <_fwalk_sglue+0x38>
 801cd6c:	4629      	mov	r1, r5
 801cd6e:	4638      	mov	r0, r7
 801cd70:	47c0      	blx	r8
 801cd72:	4306      	orrs	r6, r0
 801cd74:	3568      	adds	r5, #104	@ 0x68
 801cd76:	e7e9      	b.n	801cd4c <_fwalk_sglue+0x10>

0801cd78 <iprintf>:
 801cd78:	b40f      	push	{r0, r1, r2, r3}
 801cd7a:	b507      	push	{r0, r1, r2, lr}
 801cd7c:	4906      	ldr	r1, [pc, #24]	@ (801cd98 <iprintf+0x20>)
 801cd7e:	ab04      	add	r3, sp, #16
 801cd80:	6808      	ldr	r0, [r1, #0]
 801cd82:	f853 2b04 	ldr.w	r2, [r3], #4
 801cd86:	6881      	ldr	r1, [r0, #8]
 801cd88:	9301      	str	r3, [sp, #4]
 801cd8a:	f000 fa9f 	bl	801d2cc <_vfiprintf_r>
 801cd8e:	b003      	add	sp, #12
 801cd90:	f85d eb04 	ldr.w	lr, [sp], #4
 801cd94:	b004      	add	sp, #16
 801cd96:	4770      	bx	lr
 801cd98:	24001088 	.word	0x24001088

0801cd9c <_puts_r>:
 801cd9c:	6a03      	ldr	r3, [r0, #32]
 801cd9e:	b570      	push	{r4, r5, r6, lr}
 801cda0:	6884      	ldr	r4, [r0, #8]
 801cda2:	4605      	mov	r5, r0
 801cda4:	460e      	mov	r6, r1
 801cda6:	b90b      	cbnz	r3, 801cdac <_puts_r+0x10>
 801cda8:	f7ff ff82 	bl	801ccb0 <__sinit>
 801cdac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cdae:	07db      	lsls	r3, r3, #31
 801cdb0:	d405      	bmi.n	801cdbe <_puts_r+0x22>
 801cdb2:	89a3      	ldrh	r3, [r4, #12]
 801cdb4:	0598      	lsls	r0, r3, #22
 801cdb6:	d402      	bmi.n	801cdbe <_puts_r+0x22>
 801cdb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cdba:	f000 f8aa 	bl	801cf12 <__retarget_lock_acquire_recursive>
 801cdbe:	89a3      	ldrh	r3, [r4, #12]
 801cdc0:	0719      	lsls	r1, r3, #28
 801cdc2:	d502      	bpl.n	801cdca <_puts_r+0x2e>
 801cdc4:	6923      	ldr	r3, [r4, #16]
 801cdc6:	2b00      	cmp	r3, #0
 801cdc8:	d135      	bne.n	801ce36 <_puts_r+0x9a>
 801cdca:	4621      	mov	r1, r4
 801cdcc:	4628      	mov	r0, r5
 801cdce:	f000 fe57 	bl	801da80 <__swsetup_r>
 801cdd2:	b380      	cbz	r0, 801ce36 <_puts_r+0x9a>
 801cdd4:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 801cdd8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801cdda:	07da      	lsls	r2, r3, #31
 801cddc:	d405      	bmi.n	801cdea <_puts_r+0x4e>
 801cdde:	89a3      	ldrh	r3, [r4, #12]
 801cde0:	059b      	lsls	r3, r3, #22
 801cde2:	d402      	bmi.n	801cdea <_puts_r+0x4e>
 801cde4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801cde6:	f000 f895 	bl	801cf14 <__retarget_lock_release_recursive>
 801cdea:	4628      	mov	r0, r5
 801cdec:	bd70      	pop	{r4, r5, r6, pc}
 801cdee:	2b00      	cmp	r3, #0
 801cdf0:	da04      	bge.n	801cdfc <_puts_r+0x60>
 801cdf2:	69a2      	ldr	r2, [r4, #24]
 801cdf4:	429a      	cmp	r2, r3
 801cdf6:	dc17      	bgt.n	801ce28 <_puts_r+0x8c>
 801cdf8:	290a      	cmp	r1, #10
 801cdfa:	d015      	beq.n	801ce28 <_puts_r+0x8c>
 801cdfc:	6823      	ldr	r3, [r4, #0]
 801cdfe:	1c5a      	adds	r2, r3, #1
 801ce00:	6022      	str	r2, [r4, #0]
 801ce02:	7019      	strb	r1, [r3, #0]
 801ce04:	68a3      	ldr	r3, [r4, #8]
 801ce06:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801ce0a:	3b01      	subs	r3, #1
 801ce0c:	60a3      	str	r3, [r4, #8]
 801ce0e:	2900      	cmp	r1, #0
 801ce10:	d1ed      	bne.n	801cdee <_puts_r+0x52>
 801ce12:	2b00      	cmp	r3, #0
 801ce14:	da11      	bge.n	801ce3a <_puts_r+0x9e>
 801ce16:	4622      	mov	r2, r4
 801ce18:	210a      	movs	r1, #10
 801ce1a:	4628      	mov	r0, r5
 801ce1c:	f000 fdf1 	bl	801da02 <__swbuf_r>
 801ce20:	3001      	adds	r0, #1
 801ce22:	d0d7      	beq.n	801cdd4 <_puts_r+0x38>
 801ce24:	250a      	movs	r5, #10
 801ce26:	e7d7      	b.n	801cdd8 <_puts_r+0x3c>
 801ce28:	4622      	mov	r2, r4
 801ce2a:	4628      	mov	r0, r5
 801ce2c:	f000 fde9 	bl	801da02 <__swbuf_r>
 801ce30:	3001      	adds	r0, #1
 801ce32:	d1e7      	bne.n	801ce04 <_puts_r+0x68>
 801ce34:	e7ce      	b.n	801cdd4 <_puts_r+0x38>
 801ce36:	3e01      	subs	r6, #1
 801ce38:	e7e4      	b.n	801ce04 <_puts_r+0x68>
 801ce3a:	6823      	ldr	r3, [r4, #0]
 801ce3c:	1c5a      	adds	r2, r3, #1
 801ce3e:	6022      	str	r2, [r4, #0]
 801ce40:	220a      	movs	r2, #10
 801ce42:	701a      	strb	r2, [r3, #0]
 801ce44:	e7ee      	b.n	801ce24 <_puts_r+0x88>
	...

0801ce48 <puts>:
 801ce48:	4b02      	ldr	r3, [pc, #8]	@ (801ce54 <puts+0xc>)
 801ce4a:	4601      	mov	r1, r0
 801ce4c:	6818      	ldr	r0, [r3, #0]
 801ce4e:	f7ff bfa5 	b.w	801cd9c <_puts_r>
 801ce52:	bf00      	nop
 801ce54:	24001088 	.word	0x24001088

0801ce58 <memmove>:
 801ce58:	4288      	cmp	r0, r1
 801ce5a:	b510      	push	{r4, lr}
 801ce5c:	eb01 0402 	add.w	r4, r1, r2
 801ce60:	d902      	bls.n	801ce68 <memmove+0x10>
 801ce62:	4284      	cmp	r4, r0
 801ce64:	4623      	mov	r3, r4
 801ce66:	d807      	bhi.n	801ce78 <memmove+0x20>
 801ce68:	1e43      	subs	r3, r0, #1
 801ce6a:	42a1      	cmp	r1, r4
 801ce6c:	d008      	beq.n	801ce80 <memmove+0x28>
 801ce6e:	f811 2b01 	ldrb.w	r2, [r1], #1
 801ce72:	f803 2f01 	strb.w	r2, [r3, #1]!
 801ce76:	e7f8      	b.n	801ce6a <memmove+0x12>
 801ce78:	4402      	add	r2, r0
 801ce7a:	4601      	mov	r1, r0
 801ce7c:	428a      	cmp	r2, r1
 801ce7e:	d100      	bne.n	801ce82 <memmove+0x2a>
 801ce80:	bd10      	pop	{r4, pc}
 801ce82:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 801ce86:	f802 4d01 	strb.w	r4, [r2, #-1]!
 801ce8a:	e7f7      	b.n	801ce7c <memmove+0x24>

0801ce8c <memset>:
 801ce8c:	4402      	add	r2, r0
 801ce8e:	4603      	mov	r3, r0
 801ce90:	4293      	cmp	r3, r2
 801ce92:	d100      	bne.n	801ce96 <memset+0xa>
 801ce94:	4770      	bx	lr
 801ce96:	f803 1b01 	strb.w	r1, [r3], #1
 801ce9a:	e7f9      	b.n	801ce90 <memset+0x4>

0801ce9c <_sbrk_r>:
 801ce9c:	b538      	push	{r3, r4, r5, lr}
 801ce9e:	4d06      	ldr	r5, [pc, #24]	@ (801ceb8 <_sbrk_r+0x1c>)
 801cea0:	2300      	movs	r3, #0
 801cea2:	4604      	mov	r4, r0
 801cea4:	4608      	mov	r0, r1
 801cea6:	602b      	str	r3, [r5, #0]
 801cea8:	f7e8 fa0a 	bl	80052c0 <_sbrk>
 801ceac:	1c43      	adds	r3, r0, #1
 801ceae:	d102      	bne.n	801ceb6 <_sbrk_r+0x1a>
 801ceb0:	682b      	ldr	r3, [r5, #0]
 801ceb2:	b103      	cbz	r3, 801ceb6 <_sbrk_r+0x1a>
 801ceb4:	6023      	str	r3, [r4, #0]
 801ceb6:	bd38      	pop	{r3, r4, r5, pc}
 801ceb8:	240370a4 	.word	0x240370a4

0801cebc <__errno>:
 801cebc:	4b01      	ldr	r3, [pc, #4]	@ (801cec4 <__errno+0x8>)
 801cebe:	6818      	ldr	r0, [r3, #0]
 801cec0:	4770      	bx	lr
 801cec2:	bf00      	nop
 801cec4:	24001088 	.word	0x24001088

0801cec8 <__libc_init_array>:
 801cec8:	b570      	push	{r4, r5, r6, lr}
 801ceca:	4d0d      	ldr	r5, [pc, #52]	@ (801cf00 <__libc_init_array+0x38>)
 801cecc:	4c0d      	ldr	r4, [pc, #52]	@ (801cf04 <__libc_init_array+0x3c>)
 801cece:	1b64      	subs	r4, r4, r5
 801ced0:	10a4      	asrs	r4, r4, #2
 801ced2:	2600      	movs	r6, #0
 801ced4:	42a6      	cmp	r6, r4
 801ced6:	d109      	bne.n	801ceec <__libc_init_array+0x24>
 801ced8:	4d0b      	ldr	r5, [pc, #44]	@ (801cf08 <__libc_init_array+0x40>)
 801ceda:	4c0c      	ldr	r4, [pc, #48]	@ (801cf0c <__libc_init_array+0x44>)
 801cedc:	f001 f8b6 	bl	801e04c <_init>
 801cee0:	1b64      	subs	r4, r4, r5
 801cee2:	10a4      	asrs	r4, r4, #2
 801cee4:	2600      	movs	r6, #0
 801cee6:	42a6      	cmp	r6, r4
 801cee8:	d105      	bne.n	801cef6 <__libc_init_array+0x2e>
 801ceea:	bd70      	pop	{r4, r5, r6, pc}
 801ceec:	f855 3b04 	ldr.w	r3, [r5], #4
 801cef0:	4798      	blx	r3
 801cef2:	3601      	adds	r6, #1
 801cef4:	e7ee      	b.n	801ced4 <__libc_init_array+0xc>
 801cef6:	f855 3b04 	ldr.w	r3, [r5], #4
 801cefa:	4798      	blx	r3
 801cefc:	3601      	adds	r6, #1
 801cefe:	e7f2      	b.n	801cee6 <__libc_init_array+0x1e>
 801cf00:	080299b0 	.word	0x080299b0
 801cf04:	080299b0 	.word	0x080299b0
 801cf08:	080299b0 	.word	0x080299b0
 801cf0c:	080299b4 	.word	0x080299b4

0801cf10 <__retarget_lock_init_recursive>:
 801cf10:	4770      	bx	lr

0801cf12 <__retarget_lock_acquire_recursive>:
 801cf12:	4770      	bx	lr

0801cf14 <__retarget_lock_release_recursive>:
 801cf14:	4770      	bx	lr

0801cf16 <memcpy>:
 801cf16:	440a      	add	r2, r1
 801cf18:	4291      	cmp	r1, r2
 801cf1a:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 801cf1e:	d100      	bne.n	801cf22 <memcpy+0xc>
 801cf20:	4770      	bx	lr
 801cf22:	b510      	push	{r4, lr}
 801cf24:	f811 4b01 	ldrb.w	r4, [r1], #1
 801cf28:	f803 4f01 	strb.w	r4, [r3, #1]!
 801cf2c:	4291      	cmp	r1, r2
 801cf2e:	d1f9      	bne.n	801cf24 <memcpy+0xe>
 801cf30:	bd10      	pop	{r4, pc}
	...

0801cf34 <_free_r>:
 801cf34:	b538      	push	{r3, r4, r5, lr}
 801cf36:	4605      	mov	r5, r0
 801cf38:	2900      	cmp	r1, #0
 801cf3a:	d041      	beq.n	801cfc0 <_free_r+0x8c>
 801cf3c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801cf40:	1f0c      	subs	r4, r1, #4
 801cf42:	2b00      	cmp	r3, #0
 801cf44:	bfb8      	it	lt
 801cf46:	18e4      	addlt	r4, r4, r3
 801cf48:	f7ff fdf8 	bl	801cb3c <__malloc_lock>
 801cf4c:	4a1d      	ldr	r2, [pc, #116]	@ (801cfc4 <_free_r+0x90>)
 801cf4e:	6813      	ldr	r3, [r2, #0]
 801cf50:	b933      	cbnz	r3, 801cf60 <_free_r+0x2c>
 801cf52:	6063      	str	r3, [r4, #4]
 801cf54:	6014      	str	r4, [r2, #0]
 801cf56:	4628      	mov	r0, r5
 801cf58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cf5c:	f7ff bdf4 	b.w	801cb48 <__malloc_unlock>
 801cf60:	42a3      	cmp	r3, r4
 801cf62:	d908      	bls.n	801cf76 <_free_r+0x42>
 801cf64:	6820      	ldr	r0, [r4, #0]
 801cf66:	1821      	adds	r1, r4, r0
 801cf68:	428b      	cmp	r3, r1
 801cf6a:	bf01      	itttt	eq
 801cf6c:	6819      	ldreq	r1, [r3, #0]
 801cf6e:	685b      	ldreq	r3, [r3, #4]
 801cf70:	1809      	addeq	r1, r1, r0
 801cf72:	6021      	streq	r1, [r4, #0]
 801cf74:	e7ed      	b.n	801cf52 <_free_r+0x1e>
 801cf76:	461a      	mov	r2, r3
 801cf78:	685b      	ldr	r3, [r3, #4]
 801cf7a:	b10b      	cbz	r3, 801cf80 <_free_r+0x4c>
 801cf7c:	42a3      	cmp	r3, r4
 801cf7e:	d9fa      	bls.n	801cf76 <_free_r+0x42>
 801cf80:	6811      	ldr	r1, [r2, #0]
 801cf82:	1850      	adds	r0, r2, r1
 801cf84:	42a0      	cmp	r0, r4
 801cf86:	d10b      	bne.n	801cfa0 <_free_r+0x6c>
 801cf88:	6820      	ldr	r0, [r4, #0]
 801cf8a:	4401      	add	r1, r0
 801cf8c:	1850      	adds	r0, r2, r1
 801cf8e:	4283      	cmp	r3, r0
 801cf90:	6011      	str	r1, [r2, #0]
 801cf92:	d1e0      	bne.n	801cf56 <_free_r+0x22>
 801cf94:	6818      	ldr	r0, [r3, #0]
 801cf96:	685b      	ldr	r3, [r3, #4]
 801cf98:	6053      	str	r3, [r2, #4]
 801cf9a:	4408      	add	r0, r1
 801cf9c:	6010      	str	r0, [r2, #0]
 801cf9e:	e7da      	b.n	801cf56 <_free_r+0x22>
 801cfa0:	d902      	bls.n	801cfa8 <_free_r+0x74>
 801cfa2:	230c      	movs	r3, #12
 801cfa4:	602b      	str	r3, [r5, #0]
 801cfa6:	e7d6      	b.n	801cf56 <_free_r+0x22>
 801cfa8:	6820      	ldr	r0, [r4, #0]
 801cfaa:	1821      	adds	r1, r4, r0
 801cfac:	428b      	cmp	r3, r1
 801cfae:	bf04      	itt	eq
 801cfb0:	6819      	ldreq	r1, [r3, #0]
 801cfb2:	685b      	ldreq	r3, [r3, #4]
 801cfb4:	6063      	str	r3, [r4, #4]
 801cfb6:	bf04      	itt	eq
 801cfb8:	1809      	addeq	r1, r1, r0
 801cfba:	6021      	streq	r1, [r4, #0]
 801cfbc:	6054      	str	r4, [r2, #4]
 801cfbe:	e7ca      	b.n	801cf56 <_free_r+0x22>
 801cfc0:	bd38      	pop	{r3, r4, r5, pc}
 801cfc2:	bf00      	nop
 801cfc4:	24036f60 	.word	0x24036f60

0801cfc8 <__ssputs_r>:
 801cfc8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfcc:	688e      	ldr	r6, [r1, #8]
 801cfce:	461f      	mov	r7, r3
 801cfd0:	42be      	cmp	r6, r7
 801cfd2:	680b      	ldr	r3, [r1, #0]
 801cfd4:	4682      	mov	sl, r0
 801cfd6:	460c      	mov	r4, r1
 801cfd8:	4690      	mov	r8, r2
 801cfda:	d82d      	bhi.n	801d038 <__ssputs_r+0x70>
 801cfdc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801cfe0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 801cfe4:	d026      	beq.n	801d034 <__ssputs_r+0x6c>
 801cfe6:	6965      	ldr	r5, [r4, #20]
 801cfe8:	6909      	ldr	r1, [r1, #16]
 801cfea:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 801cfee:	eba3 0901 	sub.w	r9, r3, r1
 801cff2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801cff6:	1c7b      	adds	r3, r7, #1
 801cff8:	444b      	add	r3, r9
 801cffa:	106d      	asrs	r5, r5, #1
 801cffc:	429d      	cmp	r5, r3
 801cffe:	bf38      	it	cc
 801d000:	461d      	movcc	r5, r3
 801d002:	0553      	lsls	r3, r2, #21
 801d004:	d527      	bpl.n	801d056 <__ssputs_r+0x8e>
 801d006:	4629      	mov	r1, r5
 801d008:	f7ff fd18 	bl	801ca3c <_malloc_r>
 801d00c:	4606      	mov	r6, r0
 801d00e:	b360      	cbz	r0, 801d06a <__ssputs_r+0xa2>
 801d010:	6921      	ldr	r1, [r4, #16]
 801d012:	464a      	mov	r2, r9
 801d014:	f7ff ff7f 	bl	801cf16 <memcpy>
 801d018:	89a3      	ldrh	r3, [r4, #12]
 801d01a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 801d01e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d022:	81a3      	strh	r3, [r4, #12]
 801d024:	6126      	str	r6, [r4, #16]
 801d026:	6165      	str	r5, [r4, #20]
 801d028:	444e      	add	r6, r9
 801d02a:	eba5 0509 	sub.w	r5, r5, r9
 801d02e:	6026      	str	r6, [r4, #0]
 801d030:	60a5      	str	r5, [r4, #8]
 801d032:	463e      	mov	r6, r7
 801d034:	42be      	cmp	r6, r7
 801d036:	d900      	bls.n	801d03a <__ssputs_r+0x72>
 801d038:	463e      	mov	r6, r7
 801d03a:	6820      	ldr	r0, [r4, #0]
 801d03c:	4632      	mov	r2, r6
 801d03e:	4641      	mov	r1, r8
 801d040:	f7ff ff0a 	bl	801ce58 <memmove>
 801d044:	68a3      	ldr	r3, [r4, #8]
 801d046:	1b9b      	subs	r3, r3, r6
 801d048:	60a3      	str	r3, [r4, #8]
 801d04a:	6823      	ldr	r3, [r4, #0]
 801d04c:	4433      	add	r3, r6
 801d04e:	6023      	str	r3, [r4, #0]
 801d050:	2000      	movs	r0, #0
 801d052:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d056:	462a      	mov	r2, r5
 801d058:	f7ff fe42 	bl	801cce0 <_realloc_r>
 801d05c:	4606      	mov	r6, r0
 801d05e:	2800      	cmp	r0, #0
 801d060:	d1e0      	bne.n	801d024 <__ssputs_r+0x5c>
 801d062:	6921      	ldr	r1, [r4, #16]
 801d064:	4650      	mov	r0, sl
 801d066:	f7ff ff65 	bl	801cf34 <_free_r>
 801d06a:	230c      	movs	r3, #12
 801d06c:	f8ca 3000 	str.w	r3, [sl]
 801d070:	89a3      	ldrh	r3, [r4, #12]
 801d072:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d076:	81a3      	strh	r3, [r4, #12]
 801d078:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d07c:	e7e9      	b.n	801d052 <__ssputs_r+0x8a>
	...

0801d080 <_svfiprintf_r>:
 801d080:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d084:	4698      	mov	r8, r3
 801d086:	898b      	ldrh	r3, [r1, #12]
 801d088:	061b      	lsls	r3, r3, #24
 801d08a:	b09d      	sub	sp, #116	@ 0x74
 801d08c:	4607      	mov	r7, r0
 801d08e:	460d      	mov	r5, r1
 801d090:	4614      	mov	r4, r2
 801d092:	d510      	bpl.n	801d0b6 <_svfiprintf_r+0x36>
 801d094:	690b      	ldr	r3, [r1, #16]
 801d096:	b973      	cbnz	r3, 801d0b6 <_svfiprintf_r+0x36>
 801d098:	2140      	movs	r1, #64	@ 0x40
 801d09a:	f7ff fccf 	bl	801ca3c <_malloc_r>
 801d09e:	6028      	str	r0, [r5, #0]
 801d0a0:	6128      	str	r0, [r5, #16]
 801d0a2:	b930      	cbnz	r0, 801d0b2 <_svfiprintf_r+0x32>
 801d0a4:	230c      	movs	r3, #12
 801d0a6:	603b      	str	r3, [r7, #0]
 801d0a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d0ac:	b01d      	add	sp, #116	@ 0x74
 801d0ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d0b2:	2340      	movs	r3, #64	@ 0x40
 801d0b4:	616b      	str	r3, [r5, #20]
 801d0b6:	2300      	movs	r3, #0
 801d0b8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d0ba:	2320      	movs	r3, #32
 801d0bc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d0c0:	f8cd 800c 	str.w	r8, [sp, #12]
 801d0c4:	2330      	movs	r3, #48	@ 0x30
 801d0c6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 801d264 <_svfiprintf_r+0x1e4>
 801d0ca:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d0ce:	f04f 0901 	mov.w	r9, #1
 801d0d2:	4623      	mov	r3, r4
 801d0d4:	469a      	mov	sl, r3
 801d0d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d0da:	b10a      	cbz	r2, 801d0e0 <_svfiprintf_r+0x60>
 801d0dc:	2a25      	cmp	r2, #37	@ 0x25
 801d0de:	d1f9      	bne.n	801d0d4 <_svfiprintf_r+0x54>
 801d0e0:	ebba 0b04 	subs.w	fp, sl, r4
 801d0e4:	d00b      	beq.n	801d0fe <_svfiprintf_r+0x7e>
 801d0e6:	465b      	mov	r3, fp
 801d0e8:	4622      	mov	r2, r4
 801d0ea:	4629      	mov	r1, r5
 801d0ec:	4638      	mov	r0, r7
 801d0ee:	f7ff ff6b 	bl	801cfc8 <__ssputs_r>
 801d0f2:	3001      	adds	r0, #1
 801d0f4:	f000 80a7 	beq.w	801d246 <_svfiprintf_r+0x1c6>
 801d0f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d0fa:	445a      	add	r2, fp
 801d0fc:	9209      	str	r2, [sp, #36]	@ 0x24
 801d0fe:	f89a 3000 	ldrb.w	r3, [sl]
 801d102:	2b00      	cmp	r3, #0
 801d104:	f000 809f 	beq.w	801d246 <_svfiprintf_r+0x1c6>
 801d108:	2300      	movs	r3, #0
 801d10a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d10e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d112:	f10a 0a01 	add.w	sl, sl, #1
 801d116:	9304      	str	r3, [sp, #16]
 801d118:	9307      	str	r3, [sp, #28]
 801d11a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d11e:	931a      	str	r3, [sp, #104]	@ 0x68
 801d120:	4654      	mov	r4, sl
 801d122:	2205      	movs	r2, #5
 801d124:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d128:	484e      	ldr	r0, [pc, #312]	@ (801d264 <_svfiprintf_r+0x1e4>)
 801d12a:	f7e3 f8d9 	bl	80002e0 <memchr>
 801d12e:	9a04      	ldr	r2, [sp, #16]
 801d130:	b9d8      	cbnz	r0, 801d16a <_svfiprintf_r+0xea>
 801d132:	06d0      	lsls	r0, r2, #27
 801d134:	bf44      	itt	mi
 801d136:	2320      	movmi	r3, #32
 801d138:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d13c:	0711      	lsls	r1, r2, #28
 801d13e:	bf44      	itt	mi
 801d140:	232b      	movmi	r3, #43	@ 0x2b
 801d142:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d146:	f89a 3000 	ldrb.w	r3, [sl]
 801d14a:	2b2a      	cmp	r3, #42	@ 0x2a
 801d14c:	d015      	beq.n	801d17a <_svfiprintf_r+0xfa>
 801d14e:	9a07      	ldr	r2, [sp, #28]
 801d150:	4654      	mov	r4, sl
 801d152:	2000      	movs	r0, #0
 801d154:	f04f 0c0a 	mov.w	ip, #10
 801d158:	4621      	mov	r1, r4
 801d15a:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d15e:	3b30      	subs	r3, #48	@ 0x30
 801d160:	2b09      	cmp	r3, #9
 801d162:	d94b      	bls.n	801d1fc <_svfiprintf_r+0x17c>
 801d164:	b1b0      	cbz	r0, 801d194 <_svfiprintf_r+0x114>
 801d166:	9207      	str	r2, [sp, #28]
 801d168:	e014      	b.n	801d194 <_svfiprintf_r+0x114>
 801d16a:	eba0 0308 	sub.w	r3, r0, r8
 801d16e:	fa09 f303 	lsl.w	r3, r9, r3
 801d172:	4313      	orrs	r3, r2
 801d174:	9304      	str	r3, [sp, #16]
 801d176:	46a2      	mov	sl, r4
 801d178:	e7d2      	b.n	801d120 <_svfiprintf_r+0xa0>
 801d17a:	9b03      	ldr	r3, [sp, #12]
 801d17c:	1d19      	adds	r1, r3, #4
 801d17e:	681b      	ldr	r3, [r3, #0]
 801d180:	9103      	str	r1, [sp, #12]
 801d182:	2b00      	cmp	r3, #0
 801d184:	bfbb      	ittet	lt
 801d186:	425b      	neglt	r3, r3
 801d188:	f042 0202 	orrlt.w	r2, r2, #2
 801d18c:	9307      	strge	r3, [sp, #28]
 801d18e:	9307      	strlt	r3, [sp, #28]
 801d190:	bfb8      	it	lt
 801d192:	9204      	strlt	r2, [sp, #16]
 801d194:	7823      	ldrb	r3, [r4, #0]
 801d196:	2b2e      	cmp	r3, #46	@ 0x2e
 801d198:	d10a      	bne.n	801d1b0 <_svfiprintf_r+0x130>
 801d19a:	7863      	ldrb	r3, [r4, #1]
 801d19c:	2b2a      	cmp	r3, #42	@ 0x2a
 801d19e:	d132      	bne.n	801d206 <_svfiprintf_r+0x186>
 801d1a0:	9b03      	ldr	r3, [sp, #12]
 801d1a2:	1d1a      	adds	r2, r3, #4
 801d1a4:	681b      	ldr	r3, [r3, #0]
 801d1a6:	9203      	str	r2, [sp, #12]
 801d1a8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d1ac:	3402      	adds	r4, #2
 801d1ae:	9305      	str	r3, [sp, #20]
 801d1b0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 801d274 <_svfiprintf_r+0x1f4>
 801d1b4:	7821      	ldrb	r1, [r4, #0]
 801d1b6:	2203      	movs	r2, #3
 801d1b8:	4650      	mov	r0, sl
 801d1ba:	f7e3 f891 	bl	80002e0 <memchr>
 801d1be:	b138      	cbz	r0, 801d1d0 <_svfiprintf_r+0x150>
 801d1c0:	9b04      	ldr	r3, [sp, #16]
 801d1c2:	eba0 000a 	sub.w	r0, r0, sl
 801d1c6:	2240      	movs	r2, #64	@ 0x40
 801d1c8:	4082      	lsls	r2, r0
 801d1ca:	4313      	orrs	r3, r2
 801d1cc:	3401      	adds	r4, #1
 801d1ce:	9304      	str	r3, [sp, #16]
 801d1d0:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d1d4:	4824      	ldr	r0, [pc, #144]	@ (801d268 <_svfiprintf_r+0x1e8>)
 801d1d6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d1da:	2206      	movs	r2, #6
 801d1dc:	f7e3 f880 	bl	80002e0 <memchr>
 801d1e0:	2800      	cmp	r0, #0
 801d1e2:	d036      	beq.n	801d252 <_svfiprintf_r+0x1d2>
 801d1e4:	4b21      	ldr	r3, [pc, #132]	@ (801d26c <_svfiprintf_r+0x1ec>)
 801d1e6:	bb1b      	cbnz	r3, 801d230 <_svfiprintf_r+0x1b0>
 801d1e8:	9b03      	ldr	r3, [sp, #12]
 801d1ea:	3307      	adds	r3, #7
 801d1ec:	f023 0307 	bic.w	r3, r3, #7
 801d1f0:	3308      	adds	r3, #8
 801d1f2:	9303      	str	r3, [sp, #12]
 801d1f4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d1f6:	4433      	add	r3, r6
 801d1f8:	9309      	str	r3, [sp, #36]	@ 0x24
 801d1fa:	e76a      	b.n	801d0d2 <_svfiprintf_r+0x52>
 801d1fc:	fb0c 3202 	mla	r2, ip, r2, r3
 801d200:	460c      	mov	r4, r1
 801d202:	2001      	movs	r0, #1
 801d204:	e7a8      	b.n	801d158 <_svfiprintf_r+0xd8>
 801d206:	2300      	movs	r3, #0
 801d208:	3401      	adds	r4, #1
 801d20a:	9305      	str	r3, [sp, #20]
 801d20c:	4619      	mov	r1, r3
 801d20e:	f04f 0c0a 	mov.w	ip, #10
 801d212:	4620      	mov	r0, r4
 801d214:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d218:	3a30      	subs	r2, #48	@ 0x30
 801d21a:	2a09      	cmp	r2, #9
 801d21c:	d903      	bls.n	801d226 <_svfiprintf_r+0x1a6>
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d0c6      	beq.n	801d1b0 <_svfiprintf_r+0x130>
 801d222:	9105      	str	r1, [sp, #20]
 801d224:	e7c4      	b.n	801d1b0 <_svfiprintf_r+0x130>
 801d226:	fb0c 2101 	mla	r1, ip, r1, r2
 801d22a:	4604      	mov	r4, r0
 801d22c:	2301      	movs	r3, #1
 801d22e:	e7f0      	b.n	801d212 <_svfiprintf_r+0x192>
 801d230:	ab03      	add	r3, sp, #12
 801d232:	9300      	str	r3, [sp, #0]
 801d234:	462a      	mov	r2, r5
 801d236:	4b0e      	ldr	r3, [pc, #56]	@ (801d270 <_svfiprintf_r+0x1f0>)
 801d238:	a904      	add	r1, sp, #16
 801d23a:	4638      	mov	r0, r7
 801d23c:	f3af 8000 	nop.w
 801d240:	1c42      	adds	r2, r0, #1
 801d242:	4606      	mov	r6, r0
 801d244:	d1d6      	bne.n	801d1f4 <_svfiprintf_r+0x174>
 801d246:	89ab      	ldrh	r3, [r5, #12]
 801d248:	065b      	lsls	r3, r3, #25
 801d24a:	f53f af2d 	bmi.w	801d0a8 <_svfiprintf_r+0x28>
 801d24e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d250:	e72c      	b.n	801d0ac <_svfiprintf_r+0x2c>
 801d252:	ab03      	add	r3, sp, #12
 801d254:	9300      	str	r3, [sp, #0]
 801d256:	462a      	mov	r2, r5
 801d258:	4b05      	ldr	r3, [pc, #20]	@ (801d270 <_svfiprintf_r+0x1f0>)
 801d25a:	a904      	add	r1, sp, #16
 801d25c:	4638      	mov	r0, r7
 801d25e:	f000 f9bb 	bl	801d5d8 <_printf_i>
 801d262:	e7ed      	b.n	801d240 <_svfiprintf_r+0x1c0>
 801d264:	08029704 	.word	0x08029704
 801d268:	0802970e 	.word	0x0802970e
 801d26c:	00000000 	.word	0x00000000
 801d270:	0801cfc9 	.word	0x0801cfc9
 801d274:	0802970a 	.word	0x0802970a

0801d278 <__sfputc_r>:
 801d278:	6893      	ldr	r3, [r2, #8]
 801d27a:	3b01      	subs	r3, #1
 801d27c:	2b00      	cmp	r3, #0
 801d27e:	b410      	push	{r4}
 801d280:	6093      	str	r3, [r2, #8]
 801d282:	da08      	bge.n	801d296 <__sfputc_r+0x1e>
 801d284:	6994      	ldr	r4, [r2, #24]
 801d286:	42a3      	cmp	r3, r4
 801d288:	db01      	blt.n	801d28e <__sfputc_r+0x16>
 801d28a:	290a      	cmp	r1, #10
 801d28c:	d103      	bne.n	801d296 <__sfputc_r+0x1e>
 801d28e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d292:	f000 bbb6 	b.w	801da02 <__swbuf_r>
 801d296:	6813      	ldr	r3, [r2, #0]
 801d298:	1c58      	adds	r0, r3, #1
 801d29a:	6010      	str	r0, [r2, #0]
 801d29c:	7019      	strb	r1, [r3, #0]
 801d29e:	4608      	mov	r0, r1
 801d2a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d2a4:	4770      	bx	lr

0801d2a6 <__sfputs_r>:
 801d2a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d2a8:	4606      	mov	r6, r0
 801d2aa:	460f      	mov	r7, r1
 801d2ac:	4614      	mov	r4, r2
 801d2ae:	18d5      	adds	r5, r2, r3
 801d2b0:	42ac      	cmp	r4, r5
 801d2b2:	d101      	bne.n	801d2b8 <__sfputs_r+0x12>
 801d2b4:	2000      	movs	r0, #0
 801d2b6:	e007      	b.n	801d2c8 <__sfputs_r+0x22>
 801d2b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d2bc:	463a      	mov	r2, r7
 801d2be:	4630      	mov	r0, r6
 801d2c0:	f7ff ffda 	bl	801d278 <__sfputc_r>
 801d2c4:	1c43      	adds	r3, r0, #1
 801d2c6:	d1f3      	bne.n	801d2b0 <__sfputs_r+0xa>
 801d2c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d2cc <_vfiprintf_r>:
 801d2cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d2d0:	460d      	mov	r5, r1
 801d2d2:	b09d      	sub	sp, #116	@ 0x74
 801d2d4:	4614      	mov	r4, r2
 801d2d6:	4698      	mov	r8, r3
 801d2d8:	4606      	mov	r6, r0
 801d2da:	b118      	cbz	r0, 801d2e4 <_vfiprintf_r+0x18>
 801d2dc:	6a03      	ldr	r3, [r0, #32]
 801d2de:	b90b      	cbnz	r3, 801d2e4 <_vfiprintf_r+0x18>
 801d2e0:	f7ff fce6 	bl	801ccb0 <__sinit>
 801d2e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d2e6:	07d9      	lsls	r1, r3, #31
 801d2e8:	d405      	bmi.n	801d2f6 <_vfiprintf_r+0x2a>
 801d2ea:	89ab      	ldrh	r3, [r5, #12]
 801d2ec:	059a      	lsls	r2, r3, #22
 801d2ee:	d402      	bmi.n	801d2f6 <_vfiprintf_r+0x2a>
 801d2f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d2f2:	f7ff fe0e 	bl	801cf12 <__retarget_lock_acquire_recursive>
 801d2f6:	89ab      	ldrh	r3, [r5, #12]
 801d2f8:	071b      	lsls	r3, r3, #28
 801d2fa:	d501      	bpl.n	801d300 <_vfiprintf_r+0x34>
 801d2fc:	692b      	ldr	r3, [r5, #16]
 801d2fe:	b99b      	cbnz	r3, 801d328 <_vfiprintf_r+0x5c>
 801d300:	4629      	mov	r1, r5
 801d302:	4630      	mov	r0, r6
 801d304:	f000 fbbc 	bl	801da80 <__swsetup_r>
 801d308:	b170      	cbz	r0, 801d328 <_vfiprintf_r+0x5c>
 801d30a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d30c:	07dc      	lsls	r4, r3, #31
 801d30e:	d504      	bpl.n	801d31a <_vfiprintf_r+0x4e>
 801d310:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d314:	b01d      	add	sp, #116	@ 0x74
 801d316:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801d31a:	89ab      	ldrh	r3, [r5, #12]
 801d31c:	0598      	lsls	r0, r3, #22
 801d31e:	d4f7      	bmi.n	801d310 <_vfiprintf_r+0x44>
 801d320:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d322:	f7ff fdf7 	bl	801cf14 <__retarget_lock_release_recursive>
 801d326:	e7f3      	b.n	801d310 <_vfiprintf_r+0x44>
 801d328:	2300      	movs	r3, #0
 801d32a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d32c:	2320      	movs	r3, #32
 801d32e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801d332:	f8cd 800c 	str.w	r8, [sp, #12]
 801d336:	2330      	movs	r3, #48	@ 0x30
 801d338:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801d4e8 <_vfiprintf_r+0x21c>
 801d33c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801d340:	f04f 0901 	mov.w	r9, #1
 801d344:	4623      	mov	r3, r4
 801d346:	469a      	mov	sl, r3
 801d348:	f813 2b01 	ldrb.w	r2, [r3], #1
 801d34c:	b10a      	cbz	r2, 801d352 <_vfiprintf_r+0x86>
 801d34e:	2a25      	cmp	r2, #37	@ 0x25
 801d350:	d1f9      	bne.n	801d346 <_vfiprintf_r+0x7a>
 801d352:	ebba 0b04 	subs.w	fp, sl, r4
 801d356:	d00b      	beq.n	801d370 <_vfiprintf_r+0xa4>
 801d358:	465b      	mov	r3, fp
 801d35a:	4622      	mov	r2, r4
 801d35c:	4629      	mov	r1, r5
 801d35e:	4630      	mov	r0, r6
 801d360:	f7ff ffa1 	bl	801d2a6 <__sfputs_r>
 801d364:	3001      	adds	r0, #1
 801d366:	f000 80a7 	beq.w	801d4b8 <_vfiprintf_r+0x1ec>
 801d36a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d36c:	445a      	add	r2, fp
 801d36e:	9209      	str	r2, [sp, #36]	@ 0x24
 801d370:	f89a 3000 	ldrb.w	r3, [sl]
 801d374:	2b00      	cmp	r3, #0
 801d376:	f000 809f 	beq.w	801d4b8 <_vfiprintf_r+0x1ec>
 801d37a:	2300      	movs	r3, #0
 801d37c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801d380:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801d384:	f10a 0a01 	add.w	sl, sl, #1
 801d388:	9304      	str	r3, [sp, #16]
 801d38a:	9307      	str	r3, [sp, #28]
 801d38c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801d390:	931a      	str	r3, [sp, #104]	@ 0x68
 801d392:	4654      	mov	r4, sl
 801d394:	2205      	movs	r2, #5
 801d396:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d39a:	4853      	ldr	r0, [pc, #332]	@ (801d4e8 <_vfiprintf_r+0x21c>)
 801d39c:	f7e2 ffa0 	bl	80002e0 <memchr>
 801d3a0:	9a04      	ldr	r2, [sp, #16]
 801d3a2:	b9d8      	cbnz	r0, 801d3dc <_vfiprintf_r+0x110>
 801d3a4:	06d1      	lsls	r1, r2, #27
 801d3a6:	bf44      	itt	mi
 801d3a8:	2320      	movmi	r3, #32
 801d3aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d3ae:	0713      	lsls	r3, r2, #28
 801d3b0:	bf44      	itt	mi
 801d3b2:	232b      	movmi	r3, #43	@ 0x2b
 801d3b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801d3b8:	f89a 3000 	ldrb.w	r3, [sl]
 801d3bc:	2b2a      	cmp	r3, #42	@ 0x2a
 801d3be:	d015      	beq.n	801d3ec <_vfiprintf_r+0x120>
 801d3c0:	9a07      	ldr	r2, [sp, #28]
 801d3c2:	4654      	mov	r4, sl
 801d3c4:	2000      	movs	r0, #0
 801d3c6:	f04f 0c0a 	mov.w	ip, #10
 801d3ca:	4621      	mov	r1, r4
 801d3cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801d3d0:	3b30      	subs	r3, #48	@ 0x30
 801d3d2:	2b09      	cmp	r3, #9
 801d3d4:	d94b      	bls.n	801d46e <_vfiprintf_r+0x1a2>
 801d3d6:	b1b0      	cbz	r0, 801d406 <_vfiprintf_r+0x13a>
 801d3d8:	9207      	str	r2, [sp, #28]
 801d3da:	e014      	b.n	801d406 <_vfiprintf_r+0x13a>
 801d3dc:	eba0 0308 	sub.w	r3, r0, r8
 801d3e0:	fa09 f303 	lsl.w	r3, r9, r3
 801d3e4:	4313      	orrs	r3, r2
 801d3e6:	9304      	str	r3, [sp, #16]
 801d3e8:	46a2      	mov	sl, r4
 801d3ea:	e7d2      	b.n	801d392 <_vfiprintf_r+0xc6>
 801d3ec:	9b03      	ldr	r3, [sp, #12]
 801d3ee:	1d19      	adds	r1, r3, #4
 801d3f0:	681b      	ldr	r3, [r3, #0]
 801d3f2:	9103      	str	r1, [sp, #12]
 801d3f4:	2b00      	cmp	r3, #0
 801d3f6:	bfbb      	ittet	lt
 801d3f8:	425b      	neglt	r3, r3
 801d3fa:	f042 0202 	orrlt.w	r2, r2, #2
 801d3fe:	9307      	strge	r3, [sp, #28]
 801d400:	9307      	strlt	r3, [sp, #28]
 801d402:	bfb8      	it	lt
 801d404:	9204      	strlt	r2, [sp, #16]
 801d406:	7823      	ldrb	r3, [r4, #0]
 801d408:	2b2e      	cmp	r3, #46	@ 0x2e
 801d40a:	d10a      	bne.n	801d422 <_vfiprintf_r+0x156>
 801d40c:	7863      	ldrb	r3, [r4, #1]
 801d40e:	2b2a      	cmp	r3, #42	@ 0x2a
 801d410:	d132      	bne.n	801d478 <_vfiprintf_r+0x1ac>
 801d412:	9b03      	ldr	r3, [sp, #12]
 801d414:	1d1a      	adds	r2, r3, #4
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	9203      	str	r2, [sp, #12]
 801d41a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801d41e:	3402      	adds	r4, #2
 801d420:	9305      	str	r3, [sp, #20]
 801d422:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801d4f8 <_vfiprintf_r+0x22c>
 801d426:	7821      	ldrb	r1, [r4, #0]
 801d428:	2203      	movs	r2, #3
 801d42a:	4650      	mov	r0, sl
 801d42c:	f7e2 ff58 	bl	80002e0 <memchr>
 801d430:	b138      	cbz	r0, 801d442 <_vfiprintf_r+0x176>
 801d432:	9b04      	ldr	r3, [sp, #16]
 801d434:	eba0 000a 	sub.w	r0, r0, sl
 801d438:	2240      	movs	r2, #64	@ 0x40
 801d43a:	4082      	lsls	r2, r0
 801d43c:	4313      	orrs	r3, r2
 801d43e:	3401      	adds	r4, #1
 801d440:	9304      	str	r3, [sp, #16]
 801d442:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d446:	4829      	ldr	r0, [pc, #164]	@ (801d4ec <_vfiprintf_r+0x220>)
 801d448:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801d44c:	2206      	movs	r2, #6
 801d44e:	f7e2 ff47 	bl	80002e0 <memchr>
 801d452:	2800      	cmp	r0, #0
 801d454:	d03f      	beq.n	801d4d6 <_vfiprintf_r+0x20a>
 801d456:	4b26      	ldr	r3, [pc, #152]	@ (801d4f0 <_vfiprintf_r+0x224>)
 801d458:	bb1b      	cbnz	r3, 801d4a2 <_vfiprintf_r+0x1d6>
 801d45a:	9b03      	ldr	r3, [sp, #12]
 801d45c:	3307      	adds	r3, #7
 801d45e:	f023 0307 	bic.w	r3, r3, #7
 801d462:	3308      	adds	r3, #8
 801d464:	9303      	str	r3, [sp, #12]
 801d466:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d468:	443b      	add	r3, r7
 801d46a:	9309      	str	r3, [sp, #36]	@ 0x24
 801d46c:	e76a      	b.n	801d344 <_vfiprintf_r+0x78>
 801d46e:	fb0c 3202 	mla	r2, ip, r2, r3
 801d472:	460c      	mov	r4, r1
 801d474:	2001      	movs	r0, #1
 801d476:	e7a8      	b.n	801d3ca <_vfiprintf_r+0xfe>
 801d478:	2300      	movs	r3, #0
 801d47a:	3401      	adds	r4, #1
 801d47c:	9305      	str	r3, [sp, #20]
 801d47e:	4619      	mov	r1, r3
 801d480:	f04f 0c0a 	mov.w	ip, #10
 801d484:	4620      	mov	r0, r4
 801d486:	f810 2b01 	ldrb.w	r2, [r0], #1
 801d48a:	3a30      	subs	r2, #48	@ 0x30
 801d48c:	2a09      	cmp	r2, #9
 801d48e:	d903      	bls.n	801d498 <_vfiprintf_r+0x1cc>
 801d490:	2b00      	cmp	r3, #0
 801d492:	d0c6      	beq.n	801d422 <_vfiprintf_r+0x156>
 801d494:	9105      	str	r1, [sp, #20]
 801d496:	e7c4      	b.n	801d422 <_vfiprintf_r+0x156>
 801d498:	fb0c 2101 	mla	r1, ip, r1, r2
 801d49c:	4604      	mov	r4, r0
 801d49e:	2301      	movs	r3, #1
 801d4a0:	e7f0      	b.n	801d484 <_vfiprintf_r+0x1b8>
 801d4a2:	ab03      	add	r3, sp, #12
 801d4a4:	9300      	str	r3, [sp, #0]
 801d4a6:	462a      	mov	r2, r5
 801d4a8:	4b12      	ldr	r3, [pc, #72]	@ (801d4f4 <_vfiprintf_r+0x228>)
 801d4aa:	a904      	add	r1, sp, #16
 801d4ac:	4630      	mov	r0, r6
 801d4ae:	f3af 8000 	nop.w
 801d4b2:	4607      	mov	r7, r0
 801d4b4:	1c78      	adds	r0, r7, #1
 801d4b6:	d1d6      	bne.n	801d466 <_vfiprintf_r+0x19a>
 801d4b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801d4ba:	07d9      	lsls	r1, r3, #31
 801d4bc:	d405      	bmi.n	801d4ca <_vfiprintf_r+0x1fe>
 801d4be:	89ab      	ldrh	r3, [r5, #12]
 801d4c0:	059a      	lsls	r2, r3, #22
 801d4c2:	d402      	bmi.n	801d4ca <_vfiprintf_r+0x1fe>
 801d4c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801d4c6:	f7ff fd25 	bl	801cf14 <__retarget_lock_release_recursive>
 801d4ca:	89ab      	ldrh	r3, [r5, #12]
 801d4cc:	065b      	lsls	r3, r3, #25
 801d4ce:	f53f af1f 	bmi.w	801d310 <_vfiprintf_r+0x44>
 801d4d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801d4d4:	e71e      	b.n	801d314 <_vfiprintf_r+0x48>
 801d4d6:	ab03      	add	r3, sp, #12
 801d4d8:	9300      	str	r3, [sp, #0]
 801d4da:	462a      	mov	r2, r5
 801d4dc:	4b05      	ldr	r3, [pc, #20]	@ (801d4f4 <_vfiprintf_r+0x228>)
 801d4de:	a904      	add	r1, sp, #16
 801d4e0:	4630      	mov	r0, r6
 801d4e2:	f000 f879 	bl	801d5d8 <_printf_i>
 801d4e6:	e7e4      	b.n	801d4b2 <_vfiprintf_r+0x1e6>
 801d4e8:	08029704 	.word	0x08029704
 801d4ec:	0802970e 	.word	0x0802970e
 801d4f0:	00000000 	.word	0x00000000
 801d4f4:	0801d2a7 	.word	0x0801d2a7
 801d4f8:	0802970a 	.word	0x0802970a

0801d4fc <_printf_common>:
 801d4fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801d500:	4616      	mov	r6, r2
 801d502:	4698      	mov	r8, r3
 801d504:	688a      	ldr	r2, [r1, #8]
 801d506:	690b      	ldr	r3, [r1, #16]
 801d508:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801d50c:	4293      	cmp	r3, r2
 801d50e:	bfb8      	it	lt
 801d510:	4613      	movlt	r3, r2
 801d512:	6033      	str	r3, [r6, #0]
 801d514:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801d518:	4607      	mov	r7, r0
 801d51a:	460c      	mov	r4, r1
 801d51c:	b10a      	cbz	r2, 801d522 <_printf_common+0x26>
 801d51e:	3301      	adds	r3, #1
 801d520:	6033      	str	r3, [r6, #0]
 801d522:	6823      	ldr	r3, [r4, #0]
 801d524:	0699      	lsls	r1, r3, #26
 801d526:	bf42      	ittt	mi
 801d528:	6833      	ldrmi	r3, [r6, #0]
 801d52a:	3302      	addmi	r3, #2
 801d52c:	6033      	strmi	r3, [r6, #0]
 801d52e:	6825      	ldr	r5, [r4, #0]
 801d530:	f015 0506 	ands.w	r5, r5, #6
 801d534:	d106      	bne.n	801d544 <_printf_common+0x48>
 801d536:	f104 0a19 	add.w	sl, r4, #25
 801d53a:	68e3      	ldr	r3, [r4, #12]
 801d53c:	6832      	ldr	r2, [r6, #0]
 801d53e:	1a9b      	subs	r3, r3, r2
 801d540:	42ab      	cmp	r3, r5
 801d542:	dc26      	bgt.n	801d592 <_printf_common+0x96>
 801d544:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d548:	6822      	ldr	r2, [r4, #0]
 801d54a:	3b00      	subs	r3, #0
 801d54c:	bf18      	it	ne
 801d54e:	2301      	movne	r3, #1
 801d550:	0692      	lsls	r2, r2, #26
 801d552:	d42b      	bmi.n	801d5ac <_printf_common+0xb0>
 801d554:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d558:	4641      	mov	r1, r8
 801d55a:	4638      	mov	r0, r7
 801d55c:	47c8      	blx	r9
 801d55e:	3001      	adds	r0, #1
 801d560:	d01e      	beq.n	801d5a0 <_printf_common+0xa4>
 801d562:	6823      	ldr	r3, [r4, #0]
 801d564:	6922      	ldr	r2, [r4, #16]
 801d566:	f003 0306 	and.w	r3, r3, #6
 801d56a:	2b04      	cmp	r3, #4
 801d56c:	bf02      	ittt	eq
 801d56e:	68e5      	ldreq	r5, [r4, #12]
 801d570:	6833      	ldreq	r3, [r6, #0]
 801d572:	1aed      	subeq	r5, r5, r3
 801d574:	68a3      	ldr	r3, [r4, #8]
 801d576:	bf0c      	ite	eq
 801d578:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d57c:	2500      	movne	r5, #0
 801d57e:	4293      	cmp	r3, r2
 801d580:	bfc4      	itt	gt
 801d582:	1a9b      	subgt	r3, r3, r2
 801d584:	18ed      	addgt	r5, r5, r3
 801d586:	2600      	movs	r6, #0
 801d588:	341a      	adds	r4, #26
 801d58a:	42b5      	cmp	r5, r6
 801d58c:	d11a      	bne.n	801d5c4 <_printf_common+0xc8>
 801d58e:	2000      	movs	r0, #0
 801d590:	e008      	b.n	801d5a4 <_printf_common+0xa8>
 801d592:	2301      	movs	r3, #1
 801d594:	4652      	mov	r2, sl
 801d596:	4641      	mov	r1, r8
 801d598:	4638      	mov	r0, r7
 801d59a:	47c8      	blx	r9
 801d59c:	3001      	adds	r0, #1
 801d59e:	d103      	bne.n	801d5a8 <_printf_common+0xac>
 801d5a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d5a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d5a8:	3501      	adds	r5, #1
 801d5aa:	e7c6      	b.n	801d53a <_printf_common+0x3e>
 801d5ac:	18e1      	adds	r1, r4, r3
 801d5ae:	1c5a      	adds	r2, r3, #1
 801d5b0:	2030      	movs	r0, #48	@ 0x30
 801d5b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d5b6:	4422      	add	r2, r4
 801d5b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d5bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d5c0:	3302      	adds	r3, #2
 801d5c2:	e7c7      	b.n	801d554 <_printf_common+0x58>
 801d5c4:	2301      	movs	r3, #1
 801d5c6:	4622      	mov	r2, r4
 801d5c8:	4641      	mov	r1, r8
 801d5ca:	4638      	mov	r0, r7
 801d5cc:	47c8      	blx	r9
 801d5ce:	3001      	adds	r0, #1
 801d5d0:	d0e6      	beq.n	801d5a0 <_printf_common+0xa4>
 801d5d2:	3601      	adds	r6, #1
 801d5d4:	e7d9      	b.n	801d58a <_printf_common+0x8e>
	...

0801d5d8 <_printf_i>:
 801d5d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d5dc:	7e0f      	ldrb	r7, [r1, #24]
 801d5de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d5e0:	2f78      	cmp	r7, #120	@ 0x78
 801d5e2:	4691      	mov	r9, r2
 801d5e4:	4680      	mov	r8, r0
 801d5e6:	460c      	mov	r4, r1
 801d5e8:	469a      	mov	sl, r3
 801d5ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d5ee:	d807      	bhi.n	801d600 <_printf_i+0x28>
 801d5f0:	2f62      	cmp	r7, #98	@ 0x62
 801d5f2:	d80a      	bhi.n	801d60a <_printf_i+0x32>
 801d5f4:	2f00      	cmp	r7, #0
 801d5f6:	f000 80d1 	beq.w	801d79c <_printf_i+0x1c4>
 801d5fa:	2f58      	cmp	r7, #88	@ 0x58
 801d5fc:	f000 80b8 	beq.w	801d770 <_printf_i+0x198>
 801d600:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d604:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d608:	e03a      	b.n	801d680 <_printf_i+0xa8>
 801d60a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d60e:	2b15      	cmp	r3, #21
 801d610:	d8f6      	bhi.n	801d600 <_printf_i+0x28>
 801d612:	a101      	add	r1, pc, #4	@ (adr r1, 801d618 <_printf_i+0x40>)
 801d614:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d618:	0801d671 	.word	0x0801d671
 801d61c:	0801d685 	.word	0x0801d685
 801d620:	0801d601 	.word	0x0801d601
 801d624:	0801d601 	.word	0x0801d601
 801d628:	0801d601 	.word	0x0801d601
 801d62c:	0801d601 	.word	0x0801d601
 801d630:	0801d685 	.word	0x0801d685
 801d634:	0801d601 	.word	0x0801d601
 801d638:	0801d601 	.word	0x0801d601
 801d63c:	0801d601 	.word	0x0801d601
 801d640:	0801d601 	.word	0x0801d601
 801d644:	0801d783 	.word	0x0801d783
 801d648:	0801d6af 	.word	0x0801d6af
 801d64c:	0801d73d 	.word	0x0801d73d
 801d650:	0801d601 	.word	0x0801d601
 801d654:	0801d601 	.word	0x0801d601
 801d658:	0801d7a5 	.word	0x0801d7a5
 801d65c:	0801d601 	.word	0x0801d601
 801d660:	0801d6af 	.word	0x0801d6af
 801d664:	0801d601 	.word	0x0801d601
 801d668:	0801d601 	.word	0x0801d601
 801d66c:	0801d745 	.word	0x0801d745
 801d670:	6833      	ldr	r3, [r6, #0]
 801d672:	1d1a      	adds	r2, r3, #4
 801d674:	681b      	ldr	r3, [r3, #0]
 801d676:	6032      	str	r2, [r6, #0]
 801d678:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d67c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d680:	2301      	movs	r3, #1
 801d682:	e09c      	b.n	801d7be <_printf_i+0x1e6>
 801d684:	6833      	ldr	r3, [r6, #0]
 801d686:	6820      	ldr	r0, [r4, #0]
 801d688:	1d19      	adds	r1, r3, #4
 801d68a:	6031      	str	r1, [r6, #0]
 801d68c:	0606      	lsls	r6, r0, #24
 801d68e:	d501      	bpl.n	801d694 <_printf_i+0xbc>
 801d690:	681d      	ldr	r5, [r3, #0]
 801d692:	e003      	b.n	801d69c <_printf_i+0xc4>
 801d694:	0645      	lsls	r5, r0, #25
 801d696:	d5fb      	bpl.n	801d690 <_printf_i+0xb8>
 801d698:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d69c:	2d00      	cmp	r5, #0
 801d69e:	da03      	bge.n	801d6a8 <_printf_i+0xd0>
 801d6a0:	232d      	movs	r3, #45	@ 0x2d
 801d6a2:	426d      	negs	r5, r5
 801d6a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d6a8:	4858      	ldr	r0, [pc, #352]	@ (801d80c <_printf_i+0x234>)
 801d6aa:	230a      	movs	r3, #10
 801d6ac:	e011      	b.n	801d6d2 <_printf_i+0xfa>
 801d6ae:	6821      	ldr	r1, [r4, #0]
 801d6b0:	6833      	ldr	r3, [r6, #0]
 801d6b2:	0608      	lsls	r0, r1, #24
 801d6b4:	f853 5b04 	ldr.w	r5, [r3], #4
 801d6b8:	d402      	bmi.n	801d6c0 <_printf_i+0xe8>
 801d6ba:	0649      	lsls	r1, r1, #25
 801d6bc:	bf48      	it	mi
 801d6be:	b2ad      	uxthmi	r5, r5
 801d6c0:	2f6f      	cmp	r7, #111	@ 0x6f
 801d6c2:	4852      	ldr	r0, [pc, #328]	@ (801d80c <_printf_i+0x234>)
 801d6c4:	6033      	str	r3, [r6, #0]
 801d6c6:	bf14      	ite	ne
 801d6c8:	230a      	movne	r3, #10
 801d6ca:	2308      	moveq	r3, #8
 801d6cc:	2100      	movs	r1, #0
 801d6ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d6d2:	6866      	ldr	r6, [r4, #4]
 801d6d4:	60a6      	str	r6, [r4, #8]
 801d6d6:	2e00      	cmp	r6, #0
 801d6d8:	db05      	blt.n	801d6e6 <_printf_i+0x10e>
 801d6da:	6821      	ldr	r1, [r4, #0]
 801d6dc:	432e      	orrs	r6, r5
 801d6de:	f021 0104 	bic.w	r1, r1, #4
 801d6e2:	6021      	str	r1, [r4, #0]
 801d6e4:	d04b      	beq.n	801d77e <_printf_i+0x1a6>
 801d6e6:	4616      	mov	r6, r2
 801d6e8:	fbb5 f1f3 	udiv	r1, r5, r3
 801d6ec:	fb03 5711 	mls	r7, r3, r1, r5
 801d6f0:	5dc7      	ldrb	r7, [r0, r7]
 801d6f2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d6f6:	462f      	mov	r7, r5
 801d6f8:	42bb      	cmp	r3, r7
 801d6fa:	460d      	mov	r5, r1
 801d6fc:	d9f4      	bls.n	801d6e8 <_printf_i+0x110>
 801d6fe:	2b08      	cmp	r3, #8
 801d700:	d10b      	bne.n	801d71a <_printf_i+0x142>
 801d702:	6823      	ldr	r3, [r4, #0]
 801d704:	07df      	lsls	r7, r3, #31
 801d706:	d508      	bpl.n	801d71a <_printf_i+0x142>
 801d708:	6923      	ldr	r3, [r4, #16]
 801d70a:	6861      	ldr	r1, [r4, #4]
 801d70c:	4299      	cmp	r1, r3
 801d70e:	bfde      	ittt	le
 801d710:	2330      	movle	r3, #48	@ 0x30
 801d712:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d716:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 801d71a:	1b92      	subs	r2, r2, r6
 801d71c:	6122      	str	r2, [r4, #16]
 801d71e:	f8cd a000 	str.w	sl, [sp]
 801d722:	464b      	mov	r3, r9
 801d724:	aa03      	add	r2, sp, #12
 801d726:	4621      	mov	r1, r4
 801d728:	4640      	mov	r0, r8
 801d72a:	f7ff fee7 	bl	801d4fc <_printf_common>
 801d72e:	3001      	adds	r0, #1
 801d730:	d14a      	bne.n	801d7c8 <_printf_i+0x1f0>
 801d732:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d736:	b004      	add	sp, #16
 801d738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d73c:	6823      	ldr	r3, [r4, #0]
 801d73e:	f043 0320 	orr.w	r3, r3, #32
 801d742:	6023      	str	r3, [r4, #0]
 801d744:	4832      	ldr	r0, [pc, #200]	@ (801d810 <_printf_i+0x238>)
 801d746:	2778      	movs	r7, #120	@ 0x78
 801d748:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d74c:	6823      	ldr	r3, [r4, #0]
 801d74e:	6831      	ldr	r1, [r6, #0]
 801d750:	061f      	lsls	r7, r3, #24
 801d752:	f851 5b04 	ldr.w	r5, [r1], #4
 801d756:	d402      	bmi.n	801d75e <_printf_i+0x186>
 801d758:	065f      	lsls	r7, r3, #25
 801d75a:	bf48      	it	mi
 801d75c:	b2ad      	uxthmi	r5, r5
 801d75e:	6031      	str	r1, [r6, #0]
 801d760:	07d9      	lsls	r1, r3, #31
 801d762:	bf44      	itt	mi
 801d764:	f043 0320 	orrmi.w	r3, r3, #32
 801d768:	6023      	strmi	r3, [r4, #0]
 801d76a:	b11d      	cbz	r5, 801d774 <_printf_i+0x19c>
 801d76c:	2310      	movs	r3, #16
 801d76e:	e7ad      	b.n	801d6cc <_printf_i+0xf4>
 801d770:	4826      	ldr	r0, [pc, #152]	@ (801d80c <_printf_i+0x234>)
 801d772:	e7e9      	b.n	801d748 <_printf_i+0x170>
 801d774:	6823      	ldr	r3, [r4, #0]
 801d776:	f023 0320 	bic.w	r3, r3, #32
 801d77a:	6023      	str	r3, [r4, #0]
 801d77c:	e7f6      	b.n	801d76c <_printf_i+0x194>
 801d77e:	4616      	mov	r6, r2
 801d780:	e7bd      	b.n	801d6fe <_printf_i+0x126>
 801d782:	6833      	ldr	r3, [r6, #0]
 801d784:	6825      	ldr	r5, [r4, #0]
 801d786:	6961      	ldr	r1, [r4, #20]
 801d788:	1d18      	adds	r0, r3, #4
 801d78a:	6030      	str	r0, [r6, #0]
 801d78c:	062e      	lsls	r6, r5, #24
 801d78e:	681b      	ldr	r3, [r3, #0]
 801d790:	d501      	bpl.n	801d796 <_printf_i+0x1be>
 801d792:	6019      	str	r1, [r3, #0]
 801d794:	e002      	b.n	801d79c <_printf_i+0x1c4>
 801d796:	0668      	lsls	r0, r5, #25
 801d798:	d5fb      	bpl.n	801d792 <_printf_i+0x1ba>
 801d79a:	8019      	strh	r1, [r3, #0]
 801d79c:	2300      	movs	r3, #0
 801d79e:	6123      	str	r3, [r4, #16]
 801d7a0:	4616      	mov	r6, r2
 801d7a2:	e7bc      	b.n	801d71e <_printf_i+0x146>
 801d7a4:	6833      	ldr	r3, [r6, #0]
 801d7a6:	1d1a      	adds	r2, r3, #4
 801d7a8:	6032      	str	r2, [r6, #0]
 801d7aa:	681e      	ldr	r6, [r3, #0]
 801d7ac:	6862      	ldr	r2, [r4, #4]
 801d7ae:	2100      	movs	r1, #0
 801d7b0:	4630      	mov	r0, r6
 801d7b2:	f7e2 fd95 	bl	80002e0 <memchr>
 801d7b6:	b108      	cbz	r0, 801d7bc <_printf_i+0x1e4>
 801d7b8:	1b80      	subs	r0, r0, r6
 801d7ba:	6060      	str	r0, [r4, #4]
 801d7bc:	6863      	ldr	r3, [r4, #4]
 801d7be:	6123      	str	r3, [r4, #16]
 801d7c0:	2300      	movs	r3, #0
 801d7c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d7c6:	e7aa      	b.n	801d71e <_printf_i+0x146>
 801d7c8:	6923      	ldr	r3, [r4, #16]
 801d7ca:	4632      	mov	r2, r6
 801d7cc:	4649      	mov	r1, r9
 801d7ce:	4640      	mov	r0, r8
 801d7d0:	47d0      	blx	sl
 801d7d2:	3001      	adds	r0, #1
 801d7d4:	d0ad      	beq.n	801d732 <_printf_i+0x15a>
 801d7d6:	6823      	ldr	r3, [r4, #0]
 801d7d8:	079b      	lsls	r3, r3, #30
 801d7da:	d413      	bmi.n	801d804 <_printf_i+0x22c>
 801d7dc:	68e0      	ldr	r0, [r4, #12]
 801d7de:	9b03      	ldr	r3, [sp, #12]
 801d7e0:	4298      	cmp	r0, r3
 801d7e2:	bfb8      	it	lt
 801d7e4:	4618      	movlt	r0, r3
 801d7e6:	e7a6      	b.n	801d736 <_printf_i+0x15e>
 801d7e8:	2301      	movs	r3, #1
 801d7ea:	4632      	mov	r2, r6
 801d7ec:	4649      	mov	r1, r9
 801d7ee:	4640      	mov	r0, r8
 801d7f0:	47d0      	blx	sl
 801d7f2:	3001      	adds	r0, #1
 801d7f4:	d09d      	beq.n	801d732 <_printf_i+0x15a>
 801d7f6:	3501      	adds	r5, #1
 801d7f8:	68e3      	ldr	r3, [r4, #12]
 801d7fa:	9903      	ldr	r1, [sp, #12]
 801d7fc:	1a5b      	subs	r3, r3, r1
 801d7fe:	42ab      	cmp	r3, r5
 801d800:	dcf2      	bgt.n	801d7e8 <_printf_i+0x210>
 801d802:	e7eb      	b.n	801d7dc <_printf_i+0x204>
 801d804:	2500      	movs	r5, #0
 801d806:	f104 0619 	add.w	r6, r4, #25
 801d80a:	e7f5      	b.n	801d7f8 <_printf_i+0x220>
 801d80c:	08029715 	.word	0x08029715
 801d810:	08029726 	.word	0x08029726

0801d814 <__sflush_r>:
 801d814:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d818:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d81c:	0716      	lsls	r6, r2, #28
 801d81e:	4605      	mov	r5, r0
 801d820:	460c      	mov	r4, r1
 801d822:	d454      	bmi.n	801d8ce <__sflush_r+0xba>
 801d824:	684b      	ldr	r3, [r1, #4]
 801d826:	2b00      	cmp	r3, #0
 801d828:	dc02      	bgt.n	801d830 <__sflush_r+0x1c>
 801d82a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d82c:	2b00      	cmp	r3, #0
 801d82e:	dd48      	ble.n	801d8c2 <__sflush_r+0xae>
 801d830:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d832:	2e00      	cmp	r6, #0
 801d834:	d045      	beq.n	801d8c2 <__sflush_r+0xae>
 801d836:	2300      	movs	r3, #0
 801d838:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d83c:	682f      	ldr	r7, [r5, #0]
 801d83e:	6a21      	ldr	r1, [r4, #32]
 801d840:	602b      	str	r3, [r5, #0]
 801d842:	d030      	beq.n	801d8a6 <__sflush_r+0x92>
 801d844:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d846:	89a3      	ldrh	r3, [r4, #12]
 801d848:	0759      	lsls	r1, r3, #29
 801d84a:	d505      	bpl.n	801d858 <__sflush_r+0x44>
 801d84c:	6863      	ldr	r3, [r4, #4]
 801d84e:	1ad2      	subs	r2, r2, r3
 801d850:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d852:	b10b      	cbz	r3, 801d858 <__sflush_r+0x44>
 801d854:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d856:	1ad2      	subs	r2, r2, r3
 801d858:	2300      	movs	r3, #0
 801d85a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d85c:	6a21      	ldr	r1, [r4, #32]
 801d85e:	4628      	mov	r0, r5
 801d860:	47b0      	blx	r6
 801d862:	1c43      	adds	r3, r0, #1
 801d864:	89a3      	ldrh	r3, [r4, #12]
 801d866:	d106      	bne.n	801d876 <__sflush_r+0x62>
 801d868:	6829      	ldr	r1, [r5, #0]
 801d86a:	291d      	cmp	r1, #29
 801d86c:	d82b      	bhi.n	801d8c6 <__sflush_r+0xb2>
 801d86e:	4a2a      	ldr	r2, [pc, #168]	@ (801d918 <__sflush_r+0x104>)
 801d870:	40ca      	lsrs	r2, r1
 801d872:	07d6      	lsls	r6, r2, #31
 801d874:	d527      	bpl.n	801d8c6 <__sflush_r+0xb2>
 801d876:	2200      	movs	r2, #0
 801d878:	6062      	str	r2, [r4, #4]
 801d87a:	04d9      	lsls	r1, r3, #19
 801d87c:	6922      	ldr	r2, [r4, #16]
 801d87e:	6022      	str	r2, [r4, #0]
 801d880:	d504      	bpl.n	801d88c <__sflush_r+0x78>
 801d882:	1c42      	adds	r2, r0, #1
 801d884:	d101      	bne.n	801d88a <__sflush_r+0x76>
 801d886:	682b      	ldr	r3, [r5, #0]
 801d888:	b903      	cbnz	r3, 801d88c <__sflush_r+0x78>
 801d88a:	6560      	str	r0, [r4, #84]	@ 0x54
 801d88c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d88e:	602f      	str	r7, [r5, #0]
 801d890:	b1b9      	cbz	r1, 801d8c2 <__sflush_r+0xae>
 801d892:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d896:	4299      	cmp	r1, r3
 801d898:	d002      	beq.n	801d8a0 <__sflush_r+0x8c>
 801d89a:	4628      	mov	r0, r5
 801d89c:	f7ff fb4a 	bl	801cf34 <_free_r>
 801d8a0:	2300      	movs	r3, #0
 801d8a2:	6363      	str	r3, [r4, #52]	@ 0x34
 801d8a4:	e00d      	b.n	801d8c2 <__sflush_r+0xae>
 801d8a6:	2301      	movs	r3, #1
 801d8a8:	4628      	mov	r0, r5
 801d8aa:	47b0      	blx	r6
 801d8ac:	4602      	mov	r2, r0
 801d8ae:	1c50      	adds	r0, r2, #1
 801d8b0:	d1c9      	bne.n	801d846 <__sflush_r+0x32>
 801d8b2:	682b      	ldr	r3, [r5, #0]
 801d8b4:	2b00      	cmp	r3, #0
 801d8b6:	d0c6      	beq.n	801d846 <__sflush_r+0x32>
 801d8b8:	2b1d      	cmp	r3, #29
 801d8ba:	d001      	beq.n	801d8c0 <__sflush_r+0xac>
 801d8bc:	2b16      	cmp	r3, #22
 801d8be:	d11e      	bne.n	801d8fe <__sflush_r+0xea>
 801d8c0:	602f      	str	r7, [r5, #0]
 801d8c2:	2000      	movs	r0, #0
 801d8c4:	e022      	b.n	801d90c <__sflush_r+0xf8>
 801d8c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d8ca:	b21b      	sxth	r3, r3
 801d8cc:	e01b      	b.n	801d906 <__sflush_r+0xf2>
 801d8ce:	690f      	ldr	r7, [r1, #16]
 801d8d0:	2f00      	cmp	r7, #0
 801d8d2:	d0f6      	beq.n	801d8c2 <__sflush_r+0xae>
 801d8d4:	0793      	lsls	r3, r2, #30
 801d8d6:	680e      	ldr	r6, [r1, #0]
 801d8d8:	bf08      	it	eq
 801d8da:	694b      	ldreq	r3, [r1, #20]
 801d8dc:	600f      	str	r7, [r1, #0]
 801d8de:	bf18      	it	ne
 801d8e0:	2300      	movne	r3, #0
 801d8e2:	eba6 0807 	sub.w	r8, r6, r7
 801d8e6:	608b      	str	r3, [r1, #8]
 801d8e8:	f1b8 0f00 	cmp.w	r8, #0
 801d8ec:	dde9      	ble.n	801d8c2 <__sflush_r+0xae>
 801d8ee:	6a21      	ldr	r1, [r4, #32]
 801d8f0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d8f2:	4643      	mov	r3, r8
 801d8f4:	463a      	mov	r2, r7
 801d8f6:	4628      	mov	r0, r5
 801d8f8:	47b0      	blx	r6
 801d8fa:	2800      	cmp	r0, #0
 801d8fc:	dc08      	bgt.n	801d910 <__sflush_r+0xfc>
 801d8fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d902:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d906:	81a3      	strh	r3, [r4, #12]
 801d908:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d910:	4407      	add	r7, r0
 801d912:	eba8 0800 	sub.w	r8, r8, r0
 801d916:	e7e7      	b.n	801d8e8 <__sflush_r+0xd4>
 801d918:	20400001 	.word	0x20400001

0801d91c <_fflush_r>:
 801d91c:	b538      	push	{r3, r4, r5, lr}
 801d91e:	690b      	ldr	r3, [r1, #16]
 801d920:	4605      	mov	r5, r0
 801d922:	460c      	mov	r4, r1
 801d924:	b913      	cbnz	r3, 801d92c <_fflush_r+0x10>
 801d926:	2500      	movs	r5, #0
 801d928:	4628      	mov	r0, r5
 801d92a:	bd38      	pop	{r3, r4, r5, pc}
 801d92c:	b118      	cbz	r0, 801d936 <_fflush_r+0x1a>
 801d92e:	6a03      	ldr	r3, [r0, #32]
 801d930:	b90b      	cbnz	r3, 801d936 <_fflush_r+0x1a>
 801d932:	f7ff f9bd 	bl	801ccb0 <__sinit>
 801d936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d93a:	2b00      	cmp	r3, #0
 801d93c:	d0f3      	beq.n	801d926 <_fflush_r+0xa>
 801d93e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d940:	07d0      	lsls	r0, r2, #31
 801d942:	d404      	bmi.n	801d94e <_fflush_r+0x32>
 801d944:	0599      	lsls	r1, r3, #22
 801d946:	d402      	bmi.n	801d94e <_fflush_r+0x32>
 801d948:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d94a:	f7ff fae2 	bl	801cf12 <__retarget_lock_acquire_recursive>
 801d94e:	4628      	mov	r0, r5
 801d950:	4621      	mov	r1, r4
 801d952:	f7ff ff5f 	bl	801d814 <__sflush_r>
 801d956:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d958:	07da      	lsls	r2, r3, #31
 801d95a:	4605      	mov	r5, r0
 801d95c:	d4e4      	bmi.n	801d928 <_fflush_r+0xc>
 801d95e:	89a3      	ldrh	r3, [r4, #12]
 801d960:	059b      	lsls	r3, r3, #22
 801d962:	d4e1      	bmi.n	801d928 <_fflush_r+0xc>
 801d964:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d966:	f7ff fad5 	bl	801cf14 <__retarget_lock_release_recursive>
 801d96a:	e7dd      	b.n	801d928 <_fflush_r+0xc>

0801d96c <_malloc_usable_size_r>:
 801d96c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d970:	1f18      	subs	r0, r3, #4
 801d972:	2b00      	cmp	r3, #0
 801d974:	bfbc      	itt	lt
 801d976:	580b      	ldrlt	r3, [r1, r0]
 801d978:	18c0      	addlt	r0, r0, r3
 801d97a:	4770      	bx	lr

0801d97c <__sread>:
 801d97c:	b510      	push	{r4, lr}
 801d97e:	460c      	mov	r4, r1
 801d980:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d984:	f000 f956 	bl	801dc34 <_read_r>
 801d988:	2800      	cmp	r0, #0
 801d98a:	bfab      	itete	ge
 801d98c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801d98e:	89a3      	ldrhlt	r3, [r4, #12]
 801d990:	181b      	addge	r3, r3, r0
 801d992:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801d996:	bfac      	ite	ge
 801d998:	6563      	strge	r3, [r4, #84]	@ 0x54
 801d99a:	81a3      	strhlt	r3, [r4, #12]
 801d99c:	bd10      	pop	{r4, pc}

0801d99e <__swrite>:
 801d99e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d9a2:	461f      	mov	r7, r3
 801d9a4:	898b      	ldrh	r3, [r1, #12]
 801d9a6:	05db      	lsls	r3, r3, #23
 801d9a8:	4605      	mov	r5, r0
 801d9aa:	460c      	mov	r4, r1
 801d9ac:	4616      	mov	r6, r2
 801d9ae:	d505      	bpl.n	801d9bc <__swrite+0x1e>
 801d9b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9b4:	2302      	movs	r3, #2
 801d9b6:	2200      	movs	r2, #0
 801d9b8:	f000 f92a 	bl	801dc10 <_lseek_r>
 801d9bc:	89a3      	ldrh	r3, [r4, #12]
 801d9be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d9c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801d9c6:	81a3      	strh	r3, [r4, #12]
 801d9c8:	4632      	mov	r2, r6
 801d9ca:	463b      	mov	r3, r7
 801d9cc:	4628      	mov	r0, r5
 801d9ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d9d2:	f000 b941 	b.w	801dc58 <_write_r>

0801d9d6 <__sseek>:
 801d9d6:	b510      	push	{r4, lr}
 801d9d8:	460c      	mov	r4, r1
 801d9da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9de:	f000 f917 	bl	801dc10 <_lseek_r>
 801d9e2:	1c43      	adds	r3, r0, #1
 801d9e4:	89a3      	ldrh	r3, [r4, #12]
 801d9e6:	bf15      	itete	ne
 801d9e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 801d9ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801d9ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801d9f2:	81a3      	strheq	r3, [r4, #12]
 801d9f4:	bf18      	it	ne
 801d9f6:	81a3      	strhne	r3, [r4, #12]
 801d9f8:	bd10      	pop	{r4, pc}

0801d9fa <__sclose>:
 801d9fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d9fe:	f000 b93d 	b.w	801dc7c <_close_r>

0801da02 <__swbuf_r>:
 801da02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801da04:	460e      	mov	r6, r1
 801da06:	4614      	mov	r4, r2
 801da08:	4605      	mov	r5, r0
 801da0a:	b118      	cbz	r0, 801da14 <__swbuf_r+0x12>
 801da0c:	6a03      	ldr	r3, [r0, #32]
 801da0e:	b90b      	cbnz	r3, 801da14 <__swbuf_r+0x12>
 801da10:	f7ff f94e 	bl	801ccb0 <__sinit>
 801da14:	69a3      	ldr	r3, [r4, #24]
 801da16:	60a3      	str	r3, [r4, #8]
 801da18:	89a3      	ldrh	r3, [r4, #12]
 801da1a:	071a      	lsls	r2, r3, #28
 801da1c:	d501      	bpl.n	801da22 <__swbuf_r+0x20>
 801da1e:	6923      	ldr	r3, [r4, #16]
 801da20:	b943      	cbnz	r3, 801da34 <__swbuf_r+0x32>
 801da22:	4621      	mov	r1, r4
 801da24:	4628      	mov	r0, r5
 801da26:	f000 f82b 	bl	801da80 <__swsetup_r>
 801da2a:	b118      	cbz	r0, 801da34 <__swbuf_r+0x32>
 801da2c:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 801da30:	4638      	mov	r0, r7
 801da32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801da34:	6823      	ldr	r3, [r4, #0]
 801da36:	6922      	ldr	r2, [r4, #16]
 801da38:	1a98      	subs	r0, r3, r2
 801da3a:	6963      	ldr	r3, [r4, #20]
 801da3c:	b2f6      	uxtb	r6, r6
 801da3e:	4283      	cmp	r3, r0
 801da40:	4637      	mov	r7, r6
 801da42:	dc05      	bgt.n	801da50 <__swbuf_r+0x4e>
 801da44:	4621      	mov	r1, r4
 801da46:	4628      	mov	r0, r5
 801da48:	f7ff ff68 	bl	801d91c <_fflush_r>
 801da4c:	2800      	cmp	r0, #0
 801da4e:	d1ed      	bne.n	801da2c <__swbuf_r+0x2a>
 801da50:	68a3      	ldr	r3, [r4, #8]
 801da52:	3b01      	subs	r3, #1
 801da54:	60a3      	str	r3, [r4, #8]
 801da56:	6823      	ldr	r3, [r4, #0]
 801da58:	1c5a      	adds	r2, r3, #1
 801da5a:	6022      	str	r2, [r4, #0]
 801da5c:	701e      	strb	r6, [r3, #0]
 801da5e:	6962      	ldr	r2, [r4, #20]
 801da60:	1c43      	adds	r3, r0, #1
 801da62:	429a      	cmp	r2, r3
 801da64:	d004      	beq.n	801da70 <__swbuf_r+0x6e>
 801da66:	89a3      	ldrh	r3, [r4, #12]
 801da68:	07db      	lsls	r3, r3, #31
 801da6a:	d5e1      	bpl.n	801da30 <__swbuf_r+0x2e>
 801da6c:	2e0a      	cmp	r6, #10
 801da6e:	d1df      	bne.n	801da30 <__swbuf_r+0x2e>
 801da70:	4621      	mov	r1, r4
 801da72:	4628      	mov	r0, r5
 801da74:	f7ff ff52 	bl	801d91c <_fflush_r>
 801da78:	2800      	cmp	r0, #0
 801da7a:	d0d9      	beq.n	801da30 <__swbuf_r+0x2e>
 801da7c:	e7d6      	b.n	801da2c <__swbuf_r+0x2a>
	...

0801da80 <__swsetup_r>:
 801da80:	b538      	push	{r3, r4, r5, lr}
 801da82:	4b29      	ldr	r3, [pc, #164]	@ (801db28 <__swsetup_r+0xa8>)
 801da84:	4605      	mov	r5, r0
 801da86:	6818      	ldr	r0, [r3, #0]
 801da88:	460c      	mov	r4, r1
 801da8a:	b118      	cbz	r0, 801da94 <__swsetup_r+0x14>
 801da8c:	6a03      	ldr	r3, [r0, #32]
 801da8e:	b90b      	cbnz	r3, 801da94 <__swsetup_r+0x14>
 801da90:	f7ff f90e 	bl	801ccb0 <__sinit>
 801da94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801da98:	0719      	lsls	r1, r3, #28
 801da9a:	d422      	bmi.n	801dae2 <__swsetup_r+0x62>
 801da9c:	06da      	lsls	r2, r3, #27
 801da9e:	d407      	bmi.n	801dab0 <__swsetup_r+0x30>
 801daa0:	2209      	movs	r2, #9
 801daa2:	602a      	str	r2, [r5, #0]
 801daa4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801daa8:	81a3      	strh	r3, [r4, #12]
 801daaa:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801daae:	e033      	b.n	801db18 <__swsetup_r+0x98>
 801dab0:	0758      	lsls	r0, r3, #29
 801dab2:	d512      	bpl.n	801dada <__swsetup_r+0x5a>
 801dab4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801dab6:	b141      	cbz	r1, 801daca <__swsetup_r+0x4a>
 801dab8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801dabc:	4299      	cmp	r1, r3
 801dabe:	d002      	beq.n	801dac6 <__swsetup_r+0x46>
 801dac0:	4628      	mov	r0, r5
 801dac2:	f7ff fa37 	bl	801cf34 <_free_r>
 801dac6:	2300      	movs	r3, #0
 801dac8:	6363      	str	r3, [r4, #52]	@ 0x34
 801daca:	89a3      	ldrh	r3, [r4, #12]
 801dacc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801dad0:	81a3      	strh	r3, [r4, #12]
 801dad2:	2300      	movs	r3, #0
 801dad4:	6063      	str	r3, [r4, #4]
 801dad6:	6923      	ldr	r3, [r4, #16]
 801dad8:	6023      	str	r3, [r4, #0]
 801dada:	89a3      	ldrh	r3, [r4, #12]
 801dadc:	f043 0308 	orr.w	r3, r3, #8
 801dae0:	81a3      	strh	r3, [r4, #12]
 801dae2:	6923      	ldr	r3, [r4, #16]
 801dae4:	b94b      	cbnz	r3, 801dafa <__swsetup_r+0x7a>
 801dae6:	89a3      	ldrh	r3, [r4, #12]
 801dae8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801daec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801daf0:	d003      	beq.n	801dafa <__swsetup_r+0x7a>
 801daf2:	4621      	mov	r1, r4
 801daf4:	4628      	mov	r0, r5
 801daf6:	f000 f83f 	bl	801db78 <__smakebuf_r>
 801dafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dafe:	f013 0201 	ands.w	r2, r3, #1
 801db02:	d00a      	beq.n	801db1a <__swsetup_r+0x9a>
 801db04:	2200      	movs	r2, #0
 801db06:	60a2      	str	r2, [r4, #8]
 801db08:	6962      	ldr	r2, [r4, #20]
 801db0a:	4252      	negs	r2, r2
 801db0c:	61a2      	str	r2, [r4, #24]
 801db0e:	6922      	ldr	r2, [r4, #16]
 801db10:	b942      	cbnz	r2, 801db24 <__swsetup_r+0xa4>
 801db12:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801db16:	d1c5      	bne.n	801daa4 <__swsetup_r+0x24>
 801db18:	bd38      	pop	{r3, r4, r5, pc}
 801db1a:	0799      	lsls	r1, r3, #30
 801db1c:	bf58      	it	pl
 801db1e:	6962      	ldrpl	r2, [r4, #20]
 801db20:	60a2      	str	r2, [r4, #8]
 801db22:	e7f4      	b.n	801db0e <__swsetup_r+0x8e>
 801db24:	2000      	movs	r0, #0
 801db26:	e7f7      	b.n	801db18 <__swsetup_r+0x98>
 801db28:	24001088 	.word	0x24001088

0801db2c <__swhatbuf_r>:
 801db2c:	b570      	push	{r4, r5, r6, lr}
 801db2e:	460c      	mov	r4, r1
 801db30:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801db34:	2900      	cmp	r1, #0
 801db36:	b096      	sub	sp, #88	@ 0x58
 801db38:	4615      	mov	r5, r2
 801db3a:	461e      	mov	r6, r3
 801db3c:	da0d      	bge.n	801db5a <__swhatbuf_r+0x2e>
 801db3e:	89a3      	ldrh	r3, [r4, #12]
 801db40:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801db44:	f04f 0100 	mov.w	r1, #0
 801db48:	bf14      	ite	ne
 801db4a:	2340      	movne	r3, #64	@ 0x40
 801db4c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801db50:	2000      	movs	r0, #0
 801db52:	6031      	str	r1, [r6, #0]
 801db54:	602b      	str	r3, [r5, #0]
 801db56:	b016      	add	sp, #88	@ 0x58
 801db58:	bd70      	pop	{r4, r5, r6, pc}
 801db5a:	466a      	mov	r2, sp
 801db5c:	f000 f89e 	bl	801dc9c <_fstat_r>
 801db60:	2800      	cmp	r0, #0
 801db62:	dbec      	blt.n	801db3e <__swhatbuf_r+0x12>
 801db64:	9901      	ldr	r1, [sp, #4]
 801db66:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801db6a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801db6e:	4259      	negs	r1, r3
 801db70:	4159      	adcs	r1, r3
 801db72:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801db76:	e7eb      	b.n	801db50 <__swhatbuf_r+0x24>

0801db78 <__smakebuf_r>:
 801db78:	898b      	ldrh	r3, [r1, #12]
 801db7a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db7c:	079d      	lsls	r5, r3, #30
 801db7e:	4606      	mov	r6, r0
 801db80:	460c      	mov	r4, r1
 801db82:	d507      	bpl.n	801db94 <__smakebuf_r+0x1c>
 801db84:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801db88:	6023      	str	r3, [r4, #0]
 801db8a:	6123      	str	r3, [r4, #16]
 801db8c:	2301      	movs	r3, #1
 801db8e:	6163      	str	r3, [r4, #20]
 801db90:	b003      	add	sp, #12
 801db92:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801db94:	ab01      	add	r3, sp, #4
 801db96:	466a      	mov	r2, sp
 801db98:	f7ff ffc8 	bl	801db2c <__swhatbuf_r>
 801db9c:	9f00      	ldr	r7, [sp, #0]
 801db9e:	4605      	mov	r5, r0
 801dba0:	4639      	mov	r1, r7
 801dba2:	4630      	mov	r0, r6
 801dba4:	f7fe ff4a 	bl	801ca3c <_malloc_r>
 801dba8:	b948      	cbnz	r0, 801dbbe <__smakebuf_r+0x46>
 801dbaa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801dbae:	059a      	lsls	r2, r3, #22
 801dbb0:	d4ee      	bmi.n	801db90 <__smakebuf_r+0x18>
 801dbb2:	f023 0303 	bic.w	r3, r3, #3
 801dbb6:	f043 0302 	orr.w	r3, r3, #2
 801dbba:	81a3      	strh	r3, [r4, #12]
 801dbbc:	e7e2      	b.n	801db84 <__smakebuf_r+0xc>
 801dbbe:	89a3      	ldrh	r3, [r4, #12]
 801dbc0:	6020      	str	r0, [r4, #0]
 801dbc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801dbc6:	81a3      	strh	r3, [r4, #12]
 801dbc8:	9b01      	ldr	r3, [sp, #4]
 801dbca:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801dbce:	b15b      	cbz	r3, 801dbe8 <__smakebuf_r+0x70>
 801dbd0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801dbd4:	4630      	mov	r0, r6
 801dbd6:	f000 f80b 	bl	801dbf0 <_isatty_r>
 801dbda:	b128      	cbz	r0, 801dbe8 <__smakebuf_r+0x70>
 801dbdc:	89a3      	ldrh	r3, [r4, #12]
 801dbde:	f023 0303 	bic.w	r3, r3, #3
 801dbe2:	f043 0301 	orr.w	r3, r3, #1
 801dbe6:	81a3      	strh	r3, [r4, #12]
 801dbe8:	89a3      	ldrh	r3, [r4, #12]
 801dbea:	431d      	orrs	r5, r3
 801dbec:	81a5      	strh	r5, [r4, #12]
 801dbee:	e7cf      	b.n	801db90 <__smakebuf_r+0x18>

0801dbf0 <_isatty_r>:
 801dbf0:	b538      	push	{r3, r4, r5, lr}
 801dbf2:	4d06      	ldr	r5, [pc, #24]	@ (801dc0c <_isatty_r+0x1c>)
 801dbf4:	2300      	movs	r3, #0
 801dbf6:	4604      	mov	r4, r0
 801dbf8:	4608      	mov	r0, r1
 801dbfa:	602b      	str	r3, [r5, #0]
 801dbfc:	f7e7 fb48 	bl	8005290 <_isatty>
 801dc00:	1c43      	adds	r3, r0, #1
 801dc02:	d102      	bne.n	801dc0a <_isatty_r+0x1a>
 801dc04:	682b      	ldr	r3, [r5, #0]
 801dc06:	b103      	cbz	r3, 801dc0a <_isatty_r+0x1a>
 801dc08:	6023      	str	r3, [r4, #0]
 801dc0a:	bd38      	pop	{r3, r4, r5, pc}
 801dc0c:	240370a4 	.word	0x240370a4

0801dc10 <_lseek_r>:
 801dc10:	b538      	push	{r3, r4, r5, lr}
 801dc12:	4d07      	ldr	r5, [pc, #28]	@ (801dc30 <_lseek_r+0x20>)
 801dc14:	4604      	mov	r4, r0
 801dc16:	4608      	mov	r0, r1
 801dc18:	4611      	mov	r1, r2
 801dc1a:	2200      	movs	r2, #0
 801dc1c:	602a      	str	r2, [r5, #0]
 801dc1e:	461a      	mov	r2, r3
 801dc20:	f7e7 fb41 	bl	80052a6 <_lseek>
 801dc24:	1c43      	adds	r3, r0, #1
 801dc26:	d102      	bne.n	801dc2e <_lseek_r+0x1e>
 801dc28:	682b      	ldr	r3, [r5, #0]
 801dc2a:	b103      	cbz	r3, 801dc2e <_lseek_r+0x1e>
 801dc2c:	6023      	str	r3, [r4, #0]
 801dc2e:	bd38      	pop	{r3, r4, r5, pc}
 801dc30:	240370a4 	.word	0x240370a4

0801dc34 <_read_r>:
 801dc34:	b538      	push	{r3, r4, r5, lr}
 801dc36:	4d07      	ldr	r5, [pc, #28]	@ (801dc54 <_read_r+0x20>)
 801dc38:	4604      	mov	r4, r0
 801dc3a:	4608      	mov	r0, r1
 801dc3c:	4611      	mov	r1, r2
 801dc3e:	2200      	movs	r2, #0
 801dc40:	602a      	str	r2, [r5, #0]
 801dc42:	461a      	mov	r2, r3
 801dc44:	f7e7 faeb 	bl	800521e <_read>
 801dc48:	1c43      	adds	r3, r0, #1
 801dc4a:	d102      	bne.n	801dc52 <_read_r+0x1e>
 801dc4c:	682b      	ldr	r3, [r5, #0]
 801dc4e:	b103      	cbz	r3, 801dc52 <_read_r+0x1e>
 801dc50:	6023      	str	r3, [r4, #0]
 801dc52:	bd38      	pop	{r3, r4, r5, pc}
 801dc54:	240370a4 	.word	0x240370a4

0801dc58 <_write_r>:
 801dc58:	b538      	push	{r3, r4, r5, lr}
 801dc5a:	4d07      	ldr	r5, [pc, #28]	@ (801dc78 <_write_r+0x20>)
 801dc5c:	4604      	mov	r4, r0
 801dc5e:	4608      	mov	r0, r1
 801dc60:	4611      	mov	r1, r2
 801dc62:	2200      	movs	r2, #0
 801dc64:	602a      	str	r2, [r5, #0]
 801dc66:	461a      	mov	r2, r3
 801dc68:	f7f8 fc2e 	bl	80164c8 <_write>
 801dc6c:	1c43      	adds	r3, r0, #1
 801dc6e:	d102      	bne.n	801dc76 <_write_r+0x1e>
 801dc70:	682b      	ldr	r3, [r5, #0]
 801dc72:	b103      	cbz	r3, 801dc76 <_write_r+0x1e>
 801dc74:	6023      	str	r3, [r4, #0]
 801dc76:	bd38      	pop	{r3, r4, r5, pc}
 801dc78:	240370a4 	.word	0x240370a4

0801dc7c <_close_r>:
 801dc7c:	b538      	push	{r3, r4, r5, lr}
 801dc7e:	4d06      	ldr	r5, [pc, #24]	@ (801dc98 <_close_r+0x1c>)
 801dc80:	2300      	movs	r3, #0
 801dc82:	4604      	mov	r4, r0
 801dc84:	4608      	mov	r0, r1
 801dc86:	602b      	str	r3, [r5, #0]
 801dc88:	f7e7 fae6 	bl	8005258 <_close>
 801dc8c:	1c43      	adds	r3, r0, #1
 801dc8e:	d102      	bne.n	801dc96 <_close_r+0x1a>
 801dc90:	682b      	ldr	r3, [r5, #0]
 801dc92:	b103      	cbz	r3, 801dc96 <_close_r+0x1a>
 801dc94:	6023      	str	r3, [r4, #0]
 801dc96:	bd38      	pop	{r3, r4, r5, pc}
 801dc98:	240370a4 	.word	0x240370a4

0801dc9c <_fstat_r>:
 801dc9c:	b538      	push	{r3, r4, r5, lr}
 801dc9e:	4d07      	ldr	r5, [pc, #28]	@ (801dcbc <_fstat_r+0x20>)
 801dca0:	2300      	movs	r3, #0
 801dca2:	4604      	mov	r4, r0
 801dca4:	4608      	mov	r0, r1
 801dca6:	4611      	mov	r1, r2
 801dca8:	602b      	str	r3, [r5, #0]
 801dcaa:	f7e7 fae1 	bl	8005270 <_fstat>
 801dcae:	1c43      	adds	r3, r0, #1
 801dcb0:	d102      	bne.n	801dcb8 <_fstat_r+0x1c>
 801dcb2:	682b      	ldr	r3, [r5, #0]
 801dcb4:	b103      	cbz	r3, 801dcb8 <_fstat_r+0x1c>
 801dcb6:	6023      	str	r3, [r4, #0]
 801dcb8:	bd38      	pop	{r3, r4, r5, pc}
 801dcba:	bf00      	nop
 801dcbc:	240370a4 	.word	0x240370a4

0801dcc0 <checkint>:
 801dcc0:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 801dcc4:	2b7e      	cmp	r3, #126	@ 0x7e
 801dcc6:	d910      	bls.n	801dcea <checkint+0x2a>
 801dcc8:	2b96      	cmp	r3, #150	@ 0x96
 801dcca:	d80c      	bhi.n	801dce6 <checkint+0x26>
 801dccc:	2201      	movs	r2, #1
 801dcce:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 801dcd2:	fa02 f303 	lsl.w	r3, r2, r3
 801dcd6:	1e5a      	subs	r2, r3, #1
 801dcd8:	4202      	tst	r2, r0
 801dcda:	d106      	bne.n	801dcea <checkint+0x2a>
 801dcdc:	4203      	tst	r3, r0
 801dcde:	bf14      	ite	ne
 801dce0:	2001      	movne	r0, #1
 801dce2:	2002      	moveq	r0, #2
 801dce4:	4770      	bx	lr
 801dce6:	2002      	movs	r0, #2
 801dce8:	4770      	bx	lr
 801dcea:	2000      	movs	r0, #0
 801dcec:	4770      	bx	lr
	...

0801dcf0 <powf>:
 801dcf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dcf2:	ee10 1a10 	vmov	r1, s0
 801dcf6:	ee10 4a90 	vmov	r4, s1
 801dcfa:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 801dcfe:	0063      	lsls	r3, r4, #1
 801dd00:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 801dd04:	eef0 7a40 	vmov.f32	s15, s0
 801dd08:	eeb0 7a60 	vmov.f32	s14, s1
 801dd0c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 801dd10:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 801dd14:	d252      	bcs.n	801ddbc <powf+0xcc>
 801dd16:	4290      	cmp	r0, r2
 801dd18:	d258      	bcs.n	801ddcc <powf+0xdc>
 801dd1a:	2000      	movs	r0, #0
 801dd1c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 801dd20:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 801dd24:	4a9e      	ldr	r2, [pc, #632]	@ (801dfa0 <powf+0x2b0>)
 801dd26:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 801dd2a:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801dd2e:	f36f 0316 	bfc	r3, #0, #23
 801dd32:	1ac9      	subs	r1, r1, r3
 801dd34:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 801dd38:	ee07 1a90 	vmov	s15, r1
 801dd3c:	ed94 5b02 	vldr	d5, [r4, #8]
 801dd40:	ed94 4b00 	vldr	d4, [r4]
 801dd44:	15db      	asrs	r3, r3, #23
 801dd46:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801dd4a:	ee07 3a90 	vmov	s15, r3
 801dd4e:	eea4 2b06 	vfma.f64	d2, d4, d6
 801dd52:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 801dd56:	ee22 4b02 	vmul.f64	d4, d2, d2
 801dd5a:	ee24 0b04 	vmul.f64	d0, d4, d4
 801dd5e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 801dd62:	ee36 6b05 	vadd.f64	d6, d6, d5
 801dd66:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 801dd6a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 801dd6e:	eea2 1b05 	vfma.f64	d1, d2, d5
 801dd72:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 801dd76:	eea2 5b03 	vfma.f64	d5, d2, d3
 801dd7a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 801dd7e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 801dd82:	eea2 6b03 	vfma.f64	d6, d2, d3
 801dd86:	eea4 6b05 	vfma.f64	d6, d4, d5
 801dd8a:	eea1 6b00 	vfma.f64	d6, d1, d0
 801dd8e:	ee27 7b06 	vmul.f64	d7, d7, d6
 801dd92:	ee17 3a90 	vmov	r3, s15
 801dd96:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 801dd9a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 801dd9e:	429a      	cmp	r2, r3
 801dda0:	f0c0 8098 	bcc.w	801ded4 <powf+0x1e4>
 801dda4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 801df80 <powf+0x290>
 801dda8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801ddac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ddb0:	dd79      	ble.n	801dea6 <powf+0x1b6>
 801ddb2:	b003      	add	sp, #12
 801ddb4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801ddb8:	f000 b920 	b.w	801dffc <__math_oflowf>
 801ddbc:	4290      	cmp	r0, r2
 801ddbe:	d330      	bcc.n	801de22 <powf+0x132>
 801ddc0:	b12b      	cbz	r3, 801ddce <powf+0xde>
 801ddc2:	0049      	lsls	r1, r1, #1
 801ddc4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 801ddc8:	d808      	bhi.n	801dddc <powf+0xec>
 801ddca:	e015      	b.n	801ddf8 <powf+0x108>
 801ddcc:	b953      	cbnz	r3, 801dde4 <powf+0xf4>
 801ddce:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 801ddd2:	0049      	lsls	r1, r1, #1
 801ddd4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 801ddd8:	f240 80ca 	bls.w	801df70 <powf+0x280>
 801dddc:	ee37 0a87 	vadd.f32	s0, s15, s14
 801dde0:	b003      	add	sp, #12
 801dde2:	bd30      	pop	{r4, r5, pc}
 801dde4:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 801dde8:	d105      	bne.n	801ddf6 <powf+0x106>
 801ddea:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801ddee:	0064      	lsls	r4, r4, #1
 801ddf0:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 801ddf4:	e7f0      	b.n	801ddd8 <powf+0xe8>
 801ddf6:	0049      	lsls	r1, r1, #1
 801ddf8:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 801ddfc:	d1ee      	bne.n	801dddc <powf+0xec>
 801ddfe:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801de02:	f000 80b5 	beq.w	801df70 <powf+0x280>
 801de06:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801de0a:	ea6f 0404 	mvn.w	r4, r4
 801de0e:	bf34      	ite	cc
 801de10:	2100      	movcc	r1, #0
 801de12:	2101      	movcs	r1, #1
 801de14:	0fe4      	lsrs	r4, r4, #31
 801de16:	42a1      	cmp	r1, r4
 801de18:	f040 80ad 	bne.w	801df76 <powf+0x286>
 801de1c:	ee27 0a07 	vmul.f32	s0, s14, s14
 801de20:	e7de      	b.n	801dde0 <powf+0xf0>
 801de22:	004d      	lsls	r5, r1, #1
 801de24:	1e6b      	subs	r3, r5, #1
 801de26:	4293      	cmp	r3, r2
 801de28:	d31b      	bcc.n	801de62 <powf+0x172>
 801de2a:	2900      	cmp	r1, #0
 801de2c:	ee20 0a00 	vmul.f32	s0, s0, s0
 801de30:	da0e      	bge.n	801de50 <powf+0x160>
 801de32:	4620      	mov	r0, r4
 801de34:	f7ff ff44 	bl	801dcc0 <checkint>
 801de38:	2801      	cmp	r0, #1
 801de3a:	d109      	bne.n	801de50 <powf+0x160>
 801de3c:	eeb1 0a40 	vneg.f32	s0, s0
 801de40:	b945      	cbnz	r5, 801de54 <powf+0x164>
 801de42:	2c00      	cmp	r4, #0
 801de44:	dacc      	bge.n	801dde0 <powf+0xf0>
 801de46:	b003      	add	sp, #12
 801de48:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de4c:	f000 b8dc 	b.w	801e008 <__math_divzerof>
 801de50:	2000      	movs	r0, #0
 801de52:	e7f5      	b.n	801de40 <powf+0x150>
 801de54:	2c00      	cmp	r4, #0
 801de56:	dac3      	bge.n	801dde0 <powf+0xf0>
 801de58:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801de5c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801de60:	e7be      	b.n	801dde0 <powf+0xf0>
 801de62:	2900      	cmp	r1, #0
 801de64:	da1d      	bge.n	801dea2 <powf+0x1b2>
 801de66:	4620      	mov	r0, r4
 801de68:	f7ff ff2a 	bl	801dcc0 <checkint>
 801de6c:	b920      	cbnz	r0, 801de78 <powf+0x188>
 801de6e:	b003      	add	sp, #12
 801de70:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801de74:	f000 b8da 	b.w	801e02c <__math_invalidf>
 801de78:	1e43      	subs	r3, r0, #1
 801de7a:	4258      	negs	r0, r3
 801de7c:	4158      	adcs	r0, r3
 801de7e:	0400      	lsls	r0, r0, #16
 801de80:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 801de84:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 801de88:	f4bf af48 	bcs.w	801dd1c <powf+0x2c>
 801de8c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 801dfa4 <powf+0x2b4>
 801de90:	ee27 0aa6 	vmul.f32	s0, s15, s13
 801de94:	ee10 3a10 	vmov	r3, s0
 801de98:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 801de9c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 801dea0:	e73c      	b.n	801dd1c <powf+0x2c>
 801dea2:	2000      	movs	r0, #0
 801dea4:	e7ee      	b.n	801de84 <powf+0x194>
 801dea6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 801df88 <powf+0x298>
 801deaa:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801deae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801deb2:	dd45      	ble.n	801df40 <powf+0x250>
 801deb4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 801deb8:	b3d0      	cbz	r0, 801df30 <powf+0x240>
 801deba:	9301      	str	r3, [sp, #4]
 801debc:	eddd 6a01 	vldr	s13, [sp, #4]
 801dec0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 801dec4:	ee76 6a66 	vsub.f32	s13, s12, s13
 801dec8:	eef4 6a46 	vcmp.f32	s13, s12
 801decc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801ded0:	f47f af6f 	bne.w	801ddb2 <powf+0xc2>
 801ded4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 801ded8:	4b33      	ldr	r3, [pc, #204]	@ (801dfa8 <powf+0x2b8>)
 801deda:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 801dede:	ee37 6b05 	vadd.f64	d6, d7, d5
 801dee2:	ee16 2a10 	vmov	r2, s12
 801dee6:	ee36 6b45 	vsub.f64	d6, d6, d5
 801deea:	f002 011f 	and.w	r1, r2, #31
 801deee:	ee37 7b46 	vsub.f64	d7, d7, d6
 801def2:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 801def6:	ee27 4b07 	vmul.f64	d4, d7, d7
 801defa:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 801defe:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 801df02:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 801df06:	eea7 6b05 	vfma.f64	d6, d7, d5
 801df0a:	686d      	ldr	r5, [r5, #4]
 801df0c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 801df10:	1880      	adds	r0, r0, r2
 801df12:	2100      	movs	r1, #0
 801df14:	190a      	adds	r2, r1, r4
 801df16:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801df1a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801df1e:	ec43 2b17 	vmov	d7, r2, r3
 801df22:	eea6 0b04 	vfma.f64	d0, d6, d4
 801df26:	ee20 0b07 	vmul.f64	d0, d0, d7
 801df2a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801df2e:	e757      	b.n	801dde0 <powf+0xf0>
 801df30:	9300      	str	r3, [sp, #0]
 801df32:	eddd 6a00 	vldr	s13, [sp]
 801df36:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801df3a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801df3e:	e7c3      	b.n	801dec8 <powf+0x1d8>
 801df40:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 801df90 <powf+0x2a0>
 801df44:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801df48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df4c:	d804      	bhi.n	801df58 <powf+0x268>
 801df4e:	b003      	add	sp, #12
 801df50:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df54:	f000 b846 	b.w	801dfe4 <__math_uflowf>
 801df58:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 801df98 <powf+0x2a8>
 801df5c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801df60:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801df64:	d5b6      	bpl.n	801ded4 <powf+0x1e4>
 801df66:	b003      	add	sp, #12
 801df68:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801df6c:	f000 b840 	b.w	801dff0 <__math_may_uflowf>
 801df70:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 801df74:	e734      	b.n	801dde0 <powf+0xf0>
 801df76:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 801dfac <powf+0x2bc>
 801df7a:	e731      	b.n	801dde0 <powf+0xf0>
 801df7c:	f3af 8000 	nop.w
 801df80:	ffd1d571 	.word	0xffd1d571
 801df84:	405fffff 	.word	0x405fffff
 801df88:	ffa3aae2 	.word	0xffa3aae2
 801df8c:	405fffff 	.word	0x405fffff
 801df90:	00000000 	.word	0x00000000
 801df94:	c062c000 	.word	0xc062c000
 801df98:	00000000 	.word	0x00000000
 801df9c:	c062a000 	.word	0xc062a000
 801dfa0:	08029880 	.word	0x08029880
 801dfa4:	4b000000 	.word	0x4b000000
 801dfa8:	08029738 	.word	0x08029738
 801dfac:	00000000 	.word	0x00000000

0801dfb0 <with_errnof>:
 801dfb0:	b510      	push	{r4, lr}
 801dfb2:	ed2d 8b02 	vpush	{d8}
 801dfb6:	eeb0 8a40 	vmov.f32	s16, s0
 801dfba:	4604      	mov	r4, r0
 801dfbc:	f7fe ff7e 	bl	801cebc <__errno>
 801dfc0:	eeb0 0a48 	vmov.f32	s0, s16
 801dfc4:	ecbd 8b02 	vpop	{d8}
 801dfc8:	6004      	str	r4, [r0, #0]
 801dfca:	bd10      	pop	{r4, pc}

0801dfcc <xflowf>:
 801dfcc:	b130      	cbz	r0, 801dfdc <xflowf+0x10>
 801dfce:	eef1 7a40 	vneg.f32	s15, s0
 801dfd2:	ee27 0a80 	vmul.f32	s0, s15, s0
 801dfd6:	2022      	movs	r0, #34	@ 0x22
 801dfd8:	f7ff bfea 	b.w	801dfb0 <with_errnof>
 801dfdc:	eef0 7a40 	vmov.f32	s15, s0
 801dfe0:	e7f7      	b.n	801dfd2 <xflowf+0x6>
	...

0801dfe4 <__math_uflowf>:
 801dfe4:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801dfec <__math_uflowf+0x8>
 801dfe8:	f7ff bff0 	b.w	801dfcc <xflowf>
 801dfec:	10000000 	.word	0x10000000

0801dff0 <__math_may_uflowf>:
 801dff0:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801dff8 <__math_may_uflowf+0x8>
 801dff4:	f7ff bfea 	b.w	801dfcc <xflowf>
 801dff8:	1a200000 	.word	0x1a200000

0801dffc <__math_oflowf>:
 801dffc:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801e004 <__math_oflowf+0x8>
 801e000:	f7ff bfe4 	b.w	801dfcc <xflowf>
 801e004:	70000000 	.word	0x70000000

0801e008 <__math_divzerof>:
 801e008:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 801e028 <__math_divzerof+0x20>
 801e00c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801e010:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801e014:	2800      	cmp	r0, #0
 801e016:	f04f 0022 	mov.w	r0, #34	@ 0x22
 801e01a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 801e01e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 801e022:	f7ff bfc5 	b.w	801dfb0 <with_errnof>
 801e026:	bf00      	nop
 801e028:	00000000 	.word	0x00000000

0801e02c <__math_invalidf>:
 801e02c:	eef0 7a40 	vmov.f32	s15, s0
 801e030:	ee30 7a40 	vsub.f32	s14, s0, s0
 801e034:	eef4 7a67 	vcmp.f32	s15, s15
 801e038:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801e03c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 801e040:	d602      	bvs.n	801e048 <__math_invalidf+0x1c>
 801e042:	2021      	movs	r0, #33	@ 0x21
 801e044:	f7ff bfb4 	b.w	801dfb0 <with_errnof>
 801e048:	4770      	bx	lr
	...

0801e04c <_init>:
 801e04c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e04e:	bf00      	nop
 801e050:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e052:	bc08      	pop	{r3}
 801e054:	469e      	mov	lr, r3
 801e056:	4770      	bx	lr

0801e058 <_fini>:
 801e058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e05a:	bf00      	nop
 801e05c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e05e:	bc08      	pop	{r3}
 801e060:	469e      	mov	lr, r3
 801e062:	4770      	bx	lr
