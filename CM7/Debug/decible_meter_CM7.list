
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00014da4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00013fdc  08015048  08015048  00016048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08029024  08029024  000ac200  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08029024  08029024  0002a024  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0802902c  0802902c  000ac200  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0802902c  0802902c  0002a02c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08029030  08029030  0002a030  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000064c  24000000  08029034  0002b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RAM_D3       00000200  24000660  08029680  0002b660  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 10 .bss          0000b04c  24000860  08029880  0002b860  2**5
                  ALLOC
 11 ._user_heap_stack 00000604  2400b8ac  08029880  0002b8ac  2**0
                  ALLOC
 12 .sdram        00080200  70000000  70000000  0002c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 13 .ARM.attributes 0000002e  00000000  00000000  000ac200  2**0
                  CONTENTS, READONLY
 14 .debug_info   0001f5c0  00000000  00000000  000ac22e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00003ac4  00000000  00000000  000cb7ee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00001c38  00000000  00000000  000cf2b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001569  00000000  00000000  000d0ef0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00007a44  00000000  00000000  000d2459  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   000230ee  00000000  00000000  000d9e9d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    001aee9c  00000000  00000000  000fcf8b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .comment      000000c2  00000000  00000000  002abe27  2**0
                  CONTENTS, READONLY
 22 .debug_frame  00008564  00000000  00000000  002abeec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_line_str 00000071  00000000  00000000  002b4450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000860 	.word	0x24000860
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0801502c 	.word	0x0801502c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000864 	.word	0x24000864
 80002dc:	0801502c 	.word	0x0801502c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <strlen>:
 8000380:	4603      	mov	r3, r0
 8000382:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000386:	2a00      	cmp	r2, #0
 8000388:	d1fb      	bne.n	8000382 <strlen+0x2>
 800038a:	1a18      	subs	r0, r3, r0
 800038c:	3801      	subs	r0, #1
 800038e:	4770      	bx	lr

08000390 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8000390:	b580      	push	{r7, lr}
 8000392:	b084      	sub	sp, #16
 8000394:	af00      	add	r7, sp, #0
 8000396:	6078      	str	r0, [r7, #4]
 8000398:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 800039a:	2303      	movs	r3, #3
 800039c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 800039e:	687b      	ldr	r3, [r7, #4]
 80003a0:	f103 0018 	add.w	r0, r3, #24
 80003a4:	f107 020a 	add.w	r2, r7, #10
 80003a8:	2302      	movs	r3, #2
 80003aa:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80003ae:	f001 fdb9 	bl	8001f24 <wm8994_write_reg>
 80003b2:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 80003b4:	2300      	movs	r3, #0
 80003b6:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 80003b8:	687b      	ldr	r3, [r7, #4]
 80003ba:	f103 0018 	add.w	r0, r3, #24
 80003be:	f107 020a 	add.w	r2, r7, #10
 80003c2:	2302      	movs	r3, #2
 80003c4:	f640 0117 	movw	r1, #2071	@ 0x817
 80003c8:	f001 fdac 	bl	8001f24 <wm8994_write_reg>
 80003cc:	4602      	mov	r2, r0
 80003ce:	68fb      	ldr	r3, [r7, #12]
 80003d0:	4413      	add	r3, r2
 80003d2:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 80003d4:	687b      	ldr	r3, [r7, #4]
 80003d6:	f103 0018 	add.w	r0, r3, #24
 80003da:	f107 020a 	add.w	r2, r7, #10
 80003de:	2302      	movs	r3, #2
 80003e0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 80003e4:	f001 fd9e 	bl	8001f24 <wm8994_write_reg>
 80003e8:	4602      	mov	r2, r0
 80003ea:	68fb      	ldr	r3, [r7, #12]
 80003ec:	4413      	add	r3, r2
 80003ee:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 80003f0:	236c      	movs	r3, #108	@ 0x6c
 80003f2:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 80003f4:	687b      	ldr	r3, [r7, #4]
 80003f6:	f103 0018 	add.w	r0, r3, #24
 80003fa:	f107 020a 	add.w	r2, r7, #10
 80003fe:	2302      	movs	r3, #2
 8000400:	2139      	movs	r1, #57	@ 0x39
 8000402:	f001 fd8f 	bl	8001f24 <wm8994_write_reg>
 8000406:	4602      	mov	r2, r0
 8000408:	68fb      	ldr	r3, [r7, #12]
 800040a:	4413      	add	r3, r2
 800040c:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 800040e:	683b      	ldr	r3, [r7, #0]
 8000410:	681b      	ldr	r3, [r3, #0]
 8000412:	2b00      	cmp	r3, #0
 8000414:	d00f      	beq.n	8000436 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8000416:	2313      	movs	r3, #19
 8000418:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 800041a:	687b      	ldr	r3, [r7, #4]
 800041c:	f103 0018 	add.w	r0, r3, #24
 8000420:	f107 020a 	add.w	r2, r7, #10
 8000424:	2302      	movs	r3, #2
 8000426:	2101      	movs	r1, #1
 8000428:	f001 fd7c 	bl	8001f24 <wm8994_write_reg>
 800042c:	4602      	mov	r2, r0
 800042e:	68fb      	ldr	r3, [r7, #12]
 8000430:	4413      	add	r3, r2
 8000432:	60fb      	str	r3, [r7, #12]
 8000434:	e00e      	b.n	8000454 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 8000436:	2303      	movs	r3, #3
 8000438:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800043a:	687b      	ldr	r3, [r7, #4]
 800043c:	f103 0018 	add.w	r0, r3, #24
 8000440:	f107 020a 	add.w	r2, r7, #10
 8000444:	2302      	movs	r3, #2
 8000446:	2101      	movs	r1, #1
 8000448:	f001 fd6c 	bl	8001f24 <wm8994_write_reg>
 800044c:	4602      	mov	r2, r0
 800044e:	68fb      	ldr	r3, [r7, #12]
 8000450:	4413      	add	r3, r2
 8000452:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 8000454:	2132      	movs	r1, #50	@ 0x32
 8000456:	6878      	ldr	r0, [r7, #4]
 8000458:	f001 fcec 	bl	8001e34 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 800045c:	683b      	ldr	r3, [r7, #0]
 800045e:	685b      	ldr	r3, [r3, #4]
 8000460:	2b03      	cmp	r3, #3
 8000462:	f200 8141 	bhi.w	80006e8 <WM8994_Init+0x358>
 8000466:	a201      	add	r2, pc, #4	@ (adr r2, 800046c <WM8994_Init+0xdc>)
 8000468:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800046c:	08000783 	.word	0x08000783
 8000470:	0800047d 	.word	0x0800047d
 8000474:	08000517 	.word	0x08000517
 8000478:	080005b1 	.word	0x080005b1
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 800047c:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8000480:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000482:	687b      	ldr	r3, [r7, #4]
 8000484:	f103 0018 	add.w	r0, r3, #24
 8000488:	f107 020a 	add.w	r2, r7, #10
 800048c:	2302      	movs	r3, #2
 800048e:	2105      	movs	r1, #5
 8000490:	f001 fd48 	bl	8001f24 <wm8994_write_reg>
 8000494:	4602      	mov	r2, r0
 8000496:	68fb      	ldr	r3, [r7, #12]
 8000498:	4413      	add	r3, r2
 800049a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 800049c:	2300      	movs	r3, #0
 800049e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	f103 0018 	add.w	r0, r3, #24
 80004a6:	f107 020a 	add.w	r2, r7, #10
 80004aa:	2302      	movs	r3, #2
 80004ac:	f240 6101 	movw	r1, #1537	@ 0x601
 80004b0:	f001 fd38 	bl	8001f24 <wm8994_write_reg>
 80004b4:	4602      	mov	r2, r0
 80004b6:	68fb      	ldr	r3, [r7, #12]
 80004b8:	4413      	add	r3, r2
 80004ba:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80004bc:	687b      	ldr	r3, [r7, #4]
 80004be:	f103 0018 	add.w	r0, r3, #24
 80004c2:	f107 020a 	add.w	r2, r7, #10
 80004c6:	2302      	movs	r3, #2
 80004c8:	f240 6102 	movw	r1, #1538	@ 0x602
 80004cc:	f001 fd2a 	bl	8001f24 <wm8994_write_reg>
 80004d0:	4602      	mov	r2, r0
 80004d2:	68fb      	ldr	r3, [r7, #12]
 80004d4:	4413      	add	r3, r2
 80004d6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 80004d8:	2302      	movs	r3, #2
 80004da:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80004dc:	687b      	ldr	r3, [r7, #4]
 80004de:	f103 0018 	add.w	r0, r3, #24
 80004e2:	f107 020a 	add.w	r2, r7, #10
 80004e6:	2302      	movs	r3, #2
 80004e8:	f240 6104 	movw	r1, #1540	@ 0x604
 80004ec:	f001 fd1a 	bl	8001f24 <wm8994_write_reg>
 80004f0:	4602      	mov	r2, r0
 80004f2:	68fb      	ldr	r3, [r7, #12]
 80004f4:	4413      	add	r3, r2
 80004f6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80004f8:	687b      	ldr	r3, [r7, #4]
 80004fa:	f103 0018 	add.w	r0, r3, #24
 80004fe:	f107 020a 	add.w	r2, r7, #10
 8000502:	2302      	movs	r3, #2
 8000504:	f240 6105 	movw	r1, #1541	@ 0x605
 8000508:	f001 fd0c 	bl	8001f24 <wm8994_write_reg>
 800050c:	4602      	mov	r2, r0
 800050e:	68fb      	ldr	r3, [r7, #12]
 8000510:	4413      	add	r3, r2
 8000512:	60fb      	str	r3, [r7, #12]
    break;
 8000514:	e136      	b.n	8000784 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8000516:	f240 3303 	movw	r3, #771	@ 0x303
 800051a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800051c:	687b      	ldr	r3, [r7, #4]
 800051e:	f103 0018 	add.w	r0, r3, #24
 8000522:	f107 020a 	add.w	r2, r7, #10
 8000526:	2302      	movs	r3, #2
 8000528:	2105      	movs	r1, #5
 800052a:	f001 fcfb 	bl	8001f24 <wm8994_write_reg>
 800052e:	4602      	mov	r2, r0
 8000530:	68fb      	ldr	r3, [r7, #12]
 8000532:	4413      	add	r3, r2
 8000534:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000536:	2301      	movs	r3, #1
 8000538:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800053a:	687b      	ldr	r3, [r7, #4]
 800053c:	f103 0018 	add.w	r0, r3, #24
 8000540:	f107 020a 	add.w	r2, r7, #10
 8000544:	2302      	movs	r3, #2
 8000546:	f240 6101 	movw	r1, #1537	@ 0x601
 800054a:	f001 fceb 	bl	8001f24 <wm8994_write_reg>
 800054e:	4602      	mov	r2, r0
 8000550:	68fb      	ldr	r3, [r7, #12]
 8000552:	4413      	add	r3, r2
 8000554:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f103 0018 	add.w	r0, r3, #24
 800055c:	f107 020a 	add.w	r2, r7, #10
 8000560:	2302      	movs	r3, #2
 8000562:	f240 6102 	movw	r1, #1538	@ 0x602
 8000566:	f001 fcdd 	bl	8001f24 <wm8994_write_reg>
 800056a:	4602      	mov	r2, r0
 800056c:	68fb      	ldr	r3, [r7, #12]
 800056e:	4413      	add	r3, r2
 8000570:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8000572:	2300      	movs	r3, #0
 8000574:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000576:	687b      	ldr	r3, [r7, #4]
 8000578:	f103 0018 	add.w	r0, r3, #24
 800057c:	f107 020a 	add.w	r2, r7, #10
 8000580:	2302      	movs	r3, #2
 8000582:	f240 6104 	movw	r1, #1540	@ 0x604
 8000586:	f001 fccd 	bl	8001f24 <wm8994_write_reg>
 800058a:	4602      	mov	r2, r0
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	4413      	add	r3, r2
 8000590:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000592:	687b      	ldr	r3, [r7, #4]
 8000594:	f103 0018 	add.w	r0, r3, #24
 8000598:	f107 020a 	add.w	r2, r7, #10
 800059c:	2302      	movs	r3, #2
 800059e:	f240 6105 	movw	r1, #1541	@ 0x605
 80005a2:	f001 fcbf 	bl	8001f24 <wm8994_write_reg>
 80005a6:	4602      	mov	r2, r0
 80005a8:	68fb      	ldr	r3, [r7, #12]
 80005aa:	4413      	add	r3, r2
 80005ac:	60fb      	str	r3, [r7, #12]
    break;
 80005ae:	e0e9      	b.n	8000784 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	2b05      	cmp	r3, #5
 80005b6:	d14a      	bne.n	800064e <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 80005b8:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80005bc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80005be:	687b      	ldr	r3, [r7, #4]
 80005c0:	f103 0018 	add.w	r0, r3, #24
 80005c4:	f107 020a 	add.w	r2, r7, #10
 80005c8:	2302      	movs	r3, #2
 80005ca:	2105      	movs	r1, #5
 80005cc:	f001 fcaa 	bl	8001f24 <wm8994_write_reg>
 80005d0:	4602      	mov	r2, r0
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	4413      	add	r3, r2
 80005d6:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 80005d8:	2303      	movs	r3, #3
 80005da:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80005dc:	687b      	ldr	r3, [r7, #4]
 80005de:	f103 0018 	add.w	r0, r3, #24
 80005e2:	f107 020a 	add.w	r2, r7, #10
 80005e6:	2302      	movs	r3, #2
 80005e8:	f240 6101 	movw	r1, #1537	@ 0x601
 80005ec:	f001 fc9a 	bl	8001f24 <wm8994_write_reg>
 80005f0:	4602      	mov	r2, r0
 80005f2:	68fb      	ldr	r3, [r7, #12]
 80005f4:	4413      	add	r3, r2
 80005f6:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	f103 0018 	add.w	r0, r3, #24
 80005fe:	f107 020a 	add.w	r2, r7, #10
 8000602:	2302      	movs	r3, #2
 8000604:	f240 6102 	movw	r1, #1538	@ 0x602
 8000608:	f001 fc8c 	bl	8001f24 <wm8994_write_reg>
 800060c:	4602      	mov	r2, r0
 800060e:	68fb      	ldr	r3, [r7, #12]
 8000610:	4413      	add	r3, r2
 8000612:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000614:	687b      	ldr	r3, [r7, #4]
 8000616:	f103 0018 	add.w	r0, r3, #24
 800061a:	f107 020a 	add.w	r2, r7, #10
 800061e:	2302      	movs	r3, #2
 8000620:	f240 6104 	movw	r1, #1540	@ 0x604
 8000624:	f001 fc7e 	bl	8001f24 <wm8994_write_reg>
 8000628:	4602      	mov	r2, r0
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	4413      	add	r3, r2
 800062e:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	f103 0018 	add.w	r0, r3, #24
 8000636:	f107 020a 	add.w	r2, r7, #10
 800063a:	2302      	movs	r3, #2
 800063c:	f240 6105 	movw	r1, #1541	@ 0x605
 8000640:	f001 fc70 	bl	8001f24 <wm8994_write_reg>
 8000644:	4602      	mov	r2, r0
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 800064c:	e09a      	b.n	8000784 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 800064e:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8000652:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	f103 0018 	add.w	r0, r3, #24
 800065a:	f107 020a 	add.w	r2, r7, #10
 800065e:	2302      	movs	r3, #2
 8000660:	2105      	movs	r1, #5
 8000662:	f001 fc5f 	bl	8001f24 <wm8994_write_reg>
 8000666:	4602      	mov	r2, r0
 8000668:	68fb      	ldr	r3, [r7, #12]
 800066a:	4413      	add	r3, r2
 800066c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 800066e:	2301      	movs	r3, #1
 8000670:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8000672:	687b      	ldr	r3, [r7, #4]
 8000674:	f103 0018 	add.w	r0, r3, #24
 8000678:	f107 020a 	add.w	r2, r7, #10
 800067c:	2302      	movs	r3, #2
 800067e:	f240 6101 	movw	r1, #1537	@ 0x601
 8000682:	f001 fc4f 	bl	8001f24 <wm8994_write_reg>
 8000686:	4602      	mov	r2, r0
 8000688:	68fb      	ldr	r3, [r7, #12]
 800068a:	4413      	add	r3, r2
 800068c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	f103 0018 	add.w	r0, r3, #24
 8000694:	f107 020a 	add.w	r2, r7, #10
 8000698:	2302      	movs	r3, #2
 800069a:	f240 6102 	movw	r1, #1538	@ 0x602
 800069e:	f001 fc41 	bl	8001f24 <wm8994_write_reg>
 80006a2:	4602      	mov	r2, r0
 80006a4:	68fb      	ldr	r3, [r7, #12]
 80006a6:	4413      	add	r3, r2
 80006a8:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 80006aa:	2302      	movs	r3, #2
 80006ac:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80006ae:	687b      	ldr	r3, [r7, #4]
 80006b0:	f103 0018 	add.w	r0, r3, #24
 80006b4:	f107 020a 	add.w	r2, r7, #10
 80006b8:	2302      	movs	r3, #2
 80006ba:	f240 6104 	movw	r1, #1540	@ 0x604
 80006be:	f001 fc31 	bl	8001f24 <wm8994_write_reg>
 80006c2:	4602      	mov	r2, r0
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80006ca:	687b      	ldr	r3, [r7, #4]
 80006cc:	f103 0018 	add.w	r0, r3, #24
 80006d0:	f107 020a 	add.w	r2, r7, #10
 80006d4:	2302      	movs	r3, #2
 80006d6:	f240 6105 	movw	r1, #1541	@ 0x605
 80006da:	f001 fc23 	bl	8001f24 <wm8994_write_reg>
 80006de:	4602      	mov	r2, r0
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4413      	add	r3, r2
 80006e4:	60fb      	str	r3, [r7, #12]
    break;
 80006e6:	e04d      	b.n	8000784 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 80006e8:	f240 3303 	movw	r3, #771	@ 0x303
 80006ec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80006ee:	687b      	ldr	r3, [r7, #4]
 80006f0:	f103 0018 	add.w	r0, r3, #24
 80006f4:	f107 020a 	add.w	r2, r7, #10
 80006f8:	2302      	movs	r3, #2
 80006fa:	2105      	movs	r1, #5
 80006fc:	f001 fc12 	bl	8001f24 <wm8994_write_reg>
 8000700:	4602      	mov	r2, r0
 8000702:	68fb      	ldr	r3, [r7, #12]
 8000704:	4413      	add	r3, r2
 8000706:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8000708:	2301      	movs	r3, #1
 800070a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f103 0018 	add.w	r0, r3, #24
 8000712:	f107 020a 	add.w	r2, r7, #10
 8000716:	2302      	movs	r3, #2
 8000718:	f240 6101 	movw	r1, #1537	@ 0x601
 800071c:	f001 fc02 	bl	8001f24 <wm8994_write_reg>
 8000720:	4602      	mov	r2, r0
 8000722:	68fb      	ldr	r3, [r7, #12]
 8000724:	4413      	add	r3, r2
 8000726:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8000728:	687b      	ldr	r3, [r7, #4]
 800072a:	f103 0018 	add.w	r0, r3, #24
 800072e:	f107 020a 	add.w	r2, r7, #10
 8000732:	2302      	movs	r3, #2
 8000734:	f240 6102 	movw	r1, #1538	@ 0x602
 8000738:	f001 fbf4 	bl	8001f24 <wm8994_write_reg>
 800073c:	4602      	mov	r2, r0
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	4413      	add	r3, r2
 8000742:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8000744:	2300      	movs	r3, #0
 8000746:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	f103 0018 	add.w	r0, r3, #24
 800074e:	f107 020a 	add.w	r2, r7, #10
 8000752:	2302      	movs	r3, #2
 8000754:	f240 6104 	movw	r1, #1540	@ 0x604
 8000758:	f001 fbe4 	bl	8001f24 <wm8994_write_reg>
 800075c:	4602      	mov	r2, r0
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	4413      	add	r3, r2
 8000762:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	f103 0018 	add.w	r0, r3, #24
 800076a:	f107 020a 	add.w	r2, r7, #10
 800076e:	2302      	movs	r3, #2
 8000770:	f240 6105 	movw	r1, #1541	@ 0x605
 8000774:	f001 fbd6 	bl	8001f24 <wm8994_write_reg>
 8000778:	4602      	mov	r2, r0
 800077a:	68fb      	ldr	r3, [r7, #12]
 800077c:	4413      	add	r3, r2
 800077e:	60fb      	str	r3, [r7, #12]
    break;
 8000780:	e000      	b.n	8000784 <WM8994_Init+0x3f4>
    break;
 8000782:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8000784:	683b      	ldr	r3, [r7, #0]
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	3b01      	subs	r3, #1
 800078a:	2b04      	cmp	r3, #4
 800078c:	f200 81e0 	bhi.w	8000b50 <WM8994_Init+0x7c0>
 8000790:	a201      	add	r2, pc, #4	@ (adr r2, 8000798 <WM8994_Init+0x408>)
 8000792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000796:	bf00      	nop
 8000798:	08000981 	.word	0x08000981
 800079c:	080007ad 	.word	0x080007ad
 80007a0:	0800086b 	.word	0x0800086b
 80007a4:	08000b51 	.word	0x08000b51
 80007a8:	08000a3f 	.word	0x08000a3f
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 80007ac:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 80007b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80007b2:	687b      	ldr	r3, [r7, #4]
 80007b4:	f103 0018 	add.w	r0, r3, #24
 80007b8:	f107 020a 	add.w	r2, r7, #10
 80007bc:	2302      	movs	r3, #2
 80007be:	2104      	movs	r1, #4
 80007c0:	f001 fbb0 	bl	8001f24 <wm8994_write_reg>
 80007c4:	4602      	mov	r2, r0
 80007c6:	68fb      	ldr	r3, [r7, #12]
 80007c8:	4413      	add	r3, r2
 80007ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 80007cc:	23db      	movs	r3, #219	@ 0xdb
 80007ce:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	f103 0018 	add.w	r0, r3, #24
 80007d6:	f107 020a 	add.w	r2, r7, #10
 80007da:	2302      	movs	r3, #2
 80007dc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 80007e0:	f001 fba0 	bl	8001f24 <wm8994_write_reg>
 80007e4:	4602      	mov	r2, r0
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	4413      	add	r3, r2
 80007ea:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 80007ec:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 80007f0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	f103 0018 	add.w	r0, r3, #24
 80007f8:	f107 020a 	add.w	r2, r7, #10
 80007fc:	2302      	movs	r3, #2
 80007fe:	2102      	movs	r1, #2
 8000800:	f001 fb90 	bl	8001f24 <wm8994_write_reg>
 8000804:	4602      	mov	r2, r0
 8000806:	68fb      	ldr	r3, [r7, #12]
 8000808:	4413      	add	r3, r2
 800080a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 800080c:	2302      	movs	r3, #2
 800080e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	f103 0018 	add.w	r0, r3, #24
 8000816:	f107 020a 	add.w	r2, r7, #10
 800081a:	2302      	movs	r3, #2
 800081c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000820:	f001 fb80 	bl	8001f24 <wm8994_write_reg>
 8000824:	4602      	mov	r2, r0
 8000826:	68fb      	ldr	r3, [r7, #12]
 8000828:	4413      	add	r3, r2
 800082a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	f103 0018 	add.w	r0, r3, #24
 8000832:	f107 020a 	add.w	r2, r7, #10
 8000836:	2302      	movs	r3, #2
 8000838:	f240 6109 	movw	r1, #1545	@ 0x609
 800083c:	f001 fb72 	bl	8001f24 <wm8994_write_reg>
 8000840:	4602      	mov	r2, r0
 8000842:	68fb      	ldr	r3, [r7, #12]
 8000844:	4413      	add	r3, r2
 8000846:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8000848:	230e      	movs	r3, #14
 800084a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 800084c:	687b      	ldr	r3, [r7, #4]
 800084e:	f103 0018 	add.w	r0, r3, #24
 8000852:	f107 020a 	add.w	r2, r7, #10
 8000856:	2302      	movs	r3, #2
 8000858:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 800085c:	f001 fb62 	bl	8001f24 <wm8994_write_reg>
 8000860:	4602      	mov	r2, r0
 8000862:	68fb      	ldr	r3, [r7, #12]
 8000864:	4413      	add	r3, r2
 8000866:	60fb      	str	r3, [r7, #12]
    break;
 8000868:	e173      	b.n	8000b52 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 800086a:	2311      	movs	r3, #17
 800086c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	f103 0018 	add.w	r0, r3, #24
 8000874:	f107 020a 	add.w	r2, r7, #10
 8000878:	2302      	movs	r3, #2
 800087a:	2128      	movs	r1, #40	@ 0x28
 800087c:	f001 fb52 	bl	8001f24 <wm8994_write_reg>
 8000880:	4602      	mov	r2, r0
 8000882:	68fb      	ldr	r3, [r7, #12]
 8000884:	4413      	add	r3, r2
 8000886:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8000888:	2335      	movs	r3, #53	@ 0x35
 800088a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 800088c:	687b      	ldr	r3, [r7, #4]
 800088e:	f103 0018 	add.w	r0, r3, #24
 8000892:	f107 020a 	add.w	r2, r7, #10
 8000896:	2302      	movs	r3, #2
 8000898:	2129      	movs	r1, #41	@ 0x29
 800089a:	f001 fb43 	bl	8001f24 <wm8994_write_reg>
 800089e:	4602      	mov	r2, r0
 80008a0:	68fb      	ldr	r3, [r7, #12]
 80008a2:	4413      	add	r3, r2
 80008a4:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	f103 0018 	add.w	r0, r3, #24
 80008ac:	f107 020a 	add.w	r2, r7, #10
 80008b0:	2302      	movs	r3, #2
 80008b2:	212a      	movs	r1, #42	@ 0x2a
 80008b4:	f001 fb36 	bl	8001f24 <wm8994_write_reg>
 80008b8:	4602      	mov	r2, r0
 80008ba:	68fb      	ldr	r3, [r7, #12]
 80008bc:	4413      	add	r3, r2
 80008be:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 80008c0:	f240 3303 	movw	r3, #771	@ 0x303
 80008c4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	f103 0018 	add.w	r0, r3, #24
 80008cc:	f107 020a 	add.w	r2, r7, #10
 80008d0:	2302      	movs	r3, #2
 80008d2:	2104      	movs	r1, #4
 80008d4:	f001 fb26 	bl	8001f24 <wm8994_write_reg>
 80008d8:	4602      	mov	r2, r0
 80008da:	68fb      	ldr	r3, [r7, #12]
 80008dc:	4413      	add	r3, r2
 80008de:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 80008e0:	23db      	movs	r3, #219	@ 0xdb
 80008e2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f103 0018 	add.w	r0, r3, #24
 80008ea:	f107 020a 	add.w	r2, r7, #10
 80008ee:	2302      	movs	r3, #2
 80008f0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80008f4:	f001 fb16 	bl	8001f24 <wm8994_write_reg>
 80008f8:	4602      	mov	r2, r0
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	4413      	add	r3, r2
 80008fe:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8000900:	f246 3350 	movw	r3, #25424	@ 0x6350
 8000904:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000906:	687b      	ldr	r3, [r7, #4]
 8000908:	f103 0018 	add.w	r0, r3, #24
 800090c:	f107 020a 	add.w	r2, r7, #10
 8000910:	2302      	movs	r3, #2
 8000912:	2102      	movs	r1, #2
 8000914:	f001 fb06 	bl	8001f24 <wm8994_write_reg>
 8000918:	4602      	mov	r2, r0
 800091a:	68fb      	ldr	r3, [r7, #12]
 800091c:	4413      	add	r3, r2
 800091e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000920:	2302      	movs	r3, #2
 8000922:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	f103 0018 	add.w	r0, r3, #24
 800092a:	f107 020a 	add.w	r2, r7, #10
 800092e:	2302      	movs	r3, #2
 8000930:	f240 6106 	movw	r1, #1542	@ 0x606
 8000934:	f001 faf6 	bl	8001f24 <wm8994_write_reg>
 8000938:	4602      	mov	r2, r0
 800093a:	68fb      	ldr	r3, [r7, #12]
 800093c:	4413      	add	r3, r2
 800093e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000940:	687b      	ldr	r3, [r7, #4]
 8000942:	f103 0018 	add.w	r0, r3, #24
 8000946:	f107 020a 	add.w	r2, r7, #10
 800094a:	2302      	movs	r3, #2
 800094c:	f240 6107 	movw	r1, #1543	@ 0x607
 8000950:	f001 fae8 	bl	8001f24 <wm8994_write_reg>
 8000954:	4602      	mov	r2, r0
 8000956:	68fb      	ldr	r3, [r7, #12]
 8000958:	4413      	add	r3, r2
 800095a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 800095c:	f248 030d 	movw	r3, #32781	@ 0x800d
 8000960:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000962:	687b      	ldr	r3, [r7, #4]
 8000964:	f103 0018 	add.w	r0, r3, #24
 8000968:	f107 020a 	add.w	r2, r7, #10
 800096c:	2302      	movs	r3, #2
 800096e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000972:	f001 fad7 	bl	8001f24 <wm8994_write_reg>
 8000976:	4602      	mov	r2, r0
 8000978:	68fb      	ldr	r3, [r7, #12]
 800097a:	4413      	add	r3, r2
 800097c:	60fb      	str	r3, [r7, #12]
    break;
 800097e:	e0e8      	b.n	8000b52 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8000980:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8000984:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	f103 0018 	add.w	r0, r3, #24
 800098c:	f107 020a 	add.w	r2, r7, #10
 8000990:	2302      	movs	r3, #2
 8000992:	2104      	movs	r1, #4
 8000994:	f001 fac6 	bl	8001f24 <wm8994_write_reg>
 8000998:	4602      	mov	r2, r0
 800099a:	68fb      	ldr	r3, [r7, #12]
 800099c:	4413      	add	r3, r2
 800099e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 80009a0:	23db      	movs	r3, #219	@ 0xdb
 80009a2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	f103 0018 	add.w	r0, r3, #24
 80009aa:	f107 020a 	add.w	r2, r7, #10
 80009ae:	2302      	movs	r3, #2
 80009b0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80009b4:	f001 fab6 	bl	8001f24 <wm8994_write_reg>
 80009b8:	4602      	mov	r2, r0
 80009ba:	68fb      	ldr	r3, [r7, #12]
 80009bc:	4413      	add	r3, r2
 80009be:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 80009c0:	f246 3350 	movw	r3, #25424	@ 0x6350
 80009c4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 80009c6:	687b      	ldr	r3, [r7, #4]
 80009c8:	f103 0018 	add.w	r0, r3, #24
 80009cc:	f107 020a 	add.w	r2, r7, #10
 80009d0:	2302      	movs	r3, #2
 80009d2:	2102      	movs	r1, #2
 80009d4:	f001 faa6 	bl	8001f24 <wm8994_write_reg>
 80009d8:	4602      	mov	r2, r0
 80009da:	68fb      	ldr	r3, [r7, #12]
 80009dc:	4413      	add	r3, r2
 80009de:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80009e0:	2302      	movs	r3, #2
 80009e2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	f103 0018 	add.w	r0, r3, #24
 80009ea:	f107 020a 	add.w	r2, r7, #10
 80009ee:	2302      	movs	r3, #2
 80009f0:	f240 6106 	movw	r1, #1542	@ 0x606
 80009f4:	f001 fa96 	bl	8001f24 <wm8994_write_reg>
 80009f8:	4602      	mov	r2, r0
 80009fa:	68fb      	ldr	r3, [r7, #12]
 80009fc:	4413      	add	r3, r2
 80009fe:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	f103 0018 	add.w	r0, r3, #24
 8000a06:	f107 020a 	add.w	r2, r7, #10
 8000a0a:	2302      	movs	r3, #2
 8000a0c:	f240 6107 	movw	r1, #1543	@ 0x607
 8000a10:	f001 fa88 	bl	8001f24 <wm8994_write_reg>
 8000a14:	4602      	mov	r2, r0
 8000a16:	68fb      	ldr	r3, [r7, #12]
 8000a18:	4413      	add	r3, r2
 8000a1a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000a1c:	230d      	movs	r3, #13
 8000a1e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000a20:	687b      	ldr	r3, [r7, #4]
 8000a22:	f103 0018 	add.w	r0, r3, #24
 8000a26:	f107 020a 	add.w	r2, r7, #10
 8000a2a:	2302      	movs	r3, #2
 8000a2c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000a30:	f001 fa78 	bl	8001f24 <wm8994_write_reg>
 8000a34:	4602      	mov	r2, r0
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	4413      	add	r3, r2
 8000a3a:	60fb      	str	r3, [r7, #12]
    break;
 8000a3c:	e089      	b.n	8000b52 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 8000a3e:	f640 733c 	movw	r3, #3900	@ 0xf3c
 8000a42:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	f103 0018 	add.w	r0, r3, #24
 8000a4a:	f107 020a 	add.w	r2, r7, #10
 8000a4e:	2302      	movs	r3, #2
 8000a50:	2104      	movs	r1, #4
 8000a52:	f001 fa67 	bl	8001f24 <wm8994_write_reg>
 8000a56:	4602      	mov	r2, r0
 8000a58:	68fb      	ldr	r3, [r7, #12]
 8000a5a:	4413      	add	r3, r2
 8000a5c:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8000a5e:	23db      	movs	r3, #219	@ 0xdb
 8000a60:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8000a62:	687b      	ldr	r3, [r7, #4]
 8000a64:	f103 0018 	add.w	r0, r3, #24
 8000a68:	f107 020a 	add.w	r2, r7, #10
 8000a6c:	2302      	movs	r3, #2
 8000a6e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8000a72:	f001 fa57 	bl	8001f24 <wm8994_write_reg>
 8000a76:	4602      	mov	r2, r0
 8000a78:	68fb      	ldr	r3, [r7, #12]
 8000a7a:	4413      	add	r3, r2
 8000a7c:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	f103 0018 	add.w	r0, r3, #24
 8000a84:	f107 020a 	add.w	r2, r7, #10
 8000a88:	2302      	movs	r3, #2
 8000a8a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8000a8e:	f001 fa49 	bl	8001f24 <wm8994_write_reg>
 8000a92:	4602      	mov	r2, r0
 8000a94:	68fb      	ldr	r3, [r7, #12]
 8000a96:	4413      	add	r3, r2
 8000a98:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 8000a9a:	f246 33a0 	movw	r3, #25504	@ 0x63a0
 8000a9e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8000aa0:	687b      	ldr	r3, [r7, #4]
 8000aa2:	f103 0018 	add.w	r0, r3, #24
 8000aa6:	f107 020a 	add.w	r2, r7, #10
 8000aaa:	2302      	movs	r3, #2
 8000aac:	2102      	movs	r1, #2
 8000aae:	f001 fa39 	bl	8001f24 <wm8994_write_reg>
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	4413      	add	r3, r2
 8000ab8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8000aba:	2302      	movs	r3, #2
 8000abc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8000abe:	687b      	ldr	r3, [r7, #4]
 8000ac0:	f103 0018 	add.w	r0, r3, #24
 8000ac4:	f107 020a 	add.w	r2, r7, #10
 8000ac8:	2302      	movs	r3, #2
 8000aca:	f240 6106 	movw	r1, #1542	@ 0x606
 8000ace:	f001 fa29 	bl	8001f24 <wm8994_write_reg>
 8000ad2:	4602      	mov	r2, r0
 8000ad4:	68fb      	ldr	r3, [r7, #12]
 8000ad6:	4413      	add	r3, r2
 8000ad8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	f103 0018 	add.w	r0, r3, #24
 8000ae0:	f107 020a 	add.w	r2, r7, #10
 8000ae4:	2302      	movs	r3, #2
 8000ae6:	f240 6107 	movw	r1, #1543	@ 0x607
 8000aea:	f001 fa1b 	bl	8001f24 <wm8994_write_reg>
 8000aee:	4602      	mov	r2, r0
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4413      	add	r3, r2
 8000af4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f103 0018 	add.w	r0, r3, #24
 8000afc:	f107 020a 	add.w	r2, r7, #10
 8000b00:	2302      	movs	r3, #2
 8000b02:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8000b06:	f001 fa0d 	bl	8001f24 <wm8994_write_reg>
 8000b0a:	4602      	mov	r2, r0
 8000b0c:	68fb      	ldr	r3, [r7, #12]
 8000b0e:	4413      	add	r3, r2
 8000b10:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8000b12:	687b      	ldr	r3, [r7, #4]
 8000b14:	f103 0018 	add.w	r0, r3, #24
 8000b18:	f107 020a 	add.w	r2, r7, #10
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	f240 6109 	movw	r1, #1545	@ 0x609
 8000b22:	f001 f9ff 	bl	8001f24 <wm8994_write_reg>
 8000b26:	4602      	mov	r2, r0
 8000b28:	68fb      	ldr	r3, [r7, #12]
 8000b2a:	4413      	add	r3, r2
 8000b2c:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 8000b2e:	230d      	movs	r3, #13
 8000b30:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	f103 0018 	add.w	r0, r3, #24
 8000b38:	f107 020a 	add.w	r2, r7, #10
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8000b42:	f001 f9ef 	bl	8001f24 <wm8994_write_reg>
 8000b46:	4602      	mov	r2, r0
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	4413      	add	r3, r2
 8000b4c:	60fb      	str	r3, [r7, #12]
    
    break;    
 8000b4e:	e000      	b.n	8000b52 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8000b50:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8000b52:	683b      	ldr	r3, [r7, #0]
 8000b54:	689b      	ldr	r3, [r3, #8]
 8000b56:	4619      	mov	r1, r3
 8000b58:	6878      	ldr	r0, [r7, #4]
 8000b5a:	f000 fff9 	bl	8001b50 <WM8994_SetFrequency>
 8000b5e:	4602      	mov	r2, r0
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	4413      	add	r3, r2
 8000b64:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000b66:	683b      	ldr	r3, [r7, #0]
 8000b68:	681b      	ldr	r3, [r3, #0]
 8000b6a:	2b05      	cmp	r3, #5
 8000b6c:	d11a      	bne.n	8000ba4 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 8000b6e:	2100      	movs	r1, #0
 8000b70:	6878      	ldr	r0, [r7, #4]
 8000b72:	f000 ff59 	bl	8001a28 <WM8994_SetResolution>
 8000b76:	4602      	mov	r2, r0
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	4413      	add	r3, r2
 8000b7c:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 8000b7e:	2103      	movs	r1, #3
 8000b80:	6878      	ldr	r0, [r7, #4]
 8000b82:	f000 ffab 	bl	8001adc <WM8994_SetProtocol>
 8000b86:	4602      	mov	r2, r0
 8000b88:	68fb      	ldr	r3, [r7, #12]
 8000b8a:	4413      	add	r3, r2
 8000b8c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	3318      	adds	r3, #24
 8000b92:	2101      	movs	r1, #1
 8000b94:	4618      	mov	r0, r3
 8000b96:	f001 faf5 	bl	8002184 <wm8994_aif1_control1_adcr_src>
 8000b9a:	4602      	mov	r2, r0
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	4413      	add	r3, r2
 8000ba0:	60fb      	str	r3, [r7, #12]
 8000ba2:	e01b      	b.n	8000bdc <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8000ba4:	683b      	ldr	r3, [r7, #0]
 8000ba6:	68db      	ldr	r3, [r3, #12]
 8000ba8:	4619      	mov	r1, r3
 8000baa:	6878      	ldr	r0, [r7, #4]
 8000bac:	f000 ff3c 	bl	8001a28 <WM8994_SetResolution>
 8000bb0:	4602      	mov	r2, r0
 8000bb2:	68fb      	ldr	r3, [r7, #12]
 8000bb4:	4413      	add	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 8000bb8:	2102      	movs	r1, #2
 8000bba:	6878      	ldr	r0, [r7, #4]
 8000bbc:	f000 ff8e 	bl	8001adc <WM8994_SetProtocol>
 8000bc0:	4602      	mov	r2, r0
 8000bc2:	68fb      	ldr	r3, [r7, #12]
 8000bc4:	4413      	add	r3, r2
 8000bc6:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	3318      	adds	r3, #24
 8000bcc:	2101      	movs	r1, #1
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f001 fad8 	bl	8002184 <wm8994_aif1_control1_adcr_src>
 8000bd4:	4602      	mov	r2, r0
 8000bd6:	68fb      	ldr	r3, [r7, #12]
 8000bd8:	4413      	add	r3, r2
 8000bda:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 8000be0:	687b      	ldr	r3, [r7, #4]
 8000be2:	f103 0018 	add.w	r0, r3, #24
 8000be6:	f107 020a 	add.w	r2, r7, #10
 8000bea:	2302      	movs	r3, #2
 8000bec:	f240 3102 	movw	r1, #770	@ 0x302
 8000bf0:	f001 f998 	bl	8001f24 <wm8994_write_reg>
 8000bf4:	4602      	mov	r2, r0
 8000bf6:	68fb      	ldr	r3, [r7, #12]
 8000bf8:	4413      	add	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 8000bfc:	230a      	movs	r3, #10
 8000bfe:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	f103 0018 	add.w	r0, r3, #24
 8000c06:	f107 020a 	add.w	r2, r7, #10
 8000c0a:	2302      	movs	r3, #2
 8000c0c:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8000c10:	f001 f988 	bl	8001f24 <wm8994_write_reg>
 8000c14:	4602      	mov	r2, r0
 8000c16:	68fb      	ldr	r3, [r7, #12]
 8000c18:	4413      	add	r3, r2
 8000c1a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 8000c1c:	2301      	movs	r3, #1
 8000c1e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	f103 0018 	add.w	r0, r3, #24
 8000c26:	f107 020a 	add.w	r2, r7, #10
 8000c2a:	2302      	movs	r3, #2
 8000c2c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8000c30:	f001 f978 	bl	8001f24 <wm8994_write_reg>
 8000c34:	4602      	mov	r2, r0
 8000c36:	68fb      	ldr	r3, [r7, #12]
 8000c38:	4413      	add	r3, r2
 8000c3a:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 8000c3c:	683b      	ldr	r3, [r7, #0]
 8000c3e:	685b      	ldr	r3, [r3, #4]
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	f000 81c6 	beq.w	8000fd2 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8000c46:	683b      	ldr	r3, [r7, #0]
 8000c48:	685b      	ldr	r3, [r3, #4]
 8000c4a:	2b02      	cmp	r3, #2
 8000c4c:	d164      	bne.n	8000d18 <WM8994_Init+0x988>
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	2b00      	cmp	r3, #0
 8000c54:	d160      	bne.n	8000d18 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8000c56:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000c5a:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	f103 0018 	add.w	r0, r3, #24
 8000c62:	f107 020a 	add.w	r2, r7, #10
 8000c66:	2302      	movs	r3, #2
 8000c68:	212d      	movs	r1, #45	@ 0x2d
 8000c6a:	f001 f95b 	bl	8001f24 <wm8994_write_reg>
 8000c6e:	4602      	mov	r2, r0
 8000c70:	68fb      	ldr	r3, [r7, #12]
 8000c72:	4413      	add	r3, r2
 8000c74:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	f103 0018 	add.w	r0, r3, #24
 8000c7c:	f107 020a 	add.w	r2, r7, #10
 8000c80:	2302      	movs	r3, #2
 8000c82:	212e      	movs	r1, #46	@ 0x2e
 8000c84:	f001 f94e 	bl	8001f24 <wm8994_write_reg>
 8000c88:	4602      	mov	r2, r0
 8000c8a:	68fb      	ldr	r3, [r7, #12]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8000c90:	4b52      	ldr	r3, [pc, #328]	@ (8000ddc <WM8994_Init+0xa4c>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	2b01      	cmp	r3, #1
 8000c96:	d119      	bne.n	8000ccc <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8000c98:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000c9c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	f103 0018 	add.w	r0, r3, #24
 8000ca4:	f107 020a 	add.w	r2, r7, #10
 8000ca8:	2302      	movs	r3, #2
 8000caa:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000cae:	f001 f939 	bl	8001f24 <wm8994_write_reg>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	68fb      	ldr	r3, [r7, #12]
 8000cb6:	4413      	add	r3, r2
 8000cb8:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 8000cba:	4b48      	ldr	r3, [pc, #288]	@ (8000ddc <WM8994_Init+0xa4c>)
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 8000cc0:	f240 1145 	movw	r1, #325	@ 0x145
 8000cc4:	6878      	ldr	r0, [r7, #4]
 8000cc6:	f001 f8b5 	bl	8001e34 <WM8994_Delay>
 8000cca:	e014      	b.n	8000cf6 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 8000ccc:	f248 1308 	movw	r3, #33032	@ 0x8108
 8000cd0:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8000cd2:	687b      	ldr	r3, [r7, #4]
 8000cd4:	f103 0018 	add.w	r0, r3, #24
 8000cd8:	f107 020a 	add.w	r2, r7, #10
 8000cdc:	2302      	movs	r3, #2
 8000cde:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8000ce2:	f001 f91f 	bl	8001f24 <wm8994_write_reg>
 8000ce6:	4602      	mov	r2, r0
 8000ce8:	68fb      	ldr	r3, [r7, #12]
 8000cea:	4413      	add	r3, r2
 8000cec:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 8000cee:	2132      	movs	r1, #50	@ 0x32
 8000cf0:	6878      	ldr	r0, [r7, #4]
 8000cf2:	f001 f89f 	bl	8001e34 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 8000cf6:	2300      	movs	r3, #0
 8000cf8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	f103 0018 	add.w	r0, r3, #24
 8000d00:	f107 020a 	add.w	r2, r7, #10
 8000d04:	2302      	movs	r3, #2
 8000d06:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000d0a:	f001 f90b 	bl	8001f24 <wm8994_write_reg>
 8000d0e:	4602      	mov	r2, r0
 8000d10:	68fb      	ldr	r3, [r7, #12]
 8000d12:	4413      	add	r3, r2
 8000d14:	60fb      	str	r3, [r7, #12]
 8000d16:	e0f4      	b.n	8000f02 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8000d18:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d1c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f103 0018 	add.w	r0, r3, #24
 8000d24:	f107 020a 	add.w	r2, r7, #10
 8000d28:	2302      	movs	r3, #2
 8000d2a:	2103      	movs	r1, #3
 8000d2c:	f001 f8fa 	bl	8001f24 <wm8994_write_reg>
 8000d30:	4602      	mov	r2, r0
 8000d32:	68fb      	ldr	r3, [r7, #12]
 8000d34:	4413      	add	r3, r2
 8000d36:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	f103 0018 	add.w	r0, r3, #24
 8000d42:	f107 020a 	add.w	r2, r7, #10
 8000d46:	2302      	movs	r3, #2
 8000d48:	2122      	movs	r1, #34	@ 0x22
 8000d4a:	f001 f8eb 	bl	8001f24 <wm8994_write_reg>
 8000d4e:	4602      	mov	r2, r0
 8000d50:	68fb      	ldr	r3, [r7, #12]
 8000d52:	4413      	add	r3, r2
 8000d54:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8000d56:	687b      	ldr	r3, [r7, #4]
 8000d58:	f103 0018 	add.w	r0, r3, #24
 8000d5c:	f107 020a 	add.w	r2, r7, #10
 8000d60:	2302      	movs	r3, #2
 8000d62:	2123      	movs	r1, #35	@ 0x23
 8000d64:	f001 f8de 	bl	8001f24 <wm8994_write_reg>
 8000d68:	4602      	mov	r2, r0
 8000d6a:	68fb      	ldr	r3, [r7, #12]
 8000d6c:	4413      	add	r3, r2
 8000d6e:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8000d70:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d74:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	f103 0018 	add.w	r0, r3, #24
 8000d7c:	f107 020a 	add.w	r2, r7, #10
 8000d80:	2302      	movs	r3, #2
 8000d82:	2136      	movs	r1, #54	@ 0x36
 8000d84:	f001 f8ce 	bl	8001f24 <wm8994_write_reg>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	68fb      	ldr	r3, [r7, #12]
 8000d8c:	4413      	add	r3, r2
 8000d8e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8000d90:	f243 0303 	movw	r3, #12291	@ 0x3003
 8000d94:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	f103 0018 	add.w	r0, r3, #24
 8000d9c:	f107 020a 	add.w	r2, r7, #10
 8000da0:	2302      	movs	r3, #2
 8000da2:	2101      	movs	r1, #1
 8000da4:	f001 f8be 	bl	8001f24 <wm8994_write_reg>
 8000da8:	4602      	mov	r2, r0
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	4413      	add	r3, r2
 8000dae:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8000db0:	683b      	ldr	r3, [r7, #0]
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	2b05      	cmp	r3, #5
 8000db6:	d113      	bne.n	8000de0 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 8000db8:	f240 2305 	movw	r3, #517	@ 0x205
 8000dbc:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 8000dbe:	687b      	ldr	r3, [r7, #4]
 8000dc0:	f103 0018 	add.w	r0, r3, #24
 8000dc4:	f107 020a 	add.w	r2, r7, #10
 8000dc8:	2302      	movs	r3, #2
 8000dca:	2151      	movs	r1, #81	@ 0x51
 8000dcc:	f001 f8aa 	bl	8001f24 <wm8994_write_reg>
 8000dd0:	4602      	mov	r2, r0
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e011      	b.n	8000dfe <WM8994_Init+0xa6e>
 8000dda:	bf00      	nop
 8000ddc:	24000448 	.word	0x24000448
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 8000de0:	2305      	movs	r3, #5
 8000de2:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8000de4:	687b      	ldr	r3, [r7, #4]
 8000de6:	f103 0018 	add.w	r0, r3, #24
 8000dea:	f107 020a 	add.w	r2, r7, #10
 8000dee:	2302      	movs	r3, #2
 8000df0:	2151      	movs	r1, #81	@ 0x51
 8000df2:	f001 f897 	bl	8001f24 <wm8994_write_reg>
 8000df6:	4602      	mov	r2, r0
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	4413      	add	r3, r2
 8000dfc:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 8000dfe:	f243 3303 	movw	r3, #13059	@ 0x3303
 8000e02:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	f103 0018 	add.w	r0, r3, #24
 8000e0a:	f107 020a 	add.w	r2, r7, #10
 8000e0e:	2302      	movs	r3, #2
 8000e10:	2101      	movs	r1, #1
 8000e12:	f001 f887 	bl	8001f24 <wm8994_write_reg>
 8000e16:	4602      	mov	r2, r0
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	4413      	add	r3, r2
 8000e1c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 8000e1e:	2322      	movs	r3, #34	@ 0x22
 8000e20:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000e22:	687b      	ldr	r3, [r7, #4]
 8000e24:	f103 0018 	add.w	r0, r3, #24
 8000e28:	f107 020a 	add.w	r2, r7, #10
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	2160      	movs	r1, #96	@ 0x60
 8000e30:	f001 f878 	bl	8001f24 <wm8994_write_reg>
 8000e34:	4602      	mov	r2, r0
 8000e36:	68fb      	ldr	r3, [r7, #12]
 8000e38:	4413      	add	r3, r2
 8000e3a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 8000e3c:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8000e40:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	f103 0018 	add.w	r0, r3, #24
 8000e48:	f107 020a 	add.w	r2, r7, #10
 8000e4c:	2302      	movs	r3, #2
 8000e4e:	214c      	movs	r1, #76	@ 0x4c
 8000e50:	f001 f868 	bl	8001f24 <wm8994_write_reg>
 8000e54:	4602      	mov	r2, r0
 8000e56:	68fb      	ldr	r3, [r7, #12]
 8000e58:	4413      	add	r3, r2
 8000e5a:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 8000e5c:	210f      	movs	r1, #15
 8000e5e:	6878      	ldr	r0, [r7, #4]
 8000e60:	f000 ffe8 	bl	8001e34 <WM8994_Delay>
      
      tmp = 0x0001;
 8000e64:	2301      	movs	r3, #1
 8000e66:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8000e68:	687b      	ldr	r3, [r7, #4]
 8000e6a:	f103 0018 	add.w	r0, r3, #24
 8000e6e:	f107 020a 	add.w	r2, r7, #10
 8000e72:	2302      	movs	r3, #2
 8000e74:	212d      	movs	r1, #45	@ 0x2d
 8000e76:	f001 f855 	bl	8001f24 <wm8994_write_reg>
 8000e7a:	4602      	mov	r2, r0
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	4413      	add	r3, r2
 8000e80:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	f103 0018 	add.w	r0, r3, #24
 8000e88:	f107 020a 	add.w	r2, r7, #10
 8000e8c:	2302      	movs	r3, #2
 8000e8e:	212e      	movs	r1, #46	@ 0x2e
 8000e90:	f001 f848 	bl	8001f24 <wm8994_write_reg>
 8000e94:	4602      	mov	r2, r0
 8000e96:	68fb      	ldr	r3, [r7, #12]
 8000e98:	4413      	add	r3, r2
 8000e9a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 8000e9c:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8000ea0:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8000ea2:	687b      	ldr	r3, [r7, #4]
 8000ea4:	f103 0018 	add.w	r0, r3, #24
 8000ea8:	f107 020a 	add.w	r2, r7, #10
 8000eac:	2302      	movs	r3, #2
 8000eae:	2103      	movs	r1, #3
 8000eb0:	f001 f838 	bl	8001f24 <wm8994_write_reg>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	68fb      	ldr	r3, [r7, #12]
 8000eb8:	4413      	add	r3, r2
 8000eba:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 8000ebc:	2333      	movs	r3, #51	@ 0x33
 8000ebe:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	f103 0018 	add.w	r0, r3, #24
 8000ec6:	f107 020a 	add.w	r2, r7, #10
 8000eca:	2302      	movs	r3, #2
 8000ecc:	2154      	movs	r1, #84	@ 0x54
 8000ece:	f001 f829 	bl	8001f24 <wm8994_write_reg>
 8000ed2:	4602      	mov	r2, r0
 8000ed4:	68fb      	ldr	r3, [r7, #12]
 8000ed6:	4413      	add	r3, r2
 8000ed8:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 8000eda:	f240 1101 	movw	r1, #257	@ 0x101
 8000ede:	6878      	ldr	r0, [r7, #4]
 8000ee0:	f000 ffa8 	bl	8001e34 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 8000ee4:	23ee      	movs	r3, #238	@ 0xee
 8000ee6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	f103 0018 	add.w	r0, r3, #24
 8000eee:	f107 020a 	add.w	r2, r7, #10
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	2160      	movs	r1, #96	@ 0x60
 8000ef6:	f001 f815 	bl	8001f24 <wm8994_write_reg>
 8000efa:	4602      	mov	r2, r0
 8000efc:	68fb      	ldr	r3, [r7, #12]
 8000efe:	4413      	add	r3, r2
 8000f00:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 8000f02:	23c0      	movs	r3, #192	@ 0xc0
 8000f04:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	f103 0018 	add.w	r0, r3, #24
 8000f0c:	f107 020a 	add.w	r2, r7, #10
 8000f10:	2302      	movs	r3, #2
 8000f12:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8000f16:	f001 f805 	bl	8001f24 <wm8994_write_reg>
 8000f1a:	4602      	mov	r2, r0
 8000f1c:	68fb      	ldr	r3, [r7, #12]
 8000f1e:	4413      	add	r3, r2
 8000f20:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8000f22:	687b      	ldr	r3, [r7, #4]
 8000f24:	f103 0018 	add.w	r0, r3, #24
 8000f28:	f107 020a 	add.w	r2, r7, #10
 8000f2c:	2302      	movs	r3, #2
 8000f2e:	f240 6111 	movw	r1, #1553	@ 0x611
 8000f32:	f000 fff7 	bl	8001f24 <wm8994_write_reg>
 8000f36:	4602      	mov	r2, r0
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	4413      	add	r3, r2
 8000f3c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 8000f3e:	2310      	movs	r3, #16
 8000f40:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	f103 0018 	add.w	r0, r3, #24
 8000f48:	f107 020a 	add.w	r2, r7, #10
 8000f4c:	2302      	movs	r3, #2
 8000f4e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8000f52:	f000 ffe7 	bl	8001f24 <wm8994_write_reg>
 8000f56:	4602      	mov	r2, r0
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	4413      	add	r3, r2
 8000f5c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 8000f5e:	23c0      	movs	r3, #192	@ 0xc0
 8000f60:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	f103 0018 	add.w	r0, r3, #24
 8000f68:	f107 020a 	add.w	r2, r7, #10
 8000f6c:	2302      	movs	r3, #2
 8000f6e:	f240 6112 	movw	r1, #1554	@ 0x612
 8000f72:	f000 ffd7 	bl	8001f24 <wm8994_write_reg>
 8000f76:	4602      	mov	r2, r0
 8000f78:	68fb      	ldr	r3, [r7, #12]
 8000f7a:	4413      	add	r3, r2
 8000f7c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	f103 0018 	add.w	r0, r3, #24
 8000f84:	f107 020a 	add.w	r2, r7, #10
 8000f88:	2302      	movs	r3, #2
 8000f8a:	f240 6113 	movw	r1, #1555	@ 0x613
 8000f8e:	f000 ffc9 	bl	8001f24 <wm8994_write_reg>
 8000f92:	4602      	mov	r2, r0
 8000f94:	68fb      	ldr	r3, [r7, #12]
 8000f96:	4413      	add	r3, r2
 8000f98:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 8000f9a:	2310      	movs	r3, #16
 8000f9c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8000f9e:	687b      	ldr	r3, [r7, #4]
 8000fa0:	f103 0018 	add.w	r0, r3, #24
 8000fa4:	f107 020a 	add.w	r2, r7, #10
 8000fa8:	2302      	movs	r3, #2
 8000faa:	f240 4122 	movw	r1, #1058	@ 0x422
 8000fae:	f000 ffb9 	bl	8001f24 <wm8994_write_reg>
 8000fb2:	4602      	mov	r2, r0
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 8000fba:	683b      	ldr	r3, [r7, #0]
 8000fbc:	691b      	ldr	r3, [r3, #16]
 8000fbe:	b2db      	uxtb	r3, r3
 8000fc0:	461a      	mov	r2, r3
 8000fc2:	2101      	movs	r1, #1
 8000fc4:	6878      	ldr	r0, [r7, #4]
 8000fc6:	f000 f99f 	bl	8001308 <WM8994_SetVolume>
 8000fca:	4602      	mov	r2, r0
 8000fcc:	68fb      	ldr	r3, [r7, #12]
 8000fce:	4413      	add	r3, r2
 8000fd0:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	f000 80b5 	beq.w	8001146 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	2b01      	cmp	r3, #1
 8000fe2:	d003      	beq.n	8000fec <WM8994_Init+0xc5c>
 8000fe4:	683b      	ldr	r3, [r7, #0]
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b02      	cmp	r3, #2
 8000fea:	d130      	bne.n	800104e <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8000fec:	2313      	movs	r3, #19
 8000fee:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	f103 0018 	add.w	r0, r3, #24
 8000ff6:	f107 020a 	add.w	r2, r7, #10
 8000ffa:	2302      	movs	r3, #2
 8000ffc:	2101      	movs	r1, #1
 8000ffe:	f000 ff91 	bl	8001f24 <wm8994_write_reg>
 8001002:	4602      	mov	r2, r0
 8001004:	68fb      	ldr	r3, [r7, #12]
 8001006:	4413      	add	r3, r2
 8001008:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 800100a:	2302      	movs	r3, #2
 800100c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	f103 0018 	add.w	r0, r3, #24
 8001014:	f107 020a 	add.w	r2, r7, #10
 8001018:	2302      	movs	r3, #2
 800101a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800101e:	f000 ff81 	bl	8001f24 <wm8994_write_reg>
 8001022:	4602      	mov	r2, r0
 8001024:	68fb      	ldr	r3, [r7, #12]
 8001026:	4413      	add	r3, r2
 8001028:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 800102a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800102e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	f103 0018 	add.w	r0, r3, #24
 8001036:	f107 020a 	add.w	r2, r7, #10
 800103a:	2302      	movs	r3, #2
 800103c:	f240 4111 	movw	r1, #1041	@ 0x411
 8001040:	f000 ff70 	bl	8001f24 <wm8994_write_reg>
 8001044:	4602      	mov	r2, r0
 8001046:	68fb      	ldr	r3, [r7, #12]
 8001048:	4413      	add	r3, r2
 800104a:	60fb      	str	r3, [r7, #12]
 800104c:	e06f      	b.n	800112e <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800104e:	683b      	ldr	r3, [r7, #0]
 8001050:	681b      	ldr	r3, [r3, #0]
 8001052:	2b05      	cmp	r3, #5
 8001054:	d13e      	bne.n	80010d4 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8001056:	2313      	movs	r3, #19
 8001058:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	f103 0018 	add.w	r0, r3, #24
 8001060:	f107 020a 	add.w	r2, r7, #10
 8001064:	2302      	movs	r3, #2
 8001066:	2101      	movs	r1, #1
 8001068:	f000 ff5c 	bl	8001f24 <wm8994_write_reg>
 800106c:	4602      	mov	r2, r0
 800106e:	68fb      	ldr	r3, [r7, #12]
 8001070:	4413      	add	r3, r2
 8001072:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8001074:	2302      	movs	r3, #2
 8001076:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	f103 0018 	add.w	r0, r3, #24
 800107e:	f107 020a 	add.w	r2, r7, #10
 8001082:	2302      	movs	r3, #2
 8001084:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8001088:	f000 ff4c 	bl	8001f24 <wm8994_write_reg>
 800108c:	4602      	mov	r2, r0
 800108e:	68fb      	ldr	r3, [r7, #12]
 8001090:	4413      	add	r3, r2
 8001092:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8001094:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001098:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	f103 0018 	add.w	r0, r3, #24
 80010a0:	f107 020a 	add.w	r2, r7, #10
 80010a4:	2302      	movs	r3, #2
 80010a6:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 80010aa:	f000 ff3b 	bl	8001f24 <wm8994_write_reg>
 80010ae:	4602      	mov	r2, r0
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	4413      	add	r3, r2
 80010b4:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	f103 0018 	add.w	r0, r3, #24
 80010bc:	f107 020a 	add.w	r2, r7, #10
 80010c0:	2302      	movs	r3, #2
 80010c2:	f240 4111 	movw	r1, #1041	@ 0x411
 80010c6:	f000 ff2d 	bl	8001f24 <wm8994_write_reg>
 80010ca:	4602      	mov	r2, r0
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
 80010d2:	e02c      	b.n	800112e <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 80010d4:	230b      	movs	r3, #11
 80010d6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	f103 0018 	add.w	r0, r3, #24
 80010de:	f107 020a 	add.w	r2, r7, #10
 80010e2:	2302      	movs	r3, #2
 80010e4:	2118      	movs	r1, #24
 80010e6:	f000 ff1d 	bl	8001f24 <wm8994_write_reg>
 80010ea:	4602      	mov	r2, r0
 80010ec:	68fb      	ldr	r3, [r7, #12]
 80010ee:	4413      	add	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	f103 0018 	add.w	r0, r3, #24
 80010f8:	f107 020a 	add.w	r2, r7, #10
 80010fc:	2302      	movs	r3, #2
 80010fe:	211a      	movs	r1, #26
 8001100:	f000 ff10 	bl	8001f24 <wm8994_write_reg>
 8001104:	4602      	mov	r2, r0
 8001106:	68fb      	ldr	r3, [r7, #12]
 8001108:	4413      	add	r3, r2
 800110a:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 800110c:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8001110:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	f103 0018 	add.w	r0, r3, #24
 8001118:	f107 020a 	add.w	r2, r7, #10
 800111c:	2302      	movs	r3, #2
 800111e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8001122:	f000 feff 	bl	8001f24 <wm8994_write_reg>
 8001126:	4602      	mov	r2, r0
 8001128:	68fb      	ldr	r3, [r7, #12]
 800112a:	4413      	add	r3, r2
 800112c:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 800112e:	683b      	ldr	r3, [r7, #0]
 8001130:	691b      	ldr	r3, [r3, #16]
 8001132:	b2db      	uxtb	r3, r3
 8001134:	461a      	mov	r2, r3
 8001136:	2100      	movs	r1, #0
 8001138:	6878      	ldr	r0, [r7, #4]
 800113a:	f000 f8e5 	bl	8001308 <WM8994_SetVolume>
 800113e:	4602      	mov	r2, r0
 8001140:	68fb      	ldr	r3, [r7, #12]
 8001142:	4413      	add	r3, r2
 8001144:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001146:	68fb      	ldr	r3, [r7, #12]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d002      	beq.n	8001152 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 800114c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001150:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001152:	68fb      	ldr	r3, [r7, #12]
}
 8001154:	4618      	mov	r0, r3
 8001156:	3710      	adds	r7, #16
 8001158:	46bd      	mov	sp, r7
 800115a:	bd80      	pop	{r7, pc}

0800115c <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 800115c:	b580      	push	{r7, lr}
 800115e:	b082      	sub	sp, #8
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 8001164:	2100      	movs	r1, #0
 8001166:	6878      	ldr	r0, [r7, #4]
 8001168:	f000 f861 	bl	800122e <WM8994_Stop>
 800116c:	4603      	mov	r3, r0
}
 800116e:	4618      	mov	r0, r3
 8001170:	3708      	adds	r7, #8
 8001172:	46bd      	mov	sp, r7
 8001174:	bd80      	pop	{r7, pc}

08001176 <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 8001176:	b580      	push	{r7, lr}
 8001178:	b084      	sub	sp, #16
 800117a:	af00      	add	r7, sp, #0
 800117c:	6078      	str	r0, [r7, #4]
 800117e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	3318      	adds	r3, #24
 800118a:	f107 020a 	add.w	r2, r7, #10
 800118e:	4611      	mov	r1, r2
 8001190:	4618      	mov	r0, r3
 8001192:	f000 ff00 	bl	8001f96 <wm8994_sw_reset_r>
 8001196:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8001198:	897b      	ldrh	r3, [r7, #10]
 800119a:	461a      	mov	r2, r3
 800119c:	683b      	ldr	r3, [r7, #0]
 800119e:	601a      	str	r2, [r3, #0]
  
  return ret;
 80011a0:	68fb      	ldr	r3, [r7, #12]
}
 80011a2:	4618      	mov	r0, r3
 80011a4:	3710      	adds	r7, #16
 80011a6:	46bd      	mov	sp, r7
 80011a8:	bd80      	pop	{r7, pc}

080011aa <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 80011aa:	b580      	push	{r7, lr}
 80011ac:	b082      	sub	sp, #8
 80011ae:	af00      	add	r7, sp, #0
 80011b0:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80011b2:	2100      	movs	r1, #0
 80011b4:	6878      	ldr	r0, [r7, #4]
 80011b6:	f000 f9d3 	bl	8001560 <WM8994_SetMute>
 80011ba:	4603      	mov	r3, r0
}
 80011bc:	4618      	mov	r0, r3
 80011be:	3708      	adds	r7, #8
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}

080011c4 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 80011c4:	b580      	push	{r7, lr}
 80011c6:	b084      	sub	sp, #16
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 80011cc:	2301      	movs	r3, #1
 80011ce:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 80011d0:	2101      	movs	r1, #1
 80011d2:	6878      	ldr	r0, [r7, #4]
 80011d4:	f000 f9c4 	bl	8001560 <WM8994_SetMute>
 80011d8:	4603      	mov	r3, r0
 80011da:	2b00      	cmp	r3, #0
 80011dc:	d003      	beq.n	80011e6 <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 80011de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80011e2:	60fb      	str	r3, [r7, #12]
 80011e4:	e011      	b.n	800120a <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f103 0018 	add.w	r0, r3, #24
 80011ec:	f107 020a 	add.w	r2, r7, #10
 80011f0:	2302      	movs	r3, #2
 80011f2:	2102      	movs	r1, #2
 80011f4:	f000 fe96 	bl	8001f24 <wm8994_write_reg>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d003      	beq.n	8001206 <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 80011fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001202:	60fb      	str	r3, [r7, #12]
 8001204:	e001      	b.n	800120a <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 8001206:	2300      	movs	r3, #0
 8001208:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800120a:	68fb      	ldr	r3, [r7, #12]
}
 800120c:	4618      	mov	r0, r3
 800120e:	3710      	adds	r7, #16
 8001210:	46bd      	mov	sp, r7
 8001212:	bd80      	pop	{r7, pc}

08001214 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800121c:	2100      	movs	r1, #0
 800121e:	6878      	ldr	r0, [r7, #4]
 8001220:	f000 f99e 	bl	8001560 <WM8994_SetMute>
 8001224:	4603      	mov	r3, r0
}
 8001226:	4618      	mov	r0, r3
 8001228:	3708      	adds	r7, #8
 800122a:	46bd      	mov	sp, r7
 800122c:	bd80      	pop	{r7, pc}

0800122e <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 800122e:	b580      	push	{r7, lr}
 8001230:	b084      	sub	sp, #16
 8001232:	af00      	add	r7, sp, #0
 8001234:	6078      	str	r0, [r7, #4]
 8001236:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8001238:	2101      	movs	r1, #1
 800123a:	6878      	ldr	r0, [r7, #4]
 800123c:	f000 f990 	bl	8001560 <WM8994_SetMute>
 8001240:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8001242:	683b      	ldr	r3, [r7, #0]
 8001244:	2b01      	cmp	r3, #1
 8001246:	d054      	beq.n	80012f2 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 8001248:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800124c:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800124e:	687b      	ldr	r3, [r7, #4]
 8001250:	f103 0018 	add.w	r0, r3, #24
 8001254:	f107 020a 	add.w	r2, r7, #10
 8001258:	2302      	movs	r3, #2
 800125a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800125e:	f000 fe61 	bl	8001f24 <wm8994_write_reg>
 8001262:	4602      	mov	r2, r0
 8001264:	68fb      	ldr	r3, [r7, #12]
 8001266:	4413      	add	r3, r2
 8001268:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	f103 0018 	add.w	r0, r3, #24
 8001270:	f107 020a 	add.w	r2, r7, #10
 8001274:	2302      	movs	r3, #2
 8001276:	f240 4122 	movw	r1, #1058	@ 0x422
 800127a:	f000 fe53 	bl	8001f24 <wm8994_write_reg>
 800127e:	4602      	mov	r2, r0
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	4413      	add	r3, r2
 8001284:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 8001286:	2300      	movs	r3, #0
 8001288:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	f103 0018 	add.w	r0, r3, #24
 8001290:	f107 020a 	add.w	r2, r7, #10
 8001294:	2302      	movs	r3, #2
 8001296:	212d      	movs	r1, #45	@ 0x2d
 8001298:	f000 fe44 	bl	8001f24 <wm8994_write_reg>
 800129c:	4602      	mov	r2, r0
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	4413      	add	r3, r2
 80012a2:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	f103 0018 	add.w	r0, r3, #24
 80012aa:	f107 020a 	add.w	r2, r7, #10
 80012ae:	2302      	movs	r3, #2
 80012b0:	212e      	movs	r1, #46	@ 0x2e
 80012b2:	f000 fe37 	bl	8001f24 <wm8994_write_reg>
 80012b6:	4602      	mov	r2, r0
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	4413      	add	r3, r2
 80012bc:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	f103 0018 	add.w	r0, r3, #24
 80012c4:	f107 020a 	add.w	r2, r7, #10
 80012c8:	2302      	movs	r3, #2
 80012ca:	2105      	movs	r1, #5
 80012cc:	f000 fe2a 	bl	8001f24 <wm8994_write_reg>
 80012d0:	4602      	mov	r2, r0
 80012d2:	68fb      	ldr	r3, [r7, #12]
 80012d4:	4413      	add	r3, r2
 80012d6:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	f103 0018 	add.w	r0, r3, #24
 80012de:	f107 020a 	add.w	r2, r7, #10
 80012e2:	2302      	movs	r3, #2
 80012e4:	2100      	movs	r1, #0
 80012e6:	f000 fe1d 	bl	8001f24 <wm8994_write_reg>
 80012ea:	4602      	mov	r2, r0
 80012ec:	68fb      	ldr	r3, [r7, #12]
 80012ee:	4413      	add	r3, r2
 80012f0:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d002      	beq.n	80012fe <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 80012f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80012fc:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80012fe:	68fb      	ldr	r3, [r7, #12]
}
 8001300:	4618      	mov	r0, r3
 8001302:	3710      	adds	r7, #16
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}

08001308 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0
 800130e:	60f8      	str	r0, [r7, #12]
 8001310:	60b9      	str	r1, [r7, #8]
 8001312:	4613      	mov	r3, r2
 8001314:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8001316:	68bb      	ldr	r3, [r7, #8]
 8001318:	2b01      	cmp	r3, #1
 800131a:	f040 8089 	bne.w	8001430 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 800131e:	79fb      	ldrb	r3, [r7, #7]
 8001320:	2b3e      	cmp	r3, #62	@ 0x3e
 8001322:	d93c      	bls.n	800139e <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8001324:	2100      	movs	r1, #0
 8001326:	68f8      	ldr	r0, [r7, #12]
 8001328:	f000 f91a 	bl	8001560 <WM8994_SetMute>
 800132c:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 800132e:	f240 137f 	movw	r3, #383	@ 0x17f
 8001332:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	f103 0018 	add.w	r0, r3, #24
 800133a:	f107 0212 	add.w	r2, r7, #18
 800133e:	2302      	movs	r3, #2
 8001340:	211c      	movs	r1, #28
 8001342:	f000 fdef 	bl	8001f24 <wm8994_write_reg>
 8001346:	4602      	mov	r2, r0
 8001348:	697b      	ldr	r3, [r7, #20]
 800134a:	4413      	add	r3, r2
 800134c:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	f103 0018 	add.w	r0, r3, #24
 8001354:	f107 0212 	add.w	r2, r7, #18
 8001358:	2302      	movs	r3, #2
 800135a:	211d      	movs	r1, #29
 800135c:	f000 fde2 	bl	8001f24 <wm8994_write_reg>
 8001360:	4602      	mov	r2, r0
 8001362:	697b      	ldr	r3, [r7, #20]
 8001364:	4413      	add	r3, r2
 8001366:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8001368:	68fb      	ldr	r3, [r7, #12]
 800136a:	f103 0018 	add.w	r0, r3, #24
 800136e:	f107 0212 	add.w	r2, r7, #18
 8001372:	2302      	movs	r3, #2
 8001374:	2126      	movs	r1, #38	@ 0x26
 8001376:	f000 fdd5 	bl	8001f24 <wm8994_write_reg>
 800137a:	4602      	mov	r2, r0
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	4413      	add	r3, r2
 8001380:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8001382:	68fb      	ldr	r3, [r7, #12]
 8001384:	f103 0018 	add.w	r0, r3, #24
 8001388:	f107 0212 	add.w	r2, r7, #18
 800138c:	2302      	movs	r3, #2
 800138e:	2127      	movs	r1, #39	@ 0x27
 8001390:	f000 fdc8 	bl	8001f24 <wm8994_write_reg>
 8001394:	4602      	mov	r2, r0
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	4413      	add	r3, r2
 800139a:	617b      	str	r3, [r7, #20]
 800139c:	e083      	b.n	80014a6 <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d105      	bne.n	80013b0 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 80013a4:	2101      	movs	r1, #1
 80013a6:	68f8      	ldr	r0, [r7, #12]
 80013a8:	f000 f8da 	bl	8001560 <WM8994_SetMute>
 80013ac:	6178      	str	r0, [r7, #20]
 80013ae:	e07a      	b.n	80014a6 <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80013b0:	2100      	movs	r1, #0
 80013b2:	68f8      	ldr	r0, [r7, #12]
 80013b4:	f000 f8d4 	bl	8001560 <WM8994_SetMute>
 80013b8:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 80013ba:	79fb      	ldrb	r3, [r7, #7]
 80013bc:	b29b      	uxth	r3, r3
 80013be:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 80013c6:	68fb      	ldr	r3, [r7, #12]
 80013c8:	f103 0018 	add.w	r0, r3, #24
 80013cc:	f107 0212 	add.w	r2, r7, #18
 80013d0:	2302      	movs	r3, #2
 80013d2:	211c      	movs	r1, #28
 80013d4:	f000 fda6 	bl	8001f24 <wm8994_write_reg>
 80013d8:	4602      	mov	r2, r0
 80013da:	697b      	ldr	r3, [r7, #20]
 80013dc:	4413      	add	r3, r2
 80013de:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 80013e0:	68fb      	ldr	r3, [r7, #12]
 80013e2:	f103 0018 	add.w	r0, r3, #24
 80013e6:	f107 0212 	add.w	r2, r7, #18
 80013ea:	2302      	movs	r3, #2
 80013ec:	211d      	movs	r1, #29
 80013ee:	f000 fd99 	bl	8001f24 <wm8994_write_reg>
 80013f2:	4602      	mov	r2, r0
 80013f4:	697b      	ldr	r3, [r7, #20]
 80013f6:	4413      	add	r3, r2
 80013f8:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f103 0018 	add.w	r0, r3, #24
 8001400:	f107 0212 	add.w	r2, r7, #18
 8001404:	2302      	movs	r3, #2
 8001406:	2126      	movs	r1, #38	@ 0x26
 8001408:	f000 fd8c 	bl	8001f24 <wm8994_write_reg>
 800140c:	4602      	mov	r2, r0
 800140e:	697b      	ldr	r3, [r7, #20]
 8001410:	4413      	add	r3, r2
 8001412:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8001414:	68fb      	ldr	r3, [r7, #12]
 8001416:	f103 0018 	add.w	r0, r3, #24
 800141a:	f107 0212 	add.w	r2, r7, #18
 800141e:	2302      	movs	r3, #2
 8001420:	2127      	movs	r1, #39	@ 0x27
 8001422:	f000 fd7f 	bl	8001f24 <wm8994_write_reg>
 8001426:	4602      	mov	r2, r0
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	4413      	add	r3, r2
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	e03a      	b.n	80014a6 <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8001430:	79fb      	ldrb	r3, [r7, #7]
 8001432:	b29b      	uxth	r3, r3
 8001434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001438:	b29b      	uxth	r3, r3
 800143a:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 800143c:	68fb      	ldr	r3, [r7, #12]
 800143e:	f103 0018 	add.w	r0, r3, #24
 8001442:	f107 0212 	add.w	r2, r7, #18
 8001446:	2302      	movs	r3, #2
 8001448:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 800144c:	f000 fd6a 	bl	8001f24 <wm8994_write_reg>
 8001450:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8001452:	68fb      	ldr	r3, [r7, #12]
 8001454:	f103 0018 	add.w	r0, r3, #24
 8001458:	f107 0212 	add.w	r2, r7, #18
 800145c:	2302      	movs	r3, #2
 800145e:	f240 4101 	movw	r1, #1025	@ 0x401
 8001462:	f000 fd5f 	bl	8001f24 <wm8994_write_reg>
 8001466:	4602      	mov	r2, r0
 8001468:	697b      	ldr	r3, [r7, #20]
 800146a:	4413      	add	r3, r2
 800146c:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 800146e:	68fb      	ldr	r3, [r7, #12]
 8001470:	f103 0018 	add.w	r0, r3, #24
 8001474:	f107 0212 	add.w	r2, r7, #18
 8001478:	2302      	movs	r3, #2
 800147a:	f240 4104 	movw	r1, #1028	@ 0x404
 800147e:	f000 fd51 	bl	8001f24 <wm8994_write_reg>
 8001482:	4602      	mov	r2, r0
 8001484:	697b      	ldr	r3, [r7, #20]
 8001486:	4413      	add	r3, r2
 8001488:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	f103 0018 	add.w	r0, r3, #24
 8001490:	f107 0212 	add.w	r2, r7, #18
 8001494:	2302      	movs	r3, #2
 8001496:	f240 4105 	movw	r1, #1029	@ 0x405
 800149a:	f000 fd43 	bl	8001f24 <wm8994_write_reg>
 800149e:	4602      	mov	r2, r0
 80014a0:	697b      	ldr	r3, [r7, #20]
 80014a2:	4413      	add	r3, r2
 80014a4:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 80014a6:	697b      	ldr	r3, [r7, #20]
 80014a8:	2b00      	cmp	r3, #0
 80014aa:	d002      	beq.n	80014b2 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 80014ac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014b0:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 80014b2:	697b      	ldr	r3, [r7, #20]
}
 80014b4:	4618      	mov	r0, r3
 80014b6:	3718      	adds	r7, #24
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}

080014bc <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 80014bc:	b580      	push	{r7, lr}
 80014be:	b086      	sub	sp, #24
 80014c0:	af00      	add	r7, sp, #0
 80014c2:	60f8      	str	r0, [r7, #12]
 80014c4:	60b9      	str	r1, [r7, #8]
 80014c6:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 80014cc:	68bb      	ldr	r3, [r7, #8]
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d11e      	bne.n	8001510 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 80014d2:	68fb      	ldr	r3, [r7, #12]
 80014d4:	3318      	adds	r3, #24
 80014d6:	f107 0212 	add.w	r2, r7, #18
 80014da:	4611      	mov	r1, r2
 80014dc:	4618      	mov	r0, r3
 80014de:	f000 fd6a 	bl	8001fb6 <wm8994_lo_hpout1l_vol_r>
 80014e2:	4603      	mov	r3, r0
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	d003      	beq.n	80014f0 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 80014e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80014ec:	617b      	str	r3, [r7, #20]
 80014ee:	e02d      	b.n	800154c <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 80014f0:	8a7b      	ldrh	r3, [r7, #18]
 80014f2:	461a      	mov	r2, r3
 80014f4:	2364      	movs	r3, #100	@ 0x64
 80014f6:	fb02 f303 	mul.w	r3, r2, r3
 80014fa:	4a17      	ldr	r2, [pc, #92]	@ (8001558 <WM8994_GetVolume+0x9c>)
 80014fc:	fb82 1203 	smull	r1, r2, r2, r3
 8001500:	441a      	add	r2, r3
 8001502:	1152      	asrs	r2, r2, #5
 8001504:	17db      	asrs	r3, r3, #31
 8001506:	1ad3      	subs	r3, r2, r3
 8001508:	b2da      	uxtb	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	701a      	strb	r2, [r3, #0]
 800150e:	e01d      	b.n	800154c <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8001510:	68fb      	ldr	r3, [r7, #12]
 8001512:	3318      	adds	r3, #24
 8001514:	f107 0212 	add.w	r2, r7, #18
 8001518:	4611      	mov	r1, r2
 800151a:	4618      	mov	r0, r3
 800151c:	f000 fe63 	bl	80021e6 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d003      	beq.n	800152e <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 8001526:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800152a:	617b      	str	r3, [r7, #20]
 800152c:	e00e      	b.n	800154c <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 800152e:	8a7b      	ldrh	r3, [r7, #18]
 8001530:	461a      	mov	r2, r3
 8001532:	2364      	movs	r3, #100	@ 0x64
 8001534:	fb02 f303 	mul.w	r3, r2, r3
 8001538:	4a08      	ldr	r2, [pc, #32]	@ (800155c <WM8994_GetVolume+0xa0>)
 800153a:	fb82 1203 	smull	r1, r2, r2, r3
 800153e:	441a      	add	r2, r3
 8001540:	11d2      	asrs	r2, r2, #7
 8001542:	17db      	asrs	r3, r3, #31
 8001544:	1ad3      	subs	r3, r2, r3
 8001546:	b2da      	uxtb	r2, r3
 8001548:	687b      	ldr	r3, [r7, #4]
 800154a:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 800154c:	697b      	ldr	r3, [r7, #20]
}
 800154e:	4618      	mov	r0, r3
 8001550:	3718      	adds	r7, #24
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	82082083 	.word	0x82082083
 800155c:	891ac73b 	.word	0x891ac73b

08001560 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b084      	sub	sp, #16
 8001564:	af00      	add	r7, sp, #0
 8001566:	6078      	str	r0, [r7, #4]
 8001568:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	2b01      	cmp	r3, #1
 800156e:	d11c      	bne.n	80015aa <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 8001570:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001574:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	f103 0018 	add.w	r0, r3, #24
 800157c:	f107 020a 	add.w	r2, r7, #10
 8001580:	2302      	movs	r3, #2
 8001582:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001586:	f000 fccd 	bl	8001f24 <wm8994_write_reg>
 800158a:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	f103 0018 	add.w	r0, r3, #24
 8001592:	f107 020a 	add.w	r2, r7, #10
 8001596:	2302      	movs	r3, #2
 8001598:	f240 4122 	movw	r1, #1058	@ 0x422
 800159c:	f000 fcc2 	bl	8001f24 <wm8994_write_reg>
 80015a0:	4602      	mov	r2, r0
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	4413      	add	r3, r2
 80015a6:	60fb      	str	r3, [r7, #12]
 80015a8:	e01a      	b.n	80015e0 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 80015aa:	2310      	movs	r3, #16
 80015ac:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	f103 0018 	add.w	r0, r3, #24
 80015b4:	f107 020a 	add.w	r2, r7, #10
 80015b8:	2302      	movs	r3, #2
 80015ba:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80015be:	f000 fcb1 	bl	8001f24 <wm8994_write_reg>
 80015c2:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	f103 0018 	add.w	r0, r3, #24
 80015ca:	f107 020a 	add.w	r2, r7, #10
 80015ce:	2302      	movs	r3, #2
 80015d0:	f240 4122 	movw	r1, #1058	@ 0x422
 80015d4:	f000 fca6 	bl	8001f24 <wm8994_write_reg>
 80015d8:	4602      	mov	r2, r0
 80015da:	68fb      	ldr	r3, [r7, #12]
 80015dc:	4413      	add	r3, r2
 80015de:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d002      	beq.n	80015ec <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 80015e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015ea:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80015ec:	68fb      	ldr	r3, [r7, #12]
}
 80015ee:	4618      	mov	r0, r3
 80015f0:	3710      	adds	r7, #16
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}

080015f6 <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 80015f6:	b580      	push	{r7, lr}
 80015f8:	b084      	sub	sp, #16
 80015fa:	af00      	add	r7, sp, #0
 80015fc:	6078      	str	r0, [r7, #4]
 80015fe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	2b02      	cmp	r3, #2
 8001604:	d003      	beq.n	800160e <WM8994_SetOutputMode+0x18>
 8001606:	683b      	ldr	r3, [r7, #0]
 8001608:	2b04      	cmp	r3, #4
 800160a:	f040 809c 	bne.w	8001746 <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 800160e:	2300      	movs	r3, #0
 8001610:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	f103 0018 	add.w	r0, r3, #24
 8001618:	f107 020a 	add.w	r2, r7, #10
 800161c:	2302      	movs	r3, #2
 800161e:	2101      	movs	r1, #1
 8001620:	f000 fc80 	bl	8001f24 <wm8994_write_reg>
 8001624:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8001626:	f240 3303 	movw	r3, #771	@ 0x303
 800162a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	f103 0018 	add.w	r0, r3, #24
 8001632:	f107 020a 	add.w	r2, r7, #10
 8001636:	2302      	movs	r3, #2
 8001638:	2105      	movs	r1, #5
 800163a:	f000 fc73 	bl	8001f24 <wm8994_write_reg>
 800163e:	4602      	mov	r2, r0
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8001646:	2301      	movs	r3, #1
 8001648:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	f103 0018 	add.w	r0, r3, #24
 8001650:	f107 020a 	add.w	r2, r7, #10
 8001654:	2302      	movs	r3, #2
 8001656:	f240 6101 	movw	r1, #1537	@ 0x601
 800165a:	f000 fc63 	bl	8001f24 <wm8994_write_reg>
 800165e:	4602      	mov	r2, r0
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	4413      	add	r3, r2
 8001664:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	f103 0018 	add.w	r0, r3, #24
 800166c:	f107 020a 	add.w	r2, r7, #10
 8001670:	2302      	movs	r3, #2
 8001672:	f240 6102 	movw	r1, #1538	@ 0x602
 8001676:	f000 fc55 	bl	8001f24 <wm8994_write_reg>
 800167a:	4602      	mov	r2, r0
 800167c:	68fb      	ldr	r3, [r7, #12]
 800167e:	4413      	add	r3, r2
 8001680:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8001682:	2300      	movs	r3, #0
 8001684:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	f103 0018 	add.w	r0, r3, #24
 800168c:	f107 020a 	add.w	r2, r7, #10
 8001690:	2302      	movs	r3, #2
 8001692:	f240 6104 	movw	r1, #1540	@ 0x604
 8001696:	f000 fc45 	bl	8001f24 <wm8994_write_reg>
 800169a:	4602      	mov	r2, r0
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	4413      	add	r3, r2
 80016a0:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	f103 0018 	add.w	r0, r3, #24
 80016a8:	f107 020a 	add.w	r2, r7, #10
 80016ac:	2302      	movs	r3, #2
 80016ae:	f240 6105 	movw	r1, #1541	@ 0x605
 80016b2:	f000 fc37 	bl	8001f24 <wm8994_write_reg>
 80016b6:	4602      	mov	r2, r0
 80016b8:	68fb      	ldr	r3, [r7, #12]
 80016ba:	4413      	add	r3, r2
 80016bc:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 80016be:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80016c2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	f103 0018 	add.w	r0, r3, #24
 80016ca:	f107 020a 	add.w	r2, r7, #10
 80016ce:	2302      	movs	r3, #2
 80016d0:	212d      	movs	r1, #45	@ 0x2d
 80016d2:	f000 fc27 	bl	8001f24 <wm8994_write_reg>
 80016d6:	4602      	mov	r2, r0
 80016d8:	68fb      	ldr	r3, [r7, #12]
 80016da:	4413      	add	r3, r2
 80016dc:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	f103 0018 	add.w	r0, r3, #24
 80016e4:	f107 020a 	add.w	r2, r7, #10
 80016e8:	2302      	movs	r3, #2
 80016ea:	212e      	movs	r1, #46	@ 0x2e
 80016ec:	f000 fc1a 	bl	8001f24 <wm8994_write_reg>
 80016f0:	4602      	mov	r2, r0
 80016f2:	68fb      	ldr	r3, [r7, #12]
 80016f4:	4413      	add	r3, r2
 80016f6:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 80016f8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80016fc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f103 0018 	add.w	r0, r3, #24
 8001704:	f107 020a 	add.w	r2, r7, #10
 8001708:	2302      	movs	r3, #2
 800170a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800170e:	f000 fc09 	bl	8001f24 <wm8994_write_reg>
 8001712:	4602      	mov	r2, r0
 8001714:	68fb      	ldr	r3, [r7, #12]
 8001716:	4413      	add	r3, r2
 8001718:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 800171a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 800171e:	6878      	ldr	r0, [r7, #4]
 8001720:	f000 fb88 	bl	8001e34 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 8001724:	2300      	movs	r3, #0
 8001726:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	f103 0018 	add.w	r0, r3, #24
 800172e:	f107 020a 	add.w	r2, r7, #10
 8001732:	2302      	movs	r3, #2
 8001734:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8001738:	f000 fbf4 	bl	8001f24 <wm8994_write_reg>
 800173c:	4602      	mov	r2, r0
 800173e:	68fb      	ldr	r3, [r7, #12]
 8001740:	4413      	add	r3, r2
 8001742:	60fb      	str	r3, [r7, #12]
 8001744:	e165      	b.n	8001a12 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 8001746:	683b      	ldr	r3, [r7, #0]
 8001748:	2b01      	cmp	r3, #1
 800174a:	d149      	bne.n	80017e0 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 800174c:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8001750:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	f103 0018 	add.w	r0, r3, #24
 8001758:	f107 020a 	add.w	r2, r7, #10
 800175c:	2302      	movs	r3, #2
 800175e:	2105      	movs	r1, #5
 8001760:	f000 fbe0 	bl	8001f24 <wm8994_write_reg>
 8001764:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 8001766:	2300      	movs	r3, #0
 8001768:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	f103 0018 	add.w	r0, r3, #24
 8001770:	f107 020a 	add.w	r2, r7, #10
 8001774:	2302      	movs	r3, #2
 8001776:	f240 6101 	movw	r1, #1537	@ 0x601
 800177a:	f000 fbd3 	bl	8001f24 <wm8994_write_reg>
 800177e:	4602      	mov	r2, r0
 8001780:	68fb      	ldr	r3, [r7, #12]
 8001782:	4413      	add	r3, r2
 8001784:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	f103 0018 	add.w	r0, r3, #24
 800178c:	f107 020a 	add.w	r2, r7, #10
 8001790:	2302      	movs	r3, #2
 8001792:	f240 6102 	movw	r1, #1538	@ 0x602
 8001796:	f000 fbc5 	bl	8001f24 <wm8994_write_reg>
 800179a:	4602      	mov	r2, r0
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	4413      	add	r3, r2
 80017a0:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 80017a2:	2302      	movs	r3, #2
 80017a4:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	f103 0018 	add.w	r0, r3, #24
 80017ac:	f107 020a 	add.w	r2, r7, #10
 80017b0:	2302      	movs	r3, #2
 80017b2:	f240 6104 	movw	r1, #1540	@ 0x604
 80017b6:	f000 fbb5 	bl	8001f24 <wm8994_write_reg>
 80017ba:	4602      	mov	r2, r0
 80017bc:	68fb      	ldr	r3, [r7, #12]
 80017be:	4413      	add	r3, r2
 80017c0:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	f103 0018 	add.w	r0, r3, #24
 80017c8:	f107 020a 	add.w	r2, r7, #10
 80017cc:	2302      	movs	r3, #2
 80017ce:	f240 6105 	movw	r1, #1541	@ 0x605
 80017d2:	f000 fba7 	bl	8001f24 <wm8994_write_reg>
 80017d6:	4602      	mov	r2, r0
 80017d8:	68fb      	ldr	r3, [r7, #12]
 80017da:	4413      	add	r3, r2
 80017dc:	60fb      	str	r3, [r7, #12]
      break;
 80017de:	e03b      	b.n	8001858 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 80017e0:	f640 730f 	movw	r3, #3855	@ 0xf0f
 80017e4:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80017e6:	687b      	ldr	r3, [r7, #4]
 80017e8:	f103 0018 	add.w	r0, r3, #24
 80017ec:	f107 020a 	add.w	r2, r7, #10
 80017f0:	2302      	movs	r3, #2
 80017f2:	2105      	movs	r1, #5
 80017f4:	f000 fb96 	bl	8001f24 <wm8994_write_reg>
 80017f8:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 80017fa:	2301      	movs	r3, #1
 80017fc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	f103 0018 	add.w	r0, r3, #24
 8001804:	f107 020a 	add.w	r2, r7, #10
 8001808:	2302      	movs	r3, #2
 800180a:	f240 6101 	movw	r1, #1537	@ 0x601
 800180e:	f000 fb89 	bl	8001f24 <wm8994_write_reg>
 8001812:	4602      	mov	r2, r0
 8001814:	68fb      	ldr	r3, [r7, #12]
 8001816:	4413      	add	r3, r2
 8001818:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	f103 0018 	add.w	r0, r3, #24
 8001820:	f107 020a 	add.w	r2, r7, #10
 8001824:	2302      	movs	r3, #2
 8001826:	f240 6102 	movw	r1, #1538	@ 0x602
 800182a:	f000 fb7b 	bl	8001f24 <wm8994_write_reg>
 800182e:	4602      	mov	r2, r0
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	4413      	add	r3, r2
 8001834:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8001836:	2302      	movs	r3, #2
 8001838:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	f103 0018 	add.w	r0, r3, #24
 8001840:	f107 020a 	add.w	r2, r7, #10
 8001844:	2302      	movs	r3, #2
 8001846:	f240 6104 	movw	r1, #1540	@ 0x604
 800184a:	f000 fb6b 	bl	8001f24 <wm8994_write_reg>
 800184e:	4602      	mov	r2, r0
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	4413      	add	r3, r2
 8001854:	60fb      	str	r3, [r7, #12]
      break;
 8001856:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8001858:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800185c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	f103 0018 	add.w	r0, r3, #24
 8001864:	f107 020a 	add.w	r2, r7, #10
 8001868:	2302      	movs	r3, #2
 800186a:	2103      	movs	r1, #3
 800186c:	f000 fb5a 	bl	8001f24 <wm8994_write_reg>
 8001870:	4602      	mov	r2, r0
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	4413      	add	r3, r2
 8001876:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8001878:	2300      	movs	r3, #0
 800187a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	f103 0018 	add.w	r0, r3, #24
 8001882:	f107 020a 	add.w	r2, r7, #10
 8001886:	2302      	movs	r3, #2
 8001888:	2122      	movs	r1, #34	@ 0x22
 800188a:	f000 fb4b 	bl	8001f24 <wm8994_write_reg>
 800188e:	4602      	mov	r2, r0
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	f103 0018 	add.w	r0, r3, #24
 800189c:	f107 020a 	add.w	r2, r7, #10
 80018a0:	2302      	movs	r3, #2
 80018a2:	2123      	movs	r1, #35	@ 0x23
 80018a4:	f000 fb3e 	bl	8001f24 <wm8994_write_reg>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	4413      	add	r3, r2
 80018ae:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 80018b0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80018b4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 80018b6:	687b      	ldr	r3, [r7, #4]
 80018b8:	f103 0018 	add.w	r0, r3, #24
 80018bc:	f107 020a 	add.w	r2, r7, #10
 80018c0:	2302      	movs	r3, #2
 80018c2:	2136      	movs	r1, #54	@ 0x36
 80018c4:	f000 fb2e 	bl	8001f24 <wm8994_write_reg>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	4413      	add	r3, r2
 80018ce:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 80018d0:	f243 0303 	movw	r3, #12291	@ 0x3003
 80018d4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	f103 0018 	add.w	r0, r3, #24
 80018dc:	f107 020a 	add.w	r2, r7, #10
 80018e0:	2302      	movs	r3, #2
 80018e2:	2101      	movs	r1, #1
 80018e4:	f000 fb1e 	bl	8001f24 <wm8994_write_reg>
 80018e8:	4602      	mov	r2, r0
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	4413      	add	r3, r2
 80018ee:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 80018f0:	2305      	movs	r3, #5
 80018f2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	f103 0018 	add.w	r0, r3, #24
 80018fa:	f107 020a 	add.w	r2, r7, #10
 80018fe:	2302      	movs	r3, #2
 8001900:	2151      	movs	r1, #81	@ 0x51
 8001902:	f000 fb0f 	bl	8001f24 <wm8994_write_reg>
 8001906:	4602      	mov	r2, r0
 8001908:	68fb      	ldr	r3, [r7, #12]
 800190a:	4413      	add	r3, r2
 800190c:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 800190e:	f243 3303 	movw	r3, #13059	@ 0x3303
 8001912:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	f103 0018 	add.w	r0, r3, #24
 800191a:	f107 020a 	add.w	r2, r7, #10
 800191e:	2302      	movs	r3, #2
 8001920:	2101      	movs	r1, #1
 8001922:	f000 faff 	bl	8001f24 <wm8994_write_reg>
 8001926:	4602      	mov	r2, r0
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	4413      	add	r3, r2
 800192c:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 800192e:	2322      	movs	r3, #34	@ 0x22
 8001930:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	f103 0018 	add.w	r0, r3, #24
 8001938:	f107 020a 	add.w	r2, r7, #10
 800193c:	2302      	movs	r3, #2
 800193e:	2160      	movs	r1, #96	@ 0x60
 8001940:	f000 faf0 	bl	8001f24 <wm8994_write_reg>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	4413      	add	r3, r2
 800194a:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 800194c:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8001950:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	f103 0018 	add.w	r0, r3, #24
 8001958:	f107 020a 	add.w	r2, r7, #10
 800195c:	2302      	movs	r3, #2
 800195e:	214c      	movs	r1, #76	@ 0x4c
 8001960:	f000 fae0 	bl	8001f24 <wm8994_write_reg>
 8001964:	4602      	mov	r2, r0
 8001966:	68fb      	ldr	r3, [r7, #12]
 8001968:	4413      	add	r3, r2
 800196a:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 800196c:	210f      	movs	r1, #15
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f000 fa60 	bl	8001e34 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8001974:	2301      	movs	r3, #1
 8001976:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	f103 0018 	add.w	r0, r3, #24
 800197e:	f107 020a 	add.w	r2, r7, #10
 8001982:	2302      	movs	r3, #2
 8001984:	212d      	movs	r1, #45	@ 0x2d
 8001986:	f000 facd 	bl	8001f24 <wm8994_write_reg>
 800198a:	4602      	mov	r2, r0
 800198c:	68fb      	ldr	r3, [r7, #12]
 800198e:	4413      	add	r3, r2
 8001990:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	f103 0018 	add.w	r0, r3, #24
 8001998:	f107 020a 	add.w	r2, r7, #10
 800199c:	2302      	movs	r3, #2
 800199e:	212e      	movs	r1, #46	@ 0x2e
 80019a0:	f000 fac0 	bl	8001f24 <wm8994_write_reg>
 80019a4:	4602      	mov	r2, r0
 80019a6:	68fb      	ldr	r3, [r7, #12]
 80019a8:	4413      	add	r3, r2
 80019aa:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 80019ac:	f44f 734c 	mov.w	r3, #816	@ 0x330
 80019b0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	f103 0018 	add.w	r0, r3, #24
 80019b8:	f107 020a 	add.w	r2, r7, #10
 80019bc:	2302      	movs	r3, #2
 80019be:	2103      	movs	r1, #3
 80019c0:	f000 fab0 	bl	8001f24 <wm8994_write_reg>
 80019c4:	4602      	mov	r2, r0
 80019c6:	68fb      	ldr	r3, [r7, #12]
 80019c8:	4413      	add	r3, r2
 80019ca:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 80019cc:	2333      	movs	r3, #51	@ 0x33
 80019ce:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	f103 0018 	add.w	r0, r3, #24
 80019d6:	f107 020a 	add.w	r2, r7, #10
 80019da:	2302      	movs	r3, #2
 80019dc:	2154      	movs	r1, #84	@ 0x54
 80019de:	f000 faa1 	bl	8001f24 <wm8994_write_reg>
 80019e2:	4602      	mov	r2, r0
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	4413      	add	r3, r2
 80019e8:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 80019ea:	f240 1101 	movw	r1, #257	@ 0x101
 80019ee:	6878      	ldr	r0, [r7, #4]
 80019f0:	f000 fa20 	bl	8001e34 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 80019f4:	23ee      	movs	r3, #238	@ 0xee
 80019f6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	f103 0018 	add.w	r0, r3, #24
 80019fe:	f107 020a 	add.w	r2, r7, #10
 8001a02:	2302      	movs	r3, #2
 8001a04:	2160      	movs	r1, #96	@ 0x60
 8001a06:	f000 fa8d 	bl	8001f24 <wm8994_write_reg>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	68fb      	ldr	r3, [r7, #12]
 8001a0e:	4413      	add	r3, r2
 8001a10:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	2b00      	cmp	r3, #0
 8001a16:	d002      	beq.n	8001a1e <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8001a18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a1c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001a1e:	68fb      	ldr	r3, [r7, #12]
}
 8001a20:	4618      	mov	r0, r3
 8001a22:	3710      	adds	r7, #16
 8001a24:	46bd      	mov	sp, r7
 8001a26:	bd80      	pop	{r7, pc}

08001a28 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b084      	sub	sp, #16
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8001a32:	2300      	movs	r3, #0
 8001a34:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	3318      	adds	r3, #24
 8001a3a:	683a      	ldr	r2, [r7, #0]
 8001a3c:	b292      	uxth	r2, r2
 8001a3e:	4611      	mov	r1, r2
 8001a40:	4618      	mov	r0, r3
 8001a42:	f000 fb4c 	bl	80020de <wm8994_aif1_control1_wl>
 8001a46:	4603      	mov	r3, r0
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d002      	beq.n	8001a52 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 8001a4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a50:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8001a52:	68fb      	ldr	r3, [r7, #12]
}
 8001a54:	4618      	mov	r0, r3
 8001a56:	3710      	adds	r7, #16
 8001a58:	46bd      	mov	sp, r7
 8001a5a:	bd80      	pop	{r7, pc}

08001a5c <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 8001a5c:	b580      	push	{r7, lr}
 8001a5e:	b084      	sub	sp, #16
 8001a60:	af00      	add	r7, sp, #0
 8001a62:	6078      	str	r0, [r7, #4]
 8001a64:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001a66:	2300      	movs	r3, #0
 8001a68:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 8001a6a:	2300      	movs	r3, #0
 8001a6c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	3318      	adds	r3, #24
 8001a72:	f107 020a 	add.w	r2, r7, #10
 8001a76:	4611      	mov	r1, r2
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f000 fb61 	bl	8002140 <wm8994_aif1_control1_wl_r>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d003      	beq.n	8001a8c <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8001a84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	e021      	b.n	8001ad0 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 8001a8c:	897b      	ldrh	r3, [r7, #10]
 8001a8e:	2b03      	cmp	r3, #3
 8001a90:	d81a      	bhi.n	8001ac8 <WM8994_GetResolution+0x6c>
 8001a92:	a201      	add	r2, pc, #4	@ (adr r2, 8001a98 <WM8994_GetResolution+0x3c>)
 8001a94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a98:	08001aa9 	.word	0x08001aa9
 8001a9c:	08001ab1 	.word	0x08001ab1
 8001aa0:	08001ab9 	.word	0x08001ab9
 8001aa4:	08001ac1 	.word	0x08001ac1
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8001aa8:	683b      	ldr	r3, [r7, #0]
 8001aaa:	2200      	movs	r2, #0
 8001aac:	601a      	str	r2, [r3, #0]
      break;
 8001aae:	e00f      	b.n	8001ad0 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 8001ab0:	683b      	ldr	r3, [r7, #0]
 8001ab2:	2201      	movs	r2, #1
 8001ab4:	601a      	str	r2, [r3, #0]
      break;
 8001ab6:	e00b      	b.n	8001ad0 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	2202      	movs	r2, #2
 8001abc:	601a      	str	r2, [r3, #0]
      break;
 8001abe:	e007      	b.n	8001ad0 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	2203      	movs	r2, #3
 8001ac4:	601a      	str	r2, [r3, #0]
      break; 
 8001ac6:	e003      	b.n	8001ad0 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 8001ac8:	683b      	ldr	r3, [r7, #0]
 8001aca:	2200      	movs	r2, #0
 8001acc:	601a      	str	r2, [r3, #0]
      break;
 8001ace:	bf00      	nop
    }
  }
  
  return ret;
 8001ad0:	68fb      	ldr	r3, [r7, #12]
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3710      	adds	r7, #16
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop

08001adc <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 8001ae6:	2300      	movs	r3, #0
 8001ae8:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	3318      	adds	r3, #24
 8001aee:	683a      	ldr	r2, [r7, #0]
 8001af0:	b292      	uxth	r2, r2
 8001af2:	4611      	mov	r1, r2
 8001af4:	4618      	mov	r0, r3
 8001af6:	f000 fa9f 	bl	8002038 <wm8994_aif1_control1_fmt>
 8001afa:	4603      	mov	r3, r0
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d002      	beq.n	8001b06 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 8001b00:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b04:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001b06:	68fb      	ldr	r3, [r7, #12]
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	3710      	adds	r7, #16
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	bd80      	pop	{r7, pc}

08001b10 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
 8001b18:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	3318      	adds	r3, #24
 8001b22:	f107 020a 	add.w	r2, r7, #10
 8001b26:	4611      	mov	r1, r2
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f000 fab6 	bl	800209a <wm8994_aif1_control1_fmt_r>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e003      	b.n	8001b44 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 8001b3c:	897b      	ldrh	r3, [r7, #10]
 8001b3e:	461a      	mov	r2, r3
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8001b44:	68fb      	ldr	r3, [r7, #12]
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	3710      	adds	r7, #16
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	bd80      	pop	{r7, pc}
	...

08001b50 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
 8001b58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	4a55      	ldr	r2, [pc, #340]	@ (8001cb4 <WM8994_SetFrequency+0x164>)
 8001b5e:	4293      	cmp	r3, r2
 8001b60:	d05d      	beq.n	8001c1e <WM8994_SetFrequency+0xce>
 8001b62:	683b      	ldr	r3, [r7, #0]
 8001b64:	4a53      	ldr	r2, [pc, #332]	@ (8001cb4 <WM8994_SetFrequency+0x164>)
 8001b66:	4293      	cmp	r3, r2
 8001b68:	f200 8091 	bhi.w	8001c8e <WM8994_SetFrequency+0x13e>
 8001b6c:	683b      	ldr	r3, [r7, #0]
 8001b6e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001b72:	4293      	cmp	r3, r2
 8001b74:	d07d      	beq.n	8001c72 <WM8994_SetFrequency+0x122>
 8001b76:	683b      	ldr	r3, [r7, #0]
 8001b78:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001b7c:	4293      	cmp	r3, r2
 8001b7e:	f200 8086 	bhi.w	8001c8e <WM8994_SetFrequency+0x13e>
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001b88:	d03b      	beq.n	8001c02 <WM8994_SetFrequency+0xb2>
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8001b90:	d87d      	bhi.n	8001c8e <WM8994_SetFrequency+0x13e>
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d05c      	beq.n	8001c56 <WM8994_SetFrequency+0x106>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001ba2:	4293      	cmp	r3, r2
 8001ba4:	d873      	bhi.n	8001c8e <WM8994_SetFrequency+0x13e>
 8001ba6:	683b      	ldr	r3, [r7, #0]
 8001ba8:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001bac:	d01b      	beq.n	8001be6 <WM8994_SetFrequency+0x96>
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 8001bb4:	d86b      	bhi.n	8001c8e <WM8994_SetFrequency+0x13e>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8001bbc:	d005      	beq.n	8001bca <WM8994_SetFrequency+0x7a>
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001bc4:	4293      	cmp	r3, r2
 8001bc6:	d038      	beq.n	8001c3a <WM8994_SetFrequency+0xea>
 8001bc8:	e061      	b.n	8001c8e <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 8001bca:	2303      	movs	r3, #3
 8001bcc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f103 0018 	add.w	r0, r3, #24
 8001bd4:	f107 020a 	add.w	r2, r7, #10
 8001bd8:	2302      	movs	r3, #2
 8001bda:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001bde:	f000 f9a1 	bl	8001f24 <wm8994_write_reg>
 8001be2:	60f8      	str	r0, [r7, #12]
    break;
 8001be4:	e061      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 8001be6:	2333      	movs	r3, #51	@ 0x33
 8001be8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	f103 0018 	add.w	r0, r3, #24
 8001bf0:	f107 020a 	add.w	r2, r7, #10
 8001bf4:	2302      	movs	r3, #2
 8001bf6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001bfa:	f000 f993 	bl	8001f24 <wm8994_write_reg>
 8001bfe:	60f8      	str	r0, [r7, #12]
    break;
 8001c00:	e053      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 8001c02:	2363      	movs	r3, #99	@ 0x63
 8001c04:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	f103 0018 	add.w	r0, r3, #24
 8001c0c:	f107 020a 	add.w	r2, r7, #10
 8001c10:	2302      	movs	r3, #2
 8001c12:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c16:	f000 f985 	bl	8001f24 <wm8994_write_reg>
 8001c1a:	60f8      	str	r0, [r7, #12]
    break;
 8001c1c:	e045      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 8001c1e:	23a3      	movs	r3, #163	@ 0xa3
 8001c20:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	f103 0018 	add.w	r0, r3, #24
 8001c28:	f107 020a 	add.w	r2, r7, #10
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c32:	f000 f977 	bl	8001f24 <wm8994_write_reg>
 8001c36:	60f8      	str	r0, [r7, #12]
    break;
 8001c38:	e037      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 8001c3a:	2313      	movs	r3, #19
 8001c3c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	f103 0018 	add.w	r0, r3, #24
 8001c44:	f107 020a 	add.w	r2, r7, #10
 8001c48:	2302      	movs	r3, #2
 8001c4a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c4e:	f000 f969 	bl	8001f24 <wm8994_write_reg>
 8001c52:	60f8      	str	r0, [r7, #12]
    break;
 8001c54:	e029      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8001c56:	2343      	movs	r3, #67	@ 0x43
 8001c58:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	f103 0018 	add.w	r0, r3, #24
 8001c60:	f107 020a 	add.w	r2, r7, #10
 8001c64:	2302      	movs	r3, #2
 8001c66:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c6a:	f000 f95b 	bl	8001f24 <wm8994_write_reg>
 8001c6e:	60f8      	str	r0, [r7, #12]
    break;
 8001c70:	e01b      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8001c72:	2373      	movs	r3, #115	@ 0x73
 8001c74:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f103 0018 	add.w	r0, r3, #24
 8001c7c:	f107 020a 	add.w	r2, r7, #10
 8001c80:	2302      	movs	r3, #2
 8001c82:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001c86:	f000 f94d 	bl	8001f24 <wm8994_write_reg>
 8001c8a:	60f8      	str	r0, [r7, #12]
    break; 
 8001c8c:	e00d      	b.n	8001caa <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 8001c8e:	2383      	movs	r3, #131	@ 0x83
 8001c90:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	f103 0018 	add.w	r0, r3, #24
 8001c98:	f107 020a 	add.w	r2, r7, #10
 8001c9c:	2302      	movs	r3, #2
 8001c9e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8001ca2:	f000 f93f 	bl	8001f24 <wm8994_write_reg>
 8001ca6:	60f8      	str	r0, [r7, #12]
    break; 
 8001ca8:	bf00      	nop
  }
  
  return ret;
 8001caa:	68fb      	ldr	r3, [r7, #12]
}
 8001cac:	4618      	mov	r0, r3
 8001cae:	3710      	adds	r7, #16
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd80      	pop	{r7, pc}
 8001cb4:	00017700 	.word	0x00017700

08001cb8 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	3318      	adds	r3, #24
 8001cce:	f107 020a 	add.w	r2, r7, #10
 8001cd2:	4611      	mov	r1, r2
 8001cd4:	4618      	mov	r0, r3
 8001cd6:	f000 f98d 	bl	8001ff4 <wm8994_aif1_sr_r>
 8001cda:	4603      	mov	r3, r0
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	d003      	beq.n	8001ce8 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 8001ce0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ce4:	60fb      	str	r3, [r7, #12]
 8001ce6:	e043      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 8001ce8:	897b      	ldrh	r3, [r7, #10]
 8001cea:	2b0a      	cmp	r3, #10
 8001cec:	d83f      	bhi.n	8001d6e <WM8994_GetFrequency+0xb6>
 8001cee:	a201      	add	r2, pc, #4	@ (adr r2, 8001cf4 <WM8994_GetFrequency+0x3c>)
 8001cf0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cf4:	08001d21 	.word	0x08001d21
 8001cf8:	08001d2b 	.word	0x08001d2b
 8001cfc:	08001d6f 	.word	0x08001d6f
 8001d00:	08001d35 	.word	0x08001d35
 8001d04:	08001d3f 	.word	0x08001d3f
 8001d08:	08001d6f 	.word	0x08001d6f
 8001d0c:	08001d49 	.word	0x08001d49
 8001d10:	08001d53 	.word	0x08001d53
 8001d14:	08001d5d 	.word	0x08001d5d
 8001d18:	08001d6f 	.word	0x08001d6f
 8001d1c:	08001d67 	.word	0x08001d67
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8001d26:	601a      	str	r2, [r3, #0]
      break;
 8001d28:	e022      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 8001d2a:	683b      	ldr	r3, [r7, #0]
 8001d2c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8001d30:	601a      	str	r2, [r3, #0]
      break;    
 8001d32:	e01d      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8001d34:	683b      	ldr	r3, [r7, #0]
 8001d36:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 8001d3a:	601a      	str	r2, [r3, #0]
      break;
 8001d3c:	e018      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 8001d3e:	683b      	ldr	r3, [r7, #0]
 8001d40:	f245 6222 	movw	r2, #22050	@ 0x5622
 8001d44:	601a      	str	r2, [r3, #0]
      break; 
 8001d46:	e013      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8001d48:	683b      	ldr	r3, [r7, #0]
 8001d4a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 8001d4e:	601a      	str	r2, [r3, #0]
      break; 
 8001d50:	e00e      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8001d52:	683b      	ldr	r3, [r7, #0]
 8001d54:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8001d58:	601a      	str	r2, [r3, #0]
      break;    
 8001d5a:	e009      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8001d62:	601a      	str	r2, [r3, #0]
      break;
 8001d64:	e004      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	4a04      	ldr	r2, [pc, #16]	@ (8001d7c <WM8994_GetFrequency+0xc4>)
 8001d6a:	601a      	str	r2, [r3, #0]
      break;    
 8001d6c:	e000      	b.n	8001d70 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 8001d6e:	bf00      	nop
    }
  }
  
  return ret;
 8001d70:	68fb      	ldr	r3, [r7, #12]
}
 8001d72:	4618      	mov	r0, r3
 8001d74:	3710      	adds	r7, #16
 8001d76:	46bd      	mov	sp, r7
 8001d78:	bd80      	pop	{r7, pc}
 8001d7a:	bf00      	nop
 8001d7c:	00017700 	.word	0x00017700

08001d80 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8001d80:	b580      	push	{r7, lr}
 8001d82:	b084      	sub	sp, #16
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8001d88:	2300      	movs	r3, #0
 8001d8a:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	3318      	adds	r3, #24
 8001d90:	2100      	movs	r1, #0
 8001d92:	4618      	mov	r0, r3
 8001d94:	f000 f8ee 	bl	8001f74 <wm8994_sw_reset_w>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d002      	beq.n	8001da4 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 8001d9e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001da2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001da4:	68fb      	ldr	r3, [r7, #12]
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3710      	adds	r7, #16
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
	...

08001db0 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	b084      	sub	sp, #16
 8001db4:	af00      	add	r7, sp, #0
 8001db6:	6078      	str	r0, [r7, #4]
 8001db8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d103      	bne.n	8001dc8 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 8001dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001dc4:	60fb      	str	r3, [r7, #12]
 8001dc6:	e02c      	b.n	8001e22 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8001dc8:	683b      	ldr	r3, [r7, #0]
 8001dca:	681a      	ldr	r2, [r3, #0]
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	685a      	ldr	r2, [r3, #4]
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	891a      	ldrh	r2, [r3, #8]
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001de0:	683b      	ldr	r3, [r7, #0]
 8001de2:	68da      	ldr	r2, [r3, #12]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001de8:	683b      	ldr	r3, [r7, #0]
 8001dea:	691a      	ldr	r2, [r3, #16]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	695a      	ldr	r2, [r3, #20]
 8001df4:	687b      	ldr	r3, [r7, #4]
 8001df6:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	4a0c      	ldr	r2, [pc, #48]	@ (8001e2c <WM8994_RegisterBusIO+0x7c>)
 8001dfc:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	4a0b      	ldr	r2, [pc, #44]	@ (8001e30 <WM8994_RegisterBusIO+0x80>)
 8001e02:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	687a      	ldr	r2, [r7, #4]
 8001e08:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d004      	beq.n	8001e1c <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	4798      	blx	r3
 8001e18:	60f8      	str	r0, [r7, #12]
 8001e1a:	e002      	b.n	8001e22 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 8001e1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001e20:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8001e22:	68fb      	ldr	r3, [r7, #12]
}
 8001e24:	4618      	mov	r0, r3
 8001e26:	3710      	adds	r7, #16
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bd80      	pop	{r7, pc}
 8001e2c:	08001e69 	.word	0x08001e69
 8001e30:	08001e9b 	.word	0x08001e9b

08001e34 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b084      	sub	sp, #16
 8001e38:	af00      	add	r7, sp, #0
 8001e3a:	6078      	str	r0, [r7, #4]
 8001e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	4798      	blx	r3
 8001e44:	4603      	mov	r3, r0
 8001e46:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001e48:	bf00      	nop
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	695b      	ldr	r3, [r3, #20]
 8001e4e:	4798      	blx	r3
 8001e50:	4603      	mov	r3, r0
 8001e52:	461a      	mov	r2, r3
 8001e54:	68fb      	ldr	r3, [r7, #12]
 8001e56:	1ad3      	subs	r3, r2, r3
 8001e58:	683a      	ldr	r2, [r7, #0]
 8001e5a:	429a      	cmp	r2, r3
 8001e5c:	d8f5      	bhi.n	8001e4a <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 8001e5e:	2300      	movs	r3, #0
}
 8001e60:	4618      	mov	r0, r3
 8001e62:	3710      	adds	r7, #16
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001e68:	b590      	push	{r4, r7, lr}
 8001e6a:	b087      	sub	sp, #28
 8001e6c:	af00      	add	r7, sp, #0
 8001e6e:	60f8      	str	r0, [r7, #12]
 8001e70:	607a      	str	r2, [r7, #4]
 8001e72:	461a      	mov	r2, r3
 8001e74:	460b      	mov	r3, r1
 8001e76:	817b      	strh	r3, [r7, #10]
 8001e78:	4613      	mov	r3, r2
 8001e7a:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001e7c:	68fb      	ldr	r3, [r7, #12]
 8001e7e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	691c      	ldr	r4, [r3, #16]
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	8918      	ldrh	r0, [r3, #8]
 8001e88:	893b      	ldrh	r3, [r7, #8]
 8001e8a:	8979      	ldrh	r1, [r7, #10]
 8001e8c:	687a      	ldr	r2, [r7, #4]
 8001e8e:	47a0      	blx	r4
 8001e90:	4603      	mov	r3, r0
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	371c      	adds	r7, #28
 8001e96:	46bd      	mov	sp, r7
 8001e98:	bd90      	pop	{r4, r7, pc}

08001e9a <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001e9a:	b590      	push	{r4, r7, lr}
 8001e9c:	b087      	sub	sp, #28
 8001e9e:	af00      	add	r7, sp, #0
 8001ea0:	60f8      	str	r0, [r7, #12]
 8001ea2:	607a      	str	r2, [r7, #4]
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	460b      	mov	r3, r1
 8001ea8:	817b      	strh	r3, [r7, #10]
 8001eaa:	4613      	mov	r3, r2
 8001eac:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 8001eae:	68fb      	ldr	r3, [r7, #12]
 8001eb0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001eb2:	697b      	ldr	r3, [r7, #20]
 8001eb4:	68dc      	ldr	r4, [r3, #12]
 8001eb6:	697b      	ldr	r3, [r7, #20]
 8001eb8:	8918      	ldrh	r0, [r3, #8]
 8001eba:	893b      	ldrh	r3, [r7, #8]
 8001ebc:	8979      	ldrh	r1, [r7, #10]
 8001ebe:	687a      	ldr	r2, [r7, #4]
 8001ec0:	47a0      	blx	r4
 8001ec2:	4603      	mov	r3, r0
}
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	371c      	adds	r7, #28
 8001ec8:	46bd      	mov	sp, r7
 8001eca:	bd90      	pop	{r4, r7, pc}

08001ecc <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b087      	sub	sp, #28
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	607a      	str	r2, [r7, #4]
 8001ed6:	461a      	mov	r2, r3
 8001ed8:	460b      	mov	r3, r1
 8001eda:	817b      	strh	r3, [r7, #10]
 8001edc:	4613      	mov	r3, r2
 8001ede:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	685c      	ldr	r4, [r3, #4]
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	6898      	ldr	r0, [r3, #8]
 8001ee8:	893b      	ldrh	r3, [r7, #8]
 8001eea:	8979      	ldrh	r1, [r7, #10]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	47a0      	blx	r4
 8001ef0:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 8001ef2:	697b      	ldr	r3, [r7, #20]
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	db10      	blt.n	8001f1a <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	881b      	ldrh	r3, [r3, #0]
 8001efc:	0a1b      	lsrs	r3, r3, #8
 8001efe:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	881b      	ldrh	r3, [r3, #0]
 8001f04:	b21b      	sxth	r3, r3
 8001f06:	021b      	lsls	r3, r3, #8
 8001f08:	b21a      	sxth	r2, r3
 8001f0a:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8001f0e:	4313      	orrs	r3, r2
 8001f10:	b21b      	sxth	r3, r3
 8001f12:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	8a7a      	ldrh	r2, [r7, #18]
 8001f18:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 8001f1a:	697b      	ldr	r3, [r7, #20]
}
 8001f1c:	4618      	mov	r0, r3
 8001f1e:	371c      	adds	r7, #28
 8001f20:	46bd      	mov	sp, r7
 8001f22:	bd90      	pop	{r4, r7, pc}

08001f24 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8001f24:	b590      	push	{r4, r7, lr}
 8001f26:	b087      	sub	sp, #28
 8001f28:	af00      	add	r7, sp, #0
 8001f2a:	60f8      	str	r0, [r7, #12]
 8001f2c:	607a      	str	r2, [r7, #4]
 8001f2e:	461a      	mov	r2, r3
 8001f30:	460b      	mov	r3, r1
 8001f32:	817b      	strh	r3, [r7, #10]
 8001f34:	4613      	mov	r3, r2
 8001f36:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	881b      	ldrh	r3, [r3, #0]
 8001f3c:	0a1b      	lsrs	r3, r3, #8
 8001f3e:	b29b      	uxth	r3, r3
 8001f40:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	881b      	ldrh	r3, [r3, #0]
 8001f46:	b21b      	sxth	r3, r3
 8001f48:	021b      	lsls	r3, r3, #8
 8001f4a:	b21a      	sxth	r2, r3
 8001f4c:	8afb      	ldrh	r3, [r7, #22]
 8001f4e:	b21b      	sxth	r3, r3
 8001f50:	4313      	orrs	r3, r2
 8001f52:	b21b      	sxth	r3, r3
 8001f54:	b29b      	uxth	r3, r3
 8001f56:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681c      	ldr	r4, [r3, #0]
 8001f5c:	68fb      	ldr	r3, [r7, #12]
 8001f5e:	6898      	ldr	r0, [r3, #8]
 8001f60:	893b      	ldrh	r3, [r7, #8]
 8001f62:	f107 0216 	add.w	r2, r7, #22
 8001f66:	8979      	ldrh	r1, [r7, #10]
 8001f68:	47a0      	blx	r4
 8001f6a:	4603      	mov	r3, r0
}
 8001f6c:	4618      	mov	r0, r3
 8001f6e:	371c      	adds	r7, #28
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd90      	pop	{r4, r7, pc}

08001f74 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b082      	sub	sp, #8
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
 8001f7c:	460b      	mov	r3, r1
 8001f7e:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8001f80:	1cba      	adds	r2, r7, #2
 8001f82:	2302      	movs	r3, #2
 8001f84:	2100      	movs	r1, #0
 8001f86:	6878      	ldr	r0, [r7, #4]
 8001f88:	f7ff ffcc 	bl	8001f24 <wm8994_write_reg>
 8001f8c:	4603      	mov	r3, r0
}
 8001f8e:	4618      	mov	r0, r3
 8001f90:	3708      	adds	r7, #8
 8001f92:	46bd      	mov	sp, r7
 8001f94:	bd80      	pop	{r7, pc}

08001f96 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001f96:	b580      	push	{r7, lr}
 8001f98:	b082      	sub	sp, #8
 8001f9a:	af00      	add	r7, sp, #0
 8001f9c:	6078      	str	r0, [r7, #4]
 8001f9e:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8001fa0:	2302      	movs	r3, #2
 8001fa2:	683a      	ldr	r2, [r7, #0]
 8001fa4:	2100      	movs	r1, #0
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff ff90 	bl	8001ecc <wm8994_read_reg>
 8001fac:	4603      	mov	r3, r0
}
 8001fae:	4618      	mov	r0, r3
 8001fb0:	3708      	adds	r7, #8
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bd80      	pop	{r7, pc}

08001fb6 <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001fb6:	b580      	push	{r7, lr}
 8001fb8:	b084      	sub	sp, #16
 8001fba:	af00      	add	r7, sp, #0
 8001fbc:	6078      	str	r0, [r7, #4]
 8001fbe:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 8001fc0:	2302      	movs	r3, #2
 8001fc2:	683a      	ldr	r2, [r7, #0]
 8001fc4:	211c      	movs	r1, #28
 8001fc6:	6878      	ldr	r0, [r7, #4]
 8001fc8:	f7ff ff80 	bl	8001ecc <wm8994_read_reg>
 8001fcc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d10a      	bne.n	8001fea <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 8001fd4:	683b      	ldr	r3, [r7, #0]
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fdc:	b29a      	uxth	r2, r3
 8001fde:	683b      	ldr	r3, [r7, #0]
 8001fe0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 8001fe2:	683b      	ldr	r3, [r7, #0]
 8001fe4:	881a      	ldrh	r2, [r3, #0]
 8001fe6:	683b      	ldr	r3, [r7, #0]
 8001fe8:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3710      	adds	r7, #16
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}

08001ff4 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	b084      	sub	sp, #16
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 8001ffe:	2302      	movs	r3, #2
 8002000:	683a      	ldr	r2, [r7, #0]
 8002002:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8002006:	6878      	ldr	r0, [r7, #4]
 8002008:	f7ff ff60 	bl	8001ecc <wm8994_read_reg>
 800200c:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d10c      	bne.n	800202e <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8002014:	683b      	ldr	r3, [r7, #0]
 8002016:	881b      	ldrh	r3, [r3, #0]
 8002018:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800201c:	b29a      	uxth	r2, r3
 800201e:	683b      	ldr	r3, [r7, #0]
 8002020:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	881b      	ldrh	r3, [r3, #0]
 8002026:	091b      	lsrs	r3, r3, #4
 8002028:	b29a      	uxth	r2, r3
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800202e:	68fb      	ldr	r3, [r7, #12]
}
 8002030:	4618      	mov	r0, r3
 8002032:	3710      	adds	r7, #16
 8002034:	46bd      	mov	sp, r7
 8002036:	bd80      	pop	{r7, pc}

08002038 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8002038:	b580      	push	{r7, lr}
 800203a:	b084      	sub	sp, #16
 800203c:	af00      	add	r7, sp, #0
 800203e:	6078      	str	r0, [r7, #4]
 8002040:	460b      	mov	r3, r1
 8002042:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8002044:	2300      	movs	r3, #0
 8002046:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002048:	f107 020a 	add.w	r2, r7, #10
 800204c:	2302      	movs	r3, #2
 800204e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f7ff ff3a 	bl	8001ecc <wm8994_read_reg>
 8002058:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800205a:	68fb      	ldr	r3, [r7, #12]
 800205c:	2b00      	cmp	r3, #0
 800205e:	d117      	bne.n	8002090 <wm8994_aif1_control1_fmt+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8002060:	897b      	ldrh	r3, [r7, #10]
 8002062:	f023 0318 	bic.w	r3, r3, #24
 8002066:	b29b      	uxth	r3, r3
 8002068:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800206a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	b21a      	sxth	r2, r3
 8002072:	897b      	ldrh	r3, [r7, #10]
 8002074:	b21b      	sxth	r3, r3
 8002076:	4313      	orrs	r3, r2
 8002078:	b21b      	sxth	r3, r3
 800207a:	b29b      	uxth	r3, r3
 800207c:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800207e:	f107 020a 	add.w	r2, r7, #10
 8002082:	2302      	movs	r3, #2
 8002084:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff ff4b 	bl	8001f24 <wm8994_write_reg>
 800208e:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002090:	68fb      	ldr	r3, [r7, #12]
}
 8002092:	4618      	mov	r0, r3
 8002094:	3710      	adds	r7, #16
 8002096:	46bd      	mov	sp, r7
 8002098:	bd80      	pop	{r7, pc}

0800209a <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800209a:	b580      	push	{r7, lr}
 800209c:	b084      	sub	sp, #16
 800209e:	af00      	add	r7, sp, #0
 80020a0:	6078      	str	r0, [r7, #4]
 80020a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 80020a4:	2302      	movs	r3, #2
 80020a6:	683a      	ldr	r2, [r7, #0]
 80020a8:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ff0d 	bl	8001ecc <wm8994_read_reg>
 80020b2:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80020b4:	68fb      	ldr	r3, [r7, #12]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d10c      	bne.n	80020d4 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 80020ba:	683b      	ldr	r3, [r7, #0]
 80020bc:	881b      	ldrh	r3, [r3, #0]
 80020be:	f003 0318 	and.w	r3, r3, #24
 80020c2:	b29a      	uxth	r2, r3
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 80020c8:	683b      	ldr	r3, [r7, #0]
 80020ca:	881b      	ldrh	r3, [r3, #0]
 80020cc:	08db      	lsrs	r3, r3, #3
 80020ce:	b29a      	uxth	r2, r3
 80020d0:	683b      	ldr	r3, [r7, #0]
 80020d2:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80020d4:	68fb      	ldr	r3, [r7, #12]
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	3710      	adds	r7, #16
 80020da:	46bd      	mov	sp, r7
 80020dc:	bd80      	pop	{r7, pc}

080020de <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 80020de:	b580      	push	{r7, lr}
 80020e0:	b084      	sub	sp, #16
 80020e2:	af00      	add	r7, sp, #0
 80020e4:	6078      	str	r0, [r7, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80020ea:	2300      	movs	r3, #0
 80020ec:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80020ee:	f107 020a 	add.w	r2, r7, #10
 80020f2:	2302      	movs	r3, #2
 80020f4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80020f8:	6878      	ldr	r0, [r7, #4]
 80020fa:	f7ff fee7 	bl	8001ecc <wm8994_read_reg>
 80020fe:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	2b00      	cmp	r3, #0
 8002104:	d117      	bne.n	8002136 <wm8994_aif1_control1_wl+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 8002106:	897b      	ldrh	r3, [r7, #10]
 8002108:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 800210c:	b29b      	uxth	r3, r3
 800210e:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8002110:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8002114:	015b      	lsls	r3, r3, #5
 8002116:	b21a      	sxth	r2, r3
 8002118:	897b      	ldrh	r3, [r7, #10]
 800211a:	b21b      	sxth	r3, r3
 800211c:	4313      	orrs	r3, r2
 800211e:	b21b      	sxth	r3, r3
 8002120:	b29b      	uxth	r3, r3
 8002122:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002124:	f107 020a 	add.w	r2, r7, #10
 8002128:	2302      	movs	r3, #2
 800212a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800212e:	6878      	ldr	r0, [r7, #4]
 8002130:	f7ff fef8 	bl	8001f24 <wm8994_write_reg>
 8002134:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8002136:	68fb      	ldr	r3, [r7, #12]
}
 8002138:	4618      	mov	r0, r3
 800213a:	3710      	adds	r7, #16
 800213c:	46bd      	mov	sp, r7
 800213e:	bd80      	pop	{r7, pc}

08002140 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	b084      	sub	sp, #16
 8002144:	af00      	add	r7, sp, #0
 8002146:	6078      	str	r0, [r7, #4]
 8002148:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 800214a:	2302      	movs	r3, #2
 800214c:	683a      	ldr	r2, [r7, #0]
 800214e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f7ff feba 	bl	8001ecc <wm8994_read_reg>
 8002158:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800215a:	68fb      	ldr	r3, [r7, #12]
 800215c:	2b00      	cmp	r3, #0
 800215e:	d10c      	bne.n	800217a <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 8002160:	683b      	ldr	r3, [r7, #0]
 8002162:	881b      	ldrh	r3, [r3, #0]
 8002164:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8002168:	b29a      	uxth	r2, r3
 800216a:	683b      	ldr	r3, [r7, #0]
 800216c:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	881b      	ldrh	r3, [r3, #0]
 8002172:	095b      	lsrs	r3, r3, #5
 8002174:	b29a      	uxth	r2, r3
 8002176:	683b      	ldr	r3, [r7, #0]
 8002178:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800217a:	68fb      	ldr	r3, [r7, #12]
}
 800217c:	4618      	mov	r0, r3
 800217e:	3710      	adds	r7, #16
 8002180:	46bd      	mov	sp, r7
 8002182:	bd80      	pop	{r7, pc}

08002184 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af00      	add	r7, sp, #0
 800218a:	6078      	str	r0, [r7, #4]
 800218c:	460b      	mov	r3, r1
 800218e:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8002190:	2300      	movs	r3, #0
 8002192:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8002194:	f107 020a 	add.w	r2, r7, #10
 8002198:	2302      	movs	r3, #2
 800219a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800219e:	6878      	ldr	r0, [r7, #4]
 80021a0:	f7ff fe94 	bl	8001ecc <wm8994_read_reg>
 80021a4:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80021a6:	68fb      	ldr	r3, [r7, #12]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d117      	bne.n	80021dc <wm8994_aif1_control1_adcr_src+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 80021ac:	897b      	ldrh	r3, [r7, #10]
 80021ae:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80021b2:	b29b      	uxth	r3, r3
 80021b4:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 80021b6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80021ba:	039b      	lsls	r3, r3, #14
 80021bc:	b21a      	sxth	r2, r3
 80021be:	897b      	ldrh	r3, [r7, #10]
 80021c0:	b21b      	sxth	r3, r3
 80021c2:	4313      	orrs	r3, r2
 80021c4:	b21b      	sxth	r3, r3
 80021c6:	b29b      	uxth	r3, r3
 80021c8:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80021ca:	f107 020a 	add.w	r2, r7, #10
 80021ce:	2302      	movs	r3, #2
 80021d0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f7ff fea5 	bl	8001f24 <wm8994_write_reg>
 80021da:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80021dc:	68fb      	ldr	r3, [r7, #12]
}
 80021de:	4618      	mov	r0, r3
 80021e0:	3710      	adds	r7, #16
 80021e2:	46bd      	mov	sp, r7
 80021e4:	bd80      	pop	{r7, pc}

080021e6 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80021e6:	b580      	push	{r7, lr}
 80021e8:	b084      	sub	sp, #16
 80021ea:	af00      	add	r7, sp, #0
 80021ec:	6078      	str	r0, [r7, #4]
 80021ee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 80021f0:	2302      	movs	r3, #2
 80021f2:	683a      	ldr	r2, [r7, #0]
 80021f4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fe67 	bl	8001ecc <wm8994_read_reg>
 80021fe:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d109      	bne.n	800221a <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 8002206:	683b      	ldr	r3, [r7, #0]
 8002208:	881b      	ldrh	r3, [r3, #0]
 800220a:	b2db      	uxtb	r3, r3
 800220c:	b29a      	uxth	r2, r3
 800220e:	683b      	ldr	r3, [r7, #0]
 8002210:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8002212:	683b      	ldr	r3, [r7, #0]
 8002214:	881a      	ldrh	r2, [r3, #0]
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800221a:	68fb      	ldr	r3, [r7, #12]
}
 800221c:	4618      	mov	r0, r3
 800221e:	3710      	adds	r7, #16
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}

08002224 <AudioRecord>:
 *   Audio peripheral.
 * @param  None
 * @retval None
 */
void AudioRecord(void)
{
 8002224:	b5b0      	push	{r4, r5, r7, lr}
 8002226:	b088      	sub	sp, #32
 8002228:	af00      	add	r7, sp, #0
    uint32_t channel_nbr = 2;
 800222a:	2302      	movs	r3, #2
 800222c:	61fb      	str	r3, [r7, #28]


    AudioFreq_ptr = AudioFreq + 2; /* AUDIO_FREQUENCY_16K; */
 800222e:	4a33      	ldr	r2, [pc, #204]	@ (80022fc <AudioRecord+0xd8>)
 8002230:	4b33      	ldr	r3, [pc, #204]	@ (8002300 <AudioRecord+0xdc>)
 8002232:	601a      	str	r2, [r3, #0]

    AudioOutInit.Device = AUDIO_OUT_DEVICE_AUTO;
 8002234:	4b33      	ldr	r3, [pc, #204]	@ (8002304 <AudioRecord+0xe0>)
 8002236:	2204      	movs	r2, #4
 8002238:	601a      	str	r2, [r3, #0]
    AudioOutInit.ChannelsNbr = channel_nbr;
 800223a:	4a32      	ldr	r2, [pc, #200]	@ (8002304 <AudioRecord+0xe0>)
 800223c:	69fb      	ldr	r3, [r7, #28]
 800223e:	60d3      	str	r3, [r2, #12]
    AudioOutInit.SampleRate = *AudioFreq_ptr;
 8002240:	4b2f      	ldr	r3, [pc, #188]	@ (8002300 <AudioRecord+0xdc>)
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	4a2f      	ldr	r2, [pc, #188]	@ (8002304 <AudioRecord+0xe0>)
 8002248:	6053      	str	r3, [r2, #4]
    AudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 800224a:	4b2e      	ldr	r3, [pc, #184]	@ (8002304 <AudioRecord+0xe0>)
 800224c:	2210      	movs	r2, #16
 800224e:	609a      	str	r2, [r3, #8]
    AudioOutInit.Volume = VolumeLevel;
 8002250:	4b2d      	ldr	r3, [pc, #180]	@ (8002308 <AudioRecord+0xe4>)
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	4a2b      	ldr	r2, [pc, #172]	@ (8002304 <AudioRecord+0xe0>)
 8002256:	6113      	str	r3, [r2, #16]

    AudioInInit.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 8002258:	4b2c      	ldr	r3, [pc, #176]	@ (800230c <AudioRecord+0xe8>)
 800225a:	2210      	movs	r2, #16
 800225c:	601a      	str	r2, [r3, #0]
    AudioInInit.ChannelsNbr = channel_nbr;
 800225e:	4a2b      	ldr	r2, [pc, #172]	@ (800230c <AudioRecord+0xe8>)
 8002260:	69fb      	ldr	r3, [r7, #28]
 8002262:	60d3      	str	r3, [r2, #12]
    AudioInInit.SampleRate = *AudioFreq_ptr;
 8002264:	4b26      	ldr	r3, [pc, #152]	@ (8002300 <AudioRecord+0xdc>)
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4a28      	ldr	r2, [pc, #160]	@ (800230c <AudioRecord+0xe8>)
 800226c:	6053      	str	r3, [r2, #4]
    AudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 800226e:	4b27      	ldr	r3, [pc, #156]	@ (800230c <AudioRecord+0xe8>)
 8002270:	2210      	movs	r2, #16
 8002272:	609a      	str	r2, [r3, #8]
    AudioInInit.Volume = VolumeLevel;
 8002274:	4b24      	ldr	r3, [pc, #144]	@ (8002308 <AudioRecord+0xe4>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	4a24      	ldr	r2, [pc, #144]	@ (800230c <AudioRecord+0xe8>)
 800227a:	6113      	str	r3, [r2, #16]

    /* Initialize Audio Recorder with 2 channels to be used */
    BSP_AUDIO_IN_Init(1, &AudioInInit);
 800227c:	4923      	ldr	r1, [pc, #140]	@ (800230c <AudioRecord+0xe8>)
 800227e:	2001      	movs	r0, #1
 8002280:	f001 fd3a 	bl	8003cf8 <BSP_AUDIO_IN_Init>
    BSP_AUDIO_IN_GetState(1, &InState);
 8002284:	4922      	ldr	r1, [pc, #136]	@ (8002310 <AudioRecord+0xec>)
 8002286:	2001      	movs	r0, #1
 8002288:	f002 f8d0 	bl	800442c <BSP_AUDIO_IN_GetState>

    BSP_AUDIO_OUT_Init(0, &AudioOutInit);
 800228c:	491d      	ldr	r1, [pc, #116]	@ (8002304 <AudioRecord+0xe0>)
 800228e:	2000      	movs	r0, #0
 8002290:	f001 fa36 	bl	8003700 <BSP_AUDIO_OUT_Init>

    BSP_AUDIO_OUT_SetDevice(0, AUDIO_OUT_DEVICE_HEADPHONE);
 8002294:	2102      	movs	r1, #2
 8002296:	2000      	movs	r0, #0
 8002298:	f001 fcbe 	bl	8003c18 <BSP_AUDIO_OUT_SetDevice>

    /* Start Recording */
    BSP_AUDIO_IN_RecordPDM(1, (uint8_t *)&recordPDMBuf, 2 * AUDIO_IN_PDM_BUFFER_SIZE);
 800229c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80022a0:	491c      	ldr	r1, [pc, #112]	@ (8002314 <AudioRecord+0xf0>)
 80022a2:	2001      	movs	r0, #1
 80022a4:	f002 f890 	bl	80043c8 <BSP_AUDIO_IN_RecordPDM>

    /* Play the recorded buffer*/
    BSP_AUDIO_OUT_Play(0, (uint8_t *)&PCMBuffer[0], 2 * BUFFER_SIZE);
 80022a8:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80022ac:	491a      	ldr	r1, [pc, #104]	@ (8002318 <AudioRecord+0xf4>)
 80022ae:	2000      	movs	r0, #0
 80022b0:	f001 fc38 	bl	8003b24 <BSP_AUDIO_OUT_Play>
    // ALIGN_32BYTES(uint16_t PCMBuffer[2 * BUFFER_SIZE]);

    // USE CMSIS DSP Library to process PCMBuffer

    // define configuration - match trained model
    MelSpectrogramConfig_t config = {.fft_size = 512,
 80022b4:	4b19      	ldr	r3, [pc, #100]	@ (800231c <AudioRecord+0xf8>)
 80022b6:	1d3c      	adds	r4, r7, #4
 80022b8:	461d      	mov	r5, r3
 80022ba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80022bc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80022be:	682b      	ldr	r3, [r5, #0]
 80022c0:	6023      	str	r3, [r4, #0]
                                     .n_mels = 64,
                                     .sample_rate = 16000.0f,
                                     .f_min = 0.0f,
                                     .f_max = 8000.0f};

    mel_spectrogram_init(&config);
 80022c2:	1d3b      	adds	r3, r7, #4
 80022c4:	4618      	mov	r0, r3
 80022c6:	f000 fd0f 	bl	8002ce8 <mel_spectrogram_init>

    // output spectrogram buffer
    // n_mels x n_frames
    static float mel_spec[64 * 64];
    // zero out mel spectrogram buffer
    memset(mel_spec, 0, sizeof(mel_spec));
 80022ca:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80022ce:	2100      	movs	r1, #0
 80022d0:	4813      	ldr	r0, [pc, #76]	@ (8002320 <AudioRecord+0xfc>)
 80022d2:	f010 ffb5 	bl	8013240 <memset>

    // call DSP pipeline for PCMBuffer -> mel_spec
    int n_frames = calculate_mel_spectrogram((const int16_t *)PCMBuffer, BUFFER_SIZE, mel_spec,
 80022d6:	2340      	movs	r3, #64	@ 0x40
 80022d8:	4a11      	ldr	r2, [pc, #68]	@ (8002320 <AudioRecord+0xfc>)
 80022da:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80022de:	480e      	ldr	r0, [pc, #56]	@ (8002318 <AudioRecord+0xf4>)
 80022e0:	f000 fd84 	bl	8002dec <calculate_mel_spectrogram>
 80022e4:	61b8      	str	r0, [r7, #24]
                                             64); // max columns

    // normalize to [0, 1]
    normalize_spectrogram(mel_spec, config.n_mels, n_frames);
 80022e6:	89bb      	ldrh	r3, [r7, #12]
 80022e8:	69ba      	ldr	r2, [r7, #24]
 80022ea:	b292      	uxth	r2, r2
 80022ec:	4619      	mov	r1, r3
 80022ee:	480c      	ldr	r0, [pc, #48]	@ (8002320 <AudioRecord+0xfc>)
 80022f0:	f000 ffb6 	bl	8003260 <normalize_spectrogram>

    // DO STUFF FOR ML INFERENCE
}
 80022f4:	bf00      	nop
 80022f6:	3720      	adds	r7, #32
 80022f8:	46bd      	mov	sp, r7
 80022fa:	bdb0      	pop	{r4, r5, r7, pc}
 80022fc:	24000454 	.word	0x24000454
 8002300:	24004884 	.word	0x24004884
 8002304:	2400489c 	.word	0x2400489c
 8002308:	24000470 	.word	0x24000470
 800230c:	24004888 	.word	0x24004888
 8002310:	24004880 	.word	0x24004880
 8002314:	24000660 	.word	0x24000660
 8002318:	24000880 	.word	0x24000880
 800231c:	08015048 	.word	0x08015048
 8002320:	240048b8 	.word	0x240048b8

08002324 <BSP_AUDIO_IN_TransferComplete_CallBack>:
 * @brief Calculates the remaining file size and new position of the pointer.
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 8002324:	b580      	push	{r7, lr}
 8002326:	b08a      	sub	sp, #40	@ 0x28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
    if (Instance == 1U)
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d168      	bne.n	8002404 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe0>
 8002332:	4b38      	ldr	r3, [pc, #224]	@ (8002414 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 8002334:	617b      	str	r3, [r7, #20]
 8002336:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800233a:	613b      	str	r3, [r7, #16]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_InvalidateDCache_by_Addr (void *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800233c:	693b      	ldr	r3, [r7, #16]
 800233e:	2b00      	cmp	r3, #0
 8002340:	dd1d      	ble.n	800237e <BSP_AUDIO_IN_TransferComplete_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	f003 021f 	and.w	r2, r3, #31
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	4413      	add	r3, r2
 800234c:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800234e:	697b      	ldr	r3, [r7, #20]
 8002350:	60bb      	str	r3, [r7, #8]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002352:	f3bf 8f4f 	dsb	sy
}
 8002356:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8002358:	4a2f      	ldr	r2, [pc, #188]	@ (8002418 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 800235a:	68bb      	ldr	r3, [r7, #8]
 800235c:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	3320      	adds	r3, #32
 8002364:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	3b20      	subs	r3, #32
 800236a:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	2b00      	cmp	r3, #0
 8002370:	dcf2      	bgt.n	8002358 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8002372:	f3bf 8f4f 	dsb	sy
}
 8002376:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002378:	f3bf 8f6f 	isb	sy
}
 800237c:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800237e:	bf00      	nop
        /* Invalidate Data Cache to get the updated content of the SRAM*/
        SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE / 2],
                                     AUDIO_IN_PDM_BUFFER_SIZE * 2);

        BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE / 2],
                              &PCMBuffer[playbackPtr]);
 8002380:	4b26      	ldr	r3, [pc, #152]	@ (800241c <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8002382:	681b      	ldr	r3, [r3, #0]
        BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE / 2],
 8002384:	005b      	lsls	r3, r3, #1
 8002386:	4a26      	ldr	r2, [pc, #152]	@ (8002420 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 8002388:	4413      	add	r3, r2
 800238a:	461a      	mov	r2, r3
 800238c:	4921      	ldr	r1, [pc, #132]	@ (8002414 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 800238e:	6878      	ldr	r0, [r7, #4]
 8002390:	f001 ffe0 	bl	8004354 <BSP_AUDIO_IN_PDMToPCM>

        /* Clean Data Cache to update the content of the SRAM */
        SCB_CleanDCache_by_Addr((uint32_t *)&PCMBuffer[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE / 4);
 8002394:	4b21      	ldr	r3, [pc, #132]	@ (800241c <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	005b      	lsls	r3, r3, #1
 800239a:	4a21      	ldr	r2, [pc, #132]	@ (8002420 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 800239c:	4413      	add	r3, r2
 800239e:	627b      	str	r3, [r7, #36]	@ 0x24
 80023a0:	2340      	movs	r3, #64	@ 0x40
 80023a2:	623b      	str	r3, [r7, #32]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 80023a4:	6a3b      	ldr	r3, [r7, #32]
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	dd1d      	ble.n	80023e6 <BSP_AUDIO_IN_TransferComplete_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80023aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023ac:	f003 021f 	and.w	r2, r3, #31
 80023b0:	6a3b      	ldr	r3, [r7, #32]
 80023b2:	4413      	add	r3, r2
 80023b4:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80023b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023b8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80023ba:	f3bf 8f4f 	dsb	sy
}
 80023be:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80023c0:	4a15      	ldr	r2, [pc, #84]	@ (8002418 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 80023c2:	69bb      	ldr	r3, [r7, #24]
 80023c4:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80023c8:	69bb      	ldr	r3, [r7, #24]
 80023ca:	3320      	adds	r3, #32
 80023cc:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80023ce:	69fb      	ldr	r3, [r7, #28]
 80023d0:	3b20      	subs	r3, #32
 80023d2:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	dcf2      	bgt.n	80023c0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 80023da:	f3bf 8f4f 	dsb	sy
}
 80023de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80023e0:	f3bf 8f6f 	isb	sy
}
 80023e4:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 80023e6:	bf00      	nop

        playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE / 4 / 2;
 80023e8:	4b0c      	ldr	r3, [pc, #48]	@ (800241c <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	3320      	adds	r3, #32
 80023ee:	4a0b      	ldr	r2, [pc, #44]	@ (800241c <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80023f0:	6013      	str	r3, [r2, #0]
        if (playbackPtr >= BUFFER_SIZE)
 80023f2:	4b0a      	ldr	r3, [pc, #40]	@ (800241c <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80023fa:	d306      	bcc.n	800240a <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
            playbackPtr = 0;
 80023fc:	4b07      	ldr	r3, [pc, #28]	@ (800241c <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 80023fe:	2200      	movs	r2, #0
 8002400:	601a      	str	r2, [r3, #0]
    }
    else
    {
        AudioBufferOffset = BUFFER_OFFSET_FULL;
    }
}
 8002402:	e002      	b.n	800240a <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
        AudioBufferOffset = BUFFER_OFFSET_FULL;
 8002404:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <BSP_AUDIO_IN_TransferComplete_CallBack+0x100>)
 8002406:	2202      	movs	r2, #2
 8002408:	601a      	str	r2, [r3, #0]
}
 800240a:	bf00      	nop
 800240c:	3728      	adds	r7, #40	@ 0x28
 800240e:	46bd      	mov	sp, r7
 8002410:	bd80      	pop	{r7, pc}
 8002412:	bf00      	nop
 8002414:	24000760 	.word	0x24000760
 8002418:	e000ed00 	.word	0xe000ed00
 800241c:	240048b0 	.word	0x240048b0
 8002420:	24000880 	.word	0x24000880
 8002424:	240048b4 	.word	0x240048b4

08002428 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
 * @brief  Manages the DMA Half Transfer complete interrupt.
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b08a      	sub	sp, #40	@ 0x28
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
    if (Instance == 1U)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	2b01      	cmp	r3, #1
 8002434:	d168      	bne.n	8002508 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe0>
 8002436:	4b38      	ldr	r3, [pc, #224]	@ (8002518 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 8002438:	617b      	str	r3, [r7, #20]
 800243a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800243e:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	2b00      	cmp	r3, #0
 8002444:	dd1d      	ble.n	8002482 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8002446:	697b      	ldr	r3, [r7, #20]
 8002448:	f003 021f 	and.w	r2, r3, #31
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	4413      	add	r3, r2
 8002450:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8002452:	697b      	ldr	r3, [r7, #20]
 8002454:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 8002456:	f3bf 8f4f 	dsb	sy
}
 800245a:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800245c:	4a2f      	ldr	r2, [pc, #188]	@ (800251c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 800245e:	68bb      	ldr	r3, [r7, #8]
 8002460:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	3320      	adds	r3, #32
 8002468:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	3b20      	subs	r3, #32
 800246e:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8002470:	68fb      	ldr	r3, [r7, #12]
 8002472:	2b00      	cmp	r3, #0
 8002474:	dcf2      	bgt.n	800245c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 8002476:	f3bf 8f4f 	dsb	sy
}
 800247a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800247c:	f3bf 8f6f 	isb	sy
}
 8002480:	bf00      	nop
}
 8002482:	bf00      	nop
    {
        /* Invalidate Data Cache to get the updated content of the SRAM*/
        SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[0], AUDIO_IN_PDM_BUFFER_SIZE * 2);

        BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t *)&recordPDMBuf[0], &PCMBuffer[playbackPtr]);
 8002484:	4b26      	ldr	r3, [pc, #152]	@ (8002520 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	005b      	lsls	r3, r3, #1
 800248a:	4a26      	ldr	r2, [pc, #152]	@ (8002524 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 800248c:	4413      	add	r3, r2
 800248e:	461a      	mov	r2, r3
 8002490:	4921      	ldr	r1, [pc, #132]	@ (8002518 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 8002492:	6878      	ldr	r0, [r7, #4]
 8002494:	f001 ff5e 	bl	8004354 <BSP_AUDIO_IN_PDMToPCM>

        /* Clean Data Cache to update the content of the SRAM */
        SCB_CleanDCache_by_Addr((uint32_t *)&PCMBuffer[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE / 4);
 8002498:	4b21      	ldr	r3, [pc, #132]	@ (8002520 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	4a21      	ldr	r2, [pc, #132]	@ (8002524 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 80024a0:	4413      	add	r3, r2
 80024a2:	627b      	str	r3, [r7, #36]	@ 0x24
 80024a4:	2340      	movs	r3, #64	@ 0x40
 80024a6:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 80024a8:	6a3b      	ldr	r3, [r7, #32]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	dd1d      	ble.n	80024ea <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80024ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024b0:	f003 021f 	and.w	r2, r3, #31
 80024b4:	6a3b      	ldr	r3, [r7, #32]
 80024b6:	4413      	add	r3, r2
 80024b8:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80024ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80024bc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 80024be:	f3bf 8f4f 	dsb	sy
}
 80024c2:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80024c4:	4a15      	ldr	r2, [pc, #84]	@ (800251c <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80024cc:	69bb      	ldr	r3, [r7, #24]
 80024ce:	3320      	adds	r3, #32
 80024d0:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	3b20      	subs	r3, #32
 80024d6:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 80024d8:	69fb      	ldr	r3, [r7, #28]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	dcf2      	bgt.n	80024c4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 80024de:	f3bf 8f4f 	dsb	sy
}
 80024e2:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80024e4:	f3bf 8f6f 	isb	sy
}
 80024e8:	bf00      	nop
}
 80024ea:	bf00      	nop

        playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE / 4 / 2;
 80024ec:	4b0c      	ldr	r3, [pc, #48]	@ (8002520 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	3320      	adds	r3, #32
 80024f2:	4a0b      	ldr	r2, [pc, #44]	@ (8002520 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80024f4:	6013      	str	r3, [r2, #0]
        if (playbackPtr >= BUFFER_SIZE)
 80024f6:	4b0a      	ldr	r3, [pc, #40]	@ (8002520 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80024fe:	d306      	bcc.n	800250e <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
        {
            playbackPtr = 0;
 8002500:	4b07      	ldr	r3, [pc, #28]	@ (8002520 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8002502:	2200      	movs	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
    }
    else
    {
        AudioBufferOffset = BUFFER_OFFSET_HALF;
    }
}
 8002506:	e002      	b.n	800250e <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
        AudioBufferOffset = BUFFER_OFFSET_HALF;
 8002508:	4b07      	ldr	r3, [pc, #28]	@ (8002528 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x100>)
 800250a:	2201      	movs	r2, #1
 800250c:	601a      	str	r2, [r3, #0]
}
 800250e:	bf00      	nop
 8002510:	3728      	adds	r7, #40	@ 0x28
 8002512:	46bd      	mov	sp, r7
 8002514:	bd80      	pop	{r7, pc}
 8002516:	bf00      	nop
 8002518:	24000660 	.word	0x24000660
 800251c:	e000ed00 	.word	0xe000ed00
 8002520:	240048b0 	.word	0x240048b0
 8002524:	24000880 	.word	0x24000880
 8002528:	240048b4 	.word	0x240048b4

0800252c <BSP_AUDIO_IN_Error_CallBack>:
 * @brief  Audio IN Error callback function
 * @param  None
 * @retval None
 */
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b082      	sub	sp, #8
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
    /* Stop the program with an infinite loop */
    Error_Handler();
 8002534:	f000 f9d6 	bl	80028e4 <Error_Handler>
}
 8002538:	bf00      	nop
 800253a:	3708      	adds	r7, #8
 800253c:	46bd      	mov	sp, r7
 800253e:	bd80      	pop	{r7, pc}

08002540 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002548:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800254c:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8002550:	f003 0301 	and.w	r3, r3, #1
 8002554:	2b00      	cmp	r3, #0
 8002556:	d013      	beq.n	8002580 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8002558:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800255c:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8002560:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8002564:	2b00      	cmp	r3, #0
 8002566:	d00b      	beq.n	8002580 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8002568:	e000      	b.n	800256c <ITM_SendChar+0x2c>
    {
      __NOP();
 800256a:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 800256c:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	2b00      	cmp	r3, #0
 8002574:	d0f9      	beq.n	800256a <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 8002576:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 800257a:	687a      	ldr	r2, [r7, #4]
 800257c:	b2d2      	uxtb	r2, r2
 800257e:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8002580:	687b      	ldr	r3, [r7, #4]
}
 8002582:	4618      	mov	r0, r3
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800258c:	4770      	bx	lr

0800258e <_write>:

/**
 * @brief  Redirects printf output to SWV ITM Data Console
 */
int _write(int file, char *ptr, int len)
{
 800258e:	b580      	push	{r7, lr}
 8002590:	b086      	sub	sp, #24
 8002592:	af00      	add	r7, sp, #0
 8002594:	60f8      	str	r0, [r7, #12]
 8002596:	60b9      	str	r1, [r7, #8]
 8002598:	607a      	str	r2, [r7, #4]
    int i = 0;
 800259a:	2300      	movs	r3, #0
 800259c:	617b      	str	r3, [r7, #20]
    for (i = 0; i < len; i++)
 800259e:	2300      	movs	r3, #0
 80025a0:	617b      	str	r3, [r7, #20]
 80025a2:	e009      	b.n	80025b8 <_write+0x2a>
    {
        ITM_SendChar(*ptr++);
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	1c5a      	adds	r2, r3, #1
 80025a8:	60ba      	str	r2, [r7, #8]
 80025aa:	781b      	ldrb	r3, [r3, #0]
 80025ac:	4618      	mov	r0, r3
 80025ae:	f7ff ffc7 	bl	8002540 <ITM_SendChar>
    for (i = 0; i < len; i++)
 80025b2:	697b      	ldr	r3, [r7, #20]
 80025b4:	3301      	adds	r3, #1
 80025b6:	617b      	str	r3, [r7, #20]
 80025b8:	697a      	ldr	r2, [r7, #20]
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	429a      	cmp	r2, r3
 80025be:	dbf1      	blt.n	80025a4 <_write+0x16>
    }
    return len;
 80025c0:	687b      	ldr	r3, [r7, #4]
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3718      	adds	r7, #24
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
	...

080025cc <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 80025cc:	b580      	push	{r7, lr}
 80025ce:	b082      	sub	sp, #8
 80025d0:	af00      	add	r7, sp, #0

    // memset(audio_buffer, 0xAA, sizeof(audio_buffer)); // Initialize buffer with known pattern

    /* Wait until CPU2 (CM4) boots and enters in stop mode or timeout*/
    int32_t timeout = 0xFFFF;
 80025d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80025d6:	607b      	str	r3, [r7, #4]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0))
 80025d8:	bf00      	nop
 80025da:	4b25      	ldr	r3, [pc, #148]	@ (8002670 <main+0xa4>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d004      	beq.n	80025f0 <main+0x24>
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	1e5a      	subs	r2, r3, #1
 80025ea:	607a      	str	r2, [r7, #4]
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	dcf4      	bgt.n	80025da <main+0xe>
        ;
    if (timeout < 0)
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	da01      	bge.n	80025fa <main+0x2e>
    {
        Error_Handler();
 80025f6:	f000 f975 	bl	80028e4 <Error_Handler>
    }

    /* Configure the MPU attributes as Write Through */
    MPU_Config();
 80025fa:	f000 f8a9 	bl	8002750 <MPU_Config>

    /* Enable the CPU Cache */
    CPU_CACHE_Enable();
 80025fe:	f000 f903 	bl	8002808 <CPU_CACHE_Enable>
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
       */
    HAL_Init();
 8002602:	f005 fc03 	bl	8007e0c <HAL_Init>

    /* Configure the system clock to 400 MHz */
    SystemClock_Config();
 8002606:	f000 f835 	bl	8002674 <SystemClock_Config>


    /* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
    HSEM notification */
    __HAL_RCC_HSEM_CLK_ENABLE();    // Enable semaphore clock
 800260a:	4b19      	ldr	r3, [pc, #100]	@ (8002670 <main+0xa4>)
 800260c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002610:	4a17      	ldr	r2, [pc, #92]	@ (8002670 <main+0xa4>)
 8002612:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002616:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800261a:	4b15      	ldr	r3, [pc, #84]	@ (8002670 <main+0xa4>)
 800261c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8002620:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002624:	603b      	str	r3, [r7, #0]
 8002626:	683b      	ldr	r3, [r7, #0]
    HAL_HSEM_FastTake(HSEM_ID_0);   // Take HSEM
 8002628:	2000      	movs	r0, #0
 800262a:	f008 fc63 	bl	800aef4 <HAL_HSEM_FastTake>
    HAL_HSEM_Release(HSEM_ID_0, 0); // Release HSEM to notify CM4
 800262e:	2100      	movs	r1, #0
 8002630:	2000      	movs	r0, #0
 8002632:	f008 fc79 	bl	800af28 <HAL_HSEM_Release>

    /* Wait until CPU2 wakes up from stop mode */
    timeout = 0xFFFF;
 8002636:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800263a:	607b      	str	r3, [r7, #4]
    while ((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0))
 800263c:	bf00      	nop
 800263e:	4b0c      	ldr	r3, [pc, #48]	@ (8002670 <main+0xa4>)
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d104      	bne.n	8002654 <main+0x88>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	1e5a      	subs	r2, r3, #1
 800264e:	607a      	str	r2, [r7, #4]
 8002650:	2b00      	cmp	r3, #0
 8002652:	dcf4      	bgt.n	800263e <main+0x72>
        ;
    if (timeout < 0)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	2b00      	cmp	r3, #0
 8002658:	da01      	bge.n	800265e <main+0x92>
    {
        Error_Handler();
 800265a:	f000 f943 	bl	80028e4 <Error_Handler>
    }

    /* Main application loop */
    while (1)
    {
        AudioRecord();
 800265e:	f7ff fde1 	bl	8002224 <AudioRecord>
        // /* Calculate and display sound pressure level */
        // float decibel_level = calculate_decibel(audio_buffer, BUFFER_SIZE * 2);
        // printf("SPL: %.2f dB\r\n", decibel_level);

        /* Wait one second before next update */
        HAL_Delay(1000);
 8002662:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8002666:	f005 fc63 	bl	8007f30 <HAL_Delay>
        AudioRecord();
 800266a:	bf00      	nop
 800266c:	e7f7      	b.n	800265e <main+0x92>
 800266e:	bf00      	nop
 8002670:	58024400 	.word	0x58024400

08002674 <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b09e      	sub	sp, #120	@ 0x78
 8002678:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 800267a:	2300      	movs	r3, #0
 800267c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
    // {
    // }

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8002680:	2301      	movs	r3, #1
 8002682:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8002684:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8002688:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 800268a:	2300      	movs	r3, #0
 800268c:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 800268e:	2300      	movs	r3, #0
 8002690:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8002692:	2302      	movs	r3, #2
 8002694:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8002696:	2302      	movs	r3, #2
 8002698:	633b      	str	r3, [r7, #48]	@ 0x30

    RCC_OscInitStruct.PLL.PLLM = 5;
 800269a:	2305      	movs	r3, #5
 800269c:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 160;
 800269e:	23a0      	movs	r3, #160	@ 0xa0
 80026a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80026a2:	2300      	movs	r3, #0
 80026a4:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = 2;
 80026a6:	2302      	movs	r3, #2
 80026a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLR = 2;
 80026aa:	2302      	movs	r3, #2
 80026ac:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80026ae:	2304      	movs	r3, #4
 80026b0:	643b      	str	r3, [r7, #64]	@ 0x40

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80026b2:	2300      	movs	r3, #0
 80026b4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80026b6:	2308      	movs	r3, #8
 80026b8:	64bb      	str	r3, [r7, #72]	@ 0x48
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80026ba:	f107 0308 	add.w	r3, r7, #8
 80026be:	4618      	mov	r0, r3
 80026c0:	f009 fac8 	bl	800bc54 <HAL_RCC_OscConfig>
 80026c4:	4603      	mov	r3, r0
 80026c6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 80026ca:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d001      	beq.n	80026d6 <SystemClock_Config+0x62>
    {
        Error_Handler();
 80026d2:	f000 f907 	bl	80028e4 <Error_Handler>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType =
 80026d6:	233f      	movs	r3, #63	@ 0x3f
 80026d8:	657b      	str	r3, [r7, #84]	@ 0x54
        (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
         RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80026da:	2303      	movs	r3, #3
 80026dc:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80026de:	2300      	movs	r3, #0
 80026e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 80026e2:	2308      	movs	r3, #8
 80026e4:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 80026e6:	2340      	movs	r3, #64	@ 0x40
 80026e8:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 80026ea:	2340      	movs	r3, #64	@ 0x40
 80026ec:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80026ee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80026f2:	66fb      	str	r3, [r7, #108]	@ 0x6c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 80026f4:	2340      	movs	r3, #64	@ 0x40
 80026f6:	673b      	str	r3, [r7, #112]	@ 0x70
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 80026f8:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80026fc:	2104      	movs	r1, #4
 80026fe:	4618      	mov	r0, r3
 8002700:	f009 ff02 	bl	800c508 <HAL_RCC_ClockConfig>
 8002704:	4603      	mov	r3, r0
 8002706:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 800270a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <SystemClock_Config+0xa2>
    {
        Error_Handler();
 8002712:	f000 f8e7 	bl	80028e4 <Error_Handler>
           - The activation of the SYSCFG clock
           - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
    */

    /*activate CSI clock mondatory for I/O Compensation Cell*/
    __HAL_RCC_CSI_ENABLE();
 8002716:	4b0d      	ldr	r3, [pc, #52]	@ (800274c <SystemClock_Config+0xd8>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a0c      	ldr	r2, [pc, #48]	@ (800274c <SystemClock_Config+0xd8>)
 800271c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002720:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002722:	4b0a      	ldr	r3, [pc, #40]	@ (800274c <SystemClock_Config+0xd8>)
 8002724:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002728:	4a08      	ldr	r2, [pc, #32]	@ (800274c <SystemClock_Config+0xd8>)
 800272a:	f043 0302 	orr.w	r3, r3, #2
 800272e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8002732:	4b06      	ldr	r3, [pc, #24]	@ (800274c <SystemClock_Config+0xd8>)
 8002734:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8002738:	f003 0302 	and.w	r3, r3, #2
 800273c:	607b      	str	r3, [r7, #4]
 800273e:	687b      	ldr	r3, [r7, #4]

    /* Enables the I/O Compensation Cell */
    HAL_EnableCompensationCell();
 8002740:	f005 fc26 	bl	8007f90 <HAL_EnableCompensationCell>
}
 8002744:	bf00      	nop
 8002746:	3778      	adds	r7, #120	@ 0x78
 8002748:	46bd      	mov	sp, r7
 800274a:	bd80      	pop	{r7, pc}
 800274c:	58024400 	.word	0x58024400

08002750 <MPU_Config>:
 *         The Region Size is 32MB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 8002750:	b580      	push	{r7, lr}
 8002752:	b084      	sub	sp, #16
 8002754:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

    /* Disable the MPU */
    HAL_MPU_Disable();
 8002756:	f005 fd3b 	bl	80081d0 <HAL_MPU_Disable>

    /* Configure the MPU as Strongly ordered for not defined regions */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800275a:	2301      	movs	r3, #1
 800275c:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x00;
 800275e:	2300      	movs	r3, #0
 8002760:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 8002762:	231f      	movs	r3, #31
 8002764:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8002766:	2300      	movs	r3, #0
 8002768:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800276a:	2300      	movs	r3, #0
 800276c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 800276e:	2300      	movs	r3, #0
 8002770:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 8002772:	2301      	movs	r3, #1
 8002774:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8002776:	2300      	movs	r3, #0
 8002778:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800277a:	2300      	movs	r3, #0
 800277c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x87;
 800277e:	2387      	movs	r3, #135	@ 0x87
 8002780:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 8002782:	2301      	movs	r3, #1
 8002784:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8002786:	463b      	mov	r3, r7
 8002788:	4618      	mov	r0, r3
 800278a:	f005 fd59 	bl	8008240 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for SDRAM */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800278e:	2301      	movs	r3, #1
 8002790:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 8002792:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8002796:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8002798:	2318      	movs	r3, #24
 800279a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800279c:	2303      	movs	r3, #3
 800279e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80027a0:	2300      	movs	r3, #0
 80027a2:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80027a4:	2301      	movs	r3, #1
 80027a6:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80027a8:	2300      	movs	r3, #0
 80027aa:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 80027ac:	2301      	movs	r3, #1
 80027ae:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80027b0:	2300      	movs	r3, #0
 80027b2:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 80027b4:	2300      	movs	r3, #0
 80027b6:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80027b8:	2300      	movs	r3, #0
 80027ba:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027bc:	463b      	mov	r3, r7
 80027be:	4618      	mov	r0, r3
 80027c0:	f005 fd3e 	bl	8008240 <HAL_MPU_ConfigRegion>

    /* Configure the MPU QSPI flash */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 80027c4:	2301      	movs	r3, #1
 80027c6:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 80027c8:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 80027cc:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 80027ce:	231a      	movs	r3, #26
 80027d0:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 80027d2:	2303      	movs	r3, #3
 80027d4:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 80027d6:	2300      	movs	r3, #0
 80027d8:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 80027da:	2301      	movs	r3, #1
 80027dc:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 80027de:	2300      	movs	r3, #0
 80027e0:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 80027e2:	2302      	movs	r3, #2
 80027e4:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 80027e6:	2300      	movs	r3, #0
 80027e8:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x0;
 80027ea:	2300      	movs	r3, #0
 80027ec:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 80027ee:	2300      	movs	r3, #0
 80027f0:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 80027f2:	463b      	mov	r3, r7
 80027f4:	4618      	mov	r0, r3
 80027f6:	f005 fd23 	bl	8008240 <HAL_MPU_ConfigRegion>

    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80027fa:	2004      	movs	r0, #4
 80027fc:	f005 fd00 	bl	8008200 <HAL_MPU_Enable>
}
 8002800:	bf00      	nop
 8002802:	3710      	adds	r7, #16
 8002804:	46bd      	mov	sp, r7
 8002806:	bd80      	pop	{r7, pc}

08002808 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 8002808:	b480      	push	{r7}
 800280a:	b085      	sub	sp, #20
 800280c:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800280e:	4b34      	ldr	r3, [pc, #208]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 8002810:	695b      	ldr	r3, [r3, #20]
 8002812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002816:	2b00      	cmp	r3, #0
 8002818:	d11b      	bne.n	8002852 <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 800281a:	f3bf 8f4f 	dsb	sy
}
 800281e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002820:	f3bf 8f6f 	isb	sy
}
 8002824:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8002826:	4b2e      	ldr	r3, [pc, #184]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 8002828:	2200      	movs	r2, #0
 800282a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800282e:	f3bf 8f4f 	dsb	sy
}
 8002832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002834:	f3bf 8f6f 	isb	sy
}
 8002838:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800283a:	4b29      	ldr	r3, [pc, #164]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 800283c:	695b      	ldr	r3, [r3, #20]
 800283e:	4a28      	ldr	r2, [pc, #160]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 8002840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002844:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8002846:	f3bf 8f4f 	dsb	sy
}
 800284a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800284c:	f3bf 8f6f 	isb	sy
}
 8002850:	e000      	b.n	8002854 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8002852:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8002854:	4b22      	ldr	r3, [pc, #136]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 8002856:	695b      	ldr	r3, [r3, #20]
 8002858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800285c:	2b00      	cmp	r3, #0
 800285e:	d138      	bne.n	80028d2 <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8002860:	4b1f      	ldr	r3, [pc, #124]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 8002862:	2200      	movs	r2, #0
 8002864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8002868:	f3bf 8f4f 	dsb	sy
}
 800286c:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800286e:	4b1c      	ldr	r3, [pc, #112]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 8002870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002874:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	0b5b      	lsrs	r3, r3, #13
 800287a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800287e:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	08db      	lsrs	r3, r3, #3
 8002884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8002888:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	015a      	lsls	r2, r3, #5
 800288e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8002892:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8002898:	4911      	ldr	r1, [pc, #68]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 800289a:	4313      	orrs	r3, r2
 800289c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	1e5a      	subs	r2, r3, #1
 80028a4:	607a      	str	r2, [r7, #4]
 80028a6:	2b00      	cmp	r3, #0
 80028a8:	d1ef      	bne.n	800288a <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 80028aa:	68bb      	ldr	r3, [r7, #8]
 80028ac:	1e5a      	subs	r2, r3, #1
 80028ae:	60ba      	str	r2, [r7, #8]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d1e5      	bne.n	8002880 <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80028b4:	f3bf 8f4f 	dsb	sy
}
 80028b8:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80028ba:	4b09      	ldr	r3, [pc, #36]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	4a08      	ldr	r2, [pc, #32]	@ (80028e0 <CPU_CACHE_Enable+0xd8>)
 80028c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80028c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80028c6:	f3bf 8f4f 	dsb	sy
}
 80028ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80028cc:	f3bf 8f6f 	isb	sy
}
 80028d0:	e000      	b.n	80028d4 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80028d2:	bf00      	nop
    /* Enable I-Cache */
    SCB_EnableICache();

    /* Enable D-Cache */
    SCB_EnableDCache();
}
 80028d4:	bf00      	nop
 80028d6:	3714      	adds	r7, #20
 80028d8:	46bd      	mov	sp, r7
 80028da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028de:	4770      	bx	lr
 80028e0:	e000ed00 	.word	0xe000ed00

080028e4 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80028e4:	b480      	push	{r7}
 80028e6:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 80028e8:	b672      	cpsid	i
}
 80028ea:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 80028ec:	bf00      	nop
 80028ee:	e7fd      	b.n	80028ec <Error_Handler+0x8>

080028f0 <hz_to_mel>:
#include "mel_spectrogram.h"
#include <stdint.h>
#include <string.h> // for memset

// convert hertz to mel scale
static float hz_to_mel(float hz) { return 2595.0f * log10f(1.0f + hz / 700.0f); }
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b082      	sub	sp, #8
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	ed87 0a01 	vstr	s0, [r7, #4]
 80028fa:	ed97 7a01 	vldr	s14, [r7, #4]
 80028fe:	eddf 6a0b 	vldr	s13, [pc, #44]	@ 800292c <hz_to_mel+0x3c>
 8002902:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002906:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800290a:	ee77 7a87 	vadd.f32	s15, s15, s14
 800290e:	eeb0 0a67 	vmov.f32	s0, s15
 8002912:	f00f feab 	bl	801266c <log10f>
 8002916:	eef0 7a40 	vmov.f32	s15, s0
 800291a:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002930 <hz_to_mel+0x40>
 800291e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002922:	eeb0 0a67 	vmov.f32	s0, s15
 8002926:	3708      	adds	r7, #8
 8002928:	46bd      	mov	sp, r7
 800292a:	bd80      	pop	{r7, pc}
 800292c:	442f0000 	.word	0x442f0000
 8002930:	45223000 	.word	0x45223000

08002934 <mel_to_hz>:

// convert mel scale to hertz
static float mel_to_hz(float mel)
{
 8002934:	b580      	push	{r7, lr}
 8002936:	b082      	sub	sp, #8
 8002938:	af00      	add	r7, sp, #0
 800293a:	ed87 0a01 	vstr	s0, [r7, #4]
    // could optimize?
    return 700.0f * (powf(10.0f, mel / 2595.0f) - 1.0f);
 800293e:	edd7 7a01 	vldr	s15, [r7, #4]
 8002942:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8002974 <mel_to_hz+0x40>
 8002946:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 800294a:	eef0 0a47 	vmov.f32	s1, s14
 800294e:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8002952:	f00f fcdd 	bl	8012310 <powf>
 8002956:	eef0 7a40 	vmov.f32	s15, s0
 800295a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800295e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002962:	ed9f 7a05 	vldr	s14, [pc, #20]	@ 8002978 <mel_to_hz+0x44>
 8002966:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 800296a:	eeb0 0a67 	vmov.f32	s0, s15
 800296e:	3708      	adds	r7, #8
 8002970:	46bd      	mov	sp, r7
 8002972:	bd80      	pop	{r7, pc}
 8002974:	45223000 	.word	0x45223000
 8002978:	442f0000 	.word	0x442f0000

0800297c <create_mel_filterbank>:
*/

// main function to create filterbank
void create_mel_filterbank(float *filterbank, uint16_t n_mels, uint16_t n_fft, float sample_rate,
                           float f_min, float f_max)
{
 800297c:	b580      	push	{r7, lr}
 800297e:	f5ad 6d8b 	sub.w	sp, sp, #1112	@ 0x458
 8002982:	af00      	add	r7, sp, #0
 8002984:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002988:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 800298c:	6018      	str	r0, [r3, #0]
 800298e:	4608      	mov	r0, r1
 8002990:	4611      	mov	r1, r2
 8002992:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002996:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 800299a:	ed83 0a00 	vstr	s0, [r3]
 800299e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029a2:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 80029a6:	edc3 0a00 	vstr	s1, [r3]
 80029aa:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029ae:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 80029b2:	ed83 1a00 	vstr	s2, [r3]
 80029b6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029ba:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 80029be:	4602      	mov	r2, r0
 80029c0:	801a      	strh	r2, [r3, #0]
 80029c2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029c6:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80029ca:	460a      	mov	r2, r1
 80029cc:	801a      	strh	r2, [r3, #0]
    uint16_t fft_bins = n_fft / 2 + 1;
 80029ce:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029d2:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 80029d6:	881b      	ldrh	r3, [r3, #0]
 80029d8:	085b      	lsrs	r3, r3, #1
 80029da:	b29b      	uxth	r3, r3
 80029dc:	3301      	adds	r3, #1
 80029de:	f8a7 344e 	strh.w	r3, [r7, #1102]	@ 0x44e

    // zero out the filterbank output
    memset(filterbank, 0, sizeof(float) * n_mels * fft_bins);
 80029e2:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029e6:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 80029ea:	881b      	ldrh	r3, [r3, #0]
 80029ec:	f8b7 244e 	ldrh.w	r2, [r7, #1102]	@ 0x44e
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	009a      	lsls	r2, r3, #2
 80029f6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 80029fa:	f2a3 4344 	subw	r3, r3, #1092	@ 0x444
 80029fe:	2100      	movs	r1, #0
 8002a00:	6818      	ldr	r0, [r3, #0]
 8002a02:	f010 fc1d 	bl	8013240 <memset>

    float mel_min = hz_to_mel(f_min);
 8002a06:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002a0a:	f5a3 638a 	sub.w	r3, r3, #1104	@ 0x450
 8002a0e:	ed93 0a00 	vldr	s0, [r3]
 8002a12:	f7ff ff6d 	bl	80028f0 <hz_to_mel>
 8002a16:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002a1a:	ed83 0a00 	vstr	s0, [r3]
    float mel_max = hz_to_mel(f_max);
 8002a1e:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002a22:	f2a3 4354 	subw	r3, r3, #1108	@ 0x454
 8002a26:	ed93 0a00 	vldr	s0, [r3]
 8002a2a:	f7ff ff61 	bl	80028f0 <hz_to_mel>
 8002a2e:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8002a32:	ed83 0a00 	vstr	s0, [r3]
    float mel_step = (mel_max - mel_min) / (n_mels + 1);
 8002a36:	f207 4344 	addw	r3, r7, #1092	@ 0x444
 8002a3a:	ed93 7a00 	vldr	s14, [r3]
 8002a3e:	f507 6389 	add.w	r3, r7, #1096	@ 0x448
 8002a42:	edd3 7a00 	vldr	s15, [r3]
 8002a46:	ee77 6a67 	vsub.f32	s13, s14, s15
 8002a4a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002a4e:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 8002a52:	881b      	ldrh	r3, [r3, #0]
 8002a54:	3301      	adds	r3, #1
 8002a56:	ee07 3a90 	vmov	s15, r3
 8002a5a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a62:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8002a66:	edc3 7a00 	vstr	s15, [r3]

    float mel_points[MAX_MEL_BANDS + 2]; // Fixed size array (e.g., 130 max)
    float bin_points[MAX_MEL_BANDS + 2];

    // calculate mel spaced frequency points
    for (uint16_t i = 0; i < n_mels + 2; ++i)
 8002a6a:	2300      	movs	r3, #0
 8002a6c:	f8a7 3456 	strh.w	r3, [r7, #1110]	@ 0x456
 8002a70:	e053      	b.n	8002b1a <create_mel_filterbank+0x19e>
    {
        mel_points[i] = mel_min + i * mel_step;
 8002a72:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 8002a76:	ee07 3a90 	vmov	s15, r3
 8002a7a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a7e:	f507 6388 	add.w	r3, r7, #1088	@ 0x440
 8002a82:	edd3 7a00 	vldr	s15, [r3]
 8002a86:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a8a:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 8002a8e:	f507 6289 	add.w	r2, r7, #1096	@ 0x448
 8002a92:	edd2 7a00 	vldr	s15, [r2]
 8002a96:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a9a:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002a9e:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	4413      	add	r3, r2
 8002aa6:	edc3 7a00 	vstr	s15, [r3]
        float hz = mel_to_hz(mel_points[i]);
 8002aaa:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 8002aae:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002ab2:	f5a2 720d 	sub.w	r2, r2, #564	@ 0x234
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	4413      	add	r3, r2
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	eeb0 0a67 	vmov.f32	s0, s15
 8002ac2:	f7ff ff37 	bl	8002934 <mel_to_hz>
 8002ac6:	f207 432c 	addw	r3, r7, #1068	@ 0x42c
 8002aca:	ed83 0a00 	vstr	s0, [r3]
        bin_points[i] = (hz / sample_rate) * n_fft;
 8002ace:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002ad2:	f2a3 434c 	subw	r3, r3, #1100	@ 0x44c
 8002ad6:	f207 422c 	addw	r2, r7, #1068	@ 0x42c
 8002ada:	edd2 6a00 	vldr	s13, [r2]
 8002ade:	edd3 7a00 	vldr	s15, [r3]
 8002ae2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002ae6:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002aea:	f5a3 6389 	sub.w	r3, r3, #1096	@ 0x448
 8002aee:	881b      	ldrh	r3, [r3, #0]
 8002af0:	ee07 3a90 	vmov	s15, r3
 8002af4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af8:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 8002afc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002b00:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002b04:	f2a2 423c 	subw	r2, r2, #1084	@ 0x43c
 8002b08:	009b      	lsls	r3, r3, #2
 8002b0a:	4413      	add	r3, r2
 8002b0c:	edc3 7a00 	vstr	s15, [r3]
    for (uint16_t i = 0; i < n_mels + 2; ++i)
 8002b10:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 8002b14:	3301      	adds	r3, #1
 8002b16:	f8a7 3456 	strh.w	r3, [r7, #1110]	@ 0x456
 8002b1a:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002b1e:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 8002b22:	881b      	ldrh	r3, [r3, #0]
 8002b24:	1c5a      	adds	r2, r3, #1
 8002b26:	f8b7 3456 	ldrh.w	r3, [r7, #1110]	@ 0x456
 8002b2a:	429a      	cmp	r2, r3
 8002b2c:	daa1      	bge.n	8002a72 <create_mel_filterbank+0xf6>
    }

    // create triangular filters
    for (uint16_t m = 0; m < n_mels; ++m)
 8002b2e:	2300      	movs	r3, #0
 8002b30:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
 8002b34:	e0c6      	b.n	8002cc4 <create_mel_filterbank+0x348>
    {
        uint16_t left = (uint16_t)bin_points[m];
 8002b36:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8002b3a:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002b3e:	f2a2 423c 	subw	r2, r2, #1084	@ 0x43c
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	edd3 7a00 	vldr	s15, [r3]
 8002b4a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b4e:	ee17 3a90 	vmov	r3, s15
 8002b52:	f8a7 343e 	strh.w	r3, [r7, #1086]	@ 0x43e
        uint16_t center = (uint16_t)bin_points[m + 1];
 8002b56:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8002b5a:	3301      	adds	r3, #1
 8002b5c:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002b60:	f2a2 423c 	subw	r2, r2, #1084	@ 0x43c
 8002b64:	009b      	lsls	r3, r3, #2
 8002b66:	4413      	add	r3, r2
 8002b68:	edd3 7a00 	vldr	s15, [r3]
 8002b6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b70:	ee17 3a90 	vmov	r3, s15
 8002b74:	f8a7 343c 	strh.w	r3, [r7, #1084]	@ 0x43c
        uint16_t right = (uint16_t)bin_points[m + 2];
 8002b78:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8002b7c:	3302      	adds	r3, #2
 8002b7e:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002b82:	f2a2 423c 	subw	r2, r2, #1084	@ 0x43c
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	4413      	add	r3, r2
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b92:	ee17 3a90 	vmov	r3, s15
 8002b96:	f8a7 343a 	strh.w	r3, [r7, #1082]	@ 0x43a

        // denominators prevent division by zero
        float denom_left = center - left + 1e-6f;
 8002b9a:	f8b7 243c 	ldrh.w	r2, [r7, #1084]	@ 0x43c
 8002b9e:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	ee07 3a90 	vmov	s15, r3
 8002ba8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bac:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8002ce4 <create_mel_filterbank+0x368>
 8002bb0:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bb4:	f207 4334 	addw	r3, r7, #1076	@ 0x434
 8002bb8:	edc3 7a00 	vstr	s15, [r3]
        float denom_right = right - center + 1e-6f;
 8002bbc:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	@ 0x43a
 8002bc0:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	ee07 3a90 	vmov	s15, r3
 8002bca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bce:	ed9f 7a45 	vldr	s14, [pc, #276]	@ 8002ce4 <create_mel_filterbank+0x368>
 8002bd2:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002bd6:	f507 6386 	add.w	r3, r7, #1072	@ 0x430
 8002bda:	edc3 7a00 	vstr	s15, [r3]

        // fill the filterbank for this mel band
        for (uint16_t k = left; k < center && k < fft_bins; ++k)
 8002bde:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 8002be2:	f8a7 3452 	strh.w	r3, [r7, #1106]	@ 0x452
 8002be6:	e025      	b.n	8002c34 <create_mel_filterbank+0x2b8>
        {
            filterbank[m * fft_bins + k] = (k - left) / denom_left;
 8002be8:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	@ 0x452
 8002bec:	f8b7 343e 	ldrh.w	r3, [r7, #1086]	@ 0x43e
 8002bf0:	1ad3      	subs	r3, r2, r3
 8002bf2:	ee07 3a90 	vmov	s15, r3
 8002bf6:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002bfa:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8002bfe:	f8b7 244e 	ldrh.w	r2, [r7, #1102]	@ 0x44e
 8002c02:	fb03 f202 	mul.w	r2, r3, r2
 8002c06:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	@ 0x452
 8002c0a:	4413      	add	r3, r2
 8002c0c:	009b      	lsls	r3, r3, #2
 8002c0e:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002c12:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8002c16:	6812      	ldr	r2, [r2, #0]
 8002c18:	4413      	add	r3, r2
 8002c1a:	f207 4234 	addw	r2, r7, #1076	@ 0x434
 8002c1e:	ed92 7a00 	vldr	s14, [r2]
 8002c22:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c26:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t k = left; k < center && k < fft_bins; ++k)
 8002c2a:	f8b7 3452 	ldrh.w	r3, [r7, #1106]	@ 0x452
 8002c2e:	3301      	adds	r3, #1
 8002c30:	f8a7 3452 	strh.w	r3, [r7, #1106]	@ 0x452
 8002c34:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	@ 0x452
 8002c38:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 8002c3c:	429a      	cmp	r2, r3
 8002c3e:	d205      	bcs.n	8002c4c <create_mel_filterbank+0x2d0>
 8002c40:	f8b7 2452 	ldrh.w	r2, [r7, #1106]	@ 0x452
 8002c44:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	@ 0x44e
 8002c48:	429a      	cmp	r2, r3
 8002c4a:	d3cd      	bcc.n	8002be8 <create_mel_filterbank+0x26c>
        }
        for (uint16_t k = center; k < right && k < fft_bins; ++k)
 8002c4c:	f8b7 343c 	ldrh.w	r3, [r7, #1084]	@ 0x43c
 8002c50:	f8a7 3450 	strh.w	r3, [r7, #1104]	@ 0x450
 8002c54:	e025      	b.n	8002ca2 <create_mel_filterbank+0x326>
        {
            filterbank[m * fft_bins + k] = (right - k) / denom_right;
 8002c56:	f8b7 243a 	ldrh.w	r2, [r7, #1082]	@ 0x43a
 8002c5a:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 8002c5e:	1ad3      	subs	r3, r2, r3
 8002c60:	ee07 3a90 	vmov	s15, r3
 8002c64:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002c68:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8002c6c:	f8b7 244e 	ldrh.w	r2, [r7, #1102]	@ 0x44e
 8002c70:	fb03 f202 	mul.w	r2, r3, r2
 8002c74:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 8002c78:	4413      	add	r3, r2
 8002c7a:	009b      	lsls	r3, r3, #2
 8002c7c:	f507 628b 	add.w	r2, r7, #1112	@ 0x458
 8002c80:	f2a2 4244 	subw	r2, r2, #1092	@ 0x444
 8002c84:	6812      	ldr	r2, [r2, #0]
 8002c86:	4413      	add	r3, r2
 8002c88:	f507 6286 	add.w	r2, r7, #1072	@ 0x430
 8002c8c:	ed92 7a00 	vldr	s14, [r2]
 8002c90:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002c94:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t k = center; k < right && k < fft_bins; ++k)
 8002c98:	f8b7 3450 	ldrh.w	r3, [r7, #1104]	@ 0x450
 8002c9c:	3301      	adds	r3, #1
 8002c9e:	f8a7 3450 	strh.w	r3, [r7, #1104]	@ 0x450
 8002ca2:	f8b7 2450 	ldrh.w	r2, [r7, #1104]	@ 0x450
 8002ca6:	f8b7 343a 	ldrh.w	r3, [r7, #1082]	@ 0x43a
 8002caa:	429a      	cmp	r2, r3
 8002cac:	d205      	bcs.n	8002cba <create_mel_filterbank+0x33e>
 8002cae:	f8b7 2450 	ldrh.w	r2, [r7, #1104]	@ 0x450
 8002cb2:	f8b7 344e 	ldrh.w	r3, [r7, #1102]	@ 0x44e
 8002cb6:	429a      	cmp	r2, r3
 8002cb8:	d3cd      	bcc.n	8002c56 <create_mel_filterbank+0x2da>
    for (uint16_t m = 0; m < n_mels; ++m)
 8002cba:	f8b7 3454 	ldrh.w	r3, [r7, #1108]	@ 0x454
 8002cbe:	3301      	adds	r3, #1
 8002cc0:	f8a7 3454 	strh.w	r3, [r7, #1108]	@ 0x454
 8002cc4:	f507 638b 	add.w	r3, r7, #1112	@ 0x458
 8002cc8:	f2a3 4346 	subw	r3, r3, #1094	@ 0x446
 8002ccc:	f8b7 2454 	ldrh.w	r2, [r7, #1108]	@ 0x454
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	429a      	cmp	r2, r3
 8002cd4:	f4ff af2f 	bcc.w	8002b36 <create_mel_filterbank+0x1ba>
        }
    }
}
 8002cd8:	bf00      	nop
 8002cda:	bf00      	nop
 8002cdc:	f507 678b 	add.w	r7, r7, #1112	@ 0x458
 8002ce0:	46bd      	mov	sp, r7
 8002ce2:	bd80      	pop	{r7, pc}
 8002ce4:	358637bd 	.word	0x358637bd

08002ce8 <mel_spectrogram_init>:
static float window_buffer[MAX_FFT_SIZE];
__attribute__((section(".sdram_data")))
static float mel_filters[MAX_MEL_BANDS * (MAX_FFT_SIZE / 2 + 1)];

int mel_spectrogram_init(MelSpectrogramConfig_t *config)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	b084      	sub	sp, #16
 8002cec:	af00      	add	r7, sp, #0
 8002cee:	6078      	str	r0, [r7, #4]
    if (!config)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	d102      	bne.n	8002cfc <mel_spectrogram_init+0x14>
        return -1;
 8002cf6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cfa:	e069      	b.n	8002dd0 <mel_spectrogram_init+0xe8>
    memcpy(&cfg, config, sizeof(MelSpectrogramConfig_t));
 8002cfc:	2214      	movs	r2, #20
 8002cfe:	6879      	ldr	r1, [r7, #4]
 8002d00:	4835      	ldr	r0, [pc, #212]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d02:	f010 fad7 	bl	80132b4 <memcpy>

    if (cfg.fft_size > MAX_FFT_SIZE || cfg.n_mels > MAX_MEL_BANDS)
 8002d06:	4b34      	ldr	r3, [pc, #208]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d08:	889b      	ldrh	r3, [r3, #4]
 8002d0a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002d0e:	d803      	bhi.n	8002d18 <mel_spectrogram_init+0x30>
 8002d10:	4b31      	ldr	r3, [pc, #196]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d12:	891b      	ldrh	r3, [r3, #8]
 8002d14:	2b80      	cmp	r3, #128	@ 0x80
 8002d16:	d902      	bls.n	8002d1e <mel_spectrogram_init+0x36>
        return -1;
 8002d18:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d1c:	e058      	b.n	8002dd0 <mel_spectrogram_init+0xe8>

    if (arm_rfft_fast_init_f32(&fft_instance, cfg.fft_size) != ARM_MATH_SUCCESS)
 8002d1e:	4b2e      	ldr	r3, [pc, #184]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d20:	889b      	ldrh	r3, [r3, #4]
 8002d22:	4619      	mov	r1, r3
 8002d24:	482d      	ldr	r0, [pc, #180]	@ (8002ddc <mel_spectrogram_init+0xf4>)
 8002d26:	f005 f811 	bl	8007d4c <arm_rfft_fast_init_f32>
 8002d2a:	4603      	mov	r3, r0
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d002      	beq.n	8002d36 <mel_spectrogram_init+0x4e>
        return -2;
 8002d30:	f06f 0301 	mvn.w	r3, #1
 8002d34:	e04c      	b.n	8002dd0 <mel_spectrogram_init+0xe8>

    // STM32 , called in mel_filterbank.c
    // arm_rfft_fast_init_f32(&fft_instance, cfg.fft_size);

    // create Hann window
    for (int i = 0; i < cfg.fft_size; ++i)
 8002d36:	2300      	movs	r3, #0
 8002d38:	60fb      	str	r3, [r7, #12]
 8002d3a:	e028      	b.n	8002d8e <mel_spectrogram_init+0xa6>
    {
        window_buffer[i] = 0.5f * (1.0f - arm_cos_f32(2.0f * PI * i / (cfg.fft_size - 1)));
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	ee07 3a90 	vmov	s15, r3
 8002d42:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d46:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 8002de0 <mel_spectrogram_init+0xf8>
 8002d4a:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002d4e:	4b22      	ldr	r3, [pc, #136]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d50:	889b      	ldrh	r3, [r3, #4]
 8002d52:	3b01      	subs	r3, #1
 8002d54:	ee07 3a90 	vmov	s15, r3
 8002d58:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002d5c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002d60:	eeb0 0a66 	vmov.f32	s0, s13
 8002d64:	f002 fb16 	bl	8005394 <arm_cos_f32>
 8002d68:	eef0 7a40 	vmov.f32	s15, s0
 8002d6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002d70:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d74:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8002d78:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002d7c:	4a19      	ldr	r2, [pc, #100]	@ (8002de4 <mel_spectrogram_init+0xfc>)
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	009b      	lsls	r3, r3, #2
 8002d82:	4413      	add	r3, r2
 8002d84:	edc3 7a00 	vstr	s15, [r3]
    for (int i = 0; i < cfg.fft_size; ++i)
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	60fb      	str	r3, [r7, #12]
 8002d8e:	4b12      	ldr	r3, [pc, #72]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d90:	889b      	ldrh	r3, [r3, #4]
 8002d92:	461a      	mov	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	4293      	cmp	r3, r2
 8002d98:	dbd0      	blt.n	8002d3c <mel_spectrogram_init+0x54>
    }

    // create Mel filterbank
    create_mel_filterbank(mel_filters, cfg.n_mels, cfg.fft_size, cfg.sample_rate, cfg.f_min,
 8002d9a:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002d9c:	891b      	ldrh	r3, [r3, #8]
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002da0:	8892      	ldrh	r2, [r2, #4]
 8002da2:	490d      	ldr	r1, [pc, #52]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002da4:	6809      	ldr	r1, [r1, #0]
 8002da6:	ee07 1a90 	vmov	s15, r1
 8002daa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dae:	490a      	ldr	r1, [pc, #40]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002db0:	ed91 7a03 	vldr	s14, [r1, #12]
 8002db4:	4908      	ldr	r1, [pc, #32]	@ (8002dd8 <mel_spectrogram_init+0xf0>)
 8002db6:	edd1 6a04 	vldr	s13, [r1, #16]
 8002dba:	eeb0 1a66 	vmov.f32	s2, s13
 8002dbe:	eef0 0a47 	vmov.f32	s1, s14
 8002dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8002dc6:	4619      	mov	r1, r3
 8002dc8:	4807      	ldr	r0, [pc, #28]	@ (8002de8 <mel_spectrogram_init+0x100>)
 8002dca:	f7ff fdd7 	bl	800297c <create_mel_filterbank>
                          cfg.f_max);

    return 0;
 8002dce:	2300      	movs	r3, #0
}
 8002dd0:	4618      	mov	r0, r3
 8002dd2:	3710      	adds	r7, #16
 8002dd4:	46bd      	mov	sp, r7
 8002dd6:	bd80      	pop	{r7, pc}
 8002dd8:	24008930 	.word	0x24008930
 8002ddc:	24008944 	.word	0x24008944
 8002de0:	40c90fdb 	.word	0x40c90fdb
 8002de4:	2400895c 	.word	0x2400895c
 8002de8:	70000000 	.word	0x70000000

08002dec <calculate_mel_spectrogram>:

// run STFT + apply Mel filterbank
// converts PCM data to mel spectrogram
int calculate_mel_spectrogram(const int16_t *pcm_data, uint32_t pcm_size, float *spectrogram,
                              uint16_t spec_cols_max)
{
 8002dec:	b590      	push	{r4, r7, lr}
 8002dee:	f5ad 5d41 	sub.w	sp, sp, #12352	@ 0x3040
 8002df2:	b081      	sub	sp, #4
 8002df4:	af00      	add	r7, sp, #0
 8002df6:	f107 0440 	add.w	r4, r7, #64	@ 0x40
 8002dfa:	f844 0c34 	str.w	r0, [r4, #-52]
 8002dfe:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8002e02:	f840 1c38 	str.w	r1, [r0, #-56]
 8002e06:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8002e0a:	f841 2c3c 	str.w	r2, [r1, #-60]
 8002e0e:	461a      	mov	r2, r3
 8002e10:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e14:	f823 2c3e 	strh.w	r2, [r3, #-62]
    if (!pcm_data || !spectrogram)
 8002e18:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e1c:	f853 3c34 	ldr.w	r3, [r3, #-52]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d005      	beq.n	8002e30 <calculate_mel_spectrogram+0x44>
 8002e24:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e28:	f853 3c3c 	ldr.w	r3, [r3, #-60]
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	d102      	bne.n	8002e36 <calculate_mel_spectrogram+0x4a>
        return -1;
 8002e30:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002e34:	e203      	b.n	800323e <calculate_mel_spectrogram+0x452>

    const uint16_t n_fft = cfg.fft_size;
 8002e36:	4ba6      	ldr	r3, [pc, #664]	@ (80030d0 <calculate_mel_spectrogram+0x2e4>)
 8002e38:	889b      	ldrh	r3, [r3, #4]
 8002e3a:	f243 0226 	movw	r2, #12326	@ 0x3026
 8002e3e:	443a      	add	r2, r7
 8002e40:	8013      	strh	r3, [r2, #0]
    const uint16_t hop = cfg.hop_length;
 8002e42:	4ba3      	ldr	r3, [pc, #652]	@ (80030d0 <calculate_mel_spectrogram+0x2e4>)
 8002e44:	88db      	ldrh	r3, [r3, #6]
 8002e46:	f243 0224 	movw	r2, #12324	@ 0x3024
 8002e4a:	443a      	add	r2, r7
 8002e4c:	8013      	strh	r3, [r2, #0]
    const uint16_t fft_bins = n_fft / 2 + 1;
 8002e4e:	f243 0326 	movw	r3, #12326	@ 0x3026
 8002e52:	443b      	add	r3, r7
 8002e54:	881b      	ldrh	r3, [r3, #0]
 8002e56:	085b      	lsrs	r3, r3, #1
 8002e58:	b29b      	uxth	r3, r3
 8002e5a:	3301      	adds	r3, #1
 8002e5c:	f243 0222 	movw	r2, #12322	@ 0x3022
 8002e60:	443a      	add	r2, r7
 8002e62:	8013      	strh	r3, [r2, #0]
    uint16_t n_frames = (pcm_size - n_fft) / hop + 1;
 8002e64:	f243 0326 	movw	r3, #12326	@ 0x3026
 8002e68:	443b      	add	r3, r7
 8002e6a:	881b      	ldrh	r3, [r3, #0]
 8002e6c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002e70:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002e74:	1ad2      	subs	r2, r2, r3
 8002e76:	f243 0324 	movw	r3, #12324	@ 0x3024
 8002e7a:	443b      	add	r3, r7
 8002e7c:	881b      	ldrh	r3, [r3, #0]
 8002e7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e82:	b29b      	uxth	r3, r3
 8002e84:	3301      	adds	r3, #1
 8002e86:	f243 023e 	movw	r2, #12350	@ 0x303e
 8002e8a:	443a      	add	r2, r7
 8002e8c:	8013      	strh	r3, [r2, #0]

    if (n_frames > spec_cols_max)
 8002e8e:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002e92:	f243 023e 	movw	r2, #12350	@ 0x303e
 8002e96:	443a      	add	r2, r7
 8002e98:	8812      	ldrh	r2, [r2, #0]
 8002e9a:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8002e9e:	429a      	cmp	r2, r3
 8002ea0:	d907      	bls.n	8002eb2 <calculate_mel_spectrogram+0xc6>
        n_frames = spec_cols_max;
 8002ea2:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002ea6:	f833 3c3e 	ldrh.w	r3, [r3, #-62]
 8002eaa:	f243 023e 	movw	r2, #12350	@ 0x303e
 8002eae:	443a      	add	r2, r7
 8002eb0:	8013      	strh	r3, [r2, #0]

    // input to CMSIS FFT
    float fft_buffer[MAX_FFT_SIZE];
    float power_spectrum[MAX_FFT_SIZE / 2 + 1];

    for (uint16_t frame = 0; frame < n_frames; ++frame)
 8002eb2:	2300      	movs	r3, #0
 8002eb4:	f243 023c 	movw	r2, #12348	@ 0x303c
 8002eb8:	443a      	add	r2, r7
 8002eba:	8013      	strh	r3, [r2, #0]
 8002ebc:	e1b0      	b.n	8003220 <calculate_mel_spectrogram+0x434>
    {
        uint32_t offset = frame * hop;
 8002ebe:	f243 033c 	movw	r3, #12348	@ 0x303c
 8002ec2:	443b      	add	r3, r7
 8002ec4:	881b      	ldrh	r3, [r3, #0]
 8002ec6:	f243 0224 	movw	r2, #12324	@ 0x3024
 8002eca:	443a      	add	r2, r7
 8002ecc:	8812      	ldrh	r2, [r2, #0]
 8002ece:	fb02 f303 	mul.w	r3, r2, r3
 8002ed2:	f243 021c 	movw	r2, #12316	@ 0x301c
 8002ed6:	443a      	add	r2, r7
 8002ed8:	6013      	str	r3, [r2, #0]

        // frame with window
        for (uint16_t i = 0; i < n_fft; ++i)
 8002eda:	2300      	movs	r3, #0
 8002edc:	f243 023a 	movw	r2, #12346	@ 0x303a
 8002ee0:	443a      	add	r2, r7
 8002ee2:	8013      	strh	r3, [r2, #0]
 8002ee4:	e053      	b.n	8002f8e <calculate_mel_spectrogram+0x1a2>
        {
            if (offset + i < pcm_size)
 8002ee6:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002eea:	443b      	add	r3, r7
 8002eec:	881a      	ldrh	r2, [r3, #0]
 8002eee:	f243 031c 	movw	r3, #12316	@ 0x301c
 8002ef2:	443b      	add	r3, r7
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	4413      	add	r3, r2
 8002ef8:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002efc:	f852 2c38 	ldr.w	r2, [r2, #-56]
 8002f00:	429a      	cmp	r2, r3
 8002f02:	d92f      	bls.n	8002f64 <calculate_mel_spectrogram+0x178>
                fft_buffer[i] = (pcm_data[offset + i] / 32768.0f) * window_buffer[i];
 8002f04:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002f08:	443b      	add	r3, r7
 8002f0a:	881a      	ldrh	r2, [r3, #0]
 8002f0c:	f243 031c 	movw	r3, #12316	@ 0x301c
 8002f10:	443b      	add	r3, r7
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	4413      	add	r3, r2
 8002f16:	005b      	lsls	r3, r3, #1
 8002f18:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 8002f1c:	f852 2c34 	ldr.w	r2, [r2, #-52]
 8002f20:	4413      	add	r3, r2
 8002f22:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002f26:	ee07 3a90 	vmov	s15, r3
 8002f2a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002f2e:	eddf 6a69 	vldr	s13, [pc, #420]	@ 80030d4 <calculate_mel_spectrogram+0x2e8>
 8002f32:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8002f36:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002f3a:	443b      	add	r3, r7
 8002f3c:	881b      	ldrh	r3, [r3, #0]
 8002f3e:	4a66      	ldr	r2, [pc, #408]	@ (80030d8 <calculate_mel_spectrogram+0x2ec>)
 8002f40:	009b      	lsls	r3, r3, #2
 8002f42:	4413      	add	r3, r2
 8002f44:	edd3 7a00 	vldr	s15, [r3]
 8002f48:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002f4c:	443b      	add	r3, r7
 8002f4e:	881b      	ldrh	r3, [r3, #0]
 8002f50:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f54:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002f58:	009b      	lsls	r3, r3, #2
 8002f5a:	4413      	add	r3, r2
 8002f5c:	3b2c      	subs	r3, #44	@ 0x2c
 8002f5e:	edc3 7a00 	vstr	s15, [r3]
 8002f62:	e00b      	b.n	8002f7c <calculate_mel_spectrogram+0x190>
            else
                fft_buffer[i] = 0.0f;
 8002f64:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002f68:	443b      	add	r3, r7
 8002f6a:	881b      	ldrh	r3, [r3, #0]
 8002f6c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002f70:	009b      	lsls	r3, r3, #2
 8002f72:	4413      	add	r3, r2
 8002f74:	3b2c      	subs	r3, #44	@ 0x2c
 8002f76:	f04f 0200 	mov.w	r2, #0
 8002f7a:	601a      	str	r2, [r3, #0]
        for (uint16_t i = 0; i < n_fft; ++i)
 8002f7c:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002f80:	443b      	add	r3, r7
 8002f82:	881b      	ldrh	r3, [r3, #0]
 8002f84:	3301      	adds	r3, #1
 8002f86:	f243 023a 	movw	r2, #12346	@ 0x303a
 8002f8a:	443a      	add	r2, r7
 8002f8c:	8013      	strh	r3, [r2, #0]
 8002f8e:	f243 033a 	movw	r3, #12346	@ 0x303a
 8002f92:	443b      	add	r3, r7
 8002f94:	881a      	ldrh	r2, [r3, #0]
 8002f96:	f243 0326 	movw	r3, #12326	@ 0x3026
 8002f9a:	443b      	add	r3, r7
 8002f9c:	881b      	ldrh	r3, [r3, #0]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3a1      	bcc.n	8002ee6 <calculate_mel_spectrogram+0xfa>
        }

        // real FFT using CMSIS-DSP
        arm_rfft_fast_f32(&fft_instance, fft_buffer, fft_buffer, 0);
 8002fa2:	4a4e      	ldr	r2, [pc, #312]	@ (80030dc <calculate_mel_spectrogram+0x2f0>)
 8002fa4:	f502 5341 	add.w	r3, r2, #12352	@ 0x3040
 8002fa8:	19da      	adds	r2, r3, r7
 8002faa:	494c      	ldr	r1, [pc, #304]	@ (80030dc <calculate_mel_spectrogram+0x2f0>)
 8002fac:	f501 5341 	add.w	r3, r1, #12352	@ 0x3040
 8002fb0:	19d9      	adds	r1, r3, r7
 8002fb2:	2300      	movs	r3, #0
 8002fb4:	484a      	ldr	r0, [pc, #296]	@ (80030e0 <calculate_mel_spectrogram+0x2f4>)
 8002fb6:	f004 fd5f 	bl	8007a78 <arm_rfft_fast_f32>

        // power spectrum from real + imag
        // DC comp
        power_spectrum[0] = fft_buffer[0] * fft_buffer[0];
 8002fba:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002fbe:	ed13 7a0b 	vldr	s14, [r3, #-44]	@ 0xffffffd4
 8002fc2:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8002fc6:	ed53 7a0b 	vldr	s15, [r3, #-44]	@ 0xffffffd4
 8002fca:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002fce:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8002fd2:	ed43 7a0c 	vstr	s15, [r3, #-48]	@ 0xffffffd0
        for (uint16_t i = 1; i < fft_bins - 1; ++i)
 8002fd6:	2301      	movs	r3, #1
 8002fd8:	f243 0238 	movw	r2, #12344	@ 0x3038
 8002fdc:	443a      	add	r2, r7
 8002fde:	8013      	strh	r3, [r2, #0]
 8002fe0:	e042      	b.n	8003068 <calculate_mel_spectrogram+0x27c>
        {
            float re = fft_buffer[2 * i];
 8002fe2:	f243 0338 	movw	r3, #12344	@ 0x3038
 8002fe6:	443b      	add	r3, r7
 8002fe8:	881b      	ldrh	r3, [r3, #0]
 8002fea:	005b      	lsls	r3, r3, #1
 8002fec:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8002ff0:	009b      	lsls	r3, r3, #2
 8002ff2:	4413      	add	r3, r2
 8002ff4:	3b2c      	subs	r3, #44	@ 0x2c
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	f243 0218 	movw	r2, #12312	@ 0x3018
 8002ffc:	443a      	add	r2, r7
 8002ffe:	6013      	str	r3, [r2, #0]
            float im = fft_buffer[2 * i + 1];
 8003000:	f243 0338 	movw	r3, #12344	@ 0x3038
 8003004:	443b      	add	r3, r7
 8003006:	881b      	ldrh	r3, [r3, #0]
 8003008:	005b      	lsls	r3, r3, #1
 800300a:	3301      	adds	r3, #1
 800300c:	f507 5282 	add.w	r2, r7, #4160	@ 0x1040
 8003010:	009b      	lsls	r3, r3, #2
 8003012:	4413      	add	r3, r2
 8003014:	3b2c      	subs	r3, #44	@ 0x2c
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f243 0214 	movw	r2, #12308	@ 0x3014
 800301c:	443a      	add	r2, r7
 800301e:	6013      	str	r3, [r2, #0]
            power_spectrum[i] = re * re + im * im;
 8003020:	f243 0318 	movw	r3, #12312	@ 0x3018
 8003024:	443b      	add	r3, r7
 8003026:	edd3 7a00 	vldr	s15, [r3]
 800302a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800302e:	f243 0314 	movw	r3, #12308	@ 0x3014
 8003032:	443b      	add	r3, r7
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee67 7aa7 	vmul.f32	s15, s15, s15
 800303c:	f243 0338 	movw	r3, #12344	@ 0x3038
 8003040:	443b      	add	r3, r7
 8003042:	881b      	ldrh	r3, [r3, #0]
 8003044:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003048:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 800304c:	009b      	lsls	r3, r3, #2
 800304e:	4413      	add	r3, r2
 8003050:	3b30      	subs	r3, #48	@ 0x30
 8003052:	edc3 7a00 	vstr	s15, [r3]
        for (uint16_t i = 1; i < fft_bins - 1; ++i)
 8003056:	f243 0338 	movw	r3, #12344	@ 0x3038
 800305a:	443b      	add	r3, r7
 800305c:	881b      	ldrh	r3, [r3, #0]
 800305e:	3301      	adds	r3, #1
 8003060:	f243 0238 	movw	r2, #12344	@ 0x3038
 8003064:	443a      	add	r2, r7
 8003066:	8013      	strh	r3, [r2, #0]
 8003068:	f243 0338 	movw	r3, #12344	@ 0x3038
 800306c:	443b      	add	r3, r7
 800306e:	881a      	ldrh	r2, [r3, #0]
 8003070:	f243 0322 	movw	r3, #12322	@ 0x3022
 8003074:	443b      	add	r3, r7
 8003076:	881b      	ldrh	r3, [r3, #0]
 8003078:	3b01      	subs	r3, #1
 800307a:	429a      	cmp	r2, r3
 800307c:	dbb1      	blt.n	8002fe2 <calculate_mel_spectrogram+0x1f6>
        }
        // nyquist component
        power_spectrum[fft_bins - 1] = fft_buffer[1] * fft_buffer[1]; // Nyquist
 800307e:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 8003082:	ed13 7a0a 	vldr	s14, [r3, #-40]	@ 0xffffffd8
 8003086:	f507 5382 	add.w	r3, r7, #4160	@ 0x1040
 800308a:	ed53 7a0a 	vldr	s15, [r3, #-40]	@ 0xffffffd8
 800308e:	f243 0322 	movw	r3, #12322	@ 0x3022
 8003092:	443b      	add	r3, r7
 8003094:	881b      	ldrh	r3, [r3, #0]
 8003096:	3b01      	subs	r3, #1
 8003098:	ee67 7a27 	vmul.f32	s15, s14, s15
 800309c:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80030a0:	009b      	lsls	r3, r3, #2
 80030a2:	4413      	add	r3, r2
 80030a4:	3b30      	subs	r3, #48	@ 0x30
 80030a6:	edc3 7a00 	vstr	s15, [r3]

        // apply Mel filterbank
        for (uint16_t m = 0; m < cfg.n_mels; ++m)
 80030aa:	2300      	movs	r3, #0
 80030ac:	f243 0236 	movw	r2, #12342	@ 0x3036
 80030b0:	443a      	add	r2, r7
 80030b2:	8013      	strh	r3, [r2, #0]
 80030b4:	e0a2      	b.n	80031fc <calculate_mel_spectrogram+0x410>
        {
            float mel_energy = 0.0f;
 80030b6:	f04f 0300 	mov.w	r3, #0
 80030ba:	f243 0230 	movw	r2, #12336	@ 0x3030
 80030be:	443a      	add	r2, r7
 80030c0:	6013      	str	r3, [r2, #0]
            for (uint16_t k = 0; k < fft_bins; ++k)
 80030c2:	2300      	movs	r3, #0
 80030c4:	f243 022e 	movw	r2, #12334	@ 0x302e
 80030c8:	443a      	add	r2, r7
 80030ca:	8013      	strh	r3, [r2, #0]
 80030cc:	e040      	b.n	8003150 <calculate_mel_spectrogram+0x364>
 80030ce:	bf00      	nop
 80030d0:	24008930 	.word	0x24008930
 80030d4:	47000000 	.word	0x47000000
 80030d8:	2400895c 	.word	0x2400895c
 80030dc:	ffffdfd4 	.word	0xffffdfd4
 80030e0:	24008944 	.word	0x24008944
            {
                mel_energy += power_spectrum[k] * mel_filters[m * fft_bins + k];
 80030e4:	f243 032e 	movw	r3, #12334	@ 0x302e
 80030e8:	443b      	add	r3, r7
 80030ea:	881b      	ldrh	r3, [r3, #0]
 80030ec:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80030f0:	009b      	lsls	r3, r3, #2
 80030f2:	4413      	add	r3, r2
 80030f4:	3b30      	subs	r3, #48	@ 0x30
 80030f6:	ed93 7a00 	vldr	s14, [r3]
 80030fa:	f243 0336 	movw	r3, #12342	@ 0x3036
 80030fe:	443b      	add	r3, r7
 8003100:	881b      	ldrh	r3, [r3, #0]
 8003102:	f243 0222 	movw	r2, #12322	@ 0x3022
 8003106:	443a      	add	r2, r7
 8003108:	8812      	ldrh	r2, [r2, #0]
 800310a:	fb03 f202 	mul.w	r2, r3, r2
 800310e:	f243 032e 	movw	r3, #12334	@ 0x302e
 8003112:	443b      	add	r3, r7
 8003114:	881b      	ldrh	r3, [r3, #0]
 8003116:	4413      	add	r3, r2
 8003118:	4a4c      	ldr	r2, [pc, #304]	@ (800324c <calculate_mel_spectrogram+0x460>)
 800311a:	009b      	lsls	r3, r3, #2
 800311c:	4413      	add	r3, r2
 800311e:	edd3 7a00 	vldr	s15, [r3]
 8003122:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003126:	f243 0330 	movw	r3, #12336	@ 0x3030
 800312a:	443b      	add	r3, r7
 800312c:	ed93 7a00 	vldr	s14, [r3]
 8003130:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003134:	f243 0330 	movw	r3, #12336	@ 0x3030
 8003138:	443b      	add	r3, r7
 800313a:	edc3 7a00 	vstr	s15, [r3]
            for (uint16_t k = 0; k < fft_bins; ++k)
 800313e:	f243 032e 	movw	r3, #12334	@ 0x302e
 8003142:	443b      	add	r3, r7
 8003144:	881b      	ldrh	r3, [r3, #0]
 8003146:	3301      	adds	r3, #1
 8003148:	f243 022e 	movw	r2, #12334	@ 0x302e
 800314c:	443a      	add	r2, r7
 800314e:	8013      	strh	r3, [r2, #0]
 8003150:	f243 032e 	movw	r3, #12334	@ 0x302e
 8003154:	443b      	add	r3, r7
 8003156:	881a      	ldrh	r2, [r3, #0]
 8003158:	f243 0322 	movw	r3, #12322	@ 0x3022
 800315c:	443b      	add	r3, r7
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	429a      	cmp	r2, r3
 8003162:	d3bf      	bcc.n	80030e4 <calculate_mel_spectrogram+0x2f8>
            }

            float log_energy = 10.0f * log10f(mel_energy + LOG10_OFFSET);
 8003164:	f243 0330 	movw	r3, #12336	@ 0x3030
 8003168:	443b      	add	r3, r7
 800316a:	edd3 7a00 	vldr	s15, [r3]
 800316e:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8003250 <calculate_mel_spectrogram+0x464>
 8003172:	ee77 7a87 	vadd.f32	s15, s15, s14
 8003176:	eeb0 0a67 	vmov.f32	s0, s15
 800317a:	f00f fa77 	bl	801266c <log10f>
 800317e:	eef0 7a40 	vmov.f32	s15, s0
 8003182:	eeb2 7a04 	vmov.f32	s14, #36	@ 0x41200000  10.0
 8003186:	ee67 7a87 	vmul.f32	s15, s15, s14
 800318a:	f243 0328 	movw	r3, #12328	@ 0x3028
 800318e:	443b      	add	r3, r7
 8003190:	edc3 7a00 	vstr	s15, [r3]
            if (log_energy < MIN_DB_LEVEL)
 8003194:	f243 0328 	movw	r3, #12328	@ 0x3028
 8003198:	443b      	add	r3, r7
 800319a:	edd3 7a00 	vldr	s15, [r3]
 800319e:	ed9f 7a2d 	vldr	s14, [pc, #180]	@ 8003254 <calculate_mel_spectrogram+0x468>
 80031a2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80031a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80031aa:	d504      	bpl.n	80031b6 <calculate_mel_spectrogram+0x3ca>
                log_energy = MIN_DB_LEVEL;
 80031ac:	4b2a      	ldr	r3, [pc, #168]	@ (8003258 <calculate_mel_spectrogram+0x46c>)
 80031ae:	f243 0228 	movw	r2, #12328	@ 0x3028
 80031b2:	443a      	add	r2, r7
 80031b4:	6013      	str	r3, [r2, #0]
            spectrogram[m * n_frames + frame] = log_energy;
 80031b6:	f243 0336 	movw	r3, #12342	@ 0x3036
 80031ba:	443b      	add	r3, r7
 80031bc:	881b      	ldrh	r3, [r3, #0]
 80031be:	f243 023e 	movw	r2, #12350	@ 0x303e
 80031c2:	443a      	add	r2, r7
 80031c4:	8812      	ldrh	r2, [r2, #0]
 80031c6:	fb03 f202 	mul.w	r2, r3, r2
 80031ca:	f243 033c 	movw	r3, #12348	@ 0x303c
 80031ce:	443b      	add	r3, r7
 80031d0:	881b      	ldrh	r3, [r3, #0]
 80031d2:	4413      	add	r3, r2
 80031d4:	009b      	lsls	r3, r3, #2
 80031d6:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80031da:	f852 2c3c 	ldr.w	r2, [r2, #-60]
 80031de:	4413      	add	r3, r2
 80031e0:	f243 0228 	movw	r2, #12328	@ 0x3028
 80031e4:	443a      	add	r2, r7
 80031e6:	6812      	ldr	r2, [r2, #0]
 80031e8:	601a      	str	r2, [r3, #0]
        for (uint16_t m = 0; m < cfg.n_mels; ++m)
 80031ea:	f243 0336 	movw	r3, #12342	@ 0x3036
 80031ee:	443b      	add	r3, r7
 80031f0:	881b      	ldrh	r3, [r3, #0]
 80031f2:	3301      	adds	r3, #1
 80031f4:	f243 0236 	movw	r2, #12342	@ 0x3036
 80031f8:	443a      	add	r2, r7
 80031fa:	8013      	strh	r3, [r2, #0]
 80031fc:	4b17      	ldr	r3, [pc, #92]	@ (800325c <calculate_mel_spectrogram+0x470>)
 80031fe:	891b      	ldrh	r3, [r3, #8]
 8003200:	f243 0236 	movw	r2, #12342	@ 0x3036
 8003204:	443a      	add	r2, r7
 8003206:	8812      	ldrh	r2, [r2, #0]
 8003208:	429a      	cmp	r2, r3
 800320a:	f4ff af54 	bcc.w	80030b6 <calculate_mel_spectrogram+0x2ca>
    for (uint16_t frame = 0; frame < n_frames; ++frame)
 800320e:	f243 033c 	movw	r3, #12348	@ 0x303c
 8003212:	443b      	add	r3, r7
 8003214:	881b      	ldrh	r3, [r3, #0]
 8003216:	3301      	adds	r3, #1
 8003218:	f243 023c 	movw	r2, #12348	@ 0x303c
 800321c:	443a      	add	r2, r7
 800321e:	8013      	strh	r3, [r2, #0]
 8003220:	f243 033c 	movw	r3, #12348	@ 0x303c
 8003224:	443b      	add	r3, r7
 8003226:	881a      	ldrh	r2, [r3, #0]
 8003228:	f243 033e 	movw	r3, #12350	@ 0x303e
 800322c:	443b      	add	r3, r7
 800322e:	881b      	ldrh	r3, [r3, #0]
 8003230:	429a      	cmp	r2, r3
 8003232:	f4ff ae44 	bcc.w	8002ebe <calculate_mel_spectrogram+0xd2>
        }
    }

    return n_frames;
 8003236:	f243 033e 	movw	r3, #12350	@ 0x303e
 800323a:	443b      	add	r3, r7
 800323c:	881b      	ldrh	r3, [r3, #0]
}
 800323e:	4618      	mov	r0, r3
 8003240:	f507 5741 	add.w	r7, r7, #12352	@ 0x3040
 8003244:	3704      	adds	r7, #4
 8003246:	46bd      	mov	sp, r7
 8003248:	bd90      	pop	{r4, r7, pc}
 800324a:	bf00      	nop
 800324c:	70000000 	.word	0x70000000
 8003250:	358637bd 	.word	0x358637bd
 8003254:	c2a00000 	.word	0xc2a00000
 8003258:	c2a00000 	.word	0xc2a00000
 800325c:	24008930 	.word	0x24008930

08003260 <normalize_spectrogram>:

// Finds min and max in mel matrix and scales to [0, 1]
void normalize_spectrogram(float *spectrogram, uint16_t n_mels, uint16_t n_frames)
{
 8003260:	b580      	push	{r7, lr}
 8003262:	b088      	sub	sp, #32
 8003264:	af00      	add	r7, sp, #0
 8003266:	6078      	str	r0, [r7, #4]
 8003268:	460b      	mov	r3, r1
 800326a:	807b      	strh	r3, [r7, #2]
 800326c:	4613      	mov	r3, r2
 800326e:	803b      	strh	r3, [r7, #0]
    float min = spectrogram[0], max = spectrogram[0];
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	681b      	ldr	r3, [r3, #0]
 8003274:	61fb      	str	r3, [r7, #28]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	61bb      	str	r3, [r7, #24]

    for (uint32_t i = 0; i < n_mels * n_frames; ++i)
 800327c:	2300      	movs	r3, #0
 800327e:	617b      	str	r3, [r7, #20]
 8003280:	e028      	b.n	80032d4 <normalize_spectrogram+0x74>
    {
        if (spectrogram[i] < min)
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	009b      	lsls	r3, r3, #2
 8003286:	687a      	ldr	r2, [r7, #4]
 8003288:	4413      	add	r3, r2
 800328a:	edd3 7a00 	vldr	s15, [r3]
 800328e:	ed97 7a07 	vldr	s14, [r7, #28]
 8003292:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329a:	dd05      	ble.n	80032a8 <normalize_spectrogram+0x48>
            min = spectrogram[i];
 800329c:	697b      	ldr	r3, [r7, #20]
 800329e:	009b      	lsls	r3, r3, #2
 80032a0:	687a      	ldr	r2, [r7, #4]
 80032a2:	4413      	add	r3, r2
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	61fb      	str	r3, [r7, #28]
        if (spectrogram[i] > max)
 80032a8:	697b      	ldr	r3, [r7, #20]
 80032aa:	009b      	lsls	r3, r3, #2
 80032ac:	687a      	ldr	r2, [r7, #4]
 80032ae:	4413      	add	r3, r2
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	ed97 7a06 	vldr	s14, [r7, #24]
 80032b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032c0:	d505      	bpl.n	80032ce <normalize_spectrogram+0x6e>
            max = spectrogram[i];
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	009b      	lsls	r3, r3, #2
 80032c6:	687a      	ldr	r2, [r7, #4]
 80032c8:	4413      	add	r3, r2
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61bb      	str	r3, [r7, #24]
    for (uint32_t i = 0; i < n_mels * n_frames; ++i)
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	3301      	adds	r3, #1
 80032d2:	617b      	str	r3, [r7, #20]
 80032d4:	887b      	ldrh	r3, [r7, #2]
 80032d6:	883a      	ldrh	r2, [r7, #0]
 80032d8:	fb02 f303 	mul.w	r3, r2, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	4293      	cmp	r3, r2
 80032e2:	d3ce      	bcc.n	8003282 <normalize_spectrogram+0x22>
    }

    float range = max - min;
 80032e4:	ed97 7a06 	vldr	s14, [r7, #24]
 80032e8:	edd7 7a07 	vldr	s15, [r7, #28]
 80032ec:	ee77 7a67 	vsub.f32	s15, s14, s15
 80032f0:	edc7 7a03 	vstr	s15, [r7, #12]
    if (range == 0.0f)
 80032f4:	edd7 7a03 	vldr	s15, [r7, #12]
 80032f8:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003300:	d10a      	bne.n	8003318 <normalize_spectrogram+0xb8>
    {
        memset(spectrogram, 0, n_mels * n_frames * sizeof(float));
 8003302:	887b      	ldrh	r3, [r7, #2]
 8003304:	883a      	ldrh	r2, [r7, #0]
 8003306:	fb02 f303 	mul.w	r3, r2, r3
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	461a      	mov	r2, r3
 800330e:	2100      	movs	r1, #0
 8003310:	6878      	ldr	r0, [r7, #4]
 8003312:	f00f ff95 	bl	8013240 <memset>
        return;
 8003316:	e021      	b.n	800335c <normalize_spectrogram+0xfc>
    }

    for (uint32_t i = 0; i < n_mels * n_frames; ++i)
 8003318:	2300      	movs	r3, #0
 800331a:	613b      	str	r3, [r7, #16]
 800331c:	e016      	b.n	800334c <normalize_spectrogram+0xec>
    {
        spectrogram[i] = (spectrogram[i] - min) / range;
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	009b      	lsls	r3, r3, #2
 8003322:	687a      	ldr	r2, [r7, #4]
 8003324:	4413      	add	r3, r2
 8003326:	ed93 7a00 	vldr	s14, [r3]
 800332a:	edd7 7a07 	vldr	s15, [r7, #28]
 800332e:	ee77 6a67 	vsub.f32	s13, s14, s15
 8003332:	693b      	ldr	r3, [r7, #16]
 8003334:	009b      	lsls	r3, r3, #2
 8003336:	687a      	ldr	r2, [r7, #4]
 8003338:	4413      	add	r3, r2
 800333a:	ed97 7a03 	vldr	s14, [r7, #12]
 800333e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003342:	edc3 7a00 	vstr	s15, [r3]
    for (uint32_t i = 0; i < n_mels * n_frames; ++i)
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	3301      	adds	r3, #1
 800334a:	613b      	str	r3, [r7, #16]
 800334c:	887b      	ldrh	r3, [r7, #2]
 800334e:	883a      	ldrh	r2, [r7, #0]
 8003350:	fb02 f303 	mul.w	r3, r2, r3
 8003354:	461a      	mov	r2, r3
 8003356:	693b      	ldr	r3, [r7, #16]
 8003358:	4293      	cmp	r3, r2
 800335a:	d3e0      	bcc.n	800331e <normalize_spectrogram+0xbe>
    }
}
 800335c:	3720      	adds	r7, #32
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
	...

08003364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003364:	b480      	push	{r7}
 8003366:	b083      	sub	sp, #12
 8003368:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336a:	4b0a      	ldr	r3, [pc, #40]	@ (8003394 <HAL_MspInit+0x30>)
 800336c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003370:	4a08      	ldr	r2, [pc, #32]	@ (8003394 <HAL_MspInit+0x30>)
 8003372:	f043 0302 	orr.w	r3, r3, #2
 8003376:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800337a:	4b06      	ldr	r3, [pc, #24]	@ (8003394 <HAL_MspInit+0x30>)
 800337c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8003380:	f003 0302 	and.w	r3, r3, #2
 8003384:	607b      	str	r3, [r7, #4]
 8003386:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003388:	bf00      	nop
 800338a:	370c      	adds	r7, #12
 800338c:	46bd      	mov	sp, r7
 800338e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003392:	4770      	bx	lr
 8003394:	58024400 	.word	0x58024400

08003398 <HAL_SAI_MspInit>:
extern DMA_HandleTypeDef hdma_sai4_a;

static uint32_t SAI4_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 8003398:	b580      	push	{r7, lr}
 800339a:	b08c      	sub	sp, #48	@ 0x30
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
  HAL_DMA_MuxSyncConfigTypeDef pSyncConfig;
/* SAI4 */
    if(hsai->Instance==SAI4_Block_A)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4a49      	ldr	r2, [pc, #292]	@ (80034cc <HAL_SAI_MspInit+0x134>)
 80033a6:	4293      	cmp	r3, r2
 80033a8:	f040 808b 	bne.w	80034c2 <HAL_SAI_MspInit+0x12a>
    {
    /* Peripheral clock enable */
    if (SAI4_client == 0)
 80033ac:	4b48      	ldr	r3, [pc, #288]	@ (80034d0 <HAL_SAI_MspInit+0x138>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d116      	bne.n	80033e2 <HAL_SAI_MspInit+0x4a>
    {
       __HAL_RCC_SAI4_CLK_ENABLE();
 80033b4:	4b47      	ldr	r3, [pc, #284]	@ (80034d4 <HAL_SAI_MspInit+0x13c>)
 80033b6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033ba:	4a46      	ldr	r2, [pc, #280]	@ (80034d4 <HAL_SAI_MspInit+0x13c>)
 80033bc:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80033c0:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80033c4:	4b43      	ldr	r3, [pc, #268]	@ (80034d4 <HAL_SAI_MspInit+0x13c>)
 80033c6:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80033ca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80033ce:	60bb      	str	r3, [r7, #8]
 80033d0:	68bb      	ldr	r3, [r7, #8]

    /* Peripheral interrupt init*/
    HAL_NVIC_SetPriority(SAI4_IRQn, 0, 0);
 80033d2:	2200      	movs	r2, #0
 80033d4:	2100      	movs	r1, #0
 80033d6:	2092      	movs	r0, #146	@ 0x92
 80033d8:	f004 fec5 	bl	8008166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SAI4_IRQn);
 80033dc:	2092      	movs	r0, #146	@ 0x92
 80033de:	f004 fedc 	bl	800819a <HAL_NVIC_EnableIRQ>
    }
    SAI4_client ++;
 80033e2:	4b3b      	ldr	r3, [pc, #236]	@ (80034d0 <HAL_SAI_MspInit+0x138>)
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	3301      	adds	r3, #1
 80033e8:	4a39      	ldr	r2, [pc, #228]	@ (80034d0 <HAL_SAI_MspInit+0x138>)
 80033ea:	6013      	str	r3, [r2, #0]

    /**SAI4_A_Block_A GPIO Configuration
    PE2     ------> SAI4_CK1
    PC1     ------> SAI4_D1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80033ec:	2304      	movs	r3, #4
 80033ee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80033f0:	2302      	movs	r3, #2
 80033f2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80033f4:	2300      	movs	r3, #0
 80033f6:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80033f8:	2300      	movs	r3, #0
 80033fa:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 80033fc:	230a      	movs	r3, #10
 80033fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003400:	f107 031c 	add.w	r3, r7, #28
 8003404:	4619      	mov	r1, r3
 8003406:	4834      	ldr	r0, [pc, #208]	@ (80034d8 <HAL_SAI_MspInit+0x140>)
 8003408:	f007 faba 	bl	800a980 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800340c:	2302      	movs	r3, #2
 800340e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003410:	2302      	movs	r3, #2
 8003412:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003414:	2300      	movs	r3, #0
 8003416:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003418:	2300      	movs	r3, #0
 800341a:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF10_SAI4;
 800341c:	230a      	movs	r3, #10
 800341e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003420:	f107 031c 	add.w	r3, r7, #28
 8003424:	4619      	mov	r1, r3
 8003426:	482d      	ldr	r0, [pc, #180]	@ (80034dc <HAL_SAI_MspInit+0x144>)
 8003428:	f007 faaa 	bl	800a980 <HAL_GPIO_Init>

      /* Peripheral DMA init*/

    hdma_sai4_a.Instance = BDMA_Channel0;
 800342c:	4b2c      	ldr	r3, [pc, #176]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 800342e:	4a2d      	ldr	r2, [pc, #180]	@ (80034e4 <HAL_SAI_MspInit+0x14c>)
 8003430:	601a      	str	r2, [r3, #0]
    hdma_sai4_a.Init.Request = BDMA_REQUEST_SAI4_A;
 8003432:	4b2b      	ldr	r3, [pc, #172]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 8003434:	220f      	movs	r2, #15
 8003436:	605a      	str	r2, [r3, #4]
    hdma_sai4_a.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003438:	4b29      	ldr	r3, [pc, #164]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 800343a:	2200      	movs	r2, #0
 800343c:	609a      	str	r2, [r3, #8]
    hdma_sai4_a.Init.PeriphInc = DMA_PINC_DISABLE;
 800343e:	4b28      	ldr	r3, [pc, #160]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 8003440:	2200      	movs	r2, #0
 8003442:	60da      	str	r2, [r3, #12]
    hdma_sai4_a.Init.MemInc = DMA_MINC_ENABLE;
 8003444:	4b26      	ldr	r3, [pc, #152]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 8003446:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800344a:	611a      	str	r2, [r3, #16]
    hdma_sai4_a.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800344c:	4b24      	ldr	r3, [pc, #144]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 800344e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8003452:	615a      	str	r2, [r3, #20]
    hdma_sai4_a.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8003454:	4b22      	ldr	r3, [pc, #136]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 8003456:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800345a:	619a      	str	r2, [r3, #24]
    hdma_sai4_a.Init.Mode = DMA_CIRCULAR;
 800345c:	4b20      	ldr	r3, [pc, #128]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 800345e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003462:	61da      	str	r2, [r3, #28]
    hdma_sai4_a.Init.Priority = DMA_PRIORITY_HIGH;
 8003464:	4b1e      	ldr	r3, [pc, #120]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 8003466:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800346a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_sai4_a) != HAL_OK)
 800346c:	481c      	ldr	r0, [pc, #112]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 800346e:	f004 ff27 	bl	80082c0 <HAL_DMA_Init>
 8003472:	4603      	mov	r3, r0
 8003474:	2b00      	cmp	r3, #0
 8003476:	d001      	beq.n	800347c <HAL_SAI_MspInit+0xe4>
    {
      Error_Handler();
 8003478:	f7ff fa34 	bl	80028e4 <Error_Handler>
    }

    pSyncConfig.SyncSignalID = HAL_DMAMUX2_SYNC_EXTI0;
 800347c:	230e      	movs	r3, #14
 800347e:	60fb      	str	r3, [r7, #12]
    pSyncConfig.SyncPolarity = HAL_DMAMUX_SYNC_NO_EVENT;
 8003480:	2300      	movs	r3, #0
 8003482:	613b      	str	r3, [r7, #16]
    pSyncConfig.SyncEnable = DISABLE;
 8003484:	2300      	movs	r3, #0
 8003486:	753b      	strb	r3, [r7, #20]
    pSyncConfig.EventEnable = ENABLE;
 8003488:	2301      	movs	r3, #1
 800348a:	757b      	strb	r3, [r7, #21]
    pSyncConfig.RequestNumber = 1;
 800348c:	2301      	movs	r3, #1
 800348e:	61bb      	str	r3, [r7, #24]
    if (HAL_DMAEx_ConfigMuxSync(&hdma_sai4_a, &pSyncConfig) != HAL_OK)
 8003490:	f107 030c 	add.w	r3, r7, #12
 8003494:	4619      	mov	r1, r3
 8003496:	4812      	ldr	r0, [pc, #72]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 8003498:	f007 f9ac 	bl	800a7f4 <HAL_DMAEx_ConfigMuxSync>
 800349c:	4603      	mov	r3, r0
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d001      	beq.n	80034a6 <HAL_SAI_MspInit+0x10e>
    {
      Error_Handler();
 80034a2:	f7ff fa1f 	bl	80028e4 <Error_Handler>
    }

    /* Several peripheral DMA handle pointers point to the same DMA handle.
     Be aware that there is only one channel to perform all the requested DMAs. */
    __HAL_LINKDMA(hsai,hdmarx,hdma_sai4_a);
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	4a0d      	ldr	r2, [pc, #52]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 80034aa:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 80034ae:	4a0c      	ldr	r2, [pc, #48]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	6393      	str	r3, [r2, #56]	@ 0x38

    __HAL_LINKDMA(hsai,hdmatx,hdma_sai4_a);
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	4a0a      	ldr	r2, [pc, #40]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 80034b8:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 80034bc:	4a08      	ldr	r2, [pc, #32]	@ (80034e0 <HAL_SAI_MspInit+0x148>)
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	6393      	str	r3, [r2, #56]	@ 0x38

    }
}
 80034c2:	bf00      	nop
 80034c4:	3730      	adds	r7, #48	@ 0x30
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd80      	pop	{r7, pc}
 80034ca:	bf00      	nop
 80034cc:	58005404 	.word	0x58005404
 80034d0:	2400a95c 	.word	0x2400a95c
 80034d4:	58024400 	.word	0x58024400
 80034d8:	58021000 	.word	0x58021000
 80034dc:	58020800 	.word	0x58020800
 80034e0:	240088b8 	.word	0x240088b8
 80034e4:	58025408 	.word	0x58025408

080034e8 <NMI_Handler>:
/******************************************************************************/
/**
 * @brief This function handles Non maskable interrupt.
 */
void NMI_Handler(void)
{
 80034e8:	b480      	push	{r7}
 80034ea:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

    /* USER CODE END NonMaskableInt_IRQn 0 */
    /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
    while (1)
 80034ec:	bf00      	nop
 80034ee:	e7fd      	b.n	80034ec <NMI_Handler+0x4>

080034f0 <HardFault_Handler>:

/**
 * @brief This function handles Hard fault interrupt.
 */
void HardFault_Handler(void)
{
 80034f0:	b480      	push	{r7}
 80034f2:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN HardFault_IRQn 0 */

    /* USER CODE END HardFault_IRQn 0 */
    while (1)
 80034f4:	bf00      	nop
 80034f6:	e7fd      	b.n	80034f4 <HardFault_Handler+0x4>

080034f8 <MemManage_Handler>:

/**
 * @brief This function handles Memory management fault.
 */
void MemManage_Handler(void)
{
 80034f8:	b480      	push	{r7}
 80034fa:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN MemoryManagement_IRQn 0 */

    /* USER CODE END MemoryManagement_IRQn 0 */
    while (1)
 80034fc:	bf00      	nop
 80034fe:	e7fd      	b.n	80034fc <MemManage_Handler+0x4>

08003500 <BusFault_Handler>:

/**
 * @brief This function handles Pre-fetch fault, memory access fault.
 */
void BusFault_Handler(void)
{
 8003500:	b480      	push	{r7}
 8003502:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN BusFault_IRQn 0 */

    /* USER CODE END BusFault_IRQn 0 */
    while (1)
 8003504:	bf00      	nop
 8003506:	e7fd      	b.n	8003504 <BusFault_Handler+0x4>

08003508 <UsageFault_Handler>:

/**
 * @brief This function handles Undefined instruction or illegal state.
 */
void UsageFault_Handler(void)
{
 8003508:	b480      	push	{r7}
 800350a:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN UsageFault_IRQn 0 */

    /* USER CODE END UsageFault_IRQn 0 */
    while (1)
 800350c:	bf00      	nop
 800350e:	e7fd      	b.n	800350c <UsageFault_Handler+0x4>

08003510 <SVC_Handler>:

/**
 * @brief This function handles System service call via SWI instruction.
 */
void SVC_Handler(void)
{
 8003510:	b480      	push	{r7}
 8003512:	af00      	add	r7, sp, #0

    /* USER CODE END SVCall_IRQn 0 */
    /* USER CODE BEGIN SVCall_IRQn 1 */

    /* USER CODE END SVCall_IRQn 1 */
}
 8003514:	bf00      	nop
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr

0800351e <DebugMon_Handler>:

/**
 * @brief This function handles Debug monitor.
 */
void DebugMon_Handler(void)
{
 800351e:	b480      	push	{r7}
 8003520:	af00      	add	r7, sp, #0

    /* USER CODE END DebugMonitor_IRQn 0 */
    /* USER CODE BEGIN DebugMonitor_IRQn 1 */

    /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003522:	bf00      	nop
 8003524:	46bd      	mov	sp, r7
 8003526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800352a:	4770      	bx	lr

0800352c <PendSV_Handler>:

/**
 * @brief This function handles Pendable request for system service.
 */
void PendSV_Handler(void)
{
 800352c:	b480      	push	{r7}
 800352e:	af00      	add	r7, sp, #0

    /* USER CODE END PendSV_IRQn 0 */
    /* USER CODE BEGIN PendSV_IRQn 1 */

    /* USER CODE END PendSV_IRQn 1 */
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr

0800353a <SysTick_Handler>:

/**
 * @brief This function handles System tick timer.
 */
void SysTick_Handler(void) { HAL_IncTick(); }
 800353a:	b580      	push	{r7, lr}
 800353c:	af00      	add	r7, sp, #0
 800353e:	f004 fcd7 	bl	8007ef0 <HAL_IncTick>
 8003542:	bf00      	nop
 8003544:	bd80      	pop	{r7, pc}

08003546 <BDMA_Channel1_IRQHandler>:
 * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
 * @param  None
 * @retval None
 */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 8003546:	b580      	push	{r7, lr}
 8003548:	af00      	add	r7, sp, #0
    BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 800354a:	2110      	movs	r1, #16
 800354c:	2001      	movs	r0, #1
 800354e:	f000 ff8f 	bl	8004470 <BSP_AUDIO_IN_IRQHandler>
}
 8003552:	bf00      	nop
 8003554:	bd80      	pop	{r7, pc}

08003556 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003556:	b480      	push	{r7}
 8003558:	af00      	add	r7, sp, #0
  return 1;
 800355a:	2301      	movs	r3, #1
}
 800355c:	4618      	mov	r0, r3
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <_kill>:

int _kill(int pid, int sig)
{
 8003566:	b580      	push	{r7, lr}
 8003568:	b082      	sub	sp, #8
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003570:	f00f fe6e 	bl	8013250 <__errno>
 8003574:	4603      	mov	r3, r0
 8003576:	2216      	movs	r2, #22
 8003578:	601a      	str	r2, [r3, #0]
  return -1;
 800357a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800357e:	4618      	mov	r0, r3
 8003580:	3708      	adds	r7, #8
 8003582:	46bd      	mov	sp, r7
 8003584:	bd80      	pop	{r7, pc}

08003586 <_exit>:

void _exit (int status)
{
 8003586:	b580      	push	{r7, lr}
 8003588:	b082      	sub	sp, #8
 800358a:	af00      	add	r7, sp, #0
 800358c:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800358e:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003592:	6878      	ldr	r0, [r7, #4]
 8003594:	f7ff ffe7 	bl	8003566 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003598:	bf00      	nop
 800359a:	e7fd      	b.n	8003598 <_exit+0x12>

0800359c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800359c:	b580      	push	{r7, lr}
 800359e:	b086      	sub	sp, #24
 80035a0:	af00      	add	r7, sp, #0
 80035a2:	60f8      	str	r0, [r7, #12]
 80035a4:	60b9      	str	r1, [r7, #8]
 80035a6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035a8:	2300      	movs	r3, #0
 80035aa:	617b      	str	r3, [r7, #20]
 80035ac:	e00a      	b.n	80035c4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80035ae:	f3af 8000 	nop.w
 80035b2:	4601      	mov	r1, r0
 80035b4:	68bb      	ldr	r3, [r7, #8]
 80035b6:	1c5a      	adds	r2, r3, #1
 80035b8:	60ba      	str	r2, [r7, #8]
 80035ba:	b2ca      	uxtb	r2, r1
 80035bc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80035be:	697b      	ldr	r3, [r7, #20]
 80035c0:	3301      	adds	r3, #1
 80035c2:	617b      	str	r3, [r7, #20]
 80035c4:	697a      	ldr	r2, [r7, #20]
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	429a      	cmp	r2, r3
 80035ca:	dbf0      	blt.n	80035ae <_read+0x12>
  }

  return len;
 80035cc:	687b      	ldr	r3, [r7, #4]
}
 80035ce:	4618      	mov	r0, r3
 80035d0:	3718      	adds	r7, #24
 80035d2:	46bd      	mov	sp, r7
 80035d4:	bd80      	pop	{r7, pc}

080035d6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80035d6:	b480      	push	{r7}
 80035d8:	b083      	sub	sp, #12
 80035da:	af00      	add	r7, sp, #0
 80035dc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80035de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	370c      	adds	r7, #12
 80035e6:	46bd      	mov	sp, r7
 80035e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ec:	4770      	bx	lr

080035ee <_fstat>:


int _fstat(int file, struct stat *st)
{
 80035ee:	b480      	push	{r7}
 80035f0:	b083      	sub	sp, #12
 80035f2:	af00      	add	r7, sp, #0
 80035f4:	6078      	str	r0, [r7, #4]
 80035f6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80035f8:	683b      	ldr	r3, [r7, #0]
 80035fa:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80035fe:	605a      	str	r2, [r3, #4]
  return 0;
 8003600:	2300      	movs	r3, #0
}
 8003602:	4618      	mov	r0, r3
 8003604:	370c      	adds	r7, #12
 8003606:	46bd      	mov	sp, r7
 8003608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360c:	4770      	bx	lr

0800360e <_isatty>:

int _isatty(int file)
{
 800360e:	b480      	push	{r7}
 8003610:	b083      	sub	sp, #12
 8003612:	af00      	add	r7, sp, #0
 8003614:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003616:	2301      	movs	r3, #1
}
 8003618:	4618      	mov	r0, r3
 800361a:	370c      	adds	r7, #12
 800361c:	46bd      	mov	sp, r7
 800361e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003622:	4770      	bx	lr

08003624 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	60f8      	str	r0, [r7, #12]
 800362c:	60b9      	str	r1, [r7, #8]
 800362e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003630:	2300      	movs	r3, #0
}
 8003632:	4618      	mov	r0, r3
 8003634:	3714      	adds	r7, #20
 8003636:	46bd      	mov	sp, r7
 8003638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800363c:	4770      	bx	lr
	...

08003640 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003640:	b580      	push	{r7, lr}
 8003642:	b086      	sub	sp, #24
 8003644:	af00      	add	r7, sp, #0
 8003646:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003648:	4a14      	ldr	r2, [pc, #80]	@ (800369c <_sbrk+0x5c>)
 800364a:	4b15      	ldr	r3, [pc, #84]	@ (80036a0 <_sbrk+0x60>)
 800364c:	1ad3      	subs	r3, r2, r3
 800364e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003650:	697b      	ldr	r3, [r7, #20]
 8003652:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003654:	4b13      	ldr	r3, [pc, #76]	@ (80036a4 <_sbrk+0x64>)
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	2b00      	cmp	r3, #0
 800365a:	d102      	bne.n	8003662 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800365c:	4b11      	ldr	r3, [pc, #68]	@ (80036a4 <_sbrk+0x64>)
 800365e:	4a12      	ldr	r2, [pc, #72]	@ (80036a8 <_sbrk+0x68>)
 8003660:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003662:	4b10      	ldr	r3, [pc, #64]	@ (80036a4 <_sbrk+0x64>)
 8003664:	681a      	ldr	r2, [r3, #0]
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	4413      	add	r3, r2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	429a      	cmp	r2, r3
 800366e:	d207      	bcs.n	8003680 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003670:	f00f fdee 	bl	8013250 <__errno>
 8003674:	4603      	mov	r3, r0
 8003676:	220c      	movs	r2, #12
 8003678:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800367a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800367e:	e009      	b.n	8003694 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003680:	4b08      	ldr	r3, [pc, #32]	@ (80036a4 <_sbrk+0x64>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003686:	4b07      	ldr	r3, [pc, #28]	@ (80036a4 <_sbrk+0x64>)
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4413      	add	r3, r2
 800368e:	4a05      	ldr	r2, [pc, #20]	@ (80036a4 <_sbrk+0x64>)
 8003690:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003692:	68fb      	ldr	r3, [r7, #12]
}
 8003694:	4618      	mov	r0, r3
 8003696:	3718      	adds	r7, #24
 8003698:	46bd      	mov	sp, r7
 800369a:	bd80      	pop	{r7, pc}
 800369c:	24080000 	.word	0x24080000
 80036a0:	00000400 	.word	0x00000400
 80036a4:	2400a960 	.word	0x2400a960
 80036a8:	2400b8b0 	.word	0x2400b8b0

080036ac <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 80036ac:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80036e4 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 80036b0:	f00c feac 	bl	801040c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80036b4:	480c      	ldr	r0, [pc, #48]	@ (80036e8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80036b6:	490d      	ldr	r1, [pc, #52]	@ (80036ec <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80036b8:	4a0d      	ldr	r2, [pc, #52]	@ (80036f0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80036ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80036bc:	e002      	b.n	80036c4 <LoopCopyDataInit>

080036be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80036be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80036c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80036c2:	3304      	adds	r3, #4

080036c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80036c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80036c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80036c8:	d3f9      	bcc.n	80036be <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80036ca:	4a0a      	ldr	r2, [pc, #40]	@ (80036f4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80036cc:	4c0a      	ldr	r4, [pc, #40]	@ (80036f8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80036ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80036d0:	e001      	b.n	80036d6 <LoopFillZerobss>

080036d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80036d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80036d4:	3204      	adds	r2, #4

080036d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80036d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80036d8:	d3fb      	bcc.n	80036d2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80036da:	f00f fdbf 	bl	801325c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80036de:	f7fe ff75 	bl	80025cc <main>
  bx  lr
 80036e2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80036e4:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 80036e8:	24000000 	.word	0x24000000
  ldr r1, =_edata
 80036ec:	2400064c 	.word	0x2400064c
  ldr r2, =_sidata
 80036f0:	08029034 	.word	0x08029034
  ldr r2, =_sbss
 80036f4:	24000860 	.word	0x24000860
  ldr r4, =_ebss
 80036f8:	2400b8ac 	.word	0x2400b8ac

080036fc <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80036fc:	e7fe      	b.n	80036fc <ADC3_IRQHandler>
	...

08003700 <BSP_AUDIO_OUT_Init>:
  * @param  Instance  : AUDIO_OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit : AUDIO_OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	b094      	sub	sp, #80	@ 0x50
 8003704:	af00      	add	r7, sp, #0
 8003706:	6078      	str	r0, [r7, #4]
 8003708:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800370a:	2300      	movs	r3, #0
 800370c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	2b01      	cmp	r3, #1
 8003712:	d903      	bls.n	800371c <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003714:	f06f 0301 	mvn.w	r3, #1
 8003718:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800371a:	e0da      	b.n	80038d2 <BSP_AUDIO_OUT_Init+0x1d2>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	6819      	ldr	r1, [r3, #0]
 8003720:	486e      	ldr	r0, [pc, #440]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 8003722:	687a      	ldr	r2, [r7, #4]
 8003724:	4613      	mov	r3, r2
 8003726:	00db      	lsls	r3, r3, #3
 8003728:	4413      	add	r3, r2
 800372a:	009b      	lsls	r3, r3, #2
 800372c:	4403      	add	r3, r0
 800372e:	3304      	adds	r3, #4
 8003730:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 8003732:	496a      	ldr	r1, [pc, #424]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 8003734:	687a      	ldr	r2, [r7, #4]
 8003736:	4613      	mov	r3, r2
 8003738:	00db      	lsls	r3, r3, #3
 800373a:	4413      	add	r3, r2
 800373c:	009b      	lsls	r3, r3, #2
 800373e:	440b      	add	r3, r1
 8003740:	687a      	ldr	r2, [r7, #4]
 8003742:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	6859      	ldr	r1, [r3, #4]
 8003748:	4864      	ldr	r0, [pc, #400]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 800374a:	687a      	ldr	r2, [r7, #4]
 800374c:	4613      	mov	r3, r2
 800374e:	00db      	lsls	r3, r3, #3
 8003750:	4413      	add	r3, r2
 8003752:	009b      	lsls	r3, r3, #2
 8003754:	4403      	add	r3, r0
 8003756:	3308      	adds	r3, #8
 8003758:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	6899      	ldr	r1, [r3, #8]
 800375e:	485f      	ldr	r0, [pc, #380]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 8003760:	687a      	ldr	r2, [r7, #4]
 8003762:	4613      	mov	r3, r2
 8003764:	00db      	lsls	r3, r3, #3
 8003766:	4413      	add	r3, r2
 8003768:	009b      	lsls	r3, r3, #2
 800376a:	4403      	add	r3, r0
 800376c:	330c      	adds	r3, #12
 800376e:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	68d9      	ldr	r1, [r3, #12]
 8003774:	4859      	ldr	r0, [pc, #356]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 8003776:	687a      	ldr	r2, [r7, #4]
 8003778:	4613      	mov	r3, r2
 800377a:	00db      	lsls	r3, r3, #3
 800377c:	4413      	add	r3, r2
 800377e:	009b      	lsls	r3, r3, #2
 8003780:	4403      	add	r3, r0
 8003782:	3314      	adds	r3, #20
 8003784:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	6919      	ldr	r1, [r3, #16]
 800378a:	4854      	ldr	r0, [pc, #336]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 800378c:	687a      	ldr	r2, [r7, #4]
 800378e:	4613      	mov	r3, r2
 8003790:	00db      	lsls	r3, r3, #3
 8003792:	4413      	add	r3, r2
 8003794:	009b      	lsls	r3, r3, #2
 8003796:	4403      	add	r3, r0
 8003798:	3310      	adds	r3, #16
 800379a:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 800379c:	494f      	ldr	r1, [pc, #316]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 800379e:	687a      	ldr	r2, [r7, #4]
 80037a0:	4613      	mov	r3, r2
 80037a2:	00db      	lsls	r3, r3, #3
 80037a4:	4413      	add	r3, r2
 80037a6:	009b      	lsls	r3, r3, #2
 80037a8:	440b      	add	r3, r1
 80037aa:	331c      	adds	r3, #28
 80037ac:	2200      	movs	r2, #0
 80037ae:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if(WM8994_Probe() != BSP_ERROR_NONE)
 80037b0:	f000 fea2 	bl	80044f8 <WM8994_Probe>
 80037b4:	4603      	mov	r3, r0
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d002      	beq.n	80037c0 <BSP_AUDIO_OUT_Init+0xc0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 80037ba:	f06f 0304 	mvn.w	r3, #4
 80037be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
#endif

    if(ret == BSP_ERROR_NONE)
 80037c0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	f040 8085 	bne.w	80038d2 <BSP_AUDIO_OUT_Init+0x1d2>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	685b      	ldr	r3, [r3, #4]
 80037cc:	4619      	mov	r1, r3
 80037ce:	4844      	ldr	r0, [pc, #272]	@ (80038e0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80037d0:	f000 f919 	bl	8003a06 <MX_SAI1_ClockConfig>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d003      	beq.n	80037e2 <BSP_AUDIO_OUT_Init+0xe2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 80037da:	f06f 0308 	mvn.w	r3, #8
 80037de:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80037e0:	e077      	b.n	80038d2 <BSP_AUDIO_OUT_Init+0x1d2>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 80037e2:	4b3f      	ldr	r3, [pc, #252]	@ (80038e0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80037e4:	4a3f      	ldr	r2, [pc, #252]	@ (80038e4 <BSP_AUDIO_OUT_Init+0x1e4>)
 80037e6:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_out_sai);
 80037e8:	483d      	ldr	r0, [pc, #244]	@ (80038e0 <BSP_AUDIO_OUT_Init+0x1e0>)
 80037ea:	f000 fedf 	bl	80045ac <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
        if(ret == BSP_ERROR_NONE)
 80037ee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d16e      	bne.n	80038d2 <BSP_AUDIO_OUT_Init+0x1d2>
	{
          MX_SAI_Config_t mx_sai_config;

          /* Prepare haudio_out_sai handle */
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 80037f4:	683b      	ldr	r3, [r7, #0]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	60fb      	str	r3, [r7, #12]
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 80037fa:	2300      	movs	r3, #0
 80037fc:	613b      	str	r3, [r7, #16]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 80037fe:	2301      	movs	r3, #1
 8003800:	61fb      	str	r3, [r7, #28]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	68db      	ldr	r3, [r3, #12]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d102      	bne.n	8003810 <BSP_AUDIO_OUT_Init+0x110>
 800380a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800380e:	e000      	b.n	8003812 <BSP_AUDIO_OUT_Init+0x112>
 8003810:	2300      	movs	r3, #0
 8003812:	61bb      	str	r3, [r7, #24]
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b20      	cmp	r3, #32
 800381a:	d101      	bne.n	8003820 <BSP_AUDIO_OUT_Init+0x120>
 800381c:	23e0      	movs	r3, #224	@ 0xe0
 800381e:	e000      	b.n	8003822 <BSP_AUDIO_OUT_Init+0x122>
 8003820:	2380      	movs	r3, #128	@ 0x80
 8003822:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 8003824:	2380      	movs	r3, #128	@ 0x80
 8003826:	62fb      	str	r3, [r7, #44]	@ 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 8003828:	2340      	movs	r3, #64	@ 0x40
 800382a:	633b      	str	r3, [r7, #48]	@ 0x30
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800382c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003830:	627b      	str	r3, [r7, #36]	@ 0x24
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 8003832:	2300      	movs	r3, #0
 8003834:	623b      	str	r3, [r7, #32]
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8003836:	2300      	movs	r3, #0
 8003838:	62bb      	str	r3, [r7, #40]	@ 0x28
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 800383a:	2305      	movs	r3, #5
 800383c:	637b      	str	r3, [r7, #52]	@ 0x34

          /* SAI peripheral initialization: this __weak function can be redefined by the application  */
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800383e:	f107 030c 	add.w	r3, r7, #12
 8003842:	4619      	mov	r1, r3
 8003844:	4826      	ldr	r0, [pc, #152]	@ (80038e0 <BSP_AUDIO_OUT_Init+0x1e0>)
 8003846:	f000 f855 	bl	80038f4 <MX_SAI1_Block_A_Init>
 800384a:	4603      	mov	r3, r0
 800384c:	2b00      	cmp	r3, #0
 800384e:	d003      	beq.n	8003858 <BSP_AUDIO_OUT_Init+0x158>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 8003850:	f06f 0303 	mvn.w	r3, #3
 8003854:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003856:	e03c      	b.n	80038d2 <BSP_AUDIO_OUT_Init+0x1d2>
#endif
          else
          {
#if (USE_AUDIO_CODEC_WM8994 == 1)
            WM8994_Init_t codec_init;
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	2b20      	cmp	r3, #32
 800385e:	d101      	bne.n	8003864 <BSP_AUDIO_OUT_Init+0x164>
 8003860:	2303      	movs	r3, #3
 8003862:	e000      	b.n	8003866 <BSP_AUDIO_OUT_Init+0x166>
 8003864:	2300      	movs	r3, #0
 8003866:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Fill codec_init structure */
            codec_init.Frequency    = AudioInit->SampleRate;
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	685b      	ldr	r3, [r3, #4]
 800386c:	643b      	str	r3, [r7, #64]	@ 0x40
            codec_init.InputDevice  = WM8994_IN_NONE;
 800386e:	2300      	movs	r3, #0
 8003870:	63bb      	str	r3, [r7, #56]	@ 0x38
            codec_init.OutputDevice = AudioInit->Device;
 8003872:	683b      	ldr	r3, [r7, #0]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 8003878:	683b      	ldr	r3, [r7, #0]
 800387a:	691b      	ldr	r3, [r3, #16]
 800387c:	2b64      	cmp	r3, #100	@ 0x64
 800387e:	d80a      	bhi.n	8003896 <BSP_AUDIO_OUT_Init+0x196>
 8003880:	683b      	ldr	r3, [r7, #0]
 8003882:	691a      	ldr	r2, [r3, #16]
 8003884:	4613      	mov	r3, r2
 8003886:	019b      	lsls	r3, r3, #6
 8003888:	1a9b      	subs	r3, r3, r2
 800388a:	4a17      	ldr	r2, [pc, #92]	@ (80038e8 <BSP_AUDIO_OUT_Init+0x1e8>)
 800388c:	fba2 2303 	umull	r2, r3, r2, r3
 8003890:	095b      	lsrs	r3, r3, #5
 8003892:	b2db      	uxtb	r3, r3
 8003894:	e000      	b.n	8003898 <BSP_AUDIO_OUT_Init+0x198>
 8003896:	233f      	movs	r3, #63	@ 0x3f
 8003898:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800389a:	4b14      	ldr	r3, [pc, #80]	@ (80038ec <BSP_AUDIO_OUT_Init+0x1ec>)
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a13      	ldr	r2, [pc, #76]	@ (80038f0 <BSP_AUDIO_OUT_Init+0x1f0>)
 80038a2:	6812      	ldr	r2, [r2, #0]
 80038a4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80038a8:	4610      	mov	r0, r2
 80038aa:	4798      	blx	r3
 80038ac:	4603      	mov	r3, r0
 80038ae:	2b00      	cmp	r3, #0
 80038b0:	d002      	beq.n	80038b8 <BSP_AUDIO_OUT_Init+0x1b8>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 80038b2:	f06f 0304 	mvn.w	r3, #4
 80038b6:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
#endif
            if(ret == BSP_ERROR_NONE)
 80038b8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d109      	bne.n	80038d2 <BSP_AUDIO_OUT_Init+0x1d2>
            {
              /* Update BSP AUDIO OUT state */
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 80038be:	4907      	ldr	r1, [pc, #28]	@ (80038dc <BSP_AUDIO_OUT_Init+0x1dc>)
 80038c0:	687a      	ldr	r2, [r7, #4]
 80038c2:	4613      	mov	r3, r2
 80038c4:	00db      	lsls	r3, r3, #3
 80038c6:	4413      	add	r3, r2
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	440b      	add	r3, r1
 80038cc:	331c      	adds	r3, #28
 80038ce:	2202      	movs	r2, #2
 80038d0:	601a      	str	r2, [r3, #0]
	}
      }
    }
  }

  return ret;
 80038d2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3750      	adds	r7, #80	@ 0x50
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}
 80038dc:	2400ab40 	.word	0x2400ab40
 80038e0:	2400aa10 	.word	0x2400aa10
 80038e4:	40015804 	.word	0x40015804
 80038e8:	51eb851f 	.word	0x51eb851f
 80038ec:	2400a964 	.word	0x2400a964
 80038f0:	2400aa0c 	.word	0x2400aa0c

080038f4 <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 80038f4:	b580      	push	{r7, lr}
 80038f6:	b084      	sub	sp, #16
 80038f8:	af00      	add	r7, sp, #0
 80038fa:	6078      	str	r0, [r7, #4]
 80038fc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 80038fe:	2300      	movs	r3, #0
 8003900:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	681a      	ldr	r2, [r3, #0]
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8003910:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_A */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 8003912:	683b      	ldr	r3, [r7, #0]
 8003914:	68da      	ldr	r2, [r3, #12]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681a      	ldr	r2, [r3, #0]
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685a      	ldr	r2, [r3, #4]
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2200      	movs	r2, #0
 800392e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2200      	movs	r2, #0
 8003934:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2200      	movs	r2, #0
 8003942:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	691a      	ldr	r2, [r3, #16]
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	695a      	ldr	r2, [r3, #20]
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	699a      	ldr	r2, [r3, #24]
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	69da      	ldr	r2, [r3, #28]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2200      	movs	r2, #0
 800396e:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	2200      	movs	r2, #0
 8003974:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv               = 0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2200      	movs	r2, #0
 8003980:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	2200      	movs	r2, #0
 8003986:	611a      	str	r2, [r3, #16]
  hsai->Init.PdmInit.Activation   = DISABLE;
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	2200      	movs	r2, #0
 800398c:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.ClockEnable  = 0;
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	2200      	movs	r2, #0
 8003994:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	2200      	movs	r2, #0
 800399a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	6a1a      	ldr	r2, [r3, #32]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80039a4:	683b      	ldr	r3, [r7, #0]
 80039a6:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80039b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	2200      	movs	r2, #0
 80039b8:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80039c0:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	2200      	movs	r2, #0
 80039c6:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2204      	movs	r2, #4
 80039d2:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 80039d4:	683b      	ldr	r3, [r7, #0]
 80039d6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80039d8:	687b      	ldr	r3, [r7, #4]
 80039da:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80039dc:	6878      	ldr	r0, [r7, #4]
 80039de:	f00c f803 	bl	800f9e8 <HAL_SAI_Init>
 80039e2:	4603      	mov	r3, r0
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d001      	beq.n	80039ec <MX_SAI1_Block_A_Init+0xf8>
  {
    ret = HAL_ERROR;
 80039e8:	2301      	movs	r3, #1
 80039ea:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_SAI_ENABLE(hsai);
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	681a      	ldr	r2, [r3, #0]
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80039fa:	601a      	str	r2, [r3, #0]

  return ret;
 80039fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80039fe:	4618      	mov	r0, r3
 8003a00:	3710      	adds	r7, #16
 8003a02:	46bd      	mov	sp, r7
 8003a04:	bd80      	pop	{r7, pc}

08003a06 <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8003a06:	b580      	push	{r7, lr}
 8003a08:	b0b6      	sub	sp, #216	@ 0xd8
 8003a0a:	af00      	add	r7, sp, #0
 8003a0c:	6078      	str	r0, [r7, #4]
 8003a0e:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8003a10:	2300      	movs	r3, #0
 8003a12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003a16:	f107 0308 	add.w	r3, r7, #8
 8003a1a:	4618      	mov	r0, r3
 8003a1c:	f00a fb4a 	bl	800e0b4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d009      	beq.n	8003a3e <MX_SAI1_ClockConfig+0x38>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003a30:	4293      	cmp	r3, r2
 8003a32:	d004      	beq.n	8003a3e <MX_SAI1_ClockConfig+0x38>
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d105      	bne.n	8003a4a <MX_SAI1_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8003a3e:	2326      	movs	r3, #38	@ 0x26
 8003a40:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8003a42:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003a46:	617b      	str	r3, [r7, #20]
 8003a48:	e004      	b.n	8003a54 <MX_SAI1_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8003a4a:	2307      	movs	r3, #7
 8003a4c:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8003a4e:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003a52:	617b      	str	r3, [r7, #20]
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 8003a54:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003a58:	f04f 0300 	mov.w	r3, #0
 8003a5c:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 8003a60:	2301      	movs	r3, #1
 8003a62:	667b      	str	r3, [r7, #100]	@ 0x64
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8003a64:	2301      	movs	r3, #1
 8003a66:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8003a68:	2301      	movs	r3, #1
 8003a6a:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8003a6c:	2319      	movs	r3, #25
 8003a6e:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8003a70:	f107 0308 	add.w	r3, r7, #8
 8003a74:	4618      	mov	r0, r3
 8003a76:	f009 f8d3 	bl	800cc20 <HAL_RCCEx_PeriphCLKConfig>
 8003a7a:	4603      	mov	r3, r0
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d002      	beq.n	8003a86 <MX_SAI1_ClockConfig+0x80>
  {
    ret = HAL_ERROR;
 8003a80:	2301      	movs	r3, #1
 8003a82:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 8003a86:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	37d8      	adds	r7, #216	@ 0xd8
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	bd80      	pop	{r7, pc}

08003a92 <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 8003a92:	b580      	push	{r7, lr}
 8003a94:	b0b6      	sub	sp, #216	@ 0xd8
 8003a96:	af00      	add	r7, sp, #0
 8003a98:	6078      	str	r0, [r7, #4]
 8003a9a:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 8003aa2:	f107 0308 	add.w	r3, r7, #8
 8003aa6:	4618      	mov	r0, r3
 8003aa8:	f00a fb04 	bl	800e0b4 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d009      	beq.n	8003aca <MX_SAI4_ClockConfig+0x38>
 8003ab6:	683b      	ldr	r3, [r7, #0]
 8003ab8:	f245 6222 	movw	r2, #22050	@ 0x5622
 8003abc:	4293      	cmp	r3, r2
 8003abe:	d004      	beq.n	8003aca <MX_SAI4_ClockConfig+0x38>
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d105      	bne.n	8003ad6 <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 8003aca:	2326      	movs	r3, #38	@ 0x26
 8003acc:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 8003ace:	f240 13ad 	movw	r3, #429	@ 0x1ad
 8003ad2:	617b      	str	r3, [r7, #20]
 8003ad4:	e004      	b.n	8003ae0 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 8003ad6:	2307      	movs	r3, #7
 8003ad8:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 8003ada:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 8003ade:	617b      	str	r3, [r7, #20]
  }
  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 8003ae0:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003ae4:	f04f 0300 	mov.w	r3, #0
 8003ae8:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 8003aec:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8003af0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 8003af4:	2301      	movs	r3, #1
 8003af6:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 8003af8:	2301      	movs	r3, #1
 8003afa:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 8003afc:	2319      	movs	r3, #25
 8003afe:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 8003b00:	f107 0308 	add.w	r3, r7, #8
 8003b04:	4618      	mov	r0, r3
 8003b06:	f009 f88b 	bl	800cc20 <HAL_RCCEx_PeriphCLKConfig>
 8003b0a:	4603      	mov	r3, r0
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d002      	beq.n	8003b16 <MX_SAI4_ClockConfig+0x84>
  {
    ret = HAL_ERROR;
 8003b10:	2301      	movs	r3, #1
 8003b12:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 8003b16:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003b1a:	4618      	mov	r0, r3
 8003b1c:	37d8      	adds	r7, #216	@ 0xd8
 8003b1e:	46bd      	mov	sp, r7
 8003b20:	bd80      	pop	{r7, pc}
	...

08003b24 <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 8003b24:	b580      	push	{r7, lr}
 8003b26:	b086      	sub	sp, #24
 8003b28:	af00      	add	r7, sp, #0
 8003b2a:	60f8      	str	r0, [r7, #12]
 8003b2c:	60b9      	str	r1, [r7, #8]
 8003b2e:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8003b30:	2300      	movs	r3, #0
 8003b32:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	2b01      	cmp	r3, #1
 8003b38:	d80f      	bhi.n	8003b5a <BSP_AUDIO_OUT_Play+0x36>
 8003b3a:	4933      	ldr	r1, [pc, #204]	@ (8003c08 <BSP_AUDIO_OUT_Play+0xe4>)
 8003b3c:	68fa      	ldr	r2, [r7, #12]
 8003b3e:	4613      	mov	r3, r2
 8003b40:	00db      	lsls	r3, r3, #3
 8003b42:	4413      	add	r3, r2
 8003b44:	009b      	lsls	r3, r3, #2
 8003b46:	440b      	add	r3, r1
 8003b48:	330c      	adds	r3, #12
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	08db      	lsrs	r3, r3, #3
 8003b4e:	687a      	ldr	r2, [r7, #4]
 8003b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8003b54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003b58:	d303      	bcc.n	8003b62 <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003b5a:	f06f 0301 	mvn.w	r3, #1
 8003b5e:	617b      	str	r3, [r7, #20]
 8003b60:	e04d      	b.n	8003bfe <BSP_AUDIO_OUT_Play+0xda>
  }
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 8003b62:	4929      	ldr	r1, [pc, #164]	@ (8003c08 <BSP_AUDIO_OUT_Play+0xe4>)
 8003b64:	68fa      	ldr	r2, [r7, #12]
 8003b66:	4613      	mov	r3, r2
 8003b68:	00db      	lsls	r3, r3, #3
 8003b6a:	4413      	add	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	440b      	add	r3, r1
 8003b70:	331c      	adds	r3, #28
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b02      	cmp	r3, #2
 8003b76:	d00a      	beq.n	8003b8e <BSP_AUDIO_OUT_Play+0x6a>
 8003b78:	4923      	ldr	r1, [pc, #140]	@ (8003c08 <BSP_AUDIO_OUT_Play+0xe4>)
 8003b7a:	68fa      	ldr	r2, [r7, #12]
 8003b7c:	4613      	mov	r3, r2
 8003b7e:	00db      	lsls	r3, r3, #3
 8003b80:	4413      	add	r3, r2
 8003b82:	009b      	lsls	r3, r3, #2
 8003b84:	440b      	add	r3, r1
 8003b86:	331c      	adds	r3, #28
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d134      	bne.n	8003bf8 <BSP_AUDIO_OUT_Play+0xd4>
  {
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 8003b8e:	491e      	ldr	r1, [pc, #120]	@ (8003c08 <BSP_AUDIO_OUT_Play+0xe4>)
 8003b90:	68fa      	ldr	r2, [r7, #12]
 8003b92:	4613      	mov	r3, r2
 8003b94:	00db      	lsls	r3, r3, #3
 8003b96:	4413      	add	r3, r2
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	440b      	add	r3, r1
 8003b9c:	330c      	adds	r3, #12
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	08db      	lsrs	r3, r3, #3
 8003ba2:	687a      	ldr	r2, [r7, #4]
 8003ba4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ba8:	b29b      	uxth	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	68b9      	ldr	r1, [r7, #8]
 8003bae:	4817      	ldr	r0, [pc, #92]	@ (8003c0c <BSP_AUDIO_OUT_Play+0xe8>)
 8003bb0:	f00c f9c4 	bl	800ff3c <HAL_SAI_Transmit_DMA>
 8003bb4:	4603      	mov	r3, r0
 8003bb6:	2b00      	cmp	r3, #0
 8003bb8:	d002      	beq.n	8003bc0 <BSP_AUDIO_OUT_Play+0x9c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8003bba:	f06f 0303 	mvn.w	r3, #3
 8003bbe:	617b      	str	r3, [r7, #20]
    }
    if(ret == BSP_ERROR_NONE)
 8003bc0:	697b      	ldr	r3, [r7, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d11b      	bne.n	8003bfe <BSP_AUDIO_OUT_Play+0xda>
    {
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 8003bc6:	4b12      	ldr	r3, [pc, #72]	@ (8003c10 <BSP_AUDIO_OUT_Play+0xec>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	68db      	ldr	r3, [r3, #12]
 8003bcc:	4a11      	ldr	r2, [pc, #68]	@ (8003c14 <BSP_AUDIO_OUT_Play+0xf0>)
 8003bce:	6812      	ldr	r2, [r2, #0]
 8003bd0:	4610      	mov	r0, r2
 8003bd2:	4798      	blx	r3
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d003      	beq.n	8003be2 <BSP_AUDIO_OUT_Play+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8003bda:	f06f 0304 	mvn.w	r3, #4
 8003bde:	617b      	str	r3, [r7, #20]
    if(ret == BSP_ERROR_NONE)
 8003be0:	e00d      	b.n	8003bfe <BSP_AUDIO_OUT_Play+0xda>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 8003be2:	4909      	ldr	r1, [pc, #36]	@ (8003c08 <BSP_AUDIO_OUT_Play+0xe4>)
 8003be4:	68fa      	ldr	r2, [r7, #12]
 8003be6:	4613      	mov	r3, r2
 8003be8:	00db      	lsls	r3, r3, #3
 8003bea:	4413      	add	r3, r2
 8003bec:	009b      	lsls	r3, r3, #2
 8003bee:	440b      	add	r3, r1
 8003bf0:	331c      	adds	r3, #28
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	601a      	str	r2, [r3, #0]
    if(ret == BSP_ERROR_NONE)
 8003bf6:	e002      	b.n	8003bfe <BSP_AUDIO_OUT_Play+0xda>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 8003bf8:	f06f 0302 	mvn.w	r3, #2
 8003bfc:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 8003bfe:	697b      	ldr	r3, [r7, #20]
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}
 8003c08:	2400ab40 	.word	0x2400ab40
 8003c0c:	2400aa10 	.word	0x2400aa10
 8003c10:	2400a964 	.word	0x2400a964
 8003c14:	2400aa0c 	.word	0x2400aa0c

08003c18 <BSP_AUDIO_OUT_SetDevice>:
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI) or 1 (I2S)
  * @param  Device  The audio output device
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetDevice(uint32_t Instance, uint32_t Device)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
 8003c20:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8003c22:	2300      	movs	r3, #0
 8003c24:	60fb      	str	r3, [r7, #12]

  UNUSED(Device);

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d903      	bls.n	8003c34 <BSP_AUDIO_OUT_SetDevice+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8003c2c:	f06f 0301 	mvn.w	r3, #1
 8003c30:	60fb      	str	r3, [r7, #12]
 8003c32:	e00d      	b.n	8003c50 <BSP_AUDIO_OUT_SetDevice+0x38>
  }
  /* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 8003c34:	490a      	ldr	r1, [pc, #40]	@ (8003c60 <BSP_AUDIO_OUT_SetDevice+0x48>)
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	4613      	mov	r3, r2
 8003c3a:	00db      	lsls	r3, r3, #3
 8003c3c:	4413      	add	r3, r2
 8003c3e:	009b      	lsls	r3, r3, #2
 8003c40:	440b      	add	r3, r1
 8003c42:	331c      	adds	r3, #28
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	2b02      	cmp	r3, #2
 8003c48:	d002      	beq.n	8003c50 <BSP_AUDIO_OUT_SetDevice+0x38>
  {
    ret = BSP_ERROR_BUSY;
 8003c4a:	f06f 0302 	mvn.w	r3, #2
 8003c4e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do because there is only one device (AUDIO_OUT_DEVICE_HEADPHONE) */
  }

  /* Return BSP status */
  return ret;
 8003c50:	68fb      	ldr	r3, [r7, #12]
}
 8003c52:	4618      	mov	r0, r3
 8003c54:	3714      	adds	r7, #20
 8003c56:	46bd      	mov	sp, r7
 8003c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5c:	4770      	bx	lr
 8003c5e:	bf00      	nop
 8003c60:	2400ab40 	.word	0x2400ab40

08003c64 <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003c64:	b580      	push	{r7, lr}
 8003c66:	b082      	sub	sp, #8
 8003c68:	af00      	add	r7, sp, #0
 8003c6a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 8003c6c:	2000      	movs	r0, #0
 8003c6e:	f000 f825 	bl	8003cbc <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 8003c72:	bf00      	nop
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}

08003c7a <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 8003c7a:	b580      	push	{r7, lr}
 8003c7c:	b082      	sub	sp, #8
 8003c7e:	af00      	add	r7, sp, #0
 8003c80:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 8003c82:	2000      	movs	r0, #0
 8003c84:	f000 f824 	bl	8003cd0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 8003c88:	bf00      	nop
 8003c8a:	3708      	adds	r7, #8
 8003c8c:	46bd      	mov	sp, r7
 8003c8e:	bd80      	pop	{r7, pc}

08003c90 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	4a06      	ldr	r2, [pc, #24]	@ (8003cb8 <HAL_SAI_ErrorCallback+0x28>)
 8003c9e:	4293      	cmp	r3, r2
 8003ca0:	d103      	bne.n	8003caa <HAL_SAI_ErrorCallback+0x1a>
  {
  BSP_AUDIO_OUT_Error_CallBack(0);
 8003ca2:	2000      	movs	r0, #0
 8003ca4:	f000 f81e 	bl	8003ce4 <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
  BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 8003ca8:	e002      	b.n	8003cb0 <HAL_SAI_ErrorCallback+0x20>
  BSP_AUDIO_IN_Error_CallBack(0);
 8003caa:	2000      	movs	r0, #0
 8003cac:	f7fe fc3e 	bl	800252c <BSP_AUDIO_IN_Error_CallBack>
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}
 8003cb8:	40015804 	.word	0x40015804

08003cbc <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the DMA full Transfer complete event
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 8003cbc:	b480      	push	{r7}
 8003cbe:	b083      	sub	sp, #12
 8003cc0:	af00      	add	r7, sp, #0
 8003cc2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8003cc4:	bf00      	nop
 8003cc6:	370c      	adds	r7, #12
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr

08003cd0 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8003cd0:	b480      	push	{r7}
 8003cd2:	b083      	sub	sp, #12
 8003cd4:	af00      	add	r7, sp, #0
 8003cd6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8003cd8:	bf00      	nop
 8003cda:	370c      	adds	r7, #12
 8003cdc:	46bd      	mov	sp, r7
 8003cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce2:	4770      	bx	lr

08003ce4 <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
__weak void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b083      	sub	sp, #12
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);
}
 8003cec:	bf00      	nop
 8003cee:	370c      	adds	r7, #12
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <BSP_AUDIO_IN_Init>:
  *       - 1 if SAI PDM is used
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 8003cf8:	b590      	push	{r4, r7, lr}
 8003cfa:	b093      	sub	sp, #76	@ 0x4c
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
 8003d00:	6039      	str	r1, [r7, #0]


  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	2b01      	cmp	r3, #1
 8003d06:	d902      	bls.n	8003d0e <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 8003d08:	f06f 0301 	mvn.w	r3, #1
 8003d0c:	e175      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 8003d0e:	683b      	ldr	r3, [r7, #0]
 8003d10:	6819      	ldr	r1, [r3, #0]
 8003d12:	489c      	ldr	r0, [pc, #624]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003d14:	687a      	ldr	r2, [r7, #4]
 8003d16:	4613      	mov	r3, r2
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	011b      	lsls	r3, r3, #4
 8003d1e:	4403      	add	r3, r0
 8003d20:	3304      	adds	r3, #4
 8003d22:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	68d9      	ldr	r1, [r3, #12]
 8003d28:	4896      	ldr	r0, [pc, #600]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003d2a:	687a      	ldr	r2, [r7, #4]
 8003d2c:	4613      	mov	r3, r2
 8003d2e:	005b      	lsls	r3, r3, #1
 8003d30:	4413      	add	r3, r2
 8003d32:	011b      	lsls	r3, r3, #4
 8003d34:	4403      	add	r3, r0
 8003d36:	3310      	adds	r3, #16
 8003d38:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 8003d3a:	683b      	ldr	r3, [r7, #0]
 8003d3c:	6859      	ldr	r1, [r3, #4]
 8003d3e:	4891      	ldr	r0, [pc, #580]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003d40:	687a      	ldr	r2, [r7, #4]
 8003d42:	4613      	mov	r3, r2
 8003d44:	005b      	lsls	r3, r3, #1
 8003d46:	4413      	add	r3, r2
 8003d48:	011b      	lsls	r3, r3, #4
 8003d4a:	4403      	add	r3, r0
 8003d4c:	3308      	adds	r3, #8
 8003d4e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 8003d50:	683b      	ldr	r3, [r7, #0]
 8003d52:	6899      	ldr	r1, [r3, #8]
 8003d54:	488b      	ldr	r0, [pc, #556]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003d56:	687a      	ldr	r2, [r7, #4]
 8003d58:	4613      	mov	r3, r2
 8003d5a:	005b      	lsls	r3, r3, #1
 8003d5c:	4413      	add	r3, r2
 8003d5e:	011b      	lsls	r3, r3, #4
 8003d60:	4403      	add	r3, r0
 8003d62:	330c      	adds	r3, #12
 8003d64:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	6919      	ldr	r1, [r3, #16]
 8003d6a:	4886      	ldr	r0, [pc, #536]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003d6c:	687a      	ldr	r2, [r7, #4]
 8003d6e:	4613      	mov	r3, r2
 8003d70:	005b      	lsls	r3, r3, #1
 8003d72:	4413      	add	r3, r2
 8003d74:	011b      	lsls	r3, r3, #4
 8003d76:	4403      	add	r3, r0
 8003d78:	3320      	adds	r3, #32
 8003d7a:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 8003d7c:	4981      	ldr	r1, [pc, #516]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003d7e:	687a      	ldr	r2, [r7, #4]
 8003d80:	4613      	mov	r3, r2
 8003d82:	005b      	lsls	r3, r3, #1
 8003d84:	4413      	add	r3, r2
 8003d86:	011b      	lsls	r3, r3, #4
 8003d88:	440b      	add	r3, r1
 8003d8a:	3324      	adds	r3, #36	@ 0x24
 8003d8c:	2200      	movs	r2, #0
 8003d8e:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	f040 80b6 	bne.w	8003f04 <BSP_AUDIO_IN_Init+0x20c>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8003d98:	683b      	ldr	r3, [r7, #0]
 8003d9a:	685b      	ldr	r3, [r3, #4]
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	487a      	ldr	r0, [pc, #488]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003da0:	f7ff fe31 	bl	8003a06 <MX_SAI1_ClockConfig>
 8003da4:	4603      	mov	r3, r0
 8003da6:	2b00      	cmp	r3, #0
 8003da8:	d002      	beq.n	8003db0 <BSP_AUDIO_IN_Init+0xb8>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8003daa:	f06f 0308 	mvn.w	r3, #8
 8003dae:	e124      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 8003db0:	4b75      	ldr	r3, [pc, #468]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003db2:	4a76      	ldr	r2, [pc, #472]	@ (8003f8c <BSP_AUDIO_IN_Init+0x294>)
 8003db4:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8003db6:	4874      	ldr	r0, [pc, #464]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003db8:	f000 fbf8 	bl	80045ac <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      mx_config.MonoStereoMode = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 8003dbc:	683b      	ldr	r3, [r7, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	2b01      	cmp	r3, #1
 8003dc2:	d102      	bne.n	8003dca <BSP_AUDIO_IN_Init+0xd2>
 8003dc4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8003dc8:	e000      	b.n	8003dcc <BSP_AUDIO_IN_Init+0xd4>
 8003dca:	2300      	movs	r3, #0
 8003dcc:	617b      	str	r3, [r7, #20]
      mx_config.FrameLength       = 64;
 8003dce:	2340      	movs	r3, #64	@ 0x40
 8003dd0:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 32;
 8003dd2:	2320      	movs	r3, #32
 8003dd4:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.DataSize =(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?SAI_DATASIZE_32: SAI_DATASIZE_16;
 8003dd6:	683b      	ldr	r3, [r7, #0]
 8003dd8:	689b      	ldr	r3, [r3, #8]
 8003dda:	2b20      	cmp	r3, #32
 8003ddc:	d101      	bne.n	8003de2 <BSP_AUDIO_IN_Init+0xea>
 8003dde:	23e0      	movs	r3, #224	@ 0xe0
 8003de0:	e000      	b.n	8003de4 <BSP_AUDIO_IN_Init+0xec>
 8003de2:	2380      	movs	r3, #128	@ 0x80
 8003de4:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?128: 64;
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	2b20      	cmp	r3, #32
 8003dec:	d101      	bne.n	8003df2 <BSP_AUDIO_IN_Init+0xfa>
 8003dee:	2380      	movs	r3, #128	@ 0x80
 8003df0:	e000      	b.n	8003df4 <BSP_AUDIO_IN_Init+0xfc>
 8003df2:	2340      	movs	r3, #64	@ 0x40
 8003df4:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?64: 32;
 8003df6:	683b      	ldr	r3, [r7, #0]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	2b20      	cmp	r3, #32
 8003dfc:	d101      	bne.n	8003e02 <BSP_AUDIO_IN_Init+0x10a>
 8003dfe:	2340      	movs	r3, #64	@ 0x40
 8003e00:	e000      	b.n	8003e04 <BSP_AUDIO_IN_Init+0x10c>
 8003e02:	2320      	movs	r3, #32
 8003e04:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8003e06:	2300      	movs	r3, #0
 8003e08:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_0123;
 8003e0a:	230f      	movs	r3, #15
 8003e0c:	633b      	str	r3, [r7, #48]	@ 0x30
      /* Prepare haudio_in_sai handle */
      haudio_in_sai.Instance        = SAI1_Block_B;
 8003e0e:	4b5e      	ldr	r3, [pc, #376]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003e10:	4a5e      	ldr	r2, [pc, #376]	@ (8003f8c <BSP_AUDIO_IN_Init+0x294>)
 8003e12:	601a      	str	r2, [r3, #0]
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate;
 8003e14:	495b      	ldr	r1, [pc, #364]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003e16:	687a      	ldr	r2, [r7, #4]
 8003e18:	4613      	mov	r3, r2
 8003e1a:	005b      	lsls	r3, r3, #1
 8003e1c:	4413      	add	r3, r2
 8003e1e:	011b      	lsls	r3, r3, #4
 8003e20:	440b      	add	r3, r1
 8003e22:	3308      	adds	r3, #8
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODESLAVE_RX;
 8003e28:	2303      	movs	r3, #3
 8003e2a:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 8003e2c:	2301      	movs	r3, #1
 8003e2e:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_SYNCHRONOUS;
 8003e30:	2301      	movs	r3, #1
 8003e32:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8003e34:	2300      	movs	r3, #0
 8003e36:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Disable SAI peripheral to allow access to SAI internal registers */

      if(MX_SAI1_Block_B_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8003e38:	f107 0308 	add.w	r3, r7, #8
 8003e3c:	4619      	mov	r1, r3
 8003e3e:	4852      	ldr	r0, [pc, #328]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003e40:	f000 f8e2 	bl	8004008 <MX_SAI1_Block_B_Init>
 8003e44:	4603      	mov	r3, r0
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d002      	beq.n	8003e50 <BSP_AUDIO_IN_Init+0x158>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8003e4a:	f06f 0303 	mvn.w	r3, #3
 8003e4e:	e0d4      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
      }

      /* Prepare haudio_out_sai handle */
      haudio_out_sai.Instance       = SAI1_Block_A;
 8003e50:	4b4f      	ldr	r3, [pc, #316]	@ (8003f90 <BSP_AUDIO_IN_Init+0x298>)
 8003e52:	4a50      	ldr	r2, [pc, #320]	@ (8003f94 <BSP_AUDIO_IN_Init+0x29c>)
 8003e54:	601a      	str	r2, [r3, #0]
      mx_config.AudioMode         = SAI_MODEMASTER_TX;
 8003e56:	2300      	movs	r3, #0
 8003e58:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003e5a:	2300      	movs	r3, #0
 8003e5c:	61bb      	str	r3, [r7, #24]
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 8003e5e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003e62:	623b      	str	r3, [r7, #32]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8003e64:	2300      	movs	r3, #0
 8003e66:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8003e68:	2300      	movs	r3, #0
 8003e6a:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 8003e6c:	f107 0308 	add.w	r3, r7, #8
 8003e70:	4619      	mov	r1, r3
 8003e72:	4847      	ldr	r0, [pc, #284]	@ (8003f90 <BSP_AUDIO_IN_Init+0x298>)
 8003e74:	f7ff fd3e 	bl	80038f4 <MX_SAI1_Block_A_Init>
 8003e78:	4603      	mov	r3, r0
 8003e7a:	2b00      	cmp	r3, #0
 8003e7c:	d002      	beq.n	8003e84 <BSP_AUDIO_IN_Init+0x18c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8003e7e:	f06f 0303 	mvn.w	r3, #3
 8003e82:	e0ba      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_AUDIO_CODEC_WM8994 == 1U)
      /* Initialize the codec internal registers */
      if(WM8994_Probe() == BSP_ERROR_NONE)
 8003e84:	f000 fb38 	bl	80044f8 <WM8994_Probe>
 8003e88:	4603      	mov	r3, r0
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	f040 80aa 	bne.w	8003fe4 <BSP_AUDIO_IN_Init+0x2ec>
      {
        WM8994_Init_t codec_init;

        /* Fill codec_init structure */
        codec_init.Frequency    = AudioInit->SampleRate;
 8003e90:	683b      	ldr	r3, [r7, #0]
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	63fb      	str	r3, [r7, #60]	@ 0x3c
        codec_init.OutputDevice = WM8994_OUT_NONE;
 8003e96:	2300      	movs	r3, #0
 8003e98:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC)
 8003e9a:	683b      	ldr	r3, [r7, #0]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d104      	bne.n	8003eac <BSP_AUDIO_IN_Init+0x1b4>
        {
          codec_init.InputDevice = WM8994_IN_LINE1;
 8003ea2:	2303      	movs	r3, #3
 8003ea4:	637b      	str	r3, [r7, #52]	@ 0x34
          codec_init.OutputDevice = AUDIO_OUT_DEVICE_HEADPHONE;
 8003ea6:	2302      	movs	r3, #2
 8003ea8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003eaa:	e001      	b.n	8003eb0 <BSP_AUDIO_IN_Init+0x1b8>
        }
        else /* (AudioInit->Device == AUDIO_IN_DEVICE_DIGITAL_MIC) */
        {
          codec_init.InputDevice = WM8994_IN_MIC2;
 8003eac:	2302      	movs	r3, #2
 8003eae:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        codec_init.Resolution=(AudioInit->BitsPerSample==AUDIO_RESOLUTION_32B)? 3:0;
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	689b      	ldr	r3, [r3, #8]
 8003eb4:	2b20      	cmp	r3, #32
 8003eb6:	d101      	bne.n	8003ebc <BSP_AUDIO_IN_Init+0x1c4>
 8003eb8:	2303      	movs	r3, #3
 8003eba:	e000      	b.n	8003ebe <BSP_AUDIO_IN_Init+0x1c6>
 8003ebc:	2300      	movs	r3, #0
 8003ebe:	643b      	str	r3, [r7, #64]	@ 0x40
        /* Convert volume before sending to the codec */
        codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 8003ec0:	683b      	ldr	r3, [r7, #0]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	2b63      	cmp	r3, #99	@ 0x63
 8003ec6:	d80c      	bhi.n	8003ee2 <BSP_AUDIO_IN_Init+0x1ea>
 8003ec8:	683b      	ldr	r3, [r7, #0]
 8003eca:	691a      	ldr	r2, [r3, #16]
 8003ecc:	4613      	mov	r3, r2
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	1a9b      	subs	r3, r3, r2
 8003ed2:	011b      	lsls	r3, r3, #4
 8003ed4:	1a9b      	subs	r3, r3, r2
 8003ed6:	4a30      	ldr	r2, [pc, #192]	@ (8003f98 <BSP_AUDIO_IN_Init+0x2a0>)
 8003ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8003edc:	095b      	lsrs	r3, r3, #5
 8003ede:	b2db      	uxtb	r3, r3
 8003ee0:	e000      	b.n	8003ee4 <BSP_AUDIO_IN_Init+0x1ec>
 8003ee2:	23ef      	movs	r3, #239	@ 0xef
 8003ee4:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Initialize the codec internal registers */
        if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 8003ee6:	4b2d      	ldr	r3, [pc, #180]	@ (8003f9c <BSP_AUDIO_IN_Init+0x2a4>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa0 <BSP_AUDIO_IN_Init+0x2a8>)
 8003eee:	6812      	ldr	r2, [r2, #0]
 8003ef0:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 8003ef4:	4610      	mov	r0, r2
 8003ef6:	4798      	blx	r3
 8003ef8:	4603      	mov	r3, r0
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d072      	beq.n	8003fe4 <BSP_AUDIO_IN_Init+0x2ec>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 8003efe:	f06f 0304 	mvn.w	r3, #4
        return BSP_ERROR_CLOCK_FAILURE;
 8003f02:	e07a      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
        }
      }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
    }
    else if(Instance == 1U)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	2b01      	cmp	r3, #1
 8003f08:	d16c      	bne.n	8003fe4 <BSP_AUDIO_IN_Init+0x2ec>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	685b      	ldr	r3, [r3, #4]
 8003f0e:	4619      	mov	r1, r3
 8003f10:	481d      	ldr	r0, [pc, #116]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003f12:	f7ff fdbe 	bl	8003a92 <MX_SAI4_ClockConfig>
 8003f16:	4603      	mov	r3, r0
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d002      	beq.n	8003f22 <BSP_AUDIO_IN_Init+0x22a>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 8003f1c:	f06f 0308 	mvn.w	r3, #8
 8003f20:	e06b      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 8003f22:	4b19      	ldr	r3, [pc, #100]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003f24:	4a1f      	ldr	r2, [pc, #124]	@ (8003fa4 <BSP_AUDIO_IN_Init+0x2ac>)
 8003f26:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 8003f28:	4817      	ldr	r0, [pc, #92]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003f2a:	f000 fb3f 	bl	80045ac <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 8003f2e:	2300      	movs	r3, #0
 8003f30:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 8003f32:	2380      	movs	r3, #128	@ 0x80
 8003f34:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 8003f36:	2310      	movs	r3, #16
 8003f38:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 1;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 8003f42:	2301      	movs	r3, #1
 8003f44:	633b      	str	r3, [r7, #48]	@ 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 8003f46:	490f      	ldr	r1, [pc, #60]	@ (8003f84 <BSP_AUDIO_IN_Init+0x28c>)
 8003f48:	687a      	ldr	r2, [r7, #4]
 8003f4a:	4613      	mov	r3, r2
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	4413      	add	r3, r2
 8003f50:	011b      	lsls	r3, r3, #4
 8003f52:	440b      	add	r3, r1
 8003f54:	3308      	adds	r3, #8
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	00db      	lsls	r3, r3, #3
 8003f5a:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 8003f5c:	2301      	movs	r3, #1
 8003f5e:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 8003f60:	2300      	movs	r3, #0
 8003f62:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 8003f64:	2300      	movs	r3, #0
 8003f66:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 8003f68:	2300      	movs	r3, #0
 8003f6a:	627b      	str	r3, [r7, #36]	@ 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 8003f6c:	f107 0308 	add.w	r3, r7, #8
 8003f70:	4619      	mov	r1, r3
 8003f72:	4805      	ldr	r0, [pc, #20]	@ (8003f88 <BSP_AUDIO_IN_Init+0x290>)
 8003f74:	f000 f8c5 	bl	8004102 <MX_SAI4_Block_A_Init>
 8003f78:	4603      	mov	r3, r0
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d014      	beq.n	8003fa8 <BSP_AUDIO_IN_Init+0x2b0>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 8003f7e:	f06f 0303 	mvn.w	r3, #3
 8003f82:	e03a      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
 8003f84:	2400ab88 	.word	0x2400ab88
 8003f88:	2400aaa8 	.word	0x2400aaa8
 8003f8c:	40015824 	.word	0x40015824
 8003f90:	2400aa10 	.word	0x2400aa10
 8003f94:	40015804 	.word	0x40015804
 8003f98:	51eb851f 	.word	0x51eb851f
 8003f9c:	2400a964 	.word	0x2400a964
 8003fa0:	2400aa0c 	.word	0x2400aa0c
 8003fa4:	58005404 	.word	0x58005404
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */

      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 8003fa8:	683b      	ldr	r3, [r7, #0]
 8003faa:	6859      	ldr	r1, [r3, #4]
 8003fac:	4815      	ldr	r0, [pc, #84]	@ (8004004 <BSP_AUDIO_IN_Init+0x30c>)
 8003fae:	687a      	ldr	r2, [r7, #4]
 8003fb0:	4613      	mov	r3, r2
 8003fb2:	005b      	lsls	r3, r3, #1
 8003fb4:	4413      	add	r3, r2
 8003fb6:	011b      	lsls	r3, r3, #4
 8003fb8:	4403      	add	r3, r0
 8003fba:	3310      	adds	r3, #16
 8003fbc:	6818      	ldr	r0, [r3, #0]
 8003fbe:	4c11      	ldr	r4, [pc, #68]	@ (8004004 <BSP_AUDIO_IN_Init+0x30c>)
 8003fc0:	687a      	ldr	r2, [r7, #4]
 8003fc2:	4613      	mov	r3, r2
 8003fc4:	005b      	lsls	r3, r3, #1
 8003fc6:	4413      	add	r3, r2
 8003fc8:	011b      	lsls	r3, r3, #4
 8003fca:	4423      	add	r3, r4
 8003fcc:	3310      	adds	r3, #16
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4602      	mov	r2, r0
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 f91a 	bl	800420c <BSP_AUDIO_IN_PDMToPCM_Init>
 8003fd8:	4603      	mov	r3, r0
 8003fda:	2b00      	cmp	r3, #0
 8003fdc:	d002      	beq.n	8003fe4 <BSP_AUDIO_IN_Init+0x2ec>
      {
        return BSP_ERROR_NO_INIT;
 8003fde:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003fe2:	e00a      	b.n	8003ffa <BSP_AUDIO_IN_Init+0x302>
    }
    else
    {}

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 8003fe4:	4907      	ldr	r1, [pc, #28]	@ (8004004 <BSP_AUDIO_IN_Init+0x30c>)
 8003fe6:	687a      	ldr	r2, [r7, #4]
 8003fe8:	4613      	mov	r3, r2
 8003fea:	005b      	lsls	r3, r3, #1
 8003fec:	4413      	add	r3, r2
 8003fee:	011b      	lsls	r3, r3, #4
 8003ff0:	440b      	add	r3, r1
 8003ff2:	3324      	adds	r3, #36	@ 0x24
 8003ff4:	2202      	movs	r2, #2
 8003ff6:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return BSP_ERROR_NONE;
 8003ff8:	2300      	movs	r3, #0
  }
}
 8003ffa:	4618      	mov	r0, r3
 8003ffc:	374c      	adds	r7, #76	@ 0x4c
 8003ffe:	46bd      	mov	sp, r7
 8004000:	bd90      	pop	{r4, r7, pc}
 8004002:	bf00      	nop
 8004004:	2400ab88 	.word	0x2400ab88

08004008 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	b084      	sub	sp, #16
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
 8004010:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 8004012:	2300      	movs	r3, #0
 8004014:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	681a      	ldr	r2, [r3, #0]
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8004024:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8004026:	683b      	ldr	r3, [r7, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	68da      	ldr	r2, [r3, #12]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	685a      	ldr	r2, [r3, #4]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2200      	movs	r2, #0
 8004042:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	2200      	movs	r2, #0
 8004048:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800404a:	683b      	ldr	r3, [r7, #0]
 800404c:	689a      	ldr	r2, [r3, #8]
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2200      	movs	r2, #0
 8004056:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	691a      	ldr	r2, [r3, #16]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	695a      	ldr	r2, [r3, #20]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	699a      	ldr	r2, [r3, #24]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	69da      	ldr	r2, [r3, #28]
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	2210      	movs	r2, #16
 8004088:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	2200      	movs	r2, #0
 800408e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = DISABLE;
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 8004098:	683b      	ldr	r3, [r7, #0]
 800409a:	6a1a      	ldr	r2, [r3, #32]
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80040a0:	683b      	ldr	r3, [r7, #0]
 80040a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80040ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2200      	movs	r2, #0
 80040b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 80040bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2200      	movs	r2, #0
 80040c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	2204      	movs	r2, #4
 80040ce:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80040d0:	683b      	ldr	r3, [r7, #0]
 80040d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80040d8:	6878      	ldr	r0, [r7, #4]
 80040da:	f00b fc85 	bl	800f9e8 <HAL_SAI_Init>
 80040de:	4603      	mov	r3, r0
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d001      	beq.n	80040e8 <MX_SAI1_Block_B_Init+0xe0>
  {
    ret = HAL_ERROR;
 80040e4:	2301      	movs	r3, #1
 80040e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80040f6:	601a      	str	r2, [r3, #0]

  return ret;
 80040f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80040fa:	4618      	mov	r0, r3
 80040fc:	3710      	adds	r7, #16
 80040fe:	46bd      	mov	sp, r7
 8004100:	bd80      	pop	{r7, pc}

08004102 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 8004102:	b580      	push	{r7, lr}
 8004104:	b084      	sub	sp, #16
 8004106:	af00      	add	r7, sp, #0
 8004108:	6078      	str	r0, [r7, #4]
 800410a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800410c:	2300      	movs	r3, #0
 800410e:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800411e:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 8004120:	683b      	ldr	r3, [r7, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 8004128:	683b      	ldr	r3, [r7, #0]
 800412a:	68da      	ldr	r2, [r3, #12]
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	685a      	ldr	r2, [r3, #4]
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800413e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2200      	movs	r2, #0
 8004144:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	689a      	ldr	r2, [r3, #8]
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004154:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 8004156:	683b      	ldr	r3, [r7, #0]
 8004158:	691a      	ldr	r2, [r3, #16]
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 800415e:	683b      	ldr	r3, [r7, #0]
 8004160:	695a      	ldr	r2, [r3, #20]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	699a      	ldr	r2, [r3, #24]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2201      	movs	r2, #1
 8004172:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	69da      	ldr	r2, [r3, #28]
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2200      	movs	r2, #0
 8004180:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2210      	movs	r2, #16
 8004186:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2200      	movs	r2, #0
 800418c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	2201      	movs	r2, #1
 8004192:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2201      	movs	r2, #1
 800419a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80041a2:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	6a1a      	ldr	r2, [r3, #32]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 80041ac:	683b      	ldr	r3, [r7, #0]
 80041ae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2200      	movs	r2, #0
 80041b8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80041c0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2200      	movs	r2, #0
 80041c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	2200      	movs	r2, #0
 80041cc:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2200      	movs	r2, #0
 80041d2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2201      	movs	r2, #1
 80041d8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 80041da:	683b      	ldr	r3, [r7, #0]
 80041dc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 80041e2:	6878      	ldr	r0, [r7, #4]
 80041e4:	f00b fc00 	bl	800f9e8 <HAL_SAI_Init>
 80041e8:	4603      	mov	r3, r0
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d001      	beq.n	80041f2 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 80041ee:	2301      	movs	r3, #1
 80041f0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	681a      	ldr	r2, [r3, #0]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8004200:	601a      	str	r2, [r3, #0]

  return ret;
 8004202:	7bfb      	ldrb	r3, [r7, #15]
}
 8004204:	4618      	mov	r0, r3
 8004206:	3710      	adds	r7, #16
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b086      	sub	sp, #24
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800421a:	2300      	movs	r3, #0
 800421c:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d002      	beq.n	800422a <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 8004224:	f06f 0301 	mvn.w	r3, #1
 8004228:	e085      	b.n	8004336 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800422a:	4b45      	ldr	r3, [pc, #276]	@ (8004340 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800422c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004230:	4a43      	ldr	r2, [pc, #268]	@ (8004340 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 8004232:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 8004236:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800423a:	4b41      	ldr	r3, [pc, #260]	@ (8004340 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800423c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004240:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004244:	613b      	str	r3, [r7, #16]
 8004246:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 8004248:	2300      	movs	r3, #0
 800424a:	617b      	str	r3, [r7, #20]
 800424c:	e06e      	b.n	800432c <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 800424e:	4a3d      	ldr	r2, [pc, #244]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8004250:	697b      	ldr	r3, [r7, #20]
 8004252:	214c      	movs	r1, #76	@ 0x4c
 8004254:	fb01 f303 	mul.w	r3, r1, r3
 8004258:	4413      	add	r3, r2
 800425a:	2201      	movs	r2, #1
 800425c:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800425e:	4a39      	ldr	r2, [pc, #228]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8004260:	697b      	ldr	r3, [r7, #20]
 8004262:	214c      	movs	r1, #76	@ 0x4c
 8004264:	fb01 f303 	mul.w	r3, r1, r3
 8004268:	4413      	add	r3, r2
 800426a:	3302      	adds	r3, #2
 800426c:	2200      	movs	r2, #0
 800426e:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 8004270:	4a34      	ldr	r2, [pc, #208]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8004272:	697b      	ldr	r3, [r7, #20]
 8004274:	214c      	movs	r1, #76	@ 0x4c
 8004276:	fb01 f303 	mul.w	r3, r1, r3
 800427a:	4413      	add	r3, r2
 800427c:	3304      	adds	r3, #4
 800427e:	4a32      	ldr	r2, [pc, #200]	@ (8004348 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 8004280:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	b298      	uxth	r0, r3
 8004286:	4a2f      	ldr	r2, [pc, #188]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8004288:	697b      	ldr	r3, [r7, #20]
 800428a:	214c      	movs	r1, #76	@ 0x4c
 800428c:	fb01 f303 	mul.w	r3, r1, r3
 8004290:	4413      	add	r3, r2
 8004292:	330a      	adds	r3, #10
 8004294:	4602      	mov	r2, r0
 8004296:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	b298      	uxth	r0, r3
 800429c:	4a29      	ldr	r2, [pc, #164]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	214c      	movs	r1, #76	@ 0x4c
 80042a2:	fb01 f303 	mul.w	r3, r1, r3
 80042a6:	4413      	add	r3, r2
 80042a8:	3308      	adds	r3, #8
 80042aa:	4602      	mov	r2, r0
 80042ac:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 80042ae:	697b      	ldr	r3, [r7, #20]
 80042b0:	224c      	movs	r2, #76	@ 0x4c
 80042b2:	fb02 f303 	mul.w	r3, r2, r3
 80042b6:	4a23      	ldr	r2, [pc, #140]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 80042b8:	4413      	add	r3, r2
 80042ba:	4618      	mov	r0, r3
 80042bc:	f00d fe4c 	bl	8011f58 <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	4a22      	ldr	r2, [pc, #136]	@ (800434c <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 80042c4:	fba2 2303 	umull	r2, r3, r2, r3
 80042c8:	099b      	lsrs	r3, r3, #6
 80042ca:	b298      	uxth	r0, r3
 80042cc:	4920      	ldr	r1, [pc, #128]	@ (8004350 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80042ce:	697a      	ldr	r2, [r7, #20]
 80042d0:	4613      	mov	r3, r2
 80042d2:	005b      	lsls	r3, r3, #1
 80042d4:	4413      	add	r3, r2
 80042d6:	005b      	lsls	r3, r3, #1
 80042d8:	440b      	add	r3, r1
 80042da:	3302      	adds	r3, #2
 80042dc:	4602      	mov	r2, r0
 80042de:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 80042e0:	491b      	ldr	r1, [pc, #108]	@ (8004350 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80042e2:	697a      	ldr	r2, [r7, #20]
 80042e4:	4613      	mov	r3, r2
 80042e6:	005b      	lsls	r3, r3, #1
 80042e8:	4413      	add	r3, r2
 80042ea:	005b      	lsls	r3, r3, #1
 80042ec:	440b      	add	r3, r1
 80042ee:	3304      	adds	r3, #4
 80042f0:	2218      	movs	r2, #24
 80042f2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 80042f4:	4916      	ldr	r1, [pc, #88]	@ (8004350 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 80042f6:	697a      	ldr	r2, [r7, #20]
 80042f8:	4613      	mov	r3, r2
 80042fa:	005b      	lsls	r3, r3, #1
 80042fc:	4413      	add	r3, r2
 80042fe:	005b      	lsls	r3, r3, #1
 8004300:	440b      	add	r3, r1
 8004302:	2202      	movs	r2, #2
 8004304:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 8004306:	697b      	ldr	r3, [r7, #20]
 8004308:	224c      	movs	r2, #76	@ 0x4c
 800430a:	fb02 f303 	mul.w	r3, r2, r3
 800430e:	4a0d      	ldr	r2, [pc, #52]	@ (8004344 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 8004310:	1898      	adds	r0, r3, r2
 8004312:	697a      	ldr	r2, [r7, #20]
 8004314:	4613      	mov	r3, r2
 8004316:	005b      	lsls	r3, r3, #1
 8004318:	4413      	add	r3, r2
 800431a:	005b      	lsls	r3, r3, #1
 800431c:	4a0c      	ldr	r2, [pc, #48]	@ (8004350 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800431e:	4413      	add	r3, r2
 8004320:	4619      	mov	r1, r3
 8004322:	f00d fe9f 	bl	8012064 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	3301      	adds	r3, #1
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697a      	ldr	r2, [r7, #20]
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	429a      	cmp	r2, r3
 8004332:	d38c      	bcc.n	800424e <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 8004334:	2300      	movs	r3, #0
}
 8004336:	4618      	mov	r0, r3
 8004338:	3718      	adds	r7, #24
 800433a:	46bd      	mov	sp, r7
 800433c:	bd80      	pop	{r7, pc}
 800433e:	bf00      	nop
 8004340:	58024400 	.word	0x58024400
 8004344:	2400a968 	.word	0x2400a968
 8004348:	7e809d48 	.word	0x7e809d48
 800434c:	10624dd3 	.word	0x10624dd3
 8004350:	2400aa00 	.word	0x2400aa00

08004354 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	60f8      	str	r0, [r7, #12]
 800435c:	60b9      	str	r1, [r7, #8]
 800435e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 8004360:	2300      	movs	r3, #0
 8004362:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	2b01      	cmp	r3, #1
 8004368:	d002      	beq.n	8004370 <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 800436a:	f06f 0301 	mvn.w	r3, #1
 800436e:	e022      	b.n	80043b6 <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8004370:	2300      	movs	r3, #0
 8004372:	617b      	str	r3, [r7, #20]
 8004374:	e012      	b.n	800439c <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	697b      	ldr	r3, [r7, #20]
 800437a:	18d0      	adds	r0, r2, r3
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	005b      	lsls	r3, r3, #1
 8004380:	687a      	ldr	r2, [r7, #4]
 8004382:	18d1      	adds	r1, r2, r3
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	224c      	movs	r2, #76	@ 0x4c
 8004388:	fb02 f303 	mul.w	r3, r2, r3
 800438c:	4a0c      	ldr	r2, [pc, #48]	@ (80043c0 <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 800438e:	4413      	add	r3, r2
 8004390:	461a      	mov	r2, r3
 8004392:	f00d ff55 	bl	8012240 <PDM_Filter>
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 8004396:	697b      	ldr	r3, [r7, #20]
 8004398:	3301      	adds	r3, #1
 800439a:	617b      	str	r3, [r7, #20]
 800439c:	4909      	ldr	r1, [pc, #36]	@ (80043c4 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 800439e:	68fa      	ldr	r2, [r7, #12]
 80043a0:	4613      	mov	r3, r2
 80043a2:	005b      	lsls	r3, r3, #1
 80043a4:	4413      	add	r3, r2
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	440b      	add	r3, r1
 80043aa:	3310      	adds	r3, #16
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	697a      	ldr	r2, [r7, #20]
 80043b0:	429a      	cmp	r2, r3
 80043b2:	d3e0      	bcc.n	8004376 <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 80043b4:	2300      	movs	r3, #0
}
 80043b6:	4618      	mov	r0, r3
 80043b8:	3718      	adds	r7, #24
 80043ba:	46bd      	mov	sp, r7
 80043bc:	bd80      	pop	{r7, pc}
 80043be:	bf00      	nop
 80043c0:	2400a968 	.word	0x2400a968
 80043c4:	2400ab88 	.word	0x2400ab88

080043c8 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes  Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b086      	sub	sp, #24
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	60f8      	str	r0, [r7, #12]
 80043d0:	60b9      	str	r1, [r7, #8]
 80043d2:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80043d4:	2300      	movs	r3, #0
 80043d6:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	2b01      	cmp	r3, #1
 80043dc:	d003      	beq.n	80043e6 <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80043de:	f06f 0301 	mvn.w	r3, #1
 80043e2:	617b      	str	r3, [r7, #20]
 80043e4:	e018      	b.n	8004418 <BSP_AUDIO_IN_RecordPDM+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 80043e6:	490f      	ldr	r1, [pc, #60]	@ (8004424 <BSP_AUDIO_IN_RecordPDM+0x5c>)
 80043e8:	68fa      	ldr	r2, [r7, #12]
 80043ea:	4613      	mov	r3, r2
 80043ec:	005b      	lsls	r3, r3, #1
 80043ee:	4413      	add	r3, r2
 80043f0:	011b      	lsls	r3, r3, #4
 80043f2:	440b      	add	r3, r1
 80043f4:	330c      	adds	r3, #12
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	08db      	lsrs	r3, r3, #3
 80043fa:	687a      	ldr	r2, [r7, #4]
 80043fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004400:	b29b      	uxth	r3, r3
 8004402:	461a      	mov	r2, r3
 8004404:	68b9      	ldr	r1, [r7, #8]
 8004406:	4808      	ldr	r0, [pc, #32]	@ (8004428 <BSP_AUDIO_IN_RecordPDM+0x60>)
 8004408:	f00b fe4e 	bl	80100a8 <HAL_SAI_Receive_DMA>
 800440c:	4603      	mov	r3, r0
 800440e:	2b00      	cmp	r3, #0
 8004410:	d002      	beq.n	8004418 <BSP_AUDIO_IN_RecordPDM+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8004412:	f06f 0303 	mvn.w	r3, #3
 8004416:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 8004418:	697b      	ldr	r3, [r7, #20]
}
 800441a:	4618      	mov	r0, r3
 800441c:	3718      	adds	r7, #24
 800441e:	46bd      	mov	sp, r7
 8004420:	bd80      	pop	{r7, pc}
 8004422:	bf00      	nop
 8004424:	2400ab88 	.word	0x2400ab88
 8004428:	2400aaa8 	.word	0x2400aaa8

0800442c <BSP_AUDIO_IN_GetState>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8004436:	2300      	movs	r3, #0
 8004438:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	2b01      	cmp	r3, #1
 800443e:	d903      	bls.n	8004448 <BSP_AUDIO_IN_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8004440:	f06f 0301 	mvn.w	r3, #1
 8004444:	60fb      	str	r3, [r7, #12]
 8004446:	e00a      	b.n	800445e <BSP_AUDIO_IN_GetState+0x32>
  }
  else
  {
    /* Input State to be returned */
    *State = Audio_In_Ctx[Instance].State;
 8004448:	4908      	ldr	r1, [pc, #32]	@ (800446c <BSP_AUDIO_IN_GetState+0x40>)
 800444a:	687a      	ldr	r2, [r7, #4]
 800444c:	4613      	mov	r3, r2
 800444e:	005b      	lsls	r3, r3, #1
 8004450:	4413      	add	r3, r2
 8004452:	011b      	lsls	r3, r3, #4
 8004454:	440b      	add	r3, r1
 8004456:	3324      	adds	r3, #36	@ 0x24
 8004458:	681a      	ldr	r2, [r3, #0]
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800445e:	68fb      	ldr	r3, [r7, #12]
}
 8004460:	4618      	mov	r0, r3
 8004462:	3714      	adds	r7, #20
 8004464:	46bd      	mov	sp, r7
 8004466:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446a:	4770      	bx	lr
 800446c:	2400ab88 	.word	0x2400ab88

08004470 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_ANALOG_MIC
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b082      	sub	sp, #8
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	2b10      	cmp	r3, #16
 800447e:	d002      	beq.n	8004486 <BSP_AUDIO_IN_IRQHandler+0x16>
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	2b00      	cmp	r3, #0
 8004484:	d105      	bne.n	8004492 <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 8004486:	4b05      	ldr	r3, [pc, #20]	@ (800449c <BSP_AUDIO_IN_IRQHandler+0x2c>)
 8004488:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800448c:	4618      	mov	r0, r3
 800448e:	f004 fe93 	bl	80091b8 <HAL_DMA_IRQHandler>
  }
}
 8004492:	bf00      	nop
 8004494:	3708      	adds	r7, #8
 8004496:	46bd      	mov	sp, r7
 8004498:	bd80      	pop	{r7, pc}
 800449a:	bf00      	nop
 800449c:	2400aaa8 	.word	0x2400aaa8

080044a0 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b082      	sub	sp, #8
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the first half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	4a06      	ldr	r2, [pc, #24]	@ (80044c8 <HAL_SAI_RxHalfCpltCallback+0x28>)
 80044ae:	4293      	cmp	r3, r2
 80044b0:	d103      	bne.n	80044ba <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 80044b2:	2000      	movs	r0, #0
 80044b4:	f7fd ffb8 	bl	8002428 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 80044b8:	e002      	b.n	80044c0 <HAL_SAI_RxHalfCpltCallback+0x20>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f7fd ffb4 	bl	8002428 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 80044c0:	bf00      	nop
 80044c2:	3708      	adds	r7, #8
 80044c4:	46bd      	mov	sp, r7
 80044c6:	bd80      	pop	{r7, pc}
 80044c8:	40015824 	.word	0x40015824

080044cc <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 80044cc:	b580      	push	{r7, lr}
 80044ce:	b082      	sub	sp, #8
 80044d0:	af00      	add	r7, sp, #0
 80044d2:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the second half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a06      	ldr	r2, [pc, #24]	@ (80044f4 <HAL_SAI_RxCpltCallback+0x28>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d103      	bne.n	80044e6 <HAL_SAI_RxCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 80044de:	2000      	movs	r0, #0
 80044e0:	f7fd ff20 	bl	8002324 <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 80044e4:	e002      	b.n	80044ec <HAL_SAI_RxCpltCallback+0x20>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 80044e6:	2001      	movs	r0, #1
 80044e8:	f7fd ff1c 	bl	8002324 <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 80044ec:	bf00      	nop
 80044ee:	3708      	adds	r7, #8
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}
 80044f4:	40015824 	.word	0x40015824

080044f8 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 80044f8:	b580      	push	{r7, lr}
 80044fa:	b088      	sub	sp, #32
 80044fc:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 80044fe:	2300      	movs	r3, #0
 8004500:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 8004502:	2334      	movs	r3, #52	@ 0x34
 8004504:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 8004506:	4b20      	ldr	r3, [pc, #128]	@ (8004588 <WM8994_Probe+0x90>)
 8004508:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800450a:	4b20      	ldr	r3, [pc, #128]	@ (800458c <WM8994_Probe+0x94>)
 800450c:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800450e:	4b20      	ldr	r3, [pc, #128]	@ (8004590 <WM8994_Probe+0x98>)
 8004510:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 8004512:	4b20      	ldr	r3, [pc, #128]	@ (8004594 <WM8994_Probe+0x9c>)
 8004514:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 8004516:	4b20      	ldr	r3, [pc, #128]	@ (8004598 <WM8994_Probe+0xa0>)
 8004518:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	4619      	mov	r1, r3
 800451e:	481f      	ldr	r0, [pc, #124]	@ (800459c <WM8994_Probe+0xa4>)
 8004520:	f7fd fc46 	bl	8001db0 <WM8994_RegisterBusIO>
 8004524:	4603      	mov	r3, r0
 8004526:	2b00      	cmp	r3, #0
 8004528:	d003      	beq.n	8004532 <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800452a:	f06f 0307 	mvn.w	r3, #7
 800452e:	61fb      	str	r3, [r7, #28]
 8004530:	e024      	b.n	800457c <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 8004532:	481a      	ldr	r0, [pc, #104]	@ (800459c <WM8994_Probe+0xa4>)
 8004534:	f7fd fc24 	bl	8001d80 <WM8994_Reset>
 8004538:	4603      	mov	r3, r0
 800453a:	2b00      	cmp	r3, #0
 800453c:	d003      	beq.n	8004546 <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800453e:	f06f 0304 	mvn.w	r3, #4
 8004542:	61fb      	str	r3, [r7, #28]
 8004544:	e01a      	b.n	800457c <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 8004546:	463b      	mov	r3, r7
 8004548:	4619      	mov	r1, r3
 800454a:	4814      	ldr	r0, [pc, #80]	@ (800459c <WM8994_Probe+0xa4>)
 800454c:	f7fc fe13 	bl	8001176 <WM8994_ReadID>
 8004550:	4603      	mov	r3, r0
 8004552:	2b00      	cmp	r3, #0
 8004554:	d003      	beq.n	800455e <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8004556:	f06f 0304 	mvn.w	r3, #4
 800455a:	61fb      	str	r3, [r7, #28]
 800455c:	e00e      	b.n	800457c <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	f648 1294 	movw	r2, #35220	@ 0x8994
 8004564:	4293      	cmp	r3, r2
 8004566:	d003      	beq.n	8004570 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8004568:	f06f 0306 	mvn.w	r3, #6
 800456c:	61fb      	str	r3, [r7, #28]
 800456e:	e005      	b.n	800457c <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 8004570:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <WM8994_Probe+0xa8>)
 8004572:	4a0c      	ldr	r2, [pc, #48]	@ (80045a4 <WM8994_Probe+0xac>)
 8004574:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 8004576:	4b0c      	ldr	r3, [pc, #48]	@ (80045a8 <WM8994_Probe+0xb0>)
 8004578:	4a08      	ldr	r2, [pc, #32]	@ (800459c <WM8994_Probe+0xa4>)
 800457a:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 800457c:	69fb      	ldr	r3, [r7, #28]
}
 800457e:	4618      	mov	r0, r3
 8004580:	3720      	adds	r7, #32
 8004582:	46bd      	mov	sp, r7
 8004584:	bd80      	pop	{r7, pc}
 8004586:	bf00      	nop
 8004588:	08004ae9 	.word	0x08004ae9
 800458c:	08004b5d 	.word	0x08004b5d
 8004590:	08004c85 	.word	0x08004c85
 8004594:	08004c29 	.word	0x08004c29
 8004598:	08004ce1 	.word	0x08004ce1
 800459c:	2400abe8 	.word	0x2400abe8
 80045a0:	2400a964 	.word	0x2400a964
 80045a4:	24000400 	.word	0x24000400
 80045a8:	2400aa0c 	.word	0x2400aa0c

080045ac <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 80045ac:	b580      	push	{r7, lr}
 80045ae:	b098      	sub	sp, #96	@ 0x60
 80045b0:	af00      	add	r7, sp, #0
 80045b2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 80045b4:	4b75      	ldr	r3, [pc, #468]	@ (800478c <SAI_MspInit+0x1e0>)
 80045b6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ba:	4a74      	ldr	r2, [pc, #464]	@ (800478c <SAI_MspInit+0x1e0>)
 80045bc:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80045c0:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80045c4:	4b71      	ldr	r3, [pc, #452]	@ (800478c <SAI_MspInit+0x1e0>)
 80045c6:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80045ca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80045ce:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045d0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
 80045d2:	4b6e      	ldr	r3, [pc, #440]	@ (800478c <SAI_MspInit+0x1e0>)
 80045d4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045d8:	4a6c      	ldr	r2, [pc, #432]	@ (800478c <SAI_MspInit+0x1e0>)
 80045da:	f043 0310 	orr.w	r3, r3, #16
 80045de:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80045e2:	4b6a      	ldr	r3, [pc, #424]	@ (800478c <SAI_MspInit+0x1e0>)
 80045e4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045e8:	f003 0310 	and.w	r3, r3, #16
 80045ec:	647b      	str	r3, [r7, #68]	@ 0x44
 80045ee:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    AUDIO_OUT_SAIx_SD_ENABLE();
 80045f0:	4b66      	ldr	r3, [pc, #408]	@ (800478c <SAI_MspInit+0x1e0>)
 80045f2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80045f6:	4a65      	ldr	r2, [pc, #404]	@ (800478c <SAI_MspInit+0x1e0>)
 80045f8:	f043 0310 	orr.w	r3, r3, #16
 80045fc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004600:	4b62      	ldr	r3, [pc, #392]	@ (800478c <SAI_MspInit+0x1e0>)
 8004602:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004606:	f003 0310 	and.w	r3, r3, #16
 800460a:	643b      	str	r3, [r7, #64]	@ 0x40
 800460c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    AUDIO_OUT_SAIx_FS_ENABLE();
 800460e:	4b5f      	ldr	r3, [pc, #380]	@ (800478c <SAI_MspInit+0x1e0>)
 8004610:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004614:	4a5d      	ldr	r2, [pc, #372]	@ (800478c <SAI_MspInit+0x1e0>)
 8004616:	f043 0310 	orr.w	r3, r3, #16
 800461a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800461e:	4b5b      	ldr	r3, [pc, #364]	@ (800478c <SAI_MspInit+0x1e0>)
 8004620:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004624:	f003 0310 	and.w	r3, r3, #16
 8004628:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800462a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800462c:	2310      	movs	r3, #16
 800462e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004630:	2302      	movs	r3, #2
 8004632:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 8004634:	2300      	movs	r3, #0
 8004636:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004638:	2303      	movs	r3, #3
 800463a:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800463c:	2306      	movs	r3, #6
 800463e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 8004640:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004644:	4619      	mov	r1, r3
 8004646:	4852      	ldr	r0, [pc, #328]	@ (8004790 <SAI_MspInit+0x1e4>)
 8004648:	f006 f99a 	bl	800a980 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800464c:	2320      	movs	r3, #32
 800464e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 8004650:	2306      	movs	r3, #6
 8004652:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 8004654:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004658:	4619      	mov	r1, r3
 800465a:	484d      	ldr	r0, [pc, #308]	@ (8004790 <SAI_MspInit+0x1e4>)
 800465c:	f006 f990 	bl	800a980 <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 8004660:	2340      	movs	r3, #64	@ 0x40
 8004662:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 8004664:	2306      	movs	r3, #6
 8004666:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004668:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800466c:	4619      	mov	r1, r3
 800466e:	4848      	ldr	r0, [pc, #288]	@ (8004790 <SAI_MspInit+0x1e4>)
 8004670:	f006 f986 	bl	800a980 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a46      	ldr	r2, [pc, #280]	@ (8004794 <SAI_MspInit+0x1e8>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d01e      	beq.n	80046bc <SAI_MspInit+0x110>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 800467e:	4b46      	ldr	r3, [pc, #280]	@ (8004798 <SAI_MspInit+0x1ec>)
 8004680:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 8004684:	b2db      	uxtb	r3, r3
 8004686:	2b01      	cmp	r3, #1
 8004688:	d018      	beq.n	80046bc <SAI_MspInit+0x110>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800468a:	4b40      	ldr	r3, [pc, #256]	@ (800478c <SAI_MspInit+0x1e0>)
 800468c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004690:	4a3e      	ldr	r2, [pc, #248]	@ (800478c <SAI_MspInit+0x1e0>)
 8004692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004696:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800469a:	4b3c      	ldr	r3, [pc, #240]	@ (800478c <SAI_MspInit+0x1e0>)
 800469c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046a4:	63bb      	str	r3, [r7, #56]	@ 0x38
 80046a6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 80046a8:	2380      	movs	r3, #128	@ 0x80
 80046aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 80046ac:	2306      	movs	r3, #6
 80046ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 80046b0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80046b4:	4619      	mov	r1, r3
 80046b6:	4839      	ldr	r0, [pc, #228]	@ (800479c <SAI_MspInit+0x1f0>)
 80046b8:	f006 f962 	bl	800a980 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	4a37      	ldr	r2, [pc, #220]	@ (80047a0 <SAI_MspInit+0x1f4>)
 80046c2:	4293      	cmp	r3, r2
 80046c4:	f040 80b3 	bne.w	800482e <SAI_MspInit+0x282>
  {

	    /* Enable SAI clock */
    __HAL_RCC_SAI1_CLK_ENABLE();
 80046c8:	4b30      	ldr	r3, [pc, #192]	@ (800478c <SAI_MspInit+0x1e0>)
 80046ca:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046ce:	4a2f      	ldr	r2, [pc, #188]	@ (800478c <SAI_MspInit+0x1e0>)
 80046d0:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80046d4:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80046d8:	4b2c      	ldr	r3, [pc, #176]	@ (800478c <SAI_MspInit+0x1e0>)
 80046da:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80046de:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80046e2:	637b      	str	r3, [r7, #52]	@ 0x34
 80046e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

  /* CODEC_SAI pins configuration: FS, SCK and SD pins */
  /* Enable FS, SCK and SD clocks */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 80046e6:	4b29      	ldr	r3, [pc, #164]	@ (800478c <SAI_MspInit+0x1e0>)
 80046e8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046ec:	4a27      	ldr	r2, [pc, #156]	@ (800478c <SAI_MspInit+0x1e0>)
 80046ee:	f043 0310 	orr.w	r3, r3, #16
 80046f2:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80046f6:	4b25      	ldr	r3, [pc, #148]	@ (800478c <SAI_MspInit+0x1e0>)
 80046f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80046fc:	f003 0310 	and.w	r3, r3, #16
 8004700:	633b      	str	r3, [r7, #48]	@ 0x30
 8004702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  /* Enable FS, SCK and SD pins */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 8004704:	2370      	movs	r3, #112	@ 0x70
 8004706:	64fb      	str	r3, [r7, #76]	@ 0x4c
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004708:	2302      	movs	r3, #2
 800470a:	653b      	str	r3, [r7, #80]	@ 0x50
  gpio_init_structure.Pull = GPIO_NOPULL;
 800470c:	2300      	movs	r3, #0
 800470e:	657b      	str	r3, [r7, #84]	@ 0x54
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004710:	2303      	movs	r3, #3
 8004712:	65bb      	str	r3, [r7, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 8004714:	2306      	movs	r3, #6
 8004716:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 8004718:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800471c:	4619      	mov	r1, r3
 800471e:	481c      	ldr	r0, [pc, #112]	@ (8004790 <SAI_MspInit+0x1e4>)
 8004720:	f006 f92e 	bl	800a980 <HAL_GPIO_Init>

  /* Enable MCLK clock */
   __HAL_RCC_GPIOG_CLK_ENABLE();
 8004724:	4b19      	ldr	r3, [pc, #100]	@ (800478c <SAI_MspInit+0x1e0>)
 8004726:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800472a:	4a18      	ldr	r2, [pc, #96]	@ (800478c <SAI_MspInit+0x1e0>)
 800472c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004730:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004734:	4b15      	ldr	r3, [pc, #84]	@ (800478c <SAI_MspInit+0x1e0>)
 8004736:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800473a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800473e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Enable MCLK pin */
  gpio_init_structure.Pin = GPIO_PIN_7;
 8004742:	2380      	movs	r3, #128	@ 0x80
 8004744:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8004746:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800474a:	4619      	mov	r1, r3
 800474c:	4813      	ldr	r0, [pc, #76]	@ (800479c <SAI_MspInit+0x1f0>)
 800474e:	f006 f917 	bl	800a980 <HAL_GPIO_Init>


    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 8004752:	4b0e      	ldr	r3, [pc, #56]	@ (800478c <SAI_MspInit+0x1e0>)
 8004754:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004758:	4a0c      	ldr	r2, [pc, #48]	@ (800478c <SAI_MspInit+0x1e0>)
 800475a:	f043 0302 	orr.w	r3, r3, #2
 800475e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004762:	4b0a      	ldr	r3, [pc, #40]	@ (800478c <SAI_MspInit+0x1e0>)
 8004764:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004768:	f003 0302 	and.w	r3, r3, #2
 800476c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800476e:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure the hdma_saiTx handle parameters */
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 8004770:	4b0c      	ldr	r3, [pc, #48]	@ (80047a4 <SAI_MspInit+0x1f8>)
 8004772:	68db      	ldr	r3, [r3, #12]
 8004774:	2b10      	cmp	r3, #16
 8004776:	d119      	bne.n	80047ac <SAI_MspInit+0x200>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8004778:	4b0b      	ldr	r3, [pc, #44]	@ (80047a8 <SAI_MspInit+0x1fc>)
 800477a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800477e:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 8004780:	4b09      	ldr	r3, [pc, #36]	@ (80047a8 <SAI_MspInit+0x1fc>)
 8004782:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004786:	619a      	str	r2, [r3, #24]
 8004788:	e018      	b.n	80047bc <SAI_MspInit+0x210>
 800478a:	bf00      	nop
 800478c:	58024400 	.word	0x58024400
 8004790:	58021000 	.word	0x58021000
 8004794:	58005404 	.word	0x58005404
 8004798:	2400aaa8 	.word	0x2400aaa8
 800479c:	58021800 	.word	0x58021800
 80047a0:	40015804 	.word	0x40015804
 80047a4:	2400ab40 	.word	0x2400ab40
 80047a8:	2400ac10 	.word	0x2400ac10
    }
    else
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80047ac:	4baf      	ldr	r3, [pc, #700]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80047b2:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 80047b4:	4bad      	ldr	r3, [pc, #692]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047b6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80047ba:	619a      	str	r2, [r3, #24]
    }

    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 80047bc:	4bab      	ldr	r3, [pc, #684]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047be:	2257      	movs	r2, #87	@ 0x57
 80047c0:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 80047c2:	4baa      	ldr	r3, [pc, #680]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047c4:	2200      	movs	r2, #0
 80047c6:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 80047c8:	4ba8      	ldr	r3, [pc, #672]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80047ce:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 80047d0:	4ba6      	ldr	r3, [pc, #664]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047d2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80047d6:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 80047d8:	4ba4      	ldr	r3, [pc, #656]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047da:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 80047de:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 80047e0:	4ba2      	ldr	r3, [pc, #648]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047e2:	2204      	movs	r2, #4
 80047e4:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 80047e6:	4ba1      	ldr	r3, [pc, #644]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047e8:	2203      	movs	r2, #3
 80047ea:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 80047ec:	4b9f      	ldr	r3, [pc, #636]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047ee:	2240      	movs	r2, #64	@ 0x40
 80047f0:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 80047f2:	4b9e      	ldr	r3, [pc, #632]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047f4:	4a9e      	ldr	r2, [pc, #632]	@ (8004a70 <SAI_MspInit+0x4c4>)
 80047f6:	601a      	str	r2, [r3, #0]
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 80047f8:	4b9c      	ldr	r3, [pc, #624]	@ (8004a6c <SAI_MspInit+0x4c0>)
 80047fa:	2200      	movs	r2, #0
 80047fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 80047fe:	4b9b      	ldr	r3, [pc, #620]	@ (8004a6c <SAI_MspInit+0x4c0>)
 8004800:	2200      	movs	r2, #0
 8004802:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	4a99      	ldr	r2, [pc, #612]	@ (8004a6c <SAI_MspInit+0x4c0>)
 8004808:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800480c:	4a97      	ldr	r2, [pc, #604]	@ (8004a6c <SAI_MspInit+0x4c0>)
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 8004812:	4896      	ldr	r0, [pc, #600]	@ (8004a6c <SAI_MspInit+0x4c0>)
 8004814:	f004 f8b0 	bl	8008978 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 8004818:	4894      	ldr	r0, [pc, #592]	@ (8004a6c <SAI_MspInit+0x4c0>)
 800481a:	f003 fd51 	bl	80082c0 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 800481e:	2200      	movs	r2, #0
 8004820:	210e      	movs	r1, #14
 8004822:	2039      	movs	r0, #57	@ 0x39
 8004824:	f003 fc9f 	bl	8008166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 8004828:	2039      	movs	r0, #57	@ 0x39
 800482a:	f003 fcb6 	bl	800819a <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	4a90      	ldr	r2, [pc, #576]	@ (8004a74 <SAI_MspInit+0x4c8>)
 8004834:	4293      	cmp	r3, r2
 8004836:	f040 80b8 	bne.w	80049aa <SAI_MspInit+0x3fe>
  {
     /* Enable SAI clock */
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800483a:	4b8f      	ldr	r3, [pc, #572]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800483c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004840:	4a8d      	ldr	r2, [pc, #564]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004842:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004846:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800484a:	4b8b      	ldr	r3, [pc, #556]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800484c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8004850:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004854:	627b      	str	r3, [r7, #36]	@ 0x24
 8004856:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 8004858:	4b87      	ldr	r3, [pc, #540]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800485a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800485e:	4a86      	ldr	r2, [pc, #536]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004860:	f043 0310 	orr.w	r3, r3, #16
 8004864:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004868:	4b83      	ldr	r3, [pc, #524]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800486a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800486e:	f003 0310 	and.w	r3, r3, #16
 8004872:	623b      	str	r3, [r7, #32]
 8004874:	6a3b      	ldr	r3, [r7, #32]
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 8004876:	4b80      	ldr	r3, [pc, #512]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004878:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800487c:	4a7e      	ldr	r2, [pc, #504]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800487e:	f043 0304 	orr.w	r3, r3, #4
 8004882:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8004886:	4b7c      	ldr	r3, [pc, #496]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004888:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800488c:	f003 0304 	and.w	r3, r3, #4
 8004890:	61fb      	str	r3, [r7, #28]
 8004892:	69fb      	ldr	r3, [r7, #28]

     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 8004894:	2304      	movs	r3, #4
 8004896:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 8004898:	2302      	movs	r3, #2
 800489a:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 800489c:	2300      	movs	r3, #0
 800489e:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80048a0:	2302      	movs	r3, #2
 80048a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 80048a4:	230a      	movs	r3, #10
 80048a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 80048a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80048ac:	4619      	mov	r1, r3
 80048ae:	4873      	ldr	r0, [pc, #460]	@ (8004a7c <SAI_MspInit+0x4d0>)
 80048b0:	f006 f866 	bl	800a980 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 80048b4:	2301      	movs	r3, #1
 80048b6:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 80048b8:	2301      	movs	r3, #1
 80048ba:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 80048bc:	2302      	movs	r3, #2
 80048be:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 80048c0:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 80048c4:	4619      	mov	r1, r3
 80048c6:	486e      	ldr	r0, [pc, #440]	@ (8004a80 <SAI_MspInit+0x4d4>)
 80048c8:	f006 f85a 	bl	800a980 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 80048cc:	4b6a      	ldr	r3, [pc, #424]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80048ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048d2:	4a69      	ldr	r2, [pc, #420]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80048d4:	f043 0310 	orr.w	r3, r3, #16
 80048d8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80048dc:	4b66      	ldr	r3, [pc, #408]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80048de:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80048e2:	f003 0310 	and.w	r3, r3, #16
 80048e6:	61bb      	str	r3, [r7, #24]
 80048e8:	69bb      	ldr	r3, [r7, #24]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 80048ea:	2330      	movs	r3, #48	@ 0x30
 80048ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80048ee:	2302      	movs	r3, #2
 80048f0:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 80048f2:	2300      	movs	r3, #0
 80048f4:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80048f6:	2302      	movs	r3, #2
 80048f8:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 80048fa:	2308      	movs	r3, #8
 80048fc:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 80048fe:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004902:	4619      	mov	r1, r3
 8004904:	485d      	ldr	r0, [pc, #372]	@ (8004a7c <SAI_MspInit+0x4d0>)
 8004906:	f006 f83b 	bl	800a980 <HAL_GPIO_Init>

    /* Enable the DMA clock */
      __HAL_RCC_BDMA_CLK_ENABLE();
 800490a:	4b5b      	ldr	r3, [pc, #364]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800490c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004910:	4a59      	ldr	r2, [pc, #356]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004912:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004916:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800491a:	4b57      	ldr	r3, [pc, #348]	@ (8004a78 <SAI_MspInit+0x4cc>)
 800491c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8004920:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004924:	617b      	str	r3, [r7, #20]
 8004926:	697b      	ldr	r3, [r7, #20]
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 8004928:	4b56      	ldr	r3, [pc, #344]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800492a:	220f      	movs	r2, #15
 800492c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800492e:	4b55      	ldr	r3, [pc, #340]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004930:	2200      	movs	r2, #0
 8004932:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004934:	4b53      	ldr	r3, [pc, #332]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004936:	2200      	movs	r2, #0
 8004938:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800493a:	4b52      	ldr	r3, [pc, #328]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800493c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004940:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 8004942:	4b50      	ldr	r3, [pc, #320]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004944:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004948:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 800494a:	4b4e      	ldr	r3, [pc, #312]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800494c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004950:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004952:	4b4c      	ldr	r3, [pc, #304]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004954:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004958:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800495a:	4b4a      	ldr	r3, [pc, #296]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800495c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004960:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004962:	4b48      	ldr	r3, [pc, #288]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004964:	2200      	movs	r2, #0
 8004966:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004968:	4b46      	ldr	r3, [pc, #280]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800496a:	2203      	movs	r2, #3
 800496c:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800496e:	4b45      	ldr	r3, [pc, #276]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004970:	2200      	movs	r2, #0
 8004972:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004974:	4b43      	ldr	r3, [pc, #268]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004976:	2200      	movs	r2, #0
 8004978:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 800497a:	4b42      	ldr	r3, [pc, #264]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800497c:	4a42      	ldr	r2, [pc, #264]	@ (8004a88 <SAI_MspInit+0x4dc>)
 800497e:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	4a40      	ldr	r2, [pc, #256]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004984:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004988:	4a3e      	ldr	r2, [pc, #248]	@ (8004a84 <SAI_MspInit+0x4d8>)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800498e:	483d      	ldr	r0, [pc, #244]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004990:	f003 fff2 	bl	8008978 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004994:	483b      	ldr	r0, [pc, #236]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004996:	f003 fc93 	bl	80082c0 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800499a:	2200      	movs	r2, #0
 800499c:	210f      	movs	r1, #15
 800499e:	2082      	movs	r0, #130	@ 0x82
 80049a0:	f003 fbe1 	bl	8008166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 80049a4:	2082      	movs	r0, #130	@ 0x82
 80049a6:	f003 fbf8 	bl	800819a <HAL_NVIC_EnableIRQ>
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	4a37      	ldr	r2, [pc, #220]	@ (8004a8c <SAI_MspInit+0x4e0>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	f040 8091 	bne.w	8004ad8 <SAI_MspInit+0x52c>
  {
        /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 80049b6:	4b30      	ldr	r3, [pc, #192]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80049b8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049bc:	4a2e      	ldr	r2, [pc, #184]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80049be:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80049c2:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 80049c6:	4b2c      	ldr	r3, [pc, #176]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80049c8:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 80049cc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049d0:	613b      	str	r3, [r7, #16]
 80049d2:	693b      	ldr	r3, [r7, #16]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 80049d4:	4b28      	ldr	r3, [pc, #160]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80049d6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049da:	4a27      	ldr	r2, [pc, #156]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80049dc:	f043 0310 	orr.w	r3, r3, #16
 80049e0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80049e4:	4b24      	ldr	r3, [pc, #144]	@ (8004a78 <SAI_MspInit+0x4cc>)
 80049e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80049ea:	f003 0310 	and.w	r3, r3, #16
 80049ee:	60fb      	str	r3, [r7, #12]
 80049f0:	68fb      	ldr	r3, [r7, #12]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 80049f2:	2308      	movs	r3, #8
 80049f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 80049f6:	2302      	movs	r3, #2
 80049f8:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 80049fa:	2300      	movs	r3, #0
 80049fc:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 80049fe:	2302      	movs	r3, #2
 8004a00:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 8004a02:	2306      	movs	r3, #6
 8004a04:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 8004a06:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 8004a0a:	4619      	mov	r1, r3
 8004a0c:	481b      	ldr	r0, [pc, #108]	@ (8004a7c <SAI_MspInit+0x4d0>)
 8004a0e:	f005 ffb7 	bl	800a980 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 8004a12:	4b19      	ldr	r3, [pc, #100]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004a14:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a18:	4a17      	ldr	r2, [pc, #92]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004a1a:	f043 0302 	orr.w	r3, r3, #2
 8004a1e:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 8004a22:	4b15      	ldr	r3, [pc, #84]	@ (8004a78 <SAI_MspInit+0x4cc>)
 8004a24:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 8004a28:	f003 0302 	and.w	r3, r3, #2
 8004a2c:	60bb      	str	r3, [r7, #8]
 8004a2e:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 8004a30:	4b14      	ldr	r3, [pc, #80]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a32:	2258      	movs	r2, #88	@ 0x58
 8004a34:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 8004a36:	4b13      	ldr	r3, [pc, #76]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a38:	2200      	movs	r2, #0
 8004a3a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 8004a3c:	4b11      	ldr	r3, [pc, #68]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a3e:	2200      	movs	r2, #0
 8004a40:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 8004a42:	4b10      	ldr	r3, [pc, #64]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a44:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8004a48:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 8004a4a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a4c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8004a50:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 8004a52:	4b0c      	ldr	r3, [pc, #48]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a54:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004a58:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 8004a5a:	4b0a      	ldr	r3, [pc, #40]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a5c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004a60:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 8004a62:	4b08      	ldr	r3, [pc, #32]	@ (8004a84 <SAI_MspInit+0x4d8>)
 8004a64:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 8004a68:	621a      	str	r2, [r3, #32]
 8004a6a:	e011      	b.n	8004a90 <SAI_MspInit+0x4e4>
 8004a6c:	2400ac10 	.word	0x2400ac10
 8004a70:	40020428 	.word	0x40020428
 8004a74:	58005404 	.word	0x58005404
 8004a78:	58024400 	.word	0x58024400
 8004a7c:	58021000 	.word	0x58021000
 8004a80:	58020800 	.word	0x58020800
 8004a84:	2400ac88 	.word	0x2400ac88
 8004a88:	5802541c 	.word	0x5802541c
 8004a8c:	40015824 	.word	0x40015824
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 8004a90:	4b13      	ldr	r3, [pc, #76]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004a92:	2200      	movs	r2, #0
 8004a94:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 8004a96:	4b12      	ldr	r3, [pc, #72]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004a98:	2203      	movs	r2, #3
 8004a9a:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 8004a9c:	4b10      	ldr	r3, [pc, #64]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 8004aa2:	4b0f      	ldr	r3, [pc, #60]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 8004aa8:	4b0d      	ldr	r3, [pc, #52]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004aaa:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae4 <SAI_MspInit+0x538>)
 8004aac:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	4a0b      	ldr	r2, [pc, #44]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004ab2:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 8004ab6:	4a0a      	ldr	r2, [pc, #40]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 8004abc:	4808      	ldr	r0, [pc, #32]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004abe:	f003 ff5b 	bl	8008978 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 8004ac2:	4807      	ldr	r0, [pc, #28]	@ (8004ae0 <SAI_MspInit+0x534>)
 8004ac4:	f003 fbfc 	bl	80082c0 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 8004ac8:	2200      	movs	r2, #0
 8004aca:	210f      	movs	r1, #15
 8004acc:	203c      	movs	r0, #60	@ 0x3c
 8004ace:	f003 fb4a 	bl	8008166 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 8004ad2:	203c      	movs	r0, #60	@ 0x3c
 8004ad4:	f003 fb61 	bl	800819a <HAL_NVIC_EnableIRQ>

  }
}
 8004ad8:	bf00      	nop
 8004ada:	3760      	adds	r7, #96	@ 0x60
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd80      	pop	{r7, pc}
 8004ae0:	2400ac88 	.word	0x2400ac88
 8004ae4:	40020470 	.word	0x40020470

08004ae8 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b082      	sub	sp, #8
 8004aec:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 8004aee:	2300      	movs	r3, #0
 8004af0:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 8004af2:	4b16      	ldr	r3, [pc, #88]	@ (8004b4c <BSP_I2C4_Init+0x64>)
 8004af4:	4a16      	ldr	r2, [pc, #88]	@ (8004b50 <BSP_I2C4_Init+0x68>)
 8004af6:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 8004af8:	4b16      	ldr	r3, [pc, #88]	@ (8004b54 <BSP_I2C4_Init+0x6c>)
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	d11f      	bne.n	8004b40 <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 8004b00:	4b14      	ldr	r3, [pc, #80]	@ (8004b54 <BSP_I2C4_Init+0x6c>)
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	3301      	adds	r3, #1
 8004b06:	4a13      	ldr	r2, [pc, #76]	@ (8004b54 <BSP_I2C4_Init+0x6c>)
 8004b08:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 8004b0a:	4810      	ldr	r0, [pc, #64]	@ (8004b4c <BSP_I2C4_Init+0x64>)
 8004b0c:	f006 fd2e 	bl	800b56c <HAL_I2C_GetState>
 8004b10:	4603      	mov	r3, r0
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d114      	bne.n	8004b40 <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 8004b16:	480d      	ldr	r0, [pc, #52]	@ (8004b4c <BSP_I2C4_Init+0x64>)
 8004b18:	f000 fb60 	bl	80051dc <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 8004b1c:	f008 f86a 	bl	800cbf4 <HAL_RCC_GetPCLK2Freq>
 8004b20:	4603      	mov	r3, r0
 8004b22:	490d      	ldr	r1, [pc, #52]	@ (8004b58 <BSP_I2C4_Init+0x70>)
 8004b24:	4618      	mov	r0, r3
 8004b26:	f000 f8e3 	bl	8004cf0 <I2C_GetTiming>
 8004b2a:	4603      	mov	r3, r0
 8004b2c:	4619      	mov	r1, r3
 8004b2e:	4807      	ldr	r0, [pc, #28]	@ (8004b4c <BSP_I2C4_Init+0x64>)
 8004b30:	f000 f838 	bl	8004ba4 <MX_I2C4_Init>
 8004b34:	4603      	mov	r3, r0
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d002      	beq.n	8004b40 <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 8004b3a:	f06f 0307 	mvn.w	r3, #7
 8004b3e:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 8004b40:	687b      	ldr	r3, [r7, #4]
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	3708      	adds	r7, #8
 8004b46:	46bd      	mov	sp, r7
 8004b48:	bd80      	pop	{r7, pc}
 8004b4a:	bf00      	nop
 8004b4c:	2400b708 	.word	0x2400b708
 8004b50:	58001c00 	.word	0x58001c00
 8004b54:	2400ad00 	.word	0x2400ad00
 8004b58:	000186a0 	.word	0x000186a0

08004b5c <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b082      	sub	sp, #8
 8004b60:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 8004b62:	2300      	movs	r3, #0
 8004b64:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 8004b66:	4b0d      	ldr	r3, [pc, #52]	@ (8004b9c <BSP_I2C4_DeInit+0x40>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	4a0b      	ldr	r2, [pc, #44]	@ (8004b9c <BSP_I2C4_DeInit+0x40>)
 8004b6e:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 8004b70:	4b0a      	ldr	r3, [pc, #40]	@ (8004b9c <BSP_I2C4_DeInit+0x40>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	2b00      	cmp	r3, #0
 8004b76:	d10b      	bne.n	8004b90 <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 8004b78:	4809      	ldr	r0, [pc, #36]	@ (8004ba0 <BSP_I2C4_DeInit+0x44>)
 8004b7a:	f000 fb9b 	bl	80052b4 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 8004b7e:	4808      	ldr	r0, [pc, #32]	@ (8004ba0 <BSP_I2C4_DeInit+0x44>)
 8004b80:	f006 fa82 	bl	800b088 <HAL_I2C_DeInit>
 8004b84:	4603      	mov	r3, r0
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8004b8a:	f06f 0307 	mvn.w	r3, #7
 8004b8e:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 8004b90:	687b      	ldr	r3, [r7, #4]
}
 8004b92:	4618      	mov	r0, r3
 8004b94:	3708      	adds	r7, #8
 8004b96:	46bd      	mov	sp, r7
 8004b98:	bd80      	pop	{r7, pc}
 8004b9a:	bf00      	nop
 8004b9c:	2400ad00 	.word	0x2400ad00
 8004ba0:	2400b708 	.word	0x2400b708

08004ba4 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	b084      	sub	sp, #16
 8004ba8:	af00      	add	r7, sp, #0
 8004baa:	6078      	str	r0, [r7, #4]
 8004bac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	683a      	ldr	r2, [r7, #0]
 8004bb6:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	2200      	movs	r2, #0
 8004bbc:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2201      	movs	r2, #1
 8004bc2:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2200      	movs	r2, #0
 8004bce:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	2200      	movs	r2, #0
 8004bda:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2200      	movs	r2, #0
 8004be0:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f006 f9b4 	bl	800af50 <HAL_I2C_Init>
 8004be8:	4603      	mov	r3, r0
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d002      	beq.n	8004bf4 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	73fb      	strb	r3, [r7, #15]
 8004bf2:	e014      	b.n	8004c1e <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 8004bf4:	2300      	movs	r3, #0
 8004bf6:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	6878      	ldr	r0, [r7, #4]
 8004bfc:	f006 ff92 	bl	800bb24 <HAL_I2CEx_ConfigAnalogFilter>
 8004c00:	4603      	mov	r3, r0
 8004c02:	2b00      	cmp	r3, #0
 8004c04:	d002      	beq.n	8004c0c <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	73fb      	strb	r3, [r7, #15]
 8004c0a:	e008      	b.n	8004c1e <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 8004c0c:	2100      	movs	r1, #0
 8004c0e:	6878      	ldr	r0, [r7, #4]
 8004c10:	f006 ffd3 	bl	800bbba <HAL_I2CEx_ConfigDigitalFilter>
 8004c14:	4603      	mov	r3, r0
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d001      	beq.n	8004c1e <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 8004c1a:	2301      	movs	r3, #1
 8004c1c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 8004c1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004c20:	4618      	mov	r0, r3
 8004c22:	3710      	adds	r7, #16
 8004c24:	46bd      	mov	sp, r7
 8004c26:	bd80      	pop	{r7, pc}

08004c28 <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b088      	sub	sp, #32
 8004c2c:	af02      	add	r7, sp, #8
 8004c2e:	60ba      	str	r2, [r7, #8]
 8004c30:	461a      	mov	r2, r3
 8004c32:	4603      	mov	r3, r0
 8004c34:	81fb      	strh	r3, [r7, #14]
 8004c36:	460b      	mov	r3, r1
 8004c38:	81bb      	strh	r3, [r7, #12]
 8004c3a:	4613      	mov	r3, r2
 8004c3c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8004c3e:	89b9      	ldrh	r1, [r7, #12]
 8004c40:	89f8      	ldrh	r0, [r7, #14]
 8004c42:	88fb      	ldrh	r3, [r7, #6]
 8004c44:	9300      	str	r3, [sp, #0]
 8004c46:	68bb      	ldr	r3, [r7, #8]
 8004c48:	2202      	movs	r2, #2
 8004c4a:	f000 fb57 	bl	80052fc <I2C4_WriteReg>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d102      	bne.n	8004c5a <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004c54:	2300      	movs	r3, #0
 8004c56:	617b      	str	r3, [r7, #20]
 8004c58:	e00c      	b.n	8004c74 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004c5a:	4809      	ldr	r0, [pc, #36]	@ (8004c80 <BSP_I2C4_WriteReg16+0x58>)
 8004c5c:	f006 fc94 	bl	800b588 <HAL_I2C_GetError>
 8004c60:	4603      	mov	r3, r0
 8004c62:	2b04      	cmp	r3, #4
 8004c64:	d103      	bne.n	8004c6e <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004c66:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8004c6a:	617b      	str	r3, [r7, #20]
 8004c6c:	e002      	b.n	8004c74 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004c6e:	f06f 0303 	mvn.w	r3, #3
 8004c72:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8004c74:	697b      	ldr	r3, [r7, #20]
}
 8004c76:	4618      	mov	r0, r3
 8004c78:	3718      	adds	r7, #24
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	bd80      	pop	{r7, pc}
 8004c7e:	bf00      	nop
 8004c80:	2400b708 	.word	0x2400b708

08004c84 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004c84:	b580      	push	{r7, lr}
 8004c86:	b088      	sub	sp, #32
 8004c88:	af02      	add	r7, sp, #8
 8004c8a:	60ba      	str	r2, [r7, #8]
 8004c8c:	461a      	mov	r2, r3
 8004c8e:	4603      	mov	r3, r0
 8004c90:	81fb      	strh	r3, [r7, #14]
 8004c92:	460b      	mov	r3, r1
 8004c94:	81bb      	strh	r3, [r7, #12]
 8004c96:	4613      	mov	r3, r2
 8004c98:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 8004c9a:	89b9      	ldrh	r1, [r7, #12]
 8004c9c:	89f8      	ldrh	r0, [r7, #14]
 8004c9e:	88fb      	ldrh	r3, [r7, #6]
 8004ca0:	9300      	str	r3, [sp, #0]
 8004ca2:	68bb      	ldr	r3, [r7, #8]
 8004ca4:	2202      	movs	r2, #2
 8004ca6:	f000 fb4f 	bl	8005348 <I2C4_ReadReg>
 8004caa:	4603      	mov	r3, r0
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d102      	bne.n	8004cb6 <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 8004cb0:	2300      	movs	r3, #0
 8004cb2:	617b      	str	r3, [r7, #20]
 8004cb4:	e00c      	b.n	8004cd0 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 8004cb6:	4809      	ldr	r0, [pc, #36]	@ (8004cdc <BSP_I2C4_ReadReg16+0x58>)
 8004cb8:	f006 fc66 	bl	800b588 <HAL_I2C_GetError>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	2b04      	cmp	r3, #4
 8004cc0:	d103      	bne.n	8004cca <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 8004cc2:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 8004cc6:	617b      	str	r3, [r7, #20]
 8004cc8:	e002      	b.n	8004cd0 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 8004cca:	f06f 0303 	mvn.w	r3, #3
 8004cce:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 8004cd0:	697b      	ldr	r3, [r7, #20]
}
 8004cd2:	4618      	mov	r0, r3
 8004cd4:	3718      	adds	r7, #24
 8004cd6:	46bd      	mov	sp, r7
 8004cd8:	bd80      	pop	{r7, pc}
 8004cda:	bf00      	nop
 8004cdc:	2400b708 	.word	0x2400b708

08004ce0 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 8004ce0:	b580      	push	{r7, lr}
 8004ce2:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 8004ce4:	f003 f918 	bl	8007f18 <HAL_GetTick>
 8004ce8:	4603      	mov	r3, r0
}
 8004cea:	4618      	mov	r0, r3
 8004cec:	bd80      	pop	{r7, pc}
	...

08004cf0 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 8004cf0:	b580      	push	{r7, lr}
 8004cf2:	b086      	sub	sp, #24
 8004cf4:	af00      	add	r7, sp, #0
 8004cf6:	6078      	str	r0, [r7, #4]
 8004cf8:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 8004cfa:	2300      	movs	r3, #0
 8004cfc:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d06b      	beq.n	8004ddc <I2C_GetTiming+0xec>
 8004d04:	683b      	ldr	r3, [r7, #0]
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d068      	beq.n	8004ddc <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004d0a:	2300      	movs	r3, #0
 8004d0c:	613b      	str	r3, [r7, #16]
 8004d0e:	e060      	b.n	8004dd2 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004d10:	4a35      	ldr	r2, [pc, #212]	@ (8004de8 <I2C_GetTiming+0xf8>)
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	212c      	movs	r1, #44	@ 0x2c
 8004d16:	fb01 f303 	mul.w	r3, r1, r3
 8004d1a:	4413      	add	r3, r2
 8004d1c:	3304      	adds	r3, #4
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	683a      	ldr	r2, [r7, #0]
 8004d22:	429a      	cmp	r2, r3
 8004d24:	d352      	bcc.n	8004dcc <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 8004d26:	4a30      	ldr	r2, [pc, #192]	@ (8004de8 <I2C_GetTiming+0xf8>)
 8004d28:	693b      	ldr	r3, [r7, #16]
 8004d2a:	212c      	movs	r1, #44	@ 0x2c
 8004d2c:	fb01 f303 	mul.w	r3, r1, r3
 8004d30:	4413      	add	r3, r2
 8004d32:	3308      	adds	r3, #8
 8004d34:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 8004d36:	683a      	ldr	r2, [r7, #0]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d847      	bhi.n	8004dcc <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 8004d3c:	6939      	ldr	r1, [r7, #16]
 8004d3e:	6878      	ldr	r0, [r7, #4]
 8004d40:	f000 f856 	bl	8004df0 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 8004d44:	6939      	ldr	r1, [r7, #16]
 8004d46:	6878      	ldr	r0, [r7, #4]
 8004d48:	f000 f940 	bl	8004fcc <I2C_Compute_SCLL_SCLH>
 8004d4c:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	2b7f      	cmp	r3, #127	@ 0x7f
 8004d52:	d842      	bhi.n	8004dda <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004d54:	4925      	ldr	r1, [pc, #148]	@ (8004dec <I2C_GetTiming+0xfc>)
 8004d56:	68fa      	ldr	r2, [r7, #12]
 8004d58:	4613      	mov	r3, r2
 8004d5a:	009b      	lsls	r3, r3, #2
 8004d5c:	4413      	add	r3, r2
 8004d5e:	009b      	lsls	r3, r3, #2
 8004d60:	440b      	add	r3, r1
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004d66:	4821      	ldr	r0, [pc, #132]	@ (8004dec <I2C_GetTiming+0xfc>)
 8004d68:	68fa      	ldr	r2, [r7, #12]
 8004d6a:	4613      	mov	r3, r2
 8004d6c:	009b      	lsls	r3, r3, #2
 8004d6e:	4413      	add	r3, r2
 8004d70:	009b      	lsls	r3, r3, #2
 8004d72:	4403      	add	r3, r0
 8004d74:	3304      	adds	r3, #4
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	051b      	lsls	r3, r3, #20
 8004d7a:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004d7e:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004d80:	481a      	ldr	r0, [pc, #104]	@ (8004dec <I2C_GetTiming+0xfc>)
 8004d82:	68fa      	ldr	r2, [r7, #12]
 8004d84:	4613      	mov	r3, r2
 8004d86:	009b      	lsls	r3, r3, #2
 8004d88:	4413      	add	r3, r2
 8004d8a:	009b      	lsls	r3, r3, #2
 8004d8c:	4403      	add	r3, r0
 8004d8e:	3308      	adds	r3, #8
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	041b      	lsls	r3, r3, #16
 8004d94:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 8004d98:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 8004d9a:	4814      	ldr	r0, [pc, #80]	@ (8004dec <I2C_GetTiming+0xfc>)
 8004d9c:	68fa      	ldr	r2, [r7, #12]
 8004d9e:	4613      	mov	r3, r2
 8004da0:	009b      	lsls	r3, r3, #2
 8004da2:	4413      	add	r3, r2
 8004da4:	009b      	lsls	r3, r3, #2
 8004da6:	4403      	add	r3, r0
 8004da8:	330c      	adds	r3, #12
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	021b      	lsls	r3, r3, #8
 8004dae:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 8004db0:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 8004db2:	480e      	ldr	r0, [pc, #56]	@ (8004dec <I2C_GetTiming+0xfc>)
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	4613      	mov	r3, r2
 8004db8:	009b      	lsls	r3, r3, #2
 8004dba:	4413      	add	r3, r2
 8004dbc:	009b      	lsls	r3, r3, #2
 8004dbe:	4403      	add	r3, r0
 8004dc0:	3310      	adds	r3, #16
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 8004dc6:	430b      	orrs	r3, r1
 8004dc8:	617b      	str	r3, [r7, #20]
        }
        break;
 8004dca:	e006      	b.n	8004dda <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 8004dcc:	693b      	ldr	r3, [r7, #16]
 8004dce:	3301      	adds	r3, #1
 8004dd0:	613b      	str	r3, [r7, #16]
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	2b02      	cmp	r3, #2
 8004dd6:	d99b      	bls.n	8004d10 <I2C_GetTiming+0x20>
 8004dd8:	e000      	b.n	8004ddc <I2C_GetTiming+0xec>
        break;
 8004dda:	bf00      	nop
      }
    }
  }

  return ret;
 8004ddc:	697b      	ldr	r3, [r7, #20]
}
 8004dde:	4618      	mov	r0, r3
 8004de0:	3718      	adds	r7, #24
 8004de2:	46bd      	mov	sp, r7
 8004de4:	bd80      	pop	{r7, pc}
 8004de6:	bf00      	nop
 8004de8:	08015094 	.word	0x08015094
 8004dec:	2400ad04 	.word	0x2400ad04

08004df0 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004df0:	b480      	push	{r7}
 8004df2:	b08f      	sub	sp, #60	@ 0x3c
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
 8004df8:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 8004dfa:	2310      	movs	r3, #16
 8004dfc:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	085a      	lsrs	r2, r3, #1
 8004e02:	4b6e      	ldr	r3, [pc, #440]	@ (8004fbc <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 8004e04:	4413      	add	r3, r2
 8004e06:	687a      	ldr	r2, [r7, #4]
 8004e08:	fbb3 f3f2 	udiv	r3, r3, r2
 8004e0c:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8004e0e:	2332      	movs	r3, #50	@ 0x32
 8004e10:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 8004e12:	f44f 7382 	mov.w	r3, #260	@ 0x104
 8004e16:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004e18:	4a69      	ldr	r2, [pc, #420]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004e1a:	683b      	ldr	r3, [r7, #0]
 8004e1c:	212c      	movs	r1, #44	@ 0x2c
 8004e1e:	fb01 f303 	mul.w	r3, r1, r3
 8004e22:	4413      	add	r3, r2
 8004e24:	3324      	adds	r3, #36	@ 0x24
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4618      	mov	r0, r3
 8004e2a:	4a65      	ldr	r2, [pc, #404]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	212c      	movs	r1, #44	@ 0x2c
 8004e30:	fb01 f303 	mul.w	r3, r1, r3
 8004e34:	4413      	add	r3, r2
 8004e36:	330c      	adds	r3, #12
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004e3c:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004e3e:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 8004e40:	495f      	ldr	r1, [pc, #380]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	202c      	movs	r0, #44	@ 0x2c
 8004e46:	fb00 f303 	mul.w	r3, r0, r3
 8004e4a:	440b      	add	r3, r1
 8004e4c:	3328      	adds	r3, #40	@ 0x28
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	3303      	adds	r3, #3
 8004e52:	69f9      	ldr	r1, [r7, #28]
 8004e54:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 8004e58:	1ad3      	subs	r3, r2, r3
 8004e5a:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004e5c:	4a58      	ldr	r2, [pc, #352]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	212c      	movs	r1, #44	@ 0x2c
 8004e62:	fb01 f303 	mul.w	r3, r1, r3
 8004e66:	4413      	add	r3, r2
 8004e68:	3310      	adds	r3, #16
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	4a54      	ldr	r2, [pc, #336]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	212c      	movs	r1, #44	@ 0x2c
 8004e74:	fb01 f303 	mul.w	r3, r1, r3
 8004e78:	4413      	add	r3, r2
 8004e7a:	3320      	adds	r3, #32
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004e80:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004e82:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 8004e84:	494e      	ldr	r1, [pc, #312]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	202c      	movs	r0, #44	@ 0x2c
 8004e8a:	fb00 f303 	mul.w	r3, r0, r3
 8004e8e:	440b      	add	r3, r1
 8004e90:	3328      	adds	r3, #40	@ 0x28
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	3304      	adds	r3, #4
 8004e96:	69f9      	ldr	r1, [r7, #28]
 8004e98:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 8004e9c:	1ad3      	subs	r3, r2, r3
 8004e9e:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 8004ea0:	4a47      	ldr	r2, [pc, #284]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004ea2:	683b      	ldr	r3, [r7, #0]
 8004ea4:	212c      	movs	r1, #44	@ 0x2c
 8004ea6:	fb01 f303 	mul.w	r3, r1, r3
 8004eaa:	4413      	add	r3, r2
 8004eac:	3320      	adds	r3, #32
 8004eae:	681b      	ldr	r3, [r3, #0]
 8004eb0:	4618      	mov	r0, r3
 8004eb2:	4a43      	ldr	r2, [pc, #268]	@ (8004fc0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 8004eb4:	683b      	ldr	r3, [r7, #0]
 8004eb6:	212c      	movs	r1, #44	@ 0x2c
 8004eb8:	fb01 f303 	mul.w	r3, r1, r3
 8004ebc:	4413      	add	r3, r2
 8004ebe:	3314      	adds	r3, #20
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4403      	add	r3, r0
 8004ec4:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 8004ec6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	dc01      	bgt.n	8004ed0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 8004ecc:	2300      	movs	r3, #0
 8004ece:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 8004ed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	dc01      	bgt.n	8004eda <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004eda:	2300      	movs	r3, #0
 8004edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004ede:	e062      	b.n	8004fa6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004ee0:	2300      	movs	r3, #0
 8004ee2:	627b      	str	r3, [r7, #36]	@ 0x24
 8004ee4:	e059      	b.n	8004f9a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 8004ee6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee8:	3301      	adds	r3, #1
 8004eea:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004eec:	3201      	adds	r2, #1
 8004eee:	fb03 f202 	mul.w	r2, r3, r2
 8004ef2:	69fb      	ldr	r3, [r7, #28]
 8004ef4:	fb02 f303 	mul.w	r3, r2, r3
 8004ef8:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 8004efa:	693b      	ldr	r3, [r7, #16]
 8004efc:	68fa      	ldr	r2, [r7, #12]
 8004efe:	429a      	cmp	r2, r3
 8004f00:	d348      	bcc.n	8004f94 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004f02:	2300      	movs	r3, #0
 8004f04:	623b      	str	r3, [r7, #32]
 8004f06:	e042      	b.n	8004f8e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 8004f08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f0a:	3301      	adds	r3, #1
 8004f0c:	6a3a      	ldr	r2, [r7, #32]
 8004f0e:	fb03 f202 	mul.w	r2, r3, r2
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	fb02 f303 	mul.w	r3, r2, r3
 8004f18:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 8004f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004f1c:	68ba      	ldr	r2, [r7, #8]
 8004f1e:	429a      	cmp	r2, r3
 8004f20:	d332      	bcc.n	8004f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 8004f22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f24:	68ba      	ldr	r2, [r7, #8]
 8004f26:	429a      	cmp	r2, r3
 8004f28:	d82e      	bhi.n	8004f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 8004f2a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f2c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004f2e:	429a      	cmp	r2, r3
 8004f30:	d02a      	beq.n	8004f88 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 8004f32:	4b24      	ldr	r3, [pc, #144]	@ (8004fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004f34:	681a      	ldr	r2, [r3, #0]
 8004f36:	4924      	ldr	r1, [pc, #144]	@ (8004fc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004f38:	4613      	mov	r3, r2
 8004f3a:	009b      	lsls	r3, r3, #2
 8004f3c:	4413      	add	r3, r2
 8004f3e:	009b      	lsls	r3, r3, #2
 8004f40:	440b      	add	r3, r1
 8004f42:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8004f44:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 8004f46:	4b1f      	ldr	r3, [pc, #124]	@ (8004fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004f48:	681a      	ldr	r2, [r3, #0]
 8004f4a:	491f      	ldr	r1, [pc, #124]	@ (8004fc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004f4c:	4613      	mov	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	4413      	add	r3, r2
 8004f52:	009b      	lsls	r3, r3, #2
 8004f54:	440b      	add	r3, r1
 8004f56:	3304      	adds	r3, #4
 8004f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004f5a:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 8004f5c:	4b19      	ldr	r3, [pc, #100]	@ (8004fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004f5e:	681a      	ldr	r2, [r3, #0]
 8004f60:	4919      	ldr	r1, [pc, #100]	@ (8004fc8 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 8004f62:	4613      	mov	r3, r2
 8004f64:	009b      	lsls	r3, r3, #2
 8004f66:	4413      	add	r3, r2
 8004f68:	009b      	lsls	r3, r3, #2
 8004f6a:	440b      	add	r3, r1
 8004f6c:	3308      	adds	r3, #8
 8004f6e:	6a3a      	ldr	r2, [r7, #32]
 8004f70:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 8004f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004f74:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 8004f76:	4b13      	ldr	r3, [pc, #76]	@ (8004fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	3301      	adds	r3, #1
 8004f7c:	4a11      	ldr	r2, [pc, #68]	@ (8004fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004f7e:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 8004f80:	4b10      	ldr	r3, [pc, #64]	@ (8004fc4 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	2b7f      	cmp	r3, #127	@ 0x7f
 8004f86:	d812      	bhi.n	8004fae <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 8004f88:	6a3b      	ldr	r3, [r7, #32]
 8004f8a:	3301      	adds	r3, #1
 8004f8c:	623b      	str	r3, [r7, #32]
 8004f8e:	6a3b      	ldr	r3, [r7, #32]
 8004f90:	2b0f      	cmp	r3, #15
 8004f92:	d9b9      	bls.n	8004f08 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 8004f94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f96:	3301      	adds	r3, #1
 8004f98:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f9c:	2b0f      	cmp	r3, #15
 8004f9e:	d9a2      	bls.n	8004ee6 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 8004fa0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa2:	3301      	adds	r3, #1
 8004fa4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004fa8:	2b0f      	cmp	r3, #15
 8004faa:	d999      	bls.n	8004ee0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 8004fac:	e000      	b.n	8004fb0 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 8004fae:	bf00      	nop
          }
        }
      }
    }
  }
}
 8004fb0:	373c      	adds	r7, #60	@ 0x3c
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr
 8004fba:	bf00      	nop
 8004fbc:	3b9aca00 	.word	0x3b9aca00
 8004fc0:	08015094 	.word	0x08015094
 8004fc4:	2400b704 	.word	0x2400b704
 8004fc8:	2400ad04 	.word	0x2400ad04

08004fcc <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 8004fcc:	b480      	push	{r7}
 8004fce:	b093      	sub	sp, #76	@ 0x4c
 8004fd0:	af00      	add	r7, sp, #0
 8004fd2:	6078      	str	r0, [r7, #4]
 8004fd4:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 8004fd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fda:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	085a      	lsrs	r2, r3, #1
 8004fe0:	4b7a      	ldr	r3, [pc, #488]	@ (80051cc <I2C_Compute_SCLL_SCLH+0x200>)
 8004fe2:	4413      	add	r3, r2
 8004fe4:	687a      	ldr	r2, [r7, #4]
 8004fe6:	fbb3 f3f2 	udiv	r3, r3, r2
 8004fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 8004fec:	4a78      	ldr	r2, [pc, #480]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	212c      	movs	r1, #44	@ 0x2c
 8004ff2:	fb01 f303 	mul.w	r3, r1, r3
 8004ff6:	4413      	add	r3, r2
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	085a      	lsrs	r2, r3, #1
 8004ffc:	4b73      	ldr	r3, [pc, #460]	@ (80051cc <I2C_Compute_SCLL_SCLH+0x200>)
 8004ffe:	4413      	add	r3, r2
 8005000:	4973      	ldr	r1, [pc, #460]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 8005002:	683a      	ldr	r2, [r7, #0]
 8005004:	202c      	movs	r0, #44	@ 0x2c
 8005006:	fb00 f202 	mul.w	r2, r0, r2
 800500a:	440a      	add	r2, r1
 800500c:	6812      	ldr	r2, [r2, #0]
 800500e:	fbb3 f3f2 	udiv	r3, r3, r2
 8005012:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 8005014:	2332      	movs	r3, #50	@ 0x32
 8005016:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 8005018:	4a6d      	ldr	r2, [pc, #436]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	212c      	movs	r1, #44	@ 0x2c
 800501e:	fb01 f303 	mul.w	r3, r1, r3
 8005022:	4413      	add	r3, r2
 8005024:	3328      	adds	r3, #40	@ 0x28
 8005026:	681a      	ldr	r2, [r3, #0]
 8005028:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800502a:	fb02 f303 	mul.w	r3, r2, r3
 800502e:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 8005030:	4a67      	ldr	r2, [pc, #412]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 8005032:	683b      	ldr	r3, [r7, #0]
 8005034:	212c      	movs	r1, #44	@ 0x2c
 8005036:	fb01 f303 	mul.w	r3, r1, r3
 800503a:	4413      	add	r3, r2
 800503c:	3304      	adds	r3, #4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4a62      	ldr	r2, [pc, #392]	@ (80051cc <I2C_Compute_SCLL_SCLH+0x200>)
 8005042:	fbb2 f3f3 	udiv	r3, r2, r3
 8005046:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 8005048:	4a61      	ldr	r2, [pc, #388]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 800504a:	683b      	ldr	r3, [r7, #0]
 800504c:	212c      	movs	r1, #44	@ 0x2c
 800504e:	fb01 f303 	mul.w	r3, r1, r3
 8005052:	4413      	add	r3, r2
 8005054:	3308      	adds	r3, #8
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	4a5c      	ldr	r2, [pc, #368]	@ (80051cc <I2C_Compute_SCLL_SCLH+0x200>)
 800505a:	fbb2 f3f3 	udiv	r3, r2, r3
 800505e:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 8005060:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005062:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 8005064:	2300      	movs	r3, #0
 8005066:	637b      	str	r3, [r7, #52]	@ 0x34
 8005068:	e0a3      	b.n	80051b2 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800506a:	495a      	ldr	r1, [pc, #360]	@ (80051d4 <I2C_Compute_SCLL_SCLH+0x208>)
 800506c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800506e:	4613      	mov	r3, r2
 8005070:	009b      	lsls	r3, r3, #2
 8005072:	4413      	add	r3, r2
 8005074:	009b      	lsls	r3, r3, #2
 8005076:	440b      	add	r3, r1
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	1c5a      	adds	r2, r3, #1
 800507c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800507e:	fb02 f303 	mul.w	r3, r2, r3
 8005082:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 8005084:	2300      	movs	r3, #0
 8005086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005088:	e08c      	b.n	80051a4 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800508a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800508c:	6a3b      	ldr	r3, [r7, #32]
 800508e:	441a      	add	r2, r3
 8005090:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005092:	3301      	adds	r3, #1
 8005094:	6979      	ldr	r1, [r7, #20]
 8005096:	fb03 f101 	mul.w	r1, r3, r1
 800509a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800509c:	005b      	lsls	r3, r3, #1
 800509e:	440b      	add	r3, r1
 80050a0:	4413      	add	r3, r2
 80050a2:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 80050a4:	4a4a      	ldr	r2, [pc, #296]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	212c      	movs	r1, #44	@ 0x2c
 80050aa:	fb01 f303 	mul.w	r3, r1, r3
 80050ae:	4413      	add	r3, r2
 80050b0:	3318      	adds	r3, #24
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d971      	bls.n	800519e <I2C_Compute_SCLL_SCLH+0x1d2>
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050be:	1ad2      	subs	r2, r2, r3
 80050c0:	6a3b      	ldr	r3, [r7, #32]
 80050c2:	1ad3      	subs	r3, r2, r3
 80050c4:	089b      	lsrs	r3, r3, #2
 80050c6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80050c8:	429a      	cmp	r2, r3
 80050ca:	d268      	bcs.n	800519e <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 80050cc:	2300      	movs	r3, #0
 80050ce:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050d0:	e062      	b.n	8005198 <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 80050d2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80050d4:	6a3b      	ldr	r3, [r7, #32]
 80050d6:	441a      	add	r2, r3
 80050d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050da:	3301      	adds	r3, #1
 80050dc:	6979      	ldr	r1, [r7, #20]
 80050de:	fb03 f101 	mul.w	r1, r3, r1
 80050e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050e4:	005b      	lsls	r3, r3, #1
 80050e6:	440b      	add	r3, r1
 80050e8:	4413      	add	r3, r2
 80050ea:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 80050ec:	693a      	ldr	r2, [r7, #16]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	441a      	add	r2, r3
 80050f2:	4937      	ldr	r1, [pc, #220]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 80050f4:	683b      	ldr	r3, [r7, #0]
 80050f6:	202c      	movs	r0, #44	@ 0x2c
 80050f8:	fb00 f303 	mul.w	r3, r0, r3
 80050fc:	440b      	add	r3, r1
 80050fe:	3320      	adds	r3, #32
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	441a      	add	r2, r3
 8005104:	4932      	ldr	r1, [pc, #200]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 8005106:	683b      	ldr	r3, [r7, #0]
 8005108:	202c      	movs	r0, #44	@ 0x2c
 800510a:	fb00 f303 	mul.w	r3, r0, r3
 800510e:	440b      	add	r3, r1
 8005110:	3324      	adds	r3, #36	@ 0x24
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	4413      	add	r3, r2
 8005116:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 8005118:	68ba      	ldr	r2, [r7, #8]
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	429a      	cmp	r2, r3
 800511e:	d338      	bcc.n	8005192 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005120:	68ba      	ldr	r2, [r7, #8]
 8005122:	69fb      	ldr	r3, [r7, #28]
 8005124:	429a      	cmp	r2, r3
 8005126:	d834      	bhi.n	8005192 <I2C_Compute_SCLL_SCLH+0x1c6>
 8005128:	4a29      	ldr	r2, [pc, #164]	@ (80051d0 <I2C_Compute_SCLL_SCLH+0x204>)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	212c      	movs	r1, #44	@ 0x2c
 800512e:	fb01 f303 	mul.w	r3, r1, r3
 8005132:	4413      	add	r3, r2
 8005134:	331c      	adds	r3, #28
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	68fa      	ldr	r2, [r7, #12]
 800513a:	429a      	cmp	r2, r3
 800513c:	d329      	bcc.n	8005192 <I2C_Compute_SCLL_SCLH+0x1c6>
 800513e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	429a      	cmp	r2, r3
 8005144:	d225      	bcs.n	8005192 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 8005146:	68ba      	ldr	r2, [r7, #8]
 8005148:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800514a:	1ad3      	subs	r3, r2, r3
 800514c:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800514e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005150:	2b00      	cmp	r3, #0
 8005152:	da02      	bge.n	800515a <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 8005154:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005156:	425b      	negs	r3, r3
 8005158:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800515a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800515e:	429a      	cmp	r2, r3
 8005160:	d917      	bls.n	8005192 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 8005162:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005164:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 8005166:	491b      	ldr	r1, [pc, #108]	@ (80051d4 <I2C_Compute_SCLL_SCLH+0x208>)
 8005168:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800516a:	4613      	mov	r3, r2
 800516c:	009b      	lsls	r3, r3, #2
 800516e:	4413      	add	r3, r2
 8005170:	009b      	lsls	r3, r3, #2
 8005172:	440b      	add	r3, r1
 8005174:	3310      	adds	r3, #16
 8005176:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8005178:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800517a:	4916      	ldr	r1, [pc, #88]	@ (80051d4 <I2C_Compute_SCLL_SCLH+0x208>)
 800517c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800517e:	4613      	mov	r3, r2
 8005180:	009b      	lsls	r3, r3, #2
 8005182:	4413      	add	r3, r2
 8005184:	009b      	lsls	r3, r3, #2
 8005186:	440b      	add	r3, r1
 8005188:	330c      	adds	r3, #12
 800518a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800518c:	601a      	str	r2, [r3, #0]
              ret = count;
 800518e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005190:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 8005192:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005194:	3301      	adds	r3, #1
 8005196:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005198:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800519a:	2bff      	cmp	r3, #255	@ 0xff
 800519c:	d999      	bls.n	80050d2 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800519e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a0:	3301      	adds	r3, #1
 80051a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80051a4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80051a6:	2bff      	cmp	r3, #255	@ 0xff
 80051a8:	f67f af6f 	bls.w	800508a <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 80051ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051ae:	3301      	adds	r3, #1
 80051b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80051b2:	4b09      	ldr	r3, [pc, #36]	@ (80051d8 <I2C_Compute_SCLL_SCLH+0x20c>)
 80051b4:	681b      	ldr	r3, [r3, #0]
 80051b6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80051b8:	429a      	cmp	r2, r3
 80051ba:	f4ff af56 	bcc.w	800506a <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 80051be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	374c      	adds	r7, #76	@ 0x4c
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr
 80051cc:	3b9aca00 	.word	0x3b9aca00
 80051d0:	08015094 	.word	0x08015094
 80051d4:	2400ad04 	.word	0x2400ad04
 80051d8:	2400b704 	.word	0x2400b704

080051dc <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 80051dc:	b580      	push	{r7, lr}
 80051de:	b08a      	sub	sp, #40	@ 0x28
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 80051e4:	4b31      	ldr	r3, [pc, #196]	@ (80052ac <I2C4_MspInit+0xd0>)
 80051e6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051ea:	4a30      	ldr	r2, [pc, #192]	@ (80052ac <I2C4_MspInit+0xd0>)
 80051ec:	f043 0308 	orr.w	r3, r3, #8
 80051f0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80051f4:	4b2d      	ldr	r3, [pc, #180]	@ (80052ac <I2C4_MspInit+0xd0>)
 80051f6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80051fa:	f003 0308 	and.w	r3, r3, #8
 80051fe:	613b      	str	r3, [r7, #16]
 8005200:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 8005202:	4b2a      	ldr	r3, [pc, #168]	@ (80052ac <I2C4_MspInit+0xd0>)
 8005204:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005208:	4a28      	ldr	r2, [pc, #160]	@ (80052ac <I2C4_MspInit+0xd0>)
 800520a:	f043 0308 	orr.w	r3, r3, #8
 800520e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8005212:	4b26      	ldr	r3, [pc, #152]	@ (80052ac <I2C4_MspInit+0xd0>)
 8005214:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8005218:	f003 0308 	and.w	r3, r3, #8
 800521c:	60fb      	str	r3, [r7, #12]
 800521e:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 8005220:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8005224:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005226:	2312      	movs	r3, #18
 8005228:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800522a:	2300      	movs	r3, #0
 800522c:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800522e:	2302      	movs	r3, #2
 8005230:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 8005232:	2304      	movs	r3, #4
 8005234:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 8005236:	f107 0314 	add.w	r3, r7, #20
 800523a:	4619      	mov	r1, r3
 800523c:	481c      	ldr	r0, [pc, #112]	@ (80052b0 <I2C4_MspInit+0xd4>)
 800523e:	f005 fb9f 	bl	800a980 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 8005242:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8005246:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 8005248:	2312      	movs	r3, #18
 800524a:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800524c:	2300      	movs	r3, #0
 800524e:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 8005250:	2302      	movs	r3, #2
 8005252:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 8005254:	2304      	movs	r3, #4
 8005256:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 8005258:	f107 0314 	add.w	r3, r7, #20
 800525c:	4619      	mov	r1, r3
 800525e:	4814      	ldr	r0, [pc, #80]	@ (80052b0 <I2C4_MspInit+0xd4>)
 8005260:	f005 fb8e 	bl	800a980 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 8005264:	4b11      	ldr	r3, [pc, #68]	@ (80052ac <I2C4_MspInit+0xd0>)
 8005266:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800526a:	4a10      	ldr	r2, [pc, #64]	@ (80052ac <I2C4_MspInit+0xd0>)
 800526c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005270:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8005274:	4b0d      	ldr	r3, [pc, #52]	@ (80052ac <I2C4_MspInit+0xd0>)
 8005276:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800527a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800527e:	60bb      	str	r3, [r7, #8]
 8005280:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 8005282:	4b0a      	ldr	r3, [pc, #40]	@ (80052ac <I2C4_MspInit+0xd0>)
 8005284:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005288:	4a08      	ldr	r2, [pc, #32]	@ (80052ac <I2C4_MspInit+0xd0>)
 800528a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800528e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 8005292:	4b06      	ldr	r3, [pc, #24]	@ (80052ac <I2C4_MspInit+0xd0>)
 8005294:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 8005298:	4a04      	ldr	r2, [pc, #16]	@ (80052ac <I2C4_MspInit+0xd0>)
 800529a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800529e:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 80052a2:	bf00      	nop
 80052a4:	3728      	adds	r7, #40	@ 0x28
 80052a6:	46bd      	mov	sp, r7
 80052a8:	bd80      	pop	{r7, pc}
 80052aa:	bf00      	nop
 80052ac:	58024400 	.word	0x58024400
 80052b0:	58020c00 	.word	0x58020c00

080052b4 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	b088      	sub	sp, #32
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 80052bc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80052c0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	4619      	mov	r1, r3
 80052c6:	480b      	ldr	r0, [pc, #44]	@ (80052f4 <I2C4_MspDeInit+0x40>)
 80052c8:	f005 fd0a 	bl	800ace0 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 80052cc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80052d0:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	4619      	mov	r1, r3
 80052d6:	4807      	ldr	r0, [pc, #28]	@ (80052f4 <I2C4_MspDeInit+0x40>)
 80052d8:	f005 fd02 	bl	800ace0 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 80052dc:	4b06      	ldr	r3, [pc, #24]	@ (80052f8 <I2C4_MspDeInit+0x44>)
 80052de:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80052e2:	4a05      	ldr	r2, [pc, #20]	@ (80052f8 <I2C4_MspDeInit+0x44>)
 80052e4:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80052e8:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 80052ec:	bf00      	nop
 80052ee:	3720      	adds	r7, #32
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}
 80052f4:	58020c00 	.word	0x58020c00
 80052f8:	58024400 	.word	0x58024400

080052fc <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 80052fc:	b580      	push	{r7, lr}
 80052fe:	b088      	sub	sp, #32
 8005300:	af04      	add	r7, sp, #16
 8005302:	607b      	str	r3, [r7, #4]
 8005304:	4603      	mov	r3, r0
 8005306:	81fb      	strh	r3, [r7, #14]
 8005308:	460b      	mov	r3, r1
 800530a:	81bb      	strh	r3, [r7, #12]
 800530c:	4613      	mov	r3, r2
 800530e:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 8005310:	8978      	ldrh	r0, [r7, #10]
 8005312:	89ba      	ldrh	r2, [r7, #12]
 8005314:	89f9      	ldrh	r1, [r7, #14]
 8005316:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800531a:	9302      	str	r3, [sp, #8]
 800531c:	8b3b      	ldrh	r3, [r7, #24]
 800531e:	9301      	str	r3, [sp, #4]
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	9300      	str	r3, [sp, #0]
 8005324:	4603      	mov	r3, r0
 8005326:	4807      	ldr	r0, [pc, #28]	@ (8005344 <I2C4_WriteReg+0x48>)
 8005328:	f005 fef2 	bl	800b110 <HAL_I2C_Mem_Write>
 800532c:	4603      	mov	r3, r0
 800532e:	2b00      	cmp	r3, #0
 8005330:	d101      	bne.n	8005336 <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 8005332:	2300      	movs	r3, #0
 8005334:	e001      	b.n	800533a <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005336:	f06f 0307 	mvn.w	r3, #7
}
 800533a:	4618      	mov	r0, r3
 800533c:	3710      	adds	r7, #16
 800533e:	46bd      	mov	sp, r7
 8005340:	bd80      	pop	{r7, pc}
 8005342:	bf00      	nop
 8005344:	2400b708 	.word	0x2400b708

08005348 <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 8005348:	b580      	push	{r7, lr}
 800534a:	b088      	sub	sp, #32
 800534c:	af04      	add	r7, sp, #16
 800534e:	607b      	str	r3, [r7, #4]
 8005350:	4603      	mov	r3, r0
 8005352:	81fb      	strh	r3, [r7, #14]
 8005354:	460b      	mov	r3, r1
 8005356:	81bb      	strh	r3, [r7, #12]
 8005358:	4613      	mov	r3, r2
 800535a:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800535c:	8978      	ldrh	r0, [r7, #10]
 800535e:	89ba      	ldrh	r2, [r7, #12]
 8005360:	89f9      	ldrh	r1, [r7, #14]
 8005362:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8005366:	9302      	str	r3, [sp, #8]
 8005368:	8b3b      	ldrh	r3, [r7, #24]
 800536a:	9301      	str	r3, [sp, #4]
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	9300      	str	r3, [sp, #0]
 8005370:	4603      	mov	r3, r0
 8005372:	4807      	ldr	r0, [pc, #28]	@ (8005390 <I2C4_ReadReg+0x48>)
 8005374:	f005 ffe0 	bl	800b338 <HAL_I2C_Mem_Read>
 8005378:	4603      	mov	r3, r0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800537e:	2300      	movs	r3, #0
 8005380:	e001      	b.n	8005386 <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 8005382:	f06f 0307 	mvn.w	r3, #7
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}
 800538e:	bf00      	nop
 8005390:	2400b708 	.word	0x2400b708

08005394 <arm_cos_f32>:
  @return        cos(x)
 */

float32_t arm_cos_f32(
  float32_t x)
{
 8005394:	b480      	push	{r7}
 8005396:	b08b      	sub	sp, #44	@ 0x2c
 8005398:	af00      	add	r7, sp, #0
 800539a:	ed87 0a01 	vstr	s0, [r7, #4]
  int32_t n;
  float32_t findex;

  /* input x is in radians */
  /* Scale input to [0 1] range from [0 2*PI] , divide input by 2*pi, add 0.25 (pi/2) to read sine table */
  in = x * 0.159154943092f + 0.25f;
 800539e:	edd7 7a01 	vldr	s15, [r7, #4]
 80053a2:	ed9f 7a3c 	vldr	s14, [pc, #240]	@ 8005494 <arm_cos_f32+0x100>
 80053a6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053aa:	eeb5 7a00 	vmov.f32	s14, #80	@ 0x3e800000  0.250
 80053ae:	ee77 7a87 	vadd.f32	s15, s15, s14
 80053b2:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of floor value of input */
  n = (int32_t) in;
 80053b6:	edd7 7a06 	vldr	s15, [r7, #24]
 80053ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80053be:	ee17 3a90 	vmov	r3, s15
 80053c2:	623b      	str	r3, [r7, #32]

  /* Make negative values towards -infinity */
  if (in < 0.0f)
 80053c4:	edd7 7a06 	vldr	s15, [r7, #24]
 80053c8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80053cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053d0:	d502      	bpl.n	80053d8 <arm_cos_f32+0x44>
  {
    n--;
 80053d2:	6a3b      	ldr	r3, [r7, #32]
 80053d4:	3b01      	subs	r3, #1
 80053d6:	623b      	str	r3, [r7, #32]
  }

  /* Map input value to [0 1] */
  in = in - (float32_t) n;
 80053d8:	6a3b      	ldr	r3, [r7, #32]
 80053da:	ee07 3a90 	vmov	s15, r3
 80053de:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80053e2:	ed97 7a06 	vldr	s14, [r7, #24]
 80053e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80053ea:	edc7 7a06 	vstr	s15, [r7, #24]

  /* Calculation of index of the table */
  findex = (float32_t)FAST_MATH_TABLE_SIZE * in;
 80053ee:	edd7 7a06 	vldr	s15, [r7, #24]
 80053f2:	ed9f 7a29 	vldr	s14, [pc, #164]	@ 8005498 <arm_cos_f32+0x104>
 80053f6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80053fa:	edc7 7a07 	vstr	s15, [r7, #28]
  index = (uint16_t)findex;
 80053fe:	edd7 7a07 	vldr	s15, [r7, #28]
 8005402:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005406:	ee17 3a90 	vmov	r3, s15
 800540a:	84fb      	strh	r3, [r7, #38]	@ 0x26

  /* when "in" is exactly 1, we need to rotate the index down to 0 */
  if (index >= FAST_MATH_TABLE_SIZE) {
 800540c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800540e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005412:	d309      	bcc.n	8005428 <arm_cos_f32+0x94>
    index = 0;
 8005414:	2300      	movs	r3, #0
 8005416:	84fb      	strh	r3, [r7, #38]	@ 0x26
    findex -= (float32_t)FAST_MATH_TABLE_SIZE;
 8005418:	edd7 7a07 	vldr	s15, [r7, #28]
 800541c:	ed9f 7a1e 	vldr	s14, [pc, #120]	@ 8005498 <arm_cos_f32+0x104>
 8005420:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005424:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  /* fractional value calculation */
  fract = findex - (float32_t) index;
 8005428:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800542a:	ee07 3a90 	vmov	s15, r3
 800542e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8005432:	ed97 7a07 	vldr	s14, [r7, #28]
 8005436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800543a:	edc7 7a05 	vstr	s15, [r7, #20]

  /* Read two nearest values of input value from the cos table */
  a = sinTable_f32[index];
 800543e:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8005440:	4a16      	ldr	r2, [pc, #88]	@ (800549c <arm_cos_f32+0x108>)
 8005442:	009b      	lsls	r3, r3, #2
 8005444:	4413      	add	r3, r2
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	613b      	str	r3, [r7, #16]
  b = sinTable_f32[index+1];
 800544a:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 800544c:	3301      	adds	r3, #1
 800544e:	4a13      	ldr	r2, [pc, #76]	@ (800549c <arm_cos_f32+0x108>)
 8005450:	009b      	lsls	r3, r3, #2
 8005452:	4413      	add	r3, r2
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	60fb      	str	r3, [r7, #12]

  /* Linear interpolation process */
  cosVal = (1.0f - fract) * a + fract * b;
 8005458:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800545c:	edd7 7a05 	vldr	s15, [r7, #20]
 8005460:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005464:	edd7 7a04 	vldr	s15, [r7, #16]
 8005468:	ee27 7a27 	vmul.f32	s14, s14, s15
 800546c:	edd7 6a05 	vldr	s13, [r7, #20]
 8005470:	edd7 7a03 	vldr	s15, [r7, #12]
 8005474:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8005478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800547c:	edc7 7a02 	vstr	s15, [r7, #8]

  /* Return output value */
  return (cosVal);
 8005480:	68bb      	ldr	r3, [r7, #8]
 8005482:	ee07 3a90 	vmov	s15, r3
}
 8005486:	eeb0 0a67 	vmov.f32	s0, s15
 800548a:	372c      	adds	r7, #44	@ 0x2c
 800548c:	46bd      	mov	sp, r7
 800548e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005492:	4770      	bx	lr
 8005494:	3e22f983 	.word	0x3e22f983
 8005498:	44000000 	.word	0x44000000
 800549c:	08028100 	.word	0x08028100

080054a0 <arm_bitreversal_32>:

void arm_bitreversal_32(
        uint32_t *pSrc, 
  const uint16_t bitRevLen, 
  const uint16_t *pBitRevTab)
{
 80054a0:	b480      	push	{r7}
 80054a2:	b089      	sub	sp, #36	@ 0x24
 80054a4:	af00      	add	r7, sp, #0
 80054a6:	60f8      	str	r0, [r7, #12]
 80054a8:	460b      	mov	r3, r1
 80054aa:	607a      	str	r2, [r7, #4]
 80054ac:	817b      	strh	r3, [r7, #10]
  uint32_t a, b, i, tmp;

  for (i = 0; i < bitRevLen; )
 80054ae:	2300      	movs	r3, #0
 80054b0:	61fb      	str	r3, [r7, #28]
 80054b2:	e043      	b.n	800553c <arm_bitreversal_32+0x9c>
  {
     a = pBitRevTab[i    ] >> 2;
 80054b4:	69fb      	ldr	r3, [r7, #28]
 80054b6:	005b      	lsls	r3, r3, #1
 80054b8:	687a      	ldr	r2, [r7, #4]
 80054ba:	4413      	add	r3, r2
 80054bc:	881b      	ldrh	r3, [r3, #0]
 80054be:	089b      	lsrs	r3, r3, #2
 80054c0:	b29b      	uxth	r3, r3
 80054c2:	61bb      	str	r3, [r7, #24]
     b = pBitRevTab[i + 1] >> 2;
 80054c4:	69fb      	ldr	r3, [r7, #28]
 80054c6:	3301      	adds	r3, #1
 80054c8:	005b      	lsls	r3, r3, #1
 80054ca:	687a      	ldr	r2, [r7, #4]
 80054cc:	4413      	add	r3, r2
 80054ce:	881b      	ldrh	r3, [r3, #0]
 80054d0:	089b      	lsrs	r3, r3, #2
 80054d2:	b29b      	uxth	r3, r3
 80054d4:	617b      	str	r3, [r7, #20]

     //real
     tmp = pSrc[a];
 80054d6:	69bb      	ldr	r3, [r7, #24]
 80054d8:	009b      	lsls	r3, r3, #2
 80054da:	68fa      	ldr	r2, [r7, #12]
 80054dc:	4413      	add	r3, r2
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	613b      	str	r3, [r7, #16]
     pSrc[a] = pSrc[b];
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	009b      	lsls	r3, r3, #2
 80054e6:	68fa      	ldr	r2, [r7, #12]
 80054e8:	441a      	add	r2, r3
 80054ea:	69bb      	ldr	r3, [r7, #24]
 80054ec:	009b      	lsls	r3, r3, #2
 80054ee:	68f9      	ldr	r1, [r7, #12]
 80054f0:	440b      	add	r3, r1
 80054f2:	6812      	ldr	r2, [r2, #0]
 80054f4:	601a      	str	r2, [r3, #0]
     pSrc[b] = tmp;
 80054f6:	697b      	ldr	r3, [r7, #20]
 80054f8:	009b      	lsls	r3, r3, #2
 80054fa:	68fa      	ldr	r2, [r7, #12]
 80054fc:	4413      	add	r3, r2
 80054fe:	693a      	ldr	r2, [r7, #16]
 8005500:	601a      	str	r2, [r3, #0]

     //complex
     tmp = pSrc[a+1];
 8005502:	69bb      	ldr	r3, [r7, #24]
 8005504:	3301      	adds	r3, #1
 8005506:	009b      	lsls	r3, r3, #2
 8005508:	68fa      	ldr	r2, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	613b      	str	r3, [r7, #16]
     pSrc[a+1] = pSrc[b+1];
 8005510:	697b      	ldr	r3, [r7, #20]
 8005512:	3301      	adds	r3, #1
 8005514:	009b      	lsls	r3, r3, #2
 8005516:	68fa      	ldr	r2, [r7, #12]
 8005518:	441a      	add	r2, r3
 800551a:	69bb      	ldr	r3, [r7, #24]
 800551c:	3301      	adds	r3, #1
 800551e:	009b      	lsls	r3, r3, #2
 8005520:	68f9      	ldr	r1, [r7, #12]
 8005522:	440b      	add	r3, r1
 8005524:	6812      	ldr	r2, [r2, #0]
 8005526:	601a      	str	r2, [r3, #0]
     pSrc[b+1] = tmp;
 8005528:	697b      	ldr	r3, [r7, #20]
 800552a:	3301      	adds	r3, #1
 800552c:	009b      	lsls	r3, r3, #2
 800552e:	68fa      	ldr	r2, [r7, #12]
 8005530:	4413      	add	r3, r2
 8005532:	693a      	ldr	r2, [r7, #16]
 8005534:	601a      	str	r2, [r3, #0]

    i += 2;
 8005536:	69fb      	ldr	r3, [r7, #28]
 8005538:	3302      	adds	r3, #2
 800553a:	61fb      	str	r3, [r7, #28]
  for (i = 0; i < bitRevLen; )
 800553c:	897b      	ldrh	r3, [r7, #10]
 800553e:	69fa      	ldr	r2, [r7, #28]
 8005540:	429a      	cmp	r2, r3
 8005542:	d3b7      	bcc.n	80054b4 <arm_bitreversal_32+0x14>
  }
}
 8005544:	bf00      	nop
 8005546:	bf00      	nop
 8005548:	3724      	adds	r7, #36	@ 0x24
 800554a:	46bd      	mov	sp, r7
 800554c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005550:	4770      	bx	lr

08005552 <arm_cfft_radix8by2_f32>:
  @endcode
 
 */

void arm_cfft_radix8by2_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 8005552:	b580      	push	{r7, lr}
 8005554:	b0a0      	sub	sp, #128	@ 0x80
 8005556:	af00      	add	r7, sp, #0
 8005558:	6078      	str	r0, [r7, #4]
 800555a:	6039      	str	r1, [r7, #0]
  uint32_t    L  = S->fftLen;
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	881b      	ldrh	r3, [r3, #0]
 8005560:	66bb      	str	r3, [r7, #104]	@ 0x68
  float32_t * pCol1, * pCol2, * pMid1, * pMid2;
  float32_t * p2 = p1 + L;
 8005562:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005564:	009b      	lsls	r3, r3, #2
 8005566:	683a      	ldr	r2, [r7, #0]
 8005568:	4413      	add	r3, r2
 800556a:	677b      	str	r3, [r7, #116]	@ 0x74
  const float32_t * tw = (float32_t *) S->pTwiddle;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	685b      	ldr	r3, [r3, #4]
 8005570:	673b      	str	r3, [r7, #112]	@ 0x70
  float32_t t1[4], t2[4], t3[4], t4[4], twR, twI;
  float32_t m0, m1, m2, m3;
  uint32_t l;

  pCol1 = p1;
 8005572:	683b      	ldr	r3, [r7, #0]
 8005574:	667b      	str	r3, [r7, #100]	@ 0x64
  pCol2 = p2;
 8005576:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005578:	663b      	str	r3, [r7, #96]	@ 0x60

  /* Define new length */
  L >>= 1;
 800557a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800557c:	085b      	lsrs	r3, r3, #1
 800557e:	66bb      	str	r3, [r7, #104]	@ 0x68

  /* Initialize mid pointers */
  pMid1 = p1 + L;
 8005580:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005582:	009b      	lsls	r3, r3, #2
 8005584:	683a      	ldr	r2, [r7, #0]
 8005586:	4413      	add	r3, r2
 8005588:	67fb      	str	r3, [r7, #124]	@ 0x7c
  pMid2 = p2 + L;
 800558a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800558c:	009b      	lsls	r3, r3, #2
 800558e:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8005590:	4413      	add	r3, r2
 8005592:	67bb      	str	r3, [r7, #120]	@ 0x78

  /* do two dot Fourier transform */
  for (l = L >> 2; l > 0; l-- )
 8005594:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005596:	089b      	lsrs	r3, r3, #2
 8005598:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800559a:	e1b6      	b.n	800590a <arm_cfft_radix8by2_f32+0x3b8>
  {
    t1[0] = p1[0];
 800559c:	683b      	ldr	r3, [r7, #0]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	63bb      	str	r3, [r7, #56]	@ 0x38
    t1[1] = p1[1];
 80055a2:	683b      	ldr	r3, [r7, #0]
 80055a4:	685b      	ldr	r3, [r3, #4]
 80055a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
    t1[2] = p1[2];
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	689b      	ldr	r3, [r3, #8]
 80055ac:	643b      	str	r3, [r7, #64]	@ 0x40
    t1[3] = p1[3];
 80055ae:	683b      	ldr	r3, [r7, #0]
 80055b0:	68db      	ldr	r3, [r3, #12]
 80055b2:	647b      	str	r3, [r7, #68]	@ 0x44

    t2[0] = p2[0];
 80055b4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	62bb      	str	r3, [r7, #40]	@ 0x28
    t2[1] = p2[1];
 80055ba:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	62fb      	str	r3, [r7, #44]	@ 0x2c
    t2[2] = p2[2];
 80055c0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	633b      	str	r3, [r7, #48]	@ 0x30
    t2[3] = p2[3];
 80055c6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80055c8:	68db      	ldr	r3, [r3, #12]
 80055ca:	637b      	str	r3, [r7, #52]	@ 0x34

    t3[0] = pMid1[0];
 80055cc:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	61bb      	str	r3, [r7, #24]
    t3[1] = pMid1[1];
 80055d2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055d4:	685b      	ldr	r3, [r3, #4]
 80055d6:	61fb      	str	r3, [r7, #28]
    t3[2] = pMid1[2];
 80055d8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055da:	689b      	ldr	r3, [r3, #8]
 80055dc:	623b      	str	r3, [r7, #32]
    t3[3] = pMid1[3];
 80055de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80055e0:	68db      	ldr	r3, [r3, #12]
 80055e2:	627b      	str	r3, [r7, #36]	@ 0x24

    t4[0] = pMid2[0];
 80055e4:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	60bb      	str	r3, [r7, #8]
    t4[1] = pMid2[1];
 80055ea:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055ec:	685b      	ldr	r3, [r3, #4]
 80055ee:	60fb      	str	r3, [r7, #12]
    t4[2] = pMid2[2];
 80055f0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f2:	689b      	ldr	r3, [r3, #8]
 80055f4:	613b      	str	r3, [r7, #16]
    t4[3] = pMid2[3];
 80055f6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80055f8:	68db      	ldr	r3, [r3, #12]
 80055fa:	617b      	str	r3, [r7, #20]

    *p1++ = t1[0] + t2[0];
 80055fc:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005600:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005604:	683b      	ldr	r3, [r7, #0]
 8005606:	1d1a      	adds	r2, r3, #4
 8005608:	603a      	str	r2, [r7, #0]
 800560a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800560e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[1] + t2[1];
 8005612:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005616:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800561a:	683b      	ldr	r3, [r7, #0]
 800561c:	1d1a      	adds	r2, r3, #4
 800561e:	603a      	str	r2, [r7, #0]
 8005620:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005624:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[2] + t2[2];
 8005628:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800562c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005630:	683b      	ldr	r3, [r7, #0]
 8005632:	1d1a      	adds	r2, r3, #4
 8005634:	603a      	str	r2, [r7, #0]
 8005636:	ee77 7a27 	vadd.f32	s15, s14, s15
 800563a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = t1[3] + t2[3];    /* col 1 */
 800563e:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005642:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005646:	683b      	ldr	r3, [r7, #0]
 8005648:	1d1a      	adds	r2, r3, #4
 800564a:	603a      	str	r2, [r7, #0]
 800564c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005650:	edc3 7a00 	vstr	s15, [r3]

    t2[0] = t1[0] - t2[0];
 8005654:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8005658:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 800565c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005660:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
    t2[1] = t1[1] - t2[1];
 8005664:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8005668:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 800566c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005670:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[2] = t1[2] - t2[2];
 8005674:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8005678:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800567c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005680:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    t2[3] = t1[3] - t2[3];    /* for col 2 */
 8005684:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8005688:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800568c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005690:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34

    *pMid1++ = t3[0] + t4[0];
 8005694:	ed97 7a06 	vldr	s14, [r7, #24]
 8005698:	edd7 7a02 	vldr	s15, [r7, #8]
 800569c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800569e:	1d1a      	adds	r2, r3, #4
 80056a0:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056a6:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[1] + t4[1];
 80056aa:	ed97 7a07 	vldr	s14, [r7, #28]
 80056ae:	edd7 7a03 	vldr	s15, [r7, #12]
 80056b2:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056b4:	1d1a      	adds	r2, r3, #4
 80056b6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056bc:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[2] + t4[2];
 80056c0:	ed97 7a08 	vldr	s14, [r7, #32]
 80056c4:	edd7 7a04 	vldr	s15, [r7, #16]
 80056c8:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056ca:	1d1a      	adds	r2, r3, #4
 80056cc:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056d2:	edc3 7a00 	vstr	s15, [r3]
    *pMid1++ = t3[3] + t4[3]; /* col 1 */
 80056d6:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80056da:	edd7 7a05 	vldr	s15, [r7, #20]
 80056de:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 80056e0:	1d1a      	adds	r2, r3, #4
 80056e2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80056e4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80056e8:	edc3 7a00 	vstr	s15, [r3]

    t4[0] = t4[0] - t3[0];
 80056ec:	ed97 7a02 	vldr	s14, [r7, #8]
 80056f0:	edd7 7a06 	vldr	s15, [r7, #24]
 80056f4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80056f8:	edc7 7a02 	vstr	s15, [r7, #8]
    t4[1] = t4[1] - t3[1];
 80056fc:	ed97 7a03 	vldr	s14, [r7, #12]
 8005700:	edd7 7a07 	vldr	s15, [r7, #28]
 8005704:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005708:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[2] = t4[2] - t3[2];
 800570c:	ed97 7a04 	vldr	s14, [r7, #16]
 8005710:	edd7 7a08 	vldr	s15, [r7, #32]
 8005714:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005718:	edc7 7a04 	vstr	s15, [r7, #16]
    t4[3] = t4[3] - t3[3];    /* for col 2 */
 800571c:	ed97 7a05 	vldr	s14, [r7, #20]
 8005720:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8005724:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005728:	edc7 7a05 	vstr	s15, [r7, #20]

    twR = *tw++;
 800572c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800572e:	1d1a      	adds	r2, r3, #4
 8005730:	673a      	str	r2, [r7, #112]	@ 0x70
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8005736:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005738:	1d1a      	adds	r2, r3, #4
 800573a:	673a      	str	r2, [r7, #112]	@ 0x70
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	65bb      	str	r3, [r7, #88]	@ 0x58

    /* multiply by twiddle factors */
    m0 = t2[0] * twR;
 8005740:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005744:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005748:	ee67 7a27 	vmul.f32	s15, s14, s15
 800574c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[1] * twI;
 8005750:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005754:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005758:	ee67 7a27 	vmul.f32	s15, s14, s15
 800575c:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[1] * twR;
 8005760:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005764:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005768:	ee67 7a27 	vmul.f32	s15, s14, s15
 800576c:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[0] * twI;
 8005770:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8005774:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005778:	ee67 7a27 	vmul.f32	s15, s14, s15
 800577c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    /* R  =  R  *  Tr - I * Ti */
    *p2++ = m0 + m1;
 8005780:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005782:	1d1a      	adds	r2, r3, #4
 8005784:	677a      	str	r2, [r7, #116]	@ 0x74
 8005786:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 800578a:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800578e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005792:	edc3 7a00 	vstr	s15, [r3]
    /* I  =  I  *  Tr + R * Ti */
    *p2++ = m2 - m3;
 8005796:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005798:	1d1a      	adds	r2, r3, #4
 800579a:	677a      	str	r2, [r7, #116]	@ 0x74
 800579c:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80057a0:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80057a4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057a8:	edc3 7a00 	vstr	s15, [r3]

    /* use vertical symmetry */
    /*  0.9988 - 0.0491i <==> -0.0491 - 0.9988i */
    m0 = t4[0] * twI;
 80057ac:	edd7 7a02 	vldr	s15, [r7, #8]
 80057b0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80057b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057b8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[1] * twR;
 80057bc:	edd7 7a03 	vldr	s15, [r7, #12]
 80057c0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80057c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057c8:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[1] * twI;
 80057cc:	edd7 7a03 	vldr	s15, [r7, #12]
 80057d0:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80057d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057d8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[0] * twR;
 80057dc:	edd7 7a02 	vldr	s15, [r7, #8]
 80057e0:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80057e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80057e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80057ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80057ee:	1d1a      	adds	r2, r3, #4
 80057f0:	67ba      	str	r2, [r7, #120]	@ 0x78
 80057f2:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80057f6:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80057fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80057fe:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 8005802:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8005804:	1d1a      	adds	r2, r3, #4
 8005806:	67ba      	str	r2, [r7, #120]	@ 0x78
 8005808:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800580c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005810:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005814:	edc3 7a00 	vstr	s15, [r3]

    twR = *tw++;
 8005818:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800581a:	1d1a      	adds	r2, r3, #4
 800581c:	673a      	str	r2, [r7, #112]	@ 0x70
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	65fb      	str	r3, [r7, #92]	@ 0x5c
    twI = *tw++;
 8005822:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005824:	1d1a      	adds	r2, r3, #4
 8005826:	673a      	str	r2, [r7, #112]	@ 0x70
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	65bb      	str	r3, [r7, #88]	@ 0x58

    m0 = t2[2] * twR;
 800582c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005830:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005834:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005838:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t2[3] * twI;
 800583c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005840:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005844:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005848:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t2[3] * twR;
 800584c:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005850:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005854:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005858:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t2[2] * twI;
 800585c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005860:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005864:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005868:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *p2++ = m0 + m1;
 800586c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800586e:	1d1a      	adds	r2, r3, #4
 8005870:	677a      	str	r2, [r7, #116]	@ 0x74
 8005872:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8005876:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 800587a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800587e:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8005882:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005884:	1d1a      	adds	r2, r3, #4
 8005886:	677a      	str	r2, [r7, #116]	@ 0x74
 8005888:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800588c:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8005890:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005894:	edc3 7a00 	vstr	s15, [r3]

    m0 = t4[2] * twI;
 8005898:	edd7 7a04 	vldr	s15, [r7, #16]
 800589c:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80058a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058a4:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
    m1 = t4[3] * twR;
 80058a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80058ac:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80058b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058b4:	edc7 7a14 	vstr	s15, [r7, #80]	@ 0x50
    m2 = t4[3] * twI;
 80058b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80058bc:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 80058c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058c4:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
    m3 = t4[2] * twR;
 80058c8:	edd7 7a04 	vldr	s15, [r7, #16]
 80058cc:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80058d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80058d4:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48

    *pMid2++ = m0 - m1;
 80058d8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058da:	1d1a      	adds	r2, r3, #4
 80058dc:	67ba      	str	r2, [r7, #120]	@ 0x78
 80058de:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80058e2:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 80058e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80058ea:	edc3 7a00 	vstr	s15, [r3]
    *pMid2++ = m2 + m3;
 80058ee:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80058f0:	1d1a      	adds	r2, r3, #4
 80058f2:	67ba      	str	r2, [r7, #120]	@ 0x78
 80058f4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80058f8:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 80058fc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005900:	edc3 7a00 	vstr	s15, [r3]
  for (l = L >> 2; l > 0; l-- )
 8005904:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005906:	3b01      	subs	r3, #1
 8005908:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800590a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800590c:	2b00      	cmp	r3, #0
 800590e:	f47f ae45 	bne.w	800559c <arm_cfft_radix8by2_f32+0x4a>
  }

  /* first col */
  arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 2U);
 8005912:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005914:	b299      	uxth	r1, r3
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	685a      	ldr	r2, [r3, #4]
 800591a:	2302      	movs	r3, #2
 800591c:	6e78      	ldr	r0, [r7, #100]	@ 0x64
 800591e:	f000 fef7 	bl	8006710 <arm_radix8_butterfly_f32>

  /* second col */
  arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 2U);
 8005922:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005924:	b299      	uxth	r1, r3
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685a      	ldr	r2, [r3, #4]
 800592a:	2302      	movs	r3, #2
 800592c:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 800592e:	f000 feef 	bl	8006710 <arm_radix8_butterfly_f32>
}
 8005932:	bf00      	nop
 8005934:	3780      	adds	r7, #128	@ 0x80
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <arm_cfft_radix8by4_f32>:

void arm_cfft_radix8by4_f32 (arm_cfft_instance_f32 * S, float32_t * p1)
{
 800593a:	b580      	push	{r7, lr}
 800593c:	b0ac      	sub	sp, #176	@ 0xb0
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
 8005942:	6039      	str	r1, [r7, #0]
    uint32_t    L  = S->fftLen >> 1;
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	881b      	ldrh	r3, [r3, #0]
 8005948:	085b      	lsrs	r3, r3, #1
 800594a:	b29b      	uxth	r3, r3
 800594c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
    float32_t * pCol1, *pCol2, *pCol3, *pCol4, *pEnd1, *pEnd2, *pEnd3, *pEnd4;
    const float32_t *tw2, *tw3, *tw4;
    float32_t * p2 = p1 + L;
 8005950:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005954:	009b      	lsls	r3, r3, #2
 8005956:	683a      	ldr	r2, [r7, #0]
 8005958:	4413      	add	r3, r2
 800595a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    float32_t * p3 = p2 + L;
 800595e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005962:	009b      	lsls	r3, r3, #2
 8005964:	f8d7 2090 	ldr.w	r2, [r7, #144]	@ 0x90
 8005968:	4413      	add	r3, r2
 800596a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
    float32_t * p4 = p3 + L;
 800596e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005972:	009b      	lsls	r3, r3, #2
 8005974:	f8d7 208c 	ldr.w	r2, [r7, #140]	@ 0x8c
 8005978:	4413      	add	r3, r2
 800597a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
    float32_t t2[4], t3[4], t4[4], twR, twI;
    float32_t p1ap3_0, p1sp3_0, p1ap3_1, p1sp3_1;
    float32_t m0, m1, m2, m3;
    uint32_t l, twMod2, twMod3, twMod4;

    pCol1 = p1;         /* points to real values by default */
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	67fb      	str	r3, [r7, #124]	@ 0x7c
    pCol2 = p2;
 8005982:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005986:	67bb      	str	r3, [r7, #120]	@ 0x78
    pCol3 = p3;
 8005988:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800598c:	677b      	str	r3, [r7, #116]	@ 0x74
    pCol4 = p4;
 800598e:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005992:	673b      	str	r3, [r7, #112]	@ 0x70
    pEnd1 = p2 - 1;     /* points to imaginary values by default */
 8005994:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005998:	3b04      	subs	r3, #4
 800599a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
    pEnd2 = p3 - 1;
 800599e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059a2:	3b04      	subs	r3, #4
 80059a4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
    pEnd3 = p4 - 1;
 80059a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80059ac:	3b04      	subs	r3, #4
 80059ae:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
    pEnd4 = pEnd3 + L;
 80059b2:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059b6:	009b      	lsls	r3, r3, #2
 80059b8:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80059bc:	4413      	add	r3, r2
 80059be:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

    tw2 = tw3 = tw4 = (float32_t *) S->pTwiddle;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	685b      	ldr	r3, [r3, #4]
 80059c6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80059ca:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80059ce:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80059d2:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80059d6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c

    L >>= 1;
 80059da:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 80059de:	085b      	lsrs	r3, r3, #1
 80059e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80

    /* do four dot Fourier transform */

    twMod2 = 2;
 80059e4:	2302      	movs	r3, #2
 80059e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    twMod3 = 4;
 80059e8:	2304      	movs	r3, #4
 80059ea:	66bb      	str	r3, [r7, #104]	@ 0x68
    twMod4 = 6;
 80059ec:	2306      	movs	r3, #6
 80059ee:	667b      	str	r3, [r7, #100]	@ 0x64

    /* TOP */
    p1ap3_0 = p1[0] + p3[0];
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	ed93 7a00 	vldr	s14, [r3]
 80059f6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80059fa:	edd3 7a00 	vldr	s15, [r3]
 80059fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a02:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	ed93 7a00 	vldr	s14, [r3]
 8005a0c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a10:	edd3 7a00 	vldr	s15, [r3]
 8005a14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a18:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	3304      	adds	r3, #4
 8005a20:	ed93 7a00 	vldr	s14, [r3]
 8005a24:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a28:	3304      	adds	r3, #4
 8005a2a:	edd3 7a00 	vldr	s15, [r3]
 8005a2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a32:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8005a36:	683b      	ldr	r3, [r7, #0]
 8005a38:	3304      	adds	r3, #4
 8005a3a:	ed93 7a00 	vldr	s14, [r3]
 8005a3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005a42:	3304      	adds	r3, #4
 8005a44:	edd3 7a00 	vldr	s15, [r3]
 8005a48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a4c:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 8005a50:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a54:	3304      	adds	r3, #4
 8005a56:	ed93 7a00 	vldr	s14, [r3]
 8005a5a:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005a5e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005a62:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a66:	3304      	adds	r3, #4
 8005a68:	edd3 7a00 	vldr	s15, [r3]
 8005a6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005a70:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 8005a74:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a78:	edd3 7a00 	vldr	s15, [r3]
 8005a7c:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8005a80:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005a84:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005a88:	edd3 7a00 	vldr	s15, [r3]
 8005a8c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005a90:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005a94:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005a98:	edd3 7a00 	vldr	s15, [r3]
 8005a9c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005aa0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005aa4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aa8:	edd3 7a00 	vldr	s15, [r3]
 8005aac:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ab0:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8005ab4:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ab8:	3304      	adds	r3, #4
 8005aba:	edd3 7a00 	vldr	s15, [r3]
 8005abe:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005ac2:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005ac6:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aca:	3304      	adds	r3, #4
 8005acc:	edd3 7a00 	vldr	s15, [r3]
 8005ad0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ad4:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8005ad8:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005adc:	3304      	adds	r3, #4
 8005ade:	edd3 7a00 	vldr	s15, [r3]
 8005ae2:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005ae6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005aea:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005aee:	3304      	adds	r3, #4
 8005af0:	edd3 7a00 	vldr	s15, [r3]
 8005af4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005af8:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8005afc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b00:	ed93 7a00 	vldr	s14, [r3]
 8005b04:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005b08:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b0c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b10:	edd3 7a00 	vldr	s15, [r3]
 8005b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005b18:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8005b1c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b20:	ed93 7a00 	vldr	s14, [r3]
 8005b24:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005b28:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b30:	edd3 7a00 	vldr	s15, [r3]
 8005b34:	683b      	ldr	r3, [r7, #0]
 8005b36:	1d1a      	adds	r2, r3, #4
 8005b38:	603a      	str	r2, [r7, #0]
 8005b3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b3e:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 8005b42:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b46:	3304      	adds	r3, #4
 8005b48:	ed93 7a00 	vldr	s14, [r3]
 8005b4c:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005b50:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005b54:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005b58:	3304      	adds	r3, #4
 8005b5a:	edd3 7a00 	vldr	s15, [r3]
 8005b5e:	683b      	ldr	r3, [r7, #0]
 8005b60:	1d1a      	adds	r2, r3, #4
 8005b62:	603a      	str	r2, [r7, #0]
 8005b64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005b68:	edc3 7a00 	vstr	s15, [r3]

    /* Twiddle factors are ones */
    *p2++ = t2[0];
 8005b6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b70:	1d1a      	adds	r2, r3, #4
 8005b72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005b76:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b78:	601a      	str	r2, [r3, #0]
    *p2++ = t2[1];
 8005b7a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005b7e:	1d1a      	adds	r2, r3, #4
 8005b80:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005b84:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b86:	601a      	str	r2, [r3, #0]
    *p3++ = t3[0];
 8005b88:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b8c:	1d1a      	adds	r2, r3, #4
 8005b8e:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005b92:	69fa      	ldr	r2, [r7, #28]
 8005b94:	601a      	str	r2, [r3, #0]
    *p3++ = t3[1];
 8005b96:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005b9a:	1d1a      	adds	r2, r3, #4
 8005b9c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005ba0:	6a3a      	ldr	r2, [r7, #32]
 8005ba2:	601a      	str	r2, [r3, #0]
    *p4++ = t4[0];
 8005ba4:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005ba8:	1d1a      	adds	r2, r3, #4
 8005baa:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8005bae:	68fa      	ldr	r2, [r7, #12]
 8005bb0:	601a      	str	r2, [r3, #0]
    *p4++ = t4[1];
 8005bb2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005bb6:	1d1a      	adds	r2, r3, #4
 8005bb8:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8005bbc:	693a      	ldr	r2, [r7, #16]
 8005bbe:	601a      	str	r2, [r3, #0]

    tw2 += twMod2;
 8005bc0:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8005bc2:	009b      	lsls	r3, r3, #2
 8005bc4:	f8d7 209c 	ldr.w	r2, [r7, #156]	@ 0x9c
 8005bc8:	4413      	add	r3, r2
 8005bca:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
    tw3 += twMod3;
 8005bce:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8005bd6:	4413      	add	r3, r2
 8005bd8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
    tw4 += twMod4;
 8005bdc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8005be4:	4413      	add	r3, r2
 8005be6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94

    for (l = (L - 2) >> 1; l > 0; l-- )
 8005bea:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8005bee:	3b02      	subs	r3, #2
 8005bf0:	085b      	lsrs	r3, r3, #1
 8005bf2:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005bf6:	e31c      	b.n	8006232 <arm_cfft_radix8by4_f32+0x8f8>
    {
      /* TOP */
      p1ap3_0 = p1[0] + p3[0];
 8005bf8:	683b      	ldr	r3, [r7, #0]
 8005bfa:	ed93 7a00 	vldr	s14, [r3]
 8005bfe:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c02:	edd3 7a00 	vldr	s15, [r3]
 8005c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c0a:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = p1[0] - p3[0];
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	ed93 7a00 	vldr	s14, [r3]
 8005c14:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c18:	edd3 7a00 	vldr	s15, [r3]
 8005c1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c20:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      p1ap3_1 = p1[1] + p3[1];
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	3304      	adds	r3, #4
 8005c28:	ed93 7a00 	vldr	s14, [r3]
 8005c2c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c30:	3304      	adds	r3, #4
 8005c32:	edd3 7a00 	vldr	s15, [r3]
 8005c36:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c3a:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = p1[1] - p3[1];
 8005c3e:	683b      	ldr	r3, [r7, #0]
 8005c40:	3304      	adds	r3, #4
 8005c42:	ed93 7a00 	vldr	s14, [r3]
 8005c46:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005c4a:	3304      	adds	r3, #4
 8005c4c:	edd3 7a00 	vldr	s15, [r3]
 8005c50:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c54:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      /* col 2 */
      t2[0] = p1sp3_0 + p2[1] - p4[1];
 8005c58:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c5c:	3304      	adds	r3, #4
 8005c5e:	ed93 7a00 	vldr	s14, [r3]
 8005c62:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005c66:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005c6a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c6e:	3304      	adds	r3, #4
 8005c70:	edd3 7a00 	vldr	s15, [r3]
 8005c74:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005c78:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
      t2[1] = p1sp3_1 - p2[0] + p4[0];
 8005c7c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005c80:	edd3 7a00 	vldr	s15, [r3]
 8005c84:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8005c88:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005c8c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005c90:	edd3 7a00 	vldr	s15, [r3]
 8005c94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005c98:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
      /* col 3 */
      t3[0] = p1ap3_0 - p2[0] - p4[0];
 8005c9c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ca0:	edd3 7a00 	vldr	s15, [r3]
 8005ca4:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005ca8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cac:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cb0:	edd3 7a00 	vldr	s15, [r3]
 8005cb4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cb8:	edc7 7a07 	vstr	s15, [r7, #28]
      t3[1] = p1ap3_1 - p2[1] - p4[1];
 8005cbc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005cc0:	3304      	adds	r3, #4
 8005cc2:	edd3 7a00 	vldr	s15, [r3]
 8005cc6:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005cca:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cd2:	3304      	adds	r3, #4
 8005cd4:	edd3 7a00 	vldr	s15, [r3]
 8005cd8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005cdc:	edc7 7a08 	vstr	s15, [r7, #32]
      /* col 4 */
      t4[0] = p1sp3_0 - p2[1] + p4[1];
 8005ce0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005ce4:	3304      	adds	r3, #4
 8005ce6:	edd3 7a00 	vldr	s15, [r3]
 8005cea:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8005cee:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005cf2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005cf6:	3304      	adds	r3, #4
 8005cf8:	edd3 7a00 	vldr	s15, [r3]
 8005cfc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d00:	edc7 7a03 	vstr	s15, [r7, #12]
      t4[1] = p1sp3_1 + p2[0] - p4[0];
 8005d04:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d08:	ed93 7a00 	vldr	s14, [r3]
 8005d0c:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005d10:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d14:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d18:	edd3 7a00 	vldr	s15, [r3]
 8005d1c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005d20:	edc7 7a04 	vstr	s15, [r7, #16]
      /* col 1 - top */
      *p1++ = p1ap3_0 + p2[0] + p4[0];
 8005d24:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d28:	ed93 7a00 	vldr	s14, [r3]
 8005d2c:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005d30:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d34:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d38:	edd3 7a00 	vldr	s15, [r3]
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	1d1a      	adds	r2, r3, #4
 8005d40:	603a      	str	r2, [r7, #0]
 8005d42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d46:	edc3 7a00 	vstr	s15, [r3]
      *p1++ = p1ap3_1 + p2[1] + p4[1];
 8005d4a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005d4e:	3304      	adds	r3, #4
 8005d50:	ed93 7a00 	vldr	s14, [r3]
 8005d54:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005d58:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005d5c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8005d60:	3304      	adds	r3, #4
 8005d62:	edd3 7a00 	vldr	s15, [r3]
 8005d66:	683b      	ldr	r3, [r7, #0]
 8005d68:	1d1a      	adds	r2, r3, #4
 8005d6a:	603a      	str	r2, [r7, #0]
 8005d6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d70:	edc3 7a00 	vstr	s15, [r3]

      /* BOTTOM */
      p1ap3_1 = pEnd1[-1] + pEnd3[-1];
 8005d74:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d78:	3b04      	subs	r3, #4
 8005d7a:	ed93 7a00 	vldr	s14, [r3]
 8005d7e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d82:	3b04      	subs	r3, #4
 8005d84:	edd3 7a00 	vldr	s15, [r3]
 8005d88:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005d8c:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
      p1sp3_1 = pEnd1[-1] - pEnd3[-1];
 8005d90:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005d94:	3b04      	subs	r3, #4
 8005d96:	ed93 7a00 	vldr	s14, [r3]
 8005d9a:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005d9e:	3b04      	subs	r3, #4
 8005da0:	edd3 7a00 	vldr	s15, [r3]
 8005da4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005da8:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54
      p1ap3_0 = pEnd1[ 0] + pEnd3[0];
 8005dac:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005db0:	ed93 7a00 	vldr	s14, [r3]
 8005db4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005db8:	edd3 7a00 	vldr	s15, [r3]
 8005dbc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005dc0:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
      p1sp3_0 = pEnd1[ 0] - pEnd3[0];
 8005dc4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005dc8:	ed93 7a00 	vldr	s14, [r3]
 8005dcc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005dd0:	edd3 7a00 	vldr	s15, [r3]
 8005dd4:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005dd8:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
      /* col 2 */
      t2[2] = pEnd2[0] - pEnd4[0] + p1sp3_1;
 8005ddc:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005de0:	ed93 7a00 	vldr	s14, [r3]
 8005de4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005de8:	edd3 7a00 	vldr	s15, [r3]
 8005dec:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005df0:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005df4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005df8:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
      t2[3] = pEnd1[0] - pEnd3[0] - pEnd2[-1] + pEnd4[-1];
 8005dfc:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005e00:	ed93 7a00 	vldr	s14, [r3]
 8005e04:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8005e08:	edd3 7a00 	vldr	s15, [r3]
 8005e0c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e10:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e14:	3b04      	subs	r3, #4
 8005e16:	edd3 7a00 	vldr	s15, [r3]
 8005e1a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e1e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e22:	3b04      	subs	r3, #4
 8005e24:	edd3 7a00 	vldr	s15, [r3]
 8005e28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005e2c:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
      /* col 3 */
      t3[2] = p1ap3_1 - pEnd2[-1] - pEnd4[-1];
 8005e30:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e34:	3b04      	subs	r3, #4
 8005e36:	edd3 7a00 	vldr	s15, [r3]
 8005e3a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8005e3e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e46:	3b04      	subs	r3, #4
 8005e48:	edd3 7a00 	vldr	s15, [r3]
 8005e4c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e50:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t3[3] = p1ap3_0 - pEnd2[ 0] - pEnd4[ 0];
 8005e54:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e58:	edd3 7a00 	vldr	s15, [r3]
 8005e5c:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8005e60:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e64:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e68:	edd3 7a00 	vldr	s15, [r3]
 8005e6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e70:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
      /* col 4 */
      t4[2] = pEnd2[ 0] - pEnd4[ 0] - p1sp3_1;
 8005e74:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005e78:	ed93 7a00 	vldr	s14, [r3]
 8005e7c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e80:	edd3 7a00 	vldr	s15, [r3]
 8005e84:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005e88:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8005e8c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005e90:	edc7 7a05 	vstr	s15, [r7, #20]
      t4[3] = pEnd4[-1] - pEnd2[-1] - p1sp3_0;
 8005e94:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005e98:	3b04      	subs	r3, #4
 8005e9a:	ed93 7a00 	vldr	s14, [r3]
 8005e9e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ea2:	3b04      	subs	r3, #4
 8005ea4:	edd3 7a00 	vldr	s15, [r3]
 8005ea8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8005eac:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 8005eb0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005eb4:	edc7 7a06 	vstr	s15, [r7, #24]
      /* col 1 - Bottom */
      *pEnd1-- = p1ap3_0 + pEnd2[ 0] + pEnd4[ 0];
 8005eb8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ebc:	ed93 7a00 	vldr	s14, [r3]
 8005ec0:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8005ec4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ec8:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ecc:	edd3 7a00 	vldr	s15, [r3]
 8005ed0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005ed4:	1f1a      	subs	r2, r3, #4
 8005ed6:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005eda:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005ede:	edc3 7a00 	vstr	s15, [r3]
      *pEnd1-- = p1ap3_1 + pEnd2[-1] + pEnd4[-1];
 8005ee2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ee6:	3b04      	subs	r3, #4
 8005ee8:	ed93 7a00 	vldr	s14, [r3]
 8005eec:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 8005ef0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8005ef4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005ef8:	3b04      	subs	r3, #4
 8005efa:	edd3 7a00 	vldr	s15, [r3]
 8005efe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8005f02:	1f1a      	subs	r2, r3, #4
 8005f04:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005f08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f0c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 2 */
      /* read twiddle factors */
      twR = *tw2++;
 8005f10:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f14:	1d1a      	adds	r2, r3, #4
 8005f16:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = *tw2++;
 8005f1e:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f22:	1d1a      	adds	r2, r3, #4
 8005f24:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8005f28:	681b      	ldr	r3, [r3, #0]
 8005f2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      /* multiply by twiddle factors */
      /*  let    Z1 = a + i(b),   Z2 = c + i(d) */
      /*   =>  Z1 * Z2  =  (a*c - b*d) + i(b*c + a*d) */

      /* Top */
      m0 = t2[0] * twR;
 8005f2c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005f30:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005f34:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f38:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[1] * twI;
 8005f3c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005f40:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005f44:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f48:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[1] * twR;
 8005f4c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8005f50:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f58:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[0] * twI;
 8005f5c:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8005f60:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005f64:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005f68:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p2++ = m0 + m1;
 8005f6c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f70:	1d1a      	adds	r2, r3, #4
 8005f72:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005f76:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005f7a:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005f7e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8005f82:	edc3 7a00 	vstr	s15, [r3]
      *p2++ = m2 - m3;
 8005f86:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8005f8a:	1d1a      	adds	r2, r3, #4
 8005f8c:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8005f90:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8005f94:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8005f98:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005f9c:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 2 */
      /* 0.9997 - 0.0245i  <==>  0.0245 - 0.9997i */
      /* Bottom */
      m0 = t2[3] * twI;
 8005fa0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005fa4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005fa8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fac:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t2[2] * twR;
 8005fb0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005fb4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005fb8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fbc:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t2[2] * twI;
 8005fc0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8005fc4:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8005fc8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fcc:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t2[3] * twR;
 8005fd0:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8005fd4:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8005fd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8005fdc:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd2-- = m0 - m1;
 8005fe0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005fe4:	1f1a      	subs	r2, r3, #4
 8005fe6:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005fea:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8005fee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8005ff2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8005ff6:	edc3 7a00 	vstr	s15, [r3]
      *pEnd2-- = m2 + m3;
 8005ffa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8005ffe:	1f1a      	subs	r2, r3, #4
 8006000:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006004:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8006008:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800600c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006010:	edc3 7a00 	vstr	s15, [r3]

      /* COL 3 */
      twR = tw3[0];
 8006014:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006018:	681b      	ldr	r3, [r3, #0]
 800601a:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw3[1];
 800601c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006020:	3304      	adds	r3, #4
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw3 += twMod3;
 8006026:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006028:	009b      	lsls	r3, r3, #2
 800602a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800602e:	4413      	add	r3, r2
 8006030:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
      /* Top */
      m0 = t3[0] * twR;
 8006034:	edd7 7a07 	vldr	s15, [r7, #28]
 8006038:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800603c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006040:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t3[1] * twI;
 8006044:	edd7 7a08 	vldr	s15, [r7, #32]
 8006048:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800604c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006050:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t3[1] * twR;
 8006054:	edd7 7a08 	vldr	s15, [r7, #32]
 8006058:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 800605c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006060:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t3[0] * twI;
 8006064:	edd7 7a07 	vldr	s15, [r7, #28]
 8006068:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800606c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006070:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p3++ = m0 + m1;
 8006074:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006078:	1d1a      	adds	r2, r3, #4
 800607a:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800607e:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006082:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006086:	ee77 7a27 	vadd.f32	s15, s14, s15
 800608a:	edc3 7a00 	vstr	s15, [r3]
      *p3++ = m2 - m3;
 800608e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006092:	1d1a      	adds	r2, r3, #4
 8006094:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006098:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800609c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80060a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80060a4:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 3 */
      /* 0.9988 - 0.0491i  <==>  -0.9988 - 0.0491i */
      /* Bottom */
      m0 = -t3[3] * twR;
 80060a8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80060ac:	eef1 7a67 	vneg.f32	s15, s15
 80060b0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80060b4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060b8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 =  t3[2] * twI;
 80060bc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80060c0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80060c4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060c8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 =  t3[2] * twR;
 80060cc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80060d0:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80060d4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060d8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 =  t3[3] * twI;
 80060dc:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80060e0:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80060e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80060e8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd3-- = m0 - m1;
 80060ec:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80060f0:	1f1a      	subs	r2, r3, #4
 80060f2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80060f6:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 80060fa:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80060fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006102:	edc3 7a00 	vstr	s15, [r3]
      *pEnd3-- = m3 - m2;
 8006106:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 800610a:	1f1a      	subs	r2, r3, #4
 800610c:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006110:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8006114:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8006118:	ee77 7a67 	vsub.f32	s15, s14, s15
 800611c:	edc3 7a00 	vstr	s15, [r3]

      /* COL 4 */
      twR = tw4[0];
 8006120:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	653b      	str	r3, [r7, #80]	@ 0x50
      twI = tw4[1];
 8006128:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800612c:	3304      	adds	r3, #4
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	64fb      	str	r3, [r7, #76]	@ 0x4c
      tw4 += twMod4;
 8006132:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006134:	009b      	lsls	r3, r3, #2
 8006136:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800613a:	4413      	add	r3, r2
 800613c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      /* Top */
      m0 = t4[0] * twR;
 8006140:	edd7 7a03 	vldr	s15, [r7, #12]
 8006144:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[1] * twI;
 8006150:	edd7 7a04 	vldr	s15, [r7, #16]
 8006154:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8006158:	ee67 7a27 	vmul.f32	s15, s14, s15
 800615c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[1] * twR;
 8006160:	edd7 7a04 	vldr	s15, [r7, #16]
 8006164:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006168:	ee67 7a27 	vmul.f32	s15, s14, s15
 800616c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[0] * twI;
 8006170:	edd7 7a03 	vldr	s15, [r7, #12]
 8006174:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8006178:	ee67 7a27 	vmul.f32	s15, s14, s15
 800617c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *p4++ = m0 + m1;
 8006180:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006184:	1d1a      	adds	r2, r3, #4
 8006186:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800618a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800618e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006192:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006196:	edc3 7a00 	vstr	s15, [r3]
      *p4++ = m2 - m3;
 800619a:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800619e:	1d1a      	adds	r2, r3, #4
 80061a0:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 80061a4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80061a8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80061ac:	ee77 7a67 	vsub.f32	s15, s14, s15
 80061b0:	edc3 7a00 	vstr	s15, [r3]
      /* use vertical symmetry col 4 */
      /* 0.9973 - 0.0736i  <==>  -0.0736 + 0.9973i */
      /* Bottom */
      m0 = t4[3] * twI;
 80061b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061b8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80061bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061c0:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
      m1 = t4[2] * twR;
 80061c4:	edd7 7a05 	vldr	s15, [r7, #20]
 80061c8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80061cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061d0:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
      m2 = t4[2] * twI;
 80061d4:	edd7 7a05 	vldr	s15, [r7, #20]
 80061d8:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80061dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061e0:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
      m3 = t4[3] * twR;
 80061e4:	edd7 7a06 	vldr	s15, [r7, #24]
 80061e8:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80061ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061f0:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

      *pEnd4-- = m0 - m1;
 80061f4:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80061f8:	1f1a      	subs	r2, r3, #4
 80061fa:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 80061fe:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006202:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800620a:	edc3 7a00 	vstr	s15, [r3]
      *pEnd4-- = m2 + m3;
 800620e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8006212:	1f1a      	subs	r2, r3, #4
 8006214:	f8c7 20a0 	str.w	r2, [r7, #160]	@ 0xa0
 8006218:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800621c:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006220:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006224:	edc3 7a00 	vstr	s15, [r3]
    for (l = (L - 2) >> 1; l > 0; l-- )
 8006228:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800622c:	3b01      	subs	r3, #1
 800622e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006232:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006236:	2b00      	cmp	r3, #0
 8006238:	f47f acde 	bne.w	8005bf8 <arm_cfft_radix8by4_f32+0x2be>
    }

    /* MIDDLE */
    /* Twiddle factors are */
    /*  1.0000  0.7071-0.7071i  -1.0000i  -0.7071-0.7071i */
    p1ap3_0 = p1[0] + p3[0];
 800623c:	683b      	ldr	r3, [r7, #0]
 800623e:	ed93 7a00 	vldr	s14, [r3]
 8006242:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006246:	edd3 7a00 	vldr	s15, [r3]
 800624a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800624e:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
    p1sp3_0 = p1[0] - p3[0];
 8006252:	683b      	ldr	r3, [r7, #0]
 8006254:	ed93 7a00 	vldr	s14, [r3]
 8006258:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800625c:	edd3 7a00 	vldr	s15, [r3]
 8006260:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006264:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
    p1ap3_1 = p1[1] + p3[1];
 8006268:	683b      	ldr	r3, [r7, #0]
 800626a:	3304      	adds	r3, #4
 800626c:	ed93 7a00 	vldr	s14, [r3]
 8006270:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006274:	3304      	adds	r3, #4
 8006276:	edd3 7a00 	vldr	s15, [r3]
 800627a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800627e:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
    p1sp3_1 = p1[1] - p3[1];
 8006282:	683b      	ldr	r3, [r7, #0]
 8006284:	3304      	adds	r3, #4
 8006286:	ed93 7a00 	vldr	s14, [r3]
 800628a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800628e:	3304      	adds	r3, #4
 8006290:	edd3 7a00 	vldr	s15, [r3]
 8006294:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006298:	edc7 7a15 	vstr	s15, [r7, #84]	@ 0x54

    /* col 2 */
    t2[0] = p1sp3_0 + p2[1] - p4[1];
 800629c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062a0:	3304      	adds	r3, #4
 80062a2:	ed93 7a00 	vldr	s14, [r3]
 80062a6:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80062aa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80062ae:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062b2:	3304      	adds	r3, #4
 80062b4:	edd3 7a00 	vldr	s15, [r3]
 80062b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062bc:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c
    t2[1] = p1sp3_1 - p2[0] + p4[0];
 80062c0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062c4:	edd3 7a00 	vldr	s15, [r3]
 80062c8:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 80062cc:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062d4:	edd3 7a00 	vldr	s15, [r3]
 80062d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80062dc:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
    /* col 3 */
    t3[0] = p1ap3_0 - p2[0] - p4[0];
 80062e0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80062e4:	edd3 7a00 	vldr	s15, [r3]
 80062e8:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80062ec:	ee37 7a67 	vsub.f32	s14, s14, s15
 80062f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80062fc:	edc7 7a07 	vstr	s15, [r7, #28]
    t3[1] = p1ap3_1 - p2[1] - p4[1];
 8006300:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006304:	3304      	adds	r3, #4
 8006306:	edd3 7a00 	vldr	s15, [r3]
 800630a:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 800630e:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006312:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006316:	3304      	adds	r3, #4
 8006318:	edd3 7a00 	vldr	s15, [r3]
 800631c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006320:	edc7 7a08 	vstr	s15, [r7, #32]
    /* col 4 */
    t4[0] = p1sp3_0 - p2[1] + p4[1];
 8006324:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006328:	3304      	adds	r3, #4
 800632a:	edd3 7a00 	vldr	s15, [r3]
 800632e:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 8006332:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006336:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800633a:	3304      	adds	r3, #4
 800633c:	edd3 7a00 	vldr	s15, [r3]
 8006340:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006344:	edc7 7a03 	vstr	s15, [r7, #12]
    t4[1] = p1sp3_1 + p2[0] - p4[0];
 8006348:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800634c:	ed93 7a00 	vldr	s14, [r3]
 8006350:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8006354:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006358:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800635c:	edd3 7a00 	vldr	s15, [r3]
 8006360:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006364:	edc7 7a04 	vstr	s15, [r7, #16]
    /* col 1 - Top */
    *p1++ = p1ap3_0 + p2[0] + p4[0];
 8006368:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800636c:	ed93 7a00 	vldr	s14, [r3]
 8006370:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 8006374:	ee37 7a27 	vadd.f32	s14, s14, s15
 8006378:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800637c:	edd3 7a00 	vldr	s15, [r3]
 8006380:	683b      	ldr	r3, [r7, #0]
 8006382:	1d1a      	adds	r2, r3, #4
 8006384:	603a      	str	r2, [r7, #0]
 8006386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800638a:	edc3 7a00 	vstr	s15, [r3]
    *p1++ = p1ap3_1 + p2[1] + p4[1];
 800638e:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006392:	3304      	adds	r3, #4
 8006394:	ed93 7a00 	vldr	s14, [r3]
 8006398:	edd7 7a16 	vldr	s15, [r7, #88]	@ 0x58
 800639c:	ee37 7a27 	vadd.f32	s14, s14, s15
 80063a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80063a4:	3304      	adds	r3, #4
 80063a6:	edd3 7a00 	vldr	s15, [r3]
 80063aa:	683b      	ldr	r3, [r7, #0]
 80063ac:	1d1a      	adds	r2, r3, #4
 80063ae:	603a      	str	r2, [r7, #0]
 80063b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80063b4:	edc3 7a00 	vstr	s15, [r3]

    /* COL 2 */
    twR = tw2[0];
 80063b8:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw2[1];
 80063c0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80063c4:	3304      	adds	r3, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t2[0] * twR;
 80063ca:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80063ce:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80063d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063d6:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t2[1] * twI;
 80063da:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80063de:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80063e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063e6:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t2[1] * twR;
 80063ea:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80063ee:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80063f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80063f6:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t2[0] * twI;
 80063fa:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 80063fe:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8006402:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006406:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p2++ = m0 + m1;
 800640a:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 800640e:	1d1a      	adds	r2, r3, #4
 8006410:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 8006414:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006418:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 800641c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006420:	edc3 7a00 	vstr	s15, [r3]
    *p2++ = m2 - m3;
 8006424:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8006428:	1d1a      	adds	r2, r3, #4
 800642a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800642e:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 8006432:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006436:	ee77 7a67 	vsub.f32	s15, s14, s15
 800643a:	edc3 7a00 	vstr	s15, [r3]
    /* COL 3 */
    twR = tw3[0];
 800643e:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw3[1];
 8006446:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800644a:	3304      	adds	r3, #4
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t3[0] * twR;
 8006450:	edd7 7a07 	vldr	s15, [r7, #28]
 8006454:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800645c:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t3[1] * twI;
 8006460:	edd7 7a08 	vldr	s15, [r7, #32]
 8006464:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8006468:	ee67 7a27 	vmul.f32	s15, s14, s15
 800646c:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t3[1] * twR;
 8006470:	edd7 7a08 	vldr	s15, [r7, #32]
 8006474:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8006478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800647c:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t3[0] * twI;
 8006480:	edd7 7a07 	vldr	s15, [r7, #28]
 8006484:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 8006488:	ee67 7a27 	vmul.f32	s15, s14, s15
 800648c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p3++ = m0 + m1;
 8006490:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8006494:	1d1a      	adds	r2, r3, #4
 8006496:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800649a:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800649e:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 80064a2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80064a6:	edc3 7a00 	vstr	s15, [r3]
    *p3++ = m2 - m3;
 80064aa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80064ae:	1d1a      	adds	r2, r3, #4
 80064b0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80064b4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80064b8:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 80064bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80064c0:	edc3 7a00 	vstr	s15, [r3]
    /* COL 4 */
    twR = tw4[0];
 80064c4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	653b      	str	r3, [r7, #80]	@ 0x50
    twI = tw4[1];
 80064cc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 80064d0:	3304      	adds	r3, #4
 80064d2:	681b      	ldr	r3, [r3, #0]
 80064d4:	64fb      	str	r3, [r7, #76]	@ 0x4c

    m0 = t4[0] * twR;
 80064d6:	edd7 7a03 	vldr	s15, [r7, #12]
 80064da:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80064de:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064e2:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
    m1 = t4[1] * twI;
 80064e6:	edd7 7a04 	vldr	s15, [r7, #16]
 80064ea:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 80064ee:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064f2:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
    m2 = t4[1] * twR;
 80064f6:	edd7 7a04 	vldr	s15, [r7, #16]
 80064fa:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80064fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006502:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
    m3 = t4[0] * twI;
 8006506:	edd7 7a03 	vldr	s15, [r7, #12]
 800650a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800650e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006512:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c

    *p4++ = m0 + m1;
 8006516:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800651a:	1d1a      	adds	r2, r3, #4
 800651c:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 8006520:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8006524:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8006528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800652c:	edc3 7a00 	vstr	s15, [r3]
    *p4++ = m2 - m3;
 8006530:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006534:	1d1a      	adds	r2, r3, #4
 8006536:	f8c7 2088 	str.w	r2, [r7, #136]	@ 0x88
 800653a:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 800653e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8006542:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006546:	edc3 7a00 	vstr	s15, [r3]

    /* first col */
    arm_radix8_butterfly_f32 (pCol1, L, (float32_t *) S->pTwiddle, 4U);
 800654a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800654e:	b299      	uxth	r1, r3
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	685a      	ldr	r2, [r3, #4]
 8006554:	2304      	movs	r3, #4
 8006556:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8006558:	f000 f8da 	bl	8006710 <arm_radix8_butterfly_f32>

    /* second col */
    arm_radix8_butterfly_f32 (pCol2, L, (float32_t *) S->pTwiddle, 4U);
 800655c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006560:	b299      	uxth	r1, r3
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	685a      	ldr	r2, [r3, #4]
 8006566:	2304      	movs	r3, #4
 8006568:	6fb8      	ldr	r0, [r7, #120]	@ 0x78
 800656a:	f000 f8d1 	bl	8006710 <arm_radix8_butterfly_f32>

    /* third col */
    arm_radix8_butterfly_f32 (pCol3, L, (float32_t *) S->pTwiddle, 4U);
 800656e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006572:	b299      	uxth	r1, r3
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	685a      	ldr	r2, [r3, #4]
 8006578:	2304      	movs	r3, #4
 800657a:	6f78      	ldr	r0, [r7, #116]	@ 0x74
 800657c:	f000 f8c8 	bl	8006710 <arm_radix8_butterfly_f32>

    /* fourth col */
    arm_radix8_butterfly_f32 (pCol4, L, (float32_t *) S->pTwiddle, 4U);
 8006580:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8006584:	b299      	uxth	r1, r3
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	685a      	ldr	r2, [r3, #4]
 800658a:	2304      	movs	r3, #4
 800658c:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 800658e:	f000 f8bf 	bl	8006710 <arm_radix8_butterfly_f32>
}
 8006592:	bf00      	nop
 8006594:	37b0      	adds	r7, #176	@ 0xb0
 8006596:	46bd      	mov	sp, r7
 8006598:	bd80      	pop	{r7, pc}

0800659a <arm_cfft_f32>:
void arm_cfft_f32(
  const arm_cfft_instance_f32 * S,
        float32_t * p1,
        uint8_t ifftFlag,
        uint8_t bitReverseFlag)
{
 800659a:	b580      	push	{r7, lr}
 800659c:	b088      	sub	sp, #32
 800659e:	af00      	add	r7, sp, #0
 80065a0:	60f8      	str	r0, [r7, #12]
 80065a2:	60b9      	str	r1, [r7, #8]
 80065a4:	4611      	mov	r1, r2
 80065a6:	461a      	mov	r2, r3
 80065a8:	460b      	mov	r3, r1
 80065aa:	71fb      	strb	r3, [r7, #7]
 80065ac:	4613      	mov	r3, r2
 80065ae:	71bb      	strb	r3, [r7, #6]
  uint32_t  L = S->fftLen, l;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	881b      	ldrh	r3, [r3, #0]
 80065b4:	617b      	str	r3, [r7, #20]
  float32_t invL, * pSrc;

  if (ifftFlag == 1U)
 80065b6:	79fb      	ldrb	r3, [r7, #7]
 80065b8:	2b01      	cmp	r3, #1
 80065ba:	d117      	bne.n	80065ec <arm_cfft_f32+0x52>
  {
    /* Conjugate input data */
    pSrc = p1 + 1;
 80065bc:	68bb      	ldr	r3, [r7, #8]
 80065be:	3304      	adds	r3, #4
 80065c0:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80065c2:	2300      	movs	r3, #0
 80065c4:	61fb      	str	r3, [r7, #28]
 80065c6:	e00d      	b.n	80065e4 <arm_cfft_f32+0x4a>
    {
      *pSrc = -*pSrc;
 80065c8:	69bb      	ldr	r3, [r7, #24]
 80065ca:	edd3 7a00 	vldr	s15, [r3]
 80065ce:	eef1 7a67 	vneg.f32	s15, s15
 80065d2:	69bb      	ldr	r3, [r7, #24]
 80065d4:	edc3 7a00 	vstr	s15, [r3]
      pSrc += 2;
 80065d8:	69bb      	ldr	r3, [r7, #24]
 80065da:	3308      	adds	r3, #8
 80065dc:	61bb      	str	r3, [r7, #24]
    for (l = 0; l < L; l++)
 80065de:	69fb      	ldr	r3, [r7, #28]
 80065e0:	3301      	adds	r3, #1
 80065e2:	61fb      	str	r3, [r7, #28]
 80065e4:	69fa      	ldr	r2, [r7, #28]
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	429a      	cmp	r2, r3
 80065ea:	d3ed      	bcc.n	80065c8 <arm_cfft_f32+0x2e>
    }
  }

  switch (L)
 80065ec:	697b      	ldr	r3, [r7, #20]
 80065ee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065f2:	d040      	beq.n	8006676 <arm_cfft_f32+0xdc>
 80065f4:	697b      	ldr	r3, [r7, #20]
 80065f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80065fa:	d845      	bhi.n	8006688 <arm_cfft_f32+0xee>
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006602:	d033      	beq.n	800666c <arm_cfft_f32+0xd2>
 8006604:	697b      	ldr	r3, [r7, #20]
 8006606:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800660a:	d83d      	bhi.n	8006688 <arm_cfft_f32+0xee>
 800660c:	697b      	ldr	r3, [r7, #20]
 800660e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006612:	d026      	beq.n	8006662 <arm_cfft_f32+0xc8>
 8006614:	697b      	ldr	r3, [r7, #20]
 8006616:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800661a:	d835      	bhi.n	8006688 <arm_cfft_f32+0xee>
 800661c:	697b      	ldr	r3, [r7, #20]
 800661e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006622:	d028      	beq.n	8006676 <arm_cfft_f32+0xdc>
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800662a:	d82d      	bhi.n	8006688 <arm_cfft_f32+0xee>
 800662c:	697b      	ldr	r3, [r7, #20]
 800662e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006632:	d01b      	beq.n	800666c <arm_cfft_f32+0xd2>
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800663a:	d825      	bhi.n	8006688 <arm_cfft_f32+0xee>
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	2b80      	cmp	r3, #128	@ 0x80
 8006640:	d00f      	beq.n	8006662 <arm_cfft_f32+0xc8>
 8006642:	697b      	ldr	r3, [r7, #20]
 8006644:	2b80      	cmp	r3, #128	@ 0x80
 8006646:	d81f      	bhi.n	8006688 <arm_cfft_f32+0xee>
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	2b40      	cmp	r3, #64	@ 0x40
 800664c:	d013      	beq.n	8006676 <arm_cfft_f32+0xdc>
 800664e:	697b      	ldr	r3, [r7, #20]
 8006650:	2b40      	cmp	r3, #64	@ 0x40
 8006652:	d819      	bhi.n	8006688 <arm_cfft_f32+0xee>
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	2b10      	cmp	r3, #16
 8006658:	d003      	beq.n	8006662 <arm_cfft_f32+0xc8>
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	2b20      	cmp	r3, #32
 800665e:	d005      	beq.n	800666c <arm_cfft_f32+0xd2>
 8006660:	e012      	b.n	8006688 <arm_cfft_f32+0xee>
  {
  case 16:
  case 128:
  case 1024:
    arm_cfft_radix8by2_f32 ( (arm_cfft_instance_f32 *) S, p1);
 8006662:	68b9      	ldr	r1, [r7, #8]
 8006664:	68f8      	ldr	r0, [r7, #12]
 8006666:	f7fe ff74 	bl	8005552 <arm_cfft_radix8by2_f32>
    break;
 800666a:	e00d      	b.n	8006688 <arm_cfft_f32+0xee>
  case 32:
  case 256:
  case 2048:
    arm_cfft_radix8by4_f32 ( (arm_cfft_instance_f32 *) S, p1);
 800666c:	68b9      	ldr	r1, [r7, #8]
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f7ff f963 	bl	800593a <arm_cfft_radix8by4_f32>
    break;
 8006674:	e008      	b.n	8006688 <arm_cfft_f32+0xee>
  case 64:
  case 512:
  case 4096:
    arm_radix8_butterfly_f32 ( p1, L, (float32_t *) S->pTwiddle, 1);
 8006676:	697b      	ldr	r3, [r7, #20]
 8006678:	b299      	uxth	r1, r3
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	2301      	movs	r3, #1
 8006680:	68b8      	ldr	r0, [r7, #8]
 8006682:	f000 f845 	bl	8006710 <arm_radix8_butterfly_f32>
    break;
 8006686:	bf00      	nop
  }

  if ( bitReverseFlag )
 8006688:	79bb      	ldrb	r3, [r7, #6]
 800668a:	2b00      	cmp	r3, #0
 800668c:	d007      	beq.n	800669e <arm_cfft_f32+0x104>
    arm_bitreversal_32 ((uint32_t*) p1, S->bitRevLength, S->pBitRevTable);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	8999      	ldrh	r1, [r3, #12]
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	689b      	ldr	r3, [r3, #8]
 8006696:	461a      	mov	r2, r3
 8006698:	68b8      	ldr	r0, [r7, #8]
 800669a:	f7fe ff01 	bl	80054a0 <arm_bitreversal_32>

  if (ifftFlag == 1U)
 800669e:	79fb      	ldrb	r3, [r7, #7]
 80066a0:	2b01      	cmp	r3, #1
 80066a2:	d130      	bne.n	8006706 <arm_cfft_f32+0x16c>
  {
    invL = 1.0f / (float32_t)L;
 80066a4:	697b      	ldr	r3, [r7, #20]
 80066a6:	ee07 3a90 	vmov	s15, r3
 80066aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80066ae:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80066b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80066b6:	edc7 7a04 	vstr	s15, [r7, #16]

    /* Conjugate and scale output data */
    pSrc = p1;
 80066ba:	68bb      	ldr	r3, [r7, #8]
 80066bc:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80066be:	2300      	movs	r3, #0
 80066c0:	61fb      	str	r3, [r7, #28]
 80066c2:	e01c      	b.n	80066fe <arm_cfft_f32+0x164>
    {
      *pSrc++ *=   invL ;
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	1d1a      	adds	r2, r3, #4
 80066c8:	61ba      	str	r2, [r7, #24]
 80066ca:	ed93 7a00 	vldr	s14, [r3]
 80066ce:	edd7 7a04 	vldr	s15, [r7, #16]
 80066d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066d6:	edc3 7a00 	vstr	s15, [r3]
      *pSrc    = -(*pSrc) * invL;
 80066da:	69bb      	ldr	r3, [r7, #24]
 80066dc:	edd3 7a00 	vldr	s15, [r3]
 80066e0:	eeb1 7a67 	vneg.f32	s14, s15
 80066e4:	edd7 7a04 	vldr	s15, [r7, #16]
 80066e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80066ec:	69bb      	ldr	r3, [r7, #24]
 80066ee:	edc3 7a00 	vstr	s15, [r3]
      pSrc++;
 80066f2:	69bb      	ldr	r3, [r7, #24]
 80066f4:	3304      	adds	r3, #4
 80066f6:	61bb      	str	r3, [r7, #24]
    for (l= 0; l < L; l++)
 80066f8:	69fb      	ldr	r3, [r7, #28]
 80066fa:	3301      	adds	r3, #1
 80066fc:	61fb      	str	r3, [r7, #28]
 80066fe:	69fa      	ldr	r2, [r7, #28]
 8006700:	697b      	ldr	r3, [r7, #20]
 8006702:	429a      	cmp	r2, r3
 8006704:	d3de      	bcc.n	80066c4 <arm_cfft_f32+0x12a>
    }
  }
}
 8006706:	bf00      	nop
 8006708:	3720      	adds	r7, #32
 800670a:	46bd      	mov	sp, r7
 800670c:	bd80      	pop	{r7, pc}
	...

08006710 <arm_radix8_butterfly_f32>:
void arm_radix8_butterfly_f32(
  float32_t * pSrc,
  uint16_t fftLen,
  const float32_t * pCoef,
  uint16_t twidCoefModifier)
{
 8006710:	b480      	push	{r7}
 8006712:	b0bd      	sub	sp, #244	@ 0xf4
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	607a      	str	r2, [r7, #4]
 800671a:	461a      	mov	r2, r3
 800671c:	460b      	mov	r3, r1
 800671e:	817b      	strh	r3, [r7, #10]
 8006720:	4613      	mov	r3, r2
 8006722:	813b      	strh	r3, [r7, #8]
   float32_t t1, t2;
   float32_t s1, s2, s3, s4, s5, s6, s7, s8;
   float32_t p1, p2, p3, p4;
   float32_t co2, co3, co4, co5, co6, co7, co8;
   float32_t si2, si3, si4, si5, si6, si7, si8;
   const float32_t C81 = 0.70710678118f;
 8006724:	4b09      	ldr	r3, [pc, #36]	@ (800674c <arm_radix8_butterfly_f32+0x3c>)
 8006726:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

   n2 = fftLen;
 800672a:	897b      	ldrh	r3, [r7, #10]
 800672c:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4

   do
   {
      n1 = n2;
 8006730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006734:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
      n2 = n2 >> 3;
 8006738:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800673c:	08db      	lsrs	r3, r3, #3
 800673e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
      i1 = 0;
 8006742:	2300      	movs	r3, #0
 8006744:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8006748:	e002      	b.n	8006750 <arm_radix8_butterfly_f32+0x40>
 800674a:	bf00      	nop
 800674c:	3f3504f3 	.word	0x3f3504f3

      do
      {
         i2 = i1 + n2;
 8006750:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006754:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006758:	4413      	add	r3, r2
 800675a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
         i3 = i2 + n2;
 800675e:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006762:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006766:	4413      	add	r3, r2
 8006768:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
         i4 = i3 + n2;
 800676c:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006770:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006774:	4413      	add	r3, r2
 8006776:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
         i5 = i4 + n2;
 800677a:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 800677e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006782:	4413      	add	r3, r2
 8006784:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
         i6 = i5 + n2;
 8006788:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 800678c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006790:	4413      	add	r3, r2
 8006792:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
         i7 = i6 + n2;
 8006796:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800679a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800679e:	4413      	add	r3, r2
 80067a0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
         i8 = i7 + n2;
 80067a4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80067a8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80067ac:	4413      	add	r3, r2
 80067ae:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
         r1 = pSrc[2 * i1] + pSrc[2 * i5];
 80067b2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067b6:	00db      	lsls	r3, r3, #3
 80067b8:	68fa      	ldr	r2, [r7, #12]
 80067ba:	4413      	add	r3, r2
 80067bc:	ed93 7a00 	vldr	s14, [r3]
 80067c0:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067c4:	00db      	lsls	r3, r3, #3
 80067c6:	68fa      	ldr	r2, [r7, #12]
 80067c8:	4413      	add	r3, r2
 80067ca:	edd3 7a00 	vldr	s15, [r3]
 80067ce:	ee77 7a27 	vadd.f32	s15, s14, s15
 80067d2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r5 = pSrc[2 * i1] - pSrc[2 * i5];
 80067d6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80067da:	00db      	lsls	r3, r3, #3
 80067dc:	68fa      	ldr	r2, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	ed93 7a00 	vldr	s14, [r3]
 80067e4:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80067e8:	00db      	lsls	r3, r3, #3
 80067ea:	68fa      	ldr	r2, [r7, #12]
 80067ec:	4413      	add	r3, r2
 80067ee:	edd3 7a00 	vldr	s15, [r3]
 80067f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80067f6:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r2 = pSrc[2 * i2] + pSrc[2 * i6];
 80067fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80067fe:	00db      	lsls	r3, r3, #3
 8006800:	68fa      	ldr	r2, [r7, #12]
 8006802:	4413      	add	r3, r2
 8006804:	ed93 7a00 	vldr	s14, [r3]
 8006808:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800680c:	00db      	lsls	r3, r3, #3
 800680e:	68fa      	ldr	r2, [r7, #12]
 8006810:	4413      	add	r3, r2
 8006812:	edd3 7a00 	vldr	s15, [r3]
 8006816:	ee77 7a27 	vadd.f32	s15, s14, s15
 800681a:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         r6 = pSrc[2 * i2] - pSrc[2 * i6];
 800681e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006822:	00db      	lsls	r3, r3, #3
 8006824:	68fa      	ldr	r2, [r7, #12]
 8006826:	4413      	add	r3, r2
 8006828:	ed93 7a00 	vldr	s14, [r3]
 800682c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006830:	00db      	lsls	r3, r3, #3
 8006832:	68fa      	ldr	r2, [r7, #12]
 8006834:	4413      	add	r3, r2
 8006836:	edd3 7a00 	vldr	s15, [r3]
 800683a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800683e:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006842:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006846:	00db      	lsls	r3, r3, #3
 8006848:	68fa      	ldr	r2, [r7, #12]
 800684a:	4413      	add	r3, r2
 800684c:	ed93 7a00 	vldr	s14, [r3]
 8006850:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006854:	00db      	lsls	r3, r3, #3
 8006856:	68fa      	ldr	r2, [r7, #12]
 8006858:	4413      	add	r3, r2
 800685a:	edd3 7a00 	vldr	s15, [r3]
 800685e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006862:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8006866:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800686a:	00db      	lsls	r3, r3, #3
 800686c:	68fa      	ldr	r2, [r7, #12]
 800686e:	4413      	add	r3, r2
 8006870:	ed93 7a00 	vldr	s14, [r3]
 8006874:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006878:	00db      	lsls	r3, r3, #3
 800687a:	68fa      	ldr	r2, [r7, #12]
 800687c:	4413      	add	r3, r2
 800687e:	edd3 7a00 	vldr	s15, [r3]
 8006882:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006886:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         r4 = pSrc[2 * i4] + pSrc[2 * i8];
 800688a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800688e:	00db      	lsls	r3, r3, #3
 8006890:	68fa      	ldr	r2, [r7, #12]
 8006892:	4413      	add	r3, r2
 8006894:	ed93 7a00 	vldr	s14, [r3]
 8006898:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800689c:	00db      	lsls	r3, r3, #3
 800689e:	68fa      	ldr	r2, [r7, #12]
 80068a0:	4413      	add	r3, r2
 80068a2:	edd3 7a00 	vldr	s15, [r3]
 80068a6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068aa:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         r8 = pSrc[2 * i4] - pSrc[2 * i8];
 80068ae:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80068b2:	00db      	lsls	r3, r3, #3
 80068b4:	68fa      	ldr	r2, [r7, #12]
 80068b6:	4413      	add	r3, r2
 80068b8:	ed93 7a00 	vldr	s14, [r3]
 80068bc:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80068c0:	00db      	lsls	r3, r3, #3
 80068c2:	68fa      	ldr	r2, [r7, #12]
 80068c4:	4413      	add	r3, r2
 80068c6:	edd3 7a00 	vldr	s15, [r3]
 80068ca:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068ce:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         t1 = r1 - r3;
 80068d2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80068d6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80068da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068de:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r1 = r1 + r3;
 80068e2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 80068e6:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 80068ea:	ee77 7a27 	vadd.f32	s15, s14, s15
 80068ee:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r3 = r2 - r4;
 80068f2:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 80068f6:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 80068fa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80068fe:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
         r2 = r2 + r4;
 8006902:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8006906:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 800690a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800690e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1] = r1 + r2;
 8006912:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006916:	00db      	lsls	r3, r3, #3
 8006918:	68fa      	ldr	r2, [r7, #12]
 800691a:	4413      	add	r3, r2
 800691c:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006920:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8006924:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006928:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5] = r1 - r2;
 800692c:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006930:	00db      	lsls	r3, r3, #3
 8006932:	68fa      	ldr	r2, [r7, #12]
 8006934:	4413      	add	r3, r2
 8006936:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 800693a:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800693e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006942:	edc3 7a00 	vstr	s15, [r3]
         r1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8006946:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800694a:	00db      	lsls	r3, r3, #3
 800694c:	3304      	adds	r3, #4
 800694e:	68fa      	ldr	r2, [r7, #12]
 8006950:	4413      	add	r3, r2
 8006952:	ed93 7a00 	vldr	s14, [r3]
 8006956:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800695a:	00db      	lsls	r3, r3, #3
 800695c:	3304      	adds	r3, #4
 800695e:	68fa      	ldr	r2, [r7, #12]
 8006960:	4413      	add	r3, r2
 8006962:	edd3 7a00 	vldr	s15, [r3]
 8006966:	ee77 7a27 	vadd.f32	s15, s14, s15
 800696a:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800696e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006972:	00db      	lsls	r3, r3, #3
 8006974:	3304      	adds	r3, #4
 8006976:	68fa      	ldr	r2, [r7, #12]
 8006978:	4413      	add	r3, r2
 800697a:	ed93 7a00 	vldr	s14, [r3]
 800697e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006982:	00db      	lsls	r3, r3, #3
 8006984:	3304      	adds	r3, #4
 8006986:	68fa      	ldr	r2, [r7, #12]
 8006988:	4413      	add	r3, r2
 800698a:	edd3 7a00 	vldr	s15, [r3]
 800698e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006992:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         r2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8006996:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800699a:	00db      	lsls	r3, r3, #3
 800699c:	3304      	adds	r3, #4
 800699e:	68fa      	ldr	r2, [r7, #12]
 80069a0:	4413      	add	r3, r2
 80069a2:	ed93 7a00 	vldr	s14, [r3]
 80069a6:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069aa:	00db      	lsls	r3, r3, #3
 80069ac:	3304      	adds	r3, #4
 80069ae:	68fa      	ldr	r2, [r7, #12]
 80069b0:	4413      	add	r3, r2
 80069b2:	edd3 7a00 	vldr	s15, [r3]
 80069b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80069ba:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80069be:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80069c2:	00db      	lsls	r3, r3, #3
 80069c4:	3304      	adds	r3, #4
 80069c6:	68fa      	ldr	r2, [r7, #12]
 80069c8:	4413      	add	r3, r2
 80069ca:	ed93 7a00 	vldr	s14, [r3]
 80069ce:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80069d2:	00db      	lsls	r3, r3, #3
 80069d4:	3304      	adds	r3, #4
 80069d6:	68fa      	ldr	r2, [r7, #12]
 80069d8:	4413      	add	r3, r2
 80069da:	edd3 7a00 	vldr	s15, [r3]
 80069de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80069e2:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80069e6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80069ea:	00db      	lsls	r3, r3, #3
 80069ec:	3304      	adds	r3, #4
 80069ee:	68fa      	ldr	r2, [r7, #12]
 80069f0:	4413      	add	r3, r2
 80069f2:	ed93 7a00 	vldr	s14, [r3]
 80069f6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80069fa:	00db      	lsls	r3, r3, #3
 80069fc:	3304      	adds	r3, #4
 80069fe:	68fa      	ldr	r2, [r7, #12]
 8006a00:	4413      	add	r3, r2
 8006a02:	edd3 7a00 	vldr	s15, [r3]
 8006a06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a0a:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 8006a0e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006a12:	00db      	lsls	r3, r3, #3
 8006a14:	3304      	adds	r3, #4
 8006a16:	68fa      	ldr	r2, [r7, #12]
 8006a18:	4413      	add	r3, r2
 8006a1a:	ed93 7a00 	vldr	s14, [r3]
 8006a1e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006a22:	00db      	lsls	r3, r3, #3
 8006a24:	3304      	adds	r3, #4
 8006a26:	68fa      	ldr	r2, [r7, #12]
 8006a28:	4413      	add	r3, r2
 8006a2a:	edd3 7a00 	vldr	s15, [r3]
 8006a2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a32:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         r4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8006a36:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a3a:	00db      	lsls	r3, r3, #3
 8006a3c:	3304      	adds	r3, #4
 8006a3e:	68fa      	ldr	r2, [r7, #12]
 8006a40:	4413      	add	r3, r2
 8006a42:	ed93 7a00 	vldr	s14, [r3]
 8006a46:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a4a:	00db      	lsls	r3, r3, #3
 8006a4c:	3304      	adds	r3, #4
 8006a4e:	68fa      	ldr	r2, [r7, #12]
 8006a50:	4413      	add	r3, r2
 8006a52:	edd3 7a00 	vldr	s15, [r3]
 8006a56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006a5a:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
         s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 8006a5e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006a62:	00db      	lsls	r3, r3, #3
 8006a64:	3304      	adds	r3, #4
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	4413      	add	r3, r2
 8006a6a:	ed93 7a00 	vldr	s14, [r3]
 8006a6e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006a72:	00db      	lsls	r3, r3, #3
 8006a74:	3304      	adds	r3, #4
 8006a76:	68fa      	ldr	r2, [r7, #12]
 8006a78:	4413      	add	r3, r2
 8006a7a:	edd3 7a00 	vldr	s15, [r3]
 8006a7e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a82:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         t2 = r1 - s3;
 8006a86:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006a8a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006a8e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006a92:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         r1 = r1 + s3;
 8006a96:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006a9a:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006a9e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006aa2:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         s3 = r2 - r4;
 8006aa6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8006aaa:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8006aae:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ab2:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
         r2 = r2 + r4;
 8006ab6:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8006aba:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8006abe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ac2:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         pSrc[2 * i1 + 1] = r1 + r2;
 8006ac6:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006aca:	00db      	lsls	r3, r3, #3
 8006acc:	3304      	adds	r3, #4
 8006ace:	68fa      	ldr	r2, [r7, #12]
 8006ad0:	4413      	add	r3, r2
 8006ad2:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006ad6:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8006ada:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ade:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i5 + 1] = r1 - r2;
 8006ae2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006ae6:	00db      	lsls	r3, r3, #3
 8006ae8:	3304      	adds	r3, #4
 8006aea:	68fa      	ldr	r2, [r7, #12]
 8006aec:	4413      	add	r3, r2
 8006aee:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006af2:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8006af6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006afa:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3]     = t1 + s3;
 8006afe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b02:	00db      	lsls	r3, r3, #3
 8006b04:	68fa      	ldr	r2, [r7, #12]
 8006b06:	4413      	add	r3, r2
 8006b08:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8006b0c:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006b10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b14:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7]     = t1 - s3;
 8006b18:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b1c:	00db      	lsls	r3, r3, #3
 8006b1e:	68fa      	ldr	r2, [r7, #12]
 8006b20:	4413      	add	r3, r2
 8006b22:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8006b26:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 8006b2a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b2e:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i3 + 1] = t2 - r3;
 8006b32:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006b36:	00db      	lsls	r3, r3, #3
 8006b38:	3304      	adds	r3, #4
 8006b3a:	68fa      	ldr	r2, [r7, #12]
 8006b3c:	4413      	add	r3, r2
 8006b3e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8006b42:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8006b46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b4a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i7 + 1] = t2 + r3;
 8006b4e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006b52:	00db      	lsls	r3, r3, #3
 8006b54:	3304      	adds	r3, #4
 8006b56:	68fa      	ldr	r2, [r7, #12]
 8006b58:	4413      	add	r3, r2
 8006b5a:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8006b5e:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8006b62:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b66:	edc3 7a00 	vstr	s15, [r3]
         r1 = (r6 - r8) * C81;
 8006b6a:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8006b6e:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8006b72:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006b76:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b7e:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
         r6 = (r6 + r8) * C81;
 8006b82:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8006b86:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8006b8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006b8e:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006b92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006b96:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
         r2 = (s6 - s8) * C81;
 8006b9a:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006b9e:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8006ba2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006ba6:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006baa:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bae:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
         s6 = (s6 + s8) * C81;
 8006bb2:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 8006bb6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8006bba:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006bbe:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 8006bc2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006bc6:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
         t1 = r5 - r1;
 8006bca:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8006bce:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8006bd2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bd6:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
         r5 = r5 + r1;
 8006bda:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8006bde:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8006be2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006be6:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
         r8 = r7 - r6;
 8006bea:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8006bee:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8006bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bf6:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
         r7 = r7 + r6;
 8006bfa:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8006bfe:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8006c02:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c06:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
         t2 = s5 - r2;
 8006c0a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006c0e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8006c12:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c16:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
         s5 = s5 + r2;
 8006c1a:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006c1e:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8006c22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c26:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
         s8 = s7 - s6;
 8006c2a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006c2e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8006c32:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c36:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
         s7 = s7 + s6;
 8006c3a:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8006c3e:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8006c42:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c46:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
         pSrc[2 * i2]     = r5 + s7;
 8006c4a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006c4e:	00db      	lsls	r3, r3, #3
 8006c50:	68fa      	ldr	r2, [r7, #12]
 8006c52:	4413      	add	r3, r2
 8006c54:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8006c58:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8006c5c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c60:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8]     = r5 - s7;
 8006c64:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006c68:	00db      	lsls	r3, r3, #3
 8006c6a:	68fa      	ldr	r2, [r7, #12]
 8006c6c:	4413      	add	r3, r2
 8006c6e:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8006c72:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8006c76:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006c7a:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6]     = t1 + s8;
 8006c7e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006c82:	00db      	lsls	r3, r3, #3
 8006c84:	68fa      	ldr	r2, [r7, #12]
 8006c86:	4413      	add	r3, r2
 8006c88:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8006c8c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8006c90:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006c94:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4]     = t1 - s8;
 8006c98:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006c9c:	00db      	lsls	r3, r3, #3
 8006c9e:	68fa      	ldr	r2, [r7, #12]
 8006ca0:	4413      	add	r3, r2
 8006ca2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8006ca6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8006caa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cae:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i2 + 1] = s5 - r7;
 8006cb2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006cb6:	00db      	lsls	r3, r3, #3
 8006cb8:	3304      	adds	r3, #4
 8006cba:	68fa      	ldr	r2, [r7, #12]
 8006cbc:	4413      	add	r3, r2
 8006cbe:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006cc2:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8006cc6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006cca:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i8 + 1] = s5 + r7;
 8006cce:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006cd2:	00db      	lsls	r3, r3, #3
 8006cd4:	3304      	adds	r3, #4
 8006cd6:	68fa      	ldr	r2, [r7, #12]
 8006cd8:	4413      	add	r3, r2
 8006cda:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8006cde:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 8006ce2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ce6:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i6 + 1] = t2 - r8;
 8006cea:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006cee:	00db      	lsls	r3, r3, #3
 8006cf0:	3304      	adds	r3, #4
 8006cf2:	68fa      	ldr	r2, [r7, #12]
 8006cf4:	4413      	add	r3, r2
 8006cf6:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8006cfa:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8006cfe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006d02:	edc3 7a00 	vstr	s15, [r3]
         pSrc[2 * i4 + 1] = t2 + r8;
 8006d06:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006d0a:	00db      	lsls	r3, r3, #3
 8006d0c:	3304      	adds	r3, #4
 8006d0e:	68fa      	ldr	r2, [r7, #12]
 8006d10:	4413      	add	r3, r2
 8006d12:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8006d16:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8006d1a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006d1e:	edc3 7a00 	vstr	s15, [r3]

         i1 += n1;
 8006d22:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006d26:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8006d2a:	4413      	add	r3, r2
 8006d2c:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
      } while (i1 < fftLen);
 8006d30:	897b      	ldrh	r3, [r7, #10]
 8006d32:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006d36:	429a      	cmp	r2, r3
 8006d38:	f4ff ad0a 	bcc.w	8006750 <arm_radix8_butterfly_f32+0x40>

      if (n2 < 8)
 8006d3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006d40:	2b07      	cmp	r3, #7
 8006d42:	f240 84e3 	bls.w	800770c <arm_radix8_butterfly_f32+0xffc>
         break;

      ia1 = 0;
 8006d46:	2300      	movs	r3, #0
 8006d48:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
      j = 1;
 8006d4c:	2301      	movs	r3, #1
 8006d4e:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0

      do
      {
         /*  index calculation for the coefficients */
         id  = ia1 + twidCoefModifier;
 8006d52:	893b      	ldrh	r3, [r7, #8]
 8006d54:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006d58:	4413      	add	r3, r2
 8006d5a:	67fb      	str	r3, [r7, #124]	@ 0x7c
         ia1 = id;
 8006d5c:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d5e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
         ia2 = ia1 + id;
 8006d62:	f8d7 20ec 	ldr.w	r2, [r7, #236]	@ 0xec
 8006d66:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d68:	4413      	add	r3, r2
 8006d6a:	67bb      	str	r3, [r7, #120]	@ 0x78
         ia3 = ia2 + id;
 8006d6c:	6fba      	ldr	r2, [r7, #120]	@ 0x78
 8006d6e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d70:	4413      	add	r3, r2
 8006d72:	677b      	str	r3, [r7, #116]	@ 0x74
         ia4 = ia3 + id;
 8006d74:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8006d76:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d78:	4413      	add	r3, r2
 8006d7a:	673b      	str	r3, [r7, #112]	@ 0x70
         ia5 = ia4 + id;
 8006d7c:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8006d7e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d80:	4413      	add	r3, r2
 8006d82:	66fb      	str	r3, [r7, #108]	@ 0x6c
         ia6 = ia5 + id;
 8006d84:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8006d86:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d88:	4413      	add	r3, r2
 8006d8a:	66bb      	str	r3, [r7, #104]	@ 0x68
         ia7 = ia6 + id;
 8006d8c:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8006d8e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8006d90:	4413      	add	r3, r2
 8006d92:	667b      	str	r3, [r7, #100]	@ 0x64

         co2 = pCoef[2 * ia1];
 8006d94:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006d98:	00db      	lsls	r3, r3, #3
 8006d9a:	687a      	ldr	r2, [r7, #4]
 8006d9c:	4413      	add	r3, r2
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	663b      	str	r3, [r7, #96]	@ 0x60
         co3 = pCoef[2 * ia2];
 8006da2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006da4:	00db      	lsls	r3, r3, #3
 8006da6:	687a      	ldr	r2, [r7, #4]
 8006da8:	4413      	add	r3, r2
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
         co4 = pCoef[2 * ia3];
 8006dae:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006db0:	00db      	lsls	r3, r3, #3
 8006db2:	687a      	ldr	r2, [r7, #4]
 8006db4:	4413      	add	r3, r2
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	65bb      	str	r3, [r7, #88]	@ 0x58
         co5 = pCoef[2 * ia4];
 8006dba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006dbc:	00db      	lsls	r3, r3, #3
 8006dbe:	687a      	ldr	r2, [r7, #4]
 8006dc0:	4413      	add	r3, r2
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	657b      	str	r3, [r7, #84]	@ 0x54
         co6 = pCoef[2 * ia5];
 8006dc6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006dc8:	00db      	lsls	r3, r3, #3
 8006dca:	687a      	ldr	r2, [r7, #4]
 8006dcc:	4413      	add	r3, r2
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	653b      	str	r3, [r7, #80]	@ 0x50
         co7 = pCoef[2 * ia6];
 8006dd2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	687a      	ldr	r2, [r7, #4]
 8006dd8:	4413      	add	r3, r2
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	64fb      	str	r3, [r7, #76]	@ 0x4c
         co8 = pCoef[2 * ia7];
 8006dde:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006de0:	00db      	lsls	r3, r3, #3
 8006de2:	687a      	ldr	r2, [r7, #4]
 8006de4:	4413      	add	r3, r2
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	64bb      	str	r3, [r7, #72]	@ 0x48
         si2 = pCoef[2 * ia1 + 1];
 8006dea:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8006dee:	00db      	lsls	r3, r3, #3
 8006df0:	3304      	adds	r3, #4
 8006df2:	687a      	ldr	r2, [r7, #4]
 8006df4:	4413      	add	r3, r2
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	647b      	str	r3, [r7, #68]	@ 0x44
         si3 = pCoef[2 * ia2 + 1];
 8006dfa:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8006dfc:	00db      	lsls	r3, r3, #3
 8006dfe:	3304      	adds	r3, #4
 8006e00:	687a      	ldr	r2, [r7, #4]
 8006e02:	4413      	add	r3, r2
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	643b      	str	r3, [r7, #64]	@ 0x40
         si4 = pCoef[2 * ia3 + 1];
 8006e08:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	3304      	adds	r3, #4
 8006e0e:	687a      	ldr	r2, [r7, #4]
 8006e10:	4413      	add	r3, r2
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	63fb      	str	r3, [r7, #60]	@ 0x3c
         si5 = pCoef[2 * ia4 + 1];
 8006e16:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8006e18:	00db      	lsls	r3, r3, #3
 8006e1a:	3304      	adds	r3, #4
 8006e1c:	687a      	ldr	r2, [r7, #4]
 8006e1e:	4413      	add	r3, r2
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	63bb      	str	r3, [r7, #56]	@ 0x38
         si6 = pCoef[2 * ia5 + 1];
 8006e24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8006e26:	00db      	lsls	r3, r3, #3
 8006e28:	3304      	adds	r3, #4
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	4413      	add	r3, r2
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	637b      	str	r3, [r7, #52]	@ 0x34
         si7 = pCoef[2 * ia6 + 1];
 8006e32:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8006e34:	00db      	lsls	r3, r3, #3
 8006e36:	3304      	adds	r3, #4
 8006e38:	687a      	ldr	r2, [r7, #4]
 8006e3a:	4413      	add	r3, r2
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	633b      	str	r3, [r7, #48]	@ 0x30
         si8 = pCoef[2 * ia7 + 1];
 8006e40:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006e42:	00db      	lsls	r3, r3, #3
 8006e44:	3304      	adds	r3, #4
 8006e46:	687a      	ldr	r2, [r7, #4]
 8006e48:	4413      	add	r3, r2
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	62fb      	str	r3, [r7, #44]	@ 0x2c

         i1 = j;
 8006e4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006e52:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8

         do
         {
            /*  index calculation for the input */
            i2 = i1 + n2;
 8006e56:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 8006e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e5e:	4413      	add	r3, r2
 8006e60:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
            i3 = i2 + n2;
 8006e64:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8006e68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e6c:	4413      	add	r3, r2
 8006e6e:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
            i4 = i3 + n2;
 8006e72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8006e76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e7a:	4413      	add	r3, r2
 8006e7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
            i5 = i4 + n2;
 8006e80:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8006e84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e88:	4413      	add	r3, r2
 8006e8a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
            i6 = i5 + n2;
 8006e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006e92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006e96:	4413      	add	r3, r2
 8006e98:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
            i7 = i6 + n2;
 8006e9c:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006ea0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006ea4:	4413      	add	r3, r2
 8006ea6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
            i8 = i7 + n2;
 8006eaa:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8006eae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006eb2:	4413      	add	r3, r2
 8006eb4:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
            r1 = pSrc[2 * i1] + pSrc[2 * i5];
 8006eb8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ebc:	00db      	lsls	r3, r3, #3
 8006ebe:	68fa      	ldr	r2, [r7, #12]
 8006ec0:	4413      	add	r3, r2
 8006ec2:	ed93 7a00 	vldr	s14, [r3]
 8006ec6:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eca:	00db      	lsls	r3, r3, #3
 8006ecc:	68fa      	ldr	r2, [r7, #12]
 8006ece:	4413      	add	r3, r2
 8006ed0:	edd3 7a00 	vldr	s15, [r3]
 8006ed4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ed8:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = pSrc[2 * i1] - pSrc[2 * i5];
 8006edc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8006ee0:	00db      	lsls	r3, r3, #3
 8006ee2:	68fa      	ldr	r2, [r7, #12]
 8006ee4:	4413      	add	r3, r2
 8006ee6:	ed93 7a00 	vldr	s14, [r3]
 8006eea:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8006eee:	00db      	lsls	r3, r3, #3
 8006ef0:	68fa      	ldr	r2, [r7, #12]
 8006ef2:	4413      	add	r3, r2
 8006ef4:	edd3 7a00 	vldr	s15, [r3]
 8006ef8:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006efc:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r2 = pSrc[2 * i2] + pSrc[2 * i6];
 8006f00:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f04:	00db      	lsls	r3, r3, #3
 8006f06:	68fa      	ldr	r2, [r7, #12]
 8006f08:	4413      	add	r3, r2
 8006f0a:	ed93 7a00 	vldr	s14, [r3]
 8006f0e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f12:	00db      	lsls	r3, r3, #3
 8006f14:	68fa      	ldr	r2, [r7, #12]
 8006f16:	4413      	add	r3, r2
 8006f18:	edd3 7a00 	vldr	s15, [r3]
 8006f1c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f20:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            r6 = pSrc[2 * i2] - pSrc[2 * i6];
 8006f24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8006f28:	00db      	lsls	r3, r3, #3
 8006f2a:	68fa      	ldr	r2, [r7, #12]
 8006f2c:	4413      	add	r3, r2
 8006f2e:	ed93 7a00 	vldr	s14, [r3]
 8006f32:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8006f36:	00db      	lsls	r3, r3, #3
 8006f38:	68fa      	ldr	r2, [r7, #12]
 8006f3a:	4413      	add	r3, r2
 8006f3c:	edd3 7a00 	vldr	s15, [r3]
 8006f40:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f44:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            r3 = pSrc[2 * i3] + pSrc[2 * i7];
 8006f48:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f4c:	00db      	lsls	r3, r3, #3
 8006f4e:	68fa      	ldr	r2, [r7, #12]
 8006f50:	4413      	add	r3, r2
 8006f52:	ed93 7a00 	vldr	s14, [r3]
 8006f56:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f5a:	00db      	lsls	r3, r3, #3
 8006f5c:	68fa      	ldr	r2, [r7, #12]
 8006f5e:	4413      	add	r3, r2
 8006f60:	edd3 7a00 	vldr	s15, [r3]
 8006f64:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006f68:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r7 = pSrc[2 * i3] - pSrc[2 * i7];
 8006f6c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8006f70:	00db      	lsls	r3, r3, #3
 8006f72:	68fa      	ldr	r2, [r7, #12]
 8006f74:	4413      	add	r3, r2
 8006f76:	ed93 7a00 	vldr	s14, [r3]
 8006f7a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8006f7e:	00db      	lsls	r3, r3, #3
 8006f80:	68fa      	ldr	r2, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	edd3 7a00 	vldr	s15, [r3]
 8006f88:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006f8c:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            r4 = pSrc[2 * i4] + pSrc[2 * i8];
 8006f90:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006f94:	00db      	lsls	r3, r3, #3
 8006f96:	68fa      	ldr	r2, [r7, #12]
 8006f98:	4413      	add	r3, r2
 8006f9a:	ed93 7a00 	vldr	s14, [r3]
 8006f9e:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fa2:	00db      	lsls	r3, r3, #3
 8006fa4:	68fa      	ldr	r2, [r7, #12]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	edd3 7a00 	vldr	s15, [r3]
 8006fac:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006fb0:	edc7 7a28 	vstr	s15, [r7, #160]	@ 0xa0
            r8 = pSrc[2 * i4] - pSrc[2 * i8];
 8006fb4:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8006fb8:	00db      	lsls	r3, r3, #3
 8006fba:	68fa      	ldr	r2, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	ed93 7a00 	vldr	s14, [r3]
 8006fc2:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8006fc6:	00db      	lsls	r3, r3, #3
 8006fc8:	68fa      	ldr	r2, [r7, #12]
 8006fca:	4413      	add	r3, r2
 8006fcc:	edd3 7a00 	vldr	s15, [r3]
 8006fd0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fd4:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            t1 = r1 - r3;
 8006fd8:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006fdc:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8006fe0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006fe4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r1 = r1 + r3;
 8006fe8:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8006fec:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8006ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8006ff4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r3 = r2 - r4;
 8006ff8:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 8006ffc:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8007000:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007004:	edc7 7a2a 	vstr	s15, [r7, #168]	@ 0xa8
            r2 = r2 + r4;
 8007008:	ed97 7a2c 	vldr	s14, [r7, #176]	@ 0xb0
 800700c:	edd7 7a28 	vldr	s15, [r7, #160]	@ 0xa0
 8007010:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007014:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            pSrc[2 * i1] = r1 + r2;
 8007018:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800701c:	00db      	lsls	r3, r3, #3
 800701e:	68fa      	ldr	r2, [r7, #12]
 8007020:	4413      	add	r3, r2
 8007022:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8007026:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800702a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800702e:	edc3 7a00 	vstr	s15, [r3]
            r2 = r1 - r2;
 8007032:	ed97 7a2e 	vldr	s14, [r7, #184]	@ 0xb8
 8007036:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 800703a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800703e:	edc7 7a2c 	vstr	s15, [r7, #176]	@ 0xb0
            s1 = pSrc[2 * i1 + 1] + pSrc[2 * i5 + 1];
 8007042:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 8007046:	00db      	lsls	r3, r3, #3
 8007048:	3304      	adds	r3, #4
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	4413      	add	r3, r2
 800704e:	ed93 7a00 	vldr	s14, [r3]
 8007052:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007056:	00db      	lsls	r3, r3, #3
 8007058:	3304      	adds	r3, #4
 800705a:	68fa      	ldr	r2, [r7, #12]
 800705c:	4413      	add	r3, r2
 800705e:	edd3 7a00 	vldr	s15, [r3]
 8007062:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007066:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = pSrc[2 * i1 + 1] - pSrc[2 * i5 + 1];
 800706a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 800706e:	00db      	lsls	r3, r3, #3
 8007070:	3304      	adds	r3, #4
 8007072:	68fa      	ldr	r2, [r7, #12]
 8007074:	4413      	add	r3, r2
 8007076:	ed93 7a00 	vldr	s14, [r3]
 800707a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800707e:	00db      	lsls	r3, r3, #3
 8007080:	3304      	adds	r3, #4
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	4413      	add	r3, r2
 8007086:	edd3 7a00 	vldr	s15, [r3]
 800708a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800708e:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s2 = pSrc[2 * i2 + 1] + pSrc[2 * i6 + 1];
 8007092:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007096:	00db      	lsls	r3, r3, #3
 8007098:	3304      	adds	r3, #4
 800709a:	68fa      	ldr	r2, [r7, #12]
 800709c:	4413      	add	r3, r2
 800709e:	ed93 7a00 	vldr	s14, [r3]
 80070a2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070a6:	00db      	lsls	r3, r3, #3
 80070a8:	3304      	adds	r3, #4
 80070aa:	68fa      	ldr	r2, [r7, #12]
 80070ac:	4413      	add	r3, r2
 80070ae:	edd3 7a00 	vldr	s15, [r3]
 80070b2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80070b6:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s6 = pSrc[2 * i2 + 1] - pSrc[2 * i6 + 1];
 80070ba:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80070be:	00db      	lsls	r3, r3, #3
 80070c0:	3304      	adds	r3, #4
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	4413      	add	r3, r2
 80070c6:	ed93 7a00 	vldr	s14, [r3]
 80070ca:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80070ce:	00db      	lsls	r3, r3, #3
 80070d0:	3304      	adds	r3, #4
 80070d2:	68fa      	ldr	r2, [r7, #12]
 80070d4:	4413      	add	r3, r2
 80070d6:	edd3 7a00 	vldr	s15, [r3]
 80070da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070de:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            s3 = pSrc[2 * i3 + 1] + pSrc[2 * i7 + 1];
 80070e2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80070e6:	00db      	lsls	r3, r3, #3
 80070e8:	3304      	adds	r3, #4
 80070ea:	68fa      	ldr	r2, [r7, #12]
 80070ec:	4413      	add	r3, r2
 80070ee:	ed93 7a00 	vldr	s14, [r3]
 80070f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80070f6:	00db      	lsls	r3, r3, #3
 80070f8:	3304      	adds	r3, #4
 80070fa:	68fa      	ldr	r2, [r7, #12]
 80070fc:	4413      	add	r3, r2
 80070fe:	edd3 7a00 	vldr	s15, [r3]
 8007102:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007106:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s7 = pSrc[2 * i3 + 1] - pSrc[2 * i7 + 1];
 800710a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 800710e:	00db      	lsls	r3, r3, #3
 8007110:	3304      	adds	r3, #4
 8007112:	68fa      	ldr	r2, [r7, #12]
 8007114:	4413      	add	r3, r2
 8007116:	ed93 7a00 	vldr	s14, [r3]
 800711a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800711e:	00db      	lsls	r3, r3, #3
 8007120:	3304      	adds	r3, #4
 8007122:	68fa      	ldr	r2, [r7, #12]
 8007124:	4413      	add	r3, r2
 8007126:	edd3 7a00 	vldr	s15, [r3]
 800712a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800712e:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            s4 = pSrc[2 * i4 + 1] + pSrc[2 * i8 + 1];
 8007132:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007136:	00db      	lsls	r3, r3, #3
 8007138:	3304      	adds	r3, #4
 800713a:	68fa      	ldr	r2, [r7, #12]
 800713c:	4413      	add	r3, r2
 800713e:	ed93 7a00 	vldr	s14, [r3]
 8007142:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	3304      	adds	r3, #4
 800714a:	68fa      	ldr	r2, [r7, #12]
 800714c:	4413      	add	r3, r2
 800714e:	edd3 7a00 	vldr	s15, [r3]
 8007152:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007156:	edc7 7a08 	vstr	s15, [r7, #32]
            s8 = pSrc[2 * i4 + 1] - pSrc[2 * i8 + 1];
 800715a:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 800715e:	00db      	lsls	r3, r3, #3
 8007160:	3304      	adds	r3, #4
 8007162:	68fa      	ldr	r2, [r7, #12]
 8007164:	4413      	add	r3, r2
 8007166:	ed93 7a00 	vldr	s14, [r3]
 800716a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 800716e:	00db      	lsls	r3, r3, #3
 8007170:	3304      	adds	r3, #4
 8007172:	68fa      	ldr	r2, [r7, #12]
 8007174:	4413      	add	r3, r2
 8007176:	edd3 7a00 	vldr	s15, [r3]
 800717a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800717e:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            t2 = s1 - s3;
 8007182:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007186:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800718a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800718e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s1 = s1 + s3;
 8007192:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007196:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 800719a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800719e:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s3 = s2 - s4;
 80071a2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80071a6:	edd7 7a08 	vldr	s15, [r7, #32]
 80071aa:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071ae:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
            s2 = s2 + s4;
 80071b2:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80071b6:	edd7 7a08 	vldr	s15, [r7, #32]
 80071ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071be:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            r1 = t1 + s3;
 80071c2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80071c6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80071ca:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071ce:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            t1 = t1 - s3;
 80071d2:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80071d6:	edd7 7a23 	vldr	s15, [r7, #140]	@ 0x8c
 80071da:	ee77 7a67 	vsub.f32	s15, s14, s15
 80071de:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            pSrc[2 * i1 + 1] = s1 + s2;
 80071e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	@ 0xe8
 80071e6:	00db      	lsls	r3, r3, #3
 80071e8:	3304      	adds	r3, #4
 80071ea:	68fa      	ldr	r2, [r7, #12]
 80071ec:	4413      	add	r3, r2
 80071ee:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80071f2:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80071f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80071fa:	edc3 7a00 	vstr	s15, [r3]
            s2 = s1 - s2;
 80071fe:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007202:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007206:	ee77 7a67 	vsub.f32	s15, s14, s15
 800720a:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
            s1 = t2 - r3;
 800720e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8007212:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8007216:	ee77 7a67 	vsub.f32	s15, s14, s15
 800721a:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            t2 = t2 + r3;
 800721e:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 8007222:	edd7 7a2a 	vldr	s15, [r7, #168]	@ 0xa8
 8007226:	ee77 7a27 	vadd.f32	s15, s14, s15
 800722a:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co5 * r2;
 800722e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8007232:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8007236:	ee67 7a27 	vmul.f32	s15, s14, s15
 800723a:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si5 * s2;
 800723e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007242:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007246:	ee67 7a27 	vmul.f32	s15, s14, s15
 800724a:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co5 * s2;
 800724e:	ed97 7a15 	vldr	s14, [r7, #84]	@ 0x54
 8007252:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8007256:	ee67 7a27 	vmul.f32	s15, s14, s15
 800725a:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si5 * r2;
 800725e:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007262:	edd7 7a2c 	vldr	s15, [r7, #176]	@ 0xb0
 8007266:	ee67 7a27 	vmul.f32	s15, s14, s15
 800726a:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i5]     = p1 + p2;
 800726e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007272:	00db      	lsls	r3, r3, #3
 8007274:	68fa      	ldr	r2, [r7, #12]
 8007276:	4413      	add	r3, r2
 8007278:	ed97 7a07 	vldr	s14, [r7, #28]
 800727c:	edd7 7a06 	vldr	s15, [r7, #24]
 8007280:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007284:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i5 + 1] = p3 - p4;
 8007288:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 800728c:	00db      	lsls	r3, r3, #3
 800728e:	3304      	adds	r3, #4
 8007290:	68fa      	ldr	r2, [r7, #12]
 8007292:	4413      	add	r3, r2
 8007294:	ed97 7a05 	vldr	s14, [r7, #20]
 8007298:	edd7 7a04 	vldr	s15, [r7, #16]
 800729c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80072a0:	edc3 7a00 	vstr	s15, [r3]
            p1 = co3 * r1;
 80072a4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80072a8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80072ac:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072b0:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si3 * s1;
 80072b4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80072b8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80072bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072c0:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co3 * s1;
 80072c4:	ed97 7a17 	vldr	s14, [r7, #92]	@ 0x5c
 80072c8:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 80072cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072d0:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si3 * r1;
 80072d4:	ed97 7a10 	vldr	s14, [r7, #64]	@ 0x40
 80072d8:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80072dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80072e0:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i3]     = p1 + p2;
 80072e4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 80072e8:	00db      	lsls	r3, r3, #3
 80072ea:	68fa      	ldr	r2, [r7, #12]
 80072ec:	4413      	add	r3, r2
 80072ee:	ed97 7a07 	vldr	s14, [r7, #28]
 80072f2:	edd7 7a06 	vldr	s15, [r7, #24]
 80072f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80072fa:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i3 + 1] = p3 - p4;
 80072fe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8007302:	00db      	lsls	r3, r3, #3
 8007304:	3304      	adds	r3, #4
 8007306:	68fa      	ldr	r2, [r7, #12]
 8007308:	4413      	add	r3, r2
 800730a:	ed97 7a05 	vldr	s14, [r7, #20]
 800730e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007312:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007316:	edc3 7a00 	vstr	s15, [r3]
            p1 = co7 * t1;
 800731a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800731e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8007322:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007326:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si7 * t2;
 800732a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800732e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8007332:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007336:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co7 * t2;
 800733a:	ed97 7a13 	vldr	s14, [r7, #76]	@ 0x4c
 800733e:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8007342:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007346:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si7 * t1;
 800734a:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800734e:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 8007352:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007356:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i7]     = p1 + p2;
 800735a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800735e:	00db      	lsls	r3, r3, #3
 8007360:	68fa      	ldr	r2, [r7, #12]
 8007362:	4413      	add	r3, r2
 8007364:	ed97 7a07 	vldr	s14, [r7, #28]
 8007368:	edd7 7a06 	vldr	s15, [r7, #24]
 800736c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007370:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i7 + 1] = p3 - p4;
 8007374:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007378:	00db      	lsls	r3, r3, #3
 800737a:	3304      	adds	r3, #4
 800737c:	68fa      	ldr	r2, [r7, #12]
 800737e:	4413      	add	r3, r2
 8007380:	ed97 7a05 	vldr	s14, [r7, #20]
 8007384:	edd7 7a04 	vldr	s15, [r7, #16]
 8007388:	ee77 7a67 	vsub.f32	s15, s14, s15
 800738c:	edc3 7a00 	vstr	s15, [r3]
            r1 = (r6 - r8) * C81;
 8007390:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 8007394:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 8007398:	ee77 7a67 	vsub.f32	s15, s14, s15
 800739c:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80073a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073a4:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r6 = (r6 + r8) * C81;
 80073a8:	ed97 7a2b 	vldr	s14, [r7, #172]	@ 0xac
 80073ac:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80073b0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073b4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80073b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073bc:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            s1 = (s6 - s8) * C81;
 80073c0:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80073c4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80073c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073cc:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80073d0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073d4:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s6 = (s6 + s8) * C81;
 80073d8:	ed97 7a24 	vldr	s14, [r7, #144]	@ 0x90
 80073dc:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80073e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80073e4:	ed97 7a37 	vldr	s14, [r7, #220]	@ 0xdc
 80073e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80073ec:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t1 = r5 - r1;
 80073f0:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 80073f4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80073f8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80073fc:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            r5 = r5 + r1;
 8007400:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8007404:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8007408:	ee77 7a27 	vadd.f32	s15, s14, s15
 800740c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r8 = r7 - r6;
 8007410:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8007414:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8007418:	ee77 7a67 	vsub.f32	s15, s14, s15
 800741c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
            r7 = r7 + r6;
 8007420:	ed97 7a29 	vldr	s14, [r7, #164]	@ 0xa4
 8007424:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8007428:	ee77 7a27 	vadd.f32	s15, s14, s15
 800742c:	edc7 7a29 	vstr	s15, [r7, #164]	@ 0xa4
            t2 = s5 - s1;
 8007430:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8007434:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007438:	ee77 7a67 	vsub.f32	s15, s14, s15
 800743c:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            s5 = s5 + s1;
 8007440:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8007444:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007448:	ee77 7a27 	vadd.f32	s15, s14, s15
 800744c:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s8 = s7 - s6;
 8007450:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007454:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007458:	ee77 7a67 	vsub.f32	s15, s14, s15
 800745c:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
            s7 = s7 + s6;
 8007460:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 8007464:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007468:	ee77 7a27 	vadd.f32	s15, s14, s15
 800746c:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
            r1 = r5 + s7;
 8007470:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8007474:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8007478:	ee77 7a27 	vadd.f32	s15, s14, s15
 800747c:	edc7 7a2e 	vstr	s15, [r7, #184]	@ 0xb8
            r5 = r5 - s7;
 8007480:	ed97 7a2d 	vldr	s14, [r7, #180]	@ 0xb4
 8007484:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8007488:	ee77 7a67 	vsub.f32	s15, s14, s15
 800748c:	edc7 7a2d 	vstr	s15, [r7, #180]	@ 0xb4
            r6 = t1 + s8;
 8007490:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8007494:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8007498:	ee77 7a27 	vadd.f32	s15, s14, s15
 800749c:	edc7 7a2b 	vstr	s15, [r7, #172]	@ 0xac
            t1 = t1 - s8;
 80074a0:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 80074a4:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80074a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074ac:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
            s1 = s5 - r7;
 80074b0:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80074b4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80074b8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074bc:	edc7 7a0a 	vstr	s15, [r7, #40]	@ 0x28
            s5 = s5 + r7;
 80074c0:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 80074c4:	edd7 7a29 	vldr	s15, [r7, #164]	@ 0xa4
 80074c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074cc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94
            s6 = t2 - r8;
 80074d0:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80074d4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80074d8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80074dc:	edc7 7a24 	vstr	s15, [r7, #144]	@ 0x90
            t2 = t2 + r8;
 80074e0:	ed97 7a20 	vldr	s14, [r7, #128]	@ 0x80
 80074e4:	edd7 7a27 	vldr	s15, [r7, #156]	@ 0x9c
 80074e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80074ec:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
            p1 = co2 * r1;
 80074f0:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 80074f4:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 80074f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80074fc:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si2 * s1;
 8007500:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8007504:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007508:	ee67 7a27 	vmul.f32	s15, s14, s15
 800750c:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co2 * s1;
 8007510:	ed97 7a18 	vldr	s14, [r7, #96]	@ 0x60
 8007514:	edd7 7a0a 	vldr	s15, [r7, #40]	@ 0x28
 8007518:	ee67 7a27 	vmul.f32	s15, s14, s15
 800751c:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si2 * r1;
 8007520:	ed97 7a11 	vldr	s14, [r7, #68]	@ 0x44
 8007524:	edd7 7a2e 	vldr	s15, [r7, #184]	@ 0xb8
 8007528:	ee67 7a27 	vmul.f32	s15, s14, s15
 800752c:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i2]     = p1 + p2;
 8007530:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8007534:	00db      	lsls	r3, r3, #3
 8007536:	68fa      	ldr	r2, [r7, #12]
 8007538:	4413      	add	r3, r2
 800753a:	ed97 7a07 	vldr	s14, [r7, #28]
 800753e:	edd7 7a06 	vldr	s15, [r7, #24]
 8007542:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007546:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i2 + 1] = p3 - p4;
 800754a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800754e:	00db      	lsls	r3, r3, #3
 8007550:	3304      	adds	r3, #4
 8007552:	68fa      	ldr	r2, [r7, #12]
 8007554:	4413      	add	r3, r2
 8007556:	ed97 7a05 	vldr	s14, [r7, #20]
 800755a:	edd7 7a04 	vldr	s15, [r7, #16]
 800755e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007562:	edc3 7a00 	vstr	s15, [r3]
            p1 = co8 * r5;
 8007566:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800756a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800756e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007572:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si8 * s5;
 8007576:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800757a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800757e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007582:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co8 * s5;
 8007586:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 800758a:	edd7 7a25 	vldr	s15, [r7, #148]	@ 0x94
 800758e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007592:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si8 * r5;
 8007596:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 800759a:	edd7 7a2d 	vldr	s15, [r7, #180]	@ 0xb4
 800759e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075a2:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i8]     = p1 + p2;
 80075a6:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075aa:	00db      	lsls	r3, r3, #3
 80075ac:	68fa      	ldr	r2, [r7, #12]
 80075ae:	4413      	add	r3, r2
 80075b0:	ed97 7a07 	vldr	s14, [r7, #28]
 80075b4:	edd7 7a06 	vldr	s15, [r7, #24]
 80075b8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80075bc:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i8 + 1] = p3 - p4;
 80075c0:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80075c4:	00db      	lsls	r3, r3, #3
 80075c6:	3304      	adds	r3, #4
 80075c8:	68fa      	ldr	r2, [r7, #12]
 80075ca:	4413      	add	r3, r2
 80075cc:	ed97 7a05 	vldr	s14, [r7, #20]
 80075d0:	edd7 7a04 	vldr	s15, [r7, #16]
 80075d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80075d8:	edc3 7a00 	vstr	s15, [r3]
            p1 = co6 * r6;
 80075dc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 80075e0:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 80075e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075e8:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si6 * s6;
 80075ec:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 80075f0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 80075f4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80075f8:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co6 * s6;
 80075fc:	ed97 7a14 	vldr	s14, [r7, #80]	@ 0x50
 8007600:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8007604:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007608:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si6 * r6;
 800760c:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8007610:	edd7 7a2b 	vldr	s15, [r7, #172]	@ 0xac
 8007614:	ee67 7a27 	vmul.f32	s15, s14, s15
 8007618:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i6]     = p1 + p2;
 800761c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8007620:	00db      	lsls	r3, r3, #3
 8007622:	68fa      	ldr	r2, [r7, #12]
 8007624:	4413      	add	r3, r2
 8007626:	ed97 7a07 	vldr	s14, [r7, #28]
 800762a:	edd7 7a06 	vldr	s15, [r7, #24]
 800762e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007632:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i6 + 1] = p3 - p4;
 8007636:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800763a:	00db      	lsls	r3, r3, #3
 800763c:	3304      	adds	r3, #4
 800763e:	68fa      	ldr	r2, [r7, #12]
 8007640:	4413      	add	r3, r2
 8007642:	ed97 7a05 	vldr	s14, [r7, #20]
 8007646:	edd7 7a04 	vldr	s15, [r7, #16]
 800764a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800764e:	edc3 7a00 	vstr	s15, [r3]
            p1 = co4 * t1;
 8007652:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8007656:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800765a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800765e:	edc7 7a07 	vstr	s15, [r7, #28]
            p2 = si4 * t2;
 8007662:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007666:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800766a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800766e:	edc7 7a06 	vstr	s15, [r7, #24]
            p3 = co4 * t2;
 8007672:	ed97 7a16 	vldr	s14, [r7, #88]	@ 0x58
 8007676:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 800767a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800767e:	edc7 7a05 	vstr	s15, [r7, #20]
            p4 = si4 * t1;
 8007682:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007686:	edd7 7a26 	vldr	s15, [r7, #152]	@ 0x98
 800768a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800768e:	edc7 7a04 	vstr	s15, [r7, #16]
            pSrc[2 * i4]     = p1 + p2;
 8007692:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8007696:	00db      	lsls	r3, r3, #3
 8007698:	68fa      	ldr	r2, [r7, #12]
 800769a:	4413      	add	r3, r2
 800769c:	ed97 7a07 	vldr	s14, [r7, #28]
 80076a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80076a4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80076a8:	edc3 7a00 	vstr	s15, [r3]
            pSrc[2 * i4 + 1] = p3 - p4;
 80076ac:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 80076b0:	00db      	lsls	r3, r3, #3
 80076b2:	3304      	adds	r3, #4
 80076b4:	68fa      	ldr	r2, [r7, #12]
 80076b6:	4413      	add	r3, r2
 80076b8:	ed97 7a05 	vldr	s14, [r7, #20]
 80076bc:	edd7 7a04 	vldr	s15, [r7, #16]
 80076c0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80076c4:	edc3 7a00 	vstr	s15, [r3]

            i1 += n1;
 80076c8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80076cc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076d0:	4413      	add	r3, r2
 80076d2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
         } while (i1 < fftLen);
 80076d6:	897b      	ldrh	r3, [r7, #10]
 80076d8:	f8d7 20e8 	ldr.w	r2, [r7, #232]	@ 0xe8
 80076dc:	429a      	cmp	r2, r3
 80076de:	f4ff abba 	bcc.w	8006e56 <arm_radix8_butterfly_f32+0x746>

         j++;
 80076e2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e6:	3301      	adds	r3, #1
 80076e8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
      } while (j < n2);
 80076ec:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076f4:	429a      	cmp	r2, r3
 80076f6:	f4ff ab2c 	bcc.w	8006d52 <arm_radix8_butterfly_f32+0x642>

      twidCoefModifier <<= 3;
 80076fa:	893b      	ldrh	r3, [r7, #8]
 80076fc:	00db      	lsls	r3, r3, #3
 80076fe:	813b      	strh	r3, [r7, #8]
   } while (n2 > 7);
 8007700:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007704:	2b07      	cmp	r3, #7
 8007706:	f63f a813 	bhi.w	8006730 <arm_radix8_butterfly_f32+0x20>
}
 800770a:	e000      	b.n	800770e <arm_radix8_butterfly_f32+0xffe>
         break;
 800770c:	bf00      	nop
}
 800770e:	bf00      	nop
 8007710:	37f4      	adds	r7, #244	@ 0xf4
 8007712:	46bd      	mov	sp, r7
 8007714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007718:	4770      	bx	lr
 800771a:	bf00      	nop

0800771c <stage_rfft_f32>:

void stage_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 800771c:	b480      	push	{r7}
 800771e:	b095      	sub	sp, #84	@ 0x54
 8007720:	af00      	add	r7, sp, #0
 8007722:	60f8      	str	r0, [r7, #12]
 8007724:	60b9      	str	r1, [r7, #8]
 8007726:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t * pCoeff = S->pTwiddleRFFT;       /* Points to RFFT Twiddle factors */
 8007728:	68fb      	ldr	r3, [r7, #12]
 800772a:	695b      	ldr	r3, [r3, #20]
 800772c:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 800772e:	68bb      	ldr	r3, [r7, #8]
 8007730:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 8007732:	68bb      	ldr	r3, [r7, #8]
 8007734:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b;                         /* temporary variables */
        float32_t p0, p1, p2, p3;                   /* temporary variables */


   k = (S->Sint).fftLen - 1;
 8007736:	68fb      	ldr	r3, [r7, #12]
 8007738:	881b      	ldrh	r3, [r3, #0]
 800773a:	3b01      	subs	r3, #1
 800773c:	64fb      	str	r3, [r7, #76]	@ 0x4c

   /* Pack first and last sample of the frequency domain together */

   xBR = pB[0];
 800773e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xBI = pB[1];
 8007744:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007746:	685b      	ldr	r3, [r3, #4]
 8007748:	63bb      	str	r3, [r7, #56]	@ 0x38
   xAR = pA[0];
 800774a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	637b      	str	r3, [r7, #52]	@ 0x34
   xAI = pA[1];
 8007750:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007752:	685b      	ldr	r3, [r3, #4]
 8007754:	633b      	str	r3, [r7, #48]	@ 0x30

   twR = *pCoeff++ ;
 8007756:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007758:	1d1a      	adds	r2, r3, #4
 800775a:	64ba      	str	r2, [r7, #72]	@ 0x48
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	62fb      	str	r3, [r7, #44]	@ 0x2c
   twI = *pCoeff++ ;
 8007760:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007762:	1d1a      	adds	r2, r3, #4
 8007764:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	62bb      	str	r3, [r7, #40]	@ 0x28

   // U1 = XA(1) + XB(1); % It is real
   t1a = xBR + xAR  ;
 800776a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800776e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8007772:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007776:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24

   // U2 = XB(1) - XA(1); % It is imaginary
   t1b = xBI + xAI  ;
 800777a:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 800777e:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8007782:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007786:	edc7 7a08 	vstr	s15, [r7, #32]

   // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
   // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
   *pOut++ = 0.5f * ( t1a + t1b );
 800778a:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 800778e:	edd7 7a08 	vldr	s15, [r7, #32]
 8007792:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	1d1a      	adds	r2, r3, #4
 800779a:	607a      	str	r2, [r7, #4]
 800779c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80077a0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077a4:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( t1a - t1b );
 80077a8:	ed97 7a09 	vldr	s14, [r7, #36]	@ 0x24
 80077ac:	edd7 7a08 	vldr	s15, [r7, #32]
 80077b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	1d1a      	adds	r2, r3, #4
 80077b8:	607a      	str	r2, [r7, #4]
 80077ba:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80077be:	ee67 7a87 	vmul.f32	s15, s15, s14
 80077c2:	edc3 7a00 	vstr	s15, [r3]

   // XA(1) = 1/2*( U1 - imag(U2) +  i*( U1 +imag(U2) ));
   pB  = p + 2*k;
 80077c6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80077c8:	00db      	lsls	r3, r3, #3
 80077ca:	68ba      	ldr	r2, [r7, #8]
 80077cc:	4413      	add	r3, r2
 80077ce:	643b      	str	r3, [r7, #64]	@ 0x40
   pA += 2;
 80077d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077d2:	3308      	adds	r3, #8
 80077d4:	647b      	str	r3, [r7, #68]	@ 0x44
         end
         XA(1) = 1/2* (XA(1) + XB(1) + TW(1) * (XB(1) - XA(1))) + i*( 1/2*( XA(1) + XB(1) + i*( XA(1) - XB(1))));
         X = XA;
      */

      xBI = pB[1];
 80077d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077d8:	685b      	ldr	r3, [r3, #4]
 80077da:	63bb      	str	r3, [r7, #56]	@ 0x38
      xBR = pB[0];
 80077dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAR = pA[0];
 80077e2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	637b      	str	r3, [r7, #52]	@ 0x34
      xAI = pA[1];
 80077e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80077ea:	685b      	ldr	r3, [r3, #4]
 80077ec:	633b      	str	r3, [r7, #48]	@ 0x30

      twR = *pCoeff++;
 80077ee:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077f0:	1d1a      	adds	r2, r3, #4
 80077f2:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077f4:	681b      	ldr	r3, [r3, #0]
 80077f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 80077f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80077fa:	1d1a      	adds	r2, r3, #4
 80077fc:	64ba      	str	r2, [r7, #72]	@ 0x48
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xBR - xAR ;
 8007802:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007806:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 800780a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800780e:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xBI + xAI ;
 8007812:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007816:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800781a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800781e:	edc7 7a08 	vstr	s15, [r7, #32]

      // real(tw * (xB - xA)) = twR * (xBR - xAR) - twI * (xBI - xAI);
      // imag(tw * (xB - xA)) = twI * (xBR - xAR) + twR * (xBI - xAI);
      p0 = twR * t1a;
 8007822:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007826:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800782a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800782e:	edc7 7a07 	vstr	s15, [r7, #28]
      p1 = twI * t1a;
 8007832:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007836:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 800783a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800783e:	edc7 7a06 	vstr	s15, [r7, #24]
      p2 = twR * t1b;
 8007842:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8007846:	edd7 7a08 	vldr	s15, [r7, #32]
 800784a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800784e:	edc7 7a05 	vstr	s15, [r7, #20]
      p3 = twI * t1b;
 8007852:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 8007856:	edd7 7a08 	vldr	s15, [r7, #32]
 800785a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800785e:	edc7 7a04 	vstr	s15, [r7, #16]

      *pOut++ = 0.5f * (xAR + xBR + p0 + p3 ); //xAR
 8007862:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8007866:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 800786a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800786e:	edd7 7a07 	vldr	s15, [r7, #28]
 8007872:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007876:	edd7 7a04 	vldr	s15, [r7, #16]
 800787a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	1d1a      	adds	r2, r3, #4
 8007882:	607a      	str	r2, [r7, #4]
 8007884:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007888:	ee67 7a87 	vmul.f32	s15, s15, s14
 800788c:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + p1 - p2 ); //xAI
 8007890:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8007894:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007898:	ee37 7a67 	vsub.f32	s14, s14, s15
 800789c:	edd7 7a06 	vldr	s15, [r7, #24]
 80078a0:	ee37 7a27 	vadd.f32	s14, s14, s15
 80078a4:	edd7 7a05 	vldr	s15, [r7, #20]
 80078a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	1d1a      	adds	r2, r3, #4
 80078b0:	607a      	str	r2, [r7, #4]
 80078b2:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 80078b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80078ba:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 80078be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078c0:	3308      	adds	r3, #8
 80078c2:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 80078c4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80078c6:	3b08      	subs	r3, #8
 80078c8:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 80078ca:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078cc:	3b01      	subs	r3, #1
 80078ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
   } while (k > 0U);
 80078d0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	f47f af7f 	bne.w	80077d6 <stage_rfft_f32+0xba>
}
 80078d8:	bf00      	nop
 80078da:	bf00      	nop
 80078dc:	3754      	adds	r7, #84	@ 0x54
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr

080078e6 <merge_rfft_f32>:
/* Prepares data for inverse cfft */
void merge_rfft_f32(
  const arm_rfft_fast_instance_f32 * S,
        float32_t * p,
        float32_t * pOut)
{
 80078e6:	b480      	push	{r7}
 80078e8:	b095      	sub	sp, #84	@ 0x54
 80078ea:	af00      	add	r7, sp, #0
 80078ec:	60f8      	str	r0, [r7, #12]
 80078ee:	60b9      	str	r1, [r7, #8]
 80078f0:	607a      	str	r2, [r7, #4]
        uint32_t  k;                                /* Loop Counter */
        float32_t twR, twI;                         /* RFFT Twiddle coefficients */
  const float32_t *pCoeff = S->pTwiddleRFFT;        /* Points to RFFT Twiddle factors */
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	695b      	ldr	r3, [r3, #20]
 80078f6:	64bb      	str	r3, [r7, #72]	@ 0x48
        float32_t *pA = p;                          /* increasing pointer */
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	647b      	str	r3, [r7, #68]	@ 0x44
        float32_t *pB = p;                          /* decreasing pointer */
 80078fc:	68bb      	ldr	r3, [r7, #8]
 80078fe:	643b      	str	r3, [r7, #64]	@ 0x40
        float32_t xAR, xAI, xBR, xBI;               /* temporary variables */
        float32_t t1a, t1b, r, s, t, u;             /* temporary variables */

   k = (S->Sint).fftLen - 1;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	881b      	ldrh	r3, [r3, #0]
 8007904:	3b01      	subs	r3, #1
 8007906:	64fb      	str	r3, [r7, #76]	@ 0x4c

   xAR = pA[0];
 8007908:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   xAI = pA[1];
 800790e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007910:	685b      	ldr	r3, [r3, #4]
 8007912:	63bb      	str	r3, [r7, #56]	@ 0x38

   pCoeff += 2 ;
 8007914:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007916:	3308      	adds	r3, #8
 8007918:	64bb      	str	r3, [r7, #72]	@ 0x48

   *pOut++ = 0.5f * ( xAR + xAI );
 800791a:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800791e:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007922:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	1d1a      	adds	r2, r3, #4
 800792a:	607a      	str	r2, [r7, #4]
 800792c:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007930:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007934:	edc3 7a00 	vstr	s15, [r3]
   *pOut++ = 0.5f * ( xAR - xAI );
 8007938:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 800793c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8007940:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	1d1a      	adds	r2, r3, #4
 8007948:	607a      	str	r2, [r7, #4]
 800794a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 800794e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007952:	edc3 7a00 	vstr	s15, [r3]

   pB  =  p + 2*k ;
 8007956:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007958:	00db      	lsls	r3, r3, #3
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4413      	add	r3, r2
 800795e:	643b      	str	r3, [r7, #64]	@ 0x40
   pA +=  2	   ;
 8007960:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007962:	3308      	adds	r3, #8
 8007964:	647b      	str	r3, [r7, #68]	@ 0x44

   while (k > 0U)
 8007966:	e07c      	b.n	8007a62 <merge_rfft_f32+0x17c>
   {
      /* G is half of the frequency complex spectrum */
      //for k = 2:N
      //    Xk(k) = 1/2 * (G(k) + conj(G(N-k+2)) + Tw(k)*( G(k) - conj(G(N-k+2))));
      xBI =   pB[1]    ;
 8007968:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800796a:	685b      	ldr	r3, [r3, #4]
 800796c:	637b      	str	r3, [r7, #52]	@ 0x34
      xBR =   pB[0]    ;
 800796e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	633b      	str	r3, [r7, #48]	@ 0x30
      xAR =  pA[0];
 8007974:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	63fb      	str	r3, [r7, #60]	@ 0x3c
      xAI =  pA[1];
 800797a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800797c:	685b      	ldr	r3, [r3, #4]
 800797e:	63bb      	str	r3, [r7, #56]	@ 0x38

      twR = *pCoeff++;
 8007980:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007982:	1d1a      	adds	r2, r3, #4
 8007984:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	62fb      	str	r3, [r7, #44]	@ 0x2c
      twI = *pCoeff++;
 800798a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800798c:	1d1a      	adds	r2, r3, #4
 800798e:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	62bb      	str	r3, [r7, #40]	@ 0x28

      t1a = xAR - xBR ;
 8007994:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8007998:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 800799c:	ee77 7a67 	vsub.f32	s15, s14, s15
 80079a0:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
      t1b = xAI + xBI ;
 80079a4:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 80079a8:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 80079ac:	ee77 7a27 	vadd.f32	s15, s14, s15
 80079b0:	edc7 7a08 	vstr	s15, [r7, #32]

      r = twR * t1a;
 80079b4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80079b8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80079bc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079c0:	edc7 7a07 	vstr	s15, [r7, #28]
      s = twI * t1b;
 80079c4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80079c8:	edd7 7a08 	vldr	s15, [r7, #32]
 80079cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079d0:	edc7 7a06 	vstr	s15, [r7, #24]
      t = twI * t1a;
 80079d4:	ed97 7a0a 	vldr	s14, [r7, #40]	@ 0x28
 80079d8:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 80079dc:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079e0:	edc7 7a05 	vstr	s15, [r7, #20]
      u = twR * t1b;
 80079e4:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 80079e8:	edd7 7a08 	vldr	s15, [r7, #32]
 80079ec:	ee67 7a27 	vmul.f32	s15, s14, s15
 80079f0:	edc7 7a04 	vstr	s15, [r7, #16]

      // real(tw * (xA - xB)) = twR * (xAR - xBR) - twI * (xAI - xBI);
      // imag(tw * (xA - xB)) = twI * (xAR - xBR) + twR * (xAI - xBI);
      *pOut++ = 0.5f * (xAR + xBR - r - s ); //xAR
 80079f4:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 80079f8:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 80079fc:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a00:	edd7 7a07 	vldr	s15, [r7, #28]
 8007a04:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a08:	edd7 7a06 	vldr	s15, [r7, #24]
 8007a0c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	1d1a      	adds	r2, r3, #4
 8007a14:	607a      	str	r2, [r7, #4]
 8007a16:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a1e:	edc3 7a00 	vstr	s15, [r3]
      *pOut++ = 0.5f * (xAI - xBI + t - u ); //xAI
 8007a22:	ed97 7a0e 	vldr	s14, [r7, #56]	@ 0x38
 8007a26:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8007a2a:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007a2e:	edd7 7a05 	vldr	s15, [r7, #20]
 8007a32:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007a36:	edd7 7a04 	vldr	s15, [r7, #16]
 8007a3a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	1d1a      	adds	r2, r3, #4
 8007a42:	607a      	str	r2, [r7, #4]
 8007a44:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8007a48:	ee67 7a87 	vmul.f32	s15, s15, s14
 8007a4c:	edc3 7a00 	vstr	s15, [r3]

      pA += 2;
 8007a50:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007a52:	3308      	adds	r3, #8
 8007a54:	647b      	str	r3, [r7, #68]	@ 0x44
      pB -= 2;
 8007a56:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007a58:	3b08      	subs	r3, #8
 8007a5a:	643b      	str	r3, [r7, #64]	@ 0x40
      k--;
 8007a5c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a5e:	3b01      	subs	r3, #1
 8007a60:	64fb      	str	r3, [r7, #76]	@ 0x4c
   while (k > 0U)
 8007a62:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a64:	2b00      	cmp	r3, #0
 8007a66:	f47f af7f 	bne.w	8007968 <merge_rfft_f32+0x82>
   }

}
 8007a6a:	bf00      	nop
 8007a6c:	bf00      	nop
 8007a6e:	3754      	adds	r7, #84	@ 0x54
 8007a70:	46bd      	mov	sp, r7
 8007a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a76:	4770      	bx	lr

08007a78 <arm_rfft_fast_f32>:
void arm_rfft_fast_f32(
  arm_rfft_fast_instance_f32 * S,
  float32_t * p,
  float32_t * pOut,
  uint8_t ifftFlag)
{
 8007a78:	b580      	push	{r7, lr}
 8007a7a:	b086      	sub	sp, #24
 8007a7c:	af00      	add	r7, sp, #0
 8007a7e:	60f8      	str	r0, [r7, #12]
 8007a80:	60b9      	str	r1, [r7, #8]
 8007a82:	607a      	str	r2, [r7, #4]
 8007a84:	70fb      	strb	r3, [r7, #3]
   arm_cfft_instance_f32 * Sint = &(S->Sint);
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	617b      	str	r3, [r7, #20]
   Sint->fftLen = S->fftLenRFFT / 2;
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	8a1b      	ldrh	r3, [r3, #16]
 8007a8e:	085b      	lsrs	r3, r3, #1
 8007a90:	b29a      	uxth	r2, r3
 8007a92:	697b      	ldr	r3, [r7, #20]
 8007a94:	801a      	strh	r2, [r3, #0]

   /* Calculation of Real FFT */
   if (ifftFlag)
 8007a96:	78fb      	ldrb	r3, [r7, #3]
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <arm_rfft_fast_f32+0x3c>
   {
      /*  Real FFT compression */
      merge_rfft_f32(S, p, pOut);
 8007a9c:	687a      	ldr	r2, [r7, #4]
 8007a9e:	68b9      	ldr	r1, [r7, #8]
 8007aa0:	68f8      	ldr	r0, [r7, #12]
 8007aa2:	f7ff ff20 	bl	80078e6 <merge_rfft_f32>

      /* Complex radix-4 IFFT process */
      arm_cfft_f32( Sint, pOut, ifftFlag, 1);
 8007aa6:	78fa      	ldrb	r2, [r7, #3]
 8007aa8:	2301      	movs	r3, #1
 8007aaa:	6879      	ldr	r1, [r7, #4]
 8007aac:	6978      	ldr	r0, [r7, #20]
 8007aae:	f7fe fd74 	bl	800659a <arm_cfft_f32>
      arm_cfft_f32( Sint, p, ifftFlag, 1);

      /*  Real FFT extraction */
      stage_rfft_f32(S, p, pOut);
   }
}
 8007ab2:	e00a      	b.n	8007aca <arm_rfft_fast_f32+0x52>
      arm_cfft_f32( Sint, p, ifftFlag, 1);
 8007ab4:	78fa      	ldrb	r2, [r7, #3]
 8007ab6:	2301      	movs	r3, #1
 8007ab8:	68b9      	ldr	r1, [r7, #8]
 8007aba:	6978      	ldr	r0, [r7, #20]
 8007abc:	f7fe fd6d 	bl	800659a <arm_cfft_f32>
      stage_rfft_f32(S, p, pOut);
 8007ac0:	687a      	ldr	r2, [r7, #4]
 8007ac2:	68b9      	ldr	r1, [r7, #8]
 8007ac4:	68f8      	ldr	r0, [r7, #12]
 8007ac6:	f7ff fe29 	bl	800771c <stage_rfft_f32>
}
 8007aca:	bf00      	nop
 8007acc:	3718      	adds	r7, #24
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}
	...

08007ad4 <arm_rfft_32_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_32_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007ad4:	b480      	push	{r7}
 8007ad6:	b085      	sub	sp, #20
 8007ad8:	af00      	add	r7, sp, #0
 8007ada:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d102      	bne.n	8007ae8 <arm_rfft_32_fast_init_f32+0x14>
 8007ae2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ae6:	e014      	b.n	8007b12 <arm_rfft_32_fast_init_f32+0x3e>

  Sint = &(S->Sint);
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 16U;
 8007aec:	68fb      	ldr	r3, [r7, #12]
 8007aee:	2210      	movs	r2, #16
 8007af0:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 32U;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2220      	movs	r2, #32
 8007af6:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_16_TABLE_LENGTH;
 8007af8:	68fb      	ldr	r3, [r7, #12]
 8007afa:	2214      	movs	r2, #20
 8007afc:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable16;
 8007afe:	68fb      	ldr	r3, [r7, #12]
 8007b00:	4a07      	ldr	r2, [pc, #28]	@ (8007b20 <arm_rfft_32_fast_init_f32+0x4c>)
 8007b02:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_16;
 8007b04:	68fb      	ldr	r3, [r7, #12]
 8007b06:	4a07      	ldr	r2, [pc, #28]	@ (8007b24 <arm_rfft_32_fast_init_f32+0x50>)
 8007b08:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_32;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	4a06      	ldr	r2, [pc, #24]	@ (8007b28 <arm_rfft_32_fast_init_f32+0x54>)
 8007b0e:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007b10:	2300      	movs	r3, #0
}
 8007b12:	4618      	mov	r0, r3
 8007b14:	3714      	adds	r7, #20
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
 8007b1e:	bf00      	nop
 8007b20:	0801ce98 	.word	0x0801ce98
 8007b24:	08015118 	.word	0x08015118
 8007b28:	08020380 	.word	0x08020380

08007b2c <arm_rfft_64_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_64_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007b2c:	b480      	push	{r7}
 8007b2e:	b085      	sub	sp, #20
 8007b30:	af00      	add	r7, sp, #0
 8007b32:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	2b00      	cmp	r3, #0
 8007b38:	d102      	bne.n	8007b40 <arm_rfft_64_fast_init_f32+0x14>
 8007b3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b3e:	e014      	b.n	8007b6a <arm_rfft_64_fast_init_f32+0x3e>

  Sint = &(S->Sint);
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 32U;
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	2220      	movs	r2, #32
 8007b48:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 64U;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	2240      	movs	r2, #64	@ 0x40
 8007b4e:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_32_TABLE_LENGTH;
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2230      	movs	r2, #48	@ 0x30
 8007b54:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable32;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	4a07      	ldr	r2, [pc, #28]	@ (8007b78 <arm_rfft_64_fast_init_f32+0x4c>)
 8007b5a:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_32;
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	4a07      	ldr	r2, [pc, #28]	@ (8007b7c <arm_rfft_64_fast_init_f32+0x50>)
 8007b60:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_64;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	4a06      	ldr	r2, [pc, #24]	@ (8007b80 <arm_rfft_64_fast_init_f32+0x54>)
 8007b66:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007b68:	2300      	movs	r3, #0
}
 8007b6a:	4618      	mov	r0, r3
 8007b6c:	3714      	adds	r7, #20
 8007b6e:	46bd      	mov	sp, r7
 8007b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b74:	4770      	bx	lr
 8007b76:	bf00      	nop
 8007b78:	0801cec0 	.word	0x0801cec0
 8007b7c:	08015198 	.word	0x08015198
 8007b80:	08020400 	.word	0x08020400

08007b84 <arm_rfft_256_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
*/

arm_status arm_rfft_256_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007b84:	b480      	push	{r7}
 8007b86:	b085      	sub	sp, #20
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	2b00      	cmp	r3, #0
 8007b90:	d102      	bne.n	8007b98 <arm_rfft_256_fast_init_f32+0x14>
 8007b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007b96:	e015      	b.n	8007bc4 <arm_rfft_256_fast_init_f32+0x40>

  Sint = &(S->Sint);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 128U;
 8007b9c:	68fb      	ldr	r3, [r7, #12]
 8007b9e:	2280      	movs	r2, #128	@ 0x80
 8007ba0:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 256U;
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007ba8:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_128_TABLE_LENGTH;
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	22d0      	movs	r2, #208	@ 0xd0
 8007bae:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable128;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	4a07      	ldr	r2, [pc, #28]	@ (8007bd0 <arm_rfft_256_fast_init_f32+0x4c>)
 8007bb4:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_128;
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	4a06      	ldr	r2, [pc, #24]	@ (8007bd4 <arm_rfft_256_fast_init_f32+0x50>)
 8007bba:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_256;
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a06      	ldr	r2, [pc, #24]	@ (8007bd8 <arm_rfft_256_fast_init_f32+0x54>)
 8007bc0:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007bc2:	2300      	movs	r3, #0
}
 8007bc4:	4618      	mov	r0, r3
 8007bc6:	3714      	adds	r7, #20
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr
 8007bd0:	0801cf20 	.word	0x0801cf20
 8007bd4:	08015298 	.word	0x08015298
 8007bd8:	08020500 	.word	0x08020500

08007bdc <arm_rfft_512_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_512_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007bdc:	b480      	push	{r7}
 8007bde:	b085      	sub	sp, #20
 8007be0:	af00      	add	r7, sp, #0
 8007be2:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d102      	bne.n	8007bf0 <arm_rfft_512_fast_init_f32+0x14>
 8007bea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007bee:	e017      	b.n	8007c20 <arm_rfft_512_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 256U;
 8007bf4:	68fb      	ldr	r3, [r7, #12]
 8007bf6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8007bfa:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 512U;
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c02:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_256_TABLE_LENGTH;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	f44f 72dc 	mov.w	r2, #440	@ 0x1b8
 8007c0a:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable256;
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	4a07      	ldr	r2, [pc, #28]	@ (8007c2c <arm_rfft_512_fast_init_f32+0x50>)
 8007c10:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_256;
 8007c12:	68fb      	ldr	r3, [r7, #12]
 8007c14:	4a06      	ldr	r2, [pc, #24]	@ (8007c30 <arm_rfft_512_fast_init_f32+0x54>)
 8007c16:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_512;
 8007c18:	687b      	ldr	r3, [r7, #4]
 8007c1a:	4a06      	ldr	r2, [pc, #24]	@ (8007c34 <arm_rfft_512_fast_init_f32+0x58>)
 8007c1c:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007c1e:	2300      	movs	r3, #0
}
 8007c20:	4618      	mov	r0, r3
 8007c22:	3714      	adds	r7, #20
 8007c24:	46bd      	mov	sp, r7
 8007c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2a:	4770      	bx	lr
 8007c2c:	0801d0c0 	.word	0x0801d0c0
 8007c30:	08015698 	.word	0x08015698
 8007c34:	08020900 	.word	0x08020900

08007c38 <arm_rfft_1024_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_1024_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007c38:	b480      	push	{r7}
 8007c3a:	b085      	sub	sp, #20
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d102      	bne.n	8007c4c <arm_rfft_1024_fast_init_f32+0x14>
 8007c46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007c4a:	e017      	b.n	8007c7c <arm_rfft_1024_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8007c4c:	687b      	ldr	r3, [r7, #4]
 8007c4e:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 512U;
 8007c50:	68fb      	ldr	r3, [r7, #12]
 8007c52:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007c56:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 1024U;
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007c5e:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_512_TABLE_LENGTH;
 8007c60:	68fb      	ldr	r3, [r7, #12]
 8007c62:	f44f 72e0 	mov.w	r2, #448	@ 0x1c0
 8007c66:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable512;
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	4a07      	ldr	r2, [pc, #28]	@ (8007c88 <arm_rfft_1024_fast_init_f32+0x50>)
 8007c6c:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_512;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	4a06      	ldr	r2, [pc, #24]	@ (8007c8c <arm_rfft_1024_fast_init_f32+0x54>)
 8007c72:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_1024;
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	4a06      	ldr	r2, [pc, #24]	@ (8007c90 <arm_rfft_1024_fast_init_f32+0x58>)
 8007c78:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007c7a:	2300      	movs	r3, #0
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	3714      	adds	r7, #20
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	0801d430 	.word	0x0801d430
 8007c8c:	08015e98 	.word	0x08015e98
 8007c90:	08021100 	.word	0x08021100

08007c94 <arm_rfft_2048_fast_init_f32>:
  @param[in,out] S  points to an arm_rfft_fast_instance_f32 structure
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */
arm_status arm_rfft_2048_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	2b00      	cmp	r3, #0
 8007ca0:	d102      	bne.n	8007ca8 <arm_rfft_2048_fast_init_f32+0x14>
 8007ca2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007ca6:	e017      	b.n	8007cd8 <arm_rfft_2048_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8007ca8:	687b      	ldr	r3, [r7, #4]
 8007caa:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 1024U;
 8007cac:	68fb      	ldr	r3, [r7, #12]
 8007cae:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8007cb2:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 2048U;
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007cba:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_1024_TABLE_LENGTH;
 8007cbc:	68fb      	ldr	r3, [r7, #12]
 8007cbe:	f44f 62e1 	mov.w	r2, #1800	@ 0x708
 8007cc2:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable1024;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	4a07      	ldr	r2, [pc, #28]	@ (8007ce4 <arm_rfft_2048_fast_init_f32+0x50>)
 8007cc8:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_1024;
 8007cca:	68fb      	ldr	r3, [r7, #12]
 8007ccc:	4a06      	ldr	r2, [pc, #24]	@ (8007ce8 <arm_rfft_2048_fast_init_f32+0x54>)
 8007cce:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_2048;
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	4a06      	ldr	r2, [pc, #24]	@ (8007cec <arm_rfft_2048_fast_init_f32+0x58>)
 8007cd4:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007cd6:	2300      	movs	r3, #0
}
 8007cd8:	4618      	mov	r0, r3
 8007cda:	3714      	adds	r7, #20
 8007cdc:	46bd      	mov	sp, r7
 8007cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce2:	4770      	bx	lr
 8007ce4:	0801d7b0 	.word	0x0801d7b0
 8007ce8:	08016e98 	.word	0x08016e98
 8007cec:	08022100 	.word	0x08022100

08007cf0 <arm_rfft_4096_fast_init_f32>:
  @return        execution status
                   - \ref ARM_MATH_SUCCESS        : Operation successful
                   - \ref ARM_MATH_ARGUMENT_ERROR : an error is detected
 */

arm_status arm_rfft_4096_fast_init_f32( arm_rfft_fast_instance_f32 * S ) {
 8007cf0:	b480      	push	{r7}
 8007cf2:	b085      	sub	sp, #20
 8007cf4:	af00      	add	r7, sp, #0
 8007cf6:	6078      	str	r0, [r7, #4]

  arm_cfft_instance_f32 * Sint;

  if( !S ) return ARM_MATH_ARGUMENT_ERROR;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d102      	bne.n	8007d04 <arm_rfft_4096_fast_init_f32+0x14>
 8007cfe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007d02:	e017      	b.n	8007d34 <arm_rfft_4096_fast_init_f32+0x44>

  Sint = &(S->Sint);
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	60fb      	str	r3, [r7, #12]
  Sint->fftLen = 2048U;
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8007d0e:	801a      	strh	r2, [r3, #0]
  S->fftLenRFFT = 4096U;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8007d16:	821a      	strh	r2, [r3, #16]

  Sint->bitRevLength = ARMBITREVINDEXTABLE_2048_TABLE_LENGTH;
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	f44f 626e 	mov.w	r2, #3808	@ 0xee0
 8007d1e:	819a      	strh	r2, [r3, #12]
  Sint->pBitRevTable = (uint16_t *)armBitRevIndexTable2048;
 8007d20:	68fb      	ldr	r3, [r7, #12]
 8007d22:	4a07      	ldr	r2, [pc, #28]	@ (8007d40 <arm_rfft_4096_fast_init_f32+0x50>)
 8007d24:	609a      	str	r2, [r3, #8]
  Sint->pTwiddle     = (float32_t *) twiddleCoef_2048;
 8007d26:	68fb      	ldr	r3, [r7, #12]
 8007d28:	4a06      	ldr	r2, [pc, #24]	@ (8007d44 <arm_rfft_4096_fast_init_f32+0x54>)
 8007d2a:	605a      	str	r2, [r3, #4]
  S->pTwiddleRFFT    = (float32_t *) twiddleCoef_rfft_4096;
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a06      	ldr	r2, [pc, #24]	@ (8007d48 <arm_rfft_4096_fast_init_f32+0x58>)
 8007d30:	615a      	str	r2, [r3, #20]

  return ARM_MATH_SUCCESS;
 8007d32:	2300      	movs	r3, #0
}
 8007d34:	4618      	mov	r0, r3
 8007d36:	3714      	adds	r7, #20
 8007d38:	46bd      	mov	sp, r7
 8007d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3e:	4770      	bx	lr
 8007d40:	0801e5c0 	.word	0x0801e5c0
 8007d44:	08018e98 	.word	0x08018e98
 8007d48:	08024100 	.word	0x08024100

08007d4c <arm_rfft_fast_init_f32>:
 */

arm_status arm_rfft_fast_init_f32(
  arm_rfft_fast_instance_f32 * S,
  uint16_t fftLen)
{
 8007d4c:	b580      	push	{r7, lr}
 8007d4e:	b084      	sub	sp, #16
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	6078      	str	r0, [r7, #4]
 8007d54:	460b      	mov	r3, r1
 8007d56:	807b      	strh	r3, [r7, #2]
  typedef arm_status(*fft_init_ptr)( arm_rfft_fast_instance_f32 *);
  fft_init_ptr fptr = 0x0;
 8007d58:	2300      	movs	r3, #0
 8007d5a:	60fb      	str	r3, [r7, #12]

  switch (fftLen)
 8007d5c:	887b      	ldrh	r3, [r7, #2]
 8007d5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d62:	d01f      	beq.n	8007da4 <arm_rfft_fast_init_f32+0x58>
 8007d64:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d68:	dc31      	bgt.n	8007dce <arm_rfft_fast_init_f32+0x82>
 8007d6a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d6e:	d01c      	beq.n	8007daa <arm_rfft_fast_init_f32+0x5e>
 8007d70:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d74:	dc2b      	bgt.n	8007dce <arm_rfft_fast_init_f32+0x82>
 8007d76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d7a:	d019      	beq.n	8007db0 <arm_rfft_fast_init_f32+0x64>
 8007d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007d80:	dc25      	bgt.n	8007dce <arm_rfft_fast_init_f32+0x82>
 8007d82:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d86:	d016      	beq.n	8007db6 <arm_rfft_fast_init_f32+0x6a>
 8007d88:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007d8c:	dc1f      	bgt.n	8007dce <arm_rfft_fast_init_f32+0x82>
 8007d8e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d92:	d013      	beq.n	8007dbc <arm_rfft_fast_init_f32+0x70>
 8007d94:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007d98:	dc19      	bgt.n	8007dce <arm_rfft_fast_init_f32+0x82>
 8007d9a:	2b20      	cmp	r3, #32
 8007d9c:	d014      	beq.n	8007dc8 <arm_rfft_fast_init_f32+0x7c>
 8007d9e:	2b40      	cmp	r3, #64	@ 0x40
 8007da0:	d00f      	beq.n	8007dc2 <arm_rfft_fast_init_f32+0x76>
 8007da2:	e014      	b.n	8007dce <arm_rfft_fast_init_f32+0x82>
  {
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_BITREVIDX_FLT_2048) && defined(ARM_TABLE_TWIDDLECOEF_F32_2048) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_4096))
  case 4096U:
    fptr = arm_rfft_4096_fast_init_f32;
 8007da4:	4b12      	ldr	r3, [pc, #72]	@ (8007df0 <arm_rfft_fast_init_f32+0xa4>)
 8007da6:	60fb      	str	r3, [r7, #12]
    break;
 8007da8:	e014      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_BITREVIDX_FLT_1024) && defined(ARM_TABLE_TWIDDLECOEF_F32_1024) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_2048))
  case 2048U:
    fptr = arm_rfft_2048_fast_init_f32;
 8007daa:	4b12      	ldr	r3, [pc, #72]	@ (8007df4 <arm_rfft_fast_init_f32+0xa8>)
 8007dac:	60fb      	str	r3, [r7, #12]
    break;
 8007dae:	e011      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_BITREVIDX_FLT_512) && defined(ARM_TABLE_TWIDDLECOEF_F32_512) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_1024))
  case 1024U:
    fptr = arm_rfft_1024_fast_init_f32;
 8007db0:	4b11      	ldr	r3, [pc, #68]	@ (8007df8 <arm_rfft_fast_init_f32+0xac>)
 8007db2:	60fb      	str	r3, [r7, #12]
    break;
 8007db4:	e00e      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_BITREVIDX_FLT_256) && defined(ARM_TABLE_TWIDDLECOEF_F32_256) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_512))
  case 512U:
    fptr = arm_rfft_512_fast_init_f32;
 8007db6:	4b11      	ldr	r3, [pc, #68]	@ (8007dfc <arm_rfft_fast_init_f32+0xb0>)
 8007db8:	60fb      	str	r3, [r7, #12]
    break;
 8007dba:	e00b      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_BITREVIDX_FLT_128) && defined(ARM_TABLE_TWIDDLECOEF_F32_128) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_256))
  case 256U:
    fptr = arm_rfft_256_fast_init_f32;
 8007dbc:	4b10      	ldr	r3, [pc, #64]	@ (8007e00 <arm_rfft_fast_init_f32+0xb4>)
 8007dbe:	60fb      	str	r3, [r7, #12]
    break;
 8007dc0:	e008      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
    fptr = arm_rfft_128_fast_init_f32;
    break;
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_BITREVIDX_FLT_32) && defined(ARM_TABLE_TWIDDLECOEF_F32_32) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_64))
  case 64U:
    fptr = arm_rfft_64_fast_init_f32;
 8007dc2:	4b10      	ldr	r3, [pc, #64]	@ (8007e04 <arm_rfft_fast_init_f32+0xb8>)
 8007dc4:	60fb      	str	r3, [r7, #12]
    break;
 8007dc6:	e005      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
#endif
#if !defined(ARM_DSP_CONFIG_TABLES) || defined(ARM_ALL_FFT_TABLES) || (defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_BITREVIDX_FLT_16) && defined(ARM_TABLE_TWIDDLECOEF_F32_16) && defined(ARM_TABLE_TWIDDLECOEF_RFFT_F32_32))
  case 32U:
    fptr = arm_rfft_32_fast_init_f32;
 8007dc8:	4b0f      	ldr	r3, [pc, #60]	@ (8007e08 <arm_rfft_fast_init_f32+0xbc>)
 8007dca:	60fb      	str	r3, [r7, #12]
    break;
 8007dcc:	e002      	b.n	8007dd4 <arm_rfft_fast_init_f32+0x88>
#endif
  default:
    return ARM_MATH_ARGUMENT_ERROR;
 8007dce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dd2:	e009      	b.n	8007de8 <arm_rfft_fast_init_f32+0x9c>
  }

  if( ! fptr ) return ARM_MATH_ARGUMENT_ERROR;
 8007dd4:	68fb      	ldr	r3, [r7, #12]
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d102      	bne.n	8007de0 <arm_rfft_fast_init_f32+0x94>
 8007dda:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007dde:	e003      	b.n	8007de8 <arm_rfft_fast_init_f32+0x9c>
  return fptr( S );
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	6878      	ldr	r0, [r7, #4]
 8007de4:	4798      	blx	r3
 8007de6:	4603      	mov	r3, r0

}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3710      	adds	r7, #16
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	08007cf1 	.word	0x08007cf1
 8007df4:	08007c95 	.word	0x08007c95
 8007df8:	08007c39 	.word	0x08007c39
 8007dfc:	08007bdd 	.word	0x08007bdd
 8007e00:	08007b85 	.word	0x08007b85
 8007e04:	08007b2d 	.word	0x08007b2d
 8007e08:	08007ad5 	.word	0x08007ad5

08007e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007e0c:	b580      	push	{r7, lr}
 8007e0e:	b082      	sub	sp, #8
 8007e10:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007e12:	2003      	movs	r0, #3
 8007e14:	f000 f99c 	bl	8008150 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8007e18:	f004 fd2c 	bl	800c874 <HAL_RCC_GetSysClockFreq>
 8007e1c:	4602      	mov	r2, r0
 8007e1e:	4b15      	ldr	r3, [pc, #84]	@ (8007e74 <HAL_Init+0x68>)
 8007e20:	699b      	ldr	r3, [r3, #24]
 8007e22:	0a1b      	lsrs	r3, r3, #8
 8007e24:	f003 030f 	and.w	r3, r3, #15
 8007e28:	4913      	ldr	r1, [pc, #76]	@ (8007e78 <HAL_Init+0x6c>)
 8007e2a:	5ccb      	ldrb	r3, [r1, r3]
 8007e2c:	f003 031f 	and.w	r3, r3, #31
 8007e30:	fa22 f303 	lsr.w	r3, r2, r3
 8007e34:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8007e36:	4b0f      	ldr	r3, [pc, #60]	@ (8007e74 <HAL_Init+0x68>)
 8007e38:	699b      	ldr	r3, [r3, #24]
 8007e3a:	f003 030f 	and.w	r3, r3, #15
 8007e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8007e78 <HAL_Init+0x6c>)
 8007e40:	5cd3      	ldrb	r3, [r2, r3]
 8007e42:	f003 031f 	and.w	r3, r3, #31
 8007e46:	687a      	ldr	r2, [r7, #4]
 8007e48:	fa22 f303 	lsr.w	r3, r2, r3
 8007e4c:	4a0b      	ldr	r2, [pc, #44]	@ (8007e7c <HAL_Init+0x70>)
 8007e4e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8007e50:	4a0b      	ldr	r2, [pc, #44]	@ (8007e80 <HAL_Init+0x74>)
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8007e56:	200f      	movs	r0, #15
 8007e58:	f000 f814 	bl	8007e84 <HAL_InitTick>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	2b00      	cmp	r3, #0
 8007e60:	d001      	beq.n	8007e66 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8007e62:	2301      	movs	r3, #1
 8007e64:	e002      	b.n	8007e6c <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8007e66:	f7fb fa7d 	bl	8003364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}
 8007e74:	58024400 	.word	0x58024400
 8007e78:	0802890c 	.word	0x0802890c
 8007e7c:	24000480 	.word	0x24000480
 8007e80:	2400047c 	.word	0x2400047c

08007e84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007e84:	b580      	push	{r7, lr}
 8007e86:	b082      	sub	sp, #8
 8007e88:	af00      	add	r7, sp, #0
 8007e8a:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8007e8c:	4b15      	ldr	r3, [pc, #84]	@ (8007ee4 <HAL_InitTick+0x60>)
 8007e8e:	781b      	ldrb	r3, [r3, #0]
 8007e90:	2b00      	cmp	r3, #0
 8007e92:	d101      	bne.n	8007e98 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8007e94:	2301      	movs	r3, #1
 8007e96:	e021      	b.n	8007edc <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8007e98:	4b13      	ldr	r3, [pc, #76]	@ (8007ee8 <HAL_InitTick+0x64>)
 8007e9a:	681a      	ldr	r2, [r3, #0]
 8007e9c:	4b11      	ldr	r3, [pc, #68]	@ (8007ee4 <HAL_InitTick+0x60>)
 8007e9e:	781b      	ldrb	r3, [r3, #0]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8007ea6:	fbb3 f3f1 	udiv	r3, r3, r1
 8007eaa:	fbb2 f3f3 	udiv	r3, r2, r3
 8007eae:	4618      	mov	r0, r3
 8007eb0:	f000 f981 	bl	80081b6 <HAL_SYSTICK_Config>
 8007eb4:	4603      	mov	r3, r0
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d001      	beq.n	8007ebe <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8007eba:	2301      	movs	r3, #1
 8007ebc:	e00e      	b.n	8007edc <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2b0f      	cmp	r3, #15
 8007ec2:	d80a      	bhi.n	8007eda <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007ec4:	2200      	movs	r2, #0
 8007ec6:	6879      	ldr	r1, [r7, #4]
 8007ec8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007ecc:	f000 f94b 	bl	8008166 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007ed0:	4a06      	ldr	r2, [pc, #24]	@ (8007eec <HAL_InitTick+0x68>)
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007ed6:	2300      	movs	r3, #0
 8007ed8:	e000      	b.n	8007edc <HAL_InitTick+0x58>
    return HAL_ERROR;
 8007eda:	2301      	movs	r3, #1
}
 8007edc:	4618      	mov	r0, r3
 8007ede:	3708      	adds	r7, #8
 8007ee0:	46bd      	mov	sp, r7
 8007ee2:	bd80      	pop	{r7, pc}
 8007ee4:	24000478 	.word	0x24000478
 8007ee8:	2400047c 	.word	0x2400047c
 8007eec:	24000474 	.word	0x24000474

08007ef0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007ef0:	b480      	push	{r7}
 8007ef2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8007ef4:	4b06      	ldr	r3, [pc, #24]	@ (8007f10 <HAL_IncTick+0x20>)
 8007ef6:	781b      	ldrb	r3, [r3, #0]
 8007ef8:	461a      	mov	r2, r3
 8007efa:	4b06      	ldr	r3, [pc, #24]	@ (8007f14 <HAL_IncTick+0x24>)
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	4413      	add	r3, r2
 8007f00:	4a04      	ldr	r2, [pc, #16]	@ (8007f14 <HAL_IncTick+0x24>)
 8007f02:	6013      	str	r3, [r2, #0]
}
 8007f04:	bf00      	nop
 8007f06:	46bd      	mov	sp, r7
 8007f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0c:	4770      	bx	lr
 8007f0e:	bf00      	nop
 8007f10:	24000478 	.word	0x24000478
 8007f14:	2400b75c 	.word	0x2400b75c

08007f18 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007f18:	b480      	push	{r7}
 8007f1a:	af00      	add	r7, sp, #0
  return uwTick;
 8007f1c:	4b03      	ldr	r3, [pc, #12]	@ (8007f2c <HAL_GetTick+0x14>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
}
 8007f20:	4618      	mov	r0, r3
 8007f22:	46bd      	mov	sp, r7
 8007f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f28:	4770      	bx	lr
 8007f2a:	bf00      	nop
 8007f2c:	2400b75c 	.word	0x2400b75c

08007f30 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007f38:	f7ff ffee 	bl	8007f18 <HAL_GetTick>
 8007f3c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007f48:	d005      	beq.n	8007f56 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8007f4a:	4b0a      	ldr	r3, [pc, #40]	@ (8007f74 <HAL_Delay+0x44>)
 8007f4c:	781b      	ldrb	r3, [r3, #0]
 8007f4e:	461a      	mov	r2, r3
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	4413      	add	r3, r2
 8007f54:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8007f56:	bf00      	nop
 8007f58:	f7ff ffde 	bl	8007f18 <HAL_GetTick>
 8007f5c:	4602      	mov	r2, r0
 8007f5e:	68bb      	ldr	r3, [r7, #8]
 8007f60:	1ad3      	subs	r3, r2, r3
 8007f62:	68fa      	ldr	r2, [r7, #12]
 8007f64:	429a      	cmp	r2, r3
 8007f66:	d8f7      	bhi.n	8007f58 <HAL_Delay+0x28>
  {
  }
}
 8007f68:	bf00      	nop
 8007f6a:	bf00      	nop
 8007f6c:	3710      	adds	r7, #16
 8007f6e:	46bd      	mov	sp, r7
 8007f70:	bd80      	pop	{r7, pc}
 8007f72:	bf00      	nop
 8007f74:	24000478 	.word	0x24000478

08007f78 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8007f78:	b480      	push	{r7}
 8007f7a:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8007f7c:	4b03      	ldr	r3, [pc, #12]	@ (8007f8c <HAL_GetREVID+0x14>)
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	0c1b      	lsrs	r3, r3, #16
}
 8007f82:	4618      	mov	r0, r3
 8007f84:	46bd      	mov	sp, r7
 8007f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f8a:	4770      	bx	lr
 8007f8c:	5c001000 	.word	0x5c001000

08007f90 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 8007f94:	4b05      	ldr	r3, [pc, #20]	@ (8007fac <HAL_EnableCompensationCell+0x1c>)
 8007f96:	6a1b      	ldr	r3, [r3, #32]
 8007f98:	4a04      	ldr	r2, [pc, #16]	@ (8007fac <HAL_EnableCompensationCell+0x1c>)
 8007f9a:	f043 0301 	orr.w	r3, r3, #1
 8007f9e:	6213      	str	r3, [r2, #32]
}
 8007fa0:	bf00      	nop
 8007fa2:	46bd      	mov	sp, r7
 8007fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa8:	4770      	bx	lr
 8007faa:	bf00      	nop
 8007fac:	58000400 	.word	0x58000400

08007fb0 <__NVIC_SetPriorityGrouping>:
{
 8007fb0:	b480      	push	{r7}
 8007fb2:	b085      	sub	sp, #20
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	f003 0307 	and.w	r3, r3, #7
 8007fbe:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007fc0:	4b0b      	ldr	r3, [pc, #44]	@ (8007ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8007fc2:	68db      	ldr	r3, [r3, #12]
 8007fc4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007fc6:	68ba      	ldr	r2, [r7, #8]
 8007fc8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8007fcc:	4013      	ands	r3, r2
 8007fce:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007fd0:	68fb      	ldr	r3, [r7, #12]
 8007fd2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007fd4:	68bb      	ldr	r3, [r7, #8]
 8007fd6:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8007fd8:	4b06      	ldr	r3, [pc, #24]	@ (8007ff4 <__NVIC_SetPriorityGrouping+0x44>)
 8007fda:	4313      	orrs	r3, r2
 8007fdc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007fde:	4a04      	ldr	r2, [pc, #16]	@ (8007ff0 <__NVIC_SetPriorityGrouping+0x40>)
 8007fe0:	68bb      	ldr	r3, [r7, #8]
 8007fe2:	60d3      	str	r3, [r2, #12]
}
 8007fe4:	bf00      	nop
 8007fe6:	3714      	adds	r7, #20
 8007fe8:	46bd      	mov	sp, r7
 8007fea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fee:	4770      	bx	lr
 8007ff0:	e000ed00 	.word	0xe000ed00
 8007ff4:	05fa0000 	.word	0x05fa0000

08007ff8 <__NVIC_GetPriorityGrouping>:
{
 8007ff8:	b480      	push	{r7}
 8007ffa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007ffc:	4b04      	ldr	r3, [pc, #16]	@ (8008010 <__NVIC_GetPriorityGrouping+0x18>)
 8007ffe:	68db      	ldr	r3, [r3, #12]
 8008000:	0a1b      	lsrs	r3, r3, #8
 8008002:	f003 0307 	and.w	r3, r3, #7
}
 8008006:	4618      	mov	r0, r3
 8008008:	46bd      	mov	sp, r7
 800800a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800e:	4770      	bx	lr
 8008010:	e000ed00 	.word	0xe000ed00

08008014 <__NVIC_EnableIRQ>:
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	4603      	mov	r3, r0
 800801c:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800801e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008022:	2b00      	cmp	r3, #0
 8008024:	db0b      	blt.n	800803e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8008026:	88fb      	ldrh	r3, [r7, #6]
 8008028:	f003 021f 	and.w	r2, r3, #31
 800802c:	4907      	ldr	r1, [pc, #28]	@ (800804c <__NVIC_EnableIRQ+0x38>)
 800802e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008032:	095b      	lsrs	r3, r3, #5
 8008034:	2001      	movs	r0, #1
 8008036:	fa00 f202 	lsl.w	r2, r0, r2
 800803a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 800803e:	bf00      	nop
 8008040:	370c      	adds	r7, #12
 8008042:	46bd      	mov	sp, r7
 8008044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008048:	4770      	bx	lr
 800804a:	bf00      	nop
 800804c:	e000e100 	.word	0xe000e100

08008050 <__NVIC_SetPriority>:
{
 8008050:	b480      	push	{r7}
 8008052:	b083      	sub	sp, #12
 8008054:	af00      	add	r7, sp, #0
 8008056:	4603      	mov	r3, r0
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 800805c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8008060:	2b00      	cmp	r3, #0
 8008062:	db0a      	blt.n	800807a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	b2da      	uxtb	r2, r3
 8008068:	490c      	ldr	r1, [pc, #48]	@ (800809c <__NVIC_SetPriority+0x4c>)
 800806a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800806e:	0112      	lsls	r2, r2, #4
 8008070:	b2d2      	uxtb	r2, r2
 8008072:	440b      	add	r3, r1
 8008074:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8008078:	e00a      	b.n	8008090 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800807a:	683b      	ldr	r3, [r7, #0]
 800807c:	b2da      	uxtb	r2, r3
 800807e:	4908      	ldr	r1, [pc, #32]	@ (80080a0 <__NVIC_SetPriority+0x50>)
 8008080:	88fb      	ldrh	r3, [r7, #6]
 8008082:	f003 030f 	and.w	r3, r3, #15
 8008086:	3b04      	subs	r3, #4
 8008088:	0112      	lsls	r2, r2, #4
 800808a:	b2d2      	uxtb	r2, r2
 800808c:	440b      	add	r3, r1
 800808e:	761a      	strb	r2, [r3, #24]
}
 8008090:	bf00      	nop
 8008092:	370c      	adds	r7, #12
 8008094:	46bd      	mov	sp, r7
 8008096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800809a:	4770      	bx	lr
 800809c:	e000e100 	.word	0xe000e100
 80080a0:	e000ed00 	.word	0xe000ed00

080080a4 <NVIC_EncodePriority>:
{
 80080a4:	b480      	push	{r7}
 80080a6:	b089      	sub	sp, #36	@ 0x24
 80080a8:	af00      	add	r7, sp, #0
 80080aa:	60f8      	str	r0, [r7, #12]
 80080ac:	60b9      	str	r1, [r7, #8]
 80080ae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	f003 0307 	and.w	r3, r3, #7
 80080b6:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80080b8:	69fb      	ldr	r3, [r7, #28]
 80080ba:	f1c3 0307 	rsb	r3, r3, #7
 80080be:	2b04      	cmp	r3, #4
 80080c0:	bf28      	it	cs
 80080c2:	2304      	movcs	r3, #4
 80080c4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80080c6:	69fb      	ldr	r3, [r7, #28]
 80080c8:	3304      	adds	r3, #4
 80080ca:	2b06      	cmp	r3, #6
 80080cc:	d902      	bls.n	80080d4 <NVIC_EncodePriority+0x30>
 80080ce:	69fb      	ldr	r3, [r7, #28]
 80080d0:	3b03      	subs	r3, #3
 80080d2:	e000      	b.n	80080d6 <NVIC_EncodePriority+0x32>
 80080d4:	2300      	movs	r3, #0
 80080d6:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80080dc:	69bb      	ldr	r3, [r7, #24]
 80080de:	fa02 f303 	lsl.w	r3, r2, r3
 80080e2:	43da      	mvns	r2, r3
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	401a      	ands	r2, r3
 80080e8:	697b      	ldr	r3, [r7, #20]
 80080ea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80080ec:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80080f0:	697b      	ldr	r3, [r7, #20]
 80080f2:	fa01 f303 	lsl.w	r3, r1, r3
 80080f6:	43d9      	mvns	r1, r3
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80080fc:	4313      	orrs	r3, r2
}
 80080fe:	4618      	mov	r0, r3
 8008100:	3724      	adds	r7, #36	@ 0x24
 8008102:	46bd      	mov	sp, r7
 8008104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008108:	4770      	bx	lr
	...

0800810c <SysTick_Config>:
{
 800810c:	b580      	push	{r7, lr}
 800810e:	b082      	sub	sp, #8
 8008110:	af00      	add	r7, sp, #0
 8008112:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8008114:	687b      	ldr	r3, [r7, #4]
 8008116:	3b01      	subs	r3, #1
 8008118:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800811c:	d301      	bcc.n	8008122 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800811e:	2301      	movs	r3, #1
 8008120:	e00f      	b.n	8008142 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8008122:	4a0a      	ldr	r2, [pc, #40]	@ (800814c <SysTick_Config+0x40>)
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	3b01      	subs	r3, #1
 8008128:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800812a:	210f      	movs	r1, #15
 800812c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008130:	f7ff ff8e 	bl	8008050 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8008134:	4b05      	ldr	r3, [pc, #20]	@ (800814c <SysTick_Config+0x40>)
 8008136:	2200      	movs	r2, #0
 8008138:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800813a:	4b04      	ldr	r3, [pc, #16]	@ (800814c <SysTick_Config+0x40>)
 800813c:	2207      	movs	r2, #7
 800813e:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8008140:	2300      	movs	r3, #0
}
 8008142:	4618      	mov	r0, r3
 8008144:	3708      	adds	r7, #8
 8008146:	46bd      	mov	sp, r7
 8008148:	bd80      	pop	{r7, pc}
 800814a:	bf00      	nop
 800814c:	e000e010 	.word	0xe000e010

08008150 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8008150:	b580      	push	{r7, lr}
 8008152:	b082      	sub	sp, #8
 8008154:	af00      	add	r7, sp, #0
 8008156:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f7ff ff29 	bl	8007fb0 <__NVIC_SetPriorityGrouping>
}
 800815e:	bf00      	nop
 8008160:	3708      	adds	r7, #8
 8008162:	46bd      	mov	sp, r7
 8008164:	bd80      	pop	{r7, pc}

08008166 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8008166:	b580      	push	{r7, lr}
 8008168:	b086      	sub	sp, #24
 800816a:	af00      	add	r7, sp, #0
 800816c:	4603      	mov	r3, r0
 800816e:	60b9      	str	r1, [r7, #8]
 8008170:	607a      	str	r2, [r7, #4]
 8008172:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8008174:	f7ff ff40 	bl	8007ff8 <__NVIC_GetPriorityGrouping>
 8008178:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800817a:	687a      	ldr	r2, [r7, #4]
 800817c:	68b9      	ldr	r1, [r7, #8]
 800817e:	6978      	ldr	r0, [r7, #20]
 8008180:	f7ff ff90 	bl	80080a4 <NVIC_EncodePriority>
 8008184:	4602      	mov	r2, r0
 8008186:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 800818a:	4611      	mov	r1, r2
 800818c:	4618      	mov	r0, r3
 800818e:	f7ff ff5f 	bl	8008050 <__NVIC_SetPriority>
}
 8008192:	bf00      	nop
 8008194:	3718      	adds	r7, #24
 8008196:	46bd      	mov	sp, r7
 8008198:	bd80      	pop	{r7, pc}

0800819a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800819a:	b580      	push	{r7, lr}
 800819c:	b082      	sub	sp, #8
 800819e:	af00      	add	r7, sp, #0
 80081a0:	4603      	mov	r3, r0
 80081a2:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80081a4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80081a8:	4618      	mov	r0, r3
 80081aa:	f7ff ff33 	bl	8008014 <__NVIC_EnableIRQ>
}
 80081ae:	bf00      	nop
 80081b0:	3708      	adds	r7, #8
 80081b2:	46bd      	mov	sp, r7
 80081b4:	bd80      	pop	{r7, pc}

080081b6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80081b6:	b580      	push	{r7, lr}
 80081b8:	b082      	sub	sp, #8
 80081ba:	af00      	add	r7, sp, #0
 80081bc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80081be:	6878      	ldr	r0, [r7, #4]
 80081c0:	f7ff ffa4 	bl	800810c <SysTick_Config>
 80081c4:	4603      	mov	r3, r0
}
 80081c6:	4618      	mov	r0, r3
 80081c8:	3708      	adds	r7, #8
 80081ca:	46bd      	mov	sp, r7
 80081cc:	bd80      	pop	{r7, pc}
	...

080081d0 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 80081d0:	b480      	push	{r7}
 80081d2:	af00      	add	r7, sp, #0
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 80081d4:	f3bf 8f5f 	dmb	sy
}
 80081d8:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80081da:	4b07      	ldr	r3, [pc, #28]	@ (80081f8 <HAL_MPU_Disable+0x28>)
 80081dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081de:	4a06      	ldr	r2, [pc, #24]	@ (80081f8 <HAL_MPU_Disable+0x28>)
 80081e0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80081e4:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80081e6:	4b05      	ldr	r3, [pc, #20]	@ (80081fc <HAL_MPU_Disable+0x2c>)
 80081e8:	2200      	movs	r2, #0
 80081ea:	605a      	str	r2, [r3, #4]
}
 80081ec:	bf00      	nop
 80081ee:	46bd      	mov	sp, r7
 80081f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f4:	4770      	bx	lr
 80081f6:	bf00      	nop
 80081f8:	e000ed00 	.word	0xe000ed00
 80081fc:	e000ed90 	.word	0xe000ed90

08008200 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 8008208:	4a0b      	ldr	r2, [pc, #44]	@ (8008238 <HAL_MPU_Enable+0x38>)
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	f043 0301 	orr.w	r3, r3, #1
 8008210:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 8008212:	4b0a      	ldr	r3, [pc, #40]	@ (800823c <HAL_MPU_Enable+0x3c>)
 8008214:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008216:	4a09      	ldr	r2, [pc, #36]	@ (800823c <HAL_MPU_Enable+0x3c>)
 8008218:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800821c:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 800821e:	f3bf 8f4f 	dsb	sy
}
 8008222:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008224:	f3bf 8f6f 	isb	sy
}
 8008228:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 800822a:	bf00      	nop
 800822c:	370c      	adds	r7, #12
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr
 8008236:	bf00      	nop
 8008238:	e000ed90 	.word	0xe000ed90
 800823c:	e000ed00 	.word	0xe000ed00

08008240 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8008240:	b480      	push	{r7}
 8008242:	b083      	sub	sp, #12
 8008244:	af00      	add	r7, sp, #0
 8008246:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	785a      	ldrb	r2, [r3, #1]
 800824c:	4b1b      	ldr	r3, [pc, #108]	@ (80082bc <HAL_MPU_ConfigRegion+0x7c>)
 800824e:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8008250:	4b1a      	ldr	r3, [pc, #104]	@ (80082bc <HAL_MPU_ConfigRegion+0x7c>)
 8008252:	691b      	ldr	r3, [r3, #16]
 8008254:	4a19      	ldr	r2, [pc, #100]	@ (80082bc <HAL_MPU_ConfigRegion+0x7c>)
 8008256:	f023 0301 	bic.w	r3, r3, #1
 800825a:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 800825c:	4a17      	ldr	r2, [pc, #92]	@ (80082bc <HAL_MPU_ConfigRegion+0x7c>)
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	685b      	ldr	r3, [r3, #4]
 8008262:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	7b1b      	ldrb	r3, [r3, #12]
 8008268:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	7adb      	ldrb	r3, [r3, #11]
 800826e:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8008270:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	7a9b      	ldrb	r3, [r3, #10]
 8008276:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8008278:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	7b5b      	ldrb	r3, [r3, #13]
 800827e:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8008280:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	7b9b      	ldrb	r3, [r3, #14]
 8008286:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8008288:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	7bdb      	ldrb	r3, [r3, #15]
 800828e:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8008290:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	7a5b      	ldrb	r3, [r3, #9]
 8008296:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8008298:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	7a1b      	ldrb	r3, [r3, #8]
 800829e:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 80082a0:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 80082a2:	687a      	ldr	r2, [r7, #4]
 80082a4:	7812      	ldrb	r2, [r2, #0]
 80082a6:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80082a8:	4a04      	ldr	r2, [pc, #16]	@ (80082bc <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 80082aa:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 80082ac:	6113      	str	r3, [r2, #16]
}
 80082ae:	bf00      	nop
 80082b0:	370c      	adds	r7, #12
 80082b2:	46bd      	mov	sp, r7
 80082b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b8:	4770      	bx	lr
 80082ba:	bf00      	nop
 80082bc:	e000ed90 	.word	0xe000ed90

080082c0 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80082c0:	b580      	push	{r7, lr}
 80082c2:	b086      	sub	sp, #24
 80082c4:	af00      	add	r7, sp, #0
 80082c6:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 80082c8:	f7ff fe26 	bl	8007f18 <HAL_GetTick>
 80082cc:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d101      	bne.n	80082d8 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 80082d4:	2301      	movs	r3, #1
 80082d6:	e316      	b.n	8008906 <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	681b      	ldr	r3, [r3, #0]
 80082dc:	4a66      	ldr	r2, [pc, #408]	@ (8008478 <HAL_DMA_Init+0x1b8>)
 80082de:	4293      	cmp	r3, r2
 80082e0:	d04a      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	4a65      	ldr	r2, [pc, #404]	@ (800847c <HAL_DMA_Init+0x1bc>)
 80082e8:	4293      	cmp	r3, r2
 80082ea:	d045      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	4a63      	ldr	r2, [pc, #396]	@ (8008480 <HAL_DMA_Init+0x1c0>)
 80082f2:	4293      	cmp	r3, r2
 80082f4:	d040      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4a62      	ldr	r2, [pc, #392]	@ (8008484 <HAL_DMA_Init+0x1c4>)
 80082fc:	4293      	cmp	r3, r2
 80082fe:	d03b      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	4a60      	ldr	r2, [pc, #384]	@ (8008488 <HAL_DMA_Init+0x1c8>)
 8008306:	4293      	cmp	r3, r2
 8008308:	d036      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	681b      	ldr	r3, [r3, #0]
 800830e:	4a5f      	ldr	r2, [pc, #380]	@ (800848c <HAL_DMA_Init+0x1cc>)
 8008310:	4293      	cmp	r3, r2
 8008312:	d031      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	4a5d      	ldr	r2, [pc, #372]	@ (8008490 <HAL_DMA_Init+0x1d0>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d02c      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	4a5c      	ldr	r2, [pc, #368]	@ (8008494 <HAL_DMA_Init+0x1d4>)
 8008324:	4293      	cmp	r3, r2
 8008326:	d027      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	4a5a      	ldr	r2, [pc, #360]	@ (8008498 <HAL_DMA_Init+0x1d8>)
 800832e:	4293      	cmp	r3, r2
 8008330:	d022      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	681b      	ldr	r3, [r3, #0]
 8008336:	4a59      	ldr	r2, [pc, #356]	@ (800849c <HAL_DMA_Init+0x1dc>)
 8008338:	4293      	cmp	r3, r2
 800833a:	d01d      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	4a57      	ldr	r2, [pc, #348]	@ (80084a0 <HAL_DMA_Init+0x1e0>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d018      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	4a56      	ldr	r2, [pc, #344]	@ (80084a4 <HAL_DMA_Init+0x1e4>)
 800834c:	4293      	cmp	r3, r2
 800834e:	d013      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	4a54      	ldr	r2, [pc, #336]	@ (80084a8 <HAL_DMA_Init+0x1e8>)
 8008356:	4293      	cmp	r3, r2
 8008358:	d00e      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	681b      	ldr	r3, [r3, #0]
 800835e:	4a53      	ldr	r2, [pc, #332]	@ (80084ac <HAL_DMA_Init+0x1ec>)
 8008360:	4293      	cmp	r3, r2
 8008362:	d009      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	4a51      	ldr	r2, [pc, #324]	@ (80084b0 <HAL_DMA_Init+0x1f0>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d004      	beq.n	8008378 <HAL_DMA_Init+0xb8>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	4a50      	ldr	r2, [pc, #320]	@ (80084b4 <HAL_DMA_Init+0x1f4>)
 8008374:	4293      	cmp	r3, r2
 8008376:	d101      	bne.n	800837c <HAL_DMA_Init+0xbc>
 8008378:	2301      	movs	r3, #1
 800837a:	e000      	b.n	800837e <HAL_DMA_Init+0xbe>
 800837c:	2300      	movs	r3, #0
 800837e:	2b00      	cmp	r3, #0
 8008380:	f000 813b 	beq.w	80085fa <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	2202      	movs	r2, #2
 8008388:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	2200      	movs	r2, #0
 8008390:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	4a37      	ldr	r2, [pc, #220]	@ (8008478 <HAL_DMA_Init+0x1b8>)
 800839a:	4293      	cmp	r3, r2
 800839c:	d04a      	beq.n	8008434 <HAL_DMA_Init+0x174>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a36      	ldr	r2, [pc, #216]	@ (800847c <HAL_DMA_Init+0x1bc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d045      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a34      	ldr	r2, [pc, #208]	@ (8008480 <HAL_DMA_Init+0x1c0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d040      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a33      	ldr	r2, [pc, #204]	@ (8008484 <HAL_DMA_Init+0x1c4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d03b      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a31      	ldr	r2, [pc, #196]	@ (8008488 <HAL_DMA_Init+0x1c8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d036      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083c6:	687b      	ldr	r3, [r7, #4]
 80083c8:	681b      	ldr	r3, [r3, #0]
 80083ca:	4a30      	ldr	r2, [pc, #192]	@ (800848c <HAL_DMA_Init+0x1cc>)
 80083cc:	4293      	cmp	r3, r2
 80083ce:	d031      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083d0:	687b      	ldr	r3, [r7, #4]
 80083d2:	681b      	ldr	r3, [r3, #0]
 80083d4:	4a2e      	ldr	r2, [pc, #184]	@ (8008490 <HAL_DMA_Init+0x1d0>)
 80083d6:	4293      	cmp	r3, r2
 80083d8:	d02c      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	4a2d      	ldr	r2, [pc, #180]	@ (8008494 <HAL_DMA_Init+0x1d4>)
 80083e0:	4293      	cmp	r3, r2
 80083e2:	d027      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	681b      	ldr	r3, [r3, #0]
 80083e8:	4a2b      	ldr	r2, [pc, #172]	@ (8008498 <HAL_DMA_Init+0x1d8>)
 80083ea:	4293      	cmp	r3, r2
 80083ec:	d022      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	4a2a      	ldr	r2, [pc, #168]	@ (800849c <HAL_DMA_Init+0x1dc>)
 80083f4:	4293      	cmp	r3, r2
 80083f6:	d01d      	beq.n	8008434 <HAL_DMA_Init+0x174>
 80083f8:	687b      	ldr	r3, [r7, #4]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	4a28      	ldr	r2, [pc, #160]	@ (80084a0 <HAL_DMA_Init+0x1e0>)
 80083fe:	4293      	cmp	r3, r2
 8008400:	d018      	beq.n	8008434 <HAL_DMA_Init+0x174>
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	681b      	ldr	r3, [r3, #0]
 8008406:	4a27      	ldr	r2, [pc, #156]	@ (80084a4 <HAL_DMA_Init+0x1e4>)
 8008408:	4293      	cmp	r3, r2
 800840a:	d013      	beq.n	8008434 <HAL_DMA_Init+0x174>
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	4a25      	ldr	r2, [pc, #148]	@ (80084a8 <HAL_DMA_Init+0x1e8>)
 8008412:	4293      	cmp	r3, r2
 8008414:	d00e      	beq.n	8008434 <HAL_DMA_Init+0x174>
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	4a24      	ldr	r2, [pc, #144]	@ (80084ac <HAL_DMA_Init+0x1ec>)
 800841c:	4293      	cmp	r3, r2
 800841e:	d009      	beq.n	8008434 <HAL_DMA_Init+0x174>
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	681b      	ldr	r3, [r3, #0]
 8008424:	4a22      	ldr	r2, [pc, #136]	@ (80084b0 <HAL_DMA_Init+0x1f0>)
 8008426:	4293      	cmp	r3, r2
 8008428:	d004      	beq.n	8008434 <HAL_DMA_Init+0x174>
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	681b      	ldr	r3, [r3, #0]
 800842e:	4a21      	ldr	r2, [pc, #132]	@ (80084b4 <HAL_DMA_Init+0x1f4>)
 8008430:	4293      	cmp	r3, r2
 8008432:	d108      	bne.n	8008446 <HAL_DMA_Init+0x186>
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	681a      	ldr	r2, [r3, #0]
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	f022 0201 	bic.w	r2, r2, #1
 8008442:	601a      	str	r2, [r3, #0]
 8008444:	e007      	b.n	8008456 <HAL_DMA_Init+0x196>
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	681a      	ldr	r2, [r3, #0]
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	f022 0201 	bic.w	r2, r2, #1
 8008454:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8008456:	e02f      	b.n	80084b8 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8008458:	f7ff fd5e 	bl	8007f18 <HAL_GetTick>
 800845c:	4602      	mov	r2, r0
 800845e:	693b      	ldr	r3, [r7, #16]
 8008460:	1ad3      	subs	r3, r2, r3
 8008462:	2b05      	cmp	r3, #5
 8008464:	d928      	bls.n	80084b8 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	2220      	movs	r2, #32
 800846a:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2203      	movs	r2, #3
 8008470:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8008474:	2301      	movs	r3, #1
 8008476:	e246      	b.n	8008906 <HAL_DMA_Init+0x646>
 8008478:	40020010 	.word	0x40020010
 800847c:	40020028 	.word	0x40020028
 8008480:	40020040 	.word	0x40020040
 8008484:	40020058 	.word	0x40020058
 8008488:	40020070 	.word	0x40020070
 800848c:	40020088 	.word	0x40020088
 8008490:	400200a0 	.word	0x400200a0
 8008494:	400200b8 	.word	0x400200b8
 8008498:	40020410 	.word	0x40020410
 800849c:	40020428 	.word	0x40020428
 80084a0:	40020440 	.word	0x40020440
 80084a4:	40020458 	.word	0x40020458
 80084a8:	40020470 	.word	0x40020470
 80084ac:	40020488 	.word	0x40020488
 80084b0:	400204a0 	.word	0x400204a0
 80084b4:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	681b      	ldr	r3, [r3, #0]
 80084bc:	681b      	ldr	r3, [r3, #0]
 80084be:	f003 0301 	and.w	r3, r3, #1
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d1c8      	bne.n	8008458 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	681b      	ldr	r3, [r3, #0]
 80084cc:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80084ce:	697a      	ldr	r2, [r7, #20]
 80084d0:	4b83      	ldr	r3, [pc, #524]	@ (80086e0 <HAL_DMA_Init+0x420>)
 80084d2:	4013      	ands	r3, r2
 80084d4:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 80084d6:	687b      	ldr	r3, [r7, #4]
 80084d8:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 80084de:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084e0:	687b      	ldr	r3, [r7, #4]
 80084e2:	691b      	ldr	r3, [r3, #16]
 80084e4:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80084ea:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	699b      	ldr	r3, [r3, #24]
 80084f0:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80084f6:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	6a1b      	ldr	r3, [r3, #32]
 80084fc:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 80084fe:	697a      	ldr	r2, [r7, #20]
 8008500:	4313      	orrs	r3, r2
 8008502:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8008504:	687b      	ldr	r3, [r7, #4]
 8008506:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008508:	2b04      	cmp	r3, #4
 800850a:	d107      	bne.n	800851c <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800850c:	687b      	ldr	r3, [r7, #4]
 800850e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008514:	4313      	orrs	r3, r2
 8008516:	697a      	ldr	r2, [r7, #20]
 8008518:	4313      	orrs	r3, r2
 800851a:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 800851c:	4b71      	ldr	r3, [pc, #452]	@ (80086e4 <HAL_DMA_Init+0x424>)
 800851e:	681a      	ldr	r2, [r3, #0]
 8008520:	4b71      	ldr	r3, [pc, #452]	@ (80086e8 <HAL_DMA_Init+0x428>)
 8008522:	4013      	ands	r3, r2
 8008524:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8008528:	d328      	bcc.n	800857c <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	2b28      	cmp	r3, #40	@ 0x28
 8008530:	d903      	bls.n	800853a <HAL_DMA_Init+0x27a>
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	685b      	ldr	r3, [r3, #4]
 8008536:	2b2e      	cmp	r3, #46	@ 0x2e
 8008538:	d917      	bls.n	800856a <HAL_DMA_Init+0x2aa>
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	685b      	ldr	r3, [r3, #4]
 800853e:	2b3e      	cmp	r3, #62	@ 0x3e
 8008540:	d903      	bls.n	800854a <HAL_DMA_Init+0x28a>
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	2b42      	cmp	r3, #66	@ 0x42
 8008548:	d90f      	bls.n	800856a <HAL_DMA_Init+0x2aa>
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	685b      	ldr	r3, [r3, #4]
 800854e:	2b46      	cmp	r3, #70	@ 0x46
 8008550:	d903      	bls.n	800855a <HAL_DMA_Init+0x29a>
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	685b      	ldr	r3, [r3, #4]
 8008556:	2b48      	cmp	r3, #72	@ 0x48
 8008558:	d907      	bls.n	800856a <HAL_DMA_Init+0x2aa>
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	685b      	ldr	r3, [r3, #4]
 800855e:	2b4e      	cmp	r3, #78	@ 0x4e
 8008560:	d905      	bls.n	800856e <HAL_DMA_Init+0x2ae>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b52      	cmp	r3, #82	@ 0x52
 8008568:	d801      	bhi.n	800856e <HAL_DMA_Init+0x2ae>
 800856a:	2301      	movs	r3, #1
 800856c:	e000      	b.n	8008570 <HAL_DMA_Init+0x2b0>
 800856e:	2300      	movs	r3, #0
 8008570:	2b00      	cmp	r3, #0
 8008572:	d003      	beq.n	800857c <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 8008574:	697b      	ldr	r3, [r7, #20]
 8008576:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800857a:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	697a      	ldr	r2, [r7, #20]
 8008582:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	695b      	ldr	r3, [r3, #20]
 800858a:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	f023 0307 	bic.w	r3, r3, #7
 8008592:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008598:	697a      	ldr	r2, [r7, #20]
 800859a:	4313      	orrs	r3, r2
 800859c:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800859e:	687b      	ldr	r3, [r7, #4]
 80085a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80085a2:	2b04      	cmp	r3, #4
 80085a4:	d117      	bne.n	80085d6 <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085aa:	697a      	ldr	r2, [r7, #20]
 80085ac:	4313      	orrs	r3, r2
 80085ae:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d00e      	beq.n	80085d6 <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80085b8:	6878      	ldr	r0, [r7, #4]
 80085ba:	f001 ff91 	bl	800a4e0 <DMA_CheckFifoParam>
 80085be:	4603      	mov	r3, r0
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	d008      	beq.n	80085d6 <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2240      	movs	r2, #64	@ 0x40
 80085c8:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	2201      	movs	r2, #1
 80085ce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80085d2:	2301      	movs	r3, #1
 80085d4:	e197      	b.n	8008906 <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	681b      	ldr	r3, [r3, #0]
 80085da:	697a      	ldr	r2, [r7, #20]
 80085dc:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80085de:	6878      	ldr	r0, [r7, #4]
 80085e0:	f001 fecc 	bl	800a37c <DMA_CalcBaseAndBitshift>
 80085e4:	4603      	mov	r3, r0
 80085e6:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80085ec:	f003 031f 	and.w	r3, r3, #31
 80085f0:	223f      	movs	r2, #63	@ 0x3f
 80085f2:	409a      	lsls	r2, r3
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	609a      	str	r2, [r3, #8]
 80085f8:	e0cd      	b.n	8008796 <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	4a3b      	ldr	r2, [pc, #236]	@ (80086ec <HAL_DMA_Init+0x42c>)
 8008600:	4293      	cmp	r3, r2
 8008602:	d022      	beq.n	800864a <HAL_DMA_Init+0x38a>
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	4a39      	ldr	r2, [pc, #228]	@ (80086f0 <HAL_DMA_Init+0x430>)
 800860a:	4293      	cmp	r3, r2
 800860c:	d01d      	beq.n	800864a <HAL_DMA_Init+0x38a>
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	4a38      	ldr	r2, [pc, #224]	@ (80086f4 <HAL_DMA_Init+0x434>)
 8008614:	4293      	cmp	r3, r2
 8008616:	d018      	beq.n	800864a <HAL_DMA_Init+0x38a>
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	4a36      	ldr	r2, [pc, #216]	@ (80086f8 <HAL_DMA_Init+0x438>)
 800861e:	4293      	cmp	r3, r2
 8008620:	d013      	beq.n	800864a <HAL_DMA_Init+0x38a>
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	4a35      	ldr	r2, [pc, #212]	@ (80086fc <HAL_DMA_Init+0x43c>)
 8008628:	4293      	cmp	r3, r2
 800862a:	d00e      	beq.n	800864a <HAL_DMA_Init+0x38a>
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	4a33      	ldr	r2, [pc, #204]	@ (8008700 <HAL_DMA_Init+0x440>)
 8008632:	4293      	cmp	r3, r2
 8008634:	d009      	beq.n	800864a <HAL_DMA_Init+0x38a>
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	4a32      	ldr	r2, [pc, #200]	@ (8008704 <HAL_DMA_Init+0x444>)
 800863c:	4293      	cmp	r3, r2
 800863e:	d004      	beq.n	800864a <HAL_DMA_Init+0x38a>
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	4a30      	ldr	r2, [pc, #192]	@ (8008708 <HAL_DMA_Init+0x448>)
 8008646:	4293      	cmp	r3, r2
 8008648:	d101      	bne.n	800864e <HAL_DMA_Init+0x38e>
 800864a:	2301      	movs	r3, #1
 800864c:	e000      	b.n	8008650 <HAL_DMA_Init+0x390>
 800864e:	2300      	movs	r3, #0
 8008650:	2b00      	cmp	r3, #0
 8008652:	f000 8097 	beq.w	8008784 <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	681b      	ldr	r3, [r3, #0]
 800865a:	4a24      	ldr	r2, [pc, #144]	@ (80086ec <HAL_DMA_Init+0x42c>)
 800865c:	4293      	cmp	r3, r2
 800865e:	d021      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	681b      	ldr	r3, [r3, #0]
 8008664:	4a22      	ldr	r2, [pc, #136]	@ (80086f0 <HAL_DMA_Init+0x430>)
 8008666:	4293      	cmp	r3, r2
 8008668:	d01c      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 800866a:	687b      	ldr	r3, [r7, #4]
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	4a21      	ldr	r2, [pc, #132]	@ (80086f4 <HAL_DMA_Init+0x434>)
 8008670:	4293      	cmp	r3, r2
 8008672:	d017      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	681b      	ldr	r3, [r3, #0]
 8008678:	4a1f      	ldr	r2, [pc, #124]	@ (80086f8 <HAL_DMA_Init+0x438>)
 800867a:	4293      	cmp	r3, r2
 800867c:	d012      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 800867e:	687b      	ldr	r3, [r7, #4]
 8008680:	681b      	ldr	r3, [r3, #0]
 8008682:	4a1e      	ldr	r2, [pc, #120]	@ (80086fc <HAL_DMA_Init+0x43c>)
 8008684:	4293      	cmp	r3, r2
 8008686:	d00d      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4a1c      	ldr	r2, [pc, #112]	@ (8008700 <HAL_DMA_Init+0x440>)
 800868e:	4293      	cmp	r3, r2
 8008690:	d008      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	4a1b      	ldr	r2, [pc, #108]	@ (8008704 <HAL_DMA_Init+0x444>)
 8008698:	4293      	cmp	r3, r2
 800869a:	d003      	beq.n	80086a4 <HAL_DMA_Init+0x3e4>
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	4a19      	ldr	r2, [pc, #100]	@ (8008708 <HAL_DMA_Init+0x448>)
 80086a2:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	2200      	movs	r2, #0
 80086b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80086bc:	697a      	ldr	r2, [r7, #20]
 80086be:	4b13      	ldr	r3, [pc, #76]	@ (800870c <HAL_DMA_Init+0x44c>)
 80086c0:	4013      	ands	r3, r2
 80086c2:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	689b      	ldr	r3, [r3, #8]
 80086c8:	2b40      	cmp	r3, #64	@ 0x40
 80086ca:	d021      	beq.n	8008710 <HAL_DMA_Init+0x450>
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	689b      	ldr	r3, [r3, #8]
 80086d0:	2b80      	cmp	r3, #128	@ 0x80
 80086d2:	d102      	bne.n	80086da <HAL_DMA_Init+0x41a>
 80086d4:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80086d8:	e01b      	b.n	8008712 <HAL_DMA_Init+0x452>
 80086da:	2300      	movs	r3, #0
 80086dc:	e019      	b.n	8008712 <HAL_DMA_Init+0x452>
 80086de:	bf00      	nop
 80086e0:	fe10803f 	.word	0xfe10803f
 80086e4:	5c001000 	.word	0x5c001000
 80086e8:	ffff0000 	.word	0xffff0000
 80086ec:	58025408 	.word	0x58025408
 80086f0:	5802541c 	.word	0x5802541c
 80086f4:	58025430 	.word	0x58025430
 80086f8:	58025444 	.word	0x58025444
 80086fc:	58025458 	.word	0x58025458
 8008700:	5802546c 	.word	0x5802546c
 8008704:	58025480 	.word	0x58025480
 8008708:	58025494 	.word	0x58025494
 800870c:	fffe000f 	.word	0xfffe000f
 8008710:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008712:	687a      	ldr	r2, [r7, #4]
 8008714:	68d2      	ldr	r2, [r2, #12]
 8008716:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008718:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	691b      	ldr	r3, [r3, #16]
 800871e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8008720:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	695b      	ldr	r3, [r3, #20]
 8008726:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8008728:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	699b      	ldr	r3, [r3, #24]
 800872e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8008730:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	69db      	ldr	r3, [r3, #28]
 8008736:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8008738:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a1b      	ldr	r3, [r3, #32]
 800873e:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8008740:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8008742:	697a      	ldr	r2, [r7, #20]
 8008744:	4313      	orrs	r3, r2
 8008746:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	697a      	ldr	r2, [r7, #20]
 800874e:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	461a      	mov	r2, r3
 8008756:	4b6e      	ldr	r3, [pc, #440]	@ (8008910 <HAL_DMA_Init+0x650>)
 8008758:	4413      	add	r3, r2
 800875a:	4a6e      	ldr	r2, [pc, #440]	@ (8008914 <HAL_DMA_Init+0x654>)
 800875c:	fba2 2303 	umull	r2, r3, r2, r3
 8008760:	091b      	lsrs	r3, r3, #4
 8008762:	009a      	lsls	r2, r3, #2
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008768:	6878      	ldr	r0, [r7, #4]
 800876a:	f001 fe07 	bl	800a37c <DMA_CalcBaseAndBitshift>
 800876e:	4603      	mov	r3, r0
 8008770:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008776:	f003 031f 	and.w	r3, r3, #31
 800877a:	2201      	movs	r2, #1
 800877c:	409a      	lsls	r2, r3
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	605a      	str	r2, [r3, #4]
 8008782:	e008      	b.n	8008796 <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	2240      	movs	r2, #64	@ 0x40
 8008788:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	2203      	movs	r2, #3
 800878e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 8008792:	2301      	movs	r3, #1
 8008794:	e0b7      	b.n	8008906 <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008796:	687b      	ldr	r3, [r7, #4]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	4a5f      	ldr	r2, [pc, #380]	@ (8008918 <HAL_DMA_Init+0x658>)
 800879c:	4293      	cmp	r3, r2
 800879e:	d072      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087a0:	687b      	ldr	r3, [r7, #4]
 80087a2:	681b      	ldr	r3, [r3, #0]
 80087a4:	4a5d      	ldr	r2, [pc, #372]	@ (800891c <HAL_DMA_Init+0x65c>)
 80087a6:	4293      	cmp	r3, r2
 80087a8:	d06d      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	4a5c      	ldr	r2, [pc, #368]	@ (8008920 <HAL_DMA_Init+0x660>)
 80087b0:	4293      	cmp	r3, r2
 80087b2:	d068      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087b4:	687b      	ldr	r3, [r7, #4]
 80087b6:	681b      	ldr	r3, [r3, #0]
 80087b8:	4a5a      	ldr	r2, [pc, #360]	@ (8008924 <HAL_DMA_Init+0x664>)
 80087ba:	4293      	cmp	r3, r2
 80087bc:	d063      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	681b      	ldr	r3, [r3, #0]
 80087c2:	4a59      	ldr	r2, [pc, #356]	@ (8008928 <HAL_DMA_Init+0x668>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d05e      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	681b      	ldr	r3, [r3, #0]
 80087cc:	4a57      	ldr	r2, [pc, #348]	@ (800892c <HAL_DMA_Init+0x66c>)
 80087ce:	4293      	cmp	r3, r2
 80087d0:	d059      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087d2:	687b      	ldr	r3, [r7, #4]
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	4a56      	ldr	r2, [pc, #344]	@ (8008930 <HAL_DMA_Init+0x670>)
 80087d8:	4293      	cmp	r3, r2
 80087da:	d054      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087dc:	687b      	ldr	r3, [r7, #4]
 80087de:	681b      	ldr	r3, [r3, #0]
 80087e0:	4a54      	ldr	r2, [pc, #336]	@ (8008934 <HAL_DMA_Init+0x674>)
 80087e2:	4293      	cmp	r3, r2
 80087e4:	d04f      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	681b      	ldr	r3, [r3, #0]
 80087ea:	4a53      	ldr	r2, [pc, #332]	@ (8008938 <HAL_DMA_Init+0x678>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d04a      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087f0:	687b      	ldr	r3, [r7, #4]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	4a51      	ldr	r2, [pc, #324]	@ (800893c <HAL_DMA_Init+0x67c>)
 80087f6:	4293      	cmp	r3, r2
 80087f8:	d045      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	4a50      	ldr	r2, [pc, #320]	@ (8008940 <HAL_DMA_Init+0x680>)
 8008800:	4293      	cmp	r3, r2
 8008802:	d040      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	4a4e      	ldr	r2, [pc, #312]	@ (8008944 <HAL_DMA_Init+0x684>)
 800880a:	4293      	cmp	r3, r2
 800880c:	d03b      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	681b      	ldr	r3, [r3, #0]
 8008812:	4a4d      	ldr	r2, [pc, #308]	@ (8008948 <HAL_DMA_Init+0x688>)
 8008814:	4293      	cmp	r3, r2
 8008816:	d036      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	4a4b      	ldr	r2, [pc, #300]	@ (800894c <HAL_DMA_Init+0x68c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d031      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	4a4a      	ldr	r2, [pc, #296]	@ (8008950 <HAL_DMA_Init+0x690>)
 8008828:	4293      	cmp	r3, r2
 800882a:	d02c      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 800882c:	687b      	ldr	r3, [r7, #4]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	4a48      	ldr	r2, [pc, #288]	@ (8008954 <HAL_DMA_Init+0x694>)
 8008832:	4293      	cmp	r3, r2
 8008834:	d027      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	681b      	ldr	r3, [r3, #0]
 800883a:	4a47      	ldr	r2, [pc, #284]	@ (8008958 <HAL_DMA_Init+0x698>)
 800883c:	4293      	cmp	r3, r2
 800883e:	d022      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008840:	687b      	ldr	r3, [r7, #4]
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a45      	ldr	r2, [pc, #276]	@ (800895c <HAL_DMA_Init+0x69c>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d01d      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	681b      	ldr	r3, [r3, #0]
 800884e:	4a44      	ldr	r2, [pc, #272]	@ (8008960 <HAL_DMA_Init+0x6a0>)
 8008850:	4293      	cmp	r3, r2
 8008852:	d018      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008854:	687b      	ldr	r3, [r7, #4]
 8008856:	681b      	ldr	r3, [r3, #0]
 8008858:	4a42      	ldr	r2, [pc, #264]	@ (8008964 <HAL_DMA_Init+0x6a4>)
 800885a:	4293      	cmp	r3, r2
 800885c:	d013      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 800885e:	687b      	ldr	r3, [r7, #4]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	4a41      	ldr	r2, [pc, #260]	@ (8008968 <HAL_DMA_Init+0x6a8>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d00e      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	4a3f      	ldr	r2, [pc, #252]	@ (800896c <HAL_DMA_Init+0x6ac>)
 800886e:	4293      	cmp	r3, r2
 8008870:	d009      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	4a3e      	ldr	r2, [pc, #248]	@ (8008970 <HAL_DMA_Init+0x6b0>)
 8008878:	4293      	cmp	r3, r2
 800887a:	d004      	beq.n	8008886 <HAL_DMA_Init+0x5c6>
 800887c:	687b      	ldr	r3, [r7, #4]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	4a3c      	ldr	r2, [pc, #240]	@ (8008974 <HAL_DMA_Init+0x6b4>)
 8008882:	4293      	cmp	r3, r2
 8008884:	d101      	bne.n	800888a <HAL_DMA_Init+0x5ca>
 8008886:	2301      	movs	r3, #1
 8008888:	e000      	b.n	800888c <HAL_DMA_Init+0x5cc>
 800888a:	2300      	movs	r3, #0
 800888c:	2b00      	cmp	r3, #0
 800888e:	d032      	beq.n	80088f6 <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008890:	6878      	ldr	r0, [r7, #4]
 8008892:	f001 fea1 	bl	800a5d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	689b      	ldr	r3, [r3, #8]
 800889a:	2b80      	cmp	r3, #128	@ 0x80
 800889c:	d102      	bne.n	80088a4 <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	2200      	movs	r2, #0
 80088a2:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 80088a4:	687b      	ldr	r3, [r7, #4]
 80088a6:	685a      	ldr	r2, [r3, #4]
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80088ac:	b2d2      	uxtb	r2, r2
 80088ae:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80088b4:	687a      	ldr	r2, [r7, #4]
 80088b6:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80088b8:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	685b      	ldr	r3, [r3, #4]
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d010      	beq.n	80088e4 <HAL_DMA_Init+0x624>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	685b      	ldr	r3, [r3, #4]
 80088c6:	2b08      	cmp	r3, #8
 80088c8:	d80c      	bhi.n	80088e4 <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80088ca:	6878      	ldr	r0, [r7, #4]
 80088cc:	f001 ff1e 	bl	800a70c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80088d4:	2200      	movs	r2, #0
 80088d6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80088d8:	687b      	ldr	r3, [r7, #4]
 80088da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80088dc:	687a      	ldr	r2, [r7, #4]
 80088de:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80088e0:	605a      	str	r2, [r3, #4]
 80088e2:	e008      	b.n	80088f6 <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	2200      	movs	r2, #0
 80088e8:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	2200      	movs	r2, #0
 80088ee:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2200      	movs	r2, #0
 80088f4:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	2200      	movs	r2, #0
 80088fa:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80088fc:	687b      	ldr	r3, [r7, #4]
 80088fe:	2201      	movs	r2, #1
 8008900:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8008904:	2300      	movs	r3, #0
}
 8008906:	4618      	mov	r0, r3
 8008908:	3718      	adds	r7, #24
 800890a:	46bd      	mov	sp, r7
 800890c:	bd80      	pop	{r7, pc}
 800890e:	bf00      	nop
 8008910:	a7fdabf8 	.word	0xa7fdabf8
 8008914:	cccccccd 	.word	0xcccccccd
 8008918:	40020010 	.word	0x40020010
 800891c:	40020028 	.word	0x40020028
 8008920:	40020040 	.word	0x40020040
 8008924:	40020058 	.word	0x40020058
 8008928:	40020070 	.word	0x40020070
 800892c:	40020088 	.word	0x40020088
 8008930:	400200a0 	.word	0x400200a0
 8008934:	400200b8 	.word	0x400200b8
 8008938:	40020410 	.word	0x40020410
 800893c:	40020428 	.word	0x40020428
 8008940:	40020440 	.word	0x40020440
 8008944:	40020458 	.word	0x40020458
 8008948:	40020470 	.word	0x40020470
 800894c:	40020488 	.word	0x40020488
 8008950:	400204a0 	.word	0x400204a0
 8008954:	400204b8 	.word	0x400204b8
 8008958:	58025408 	.word	0x58025408
 800895c:	5802541c 	.word	0x5802541c
 8008960:	58025430 	.word	0x58025430
 8008964:	58025444 	.word	0x58025444
 8008968:	58025458 	.word	0x58025458
 800896c:	5802546c 	.word	0x5802546c
 8008970:	58025480 	.word	0x58025480
 8008974:	58025494 	.word	0x58025494

08008978 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8008978:	b580      	push	{r7, lr}
 800897a:	b084      	sub	sp, #16
 800897c:	af00      	add	r7, sp, #0
 800897e:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	2b00      	cmp	r3, #0
 8008984:	d101      	bne.n	800898a <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8008986:	2301      	movs	r3, #1
 8008988:	e1a8      	b.n	8008cdc <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	681b      	ldr	r3, [r3, #0]
 800898e:	4a82      	ldr	r2, [pc, #520]	@ (8008b98 <HAL_DMA_DeInit+0x220>)
 8008990:	4293      	cmp	r3, r2
 8008992:	d04a      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	681b      	ldr	r3, [r3, #0]
 8008998:	4a80      	ldr	r2, [pc, #512]	@ (8008b9c <HAL_DMA_DeInit+0x224>)
 800899a:	4293      	cmp	r3, r2
 800899c:	d045      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	4a7f      	ldr	r2, [pc, #508]	@ (8008ba0 <HAL_DMA_DeInit+0x228>)
 80089a4:	4293      	cmp	r3, r2
 80089a6:	d040      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	4a7d      	ldr	r2, [pc, #500]	@ (8008ba4 <HAL_DMA_DeInit+0x22c>)
 80089ae:	4293      	cmp	r3, r2
 80089b0:	d03b      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089b2:	687b      	ldr	r3, [r7, #4]
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	4a7c      	ldr	r2, [pc, #496]	@ (8008ba8 <HAL_DMA_DeInit+0x230>)
 80089b8:	4293      	cmp	r3, r2
 80089ba:	d036      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	681b      	ldr	r3, [r3, #0]
 80089c0:	4a7a      	ldr	r2, [pc, #488]	@ (8008bac <HAL_DMA_DeInit+0x234>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d031      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089c6:	687b      	ldr	r3, [r7, #4]
 80089c8:	681b      	ldr	r3, [r3, #0]
 80089ca:	4a79      	ldr	r2, [pc, #484]	@ (8008bb0 <HAL_DMA_DeInit+0x238>)
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d02c      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	681b      	ldr	r3, [r3, #0]
 80089d4:	4a77      	ldr	r2, [pc, #476]	@ (8008bb4 <HAL_DMA_DeInit+0x23c>)
 80089d6:	4293      	cmp	r3, r2
 80089d8:	d027      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089da:	687b      	ldr	r3, [r7, #4]
 80089dc:	681b      	ldr	r3, [r3, #0]
 80089de:	4a76      	ldr	r2, [pc, #472]	@ (8008bb8 <HAL_DMA_DeInit+0x240>)
 80089e0:	4293      	cmp	r3, r2
 80089e2:	d022      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089e4:	687b      	ldr	r3, [r7, #4]
 80089e6:	681b      	ldr	r3, [r3, #0]
 80089e8:	4a74      	ldr	r2, [pc, #464]	@ (8008bbc <HAL_DMA_DeInit+0x244>)
 80089ea:	4293      	cmp	r3, r2
 80089ec:	d01d      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	681b      	ldr	r3, [r3, #0]
 80089f2:	4a73      	ldr	r2, [pc, #460]	@ (8008bc0 <HAL_DMA_DeInit+0x248>)
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d018      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 80089f8:	687b      	ldr	r3, [r7, #4]
 80089fa:	681b      	ldr	r3, [r3, #0]
 80089fc:	4a71      	ldr	r2, [pc, #452]	@ (8008bc4 <HAL_DMA_DeInit+0x24c>)
 80089fe:	4293      	cmp	r3, r2
 8008a00:	d013      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	4a70      	ldr	r2, [pc, #448]	@ (8008bc8 <HAL_DMA_DeInit+0x250>)
 8008a08:	4293      	cmp	r3, r2
 8008a0a:	d00e      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 8008a0c:	687b      	ldr	r3, [r7, #4]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	4a6e      	ldr	r2, [pc, #440]	@ (8008bcc <HAL_DMA_DeInit+0x254>)
 8008a12:	4293      	cmp	r3, r2
 8008a14:	d009      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 8008a16:	687b      	ldr	r3, [r7, #4]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	4a6d      	ldr	r2, [pc, #436]	@ (8008bd0 <HAL_DMA_DeInit+0x258>)
 8008a1c:	4293      	cmp	r3, r2
 8008a1e:	d004      	beq.n	8008a2a <HAL_DMA_DeInit+0xb2>
 8008a20:	687b      	ldr	r3, [r7, #4]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	4a6b      	ldr	r2, [pc, #428]	@ (8008bd4 <HAL_DMA_DeInit+0x25c>)
 8008a26:	4293      	cmp	r3, r2
 8008a28:	d108      	bne.n	8008a3c <HAL_DMA_DeInit+0xc4>
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	681a      	ldr	r2, [r3, #0]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	f022 0201 	bic.w	r2, r2, #1
 8008a38:	601a      	str	r2, [r3, #0]
 8008a3a:	e007      	b.n	8008a4c <HAL_DMA_DeInit+0xd4>
 8008a3c:	687b      	ldr	r3, [r7, #4]
 8008a3e:	681b      	ldr	r3, [r3, #0]
 8008a40:	681a      	ldr	r2, [r3, #0]
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	f022 0201 	bic.w	r2, r2, #1
 8008a4a:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008a4c:	687b      	ldr	r3, [r7, #4]
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	4a51      	ldr	r2, [pc, #324]	@ (8008b98 <HAL_DMA_DeInit+0x220>)
 8008a52:	4293      	cmp	r3, r2
 8008a54:	d04a      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a56:	687b      	ldr	r3, [r7, #4]
 8008a58:	681b      	ldr	r3, [r3, #0]
 8008a5a:	4a50      	ldr	r2, [pc, #320]	@ (8008b9c <HAL_DMA_DeInit+0x224>)
 8008a5c:	4293      	cmp	r3, r2
 8008a5e:	d045      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	4a4e      	ldr	r2, [pc, #312]	@ (8008ba0 <HAL_DMA_DeInit+0x228>)
 8008a66:	4293      	cmp	r3, r2
 8008a68:	d040      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a6a:	687b      	ldr	r3, [r7, #4]
 8008a6c:	681b      	ldr	r3, [r3, #0]
 8008a6e:	4a4d      	ldr	r2, [pc, #308]	@ (8008ba4 <HAL_DMA_DeInit+0x22c>)
 8008a70:	4293      	cmp	r3, r2
 8008a72:	d03b      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a74:	687b      	ldr	r3, [r7, #4]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	4a4b      	ldr	r2, [pc, #300]	@ (8008ba8 <HAL_DMA_DeInit+0x230>)
 8008a7a:	4293      	cmp	r3, r2
 8008a7c:	d036      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	681b      	ldr	r3, [r3, #0]
 8008a82:	4a4a      	ldr	r2, [pc, #296]	@ (8008bac <HAL_DMA_DeInit+0x234>)
 8008a84:	4293      	cmp	r3, r2
 8008a86:	d031      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	681b      	ldr	r3, [r3, #0]
 8008a8c:	4a48      	ldr	r2, [pc, #288]	@ (8008bb0 <HAL_DMA_DeInit+0x238>)
 8008a8e:	4293      	cmp	r3, r2
 8008a90:	d02c      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	4a47      	ldr	r2, [pc, #284]	@ (8008bb4 <HAL_DMA_DeInit+0x23c>)
 8008a98:	4293      	cmp	r3, r2
 8008a9a:	d027      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	4a45      	ldr	r2, [pc, #276]	@ (8008bb8 <HAL_DMA_DeInit+0x240>)
 8008aa2:	4293      	cmp	r3, r2
 8008aa4:	d022      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	4a44      	ldr	r2, [pc, #272]	@ (8008bbc <HAL_DMA_DeInit+0x244>)
 8008aac:	4293      	cmp	r3, r2
 8008aae:	d01d      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	4a42      	ldr	r2, [pc, #264]	@ (8008bc0 <HAL_DMA_DeInit+0x248>)
 8008ab6:	4293      	cmp	r3, r2
 8008ab8:	d018      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4a41      	ldr	r2, [pc, #260]	@ (8008bc4 <HAL_DMA_DeInit+0x24c>)
 8008ac0:	4293      	cmp	r3, r2
 8008ac2:	d013      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	4a3f      	ldr	r2, [pc, #252]	@ (8008bc8 <HAL_DMA_DeInit+0x250>)
 8008aca:	4293      	cmp	r3, r2
 8008acc:	d00e      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	4a3e      	ldr	r2, [pc, #248]	@ (8008bcc <HAL_DMA_DeInit+0x254>)
 8008ad4:	4293      	cmp	r3, r2
 8008ad6:	d009      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008ad8:	687b      	ldr	r3, [r7, #4]
 8008ada:	681b      	ldr	r3, [r3, #0]
 8008adc:	4a3c      	ldr	r2, [pc, #240]	@ (8008bd0 <HAL_DMA_DeInit+0x258>)
 8008ade:	4293      	cmp	r3, r2
 8008ae0:	d004      	beq.n	8008aec <HAL_DMA_DeInit+0x174>
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	4a3b      	ldr	r2, [pc, #236]	@ (8008bd4 <HAL_DMA_DeInit+0x25c>)
 8008ae8:	4293      	cmp	r3, r2
 8008aea:	d101      	bne.n	8008af0 <HAL_DMA_DeInit+0x178>
 8008aec:	2301      	movs	r3, #1
 8008aee:	e000      	b.n	8008af2 <HAL_DMA_DeInit+0x17a>
 8008af0:	2300      	movs	r3, #0
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d025      	beq.n	8008b42 <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	681b      	ldr	r3, [r3, #0]
 8008afa:	2200      	movs	r2, #0
 8008afc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 8008afe:	687b      	ldr	r3, [r7, #4]
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	2200      	movs	r2, #0
 8008b04:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	681b      	ldr	r3, [r3, #0]
 8008b0a:	2200      	movs	r2, #0
 8008b0c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	681b      	ldr	r3, [r3, #0]
 8008b12:	2200      	movs	r2, #0
 8008b14:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	2200      	movs	r2, #0
 8008b1c:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	681b      	ldr	r3, [r3, #0]
 8008b22:	2221      	movs	r2, #33	@ 0x21
 8008b24:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008b26:	6878      	ldr	r0, [r7, #4]
 8008b28:	f001 fc28 	bl	800a37c <DMA_CalcBaseAndBitshift>
 8008b2c:	4603      	mov	r3, r0
 8008b2e:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8008b30:	687b      	ldr	r3, [r7, #4]
 8008b32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008b34:	f003 031f 	and.w	r3, r3, #31
 8008b38:	223f      	movs	r2, #63	@ 0x3f
 8008b3a:	409a      	lsls	r2, r3
 8008b3c:	68bb      	ldr	r3, [r7, #8]
 8008b3e:	609a      	str	r2, [r3, #8]
 8008b40:	e081      	b.n	8008c46 <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	4a24      	ldr	r2, [pc, #144]	@ (8008bd8 <HAL_DMA_DeInit+0x260>)
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d022      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	4a22      	ldr	r2, [pc, #136]	@ (8008bdc <HAL_DMA_DeInit+0x264>)
 8008b52:	4293      	cmp	r3, r2
 8008b54:	d01d      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	4a21      	ldr	r2, [pc, #132]	@ (8008be0 <HAL_DMA_DeInit+0x268>)
 8008b5c:	4293      	cmp	r3, r2
 8008b5e:	d018      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	4a1f      	ldr	r2, [pc, #124]	@ (8008be4 <HAL_DMA_DeInit+0x26c>)
 8008b66:	4293      	cmp	r3, r2
 8008b68:	d013      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	681b      	ldr	r3, [r3, #0]
 8008b6e:	4a1e      	ldr	r2, [pc, #120]	@ (8008be8 <HAL_DMA_DeInit+0x270>)
 8008b70:	4293      	cmp	r3, r2
 8008b72:	d00e      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b74:	687b      	ldr	r3, [r7, #4]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	4a1c      	ldr	r2, [pc, #112]	@ (8008bec <HAL_DMA_DeInit+0x274>)
 8008b7a:	4293      	cmp	r3, r2
 8008b7c:	d009      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	4a1b      	ldr	r2, [pc, #108]	@ (8008bf0 <HAL_DMA_DeInit+0x278>)
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d004      	beq.n	8008b92 <HAL_DMA_DeInit+0x21a>
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	4a19      	ldr	r2, [pc, #100]	@ (8008bf4 <HAL_DMA_DeInit+0x27c>)
 8008b8e:	4293      	cmp	r3, r2
 8008b90:	d132      	bne.n	8008bf8 <HAL_DMA_DeInit+0x280>
 8008b92:	2301      	movs	r3, #1
 8008b94:	e031      	b.n	8008bfa <HAL_DMA_DeInit+0x282>
 8008b96:	bf00      	nop
 8008b98:	40020010 	.word	0x40020010
 8008b9c:	40020028 	.word	0x40020028
 8008ba0:	40020040 	.word	0x40020040
 8008ba4:	40020058 	.word	0x40020058
 8008ba8:	40020070 	.word	0x40020070
 8008bac:	40020088 	.word	0x40020088
 8008bb0:	400200a0 	.word	0x400200a0
 8008bb4:	400200b8 	.word	0x400200b8
 8008bb8:	40020410 	.word	0x40020410
 8008bbc:	40020428 	.word	0x40020428
 8008bc0:	40020440 	.word	0x40020440
 8008bc4:	40020458 	.word	0x40020458
 8008bc8:	40020470 	.word	0x40020470
 8008bcc:	40020488 	.word	0x40020488
 8008bd0:	400204a0 	.word	0x400204a0
 8008bd4:	400204b8 	.word	0x400204b8
 8008bd8:	58025408 	.word	0x58025408
 8008bdc:	5802541c 	.word	0x5802541c
 8008be0:	58025430 	.word	0x58025430
 8008be4:	58025444 	.word	0x58025444
 8008be8:	58025458 	.word	0x58025458
 8008bec:	5802546c 	.word	0x5802546c
 8008bf0:	58025480 	.word	0x58025480
 8008bf4:	58025494 	.word	0x58025494
 8008bf8:	2300      	movs	r3, #0
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	d021      	beq.n	8008c42 <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	681b      	ldr	r3, [r3, #0]
 8008c02:	2200      	movs	r2, #0
 8008c04:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 8008c06:	687b      	ldr	r3, [r7, #4]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	2200      	movs	r2, #0
 8008c0c:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8008c0e:	687b      	ldr	r3, [r7, #4]
 8008c10:	681b      	ldr	r3, [r3, #0]
 8008c12:	2200      	movs	r2, #0
 8008c14:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	2200      	movs	r2, #0
 8008c1c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	2200      	movs	r2, #0
 8008c24:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8008c26:	6878      	ldr	r0, [r7, #4]
 8008c28:	f001 fba8 	bl	800a37c <DMA_CalcBaseAndBitshift>
 8008c2c:	4603      	mov	r3, r0
 8008c2e:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008c34:	f003 031f 	and.w	r3, r3, #31
 8008c38:	2201      	movs	r2, #1
 8008c3a:	409a      	lsls	r2, r3
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	605a      	str	r2, [r3, #4]
 8008c40:	e001      	b.n	8008c46 <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 8008c42:	2301      	movs	r3, #1
 8008c44:	e04a      	b.n	8008cdc <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8008c46:	6878      	ldr	r0, [r7, #4]
 8008c48:	f001 fcc6 	bl	800a5d8 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d008      	beq.n	8008c66 <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8008c58:	2200      	movs	r2, #0
 8008c5a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8008c5c:	687b      	ldr	r3, [r7, #4]
 8008c5e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008c60:	687a      	ldr	r2, [r7, #4]
 8008c62:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8008c64:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 8008c66:	687b      	ldr	r3, [r7, #4]
 8008c68:	685b      	ldr	r3, [r3, #4]
 8008c6a:	2b00      	cmp	r3, #0
 8008c6c:	d00f      	beq.n	8008c8e <HAL_DMA_DeInit+0x316>
 8008c6e:	687b      	ldr	r3, [r7, #4]
 8008c70:	685b      	ldr	r3, [r3, #4]
 8008c72:	2b08      	cmp	r3, #8
 8008c74:	d80b      	bhi.n	8008c8e <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8008c76:	6878      	ldr	r0, [r7, #4]
 8008c78:	f001 fd48 	bl	800a70c <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8008c7c:	687b      	ldr	r3, [r7, #4]
 8008c7e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008c80:	2200      	movs	r2, #0
 8008c82:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008c88:	687a      	ldr	r2, [r7, #4]
 8008c8a:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8008c8c:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8008c8e:	687b      	ldr	r3, [r7, #4]
 8008c90:	2200      	movs	r2, #0
 8008c92:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2200      	movs	r2, #0
 8008c98:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2200      	movs	r2, #0
 8008ca4:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	2200      	movs	r2, #0
 8008cb0:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	2200      	movs	r2, #0
 8008cb6:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	2200      	movs	r2, #0
 8008cc8:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	2200      	movs	r2, #0
 8008cce:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	2200      	movs	r2, #0
 8008cd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8008cda:	2300      	movs	r3, #0
}
 8008cdc:	4618      	mov	r0, r3
 8008cde:	3710      	adds	r7, #16
 8008ce0:	46bd      	mov	sp, r7
 8008ce2:	bd80      	pop	{r7, pc}

08008ce4 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8008ce4:	b580      	push	{r7, lr}
 8008ce6:	b086      	sub	sp, #24
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	60f8      	str	r0, [r7, #12]
 8008cec:	60b9      	str	r1, [r7, #8]
 8008cee:	607a      	str	r2, [r7, #4]
 8008cf0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8008cf6:	68fb      	ldr	r3, [r7, #12]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d101      	bne.n	8008d00 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 8008cfc:	2301      	movs	r3, #1
 8008cfe:	e226      	b.n	800914e <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8008d00:	68fb      	ldr	r3, [r7, #12]
 8008d02:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8008d06:	2b01      	cmp	r3, #1
 8008d08:	d101      	bne.n	8008d0e <HAL_DMA_Start_IT+0x2a>
 8008d0a:	2302      	movs	r3, #2
 8008d0c:	e21f      	b.n	800914e <HAL_DMA_Start_IT+0x46a>
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2201      	movs	r2, #1
 8008d12:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8008d1c:	b2db      	uxtb	r3, r3
 8008d1e:	2b01      	cmp	r3, #1
 8008d20:	f040 820a 	bne.w	8009138 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8008d24:	68fb      	ldr	r3, [r7, #12]
 8008d26:	2202      	movs	r2, #2
 8008d28:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	2200      	movs	r2, #0
 8008d30:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8008d32:	68fb      	ldr	r3, [r7, #12]
 8008d34:	681b      	ldr	r3, [r3, #0]
 8008d36:	4a68      	ldr	r2, [pc, #416]	@ (8008ed8 <HAL_DMA_Start_IT+0x1f4>)
 8008d38:	4293      	cmp	r3, r2
 8008d3a:	d04a      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	681b      	ldr	r3, [r3, #0]
 8008d40:	4a66      	ldr	r2, [pc, #408]	@ (8008edc <HAL_DMA_Start_IT+0x1f8>)
 8008d42:	4293      	cmp	r3, r2
 8008d44:	d045      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d46:	68fb      	ldr	r3, [r7, #12]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	4a65      	ldr	r2, [pc, #404]	@ (8008ee0 <HAL_DMA_Start_IT+0x1fc>)
 8008d4c:	4293      	cmp	r3, r2
 8008d4e:	d040      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	4a63      	ldr	r2, [pc, #396]	@ (8008ee4 <HAL_DMA_Start_IT+0x200>)
 8008d56:	4293      	cmp	r3, r2
 8008d58:	d03b      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d5a:	68fb      	ldr	r3, [r7, #12]
 8008d5c:	681b      	ldr	r3, [r3, #0]
 8008d5e:	4a62      	ldr	r2, [pc, #392]	@ (8008ee8 <HAL_DMA_Start_IT+0x204>)
 8008d60:	4293      	cmp	r3, r2
 8008d62:	d036      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d64:	68fb      	ldr	r3, [r7, #12]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	4a60      	ldr	r2, [pc, #384]	@ (8008eec <HAL_DMA_Start_IT+0x208>)
 8008d6a:	4293      	cmp	r3, r2
 8008d6c:	d031      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d6e:	68fb      	ldr	r3, [r7, #12]
 8008d70:	681b      	ldr	r3, [r3, #0]
 8008d72:	4a5f      	ldr	r2, [pc, #380]	@ (8008ef0 <HAL_DMA_Start_IT+0x20c>)
 8008d74:	4293      	cmp	r3, r2
 8008d76:	d02c      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d78:	68fb      	ldr	r3, [r7, #12]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	4a5d      	ldr	r2, [pc, #372]	@ (8008ef4 <HAL_DMA_Start_IT+0x210>)
 8008d7e:	4293      	cmp	r3, r2
 8008d80:	d027      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	4a5c      	ldr	r2, [pc, #368]	@ (8008ef8 <HAL_DMA_Start_IT+0x214>)
 8008d88:	4293      	cmp	r3, r2
 8008d8a:	d022      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d8c:	68fb      	ldr	r3, [r7, #12]
 8008d8e:	681b      	ldr	r3, [r3, #0]
 8008d90:	4a5a      	ldr	r2, [pc, #360]	@ (8008efc <HAL_DMA_Start_IT+0x218>)
 8008d92:	4293      	cmp	r3, r2
 8008d94:	d01d      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	4a59      	ldr	r2, [pc, #356]	@ (8008f00 <HAL_DMA_Start_IT+0x21c>)
 8008d9c:	4293      	cmp	r3, r2
 8008d9e:	d018      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008da0:	68fb      	ldr	r3, [r7, #12]
 8008da2:	681b      	ldr	r3, [r3, #0]
 8008da4:	4a57      	ldr	r2, [pc, #348]	@ (8008f04 <HAL_DMA_Start_IT+0x220>)
 8008da6:	4293      	cmp	r3, r2
 8008da8:	d013      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008daa:	68fb      	ldr	r3, [r7, #12]
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a56      	ldr	r2, [pc, #344]	@ (8008f08 <HAL_DMA_Start_IT+0x224>)
 8008db0:	4293      	cmp	r3, r2
 8008db2:	d00e      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	4a54      	ldr	r2, [pc, #336]	@ (8008f0c <HAL_DMA_Start_IT+0x228>)
 8008dba:	4293      	cmp	r3, r2
 8008dbc:	d009      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008dbe:	68fb      	ldr	r3, [r7, #12]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	4a53      	ldr	r2, [pc, #332]	@ (8008f10 <HAL_DMA_Start_IT+0x22c>)
 8008dc4:	4293      	cmp	r3, r2
 8008dc6:	d004      	beq.n	8008dd2 <HAL_DMA_Start_IT+0xee>
 8008dc8:	68fb      	ldr	r3, [r7, #12]
 8008dca:	681b      	ldr	r3, [r3, #0]
 8008dcc:	4a51      	ldr	r2, [pc, #324]	@ (8008f14 <HAL_DMA_Start_IT+0x230>)
 8008dce:	4293      	cmp	r3, r2
 8008dd0:	d108      	bne.n	8008de4 <HAL_DMA_Start_IT+0x100>
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	681a      	ldr	r2, [r3, #0]
 8008dd8:	68fb      	ldr	r3, [r7, #12]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0201 	bic.w	r2, r2, #1
 8008de0:	601a      	str	r2, [r3, #0]
 8008de2:	e007      	b.n	8008df4 <HAL_DMA_Start_IT+0x110>
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	681a      	ldr	r2, [r3, #0]
 8008dea:	68fb      	ldr	r3, [r7, #12]
 8008dec:	681b      	ldr	r3, [r3, #0]
 8008dee:	f022 0201 	bic.w	r2, r2, #1
 8008df2:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8008df4:	683b      	ldr	r3, [r7, #0]
 8008df6:	687a      	ldr	r2, [r7, #4]
 8008df8:	68b9      	ldr	r1, [r7, #8]
 8008dfa:	68f8      	ldr	r0, [r7, #12]
 8008dfc:	f001 f912 	bl	800a024 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8008e00:	68fb      	ldr	r3, [r7, #12]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	4a34      	ldr	r2, [pc, #208]	@ (8008ed8 <HAL_DMA_Start_IT+0x1f4>)
 8008e06:	4293      	cmp	r3, r2
 8008e08:	d04a      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	4a33      	ldr	r2, [pc, #204]	@ (8008edc <HAL_DMA_Start_IT+0x1f8>)
 8008e10:	4293      	cmp	r3, r2
 8008e12:	d045      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	4a31      	ldr	r2, [pc, #196]	@ (8008ee0 <HAL_DMA_Start_IT+0x1fc>)
 8008e1a:	4293      	cmp	r3, r2
 8008e1c:	d040      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681b      	ldr	r3, [r3, #0]
 8008e22:	4a30      	ldr	r2, [pc, #192]	@ (8008ee4 <HAL_DMA_Start_IT+0x200>)
 8008e24:	4293      	cmp	r3, r2
 8008e26:	d03b      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	681b      	ldr	r3, [r3, #0]
 8008e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8008ee8 <HAL_DMA_Start_IT+0x204>)
 8008e2e:	4293      	cmp	r3, r2
 8008e30:	d036      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	681b      	ldr	r3, [r3, #0]
 8008e36:	4a2d      	ldr	r2, [pc, #180]	@ (8008eec <HAL_DMA_Start_IT+0x208>)
 8008e38:	4293      	cmp	r3, r2
 8008e3a:	d031      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e3c:	68fb      	ldr	r3, [r7, #12]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	4a2b      	ldr	r2, [pc, #172]	@ (8008ef0 <HAL_DMA_Start_IT+0x20c>)
 8008e42:	4293      	cmp	r3, r2
 8008e44:	d02c      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8008ef4 <HAL_DMA_Start_IT+0x210>)
 8008e4c:	4293      	cmp	r3, r2
 8008e4e:	d027      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e50:	68fb      	ldr	r3, [r7, #12]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	4a28      	ldr	r2, [pc, #160]	@ (8008ef8 <HAL_DMA_Start_IT+0x214>)
 8008e56:	4293      	cmp	r3, r2
 8008e58:	d022      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e5a:	68fb      	ldr	r3, [r7, #12]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	4a27      	ldr	r2, [pc, #156]	@ (8008efc <HAL_DMA_Start_IT+0x218>)
 8008e60:	4293      	cmp	r3, r2
 8008e62:	d01d      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e64:	68fb      	ldr	r3, [r7, #12]
 8008e66:	681b      	ldr	r3, [r3, #0]
 8008e68:	4a25      	ldr	r2, [pc, #148]	@ (8008f00 <HAL_DMA_Start_IT+0x21c>)
 8008e6a:	4293      	cmp	r3, r2
 8008e6c:	d018      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e6e:	68fb      	ldr	r3, [r7, #12]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	4a24      	ldr	r2, [pc, #144]	@ (8008f04 <HAL_DMA_Start_IT+0x220>)
 8008e74:	4293      	cmp	r3, r2
 8008e76:	d013      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	681b      	ldr	r3, [r3, #0]
 8008e7c:	4a22      	ldr	r2, [pc, #136]	@ (8008f08 <HAL_DMA_Start_IT+0x224>)
 8008e7e:	4293      	cmp	r3, r2
 8008e80:	d00e      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e82:	68fb      	ldr	r3, [r7, #12]
 8008e84:	681b      	ldr	r3, [r3, #0]
 8008e86:	4a21      	ldr	r2, [pc, #132]	@ (8008f0c <HAL_DMA_Start_IT+0x228>)
 8008e88:	4293      	cmp	r3, r2
 8008e8a:	d009      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	4a1f      	ldr	r2, [pc, #124]	@ (8008f10 <HAL_DMA_Start_IT+0x22c>)
 8008e92:	4293      	cmp	r3, r2
 8008e94:	d004      	beq.n	8008ea0 <HAL_DMA_Start_IT+0x1bc>
 8008e96:	68fb      	ldr	r3, [r7, #12]
 8008e98:	681b      	ldr	r3, [r3, #0]
 8008e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8008f14 <HAL_DMA_Start_IT+0x230>)
 8008e9c:	4293      	cmp	r3, r2
 8008e9e:	d101      	bne.n	8008ea4 <HAL_DMA_Start_IT+0x1c0>
 8008ea0:	2301      	movs	r3, #1
 8008ea2:	e000      	b.n	8008ea6 <HAL_DMA_Start_IT+0x1c2>
 8008ea4:	2300      	movs	r3, #0
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d036      	beq.n	8008f18 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	681b      	ldr	r3, [r3, #0]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	f023 021e 	bic.w	r2, r3, #30
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	f042 0216 	orr.w	r2, r2, #22
 8008ebc:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ec2:	2b00      	cmp	r3, #0
 8008ec4:	d03e      	beq.n	8008f44 <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	681a      	ldr	r2, [r3, #0]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f042 0208 	orr.w	r2, r2, #8
 8008ed4:	601a      	str	r2, [r3, #0]
 8008ed6:	e035      	b.n	8008f44 <HAL_DMA_Start_IT+0x260>
 8008ed8:	40020010 	.word	0x40020010
 8008edc:	40020028 	.word	0x40020028
 8008ee0:	40020040 	.word	0x40020040
 8008ee4:	40020058 	.word	0x40020058
 8008ee8:	40020070 	.word	0x40020070
 8008eec:	40020088 	.word	0x40020088
 8008ef0:	400200a0 	.word	0x400200a0
 8008ef4:	400200b8 	.word	0x400200b8
 8008ef8:	40020410 	.word	0x40020410
 8008efc:	40020428 	.word	0x40020428
 8008f00:	40020440 	.word	0x40020440
 8008f04:	40020458 	.word	0x40020458
 8008f08:	40020470 	.word	0x40020470
 8008f0c:	40020488 	.word	0x40020488
 8008f10:	400204a0 	.word	0x400204a0
 8008f14:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	681b      	ldr	r3, [r3, #0]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	f023 020e 	bic.w	r2, r3, #14
 8008f22:	68fb      	ldr	r3, [r7, #12]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	f042 020a 	orr.w	r2, r2, #10
 8008f2a:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8008f2c:	68fb      	ldr	r3, [r7, #12]
 8008f2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d007      	beq.n	8008f44 <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8008f34:	68fb      	ldr	r3, [r7, #12]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0204 	orr.w	r2, r2, #4
 8008f42:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	4a83      	ldr	r2, [pc, #524]	@ (8009158 <HAL_DMA_Start_IT+0x474>)
 8008f4a:	4293      	cmp	r3, r2
 8008f4c:	d072      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f4e:	68fb      	ldr	r3, [r7, #12]
 8008f50:	681b      	ldr	r3, [r3, #0]
 8008f52:	4a82      	ldr	r2, [pc, #520]	@ (800915c <HAL_DMA_Start_IT+0x478>)
 8008f54:	4293      	cmp	r3, r2
 8008f56:	d06d      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f58:	68fb      	ldr	r3, [r7, #12]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	4a80      	ldr	r2, [pc, #512]	@ (8009160 <HAL_DMA_Start_IT+0x47c>)
 8008f5e:	4293      	cmp	r3, r2
 8008f60:	d068      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f62:	68fb      	ldr	r3, [r7, #12]
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	4a7f      	ldr	r2, [pc, #508]	@ (8009164 <HAL_DMA_Start_IT+0x480>)
 8008f68:	4293      	cmp	r3, r2
 8008f6a:	d063      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f6c:	68fb      	ldr	r3, [r7, #12]
 8008f6e:	681b      	ldr	r3, [r3, #0]
 8008f70:	4a7d      	ldr	r2, [pc, #500]	@ (8009168 <HAL_DMA_Start_IT+0x484>)
 8008f72:	4293      	cmp	r3, r2
 8008f74:	d05e      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	681b      	ldr	r3, [r3, #0]
 8008f7a:	4a7c      	ldr	r2, [pc, #496]	@ (800916c <HAL_DMA_Start_IT+0x488>)
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d059      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a7a      	ldr	r2, [pc, #488]	@ (8009170 <HAL_DMA_Start_IT+0x48c>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d054      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	4a79      	ldr	r2, [pc, #484]	@ (8009174 <HAL_DMA_Start_IT+0x490>)
 8008f90:	4293      	cmp	r3, r2
 8008f92:	d04f      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	4a77      	ldr	r2, [pc, #476]	@ (8009178 <HAL_DMA_Start_IT+0x494>)
 8008f9a:	4293      	cmp	r3, r2
 8008f9c:	d04a      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008f9e:	68fb      	ldr	r3, [r7, #12]
 8008fa0:	681b      	ldr	r3, [r3, #0]
 8008fa2:	4a76      	ldr	r2, [pc, #472]	@ (800917c <HAL_DMA_Start_IT+0x498>)
 8008fa4:	4293      	cmp	r3, r2
 8008fa6:	d045      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fa8:	68fb      	ldr	r3, [r7, #12]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	4a74      	ldr	r2, [pc, #464]	@ (8009180 <HAL_DMA_Start_IT+0x49c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d040      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fb2:	68fb      	ldr	r3, [r7, #12]
 8008fb4:	681b      	ldr	r3, [r3, #0]
 8008fb6:	4a73      	ldr	r2, [pc, #460]	@ (8009184 <HAL_DMA_Start_IT+0x4a0>)
 8008fb8:	4293      	cmp	r3, r2
 8008fba:	d03b      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fbc:	68fb      	ldr	r3, [r7, #12]
 8008fbe:	681b      	ldr	r3, [r3, #0]
 8008fc0:	4a71      	ldr	r2, [pc, #452]	@ (8009188 <HAL_DMA_Start_IT+0x4a4>)
 8008fc2:	4293      	cmp	r3, r2
 8008fc4:	d036      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fc6:	68fb      	ldr	r3, [r7, #12]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	4a70      	ldr	r2, [pc, #448]	@ (800918c <HAL_DMA_Start_IT+0x4a8>)
 8008fcc:	4293      	cmp	r3, r2
 8008fce:	d031      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fd0:	68fb      	ldr	r3, [r7, #12]
 8008fd2:	681b      	ldr	r3, [r3, #0]
 8008fd4:	4a6e      	ldr	r2, [pc, #440]	@ (8009190 <HAL_DMA_Start_IT+0x4ac>)
 8008fd6:	4293      	cmp	r3, r2
 8008fd8:	d02c      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fda:	68fb      	ldr	r3, [r7, #12]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	4a6d      	ldr	r2, [pc, #436]	@ (8009194 <HAL_DMA_Start_IT+0x4b0>)
 8008fe0:	4293      	cmp	r3, r2
 8008fe2:	d027      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fe4:	68fb      	ldr	r3, [r7, #12]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	4a6b      	ldr	r2, [pc, #428]	@ (8009198 <HAL_DMA_Start_IT+0x4b4>)
 8008fea:	4293      	cmp	r3, r2
 8008fec:	d022      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4a6a      	ldr	r2, [pc, #424]	@ (800919c <HAL_DMA_Start_IT+0x4b8>)
 8008ff4:	4293      	cmp	r3, r2
 8008ff6:	d01d      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8008ff8:	68fb      	ldr	r3, [r7, #12]
 8008ffa:	681b      	ldr	r3, [r3, #0]
 8008ffc:	4a68      	ldr	r2, [pc, #416]	@ (80091a0 <HAL_DMA_Start_IT+0x4bc>)
 8008ffe:	4293      	cmp	r3, r2
 8009000:	d018      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	681b      	ldr	r3, [r3, #0]
 8009006:	4a67      	ldr	r2, [pc, #412]	@ (80091a4 <HAL_DMA_Start_IT+0x4c0>)
 8009008:	4293      	cmp	r3, r2
 800900a:	d013      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 800900c:	68fb      	ldr	r3, [r7, #12]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	4a65      	ldr	r2, [pc, #404]	@ (80091a8 <HAL_DMA_Start_IT+0x4c4>)
 8009012:	4293      	cmp	r3, r2
 8009014:	d00e      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	4a64      	ldr	r2, [pc, #400]	@ (80091ac <HAL_DMA_Start_IT+0x4c8>)
 800901c:	4293      	cmp	r3, r2
 800901e:	d009      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 8009020:	68fb      	ldr	r3, [r7, #12]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	4a62      	ldr	r2, [pc, #392]	@ (80091b0 <HAL_DMA_Start_IT+0x4cc>)
 8009026:	4293      	cmp	r3, r2
 8009028:	d004      	beq.n	8009034 <HAL_DMA_Start_IT+0x350>
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	4a61      	ldr	r2, [pc, #388]	@ (80091b4 <HAL_DMA_Start_IT+0x4d0>)
 8009030:	4293      	cmp	r3, r2
 8009032:	d101      	bne.n	8009038 <HAL_DMA_Start_IT+0x354>
 8009034:	2301      	movs	r3, #1
 8009036:	e000      	b.n	800903a <HAL_DMA_Start_IT+0x356>
 8009038:	2300      	movs	r3, #0
 800903a:	2b00      	cmp	r3, #0
 800903c:	d01a      	beq.n	8009074 <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 800903e:	68fb      	ldr	r3, [r7, #12]
 8009040:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009048:	2b00      	cmp	r3, #0
 800904a:	d007      	beq.n	800905c <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 800904c:	68fb      	ldr	r3, [r7, #12]
 800904e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009050:	681a      	ldr	r2, [r3, #0]
 8009052:	68fb      	ldr	r3, [r7, #12]
 8009054:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8009056:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800905a:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 800905c:	68fb      	ldr	r3, [r7, #12]
 800905e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009060:	2b00      	cmp	r3, #0
 8009062:	d007      	beq.n	8009074 <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8009064:	68fb      	ldr	r3, [r7, #12]
 8009066:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009068:	681a      	ldr	r2, [r3, #0]
 800906a:	68fb      	ldr	r3, [r7, #12]
 800906c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800906e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8009072:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8009074:	68fb      	ldr	r3, [r7, #12]
 8009076:	681b      	ldr	r3, [r3, #0]
 8009078:	4a37      	ldr	r2, [pc, #220]	@ (8009158 <HAL_DMA_Start_IT+0x474>)
 800907a:	4293      	cmp	r3, r2
 800907c:	d04a      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	681b      	ldr	r3, [r3, #0]
 8009082:	4a36      	ldr	r2, [pc, #216]	@ (800915c <HAL_DMA_Start_IT+0x478>)
 8009084:	4293      	cmp	r3, r2
 8009086:	d045      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	4a34      	ldr	r2, [pc, #208]	@ (8009160 <HAL_DMA_Start_IT+0x47c>)
 800908e:	4293      	cmp	r3, r2
 8009090:	d040      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 8009092:	68fb      	ldr	r3, [r7, #12]
 8009094:	681b      	ldr	r3, [r3, #0]
 8009096:	4a33      	ldr	r2, [pc, #204]	@ (8009164 <HAL_DMA_Start_IT+0x480>)
 8009098:	4293      	cmp	r3, r2
 800909a:	d03b      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 800909c:	68fb      	ldr	r3, [r7, #12]
 800909e:	681b      	ldr	r3, [r3, #0]
 80090a0:	4a31      	ldr	r2, [pc, #196]	@ (8009168 <HAL_DMA_Start_IT+0x484>)
 80090a2:	4293      	cmp	r3, r2
 80090a4:	d036      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	4a30      	ldr	r2, [pc, #192]	@ (800916c <HAL_DMA_Start_IT+0x488>)
 80090ac:	4293      	cmp	r3, r2
 80090ae:	d031      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090b0:	68fb      	ldr	r3, [r7, #12]
 80090b2:	681b      	ldr	r3, [r3, #0]
 80090b4:	4a2e      	ldr	r2, [pc, #184]	@ (8009170 <HAL_DMA_Start_IT+0x48c>)
 80090b6:	4293      	cmp	r3, r2
 80090b8:	d02c      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090ba:	68fb      	ldr	r3, [r7, #12]
 80090bc:	681b      	ldr	r3, [r3, #0]
 80090be:	4a2d      	ldr	r2, [pc, #180]	@ (8009174 <HAL_DMA_Start_IT+0x490>)
 80090c0:	4293      	cmp	r3, r2
 80090c2:	d027      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	4a2b      	ldr	r2, [pc, #172]	@ (8009178 <HAL_DMA_Start_IT+0x494>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d022      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090ce:	68fb      	ldr	r3, [r7, #12]
 80090d0:	681b      	ldr	r3, [r3, #0]
 80090d2:	4a2a      	ldr	r2, [pc, #168]	@ (800917c <HAL_DMA_Start_IT+0x498>)
 80090d4:	4293      	cmp	r3, r2
 80090d6:	d01d      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090d8:	68fb      	ldr	r3, [r7, #12]
 80090da:	681b      	ldr	r3, [r3, #0]
 80090dc:	4a28      	ldr	r2, [pc, #160]	@ (8009180 <HAL_DMA_Start_IT+0x49c>)
 80090de:	4293      	cmp	r3, r2
 80090e0:	d018      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	4a27      	ldr	r2, [pc, #156]	@ (8009184 <HAL_DMA_Start_IT+0x4a0>)
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d013      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090ec:	68fb      	ldr	r3, [r7, #12]
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	4a25      	ldr	r2, [pc, #148]	@ (8009188 <HAL_DMA_Start_IT+0x4a4>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d00e      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 80090f6:	68fb      	ldr	r3, [r7, #12]
 80090f8:	681b      	ldr	r3, [r3, #0]
 80090fa:	4a24      	ldr	r2, [pc, #144]	@ (800918c <HAL_DMA_Start_IT+0x4a8>)
 80090fc:	4293      	cmp	r3, r2
 80090fe:	d009      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 8009100:	68fb      	ldr	r3, [r7, #12]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	4a22      	ldr	r2, [pc, #136]	@ (8009190 <HAL_DMA_Start_IT+0x4ac>)
 8009106:	4293      	cmp	r3, r2
 8009108:	d004      	beq.n	8009114 <HAL_DMA_Start_IT+0x430>
 800910a:	68fb      	ldr	r3, [r7, #12]
 800910c:	681b      	ldr	r3, [r3, #0]
 800910e:	4a21      	ldr	r2, [pc, #132]	@ (8009194 <HAL_DMA_Start_IT+0x4b0>)
 8009110:	4293      	cmp	r3, r2
 8009112:	d108      	bne.n	8009126 <HAL_DMA_Start_IT+0x442>
 8009114:	68fb      	ldr	r3, [r7, #12]
 8009116:	681b      	ldr	r3, [r3, #0]
 8009118:	681a      	ldr	r2, [r3, #0]
 800911a:	68fb      	ldr	r3, [r7, #12]
 800911c:	681b      	ldr	r3, [r3, #0]
 800911e:	f042 0201 	orr.w	r2, r2, #1
 8009122:	601a      	str	r2, [r3, #0]
 8009124:	e012      	b.n	800914c <HAL_DMA_Start_IT+0x468>
 8009126:	68fb      	ldr	r3, [r7, #12]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	681a      	ldr	r2, [r3, #0]
 800912c:	68fb      	ldr	r3, [r7, #12]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f042 0201 	orr.w	r2, r2, #1
 8009134:	601a      	str	r2, [r3, #0]
 8009136:	e009      	b.n	800914c <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8009138:	68fb      	ldr	r3, [r7, #12]
 800913a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800913e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8009140:	68fb      	ldr	r3, [r7, #12]
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8009148:	2301      	movs	r3, #1
 800914a:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 800914c:	7dfb      	ldrb	r3, [r7, #23]
}
 800914e:	4618      	mov	r0, r3
 8009150:	3718      	adds	r7, #24
 8009152:	46bd      	mov	sp, r7
 8009154:	bd80      	pop	{r7, pc}
 8009156:	bf00      	nop
 8009158:	40020010 	.word	0x40020010
 800915c:	40020028 	.word	0x40020028
 8009160:	40020040 	.word	0x40020040
 8009164:	40020058 	.word	0x40020058
 8009168:	40020070 	.word	0x40020070
 800916c:	40020088 	.word	0x40020088
 8009170:	400200a0 	.word	0x400200a0
 8009174:	400200b8 	.word	0x400200b8
 8009178:	40020410 	.word	0x40020410
 800917c:	40020428 	.word	0x40020428
 8009180:	40020440 	.word	0x40020440
 8009184:	40020458 	.word	0x40020458
 8009188:	40020470 	.word	0x40020470
 800918c:	40020488 	.word	0x40020488
 8009190:	400204a0 	.word	0x400204a0
 8009194:	400204b8 	.word	0x400204b8
 8009198:	58025408 	.word	0x58025408
 800919c:	5802541c 	.word	0x5802541c
 80091a0:	58025430 	.word	0x58025430
 80091a4:	58025444 	.word	0x58025444
 80091a8:	58025458 	.word	0x58025458
 80091ac:	5802546c 	.word	0x5802546c
 80091b0:	58025480 	.word	0x58025480
 80091b4:	58025494 	.word	0x58025494

080091b8 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80091b8:	b580      	push	{r7, lr}
 80091ba:	b08a      	sub	sp, #40	@ 0x28
 80091bc:	af00      	add	r7, sp, #0
 80091be:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 80091c0:	2300      	movs	r3, #0
 80091c2:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 80091c4:	4b67      	ldr	r3, [pc, #412]	@ (8009364 <HAL_DMA_IRQHandler+0x1ac>)
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	4a67      	ldr	r2, [pc, #412]	@ (8009368 <HAL_DMA_IRQHandler+0x1b0>)
 80091ca:	fba2 2303 	umull	r2, r3, r2, r3
 80091ce:	0a9b      	lsrs	r3, r3, #10
 80091d0:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091d6:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80091dc:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 80091de:	6a3b      	ldr	r3, [r7, #32]
 80091e0:	681b      	ldr	r3, [r3, #0]
 80091e2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80091e4:	69fb      	ldr	r3, [r7, #28]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	4a5f      	ldr	r2, [pc, #380]	@ (800936c <HAL_DMA_IRQHandler+0x1b4>)
 80091f0:	4293      	cmp	r3, r2
 80091f2:	d04a      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	4a5d      	ldr	r2, [pc, #372]	@ (8009370 <HAL_DMA_IRQHandler+0x1b8>)
 80091fa:	4293      	cmp	r3, r2
 80091fc:	d045      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	4a5c      	ldr	r2, [pc, #368]	@ (8009374 <HAL_DMA_IRQHandler+0x1bc>)
 8009204:	4293      	cmp	r3, r2
 8009206:	d040      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	4a5a      	ldr	r2, [pc, #360]	@ (8009378 <HAL_DMA_IRQHandler+0x1c0>)
 800920e:	4293      	cmp	r3, r2
 8009210:	d03b      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	4a59      	ldr	r2, [pc, #356]	@ (800937c <HAL_DMA_IRQHandler+0x1c4>)
 8009218:	4293      	cmp	r3, r2
 800921a:	d036      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	681b      	ldr	r3, [r3, #0]
 8009220:	4a57      	ldr	r2, [pc, #348]	@ (8009380 <HAL_DMA_IRQHandler+0x1c8>)
 8009222:	4293      	cmp	r3, r2
 8009224:	d031      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009226:	687b      	ldr	r3, [r7, #4]
 8009228:	681b      	ldr	r3, [r3, #0]
 800922a:	4a56      	ldr	r2, [pc, #344]	@ (8009384 <HAL_DMA_IRQHandler+0x1cc>)
 800922c:	4293      	cmp	r3, r2
 800922e:	d02c      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	4a54      	ldr	r2, [pc, #336]	@ (8009388 <HAL_DMA_IRQHandler+0x1d0>)
 8009236:	4293      	cmp	r3, r2
 8009238:	d027      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	4a53      	ldr	r2, [pc, #332]	@ (800938c <HAL_DMA_IRQHandler+0x1d4>)
 8009240:	4293      	cmp	r3, r2
 8009242:	d022      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	4a51      	ldr	r2, [pc, #324]	@ (8009390 <HAL_DMA_IRQHandler+0x1d8>)
 800924a:	4293      	cmp	r3, r2
 800924c:	d01d      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	4a50      	ldr	r2, [pc, #320]	@ (8009394 <HAL_DMA_IRQHandler+0x1dc>)
 8009254:	4293      	cmp	r3, r2
 8009256:	d018      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	4a4e      	ldr	r2, [pc, #312]	@ (8009398 <HAL_DMA_IRQHandler+0x1e0>)
 800925e:	4293      	cmp	r3, r2
 8009260:	d013      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	681b      	ldr	r3, [r3, #0]
 8009266:	4a4d      	ldr	r2, [pc, #308]	@ (800939c <HAL_DMA_IRQHandler+0x1e4>)
 8009268:	4293      	cmp	r3, r2
 800926a:	d00e      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	4a4b      	ldr	r2, [pc, #300]	@ (80093a0 <HAL_DMA_IRQHandler+0x1e8>)
 8009272:	4293      	cmp	r3, r2
 8009274:	d009      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	4a4a      	ldr	r2, [pc, #296]	@ (80093a4 <HAL_DMA_IRQHandler+0x1ec>)
 800927c:	4293      	cmp	r3, r2
 800927e:	d004      	beq.n	800928a <HAL_DMA_IRQHandler+0xd2>
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	4a48      	ldr	r2, [pc, #288]	@ (80093a8 <HAL_DMA_IRQHandler+0x1f0>)
 8009286:	4293      	cmp	r3, r2
 8009288:	d101      	bne.n	800928e <HAL_DMA_IRQHandler+0xd6>
 800928a:	2301      	movs	r3, #1
 800928c:	e000      	b.n	8009290 <HAL_DMA_IRQHandler+0xd8>
 800928e:	2300      	movs	r3, #0
 8009290:	2b00      	cmp	r3, #0
 8009292:	f000 842b 	beq.w	8009aec <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800929a:	f003 031f 	and.w	r3, r3, #31
 800929e:	2208      	movs	r2, #8
 80092a0:	409a      	lsls	r2, r3
 80092a2:	69bb      	ldr	r3, [r7, #24]
 80092a4:	4013      	ands	r3, r2
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	f000 80a2 	beq.w	80093f0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 80092ac:	687b      	ldr	r3, [r7, #4]
 80092ae:	681b      	ldr	r3, [r3, #0]
 80092b0:	4a2e      	ldr	r2, [pc, #184]	@ (800936c <HAL_DMA_IRQHandler+0x1b4>)
 80092b2:	4293      	cmp	r3, r2
 80092b4:	d04a      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	4a2d      	ldr	r2, [pc, #180]	@ (8009370 <HAL_DMA_IRQHandler+0x1b8>)
 80092bc:	4293      	cmp	r3, r2
 80092be:	d045      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	4a2b      	ldr	r2, [pc, #172]	@ (8009374 <HAL_DMA_IRQHandler+0x1bc>)
 80092c6:	4293      	cmp	r3, r2
 80092c8:	d040      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	681b      	ldr	r3, [r3, #0]
 80092ce:	4a2a      	ldr	r2, [pc, #168]	@ (8009378 <HAL_DMA_IRQHandler+0x1c0>)
 80092d0:	4293      	cmp	r3, r2
 80092d2:	d03b      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	4a28      	ldr	r2, [pc, #160]	@ (800937c <HAL_DMA_IRQHandler+0x1c4>)
 80092da:	4293      	cmp	r3, r2
 80092dc:	d036      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	4a27      	ldr	r2, [pc, #156]	@ (8009380 <HAL_DMA_IRQHandler+0x1c8>)
 80092e4:	4293      	cmp	r3, r2
 80092e6:	d031      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	4a25      	ldr	r2, [pc, #148]	@ (8009384 <HAL_DMA_IRQHandler+0x1cc>)
 80092ee:	4293      	cmp	r3, r2
 80092f0:	d02c      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	4a24      	ldr	r2, [pc, #144]	@ (8009388 <HAL_DMA_IRQHandler+0x1d0>)
 80092f8:	4293      	cmp	r3, r2
 80092fa:	d027      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	4a22      	ldr	r2, [pc, #136]	@ (800938c <HAL_DMA_IRQHandler+0x1d4>)
 8009302:	4293      	cmp	r3, r2
 8009304:	d022      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	4a21      	ldr	r2, [pc, #132]	@ (8009390 <HAL_DMA_IRQHandler+0x1d8>)
 800930c:	4293      	cmp	r3, r2
 800930e:	d01d      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 8009310:	687b      	ldr	r3, [r7, #4]
 8009312:	681b      	ldr	r3, [r3, #0]
 8009314:	4a1f      	ldr	r2, [pc, #124]	@ (8009394 <HAL_DMA_IRQHandler+0x1dc>)
 8009316:	4293      	cmp	r3, r2
 8009318:	d018      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	4a1e      	ldr	r2, [pc, #120]	@ (8009398 <HAL_DMA_IRQHandler+0x1e0>)
 8009320:	4293      	cmp	r3, r2
 8009322:	d013      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	4a1c      	ldr	r2, [pc, #112]	@ (800939c <HAL_DMA_IRQHandler+0x1e4>)
 800932a:	4293      	cmp	r3, r2
 800932c:	d00e      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 800932e:	687b      	ldr	r3, [r7, #4]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	4a1b      	ldr	r2, [pc, #108]	@ (80093a0 <HAL_DMA_IRQHandler+0x1e8>)
 8009334:	4293      	cmp	r3, r2
 8009336:	d009      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	4a19      	ldr	r2, [pc, #100]	@ (80093a4 <HAL_DMA_IRQHandler+0x1ec>)
 800933e:	4293      	cmp	r3, r2
 8009340:	d004      	beq.n	800934c <HAL_DMA_IRQHandler+0x194>
 8009342:	687b      	ldr	r3, [r7, #4]
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	4a18      	ldr	r2, [pc, #96]	@ (80093a8 <HAL_DMA_IRQHandler+0x1f0>)
 8009348:	4293      	cmp	r3, r2
 800934a:	d12f      	bne.n	80093ac <HAL_DMA_IRQHandler+0x1f4>
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	f003 0304 	and.w	r3, r3, #4
 8009356:	2b00      	cmp	r3, #0
 8009358:	bf14      	ite	ne
 800935a:	2301      	movne	r3, #1
 800935c:	2300      	moveq	r3, #0
 800935e:	b2db      	uxtb	r3, r3
 8009360:	e02e      	b.n	80093c0 <HAL_DMA_IRQHandler+0x208>
 8009362:	bf00      	nop
 8009364:	2400047c 	.word	0x2400047c
 8009368:	1b4e81b5 	.word	0x1b4e81b5
 800936c:	40020010 	.word	0x40020010
 8009370:	40020028 	.word	0x40020028
 8009374:	40020040 	.word	0x40020040
 8009378:	40020058 	.word	0x40020058
 800937c:	40020070 	.word	0x40020070
 8009380:	40020088 	.word	0x40020088
 8009384:	400200a0 	.word	0x400200a0
 8009388:	400200b8 	.word	0x400200b8
 800938c:	40020410 	.word	0x40020410
 8009390:	40020428 	.word	0x40020428
 8009394:	40020440 	.word	0x40020440
 8009398:	40020458 	.word	0x40020458
 800939c:	40020470 	.word	0x40020470
 80093a0:	40020488 	.word	0x40020488
 80093a4:	400204a0 	.word	0x400204a0
 80093a8:	400204b8 	.word	0x400204b8
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	681b      	ldr	r3, [r3, #0]
 80093b2:	f003 0308 	and.w	r3, r3, #8
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	bf14      	ite	ne
 80093ba:	2301      	movne	r3, #1
 80093bc:	2300      	moveq	r3, #0
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d015      	beq.n	80093f0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	681a      	ldr	r2, [r3, #0]
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	f022 0204 	bic.w	r2, r2, #4
 80093d2:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80093d4:	687b      	ldr	r3, [r7, #4]
 80093d6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093d8:	f003 031f 	and.w	r3, r3, #31
 80093dc:	2208      	movs	r2, #8
 80093de:	409a      	lsls	r2, r3
 80093e0:	6a3b      	ldr	r3, [r7, #32]
 80093e2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80093e8:	f043 0201 	orr.w	r2, r3, #1
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80093f0:	687b      	ldr	r3, [r7, #4]
 80093f2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80093f4:	f003 031f 	and.w	r3, r3, #31
 80093f8:	69ba      	ldr	r2, [r7, #24]
 80093fa:	fa22 f303 	lsr.w	r3, r2, r3
 80093fe:	f003 0301 	and.w	r3, r3, #1
 8009402:	2b00      	cmp	r3, #0
 8009404:	d06e      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	681b      	ldr	r3, [r3, #0]
 800940a:	4a69      	ldr	r2, [pc, #420]	@ (80095b0 <HAL_DMA_IRQHandler+0x3f8>)
 800940c:	4293      	cmp	r3, r2
 800940e:	d04a      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	4a67      	ldr	r2, [pc, #412]	@ (80095b4 <HAL_DMA_IRQHandler+0x3fc>)
 8009416:	4293      	cmp	r3, r2
 8009418:	d045      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	4a66      	ldr	r2, [pc, #408]	@ (80095b8 <HAL_DMA_IRQHandler+0x400>)
 8009420:	4293      	cmp	r3, r2
 8009422:	d040      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	681b      	ldr	r3, [r3, #0]
 8009428:	4a64      	ldr	r2, [pc, #400]	@ (80095bc <HAL_DMA_IRQHandler+0x404>)
 800942a:	4293      	cmp	r3, r2
 800942c:	d03b      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	681b      	ldr	r3, [r3, #0]
 8009432:	4a63      	ldr	r2, [pc, #396]	@ (80095c0 <HAL_DMA_IRQHandler+0x408>)
 8009434:	4293      	cmp	r3, r2
 8009436:	d036      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	4a61      	ldr	r2, [pc, #388]	@ (80095c4 <HAL_DMA_IRQHandler+0x40c>)
 800943e:	4293      	cmp	r3, r2
 8009440:	d031      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009442:	687b      	ldr	r3, [r7, #4]
 8009444:	681b      	ldr	r3, [r3, #0]
 8009446:	4a60      	ldr	r2, [pc, #384]	@ (80095c8 <HAL_DMA_IRQHandler+0x410>)
 8009448:	4293      	cmp	r3, r2
 800944a:	d02c      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 800944c:	687b      	ldr	r3, [r7, #4]
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	4a5e      	ldr	r2, [pc, #376]	@ (80095cc <HAL_DMA_IRQHandler+0x414>)
 8009452:	4293      	cmp	r3, r2
 8009454:	d027      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	4a5d      	ldr	r2, [pc, #372]	@ (80095d0 <HAL_DMA_IRQHandler+0x418>)
 800945c:	4293      	cmp	r3, r2
 800945e:	d022      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4a5b      	ldr	r2, [pc, #364]	@ (80095d4 <HAL_DMA_IRQHandler+0x41c>)
 8009466:	4293      	cmp	r3, r2
 8009468:	d01d      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	4a5a      	ldr	r2, [pc, #360]	@ (80095d8 <HAL_DMA_IRQHandler+0x420>)
 8009470:	4293      	cmp	r3, r2
 8009472:	d018      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	4a58      	ldr	r2, [pc, #352]	@ (80095dc <HAL_DMA_IRQHandler+0x424>)
 800947a:	4293      	cmp	r3, r2
 800947c:	d013      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	4a57      	ldr	r2, [pc, #348]	@ (80095e0 <HAL_DMA_IRQHandler+0x428>)
 8009484:	4293      	cmp	r3, r2
 8009486:	d00e      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	4a55      	ldr	r2, [pc, #340]	@ (80095e4 <HAL_DMA_IRQHandler+0x42c>)
 800948e:	4293      	cmp	r3, r2
 8009490:	d009      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	4a54      	ldr	r2, [pc, #336]	@ (80095e8 <HAL_DMA_IRQHandler+0x430>)
 8009498:	4293      	cmp	r3, r2
 800949a:	d004      	beq.n	80094a6 <HAL_DMA_IRQHandler+0x2ee>
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	681b      	ldr	r3, [r3, #0]
 80094a0:	4a52      	ldr	r2, [pc, #328]	@ (80095ec <HAL_DMA_IRQHandler+0x434>)
 80094a2:	4293      	cmp	r3, r2
 80094a4:	d10a      	bne.n	80094bc <HAL_DMA_IRQHandler+0x304>
 80094a6:	687b      	ldr	r3, [r7, #4]
 80094a8:	681b      	ldr	r3, [r3, #0]
 80094aa:	695b      	ldr	r3, [r3, #20]
 80094ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	bf14      	ite	ne
 80094b4:	2301      	movne	r3, #1
 80094b6:	2300      	moveq	r3, #0
 80094b8:	b2db      	uxtb	r3, r3
 80094ba:	e003      	b.n	80094c4 <HAL_DMA_IRQHandler+0x30c>
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	681b      	ldr	r3, [r3, #0]
 80094c0:	681b      	ldr	r3, [r3, #0]
 80094c2:	2300      	movs	r3, #0
 80094c4:	2b00      	cmp	r3, #0
 80094c6:	d00d      	beq.n	80094e4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80094c8:	687b      	ldr	r3, [r7, #4]
 80094ca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094cc:	f003 031f 	and.w	r3, r3, #31
 80094d0:	2201      	movs	r2, #1
 80094d2:	409a      	lsls	r2, r3
 80094d4:	6a3b      	ldr	r3, [r7, #32]
 80094d6:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80094dc:	f043 0202 	orr.w	r2, r3, #2
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80094e4:	687b      	ldr	r3, [r7, #4]
 80094e6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80094e8:	f003 031f 	and.w	r3, r3, #31
 80094ec:	2204      	movs	r2, #4
 80094ee:	409a      	lsls	r2, r3
 80094f0:	69bb      	ldr	r3, [r7, #24]
 80094f2:	4013      	ands	r3, r2
 80094f4:	2b00      	cmp	r3, #0
 80094f6:	f000 808f 	beq.w	8009618 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681b      	ldr	r3, [r3, #0]
 80094fe:	4a2c      	ldr	r2, [pc, #176]	@ (80095b0 <HAL_DMA_IRQHandler+0x3f8>)
 8009500:	4293      	cmp	r3, r2
 8009502:	d04a      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009504:	687b      	ldr	r3, [r7, #4]
 8009506:	681b      	ldr	r3, [r3, #0]
 8009508:	4a2a      	ldr	r2, [pc, #168]	@ (80095b4 <HAL_DMA_IRQHandler+0x3fc>)
 800950a:	4293      	cmp	r3, r2
 800950c:	d045      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 800950e:	687b      	ldr	r3, [r7, #4]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	4a29      	ldr	r2, [pc, #164]	@ (80095b8 <HAL_DMA_IRQHandler+0x400>)
 8009514:	4293      	cmp	r3, r2
 8009516:	d040      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009518:	687b      	ldr	r3, [r7, #4]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	4a27      	ldr	r2, [pc, #156]	@ (80095bc <HAL_DMA_IRQHandler+0x404>)
 800951e:	4293      	cmp	r3, r2
 8009520:	d03b      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681b      	ldr	r3, [r3, #0]
 8009526:	4a26      	ldr	r2, [pc, #152]	@ (80095c0 <HAL_DMA_IRQHandler+0x408>)
 8009528:	4293      	cmp	r3, r2
 800952a:	d036      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 800952c:	687b      	ldr	r3, [r7, #4]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	4a24      	ldr	r2, [pc, #144]	@ (80095c4 <HAL_DMA_IRQHandler+0x40c>)
 8009532:	4293      	cmp	r3, r2
 8009534:	d031      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	4a23      	ldr	r2, [pc, #140]	@ (80095c8 <HAL_DMA_IRQHandler+0x410>)
 800953c:	4293      	cmp	r3, r2
 800953e:	d02c      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	681b      	ldr	r3, [r3, #0]
 8009544:	4a21      	ldr	r2, [pc, #132]	@ (80095cc <HAL_DMA_IRQHandler+0x414>)
 8009546:	4293      	cmp	r3, r2
 8009548:	d027      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 800954a:	687b      	ldr	r3, [r7, #4]
 800954c:	681b      	ldr	r3, [r3, #0]
 800954e:	4a20      	ldr	r2, [pc, #128]	@ (80095d0 <HAL_DMA_IRQHandler+0x418>)
 8009550:	4293      	cmp	r3, r2
 8009552:	d022      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009554:	687b      	ldr	r3, [r7, #4]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	4a1e      	ldr	r2, [pc, #120]	@ (80095d4 <HAL_DMA_IRQHandler+0x41c>)
 800955a:	4293      	cmp	r3, r2
 800955c:	d01d      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 800955e:	687b      	ldr	r3, [r7, #4]
 8009560:	681b      	ldr	r3, [r3, #0]
 8009562:	4a1d      	ldr	r2, [pc, #116]	@ (80095d8 <HAL_DMA_IRQHandler+0x420>)
 8009564:	4293      	cmp	r3, r2
 8009566:	d018      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009568:	687b      	ldr	r3, [r7, #4]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	4a1b      	ldr	r2, [pc, #108]	@ (80095dc <HAL_DMA_IRQHandler+0x424>)
 800956e:	4293      	cmp	r3, r2
 8009570:	d013      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	4a1a      	ldr	r2, [pc, #104]	@ (80095e0 <HAL_DMA_IRQHandler+0x428>)
 8009578:	4293      	cmp	r3, r2
 800957a:	d00e      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 800957c:	687b      	ldr	r3, [r7, #4]
 800957e:	681b      	ldr	r3, [r3, #0]
 8009580:	4a18      	ldr	r2, [pc, #96]	@ (80095e4 <HAL_DMA_IRQHandler+0x42c>)
 8009582:	4293      	cmp	r3, r2
 8009584:	d009      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	4a17      	ldr	r2, [pc, #92]	@ (80095e8 <HAL_DMA_IRQHandler+0x430>)
 800958c:	4293      	cmp	r3, r2
 800958e:	d004      	beq.n	800959a <HAL_DMA_IRQHandler+0x3e2>
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	4a15      	ldr	r2, [pc, #84]	@ (80095ec <HAL_DMA_IRQHandler+0x434>)
 8009596:	4293      	cmp	r3, r2
 8009598:	d12a      	bne.n	80095f0 <HAL_DMA_IRQHandler+0x438>
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	681b      	ldr	r3, [r3, #0]
 80095a0:	f003 0302 	and.w	r3, r3, #2
 80095a4:	2b00      	cmp	r3, #0
 80095a6:	bf14      	ite	ne
 80095a8:	2301      	movne	r3, #1
 80095aa:	2300      	moveq	r3, #0
 80095ac:	b2db      	uxtb	r3, r3
 80095ae:	e023      	b.n	80095f8 <HAL_DMA_IRQHandler+0x440>
 80095b0:	40020010 	.word	0x40020010
 80095b4:	40020028 	.word	0x40020028
 80095b8:	40020040 	.word	0x40020040
 80095bc:	40020058 	.word	0x40020058
 80095c0:	40020070 	.word	0x40020070
 80095c4:	40020088 	.word	0x40020088
 80095c8:	400200a0 	.word	0x400200a0
 80095cc:	400200b8 	.word	0x400200b8
 80095d0:	40020410 	.word	0x40020410
 80095d4:	40020428 	.word	0x40020428
 80095d8:	40020440 	.word	0x40020440
 80095dc:	40020458 	.word	0x40020458
 80095e0:	40020470 	.word	0x40020470
 80095e4:	40020488 	.word	0x40020488
 80095e8:	400204a0 	.word	0x400204a0
 80095ec:	400204b8 	.word	0x400204b8
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	681b      	ldr	r3, [r3, #0]
 80095f6:	2300      	movs	r3, #0
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d00d      	beq.n	8009618 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009600:	f003 031f 	and.w	r3, r3, #31
 8009604:	2204      	movs	r2, #4
 8009606:	409a      	lsls	r2, r3
 8009608:	6a3b      	ldr	r3, [r7, #32]
 800960a:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800960c:	687b      	ldr	r3, [r7, #4]
 800960e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8009610:	f043 0204 	orr.w	r2, r3, #4
 8009614:	687b      	ldr	r3, [r7, #4]
 8009616:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8009618:	687b      	ldr	r3, [r7, #4]
 800961a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800961c:	f003 031f 	and.w	r3, r3, #31
 8009620:	2210      	movs	r2, #16
 8009622:	409a      	lsls	r2, r3
 8009624:	69bb      	ldr	r3, [r7, #24]
 8009626:	4013      	ands	r3, r2
 8009628:	2b00      	cmp	r3, #0
 800962a:	f000 80a6 	beq.w	800977a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	681b      	ldr	r3, [r3, #0]
 8009632:	4a85      	ldr	r2, [pc, #532]	@ (8009848 <HAL_DMA_IRQHandler+0x690>)
 8009634:	4293      	cmp	r3, r2
 8009636:	d04a      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	681b      	ldr	r3, [r3, #0]
 800963c:	4a83      	ldr	r2, [pc, #524]	@ (800984c <HAL_DMA_IRQHandler+0x694>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d045      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	4a82      	ldr	r2, [pc, #520]	@ (8009850 <HAL_DMA_IRQHandler+0x698>)
 8009648:	4293      	cmp	r3, r2
 800964a:	d040      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 800964c:	687b      	ldr	r3, [r7, #4]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	4a80      	ldr	r2, [pc, #512]	@ (8009854 <HAL_DMA_IRQHandler+0x69c>)
 8009652:	4293      	cmp	r3, r2
 8009654:	d03b      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	4a7f      	ldr	r2, [pc, #508]	@ (8009858 <HAL_DMA_IRQHandler+0x6a0>)
 800965c:	4293      	cmp	r3, r2
 800965e:	d036      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009660:	687b      	ldr	r3, [r7, #4]
 8009662:	681b      	ldr	r3, [r3, #0]
 8009664:	4a7d      	ldr	r2, [pc, #500]	@ (800985c <HAL_DMA_IRQHandler+0x6a4>)
 8009666:	4293      	cmp	r3, r2
 8009668:	d031      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	4a7c      	ldr	r2, [pc, #496]	@ (8009860 <HAL_DMA_IRQHandler+0x6a8>)
 8009670:	4293      	cmp	r3, r2
 8009672:	d02c      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	4a7a      	ldr	r2, [pc, #488]	@ (8009864 <HAL_DMA_IRQHandler+0x6ac>)
 800967a:	4293      	cmp	r3, r2
 800967c:	d027      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	681b      	ldr	r3, [r3, #0]
 8009682:	4a79      	ldr	r2, [pc, #484]	@ (8009868 <HAL_DMA_IRQHandler+0x6b0>)
 8009684:	4293      	cmp	r3, r2
 8009686:	d022      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009688:	687b      	ldr	r3, [r7, #4]
 800968a:	681b      	ldr	r3, [r3, #0]
 800968c:	4a77      	ldr	r2, [pc, #476]	@ (800986c <HAL_DMA_IRQHandler+0x6b4>)
 800968e:	4293      	cmp	r3, r2
 8009690:	d01d      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	4a76      	ldr	r2, [pc, #472]	@ (8009870 <HAL_DMA_IRQHandler+0x6b8>)
 8009698:	4293      	cmp	r3, r2
 800969a:	d018      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	4a74      	ldr	r2, [pc, #464]	@ (8009874 <HAL_DMA_IRQHandler+0x6bc>)
 80096a2:	4293      	cmp	r3, r2
 80096a4:	d013      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 80096a6:	687b      	ldr	r3, [r7, #4]
 80096a8:	681b      	ldr	r3, [r3, #0]
 80096aa:	4a73      	ldr	r2, [pc, #460]	@ (8009878 <HAL_DMA_IRQHandler+0x6c0>)
 80096ac:	4293      	cmp	r3, r2
 80096ae:	d00e      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 80096b0:	687b      	ldr	r3, [r7, #4]
 80096b2:	681b      	ldr	r3, [r3, #0]
 80096b4:	4a71      	ldr	r2, [pc, #452]	@ (800987c <HAL_DMA_IRQHandler+0x6c4>)
 80096b6:	4293      	cmp	r3, r2
 80096b8:	d009      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	681b      	ldr	r3, [r3, #0]
 80096be:	4a70      	ldr	r2, [pc, #448]	@ (8009880 <HAL_DMA_IRQHandler+0x6c8>)
 80096c0:	4293      	cmp	r3, r2
 80096c2:	d004      	beq.n	80096ce <HAL_DMA_IRQHandler+0x516>
 80096c4:	687b      	ldr	r3, [r7, #4]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	4a6e      	ldr	r2, [pc, #440]	@ (8009884 <HAL_DMA_IRQHandler+0x6cc>)
 80096ca:	4293      	cmp	r3, r2
 80096cc:	d10a      	bne.n	80096e4 <HAL_DMA_IRQHandler+0x52c>
 80096ce:	687b      	ldr	r3, [r7, #4]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f003 0308 	and.w	r3, r3, #8
 80096d8:	2b00      	cmp	r3, #0
 80096da:	bf14      	ite	ne
 80096dc:	2301      	movne	r3, #1
 80096de:	2300      	moveq	r3, #0
 80096e0:	b2db      	uxtb	r3, r3
 80096e2:	e009      	b.n	80096f8 <HAL_DMA_IRQHandler+0x540>
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	681b      	ldr	r3, [r3, #0]
 80096ea:	f003 0304 	and.w	r3, r3, #4
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	bf14      	ite	ne
 80096f2:	2301      	movne	r3, #1
 80096f4:	2300      	moveq	r3, #0
 80096f6:	b2db      	uxtb	r3, r3
 80096f8:	2b00      	cmp	r3, #0
 80096fa:	d03e      	beq.n	800977a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009700:	f003 031f 	and.w	r3, r3, #31
 8009704:	2210      	movs	r2, #16
 8009706:	409a      	lsls	r2, r3
 8009708:	6a3b      	ldr	r3, [r7, #32]
 800970a:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	681b      	ldr	r3, [r3, #0]
 8009712:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8009716:	2b00      	cmp	r3, #0
 8009718:	d018      	beq.n	800974c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8009724:	2b00      	cmp	r3, #0
 8009726:	d108      	bne.n	800973a <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800972c:	2b00      	cmp	r3, #0
 800972e:	d024      	beq.n	800977a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8009730:	687b      	ldr	r3, [r7, #4]
 8009732:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009734:	6878      	ldr	r0, [r7, #4]
 8009736:	4798      	blx	r3
 8009738:	e01f      	b.n	800977a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800973e:	2b00      	cmp	r3, #0
 8009740:	d01b      	beq.n	800977a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8009742:	687b      	ldr	r3, [r7, #4]
 8009744:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009746:	6878      	ldr	r0, [r7, #4]
 8009748:	4798      	blx	r3
 800974a:	e016      	b.n	800977a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009756:	2b00      	cmp	r3, #0
 8009758:	d107      	bne.n	800976a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	681b      	ldr	r3, [r3, #0]
 800975e:	681a      	ldr	r2, [r3, #0]
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	f022 0208 	bic.w	r2, r2, #8
 8009768:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800976e:	2b00      	cmp	r3, #0
 8009770:	d003      	beq.n	800977a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009776:	6878      	ldr	r0, [r7, #4]
 8009778:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 800977a:	687b      	ldr	r3, [r7, #4]
 800977c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800977e:	f003 031f 	and.w	r3, r3, #31
 8009782:	2220      	movs	r2, #32
 8009784:	409a      	lsls	r2, r3
 8009786:	69bb      	ldr	r3, [r7, #24]
 8009788:	4013      	ands	r3, r2
 800978a:	2b00      	cmp	r3, #0
 800978c:	f000 8110 	beq.w	80099b0 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	4a2c      	ldr	r2, [pc, #176]	@ (8009848 <HAL_DMA_IRQHandler+0x690>)
 8009796:	4293      	cmp	r3, r2
 8009798:	d04a      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	681b      	ldr	r3, [r3, #0]
 800979e:	4a2b      	ldr	r2, [pc, #172]	@ (800984c <HAL_DMA_IRQHandler+0x694>)
 80097a0:	4293      	cmp	r3, r2
 80097a2:	d045      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	681b      	ldr	r3, [r3, #0]
 80097a8:	4a29      	ldr	r2, [pc, #164]	@ (8009850 <HAL_DMA_IRQHandler+0x698>)
 80097aa:	4293      	cmp	r3, r2
 80097ac:	d040      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097ae:	687b      	ldr	r3, [r7, #4]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	4a28      	ldr	r2, [pc, #160]	@ (8009854 <HAL_DMA_IRQHandler+0x69c>)
 80097b4:	4293      	cmp	r3, r2
 80097b6:	d03b      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097b8:	687b      	ldr	r3, [r7, #4]
 80097ba:	681b      	ldr	r3, [r3, #0]
 80097bc:	4a26      	ldr	r2, [pc, #152]	@ (8009858 <HAL_DMA_IRQHandler+0x6a0>)
 80097be:	4293      	cmp	r3, r2
 80097c0:	d036      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097c2:	687b      	ldr	r3, [r7, #4]
 80097c4:	681b      	ldr	r3, [r3, #0]
 80097c6:	4a25      	ldr	r2, [pc, #148]	@ (800985c <HAL_DMA_IRQHandler+0x6a4>)
 80097c8:	4293      	cmp	r3, r2
 80097ca:	d031      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	681b      	ldr	r3, [r3, #0]
 80097d0:	4a23      	ldr	r2, [pc, #140]	@ (8009860 <HAL_DMA_IRQHandler+0x6a8>)
 80097d2:	4293      	cmp	r3, r2
 80097d4:	d02c      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a22      	ldr	r2, [pc, #136]	@ (8009864 <HAL_DMA_IRQHandler+0x6ac>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d027      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a20      	ldr	r2, [pc, #128]	@ (8009868 <HAL_DMA_IRQHandler+0x6b0>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d022      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a1f      	ldr	r2, [pc, #124]	@ (800986c <HAL_DMA_IRQHandler+0x6b4>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d01d      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a1d      	ldr	r2, [pc, #116]	@ (8009870 <HAL_DMA_IRQHandler+0x6b8>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d018      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a1c      	ldr	r2, [pc, #112]	@ (8009874 <HAL_DMA_IRQHandler+0x6bc>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d013      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 8009808:	687b      	ldr	r3, [r7, #4]
 800980a:	681b      	ldr	r3, [r3, #0]
 800980c:	4a1a      	ldr	r2, [pc, #104]	@ (8009878 <HAL_DMA_IRQHandler+0x6c0>)
 800980e:	4293      	cmp	r3, r2
 8009810:	d00e      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	4a19      	ldr	r2, [pc, #100]	@ (800987c <HAL_DMA_IRQHandler+0x6c4>)
 8009818:	4293      	cmp	r3, r2
 800981a:	d009      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a17      	ldr	r2, [pc, #92]	@ (8009880 <HAL_DMA_IRQHandler+0x6c8>)
 8009822:	4293      	cmp	r3, r2
 8009824:	d004      	beq.n	8009830 <HAL_DMA_IRQHandler+0x678>
 8009826:	687b      	ldr	r3, [r7, #4]
 8009828:	681b      	ldr	r3, [r3, #0]
 800982a:	4a16      	ldr	r2, [pc, #88]	@ (8009884 <HAL_DMA_IRQHandler+0x6cc>)
 800982c:	4293      	cmp	r3, r2
 800982e:	d12b      	bne.n	8009888 <HAL_DMA_IRQHandler+0x6d0>
 8009830:	687b      	ldr	r3, [r7, #4]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	681b      	ldr	r3, [r3, #0]
 8009836:	f003 0310 	and.w	r3, r3, #16
 800983a:	2b00      	cmp	r3, #0
 800983c:	bf14      	ite	ne
 800983e:	2301      	movne	r3, #1
 8009840:	2300      	moveq	r3, #0
 8009842:	b2db      	uxtb	r3, r3
 8009844:	e02a      	b.n	800989c <HAL_DMA_IRQHandler+0x6e4>
 8009846:	bf00      	nop
 8009848:	40020010 	.word	0x40020010
 800984c:	40020028 	.word	0x40020028
 8009850:	40020040 	.word	0x40020040
 8009854:	40020058 	.word	0x40020058
 8009858:	40020070 	.word	0x40020070
 800985c:	40020088 	.word	0x40020088
 8009860:	400200a0 	.word	0x400200a0
 8009864:	400200b8 	.word	0x400200b8
 8009868:	40020410 	.word	0x40020410
 800986c:	40020428 	.word	0x40020428
 8009870:	40020440 	.word	0x40020440
 8009874:	40020458 	.word	0x40020458
 8009878:	40020470 	.word	0x40020470
 800987c:	40020488 	.word	0x40020488
 8009880:	400204a0 	.word	0x400204a0
 8009884:	400204b8 	.word	0x400204b8
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	f003 0302 	and.w	r3, r3, #2
 8009892:	2b00      	cmp	r3, #0
 8009894:	bf14      	ite	ne
 8009896:	2301      	movne	r3, #1
 8009898:	2300      	moveq	r3, #0
 800989a:	b2db      	uxtb	r3, r3
 800989c:	2b00      	cmp	r3, #0
 800989e:	f000 8087 	beq.w	80099b0 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80098a6:	f003 031f 	and.w	r3, r3, #31
 80098aa:	2220      	movs	r2, #32
 80098ac:	409a      	lsls	r2, r3
 80098ae:	6a3b      	ldr	r3, [r7, #32]
 80098b0:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b04      	cmp	r3, #4
 80098bc:	d139      	bne.n	8009932 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	681b      	ldr	r3, [r3, #0]
 80098c2:	681a      	ldr	r2, [r3, #0]
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f022 0216 	bic.w	r2, r2, #22
 80098cc:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 80098ce:	687b      	ldr	r3, [r7, #4]
 80098d0:	681b      	ldr	r3, [r3, #0]
 80098d2:	695a      	ldr	r2, [r3, #20]
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80098dc:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d103      	bne.n	80098ee <HAL_DMA_IRQHandler+0x736>
 80098e6:	687b      	ldr	r3, [r7, #4]
 80098e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80098ea:	2b00      	cmp	r3, #0
 80098ec:	d007      	beq.n	80098fe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	681b      	ldr	r3, [r3, #0]
 80098f2:	681a      	ldr	r2, [r3, #0]
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	f022 0208 	bic.w	r2, r2, #8
 80098fc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80098fe:	687b      	ldr	r3, [r7, #4]
 8009900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009902:	f003 031f 	and.w	r3, r3, #31
 8009906:	223f      	movs	r2, #63	@ 0x3f
 8009908:	409a      	lsls	r2, r3
 800990a:	6a3b      	ldr	r3, [r7, #32]
 800990c:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	2201      	movs	r2, #1
 8009912:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	2200      	movs	r2, #0
 800991a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009922:	2b00      	cmp	r3, #0
 8009924:	f000 834a 	beq.w	8009fbc <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8009928:	687b      	ldr	r3, [r7, #4]
 800992a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800992c:	6878      	ldr	r0, [r7, #4]
 800992e:	4798      	blx	r3
          }
          return;
 8009930:	e344      	b.n	8009fbc <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	681b      	ldr	r3, [r3, #0]
 8009938:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800993c:	2b00      	cmp	r3, #0
 800993e:	d018      	beq.n	8009972 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	681b      	ldr	r3, [r3, #0]
 8009944:	681b      	ldr	r3, [r3, #0]
 8009946:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800994a:	2b00      	cmp	r3, #0
 800994c:	d108      	bne.n	8009960 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009952:	2b00      	cmp	r3, #0
 8009954:	d02c      	beq.n	80099b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8009956:	687b      	ldr	r3, [r7, #4]
 8009958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800995a:	6878      	ldr	r0, [r7, #4]
 800995c:	4798      	blx	r3
 800995e:	e027      	b.n	80099b0 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009964:	2b00      	cmp	r3, #0
 8009966:	d023      	beq.n	80099b0 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800996c:	6878      	ldr	r0, [r7, #4]
 800996e:	4798      	blx	r3
 8009970:	e01e      	b.n	80099b0 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	681b      	ldr	r3, [r3, #0]
 8009978:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800997c:	2b00      	cmp	r3, #0
 800997e:	d10f      	bne.n	80099a0 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	681b      	ldr	r3, [r3, #0]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	f022 0210 	bic.w	r2, r2, #16
 800998e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8009990:	687b      	ldr	r3, [r7, #4]
 8009992:	2201      	movs	r2, #1
 8009994:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8009998:	687b      	ldr	r3, [r7, #4]
 800999a:	2200      	movs	r2, #0
 800999c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 80099a0:	687b      	ldr	r3, [r7, #4]
 80099a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d003      	beq.n	80099b0 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 80099a8:	687b      	ldr	r3, [r7, #4]
 80099aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80099ac:	6878      	ldr	r0, [r7, #4]
 80099ae:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80099b0:	687b      	ldr	r3, [r7, #4]
 80099b2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099b4:	2b00      	cmp	r3, #0
 80099b6:	f000 8306 	beq.w	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80099be:	f003 0301 	and.w	r3, r3, #1
 80099c2:	2b00      	cmp	r3, #0
 80099c4:	f000 8088 	beq.w	8009ad8 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 80099c8:	687b      	ldr	r3, [r7, #4]
 80099ca:	2204      	movs	r2, #4
 80099cc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	4a7a      	ldr	r2, [pc, #488]	@ (8009bc0 <HAL_DMA_IRQHandler+0xa08>)
 80099d6:	4293      	cmp	r3, r2
 80099d8:	d04a      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	681b      	ldr	r3, [r3, #0]
 80099de:	4a79      	ldr	r2, [pc, #484]	@ (8009bc4 <HAL_DMA_IRQHandler+0xa0c>)
 80099e0:	4293      	cmp	r3, r2
 80099e2:	d045      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	681b      	ldr	r3, [r3, #0]
 80099e8:	4a77      	ldr	r2, [pc, #476]	@ (8009bc8 <HAL_DMA_IRQHandler+0xa10>)
 80099ea:	4293      	cmp	r3, r2
 80099ec:	d040      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 80099ee:	687b      	ldr	r3, [r7, #4]
 80099f0:	681b      	ldr	r3, [r3, #0]
 80099f2:	4a76      	ldr	r2, [pc, #472]	@ (8009bcc <HAL_DMA_IRQHandler+0xa14>)
 80099f4:	4293      	cmp	r3, r2
 80099f6:	d03b      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	681b      	ldr	r3, [r3, #0]
 80099fc:	4a74      	ldr	r2, [pc, #464]	@ (8009bd0 <HAL_DMA_IRQHandler+0xa18>)
 80099fe:	4293      	cmp	r3, r2
 8009a00:	d036      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a02:	687b      	ldr	r3, [r7, #4]
 8009a04:	681b      	ldr	r3, [r3, #0]
 8009a06:	4a73      	ldr	r2, [pc, #460]	@ (8009bd4 <HAL_DMA_IRQHandler+0xa1c>)
 8009a08:	4293      	cmp	r3, r2
 8009a0a:	d031      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	681b      	ldr	r3, [r3, #0]
 8009a10:	4a71      	ldr	r2, [pc, #452]	@ (8009bd8 <HAL_DMA_IRQHandler+0xa20>)
 8009a12:	4293      	cmp	r3, r2
 8009a14:	d02c      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	4a70      	ldr	r2, [pc, #448]	@ (8009bdc <HAL_DMA_IRQHandler+0xa24>)
 8009a1c:	4293      	cmp	r3, r2
 8009a1e:	d027      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a20:	687b      	ldr	r3, [r7, #4]
 8009a22:	681b      	ldr	r3, [r3, #0]
 8009a24:	4a6e      	ldr	r2, [pc, #440]	@ (8009be0 <HAL_DMA_IRQHandler+0xa28>)
 8009a26:	4293      	cmp	r3, r2
 8009a28:	d022      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	4a6d      	ldr	r2, [pc, #436]	@ (8009be4 <HAL_DMA_IRQHandler+0xa2c>)
 8009a30:	4293      	cmp	r3, r2
 8009a32:	d01d      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a34:	687b      	ldr	r3, [r7, #4]
 8009a36:	681b      	ldr	r3, [r3, #0]
 8009a38:	4a6b      	ldr	r2, [pc, #428]	@ (8009be8 <HAL_DMA_IRQHandler+0xa30>)
 8009a3a:	4293      	cmp	r3, r2
 8009a3c:	d018      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	681b      	ldr	r3, [r3, #0]
 8009a42:	4a6a      	ldr	r2, [pc, #424]	@ (8009bec <HAL_DMA_IRQHandler+0xa34>)
 8009a44:	4293      	cmp	r3, r2
 8009a46:	d013      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	4a68      	ldr	r2, [pc, #416]	@ (8009bf0 <HAL_DMA_IRQHandler+0xa38>)
 8009a4e:	4293      	cmp	r3, r2
 8009a50:	d00e      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	4a67      	ldr	r2, [pc, #412]	@ (8009bf4 <HAL_DMA_IRQHandler+0xa3c>)
 8009a58:	4293      	cmp	r3, r2
 8009a5a:	d009      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	4a65      	ldr	r2, [pc, #404]	@ (8009bf8 <HAL_DMA_IRQHandler+0xa40>)
 8009a62:	4293      	cmp	r3, r2
 8009a64:	d004      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x8b8>
 8009a66:	687b      	ldr	r3, [r7, #4]
 8009a68:	681b      	ldr	r3, [r3, #0]
 8009a6a:	4a64      	ldr	r2, [pc, #400]	@ (8009bfc <HAL_DMA_IRQHandler+0xa44>)
 8009a6c:	4293      	cmp	r3, r2
 8009a6e:	d108      	bne.n	8009a82 <HAL_DMA_IRQHandler+0x8ca>
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681a      	ldr	r2, [r3, #0]
 8009a76:	687b      	ldr	r3, [r7, #4]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	f022 0201 	bic.w	r2, r2, #1
 8009a7e:	601a      	str	r2, [r3, #0]
 8009a80:	e007      	b.n	8009a92 <HAL_DMA_IRQHandler+0x8da>
 8009a82:	687b      	ldr	r3, [r7, #4]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	681a      	ldr	r2, [r3, #0]
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	f022 0201 	bic.w	r2, r2, #1
 8009a90:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	3301      	adds	r3, #1
 8009a96:	60fb      	str	r3, [r7, #12]
 8009a98:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009a9a:	429a      	cmp	r2, r3
 8009a9c:	d307      	bcc.n	8009aae <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	681b      	ldr	r3, [r3, #0]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	f003 0301 	and.w	r3, r3, #1
 8009aa8:	2b00      	cmp	r3, #0
 8009aaa:	d1f2      	bne.n	8009a92 <HAL_DMA_IRQHandler+0x8da>
 8009aac:	e000      	b.n	8009ab0 <HAL_DMA_IRQHandler+0x8f8>
            break;
 8009aae:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	681b      	ldr	r3, [r3, #0]
 8009ab6:	f003 0301 	and.w	r3, r3, #1
 8009aba:	2b00      	cmp	r3, #0
 8009abc:	d004      	beq.n	8009ac8 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	2203      	movs	r2, #3
 8009ac2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8009ac6:	e003      	b.n	8009ad0 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	2201      	movs	r2, #1
 8009acc:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	2200      	movs	r2, #0
 8009ad4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8009ad8:	687b      	ldr	r3, [r7, #4]
 8009ada:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009adc:	2b00      	cmp	r3, #0
 8009ade:	f000 8272 	beq.w	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009ae2:	687b      	ldr	r3, [r7, #4]
 8009ae4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009ae6:	6878      	ldr	r0, [r7, #4]
 8009ae8:	4798      	blx	r3
 8009aea:	e26c      	b.n	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 8009aec:	687b      	ldr	r3, [r7, #4]
 8009aee:	681b      	ldr	r3, [r3, #0]
 8009af0:	4a43      	ldr	r2, [pc, #268]	@ (8009c00 <HAL_DMA_IRQHandler+0xa48>)
 8009af2:	4293      	cmp	r3, r2
 8009af4:	d022      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	681b      	ldr	r3, [r3, #0]
 8009afa:	4a42      	ldr	r2, [pc, #264]	@ (8009c04 <HAL_DMA_IRQHandler+0xa4c>)
 8009afc:	4293      	cmp	r3, r2
 8009afe:	d01d      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	4a40      	ldr	r2, [pc, #256]	@ (8009c08 <HAL_DMA_IRQHandler+0xa50>)
 8009b06:	4293      	cmp	r3, r2
 8009b08:	d018      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009b0a:	687b      	ldr	r3, [r7, #4]
 8009b0c:	681b      	ldr	r3, [r3, #0]
 8009b0e:	4a3f      	ldr	r2, [pc, #252]	@ (8009c0c <HAL_DMA_IRQHandler+0xa54>)
 8009b10:	4293      	cmp	r3, r2
 8009b12:	d013      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009b14:	687b      	ldr	r3, [r7, #4]
 8009b16:	681b      	ldr	r3, [r3, #0]
 8009b18:	4a3d      	ldr	r2, [pc, #244]	@ (8009c10 <HAL_DMA_IRQHandler+0xa58>)
 8009b1a:	4293      	cmp	r3, r2
 8009b1c:	d00e      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	4a3c      	ldr	r2, [pc, #240]	@ (8009c14 <HAL_DMA_IRQHandler+0xa5c>)
 8009b24:	4293      	cmp	r3, r2
 8009b26:	d009      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	4a3a      	ldr	r2, [pc, #232]	@ (8009c18 <HAL_DMA_IRQHandler+0xa60>)
 8009b2e:	4293      	cmp	r3, r2
 8009b30:	d004      	beq.n	8009b3c <HAL_DMA_IRQHandler+0x984>
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	4a39      	ldr	r2, [pc, #228]	@ (8009c1c <HAL_DMA_IRQHandler+0xa64>)
 8009b38:	4293      	cmp	r3, r2
 8009b3a:	d101      	bne.n	8009b40 <HAL_DMA_IRQHandler+0x988>
 8009b3c:	2301      	movs	r3, #1
 8009b3e:	e000      	b.n	8009b42 <HAL_DMA_IRQHandler+0x98a>
 8009b40:	2300      	movs	r3, #0
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	f000 823f 	beq.w	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8009b48:	687b      	ldr	r3, [r7, #4]
 8009b4a:	681b      	ldr	r3, [r3, #0]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b54:	f003 031f 	and.w	r3, r3, #31
 8009b58:	2204      	movs	r2, #4
 8009b5a:	409a      	lsls	r2, r3
 8009b5c:	697b      	ldr	r3, [r7, #20]
 8009b5e:	4013      	ands	r3, r2
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	f000 80cd 	beq.w	8009d00 <HAL_DMA_IRQHandler+0xb48>
 8009b66:	693b      	ldr	r3, [r7, #16]
 8009b68:	f003 0304 	and.w	r3, r3, #4
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	f000 80c7 	beq.w	8009d00 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009b76:	f003 031f 	and.w	r3, r3, #31
 8009b7a:	2204      	movs	r2, #4
 8009b7c:	409a      	lsls	r2, r3
 8009b7e:	69fb      	ldr	r3, [r7, #28]
 8009b80:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009b82:	693b      	ldr	r3, [r7, #16]
 8009b84:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009b88:	2b00      	cmp	r3, #0
 8009b8a:	d049      	beq.n	8009c20 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009b8c:	693b      	ldr	r3, [r7, #16]
 8009b8e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009b92:	2b00      	cmp	r3, #0
 8009b94:	d109      	bne.n	8009baa <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	f000 8210 	beq.w	8009fc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8009ba0:	687b      	ldr	r3, [r7, #4]
 8009ba2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8009ba4:	6878      	ldr	r0, [r7, #4]
 8009ba6:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009ba8:	e20a      	b.n	8009fc0 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8009baa:	687b      	ldr	r3, [r7, #4]
 8009bac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	f000 8206 	beq.w	8009fc0 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8009bb4:	687b      	ldr	r3, [r7, #4]
 8009bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009bb8:	6878      	ldr	r0, [r7, #4]
 8009bba:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009bbc:	e200      	b.n	8009fc0 <HAL_DMA_IRQHandler+0xe08>
 8009bbe:	bf00      	nop
 8009bc0:	40020010 	.word	0x40020010
 8009bc4:	40020028 	.word	0x40020028
 8009bc8:	40020040 	.word	0x40020040
 8009bcc:	40020058 	.word	0x40020058
 8009bd0:	40020070 	.word	0x40020070
 8009bd4:	40020088 	.word	0x40020088
 8009bd8:	400200a0 	.word	0x400200a0
 8009bdc:	400200b8 	.word	0x400200b8
 8009be0:	40020410 	.word	0x40020410
 8009be4:	40020428 	.word	0x40020428
 8009be8:	40020440 	.word	0x40020440
 8009bec:	40020458 	.word	0x40020458
 8009bf0:	40020470 	.word	0x40020470
 8009bf4:	40020488 	.word	0x40020488
 8009bf8:	400204a0 	.word	0x400204a0
 8009bfc:	400204b8 	.word	0x400204b8
 8009c00:	58025408 	.word	0x58025408
 8009c04:	5802541c 	.word	0x5802541c
 8009c08:	58025430 	.word	0x58025430
 8009c0c:	58025444 	.word	0x58025444
 8009c10:	58025458 	.word	0x58025458
 8009c14:	5802546c 	.word	0x5802546c
 8009c18:	58025480 	.word	0x58025480
 8009c1c:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009c20:	693b      	ldr	r3, [r7, #16]
 8009c22:	f003 0320 	and.w	r3, r3, #32
 8009c26:	2b00      	cmp	r3, #0
 8009c28:	d160      	bne.n	8009cec <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	4a7f      	ldr	r2, [pc, #508]	@ (8009e2c <HAL_DMA_IRQHandler+0xc74>)
 8009c30:	4293      	cmp	r3, r2
 8009c32:	d04a      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	4a7d      	ldr	r2, [pc, #500]	@ (8009e30 <HAL_DMA_IRQHandler+0xc78>)
 8009c3a:	4293      	cmp	r3, r2
 8009c3c:	d045      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c3e:	687b      	ldr	r3, [r7, #4]
 8009c40:	681b      	ldr	r3, [r3, #0]
 8009c42:	4a7c      	ldr	r2, [pc, #496]	@ (8009e34 <HAL_DMA_IRQHandler+0xc7c>)
 8009c44:	4293      	cmp	r3, r2
 8009c46:	d040      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	681b      	ldr	r3, [r3, #0]
 8009c4c:	4a7a      	ldr	r2, [pc, #488]	@ (8009e38 <HAL_DMA_IRQHandler+0xc80>)
 8009c4e:	4293      	cmp	r3, r2
 8009c50:	d03b      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c52:	687b      	ldr	r3, [r7, #4]
 8009c54:	681b      	ldr	r3, [r3, #0]
 8009c56:	4a79      	ldr	r2, [pc, #484]	@ (8009e3c <HAL_DMA_IRQHandler+0xc84>)
 8009c58:	4293      	cmp	r3, r2
 8009c5a:	d036      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c5c:	687b      	ldr	r3, [r7, #4]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	4a77      	ldr	r2, [pc, #476]	@ (8009e40 <HAL_DMA_IRQHandler+0xc88>)
 8009c62:	4293      	cmp	r3, r2
 8009c64:	d031      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c66:	687b      	ldr	r3, [r7, #4]
 8009c68:	681b      	ldr	r3, [r3, #0]
 8009c6a:	4a76      	ldr	r2, [pc, #472]	@ (8009e44 <HAL_DMA_IRQHandler+0xc8c>)
 8009c6c:	4293      	cmp	r3, r2
 8009c6e:	d02c      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	681b      	ldr	r3, [r3, #0]
 8009c74:	4a74      	ldr	r2, [pc, #464]	@ (8009e48 <HAL_DMA_IRQHandler+0xc90>)
 8009c76:	4293      	cmp	r3, r2
 8009c78:	d027      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	4a73      	ldr	r2, [pc, #460]	@ (8009e4c <HAL_DMA_IRQHandler+0xc94>)
 8009c80:	4293      	cmp	r3, r2
 8009c82:	d022      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	4a71      	ldr	r2, [pc, #452]	@ (8009e50 <HAL_DMA_IRQHandler+0xc98>)
 8009c8a:	4293      	cmp	r3, r2
 8009c8c:	d01d      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	4a70      	ldr	r2, [pc, #448]	@ (8009e54 <HAL_DMA_IRQHandler+0xc9c>)
 8009c94:	4293      	cmp	r3, r2
 8009c96:	d018      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009c98:	687b      	ldr	r3, [r7, #4]
 8009c9a:	681b      	ldr	r3, [r3, #0]
 8009c9c:	4a6e      	ldr	r2, [pc, #440]	@ (8009e58 <HAL_DMA_IRQHandler+0xca0>)
 8009c9e:	4293      	cmp	r3, r2
 8009ca0:	d013      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	681b      	ldr	r3, [r3, #0]
 8009ca6:	4a6d      	ldr	r2, [pc, #436]	@ (8009e5c <HAL_DMA_IRQHandler+0xca4>)
 8009ca8:	4293      	cmp	r3, r2
 8009caa:	d00e      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009cac:	687b      	ldr	r3, [r7, #4]
 8009cae:	681b      	ldr	r3, [r3, #0]
 8009cb0:	4a6b      	ldr	r2, [pc, #428]	@ (8009e60 <HAL_DMA_IRQHandler+0xca8>)
 8009cb2:	4293      	cmp	r3, r2
 8009cb4:	d009      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	681b      	ldr	r3, [r3, #0]
 8009cba:	4a6a      	ldr	r2, [pc, #424]	@ (8009e64 <HAL_DMA_IRQHandler+0xcac>)
 8009cbc:	4293      	cmp	r3, r2
 8009cbe:	d004      	beq.n	8009cca <HAL_DMA_IRQHandler+0xb12>
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	4a68      	ldr	r2, [pc, #416]	@ (8009e68 <HAL_DMA_IRQHandler+0xcb0>)
 8009cc6:	4293      	cmp	r3, r2
 8009cc8:	d108      	bne.n	8009cdc <HAL_DMA_IRQHandler+0xb24>
 8009cca:	687b      	ldr	r3, [r7, #4]
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	681a      	ldr	r2, [r3, #0]
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	f022 0208 	bic.w	r2, r2, #8
 8009cd8:	601a      	str	r2, [r3, #0]
 8009cda:	e007      	b.n	8009cec <HAL_DMA_IRQHandler+0xb34>
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	681b      	ldr	r3, [r3, #0]
 8009ce0:	681a      	ldr	r2, [r3, #0]
 8009ce2:	687b      	ldr	r3, [r7, #4]
 8009ce4:	681b      	ldr	r3, [r3, #0]
 8009ce6:	f022 0204 	bic.w	r2, r2, #4
 8009cea:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	f000 8165 	beq.w	8009fc0 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009cf6:	687b      	ldr	r3, [r7, #4]
 8009cf8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8009cfa:	6878      	ldr	r0, [r7, #4]
 8009cfc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009cfe:	e15f      	b.n	8009fc0 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 8009d00:	687b      	ldr	r3, [r7, #4]
 8009d02:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d04:	f003 031f 	and.w	r3, r3, #31
 8009d08:	2202      	movs	r2, #2
 8009d0a:	409a      	lsls	r2, r3
 8009d0c:	697b      	ldr	r3, [r7, #20]
 8009d0e:	4013      	ands	r3, r2
 8009d10:	2b00      	cmp	r3, #0
 8009d12:	f000 80c5 	beq.w	8009ea0 <HAL_DMA_IRQHandler+0xce8>
 8009d16:	693b      	ldr	r3, [r7, #16]
 8009d18:	f003 0302 	and.w	r3, r3, #2
 8009d1c:	2b00      	cmp	r3, #0
 8009d1e:	f000 80bf 	beq.w	8009ea0 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 8009d22:	687b      	ldr	r3, [r7, #4]
 8009d24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009d26:	f003 031f 	and.w	r3, r3, #31
 8009d2a:	2202      	movs	r2, #2
 8009d2c:	409a      	lsls	r2, r3
 8009d2e:	69fb      	ldr	r3, [r7, #28]
 8009d30:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d32:	693b      	ldr	r3, [r7, #16]
 8009d34:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d018      	beq.n	8009d6e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 8009d3c:	693b      	ldr	r3, [r7, #16]
 8009d3e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d109      	bne.n	8009d5a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	f000 813a 	beq.w	8009fc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8009d50:	687b      	ldr	r3, [r7, #4]
 8009d52:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8009d54:	6878      	ldr	r0, [r7, #4]
 8009d56:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d58:	e134      	b.n	8009fc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d5e:	2b00      	cmp	r3, #0
 8009d60:	f000 8130 	beq.w	8009fc4 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009d68:	6878      	ldr	r0, [r7, #4]
 8009d6a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009d6c:	e12a      	b.n	8009fc4 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 8009d6e:	693b      	ldr	r3, [r7, #16]
 8009d70:	f003 0320 	and.w	r3, r3, #32
 8009d74:	2b00      	cmp	r3, #0
 8009d76:	f040 8089 	bne.w	8009e8c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8009d7a:	687b      	ldr	r3, [r7, #4]
 8009d7c:	681b      	ldr	r3, [r3, #0]
 8009d7e:	4a2b      	ldr	r2, [pc, #172]	@ (8009e2c <HAL_DMA_IRQHandler+0xc74>)
 8009d80:	4293      	cmp	r3, r2
 8009d82:	d04a      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009d84:	687b      	ldr	r3, [r7, #4]
 8009d86:	681b      	ldr	r3, [r3, #0]
 8009d88:	4a29      	ldr	r2, [pc, #164]	@ (8009e30 <HAL_DMA_IRQHandler+0xc78>)
 8009d8a:	4293      	cmp	r3, r2
 8009d8c:	d045      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	4a28      	ldr	r2, [pc, #160]	@ (8009e34 <HAL_DMA_IRQHandler+0xc7c>)
 8009d94:	4293      	cmp	r3, r2
 8009d96:	d040      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	681b      	ldr	r3, [r3, #0]
 8009d9c:	4a26      	ldr	r2, [pc, #152]	@ (8009e38 <HAL_DMA_IRQHandler+0xc80>)
 8009d9e:	4293      	cmp	r3, r2
 8009da0:	d03b      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	4a25      	ldr	r2, [pc, #148]	@ (8009e3c <HAL_DMA_IRQHandler+0xc84>)
 8009da8:	4293      	cmp	r3, r2
 8009daa:	d036      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009dac:	687b      	ldr	r3, [r7, #4]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	4a23      	ldr	r2, [pc, #140]	@ (8009e40 <HAL_DMA_IRQHandler+0xc88>)
 8009db2:	4293      	cmp	r3, r2
 8009db4:	d031      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	4a22      	ldr	r2, [pc, #136]	@ (8009e44 <HAL_DMA_IRQHandler+0xc8c>)
 8009dbc:	4293      	cmp	r3, r2
 8009dbe:	d02c      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	681b      	ldr	r3, [r3, #0]
 8009dc4:	4a20      	ldr	r2, [pc, #128]	@ (8009e48 <HAL_DMA_IRQHandler+0xc90>)
 8009dc6:	4293      	cmp	r3, r2
 8009dc8:	d027      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009dca:	687b      	ldr	r3, [r7, #4]
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	4a1f      	ldr	r2, [pc, #124]	@ (8009e4c <HAL_DMA_IRQHandler+0xc94>)
 8009dd0:	4293      	cmp	r3, r2
 8009dd2:	d022      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	681b      	ldr	r3, [r3, #0]
 8009dd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009e50 <HAL_DMA_IRQHandler+0xc98>)
 8009dda:	4293      	cmp	r3, r2
 8009ddc:	d01d      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	681b      	ldr	r3, [r3, #0]
 8009de2:	4a1c      	ldr	r2, [pc, #112]	@ (8009e54 <HAL_DMA_IRQHandler+0xc9c>)
 8009de4:	4293      	cmp	r3, r2
 8009de6:	d018      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009de8:	687b      	ldr	r3, [r7, #4]
 8009dea:	681b      	ldr	r3, [r3, #0]
 8009dec:	4a1a      	ldr	r2, [pc, #104]	@ (8009e58 <HAL_DMA_IRQHandler+0xca0>)
 8009dee:	4293      	cmp	r3, r2
 8009df0:	d013      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	681b      	ldr	r3, [r3, #0]
 8009df6:	4a19      	ldr	r2, [pc, #100]	@ (8009e5c <HAL_DMA_IRQHandler+0xca4>)
 8009df8:	4293      	cmp	r3, r2
 8009dfa:	d00e      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	681b      	ldr	r3, [r3, #0]
 8009e00:	4a17      	ldr	r2, [pc, #92]	@ (8009e60 <HAL_DMA_IRQHandler+0xca8>)
 8009e02:	4293      	cmp	r3, r2
 8009e04:	d009      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	4a16      	ldr	r2, [pc, #88]	@ (8009e64 <HAL_DMA_IRQHandler+0xcac>)
 8009e0c:	4293      	cmp	r3, r2
 8009e0e:	d004      	beq.n	8009e1a <HAL_DMA_IRQHandler+0xc62>
 8009e10:	687b      	ldr	r3, [r7, #4]
 8009e12:	681b      	ldr	r3, [r3, #0]
 8009e14:	4a14      	ldr	r2, [pc, #80]	@ (8009e68 <HAL_DMA_IRQHandler+0xcb0>)
 8009e16:	4293      	cmp	r3, r2
 8009e18:	d128      	bne.n	8009e6c <HAL_DMA_IRQHandler+0xcb4>
 8009e1a:	687b      	ldr	r3, [r7, #4]
 8009e1c:	681b      	ldr	r3, [r3, #0]
 8009e1e:	681a      	ldr	r2, [r3, #0]
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	681b      	ldr	r3, [r3, #0]
 8009e24:	f022 0214 	bic.w	r2, r2, #20
 8009e28:	601a      	str	r2, [r3, #0]
 8009e2a:	e027      	b.n	8009e7c <HAL_DMA_IRQHandler+0xcc4>
 8009e2c:	40020010 	.word	0x40020010
 8009e30:	40020028 	.word	0x40020028
 8009e34:	40020040 	.word	0x40020040
 8009e38:	40020058 	.word	0x40020058
 8009e3c:	40020070 	.word	0x40020070
 8009e40:	40020088 	.word	0x40020088
 8009e44:	400200a0 	.word	0x400200a0
 8009e48:	400200b8 	.word	0x400200b8
 8009e4c:	40020410 	.word	0x40020410
 8009e50:	40020428 	.word	0x40020428
 8009e54:	40020440 	.word	0x40020440
 8009e58:	40020458 	.word	0x40020458
 8009e5c:	40020470 	.word	0x40020470
 8009e60:	40020488 	.word	0x40020488
 8009e64:	400204a0 	.word	0x400204a0
 8009e68:	400204b8 	.word	0x400204b8
 8009e6c:	687b      	ldr	r3, [r7, #4]
 8009e6e:	681b      	ldr	r3, [r3, #0]
 8009e70:	681a      	ldr	r2, [r3, #0]
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	681b      	ldr	r3, [r3, #0]
 8009e76:	f022 020a 	bic.w	r2, r2, #10
 8009e7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	2201      	movs	r2, #1
 8009e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009e84:	687b      	ldr	r3, [r7, #4]
 8009e86:	2200      	movs	r2, #0
 8009e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e90:	2b00      	cmp	r3, #0
 8009e92:	f000 8097 	beq.w	8009fc4 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009e96:	687b      	ldr	r3, [r7, #4]
 8009e98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e9a:	6878      	ldr	r0, [r7, #4]
 8009e9c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009e9e:	e091      	b.n	8009fc4 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009ea4:	f003 031f 	and.w	r3, r3, #31
 8009ea8:	2208      	movs	r2, #8
 8009eaa:	409a      	lsls	r2, r3
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	4013      	ands	r3, r2
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	f000 8088 	beq.w	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
 8009eb6:	693b      	ldr	r3, [r7, #16]
 8009eb8:	f003 0308 	and.w	r3, r3, #8
 8009ebc:	2b00      	cmp	r3, #0
 8009ebe:	f000 8082 	beq.w	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8009ec2:	687b      	ldr	r3, [r7, #4]
 8009ec4:	681b      	ldr	r3, [r3, #0]
 8009ec6:	4a41      	ldr	r2, [pc, #260]	@ (8009fcc <HAL_DMA_IRQHandler+0xe14>)
 8009ec8:	4293      	cmp	r3, r2
 8009eca:	d04a      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	681b      	ldr	r3, [r3, #0]
 8009ed0:	4a3f      	ldr	r2, [pc, #252]	@ (8009fd0 <HAL_DMA_IRQHandler+0xe18>)
 8009ed2:	4293      	cmp	r3, r2
 8009ed4:	d045      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	4a3e      	ldr	r2, [pc, #248]	@ (8009fd4 <HAL_DMA_IRQHandler+0xe1c>)
 8009edc:	4293      	cmp	r3, r2
 8009ede:	d040      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009ee0:	687b      	ldr	r3, [r7, #4]
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	4a3c      	ldr	r2, [pc, #240]	@ (8009fd8 <HAL_DMA_IRQHandler+0xe20>)
 8009ee6:	4293      	cmp	r3, r2
 8009ee8:	d03b      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009eea:	687b      	ldr	r3, [r7, #4]
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	4a3b      	ldr	r2, [pc, #236]	@ (8009fdc <HAL_DMA_IRQHandler+0xe24>)
 8009ef0:	4293      	cmp	r3, r2
 8009ef2:	d036      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	4a39      	ldr	r2, [pc, #228]	@ (8009fe0 <HAL_DMA_IRQHandler+0xe28>)
 8009efa:	4293      	cmp	r3, r2
 8009efc:	d031      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	4a38      	ldr	r2, [pc, #224]	@ (8009fe4 <HAL_DMA_IRQHandler+0xe2c>)
 8009f04:	4293      	cmp	r3, r2
 8009f06:	d02c      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	4a36      	ldr	r2, [pc, #216]	@ (8009fe8 <HAL_DMA_IRQHandler+0xe30>)
 8009f0e:	4293      	cmp	r3, r2
 8009f10:	d027      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	681b      	ldr	r3, [r3, #0]
 8009f16:	4a35      	ldr	r2, [pc, #212]	@ (8009fec <HAL_DMA_IRQHandler+0xe34>)
 8009f18:	4293      	cmp	r3, r2
 8009f1a:	d022      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f1c:	687b      	ldr	r3, [r7, #4]
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	4a33      	ldr	r2, [pc, #204]	@ (8009ff0 <HAL_DMA_IRQHandler+0xe38>)
 8009f22:	4293      	cmp	r3, r2
 8009f24:	d01d      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f26:	687b      	ldr	r3, [r7, #4]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	4a32      	ldr	r2, [pc, #200]	@ (8009ff4 <HAL_DMA_IRQHandler+0xe3c>)
 8009f2c:	4293      	cmp	r3, r2
 8009f2e:	d018      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	4a30      	ldr	r2, [pc, #192]	@ (8009ff8 <HAL_DMA_IRQHandler+0xe40>)
 8009f36:	4293      	cmp	r3, r2
 8009f38:	d013      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f3a:	687b      	ldr	r3, [r7, #4]
 8009f3c:	681b      	ldr	r3, [r3, #0]
 8009f3e:	4a2f      	ldr	r2, [pc, #188]	@ (8009ffc <HAL_DMA_IRQHandler+0xe44>)
 8009f40:	4293      	cmp	r3, r2
 8009f42:	d00e      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f44:	687b      	ldr	r3, [r7, #4]
 8009f46:	681b      	ldr	r3, [r3, #0]
 8009f48:	4a2d      	ldr	r2, [pc, #180]	@ (800a000 <HAL_DMA_IRQHandler+0xe48>)
 8009f4a:	4293      	cmp	r3, r2
 8009f4c:	d009      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f4e:	687b      	ldr	r3, [r7, #4]
 8009f50:	681b      	ldr	r3, [r3, #0]
 8009f52:	4a2c      	ldr	r2, [pc, #176]	@ (800a004 <HAL_DMA_IRQHandler+0xe4c>)
 8009f54:	4293      	cmp	r3, r2
 8009f56:	d004      	beq.n	8009f62 <HAL_DMA_IRQHandler+0xdaa>
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	681b      	ldr	r3, [r3, #0]
 8009f5c:	4a2a      	ldr	r2, [pc, #168]	@ (800a008 <HAL_DMA_IRQHandler+0xe50>)
 8009f5e:	4293      	cmp	r3, r2
 8009f60:	d108      	bne.n	8009f74 <HAL_DMA_IRQHandler+0xdbc>
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	681a      	ldr	r2, [r3, #0]
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	f022 021c 	bic.w	r2, r2, #28
 8009f70:	601a      	str	r2, [r3, #0]
 8009f72:	e007      	b.n	8009f84 <HAL_DMA_IRQHandler+0xdcc>
 8009f74:	687b      	ldr	r3, [r7, #4]
 8009f76:	681b      	ldr	r3, [r3, #0]
 8009f78:	681a      	ldr	r2, [r3, #0]
 8009f7a:	687b      	ldr	r3, [r7, #4]
 8009f7c:	681b      	ldr	r3, [r3, #0]
 8009f7e:	f022 020e 	bic.w	r2, r2, #14
 8009f82:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8009f88:	f003 031f 	and.w	r3, r3, #31
 8009f8c:	2201      	movs	r2, #1
 8009f8e:	409a      	lsls	r2, r3
 8009f90:	69fb      	ldr	r3, [r7, #28]
 8009f92:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8009f94:	687b      	ldr	r3, [r7, #4]
 8009f96:	2201      	movs	r2, #1
 8009f98:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2201      	movs	r2, #1
 8009f9e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009fa2:	687b      	ldr	r3, [r7, #4]
 8009fa4:	2200      	movs	r2, #0
 8009fa6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fae:	2b00      	cmp	r3, #0
 8009fb0:	d009      	beq.n	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009fb6:	6878      	ldr	r0, [r7, #4]
 8009fb8:	4798      	blx	r3
 8009fba:	e004      	b.n	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
          return;
 8009fbc:	bf00      	nop
 8009fbe:	e002      	b.n	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009fc0:	bf00      	nop
 8009fc2:	e000      	b.n	8009fc6 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8009fc4:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8009fc6:	3728      	adds	r7, #40	@ 0x28
 8009fc8:	46bd      	mov	sp, r7
 8009fca:	bd80      	pop	{r7, pc}
 8009fcc:	40020010 	.word	0x40020010
 8009fd0:	40020028 	.word	0x40020028
 8009fd4:	40020040 	.word	0x40020040
 8009fd8:	40020058 	.word	0x40020058
 8009fdc:	40020070 	.word	0x40020070
 8009fe0:	40020088 	.word	0x40020088
 8009fe4:	400200a0 	.word	0x400200a0
 8009fe8:	400200b8 	.word	0x400200b8
 8009fec:	40020410 	.word	0x40020410
 8009ff0:	40020428 	.word	0x40020428
 8009ff4:	40020440 	.word	0x40020440
 8009ff8:	40020458 	.word	0x40020458
 8009ffc:	40020470 	.word	0x40020470
 800a000:	40020488 	.word	0x40020488
 800a004:	400204a0 	.word	0x400204a0
 800a008:	400204b8 	.word	0x400204b8

0800a00c <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 800a00c:	b480      	push	{r7}
 800a00e:	b083      	sub	sp, #12
 800a010:	af00      	add	r7, sp, #0
 800a012:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 800a018:	4618      	mov	r0, r3
 800a01a:	370c      	adds	r7, #12
 800a01c:	46bd      	mov	sp, r7
 800a01e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a022:	4770      	bx	lr

0800a024 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800a024:	b480      	push	{r7}
 800a026:	b087      	sub	sp, #28
 800a028:	af00      	add	r7, sp, #0
 800a02a:	60f8      	str	r0, [r7, #12]
 800a02c:	60b9      	str	r1, [r7, #8]
 800a02e:	607a      	str	r2, [r7, #4]
 800a030:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800a032:	68fb      	ldr	r3, [r7, #12]
 800a034:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a036:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 800a038:	68fb      	ldr	r3, [r7, #12]
 800a03a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800a03c:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	4a7f      	ldr	r2, [pc, #508]	@ (800a240 <DMA_SetConfig+0x21c>)
 800a044:	4293      	cmp	r3, r2
 800a046:	d072      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a048:	68fb      	ldr	r3, [r7, #12]
 800a04a:	681b      	ldr	r3, [r3, #0]
 800a04c:	4a7d      	ldr	r2, [pc, #500]	@ (800a244 <DMA_SetConfig+0x220>)
 800a04e:	4293      	cmp	r3, r2
 800a050:	d06d      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a052:	68fb      	ldr	r3, [r7, #12]
 800a054:	681b      	ldr	r3, [r3, #0]
 800a056:	4a7c      	ldr	r2, [pc, #496]	@ (800a248 <DMA_SetConfig+0x224>)
 800a058:	4293      	cmp	r3, r2
 800a05a:	d068      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	4a7a      	ldr	r2, [pc, #488]	@ (800a24c <DMA_SetConfig+0x228>)
 800a062:	4293      	cmp	r3, r2
 800a064:	d063      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a066:	68fb      	ldr	r3, [r7, #12]
 800a068:	681b      	ldr	r3, [r3, #0]
 800a06a:	4a79      	ldr	r2, [pc, #484]	@ (800a250 <DMA_SetConfig+0x22c>)
 800a06c:	4293      	cmp	r3, r2
 800a06e:	d05e      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	681b      	ldr	r3, [r3, #0]
 800a074:	4a77      	ldr	r2, [pc, #476]	@ (800a254 <DMA_SetConfig+0x230>)
 800a076:	4293      	cmp	r3, r2
 800a078:	d059      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a07a:	68fb      	ldr	r3, [r7, #12]
 800a07c:	681b      	ldr	r3, [r3, #0]
 800a07e:	4a76      	ldr	r2, [pc, #472]	@ (800a258 <DMA_SetConfig+0x234>)
 800a080:	4293      	cmp	r3, r2
 800a082:	d054      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a084:	68fb      	ldr	r3, [r7, #12]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	4a74      	ldr	r2, [pc, #464]	@ (800a25c <DMA_SetConfig+0x238>)
 800a08a:	4293      	cmp	r3, r2
 800a08c:	d04f      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	681b      	ldr	r3, [r3, #0]
 800a092:	4a73      	ldr	r2, [pc, #460]	@ (800a260 <DMA_SetConfig+0x23c>)
 800a094:	4293      	cmp	r3, r2
 800a096:	d04a      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	4a71      	ldr	r2, [pc, #452]	@ (800a264 <DMA_SetConfig+0x240>)
 800a09e:	4293      	cmp	r3, r2
 800a0a0:	d045      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0a2:	68fb      	ldr	r3, [r7, #12]
 800a0a4:	681b      	ldr	r3, [r3, #0]
 800a0a6:	4a70      	ldr	r2, [pc, #448]	@ (800a268 <DMA_SetConfig+0x244>)
 800a0a8:	4293      	cmp	r3, r2
 800a0aa:	d040      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	681b      	ldr	r3, [r3, #0]
 800a0b0:	4a6e      	ldr	r2, [pc, #440]	@ (800a26c <DMA_SetConfig+0x248>)
 800a0b2:	4293      	cmp	r3, r2
 800a0b4:	d03b      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	681b      	ldr	r3, [r3, #0]
 800a0ba:	4a6d      	ldr	r2, [pc, #436]	@ (800a270 <DMA_SetConfig+0x24c>)
 800a0bc:	4293      	cmp	r3, r2
 800a0be:	d036      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0c0:	68fb      	ldr	r3, [r7, #12]
 800a0c2:	681b      	ldr	r3, [r3, #0]
 800a0c4:	4a6b      	ldr	r2, [pc, #428]	@ (800a274 <DMA_SetConfig+0x250>)
 800a0c6:	4293      	cmp	r3, r2
 800a0c8:	d031      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	681b      	ldr	r3, [r3, #0]
 800a0ce:	4a6a      	ldr	r2, [pc, #424]	@ (800a278 <DMA_SetConfig+0x254>)
 800a0d0:	4293      	cmp	r3, r2
 800a0d2:	d02c      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0d4:	68fb      	ldr	r3, [r7, #12]
 800a0d6:	681b      	ldr	r3, [r3, #0]
 800a0d8:	4a68      	ldr	r2, [pc, #416]	@ (800a27c <DMA_SetConfig+0x258>)
 800a0da:	4293      	cmp	r3, r2
 800a0dc:	d027      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	4a67      	ldr	r2, [pc, #412]	@ (800a280 <DMA_SetConfig+0x25c>)
 800a0e4:	4293      	cmp	r3, r2
 800a0e6:	d022      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0e8:	68fb      	ldr	r3, [r7, #12]
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	4a65      	ldr	r2, [pc, #404]	@ (800a284 <DMA_SetConfig+0x260>)
 800a0ee:	4293      	cmp	r3, r2
 800a0f0:	d01d      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	681b      	ldr	r3, [r3, #0]
 800a0f6:	4a64      	ldr	r2, [pc, #400]	@ (800a288 <DMA_SetConfig+0x264>)
 800a0f8:	4293      	cmp	r3, r2
 800a0fa:	d018      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a0fc:	68fb      	ldr	r3, [r7, #12]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	4a62      	ldr	r2, [pc, #392]	@ (800a28c <DMA_SetConfig+0x268>)
 800a102:	4293      	cmp	r3, r2
 800a104:	d013      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a106:	68fb      	ldr	r3, [r7, #12]
 800a108:	681b      	ldr	r3, [r3, #0]
 800a10a:	4a61      	ldr	r2, [pc, #388]	@ (800a290 <DMA_SetConfig+0x26c>)
 800a10c:	4293      	cmp	r3, r2
 800a10e:	d00e      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a110:	68fb      	ldr	r3, [r7, #12]
 800a112:	681b      	ldr	r3, [r3, #0]
 800a114:	4a5f      	ldr	r2, [pc, #380]	@ (800a294 <DMA_SetConfig+0x270>)
 800a116:	4293      	cmp	r3, r2
 800a118:	d009      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a11a:	68fb      	ldr	r3, [r7, #12]
 800a11c:	681b      	ldr	r3, [r3, #0]
 800a11e:	4a5e      	ldr	r2, [pc, #376]	@ (800a298 <DMA_SetConfig+0x274>)
 800a120:	4293      	cmp	r3, r2
 800a122:	d004      	beq.n	800a12e <DMA_SetConfig+0x10a>
 800a124:	68fb      	ldr	r3, [r7, #12]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	4a5c      	ldr	r2, [pc, #368]	@ (800a29c <DMA_SetConfig+0x278>)
 800a12a:	4293      	cmp	r3, r2
 800a12c:	d101      	bne.n	800a132 <DMA_SetConfig+0x10e>
 800a12e:	2301      	movs	r3, #1
 800a130:	e000      	b.n	800a134 <DMA_SetConfig+0x110>
 800a132:	2300      	movs	r3, #0
 800a134:	2b00      	cmp	r3, #0
 800a136:	d00d      	beq.n	800a154 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800a138:	68fb      	ldr	r3, [r7, #12]
 800a13a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800a13c:	68fa      	ldr	r2, [r7, #12]
 800a13e:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 800a140:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 800a142:	68fb      	ldr	r3, [r7, #12]
 800a144:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800a146:	2b00      	cmp	r3, #0
 800a148:	d004      	beq.n	800a154 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800a14a:	68fb      	ldr	r3, [r7, #12]
 800a14c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800a14e:	68fa      	ldr	r2, [r7, #12]
 800a150:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 800a152:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a154:	68fb      	ldr	r3, [r7, #12]
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	4a39      	ldr	r2, [pc, #228]	@ (800a240 <DMA_SetConfig+0x21c>)
 800a15a:	4293      	cmp	r3, r2
 800a15c:	d04a      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	4a38      	ldr	r2, [pc, #224]	@ (800a244 <DMA_SetConfig+0x220>)
 800a164:	4293      	cmp	r3, r2
 800a166:	d045      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a168:	68fb      	ldr	r3, [r7, #12]
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	4a36      	ldr	r2, [pc, #216]	@ (800a248 <DMA_SetConfig+0x224>)
 800a16e:	4293      	cmp	r3, r2
 800a170:	d040      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a172:	68fb      	ldr	r3, [r7, #12]
 800a174:	681b      	ldr	r3, [r3, #0]
 800a176:	4a35      	ldr	r2, [pc, #212]	@ (800a24c <DMA_SetConfig+0x228>)
 800a178:	4293      	cmp	r3, r2
 800a17a:	d03b      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	4a33      	ldr	r2, [pc, #204]	@ (800a250 <DMA_SetConfig+0x22c>)
 800a182:	4293      	cmp	r3, r2
 800a184:	d036      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a186:	68fb      	ldr	r3, [r7, #12]
 800a188:	681b      	ldr	r3, [r3, #0]
 800a18a:	4a32      	ldr	r2, [pc, #200]	@ (800a254 <DMA_SetConfig+0x230>)
 800a18c:	4293      	cmp	r3, r2
 800a18e:	d031      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a190:	68fb      	ldr	r3, [r7, #12]
 800a192:	681b      	ldr	r3, [r3, #0]
 800a194:	4a30      	ldr	r2, [pc, #192]	@ (800a258 <DMA_SetConfig+0x234>)
 800a196:	4293      	cmp	r3, r2
 800a198:	d02c      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a19a:	68fb      	ldr	r3, [r7, #12]
 800a19c:	681b      	ldr	r3, [r3, #0]
 800a19e:	4a2f      	ldr	r2, [pc, #188]	@ (800a25c <DMA_SetConfig+0x238>)
 800a1a0:	4293      	cmp	r3, r2
 800a1a2:	d027      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1a4:	68fb      	ldr	r3, [r7, #12]
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a2d      	ldr	r2, [pc, #180]	@ (800a260 <DMA_SetConfig+0x23c>)
 800a1aa:	4293      	cmp	r3, r2
 800a1ac:	d022      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	681b      	ldr	r3, [r3, #0]
 800a1b2:	4a2c      	ldr	r2, [pc, #176]	@ (800a264 <DMA_SetConfig+0x240>)
 800a1b4:	4293      	cmp	r3, r2
 800a1b6:	d01d      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1b8:	68fb      	ldr	r3, [r7, #12]
 800a1ba:	681b      	ldr	r3, [r3, #0]
 800a1bc:	4a2a      	ldr	r2, [pc, #168]	@ (800a268 <DMA_SetConfig+0x244>)
 800a1be:	4293      	cmp	r3, r2
 800a1c0:	d018      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1c2:	68fb      	ldr	r3, [r7, #12]
 800a1c4:	681b      	ldr	r3, [r3, #0]
 800a1c6:	4a29      	ldr	r2, [pc, #164]	@ (800a26c <DMA_SetConfig+0x248>)
 800a1c8:	4293      	cmp	r3, r2
 800a1ca:	d013      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1cc:	68fb      	ldr	r3, [r7, #12]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	4a27      	ldr	r2, [pc, #156]	@ (800a270 <DMA_SetConfig+0x24c>)
 800a1d2:	4293      	cmp	r3, r2
 800a1d4:	d00e      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	4a26      	ldr	r2, [pc, #152]	@ (800a274 <DMA_SetConfig+0x250>)
 800a1dc:	4293      	cmp	r3, r2
 800a1de:	d009      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	4a24      	ldr	r2, [pc, #144]	@ (800a278 <DMA_SetConfig+0x254>)
 800a1e6:	4293      	cmp	r3, r2
 800a1e8:	d004      	beq.n	800a1f4 <DMA_SetConfig+0x1d0>
 800a1ea:	68fb      	ldr	r3, [r7, #12]
 800a1ec:	681b      	ldr	r3, [r3, #0]
 800a1ee:	4a23      	ldr	r2, [pc, #140]	@ (800a27c <DMA_SetConfig+0x258>)
 800a1f0:	4293      	cmp	r3, r2
 800a1f2:	d101      	bne.n	800a1f8 <DMA_SetConfig+0x1d4>
 800a1f4:	2301      	movs	r3, #1
 800a1f6:	e000      	b.n	800a1fa <DMA_SetConfig+0x1d6>
 800a1f8:	2300      	movs	r3, #0
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d059      	beq.n	800a2b2 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a202:	f003 031f 	and.w	r3, r3, #31
 800a206:	223f      	movs	r2, #63	@ 0x3f
 800a208:	409a      	lsls	r2, r3
 800a20a:	697b      	ldr	r3, [r7, #20]
 800a20c:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800a20e:	68fb      	ldr	r3, [r7, #12]
 800a210:	681b      	ldr	r3, [r3, #0]
 800a212:	681a      	ldr	r2, [r3, #0]
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	681b      	ldr	r3, [r3, #0]
 800a218:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800a21c:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 800a21e:	68fb      	ldr	r3, [r7, #12]
 800a220:	681b      	ldr	r3, [r3, #0]
 800a222:	683a      	ldr	r2, [r7, #0]
 800a224:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	689b      	ldr	r3, [r3, #8]
 800a22a:	2b40      	cmp	r3, #64	@ 0x40
 800a22c:	d138      	bne.n	800a2a0 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 800a22e:	68fb      	ldr	r3, [r7, #12]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	687a      	ldr	r2, [r7, #4]
 800a234:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 800a236:	68fb      	ldr	r3, [r7, #12]
 800a238:	681b      	ldr	r3, [r3, #0]
 800a23a:	68ba      	ldr	r2, [r7, #8]
 800a23c:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 800a23e:	e086      	b.n	800a34e <DMA_SetConfig+0x32a>
 800a240:	40020010 	.word	0x40020010
 800a244:	40020028 	.word	0x40020028
 800a248:	40020040 	.word	0x40020040
 800a24c:	40020058 	.word	0x40020058
 800a250:	40020070 	.word	0x40020070
 800a254:	40020088 	.word	0x40020088
 800a258:	400200a0 	.word	0x400200a0
 800a25c:	400200b8 	.word	0x400200b8
 800a260:	40020410 	.word	0x40020410
 800a264:	40020428 	.word	0x40020428
 800a268:	40020440 	.word	0x40020440
 800a26c:	40020458 	.word	0x40020458
 800a270:	40020470 	.word	0x40020470
 800a274:	40020488 	.word	0x40020488
 800a278:	400204a0 	.word	0x400204a0
 800a27c:	400204b8 	.word	0x400204b8
 800a280:	58025408 	.word	0x58025408
 800a284:	5802541c 	.word	0x5802541c
 800a288:	58025430 	.word	0x58025430
 800a28c:	58025444 	.word	0x58025444
 800a290:	58025458 	.word	0x58025458
 800a294:	5802546c 	.word	0x5802546c
 800a298:	58025480 	.word	0x58025480
 800a29c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 800a2a0:	68fb      	ldr	r3, [r7, #12]
 800a2a2:	681b      	ldr	r3, [r3, #0]
 800a2a4:	68ba      	ldr	r2, [r7, #8]
 800a2a6:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 800a2a8:	68fb      	ldr	r3, [r7, #12]
 800a2aa:	681b      	ldr	r3, [r3, #0]
 800a2ac:	687a      	ldr	r2, [r7, #4]
 800a2ae:	60da      	str	r2, [r3, #12]
}
 800a2b0:	e04d      	b.n	800a34e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 800a2b2:	68fb      	ldr	r3, [r7, #12]
 800a2b4:	681b      	ldr	r3, [r3, #0]
 800a2b6:	4a29      	ldr	r2, [pc, #164]	@ (800a35c <DMA_SetConfig+0x338>)
 800a2b8:	4293      	cmp	r3, r2
 800a2ba:	d022      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	681b      	ldr	r3, [r3, #0]
 800a2c0:	4a27      	ldr	r2, [pc, #156]	@ (800a360 <DMA_SetConfig+0x33c>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d01d      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2c6:	68fb      	ldr	r3, [r7, #12]
 800a2c8:	681b      	ldr	r3, [r3, #0]
 800a2ca:	4a26      	ldr	r2, [pc, #152]	@ (800a364 <DMA_SetConfig+0x340>)
 800a2cc:	4293      	cmp	r3, r2
 800a2ce:	d018      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2d0:	68fb      	ldr	r3, [r7, #12]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	4a24      	ldr	r2, [pc, #144]	@ (800a368 <DMA_SetConfig+0x344>)
 800a2d6:	4293      	cmp	r3, r2
 800a2d8:	d013      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2da:	68fb      	ldr	r3, [r7, #12]
 800a2dc:	681b      	ldr	r3, [r3, #0]
 800a2de:	4a23      	ldr	r2, [pc, #140]	@ (800a36c <DMA_SetConfig+0x348>)
 800a2e0:	4293      	cmp	r3, r2
 800a2e2:	d00e      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2e4:	68fb      	ldr	r3, [r7, #12]
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	4a21      	ldr	r2, [pc, #132]	@ (800a370 <DMA_SetConfig+0x34c>)
 800a2ea:	4293      	cmp	r3, r2
 800a2ec:	d009      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	681b      	ldr	r3, [r3, #0]
 800a2f2:	4a20      	ldr	r2, [pc, #128]	@ (800a374 <DMA_SetConfig+0x350>)
 800a2f4:	4293      	cmp	r3, r2
 800a2f6:	d004      	beq.n	800a302 <DMA_SetConfig+0x2de>
 800a2f8:	68fb      	ldr	r3, [r7, #12]
 800a2fa:	681b      	ldr	r3, [r3, #0]
 800a2fc:	4a1e      	ldr	r2, [pc, #120]	@ (800a378 <DMA_SetConfig+0x354>)
 800a2fe:	4293      	cmp	r3, r2
 800a300:	d101      	bne.n	800a306 <DMA_SetConfig+0x2e2>
 800a302:	2301      	movs	r3, #1
 800a304:	e000      	b.n	800a308 <DMA_SetConfig+0x2e4>
 800a306:	2300      	movs	r3, #0
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d020      	beq.n	800a34e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800a310:	f003 031f 	and.w	r3, r3, #31
 800a314:	2201      	movs	r2, #1
 800a316:	409a      	lsls	r2, r3
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	683a      	ldr	r2, [r7, #0]
 800a322:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	689b      	ldr	r3, [r3, #8]
 800a328:	2b40      	cmp	r3, #64	@ 0x40
 800a32a:	d108      	bne.n	800a33e <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	687a      	ldr	r2, [r7, #4]
 800a332:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	681b      	ldr	r3, [r3, #0]
 800a338:	68ba      	ldr	r2, [r7, #8]
 800a33a:	60da      	str	r2, [r3, #12]
}
 800a33c:	e007      	b.n	800a34e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 800a33e:	68fb      	ldr	r3, [r7, #12]
 800a340:	681b      	ldr	r3, [r3, #0]
 800a342:	68ba      	ldr	r2, [r7, #8]
 800a344:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 800a346:	68fb      	ldr	r3, [r7, #12]
 800a348:	681b      	ldr	r3, [r3, #0]
 800a34a:	687a      	ldr	r2, [r7, #4]
 800a34c:	60da      	str	r2, [r3, #12]
}
 800a34e:	bf00      	nop
 800a350:	371c      	adds	r7, #28
 800a352:	46bd      	mov	sp, r7
 800a354:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a358:	4770      	bx	lr
 800a35a:	bf00      	nop
 800a35c:	58025408 	.word	0x58025408
 800a360:	5802541c 	.word	0x5802541c
 800a364:	58025430 	.word	0x58025430
 800a368:	58025444 	.word	0x58025444
 800a36c:	58025458 	.word	0x58025458
 800a370:	5802546c 	.word	0x5802546c
 800a374:	58025480 	.word	0x58025480
 800a378:	58025494 	.word	0x58025494

0800a37c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800a37c:	b480      	push	{r7}
 800a37e:	b085      	sub	sp, #20
 800a380:	af00      	add	r7, sp, #0
 800a382:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a384:	687b      	ldr	r3, [r7, #4]
 800a386:	681b      	ldr	r3, [r3, #0]
 800a388:	4a42      	ldr	r2, [pc, #264]	@ (800a494 <DMA_CalcBaseAndBitshift+0x118>)
 800a38a:	4293      	cmp	r3, r2
 800a38c:	d04a      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	681b      	ldr	r3, [r3, #0]
 800a392:	4a41      	ldr	r2, [pc, #260]	@ (800a498 <DMA_CalcBaseAndBitshift+0x11c>)
 800a394:	4293      	cmp	r3, r2
 800a396:	d045      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a398:	687b      	ldr	r3, [r7, #4]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	4a3f      	ldr	r2, [pc, #252]	@ (800a49c <DMA_CalcBaseAndBitshift+0x120>)
 800a39e:	4293      	cmp	r3, r2
 800a3a0:	d040      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3a2:	687b      	ldr	r3, [r7, #4]
 800a3a4:	681b      	ldr	r3, [r3, #0]
 800a3a6:	4a3e      	ldr	r2, [pc, #248]	@ (800a4a0 <DMA_CalcBaseAndBitshift+0x124>)
 800a3a8:	4293      	cmp	r3, r2
 800a3aa:	d03b      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3ac:	687b      	ldr	r3, [r7, #4]
 800a3ae:	681b      	ldr	r3, [r3, #0]
 800a3b0:	4a3c      	ldr	r2, [pc, #240]	@ (800a4a4 <DMA_CalcBaseAndBitshift+0x128>)
 800a3b2:	4293      	cmp	r3, r2
 800a3b4:	d036      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3b6:	687b      	ldr	r3, [r7, #4]
 800a3b8:	681b      	ldr	r3, [r3, #0]
 800a3ba:	4a3b      	ldr	r2, [pc, #236]	@ (800a4a8 <DMA_CalcBaseAndBitshift+0x12c>)
 800a3bc:	4293      	cmp	r3, r2
 800a3be:	d031      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3c0:	687b      	ldr	r3, [r7, #4]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	4a39      	ldr	r2, [pc, #228]	@ (800a4ac <DMA_CalcBaseAndBitshift+0x130>)
 800a3c6:	4293      	cmp	r3, r2
 800a3c8:	d02c      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3ca:	687b      	ldr	r3, [r7, #4]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	4a38      	ldr	r2, [pc, #224]	@ (800a4b0 <DMA_CalcBaseAndBitshift+0x134>)
 800a3d0:	4293      	cmp	r3, r2
 800a3d2:	d027      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	4a36      	ldr	r2, [pc, #216]	@ (800a4b4 <DMA_CalcBaseAndBitshift+0x138>)
 800a3da:	4293      	cmp	r3, r2
 800a3dc:	d022      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3de:	687b      	ldr	r3, [r7, #4]
 800a3e0:	681b      	ldr	r3, [r3, #0]
 800a3e2:	4a35      	ldr	r2, [pc, #212]	@ (800a4b8 <DMA_CalcBaseAndBitshift+0x13c>)
 800a3e4:	4293      	cmp	r3, r2
 800a3e6:	d01d      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	4a33      	ldr	r2, [pc, #204]	@ (800a4bc <DMA_CalcBaseAndBitshift+0x140>)
 800a3ee:	4293      	cmp	r3, r2
 800a3f0:	d018      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3f2:	687b      	ldr	r3, [r7, #4]
 800a3f4:	681b      	ldr	r3, [r3, #0]
 800a3f6:	4a32      	ldr	r2, [pc, #200]	@ (800a4c0 <DMA_CalcBaseAndBitshift+0x144>)
 800a3f8:	4293      	cmp	r3, r2
 800a3fa:	d013      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a3fc:	687b      	ldr	r3, [r7, #4]
 800a3fe:	681b      	ldr	r3, [r3, #0]
 800a400:	4a30      	ldr	r2, [pc, #192]	@ (800a4c4 <DMA_CalcBaseAndBitshift+0x148>)
 800a402:	4293      	cmp	r3, r2
 800a404:	d00e      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a406:	687b      	ldr	r3, [r7, #4]
 800a408:	681b      	ldr	r3, [r3, #0]
 800a40a:	4a2f      	ldr	r2, [pc, #188]	@ (800a4c8 <DMA_CalcBaseAndBitshift+0x14c>)
 800a40c:	4293      	cmp	r3, r2
 800a40e:	d009      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	681b      	ldr	r3, [r3, #0]
 800a414:	4a2d      	ldr	r2, [pc, #180]	@ (800a4cc <DMA_CalcBaseAndBitshift+0x150>)
 800a416:	4293      	cmp	r3, r2
 800a418:	d004      	beq.n	800a424 <DMA_CalcBaseAndBitshift+0xa8>
 800a41a:	687b      	ldr	r3, [r7, #4]
 800a41c:	681b      	ldr	r3, [r3, #0]
 800a41e:	4a2c      	ldr	r2, [pc, #176]	@ (800a4d0 <DMA_CalcBaseAndBitshift+0x154>)
 800a420:	4293      	cmp	r3, r2
 800a422:	d101      	bne.n	800a428 <DMA_CalcBaseAndBitshift+0xac>
 800a424:	2301      	movs	r3, #1
 800a426:	e000      	b.n	800a42a <DMA_CalcBaseAndBitshift+0xae>
 800a428:	2300      	movs	r3, #0
 800a42a:	2b00      	cmp	r3, #0
 800a42c:	d024      	beq.n	800a478 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a42e:	687b      	ldr	r3, [r7, #4]
 800a430:	681b      	ldr	r3, [r3, #0]
 800a432:	b2db      	uxtb	r3, r3
 800a434:	3b10      	subs	r3, #16
 800a436:	4a27      	ldr	r2, [pc, #156]	@ (800a4d4 <DMA_CalcBaseAndBitshift+0x158>)
 800a438:	fba2 2303 	umull	r2, r3, r2, r3
 800a43c:	091b      	lsrs	r3, r3, #4
 800a43e:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 800a440:	68fb      	ldr	r3, [r7, #12]
 800a442:	f003 0307 	and.w	r3, r3, #7
 800a446:	4a24      	ldr	r2, [pc, #144]	@ (800a4d8 <DMA_CalcBaseAndBitshift+0x15c>)
 800a448:	5cd3      	ldrb	r3, [r2, r3]
 800a44a:	461a      	mov	r2, r3
 800a44c:	687b      	ldr	r3, [r7, #4]
 800a44e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	2b03      	cmp	r3, #3
 800a454:	d908      	bls.n	800a468 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 800a456:	687b      	ldr	r3, [r7, #4]
 800a458:	681b      	ldr	r3, [r3, #0]
 800a45a:	461a      	mov	r2, r3
 800a45c:	4b1f      	ldr	r3, [pc, #124]	@ (800a4dc <DMA_CalcBaseAndBitshift+0x160>)
 800a45e:	4013      	ands	r3, r2
 800a460:	1d1a      	adds	r2, r3, #4
 800a462:	687b      	ldr	r3, [r7, #4]
 800a464:	659a      	str	r2, [r3, #88]	@ 0x58
 800a466:	e00d      	b.n	800a484 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	681b      	ldr	r3, [r3, #0]
 800a46c:	461a      	mov	r2, r3
 800a46e:	4b1b      	ldr	r3, [pc, #108]	@ (800a4dc <DMA_CalcBaseAndBitshift+0x160>)
 800a470:	4013      	ands	r3, r2
 800a472:	687a      	ldr	r2, [r7, #4]
 800a474:	6593      	str	r3, [r2, #88]	@ 0x58
 800a476:	e005      	b.n	800a484 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800a488:	4618      	mov	r0, r3
 800a48a:	3714      	adds	r7, #20
 800a48c:	46bd      	mov	sp, r7
 800a48e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a492:	4770      	bx	lr
 800a494:	40020010 	.word	0x40020010
 800a498:	40020028 	.word	0x40020028
 800a49c:	40020040 	.word	0x40020040
 800a4a0:	40020058 	.word	0x40020058
 800a4a4:	40020070 	.word	0x40020070
 800a4a8:	40020088 	.word	0x40020088
 800a4ac:	400200a0 	.word	0x400200a0
 800a4b0:	400200b8 	.word	0x400200b8
 800a4b4:	40020410 	.word	0x40020410
 800a4b8:	40020428 	.word	0x40020428
 800a4bc:	40020440 	.word	0x40020440
 800a4c0:	40020458 	.word	0x40020458
 800a4c4:	40020470 	.word	0x40020470
 800a4c8:	40020488 	.word	0x40020488
 800a4cc:	400204a0 	.word	0x400204a0
 800a4d0:	400204b8 	.word	0x400204b8
 800a4d4:	aaaaaaab 	.word	0xaaaaaaab
 800a4d8:	08028904 	.word	0x08028904
 800a4dc:	fffffc00 	.word	0xfffffc00

0800a4e0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 800a4e0:	b480      	push	{r7}
 800a4e2:	b085      	sub	sp, #20
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800a4e8:	2300      	movs	r3, #0
 800a4ea:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800a4ec:	687b      	ldr	r3, [r7, #4]
 800a4ee:	699b      	ldr	r3, [r3, #24]
 800a4f0:	2b00      	cmp	r3, #0
 800a4f2:	d120      	bne.n	800a536 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a4f8:	2b03      	cmp	r3, #3
 800a4fa:	d858      	bhi.n	800a5ae <DMA_CheckFifoParam+0xce>
 800a4fc:	a201      	add	r2, pc, #4	@ (adr r2, 800a504 <DMA_CheckFifoParam+0x24>)
 800a4fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a502:	bf00      	nop
 800a504:	0800a515 	.word	0x0800a515
 800a508:	0800a527 	.word	0x0800a527
 800a50c:	0800a515 	.word	0x0800a515
 800a510:	0800a5af 	.word	0x0800a5af
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a514:	687b      	ldr	r3, [r7, #4]
 800a516:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a518:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a51c:	2b00      	cmp	r3, #0
 800a51e:	d048      	beq.n	800a5b2 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 800a520:	2301      	movs	r3, #1
 800a522:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a524:	e045      	b.n	800a5b2 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a52a:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a52e:	d142      	bne.n	800a5b6 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 800a530:	2301      	movs	r3, #1
 800a532:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a534:	e03f      	b.n	800a5b6 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a536:	687b      	ldr	r3, [r7, #4]
 800a538:	699b      	ldr	r3, [r3, #24]
 800a53a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800a53e:	d123      	bne.n	800a588 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a544:	2b03      	cmp	r3, #3
 800a546:	d838      	bhi.n	800a5ba <DMA_CheckFifoParam+0xda>
 800a548:	a201      	add	r2, pc, #4	@ (adr r2, 800a550 <DMA_CheckFifoParam+0x70>)
 800a54a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a54e:	bf00      	nop
 800a550:	0800a561 	.word	0x0800a561
 800a554:	0800a567 	.word	0x0800a567
 800a558:	0800a561 	.word	0x0800a561
 800a55c:	0800a579 	.word	0x0800a579
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 800a560:	2301      	movs	r3, #1
 800a562:	73fb      	strb	r3, [r7, #15]
        break;
 800a564:	e030      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a56a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d025      	beq.n	800a5be <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 800a572:	2301      	movs	r3, #1
 800a574:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a576:	e022      	b.n	800a5be <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a57c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800a580:	d11f      	bne.n	800a5c2 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 800a582:	2301      	movs	r3, #1
 800a584:	73fb      	strb	r3, [r7, #15]
        }
        break;
 800a586:	e01c      	b.n	800a5c2 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 800a588:	687b      	ldr	r3, [r7, #4]
 800a58a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a58c:	2b02      	cmp	r3, #2
 800a58e:	d902      	bls.n	800a596 <DMA_CheckFifoParam+0xb6>
 800a590:	2b03      	cmp	r3, #3
 800a592:	d003      	beq.n	800a59c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 800a594:	e018      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 800a596:	2301      	movs	r3, #1
 800a598:	73fb      	strb	r3, [r7, #15]
        break;
 800a59a:	e015      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800a59c:	687b      	ldr	r3, [r7, #4]
 800a59e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a5a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800a5a4:	2b00      	cmp	r3, #0
 800a5a6:	d00e      	beq.n	800a5c6 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 800a5a8:	2301      	movs	r3, #1
 800a5aa:	73fb      	strb	r3, [r7, #15]
    break;
 800a5ac:	e00b      	b.n	800a5c6 <DMA_CheckFifoParam+0xe6>
        break;
 800a5ae:	bf00      	nop
 800a5b0:	e00a      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        break;
 800a5b2:	bf00      	nop
 800a5b4:	e008      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        break;
 800a5b6:	bf00      	nop
 800a5b8:	e006      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        break;
 800a5ba:	bf00      	nop
 800a5bc:	e004      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        break;
 800a5be:	bf00      	nop
 800a5c0:	e002      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
        break;
 800a5c2:	bf00      	nop
 800a5c4:	e000      	b.n	800a5c8 <DMA_CheckFifoParam+0xe8>
    break;
 800a5c6:	bf00      	nop
    }
  }

  return status;
 800a5c8:	7bfb      	ldrb	r3, [r7, #15]
}
 800a5ca:	4618      	mov	r0, r3
 800a5cc:	3714      	adds	r7, #20
 800a5ce:	46bd      	mov	sp, r7
 800a5d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5d4:	4770      	bx	lr
 800a5d6:	bf00      	nop

0800a5d8 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a5d8:	b480      	push	{r7}
 800a5da:	b085      	sub	sp, #20
 800a5dc:	af00      	add	r7, sp, #0
 800a5de:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	681b      	ldr	r3, [r3, #0]
 800a5ea:	4a38      	ldr	r2, [pc, #224]	@ (800a6cc <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 800a5ec:	4293      	cmp	r3, r2
 800a5ee:	d022      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	4a36      	ldr	r2, [pc, #216]	@ (800a6d0 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 800a5f6:	4293      	cmp	r3, r2
 800a5f8:	d01d      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	4a35      	ldr	r2, [pc, #212]	@ (800a6d4 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 800a600:	4293      	cmp	r3, r2
 800a602:	d018      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	4a33      	ldr	r2, [pc, #204]	@ (800a6d8 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 800a60a:	4293      	cmp	r3, r2
 800a60c:	d013      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	4a32      	ldr	r2, [pc, #200]	@ (800a6dc <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d00e      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a30      	ldr	r2, [pc, #192]	@ (800a6e0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 800a61e:	4293      	cmp	r3, r2
 800a620:	d009      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a622:	687b      	ldr	r3, [r7, #4]
 800a624:	681b      	ldr	r3, [r3, #0]
 800a626:	4a2f      	ldr	r2, [pc, #188]	@ (800a6e4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 800a628:	4293      	cmp	r3, r2
 800a62a:	d004      	beq.n	800a636 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	4a2d      	ldr	r2, [pc, #180]	@ (800a6e8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 800a632:	4293      	cmp	r3, r2
 800a634:	d101      	bne.n	800a63a <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 800a636:	2301      	movs	r3, #1
 800a638:	e000      	b.n	800a63c <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 800a63a:	2300      	movs	r3, #0
 800a63c:	2b00      	cmp	r3, #0
 800a63e:	d01a      	beq.n	800a676 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 800a640:	687b      	ldr	r3, [r7, #4]
 800a642:	681b      	ldr	r3, [r3, #0]
 800a644:	b2db      	uxtb	r3, r3
 800a646:	3b08      	subs	r3, #8
 800a648:	4a28      	ldr	r2, [pc, #160]	@ (800a6ec <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 800a64a:	fba2 2303 	umull	r2, r3, r2, r3
 800a64e:	091b      	lsrs	r3, r3, #4
 800a650:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 800a652:	68fa      	ldr	r2, [r7, #12]
 800a654:	4b26      	ldr	r3, [pc, #152]	@ (800a6f0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 800a656:	4413      	add	r3, r2
 800a658:	009b      	lsls	r3, r3, #2
 800a65a:	461a      	mov	r2, r3
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 800a660:	687b      	ldr	r3, [r7, #4]
 800a662:	4a24      	ldr	r2, [pc, #144]	@ (800a6f4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 800a664:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a666:	68fb      	ldr	r3, [r7, #12]
 800a668:	f003 031f 	and.w	r3, r3, #31
 800a66c:	2201      	movs	r2, #1
 800a66e:	409a      	lsls	r2, r3
 800a670:	687b      	ldr	r3, [r7, #4]
 800a672:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 800a674:	e024      	b.n	800a6c0 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 800a676:	687b      	ldr	r3, [r7, #4]
 800a678:	681b      	ldr	r3, [r3, #0]
 800a67a:	b2db      	uxtb	r3, r3
 800a67c:	3b10      	subs	r3, #16
 800a67e:	4a1e      	ldr	r2, [pc, #120]	@ (800a6f8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 800a680:	fba2 2303 	umull	r2, r3, r2, r3
 800a684:	091b      	lsrs	r3, r3, #4
 800a686:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 800a688:	68bb      	ldr	r3, [r7, #8]
 800a68a:	4a1c      	ldr	r2, [pc, #112]	@ (800a6fc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 800a68c:	4293      	cmp	r3, r2
 800a68e:	d806      	bhi.n	800a69e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 800a690:	68bb      	ldr	r3, [r7, #8]
 800a692:	4a1b      	ldr	r2, [pc, #108]	@ (800a700 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 800a694:	4293      	cmp	r3, r2
 800a696:	d902      	bls.n	800a69e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	3308      	adds	r3, #8
 800a69c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 800a69e:	68fa      	ldr	r2, [r7, #12]
 800a6a0:	4b18      	ldr	r3, [pc, #96]	@ (800a704 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 800a6a2:	4413      	add	r3, r2
 800a6a4:	009b      	lsls	r3, r3, #2
 800a6a6:	461a      	mov	r2, r3
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	4a16      	ldr	r2, [pc, #88]	@ (800a708 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 800a6b0:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f003 031f 	and.w	r3, r3, #31
 800a6b8:	2201      	movs	r2, #1
 800a6ba:	409a      	lsls	r2, r3
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	669a      	str	r2, [r3, #104]	@ 0x68
}
 800a6c0:	bf00      	nop
 800a6c2:	3714      	adds	r7, #20
 800a6c4:	46bd      	mov	sp, r7
 800a6c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6ca:	4770      	bx	lr
 800a6cc:	58025408 	.word	0x58025408
 800a6d0:	5802541c 	.word	0x5802541c
 800a6d4:	58025430 	.word	0x58025430
 800a6d8:	58025444 	.word	0x58025444
 800a6dc:	58025458 	.word	0x58025458
 800a6e0:	5802546c 	.word	0x5802546c
 800a6e4:	58025480 	.word	0x58025480
 800a6e8:	58025494 	.word	0x58025494
 800a6ec:	cccccccd 	.word	0xcccccccd
 800a6f0:	16009600 	.word	0x16009600
 800a6f4:	58025880 	.word	0x58025880
 800a6f8:	aaaaaaab 	.word	0xaaaaaaab
 800a6fc:	400204b8 	.word	0x400204b8
 800a700:	4002040f 	.word	0x4002040f
 800a704:	10008200 	.word	0x10008200
 800a708:	40020880 	.word	0x40020880

0800a70c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800a70c:	b480      	push	{r7}
 800a70e:	b085      	sub	sp, #20
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	b2db      	uxtb	r3, r3
 800a71a:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 800a71c:	68fb      	ldr	r3, [r7, #12]
 800a71e:	2b00      	cmp	r3, #0
 800a720:	d04a      	beq.n	800a7b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 800a722:	68fb      	ldr	r3, [r7, #12]
 800a724:	2b08      	cmp	r3, #8
 800a726:	d847      	bhi.n	800a7b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 800a728:	687b      	ldr	r3, [r7, #4]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	4a25      	ldr	r2, [pc, #148]	@ (800a7c4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 800a72e:	4293      	cmp	r3, r2
 800a730:	d022      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	4a24      	ldr	r2, [pc, #144]	@ (800a7c8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 800a738:	4293      	cmp	r3, r2
 800a73a:	d01d      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a73c:	687b      	ldr	r3, [r7, #4]
 800a73e:	681b      	ldr	r3, [r3, #0]
 800a740:	4a22      	ldr	r2, [pc, #136]	@ (800a7cc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 800a742:	4293      	cmp	r3, r2
 800a744:	d018      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a746:	687b      	ldr	r3, [r7, #4]
 800a748:	681b      	ldr	r3, [r3, #0]
 800a74a:	4a21      	ldr	r2, [pc, #132]	@ (800a7d0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 800a74c:	4293      	cmp	r3, r2
 800a74e:	d013      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	4a1f      	ldr	r2, [pc, #124]	@ (800a7d4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 800a756:	4293      	cmp	r3, r2
 800a758:	d00e      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	681b      	ldr	r3, [r3, #0]
 800a75e:	4a1e      	ldr	r2, [pc, #120]	@ (800a7d8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 800a760:	4293      	cmp	r3, r2
 800a762:	d009      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	681b      	ldr	r3, [r3, #0]
 800a768:	4a1c      	ldr	r2, [pc, #112]	@ (800a7dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 800a76a:	4293      	cmp	r3, r2
 800a76c:	d004      	beq.n	800a778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 800a76e:	687b      	ldr	r3, [r7, #4]
 800a770:	681b      	ldr	r3, [r3, #0]
 800a772:	4a1b      	ldr	r2, [pc, #108]	@ (800a7e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 800a774:	4293      	cmp	r3, r2
 800a776:	d101      	bne.n	800a77c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 800a778:	2301      	movs	r3, #1
 800a77a:	e000      	b.n	800a77e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 800a77c:	2300      	movs	r3, #0
 800a77e:	2b00      	cmp	r3, #0
 800a780:	d00a      	beq.n	800a798 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 800a782:	68fa      	ldr	r2, [r7, #12]
 800a784:	4b17      	ldr	r3, [pc, #92]	@ (800a7e4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 800a786:	4413      	add	r3, r2
 800a788:	009b      	lsls	r3, r3, #2
 800a78a:	461a      	mov	r2, r3
 800a78c:	687b      	ldr	r3, [r7, #4]
 800a78e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 800a790:	687b      	ldr	r3, [r7, #4]
 800a792:	4a15      	ldr	r2, [pc, #84]	@ (800a7e8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 800a794:	671a      	str	r2, [r3, #112]	@ 0x70
 800a796:	e009      	b.n	800a7ac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 800a798:	68fa      	ldr	r2, [r7, #12]
 800a79a:	4b14      	ldr	r3, [pc, #80]	@ (800a7ec <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 800a79c:	4413      	add	r3, r2
 800a79e:	009b      	lsls	r3, r3, #2
 800a7a0:	461a      	mov	r2, r3
 800a7a2:	687b      	ldr	r3, [r7, #4]
 800a7a4:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 800a7a6:	687b      	ldr	r3, [r7, #4]
 800a7a8:	4a11      	ldr	r2, [pc, #68]	@ (800a7f0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 800a7aa:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 800a7ac:	68fb      	ldr	r3, [r7, #12]
 800a7ae:	3b01      	subs	r3, #1
 800a7b0:	2201      	movs	r2, #1
 800a7b2:	409a      	lsls	r2, r3
 800a7b4:	687b      	ldr	r3, [r7, #4]
 800a7b6:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 800a7b8:	bf00      	nop
 800a7ba:	3714      	adds	r7, #20
 800a7bc:	46bd      	mov	sp, r7
 800a7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a7c2:	4770      	bx	lr
 800a7c4:	58025408 	.word	0x58025408
 800a7c8:	5802541c 	.word	0x5802541c
 800a7cc:	58025430 	.word	0x58025430
 800a7d0:	58025444 	.word	0x58025444
 800a7d4:	58025458 	.word	0x58025458
 800a7d8:	5802546c 	.word	0x5802546c
 800a7dc:	58025480 	.word	0x58025480
 800a7e0:	58025494 	.word	0x58025494
 800a7e4:	1600963f 	.word	0x1600963f
 800a7e8:	58025940 	.word	0x58025940
 800a7ec:	1000823f 	.word	0x1000823f
 800a7f0:	40020940 	.word	0x40020940

0800a7f4 <HAL_DMAEx_ConfigMuxSync>:
  *                     the configuration information for the specified DMA Stream.
  * @param  pSyncConfig : pointer to HAL_DMA_MuxSyncConfigTypeDef : contains the DMAMUX synchronization parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ConfigMuxSync(DMA_HandleTypeDef *hdma, HAL_DMA_MuxSyncConfigTypeDef *pSyncConfig)
{
 800a7f4:	b480      	push	{r7}
 800a7f6:	b085      	sub	sp, #20
 800a7f8:	af00      	add	r7, sp, #0
 800a7fa:	6078      	str	r0, [r7, #4]
 800a7fc:	6039      	str	r1, [r7, #0]
  uint32_t syncSignalID = 0;
 800a7fe:	2300      	movs	r3, #0
 800a800:	60fb      	str	r3, [r7, #12]
  uint32_t syncPolarity = 0;
 800a802:	2300      	movs	r3, #0
 800a804:	60bb      	str	r3, [r7, #8]
  assert_param(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance));
  assert_param(IS_DMAMUX_SYNC_STATE(pSyncConfig->SyncEnable));
  assert_param(IS_DMAMUX_SYNC_EVENT(pSyncConfig->EventEnable));
  assert_param(IS_DMAMUX_SYNC_REQUEST_NUMBER(pSyncConfig->RequestNumber));

  if(pSyncConfig->SyncEnable == ENABLE)
 800a806:	683b      	ldr	r3, [r7, #0]
 800a808:	7a1b      	ldrb	r3, [r3, #8]
 800a80a:	2b01      	cmp	r3, #1
 800a80c:	d154      	bne.n	800a8b8 <HAL_DMAEx_ConfigMuxSync+0xc4>
  {
    assert_param(IS_DMAMUX_SYNC_POLARITY(pSyncConfig->SyncPolarity));

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	681b      	ldr	r3, [r3, #0]
 800a812:	4a4b      	ldr	r2, [pc, #300]	@ (800a940 <HAL_DMAEx_ConfigMuxSync+0x14c>)
 800a814:	4293      	cmp	r3, r2
 800a816:	d049      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	681b      	ldr	r3, [r3, #0]
 800a81c:	4a49      	ldr	r2, [pc, #292]	@ (800a944 <HAL_DMAEx_ConfigMuxSync+0x150>)
 800a81e:	4293      	cmp	r3, r2
 800a820:	d044      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a822:	687b      	ldr	r3, [r7, #4]
 800a824:	681b      	ldr	r3, [r3, #0]
 800a826:	4a48      	ldr	r2, [pc, #288]	@ (800a948 <HAL_DMAEx_ConfigMuxSync+0x154>)
 800a828:	4293      	cmp	r3, r2
 800a82a:	d03f      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a82c:	687b      	ldr	r3, [r7, #4]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	4a46      	ldr	r2, [pc, #280]	@ (800a94c <HAL_DMAEx_ConfigMuxSync+0x158>)
 800a832:	4293      	cmp	r3, r2
 800a834:	d03a      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a836:	687b      	ldr	r3, [r7, #4]
 800a838:	681b      	ldr	r3, [r3, #0]
 800a83a:	4a45      	ldr	r2, [pc, #276]	@ (800a950 <HAL_DMAEx_ConfigMuxSync+0x15c>)
 800a83c:	4293      	cmp	r3, r2
 800a83e:	d035      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a840:	687b      	ldr	r3, [r7, #4]
 800a842:	681b      	ldr	r3, [r3, #0]
 800a844:	4a43      	ldr	r2, [pc, #268]	@ (800a954 <HAL_DMAEx_ConfigMuxSync+0x160>)
 800a846:	4293      	cmp	r3, r2
 800a848:	d030      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	681b      	ldr	r3, [r3, #0]
 800a84e:	4a42      	ldr	r2, [pc, #264]	@ (800a958 <HAL_DMAEx_ConfigMuxSync+0x164>)
 800a850:	4293      	cmp	r3, r2
 800a852:	d02b      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a854:	687b      	ldr	r3, [r7, #4]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	4a40      	ldr	r2, [pc, #256]	@ (800a95c <HAL_DMAEx_ConfigMuxSync+0x168>)
 800a85a:	4293      	cmp	r3, r2
 800a85c:	d026      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a85e:	687b      	ldr	r3, [r7, #4]
 800a860:	681b      	ldr	r3, [r3, #0]
 800a862:	4a3f      	ldr	r2, [pc, #252]	@ (800a960 <HAL_DMAEx_ConfigMuxSync+0x16c>)
 800a864:	4293      	cmp	r3, r2
 800a866:	d021      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a868:	687b      	ldr	r3, [r7, #4]
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	4a3d      	ldr	r2, [pc, #244]	@ (800a964 <HAL_DMAEx_ConfigMuxSync+0x170>)
 800a86e:	4293      	cmp	r3, r2
 800a870:	d01c      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a872:	687b      	ldr	r3, [r7, #4]
 800a874:	681b      	ldr	r3, [r3, #0]
 800a876:	4a3c      	ldr	r2, [pc, #240]	@ (800a968 <HAL_DMAEx_ConfigMuxSync+0x174>)
 800a878:	4293      	cmp	r3, r2
 800a87a:	d017      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a87c:	687b      	ldr	r3, [r7, #4]
 800a87e:	681b      	ldr	r3, [r3, #0]
 800a880:	4a3a      	ldr	r2, [pc, #232]	@ (800a96c <HAL_DMAEx_ConfigMuxSync+0x178>)
 800a882:	4293      	cmp	r3, r2
 800a884:	d012      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a886:	687b      	ldr	r3, [r7, #4]
 800a888:	681b      	ldr	r3, [r3, #0]
 800a88a:	4a39      	ldr	r2, [pc, #228]	@ (800a970 <HAL_DMAEx_ConfigMuxSync+0x17c>)
 800a88c:	4293      	cmp	r3, r2
 800a88e:	d00d      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a890:	687b      	ldr	r3, [r7, #4]
 800a892:	681b      	ldr	r3, [r3, #0]
 800a894:	4a37      	ldr	r2, [pc, #220]	@ (800a974 <HAL_DMAEx_ConfigMuxSync+0x180>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d008      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a89a:	687b      	ldr	r3, [r7, #4]
 800a89c:	681b      	ldr	r3, [r3, #0]
 800a89e:	4a36      	ldr	r2, [pc, #216]	@ (800a978 <HAL_DMAEx_ConfigMuxSync+0x184>)
 800a8a0:	4293      	cmp	r3, r2
 800a8a2:	d003      	beq.n	800a8ac <HAL_DMAEx_ConfigMuxSync+0xb8>
 800a8a4:	687b      	ldr	r3, [r7, #4]
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	4a34      	ldr	r2, [pc, #208]	@ (800a97c <HAL_DMAEx_ConfigMuxSync+0x188>)
 800a8aa:	4293      	cmp	r3, r2
    }
    else
    {
      assert_param(IS_BDMA_DMAMUX_SYNC_SIGNAL_ID(pSyncConfig->SyncSignalID));
    }
    syncSignalID = pSyncConfig->SyncSignalID;
 800a8ac:	683b      	ldr	r3, [r7, #0]
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	60fb      	str	r3, [r7, #12]
    syncPolarity = pSyncConfig->SyncPolarity;
 800a8b2:	683b      	ldr	r3, [r7, #0]
 800a8b4:	685b      	ldr	r3, [r3, #4]
 800a8b6:	60bb      	str	r3, [r7, #8]
  }

  /*Check if the DMA state is ready */
  if(hdma->State == HAL_DMA_STATE_READY)
 800a8b8:	687b      	ldr	r3, [r7, #4]
 800a8ba:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b01      	cmp	r3, #1
 800a8c2:	d131      	bne.n	800a928 <HAL_DMAEx_ConfigMuxSync+0x134>
  {
    /* Process Locked */
    __HAL_LOCK(hdma);
 800a8c4:	687b      	ldr	r3, [r7, #4]
 800a8c6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 800a8ca:	2b01      	cmp	r3, #1
 800a8cc:	d101      	bne.n	800a8d2 <HAL_DMAEx_ConfigMuxSync+0xde>
 800a8ce:	2302      	movs	r3, #2
 800a8d0:	e02f      	b.n	800a932 <HAL_DMAEx_ConfigMuxSync+0x13e>
 800a8d2:	687b      	ldr	r3, [r7, #4]
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the synchronization and event generation before applying a new config */
    CLEAR_BIT(hdma->DMAmuxChannel->CCR,(DMAMUX_CxCR_SE | DMAMUX_CxCR_EGE));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8de:	681a      	ldr	r2, [r3, #0]
 800a8e0:	687b      	ldr	r3, [r7, #4]
 800a8e2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8e4:	f422 3281 	bic.w	r2, r2, #66048	@ 0x10200
 800a8e8:	601a      	str	r2, [r3, #0]

    /* Set the new synchronization parameters (and keep the request ID filled during the Init)*/
    MODIFY_REG( hdma->DMAmuxChannel->CCR, \
 800a8ea:	687b      	ldr	r3, [r7, #4]
 800a8ec:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a8ee:	681b      	ldr	r3, [r3, #0]
 800a8f0:	b2d9      	uxtb	r1, r3
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	061a      	lsls	r2, r3, #24
 800a8f6:	683b      	ldr	r3, [r7, #0]
 800a8f8:	68db      	ldr	r3, [r3, #12]
 800a8fa:	3b01      	subs	r3, #1
 800a8fc:	04db      	lsls	r3, r3, #19
 800a8fe:	431a      	orrs	r2, r3
 800a900:	68bb      	ldr	r3, [r7, #8]
 800a902:	431a      	orrs	r2, r3
 800a904:	683b      	ldr	r3, [r7, #0]
 800a906:	7a1b      	ldrb	r3, [r3, #8]
 800a908:	041b      	lsls	r3, r3, #16
 800a90a:	431a      	orrs	r2, r3
 800a90c:	683b      	ldr	r3, [r7, #0]
 800a90e:	7a5b      	ldrb	r3, [r3, #9]
 800a910:	025b      	lsls	r3, r3, #9
 800a912:	431a      	orrs	r2, r3
 800a914:	687b      	ldr	r3, [r7, #4]
 800a916:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800a918:	430a      	orrs	r2, r1
 800a91a:	601a      	str	r2, [r3, #0]
               ((pSyncConfig->RequestNumber - 1U) << DMAMUX_CxCR_NBREQ_Pos) | \
               syncPolarity | ((uint32_t)pSyncConfig->SyncEnable << DMAMUX_CxCR_SE_Pos)    | \
               ((uint32_t)pSyncConfig->EventEnable << DMAMUX_CxCR_EGE_Pos));

      /* Process Locked */
    __HAL_UNLOCK(hdma);
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	2200      	movs	r2, #0
 800a920:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_OK;
 800a924:	2300      	movs	r3, #0
 800a926:	e004      	b.n	800a932 <HAL_DMAEx_ConfigMuxSync+0x13e>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800a92e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    return HAL_ERROR;
 800a930:	2301      	movs	r3, #1
  }
}
 800a932:	4618      	mov	r0, r3
 800a934:	3714      	adds	r7, #20
 800a936:	46bd      	mov	sp, r7
 800a938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a93c:	4770      	bx	lr
 800a93e:	bf00      	nop
 800a940:	40020010 	.word	0x40020010
 800a944:	40020028 	.word	0x40020028
 800a948:	40020040 	.word	0x40020040
 800a94c:	40020058 	.word	0x40020058
 800a950:	40020070 	.word	0x40020070
 800a954:	40020088 	.word	0x40020088
 800a958:	400200a0 	.word	0x400200a0
 800a95c:	400200b8 	.word	0x400200b8
 800a960:	40020410 	.word	0x40020410
 800a964:	40020428 	.word	0x40020428
 800a968:	40020440 	.word	0x40020440
 800a96c:	40020458 	.word	0x40020458
 800a970:	40020470 	.word	0x40020470
 800a974:	40020488 	.word	0x40020488
 800a978:	400204a0 	.word	0x400204a0
 800a97c:	400204b8 	.word	0x400204b8

0800a980 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 800a980:	b480      	push	{r7}
 800a982:	b089      	sub	sp, #36	@ 0x24
 800a984:	af00      	add	r7, sp, #0
 800a986:	6078      	str	r0, [r7, #4]
 800a988:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800a98a:	2300      	movs	r3, #0
 800a98c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800a98e:	4b89      	ldr	r3, [pc, #548]	@ (800abb4 <HAL_GPIO_Init+0x234>)
 800a990:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800a992:	e194      	b.n	800acbe <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 800a994:	683b      	ldr	r3, [r7, #0]
 800a996:	681a      	ldr	r2, [r3, #0]
 800a998:	2101      	movs	r1, #1
 800a99a:	69fb      	ldr	r3, [r7, #28]
 800a99c:	fa01 f303 	lsl.w	r3, r1, r3
 800a9a0:	4013      	ands	r3, r2
 800a9a2:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 800a9a4:	693b      	ldr	r3, [r7, #16]
 800a9a6:	2b00      	cmp	r3, #0
 800a9a8:	f000 8186 	beq.w	800acb8 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800a9ac:	683b      	ldr	r3, [r7, #0]
 800a9ae:	685b      	ldr	r3, [r3, #4]
 800a9b0:	f003 0303 	and.w	r3, r3, #3
 800a9b4:	2b01      	cmp	r3, #1
 800a9b6:	d005      	beq.n	800a9c4 <HAL_GPIO_Init+0x44>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	685b      	ldr	r3, [r3, #4]
 800a9bc:	f003 0303 	and.w	r3, r3, #3
 800a9c0:	2b02      	cmp	r3, #2
 800a9c2:	d130      	bne.n	800aa26 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800a9c4:	687b      	ldr	r3, [r7, #4]
 800a9c6:	689b      	ldr	r3, [r3, #8]
 800a9c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800a9ca:	69fb      	ldr	r3, [r7, #28]
 800a9cc:	005b      	lsls	r3, r3, #1
 800a9ce:	2203      	movs	r2, #3
 800a9d0:	fa02 f303 	lsl.w	r3, r2, r3
 800a9d4:	43db      	mvns	r3, r3
 800a9d6:	69ba      	ldr	r2, [r7, #24]
 800a9d8:	4013      	ands	r3, r2
 800a9da:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a9dc:	683b      	ldr	r3, [r7, #0]
 800a9de:	68da      	ldr	r2, [r3, #12]
 800a9e0:	69fb      	ldr	r3, [r7, #28]
 800a9e2:	005b      	lsls	r3, r3, #1
 800a9e4:	fa02 f303 	lsl.w	r3, r2, r3
 800a9e8:	69ba      	ldr	r2, [r7, #24]
 800a9ea:	4313      	orrs	r3, r2
 800a9ec:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	69ba      	ldr	r2, [r7, #24]
 800a9f2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	685b      	ldr	r3, [r3, #4]
 800a9f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800a9fa:	2201      	movs	r2, #1
 800a9fc:	69fb      	ldr	r3, [r7, #28]
 800a9fe:	fa02 f303 	lsl.w	r3, r2, r3
 800aa02:	43db      	mvns	r3, r3
 800aa04:	69ba      	ldr	r2, [r7, #24]
 800aa06:	4013      	ands	r3, r2
 800aa08:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800aa0a:	683b      	ldr	r3, [r7, #0]
 800aa0c:	685b      	ldr	r3, [r3, #4]
 800aa0e:	091b      	lsrs	r3, r3, #4
 800aa10:	f003 0201 	and.w	r2, r3, #1
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	fa02 f303 	lsl.w	r3, r2, r3
 800aa1a:	69ba      	ldr	r2, [r7, #24]
 800aa1c:	4313      	orrs	r3, r2
 800aa1e:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800aa20:	687b      	ldr	r3, [r7, #4]
 800aa22:	69ba      	ldr	r2, [r7, #24]
 800aa24:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800aa26:	683b      	ldr	r3, [r7, #0]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	f003 0303 	and.w	r3, r3, #3
 800aa2e:	2b03      	cmp	r3, #3
 800aa30:	d017      	beq.n	800aa62 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800aa32:	687b      	ldr	r3, [r7, #4]
 800aa34:	68db      	ldr	r3, [r3, #12]
 800aa36:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800aa38:	69fb      	ldr	r3, [r7, #28]
 800aa3a:	005b      	lsls	r3, r3, #1
 800aa3c:	2203      	movs	r2, #3
 800aa3e:	fa02 f303 	lsl.w	r3, r2, r3
 800aa42:	43db      	mvns	r3, r3
 800aa44:	69ba      	ldr	r2, [r7, #24]
 800aa46:	4013      	ands	r3, r2
 800aa48:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800aa4a:	683b      	ldr	r3, [r7, #0]
 800aa4c:	689a      	ldr	r2, [r3, #8]
 800aa4e:	69fb      	ldr	r3, [r7, #28]
 800aa50:	005b      	lsls	r3, r3, #1
 800aa52:	fa02 f303 	lsl.w	r3, r2, r3
 800aa56:	69ba      	ldr	r2, [r7, #24]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800aa5c:	687b      	ldr	r3, [r7, #4]
 800aa5e:	69ba      	ldr	r2, [r7, #24]
 800aa60:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800aa62:	683b      	ldr	r3, [r7, #0]
 800aa64:	685b      	ldr	r3, [r3, #4]
 800aa66:	f003 0303 	and.w	r3, r3, #3
 800aa6a:	2b02      	cmp	r3, #2
 800aa6c:	d123      	bne.n	800aab6 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800aa6e:	69fb      	ldr	r3, [r7, #28]
 800aa70:	08da      	lsrs	r2, r3, #3
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	3208      	adds	r2, #8
 800aa76:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800aa7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800aa7c:	69fb      	ldr	r3, [r7, #28]
 800aa7e:	f003 0307 	and.w	r3, r3, #7
 800aa82:	009b      	lsls	r3, r3, #2
 800aa84:	220f      	movs	r2, #15
 800aa86:	fa02 f303 	lsl.w	r3, r2, r3
 800aa8a:	43db      	mvns	r3, r3
 800aa8c:	69ba      	ldr	r2, [r7, #24]
 800aa8e:	4013      	ands	r3, r2
 800aa90:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 800aa92:	683b      	ldr	r3, [r7, #0]
 800aa94:	691a      	ldr	r2, [r3, #16]
 800aa96:	69fb      	ldr	r3, [r7, #28]
 800aa98:	f003 0307 	and.w	r3, r3, #7
 800aa9c:	009b      	lsls	r3, r3, #2
 800aa9e:	fa02 f303 	lsl.w	r3, r2, r3
 800aaa2:	69ba      	ldr	r2, [r7, #24]
 800aaa4:	4313      	orrs	r3, r2
 800aaa6:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800aaa8:	69fb      	ldr	r3, [r7, #28]
 800aaaa:	08da      	lsrs	r2, r3, #3
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	3208      	adds	r2, #8
 800aab0:	69b9      	ldr	r1, [r7, #24]
 800aab2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800aab6:	687b      	ldr	r3, [r7, #4]
 800aab8:	681b      	ldr	r3, [r3, #0]
 800aaba:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800aabc:	69fb      	ldr	r3, [r7, #28]
 800aabe:	005b      	lsls	r3, r3, #1
 800aac0:	2203      	movs	r2, #3
 800aac2:	fa02 f303 	lsl.w	r3, r2, r3
 800aac6:	43db      	mvns	r3, r3
 800aac8:	69ba      	ldr	r2, [r7, #24]
 800aaca:	4013      	ands	r3, r2
 800aacc:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800aace:	683b      	ldr	r3, [r7, #0]
 800aad0:	685b      	ldr	r3, [r3, #4]
 800aad2:	f003 0203 	and.w	r2, r3, #3
 800aad6:	69fb      	ldr	r3, [r7, #28]
 800aad8:	005b      	lsls	r3, r3, #1
 800aada:	fa02 f303 	lsl.w	r3, r2, r3
 800aade:	69ba      	ldr	r2, [r7, #24]
 800aae0:	4313      	orrs	r3, r2
 800aae2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800aae4:	687b      	ldr	r3, [r7, #4]
 800aae6:	69ba      	ldr	r2, [r7, #24]
 800aae8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800aaea:	683b      	ldr	r3, [r7, #0]
 800aaec:	685b      	ldr	r3, [r3, #4]
 800aaee:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	f000 80e0 	beq.w	800acb8 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800aaf8:	4b2f      	ldr	r3, [pc, #188]	@ (800abb8 <HAL_GPIO_Init+0x238>)
 800aafa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800aafe:	4a2e      	ldr	r2, [pc, #184]	@ (800abb8 <HAL_GPIO_Init+0x238>)
 800ab00:	f043 0302 	orr.w	r3, r3, #2
 800ab04:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ab08:	4b2b      	ldr	r3, [pc, #172]	@ (800abb8 <HAL_GPIO_Init+0x238>)
 800ab0a:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ab0e:	f003 0302 	and.w	r3, r3, #2
 800ab12:	60fb      	str	r3, [r7, #12]
 800ab14:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800ab16:	4a29      	ldr	r2, [pc, #164]	@ (800abbc <HAL_GPIO_Init+0x23c>)
 800ab18:	69fb      	ldr	r3, [r7, #28]
 800ab1a:	089b      	lsrs	r3, r3, #2
 800ab1c:	3302      	adds	r3, #2
 800ab1e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ab22:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800ab24:	69fb      	ldr	r3, [r7, #28]
 800ab26:	f003 0303 	and.w	r3, r3, #3
 800ab2a:	009b      	lsls	r3, r3, #2
 800ab2c:	220f      	movs	r2, #15
 800ab2e:	fa02 f303 	lsl.w	r3, r2, r3
 800ab32:	43db      	mvns	r3, r3
 800ab34:	69ba      	ldr	r2, [r7, #24]
 800ab36:	4013      	ands	r3, r2
 800ab38:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800ab3a:	687b      	ldr	r3, [r7, #4]
 800ab3c:	4a20      	ldr	r2, [pc, #128]	@ (800abc0 <HAL_GPIO_Init+0x240>)
 800ab3e:	4293      	cmp	r3, r2
 800ab40:	d052      	beq.n	800abe8 <HAL_GPIO_Init+0x268>
 800ab42:	687b      	ldr	r3, [r7, #4]
 800ab44:	4a1f      	ldr	r2, [pc, #124]	@ (800abc4 <HAL_GPIO_Init+0x244>)
 800ab46:	4293      	cmp	r3, r2
 800ab48:	d031      	beq.n	800abae <HAL_GPIO_Init+0x22e>
 800ab4a:	687b      	ldr	r3, [r7, #4]
 800ab4c:	4a1e      	ldr	r2, [pc, #120]	@ (800abc8 <HAL_GPIO_Init+0x248>)
 800ab4e:	4293      	cmp	r3, r2
 800ab50:	d02b      	beq.n	800abaa <HAL_GPIO_Init+0x22a>
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	4a1d      	ldr	r2, [pc, #116]	@ (800abcc <HAL_GPIO_Init+0x24c>)
 800ab56:	4293      	cmp	r3, r2
 800ab58:	d025      	beq.n	800aba6 <HAL_GPIO_Init+0x226>
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	4a1c      	ldr	r2, [pc, #112]	@ (800abd0 <HAL_GPIO_Init+0x250>)
 800ab5e:	4293      	cmp	r3, r2
 800ab60:	d01f      	beq.n	800aba2 <HAL_GPIO_Init+0x222>
 800ab62:	687b      	ldr	r3, [r7, #4]
 800ab64:	4a1b      	ldr	r2, [pc, #108]	@ (800abd4 <HAL_GPIO_Init+0x254>)
 800ab66:	4293      	cmp	r3, r2
 800ab68:	d019      	beq.n	800ab9e <HAL_GPIO_Init+0x21e>
 800ab6a:	687b      	ldr	r3, [r7, #4]
 800ab6c:	4a1a      	ldr	r2, [pc, #104]	@ (800abd8 <HAL_GPIO_Init+0x258>)
 800ab6e:	4293      	cmp	r3, r2
 800ab70:	d013      	beq.n	800ab9a <HAL_GPIO_Init+0x21a>
 800ab72:	687b      	ldr	r3, [r7, #4]
 800ab74:	4a19      	ldr	r2, [pc, #100]	@ (800abdc <HAL_GPIO_Init+0x25c>)
 800ab76:	4293      	cmp	r3, r2
 800ab78:	d00d      	beq.n	800ab96 <HAL_GPIO_Init+0x216>
 800ab7a:	687b      	ldr	r3, [r7, #4]
 800ab7c:	4a18      	ldr	r2, [pc, #96]	@ (800abe0 <HAL_GPIO_Init+0x260>)
 800ab7e:	4293      	cmp	r3, r2
 800ab80:	d007      	beq.n	800ab92 <HAL_GPIO_Init+0x212>
 800ab82:	687b      	ldr	r3, [r7, #4]
 800ab84:	4a17      	ldr	r2, [pc, #92]	@ (800abe4 <HAL_GPIO_Init+0x264>)
 800ab86:	4293      	cmp	r3, r2
 800ab88:	d101      	bne.n	800ab8e <HAL_GPIO_Init+0x20e>
 800ab8a:	2309      	movs	r3, #9
 800ab8c:	e02d      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800ab8e:	230a      	movs	r3, #10
 800ab90:	e02b      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800ab92:	2308      	movs	r3, #8
 800ab94:	e029      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800ab96:	2307      	movs	r3, #7
 800ab98:	e027      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800ab9a:	2306      	movs	r3, #6
 800ab9c:	e025      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800ab9e:	2305      	movs	r3, #5
 800aba0:	e023      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800aba2:	2304      	movs	r3, #4
 800aba4:	e021      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800aba6:	2303      	movs	r3, #3
 800aba8:	e01f      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800abaa:	2302      	movs	r3, #2
 800abac:	e01d      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800abae:	2301      	movs	r3, #1
 800abb0:	e01b      	b.n	800abea <HAL_GPIO_Init+0x26a>
 800abb2:	bf00      	nop
 800abb4:	58000080 	.word	0x58000080
 800abb8:	58024400 	.word	0x58024400
 800abbc:	58000400 	.word	0x58000400
 800abc0:	58020000 	.word	0x58020000
 800abc4:	58020400 	.word	0x58020400
 800abc8:	58020800 	.word	0x58020800
 800abcc:	58020c00 	.word	0x58020c00
 800abd0:	58021000 	.word	0x58021000
 800abd4:	58021400 	.word	0x58021400
 800abd8:	58021800 	.word	0x58021800
 800abdc:	58021c00 	.word	0x58021c00
 800abe0:	58022000 	.word	0x58022000
 800abe4:	58022400 	.word	0x58022400
 800abe8:	2300      	movs	r3, #0
 800abea:	69fa      	ldr	r2, [r7, #28]
 800abec:	f002 0203 	and.w	r2, r2, #3
 800abf0:	0092      	lsls	r2, r2, #2
 800abf2:	4093      	lsls	r3, r2
 800abf4:	69ba      	ldr	r2, [r7, #24]
 800abf6:	4313      	orrs	r3, r2
 800abf8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800abfa:	4938      	ldr	r1, [pc, #224]	@ (800acdc <HAL_GPIO_Init+0x35c>)
 800abfc:	69fb      	ldr	r3, [r7, #28]
 800abfe:	089b      	lsrs	r3, r3, #2
 800ac00:	3302      	adds	r3, #2
 800ac02:	69ba      	ldr	r2, [r7, #24]
 800ac04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 800ac08:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac0c:	681b      	ldr	r3, [r3, #0]
 800ac0e:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ac10:	693b      	ldr	r3, [r7, #16]
 800ac12:	43db      	mvns	r3, r3
 800ac14:	69ba      	ldr	r2, [r7, #24]
 800ac16:	4013      	ands	r3, r2
 800ac18:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800ac1a:	683b      	ldr	r3, [r7, #0]
 800ac1c:	685b      	ldr	r3, [r3, #4]
 800ac1e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d003      	beq.n	800ac2e <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 800ac26:	69ba      	ldr	r2, [r7, #24]
 800ac28:	693b      	ldr	r3, [r7, #16]
 800ac2a:	4313      	orrs	r3, r2
 800ac2c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 800ac2e:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac32:	69bb      	ldr	r3, [r7, #24]
 800ac34:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 800ac36:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ac3a:	685b      	ldr	r3, [r3, #4]
 800ac3c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ac3e:	693b      	ldr	r3, [r7, #16]
 800ac40:	43db      	mvns	r3, r3
 800ac42:	69ba      	ldr	r2, [r7, #24]
 800ac44:	4013      	ands	r3, r2
 800ac46:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800ac48:	683b      	ldr	r3, [r7, #0]
 800ac4a:	685b      	ldr	r3, [r3, #4]
 800ac4c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d003      	beq.n	800ac5c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 800ac54:	69ba      	ldr	r2, [r7, #24]
 800ac56:	693b      	ldr	r3, [r7, #16]
 800ac58:	4313      	orrs	r3, r2
 800ac5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800ac5c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 800ac60:	69bb      	ldr	r3, [r7, #24]
 800ac62:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 800ac64:	697b      	ldr	r3, [r7, #20]
 800ac66:	685b      	ldr	r3, [r3, #4]
 800ac68:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ac6a:	693b      	ldr	r3, [r7, #16]
 800ac6c:	43db      	mvns	r3, r3
 800ac6e:	69ba      	ldr	r2, [r7, #24]
 800ac70:	4013      	ands	r3, r2
 800ac72:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800ac74:	683b      	ldr	r3, [r7, #0]
 800ac76:	685b      	ldr	r3, [r3, #4]
 800ac78:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ac7c:	2b00      	cmp	r3, #0
 800ac7e:	d003      	beq.n	800ac88 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 800ac80:	69ba      	ldr	r2, [r7, #24]
 800ac82:	693b      	ldr	r3, [r7, #16]
 800ac84:	4313      	orrs	r3, r2
 800ac86:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800ac88:	697b      	ldr	r3, [r7, #20]
 800ac8a:	69ba      	ldr	r2, [r7, #24]
 800ac8c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800ac8e:	697b      	ldr	r3, [r7, #20]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800ac94:	693b      	ldr	r3, [r7, #16]
 800ac96:	43db      	mvns	r3, r3
 800ac98:	69ba      	ldr	r2, [r7, #24]
 800ac9a:	4013      	ands	r3, r2
 800ac9c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800ac9e:	683b      	ldr	r3, [r7, #0]
 800aca0:	685b      	ldr	r3, [r3, #4]
 800aca2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800aca6:	2b00      	cmp	r3, #0
 800aca8:	d003      	beq.n	800acb2 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800acaa:	69ba      	ldr	r2, [r7, #24]
 800acac:	693b      	ldr	r3, [r7, #16]
 800acae:	4313      	orrs	r3, r2
 800acb0:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 800acb2:	697b      	ldr	r3, [r7, #20]
 800acb4:	69ba      	ldr	r2, [r7, #24]
 800acb6:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800acb8:	69fb      	ldr	r3, [r7, #28]
 800acba:	3301      	adds	r3, #1
 800acbc:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800acbe:	683b      	ldr	r3, [r7, #0]
 800acc0:	681a      	ldr	r2, [r3, #0]
 800acc2:	69fb      	ldr	r3, [r7, #28]
 800acc4:	fa22 f303 	lsr.w	r3, r2, r3
 800acc8:	2b00      	cmp	r3, #0
 800acca:	f47f ae63 	bne.w	800a994 <HAL_GPIO_Init+0x14>
  }
}
 800acce:	bf00      	nop
 800acd0:	bf00      	nop
 800acd2:	3724      	adds	r7, #36	@ 0x24
 800acd4:	46bd      	mov	sp, r7
 800acd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acda:	4770      	bx	lr
 800acdc:	58000400 	.word	0x58000400

0800ace0 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 800ace0:	b480      	push	{r7}
 800ace2:	b087      	sub	sp, #28
 800ace4:	af00      	add	r7, sp, #0
 800ace6:	6078      	str	r0, [r7, #4]
 800ace8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800acea:	2300      	movs	r3, #0
 800acec:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800acee:	4b75      	ldr	r3, [pc, #468]	@ (800aec4 <HAL_GPIO_DeInit+0x1e4>)
 800acf0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 800acf2:	e0d9      	b.n	800aea8 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 800acf4:	2201      	movs	r2, #1
 800acf6:	697b      	ldr	r3, [r7, #20]
 800acf8:	fa02 f303 	lsl.w	r3, r2, r3
 800acfc:	683a      	ldr	r2, [r7, #0]
 800acfe:	4013      	ands	r3, r2
 800ad00:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 800ad02:	68fb      	ldr	r3, [r7, #12]
 800ad04:	2b00      	cmp	r3, #0
 800ad06:	f000 80cc 	beq.w	800aea2 <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 800ad0a:	4a6f      	ldr	r2, [pc, #444]	@ (800aec8 <HAL_GPIO_DeInit+0x1e8>)
 800ad0c:	697b      	ldr	r3, [r7, #20]
 800ad0e:	089b      	lsrs	r3, r3, #2
 800ad10:	3302      	adds	r3, #2
 800ad12:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ad16:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 800ad18:	697b      	ldr	r3, [r7, #20]
 800ad1a:	f003 0303 	and.w	r3, r3, #3
 800ad1e:	009b      	lsls	r3, r3, #2
 800ad20:	220f      	movs	r2, #15
 800ad22:	fa02 f303 	lsl.w	r3, r2, r3
 800ad26:	68ba      	ldr	r2, [r7, #8]
 800ad28:	4013      	ands	r3, r2
 800ad2a:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 800ad2c:	687b      	ldr	r3, [r7, #4]
 800ad2e:	4a67      	ldr	r2, [pc, #412]	@ (800aecc <HAL_GPIO_DeInit+0x1ec>)
 800ad30:	4293      	cmp	r3, r2
 800ad32:	d037      	beq.n	800ada4 <HAL_GPIO_DeInit+0xc4>
 800ad34:	687b      	ldr	r3, [r7, #4]
 800ad36:	4a66      	ldr	r2, [pc, #408]	@ (800aed0 <HAL_GPIO_DeInit+0x1f0>)
 800ad38:	4293      	cmp	r3, r2
 800ad3a:	d031      	beq.n	800ada0 <HAL_GPIO_DeInit+0xc0>
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	4a65      	ldr	r2, [pc, #404]	@ (800aed4 <HAL_GPIO_DeInit+0x1f4>)
 800ad40:	4293      	cmp	r3, r2
 800ad42:	d02b      	beq.n	800ad9c <HAL_GPIO_DeInit+0xbc>
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	4a64      	ldr	r2, [pc, #400]	@ (800aed8 <HAL_GPIO_DeInit+0x1f8>)
 800ad48:	4293      	cmp	r3, r2
 800ad4a:	d025      	beq.n	800ad98 <HAL_GPIO_DeInit+0xb8>
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	4a63      	ldr	r2, [pc, #396]	@ (800aedc <HAL_GPIO_DeInit+0x1fc>)
 800ad50:	4293      	cmp	r3, r2
 800ad52:	d01f      	beq.n	800ad94 <HAL_GPIO_DeInit+0xb4>
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	4a62      	ldr	r2, [pc, #392]	@ (800aee0 <HAL_GPIO_DeInit+0x200>)
 800ad58:	4293      	cmp	r3, r2
 800ad5a:	d019      	beq.n	800ad90 <HAL_GPIO_DeInit+0xb0>
 800ad5c:	687b      	ldr	r3, [r7, #4]
 800ad5e:	4a61      	ldr	r2, [pc, #388]	@ (800aee4 <HAL_GPIO_DeInit+0x204>)
 800ad60:	4293      	cmp	r3, r2
 800ad62:	d013      	beq.n	800ad8c <HAL_GPIO_DeInit+0xac>
 800ad64:	687b      	ldr	r3, [r7, #4]
 800ad66:	4a60      	ldr	r2, [pc, #384]	@ (800aee8 <HAL_GPIO_DeInit+0x208>)
 800ad68:	4293      	cmp	r3, r2
 800ad6a:	d00d      	beq.n	800ad88 <HAL_GPIO_DeInit+0xa8>
 800ad6c:	687b      	ldr	r3, [r7, #4]
 800ad6e:	4a5f      	ldr	r2, [pc, #380]	@ (800aeec <HAL_GPIO_DeInit+0x20c>)
 800ad70:	4293      	cmp	r3, r2
 800ad72:	d007      	beq.n	800ad84 <HAL_GPIO_DeInit+0xa4>
 800ad74:	687b      	ldr	r3, [r7, #4]
 800ad76:	4a5e      	ldr	r2, [pc, #376]	@ (800aef0 <HAL_GPIO_DeInit+0x210>)
 800ad78:	4293      	cmp	r3, r2
 800ad7a:	d101      	bne.n	800ad80 <HAL_GPIO_DeInit+0xa0>
 800ad7c:	2309      	movs	r3, #9
 800ad7e:	e012      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad80:	230a      	movs	r3, #10
 800ad82:	e010      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad84:	2308      	movs	r3, #8
 800ad86:	e00e      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad88:	2307      	movs	r3, #7
 800ad8a:	e00c      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad8c:	2306      	movs	r3, #6
 800ad8e:	e00a      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad90:	2305      	movs	r3, #5
 800ad92:	e008      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad94:	2304      	movs	r3, #4
 800ad96:	e006      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad98:	2303      	movs	r3, #3
 800ad9a:	e004      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ad9c:	2302      	movs	r3, #2
 800ad9e:	e002      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ada0:	2301      	movs	r3, #1
 800ada2:	e000      	b.n	800ada6 <HAL_GPIO_DeInit+0xc6>
 800ada4:	2300      	movs	r3, #0
 800ada6:	697a      	ldr	r2, [r7, #20]
 800ada8:	f002 0203 	and.w	r2, r2, #3
 800adac:	0092      	lsls	r2, r2, #2
 800adae:	4093      	lsls	r3, r2
 800adb0:	68ba      	ldr	r2, [r7, #8]
 800adb2:	429a      	cmp	r2, r3
 800adb4:	d136      	bne.n	800ae24 <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 800adb6:	693b      	ldr	r3, [r7, #16]
 800adb8:	681a      	ldr	r2, [r3, #0]
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	43db      	mvns	r3, r3
 800adbe:	401a      	ands	r2, r3
 800adc0:	693b      	ldr	r3, [r7, #16]
 800adc2:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 800adc4:	693b      	ldr	r3, [r7, #16]
 800adc6:	685a      	ldr	r2, [r3, #4]
 800adc8:	68fb      	ldr	r3, [r7, #12]
 800adca:	43db      	mvns	r3, r3
 800adcc:	401a      	ands	r2, r3
 800adce:	693b      	ldr	r3, [r7, #16]
 800add0:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 800add2:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800add6:	685a      	ldr	r2, [r3, #4]
 800add8:	68fb      	ldr	r3, [r7, #12]
 800adda:	43db      	mvns	r3, r3
 800addc:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800ade0:	4013      	ands	r3, r2
 800ade2:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 800ade4:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800ade8:	681a      	ldr	r2, [r3, #0]
 800adea:	68fb      	ldr	r3, [r7, #12]
 800adec:	43db      	mvns	r3, r3
 800adee:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 800adf2:	4013      	ands	r3, r2
 800adf4:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 800adf6:	697b      	ldr	r3, [r7, #20]
 800adf8:	f003 0303 	and.w	r3, r3, #3
 800adfc:	009b      	lsls	r3, r3, #2
 800adfe:	220f      	movs	r2, #15
 800ae00:	fa02 f303 	lsl.w	r3, r2, r3
 800ae04:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 800ae06:	4a30      	ldr	r2, [pc, #192]	@ (800aec8 <HAL_GPIO_DeInit+0x1e8>)
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	089b      	lsrs	r3, r3, #2
 800ae0c:	3302      	adds	r3, #2
 800ae0e:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 800ae12:	68bb      	ldr	r3, [r7, #8]
 800ae14:	43da      	mvns	r2, r3
 800ae16:	482c      	ldr	r0, [pc, #176]	@ (800aec8 <HAL_GPIO_DeInit+0x1e8>)
 800ae18:	697b      	ldr	r3, [r7, #20]
 800ae1a:	089b      	lsrs	r3, r3, #2
 800ae1c:	400a      	ands	r2, r1
 800ae1e:	3302      	adds	r3, #2
 800ae20:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 800ae24:	687b      	ldr	r3, [r7, #4]
 800ae26:	681a      	ldr	r2, [r3, #0]
 800ae28:	697b      	ldr	r3, [r7, #20]
 800ae2a:	005b      	lsls	r3, r3, #1
 800ae2c:	2103      	movs	r1, #3
 800ae2e:	fa01 f303 	lsl.w	r3, r1, r3
 800ae32:	431a      	orrs	r2, r3
 800ae34:	687b      	ldr	r3, [r7, #4]
 800ae36:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 800ae38:	697b      	ldr	r3, [r7, #20]
 800ae3a:	08da      	lsrs	r2, r3, #3
 800ae3c:	687b      	ldr	r3, [r7, #4]
 800ae3e:	3208      	adds	r2, #8
 800ae40:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ae44:	697b      	ldr	r3, [r7, #20]
 800ae46:	f003 0307 	and.w	r3, r3, #7
 800ae4a:	009b      	lsls	r3, r3, #2
 800ae4c:	220f      	movs	r2, #15
 800ae4e:	fa02 f303 	lsl.w	r3, r2, r3
 800ae52:	43db      	mvns	r3, r3
 800ae54:	697a      	ldr	r2, [r7, #20]
 800ae56:	08d2      	lsrs	r2, r2, #3
 800ae58:	4019      	ands	r1, r3
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	3208      	adds	r2, #8
 800ae5e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800ae62:	687b      	ldr	r3, [r7, #4]
 800ae64:	68da      	ldr	r2, [r3, #12]
 800ae66:	697b      	ldr	r3, [r7, #20]
 800ae68:	005b      	lsls	r3, r3, #1
 800ae6a:	2103      	movs	r1, #3
 800ae6c:	fa01 f303 	lsl.w	r3, r1, r3
 800ae70:	43db      	mvns	r3, r3
 800ae72:	401a      	ands	r2, r3
 800ae74:	687b      	ldr	r3, [r7, #4]
 800ae76:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	685a      	ldr	r2, [r3, #4]
 800ae7c:	2101      	movs	r1, #1
 800ae7e:	697b      	ldr	r3, [r7, #20]
 800ae80:	fa01 f303 	lsl.w	r3, r1, r3
 800ae84:	43db      	mvns	r3, r3
 800ae86:	401a      	ands	r2, r3
 800ae88:	687b      	ldr	r3, [r7, #4]
 800ae8a:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800ae8c:	687b      	ldr	r3, [r7, #4]
 800ae8e:	689a      	ldr	r2, [r3, #8]
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	005b      	lsls	r3, r3, #1
 800ae94:	2103      	movs	r1, #3
 800ae96:	fa01 f303 	lsl.w	r3, r1, r3
 800ae9a:	43db      	mvns	r3, r3
 800ae9c:	401a      	ands	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	609a      	str	r2, [r3, #8]
    }

    position++;
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	3301      	adds	r3, #1
 800aea6:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 800aea8:	683a      	ldr	r2, [r7, #0]
 800aeaa:	697b      	ldr	r3, [r7, #20]
 800aeac:	fa22 f303 	lsr.w	r3, r2, r3
 800aeb0:	2b00      	cmp	r3, #0
 800aeb2:	f47f af1f 	bne.w	800acf4 <HAL_GPIO_DeInit+0x14>
  }
}
 800aeb6:	bf00      	nop
 800aeb8:	bf00      	nop
 800aeba:	371c      	adds	r7, #28
 800aebc:	46bd      	mov	sp, r7
 800aebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aec2:	4770      	bx	lr
 800aec4:	58000080 	.word	0x58000080
 800aec8:	58000400 	.word	0x58000400
 800aecc:	58020000 	.word	0x58020000
 800aed0:	58020400 	.word	0x58020400
 800aed4:	58020800 	.word	0x58020800
 800aed8:	58020c00 	.word	0x58020c00
 800aedc:	58021000 	.word	0x58021000
 800aee0:	58021400 	.word	0x58021400
 800aee4:	58021800 	.word	0x58021800
 800aee8:	58021c00 	.word	0x58021c00
 800aeec:	58022000 	.word	0x58022000
 800aef0:	58022400 	.word	0x58022400

0800aef4 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
 800aefa:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800aefc:	4a08      	ldr	r2, [pc, #32]	@ (800af20 <HAL_HSEM_FastTake+0x2c>)
 800aefe:	687b      	ldr	r3, [r7, #4]
 800af00:	3320      	adds	r3, #32
 800af02:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af06:	4a07      	ldr	r2, [pc, #28]	@ (800af24 <HAL_HSEM_FastTake+0x30>)
 800af08:	4293      	cmp	r3, r2
 800af0a:	d101      	bne.n	800af10 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800af0c:	2300      	movs	r3, #0
 800af0e:	e000      	b.n	800af12 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 800af10:	2301      	movs	r3, #1
}
 800af12:	4618      	mov	r0, r3
 800af14:	370c      	adds	r7, #12
 800af16:	46bd      	mov	sp, r7
 800af18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af1c:	4770      	bx	lr
 800af1e:	bf00      	nop
 800af20:	58026400 	.word	0x58026400
 800af24:	80000300 	.word	0x80000300

0800af28 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 800af28:	b480      	push	{r7}
 800af2a:	b083      	sub	sp, #12
 800af2c:	af00      	add	r7, sp, #0
 800af2e:	6078      	str	r0, [r7, #4]
 800af30:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 800af32:	4906      	ldr	r1, [pc, #24]	@ (800af4c <HAL_HSEM_Release+0x24>)
 800af34:	683b      	ldr	r3, [r7, #0]
 800af36:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 800af3a:	687b      	ldr	r3, [r7, #4]
 800af3c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	58026400 	.word	0x58026400

0800af50 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800af50:	b580      	push	{r7, lr}
 800af52:	b082      	sub	sp, #8
 800af54:	af00      	add	r7, sp, #0
 800af56:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800af58:	687b      	ldr	r3, [r7, #4]
 800af5a:	2b00      	cmp	r3, #0
 800af5c:	d101      	bne.n	800af62 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800af5e:	2301      	movs	r3, #1
 800af60:	e08b      	b.n	800b07a <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800af62:	687b      	ldr	r3, [r7, #4]
 800af64:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800af68:	b2db      	uxtb	r3, r3
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	d106      	bne.n	800af7c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800af6e:	687b      	ldr	r3, [r7, #4]
 800af70:	2200      	movs	r2, #0
 800af72:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800af76:	6878      	ldr	r0, [r7, #4]
 800af78:	f000 f8b5 	bl	800b0e6 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800af7c:	687b      	ldr	r3, [r7, #4]
 800af7e:	2224      	movs	r2, #36	@ 0x24
 800af80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	687b      	ldr	r3, [r7, #4]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0201 	bic.w	r2, r2, #1
 800af92:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800af94:	687b      	ldr	r3, [r7, #4]
 800af96:	685a      	ldr	r2, [r3, #4]
 800af98:	687b      	ldr	r3, [r7, #4]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 800afa0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800afa2:	687b      	ldr	r3, [r7, #4]
 800afa4:	681b      	ldr	r3, [r3, #0]
 800afa6:	689a      	ldr	r2, [r3, #8]
 800afa8:	687b      	ldr	r3, [r7, #4]
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800afb0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800afb2:	687b      	ldr	r3, [r7, #4]
 800afb4:	68db      	ldr	r3, [r3, #12]
 800afb6:	2b01      	cmp	r3, #1
 800afb8:	d107      	bne.n	800afca <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800afba:	687b      	ldr	r3, [r7, #4]
 800afbc:	689a      	ldr	r2, [r3, #8]
 800afbe:	687b      	ldr	r3, [r7, #4]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800afc6:	609a      	str	r2, [r3, #8]
 800afc8:	e006      	b.n	800afd8 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800afca:	687b      	ldr	r3, [r7, #4]
 800afcc:	689a      	ldr	r2, [r3, #8]
 800afce:	687b      	ldr	r3, [r7, #4]
 800afd0:	681b      	ldr	r3, [r3, #0]
 800afd2:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 800afd6:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800afd8:	687b      	ldr	r3, [r7, #4]
 800afda:	68db      	ldr	r3, [r3, #12]
 800afdc:	2b02      	cmp	r3, #2
 800afde:	d108      	bne.n	800aff2 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800afe0:	687b      	ldr	r3, [r7, #4]
 800afe2:	681b      	ldr	r3, [r3, #0]
 800afe4:	685a      	ldr	r2, [r3, #4]
 800afe6:	687b      	ldr	r3, [r7, #4]
 800afe8:	681b      	ldr	r3, [r3, #0]
 800afea:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800afee:	605a      	str	r2, [r3, #4]
 800aff0:	e007      	b.n	800b002 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800aff2:	687b      	ldr	r3, [r7, #4]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	685a      	ldr	r2, [r3, #4]
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	681b      	ldr	r3, [r3, #0]
 800affc:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800b000:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800b002:	687b      	ldr	r3, [r7, #4]
 800b004:	681b      	ldr	r3, [r3, #0]
 800b006:	6859      	ldr	r1, [r3, #4]
 800b008:	687b      	ldr	r3, [r7, #4]
 800b00a:	681a      	ldr	r2, [r3, #0]
 800b00c:	4b1d      	ldr	r3, [pc, #116]	@ (800b084 <HAL_I2C_Init+0x134>)
 800b00e:	430b      	orrs	r3, r1
 800b010:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800b012:	687b      	ldr	r3, [r7, #4]
 800b014:	681b      	ldr	r3, [r3, #0]
 800b016:	68da      	ldr	r2, [r3, #12]
 800b018:	687b      	ldr	r3, [r7, #4]
 800b01a:	681b      	ldr	r3, [r3, #0]
 800b01c:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800b020:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b022:	687b      	ldr	r3, [r7, #4]
 800b024:	691a      	ldr	r2, [r3, #16]
 800b026:	687b      	ldr	r3, [r7, #4]
 800b028:	695b      	ldr	r3, [r3, #20]
 800b02a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800b02e:	687b      	ldr	r3, [r7, #4]
 800b030:	699b      	ldr	r3, [r3, #24]
 800b032:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800b034:	687b      	ldr	r3, [r7, #4]
 800b036:	681b      	ldr	r3, [r3, #0]
 800b038:	430a      	orrs	r2, r1
 800b03a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800b03c:	687b      	ldr	r3, [r7, #4]
 800b03e:	69d9      	ldr	r1, [r3, #28]
 800b040:	687b      	ldr	r3, [r7, #4]
 800b042:	6a1a      	ldr	r2, [r3, #32]
 800b044:	687b      	ldr	r3, [r7, #4]
 800b046:	681b      	ldr	r3, [r3, #0]
 800b048:	430a      	orrs	r2, r1
 800b04a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800b04c:	687b      	ldr	r3, [r7, #4]
 800b04e:	681b      	ldr	r3, [r3, #0]
 800b050:	681a      	ldr	r2, [r3, #0]
 800b052:	687b      	ldr	r3, [r7, #4]
 800b054:	681b      	ldr	r3, [r3, #0]
 800b056:	f042 0201 	orr.w	r2, r2, #1
 800b05a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b05c:	687b      	ldr	r3, [r7, #4]
 800b05e:	2200      	movs	r2, #0
 800b060:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2220      	movs	r2, #32
 800b066:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b06a:	687b      	ldr	r3, [r7, #4]
 800b06c:	2200      	movs	r2, #0
 800b06e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	2200      	movs	r2, #0
 800b074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 800b078:	2300      	movs	r3, #0
}
 800b07a:	4618      	mov	r0, r3
 800b07c:	3708      	adds	r7, #8
 800b07e:	46bd      	mov	sp, r7
 800b080:	bd80      	pop	{r7, pc}
 800b082:	bf00      	nop
 800b084:	02008000 	.word	0x02008000

0800b088 <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 800b088:	b580      	push	{r7, lr}
 800b08a:	b082      	sub	sp, #8
 800b08c:	af00      	add	r7, sp, #0
 800b08e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	2b00      	cmp	r3, #0
 800b094:	d101      	bne.n	800b09a <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	e021      	b.n	800b0de <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	2224      	movs	r2, #36	@ 0x24
 800b09e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 800b0a2:	687b      	ldr	r3, [r7, #4]
 800b0a4:	681b      	ldr	r3, [r3, #0]
 800b0a6:	681a      	ldr	r2, [r3, #0]
 800b0a8:	687b      	ldr	r3, [r7, #4]
 800b0aa:	681b      	ldr	r3, [r3, #0]
 800b0ac:	f022 0201 	bic.w	r2, r2, #1
 800b0b0:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 800b0b2:	6878      	ldr	r0, [r7, #4]
 800b0b4:	f000 f821 	bl	800b0fa <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b0b8:	687b      	ldr	r3, [r7, #4]
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 800b0be:	687b      	ldr	r3, [r7, #4]
 800b0c0:	2200      	movs	r2, #0
 800b0c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800b0c6:	687b      	ldr	r3, [r7, #4]
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800b0cc:	687b      	ldr	r3, [r7, #4]
 800b0ce:	2200      	movs	r2, #0
 800b0d0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 800b0dc:	2300      	movs	r3, #0
}
 800b0de:	4618      	mov	r0, r3
 800b0e0:	3708      	adds	r7, #8
 800b0e2:	46bd      	mov	sp, r7
 800b0e4:	bd80      	pop	{r7, pc}

0800b0e6 <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 800b0e6:	b480      	push	{r7}
 800b0e8:	b083      	sub	sp, #12
 800b0ea:	af00      	add	r7, sp, #0
 800b0ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 800b0ee:	bf00      	nop
 800b0f0:	370c      	adds	r7, #12
 800b0f2:	46bd      	mov	sp, r7
 800b0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b0f8:	4770      	bx	lr

0800b0fa <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 800b0fa:	b480      	push	{r7}
 800b0fc:	b083      	sub	sp, #12
 800b0fe:	af00      	add	r7, sp, #0
 800b100:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 800b102:	bf00      	nop
 800b104:	370c      	adds	r7, #12
 800b106:	46bd      	mov	sp, r7
 800b108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b10c:	4770      	bx	lr
	...

0800b110 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b110:	b580      	push	{r7, lr}
 800b112:	b088      	sub	sp, #32
 800b114:	af02      	add	r7, sp, #8
 800b116:	60f8      	str	r0, [r7, #12]
 800b118:	4608      	mov	r0, r1
 800b11a:	4611      	mov	r1, r2
 800b11c:	461a      	mov	r2, r3
 800b11e:	4603      	mov	r3, r0
 800b120:	817b      	strh	r3, [r7, #10]
 800b122:	460b      	mov	r3, r1
 800b124:	813b      	strh	r3, [r7, #8]
 800b126:	4613      	mov	r3, r2
 800b128:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b12a:	68fb      	ldr	r3, [r7, #12]
 800b12c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b130:	b2db      	uxtb	r3, r3
 800b132:	2b20      	cmp	r3, #32
 800b134:	f040 80f9 	bne.w	800b32a <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 800b138:	6a3b      	ldr	r3, [r7, #32]
 800b13a:	2b00      	cmp	r3, #0
 800b13c:	d002      	beq.n	800b144 <HAL_I2C_Mem_Write+0x34>
 800b13e:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b140:	2b00      	cmp	r3, #0
 800b142:	d105      	bne.n	800b150 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b14a:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b14c:	2301      	movs	r3, #1
 800b14e:	e0ed      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b156:	2b01      	cmp	r3, #1
 800b158:	d101      	bne.n	800b15e <HAL_I2C_Mem_Write+0x4e>
 800b15a:	2302      	movs	r3, #2
 800b15c:	e0e6      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
 800b15e:	68fb      	ldr	r3, [r7, #12]
 800b160:	2201      	movs	r2, #1
 800b162:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b166:	f7fc fed7 	bl	8007f18 <HAL_GetTick>
 800b16a:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b16c:	697b      	ldr	r3, [r7, #20]
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2319      	movs	r3, #25
 800b172:	2201      	movs	r2, #1
 800b174:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b178:	68f8      	ldr	r0, [r7, #12]
 800b17a:	f000 fadd 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b17e:	4603      	mov	r3, r0
 800b180:	2b00      	cmp	r3, #0
 800b182:	d001      	beq.n	800b188 <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 800b184:	2301      	movs	r3, #1
 800b186:	e0d1      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800b188:	68fb      	ldr	r3, [r7, #12]
 800b18a:	2221      	movs	r2, #33	@ 0x21
 800b18c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b190:	68fb      	ldr	r3, [r7, #12]
 800b192:	2240      	movs	r2, #64	@ 0x40
 800b194:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b198:	68fb      	ldr	r3, [r7, #12]
 800b19a:	2200      	movs	r2, #0
 800b19c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	6a3a      	ldr	r2, [r7, #32]
 800b1a2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b1a4:	68fb      	ldr	r3, [r7, #12]
 800b1a6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b1a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	2200      	movs	r2, #0
 800b1ae:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b1b0:	88f8      	ldrh	r0, [r7, #6]
 800b1b2:	893a      	ldrh	r2, [r7, #8]
 800b1b4:	8979      	ldrh	r1, [r7, #10]
 800b1b6:	697b      	ldr	r3, [r7, #20]
 800b1b8:	9301      	str	r3, [sp, #4]
 800b1ba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b1bc:	9300      	str	r3, [sp, #0]
 800b1be:	4603      	mov	r3, r0
 800b1c0:	68f8      	ldr	r0, [r7, #12]
 800b1c2:	f000 f9ed 	bl	800b5a0 <I2C_RequestMemoryWrite>
 800b1c6:	4603      	mov	r3, r0
 800b1c8:	2b00      	cmp	r3, #0
 800b1ca:	d005      	beq.n	800b1d8 <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b1cc:	68fb      	ldr	r3, [r7, #12]
 800b1ce:	2200      	movs	r2, #0
 800b1d0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b1d4:	2301      	movs	r3, #1
 800b1d6:	e0a9      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b1d8:	68fb      	ldr	r3, [r7, #12]
 800b1da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b1dc:	b29b      	uxth	r3, r3
 800b1de:	2bff      	cmp	r3, #255	@ 0xff
 800b1e0:	d90e      	bls.n	800b200 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	22ff      	movs	r2, #255	@ 0xff
 800b1e6:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800b1e8:	68fb      	ldr	r3, [r7, #12]
 800b1ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b1ec:	b2da      	uxtb	r2, r3
 800b1ee:	8979      	ldrh	r1, [r7, #10]
 800b1f0:	2300      	movs	r3, #0
 800b1f2:	9300      	str	r3, [sp, #0]
 800b1f4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b1f8:	68f8      	ldr	r0, [r7, #12]
 800b1fa:	f000 fc61 	bl	800bac0 <I2C_TransferConfig>
 800b1fe:	e00f      	b.n	800b220 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b200:	68fb      	ldr	r3, [r7, #12]
 800b202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b204:	b29a      	uxth	r2, r3
 800b206:	68fb      	ldr	r3, [r7, #12]
 800b208:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b20e:	b2da      	uxtb	r2, r3
 800b210:	8979      	ldrh	r1, [r7, #10]
 800b212:	2300      	movs	r3, #0
 800b214:	9300      	str	r3, [sp, #0]
 800b216:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b21a:	68f8      	ldr	r0, [r7, #12]
 800b21c:	f000 fc50 	bl	800bac0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b220:	697a      	ldr	r2, [r7, #20]
 800b222:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b224:	68f8      	ldr	r0, [r7, #12]
 800b226:	f000 fae0 	bl	800b7ea <I2C_WaitOnTXISFlagUntilTimeout>
 800b22a:	4603      	mov	r3, r0
 800b22c:	2b00      	cmp	r3, #0
 800b22e:	d001      	beq.n	800b234 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 800b230:	2301      	movs	r3, #1
 800b232:	e07b      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b238:	781a      	ldrb	r2, [r3, #0]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b240:	68fb      	ldr	r3, [r7, #12]
 800b242:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b244:	1c5a      	adds	r2, r3, #1
 800b246:	68fb      	ldr	r3, [r7, #12]
 800b248:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800b24a:	68fb      	ldr	r3, [r7, #12]
 800b24c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b24e:	b29b      	uxth	r3, r3
 800b250:	3b01      	subs	r3, #1
 800b252:	b29a      	uxth	r2, r3
 800b254:	68fb      	ldr	r3, [r7, #12]
 800b256:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b25c:	3b01      	subs	r3, #1
 800b25e:	b29a      	uxth	r2, r3
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b264:	68fb      	ldr	r3, [r7, #12]
 800b266:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b268:	b29b      	uxth	r3, r3
 800b26a:	2b00      	cmp	r3, #0
 800b26c:	d034      	beq.n	800b2d8 <HAL_I2C_Mem_Write+0x1c8>
 800b26e:	68fb      	ldr	r3, [r7, #12]
 800b270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b272:	2b00      	cmp	r3, #0
 800b274:	d130      	bne.n	800b2d8 <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b276:	697b      	ldr	r3, [r7, #20]
 800b278:	9300      	str	r3, [sp, #0]
 800b27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b27c:	2200      	movs	r2, #0
 800b27e:	2180      	movs	r1, #128	@ 0x80
 800b280:	68f8      	ldr	r0, [r7, #12]
 800b282:	f000 fa59 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d001      	beq.n	800b290 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 800b28c:	2301      	movs	r3, #1
 800b28e:	e04d      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b290:	68fb      	ldr	r3, [r7, #12]
 800b292:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b294:	b29b      	uxth	r3, r3
 800b296:	2bff      	cmp	r3, #255	@ 0xff
 800b298:	d90e      	bls.n	800b2b8 <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	22ff      	movs	r2, #255	@ 0xff
 800b29e:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2a4:	b2da      	uxtb	r2, r3
 800b2a6:	8979      	ldrh	r1, [r7, #10]
 800b2a8:	2300      	movs	r3, #0
 800b2aa:	9300      	str	r3, [sp, #0]
 800b2ac:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b2b0:	68f8      	ldr	r0, [r7, #12]
 800b2b2:	f000 fc05 	bl	800bac0 <I2C_TransferConfig>
 800b2b6:	e00f      	b.n	800b2d8 <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2bc:	b29a      	uxth	r2, r3
 800b2be:	68fb      	ldr	r3, [r7, #12]
 800b2c0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b2c2:	68fb      	ldr	r3, [r7, #12]
 800b2c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b2c6:	b2da      	uxtb	r2, r3
 800b2c8:	8979      	ldrh	r1, [r7, #10]
 800b2ca:	2300      	movs	r3, #0
 800b2cc:	9300      	str	r3, [sp, #0]
 800b2ce:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b2d2:	68f8      	ldr	r0, [r7, #12]
 800b2d4:	f000 fbf4 	bl	800bac0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 800b2d8:	68fb      	ldr	r3, [r7, #12]
 800b2da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b2dc:	b29b      	uxth	r3, r3
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d19e      	bne.n	800b220 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b2e2:	697a      	ldr	r2, [r7, #20]
 800b2e4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b2e6:	68f8      	ldr	r0, [r7, #12]
 800b2e8:	f000 fac6 	bl	800b878 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b2ec:	4603      	mov	r3, r0
 800b2ee:	2b00      	cmp	r3, #0
 800b2f0:	d001      	beq.n	800b2f6 <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 800b2f2:	2301      	movs	r3, #1
 800b2f4:	e01a      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b2f6:	68fb      	ldr	r3, [r7, #12]
 800b2f8:	681b      	ldr	r3, [r3, #0]
 800b2fa:	2220      	movs	r2, #32
 800b2fc:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	681b      	ldr	r3, [r3, #0]
 800b302:	6859      	ldr	r1, [r3, #4]
 800b304:	68fb      	ldr	r3, [r7, #12]
 800b306:	681a      	ldr	r2, [r3, #0]
 800b308:	4b0a      	ldr	r3, [pc, #40]	@ (800b334 <HAL_I2C_Mem_Write+0x224>)
 800b30a:	400b      	ands	r3, r1
 800b30c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	2220      	movs	r2, #32
 800b312:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	2200      	movs	r2, #0
 800b31a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b31e:	68fb      	ldr	r3, [r7, #12]
 800b320:	2200      	movs	r2, #0
 800b322:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b326:	2300      	movs	r3, #0
 800b328:	e000      	b.n	800b32c <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 800b32a:	2302      	movs	r3, #2
  }
}
 800b32c:	4618      	mov	r0, r3
 800b32e:	3718      	adds	r7, #24
 800b330:	46bd      	mov	sp, r7
 800b332:	bd80      	pop	{r7, pc}
 800b334:	fe00e800 	.word	0xfe00e800

0800b338 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	b088      	sub	sp, #32
 800b33c:	af02      	add	r7, sp, #8
 800b33e:	60f8      	str	r0, [r7, #12]
 800b340:	4608      	mov	r0, r1
 800b342:	4611      	mov	r1, r2
 800b344:	461a      	mov	r2, r3
 800b346:	4603      	mov	r3, r0
 800b348:	817b      	strh	r3, [r7, #10]
 800b34a:	460b      	mov	r3, r1
 800b34c:	813b      	strh	r3, [r7, #8]
 800b34e:	4613      	mov	r3, r2
 800b350:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800b352:	68fb      	ldr	r3, [r7, #12]
 800b354:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b358:	b2db      	uxtb	r3, r3
 800b35a:	2b20      	cmp	r3, #32
 800b35c:	f040 80fd 	bne.w	800b55a <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 800b360:	6a3b      	ldr	r3, [r7, #32]
 800b362:	2b00      	cmp	r3, #0
 800b364:	d002      	beq.n	800b36c <HAL_I2C_Mem_Read+0x34>
 800b366:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d105      	bne.n	800b378 <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 800b36c:	68fb      	ldr	r3, [r7, #12]
 800b36e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800b372:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 800b374:	2301      	movs	r3, #1
 800b376:	e0f1      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800b378:	68fb      	ldr	r3, [r7, #12]
 800b37a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800b37e:	2b01      	cmp	r3, #1
 800b380:	d101      	bne.n	800b386 <HAL_I2C_Mem_Read+0x4e>
 800b382:	2302      	movs	r3, #2
 800b384:	e0ea      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	2201      	movs	r2, #1
 800b38a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 800b38e:	f7fc fdc3 	bl	8007f18 <HAL_GetTick>
 800b392:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	9300      	str	r3, [sp, #0]
 800b398:	2319      	movs	r3, #25
 800b39a:	2201      	movs	r2, #1
 800b39c:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 800b3a0:	68f8      	ldr	r0, [r7, #12]
 800b3a2:	f000 f9c9 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b3a6:	4603      	mov	r3, r0
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	d001      	beq.n	800b3b0 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 800b3ac:	2301      	movs	r3, #1
 800b3ae:	e0d5      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 800b3b0:	68fb      	ldr	r3, [r7, #12]
 800b3b2:	2222      	movs	r2, #34	@ 0x22
 800b3b4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800b3b8:	68fb      	ldr	r3, [r7, #12]
 800b3ba:	2240      	movs	r2, #64	@ 0x40
 800b3bc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800b3c0:	68fb      	ldr	r3, [r7, #12]
 800b3c2:	2200      	movs	r2, #0
 800b3c4:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	6a3a      	ldr	r2, [r7, #32]
 800b3ca:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 800b3cc:	68fb      	ldr	r3, [r7, #12]
 800b3ce:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800b3d0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 800b3d2:	68fb      	ldr	r3, [r7, #12]
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800b3d8:	88f8      	ldrh	r0, [r7, #6]
 800b3da:	893a      	ldrh	r2, [r7, #8]
 800b3dc:	8979      	ldrh	r1, [r7, #10]
 800b3de:	697b      	ldr	r3, [r7, #20]
 800b3e0:	9301      	str	r3, [sp, #4]
 800b3e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b3e4:	9300      	str	r3, [sp, #0]
 800b3e6:	4603      	mov	r3, r0
 800b3e8:	68f8      	ldr	r0, [r7, #12]
 800b3ea:	f000 f92d 	bl	800b648 <I2C_RequestMemoryRead>
 800b3ee:	4603      	mov	r3, r0
 800b3f0:	2b00      	cmp	r3, #0
 800b3f2:	d005      	beq.n	800b400 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	2200      	movs	r2, #0
 800b3f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 800b3fc:	2301      	movs	r3, #1
 800b3fe:	e0ad      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b400:	68fb      	ldr	r3, [r7, #12]
 800b402:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b404:	b29b      	uxth	r3, r3
 800b406:	2bff      	cmp	r3, #255	@ 0xff
 800b408:	d90e      	bls.n	800b428 <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800b40a:	68fb      	ldr	r3, [r7, #12]
 800b40c:	22ff      	movs	r2, #255	@ 0xff
 800b40e:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 800b410:	68fb      	ldr	r3, [r7, #12]
 800b412:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b414:	b2da      	uxtb	r2, r3
 800b416:	8979      	ldrh	r1, [r7, #10]
 800b418:	4b52      	ldr	r3, [pc, #328]	@ (800b564 <HAL_I2C_Mem_Read+0x22c>)
 800b41a:	9300      	str	r3, [sp, #0]
 800b41c:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b420:	68f8      	ldr	r0, [r7, #12]
 800b422:	f000 fb4d 	bl	800bac0 <I2C_TransferConfig>
 800b426:	e00f      	b.n	800b448 <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800b428:	68fb      	ldr	r3, [r7, #12]
 800b42a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b42c:	b29a      	uxth	r2, r3
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b432:	68fb      	ldr	r3, [r7, #12]
 800b434:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b436:	b2da      	uxtb	r2, r3
 800b438:	8979      	ldrh	r1, [r7, #10]
 800b43a:	4b4a      	ldr	r3, [pc, #296]	@ (800b564 <HAL_I2C_Mem_Read+0x22c>)
 800b43c:	9300      	str	r3, [sp, #0]
 800b43e:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b442:	68f8      	ldr	r0, [r7, #12]
 800b444:	f000 fb3c 	bl	800bac0 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 800b448:	697b      	ldr	r3, [r7, #20]
 800b44a:	9300      	str	r3, [sp, #0]
 800b44c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b44e:	2200      	movs	r2, #0
 800b450:	2104      	movs	r1, #4
 800b452:	68f8      	ldr	r0, [r7, #12]
 800b454:	f000 f970 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b458:	4603      	mov	r3, r0
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	d001      	beq.n	800b462 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 800b45e:	2301      	movs	r3, #1
 800b460:	e07c      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800b462:	68fb      	ldr	r3, [r7, #12]
 800b464:	681b      	ldr	r3, [r3, #0]
 800b466:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800b468:	68fb      	ldr	r3, [r7, #12]
 800b46a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b46c:	b2d2      	uxtb	r2, r2
 800b46e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800b474:	1c5a      	adds	r2, r3, #1
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b47e:	3b01      	subs	r3, #1
 800b480:	b29a      	uxth	r2, r3
 800b482:	68fb      	ldr	r3, [r7, #12]
 800b484:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800b486:	68fb      	ldr	r3, [r7, #12]
 800b488:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b48a:	b29b      	uxth	r3, r3
 800b48c:	3b01      	subs	r3, #1
 800b48e:	b29a      	uxth	r2, r3
 800b490:	68fb      	ldr	r3, [r7, #12]
 800b492:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800b494:	68fb      	ldr	r3, [r7, #12]
 800b496:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b498:	b29b      	uxth	r3, r3
 800b49a:	2b00      	cmp	r3, #0
 800b49c:	d034      	beq.n	800b508 <HAL_I2C_Mem_Read+0x1d0>
 800b49e:	68fb      	ldr	r3, [r7, #12]
 800b4a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4a2:	2b00      	cmp	r3, #0
 800b4a4:	d130      	bne.n	800b508 <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 800b4a6:	697b      	ldr	r3, [r7, #20]
 800b4a8:	9300      	str	r3, [sp, #0]
 800b4aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800b4ac:	2200      	movs	r2, #0
 800b4ae:	2180      	movs	r1, #128	@ 0x80
 800b4b0:	68f8      	ldr	r0, [r7, #12]
 800b4b2:	f000 f941 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b4b6:	4603      	mov	r3, r0
 800b4b8:	2b00      	cmp	r3, #0
 800b4ba:	d001      	beq.n	800b4c0 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 800b4bc:	2301      	movs	r3, #1
 800b4be:	e04d      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800b4c0:	68fb      	ldr	r3, [r7, #12]
 800b4c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4c4:	b29b      	uxth	r3, r3
 800b4c6:	2bff      	cmp	r3, #255	@ 0xff
 800b4c8:	d90e      	bls.n	800b4e8 <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	22ff      	movs	r2, #255	@ 0xff
 800b4ce:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 800b4d0:	68fb      	ldr	r3, [r7, #12]
 800b4d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4d4:	b2da      	uxtb	r2, r3
 800b4d6:	8979      	ldrh	r1, [r7, #10]
 800b4d8:	2300      	movs	r3, #0
 800b4da:	9300      	str	r3, [sp, #0]
 800b4dc:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b4e0:	68f8      	ldr	r0, [r7, #12]
 800b4e2:	f000 faed 	bl	800bac0 <I2C_TransferConfig>
 800b4e6:	e00f      	b.n	800b508 <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b4ec:	b29a      	uxth	r2, r3
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800b4f2:	68fb      	ldr	r3, [r7, #12]
 800b4f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800b4f6:	b2da      	uxtb	r2, r3
 800b4f8:	8979      	ldrh	r1, [r7, #10]
 800b4fa:	2300      	movs	r3, #0
 800b4fc:	9300      	str	r3, [sp, #0]
 800b4fe:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800b502:	68f8      	ldr	r0, [r7, #12]
 800b504:	f000 fadc 	bl	800bac0 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 800b508:	68fb      	ldr	r3, [r7, #12]
 800b50a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800b50c:	b29b      	uxth	r3, r3
 800b50e:	2b00      	cmp	r3, #0
 800b510:	d19a      	bne.n	800b448 <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800b512:	697a      	ldr	r2, [r7, #20]
 800b514:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800b516:	68f8      	ldr	r0, [r7, #12]
 800b518:	f000 f9ae 	bl	800b878 <I2C_WaitOnSTOPFlagUntilTimeout>
 800b51c:	4603      	mov	r3, r0
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d001      	beq.n	800b526 <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 800b522:	2301      	movs	r3, #1
 800b524:	e01a      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b526:	68fb      	ldr	r3, [r7, #12]
 800b528:	681b      	ldr	r3, [r3, #0]
 800b52a:	2220      	movs	r2, #32
 800b52c:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	681b      	ldr	r3, [r3, #0]
 800b532:	6859      	ldr	r1, [r3, #4]
 800b534:	68fb      	ldr	r3, [r7, #12]
 800b536:	681a      	ldr	r2, [r3, #0]
 800b538:	4b0b      	ldr	r3, [pc, #44]	@ (800b568 <HAL_I2C_Mem_Read+0x230>)
 800b53a:	400b      	ands	r3, r1
 800b53c:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 800b53e:	68fb      	ldr	r3, [r7, #12]
 800b540:	2220      	movs	r2, #32
 800b542:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 800b546:	68fb      	ldr	r3, [r7, #12]
 800b548:	2200      	movs	r2, #0
 800b54a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	2200      	movs	r2, #0
 800b552:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800b556:	2300      	movs	r3, #0
 800b558:	e000      	b.n	800b55c <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 800b55a:	2302      	movs	r3, #2
  }
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}
 800b564:	80002400 	.word	0x80002400
 800b568:	fe00e800 	.word	0xfe00e800

0800b56c <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 800b56c:	b480      	push	{r7}
 800b56e:	b083      	sub	sp, #12
 800b570:	af00      	add	r7, sp, #0
 800b572:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800b57a:	b2db      	uxtb	r3, r3
}
 800b57c:	4618      	mov	r0, r3
 800b57e:	370c      	adds	r7, #12
 800b580:	46bd      	mov	sp, r7
 800b582:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b586:	4770      	bx	lr

0800b588 <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 800b588:	b480      	push	{r7}
 800b58a:	b083      	sub	sp, #12
 800b58c:	af00      	add	r7, sp, #0
 800b58e:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 800b590:	687b      	ldr	r3, [r7, #4]
 800b592:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 800b594:	4618      	mov	r0, r3
 800b596:	370c      	adds	r7, #12
 800b598:	46bd      	mov	sp, r7
 800b59a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b59e:	4770      	bx	lr

0800b5a0 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 800b5a0:	b580      	push	{r7, lr}
 800b5a2:	b086      	sub	sp, #24
 800b5a4:	af02      	add	r7, sp, #8
 800b5a6:	60f8      	str	r0, [r7, #12]
 800b5a8:	4608      	mov	r0, r1
 800b5aa:	4611      	mov	r1, r2
 800b5ac:	461a      	mov	r2, r3
 800b5ae:	4603      	mov	r3, r0
 800b5b0:	817b      	strh	r3, [r7, #10]
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	813b      	strh	r3, [r7, #8]
 800b5b6:	4613      	mov	r3, r2
 800b5b8:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 800b5ba:	88fb      	ldrh	r3, [r7, #6]
 800b5bc:	b2da      	uxtb	r2, r3
 800b5be:	8979      	ldrh	r1, [r7, #10]
 800b5c0:	4b20      	ldr	r3, [pc, #128]	@ (800b644 <I2C_RequestMemoryWrite+0xa4>)
 800b5c2:	9300      	str	r3, [sp, #0]
 800b5c4:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 800b5c8:	68f8      	ldr	r0, [r7, #12]
 800b5ca:	f000 fa79 	bl	800bac0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b5ce:	69fa      	ldr	r2, [r7, #28]
 800b5d0:	69b9      	ldr	r1, [r7, #24]
 800b5d2:	68f8      	ldr	r0, [r7, #12]
 800b5d4:	f000 f909 	bl	800b7ea <I2C_WaitOnTXISFlagUntilTimeout>
 800b5d8:	4603      	mov	r3, r0
 800b5da:	2b00      	cmp	r3, #0
 800b5dc:	d001      	beq.n	800b5e2 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 800b5de:	2301      	movs	r3, #1
 800b5e0:	e02c      	b.n	800b63c <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b5e2:	88fb      	ldrh	r3, [r7, #6]
 800b5e4:	2b01      	cmp	r3, #1
 800b5e6:	d105      	bne.n	800b5f4 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b5e8:	893b      	ldrh	r3, [r7, #8]
 800b5ea:	b2da      	uxtb	r2, r3
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	681b      	ldr	r3, [r3, #0]
 800b5f0:	629a      	str	r2, [r3, #40]	@ 0x28
 800b5f2:	e015      	b.n	800b620 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b5f4:	893b      	ldrh	r3, [r7, #8]
 800b5f6:	0a1b      	lsrs	r3, r3, #8
 800b5f8:	b29b      	uxth	r3, r3
 800b5fa:	b2da      	uxtb	r2, r3
 800b5fc:	68fb      	ldr	r3, [r7, #12]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b602:	69fa      	ldr	r2, [r7, #28]
 800b604:	69b9      	ldr	r1, [r7, #24]
 800b606:	68f8      	ldr	r0, [r7, #12]
 800b608:	f000 f8ef 	bl	800b7ea <I2C_WaitOnTXISFlagUntilTimeout>
 800b60c:	4603      	mov	r3, r0
 800b60e:	2b00      	cmp	r3, #0
 800b610:	d001      	beq.n	800b616 <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 800b612:	2301      	movs	r3, #1
 800b614:	e012      	b.n	800b63c <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b616:	893b      	ldrh	r3, [r7, #8]
 800b618:	b2da      	uxtb	r2, r3
 800b61a:	68fb      	ldr	r3, [r7, #12]
 800b61c:	681b      	ldr	r3, [r3, #0]
 800b61e:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 800b620:	69fb      	ldr	r3, [r7, #28]
 800b622:	9300      	str	r3, [sp, #0]
 800b624:	69bb      	ldr	r3, [r7, #24]
 800b626:	2200      	movs	r2, #0
 800b628:	2180      	movs	r1, #128	@ 0x80
 800b62a:	68f8      	ldr	r0, [r7, #12]
 800b62c:	f000 f884 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b630:	4603      	mov	r3, r0
 800b632:	2b00      	cmp	r3, #0
 800b634:	d001      	beq.n	800b63a <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 800b636:	2301      	movs	r3, #1
 800b638:	e000      	b.n	800b63c <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 800b63a:	2300      	movs	r3, #0
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3710      	adds	r7, #16
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	80002000 	.word	0x80002000

0800b648 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 800b648:	b580      	push	{r7, lr}
 800b64a:	b086      	sub	sp, #24
 800b64c:	af02      	add	r7, sp, #8
 800b64e:	60f8      	str	r0, [r7, #12]
 800b650:	4608      	mov	r0, r1
 800b652:	4611      	mov	r1, r2
 800b654:	461a      	mov	r2, r3
 800b656:	4603      	mov	r3, r0
 800b658:	817b      	strh	r3, [r7, #10]
 800b65a:	460b      	mov	r3, r1
 800b65c:	813b      	strh	r3, [r7, #8]
 800b65e:	4613      	mov	r3, r2
 800b660:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 800b662:	88fb      	ldrh	r3, [r7, #6]
 800b664:	b2da      	uxtb	r2, r3
 800b666:	8979      	ldrh	r1, [r7, #10]
 800b668:	4b20      	ldr	r3, [pc, #128]	@ (800b6ec <I2C_RequestMemoryRead+0xa4>)
 800b66a:	9300      	str	r3, [sp, #0]
 800b66c:	2300      	movs	r3, #0
 800b66e:	68f8      	ldr	r0, [r7, #12]
 800b670:	f000 fa26 	bl	800bac0 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b674:	69fa      	ldr	r2, [r7, #28]
 800b676:	69b9      	ldr	r1, [r7, #24]
 800b678:	68f8      	ldr	r0, [r7, #12]
 800b67a:	f000 f8b6 	bl	800b7ea <I2C_WaitOnTXISFlagUntilTimeout>
 800b67e:	4603      	mov	r3, r0
 800b680:	2b00      	cmp	r3, #0
 800b682:	d001      	beq.n	800b688 <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 800b684:	2301      	movs	r3, #1
 800b686:	e02c      	b.n	800b6e2 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800b688:	88fb      	ldrh	r3, [r7, #6]
 800b68a:	2b01      	cmp	r3, #1
 800b68c:	d105      	bne.n	800b69a <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b68e:	893b      	ldrh	r3, [r7, #8]
 800b690:	b2da      	uxtb	r2, r3
 800b692:	68fb      	ldr	r3, [r7, #12]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	629a      	str	r2, [r3, #40]	@ 0x28
 800b698:	e015      	b.n	800b6c6 <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 800b69a:	893b      	ldrh	r3, [r7, #8]
 800b69c:	0a1b      	lsrs	r3, r3, #8
 800b69e:	b29b      	uxth	r3, r3
 800b6a0:	b2da      	uxtb	r2, r3
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800b6a8:	69fa      	ldr	r2, [r7, #28]
 800b6aa:	69b9      	ldr	r1, [r7, #24]
 800b6ac:	68f8      	ldr	r0, [r7, #12]
 800b6ae:	f000 f89c 	bl	800b7ea <I2C_WaitOnTXISFlagUntilTimeout>
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	2b00      	cmp	r3, #0
 800b6b6:	d001      	beq.n	800b6bc <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 800b6b8:	2301      	movs	r3, #1
 800b6ba:	e012      	b.n	800b6e2 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 800b6bc:	893b      	ldrh	r3, [r7, #8]
 800b6be:	b2da      	uxtb	r2, r3
 800b6c0:	68fb      	ldr	r3, [r7, #12]
 800b6c2:	681b      	ldr	r3, [r3, #0]
 800b6c4:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 800b6c6:	69fb      	ldr	r3, [r7, #28]
 800b6c8:	9300      	str	r3, [sp, #0]
 800b6ca:	69bb      	ldr	r3, [r7, #24]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	2140      	movs	r1, #64	@ 0x40
 800b6d0:	68f8      	ldr	r0, [r7, #12]
 800b6d2:	f000 f831 	bl	800b738 <I2C_WaitOnFlagUntilTimeout>
 800b6d6:	4603      	mov	r3, r0
 800b6d8:	2b00      	cmp	r3, #0
 800b6da:	d001      	beq.n	800b6e0 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 800b6dc:	2301      	movs	r3, #1
 800b6de:	e000      	b.n	800b6e2 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 800b6e0:	2300      	movs	r3, #0
}
 800b6e2:	4618      	mov	r0, r3
 800b6e4:	3710      	adds	r7, #16
 800b6e6:	46bd      	mov	sp, r7
 800b6e8:	bd80      	pop	{r7, pc}
 800b6ea:	bf00      	nop
 800b6ec:	80002000 	.word	0x80002000

0800b6f0 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800b6f0:	b480      	push	{r7}
 800b6f2:	b083      	sub	sp, #12
 800b6f4:	af00      	add	r7, sp, #0
 800b6f6:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800b6f8:	687b      	ldr	r3, [r7, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	699b      	ldr	r3, [r3, #24]
 800b6fe:	f003 0302 	and.w	r3, r3, #2
 800b702:	2b02      	cmp	r3, #2
 800b704:	d103      	bne.n	800b70e <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800b706:	687b      	ldr	r3, [r7, #4]
 800b708:	681b      	ldr	r3, [r3, #0]
 800b70a:	2200      	movs	r2, #0
 800b70c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800b70e:	687b      	ldr	r3, [r7, #4]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	699b      	ldr	r3, [r3, #24]
 800b714:	f003 0301 	and.w	r3, r3, #1
 800b718:	2b01      	cmp	r3, #1
 800b71a:	d007      	beq.n	800b72c <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800b71c:	687b      	ldr	r3, [r7, #4]
 800b71e:	681b      	ldr	r3, [r3, #0]
 800b720:	699a      	ldr	r2, [r3, #24]
 800b722:	687b      	ldr	r3, [r7, #4]
 800b724:	681b      	ldr	r3, [r3, #0]
 800b726:	f042 0201 	orr.w	r2, r2, #1
 800b72a:	619a      	str	r2, [r3, #24]
  }
}
 800b72c:	bf00      	nop
 800b72e:	370c      	adds	r7, #12
 800b730:	46bd      	mov	sp, r7
 800b732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b736:	4770      	bx	lr

0800b738 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 800b738:	b580      	push	{r7, lr}
 800b73a:	b084      	sub	sp, #16
 800b73c:	af00      	add	r7, sp, #0
 800b73e:	60f8      	str	r0, [r7, #12]
 800b740:	60b9      	str	r1, [r7, #8]
 800b742:	603b      	str	r3, [r7, #0]
 800b744:	4613      	mov	r3, r2
 800b746:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b748:	e03b      	b.n	800b7c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b74a:	69ba      	ldr	r2, [r7, #24]
 800b74c:	6839      	ldr	r1, [r7, #0]
 800b74e:	68f8      	ldr	r0, [r7, #12]
 800b750:	f000 f8d6 	bl	800b900 <I2C_IsErrorOccurred>
 800b754:	4603      	mov	r3, r0
 800b756:	2b00      	cmp	r3, #0
 800b758:	d001      	beq.n	800b75e <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 800b75a:	2301      	movs	r3, #1
 800b75c:	e041      	b.n	800b7e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b75e:	683b      	ldr	r3, [r7, #0]
 800b760:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b764:	d02d      	beq.n	800b7c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b766:	f7fc fbd7 	bl	8007f18 <HAL_GetTick>
 800b76a:	4602      	mov	r2, r0
 800b76c:	69bb      	ldr	r3, [r7, #24]
 800b76e:	1ad3      	subs	r3, r2, r3
 800b770:	683a      	ldr	r2, [r7, #0]
 800b772:	429a      	cmp	r2, r3
 800b774:	d302      	bcc.n	800b77c <I2C_WaitOnFlagUntilTimeout+0x44>
 800b776:	683b      	ldr	r3, [r7, #0]
 800b778:	2b00      	cmp	r3, #0
 800b77a:	d122      	bne.n	800b7c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800b77c:	68fb      	ldr	r3, [r7, #12]
 800b77e:	681b      	ldr	r3, [r3, #0]
 800b780:	699a      	ldr	r2, [r3, #24]
 800b782:	68bb      	ldr	r3, [r7, #8]
 800b784:	4013      	ands	r3, r2
 800b786:	68ba      	ldr	r2, [r7, #8]
 800b788:	429a      	cmp	r2, r3
 800b78a:	bf0c      	ite	eq
 800b78c:	2301      	moveq	r3, #1
 800b78e:	2300      	movne	r3, #0
 800b790:	b2db      	uxtb	r3, r3
 800b792:	461a      	mov	r2, r3
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	429a      	cmp	r2, r3
 800b798:	d113      	bne.n	800b7c2 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b79a:	68fb      	ldr	r3, [r7, #12]
 800b79c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b79e:	f043 0220 	orr.w	r2, r3, #32
 800b7a2:	68fb      	ldr	r3, [r7, #12]
 800b7a4:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	2220      	movs	r2, #32
 800b7aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	2200      	movs	r2, #0
 800b7b2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2200      	movs	r2, #0
 800b7ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 800b7be:	2301      	movs	r3, #1
 800b7c0:	e00f      	b.n	800b7e2 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800b7c2:	68fb      	ldr	r3, [r7, #12]
 800b7c4:	681b      	ldr	r3, [r3, #0]
 800b7c6:	699a      	ldr	r2, [r3, #24]
 800b7c8:	68bb      	ldr	r3, [r7, #8]
 800b7ca:	4013      	ands	r3, r2
 800b7cc:	68ba      	ldr	r2, [r7, #8]
 800b7ce:	429a      	cmp	r2, r3
 800b7d0:	bf0c      	ite	eq
 800b7d2:	2301      	moveq	r3, #1
 800b7d4:	2300      	movne	r3, #0
 800b7d6:	b2db      	uxtb	r3, r3
 800b7d8:	461a      	mov	r2, r3
 800b7da:	79fb      	ldrb	r3, [r7, #7]
 800b7dc:	429a      	cmp	r2, r3
 800b7de:	d0b4      	beq.n	800b74a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800b7e0:	2300      	movs	r3, #0
}
 800b7e2:	4618      	mov	r0, r3
 800b7e4:	3710      	adds	r7, #16
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	bd80      	pop	{r7, pc}

0800b7ea <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b7ea:	b580      	push	{r7, lr}
 800b7ec:	b084      	sub	sp, #16
 800b7ee:	af00      	add	r7, sp, #0
 800b7f0:	60f8      	str	r0, [r7, #12]
 800b7f2:	60b9      	str	r1, [r7, #8]
 800b7f4:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b7f6:	e033      	b.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b7f8:	687a      	ldr	r2, [r7, #4]
 800b7fa:	68b9      	ldr	r1, [r7, #8]
 800b7fc:	68f8      	ldr	r0, [r7, #12]
 800b7fe:	f000 f87f 	bl	800b900 <I2C_IsErrorOccurred>
 800b802:	4603      	mov	r3, r0
 800b804:	2b00      	cmp	r3, #0
 800b806:	d001      	beq.n	800b80c <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b808:	2301      	movs	r3, #1
 800b80a:	e031      	b.n	800b870 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b80c:	68bb      	ldr	r3, [r7, #8]
 800b80e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b812:	d025      	beq.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b814:	f7fc fb80 	bl	8007f18 <HAL_GetTick>
 800b818:	4602      	mov	r2, r0
 800b81a:	687b      	ldr	r3, [r7, #4]
 800b81c:	1ad3      	subs	r3, r2, r3
 800b81e:	68ba      	ldr	r2, [r7, #8]
 800b820:	429a      	cmp	r2, r3
 800b822:	d302      	bcc.n	800b82a <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 800b824:	68bb      	ldr	r3, [r7, #8]
 800b826:	2b00      	cmp	r3, #0
 800b828:	d11a      	bne.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 800b82a:	68fb      	ldr	r3, [r7, #12]
 800b82c:	681b      	ldr	r3, [r3, #0]
 800b82e:	699b      	ldr	r3, [r3, #24]
 800b830:	f003 0302 	and.w	r3, r3, #2
 800b834:	2b02      	cmp	r3, #2
 800b836:	d013      	beq.n	800b860 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b838:	68fb      	ldr	r3, [r7, #12]
 800b83a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b83c:	f043 0220 	orr.w	r2, r3, #32
 800b840:	68fb      	ldr	r3, [r7, #12]
 800b842:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 800b844:	68fb      	ldr	r3, [r7, #12]
 800b846:	2220      	movs	r2, #32
 800b848:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800b84c:	68fb      	ldr	r3, [r7, #12]
 800b84e:	2200      	movs	r2, #0
 800b850:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	2200      	movs	r2, #0
 800b858:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800b85c:	2301      	movs	r3, #1
 800b85e:	e007      	b.n	800b870 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 800b860:	68fb      	ldr	r3, [r7, #12]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	f003 0302 	and.w	r3, r3, #2
 800b86a:	2b02      	cmp	r3, #2
 800b86c:	d1c4      	bne.n	800b7f8 <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800b86e:	2300      	movs	r3, #0
}
 800b870:	4618      	mov	r0, r3
 800b872:	3710      	adds	r7, #16
 800b874:	46bd      	mov	sp, r7
 800b876:	bd80      	pop	{r7, pc}

0800b878 <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 800b878:	b580      	push	{r7, lr}
 800b87a:	b084      	sub	sp, #16
 800b87c:	af00      	add	r7, sp, #0
 800b87e:	60f8      	str	r0, [r7, #12]
 800b880:	60b9      	str	r1, [r7, #8]
 800b882:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b884:	e02f      	b.n	800b8e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 800b886:	687a      	ldr	r2, [r7, #4]
 800b888:	68b9      	ldr	r1, [r7, #8]
 800b88a:	68f8      	ldr	r0, [r7, #12]
 800b88c:	f000 f838 	bl	800b900 <I2C_IsErrorOccurred>
 800b890:	4603      	mov	r3, r0
 800b892:	2b00      	cmp	r3, #0
 800b894:	d001      	beq.n	800b89a <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 800b896:	2301      	movs	r3, #1
 800b898:	e02d      	b.n	800b8f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800b89a:	f7fc fb3d 	bl	8007f18 <HAL_GetTick>
 800b89e:	4602      	mov	r2, r0
 800b8a0:	687b      	ldr	r3, [r7, #4]
 800b8a2:	1ad3      	subs	r3, r2, r3
 800b8a4:	68ba      	ldr	r2, [r7, #8]
 800b8a6:	429a      	cmp	r2, r3
 800b8a8:	d302      	bcc.n	800b8b0 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 800b8aa:	68bb      	ldr	r3, [r7, #8]
 800b8ac:	2b00      	cmp	r3, #0
 800b8ae:	d11a      	bne.n	800b8e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 800b8b0:	68fb      	ldr	r3, [r7, #12]
 800b8b2:	681b      	ldr	r3, [r3, #0]
 800b8b4:	699b      	ldr	r3, [r3, #24]
 800b8b6:	f003 0320 	and.w	r3, r3, #32
 800b8ba:	2b20      	cmp	r3, #32
 800b8bc:	d013      	beq.n	800b8e6 <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800b8c2:	f043 0220 	orr.w	r2, r3, #32
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 800b8ca:	68fb      	ldr	r3, [r7, #12]
 800b8cc:	2220      	movs	r2, #32
 800b8ce:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800b8d2:	68fb      	ldr	r3, [r7, #12]
 800b8d4:	2200      	movs	r2, #0
 800b8d6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	2200      	movs	r2, #0
 800b8de:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 800b8e2:	2301      	movs	r3, #1
 800b8e4:	e007      	b.n	800b8f6 <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b8e6:	68fb      	ldr	r3, [r7, #12]
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	699b      	ldr	r3, [r3, #24]
 800b8ec:	f003 0320 	and.w	r3, r3, #32
 800b8f0:	2b20      	cmp	r3, #32
 800b8f2:	d1c8      	bne.n	800b886 <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800b8f4:	2300      	movs	r3, #0
}
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	3710      	adds	r7, #16
 800b8fa:	46bd      	mov	sp, r7
 800b8fc:	bd80      	pop	{r7, pc}
	...

0800b900 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800b900:	b580      	push	{r7, lr}
 800b902:	b08a      	sub	sp, #40	@ 0x28
 800b904:	af00      	add	r7, sp, #0
 800b906:	60f8      	str	r0, [r7, #12]
 800b908:	60b9      	str	r1, [r7, #8]
 800b90a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800b90c:	2300      	movs	r3, #0
 800b90e:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 800b912:	68fb      	ldr	r3, [r7, #12]
 800b914:	681b      	ldr	r3, [r3, #0]
 800b916:	699b      	ldr	r3, [r3, #24]
 800b918:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 800b91a:	2300      	movs	r3, #0
 800b91c:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 800b91e:	687b      	ldr	r3, [r7, #4]
 800b920:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 800b922:	69bb      	ldr	r3, [r7, #24]
 800b924:	f003 0310 	and.w	r3, r3, #16
 800b928:	2b00      	cmp	r3, #0
 800b92a:	d068      	beq.n	800b9fe <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800b92c:	68fb      	ldr	r3, [r7, #12]
 800b92e:	681b      	ldr	r3, [r3, #0]
 800b930:	2210      	movs	r2, #16
 800b932:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b934:	e049      	b.n	800b9ca <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 800b936:	68bb      	ldr	r3, [r7, #8]
 800b938:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b93c:	d045      	beq.n	800b9ca <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 800b93e:	f7fc faeb 	bl	8007f18 <HAL_GetTick>
 800b942:	4602      	mov	r2, r0
 800b944:	69fb      	ldr	r3, [r7, #28]
 800b946:	1ad3      	subs	r3, r2, r3
 800b948:	68ba      	ldr	r2, [r7, #8]
 800b94a:	429a      	cmp	r2, r3
 800b94c:	d302      	bcc.n	800b954 <I2C_IsErrorOccurred+0x54>
 800b94e:	68bb      	ldr	r3, [r7, #8]
 800b950:	2b00      	cmp	r3, #0
 800b952:	d13a      	bne.n	800b9ca <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 800b954:	68fb      	ldr	r3, [r7, #12]
 800b956:	681b      	ldr	r3, [r3, #0]
 800b958:	685b      	ldr	r3, [r3, #4]
 800b95a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800b95e:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 800b960:	68fb      	ldr	r3, [r7, #12]
 800b962:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800b966:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 800b968:	68fb      	ldr	r3, [r7, #12]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	699b      	ldr	r3, [r3, #24]
 800b96e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800b972:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800b976:	d121      	bne.n	800b9bc <I2C_IsErrorOccurred+0xbc>
 800b978:	697b      	ldr	r3, [r7, #20]
 800b97a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800b97e:	d01d      	beq.n	800b9bc <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 800b980:	7cfb      	ldrb	r3, [r7, #19]
 800b982:	2b20      	cmp	r3, #32
 800b984:	d01a      	beq.n	800b9bc <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800b986:	68fb      	ldr	r3, [r7, #12]
 800b988:	681b      	ldr	r3, [r3, #0]
 800b98a:	685a      	ldr	r2, [r3, #4]
 800b98c:	68fb      	ldr	r3, [r7, #12]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800b994:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 800b996:	f7fc fabf 	bl	8007f18 <HAL_GetTick>
 800b99a:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b99c:	e00e      	b.n	800b9bc <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 800b99e:	f7fc fabb 	bl	8007f18 <HAL_GetTick>
 800b9a2:	4602      	mov	r2, r0
 800b9a4:	69fb      	ldr	r3, [r7, #28]
 800b9a6:	1ad3      	subs	r3, r2, r3
 800b9a8:	2b19      	cmp	r3, #25
 800b9aa:	d907      	bls.n	800b9bc <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 800b9ac:	6a3b      	ldr	r3, [r7, #32]
 800b9ae:	f043 0320 	orr.w	r3, r3, #32
 800b9b2:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 800b9b4:	2301      	movs	r3, #1
 800b9b6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 800b9ba:	e006      	b.n	800b9ca <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 800b9bc:	68fb      	ldr	r3, [r7, #12]
 800b9be:	681b      	ldr	r3, [r3, #0]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	f003 0320 	and.w	r3, r3, #32
 800b9c6:	2b20      	cmp	r3, #32
 800b9c8:	d1e9      	bne.n	800b99e <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 800b9ca:	68fb      	ldr	r3, [r7, #12]
 800b9cc:	681b      	ldr	r3, [r3, #0]
 800b9ce:	699b      	ldr	r3, [r3, #24]
 800b9d0:	f003 0320 	and.w	r3, r3, #32
 800b9d4:	2b20      	cmp	r3, #32
 800b9d6:	d003      	beq.n	800b9e0 <I2C_IsErrorOccurred+0xe0>
 800b9d8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9dc:	2b00      	cmp	r3, #0
 800b9de:	d0aa      	beq.n	800b936 <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 800b9e0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d103      	bne.n	800b9f0 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800b9e8:	68fb      	ldr	r3, [r7, #12]
 800b9ea:	681b      	ldr	r3, [r3, #0]
 800b9ec:	2220      	movs	r2, #32
 800b9ee:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 800b9f0:	6a3b      	ldr	r3, [r7, #32]
 800b9f2:	f043 0304 	orr.w	r3, r3, #4
 800b9f6:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 800b9f8:	2301      	movs	r3, #1
 800b9fa:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 800b9fe:	68fb      	ldr	r3, [r7, #12]
 800ba00:	681b      	ldr	r3, [r3, #0]
 800ba02:	699b      	ldr	r3, [r3, #24]
 800ba04:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 800ba06:	69bb      	ldr	r3, [r7, #24]
 800ba08:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00b      	beq.n	800ba28 <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 800ba10:	6a3b      	ldr	r3, [r7, #32]
 800ba12:	f043 0301 	orr.w	r3, r3, #1
 800ba16:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800ba18:	68fb      	ldr	r3, [r7, #12]
 800ba1a:	681b      	ldr	r3, [r3, #0]
 800ba1c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ba20:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba22:	2301      	movs	r3, #1
 800ba24:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 800ba28:	69bb      	ldr	r3, [r7, #24]
 800ba2a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800ba2e:	2b00      	cmp	r3, #0
 800ba30:	d00b      	beq.n	800ba4a <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 800ba32:	6a3b      	ldr	r3, [r7, #32]
 800ba34:	f043 0308 	orr.w	r3, r3, #8
 800ba38:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800ba3a:	68fb      	ldr	r3, [r7, #12]
 800ba3c:	681b      	ldr	r3, [r3, #0]
 800ba3e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800ba42:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba44:	2301      	movs	r3, #1
 800ba46:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 800ba4a:	69bb      	ldr	r3, [r7, #24]
 800ba4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ba50:	2b00      	cmp	r3, #0
 800ba52:	d00b      	beq.n	800ba6c <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 800ba54:	6a3b      	ldr	r3, [r7, #32]
 800ba56:	f043 0302 	orr.w	r3, r3, #2
 800ba5a:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800ba5c:	68fb      	ldr	r3, [r7, #12]
 800ba5e:	681b      	ldr	r3, [r3, #0]
 800ba60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800ba64:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 800ba66:	2301      	movs	r3, #1
 800ba68:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 800ba6c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d01c      	beq.n	800baae <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ba74:	68f8      	ldr	r0, [r7, #12]
 800ba76:	f7ff fe3b 	bl	800b6f0 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 800ba7a:	68fb      	ldr	r3, [r7, #12]
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	6859      	ldr	r1, [r3, #4]
 800ba80:	68fb      	ldr	r3, [r7, #12]
 800ba82:	681a      	ldr	r2, [r3, #0]
 800ba84:	4b0d      	ldr	r3, [pc, #52]	@ (800babc <I2C_IsErrorOccurred+0x1bc>)
 800ba86:	400b      	ands	r3, r1
 800ba88:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 800ba8a:	68fb      	ldr	r3, [r7, #12]
 800ba8c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ba8e:	6a3b      	ldr	r3, [r7, #32]
 800ba90:	431a      	orrs	r2, r3
 800ba92:	68fb      	ldr	r3, [r7, #12]
 800ba94:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 800ba96:	68fb      	ldr	r3, [r7, #12]
 800ba98:	2220      	movs	r2, #32
 800ba9a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800ba9e:	68fb      	ldr	r3, [r7, #12]
 800baa0:	2200      	movs	r2, #0
 800baa2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800baa6:	68fb      	ldr	r3, [r7, #12]
 800baa8:	2200      	movs	r2, #0
 800baaa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 800baae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 800bab2:	4618      	mov	r0, r3
 800bab4:	3728      	adds	r7, #40	@ 0x28
 800bab6:	46bd      	mov	sp, r7
 800bab8:	bd80      	pop	{r7, pc}
 800baba:	bf00      	nop
 800babc:	fe00e800 	.word	0xfe00e800

0800bac0 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800bac0:	b480      	push	{r7}
 800bac2:	b087      	sub	sp, #28
 800bac4:	af00      	add	r7, sp, #0
 800bac6:	60f8      	str	r0, [r7, #12]
 800bac8:	607b      	str	r3, [r7, #4]
 800baca:	460b      	mov	r3, r1
 800bacc:	817b      	strh	r3, [r7, #10]
 800bace:	4613      	mov	r3, r2
 800bad0:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bad2:	897b      	ldrh	r3, [r7, #10]
 800bad4:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bad8:	7a7b      	ldrb	r3, [r7, #9]
 800bada:	041b      	lsls	r3, r3, #16
 800badc:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bae0:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800bae2:	687b      	ldr	r3, [r7, #4]
 800bae4:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800bae6:	6a3b      	ldr	r3, [r7, #32]
 800bae8:	4313      	orrs	r3, r2
 800baea:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800baee:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800baf0:	68fb      	ldr	r3, [r7, #12]
 800baf2:	681b      	ldr	r3, [r3, #0]
 800baf4:	685a      	ldr	r2, [r3, #4]
 800baf6:	6a3b      	ldr	r3, [r7, #32]
 800baf8:	0d5b      	lsrs	r3, r3, #21
 800bafa:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 800bafe:	4b08      	ldr	r3, [pc, #32]	@ (800bb20 <I2C_TransferConfig+0x60>)
 800bb00:	430b      	orrs	r3, r1
 800bb02:	43db      	mvns	r3, r3
 800bb04:	ea02 0103 	and.w	r1, r2, r3
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	681b      	ldr	r3, [r3, #0]
 800bb0c:	697a      	ldr	r2, [r7, #20]
 800bb0e:	430a      	orrs	r2, r1
 800bb10:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800bb12:	bf00      	nop
 800bb14:	371c      	adds	r7, #28
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	03ff63ff 	.word	0x03ff63ff

0800bb24 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800bb24:	b480      	push	{r7}
 800bb26:	b083      	sub	sp, #12
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
 800bb2c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bb34:	b2db      	uxtb	r3, r3
 800bb36:	2b20      	cmp	r3, #32
 800bb38:	d138      	bne.n	800bbac <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bb3a:	687b      	ldr	r3, [r7, #4]
 800bb3c:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bb40:	2b01      	cmp	r3, #1
 800bb42:	d101      	bne.n	800bb48 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800bb44:	2302      	movs	r3, #2
 800bb46:	e032      	b.n	800bbae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800bb48:	687b      	ldr	r3, [r7, #4]
 800bb4a:	2201      	movs	r2, #1
 800bb4c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bb50:	687b      	ldr	r3, [r7, #4]
 800bb52:	2224      	movs	r2, #36	@ 0x24
 800bb54:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bb58:	687b      	ldr	r3, [r7, #4]
 800bb5a:	681b      	ldr	r3, [r3, #0]
 800bb5c:	681a      	ldr	r2, [r3, #0]
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	681b      	ldr	r3, [r3, #0]
 800bb62:	f022 0201 	bic.w	r2, r2, #1
 800bb66:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	681a      	ldr	r2, [r3, #0]
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 800bb76:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	681b      	ldr	r3, [r3, #0]
 800bb7c:	6819      	ldr	r1, [r3, #0]
 800bb7e:	687b      	ldr	r3, [r7, #4]
 800bb80:	681b      	ldr	r3, [r3, #0]
 800bb82:	683a      	ldr	r2, [r7, #0]
 800bb84:	430a      	orrs	r2, r1
 800bb86:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bb88:	687b      	ldr	r3, [r7, #4]
 800bb8a:	681b      	ldr	r3, [r3, #0]
 800bb8c:	681a      	ldr	r2, [r3, #0]
 800bb8e:	687b      	ldr	r3, [r7, #4]
 800bb90:	681b      	ldr	r3, [r3, #0]
 800bb92:	f042 0201 	orr.w	r2, r2, #1
 800bb96:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	2220      	movs	r2, #32
 800bb9c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	2200      	movs	r2, #0
 800bba4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bba8:	2300      	movs	r3, #0
 800bbaa:	e000      	b.n	800bbae <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800bbac:	2302      	movs	r3, #2
  }
}
 800bbae:	4618      	mov	r0, r3
 800bbb0:	370c      	adds	r7, #12
 800bbb2:	46bd      	mov	sp, r7
 800bbb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb8:	4770      	bx	lr

0800bbba <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800bbba:	b480      	push	{r7}
 800bbbc:	b085      	sub	sp, #20
 800bbbe:	af00      	add	r7, sp, #0
 800bbc0:	6078      	str	r0, [r7, #4]
 800bbc2:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800bbc4:	687b      	ldr	r3, [r7, #4]
 800bbc6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800bbca:	b2db      	uxtb	r3, r3
 800bbcc:	2b20      	cmp	r3, #32
 800bbce:	d139      	bne.n	800bc44 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800bbd0:	687b      	ldr	r3, [r7, #4]
 800bbd2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800bbd6:	2b01      	cmp	r3, #1
 800bbd8:	d101      	bne.n	800bbde <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800bbda:	2302      	movs	r3, #2
 800bbdc:	e033      	b.n	800bc46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	2201      	movs	r2, #1
 800bbe2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800bbe6:	687b      	ldr	r3, [r7, #4]
 800bbe8:	2224      	movs	r2, #36	@ 0x24
 800bbea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	681b      	ldr	r3, [r3, #0]
 800bbf2:	681a      	ldr	r2, [r3, #0]
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	f022 0201 	bic.w	r2, r2, #1
 800bbfc:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800bbfe:	687b      	ldr	r3, [r7, #4]
 800bc00:	681b      	ldr	r3, [r3, #0]
 800bc02:	681b      	ldr	r3, [r3, #0]
 800bc04:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800bc06:	68fb      	ldr	r3, [r7, #12]
 800bc08:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 800bc0c:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800bc0e:	683b      	ldr	r3, [r7, #0]
 800bc10:	021b      	lsls	r3, r3, #8
 800bc12:	68fa      	ldr	r2, [r7, #12]
 800bc14:	4313      	orrs	r3, r2
 800bc16:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800bc18:	687b      	ldr	r3, [r7, #4]
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	68fa      	ldr	r2, [r7, #12]
 800bc1e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	681a      	ldr	r2, [r3, #0]
 800bc26:	687b      	ldr	r3, [r7, #4]
 800bc28:	681b      	ldr	r3, [r3, #0]
 800bc2a:	f042 0201 	orr.w	r2, r2, #1
 800bc2e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800bc30:	687b      	ldr	r3, [r7, #4]
 800bc32:	2220      	movs	r2, #32
 800bc34:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	2200      	movs	r2, #0
 800bc3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800bc40:	2300      	movs	r3, #0
 800bc42:	e000      	b.n	800bc46 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800bc44:	2302      	movs	r3, #2
  }
}
 800bc46:	4618      	mov	r0, r3
 800bc48:	3714      	adds	r7, #20
 800bc4a:	46bd      	mov	sp, r7
 800bc4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc50:	4770      	bx	lr
	...

0800bc54 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800bc54:	b580      	push	{r7, lr}
 800bc56:	b08c      	sub	sp, #48	@ 0x30
 800bc58:	af00      	add	r7, sp, #0
 800bc5a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800bc5c:	687b      	ldr	r3, [r7, #4]
 800bc5e:	2b00      	cmp	r3, #0
 800bc60:	d102      	bne.n	800bc68 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800bc62:	2301      	movs	r3, #1
 800bc64:	f000 bc48 	b.w	800c4f8 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	681b      	ldr	r3, [r3, #0]
 800bc6c:	f003 0301 	and.w	r3, r3, #1
 800bc70:	2b00      	cmp	r3, #0
 800bc72:	f000 8088 	beq.w	800bd86 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bc76:	4b99      	ldr	r3, [pc, #612]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bc7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bc80:	4b96      	ldr	r3, [pc, #600]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bc82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bc84:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800bc86:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc88:	2b10      	cmp	r3, #16
 800bc8a:	d007      	beq.n	800bc9c <HAL_RCC_OscConfig+0x48>
 800bc8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800bc8e:	2b18      	cmp	r3, #24
 800bc90:	d111      	bne.n	800bcb6 <HAL_RCC_OscConfig+0x62>
 800bc92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800bc94:	f003 0303 	and.w	r3, r3, #3
 800bc98:	2b02      	cmp	r3, #2
 800bc9a:	d10c      	bne.n	800bcb6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bc9c:	4b8f      	ldr	r3, [pc, #572]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bc9e:	681b      	ldr	r3, [r3, #0]
 800bca0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bca4:	2b00      	cmp	r3, #0
 800bca6:	d06d      	beq.n	800bd84 <HAL_RCC_OscConfig+0x130>
 800bca8:	687b      	ldr	r3, [r7, #4]
 800bcaa:	685b      	ldr	r3, [r3, #4]
 800bcac:	2b00      	cmp	r3, #0
 800bcae:	d169      	bne.n	800bd84 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800bcb0:	2301      	movs	r3, #1
 800bcb2:	f000 bc21 	b.w	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800bcb6:	687b      	ldr	r3, [r7, #4]
 800bcb8:	685b      	ldr	r3, [r3, #4]
 800bcba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800bcbe:	d106      	bne.n	800bcce <HAL_RCC_OscConfig+0x7a>
 800bcc0:	4b86      	ldr	r3, [pc, #536]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bcc2:	681b      	ldr	r3, [r3, #0]
 800bcc4:	4a85      	ldr	r2, [pc, #532]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bcc6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bcca:	6013      	str	r3, [r2, #0]
 800bccc:	e02e      	b.n	800bd2c <HAL_RCC_OscConfig+0xd8>
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	685b      	ldr	r3, [r3, #4]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d10c      	bne.n	800bcf0 <HAL_RCC_OscConfig+0x9c>
 800bcd6:	4b81      	ldr	r3, [pc, #516]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bcd8:	681b      	ldr	r3, [r3, #0]
 800bcda:	4a80      	ldr	r2, [pc, #512]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bcdc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bce0:	6013      	str	r3, [r2, #0]
 800bce2:	4b7e      	ldr	r3, [pc, #504]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bce4:	681b      	ldr	r3, [r3, #0]
 800bce6:	4a7d      	ldr	r2, [pc, #500]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bce8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bcec:	6013      	str	r3, [r2, #0]
 800bcee:	e01d      	b.n	800bd2c <HAL_RCC_OscConfig+0xd8>
 800bcf0:	687b      	ldr	r3, [r7, #4]
 800bcf2:	685b      	ldr	r3, [r3, #4]
 800bcf4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800bcf8:	d10c      	bne.n	800bd14 <HAL_RCC_OscConfig+0xc0>
 800bcfa:	4b78      	ldr	r3, [pc, #480]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bcfc:	681b      	ldr	r3, [r3, #0]
 800bcfe:	4a77      	ldr	r2, [pc, #476]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd00:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	4b75      	ldr	r3, [pc, #468]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd08:	681b      	ldr	r3, [r3, #0]
 800bd0a:	4a74      	ldr	r2, [pc, #464]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd0c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800bd10:	6013      	str	r3, [r2, #0]
 800bd12:	e00b      	b.n	800bd2c <HAL_RCC_OscConfig+0xd8>
 800bd14:	4b71      	ldr	r3, [pc, #452]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	4a70      	ldr	r2, [pc, #448]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd1a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800bd1e:	6013      	str	r3, [r2, #0]
 800bd20:	4b6e      	ldr	r3, [pc, #440]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd22:	681b      	ldr	r3, [r3, #0]
 800bd24:	4a6d      	ldr	r2, [pc, #436]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd26:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800bd2a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800bd2c:	687b      	ldr	r3, [r7, #4]
 800bd2e:	685b      	ldr	r3, [r3, #4]
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d013      	beq.n	800bd5c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd34:	f7fc f8f0 	bl	8007f18 <HAL_GetTick>
 800bd38:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd3a:	e008      	b.n	800bd4e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd3c:	f7fc f8ec 	bl	8007f18 <HAL_GetTick>
 800bd40:	4602      	mov	r2, r0
 800bd42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd44:	1ad3      	subs	r3, r2, r3
 800bd46:	2b64      	cmp	r3, #100	@ 0x64
 800bd48:	d901      	bls.n	800bd4e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800bd4a:	2303      	movs	r3, #3
 800bd4c:	e3d4      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800bd4e:	4b63      	ldr	r3, [pc, #396]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd50:	681b      	ldr	r3, [r3, #0]
 800bd52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d0f0      	beq.n	800bd3c <HAL_RCC_OscConfig+0xe8>
 800bd5a:	e014      	b.n	800bd86 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bd5c:	f7fc f8dc 	bl	8007f18 <HAL_GetTick>
 800bd60:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd62:	e008      	b.n	800bd76 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800bd64:	f7fc f8d8 	bl	8007f18 <HAL_GetTick>
 800bd68:	4602      	mov	r2, r0
 800bd6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bd6c:	1ad3      	subs	r3, r2, r3
 800bd6e:	2b64      	cmp	r3, #100	@ 0x64
 800bd70:	d901      	bls.n	800bd76 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800bd72:	2303      	movs	r3, #3
 800bd74:	e3c0      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800bd76:	4b59      	ldr	r3, [pc, #356]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd78:	681b      	ldr	r3, [r3, #0]
 800bd7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	d1f0      	bne.n	800bd64 <HAL_RCC_OscConfig+0x110>
 800bd82:	e000      	b.n	800bd86 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800bd84:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	681b      	ldr	r3, [r3, #0]
 800bd8a:	f003 0302 	and.w	r3, r3, #2
 800bd8e:	2b00      	cmp	r3, #0
 800bd90:	f000 80ca 	beq.w	800bf28 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bd94:	4b51      	ldr	r3, [pc, #324]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bd96:	691b      	ldr	r3, [r3, #16]
 800bd98:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bd9c:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bd9e:	4b4f      	ldr	r3, [pc, #316]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bda0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bda2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800bda4:	6a3b      	ldr	r3, [r7, #32]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <HAL_RCC_OscConfig+0x166>
 800bdaa:	6a3b      	ldr	r3, [r7, #32]
 800bdac:	2b18      	cmp	r3, #24
 800bdae:	d156      	bne.n	800be5e <HAL_RCC_OscConfig+0x20a>
 800bdb0:	69fb      	ldr	r3, [r7, #28]
 800bdb2:	f003 0303 	and.w	r3, r3, #3
 800bdb6:	2b00      	cmp	r3, #0
 800bdb8:	d151      	bne.n	800be5e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800bdba:	4b48      	ldr	r3, [pc, #288]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bdbc:	681b      	ldr	r3, [r3, #0]
 800bdbe:	f003 0304 	and.w	r3, r3, #4
 800bdc2:	2b00      	cmp	r3, #0
 800bdc4:	d005      	beq.n	800bdd2 <HAL_RCC_OscConfig+0x17e>
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	68db      	ldr	r3, [r3, #12]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d101      	bne.n	800bdd2 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800bdce:	2301      	movs	r3, #1
 800bdd0:	e392      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800bdd2:	4b42      	ldr	r3, [pc, #264]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bdd4:	681b      	ldr	r3, [r3, #0]
 800bdd6:	f023 0219 	bic.w	r2, r3, #25
 800bdda:	687b      	ldr	r3, [r7, #4]
 800bddc:	68db      	ldr	r3, [r3, #12]
 800bdde:	493f      	ldr	r1, [pc, #252]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bde0:	4313      	orrs	r3, r2
 800bde2:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bde4:	f7fc f898 	bl	8007f18 <HAL_GetTick>
 800bde8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdea:	e008      	b.n	800bdfe <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bdec:	f7fc f894 	bl	8007f18 <HAL_GetTick>
 800bdf0:	4602      	mov	r2, r0
 800bdf2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bdf4:	1ad3      	subs	r3, r2, r3
 800bdf6:	2b02      	cmp	r3, #2
 800bdf8:	d901      	bls.n	800bdfe <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800bdfa:	2303      	movs	r3, #3
 800bdfc:	e37c      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800bdfe:	4b37      	ldr	r3, [pc, #220]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f003 0304 	and.w	r3, r3, #4
 800be06:	2b00      	cmp	r3, #0
 800be08:	d0f0      	beq.n	800bdec <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be0a:	f7fc f8b5 	bl	8007f78 <HAL_GetREVID>
 800be0e:	4603      	mov	r3, r0
 800be10:	f241 0203 	movw	r2, #4099	@ 0x1003
 800be14:	4293      	cmp	r3, r2
 800be16:	d817      	bhi.n	800be48 <HAL_RCC_OscConfig+0x1f4>
 800be18:	687b      	ldr	r3, [r7, #4]
 800be1a:	691b      	ldr	r3, [r3, #16]
 800be1c:	2b40      	cmp	r3, #64	@ 0x40
 800be1e:	d108      	bne.n	800be32 <HAL_RCC_OscConfig+0x1de>
 800be20:	4b2e      	ldr	r3, [pc, #184]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be22:	685b      	ldr	r3, [r3, #4]
 800be24:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800be28:	4a2c      	ldr	r2, [pc, #176]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be2a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800be2e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be30:	e07a      	b.n	800bf28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be32:	4b2a      	ldr	r3, [pc, #168]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be34:	685b      	ldr	r3, [r3, #4]
 800be36:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800be3a:	687b      	ldr	r3, [r7, #4]
 800be3c:	691b      	ldr	r3, [r3, #16]
 800be3e:	031b      	lsls	r3, r3, #12
 800be40:	4926      	ldr	r1, [pc, #152]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be42:	4313      	orrs	r3, r2
 800be44:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be46:	e06f      	b.n	800bf28 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be48:	4b24      	ldr	r3, [pc, #144]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be4a:	685b      	ldr	r3, [r3, #4]
 800be4c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	691b      	ldr	r3, [r3, #16]
 800be54:	061b      	lsls	r3, r3, #24
 800be56:	4921      	ldr	r1, [pc, #132]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be58:	4313      	orrs	r3, r2
 800be5a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800be5c:	e064      	b.n	800bf28 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800be5e:	687b      	ldr	r3, [r7, #4]
 800be60:	68db      	ldr	r3, [r3, #12]
 800be62:	2b00      	cmp	r3, #0
 800be64:	d047      	beq.n	800bef6 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800be66:	4b1d      	ldr	r3, [pc, #116]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be68:	681b      	ldr	r3, [r3, #0]
 800be6a:	f023 0219 	bic.w	r2, r3, #25
 800be6e:	687b      	ldr	r3, [r7, #4]
 800be70:	68db      	ldr	r3, [r3, #12]
 800be72:	491a      	ldr	r1, [pc, #104]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be74:	4313      	orrs	r3, r2
 800be76:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800be78:	f7fc f84e 	bl	8007f18 <HAL_GetTick>
 800be7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be7e:	e008      	b.n	800be92 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800be80:	f7fc f84a 	bl	8007f18 <HAL_GetTick>
 800be84:	4602      	mov	r2, r0
 800be86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800be88:	1ad3      	subs	r3, r2, r3
 800be8a:	2b02      	cmp	r3, #2
 800be8c:	d901      	bls.n	800be92 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 800be8e:	2303      	movs	r3, #3
 800be90:	e332      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800be92:	4b12      	ldr	r3, [pc, #72]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	f003 0304 	and.w	r3, r3, #4
 800be9a:	2b00      	cmp	r3, #0
 800be9c:	d0f0      	beq.n	800be80 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800be9e:	f7fc f86b 	bl	8007f78 <HAL_GetREVID>
 800bea2:	4603      	mov	r3, r0
 800bea4:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d819      	bhi.n	800bee0 <HAL_RCC_OscConfig+0x28c>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	691b      	ldr	r3, [r3, #16]
 800beb0:	2b40      	cmp	r3, #64	@ 0x40
 800beb2:	d108      	bne.n	800bec6 <HAL_RCC_OscConfig+0x272>
 800beb4:	4b09      	ldr	r3, [pc, #36]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800beb6:	685b      	ldr	r3, [r3, #4]
 800beb8:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 800bebc:	4a07      	ldr	r2, [pc, #28]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bebe:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800bec2:	6053      	str	r3, [r2, #4]
 800bec4:	e030      	b.n	800bf28 <HAL_RCC_OscConfig+0x2d4>
 800bec6:	4b05      	ldr	r3, [pc, #20]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bec8:	685b      	ldr	r3, [r3, #4]
 800beca:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800bece:	687b      	ldr	r3, [r7, #4]
 800bed0:	691b      	ldr	r3, [r3, #16]
 800bed2:	031b      	lsls	r3, r3, #12
 800bed4:	4901      	ldr	r1, [pc, #4]	@ (800bedc <HAL_RCC_OscConfig+0x288>)
 800bed6:	4313      	orrs	r3, r2
 800bed8:	604b      	str	r3, [r1, #4]
 800beda:	e025      	b.n	800bf28 <HAL_RCC_OscConfig+0x2d4>
 800bedc:	58024400 	.word	0x58024400
 800bee0:	4b9a      	ldr	r3, [pc, #616]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bee2:	685b      	ldr	r3, [r3, #4]
 800bee4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	691b      	ldr	r3, [r3, #16]
 800beec:	061b      	lsls	r3, r3, #24
 800beee:	4997      	ldr	r1, [pc, #604]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bef0:	4313      	orrs	r3, r2
 800bef2:	604b      	str	r3, [r1, #4]
 800bef4:	e018      	b.n	800bf28 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800bef6:	4b95      	ldr	r3, [pc, #596]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bef8:	681b      	ldr	r3, [r3, #0]
 800befa:	4a94      	ldr	r2, [pc, #592]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800befc:	f023 0301 	bic.w	r3, r3, #1
 800bf00:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bf02:	f7fc f809 	bl	8007f18 <HAL_GetTick>
 800bf06:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf08:	e008      	b.n	800bf1c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800bf0a:	f7fc f805 	bl	8007f18 <HAL_GetTick>
 800bf0e:	4602      	mov	r2, r0
 800bf10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bf12:	1ad3      	subs	r3, r2, r3
 800bf14:	2b02      	cmp	r3, #2
 800bf16:	d901      	bls.n	800bf1c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 800bf18:	2303      	movs	r3, #3
 800bf1a:	e2ed      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800bf1c:	4b8b      	ldr	r3, [pc, #556]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	f003 0304 	and.w	r3, r3, #4
 800bf24:	2b00      	cmp	r3, #0
 800bf26:	d1f0      	bne.n	800bf0a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	f003 0310 	and.w	r3, r3, #16
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	f000 80a9 	beq.w	800c088 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800bf36:	4b85      	ldr	r3, [pc, #532]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf38:	691b      	ldr	r3, [r3, #16]
 800bf3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800bf3e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 800bf40:	4b82      	ldr	r3, [pc, #520]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800bf44:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 800bf46:	69bb      	ldr	r3, [r7, #24]
 800bf48:	2b08      	cmp	r3, #8
 800bf4a:	d007      	beq.n	800bf5c <HAL_RCC_OscConfig+0x308>
 800bf4c:	69bb      	ldr	r3, [r7, #24]
 800bf4e:	2b18      	cmp	r3, #24
 800bf50:	d13a      	bne.n	800bfc8 <HAL_RCC_OscConfig+0x374>
 800bf52:	697b      	ldr	r3, [r7, #20]
 800bf54:	f003 0303 	and.w	r3, r3, #3
 800bf58:	2b01      	cmp	r3, #1
 800bf5a:	d135      	bne.n	800bfc8 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf5c:	4b7b      	ldr	r3, [pc, #492]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bf64:	2b00      	cmp	r3, #0
 800bf66:	d005      	beq.n	800bf74 <HAL_RCC_OscConfig+0x320>
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	69db      	ldr	r3, [r3, #28]
 800bf6c:	2b80      	cmp	r3, #128	@ 0x80
 800bf6e:	d001      	beq.n	800bf74 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 800bf70:	2301      	movs	r3, #1
 800bf72:	e2c1      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf74:	f7fc f800 	bl	8007f78 <HAL_GetREVID>
 800bf78:	4603      	mov	r3, r0
 800bf7a:	f241 0203 	movw	r2, #4099	@ 0x1003
 800bf7e:	4293      	cmp	r3, r2
 800bf80:	d817      	bhi.n	800bfb2 <HAL_RCC_OscConfig+0x35e>
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	6a1b      	ldr	r3, [r3, #32]
 800bf86:	2b20      	cmp	r3, #32
 800bf88:	d108      	bne.n	800bf9c <HAL_RCC_OscConfig+0x348>
 800bf8a:	4b70      	ldr	r3, [pc, #448]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf8c:	685b      	ldr	r3, [r3, #4]
 800bf8e:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800bf92:	4a6e      	ldr	r2, [pc, #440]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf94:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800bf98:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bf9a:	e075      	b.n	800c088 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bf9c:	4b6b      	ldr	r3, [pc, #428]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bf9e:	685b      	ldr	r3, [r3, #4]
 800bfa0:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	6a1b      	ldr	r3, [r3, #32]
 800bfa8:	069b      	lsls	r3, r3, #26
 800bfaa:	4968      	ldr	r1, [pc, #416]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bfac:	4313      	orrs	r3, r2
 800bfae:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bfb0:	e06a      	b.n	800c088 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800bfb2:	4b66      	ldr	r3, [pc, #408]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bfb4:	68db      	ldr	r3, [r3, #12]
 800bfb6:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800bfba:	687b      	ldr	r3, [r7, #4]
 800bfbc:	6a1b      	ldr	r3, [r3, #32]
 800bfbe:	061b      	lsls	r3, r3, #24
 800bfc0:	4962      	ldr	r1, [pc, #392]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bfc2:	4313      	orrs	r3, r2
 800bfc4:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800bfc6:	e05f      	b.n	800c088 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 800bfc8:	687b      	ldr	r3, [r7, #4]
 800bfca:	69db      	ldr	r3, [r3, #28]
 800bfcc:	2b00      	cmp	r3, #0
 800bfce:	d042      	beq.n	800c056 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 800bfd0:	4b5e      	ldr	r3, [pc, #376]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	4a5d      	ldr	r2, [pc, #372]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bfd6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bfda:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800bfdc:	f7fb ff9c 	bl	8007f18 <HAL_GetTick>
 800bfe0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bfe2:	e008      	b.n	800bff6 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800bfe4:	f7fb ff98 	bl	8007f18 <HAL_GetTick>
 800bfe8:	4602      	mov	r2, r0
 800bfea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800bfec:	1ad3      	subs	r3, r2, r3
 800bfee:	2b02      	cmp	r3, #2
 800bff0:	d901      	bls.n	800bff6 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 800bff2:	2303      	movs	r3, #3
 800bff4:	e280      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800bff6:	4b55      	ldr	r3, [pc, #340]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800bff8:	681b      	ldr	r3, [r3, #0]
 800bffa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800bffe:	2b00      	cmp	r3, #0
 800c000:	d0f0      	beq.n	800bfe4 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800c002:	f7fb ffb9 	bl	8007f78 <HAL_GetREVID>
 800c006:	4603      	mov	r3, r0
 800c008:	f241 0203 	movw	r2, #4099	@ 0x1003
 800c00c:	4293      	cmp	r3, r2
 800c00e:	d817      	bhi.n	800c040 <HAL_RCC_OscConfig+0x3ec>
 800c010:	687b      	ldr	r3, [r7, #4]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	2b20      	cmp	r3, #32
 800c016:	d108      	bne.n	800c02a <HAL_RCC_OscConfig+0x3d6>
 800c018:	4b4c      	ldr	r3, [pc, #304]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c01a:	685b      	ldr	r3, [r3, #4]
 800c01c:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800c020:	4a4a      	ldr	r2, [pc, #296]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c022:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 800c026:	6053      	str	r3, [r2, #4]
 800c028:	e02e      	b.n	800c088 <HAL_RCC_OscConfig+0x434>
 800c02a:	4b48      	ldr	r3, [pc, #288]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c02c:	685b      	ldr	r3, [r3, #4]
 800c02e:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	6a1b      	ldr	r3, [r3, #32]
 800c036:	069b      	lsls	r3, r3, #26
 800c038:	4944      	ldr	r1, [pc, #272]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c03a:	4313      	orrs	r3, r2
 800c03c:	604b      	str	r3, [r1, #4]
 800c03e:	e023      	b.n	800c088 <HAL_RCC_OscConfig+0x434>
 800c040:	4b42      	ldr	r3, [pc, #264]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c042:	68db      	ldr	r3, [r3, #12]
 800c044:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	6a1b      	ldr	r3, [r3, #32]
 800c04c:	061b      	lsls	r3, r3, #24
 800c04e:	493f      	ldr	r1, [pc, #252]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c050:	4313      	orrs	r3, r2
 800c052:	60cb      	str	r3, [r1, #12]
 800c054:	e018      	b.n	800c088 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 800c056:	4b3d      	ldr	r3, [pc, #244]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c058:	681b      	ldr	r3, [r3, #0]
 800c05a:	4a3c      	ldr	r2, [pc, #240]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c05c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800c060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c062:	f7fb ff59 	bl	8007f18 <HAL_GetTick>
 800c066:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c068:	e008      	b.n	800c07c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800c06a:	f7fb ff55 	bl	8007f18 <HAL_GetTick>
 800c06e:	4602      	mov	r2, r0
 800c070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c072:	1ad3      	subs	r3, r2, r3
 800c074:	2b02      	cmp	r3, #2
 800c076:	d901      	bls.n	800c07c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800c078:	2303      	movs	r3, #3
 800c07a:	e23d      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 800c07c:	4b33      	ldr	r3, [pc, #204]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c084:	2b00      	cmp	r3, #0
 800c086:	d1f0      	bne.n	800c06a <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	f003 0308 	and.w	r3, r3, #8
 800c090:	2b00      	cmp	r3, #0
 800c092:	d036      	beq.n	800c102 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800c094:	687b      	ldr	r3, [r7, #4]
 800c096:	695b      	ldr	r3, [r3, #20]
 800c098:	2b00      	cmp	r3, #0
 800c09a:	d019      	beq.n	800c0d0 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800c09c:	4b2b      	ldr	r3, [pc, #172]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c09e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0a0:	4a2a      	ldr	r2, [pc, #168]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c0a2:	f043 0301 	orr.w	r3, r3, #1
 800c0a6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0a8:	f7fb ff36 	bl	8007f18 <HAL_GetTick>
 800c0ac:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0ae:	e008      	b.n	800c0c2 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0b0:	f7fb ff32 	bl	8007f18 <HAL_GetTick>
 800c0b4:	4602      	mov	r2, r0
 800c0b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0b8:	1ad3      	subs	r3, r2, r3
 800c0ba:	2b02      	cmp	r3, #2
 800c0bc:	d901      	bls.n	800c0c2 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 800c0be:	2303      	movs	r3, #3
 800c0c0:	e21a      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800c0c2:	4b22      	ldr	r3, [pc, #136]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c0c4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0c6:	f003 0302 	and.w	r3, r3, #2
 800c0ca:	2b00      	cmp	r3, #0
 800c0cc:	d0f0      	beq.n	800c0b0 <HAL_RCC_OscConfig+0x45c>
 800c0ce:	e018      	b.n	800c102 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800c0d0:	4b1e      	ldr	r3, [pc, #120]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c0d2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0d4:	4a1d      	ldr	r2, [pc, #116]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c0d6:	f023 0301 	bic.w	r3, r3, #1
 800c0da:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c0dc:	f7fb ff1c 	bl	8007f18 <HAL_GetTick>
 800c0e0:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0e2:	e008      	b.n	800c0f6 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800c0e4:	f7fb ff18 	bl	8007f18 <HAL_GetTick>
 800c0e8:	4602      	mov	r2, r0
 800c0ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c0ec:	1ad3      	subs	r3, r2, r3
 800c0ee:	2b02      	cmp	r3, #2
 800c0f0:	d901      	bls.n	800c0f6 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 800c0f2:	2303      	movs	r3, #3
 800c0f4:	e200      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800c0f6:	4b15      	ldr	r3, [pc, #84]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c0f8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800c0fa:	f003 0302 	and.w	r3, r3, #2
 800c0fe:	2b00      	cmp	r3, #0
 800c100:	d1f0      	bne.n	800c0e4 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	681b      	ldr	r3, [r3, #0]
 800c106:	f003 0320 	and.w	r3, r3, #32
 800c10a:	2b00      	cmp	r3, #0
 800c10c:	d039      	beq.n	800c182 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	699b      	ldr	r3, [r3, #24]
 800c112:	2b00      	cmp	r3, #0
 800c114:	d01c      	beq.n	800c150 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800c116:	4b0d      	ldr	r3, [pc, #52]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c118:	681b      	ldr	r3, [r3, #0]
 800c11a:	4a0c      	ldr	r2, [pc, #48]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c11c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800c120:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c122:	f7fb fef9 	bl	8007f18 <HAL_GetTick>
 800c126:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c128:	e008      	b.n	800c13c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c12a:	f7fb fef5 	bl	8007f18 <HAL_GetTick>
 800c12e:	4602      	mov	r2, r0
 800c130:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c132:	1ad3      	subs	r3, r2, r3
 800c134:	2b02      	cmp	r3, #2
 800c136:	d901      	bls.n	800c13c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 800c138:	2303      	movs	r3, #3
 800c13a:	e1dd      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800c13c:	4b03      	ldr	r3, [pc, #12]	@ (800c14c <HAL_RCC_OscConfig+0x4f8>)
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c144:	2b00      	cmp	r3, #0
 800c146:	d0f0      	beq.n	800c12a <HAL_RCC_OscConfig+0x4d6>
 800c148:	e01b      	b.n	800c182 <HAL_RCC_OscConfig+0x52e>
 800c14a:	bf00      	nop
 800c14c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 800c150:	4b9b      	ldr	r3, [pc, #620]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	4a9a      	ldr	r2, [pc, #616]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c156:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800c15a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800c15c:	f7fb fedc 	bl	8007f18 <HAL_GetTick>
 800c160:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c162:	e008      	b.n	800c176 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800c164:	f7fb fed8 	bl	8007f18 <HAL_GetTick>
 800c168:	4602      	mov	r2, r0
 800c16a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c16c:	1ad3      	subs	r3, r2, r3
 800c16e:	2b02      	cmp	r3, #2
 800c170:	d901      	bls.n	800c176 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 800c172:	2303      	movs	r3, #3
 800c174:	e1c0      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 800c176:	4b92      	ldr	r3, [pc, #584]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c178:	681b      	ldr	r3, [r3, #0]
 800c17a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800c17e:	2b00      	cmp	r3, #0
 800c180:	d1f0      	bne.n	800c164 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	681b      	ldr	r3, [r3, #0]
 800c186:	f003 0304 	and.w	r3, r3, #4
 800c18a:	2b00      	cmp	r3, #0
 800c18c:	f000 8081 	beq.w	800c292 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800c190:	4b8c      	ldr	r3, [pc, #560]	@ (800c3c4 <HAL_RCC_OscConfig+0x770>)
 800c192:	681b      	ldr	r3, [r3, #0]
 800c194:	4a8b      	ldr	r2, [pc, #556]	@ (800c3c4 <HAL_RCC_OscConfig+0x770>)
 800c196:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800c19a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800c19c:	f7fb febc 	bl	8007f18 <HAL_GetTick>
 800c1a0:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1a2:	e008      	b.n	800c1b6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800c1a4:	f7fb feb8 	bl	8007f18 <HAL_GetTick>
 800c1a8:	4602      	mov	r2, r0
 800c1aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ac:	1ad3      	subs	r3, r2, r3
 800c1ae:	2b64      	cmp	r3, #100	@ 0x64
 800c1b0:	d901      	bls.n	800c1b6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 800c1b2:	2303      	movs	r3, #3
 800c1b4:	e1a0      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800c1b6:	4b83      	ldr	r3, [pc, #524]	@ (800c3c4 <HAL_RCC_OscConfig+0x770>)
 800c1b8:	681b      	ldr	r3, [r3, #0]
 800c1ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c1be:	2b00      	cmp	r3, #0
 800c1c0:	d0f0      	beq.n	800c1a4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800c1c2:	687b      	ldr	r3, [r7, #4]
 800c1c4:	689b      	ldr	r3, [r3, #8]
 800c1c6:	2b01      	cmp	r3, #1
 800c1c8:	d106      	bne.n	800c1d8 <HAL_RCC_OscConfig+0x584>
 800c1ca:	4b7d      	ldr	r3, [pc, #500]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c1cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1ce:	4a7c      	ldr	r2, [pc, #496]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c1d0:	f043 0301 	orr.w	r3, r3, #1
 800c1d4:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1d6:	e02d      	b.n	800c234 <HAL_RCC_OscConfig+0x5e0>
 800c1d8:	687b      	ldr	r3, [r7, #4]
 800c1da:	689b      	ldr	r3, [r3, #8]
 800c1dc:	2b00      	cmp	r3, #0
 800c1de:	d10c      	bne.n	800c1fa <HAL_RCC_OscConfig+0x5a6>
 800c1e0:	4b77      	ldr	r3, [pc, #476]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c1e2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1e4:	4a76      	ldr	r2, [pc, #472]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c1e6:	f023 0301 	bic.w	r3, r3, #1
 800c1ea:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1ec:	4b74      	ldr	r3, [pc, #464]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c1ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c1f0:	4a73      	ldr	r2, [pc, #460]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c1f2:	f023 0304 	bic.w	r3, r3, #4
 800c1f6:	6713      	str	r3, [r2, #112]	@ 0x70
 800c1f8:	e01c      	b.n	800c234 <HAL_RCC_OscConfig+0x5e0>
 800c1fa:	687b      	ldr	r3, [r7, #4]
 800c1fc:	689b      	ldr	r3, [r3, #8]
 800c1fe:	2b05      	cmp	r3, #5
 800c200:	d10c      	bne.n	800c21c <HAL_RCC_OscConfig+0x5c8>
 800c202:	4b6f      	ldr	r3, [pc, #444]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c204:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c206:	4a6e      	ldr	r2, [pc, #440]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c208:	f043 0304 	orr.w	r3, r3, #4
 800c20c:	6713      	str	r3, [r2, #112]	@ 0x70
 800c20e:	4b6c      	ldr	r3, [pc, #432]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c210:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c212:	4a6b      	ldr	r2, [pc, #428]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c214:	f043 0301 	orr.w	r3, r3, #1
 800c218:	6713      	str	r3, [r2, #112]	@ 0x70
 800c21a:	e00b      	b.n	800c234 <HAL_RCC_OscConfig+0x5e0>
 800c21c:	4b68      	ldr	r3, [pc, #416]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c21e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c220:	4a67      	ldr	r2, [pc, #412]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c222:	f023 0301 	bic.w	r3, r3, #1
 800c226:	6713      	str	r3, [r2, #112]	@ 0x70
 800c228:	4b65      	ldr	r3, [pc, #404]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c22a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c22c:	4a64      	ldr	r2, [pc, #400]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c22e:	f023 0304 	bic.w	r3, r3, #4
 800c232:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800c234:	687b      	ldr	r3, [r7, #4]
 800c236:	689b      	ldr	r3, [r3, #8]
 800c238:	2b00      	cmp	r3, #0
 800c23a:	d015      	beq.n	800c268 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c23c:	f7fb fe6c 	bl	8007f18 <HAL_GetTick>
 800c240:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c242:	e00a      	b.n	800c25a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c244:	f7fb fe68 	bl	8007f18 <HAL_GetTick>
 800c248:	4602      	mov	r2, r0
 800c24a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c24c:	1ad3      	subs	r3, r2, r3
 800c24e:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c252:	4293      	cmp	r3, r2
 800c254:	d901      	bls.n	800c25a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 800c256:	2303      	movs	r3, #3
 800c258:	e14e      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800c25a:	4b59      	ldr	r3, [pc, #356]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c25c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c25e:	f003 0302 	and.w	r3, r3, #2
 800c262:	2b00      	cmp	r3, #0
 800c264:	d0ee      	beq.n	800c244 <HAL_RCC_OscConfig+0x5f0>
 800c266:	e014      	b.n	800c292 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800c268:	f7fb fe56 	bl	8007f18 <HAL_GetTick>
 800c26c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c26e:	e00a      	b.n	800c286 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800c270:	f7fb fe52 	bl	8007f18 <HAL_GetTick>
 800c274:	4602      	mov	r2, r0
 800c276:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c278:	1ad3      	subs	r3, r2, r3
 800c27a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c27e:	4293      	cmp	r3, r2
 800c280:	d901      	bls.n	800c286 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 800c282:	2303      	movs	r3, #3
 800c284:	e138      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 800c286:	4b4e      	ldr	r3, [pc, #312]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c288:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800c28a:	f003 0302 	and.w	r3, r3, #2
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d1ee      	bne.n	800c270 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c296:	2b00      	cmp	r3, #0
 800c298:	f000 812d 	beq.w	800c4f6 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 800c29c:	4b48      	ldr	r3, [pc, #288]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c29e:	691b      	ldr	r3, [r3, #16]
 800c2a0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c2a4:	2b18      	cmp	r3, #24
 800c2a6:	f000 80bd 	beq.w	800c424 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c2ae:	2b02      	cmp	r3, #2
 800c2b0:	f040 809e 	bne.w	800c3f0 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c2b4:	4b42      	ldr	r3, [pc, #264]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c2b6:	681b      	ldr	r3, [r3, #0]
 800c2b8:	4a41      	ldr	r2, [pc, #260]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c2ba:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c2be:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c2c0:	f7fb fe2a 	bl	8007f18 <HAL_GetTick>
 800c2c4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2c6:	e008      	b.n	800c2da <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c2c8:	f7fb fe26 	bl	8007f18 <HAL_GetTick>
 800c2cc:	4602      	mov	r2, r0
 800c2ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c2d0:	1ad3      	subs	r3, r2, r3
 800c2d2:	2b02      	cmp	r3, #2
 800c2d4:	d901      	bls.n	800c2da <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 800c2d6:	2303      	movs	r3, #3
 800c2d8:	e10e      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c2da:	4b39      	ldr	r3, [pc, #228]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c2dc:	681b      	ldr	r3, [r3, #0]
 800c2de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c2e2:	2b00      	cmp	r3, #0
 800c2e4:	d1f0      	bne.n	800c2c8 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800c2e6:	4b36      	ldr	r3, [pc, #216]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c2e8:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c2ea:	4b37      	ldr	r3, [pc, #220]	@ (800c3c8 <HAL_RCC_OscConfig+0x774>)
 800c2ec:	4013      	ands	r3, r2
 800c2ee:	687a      	ldr	r2, [r7, #4]
 800c2f0:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 800c2f2:	687a      	ldr	r2, [r7, #4]
 800c2f4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 800c2f6:	0112      	lsls	r2, r2, #4
 800c2f8:	430a      	orrs	r2, r1
 800c2fa:	4931      	ldr	r1, [pc, #196]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c2fc:	4313      	orrs	r3, r2
 800c2fe:	628b      	str	r3, [r1, #40]	@ 0x28
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c304:	3b01      	subs	r3, #1
 800c306:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c30e:	3b01      	subs	r3, #1
 800c310:	025b      	lsls	r3, r3, #9
 800c312:	b29b      	uxth	r3, r3
 800c314:	431a      	orrs	r2, r3
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c31a:	3b01      	subs	r3, #1
 800c31c:	041b      	lsls	r3, r3, #16
 800c31e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800c322:	431a      	orrs	r2, r3
 800c324:	687b      	ldr	r3, [r7, #4]
 800c326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c328:	3b01      	subs	r3, #1
 800c32a:	061b      	lsls	r3, r3, #24
 800c32c:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800c330:	4923      	ldr	r1, [pc, #140]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c332:	4313      	orrs	r3, r2
 800c334:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 800c336:	4b22      	ldr	r3, [pc, #136]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c338:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c33a:	4a21      	ldr	r2, [pc, #132]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c33c:	f023 0301 	bic.w	r3, r3, #1
 800c340:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c342:	4b1f      	ldr	r3, [pc, #124]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c344:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c346:	4b21      	ldr	r3, [pc, #132]	@ (800c3cc <HAL_RCC_OscConfig+0x778>)
 800c348:	4013      	ands	r3, r2
 800c34a:	687a      	ldr	r2, [r7, #4]
 800c34c:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c34e:	00d2      	lsls	r2, r2, #3
 800c350:	491b      	ldr	r1, [pc, #108]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c352:	4313      	orrs	r3, r2
 800c354:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 800c356:	4b1a      	ldr	r3, [pc, #104]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c358:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c35a:	f023 020c 	bic.w	r2, r3, #12
 800c35e:	687b      	ldr	r3, [r7, #4]
 800c360:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c362:	4917      	ldr	r1, [pc, #92]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c364:	4313      	orrs	r3, r2
 800c366:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 800c368:	4b15      	ldr	r3, [pc, #84]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c36a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c36c:	f023 0202 	bic.w	r2, r3, #2
 800c370:	687b      	ldr	r3, [r7, #4]
 800c372:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c374:	4912      	ldr	r1, [pc, #72]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c376:	4313      	orrs	r3, r2
 800c378:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 800c37a:	4b11      	ldr	r3, [pc, #68]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c37c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c37e:	4a10      	ldr	r2, [pc, #64]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c380:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800c384:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800c386:	4b0e      	ldr	r3, [pc, #56]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c388:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c38a:	4a0d      	ldr	r2, [pc, #52]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c38c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800c390:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 800c392:	4b0b      	ldr	r3, [pc, #44]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c394:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c396:	4a0a      	ldr	r2, [pc, #40]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c398:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800c39c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 800c39e:	4b08      	ldr	r3, [pc, #32]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c3a0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c3a2:	4a07      	ldr	r2, [pc, #28]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c3a4:	f043 0301 	orr.w	r3, r3, #1
 800c3a8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800c3aa:	4b05      	ldr	r3, [pc, #20]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c3ac:	681b      	ldr	r3, [r3, #0]
 800c3ae:	4a04      	ldr	r2, [pc, #16]	@ (800c3c0 <HAL_RCC_OscConfig+0x76c>)
 800c3b0:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800c3b4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3b6:	f7fb fdaf 	bl	8007f18 <HAL_GetTick>
 800c3ba:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3bc:	e011      	b.n	800c3e2 <HAL_RCC_OscConfig+0x78e>
 800c3be:	bf00      	nop
 800c3c0:	58024400 	.word	0x58024400
 800c3c4:	58024800 	.word	0x58024800
 800c3c8:	fffffc0c 	.word	0xfffffc0c
 800c3cc:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c3d0:	f7fb fda2 	bl	8007f18 <HAL_GetTick>
 800c3d4:	4602      	mov	r2, r0
 800c3d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c3d8:	1ad3      	subs	r3, r2, r3
 800c3da:	2b02      	cmp	r3, #2
 800c3dc:	d901      	bls.n	800c3e2 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800c3de:	2303      	movs	r3, #3
 800c3e0:	e08a      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c3e2:	4b47      	ldr	r3, [pc, #284]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c3e4:	681b      	ldr	r3, [r3, #0]
 800c3e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c3ea:	2b00      	cmp	r3, #0
 800c3ec:	d0f0      	beq.n	800c3d0 <HAL_RCC_OscConfig+0x77c>
 800c3ee:	e082      	b.n	800c4f6 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800c3f0:	4b43      	ldr	r3, [pc, #268]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c3f2:	681b      	ldr	r3, [r3, #0]
 800c3f4:	4a42      	ldr	r2, [pc, #264]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c3f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 800c3fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800c3fc:	f7fb fd8c 	bl	8007f18 <HAL_GetTick>
 800c400:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c402:	e008      	b.n	800c416 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800c404:	f7fb fd88 	bl	8007f18 <HAL_GetTick>
 800c408:	4602      	mov	r2, r0
 800c40a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c40c:	1ad3      	subs	r3, r2, r3
 800c40e:	2b02      	cmp	r3, #2
 800c410:	d901      	bls.n	800c416 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 800c412:	2303      	movs	r3, #3
 800c414:	e070      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800c416:	4b3a      	ldr	r3, [pc, #232]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c418:	681b      	ldr	r3, [r3, #0]
 800c41a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c41e:	2b00      	cmp	r3, #0
 800c420:	d1f0      	bne.n	800c404 <HAL_RCC_OscConfig+0x7b0>
 800c422:	e068      	b.n	800c4f6 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 800c424:	4b36      	ldr	r3, [pc, #216]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c426:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c428:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800c42a:	4b35      	ldr	r3, [pc, #212]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c42c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c42e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c430:	687b      	ldr	r3, [r7, #4]
 800c432:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800c434:	2b01      	cmp	r3, #1
 800c436:	d031      	beq.n	800c49c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c438:	693b      	ldr	r3, [r7, #16]
 800c43a:	f003 0203 	and.w	r2, r3, #3
 800c43e:	687b      	ldr	r3, [r7, #4]
 800c440:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800c442:	429a      	cmp	r2, r3
 800c444:	d12a      	bne.n	800c49c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c446:	693b      	ldr	r3, [r7, #16]
 800c448:	091b      	lsrs	r3, r3, #4
 800c44a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800c452:	429a      	cmp	r2, r3
 800c454:	d122      	bne.n	800c49c <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c460:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 800c462:	429a      	cmp	r2, r3
 800c464:	d11a      	bne.n	800c49c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c466:	68fb      	ldr	r3, [r7, #12]
 800c468:	0a5b      	lsrs	r3, r3, #9
 800c46a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c46e:	687b      	ldr	r3, [r7, #4]
 800c470:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c472:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 800c474:	429a      	cmp	r2, r3
 800c476:	d111      	bne.n	800c49c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c478:	68fb      	ldr	r3, [r7, #12]
 800c47a:	0c1b      	lsrs	r3, r3, #16
 800c47c:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c480:	687b      	ldr	r3, [r7, #4]
 800c482:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800c484:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 800c486:	429a      	cmp	r2, r3
 800c488:	d108      	bne.n	800c49c <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 800c48a:	68fb      	ldr	r3, [r7, #12]
 800c48c:	0e1b      	lsrs	r3, r3, #24
 800c48e:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c496:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 800c498:	429a      	cmp	r2, r3
 800c49a:	d001      	beq.n	800c4a0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 800c49c:	2301      	movs	r3, #1
 800c49e:	e02b      	b.n	800c4f8 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 800c4a0:	4b17      	ldr	r3, [pc, #92]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c4a4:	08db      	lsrs	r3, r3, #3
 800c4a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c4aa:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 800c4ac:	687b      	ldr	r3, [r7, #4]
 800c4ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800c4b0:	693a      	ldr	r2, [r7, #16]
 800c4b2:	429a      	cmp	r2, r3
 800c4b4:	d01f      	beq.n	800c4f6 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 800c4b6:	4b12      	ldr	r3, [pc, #72]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ba:	4a11      	ldr	r2, [pc, #68]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4bc:	f023 0301 	bic.w	r3, r3, #1
 800c4c0:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 800c4c2:	f7fb fd29 	bl	8007f18 <HAL_GetTick>
 800c4c6:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 800c4c8:	bf00      	nop
 800c4ca:	f7fb fd25 	bl	8007f18 <HAL_GetTick>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c4d2:	4293      	cmp	r3, r2
 800c4d4:	d0f9      	beq.n	800c4ca <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 800c4d6:	4b0a      	ldr	r3, [pc, #40]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4d8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800c4da:	4b0a      	ldr	r3, [pc, #40]	@ (800c504 <HAL_RCC_OscConfig+0x8b0>)
 800c4dc:	4013      	ands	r3, r2
 800c4de:	687a      	ldr	r2, [r7, #4]
 800c4e0:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 800c4e2:	00d2      	lsls	r2, r2, #3
 800c4e4:	4906      	ldr	r1, [pc, #24]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4e6:	4313      	orrs	r3, r2
 800c4e8:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 800c4ea:	4b05      	ldr	r3, [pc, #20]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c4ee:	4a04      	ldr	r2, [pc, #16]	@ (800c500 <HAL_RCC_OscConfig+0x8ac>)
 800c4f0:	f043 0301 	orr.w	r3, r3, #1
 800c4f4:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 800c4f6:	2300      	movs	r3, #0
}
 800c4f8:	4618      	mov	r0, r3
 800c4fa:	3730      	adds	r7, #48	@ 0x30
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	58024400 	.word	0x58024400
 800c504:	ffff0007 	.word	0xffff0007

0800c508 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800c508:	b580      	push	{r7, lr}
 800c50a:	b086      	sub	sp, #24
 800c50c:	af00      	add	r7, sp, #0
 800c50e:	6078      	str	r0, [r7, #4]
 800c510:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800c512:	687b      	ldr	r3, [r7, #4]
 800c514:	2b00      	cmp	r3, #0
 800c516:	d101      	bne.n	800c51c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800c518:	2301      	movs	r3, #1
 800c51a:	e19c      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800c51c:	4b8a      	ldr	r3, [pc, #552]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f003 030f 	and.w	r3, r3, #15
 800c524:	683a      	ldr	r2, [r7, #0]
 800c526:	429a      	cmp	r2, r3
 800c528:	d910      	bls.n	800c54c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c52a:	4b87      	ldr	r3, [pc, #540]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	f023 020f 	bic.w	r2, r3, #15
 800c532:	4985      	ldr	r1, [pc, #532]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c534:	683b      	ldr	r3, [r7, #0]
 800c536:	4313      	orrs	r3, r2
 800c538:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c53a:	4b83      	ldr	r3, [pc, #524]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c53c:	681b      	ldr	r3, [r3, #0]
 800c53e:	f003 030f 	and.w	r3, r3, #15
 800c542:	683a      	ldr	r2, [r7, #0]
 800c544:	429a      	cmp	r2, r3
 800c546:	d001      	beq.n	800c54c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 800c548:	2301      	movs	r3, #1
 800c54a:	e184      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c54c:	687b      	ldr	r3, [r7, #4]
 800c54e:	681b      	ldr	r3, [r3, #0]
 800c550:	f003 0304 	and.w	r3, r3, #4
 800c554:	2b00      	cmp	r3, #0
 800c556:	d010      	beq.n	800c57a <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c558:	687b      	ldr	r3, [r7, #4]
 800c55a:	691a      	ldr	r2, [r3, #16]
 800c55c:	4b7b      	ldr	r3, [pc, #492]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c55e:	699b      	ldr	r3, [r3, #24]
 800c560:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c564:	429a      	cmp	r2, r3
 800c566:	d908      	bls.n	800c57a <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c568:	4b78      	ldr	r3, [pc, #480]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c56a:	699b      	ldr	r3, [r3, #24]
 800c56c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c570:	687b      	ldr	r3, [r7, #4]
 800c572:	691b      	ldr	r3, [r3, #16]
 800c574:	4975      	ldr	r1, [pc, #468]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c576:	4313      	orrs	r3, r2
 800c578:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	681b      	ldr	r3, [r3, #0]
 800c57e:	f003 0308 	and.w	r3, r3, #8
 800c582:	2b00      	cmp	r3, #0
 800c584:	d010      	beq.n	800c5a8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	695a      	ldr	r2, [r3, #20]
 800c58a:	4b70      	ldr	r3, [pc, #448]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c58c:	69db      	ldr	r3, [r3, #28]
 800c58e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c592:	429a      	cmp	r2, r3
 800c594:	d908      	bls.n	800c5a8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c596:	4b6d      	ldr	r3, [pc, #436]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c598:	69db      	ldr	r3, [r3, #28]
 800c59a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	695b      	ldr	r3, [r3, #20]
 800c5a2:	496a      	ldr	r1, [pc, #424]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c5a4:	4313      	orrs	r3, r2
 800c5a6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c5a8:	687b      	ldr	r3, [r7, #4]
 800c5aa:	681b      	ldr	r3, [r3, #0]
 800c5ac:	f003 0310 	and.w	r3, r3, #16
 800c5b0:	2b00      	cmp	r3, #0
 800c5b2:	d010      	beq.n	800c5d6 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c5b4:	687b      	ldr	r3, [r7, #4]
 800c5b6:	699a      	ldr	r2, [r3, #24]
 800c5b8:	4b64      	ldr	r3, [pc, #400]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c5ba:	69db      	ldr	r3, [r3, #28]
 800c5bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c5c0:	429a      	cmp	r2, r3
 800c5c2:	d908      	bls.n	800c5d6 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c5c4:	4b61      	ldr	r3, [pc, #388]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c5c6:	69db      	ldr	r3, [r3, #28]
 800c5c8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c5cc:	687b      	ldr	r3, [r7, #4]
 800c5ce:	699b      	ldr	r3, [r3, #24]
 800c5d0:	495e      	ldr	r1, [pc, #376]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c5d2:	4313      	orrs	r3, r2
 800c5d4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c5d6:	687b      	ldr	r3, [r7, #4]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	f003 0320 	and.w	r3, r3, #32
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d010      	beq.n	800c604 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	69da      	ldr	r2, [r3, #28]
 800c5e6:	4b59      	ldr	r3, [pc, #356]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c5e8:	6a1b      	ldr	r3, [r3, #32]
 800c5ea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c5ee:	429a      	cmp	r2, r3
 800c5f0:	d908      	bls.n	800c604 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c5f2:	4b56      	ldr	r3, [pc, #344]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c5f4:	6a1b      	ldr	r3, [r3, #32]
 800c5f6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c5fa:	687b      	ldr	r3, [r7, #4]
 800c5fc:	69db      	ldr	r3, [r3, #28]
 800c5fe:	4953      	ldr	r1, [pc, #332]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c600:	4313      	orrs	r3, r2
 800c602:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c604:	687b      	ldr	r3, [r7, #4]
 800c606:	681b      	ldr	r3, [r3, #0]
 800c608:	f003 0302 	and.w	r3, r3, #2
 800c60c:	2b00      	cmp	r3, #0
 800c60e:	d010      	beq.n	800c632 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c610:	687b      	ldr	r3, [r7, #4]
 800c612:	68da      	ldr	r2, [r3, #12]
 800c614:	4b4d      	ldr	r3, [pc, #308]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c616:	699b      	ldr	r3, [r3, #24]
 800c618:	f003 030f 	and.w	r3, r3, #15
 800c61c:	429a      	cmp	r2, r3
 800c61e:	d908      	bls.n	800c632 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c620:	4b4a      	ldr	r3, [pc, #296]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c622:	699b      	ldr	r3, [r3, #24]
 800c624:	f023 020f 	bic.w	r2, r3, #15
 800c628:	687b      	ldr	r3, [r7, #4]
 800c62a:	68db      	ldr	r3, [r3, #12]
 800c62c:	4947      	ldr	r1, [pc, #284]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c62e:	4313      	orrs	r3, r2
 800c630:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800c632:	687b      	ldr	r3, [r7, #4]
 800c634:	681b      	ldr	r3, [r3, #0]
 800c636:	f003 0301 	and.w	r3, r3, #1
 800c63a:	2b00      	cmp	r3, #0
 800c63c:	d055      	beq.n	800c6ea <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 800c63e:	4b43      	ldr	r3, [pc, #268]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c640:	699b      	ldr	r3, [r3, #24]
 800c642:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 800c646:	687b      	ldr	r3, [r7, #4]
 800c648:	689b      	ldr	r3, [r3, #8]
 800c64a:	4940      	ldr	r1, [pc, #256]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c64c:	4313      	orrs	r3, r2
 800c64e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800c650:	687b      	ldr	r3, [r7, #4]
 800c652:	685b      	ldr	r3, [r3, #4]
 800c654:	2b02      	cmp	r3, #2
 800c656:	d107      	bne.n	800c668 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800c658:	4b3c      	ldr	r3, [pc, #240]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c65a:	681b      	ldr	r3, [r3, #0]
 800c65c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800c660:	2b00      	cmp	r3, #0
 800c662:	d121      	bne.n	800c6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c664:	2301      	movs	r3, #1
 800c666:	e0f6      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800c668:	687b      	ldr	r3, [r7, #4]
 800c66a:	685b      	ldr	r3, [r3, #4]
 800c66c:	2b03      	cmp	r3, #3
 800c66e:	d107      	bne.n	800c680 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800c670:	4b36      	ldr	r3, [pc, #216]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800c678:	2b00      	cmp	r3, #0
 800c67a:	d115      	bne.n	800c6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c67c:	2301      	movs	r3, #1
 800c67e:	e0ea      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 800c680:	687b      	ldr	r3, [r7, #4]
 800c682:	685b      	ldr	r3, [r3, #4]
 800c684:	2b01      	cmp	r3, #1
 800c686:	d107      	bne.n	800c698 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800c688:	4b30      	ldr	r3, [pc, #192]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c68a:	681b      	ldr	r3, [r3, #0]
 800c68c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800c690:	2b00      	cmp	r3, #0
 800c692:	d109      	bne.n	800c6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c694:	2301      	movs	r3, #1
 800c696:	e0de      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800c698:	4b2c      	ldr	r3, [pc, #176]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c69a:	681b      	ldr	r3, [r3, #0]
 800c69c:	f003 0304 	and.w	r3, r3, #4
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d101      	bne.n	800c6a8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800c6a4:	2301      	movs	r3, #1
 800c6a6:	e0d6      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800c6a8:	4b28      	ldr	r3, [pc, #160]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c6aa:	691b      	ldr	r3, [r3, #16]
 800c6ac:	f023 0207 	bic.w	r2, r3, #7
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	685b      	ldr	r3, [r3, #4]
 800c6b4:	4925      	ldr	r1, [pc, #148]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c6b6:	4313      	orrs	r3, r2
 800c6b8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800c6ba:	f7fb fc2d 	bl	8007f18 <HAL_GetTick>
 800c6be:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6c0:	e00a      	b.n	800c6d8 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800c6c2:	f7fb fc29 	bl	8007f18 <HAL_GetTick>
 800c6c6:	4602      	mov	r2, r0
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	1ad3      	subs	r3, r2, r3
 800c6cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 800c6d0:	4293      	cmp	r3, r2
 800c6d2:	d901      	bls.n	800c6d8 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800c6d4:	2303      	movs	r3, #3
 800c6d6:	e0be      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800c6d8:	4b1c      	ldr	r3, [pc, #112]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c6da:	691b      	ldr	r3, [r3, #16]
 800c6dc:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800c6e0:	687b      	ldr	r3, [r7, #4]
 800c6e2:	685b      	ldr	r3, [r3, #4]
 800c6e4:	00db      	lsls	r3, r3, #3
 800c6e6:	429a      	cmp	r2, r3
 800c6e8:	d1eb      	bne.n	800c6c2 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800c6ea:	687b      	ldr	r3, [r7, #4]
 800c6ec:	681b      	ldr	r3, [r3, #0]
 800c6ee:	f003 0302 	and.w	r3, r3, #2
 800c6f2:	2b00      	cmp	r3, #0
 800c6f4:	d010      	beq.n	800c718 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 800c6f6:	687b      	ldr	r3, [r7, #4]
 800c6f8:	68da      	ldr	r2, [r3, #12]
 800c6fa:	4b14      	ldr	r3, [pc, #80]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c6fc:	699b      	ldr	r3, [r3, #24]
 800c6fe:	f003 030f 	and.w	r3, r3, #15
 800c702:	429a      	cmp	r2, r3
 800c704:	d208      	bcs.n	800c718 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800c706:	4b11      	ldr	r3, [pc, #68]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c708:	699b      	ldr	r3, [r3, #24]
 800c70a:	f023 020f 	bic.w	r2, r3, #15
 800c70e:	687b      	ldr	r3, [r7, #4]
 800c710:	68db      	ldr	r3, [r3, #12]
 800c712:	490e      	ldr	r1, [pc, #56]	@ (800c74c <HAL_RCC_ClockConfig+0x244>)
 800c714:	4313      	orrs	r3, r2
 800c716:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800c718:	4b0b      	ldr	r3, [pc, #44]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c71a:	681b      	ldr	r3, [r3, #0]
 800c71c:	f003 030f 	and.w	r3, r3, #15
 800c720:	683a      	ldr	r2, [r7, #0]
 800c722:	429a      	cmp	r2, r3
 800c724:	d214      	bcs.n	800c750 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800c726:	4b08      	ldr	r3, [pc, #32]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c728:	681b      	ldr	r3, [r3, #0]
 800c72a:	f023 020f 	bic.w	r2, r3, #15
 800c72e:	4906      	ldr	r1, [pc, #24]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c730:	683b      	ldr	r3, [r7, #0]
 800c732:	4313      	orrs	r3, r2
 800c734:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800c736:	4b04      	ldr	r3, [pc, #16]	@ (800c748 <HAL_RCC_ClockConfig+0x240>)
 800c738:	681b      	ldr	r3, [r3, #0]
 800c73a:	f003 030f 	and.w	r3, r3, #15
 800c73e:	683a      	ldr	r2, [r7, #0]
 800c740:	429a      	cmp	r2, r3
 800c742:	d005      	beq.n	800c750 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 800c744:	2301      	movs	r3, #1
 800c746:	e086      	b.n	800c856 <HAL_RCC_ClockConfig+0x34e>
 800c748:	52002000 	.word	0x52002000
 800c74c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	681b      	ldr	r3, [r3, #0]
 800c754:	f003 0304 	and.w	r3, r3, #4
 800c758:	2b00      	cmp	r3, #0
 800c75a:	d010      	beq.n	800c77e <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 800c75c:	687b      	ldr	r3, [r7, #4]
 800c75e:	691a      	ldr	r2, [r3, #16]
 800c760:	4b3f      	ldr	r3, [pc, #252]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c762:	699b      	ldr	r3, [r3, #24]
 800c764:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c768:	429a      	cmp	r2, r3
 800c76a:	d208      	bcs.n	800c77e <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 800c76c:	4b3c      	ldr	r3, [pc, #240]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c76e:	699b      	ldr	r3, [r3, #24]
 800c770:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c774:	687b      	ldr	r3, [r7, #4]
 800c776:	691b      	ldr	r3, [r3, #16]
 800c778:	4939      	ldr	r1, [pc, #228]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c77a:	4313      	orrs	r3, r2
 800c77c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	f003 0308 	and.w	r3, r3, #8
 800c786:	2b00      	cmp	r3, #0
 800c788:	d010      	beq.n	800c7ac <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 800c78a:	687b      	ldr	r3, [r7, #4]
 800c78c:	695a      	ldr	r2, [r3, #20]
 800c78e:	4b34      	ldr	r3, [pc, #208]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c790:	69db      	ldr	r3, [r3, #28]
 800c792:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c796:	429a      	cmp	r2, r3
 800c798:	d208      	bcs.n	800c7ac <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 800c79a:	4b31      	ldr	r3, [pc, #196]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c79c:	69db      	ldr	r3, [r3, #28]
 800c79e:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	695b      	ldr	r3, [r3, #20]
 800c7a6:	492e      	ldr	r1, [pc, #184]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c7a8:	4313      	orrs	r3, r2
 800c7aa:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	681b      	ldr	r3, [r3, #0]
 800c7b0:	f003 0310 	and.w	r3, r3, #16
 800c7b4:	2b00      	cmp	r3, #0
 800c7b6:	d010      	beq.n	800c7da <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 800c7b8:	687b      	ldr	r3, [r7, #4]
 800c7ba:	699a      	ldr	r2, [r3, #24]
 800c7bc:	4b28      	ldr	r3, [pc, #160]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c7be:	69db      	ldr	r3, [r3, #28]
 800c7c0:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c7c4:	429a      	cmp	r2, r3
 800c7c6:	d208      	bcs.n	800c7da <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 800c7c8:	4b25      	ldr	r3, [pc, #148]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c7ca:	69db      	ldr	r3, [r3, #28]
 800c7cc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	699b      	ldr	r3, [r3, #24]
 800c7d4:	4922      	ldr	r1, [pc, #136]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c7d6:	4313      	orrs	r3, r2
 800c7d8:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 800c7da:	687b      	ldr	r3, [r7, #4]
 800c7dc:	681b      	ldr	r3, [r3, #0]
 800c7de:	f003 0320 	and.w	r3, r3, #32
 800c7e2:	2b00      	cmp	r3, #0
 800c7e4:	d010      	beq.n	800c808 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800c7e6:	687b      	ldr	r3, [r7, #4]
 800c7e8:	69da      	ldr	r2, [r3, #28]
 800c7ea:	4b1d      	ldr	r3, [pc, #116]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c7ec:	6a1b      	ldr	r3, [r3, #32]
 800c7ee:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800c7f2:	429a      	cmp	r2, r3
 800c7f4:	d208      	bcs.n	800c808 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 800c7f6:	4b1a      	ldr	r3, [pc, #104]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c7f8:	6a1b      	ldr	r3, [r3, #32]
 800c7fa:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	69db      	ldr	r3, [r3, #28]
 800c802:	4917      	ldr	r1, [pc, #92]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c804:	4313      	orrs	r3, r2
 800c806:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 800c808:	f000 f834 	bl	800c874 <HAL_RCC_GetSysClockFreq>
 800c80c:	4602      	mov	r2, r0
 800c80e:	4b14      	ldr	r3, [pc, #80]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c810:	699b      	ldr	r3, [r3, #24]
 800c812:	0a1b      	lsrs	r3, r3, #8
 800c814:	f003 030f 	and.w	r3, r3, #15
 800c818:	4912      	ldr	r1, [pc, #72]	@ (800c864 <HAL_RCC_ClockConfig+0x35c>)
 800c81a:	5ccb      	ldrb	r3, [r1, r3]
 800c81c:	f003 031f 	and.w	r3, r3, #31
 800c820:	fa22 f303 	lsr.w	r3, r2, r3
 800c824:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800c826:	4b0e      	ldr	r3, [pc, #56]	@ (800c860 <HAL_RCC_ClockConfig+0x358>)
 800c828:	699b      	ldr	r3, [r3, #24]
 800c82a:	f003 030f 	and.w	r3, r3, #15
 800c82e:	4a0d      	ldr	r2, [pc, #52]	@ (800c864 <HAL_RCC_ClockConfig+0x35c>)
 800c830:	5cd3      	ldrb	r3, [r2, r3]
 800c832:	f003 031f 	and.w	r3, r3, #31
 800c836:	693a      	ldr	r2, [r7, #16]
 800c838:	fa22 f303 	lsr.w	r3, r2, r3
 800c83c:	4a0a      	ldr	r2, [pc, #40]	@ (800c868 <HAL_RCC_ClockConfig+0x360>)
 800c83e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800c840:	4a0a      	ldr	r2, [pc, #40]	@ (800c86c <HAL_RCC_ClockConfig+0x364>)
 800c842:	693b      	ldr	r3, [r7, #16]
 800c844:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 800c846:	4b0a      	ldr	r3, [pc, #40]	@ (800c870 <HAL_RCC_ClockConfig+0x368>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	4618      	mov	r0, r3
 800c84c:	f7fb fb1a 	bl	8007e84 <HAL_InitTick>
 800c850:	4603      	mov	r3, r0
 800c852:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800c854:	7bfb      	ldrb	r3, [r7, #15]
}
 800c856:	4618      	mov	r0, r3
 800c858:	3718      	adds	r7, #24
 800c85a:	46bd      	mov	sp, r7
 800c85c:	bd80      	pop	{r7, pc}
 800c85e:	bf00      	nop
 800c860:	58024400 	.word	0x58024400
 800c864:	0802890c 	.word	0x0802890c
 800c868:	24000480 	.word	0x24000480
 800c86c:	2400047c 	.word	0x2400047c
 800c870:	24000474 	.word	0x24000474

0800c874 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800c874:	b480      	push	{r7}
 800c876:	b089      	sub	sp, #36	@ 0x24
 800c878:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 800c87a:	4bb3      	ldr	r3, [pc, #716]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c87c:	691b      	ldr	r3, [r3, #16]
 800c87e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800c882:	2b18      	cmp	r3, #24
 800c884:	f200 8155 	bhi.w	800cb32 <HAL_RCC_GetSysClockFreq+0x2be>
 800c888:	a201      	add	r2, pc, #4	@ (adr r2, 800c890 <HAL_RCC_GetSysClockFreq+0x1c>)
 800c88a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c88e:	bf00      	nop
 800c890:	0800c8f5 	.word	0x0800c8f5
 800c894:	0800cb33 	.word	0x0800cb33
 800c898:	0800cb33 	.word	0x0800cb33
 800c89c:	0800cb33 	.word	0x0800cb33
 800c8a0:	0800cb33 	.word	0x0800cb33
 800c8a4:	0800cb33 	.word	0x0800cb33
 800c8a8:	0800cb33 	.word	0x0800cb33
 800c8ac:	0800cb33 	.word	0x0800cb33
 800c8b0:	0800c91b 	.word	0x0800c91b
 800c8b4:	0800cb33 	.word	0x0800cb33
 800c8b8:	0800cb33 	.word	0x0800cb33
 800c8bc:	0800cb33 	.word	0x0800cb33
 800c8c0:	0800cb33 	.word	0x0800cb33
 800c8c4:	0800cb33 	.word	0x0800cb33
 800c8c8:	0800cb33 	.word	0x0800cb33
 800c8cc:	0800cb33 	.word	0x0800cb33
 800c8d0:	0800c921 	.word	0x0800c921
 800c8d4:	0800cb33 	.word	0x0800cb33
 800c8d8:	0800cb33 	.word	0x0800cb33
 800c8dc:	0800cb33 	.word	0x0800cb33
 800c8e0:	0800cb33 	.word	0x0800cb33
 800c8e4:	0800cb33 	.word	0x0800cb33
 800c8e8:	0800cb33 	.word	0x0800cb33
 800c8ec:	0800cb33 	.word	0x0800cb33
 800c8f0:	0800c927 	.word	0x0800c927
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c8f4:	4b94      	ldr	r3, [pc, #592]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c8f6:	681b      	ldr	r3, [r3, #0]
 800c8f8:	f003 0320 	and.w	r3, r3, #32
 800c8fc:	2b00      	cmp	r3, #0
 800c8fe:	d009      	beq.n	800c914 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c900:	4b91      	ldr	r3, [pc, #580]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	08db      	lsrs	r3, r3, #3
 800c906:	f003 0303 	and.w	r3, r3, #3
 800c90a:	4a90      	ldr	r2, [pc, #576]	@ (800cb4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c90c:	fa22 f303 	lsr.w	r3, r2, r3
 800c910:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 800c912:	e111      	b.n	800cb38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 800c914:	4b8d      	ldr	r3, [pc, #564]	@ (800cb4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c916:	61bb      	str	r3, [r7, #24]
      break;
 800c918:	e10e      	b.n	800cb38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 800c91a:	4b8d      	ldr	r3, [pc, #564]	@ (800cb50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800c91c:	61bb      	str	r3, [r7, #24]
      break;
 800c91e:	e10b      	b.n	800cb38 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 800c920:	4b8c      	ldr	r3, [pc, #560]	@ (800cb54 <HAL_RCC_GetSysClockFreq+0x2e0>)
 800c922:	61bb      	str	r3, [r7, #24]
      break;
 800c924:	e108      	b.n	800cb38 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800c926:	4b88      	ldr	r3, [pc, #544]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c928:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c92a:	f003 0303 	and.w	r3, r3, #3
 800c92e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 800c930:	4b85      	ldr	r3, [pc, #532]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c932:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800c934:	091b      	lsrs	r3, r3, #4
 800c936:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800c93a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 800c93c:	4b82      	ldr	r3, [pc, #520]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c93e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800c940:	f003 0301 	and.w	r3, r3, #1
 800c944:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800c946:	4b80      	ldr	r3, [pc, #512]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c948:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c94a:	08db      	lsrs	r3, r3, #3
 800c94c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800c950:	68fa      	ldr	r2, [r7, #12]
 800c952:	fb02 f303 	mul.w	r3, r2, r3
 800c956:	ee07 3a90 	vmov	s15, r3
 800c95a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c95e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800c962:	693b      	ldr	r3, [r7, #16]
 800c964:	2b00      	cmp	r3, #0
 800c966:	f000 80e1 	beq.w	800cb2c <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 800c96a:	697b      	ldr	r3, [r7, #20]
 800c96c:	2b02      	cmp	r3, #2
 800c96e:	f000 8083 	beq.w	800ca78 <HAL_RCC_GetSysClockFreq+0x204>
 800c972:	697b      	ldr	r3, [r7, #20]
 800c974:	2b02      	cmp	r3, #2
 800c976:	f200 80a1 	bhi.w	800cabc <HAL_RCC_GetSysClockFreq+0x248>
 800c97a:	697b      	ldr	r3, [r7, #20]
 800c97c:	2b00      	cmp	r3, #0
 800c97e:	d003      	beq.n	800c988 <HAL_RCC_GetSysClockFreq+0x114>
 800c980:	697b      	ldr	r3, [r7, #20]
 800c982:	2b01      	cmp	r3, #1
 800c984:	d056      	beq.n	800ca34 <HAL_RCC_GetSysClockFreq+0x1c0>
 800c986:	e099      	b.n	800cabc <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800c988:	4b6f      	ldr	r3, [pc, #444]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c98a:	681b      	ldr	r3, [r3, #0]
 800c98c:	f003 0320 	and.w	r3, r3, #32
 800c990:	2b00      	cmp	r3, #0
 800c992:	d02d      	beq.n	800c9f0 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800c994:	4b6c      	ldr	r3, [pc, #432]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	08db      	lsrs	r3, r3, #3
 800c99a:	f003 0303 	and.w	r3, r3, #3
 800c99e:	4a6b      	ldr	r2, [pc, #428]	@ (800cb4c <HAL_RCC_GetSysClockFreq+0x2d8>)
 800c9a0:	fa22 f303 	lsr.w	r3, r2, r3
 800c9a4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	ee07 3a90 	vmov	s15, r3
 800c9ac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9b0:	693b      	ldr	r3, [r7, #16]
 800c9b2:	ee07 3a90 	vmov	s15, r3
 800c9b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9ba:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800c9be:	4b62      	ldr	r3, [pc, #392]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800c9c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c9c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800c9c6:	ee07 3a90 	vmov	s15, r3
 800c9ca:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800c9ce:	ed97 6a02 	vldr	s12, [r7, #8]
 800c9d2:	eddf 5a61 	vldr	s11, [pc, #388]	@ 800cb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800c9d6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800c9da:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800c9de:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800c9e2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800c9e6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800c9ea:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 800c9ee:	e087      	b.n	800cb00 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800c9f0:	693b      	ldr	r3, [r7, #16]
 800c9f2:	ee07 3a90 	vmov	s15, r3
 800c9f6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800c9fa:	eddf 6a58 	vldr	s13, [pc, #352]	@ 800cb5c <HAL_RCC_GetSysClockFreq+0x2e8>
 800c9fe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca02:	4b51      	ldr	r3, [pc, #324]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca06:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca0a:	ee07 3a90 	vmov	s15, r3
 800ca0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca12:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca16:	eddf 5a50 	vldr	s11, [pc, #320]	@ 800cb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca1a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca1e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca22:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca26:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca2a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca2e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca32:	e065      	b.n	800cb00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca34:	693b      	ldr	r3, [r7, #16]
 800ca36:	ee07 3a90 	vmov	s15, r3
 800ca3a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca3e:	eddf 6a48 	vldr	s13, [pc, #288]	@ 800cb60 <HAL_RCC_GetSysClockFreq+0x2ec>
 800ca42:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca46:	4b40      	ldr	r3, [pc, #256]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca4a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca4e:	ee07 3a90 	vmov	s15, r3
 800ca52:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca56:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca5a:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 800cb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800ca5e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800ca62:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800ca66:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ca6a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800ca6e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800ca72:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800ca76:	e043      	b.n	800cb00 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800ca78:	693b      	ldr	r3, [r7, #16]
 800ca7a:	ee07 3a90 	vmov	s15, r3
 800ca7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ca82:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800cb64 <HAL_RCC_GetSysClockFreq+0x2f0>
 800ca86:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800ca8a:	4b2f      	ldr	r3, [pc, #188]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800ca8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ca8e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800ca92:	ee07 3a90 	vmov	s15, r3
 800ca96:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800ca9a:	ed97 6a02 	vldr	s12, [r7, #8]
 800ca9e:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 800cb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800caa2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caa6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caaa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caae:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800cab2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cab6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800caba:	e021      	b.n	800cb00 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800cabc:	693b      	ldr	r3, [r7, #16]
 800cabe:	ee07 3a90 	vmov	s15, r3
 800cac2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800cac6:	eddf 6a26 	vldr	s13, [pc, #152]	@ 800cb60 <HAL_RCC_GetSysClockFreq+0x2ec>
 800caca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800cace:	4b1e      	ldr	r3, [pc, #120]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cad0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800cad6:	ee07 3a90 	vmov	s15, r3
 800cada:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800cade:	ed97 6a02 	vldr	s12, [r7, #8]
 800cae2:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 800cb58 <HAL_RCC_GetSysClockFreq+0x2e4>
 800cae6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800caea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800caee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800caf2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800caf6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800cafa:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800cafe:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 800cb00:	4b11      	ldr	r3, [pc, #68]	@ (800cb48 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800cb02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cb04:	0a5b      	lsrs	r3, r3, #9
 800cb06:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800cb0a:	3301      	adds	r3, #1
 800cb0c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800cb0e:	683b      	ldr	r3, [r7, #0]
 800cb10:	ee07 3a90 	vmov	s15, r3
 800cb14:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800cb18:	edd7 6a07 	vldr	s13, [r7, #28]
 800cb1c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800cb20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800cb24:	ee17 3a90 	vmov	r3, s15
 800cb28:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800cb2a:	e005      	b.n	800cb38 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800cb2c:	2300      	movs	r3, #0
 800cb2e:	61bb      	str	r3, [r7, #24]
      break;
 800cb30:	e002      	b.n	800cb38 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 800cb32:	4b07      	ldr	r3, [pc, #28]	@ (800cb50 <HAL_RCC_GetSysClockFreq+0x2dc>)
 800cb34:	61bb      	str	r3, [r7, #24]
      break;
 800cb36:	bf00      	nop
  }

  return sysclockfreq;
 800cb38:	69bb      	ldr	r3, [r7, #24]
}
 800cb3a:	4618      	mov	r0, r3
 800cb3c:	3724      	adds	r7, #36	@ 0x24
 800cb3e:	46bd      	mov	sp, r7
 800cb40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb44:	4770      	bx	lr
 800cb46:	bf00      	nop
 800cb48:	58024400 	.word	0x58024400
 800cb4c:	03d09000 	.word	0x03d09000
 800cb50:	003d0900 	.word	0x003d0900
 800cb54:	017d7840 	.word	0x017d7840
 800cb58:	46000000 	.word	0x46000000
 800cb5c:	4c742400 	.word	0x4c742400
 800cb60:	4a742400 	.word	0x4a742400
 800cb64:	4bbebc20 	.word	0x4bbebc20

0800cb68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800cb68:	b580      	push	{r7, lr}
 800cb6a:	b082      	sub	sp, #8
 800cb6c:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 800cb6e:	f7ff fe81 	bl	800c874 <HAL_RCC_GetSysClockFreq>
 800cb72:	4602      	mov	r2, r0
 800cb74:	4b10      	ldr	r3, [pc, #64]	@ (800cbb8 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb76:	699b      	ldr	r3, [r3, #24]
 800cb78:	0a1b      	lsrs	r3, r3, #8
 800cb7a:	f003 030f 	and.w	r3, r3, #15
 800cb7e:	490f      	ldr	r1, [pc, #60]	@ (800cbbc <HAL_RCC_GetHCLKFreq+0x54>)
 800cb80:	5ccb      	ldrb	r3, [r1, r3]
 800cb82:	f003 031f 	and.w	r3, r3, #31
 800cb86:	fa22 f303 	lsr.w	r3, r2, r3
 800cb8a:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 800cb8c:	4b0a      	ldr	r3, [pc, #40]	@ (800cbb8 <HAL_RCC_GetHCLKFreq+0x50>)
 800cb8e:	699b      	ldr	r3, [r3, #24]
 800cb90:	f003 030f 	and.w	r3, r3, #15
 800cb94:	4a09      	ldr	r2, [pc, #36]	@ (800cbbc <HAL_RCC_GetHCLKFreq+0x54>)
 800cb96:	5cd3      	ldrb	r3, [r2, r3]
 800cb98:	f003 031f 	and.w	r3, r3, #31
 800cb9c:	687a      	ldr	r2, [r7, #4]
 800cb9e:	fa22 f303 	lsr.w	r3, r2, r3
 800cba2:	4a07      	ldr	r2, [pc, #28]	@ (800cbc0 <HAL_RCC_GetHCLKFreq+0x58>)
 800cba4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800cba6:	4a07      	ldr	r2, [pc, #28]	@ (800cbc4 <HAL_RCC_GetHCLKFreq+0x5c>)
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 800cbac:	4b04      	ldr	r3, [pc, #16]	@ (800cbc0 <HAL_RCC_GetHCLKFreq+0x58>)
 800cbae:	681b      	ldr	r3, [r3, #0]
}
 800cbb0:	4618      	mov	r0, r3
 800cbb2:	3708      	adds	r7, #8
 800cbb4:	46bd      	mov	sp, r7
 800cbb6:	bd80      	pop	{r7, pc}
 800cbb8:	58024400 	.word	0x58024400
 800cbbc:	0802890c 	.word	0x0802890c
 800cbc0:	24000480 	.word	0x24000480
 800cbc4:	2400047c 	.word	0x2400047c

0800cbc8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800cbc8:	b580      	push	{r7, lr}
 800cbca:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800cbcc:	f7ff ffcc 	bl	800cb68 <HAL_RCC_GetHCLKFreq>
 800cbd0:	4602      	mov	r2, r0
 800cbd2:	4b06      	ldr	r3, [pc, #24]	@ (800cbec <HAL_RCC_GetPCLK1Freq+0x24>)
 800cbd4:	69db      	ldr	r3, [r3, #28]
 800cbd6:	091b      	lsrs	r3, r3, #4
 800cbd8:	f003 0307 	and.w	r3, r3, #7
 800cbdc:	4904      	ldr	r1, [pc, #16]	@ (800cbf0 <HAL_RCC_GetPCLK1Freq+0x28>)
 800cbde:	5ccb      	ldrb	r3, [r1, r3]
 800cbe0:	f003 031f 	and.w	r3, r3, #31
 800cbe4:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 800cbe8:	4618      	mov	r0, r3
 800cbea:	bd80      	pop	{r7, pc}
 800cbec:	58024400 	.word	0x58024400
 800cbf0:	0802890c 	.word	0x0802890c

0800cbf4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800cbf4:	b580      	push	{r7, lr}
 800cbf6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 800cbf8:	f7ff ffb6 	bl	800cb68 <HAL_RCC_GetHCLKFreq>
 800cbfc:	4602      	mov	r2, r0
 800cbfe:	4b06      	ldr	r3, [pc, #24]	@ (800cc18 <HAL_RCC_GetPCLK2Freq+0x24>)
 800cc00:	69db      	ldr	r3, [r3, #28]
 800cc02:	0a1b      	lsrs	r3, r3, #8
 800cc04:	f003 0307 	and.w	r3, r3, #7
 800cc08:	4904      	ldr	r1, [pc, #16]	@ (800cc1c <HAL_RCC_GetPCLK2Freq+0x28>)
 800cc0a:	5ccb      	ldrb	r3, [r1, r3]
 800cc0c:	f003 031f 	and.w	r3, r3, #31
 800cc10:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 800cc14:	4618      	mov	r0, r3
 800cc16:	bd80      	pop	{r7, pc}
 800cc18:	58024400 	.word	0x58024400
 800cc1c:	0802890c 	.word	0x0802890c

0800cc20 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800cc20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800cc24:	b0cc      	sub	sp, #304	@ 0x130
 800cc26:	af00      	add	r7, sp, #0
 800cc28:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800cc2c:	2300      	movs	r3, #0
 800cc2e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800cc32:	2300      	movs	r3, #0
 800cc34:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800cc38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cc3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cc40:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 800cc44:	2500      	movs	r5, #0
 800cc46:	ea54 0305 	orrs.w	r3, r4, r5
 800cc4a:	d049      	beq.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800cc4c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cc50:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800cc52:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc56:	d02f      	beq.n	800ccb8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 800cc58:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800cc5c:	d828      	bhi.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc5e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc62:	d01a      	beq.n	800cc9a <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800cc64:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800cc68:	d822      	bhi.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800cc6a:	2b00      	cmp	r3, #0
 800cc6c:	d003      	beq.n	800cc76 <HAL_RCCEx_PeriphCLKConfig+0x56>
 800cc6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800cc72:	d007      	beq.n	800cc84 <HAL_RCCEx_PeriphCLKConfig+0x64>
 800cc74:	e01c      	b.n	800ccb0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cc76:	4bb8      	ldr	r3, [pc, #736]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cc7a:	4ab7      	ldr	r2, [pc, #732]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cc7c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cc80:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc82:	e01a      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800cc84:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cc88:	3308      	adds	r3, #8
 800cc8a:	2102      	movs	r1, #2
 800cc8c:	4618      	mov	r0, r3
 800cc8e:	f002 fd47 	bl	800f720 <RCCEx_PLL2_Config>
 800cc92:	4603      	mov	r3, r0
 800cc94:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800cc98:	e00f      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800cc9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cc9e:	3328      	adds	r3, #40	@ 0x28
 800cca0:	2102      	movs	r1, #2
 800cca2:	4618      	mov	r0, r3
 800cca4:	f002 fdee 	bl	800f884 <RCCEx_PLL3_Config>
 800cca8:	4603      	mov	r3, r0
 800ccaa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800ccae:	e004      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ccb0:	2301      	movs	r3, #1
 800ccb2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ccb6:	e000      	b.n	800ccba <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 800ccb8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ccba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	d10a      	bne.n	800ccd8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800ccc2:	4ba5      	ldr	r3, [pc, #660]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccc4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ccc6:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800ccca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ccce:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800ccd0:	4aa1      	ldr	r2, [pc, #644]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ccd2:	430b      	orrs	r3, r1
 800ccd4:	6513      	str	r3, [r2, #80]	@ 0x50
 800ccd6:	e003      	b.n	800cce0 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ccd8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ccdc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 800cce0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cce8:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 800ccec:	f04f 0900 	mov.w	r9, #0
 800ccf0:	ea58 0309 	orrs.w	r3, r8, r9
 800ccf4:	d047      	beq.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 800ccf6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ccfa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800ccfc:	2b04      	cmp	r3, #4
 800ccfe:	d82a      	bhi.n	800cd56 <HAL_RCCEx_PeriphCLKConfig+0x136>
 800cd00:	a201      	add	r2, pc, #4	@ (adr r2, 800cd08 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 800cd02:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cd06:	bf00      	nop
 800cd08:	0800cd1d 	.word	0x0800cd1d
 800cd0c:	0800cd2b 	.word	0x0800cd2b
 800cd10:	0800cd41 	.word	0x0800cd41
 800cd14:	0800cd5f 	.word	0x0800cd5f
 800cd18:	0800cd5f 	.word	0x0800cd5f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cd1c:	4b8e      	ldr	r3, [pc, #568]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cd20:	4a8d      	ldr	r2, [pc, #564]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd22:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cd26:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd28:	e01a      	b.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cd2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cd2e:	3308      	adds	r3, #8
 800cd30:	2100      	movs	r1, #0
 800cd32:	4618      	mov	r0, r3
 800cd34:	f002 fcf4 	bl	800f720 <RCCEx_PLL2_Config>
 800cd38:	4603      	mov	r3, r0
 800cd3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd3e:	e00f      	b.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cd40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cd44:	3328      	adds	r3, #40	@ 0x28
 800cd46:	2100      	movs	r1, #0
 800cd48:	4618      	mov	r0, r3
 800cd4a:	f002 fd9b 	bl	800f884 <RCCEx_PLL3_Config>
 800cd4e:	4603      	mov	r3, r0
 800cd50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cd54:	e004      	b.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800cd56:	2301      	movs	r3, #1
 800cd58:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800cd5c:	e000      	b.n	800cd60 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800cd5e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cd60:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cd64:	2b00      	cmp	r3, #0
 800cd66:	d10a      	bne.n	800cd7e <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800cd68:	4b7b      	ldr	r3, [pc, #492]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800cd6c:	f023 0107 	bic.w	r1, r3, #7
 800cd70:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cd74:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800cd76:	4a78      	ldr	r2, [pc, #480]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cd78:	430b      	orrs	r3, r1
 800cd7a:	6513      	str	r3, [r2, #80]	@ 0x50
 800cd7c:	e003      	b.n	800cd86 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cd7e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cd82:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800cd86:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cd8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd8e:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800cd92:	f04f 0b00 	mov.w	fp, #0
 800cd96:	ea5a 030b 	orrs.w	r3, sl, fp
 800cd9a:	d04c      	beq.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 800cd9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cda0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800cda2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cda6:	d030      	beq.n	800ce0a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 800cda8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800cdac:	d829      	bhi.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdae:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdb0:	d02d      	beq.n	800ce0e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800cdb2:	2bc0      	cmp	r3, #192	@ 0xc0
 800cdb4:	d825      	bhi.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdb6:	2b80      	cmp	r3, #128	@ 0x80
 800cdb8:	d018      	beq.n	800cdec <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800cdba:	2b80      	cmp	r3, #128	@ 0x80
 800cdbc:	d821      	bhi.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800cdbe:	2b00      	cmp	r3, #0
 800cdc0:	d002      	beq.n	800cdc8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800cdc2:	2b40      	cmp	r3, #64	@ 0x40
 800cdc4:	d007      	beq.n	800cdd6 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800cdc6:	e01c      	b.n	800ce02 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cdc8:	4b63      	ldr	r3, [pc, #396]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cdcc:	4a62      	ldr	r2, [pc, #392]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cdce:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cdd2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdd4:	e01c      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cdd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cdda:	3308      	adds	r3, #8
 800cddc:	2100      	movs	r1, #0
 800cdde:	4618      	mov	r0, r3
 800cde0:	f002 fc9e 	bl	800f720 <RCCEx_PLL2_Config>
 800cde4:	4603      	mov	r3, r0
 800cde6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800cdea:	e011      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cdec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cdf0:	3328      	adds	r3, #40	@ 0x28
 800cdf2:	2100      	movs	r1, #0
 800cdf4:	4618      	mov	r0, r3
 800cdf6:	f002 fd45 	bl	800f884 <RCCEx_PLL3_Config>
 800cdfa:	4603      	mov	r3, r0
 800cdfc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800ce00:	e006      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ce02:	2301      	movs	r3, #1
 800ce04:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ce08:	e002      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ce0a:	bf00      	nop
 800ce0c:	e000      	b.n	800ce10 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800ce0e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ce10:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d10a      	bne.n	800ce2e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 800ce18:	4b4f      	ldr	r3, [pc, #316]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ce1c:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 800ce20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ce24:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800ce26:	4a4c      	ldr	r2, [pc, #304]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce28:	430b      	orrs	r3, r1
 800ce2a:	6513      	str	r3, [r2, #80]	@ 0x50
 800ce2c:	e003      	b.n	800ce36 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800ce2e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ce32:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 800ce36:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ce3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce3e:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 800ce42:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 800ce46:	2300      	movs	r3, #0
 800ce48:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 800ce4c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 800ce50:	460b      	mov	r3, r1
 800ce52:	4313      	orrs	r3, r2
 800ce54:	d053      	beq.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800ce56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ce5a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ce5e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce62:	d035      	beq.n	800ced0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800ce64:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800ce68:	d82e      	bhi.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce6a:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ce6e:	d031      	beq.n	800ced4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 800ce70:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800ce74:	d828      	bhi.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce76:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce7a:	d01a      	beq.n	800ceb2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 800ce7c:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800ce80:	d822      	bhi.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800ce82:	2b00      	cmp	r3, #0
 800ce84:	d003      	beq.n	800ce8e <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800ce86:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800ce8a:	d007      	beq.n	800ce9c <HAL_RCCEx_PeriphCLKConfig+0x27c>
 800ce8c:	e01c      	b.n	800cec8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800ce8e:	4b32      	ldr	r3, [pc, #200]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ce92:	4a31      	ldr	r2, [pc, #196]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800ce94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800ce98:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800ce9a:	e01c      	b.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800ce9c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cea0:	3308      	adds	r3, #8
 800cea2:	2100      	movs	r1, #0
 800cea4:	4618      	mov	r0, r3
 800cea6:	f002 fc3b 	bl	800f720 <RCCEx_PLL2_Config>
 800ceaa:	4603      	mov	r3, r0
 800ceac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800ceb0:	e011      	b.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800ceb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ceb6:	3328      	adds	r3, #40	@ 0x28
 800ceb8:	2100      	movs	r1, #0
 800ceba:	4618      	mov	r0, r3
 800cebc:	f002 fce2 	bl	800f884 <RCCEx_PLL3_Config>
 800cec0:	4603      	mov	r3, r0
 800cec2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cec6:	e006      	b.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cec8:	2301      	movs	r3, #1
 800ceca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800cece:	e002      	b.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ced0:	bf00      	nop
 800ced2:	e000      	b.n	800ced6 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800ced4:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ced6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ceda:	2b00      	cmp	r3, #0
 800cedc:	d10b      	bne.n	800cef6 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800cede:	4b1e      	ldr	r3, [pc, #120]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cee0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cee2:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800cee6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ceea:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 800ceee:	4a1a      	ldr	r2, [pc, #104]	@ (800cf58 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800cef0:	430b      	orrs	r3, r1
 800cef2:	6593      	str	r3, [r2, #88]	@ 0x58
 800cef4:	e003      	b.n	800cefe <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cef6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cefa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800cefe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cf02:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cf06:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 800cf0a:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 800cf0e:	2300      	movs	r3, #0
 800cf10:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 800cf14:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 800cf18:	460b      	mov	r3, r1
 800cf1a:	4313      	orrs	r3, r2
 800cf1c:	d056      	beq.n	800cfcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800cf1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cf22:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cf26:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf2a:	d038      	beq.n	800cf9e <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800cf2c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800cf30:	d831      	bhi.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf32:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf36:	d034      	beq.n	800cfa2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 800cf38:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800cf3c:	d82b      	bhi.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf3e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf42:	d01d      	beq.n	800cf80 <HAL_RCCEx_PeriphCLKConfig+0x360>
 800cf44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800cf48:	d825      	bhi.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf4a:	2b00      	cmp	r3, #0
 800cf4c:	d006      	beq.n	800cf5c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800cf4e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cf52:	d00a      	beq.n	800cf6a <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800cf54:	e01f      	b.n	800cf96 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800cf56:	bf00      	nop
 800cf58:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800cf5c:	4ba2      	ldr	r3, [pc, #648]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cf60:	4aa1      	ldr	r2, [pc, #644]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cf62:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800cf66:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf68:	e01c      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800cf6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cf6e:	3308      	adds	r3, #8
 800cf70:	2100      	movs	r1, #0
 800cf72:	4618      	mov	r0, r3
 800cf74:	f002 fbd4 	bl	800f720 <RCCEx_PLL2_Config>
 800cf78:	4603      	mov	r3, r0
 800cf7a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 800cf7e:	e011      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800cf80:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cf84:	3328      	adds	r3, #40	@ 0x28
 800cf86:	2100      	movs	r1, #0
 800cf88:	4618      	mov	r0, r3
 800cf8a:	f002 fc7b 	bl	800f884 <RCCEx_PLL3_Config>
 800cf8e:	4603      	mov	r3, r0
 800cf90:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800cf94:	e006      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800cf96:	2301      	movs	r3, #1
 800cf98:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800cf9c:	e002      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cf9e:	bf00      	nop
 800cfa0:	e000      	b.n	800cfa4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800cfa2:	bf00      	nop
    }

    if (ret == HAL_OK)
 800cfa4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cfa8:	2b00      	cmp	r3, #0
 800cfaa:	d10b      	bne.n	800cfc4 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 800cfac:	4b8e      	ldr	r3, [pc, #568]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800cfb0:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800cfb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cfb8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 800cfbc:	4a8a      	ldr	r2, [pc, #552]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800cfbe:	430b      	orrs	r3, r1
 800cfc0:	6593      	str	r3, [r2, #88]	@ 0x58
 800cfc2:	e003      	b.n	800cfcc <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800cfc4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800cfc8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800cfcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cfd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cfd4:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 800cfd8:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800cfdc:	2300      	movs	r3, #0
 800cfde:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800cfe2:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800cfe6:	460b      	mov	r3, r1
 800cfe8:	4313      	orrs	r3, r2
 800cfea:	d03a      	beq.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800cfec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800cff0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800cff2:	2b30      	cmp	r3, #48	@ 0x30
 800cff4:	d01f      	beq.n	800d036 <HAL_RCCEx_PeriphCLKConfig+0x416>
 800cff6:	2b30      	cmp	r3, #48	@ 0x30
 800cff8:	d819      	bhi.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800cffa:	2b20      	cmp	r3, #32
 800cffc:	d00c      	beq.n	800d018 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800cffe:	2b20      	cmp	r3, #32
 800d000:	d815      	bhi.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d019      	beq.n	800d03a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 800d006:	2b10      	cmp	r3, #16
 800d008:	d111      	bne.n	800d02e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d00a:	4b77      	ldr	r3, [pc, #476]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d00c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d00e:	4a76      	ldr	r2, [pc, #472]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d010:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d014:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d016:	e011      	b.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d018:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d01c:	3308      	adds	r3, #8
 800d01e:	2102      	movs	r1, #2
 800d020:	4618      	mov	r0, r3
 800d022:	f002 fb7d 	bl	800f720 <RCCEx_PLL2_Config>
 800d026:	4603      	mov	r3, r0
 800d028:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800d02c:	e006      	b.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d02e:	2301      	movs	r3, #1
 800d030:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d034:	e002      	b.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d036:	bf00      	nop
 800d038:	e000      	b.n	800d03c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800d03a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d03c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d040:	2b00      	cmp	r3, #0
 800d042:	d10a      	bne.n	800d05a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 800d044:	4b68      	ldr	r3, [pc, #416]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d046:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d048:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 800d04c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d052:	4a65      	ldr	r2, [pc, #404]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d054:	430b      	orrs	r3, r1
 800d056:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d058:	e003      	b.n	800d062 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d05a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d05e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 800d062:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d066:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d06a:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 800d06e:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 800d072:	2300      	movs	r3, #0
 800d074:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 800d078:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 800d07c:	460b      	mov	r3, r1
 800d07e:	4313      	orrs	r3, r2
 800d080:	d051      	beq.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 800d082:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d086:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d088:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d08c:	d035      	beq.n	800d0fa <HAL_RCCEx_PeriphCLKConfig+0x4da>
 800d08e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800d092:	d82e      	bhi.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d094:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d098:	d031      	beq.n	800d0fe <HAL_RCCEx_PeriphCLKConfig+0x4de>
 800d09a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800d09e:	d828      	bhi.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d0a0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0a4:	d01a      	beq.n	800d0dc <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 800d0a6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800d0aa:	d822      	bhi.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 800d0ac:	2b00      	cmp	r3, #0
 800d0ae:	d003      	beq.n	800d0b8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 800d0b0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d0b4:	d007      	beq.n	800d0c6 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 800d0b6:	e01c      	b.n	800d0f2 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d0b8:	4b4b      	ldr	r3, [pc, #300]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d0bc:	4a4a      	ldr	r2, [pc, #296]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d0be:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d0c2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0c4:	e01c      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d0c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d0ca:	3308      	adds	r3, #8
 800d0cc:	2100      	movs	r1, #0
 800d0ce:	4618      	mov	r0, r3
 800d0d0:	f002 fb26 	bl	800f720 <RCCEx_PLL2_Config>
 800d0d4:	4603      	mov	r3, r0
 800d0d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0da:	e011      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800d0dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d0e0:	3328      	adds	r3, #40	@ 0x28
 800d0e2:	2100      	movs	r1, #0
 800d0e4:	4618      	mov	r0, r3
 800d0e6:	f002 fbcd 	bl	800f884 <RCCEx_PLL3_Config>
 800d0ea:	4603      	mov	r3, r0
 800d0ec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800d0f0:	e006      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d0f2:	2301      	movs	r3, #1
 800d0f4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d0f8:	e002      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0fa:	bf00      	nop
 800d0fc:	e000      	b.n	800d100 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800d0fe:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d100:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d104:	2b00      	cmp	r3, #0
 800d106:	d10a      	bne.n	800d11e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 800d108:	4b37      	ldr	r3, [pc, #220]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d10a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d10c:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 800d110:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d114:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800d116:	4a34      	ldr	r2, [pc, #208]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d118:	430b      	orrs	r3, r1
 800d11a:	6513      	str	r3, [r2, #80]	@ 0x50
 800d11c:	e003      	b.n	800d126 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d11e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d122:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 800d126:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d12e:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 800d132:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 800d136:	2300      	movs	r3, #0
 800d138:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800d13c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 800d140:	460b      	mov	r3, r1
 800d142:	4313      	orrs	r3, r2
 800d144:	d056      	beq.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 800d146:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d14a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d14c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d150:	d033      	beq.n	800d1ba <HAL_RCCEx_PeriphCLKConfig+0x59a>
 800d152:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800d156:	d82c      	bhi.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d158:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d15c:	d02f      	beq.n	800d1be <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800d15e:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800d162:	d826      	bhi.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d164:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d168:	d02b      	beq.n	800d1c2 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 800d16a:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800d16e:	d820      	bhi.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d170:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d174:	d012      	beq.n	800d19c <HAL_RCCEx_PeriphCLKConfig+0x57c>
 800d176:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800d17a:	d81a      	bhi.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 800d17c:	2b00      	cmp	r3, #0
 800d17e:	d022      	beq.n	800d1c6 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 800d180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800d184:	d115      	bne.n	800d1b2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d186:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d18a:	3308      	adds	r3, #8
 800d18c:	2101      	movs	r1, #1
 800d18e:	4618      	mov	r0, r3
 800d190:	f002 fac6 	bl	800f720 <RCCEx_PLL2_Config>
 800d194:	4603      	mov	r3, r0
 800d196:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d19a:	e015      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d19c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d1a0:	3328      	adds	r3, #40	@ 0x28
 800d1a2:	2101      	movs	r1, #1
 800d1a4:	4618      	mov	r0, r3
 800d1a6:	f002 fb6d 	bl	800f884 <RCCEx_PLL3_Config>
 800d1aa:	4603      	mov	r3, r0
 800d1ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 800d1b0:	e00a      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d1b2:	2301      	movs	r3, #1
 800d1b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d1b8:	e006      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1ba:	bf00      	nop
 800d1bc:	e004      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1be:	bf00      	nop
 800d1c0:	e002      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1c2:	bf00      	nop
 800d1c4:	e000      	b.n	800d1c8 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 800d1c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d1c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d10d      	bne.n	800d1ec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 800d1d0:	4b05      	ldr	r3, [pc, #20]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d1d4:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 800d1d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d1dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 800d1de:	4a02      	ldr	r2, [pc, #8]	@ (800d1e8 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800d1e0:	430b      	orrs	r3, r1
 800d1e2:	6513      	str	r3, [r2, #80]	@ 0x50
 800d1e4:	e006      	b.n	800d1f4 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 800d1e6:	bf00      	nop
 800d1e8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d1ec:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d1f0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 800d1f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d1f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d1fc:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 800d200:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800d204:	2300      	movs	r3, #0
 800d206:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 800d20a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 800d20e:	460b      	mov	r3, r1
 800d210:	4313      	orrs	r3, r2
 800d212:	d055      	beq.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 800d214:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d218:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d21c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d220:	d033      	beq.n	800d28a <HAL_RCCEx_PeriphCLKConfig+0x66a>
 800d222:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d226:	d82c      	bhi.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d228:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d22c:	d02f      	beq.n	800d28e <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800d22e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d232:	d826      	bhi.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d234:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d238:	d02b      	beq.n	800d292 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800d23a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d23e:	d820      	bhi.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d240:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d244:	d012      	beq.n	800d26c <HAL_RCCEx_PeriphCLKConfig+0x64c>
 800d246:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d24a:	d81a      	bhi.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800d24c:	2b00      	cmp	r3, #0
 800d24e:	d022      	beq.n	800d296 <HAL_RCCEx_PeriphCLKConfig+0x676>
 800d250:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d254:	d115      	bne.n	800d282 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d256:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d25a:	3308      	adds	r3, #8
 800d25c:	2101      	movs	r1, #1
 800d25e:	4618      	mov	r0, r3
 800d260:	f002 fa5e 	bl	800f720 <RCCEx_PLL2_Config>
 800d264:	4603      	mov	r3, r0
 800d266:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d26a:	e015      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d26c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d270:	3328      	adds	r3, #40	@ 0x28
 800d272:	2101      	movs	r1, #1
 800d274:	4618      	mov	r0, r3
 800d276:	f002 fb05 	bl	800f884 <RCCEx_PLL3_Config>
 800d27a:	4603      	mov	r3, r0
 800d27c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 800d280:	e00a      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 800d282:	2301      	movs	r3, #1
 800d284:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d288:	e006      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d28a:	bf00      	nop
 800d28c:	e004      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d28e:	bf00      	nop
 800d290:	e002      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d292:	bf00      	nop
 800d294:	e000      	b.n	800d298 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 800d296:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d298:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d29c:	2b00      	cmp	r3, #0
 800d29e:	d10b      	bne.n	800d2b8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 800d2a0:	4bb6      	ldr	r3, [pc, #728]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d2a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d2a4:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d2a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d2ac:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 800d2b0:	4ab2      	ldr	r2, [pc, #712]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d2b2:	430b      	orrs	r3, r1
 800d2b4:	6593      	str	r3, [r2, #88]	@ 0x58
 800d2b6:	e003      	b.n	800d2c0 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d2b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d2bc:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 800d2c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d2c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d2c8:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 800d2cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800d2d0:	2300      	movs	r3, #0
 800d2d2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800d2d6:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 800d2da:	460b      	mov	r3, r1
 800d2dc:	4313      	orrs	r3, r2
 800d2de:	d02a      	beq.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 800d2e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d2e4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	d011      	beq.n	800d30e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800d2ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d2ee:	d10a      	bne.n	800d306 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d2f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d2f4:	3308      	adds	r3, #8
 800d2f6:	2101      	movs	r1, #1
 800d2f8:	4618      	mov	r0, r3
 800d2fa:	f002 fa11 	bl	800f720 <RCCEx_PLL2_Config>
 800d2fe:	4603      	mov	r3, r0
 800d300:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 800d304:	e004      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d306:	2301      	movs	r3, #1
 800d308:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d30c:	e000      	b.n	800d310 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800d30e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d310:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d314:	2b00      	cmp	r3, #0
 800d316:	d10a      	bne.n	800d32e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 800d318:	4b98      	ldr	r3, [pc, #608]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d31a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d31c:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 800d320:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d324:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d326:	4a95      	ldr	r2, [pc, #596]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d328:	430b      	orrs	r3, r1
 800d32a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d32c:	e003      	b.n	800d336 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d32e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d332:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 800d336:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d33a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d33e:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 800d342:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800d346:	2300      	movs	r3, #0
 800d348:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 800d34c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800d350:	460b      	mov	r3, r1
 800d352:	4313      	orrs	r3, r2
 800d354:	d037      	beq.n	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 800d356:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d35a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d35c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d360:	d00e      	beq.n	800d380 <HAL_RCCEx_PeriphCLKConfig+0x760>
 800d362:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d366:	d816      	bhi.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x776>
 800d368:	2b00      	cmp	r3, #0
 800d36a:	d018      	beq.n	800d39e <HAL_RCCEx_PeriphCLKConfig+0x77e>
 800d36c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d370:	d111      	bne.n	800d396 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d372:	4b82      	ldr	r3, [pc, #520]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d374:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d376:	4a81      	ldr	r2, [pc, #516]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d378:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d37c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d37e:	e00f      	b.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d380:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d384:	3308      	adds	r3, #8
 800d386:	2101      	movs	r1, #1
 800d388:	4618      	mov	r0, r3
 800d38a:	f002 f9c9 	bl	800f720 <RCCEx_PLL2_Config>
 800d38e:	4603      	mov	r3, r0
 800d390:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 800d394:	e004      	b.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d396:	2301      	movs	r3, #1
 800d398:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d39c:	e000      	b.n	800d3a0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 800d39e:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d3a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d3a4:	2b00      	cmp	r3, #0
 800d3a6:	d10a      	bne.n	800d3be <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800d3a8:	4b74      	ldr	r3, [pc, #464]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d3aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800d3ac:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800d3b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d3b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800d3b6:	4a71      	ldr	r2, [pc, #452]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d3b8:	430b      	orrs	r3, r1
 800d3ba:	6513      	str	r3, [r2, #80]	@ 0x50
 800d3bc:	e003      	b.n	800d3c6 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d3be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d3c2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 800d3c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d3ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d3ce:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 800d3d2:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800d3d6:	2300      	movs	r3, #0
 800d3d8:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 800d3dc:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 800d3e0:	460b      	mov	r3, r1
 800d3e2:	4313      	orrs	r3, r2
 800d3e4:	d03a      	beq.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 800d3e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d3ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d3ec:	2b03      	cmp	r3, #3
 800d3ee:	d81d      	bhi.n	800d42c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 800d3f0:	a201      	add	r2, pc, #4	@ (adr r2, 800d3f8 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 800d3f2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3f6:	bf00      	nop
 800d3f8:	0800d435 	.word	0x0800d435
 800d3fc:	0800d409 	.word	0x0800d409
 800d400:	0800d417 	.word	0x0800d417
 800d404:	0800d435 	.word	0x0800d435
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800d408:	4b5c      	ldr	r3, [pc, #368]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d40a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800d40c:	4a5b      	ldr	r2, [pc, #364]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d40e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800d412:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d414:	e00f      	b.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800d416:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d41a:	3308      	adds	r3, #8
 800d41c:	2102      	movs	r1, #2
 800d41e:	4618      	mov	r0, r3
 800d420:	f002 f97e 	bl	800f720 <RCCEx_PLL2_Config>
 800d424:	4603      	mov	r3, r0
 800d426:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800d42a:	e004      	b.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800d42c:	2301      	movs	r3, #1
 800d42e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d432:	e000      	b.n	800d436 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 800d434:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d436:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d10a      	bne.n	800d454 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800d43e:	4b4f      	ldr	r3, [pc, #316]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d440:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800d442:	f023 0103 	bic.w	r1, r3, #3
 800d446:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d44a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800d44c:	4a4b      	ldr	r2, [pc, #300]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d44e:	430b      	orrs	r3, r1
 800d450:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800d452:	e003      	b.n	800d45c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d454:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d458:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800d45c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d460:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d464:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 800d468:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800d46c:	2300      	movs	r3, #0
 800d46e:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800d472:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 800d476:	460b      	mov	r3, r1
 800d478:	4313      	orrs	r3, r2
 800d47a:	f000 80a0 	beq.w	800d5be <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800d47e:	4b40      	ldr	r3, [pc, #256]	@ (800d580 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800d480:	681b      	ldr	r3, [r3, #0]
 800d482:	4a3f      	ldr	r2, [pc, #252]	@ (800d580 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800d484:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800d488:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800d48a:	f7fa fd45 	bl	8007f18 <HAL_GetTick>
 800d48e:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d492:	e00b      	b.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800d494:	f7fa fd40 	bl	8007f18 <HAL_GetTick>
 800d498:	4602      	mov	r2, r0
 800d49a:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d49e:	1ad3      	subs	r3, r2, r3
 800d4a0:	2b64      	cmp	r3, #100	@ 0x64
 800d4a2:	d903      	bls.n	800d4ac <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 800d4a4:	2303      	movs	r3, #3
 800d4a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d4aa:	e005      	b.n	800d4b8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800d4ac:	4b34      	ldr	r3, [pc, #208]	@ (800d580 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d0ed      	beq.n	800d494 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 800d4b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d4bc:	2b00      	cmp	r3, #0
 800d4be:	d17a      	bne.n	800d5b6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 800d4c0:	4b2e      	ldr	r3, [pc, #184]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4c2:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800d4c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d4c8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d4cc:	4053      	eors	r3, r2
 800d4ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d015      	beq.n	800d502 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800d4d6:	4b29      	ldr	r3, [pc, #164]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4da:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800d4de:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 800d4e2:	4b26      	ldr	r3, [pc, #152]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4e4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4e6:	4a25      	ldr	r2, [pc, #148]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800d4ec:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 800d4ee:	4b23      	ldr	r3, [pc, #140]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d4f2:	4a22      	ldr	r2, [pc, #136]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4f4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800d4f8:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 800d4fa:	4a20      	ldr	r2, [pc, #128]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d4fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800d500:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 800d502:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d506:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d50a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800d50e:	d118      	bne.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800d510:	f7fa fd02 	bl	8007f18 <HAL_GetTick>
 800d514:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d518:	e00d      	b.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800d51a:	f7fa fcfd 	bl	8007f18 <HAL_GetTick>
 800d51e:	4602      	mov	r2, r0
 800d520:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800d524:	1ad2      	subs	r2, r2, r3
 800d526:	f241 3388 	movw	r3, #5000	@ 0x1388
 800d52a:	429a      	cmp	r2, r3
 800d52c:	d903      	bls.n	800d536 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 800d52e:	2303      	movs	r3, #3
 800d530:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 800d534:	e005      	b.n	800d542 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800d536:	4b11      	ldr	r3, [pc, #68]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d538:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800d53a:	f003 0302 	and.w	r3, r3, #2
 800d53e:	2b00      	cmp	r3, #0
 800d540:	d0eb      	beq.n	800d51a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 800d542:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d546:	2b00      	cmp	r3, #0
 800d548:	d130      	bne.n	800d5ac <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 800d54a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d54e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d552:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800d556:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800d55a:	d115      	bne.n	800d588 <HAL_RCCEx_PeriphCLKConfig+0x968>
 800d55c:	4b07      	ldr	r3, [pc, #28]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d55e:	691b      	ldr	r3, [r3, #16]
 800d560:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 800d564:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d568:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d56c:	091a      	lsrs	r2, r3, #4
 800d56e:	4b05      	ldr	r3, [pc, #20]	@ (800d584 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 800d570:	4013      	ands	r3, r2
 800d572:	4a02      	ldr	r2, [pc, #8]	@ (800d57c <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800d574:	430b      	orrs	r3, r1
 800d576:	6113      	str	r3, [r2, #16]
 800d578:	e00c      	b.n	800d594 <HAL_RCCEx_PeriphCLKConfig+0x974>
 800d57a:	bf00      	nop
 800d57c:	58024400 	.word	0x58024400
 800d580:	58024800 	.word	0x58024800
 800d584:	00ffffcf 	.word	0x00ffffcf
 800d588:	4bd4      	ldr	r3, [pc, #848]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d58a:	691b      	ldr	r3, [r3, #16]
 800d58c:	4ad3      	ldr	r2, [pc, #844]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d58e:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 800d592:	6113      	str	r3, [r2, #16]
 800d594:	4bd1      	ldr	r3, [pc, #836]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d596:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 800d598:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d59c:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 800d5a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800d5a4:	4acd      	ldr	r2, [pc, #820]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d5a6:	430b      	orrs	r3, r1
 800d5a8:	6713      	str	r3, [r2, #112]	@ 0x70
 800d5aa:	e008      	b.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800d5ac:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d5b0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 800d5b4:	e003      	b.n	800d5be <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d5b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d5ba:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 800d5be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d5c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d5c6:	f002 0301 	and.w	r3, r2, #1
 800d5ca:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800d5ce:	2300      	movs	r3, #0
 800d5d0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800d5d4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800d5d8:	460b      	mov	r3, r1
 800d5da:	4313      	orrs	r3, r2
 800d5dc:	f000 808b 	beq.w	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 800d5e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d5e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d5e8:	2b28      	cmp	r3, #40	@ 0x28
 800d5ea:	d86b      	bhi.n	800d6c4 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 800d5ec:	a201      	add	r2, pc, #4	@ (adr r2, 800d5f4 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 800d5ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d5f2:	bf00      	nop
 800d5f4:	0800d6cd 	.word	0x0800d6cd
 800d5f8:	0800d6c5 	.word	0x0800d6c5
 800d5fc:	0800d6c5 	.word	0x0800d6c5
 800d600:	0800d6c5 	.word	0x0800d6c5
 800d604:	0800d6c5 	.word	0x0800d6c5
 800d608:	0800d6c5 	.word	0x0800d6c5
 800d60c:	0800d6c5 	.word	0x0800d6c5
 800d610:	0800d6c5 	.word	0x0800d6c5
 800d614:	0800d699 	.word	0x0800d699
 800d618:	0800d6c5 	.word	0x0800d6c5
 800d61c:	0800d6c5 	.word	0x0800d6c5
 800d620:	0800d6c5 	.word	0x0800d6c5
 800d624:	0800d6c5 	.word	0x0800d6c5
 800d628:	0800d6c5 	.word	0x0800d6c5
 800d62c:	0800d6c5 	.word	0x0800d6c5
 800d630:	0800d6c5 	.word	0x0800d6c5
 800d634:	0800d6af 	.word	0x0800d6af
 800d638:	0800d6c5 	.word	0x0800d6c5
 800d63c:	0800d6c5 	.word	0x0800d6c5
 800d640:	0800d6c5 	.word	0x0800d6c5
 800d644:	0800d6c5 	.word	0x0800d6c5
 800d648:	0800d6c5 	.word	0x0800d6c5
 800d64c:	0800d6c5 	.word	0x0800d6c5
 800d650:	0800d6c5 	.word	0x0800d6c5
 800d654:	0800d6cd 	.word	0x0800d6cd
 800d658:	0800d6c5 	.word	0x0800d6c5
 800d65c:	0800d6c5 	.word	0x0800d6c5
 800d660:	0800d6c5 	.word	0x0800d6c5
 800d664:	0800d6c5 	.word	0x0800d6c5
 800d668:	0800d6c5 	.word	0x0800d6c5
 800d66c:	0800d6c5 	.word	0x0800d6c5
 800d670:	0800d6c5 	.word	0x0800d6c5
 800d674:	0800d6cd 	.word	0x0800d6cd
 800d678:	0800d6c5 	.word	0x0800d6c5
 800d67c:	0800d6c5 	.word	0x0800d6c5
 800d680:	0800d6c5 	.word	0x0800d6c5
 800d684:	0800d6c5 	.word	0x0800d6c5
 800d688:	0800d6c5 	.word	0x0800d6c5
 800d68c:	0800d6c5 	.word	0x0800d6c5
 800d690:	0800d6c5 	.word	0x0800d6c5
 800d694:	0800d6cd 	.word	0x0800d6cd
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d69c:	3308      	adds	r3, #8
 800d69e:	2101      	movs	r1, #1
 800d6a0:	4618      	mov	r0, r3
 800d6a2:	f002 f83d 	bl	800f720 <RCCEx_PLL2_Config>
 800d6a6:	4603      	mov	r3, r0
 800d6a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d6ac:	e00f      	b.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d6ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d6b2:	3328      	adds	r3, #40	@ 0x28
 800d6b4:	2101      	movs	r1, #1
 800d6b6:	4618      	mov	r0, r3
 800d6b8:	f002 f8e4 	bl	800f884 <RCCEx_PLL3_Config>
 800d6bc:	4603      	mov	r3, r0
 800d6be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800d6c2:	e004      	b.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d6c4:	2301      	movs	r3, #1
 800d6c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d6ca:	e000      	b.n	800d6ce <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 800d6cc:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d6ce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d6d2:	2b00      	cmp	r3, #0
 800d6d4:	d10b      	bne.n	800d6ee <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800d6d6:	4b81      	ldr	r3, [pc, #516]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d6d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d6da:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 800d6de:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d6e2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d6e6:	4a7d      	ldr	r2, [pc, #500]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d6e8:	430b      	orrs	r3, r1
 800d6ea:	6553      	str	r3, [r2, #84]	@ 0x54
 800d6ec:	e003      	b.n	800d6f6 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d6ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d6f2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 800d6f6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d6fe:	f002 0302 	and.w	r3, r2, #2
 800d702:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800d706:	2300      	movs	r3, #0
 800d708:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 800d70c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 800d710:	460b      	mov	r3, r1
 800d712:	4313      	orrs	r3, r2
 800d714:	d042      	beq.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 800d716:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d71a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d71c:	2b05      	cmp	r3, #5
 800d71e:	d825      	bhi.n	800d76c <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 800d720:	a201      	add	r2, pc, #4	@ (adr r2, 800d728 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 800d722:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d726:	bf00      	nop
 800d728:	0800d775 	.word	0x0800d775
 800d72c:	0800d741 	.word	0x0800d741
 800d730:	0800d757 	.word	0x0800d757
 800d734:	0800d775 	.word	0x0800d775
 800d738:	0800d775 	.word	0x0800d775
 800d73c:	0800d775 	.word	0x0800d775
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d740:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d744:	3308      	adds	r3, #8
 800d746:	2101      	movs	r1, #1
 800d748:	4618      	mov	r0, r3
 800d74a:	f001 ffe9 	bl	800f720 <RCCEx_PLL2_Config>
 800d74e:	4603      	mov	r3, r0
 800d750:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d754:	e00f      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d756:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d75a:	3328      	adds	r3, #40	@ 0x28
 800d75c:	2101      	movs	r1, #1
 800d75e:	4618      	mov	r0, r3
 800d760:	f002 f890 	bl	800f884 <RCCEx_PLL3_Config>
 800d764:	4603      	mov	r3, r0
 800d766:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800d76a:	e004      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d76c:	2301      	movs	r3, #1
 800d76e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d772:	e000      	b.n	800d776 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800d774:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d776:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d10a      	bne.n	800d794 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 800d77e:	4b57      	ldr	r3, [pc, #348]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d780:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d782:	f023 0107 	bic.w	r1, r3, #7
 800d786:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d78a:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800d78c:	4a53      	ldr	r2, [pc, #332]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d78e:	430b      	orrs	r3, r1
 800d790:	6553      	str	r3, [r2, #84]	@ 0x54
 800d792:	e003      	b.n	800d79c <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d794:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d798:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800d79c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d7a4:	f002 0304 	and.w	r3, r2, #4
 800d7a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800d7ac:	2300      	movs	r3, #0
 800d7ae:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800d7b2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800d7b6:	460b      	mov	r3, r1
 800d7b8:	4313      	orrs	r3, r2
 800d7ba:	d044      	beq.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 800d7bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d7c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d7c4:	2b05      	cmp	r3, #5
 800d7c6:	d825      	bhi.n	800d814 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 800d7c8:	a201      	add	r2, pc, #4	@ (adr r2, 800d7d0 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 800d7ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d7ce:	bf00      	nop
 800d7d0:	0800d81d 	.word	0x0800d81d
 800d7d4:	0800d7e9 	.word	0x0800d7e9
 800d7d8:	0800d7ff 	.word	0x0800d7ff
 800d7dc:	0800d81d 	.word	0x0800d81d
 800d7e0:	0800d81d 	.word	0x0800d81d
 800d7e4:	0800d81d 	.word	0x0800d81d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800d7e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d7ec:	3308      	adds	r3, #8
 800d7ee:	2101      	movs	r1, #1
 800d7f0:	4618      	mov	r0, r3
 800d7f2:	f001 ff95 	bl	800f720 <RCCEx_PLL2_Config>
 800d7f6:	4603      	mov	r3, r0
 800d7f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d7fc:	e00f      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800d7fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d802:	3328      	adds	r3, #40	@ 0x28
 800d804:	2101      	movs	r1, #1
 800d806:	4618      	mov	r0, r3
 800d808:	f002 f83c 	bl	800f884 <RCCEx_PLL3_Config>
 800d80c:	4603      	mov	r3, r0
 800d80e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 800d812:	e004      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d814:	2301      	movs	r3, #1
 800d816:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d81a:	e000      	b.n	800d81e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 800d81c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d81e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d822:	2b00      	cmp	r3, #0
 800d824:	d10b      	bne.n	800d83e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800d826:	4b2d      	ldr	r3, [pc, #180]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d828:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d82a:	f023 0107 	bic.w	r1, r3, #7
 800d82e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d832:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800d836:	4a29      	ldr	r2, [pc, #164]	@ (800d8dc <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 800d838:	430b      	orrs	r3, r1
 800d83a:	6593      	str	r3, [r2, #88]	@ 0x58
 800d83c:	e003      	b.n	800d846 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d83e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d842:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 800d846:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d84a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d84e:	f002 0320 	and.w	r3, r2, #32
 800d852:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800d856:	2300      	movs	r3, #0
 800d858:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800d85c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800d860:	460b      	mov	r3, r1
 800d862:	4313      	orrs	r3, r2
 800d864:	d057      	beq.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800d866:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d86a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d86e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d872:	d035      	beq.n	800d8e0 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800d874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800d878:	d82c      	bhi.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800d87a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d87e:	d031      	beq.n	800d8e4 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 800d880:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800d884:	d826      	bhi.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800d886:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d88a:	d02d      	beq.n	800d8e8 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 800d88c:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800d890:	d820      	bhi.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800d892:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d896:	d012      	beq.n	800d8be <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 800d898:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800d89c:	d81a      	bhi.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d024      	beq.n	800d8ec <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800d8a2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800d8a6:	d115      	bne.n	800d8d4 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d8a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d8ac:	3308      	adds	r3, #8
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	4618      	mov	r0, r3
 800d8b2:	f001 ff35 	bl	800f720 <RCCEx_PLL2_Config>
 800d8b6:	4603      	mov	r3, r0
 800d8b8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d8bc:	e017      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d8be:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d8c2:	3328      	adds	r3, #40	@ 0x28
 800d8c4:	2102      	movs	r1, #2
 800d8c6:	4618      	mov	r0, r3
 800d8c8:	f001 ffdc 	bl	800f884 <RCCEx_PLL3_Config>
 800d8cc:	4603      	mov	r3, r0
 800d8ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800d8d2:	e00c      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d8d4:	2301      	movs	r3, #1
 800d8d6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d8da:	e008      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
 800d8dc:	58024400 	.word	0x58024400
        break;
 800d8e0:	bf00      	nop
 800d8e2:	e004      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800d8e4:	bf00      	nop
 800d8e6:	e002      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800d8e8:	bf00      	nop
 800d8ea:	e000      	b.n	800d8ee <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800d8ec:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d8ee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d8f2:	2b00      	cmp	r3, #0
 800d8f4:	d10b      	bne.n	800d90e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 800d8f6:	4bc2      	ldr	r3, [pc, #776]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d8f8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800d8fa:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 800d8fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d902:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800d906:	4abe      	ldr	r2, [pc, #760]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d908:	430b      	orrs	r3, r1
 800d90a:	6553      	str	r3, [r2, #84]	@ 0x54
 800d90c:	e003      	b.n	800d916 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d90e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d912:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 800d916:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d91a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d91e:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 800d922:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800d926:	2300      	movs	r3, #0
 800d928:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 800d92c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 800d930:	460b      	mov	r3, r1
 800d932:	4313      	orrs	r3, r2
 800d934:	d055      	beq.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 800d936:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d93a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d93e:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d942:	d033      	beq.n	800d9ac <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 800d944:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 800d948:	d82c      	bhi.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800d94a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d94e:	d02f      	beq.n	800d9b0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 800d950:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800d954:	d826      	bhi.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800d956:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d95a:	d02b      	beq.n	800d9b4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 800d95c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 800d960:	d820      	bhi.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800d962:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d966:	d012      	beq.n	800d98e <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 800d968:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800d96c:	d81a      	bhi.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d022      	beq.n	800d9b8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800d972:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800d976:	d115      	bne.n	800d9a4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800d978:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d97c:	3308      	adds	r3, #8
 800d97e:	2100      	movs	r1, #0
 800d980:	4618      	mov	r0, r3
 800d982:	f001 fecd 	bl	800f720 <RCCEx_PLL2_Config>
 800d986:	4603      	mov	r3, r0
 800d988:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d98c:	e015      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800d98e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d992:	3328      	adds	r3, #40	@ 0x28
 800d994:	2102      	movs	r1, #2
 800d996:	4618      	mov	r0, r3
 800d998:	f001 ff74 	bl	800f884 <RCCEx_PLL3_Config>
 800d99c:	4603      	mov	r3, r0
 800d99e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800d9a2:	e00a      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800d9a4:	2301      	movs	r3, #1
 800d9a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800d9aa:	e006      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800d9ac:	bf00      	nop
 800d9ae:	e004      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800d9b0:	bf00      	nop
 800d9b2:	e002      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800d9b4:	bf00      	nop
 800d9b6:	e000      	b.n	800d9ba <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800d9b8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800d9ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d9be:	2b00      	cmp	r3, #0
 800d9c0:	d10b      	bne.n	800d9da <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800d9c2:	4b8f      	ldr	r3, [pc, #572]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d9c4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800d9c6:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 800d9ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d9ce:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800d9d2:	4a8b      	ldr	r2, [pc, #556]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800d9d4:	430b      	orrs	r3, r1
 800d9d6:	6593      	str	r3, [r2, #88]	@ 0x58
 800d9d8:	e003      	b.n	800d9e2 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800d9da:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800d9de:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800d9e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800d9e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800d9ea:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 800d9ee:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800d9f2:	2300      	movs	r3, #0
 800d9f4:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800d9f8:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 800d9fc:	460b      	mov	r3, r1
 800d9fe:	4313      	orrs	r3, r2
 800da00:	d055      	beq.n	800daae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 800da02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da06:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da0a:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800da0e:	d033      	beq.n	800da78 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 800da10:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 800da14:	d82c      	bhi.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800da16:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da1a:	d02f      	beq.n	800da7c <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 800da1c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800da20:	d826      	bhi.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800da22:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800da26:	d02b      	beq.n	800da80 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 800da28:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 800da2c:	d820      	bhi.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800da2e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da32:	d012      	beq.n	800da5a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 800da34:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800da38:	d81a      	bhi.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d022      	beq.n	800da84 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 800da3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800da42:	d115      	bne.n	800da70 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800da44:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da48:	3308      	adds	r3, #8
 800da4a:	2100      	movs	r1, #0
 800da4c:	4618      	mov	r0, r3
 800da4e:	f001 fe67 	bl	800f720 <RCCEx_PLL2_Config>
 800da52:	4603      	mov	r3, r0
 800da54:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800da58:	e015      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800da5a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da5e:	3328      	adds	r3, #40	@ 0x28
 800da60:	2102      	movs	r1, #2
 800da62:	4618      	mov	r0, r3
 800da64:	f001 ff0e 	bl	800f884 <RCCEx_PLL3_Config>
 800da68:	4603      	mov	r3, r0
 800da6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 800da6e:	e00a      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800da70:	2301      	movs	r3, #1
 800da72:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800da76:	e006      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800da78:	bf00      	nop
 800da7a:	e004      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800da7c:	bf00      	nop
 800da7e:	e002      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800da80:	bf00      	nop
 800da82:	e000      	b.n	800da86 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800da84:	bf00      	nop
    }

    if (ret == HAL_OK)
 800da86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800da8a:	2b00      	cmp	r3, #0
 800da8c:	d10b      	bne.n	800daa6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 800da8e:	4b5c      	ldr	r3, [pc, #368]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800da90:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800da92:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800da96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800da9a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 800da9e:	4a58      	ldr	r2, [pc, #352]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800daa0:	430b      	orrs	r3, r1
 800daa2:	6593      	str	r3, [r2, #88]	@ 0x58
 800daa4:	e003      	b.n	800daae <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800daa6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800daaa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 800daae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dab6:	f002 0308 	and.w	r3, r2, #8
 800daba:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800dabe:	2300      	movs	r3, #0
 800dac0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800dac4:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 800dac8:	460b      	mov	r3, r1
 800daca:	4313      	orrs	r3, r2
 800dacc:	d01e      	beq.n	800db0c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800dace:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dad2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800dad6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800dada:	d10c      	bne.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dadc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dae0:	3328      	adds	r3, #40	@ 0x28
 800dae2:	2102      	movs	r1, #2
 800dae4:	4618      	mov	r0, r3
 800dae6:	f001 fecd 	bl	800f884 <RCCEx_PLL3_Config>
 800daea:	4603      	mov	r3, r0
 800daec:	2b00      	cmp	r3, #0
 800daee:	d002      	beq.n	800daf6 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 800daf0:	2301      	movs	r3, #1
 800daf2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 800daf6:	4b42      	ldr	r3, [pc, #264]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800daf8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dafa:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800dafe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db02:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800db06:	4a3e      	ldr	r2, [pc, #248]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800db08:	430b      	orrs	r3, r1
 800db0a:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800db0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db14:	f002 0310 	and.w	r3, r2, #16
 800db18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800db1c:	2300      	movs	r3, #0
 800db1e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800db22:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 800db26:	460b      	mov	r3, r1
 800db28:	4313      	orrs	r3, r2
 800db2a:	d01e      	beq.n	800db6a <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800db2c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db30:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800db34:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800db38:	d10c      	bne.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800db3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db3e:	3328      	adds	r3, #40	@ 0x28
 800db40:	2102      	movs	r1, #2
 800db42:	4618      	mov	r0, r3
 800db44:	f001 fe9e 	bl	800f884 <RCCEx_PLL3_Config>
 800db48:	4603      	mov	r3, r0
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d002      	beq.n	800db54 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800db4e:	2301      	movs	r3, #1
 800db50:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800db54:	4b2a      	ldr	r3, [pc, #168]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800db56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800db58:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800db5c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db60:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800db64:	4a26      	ldr	r2, [pc, #152]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800db66:	430b      	orrs	r3, r1
 800db68:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800db6a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800db72:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800db76:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800db7a:	2300      	movs	r3, #0
 800db7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800db80:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800db84:	460b      	mov	r3, r1
 800db86:	4313      	orrs	r3, r2
 800db88:	d040      	beq.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 800db8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800db8e:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800db92:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db96:	d022      	beq.n	800dbde <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 800db98:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800db9c:	d81b      	bhi.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 800db9e:	2b00      	cmp	r3, #0
 800dba0:	d003      	beq.n	800dbaa <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800dba2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dba6:	d00b      	beq.n	800dbc0 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 800dba8:	e015      	b.n	800dbd6 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800dbaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dbae:	3308      	adds	r3, #8
 800dbb0:	2100      	movs	r1, #0
 800dbb2:	4618      	mov	r0, r3
 800dbb4:	f001 fdb4 	bl	800f720 <RCCEx_PLL2_Config>
 800dbb8:	4603      	mov	r3, r0
 800dbba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dbbe:	e00f      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800dbc0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dbc4:	3328      	adds	r3, #40	@ 0x28
 800dbc6:	2102      	movs	r1, #2
 800dbc8:	4618      	mov	r0, r3
 800dbca:	f001 fe5b 	bl	800f884 <RCCEx_PLL3_Config>
 800dbce:	4603      	mov	r3, r0
 800dbd0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800dbd4:	e004      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dbd6:	2301      	movs	r3, #1
 800dbd8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800dbdc:	e000      	b.n	800dbe0 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800dbde:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dbe0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dbe4:	2b00      	cmp	r3, #0
 800dbe6:	d10d      	bne.n	800dc04 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800dbe8:	4b05      	ldr	r3, [pc, #20]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800dbea:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dbec:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 800dbf0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dbf4:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800dbf8:	4a01      	ldr	r2, [pc, #4]	@ (800dc00 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800dbfa:	430b      	orrs	r3, r1
 800dbfc:	6593      	str	r3, [r2, #88]	@ 0x58
 800dbfe:	e005      	b.n	800dc0c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 800dc00:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc04:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dc08:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800dc0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc14:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 800dc18:	67bb      	str	r3, [r7, #120]	@ 0x78
 800dc1a:	2300      	movs	r3, #0
 800dc1c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800dc1e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 800dc22:	460b      	mov	r3, r1
 800dc24:	4313      	orrs	r3, r2
 800dc26:	d03b      	beq.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 800dc28:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc2c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc30:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc34:	d01f      	beq.n	800dc76 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 800dc36:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800dc3a:	d818      	bhi.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800dc3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800dc40:	d003      	beq.n	800dc4a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 800dc42:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800dc46:	d007      	beq.n	800dc58 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 800dc48:	e011      	b.n	800dc6e <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dc4a:	4b64      	ldr	r3, [pc, #400]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dc4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc4e:	4a63      	ldr	r2, [pc, #396]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dc50:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dc54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800dc56:	e00f      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800dc58:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc5c:	3328      	adds	r3, #40	@ 0x28
 800dc5e:	2101      	movs	r1, #1
 800dc60:	4618      	mov	r0, r3
 800dc62:	f001 fe0f 	bl	800f884 <RCCEx_PLL3_Config>
 800dc66:	4603      	mov	r3, r0
 800dc68:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 800dc6c:	e004      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800dc6e:	2301      	movs	r3, #1
 800dc70:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800dc74:	e000      	b.n	800dc78 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800dc76:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dc78:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dc7c:	2b00      	cmp	r3, #0
 800dc7e:	d10b      	bne.n	800dc98 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800dc80:	4b56      	ldr	r3, [pc, #344]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dc82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dc84:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 800dc88:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dc8c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800dc90:	4a52      	ldr	r2, [pc, #328]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dc92:	430b      	orrs	r3, r1
 800dc94:	6553      	str	r3, [r2, #84]	@ 0x54
 800dc96:	e003      	b.n	800dca0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dc98:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dc9c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 800dca0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dca4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dca8:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 800dcac:	673b      	str	r3, [r7, #112]	@ 0x70
 800dcae:	2300      	movs	r3, #0
 800dcb0:	677b      	str	r3, [r7, #116]	@ 0x74
 800dcb2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800dcb6:	460b      	mov	r3, r1
 800dcb8:	4313      	orrs	r3, r2
 800dcba:	d031      	beq.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 800dcbc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dcc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dcc2:	2b00      	cmp	r3, #0
 800dcc4:	d003      	beq.n	800dcce <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800dcc6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800dcca:	d007      	beq.n	800dcdc <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800dccc:	e011      	b.n	800dcf2 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dcce:	4b43      	ldr	r3, [pc, #268]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dcd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dcd2:	4a42      	ldr	r2, [pc, #264]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dcd4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dcd8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dcda:	e00e      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dcdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dce0:	3308      	adds	r3, #8
 800dce2:	2102      	movs	r1, #2
 800dce4:	4618      	mov	r0, r3
 800dce6:	f001 fd1b 	bl	800f720 <RCCEx_PLL2_Config>
 800dcea:	4603      	mov	r3, r0
 800dcec:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800dcf0:	e003      	b.n	800dcfa <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 800dcf2:	2301      	movs	r3, #1
 800dcf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800dcf8:	bf00      	nop
    }

    if (ret == HAL_OK)
 800dcfa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dcfe:	2b00      	cmp	r3, #0
 800dd00:	d10a      	bne.n	800dd18 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 800dd02:	4b36      	ldr	r3, [pc, #216]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dd04:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800dd06:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 800dd0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dd0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800dd10:	4a32      	ldr	r2, [pc, #200]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dd12:	430b      	orrs	r3, r1
 800dd14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800dd16:	e003      	b.n	800dd20 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dd18:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dd1c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 800dd20:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dd24:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd28:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 800dd2c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800dd2e:	2300      	movs	r3, #0
 800dd30:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800dd32:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 800dd36:	460b      	mov	r3, r1
 800dd38:	4313      	orrs	r3, r2
 800dd3a:	d00c      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800dd3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dd40:	3328      	adds	r3, #40	@ 0x28
 800dd42:	2102      	movs	r1, #2
 800dd44:	4618      	mov	r0, r3
 800dd46:	f001 fd9d 	bl	800f884 <RCCEx_PLL3_Config>
 800dd4a:	4603      	mov	r3, r0
 800dd4c:	2b00      	cmp	r3, #0
 800dd4e:	d002      	beq.n	800dd56 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 800dd50:	2301      	movs	r3, #1
 800dd52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800dd56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dd5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5e:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800dd62:	663b      	str	r3, [r7, #96]	@ 0x60
 800dd64:	2300      	movs	r3, #0
 800dd66:	667b      	str	r3, [r7, #100]	@ 0x64
 800dd68:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 800dd6c:	460b      	mov	r3, r1
 800dd6e:	4313      	orrs	r3, r2
 800dd70:	d03a      	beq.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800dd72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dd76:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800dd7a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd7e:	d018      	beq.n	800ddb2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 800dd80:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800dd84:	d811      	bhi.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800dd86:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd8a:	d014      	beq.n	800ddb6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 800dd8c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800dd90:	d80b      	bhi.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800dd92:	2b00      	cmp	r3, #0
 800dd94:	d011      	beq.n	800ddba <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800dd96:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800dd9a:	d106      	bne.n	800ddaa <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800dd9c:	4b0f      	ldr	r3, [pc, #60]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dd9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dda0:	4a0e      	ldr	r2, [pc, #56]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800dda2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800dda6:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 800dda8:	e008      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800ddaa:	2301      	movs	r3, #1
 800ddac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800ddb0:	e004      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800ddb2:	bf00      	nop
 800ddb4:	e002      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800ddb6:	bf00      	nop
 800ddb8:	e000      	b.n	800ddbc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800ddba:	bf00      	nop
    }

    if (ret == HAL_OK)
 800ddbc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800ddc0:	2b00      	cmp	r3, #0
 800ddc2:	d10d      	bne.n	800dde0 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800ddc4:	4b05      	ldr	r3, [pc, #20]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ddc6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800ddc8:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 800ddcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ddd0:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ddd4:	4a01      	ldr	r2, [pc, #4]	@ (800dddc <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800ddd6:	430b      	orrs	r3, r1
 800ddd8:	6553      	str	r3, [r2, #84]	@ 0x54
 800ddda:	e005      	b.n	800dde8 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800dddc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dde0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dde4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800dde8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800ddec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ddf0:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 800ddf4:	65bb      	str	r3, [r7, #88]	@ 0x58
 800ddf6:	2300      	movs	r3, #0
 800ddf8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800ddfa:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 800ddfe:	460b      	mov	r3, r1
 800de00:	4313      	orrs	r3, r2
 800de02:	d009      	beq.n	800de18 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 800de04:	4baa      	ldr	r3, [pc, #680]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de08:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 800de0c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de10:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800de12:	4aa7      	ldr	r2, [pc, #668]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de14:	430b      	orrs	r3, r1
 800de16:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 800de18:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de20:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 800de24:	653b      	str	r3, [r7, #80]	@ 0x50
 800de26:	2300      	movs	r3, #0
 800de28:	657b      	str	r3, [r7, #84]	@ 0x54
 800de2a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 800de2e:	460b      	mov	r3, r1
 800de30:	4313      	orrs	r3, r2
 800de32:	d00a      	beq.n	800de4a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 800de34:	4b9e      	ldr	r3, [pc, #632]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de36:	691b      	ldr	r3, [r3, #16]
 800de38:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 800de3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de40:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 800de44:	4a9a      	ldr	r2, [pc, #616]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de46:	430b      	orrs	r3, r1
 800de48:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800de4a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de52:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800de56:	64bb      	str	r3, [r7, #72]	@ 0x48
 800de58:	2300      	movs	r3, #0
 800de5a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800de5c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 800de60:	460b      	mov	r3, r1
 800de62:	4313      	orrs	r3, r2
 800de64:	d009      	beq.n	800de7a <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800de66:	4b92      	ldr	r3, [pc, #584]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de68:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800de6a:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 800de6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de72:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800de74:	4a8e      	ldr	r2, [pc, #568]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de76:	430b      	orrs	r3, r1
 800de78:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 800de7a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800de7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de82:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800de86:	643b      	str	r3, [r7, #64]	@ 0x40
 800de88:	2300      	movs	r3, #0
 800de8a:	647b      	str	r3, [r7, #68]	@ 0x44
 800de8c:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 800de90:	460b      	mov	r3, r1
 800de92:	4313      	orrs	r3, r2
 800de94:	d00e      	beq.n	800deb4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800de96:	4b86      	ldr	r3, [pc, #536]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de98:	691b      	ldr	r3, [r3, #16]
 800de9a:	4a85      	ldr	r2, [pc, #532]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800de9c:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 800dea0:	6113      	str	r3, [r2, #16]
 800dea2:	4b83      	ldr	r3, [pc, #524]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800dea4:	6919      	ldr	r1, [r3, #16]
 800dea6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800deaa:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800deae:	4a80      	ldr	r2, [pc, #512]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800deb0:	430b      	orrs	r3, r1
 800deb2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800deb4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800deb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800debc:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 800dec0:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dec2:	2300      	movs	r3, #0
 800dec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dec6:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 800deca:	460b      	mov	r3, r1
 800decc:	4313      	orrs	r3, r2
 800dece:	d009      	beq.n	800dee4 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 800ded0:	4b77      	ldr	r3, [pc, #476]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800ded2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ded4:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 800ded8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dedc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800dede:	4a74      	ldr	r2, [pc, #464]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800dee0:	430b      	orrs	r3, r1
 800dee2:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800dee4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dee8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800deec:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 800def0:	633b      	str	r3, [r7, #48]	@ 0x30
 800def2:	2300      	movs	r3, #0
 800def4:	637b      	str	r3, [r7, #52]	@ 0x34
 800def6:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 800defa:	460b      	mov	r3, r1
 800defc:	4313      	orrs	r3, r2
 800defe:	d00a      	beq.n	800df16 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800df00:	4b6b      	ldr	r3, [pc, #428]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800df02:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800df04:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 800df08:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800df10:	4a67      	ldr	r2, [pc, #412]	@ (800e0b0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800df12:	430b      	orrs	r3, r1
 800df14:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 800df16:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df1e:	2100      	movs	r1, #0
 800df20:	62b9      	str	r1, [r7, #40]	@ 0x28
 800df22:	f003 0301 	and.w	r3, r3, #1
 800df26:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800df28:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 800df2c:	460b      	mov	r3, r1
 800df2e:	4313      	orrs	r3, r2
 800df30:	d011      	beq.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800df32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df36:	3308      	adds	r3, #8
 800df38:	2100      	movs	r1, #0
 800df3a:	4618      	mov	r0, r3
 800df3c:	f001 fbf0 	bl	800f720 <RCCEx_PLL2_Config>
 800df40:	4603      	mov	r3, r0
 800df42:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800df46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d003      	beq.n	800df56 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df4e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800df52:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800df56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df5e:	2100      	movs	r1, #0
 800df60:	6239      	str	r1, [r7, #32]
 800df62:	f003 0302 	and.w	r3, r3, #2
 800df66:	627b      	str	r3, [r7, #36]	@ 0x24
 800df68:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800df6c:	460b      	mov	r3, r1
 800df6e:	4313      	orrs	r3, r2
 800df70:	d011      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800df72:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df76:	3308      	adds	r3, #8
 800df78:	2101      	movs	r1, #1
 800df7a:	4618      	mov	r0, r3
 800df7c:	f001 fbd0 	bl	800f720 <RCCEx_PLL2_Config>
 800df80:	4603      	mov	r3, r0
 800df82:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800df86:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800df8a:	2b00      	cmp	r3, #0
 800df8c:	d003      	beq.n	800df96 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800df8e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800df92:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800df96:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800df9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800df9e:	2100      	movs	r1, #0
 800dfa0:	61b9      	str	r1, [r7, #24]
 800dfa2:	f003 0304 	and.w	r3, r3, #4
 800dfa6:	61fb      	str	r3, [r7, #28]
 800dfa8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800dfac:	460b      	mov	r3, r1
 800dfae:	4313      	orrs	r3, r2
 800dfb0:	d011      	beq.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800dfb2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dfb6:	3308      	adds	r3, #8
 800dfb8:	2102      	movs	r1, #2
 800dfba:	4618      	mov	r0, r3
 800dfbc:	f001 fbb0 	bl	800f720 <RCCEx_PLL2_Config>
 800dfc0:	4603      	mov	r3, r0
 800dfc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800dfc6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dfca:	2b00      	cmp	r3, #0
 800dfcc:	d003      	beq.n	800dfd6 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800dfce:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800dfd2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800dfd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dfda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfde:	2100      	movs	r1, #0
 800dfe0:	6139      	str	r1, [r7, #16]
 800dfe2:	f003 0308 	and.w	r3, r3, #8
 800dfe6:	617b      	str	r3, [r7, #20]
 800dfe8:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800dfec:	460b      	mov	r3, r1
 800dfee:	4313      	orrs	r3, r2
 800dff0:	d011      	beq.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800dff2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800dff6:	3328      	adds	r3, #40	@ 0x28
 800dff8:	2100      	movs	r1, #0
 800dffa:	4618      	mov	r0, r3
 800dffc:	f001 fc42 	bl	800f884 <RCCEx_PLL3_Config>
 800e000:	4603      	mov	r3, r0
 800e002:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 800e006:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d003      	beq.n	800e016 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e00e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e012:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 800e016:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e01a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e01e:	2100      	movs	r1, #0
 800e020:	60b9      	str	r1, [r7, #8]
 800e022:	f003 0310 	and.w	r3, r3, #16
 800e026:	60fb      	str	r3, [r7, #12]
 800e028:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e02c:	460b      	mov	r3, r1
 800e02e:	4313      	orrs	r3, r2
 800e030:	d011      	beq.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800e032:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e036:	3328      	adds	r3, #40	@ 0x28
 800e038:	2101      	movs	r1, #1
 800e03a:	4618      	mov	r0, r3
 800e03c:	f001 fc22 	bl	800f884 <RCCEx_PLL3_Config>
 800e040:	4603      	mov	r3, r0
 800e042:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800e046:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e04a:	2b00      	cmp	r3, #0
 800e04c:	d003      	beq.n	800e056 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e04e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e052:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 800e056:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e05a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e05e:	2100      	movs	r1, #0
 800e060:	6039      	str	r1, [r7, #0]
 800e062:	f003 0320 	and.w	r3, r3, #32
 800e066:	607b      	str	r3, [r7, #4]
 800e068:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e06c:	460b      	mov	r3, r1
 800e06e:	4313      	orrs	r3, r2
 800e070:	d011      	beq.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 800e072:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800e076:	3328      	adds	r3, #40	@ 0x28
 800e078:	2102      	movs	r1, #2
 800e07a:	4618      	mov	r0, r3
 800e07c:	f001 fc02 	bl	800f884 <RCCEx_PLL3_Config>
 800e080:	4603      	mov	r3, r0
 800e082:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800e086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800e08e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800e092:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 800e096:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 800e09a:	2b00      	cmp	r3, #0
 800e09c:	d101      	bne.n	800e0a2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 800e09e:	2300      	movs	r3, #0
 800e0a0:	e000      	b.n	800e0a4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 800e0a2:	2301      	movs	r3, #1
}
 800e0a4:	4618      	mov	r0, r3
 800e0a6:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800e0b0:	58024400 	.word	0x58024400

0800e0b4 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800e0b4:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e0b8:	b08d      	sub	sp, #52	@ 0x34
 800e0ba:	af00      	add	r7, sp, #0
 800e0bc:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 800e0be:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 800e0c0:	4aad      	ldr	r2, [pc, #692]	@ (800e378 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>)
 800e0c2:	f04f 0300 	mov.w	r3, #0
 800e0c6:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 800e0ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0d0:	f042 0408 	orr.w	r4, r2, #8
 800e0d4:	461d      	mov	r5, r3
 800e0d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0d8:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 800e0dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 800e0e6:	4699      	mov	r9, r3
 800e0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0ea:	e9c3 8900 	strd	r8, r9, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 800e0ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0f4:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
 800e0f8:	6239      	str	r1, [r7, #32]
 800e0fa:	627b      	str	r3, [r7, #36]	@ 0x24
 800e0fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e0fe:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800e102:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 800e106:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e108:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e10c:	f442 6100 	orr.w	r1, r2, #2048	@ 0x800
 800e110:	61b9      	str	r1, [r7, #24]
 800e112:	61fb      	str	r3, [r7, #28]
 800e114:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e116:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 800e11a:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 800e11e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e120:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e124:	f042 7100 	orr.w	r1, r2, #33554432	@ 0x2000000
 800e128:	6139      	str	r1, [r7, #16]
 800e12a:	617b      	str	r3, [r7, #20]
 800e12c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e12e:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800e132:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 800e136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e138:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e13c:	f042 5180 	orr.w	r1, r2, #268435456	@ 0x10000000
 800e140:	60b9      	str	r1, [r7, #8]
 800e142:	60fb      	str	r3, [r7, #12]
 800e144:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e146:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800e14a:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 800e14e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e150:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e154:	f042 5100 	orr.w	r1, r2, #536870912	@ 0x20000000
 800e158:	6039      	str	r1, [r7, #0]
 800e15a:	607b      	str	r3, [r7, #4]
 800e15c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e15e:	e9d7 1200 	ldrd	r1, r2, [r7]
 800e162:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* LTDC */
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 800e166:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e168:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e16c:	f042 6a80 	orr.w	sl, r2, #67108864	@ 0x4000000
 800e170:	469b      	mov	fp, r3
 800e172:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e174:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
 800e178:	4b80      	ldr	r3, [pc, #512]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e17a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e17c:	0d1b      	lsrs	r3, r3, #20
 800e17e:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e184:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
 800e186:	4b7d      	ldr	r3, [pc, #500]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e18a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e18e:	1c5a      	adds	r2, r3, #1
 800e190:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e192:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
 800e194:	4b79      	ldr	r3, [pc, #484]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e196:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e198:	0e1b      	lsrs	r3, r3, #24
 800e19a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e19e:	1c5a      	adds	r2, r3, #1
 800e1a0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1a2:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
 800e1a4:	4b75      	ldr	r3, [pc, #468]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1a8:	0a5b      	lsrs	r3, r3, #9
 800e1aa:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1ae:	1c5a      	adds	r2, r3, #1
 800e1b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1b2:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
 800e1b4:	4b71      	ldr	r3, [pc, #452]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e1b8:	0c1b      	lsrs	r3, r3, #16
 800e1ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e1be:	1c5a      	adds	r2, r3, #1
 800e1c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1c2:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 800e1c4:	4b6d      	ldr	r3, [pc, #436]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1c8:	0a9b      	lsrs	r3, r3, #10
 800e1ca:	f003 0203 	and.w	r2, r3, #3
 800e1ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1d0:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 800e1d2:	4b6a      	ldr	r3, [pc, #424]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e1d6:	0a5b      	lsrs	r3, r3, #9
 800e1d8:	f003 0201 	and.w	r2, r3, #1
 800e1dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1de:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
 800e1e0:	4b66      	ldr	r3, [pc, #408]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e1e4:	0b1b      	lsrs	r3, r3, #12
 800e1e6:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800e1ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1ec:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
 800e1ee:	4b63      	ldr	r3, [pc, #396]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e1f2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800e1f6:	1c5a      	adds	r2, r3, #1
 800e1f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e1fa:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
 800e1fc:	4b5f      	ldr	r3, [pc, #380]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e1fe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e200:	0e1b      	lsrs	r3, r3, #24
 800e202:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e206:	1c5a      	adds	r2, r3, #1
 800e208:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e20a:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
 800e20c:	4b5b      	ldr	r3, [pc, #364]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e20e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e210:	0a5b      	lsrs	r3, r3, #9
 800e212:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e216:	1c5a      	adds	r2, r3, #1
 800e218:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e21a:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
 800e21c:	4b57      	ldr	r3, [pc, #348]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e21e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e220:	0c1b      	lsrs	r3, r3, #16
 800e222:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800e226:	1c5a      	adds	r2, r3, #1
 800e228:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e22a:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 800e22c:	4b53      	ldr	r3, [pc, #332]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e230:	099b      	lsrs	r3, r3, #6
 800e232:	f003 0203 	and.w	r2, r3, #3
 800e236:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e238:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 800e23a:	4b50      	ldr	r3, [pc, #320]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e23c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e23e:	095b      	lsrs	r3, r3, #5
 800e240:	f003 0201 	and.w	r2, r3, #1
 800e244:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e246:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 800e248:	4b4c      	ldr	r3, [pc, #304]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e24a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e24c:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 800e250:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e252:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 800e256:	4b49      	ldr	r3, [pc, #292]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e258:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e25a:	f003 0207 	and.w	r2, r3, #7
 800e25e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e260:	67da      	str	r2, [r3, #124]	@ 0x7c
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 800e262:	4b46      	ldr	r3, [pc, #280]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e264:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e266:	f003 0207 	and.w	r2, r3, #7
 800e26a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e26c:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 800e270:	4b42      	ldr	r3, [pc, #264]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e272:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e274:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 800e278:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e27a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 800e27e:	4b3f      	ldr	r3, [pc, #252]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e280:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e282:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e286:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e288:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 800e28c:	4b3b      	ldr	r3, [pc, #236]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e28e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e290:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800e294:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e296:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 800e29a:	4b38      	ldr	r3, [pc, #224]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e29c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e29e:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
 800e2a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2a4:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 800e2a8:	4b34      	ldr	r3, [pc, #208]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2aa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2ac:	f003 0207 	and.w	r2, r3, #7
 800e2b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2b2:	65da      	str	r2, [r3, #92]	@ 0x5c
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 800e2b4:	4b31      	ldr	r3, [pc, #196]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e2b8:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 800e2bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2be:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 800e2c0:	4b2e      	ldr	r3, [pc, #184]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2c4:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
 800e2c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2ca:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 800e2ce:	4b2b      	ldr	r3, [pc, #172]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e2d2:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 800e2d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2d8:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 800e2dc:	4b27      	ldr	r3, [pc, #156]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800e2e0:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e2e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2e6:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 800e2ea:	4b24      	ldr	r3, [pc, #144]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2ec:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e2ee:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e2f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e2f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 800e2f8:	4b20      	ldr	r3, [pc, #128]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e2fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e2fc:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800e300:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e302:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 800e304:	4b1d      	ldr	r3, [pc, #116]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e308:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 800e30c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e30e:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 800e312:	4b1a      	ldr	r3, [pc, #104]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e314:	691b      	ldr	r3, [r3, #16]
 800e316:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 800e31a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e31c:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 800e320:	4b16      	ldr	r3, [pc, #88]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e322:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e324:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800e328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e32a:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 800e32e:	4b13      	ldr	r3, [pc, #76]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e332:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 800e336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e338:	679a      	str	r2, [r3, #120]	@ 0x78
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 800e33a:	4b10      	ldr	r3, [pc, #64]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e33c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e33e:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 800e342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e344:	671a      	str	r2, [r3, #112]	@ 0x70
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 800e346:	4b0d      	ldr	r3, [pc, #52]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e348:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e34a:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 800e34e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e350:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 800e352:	4b0a      	ldr	r3, [pc, #40]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e354:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e356:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 800e35a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e35c:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 800e35e:	4b07      	ldr	r3, [pc, #28]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e360:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e362:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
 800e366:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e368:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 800e36a:	4b04      	ldr	r3, [pc, #16]	@ (800e37c <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 800e36c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e36e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 800e372:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e374:	e004      	b.n	800e380 <HAL_RCCEx_GetPeriphCLKConfig+0x2cc>
 800e376:	bf00      	nop
 800e378:	c9fff1f7 	.word	0xc9fff1f7
 800e37c:	58024400 	.word	0x58024400
 800e380:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 800e384:	4b1d      	ldr	r3, [pc, #116]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e386:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e388:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 800e38c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e38e:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 800e390:	4b1a      	ldr	r3, [pc, #104]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e392:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800e394:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 800e398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e39a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 800e39e:	4b17      	ldr	r3, [pc, #92]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e3a0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3a2:	f003 0203 	and.w	r2, r3, #3
 800e3a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3a8:	649a      	str	r2, [r3, #72]	@ 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 800e3aa:	4b14      	ldr	r3, [pc, #80]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e3ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ae:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 800e3b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */

#if defined(DSI)
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 800e3b6:	4b11      	ldr	r3, [pc, #68]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e3b8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3ba:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 800e3be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3c0:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 800e3c2:	4b0e      	ldr	r3, [pc, #56]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e3c4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e3c6:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 800e3ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3cc:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 800e3ce:	4b0b      	ldr	r3, [pc, #44]	@ (800e3fc <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 800e3d0:	691b      	ldr	r3, [r3, #16]
 800e3d2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 800e3d6:	2b00      	cmp	r3, #0
 800e3d8:	d104      	bne.n	800e3e4 <HAL_RCCEx_GetPeriphCLKConfig+0x330>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 800e3da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3dc:	2200      	movs	r2, #0
 800e3de:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 800e3e2:	e004      	b.n	800e3ee <HAL_RCCEx_GetPeriphCLKConfig+0x33a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 800e3e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800e3e6:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 800e3ea:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 800e3ee:	bf00      	nop
 800e3f0:	3734      	adds	r7, #52	@ 0x34
 800e3f2:	46bd      	mov	sp, r7
 800e3f4:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 800e3f8:	4770      	bx	lr
 800e3fa:	bf00      	nop
 800e3fc:	58024400 	.word	0x58024400

0800e400 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 800e400:	b580      	push	{r7, lr}
 800e402:	b090      	sub	sp, #64	@ 0x40
 800e404:	af00      	add	r7, sp, #0
 800e406:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 800e40a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e40e:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 800e412:	430b      	orrs	r3, r1
 800e414:	f040 8094 	bne.w	800e540 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800e418:	4b9e      	ldr	r3, [pc, #632]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e41a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e41c:	f003 0307 	and.w	r3, r3, #7
 800e420:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e422:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e424:	2b04      	cmp	r3, #4
 800e426:	f200 8087 	bhi.w	800e538 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800e42a:	a201      	add	r2, pc, #4	@ (adr r2, 800e430 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 800e42c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e430:	0800e445 	.word	0x0800e445
 800e434:	0800e46d 	.word	0x0800e46d
 800e438:	0800e495 	.word	0x0800e495
 800e43c:	0800e531 	.word	0x0800e531
 800e440:	0800e4bd 	.word	0x0800e4bd
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e444:	4b93      	ldr	r3, [pc, #588]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e446:	681b      	ldr	r3, [r3, #0]
 800e448:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e44c:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e450:	d108      	bne.n	800e464 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e452:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e456:	4618      	mov	r0, r3
 800e458:	f001 f810 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e45c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e45e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e460:	f000 bd45 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e464:	2300      	movs	r3, #0
 800e466:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e468:	f000 bd41 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e46c:	4b89      	ldr	r3, [pc, #548]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e46e:	681b      	ldr	r3, [r3, #0]
 800e470:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e474:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e478:	d108      	bne.n	800e48c <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e47a:	f107 0318 	add.w	r3, r7, #24
 800e47e:	4618      	mov	r0, r3
 800e480:	f000 fd54 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e484:	69bb      	ldr	r3, [r7, #24]
 800e486:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e488:	f000 bd31 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e48c:	2300      	movs	r3, #0
 800e48e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e490:	f000 bd2d 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e494:	4b7f      	ldr	r3, [pc, #508]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e496:	681b      	ldr	r3, [r3, #0]
 800e498:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e49c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e4a0:	d108      	bne.n	800e4b4 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e4a2:	f107 030c 	add.w	r3, r7, #12
 800e4a6:	4618      	mov	r0, r3
 800e4a8:	f000 fe94 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e4ac:	68fb      	ldr	r3, [r7, #12]
 800e4ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e4b0:	f000 bd1d 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e4b4:	2300      	movs	r3, #0
 800e4b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e4b8:	f000 bd19 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e4bc:	4b75      	ldr	r3, [pc, #468]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e4be:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e4c0:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e4c4:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e4c6:	4b73      	ldr	r3, [pc, #460]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e4c8:	681b      	ldr	r3, [r3, #0]
 800e4ca:	f003 0304 	and.w	r3, r3, #4
 800e4ce:	2b04      	cmp	r3, #4
 800e4d0:	d10c      	bne.n	800e4ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 800e4d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4d4:	2b00      	cmp	r3, #0
 800e4d6:	d109      	bne.n	800e4ec <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e4d8:	4b6e      	ldr	r3, [pc, #440]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e4da:	681b      	ldr	r3, [r3, #0]
 800e4dc:	08db      	lsrs	r3, r3, #3
 800e4de:	f003 0303 	and.w	r3, r3, #3
 800e4e2:	4a6d      	ldr	r2, [pc, #436]	@ (800e698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e4e4:	fa22 f303 	lsr.w	r3, r2, r3
 800e4e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e4ea:	e01f      	b.n	800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e4ec:	4b69      	ldr	r3, [pc, #420]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e4ee:	681b      	ldr	r3, [r3, #0]
 800e4f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e4f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e4f8:	d106      	bne.n	800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 800e4fa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e4fc:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e500:	d102      	bne.n	800e508 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e502:	4b66      	ldr	r3, [pc, #408]	@ (800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e504:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e506:	e011      	b.n	800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e508:	4b62      	ldr	r3, [pc, #392]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e50a:	681b      	ldr	r3, [r3, #0]
 800e50c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e510:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e514:	d106      	bne.n	800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800e516:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e518:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e51c:	d102      	bne.n	800e524 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e51e:	4b60      	ldr	r3, [pc, #384]	@ (800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e520:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e522:	e003      	b.n	800e52c <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e524:	2300      	movs	r3, #0
 800e526:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e528:	f000 bce1 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e52c:	f000 bcdf 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e530:	4b5c      	ldr	r3, [pc, #368]	@ (800e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e532:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e534:	f000 bcdb 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e538:	2300      	movs	r3, #0
 800e53a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e53c:	f000 bcd7 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 800e540:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e544:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 800e548:	430b      	orrs	r3, r1
 800e54a:	f040 80ad 	bne.w	800e6a8 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 800e54e:	4b51      	ldr	r3, [pc, #324]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e550:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e552:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 800e556:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e558:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e55a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e55e:	d056      	beq.n	800e60e <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 800e560:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e562:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e566:	f200 8090 	bhi.w	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e56a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e56c:	2bc0      	cmp	r3, #192	@ 0xc0
 800e56e:	f000 8088 	beq.w	800e682 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 800e572:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e574:	2bc0      	cmp	r3, #192	@ 0xc0
 800e576:	f200 8088 	bhi.w	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e57a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e57c:	2b80      	cmp	r3, #128	@ 0x80
 800e57e:	d032      	beq.n	800e5e6 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 800e580:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e582:	2b80      	cmp	r3, #128	@ 0x80
 800e584:	f200 8081 	bhi.w	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800e588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e58a:	2b00      	cmp	r3, #0
 800e58c:	d003      	beq.n	800e596 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 800e58e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e590:	2b40      	cmp	r3, #64	@ 0x40
 800e592:	d014      	beq.n	800e5be <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 800e594:	e079      	b.n	800e68a <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e596:	4b3f      	ldr	r3, [pc, #252]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e598:	681b      	ldr	r3, [r3, #0]
 800e59a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e59e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e5a2:	d108      	bne.n	800e5b6 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e5a4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e5a8:	4618      	mov	r0, r3
 800e5aa:	f000 ff67 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e5ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e5b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5b2:	f000 bc9c 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5b6:	2300      	movs	r3, #0
 800e5b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5ba:	f000 bc98 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e5be:	4b35      	ldr	r3, [pc, #212]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e5c0:	681b      	ldr	r3, [r3, #0]
 800e5c2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e5c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e5ca:	d108      	bne.n	800e5de <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e5cc:	f107 0318 	add.w	r3, r7, #24
 800e5d0:	4618      	mov	r0, r3
 800e5d2:	f000 fcab 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e5d6:	69bb      	ldr	r3, [r7, #24]
 800e5d8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e5da:	f000 bc88 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e5de:	2300      	movs	r3, #0
 800e5e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e5e2:	f000 bc84 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e5e6:	4b2b      	ldr	r3, [pc, #172]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e5e8:	681b      	ldr	r3, [r3, #0]
 800e5ea:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e5ee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e5f2:	d108      	bne.n	800e606 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e5f4:	f107 030c 	add.w	r3, r7, #12
 800e5f8:	4618      	mov	r0, r3
 800e5fa:	f000 fdeb 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e5fe:	68fb      	ldr	r3, [r7, #12]
 800e600:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e602:	f000 bc74 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e606:	2300      	movs	r3, #0
 800e608:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e60a:	f000 bc70 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e60e:	4b21      	ldr	r3, [pc, #132]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e610:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e612:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e616:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e618:	4b1e      	ldr	r3, [pc, #120]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e61a:	681b      	ldr	r3, [r3, #0]
 800e61c:	f003 0304 	and.w	r3, r3, #4
 800e620:	2b04      	cmp	r3, #4
 800e622:	d10c      	bne.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 800e624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e626:	2b00      	cmp	r3, #0
 800e628:	d109      	bne.n	800e63e <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e62a:	4b1a      	ldr	r3, [pc, #104]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e62c:	681b      	ldr	r3, [r3, #0]
 800e62e:	08db      	lsrs	r3, r3, #3
 800e630:	f003 0303 	and.w	r3, r3, #3
 800e634:	4a18      	ldr	r2, [pc, #96]	@ (800e698 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800e636:	fa22 f303 	lsr.w	r3, r2, r3
 800e63a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e63c:	e01f      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e63e:	4b15      	ldr	r3, [pc, #84]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e640:	681b      	ldr	r3, [r3, #0]
 800e642:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e646:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e64a:	d106      	bne.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 800e64c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e64e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e652:	d102      	bne.n	800e65a <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e654:	4b11      	ldr	r3, [pc, #68]	@ (800e69c <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800e656:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e658:	e011      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e65a:	4b0e      	ldr	r3, [pc, #56]	@ (800e694 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800e65c:	681b      	ldr	r3, [r3, #0]
 800e65e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e662:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e666:	d106      	bne.n	800e676 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800e668:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e66a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e66e:	d102      	bne.n	800e676 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e670:	4b0b      	ldr	r3, [pc, #44]	@ (800e6a0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 800e672:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e674:	e003      	b.n	800e67e <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e676:	2300      	movs	r3, #0
 800e678:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e67a:	f000 bc38 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e67e:	f000 bc36 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e682:	4b08      	ldr	r3, [pc, #32]	@ (800e6a4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 800e684:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e686:	f000 bc32 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800e68a:	2300      	movs	r3, #0
 800e68c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e68e:	f000 bc2e 	b.w	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e692:	bf00      	nop
 800e694:	58024400 	.word	0x58024400
 800e698:	03d09000 	.word	0x03d09000
 800e69c:	003d0900 	.word	0x003d0900
 800e6a0:	017d7840 	.word	0x017d7840
 800e6a4:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800e6a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e6ac:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 800e6b0:	430b      	orrs	r3, r1
 800e6b2:	f040 809c 	bne.w	800e7ee <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 800e6b6:	4b9e      	ldr	r3, [pc, #632]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e6b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e6ba:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 800e6be:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e6c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6c2:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e6c6:	d054      	beq.n	800e772 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 800e6c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6ca:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800e6ce:	f200 808b 	bhi.w	800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e6d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6d4:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e6d8:	f000 8083 	beq.w	800e7e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 800e6dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6de:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800e6e2:	f200 8081 	bhi.w	800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e6e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6e8:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e6ec:	d02f      	beq.n	800e74e <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 800e6ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f0:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800e6f4:	d878      	bhi.n	800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 800e6f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6f8:	2b00      	cmp	r3, #0
 800e6fa:	d004      	beq.n	800e706 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 800e6fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e6fe:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800e702:	d012      	beq.n	800e72a <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 800e704:	e070      	b.n	800e7e8 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e706:	4b8a      	ldr	r3, [pc, #552]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e708:	681b      	ldr	r3, [r3, #0]
 800e70a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e70e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e712:	d107      	bne.n	800e724 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e714:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 feaf 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e71e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e720:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e722:	e3e4      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e724:	2300      	movs	r3, #0
 800e726:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e728:	e3e1      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e72a:	4b81      	ldr	r3, [pc, #516]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e72c:	681b      	ldr	r3, [r3, #0]
 800e72e:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e732:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e736:	d107      	bne.n	800e748 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e738:	f107 0318 	add.w	r3, r7, #24
 800e73c:	4618      	mov	r0, r3
 800e73e:	f000 fbf5 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e742:	69bb      	ldr	r3, [r7, #24]
 800e744:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e746:	e3d2      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e748:	2300      	movs	r3, #0
 800e74a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e74c:	e3cf      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e74e:	4b78      	ldr	r3, [pc, #480]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e750:	681b      	ldr	r3, [r3, #0]
 800e752:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e756:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e75a:	d107      	bne.n	800e76c <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e75c:	f107 030c 	add.w	r3, r7, #12
 800e760:	4618      	mov	r0, r3
 800e762:	f000 fd37 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e766:	68fb      	ldr	r3, [r7, #12]
 800e768:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e76a:	e3c0      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e76c:	2300      	movs	r3, #0
 800e76e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e770:	e3bd      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e772:	4b6f      	ldr	r3, [pc, #444]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e774:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e776:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e77a:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e77c:	4b6c      	ldr	r3, [pc, #432]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e77e:	681b      	ldr	r3, [r3, #0]
 800e780:	f003 0304 	and.w	r3, r3, #4
 800e784:	2b04      	cmp	r3, #4
 800e786:	d10c      	bne.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800e788:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e78a:	2b00      	cmp	r3, #0
 800e78c:	d109      	bne.n	800e7a2 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e78e:	4b68      	ldr	r3, [pc, #416]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e790:	681b      	ldr	r3, [r3, #0]
 800e792:	08db      	lsrs	r3, r3, #3
 800e794:	f003 0303 	and.w	r3, r3, #3
 800e798:	4a66      	ldr	r2, [pc, #408]	@ (800e934 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e79a:	fa22 f303 	lsr.w	r3, r2, r3
 800e79e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7a0:	e01e      	b.n	800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e7a2:	4b63      	ldr	r3, [pc, #396]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e7a4:	681b      	ldr	r3, [r3, #0]
 800e7a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e7aa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e7ae:	d106      	bne.n	800e7be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 800e7b0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7b2:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e7b6:	d102      	bne.n	800e7be <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e7b8:	4b5f      	ldr	r3, [pc, #380]	@ (800e938 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e7ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7bc:	e010      	b.n	800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e7be:	4b5c      	ldr	r3, [pc, #368]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e7c0:	681b      	ldr	r3, [r3, #0]
 800e7c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e7c6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e7ca:	d106      	bne.n	800e7da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 800e7cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e7ce:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e7d2:	d102      	bne.n	800e7da <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e7d4:	4b59      	ldr	r3, [pc, #356]	@ (800e93c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e7d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e7d8:	e002      	b.n	800e7e0 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e7da:	2300      	movs	r3, #0
 800e7dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e7de:	e386      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e7e0:	e385      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e7e2:	4b57      	ldr	r3, [pc, #348]	@ (800e940 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e7e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7e6:	e382      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800e7e8:	2300      	movs	r3, #0
 800e7ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e7ec:	e37f      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 800e7ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e7f2:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 800e7f6:	430b      	orrs	r3, r1
 800e7f8:	f040 80a7 	bne.w	800e94a <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 800e7fc:	4b4c      	ldr	r3, [pc, #304]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e7fe:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800e800:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 800e804:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 800e806:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e808:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e80c:	d055      	beq.n	800e8ba <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 800e80e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e810:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800e814:	f200 8096 	bhi.w	800e944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e81a:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e81e:	f000 8084 	beq.w	800e92a <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 800e822:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e824:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 800e828:	f200 808c 	bhi.w	800e944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e82c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e82e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e832:	d030      	beq.n	800e896 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 800e834:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e836:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e83a:	f200 8083 	bhi.w	800e944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 800e83e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e840:	2b00      	cmp	r3, #0
 800e842:	d004      	beq.n	800e84e <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 800e844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800e846:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800e84a:	d012      	beq.n	800e872 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 800e84c:	e07a      	b.n	800e944 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e84e:	4b38      	ldr	r3, [pc, #224]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e850:	681b      	ldr	r3, [r3, #0]
 800e852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e856:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e85a:	d107      	bne.n	800e86c <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e85c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e860:	4618      	mov	r0, r3
 800e862:	f000 fe0b 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e866:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e868:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e86a:	e340      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e86c:	2300      	movs	r3, #0
 800e86e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e870:	e33d      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e872:	4b2f      	ldr	r3, [pc, #188]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e874:	681b      	ldr	r3, [r3, #0]
 800e876:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e87a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e87e:	d107      	bne.n	800e890 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e880:	f107 0318 	add.w	r3, r7, #24
 800e884:	4618      	mov	r0, r3
 800e886:	f000 fb51 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e88a:	69bb      	ldr	r3, [r7, #24]
 800e88c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e88e:	e32e      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e890:	2300      	movs	r3, #0
 800e892:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e894:	e32b      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e896:	4b26      	ldr	r3, [pc, #152]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e898:	681b      	ldr	r3, [r3, #0]
 800e89a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e89e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e8a2:	d107      	bne.n	800e8b4 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e8a4:	f107 030c 	add.w	r3, r7, #12
 800e8a8:	4618      	mov	r0, r3
 800e8aa:	f000 fc93 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800e8ae:	68fb      	ldr	r3, [r7, #12]
 800e8b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e8b2:	e31c      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e8b4:	2300      	movs	r3, #0
 800e8b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e8b8:	e319      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800e8ba:	4b1d      	ldr	r3, [pc, #116]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e8bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e8be:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800e8c2:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800e8c4:	4b1a      	ldr	r3, [pc, #104]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e8c6:	681b      	ldr	r3, [r3, #0]
 800e8c8:	f003 0304 	and.w	r3, r3, #4
 800e8cc:	2b04      	cmp	r3, #4
 800e8ce:	d10c      	bne.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 800e8d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d109      	bne.n	800e8ea <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800e8d6:	4b16      	ldr	r3, [pc, #88]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e8d8:	681b      	ldr	r3, [r3, #0]
 800e8da:	08db      	lsrs	r3, r3, #3
 800e8dc:	f003 0303 	and.w	r3, r3, #3
 800e8e0:	4a14      	ldr	r2, [pc, #80]	@ (800e934 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800e8e2:	fa22 f303 	lsr.w	r3, r2, r3
 800e8e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e8e8:	e01e      	b.n	800e928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800e8ea:	4b11      	ldr	r3, [pc, #68]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e8ec:	681b      	ldr	r3, [r3, #0]
 800e8ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800e8f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800e8f6:	d106      	bne.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 800e8f8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e8fa:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800e8fe:	d102      	bne.n	800e906 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800e900:	4b0d      	ldr	r3, [pc, #52]	@ (800e938 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 800e902:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e904:	e010      	b.n	800e928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800e906:	4b0a      	ldr	r3, [pc, #40]	@ (800e930 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 800e908:	681b      	ldr	r3, [r3, #0]
 800e90a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800e90e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800e912:	d106      	bne.n	800e922 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 800e914:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800e916:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e91a:	d102      	bne.n	800e922 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800e91c:	4b07      	ldr	r3, [pc, #28]	@ (800e93c <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 800e91e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800e920:	e002      	b.n	800e928 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800e922:	2300      	movs	r3, #0
 800e924:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800e926:	e2e2      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e928:	e2e1      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800e92a:	4b05      	ldr	r3, [pc, #20]	@ (800e940 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 800e92c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e92e:	e2de      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800e930:	58024400 	.word	0x58024400
 800e934:	03d09000 	.word	0x03d09000
 800e938:	003d0900 	.word	0x003d0900
 800e93c:	017d7840 	.word	0x017d7840
 800e940:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 800e944:	2300      	movs	r3, #0
 800e946:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e948:	e2d1      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 800e94a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800e94e:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 800e952:	430b      	orrs	r3, r1
 800e954:	f040 809c 	bne.w	800ea90 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 800e958:	4b93      	ldr	r3, [pc, #588]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e95a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800e95c:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 800e960:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800e962:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e964:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e968:	d054      	beq.n	800ea14 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 800e96a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e96c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800e970:	f200 808b 	bhi.w	800ea8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e976:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e97a:	f000 8083 	beq.w	800ea84 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 800e97e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e980:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800e984:	f200 8081 	bhi.w	800ea8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e988:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e98a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e98e:	d02f      	beq.n	800e9f0 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 800e990:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e992:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800e996:	d878      	bhi.n	800ea8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 800e998:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e99a:	2b00      	cmp	r3, #0
 800e99c:	d004      	beq.n	800e9a8 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 800e99e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800e9a0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800e9a4:	d012      	beq.n	800e9cc <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 800e9a6:	e070      	b.n	800ea8a <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800e9a8:	4b7f      	ldr	r3, [pc, #508]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e9aa:	681b      	ldr	r3, [r3, #0]
 800e9ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800e9b0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800e9b4:	d107      	bne.n	800e9c6 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800e9b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e9ba:	4618      	mov	r0, r3
 800e9bc:	f000 fd5e 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800e9c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800e9c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9c4:	e293      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9c6:	2300      	movs	r3, #0
 800e9c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9ca:	e290      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800e9cc:	4b76      	ldr	r3, [pc, #472]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e9ce:	681b      	ldr	r3, [r3, #0]
 800e9d0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800e9d4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800e9d8:	d107      	bne.n	800e9ea <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800e9da:	f107 0318 	add.w	r3, r7, #24
 800e9de:	4618      	mov	r0, r3
 800e9e0:	f000 faa4 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800e9e4:	69bb      	ldr	r3, [r7, #24]
 800e9e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800e9e8:	e281      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800e9ea:	2300      	movs	r3, #0
 800e9ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800e9ee:	e27e      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800e9f0:	4b6d      	ldr	r3, [pc, #436]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800e9f2:	681b      	ldr	r3, [r3, #0]
 800e9f4:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800e9f8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800e9fc:	d107      	bne.n	800ea0e <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800e9fe:	f107 030c 	add.w	r3, r7, #12
 800ea02:	4618      	mov	r0, r3
 800ea04:	f000 fbe6 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800ea08:	68fb      	ldr	r3, [r7, #12]
 800ea0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ea0c:	e26f      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ea0e:	2300      	movs	r3, #0
 800ea10:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea12:	e26c      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ea14:	4b64      	ldr	r3, [pc, #400]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ea16:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ea18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ea1c:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ea1e:	4b62      	ldr	r3, [pc, #392]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ea20:	681b      	ldr	r3, [r3, #0]
 800ea22:	f003 0304 	and.w	r3, r3, #4
 800ea26:	2b04      	cmp	r3, #4
 800ea28:	d10c      	bne.n	800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 800ea2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea2c:	2b00      	cmp	r3, #0
 800ea2e:	d109      	bne.n	800ea44 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ea30:	4b5d      	ldr	r3, [pc, #372]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ea32:	681b      	ldr	r3, [r3, #0]
 800ea34:	08db      	lsrs	r3, r3, #3
 800ea36:	f003 0303 	and.w	r3, r3, #3
 800ea3a:	4a5c      	ldr	r2, [pc, #368]	@ (800ebac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800ea3c:	fa22 f303 	lsr.w	r3, r2, r3
 800ea40:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea42:	e01e      	b.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ea44:	4b58      	ldr	r3, [pc, #352]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ea46:	681b      	ldr	r3, [r3, #0]
 800ea48:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ea4c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ea50:	d106      	bne.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 800ea52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea54:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ea58:	d102      	bne.n	800ea60 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ea5a:	4b55      	ldr	r3, [pc, #340]	@ (800ebb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800ea5c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea5e:	e010      	b.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ea60:	4b51      	ldr	r3, [pc, #324]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800ea62:	681b      	ldr	r3, [r3, #0]
 800ea64:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ea68:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ea6c:	d106      	bne.n	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 800ea6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ea70:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ea74:	d102      	bne.n	800ea7c <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ea76:	4b4f      	ldr	r3, [pc, #316]	@ (800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800ea78:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ea7a:	e002      	b.n	800ea82 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800ea7c:	2300      	movs	r3, #0
 800ea7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800ea80:	e235      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ea82:	e234      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 800ea84:	4b4c      	ldr	r3, [pc, #304]	@ (800ebb8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 800ea86:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea88:	e231      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800ea8a:	2300      	movs	r3, #0
 800ea8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ea8e:	e22e      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 800ea90:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ea94:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 800ea98:	430b      	orrs	r3, r1
 800ea9a:	f040 808f 	bne.w	800ebbc <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 800ea9e:	4b42      	ldr	r3, [pc, #264]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eaa0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800eaa2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 800eaa6:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 800eaa8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaaa:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eaae:	d06b      	beq.n	800eb88 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 800eab0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eab2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800eab6:	d874      	bhi.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800eab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaba:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eabe:	d056      	beq.n	800eb6e <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 800eac0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eac2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800eac6:	d86c      	bhi.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800eac8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaca:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800eace:	d03b      	beq.n	800eb48 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 800ead0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ead2:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 800ead6:	d864      	bhi.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800ead8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eada:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eade:	d021      	beq.n	800eb24 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 800eae0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eae2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eae6:	d85c      	bhi.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 800eae8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d004      	beq.n	800eaf8 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 800eaee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800eaf0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800eaf4:	d004      	beq.n	800eb00 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 800eaf6:	e054      	b.n	800eba2 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 800eaf8:	f7fe f866 	bl	800cbc8 <HAL_RCC_GetPCLK1Freq>
 800eafc:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800eafe:	e1f6      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eb00:	4b29      	ldr	r3, [pc, #164]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eb02:	681b      	ldr	r3, [r3, #0]
 800eb04:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eb08:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eb0c:	d107      	bne.n	800eb1e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eb0e:	f107 0318 	add.w	r3, r7, #24
 800eb12:	4618      	mov	r0, r3
 800eb14:	f000 fa0a 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eb18:	69fb      	ldr	r3, [r7, #28]
 800eb1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb1c:	e1e7      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb1e:	2300      	movs	r3, #0
 800eb20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb22:	e1e4      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800eb24:	4b20      	ldr	r3, [pc, #128]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eb26:	681b      	ldr	r3, [r3, #0]
 800eb28:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800eb2c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800eb30:	d107      	bne.n	800eb42 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800eb32:	f107 030c 	add.w	r3, r7, #12
 800eb36:	4618      	mov	r0, r3
 800eb38:	f000 fb4c 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800eb3c:	693b      	ldr	r3, [r7, #16]
 800eb3e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb40:	e1d5      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb42:	2300      	movs	r3, #0
 800eb44:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb46:	e1d2      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eb48:	4b17      	ldr	r3, [pc, #92]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eb4a:	681b      	ldr	r3, [r3, #0]
 800eb4c:	f003 0304 	and.w	r3, r3, #4
 800eb50:	2b04      	cmp	r3, #4
 800eb52:	d109      	bne.n	800eb68 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800eb54:	4b14      	ldr	r3, [pc, #80]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eb56:	681b      	ldr	r3, [r3, #0]
 800eb58:	08db      	lsrs	r3, r3, #3
 800eb5a:	f003 0303 	and.w	r3, r3, #3
 800eb5e:	4a13      	ldr	r2, [pc, #76]	@ (800ebac <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 800eb60:	fa22 f303 	lsr.w	r3, r2, r3
 800eb64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb66:	e1c2      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb68:	2300      	movs	r3, #0
 800eb6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb6c:	e1bf      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800eb6e:	4b0e      	ldr	r3, [pc, #56]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800eb76:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800eb7a:	d102      	bne.n	800eb82 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 800eb7c:	4b0c      	ldr	r3, [pc, #48]	@ (800ebb0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 800eb7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb80:	e1b5      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb82:	2300      	movs	r3, #0
 800eb84:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eb86:	e1b2      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800eb88:	4b07      	ldr	r3, [pc, #28]	@ (800eba8 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 800eb8a:	681b      	ldr	r3, [r3, #0]
 800eb8c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800eb90:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800eb94:	d102      	bne.n	800eb9c <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 800eb96:	4b07      	ldr	r3, [pc, #28]	@ (800ebb4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 800eb98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eb9a:	e1a8      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eb9c:	2300      	movs	r3, #0
 800eb9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eba0:	e1a5      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eba2:	2300      	movs	r3, #0
 800eba4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eba6:	e1a2      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eba8:	58024400 	.word	0x58024400
 800ebac:	03d09000 	.word	0x03d09000
 800ebb0:	003d0900 	.word	0x003d0900
 800ebb4:	017d7840 	.word	0x017d7840
 800ebb8:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 800ebbc:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ebc0:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 800ebc4:	430b      	orrs	r3, r1
 800ebc6:	d173      	bne.n	800ecb0 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 800ebc8:	4b9c      	ldr	r3, [pc, #624]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ebca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ebcc:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800ebd0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ebd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ebd8:	d02f      	beq.n	800ec3a <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 800ebda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ebe0:	d863      	bhi.n	800ecaa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 800ebe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebe4:	2b00      	cmp	r3, #0
 800ebe6:	d004      	beq.n	800ebf2 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 800ebe8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ebea:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ebee:	d012      	beq.n	800ec16 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 800ebf0:	e05b      	b.n	800ecaa <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ebf2:	4b92      	ldr	r3, [pc, #584]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ebfa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ebfe:	d107      	bne.n	800ec10 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ec00:	f107 0318 	add.w	r3, r7, #24
 800ec04:	4618      	mov	r0, r3
 800ec06:	f000 f991 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 800ec0a:	69bb      	ldr	r3, [r7, #24]
 800ec0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec0e:	e16e      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec10:	2300      	movs	r3, #0
 800ec12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec14:	e16b      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800ec16:	4b89      	ldr	r3, [pc, #548]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ec18:	681b      	ldr	r3, [r3, #0]
 800ec1a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800ec1e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec22:	d107      	bne.n	800ec34 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800ec24:	f107 030c 	add.w	r3, r7, #12
 800ec28:	4618      	mov	r0, r3
 800ec2a:	f000 fad3 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 800ec2e:	697b      	ldr	r3, [r7, #20]
 800ec30:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ec32:	e15c      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ec34:	2300      	movs	r3, #0
 800ec36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ec38:	e159      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 800ec3a:	4b80      	ldr	r3, [pc, #512]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ec3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ec3e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ec42:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800ec44:	4b7d      	ldr	r3, [pc, #500]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	f003 0304 	and.w	r3, r3, #4
 800ec4c:	2b04      	cmp	r3, #4
 800ec4e:	d10c      	bne.n	800ec6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 800ec50:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec52:	2b00      	cmp	r3, #0
 800ec54:	d109      	bne.n	800ec6a <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ec56:	4b79      	ldr	r3, [pc, #484]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ec58:	681b      	ldr	r3, [r3, #0]
 800ec5a:	08db      	lsrs	r3, r3, #3
 800ec5c:	f003 0303 	and.w	r3, r3, #3
 800ec60:	4a77      	ldr	r2, [pc, #476]	@ (800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800ec62:	fa22 f303 	lsr.w	r3, r2, r3
 800ec66:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec68:	e01e      	b.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 800ec6a:	4b74      	ldr	r3, [pc, #464]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ec6c:	681b      	ldr	r3, [r3, #0]
 800ec6e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ec72:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ec76:	d106      	bne.n	800ec86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 800ec78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec7e:	d102      	bne.n	800ec86 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 800ec80:	4b70      	ldr	r3, [pc, #448]	@ (800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ec82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ec84:	e010      	b.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800ec86:	4b6d      	ldr	r3, [pc, #436]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ec88:	681b      	ldr	r3, [r3, #0]
 800ec8a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ec8e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ec92:	d106      	bne.n	800eca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 800ec94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ec96:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ec9a:	d102      	bne.n	800eca2 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 800ec9c:	4b6a      	ldr	r3, [pc, #424]	@ (800ee48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ec9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800eca0:	e002      	b.n	800eca8 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800eca2:	2300      	movs	r3, #0
 800eca4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 800eca6:	e122      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800eca8:	e121      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ecaa:	2300      	movs	r3, #0
 800ecac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecae:	e11e      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 800ecb0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ecb4:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 800ecb8:	430b      	orrs	r3, r1
 800ecba:	d133      	bne.n	800ed24 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 800ecbc:	4b5f      	ldr	r3, [pc, #380]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ecbe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ecc0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800ecc4:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ecc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecc8:	2b00      	cmp	r3, #0
 800ecca:	d004      	beq.n	800ecd6 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 800eccc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ecce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800ecd2:	d012      	beq.n	800ecfa <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 800ecd4:	e023      	b.n	800ed1e <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ecd6:	4b59      	ldr	r3, [pc, #356]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ecd8:	681b      	ldr	r3, [r3, #0]
 800ecda:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800ecde:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800ece2:	d107      	bne.n	800ecf4 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800ece4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800ece8:	4618      	mov	r0, r3
 800ecea:	f000 fbc7 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800ecee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ecf0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ecf2:	e0fc      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ecf4:	2300      	movs	r3, #0
 800ecf6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ecf8:	e0f9      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ecfa:	4b50      	ldr	r3, [pc, #320]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ecfc:	681b      	ldr	r3, [r3, #0]
 800ecfe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed02:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800ed06:	d107      	bne.n	800ed18 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800ed08:	f107 0318 	add.w	r3, r7, #24
 800ed0c:	4618      	mov	r0, r3
 800ed0e:	f000 f90d 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 800ed12:	6a3b      	ldr	r3, [r7, #32]
 800ed14:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ed16:	e0ea      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ed18:	2300      	movs	r3, #0
 800ed1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed1c:	e0e7      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 800ed1e:	2300      	movs	r3, #0
 800ed20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ed22:	e0e4      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 800ed24:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ed28:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 800ed2c:	430b      	orrs	r3, r1
 800ed2e:	f040 808d 	bne.w	800ee4c <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 800ed32:	4b42      	ldr	r3, [pc, #264]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ed34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800ed36:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 800ed3a:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ed3c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed3e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed42:	d06b      	beq.n	800ee1c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 800ed44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed46:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800ed4a:	d874      	bhi.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ed4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed4e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed52:	d056      	beq.n	800ee02 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 800ed54:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ed5a:	d86c      	bhi.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ed5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed5e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed62:	d03b      	beq.n	800eddc <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 800ed64:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed66:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 800ed6a:	d864      	bhi.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ed6c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed6e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed72:	d021      	beq.n	800edb8 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 800ed74:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed76:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ed7a:	d85c      	bhi.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 800ed7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	d004      	beq.n	800ed8c <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 800ed82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ed84:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ed88:	d004      	beq.n	800ed94 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 800ed8a:	e054      	b.n	800ee36 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 800ed8c:	f000 f8b8 	bl	800ef00 <HAL_RCCEx_GetD3PCLK1Freq>
 800ed90:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 800ed92:	e0ac      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800ed94:	4b29      	ldr	r3, [pc, #164]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ed96:	681b      	ldr	r3, [r3, #0]
 800ed98:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800ed9c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eda0:	d107      	bne.n	800edb2 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eda2:	f107 0318 	add.w	r3, r7, #24
 800eda6:	4618      	mov	r0, r3
 800eda8:	f000 f8c0 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800edac:	69fb      	ldr	r3, [r7, #28]
 800edae:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edb0:	e09d      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800edb2:	2300      	movs	r3, #0
 800edb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edb6:	e09a      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 800edb8:	4b20      	ldr	r3, [pc, #128]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800edba:	681b      	ldr	r3, [r3, #0]
 800edbc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800edc0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800edc4:	d107      	bne.n	800edd6 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 800edc6:	f107 030c 	add.w	r3, r7, #12
 800edca:	4618      	mov	r0, r3
 800edcc:	f000 fa02 	bl	800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 800edd0:	693b      	ldr	r3, [r7, #16]
 800edd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edd4:	e08b      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800edd6:	2300      	movs	r3, #0
 800edd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800edda:	e088      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 800eddc:	4b17      	ldr	r3, [pc, #92]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800edde:	681b      	ldr	r3, [r3, #0]
 800ede0:	f003 0304 	and.w	r3, r3, #4
 800ede4:	2b04      	cmp	r3, #4
 800ede6:	d109      	bne.n	800edfc <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800ede8:	4b14      	ldr	r3, [pc, #80]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800edea:	681b      	ldr	r3, [r3, #0]
 800edec:	08db      	lsrs	r3, r3, #3
 800edee:	f003 0303 	and.w	r3, r3, #3
 800edf2:	4a13      	ldr	r2, [pc, #76]	@ (800ee40 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 800edf4:	fa22 f303 	lsr.w	r3, r2, r3
 800edf8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800edfa:	e078      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee00:	e075      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 800ee02:	4b0e      	ldr	r3, [pc, #56]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ee04:	681b      	ldr	r3, [r3, #0]
 800ee06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800ee0a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800ee0e:	d102      	bne.n	800ee16 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 800ee10:	4b0c      	ldr	r3, [pc, #48]	@ (800ee44 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 800ee12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee14:	e06b      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee16:	2300      	movs	r3, #0
 800ee18:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee1a:	e068      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ee1c:	4b07      	ldr	r3, [pc, #28]	@ (800ee3c <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 800ee1e:	681b      	ldr	r3, [r3, #0]
 800ee20:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee24:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee28:	d102      	bne.n	800ee30 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800ee2a:	4b07      	ldr	r3, [pc, #28]	@ (800ee48 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 800ee2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee2e:	e05e      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee30:	2300      	movs	r3, #0
 800ee32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee34:	e05b      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800ee36:	2300      	movs	r3, #0
 800ee38:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee3a:	e058      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 800ee3c:	58024400 	.word	0x58024400
 800ee40:	03d09000 	.word	0x03d09000
 800ee44:	003d0900 	.word	0x003d0900
 800ee48:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 800ee4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ee50:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 800ee54:	430b      	orrs	r3, r1
 800ee56:	d148      	bne.n	800eeea <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800ee58:	4b27      	ldr	r3, [pc, #156]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ee5a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ee5c:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 800ee60:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 800ee62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee64:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee68:	d02a      	beq.n	800eec0 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800ee6a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800ee70:	d838      	bhi.n	800eee4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 800ee72:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee74:	2b00      	cmp	r3, #0
 800ee76:	d004      	beq.n	800ee82 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800ee78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ee7a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ee7e:	d00d      	beq.n	800ee9c <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 800ee80:	e030      	b.n	800eee4 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 800ee82:	4b1d      	ldr	r3, [pc, #116]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ee84:	681b      	ldr	r3, [r3, #0]
 800ee86:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800ee8a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800ee8e:	d102      	bne.n	800ee96 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 800ee90:	4b1a      	ldr	r3, [pc, #104]	@ (800eefc <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 800ee92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800ee94:	e02b      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800ee96:	2300      	movs	r3, #0
 800ee98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800ee9a:	e028      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800ee9c:	4b16      	ldr	r3, [pc, #88]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800eea4:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800eea8:	d107      	bne.n	800eeba <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800eeaa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800eeae:	4618      	mov	r0, r3
 800eeb0:	f000 fae4 	bl	800f47c <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 800eeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800eeb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eeb8:	e019      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eeba:	2300      	movs	r3, #0
 800eebc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eebe:	e016      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800eec0:	4b0d      	ldr	r3, [pc, #52]	@ (800eef8 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800eec2:	681b      	ldr	r3, [r3, #0]
 800eec4:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800eec8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800eecc:	d107      	bne.n	800eede <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800eece:	f107 0318 	add.w	r3, r7, #24
 800eed2:	4618      	mov	r0, r3
 800eed4:	f000 f82a 	bl	800ef2c <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 800eed8:	69fb      	ldr	r3, [r7, #28]
 800eeda:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800eedc:	e007      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800eede:	2300      	movs	r3, #0
 800eee0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eee2:	e004      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800eee4:	2300      	movs	r3, #0
 800eee6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 800eee8:	e001      	b.n	800eeee <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 800eeea:	2300      	movs	r3, #0
 800eeec:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 800eeee:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800eef0:	4618      	mov	r0, r3
 800eef2:	3740      	adds	r7, #64	@ 0x40
 800eef4:	46bd      	mov	sp, r7
 800eef6:	bd80      	pop	{r7, pc}
 800eef8:	58024400 	.word	0x58024400
 800eefc:	017d7840 	.word	0x017d7840

0800ef00 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 800ef00:	b580      	push	{r7, lr}
 800ef02:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 800ef04:	f7fd fe30 	bl	800cb68 <HAL_RCC_GetHCLKFreq>
 800ef08:	4602      	mov	r2, r0
 800ef0a:	4b06      	ldr	r3, [pc, #24]	@ (800ef24 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 800ef0c:	6a1b      	ldr	r3, [r3, #32]
 800ef0e:	091b      	lsrs	r3, r3, #4
 800ef10:	f003 0307 	and.w	r3, r3, #7
 800ef14:	4904      	ldr	r1, [pc, #16]	@ (800ef28 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800ef16:	5ccb      	ldrb	r3, [r1, r3]
 800ef18:	f003 031f 	and.w	r3, r3, #31
 800ef1c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 800ef20:	4618      	mov	r0, r3
 800ef22:	bd80      	pop	{r7, pc}
 800ef24:	58024400 	.word	0x58024400
 800ef28:	0802890c 	.word	0x0802890c

0800ef2c <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 800ef2c:	b480      	push	{r7}
 800ef2e:	b089      	sub	sp, #36	@ 0x24
 800ef30:	af00      	add	r7, sp, #0
 800ef32:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800ef34:	4ba1      	ldr	r3, [pc, #644]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef38:	f003 0303 	and.w	r3, r3, #3
 800ef3c:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 800ef3e:	4b9f      	ldr	r3, [pc, #636]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef42:	0b1b      	lsrs	r3, r3, #12
 800ef44:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800ef48:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800ef4a:	4b9c      	ldr	r3, [pc, #624]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ef4e:	091b      	lsrs	r3, r3, #4
 800ef50:	f003 0301 	and.w	r3, r3, #1
 800ef54:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800ef56:	4b99      	ldr	r3, [pc, #612]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef58:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ef5a:	08db      	lsrs	r3, r3, #3
 800ef5c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800ef60:	693a      	ldr	r2, [r7, #16]
 800ef62:	fb02 f303 	mul.w	r3, r2, r3
 800ef66:	ee07 3a90 	vmov	s15, r3
 800ef6a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800ef6e:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 800ef72:	697b      	ldr	r3, [r7, #20]
 800ef74:	2b00      	cmp	r3, #0
 800ef76:	f000 8111 	beq.w	800f19c <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800ef7a:	69bb      	ldr	r3, [r7, #24]
 800ef7c:	2b02      	cmp	r3, #2
 800ef7e:	f000 8083 	beq.w	800f088 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 800ef82:	69bb      	ldr	r3, [r7, #24]
 800ef84:	2b02      	cmp	r3, #2
 800ef86:	f200 80a1 	bhi.w	800f0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800ef8a:	69bb      	ldr	r3, [r7, #24]
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d003      	beq.n	800ef98 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 800ef90:	69bb      	ldr	r3, [r7, #24]
 800ef92:	2b01      	cmp	r3, #1
 800ef94:	d056      	beq.n	800f044 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800ef96:	e099      	b.n	800f0cc <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800ef98:	4b88      	ldr	r3, [pc, #544]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800ef9a:	681b      	ldr	r3, [r3, #0]
 800ef9c:	f003 0320 	and.w	r3, r3, #32
 800efa0:	2b00      	cmp	r3, #0
 800efa2:	d02d      	beq.n	800f000 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800efa4:	4b85      	ldr	r3, [pc, #532]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efa6:	681b      	ldr	r3, [r3, #0]
 800efa8:	08db      	lsrs	r3, r3, #3
 800efaa:	f003 0303 	and.w	r3, r3, #3
 800efae:	4a84      	ldr	r2, [pc, #528]	@ (800f1c0 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 800efb0:	fa22 f303 	lsr.w	r3, r2, r3
 800efb4:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800efb6:	68bb      	ldr	r3, [r7, #8]
 800efb8:	ee07 3a90 	vmov	s15, r3
 800efbc:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efc0:	697b      	ldr	r3, [r7, #20]
 800efc2:	ee07 3a90 	vmov	s15, r3
 800efc6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800efca:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800efce:	4b7b      	ldr	r3, [pc, #492]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800efd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efd2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800efd6:	ee07 3a90 	vmov	s15, r3
 800efda:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800efde:	ed97 6a03 	vldr	s12, [r7, #12]
 800efe2:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800efe6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800efea:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800efee:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800eff2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800eff6:	ee67 7a27 	vmul.f32	s15, s14, s15
 800effa:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800effe:	e087      	b.n	800f110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f000:	697b      	ldr	r3, [r7, #20]
 800f002:	ee07 3a90 	vmov	s15, r3
 800f006:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f00a:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f1c8 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 800f00e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f012:	4b6a      	ldr	r3, [pc, #424]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f016:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f01a:	ee07 3a90 	vmov	s15, r3
 800f01e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f022:	ed97 6a03 	vldr	s12, [r7, #12]
 800f026:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f02a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f02e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f032:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f036:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f03a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f03e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f042:	e065      	b.n	800f110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f044:	697b      	ldr	r3, [r7, #20]
 800f046:	ee07 3a90 	vmov	s15, r3
 800f04a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f04e:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f052:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f056:	4b59      	ldr	r3, [pc, #356]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f058:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f05a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f05e:	ee07 3a90 	vmov	s15, r3
 800f062:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f066:	ed97 6a03 	vldr	s12, [r7, #12]
 800f06a:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f06e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f072:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f076:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f07a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f07e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f082:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f086:	e043      	b.n	800f110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f088:	697b      	ldr	r3, [r7, #20]
 800f08a:	ee07 3a90 	vmov	s15, r3
 800f08e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f092:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f1d0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800f096:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f09a:	4b48      	ldr	r3, [pc, #288]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f09c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f09e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0a2:	ee07 3a90 	vmov	s15, r3
 800f0a6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0aa:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0ae:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f0b2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0b6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0ba:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f0be:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f0c2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f0c6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f0ca:	e021      	b.n	800f110 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800f0cc:	697b      	ldr	r3, [r7, #20]
 800f0ce:	ee07 3a90 	vmov	s15, r3
 800f0d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f0d6:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f1cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 800f0da:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f0de:	4b37      	ldr	r3, [pc, #220]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f0e0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f0e2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f0e6:	ee07 3a90 	vmov	s15, r3
 800f0ea:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f0ee:	ed97 6a03 	vldr	s12, [r7, #12]
 800f0f2:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f1c4 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800f0f6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f0fa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f0fe:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f102:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f106:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f10a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f10e:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 800f110:	4b2a      	ldr	r3, [pc, #168]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f114:	0a5b      	lsrs	r3, r3, #9
 800f116:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f11a:	ee07 3a90 	vmov	s15, r3
 800f11e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f122:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f126:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f12a:	edd7 6a07 	vldr	s13, [r7, #28]
 800f12e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f132:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f136:	ee17 2a90 	vmov	r2, s15
 800f13a:	687b      	ldr	r3, [r7, #4]
 800f13c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 800f13e:	4b1f      	ldr	r3, [pc, #124]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f140:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f142:	0c1b      	lsrs	r3, r3, #16
 800f144:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f148:	ee07 3a90 	vmov	s15, r3
 800f14c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f150:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f154:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f158:	edd7 6a07 	vldr	s13, [r7, #28]
 800f15c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f164:	ee17 2a90 	vmov	r2, s15
 800f168:	687b      	ldr	r3, [r7, #4]
 800f16a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 800f16c:	4b13      	ldr	r3, [pc, #76]	@ (800f1bc <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800f16e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f170:	0e1b      	lsrs	r3, r3, #24
 800f172:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f176:	ee07 3a90 	vmov	s15, r3
 800f17a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f17e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f182:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f186:	edd7 6a07 	vldr	s13, [r7, #28]
 800f18a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f18e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f192:	ee17 2a90 	vmov	r2, s15
 800f196:	687b      	ldr	r3, [r7, #4]
 800f198:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800f19a:	e008      	b.n	800f1ae <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 800f19c:	687b      	ldr	r3, [r7, #4]
 800f19e:	2200      	movs	r2, #0
 800f1a0:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 800f1a2:	687b      	ldr	r3, [r7, #4]
 800f1a4:	2200      	movs	r2, #0
 800f1a6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800f1a8:	687b      	ldr	r3, [r7, #4]
 800f1aa:	2200      	movs	r2, #0
 800f1ac:	609a      	str	r2, [r3, #8]
}
 800f1ae:	bf00      	nop
 800f1b0:	3724      	adds	r7, #36	@ 0x24
 800f1b2:	46bd      	mov	sp, r7
 800f1b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f1b8:	4770      	bx	lr
 800f1ba:	bf00      	nop
 800f1bc:	58024400 	.word	0x58024400
 800f1c0:	03d09000 	.word	0x03d09000
 800f1c4:	46000000 	.word	0x46000000
 800f1c8:	4c742400 	.word	0x4c742400
 800f1cc:	4a742400 	.word	0x4a742400
 800f1d0:	4bbebc20 	.word	0x4bbebc20

0800f1d4 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 800f1d4:	b480      	push	{r7}
 800f1d6:	b089      	sub	sp, #36	@ 0x24
 800f1d8:	af00      	add	r7, sp, #0
 800f1da:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f1dc:	4ba1      	ldr	r3, [pc, #644]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1e0:	f003 0303 	and.w	r3, r3, #3
 800f1e4:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 800f1e6:	4b9f      	ldr	r3, [pc, #636]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f1ea:	0d1b      	lsrs	r3, r3, #20
 800f1ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f1f0:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 800f1f2:	4b9c      	ldr	r3, [pc, #624]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f1f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f1f6:	0a1b      	lsrs	r3, r3, #8
 800f1f8:	f003 0301 	and.w	r3, r3, #1
 800f1fc:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 800f1fe:	4b99      	ldr	r3, [pc, #612]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f200:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f202:	08db      	lsrs	r3, r3, #3
 800f204:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f208:	693a      	ldr	r2, [r7, #16]
 800f20a:	fb02 f303 	mul.w	r3, r2, r3
 800f20e:	ee07 3a90 	vmov	s15, r3
 800f212:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f216:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800f21a:	697b      	ldr	r3, [r7, #20]
 800f21c:	2b00      	cmp	r3, #0
 800f21e:	f000 8111 	beq.w	800f444 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 800f222:	69bb      	ldr	r3, [r7, #24]
 800f224:	2b02      	cmp	r3, #2
 800f226:	f000 8083 	beq.w	800f330 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800f22a:	69bb      	ldr	r3, [r7, #24]
 800f22c:	2b02      	cmp	r3, #2
 800f22e:	f200 80a1 	bhi.w	800f374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 800f232:	69bb      	ldr	r3, [r7, #24]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d003      	beq.n	800f240 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800f238:	69bb      	ldr	r3, [r7, #24]
 800f23a:	2b01      	cmp	r3, #1
 800f23c:	d056      	beq.n	800f2ec <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 800f23e:	e099      	b.n	800f374 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f240:	4b88      	ldr	r3, [pc, #544]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f242:	681b      	ldr	r3, [r3, #0]
 800f244:	f003 0320 	and.w	r3, r3, #32
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d02d      	beq.n	800f2a8 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f24c:	4b85      	ldr	r3, [pc, #532]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f24e:	681b      	ldr	r3, [r3, #0]
 800f250:	08db      	lsrs	r3, r3, #3
 800f252:	f003 0303 	and.w	r3, r3, #3
 800f256:	4a84      	ldr	r2, [pc, #528]	@ (800f468 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800f258:	fa22 f303 	lsr.w	r3, r2, r3
 800f25c:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f25e:	68bb      	ldr	r3, [r7, #8]
 800f260:	ee07 3a90 	vmov	s15, r3
 800f264:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f268:	697b      	ldr	r3, [r7, #20]
 800f26a:	ee07 3a90 	vmov	s15, r3
 800f26e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f272:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f276:	4b7b      	ldr	r3, [pc, #492]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f278:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f27a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f27e:	ee07 3a90 	vmov	s15, r3
 800f282:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f286:	ed97 6a03 	vldr	s12, [r7, #12]
 800f28a:	eddf 5a78 	vldr	s11, [pc, #480]	@ 800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f28e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f292:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f296:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f29a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f29e:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2a2:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f2a6:	e087      	b.n	800f3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f2a8:	697b      	ldr	r3, [r7, #20]
 800f2aa:	ee07 3a90 	vmov	s15, r3
 800f2ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2b2:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 800f470 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 800f2b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2ba:	4b6a      	ldr	r3, [pc, #424]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f2bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f2be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f2c2:	ee07 3a90 	vmov	s15, r3
 800f2c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f2ca:	ed97 6a03 	vldr	s12, [r7, #12]
 800f2ce:	eddf 5a67 	vldr	s11, [pc, #412]	@ 800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f2d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f2d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f2da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f2de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f2e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f2e6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f2ea:	e065      	b.n	800f3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f2ec:	697b      	ldr	r3, [r7, #20]
 800f2ee:	ee07 3a90 	vmov	s15, r3
 800f2f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f2f6:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 800f474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f2fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f2fe:	4b59      	ldr	r3, [pc, #356]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f302:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f306:	ee07 3a90 	vmov	s15, r3
 800f30a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f30e:	ed97 6a03 	vldr	s12, [r7, #12]
 800f312:	eddf 5a56 	vldr	s11, [pc, #344]	@ 800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f316:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f31a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f31e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f322:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f326:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f32a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f32e:	e043      	b.n	800f3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f330:	697b      	ldr	r3, [r7, #20]
 800f332:	ee07 3a90 	vmov	s15, r3
 800f336:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f33a:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 800f478 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 800f33e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f342:	4b48      	ldr	r3, [pc, #288]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f344:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f346:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f34a:	ee07 3a90 	vmov	s15, r3
 800f34e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f352:	ed97 6a03 	vldr	s12, [r7, #12]
 800f356:	eddf 5a45 	vldr	s11, [pc, #276]	@ 800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f35a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f35e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f362:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f366:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f36a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f36e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f372:	e021      	b.n	800f3b8 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800f374:	697b      	ldr	r3, [r7, #20]
 800f376:	ee07 3a90 	vmov	s15, r3
 800f37a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f37e:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 800f474 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 800f382:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f386:	4b37      	ldr	r3, [pc, #220]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f388:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f38a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f38e:	ee07 3a90 	vmov	s15, r3
 800f392:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f396:	ed97 6a03 	vldr	s12, [r7, #12]
 800f39a:	eddf 5a34 	vldr	s11, [pc, #208]	@ 800f46c <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800f39e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f3a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f3a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f3aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f3ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f3b2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f3b6:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 800f3b8:	4b2a      	ldr	r3, [pc, #168]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3bc:	0a5b      	lsrs	r3, r3, #9
 800f3be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3c2:	ee07 3a90 	vmov	s15, r3
 800f3c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3ca:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3ce:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f3d2:	edd7 6a07 	vldr	s13, [r7, #28]
 800f3d6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f3da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f3de:	ee17 2a90 	vmov	r2, s15
 800f3e2:	687b      	ldr	r3, [r7, #4]
 800f3e4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 800f3e6:	4b1f      	ldr	r3, [pc, #124]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f3e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f3ea:	0c1b      	lsrs	r3, r3, #16
 800f3ec:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f3f0:	ee07 3a90 	vmov	s15, r3
 800f3f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f3f8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f3fc:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f400:	edd7 6a07 	vldr	s13, [r7, #28]
 800f404:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f408:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f40c:	ee17 2a90 	vmov	r2, s15
 800f410:	687b      	ldr	r3, [r7, #4]
 800f412:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 800f414:	4b13      	ldr	r3, [pc, #76]	@ (800f464 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800f416:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800f418:	0e1b      	lsrs	r3, r3, #24
 800f41a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f41e:	ee07 3a90 	vmov	s15, r3
 800f422:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f426:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f42a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f42e:	edd7 6a07 	vldr	s13, [r7, #28]
 800f432:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f436:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f43a:	ee17 2a90 	vmov	r2, s15
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 800f442:	e008      	b.n	800f456 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 800f444:	687b      	ldr	r3, [r7, #4]
 800f446:	2200      	movs	r2, #0
 800f448:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800f44a:	687b      	ldr	r3, [r7, #4]
 800f44c:	2200      	movs	r2, #0
 800f44e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 800f450:	687b      	ldr	r3, [r7, #4]
 800f452:	2200      	movs	r2, #0
 800f454:	609a      	str	r2, [r3, #8]
}
 800f456:	bf00      	nop
 800f458:	3724      	adds	r7, #36	@ 0x24
 800f45a:	46bd      	mov	sp, r7
 800f45c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f460:	4770      	bx	lr
 800f462:	bf00      	nop
 800f464:	58024400 	.word	0x58024400
 800f468:	03d09000 	.word	0x03d09000
 800f46c:	46000000 	.word	0x46000000
 800f470:	4c742400 	.word	0x4c742400
 800f474:	4a742400 	.word	0x4a742400
 800f478:	4bbebc20 	.word	0x4bbebc20

0800f47c <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 800f47c:	b480      	push	{r7}
 800f47e:	b089      	sub	sp, #36	@ 0x24
 800f480:	af00      	add	r7, sp, #0
 800f482:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 800f484:	4ba0      	ldr	r3, [pc, #640]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f486:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f488:	f003 0303 	and.w	r3, r3, #3
 800f48c:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 800f48e:	4b9e      	ldr	r3, [pc, #632]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f490:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f492:	091b      	lsrs	r3, r3, #4
 800f494:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800f498:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800f49a:	4b9b      	ldr	r3, [pc, #620]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f49e:	f003 0301 	and.w	r3, r3, #1
 800f4a2:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 800f4a4:	4b98      	ldr	r3, [pc, #608]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800f4a8:	08db      	lsrs	r3, r3, #3
 800f4aa:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800f4ae:	693a      	ldr	r2, [r7, #16]
 800f4b0:	fb02 f303 	mul.w	r3, r2, r3
 800f4b4:	ee07 3a90 	vmov	s15, r3
 800f4b8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f4bc:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 800f4c0:	697b      	ldr	r3, [r7, #20]
 800f4c2:	2b00      	cmp	r3, #0
 800f4c4:	f000 8111 	beq.w	800f6ea <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 800f4c8:	69bb      	ldr	r3, [r7, #24]
 800f4ca:	2b02      	cmp	r3, #2
 800f4cc:	f000 8083 	beq.w	800f5d6 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 800f4d0:	69bb      	ldr	r3, [r7, #24]
 800f4d2:	2b02      	cmp	r3, #2
 800f4d4:	f200 80a1 	bhi.w	800f61a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 800f4d8:	69bb      	ldr	r3, [r7, #24]
 800f4da:	2b00      	cmp	r3, #0
 800f4dc:	d003      	beq.n	800f4e6 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 800f4de:	69bb      	ldr	r3, [r7, #24]
 800f4e0:	2b01      	cmp	r3, #1
 800f4e2:	d056      	beq.n	800f592 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 800f4e4:	e099      	b.n	800f61a <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800f4e6:	4b88      	ldr	r3, [pc, #544]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4e8:	681b      	ldr	r3, [r3, #0]
 800f4ea:	f003 0320 	and.w	r3, r3, #32
 800f4ee:	2b00      	cmp	r3, #0
 800f4f0:	d02d      	beq.n	800f54e <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800f4f2:	4b85      	ldr	r3, [pc, #532]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f4f4:	681b      	ldr	r3, [r3, #0]
 800f4f6:	08db      	lsrs	r3, r3, #3
 800f4f8:	f003 0303 	and.w	r3, r3, #3
 800f4fc:	4a83      	ldr	r2, [pc, #524]	@ (800f70c <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 800f4fe:	fa22 f303 	lsr.w	r3, r2, r3
 800f502:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f504:	68bb      	ldr	r3, [r7, #8]
 800f506:	ee07 3a90 	vmov	s15, r3
 800f50a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f50e:	697b      	ldr	r3, [r7, #20]
 800f510:	ee07 3a90 	vmov	s15, r3
 800f514:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f518:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f51c:	4b7a      	ldr	r3, [pc, #488]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f51e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f520:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f524:	ee07 3a90 	vmov	s15, r3
 800f528:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f52c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f530:	eddf 5a77 	vldr	s11, [pc, #476]	@ 800f710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f534:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f538:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f53c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f540:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f544:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f548:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800f54c:	e087      	b.n	800f65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f54e:	697b      	ldr	r3, [r7, #20]
 800f550:	ee07 3a90 	vmov	s15, r3
 800f554:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f558:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 800f714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f55c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f560:	4b69      	ldr	r3, [pc, #420]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f564:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f568:	ee07 3a90 	vmov	s15, r3
 800f56c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f570:	ed97 6a03 	vldr	s12, [r7, #12]
 800f574:	eddf 5a66 	vldr	s11, [pc, #408]	@ 800f710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f578:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f57c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f580:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f584:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f588:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f58c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f590:	e065      	b.n	800f65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f592:	697b      	ldr	r3, [r7, #20]
 800f594:	ee07 3a90 	vmov	s15, r3
 800f598:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f59c:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 800f718 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 800f5a0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5a4:	4b58      	ldr	r3, [pc, #352]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5ac:	ee07 3a90 	vmov	s15, r3
 800f5b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5b4:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5b8:	eddf 5a55 	vldr	s11, [pc, #340]	@ 800f710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f5bc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f5c0:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f5c4:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f5c8:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f5cc:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f5d0:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f5d4:	e043      	b.n	800f65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f5d6:	697b      	ldr	r3, [r7, #20]
 800f5d8:	ee07 3a90 	vmov	s15, r3
 800f5dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f5e0:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 800f71c <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 800f5e4:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f5e8:	4b47      	ldr	r3, [pc, #284]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f5ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5ec:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f5f0:	ee07 3a90 	vmov	s15, r3
 800f5f4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f5f8:	ed97 6a03 	vldr	s12, [r7, #12]
 800f5fc:	eddf 5a44 	vldr	s11, [pc, #272]	@ 800f710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f600:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f604:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f608:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f60c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f610:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f614:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f618:	e021      	b.n	800f65e <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800f61a:	697b      	ldr	r3, [r7, #20]
 800f61c:	ee07 3a90 	vmov	s15, r3
 800f620:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f624:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 800f714 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800f628:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800f62c:	4b36      	ldr	r3, [pc, #216]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f62e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f630:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800f634:	ee07 3a90 	vmov	s15, r3
 800f638:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800f63c:	ed97 6a03 	vldr	s12, [r7, #12]
 800f640:	eddf 5a33 	vldr	s11, [pc, #204]	@ 800f710 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800f644:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800f648:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800f64c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800f650:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800f654:	ee67 7a27 	vmul.f32	s15, s14, s15
 800f658:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800f65c:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 800f65e:	4b2a      	ldr	r3, [pc, #168]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f660:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f662:	0a5b      	lsrs	r3, r3, #9
 800f664:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f668:	ee07 3a90 	vmov	s15, r3
 800f66c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f670:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f674:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f678:	edd7 6a07 	vldr	s13, [r7, #28]
 800f67c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f680:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f684:	ee17 2a90 	vmov	r2, s15
 800f688:	687b      	ldr	r3, [r7, #4]
 800f68a:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 800f68c:	4b1e      	ldr	r3, [pc, #120]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f68e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f690:	0c1b      	lsrs	r3, r3, #16
 800f692:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f696:	ee07 3a90 	vmov	s15, r3
 800f69a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f69e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f6a2:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6a6:	edd7 6a07 	vldr	s13, [r7, #28]
 800f6aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f6b2:	ee17 2a90 	vmov	r2, s15
 800f6b6:	687b      	ldr	r3, [r7, #4]
 800f6b8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 800f6ba:	4b13      	ldr	r3, [pc, #76]	@ (800f708 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800f6bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f6be:	0e1b      	lsrs	r3, r3, #24
 800f6c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800f6c4:	ee07 3a90 	vmov	s15, r3
 800f6c8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800f6cc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800f6d0:	ee37 7a87 	vadd.f32	s14, s15, s14
 800f6d4:	edd7 6a07 	vldr	s13, [r7, #28]
 800f6d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800f6dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800f6e0:	ee17 2a90 	vmov	r2, s15
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 800f6e8:	e008      	b.n	800f6fc <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 800f6ea:	687b      	ldr	r3, [r7, #4]
 800f6ec:	2200      	movs	r2, #0
 800f6ee:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	2200      	movs	r2, #0
 800f6f4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 800f6f6:	687b      	ldr	r3, [r7, #4]
 800f6f8:	2200      	movs	r2, #0
 800f6fa:	609a      	str	r2, [r3, #8]
}
 800f6fc:	bf00      	nop
 800f6fe:	3724      	adds	r7, #36	@ 0x24
 800f700:	46bd      	mov	sp, r7
 800f702:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f706:	4770      	bx	lr
 800f708:	58024400 	.word	0x58024400
 800f70c:	03d09000 	.word	0x03d09000
 800f710:	46000000 	.word	0x46000000
 800f714:	4c742400 	.word	0x4c742400
 800f718:	4a742400 	.word	0x4a742400
 800f71c:	4bbebc20 	.word	0x4bbebc20

0800f720 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 800f720:	b580      	push	{r7, lr}
 800f722:	b084      	sub	sp, #16
 800f724:	af00      	add	r7, sp, #0
 800f726:	6078      	str	r0, [r7, #4]
 800f728:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f72a:	2300      	movs	r3, #0
 800f72c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f72e:	4b53      	ldr	r3, [pc, #332]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f730:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f732:	f003 0303 	and.w	r3, r3, #3
 800f736:	2b03      	cmp	r3, #3
 800f738:	d101      	bne.n	800f73e <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800f73a:	2301      	movs	r3, #1
 800f73c:	e099      	b.n	800f872 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 800f73e:	4b4f      	ldr	r3, [pc, #316]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f740:	681b      	ldr	r3, [r3, #0]
 800f742:	4a4e      	ldr	r2, [pc, #312]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f744:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800f748:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f74a:	f7f8 fbe5 	bl	8007f18 <HAL_GetTick>
 800f74e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f750:	e008      	b.n	800f764 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f752:	f7f8 fbe1 	bl	8007f18 <HAL_GetTick>
 800f756:	4602      	mov	r2, r0
 800f758:	68bb      	ldr	r3, [r7, #8]
 800f75a:	1ad3      	subs	r3, r2, r3
 800f75c:	2b02      	cmp	r3, #2
 800f75e:	d901      	bls.n	800f764 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f760:	2303      	movs	r3, #3
 800f762:	e086      	b.n	800f872 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800f764:	4b45      	ldr	r3, [pc, #276]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f766:	681b      	ldr	r3, [r3, #0]
 800f768:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f76c:	2b00      	cmp	r3, #0
 800f76e:	d1f0      	bne.n	800f752 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 800f770:	4b42      	ldr	r3, [pc, #264]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f772:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f774:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 800f778:	687b      	ldr	r3, [r7, #4]
 800f77a:	681b      	ldr	r3, [r3, #0]
 800f77c:	031b      	lsls	r3, r3, #12
 800f77e:	493f      	ldr	r1, [pc, #252]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f780:	4313      	orrs	r3, r2
 800f782:	628b      	str	r3, [r1, #40]	@ 0x28
 800f784:	687b      	ldr	r3, [r7, #4]
 800f786:	685b      	ldr	r3, [r3, #4]
 800f788:	3b01      	subs	r3, #1
 800f78a:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	689b      	ldr	r3, [r3, #8]
 800f792:	3b01      	subs	r3, #1
 800f794:	025b      	lsls	r3, r3, #9
 800f796:	b29b      	uxth	r3, r3
 800f798:	431a      	orrs	r2, r3
 800f79a:	687b      	ldr	r3, [r7, #4]
 800f79c:	68db      	ldr	r3, [r3, #12]
 800f79e:	3b01      	subs	r3, #1
 800f7a0:	041b      	lsls	r3, r3, #16
 800f7a2:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f7a6:	431a      	orrs	r2, r3
 800f7a8:	687b      	ldr	r3, [r7, #4]
 800f7aa:	691b      	ldr	r3, [r3, #16]
 800f7ac:	3b01      	subs	r3, #1
 800f7ae:	061b      	lsls	r3, r3, #24
 800f7b0:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f7b4:	4931      	ldr	r1, [pc, #196]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7b6:	4313      	orrs	r3, r2
 800f7b8:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 800f7ba:	4b30      	ldr	r3, [pc, #192]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7bc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7be:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	695b      	ldr	r3, [r3, #20]
 800f7c6:	492d      	ldr	r1, [pc, #180]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7c8:	4313      	orrs	r3, r2
 800f7ca:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 800f7cc:	4b2b      	ldr	r3, [pc, #172]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7d0:	f023 0220 	bic.w	r2, r3, #32
 800f7d4:	687b      	ldr	r3, [r7, #4]
 800f7d6:	699b      	ldr	r3, [r3, #24]
 800f7d8:	4928      	ldr	r1, [pc, #160]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7da:	4313      	orrs	r3, r2
 800f7dc:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 800f7de:	4b27      	ldr	r3, [pc, #156]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f7e2:	4a26      	ldr	r2, [pc, #152]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7e4:	f023 0310 	bic.w	r3, r3, #16
 800f7e8:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 800f7ea:	4b24      	ldr	r3, [pc, #144]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7ec:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 800f7ee:	4b24      	ldr	r3, [pc, #144]	@ (800f880 <RCCEx_PLL2_Config+0x160>)
 800f7f0:	4013      	ands	r3, r2
 800f7f2:	687a      	ldr	r2, [r7, #4]
 800f7f4:	69d2      	ldr	r2, [r2, #28]
 800f7f6:	00d2      	lsls	r2, r2, #3
 800f7f8:	4920      	ldr	r1, [pc, #128]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f7fa:	4313      	orrs	r3, r2
 800f7fc:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 800f7fe:	4b1f      	ldr	r3, [pc, #124]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f800:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f802:	4a1e      	ldr	r2, [pc, #120]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f804:	f043 0310 	orr.w	r3, r3, #16
 800f808:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f80a:	683b      	ldr	r3, [r7, #0]
 800f80c:	2b00      	cmp	r3, #0
 800f80e:	d106      	bne.n	800f81e <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 800f810:	4b1a      	ldr	r3, [pc, #104]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f812:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f814:	4a19      	ldr	r2, [pc, #100]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f816:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800f81a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f81c:	e00f      	b.n	800f83e <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f81e:	683b      	ldr	r3, [r7, #0]
 800f820:	2b01      	cmp	r3, #1
 800f822:	d106      	bne.n	800f832 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 800f824:	4b15      	ldr	r3, [pc, #84]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f826:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f828:	4a14      	ldr	r2, [pc, #80]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f82a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f82e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f830:	e005      	b.n	800f83e <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 800f832:	4b12      	ldr	r3, [pc, #72]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f836:	4a11      	ldr	r2, [pc, #68]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f838:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800f83c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 800f83e:	4b0f      	ldr	r3, [pc, #60]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	4a0e      	ldr	r2, [pc, #56]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f844:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 800f848:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f84a:	f7f8 fb65 	bl	8007f18 <HAL_GetTick>
 800f84e:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f850:	e008      	b.n	800f864 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800f852:	f7f8 fb61 	bl	8007f18 <HAL_GetTick>
 800f856:	4602      	mov	r2, r0
 800f858:	68bb      	ldr	r3, [r7, #8]
 800f85a:	1ad3      	subs	r3, r2, r3
 800f85c:	2b02      	cmp	r3, #2
 800f85e:	d901      	bls.n	800f864 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f860:	2303      	movs	r3, #3
 800f862:	e006      	b.n	800f872 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800f864:	4b05      	ldr	r3, [pc, #20]	@ (800f87c <RCCEx_PLL2_Config+0x15c>)
 800f866:	681b      	ldr	r3, [r3, #0]
 800f868:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800f86c:	2b00      	cmp	r3, #0
 800f86e:	d0f0      	beq.n	800f852 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 800f870:	7bfb      	ldrb	r3, [r7, #15]
}
 800f872:	4618      	mov	r0, r3
 800f874:	3710      	adds	r7, #16
 800f876:	46bd      	mov	sp, r7
 800f878:	bd80      	pop	{r7, pc}
 800f87a:	bf00      	nop
 800f87c:	58024400 	.word	0x58024400
 800f880:	ffff0007 	.word	0xffff0007

0800f884 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800f884:	b580      	push	{r7, lr}
 800f886:	b084      	sub	sp, #16
 800f888:	af00      	add	r7, sp, #0
 800f88a:	6078      	str	r0, [r7, #4]
 800f88c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800f88e:	2300      	movs	r3, #0
 800f890:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800f892:	4b53      	ldr	r3, [pc, #332]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f894:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f896:	f003 0303 	and.w	r3, r3, #3
 800f89a:	2b03      	cmp	r3, #3
 800f89c:	d101      	bne.n	800f8a2 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 800f89e:	2301      	movs	r3, #1
 800f8a0:	e099      	b.n	800f9d6 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800f8a2:	4b4f      	ldr	r3, [pc, #316]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f8a4:	681b      	ldr	r3, [r3, #0]
 800f8a6:	4a4e      	ldr	r2, [pc, #312]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f8a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800f8ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f8ae:	f7f8 fb33 	bl	8007f18 <HAL_GetTick>
 800f8b2:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f8b4:	e008      	b.n	800f8c8 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f8b6:	f7f8 fb2f 	bl	8007f18 <HAL_GetTick>
 800f8ba:	4602      	mov	r2, r0
 800f8bc:	68bb      	ldr	r3, [r7, #8]
 800f8be:	1ad3      	subs	r3, r2, r3
 800f8c0:	2b02      	cmp	r3, #2
 800f8c2:	d901      	bls.n	800f8c8 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800f8c4:	2303      	movs	r3, #3
 800f8c6:	e086      	b.n	800f9d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800f8c8:	4b45      	ldr	r3, [pc, #276]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f8ca:	681b      	ldr	r3, [r3, #0]
 800f8cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f8d0:	2b00      	cmp	r3, #0
 800f8d2:	d1f0      	bne.n	800f8b6 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800f8d4:	4b42      	ldr	r3, [pc, #264]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f8d6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8d8:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 800f8dc:	687b      	ldr	r3, [r7, #4]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	051b      	lsls	r3, r3, #20
 800f8e2:	493f      	ldr	r1, [pc, #252]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f8e4:	4313      	orrs	r3, r2
 800f8e6:	628b      	str	r3, [r1, #40]	@ 0x28
 800f8e8:	687b      	ldr	r3, [r7, #4]
 800f8ea:	685b      	ldr	r3, [r3, #4]
 800f8ec:	3b01      	subs	r3, #1
 800f8ee:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800f8f2:	687b      	ldr	r3, [r7, #4]
 800f8f4:	689b      	ldr	r3, [r3, #8]
 800f8f6:	3b01      	subs	r3, #1
 800f8f8:	025b      	lsls	r3, r3, #9
 800f8fa:	b29b      	uxth	r3, r3
 800f8fc:	431a      	orrs	r2, r3
 800f8fe:	687b      	ldr	r3, [r7, #4]
 800f900:	68db      	ldr	r3, [r3, #12]
 800f902:	3b01      	subs	r3, #1
 800f904:	041b      	lsls	r3, r3, #16
 800f906:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800f90a:	431a      	orrs	r2, r3
 800f90c:	687b      	ldr	r3, [r7, #4]
 800f90e:	691b      	ldr	r3, [r3, #16]
 800f910:	3b01      	subs	r3, #1
 800f912:	061b      	lsls	r3, r3, #24
 800f914:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800f918:	4931      	ldr	r1, [pc, #196]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f91a:	4313      	orrs	r3, r2
 800f91c:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 800f91e:	4b30      	ldr	r3, [pc, #192]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f920:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f922:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 800f926:	687b      	ldr	r3, [r7, #4]
 800f928:	695b      	ldr	r3, [r3, #20]
 800f92a:	492d      	ldr	r1, [pc, #180]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f92c:	4313      	orrs	r3, r2
 800f92e:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 800f930:	4b2b      	ldr	r3, [pc, #172]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f932:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f934:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 800f938:	687b      	ldr	r3, [r7, #4]
 800f93a:	699b      	ldr	r3, [r3, #24]
 800f93c:	4928      	ldr	r1, [pc, #160]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f93e:	4313      	orrs	r3, r2
 800f940:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800f942:	4b27      	ldr	r3, [pc, #156]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f946:	4a26      	ldr	r2, [pc, #152]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800f94c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 800f94e:	4b24      	ldr	r3, [pc, #144]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f950:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800f952:	4b24      	ldr	r3, [pc, #144]	@ (800f9e4 <RCCEx_PLL3_Config+0x160>)
 800f954:	4013      	ands	r3, r2
 800f956:	687a      	ldr	r2, [r7, #4]
 800f958:	69d2      	ldr	r2, [r2, #28]
 800f95a:	00d2      	lsls	r2, r2, #3
 800f95c:	4920      	ldr	r1, [pc, #128]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f95e:	4313      	orrs	r3, r2
 800f960:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800f962:	4b1f      	ldr	r3, [pc, #124]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f964:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f966:	4a1e      	ldr	r2, [pc, #120]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f968:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800f96c:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 800f96e:	683b      	ldr	r3, [r7, #0]
 800f970:	2b00      	cmp	r3, #0
 800f972:	d106      	bne.n	800f982 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800f974:	4b1a      	ldr	r3, [pc, #104]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f976:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f978:	4a19      	ldr	r2, [pc, #100]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f97a:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800f97e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f980:	e00f      	b.n	800f9a2 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800f982:	683b      	ldr	r3, [r7, #0]
 800f984:	2b01      	cmp	r3, #1
 800f986:	d106      	bne.n	800f996 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 800f988:	4b15      	ldr	r3, [pc, #84]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f98a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f98c:	4a14      	ldr	r2, [pc, #80]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f98e:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800f992:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800f994:	e005      	b.n	800f9a2 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800f996:	4b12      	ldr	r3, [pc, #72]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f99a:	4a11      	ldr	r2, [pc, #68]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f99c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800f9a0:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800f9a2:	4b0f      	ldr	r3, [pc, #60]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f9a4:	681b      	ldr	r3, [r3, #0]
 800f9a6:	4a0e      	ldr	r2, [pc, #56]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f9a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800f9ac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800f9ae:	f7f8 fab3 	bl	8007f18 <HAL_GetTick>
 800f9b2:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f9b4:	e008      	b.n	800f9c8 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800f9b6:	f7f8 faaf 	bl	8007f18 <HAL_GetTick>
 800f9ba:	4602      	mov	r2, r0
 800f9bc:	68bb      	ldr	r3, [r7, #8]
 800f9be:	1ad3      	subs	r3, r2, r3
 800f9c0:	2b02      	cmp	r3, #2
 800f9c2:	d901      	bls.n	800f9c8 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800f9c4:	2303      	movs	r3, #3
 800f9c6:	e006      	b.n	800f9d6 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800f9c8:	4b05      	ldr	r3, [pc, #20]	@ (800f9e0 <RCCEx_PLL3_Config+0x15c>)
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800f9d0:	2b00      	cmp	r3, #0
 800f9d2:	d0f0      	beq.n	800f9b6 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800f9d4:	7bfb      	ldrb	r3, [r7, #15]
}
 800f9d6:	4618      	mov	r0, r3
 800f9d8:	3710      	adds	r7, #16
 800f9da:	46bd      	mov	sp, r7
 800f9dc:	bd80      	pop	{r7, pc}
 800f9de:	bf00      	nop
 800f9e0:	58024400 	.word	0x58024400
 800f9e4:	ffff0007 	.word	0xffff0007

0800f9e8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 800f9e8:	b580      	push	{r7, lr}
 800f9ea:	b08a      	sub	sp, #40	@ 0x28
 800f9ec:	af00      	add	r7, sp, #0
 800f9ee:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 800f9f0:	687b      	ldr	r3, [r7, #4]
 800f9f2:	2b00      	cmp	r3, #0
 800f9f4:	d101      	bne.n	800f9fa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 800f9f6:	2301      	movs	r3, #1
 800f9f8:	e28e      	b.n	800ff18 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800f9fa:	f7f8 fabd 	bl	8007f78 <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 800f9fe:	687b      	ldr	r3, [r7, #4]
 800fa00:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fa04:	2b01      	cmp	r3, #1
 800fa06:	d113      	bne.n	800fa30 <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800fa08:	687b      	ldr	r3, [r7, #4]
 800fa0a:	681b      	ldr	r3, [r3, #0]
 800fa0c:	4a96      	ldr	r2, [pc, #600]	@ (800fc68 <HAL_SAI_Init+0x280>)
 800fa0e:	4293      	cmp	r3, r2
 800fa10:	d004      	beq.n	800fa1c <HAL_SAI_Init+0x34>
 800fa12:	687b      	ldr	r3, [r7, #4]
 800fa14:	681b      	ldr	r3, [r3, #0]
 800fa16:	4a95      	ldr	r2, [pc, #596]	@ (800fc6c <HAL_SAI_Init+0x284>)
 800fa18:	4293      	cmp	r3, r2
 800fa1a:	d107      	bne.n	800fa2c <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fa1c:	687b      	ldr	r3, [r7, #4]
 800fa1e:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 800fa20:	2b01      	cmp	r3, #1
 800fa22:	d103      	bne.n	800fa2c <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 800fa24:	687b      	ldr	r3, [r7, #4]
 800fa26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 800fa28:	2b00      	cmp	r3, #0
 800fa2a:	d001      	beq.n	800fa30 <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 800fa2c:	2301      	movs	r3, #1
 800fa2e:	e273      	b.n	800ff18 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800fa30:	687b      	ldr	r3, [r7, #4]
 800fa32:	681b      	ldr	r3, [r3, #0]
 800fa34:	4a8c      	ldr	r2, [pc, #560]	@ (800fc68 <HAL_SAI_Init+0x280>)
 800fa36:	4293      	cmp	r3, r2
 800fa38:	d004      	beq.n	800fa44 <HAL_SAI_Init+0x5c>
 800fa3a:	687b      	ldr	r3, [r7, #4]
 800fa3c:	681b      	ldr	r3, [r3, #0]
 800fa3e:	4a8c      	ldr	r2, [pc, #560]	@ (800fc70 <HAL_SAI_Init+0x288>)
 800fa40:	4293      	cmp	r3, r2
 800fa42:	d102      	bne.n	800fa4a <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 800fa44:	4b8b      	ldr	r3, [pc, #556]	@ (800fc74 <HAL_SAI_Init+0x28c>)
 800fa46:	61bb      	str	r3, [r7, #24]
 800fa48:	e028      	b.n	800fa9c <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800fa4a:	687b      	ldr	r3, [r7, #4]
 800fa4c:	681b      	ldr	r3, [r3, #0]
 800fa4e:	4a8a      	ldr	r2, [pc, #552]	@ (800fc78 <HAL_SAI_Init+0x290>)
 800fa50:	4293      	cmp	r3, r2
 800fa52:	d004      	beq.n	800fa5e <HAL_SAI_Init+0x76>
 800fa54:	687b      	ldr	r3, [r7, #4]
 800fa56:	681b      	ldr	r3, [r3, #0]
 800fa58:	4a88      	ldr	r2, [pc, #544]	@ (800fc7c <HAL_SAI_Init+0x294>)
 800fa5a:	4293      	cmp	r3, r2
 800fa5c:	d102      	bne.n	800fa64 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 800fa5e:	4b88      	ldr	r3, [pc, #544]	@ (800fc80 <HAL_SAI_Init+0x298>)
 800fa60:	61bb      	str	r3, [r7, #24]
 800fa62:	e01b      	b.n	800fa9c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800fa64:	687b      	ldr	r3, [r7, #4]
 800fa66:	681b      	ldr	r3, [r3, #0]
 800fa68:	4a86      	ldr	r2, [pc, #536]	@ (800fc84 <HAL_SAI_Init+0x29c>)
 800fa6a:	4293      	cmp	r3, r2
 800fa6c:	d004      	beq.n	800fa78 <HAL_SAI_Init+0x90>
 800fa6e:	687b      	ldr	r3, [r7, #4]
 800fa70:	681b      	ldr	r3, [r3, #0]
 800fa72:	4a85      	ldr	r2, [pc, #532]	@ (800fc88 <HAL_SAI_Init+0x2a0>)
 800fa74:	4293      	cmp	r3, r2
 800fa76:	d102      	bne.n	800fa7e <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 800fa78:	4b84      	ldr	r3, [pc, #528]	@ (800fc8c <HAL_SAI_Init+0x2a4>)
 800fa7a:	61bb      	str	r3, [r7, #24]
 800fa7c:	e00e      	b.n	800fa9c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 800fa7e:	687b      	ldr	r3, [r7, #4]
 800fa80:	681b      	ldr	r3, [r3, #0]
 800fa82:	4a7a      	ldr	r2, [pc, #488]	@ (800fc6c <HAL_SAI_Init+0x284>)
 800fa84:	4293      	cmp	r3, r2
 800fa86:	d004      	beq.n	800fa92 <HAL_SAI_Init+0xaa>
 800fa88:	687b      	ldr	r3, [r7, #4]
 800fa8a:	681b      	ldr	r3, [r3, #0]
 800fa8c:	4a80      	ldr	r2, [pc, #512]	@ (800fc90 <HAL_SAI_Init+0x2a8>)
 800fa8e:	4293      	cmp	r3, r2
 800fa90:	d102      	bne.n	800fa98 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 800fa92:	4b80      	ldr	r3, [pc, #512]	@ (800fc94 <HAL_SAI_Init+0x2ac>)
 800fa94:	61bb      	str	r3, [r7, #24]
 800fa96:	e001      	b.n	800fa9c <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 800fa98:	2301      	movs	r3, #1
 800fa9a:	e23d      	b.n	800ff18 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 800fa9c:	687b      	ldr	r3, [r7, #4]
 800fa9e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800faa2:	b2db      	uxtb	r3, r3
 800faa4:	2b00      	cmp	r3, #0
 800faa6:	d106      	bne.n	800fab6 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 800faa8:	687b      	ldr	r3, [r7, #4]
 800faaa:	2200      	movs	r2, #0
 800faac:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 800fab0:	6878      	ldr	r0, [r7, #4]
 800fab2:	f7f3 fc71 	bl	8003398 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 800fab6:	6878      	ldr	r0, [r7, #4]
 800fab8:	f000 fbc2 	bl	8010240 <SAI_Disable>
 800fabc:	4603      	mov	r3, r0
 800fabe:	2b00      	cmp	r3, #0
 800fac0:	d001      	beq.n	800fac6 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 800fac2:	2301      	movs	r3, #1
 800fac4:	e228      	b.n	800ff18 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 800fac6:	687b      	ldr	r3, [r7, #4]
 800fac8:	2202      	movs	r2, #2
 800faca:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 800face:	687b      	ldr	r3, [r7, #4]
 800fad0:	68db      	ldr	r3, [r3, #12]
 800fad2:	2b02      	cmp	r3, #2
 800fad4:	d00c      	beq.n	800faf0 <HAL_SAI_Init+0x108>
 800fad6:	2b02      	cmp	r3, #2
 800fad8:	d80d      	bhi.n	800faf6 <HAL_SAI_Init+0x10e>
 800fada:	2b00      	cmp	r3, #0
 800fadc:	d002      	beq.n	800fae4 <HAL_SAI_Init+0xfc>
 800fade:	2b01      	cmp	r3, #1
 800fae0:	d003      	beq.n	800faea <HAL_SAI_Init+0x102>
 800fae2:	e008      	b.n	800faf6 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 800fae4:	2300      	movs	r3, #0
 800fae6:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fae8:	e008      	b.n	800fafc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 800faea:	2310      	movs	r3, #16
 800faec:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800faee:	e005      	b.n	800fafc <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 800faf0:	2320      	movs	r3, #32
 800faf2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800faf4:	e002      	b.n	800fafc <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 800faf6:	2300      	movs	r3, #0
 800faf8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fafa:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 800fafc:	687b      	ldr	r3, [r7, #4]
 800fafe:	689b      	ldr	r3, [r3, #8]
 800fb00:	2b05      	cmp	r3, #5
 800fb02:	d832      	bhi.n	800fb6a <HAL_SAI_Init+0x182>
 800fb04:	a201      	add	r2, pc, #4	@ (adr r2, 800fb0c <HAL_SAI_Init+0x124>)
 800fb06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800fb0a:	bf00      	nop
 800fb0c:	0800fb25 	.word	0x0800fb25
 800fb10:	0800fb2b 	.word	0x0800fb2b
 800fb14:	0800fb33 	.word	0x0800fb33
 800fb18:	0800fb3b 	.word	0x0800fb3b
 800fb1c:	0800fb4b 	.word	0x0800fb4b
 800fb20:	0800fb5b 	.word	0x0800fb5b
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 800fb24:	2300      	movs	r3, #0
 800fb26:	61fb      	str	r3, [r7, #28]
      break;
 800fb28:	e022      	b.n	800fb70 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 800fb2a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800fb2e:	61fb      	str	r3, [r7, #28]
      break;
 800fb30:	e01e      	b.n	800fb70 <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fb32:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fb36:	61fb      	str	r3, [r7, #28]
      break;
 800fb38:	e01a      	b.n	800fb70 <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fb3a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fb3e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 800fb40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb42:	f043 0301 	orr.w	r3, r3, #1
 800fb46:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fb48:	e012      	b.n	800fb70 <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fb4a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fb4e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 800fb50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb52:	f043 0302 	orr.w	r3, r3, #2
 800fb56:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fb58:	e00a      	b.n	800fb70 <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 800fb5a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800fb5e:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 800fb60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fb62:	f043 0303 	orr.w	r3, r3, #3
 800fb66:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 800fb68:	e002      	b.n	800fb70 <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 800fb6a:	2300      	movs	r3, #0
 800fb6c:	61fb      	str	r3, [r7, #28]
      break;
 800fb6e:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 800fb70:	69bb      	ldr	r3, [r7, #24]
 800fb72:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800fb74:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 800fb76:	687b      	ldr	r3, [r7, #4]
 800fb78:	6a1b      	ldr	r3, [r3, #32]
 800fb7a:	2b00      	cmp	r3, #0
 800fb7c:	f000 80c5 	beq.w	800fd0a <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 800fb80:	2300      	movs	r3, #0
 800fb82:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 800fb84:	687b      	ldr	r3, [r7, #4]
 800fb86:	681b      	ldr	r3, [r3, #0]
 800fb88:	4a37      	ldr	r2, [pc, #220]	@ (800fc68 <HAL_SAI_Init+0x280>)
 800fb8a:	4293      	cmp	r3, r2
 800fb8c:	d004      	beq.n	800fb98 <HAL_SAI_Init+0x1b0>
 800fb8e:	687b      	ldr	r3, [r7, #4]
 800fb90:	681b      	ldr	r3, [r3, #0]
 800fb92:	4a37      	ldr	r2, [pc, #220]	@ (800fc70 <HAL_SAI_Init+0x288>)
 800fb94:	4293      	cmp	r3, r2
 800fb96:	d106      	bne.n	800fba6 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 800fb98:	f44f 7080 	mov.w	r0, #256	@ 0x100
 800fb9c:	f04f 0100 	mov.w	r1, #0
 800fba0:	f7fe fc2e 	bl	800e400 <HAL_RCCEx_GetPeriphCLKFreq>
 800fba4:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 800fba6:	687b      	ldr	r3, [r7, #4]
 800fba8:	681b      	ldr	r3, [r3, #0]
 800fbaa:	4a33      	ldr	r2, [pc, #204]	@ (800fc78 <HAL_SAI_Init+0x290>)
 800fbac:	4293      	cmp	r3, r2
 800fbae:	d004      	beq.n	800fbba <HAL_SAI_Init+0x1d2>
 800fbb0:	687b      	ldr	r3, [r7, #4]
 800fbb2:	681b      	ldr	r3, [r3, #0]
 800fbb4:	4a31      	ldr	r2, [pc, #196]	@ (800fc7c <HAL_SAI_Init+0x294>)
 800fbb6:	4293      	cmp	r3, r2
 800fbb8:	d106      	bne.n	800fbc8 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 800fbba:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fbbe:	f04f 0100 	mov.w	r1, #0
 800fbc2:	f7fe fc1d 	bl	800e400 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbc6:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 800fbc8:	687b      	ldr	r3, [r7, #4]
 800fbca:	681b      	ldr	r3, [r3, #0]
 800fbcc:	4a2d      	ldr	r2, [pc, #180]	@ (800fc84 <HAL_SAI_Init+0x29c>)
 800fbce:	4293      	cmp	r3, r2
 800fbd0:	d004      	beq.n	800fbdc <HAL_SAI_Init+0x1f4>
 800fbd2:	687b      	ldr	r3, [r7, #4]
 800fbd4:	681b      	ldr	r3, [r3, #0]
 800fbd6:	4a2c      	ldr	r2, [pc, #176]	@ (800fc88 <HAL_SAI_Init+0x2a0>)
 800fbd8:	4293      	cmp	r3, r2
 800fbda:	d106      	bne.n	800fbea <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 800fbdc:	f44f 7000 	mov.w	r0, #512	@ 0x200
 800fbe0:	f04f 0100 	mov.w	r1, #0
 800fbe4:	f7fe fc0c 	bl	800e400 <HAL_RCCEx_GetPeriphCLKFreq>
 800fbe8:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 800fbea:	687b      	ldr	r3, [r7, #4]
 800fbec:	681b      	ldr	r3, [r3, #0]
 800fbee:	4a1f      	ldr	r2, [pc, #124]	@ (800fc6c <HAL_SAI_Init+0x284>)
 800fbf0:	4293      	cmp	r3, r2
 800fbf2:	d106      	bne.n	800fc02 <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 800fbf4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 800fbf8:	f04f 0100 	mov.w	r1, #0
 800fbfc:	f7fe fc00 	bl	800e400 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc00:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 800fc02:	687b      	ldr	r3, [r7, #4]
 800fc04:	681b      	ldr	r3, [r3, #0]
 800fc06:	4a22      	ldr	r2, [pc, #136]	@ (800fc90 <HAL_SAI_Init+0x2a8>)
 800fc08:	4293      	cmp	r3, r2
 800fc0a:	d106      	bne.n	800fc1a <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 800fc0c:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 800fc10:	f04f 0100 	mov.w	r1, #0
 800fc14:	f7fe fbf4 	bl	800e400 <HAL_RCCEx_GetPeriphCLKFreq>
 800fc18:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	699b      	ldr	r3, [r3, #24]
 800fc1e:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800fc22:	d139      	bne.n	800fc98 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fc24:	687b      	ldr	r3, [r7, #4]
 800fc26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc28:	2b04      	cmp	r3, #4
 800fc2a:	d102      	bne.n	800fc32 <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 800fc2c:	2340      	movs	r3, #64	@ 0x40
 800fc2e:	60fb      	str	r3, [r7, #12]
 800fc30:	e00a      	b.n	800fc48 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 800fc32:	687b      	ldr	r3, [r7, #4]
 800fc34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fc36:	2b08      	cmp	r3, #8
 800fc38:	d103      	bne.n	800fc42 <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 800fc3a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800fc3e:	60fb      	str	r3, [r7, #12]
 800fc40:	e002      	b.n	800fc48 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 800fc42:	687b      	ldr	r3, [r7, #4]
 800fc44:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fc46:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 800fc48:	697a      	ldr	r2, [r7, #20]
 800fc4a:	4613      	mov	r3, r2
 800fc4c:	009b      	lsls	r3, r3, #2
 800fc4e:	4413      	add	r3, r2
 800fc50:	005b      	lsls	r3, r3, #1
 800fc52:	4619      	mov	r1, r3
 800fc54:	687b      	ldr	r3, [r7, #4]
 800fc56:	6a1b      	ldr	r3, [r3, #32]
 800fc58:	68fa      	ldr	r2, [r7, #12]
 800fc5a:	fb02 f303 	mul.w	r3, r2, r3
 800fc5e:	fbb1 f3f3 	udiv	r3, r1, r3
 800fc62:	613b      	str	r3, [r7, #16]
 800fc64:	e030      	b.n	800fcc8 <HAL_SAI_Init+0x2e0>
 800fc66:	bf00      	nop
 800fc68:	40015804 	.word	0x40015804
 800fc6c:	58005404 	.word	0x58005404
 800fc70:	40015824 	.word	0x40015824
 800fc74:	40015800 	.word	0x40015800
 800fc78:	40015c04 	.word	0x40015c04
 800fc7c:	40015c24 	.word	0x40015c24
 800fc80:	40015c00 	.word	0x40015c00
 800fc84:	40016004 	.word	0x40016004
 800fc88:	40016024 	.word	0x40016024
 800fc8c:	40016000 	.word	0x40016000
 800fc90:	58005424 	.word	0x58005424
 800fc94:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800fc9c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800fca0:	d101      	bne.n	800fca6 <HAL_SAI_Init+0x2be>
 800fca2:	2302      	movs	r3, #2
 800fca4:	e000      	b.n	800fca8 <HAL_SAI_Init+0x2c0>
 800fca6:	2301      	movs	r3, #1
 800fca8:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 800fcaa:	697a      	ldr	r2, [r7, #20]
 800fcac:	4613      	mov	r3, r2
 800fcae:	009b      	lsls	r3, r3, #2
 800fcb0:	4413      	add	r3, r2
 800fcb2:	005b      	lsls	r3, r3, #1
 800fcb4:	4619      	mov	r1, r3
 800fcb6:	687b      	ldr	r3, [r7, #4]
 800fcb8:	6a1b      	ldr	r3, [r3, #32]
 800fcba:	68ba      	ldr	r2, [r7, #8]
 800fcbc:	fb02 f303 	mul.w	r3, r2, r3
 800fcc0:	021b      	lsls	r3, r3, #8
 800fcc2:	fbb1 f3f3 	udiv	r3, r1, r3
 800fcc6:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 800fcc8:	693b      	ldr	r3, [r7, #16]
 800fcca:	4a95      	ldr	r2, [pc, #596]	@ (800ff20 <HAL_SAI_Init+0x538>)
 800fccc:	fba2 2303 	umull	r2, r3, r2, r3
 800fcd0:	08da      	lsrs	r2, r3, #3
 800fcd2:	687b      	ldr	r3, [r7, #4]
 800fcd4:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 800fcd6:	6939      	ldr	r1, [r7, #16]
 800fcd8:	4b91      	ldr	r3, [pc, #580]	@ (800ff20 <HAL_SAI_Init+0x538>)
 800fcda:	fba3 2301 	umull	r2, r3, r3, r1
 800fcde:	08da      	lsrs	r2, r3, #3
 800fce0:	4613      	mov	r3, r2
 800fce2:	009b      	lsls	r3, r3, #2
 800fce4:	4413      	add	r3, r2
 800fce6:	005b      	lsls	r3, r3, #1
 800fce8:	1aca      	subs	r2, r1, r3
 800fcea:	2a08      	cmp	r2, #8
 800fcec:	d904      	bls.n	800fcf8 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 800fcee:	687b      	ldr	r3, [r7, #4]
 800fcf0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fcf2:	1c5a      	adds	r2, r3, #1
 800fcf4:	687b      	ldr	r3, [r7, #4]
 800fcf6:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fcfc:	2b04      	cmp	r3, #4
 800fcfe:	d104      	bne.n	800fd0a <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 800fd00:	687b      	ldr	r3, [r7, #4]
 800fd02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd04:	085a      	lsrs	r2, r3, #1
 800fd06:	687b      	ldr	r3, [r7, #4]
 800fd08:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	685b      	ldr	r3, [r3, #4]
 800fd0e:	2b00      	cmp	r3, #0
 800fd10:	d003      	beq.n	800fd1a <HAL_SAI_Init+0x332>
 800fd12:	687b      	ldr	r3, [r7, #4]
 800fd14:	685b      	ldr	r3, [r3, #4]
 800fd16:	2b02      	cmp	r3, #2
 800fd18:	d109      	bne.n	800fd2e <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 800fd1a:	687b      	ldr	r3, [r7, #4]
 800fd1c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd1e:	2b01      	cmp	r3, #1
 800fd20:	d101      	bne.n	800fd26 <HAL_SAI_Init+0x33e>
 800fd22:	2300      	movs	r3, #0
 800fd24:	e001      	b.n	800fd2a <HAL_SAI_Init+0x342>
 800fd26:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fd2a:	623b      	str	r3, [r7, #32]
 800fd2c:	e008      	b.n	800fd40 <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 800fd2e:	687b      	ldr	r3, [r7, #4]
 800fd30:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800fd32:	2b01      	cmp	r3, #1
 800fd34:	d102      	bne.n	800fd3c <HAL_SAI_Init+0x354>
 800fd36:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800fd3a:	e000      	b.n	800fd3e <HAL_SAI_Init+0x356>
 800fd3c:	2300      	movs	r3, #0
 800fd3e:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 800fd40:	f7f8 f91a 	bl	8007f78 <HAL_GetREVID>
 800fd44:	4603      	mov	r3, r0
 800fd46:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800fd4a:	d331      	bcc.n	800fdb0 <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fd4c:	687b      	ldr	r3, [r7, #4]
 800fd4e:	681b      	ldr	r3, [r3, #0]
 800fd50:	6819      	ldr	r1, [r3, #0]
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	681a      	ldr	r2, [r3, #0]
 800fd56:	4b73      	ldr	r3, [pc, #460]	@ (800ff24 <HAL_SAI_Init+0x53c>)
 800fd58:	400b      	ands	r3, r1
 800fd5a:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fd5c:	687b      	ldr	r3, [r7, #4]
 800fd5e:	681b      	ldr	r3, [r3, #0]
 800fd60:	6819      	ldr	r1, [r3, #0]
 800fd62:	687b      	ldr	r3, [r7, #4]
 800fd64:	685a      	ldr	r2, [r3, #4]
 800fd66:	687b      	ldr	r3, [r7, #4]
 800fd68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fd6a:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fd6c:	687b      	ldr	r3, [r7, #4]
 800fd6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fd70:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fd72:	687b      	ldr	r3, [r7, #4]
 800fd74:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fd76:	431a      	orrs	r2, r3
 800fd78:	6a3b      	ldr	r3, [r7, #32]
 800fd7a:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800fd7c:	69fb      	ldr	r3, [r7, #28]
 800fd7e:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fd80:	687b      	ldr	r3, [r7, #4]
 800fd82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800fd84:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fd86:	687b      	ldr	r3, [r7, #4]
 800fd88:	695b      	ldr	r3, [r3, #20]
 800fd8a:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fd8c:	687b      	ldr	r3, [r7, #4]
 800fd8e:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fd90:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fd96:	051b      	lsls	r3, r3, #20
 800fd98:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fd9a:	687b      	ldr	r3, [r7, #4]
 800fd9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fd9e:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	691b      	ldr	r3, [r3, #16]
 800fda4:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fda6:	687b      	ldr	r3, [r7, #4]
 800fda8:	681b      	ldr	r3, [r3, #0]
 800fdaa:	430a      	orrs	r2, r1
 800fdac:	601a      	str	r2, [r3, #0]
 800fdae:	e02d      	b.n	800fe0c <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 800fdb0:	687b      	ldr	r3, [r7, #4]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	6819      	ldr	r1, [r3, #0]
 800fdb6:	687b      	ldr	r3, [r7, #4]
 800fdb8:	681a      	ldr	r2, [r3, #0]
 800fdba:	4b5b      	ldr	r3, [pc, #364]	@ (800ff28 <HAL_SAI_Init+0x540>)
 800fdbc:	400b      	ands	r3, r1
 800fdbe:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fdc0:	687b      	ldr	r3, [r7, #4]
 800fdc2:	681b      	ldr	r3, [r3, #0]
 800fdc4:	6819      	ldr	r1, [r3, #0]
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	685a      	ldr	r2, [r3, #4]
 800fdca:	687b      	ldr	r3, [r7, #4]
 800fdcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fdce:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fdd0:	687b      	ldr	r3, [r7, #4]
 800fdd2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fdd4:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 800fdd6:	687b      	ldr	r3, [r7, #4]
 800fdd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800fdda:	431a      	orrs	r2, r3
 800fddc:	6a3b      	ldr	r3, [r7, #32]
 800fdde:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 800fde0:	69fb      	ldr	r3, [r7, #28]
 800fde2:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fde4:	687b      	ldr	r3, [r7, #4]
 800fde6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 800fde8:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fdea:	687b      	ldr	r3, [r7, #4]
 800fdec:	695b      	ldr	r3, [r3, #20]
 800fdee:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fdf0:	687b      	ldr	r3, [r7, #4]
 800fdf2:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 800fdf4:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800fdfa:	051b      	lsls	r3, r3, #20
 800fdfc:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 800fe02:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 800fe04:	687b      	ldr	r3, [r7, #4]
 800fe06:	681b      	ldr	r3, [r3, #0]
 800fe08:	430a      	orrs	r2, r1
 800fe0a:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	681b      	ldr	r3, [r3, #0]
 800fe10:	6859      	ldr	r1, [r3, #4]
 800fe12:	687b      	ldr	r3, [r7, #4]
 800fe14:	681a      	ldr	r2, [r3, #0]
 800fe16:	4b45      	ldr	r3, [pc, #276]	@ (800ff2c <HAL_SAI_Init+0x544>)
 800fe18:	400b      	ands	r3, r1
 800fe1a:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	681b      	ldr	r3, [r3, #0]
 800fe20:	6859      	ldr	r1, [r3, #4]
 800fe22:	687b      	ldr	r3, [r7, #4]
 800fe24:	69da      	ldr	r2, [r3, #28]
 800fe26:	687b      	ldr	r3, [r7, #4]
 800fe28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800fe2a:	431a      	orrs	r2, r3
 800fe2c:	687b      	ldr	r3, [r7, #4]
 800fe2e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800fe30:	431a      	orrs	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	430a      	orrs	r2, r1
 800fe38:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	681b      	ldr	r3, [r3, #0]
 800fe3e:	6899      	ldr	r1, [r3, #8]
 800fe40:	687b      	ldr	r3, [r7, #4]
 800fe42:	681a      	ldr	r2, [r3, #0]
 800fe44:	4b3a      	ldr	r3, [pc, #232]	@ (800ff30 <HAL_SAI_Init+0x548>)
 800fe46:	400b      	ands	r3, r1
 800fe48:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe4a:	687b      	ldr	r3, [r7, #4]
 800fe4c:	681b      	ldr	r3, [r3, #0]
 800fe4e:	6899      	ldr	r1, [r3, #8]
 800fe50:	687b      	ldr	r3, [r7, #4]
 800fe52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800fe54:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe5a:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 800fe5c:	687b      	ldr	r3, [r7, #4]
 800fe5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 800fe60:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 800fe62:	687b      	ldr	r3, [r7, #4]
 800fe64:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 800fe66:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 800fe68:	687b      	ldr	r3, [r7, #4]
 800fe6a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 800fe70:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 800fe72:	687b      	ldr	r3, [r7, #4]
 800fe74:	681b      	ldr	r3, [r3, #0]
 800fe76:	430a      	orrs	r2, r1
 800fe78:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 800fe7a:	687b      	ldr	r3, [r7, #4]
 800fe7c:	681b      	ldr	r3, [r3, #0]
 800fe7e:	68d9      	ldr	r1, [r3, #12]
 800fe80:	687b      	ldr	r3, [r7, #4]
 800fe82:	681a      	ldr	r2, [r3, #0]
 800fe84:	f24f 0320 	movw	r3, #61472	@ 0xf020
 800fe88:	400b      	ands	r3, r1
 800fe8a:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	681b      	ldr	r3, [r3, #0]
 800fe90:	68d9      	ldr	r1, [r3, #12]
 800fe92:	687b      	ldr	r3, [r7, #4]
 800fe94:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800fe9a:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fe9c:	687b      	ldr	r3, [r7, #4]
 800fe9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800fea0:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800fea2:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 800fea4:	687b      	ldr	r3, [r7, #4]
 800fea6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800fea8:	3b01      	subs	r3, #1
 800feaa:	021b      	lsls	r3, r3, #8
 800feac:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 800feae:	687b      	ldr	r3, [r7, #4]
 800feb0:	681b      	ldr	r3, [r3, #0]
 800feb2:	430a      	orrs	r2, r1
 800feb4:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 800feb6:	687b      	ldr	r3, [r7, #4]
 800feb8:	681b      	ldr	r3, [r3, #0]
 800feba:	4a1e      	ldr	r2, [pc, #120]	@ (800ff34 <HAL_SAI_Init+0x54c>)
 800febc:	4293      	cmp	r3, r2
 800febe:	d004      	beq.n	800feca <HAL_SAI_Init+0x4e2>
 800fec0:	687b      	ldr	r3, [r7, #4]
 800fec2:	681b      	ldr	r3, [r3, #0]
 800fec4:	4a1c      	ldr	r2, [pc, #112]	@ (800ff38 <HAL_SAI_Init+0x550>)
 800fec6:	4293      	cmp	r3, r2
 800fec8:	d119      	bne.n	800fefe <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 800feca:	69bb      	ldr	r3, [r7, #24]
 800fecc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fece:	f023 0201 	bic.w	r2, r3, #1
 800fed2:	69bb      	ldr	r3, [r7, #24]
 800fed4:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 800fed6:	687b      	ldr	r3, [r7, #4]
 800fed8:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 800fedc:	2b01      	cmp	r3, #1
 800fede:	d10e      	bne.n	800fefe <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 800fee4:	687b      	ldr	r3, [r7, #4]
 800fee6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800fee8:	3b01      	subs	r3, #1
 800feea:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 800feec:	431a      	orrs	r2, r3
 800feee:	69bb      	ldr	r3, [r7, #24]
 800fef0:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 800fef2:	69bb      	ldr	r3, [r7, #24]
 800fef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800fef6:	f043 0201 	orr.w	r2, r3, #1
 800fefa:	69bb      	ldr	r3, [r7, #24]
 800fefc:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800fefe:	687b      	ldr	r3, [r7, #4]
 800ff00:	2200      	movs	r2, #0
 800ff02:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 800ff06:	687b      	ldr	r3, [r7, #4]
 800ff08:	2201      	movs	r2, #1
 800ff0a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 800ff0e:	687b      	ldr	r3, [r7, #4]
 800ff10:	2200      	movs	r2, #0
 800ff12:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 800ff16:	2300      	movs	r3, #0
}
 800ff18:	4618      	mov	r0, r3
 800ff1a:	3728      	adds	r7, #40	@ 0x28
 800ff1c:	46bd      	mov	sp, r7
 800ff1e:	bd80      	pop	{r7, pc}
 800ff20:	cccccccd 	.word	0xcccccccd
 800ff24:	f005c010 	.word	0xf005c010
 800ff28:	f805c010 	.word	0xf805c010
 800ff2c:	ffff1ff0 	.word	0xffff1ff0
 800ff30:	fff88000 	.word	0xfff88000
 800ff34:	40015804 	.word	0x40015804
 800ff38:	58005404 	.word	0x58005404

0800ff3c <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 800ff3c:	b580      	push	{r7, lr}
 800ff3e:	b086      	sub	sp, #24
 800ff40:	af00      	add	r7, sp, #0
 800ff42:	60f8      	str	r0, [r7, #12]
 800ff44:	60b9      	str	r1, [r7, #8]
 800ff46:	4613      	mov	r3, r2
 800ff48:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 800ff4a:	f7f7 ffe5 	bl	8007f18 <HAL_GetTick>
 800ff4e:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 800ff50:	68bb      	ldr	r3, [r7, #8]
 800ff52:	2b00      	cmp	r3, #0
 800ff54:	d002      	beq.n	800ff5c <HAL_SAI_Transmit_DMA+0x20>
 800ff56:	88fb      	ldrh	r3, [r7, #6]
 800ff58:	2b00      	cmp	r3, #0
 800ff5a:	d101      	bne.n	800ff60 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 800ff5c:	2301      	movs	r3, #1
 800ff5e:	e098      	b.n	8010092 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 800ff60:	68fb      	ldr	r3, [r7, #12]
 800ff62:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800ff66:	b2db      	uxtb	r3, r3
 800ff68:	2b01      	cmp	r3, #1
 800ff6a:	f040 8091 	bne.w	8010090 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 800ff6e:	68fb      	ldr	r3, [r7, #12]
 800ff70:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 800ff74:	2b01      	cmp	r3, #1
 800ff76:	d101      	bne.n	800ff7c <HAL_SAI_Transmit_DMA+0x40>
 800ff78:	2302      	movs	r3, #2
 800ff7a:	e08a      	b.n	8010092 <HAL_SAI_Transmit_DMA+0x156>
 800ff7c:	68fb      	ldr	r3, [r7, #12]
 800ff7e:	2201      	movs	r2, #1
 800ff80:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 800ff84:	68fb      	ldr	r3, [r7, #12]
 800ff86:	68ba      	ldr	r2, [r7, #8]
 800ff88:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 800ff8a:	68fb      	ldr	r3, [r7, #12]
 800ff8c:	88fa      	ldrh	r2, [r7, #6]
 800ff8e:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 800ff92:	68fb      	ldr	r3, [r7, #12]
 800ff94:	88fa      	ldrh	r2, [r7, #6]
 800ff96:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 800ff9a:	68fb      	ldr	r3, [r7, #12]
 800ff9c:	2200      	movs	r2, #0
 800ff9e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 800ffa2:	68fb      	ldr	r3, [r7, #12]
 800ffa4:	2212      	movs	r2, #18
 800ffa6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 800ffaa:	68fb      	ldr	r3, [r7, #12]
 800ffac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffb0:	4a3a      	ldr	r2, [pc, #232]	@ (801009c <HAL_SAI_Transmit_DMA+0x160>)
 800ffb2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 800ffb4:	68fb      	ldr	r3, [r7, #12]
 800ffb6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffba:	4a39      	ldr	r2, [pc, #228]	@ (80100a0 <HAL_SAI_Transmit_DMA+0x164>)
 800ffbc:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 800ffbe:	68fb      	ldr	r3, [r7, #12]
 800ffc0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffc4:	4a37      	ldr	r2, [pc, #220]	@ (80100a4 <HAL_SAI_Transmit_DMA+0x168>)
 800ffc6:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800ffce:	2200      	movs	r2, #0
 800ffd0:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 800ffd2:	68fb      	ldr	r3, [r7, #12]
 800ffd4:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 800ffd8:	68fb      	ldr	r3, [r7, #12]
 800ffda:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 800ffdc:	4619      	mov	r1, r3
 800ffde:	68fb      	ldr	r3, [r7, #12]
 800ffe0:	681b      	ldr	r3, [r3, #0]
 800ffe2:	331c      	adds	r3, #28
 800ffe4:	461a      	mov	r2, r3
 800ffe6:	68fb      	ldr	r3, [r7, #12]
 800ffe8:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 800ffec:	f7f8 fe7a 	bl	8008ce4 <HAL_DMA_Start_IT>
 800fff0:	4603      	mov	r3, r0
 800fff2:	2b00      	cmp	r3, #0
 800fff4:	d005      	beq.n	8010002 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 800fff6:	68fb      	ldr	r3, [r7, #12]
 800fff8:	2200      	movs	r2, #0
 800fffa:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 800fffe:	2301      	movs	r3, #1
 8010000:	e047      	b.n	8010092 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010002:	2100      	movs	r1, #0
 8010004:	68f8      	ldr	r0, [r7, #12]
 8010006:	f000 f8e3 	bl	80101d0 <SAI_InterruptFlag>
 801000a:	4601      	mov	r1, r0
 801000c:	68fb      	ldr	r3, [r7, #12]
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	691a      	ldr	r2, [r3, #16]
 8010012:	68fb      	ldr	r3, [r7, #12]
 8010014:	681b      	ldr	r3, [r3, #0]
 8010016:	430a      	orrs	r2, r1
 8010018:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801001a:	68fb      	ldr	r3, [r7, #12]
 801001c:	681b      	ldr	r3, [r3, #0]
 801001e:	681a      	ldr	r2, [r3, #0]
 8010020:	68fb      	ldr	r3, [r7, #12]
 8010022:	681b      	ldr	r3, [r3, #0]
 8010024:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8010028:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801002a:	e015      	b.n	8010058 <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 801002c:	f7f7 ff74 	bl	8007f18 <HAL_GetTick>
 8010030:	4602      	mov	r2, r0
 8010032:	697b      	ldr	r3, [r7, #20]
 8010034:	1ad3      	subs	r3, r2, r3
 8010036:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801003a:	d90d      	bls.n	8010058 <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801003c:	68fb      	ldr	r3, [r7, #12]
 801003e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010042:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8010046:	68fb      	ldr	r3, [r7, #12]
 8010048:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 801004c:	68fb      	ldr	r3, [r7, #12]
 801004e:	2200      	movs	r2, #0
 8010050:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 8010054:	2303      	movs	r3, #3
 8010056:	e01c      	b.n	8010092 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 8010058:	68fb      	ldr	r3, [r7, #12]
 801005a:	681b      	ldr	r3, [r3, #0]
 801005c:	695b      	ldr	r3, [r3, #20]
 801005e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 8010062:	2b00      	cmp	r3, #0
 8010064:	d0e2      	beq.n	801002c <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 8010066:	68fb      	ldr	r3, [r7, #12]
 8010068:	681b      	ldr	r3, [r3, #0]
 801006a:	681b      	ldr	r3, [r3, #0]
 801006c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010070:	2b00      	cmp	r3, #0
 8010072:	d107      	bne.n	8010084 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 8010074:	68fb      	ldr	r3, [r7, #12]
 8010076:	681b      	ldr	r3, [r3, #0]
 8010078:	681a      	ldr	r2, [r3, #0]
 801007a:	68fb      	ldr	r3, [r7, #12]
 801007c:	681b      	ldr	r3, [r3, #0]
 801007e:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 8010082:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 8010084:	68fb      	ldr	r3, [r7, #12]
 8010086:	2200      	movs	r2, #0
 8010088:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 801008c:	2300      	movs	r3, #0
 801008e:	e000      	b.n	8010092 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 8010090:	2302      	movs	r3, #2
  }
}
 8010092:	4618      	mov	r0, r3
 8010094:	3718      	adds	r7, #24
 8010096:	46bd      	mov	sp, r7
 8010098:	bd80      	pop	{r7, pc}
 801009a:	bf00      	nop
 801009c:	08010315 	.word	0x08010315
 80100a0:	080102b5 	.word	0x080102b5
 80100a4:	080103ad 	.word	0x080103ad

080100a8 <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b084      	sub	sp, #16
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	60f8      	str	r0, [r7, #12]
 80100b0:	60b9      	str	r1, [r7, #8]
 80100b2:	4613      	mov	r3, r2
 80100b4:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 80100b6:	68bb      	ldr	r3, [r7, #8]
 80100b8:	2b00      	cmp	r3, #0
 80100ba:	d002      	beq.n	80100c2 <HAL_SAI_Receive_DMA+0x1a>
 80100bc:	88fb      	ldrh	r3, [r7, #6]
 80100be:	2b00      	cmp	r3, #0
 80100c0:	d101      	bne.n	80100c6 <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 80100c2:	2301      	movs	r3, #1
 80100c4:	e079      	b.n	80101ba <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 80100c6:	68fb      	ldr	r3, [r7, #12]
 80100c8:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 80100cc:	b2db      	uxtb	r3, r3
 80100ce:	2b01      	cmp	r3, #1
 80100d0:	d172      	bne.n	80101b8 <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 80100d2:	68fb      	ldr	r3, [r7, #12]
 80100d4:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 80100d8:	2b01      	cmp	r3, #1
 80100da:	d101      	bne.n	80100e0 <HAL_SAI_Receive_DMA+0x38>
 80100dc:	2302      	movs	r3, #2
 80100de:	e06c      	b.n	80101ba <HAL_SAI_Receive_DMA+0x112>
 80100e0:	68fb      	ldr	r3, [r7, #12]
 80100e2:	2201      	movs	r2, #1
 80100e4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 80100e8:	68fb      	ldr	r3, [r7, #12]
 80100ea:	68ba      	ldr	r2, [r7, #8]
 80100ec:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 80100ee:	68fb      	ldr	r3, [r7, #12]
 80100f0:	88fa      	ldrh	r2, [r7, #6]
 80100f2:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 80100f6:	68fb      	ldr	r3, [r7, #12]
 80100f8:	88fa      	ldrh	r2, [r7, #6]
 80100fa:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 80100fe:	68fb      	ldr	r3, [r7, #12]
 8010100:	2200      	movs	r2, #0
 8010102:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 8010106:	68fb      	ldr	r3, [r7, #12]
 8010108:	2222      	movs	r2, #34	@ 0x22
 801010a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 801010e:	68fb      	ldr	r3, [r7, #12]
 8010110:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010114:	4a2b      	ldr	r2, [pc, #172]	@ (80101c4 <HAL_SAI_Receive_DMA+0x11c>)
 8010116:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 8010118:	68fb      	ldr	r3, [r7, #12]
 801011a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801011e:	4a2a      	ldr	r2, [pc, #168]	@ (80101c8 <HAL_SAI_Receive_DMA+0x120>)
 8010120:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 8010122:	68fb      	ldr	r3, [r7, #12]
 8010124:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010128:	4a28      	ldr	r2, [pc, #160]	@ (80101cc <HAL_SAI_Receive_DMA+0x124>)
 801012a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 801012c:	68fb      	ldr	r3, [r7, #12]
 801012e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8010132:	2200      	movs	r2, #0
 8010134:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 8010136:	68fb      	ldr	r3, [r7, #12]
 8010138:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 801013c:	68fb      	ldr	r3, [r7, #12]
 801013e:	681b      	ldr	r3, [r3, #0]
 8010140:	331c      	adds	r3, #28
 8010142:	4619      	mov	r1, r3
 8010144:	68fb      	ldr	r3, [r7, #12]
 8010146:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8010148:	461a      	mov	r2, r3
 801014a:	68fb      	ldr	r3, [r7, #12]
 801014c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 8010150:	f7f8 fdc8 	bl	8008ce4 <HAL_DMA_Start_IT>
 8010154:	4603      	mov	r3, r0
 8010156:	2b00      	cmp	r3, #0
 8010158:	d005      	beq.n	8010166 <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 801015a:	68fb      	ldr	r3, [r7, #12]
 801015c:	2200      	movs	r2, #0
 801015e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 8010162:	2301      	movs	r3, #1
 8010164:	e029      	b.n	80101ba <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010166:	2100      	movs	r1, #0
 8010168:	68f8      	ldr	r0, [r7, #12]
 801016a:	f000 f831 	bl	80101d0 <SAI_InterruptFlag>
 801016e:	4601      	mov	r1, r0
 8010170:	68fb      	ldr	r3, [r7, #12]
 8010172:	681b      	ldr	r3, [r3, #0]
 8010174:	691a      	ldr	r2, [r3, #16]
 8010176:	68fb      	ldr	r3, [r7, #12]
 8010178:	681b      	ldr	r3, [r3, #0]
 801017a:	430a      	orrs	r2, r1
 801017c:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801017e:	68fb      	ldr	r3, [r7, #12]
 8010180:	681b      	ldr	r3, [r3, #0]
 8010182:	681a      	ldr	r2, [r3, #0]
 8010184:	68fb      	ldr	r3, [r7, #12]
 8010186:	681b      	ldr	r3, [r3, #0]
 8010188:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801018c:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 801018e:	68fb      	ldr	r3, [r7, #12]
 8010190:	681b      	ldr	r3, [r3, #0]
 8010192:	681b      	ldr	r3, [r3, #0]
 8010194:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010198:	2b00      	cmp	r3, #0
 801019a:	d107      	bne.n	80101ac <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 801019c:	68fb      	ldr	r3, [r7, #12]
 801019e:	681b      	ldr	r3, [r3, #0]
 80101a0:	681a      	ldr	r2, [r3, #0]
 80101a2:	68fb      	ldr	r3, [r7, #12]
 80101a4:	681b      	ldr	r3, [r3, #0]
 80101a6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80101aa:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 80101ac:	68fb      	ldr	r3, [r7, #12]
 80101ae:	2200      	movs	r2, #0
 80101b0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 80101b4:	2300      	movs	r3, #0
 80101b6:	e000      	b.n	80101ba <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 80101b8:	2302      	movs	r3, #2
  }
}
 80101ba:	4618      	mov	r0, r3
 80101bc:	3710      	adds	r7, #16
 80101be:	46bd      	mov	sp, r7
 80101c0:	bd80      	pop	{r7, pc}
 80101c2:	bf00      	nop
 80101c4:	08010391 	.word	0x08010391
 80101c8:	08010331 	.word	0x08010331
 80101cc:	080103ad 	.word	0x080103ad

080101d0 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 80101d0:	b480      	push	{r7}
 80101d2:	b085      	sub	sp, #20
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	460b      	mov	r3, r1
 80101da:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 80101dc:	2301      	movs	r3, #1
 80101de:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 80101e0:	78fb      	ldrb	r3, [r7, #3]
 80101e2:	2b01      	cmp	r3, #1
 80101e4:	d103      	bne.n	80101ee <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 80101e6:	68fb      	ldr	r3, [r7, #12]
 80101e8:	f043 0308 	orr.w	r3, r3, #8
 80101ec:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80101ee:	687b      	ldr	r3, [r7, #4]
 80101f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80101f2:	2b08      	cmp	r3, #8
 80101f4:	d10b      	bne.n	801020e <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 80101fa:	2b03      	cmp	r3, #3
 80101fc:	d003      	beq.n	8010206 <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 80101fe:	687b      	ldr	r3, [r7, #4]
 8010200:	685b      	ldr	r3, [r3, #4]
 8010202:	2b01      	cmp	r3, #1
 8010204:	d103      	bne.n	801020e <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 8010206:	68fb      	ldr	r3, [r7, #12]
 8010208:	f043 0310 	orr.w	r3, r3, #16
 801020c:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801020e:	687b      	ldr	r3, [r7, #4]
 8010210:	685b      	ldr	r3, [r3, #4]
 8010212:	2b03      	cmp	r3, #3
 8010214:	d003      	beq.n	801021e <SAI_InterruptFlag+0x4e>
 8010216:	687b      	ldr	r3, [r7, #4]
 8010218:	685b      	ldr	r3, [r3, #4]
 801021a:	2b02      	cmp	r3, #2
 801021c:	d104      	bne.n	8010228 <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 801021e:	68fb      	ldr	r3, [r7, #12]
 8010220:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 8010224:	60fb      	str	r3, [r7, #12]
 8010226:	e003      	b.n	8010230 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 8010228:	68fb      	ldr	r3, [r7, #12]
 801022a:	f043 0304 	orr.w	r3, r3, #4
 801022e:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 8010230:	68fb      	ldr	r3, [r7, #12]
}
 8010232:	4618      	mov	r0, r3
 8010234:	3714      	adds	r7, #20
 8010236:	46bd      	mov	sp, r7
 8010238:	f85d 7b04 	ldr.w	r7, [sp], #4
 801023c:	4770      	bx	lr
	...

08010240 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8010240:	b480      	push	{r7}
 8010242:	b085      	sub	sp, #20
 8010244:	af00      	add	r7, sp, #0
 8010246:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8010248:	4b18      	ldr	r3, [pc, #96]	@ (80102ac <SAI_Disable+0x6c>)
 801024a:	681b      	ldr	r3, [r3, #0]
 801024c:	4a18      	ldr	r2, [pc, #96]	@ (80102b0 <SAI_Disable+0x70>)
 801024e:	fba2 2303 	umull	r2, r3, r2, r3
 8010252:	0b1b      	lsrs	r3, r3, #12
 8010254:	009b      	lsls	r3, r3, #2
 8010256:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8010258:	2300      	movs	r3, #0
 801025a:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 801025c:	687b      	ldr	r3, [r7, #4]
 801025e:	681b      	ldr	r3, [r3, #0]
 8010260:	681a      	ldr	r2, [r3, #0]
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	681b      	ldr	r3, [r3, #0]
 8010266:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801026a:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 801026c:	68fb      	ldr	r3, [r7, #12]
 801026e:	2b00      	cmp	r3, #0
 8010270:	d10a      	bne.n	8010288 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8010272:	687b      	ldr	r3, [r7, #4]
 8010274:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8010278:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801027c:	687b      	ldr	r3, [r7, #4]
 801027e:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 8010282:	2303      	movs	r3, #3
 8010284:	72fb      	strb	r3, [r7, #11]
      break;
 8010286:	e009      	b.n	801029c <SAI_Disable+0x5c>
    }
    count--;
 8010288:	68fb      	ldr	r3, [r7, #12]
 801028a:	3b01      	subs	r3, #1
 801028c:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801028e:	687b      	ldr	r3, [r7, #4]
 8010290:	681b      	ldr	r3, [r3, #0]
 8010292:	681b      	ldr	r3, [r3, #0]
 8010294:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8010298:	2b00      	cmp	r3, #0
 801029a:	d1e7      	bne.n	801026c <SAI_Disable+0x2c>

  return status;
 801029c:	7afb      	ldrb	r3, [r7, #11]
}
 801029e:	4618      	mov	r0, r3
 80102a0:	3714      	adds	r7, #20
 80102a2:	46bd      	mov	sp, r7
 80102a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80102a8:	4770      	bx	lr
 80102aa:	bf00      	nop
 80102ac:	2400047c 	.word	0x2400047c
 80102b0:	95cbec1b 	.word	0x95cbec1b

080102b4 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 80102b4:	b580      	push	{r7, lr}
 80102b6:	b084      	sub	sp, #16
 80102b8:	af00      	add	r7, sp, #0
 80102ba:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80102bc:	687b      	ldr	r3, [r7, #4]
 80102be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80102c0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 80102c2:	687b      	ldr	r3, [r7, #4]
 80102c4:	69db      	ldr	r3, [r3, #28]
 80102c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80102ca:	d01c      	beq.n	8010306 <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 80102cc:	68fb      	ldr	r3, [r7, #12]
 80102ce:	2200      	movs	r2, #0
 80102d0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 80102d4:	68fb      	ldr	r3, [r7, #12]
 80102d6:	681b      	ldr	r3, [r3, #0]
 80102d8:	681a      	ldr	r2, [r3, #0]
 80102da:	68fb      	ldr	r3, [r7, #12]
 80102dc:	681b      	ldr	r3, [r3, #0]
 80102de:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80102e2:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 80102e4:	2100      	movs	r1, #0
 80102e6:	68f8      	ldr	r0, [r7, #12]
 80102e8:	f7ff ff72 	bl	80101d0 <SAI_InterruptFlag>
 80102ec:	4603      	mov	r3, r0
 80102ee:	43d9      	mvns	r1, r3
 80102f0:	68fb      	ldr	r3, [r7, #12]
 80102f2:	681b      	ldr	r3, [r3, #0]
 80102f4:	691a      	ldr	r2, [r3, #16]
 80102f6:	68fb      	ldr	r3, [r7, #12]
 80102f8:	681b      	ldr	r3, [r3, #0]
 80102fa:	400a      	ands	r2, r1
 80102fc:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 80102fe:	68fb      	ldr	r3, [r7, #12]
 8010300:	2201      	movs	r2, #1
 8010302:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 8010306:	68f8      	ldr	r0, [r7, #12]
 8010308:	f7f3 fcac 	bl	8003c64 <HAL_SAI_TxCpltCallback>
#endif
}
 801030c:	bf00      	nop
 801030e:	3710      	adds	r7, #16
 8010310:	46bd      	mov	sp, r7
 8010312:	bd80      	pop	{r7, pc}

08010314 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010314:	b580      	push	{r7, lr}
 8010316:	b084      	sub	sp, #16
 8010318:	af00      	add	r7, sp, #0
 801031a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801031c:	687b      	ldr	r3, [r7, #4]
 801031e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8010320:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 8010322:	68f8      	ldr	r0, [r7, #12]
 8010324:	f7f3 fca9 	bl	8003c7a <HAL_SAI_TxHalfCpltCallback>
#endif
}
 8010328:	bf00      	nop
 801032a:	3710      	adds	r7, #16
 801032c:	46bd      	mov	sp, r7
 801032e:	bd80      	pop	{r7, pc}

08010330 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 8010330:	b580      	push	{r7, lr}
 8010332:	b084      	sub	sp, #16
 8010334:	af00      	add	r7, sp, #0
 8010336:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010338:	687b      	ldr	r3, [r7, #4]
 801033a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801033c:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801033e:	687b      	ldr	r3, [r7, #4]
 8010340:	69db      	ldr	r3, [r3, #28]
 8010342:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8010346:	d01c      	beq.n	8010382 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 8010348:	68fb      	ldr	r3, [r7, #12]
 801034a:	681b      	ldr	r3, [r3, #0]
 801034c:	681a      	ldr	r2, [r3, #0]
 801034e:	68fb      	ldr	r3, [r7, #12]
 8010350:	681b      	ldr	r3, [r3, #0]
 8010352:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8010356:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 8010358:	68fb      	ldr	r3, [r7, #12]
 801035a:	2200      	movs	r2, #0
 801035c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 8010360:	2100      	movs	r1, #0
 8010362:	68f8      	ldr	r0, [r7, #12]
 8010364:	f7ff ff34 	bl	80101d0 <SAI_InterruptFlag>
 8010368:	4603      	mov	r3, r0
 801036a:	43d9      	mvns	r1, r3
 801036c:	68fb      	ldr	r3, [r7, #12]
 801036e:	681b      	ldr	r3, [r3, #0]
 8010370:	691a      	ldr	r2, [r3, #16]
 8010372:	68fb      	ldr	r3, [r7, #12]
 8010374:	681b      	ldr	r3, [r3, #0]
 8010376:	400a      	ands	r2, r1
 8010378:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801037a:	68fb      	ldr	r3, [r7, #12]
 801037c:	2201      	movs	r2, #1
 801037e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 8010382:	68f8      	ldr	r0, [r7, #12]
 8010384:	f7f4 f8a2 	bl	80044cc <HAL_SAI_RxCpltCallback>
#endif
}
 8010388:	bf00      	nop
 801038a:	3710      	adds	r7, #16
 801038c:	46bd      	mov	sp, r7
 801038e:	bd80      	pop	{r7, pc}

08010390 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8010390:	b580      	push	{r7, lr}
 8010392:	b084      	sub	sp, #16
 8010394:	af00      	add	r7, sp, #0
 8010396:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8010398:	687b      	ldr	r3, [r7, #4]
 801039a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801039c:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 801039e:	68f8      	ldr	r0, [r7, #12]
 80103a0:	f7f4 f87e 	bl	80044a0 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 80103a4:	bf00      	nop
 80103a6:	3710      	adds	r7, #16
 80103a8:	46bd      	mov	sp, r7
 80103aa:	bd80      	pop	{r7, pc}

080103ac <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 80103ac:	b580      	push	{r7, lr}
 80103ae:	b084      	sub	sp, #16
 80103b0:	af00      	add	r7, sp, #0
 80103b2:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80103b4:	687b      	ldr	r3, [r7, #4]
 80103b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80103b8:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 80103ba:	6878      	ldr	r0, [r7, #4]
 80103bc:	f7f9 fe26 	bl	800a00c <HAL_DMA_GetError>
 80103c0:	4603      	mov	r3, r0
 80103c2:	2b02      	cmp	r3, #2
 80103c4:	d01d      	beq.n	8010402 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 80103c6:	68fb      	ldr	r3, [r7, #12]
 80103c8:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80103cc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80103d0:	68fb      	ldr	r3, [r7, #12]
 80103d2:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 80103d6:	68fb      	ldr	r3, [r7, #12]
 80103d8:	681b      	ldr	r3, [r3, #0]
 80103da:	681a      	ldr	r2, [r3, #0]
 80103dc:	68fb      	ldr	r3, [r7, #12]
 80103de:	681b      	ldr	r3, [r3, #0]
 80103e0:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 80103e4:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 80103e6:	68f8      	ldr	r0, [r7, #12]
 80103e8:	f7ff ff2a 	bl	8010240 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 80103ec:	68fb      	ldr	r3, [r7, #12]
 80103ee:	2201      	movs	r2, #1
 80103f0:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 80103f4:	68fb      	ldr	r3, [r7, #12]
 80103f6:	2200      	movs	r2, #0
 80103f8:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 80103fc:	68f8      	ldr	r0, [r7, #12]
 80103fe:	f7f3 fc47 	bl	8003c90 <HAL_SAI_ErrorCallback>
#endif
  }
}
 8010402:	bf00      	nop
 8010404:	3710      	adds	r7, #16
 8010406:	46bd      	mov	sp, r7
 8010408:	bd80      	pop	{r7, pc}
	...

0801040c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 801040c:	b480      	push	{r7}
 801040e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8010410:	4b3d      	ldr	r3, [pc, #244]	@ (8010508 <SystemInit+0xfc>)
 8010412:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8010416:	4a3c      	ldr	r2, [pc, #240]	@ (8010508 <SystemInit+0xfc>)
 8010418:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801041c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8010420:	4b39      	ldr	r3, [pc, #228]	@ (8010508 <SystemInit+0xfc>)
 8010422:	691b      	ldr	r3, [r3, #16]
 8010424:	4a38      	ldr	r2, [pc, #224]	@ (8010508 <SystemInit+0xfc>)
 8010426:	f043 0310 	orr.w	r3, r3, #16
 801042a:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 801042c:	4b37      	ldr	r3, [pc, #220]	@ (801050c <SystemInit+0x100>)
 801042e:	681b      	ldr	r3, [r3, #0]
 8010430:	f003 030f 	and.w	r3, r3, #15
 8010434:	2b06      	cmp	r3, #6
 8010436:	d807      	bhi.n	8010448 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8010438:	4b34      	ldr	r3, [pc, #208]	@ (801050c <SystemInit+0x100>)
 801043a:	681b      	ldr	r3, [r3, #0]
 801043c:	f023 030f 	bic.w	r3, r3, #15
 8010440:	4a32      	ldr	r2, [pc, #200]	@ (801050c <SystemInit+0x100>)
 8010442:	f043 0307 	orr.w	r3, r3, #7
 8010446:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 8010448:	4b31      	ldr	r3, [pc, #196]	@ (8010510 <SystemInit+0x104>)
 801044a:	681b      	ldr	r3, [r3, #0]
 801044c:	4a30      	ldr	r2, [pc, #192]	@ (8010510 <SystemInit+0x104>)
 801044e:	f043 0301 	orr.w	r3, r3, #1
 8010452:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 8010454:	4b2e      	ldr	r3, [pc, #184]	@ (8010510 <SystemInit+0x104>)
 8010456:	2200      	movs	r2, #0
 8010458:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 801045a:	4b2d      	ldr	r3, [pc, #180]	@ (8010510 <SystemInit+0x104>)
 801045c:	681a      	ldr	r2, [r3, #0]
 801045e:	492c      	ldr	r1, [pc, #176]	@ (8010510 <SystemInit+0x104>)
 8010460:	4b2c      	ldr	r3, [pc, #176]	@ (8010514 <SystemInit+0x108>)
 8010462:	4013      	ands	r3, r2
 8010464:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8010466:	4b29      	ldr	r3, [pc, #164]	@ (801050c <SystemInit+0x100>)
 8010468:	681b      	ldr	r3, [r3, #0]
 801046a:	f003 0308 	and.w	r3, r3, #8
 801046e:	2b00      	cmp	r3, #0
 8010470:	d007      	beq.n	8010482 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8010472:	4b26      	ldr	r3, [pc, #152]	@ (801050c <SystemInit+0x100>)
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	f023 030f 	bic.w	r3, r3, #15
 801047a:	4a24      	ldr	r2, [pc, #144]	@ (801050c <SystemInit+0x100>)
 801047c:	f043 0307 	orr.w	r3, r3, #7
 8010480:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8010482:	4b23      	ldr	r3, [pc, #140]	@ (8010510 <SystemInit+0x104>)
 8010484:	2200      	movs	r2, #0
 8010486:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8010488:	4b21      	ldr	r3, [pc, #132]	@ (8010510 <SystemInit+0x104>)
 801048a:	2200      	movs	r2, #0
 801048c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 801048e:	4b20      	ldr	r3, [pc, #128]	@ (8010510 <SystemInit+0x104>)
 8010490:	2200      	movs	r2, #0
 8010492:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8010494:	4b1e      	ldr	r3, [pc, #120]	@ (8010510 <SystemInit+0x104>)
 8010496:	4a20      	ldr	r2, [pc, #128]	@ (8010518 <SystemInit+0x10c>)
 8010498:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 801049a:	4b1d      	ldr	r3, [pc, #116]	@ (8010510 <SystemInit+0x104>)
 801049c:	4a1f      	ldr	r2, [pc, #124]	@ (801051c <SystemInit+0x110>)
 801049e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 80104a0:	4b1b      	ldr	r3, [pc, #108]	@ (8010510 <SystemInit+0x104>)
 80104a2:	4a1f      	ldr	r2, [pc, #124]	@ (8010520 <SystemInit+0x114>)
 80104a4:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80104a6:	4b1a      	ldr	r3, [pc, #104]	@ (8010510 <SystemInit+0x104>)
 80104a8:	2200      	movs	r2, #0
 80104aa:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 80104ac:	4b18      	ldr	r3, [pc, #96]	@ (8010510 <SystemInit+0x104>)
 80104ae:	4a1c      	ldr	r2, [pc, #112]	@ (8010520 <SystemInit+0x114>)
 80104b0:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 80104b2:	4b17      	ldr	r3, [pc, #92]	@ (8010510 <SystemInit+0x104>)
 80104b4:	2200      	movs	r2, #0
 80104b6:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 80104b8:	4b15      	ldr	r3, [pc, #84]	@ (8010510 <SystemInit+0x104>)
 80104ba:	4a19      	ldr	r2, [pc, #100]	@ (8010520 <SystemInit+0x114>)
 80104bc:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80104be:	4b14      	ldr	r3, [pc, #80]	@ (8010510 <SystemInit+0x104>)
 80104c0:	2200      	movs	r2, #0
 80104c2:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 80104c4:	4b12      	ldr	r3, [pc, #72]	@ (8010510 <SystemInit+0x104>)
 80104c6:	681b      	ldr	r3, [r3, #0]
 80104c8:	4a11      	ldr	r2, [pc, #68]	@ (8010510 <SystemInit+0x104>)
 80104ca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80104ce:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 80104d0:	4b0f      	ldr	r3, [pc, #60]	@ (8010510 <SystemInit+0x104>)
 80104d2:	2200      	movs	r2, #0
 80104d4:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 80104d6:	4b13      	ldr	r3, [pc, #76]	@ (8010524 <SystemInit+0x118>)
 80104d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80104da:	4a12      	ldr	r2, [pc, #72]	@ (8010524 <SystemInit+0x118>)
 80104dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80104e0:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 80104e2:	4b11      	ldr	r3, [pc, #68]	@ (8010528 <SystemInit+0x11c>)
 80104e4:	681a      	ldr	r2, [r3, #0]
 80104e6:	4b11      	ldr	r3, [pc, #68]	@ (801052c <SystemInit+0x120>)
 80104e8:	4013      	ands	r3, r2
 80104ea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80104ee:	d202      	bcs.n	80104f6 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 80104f0:	4b0f      	ldr	r3, [pc, #60]	@ (8010530 <SystemInit+0x124>)
 80104f2:	2201      	movs	r2, #1
 80104f4:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 80104f6:	4b0f      	ldr	r3, [pc, #60]	@ (8010534 <SystemInit+0x128>)
 80104f8:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 80104fc:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 80104fe:	bf00      	nop
 8010500:	46bd      	mov	sp, r7
 8010502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010506:	4770      	bx	lr
 8010508:	e000ed00 	.word	0xe000ed00
 801050c:	52002000 	.word	0x52002000
 8010510:	58024400 	.word	0x58024400
 8010514:	eaf6ed7f 	.word	0xeaf6ed7f
 8010518:	02020200 	.word	0x02020200
 801051c:	01ff0000 	.word	0x01ff0000
 8010520:	01010280 	.word	0x01010280
 8010524:	580000c0 	.word	0x580000c0
 8010528:	5c001000 	.word	0x5c001000
 801052c:	ffff0000 	.word	0xffff0000
 8010530:	51008108 	.word	0x51008108
 8010534:	52004000 	.word	0x52004000

08010538 <D16_GENERIC>:
 8010538:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801053c:	b087      	sub	sp, #28
 801053e:	6993      	ldr	r3, [r2, #24]
 8010540:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8010542:	9101      	str	r1, [sp, #4]
 8010544:	68d1      	ldr	r1, [r2, #12]
 8010546:	9304      	str	r3, [sp, #16]
 8010548:	9105      	str	r1, [sp, #20]
 801054a:	6914      	ldr	r4, [r2, #16]
 801054c:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8010550:	69d3      	ldr	r3, [r2, #28]
 8010552:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8010556:	f8d2 8030 	ldr.w	r8, [r2, #48]	@ 0x30
 801055a:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 801055c:	2d00      	cmp	r5, #0
 801055e:	d05e      	beq.n	801061e <D16_GENERIC+0xe6>
 8010560:	f001 0510 	and.w	r5, r1, #16
 8010564:	f001 0120 	and.w	r1, r1, #32
 8010568:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8010644 <D16_GENERIC+0x10c>
 801056c:	46c1      	mov	r9, r8
 801056e:	9103      	str	r1, [sp, #12]
 8010570:	2100      	movs	r1, #0
 8010572:	9502      	str	r5, [sp, #8]
 8010574:	e048      	b.n	8010608 <D16_GENERIC+0xd0>
 8010576:	5d87      	ldrb	r7, [r0, r6]
 8010578:	7805      	ldrb	r5, [r0, #0]
 801057a:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 801057e:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8010582:	b2fe      	uxtb	r6, r7
 8010584:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8010588:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 801058c:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 8010590:	441d      	add	r5, r3
 8010592:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8010596:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801059a:	f3c3 0609 	ubfx	r6, r3, #0, #10
 801059e:	0a9b      	lsrs	r3, r3, #10
 80105a0:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 80105a4:	4d25      	ldr	r5, [pc, #148]	@ (801063c <D16_GENERIC+0x104>)
 80105a6:	fb26 e505 	smlad	r5, r6, r5, lr
 80105aa:	4f25      	ldr	r7, [pc, #148]	@ (8010640 <D16_GENERIC+0x108>)
 80105ac:	fb26 fe07 	smuad	lr, r6, r7
 80105b0:	9e02      	ldr	r6, [sp, #8]
 80105b2:	f101 0801 	add.w	r8, r1, #1
 80105b6:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 80105ba:	b186      	cbz	r6, 80105de <D16_GENERIC+0xa6>
 80105bc:	442c      	add	r4, r5
 80105be:	f8d2 b020 	ldr.w	fp, [r2, #32]
 80105c2:	eba4 040a 	sub.w	r4, r4, sl
 80105c6:	46aa      	mov	sl, r5
 80105c8:	17e7      	asrs	r7, r4, #31
 80105ca:	fba4 450b 	umull	r4, r5, r4, fp
 80105ce:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80105d2:	fb0b 5507 	mla	r5, fp, r7, r5
 80105d6:	f145 0500 	adc.w	r5, r5, #0
 80105da:	006c      	lsls	r4, r5, #1
 80105dc:	4625      	mov	r5, r4
 80105de:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 80105e2:	042d      	lsls	r5, r5, #16
 80105e4:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 80105e8:	2700      	movs	r7, #0
 80105ea:	fb01 fb0b 	mul.w	fp, r1, fp
 80105ee:	fa1f f188 	uxth.w	r1, r8
 80105f2:	fbc9 6705 	smlal	r6, r7, r9, r5
 80105f6:	9e01      	ldr	r6, [sp, #4]
 80105f8:	10bd      	asrs	r5, r7, #2
 80105fa:	f305 050f 	ssat	r5, #16, r5
 80105fe:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8010602:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8010604:	428d      	cmp	r5, r1
 8010606:	d90a      	bls.n	801061e <D16_GENERIC+0xe6>
 8010608:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801060a:	2d01      	cmp	r5, #1
 801060c:	b2ee      	uxtb	r6, r5
 801060e:	d1b2      	bne.n	8010576 <D16_GENERIC+0x3e>
 8010610:	9d03      	ldr	r5, [sp, #12]
 8010612:	f850 7b02 	ldr.w	r7, [r0], #2
 8010616:	2d00      	cmp	r5, #0
 8010618:	d0b3      	beq.n	8010582 <D16_GENERIC+0x4a>
 801061a:	ba7f      	rev16	r7, r7
 801061c:	e7b1      	b.n	8010582 <D16_GENERIC+0x4a>
 801061e:	2000      	movs	r0, #0
 8010620:	9905      	ldr	r1, [sp, #20]
 8010622:	61d3      	str	r3, [r2, #28]
 8010624:	9b04      	ldr	r3, [sp, #16]
 8010626:	f8c2 e008 	str.w	lr, [r2, #8]
 801062a:	60d1      	str	r1, [r2, #12]
 801062c:	6114      	str	r4, [r2, #16]
 801062e:	f8c2 a014 	str.w	sl, [r2, #20]
 8010632:	6193      	str	r3, [r2, #24]
 8010634:	b007      	add	sp, #28
 8010636:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801063a:	bf00      	nop
 801063c:	00030001 	.word	0x00030001
 8010640:	00010003 	.word	0x00010003
 8010644:	24000000 	.word	0x24000000

08010648 <D24_GENERIC>:
 8010648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801064c:	6953      	ldr	r3, [r2, #20]
 801064e:	b087      	sub	sp, #28
 8010650:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8010652:	9301      	str	r3, [sp, #4]
 8010654:	6993      	ldr	r3, [r2, #24]
 8010656:	9102      	str	r1, [sp, #8]
 8010658:	9305      	str	r3, [sp, #20]
 801065a:	6914      	ldr	r4, [r2, #16]
 801065c:	69d1      	ldr	r1, [r2, #28]
 801065e:	6893      	ldr	r3, [r2, #8]
 8010660:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8010664:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8010668:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 801066a:	2e00      	cmp	r6, #0
 801066c:	f000 808c 	beq.w	8010788 <D24_GENERIC+0x140>
 8010670:	f005 0610 	and.w	r6, r5, #16
 8010674:	f005 0520 	and.w	r5, r5, #32
 8010678:	f04f 0e00 	mov.w	lr, #0
 801067c:	f8df c140 	ldr.w	ip, [pc, #320]	@ 80107c0 <D24_GENERIC+0x178>
 8010680:	9603      	str	r6, [sp, #12]
 8010682:	9504      	str	r5, [sp, #16]
 8010684:	e061      	b.n	801074a <D24_GENERIC+0x102>
 8010686:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 801068a:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 801068e:	f810 b007 	ldrb.w	fp, [r0, r7]
 8010692:	042d      	lsls	r5, r5, #16
 8010694:	f890 9000 	ldrb.w	r9, [r0]
 8010698:	19f0      	adds	r0, r6, r7
 801069a:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 801069e:	44a9      	add	r9, r5
 80106a0:	fa5f f689 	uxtb.w	r6, r9
 80106a4:	f3c9 2707 	ubfx	r7, r9, #8, #8
 80106a8:	ea4f 4919 	mov.w	r9, r9, lsr #16
 80106ac:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 80106b0:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 80106b4:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 80106b8:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 80106bc:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 80106c0:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80106c4:	f3c7 0509 	ubfx	r5, r7, #0, #10
 80106c8:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80106cc:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 80106d0:	4d39      	ldr	r5, [pc, #228]	@ (80107b8 <D24_GENERIC+0x170>)
 80106d2:	fb26 8705 	smlad	r7, r6, r5, r8
 80106d6:	4d39      	ldr	r5, [pc, #228]	@ (80107bc <D24_GENERIC+0x174>)
 80106d8:	fb26 3805 	smlad	r8, r6, r5, r3
 80106dc:	f3c1 0309 	ubfx	r3, r1, #0, #10
 80106e0:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 80106e4:	2301      	movs	r3, #1
 80106e6:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 80106ea:	fb26 f603 	smuad	r6, r6, r3
 80106ee:	eb0e 0903 	add.w	r9, lr, r3
 80106f2:	eb0b 0306 	add.w	r3, fp, r6
 80106f6:	9e03      	ldr	r6, [sp, #12]
 80106f8:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 80106fc:	b186      	cbz	r6, 8010720 <D24_GENERIC+0xd8>
 80106fe:	442c      	add	r4, r5
 8010700:	9e01      	ldr	r6, [sp, #4]
 8010702:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8010706:	1ba4      	subs	r4, r4, r6
 8010708:	9501      	str	r5, [sp, #4]
 801070a:	17e7      	asrs	r7, r4, #31
 801070c:	fba4 450b 	umull	r4, r5, r4, fp
 8010710:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8010714:	fb0b 5507 	mla	r5, fp, r7, r5
 8010718:	f145 0500 	adc.w	r5, r5, #0
 801071c:	006c      	lsls	r4, r5, #1
 801071e:	4625      	mov	r5, r4
 8010720:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8010724:	03ad      	lsls	r5, r5, #14
 8010726:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 801072a:	2700      	movs	r7, #0
 801072c:	fb0e fb0b 	mul.w	fp, lr, fp
 8010730:	fa1f fe89 	uxth.w	lr, r9
 8010734:	fbca 6705 	smlal	r6, r7, sl, r5
 8010738:	9e02      	ldr	r6, [sp, #8]
 801073a:	10bd      	asrs	r5, r7, #2
 801073c:	f305 050f 	ssat	r5, #16, r5
 8010740:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8010744:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8010746:	4575      	cmp	r5, lr
 8010748:	d91e      	bls.n	8010788 <D24_GENERIC+0x140>
 801074a:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 801074c:	b2ef      	uxtb	r7, r5
 801074e:	2d01      	cmp	r5, #1
 8010750:	b23e      	sxth	r6, r7
 8010752:	d198      	bne.n	8010686 <D24_GENERIC+0x3e>
 8010754:	9d04      	ldr	r5, [sp, #16]
 8010756:	b16d      	cbz	r5, 8010774 <D24_GENERIC+0x12c>
 8010758:	f01e 0f01 	tst.w	lr, #1
 801075c:	d121      	bne.n	80107a2 <D24_GENERIC+0x15a>
 801075e:	7805      	ldrb	r5, [r0, #0]
 8010760:	3002      	adds	r0, #2
 8010762:	f890 9001 	ldrb.w	r9, [r0, #1]
 8010766:	022d      	lsls	r5, r5, #8
 8010768:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 801076c:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 8010770:	44b1      	add	r9, r6
 8010772:	e795      	b.n	80106a0 <D24_GENERIC+0x58>
 8010774:	7846      	ldrb	r6, [r0, #1]
 8010776:	f890 9002 	ldrb.w	r9, [r0, #2]
 801077a:	0236      	lsls	r6, r6, #8
 801077c:	f810 5b03 	ldrb.w	r5, [r0], #3
 8010780:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 8010784:	44a9      	add	r9, r5
 8010786:	e78b      	b.n	80106a0 <D24_GENERIC+0x58>
 8010788:	6093      	str	r3, [r2, #8]
 801078a:	2000      	movs	r0, #0
 801078c:	9b01      	ldr	r3, [sp, #4]
 801078e:	f8c2 800c 	str.w	r8, [r2, #12]
 8010792:	6153      	str	r3, [r2, #20]
 8010794:	9b05      	ldr	r3, [sp, #20]
 8010796:	61d1      	str	r1, [r2, #28]
 8010798:	6114      	str	r4, [r2, #16]
 801079a:	6193      	str	r3, [r2, #24]
 801079c:	b007      	add	sp, #28
 801079e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80107a2:	78c5      	ldrb	r5, [r0, #3]
 80107a4:	f890 9002 	ldrb.w	r9, [r0, #2]
 80107a8:	022d      	lsls	r5, r5, #8
 80107aa:	f810 6b04 	ldrb.w	r6, [r0], #4
 80107ae:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 80107b2:	44b1      	add	r9, r6
 80107b4:	e774      	b.n	80106a0 <D24_GENERIC+0x58>
 80107b6:	bf00      	nop
 80107b8:	00030001 	.word	0x00030001
 80107bc:	00060007 	.word	0x00060007
 80107c0:	24000000 	.word	0x24000000

080107c4 <D32_GENERIC>:
 80107c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80107c8:	6953      	ldr	r3, [r2, #20]
 80107ca:	b087      	sub	sp, #28
 80107cc:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 80107ce:	9300      	str	r3, [sp, #0]
 80107d0:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 80107d2:	6993      	ldr	r3, [r2, #24]
 80107d4:	9102      	str	r1, [sp, #8]
 80107d6:	9305      	str	r3, [sp, #20]
 80107d8:	9501      	str	r5, [sp, #4]
 80107da:	6914      	ldr	r4, [r2, #16]
 80107dc:	69d1      	ldr	r1, [r2, #28]
 80107de:	6893      	ldr	r3, [r2, #8]
 80107e0:	f8d2 800c 	ldr.w	r8, [r2, #12]
 80107e4:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 80107e6:	2e00      	cmp	r6, #0
 80107e8:	f000 8098 	beq.w	801091c <D32_GENERIC+0x158>
 80107ec:	f005 0610 	and.w	r6, r5, #16
 80107f0:	f005 0520 	and.w	r5, r5, #32
 80107f4:	f04f 0c00 	mov.w	ip, #0
 80107f8:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 8010948 <D32_GENERIC+0x184>
 80107fc:	9603      	str	r6, [sp, #12]
 80107fe:	9504      	str	r5, [sp, #16]
 8010800:	e078      	b.n	80108f4 <D32_GENERIC+0x130>
 8010802:	eb00 0905 	add.w	r9, r0, r5
 8010806:	f810 b005 	ldrb.w	fp, [r0, r5]
 801080a:	f810 a006 	ldrb.w	sl, [r0, r6]
 801080e:	f819 5007 	ldrb.w	r5, [r9, r7]
 8010812:	444f      	add	r7, r9
 8010814:	f890 9000 	ldrb.w	r9, [r0]
 8010818:	042d      	lsls	r5, r5, #16
 801081a:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 801081e:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8010822:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8010826:	44a9      	add	r9, r5
 8010828:	fa5f f789 	uxtb.w	r7, r9
 801082c:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8010830:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8010834:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8010838:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 801083c:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8010840:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8010844:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8010848:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 801084c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8010850:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8010854:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8010858:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801085c:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8010860:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8010864:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8010868:	f3c1 0509 	ubfx	r5, r1, #0, #10
 801086c:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8010870:	4d31      	ldr	r5, [pc, #196]	@ (8010938 <D32_GENERIC+0x174>)
 8010872:	fb29 8805 	smlad	r8, r9, r5, r8
 8010876:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 801087a:	fb26 8705 	smlad	r7, r6, r5, r8
 801087e:	4d2f      	ldr	r5, [pc, #188]	@ (801093c <D32_GENERIC+0x178>)
 8010880:	fb29 3305 	smlad	r3, r9, r5, r3
 8010884:	4d2e      	ldr	r5, [pc, #184]	@ (8010940 <D32_GENERIC+0x17c>)
 8010886:	fb26 3805 	smlad	r8, r6, r5, r3
 801088a:	2301      	movs	r3, #1
 801088c:	fb29 f903 	smuad	r9, r9, r3
 8010890:	4b2c      	ldr	r3, [pc, #176]	@ (8010944 <D32_GENERIC+0x180>)
 8010892:	fb26 9303 	smlad	r3, r6, r3, r9
 8010896:	9e03      	ldr	r6, [sp, #12]
 8010898:	f10c 0901 	add.w	r9, ip, #1
 801089c:	f5a7 4580 	sub.w	r5, r7, #16384	@ 0x4000
 80108a0:	b186      	cbz	r6, 80108c4 <D32_GENERIC+0x100>
 80108a2:	442c      	add	r4, r5
 80108a4:	9e00      	ldr	r6, [sp, #0]
 80108a6:	f8d2 a020 	ldr.w	sl, [r2, #32]
 80108aa:	1ba4      	subs	r4, r4, r6
 80108ac:	9500      	str	r5, [sp, #0]
 80108ae:	17e7      	asrs	r7, r4, #31
 80108b0:	fba4 450a 	umull	r4, r5, r4, sl
 80108b4:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80108b8:	fb0a 5507 	mla	r5, sl, r7, r5
 80108bc:	f145 0500 	adc.w	r5, r5, #0
 80108c0:	006c      	lsls	r4, r5, #1
 80108c2:	4625      	mov	r5, r4
 80108c4:	f8b2 a028 	ldrh.w	sl, [r2, #40]	@ 0x28
 80108c8:	036d      	lsls	r5, r5, #13
 80108ca:	9f01      	ldr	r7, [sp, #4]
 80108cc:	fb0c fb0a 	mul.w	fp, ip, sl
 80108d0:	fa1f fc89 	uxth.w	ip, r9
 80108d4:	f04f 0a00 	mov.w	sl, #0
 80108d8:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80108dc:	9e02      	ldr	r6, [sp, #8]
 80108de:	fbc7 9a05 	smlal	r9, sl, r7, r5
 80108e2:	4657      	mov	r7, sl
 80108e4:	10bd      	asrs	r5, r7, #2
 80108e6:	f305 050f 	ssat	r5, #16, r5
 80108ea:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 80108ee:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 80108f0:	4565      	cmp	r5, ip
 80108f2:	d913      	bls.n	801091c <D32_GENERIC+0x158>
 80108f4:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 80108f6:	b2ee      	uxtb	r6, r5
 80108f8:	2d01      	cmp	r5, #1
 80108fa:	f1c6 0700 	rsb	r7, r6, #0
 80108fe:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8010902:	f47f af7e 	bne.w	8010802 <D32_GENERIC+0x3e>
 8010906:	1d05      	adds	r5, r0, #4
 8010908:	f8d0 9000 	ldr.w	r9, [r0]
 801090c:	9804      	ldr	r0, [sp, #16]
 801090e:	b118      	cbz	r0, 8010918 <D32_GENERIC+0x154>
 8010910:	fa99 f999 	rev16.w	r9, r9
 8010914:	4628      	mov	r0, r5
 8010916:	e787      	b.n	8010828 <D32_GENERIC+0x64>
 8010918:	4628      	mov	r0, r5
 801091a:	e785      	b.n	8010828 <D32_GENERIC+0x64>
 801091c:	6093      	str	r3, [r2, #8]
 801091e:	2000      	movs	r0, #0
 8010920:	9b00      	ldr	r3, [sp, #0]
 8010922:	f8c2 800c 	str.w	r8, [r2, #12]
 8010926:	6153      	str	r3, [r2, #20]
 8010928:	9b05      	ldr	r3, [sp, #20]
 801092a:	61d1      	str	r1, [r2, #28]
 801092c:	6114      	str	r4, [r2, #16]
 801092e:	6193      	str	r3, [r2, #24]
 8010930:	b007      	add	sp, #28
 8010932:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010936:	bf00      	nop
 8010938:	00060003 	.word	0x00060003
 801093c:	000a000c 	.word	0x000a000c
 8010940:	000c000a 	.word	0x000c000a
 8010944:	00030006 	.word	0x00030006
 8010948:	24000000 	.word	0x24000000

0801094c <D48_GENERIC>:
 801094c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010950:	6913      	ldr	r3, [r2, #16]
 8010952:	b08b      	sub	sp, #44	@ 0x2c
 8010954:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8010956:	9106      	str	r1, [sp, #24]
 8010958:	9303      	str	r3, [sp, #12]
 801095a:	68d1      	ldr	r1, [r2, #12]
 801095c:	6953      	ldr	r3, [r2, #20]
 801095e:	9101      	str	r1, [sp, #4]
 8010960:	9304      	str	r3, [sp, #16]
 8010962:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8010964:	6993      	ldr	r3, [r2, #24]
 8010966:	9105      	str	r1, [sp, #20]
 8010968:	9309      	str	r3, [sp, #36]	@ 0x24
 801096a:	69d6      	ldr	r6, [r2, #28]
 801096c:	6893      	ldr	r3, [r2, #8]
 801096e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8010970:	2c00      	cmp	r4, #0
 8010972:	f000 80c6 	beq.w	8010b02 <D48_GENERIC+0x1b6>
 8010976:	f001 0410 	and.w	r4, r1, #16
 801097a:	f001 0120 	and.w	r1, r1, #32
 801097e:	2700      	movs	r7, #0
 8010980:	9302      	str	r3, [sp, #8]
 8010982:	9108      	str	r1, [sp, #32]
 8010984:	9407      	str	r4, [sp, #28]
 8010986:	4966      	ldr	r1, [pc, #408]	@ (8010b20 <D48_GENERIC+0x1d4>)
 8010988:	e0a6      	b.n	8010ad8 <D48_GENERIC+0x18c>
 801098a:	eb00 0e08 	add.w	lr, r0, r8
 801098e:	f810 a008 	ldrb.w	sl, [r0, r8]
 8010992:	f810 9005 	ldrb.w	r9, [r0, r5]
 8010996:	f81e 400c 	ldrb.w	r4, [lr, ip]
 801099a:	44e6      	add	lr, ip
 801099c:	f890 b000 	ldrb.w	fp, [r0]
 80109a0:	0420      	lsls	r0, r4, #16
 80109a2:	eb0e 0408 	add.w	r4, lr, r8
 80109a6:	f81e e008 	ldrb.w	lr, [lr, r8]
 80109aa:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 80109ae:	f814 800c 	ldrb.w	r8, [r4, ip]
 80109b2:	44a4      	add	ip, r4
 80109b4:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 80109b8:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 80109bc:	eb0a 040b 	add.w	r4, sl, fp
 80109c0:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 80109c4:	fa5f f884 	uxtb.w	r8, r4
 80109c8:	f3c4 2507 	ubfx	r5, r4, #8, #8
 80109cc:	f3c4 4907 	ubfx	r9, r4, #16, #8
 80109d0:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 80109d4:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80109d8:	fa5f fc8e 	uxtb.w	ip, lr
 80109dc:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 80109e0:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 80109e4:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 80109e8:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 80109ec:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 80109f0:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 80109f4:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 80109f8:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 80109fc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8010a00:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8010a04:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8010a08:	9b01      	ldr	r3, [sp, #4]
 8010a0a:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8010a0e:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8010a12:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8010a16:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 8010a1a:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8010a1e:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 8010a22:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8010a26:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8010a2a:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8010a2e:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8010a32:	4d3c      	ldr	r5, [pc, #240]	@ (8010b24 <D48_GENERIC+0x1d8>)
 8010a34:	fb28 3a05 	smlad	sl, r8, r5, r3
 8010a38:	4b3b      	ldr	r3, [pc, #236]	@ (8010b28 <D48_GENERIC+0x1dc>)
 8010a3a:	fb24 aa03 	smlad	sl, r4, r3, sl
 8010a3e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8010a42:	fb2c aa03 	smlad	sl, ip, r3, sl
 8010a46:	4b39      	ldr	r3, [pc, #228]	@ (8010b2c <D48_GENERIC+0x1e0>)
 8010a48:	9d02      	ldr	r5, [sp, #8]
 8010a4a:	fb28 5303 	smlad	r3, r8, r3, r5
 8010a4e:	f04f 151b 	mov.w	r5, #1769499	@ 0x1b001b
 8010a52:	fb24 3305 	smlad	r3, r4, r5, r3
 8010a56:	4d36      	ldr	r5, [pc, #216]	@ (8010b30 <D48_GENERIC+0x1e4>)
 8010a58:	fb2c 3305 	smlad	r3, ip, r5, r3
 8010a5c:	2501      	movs	r5, #1
 8010a5e:	9301      	str	r3, [sp, #4]
 8010a60:	fb28 f805 	smuad	r8, r8, r5
 8010a64:	4b33      	ldr	r3, [pc, #204]	@ (8010b34 <D48_GENERIC+0x1e8>)
 8010a66:	fb24 8403 	smlad	r4, r4, r3, r8
 8010a6a:	4b33      	ldr	r3, [pc, #204]	@ (8010b38 <D48_GENERIC+0x1ec>)
 8010a6c:	fb2c 4303 	smlad	r3, ip, r3, r4
 8010a70:	9302      	str	r3, [sp, #8]
 8010a72:	eb07 0e05 	add.w	lr, r7, r5
 8010a76:	9b07      	ldr	r3, [sp, #28]
 8010a78:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 8010a7c:	b1ab      	cbz	r3, 8010aaa <D48_GENERIC+0x15e>
 8010a7e:	9b03      	ldr	r3, [sp, #12]
 8010a80:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8010a84:	4453      	add	r3, sl
 8010a86:	461c      	mov	r4, r3
 8010a88:	9b04      	ldr	r3, [sp, #16]
 8010a8a:	f8cd a010 	str.w	sl, [sp, #16]
 8010a8e:	1ae4      	subs	r4, r4, r3
 8010a90:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8010a94:	fba4 450c 	umull	r4, r5, r4, ip
 8010a98:	fb0c 5509 	mla	r5, ip, r9, r5
 8010a9c:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8010aa0:	f145 0500 	adc.w	r5, r5, #0
 8010aa4:	006b      	lsls	r3, r5, #1
 8010aa6:	469a      	mov	sl, r3
 8010aa8:	9303      	str	r3, [sp, #12]
 8010aaa:	f8b2 c028 	ldrh.w	ip, [r2, #40]	@ 0x28
 8010aae:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8010ab2:	9b05      	ldr	r3, [sp, #20]
 8010ab4:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8010ab8:	2500      	movs	r5, #0
 8010aba:	fb07 fc0c 	mul.w	ip, r7, ip
 8010abe:	fa1f f78e 	uxth.w	r7, lr
 8010ac2:	fbc3 450a 	smlal	r4, r5, r3, sl
 8010ac6:	9b06      	ldr	r3, [sp, #24]
 8010ac8:	10ac      	asrs	r4, r5, #2
 8010aca:	f304 040f 	ssat	r4, #16, r4
 8010ace:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8010ad2:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8010ad4:	42bc      	cmp	r4, r7
 8010ad6:	d913      	bls.n	8010b00 <D48_GENERIC+0x1b4>
 8010ad8:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 8010ada:	b2e5      	uxtb	r5, r4
 8010adc:	2c01      	cmp	r4, #1
 8010ade:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8010ae2:	f1c5 0c00 	rsb	ip, r5, #0
 8010ae6:	f47f af50 	bne.w	801098a <D48_GENERIC+0x3e>
 8010aea:	9b08      	ldr	r3, [sp, #32]
 8010aec:	e890 4010 	ldmia.w	r0, {r4, lr}
 8010af0:	3006      	adds	r0, #6
 8010af2:	2b00      	cmp	r3, #0
 8010af4:	f43f af66 	beq.w	80109c4 <D48_GENERIC+0x78>
 8010af8:	ba64      	rev16	r4, r4
 8010afa:	fa9e fe9e 	rev16.w	lr, lr
 8010afe:	e761      	b.n	80109c4 <D48_GENERIC+0x78>
 8010b00:	9b02      	ldr	r3, [sp, #8]
 8010b02:	6093      	str	r3, [r2, #8]
 8010b04:	2000      	movs	r0, #0
 8010b06:	9b01      	ldr	r3, [sp, #4]
 8010b08:	61d6      	str	r6, [r2, #28]
 8010b0a:	60d3      	str	r3, [r2, #12]
 8010b0c:	9b03      	ldr	r3, [sp, #12]
 8010b0e:	6113      	str	r3, [r2, #16]
 8010b10:	9b04      	ldr	r3, [sp, #16]
 8010b12:	6153      	str	r3, [r2, #20]
 8010b14:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010b16:	6193      	str	r3, [r2, #24]
 8010b18:	b00b      	add	sp, #44	@ 0x2c
 8010b1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010b1e:	bf00      	nop
 8010b20:	24000000 	.word	0x24000000
 8010b24:	000f000a 	.word	0x000f000a
 8010b28:	00060003 	.word	0x00060003
 8010b2c:	00150019 	.word	0x00150019
 8010b30:	00190015 	.word	0x00190015
 8010b34:	00030006 	.word	0x00030006
 8010b38:	000a000f 	.word	0x000a000f

08010b3c <D64_GENERIC>:
 8010b3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010b40:	6913      	ldr	r3, [r2, #16]
 8010b42:	b089      	sub	sp, #36	@ 0x24
 8010b44:	68d5      	ldr	r5, [r2, #12]
 8010b46:	9302      	str	r3, [sp, #8]
 8010b48:	6953      	ldr	r3, [r2, #20]
 8010b4a:	462e      	mov	r6, r5
 8010b4c:	9105      	str	r1, [sp, #20]
 8010b4e:	9303      	str	r3, [sp, #12]
 8010b50:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8010b52:	6993      	ldr	r3, [r2, #24]
 8010b54:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 8010b56:	9307      	str	r3, [sp, #28]
 8010b58:	69d4      	ldr	r4, [r2, #28]
 8010b5a:	6893      	ldr	r3, [r2, #8]
 8010b5c:	9504      	str	r5, [sp, #16]
 8010b5e:	2900      	cmp	r1, #0
 8010b60:	f000 80e5 	beq.w	8010d2e <D64_GENERIC+0x1f2>
 8010b64:	6a11      	ldr	r1, [r2, #32]
 8010b66:	2500      	movs	r5, #0
 8010b68:	46b3      	mov	fp, r6
 8010b6a:	9301      	str	r3, [sp, #4]
 8010b6c:	9106      	str	r1, [sp, #24]
 8010b6e:	4976      	ldr	r1, [pc, #472]	@ (8010d48 <D64_GENERIC+0x20c>)
 8010b70:	e0c7      	b.n	8010d02 <D64_GENERIC+0x1c6>
 8010b72:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 8010b76:	f1cc 0e00 	rsb	lr, ip, #0
 8010b7a:	f890 9000 	ldrb.w	r9, [r0]
 8010b7e:	eb00 0708 	add.w	r7, r0, r8
 8010b82:	f810 6008 	ldrb.w	r6, [r0, r8]
 8010b86:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 8010b8a:	f817 000e 	ldrb.w	r0, [r7, lr]
 8010b8e:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 8010b92:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 8010b96:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 8010b9a:	ea4f 4800 	mov.w	r8, r0, lsl #16
 8010b9e:	f817 000e 	ldrb.w	r0, [r7, lr]
 8010ba2:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 8010ba6:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 8010baa:	0400      	lsls	r0, r0, #16
 8010bac:	4477      	add	r7, lr
 8010bae:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 8010bb2:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 8010bb6:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 8010bba:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 8010bbe:	444e      	add	r6, r9
 8010bc0:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 8010bc4:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 8010bc8:	44c2      	add	sl, r8
 8010bca:	b2f7      	uxtb	r7, r6
 8010bcc:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8010bd0:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8010bd4:	0e36      	lsrs	r6, r6, #24
 8010bd6:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8010bda:	fa5f fe8a 	uxtb.w	lr, sl
 8010bde:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8010be2:	f3ca 2907 	ubfx	r9, sl, #8, #8
 8010be6:	443c      	add	r4, r7
 8010be8:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 8010bec:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8010bf0:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8010bf4:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8010bf8:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8010bfc:	4b53      	ldr	r3, [pc, #332]	@ (8010d4c <D64_GENERIC+0x210>)
 8010bfe:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 8010c02:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8010c06:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 8010c0a:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8010c0e:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8010c12:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 8010c16:	f3ca 4407 	ubfx	r4, sl, #16, #8
 8010c1a:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8010c1e:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8010c22:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8010c26:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 8010c2a:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8010c2e:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8010c32:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 8010c36:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 8010c3a:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8010c3e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8010c42:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 8010c46:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8010c4a:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 8010c4e:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8010c52:	ea4f 2499 	mov.w	r4, r9, lsr #10
 8010c56:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 8010c5a:	fb28 b903 	smlad	r9, r8, r3, fp
 8010c5e:	4b3c      	ldr	r3, [pc, #240]	@ (8010d50 <D64_GENERIC+0x214>)
 8010c60:	fb26 9903 	smlad	r9, r6, r3, r9
 8010c64:	4b3b      	ldr	r3, [pc, #236]	@ (8010d54 <D64_GENERIC+0x218>)
 8010c66:	fb2e 9703 	smlad	r7, lr, r3, r9
 8010c6a:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 8010c6e:	fb2a 7909 	smlad	r9, sl, r9, r7
 8010c72:	4b39      	ldr	r3, [pc, #228]	@ (8010d58 <D64_GENERIC+0x21c>)
 8010c74:	9f01      	ldr	r7, [sp, #4]
 8010c76:	fb28 7303 	smlad	r3, r8, r3, r7
 8010c7a:	4f37      	ldr	r7, [pc, #220]	@ (8010d58 <D64_GENERIC+0x21c>)
 8010c7c:	fb2a 3317 	smladx	r3, sl, r7, r3
 8010c80:	4f36      	ldr	r7, [pc, #216]	@ (8010d5c <D64_GENERIC+0x220>)
 8010c82:	fb26 3307 	smlad	r3, r6, r7, r3
 8010c86:	fb2e 3b17 	smladx	fp, lr, r7, r3
 8010c8a:	f04f 0c01 	mov.w	ip, #1
 8010c8e:	fb28 f80c 	smuad	r8, r8, ip
 8010c92:	4b33      	ldr	r3, [pc, #204]	@ (8010d60 <D64_GENERIC+0x224>)
 8010c94:	fb26 8603 	smlad	r6, r6, r3, r8
 8010c98:	4b32      	ldr	r3, [pc, #200]	@ (8010d64 <D64_GENERIC+0x228>)
 8010c9a:	fb2e 6e03 	smlad	lr, lr, r3, r6
 8010c9e:	4b32      	ldr	r3, [pc, #200]	@ (8010d68 <D64_GENERIC+0x22c>)
 8010ca0:	fb2a e303 	smlad	r3, sl, r3, lr
 8010ca4:	9301      	str	r3, [sp, #4]
 8010ca6:	f5a9 3900 	sub.w	r9, r9, #131072	@ 0x20000
 8010caa:	9b06      	ldr	r3, [sp, #24]
 8010cac:	b19b      	cbz	r3, 8010cd6 <D64_GENERIC+0x19a>
 8010cae:	9e02      	ldr	r6, [sp, #8]
 8010cb0:	9f03      	ldr	r7, [sp, #12]
 8010cb2:	444e      	add	r6, r9
 8010cb4:	f8cd 900c 	str.w	r9, [sp, #12]
 8010cb8:	1bf6      	subs	r6, r6, r7
 8010cba:	ea4f 79e6 	mov.w	r9, r6, asr #31
 8010cbe:	fba6 6703 	umull	r6, r7, r6, r3
 8010cc2:	fb03 7709 	mla	r7, r3, r9, r7
 8010cc6:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 8010cca:	f147 0700 	adc.w	r7, r7, #0
 8010cce:	fa07 f30c 	lsl.w	r3, r7, ip
 8010cd2:	4699      	mov	r9, r3
 8010cd4:	9302      	str	r3, [sp, #8]
 8010cd6:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 8010cda:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8010cde:	9b04      	ldr	r3, [sp, #16]
 8010ce0:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8010ce4:	2700      	movs	r7, #0
 8010ce6:	fb05 fe0e 	mul.w	lr, r5, lr
 8010cea:	3501      	adds	r5, #1
 8010cec:	fbc3 6709 	smlal	r6, r7, r3, r9
 8010cf0:	9b05      	ldr	r3, [sp, #20]
 8010cf2:	10be      	asrs	r6, r7, #2
 8010cf4:	f306 060f 	ssat	r6, #16, r6
 8010cf8:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 8010cfc:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8010cfe:	42ae      	cmp	r6, r5
 8010d00:	dd13      	ble.n	8010d2a <D64_GENERIC+0x1ee>
 8010d02:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	@ 0x2a
 8010d06:	f1bc 0f01 	cmp.w	ip, #1
 8010d0a:	f47f af32 	bne.w	8010b72 <D64_GENERIC+0x36>
 8010d0e:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 8010d10:	f100 0e08 	add.w	lr, r0, #8
 8010d14:	06bb      	lsls	r3, r7, #26
 8010d16:	e890 0440 	ldmia.w	r0, {r6, sl}
 8010d1a:	d504      	bpl.n	8010d26 <D64_GENERIC+0x1ea>
 8010d1c:	ba76      	rev16	r6, r6
 8010d1e:	fa9a fa9a 	rev16.w	sl, sl
 8010d22:	4670      	mov	r0, lr
 8010d24:	e751      	b.n	8010bca <D64_GENERIC+0x8e>
 8010d26:	4670      	mov	r0, lr
 8010d28:	e74f      	b.n	8010bca <D64_GENERIC+0x8e>
 8010d2a:	465e      	mov	r6, fp
 8010d2c:	9b01      	ldr	r3, [sp, #4]
 8010d2e:	6093      	str	r3, [r2, #8]
 8010d30:	2000      	movs	r0, #0
 8010d32:	9b02      	ldr	r3, [sp, #8]
 8010d34:	60d6      	str	r6, [r2, #12]
 8010d36:	6113      	str	r3, [r2, #16]
 8010d38:	9b03      	ldr	r3, [sp, #12]
 8010d3a:	61d4      	str	r4, [r2, #28]
 8010d3c:	6153      	str	r3, [r2, #20]
 8010d3e:	9b07      	ldr	r3, [sp, #28]
 8010d40:	6193      	str	r3, [r2, #24]
 8010d42:	b009      	add	sp, #36	@ 0x24
 8010d44:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010d48:	24000000 	.word	0x24000000
 8010d4c:	001c0015 	.word	0x001c0015
 8010d50:	000f000a 	.word	0x000f000a
 8010d54:	00060003 	.word	0x00060003
 8010d58:	0024002a 	.word	0x0024002a
 8010d5c:	002e0030 	.word	0x002e0030
 8010d60:	00030006 	.word	0x00030006
 8010d64:	000a000f 	.word	0x000a000f
 8010d68:	0015001c 	.word	0x0015001c

08010d6c <D80_GENERIC>:
 8010d6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010d70:	b08b      	sub	sp, #44	@ 0x2c
 8010d72:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8010d74:	9107      	str	r1, [sp, #28]
 8010d76:	6911      	ldr	r1, [r2, #16]
 8010d78:	9104      	str	r1, [sp, #16]
 8010d7a:	6951      	ldr	r1, [r2, #20]
 8010d7c:	9105      	str	r1, [sp, #20]
 8010d7e:	6991      	ldr	r1, [r2, #24]
 8010d80:	9109      	str	r1, [sp, #36]	@ 0x24
 8010d82:	69d1      	ldr	r1, [r2, #28]
 8010d84:	9101      	str	r1, [sp, #4]
 8010d86:	6891      	ldr	r1, [r2, #8]
 8010d88:	9103      	str	r1, [sp, #12]
 8010d8a:	68d1      	ldr	r1, [r2, #12]
 8010d8c:	9102      	str	r1, [sp, #8]
 8010d8e:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8010d90:	9106      	str	r1, [sp, #24]
 8010d92:	2b00      	cmp	r3, #0
 8010d94:	f000 810d 	beq.w	8010fb2 <D80_GENERIC+0x246>
 8010d98:	6a13      	ldr	r3, [r2, #32]
 8010d9a:	f04f 0800 	mov.w	r8, #0
 8010d9e:	f8df e264 	ldr.w	lr, [pc, #612]	@ 8011004 <D80_GENERIC+0x298>
 8010da2:	9308      	str	r3, [sp, #32]
 8010da4:	9200      	str	r2, [sp, #0]
 8010da6:	e0ee      	b.n	8010f86 <D80_GENERIC+0x21a>
 8010da8:	b2db      	uxtb	r3, r3
 8010daa:	f890 c000 	ldrb.w	ip, [r0]
 8010dae:	b219      	sxth	r1, r3
 8010db0:	425c      	negs	r4, r3
 8010db2:	f810 9003 	ldrb.w	r9, [r0, r3]
 8010db6:	004e      	lsls	r6, r1, #1
 8010db8:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 8010dbc:	4431      	add	r1, r6
 8010dbe:	1843      	adds	r3, r0, r1
 8010dc0:	f810 b001 	ldrb.w	fp, [r0, r1]
 8010dc4:	1919      	adds	r1, r3, r4
 8010dc6:	5d1b      	ldrb	r3, [r3, r4]
 8010dc8:	1948      	adds	r0, r1, r5
 8010dca:	f811 a005 	ldrb.w	sl, [r1, r5]
 8010dce:	041b      	lsls	r3, r3, #16
 8010dd0:	1907      	adds	r7, r0, r4
 8010dd2:	5d01      	ldrb	r1, [r0, r4]
 8010dd4:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 8010dd8:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8010ddc:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8010de0:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8010de4:	0409      	lsls	r1, r1, #16
 8010de6:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 8010dea:	eb0b 0905 	add.w	r9, fp, r5
 8010dee:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8010df2:	f81b 5005 	ldrb.w	r5, [fp, r5]
 8010df6:	eb09 0b04 	add.w	fp, r9, r4
 8010dfa:	f819 4004 	ldrb.w	r4, [r9, r4]
 8010dfe:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8010e02:	4463      	add	r3, ip
 8010e04:	eb0b 0006 	add.w	r0, fp, r6
 8010e08:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8010e0c:	4439      	add	r1, r7
 8010e0e:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8010e12:	b2df      	uxtb	r7, r3
 8010e14:	f3c3 4607 	ubfx	r6, r3, #16, #8
 8010e18:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8010e1c:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 8010e20:	fa5f fa81 	uxtb.w	sl, r1
 8010e24:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 8010e28:	9c01      	ldr	r4, [sp, #4]
 8010e2a:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 8010e2e:	441c      	add	r4, r3
 8010e30:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 8010e34:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 8010e38:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8010e3c:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8010e40:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8010e44:	f3c1 2407 	ubfx	r4, r1, #8, #8
 8010e48:	b2ed      	uxtb	r5, r5
 8010e4a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8010e4e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8010e52:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 8010e56:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 8010e5a:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8010e5e:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8010e62:	f3c1 4707 	ubfx	r7, r1, #16, #8
 8010e66:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 8010e6a:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 8010e6e:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8010e72:	0e09      	lsrs	r1, r1, #24
 8010e74:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 8010e78:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8010e7c:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 8010e80:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8010e84:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8010e88:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8010e8c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8010e90:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8010e94:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8010e98:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 8010e9c:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8010ea0:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8010ea4:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 8010ea8:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 8010eac:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8010eb0:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 8010eb4:	ea4f 229a 	mov.w	r2, sl, lsr #10
 8010eb8:	f3ca 0709 	ubfx	r7, sl, #0, #10
 8010ebc:	9201      	str	r2, [sp, #4]
 8010ebe:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 8010ec2:	4a44      	ldr	r2, [pc, #272]	@ (8010fd4 <D80_GENERIC+0x268>)
 8010ec4:	9f02      	ldr	r7, [sp, #8]
 8010ec6:	fb23 7a02 	smlad	sl, r3, r2, r7
 8010eca:	4a43      	ldr	r2, [pc, #268]	@ (8010fd8 <D80_GENERIC+0x26c>)
 8010ecc:	fb26 aa02 	smlad	sl, r6, r2, sl
 8010ed0:	4a42      	ldr	r2, [pc, #264]	@ (8010fdc <D80_GENERIC+0x270>)
 8010ed2:	fb24 aa02 	smlad	sl, r4, r2, sl
 8010ed6:	4a42      	ldr	r2, [pc, #264]	@ (8010fe0 <D80_GENERIC+0x274>)
 8010ed8:	fb21 a702 	smlad	r7, r1, r2, sl
 8010edc:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8010ee0:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8010ee4:	4a3f      	ldr	r2, [pc, #252]	@ (8010fe4 <D80_GENERIC+0x278>)
 8010ee6:	9f03      	ldr	r7, [sp, #12]
 8010ee8:	fb23 7c02 	smlad	ip, r3, r2, r7
 8010eec:	4a3e      	ldr	r2, [pc, #248]	@ (8010fe8 <D80_GENERIC+0x27c>)
 8010eee:	fb26 cc02 	smlad	ip, r6, r2, ip
 8010ef2:	f04f 174b 	mov.w	r7, #4915275	@ 0x4b004b
 8010ef6:	fb24 c707 	smlad	r7, r4, r7, ip
 8010efa:	4a3c      	ldr	r2, [pc, #240]	@ (8010fec <D80_GENERIC+0x280>)
 8010efc:	fb21 7702 	smlad	r7, r1, r2, r7
 8010f00:	4a3b      	ldr	r2, [pc, #236]	@ (8010ff0 <D80_GENERIC+0x284>)
 8010f02:	fb25 7202 	smlad	r2, r5, r2, r7
 8010f06:	f04f 0901 	mov.w	r9, #1
 8010f0a:	9202      	str	r2, [sp, #8]
 8010f0c:	fb23 f909 	smuad	r9, r3, r9
 8010f10:	4b38      	ldr	r3, [pc, #224]	@ (8010ff4 <D80_GENERIC+0x288>)
 8010f12:	fb26 9603 	smlad	r6, r6, r3, r9
 8010f16:	4f38      	ldr	r7, [pc, #224]	@ (8010ff8 <D80_GENERIC+0x28c>)
 8010f18:	fb24 6407 	smlad	r4, r4, r7, r6
 8010f1c:	4f37      	ldr	r7, [pc, #220]	@ (8010ffc <D80_GENERIC+0x290>)
 8010f1e:	fb21 4707 	smlad	r7, r1, r7, r4
 8010f22:	4937      	ldr	r1, [pc, #220]	@ (8011000 <D80_GENERIC+0x294>)
 8010f24:	fb25 7301 	smlad	r3, r5, r1, r7
 8010f28:	9303      	str	r3, [sp, #12]
 8010f2a:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 8010f2e:	9b08      	ldr	r3, [sp, #32]
 8010f30:	b193      	cbz	r3, 8010f58 <D80_GENERIC+0x1ec>
 8010f32:	9a04      	ldr	r2, [sp, #16]
 8010f34:	4452      	add	r2, sl
 8010f36:	4614      	mov	r4, r2
 8010f38:	9a05      	ldr	r2, [sp, #20]
 8010f3a:	f8cd a014 	str.w	sl, [sp, #20]
 8010f3e:	1aa4      	subs	r4, r4, r2
 8010f40:	17e7      	asrs	r7, r4, #31
 8010f42:	fba4 4503 	umull	r4, r5, r4, r3
 8010f46:	fb03 5507 	mla	r5, r3, r7, r5
 8010f4a:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8010f4e:	f145 0500 	adc.w	r5, r5, #0
 8010f52:	006b      	lsls	r3, r5, #1
 8010f54:	469a      	mov	sl, r3
 8010f56:	9304      	str	r3, [sp, #16]
 8010f58:	9e00      	ldr	r6, [sp, #0]
 8010f5a:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8010f5e:	9a06      	ldr	r2, [sp, #24]
 8010f60:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8010f64:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 8010f66:	2500      	movs	r5, #0
 8010f68:	fb08 f303 	mul.w	r3, r8, r3
 8010f6c:	fbc2 450a 	smlal	r4, r5, r2, sl
 8010f70:	9a07      	ldr	r2, [sp, #28]
 8010f72:	f108 0801 	add.w	r8, r8, #1
 8010f76:	10a9      	asrs	r1, r5, #2
 8010f78:	f301 010f 	ssat	r1, #16, r1
 8010f7c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8010f80:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 8010f82:	4543      	cmp	r3, r8
 8010f84:	dd14      	ble.n	8010fb0 <D80_GENERIC+0x244>
 8010f86:	9b00      	ldr	r3, [sp, #0]
 8010f88:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8010f8a:	2b01      	cmp	r3, #1
 8010f8c:	f47f af0c 	bne.w	8010da8 <D80_GENERIC+0x3c>
 8010f90:	9b00      	ldr	r3, [sp, #0]
 8010f92:	300a      	adds	r0, #10
 8010f94:	f850 1c06 	ldr.w	r1, [r0, #-6]
 8010f98:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 8010f9a:	f850 5c02 	ldr.w	r5, [r0, #-2]
 8010f9e:	06b2      	lsls	r2, r6, #26
 8010fa0:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 8010fa4:	f57f af33 	bpl.w	8010e0e <D80_GENERIC+0xa2>
 8010fa8:	ba5b      	rev16	r3, r3
 8010faa:	ba49      	rev16	r1, r1
 8010fac:	ba6d      	rev16	r5, r5
 8010fae:	e72e      	b.n	8010e0e <D80_GENERIC+0xa2>
 8010fb0:	4632      	mov	r2, r6
 8010fb2:	9b03      	ldr	r3, [sp, #12]
 8010fb4:	2000      	movs	r0, #0
 8010fb6:	6093      	str	r3, [r2, #8]
 8010fb8:	9b02      	ldr	r3, [sp, #8]
 8010fba:	60d3      	str	r3, [r2, #12]
 8010fbc:	9b01      	ldr	r3, [sp, #4]
 8010fbe:	61d3      	str	r3, [r2, #28]
 8010fc0:	9b04      	ldr	r3, [sp, #16]
 8010fc2:	6113      	str	r3, [r2, #16]
 8010fc4:	9b05      	ldr	r3, [sp, #20]
 8010fc6:	6153      	str	r3, [r2, #20]
 8010fc8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8010fca:	6193      	str	r3, [r2, #24]
 8010fcc:	b00b      	add	sp, #44	@ 0x2c
 8010fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010fd2:	bf00      	nop
 8010fd4:	002d0024 	.word	0x002d0024
 8010fd8:	001c0015 	.word	0x001c0015
 8010fdc:	000f000a 	.word	0x000f000a
 8010fe0:	00060003 	.word	0x00060003
 8010fe4:	0037003f 	.word	0x0037003f
 8010fe8:	00450049 	.word	0x00450049
 8010fec:	00490045 	.word	0x00490045
 8010ff0:	003f0037 	.word	0x003f0037
 8010ff4:	00030006 	.word	0x00030006
 8010ff8:	000a000f 	.word	0x000a000f
 8010ffc:	0015001c 	.word	0x0015001c
 8011000:	0024002d 	.word	0x0024002d
 8011004:	24000000 	.word	0x24000000

08011008 <D128_GENERIC>:
 8011008:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801100c:	b08d      	sub	sp, #52	@ 0x34
 801100e:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8011010:	9201      	str	r2, [sp, #4]
 8011012:	9109      	str	r1, [sp, #36]	@ 0x24
 8011014:	4611      	mov	r1, r2
 8011016:	6912      	ldr	r2, [r2, #16]
 8011018:	9206      	str	r2, [sp, #24]
 801101a:	460a      	mov	r2, r1
 801101c:	6949      	ldr	r1, [r1, #20]
 801101e:	4614      	mov	r4, r2
 8011020:	9107      	str	r1, [sp, #28]
 8011022:	4611      	mov	r1, r2
 8011024:	6992      	ldr	r2, [r2, #24]
 8011026:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 801102a:	920b      	str	r2, [sp, #44]	@ 0x2c
 801102c:	68e2      	ldr	r2, [r4, #12]
 801102e:	6889      	ldr	r1, [r1, #8]
 8011030:	9202      	str	r2, [sp, #8]
 8011032:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8011034:	9103      	str	r1, [sp, #12]
 8011036:	9208      	str	r2, [sp, #32]
 8011038:	2b00      	cmp	r3, #0
 801103a:	f000 8180 	beq.w	801133e <D128_GENERIC+0x336>
 801103e:	6a23      	ldr	r3, [r4, #32]
 8011040:	4681      	mov	r9, r0
 8011042:	49c8      	ldr	r1, [pc, #800]	@ (8011364 <D128_GENERIC+0x35c>)
 8011044:	930a      	str	r3, [sp, #40]	@ 0x28
 8011046:	2300      	movs	r3, #0
 8011048:	f8cd a010 	str.w	sl, [sp, #16]
 801104c:	9305      	str	r3, [sp, #20]
 801104e:	e15d      	b.n	801130c <D128_GENERIC+0x304>
 8011050:	b2d2      	uxtb	r2, r2
 8011052:	f899 b000 	ldrb.w	fp, [r9]
 8011056:	b213      	sxth	r3, r2
 8011058:	4255      	negs	r5, r2
 801105a:	f819 0002 	ldrb.w	r0, [r9, r2]
 801105e:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8011062:	009f      	lsls	r7, r3, #2
 8011064:	eb09 0402 	add.w	r4, r9, r2
 8011068:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 801106c:	f819 8002 	ldrb.w	r8, [r9, r2]
 8011070:	443b      	add	r3, r7
 8011072:	1962      	adds	r2, r4, r5
 8011074:	5d64      	ldrb	r4, [r4, r5]
 8011076:	eb02 0e03 	add.w	lr, r2, r3
 801107a:	0424      	lsls	r4, r4, #16
 801107c:	5cd3      	ldrb	r3, [r2, r3]
 801107e:	eb0e 0c05 	add.w	ip, lr, r5
 8011082:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 8011086:	f81e 2005 	ldrb.w	r2, [lr, r5]
 801108a:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 801108e:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 8011092:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 8011096:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 801109a:	eb0e 0c06 	add.w	ip, lr, r6
 801109e:	f81e a006 	ldrb.w	sl, [lr, r6]
 80110a2:	0412      	lsls	r2, r2, #16
 80110a4:	445c      	add	r4, fp
 80110a6:	eb0c 0e05 	add.w	lr, ip, r5
 80110aa:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80110ae:	f81c 3005 	ldrb.w	r3, [ip, r5]
 80110b2:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 80110b6:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80110ba:	041b      	lsls	r3, r3, #16
 80110bc:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80110c0:	eb00 0b06 	add.w	fp, r0, r6
 80110c4:	5d80      	ldrb	r0, [r0, r6]
 80110c6:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80110ca:	f81b 6005 	ldrb.w	r6, [fp, r5]
 80110ce:	eb0b 0a05 	add.w	sl, fp, r5
 80110d2:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 80110d6:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 80110da:	0436      	lsls	r6, r6, #16
 80110dc:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 80110e0:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 80110e4:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 80110e8:	4442      	add	r2, r8
 80110ea:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 80110ee:	44b9      	add	r9, r7
 80110f0:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 80110f4:	4473      	add	r3, lr
 80110f6:	442e      	add	r6, r5
 80110f8:	f3c4 2007 	ubfx	r0, r4, #8, #8
 80110fc:	b2e7      	uxtb	r7, r4
 80110fe:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8011102:	0e24      	lsrs	r4, r4, #24
 8011104:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 8011108:	fa5f fe82 	uxtb.w	lr, r2
 801110c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8011110:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8011114:	9804      	ldr	r0, [sp, #16]
 8011116:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 801111a:	4438      	add	r0, r7
 801111c:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8011120:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8011124:	f3c2 4707 	ubfx	r7, r2, #16, #8
 8011128:	4680      	mov	r8, r0
 801112a:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 801112e:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 8011132:	0e12      	lsrs	r2, r2, #24
 8011134:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 8011138:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 801113c:	fa5f fa83 	uxtb.w	sl, r3
 8011140:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011144:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 8011148:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 801114c:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 8011150:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8011154:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 8011158:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801115c:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8011160:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8011164:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8011168:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 801116c:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 8011170:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8011174:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8011178:	f3c4 0809 	ubfx	r8, r4, #0, #10
 801117c:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 8011180:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 8011184:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 8011188:	0e1b      	lsrs	r3, r3, #24
 801118a:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 801118e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8011192:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 8011196:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801119a:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 801119e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80111a2:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 80111a6:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80111aa:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 80111ae:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80111b2:	fa5f f886 	uxtb.w	r8, r6
 80111b6:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80111ba:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80111be:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80111c2:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80111c6:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80111ca:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 80111ce:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 80111d2:	f3c6 4407 	ubfx	r4, r6, #16, #8
 80111d6:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 80111da:	0e36      	lsrs	r6, r6, #24
 80111dc:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 80111e0:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80111e4:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 80111e8:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 80111ec:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80111f0:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 80111f4:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 80111f8:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80111fc:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8011200:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8011204:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 8011208:	f3c6 0309 	ubfx	r3, r6, #0, #10
 801120c:	0ab2      	lsrs	r2, r6, #10
 801120e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011212:	9204      	str	r2, [sp, #16]
 8011214:	9c02      	ldr	r4, [sp, #8]
 8011216:	4a54      	ldr	r2, [pc, #336]	@ (8011368 <D128_GENERIC+0x360>)
 8011218:	fb20 4602 	smlad	r6, r0, r2, r4
 801121c:	4a53      	ldr	r2, [pc, #332]	@ (801136c <D128_GENERIC+0x364>)
 801121e:	fb25 6602 	smlad	r6, r5, r2, r6
 8011222:	4a53      	ldr	r2, [pc, #332]	@ (8011370 <D128_GENERIC+0x368>)
 8011224:	fb2e 6602 	smlad	r6, lr, r2, r6
 8011228:	4a52      	ldr	r2, [pc, #328]	@ (8011374 <D128_GENERIC+0x36c>)
 801122a:	fb27 6602 	smlad	r6, r7, r2, r6
 801122e:	4a52      	ldr	r2, [pc, #328]	@ (8011378 <D128_GENERIC+0x370>)
 8011230:	fb2b 6602 	smlad	r6, fp, r2, r6
 8011234:	4a51      	ldr	r2, [pc, #324]	@ (801137c <D128_GENERIC+0x374>)
 8011236:	fb2a 6602 	smlad	r6, sl, r2, r6
 801123a:	4a51      	ldr	r2, [pc, #324]	@ (8011380 <D128_GENERIC+0x378>)
 801123c:	fb28 6202 	smlad	r2, r8, r2, r6
 8011240:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8011244:	fb23 2606 	smlad	r6, r3, r6, r2
 8011248:	4a4e      	ldr	r2, [pc, #312]	@ (8011384 <D128_GENERIC+0x37c>)
 801124a:	9c03      	ldr	r4, [sp, #12]
 801124c:	fb20 4202 	smlad	r2, r0, r2, r4
 8011250:	4c4d      	ldr	r4, [pc, #308]	@ (8011388 <D128_GENERIC+0x380>)
 8011252:	fb25 2404 	smlad	r4, r5, r4, r2
 8011256:	4a4d      	ldr	r2, [pc, #308]	@ (801138c <D128_GENERIC+0x384>)
 8011258:	fb2e 4202 	smlad	r2, lr, r2, r4
 801125c:	4c4c      	ldr	r4, [pc, #304]	@ (8011390 <D128_GENERIC+0x388>)
 801125e:	fb27 2204 	smlad	r2, r7, r4, r2
 8011262:	4c4c      	ldr	r4, [pc, #304]	@ (8011394 <D128_GENERIC+0x38c>)
 8011264:	fb2b 2404 	smlad	r4, fp, r4, r2
 8011268:	4a4b      	ldr	r2, [pc, #300]	@ (8011398 <D128_GENERIC+0x390>)
 801126a:	fb2a 4402 	smlad	r4, sl, r2, r4
 801126e:	4a4b      	ldr	r2, [pc, #300]	@ (801139c <D128_GENERIC+0x394>)
 8011270:	fb28 4202 	smlad	r2, r8, r2, r4
 8011274:	4c4a      	ldr	r4, [pc, #296]	@ (80113a0 <D128_GENERIC+0x398>)
 8011276:	fb23 2204 	smlad	r2, r3, r4, r2
 801127a:	f04f 0c01 	mov.w	ip, #1
 801127e:	9202      	str	r2, [sp, #8]
 8011280:	fb20 f00c 	smuad	r0, r0, ip
 8011284:	4a47      	ldr	r2, [pc, #284]	@ (80113a4 <D128_GENERIC+0x39c>)
 8011286:	fb25 0502 	smlad	r5, r5, r2, r0
 801128a:	4a47      	ldr	r2, [pc, #284]	@ (80113a8 <D128_GENERIC+0x3a0>)
 801128c:	fb2e 5e02 	smlad	lr, lr, r2, r5
 8011290:	4a46      	ldr	r2, [pc, #280]	@ (80113ac <D128_GENERIC+0x3a4>)
 8011292:	fb27 e202 	smlad	r2, r7, r2, lr
 8011296:	4c46      	ldr	r4, [pc, #280]	@ (80113b0 <D128_GENERIC+0x3a8>)
 8011298:	fb2b 2204 	smlad	r2, fp, r4, r2
 801129c:	4c45      	ldr	r4, [pc, #276]	@ (80113b4 <D128_GENERIC+0x3ac>)
 801129e:	fb2a 2204 	smlad	r2, sl, r4, r2
 80112a2:	4c45      	ldr	r4, [pc, #276]	@ (80113b8 <D128_GENERIC+0x3b0>)
 80112a4:	fb28 2204 	smlad	r2, r8, r4, r2
 80112a8:	4c44      	ldr	r4, [pc, #272]	@ (80113bc <D128_GENERIC+0x3b4>)
 80112aa:	fb23 2304 	smlad	r3, r3, r4, r2
 80112ae:	9303      	str	r3, [sp, #12]
 80112b0:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 80112b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80112b6:	b193      	cbz	r3, 80112de <D128_GENERIC+0x2d6>
 80112b8:	9a06      	ldr	r2, [sp, #24]
 80112ba:	9807      	ldr	r0, [sp, #28]
 80112bc:	4432      	add	r2, r6
 80112be:	9607      	str	r6, [sp, #28]
 80112c0:	461e      	mov	r6, r3
 80112c2:	1a12      	subs	r2, r2, r0
 80112c4:	17d5      	asrs	r5, r2, #31
 80112c6:	fba2 2303 	umull	r2, r3, r2, r3
 80112ca:	fb06 3305 	mla	r3, r6, r5, r3
 80112ce:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80112d2:	f143 0300 	adc.w	r3, r3, #0
 80112d6:	fa03 f30c 	lsl.w	r3, r3, ip
 80112da:	461e      	mov	r6, r3
 80112dc:	9306      	str	r3, [sp, #24]
 80112de:	9c01      	ldr	r4, [sp, #4]
 80112e0:	01f6      	lsls	r6, r6, #7
 80112e2:	9d05      	ldr	r5, [sp, #20]
 80112e4:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80112e8:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 80112ea:	2300      	movs	r3, #0
 80112ec:	9f08      	ldr	r7, [sp, #32]
 80112ee:	fb05 f000 	mul.w	r0, r5, r0
 80112f2:	3501      	adds	r5, #1
 80112f4:	fbc7 2306 	smlal	r2, r3, r7, r6
 80112f8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80112fa:	109b      	asrs	r3, r3, #2
 80112fc:	9505      	str	r5, [sp, #20]
 80112fe:	f303 030f 	ssat	r3, #16, r3
 8011302:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 8011306:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 8011308:	42ab      	cmp	r3, r5
 801130a:	dd16      	ble.n	801133a <D128_GENERIC+0x332>
 801130c:	9b01      	ldr	r3, [sp, #4]
 801130e:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8011310:	2a01      	cmp	r2, #1
 8011312:	f47f ae9d 	bne.w	8011050 <D128_GENERIC+0x48>
 8011316:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 8011318:	f109 0204 	add.w	r2, r9, #4
 801131c:	f109 0510 	add.w	r5, r9, #16
 8011320:	f8d9 4000 	ldr.w	r4, [r9]
 8011324:	0680      	lsls	r0, r0, #26
 8011326:	ca4c      	ldmia	r2, {r2, r3, r6}
 8011328:	d505      	bpl.n	8011336 <D128_GENERIC+0x32e>
 801132a:	ba64      	rev16	r4, r4
 801132c:	ba52      	rev16	r2, r2
 801132e:	ba5b      	rev16	r3, r3
 8011330:	ba76      	rev16	r6, r6
 8011332:	46a9      	mov	r9, r5
 8011334:	e6e0      	b.n	80110f8 <D128_GENERIC+0xf0>
 8011336:	46a9      	mov	r9, r5
 8011338:	e6de      	b.n	80110f8 <D128_GENERIC+0xf0>
 801133a:	f8dd a010 	ldr.w	sl, [sp, #16]
 801133e:	9a01      	ldr	r2, [sp, #4]
 8011340:	2000      	movs	r0, #0
 8011342:	9903      	ldr	r1, [sp, #12]
 8011344:	4613      	mov	r3, r2
 8011346:	f8c2 a01c 	str.w	sl, [r2, #28]
 801134a:	6091      	str	r1, [r2, #8]
 801134c:	9902      	ldr	r1, [sp, #8]
 801134e:	60d1      	str	r1, [r2, #12]
 8011350:	9907      	ldr	r1, [sp, #28]
 8011352:	9a06      	ldr	r2, [sp, #24]
 8011354:	6159      	str	r1, [r3, #20]
 8011356:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8011358:	611a      	str	r2, [r3, #16]
 801135a:	6199      	str	r1, [r3, #24]
 801135c:	b00d      	add	sp, #52	@ 0x34
 801135e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011362:	bf00      	nop
 8011364:	24000000 	.word	0x24000000
 8011368:	00780069 	.word	0x00780069
 801136c:	005b004e 	.word	0x005b004e
 8011370:	00420037 	.word	0x00420037
 8011374:	002d0024 	.word	0x002d0024
 8011378:	001c0015 	.word	0x001c0015
 801137c:	000f000a 	.word	0x000f000a
 8011380:	00060003 	.word	0x00060003
 8011384:	00880096 	.word	0x00880096
 8011388:	00a200ac 	.word	0x00a200ac
 801138c:	00b400ba 	.word	0x00b400ba
 8011390:	00be00c0 	.word	0x00be00c0
 8011394:	00c000be 	.word	0x00c000be
 8011398:	00ba00b4 	.word	0x00ba00b4
 801139c:	00ac00a2 	.word	0x00ac00a2
 80113a0:	00960088 	.word	0x00960088
 80113a4:	00030006 	.word	0x00030006
 80113a8:	000a000f 	.word	0x000a000f
 80113ac:	0015001c 	.word	0x0015001c
 80113b0:	0024002d 	.word	0x0024002d
 80113b4:	00370042 	.word	0x00370042
 80113b8:	004e005b 	.word	0x004e005b
 80113bc:	00690078 	.word	0x00690078

080113c0 <D16_1CH_HTONS_VOL_HP>:
 80113c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80113c4:	4692      	mov	sl, r2
 80113c6:	b087      	sub	sp, #28
 80113c8:	4681      	mov	r9, r0
 80113ca:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80113cc:	f8da 3018 	ldr.w	r3, [sl, #24]
 80113d0:	f8da 000c 	ldr.w	r0, [sl, #12]
 80113d4:	9303      	str	r3, [sp, #12]
 80113d6:	f8da 6010 	ldr.w	r6, [sl, #16]
 80113da:	f8da 5014 	ldr.w	r5, [sl, #20]
 80113de:	f8da 301c 	ldr.w	r3, [sl, #28]
 80113e2:	f8da 4008 	ldr.w	r4, [sl, #8]
 80113e6:	9004      	str	r0, [sp, #16]
 80113e8:	f8da b030 	ldr.w	fp, [sl, #48]	@ 0x30
 80113ec:	f8da e020 	ldr.w	lr, [sl, #32]
 80113f0:	2a00      	cmp	r2, #0
 80113f2:	d05a      	beq.n	80114aa <D16_1CH_HTONS_VOL_HP+0xea>
 80113f4:	f1a1 0802 	sub.w	r8, r1, #2
 80113f8:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 80113fc:	f8cd b008 	str.w	fp, [sp, #8]
 8011400:	46cb      	mov	fp, r9
 8011402:	f8cd a014 	str.w	sl, [sp, #20]
 8011406:	46c2      	mov	sl, r8
 8011408:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80114b8 <D16_1CH_HTONS_VOL_HP+0xf8>
 801140c:	9201      	str	r2, [sp, #4]
 801140e:	f85b 2b02 	ldr.w	r2, [fp], #2
 8011412:	ba52      	rev16	r2, r2
 8011414:	b2d0      	uxtb	r0, r2
 8011416:	f3c2 2107 	ubfx	r1, r2, #8, #8
 801141a:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 801141e:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 8011422:	4413      	add	r3, r2
 8011424:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 8011428:	f3c3 0209 	ubfx	r2, r3, #0, #10
 801142c:	f3c0 0109 	ubfx	r1, r0, #0, #10
 8011430:	0a83      	lsrs	r3, r0, #10
 8011432:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 8011436:	491e      	ldr	r1, [pc, #120]	@ (80114b0 <D16_1CH_HTONS_VOL_HP+0xf0>)
 8011438:	fb22 4101 	smlad	r1, r2, r1, r4
 801143c:	481d      	ldr	r0, [pc, #116]	@ (80114b4 <D16_1CH_HTONS_VOL_HP+0xf4>)
 801143e:	fb22 f400 	smuad	r4, r2, r0
 8011442:	f5a1 6200 	sub.w	r2, r1, #2048	@ 0x800
 8011446:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 801144a:	f04f 0900 	mov.w	r9, #0
 801144e:	1990      	adds	r0, r2, r6
 8011450:	1b40      	subs	r0, r0, r5
 8011452:	4615      	mov	r5, r2
 8011454:	17c7      	asrs	r7, r0, #31
 8011456:	fba0 010e 	umull	r0, r1, r0, lr
 801145a:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 801145e:	fb0e 1107 	mla	r1, lr, r7, r1
 8011462:	f141 0100 	adc.w	r1, r1, #0
 8011466:	0448      	lsls	r0, r1, #17
 8011468:	004e      	lsls	r6, r1, #1
 801146a:	9902      	ldr	r1, [sp, #8]
 801146c:	fbc0 8901 	smlal	r8, r9, r0, r1
 8011470:	ea4f 01a9 	mov.w	r1, r9, asr #2
 8011474:	f301 010f 	ssat	r1, #16, r1
 8011478:	f82a 1f02 	strh.w	r1, [sl, #2]!
 801147c:	9901      	ldr	r1, [sp, #4]
 801147e:	458b      	cmp	fp, r1
 8011480:	d1c5      	bne.n	801140e <D16_1CH_HTONS_VOL_HP+0x4e>
 8011482:	f8dd a014 	ldr.w	sl, [sp, #20]
 8011486:	9904      	ldr	r1, [sp, #16]
 8011488:	2000      	movs	r0, #0
 801148a:	f8ca 301c 	str.w	r3, [sl, #28]
 801148e:	9b03      	ldr	r3, [sp, #12]
 8011490:	f8ca 4008 	str.w	r4, [sl, #8]
 8011494:	f8ca 100c 	str.w	r1, [sl, #12]
 8011498:	f8ca 6010 	str.w	r6, [sl, #16]
 801149c:	f8ca 2014 	str.w	r2, [sl, #20]
 80114a0:	f8ca 3018 	str.w	r3, [sl, #24]
 80114a4:	b007      	add	sp, #28
 80114a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80114aa:	462a      	mov	r2, r5
 80114ac:	4601      	mov	r1, r0
 80114ae:	e7eb      	b.n	8011488 <D16_1CH_HTONS_VOL_HP+0xc8>
 80114b0:	00030001 	.word	0x00030001
 80114b4:	00010003 	.word	0x00010003
 80114b8:	24000000 	.word	0x24000000

080114bc <D24_1CH_HTONS_VOL_HP>:
 80114bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80114c0:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80114c2:	b087      	sub	sp, #28
 80114c4:	4616      	mov	r6, r2
 80114c6:	6914      	ldr	r4, [r2, #16]
 80114c8:	9302      	str	r3, [sp, #8]
 80114ca:	9205      	str	r2, [sp, #20]
 80114cc:	f8d2 9014 	ldr.w	r9, [r2, #20]
 80114d0:	6b37      	ldr	r7, [r6, #48]	@ 0x30
 80114d2:	6992      	ldr	r2, [r2, #24]
 80114d4:	9d02      	ldr	r5, [sp, #8]
 80114d6:	9204      	str	r2, [sp, #16]
 80114d8:	68b3      	ldr	r3, [r6, #8]
 80114da:	69f2      	ldr	r2, [r6, #28]
 80114dc:	f8d6 800c 	ldr.w	r8, [r6, #12]
 80114e0:	9703      	str	r7, [sp, #12]
 80114e2:	f8d6 a020 	ldr.w	sl, [r6, #32]
 80114e6:	2d00      	cmp	r5, #0
 80114e8:	d076      	beq.n	80115d8 <D24_1CH_HTONS_VOL_HP+0x11c>
 80114ea:	f04f 0e00 	mov.w	lr, #0
 80114ee:	f1a1 0b02 	sub.w	fp, r1, #2
 80114f2:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 80115e8 <D24_1CH_HTONS_VOL_HP+0x12c>
 80114f6:	f8cd 8004 	str.w	r8, [sp, #4]
 80114fa:	e052      	b.n	80115a2 <D24_1CH_HTONS_VOL_HP+0xe6>
 80114fc:	7801      	ldrb	r1, [r0, #0]
 80114fe:	3002      	adds	r0, #2
 8011500:	7847      	ldrb	r7, [r0, #1]
 8011502:	0209      	lsls	r1, r1, #8
 8011504:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8011508:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 801150c:	442f      	add	r7, r5
 801150e:	b2fd      	uxtb	r5, r7
 8011510:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8011514:	0c3f      	lsrs	r7, r7, #16
 8011516:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 801151a:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 801151e:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8011522:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8011526:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 801152a:	f3c5 0509 	ubfx	r5, r5, #0, #10
 801152e:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8011532:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8011536:	9e01      	ldr	r6, [sp, #4]
 8011538:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 801153c:	4928      	ldr	r1, [pc, #160]	@ (80115e0 <D24_1CH_HTONS_VOL_HP+0x124>)
 801153e:	fb25 6701 	smlad	r7, r5, r1, r6
 8011542:	4928      	ldr	r1, [pc, #160]	@ (80115e4 <D24_1CH_HTONS_VOL_HP+0x128>)
 8011544:	fb25 3801 	smlad	r8, r5, r1, r3
 8011548:	f3c2 0309 	ubfx	r3, r2, #0, #10
 801154c:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8011550:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 8011554:	9301      	str	r3, [sp, #4]
 8011556:	2301      	movs	r3, #1
 8011558:	fb25 f503 	smuad	r5, r5, r3
 801155c:	f5a7 51d8 	sub.w	r1, r7, #6912	@ 0x1b00
 8011560:	449e      	add	lr, r3
 8011562:	1973      	adds	r3, r6, r5
 8011564:	f04f 0800 	mov.w	r8, #0
 8011568:	440c      	add	r4, r1
 801156a:	eba4 0409 	sub.w	r4, r4, r9
 801156e:	4689      	mov	r9, r1
 8011570:	17e7      	asrs	r7, r4, #31
 8011572:	fba4 450a 	umull	r4, r5, r4, sl
 8011576:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 801157a:	fb0a 5507 	mla	r5, sl, r7, r5
 801157e:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8011582:	f145 0500 	adc.w	r5, r5, #0
 8011586:	03ee      	lsls	r6, r5, #15
 8011588:	006c      	lsls	r4, r5, #1
 801158a:	9d03      	ldr	r5, [sp, #12]
 801158c:	fbc5 7806 	smlal	r7, r8, r5, r6
 8011590:	4647      	mov	r7, r8
 8011592:	10bd      	asrs	r5, r7, #2
 8011594:	f305 050f 	ssat	r5, #16, r5
 8011598:	f82b 5f02 	strh.w	r5, [fp, #2]!
 801159c:	9d02      	ldr	r5, [sp, #8]
 801159e:	45ae      	cmp	lr, r5
 80115a0:	d00b      	beq.n	80115ba <D24_1CH_HTONS_VOL_HP+0xfe>
 80115a2:	f01e 0f01 	tst.w	lr, #1
 80115a6:	d0a9      	beq.n	80114fc <D24_1CH_HTONS_VOL_HP+0x40>
 80115a8:	78c1      	ldrb	r1, [r0, #3]
 80115aa:	7887      	ldrb	r7, [r0, #2]
 80115ac:	0209      	lsls	r1, r1, #8
 80115ae:	f810 5b04 	ldrb.w	r5, [r0], #4
 80115b2:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 80115b6:	442f      	add	r7, r5
 80115b8:	e7a9      	b.n	801150e <D24_1CH_HTONS_VOL_HP+0x52>
 80115ba:	f8dd 8004 	ldr.w	r8, [sp, #4]
 80115be:	9d05      	ldr	r5, [sp, #20]
 80115c0:	2000      	movs	r0, #0
 80115c2:	6169      	str	r1, [r5, #20]
 80115c4:	9904      	ldr	r1, [sp, #16]
 80115c6:	60ab      	str	r3, [r5, #8]
 80115c8:	f8c5 800c 	str.w	r8, [r5, #12]
 80115cc:	61ea      	str	r2, [r5, #28]
 80115ce:	612c      	str	r4, [r5, #16]
 80115d0:	61a9      	str	r1, [r5, #24]
 80115d2:	b007      	add	sp, #28
 80115d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80115d8:	4649      	mov	r1, r9
 80115da:	4635      	mov	r5, r6
 80115dc:	e7f0      	b.n	80115c0 <D24_1CH_HTONS_VOL_HP+0x104>
 80115de:	bf00      	nop
 80115e0:	00030001 	.word	0x00030001
 80115e4:	00060007 	.word	0x00060007
 80115e8:	24000000 	.word	0x24000000

080115ec <D32_1CH_HTONS_VOL_HP>:
 80115ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80115f0:	4693      	mov	fp, r2
 80115f2:	b087      	sub	sp, #28
 80115f4:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80115f6:	f8db 3018 	ldr.w	r3, [fp, #24]
 80115fa:	f8db 5030 	ldr.w	r5, [fp, #48]	@ 0x30
 80115fe:	9304      	str	r3, [sp, #16]
 8011600:	f8db 4010 	ldr.w	r4, [fp, #16]
 8011604:	f8db c014 	ldr.w	ip, [fp, #20]
 8011608:	f8db 601c 	ldr.w	r6, [fp, #28]
 801160c:	f8db 3008 	ldr.w	r3, [fp, #8]
 8011610:	f8db e00c 	ldr.w	lr, [fp, #12]
 8011614:	9502      	str	r5, [sp, #8]
 8011616:	f8db a020 	ldr.w	sl, [fp, #32]
 801161a:	2a00      	cmp	r2, #0
 801161c:	d07d      	beq.n	801171a <D32_1CH_HTONS_VOL_HP+0x12e>
 801161e:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8011622:	9101      	str	r1, [sp, #4]
 8011624:	f8cd b014 	str.w	fp, [sp, #20]
 8011628:	4621      	mov	r1, r4
 801162a:	4f3d      	ldr	r7, [pc, #244]	@ (8011720 <D32_1CH_HTONS_VOL_HP+0x134>)
 801162c:	4693      	mov	fp, r2
 801162e:	f8cd a00c 	str.w	sl, [sp, #12]
 8011632:	f850 2b04 	ldr.w	r2, [r0], #4
 8011636:	fa92 f992 	rev16.w	r9, r2
 801163a:	fa5f f889 	uxtb.w	r8, r9
 801163e:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8011642:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8011646:	ea4f 6919 	mov.w	r9, r9, lsr #24
 801164a:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 801164e:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8011652:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 8011656:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 801165a:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 801165e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8011662:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8011666:	4c2f      	ldr	r4, [pc, #188]	@ (8011724 <D32_1CH_HTONS_VOL_HP+0x138>)
 8011668:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 801166c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8011670:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8011674:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8011678:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 801167c:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8011680:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 8011684:	fb22 ee04 	smlad	lr, r2, r4, lr
 8011688:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 801168c:	fb25 e904 	smlad	r9, r5, r4, lr
 8011690:	4c25      	ldr	r4, [pc, #148]	@ (8011728 <D32_1CH_HTONS_VOL_HP+0x13c>)
 8011692:	fb22 3e04 	smlad	lr, r2, r4, r3
 8011696:	4b25      	ldr	r3, [pc, #148]	@ (801172c <D32_1CH_HTONS_VOL_HP+0x140>)
 8011698:	fb25 ee03 	smlad	lr, r5, r3, lr
 801169c:	2301      	movs	r3, #1
 801169e:	fb22 f203 	smuad	r2, r2, r3
 80116a2:	4b23      	ldr	r3, [pc, #140]	@ (8011730 <D32_1CH_HTONS_VOL_HP+0x144>)
 80116a4:	fb25 2303 	smlad	r3, r5, r3, r2
 80116a8:	f5a9 4280 	sub.w	r2, r9, #16384	@ 0x4000
 80116ac:	f04f 0a00 	mov.w	sl, #0
 80116b0:	4411      	add	r1, r2
 80116b2:	eba1 040c 	sub.w	r4, r1, ip
 80116b6:	9903      	ldr	r1, [sp, #12]
 80116b8:	4694      	mov	ip, r2
 80116ba:	ea4f 79e4 	mov.w	r9, r4, asr #31
 80116be:	fba4 4501 	umull	r4, r5, r4, r1
 80116c2:	fb01 5509 	mla	r5, r1, r9, r5
 80116c6:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 80116ca:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 80116ce:	9c02      	ldr	r4, [sp, #8]
 80116d0:	f145 0500 	adc.w	r5, r5, #0
 80116d4:	ea4f 3885 	mov.w	r8, r5, lsl #14
 80116d8:	0069      	lsls	r1, r5, #1
 80116da:	fbc8 9a04 	smlal	r9, sl, r8, r4
 80116de:	9c01      	ldr	r4, [sp, #4]
 80116e0:	ea4f 05aa 	mov.w	r5, sl, asr #2
 80116e4:	f305 050f 	ssat	r5, #16, r5
 80116e8:	f824 5b02 	strh.w	r5, [r4], #2
 80116ec:	455c      	cmp	r4, fp
 80116ee:	9401      	str	r4, [sp, #4]
 80116f0:	d19f      	bne.n	8011632 <D32_1CH_HTONS_VOL_HP+0x46>
 80116f2:	460c      	mov	r4, r1
 80116f4:	f8dd b014 	ldr.w	fp, [sp, #20]
 80116f8:	f8cb 3008 	str.w	r3, [fp, #8]
 80116fc:	2000      	movs	r0, #0
 80116fe:	9b04      	ldr	r3, [sp, #16]
 8011700:	f8cb e00c 	str.w	lr, [fp, #12]
 8011704:	f8cb 601c 	str.w	r6, [fp, #28]
 8011708:	f8cb 4010 	str.w	r4, [fp, #16]
 801170c:	f8cb 2014 	str.w	r2, [fp, #20]
 8011710:	f8cb 3018 	str.w	r3, [fp, #24]
 8011714:	b007      	add	sp, #28
 8011716:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801171a:	4662      	mov	r2, ip
 801171c:	e7ec      	b.n	80116f8 <D32_1CH_HTONS_VOL_HP+0x10c>
 801171e:	bf00      	nop
 8011720:	24000000 	.word	0x24000000
 8011724:	00060003 	.word	0x00060003
 8011728:	000a000c 	.word	0x000a000c
 801172c:	000c000a 	.word	0x000c000a
 8011730:	00030006 	.word	0x00030006

08011734 <D48_1CH_HTONS_VOL_HP>:
 8011734:	4613      	mov	r3, r2
 8011736:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801173a:	461c      	mov	r4, r3
 801173c:	b087      	sub	sp, #28
 801173e:	4680      	mov	r8, r0
 8011740:	691e      	ldr	r6, [r3, #16]
 8011742:	4610      	mov	r0, r2
 8011744:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8011748:	699b      	ldr	r3, [r3, #24]
 801174a:	9205      	str	r2, [sp, #20]
 801174c:	9304      	str	r3, [sp, #16]
 801174e:	69c5      	ldr	r5, [r0, #28]
 8011750:	6883      	ldr	r3, [r0, #8]
 8011752:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8011756:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8011758:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 801175a:	f8d4 b020 	ldr.w	fp, [r4, #32]
 801175e:	9002      	str	r0, [sp, #8]
 8011760:	2a00      	cmp	r2, #0
 8011762:	f000 8097 	beq.w	8011894 <D48_1CH_HTONS_VOL_HP+0x160>
 8011766:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 801176a:	468c      	mov	ip, r1
 801176c:	4c4a      	ldr	r4, [pc, #296]	@ (8011898 <D48_1CH_HTONS_VOL_HP+0x164>)
 801176e:	4619      	mov	r1, r3
 8011770:	4640      	mov	r0, r8
 8011772:	9203      	str	r2, [sp, #12]
 8011774:	f8cd 9004 	str.w	r9, [sp, #4]
 8011778:	6803      	ldr	r3, [r0, #0]
 801177a:	3006      	adds	r0, #6
 801177c:	f850 2c02 	ldr.w	r2, [r0, #-2]
 8011780:	ba5b      	rev16	r3, r3
 8011782:	fa92 fa92 	rev16.w	sl, r2
 8011786:	fa5f f883 	uxtb.w	r8, r3
 801178a:	f3c3 2707 	ubfx	r7, r3, #8, #8
 801178e:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8011792:	0e1b      	lsrs	r3, r3, #24
 8011794:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 8011798:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 801179c:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 80117a0:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 80117a4:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 80117a8:	fa5f f28a 	uxtb.w	r2, sl
 80117ac:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 80117b0:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 80117b4:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80117b8:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80117bc:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 80117c0:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 80117c4:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80117c8:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 80117cc:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80117d0:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 80117d4:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 80117d8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80117dc:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 80117e0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80117e4:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 80117e8:	f3c5 0309 	ubfx	r3, r5, #0, #10
 80117ec:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 80117f0:	4b2a      	ldr	r3, [pc, #168]	@ (801189c <D48_1CH_HTONS_VOL_HP+0x168>)
 80117f2:	fb27 ea03 	smlad	sl, r7, r3, lr
 80117f6:	4b2a      	ldr	r3, [pc, #168]	@ (80118a0 <D48_1CH_HTONS_VOL_HP+0x16c>)
 80117f8:	fb28 aa03 	smlad	sl, r8, r3, sl
 80117fc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8011800:	fb22 aa03 	smlad	sl, r2, r3, sl
 8011804:	4b27      	ldr	r3, [pc, #156]	@ (80118a4 <D48_1CH_HTONS_VOL_HP+0x170>)
 8011806:	fb27 1e03 	smlad	lr, r7, r3, r1
 801180a:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 801180e:	fb28 ee03 	smlad	lr, r8, r3, lr
 8011812:	4b25      	ldr	r3, [pc, #148]	@ (80118a8 <D48_1CH_HTONS_VOL_HP+0x174>)
 8011814:	fb22 ee03 	smlad	lr, r2, r3, lr
 8011818:	f04f 0901 	mov.w	r9, #1
 801181c:	fb27 f709 	smuad	r7, r7, r9
 8011820:	4b22      	ldr	r3, [pc, #136]	@ (80118ac <D48_1CH_HTONS_VOL_HP+0x178>)
 8011822:	fb28 7803 	smlad	r8, r8, r3, r7
 8011826:	4b22      	ldr	r3, [pc, #136]	@ (80118b0 <D48_1CH_HTONS_VOL_HP+0x17c>)
 8011828:	fb22 8103 	smlad	r1, r2, r3, r8
 801182c:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 8011830:	9b01      	ldr	r3, [sp, #4]
 8011832:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8011836:	eb0a 0206 	add.w	r2, sl, r6
 801183a:	f8cd a004 	str.w	sl, [sp, #4]
 801183e:	1ad2      	subs	r2, r2, r3
 8011840:	17d7      	asrs	r7, r2, #31
 8011842:	fba2 230b 	umull	r2, r3, r2, fp
 8011846:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 801184a:	fb0b 3307 	mla	r3, fp, r7, r3
 801184e:	f143 0300 	adc.w	r3, r3, #0
 8011852:	031a      	lsls	r2, r3, #12
 8011854:	fa03 f609 	lsl.w	r6, r3, r9
 8011858:	9b02      	ldr	r3, [sp, #8]
 801185a:	f04f 0900 	mov.w	r9, #0
 801185e:	fbc2 8903 	smlal	r8, r9, r2, r3
 8011862:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8011866:	f303 030f 	ssat	r3, #16, r3
 801186a:	f82c 3b02 	strh.w	r3, [ip], #2
 801186e:	9b03      	ldr	r3, [sp, #12]
 8011870:	459c      	cmp	ip, r3
 8011872:	d181      	bne.n	8011778 <D48_1CH_HTONS_VOL_HP+0x44>
 8011874:	460b      	mov	r3, r1
 8011876:	9905      	ldr	r1, [sp, #20]
 8011878:	2000      	movs	r0, #0
 801187a:	460a      	mov	r2, r1
 801187c:	608b      	str	r3, [r1, #8]
 801187e:	f8c1 e00c 	str.w	lr, [r1, #12]
 8011882:	61cd      	str	r5, [r1, #28]
 8011884:	610e      	str	r6, [r1, #16]
 8011886:	f8c1 a014 	str.w	sl, [r1, #20]
 801188a:	9904      	ldr	r1, [sp, #16]
 801188c:	6191      	str	r1, [r2, #24]
 801188e:	b007      	add	sp, #28
 8011890:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011894:	46ca      	mov	sl, r9
 8011896:	e7ee      	b.n	8011876 <D48_1CH_HTONS_VOL_HP+0x142>
 8011898:	24000000 	.word	0x24000000
 801189c:	000f000a 	.word	0x000f000a
 80118a0:	00060003 	.word	0x00060003
 80118a4:	00150019 	.word	0x00150019
 80118a8:	00190015 	.word	0x00190015
 80118ac:	00030006 	.word	0x00030006
 80118b0:	000a000f 	.word	0x000a000f

080118b4 <D64_1CH_HTONS_VOL_HP>:
 80118b4:	4613      	mov	r3, r2
 80118b6:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80118ba:	f8d3 c014 	ldr.w	ip, [r3, #20]
 80118be:	461d      	mov	r5, r3
 80118c0:	b087      	sub	sp, #28
 80118c2:	699b      	ldr	r3, [r3, #24]
 80118c4:	462e      	mov	r6, r5
 80118c6:	69ef      	ldr	r7, [r5, #28]
 80118c8:	9304      	str	r3, [sp, #16]
 80118ca:	4614      	mov	r4, r2
 80118cc:	68ab      	ldr	r3, [r5, #8]
 80118ce:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 80118d2:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 80118d4:	9205      	str	r2, [sp, #20]
 80118d6:	9501      	str	r5, [sp, #4]
 80118d8:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 80118da:	6a35      	ldr	r5, [r6, #32]
 80118dc:	6924      	ldr	r4, [r4, #16]
 80118de:	9502      	str	r5, [sp, #8]
 80118e0:	2a00      	cmp	r2, #0
 80118e2:	f000 80ae 	beq.w	8011a42 <D64_1CH_HTONS_VOL_HP+0x18e>
 80118e6:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 80118ea:	4e57      	ldr	r6, [pc, #348]	@ (8011a48 <D64_1CH_HTONS_VOL_HP+0x194>)
 80118ec:	461d      	mov	r5, r3
 80118ee:	9203      	str	r2, [sp, #12]
 80118f0:	f850 2b08 	ldr.w	r2, [r0], #8
 80118f4:	f850 3c04 	ldr.w	r3, [r0, #-4]
 80118f8:	fa92 f892 	rev16.w	r8, r2
 80118fc:	fa93 fb93 	rev16.w	fp, r3
 8011900:	fa5f f288 	uxtb.w	r2, r8
 8011904:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8011908:	f3c8 4307 	ubfx	r3, r8, #16, #8
 801190c:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8011910:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 8011914:	fa5f f28b 	uxtb.w	r2, fp
 8011918:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 801191c:	4457      	add	r7, sl
 801191e:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011922:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8011926:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 801192a:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 801192e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8011932:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 8011936:	f3cb 2307 	ubfx	r3, fp, #8, #8
 801193a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 801193e:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 8011942:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011946:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 801194a:	f3cb 4707 	ubfx	r7, fp, #16, #8
 801194e:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8011952:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8011956:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 801195a:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 801195e:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8011962:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8011966:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 801196a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 801196e:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 8011972:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011976:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 801197a:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 801197e:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 8011982:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011986:	f3cb 0209 	ubfx	r2, fp, #0, #10
 801198a:	ea4f 279b 	mov.w	r7, fp, lsr #10
 801198e:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 8011992:	4a2e      	ldr	r2, [pc, #184]	@ (8011a4c <D64_1CH_HTONS_VOL_HP+0x198>)
 8011994:	fb29 ee02 	smlad	lr, r9, r2, lr
 8011998:	4a2d      	ldr	r2, [pc, #180]	@ (8011a50 <D64_1CH_HTONS_VOL_HP+0x19c>)
 801199a:	fb28 ee02 	smlad	lr, r8, r2, lr
 801199e:	4a2d      	ldr	r2, [pc, #180]	@ (8011a54 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 80119a0:	fb23 ee02 	smlad	lr, r3, r2, lr
 80119a4:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 80119a8:	fb2b ea0a 	smlad	sl, fp, sl, lr
 80119ac:	4a2a      	ldr	r2, [pc, #168]	@ (8011a58 <D64_1CH_HTONS_VOL_HP+0x1a4>)
 80119ae:	fb29 5e02 	smlad	lr, r9, r2, r5
 80119b2:	fb2b ee12 	smladx	lr, fp, r2, lr
 80119b6:	4a29      	ldr	r2, [pc, #164]	@ (8011a5c <D64_1CH_HTONS_VOL_HP+0x1a8>)
 80119b8:	fb28 ee02 	smlad	lr, r8, r2, lr
 80119bc:	fb23 ee12 	smladx	lr, r3, r2, lr
 80119c0:	2501      	movs	r5, #1
 80119c2:	fb29 f905 	smuad	r9, r9, r5
 80119c6:	4a26      	ldr	r2, [pc, #152]	@ (8011a60 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 80119c8:	fb28 9802 	smlad	r8, r8, r2, r9
 80119cc:	4a25      	ldr	r2, [pc, #148]	@ (8011a64 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 80119ce:	fb23 8302 	smlad	r3, r3, r2, r8
 80119d2:	4a25      	ldr	r2, [pc, #148]	@ (8011a68 <D64_1CH_HTONS_VOL_HP+0x1b4>)
 80119d4:	fb2b 3502 	smlad	r5, fp, r2, r3
 80119d8:	f5aa 3a00 	sub.w	sl, sl, #131072	@ 0x20000
 80119dc:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 80119e0:	eb0a 0204 	add.w	r2, sl, r4
 80119e4:	9c02      	ldr	r4, [sp, #8]
 80119e6:	eba2 020c 	sub.w	r2, r2, ip
 80119ea:	46d4      	mov	ip, sl
 80119ec:	ea4f 79e2 	mov.w	r9, r2, asr #31
 80119f0:	fba2 2304 	umull	r2, r3, r2, r4
 80119f4:	fb04 3309 	mla	r3, r4, r9, r3
 80119f8:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 80119fc:	f04f 0900 	mov.w	r9, #0
 8011a00:	f143 0300 	adc.w	r3, r3, #0
 8011a04:	02da      	lsls	r2, r3, #11
 8011a06:	005c      	lsls	r4, r3, #1
 8011a08:	9b01      	ldr	r3, [sp, #4]
 8011a0a:	fbc3 8902 	smlal	r8, r9, r3, r2
 8011a0e:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8011a12:	f303 030f 	ssat	r3, #16, r3
 8011a16:	f821 3b02 	strh.w	r3, [r1], #2
 8011a1a:	9b03      	ldr	r3, [sp, #12]
 8011a1c:	4299      	cmp	r1, r3
 8011a1e:	f47f af67 	bne.w	80118f0 <D64_1CH_HTONS_VOL_HP+0x3c>
 8011a22:	462b      	mov	r3, r5
 8011a24:	9905      	ldr	r1, [sp, #20]
 8011a26:	2000      	movs	r0, #0
 8011a28:	460a      	mov	r2, r1
 8011a2a:	608b      	str	r3, [r1, #8]
 8011a2c:	f8c1 e00c 	str.w	lr, [r1, #12]
 8011a30:	61cf      	str	r7, [r1, #28]
 8011a32:	610c      	str	r4, [r1, #16]
 8011a34:	f8c1 a014 	str.w	sl, [r1, #20]
 8011a38:	9904      	ldr	r1, [sp, #16]
 8011a3a:	6191      	str	r1, [r2, #24]
 8011a3c:	b007      	add	sp, #28
 8011a3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011a42:	46e2      	mov	sl, ip
 8011a44:	e7ee      	b.n	8011a24 <D64_1CH_HTONS_VOL_HP+0x170>
 8011a46:	bf00      	nop
 8011a48:	24000000 	.word	0x24000000
 8011a4c:	001c0015 	.word	0x001c0015
 8011a50:	000f000a 	.word	0x000f000a
 8011a54:	00060003 	.word	0x00060003
 8011a58:	0024002a 	.word	0x0024002a
 8011a5c:	002e0030 	.word	0x002e0030
 8011a60:	00030006 	.word	0x00030006
 8011a64:	000a000f 	.word	0x000a000f
 8011a68:	0015001c 	.word	0x0015001c

08011a6c <D80_1CH_HTONS_VOL_HP>:
 8011a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a70:	4614      	mov	r4, r2
 8011a72:	b089      	sub	sp, #36	@ 0x24
 8011a74:	4613      	mov	r3, r2
 8011a76:	6924      	ldr	r4, [r4, #16]
 8011a78:	461d      	mov	r5, r3
 8011a7a:	9207      	str	r2, [sp, #28]
 8011a7c:	9401      	str	r4, [sp, #4]
 8011a7e:	461c      	mov	r4, r3
 8011a80:	695b      	ldr	r3, [r3, #20]
 8011a82:	68a7      	ldr	r7, [r4, #8]
 8011a84:	9302      	str	r3, [sp, #8]
 8011a86:	69a3      	ldr	r3, [r4, #24]
 8011a88:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8011a8c:	9306      	str	r3, [sp, #24]
 8011a8e:	69e3      	ldr	r3, [r4, #28]
 8011a90:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8011a92:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8011a94:	9403      	str	r4, [sp, #12]
 8011a96:	6a2c      	ldr	r4, [r5, #32]
 8011a98:	9404      	str	r4, [sp, #16]
 8011a9a:	2a00      	cmp	r2, #0
 8011a9c:	f000 80ca 	beq.w	8011c34 <D80_1CH_HTONS_VOL_HP+0x1c8>
 8011aa0:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8011aa4:	4e64      	ldr	r6, [pc, #400]	@ (8011c38 <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8011aa6:	468c      	mov	ip, r1
 8011aa8:	4682      	mov	sl, r0
 8011aaa:	9205      	str	r2, [sp, #20]
 8011aac:	f8da 2008 	ldr.w	r2, [sl, #8]
 8011ab0:	e89a 0011 	ldmia.w	sl, {r0, r4}
 8011ab4:	f10a 0a0a 	add.w	sl, sl, #10
 8011ab8:	ba40      	rev16	r0, r0
 8011aba:	ba64      	rev16	r4, r4
 8011abc:	fa92 f992 	rev16.w	r9, r2
 8011ac0:	b2c5      	uxtb	r5, r0
 8011ac2:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8011ac6:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8011aca:	0e00      	lsrs	r0, r0, #24
 8011acc:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8011ad0:	b2e5      	uxtb	r5, r4
 8011ad2:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 8011ad6:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 8011ada:	4443      	add	r3, r8
 8011adc:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8011ae0:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8011ae4:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 8011ae8:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8011aec:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011af0:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 8011af4:	f3c4 2207 	ubfx	r2, r4, #8, #8
 8011af8:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8011afc:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 8011b00:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8011b04:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8011b08:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8011b0c:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 8011b10:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8011b14:	0e23      	lsrs	r3, r4, #24
 8011b16:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 8011b1a:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8011b1e:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 8011b22:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8011b26:	fa5f f989 	uxtb.w	r9, r9
 8011b2a:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8011b2e:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8011b32:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8011b36:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8011b3a:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 8011b3e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8011b42:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8011b46:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8011b4a:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 8011b4e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8011b52:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 8011b56:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 8011b5a:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8011b5e:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8011b62:	f3cb 0209 	ubfx	r2, fp, #0, #10
 8011b66:	ea4f 239b 	mov.w	r3, fp, lsr #10
 8011b6a:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 8011b6e:	4a33      	ldr	r2, [pc, #204]	@ (8011c3c <D80_1CH_HTONS_VOL_HP+0x1d0>)
 8011b70:	fb21 ee02 	smlad	lr, r1, r2, lr
 8011b74:	4a32      	ldr	r2, [pc, #200]	@ (8011c40 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 8011b76:	fb20 ee02 	smlad	lr, r0, r2, lr
 8011b7a:	4a32      	ldr	r2, [pc, #200]	@ (8011c44 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 8011b7c:	fb25 ee02 	smlad	lr, r5, r2, lr
 8011b80:	4a31      	ldr	r2, [pc, #196]	@ (8011c48 <D80_1CH_HTONS_VOL_HP+0x1dc>)
 8011b82:	fb24 ee02 	smlad	lr, r4, r2, lr
 8011b86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8011b8a:	fb29 eb02 	smlad	fp, r9, r2, lr
 8011b8e:	4a2f      	ldr	r2, [pc, #188]	@ (8011c4c <D80_1CH_HTONS_VOL_HP+0x1e0>)
 8011b90:	fb21 7702 	smlad	r7, r1, r2, r7
 8011b94:	4a2e      	ldr	r2, [pc, #184]	@ (8011c50 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 8011b96:	fb20 7702 	smlad	r7, r0, r2, r7
 8011b9a:	f04f 1e4b 	mov.w	lr, #4915275	@ 0x4b004b
 8011b9e:	fb25 7e0e 	smlad	lr, r5, lr, r7
 8011ba2:	4a2c      	ldr	r2, [pc, #176]	@ (8011c54 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 8011ba4:	fb24 ee02 	smlad	lr, r4, r2, lr
 8011ba8:	4a2b      	ldr	r2, [pc, #172]	@ (8011c58 <D80_1CH_HTONS_VOL_HP+0x1ec>)
 8011baa:	fb29 ee02 	smlad	lr, r9, r2, lr
 8011bae:	f04f 0801 	mov.w	r8, #1
 8011bb2:	fb21 f808 	smuad	r8, r1, r8
 8011bb6:	4a29      	ldr	r2, [pc, #164]	@ (8011c5c <D80_1CH_HTONS_VOL_HP+0x1f0>)
 8011bb8:	fb20 8002 	smlad	r0, r0, r2, r8
 8011bbc:	4a28      	ldr	r2, [pc, #160]	@ (8011c60 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 8011bbe:	fb25 0002 	smlad	r0, r5, r2, r0
 8011bc2:	4a28      	ldr	r2, [pc, #160]	@ (8011c64 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 8011bc4:	fb24 0402 	smlad	r4, r4, r2, r0
 8011bc8:	4f27      	ldr	r7, [pc, #156]	@ (8011c68 <D80_1CH_HTONS_VOL_HP+0x1fc>)
 8011bca:	fb29 4707 	smlad	r7, r9, r7, r4
 8011bce:	f5ab 327a 	sub.w	r2, fp, #256000	@ 0x3e800
 8011bd2:	9901      	ldr	r1, [sp, #4]
 8011bd4:	9c04      	ldr	r4, [sp, #16]
 8011bd6:	2500      	movs	r5, #0
 8011bd8:	4411      	add	r1, r2
 8011bda:	4608      	mov	r0, r1
 8011bdc:	9902      	ldr	r1, [sp, #8]
 8011bde:	9202      	str	r2, [sp, #8]
 8011be0:	1a40      	subs	r0, r0, r1
 8011be2:	ea4f 79e0 	mov.w	r9, r0, asr #31
 8011be6:	fba0 0104 	umull	r0, r1, r0, r4
 8011bea:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8011bee:	fb04 1109 	mla	r1, r4, r9, r1
 8011bf2:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8011bf6:	f141 0100 	adc.w	r1, r1, #0
 8011bfa:	0288      	lsls	r0, r1, #10
 8011bfc:	0049      	lsls	r1, r1, #1
 8011bfe:	9101      	str	r1, [sp, #4]
 8011c00:	9903      	ldr	r1, [sp, #12]
 8011c02:	fbc1 4500 	smlal	r4, r5, r1, r0
 8011c06:	10a9      	asrs	r1, r5, #2
 8011c08:	f301 010f 	ssat	r1, #16, r1
 8011c0c:	f82c 1b02 	strh.w	r1, [ip], #2
 8011c10:	9905      	ldr	r1, [sp, #20]
 8011c12:	458c      	cmp	ip, r1
 8011c14:	f47f af4a 	bne.w	8011aac <D80_1CH_HTONS_VOL_HP+0x40>
 8011c18:	9c07      	ldr	r4, [sp, #28]
 8011c1a:	2000      	movs	r0, #0
 8011c1c:	9901      	ldr	r1, [sp, #4]
 8011c1e:	6162      	str	r2, [r4, #20]
 8011c20:	9a06      	ldr	r2, [sp, #24]
 8011c22:	60a7      	str	r7, [r4, #8]
 8011c24:	f8c4 e00c 	str.w	lr, [r4, #12]
 8011c28:	61e3      	str	r3, [r4, #28]
 8011c2a:	6121      	str	r1, [r4, #16]
 8011c2c:	61a2      	str	r2, [r4, #24]
 8011c2e:	b009      	add	sp, #36	@ 0x24
 8011c30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011c34:	9a02      	ldr	r2, [sp, #8]
 8011c36:	e7ef      	b.n	8011c18 <D80_1CH_HTONS_VOL_HP+0x1ac>
 8011c38:	24000000 	.word	0x24000000
 8011c3c:	002d0024 	.word	0x002d0024
 8011c40:	001c0015 	.word	0x001c0015
 8011c44:	000f000a 	.word	0x000f000a
 8011c48:	00060003 	.word	0x00060003
 8011c4c:	0037003f 	.word	0x0037003f
 8011c50:	00450049 	.word	0x00450049
 8011c54:	00490045 	.word	0x00490045
 8011c58:	003f0037 	.word	0x003f0037
 8011c5c:	00030006 	.word	0x00030006
 8011c60:	000a000f 	.word	0x000a000f
 8011c64:	0015001c 	.word	0x0015001c
 8011c68:	0024002d 	.word	0x0024002d

08011c6c <D128_1CH_HTONS_VOL_HP>:
 8011c6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c70:	b08d      	sub	sp, #52	@ 0x34
 8011c72:	4614      	mov	r4, r2
 8011c74:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8011c76:	920b      	str	r2, [sp, #44]	@ 0x2c
 8011c78:	6912      	ldr	r2, [r2, #16]
 8011c7a:	9202      	str	r2, [sp, #8]
 8011c7c:	4622      	mov	r2, r4
 8011c7e:	6964      	ldr	r4, [r4, #20]
 8011c80:	4615      	mov	r5, r2
 8011c82:	9405      	str	r4, [sp, #20]
 8011c84:	4614      	mov	r4, r2
 8011c86:	6992      	ldr	r2, [r2, #24]
 8011c88:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 8011c8c:	920a      	str	r2, [sp, #40]	@ 0x28
 8011c8e:	68ea      	ldr	r2, [r5, #12]
 8011c90:	68a4      	ldr	r4, [r4, #8]
 8011c92:	9203      	str	r2, [sp, #12]
 8011c94:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 8011c96:	9404      	str	r4, [sp, #16]
 8011c98:	9207      	str	r2, [sp, #28]
 8011c9a:	6a2a      	ldr	r2, [r5, #32]
 8011c9c:	9208      	str	r2, [sp, #32]
 8011c9e:	2b00      	cmp	r3, #0
 8011ca0:	f000 8129 	beq.w	8011ef6 <D128_1CH_HTONS_VOL_HP+0x28a>
 8011ca4:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8011ca8:	f100 0b10 	add.w	fp, r0, #16
 8011cac:	f8df 92a0 	ldr.w	r9, [pc, #672]	@ 8011f50 <D128_1CH_HTONS_VOL_HP+0x2e4>
 8011cb0:	9106      	str	r1, [sp, #24]
 8011cb2:	9309      	str	r3, [sp, #36]	@ 0x24
 8011cb4:	f1ab 0010 	sub.w	r0, fp, #16
 8011cb8:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 8011cbc:	c80d      	ldmia	r0, {r0, r2, r3}
 8011cbe:	ba40      	rev16	r0, r0
 8011cc0:	ba52      	rev16	r2, r2
 8011cc2:	ba5b      	rev16	r3, r3
 8011cc4:	fa91 fc91 	rev16.w	ip, r1
 8011cc8:	b2c5      	uxtb	r5, r0
 8011cca:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8011cce:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8011cd2:	0e00      	lsrs	r0, r0, #24
 8011cd4:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 8011cd8:	b2d5      	uxtb	r5, r2
 8011cda:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 8011cde:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8011ce2:	44b6      	add	lr, r6
 8011ce4:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 8011ce8:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 8011cec:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8011cf0:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8011cf4:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 8011cf8:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8011cfc:	0e12      	lsrs	r2, r2, #24
 8011cfe:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8011d02:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 8011d06:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8011d0a:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8011d0e:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8011d12:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 8011d16:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8011d1a:	b2da      	uxtb	r2, r3
 8011d1c:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8011d20:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8011d24:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 8011d28:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8011d2c:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8011d30:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8011d34:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 8011d38:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8011d3c:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 8011d40:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8011d44:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 8011d48:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8011d4c:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8011d50:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8011d54:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 8011d58:	0e1b      	lsrs	r3, r3, #24
 8011d5a:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8011d5e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8011d62:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 8011d66:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 8011d6a:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 8011d6e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8011d72:	fa5f f38c 	uxtb.w	r3, ip
 8011d76:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 8011d7a:	f3c8 0009 	ubfx	r0, r8, #0, #10
 8011d7e:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011d82:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8011d86:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 8011d8a:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 8011d8e:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 8011d92:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8011d96:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 8011d9a:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 8011d9e:	f3cc 4307 	ubfx	r3, ip, #16, #8
 8011da2:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 8011da6:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8011daa:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8011dae:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 8011db2:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8011db6:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 8011dba:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 8011dbe:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8011dc2:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 8011dc6:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 8011dca:	9b03      	ldr	r3, [sp, #12]
 8011dcc:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8011dd0:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8011dd4:	9201      	str	r2, [sp, #4]
 8011dd6:	f3ce 0209 	ubfx	r2, lr, #0, #10
 8011dda:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8011dde:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8011de2:	4a46      	ldr	r2, [pc, #280]	@ (8011efc <D128_1CH_HTONS_VOL_HP+0x290>)
 8011de4:	fb27 3802 	smlad	r8, r7, r2, r3
 8011de8:	4b45      	ldr	r3, [pc, #276]	@ (8011f00 <D128_1CH_HTONS_VOL_HP+0x294>)
 8011dea:	fb26 8803 	smlad	r8, r6, r3, r8
 8011dee:	4b45      	ldr	r3, [pc, #276]	@ (8011f04 <D128_1CH_HTONS_VOL_HP+0x298>)
 8011df0:	fb25 8803 	smlad	r8, r5, r3, r8
 8011df4:	4b44      	ldr	r3, [pc, #272]	@ (8011f08 <D128_1CH_HTONS_VOL_HP+0x29c>)
 8011df6:	fb24 8803 	smlad	r8, r4, r3, r8
 8011dfa:	4b44      	ldr	r3, [pc, #272]	@ (8011f0c <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8011dfc:	fb20 8803 	smlad	r8, r0, r3, r8
 8011e00:	4b43      	ldr	r3, [pc, #268]	@ (8011f10 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8011e02:	fb21 8803 	smlad	r8, r1, r3, r8
 8011e06:	4b43      	ldr	r3, [pc, #268]	@ (8011f14 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 8011e08:	9a01      	ldr	r2, [sp, #4]
 8011e0a:	fb22 8203 	smlad	r2, r2, r3, r8
 8011e0e:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8011e12:	fb2c 2808 	smlad	r8, ip, r8, r2
 8011e16:	4b40      	ldr	r3, [pc, #256]	@ (8011f18 <D128_1CH_HTONS_VOL_HP+0x2ac>)
 8011e18:	9a04      	ldr	r2, [sp, #16]
 8011e1a:	fb27 2a03 	smlad	sl, r7, r3, r2
 8011e1e:	4b3f      	ldr	r3, [pc, #252]	@ (8011f1c <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8011e20:	fb26 aa03 	smlad	sl, r6, r3, sl
 8011e24:	4a3e      	ldr	r2, [pc, #248]	@ (8011f20 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 8011e26:	fb25 aa02 	smlad	sl, r5, r2, sl
 8011e2a:	4a3e      	ldr	r2, [pc, #248]	@ (8011f24 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8011e2c:	fb24 aa02 	smlad	sl, r4, r2, sl
 8011e30:	4a3d      	ldr	r2, [pc, #244]	@ (8011f28 <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8011e32:	fb20 aa02 	smlad	sl, r0, r2, sl
 8011e36:	4a3d      	ldr	r2, [pc, #244]	@ (8011f2c <D128_1CH_HTONS_VOL_HP+0x2c0>)
 8011e38:	fb21 aa02 	smlad	sl, r1, r2, sl
 8011e3c:	4a3c      	ldr	r2, [pc, #240]	@ (8011f30 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8011e3e:	9b01      	ldr	r3, [sp, #4]
 8011e40:	fb23 a202 	smlad	r2, r3, r2, sl
 8011e44:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8011f54 <D128_1CH_HTONS_VOL_HP+0x2e8>
 8011e48:	fb2c 230a 	smlad	r3, ip, sl, r2
 8011e4c:	2201      	movs	r2, #1
 8011e4e:	9303      	str	r3, [sp, #12]
 8011e50:	fb27 f702 	smuad	r7, r7, r2
 8011e54:	4a37      	ldr	r2, [pc, #220]	@ (8011f34 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 8011e56:	fb26 7702 	smlad	r7, r6, r2, r7
 8011e5a:	4a37      	ldr	r2, [pc, #220]	@ (8011f38 <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8011e5c:	fb25 7702 	smlad	r7, r5, r2, r7
 8011e60:	4a36      	ldr	r2, [pc, #216]	@ (8011f3c <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8011e62:	fb24 7702 	smlad	r7, r4, r2, r7
 8011e66:	4a36      	ldr	r2, [pc, #216]	@ (8011f40 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 8011e68:	fb20 7702 	smlad	r7, r0, r2, r7
 8011e6c:	4a35      	ldr	r2, [pc, #212]	@ (8011f44 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 8011e6e:	fb21 7702 	smlad	r7, r1, r2, r7
 8011e72:	4a35      	ldr	r2, [pc, #212]	@ (8011f48 <D128_1CH_HTONS_VOL_HP+0x2dc>)
 8011e74:	9b01      	ldr	r3, [sp, #4]
 8011e76:	fb23 7202 	smlad	r2, r3, r2, r7
 8011e7a:	4b34      	ldr	r3, [pc, #208]	@ (8011f4c <D128_1CH_HTONS_VOL_HP+0x2e0>)
 8011e7c:	fb2c 2303 	smlad	r3, ip, r3, r2
 8011e80:	f5a8 1880 	sub.w	r8, r8, #1048576	@ 0x100000
 8011e84:	9304      	str	r3, [sp, #16]
 8011e86:	9b02      	ldr	r3, [sp, #8]
 8011e88:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 8011e8c:	9e08      	ldr	r6, [sp, #32]
 8011e8e:	2100      	movs	r1, #0
 8011e90:	4443      	add	r3, r8
 8011e92:	f10b 0b10 	add.w	fp, fp, #16
 8011e96:	461a      	mov	r2, r3
 8011e98:	9b05      	ldr	r3, [sp, #20]
 8011e9a:	f8cd 8014 	str.w	r8, [sp, #20]
 8011e9e:	1ad2      	subs	r2, r2, r3
 8011ea0:	17d5      	asrs	r5, r2, #31
 8011ea2:	fba2 2306 	umull	r2, r3, r2, r6
 8011ea6:	1812      	adds	r2, r2, r0
 8011ea8:	fb06 3305 	mla	r3, r6, r5, r3
 8011eac:	414b      	adcs	r3, r1
 8011eae:	021a      	lsls	r2, r3, #8
 8011eb0:	005b      	lsls	r3, r3, #1
 8011eb2:	9302      	str	r3, [sp, #8]
 8011eb4:	9b07      	ldr	r3, [sp, #28]
 8011eb6:	fbc3 0102 	smlal	r0, r1, r3, r2
 8011eba:	9a06      	ldr	r2, [sp, #24]
 8011ebc:	108b      	asrs	r3, r1, #2
 8011ebe:	f303 030f 	ssat	r3, #16, r3
 8011ec2:	f822 3b02 	strh.w	r3, [r2], #2
 8011ec6:	4613      	mov	r3, r2
 8011ec8:	9206      	str	r2, [sp, #24]
 8011eca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8011ecc:	4293      	cmp	r3, r2
 8011ece:	f47f aef1 	bne.w	8011cb4 <D128_1CH_HTONS_VOL_HP+0x48>
 8011ed2:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8011ed4:	2000      	movs	r0, #0
 8011ed6:	9904      	ldr	r1, [sp, #16]
 8011ed8:	4613      	mov	r3, r2
 8011eda:	f8c2 e01c 	str.w	lr, [r2, #28]
 8011ede:	6091      	str	r1, [r2, #8]
 8011ee0:	9903      	ldr	r1, [sp, #12]
 8011ee2:	60d1      	str	r1, [r2, #12]
 8011ee4:	9a02      	ldr	r2, [sp, #8]
 8011ee6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8011ee8:	611a      	str	r2, [r3, #16]
 8011eea:	f8c3 8014 	str.w	r8, [r3, #20]
 8011eee:	6199      	str	r1, [r3, #24]
 8011ef0:	b00d      	add	sp, #52	@ 0x34
 8011ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8011ef6:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8011efa:	e7ea      	b.n	8011ed2 <D128_1CH_HTONS_VOL_HP+0x266>
 8011efc:	00780069 	.word	0x00780069
 8011f00:	005b004e 	.word	0x005b004e
 8011f04:	00420037 	.word	0x00420037
 8011f08:	002d0024 	.word	0x002d0024
 8011f0c:	001c0015 	.word	0x001c0015
 8011f10:	000f000a 	.word	0x000f000a
 8011f14:	00060003 	.word	0x00060003
 8011f18:	00880096 	.word	0x00880096
 8011f1c:	00a200ac 	.word	0x00a200ac
 8011f20:	00b400ba 	.word	0x00b400ba
 8011f24:	00be00c0 	.word	0x00be00c0
 8011f28:	00c000be 	.word	0x00c000be
 8011f2c:	00ba00b4 	.word	0x00ba00b4
 8011f30:	00ac00a2 	.word	0x00ac00a2
 8011f34:	00030006 	.word	0x00030006
 8011f38:	000a000f 	.word	0x000a000f
 8011f3c:	0015001c 	.word	0x0015001c
 8011f40:	0024002d 	.word	0x0024002d
 8011f44:	00370042 	.word	0x00370042
 8011f48:	004e005b 	.word	0x004e005b
 8011f4c:	00690078 	.word	0x00690078
 8011f50:	24000000 	.word	0x24000000
 8011f54:	00960088 	.word	0x00960088

08011f58 <PDM_Filter_Init>:
 8011f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011f5a:	2240      	movs	r2, #64	@ 0x40
 8011f5c:	4604      	mov	r4, r0
 8011f5e:	2100      	movs	r1, #0
 8011f60:	300c      	adds	r0, #12
 8011f62:	f001 f96d 	bl	8013240 <memset>
 8011f66:	4939      	ldr	r1, [pc, #228]	@ (801204c <PDM_Filter_Init+0xf4>)
 8011f68:	4839      	ldr	r0, [pc, #228]	@ (8012050 <PDM_Filter_Init+0xf8>)
 8011f6a:	f000 f977 	bl	801225c <CRC_Lock>
 8011f6e:	2300      	movs	r3, #0
 8011f70:	2801      	cmp	r0, #1
 8011f72:	8820      	ldrh	r0, [r4, #0]
 8011f74:	4a35      	ldr	r2, [pc, #212]	@ (801204c <PDM_Filter_Init+0xf4>)
 8011f76:	8965      	ldrh	r5, [r4, #10]
 8011f78:	bf18      	it	ne
 8011f7a:	461a      	movne	r2, r3
 8011f7c:	8921      	ldrh	r1, [r4, #8]
 8011f7e:	2801      	cmp	r0, #1
 8011f80:	86a5      	strh	r5, [r4, #52]	@ 0x34
 8011f82:	6462      	str	r2, [r4, #68]	@ 0x44
 8011f84:	86e1      	strh	r1, [r4, #54]	@ 0x36
 8011f86:	61a3      	str	r3, [r4, #24]
 8011f88:	6123      	str	r3, [r4, #16]
 8011f8a:	6163      	str	r3, [r4, #20]
 8011f8c:	60e3      	str	r3, [r4, #12]
 8011f8e:	6263      	str	r3, [r4, #36]	@ 0x24
 8011f90:	61e3      	str	r3, [r4, #28]
 8011f92:	6223      	str	r3, [r4, #32]
 8011f94:	6423      	str	r3, [r4, #64]	@ 0x40
 8011f96:	d91c      	bls.n	8011fd2 <PDM_Filter_Init+0x7a>
 8011f98:	2003      	movs	r0, #3
 8011f9a:	2302      	movs	r3, #2
 8011f9c:	8862      	ldrh	r2, [r4, #2]
 8011f9e:	2a01      	cmp	r2, #1
 8011fa0:	d914      	bls.n	8011fcc <PDM_Filter_Init+0x74>
 8011fa2:	2140      	movs	r1, #64	@ 0x40
 8011fa4:	2300      	movs	r3, #0
 8011fa6:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 8011fa8:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 8011fac:	d00b      	beq.n	8011fc6 <PDM_Filter_Init+0x6e>
 8011fae:	6862      	ldr	r2, [r4, #4]
 8011fb0:	b11a      	cbz	r2, 8011fba <PDM_Filter_Init+0x62>
 8011fb2:	f043 0310 	orr.w	r3, r3, #16
 8011fb6:	62e2      	str	r2, [r4, #44]	@ 0x2c
 8011fb8:	6423      	str	r3, [r4, #64]	@ 0x40
 8011fba:	2200      	movs	r2, #0
 8011fbc:	8722      	strh	r2, [r4, #56]	@ 0x38
 8011fbe:	b908      	cbnz	r0, 8011fc4 <PDM_Filter_Init+0x6c>
 8011fc0:	3380      	adds	r3, #128	@ 0x80
 8011fc2:	6423      	str	r3, [r4, #64]	@ 0x40
 8011fc4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011fc6:	460b      	mov	r3, r1
 8011fc8:	6421      	str	r1, [r4, #64]	@ 0x40
 8011fca:	e7f0      	b.n	8011fae <PDM_Filter_Init+0x56>
 8011fcc:	d008      	beq.n	8011fe0 <PDM_Filter_Init+0x88>
 8011fce:	4618      	mov	r0, r3
 8011fd0:	e7e7      	b.n	8011fa2 <PDM_Filter_Init+0x4a>
 8011fd2:	4d20      	ldr	r5, [pc, #128]	@ (8012054 <PDM_Filter_Init+0xfc>)
 8011fd4:	782a      	ldrb	r2, [r5, #0]
 8011fd6:	d009      	beq.n	8011fec <PDM_Filter_Init+0x94>
 8011fd8:	2a01      	cmp	r2, #1
 8011fda:	d020      	beq.n	801201e <PDM_Filter_Init+0xc6>
 8011fdc:	2001      	movs	r0, #1
 8011fde:	e7dd      	b.n	8011f9c <PDM_Filter_Init+0x44>
 8011fe0:	2220      	movs	r2, #32
 8011fe2:	4618      	mov	r0, r3
 8011fe4:	2160      	movs	r1, #96	@ 0x60
 8011fe6:	6422      	str	r2, [r4, #64]	@ 0x40
 8011fe8:	4613      	mov	r3, r2
 8011fea:	e7dc      	b.n	8011fa6 <PDM_Filter_Init+0x4e>
 8011fec:	2a00      	cmp	r2, #0
 8011fee:	d1d5      	bne.n	8011f9c <PDM_Filter_Init+0x44>
 8011ff0:	4919      	ldr	r1, [pc, #100]	@ (8012058 <PDM_Filter_Init+0x100>)
 8011ff2:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8012060 <PDM_Filter_Init+0x108>
 8011ff6:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8011ffa:	4e18      	ldr	r6, [pc, #96]	@ (801205c <PDM_Filter_Init+0x104>)
 8011ffc:	684a      	ldr	r2, [r1, #4]
 8011ffe:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8012002:	ea02 0006 	and.w	r0, r2, r6
 8012006:	f3c2 5209 	ubfx	r2, r2, #20, #10
 801200a:	4303      	orrs	r3, r0
 801200c:	4413      	add	r3, r2
 801200e:	f841 3f04 	str.w	r3, [r1, #4]!
 8012012:	428f      	cmp	r7, r1
 8012014:	d1f2      	bne.n	8011ffc <PDM_Filter_Init+0xa4>
 8012016:	2001      	movs	r0, #1
 8012018:	2300      	movs	r3, #0
 801201a:	7028      	strb	r0, [r5, #0]
 801201c:	e7be      	b.n	8011f9c <PDM_Filter_Init+0x44>
 801201e:	490e      	ldr	r1, [pc, #56]	@ (8012058 <PDM_Filter_Init+0x100>)
 8012020:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8012060 <PDM_Filter_Init+0x108>
 8012024:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 8012028:	4e0c      	ldr	r6, [pc, #48]	@ (801205c <PDM_Filter_Init+0x104>)
 801202a:	684a      	ldr	r2, [r1, #4]
 801202c:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8012030:	ea02 0006 	and.w	r0, r2, r6
 8012034:	f3c2 5209 	ubfx	r2, r2, #20, #10
 8012038:	4303      	orrs	r3, r0
 801203a:	4413      	add	r3, r2
 801203c:	f841 3f04 	str.w	r3, [r1, #4]!
 8012040:	428f      	cmp	r7, r1
 8012042:	d1f2      	bne.n	801202a <PDM_Filter_Init+0xd2>
 8012044:	2300      	movs	r3, #0
 8012046:	2001      	movs	r0, #1
 8012048:	702b      	strb	r3, [r5, #0]
 801204a:	e7a7      	b.n	8011f9c <PDM_Filter_Init+0x44>
 801204c:	b5e8b5cd 	.word	0xb5e8b5cd
 8012050:	f407a5c2 	.word	0xf407a5c2
 8012054:	2400087c 	.word	0x2400087c
 8012058:	23fffffc 	.word	0x23fffffc
 801205c:	000ffc00 	.word	0x000ffc00
 8012060:	3ff00000 	.word	0x3ff00000

08012064 <PDM_Filter_setConfig>:
 8012064:	b570      	push	{r4, r5, r6, lr}
 8012066:	460e      	mov	r6, r1
 8012068:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 801206a:	4604      	mov	r4, r0
 801206c:	8832      	ldrh	r2, [r6, #0]
 801206e:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 8012072:	1e53      	subs	r3, r2, #1
 8012074:	2b06      	cmp	r3, #6
 8012076:	ed2d 8b04 	vpush	{d8-d9}
 801207a:	6420      	str	r0, [r4, #64]	@ 0x40
 801207c:	d91b      	bls.n	80120b6 <PDM_Filter_setConfig+0x52>
 801207e:	2508      	movs	r5, #8
 8012080:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 8012084:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012088:	4299      	cmp	r1, r3
 801208a:	d07b      	beq.n	8012184 <PDM_Filter_setConfig+0x120>
 801208c:	f113 0f0c 	cmn.w	r3, #12
 8012090:	db29      	blt.n	80120e6 <PDM_Filter_setConfig+0x82>
 8012092:	2b33      	cmp	r3, #51	@ 0x33
 8012094:	dd2c      	ble.n	80120f0 <PDM_Filter_setConfig+0x8c>
 8012096:	2333      	movs	r3, #51	@ 0x33
 8012098:	3540      	adds	r5, #64	@ 0x40
 801209a:	80b3      	strh	r3, [r6, #4]
 801209c:	8622      	strh	r2, [r4, #48]	@ 0x30
 801209e:	8873      	ldrh	r3, [r6, #2]
 80120a0:	8663      	strh	r3, [r4, #50]	@ 0x32
 80120a2:	b925      	cbnz	r5, 80120ae <PDM_Filter_setConfig+0x4a>
 80120a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80120a6:	2500      	movs	r5, #0
 80120a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80120ac:	6423      	str	r3, [r4, #64]	@ 0x40
 80120ae:	4628      	mov	r0, r5
 80120b0:	ecbd 8b04 	vpop	{d8-d9}
 80120b4:	bd70      	pop	{r4, r5, r6, pc}
 80120b6:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80120b8:	4293      	cmp	r3, r2
 80120ba:	d04a      	beq.n	8012152 <PDM_Filter_setConfig+0xee>
 80120bc:	4b4e      	ldr	r3, [pc, #312]	@ (80121f8 <PDM_Filter_setConfig+0x194>)
 80120be:	400b      	ands	r3, r1
 80120c0:	4313      	orrs	r3, r2
 80120c2:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 80120c6:	6423      	str	r3, [r4, #64]	@ 0x40
 80120c8:	f003 030f 	and.w	r3, r3, #15
 80120cc:	2970      	cmp	r1, #112	@ 0x70
 80120ce:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80120d2:	d04a      	beq.n	801216a <PDM_Filter_setConfig+0x106>
 80120d4:	2b06      	cmp	r3, #6
 80120d6:	f200 808d 	bhi.w	80121f4 <PDM_Filter_setConfig+0x190>
 80120da:	e8df f003 	tbb	[pc, r3]
 80120de:	6467      	.short	0x6467
 80120e0:	6a6d7073 	.word	0x6a6d7073
 80120e4:	5a          	.byte	0x5a
 80120e5:	00          	.byte	0x00
 80120e6:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 80120ea:	3540      	adds	r5, #64	@ 0x40
 80120ec:	80b3      	strh	r3, [r6, #4]
 80120ee:	e7d5      	b.n	801209c <PDM_Filter_setConfig+0x38>
 80120f0:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 80120f2:	f002 020f 	and.w	r2, r2, #15
 80120f6:	3a01      	subs	r2, #1
 80120f8:	2a06      	cmp	r2, #6
 80120fa:	d83e      	bhi.n	801217a <PDM_Filter_setConfig+0x116>
 80120fc:	493f      	ldr	r1, [pc, #252]	@ (80121fc <PDM_Filter_setConfig+0x198>)
 80120fe:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8012102:	ed92 9a00 	vldr	s18, [r2]
 8012106:	ed92 8a07 	vldr	s16, [r2, #28]
 801210a:	ee07 3a90 	vmov	s15, r3
 801210e:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8012112:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 8012116:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 801211a:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 801211e:	f000 f8f7 	bl	8012310 <powf>
 8012122:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8012200 <PDM_Filter_setConfig+0x19c>
 8012126:	eef0 8a40 	vmov.f32	s17, s0
 801212a:	ee70 0ac9 	vsub.f32	s1, s1, s18
 801212e:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8012132:	f000 f8ed 	bl	8012310 <powf>
 8012136:	ee28 8a28 	vmul.f32	s16, s16, s17
 801213a:	88b3      	ldrh	r3, [r6, #4]
 801213c:	8832      	ldrh	r2, [r6, #0]
 801213e:	ee28 8a00 	vmul.f32	s16, s16, s0
 8012142:	8723      	strh	r3, [r4, #56]	@ 0x38
 8012144:	feb8 8a48 	vrinta.f32	s16, s16
 8012148:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 801214c:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
 8012150:	e7a4      	b.n	801209c <PDM_Filter_setConfig+0x38>
 8012152:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 8012156:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 801215a:	4299      	cmp	r1, r3
 801215c:	d016      	beq.n	801218c <PDM_Filter_setConfig+0x128>
 801215e:	f113 0f0c 	cmn.w	r3, #12
 8012162:	f04f 0500 	mov.w	r5, #0
 8012166:	da94      	bge.n	8012092 <PDM_Filter_setConfig+0x2e>
 8012168:	e7bd      	b.n	80120e6 <PDM_Filter_setConfig+0x82>
 801216a:	2b06      	cmp	r3, #6
 801216c:	d842      	bhi.n	80121f4 <PDM_Filter_setConfig+0x190>
 801216e:	e8df f003 	tbb	[pc, r3]
 8012172:	3b3e      	.short	0x3b3e
 8012174:	2f323538 	.word	0x2f323538
 8012178:	2c          	.byte	0x2c
 8012179:	00          	.byte	0x00
 801217a:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 8012204 <PDM_Filter_setConfig+0x1a0>
 801217e:	eeb0 9a48 	vmov.f32	s18, s16
 8012182:	e7c2      	b.n	801210a <PDM_Filter_setConfig+0xa6>
 8012184:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 8012186:	4291      	cmp	r1, r2
 8012188:	d180      	bne.n	801208c <PDM_Filter_setConfig+0x28>
 801218a:	e788      	b.n	801209e <PDM_Filter_setConfig+0x3a>
 801218c:	8873      	ldrh	r3, [r6, #2]
 801218e:	8663      	strh	r3, [r4, #50]	@ 0x32
 8012190:	e788      	b.n	80120a4 <PDM_Filter_setConfig+0x40>
 8012192:	4b1d      	ldr	r3, [pc, #116]	@ (8012208 <PDM_Filter_setConfig+0x1a4>)
 8012194:	64a3      	str	r3, [r4, #72]	@ 0x48
 8012196:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 801219a:	2500      	movs	r5, #0
 801219c:	f113 0f0c 	cmn.w	r3, #12
 80121a0:	f6bf af77 	bge.w	8012092 <PDM_Filter_setConfig+0x2e>
 80121a4:	e79f      	b.n	80120e6 <PDM_Filter_setConfig+0x82>
 80121a6:	4b19      	ldr	r3, [pc, #100]	@ (801220c <PDM_Filter_setConfig+0x1a8>)
 80121a8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121aa:	e7f4      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121ac:	4b18      	ldr	r3, [pc, #96]	@ (8012210 <PDM_Filter_setConfig+0x1ac>)
 80121ae:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121b0:	e7f1      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121b2:	4b18      	ldr	r3, [pc, #96]	@ (8012214 <PDM_Filter_setConfig+0x1b0>)
 80121b4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121b6:	e7ee      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121b8:	4b17      	ldr	r3, [pc, #92]	@ (8012218 <PDM_Filter_setConfig+0x1b4>)
 80121ba:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121bc:	e7eb      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121be:	4b17      	ldr	r3, [pc, #92]	@ (801221c <PDM_Filter_setConfig+0x1b8>)
 80121c0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121c2:	e7e8      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121c4:	4b16      	ldr	r3, [pc, #88]	@ (8012220 <PDM_Filter_setConfig+0x1bc>)
 80121c6:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121c8:	e7e5      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121ca:	4b16      	ldr	r3, [pc, #88]	@ (8012224 <PDM_Filter_setConfig+0x1c0>)
 80121cc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121ce:	e7e2      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121d0:	4b15      	ldr	r3, [pc, #84]	@ (8012228 <PDM_Filter_setConfig+0x1c4>)
 80121d2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121d4:	e7df      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121d6:	4b15      	ldr	r3, [pc, #84]	@ (801222c <PDM_Filter_setConfig+0x1c8>)
 80121d8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121da:	e7dc      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121dc:	4b14      	ldr	r3, [pc, #80]	@ (8012230 <PDM_Filter_setConfig+0x1cc>)
 80121de:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121e0:	e7d9      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121e2:	4b14      	ldr	r3, [pc, #80]	@ (8012234 <PDM_Filter_setConfig+0x1d0>)
 80121e4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121e6:	e7d6      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121e8:	4b13      	ldr	r3, [pc, #76]	@ (8012238 <PDM_Filter_setConfig+0x1d4>)
 80121ea:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121ec:	e7d3      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121ee:	4b13      	ldr	r3, [pc, #76]	@ (801223c <PDM_Filter_setConfig+0x1d8>)
 80121f0:	64a3      	str	r3, [r4, #72]	@ 0x48
 80121f2:	e7d0      	b.n	8012196 <PDM_Filter_setConfig+0x132>
 80121f4:	2500      	movs	r5, #0
 80121f6:	e743      	b.n	8012080 <PDM_Filter_setConfig+0x1c>
 80121f8:	fffffef0 	.word	0xfffffef0
 80121fc:	0801505c 	.word	0x0801505c
 8012200:	42000000 	.word	0x42000000
 8012204:	00000000 	.word	0x00000000
 8012208:	080107c5 	.word	0x080107c5
 801220c:	08010b3d 	.word	0x08010b3d
 8012210:	0801094d 	.word	0x0801094d
 8012214:	08010649 	.word	0x08010649
 8012218:	08010539 	.word	0x08010539
 801221c:	08011009 	.word	0x08011009
 8012220:	08010d6d 	.word	0x08010d6d
 8012224:	080115ed 	.word	0x080115ed
 8012228:	080114bd 	.word	0x080114bd
 801222c:	080113c1 	.word	0x080113c1
 8012230:	08011c6d 	.word	0x08011c6d
 8012234:	08011a6d 	.word	0x08011a6d
 8012238:	080118b5 	.word	0x080118b5
 801223c:	08011735 	.word	0x08011735

08012240 <PDM_Filter>:
 8012240:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8012242:	f413 7f80 	tst.w	r3, #256	@ 0x100
 8012246:	d105      	bne.n	8012254 <PDM_Filter+0x14>
 8012248:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801224c:	bf14      	ite	ne
 801224e:	2020      	movne	r0, #32
 8012250:	2030      	moveq	r0, #48	@ 0x30
 8012252:	4770      	bx	lr
 8012254:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 8012256:	320c      	adds	r2, #12
 8012258:	4718      	bx	r3
 801225a:	bf00      	nop

0801225c <CRC_Lock>:
 801225c:	4a18      	ldr	r2, [pc, #96]	@ (80122c0 <CRC_Lock+0x64>)
 801225e:	6813      	ldr	r3, [r2, #0]
 8012260:	b410      	push	{r4}
 8012262:	f023 0301 	bic.w	r3, r3, #1
 8012266:	4c17      	ldr	r4, [pc, #92]	@ (80122c4 <CRC_Lock+0x68>)
 8012268:	6013      	str	r3, [r2, #0]
 801226a:	6823      	ldr	r3, [r4, #0]
 801226c:	b933      	cbnz	r3, 801227c <CRC_Lock+0x20>
 801226e:	4b16      	ldr	r3, [pc, #88]	@ (80122c8 <CRC_Lock+0x6c>)
 8012270:	681b      	ldr	r3, [r3, #0]
 8012272:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8012276:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 801227a:	d010      	beq.n	801229e <CRC_Lock+0x42>
 801227c:	4b13      	ldr	r3, [pc, #76]	@ (80122cc <CRC_Lock+0x70>)
 801227e:	2401      	movs	r4, #1
 8012280:	461a      	mov	r2, r3
 8012282:	601c      	str	r4, [r3, #0]
 8012284:	6813      	ldr	r3, [r2, #0]
 8012286:	2b00      	cmp	r3, #0
 8012288:	d1fc      	bne.n	8012284 <CRC_Lock+0x28>
 801228a:	4b11      	ldr	r3, [pc, #68]	@ (80122d0 <CRC_Lock+0x74>)
 801228c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8012290:	6018      	str	r0, [r3, #0]
 8012292:	6818      	ldr	r0, [r3, #0]
 8012294:	1a08      	subs	r0, r1, r0
 8012296:	fab0 f080 	clz	r0, r0
 801229a:	0940      	lsrs	r0, r0, #5
 801229c:	4770      	bx	lr
 801229e:	4b0d      	ldr	r3, [pc, #52]	@ (80122d4 <CRC_Lock+0x78>)
 80122a0:	2401      	movs	r4, #1
 80122a2:	461a      	mov	r2, r3
 80122a4:	601c      	str	r4, [r3, #0]
 80122a6:	6813      	ldr	r3, [r2, #0]
 80122a8:	2b00      	cmp	r3, #0
 80122aa:	d1fc      	bne.n	80122a6 <CRC_Lock+0x4a>
 80122ac:	4b0a      	ldr	r3, [pc, #40]	@ (80122d8 <CRC_Lock+0x7c>)
 80122ae:	f85d 4b04 	ldr.w	r4, [sp], #4
 80122b2:	6018      	str	r0, [r3, #0]
 80122b4:	6818      	ldr	r0, [r3, #0]
 80122b6:	1a40      	subs	r0, r0, r1
 80122b8:	fab0 f080 	clz	r0, r0
 80122bc:	0940      	lsrs	r0, r0, #5
 80122be:	4770      	bx	lr
 80122c0:	e0002000 	.word	0xe0002000
 80122c4:	e0042000 	.word	0xe0042000
 80122c8:	5c001000 	.word	0x5c001000
 80122cc:	40023008 	.word	0x40023008
 80122d0:	40023000 	.word	0x40023000
 80122d4:	58024c08 	.word	0x58024c08
 80122d8:	58024c00 	.word	0x58024c00

080122dc <checkint>:
 80122dc:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 80122e0:	2b7e      	cmp	r3, #126	@ 0x7e
 80122e2:	d910      	bls.n	8012306 <checkint+0x2a>
 80122e4:	2b96      	cmp	r3, #150	@ 0x96
 80122e6:	d80c      	bhi.n	8012302 <checkint+0x26>
 80122e8:	2201      	movs	r2, #1
 80122ea:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 80122ee:	fa02 f303 	lsl.w	r3, r2, r3
 80122f2:	1e5a      	subs	r2, r3, #1
 80122f4:	4202      	tst	r2, r0
 80122f6:	d106      	bne.n	8012306 <checkint+0x2a>
 80122f8:	4203      	tst	r3, r0
 80122fa:	bf14      	ite	ne
 80122fc:	2001      	movne	r0, #1
 80122fe:	2002      	moveq	r0, #2
 8012300:	4770      	bx	lr
 8012302:	2002      	movs	r0, #2
 8012304:	4770      	bx	lr
 8012306:	2000      	movs	r0, #0
 8012308:	4770      	bx	lr
 801230a:	0000      	movs	r0, r0
 801230c:	0000      	movs	r0, r0
	...

08012310 <powf>:
 8012310:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8012312:	ee10 1a10 	vmov	r1, s0
 8012316:	ee10 4a90 	vmov	r4, s1
 801231a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 801231e:	0063      	lsls	r3, r4, #1
 8012320:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8012324:	eef0 7a40 	vmov.f32	s15, s0
 8012328:	eeb0 7a60 	vmov.f32	s14, s1
 801232c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8012330:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 8012334:	d252      	bcs.n	80123dc <powf+0xcc>
 8012336:	4290      	cmp	r0, r2
 8012338:	d258      	bcs.n	80123ec <powf+0xdc>
 801233a:	2000      	movs	r0, #0
 801233c:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 8012340:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 8012344:	4a9e      	ldr	r2, [pc, #632]	@ (80125c0 <powf+0x2b0>)
 8012346:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 801234a:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 801234e:	f36f 0316 	bfc	r3, #0, #23
 8012352:	1ac9      	subs	r1, r1, r3
 8012354:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 8012358:	ee07 1a90 	vmov	s15, r1
 801235c:	ed94 5b02 	vldr	d5, [r4, #8]
 8012360:	ed94 4b00 	vldr	d4, [r4]
 8012364:	15db      	asrs	r3, r3, #23
 8012366:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 801236a:	ee07 3a90 	vmov	s15, r3
 801236e:	eea4 2b06 	vfma.f64	d2, d4, d6
 8012372:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 8012376:	ee22 4b02 	vmul.f64	d4, d2, d2
 801237a:	ee24 0b04 	vmul.f64	d0, d4, d4
 801237e:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 8012382:	ee36 6b05 	vadd.f64	d6, d6, d5
 8012386:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 801238a:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 801238e:	eea2 1b05 	vfma.f64	d1, d2, d5
 8012392:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8012396:	eea2 5b03 	vfma.f64	d5, d2, d3
 801239a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 801239e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 80123a2:	eea2 6b03 	vfma.f64	d6, d2, d3
 80123a6:	eea4 6b05 	vfma.f64	d6, d4, d5
 80123aa:	eea1 6b00 	vfma.f64	d6, d1, d0
 80123ae:	ee27 7b06 	vmul.f64	d7, d7, d6
 80123b2:	ee17 3a90 	vmov	r3, s15
 80123b6:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 80123ba:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 80123be:	429a      	cmp	r2, r3
 80123c0:	f0c0 8098 	bcc.w	80124f4 <powf+0x1e4>
 80123c4:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 80125a0 <powf+0x290>
 80123c8:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80123cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80123d0:	dd79      	ble.n	80124c6 <powf+0x1b6>
 80123d2:	b003      	add	sp, #12
 80123d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80123d8:	f000 b920 	b.w	801261c <__math_oflowf>
 80123dc:	4290      	cmp	r0, r2
 80123de:	d330      	bcc.n	8012442 <powf+0x132>
 80123e0:	b12b      	cbz	r3, 80123ee <powf+0xde>
 80123e2:	0049      	lsls	r1, r1, #1
 80123e4:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 80123e8:	d808      	bhi.n	80123fc <powf+0xec>
 80123ea:	e015      	b.n	8012418 <powf+0x108>
 80123ec:	b953      	cbnz	r3, 8012404 <powf+0xf4>
 80123ee:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 80123f2:	0049      	lsls	r1, r1, #1
 80123f4:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 80123f8:	f240 80ca 	bls.w	8012590 <powf+0x280>
 80123fc:	ee37 0a87 	vadd.f32	s0, s15, s14
 8012400:	b003      	add	sp, #12
 8012402:	bd30      	pop	{r4, r5, pc}
 8012404:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8012408:	d105      	bne.n	8012416 <powf+0x106>
 801240a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 801240e:	0064      	lsls	r4, r4, #1
 8012410:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8012414:	e7f0      	b.n	80123f8 <powf+0xe8>
 8012416:	0049      	lsls	r1, r1, #1
 8012418:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 801241c:	d1ee      	bne.n	80123fc <powf+0xec>
 801241e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8012422:	f000 80b5 	beq.w	8012590 <powf+0x280>
 8012426:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 801242a:	ea6f 0404 	mvn.w	r4, r4
 801242e:	bf34      	ite	cc
 8012430:	2100      	movcc	r1, #0
 8012432:	2101      	movcs	r1, #1
 8012434:	0fe4      	lsrs	r4, r4, #31
 8012436:	42a1      	cmp	r1, r4
 8012438:	f040 80ad 	bne.w	8012596 <powf+0x286>
 801243c:	ee27 0a07 	vmul.f32	s0, s14, s14
 8012440:	e7de      	b.n	8012400 <powf+0xf0>
 8012442:	004d      	lsls	r5, r1, #1
 8012444:	1e6b      	subs	r3, r5, #1
 8012446:	4293      	cmp	r3, r2
 8012448:	d31b      	bcc.n	8012482 <powf+0x172>
 801244a:	2900      	cmp	r1, #0
 801244c:	ee20 0a00 	vmul.f32	s0, s0, s0
 8012450:	da0e      	bge.n	8012470 <powf+0x160>
 8012452:	4620      	mov	r0, r4
 8012454:	f7ff ff42 	bl	80122dc <checkint>
 8012458:	2801      	cmp	r0, #1
 801245a:	d109      	bne.n	8012470 <powf+0x160>
 801245c:	eeb1 0a40 	vneg.f32	s0, s0
 8012460:	b945      	cbnz	r5, 8012474 <powf+0x164>
 8012462:	2c00      	cmp	r4, #0
 8012464:	dacc      	bge.n	8012400 <powf+0xf0>
 8012466:	b003      	add	sp, #12
 8012468:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801246c:	f000 b8dc 	b.w	8012628 <__math_divzerof>
 8012470:	2000      	movs	r0, #0
 8012472:	e7f5      	b.n	8012460 <powf+0x150>
 8012474:	2c00      	cmp	r4, #0
 8012476:	dac3      	bge.n	8012400 <powf+0xf0>
 8012478:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 801247c:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012480:	e7be      	b.n	8012400 <powf+0xf0>
 8012482:	2900      	cmp	r1, #0
 8012484:	da1d      	bge.n	80124c2 <powf+0x1b2>
 8012486:	4620      	mov	r0, r4
 8012488:	f7ff ff28 	bl	80122dc <checkint>
 801248c:	b920      	cbnz	r0, 8012498 <powf+0x188>
 801248e:	b003      	add	sp, #12
 8012490:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012494:	f000 b8da 	b.w	801264c <__math_invalidf>
 8012498:	1e43      	subs	r3, r0, #1
 801249a:	4258      	negs	r0, r3
 801249c:	4158      	adcs	r0, r3
 801249e:	0400      	lsls	r0, r0, #16
 80124a0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80124a4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 80124a8:	f4bf af48 	bcs.w	801233c <powf+0x2c>
 80124ac:	eddf 6a45 	vldr	s13, [pc, #276]	@ 80125c4 <powf+0x2b4>
 80124b0:	ee27 0aa6 	vmul.f32	s0, s15, s13
 80124b4:	ee10 3a10 	vmov	r3, s0
 80124b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80124bc:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 80124c0:	e73c      	b.n	801233c <powf+0x2c>
 80124c2:	2000      	movs	r0, #0
 80124c4:	e7ee      	b.n	80124a4 <powf+0x194>
 80124c6:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 80125a8 <powf+0x298>
 80124ca:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80124ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124d2:	dd45      	ble.n	8012560 <powf+0x250>
 80124d4:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 80124d8:	b3d0      	cbz	r0, 8012550 <powf+0x240>
 80124da:	9301      	str	r3, [sp, #4]
 80124dc:	eddd 6a01 	vldr	s13, [sp, #4]
 80124e0:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 80124e4:	ee76 6a66 	vsub.f32	s13, s12, s13
 80124e8:	eef4 6a46 	vcmp.f32	s13, s12
 80124ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80124f0:	f47f af6f 	bne.w	80123d2 <powf+0xc2>
 80124f4:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 80124f8:	4b33      	ldr	r3, [pc, #204]	@ (80125c8 <powf+0x2b8>)
 80124fa:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 80124fe:	ee37 6b05 	vadd.f64	d6, d7, d5
 8012502:	ee16 2a10 	vmov	r2, s12
 8012506:	ee36 6b45 	vsub.f64	d6, d6, d5
 801250a:	f002 011f 	and.w	r1, r2, #31
 801250e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8012512:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8012516:	ee27 4b07 	vmul.f64	d4, d7, d7
 801251a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 801251e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8012522:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8012526:	eea7 6b05 	vfma.f64	d6, d7, d5
 801252a:	686d      	ldr	r5, [r5, #4]
 801252c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 8012530:	1880      	adds	r0, r0, r2
 8012532:	2100      	movs	r1, #0
 8012534:	190a      	adds	r2, r1, r4
 8012536:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 801253a:	eea7 0b05 	vfma.f64	d0, d7, d5
 801253e:	ec43 2b17 	vmov	d7, r2, r3
 8012542:	eea6 0b04 	vfma.f64	d0, d6, d4
 8012546:	ee20 0b07 	vmul.f64	d0, d0, d7
 801254a:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 801254e:	e757      	b.n	8012400 <powf+0xf0>
 8012550:	9300      	str	r3, [sp, #0]
 8012552:	eddd 6a00 	vldr	s13, [sp]
 8012556:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 801255a:	ee76 6a86 	vadd.f32	s13, s13, s12
 801255e:	e7c3      	b.n	80124e8 <powf+0x1d8>
 8012560:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 80125b0 <powf+0x2a0>
 8012564:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012568:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801256c:	d804      	bhi.n	8012578 <powf+0x268>
 801256e:	b003      	add	sp, #12
 8012570:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8012574:	f000 b846 	b.w	8012604 <__math_uflowf>
 8012578:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 80125b8 <powf+0x2a8>
 801257c:	eeb4 7bc6 	vcmpe.f64	d7, d6
 8012580:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012584:	d5b6      	bpl.n	80124f4 <powf+0x1e4>
 8012586:	b003      	add	sp, #12
 8012588:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801258c:	f000 b840 	b.w	8012610 <__math_may_uflowf>
 8012590:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8012594:	e734      	b.n	8012400 <powf+0xf0>
 8012596:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 80125cc <powf+0x2bc>
 801259a:	e731      	b.n	8012400 <powf+0xf0>
 801259c:	f3af 8000 	nop.w
 80125a0:	ffd1d571 	.word	0xffd1d571
 80125a4:	405fffff 	.word	0x405fffff
 80125a8:	ffa3aae2 	.word	0xffa3aae2
 80125ac:	405fffff 	.word	0x405fffff
 80125b0:	00000000 	.word	0x00000000
 80125b4:	c062c000 	.word	0xc062c000
 80125b8:	00000000 	.word	0x00000000
 80125bc:	c062a000 	.word	0xc062a000
 80125c0:	08028cf8 	.word	0x08028cf8
 80125c4:	4b000000 	.word	0x4b000000
 80125c8:	08028a90 	.word	0x08028a90
 80125cc:	00000000 	.word	0x00000000

080125d0 <with_errnof>:
 80125d0:	b510      	push	{r4, lr}
 80125d2:	ed2d 8b02 	vpush	{d8}
 80125d6:	eeb0 8a40 	vmov.f32	s16, s0
 80125da:	4604      	mov	r4, r0
 80125dc:	f000 fe38 	bl	8013250 <__errno>
 80125e0:	eeb0 0a48 	vmov.f32	s0, s16
 80125e4:	ecbd 8b02 	vpop	{d8}
 80125e8:	6004      	str	r4, [r0, #0]
 80125ea:	bd10      	pop	{r4, pc}

080125ec <xflowf>:
 80125ec:	b130      	cbz	r0, 80125fc <xflowf+0x10>
 80125ee:	eef1 7a40 	vneg.f32	s15, s0
 80125f2:	ee27 0a80 	vmul.f32	s0, s15, s0
 80125f6:	2022      	movs	r0, #34	@ 0x22
 80125f8:	f7ff bfea 	b.w	80125d0 <with_errnof>
 80125fc:	eef0 7a40 	vmov.f32	s15, s0
 8012600:	e7f7      	b.n	80125f2 <xflowf+0x6>
	...

08012604 <__math_uflowf>:
 8012604:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 801260c <__math_uflowf+0x8>
 8012608:	f7ff bff0 	b.w	80125ec <xflowf>
 801260c:	10000000 	.word	0x10000000

08012610 <__math_may_uflowf>:
 8012610:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012618 <__math_may_uflowf+0x8>
 8012614:	f7ff bfea 	b.w	80125ec <xflowf>
 8012618:	1a200000 	.word	0x1a200000

0801261c <__math_oflowf>:
 801261c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8012624 <__math_oflowf+0x8>
 8012620:	f7ff bfe4 	b.w	80125ec <xflowf>
 8012624:	70000000 	.word	0x70000000

08012628 <__math_divzerof>:
 8012628:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 8012648 <__math_divzerof+0x20>
 801262c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 8012630:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 8012634:	2800      	cmp	r0, #0
 8012636:	f04f 0022 	mov.w	r0, #34	@ 0x22
 801263a:	fe47 7a87 	vseleq.f32	s15, s15, s14
 801263e:	ee87 0a80 	vdiv.f32	s0, s15, s0
 8012642:	f7ff bfc5 	b.w	80125d0 <with_errnof>
 8012646:	bf00      	nop
 8012648:	00000000 	.word	0x00000000

0801264c <__math_invalidf>:
 801264c:	eef0 7a40 	vmov.f32	s15, s0
 8012650:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012654:	eef4 7a67 	vcmp.f32	s15, s15
 8012658:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801265c:	ee87 0a07 	vdiv.f32	s0, s14, s14
 8012660:	d602      	bvs.n	8012668 <__math_invalidf+0x1c>
 8012662:	2021      	movs	r0, #33	@ 0x21
 8012664:	f7ff bfb4 	b.w	80125d0 <with_errnof>
 8012668:	4770      	bx	lr
	...

0801266c <log10f>:
 801266c:	b508      	push	{r3, lr}
 801266e:	ed2d 8b02 	vpush	{d8}
 8012672:	eeb0 8a40 	vmov.f32	s16, s0
 8012676:	f000 f82d 	bl	80126d4 <__ieee754_log10f>
 801267a:	eeb4 8a48 	vcmp.f32	s16, s16
 801267e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012682:	d60f      	bvs.n	80126a4 <log10f+0x38>
 8012684:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8012688:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801268c:	d80a      	bhi.n	80126a4 <log10f+0x38>
 801268e:	eeb5 8a40 	vcmp.f32	s16, #0.0
 8012692:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012696:	d108      	bne.n	80126aa <log10f+0x3e>
 8012698:	f000 fdda 	bl	8013250 <__errno>
 801269c:	2322      	movs	r3, #34	@ 0x22
 801269e:	ed9f 0a08 	vldr	s0, [pc, #32]	@ 80126c0 <log10f+0x54>
 80126a2:	6003      	str	r3, [r0, #0]
 80126a4:	ecbd 8b02 	vpop	{d8}
 80126a8:	bd08      	pop	{r3, pc}
 80126aa:	f000 fdd1 	bl	8013250 <__errno>
 80126ae:	ecbd 8b02 	vpop	{d8}
 80126b2:	2321      	movs	r3, #33	@ 0x21
 80126b4:	6003      	str	r3, [r0, #0]
 80126b6:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
 80126ba:	4802      	ldr	r0, [pc, #8]	@ (80126c4 <log10f+0x58>)
 80126bc:	f000 b804 	b.w	80126c8 <nanf>
 80126c0:	ff800000 	.word	0xff800000
 80126c4:	08028a7b 	.word	0x08028a7b

080126c8 <nanf>:
 80126c8:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80126d0 <nanf+0x8>
 80126cc:	4770      	bx	lr
 80126ce:	bf00      	nop
 80126d0:	7fc00000 	.word	0x7fc00000

080126d4 <__ieee754_log10f>:
 80126d4:	b508      	push	{r3, lr}
 80126d6:	ee10 3a10 	vmov	r3, s0
 80126da:	f033 4200 	bics.w	r2, r3, #2147483648	@ 0x80000000
 80126de:	ed2d 8b02 	vpush	{d8}
 80126e2:	d108      	bne.n	80126f6 <__ieee754_log10f+0x22>
 80126e4:	ed9f 7a21 	vldr	s14, [pc, #132]	@ 801276c <__ieee754_log10f+0x98>
 80126e8:	eddf 7a21 	vldr	s15, [pc, #132]	@ 8012770 <__ieee754_log10f+0x9c>
 80126ec:	ee87 0a27 	vdiv.f32	s0, s14, s15
 80126f0:	ecbd 8b02 	vpop	{d8}
 80126f4:	bd08      	pop	{r3, pc}
 80126f6:	2b00      	cmp	r3, #0
 80126f8:	461a      	mov	r2, r3
 80126fa:	da02      	bge.n	8012702 <__ieee754_log10f+0x2e>
 80126fc:	ee30 7a40 	vsub.f32	s14, s0, s0
 8012700:	e7f2      	b.n	80126e8 <__ieee754_log10f+0x14>
 8012702:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 8012706:	db02      	blt.n	801270e <__ieee754_log10f+0x3a>
 8012708:	ee30 0a00 	vadd.f32	s0, s0, s0
 801270c:	e7f0      	b.n	80126f0 <__ieee754_log10f+0x1c>
 801270e:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8012712:	bfbf      	itttt	lt
 8012714:	eddf 7a17 	vldrlt	s15, [pc, #92]	@ 8012774 <__ieee754_log10f+0xa0>
 8012718:	ee60 7a27 	vmullt.f32	s15, s0, s15
 801271c:	f06f 0118 	mvnlt.w	r1, #24
 8012720:	ee17 2a90 	vmovlt	r2, s15
 8012724:	ea4f 53e2 	mov.w	r3, r2, asr #23
 8012728:	bfa8      	it	ge
 801272a:	2100      	movge	r1, #0
 801272c:	3b7f      	subs	r3, #127	@ 0x7f
 801272e:	440b      	add	r3, r1
 8012730:	0fd9      	lsrs	r1, r3, #31
 8012732:	eb03 73d3 	add.w	r3, r3, r3, lsr #31
 8012736:	ee07 3a90 	vmov	s15, r3
 801273a:	f3c2 0216 	ubfx	r2, r2, #0, #23
 801273e:	f1c1 037f 	rsb	r3, r1, #127	@ 0x7f
 8012742:	ea42 53c3 	orr.w	r3, r2, r3, lsl #23
 8012746:	ee00 3a10 	vmov	s0, r3
 801274a:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 801274e:	f000 f819 	bl	8012784 <logf>
 8012752:	eddf 7a09 	vldr	s15, [pc, #36]	@ 8012778 <__ieee754_log10f+0xa4>
 8012756:	ee20 0a27 	vmul.f32	s0, s0, s15
 801275a:	eddf 7a08 	vldr	s15, [pc, #32]	@ 801277c <__ieee754_log10f+0xa8>
 801275e:	eea8 0a27 	vfma.f32	s0, s16, s15
 8012762:	eddf 7a07 	vldr	s15, [pc, #28]	@ 8012780 <__ieee754_log10f+0xac>
 8012766:	eea8 0a27 	vfma.f32	s0, s16, s15
 801276a:	e7c1      	b.n	80126f0 <__ieee754_log10f+0x1c>
 801276c:	cc000000 	.word	0xcc000000
 8012770:	00000000 	.word	0x00000000
 8012774:	4c000000 	.word	0x4c000000
 8012778:	3ede5bd9 	.word	0x3ede5bd9
 801277c:	355427db 	.word	0x355427db
 8012780:	3e9a2080 	.word	0x3e9a2080

08012784 <logf>:
 8012784:	ee10 3a10 	vmov	r3, s0
 8012788:	f1b3 5f7e 	cmp.w	r3, #1065353216	@ 0x3f800000
 801278c:	b410      	push	{r4}
 801278e:	d055      	beq.n	801283c <logf+0xb8>
 8012790:	f5a3 0200 	sub.w	r2, r3, #8388608	@ 0x800000
 8012794:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8012798:	d31a      	bcc.n	80127d0 <logf+0x4c>
 801279a:	005a      	lsls	r2, r3, #1
 801279c:	d104      	bne.n	80127a8 <logf+0x24>
 801279e:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127a2:	2001      	movs	r0, #1
 80127a4:	f7ff bf40 	b.w	8012628 <__math_divzerof>
 80127a8:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 80127ac:	d043      	beq.n	8012836 <logf+0xb2>
 80127ae:	2b00      	cmp	r3, #0
 80127b0:	db02      	blt.n	80127b8 <logf+0x34>
 80127b2:	f1b2 4f7f 	cmp.w	r2, #4278190080	@ 0xff000000
 80127b6:	d303      	bcc.n	80127c0 <logf+0x3c>
 80127b8:	f85d 4b04 	ldr.w	r4, [sp], #4
 80127bc:	f7ff bf46 	b.w	801264c <__math_invalidf>
 80127c0:	eddf 7a20 	vldr	s15, [pc, #128]	@ 8012844 <logf+0xc0>
 80127c4:	ee20 0a27 	vmul.f32	s0, s0, s15
 80127c8:	ee10 3a10 	vmov	r3, s0
 80127cc:	f1a3 6338 	sub.w	r3, r3, #192937984	@ 0xb800000
 80127d0:	f103 4240 	add.w	r2, r3, #3221225472	@ 0xc0000000
 80127d4:	491c      	ldr	r1, [pc, #112]	@ (8012848 <logf+0xc4>)
 80127d6:	eebf 0b00 	vmov.f64	d0, #240	@ 0xbf800000 -1.0
 80127da:	f502 024d 	add.w	r2, r2, #13434880	@ 0xcd0000
 80127de:	f3c2 40c3 	ubfx	r0, r2, #19, #4
 80127e2:	0dd4      	lsrs	r4, r2, #23
 80127e4:	eb01 1000 	add.w	r0, r1, r0, lsl #4
 80127e8:	05e4      	lsls	r4, r4, #23
 80127ea:	ed90 5b00 	vldr	d5, [r0]
 80127ee:	1b1b      	subs	r3, r3, r4
 80127f0:	ee07 3a90 	vmov	s15, r3
 80127f4:	ed90 6b02 	vldr	d6, [r0, #8]
 80127f8:	eeb7 7ae7 	vcvt.f64.f32	d7, s15
 80127fc:	15d2      	asrs	r2, r2, #23
 80127fe:	eea5 0b07 	vfma.f64	d0, d5, d7
 8012802:	ed91 5b40 	vldr	d5, [r1, #256]	@ 0x100
 8012806:	ee20 4b00 	vmul.f64	d4, d0, d0
 801280a:	ee07 2a90 	vmov	s15, r2
 801280e:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 8012812:	eea7 6b05 	vfma.f64	d6, d7, d5
 8012816:	ed91 5b44 	vldr	d5, [r1, #272]	@ 0x110
 801281a:	ed91 7b46 	vldr	d7, [r1, #280]	@ 0x118
 801281e:	eea5 7b00 	vfma.f64	d7, d5, d0
 8012822:	ed91 5b42 	vldr	d5, [r1, #264]	@ 0x108
 8012826:	ee30 0b06 	vadd.f64	d0, d0, d6
 801282a:	eea5 7b04 	vfma.f64	d7, d5, d4
 801282e:	eea4 0b07 	vfma.f64	d0, d4, d7
 8012832:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 8012836:	f85d 4b04 	ldr.w	r4, [sp], #4
 801283a:	4770      	bx	lr
 801283c:	ed9f 0a03 	vldr	s0, [pc, #12]	@ 801284c <logf+0xc8>
 8012840:	e7f9      	b.n	8012836 <logf+0xb2>
 8012842:	bf00      	nop
 8012844:	4b000000 	.word	0x4b000000
 8012848:	08028bd8 	.word	0x08028bd8
 801284c:	00000000 	.word	0x00000000

08012850 <__cvt>:
 8012850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8012852:	ed2d 8b02 	vpush	{d8}
 8012856:	eeb0 8b40 	vmov.f64	d8, d0
 801285a:	b085      	sub	sp, #20
 801285c:	4617      	mov	r7, r2
 801285e:	9d0d      	ldr	r5, [sp, #52]	@ 0x34
 8012860:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012862:	ee18 2a90 	vmov	r2, s17
 8012866:	f025 0520 	bic.w	r5, r5, #32
 801286a:	2a00      	cmp	r2, #0
 801286c:	bfb6      	itet	lt
 801286e:	222d      	movlt	r2, #45	@ 0x2d
 8012870:	2200      	movge	r2, #0
 8012872:	eeb1 8b40 	vneglt.f64	d8, d0
 8012876:	2d46      	cmp	r5, #70	@ 0x46
 8012878:	460c      	mov	r4, r1
 801287a:	701a      	strb	r2, [r3, #0]
 801287c:	d004      	beq.n	8012888 <__cvt+0x38>
 801287e:	2d45      	cmp	r5, #69	@ 0x45
 8012880:	d100      	bne.n	8012884 <__cvt+0x34>
 8012882:	3401      	adds	r4, #1
 8012884:	2102      	movs	r1, #2
 8012886:	e000      	b.n	801288a <__cvt+0x3a>
 8012888:	2103      	movs	r1, #3
 801288a:	ab03      	add	r3, sp, #12
 801288c:	9301      	str	r3, [sp, #4]
 801288e:	ab02      	add	r3, sp, #8
 8012890:	9300      	str	r3, [sp, #0]
 8012892:	4622      	mov	r2, r4
 8012894:	4633      	mov	r3, r6
 8012896:	eeb0 0b48 	vmov.f64	d0, d8
 801289a:	f000 fda1 	bl	80133e0 <_dtoa_r>
 801289e:	2d47      	cmp	r5, #71	@ 0x47
 80128a0:	d114      	bne.n	80128cc <__cvt+0x7c>
 80128a2:	07fb      	lsls	r3, r7, #31
 80128a4:	d50a      	bpl.n	80128bc <__cvt+0x6c>
 80128a6:	1902      	adds	r2, r0, r4
 80128a8:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128b0:	bf08      	it	eq
 80128b2:	9203      	streq	r2, [sp, #12]
 80128b4:	2130      	movs	r1, #48	@ 0x30
 80128b6:	9b03      	ldr	r3, [sp, #12]
 80128b8:	4293      	cmp	r3, r2
 80128ba:	d319      	bcc.n	80128f0 <__cvt+0xa0>
 80128bc:	9b03      	ldr	r3, [sp, #12]
 80128be:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80128c0:	1a1b      	subs	r3, r3, r0
 80128c2:	6013      	str	r3, [r2, #0]
 80128c4:	b005      	add	sp, #20
 80128c6:	ecbd 8b02 	vpop	{d8}
 80128ca:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80128cc:	2d46      	cmp	r5, #70	@ 0x46
 80128ce:	eb00 0204 	add.w	r2, r0, r4
 80128d2:	d1e9      	bne.n	80128a8 <__cvt+0x58>
 80128d4:	7803      	ldrb	r3, [r0, #0]
 80128d6:	2b30      	cmp	r3, #48	@ 0x30
 80128d8:	d107      	bne.n	80128ea <__cvt+0x9a>
 80128da:	eeb5 8b40 	vcmp.f64	d8, #0.0
 80128de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80128e2:	bf1c      	itt	ne
 80128e4:	f1c4 0401 	rsbne	r4, r4, #1
 80128e8:	6034      	strne	r4, [r6, #0]
 80128ea:	6833      	ldr	r3, [r6, #0]
 80128ec:	441a      	add	r2, r3
 80128ee:	e7db      	b.n	80128a8 <__cvt+0x58>
 80128f0:	1c5c      	adds	r4, r3, #1
 80128f2:	9403      	str	r4, [sp, #12]
 80128f4:	7019      	strb	r1, [r3, #0]
 80128f6:	e7de      	b.n	80128b6 <__cvt+0x66>

080128f8 <__exponent>:
 80128f8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80128fa:	2900      	cmp	r1, #0
 80128fc:	bfba      	itte	lt
 80128fe:	4249      	neglt	r1, r1
 8012900:	232d      	movlt	r3, #45	@ 0x2d
 8012902:	232b      	movge	r3, #43	@ 0x2b
 8012904:	2909      	cmp	r1, #9
 8012906:	7002      	strb	r2, [r0, #0]
 8012908:	7043      	strb	r3, [r0, #1]
 801290a:	dd29      	ble.n	8012960 <__exponent+0x68>
 801290c:	f10d 0307 	add.w	r3, sp, #7
 8012910:	461d      	mov	r5, r3
 8012912:	270a      	movs	r7, #10
 8012914:	461a      	mov	r2, r3
 8012916:	fbb1 f6f7 	udiv	r6, r1, r7
 801291a:	fb07 1416 	mls	r4, r7, r6, r1
 801291e:	3430      	adds	r4, #48	@ 0x30
 8012920:	f802 4c01 	strb.w	r4, [r2, #-1]
 8012924:	460c      	mov	r4, r1
 8012926:	2c63      	cmp	r4, #99	@ 0x63
 8012928:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 801292c:	4631      	mov	r1, r6
 801292e:	dcf1      	bgt.n	8012914 <__exponent+0x1c>
 8012930:	3130      	adds	r1, #48	@ 0x30
 8012932:	1e94      	subs	r4, r2, #2
 8012934:	f803 1c01 	strb.w	r1, [r3, #-1]
 8012938:	1c41      	adds	r1, r0, #1
 801293a:	4623      	mov	r3, r4
 801293c:	42ab      	cmp	r3, r5
 801293e:	d30a      	bcc.n	8012956 <__exponent+0x5e>
 8012940:	f10d 0309 	add.w	r3, sp, #9
 8012944:	1a9b      	subs	r3, r3, r2
 8012946:	42ac      	cmp	r4, r5
 8012948:	bf88      	it	hi
 801294a:	2300      	movhi	r3, #0
 801294c:	3302      	adds	r3, #2
 801294e:	4403      	add	r3, r0
 8012950:	1a18      	subs	r0, r3, r0
 8012952:	b003      	add	sp, #12
 8012954:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8012956:	f813 6b01 	ldrb.w	r6, [r3], #1
 801295a:	f801 6f01 	strb.w	r6, [r1, #1]!
 801295e:	e7ed      	b.n	801293c <__exponent+0x44>
 8012960:	2330      	movs	r3, #48	@ 0x30
 8012962:	3130      	adds	r1, #48	@ 0x30
 8012964:	7083      	strb	r3, [r0, #2]
 8012966:	70c1      	strb	r1, [r0, #3]
 8012968:	1d03      	adds	r3, r0, #4
 801296a:	e7f1      	b.n	8012950 <__exponent+0x58>
 801296c:	0000      	movs	r0, r0
	...

08012970 <_printf_float>:
 8012970:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8012974:	b08d      	sub	sp, #52	@ 0x34
 8012976:	460c      	mov	r4, r1
 8012978:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 801297c:	4616      	mov	r6, r2
 801297e:	461f      	mov	r7, r3
 8012980:	4605      	mov	r5, r0
 8012982:	f000 fc93 	bl	80132ac <_localeconv_r>
 8012986:	f8d0 b000 	ldr.w	fp, [r0]
 801298a:	4658      	mov	r0, fp
 801298c:	f7ed fcf8 	bl	8000380 <strlen>
 8012990:	2300      	movs	r3, #0
 8012992:	930a      	str	r3, [sp, #40]	@ 0x28
 8012994:	f8d8 3000 	ldr.w	r3, [r8]
 8012998:	f894 9018 	ldrb.w	r9, [r4, #24]
 801299c:	6822      	ldr	r2, [r4, #0]
 801299e:	9005      	str	r0, [sp, #20]
 80129a0:	3307      	adds	r3, #7
 80129a2:	f023 0307 	bic.w	r3, r3, #7
 80129a6:	f103 0108 	add.w	r1, r3, #8
 80129aa:	f8c8 1000 	str.w	r1, [r8]
 80129ae:	ed93 0b00 	vldr	d0, [r3]
 80129b2:	ed9f 6b97 	vldr	d6, [pc, #604]	@ 8012c10 <_printf_float+0x2a0>
 80129b6:	eeb0 7bc0 	vabs.f64	d7, d0
 80129ba:	eeb4 7b46 	vcmp.f64	d7, d6
 80129be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129c2:	ed84 0b12 	vstr	d0, [r4, #72]	@ 0x48
 80129c6:	dd24      	ble.n	8012a12 <_printf_float+0xa2>
 80129c8:	eeb5 0bc0 	vcmpe.f64	d0, #0.0
 80129cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80129d0:	d502      	bpl.n	80129d8 <_printf_float+0x68>
 80129d2:	232d      	movs	r3, #45	@ 0x2d
 80129d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80129d8:	498f      	ldr	r1, [pc, #572]	@ (8012c18 <_printf_float+0x2a8>)
 80129da:	4b90      	ldr	r3, [pc, #576]	@ (8012c1c <_printf_float+0x2ac>)
 80129dc:	f1b9 0f47 	cmp.w	r9, #71	@ 0x47
 80129e0:	bf8c      	ite	hi
 80129e2:	4688      	movhi	r8, r1
 80129e4:	4698      	movls	r8, r3
 80129e6:	f022 0204 	bic.w	r2, r2, #4
 80129ea:	2303      	movs	r3, #3
 80129ec:	6123      	str	r3, [r4, #16]
 80129ee:	6022      	str	r2, [r4, #0]
 80129f0:	f04f 0a00 	mov.w	sl, #0
 80129f4:	9700      	str	r7, [sp, #0]
 80129f6:	4633      	mov	r3, r6
 80129f8:	aa0b      	add	r2, sp, #44	@ 0x2c
 80129fa:	4621      	mov	r1, r4
 80129fc:	4628      	mov	r0, r5
 80129fe:	f000 f9d1 	bl	8012da4 <_printf_common>
 8012a02:	3001      	adds	r0, #1
 8012a04:	f040 8089 	bne.w	8012b1a <_printf_float+0x1aa>
 8012a08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012a0c:	b00d      	add	sp, #52	@ 0x34
 8012a0e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8012a12:	eeb4 0b40 	vcmp.f64	d0, d0
 8012a16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012a1a:	d709      	bvc.n	8012a30 <_printf_float+0xc0>
 8012a1c:	ee10 3a90 	vmov	r3, s1
 8012a20:	2b00      	cmp	r3, #0
 8012a22:	bfbc      	itt	lt
 8012a24:	232d      	movlt	r3, #45	@ 0x2d
 8012a26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8012a2a:	497d      	ldr	r1, [pc, #500]	@ (8012c20 <_printf_float+0x2b0>)
 8012a2c:	4b7d      	ldr	r3, [pc, #500]	@ (8012c24 <_printf_float+0x2b4>)
 8012a2e:	e7d5      	b.n	80129dc <_printf_float+0x6c>
 8012a30:	6863      	ldr	r3, [r4, #4]
 8012a32:	1c59      	adds	r1, r3, #1
 8012a34:	f009 0adf 	and.w	sl, r9, #223	@ 0xdf
 8012a38:	d139      	bne.n	8012aae <_printf_float+0x13e>
 8012a3a:	2306      	movs	r3, #6
 8012a3c:	6063      	str	r3, [r4, #4]
 8012a3e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8012a42:	2300      	movs	r3, #0
 8012a44:	6022      	str	r2, [r4, #0]
 8012a46:	9303      	str	r3, [sp, #12]
 8012a48:	ab0a      	add	r3, sp, #40	@ 0x28
 8012a4a:	e9cd 9301 	strd	r9, r3, [sp, #4]
 8012a4e:	ab09      	add	r3, sp, #36	@ 0x24
 8012a50:	9300      	str	r3, [sp, #0]
 8012a52:	6861      	ldr	r1, [r4, #4]
 8012a54:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8012a58:	4628      	mov	r0, r5
 8012a5a:	f7ff fef9 	bl	8012850 <__cvt>
 8012a5e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012a62:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8012a64:	4680      	mov	r8, r0
 8012a66:	d129      	bne.n	8012abc <_printf_float+0x14c>
 8012a68:	1cc8      	adds	r0, r1, #3
 8012a6a:	db02      	blt.n	8012a72 <_printf_float+0x102>
 8012a6c:	6863      	ldr	r3, [r4, #4]
 8012a6e:	4299      	cmp	r1, r3
 8012a70:	dd41      	ble.n	8012af6 <_printf_float+0x186>
 8012a72:	f1a9 0902 	sub.w	r9, r9, #2
 8012a76:	fa5f f989 	uxtb.w	r9, r9
 8012a7a:	3901      	subs	r1, #1
 8012a7c:	464a      	mov	r2, r9
 8012a7e:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8012a82:	9109      	str	r1, [sp, #36]	@ 0x24
 8012a84:	f7ff ff38 	bl	80128f8 <__exponent>
 8012a88:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8012a8a:	1813      	adds	r3, r2, r0
 8012a8c:	2a01      	cmp	r2, #1
 8012a8e:	4682      	mov	sl, r0
 8012a90:	6123      	str	r3, [r4, #16]
 8012a92:	dc02      	bgt.n	8012a9a <_printf_float+0x12a>
 8012a94:	6822      	ldr	r2, [r4, #0]
 8012a96:	07d2      	lsls	r2, r2, #31
 8012a98:	d501      	bpl.n	8012a9e <_printf_float+0x12e>
 8012a9a:	3301      	adds	r3, #1
 8012a9c:	6123      	str	r3, [r4, #16]
 8012a9e:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8012aa2:	2b00      	cmp	r3, #0
 8012aa4:	d0a6      	beq.n	80129f4 <_printf_float+0x84>
 8012aa6:	232d      	movs	r3, #45	@ 0x2d
 8012aa8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012aac:	e7a2      	b.n	80129f4 <_printf_float+0x84>
 8012aae:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8012ab2:	d1c4      	bne.n	8012a3e <_printf_float+0xce>
 8012ab4:	2b00      	cmp	r3, #0
 8012ab6:	d1c2      	bne.n	8012a3e <_printf_float+0xce>
 8012ab8:	2301      	movs	r3, #1
 8012aba:	e7bf      	b.n	8012a3c <_printf_float+0xcc>
 8012abc:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012ac0:	d9db      	bls.n	8012a7a <_printf_float+0x10a>
 8012ac2:	f1b9 0f66 	cmp.w	r9, #102	@ 0x66
 8012ac6:	d118      	bne.n	8012afa <_printf_float+0x18a>
 8012ac8:	2900      	cmp	r1, #0
 8012aca:	6863      	ldr	r3, [r4, #4]
 8012acc:	dd0b      	ble.n	8012ae6 <_printf_float+0x176>
 8012ace:	6121      	str	r1, [r4, #16]
 8012ad0:	b913      	cbnz	r3, 8012ad8 <_printf_float+0x168>
 8012ad2:	6822      	ldr	r2, [r4, #0]
 8012ad4:	07d0      	lsls	r0, r2, #31
 8012ad6:	d502      	bpl.n	8012ade <_printf_float+0x16e>
 8012ad8:	3301      	adds	r3, #1
 8012ada:	440b      	add	r3, r1
 8012adc:	6123      	str	r3, [r4, #16]
 8012ade:	65a1      	str	r1, [r4, #88]	@ 0x58
 8012ae0:	f04f 0a00 	mov.w	sl, #0
 8012ae4:	e7db      	b.n	8012a9e <_printf_float+0x12e>
 8012ae6:	b913      	cbnz	r3, 8012aee <_printf_float+0x17e>
 8012ae8:	6822      	ldr	r2, [r4, #0]
 8012aea:	07d2      	lsls	r2, r2, #31
 8012aec:	d501      	bpl.n	8012af2 <_printf_float+0x182>
 8012aee:	3302      	adds	r3, #2
 8012af0:	e7f4      	b.n	8012adc <_printf_float+0x16c>
 8012af2:	2301      	movs	r3, #1
 8012af4:	e7f2      	b.n	8012adc <_printf_float+0x16c>
 8012af6:	f04f 0967 	mov.w	r9, #103	@ 0x67
 8012afa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8012afc:	4299      	cmp	r1, r3
 8012afe:	db05      	blt.n	8012b0c <_printf_float+0x19c>
 8012b00:	6823      	ldr	r3, [r4, #0]
 8012b02:	6121      	str	r1, [r4, #16]
 8012b04:	07d8      	lsls	r0, r3, #31
 8012b06:	d5ea      	bpl.n	8012ade <_printf_float+0x16e>
 8012b08:	1c4b      	adds	r3, r1, #1
 8012b0a:	e7e7      	b.n	8012adc <_printf_float+0x16c>
 8012b0c:	2900      	cmp	r1, #0
 8012b0e:	bfd4      	ite	le
 8012b10:	f1c1 0202 	rsble	r2, r1, #2
 8012b14:	2201      	movgt	r2, #1
 8012b16:	4413      	add	r3, r2
 8012b18:	e7e0      	b.n	8012adc <_printf_float+0x16c>
 8012b1a:	6823      	ldr	r3, [r4, #0]
 8012b1c:	055a      	lsls	r2, r3, #21
 8012b1e:	d407      	bmi.n	8012b30 <_printf_float+0x1c0>
 8012b20:	6923      	ldr	r3, [r4, #16]
 8012b22:	4642      	mov	r2, r8
 8012b24:	4631      	mov	r1, r6
 8012b26:	4628      	mov	r0, r5
 8012b28:	47b8      	blx	r7
 8012b2a:	3001      	adds	r0, #1
 8012b2c:	d12a      	bne.n	8012b84 <_printf_float+0x214>
 8012b2e:	e76b      	b.n	8012a08 <_printf_float+0x98>
 8012b30:	f1b9 0f65 	cmp.w	r9, #101	@ 0x65
 8012b34:	f240 80e0 	bls.w	8012cf8 <_printf_float+0x388>
 8012b38:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012b3c:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012b40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012b44:	d133      	bne.n	8012bae <_printf_float+0x23e>
 8012b46:	4a38      	ldr	r2, [pc, #224]	@ (8012c28 <_printf_float+0x2b8>)
 8012b48:	2301      	movs	r3, #1
 8012b4a:	4631      	mov	r1, r6
 8012b4c:	4628      	mov	r0, r5
 8012b4e:	47b8      	blx	r7
 8012b50:	3001      	adds	r0, #1
 8012b52:	f43f af59 	beq.w	8012a08 <_printf_float+0x98>
 8012b56:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8012b5a:	4543      	cmp	r3, r8
 8012b5c:	db02      	blt.n	8012b64 <_printf_float+0x1f4>
 8012b5e:	6823      	ldr	r3, [r4, #0]
 8012b60:	07d8      	lsls	r0, r3, #31
 8012b62:	d50f      	bpl.n	8012b84 <_printf_float+0x214>
 8012b64:	9b05      	ldr	r3, [sp, #20]
 8012b66:	465a      	mov	r2, fp
 8012b68:	4631      	mov	r1, r6
 8012b6a:	4628      	mov	r0, r5
 8012b6c:	47b8      	blx	r7
 8012b6e:	3001      	adds	r0, #1
 8012b70:	f43f af4a 	beq.w	8012a08 <_printf_float+0x98>
 8012b74:	f04f 0900 	mov.w	r9, #0
 8012b78:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8012b7c:	f104 0a1a 	add.w	sl, r4, #26
 8012b80:	45c8      	cmp	r8, r9
 8012b82:	dc09      	bgt.n	8012b98 <_printf_float+0x228>
 8012b84:	6823      	ldr	r3, [r4, #0]
 8012b86:	079b      	lsls	r3, r3, #30
 8012b88:	f100 8107 	bmi.w	8012d9a <_printf_float+0x42a>
 8012b8c:	68e0      	ldr	r0, [r4, #12]
 8012b8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8012b90:	4298      	cmp	r0, r3
 8012b92:	bfb8      	it	lt
 8012b94:	4618      	movlt	r0, r3
 8012b96:	e739      	b.n	8012a0c <_printf_float+0x9c>
 8012b98:	2301      	movs	r3, #1
 8012b9a:	4652      	mov	r2, sl
 8012b9c:	4631      	mov	r1, r6
 8012b9e:	4628      	mov	r0, r5
 8012ba0:	47b8      	blx	r7
 8012ba2:	3001      	adds	r0, #1
 8012ba4:	f43f af30 	beq.w	8012a08 <_printf_float+0x98>
 8012ba8:	f109 0901 	add.w	r9, r9, #1
 8012bac:	e7e8      	b.n	8012b80 <_printf_float+0x210>
 8012bae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bb0:	2b00      	cmp	r3, #0
 8012bb2:	dc3b      	bgt.n	8012c2c <_printf_float+0x2bc>
 8012bb4:	4a1c      	ldr	r2, [pc, #112]	@ (8012c28 <_printf_float+0x2b8>)
 8012bb6:	2301      	movs	r3, #1
 8012bb8:	4631      	mov	r1, r6
 8012bba:	4628      	mov	r0, r5
 8012bbc:	47b8      	blx	r7
 8012bbe:	3001      	adds	r0, #1
 8012bc0:	f43f af22 	beq.w	8012a08 <_printf_float+0x98>
 8012bc4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8012bc8:	ea59 0303 	orrs.w	r3, r9, r3
 8012bcc:	d102      	bne.n	8012bd4 <_printf_float+0x264>
 8012bce:	6823      	ldr	r3, [r4, #0]
 8012bd0:	07d9      	lsls	r1, r3, #31
 8012bd2:	d5d7      	bpl.n	8012b84 <_printf_float+0x214>
 8012bd4:	9b05      	ldr	r3, [sp, #20]
 8012bd6:	465a      	mov	r2, fp
 8012bd8:	4631      	mov	r1, r6
 8012bda:	4628      	mov	r0, r5
 8012bdc:	47b8      	blx	r7
 8012bde:	3001      	adds	r0, #1
 8012be0:	f43f af12 	beq.w	8012a08 <_printf_float+0x98>
 8012be4:	f04f 0a00 	mov.w	sl, #0
 8012be8:	f104 0b1a 	add.w	fp, r4, #26
 8012bec:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012bee:	425b      	negs	r3, r3
 8012bf0:	4553      	cmp	r3, sl
 8012bf2:	dc01      	bgt.n	8012bf8 <_printf_float+0x288>
 8012bf4:	464b      	mov	r3, r9
 8012bf6:	e794      	b.n	8012b22 <_printf_float+0x1b2>
 8012bf8:	2301      	movs	r3, #1
 8012bfa:	465a      	mov	r2, fp
 8012bfc:	4631      	mov	r1, r6
 8012bfe:	4628      	mov	r0, r5
 8012c00:	47b8      	blx	r7
 8012c02:	3001      	adds	r0, #1
 8012c04:	f43f af00 	beq.w	8012a08 <_printf_float+0x98>
 8012c08:	f10a 0a01 	add.w	sl, sl, #1
 8012c0c:	e7ee      	b.n	8012bec <_printf_float+0x27c>
 8012c0e:	bf00      	nop
 8012c10:	ffffffff 	.word	0xffffffff
 8012c14:	7fefffff 	.word	0x7fefffff
 8012c18:	08028920 	.word	0x08028920
 8012c1c:	0802891c 	.word	0x0802891c
 8012c20:	08028928 	.word	0x08028928
 8012c24:	08028924 	.word	0x08028924
 8012c28:	0802892c 	.word	0x0802892c
 8012c2c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c2e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8012c32:	4553      	cmp	r3, sl
 8012c34:	bfa8      	it	ge
 8012c36:	4653      	movge	r3, sl
 8012c38:	2b00      	cmp	r3, #0
 8012c3a:	4699      	mov	r9, r3
 8012c3c:	dc37      	bgt.n	8012cae <_printf_float+0x33e>
 8012c3e:	2300      	movs	r3, #0
 8012c40:	9307      	str	r3, [sp, #28]
 8012c42:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c46:	f104 021a 	add.w	r2, r4, #26
 8012c4a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8012c4c:	9907      	ldr	r1, [sp, #28]
 8012c4e:	9306      	str	r3, [sp, #24]
 8012c50:	eba3 0309 	sub.w	r3, r3, r9
 8012c54:	428b      	cmp	r3, r1
 8012c56:	dc31      	bgt.n	8012cbc <_printf_float+0x34c>
 8012c58:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c5a:	459a      	cmp	sl, r3
 8012c5c:	dc3b      	bgt.n	8012cd6 <_printf_float+0x366>
 8012c5e:	6823      	ldr	r3, [r4, #0]
 8012c60:	07da      	lsls	r2, r3, #31
 8012c62:	d438      	bmi.n	8012cd6 <_printf_float+0x366>
 8012c64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c66:	ebaa 0903 	sub.w	r9, sl, r3
 8012c6a:	9b06      	ldr	r3, [sp, #24]
 8012c6c:	ebaa 0303 	sub.w	r3, sl, r3
 8012c70:	4599      	cmp	r9, r3
 8012c72:	bfa8      	it	ge
 8012c74:	4699      	movge	r9, r3
 8012c76:	f1b9 0f00 	cmp.w	r9, #0
 8012c7a:	dc34      	bgt.n	8012ce6 <_printf_float+0x376>
 8012c7c:	f04f 0800 	mov.w	r8, #0
 8012c80:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8012c84:	f104 0b1a 	add.w	fp, r4, #26
 8012c88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8012c8a:	ebaa 0303 	sub.w	r3, sl, r3
 8012c8e:	eba3 0309 	sub.w	r3, r3, r9
 8012c92:	4543      	cmp	r3, r8
 8012c94:	f77f af76 	ble.w	8012b84 <_printf_float+0x214>
 8012c98:	2301      	movs	r3, #1
 8012c9a:	465a      	mov	r2, fp
 8012c9c:	4631      	mov	r1, r6
 8012c9e:	4628      	mov	r0, r5
 8012ca0:	47b8      	blx	r7
 8012ca2:	3001      	adds	r0, #1
 8012ca4:	f43f aeb0 	beq.w	8012a08 <_printf_float+0x98>
 8012ca8:	f108 0801 	add.w	r8, r8, #1
 8012cac:	e7ec      	b.n	8012c88 <_printf_float+0x318>
 8012cae:	4642      	mov	r2, r8
 8012cb0:	4631      	mov	r1, r6
 8012cb2:	4628      	mov	r0, r5
 8012cb4:	47b8      	blx	r7
 8012cb6:	3001      	adds	r0, #1
 8012cb8:	d1c1      	bne.n	8012c3e <_printf_float+0x2ce>
 8012cba:	e6a5      	b.n	8012a08 <_printf_float+0x98>
 8012cbc:	2301      	movs	r3, #1
 8012cbe:	4631      	mov	r1, r6
 8012cc0:	4628      	mov	r0, r5
 8012cc2:	9206      	str	r2, [sp, #24]
 8012cc4:	47b8      	blx	r7
 8012cc6:	3001      	adds	r0, #1
 8012cc8:	f43f ae9e 	beq.w	8012a08 <_printf_float+0x98>
 8012ccc:	9b07      	ldr	r3, [sp, #28]
 8012cce:	9a06      	ldr	r2, [sp, #24]
 8012cd0:	3301      	adds	r3, #1
 8012cd2:	9307      	str	r3, [sp, #28]
 8012cd4:	e7b9      	b.n	8012c4a <_printf_float+0x2da>
 8012cd6:	9b05      	ldr	r3, [sp, #20]
 8012cd8:	465a      	mov	r2, fp
 8012cda:	4631      	mov	r1, r6
 8012cdc:	4628      	mov	r0, r5
 8012cde:	47b8      	blx	r7
 8012ce0:	3001      	adds	r0, #1
 8012ce2:	d1bf      	bne.n	8012c64 <_printf_float+0x2f4>
 8012ce4:	e690      	b.n	8012a08 <_printf_float+0x98>
 8012ce6:	9a06      	ldr	r2, [sp, #24]
 8012ce8:	464b      	mov	r3, r9
 8012cea:	4442      	add	r2, r8
 8012cec:	4631      	mov	r1, r6
 8012cee:	4628      	mov	r0, r5
 8012cf0:	47b8      	blx	r7
 8012cf2:	3001      	adds	r0, #1
 8012cf4:	d1c2      	bne.n	8012c7c <_printf_float+0x30c>
 8012cf6:	e687      	b.n	8012a08 <_printf_float+0x98>
 8012cf8:	f8dd 9028 	ldr.w	r9, [sp, #40]	@ 0x28
 8012cfc:	f1b9 0f01 	cmp.w	r9, #1
 8012d00:	dc01      	bgt.n	8012d06 <_printf_float+0x396>
 8012d02:	07db      	lsls	r3, r3, #31
 8012d04:	d536      	bpl.n	8012d74 <_printf_float+0x404>
 8012d06:	2301      	movs	r3, #1
 8012d08:	4642      	mov	r2, r8
 8012d0a:	4631      	mov	r1, r6
 8012d0c:	4628      	mov	r0, r5
 8012d0e:	47b8      	blx	r7
 8012d10:	3001      	adds	r0, #1
 8012d12:	f43f ae79 	beq.w	8012a08 <_printf_float+0x98>
 8012d16:	9b05      	ldr	r3, [sp, #20]
 8012d18:	465a      	mov	r2, fp
 8012d1a:	4631      	mov	r1, r6
 8012d1c:	4628      	mov	r0, r5
 8012d1e:	47b8      	blx	r7
 8012d20:	3001      	adds	r0, #1
 8012d22:	f43f ae71 	beq.w	8012a08 <_printf_float+0x98>
 8012d26:	ed94 7b12 	vldr	d7, [r4, #72]	@ 0x48
 8012d2a:	eeb5 7b40 	vcmp.f64	d7, #0.0
 8012d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8012d32:	f109 39ff 	add.w	r9, r9, #4294967295	@ 0xffffffff
 8012d36:	d018      	beq.n	8012d6a <_printf_float+0x3fa>
 8012d38:	464b      	mov	r3, r9
 8012d3a:	f108 0201 	add.w	r2, r8, #1
 8012d3e:	4631      	mov	r1, r6
 8012d40:	4628      	mov	r0, r5
 8012d42:	47b8      	blx	r7
 8012d44:	3001      	adds	r0, #1
 8012d46:	d10c      	bne.n	8012d62 <_printf_float+0x3f2>
 8012d48:	e65e      	b.n	8012a08 <_printf_float+0x98>
 8012d4a:	2301      	movs	r3, #1
 8012d4c:	465a      	mov	r2, fp
 8012d4e:	4631      	mov	r1, r6
 8012d50:	4628      	mov	r0, r5
 8012d52:	47b8      	blx	r7
 8012d54:	3001      	adds	r0, #1
 8012d56:	f43f ae57 	beq.w	8012a08 <_printf_float+0x98>
 8012d5a:	f108 0801 	add.w	r8, r8, #1
 8012d5e:	45c8      	cmp	r8, r9
 8012d60:	dbf3      	blt.n	8012d4a <_printf_float+0x3da>
 8012d62:	4653      	mov	r3, sl
 8012d64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8012d68:	e6dc      	b.n	8012b24 <_printf_float+0x1b4>
 8012d6a:	f04f 0800 	mov.w	r8, #0
 8012d6e:	f104 0b1a 	add.w	fp, r4, #26
 8012d72:	e7f4      	b.n	8012d5e <_printf_float+0x3ee>
 8012d74:	2301      	movs	r3, #1
 8012d76:	4642      	mov	r2, r8
 8012d78:	e7e1      	b.n	8012d3e <_printf_float+0x3ce>
 8012d7a:	2301      	movs	r3, #1
 8012d7c:	464a      	mov	r2, r9
 8012d7e:	4631      	mov	r1, r6
 8012d80:	4628      	mov	r0, r5
 8012d82:	47b8      	blx	r7
 8012d84:	3001      	adds	r0, #1
 8012d86:	f43f ae3f 	beq.w	8012a08 <_printf_float+0x98>
 8012d8a:	f108 0801 	add.w	r8, r8, #1
 8012d8e:	68e3      	ldr	r3, [r4, #12]
 8012d90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8012d92:	1a5b      	subs	r3, r3, r1
 8012d94:	4543      	cmp	r3, r8
 8012d96:	dcf0      	bgt.n	8012d7a <_printf_float+0x40a>
 8012d98:	e6f8      	b.n	8012b8c <_printf_float+0x21c>
 8012d9a:	f04f 0800 	mov.w	r8, #0
 8012d9e:	f104 0919 	add.w	r9, r4, #25
 8012da2:	e7f4      	b.n	8012d8e <_printf_float+0x41e>

08012da4 <_printf_common>:
 8012da4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8012da8:	4616      	mov	r6, r2
 8012daa:	4698      	mov	r8, r3
 8012dac:	688a      	ldr	r2, [r1, #8]
 8012dae:	690b      	ldr	r3, [r1, #16]
 8012db0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8012db4:	4293      	cmp	r3, r2
 8012db6:	bfb8      	it	lt
 8012db8:	4613      	movlt	r3, r2
 8012dba:	6033      	str	r3, [r6, #0]
 8012dbc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8012dc0:	4607      	mov	r7, r0
 8012dc2:	460c      	mov	r4, r1
 8012dc4:	b10a      	cbz	r2, 8012dca <_printf_common+0x26>
 8012dc6:	3301      	adds	r3, #1
 8012dc8:	6033      	str	r3, [r6, #0]
 8012dca:	6823      	ldr	r3, [r4, #0]
 8012dcc:	0699      	lsls	r1, r3, #26
 8012dce:	bf42      	ittt	mi
 8012dd0:	6833      	ldrmi	r3, [r6, #0]
 8012dd2:	3302      	addmi	r3, #2
 8012dd4:	6033      	strmi	r3, [r6, #0]
 8012dd6:	6825      	ldr	r5, [r4, #0]
 8012dd8:	f015 0506 	ands.w	r5, r5, #6
 8012ddc:	d106      	bne.n	8012dec <_printf_common+0x48>
 8012dde:	f104 0a19 	add.w	sl, r4, #25
 8012de2:	68e3      	ldr	r3, [r4, #12]
 8012de4:	6832      	ldr	r2, [r6, #0]
 8012de6:	1a9b      	subs	r3, r3, r2
 8012de8:	42ab      	cmp	r3, r5
 8012dea:	dc26      	bgt.n	8012e3a <_printf_common+0x96>
 8012dec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8012df0:	6822      	ldr	r2, [r4, #0]
 8012df2:	3b00      	subs	r3, #0
 8012df4:	bf18      	it	ne
 8012df6:	2301      	movne	r3, #1
 8012df8:	0692      	lsls	r2, r2, #26
 8012dfa:	d42b      	bmi.n	8012e54 <_printf_common+0xb0>
 8012dfc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8012e00:	4641      	mov	r1, r8
 8012e02:	4638      	mov	r0, r7
 8012e04:	47c8      	blx	r9
 8012e06:	3001      	adds	r0, #1
 8012e08:	d01e      	beq.n	8012e48 <_printf_common+0xa4>
 8012e0a:	6823      	ldr	r3, [r4, #0]
 8012e0c:	6922      	ldr	r2, [r4, #16]
 8012e0e:	f003 0306 	and.w	r3, r3, #6
 8012e12:	2b04      	cmp	r3, #4
 8012e14:	bf02      	ittt	eq
 8012e16:	68e5      	ldreq	r5, [r4, #12]
 8012e18:	6833      	ldreq	r3, [r6, #0]
 8012e1a:	1aed      	subeq	r5, r5, r3
 8012e1c:	68a3      	ldr	r3, [r4, #8]
 8012e1e:	bf0c      	ite	eq
 8012e20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8012e24:	2500      	movne	r5, #0
 8012e26:	4293      	cmp	r3, r2
 8012e28:	bfc4      	itt	gt
 8012e2a:	1a9b      	subgt	r3, r3, r2
 8012e2c:	18ed      	addgt	r5, r5, r3
 8012e2e:	2600      	movs	r6, #0
 8012e30:	341a      	adds	r4, #26
 8012e32:	42b5      	cmp	r5, r6
 8012e34:	d11a      	bne.n	8012e6c <_printf_common+0xc8>
 8012e36:	2000      	movs	r0, #0
 8012e38:	e008      	b.n	8012e4c <_printf_common+0xa8>
 8012e3a:	2301      	movs	r3, #1
 8012e3c:	4652      	mov	r2, sl
 8012e3e:	4641      	mov	r1, r8
 8012e40:	4638      	mov	r0, r7
 8012e42:	47c8      	blx	r9
 8012e44:	3001      	adds	r0, #1
 8012e46:	d103      	bne.n	8012e50 <_printf_common+0xac>
 8012e48:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012e4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012e50:	3501      	adds	r5, #1
 8012e52:	e7c6      	b.n	8012de2 <_printf_common+0x3e>
 8012e54:	18e1      	adds	r1, r4, r3
 8012e56:	1c5a      	adds	r2, r3, #1
 8012e58:	2030      	movs	r0, #48	@ 0x30
 8012e5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8012e5e:	4422      	add	r2, r4
 8012e60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8012e64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8012e68:	3302      	adds	r3, #2
 8012e6a:	e7c7      	b.n	8012dfc <_printf_common+0x58>
 8012e6c:	2301      	movs	r3, #1
 8012e6e:	4622      	mov	r2, r4
 8012e70:	4641      	mov	r1, r8
 8012e72:	4638      	mov	r0, r7
 8012e74:	47c8      	blx	r9
 8012e76:	3001      	adds	r0, #1
 8012e78:	d0e6      	beq.n	8012e48 <_printf_common+0xa4>
 8012e7a:	3601      	adds	r6, #1
 8012e7c:	e7d9      	b.n	8012e32 <_printf_common+0x8e>
	...

08012e80 <_printf_i>:
 8012e80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8012e84:	7e0f      	ldrb	r7, [r1, #24]
 8012e86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8012e88:	2f78      	cmp	r7, #120	@ 0x78
 8012e8a:	4691      	mov	r9, r2
 8012e8c:	4680      	mov	r8, r0
 8012e8e:	460c      	mov	r4, r1
 8012e90:	469a      	mov	sl, r3
 8012e92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8012e96:	d807      	bhi.n	8012ea8 <_printf_i+0x28>
 8012e98:	2f62      	cmp	r7, #98	@ 0x62
 8012e9a:	d80a      	bhi.n	8012eb2 <_printf_i+0x32>
 8012e9c:	2f00      	cmp	r7, #0
 8012e9e:	f000 80d1 	beq.w	8013044 <_printf_i+0x1c4>
 8012ea2:	2f58      	cmp	r7, #88	@ 0x58
 8012ea4:	f000 80b8 	beq.w	8013018 <_printf_i+0x198>
 8012ea8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012eac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8012eb0:	e03a      	b.n	8012f28 <_printf_i+0xa8>
 8012eb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8012eb6:	2b15      	cmp	r3, #21
 8012eb8:	d8f6      	bhi.n	8012ea8 <_printf_i+0x28>
 8012eba:	a101      	add	r1, pc, #4	@ (adr r1, 8012ec0 <_printf_i+0x40>)
 8012ebc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8012ec0:	08012f19 	.word	0x08012f19
 8012ec4:	08012f2d 	.word	0x08012f2d
 8012ec8:	08012ea9 	.word	0x08012ea9
 8012ecc:	08012ea9 	.word	0x08012ea9
 8012ed0:	08012ea9 	.word	0x08012ea9
 8012ed4:	08012ea9 	.word	0x08012ea9
 8012ed8:	08012f2d 	.word	0x08012f2d
 8012edc:	08012ea9 	.word	0x08012ea9
 8012ee0:	08012ea9 	.word	0x08012ea9
 8012ee4:	08012ea9 	.word	0x08012ea9
 8012ee8:	08012ea9 	.word	0x08012ea9
 8012eec:	0801302b 	.word	0x0801302b
 8012ef0:	08012f57 	.word	0x08012f57
 8012ef4:	08012fe5 	.word	0x08012fe5
 8012ef8:	08012ea9 	.word	0x08012ea9
 8012efc:	08012ea9 	.word	0x08012ea9
 8012f00:	0801304d 	.word	0x0801304d
 8012f04:	08012ea9 	.word	0x08012ea9
 8012f08:	08012f57 	.word	0x08012f57
 8012f0c:	08012ea9 	.word	0x08012ea9
 8012f10:	08012ea9 	.word	0x08012ea9
 8012f14:	08012fed 	.word	0x08012fed
 8012f18:	6833      	ldr	r3, [r6, #0]
 8012f1a:	1d1a      	adds	r2, r3, #4
 8012f1c:	681b      	ldr	r3, [r3, #0]
 8012f1e:	6032      	str	r2, [r6, #0]
 8012f20:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8012f24:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8012f28:	2301      	movs	r3, #1
 8012f2a:	e09c      	b.n	8013066 <_printf_i+0x1e6>
 8012f2c:	6833      	ldr	r3, [r6, #0]
 8012f2e:	6820      	ldr	r0, [r4, #0]
 8012f30:	1d19      	adds	r1, r3, #4
 8012f32:	6031      	str	r1, [r6, #0]
 8012f34:	0606      	lsls	r6, r0, #24
 8012f36:	d501      	bpl.n	8012f3c <_printf_i+0xbc>
 8012f38:	681d      	ldr	r5, [r3, #0]
 8012f3a:	e003      	b.n	8012f44 <_printf_i+0xc4>
 8012f3c:	0645      	lsls	r5, r0, #25
 8012f3e:	d5fb      	bpl.n	8012f38 <_printf_i+0xb8>
 8012f40:	f9b3 5000 	ldrsh.w	r5, [r3]
 8012f44:	2d00      	cmp	r5, #0
 8012f46:	da03      	bge.n	8012f50 <_printf_i+0xd0>
 8012f48:	232d      	movs	r3, #45	@ 0x2d
 8012f4a:	426d      	negs	r5, r5
 8012f4c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8012f50:	4858      	ldr	r0, [pc, #352]	@ (80130b4 <_printf_i+0x234>)
 8012f52:	230a      	movs	r3, #10
 8012f54:	e011      	b.n	8012f7a <_printf_i+0xfa>
 8012f56:	6821      	ldr	r1, [r4, #0]
 8012f58:	6833      	ldr	r3, [r6, #0]
 8012f5a:	0608      	lsls	r0, r1, #24
 8012f5c:	f853 5b04 	ldr.w	r5, [r3], #4
 8012f60:	d402      	bmi.n	8012f68 <_printf_i+0xe8>
 8012f62:	0649      	lsls	r1, r1, #25
 8012f64:	bf48      	it	mi
 8012f66:	b2ad      	uxthmi	r5, r5
 8012f68:	2f6f      	cmp	r7, #111	@ 0x6f
 8012f6a:	4852      	ldr	r0, [pc, #328]	@ (80130b4 <_printf_i+0x234>)
 8012f6c:	6033      	str	r3, [r6, #0]
 8012f6e:	bf14      	ite	ne
 8012f70:	230a      	movne	r3, #10
 8012f72:	2308      	moveq	r3, #8
 8012f74:	2100      	movs	r1, #0
 8012f76:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8012f7a:	6866      	ldr	r6, [r4, #4]
 8012f7c:	60a6      	str	r6, [r4, #8]
 8012f7e:	2e00      	cmp	r6, #0
 8012f80:	db05      	blt.n	8012f8e <_printf_i+0x10e>
 8012f82:	6821      	ldr	r1, [r4, #0]
 8012f84:	432e      	orrs	r6, r5
 8012f86:	f021 0104 	bic.w	r1, r1, #4
 8012f8a:	6021      	str	r1, [r4, #0]
 8012f8c:	d04b      	beq.n	8013026 <_printf_i+0x1a6>
 8012f8e:	4616      	mov	r6, r2
 8012f90:	fbb5 f1f3 	udiv	r1, r5, r3
 8012f94:	fb03 5711 	mls	r7, r3, r1, r5
 8012f98:	5dc7      	ldrb	r7, [r0, r7]
 8012f9a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8012f9e:	462f      	mov	r7, r5
 8012fa0:	42bb      	cmp	r3, r7
 8012fa2:	460d      	mov	r5, r1
 8012fa4:	d9f4      	bls.n	8012f90 <_printf_i+0x110>
 8012fa6:	2b08      	cmp	r3, #8
 8012fa8:	d10b      	bne.n	8012fc2 <_printf_i+0x142>
 8012faa:	6823      	ldr	r3, [r4, #0]
 8012fac:	07df      	lsls	r7, r3, #31
 8012fae:	d508      	bpl.n	8012fc2 <_printf_i+0x142>
 8012fb0:	6923      	ldr	r3, [r4, #16]
 8012fb2:	6861      	ldr	r1, [r4, #4]
 8012fb4:	4299      	cmp	r1, r3
 8012fb6:	bfde      	ittt	le
 8012fb8:	2330      	movle	r3, #48	@ 0x30
 8012fba:	f806 3c01 	strble.w	r3, [r6, #-1]
 8012fbe:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8012fc2:	1b92      	subs	r2, r2, r6
 8012fc4:	6122      	str	r2, [r4, #16]
 8012fc6:	f8cd a000 	str.w	sl, [sp]
 8012fca:	464b      	mov	r3, r9
 8012fcc:	aa03      	add	r2, sp, #12
 8012fce:	4621      	mov	r1, r4
 8012fd0:	4640      	mov	r0, r8
 8012fd2:	f7ff fee7 	bl	8012da4 <_printf_common>
 8012fd6:	3001      	adds	r0, #1
 8012fd8:	d14a      	bne.n	8013070 <_printf_i+0x1f0>
 8012fda:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012fde:	b004      	add	sp, #16
 8012fe0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8012fe4:	6823      	ldr	r3, [r4, #0]
 8012fe6:	f043 0320 	orr.w	r3, r3, #32
 8012fea:	6023      	str	r3, [r4, #0]
 8012fec:	4832      	ldr	r0, [pc, #200]	@ (80130b8 <_printf_i+0x238>)
 8012fee:	2778      	movs	r7, #120	@ 0x78
 8012ff0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8012ff4:	6823      	ldr	r3, [r4, #0]
 8012ff6:	6831      	ldr	r1, [r6, #0]
 8012ff8:	061f      	lsls	r7, r3, #24
 8012ffa:	f851 5b04 	ldr.w	r5, [r1], #4
 8012ffe:	d402      	bmi.n	8013006 <_printf_i+0x186>
 8013000:	065f      	lsls	r7, r3, #25
 8013002:	bf48      	it	mi
 8013004:	b2ad      	uxthmi	r5, r5
 8013006:	6031      	str	r1, [r6, #0]
 8013008:	07d9      	lsls	r1, r3, #31
 801300a:	bf44      	itt	mi
 801300c:	f043 0320 	orrmi.w	r3, r3, #32
 8013010:	6023      	strmi	r3, [r4, #0]
 8013012:	b11d      	cbz	r5, 801301c <_printf_i+0x19c>
 8013014:	2310      	movs	r3, #16
 8013016:	e7ad      	b.n	8012f74 <_printf_i+0xf4>
 8013018:	4826      	ldr	r0, [pc, #152]	@ (80130b4 <_printf_i+0x234>)
 801301a:	e7e9      	b.n	8012ff0 <_printf_i+0x170>
 801301c:	6823      	ldr	r3, [r4, #0]
 801301e:	f023 0320 	bic.w	r3, r3, #32
 8013022:	6023      	str	r3, [r4, #0]
 8013024:	e7f6      	b.n	8013014 <_printf_i+0x194>
 8013026:	4616      	mov	r6, r2
 8013028:	e7bd      	b.n	8012fa6 <_printf_i+0x126>
 801302a:	6833      	ldr	r3, [r6, #0]
 801302c:	6825      	ldr	r5, [r4, #0]
 801302e:	6961      	ldr	r1, [r4, #20]
 8013030:	1d18      	adds	r0, r3, #4
 8013032:	6030      	str	r0, [r6, #0]
 8013034:	062e      	lsls	r6, r5, #24
 8013036:	681b      	ldr	r3, [r3, #0]
 8013038:	d501      	bpl.n	801303e <_printf_i+0x1be>
 801303a:	6019      	str	r1, [r3, #0]
 801303c:	e002      	b.n	8013044 <_printf_i+0x1c4>
 801303e:	0668      	lsls	r0, r5, #25
 8013040:	d5fb      	bpl.n	801303a <_printf_i+0x1ba>
 8013042:	8019      	strh	r1, [r3, #0]
 8013044:	2300      	movs	r3, #0
 8013046:	6123      	str	r3, [r4, #16]
 8013048:	4616      	mov	r6, r2
 801304a:	e7bc      	b.n	8012fc6 <_printf_i+0x146>
 801304c:	6833      	ldr	r3, [r6, #0]
 801304e:	1d1a      	adds	r2, r3, #4
 8013050:	6032      	str	r2, [r6, #0]
 8013052:	681e      	ldr	r6, [r3, #0]
 8013054:	6862      	ldr	r2, [r4, #4]
 8013056:	2100      	movs	r1, #0
 8013058:	4630      	mov	r0, r6
 801305a:	f7ed f941 	bl	80002e0 <memchr>
 801305e:	b108      	cbz	r0, 8013064 <_printf_i+0x1e4>
 8013060:	1b80      	subs	r0, r0, r6
 8013062:	6060      	str	r0, [r4, #4]
 8013064:	6863      	ldr	r3, [r4, #4]
 8013066:	6123      	str	r3, [r4, #16]
 8013068:	2300      	movs	r3, #0
 801306a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801306e:	e7aa      	b.n	8012fc6 <_printf_i+0x146>
 8013070:	6923      	ldr	r3, [r4, #16]
 8013072:	4632      	mov	r2, r6
 8013074:	4649      	mov	r1, r9
 8013076:	4640      	mov	r0, r8
 8013078:	47d0      	blx	sl
 801307a:	3001      	adds	r0, #1
 801307c:	d0ad      	beq.n	8012fda <_printf_i+0x15a>
 801307e:	6823      	ldr	r3, [r4, #0]
 8013080:	079b      	lsls	r3, r3, #30
 8013082:	d413      	bmi.n	80130ac <_printf_i+0x22c>
 8013084:	68e0      	ldr	r0, [r4, #12]
 8013086:	9b03      	ldr	r3, [sp, #12]
 8013088:	4298      	cmp	r0, r3
 801308a:	bfb8      	it	lt
 801308c:	4618      	movlt	r0, r3
 801308e:	e7a6      	b.n	8012fde <_printf_i+0x15e>
 8013090:	2301      	movs	r3, #1
 8013092:	4632      	mov	r2, r6
 8013094:	4649      	mov	r1, r9
 8013096:	4640      	mov	r0, r8
 8013098:	47d0      	blx	sl
 801309a:	3001      	adds	r0, #1
 801309c:	d09d      	beq.n	8012fda <_printf_i+0x15a>
 801309e:	3501      	adds	r5, #1
 80130a0:	68e3      	ldr	r3, [r4, #12]
 80130a2:	9903      	ldr	r1, [sp, #12]
 80130a4:	1a5b      	subs	r3, r3, r1
 80130a6:	42ab      	cmp	r3, r5
 80130a8:	dcf2      	bgt.n	8013090 <_printf_i+0x210>
 80130aa:	e7eb      	b.n	8013084 <_printf_i+0x204>
 80130ac:	2500      	movs	r5, #0
 80130ae:	f104 0619 	add.w	r6, r4, #25
 80130b2:	e7f5      	b.n	80130a0 <_printf_i+0x220>
 80130b4:	0802892e 	.word	0x0802892e
 80130b8:	0802893f 	.word	0x0802893f

080130bc <std>:
 80130bc:	2300      	movs	r3, #0
 80130be:	b510      	push	{r4, lr}
 80130c0:	4604      	mov	r4, r0
 80130c2:	e9c0 3300 	strd	r3, r3, [r0]
 80130c6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80130ca:	6083      	str	r3, [r0, #8]
 80130cc:	8181      	strh	r1, [r0, #12]
 80130ce:	6643      	str	r3, [r0, #100]	@ 0x64
 80130d0:	81c2      	strh	r2, [r0, #14]
 80130d2:	6183      	str	r3, [r0, #24]
 80130d4:	4619      	mov	r1, r3
 80130d6:	2208      	movs	r2, #8
 80130d8:	305c      	adds	r0, #92	@ 0x5c
 80130da:	f000 f8b1 	bl	8013240 <memset>
 80130de:	4b0d      	ldr	r3, [pc, #52]	@ (8013114 <std+0x58>)
 80130e0:	6263      	str	r3, [r4, #36]	@ 0x24
 80130e2:	4b0d      	ldr	r3, [pc, #52]	@ (8013118 <std+0x5c>)
 80130e4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80130e6:	4b0d      	ldr	r3, [pc, #52]	@ (801311c <std+0x60>)
 80130e8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80130ea:	4b0d      	ldr	r3, [pc, #52]	@ (8013120 <std+0x64>)
 80130ec:	6323      	str	r3, [r4, #48]	@ 0x30
 80130ee:	4b0d      	ldr	r3, [pc, #52]	@ (8013124 <std+0x68>)
 80130f0:	6224      	str	r4, [r4, #32]
 80130f2:	429c      	cmp	r4, r3
 80130f4:	d006      	beq.n	8013104 <std+0x48>
 80130f6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80130fa:	4294      	cmp	r4, r2
 80130fc:	d002      	beq.n	8013104 <std+0x48>
 80130fe:	33d0      	adds	r3, #208	@ 0xd0
 8013100:	429c      	cmp	r4, r3
 8013102:	d105      	bne.n	8013110 <std+0x54>
 8013104:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8013108:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801310c:	f000 b8ca 	b.w	80132a4 <__retarget_lock_init_recursive>
 8013110:	bd10      	pop	{r4, pc}
 8013112:	bf00      	nop
 8013114:	08014855 	.word	0x08014855
 8013118:	08014877 	.word	0x08014877
 801311c:	080148af 	.word	0x080148af
 8013120:	080148d3 	.word	0x080148d3
 8013124:	2400b760 	.word	0x2400b760

08013128 <stdio_exit_handler>:
 8013128:	4a02      	ldr	r2, [pc, #8]	@ (8013134 <stdio_exit_handler+0xc>)
 801312a:	4903      	ldr	r1, [pc, #12]	@ (8013138 <stdio_exit_handler+0x10>)
 801312c:	4803      	ldr	r0, [pc, #12]	@ (801313c <stdio_exit_handler+0x14>)
 801312e:	f000 b869 	b.w	8013204 <_fwalk_sglue>
 8013132:	bf00      	nop
 8013134:	24000484 	.word	0x24000484
 8013138:	080140f9 	.word	0x080140f9
 801313c:	24000494 	.word	0x24000494

08013140 <cleanup_stdio>:
 8013140:	6841      	ldr	r1, [r0, #4]
 8013142:	4b0c      	ldr	r3, [pc, #48]	@ (8013174 <cleanup_stdio+0x34>)
 8013144:	4299      	cmp	r1, r3
 8013146:	b510      	push	{r4, lr}
 8013148:	4604      	mov	r4, r0
 801314a:	d001      	beq.n	8013150 <cleanup_stdio+0x10>
 801314c:	f000 ffd4 	bl	80140f8 <_fflush_r>
 8013150:	68a1      	ldr	r1, [r4, #8]
 8013152:	4b09      	ldr	r3, [pc, #36]	@ (8013178 <cleanup_stdio+0x38>)
 8013154:	4299      	cmp	r1, r3
 8013156:	d002      	beq.n	801315e <cleanup_stdio+0x1e>
 8013158:	4620      	mov	r0, r4
 801315a:	f000 ffcd 	bl	80140f8 <_fflush_r>
 801315e:	68e1      	ldr	r1, [r4, #12]
 8013160:	4b06      	ldr	r3, [pc, #24]	@ (801317c <cleanup_stdio+0x3c>)
 8013162:	4299      	cmp	r1, r3
 8013164:	d004      	beq.n	8013170 <cleanup_stdio+0x30>
 8013166:	4620      	mov	r0, r4
 8013168:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801316c:	f000 bfc4 	b.w	80140f8 <_fflush_r>
 8013170:	bd10      	pop	{r4, pc}
 8013172:	bf00      	nop
 8013174:	2400b760 	.word	0x2400b760
 8013178:	2400b7c8 	.word	0x2400b7c8
 801317c:	2400b830 	.word	0x2400b830

08013180 <global_stdio_init.part.0>:
 8013180:	b510      	push	{r4, lr}
 8013182:	4b0b      	ldr	r3, [pc, #44]	@ (80131b0 <global_stdio_init.part.0+0x30>)
 8013184:	4c0b      	ldr	r4, [pc, #44]	@ (80131b4 <global_stdio_init.part.0+0x34>)
 8013186:	4a0c      	ldr	r2, [pc, #48]	@ (80131b8 <global_stdio_init.part.0+0x38>)
 8013188:	601a      	str	r2, [r3, #0]
 801318a:	4620      	mov	r0, r4
 801318c:	2200      	movs	r2, #0
 801318e:	2104      	movs	r1, #4
 8013190:	f7ff ff94 	bl	80130bc <std>
 8013194:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8013198:	2201      	movs	r2, #1
 801319a:	2109      	movs	r1, #9
 801319c:	f7ff ff8e 	bl	80130bc <std>
 80131a0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80131a4:	2202      	movs	r2, #2
 80131a6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131aa:	2112      	movs	r1, #18
 80131ac:	f7ff bf86 	b.w	80130bc <std>
 80131b0:	2400b898 	.word	0x2400b898
 80131b4:	2400b760 	.word	0x2400b760
 80131b8:	08013129 	.word	0x08013129

080131bc <__sfp_lock_acquire>:
 80131bc:	4801      	ldr	r0, [pc, #4]	@ (80131c4 <__sfp_lock_acquire+0x8>)
 80131be:	f000 b872 	b.w	80132a6 <__retarget_lock_acquire_recursive>
 80131c2:	bf00      	nop
 80131c4:	2400b89d 	.word	0x2400b89d

080131c8 <__sfp_lock_release>:
 80131c8:	4801      	ldr	r0, [pc, #4]	@ (80131d0 <__sfp_lock_release+0x8>)
 80131ca:	f000 b86d 	b.w	80132a8 <__retarget_lock_release_recursive>
 80131ce:	bf00      	nop
 80131d0:	2400b89d 	.word	0x2400b89d

080131d4 <__sinit>:
 80131d4:	b510      	push	{r4, lr}
 80131d6:	4604      	mov	r4, r0
 80131d8:	f7ff fff0 	bl	80131bc <__sfp_lock_acquire>
 80131dc:	6a23      	ldr	r3, [r4, #32]
 80131de:	b11b      	cbz	r3, 80131e8 <__sinit+0x14>
 80131e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80131e4:	f7ff bff0 	b.w	80131c8 <__sfp_lock_release>
 80131e8:	4b04      	ldr	r3, [pc, #16]	@ (80131fc <__sinit+0x28>)
 80131ea:	6223      	str	r3, [r4, #32]
 80131ec:	4b04      	ldr	r3, [pc, #16]	@ (8013200 <__sinit+0x2c>)
 80131ee:	681b      	ldr	r3, [r3, #0]
 80131f0:	2b00      	cmp	r3, #0
 80131f2:	d1f5      	bne.n	80131e0 <__sinit+0xc>
 80131f4:	f7ff ffc4 	bl	8013180 <global_stdio_init.part.0>
 80131f8:	e7f2      	b.n	80131e0 <__sinit+0xc>
 80131fa:	bf00      	nop
 80131fc:	08013141 	.word	0x08013141
 8013200:	2400b898 	.word	0x2400b898

08013204 <_fwalk_sglue>:
 8013204:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013208:	4607      	mov	r7, r0
 801320a:	4688      	mov	r8, r1
 801320c:	4614      	mov	r4, r2
 801320e:	2600      	movs	r6, #0
 8013210:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8013214:	f1b9 0901 	subs.w	r9, r9, #1
 8013218:	d505      	bpl.n	8013226 <_fwalk_sglue+0x22>
 801321a:	6824      	ldr	r4, [r4, #0]
 801321c:	2c00      	cmp	r4, #0
 801321e:	d1f7      	bne.n	8013210 <_fwalk_sglue+0xc>
 8013220:	4630      	mov	r0, r6
 8013222:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013226:	89ab      	ldrh	r3, [r5, #12]
 8013228:	2b01      	cmp	r3, #1
 801322a:	d907      	bls.n	801323c <_fwalk_sglue+0x38>
 801322c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8013230:	3301      	adds	r3, #1
 8013232:	d003      	beq.n	801323c <_fwalk_sglue+0x38>
 8013234:	4629      	mov	r1, r5
 8013236:	4638      	mov	r0, r7
 8013238:	47c0      	blx	r8
 801323a:	4306      	orrs	r6, r0
 801323c:	3568      	adds	r5, #104	@ 0x68
 801323e:	e7e9      	b.n	8013214 <_fwalk_sglue+0x10>

08013240 <memset>:
 8013240:	4402      	add	r2, r0
 8013242:	4603      	mov	r3, r0
 8013244:	4293      	cmp	r3, r2
 8013246:	d100      	bne.n	801324a <memset+0xa>
 8013248:	4770      	bx	lr
 801324a:	f803 1b01 	strb.w	r1, [r3], #1
 801324e:	e7f9      	b.n	8013244 <memset+0x4>

08013250 <__errno>:
 8013250:	4b01      	ldr	r3, [pc, #4]	@ (8013258 <__errno+0x8>)
 8013252:	6818      	ldr	r0, [r3, #0]
 8013254:	4770      	bx	lr
 8013256:	bf00      	nop
 8013258:	24000490 	.word	0x24000490

0801325c <__libc_init_array>:
 801325c:	b570      	push	{r4, r5, r6, lr}
 801325e:	4d0d      	ldr	r5, [pc, #52]	@ (8013294 <__libc_init_array+0x38>)
 8013260:	4c0d      	ldr	r4, [pc, #52]	@ (8013298 <__libc_init_array+0x3c>)
 8013262:	1b64      	subs	r4, r4, r5
 8013264:	10a4      	asrs	r4, r4, #2
 8013266:	2600      	movs	r6, #0
 8013268:	42a6      	cmp	r6, r4
 801326a:	d109      	bne.n	8013280 <__libc_init_array+0x24>
 801326c:	4d0b      	ldr	r5, [pc, #44]	@ (801329c <__libc_init_array+0x40>)
 801326e:	4c0c      	ldr	r4, [pc, #48]	@ (80132a0 <__libc_init_array+0x44>)
 8013270:	f001 fedc 	bl	801502c <_init>
 8013274:	1b64      	subs	r4, r4, r5
 8013276:	10a4      	asrs	r4, r4, #2
 8013278:	2600      	movs	r6, #0
 801327a:	42a6      	cmp	r6, r4
 801327c:	d105      	bne.n	801328a <__libc_init_array+0x2e>
 801327e:	bd70      	pop	{r4, r5, r6, pc}
 8013280:	f855 3b04 	ldr.w	r3, [r5], #4
 8013284:	4798      	blx	r3
 8013286:	3601      	adds	r6, #1
 8013288:	e7ee      	b.n	8013268 <__libc_init_array+0xc>
 801328a:	f855 3b04 	ldr.w	r3, [r5], #4
 801328e:	4798      	blx	r3
 8013290:	3601      	adds	r6, #1
 8013292:	e7f2      	b.n	801327a <__libc_init_array+0x1e>
 8013294:	0802902c 	.word	0x0802902c
 8013298:	0802902c 	.word	0x0802902c
 801329c:	0802902c 	.word	0x0802902c
 80132a0:	08029030 	.word	0x08029030

080132a4 <__retarget_lock_init_recursive>:
 80132a4:	4770      	bx	lr

080132a6 <__retarget_lock_acquire_recursive>:
 80132a6:	4770      	bx	lr

080132a8 <__retarget_lock_release_recursive>:
 80132a8:	4770      	bx	lr
	...

080132ac <_localeconv_r>:
 80132ac:	4800      	ldr	r0, [pc, #0]	@ (80132b0 <_localeconv_r+0x4>)
 80132ae:	4770      	bx	lr
 80132b0:	240005d0 	.word	0x240005d0

080132b4 <memcpy>:
 80132b4:	440a      	add	r2, r1
 80132b6:	4291      	cmp	r1, r2
 80132b8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80132bc:	d100      	bne.n	80132c0 <memcpy+0xc>
 80132be:	4770      	bx	lr
 80132c0:	b510      	push	{r4, lr}
 80132c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80132c6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80132ca:	4291      	cmp	r1, r2
 80132cc:	d1f9      	bne.n	80132c2 <memcpy+0xe>
 80132ce:	bd10      	pop	{r4, pc}

080132d0 <quorem>:
 80132d0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80132d4:	6903      	ldr	r3, [r0, #16]
 80132d6:	690c      	ldr	r4, [r1, #16]
 80132d8:	42a3      	cmp	r3, r4
 80132da:	4607      	mov	r7, r0
 80132dc:	db7e      	blt.n	80133dc <quorem+0x10c>
 80132de:	3c01      	subs	r4, #1
 80132e0:	f101 0814 	add.w	r8, r1, #20
 80132e4:	00a3      	lsls	r3, r4, #2
 80132e6:	f100 0514 	add.w	r5, r0, #20
 80132ea:	9300      	str	r3, [sp, #0]
 80132ec:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80132f0:	9301      	str	r3, [sp, #4]
 80132f2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80132f6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80132fa:	3301      	adds	r3, #1
 80132fc:	429a      	cmp	r2, r3
 80132fe:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8013302:	fbb2 f6f3 	udiv	r6, r2, r3
 8013306:	d32e      	bcc.n	8013366 <quorem+0x96>
 8013308:	f04f 0a00 	mov.w	sl, #0
 801330c:	46c4      	mov	ip, r8
 801330e:	46ae      	mov	lr, r5
 8013310:	46d3      	mov	fp, sl
 8013312:	f85c 3b04 	ldr.w	r3, [ip], #4
 8013316:	b298      	uxth	r0, r3
 8013318:	fb06 a000 	mla	r0, r6, r0, sl
 801331c:	0c02      	lsrs	r2, r0, #16
 801331e:	0c1b      	lsrs	r3, r3, #16
 8013320:	fb06 2303 	mla	r3, r6, r3, r2
 8013324:	f8de 2000 	ldr.w	r2, [lr]
 8013328:	b280      	uxth	r0, r0
 801332a:	b292      	uxth	r2, r2
 801332c:	1a12      	subs	r2, r2, r0
 801332e:	445a      	add	r2, fp
 8013330:	f8de 0000 	ldr.w	r0, [lr]
 8013334:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8013338:	b29b      	uxth	r3, r3
 801333a:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 801333e:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8013342:	b292      	uxth	r2, r2
 8013344:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8013348:	45e1      	cmp	r9, ip
 801334a:	f84e 2b04 	str.w	r2, [lr], #4
 801334e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8013352:	d2de      	bcs.n	8013312 <quorem+0x42>
 8013354:	9b00      	ldr	r3, [sp, #0]
 8013356:	58eb      	ldr	r3, [r5, r3]
 8013358:	b92b      	cbnz	r3, 8013366 <quorem+0x96>
 801335a:	9b01      	ldr	r3, [sp, #4]
 801335c:	3b04      	subs	r3, #4
 801335e:	429d      	cmp	r5, r3
 8013360:	461a      	mov	r2, r3
 8013362:	d32f      	bcc.n	80133c4 <quorem+0xf4>
 8013364:	613c      	str	r4, [r7, #16]
 8013366:	4638      	mov	r0, r7
 8013368:	f001 f96c 	bl	8014644 <__mcmp>
 801336c:	2800      	cmp	r0, #0
 801336e:	db25      	blt.n	80133bc <quorem+0xec>
 8013370:	4629      	mov	r1, r5
 8013372:	2000      	movs	r0, #0
 8013374:	f858 2b04 	ldr.w	r2, [r8], #4
 8013378:	f8d1 c000 	ldr.w	ip, [r1]
 801337c:	fa1f fe82 	uxth.w	lr, r2
 8013380:	fa1f f38c 	uxth.w	r3, ip
 8013384:	eba3 030e 	sub.w	r3, r3, lr
 8013388:	4403      	add	r3, r0
 801338a:	0c12      	lsrs	r2, r2, #16
 801338c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8013390:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8013394:	b29b      	uxth	r3, r3
 8013396:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 801339a:	45c1      	cmp	r9, r8
 801339c:	f841 3b04 	str.w	r3, [r1], #4
 80133a0:	ea4f 4022 	mov.w	r0, r2, asr #16
 80133a4:	d2e6      	bcs.n	8013374 <quorem+0xa4>
 80133a6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80133aa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80133ae:	b922      	cbnz	r2, 80133ba <quorem+0xea>
 80133b0:	3b04      	subs	r3, #4
 80133b2:	429d      	cmp	r5, r3
 80133b4:	461a      	mov	r2, r3
 80133b6:	d30b      	bcc.n	80133d0 <quorem+0x100>
 80133b8:	613c      	str	r4, [r7, #16]
 80133ba:	3601      	adds	r6, #1
 80133bc:	4630      	mov	r0, r6
 80133be:	b003      	add	sp, #12
 80133c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80133c4:	6812      	ldr	r2, [r2, #0]
 80133c6:	3b04      	subs	r3, #4
 80133c8:	2a00      	cmp	r2, #0
 80133ca:	d1cb      	bne.n	8013364 <quorem+0x94>
 80133cc:	3c01      	subs	r4, #1
 80133ce:	e7c6      	b.n	801335e <quorem+0x8e>
 80133d0:	6812      	ldr	r2, [r2, #0]
 80133d2:	3b04      	subs	r3, #4
 80133d4:	2a00      	cmp	r2, #0
 80133d6:	d1ef      	bne.n	80133b8 <quorem+0xe8>
 80133d8:	3c01      	subs	r4, #1
 80133da:	e7ea      	b.n	80133b2 <quorem+0xe2>
 80133dc:	2000      	movs	r0, #0
 80133de:	e7ee      	b.n	80133be <quorem+0xee>

080133e0 <_dtoa_r>:
 80133e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80133e4:	ed2d 8b02 	vpush	{d8}
 80133e8:	69c7      	ldr	r7, [r0, #28]
 80133ea:	b091      	sub	sp, #68	@ 0x44
 80133ec:	ed8d 0b02 	vstr	d0, [sp, #8]
 80133f0:	ec55 4b10 	vmov	r4, r5, d0
 80133f4:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 80133f6:	9107      	str	r1, [sp, #28]
 80133f8:	4681      	mov	r9, r0
 80133fa:	9209      	str	r2, [sp, #36]	@ 0x24
 80133fc:	930d      	str	r3, [sp, #52]	@ 0x34
 80133fe:	b97f      	cbnz	r7, 8013420 <_dtoa_r+0x40>
 8013400:	2010      	movs	r0, #16
 8013402:	f000 fd4b 	bl	8013e9c <malloc>
 8013406:	4602      	mov	r2, r0
 8013408:	f8c9 001c 	str.w	r0, [r9, #28]
 801340c:	b920      	cbnz	r0, 8013418 <_dtoa_r+0x38>
 801340e:	4ba0      	ldr	r3, [pc, #640]	@ (8013690 <_dtoa_r+0x2b0>)
 8013410:	21ef      	movs	r1, #239	@ 0xef
 8013412:	48a0      	ldr	r0, [pc, #640]	@ (8013694 <_dtoa_r+0x2b4>)
 8013414:	f001 fab8 	bl	8014988 <__assert_func>
 8013418:	e9c0 7701 	strd	r7, r7, [r0, #4]
 801341c:	6007      	str	r7, [r0, #0]
 801341e:	60c7      	str	r7, [r0, #12]
 8013420:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8013424:	6819      	ldr	r1, [r3, #0]
 8013426:	b159      	cbz	r1, 8013440 <_dtoa_r+0x60>
 8013428:	685a      	ldr	r2, [r3, #4]
 801342a:	604a      	str	r2, [r1, #4]
 801342c:	2301      	movs	r3, #1
 801342e:	4093      	lsls	r3, r2
 8013430:	608b      	str	r3, [r1, #8]
 8013432:	4648      	mov	r0, r9
 8013434:	f000 fed4 	bl	80141e0 <_Bfree>
 8013438:	f8d9 301c 	ldr.w	r3, [r9, #28]
 801343c:	2200      	movs	r2, #0
 801343e:	601a      	str	r2, [r3, #0]
 8013440:	1e2b      	subs	r3, r5, #0
 8013442:	bfbb      	ittet	lt
 8013444:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8013448:	9303      	strlt	r3, [sp, #12]
 801344a:	2300      	movge	r3, #0
 801344c:	2201      	movlt	r2, #1
 801344e:	bfac      	ite	ge
 8013450:	6033      	strge	r3, [r6, #0]
 8013452:	6032      	strlt	r2, [r6, #0]
 8013454:	4b90      	ldr	r3, [pc, #576]	@ (8013698 <_dtoa_r+0x2b8>)
 8013456:	9e03      	ldr	r6, [sp, #12]
 8013458:	43b3      	bics	r3, r6
 801345a:	d110      	bne.n	801347e <_dtoa_r+0x9e>
 801345c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801345e:	f242 730f 	movw	r3, #9999	@ 0x270f
 8013462:	6013      	str	r3, [r2, #0]
 8013464:	f3c6 0313 	ubfx	r3, r6, #0, #20
 8013468:	4323      	orrs	r3, r4
 801346a:	f000 84e6 	beq.w	8013e3a <_dtoa_r+0xa5a>
 801346e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013470:	4f8a      	ldr	r7, [pc, #552]	@ (801369c <_dtoa_r+0x2bc>)
 8013472:	2b00      	cmp	r3, #0
 8013474:	f000 84e8 	beq.w	8013e48 <_dtoa_r+0xa68>
 8013478:	1cfb      	adds	r3, r7, #3
 801347a:	f000 bce3 	b.w	8013e44 <_dtoa_r+0xa64>
 801347e:	ed9d 8b02 	vldr	d8, [sp, #8]
 8013482:	eeb5 8b40 	vcmp.f64	d8, #0.0
 8013486:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801348a:	d10a      	bne.n	80134a2 <_dtoa_r+0xc2>
 801348c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801348e:	2301      	movs	r3, #1
 8013490:	6013      	str	r3, [r2, #0]
 8013492:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013494:	b113      	cbz	r3, 801349c <_dtoa_r+0xbc>
 8013496:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013498:	4b81      	ldr	r3, [pc, #516]	@ (80136a0 <_dtoa_r+0x2c0>)
 801349a:	6013      	str	r3, [r2, #0]
 801349c:	4f81      	ldr	r7, [pc, #516]	@ (80136a4 <_dtoa_r+0x2c4>)
 801349e:	f000 bcd3 	b.w	8013e48 <_dtoa_r+0xa68>
 80134a2:	aa0e      	add	r2, sp, #56	@ 0x38
 80134a4:	a90f      	add	r1, sp, #60	@ 0x3c
 80134a6:	4648      	mov	r0, r9
 80134a8:	eeb0 0b48 	vmov.f64	d0, d8
 80134ac:	f001 f97a 	bl	80147a4 <__d2b>
 80134b0:	f3c6 530a 	ubfx	r3, r6, #20, #11
 80134b4:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80134b6:	9001      	str	r0, [sp, #4]
 80134b8:	2b00      	cmp	r3, #0
 80134ba:	d045      	beq.n	8013548 <_dtoa_r+0x168>
 80134bc:	eeb0 7b48 	vmov.f64	d7, d8
 80134c0:	ee18 1a90 	vmov	r1, s17
 80134c4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 80134c8:	f041 517f 	orr.w	r1, r1, #1069547520	@ 0x3fc00000
 80134cc:	f441 1140 	orr.w	r1, r1, #3145728	@ 0x300000
 80134d0:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 80134d4:	2500      	movs	r5, #0
 80134d6:	ee07 1a90 	vmov	s15, r1
 80134da:	eeb7 6b08 	vmov.f64	d6, #120	@ 0x3fc00000  1.5
 80134de:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013678 <_dtoa_r+0x298>
 80134e2:	ee37 7b46 	vsub.f64	d7, d7, d6
 80134e6:	ed9f 6b66 	vldr	d6, [pc, #408]	@ 8013680 <_dtoa_r+0x2a0>
 80134ea:	eea7 6b05 	vfma.f64	d6, d7, d5
 80134ee:	ed9f 5b66 	vldr	d5, [pc, #408]	@ 8013688 <_dtoa_r+0x2a8>
 80134f2:	ee07 3a90 	vmov	s15, r3
 80134f6:	eeb8 4be7 	vcvt.f64.s32	d4, s15
 80134fa:	eeb0 7b46 	vmov.f64	d7, d6
 80134fe:	eea4 7b05 	vfma.f64	d7, d4, d5
 8013502:	eefd 6bc7 	vcvt.s32.f64	s13, d7
 8013506:	eeb5 7bc0 	vcmpe.f64	d7, #0.0
 801350a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801350e:	ee16 8a90 	vmov	r8, s13
 8013512:	d508      	bpl.n	8013526 <_dtoa_r+0x146>
 8013514:	eeb8 6be6 	vcvt.f64.s32	d6, s13
 8013518:	eeb4 6b47 	vcmp.f64	d6, d7
 801351c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013520:	bf18      	it	ne
 8013522:	f108 38ff 	addne.w	r8, r8, #4294967295	@ 0xffffffff
 8013526:	f1b8 0f16 	cmp.w	r8, #22
 801352a:	d82b      	bhi.n	8013584 <_dtoa_r+0x1a4>
 801352c:	495e      	ldr	r1, [pc, #376]	@ (80136a8 <_dtoa_r+0x2c8>)
 801352e:	eb01 01c8 	add.w	r1, r1, r8, lsl #3
 8013532:	ed91 7b00 	vldr	d7, [r1]
 8013536:	eeb4 8bc7 	vcmpe.f64	d8, d7
 801353a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801353e:	d501      	bpl.n	8013544 <_dtoa_r+0x164>
 8013540:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8013544:	2100      	movs	r1, #0
 8013546:	e01e      	b.n	8013586 <_dtoa_r+0x1a6>
 8013548:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801354a:	4413      	add	r3, r2
 801354c:	f203 4132 	addw	r1, r3, #1074	@ 0x432
 8013550:	2920      	cmp	r1, #32
 8013552:	bfc1      	itttt	gt
 8013554:	f1c1 0140 	rsbgt	r1, r1, #64	@ 0x40
 8013558:	408e      	lslgt	r6, r1
 801355a:	f203 4112 	addwgt	r1, r3, #1042	@ 0x412
 801355e:	fa24 f101 	lsrgt.w	r1, r4, r1
 8013562:	bfd6      	itet	le
 8013564:	f1c1 0120 	rsble	r1, r1, #32
 8013568:	4331      	orrgt	r1, r6
 801356a:	fa04 f101 	lslle.w	r1, r4, r1
 801356e:	ee07 1a90 	vmov	s15, r1
 8013572:	eeb8 7b67 	vcvt.f64.u32	d7, s15
 8013576:	3b01      	subs	r3, #1
 8013578:	ee17 1a90 	vmov	r1, s15
 801357c:	2501      	movs	r5, #1
 801357e:	f1a1 71f8 	sub.w	r1, r1, #32505856	@ 0x1f00000
 8013582:	e7a8      	b.n	80134d6 <_dtoa_r+0xf6>
 8013584:	2101      	movs	r1, #1
 8013586:	1ad2      	subs	r2, r2, r3
 8013588:	1e53      	subs	r3, r2, #1
 801358a:	9306      	str	r3, [sp, #24]
 801358c:	bf45      	ittet	mi
 801358e:	f1c2 0301 	rsbmi	r3, r2, #1
 8013592:	9304      	strmi	r3, [sp, #16]
 8013594:	2300      	movpl	r3, #0
 8013596:	2300      	movmi	r3, #0
 8013598:	bf4c      	ite	mi
 801359a:	9306      	strmi	r3, [sp, #24]
 801359c:	9304      	strpl	r3, [sp, #16]
 801359e:	f1b8 0f00 	cmp.w	r8, #0
 80135a2:	910c      	str	r1, [sp, #48]	@ 0x30
 80135a4:	db18      	blt.n	80135d8 <_dtoa_r+0x1f8>
 80135a6:	9b06      	ldr	r3, [sp, #24]
 80135a8:	f8cd 8028 	str.w	r8, [sp, #40]	@ 0x28
 80135ac:	4443      	add	r3, r8
 80135ae:	9306      	str	r3, [sp, #24]
 80135b0:	2300      	movs	r3, #0
 80135b2:	9a07      	ldr	r2, [sp, #28]
 80135b4:	2a09      	cmp	r2, #9
 80135b6:	d845      	bhi.n	8013644 <_dtoa_r+0x264>
 80135b8:	2a05      	cmp	r2, #5
 80135ba:	bfc4      	itt	gt
 80135bc:	3a04      	subgt	r2, #4
 80135be:	9207      	strgt	r2, [sp, #28]
 80135c0:	9a07      	ldr	r2, [sp, #28]
 80135c2:	f1a2 0202 	sub.w	r2, r2, #2
 80135c6:	bfcc      	ite	gt
 80135c8:	2400      	movgt	r4, #0
 80135ca:	2401      	movle	r4, #1
 80135cc:	2a03      	cmp	r2, #3
 80135ce:	d844      	bhi.n	801365a <_dtoa_r+0x27a>
 80135d0:	e8df f002 	tbb	[pc, r2]
 80135d4:	0b173634 	.word	0x0b173634
 80135d8:	9b04      	ldr	r3, [sp, #16]
 80135da:	2200      	movs	r2, #0
 80135dc:	eba3 0308 	sub.w	r3, r3, r8
 80135e0:	9304      	str	r3, [sp, #16]
 80135e2:	920a      	str	r2, [sp, #40]	@ 0x28
 80135e4:	f1c8 0300 	rsb	r3, r8, #0
 80135e8:	e7e3      	b.n	80135b2 <_dtoa_r+0x1d2>
 80135ea:	2201      	movs	r2, #1
 80135ec:	9208      	str	r2, [sp, #32]
 80135ee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80135f0:	eb08 0b02 	add.w	fp, r8, r2
 80135f4:	f10b 0a01 	add.w	sl, fp, #1
 80135f8:	4652      	mov	r2, sl
 80135fa:	2a01      	cmp	r2, #1
 80135fc:	bfb8      	it	lt
 80135fe:	2201      	movlt	r2, #1
 8013600:	e006      	b.n	8013610 <_dtoa_r+0x230>
 8013602:	2201      	movs	r2, #1
 8013604:	9208      	str	r2, [sp, #32]
 8013606:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013608:	2a00      	cmp	r2, #0
 801360a:	dd29      	ble.n	8013660 <_dtoa_r+0x280>
 801360c:	4693      	mov	fp, r2
 801360e:	4692      	mov	sl, r2
 8013610:	f8d9 701c 	ldr.w	r7, [r9, #28]
 8013614:	2100      	movs	r1, #0
 8013616:	2004      	movs	r0, #4
 8013618:	f100 0614 	add.w	r6, r0, #20
 801361c:	4296      	cmp	r6, r2
 801361e:	d926      	bls.n	801366e <_dtoa_r+0x28e>
 8013620:	6079      	str	r1, [r7, #4]
 8013622:	4648      	mov	r0, r9
 8013624:	9305      	str	r3, [sp, #20]
 8013626:	f000 fd9b 	bl	8014160 <_Balloc>
 801362a:	9b05      	ldr	r3, [sp, #20]
 801362c:	4607      	mov	r7, r0
 801362e:	2800      	cmp	r0, #0
 8013630:	d13e      	bne.n	80136b0 <_dtoa_r+0x2d0>
 8013632:	4b1e      	ldr	r3, [pc, #120]	@ (80136ac <_dtoa_r+0x2cc>)
 8013634:	4602      	mov	r2, r0
 8013636:	f240 11af 	movw	r1, #431	@ 0x1af
 801363a:	e6ea      	b.n	8013412 <_dtoa_r+0x32>
 801363c:	2200      	movs	r2, #0
 801363e:	e7e1      	b.n	8013604 <_dtoa_r+0x224>
 8013640:	2200      	movs	r2, #0
 8013642:	e7d3      	b.n	80135ec <_dtoa_r+0x20c>
 8013644:	2401      	movs	r4, #1
 8013646:	2200      	movs	r2, #0
 8013648:	e9cd 2407 	strd	r2, r4, [sp, #28]
 801364c:	f04f 3bff 	mov.w	fp, #4294967295	@ 0xffffffff
 8013650:	2100      	movs	r1, #0
 8013652:	46da      	mov	sl, fp
 8013654:	2212      	movs	r2, #18
 8013656:	9109      	str	r1, [sp, #36]	@ 0x24
 8013658:	e7da      	b.n	8013610 <_dtoa_r+0x230>
 801365a:	2201      	movs	r2, #1
 801365c:	9208      	str	r2, [sp, #32]
 801365e:	e7f5      	b.n	801364c <_dtoa_r+0x26c>
 8013660:	f04f 0b01 	mov.w	fp, #1
 8013664:	46da      	mov	sl, fp
 8013666:	465a      	mov	r2, fp
 8013668:	f8cd b024 	str.w	fp, [sp, #36]	@ 0x24
 801366c:	e7d0      	b.n	8013610 <_dtoa_r+0x230>
 801366e:	3101      	adds	r1, #1
 8013670:	0040      	lsls	r0, r0, #1
 8013672:	e7d1      	b.n	8013618 <_dtoa_r+0x238>
 8013674:	f3af 8000 	nop.w
 8013678:	636f4361 	.word	0x636f4361
 801367c:	3fd287a7 	.word	0x3fd287a7
 8013680:	8b60c8b3 	.word	0x8b60c8b3
 8013684:	3fc68a28 	.word	0x3fc68a28
 8013688:	509f79fb 	.word	0x509f79fb
 801368c:	3fd34413 	.word	0x3fd34413
 8013690:	0802895d 	.word	0x0802895d
 8013694:	08028974 	.word	0x08028974
 8013698:	7ff00000 	.word	0x7ff00000
 801369c:	08028959 	.word	0x08028959
 80136a0:	0802892d 	.word	0x0802892d
 80136a4:	0802892c 	.word	0x0802892c
 80136a8:	08028e58 	.word	0x08028e58
 80136ac:	080289cc 	.word	0x080289cc
 80136b0:	f8d9 201c 	ldr.w	r2, [r9, #28]
 80136b4:	f1ba 0f0e 	cmp.w	sl, #14
 80136b8:	6010      	str	r0, [r2, #0]
 80136ba:	d86e      	bhi.n	801379a <_dtoa_r+0x3ba>
 80136bc:	2c00      	cmp	r4, #0
 80136be:	d06c      	beq.n	801379a <_dtoa_r+0x3ba>
 80136c0:	f1b8 0f00 	cmp.w	r8, #0
 80136c4:	f340 80b4 	ble.w	8013830 <_dtoa_r+0x450>
 80136c8:	4ac8      	ldr	r2, [pc, #800]	@ (80139ec <_dtoa_r+0x60c>)
 80136ca:	f008 010f 	and.w	r1, r8, #15
 80136ce:	eb02 02c1 	add.w	r2, r2, r1, lsl #3
 80136d2:	f418 7f80 	tst.w	r8, #256	@ 0x100
 80136d6:	ed92 7b00 	vldr	d7, [r2]
 80136da:	ea4f 1128 	mov.w	r1, r8, asr #4
 80136de:	f000 809b 	beq.w	8013818 <_dtoa_r+0x438>
 80136e2:	4ac3      	ldr	r2, [pc, #780]	@ (80139f0 <_dtoa_r+0x610>)
 80136e4:	ed92 6b08 	vldr	d6, [r2, #32]
 80136e8:	ee88 6b06 	vdiv.f64	d6, d8, d6
 80136ec:	ed8d 6b02 	vstr	d6, [sp, #8]
 80136f0:	f001 010f 	and.w	r1, r1, #15
 80136f4:	2203      	movs	r2, #3
 80136f6:	48be      	ldr	r0, [pc, #760]	@ (80139f0 <_dtoa_r+0x610>)
 80136f8:	2900      	cmp	r1, #0
 80136fa:	f040 808f 	bne.w	801381c <_dtoa_r+0x43c>
 80136fe:	ed9d 6b02 	vldr	d6, [sp, #8]
 8013702:	ee86 7b07 	vdiv.f64	d7, d6, d7
 8013706:	ed8d 7b02 	vstr	d7, [sp, #8]
 801370a:	990c      	ldr	r1, [sp, #48]	@ 0x30
 801370c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013710:	2900      	cmp	r1, #0
 8013712:	f000 80b3 	beq.w	801387c <_dtoa_r+0x49c>
 8013716:	eeb7 6b00 	vmov.f64	d6, #112	@ 0x3f800000  1.0
 801371a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801371e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013722:	f140 80ab 	bpl.w	801387c <_dtoa_r+0x49c>
 8013726:	f1ba 0f00 	cmp.w	sl, #0
 801372a:	f000 80a7 	beq.w	801387c <_dtoa_r+0x49c>
 801372e:	f1bb 0f00 	cmp.w	fp, #0
 8013732:	dd30      	ble.n	8013796 <_dtoa_r+0x3b6>
 8013734:	eeb2 6b04 	vmov.f64	d6, #36	@ 0x41200000  10.0
 8013738:	ee27 7b06 	vmul.f64	d7, d7, d6
 801373c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013740:	f108 31ff 	add.w	r1, r8, #4294967295	@ 0xffffffff
 8013744:	9105      	str	r1, [sp, #20]
 8013746:	3201      	adds	r2, #1
 8013748:	465c      	mov	r4, fp
 801374a:	ed9d 6b02 	vldr	d6, [sp, #8]
 801374e:	eeb1 5b0c 	vmov.f64	d5, #28	@ 0x40e00000  7.0
 8013752:	ee07 2a90 	vmov	s15, r2
 8013756:	eeb8 7be7 	vcvt.f64.s32	d7, s15
 801375a:	eea7 5b06 	vfma.f64	d5, d7, d6
 801375e:	ee15 2a90 	vmov	r2, s11
 8013762:	ec51 0b15 	vmov	r0, r1, d5
 8013766:	f1a2 7150 	sub.w	r1, r2, #54525952	@ 0x3400000
 801376a:	2c00      	cmp	r4, #0
 801376c:	f040 808a 	bne.w	8013884 <_dtoa_r+0x4a4>
 8013770:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 8013774:	ee36 6b47 	vsub.f64	d6, d6, d7
 8013778:	ec41 0b17 	vmov	d7, r0, r1
 801377c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013780:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013784:	f300 826a 	bgt.w	8013c5c <_dtoa_r+0x87c>
 8013788:	eeb1 7b47 	vneg.f64	d7, d7
 801378c:	eeb4 6bc7 	vcmpe.f64	d6, d7
 8013790:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013794:	d423      	bmi.n	80137de <_dtoa_r+0x3fe>
 8013796:	ed8d 8b02 	vstr	d8, [sp, #8]
 801379a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801379c:	2a00      	cmp	r2, #0
 801379e:	f2c0 8129 	blt.w	80139f4 <_dtoa_r+0x614>
 80137a2:	f1b8 0f0e 	cmp.w	r8, #14
 80137a6:	f300 8125 	bgt.w	80139f4 <_dtoa_r+0x614>
 80137aa:	4b90      	ldr	r3, [pc, #576]	@ (80139ec <_dtoa_r+0x60c>)
 80137ac:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 80137b0:	ed93 6b00 	vldr	d6, [r3]
 80137b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137b6:	2b00      	cmp	r3, #0
 80137b8:	f280 80c8 	bge.w	801394c <_dtoa_r+0x56c>
 80137bc:	f1ba 0f00 	cmp.w	sl, #0
 80137c0:	f300 80c4 	bgt.w	801394c <_dtoa_r+0x56c>
 80137c4:	d10b      	bne.n	80137de <_dtoa_r+0x3fe>
 80137c6:	eeb1 7b04 	vmov.f64	d7, #20	@ 0x40a00000  5.0
 80137ca:	ee26 6b07 	vmul.f64	d6, d6, d7
 80137ce:	ed9d 7b02 	vldr	d7, [sp, #8]
 80137d2:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80137d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80137da:	f2c0 823c 	blt.w	8013c56 <_dtoa_r+0x876>
 80137de:	2400      	movs	r4, #0
 80137e0:	4625      	mov	r5, r4
 80137e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80137e4:	43db      	mvns	r3, r3
 80137e6:	9305      	str	r3, [sp, #20]
 80137e8:	463e      	mov	r6, r7
 80137ea:	f04f 0800 	mov.w	r8, #0
 80137ee:	4621      	mov	r1, r4
 80137f0:	4648      	mov	r0, r9
 80137f2:	f000 fcf5 	bl	80141e0 <_Bfree>
 80137f6:	2d00      	cmp	r5, #0
 80137f8:	f000 80a2 	beq.w	8013940 <_dtoa_r+0x560>
 80137fc:	f1b8 0f00 	cmp.w	r8, #0
 8013800:	d005      	beq.n	801380e <_dtoa_r+0x42e>
 8013802:	45a8      	cmp	r8, r5
 8013804:	d003      	beq.n	801380e <_dtoa_r+0x42e>
 8013806:	4641      	mov	r1, r8
 8013808:	4648      	mov	r0, r9
 801380a:	f000 fce9 	bl	80141e0 <_Bfree>
 801380e:	4629      	mov	r1, r5
 8013810:	4648      	mov	r0, r9
 8013812:	f000 fce5 	bl	80141e0 <_Bfree>
 8013816:	e093      	b.n	8013940 <_dtoa_r+0x560>
 8013818:	2202      	movs	r2, #2
 801381a:	e76c      	b.n	80136f6 <_dtoa_r+0x316>
 801381c:	07cc      	lsls	r4, r1, #31
 801381e:	d504      	bpl.n	801382a <_dtoa_r+0x44a>
 8013820:	ed90 6b00 	vldr	d6, [r0]
 8013824:	3201      	adds	r2, #1
 8013826:	ee27 7b06 	vmul.f64	d7, d7, d6
 801382a:	1049      	asrs	r1, r1, #1
 801382c:	3008      	adds	r0, #8
 801382e:	e763      	b.n	80136f8 <_dtoa_r+0x318>
 8013830:	d022      	beq.n	8013878 <_dtoa_r+0x498>
 8013832:	f1c8 0100 	rsb	r1, r8, #0
 8013836:	4a6d      	ldr	r2, [pc, #436]	@ (80139ec <_dtoa_r+0x60c>)
 8013838:	f001 000f 	and.w	r0, r1, #15
 801383c:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
 8013840:	ed92 7b00 	vldr	d7, [r2]
 8013844:	ee28 7b07 	vmul.f64	d7, d8, d7
 8013848:	ed8d 7b02 	vstr	d7, [sp, #8]
 801384c:	4868      	ldr	r0, [pc, #416]	@ (80139f0 <_dtoa_r+0x610>)
 801384e:	1109      	asrs	r1, r1, #4
 8013850:	2400      	movs	r4, #0
 8013852:	2202      	movs	r2, #2
 8013854:	b929      	cbnz	r1, 8013862 <_dtoa_r+0x482>
 8013856:	2c00      	cmp	r4, #0
 8013858:	f43f af57 	beq.w	801370a <_dtoa_r+0x32a>
 801385c:	ed8d 7b02 	vstr	d7, [sp, #8]
 8013860:	e753      	b.n	801370a <_dtoa_r+0x32a>
 8013862:	07ce      	lsls	r6, r1, #31
 8013864:	d505      	bpl.n	8013872 <_dtoa_r+0x492>
 8013866:	ed90 6b00 	vldr	d6, [r0]
 801386a:	3201      	adds	r2, #1
 801386c:	2401      	movs	r4, #1
 801386e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8013872:	1049      	asrs	r1, r1, #1
 8013874:	3008      	adds	r0, #8
 8013876:	e7ed      	b.n	8013854 <_dtoa_r+0x474>
 8013878:	2202      	movs	r2, #2
 801387a:	e746      	b.n	801370a <_dtoa_r+0x32a>
 801387c:	f8cd 8014 	str.w	r8, [sp, #20]
 8013880:	4654      	mov	r4, sl
 8013882:	e762      	b.n	801374a <_dtoa_r+0x36a>
 8013884:	4a59      	ldr	r2, [pc, #356]	@ (80139ec <_dtoa_r+0x60c>)
 8013886:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
 801388a:	ed12 4b02 	vldr	d4, [r2, #-8]
 801388e:	9a08      	ldr	r2, [sp, #32]
 8013890:	ec41 0b17 	vmov	d7, r0, r1
 8013894:	443c      	add	r4, r7
 8013896:	b34a      	cbz	r2, 80138ec <_dtoa_r+0x50c>
 8013898:	eeb6 3b00 	vmov.f64	d3, #96	@ 0x3f000000  0.5
 801389c:	eeb7 2b00 	vmov.f64	d2, #112	@ 0x3f800000  1.0
 80138a0:	463e      	mov	r6, r7
 80138a2:	ee83 5b04 	vdiv.f64	d5, d3, d4
 80138a6:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80138aa:	ee35 7b47 	vsub.f64	d7, d5, d7
 80138ae:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80138b2:	ee14 2a90 	vmov	r2, s9
 80138b6:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 80138ba:	3230      	adds	r2, #48	@ 0x30
 80138bc:	ee36 6b45 	vsub.f64	d6, d6, d5
 80138c0:	eeb4 6bc7 	vcmpe.f64	d6, d7
 80138c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138c8:	f806 2b01 	strb.w	r2, [r6], #1
 80138cc:	d438      	bmi.n	8013940 <_dtoa_r+0x560>
 80138ce:	ee32 5b46 	vsub.f64	d5, d2, d6
 80138d2:	eeb4 5bc7 	vcmpe.f64	d5, d7
 80138d6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80138da:	d46e      	bmi.n	80139ba <_dtoa_r+0x5da>
 80138dc:	42a6      	cmp	r6, r4
 80138de:	f43f af5a 	beq.w	8013796 <_dtoa_r+0x3b6>
 80138e2:	ee27 7b03 	vmul.f64	d7, d7, d3
 80138e6:	ee26 6b03 	vmul.f64	d6, d6, d3
 80138ea:	e7e0      	b.n	80138ae <_dtoa_r+0x4ce>
 80138ec:	4621      	mov	r1, r4
 80138ee:	463e      	mov	r6, r7
 80138f0:	ee27 7b04 	vmul.f64	d7, d7, d4
 80138f4:	eeb2 3b04 	vmov.f64	d3, #36	@ 0x41200000  10.0
 80138f8:	eefd 4bc6 	vcvt.s32.f64	s9, d6
 80138fc:	ee14 2a90 	vmov	r2, s9
 8013900:	3230      	adds	r2, #48	@ 0x30
 8013902:	f806 2b01 	strb.w	r2, [r6], #1
 8013906:	42a6      	cmp	r6, r4
 8013908:	eeb8 5be4 	vcvt.f64.s32	d5, s9
 801390c:	ee36 6b45 	vsub.f64	d6, d6, d5
 8013910:	d119      	bne.n	8013946 <_dtoa_r+0x566>
 8013912:	eeb6 5b00 	vmov.f64	d5, #96	@ 0x3f000000  0.5
 8013916:	ee37 4b05 	vadd.f64	d4, d7, d5
 801391a:	eeb4 6bc4 	vcmpe.f64	d6, d4
 801391e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013922:	dc4a      	bgt.n	80139ba <_dtoa_r+0x5da>
 8013924:	ee35 5b47 	vsub.f64	d5, d5, d7
 8013928:	eeb4 6bc5 	vcmpe.f64	d6, d5
 801392c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013930:	f57f af31 	bpl.w	8013796 <_dtoa_r+0x3b6>
 8013934:	460e      	mov	r6, r1
 8013936:	3901      	subs	r1, #1
 8013938:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 801393c:	2b30      	cmp	r3, #48	@ 0x30
 801393e:	d0f9      	beq.n	8013934 <_dtoa_r+0x554>
 8013940:	f8dd 8014 	ldr.w	r8, [sp, #20]
 8013944:	e027      	b.n	8013996 <_dtoa_r+0x5b6>
 8013946:	ee26 6b03 	vmul.f64	d6, d6, d3
 801394a:	e7d5      	b.n	80138f8 <_dtoa_r+0x518>
 801394c:	ed9d 7b02 	vldr	d7, [sp, #8]
 8013950:	eeb2 4b04 	vmov.f64	d4, #36	@ 0x41200000  10.0
 8013954:	463e      	mov	r6, r7
 8013956:	ee87 5b06 	vdiv.f64	d5, d7, d6
 801395a:	eebd 5bc5 	vcvt.s32.f64	s10, d5
 801395e:	ee15 3a10 	vmov	r3, s10
 8013962:	3330      	adds	r3, #48	@ 0x30
 8013964:	f806 3b01 	strb.w	r3, [r6], #1
 8013968:	1bf3      	subs	r3, r6, r7
 801396a:	459a      	cmp	sl, r3
 801396c:	eeb8 3bc5 	vcvt.f64.s32	d3, s10
 8013970:	eea3 7b46 	vfms.f64	d7, d3, d6
 8013974:	d132      	bne.n	80139dc <_dtoa_r+0x5fc>
 8013976:	ee37 7b07 	vadd.f64	d7, d7, d7
 801397a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 801397e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8013982:	dc18      	bgt.n	80139b6 <_dtoa_r+0x5d6>
 8013984:	eeb4 7b46 	vcmp.f64	d7, d6
 8013988:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 801398c:	d103      	bne.n	8013996 <_dtoa_r+0x5b6>
 801398e:	ee15 3a10 	vmov	r3, s10
 8013992:	07db      	lsls	r3, r3, #31
 8013994:	d40f      	bmi.n	80139b6 <_dtoa_r+0x5d6>
 8013996:	9901      	ldr	r1, [sp, #4]
 8013998:	4648      	mov	r0, r9
 801399a:	f000 fc21 	bl	80141e0 <_Bfree>
 801399e:	2300      	movs	r3, #0
 80139a0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80139a2:	7033      	strb	r3, [r6, #0]
 80139a4:	f108 0301 	add.w	r3, r8, #1
 80139a8:	6013      	str	r3, [r2, #0]
 80139aa:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 80139ac:	2b00      	cmp	r3, #0
 80139ae:	f000 824b 	beq.w	8013e48 <_dtoa_r+0xa68>
 80139b2:	601e      	str	r6, [r3, #0]
 80139b4:	e248      	b.n	8013e48 <_dtoa_r+0xa68>
 80139b6:	f8cd 8014 	str.w	r8, [sp, #20]
 80139ba:	4633      	mov	r3, r6
 80139bc:	461e      	mov	r6, r3
 80139be:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80139c2:	2a39      	cmp	r2, #57	@ 0x39
 80139c4:	d106      	bne.n	80139d4 <_dtoa_r+0x5f4>
 80139c6:	429f      	cmp	r7, r3
 80139c8:	d1f8      	bne.n	80139bc <_dtoa_r+0x5dc>
 80139ca:	9a05      	ldr	r2, [sp, #20]
 80139cc:	3201      	adds	r2, #1
 80139ce:	9205      	str	r2, [sp, #20]
 80139d0:	2230      	movs	r2, #48	@ 0x30
 80139d2:	703a      	strb	r2, [r7, #0]
 80139d4:	781a      	ldrb	r2, [r3, #0]
 80139d6:	3201      	adds	r2, #1
 80139d8:	701a      	strb	r2, [r3, #0]
 80139da:	e7b1      	b.n	8013940 <_dtoa_r+0x560>
 80139dc:	ee27 7b04 	vmul.f64	d7, d7, d4
 80139e0:	eeb5 7b40 	vcmp.f64	d7, #0.0
 80139e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80139e8:	d1b5      	bne.n	8013956 <_dtoa_r+0x576>
 80139ea:	e7d4      	b.n	8013996 <_dtoa_r+0x5b6>
 80139ec:	08028e58 	.word	0x08028e58
 80139f0:	08028e30 	.word	0x08028e30
 80139f4:	9908      	ldr	r1, [sp, #32]
 80139f6:	2900      	cmp	r1, #0
 80139f8:	f000 80e9 	beq.w	8013bce <_dtoa_r+0x7ee>
 80139fc:	9907      	ldr	r1, [sp, #28]
 80139fe:	2901      	cmp	r1, #1
 8013a00:	f300 80cb 	bgt.w	8013b9a <_dtoa_r+0x7ba>
 8013a04:	2d00      	cmp	r5, #0
 8013a06:	f000 80c4 	beq.w	8013b92 <_dtoa_r+0x7b2>
 8013a0a:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8013a0e:	9e04      	ldr	r6, [sp, #16]
 8013a10:	461c      	mov	r4, r3
 8013a12:	9305      	str	r3, [sp, #20]
 8013a14:	9b04      	ldr	r3, [sp, #16]
 8013a16:	4413      	add	r3, r2
 8013a18:	9304      	str	r3, [sp, #16]
 8013a1a:	9b06      	ldr	r3, [sp, #24]
 8013a1c:	2101      	movs	r1, #1
 8013a1e:	4413      	add	r3, r2
 8013a20:	4648      	mov	r0, r9
 8013a22:	9306      	str	r3, [sp, #24]
 8013a24:	f000 fc90 	bl	8014348 <__i2b>
 8013a28:	9b05      	ldr	r3, [sp, #20]
 8013a2a:	4605      	mov	r5, r0
 8013a2c:	b166      	cbz	r6, 8013a48 <_dtoa_r+0x668>
 8013a2e:	9a06      	ldr	r2, [sp, #24]
 8013a30:	2a00      	cmp	r2, #0
 8013a32:	dd09      	ble.n	8013a48 <_dtoa_r+0x668>
 8013a34:	42b2      	cmp	r2, r6
 8013a36:	9904      	ldr	r1, [sp, #16]
 8013a38:	bfa8      	it	ge
 8013a3a:	4632      	movge	r2, r6
 8013a3c:	1a89      	subs	r1, r1, r2
 8013a3e:	9104      	str	r1, [sp, #16]
 8013a40:	9906      	ldr	r1, [sp, #24]
 8013a42:	1ab6      	subs	r6, r6, r2
 8013a44:	1a8a      	subs	r2, r1, r2
 8013a46:	9206      	str	r2, [sp, #24]
 8013a48:	b30b      	cbz	r3, 8013a8e <_dtoa_r+0x6ae>
 8013a4a:	9a08      	ldr	r2, [sp, #32]
 8013a4c:	2a00      	cmp	r2, #0
 8013a4e:	f000 80c5 	beq.w	8013bdc <_dtoa_r+0x7fc>
 8013a52:	2c00      	cmp	r4, #0
 8013a54:	f000 80bf 	beq.w	8013bd6 <_dtoa_r+0x7f6>
 8013a58:	4629      	mov	r1, r5
 8013a5a:	4622      	mov	r2, r4
 8013a5c:	4648      	mov	r0, r9
 8013a5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013a60:	f000 fd2a 	bl	80144b8 <__pow5mult>
 8013a64:	9a01      	ldr	r2, [sp, #4]
 8013a66:	4601      	mov	r1, r0
 8013a68:	4605      	mov	r5, r0
 8013a6a:	4648      	mov	r0, r9
 8013a6c:	f000 fc82 	bl	8014374 <__multiply>
 8013a70:	9901      	ldr	r1, [sp, #4]
 8013a72:	9005      	str	r0, [sp, #20]
 8013a74:	4648      	mov	r0, r9
 8013a76:	f000 fbb3 	bl	80141e0 <_Bfree>
 8013a7a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013a7c:	1b1b      	subs	r3, r3, r4
 8013a7e:	f000 80b0 	beq.w	8013be2 <_dtoa_r+0x802>
 8013a82:	9905      	ldr	r1, [sp, #20]
 8013a84:	461a      	mov	r2, r3
 8013a86:	4648      	mov	r0, r9
 8013a88:	f000 fd16 	bl	80144b8 <__pow5mult>
 8013a8c:	9001      	str	r0, [sp, #4]
 8013a8e:	2101      	movs	r1, #1
 8013a90:	4648      	mov	r0, r9
 8013a92:	f000 fc59 	bl	8014348 <__i2b>
 8013a96:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013a98:	4604      	mov	r4, r0
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	f000 81da 	beq.w	8013e54 <_dtoa_r+0xa74>
 8013aa0:	461a      	mov	r2, r3
 8013aa2:	4601      	mov	r1, r0
 8013aa4:	4648      	mov	r0, r9
 8013aa6:	f000 fd07 	bl	80144b8 <__pow5mult>
 8013aaa:	9b07      	ldr	r3, [sp, #28]
 8013aac:	2b01      	cmp	r3, #1
 8013aae:	4604      	mov	r4, r0
 8013ab0:	f300 80a0 	bgt.w	8013bf4 <_dtoa_r+0x814>
 8013ab4:	9b02      	ldr	r3, [sp, #8]
 8013ab6:	2b00      	cmp	r3, #0
 8013ab8:	f040 8096 	bne.w	8013be8 <_dtoa_r+0x808>
 8013abc:	9b03      	ldr	r3, [sp, #12]
 8013abe:	f3c3 0213 	ubfx	r2, r3, #0, #20
 8013ac2:	2a00      	cmp	r2, #0
 8013ac4:	f040 8092 	bne.w	8013bec <_dtoa_r+0x80c>
 8013ac8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8013acc:	0d12      	lsrs	r2, r2, #20
 8013ace:	0512      	lsls	r2, r2, #20
 8013ad0:	2a00      	cmp	r2, #0
 8013ad2:	f000 808d 	beq.w	8013bf0 <_dtoa_r+0x810>
 8013ad6:	9b04      	ldr	r3, [sp, #16]
 8013ad8:	3301      	adds	r3, #1
 8013ada:	9304      	str	r3, [sp, #16]
 8013adc:	9b06      	ldr	r3, [sp, #24]
 8013ade:	3301      	adds	r3, #1
 8013ae0:	9306      	str	r3, [sp, #24]
 8013ae2:	2301      	movs	r3, #1
 8013ae4:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013ae6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	f000 81b9 	beq.w	8013e60 <_dtoa_r+0xa80>
 8013aee:	6922      	ldr	r2, [r4, #16]
 8013af0:	eb04 0282 	add.w	r2, r4, r2, lsl #2
 8013af4:	6910      	ldr	r0, [r2, #16]
 8013af6:	f000 fbdb 	bl	80142b0 <__hi0bits>
 8013afa:	f1c0 0020 	rsb	r0, r0, #32
 8013afe:	9b06      	ldr	r3, [sp, #24]
 8013b00:	4418      	add	r0, r3
 8013b02:	f010 001f 	ands.w	r0, r0, #31
 8013b06:	f000 8081 	beq.w	8013c0c <_dtoa_r+0x82c>
 8013b0a:	f1c0 0220 	rsb	r2, r0, #32
 8013b0e:	2a04      	cmp	r2, #4
 8013b10:	dd73      	ble.n	8013bfa <_dtoa_r+0x81a>
 8013b12:	9b04      	ldr	r3, [sp, #16]
 8013b14:	f1c0 001c 	rsb	r0, r0, #28
 8013b18:	4403      	add	r3, r0
 8013b1a:	9304      	str	r3, [sp, #16]
 8013b1c:	9b06      	ldr	r3, [sp, #24]
 8013b1e:	4406      	add	r6, r0
 8013b20:	4403      	add	r3, r0
 8013b22:	9306      	str	r3, [sp, #24]
 8013b24:	9b04      	ldr	r3, [sp, #16]
 8013b26:	2b00      	cmp	r3, #0
 8013b28:	dd05      	ble.n	8013b36 <_dtoa_r+0x756>
 8013b2a:	9901      	ldr	r1, [sp, #4]
 8013b2c:	461a      	mov	r2, r3
 8013b2e:	4648      	mov	r0, r9
 8013b30:	f000 fd1c 	bl	801456c <__lshift>
 8013b34:	9001      	str	r0, [sp, #4]
 8013b36:	9b06      	ldr	r3, [sp, #24]
 8013b38:	2b00      	cmp	r3, #0
 8013b3a:	dd05      	ble.n	8013b48 <_dtoa_r+0x768>
 8013b3c:	4621      	mov	r1, r4
 8013b3e:	461a      	mov	r2, r3
 8013b40:	4648      	mov	r0, r9
 8013b42:	f000 fd13 	bl	801456c <__lshift>
 8013b46:	4604      	mov	r4, r0
 8013b48:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8013b4a:	2b00      	cmp	r3, #0
 8013b4c:	d060      	beq.n	8013c10 <_dtoa_r+0x830>
 8013b4e:	9801      	ldr	r0, [sp, #4]
 8013b50:	4621      	mov	r1, r4
 8013b52:	f000 fd77 	bl	8014644 <__mcmp>
 8013b56:	2800      	cmp	r0, #0
 8013b58:	da5a      	bge.n	8013c10 <_dtoa_r+0x830>
 8013b5a:	f108 33ff 	add.w	r3, r8, #4294967295	@ 0xffffffff
 8013b5e:	9305      	str	r3, [sp, #20]
 8013b60:	9901      	ldr	r1, [sp, #4]
 8013b62:	2300      	movs	r3, #0
 8013b64:	220a      	movs	r2, #10
 8013b66:	4648      	mov	r0, r9
 8013b68:	f000 fb5c 	bl	8014224 <__multadd>
 8013b6c:	9b08      	ldr	r3, [sp, #32]
 8013b6e:	9001      	str	r0, [sp, #4]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	f000 8177 	beq.w	8013e64 <_dtoa_r+0xa84>
 8013b76:	4629      	mov	r1, r5
 8013b78:	2300      	movs	r3, #0
 8013b7a:	220a      	movs	r2, #10
 8013b7c:	4648      	mov	r0, r9
 8013b7e:	f000 fb51 	bl	8014224 <__multadd>
 8013b82:	f1bb 0f00 	cmp.w	fp, #0
 8013b86:	4605      	mov	r5, r0
 8013b88:	dc6e      	bgt.n	8013c68 <_dtoa_r+0x888>
 8013b8a:	9b07      	ldr	r3, [sp, #28]
 8013b8c:	2b02      	cmp	r3, #2
 8013b8e:	dc48      	bgt.n	8013c22 <_dtoa_r+0x842>
 8013b90:	e06a      	b.n	8013c68 <_dtoa_r+0x888>
 8013b92:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8013b94:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 8013b98:	e739      	b.n	8013a0e <_dtoa_r+0x62e>
 8013b9a:	f10a 34ff 	add.w	r4, sl, #4294967295	@ 0xffffffff
 8013b9e:	42a3      	cmp	r3, r4
 8013ba0:	db07      	blt.n	8013bb2 <_dtoa_r+0x7d2>
 8013ba2:	f1ba 0f00 	cmp.w	sl, #0
 8013ba6:	eba3 0404 	sub.w	r4, r3, r4
 8013baa:	db0b      	blt.n	8013bc4 <_dtoa_r+0x7e4>
 8013bac:	9e04      	ldr	r6, [sp, #16]
 8013bae:	4652      	mov	r2, sl
 8013bb0:	e72f      	b.n	8013a12 <_dtoa_r+0x632>
 8013bb2:	1ae2      	subs	r2, r4, r3
 8013bb4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013bb6:	9e04      	ldr	r6, [sp, #16]
 8013bb8:	4413      	add	r3, r2
 8013bba:	930a      	str	r3, [sp, #40]	@ 0x28
 8013bbc:	4652      	mov	r2, sl
 8013bbe:	4623      	mov	r3, r4
 8013bc0:	2400      	movs	r4, #0
 8013bc2:	e726      	b.n	8013a12 <_dtoa_r+0x632>
 8013bc4:	9a04      	ldr	r2, [sp, #16]
 8013bc6:	eba2 060a 	sub.w	r6, r2, sl
 8013bca:	2200      	movs	r2, #0
 8013bcc:	e721      	b.n	8013a12 <_dtoa_r+0x632>
 8013bce:	9e04      	ldr	r6, [sp, #16]
 8013bd0:	9d08      	ldr	r5, [sp, #32]
 8013bd2:	461c      	mov	r4, r3
 8013bd4:	e72a      	b.n	8013a2c <_dtoa_r+0x64c>
 8013bd6:	9a01      	ldr	r2, [sp, #4]
 8013bd8:	9205      	str	r2, [sp, #20]
 8013bda:	e752      	b.n	8013a82 <_dtoa_r+0x6a2>
 8013bdc:	9901      	ldr	r1, [sp, #4]
 8013bde:	461a      	mov	r2, r3
 8013be0:	e751      	b.n	8013a86 <_dtoa_r+0x6a6>
 8013be2:	9b05      	ldr	r3, [sp, #20]
 8013be4:	9301      	str	r3, [sp, #4]
 8013be6:	e752      	b.n	8013a8e <_dtoa_r+0x6ae>
 8013be8:	2300      	movs	r3, #0
 8013bea:	e77b      	b.n	8013ae4 <_dtoa_r+0x704>
 8013bec:	9b02      	ldr	r3, [sp, #8]
 8013bee:	e779      	b.n	8013ae4 <_dtoa_r+0x704>
 8013bf0:	920b      	str	r2, [sp, #44]	@ 0x2c
 8013bf2:	e778      	b.n	8013ae6 <_dtoa_r+0x706>
 8013bf4:	2300      	movs	r3, #0
 8013bf6:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013bf8:	e779      	b.n	8013aee <_dtoa_r+0x70e>
 8013bfa:	d093      	beq.n	8013b24 <_dtoa_r+0x744>
 8013bfc:	9b04      	ldr	r3, [sp, #16]
 8013bfe:	321c      	adds	r2, #28
 8013c00:	4413      	add	r3, r2
 8013c02:	9304      	str	r3, [sp, #16]
 8013c04:	9b06      	ldr	r3, [sp, #24]
 8013c06:	4416      	add	r6, r2
 8013c08:	4413      	add	r3, r2
 8013c0a:	e78a      	b.n	8013b22 <_dtoa_r+0x742>
 8013c0c:	4602      	mov	r2, r0
 8013c0e:	e7f5      	b.n	8013bfc <_dtoa_r+0x81c>
 8013c10:	f1ba 0f00 	cmp.w	sl, #0
 8013c14:	f8cd 8014 	str.w	r8, [sp, #20]
 8013c18:	46d3      	mov	fp, sl
 8013c1a:	dc21      	bgt.n	8013c60 <_dtoa_r+0x880>
 8013c1c:	9b07      	ldr	r3, [sp, #28]
 8013c1e:	2b02      	cmp	r3, #2
 8013c20:	dd1e      	ble.n	8013c60 <_dtoa_r+0x880>
 8013c22:	f1bb 0f00 	cmp.w	fp, #0
 8013c26:	f47f addc 	bne.w	80137e2 <_dtoa_r+0x402>
 8013c2a:	4621      	mov	r1, r4
 8013c2c:	465b      	mov	r3, fp
 8013c2e:	2205      	movs	r2, #5
 8013c30:	4648      	mov	r0, r9
 8013c32:	f000 faf7 	bl	8014224 <__multadd>
 8013c36:	4601      	mov	r1, r0
 8013c38:	4604      	mov	r4, r0
 8013c3a:	9801      	ldr	r0, [sp, #4]
 8013c3c:	f000 fd02 	bl	8014644 <__mcmp>
 8013c40:	2800      	cmp	r0, #0
 8013c42:	f77f adce 	ble.w	80137e2 <_dtoa_r+0x402>
 8013c46:	463e      	mov	r6, r7
 8013c48:	2331      	movs	r3, #49	@ 0x31
 8013c4a:	f806 3b01 	strb.w	r3, [r6], #1
 8013c4e:	9b05      	ldr	r3, [sp, #20]
 8013c50:	3301      	adds	r3, #1
 8013c52:	9305      	str	r3, [sp, #20]
 8013c54:	e5c9      	b.n	80137ea <_dtoa_r+0x40a>
 8013c56:	f8cd 8014 	str.w	r8, [sp, #20]
 8013c5a:	4654      	mov	r4, sl
 8013c5c:	4625      	mov	r5, r4
 8013c5e:	e7f2      	b.n	8013c46 <_dtoa_r+0x866>
 8013c60:	9b08      	ldr	r3, [sp, #32]
 8013c62:	2b00      	cmp	r3, #0
 8013c64:	f000 8102 	beq.w	8013e6c <_dtoa_r+0xa8c>
 8013c68:	2e00      	cmp	r6, #0
 8013c6a:	dd05      	ble.n	8013c78 <_dtoa_r+0x898>
 8013c6c:	4629      	mov	r1, r5
 8013c6e:	4632      	mov	r2, r6
 8013c70:	4648      	mov	r0, r9
 8013c72:	f000 fc7b 	bl	801456c <__lshift>
 8013c76:	4605      	mov	r5, r0
 8013c78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8013c7a:	2b00      	cmp	r3, #0
 8013c7c:	d058      	beq.n	8013d30 <_dtoa_r+0x950>
 8013c7e:	6869      	ldr	r1, [r5, #4]
 8013c80:	4648      	mov	r0, r9
 8013c82:	f000 fa6d 	bl	8014160 <_Balloc>
 8013c86:	4606      	mov	r6, r0
 8013c88:	b928      	cbnz	r0, 8013c96 <_dtoa_r+0x8b6>
 8013c8a:	4b82      	ldr	r3, [pc, #520]	@ (8013e94 <_dtoa_r+0xab4>)
 8013c8c:	4602      	mov	r2, r0
 8013c8e:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8013c92:	f7ff bbbe 	b.w	8013412 <_dtoa_r+0x32>
 8013c96:	692a      	ldr	r2, [r5, #16]
 8013c98:	3202      	adds	r2, #2
 8013c9a:	0092      	lsls	r2, r2, #2
 8013c9c:	f105 010c 	add.w	r1, r5, #12
 8013ca0:	300c      	adds	r0, #12
 8013ca2:	f7ff fb07 	bl	80132b4 <memcpy>
 8013ca6:	2201      	movs	r2, #1
 8013ca8:	4631      	mov	r1, r6
 8013caa:	4648      	mov	r0, r9
 8013cac:	f000 fc5e 	bl	801456c <__lshift>
 8013cb0:	1c7b      	adds	r3, r7, #1
 8013cb2:	9304      	str	r3, [sp, #16]
 8013cb4:	eb07 030b 	add.w	r3, r7, fp
 8013cb8:	9309      	str	r3, [sp, #36]	@ 0x24
 8013cba:	9b02      	ldr	r3, [sp, #8]
 8013cbc:	f003 0301 	and.w	r3, r3, #1
 8013cc0:	46a8      	mov	r8, r5
 8013cc2:	9308      	str	r3, [sp, #32]
 8013cc4:	4605      	mov	r5, r0
 8013cc6:	9b04      	ldr	r3, [sp, #16]
 8013cc8:	9801      	ldr	r0, [sp, #4]
 8013cca:	4621      	mov	r1, r4
 8013ccc:	f103 3bff 	add.w	fp, r3, #4294967295	@ 0xffffffff
 8013cd0:	f7ff fafe 	bl	80132d0 <quorem>
 8013cd4:	4641      	mov	r1, r8
 8013cd6:	9002      	str	r0, [sp, #8]
 8013cd8:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013cdc:	9801      	ldr	r0, [sp, #4]
 8013cde:	f000 fcb1 	bl	8014644 <__mcmp>
 8013ce2:	462a      	mov	r2, r5
 8013ce4:	9006      	str	r0, [sp, #24]
 8013ce6:	4621      	mov	r1, r4
 8013ce8:	4648      	mov	r0, r9
 8013cea:	f000 fcc7 	bl	801467c <__mdiff>
 8013cee:	68c2      	ldr	r2, [r0, #12]
 8013cf0:	4606      	mov	r6, r0
 8013cf2:	b9fa      	cbnz	r2, 8013d34 <_dtoa_r+0x954>
 8013cf4:	4601      	mov	r1, r0
 8013cf6:	9801      	ldr	r0, [sp, #4]
 8013cf8:	f000 fca4 	bl	8014644 <__mcmp>
 8013cfc:	4602      	mov	r2, r0
 8013cfe:	4631      	mov	r1, r6
 8013d00:	4648      	mov	r0, r9
 8013d02:	920a      	str	r2, [sp, #40]	@ 0x28
 8013d04:	f000 fa6c 	bl	80141e0 <_Bfree>
 8013d08:	9b07      	ldr	r3, [sp, #28]
 8013d0a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8013d0c:	9e04      	ldr	r6, [sp, #16]
 8013d0e:	ea42 0103 	orr.w	r1, r2, r3
 8013d12:	9b08      	ldr	r3, [sp, #32]
 8013d14:	4319      	orrs	r1, r3
 8013d16:	d10f      	bne.n	8013d38 <_dtoa_r+0x958>
 8013d18:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013d1c:	d028      	beq.n	8013d70 <_dtoa_r+0x990>
 8013d1e:	9b06      	ldr	r3, [sp, #24]
 8013d20:	2b00      	cmp	r3, #0
 8013d22:	dd02      	ble.n	8013d2a <_dtoa_r+0x94a>
 8013d24:	9b02      	ldr	r3, [sp, #8]
 8013d26:	f103 0a31 	add.w	sl, r3, #49	@ 0x31
 8013d2a:	f88b a000 	strb.w	sl, [fp]
 8013d2e:	e55e      	b.n	80137ee <_dtoa_r+0x40e>
 8013d30:	4628      	mov	r0, r5
 8013d32:	e7bd      	b.n	8013cb0 <_dtoa_r+0x8d0>
 8013d34:	2201      	movs	r2, #1
 8013d36:	e7e2      	b.n	8013cfe <_dtoa_r+0x91e>
 8013d38:	9b06      	ldr	r3, [sp, #24]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	db04      	blt.n	8013d48 <_dtoa_r+0x968>
 8013d3e:	9907      	ldr	r1, [sp, #28]
 8013d40:	430b      	orrs	r3, r1
 8013d42:	9908      	ldr	r1, [sp, #32]
 8013d44:	430b      	orrs	r3, r1
 8013d46:	d120      	bne.n	8013d8a <_dtoa_r+0x9aa>
 8013d48:	2a00      	cmp	r2, #0
 8013d4a:	ddee      	ble.n	8013d2a <_dtoa_r+0x94a>
 8013d4c:	9901      	ldr	r1, [sp, #4]
 8013d4e:	2201      	movs	r2, #1
 8013d50:	4648      	mov	r0, r9
 8013d52:	f000 fc0b 	bl	801456c <__lshift>
 8013d56:	4621      	mov	r1, r4
 8013d58:	9001      	str	r0, [sp, #4]
 8013d5a:	f000 fc73 	bl	8014644 <__mcmp>
 8013d5e:	2800      	cmp	r0, #0
 8013d60:	dc03      	bgt.n	8013d6a <_dtoa_r+0x98a>
 8013d62:	d1e2      	bne.n	8013d2a <_dtoa_r+0x94a>
 8013d64:	f01a 0f01 	tst.w	sl, #1
 8013d68:	d0df      	beq.n	8013d2a <_dtoa_r+0x94a>
 8013d6a:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013d6e:	d1d9      	bne.n	8013d24 <_dtoa_r+0x944>
 8013d70:	2339      	movs	r3, #57	@ 0x39
 8013d72:	f88b 3000 	strb.w	r3, [fp]
 8013d76:	4633      	mov	r3, r6
 8013d78:	461e      	mov	r6, r3
 8013d7a:	3b01      	subs	r3, #1
 8013d7c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8013d80:	2a39      	cmp	r2, #57	@ 0x39
 8013d82:	d052      	beq.n	8013e2a <_dtoa_r+0xa4a>
 8013d84:	3201      	adds	r2, #1
 8013d86:	701a      	strb	r2, [r3, #0]
 8013d88:	e531      	b.n	80137ee <_dtoa_r+0x40e>
 8013d8a:	2a00      	cmp	r2, #0
 8013d8c:	dd07      	ble.n	8013d9e <_dtoa_r+0x9be>
 8013d8e:	f1ba 0f39 	cmp.w	sl, #57	@ 0x39
 8013d92:	d0ed      	beq.n	8013d70 <_dtoa_r+0x990>
 8013d94:	f10a 0301 	add.w	r3, sl, #1
 8013d98:	f88b 3000 	strb.w	r3, [fp]
 8013d9c:	e527      	b.n	80137ee <_dtoa_r+0x40e>
 8013d9e:	9b04      	ldr	r3, [sp, #16]
 8013da0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8013da2:	f803 ac01 	strb.w	sl, [r3, #-1]
 8013da6:	4293      	cmp	r3, r2
 8013da8:	d029      	beq.n	8013dfe <_dtoa_r+0xa1e>
 8013daa:	9901      	ldr	r1, [sp, #4]
 8013dac:	2300      	movs	r3, #0
 8013dae:	220a      	movs	r2, #10
 8013db0:	4648      	mov	r0, r9
 8013db2:	f000 fa37 	bl	8014224 <__multadd>
 8013db6:	45a8      	cmp	r8, r5
 8013db8:	9001      	str	r0, [sp, #4]
 8013dba:	f04f 0300 	mov.w	r3, #0
 8013dbe:	f04f 020a 	mov.w	r2, #10
 8013dc2:	4641      	mov	r1, r8
 8013dc4:	4648      	mov	r0, r9
 8013dc6:	d107      	bne.n	8013dd8 <_dtoa_r+0x9f8>
 8013dc8:	f000 fa2c 	bl	8014224 <__multadd>
 8013dcc:	4680      	mov	r8, r0
 8013dce:	4605      	mov	r5, r0
 8013dd0:	9b04      	ldr	r3, [sp, #16]
 8013dd2:	3301      	adds	r3, #1
 8013dd4:	9304      	str	r3, [sp, #16]
 8013dd6:	e776      	b.n	8013cc6 <_dtoa_r+0x8e6>
 8013dd8:	f000 fa24 	bl	8014224 <__multadd>
 8013ddc:	4629      	mov	r1, r5
 8013dde:	4680      	mov	r8, r0
 8013de0:	2300      	movs	r3, #0
 8013de2:	220a      	movs	r2, #10
 8013de4:	4648      	mov	r0, r9
 8013de6:	f000 fa1d 	bl	8014224 <__multadd>
 8013dea:	4605      	mov	r5, r0
 8013dec:	e7f0      	b.n	8013dd0 <_dtoa_r+0x9f0>
 8013dee:	f1bb 0f00 	cmp.w	fp, #0
 8013df2:	bfcc      	ite	gt
 8013df4:	465e      	movgt	r6, fp
 8013df6:	2601      	movle	r6, #1
 8013df8:	443e      	add	r6, r7
 8013dfa:	f04f 0800 	mov.w	r8, #0
 8013dfe:	9901      	ldr	r1, [sp, #4]
 8013e00:	2201      	movs	r2, #1
 8013e02:	4648      	mov	r0, r9
 8013e04:	f000 fbb2 	bl	801456c <__lshift>
 8013e08:	4621      	mov	r1, r4
 8013e0a:	9001      	str	r0, [sp, #4]
 8013e0c:	f000 fc1a 	bl	8014644 <__mcmp>
 8013e10:	2800      	cmp	r0, #0
 8013e12:	dcb0      	bgt.n	8013d76 <_dtoa_r+0x996>
 8013e14:	d102      	bne.n	8013e1c <_dtoa_r+0xa3c>
 8013e16:	f01a 0f01 	tst.w	sl, #1
 8013e1a:	d1ac      	bne.n	8013d76 <_dtoa_r+0x996>
 8013e1c:	4633      	mov	r3, r6
 8013e1e:	461e      	mov	r6, r3
 8013e20:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8013e24:	2a30      	cmp	r2, #48	@ 0x30
 8013e26:	d0fa      	beq.n	8013e1e <_dtoa_r+0xa3e>
 8013e28:	e4e1      	b.n	80137ee <_dtoa_r+0x40e>
 8013e2a:	429f      	cmp	r7, r3
 8013e2c:	d1a4      	bne.n	8013d78 <_dtoa_r+0x998>
 8013e2e:	9b05      	ldr	r3, [sp, #20]
 8013e30:	3301      	adds	r3, #1
 8013e32:	9305      	str	r3, [sp, #20]
 8013e34:	2331      	movs	r3, #49	@ 0x31
 8013e36:	703b      	strb	r3, [r7, #0]
 8013e38:	e4d9      	b.n	80137ee <_dtoa_r+0x40e>
 8013e3a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8013e3c:	4f16      	ldr	r7, [pc, #88]	@ (8013e98 <_dtoa_r+0xab8>)
 8013e3e:	b11b      	cbz	r3, 8013e48 <_dtoa_r+0xa68>
 8013e40:	f107 0308 	add.w	r3, r7, #8
 8013e44:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 8013e46:	6013      	str	r3, [r2, #0]
 8013e48:	4638      	mov	r0, r7
 8013e4a:	b011      	add	sp, #68	@ 0x44
 8013e4c:	ecbd 8b02 	vpop	{d8}
 8013e50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8013e54:	9b07      	ldr	r3, [sp, #28]
 8013e56:	2b01      	cmp	r3, #1
 8013e58:	f77f ae2c 	ble.w	8013ab4 <_dtoa_r+0x6d4>
 8013e5c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8013e5e:	930b      	str	r3, [sp, #44]	@ 0x2c
 8013e60:	2001      	movs	r0, #1
 8013e62:	e64c      	b.n	8013afe <_dtoa_r+0x71e>
 8013e64:	f1bb 0f00 	cmp.w	fp, #0
 8013e68:	f77f aed8 	ble.w	8013c1c <_dtoa_r+0x83c>
 8013e6c:	463e      	mov	r6, r7
 8013e6e:	9801      	ldr	r0, [sp, #4]
 8013e70:	4621      	mov	r1, r4
 8013e72:	f7ff fa2d 	bl	80132d0 <quorem>
 8013e76:	f100 0a30 	add.w	sl, r0, #48	@ 0x30
 8013e7a:	f806 ab01 	strb.w	sl, [r6], #1
 8013e7e:	1bf2      	subs	r2, r6, r7
 8013e80:	4593      	cmp	fp, r2
 8013e82:	ddb4      	ble.n	8013dee <_dtoa_r+0xa0e>
 8013e84:	9901      	ldr	r1, [sp, #4]
 8013e86:	2300      	movs	r3, #0
 8013e88:	220a      	movs	r2, #10
 8013e8a:	4648      	mov	r0, r9
 8013e8c:	f000 f9ca 	bl	8014224 <__multadd>
 8013e90:	9001      	str	r0, [sp, #4]
 8013e92:	e7ec      	b.n	8013e6e <_dtoa_r+0xa8e>
 8013e94:	080289cc 	.word	0x080289cc
 8013e98:	08028950 	.word	0x08028950

08013e9c <malloc>:
 8013e9c:	4b02      	ldr	r3, [pc, #8]	@ (8013ea8 <malloc+0xc>)
 8013e9e:	4601      	mov	r1, r0
 8013ea0:	6818      	ldr	r0, [r3, #0]
 8013ea2:	f000 b825 	b.w	8013ef0 <_malloc_r>
 8013ea6:	bf00      	nop
 8013ea8:	24000490 	.word	0x24000490

08013eac <sbrk_aligned>:
 8013eac:	b570      	push	{r4, r5, r6, lr}
 8013eae:	4e0f      	ldr	r6, [pc, #60]	@ (8013eec <sbrk_aligned+0x40>)
 8013eb0:	460c      	mov	r4, r1
 8013eb2:	6831      	ldr	r1, [r6, #0]
 8013eb4:	4605      	mov	r5, r0
 8013eb6:	b911      	cbnz	r1, 8013ebe <sbrk_aligned+0x12>
 8013eb8:	f000 fd34 	bl	8014924 <_sbrk_r>
 8013ebc:	6030      	str	r0, [r6, #0]
 8013ebe:	4621      	mov	r1, r4
 8013ec0:	4628      	mov	r0, r5
 8013ec2:	f000 fd2f 	bl	8014924 <_sbrk_r>
 8013ec6:	1c43      	adds	r3, r0, #1
 8013ec8:	d103      	bne.n	8013ed2 <sbrk_aligned+0x26>
 8013eca:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8013ece:	4620      	mov	r0, r4
 8013ed0:	bd70      	pop	{r4, r5, r6, pc}
 8013ed2:	1cc4      	adds	r4, r0, #3
 8013ed4:	f024 0403 	bic.w	r4, r4, #3
 8013ed8:	42a0      	cmp	r0, r4
 8013eda:	d0f8      	beq.n	8013ece <sbrk_aligned+0x22>
 8013edc:	1a21      	subs	r1, r4, r0
 8013ede:	4628      	mov	r0, r5
 8013ee0:	f000 fd20 	bl	8014924 <_sbrk_r>
 8013ee4:	3001      	adds	r0, #1
 8013ee6:	d1f2      	bne.n	8013ece <sbrk_aligned+0x22>
 8013ee8:	e7ef      	b.n	8013eca <sbrk_aligned+0x1e>
 8013eea:	bf00      	nop
 8013eec:	2400b8a0 	.word	0x2400b8a0

08013ef0 <_malloc_r>:
 8013ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8013ef4:	1ccd      	adds	r5, r1, #3
 8013ef6:	f025 0503 	bic.w	r5, r5, #3
 8013efa:	3508      	adds	r5, #8
 8013efc:	2d0c      	cmp	r5, #12
 8013efe:	bf38      	it	cc
 8013f00:	250c      	movcc	r5, #12
 8013f02:	2d00      	cmp	r5, #0
 8013f04:	4606      	mov	r6, r0
 8013f06:	db01      	blt.n	8013f0c <_malloc_r+0x1c>
 8013f08:	42a9      	cmp	r1, r5
 8013f0a:	d904      	bls.n	8013f16 <_malloc_r+0x26>
 8013f0c:	230c      	movs	r3, #12
 8013f0e:	6033      	str	r3, [r6, #0]
 8013f10:	2000      	movs	r0, #0
 8013f12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8013f16:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8013fec <_malloc_r+0xfc>
 8013f1a:	f000 f915 	bl	8014148 <__malloc_lock>
 8013f1e:	f8d8 3000 	ldr.w	r3, [r8]
 8013f22:	461c      	mov	r4, r3
 8013f24:	bb44      	cbnz	r4, 8013f78 <_malloc_r+0x88>
 8013f26:	4629      	mov	r1, r5
 8013f28:	4630      	mov	r0, r6
 8013f2a:	f7ff ffbf 	bl	8013eac <sbrk_aligned>
 8013f2e:	1c43      	adds	r3, r0, #1
 8013f30:	4604      	mov	r4, r0
 8013f32:	d158      	bne.n	8013fe6 <_malloc_r+0xf6>
 8013f34:	f8d8 4000 	ldr.w	r4, [r8]
 8013f38:	4627      	mov	r7, r4
 8013f3a:	2f00      	cmp	r7, #0
 8013f3c:	d143      	bne.n	8013fc6 <_malloc_r+0xd6>
 8013f3e:	2c00      	cmp	r4, #0
 8013f40:	d04b      	beq.n	8013fda <_malloc_r+0xea>
 8013f42:	6823      	ldr	r3, [r4, #0]
 8013f44:	4639      	mov	r1, r7
 8013f46:	4630      	mov	r0, r6
 8013f48:	eb04 0903 	add.w	r9, r4, r3
 8013f4c:	f000 fcea 	bl	8014924 <_sbrk_r>
 8013f50:	4581      	cmp	r9, r0
 8013f52:	d142      	bne.n	8013fda <_malloc_r+0xea>
 8013f54:	6821      	ldr	r1, [r4, #0]
 8013f56:	1a6d      	subs	r5, r5, r1
 8013f58:	4629      	mov	r1, r5
 8013f5a:	4630      	mov	r0, r6
 8013f5c:	f7ff ffa6 	bl	8013eac <sbrk_aligned>
 8013f60:	3001      	adds	r0, #1
 8013f62:	d03a      	beq.n	8013fda <_malloc_r+0xea>
 8013f64:	6823      	ldr	r3, [r4, #0]
 8013f66:	442b      	add	r3, r5
 8013f68:	6023      	str	r3, [r4, #0]
 8013f6a:	f8d8 3000 	ldr.w	r3, [r8]
 8013f6e:	685a      	ldr	r2, [r3, #4]
 8013f70:	bb62      	cbnz	r2, 8013fcc <_malloc_r+0xdc>
 8013f72:	f8c8 7000 	str.w	r7, [r8]
 8013f76:	e00f      	b.n	8013f98 <_malloc_r+0xa8>
 8013f78:	6822      	ldr	r2, [r4, #0]
 8013f7a:	1b52      	subs	r2, r2, r5
 8013f7c:	d420      	bmi.n	8013fc0 <_malloc_r+0xd0>
 8013f7e:	2a0b      	cmp	r2, #11
 8013f80:	d917      	bls.n	8013fb2 <_malloc_r+0xc2>
 8013f82:	1961      	adds	r1, r4, r5
 8013f84:	42a3      	cmp	r3, r4
 8013f86:	6025      	str	r5, [r4, #0]
 8013f88:	bf18      	it	ne
 8013f8a:	6059      	strne	r1, [r3, #4]
 8013f8c:	6863      	ldr	r3, [r4, #4]
 8013f8e:	bf08      	it	eq
 8013f90:	f8c8 1000 	streq.w	r1, [r8]
 8013f94:	5162      	str	r2, [r4, r5]
 8013f96:	604b      	str	r3, [r1, #4]
 8013f98:	4630      	mov	r0, r6
 8013f9a:	f000 f8db 	bl	8014154 <__malloc_unlock>
 8013f9e:	f104 000b 	add.w	r0, r4, #11
 8013fa2:	1d23      	adds	r3, r4, #4
 8013fa4:	f020 0007 	bic.w	r0, r0, #7
 8013fa8:	1ac2      	subs	r2, r0, r3
 8013faa:	bf1c      	itt	ne
 8013fac:	1a1b      	subne	r3, r3, r0
 8013fae:	50a3      	strne	r3, [r4, r2]
 8013fb0:	e7af      	b.n	8013f12 <_malloc_r+0x22>
 8013fb2:	6862      	ldr	r2, [r4, #4]
 8013fb4:	42a3      	cmp	r3, r4
 8013fb6:	bf0c      	ite	eq
 8013fb8:	f8c8 2000 	streq.w	r2, [r8]
 8013fbc:	605a      	strne	r2, [r3, #4]
 8013fbe:	e7eb      	b.n	8013f98 <_malloc_r+0xa8>
 8013fc0:	4623      	mov	r3, r4
 8013fc2:	6864      	ldr	r4, [r4, #4]
 8013fc4:	e7ae      	b.n	8013f24 <_malloc_r+0x34>
 8013fc6:	463c      	mov	r4, r7
 8013fc8:	687f      	ldr	r7, [r7, #4]
 8013fca:	e7b6      	b.n	8013f3a <_malloc_r+0x4a>
 8013fcc:	461a      	mov	r2, r3
 8013fce:	685b      	ldr	r3, [r3, #4]
 8013fd0:	42a3      	cmp	r3, r4
 8013fd2:	d1fb      	bne.n	8013fcc <_malloc_r+0xdc>
 8013fd4:	2300      	movs	r3, #0
 8013fd6:	6053      	str	r3, [r2, #4]
 8013fd8:	e7de      	b.n	8013f98 <_malloc_r+0xa8>
 8013fda:	230c      	movs	r3, #12
 8013fdc:	6033      	str	r3, [r6, #0]
 8013fde:	4630      	mov	r0, r6
 8013fe0:	f000 f8b8 	bl	8014154 <__malloc_unlock>
 8013fe4:	e794      	b.n	8013f10 <_malloc_r+0x20>
 8013fe6:	6005      	str	r5, [r0, #0]
 8013fe8:	e7d6      	b.n	8013f98 <_malloc_r+0xa8>
 8013fea:	bf00      	nop
 8013fec:	2400b8a4 	.word	0x2400b8a4

08013ff0 <__sflush_r>:
 8013ff0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8013ff4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8013ff8:	0716      	lsls	r6, r2, #28
 8013ffa:	4605      	mov	r5, r0
 8013ffc:	460c      	mov	r4, r1
 8013ffe:	d454      	bmi.n	80140aa <__sflush_r+0xba>
 8014000:	684b      	ldr	r3, [r1, #4]
 8014002:	2b00      	cmp	r3, #0
 8014004:	dc02      	bgt.n	801400c <__sflush_r+0x1c>
 8014006:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8014008:	2b00      	cmp	r3, #0
 801400a:	dd48      	ble.n	801409e <__sflush_r+0xae>
 801400c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801400e:	2e00      	cmp	r6, #0
 8014010:	d045      	beq.n	801409e <__sflush_r+0xae>
 8014012:	2300      	movs	r3, #0
 8014014:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8014018:	682f      	ldr	r7, [r5, #0]
 801401a:	6a21      	ldr	r1, [r4, #32]
 801401c:	602b      	str	r3, [r5, #0]
 801401e:	d030      	beq.n	8014082 <__sflush_r+0x92>
 8014020:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8014022:	89a3      	ldrh	r3, [r4, #12]
 8014024:	0759      	lsls	r1, r3, #29
 8014026:	d505      	bpl.n	8014034 <__sflush_r+0x44>
 8014028:	6863      	ldr	r3, [r4, #4]
 801402a:	1ad2      	subs	r2, r2, r3
 801402c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801402e:	b10b      	cbz	r3, 8014034 <__sflush_r+0x44>
 8014030:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8014032:	1ad2      	subs	r2, r2, r3
 8014034:	2300      	movs	r3, #0
 8014036:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8014038:	6a21      	ldr	r1, [r4, #32]
 801403a:	4628      	mov	r0, r5
 801403c:	47b0      	blx	r6
 801403e:	1c43      	adds	r3, r0, #1
 8014040:	89a3      	ldrh	r3, [r4, #12]
 8014042:	d106      	bne.n	8014052 <__sflush_r+0x62>
 8014044:	6829      	ldr	r1, [r5, #0]
 8014046:	291d      	cmp	r1, #29
 8014048:	d82b      	bhi.n	80140a2 <__sflush_r+0xb2>
 801404a:	4a2a      	ldr	r2, [pc, #168]	@ (80140f4 <__sflush_r+0x104>)
 801404c:	40ca      	lsrs	r2, r1
 801404e:	07d6      	lsls	r6, r2, #31
 8014050:	d527      	bpl.n	80140a2 <__sflush_r+0xb2>
 8014052:	2200      	movs	r2, #0
 8014054:	6062      	str	r2, [r4, #4]
 8014056:	04d9      	lsls	r1, r3, #19
 8014058:	6922      	ldr	r2, [r4, #16]
 801405a:	6022      	str	r2, [r4, #0]
 801405c:	d504      	bpl.n	8014068 <__sflush_r+0x78>
 801405e:	1c42      	adds	r2, r0, #1
 8014060:	d101      	bne.n	8014066 <__sflush_r+0x76>
 8014062:	682b      	ldr	r3, [r5, #0]
 8014064:	b903      	cbnz	r3, 8014068 <__sflush_r+0x78>
 8014066:	6560      	str	r0, [r4, #84]	@ 0x54
 8014068:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801406a:	602f      	str	r7, [r5, #0]
 801406c:	b1b9      	cbz	r1, 801409e <__sflush_r+0xae>
 801406e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014072:	4299      	cmp	r1, r3
 8014074:	d002      	beq.n	801407c <__sflush_r+0x8c>
 8014076:	4628      	mov	r0, r5
 8014078:	f000 fcb8 	bl	80149ec <_free_r>
 801407c:	2300      	movs	r3, #0
 801407e:	6363      	str	r3, [r4, #52]	@ 0x34
 8014080:	e00d      	b.n	801409e <__sflush_r+0xae>
 8014082:	2301      	movs	r3, #1
 8014084:	4628      	mov	r0, r5
 8014086:	47b0      	blx	r6
 8014088:	4602      	mov	r2, r0
 801408a:	1c50      	adds	r0, r2, #1
 801408c:	d1c9      	bne.n	8014022 <__sflush_r+0x32>
 801408e:	682b      	ldr	r3, [r5, #0]
 8014090:	2b00      	cmp	r3, #0
 8014092:	d0c6      	beq.n	8014022 <__sflush_r+0x32>
 8014094:	2b1d      	cmp	r3, #29
 8014096:	d001      	beq.n	801409c <__sflush_r+0xac>
 8014098:	2b16      	cmp	r3, #22
 801409a:	d11e      	bne.n	80140da <__sflush_r+0xea>
 801409c:	602f      	str	r7, [r5, #0]
 801409e:	2000      	movs	r0, #0
 80140a0:	e022      	b.n	80140e8 <__sflush_r+0xf8>
 80140a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140a6:	b21b      	sxth	r3, r3
 80140a8:	e01b      	b.n	80140e2 <__sflush_r+0xf2>
 80140aa:	690f      	ldr	r7, [r1, #16]
 80140ac:	2f00      	cmp	r7, #0
 80140ae:	d0f6      	beq.n	801409e <__sflush_r+0xae>
 80140b0:	0793      	lsls	r3, r2, #30
 80140b2:	680e      	ldr	r6, [r1, #0]
 80140b4:	bf08      	it	eq
 80140b6:	694b      	ldreq	r3, [r1, #20]
 80140b8:	600f      	str	r7, [r1, #0]
 80140ba:	bf18      	it	ne
 80140bc:	2300      	movne	r3, #0
 80140be:	eba6 0807 	sub.w	r8, r6, r7
 80140c2:	608b      	str	r3, [r1, #8]
 80140c4:	f1b8 0f00 	cmp.w	r8, #0
 80140c8:	dde9      	ble.n	801409e <__sflush_r+0xae>
 80140ca:	6a21      	ldr	r1, [r4, #32]
 80140cc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80140ce:	4643      	mov	r3, r8
 80140d0:	463a      	mov	r2, r7
 80140d2:	4628      	mov	r0, r5
 80140d4:	47b0      	blx	r6
 80140d6:	2800      	cmp	r0, #0
 80140d8:	dc08      	bgt.n	80140ec <__sflush_r+0xfc>
 80140da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80140de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80140e2:	81a3      	strh	r3, [r4, #12]
 80140e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80140e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80140ec:	4407      	add	r7, r0
 80140ee:	eba8 0800 	sub.w	r8, r8, r0
 80140f2:	e7e7      	b.n	80140c4 <__sflush_r+0xd4>
 80140f4:	20400001 	.word	0x20400001

080140f8 <_fflush_r>:
 80140f8:	b538      	push	{r3, r4, r5, lr}
 80140fa:	690b      	ldr	r3, [r1, #16]
 80140fc:	4605      	mov	r5, r0
 80140fe:	460c      	mov	r4, r1
 8014100:	b913      	cbnz	r3, 8014108 <_fflush_r+0x10>
 8014102:	2500      	movs	r5, #0
 8014104:	4628      	mov	r0, r5
 8014106:	bd38      	pop	{r3, r4, r5, pc}
 8014108:	b118      	cbz	r0, 8014112 <_fflush_r+0x1a>
 801410a:	6a03      	ldr	r3, [r0, #32]
 801410c:	b90b      	cbnz	r3, 8014112 <_fflush_r+0x1a>
 801410e:	f7ff f861 	bl	80131d4 <__sinit>
 8014112:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014116:	2b00      	cmp	r3, #0
 8014118:	d0f3      	beq.n	8014102 <_fflush_r+0xa>
 801411a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801411c:	07d0      	lsls	r0, r2, #31
 801411e:	d404      	bmi.n	801412a <_fflush_r+0x32>
 8014120:	0599      	lsls	r1, r3, #22
 8014122:	d402      	bmi.n	801412a <_fflush_r+0x32>
 8014124:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014126:	f7ff f8be 	bl	80132a6 <__retarget_lock_acquire_recursive>
 801412a:	4628      	mov	r0, r5
 801412c:	4621      	mov	r1, r4
 801412e:	f7ff ff5f 	bl	8013ff0 <__sflush_r>
 8014132:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8014134:	07da      	lsls	r2, r3, #31
 8014136:	4605      	mov	r5, r0
 8014138:	d4e4      	bmi.n	8014104 <_fflush_r+0xc>
 801413a:	89a3      	ldrh	r3, [r4, #12]
 801413c:	059b      	lsls	r3, r3, #22
 801413e:	d4e1      	bmi.n	8014104 <_fflush_r+0xc>
 8014140:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8014142:	f7ff f8b1 	bl	80132a8 <__retarget_lock_release_recursive>
 8014146:	e7dd      	b.n	8014104 <_fflush_r+0xc>

08014148 <__malloc_lock>:
 8014148:	4801      	ldr	r0, [pc, #4]	@ (8014150 <__malloc_lock+0x8>)
 801414a:	f7ff b8ac 	b.w	80132a6 <__retarget_lock_acquire_recursive>
 801414e:	bf00      	nop
 8014150:	2400b89c 	.word	0x2400b89c

08014154 <__malloc_unlock>:
 8014154:	4801      	ldr	r0, [pc, #4]	@ (801415c <__malloc_unlock+0x8>)
 8014156:	f7ff b8a7 	b.w	80132a8 <__retarget_lock_release_recursive>
 801415a:	bf00      	nop
 801415c:	2400b89c 	.word	0x2400b89c

08014160 <_Balloc>:
 8014160:	b570      	push	{r4, r5, r6, lr}
 8014162:	69c6      	ldr	r6, [r0, #28]
 8014164:	4604      	mov	r4, r0
 8014166:	460d      	mov	r5, r1
 8014168:	b976      	cbnz	r6, 8014188 <_Balloc+0x28>
 801416a:	2010      	movs	r0, #16
 801416c:	f7ff fe96 	bl	8013e9c <malloc>
 8014170:	4602      	mov	r2, r0
 8014172:	61e0      	str	r0, [r4, #28]
 8014174:	b920      	cbnz	r0, 8014180 <_Balloc+0x20>
 8014176:	4b18      	ldr	r3, [pc, #96]	@ (80141d8 <_Balloc+0x78>)
 8014178:	4818      	ldr	r0, [pc, #96]	@ (80141dc <_Balloc+0x7c>)
 801417a:	216b      	movs	r1, #107	@ 0x6b
 801417c:	f000 fc04 	bl	8014988 <__assert_func>
 8014180:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014184:	6006      	str	r6, [r0, #0]
 8014186:	60c6      	str	r6, [r0, #12]
 8014188:	69e6      	ldr	r6, [r4, #28]
 801418a:	68f3      	ldr	r3, [r6, #12]
 801418c:	b183      	cbz	r3, 80141b0 <_Balloc+0x50>
 801418e:	69e3      	ldr	r3, [r4, #28]
 8014190:	68db      	ldr	r3, [r3, #12]
 8014192:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8014196:	b9b8      	cbnz	r0, 80141c8 <_Balloc+0x68>
 8014198:	2101      	movs	r1, #1
 801419a:	fa01 f605 	lsl.w	r6, r1, r5
 801419e:	1d72      	adds	r2, r6, #5
 80141a0:	0092      	lsls	r2, r2, #2
 80141a2:	4620      	mov	r0, r4
 80141a4:	f000 fc0e 	bl	80149c4 <_calloc_r>
 80141a8:	b160      	cbz	r0, 80141c4 <_Balloc+0x64>
 80141aa:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80141ae:	e00e      	b.n	80141ce <_Balloc+0x6e>
 80141b0:	2221      	movs	r2, #33	@ 0x21
 80141b2:	2104      	movs	r1, #4
 80141b4:	4620      	mov	r0, r4
 80141b6:	f000 fc05 	bl	80149c4 <_calloc_r>
 80141ba:	69e3      	ldr	r3, [r4, #28]
 80141bc:	60f0      	str	r0, [r6, #12]
 80141be:	68db      	ldr	r3, [r3, #12]
 80141c0:	2b00      	cmp	r3, #0
 80141c2:	d1e4      	bne.n	801418e <_Balloc+0x2e>
 80141c4:	2000      	movs	r0, #0
 80141c6:	bd70      	pop	{r4, r5, r6, pc}
 80141c8:	6802      	ldr	r2, [r0, #0]
 80141ca:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80141ce:	2300      	movs	r3, #0
 80141d0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80141d4:	e7f7      	b.n	80141c6 <_Balloc+0x66>
 80141d6:	bf00      	nop
 80141d8:	0802895d 	.word	0x0802895d
 80141dc:	080289dd 	.word	0x080289dd

080141e0 <_Bfree>:
 80141e0:	b570      	push	{r4, r5, r6, lr}
 80141e2:	69c6      	ldr	r6, [r0, #28]
 80141e4:	4605      	mov	r5, r0
 80141e6:	460c      	mov	r4, r1
 80141e8:	b976      	cbnz	r6, 8014208 <_Bfree+0x28>
 80141ea:	2010      	movs	r0, #16
 80141ec:	f7ff fe56 	bl	8013e9c <malloc>
 80141f0:	4602      	mov	r2, r0
 80141f2:	61e8      	str	r0, [r5, #28]
 80141f4:	b920      	cbnz	r0, 8014200 <_Bfree+0x20>
 80141f6:	4b09      	ldr	r3, [pc, #36]	@ (801421c <_Bfree+0x3c>)
 80141f8:	4809      	ldr	r0, [pc, #36]	@ (8014220 <_Bfree+0x40>)
 80141fa:	218f      	movs	r1, #143	@ 0x8f
 80141fc:	f000 fbc4 	bl	8014988 <__assert_func>
 8014200:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8014204:	6006      	str	r6, [r0, #0]
 8014206:	60c6      	str	r6, [r0, #12]
 8014208:	b13c      	cbz	r4, 801421a <_Bfree+0x3a>
 801420a:	69eb      	ldr	r3, [r5, #28]
 801420c:	6862      	ldr	r2, [r4, #4]
 801420e:	68db      	ldr	r3, [r3, #12]
 8014210:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8014214:	6021      	str	r1, [r4, #0]
 8014216:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 801421a:	bd70      	pop	{r4, r5, r6, pc}
 801421c:	0802895d 	.word	0x0802895d
 8014220:	080289dd 	.word	0x080289dd

08014224 <__multadd>:
 8014224:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8014228:	690d      	ldr	r5, [r1, #16]
 801422a:	4607      	mov	r7, r0
 801422c:	460c      	mov	r4, r1
 801422e:	461e      	mov	r6, r3
 8014230:	f101 0c14 	add.w	ip, r1, #20
 8014234:	2000      	movs	r0, #0
 8014236:	f8dc 3000 	ldr.w	r3, [ip]
 801423a:	b299      	uxth	r1, r3
 801423c:	fb02 6101 	mla	r1, r2, r1, r6
 8014240:	0c1e      	lsrs	r6, r3, #16
 8014242:	0c0b      	lsrs	r3, r1, #16
 8014244:	fb02 3306 	mla	r3, r2, r6, r3
 8014248:	b289      	uxth	r1, r1
 801424a:	3001      	adds	r0, #1
 801424c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8014250:	4285      	cmp	r5, r0
 8014252:	f84c 1b04 	str.w	r1, [ip], #4
 8014256:	ea4f 4613 	mov.w	r6, r3, lsr #16
 801425a:	dcec      	bgt.n	8014236 <__multadd+0x12>
 801425c:	b30e      	cbz	r6, 80142a2 <__multadd+0x7e>
 801425e:	68a3      	ldr	r3, [r4, #8]
 8014260:	42ab      	cmp	r3, r5
 8014262:	dc19      	bgt.n	8014298 <__multadd+0x74>
 8014264:	6861      	ldr	r1, [r4, #4]
 8014266:	4638      	mov	r0, r7
 8014268:	3101      	adds	r1, #1
 801426a:	f7ff ff79 	bl	8014160 <_Balloc>
 801426e:	4680      	mov	r8, r0
 8014270:	b928      	cbnz	r0, 801427e <__multadd+0x5a>
 8014272:	4602      	mov	r2, r0
 8014274:	4b0c      	ldr	r3, [pc, #48]	@ (80142a8 <__multadd+0x84>)
 8014276:	480d      	ldr	r0, [pc, #52]	@ (80142ac <__multadd+0x88>)
 8014278:	21ba      	movs	r1, #186	@ 0xba
 801427a:	f000 fb85 	bl	8014988 <__assert_func>
 801427e:	6922      	ldr	r2, [r4, #16]
 8014280:	3202      	adds	r2, #2
 8014282:	f104 010c 	add.w	r1, r4, #12
 8014286:	0092      	lsls	r2, r2, #2
 8014288:	300c      	adds	r0, #12
 801428a:	f7ff f813 	bl	80132b4 <memcpy>
 801428e:	4621      	mov	r1, r4
 8014290:	4638      	mov	r0, r7
 8014292:	f7ff ffa5 	bl	80141e0 <_Bfree>
 8014296:	4644      	mov	r4, r8
 8014298:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 801429c:	3501      	adds	r5, #1
 801429e:	615e      	str	r6, [r3, #20]
 80142a0:	6125      	str	r5, [r4, #16]
 80142a2:	4620      	mov	r0, r4
 80142a4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80142a8:	080289cc 	.word	0x080289cc
 80142ac:	080289dd 	.word	0x080289dd

080142b0 <__hi0bits>:
 80142b0:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 80142b4:	4603      	mov	r3, r0
 80142b6:	bf36      	itet	cc
 80142b8:	0403      	lslcc	r3, r0, #16
 80142ba:	2000      	movcs	r0, #0
 80142bc:	2010      	movcc	r0, #16
 80142be:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80142c2:	bf3c      	itt	cc
 80142c4:	021b      	lslcc	r3, r3, #8
 80142c6:	3008      	addcc	r0, #8
 80142c8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80142cc:	bf3c      	itt	cc
 80142ce:	011b      	lslcc	r3, r3, #4
 80142d0:	3004      	addcc	r0, #4
 80142d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80142d6:	bf3c      	itt	cc
 80142d8:	009b      	lslcc	r3, r3, #2
 80142da:	3002      	addcc	r0, #2
 80142dc:	2b00      	cmp	r3, #0
 80142de:	db05      	blt.n	80142ec <__hi0bits+0x3c>
 80142e0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 80142e4:	f100 0001 	add.w	r0, r0, #1
 80142e8:	bf08      	it	eq
 80142ea:	2020      	moveq	r0, #32
 80142ec:	4770      	bx	lr

080142ee <__lo0bits>:
 80142ee:	6803      	ldr	r3, [r0, #0]
 80142f0:	4602      	mov	r2, r0
 80142f2:	f013 0007 	ands.w	r0, r3, #7
 80142f6:	d00b      	beq.n	8014310 <__lo0bits+0x22>
 80142f8:	07d9      	lsls	r1, r3, #31
 80142fa:	d421      	bmi.n	8014340 <__lo0bits+0x52>
 80142fc:	0798      	lsls	r0, r3, #30
 80142fe:	bf49      	itett	mi
 8014300:	085b      	lsrmi	r3, r3, #1
 8014302:	089b      	lsrpl	r3, r3, #2
 8014304:	2001      	movmi	r0, #1
 8014306:	6013      	strmi	r3, [r2, #0]
 8014308:	bf5c      	itt	pl
 801430a:	6013      	strpl	r3, [r2, #0]
 801430c:	2002      	movpl	r0, #2
 801430e:	4770      	bx	lr
 8014310:	b299      	uxth	r1, r3
 8014312:	b909      	cbnz	r1, 8014318 <__lo0bits+0x2a>
 8014314:	0c1b      	lsrs	r3, r3, #16
 8014316:	2010      	movs	r0, #16
 8014318:	b2d9      	uxtb	r1, r3
 801431a:	b909      	cbnz	r1, 8014320 <__lo0bits+0x32>
 801431c:	3008      	adds	r0, #8
 801431e:	0a1b      	lsrs	r3, r3, #8
 8014320:	0719      	lsls	r1, r3, #28
 8014322:	bf04      	itt	eq
 8014324:	091b      	lsreq	r3, r3, #4
 8014326:	3004      	addeq	r0, #4
 8014328:	0799      	lsls	r1, r3, #30
 801432a:	bf04      	itt	eq
 801432c:	089b      	lsreq	r3, r3, #2
 801432e:	3002      	addeq	r0, #2
 8014330:	07d9      	lsls	r1, r3, #31
 8014332:	d403      	bmi.n	801433c <__lo0bits+0x4e>
 8014334:	085b      	lsrs	r3, r3, #1
 8014336:	f100 0001 	add.w	r0, r0, #1
 801433a:	d003      	beq.n	8014344 <__lo0bits+0x56>
 801433c:	6013      	str	r3, [r2, #0]
 801433e:	4770      	bx	lr
 8014340:	2000      	movs	r0, #0
 8014342:	4770      	bx	lr
 8014344:	2020      	movs	r0, #32
 8014346:	4770      	bx	lr

08014348 <__i2b>:
 8014348:	b510      	push	{r4, lr}
 801434a:	460c      	mov	r4, r1
 801434c:	2101      	movs	r1, #1
 801434e:	f7ff ff07 	bl	8014160 <_Balloc>
 8014352:	4602      	mov	r2, r0
 8014354:	b928      	cbnz	r0, 8014362 <__i2b+0x1a>
 8014356:	4b05      	ldr	r3, [pc, #20]	@ (801436c <__i2b+0x24>)
 8014358:	4805      	ldr	r0, [pc, #20]	@ (8014370 <__i2b+0x28>)
 801435a:	f240 1145 	movw	r1, #325	@ 0x145
 801435e:	f000 fb13 	bl	8014988 <__assert_func>
 8014362:	2301      	movs	r3, #1
 8014364:	6144      	str	r4, [r0, #20]
 8014366:	6103      	str	r3, [r0, #16]
 8014368:	bd10      	pop	{r4, pc}
 801436a:	bf00      	nop
 801436c:	080289cc 	.word	0x080289cc
 8014370:	080289dd 	.word	0x080289dd

08014374 <__multiply>:
 8014374:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014378:	4617      	mov	r7, r2
 801437a:	690a      	ldr	r2, [r1, #16]
 801437c:	693b      	ldr	r3, [r7, #16]
 801437e:	429a      	cmp	r2, r3
 8014380:	bfa8      	it	ge
 8014382:	463b      	movge	r3, r7
 8014384:	4689      	mov	r9, r1
 8014386:	bfa4      	itt	ge
 8014388:	460f      	movge	r7, r1
 801438a:	4699      	movge	r9, r3
 801438c:	693d      	ldr	r5, [r7, #16]
 801438e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8014392:	68bb      	ldr	r3, [r7, #8]
 8014394:	6879      	ldr	r1, [r7, #4]
 8014396:	eb05 060a 	add.w	r6, r5, sl
 801439a:	42b3      	cmp	r3, r6
 801439c:	b085      	sub	sp, #20
 801439e:	bfb8      	it	lt
 80143a0:	3101      	addlt	r1, #1
 80143a2:	f7ff fedd 	bl	8014160 <_Balloc>
 80143a6:	b930      	cbnz	r0, 80143b6 <__multiply+0x42>
 80143a8:	4602      	mov	r2, r0
 80143aa:	4b41      	ldr	r3, [pc, #260]	@ (80144b0 <__multiply+0x13c>)
 80143ac:	4841      	ldr	r0, [pc, #260]	@ (80144b4 <__multiply+0x140>)
 80143ae:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 80143b2:	f000 fae9 	bl	8014988 <__assert_func>
 80143b6:	f100 0414 	add.w	r4, r0, #20
 80143ba:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 80143be:	4623      	mov	r3, r4
 80143c0:	2200      	movs	r2, #0
 80143c2:	4573      	cmp	r3, lr
 80143c4:	d320      	bcc.n	8014408 <__multiply+0x94>
 80143c6:	f107 0814 	add.w	r8, r7, #20
 80143ca:	f109 0114 	add.w	r1, r9, #20
 80143ce:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80143d2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80143d6:	9302      	str	r3, [sp, #8]
 80143d8:	1beb      	subs	r3, r5, r7
 80143da:	3b15      	subs	r3, #21
 80143dc:	f023 0303 	bic.w	r3, r3, #3
 80143e0:	3304      	adds	r3, #4
 80143e2:	3715      	adds	r7, #21
 80143e4:	42bd      	cmp	r5, r7
 80143e6:	bf38      	it	cc
 80143e8:	2304      	movcc	r3, #4
 80143ea:	9301      	str	r3, [sp, #4]
 80143ec:	9b02      	ldr	r3, [sp, #8]
 80143ee:	9103      	str	r1, [sp, #12]
 80143f0:	428b      	cmp	r3, r1
 80143f2:	d80c      	bhi.n	801440e <__multiply+0x9a>
 80143f4:	2e00      	cmp	r6, #0
 80143f6:	dd03      	ble.n	8014400 <__multiply+0x8c>
 80143f8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80143fc:	2b00      	cmp	r3, #0
 80143fe:	d055      	beq.n	80144ac <__multiply+0x138>
 8014400:	6106      	str	r6, [r0, #16]
 8014402:	b005      	add	sp, #20
 8014404:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014408:	f843 2b04 	str.w	r2, [r3], #4
 801440c:	e7d9      	b.n	80143c2 <__multiply+0x4e>
 801440e:	f8b1 a000 	ldrh.w	sl, [r1]
 8014412:	f1ba 0f00 	cmp.w	sl, #0
 8014416:	d01f      	beq.n	8014458 <__multiply+0xe4>
 8014418:	46c4      	mov	ip, r8
 801441a:	46a1      	mov	r9, r4
 801441c:	2700      	movs	r7, #0
 801441e:	f85c 2b04 	ldr.w	r2, [ip], #4
 8014422:	f8d9 3000 	ldr.w	r3, [r9]
 8014426:	fa1f fb82 	uxth.w	fp, r2
 801442a:	b29b      	uxth	r3, r3
 801442c:	fb0a 330b 	mla	r3, sl, fp, r3
 8014430:	443b      	add	r3, r7
 8014432:	f8d9 7000 	ldr.w	r7, [r9]
 8014436:	0c12      	lsrs	r2, r2, #16
 8014438:	0c3f      	lsrs	r7, r7, #16
 801443a:	fb0a 7202 	mla	r2, sl, r2, r7
 801443e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8014442:	b29b      	uxth	r3, r3
 8014444:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014448:	4565      	cmp	r5, ip
 801444a:	f849 3b04 	str.w	r3, [r9], #4
 801444e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8014452:	d8e4      	bhi.n	801441e <__multiply+0xaa>
 8014454:	9b01      	ldr	r3, [sp, #4]
 8014456:	50e7      	str	r7, [r4, r3]
 8014458:	9b03      	ldr	r3, [sp, #12]
 801445a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 801445e:	3104      	adds	r1, #4
 8014460:	f1b9 0f00 	cmp.w	r9, #0
 8014464:	d020      	beq.n	80144a8 <__multiply+0x134>
 8014466:	6823      	ldr	r3, [r4, #0]
 8014468:	4647      	mov	r7, r8
 801446a:	46a4      	mov	ip, r4
 801446c:	f04f 0a00 	mov.w	sl, #0
 8014470:	f8b7 b000 	ldrh.w	fp, [r7]
 8014474:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8014478:	fb09 220b 	mla	r2, r9, fp, r2
 801447c:	4452      	add	r2, sl
 801447e:	b29b      	uxth	r3, r3
 8014480:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8014484:	f84c 3b04 	str.w	r3, [ip], #4
 8014488:	f857 3b04 	ldr.w	r3, [r7], #4
 801448c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8014490:	f8bc 3000 	ldrh.w	r3, [ip]
 8014494:	fb09 330a 	mla	r3, r9, sl, r3
 8014498:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 801449c:	42bd      	cmp	r5, r7
 801449e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80144a2:	d8e5      	bhi.n	8014470 <__multiply+0xfc>
 80144a4:	9a01      	ldr	r2, [sp, #4]
 80144a6:	50a3      	str	r3, [r4, r2]
 80144a8:	3404      	adds	r4, #4
 80144aa:	e79f      	b.n	80143ec <__multiply+0x78>
 80144ac:	3e01      	subs	r6, #1
 80144ae:	e7a1      	b.n	80143f4 <__multiply+0x80>
 80144b0:	080289cc 	.word	0x080289cc
 80144b4:	080289dd 	.word	0x080289dd

080144b8 <__pow5mult>:
 80144b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80144bc:	4615      	mov	r5, r2
 80144be:	f012 0203 	ands.w	r2, r2, #3
 80144c2:	4607      	mov	r7, r0
 80144c4:	460e      	mov	r6, r1
 80144c6:	d007      	beq.n	80144d8 <__pow5mult+0x20>
 80144c8:	4c25      	ldr	r4, [pc, #148]	@ (8014560 <__pow5mult+0xa8>)
 80144ca:	3a01      	subs	r2, #1
 80144cc:	2300      	movs	r3, #0
 80144ce:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80144d2:	f7ff fea7 	bl	8014224 <__multadd>
 80144d6:	4606      	mov	r6, r0
 80144d8:	10ad      	asrs	r5, r5, #2
 80144da:	d03d      	beq.n	8014558 <__pow5mult+0xa0>
 80144dc:	69fc      	ldr	r4, [r7, #28]
 80144de:	b97c      	cbnz	r4, 8014500 <__pow5mult+0x48>
 80144e0:	2010      	movs	r0, #16
 80144e2:	f7ff fcdb 	bl	8013e9c <malloc>
 80144e6:	4602      	mov	r2, r0
 80144e8:	61f8      	str	r0, [r7, #28]
 80144ea:	b928      	cbnz	r0, 80144f8 <__pow5mult+0x40>
 80144ec:	4b1d      	ldr	r3, [pc, #116]	@ (8014564 <__pow5mult+0xac>)
 80144ee:	481e      	ldr	r0, [pc, #120]	@ (8014568 <__pow5mult+0xb0>)
 80144f0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80144f4:	f000 fa48 	bl	8014988 <__assert_func>
 80144f8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80144fc:	6004      	str	r4, [r0, #0]
 80144fe:	60c4      	str	r4, [r0, #12]
 8014500:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8014504:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8014508:	b94c      	cbnz	r4, 801451e <__pow5mult+0x66>
 801450a:	f240 2171 	movw	r1, #625	@ 0x271
 801450e:	4638      	mov	r0, r7
 8014510:	f7ff ff1a 	bl	8014348 <__i2b>
 8014514:	2300      	movs	r3, #0
 8014516:	f8c8 0008 	str.w	r0, [r8, #8]
 801451a:	4604      	mov	r4, r0
 801451c:	6003      	str	r3, [r0, #0]
 801451e:	f04f 0900 	mov.w	r9, #0
 8014522:	07eb      	lsls	r3, r5, #31
 8014524:	d50a      	bpl.n	801453c <__pow5mult+0x84>
 8014526:	4631      	mov	r1, r6
 8014528:	4622      	mov	r2, r4
 801452a:	4638      	mov	r0, r7
 801452c:	f7ff ff22 	bl	8014374 <__multiply>
 8014530:	4631      	mov	r1, r6
 8014532:	4680      	mov	r8, r0
 8014534:	4638      	mov	r0, r7
 8014536:	f7ff fe53 	bl	80141e0 <_Bfree>
 801453a:	4646      	mov	r6, r8
 801453c:	106d      	asrs	r5, r5, #1
 801453e:	d00b      	beq.n	8014558 <__pow5mult+0xa0>
 8014540:	6820      	ldr	r0, [r4, #0]
 8014542:	b938      	cbnz	r0, 8014554 <__pow5mult+0x9c>
 8014544:	4622      	mov	r2, r4
 8014546:	4621      	mov	r1, r4
 8014548:	4638      	mov	r0, r7
 801454a:	f7ff ff13 	bl	8014374 <__multiply>
 801454e:	6020      	str	r0, [r4, #0]
 8014550:	f8c0 9000 	str.w	r9, [r0]
 8014554:	4604      	mov	r4, r0
 8014556:	e7e4      	b.n	8014522 <__pow5mult+0x6a>
 8014558:	4630      	mov	r0, r6
 801455a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801455e:	bf00      	nop
 8014560:	08028e20 	.word	0x08028e20
 8014564:	0802895d 	.word	0x0802895d
 8014568:	080289dd 	.word	0x080289dd

0801456c <__lshift>:
 801456c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8014570:	460c      	mov	r4, r1
 8014572:	6849      	ldr	r1, [r1, #4]
 8014574:	6923      	ldr	r3, [r4, #16]
 8014576:	eb03 1862 	add.w	r8, r3, r2, asr #5
 801457a:	68a3      	ldr	r3, [r4, #8]
 801457c:	4607      	mov	r7, r0
 801457e:	4691      	mov	r9, r2
 8014580:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8014584:	f108 0601 	add.w	r6, r8, #1
 8014588:	42b3      	cmp	r3, r6
 801458a:	db0b      	blt.n	80145a4 <__lshift+0x38>
 801458c:	4638      	mov	r0, r7
 801458e:	f7ff fde7 	bl	8014160 <_Balloc>
 8014592:	4605      	mov	r5, r0
 8014594:	b948      	cbnz	r0, 80145aa <__lshift+0x3e>
 8014596:	4602      	mov	r2, r0
 8014598:	4b28      	ldr	r3, [pc, #160]	@ (801463c <__lshift+0xd0>)
 801459a:	4829      	ldr	r0, [pc, #164]	@ (8014640 <__lshift+0xd4>)
 801459c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 80145a0:	f000 f9f2 	bl	8014988 <__assert_func>
 80145a4:	3101      	adds	r1, #1
 80145a6:	005b      	lsls	r3, r3, #1
 80145a8:	e7ee      	b.n	8014588 <__lshift+0x1c>
 80145aa:	2300      	movs	r3, #0
 80145ac:	f100 0114 	add.w	r1, r0, #20
 80145b0:	f100 0210 	add.w	r2, r0, #16
 80145b4:	4618      	mov	r0, r3
 80145b6:	4553      	cmp	r3, sl
 80145b8:	db33      	blt.n	8014622 <__lshift+0xb6>
 80145ba:	6920      	ldr	r0, [r4, #16]
 80145bc:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80145c0:	f104 0314 	add.w	r3, r4, #20
 80145c4:	f019 091f 	ands.w	r9, r9, #31
 80145c8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80145cc:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80145d0:	d02b      	beq.n	801462a <__lshift+0xbe>
 80145d2:	f1c9 0e20 	rsb	lr, r9, #32
 80145d6:	468a      	mov	sl, r1
 80145d8:	2200      	movs	r2, #0
 80145da:	6818      	ldr	r0, [r3, #0]
 80145dc:	fa00 f009 	lsl.w	r0, r0, r9
 80145e0:	4310      	orrs	r0, r2
 80145e2:	f84a 0b04 	str.w	r0, [sl], #4
 80145e6:	f853 2b04 	ldr.w	r2, [r3], #4
 80145ea:	459c      	cmp	ip, r3
 80145ec:	fa22 f20e 	lsr.w	r2, r2, lr
 80145f0:	d8f3      	bhi.n	80145da <__lshift+0x6e>
 80145f2:	ebac 0304 	sub.w	r3, ip, r4
 80145f6:	3b15      	subs	r3, #21
 80145f8:	f023 0303 	bic.w	r3, r3, #3
 80145fc:	3304      	adds	r3, #4
 80145fe:	f104 0015 	add.w	r0, r4, #21
 8014602:	4560      	cmp	r0, ip
 8014604:	bf88      	it	hi
 8014606:	2304      	movhi	r3, #4
 8014608:	50ca      	str	r2, [r1, r3]
 801460a:	b10a      	cbz	r2, 8014610 <__lshift+0xa4>
 801460c:	f108 0602 	add.w	r6, r8, #2
 8014610:	3e01      	subs	r6, #1
 8014612:	4638      	mov	r0, r7
 8014614:	612e      	str	r6, [r5, #16]
 8014616:	4621      	mov	r1, r4
 8014618:	f7ff fde2 	bl	80141e0 <_Bfree>
 801461c:	4628      	mov	r0, r5
 801461e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8014622:	f842 0f04 	str.w	r0, [r2, #4]!
 8014626:	3301      	adds	r3, #1
 8014628:	e7c5      	b.n	80145b6 <__lshift+0x4a>
 801462a:	3904      	subs	r1, #4
 801462c:	f853 2b04 	ldr.w	r2, [r3], #4
 8014630:	f841 2f04 	str.w	r2, [r1, #4]!
 8014634:	459c      	cmp	ip, r3
 8014636:	d8f9      	bhi.n	801462c <__lshift+0xc0>
 8014638:	e7ea      	b.n	8014610 <__lshift+0xa4>
 801463a:	bf00      	nop
 801463c:	080289cc 	.word	0x080289cc
 8014640:	080289dd 	.word	0x080289dd

08014644 <__mcmp>:
 8014644:	690a      	ldr	r2, [r1, #16]
 8014646:	4603      	mov	r3, r0
 8014648:	6900      	ldr	r0, [r0, #16]
 801464a:	1a80      	subs	r0, r0, r2
 801464c:	b530      	push	{r4, r5, lr}
 801464e:	d10e      	bne.n	801466e <__mcmp+0x2a>
 8014650:	3314      	adds	r3, #20
 8014652:	3114      	adds	r1, #20
 8014654:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8014658:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 801465c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8014660:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8014664:	4295      	cmp	r5, r2
 8014666:	d003      	beq.n	8014670 <__mcmp+0x2c>
 8014668:	d205      	bcs.n	8014676 <__mcmp+0x32>
 801466a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 801466e:	bd30      	pop	{r4, r5, pc}
 8014670:	42a3      	cmp	r3, r4
 8014672:	d3f3      	bcc.n	801465c <__mcmp+0x18>
 8014674:	e7fb      	b.n	801466e <__mcmp+0x2a>
 8014676:	2001      	movs	r0, #1
 8014678:	e7f9      	b.n	801466e <__mcmp+0x2a>
	...

0801467c <__mdiff>:
 801467c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014680:	4689      	mov	r9, r1
 8014682:	4606      	mov	r6, r0
 8014684:	4611      	mov	r1, r2
 8014686:	4648      	mov	r0, r9
 8014688:	4614      	mov	r4, r2
 801468a:	f7ff ffdb 	bl	8014644 <__mcmp>
 801468e:	1e05      	subs	r5, r0, #0
 8014690:	d112      	bne.n	80146b8 <__mdiff+0x3c>
 8014692:	4629      	mov	r1, r5
 8014694:	4630      	mov	r0, r6
 8014696:	f7ff fd63 	bl	8014160 <_Balloc>
 801469a:	4602      	mov	r2, r0
 801469c:	b928      	cbnz	r0, 80146aa <__mdiff+0x2e>
 801469e:	4b3f      	ldr	r3, [pc, #252]	@ (801479c <__mdiff+0x120>)
 80146a0:	f240 2137 	movw	r1, #567	@ 0x237
 80146a4:	483e      	ldr	r0, [pc, #248]	@ (80147a0 <__mdiff+0x124>)
 80146a6:	f000 f96f 	bl	8014988 <__assert_func>
 80146aa:	2301      	movs	r3, #1
 80146ac:	e9c0 3504 	strd	r3, r5, [r0, #16]
 80146b0:	4610      	mov	r0, r2
 80146b2:	b003      	add	sp, #12
 80146b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80146b8:	bfbc      	itt	lt
 80146ba:	464b      	movlt	r3, r9
 80146bc:	46a1      	movlt	r9, r4
 80146be:	4630      	mov	r0, r6
 80146c0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80146c4:	bfba      	itte	lt
 80146c6:	461c      	movlt	r4, r3
 80146c8:	2501      	movlt	r5, #1
 80146ca:	2500      	movge	r5, #0
 80146cc:	f7ff fd48 	bl	8014160 <_Balloc>
 80146d0:	4602      	mov	r2, r0
 80146d2:	b918      	cbnz	r0, 80146dc <__mdiff+0x60>
 80146d4:	4b31      	ldr	r3, [pc, #196]	@ (801479c <__mdiff+0x120>)
 80146d6:	f240 2145 	movw	r1, #581	@ 0x245
 80146da:	e7e3      	b.n	80146a4 <__mdiff+0x28>
 80146dc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80146e0:	6926      	ldr	r6, [r4, #16]
 80146e2:	60c5      	str	r5, [r0, #12]
 80146e4:	f109 0310 	add.w	r3, r9, #16
 80146e8:	f109 0514 	add.w	r5, r9, #20
 80146ec:	f104 0e14 	add.w	lr, r4, #20
 80146f0:	f100 0b14 	add.w	fp, r0, #20
 80146f4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80146f8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80146fc:	9301      	str	r3, [sp, #4]
 80146fe:	46d9      	mov	r9, fp
 8014700:	f04f 0c00 	mov.w	ip, #0
 8014704:	9b01      	ldr	r3, [sp, #4]
 8014706:	f85e 0b04 	ldr.w	r0, [lr], #4
 801470a:	f853 af04 	ldr.w	sl, [r3, #4]!
 801470e:	9301      	str	r3, [sp, #4]
 8014710:	fa1f f38a 	uxth.w	r3, sl
 8014714:	4619      	mov	r1, r3
 8014716:	b283      	uxth	r3, r0
 8014718:	1acb      	subs	r3, r1, r3
 801471a:	0c00      	lsrs	r0, r0, #16
 801471c:	4463      	add	r3, ip
 801471e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8014722:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8014726:	b29b      	uxth	r3, r3
 8014728:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 801472c:	4576      	cmp	r6, lr
 801472e:	f849 3b04 	str.w	r3, [r9], #4
 8014732:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014736:	d8e5      	bhi.n	8014704 <__mdiff+0x88>
 8014738:	1b33      	subs	r3, r6, r4
 801473a:	3b15      	subs	r3, #21
 801473c:	f023 0303 	bic.w	r3, r3, #3
 8014740:	3415      	adds	r4, #21
 8014742:	3304      	adds	r3, #4
 8014744:	42a6      	cmp	r6, r4
 8014746:	bf38      	it	cc
 8014748:	2304      	movcc	r3, #4
 801474a:	441d      	add	r5, r3
 801474c:	445b      	add	r3, fp
 801474e:	461e      	mov	r6, r3
 8014750:	462c      	mov	r4, r5
 8014752:	4544      	cmp	r4, r8
 8014754:	d30e      	bcc.n	8014774 <__mdiff+0xf8>
 8014756:	f108 0103 	add.w	r1, r8, #3
 801475a:	1b49      	subs	r1, r1, r5
 801475c:	f021 0103 	bic.w	r1, r1, #3
 8014760:	3d03      	subs	r5, #3
 8014762:	45a8      	cmp	r8, r5
 8014764:	bf38      	it	cc
 8014766:	2100      	movcc	r1, #0
 8014768:	440b      	add	r3, r1
 801476a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 801476e:	b191      	cbz	r1, 8014796 <__mdiff+0x11a>
 8014770:	6117      	str	r7, [r2, #16]
 8014772:	e79d      	b.n	80146b0 <__mdiff+0x34>
 8014774:	f854 1b04 	ldr.w	r1, [r4], #4
 8014778:	46e6      	mov	lr, ip
 801477a:	0c08      	lsrs	r0, r1, #16
 801477c:	fa1c fc81 	uxtah	ip, ip, r1
 8014780:	4471      	add	r1, lr
 8014782:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8014786:	b289      	uxth	r1, r1
 8014788:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801478c:	f846 1b04 	str.w	r1, [r6], #4
 8014790:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8014794:	e7dd      	b.n	8014752 <__mdiff+0xd6>
 8014796:	3f01      	subs	r7, #1
 8014798:	e7e7      	b.n	801476a <__mdiff+0xee>
 801479a:	bf00      	nop
 801479c:	080289cc 	.word	0x080289cc
 80147a0:	080289dd 	.word	0x080289dd

080147a4 <__d2b>:
 80147a4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 80147a8:	460f      	mov	r7, r1
 80147aa:	2101      	movs	r1, #1
 80147ac:	ec59 8b10 	vmov	r8, r9, d0
 80147b0:	4616      	mov	r6, r2
 80147b2:	f7ff fcd5 	bl	8014160 <_Balloc>
 80147b6:	4604      	mov	r4, r0
 80147b8:	b930      	cbnz	r0, 80147c8 <__d2b+0x24>
 80147ba:	4602      	mov	r2, r0
 80147bc:	4b23      	ldr	r3, [pc, #140]	@ (801484c <__d2b+0xa8>)
 80147be:	4824      	ldr	r0, [pc, #144]	@ (8014850 <__d2b+0xac>)
 80147c0:	f240 310f 	movw	r1, #783	@ 0x30f
 80147c4:	f000 f8e0 	bl	8014988 <__assert_func>
 80147c8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80147cc:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80147d0:	b10d      	cbz	r5, 80147d6 <__d2b+0x32>
 80147d2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80147d6:	9301      	str	r3, [sp, #4]
 80147d8:	f1b8 0300 	subs.w	r3, r8, #0
 80147dc:	d023      	beq.n	8014826 <__d2b+0x82>
 80147de:	4668      	mov	r0, sp
 80147e0:	9300      	str	r3, [sp, #0]
 80147e2:	f7ff fd84 	bl	80142ee <__lo0bits>
 80147e6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80147ea:	b1d0      	cbz	r0, 8014822 <__d2b+0x7e>
 80147ec:	f1c0 0320 	rsb	r3, r0, #32
 80147f0:	fa02 f303 	lsl.w	r3, r2, r3
 80147f4:	430b      	orrs	r3, r1
 80147f6:	40c2      	lsrs	r2, r0
 80147f8:	6163      	str	r3, [r4, #20]
 80147fa:	9201      	str	r2, [sp, #4]
 80147fc:	9b01      	ldr	r3, [sp, #4]
 80147fe:	61a3      	str	r3, [r4, #24]
 8014800:	2b00      	cmp	r3, #0
 8014802:	bf0c      	ite	eq
 8014804:	2201      	moveq	r2, #1
 8014806:	2202      	movne	r2, #2
 8014808:	6122      	str	r2, [r4, #16]
 801480a:	b1a5      	cbz	r5, 8014836 <__d2b+0x92>
 801480c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8014810:	4405      	add	r5, r0
 8014812:	603d      	str	r5, [r7, #0]
 8014814:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8014818:	6030      	str	r0, [r6, #0]
 801481a:	4620      	mov	r0, r4
 801481c:	b003      	add	sp, #12
 801481e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8014822:	6161      	str	r1, [r4, #20]
 8014824:	e7ea      	b.n	80147fc <__d2b+0x58>
 8014826:	a801      	add	r0, sp, #4
 8014828:	f7ff fd61 	bl	80142ee <__lo0bits>
 801482c:	9b01      	ldr	r3, [sp, #4]
 801482e:	6163      	str	r3, [r4, #20]
 8014830:	3020      	adds	r0, #32
 8014832:	2201      	movs	r2, #1
 8014834:	e7e8      	b.n	8014808 <__d2b+0x64>
 8014836:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 801483a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 801483e:	6038      	str	r0, [r7, #0]
 8014840:	6918      	ldr	r0, [r3, #16]
 8014842:	f7ff fd35 	bl	80142b0 <__hi0bits>
 8014846:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 801484a:	e7e5      	b.n	8014818 <__d2b+0x74>
 801484c:	080289cc 	.word	0x080289cc
 8014850:	080289dd 	.word	0x080289dd

08014854 <__sread>:
 8014854:	b510      	push	{r4, lr}
 8014856:	460c      	mov	r4, r1
 8014858:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801485c:	f000 f850 	bl	8014900 <_read_r>
 8014860:	2800      	cmp	r0, #0
 8014862:	bfab      	itete	ge
 8014864:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8014866:	89a3      	ldrhlt	r3, [r4, #12]
 8014868:	181b      	addge	r3, r3, r0
 801486a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801486e:	bfac      	ite	ge
 8014870:	6563      	strge	r3, [r4, #84]	@ 0x54
 8014872:	81a3      	strhlt	r3, [r4, #12]
 8014874:	bd10      	pop	{r4, pc}

08014876 <__swrite>:
 8014876:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801487a:	461f      	mov	r7, r3
 801487c:	898b      	ldrh	r3, [r1, #12]
 801487e:	05db      	lsls	r3, r3, #23
 8014880:	4605      	mov	r5, r0
 8014882:	460c      	mov	r4, r1
 8014884:	4616      	mov	r6, r2
 8014886:	d505      	bpl.n	8014894 <__swrite+0x1e>
 8014888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801488c:	2302      	movs	r3, #2
 801488e:	2200      	movs	r2, #0
 8014890:	f000 f824 	bl	80148dc <_lseek_r>
 8014894:	89a3      	ldrh	r3, [r4, #12]
 8014896:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801489a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801489e:	81a3      	strh	r3, [r4, #12]
 80148a0:	4632      	mov	r2, r6
 80148a2:	463b      	mov	r3, r7
 80148a4:	4628      	mov	r0, r5
 80148a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80148aa:	f000 b84b 	b.w	8014944 <_write_r>

080148ae <__sseek>:
 80148ae:	b510      	push	{r4, lr}
 80148b0:	460c      	mov	r4, r1
 80148b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148b6:	f000 f811 	bl	80148dc <_lseek_r>
 80148ba:	1c43      	adds	r3, r0, #1
 80148bc:	89a3      	ldrh	r3, [r4, #12]
 80148be:	bf15      	itete	ne
 80148c0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80148c2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80148c6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80148ca:	81a3      	strheq	r3, [r4, #12]
 80148cc:	bf18      	it	ne
 80148ce:	81a3      	strhne	r3, [r4, #12]
 80148d0:	bd10      	pop	{r4, pc}

080148d2 <__sclose>:
 80148d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80148d6:	f000 b847 	b.w	8014968 <_close_r>
	...

080148dc <_lseek_r>:
 80148dc:	b538      	push	{r3, r4, r5, lr}
 80148de:	4d07      	ldr	r5, [pc, #28]	@ (80148fc <_lseek_r+0x20>)
 80148e0:	4604      	mov	r4, r0
 80148e2:	4608      	mov	r0, r1
 80148e4:	4611      	mov	r1, r2
 80148e6:	2200      	movs	r2, #0
 80148e8:	602a      	str	r2, [r5, #0]
 80148ea:	461a      	mov	r2, r3
 80148ec:	f7ee fe9a 	bl	8003624 <_lseek>
 80148f0:	1c43      	adds	r3, r0, #1
 80148f2:	d102      	bne.n	80148fa <_lseek_r+0x1e>
 80148f4:	682b      	ldr	r3, [r5, #0]
 80148f6:	b103      	cbz	r3, 80148fa <_lseek_r+0x1e>
 80148f8:	6023      	str	r3, [r4, #0]
 80148fa:	bd38      	pop	{r3, r4, r5, pc}
 80148fc:	2400b8a8 	.word	0x2400b8a8

08014900 <_read_r>:
 8014900:	b538      	push	{r3, r4, r5, lr}
 8014902:	4d07      	ldr	r5, [pc, #28]	@ (8014920 <_read_r+0x20>)
 8014904:	4604      	mov	r4, r0
 8014906:	4608      	mov	r0, r1
 8014908:	4611      	mov	r1, r2
 801490a:	2200      	movs	r2, #0
 801490c:	602a      	str	r2, [r5, #0]
 801490e:	461a      	mov	r2, r3
 8014910:	f7ee fe44 	bl	800359c <_read>
 8014914:	1c43      	adds	r3, r0, #1
 8014916:	d102      	bne.n	801491e <_read_r+0x1e>
 8014918:	682b      	ldr	r3, [r5, #0]
 801491a:	b103      	cbz	r3, 801491e <_read_r+0x1e>
 801491c:	6023      	str	r3, [r4, #0]
 801491e:	bd38      	pop	{r3, r4, r5, pc}
 8014920:	2400b8a8 	.word	0x2400b8a8

08014924 <_sbrk_r>:
 8014924:	b538      	push	{r3, r4, r5, lr}
 8014926:	4d06      	ldr	r5, [pc, #24]	@ (8014940 <_sbrk_r+0x1c>)
 8014928:	2300      	movs	r3, #0
 801492a:	4604      	mov	r4, r0
 801492c:	4608      	mov	r0, r1
 801492e:	602b      	str	r3, [r5, #0]
 8014930:	f7ee fe86 	bl	8003640 <_sbrk>
 8014934:	1c43      	adds	r3, r0, #1
 8014936:	d102      	bne.n	801493e <_sbrk_r+0x1a>
 8014938:	682b      	ldr	r3, [r5, #0]
 801493a:	b103      	cbz	r3, 801493e <_sbrk_r+0x1a>
 801493c:	6023      	str	r3, [r4, #0]
 801493e:	bd38      	pop	{r3, r4, r5, pc}
 8014940:	2400b8a8 	.word	0x2400b8a8

08014944 <_write_r>:
 8014944:	b538      	push	{r3, r4, r5, lr}
 8014946:	4d07      	ldr	r5, [pc, #28]	@ (8014964 <_write_r+0x20>)
 8014948:	4604      	mov	r4, r0
 801494a:	4608      	mov	r0, r1
 801494c:	4611      	mov	r1, r2
 801494e:	2200      	movs	r2, #0
 8014950:	602a      	str	r2, [r5, #0]
 8014952:	461a      	mov	r2, r3
 8014954:	f7ed fe1b 	bl	800258e <_write>
 8014958:	1c43      	adds	r3, r0, #1
 801495a:	d102      	bne.n	8014962 <_write_r+0x1e>
 801495c:	682b      	ldr	r3, [r5, #0]
 801495e:	b103      	cbz	r3, 8014962 <_write_r+0x1e>
 8014960:	6023      	str	r3, [r4, #0]
 8014962:	bd38      	pop	{r3, r4, r5, pc}
 8014964:	2400b8a8 	.word	0x2400b8a8

08014968 <_close_r>:
 8014968:	b538      	push	{r3, r4, r5, lr}
 801496a:	4d06      	ldr	r5, [pc, #24]	@ (8014984 <_close_r+0x1c>)
 801496c:	2300      	movs	r3, #0
 801496e:	4604      	mov	r4, r0
 8014970:	4608      	mov	r0, r1
 8014972:	602b      	str	r3, [r5, #0]
 8014974:	f7ee fe2f 	bl	80035d6 <_close>
 8014978:	1c43      	adds	r3, r0, #1
 801497a:	d102      	bne.n	8014982 <_close_r+0x1a>
 801497c:	682b      	ldr	r3, [r5, #0]
 801497e:	b103      	cbz	r3, 8014982 <_close_r+0x1a>
 8014980:	6023      	str	r3, [r4, #0]
 8014982:	bd38      	pop	{r3, r4, r5, pc}
 8014984:	2400b8a8 	.word	0x2400b8a8

08014988 <__assert_func>:
 8014988:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801498a:	4614      	mov	r4, r2
 801498c:	461a      	mov	r2, r3
 801498e:	4b09      	ldr	r3, [pc, #36]	@ (80149b4 <__assert_func+0x2c>)
 8014990:	681b      	ldr	r3, [r3, #0]
 8014992:	4605      	mov	r5, r0
 8014994:	68d8      	ldr	r0, [r3, #12]
 8014996:	b14c      	cbz	r4, 80149ac <__assert_func+0x24>
 8014998:	4b07      	ldr	r3, [pc, #28]	@ (80149b8 <__assert_func+0x30>)
 801499a:	9100      	str	r1, [sp, #0]
 801499c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80149a0:	4906      	ldr	r1, [pc, #24]	@ (80149bc <__assert_func+0x34>)
 80149a2:	462b      	mov	r3, r5
 80149a4:	f000 f87e 	bl	8014aa4 <fiprintf>
 80149a8:	f000 f89b 	bl	8014ae2 <abort>
 80149ac:	4b04      	ldr	r3, [pc, #16]	@ (80149c0 <__assert_func+0x38>)
 80149ae:	461c      	mov	r4, r3
 80149b0:	e7f3      	b.n	801499a <__assert_func+0x12>
 80149b2:	bf00      	nop
 80149b4:	24000490 	.word	0x24000490
 80149b8:	08028a40 	.word	0x08028a40
 80149bc:	08028a4d 	.word	0x08028a4d
 80149c0:	08028a7b 	.word	0x08028a7b

080149c4 <_calloc_r>:
 80149c4:	b570      	push	{r4, r5, r6, lr}
 80149c6:	fba1 5402 	umull	r5, r4, r1, r2
 80149ca:	b934      	cbnz	r4, 80149da <_calloc_r+0x16>
 80149cc:	4629      	mov	r1, r5
 80149ce:	f7ff fa8f 	bl	8013ef0 <_malloc_r>
 80149d2:	4606      	mov	r6, r0
 80149d4:	b928      	cbnz	r0, 80149e2 <_calloc_r+0x1e>
 80149d6:	4630      	mov	r0, r6
 80149d8:	bd70      	pop	{r4, r5, r6, pc}
 80149da:	220c      	movs	r2, #12
 80149dc:	6002      	str	r2, [r0, #0]
 80149de:	2600      	movs	r6, #0
 80149e0:	e7f9      	b.n	80149d6 <_calloc_r+0x12>
 80149e2:	462a      	mov	r2, r5
 80149e4:	4621      	mov	r1, r4
 80149e6:	f7fe fc2b 	bl	8013240 <memset>
 80149ea:	e7f4      	b.n	80149d6 <_calloc_r+0x12>

080149ec <_free_r>:
 80149ec:	b538      	push	{r3, r4, r5, lr}
 80149ee:	4605      	mov	r5, r0
 80149f0:	2900      	cmp	r1, #0
 80149f2:	d041      	beq.n	8014a78 <_free_r+0x8c>
 80149f4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80149f8:	1f0c      	subs	r4, r1, #4
 80149fa:	2b00      	cmp	r3, #0
 80149fc:	bfb8      	it	lt
 80149fe:	18e4      	addlt	r4, r4, r3
 8014a00:	f7ff fba2 	bl	8014148 <__malloc_lock>
 8014a04:	4a1d      	ldr	r2, [pc, #116]	@ (8014a7c <_free_r+0x90>)
 8014a06:	6813      	ldr	r3, [r2, #0]
 8014a08:	b933      	cbnz	r3, 8014a18 <_free_r+0x2c>
 8014a0a:	6063      	str	r3, [r4, #4]
 8014a0c:	6014      	str	r4, [r2, #0]
 8014a0e:	4628      	mov	r0, r5
 8014a10:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014a14:	f7ff bb9e 	b.w	8014154 <__malloc_unlock>
 8014a18:	42a3      	cmp	r3, r4
 8014a1a:	d908      	bls.n	8014a2e <_free_r+0x42>
 8014a1c:	6820      	ldr	r0, [r4, #0]
 8014a1e:	1821      	adds	r1, r4, r0
 8014a20:	428b      	cmp	r3, r1
 8014a22:	bf01      	itttt	eq
 8014a24:	6819      	ldreq	r1, [r3, #0]
 8014a26:	685b      	ldreq	r3, [r3, #4]
 8014a28:	1809      	addeq	r1, r1, r0
 8014a2a:	6021      	streq	r1, [r4, #0]
 8014a2c:	e7ed      	b.n	8014a0a <_free_r+0x1e>
 8014a2e:	461a      	mov	r2, r3
 8014a30:	685b      	ldr	r3, [r3, #4]
 8014a32:	b10b      	cbz	r3, 8014a38 <_free_r+0x4c>
 8014a34:	42a3      	cmp	r3, r4
 8014a36:	d9fa      	bls.n	8014a2e <_free_r+0x42>
 8014a38:	6811      	ldr	r1, [r2, #0]
 8014a3a:	1850      	adds	r0, r2, r1
 8014a3c:	42a0      	cmp	r0, r4
 8014a3e:	d10b      	bne.n	8014a58 <_free_r+0x6c>
 8014a40:	6820      	ldr	r0, [r4, #0]
 8014a42:	4401      	add	r1, r0
 8014a44:	1850      	adds	r0, r2, r1
 8014a46:	4283      	cmp	r3, r0
 8014a48:	6011      	str	r1, [r2, #0]
 8014a4a:	d1e0      	bne.n	8014a0e <_free_r+0x22>
 8014a4c:	6818      	ldr	r0, [r3, #0]
 8014a4e:	685b      	ldr	r3, [r3, #4]
 8014a50:	6053      	str	r3, [r2, #4]
 8014a52:	4408      	add	r0, r1
 8014a54:	6010      	str	r0, [r2, #0]
 8014a56:	e7da      	b.n	8014a0e <_free_r+0x22>
 8014a58:	d902      	bls.n	8014a60 <_free_r+0x74>
 8014a5a:	230c      	movs	r3, #12
 8014a5c:	602b      	str	r3, [r5, #0]
 8014a5e:	e7d6      	b.n	8014a0e <_free_r+0x22>
 8014a60:	6820      	ldr	r0, [r4, #0]
 8014a62:	1821      	adds	r1, r4, r0
 8014a64:	428b      	cmp	r3, r1
 8014a66:	bf04      	itt	eq
 8014a68:	6819      	ldreq	r1, [r3, #0]
 8014a6a:	685b      	ldreq	r3, [r3, #4]
 8014a6c:	6063      	str	r3, [r4, #4]
 8014a6e:	bf04      	itt	eq
 8014a70:	1809      	addeq	r1, r1, r0
 8014a72:	6021      	streq	r1, [r4, #0]
 8014a74:	6054      	str	r4, [r2, #4]
 8014a76:	e7ca      	b.n	8014a0e <_free_r+0x22>
 8014a78:	bd38      	pop	{r3, r4, r5, pc}
 8014a7a:	bf00      	nop
 8014a7c:	2400b8a4 	.word	0x2400b8a4

08014a80 <__ascii_mbtowc>:
 8014a80:	b082      	sub	sp, #8
 8014a82:	b901      	cbnz	r1, 8014a86 <__ascii_mbtowc+0x6>
 8014a84:	a901      	add	r1, sp, #4
 8014a86:	b142      	cbz	r2, 8014a9a <__ascii_mbtowc+0x1a>
 8014a88:	b14b      	cbz	r3, 8014a9e <__ascii_mbtowc+0x1e>
 8014a8a:	7813      	ldrb	r3, [r2, #0]
 8014a8c:	600b      	str	r3, [r1, #0]
 8014a8e:	7812      	ldrb	r2, [r2, #0]
 8014a90:	1e10      	subs	r0, r2, #0
 8014a92:	bf18      	it	ne
 8014a94:	2001      	movne	r0, #1
 8014a96:	b002      	add	sp, #8
 8014a98:	4770      	bx	lr
 8014a9a:	4610      	mov	r0, r2
 8014a9c:	e7fb      	b.n	8014a96 <__ascii_mbtowc+0x16>
 8014a9e:	f06f 0001 	mvn.w	r0, #1
 8014aa2:	e7f8      	b.n	8014a96 <__ascii_mbtowc+0x16>

08014aa4 <fiprintf>:
 8014aa4:	b40e      	push	{r1, r2, r3}
 8014aa6:	b503      	push	{r0, r1, lr}
 8014aa8:	4601      	mov	r1, r0
 8014aaa:	ab03      	add	r3, sp, #12
 8014aac:	4805      	ldr	r0, [pc, #20]	@ (8014ac4 <fiprintf+0x20>)
 8014aae:	f853 2b04 	ldr.w	r2, [r3], #4
 8014ab2:	6800      	ldr	r0, [r0, #0]
 8014ab4:	9301      	str	r3, [sp, #4]
 8014ab6:	f000 f845 	bl	8014b44 <_vfiprintf_r>
 8014aba:	b002      	add	sp, #8
 8014abc:	f85d eb04 	ldr.w	lr, [sp], #4
 8014ac0:	b003      	add	sp, #12
 8014ac2:	4770      	bx	lr
 8014ac4:	24000490 	.word	0x24000490

08014ac8 <__ascii_wctomb>:
 8014ac8:	4603      	mov	r3, r0
 8014aca:	4608      	mov	r0, r1
 8014acc:	b141      	cbz	r1, 8014ae0 <__ascii_wctomb+0x18>
 8014ace:	2aff      	cmp	r2, #255	@ 0xff
 8014ad0:	d904      	bls.n	8014adc <__ascii_wctomb+0x14>
 8014ad2:	228a      	movs	r2, #138	@ 0x8a
 8014ad4:	601a      	str	r2, [r3, #0]
 8014ad6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014ada:	4770      	bx	lr
 8014adc:	700a      	strb	r2, [r1, #0]
 8014ade:	2001      	movs	r0, #1
 8014ae0:	4770      	bx	lr

08014ae2 <abort>:
 8014ae2:	b508      	push	{r3, lr}
 8014ae4:	2006      	movs	r0, #6
 8014ae6:	f000 fa63 	bl	8014fb0 <raise>
 8014aea:	2001      	movs	r0, #1
 8014aec:	f7ee fd4b 	bl	8003586 <_exit>

08014af0 <__sfputc_r>:
 8014af0:	6893      	ldr	r3, [r2, #8]
 8014af2:	3b01      	subs	r3, #1
 8014af4:	2b00      	cmp	r3, #0
 8014af6:	b410      	push	{r4}
 8014af8:	6093      	str	r3, [r2, #8]
 8014afa:	da08      	bge.n	8014b0e <__sfputc_r+0x1e>
 8014afc:	6994      	ldr	r4, [r2, #24]
 8014afe:	42a3      	cmp	r3, r4
 8014b00:	db01      	blt.n	8014b06 <__sfputc_r+0x16>
 8014b02:	290a      	cmp	r1, #10
 8014b04:	d103      	bne.n	8014b0e <__sfputc_r+0x1e>
 8014b06:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b0a:	f000 b933 	b.w	8014d74 <__swbuf_r>
 8014b0e:	6813      	ldr	r3, [r2, #0]
 8014b10:	1c58      	adds	r0, r3, #1
 8014b12:	6010      	str	r0, [r2, #0]
 8014b14:	7019      	strb	r1, [r3, #0]
 8014b16:	4608      	mov	r0, r1
 8014b18:	f85d 4b04 	ldr.w	r4, [sp], #4
 8014b1c:	4770      	bx	lr

08014b1e <__sfputs_r>:
 8014b1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014b20:	4606      	mov	r6, r0
 8014b22:	460f      	mov	r7, r1
 8014b24:	4614      	mov	r4, r2
 8014b26:	18d5      	adds	r5, r2, r3
 8014b28:	42ac      	cmp	r4, r5
 8014b2a:	d101      	bne.n	8014b30 <__sfputs_r+0x12>
 8014b2c:	2000      	movs	r0, #0
 8014b2e:	e007      	b.n	8014b40 <__sfputs_r+0x22>
 8014b30:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014b34:	463a      	mov	r2, r7
 8014b36:	4630      	mov	r0, r6
 8014b38:	f7ff ffda 	bl	8014af0 <__sfputc_r>
 8014b3c:	1c43      	adds	r3, r0, #1
 8014b3e:	d1f3      	bne.n	8014b28 <__sfputs_r+0xa>
 8014b40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08014b44 <_vfiprintf_r>:
 8014b44:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8014b48:	460d      	mov	r5, r1
 8014b4a:	b09d      	sub	sp, #116	@ 0x74
 8014b4c:	4614      	mov	r4, r2
 8014b4e:	4698      	mov	r8, r3
 8014b50:	4606      	mov	r6, r0
 8014b52:	b118      	cbz	r0, 8014b5c <_vfiprintf_r+0x18>
 8014b54:	6a03      	ldr	r3, [r0, #32]
 8014b56:	b90b      	cbnz	r3, 8014b5c <_vfiprintf_r+0x18>
 8014b58:	f7fe fb3c 	bl	80131d4 <__sinit>
 8014b5c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b5e:	07d9      	lsls	r1, r3, #31
 8014b60:	d405      	bmi.n	8014b6e <_vfiprintf_r+0x2a>
 8014b62:	89ab      	ldrh	r3, [r5, #12]
 8014b64:	059a      	lsls	r2, r3, #22
 8014b66:	d402      	bmi.n	8014b6e <_vfiprintf_r+0x2a>
 8014b68:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b6a:	f7fe fb9c 	bl	80132a6 <__retarget_lock_acquire_recursive>
 8014b6e:	89ab      	ldrh	r3, [r5, #12]
 8014b70:	071b      	lsls	r3, r3, #28
 8014b72:	d501      	bpl.n	8014b78 <_vfiprintf_r+0x34>
 8014b74:	692b      	ldr	r3, [r5, #16]
 8014b76:	b99b      	cbnz	r3, 8014ba0 <_vfiprintf_r+0x5c>
 8014b78:	4629      	mov	r1, r5
 8014b7a:	4630      	mov	r0, r6
 8014b7c:	f000 f938 	bl	8014df0 <__swsetup_r>
 8014b80:	b170      	cbz	r0, 8014ba0 <_vfiprintf_r+0x5c>
 8014b82:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014b84:	07dc      	lsls	r4, r3, #31
 8014b86:	d504      	bpl.n	8014b92 <_vfiprintf_r+0x4e>
 8014b88:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014b8c:	b01d      	add	sp, #116	@ 0x74
 8014b8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8014b92:	89ab      	ldrh	r3, [r5, #12]
 8014b94:	0598      	lsls	r0, r3, #22
 8014b96:	d4f7      	bmi.n	8014b88 <_vfiprintf_r+0x44>
 8014b98:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014b9a:	f7fe fb85 	bl	80132a8 <__retarget_lock_release_recursive>
 8014b9e:	e7f3      	b.n	8014b88 <_vfiprintf_r+0x44>
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ba4:	2320      	movs	r3, #32
 8014ba6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8014baa:	f8cd 800c 	str.w	r8, [sp, #12]
 8014bae:	2330      	movs	r3, #48	@ 0x30
 8014bb0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8014d60 <_vfiprintf_r+0x21c>
 8014bb4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8014bb8:	f04f 0901 	mov.w	r9, #1
 8014bbc:	4623      	mov	r3, r4
 8014bbe:	469a      	mov	sl, r3
 8014bc0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8014bc4:	b10a      	cbz	r2, 8014bca <_vfiprintf_r+0x86>
 8014bc6:	2a25      	cmp	r2, #37	@ 0x25
 8014bc8:	d1f9      	bne.n	8014bbe <_vfiprintf_r+0x7a>
 8014bca:	ebba 0b04 	subs.w	fp, sl, r4
 8014bce:	d00b      	beq.n	8014be8 <_vfiprintf_r+0xa4>
 8014bd0:	465b      	mov	r3, fp
 8014bd2:	4622      	mov	r2, r4
 8014bd4:	4629      	mov	r1, r5
 8014bd6:	4630      	mov	r0, r6
 8014bd8:	f7ff ffa1 	bl	8014b1e <__sfputs_r>
 8014bdc:	3001      	adds	r0, #1
 8014bde:	f000 80a7 	beq.w	8014d30 <_vfiprintf_r+0x1ec>
 8014be2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8014be4:	445a      	add	r2, fp
 8014be6:	9209      	str	r2, [sp, #36]	@ 0x24
 8014be8:	f89a 3000 	ldrb.w	r3, [sl]
 8014bec:	2b00      	cmp	r3, #0
 8014bee:	f000 809f 	beq.w	8014d30 <_vfiprintf_r+0x1ec>
 8014bf2:	2300      	movs	r3, #0
 8014bf4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8014bf8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8014bfc:	f10a 0a01 	add.w	sl, sl, #1
 8014c00:	9304      	str	r3, [sp, #16]
 8014c02:	9307      	str	r3, [sp, #28]
 8014c04:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8014c08:	931a      	str	r3, [sp, #104]	@ 0x68
 8014c0a:	4654      	mov	r4, sl
 8014c0c:	2205      	movs	r2, #5
 8014c0e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014c12:	4853      	ldr	r0, [pc, #332]	@ (8014d60 <_vfiprintf_r+0x21c>)
 8014c14:	f7eb fb64 	bl	80002e0 <memchr>
 8014c18:	9a04      	ldr	r2, [sp, #16]
 8014c1a:	b9d8      	cbnz	r0, 8014c54 <_vfiprintf_r+0x110>
 8014c1c:	06d1      	lsls	r1, r2, #27
 8014c1e:	bf44      	itt	mi
 8014c20:	2320      	movmi	r3, #32
 8014c22:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c26:	0713      	lsls	r3, r2, #28
 8014c28:	bf44      	itt	mi
 8014c2a:	232b      	movmi	r3, #43	@ 0x2b
 8014c2c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8014c30:	f89a 3000 	ldrb.w	r3, [sl]
 8014c34:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c36:	d015      	beq.n	8014c64 <_vfiprintf_r+0x120>
 8014c38:	9a07      	ldr	r2, [sp, #28]
 8014c3a:	4654      	mov	r4, sl
 8014c3c:	2000      	movs	r0, #0
 8014c3e:	f04f 0c0a 	mov.w	ip, #10
 8014c42:	4621      	mov	r1, r4
 8014c44:	f811 3b01 	ldrb.w	r3, [r1], #1
 8014c48:	3b30      	subs	r3, #48	@ 0x30
 8014c4a:	2b09      	cmp	r3, #9
 8014c4c:	d94b      	bls.n	8014ce6 <_vfiprintf_r+0x1a2>
 8014c4e:	b1b0      	cbz	r0, 8014c7e <_vfiprintf_r+0x13a>
 8014c50:	9207      	str	r2, [sp, #28]
 8014c52:	e014      	b.n	8014c7e <_vfiprintf_r+0x13a>
 8014c54:	eba0 0308 	sub.w	r3, r0, r8
 8014c58:	fa09 f303 	lsl.w	r3, r9, r3
 8014c5c:	4313      	orrs	r3, r2
 8014c5e:	9304      	str	r3, [sp, #16]
 8014c60:	46a2      	mov	sl, r4
 8014c62:	e7d2      	b.n	8014c0a <_vfiprintf_r+0xc6>
 8014c64:	9b03      	ldr	r3, [sp, #12]
 8014c66:	1d19      	adds	r1, r3, #4
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	9103      	str	r1, [sp, #12]
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	bfbb      	ittet	lt
 8014c70:	425b      	neglt	r3, r3
 8014c72:	f042 0202 	orrlt.w	r2, r2, #2
 8014c76:	9307      	strge	r3, [sp, #28]
 8014c78:	9307      	strlt	r3, [sp, #28]
 8014c7a:	bfb8      	it	lt
 8014c7c:	9204      	strlt	r2, [sp, #16]
 8014c7e:	7823      	ldrb	r3, [r4, #0]
 8014c80:	2b2e      	cmp	r3, #46	@ 0x2e
 8014c82:	d10a      	bne.n	8014c9a <_vfiprintf_r+0x156>
 8014c84:	7863      	ldrb	r3, [r4, #1]
 8014c86:	2b2a      	cmp	r3, #42	@ 0x2a
 8014c88:	d132      	bne.n	8014cf0 <_vfiprintf_r+0x1ac>
 8014c8a:	9b03      	ldr	r3, [sp, #12]
 8014c8c:	1d1a      	adds	r2, r3, #4
 8014c8e:	681b      	ldr	r3, [r3, #0]
 8014c90:	9203      	str	r2, [sp, #12]
 8014c92:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8014c96:	3402      	adds	r4, #2
 8014c98:	9305      	str	r3, [sp, #20]
 8014c9a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8014d70 <_vfiprintf_r+0x22c>
 8014c9e:	7821      	ldrb	r1, [r4, #0]
 8014ca0:	2203      	movs	r2, #3
 8014ca2:	4650      	mov	r0, sl
 8014ca4:	f7eb fb1c 	bl	80002e0 <memchr>
 8014ca8:	b138      	cbz	r0, 8014cba <_vfiprintf_r+0x176>
 8014caa:	9b04      	ldr	r3, [sp, #16]
 8014cac:	eba0 000a 	sub.w	r0, r0, sl
 8014cb0:	2240      	movs	r2, #64	@ 0x40
 8014cb2:	4082      	lsls	r2, r0
 8014cb4:	4313      	orrs	r3, r2
 8014cb6:	3401      	adds	r4, #1
 8014cb8:	9304      	str	r3, [sp, #16]
 8014cba:	f814 1b01 	ldrb.w	r1, [r4], #1
 8014cbe:	4829      	ldr	r0, [pc, #164]	@ (8014d64 <_vfiprintf_r+0x220>)
 8014cc0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8014cc4:	2206      	movs	r2, #6
 8014cc6:	f7eb fb0b 	bl	80002e0 <memchr>
 8014cca:	2800      	cmp	r0, #0
 8014ccc:	d03f      	beq.n	8014d4e <_vfiprintf_r+0x20a>
 8014cce:	4b26      	ldr	r3, [pc, #152]	@ (8014d68 <_vfiprintf_r+0x224>)
 8014cd0:	bb1b      	cbnz	r3, 8014d1a <_vfiprintf_r+0x1d6>
 8014cd2:	9b03      	ldr	r3, [sp, #12]
 8014cd4:	3307      	adds	r3, #7
 8014cd6:	f023 0307 	bic.w	r3, r3, #7
 8014cda:	3308      	adds	r3, #8
 8014cdc:	9303      	str	r3, [sp, #12]
 8014cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8014ce0:	443b      	add	r3, r7
 8014ce2:	9309      	str	r3, [sp, #36]	@ 0x24
 8014ce4:	e76a      	b.n	8014bbc <_vfiprintf_r+0x78>
 8014ce6:	fb0c 3202 	mla	r2, ip, r2, r3
 8014cea:	460c      	mov	r4, r1
 8014cec:	2001      	movs	r0, #1
 8014cee:	e7a8      	b.n	8014c42 <_vfiprintf_r+0xfe>
 8014cf0:	2300      	movs	r3, #0
 8014cf2:	3401      	adds	r4, #1
 8014cf4:	9305      	str	r3, [sp, #20]
 8014cf6:	4619      	mov	r1, r3
 8014cf8:	f04f 0c0a 	mov.w	ip, #10
 8014cfc:	4620      	mov	r0, r4
 8014cfe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8014d02:	3a30      	subs	r2, #48	@ 0x30
 8014d04:	2a09      	cmp	r2, #9
 8014d06:	d903      	bls.n	8014d10 <_vfiprintf_r+0x1cc>
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d0c6      	beq.n	8014c9a <_vfiprintf_r+0x156>
 8014d0c:	9105      	str	r1, [sp, #20]
 8014d0e:	e7c4      	b.n	8014c9a <_vfiprintf_r+0x156>
 8014d10:	fb0c 2101 	mla	r1, ip, r1, r2
 8014d14:	4604      	mov	r4, r0
 8014d16:	2301      	movs	r3, #1
 8014d18:	e7f0      	b.n	8014cfc <_vfiprintf_r+0x1b8>
 8014d1a:	ab03      	add	r3, sp, #12
 8014d1c:	9300      	str	r3, [sp, #0]
 8014d1e:	462a      	mov	r2, r5
 8014d20:	4b12      	ldr	r3, [pc, #72]	@ (8014d6c <_vfiprintf_r+0x228>)
 8014d22:	a904      	add	r1, sp, #16
 8014d24:	4630      	mov	r0, r6
 8014d26:	f7fd fe23 	bl	8012970 <_printf_float>
 8014d2a:	4607      	mov	r7, r0
 8014d2c:	1c78      	adds	r0, r7, #1
 8014d2e:	d1d6      	bne.n	8014cde <_vfiprintf_r+0x19a>
 8014d30:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8014d32:	07d9      	lsls	r1, r3, #31
 8014d34:	d405      	bmi.n	8014d42 <_vfiprintf_r+0x1fe>
 8014d36:	89ab      	ldrh	r3, [r5, #12]
 8014d38:	059a      	lsls	r2, r3, #22
 8014d3a:	d402      	bmi.n	8014d42 <_vfiprintf_r+0x1fe>
 8014d3c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8014d3e:	f7fe fab3 	bl	80132a8 <__retarget_lock_release_recursive>
 8014d42:	89ab      	ldrh	r3, [r5, #12]
 8014d44:	065b      	lsls	r3, r3, #25
 8014d46:	f53f af1f 	bmi.w	8014b88 <_vfiprintf_r+0x44>
 8014d4a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8014d4c:	e71e      	b.n	8014b8c <_vfiprintf_r+0x48>
 8014d4e:	ab03      	add	r3, sp, #12
 8014d50:	9300      	str	r3, [sp, #0]
 8014d52:	462a      	mov	r2, r5
 8014d54:	4b05      	ldr	r3, [pc, #20]	@ (8014d6c <_vfiprintf_r+0x228>)
 8014d56:	a904      	add	r1, sp, #16
 8014d58:	4630      	mov	r0, r6
 8014d5a:	f7fe f891 	bl	8012e80 <_printf_i>
 8014d5e:	e7e4      	b.n	8014d2a <_vfiprintf_r+0x1e6>
 8014d60:	08028a7c 	.word	0x08028a7c
 8014d64:	08028a86 	.word	0x08028a86
 8014d68:	08012971 	.word	0x08012971
 8014d6c:	08014b1f 	.word	0x08014b1f
 8014d70:	08028a82 	.word	0x08028a82

08014d74 <__swbuf_r>:
 8014d74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8014d76:	460e      	mov	r6, r1
 8014d78:	4614      	mov	r4, r2
 8014d7a:	4605      	mov	r5, r0
 8014d7c:	b118      	cbz	r0, 8014d86 <__swbuf_r+0x12>
 8014d7e:	6a03      	ldr	r3, [r0, #32]
 8014d80:	b90b      	cbnz	r3, 8014d86 <__swbuf_r+0x12>
 8014d82:	f7fe fa27 	bl	80131d4 <__sinit>
 8014d86:	69a3      	ldr	r3, [r4, #24]
 8014d88:	60a3      	str	r3, [r4, #8]
 8014d8a:	89a3      	ldrh	r3, [r4, #12]
 8014d8c:	071a      	lsls	r2, r3, #28
 8014d8e:	d501      	bpl.n	8014d94 <__swbuf_r+0x20>
 8014d90:	6923      	ldr	r3, [r4, #16]
 8014d92:	b943      	cbnz	r3, 8014da6 <__swbuf_r+0x32>
 8014d94:	4621      	mov	r1, r4
 8014d96:	4628      	mov	r0, r5
 8014d98:	f000 f82a 	bl	8014df0 <__swsetup_r>
 8014d9c:	b118      	cbz	r0, 8014da6 <__swbuf_r+0x32>
 8014d9e:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8014da2:	4638      	mov	r0, r7
 8014da4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8014da6:	6823      	ldr	r3, [r4, #0]
 8014da8:	6922      	ldr	r2, [r4, #16]
 8014daa:	1a98      	subs	r0, r3, r2
 8014dac:	6963      	ldr	r3, [r4, #20]
 8014dae:	b2f6      	uxtb	r6, r6
 8014db0:	4283      	cmp	r3, r0
 8014db2:	4637      	mov	r7, r6
 8014db4:	dc05      	bgt.n	8014dc2 <__swbuf_r+0x4e>
 8014db6:	4621      	mov	r1, r4
 8014db8:	4628      	mov	r0, r5
 8014dba:	f7ff f99d 	bl	80140f8 <_fflush_r>
 8014dbe:	2800      	cmp	r0, #0
 8014dc0:	d1ed      	bne.n	8014d9e <__swbuf_r+0x2a>
 8014dc2:	68a3      	ldr	r3, [r4, #8]
 8014dc4:	3b01      	subs	r3, #1
 8014dc6:	60a3      	str	r3, [r4, #8]
 8014dc8:	6823      	ldr	r3, [r4, #0]
 8014dca:	1c5a      	adds	r2, r3, #1
 8014dcc:	6022      	str	r2, [r4, #0]
 8014dce:	701e      	strb	r6, [r3, #0]
 8014dd0:	6962      	ldr	r2, [r4, #20]
 8014dd2:	1c43      	adds	r3, r0, #1
 8014dd4:	429a      	cmp	r2, r3
 8014dd6:	d004      	beq.n	8014de2 <__swbuf_r+0x6e>
 8014dd8:	89a3      	ldrh	r3, [r4, #12]
 8014dda:	07db      	lsls	r3, r3, #31
 8014ddc:	d5e1      	bpl.n	8014da2 <__swbuf_r+0x2e>
 8014dde:	2e0a      	cmp	r6, #10
 8014de0:	d1df      	bne.n	8014da2 <__swbuf_r+0x2e>
 8014de2:	4621      	mov	r1, r4
 8014de4:	4628      	mov	r0, r5
 8014de6:	f7ff f987 	bl	80140f8 <_fflush_r>
 8014dea:	2800      	cmp	r0, #0
 8014dec:	d0d9      	beq.n	8014da2 <__swbuf_r+0x2e>
 8014dee:	e7d6      	b.n	8014d9e <__swbuf_r+0x2a>

08014df0 <__swsetup_r>:
 8014df0:	b538      	push	{r3, r4, r5, lr}
 8014df2:	4b29      	ldr	r3, [pc, #164]	@ (8014e98 <__swsetup_r+0xa8>)
 8014df4:	4605      	mov	r5, r0
 8014df6:	6818      	ldr	r0, [r3, #0]
 8014df8:	460c      	mov	r4, r1
 8014dfa:	b118      	cbz	r0, 8014e04 <__swsetup_r+0x14>
 8014dfc:	6a03      	ldr	r3, [r0, #32]
 8014dfe:	b90b      	cbnz	r3, 8014e04 <__swsetup_r+0x14>
 8014e00:	f7fe f9e8 	bl	80131d4 <__sinit>
 8014e04:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e08:	0719      	lsls	r1, r3, #28
 8014e0a:	d422      	bmi.n	8014e52 <__swsetup_r+0x62>
 8014e0c:	06da      	lsls	r2, r3, #27
 8014e0e:	d407      	bmi.n	8014e20 <__swsetup_r+0x30>
 8014e10:	2209      	movs	r2, #9
 8014e12:	602a      	str	r2, [r5, #0]
 8014e14:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8014e18:	81a3      	strh	r3, [r4, #12]
 8014e1a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014e1e:	e033      	b.n	8014e88 <__swsetup_r+0x98>
 8014e20:	0758      	lsls	r0, r3, #29
 8014e22:	d512      	bpl.n	8014e4a <__swsetup_r+0x5a>
 8014e24:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8014e26:	b141      	cbz	r1, 8014e3a <__swsetup_r+0x4a>
 8014e28:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8014e2c:	4299      	cmp	r1, r3
 8014e2e:	d002      	beq.n	8014e36 <__swsetup_r+0x46>
 8014e30:	4628      	mov	r0, r5
 8014e32:	f7ff fddb 	bl	80149ec <_free_r>
 8014e36:	2300      	movs	r3, #0
 8014e38:	6363      	str	r3, [r4, #52]	@ 0x34
 8014e3a:	89a3      	ldrh	r3, [r4, #12]
 8014e3c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8014e40:	81a3      	strh	r3, [r4, #12]
 8014e42:	2300      	movs	r3, #0
 8014e44:	6063      	str	r3, [r4, #4]
 8014e46:	6923      	ldr	r3, [r4, #16]
 8014e48:	6023      	str	r3, [r4, #0]
 8014e4a:	89a3      	ldrh	r3, [r4, #12]
 8014e4c:	f043 0308 	orr.w	r3, r3, #8
 8014e50:	81a3      	strh	r3, [r4, #12]
 8014e52:	6923      	ldr	r3, [r4, #16]
 8014e54:	b94b      	cbnz	r3, 8014e6a <__swsetup_r+0x7a>
 8014e56:	89a3      	ldrh	r3, [r4, #12]
 8014e58:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8014e5c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014e60:	d003      	beq.n	8014e6a <__swsetup_r+0x7a>
 8014e62:	4621      	mov	r1, r4
 8014e64:	4628      	mov	r0, r5
 8014e66:	f000 f83f 	bl	8014ee8 <__smakebuf_r>
 8014e6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014e6e:	f013 0201 	ands.w	r2, r3, #1
 8014e72:	d00a      	beq.n	8014e8a <__swsetup_r+0x9a>
 8014e74:	2200      	movs	r2, #0
 8014e76:	60a2      	str	r2, [r4, #8]
 8014e78:	6962      	ldr	r2, [r4, #20]
 8014e7a:	4252      	negs	r2, r2
 8014e7c:	61a2      	str	r2, [r4, #24]
 8014e7e:	6922      	ldr	r2, [r4, #16]
 8014e80:	b942      	cbnz	r2, 8014e94 <__swsetup_r+0xa4>
 8014e82:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8014e86:	d1c5      	bne.n	8014e14 <__swsetup_r+0x24>
 8014e88:	bd38      	pop	{r3, r4, r5, pc}
 8014e8a:	0799      	lsls	r1, r3, #30
 8014e8c:	bf58      	it	pl
 8014e8e:	6962      	ldrpl	r2, [r4, #20]
 8014e90:	60a2      	str	r2, [r4, #8]
 8014e92:	e7f4      	b.n	8014e7e <__swsetup_r+0x8e>
 8014e94:	2000      	movs	r0, #0
 8014e96:	e7f7      	b.n	8014e88 <__swsetup_r+0x98>
 8014e98:	24000490 	.word	0x24000490

08014e9c <__swhatbuf_r>:
 8014e9c:	b570      	push	{r4, r5, r6, lr}
 8014e9e:	460c      	mov	r4, r1
 8014ea0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8014ea4:	2900      	cmp	r1, #0
 8014ea6:	b096      	sub	sp, #88	@ 0x58
 8014ea8:	4615      	mov	r5, r2
 8014eaa:	461e      	mov	r6, r3
 8014eac:	da0d      	bge.n	8014eca <__swhatbuf_r+0x2e>
 8014eae:	89a3      	ldrh	r3, [r4, #12]
 8014eb0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8014eb4:	f04f 0100 	mov.w	r1, #0
 8014eb8:	bf14      	ite	ne
 8014eba:	2340      	movne	r3, #64	@ 0x40
 8014ebc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8014ec0:	2000      	movs	r0, #0
 8014ec2:	6031      	str	r1, [r6, #0]
 8014ec4:	602b      	str	r3, [r5, #0]
 8014ec6:	b016      	add	sp, #88	@ 0x58
 8014ec8:	bd70      	pop	{r4, r5, r6, pc}
 8014eca:	466a      	mov	r2, sp
 8014ecc:	f000 f89c 	bl	8015008 <_fstat_r>
 8014ed0:	2800      	cmp	r0, #0
 8014ed2:	dbec      	blt.n	8014eae <__swhatbuf_r+0x12>
 8014ed4:	9901      	ldr	r1, [sp, #4]
 8014ed6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8014eda:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8014ede:	4259      	negs	r1, r3
 8014ee0:	4159      	adcs	r1, r3
 8014ee2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8014ee6:	e7eb      	b.n	8014ec0 <__swhatbuf_r+0x24>

08014ee8 <__smakebuf_r>:
 8014ee8:	898b      	ldrh	r3, [r1, #12]
 8014eea:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8014eec:	079d      	lsls	r5, r3, #30
 8014eee:	4606      	mov	r6, r0
 8014ef0:	460c      	mov	r4, r1
 8014ef2:	d507      	bpl.n	8014f04 <__smakebuf_r+0x1c>
 8014ef4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8014ef8:	6023      	str	r3, [r4, #0]
 8014efa:	6123      	str	r3, [r4, #16]
 8014efc:	2301      	movs	r3, #1
 8014efe:	6163      	str	r3, [r4, #20]
 8014f00:	b003      	add	sp, #12
 8014f02:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8014f04:	ab01      	add	r3, sp, #4
 8014f06:	466a      	mov	r2, sp
 8014f08:	f7ff ffc8 	bl	8014e9c <__swhatbuf_r>
 8014f0c:	9f00      	ldr	r7, [sp, #0]
 8014f0e:	4605      	mov	r5, r0
 8014f10:	4639      	mov	r1, r7
 8014f12:	4630      	mov	r0, r6
 8014f14:	f7fe ffec 	bl	8013ef0 <_malloc_r>
 8014f18:	b948      	cbnz	r0, 8014f2e <__smakebuf_r+0x46>
 8014f1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8014f1e:	059a      	lsls	r2, r3, #22
 8014f20:	d4ee      	bmi.n	8014f00 <__smakebuf_r+0x18>
 8014f22:	f023 0303 	bic.w	r3, r3, #3
 8014f26:	f043 0302 	orr.w	r3, r3, #2
 8014f2a:	81a3      	strh	r3, [r4, #12]
 8014f2c:	e7e2      	b.n	8014ef4 <__smakebuf_r+0xc>
 8014f2e:	89a3      	ldrh	r3, [r4, #12]
 8014f30:	6020      	str	r0, [r4, #0]
 8014f32:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014f36:	81a3      	strh	r3, [r4, #12]
 8014f38:	9b01      	ldr	r3, [sp, #4]
 8014f3a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8014f3e:	b15b      	cbz	r3, 8014f58 <__smakebuf_r+0x70>
 8014f40:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8014f44:	4630      	mov	r0, r6
 8014f46:	f000 f83b 	bl	8014fc0 <_isatty_r>
 8014f4a:	b128      	cbz	r0, 8014f58 <__smakebuf_r+0x70>
 8014f4c:	89a3      	ldrh	r3, [r4, #12]
 8014f4e:	f023 0303 	bic.w	r3, r3, #3
 8014f52:	f043 0301 	orr.w	r3, r3, #1
 8014f56:	81a3      	strh	r3, [r4, #12]
 8014f58:	89a3      	ldrh	r3, [r4, #12]
 8014f5a:	431d      	orrs	r5, r3
 8014f5c:	81a5      	strh	r5, [r4, #12]
 8014f5e:	e7cf      	b.n	8014f00 <__smakebuf_r+0x18>

08014f60 <_raise_r>:
 8014f60:	291f      	cmp	r1, #31
 8014f62:	b538      	push	{r3, r4, r5, lr}
 8014f64:	4605      	mov	r5, r0
 8014f66:	460c      	mov	r4, r1
 8014f68:	d904      	bls.n	8014f74 <_raise_r+0x14>
 8014f6a:	2316      	movs	r3, #22
 8014f6c:	6003      	str	r3, [r0, #0]
 8014f6e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8014f72:	bd38      	pop	{r3, r4, r5, pc}
 8014f74:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8014f76:	b112      	cbz	r2, 8014f7e <_raise_r+0x1e>
 8014f78:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8014f7c:	b94b      	cbnz	r3, 8014f92 <_raise_r+0x32>
 8014f7e:	4628      	mov	r0, r5
 8014f80:	f000 f840 	bl	8015004 <_getpid_r>
 8014f84:	4622      	mov	r2, r4
 8014f86:	4601      	mov	r1, r0
 8014f88:	4628      	mov	r0, r5
 8014f8a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8014f8e:	f000 b827 	b.w	8014fe0 <_kill_r>
 8014f92:	2b01      	cmp	r3, #1
 8014f94:	d00a      	beq.n	8014fac <_raise_r+0x4c>
 8014f96:	1c59      	adds	r1, r3, #1
 8014f98:	d103      	bne.n	8014fa2 <_raise_r+0x42>
 8014f9a:	2316      	movs	r3, #22
 8014f9c:	6003      	str	r3, [r0, #0]
 8014f9e:	2001      	movs	r0, #1
 8014fa0:	e7e7      	b.n	8014f72 <_raise_r+0x12>
 8014fa2:	2100      	movs	r1, #0
 8014fa4:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8014fa8:	4620      	mov	r0, r4
 8014faa:	4798      	blx	r3
 8014fac:	2000      	movs	r0, #0
 8014fae:	e7e0      	b.n	8014f72 <_raise_r+0x12>

08014fb0 <raise>:
 8014fb0:	4b02      	ldr	r3, [pc, #8]	@ (8014fbc <raise+0xc>)
 8014fb2:	4601      	mov	r1, r0
 8014fb4:	6818      	ldr	r0, [r3, #0]
 8014fb6:	f7ff bfd3 	b.w	8014f60 <_raise_r>
 8014fba:	bf00      	nop
 8014fbc:	24000490 	.word	0x24000490

08014fc0 <_isatty_r>:
 8014fc0:	b538      	push	{r3, r4, r5, lr}
 8014fc2:	4d06      	ldr	r5, [pc, #24]	@ (8014fdc <_isatty_r+0x1c>)
 8014fc4:	2300      	movs	r3, #0
 8014fc6:	4604      	mov	r4, r0
 8014fc8:	4608      	mov	r0, r1
 8014fca:	602b      	str	r3, [r5, #0]
 8014fcc:	f7ee fb1f 	bl	800360e <_isatty>
 8014fd0:	1c43      	adds	r3, r0, #1
 8014fd2:	d102      	bne.n	8014fda <_isatty_r+0x1a>
 8014fd4:	682b      	ldr	r3, [r5, #0]
 8014fd6:	b103      	cbz	r3, 8014fda <_isatty_r+0x1a>
 8014fd8:	6023      	str	r3, [r4, #0]
 8014fda:	bd38      	pop	{r3, r4, r5, pc}
 8014fdc:	2400b8a8 	.word	0x2400b8a8

08014fe0 <_kill_r>:
 8014fe0:	b538      	push	{r3, r4, r5, lr}
 8014fe2:	4d07      	ldr	r5, [pc, #28]	@ (8015000 <_kill_r+0x20>)
 8014fe4:	2300      	movs	r3, #0
 8014fe6:	4604      	mov	r4, r0
 8014fe8:	4608      	mov	r0, r1
 8014fea:	4611      	mov	r1, r2
 8014fec:	602b      	str	r3, [r5, #0]
 8014fee:	f7ee faba 	bl	8003566 <_kill>
 8014ff2:	1c43      	adds	r3, r0, #1
 8014ff4:	d102      	bne.n	8014ffc <_kill_r+0x1c>
 8014ff6:	682b      	ldr	r3, [r5, #0]
 8014ff8:	b103      	cbz	r3, 8014ffc <_kill_r+0x1c>
 8014ffa:	6023      	str	r3, [r4, #0]
 8014ffc:	bd38      	pop	{r3, r4, r5, pc}
 8014ffe:	bf00      	nop
 8015000:	2400b8a8 	.word	0x2400b8a8

08015004 <_getpid_r>:
 8015004:	f7ee baa7 	b.w	8003556 <_getpid>

08015008 <_fstat_r>:
 8015008:	b538      	push	{r3, r4, r5, lr}
 801500a:	4d07      	ldr	r5, [pc, #28]	@ (8015028 <_fstat_r+0x20>)
 801500c:	2300      	movs	r3, #0
 801500e:	4604      	mov	r4, r0
 8015010:	4608      	mov	r0, r1
 8015012:	4611      	mov	r1, r2
 8015014:	602b      	str	r3, [r5, #0]
 8015016:	f7ee faea 	bl	80035ee <_fstat>
 801501a:	1c43      	adds	r3, r0, #1
 801501c:	d102      	bne.n	8015024 <_fstat_r+0x1c>
 801501e:	682b      	ldr	r3, [r5, #0]
 8015020:	b103      	cbz	r3, 8015024 <_fstat_r+0x1c>
 8015022:	6023      	str	r3, [r4, #0]
 8015024:	bd38      	pop	{r3, r4, r5, pc}
 8015026:	bf00      	nop
 8015028:	2400b8a8 	.word	0x2400b8a8

0801502c <_init>:
 801502c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801502e:	bf00      	nop
 8015030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8015032:	bc08      	pop	{r3}
 8015034:	469e      	mov	lr, r3
 8015036:	4770      	bx	lr

08015038 <_fini>:
 8015038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801503a:	bf00      	nop
 801503c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801503e:	bc08      	pop	{r3}
 8015040:	469e      	mov	lr, r3
 8015042:	4770      	bx	lr
