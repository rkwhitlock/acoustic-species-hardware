
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a1a4  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000616c  0800a460  0800a460  0000b460  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080105cc  080105cc  00022cf8  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080105cc  080105cc  000115cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080105d4  080105d4  00022cf8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080105d4  080105d4  000115d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080105d8  080105d8  000115d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00010cf8  24000000  080105dc  00012000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000304fc  24010d00  080212d4  00022d00  2**5
                  ALLOC
 10 ._user_heap_stack 00001000  20000000  20000000  00023000  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00022cf8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012c36  00000000  00000000  00022d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000027ce  00000000  00000000  0003595c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b88  00000000  00000000  00038130  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008b1  00000000  00000000  00038cb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000418ee  00000000  00000000  00039569  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010a2a  00000000  00000000  0007ae57  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001a3e7d  00000000  00000000  0008b881  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000086  00000000  00000000  0022f6fe  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000035a4  00000000  00000000  0022f784  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00232d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24010d00 	.word	0x24010d00
 80002bc:	00000000 	.word	0x00000000
 80002c0:	0800a42c 	.word	0x0800a42c

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24010d04 	.word	0x24010d04
 80002dc:	0800a42c 	.word	0x0800a42c

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <__aeabi_uldivmod>:
 8000380:	b953      	cbnz	r3, 8000398 <__aeabi_uldivmod+0x18>
 8000382:	b94a      	cbnz	r2, 8000398 <__aeabi_uldivmod+0x18>
 8000384:	2900      	cmp	r1, #0
 8000386:	bf08      	it	eq
 8000388:	2800      	cmpeq	r0, #0
 800038a:	bf1c      	itt	ne
 800038c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000390:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000394:	f000 b988 	b.w	80006a8 <__aeabi_idiv0>
 8000398:	f1ad 0c08 	sub.w	ip, sp, #8
 800039c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003a0:	f000 f806 	bl	80003b0 <__udivmoddi4>
 80003a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003ac:	b004      	add	sp, #16
 80003ae:	4770      	bx	lr

080003b0 <__udivmoddi4>:
 80003b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003b4:	9d08      	ldr	r5, [sp, #32]
 80003b6:	468e      	mov	lr, r1
 80003b8:	4604      	mov	r4, r0
 80003ba:	4688      	mov	r8, r1
 80003bc:	2b00      	cmp	r3, #0
 80003be:	d14a      	bne.n	8000456 <__udivmoddi4+0xa6>
 80003c0:	428a      	cmp	r2, r1
 80003c2:	4617      	mov	r7, r2
 80003c4:	d962      	bls.n	800048c <__udivmoddi4+0xdc>
 80003c6:	fab2 f682 	clz	r6, r2
 80003ca:	b14e      	cbz	r6, 80003e0 <__udivmoddi4+0x30>
 80003cc:	f1c6 0320 	rsb	r3, r6, #32
 80003d0:	fa01 f806 	lsl.w	r8, r1, r6
 80003d4:	fa20 f303 	lsr.w	r3, r0, r3
 80003d8:	40b7      	lsls	r7, r6
 80003da:	ea43 0808 	orr.w	r8, r3, r8
 80003de:	40b4      	lsls	r4, r6
 80003e0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003e4:	fa1f fc87 	uxth.w	ip, r7
 80003e8:	fbb8 f1fe 	udiv	r1, r8, lr
 80003ec:	0c23      	lsrs	r3, r4, #16
 80003ee:	fb0e 8811 	mls	r8, lr, r1, r8
 80003f2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003f6:	fb01 f20c 	mul.w	r2, r1, ip
 80003fa:	429a      	cmp	r2, r3
 80003fc:	d909      	bls.n	8000412 <__udivmoddi4+0x62>
 80003fe:	18fb      	adds	r3, r7, r3
 8000400:	f101 30ff 	add.w	r0, r1, #4294967295	@ 0xffffffff
 8000404:	f080 80ea 	bcs.w	80005dc <__udivmoddi4+0x22c>
 8000408:	429a      	cmp	r2, r3
 800040a:	f240 80e7 	bls.w	80005dc <__udivmoddi4+0x22c>
 800040e:	3902      	subs	r1, #2
 8000410:	443b      	add	r3, r7
 8000412:	1a9a      	subs	r2, r3, r2
 8000414:	b2a3      	uxth	r3, r4
 8000416:	fbb2 f0fe 	udiv	r0, r2, lr
 800041a:	fb0e 2210 	mls	r2, lr, r0, r2
 800041e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000422:	fb00 fc0c 	mul.w	ip, r0, ip
 8000426:	459c      	cmp	ip, r3
 8000428:	d909      	bls.n	800043e <__udivmoddi4+0x8e>
 800042a:	18fb      	adds	r3, r7, r3
 800042c:	f100 32ff 	add.w	r2, r0, #4294967295	@ 0xffffffff
 8000430:	f080 80d6 	bcs.w	80005e0 <__udivmoddi4+0x230>
 8000434:	459c      	cmp	ip, r3
 8000436:	f240 80d3 	bls.w	80005e0 <__udivmoddi4+0x230>
 800043a:	443b      	add	r3, r7
 800043c:	3802      	subs	r0, #2
 800043e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000442:	eba3 030c 	sub.w	r3, r3, ip
 8000446:	2100      	movs	r1, #0
 8000448:	b11d      	cbz	r5, 8000452 <__udivmoddi4+0xa2>
 800044a:	40f3      	lsrs	r3, r6
 800044c:	2200      	movs	r2, #0
 800044e:	e9c5 3200 	strd	r3, r2, [r5]
 8000452:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000456:	428b      	cmp	r3, r1
 8000458:	d905      	bls.n	8000466 <__udivmoddi4+0xb6>
 800045a:	b10d      	cbz	r5, 8000460 <__udivmoddi4+0xb0>
 800045c:	e9c5 0100 	strd	r0, r1, [r5]
 8000460:	2100      	movs	r1, #0
 8000462:	4608      	mov	r0, r1
 8000464:	e7f5      	b.n	8000452 <__udivmoddi4+0xa2>
 8000466:	fab3 f183 	clz	r1, r3
 800046a:	2900      	cmp	r1, #0
 800046c:	d146      	bne.n	80004fc <__udivmoddi4+0x14c>
 800046e:	4573      	cmp	r3, lr
 8000470:	d302      	bcc.n	8000478 <__udivmoddi4+0xc8>
 8000472:	4282      	cmp	r2, r0
 8000474:	f200 8105 	bhi.w	8000682 <__udivmoddi4+0x2d2>
 8000478:	1a84      	subs	r4, r0, r2
 800047a:	eb6e 0203 	sbc.w	r2, lr, r3
 800047e:	2001      	movs	r0, #1
 8000480:	4690      	mov	r8, r2
 8000482:	2d00      	cmp	r5, #0
 8000484:	d0e5      	beq.n	8000452 <__udivmoddi4+0xa2>
 8000486:	e9c5 4800 	strd	r4, r8, [r5]
 800048a:	e7e2      	b.n	8000452 <__udivmoddi4+0xa2>
 800048c:	2a00      	cmp	r2, #0
 800048e:	f000 8090 	beq.w	80005b2 <__udivmoddi4+0x202>
 8000492:	fab2 f682 	clz	r6, r2
 8000496:	2e00      	cmp	r6, #0
 8000498:	f040 80a4 	bne.w	80005e4 <__udivmoddi4+0x234>
 800049c:	1a8a      	subs	r2, r1, r2
 800049e:	0c03      	lsrs	r3, r0, #16
 80004a0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004a4:	b280      	uxth	r0, r0
 80004a6:	b2bc      	uxth	r4, r7
 80004a8:	2101      	movs	r1, #1
 80004aa:	fbb2 fcfe 	udiv	ip, r2, lr
 80004ae:	fb0e 221c 	mls	r2, lr, ip, r2
 80004b2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80004b6:	fb04 f20c 	mul.w	r2, r4, ip
 80004ba:	429a      	cmp	r2, r3
 80004bc:	d907      	bls.n	80004ce <__udivmoddi4+0x11e>
 80004be:	18fb      	adds	r3, r7, r3
 80004c0:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 80004c4:	d202      	bcs.n	80004cc <__udivmoddi4+0x11c>
 80004c6:	429a      	cmp	r2, r3
 80004c8:	f200 80e0 	bhi.w	800068c <__udivmoddi4+0x2dc>
 80004cc:	46c4      	mov	ip, r8
 80004ce:	1a9b      	subs	r3, r3, r2
 80004d0:	fbb3 f2fe 	udiv	r2, r3, lr
 80004d4:	fb0e 3312 	mls	r3, lr, r2, r3
 80004d8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80004dc:	fb02 f404 	mul.w	r4, r2, r4
 80004e0:	429c      	cmp	r4, r3
 80004e2:	d907      	bls.n	80004f4 <__udivmoddi4+0x144>
 80004e4:	18fb      	adds	r3, r7, r3
 80004e6:	f102 30ff 	add.w	r0, r2, #4294967295	@ 0xffffffff
 80004ea:	d202      	bcs.n	80004f2 <__udivmoddi4+0x142>
 80004ec:	429c      	cmp	r4, r3
 80004ee:	f200 80ca 	bhi.w	8000686 <__udivmoddi4+0x2d6>
 80004f2:	4602      	mov	r2, r0
 80004f4:	1b1b      	subs	r3, r3, r4
 80004f6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80004fa:	e7a5      	b.n	8000448 <__udivmoddi4+0x98>
 80004fc:	f1c1 0620 	rsb	r6, r1, #32
 8000500:	408b      	lsls	r3, r1
 8000502:	fa22 f706 	lsr.w	r7, r2, r6
 8000506:	431f      	orrs	r7, r3
 8000508:	fa0e f401 	lsl.w	r4, lr, r1
 800050c:	fa20 f306 	lsr.w	r3, r0, r6
 8000510:	fa2e fe06 	lsr.w	lr, lr, r6
 8000514:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000518:	4323      	orrs	r3, r4
 800051a:	fa00 f801 	lsl.w	r8, r0, r1
 800051e:	fa1f fc87 	uxth.w	ip, r7
 8000522:	fbbe f0f9 	udiv	r0, lr, r9
 8000526:	0c1c      	lsrs	r4, r3, #16
 8000528:	fb09 ee10 	mls	lr, r9, r0, lr
 800052c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000530:	fb00 fe0c 	mul.w	lr, r0, ip
 8000534:	45a6      	cmp	lr, r4
 8000536:	fa02 f201 	lsl.w	r2, r2, r1
 800053a:	d909      	bls.n	8000550 <__udivmoddi4+0x1a0>
 800053c:	193c      	adds	r4, r7, r4
 800053e:	f100 3aff 	add.w	sl, r0, #4294967295	@ 0xffffffff
 8000542:	f080 809c 	bcs.w	800067e <__udivmoddi4+0x2ce>
 8000546:	45a6      	cmp	lr, r4
 8000548:	f240 8099 	bls.w	800067e <__udivmoddi4+0x2ce>
 800054c:	3802      	subs	r0, #2
 800054e:	443c      	add	r4, r7
 8000550:	eba4 040e 	sub.w	r4, r4, lr
 8000554:	fa1f fe83 	uxth.w	lr, r3
 8000558:	fbb4 f3f9 	udiv	r3, r4, r9
 800055c:	fb09 4413 	mls	r4, r9, r3, r4
 8000560:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000564:	fb03 fc0c 	mul.w	ip, r3, ip
 8000568:	45a4      	cmp	ip, r4
 800056a:	d908      	bls.n	800057e <__udivmoddi4+0x1ce>
 800056c:	193c      	adds	r4, r7, r4
 800056e:	f103 3eff 	add.w	lr, r3, #4294967295	@ 0xffffffff
 8000572:	f080 8082 	bcs.w	800067a <__udivmoddi4+0x2ca>
 8000576:	45a4      	cmp	ip, r4
 8000578:	d97f      	bls.n	800067a <__udivmoddi4+0x2ca>
 800057a:	3b02      	subs	r3, #2
 800057c:	443c      	add	r4, r7
 800057e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000582:	eba4 040c 	sub.w	r4, r4, ip
 8000586:	fba0 ec02 	umull	lr, ip, r0, r2
 800058a:	4564      	cmp	r4, ip
 800058c:	4673      	mov	r3, lr
 800058e:	46e1      	mov	r9, ip
 8000590:	d362      	bcc.n	8000658 <__udivmoddi4+0x2a8>
 8000592:	d05f      	beq.n	8000654 <__udivmoddi4+0x2a4>
 8000594:	b15d      	cbz	r5, 80005ae <__udivmoddi4+0x1fe>
 8000596:	ebb8 0203 	subs.w	r2, r8, r3
 800059a:	eb64 0409 	sbc.w	r4, r4, r9
 800059e:	fa04 f606 	lsl.w	r6, r4, r6
 80005a2:	fa22 f301 	lsr.w	r3, r2, r1
 80005a6:	431e      	orrs	r6, r3
 80005a8:	40cc      	lsrs	r4, r1
 80005aa:	e9c5 6400 	strd	r6, r4, [r5]
 80005ae:	2100      	movs	r1, #0
 80005b0:	e74f      	b.n	8000452 <__udivmoddi4+0xa2>
 80005b2:	fbb1 fcf2 	udiv	ip, r1, r2
 80005b6:	0c01      	lsrs	r1, r0, #16
 80005b8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80005bc:	b280      	uxth	r0, r0
 80005be:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80005c2:	463b      	mov	r3, r7
 80005c4:	4638      	mov	r0, r7
 80005c6:	463c      	mov	r4, r7
 80005c8:	46b8      	mov	r8, r7
 80005ca:	46be      	mov	lr, r7
 80005cc:	2620      	movs	r6, #32
 80005ce:	fbb1 f1f7 	udiv	r1, r1, r7
 80005d2:	eba2 0208 	sub.w	r2, r2, r8
 80005d6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80005da:	e766      	b.n	80004aa <__udivmoddi4+0xfa>
 80005dc:	4601      	mov	r1, r0
 80005de:	e718      	b.n	8000412 <__udivmoddi4+0x62>
 80005e0:	4610      	mov	r0, r2
 80005e2:	e72c      	b.n	800043e <__udivmoddi4+0x8e>
 80005e4:	f1c6 0220 	rsb	r2, r6, #32
 80005e8:	fa2e f302 	lsr.w	r3, lr, r2
 80005ec:	40b7      	lsls	r7, r6
 80005ee:	40b1      	lsls	r1, r6
 80005f0:	fa20 f202 	lsr.w	r2, r0, r2
 80005f4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80005f8:	430a      	orrs	r2, r1
 80005fa:	fbb3 f8fe 	udiv	r8, r3, lr
 80005fe:	b2bc      	uxth	r4, r7
 8000600:	fb0e 3318 	mls	r3, lr, r8, r3
 8000604:	0c11      	lsrs	r1, r2, #16
 8000606:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800060a:	fb08 f904 	mul.w	r9, r8, r4
 800060e:	40b0      	lsls	r0, r6
 8000610:	4589      	cmp	r9, r1
 8000612:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000616:	b280      	uxth	r0, r0
 8000618:	d93e      	bls.n	8000698 <__udivmoddi4+0x2e8>
 800061a:	1879      	adds	r1, r7, r1
 800061c:	f108 3cff 	add.w	ip, r8, #4294967295	@ 0xffffffff
 8000620:	d201      	bcs.n	8000626 <__udivmoddi4+0x276>
 8000622:	4589      	cmp	r9, r1
 8000624:	d81f      	bhi.n	8000666 <__udivmoddi4+0x2b6>
 8000626:	eba1 0109 	sub.w	r1, r1, r9
 800062a:	fbb1 f9fe 	udiv	r9, r1, lr
 800062e:	fb09 f804 	mul.w	r8, r9, r4
 8000632:	fb0e 1119 	mls	r1, lr, r9, r1
 8000636:	b292      	uxth	r2, r2
 8000638:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800063c:	4542      	cmp	r2, r8
 800063e:	d229      	bcs.n	8000694 <__udivmoddi4+0x2e4>
 8000640:	18ba      	adds	r2, r7, r2
 8000642:	f109 31ff 	add.w	r1, r9, #4294967295	@ 0xffffffff
 8000646:	d2c4      	bcs.n	80005d2 <__udivmoddi4+0x222>
 8000648:	4542      	cmp	r2, r8
 800064a:	d2c2      	bcs.n	80005d2 <__udivmoddi4+0x222>
 800064c:	f1a9 0102 	sub.w	r1, r9, #2
 8000650:	443a      	add	r2, r7
 8000652:	e7be      	b.n	80005d2 <__udivmoddi4+0x222>
 8000654:	45f0      	cmp	r8, lr
 8000656:	d29d      	bcs.n	8000594 <__udivmoddi4+0x1e4>
 8000658:	ebbe 0302 	subs.w	r3, lr, r2
 800065c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000660:	3801      	subs	r0, #1
 8000662:	46e1      	mov	r9, ip
 8000664:	e796      	b.n	8000594 <__udivmoddi4+0x1e4>
 8000666:	eba7 0909 	sub.w	r9, r7, r9
 800066a:	4449      	add	r1, r9
 800066c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000670:	fbb1 f9fe 	udiv	r9, r1, lr
 8000674:	fb09 f804 	mul.w	r8, r9, r4
 8000678:	e7db      	b.n	8000632 <__udivmoddi4+0x282>
 800067a:	4673      	mov	r3, lr
 800067c:	e77f      	b.n	800057e <__udivmoddi4+0x1ce>
 800067e:	4650      	mov	r0, sl
 8000680:	e766      	b.n	8000550 <__udivmoddi4+0x1a0>
 8000682:	4608      	mov	r0, r1
 8000684:	e6fd      	b.n	8000482 <__udivmoddi4+0xd2>
 8000686:	443b      	add	r3, r7
 8000688:	3a02      	subs	r2, #2
 800068a:	e733      	b.n	80004f4 <__udivmoddi4+0x144>
 800068c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000690:	443b      	add	r3, r7
 8000692:	e71c      	b.n	80004ce <__udivmoddi4+0x11e>
 8000694:	4649      	mov	r1, r9
 8000696:	e79c      	b.n	80005d2 <__udivmoddi4+0x222>
 8000698:	eba1 0109 	sub.w	r1, r1, r9
 800069c:	46c4      	mov	ip, r8
 800069e:	fbb1 f9fe 	udiv	r9, r1, lr
 80006a2:	fb09 f804 	mul.w	r8, r9, r4
 80006a6:	e7c4      	b.n	8000632 <__udivmoddi4+0x282>

080006a8 <__aeabi_idiv0>:
 80006a8:	4770      	bx	lr
 80006aa:	bf00      	nop

080006ac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80006ac:	b480      	push	{r7}
 80006ae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80006b0:	4b3d      	ldr	r3, [pc, #244]	@ (80007a8 <SystemInit+0xfc>)
 80006b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80006b6:	4a3c      	ldr	r2, [pc, #240]	@ (80007a8 <SystemInit+0xfc>)
 80006b8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80006bc:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006c0:	4b39      	ldr	r3, [pc, #228]	@ (80007a8 <SystemInit+0xfc>)
 80006c2:	691b      	ldr	r3, [r3, #16]
 80006c4:	4a38      	ldr	r2, [pc, #224]	@ (80007a8 <SystemInit+0xfc>)
 80006c6:	f043 0310 	orr.w	r3, r3, #16
 80006ca:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006cc:	4b37      	ldr	r3, [pc, #220]	@ (80007ac <SystemInit+0x100>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f003 030f 	and.w	r3, r3, #15
 80006d4:	2b06      	cmp	r3, #6
 80006d6:	d807      	bhi.n	80006e8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006d8:	4b34      	ldr	r3, [pc, #208]	@ (80007ac <SystemInit+0x100>)
 80006da:	681b      	ldr	r3, [r3, #0]
 80006dc:	f023 030f 	bic.w	r3, r3, #15
 80006e0:	4a32      	ldr	r2, [pc, #200]	@ (80007ac <SystemInit+0x100>)
 80006e2:	f043 0307 	orr.w	r3, r3, #7
 80006e6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006e8:	4b31      	ldr	r3, [pc, #196]	@ (80007b0 <SystemInit+0x104>)
 80006ea:	681b      	ldr	r3, [r3, #0]
 80006ec:	4a30      	ldr	r2, [pc, #192]	@ (80007b0 <SystemInit+0x104>)
 80006ee:	f043 0301 	orr.w	r3, r3, #1
 80006f2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006f4:	4b2e      	ldr	r3, [pc, #184]	@ (80007b0 <SystemInit+0x104>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006fa:	4b2d      	ldr	r3, [pc, #180]	@ (80007b0 <SystemInit+0x104>)
 80006fc:	681a      	ldr	r2, [r3, #0]
 80006fe:	492c      	ldr	r1, [pc, #176]	@ (80007b0 <SystemInit+0x104>)
 8000700:	4b2c      	ldr	r3, [pc, #176]	@ (80007b4 <SystemInit+0x108>)
 8000702:	4013      	ands	r3, r2
 8000704:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 8000706:	4b29      	ldr	r3, [pc, #164]	@ (80007ac <SystemInit+0x100>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	f003 0308 	and.w	r3, r3, #8
 800070e:	2b00      	cmp	r3, #0
 8000710:	d007      	beq.n	8000722 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 8000712:	4b26      	ldr	r3, [pc, #152]	@ (80007ac <SystemInit+0x100>)
 8000714:	681b      	ldr	r3, [r3, #0]
 8000716:	f023 030f 	bic.w	r3, r3, #15
 800071a:	4a24      	ldr	r2, [pc, #144]	@ (80007ac <SystemInit+0x100>)
 800071c:	f043 0307 	orr.w	r3, r3, #7
 8000720:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000722:	4b23      	ldr	r3, [pc, #140]	@ (80007b0 <SystemInit+0x104>)
 8000724:	2200      	movs	r2, #0
 8000726:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000728:	4b21      	ldr	r3, [pc, #132]	@ (80007b0 <SystemInit+0x104>)
 800072a:	2200      	movs	r2, #0
 800072c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800072e:	4b20      	ldr	r3, [pc, #128]	@ (80007b0 <SystemInit+0x104>)
 8000730:	2200      	movs	r2, #0
 8000732:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000734:	4b1e      	ldr	r3, [pc, #120]	@ (80007b0 <SystemInit+0x104>)
 8000736:	4a20      	ldr	r2, [pc, #128]	@ (80007b8 <SystemInit+0x10c>)
 8000738:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800073a:	4b1d      	ldr	r3, [pc, #116]	@ (80007b0 <SystemInit+0x104>)
 800073c:	4a1f      	ldr	r2, [pc, #124]	@ (80007bc <SystemInit+0x110>)
 800073e:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000740:	4b1b      	ldr	r3, [pc, #108]	@ (80007b0 <SystemInit+0x104>)
 8000742:	4a1f      	ldr	r2, [pc, #124]	@ (80007c0 <SystemInit+0x114>)
 8000744:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000746:	4b1a      	ldr	r3, [pc, #104]	@ (80007b0 <SystemInit+0x104>)
 8000748:	2200      	movs	r2, #0
 800074a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800074c:	4b18      	ldr	r3, [pc, #96]	@ (80007b0 <SystemInit+0x104>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	@ (80007c0 <SystemInit+0x114>)
 8000750:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000752:	4b17      	ldr	r3, [pc, #92]	@ (80007b0 <SystemInit+0x104>)
 8000754:	2200      	movs	r2, #0
 8000756:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000758:	4b15      	ldr	r3, [pc, #84]	@ (80007b0 <SystemInit+0x104>)
 800075a:	4a19      	ldr	r2, [pc, #100]	@ (80007c0 <SystemInit+0x114>)
 800075c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800075e:	4b14      	ldr	r3, [pc, #80]	@ (80007b0 <SystemInit+0x104>)
 8000760:	2200      	movs	r2, #0
 8000762:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000764:	4b12      	ldr	r3, [pc, #72]	@ (80007b0 <SystemInit+0x104>)
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a11      	ldr	r2, [pc, #68]	@ (80007b0 <SystemInit+0x104>)
 800076a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800076e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000770:	4b0f      	ldr	r3, [pc, #60]	@ (80007b0 <SystemInit+0x104>)
 8000772:	2200      	movs	r2, #0
 8000774:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000776:	4b13      	ldr	r3, [pc, #76]	@ (80007c4 <SystemInit+0x118>)
 8000778:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800077a:	4a12      	ldr	r2, [pc, #72]	@ (80007c4 <SystemInit+0x118>)
 800077c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000780:	6253      	str	r3, [r2, #36]	@ 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000782:	4b11      	ldr	r3, [pc, #68]	@ (80007c8 <SystemInit+0x11c>)
 8000784:	681a      	ldr	r2, [r3, #0]
 8000786:	4b11      	ldr	r3, [pc, #68]	@ (80007cc <SystemInit+0x120>)
 8000788:	4013      	ands	r3, r2
 800078a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800078e:	d202      	bcs.n	8000796 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000790:	4b0f      	ldr	r3, [pc, #60]	@ (80007d0 <SystemInit+0x124>)
 8000792:	2201      	movs	r2, #1
 8000794:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000796:	4b0f      	ldr	r3, [pc, #60]	@ (80007d4 <SystemInit+0x128>)
 8000798:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 800079c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800079e:	bf00      	nop
 80007a0:	46bd      	mov	sp, r7
 80007a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007a6:	4770      	bx	lr
 80007a8:	e000ed00 	.word	0xe000ed00
 80007ac:	52002000 	.word	0x52002000
 80007b0:	58024400 	.word	0x58024400
 80007b4:	eaf6ed7f 	.word	0xeaf6ed7f
 80007b8:	02020200 	.word	0x02020200
 80007bc:	01ff0000 	.word	0x01ff0000
 80007c0:	01010280 	.word	0x01010280
 80007c4:	580000c0 	.word	0x580000c0
 80007c8:	5c001000 	.word	0x5c001000
 80007cc:	ffff0000 	.word	0xffff0000
 80007d0:	51008108 	.word	0x51008108
 80007d4:	52004000 	.word	0x52004000

080007d8 <ExitRun0Mode>:
  *
  * @param  None
  * @retval None
  */
void ExitRun0Mode(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#elif defined(USE_PWR_DIRECT_SMPS_SUPPLY) && defined(SMPS)
  /* Exit Run* mode */
  PWR->CR3 &= ~(PWR_CR3_LDOEN);
 80007dc:	4b09      	ldr	r3, [pc, #36]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007de:	68db      	ldr	r3, [r3, #12]
 80007e0:	4a08      	ldr	r2, [pc, #32]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007e2:	f023 0302 	bic.w	r3, r3, #2
 80007e6:	60d3      	str	r3, [r2, #12]
  /* Wait till voltage level flag is set */
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
 80007e8:	bf00      	nop
 80007ea:	4b06      	ldr	r3, [pc, #24]	@ (8000804 <ExitRun0Mode+0x2c>)
 80007ec:	685b      	ldr	r3, [r3, #4]
 80007ee:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80007f2:	2b00      	cmp	r3, #0
 80007f4:	d0f9      	beq.n	80007ea <ExitRun0Mode+0x12>
  while ((PWR->CSR1 & PWR_CSR1_ACTVOSRDY) == 0U)
  {}
#else
  /* No system power supply configuration is selected at exit Run* mode */
#endif /* USE_PWR_LDO_SUPPLY */
}
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	46bd      	mov	sp, r7
 80007fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000800:	4770      	bx	lr
 8000802:	bf00      	nop
 8000804:	58024800 	.word	0x58024800

08000808 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	b086      	sub	sp, #24
 800080c:	af00      	add	r7, sp, #0
  \details Turns on I-Cache
  */
__STATIC_FORCEINLINE void SCB_EnableICache (void)
{
  #if defined (__ICACHE_PRESENT) && (__ICACHE_PRESENT == 1U)
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 800080e:	4b5e      	ldr	r3, [pc, #376]	@ (8000988 <main+0x180>)
 8000810:	695b      	ldr	r3, [r3, #20]
 8000812:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000816:	2b00      	cmp	r3, #0
 8000818:	d11b      	bne.n	8000852 <main+0x4a>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800081a:	f3bf 8f4f 	dsb	sy
}
 800081e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000820:	f3bf 8f6f 	isb	sy
}
 8000824:	bf00      	nop

    __DSB();
    __ISB();
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 8000826:	4b58      	ldr	r3, [pc, #352]	@ (8000988 <main+0x180>)
 8000828:	2200      	movs	r2, #0
 800082a:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 800082e:	f3bf 8f4f 	dsb	sy
}
 8000832:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8000834:	f3bf 8f6f 	isb	sy
}
 8000838:	bf00      	nop
    __DSB();
    __ISB();
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 800083a:	4b53      	ldr	r3, [pc, #332]	@ (8000988 <main+0x180>)
 800083c:	695b      	ldr	r3, [r3, #20]
 800083e:	4a52      	ldr	r2, [pc, #328]	@ (8000988 <main+0x180>)
 8000840:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000844:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8000846:	f3bf 8f4f 	dsb	sy
}
 800084a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800084c:	f3bf 8f6f 	isb	sy
}
 8000850:	e000      	b.n	8000854 <main+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 8000852:	bf00      	nop
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    uint32_t ccsidr;
    uint32_t sets;
    uint32_t ways;

    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8000854:	4b4c      	ldr	r3, [pc, #304]	@ (8000988 <main+0x180>)
 8000856:	695b      	ldr	r3, [r3, #20]
 8000858:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800085c:	2b00      	cmp	r3, #0
 800085e:	d138      	bne.n	80008d2 <main+0xca>

    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 8000860:	4b49      	ldr	r3, [pc, #292]	@ (8000988 <main+0x180>)
 8000862:	2200      	movs	r2, #0
 8000864:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8000868:	f3bf 8f4f 	dsb	sy
}
 800086c:	bf00      	nop
    __DSB();

    ccsidr = SCB->CCSIDR;
 800086e:	4b46      	ldr	r3, [pc, #280]	@ (8000988 <main+0x180>)
 8000870:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8000874:	613b      	str	r3, [r7, #16]

                                            /* invalidate D-Cache */
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8000876:	693b      	ldr	r3, [r7, #16]
 8000878:	0b5b      	lsrs	r3, r3, #13
 800087a:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800087e:	60fb      	str	r3, [r7, #12]
    do {
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 8000880:	693b      	ldr	r3, [r7, #16]
 8000882:	08db      	lsrs	r3, r3, #3
 8000884:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8000888:	60bb      	str	r3, [r7, #8]
      do {
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 800088a:	68fb      	ldr	r3, [r7, #12]
 800088c:	015a      	lsls	r2, r3, #5
 800088e:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 8000892:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8000894:	68ba      	ldr	r2, [r7, #8]
 8000896:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8000898:	493b      	ldr	r1, [pc, #236]	@ (8000988 <main+0x180>)
 800089a:	4313      	orrs	r3, r2
 800089c:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
        #if defined ( __CC_ARM )
          __schedule_barrier();
        #endif
      } while (ways-- != 0U);
 80008a0:	68bb      	ldr	r3, [r7, #8]
 80008a2:	1e5a      	subs	r2, r3, #1
 80008a4:	60ba      	str	r2, [r7, #8]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d1ef      	bne.n	800088a <main+0x82>
    } while(sets-- != 0U);
 80008aa:	68fb      	ldr	r3, [r7, #12]
 80008ac:	1e5a      	subs	r2, r3, #1
 80008ae:	60fa      	str	r2, [r7, #12]
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d1e5      	bne.n	8000880 <main+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 80008b4:	f3bf 8f4f 	dsb	sy
}
 80008b8:	bf00      	nop
    __DSB();

    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 80008ba:	4b33      	ldr	r3, [pc, #204]	@ (8000988 <main+0x180>)
 80008bc:	695b      	ldr	r3, [r3, #20]
 80008be:	4a32      	ldr	r2, [pc, #200]	@ (8000988 <main+0x180>)
 80008c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80008c4:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80008c6:	f3bf 8f4f 	dsb	sy
}
 80008ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80008cc:	f3bf 8f6f 	isb	sy
}
 80008d0:	e000      	b.n	80008d4 <main+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 80008d2:	bf00      	nop
  /* Enable D-Cache---------------------------------------------------------*/
  SCB_EnableDCache();

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80008d4:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80008d8:	617b      	str	r3, [r7, #20]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80008da:	bf00      	nop
 80008dc:	4b2b      	ldr	r3, [pc, #172]	@ (800098c <main+0x184>)
 80008de:	681b      	ldr	r3, [r3, #0]
 80008e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d004      	beq.n	80008f2 <main+0xea>
 80008e8:	697b      	ldr	r3, [r7, #20]
 80008ea:	1e5a      	subs	r2, r3, #1
 80008ec:	617a      	str	r2, [r7, #20]
 80008ee:	2b00      	cmp	r3, #0
 80008f0:	dcf4      	bgt.n	80008dc <main+0xd4>
  if ( timeout < 0 )
 80008f2:	697b      	ldr	r3, [r7, #20]
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	da01      	bge.n	80008fc <main+0xf4>
  {
  Error_Handler();
 80008f8:	f000 f988 	bl	8000c0c <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80008fc:	f000 faf2 	bl	8000ee4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000900:	f000 f848 	bl	8000994 <SystemClock_Config>

  /* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 8000904:	f000 f8b4 	bl	8000a70 <PeriphCommonClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 8000908:	4b20      	ldr	r3, [pc, #128]	@ (800098c <main+0x184>)
 800090a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800090e:	4a1f      	ldr	r2, [pc, #124]	@ (800098c <main+0x184>)
 8000910:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000914:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000918:	4b1c      	ldr	r3, [pc, #112]	@ (800098c <main+0x184>)
 800091a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800091e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8000922:	607b      	str	r3, [r7, #4]
 8000924:	687b      	ldr	r3, [r7, #4]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 8000926:	2000      	movs	r0, #0
 8000928:	f000 fe42 	bl	80015b0 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 800092c:	2100      	movs	r1, #0
 800092e:	2000      	movs	r0, #0
 8000930:	f000 fe58 	bl	80015e4 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 8000934:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000938:	617b      	str	r3, [r7, #20]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 800093a:	bf00      	nop
 800093c:	4b13      	ldr	r3, [pc, #76]	@ (800098c <main+0x184>)
 800093e:	681b      	ldr	r3, [r3, #0]
 8000940:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8000944:	2b00      	cmp	r3, #0
 8000946:	d104      	bne.n	8000952 <main+0x14a>
 8000948:	697b      	ldr	r3, [r7, #20]
 800094a:	1e5a      	subs	r2, r3, #1
 800094c:	617a      	str	r2, [r7, #20]
 800094e:	2b00      	cmp	r3, #0
 8000950:	dcf4      	bgt.n	800093c <main+0x134>
if ( timeout < 0 )
 8000952:	697b      	ldr	r3, [r7, #20]
 8000954:	2b00      	cmp	r3, #0
 8000956:	da01      	bge.n	800095c <main+0x154>
{
Error_Handler();
 8000958:	f000 f958 	bl	8000c0c <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800095c:	f000 f904 	bl	8000b68 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000960:	f000 f8b6 	bl	8000ad0 <MX_USART1_UART_Init>
  MX_X_CUBE_AI_Init();
 8000964:	f004 ff82 	bl	800586c <MX_X_CUBE_AI_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

  printf("PROCESSING AUDIO...\r\n");
 8000968:	4809      	ldr	r0, [pc, #36]	@ (8000990 <main+0x188>)
 800096a:	f008 ffab 	bl	80098c4 <puts>
  HAL_Delay(3000);
 800096e:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000972:	f000 fb49 	bl	8001008 <HAL_Delay>

  MX_X_CUBE_AI_Process();
 8000976:	f004 ff87 	bl	8005888 <MX_X_CUBE_AI_Process>
  HAL_Delay(3000); // Delay to allow processing time, adjust as needed
 800097a:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800097e:	f000 fb43 	bl	8001008 <HAL_Delay>
  {
 8000982:	bf00      	nop
 8000984:	e7f0      	b.n	8000968 <main+0x160>
 8000986:	bf00      	nop
 8000988:	e000ed00 	.word	0xe000ed00
 800098c:	58024400 	.word	0x58024400
 8000990:	0800a460 	.word	0x0800a460

08000994 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b09e      	sub	sp, #120	@ 0x78
 8000998:	af00      	add	r7, sp, #0
  RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 800099a:	2300      	movs	r3, #0
 800099c:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
    // {
    // }

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80009a0:	2301      	movs	r3, #1
 80009a2:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80009a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80009a8:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80009aa:	2300      	movs	r3, #0
 80009ac:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80009ae:	2300      	movs	r3, #0
 80009b0:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80009b2:	2302      	movs	r3, #2
 80009b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80009b6:	2302      	movs	r3, #2
 80009b8:	633b      	str	r3, [r7, #48]	@ 0x30

    RCC_OscInitStruct.PLL.PLLM = 5;
 80009ba:	2305      	movs	r3, #5
 80009bc:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 160;
 80009be:	23a0      	movs	r3, #160	@ 0xa0
 80009c0:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80009c2:	2300      	movs	r3, #0
 80009c4:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = 2;
 80009c6:	2302      	movs	r3, #2
 80009c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLR = 2;
 80009ca:	2302      	movs	r3, #2
 80009cc:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80009ce:	2304      	movs	r3, #4
 80009d0:	643b      	str	r3, [r7, #64]	@ 0x40

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80009d2:	2300      	movs	r3, #0
 80009d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80009d6:	2308      	movs	r3, #8
 80009d8:	64bb      	str	r3, [r7, #72]	@ 0x48
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80009da:	f107 0308 	add.w	r3, r7, #8
 80009de:	4618      	mov	r0, r3
 80009e0:	f000 fe14 	bl	800160c <HAL_RCC_OscConfig>
 80009e4:	4603      	mov	r3, r0
 80009e6:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 80009ea:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d001      	beq.n	80009f6 <SystemClock_Config+0x62>
    {
        Error_Handler();
 80009f2:	f000 f90b 	bl	8000c0c <Error_Handler>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType =
 80009f6:	233f      	movs	r3, #63	@ 0x3f
 80009f8:	657b      	str	r3, [r7, #84]	@ 0x54
        (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
         RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80009fa:	2303      	movs	r3, #3
 80009fc:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 80009fe:	2300      	movs	r3, #0
 8000a00:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 8000a02:	2308      	movs	r3, #8
 8000a04:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 8000a06:	2340      	movs	r3, #64	@ 0x40
 8000a08:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8000a0a:	2340      	movs	r3, #64	@ 0x40
 8000a0c:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8000a0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000a12:	66fb      	str	r3, [r7, #108]	@ 0x6c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 8000a14:	2340      	movs	r3, #64	@ 0x40
 8000a16:	673b      	str	r3, [r7, #112]	@ 0x70
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8000a18:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000a1c:	2104      	movs	r1, #4
 8000a1e:	4618      	mov	r0, r3
 8000a20:	f001 fa4e 	bl	8001ec0 <HAL_RCC_ClockConfig>
 8000a24:	4603      	mov	r3, r0
 8000a26:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8000a2a:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8000a2e:	2b00      	cmp	r3, #0
 8000a30:	d001      	beq.n	8000a36 <SystemClock_Config+0xa2>
    {
        Error_Handler();
 8000a32:	f000 f8eb 	bl	8000c0c <Error_Handler>
           - The activation of the SYSCFG clock
           - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
    */

    /*activate CSI clock mondatory for I/O Compensation Cell*/
    __HAL_RCC_CSI_ENABLE();
 8000a36:	4b0d      	ldr	r3, [pc, #52]	@ (8000a6c <SystemClock_Config+0xd8>)
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a6c <SystemClock_Config+0xd8>)
 8000a3c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000a40:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a42:	4b0a      	ldr	r3, [pc, #40]	@ (8000a6c <SystemClock_Config+0xd8>)
 8000a44:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a48:	4a08      	ldr	r2, [pc, #32]	@ (8000a6c <SystemClock_Config+0xd8>)
 8000a4a:	f043 0302 	orr.w	r3, r3, #2
 8000a4e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000a52:	4b06      	ldr	r3, [pc, #24]	@ (8000a6c <SystemClock_Config+0xd8>)
 8000a54:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000a58:	f003 0302 	and.w	r3, r3, #2
 8000a5c:	607b      	str	r3, [r7, #4]
 8000a5e:	687b      	ldr	r3, [r7, #4]

    /* Enables the I/O Compensation Cell */
    HAL_EnableCompensationCell();
 8000a60:	f000 fb02 	bl	8001068 <HAL_EnableCompensationCell>
}
 8000a64:	bf00      	nop
 8000a66:	3778      	adds	r7, #120	@ 0x78
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	58024400 	.word	0x58024400

08000a70 <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b0b2      	sub	sp, #200	@ 0xc8
 8000a74:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000a76:	463b      	mov	r3, r7
 8000a78:	22c8      	movs	r2, #200	@ 0xc8
 8000a7a:	2100      	movs	r1, #0
 8000a7c:	4618      	mov	r0, r3
 8000a7e:	f008 ff29 	bl	80098d4 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000a82:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 8000a86:	f04f 0300 	mov.w	r3, #0
 8000a8a:	e9c7 2300 	strd	r2, r3, [r7]
  PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000a8e:	2302      	movs	r3, #2
 8000a90:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000a92:	230c      	movs	r3, #12
 8000a94:	60fb      	str	r3, [r7, #12]
  PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000a96:	2302      	movs	r3, #2
 8000a98:	613b      	str	r3, [r7, #16]
  PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000a9a:	2302      	movs	r3, #2
 8000a9c:	617b      	str	r3, [r7, #20]
  PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000a9e:	2302      	movs	r3, #2
 8000aa0:	61bb      	str	r3, [r7, #24]
  PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000aa2:	23c0      	movs	r3, #192	@ 0xc0
 8000aa4:	61fb      	str	r3, [r7, #28]
  PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000aa6:	2320      	movs	r3, #32
 8000aa8:	623b      	str	r3, [r7, #32]
  PeriphClkInitStruct.PLL2.PLL2FRACN = 0;
 8000aaa:	2300      	movs	r3, #0
 8000aac:	627b      	str	r3, [r7, #36]	@ 0x24
  PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000aae:	2300      	movs	r3, #0
 8000ab0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ab4:	463b      	mov	r3, r7
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	f001 fd8e 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000abc:	4603      	mov	r3, r0
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d001      	beq.n	8000ac6 <PeriphCommonClock_Config+0x56>
  {
    Error_Handler();
 8000ac2:	f000 f8a3 	bl	8000c0c <Error_Handler>
  }
}
 8000ac6:	bf00      	nop
 8000ac8:	37c8      	adds	r7, #200	@ 0xc8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
	...

08000ad0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ad4:	4b22      	ldr	r3, [pc, #136]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000ad6:	4a23      	ldr	r2, [pc, #140]	@ (8000b64 <MX_USART1_UART_Init+0x94>)
 8000ad8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ada:	4b21      	ldr	r3, [pc, #132]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000adc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ae0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ae2:	4b1f      	ldr	r3, [pc, #124]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ae8:	4b1d      	ldr	r3, [pc, #116]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000aea:	2200      	movs	r2, #0
 8000aec:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000aee:	4b1c      	ldr	r3, [pc, #112]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000af4:	4b1a      	ldr	r3, [pc, #104]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000af6:	220c      	movs	r2, #12
 8000af8:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000afa:	4b19      	ldr	r3, [pc, #100]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b00:	4b17      	ldr	r3, [pc, #92]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b06:	4b16      	ldr	r3, [pc, #88]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b0c:	4b14      	ldr	r3, [pc, #80]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b0e:	2200      	movs	r2, #0
 8000b10:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b12:	4b13      	ldr	r3, [pc, #76]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b14:	2200      	movs	r2, #0
 8000b16:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b18:	4811      	ldr	r0, [pc, #68]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b1a:	f003 fbc9 	bl	80042b0 <HAL_UART_Init>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d001      	beq.n	8000b28 <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b24:	f000 f872 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b28:	2100      	movs	r1, #0
 8000b2a:	480d      	ldr	r0, [pc, #52]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b2c:	f004 fc5f 	bl	80053ee <HAL_UARTEx_SetTxFifoThreshold>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d001      	beq.n	8000b3a <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b36:	f000 f869 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	4808      	ldr	r0, [pc, #32]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b3e:	f004 fc94 	bl	800546a <HAL_UARTEx_SetRxFifoThreshold>
 8000b42:	4603      	mov	r3, r0
 8000b44:	2b00      	cmp	r3, #0
 8000b46:	d001      	beq.n	8000b4c <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b48:	f000 f860 	bl	8000c0c <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b4c:	4804      	ldr	r0, [pc, #16]	@ (8000b60 <MX_USART1_UART_Init+0x90>)
 8000b4e:	f004 fc15 	bl	800537c <HAL_UARTEx_DisableFifoMode>
 8000b52:	4603      	mov	r3, r0
 8000b54:	2b00      	cmp	r3, #0
 8000b56:	d001      	beq.n	8000b5c <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b58:	f000 f858 	bl	8000c0c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b5c:	bf00      	nop
 8000b5e:	bd80      	pop	{r7, pc}
 8000b60:	24010d24 	.word	0x24010d24
 8000b64:	40011000 	.word	0x40011000

08000b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b088      	sub	sp, #32
 8000b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6e:	f107 030c 	add.w	r3, r7, #12
 8000b72:	2200      	movs	r2, #0
 8000b74:	601a      	str	r2, [r3, #0]
 8000b76:	605a      	str	r2, [r3, #4]
 8000b78:	609a      	str	r2, [r3, #8]
 8000b7a:	60da      	str	r2, [r3, #12]
 8000b7c:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b7e:	4b21      	ldr	r3, [pc, #132]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000b80:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b84:	4a1f      	ldr	r2, [pc, #124]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000b86:	f043 0304 	orr.w	r3, r3, #4
 8000b8a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000b8e:	4b1d      	ldr	r3, [pc, #116]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000b90:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000b94:	f003 0304 	and.w	r3, r3, #4
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b9c:	4b19      	ldr	r3, [pc, #100]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000b9e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000ba2:	4a18      	ldr	r2, [pc, #96]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000ba4:	f043 0301 	orr.w	r3, r3, #1
 8000ba8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bac:	4b15      	ldr	r3, [pc, #84]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000bae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	607b      	str	r3, [r7, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bba:	4b12      	ldr	r3, [pc, #72]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000bbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bc0:	4a10      	ldr	r2, [pc, #64]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000bc2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000bc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000bca:	4b0e      	ldr	r3, [pc, #56]	@ (8000c04 <MX_GPIO_Init+0x9c>)
 8000bcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000bd0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000bd4:	603b      	str	r3, [r7, #0]
 8000bd6:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin : CEC_CK_MCO1_Pin */
  GPIO_InitStruct.Pin = CEC_CK_MCO1_Pin;
 8000bd8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bdc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF0_MCO;
 8000bea:	2300      	movs	r3, #0
 8000bec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CEC_CK_MCO1_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 030c 	add.w	r3, r7, #12
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4804      	ldr	r0, [pc, #16]	@ (8000c08 <MX_GPIO_Init+0xa0>)
 8000bf6:	f000 fb2b 	bl	8001250 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000bfa:	bf00      	nop
 8000bfc:	3720      	adds	r7, #32
 8000bfe:	46bd      	mov	sp, r7
 8000c00:	bd80      	pop	{r7, pc}
 8000c02:	bf00      	nop
 8000c04:	58024400 	.word	0x58024400
 8000c08:	58020000 	.word	0x58020000

08000c0c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c0c:	b480      	push	{r7}
 8000c0e:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8000c10:	b672      	cpsid	i
}
 8000c12:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c14:	bf00      	nop
 8000c16:	e7fd      	b.n	8000c14 <Error_Handler+0x8>

08000c18 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c18:	b480      	push	{r7}
 8000c1a:	b083      	sub	sp, #12
 8000c1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c1e:	4b0a      	ldr	r3, [pc, #40]	@ (8000c48 <HAL_MspInit+0x30>)
 8000c20:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c24:	4a08      	ldr	r2, [pc, #32]	@ (8000c48 <HAL_MspInit+0x30>)
 8000c26:	f043 0302 	orr.w	r3, r3, #2
 8000c2a:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8000c2e:	4b06      	ldr	r3, [pc, #24]	@ (8000c48 <HAL_MspInit+0x30>)
 8000c30:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8000c34:	f003 0302 	and.w	r3, r3, #2
 8000c38:	607b      	str	r3, [r7, #4]
 8000c3a:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c3c:	bf00      	nop
 8000c3e:	370c      	adds	r7, #12
 8000c40:	46bd      	mov	sp, r7
 8000c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c46:	4770      	bx	lr
 8000c48:	58024400 	.word	0x58024400

08000c4c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b0bc      	sub	sp, #240	@ 0xf0
 8000c50:	af00      	add	r7, sp, #0
 8000c52:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c54:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000c58:	2200      	movs	r2, #0
 8000c5a:	601a      	str	r2, [r3, #0]
 8000c5c:	605a      	str	r2, [r3, #4]
 8000c5e:	609a      	str	r2, [r3, #8]
 8000c60:	60da      	str	r2, [r3, #12]
 8000c62:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000c64:	f107 0310 	add.w	r3, r7, #16
 8000c68:	22c8      	movs	r2, #200	@ 0xc8
 8000c6a:	2100      	movs	r1, #0
 8000c6c:	4618      	mov	r0, r3
 8000c6e:	f008 fe31 	bl	80098d4 <memset>
  if(huart->Instance==USART1)
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	681b      	ldr	r3, [r3, #0]
 8000c76:	4a27      	ldr	r2, [pc, #156]	@ (8000d14 <HAL_UART_MspInit+0xc8>)
 8000c78:	4293      	cmp	r3, r2
 8000c7a:	d146      	bne.n	8000d0a <HAL_UART_MspInit+0xbe>

    /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000c7c:	f04f 0201 	mov.w	r2, #1
 8000c80:	f04f 0300 	mov.w	r3, #0
 8000c84:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c8e:	f107 0310 	add.w	r3, r7, #16
 8000c92:	4618      	mov	r0, r3
 8000c94:	f001 fca0 	bl	80025d8 <HAL_RCCEx_PeriphCLKConfig>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d001      	beq.n	8000ca2 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000c9e:	f7ff ffb5 	bl	8000c0c <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000ca2:	4b1d      	ldr	r3, [pc, #116]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000ca4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000ca8:	4a1b      	ldr	r2, [pc, #108]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000caa:	f043 0310 	orr.w	r3, r3, #16
 8000cae:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 8000cb2:	4b19      	ldr	r3, [pc, #100]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cb4:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 8000cb8:	f003 0310 	and.w	r3, r3, #16
 8000cbc:	60fb      	str	r3, [r7, #12]
 8000cbe:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cc0:	4b15      	ldr	r3, [pc, #84]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cc2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cc6:	4a14      	ldr	r2, [pc, #80]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cc8:	f043 0301 	orr.w	r3, r3, #1
 8000ccc:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8000cd0:	4b11      	ldr	r3, [pc, #68]	@ (8000d18 <HAL_UART_MspInit+0xcc>)
 8000cd2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8000cd6:	f003 0301 	and.w	r3, r3, #1
 8000cda:	60bb      	str	r3, [r7, #8]
 8000cdc:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA10     ------> USART1_RX
    PA9     ------> USART1_TX
    */
    GPIO_InitStruct.Pin = STLINK_TX_Pin|STLINK_RX_Pin;
 8000cde:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000ce2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce6:	2302      	movs	r3, #2
 8000ce8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cec:	2300      	movs	r3, #0
 8000cee:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000cf8:	2307      	movs	r3, #7
 8000cfa:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cfe:	f107 03dc 	add.w	r3, r7, #220	@ 0xdc
 8000d02:	4619      	mov	r1, r3
 8000d04:	4805      	ldr	r0, [pc, #20]	@ (8000d1c <HAL_UART_MspInit+0xd0>)
 8000d06:	f000 faa3 	bl	8001250 <HAL_GPIO_Init>

    /* USER CODE END USART1_MspInit 1 */

  }

}
 8000d0a:	bf00      	nop
 8000d0c:	37f0      	adds	r7, #240	@ 0xf0
 8000d0e:	46bd      	mov	sp, r7
 8000d10:	bd80      	pop	{r7, pc}
 8000d12:	bf00      	nop
 8000d14:	40011000 	.word	0x40011000
 8000d18:	58024400 	.word	0x58024400
 8000d1c:	58020000 	.word	0x58020000

08000d20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d20:	b480      	push	{r7}
 8000d22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d24:	bf00      	nop
 8000d26:	e7fd      	b.n	8000d24 <NMI_Handler+0x4>

08000d28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d28:	b480      	push	{r7}
 8000d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d2c:	bf00      	nop
 8000d2e:	e7fd      	b.n	8000d2c <HardFault_Handler+0x4>

08000d30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d30:	b480      	push	{r7}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d34:	bf00      	nop
 8000d36:	e7fd      	b.n	8000d34 <MemManage_Handler+0x4>

08000d38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d3c:	bf00      	nop
 8000d3e:	e7fd      	b.n	8000d3c <BusFault_Handler+0x4>

08000d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d40:	b480      	push	{r7}
 8000d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d44:	bf00      	nop
 8000d46:	e7fd      	b.n	8000d44 <UsageFault_Handler+0x4>

08000d48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d48:	b480      	push	{r7}
 8000d4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d4c:	bf00      	nop
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr

08000d56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d56:	b480      	push	{r7}
 8000d58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d5a:	bf00      	nop
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr

08000d64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d64:	b480      	push	{r7}
 8000d66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d68:	bf00      	nop
 8000d6a:	46bd      	mov	sp, r7
 8000d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d70:	4770      	bx	lr

08000d72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d76:	f000 f927 	bl	8000fc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d7a:	bf00      	nop
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b086      	sub	sp, #24
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	60f8      	str	r0, [r7, #12]
 8000d86:	60b9      	str	r1, [r7, #8]
 8000d88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000d8a:	2300      	movs	r3, #0
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e00a      	b.n	8000da6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000d90:	f3af 8000 	nop.w
 8000d94:	4601      	mov	r1, r0
 8000d96:	68bb      	ldr	r3, [r7, #8]
 8000d98:	1c5a      	adds	r2, r3, #1
 8000d9a:	60ba      	str	r2, [r7, #8]
 8000d9c:	b2ca      	uxtb	r2, r1
 8000d9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000da0:	697b      	ldr	r3, [r7, #20]
 8000da2:	3301      	adds	r3, #1
 8000da4:	617b      	str	r3, [r7, #20]
 8000da6:	697a      	ldr	r2, [r7, #20]
 8000da8:	687b      	ldr	r3, [r7, #4]
 8000daa:	429a      	cmp	r2, r3
 8000dac:	dbf0      	blt.n	8000d90 <_read+0x12>
  }

  return len;
 8000dae:	687b      	ldr	r3, [r7, #4]
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3718      	adds	r7, #24
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <_close>:


int _close(int file)
{
 8000db8:	b480      	push	{r7}
 8000dba:	b083      	sub	sp, #12
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr

08000dd0 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000dd0:	b480      	push	{r7}
 8000dd2:	b083      	sub	sp, #12
 8000dd4:	af00      	add	r7, sp, #0
 8000dd6:	6078      	str	r0, [r7, #4]
 8000dd8:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000de0:	605a      	str	r2, [r3, #4]
  return 0;
 8000de2:	2300      	movs	r3, #0
}
 8000de4:	4618      	mov	r0, r3
 8000de6:	370c      	adds	r7, #12
 8000de8:	46bd      	mov	sp, r7
 8000dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dee:	4770      	bx	lr

08000df0 <_isatty>:

int _isatty(int file)
{
 8000df0:	b480      	push	{r7}
 8000df2:	b083      	sub	sp, #12
 8000df4:	af00      	add	r7, sp, #0
 8000df6:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000df8:	2301      	movs	r3, #1
}
 8000dfa:	4618      	mov	r0, r3
 8000dfc:	370c      	adds	r7, #12
 8000dfe:	46bd      	mov	sp, r7
 8000e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e04:	4770      	bx	lr

08000e06 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000e06:	b480      	push	{r7}
 8000e08:	b085      	sub	sp, #20
 8000e0a:	af00      	add	r7, sp, #0
 8000e0c:	60f8      	str	r0, [r7, #12]
 8000e0e:	60b9      	str	r1, [r7, #8]
 8000e10:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000e12:	2300      	movs	r3, #0
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3714      	adds	r7, #20
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e1e:	4770      	bx	lr

08000e20 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000e20:	b580      	push	{r7, lr}
 8000e22:	b086      	sub	sp, #24
 8000e24:	af00      	add	r7, sp, #0
 8000e26:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e28:	4a14      	ldr	r2, [pc, #80]	@ (8000e7c <_sbrk+0x5c>)
 8000e2a:	4b15      	ldr	r3, [pc, #84]	@ (8000e80 <_sbrk+0x60>)
 8000e2c:	1ad3      	subs	r3, r2, r3
 8000e2e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e30:	697b      	ldr	r3, [r7, #20]
 8000e32:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e34:	4b13      	ldr	r3, [pc, #76]	@ (8000e84 <_sbrk+0x64>)
 8000e36:	681b      	ldr	r3, [r3, #0]
 8000e38:	2b00      	cmp	r3, #0
 8000e3a:	d102      	bne.n	8000e42 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e3c:	4b11      	ldr	r3, [pc, #68]	@ (8000e84 <_sbrk+0x64>)
 8000e3e:	4a12      	ldr	r2, [pc, #72]	@ (8000e88 <_sbrk+0x68>)
 8000e40:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e42:	4b10      	ldr	r3, [pc, #64]	@ (8000e84 <_sbrk+0x64>)
 8000e44:	681a      	ldr	r2, [r3, #0]
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	4413      	add	r3, r2
 8000e4a:	693a      	ldr	r2, [r7, #16]
 8000e4c:	429a      	cmp	r2, r3
 8000e4e:	d207      	bcs.n	8000e60 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e50:	f008 fd58 	bl	8009904 <__errno>
 8000e54:	4603      	mov	r3, r0
 8000e56:	220c      	movs	r2, #12
 8000e58:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000e5e:	e009      	b.n	8000e74 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e60:	4b08      	ldr	r3, [pc, #32]	@ (8000e84 <_sbrk+0x64>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e66:	4b07      	ldr	r3, [pc, #28]	@ (8000e84 <_sbrk+0x64>)
 8000e68:	681a      	ldr	r2, [r3, #0]
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	4413      	add	r3, r2
 8000e6e:	4a05      	ldr	r2, [pc, #20]	@ (8000e84 <_sbrk+0x64>)
 8000e70:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e72:	68fb      	ldr	r3, [r7, #12]
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	3718      	adds	r7, #24
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	bd80      	pop	{r7, pc}
 8000e7c:	24080000 	.word	0x24080000
 8000e80:	00000800 	.word	0x00000800
 8000e84:	24010d1c 	.word	0x24010d1c
 8000e88:	20000000 	.word	0x20000000

08000e8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e8c:	f8df d038 	ldr.w	sp, [pc, #56]	@ 8000ec8 <LoopFillZerobss+0xe>

/* Call the ExitRun0Mode function to configure the power supply */
  bl  ExitRun0Mode
 8000e90:	f7ff fca2 	bl	80007d8 <ExitRun0Mode>
/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e94:	f7ff fc0a 	bl	80006ac <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e98:	480c      	ldr	r0, [pc, #48]	@ (8000ecc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e9a:	490d      	ldr	r1, [pc, #52]	@ (8000ed0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e9c:	4a0d      	ldr	r2, [pc, #52]	@ (8000ed4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e9e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ea0:	e002      	b.n	8000ea8 <LoopCopyDataInit>

08000ea2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ea2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ea4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ea6:	3304      	adds	r3, #4

08000ea8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ea8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000eaa:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000eac:	d3f9      	bcc.n	8000ea2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000eae:	4a0a      	ldr	r2, [pc, #40]	@ (8000ed8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000eb0:	4c0a      	ldr	r4, [pc, #40]	@ (8000edc <LoopFillZerobss+0x22>)
  movs r3, #0
 8000eb2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000eb4:	e001      	b.n	8000eba <LoopFillZerobss>

08000eb6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000eb6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000eb8:	3204      	adds	r2, #4

08000eba <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000eba:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000ebc:	d3fb      	bcc.n	8000eb6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000ebe:	f008 fd27 	bl	8009910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ec2:	f7ff fca1 	bl	8000808 <main>
  bx  lr
 8000ec6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000ec8:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ecc:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ed0:	24010cf8 	.word	0x24010cf8
  ldr r2, =_sidata
 8000ed4:	080105dc 	.word	0x080105dc
  ldr r2, =_sbss
 8000ed8:	24010d00 	.word	0x24010d00
  ldr r4, =_ebss
 8000edc:	240411fc 	.word	0x240411fc

08000ee0 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ee0:	e7fe      	b.n	8000ee0 <ADC3_IRQHandler>
	...

08000ee4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000eea:	2003      	movs	r0, #3
 8000eec:	f000 f97e 	bl	80011ec <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ef0:	f001 f99c 	bl	800222c <HAL_RCC_GetSysClockFreq>
 8000ef4:	4602      	mov	r2, r0
 8000ef6:	4b15      	ldr	r3, [pc, #84]	@ (8000f4c <HAL_Init+0x68>)
 8000ef8:	699b      	ldr	r3, [r3, #24]
 8000efa:	0a1b      	lsrs	r3, r3, #8
 8000efc:	f003 030f 	and.w	r3, r3, #15
 8000f00:	4913      	ldr	r1, [pc, #76]	@ (8000f50 <HAL_Init+0x6c>)
 8000f02:	5ccb      	ldrb	r3, [r1, r3]
 8000f04:	f003 031f 	and.w	r3, r3, #31
 8000f08:	fa22 f303 	lsr.w	r3, r2, r3
 8000f0c:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000f0e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f4c <HAL_Init+0x68>)
 8000f10:	699b      	ldr	r3, [r3, #24]
 8000f12:	f003 030f 	and.w	r3, r3, #15
 8000f16:	4a0e      	ldr	r2, [pc, #56]	@ (8000f50 <HAL_Init+0x6c>)
 8000f18:	5cd3      	ldrb	r3, [r2, r3]
 8000f1a:	f003 031f 	and.w	r3, r3, #31
 8000f1e:	687a      	ldr	r2, [r7, #4]
 8000f20:	fa22 f303 	lsr.w	r3, r2, r3
 8000f24:	4a0b      	ldr	r2, [pc, #44]	@ (8000f54 <HAL_Init+0x70>)
 8000f26:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000f28:	4a0b      	ldr	r2, [pc, #44]	@ (8000f58 <HAL_Init+0x74>)
 8000f2a:	687b      	ldr	r3, [r7, #4]
 8000f2c:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f2e:	2000      	movs	r0, #0
 8000f30:	f000 f814 	bl	8000f5c <HAL_InitTick>
 8000f34:	4603      	mov	r3, r0
 8000f36:	2b00      	cmp	r3, #0
 8000f38:	d001      	beq.n	8000f3e <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	e002      	b.n	8000f44 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f3e:	f7ff fe6b 	bl	8000c18 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f42:	2300      	movs	r3, #0
}
 8000f44:	4618      	mov	r0, r3
 8000f46:	3708      	adds	r7, #8
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bd80      	pop	{r7, pc}
 8000f4c:	58024400 	.word	0x58024400
 8000f50:	0800a5f8 	.word	0x0800a5f8
 8000f54:	24000004 	.word	0x24000004
 8000f58:	24000000 	.word	0x24000000

08000f5c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b082      	sub	sp, #8
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f64:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <HAL_InitTick+0x60>)
 8000f66:	781b      	ldrb	r3, [r3, #0]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	d101      	bne.n	8000f70 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	e021      	b.n	8000fb4 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <HAL_InitTick+0x64>)
 8000f72:	681a      	ldr	r2, [r3, #0]
 8000f74:	4b11      	ldr	r3, [pc, #68]	@ (8000fbc <HAL_InitTick+0x60>)
 8000f76:	781b      	ldrb	r3, [r3, #0]
 8000f78:	4619      	mov	r1, r3
 8000f7a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000f7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f82:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f86:	4618      	mov	r0, r3
 8000f88:	f000 f955 	bl	8001236 <HAL_SYSTICK_Config>
 8000f8c:	4603      	mov	r3, r0
 8000f8e:	2b00      	cmp	r3, #0
 8000f90:	d001      	beq.n	8000f96 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f92:	2301      	movs	r3, #1
 8000f94:	e00e      	b.n	8000fb4 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2b0f      	cmp	r3, #15
 8000f9a:	d80a      	bhi.n	8000fb2 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000fa4:	f000 f92d 	bl	8001202 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fa8:	4a06      	ldr	r2, [pc, #24]	@ (8000fc4 <HAL_InitTick+0x68>)
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	e000      	b.n	8000fb4 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000fb2:	2301      	movs	r3, #1
}
 8000fb4:	4618      	mov	r0, r3
 8000fb6:	3708      	adds	r7, #8
 8000fb8:	46bd      	mov	sp, r7
 8000fba:	bd80      	pop	{r7, pc}
 8000fbc:	2400000c 	.word	0x2400000c
 8000fc0:	24000000 	.word	0x24000000
 8000fc4:	24000008 	.word	0x24000008

08000fc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <HAL_IncTick+0x20>)
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	461a      	mov	r2, r3
 8000fd2:	4b06      	ldr	r3, [pc, #24]	@ (8000fec <HAL_IncTick+0x24>)
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	4413      	add	r3, r2
 8000fd8:	4a04      	ldr	r2, [pc, #16]	@ (8000fec <HAL_IncTick+0x24>)
 8000fda:	6013      	str	r3, [r2, #0]
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	2400000c 	.word	0x2400000c
 8000fec:	24010d20 	.word	0x24010d20

08000ff0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff4:	4b03      	ldr	r3, [pc, #12]	@ (8001004 <HAL_GetTick+0x14>)
 8000ff6:	681b      	ldr	r3, [r3, #0]
}
 8000ff8:	4618      	mov	r0, r3
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001000:	4770      	bx	lr
 8001002:	bf00      	nop
 8001004:	24010d20 	.word	0x24010d20

08001008 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b084      	sub	sp, #16
 800100c:	af00      	add	r7, sp, #0
 800100e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001010:	f7ff ffee 	bl	8000ff0 <HAL_GetTick>
 8001014:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101a:	68fb      	ldr	r3, [r7, #12]
 800101c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001020:	d005      	beq.n	800102e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001022:	4b0a      	ldr	r3, [pc, #40]	@ (800104c <HAL_Delay+0x44>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	461a      	mov	r2, r3
 8001028:	68fb      	ldr	r3, [r7, #12]
 800102a:	4413      	add	r3, r2
 800102c:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800102e:	bf00      	nop
 8001030:	f7ff ffde 	bl	8000ff0 <HAL_GetTick>
 8001034:	4602      	mov	r2, r0
 8001036:	68bb      	ldr	r3, [r7, #8]
 8001038:	1ad3      	subs	r3, r2, r3
 800103a:	68fa      	ldr	r2, [r7, #12]
 800103c:	429a      	cmp	r2, r3
 800103e:	d8f7      	bhi.n	8001030 <HAL_Delay+0x28>
  {
  }
}
 8001040:	bf00      	nop
 8001042:	bf00      	nop
 8001044:	3710      	adds	r7, #16
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	2400000c 	.word	0x2400000c

08001050 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001050:	b480      	push	{r7}
 8001052:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001054:	4b03      	ldr	r3, [pc, #12]	@ (8001064 <HAL_GetREVID+0x14>)
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	0c1b      	lsrs	r3, r3, #16
}
 800105a:	4618      	mov	r0, r3
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	5c001000 	.word	0x5c001000

08001068 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 8001068:	b480      	push	{r7}
 800106a:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 800106c:	4b05      	ldr	r3, [pc, #20]	@ (8001084 <HAL_EnableCompensationCell+0x1c>)
 800106e:	6a1b      	ldr	r3, [r3, #32]
 8001070:	4a04      	ldr	r2, [pc, #16]	@ (8001084 <HAL_EnableCompensationCell+0x1c>)
 8001072:	f043 0301 	orr.w	r3, r3, #1
 8001076:	6213      	str	r3, [r2, #32]
}
 8001078:	bf00      	nop
 800107a:	46bd      	mov	sp, r7
 800107c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001080:	4770      	bx	lr
 8001082:	bf00      	nop
 8001084:	58000400 	.word	0x58000400

08001088 <__NVIC_SetPriorityGrouping>:
{
 8001088:	b480      	push	{r7}
 800108a:	b085      	sub	sp, #20
 800108c:	af00      	add	r7, sp, #0
 800108e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	f003 0307 	and.w	r3, r3, #7
 8001096:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001098:	4b0b      	ldr	r3, [pc, #44]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x40>)
 800109a:	68db      	ldr	r3, [r3, #12]
 800109c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800109e:	68ba      	ldr	r2, [r7, #8]
 80010a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80010a4:	4013      	ands	r3, r2
 80010a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80010ac:	68bb      	ldr	r3, [r7, #8]
 80010ae:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80010b0:	4b06      	ldr	r3, [pc, #24]	@ (80010cc <__NVIC_SetPriorityGrouping+0x44>)
 80010b2:	4313      	orrs	r3, r2
 80010b4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80010b6:	4a04      	ldr	r2, [pc, #16]	@ (80010c8 <__NVIC_SetPriorityGrouping+0x40>)
 80010b8:	68bb      	ldr	r3, [r7, #8]
 80010ba:	60d3      	str	r3, [r2, #12]
}
 80010bc:	bf00      	nop
 80010be:	3714      	adds	r7, #20
 80010c0:	46bd      	mov	sp, r7
 80010c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c6:	4770      	bx	lr
 80010c8:	e000ed00 	.word	0xe000ed00
 80010cc:	05fa0000 	.word	0x05fa0000

080010d0 <__NVIC_GetPriorityGrouping>:
{
 80010d0:	b480      	push	{r7}
 80010d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80010d4:	4b04      	ldr	r3, [pc, #16]	@ (80010e8 <__NVIC_GetPriorityGrouping+0x18>)
 80010d6:	68db      	ldr	r3, [r3, #12]
 80010d8:	0a1b      	lsrs	r3, r3, #8
 80010da:	f003 0307 	and.w	r3, r3, #7
}
 80010de:	4618      	mov	r0, r3
 80010e0:	46bd      	mov	sp, r7
 80010e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010e6:	4770      	bx	lr
 80010e8:	e000ed00 	.word	0xe000ed00

080010ec <__NVIC_SetPriority>:
{
 80010ec:	b480      	push	{r7}
 80010ee:	b083      	sub	sp, #12
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	4603      	mov	r3, r0
 80010f4:	6039      	str	r1, [r7, #0]
 80010f6:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80010f8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010fc:	2b00      	cmp	r3, #0
 80010fe:	db0a      	blt.n	8001116 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001100:	683b      	ldr	r3, [r7, #0]
 8001102:	b2da      	uxtb	r2, r3
 8001104:	490c      	ldr	r1, [pc, #48]	@ (8001138 <__NVIC_SetPriority+0x4c>)
 8001106:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800110a:	0112      	lsls	r2, r2, #4
 800110c:	b2d2      	uxtb	r2, r2
 800110e:	440b      	add	r3, r1
 8001110:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8001114:	e00a      	b.n	800112c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	b2da      	uxtb	r2, r3
 800111a:	4908      	ldr	r1, [pc, #32]	@ (800113c <__NVIC_SetPriority+0x50>)
 800111c:	88fb      	ldrh	r3, [r7, #6]
 800111e:	f003 030f 	and.w	r3, r3, #15
 8001122:	3b04      	subs	r3, #4
 8001124:	0112      	lsls	r2, r2, #4
 8001126:	b2d2      	uxtb	r2, r2
 8001128:	440b      	add	r3, r1
 800112a:	761a      	strb	r2, [r3, #24]
}
 800112c:	bf00      	nop
 800112e:	370c      	adds	r7, #12
 8001130:	46bd      	mov	sp, r7
 8001132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001136:	4770      	bx	lr
 8001138:	e000e100 	.word	0xe000e100
 800113c:	e000ed00 	.word	0xe000ed00

08001140 <NVIC_EncodePriority>:
{
 8001140:	b480      	push	{r7}
 8001142:	b089      	sub	sp, #36	@ 0x24
 8001144:	af00      	add	r7, sp, #0
 8001146:	60f8      	str	r0, [r7, #12]
 8001148:	60b9      	str	r1, [r7, #8]
 800114a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	f003 0307 	and.w	r3, r3, #7
 8001152:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001154:	69fb      	ldr	r3, [r7, #28]
 8001156:	f1c3 0307 	rsb	r3, r3, #7
 800115a:	2b04      	cmp	r3, #4
 800115c:	bf28      	it	cs
 800115e:	2304      	movcs	r3, #4
 8001160:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001162:	69fb      	ldr	r3, [r7, #28]
 8001164:	3304      	adds	r3, #4
 8001166:	2b06      	cmp	r3, #6
 8001168:	d902      	bls.n	8001170 <NVIC_EncodePriority+0x30>
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	3b03      	subs	r3, #3
 800116e:	e000      	b.n	8001172 <NVIC_EncodePriority+0x32>
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001174:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001178:	69bb      	ldr	r3, [r7, #24]
 800117a:	fa02 f303 	lsl.w	r3, r2, r3
 800117e:	43da      	mvns	r2, r3
 8001180:	68bb      	ldr	r3, [r7, #8]
 8001182:	401a      	ands	r2, r3
 8001184:	697b      	ldr	r3, [r7, #20]
 8001186:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001188:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800118c:	697b      	ldr	r3, [r7, #20]
 800118e:	fa01 f303 	lsl.w	r3, r1, r3
 8001192:	43d9      	mvns	r1, r3
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001198:	4313      	orrs	r3, r2
}
 800119a:	4618      	mov	r0, r3
 800119c:	3724      	adds	r7, #36	@ 0x24
 800119e:	46bd      	mov	sp, r7
 80011a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011a4:	4770      	bx	lr
	...

080011a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b082      	sub	sp, #8
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	3b01      	subs	r3, #1
 80011b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80011b8:	d301      	bcc.n	80011be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80011ba:	2301      	movs	r3, #1
 80011bc:	e00f      	b.n	80011de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80011be:	4a0a      	ldr	r2, [pc, #40]	@ (80011e8 <SysTick_Config+0x40>)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	3b01      	subs	r3, #1
 80011c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80011c6:	210f      	movs	r1, #15
 80011c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011cc:	f7ff ff8e 	bl	80010ec <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80011d0:	4b05      	ldr	r3, [pc, #20]	@ (80011e8 <SysTick_Config+0x40>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80011d6:	4b04      	ldr	r3, [pc, #16]	@ (80011e8 <SysTick_Config+0x40>)
 80011d8:	2207      	movs	r2, #7
 80011da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80011dc:	2300      	movs	r3, #0
}
 80011de:	4618      	mov	r0, r3
 80011e0:	3708      	adds	r7, #8
 80011e2:	46bd      	mov	sp, r7
 80011e4:	bd80      	pop	{r7, pc}
 80011e6:	bf00      	nop
 80011e8:	e000e010 	.word	0xe000e010

080011ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	b082      	sub	sp, #8
 80011f0:	af00      	add	r7, sp, #0
 80011f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80011f4:	6878      	ldr	r0, [r7, #4]
 80011f6:	f7ff ff47 	bl	8001088 <__NVIC_SetPriorityGrouping>
}
 80011fa:	bf00      	nop
 80011fc:	3708      	adds	r7, #8
 80011fe:	46bd      	mov	sp, r7
 8001200:	bd80      	pop	{r7, pc}

08001202 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001202:	b580      	push	{r7, lr}
 8001204:	b086      	sub	sp, #24
 8001206:	af00      	add	r7, sp, #0
 8001208:	4603      	mov	r3, r0
 800120a:	60b9      	str	r1, [r7, #8]
 800120c:	607a      	str	r2, [r7, #4]
 800120e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001210:	f7ff ff5e 	bl	80010d0 <__NVIC_GetPriorityGrouping>
 8001214:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001216:	687a      	ldr	r2, [r7, #4]
 8001218:	68b9      	ldr	r1, [r7, #8]
 800121a:	6978      	ldr	r0, [r7, #20]
 800121c:	f7ff ff90 	bl	8001140 <NVIC_EncodePriority>
 8001220:	4602      	mov	r2, r0
 8001222:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8001226:	4611      	mov	r1, r2
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff5f 	bl	80010ec <__NVIC_SetPriority>
}
 800122e:	bf00      	nop
 8001230:	3718      	adds	r7, #24
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}

08001236 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001236:	b580      	push	{r7, lr}
 8001238:	b082      	sub	sp, #8
 800123a:	af00      	add	r7, sp, #0
 800123c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800123e:	6878      	ldr	r0, [r7, #4]
 8001240:	f7ff ffb2 	bl	80011a8 <SysTick_Config>
 8001244:	4603      	mov	r3, r0
}
 8001246:	4618      	mov	r0, r3
 8001248:	3708      	adds	r7, #8
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
	...

08001250 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8001250:	b480      	push	{r7}
 8001252:	b089      	sub	sp, #36	@ 0x24
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800125a:	2300      	movs	r3, #0
 800125c:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 800125e:	4b89      	ldr	r3, [pc, #548]	@ (8001484 <HAL_GPIO_Init+0x234>)
 8001260:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8001262:	e194      	b.n	800158e <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8001264:	683b      	ldr	r3, [r7, #0]
 8001266:	681a      	ldr	r2, [r3, #0]
 8001268:	2101      	movs	r1, #1
 800126a:	69fb      	ldr	r3, [r7, #28]
 800126c:	fa01 f303 	lsl.w	r3, r1, r3
 8001270:	4013      	ands	r3, r2
 8001272:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8001274:	693b      	ldr	r3, [r7, #16]
 8001276:	2b00      	cmp	r3, #0
 8001278:	f000 8186 	beq.w	8001588 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	685b      	ldr	r3, [r3, #4]
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	2b01      	cmp	r3, #1
 8001286:	d005      	beq.n	8001294 <HAL_GPIO_Init+0x44>
 8001288:	683b      	ldr	r3, [r7, #0]
 800128a:	685b      	ldr	r3, [r3, #4]
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	2b02      	cmp	r3, #2
 8001292:	d130      	bne.n	80012f6 <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	689b      	ldr	r3, [r3, #8]
 8001298:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800129a:	69fb      	ldr	r3, [r7, #28]
 800129c:	005b      	lsls	r3, r3, #1
 800129e:	2203      	movs	r2, #3
 80012a0:	fa02 f303 	lsl.w	r3, r2, r3
 80012a4:	43db      	mvns	r3, r3
 80012a6:	69ba      	ldr	r2, [r7, #24]
 80012a8:	4013      	ands	r3, r2
 80012aa:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80012ac:	683b      	ldr	r3, [r7, #0]
 80012ae:	68da      	ldr	r2, [r3, #12]
 80012b0:	69fb      	ldr	r3, [r7, #28]
 80012b2:	005b      	lsls	r3, r3, #1
 80012b4:	fa02 f303 	lsl.w	r3, r2, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4313      	orrs	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	685b      	ldr	r3, [r3, #4]
 80012c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80012ca:	2201      	movs	r2, #1
 80012cc:	69fb      	ldr	r3, [r7, #28]
 80012ce:	fa02 f303 	lsl.w	r3, r2, r3
 80012d2:	43db      	mvns	r3, r3
 80012d4:	69ba      	ldr	r2, [r7, #24]
 80012d6:	4013      	ands	r3, r2
 80012d8:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80012da:	683b      	ldr	r3, [r7, #0]
 80012dc:	685b      	ldr	r3, [r3, #4]
 80012de:	091b      	lsrs	r3, r3, #4
 80012e0:	f003 0201 	and.w	r2, r3, #1
 80012e4:	69fb      	ldr	r3, [r7, #28]
 80012e6:	fa02 f303 	lsl.w	r3, r2, r3
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	4313      	orrs	r3, r2
 80012ee:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80012f0:	687b      	ldr	r3, [r7, #4]
 80012f2:	69ba      	ldr	r2, [r7, #24]
 80012f4:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80012f6:	683b      	ldr	r3, [r7, #0]
 80012f8:	685b      	ldr	r3, [r3, #4]
 80012fa:	f003 0303 	and.w	r3, r3, #3
 80012fe:	2b03      	cmp	r3, #3
 8001300:	d017      	beq.n	8001332 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	68db      	ldr	r3, [r3, #12]
 8001306:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	005b      	lsls	r3, r3, #1
 800130c:	2203      	movs	r2, #3
 800130e:	fa02 f303 	lsl.w	r3, r2, r3
 8001312:	43db      	mvns	r3, r3
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	4013      	ands	r3, r2
 8001318:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800131a:	683b      	ldr	r3, [r7, #0]
 800131c:	689a      	ldr	r2, [r3, #8]
 800131e:	69fb      	ldr	r3, [r7, #28]
 8001320:	005b      	lsls	r3, r3, #1
 8001322:	fa02 f303 	lsl.w	r3, r2, r3
 8001326:	69ba      	ldr	r2, [r7, #24]
 8001328:	4313      	orrs	r3, r2
 800132a:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800132c:	687b      	ldr	r3, [r7, #4]
 800132e:	69ba      	ldr	r2, [r7, #24]
 8001330:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001332:	683b      	ldr	r3, [r7, #0]
 8001334:	685b      	ldr	r3, [r3, #4]
 8001336:	f003 0303 	and.w	r3, r3, #3
 800133a:	2b02      	cmp	r3, #2
 800133c:	d123      	bne.n	8001386 <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800133e:	69fb      	ldr	r3, [r7, #28]
 8001340:	08da      	lsrs	r2, r3, #3
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	3208      	adds	r2, #8
 8001346:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800134a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 800134c:	69fb      	ldr	r3, [r7, #28]
 800134e:	f003 0307 	and.w	r3, r3, #7
 8001352:	009b      	lsls	r3, r3, #2
 8001354:	220f      	movs	r2, #15
 8001356:	fa02 f303 	lsl.w	r3, r2, r3
 800135a:	43db      	mvns	r3, r3
 800135c:	69ba      	ldr	r2, [r7, #24]
 800135e:	4013      	ands	r3, r2
 8001360:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8001362:	683b      	ldr	r3, [r7, #0]
 8001364:	691a      	ldr	r2, [r3, #16]
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	f003 0307 	and.w	r3, r3, #7
 800136c:	009b      	lsls	r3, r3, #2
 800136e:	fa02 f303 	lsl.w	r3, r2, r3
 8001372:	69ba      	ldr	r2, [r7, #24]
 8001374:	4313      	orrs	r3, r2
 8001376:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001378:	69fb      	ldr	r3, [r7, #28]
 800137a:	08da      	lsrs	r2, r3, #3
 800137c:	687b      	ldr	r3, [r7, #4]
 800137e:	3208      	adds	r2, #8
 8001380:	69b9      	ldr	r1, [r7, #24]
 8001382:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800138c:	69fb      	ldr	r3, [r7, #28]
 800138e:	005b      	lsls	r3, r3, #1
 8001390:	2203      	movs	r2, #3
 8001392:	fa02 f303 	lsl.w	r3, r2, r3
 8001396:	43db      	mvns	r3, r3
 8001398:	69ba      	ldr	r2, [r7, #24]
 800139a:	4013      	ands	r3, r2
 800139c:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800139e:	683b      	ldr	r3, [r7, #0]
 80013a0:	685b      	ldr	r3, [r3, #4]
 80013a2:	f003 0203 	and.w	r2, r3, #3
 80013a6:	69fb      	ldr	r3, [r7, #28]
 80013a8:	005b      	lsls	r3, r3, #1
 80013aa:	fa02 f303 	lsl.w	r3, r2, r3
 80013ae:	69ba      	ldr	r2, [r7, #24]
 80013b0:	4313      	orrs	r3, r2
 80013b2:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	69ba      	ldr	r2, [r7, #24]
 80013b8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80013ba:	683b      	ldr	r3, [r7, #0]
 80013bc:	685b      	ldr	r3, [r3, #4]
 80013be:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80013c2:	2b00      	cmp	r3, #0
 80013c4:	f000 80e0 	beq.w	8001588 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013c8:	4b2f      	ldr	r3, [pc, #188]	@ (8001488 <HAL_GPIO_Init+0x238>)
 80013ca:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013ce:	4a2e      	ldr	r2, [pc, #184]	@ (8001488 <HAL_GPIO_Init+0x238>)
 80013d0:	f043 0302 	orr.w	r3, r3, #2
 80013d4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 80013d8:	4b2b      	ldr	r3, [pc, #172]	@ (8001488 <HAL_GPIO_Init+0x238>)
 80013da:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 80013de:	f003 0302 	and.w	r3, r3, #2
 80013e2:	60fb      	str	r3, [r7, #12]
 80013e4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80013e6:	4a29      	ldr	r2, [pc, #164]	@ (800148c <HAL_GPIO_Init+0x23c>)
 80013e8:	69fb      	ldr	r3, [r7, #28]
 80013ea:	089b      	lsrs	r3, r3, #2
 80013ec:	3302      	adds	r3, #2
 80013ee:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013f2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 80013f4:	69fb      	ldr	r3, [r7, #28]
 80013f6:	f003 0303 	and.w	r3, r3, #3
 80013fa:	009b      	lsls	r3, r3, #2
 80013fc:	220f      	movs	r2, #15
 80013fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001402:	43db      	mvns	r3, r3
 8001404:	69ba      	ldr	r2, [r7, #24]
 8001406:	4013      	ands	r3, r2
 8001408:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	4a20      	ldr	r2, [pc, #128]	@ (8001490 <HAL_GPIO_Init+0x240>)
 800140e:	4293      	cmp	r3, r2
 8001410:	d052      	beq.n	80014b8 <HAL_GPIO_Init+0x268>
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	4a1f      	ldr	r2, [pc, #124]	@ (8001494 <HAL_GPIO_Init+0x244>)
 8001416:	4293      	cmp	r3, r2
 8001418:	d031      	beq.n	800147e <HAL_GPIO_Init+0x22e>
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	4a1e      	ldr	r2, [pc, #120]	@ (8001498 <HAL_GPIO_Init+0x248>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d02b      	beq.n	800147a <HAL_GPIO_Init+0x22a>
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	4a1d      	ldr	r2, [pc, #116]	@ (800149c <HAL_GPIO_Init+0x24c>)
 8001426:	4293      	cmp	r3, r2
 8001428:	d025      	beq.n	8001476 <HAL_GPIO_Init+0x226>
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	4a1c      	ldr	r2, [pc, #112]	@ (80014a0 <HAL_GPIO_Init+0x250>)
 800142e:	4293      	cmp	r3, r2
 8001430:	d01f      	beq.n	8001472 <HAL_GPIO_Init+0x222>
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	4a1b      	ldr	r2, [pc, #108]	@ (80014a4 <HAL_GPIO_Init+0x254>)
 8001436:	4293      	cmp	r3, r2
 8001438:	d019      	beq.n	800146e <HAL_GPIO_Init+0x21e>
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	4a1a      	ldr	r2, [pc, #104]	@ (80014a8 <HAL_GPIO_Init+0x258>)
 800143e:	4293      	cmp	r3, r2
 8001440:	d013      	beq.n	800146a <HAL_GPIO_Init+0x21a>
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	4a19      	ldr	r2, [pc, #100]	@ (80014ac <HAL_GPIO_Init+0x25c>)
 8001446:	4293      	cmp	r3, r2
 8001448:	d00d      	beq.n	8001466 <HAL_GPIO_Init+0x216>
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	4a18      	ldr	r2, [pc, #96]	@ (80014b0 <HAL_GPIO_Init+0x260>)
 800144e:	4293      	cmp	r3, r2
 8001450:	d007      	beq.n	8001462 <HAL_GPIO_Init+0x212>
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	4a17      	ldr	r2, [pc, #92]	@ (80014b4 <HAL_GPIO_Init+0x264>)
 8001456:	4293      	cmp	r3, r2
 8001458:	d101      	bne.n	800145e <HAL_GPIO_Init+0x20e>
 800145a:	2309      	movs	r3, #9
 800145c:	e02d      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800145e:	230a      	movs	r3, #10
 8001460:	e02b      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001462:	2308      	movs	r3, #8
 8001464:	e029      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001466:	2307      	movs	r3, #7
 8001468:	e027      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800146a:	2306      	movs	r3, #6
 800146c:	e025      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800146e:	2305      	movs	r3, #5
 8001470:	e023      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001472:	2304      	movs	r3, #4
 8001474:	e021      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001476:	2303      	movs	r3, #3
 8001478:	e01f      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800147a:	2302      	movs	r3, #2
 800147c:	e01d      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 800147e:	2301      	movs	r3, #1
 8001480:	e01b      	b.n	80014ba <HAL_GPIO_Init+0x26a>
 8001482:	bf00      	nop
 8001484:	58000080 	.word	0x58000080
 8001488:	58024400 	.word	0x58024400
 800148c:	58000400 	.word	0x58000400
 8001490:	58020000 	.word	0x58020000
 8001494:	58020400 	.word	0x58020400
 8001498:	58020800 	.word	0x58020800
 800149c:	58020c00 	.word	0x58020c00
 80014a0:	58021000 	.word	0x58021000
 80014a4:	58021400 	.word	0x58021400
 80014a8:	58021800 	.word	0x58021800
 80014ac:	58021c00 	.word	0x58021c00
 80014b0:	58022000 	.word	0x58022000
 80014b4:	58022400 	.word	0x58022400
 80014b8:	2300      	movs	r3, #0
 80014ba:	69fa      	ldr	r2, [r7, #28]
 80014bc:	f002 0203 	and.w	r2, r2, #3
 80014c0:	0092      	lsls	r2, r2, #2
 80014c2:	4093      	lsls	r3, r2
 80014c4:	69ba      	ldr	r2, [r7, #24]
 80014c6:	4313      	orrs	r3, r2
 80014c8:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80014ca:	4938      	ldr	r1, [pc, #224]	@ (80015ac <HAL_GPIO_Init+0x35c>)
 80014cc:	69fb      	ldr	r3, [r7, #28]
 80014ce:	089b      	lsrs	r3, r3, #2
 80014d0:	3302      	adds	r3, #2
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80014d8:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 80014e0:	693b      	ldr	r3, [r7, #16]
 80014e2:	43db      	mvns	r3, r3
 80014e4:	69ba      	ldr	r2, [r7, #24]
 80014e6:	4013      	ands	r3, r2
 80014e8:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	685b      	ldr	r3, [r3, #4]
 80014ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d003      	beq.n	80014fe <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 80014f6:	69ba      	ldr	r2, [r7, #24]
 80014f8:	693b      	ldr	r3, [r7, #16]
 80014fa:	4313      	orrs	r3, r2
 80014fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 80014fe:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001502:	69bb      	ldr	r3, [r7, #24]
 8001504:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8001506:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800150e:	693b      	ldr	r3, [r7, #16]
 8001510:	43db      	mvns	r3, r3
 8001512:	69ba      	ldr	r2, [r7, #24]
 8001514:	4013      	ands	r3, r2
 8001516:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001518:	683b      	ldr	r3, [r7, #0]
 800151a:	685b      	ldr	r3, [r3, #4]
 800151c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001520:	2b00      	cmp	r3, #0
 8001522:	d003      	beq.n	800152c <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001524:	69ba      	ldr	r2, [r7, #24]
 8001526:	693b      	ldr	r3, [r7, #16]
 8001528:	4313      	orrs	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 800152c:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8001530:	69bb      	ldr	r3, [r7, #24]
 8001532:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8001534:	697b      	ldr	r3, [r7, #20]
 8001536:	685b      	ldr	r3, [r3, #4]
 8001538:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800153a:	693b      	ldr	r3, [r7, #16]
 800153c:	43db      	mvns	r3, r3
 800153e:	69ba      	ldr	r2, [r7, #24]
 8001540:	4013      	ands	r3, r2
 8001542:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800154c:	2b00      	cmp	r3, #0
 800154e:	d003      	beq.n	8001558 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8001550:	69ba      	ldr	r2, [r7, #24]
 8001552:	693b      	ldr	r3, [r7, #16]
 8001554:	4313      	orrs	r3, r2
 8001556:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8001558:	697b      	ldr	r3, [r7, #20]
 800155a:	69ba      	ldr	r2, [r7, #24]
 800155c:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 800155e:	697b      	ldr	r3, [r7, #20]
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8001564:	693b      	ldr	r3, [r7, #16]
 8001566:	43db      	mvns	r3, r3
 8001568:	69ba      	ldr	r2, [r7, #24]
 800156a:	4013      	ands	r3, r2
 800156c:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	685b      	ldr	r3, [r3, #4]
 8001572:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001576:	2b00      	cmp	r3, #0
 8001578:	d003      	beq.n	8001582 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800157a:	69ba      	ldr	r2, [r7, #24]
 800157c:	693b      	ldr	r3, [r7, #16]
 800157e:	4313      	orrs	r3, r2
 8001580:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8001582:	697b      	ldr	r3, [r7, #20]
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8001588:	69fb      	ldr	r3, [r7, #28]
 800158a:	3301      	adds	r3, #1
 800158c:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 800158e:	683b      	ldr	r3, [r7, #0]
 8001590:	681a      	ldr	r2, [r3, #0]
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	fa22 f303 	lsr.w	r3, r2, r3
 8001598:	2b00      	cmp	r3, #0
 800159a:	f47f ae63 	bne.w	8001264 <HAL_GPIO_Init+0x14>
  }
}
 800159e:	bf00      	nop
 80015a0:	bf00      	nop
 80015a2:	3724      	adds	r7, #36	@ 0x24
 80015a4:	46bd      	mov	sp, r7
 80015a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015aa:	4770      	bx	lr
 80015ac:	58000400 	.word	0x58000400

080015b0 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 80015b0:	b480      	push	{r7}
 80015b2:	b083      	sub	sp, #12
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 80015b8:	4a08      	ldr	r2, [pc, #32]	@ (80015dc <HAL_HSEM_FastTake+0x2c>)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	3320      	adds	r3, #32
 80015be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80015c2:	4a07      	ldr	r2, [pc, #28]	@ (80015e0 <HAL_HSEM_FastTake+0x30>)
 80015c4:	4293      	cmp	r3, r2
 80015c6:	d101      	bne.n	80015cc <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 80015c8:	2300      	movs	r3, #0
 80015ca:	e000      	b.n	80015ce <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
}
 80015ce:	4618      	mov	r0, r3
 80015d0:	370c      	adds	r7, #12
 80015d2:	46bd      	mov	sp, r7
 80015d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d8:	4770      	bx	lr
 80015da:	bf00      	nop
 80015dc:	58026400 	.word	0x58026400
 80015e0:	80000300 	.word	0x80000300

080015e4 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b083      	sub	sp, #12
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80015ee:	4906      	ldr	r1, [pc, #24]	@ (8001608 <HAL_HSEM_Release+0x24>)
 80015f0:	683b      	ldr	r3, [r7, #0]
 80015f2:	f443 7240 	orr.w	r2, r3, #768	@ 0x300
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80015fc:	bf00      	nop
 80015fe:	370c      	adds	r7, #12
 8001600:	46bd      	mov	sp, r7
 8001602:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001606:	4770      	bx	lr
 8001608:	58026400 	.word	0x58026400

0800160c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800160c:	b580      	push	{r7, lr}
 800160e:	b08c      	sub	sp, #48	@ 0x30
 8001610:	af00      	add	r7, sp, #0
 8001612:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	2b00      	cmp	r3, #0
 8001618:	d102      	bne.n	8001620 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 800161a:	2301      	movs	r3, #1
 800161c:	f000 bc48 	b.w	8001eb0 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f003 0301 	and.w	r3, r3, #1
 8001628:	2b00      	cmp	r3, #0
 800162a:	f000 8088 	beq.w	800173e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800162e:	4b99      	ldr	r3, [pc, #612]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001630:	691b      	ldr	r3, [r3, #16]
 8001632:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001636:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001638:	4b96      	ldr	r3, [pc, #600]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800163a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800163c:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 800163e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001640:	2b10      	cmp	r3, #16
 8001642:	d007      	beq.n	8001654 <HAL_RCC_OscConfig+0x48>
 8001644:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001646:	2b18      	cmp	r3, #24
 8001648:	d111      	bne.n	800166e <HAL_RCC_OscConfig+0x62>
 800164a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800164c:	f003 0303 	and.w	r3, r3, #3
 8001650:	2b02      	cmp	r3, #2
 8001652:	d10c      	bne.n	800166e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001654:	4b8f      	ldr	r3, [pc, #572]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001656:	681b      	ldr	r3, [r3, #0]
 8001658:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800165c:	2b00      	cmp	r3, #0
 800165e:	d06d      	beq.n	800173c <HAL_RCC_OscConfig+0x130>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	2b00      	cmp	r3, #0
 8001666:	d169      	bne.n	800173c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8001668:	2301      	movs	r3, #1
 800166a:	f000 bc21 	b.w	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001676:	d106      	bne.n	8001686 <HAL_RCC_OscConfig+0x7a>
 8001678:	4b86      	ldr	r3, [pc, #536]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a85      	ldr	r2, [pc, #532]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800167e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001682:	6013      	str	r3, [r2, #0]
 8001684:	e02e      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 8001686:	687b      	ldr	r3, [r7, #4]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	2b00      	cmp	r3, #0
 800168c:	d10c      	bne.n	80016a8 <HAL_RCC_OscConfig+0x9c>
 800168e:	4b81      	ldr	r3, [pc, #516]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	4a80      	ldr	r2, [pc, #512]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001694:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001698:	6013      	str	r3, [r2, #0]
 800169a:	4b7e      	ldr	r3, [pc, #504]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	4a7d      	ldr	r2, [pc, #500]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a4:	6013      	str	r3, [r2, #0]
 80016a6:	e01d      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80016b0:	d10c      	bne.n	80016cc <HAL_RCC_OscConfig+0xc0>
 80016b2:	4b78      	ldr	r3, [pc, #480]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	4a77      	ldr	r2, [pc, #476]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80016bc:	6013      	str	r3, [r2, #0]
 80016be:	4b75      	ldr	r3, [pc, #468]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	4a74      	ldr	r2, [pc, #464]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80016c8:	6013      	str	r3, [r2, #0]
 80016ca:	e00b      	b.n	80016e4 <HAL_RCC_OscConfig+0xd8>
 80016cc:	4b71      	ldr	r3, [pc, #452]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	4a70      	ldr	r2, [pc, #448]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80016d6:	6013      	str	r3, [r2, #0]
 80016d8:	4b6e      	ldr	r3, [pc, #440]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a6d      	ldr	r2, [pc, #436]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80016de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	685b      	ldr	r3, [r3, #4]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	d013      	beq.n	8001714 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80016ec:	f7ff fc80 	bl	8000ff0 <HAL_GetTick>
 80016f0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80016f2:	e008      	b.n	8001706 <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016f4:	f7ff fc7c 	bl	8000ff0 <HAL_GetTick>
 80016f8:	4602      	mov	r2, r0
 80016fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80016fc:	1ad3      	subs	r3, r2, r3
 80016fe:	2b64      	cmp	r3, #100	@ 0x64
 8001700:	d901      	bls.n	8001706 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001702:	2303      	movs	r3, #3
 8001704:	e3d4      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8001706:	4b63      	ldr	r3, [pc, #396]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800170e:	2b00      	cmp	r3, #0
 8001710:	d0f0      	beq.n	80016f4 <HAL_RCC_OscConfig+0xe8>
 8001712:	e014      	b.n	800173e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001714:	f7ff fc6c 	bl	8000ff0 <HAL_GetTick>
 8001718:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800171a:	e008      	b.n	800172e <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800171c:	f7ff fc68 	bl	8000ff0 <HAL_GetTick>
 8001720:	4602      	mov	r2, r0
 8001722:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001724:	1ad3      	subs	r3, r2, r3
 8001726:	2b64      	cmp	r3, #100	@ 0x64
 8001728:	d901      	bls.n	800172e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800172a:	2303      	movs	r3, #3
 800172c:	e3c0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 800172e:	4b59      	ldr	r3, [pc, #356]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001730:	681b      	ldr	r3, [r3, #0]
 8001732:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001736:	2b00      	cmp	r3, #0
 8001738:	d1f0      	bne.n	800171c <HAL_RCC_OscConfig+0x110>
 800173a:	e000      	b.n	800173e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800173c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f003 0302 	and.w	r3, r3, #2
 8001746:	2b00      	cmp	r3, #0
 8001748:	f000 80ca 	beq.w	80018e0 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800174c:	4b51      	ldr	r3, [pc, #324]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800174e:	691b      	ldr	r3, [r3, #16]
 8001750:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001754:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8001756:	4b4f      	ldr	r3, [pc, #316]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001758:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800175a:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 800175c:	6a3b      	ldr	r3, [r7, #32]
 800175e:	2b00      	cmp	r3, #0
 8001760:	d007      	beq.n	8001772 <HAL_RCC_OscConfig+0x166>
 8001762:	6a3b      	ldr	r3, [r7, #32]
 8001764:	2b18      	cmp	r3, #24
 8001766:	d156      	bne.n	8001816 <HAL_RCC_OscConfig+0x20a>
 8001768:	69fb      	ldr	r3, [r7, #28]
 800176a:	f003 0303 	and.w	r3, r3, #3
 800176e:	2b00      	cmp	r3, #0
 8001770:	d151      	bne.n	8001816 <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001772:	4b48      	ldr	r3, [pc, #288]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001774:	681b      	ldr	r3, [r3, #0]
 8001776:	f003 0304 	and.w	r3, r3, #4
 800177a:	2b00      	cmp	r3, #0
 800177c:	d005      	beq.n	800178a <HAL_RCC_OscConfig+0x17e>
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d101      	bne.n	800178a <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8001786:	2301      	movs	r3, #1
 8001788:	e392      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800178a:	4b42      	ldr	r3, [pc, #264]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	f023 0219 	bic.w	r2, r3, #25
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	68db      	ldr	r3, [r3, #12]
 8001796:	493f      	ldr	r1, [pc, #252]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800179c:	f7ff fc28 	bl	8000ff0 <HAL_GetTick>
 80017a0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017a2:	e008      	b.n	80017b6 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017a4:	f7ff fc24 	bl	8000ff0 <HAL_GetTick>
 80017a8:	4602      	mov	r2, r0
 80017aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80017ac:	1ad3      	subs	r3, r2, r3
 80017ae:	2b02      	cmp	r3, #2
 80017b0:	d901      	bls.n	80017b6 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 80017b2:	2303      	movs	r3, #3
 80017b4:	e37c      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80017b6:	4b37      	ldr	r3, [pc, #220]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	f003 0304 	and.w	r3, r3, #4
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d0f0      	beq.n	80017a4 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017c2:	f7ff fc45 	bl	8001050 <HAL_GetREVID>
 80017c6:	4603      	mov	r3, r0
 80017c8:	f241 0203 	movw	r2, #4099	@ 0x1003
 80017cc:	4293      	cmp	r3, r2
 80017ce:	d817      	bhi.n	8001800 <HAL_RCC_OscConfig+0x1f4>
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	691b      	ldr	r3, [r3, #16]
 80017d4:	2b40      	cmp	r3, #64	@ 0x40
 80017d6:	d108      	bne.n	80017ea <HAL_RCC_OscConfig+0x1de>
 80017d8:	4b2e      	ldr	r3, [pc, #184]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 80017e0:	4a2c      	ldr	r2, [pc, #176]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017e2:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017e6:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017e8:	e07a      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017ea:	4b2a      	ldr	r3, [pc, #168]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017ec:	685b      	ldr	r3, [r3, #4]
 80017ee:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	691b      	ldr	r3, [r3, #16]
 80017f6:	031b      	lsls	r3, r3, #12
 80017f8:	4926      	ldr	r1, [pc, #152]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 80017fa:	4313      	orrs	r3, r2
 80017fc:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80017fe:	e06f      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001800:	4b24      	ldr	r3, [pc, #144]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001802:	685b      	ldr	r3, [r3, #4]
 8001804:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	691b      	ldr	r3, [r3, #16]
 800180c:	061b      	lsls	r3, r3, #24
 800180e:	4921      	ldr	r1, [pc, #132]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001810:	4313      	orrs	r3, r2
 8001812:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001814:	e064      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	68db      	ldr	r3, [r3, #12]
 800181a:	2b00      	cmp	r3, #0
 800181c:	d047      	beq.n	80018ae <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 800181e:	4b1d      	ldr	r3, [pc, #116]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	f023 0219 	bic.w	r2, r3, #25
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	68db      	ldr	r3, [r3, #12]
 800182a:	491a      	ldr	r1, [pc, #104]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800182c:	4313      	orrs	r3, r2
 800182e:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001830:	f7ff fbde 	bl	8000ff0 <HAL_GetTick>
 8001834:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8001836:	e008      	b.n	800184a <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001838:	f7ff fbda 	bl	8000ff0 <HAL_GetTick>
 800183c:	4602      	mov	r2, r0
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	1ad3      	subs	r3, r2, r3
 8001842:	2b02      	cmp	r3, #2
 8001844:	d901      	bls.n	800184a <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 8001846:	2303      	movs	r3, #3
 8001848:	e332      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800184a:	4b12      	ldr	r3, [pc, #72]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f003 0304 	and.w	r3, r3, #4
 8001852:	2b00      	cmp	r3, #0
 8001854:	d0f0      	beq.n	8001838 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001856:	f7ff fbfb 	bl	8001050 <HAL_GetREVID>
 800185a:	4603      	mov	r3, r0
 800185c:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001860:	4293      	cmp	r3, r2
 8001862:	d819      	bhi.n	8001898 <HAL_RCC_OscConfig+0x28c>
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	691b      	ldr	r3, [r3, #16]
 8001868:	2b40      	cmp	r3, #64	@ 0x40
 800186a:	d108      	bne.n	800187e <HAL_RCC_OscConfig+0x272>
 800186c:	4b09      	ldr	r3, [pc, #36]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800186e:	685b      	ldr	r3, [r3, #4]
 8001870:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 8001874:	4a07      	ldr	r2, [pc, #28]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001876:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800187a:	6053      	str	r3, [r2, #4]
 800187c:	e030      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
 800187e:	4b05      	ldr	r3, [pc, #20]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 8001880:	685b      	ldr	r3, [r3, #4]
 8001882:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	691b      	ldr	r3, [r3, #16]
 800188a:	031b      	lsls	r3, r3, #12
 800188c:	4901      	ldr	r1, [pc, #4]	@ (8001894 <HAL_RCC_OscConfig+0x288>)
 800188e:	4313      	orrs	r3, r2
 8001890:	604b      	str	r3, [r1, #4]
 8001892:	e025      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
 8001894:	58024400 	.word	0x58024400
 8001898:	4b9a      	ldr	r3, [pc, #616]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800189a:	685b      	ldr	r3, [r3, #4]
 800189c:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	691b      	ldr	r3, [r3, #16]
 80018a4:	061b      	lsls	r3, r3, #24
 80018a6:	4997      	ldr	r1, [pc, #604]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018a8:	4313      	orrs	r3, r2
 80018aa:	604b      	str	r3, [r1, #4]
 80018ac:	e018      	b.n	80018e0 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80018ae:	4b95      	ldr	r3, [pc, #596]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a94      	ldr	r2, [pc, #592]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80018ba:	f7ff fb99 	bl	8000ff0 <HAL_GetTick>
 80018be:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018c0:	e008      	b.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80018c2:	f7ff fb95 	bl	8000ff0 <HAL_GetTick>
 80018c6:	4602      	mov	r2, r0
 80018c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ca:	1ad3      	subs	r3, r2, r3
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	d901      	bls.n	80018d4 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 80018d0:	2303      	movs	r3, #3
 80018d2:	e2ed      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80018d4:	4b8b      	ldr	r3, [pc, #556]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	f003 0304 	and.w	r3, r3, #4
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d1f0      	bne.n	80018c2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	681b      	ldr	r3, [r3, #0]
 80018e4:	f003 0310 	and.w	r3, r3, #16
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	f000 80a9 	beq.w	8001a40 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80018ee:	4b85      	ldr	r3, [pc, #532]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018f0:	691b      	ldr	r3, [r3, #16]
 80018f2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80018f6:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80018f8:	4b82      	ldr	r3, [pc, #520]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80018fa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018fc:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 80018fe:	69bb      	ldr	r3, [r7, #24]
 8001900:	2b08      	cmp	r3, #8
 8001902:	d007      	beq.n	8001914 <HAL_RCC_OscConfig+0x308>
 8001904:	69bb      	ldr	r3, [r7, #24]
 8001906:	2b18      	cmp	r3, #24
 8001908:	d13a      	bne.n	8001980 <HAL_RCC_OscConfig+0x374>
 800190a:	697b      	ldr	r3, [r7, #20]
 800190c:	f003 0303 	and.w	r3, r3, #3
 8001910:	2b01      	cmp	r3, #1
 8001912:	d135      	bne.n	8001980 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001914:	4b7b      	ldr	r3, [pc, #492]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800191c:	2b00      	cmp	r3, #0
 800191e:	d005      	beq.n	800192c <HAL_RCC_OscConfig+0x320>
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	69db      	ldr	r3, [r3, #28]
 8001924:	2b80      	cmp	r3, #128	@ 0x80
 8001926:	d001      	beq.n	800192c <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 8001928:	2301      	movs	r3, #1
 800192a:	e2c1      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800192c:	f7ff fb90 	bl	8001050 <HAL_GetREVID>
 8001930:	4603      	mov	r3, r0
 8001932:	f241 0203 	movw	r2, #4099	@ 0x1003
 8001936:	4293      	cmp	r3, r2
 8001938:	d817      	bhi.n	800196a <HAL_RCC_OscConfig+0x35e>
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6a1b      	ldr	r3, [r3, #32]
 800193e:	2b20      	cmp	r3, #32
 8001940:	d108      	bne.n	8001954 <HAL_RCC_OscConfig+0x348>
 8001942:	4b70      	ldr	r3, [pc, #448]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001944:	685b      	ldr	r3, [r3, #4]
 8001946:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 800194a:	4a6e      	ldr	r2, [pc, #440]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800194c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8001950:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001952:	e075      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8001954:	4b6b      	ldr	r3, [pc, #428]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001956:	685b      	ldr	r3, [r3, #4]
 8001958:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 800195c:	687b      	ldr	r3, [r7, #4]
 800195e:	6a1b      	ldr	r3, [r3, #32]
 8001960:	069b      	lsls	r3, r3, #26
 8001962:	4968      	ldr	r1, [pc, #416]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001964:	4313      	orrs	r3, r2
 8001966:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8001968:	e06a      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 800196a:	4b66      	ldr	r3, [pc, #408]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800196c:	68db      	ldr	r3, [r3, #12]
 800196e:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	6a1b      	ldr	r3, [r3, #32]
 8001976:	061b      	lsls	r3, r3, #24
 8001978:	4962      	ldr	r1, [pc, #392]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800197a:	4313      	orrs	r3, r2
 800197c:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800197e:	e05f      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	69db      	ldr	r3, [r3, #28]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d042      	beq.n	8001a0e <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8001988:	4b5e      	ldr	r3, [pc, #376]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	4a5d      	ldr	r2, [pc, #372]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 800198e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001992:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001994:	f7ff fb2c 	bl	8000ff0 <HAL_GetTick>
 8001998:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 800199a:	e008      	b.n	80019ae <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 800199c:	f7ff fb28 	bl	8000ff0 <HAL_GetTick>
 80019a0:	4602      	mov	r2, r0
 80019a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80019a4:	1ad3      	subs	r3, r2, r3
 80019a6:	2b02      	cmp	r3, #2
 80019a8:	d901      	bls.n	80019ae <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 80019aa:	2303      	movs	r3, #3
 80019ac:	e280      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 80019ae:	4b55      	ldr	r3, [pc, #340]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d0f0      	beq.n	800199c <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80019ba:	f7ff fb49 	bl	8001050 <HAL_GetREVID>
 80019be:	4603      	mov	r3, r0
 80019c0:	f241 0203 	movw	r2, #4099	@ 0x1003
 80019c4:	4293      	cmp	r3, r2
 80019c6:	d817      	bhi.n	80019f8 <HAL_RCC_OscConfig+0x3ec>
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a1b      	ldr	r3, [r3, #32]
 80019cc:	2b20      	cmp	r3, #32
 80019ce:	d108      	bne.n	80019e2 <HAL_RCC_OscConfig+0x3d6>
 80019d0:	4b4c      	ldr	r3, [pc, #304]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019d2:	685b      	ldr	r3, [r3, #4]
 80019d4:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 80019d8:	4a4a      	ldr	r2, [pc, #296]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019da:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 80019de:	6053      	str	r3, [r2, #4]
 80019e0:	e02e      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
 80019e2:	4b48      	ldr	r3, [pc, #288]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6a1b      	ldr	r3, [r3, #32]
 80019ee:	069b      	lsls	r3, r3, #26
 80019f0:	4944      	ldr	r1, [pc, #272]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019f2:	4313      	orrs	r3, r2
 80019f4:	604b      	str	r3, [r1, #4]
 80019f6:	e023      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
 80019f8:	4b42      	ldr	r3, [pc, #264]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 80019fa:	68db      	ldr	r3, [r3, #12]
 80019fc:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6a1b      	ldr	r3, [r3, #32]
 8001a04:	061b      	lsls	r3, r3, #24
 8001a06:	493f      	ldr	r1, [pc, #252]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a08:	4313      	orrs	r3, r2
 8001a0a:	60cb      	str	r3, [r1, #12]
 8001a0c:	e018      	b.n	8001a40 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8001a0e:	4b3d      	ldr	r3, [pc, #244]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	4a3c      	ldr	r2, [pc, #240]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a14:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8001a18:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a1a:	f7ff fae9 	bl	8000ff0 <HAL_GetTick>
 8001a1e:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a20:	e008      	b.n	8001a34 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8001a22:	f7ff fae5 	bl	8000ff0 <HAL_GetTick>
 8001a26:	4602      	mov	r2, r0
 8001a28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a2a:	1ad3      	subs	r3, r2, r3
 8001a2c:	2b02      	cmp	r3, #2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e23d      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 8001a34:	4b33      	ldr	r3, [pc, #204]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1f0      	bne.n	8001a22 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	681b      	ldr	r3, [r3, #0]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d036      	beq.n	8001aba <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	695b      	ldr	r3, [r3, #20]
 8001a50:	2b00      	cmp	r3, #0
 8001a52:	d019      	beq.n	8001a88 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001a54:	4b2b      	ldr	r3, [pc, #172]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a56:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a58:	4a2a      	ldr	r2, [pc, #168]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a5a:	f043 0301 	orr.w	r3, r3, #1
 8001a5e:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a60:	f7ff fac6 	bl	8000ff0 <HAL_GetTick>
 8001a64:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a66:	e008      	b.n	8001a7a <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a68:	f7ff fac2 	bl	8000ff0 <HAL_GetTick>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001a70:	1ad3      	subs	r3, r2, r3
 8001a72:	2b02      	cmp	r3, #2
 8001a74:	d901      	bls.n	8001a7a <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 8001a76:	2303      	movs	r3, #3
 8001a78:	e21a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8001a7a:	4b22      	ldr	r3, [pc, #136]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a7c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a7e:	f003 0302 	and.w	r3, r3, #2
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d0f0      	beq.n	8001a68 <HAL_RCC_OscConfig+0x45c>
 8001a86:	e018      	b.n	8001aba <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001a88:	4b1e      	ldr	r3, [pc, #120]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a8c:	4a1d      	ldr	r2, [pc, #116]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001a8e:	f023 0301 	bic.w	r3, r3, #1
 8001a92:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a94:	f7ff faac 	bl	8000ff0 <HAL_GetTick>
 8001a98:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001a9a:	e008      	b.n	8001aae <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a9c:	f7ff faa8 	bl	8000ff0 <HAL_GetTick>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aa4:	1ad3      	subs	r3, r2, r3
 8001aa6:	2b02      	cmp	r3, #2
 8001aa8:	d901      	bls.n	8001aae <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8001aaa:	2303      	movs	r3, #3
 8001aac:	e200      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001aae:	4b15      	ldr	r3, [pc, #84]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001ab0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001ab2:	f003 0302 	and.w	r3, r3, #2
 8001ab6:	2b00      	cmp	r3, #0
 8001ab8:	d1f0      	bne.n	8001a9c <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	681b      	ldr	r3, [r3, #0]
 8001abe:	f003 0320 	and.w	r3, r3, #32
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	d039      	beq.n	8001b3a <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	699b      	ldr	r3, [r3, #24]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d01c      	beq.n	8001b08 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8001ace:	4b0d      	ldr	r3, [pc, #52]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	4a0c      	ldr	r2, [pc, #48]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001ad4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001ad8:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001ada:	f7ff fa89 	bl	8000ff0 <HAL_GetTick>
 8001ade:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001ae0:	e008      	b.n	8001af4 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001ae2:	f7ff fa85 	bl	8000ff0 <HAL_GetTick>
 8001ae6:	4602      	mov	r2, r0
 8001ae8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001aea:	1ad3      	subs	r3, r2, r3
 8001aec:	2b02      	cmp	r3, #2
 8001aee:	d901      	bls.n	8001af4 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8001af0:	2303      	movs	r3, #3
 8001af2:	e1dd      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8001af4:	4b03      	ldr	r3, [pc, #12]	@ (8001b04 <HAL_RCC_OscConfig+0x4f8>)
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001afc:	2b00      	cmp	r3, #0
 8001afe:	d0f0      	beq.n	8001ae2 <HAL_RCC_OscConfig+0x4d6>
 8001b00:	e01b      	b.n	8001b3a <HAL_RCC_OscConfig+0x52e>
 8001b02:	bf00      	nop
 8001b04:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8001b08:	4b9b      	ldr	r3, [pc, #620]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
 8001b0c:	4a9a      	ldr	r2, [pc, #616]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b0e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8001b12:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8001b14:	f7ff fa6c 	bl	8000ff0 <HAL_GetTick>
 8001b18:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b1a:	e008      	b.n	8001b2e <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8001b1c:	f7ff fa68 	bl	8000ff0 <HAL_GetTick>
 8001b20:	4602      	mov	r2, r0
 8001b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b24:	1ad3      	subs	r3, r2, r3
 8001b26:	2b02      	cmp	r3, #2
 8001b28:	d901      	bls.n	8001b2e <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 8001b2a:	2303      	movs	r3, #3
 8001b2c:	e1c0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8001b2e:	4b92      	ldr	r3, [pc, #584]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d1f0      	bne.n	8001b1c <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	f003 0304 	and.w	r3, r3, #4
 8001b42:	2b00      	cmp	r3, #0
 8001b44:	f000 8081 	beq.w	8001c4a <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8001b48:	4b8c      	ldr	r3, [pc, #560]	@ (8001d7c <HAL_RCC_OscConfig+0x770>)
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	4a8b      	ldr	r2, [pc, #556]	@ (8001d7c <HAL_RCC_OscConfig+0x770>)
 8001b4e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001b52:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8001b54:	f7ff fa4c 	bl	8000ff0 <HAL_GetTick>
 8001b58:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b5a:	e008      	b.n	8001b6e <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001b5c:	f7ff fa48 	bl	8000ff0 <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b64      	cmp	r3, #100	@ 0x64
 8001b68:	d901      	bls.n	8001b6e <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 8001b6a:	2303      	movs	r3, #3
 8001b6c:	e1a0      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8001b6e:	4b83      	ldr	r3, [pc, #524]	@ (8001d7c <HAL_RCC_OscConfig+0x770>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d0f0      	beq.n	8001b5c <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	689b      	ldr	r3, [r3, #8]
 8001b7e:	2b01      	cmp	r3, #1
 8001b80:	d106      	bne.n	8001b90 <HAL_RCC_OscConfig+0x584>
 8001b82:	4b7d      	ldr	r3, [pc, #500]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b86:	4a7c      	ldr	r2, [pc, #496]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b88:	f043 0301 	orr.w	r3, r3, #1
 8001b8c:	6713      	str	r3, [r2, #112]	@ 0x70
 8001b8e:	e02d      	b.n	8001bec <HAL_RCC_OscConfig+0x5e0>
 8001b90:	687b      	ldr	r3, [r7, #4]
 8001b92:	689b      	ldr	r3, [r3, #8]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d10c      	bne.n	8001bb2 <HAL_RCC_OscConfig+0x5a6>
 8001b98:	4b77      	ldr	r3, [pc, #476]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b9a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b9c:	4a76      	ldr	r2, [pc, #472]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001b9e:	f023 0301 	bic.w	r3, r3, #1
 8001ba2:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ba4:	4b74      	ldr	r3, [pc, #464]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001ba6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ba8:	4a73      	ldr	r2, [pc, #460]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001baa:	f023 0304 	bic.w	r3, r3, #4
 8001bae:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bb0:	e01c      	b.n	8001bec <HAL_RCC_OscConfig+0x5e0>
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	689b      	ldr	r3, [r3, #8]
 8001bb6:	2b05      	cmp	r3, #5
 8001bb8:	d10c      	bne.n	8001bd4 <HAL_RCC_OscConfig+0x5c8>
 8001bba:	4b6f      	ldr	r3, [pc, #444]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bbc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bbe:	4a6e      	ldr	r2, [pc, #440]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bc0:	f043 0304 	orr.w	r3, r3, #4
 8001bc4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bc6:	4b6c      	ldr	r3, [pc, #432]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bc8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bca:	4a6b      	ldr	r2, [pc, #428]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bcc:	f043 0301 	orr.w	r3, r3, #1
 8001bd0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001bd2:	e00b      	b.n	8001bec <HAL_RCC_OscConfig+0x5e0>
 8001bd4:	4b68      	ldr	r3, [pc, #416]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bd6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001bd8:	4a67      	ldr	r2, [pc, #412]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001bda:	f023 0301 	bic.w	r3, r3, #1
 8001bde:	6713      	str	r3, [r2, #112]	@ 0x70
 8001be0:	4b65      	ldr	r3, [pc, #404]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001be2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001be4:	4a64      	ldr	r2, [pc, #400]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001be6:	f023 0304 	bic.w	r3, r3, #4
 8001bea:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	689b      	ldr	r3, [r3, #8]
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d015      	beq.n	8001c20 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001bf4:	f7ff f9fc 	bl	8000ff0 <HAL_GetTick>
 8001bf8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001bfa:	e00a      	b.n	8001c12 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001bfc:	f7ff f9f8 	bl	8000ff0 <HAL_GetTick>
 8001c00:	4602      	mov	r2, r0
 8001c02:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c04:	1ad3      	subs	r3, r2, r3
 8001c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d901      	bls.n	8001c12 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8001c0e:	2303      	movs	r3, #3
 8001c10:	e14e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001c12:	4b59      	ldr	r3, [pc, #356]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c16:	f003 0302 	and.w	r3, r3, #2
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d0ee      	beq.n	8001bfc <HAL_RCC_OscConfig+0x5f0>
 8001c1e:	e014      	b.n	8001c4a <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001c20:	f7ff f9e6 	bl	8000ff0 <HAL_GetTick>
 8001c24:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c26:	e00a      	b.n	8001c3e <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001c28:	f7ff f9e2 	bl	8000ff0 <HAL_GetTick>
 8001c2c:	4602      	mov	r2, r0
 8001c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c30:	1ad3      	subs	r3, r2, r3
 8001c32:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d901      	bls.n	8001c3e <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 8001c3a:	2303      	movs	r3, #3
 8001c3c:	e138      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8001c3e:	4b4e      	ldr	r3, [pc, #312]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c40:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c42:	f003 0302 	and.w	r3, r3, #2
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d1ee      	bne.n	8001c28 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	f000 812d 	beq.w	8001eae <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 8001c54:	4b48      	ldr	r3, [pc, #288]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c56:	691b      	ldr	r3, [r3, #16]
 8001c58:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c5c:	2b18      	cmp	r3, #24
 8001c5e:	f000 80bd 	beq.w	8001ddc <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001c66:	2b02      	cmp	r3, #2
 8001c68:	f040 809e 	bne.w	8001da8 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c6c:	4b42      	ldr	r3, [pc, #264]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c6e:	681b      	ldr	r3, [r3, #0]
 8001c70:	4a41      	ldr	r2, [pc, #260]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c72:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001c76:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001c78:	f7ff f9ba 	bl	8000ff0 <HAL_GetTick>
 8001c7c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c7e:	e008      	b.n	8001c92 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c80:	f7ff f9b6 	bl	8000ff0 <HAL_GetTick>
 8001c84:	4602      	mov	r2, r0
 8001c86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c88:	1ad3      	subs	r3, r2, r3
 8001c8a:	2b02      	cmp	r3, #2
 8001c8c:	d901      	bls.n	8001c92 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8001c8e:	2303      	movs	r3, #3
 8001c90:	e10e      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001c92:	4b39      	ldr	r3, [pc, #228]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001c94:	681b      	ldr	r3, [r3, #0]
 8001c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d1f0      	bne.n	8001c80 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001c9e:	4b36      	ldr	r3, [pc, #216]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001ca0:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001ca2:	4b37      	ldr	r3, [pc, #220]	@ (8001d80 <HAL_RCC_OscConfig+0x774>)
 8001ca4:	4013      	ands	r3, r2
 8001ca6:	687a      	ldr	r2, [r7, #4]
 8001ca8:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 8001caa:	687a      	ldr	r2, [r7, #4]
 8001cac:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8001cae:	0112      	lsls	r2, r2, #4
 8001cb0:	430a      	orrs	r2, r1
 8001cb2:	4931      	ldr	r1, [pc, #196]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cb4:	4313      	orrs	r3, r2
 8001cb6:	628b      	str	r3, [r1, #40]	@ 0x28
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001cbc:	3b01      	subs	r3, #1
 8001cbe:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001cc6:	3b01      	subs	r3, #1
 8001cc8:	025b      	lsls	r3, r3, #9
 8001cca:	b29b      	uxth	r3, r3
 8001ccc:	431a      	orrs	r2, r3
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001cd2:	3b01      	subs	r3, #1
 8001cd4:	041b      	lsls	r3, r3, #16
 8001cd6:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 8001cda:	431a      	orrs	r2, r3
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	061b      	lsls	r3, r3, #24
 8001ce4:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 8001ce8:	4923      	ldr	r1, [pc, #140]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cea:	4313      	orrs	r3, r2
 8001cec:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8001cee:	4b22      	ldr	r3, [pc, #136]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cf0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cf2:	4a21      	ldr	r2, [pc, #132]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cf4:	f023 0301 	bic.w	r3, r3, #1
 8001cf8:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001cfa:	4b1f      	ldr	r3, [pc, #124]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001cfc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cfe:	4b21      	ldr	r3, [pc, #132]	@ (8001d84 <HAL_RCC_OscConfig+0x778>)
 8001d00:	4013      	ands	r3, r2
 8001d02:	687a      	ldr	r2, [r7, #4]
 8001d04:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001d06:	00d2      	lsls	r2, r2, #3
 8001d08:	491b      	ldr	r1, [pc, #108]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d0a:	4313      	orrs	r3, r2
 8001d0c:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8001d0e:	4b1a      	ldr	r3, [pc, #104]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d10:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d12:	f023 020c 	bic.w	r2, r3, #12
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001d1a:	4917      	ldr	r1, [pc, #92]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d1c:	4313      	orrs	r3, r2
 8001d1e:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 8001d20:	4b15      	ldr	r3, [pc, #84]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d24:	f023 0202 	bic.w	r2, r3, #2
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d2c:	4912      	ldr	r1, [pc, #72]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 8001d32:	4b11      	ldr	r3, [pc, #68]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d34:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d36:	4a10      	ldr	r2, [pc, #64]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d38:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001d3c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8001d3e:	4b0e      	ldr	r3, [pc, #56]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d42:	4a0d      	ldr	r2, [pc, #52]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d44:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d48:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 8001d4a:	4b0b      	ldr	r3, [pc, #44]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d4c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d4e:	4a0a      	ldr	r2, [pc, #40]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d50:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001d54:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 8001d56:	4b08      	ldr	r3, [pc, #32]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001d5a:	4a07      	ldr	r2, [pc, #28]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d5c:	f043 0301 	orr.w	r3, r3, #1
 8001d60:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001d62:	4b05      	ldr	r3, [pc, #20]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4a04      	ldr	r2, [pc, #16]	@ (8001d78 <HAL_RCC_OscConfig+0x76c>)
 8001d68:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001d6c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d6e:	f7ff f93f 	bl	8000ff0 <HAL_GetTick>
 8001d72:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d74:	e011      	b.n	8001d9a <HAL_RCC_OscConfig+0x78e>
 8001d76:	bf00      	nop
 8001d78:	58024400 	.word	0x58024400
 8001d7c:	58024800 	.word	0x58024800
 8001d80:	fffffc0c 	.word	0xfffffc0c
 8001d84:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001d88:	f7ff f932 	bl	8000ff0 <HAL_GetTick>
 8001d8c:	4602      	mov	r2, r0
 8001d8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d90:	1ad3      	subs	r3, r2, r3
 8001d92:	2b02      	cmp	r3, #2
 8001d94:	d901      	bls.n	8001d9a <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 8001d96:	2303      	movs	r3, #3
 8001d98:	e08a      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001d9a:	4b47      	ldr	r3, [pc, #284]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001da2:	2b00      	cmp	r3, #0
 8001da4:	d0f0      	beq.n	8001d88 <HAL_RCC_OscConfig+0x77c>
 8001da6:	e082      	b.n	8001eae <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001da8:	4b43      	ldr	r3, [pc, #268]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a42      	ldr	r2, [pc, #264]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001dae:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8001db2:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001db4:	f7ff f91c 	bl	8000ff0 <HAL_GetTick>
 8001db8:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dba:	e008      	b.n	8001dce <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001dbc:	f7ff f918 	bl	8000ff0 <HAL_GetTick>
 8001dc0:	4602      	mov	r2, r0
 8001dc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dc4:	1ad3      	subs	r3, r2, r3
 8001dc6:	2b02      	cmp	r3, #2
 8001dc8:	d901      	bls.n	8001dce <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e070      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001dce:	4b3a      	ldr	r3, [pc, #232]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	d1f0      	bne.n	8001dbc <HAL_RCC_OscConfig+0x7b0>
 8001dda:	e068      	b.n	8001eae <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8001ddc:	4b36      	ldr	r3, [pc, #216]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001dde:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001de0:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 8001de2:	4b35      	ldr	r3, [pc, #212]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001de4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001de6:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001dec:	2b01      	cmp	r3, #1
 8001dee:	d031      	beq.n	8001e54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001df0:	693b      	ldr	r3, [r7, #16]
 8001df2:	f003 0203 	and.w	r2, r3, #3
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001dfa:	429a      	cmp	r2, r3
 8001dfc:	d12a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	091b      	lsrs	r3, r3, #4
 8001e02:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001e0a:	429a      	cmp	r2, r3
 8001e0c:	d122      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e0e:	68fb      	ldr	r3, [r7, #12]
 8001e10:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001e18:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d11a      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e1e:	68fb      	ldr	r3, [r7, #12]
 8001e20:	0a5b      	lsrs	r3, r3, #9
 8001e22:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e2a:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8001e2c:	429a      	cmp	r2, r3
 8001e2e:	d111      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	0c1b      	lsrs	r3, r3, #16
 8001e34:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001e3c:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 8001e3e:	429a      	cmp	r2, r3
 8001e40:	d108      	bne.n	8001e54 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 8001e42:	68fb      	ldr	r3, [r7, #12]
 8001e44:	0e1b      	lsrs	r3, r3, #24
 8001e46:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001e4e:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 8001e50:	429a      	cmp	r2, r3
 8001e52:	d001      	beq.n	8001e58 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 8001e54:	2301      	movs	r3, #1
 8001e56:	e02b      	b.n	8001eb0 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 8001e58:	4b17      	ldr	r3, [pc, #92]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e5a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001e5c:	08db      	lsrs	r3, r3, #3
 8001e5e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8001e62:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8001e68:	693a      	ldr	r2, [r7, #16]
 8001e6a:	429a      	cmp	r2, r3
 8001e6c:	d01f      	beq.n	8001eae <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 8001e6e:	4b12      	ldr	r3, [pc, #72]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001e72:	4a11      	ldr	r2, [pc, #68]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e74:	f023 0301 	bic.w	r3, r3, #1
 8001e78:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8001e7a:	f7ff f8b9 	bl	8000ff0 <HAL_GetTick>
 8001e7e:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8001e80:	bf00      	nop
 8001e82:	f7ff f8b5 	bl	8000ff0 <HAL_GetTick>
 8001e86:	4602      	mov	r2, r0
 8001e88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e8a:	4293      	cmp	r3, r2
 8001e8c:	d0f9      	beq.n	8001e82 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8001e8e:	4b0a      	ldr	r3, [pc, #40]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001e92:	4b0a      	ldr	r3, [pc, #40]	@ (8001ebc <HAL_RCC_OscConfig+0x8b0>)
 8001e94:	4013      	ands	r3, r2
 8001e96:	687a      	ldr	r2, [r7, #4]
 8001e98:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8001e9a:	00d2      	lsls	r2, r2, #3
 8001e9c:	4906      	ldr	r1, [pc, #24]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001e9e:	4313      	orrs	r3, r2
 8001ea0:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8001ea2:	4b05      	ldr	r3, [pc, #20]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ea6:	4a04      	ldr	r2, [pc, #16]	@ (8001eb8 <HAL_RCC_OscConfig+0x8ac>)
 8001ea8:	f043 0301 	orr.w	r3, r3, #1
 8001eac:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8001eae:	2300      	movs	r3, #0
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	3730      	adds	r7, #48	@ 0x30
 8001eb4:	46bd      	mov	sp, r7
 8001eb6:	bd80      	pop	{r7, pc}
 8001eb8:	58024400 	.word	0x58024400
 8001ebc:	ffff0007 	.word	0xffff0007

08001ec0 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ec0:	b580      	push	{r7, lr}
 8001ec2:	b086      	sub	sp, #24
 8001ec4:	af00      	add	r7, sp, #0
 8001ec6:	6078      	str	r0, [r7, #4]
 8001ec8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	d101      	bne.n	8001ed4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ed0:	2301      	movs	r3, #1
 8001ed2:	e19c      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001ed4:	4b8a      	ldr	r3, [pc, #552]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f003 030f 	and.w	r3, r3, #15
 8001edc:	683a      	ldr	r2, [r7, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	d910      	bls.n	8001f04 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ee2:	4b87      	ldr	r3, [pc, #540]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f023 020f 	bic.w	r2, r3, #15
 8001eea:	4985      	ldr	r1, [pc, #532]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	4313      	orrs	r3, r2
 8001ef0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001ef2:	4b83      	ldr	r3, [pc, #524]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	f003 030f 	and.w	r3, r3, #15
 8001efa:	683a      	ldr	r2, [r7, #0]
 8001efc:	429a      	cmp	r2, r3
 8001efe:	d001      	beq.n	8001f04 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8001f00:	2301      	movs	r3, #1
 8001f02:	e184      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	f003 0304 	and.w	r3, r3, #4
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d010      	beq.n	8001f32 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	691a      	ldr	r2, [r3, #16]
 8001f14:	4b7b      	ldr	r3, [pc, #492]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f16:	699b      	ldr	r3, [r3, #24]
 8001f18:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f1c:	429a      	cmp	r2, r3
 8001f1e:	d908      	bls.n	8001f32 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8001f20:	4b78      	ldr	r3, [pc, #480]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f22:	699b      	ldr	r3, [r3, #24]
 8001f24:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	691b      	ldr	r3, [r3, #16]
 8001f2c:	4975      	ldr	r1, [pc, #468]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d010      	beq.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	4b70      	ldr	r3, [pc, #448]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f44:	69db      	ldr	r3, [r3, #28]
 8001f46:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001f4a:	429a      	cmp	r2, r3
 8001f4c:	d908      	bls.n	8001f60 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8001f4e:	4b6d      	ldr	r3, [pc, #436]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f50:	69db      	ldr	r3, [r3, #28]
 8001f52:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	695b      	ldr	r3, [r3, #20]
 8001f5a:	496a      	ldr	r1, [pc, #424]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f003 0310 	and.w	r3, r3, #16
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d010      	beq.n	8001f8e <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	699a      	ldr	r2, [r3, #24]
 8001f70:	4b64      	ldr	r3, [pc, #400]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f72:	69db      	ldr	r3, [r3, #28]
 8001f74:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8001f78:	429a      	cmp	r2, r3
 8001f7a:	d908      	bls.n	8001f8e <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8001f7c:	4b61      	ldr	r3, [pc, #388]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f7e:	69db      	ldr	r3, [r3, #28]
 8001f80:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	699b      	ldr	r3, [r3, #24]
 8001f88:	495e      	ldr	r1, [pc, #376]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001f8a:	4313      	orrs	r3, r2
 8001f8c:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f003 0320 	and.w	r3, r3, #32
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	d010      	beq.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	69da      	ldr	r2, [r3, #28]
 8001f9e:	4b59      	ldr	r3, [pc, #356]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fa0:	6a1b      	ldr	r3, [r3, #32]
 8001fa2:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8001fa6:	429a      	cmp	r2, r3
 8001fa8:	d908      	bls.n	8001fbc <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8001faa:	4b56      	ldr	r3, [pc, #344]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fac:	6a1b      	ldr	r3, [r3, #32]
 8001fae:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	69db      	ldr	r3, [r3, #28]
 8001fb6:	4953      	ldr	r1, [pc, #332]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fb8:	4313      	orrs	r3, r2
 8001fba:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0302 	and.w	r3, r3, #2
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	d010      	beq.n	8001fea <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	68da      	ldr	r2, [r3, #12]
 8001fcc:	4b4d      	ldr	r3, [pc, #308]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fce:	699b      	ldr	r3, [r3, #24]
 8001fd0:	f003 030f 	and.w	r3, r3, #15
 8001fd4:	429a      	cmp	r2, r3
 8001fd6:	d908      	bls.n	8001fea <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001fd8:	4b4a      	ldr	r3, [pc, #296]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fda:	699b      	ldr	r3, [r3, #24]
 8001fdc:	f023 020f 	bic.w	r2, r3, #15
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	68db      	ldr	r3, [r3, #12]
 8001fe4:	4947      	ldr	r1, [pc, #284]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001fe6:	4313      	orrs	r3, r2
 8001fe8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	f003 0301 	and.w	r3, r3, #1
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d055      	beq.n	80020a2 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8001ff6:	4b43      	ldr	r3, [pc, #268]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8001ff8:	699b      	ldr	r3, [r3, #24]
 8001ffa:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	4940      	ldr	r1, [pc, #256]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002004:	4313      	orrs	r3, r2
 8002006:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	685b      	ldr	r3, [r3, #4]
 800200c:	2b02      	cmp	r3, #2
 800200e:	d107      	bne.n	8002020 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8002010:	4b3c      	ldr	r3, [pc, #240]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002018:	2b00      	cmp	r3, #0
 800201a:	d121      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800201c:	2301      	movs	r3, #1
 800201e:	e0f6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	685b      	ldr	r3, [r3, #4]
 8002024:	2b03      	cmp	r3, #3
 8002026:	d107      	bne.n	8002038 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8002028:	4b36      	ldr	r3, [pc, #216]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002030:	2b00      	cmp	r3, #0
 8002032:	d115      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8002034:	2301      	movs	r3, #1
 8002036:	e0ea      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	685b      	ldr	r3, [r3, #4]
 800203c:	2b01      	cmp	r3, #1
 800203e:	d107      	bne.n	8002050 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8002040:	4b30      	ldr	r3, [pc, #192]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002048:	2b00      	cmp	r3, #0
 800204a:	d109      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800204c:	2301      	movs	r3, #1
 800204e:	e0de      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8002050:	4b2c      	ldr	r3, [pc, #176]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	f003 0304 	and.w	r3, r3, #4
 8002058:	2b00      	cmp	r3, #0
 800205a:	d101      	bne.n	8002060 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 800205c:	2301      	movs	r3, #1
 800205e:	e0d6      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002060:	4b28      	ldr	r3, [pc, #160]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002062:	691b      	ldr	r3, [r3, #16]
 8002064:	f023 0207 	bic.w	r2, r3, #7
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	685b      	ldr	r3, [r3, #4]
 800206c:	4925      	ldr	r1, [pc, #148]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 800206e:	4313      	orrs	r3, r2
 8002070:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002072:	f7fe ffbd 	bl	8000ff0 <HAL_GetTick>
 8002076:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002078:	e00a      	b.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800207a:	f7fe ffb9 	bl	8000ff0 <HAL_GetTick>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	1ad3      	subs	r3, r2, r3
 8002084:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002088:	4293      	cmp	r3, r2
 800208a:	d901      	bls.n	8002090 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 800208c:	2303      	movs	r3, #3
 800208e:	e0be      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002090:	4b1c      	ldr	r3, [pc, #112]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 8002092:	691b      	ldr	r3, [r3, #16]
 8002094:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	685b      	ldr	r3, [r3, #4]
 800209c:	00db      	lsls	r3, r3, #3
 800209e:	429a      	cmp	r2, r3
 80020a0:	d1eb      	bne.n	800207a <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	681b      	ldr	r3, [r3, #0]
 80020a6:	f003 0302 	and.w	r3, r3, #2
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d010      	beq.n	80020d0 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	68da      	ldr	r2, [r3, #12]
 80020b2:	4b14      	ldr	r3, [pc, #80]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020b4:	699b      	ldr	r3, [r3, #24]
 80020b6:	f003 030f 	and.w	r3, r3, #15
 80020ba:	429a      	cmp	r2, r3
 80020bc:	d208      	bcs.n	80020d0 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80020be:	4b11      	ldr	r3, [pc, #68]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f023 020f 	bic.w	r2, r3, #15
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	68db      	ldr	r3, [r3, #12]
 80020ca:	490e      	ldr	r1, [pc, #56]	@ (8002104 <HAL_RCC_ClockConfig+0x244>)
 80020cc:	4313      	orrs	r3, r2
 80020ce:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80020d0:	4b0b      	ldr	r3, [pc, #44]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	f003 030f 	and.w	r3, r3, #15
 80020d8:	683a      	ldr	r2, [r7, #0]
 80020da:	429a      	cmp	r2, r3
 80020dc:	d214      	bcs.n	8002108 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80020de:	4b08      	ldr	r3, [pc, #32]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	f023 020f 	bic.w	r2, r3, #15
 80020e6:	4906      	ldr	r1, [pc, #24]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	4313      	orrs	r3, r2
 80020ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80020ee:	4b04      	ldr	r3, [pc, #16]	@ (8002100 <HAL_RCC_ClockConfig+0x240>)
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	f003 030f 	and.w	r3, r3, #15
 80020f6:	683a      	ldr	r2, [r7, #0]
 80020f8:	429a      	cmp	r2, r3
 80020fa:	d005      	beq.n	8002108 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 80020fc:	2301      	movs	r3, #1
 80020fe:	e086      	b.n	800220e <HAL_RCC_ClockConfig+0x34e>
 8002100:	52002000 	.word	0x52002000
 8002104:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0304 	and.w	r3, r3, #4
 8002110:	2b00      	cmp	r3, #0
 8002112:	d010      	beq.n	8002136 <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	691a      	ldr	r2, [r3, #16]
 8002118:	4b3f      	ldr	r3, [pc, #252]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800211a:	699b      	ldr	r3, [r3, #24]
 800211c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002120:	429a      	cmp	r2, r3
 8002122:	d208      	bcs.n	8002136 <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8002124:	4b3c      	ldr	r3, [pc, #240]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002126:	699b      	ldr	r3, [r3, #24]
 8002128:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	4939      	ldr	r1, [pc, #228]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002132:	4313      	orrs	r3, r2
 8002134:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f003 0308 	and.w	r3, r3, #8
 800213e:	2b00      	cmp	r3, #0
 8002140:	d010      	beq.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	695a      	ldr	r2, [r3, #20]
 8002146:	4b34      	ldr	r3, [pc, #208]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800214e:	429a      	cmp	r2, r3
 8002150:	d208      	bcs.n	8002164 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8002152:	4b31      	ldr	r3, [pc, #196]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	695b      	ldr	r3, [r3, #20]
 800215e:	492e      	ldr	r1, [pc, #184]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002160:	4313      	orrs	r3, r2
 8002162:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	f003 0310 	and.w	r3, r3, #16
 800216c:	2b00      	cmp	r3, #0
 800216e:	d010      	beq.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699a      	ldr	r2, [r3, #24]
 8002174:	4b28      	ldr	r3, [pc, #160]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002176:	69db      	ldr	r3, [r3, #28]
 8002178:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800217c:	429a      	cmp	r2, r3
 800217e:	d208      	bcs.n	8002192 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8002180:	4b25      	ldr	r3, [pc, #148]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 8002182:	69db      	ldr	r3, [r3, #28]
 8002184:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002188:	687b      	ldr	r3, [r7, #4]
 800218a:	699b      	ldr	r3, [r3, #24]
 800218c:	4922      	ldr	r1, [pc, #136]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 800218e:	4313      	orrs	r3, r2
 8002190:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f003 0320 	and.w	r3, r3, #32
 800219a:	2b00      	cmp	r3, #0
 800219c:	d010      	beq.n	80021c0 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	69da      	ldr	r2, [r3, #28]
 80021a2:	4b1d      	ldr	r3, [pc, #116]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021a4:	6a1b      	ldr	r3, [r3, #32]
 80021a6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 80021aa:	429a      	cmp	r2, r3
 80021ac:	d208      	bcs.n	80021c0 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 80021ae:	4b1a      	ldr	r3, [pc, #104]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021b0:	6a1b      	ldr	r3, [r3, #32]
 80021b2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	69db      	ldr	r3, [r3, #28]
 80021ba:	4917      	ldr	r1, [pc, #92]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021bc:	4313      	orrs	r3, r2
 80021be:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 80021c0:	f000 f834 	bl	800222c <HAL_RCC_GetSysClockFreq>
 80021c4:	4602      	mov	r2, r0
 80021c6:	4b14      	ldr	r3, [pc, #80]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021c8:	699b      	ldr	r3, [r3, #24]
 80021ca:	0a1b      	lsrs	r3, r3, #8
 80021cc:	f003 030f 	and.w	r3, r3, #15
 80021d0:	4912      	ldr	r1, [pc, #72]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021d2:	5ccb      	ldrb	r3, [r1, r3]
 80021d4:	f003 031f 	and.w	r3, r3, #31
 80021d8:	fa22 f303 	lsr.w	r3, r2, r3
 80021dc:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80021de:	4b0e      	ldr	r3, [pc, #56]	@ (8002218 <HAL_RCC_ClockConfig+0x358>)
 80021e0:	699b      	ldr	r3, [r3, #24]
 80021e2:	f003 030f 	and.w	r3, r3, #15
 80021e6:	4a0d      	ldr	r2, [pc, #52]	@ (800221c <HAL_RCC_ClockConfig+0x35c>)
 80021e8:	5cd3      	ldrb	r3, [r2, r3]
 80021ea:	f003 031f 	and.w	r3, r3, #31
 80021ee:	693a      	ldr	r2, [r7, #16]
 80021f0:	fa22 f303 	lsr.w	r3, r2, r3
 80021f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002220 <HAL_RCC_ClockConfig+0x360>)
 80021f6:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80021f8:	4a0a      	ldr	r2, [pc, #40]	@ (8002224 <HAL_RCC_ClockConfig+0x364>)
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 80021fe:	4b0a      	ldr	r3, [pc, #40]	@ (8002228 <HAL_RCC_ClockConfig+0x368>)
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	4618      	mov	r0, r3
 8002204:	f7fe feaa 	bl	8000f5c <HAL_InitTick>
 8002208:	4603      	mov	r3, r0
 800220a:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 800220c:	7bfb      	ldrb	r3, [r7, #15]
}
 800220e:	4618      	mov	r0, r3
 8002210:	3718      	adds	r7, #24
 8002212:	46bd      	mov	sp, r7
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	58024400 	.word	0x58024400
 800221c:	0800a5f8 	.word	0x0800a5f8
 8002220:	24000004 	.word	0x24000004
 8002224:	24000000 	.word	0x24000000
 8002228:	24000008 	.word	0x24000008

0800222c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800222c:	b480      	push	{r7}
 800222e:	b089      	sub	sp, #36	@ 0x24
 8002230:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002232:	4bb3      	ldr	r3, [pc, #716]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002234:	691b      	ldr	r3, [r3, #16]
 8002236:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800223a:	2b18      	cmp	r3, #24
 800223c:	f200 8155 	bhi.w	80024ea <HAL_RCC_GetSysClockFreq+0x2be>
 8002240:	a201      	add	r2, pc, #4	@ (adr r2, 8002248 <HAL_RCC_GetSysClockFreq+0x1c>)
 8002242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002246:	bf00      	nop
 8002248:	080022ad 	.word	0x080022ad
 800224c:	080024eb 	.word	0x080024eb
 8002250:	080024eb 	.word	0x080024eb
 8002254:	080024eb 	.word	0x080024eb
 8002258:	080024eb 	.word	0x080024eb
 800225c:	080024eb 	.word	0x080024eb
 8002260:	080024eb 	.word	0x080024eb
 8002264:	080024eb 	.word	0x080024eb
 8002268:	080022d3 	.word	0x080022d3
 800226c:	080024eb 	.word	0x080024eb
 8002270:	080024eb 	.word	0x080024eb
 8002274:	080024eb 	.word	0x080024eb
 8002278:	080024eb 	.word	0x080024eb
 800227c:	080024eb 	.word	0x080024eb
 8002280:	080024eb 	.word	0x080024eb
 8002284:	080024eb 	.word	0x080024eb
 8002288:	080022d9 	.word	0x080022d9
 800228c:	080024eb 	.word	0x080024eb
 8002290:	080024eb 	.word	0x080024eb
 8002294:	080024eb 	.word	0x080024eb
 8002298:	080024eb 	.word	0x080024eb
 800229c:	080024eb 	.word	0x080024eb
 80022a0:	080024eb 	.word	0x080024eb
 80022a4:	080024eb 	.word	0x080024eb
 80022a8:	080022df 	.word	0x080022df
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80022ac:	4b94      	ldr	r3, [pc, #592]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f003 0320 	and.w	r3, r3, #32
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d009      	beq.n	80022cc <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80022b8:	4b91      	ldr	r3, [pc, #580]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	08db      	lsrs	r3, r3, #3
 80022be:	f003 0303 	and.w	r3, r3, #3
 80022c2:	4a90      	ldr	r2, [pc, #576]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022c4:	fa22 f303 	lsr.w	r3, r2, r3
 80022c8:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 80022ca:	e111      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 80022cc:	4b8d      	ldr	r3, [pc, #564]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 80022ce:	61bb      	str	r3, [r7, #24]
      break;
 80022d0:	e10e      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 80022d2:	4b8d      	ldr	r3, [pc, #564]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80022d4:	61bb      	str	r3, [r7, #24]
      break;
 80022d6:	e10b      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 80022d8:	4b8c      	ldr	r3, [pc, #560]	@ (800250c <HAL_RCC_GetSysClockFreq+0x2e0>)
 80022da:	61bb      	str	r3, [r7, #24]
      break;
 80022dc:	e108      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80022de:	4b88      	ldr	r3, [pc, #544]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022e2:	f003 0303 	and.w	r3, r3, #3
 80022e6:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 80022e8:	4b85      	ldr	r3, [pc, #532]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80022ec:	091b      	lsrs	r3, r3, #4
 80022ee:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80022f2:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 80022f4:	4b82      	ldr	r3, [pc, #520]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80022f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80022f8:	f003 0301 	and.w	r3, r3, #1
 80022fc:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 80022fe:	4b80      	ldr	r3, [pc, #512]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002300:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002302:	08db      	lsrs	r3, r3, #3
 8002304:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8002308:	68fa      	ldr	r2, [r7, #12]
 800230a:	fb02 f303 	mul.w	r3, r2, r3
 800230e:	ee07 3a90 	vmov	s15, r3
 8002312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002316:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 800231a:	693b      	ldr	r3, [r7, #16]
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 80e1 	beq.w	80024e4 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 8002322:	697b      	ldr	r3, [r7, #20]
 8002324:	2b02      	cmp	r3, #2
 8002326:	f000 8083 	beq.w	8002430 <HAL_RCC_GetSysClockFreq+0x204>
 800232a:	697b      	ldr	r3, [r7, #20]
 800232c:	2b02      	cmp	r3, #2
 800232e:	f200 80a1 	bhi.w	8002474 <HAL_RCC_GetSysClockFreq+0x248>
 8002332:	697b      	ldr	r3, [r7, #20]
 8002334:	2b00      	cmp	r3, #0
 8002336:	d003      	beq.n	8002340 <HAL_RCC_GetSysClockFreq+0x114>
 8002338:	697b      	ldr	r3, [r7, #20]
 800233a:	2b01      	cmp	r3, #1
 800233c:	d056      	beq.n	80023ec <HAL_RCC_GetSysClockFreq+0x1c0>
 800233e:	e099      	b.n	8002474 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8002340:	4b6f      	ldr	r3, [pc, #444]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f003 0320 	and.w	r3, r3, #32
 8002348:	2b00      	cmp	r3, #0
 800234a:	d02d      	beq.n	80023a8 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800234c:	4b6c      	ldr	r3, [pc, #432]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	08db      	lsrs	r3, r3, #3
 8002352:	f003 0303 	and.w	r3, r3, #3
 8002356:	4a6b      	ldr	r2, [pc, #428]	@ (8002504 <HAL_RCC_GetSysClockFreq+0x2d8>)
 8002358:	fa22 f303 	lsr.w	r3, r2, r3
 800235c:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	ee07 3a90 	vmov	s15, r3
 8002364:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	ee07 3a90 	vmov	s15, r3
 800236e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002376:	4b62      	ldr	r3, [pc, #392]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002378:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800237a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800237e:	ee07 3a90 	vmov	s15, r3
 8002382:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002386:	ed97 6a02 	vldr	s12, [r7, #8]
 800238a:	eddf 5a61 	vldr	s11, [pc, #388]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800238e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8002392:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002396:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800239a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800239e:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a2:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 80023a6:	e087      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023a8:	693b      	ldr	r3, [r7, #16]
 80023aa:	ee07 3a90 	vmov	s15, r3
 80023ae:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023b2:	eddf 6a58 	vldr	s13, [pc, #352]	@ 8002514 <HAL_RCC_GetSysClockFreq+0x2e8>
 80023b6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023ba:	4b51      	ldr	r3, [pc, #324]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80023bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023be:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80023c2:	ee07 3a90 	vmov	s15, r3
 80023c6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80023ca:	ed97 6a02 	vldr	s12, [r7, #8]
 80023ce:	eddf 5a50 	vldr	s11, [pc, #320]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 80023d2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80023d6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80023da:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80023de:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80023e2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023e6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80023ea:	e065      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80023ec:	693b      	ldr	r3, [r7, #16]
 80023ee:	ee07 3a90 	vmov	s15, r3
 80023f2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f6:	eddf 6a48 	vldr	s13, [pc, #288]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 80023fa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80023fe:	4b40      	ldr	r3, [pc, #256]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002400:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002402:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002406:	ee07 3a90 	vmov	s15, r3
 800240a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800240e:	ed97 6a02 	vldr	s12, [r7, #8]
 8002412:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 8002416:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800241a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800241e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002422:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8002426:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800242e:	e043      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	ee07 3a90 	vmov	s15, r3
 8002436:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800243a:	eddf 6a38 	vldr	s13, [pc, #224]	@ 800251c <HAL_RCC_GetSysClockFreq+0x2f0>
 800243e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002442:	4b2f      	ldr	r3, [pc, #188]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002444:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002446:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800244a:	ee07 3a90 	vmov	s15, r3
 800244e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002452:	ed97 6a02 	vldr	s12, [r7, #8]
 8002456:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800245a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800245e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002462:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8002466:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800246a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800246e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8002472:	e021      	b.n	80024b8 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8002474:	693b      	ldr	r3, [r7, #16]
 8002476:	ee07 3a90 	vmov	s15, r3
 800247a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800247e:	eddf 6a26 	vldr	s13, [pc, #152]	@ 8002518 <HAL_RCC_GetSysClockFreq+0x2ec>
 8002482:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8002486:	4b1e      	ldr	r3, [pc, #120]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8002488:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800248a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8002496:	ed97 6a02 	vldr	s12, [r7, #8]
 800249a:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 8002510 <HAL_RCC_GetSysClockFreq+0x2e4>
 800249e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80024a2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80024a6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 80024aa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80024ae:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024b2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 80024b6:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 80024b8:	4b11      	ldr	r3, [pc, #68]	@ (8002500 <HAL_RCC_GetSysClockFreq+0x2d4>)
 80024ba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024bc:	0a5b      	lsrs	r3, r3, #9
 80024be:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80024c2:	3301      	adds	r3, #1
 80024c4:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	ee07 3a90 	vmov	s15, r3
 80024cc:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80024d0:	edd7 6a07 	vldr	s13, [r7, #28]
 80024d4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80024d8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80024dc:	ee17 3a90 	vmov	r3, s15
 80024e0:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 80024e2:	e005      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
      break;
 80024e8:	e002      	b.n	80024f0 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 80024ea:	4b07      	ldr	r3, [pc, #28]	@ (8002508 <HAL_RCC_GetSysClockFreq+0x2dc>)
 80024ec:	61bb      	str	r3, [r7, #24]
      break;
 80024ee:	bf00      	nop
  }

  return sysclockfreq;
 80024f0:	69bb      	ldr	r3, [r7, #24]
}
 80024f2:	4618      	mov	r0, r3
 80024f4:	3724      	adds	r7, #36	@ 0x24
 80024f6:	46bd      	mov	sp, r7
 80024f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024fc:	4770      	bx	lr
 80024fe:	bf00      	nop
 8002500:	58024400 	.word	0x58024400
 8002504:	03d09000 	.word	0x03d09000
 8002508:	003d0900 	.word	0x003d0900
 800250c:	017d7840 	.word	0x017d7840
 8002510:	46000000 	.word	0x46000000
 8002514:	4c742400 	.word	0x4c742400
 8002518:	4a742400 	.word	0x4a742400
 800251c:	4bbebc20 	.word	0x4bbebc20

08002520 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b082      	sub	sp, #8
 8002524:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 8002526:	f7ff fe81 	bl	800222c <HAL_RCC_GetSysClockFreq>
 800252a:	4602      	mov	r2, r0
 800252c:	4b10      	ldr	r3, [pc, #64]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 800252e:	699b      	ldr	r3, [r3, #24]
 8002530:	0a1b      	lsrs	r3, r3, #8
 8002532:	f003 030f 	and.w	r3, r3, #15
 8002536:	490f      	ldr	r1, [pc, #60]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 8002538:	5ccb      	ldrb	r3, [r1, r3]
 800253a:	f003 031f 	and.w	r3, r3, #31
 800253e:	fa22 f303 	lsr.w	r3, r2, r3
 8002542:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8002544:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCC_GetHCLKFreq+0x50>)
 8002546:	699b      	ldr	r3, [r3, #24]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	4a09      	ldr	r2, [pc, #36]	@ (8002574 <HAL_RCC_GetHCLKFreq+0x54>)
 800254e:	5cd3      	ldrb	r3, [r2, r3]
 8002550:	f003 031f 	and.w	r3, r3, #31
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 800255c:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 800255e:	4a07      	ldr	r2, [pc, #28]	@ (800257c <HAL_RCC_GetHCLKFreq+0x5c>)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 8002564:	4b04      	ldr	r3, [pc, #16]	@ (8002578 <HAL_RCC_GetHCLKFreq+0x58>)
 8002566:	681b      	ldr	r3, [r3, #0]
}
 8002568:	4618      	mov	r0, r3
 800256a:	3708      	adds	r7, #8
 800256c:	46bd      	mov	sp, r7
 800256e:	bd80      	pop	{r7, pc}
 8002570:	58024400 	.word	0x58024400
 8002574:	0800a5f8 	.word	0x0800a5f8
 8002578:	24000004 	.word	0x24000004
 800257c:	24000000 	.word	0x24000000

08002580 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 8002584:	f7ff ffcc 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8002588:	4602      	mov	r2, r0
 800258a:	4b06      	ldr	r3, [pc, #24]	@ (80025a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 800258c:	69db      	ldr	r3, [r3, #28]
 800258e:	091b      	lsrs	r3, r3, #4
 8002590:	f003 0307 	and.w	r3, r3, #7
 8002594:	4904      	ldr	r1, [pc, #16]	@ (80025a8 <HAL_RCC_GetPCLK1Freq+0x28>)
 8002596:	5ccb      	ldrb	r3, [r1, r3]
 8002598:	f003 031f 	and.w	r3, r3, #31
 800259c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 80025a0:	4618      	mov	r0, r3
 80025a2:	bd80      	pop	{r7, pc}
 80025a4:	58024400 	.word	0x58024400
 80025a8:	0800a5f8 	.word	0x0800a5f8

080025ac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80025ac:	b580      	push	{r7, lr}
 80025ae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 80025b0:	f7ff ffb6 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 80025b4:	4602      	mov	r2, r0
 80025b6:	4b06      	ldr	r3, [pc, #24]	@ (80025d0 <HAL_RCC_GetPCLK2Freq+0x24>)
 80025b8:	69db      	ldr	r3, [r3, #28]
 80025ba:	0a1b      	lsrs	r3, r3, #8
 80025bc:	f003 0307 	and.w	r3, r3, #7
 80025c0:	4904      	ldr	r1, [pc, #16]	@ (80025d4 <HAL_RCC_GetPCLK2Freq+0x28>)
 80025c2:	5ccb      	ldrb	r3, [r1, r3]
 80025c4:	f003 031f 	and.w	r3, r3, #31
 80025c8:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 80025cc:	4618      	mov	r0, r3
 80025ce:	bd80      	pop	{r7, pc}
 80025d0:	58024400 	.word	0x58024400
 80025d4:	0800a5f8 	.word	0x0800a5f8

080025d8 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025dc:	b0cc      	sub	sp, #304	@ 0x130
 80025de:	af00      	add	r7, sp, #0
 80025e0:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80025e4:	2300      	movs	r3, #0
 80025e6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80025ea:	2300      	movs	r3, #0
 80025ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80025f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80025f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f8:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 80025fc:	2500      	movs	r5, #0
 80025fe:	ea54 0305 	orrs.w	r3, r4, r5
 8002602:	d049      	beq.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 8002604:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002608:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800260a:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 800260e:	d02f      	beq.n	8002670 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8002610:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8002614:	d828      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002616:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800261a:	d01a      	beq.n	8002652 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 800261c:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002620:	d822      	bhi.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
 8002622:	2b00      	cmp	r3, #0
 8002624:	d003      	beq.n	800262e <HAL_RCCEx_PeriphCLKConfig+0x56>
 8002626:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800262a:	d007      	beq.n	800263c <HAL_RCCEx_PeriphCLKConfig+0x64>
 800262c:	e01c      	b.n	8002668 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800262e:	4bb8      	ldr	r3, [pc, #736]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002630:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002632:	4ab7      	ldr	r2, [pc, #732]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002634:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002638:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 800263a:	e01a      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800263c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002640:	3308      	adds	r3, #8
 8002642:	2102      	movs	r1, #2
 8002644:	4618      	mov	r0, r3
 8002646:	f001 fccf 	bl	8003fe8 <RCCEx_PLL2_Config>
 800264a:	4603      	mov	r3, r0
 800264c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002650:	e00f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8002652:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002656:	3328      	adds	r3, #40	@ 0x28
 8002658:	2102      	movs	r1, #2
 800265a:	4618      	mov	r0, r3
 800265c:	f001 fd76 	bl	800414c <RCCEx_PLL3_Config>
 8002660:	4603      	mov	r3, r0
 8002662:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 8002666:	e004      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002668:	2301      	movs	r3, #1
 800266a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800266e:	e000      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 8002670:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002672:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002676:	2b00      	cmp	r3, #0
 8002678:	d10a      	bne.n	8002690 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 800267a:	4ba5      	ldr	r3, [pc, #660]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800267c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800267e:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8002682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002686:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8002688:	4aa1      	ldr	r2, [pc, #644]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800268a:	430b      	orrs	r3, r1
 800268c:	6513      	str	r3, [r2, #80]	@ 0x50
 800268e:	e003      	b.n	8002698 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002690:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002694:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800269c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026a0:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 80026a4:	f04f 0900 	mov.w	r9, #0
 80026a8:	ea58 0309 	orrs.w	r3, r8, r9
 80026ac:	d047      	beq.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 80026ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	2b04      	cmp	r3, #4
 80026b6:	d82a      	bhi.n	800270e <HAL_RCCEx_PeriphCLKConfig+0x136>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026d5 	.word	0x080026d5
 80026c4:	080026e3 	.word	0x080026e3
 80026c8:	080026f9 	.word	0x080026f9
 80026cc:	08002717 	.word	0x08002717
 80026d0:	08002717 	.word	0x08002717
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80026d4:	4b8e      	ldr	r3, [pc, #568]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026d8:	4a8d      	ldr	r2, [pc, #564]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80026da:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80026de:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026e0:	e01a      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80026e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026e6:	3308      	adds	r3, #8
 80026e8:	2100      	movs	r1, #0
 80026ea:	4618      	mov	r0, r3
 80026ec:	f001 fc7c 	bl	8003fe8 <RCCEx_PLL2_Config>
 80026f0:	4603      	mov	r3, r0
 80026f2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80026f6:	e00f      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80026f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80026fc:	3328      	adds	r3, #40	@ 0x28
 80026fe:	2100      	movs	r1, #0
 8002700:	4618      	mov	r0, r3
 8002702:	f001 fd23 	bl	800414c <RCCEx_PLL3_Config>
 8002706:	4603      	mov	r3, r0
 8002708:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800270c:	e004      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800270e:	2301      	movs	r3, #1
 8002710:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002714:	e000      	b.n	8002718 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 8002716:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002718:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800271c:	2b00      	cmp	r3, #0
 800271e:	d10a      	bne.n	8002736 <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002720:	4b7b      	ldr	r3, [pc, #492]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002722:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002724:	f023 0107 	bic.w	r1, r3, #7
 8002728:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800272c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800272e:	4a78      	ldr	r2, [pc, #480]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002730:	430b      	orrs	r3, r1
 8002732:	6513      	str	r3, [r2, #80]	@ 0x50
 8002734:	e003      	b.n	800273e <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002736:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800273a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 800273e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002742:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002746:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 800274a:	f04f 0b00 	mov.w	fp, #0
 800274e:	ea5a 030b 	orrs.w	r3, sl, fp
 8002752:	d04c      	beq.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 8002754:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002758:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800275a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800275e:	d030      	beq.n	80027c2 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 8002760:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002764:	d829      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002766:	2bc0      	cmp	r3, #192	@ 0xc0
 8002768:	d02d      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 800276a:	2bc0      	cmp	r3, #192	@ 0xc0
 800276c:	d825      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 800276e:	2b80      	cmp	r3, #128	@ 0x80
 8002770:	d018      	beq.n	80027a4 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002772:	2b80      	cmp	r3, #128	@ 0x80
 8002774:	d821      	bhi.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 8002776:	2b00      	cmp	r3, #0
 8002778:	d002      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 800277a:	2b40      	cmp	r3, #64	@ 0x40
 800277c:	d007      	beq.n	800278e <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 800277e:	e01c      	b.n	80027ba <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002780:	4b63      	ldr	r3, [pc, #396]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002782:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002784:	4a62      	ldr	r2, [pc, #392]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002786:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800278a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800278c:	e01c      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800278e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002792:	3308      	adds	r3, #8
 8002794:	2100      	movs	r1, #0
 8002796:	4618      	mov	r0, r3
 8002798:	f001 fc26 	bl	8003fe8 <RCCEx_PLL2_Config>
 800279c:	4603      	mov	r3, r0
 800279e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027a2:	e011      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80027a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027a8:	3328      	adds	r3, #40	@ 0x28
 80027aa:	2100      	movs	r1, #0
 80027ac:	4618      	mov	r0, r3
 80027ae:	f001 fccd 	bl	800414c <RCCEx_PLL3_Config>
 80027b2:	4603      	mov	r3, r0
 80027b4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 80027b8:	e006      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80027c0:	e002      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027c2:	bf00      	nop
 80027c4:	e000      	b.n	80027c8 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 80027c6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80027c8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 80027d0:	4b4f      	ldr	r3, [pc, #316]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027d2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80027d4:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 80027d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027dc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027de:	4a4c      	ldr	r2, [pc, #304]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80027e0:	430b      	orrs	r3, r1
 80027e2:	6513      	str	r3, [r2, #80]	@ 0x50
 80027e4:	e003      	b.n	80027ee <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80027e6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80027ea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 80027ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80027f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80027f6:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 80027fa:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 80027fe:	2300      	movs	r3, #0
 8002800:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 8002804:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 8002808:	460b      	mov	r3, r1
 800280a:	4313      	orrs	r3, r2
 800280c:	d053      	beq.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 800280e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002812:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 8002816:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 800281a:	d035      	beq.n	8002888 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 800281c:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8002820:	d82e      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 8002822:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8002826:	d031      	beq.n	800288c <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 8002828:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800282c:	d828      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800282e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002832:	d01a      	beq.n	800286a <HAL_RCCEx_PeriphCLKConfig+0x292>
 8002834:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002838:	d822      	bhi.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 800283a:	2b00      	cmp	r3, #0
 800283c:	d003      	beq.n	8002846 <HAL_RCCEx_PeriphCLKConfig+0x26e>
 800283e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8002842:	d007      	beq.n	8002854 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 8002844:	e01c      	b.n	8002880 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002846:	4b32      	ldr	r3, [pc, #200]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002848:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800284a:	4a31      	ldr	r2, [pc, #196]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800284c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002850:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002852:	e01c      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002854:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002858:	3308      	adds	r3, #8
 800285a:	2100      	movs	r1, #0
 800285c:	4618      	mov	r0, r3
 800285e:	f001 fbc3 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002862:	4603      	mov	r3, r0
 8002864:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002868:	e011      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800286a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800286e:	3328      	adds	r3, #40	@ 0x28
 8002870:	2100      	movs	r1, #0
 8002872:	4618      	mov	r0, r3
 8002874:	f001 fc6a 	bl	800414c <RCCEx_PLL3_Config>
 8002878:	4603      	mov	r3, r0
 800287a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800287e:	e006      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8002880:	2301      	movs	r3, #1
 8002882:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002886:	e002      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8002888:	bf00      	nop
 800288a:	e000      	b.n	800288e <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 800288c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800288e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002892:	2b00      	cmp	r3, #0
 8002894:	d10b      	bne.n	80028ae <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 8002896:	4b1e      	ldr	r3, [pc, #120]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002898:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800289a:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 800289e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028a2:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 80028a6:	4a1a      	ldr	r2, [pc, #104]	@ (8002910 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80028a8:	430b      	orrs	r3, r1
 80028aa:	6593      	str	r3, [r2, #88]	@ 0x58
 80028ac:	e003      	b.n	80028b6 <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80028ae:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80028b2:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 80028b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028be:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 80028c2:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 80028c6:	2300      	movs	r3, #0
 80028c8:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 80028cc:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 80028d0:	460b      	mov	r3, r1
 80028d2:	4313      	orrs	r3, r2
 80028d4:	d056      	beq.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 80028d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80028da:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 80028de:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e2:	d038      	beq.n	8002956 <HAL_RCCEx_PeriphCLKConfig+0x37e>
 80028e4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80028e8:	d831      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028ea:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028ee:	d034      	beq.n	800295a <HAL_RCCEx_PeriphCLKConfig+0x382>
 80028f0:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 80028f4:	d82b      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 80028f6:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80028fa:	d01d      	beq.n	8002938 <HAL_RCCEx_PeriphCLKConfig+0x360>
 80028fc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8002900:	d825      	bhi.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 8002902:	2b00      	cmp	r3, #0
 8002904:	d006      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 8002906:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800290a:	d00a      	beq.n	8002922 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 800290c:	e01f      	b.n	800294e <HAL_RCCEx_PeriphCLKConfig+0x376>
 800290e:	bf00      	nop
 8002910:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002914:	4ba2      	ldr	r3, [pc, #648]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002916:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002918:	4aa1      	ldr	r2, [pc, #644]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800291a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800291e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8002920:	e01c      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002922:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002926:	3308      	adds	r3, #8
 8002928:	2100      	movs	r1, #0
 800292a:	4618      	mov	r0, r3
 800292c:	f001 fb5c 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002930:	4603      	mov	r3, r0
 8002932:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 8002936:	e011      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002938:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800293c:	3328      	adds	r3, #40	@ 0x28
 800293e:	2100      	movs	r1, #0
 8002940:	4618      	mov	r0, r3
 8002942:	f001 fc03 	bl	800414c <RCCEx_PLL3_Config>
 8002946:	4603      	mov	r3, r0
 8002948:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800294c:	e006      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 800294e:	2301      	movs	r3, #1
 8002950:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002954:	e002      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 8002956:	bf00      	nop
 8002958:	e000      	b.n	800295c <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 800295a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800295c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002960:	2b00      	cmp	r3, #0
 8002962:	d10b      	bne.n	800297c <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 8002964:	4b8e      	ldr	r3, [pc, #568]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002966:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002968:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 800296c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002970:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8002974:	4a8a      	ldr	r2, [pc, #552]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002976:	430b      	orrs	r3, r1
 8002978:	6593      	str	r3, [r2, #88]	@ 0x58
 800297a:	e003      	b.n	8002984 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800297c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002980:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8002984:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002988:	e9d3 2300 	ldrd	r2, r3, [r3]
 800298c:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 8002990:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 800299a:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 800299e:	460b      	mov	r3, r1
 80029a0:	4313      	orrs	r3, r2
 80029a2:	d03a      	beq.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 80029a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80029aa:	2b30      	cmp	r3, #48	@ 0x30
 80029ac:	d01f      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x416>
 80029ae:	2b30      	cmp	r3, #48	@ 0x30
 80029b0:	d819      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029b2:	2b20      	cmp	r3, #32
 80029b4:	d00c      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 80029b6:	2b20      	cmp	r3, #32
 80029b8:	d815      	bhi.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d019      	beq.n	80029f2 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 80029be:	2b10      	cmp	r3, #16
 80029c0:	d111      	bne.n	80029e6 <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80029c2:	4b77      	ldr	r3, [pc, #476]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029c6:	4a76      	ldr	r2, [pc, #472]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80029cc:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029ce:	e011      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80029d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80029d4:	3308      	adds	r3, #8
 80029d6:	2102      	movs	r1, #2
 80029d8:	4618      	mov	r0, r3
 80029da:	f001 fb05 	bl	8003fe8 <RCCEx_PLL2_Config>
 80029de:	4603      	mov	r3, r0
 80029e0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 80029e4:	e006      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80029ec:	e002      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029ee:	bf00      	nop
 80029f0:	e000      	b.n	80029f4 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 80029f2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80029f4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d10a      	bne.n	8002a12 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80029fc:	4b68      	ldr	r3, [pc, #416]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80029fe:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a00:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 8002a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a08:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002a0a:	4a65      	ldr	r2, [pc, #404]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a0c:	430b      	orrs	r3, r1
 8002a0e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002a10:	e003      	b.n	8002a1a <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002a12:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002a16:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 8002a1a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a22:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 8002a26:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8002a30:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 8002a34:	460b      	mov	r3, r1
 8002a36:	4313      	orrs	r3, r2
 8002a38:	d051      	beq.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 8002a3a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002a40:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a44:	d035      	beq.n	8002ab2 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 8002a46:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8002a4a:	d82e      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a4c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a50:	d031      	beq.n	8002ab6 <HAL_RCCEx_PeriphCLKConfig+0x4de>
 8002a52:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8002a56:	d828      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d01a      	beq.n	8002a94 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 8002a5e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a62:	d822      	bhi.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d003      	beq.n	8002a70 <HAL_RCCEx_PeriphCLKConfig+0x498>
 8002a68:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002a6c:	d007      	beq.n	8002a7e <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 8002a6e:	e01c      	b.n	8002aaa <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002a70:	4b4b      	ldr	r3, [pc, #300]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002a74:	4a4a      	ldr	r2, [pc, #296]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002a76:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a7a:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a7c:	e01c      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8002a7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a82:	3308      	adds	r3, #8
 8002a84:	2100      	movs	r1, #0
 8002a86:	4618      	mov	r0, r3
 8002a88:	f001 faae 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002a8c:	4603      	mov	r3, r0
 8002a8e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002a92:	e011      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8002a94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002a98:	3328      	adds	r3, #40	@ 0x28
 8002a9a:	2100      	movs	r1, #0
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f001 fb55 	bl	800414c <RCCEx_PLL3_Config>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8002aa8:	e006      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002aaa:	2301      	movs	r3, #1
 8002aac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002ab0:	e002      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ab2:	bf00      	nop
 8002ab4:	e000      	b.n	8002ab8 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 8002ab6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002ab8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d10a      	bne.n	8002ad6 <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8002ac0:	4b37      	ldr	r3, [pc, #220]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ac2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002ac4:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 8002ac8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002acc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8002ace:	4a34      	ldr	r2, [pc, #208]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002ad0:	430b      	orrs	r3, r1
 8002ad2:	6513      	str	r3, [r2, #80]	@ 0x50
 8002ad4:	e003      	b.n	8002ade <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ad6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ada:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8002ade:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ae2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ae6:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 8002aea:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002aee:	2300      	movs	r3, #0
 8002af0:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002af4:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 8002af8:	460b      	mov	r3, r1
 8002afa:	4313      	orrs	r3, r2
 8002afc:	d056      	beq.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8002afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b02:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b04:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b08:	d033      	beq.n	8002b72 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8002b0a:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b0e:	d82c      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b10:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b14:	d02f      	beq.n	8002b76 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8002b16:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8002b1a:	d826      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b1c:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b20:	d02b      	beq.n	8002b7a <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 8002b22:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8002b26:	d820      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b28:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b2c:	d012      	beq.n	8002b54 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 8002b2e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8002b32:	d81a      	bhi.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d022      	beq.n	8002b7e <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 8002b38:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b3c:	d115      	bne.n	8002b6a <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002b3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b42:	3308      	adds	r3, #8
 8002b44:	2101      	movs	r1, #1
 8002b46:	4618      	mov	r0, r3
 8002b48:	f001 fa4e 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002b4c:	4603      	mov	r3, r0
 8002b4e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b52:	e015      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002b54:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b58:	3328      	adds	r3, #40	@ 0x28
 8002b5a:	2101      	movs	r1, #1
 8002b5c:	4618      	mov	r0, r3
 8002b5e:	f001 faf5 	bl	800414c <RCCEx_PLL3_Config>
 8002b62:	4603      	mov	r3, r0
 8002b64:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 8002b68:	e00a      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002b6a:	2301      	movs	r3, #1
 8002b6c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002b70:	e006      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b72:	bf00      	nop
 8002b74:	e004      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b76:	bf00      	nop
 8002b78:	e002      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b7a:	bf00      	nop
 8002b7c:	e000      	b.n	8002b80 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8002b7e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002b80:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d10d      	bne.n	8002ba4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8002b88:	4b05      	ldr	r3, [pc, #20]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b8a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002b8c:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 8002b90:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002b94:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8002b96:	4a02      	ldr	r2, [pc, #8]	@ (8002ba0 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8002b98:	430b      	orrs	r3, r1
 8002b9a:	6513      	str	r3, [r2, #80]	@ 0x50
 8002b9c:	e006      	b.n	8002bac <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8002b9e:	bf00      	nop
 8002ba0:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ba4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ba8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8002bac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bb4:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 8002bb8:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002bbc:	2300      	movs	r3, #0
 8002bbe:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002bc2:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4313      	orrs	r3, r2
 8002bca:	d055      	beq.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8002bcc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002bd0:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002bd4:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bd8:	d033      	beq.n	8002c42 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8002bda:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002bde:	d82c      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002be0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002be4:	d02f      	beq.n	8002c46 <HAL_RCCEx_PeriphCLKConfig+0x66e>
 8002be6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bea:	d826      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bec:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bf0:	d02b      	beq.n	8002c4a <HAL_RCCEx_PeriphCLKConfig+0x672>
 8002bf2:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8002bf6:	d820      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002bf8:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002bfc:	d012      	beq.n	8002c24 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8002bfe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002c02:	d81a      	bhi.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
 8002c04:	2b00      	cmp	r3, #0
 8002c06:	d022      	beq.n	8002c4e <HAL_RCCEx_PeriphCLKConfig+0x676>
 8002c08:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002c0c:	d115      	bne.n	8002c3a <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002c0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c12:	3308      	adds	r3, #8
 8002c14:	2101      	movs	r1, #1
 8002c16:	4618      	mov	r0, r3
 8002c18:	f001 f9e6 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002c1c:	4603      	mov	r3, r0
 8002c1e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c22:	e015      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8002c24:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c28:	3328      	adds	r3, #40	@ 0x28
 8002c2a:	2101      	movs	r1, #1
 8002c2c:	4618      	mov	r0, r3
 8002c2e:	f001 fa8d 	bl	800414c <RCCEx_PLL3_Config>
 8002c32:	4603      	mov	r3, r0
 8002c34:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 8002c38:	e00a      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002c40:	e006      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c42:	bf00      	nop
 8002c44:	e004      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c46:	bf00      	nop
 8002c48:	e002      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c4a:	bf00      	nop
 8002c4c:	e000      	b.n	8002c50 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 8002c4e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002c50:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d10b      	bne.n	8002c70 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 8002c58:	4bb6      	ldr	r3, [pc, #728]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c5a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c5c:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 8002c60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c64:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 8002c68:	4ab2      	ldr	r2, [pc, #712]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002c6a:	430b      	orrs	r3, r1
 8002c6c:	6593      	str	r3, [r2, #88]	@ 0x58
 8002c6e:	e003      	b.n	8002c78 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002c70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002c74:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8002c78:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 8002c84:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002c8e:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4313      	orrs	r3, r2
 8002c96:	d02a      	beq.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8002c98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002c9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d011      	beq.n	8002cc6 <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 8002ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ca6:	d10a      	bne.n	8002cbe <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002ca8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cac:	3308      	adds	r3, #8
 8002cae:	2101      	movs	r1, #1
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	f001 f999 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8002cbc:	e004      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002cbe:	2301      	movs	r3, #1
 8002cc0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002cc4:	e000      	b.n	8002cc8 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 8002cc6:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002cc8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d10a      	bne.n	8002ce6 <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8002cd0:	4b98      	ldr	r3, [pc, #608]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002cd2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002cd4:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 8002cd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cdc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002cde:	4a95      	ldr	r2, [pc, #596]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ce0:	430b      	orrs	r3, r1
 8002ce2:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002ce4:	e003      	b.n	8002cee <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002ce6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002cea:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002cee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002cf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cf6:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 8002cfa:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002cfe:	2300      	movs	r3, #0
 8002d00:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d04:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8002d08:	460b      	mov	r3, r1
 8002d0a:	4313      	orrs	r3, r2
 8002d0c:	d037      	beq.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8002d0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d12:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d18:	d00e      	beq.n	8002d38 <HAL_RCCEx_PeriphCLKConfig+0x760>
 8002d1a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002d1e:	d816      	bhi.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x776>
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	d018      	beq.n	8002d56 <HAL_RCCEx_PeriphCLKConfig+0x77e>
 8002d24:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8002d28:	d111      	bne.n	8002d4e <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002d2a:	4b82      	ldr	r3, [pc, #520]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	4a81      	ldr	r2, [pc, #516]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d30:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d34:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d36:	e00f      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8002d38:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d3c:	3308      	adds	r3, #8
 8002d3e:	2101      	movs	r1, #1
 8002d40:	4618      	mov	r0, r3
 8002d42:	f001 f951 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002d46:	4603      	mov	r3, r0
 8002d48:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 8002d4c:	e004      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8002d4e:	2301      	movs	r3, #1
 8002d50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002d54:	e000      	b.n	8002d58 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 8002d56:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002d58:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	d10a      	bne.n	8002d76 <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002d60:	4b74      	ldr	r3, [pc, #464]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002d64:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8002d68:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d6c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d6e:	4a71      	ldr	r2, [pc, #452]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002d70:	430b      	orrs	r3, r1
 8002d72:	6513      	str	r3, [r2, #80]	@ 0x50
 8002d74:	e003      	b.n	8002d7e <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002d76:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002d7a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8002d7e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002d82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d86:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 8002d8a:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002d8e:	2300      	movs	r3, #0
 8002d90:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002d94:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 8002d98:	460b      	mov	r3, r1
 8002d9a:	4313      	orrs	r3, r2
 8002d9c:	d03a      	beq.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8002d9e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002da4:	2b03      	cmp	r3, #3
 8002da6:	d81d      	bhi.n	8002de4 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8002da8:	a201      	add	r2, pc, #4	@ (adr r2, 8002db0 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8002daa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002dae:	bf00      	nop
 8002db0:	08002ded 	.word	0x08002ded
 8002db4:	08002dc1 	.word	0x08002dc1
 8002db8:	08002dcf 	.word	0x08002dcf
 8002dbc:	08002ded 	.word	0x08002ded
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8002dc0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002dc4:	4a5b      	ldr	r2, [pc, #364]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002dc6:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dca:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002dcc:	e00f      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8002dce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002dd2:	3308      	adds	r3, #8
 8002dd4:	2102      	movs	r1, #2
 8002dd6:	4618      	mov	r0, r3
 8002dd8:	f001 f906 	bl	8003fe8 <RCCEx_PLL2_Config>
 8002ddc:	4603      	mov	r3, r0
 8002dde:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 8002de2:	e004      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 8002de4:	2301      	movs	r3, #1
 8002de6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002dea:	e000      	b.n	8002dee <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8002dec:	bf00      	nop
    }

    if (ret == HAL_OK)
 8002dee:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d10a      	bne.n	8002e0c <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 8002df6:	4b4f      	ldr	r3, [pc, #316]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002df8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002dfa:	f023 0103 	bic.w	r1, r3, #3
 8002dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e02:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e04:	4a4b      	ldr	r2, [pc, #300]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e06:	430b      	orrs	r3, r1
 8002e08:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8002e0a:	e003      	b.n	8002e14 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002e0c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e10:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002e14:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e1c:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 8002e20:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002e24:	2300      	movs	r3, #0
 8002e26:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002e2a:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 8002e2e:	460b      	mov	r3, r1
 8002e30:	4313      	orrs	r3, r2
 8002e32:	f000 80a0 	beq.w	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002e36:	4b40      	ldr	r3, [pc, #256]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4a3f      	ldr	r2, [pc, #252]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002e3c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002e40:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002e42:	f7fe f8d5 	bl	8000ff0 <HAL_GetTick>
 8002e46:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e4a:	e00b      	b.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002e4c:	f7fe f8d0 	bl	8000ff0 <HAL_GetTick>
 8002e50:	4602      	mov	r2, r0
 8002e52:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002e56:	1ad3      	subs	r3, r2, r3
 8002e58:	2b64      	cmp	r3, #100	@ 0x64
 8002e5a:	d903      	bls.n	8002e64 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 8002e5c:	2303      	movs	r3, #3
 8002e5e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8002e62:	e005      	b.n	8002e70 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002e64:	4b34      	ldr	r3, [pc, #208]	@ (8002f38 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d0ed      	beq.n	8002e4c <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 8002e70:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d17a      	bne.n	8002f6e <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8002e78:	4b2e      	ldr	r3, [pc, #184]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e7a:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002e7c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002e80:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002e84:	4053      	eors	r3, r2
 8002e86:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d015      	beq.n	8002eba <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002e8e:	4b29      	ldr	r3, [pc, #164]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e90:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e92:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002e96:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002e9a:	4b26      	ldr	r3, [pc, #152]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002e9c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e9e:	4a25      	ldr	r2, [pc, #148]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ea0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ea4:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002ea6:	4b23      	ldr	r3, [pc, #140]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ea8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002eaa:	4a22      	ldr	r2, [pc, #136]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002eac:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002eb0:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8002eb2:	4a20      	ldr	r2, [pc, #128]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002eb4:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8002eb8:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8002eba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002ebe:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002ec2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002ec6:	d118      	bne.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ec8:	f7fe f892 	bl	8000ff0 <HAL_GetTick>
 8002ecc:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002ed0:	e00d      	b.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ed2:	f7fe f88d 	bl	8000ff0 <HAL_GetTick>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 8002edc:	1ad2      	subs	r2, r2, r3
 8002ede:	f241 3388 	movw	r3, #5000	@ 0x1388
 8002ee2:	429a      	cmp	r2, r3
 8002ee4:	d903      	bls.n	8002eee <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8002ee6:	2303      	movs	r3, #3
 8002ee8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 8002eec:	e005      	b.n	8002efa <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8002eee:	4b11      	ldr	r3, [pc, #68]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002ef0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ef2:	f003 0302 	and.w	r3, r3, #2
 8002ef6:	2b00      	cmp	r3, #0
 8002ef8:	d0eb      	beq.n	8002ed2 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8002efa:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d130      	bne.n	8002f64 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002f02:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f06:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002f0a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002f0e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002f12:	d115      	bne.n	8002f40 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8002f14:	4b07      	ldr	r3, [pc, #28]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f16:	691b      	ldr	r3, [r3, #16]
 8002f18:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 8002f1c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f20:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002f24:	091a      	lsrs	r2, r3, #4
 8002f26:	4b05      	ldr	r3, [pc, #20]	@ (8002f3c <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8002f28:	4013      	ands	r3, r2
 8002f2a:	4a02      	ldr	r2, [pc, #8]	@ (8002f34 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8002f2c:	430b      	orrs	r3, r1
 8002f2e:	6113      	str	r3, [r2, #16]
 8002f30:	e00c      	b.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x974>
 8002f32:	bf00      	nop
 8002f34:	58024400 	.word	0x58024400
 8002f38:	58024800 	.word	0x58024800
 8002f3c:	00ffffcf 	.word	0x00ffffcf
 8002f40:	4bd4      	ldr	r3, [pc, #848]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f42:	691b      	ldr	r3, [r3, #16]
 8002f44:	4ad3      	ldr	r2, [pc, #844]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f46:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8002f4a:	6113      	str	r3, [r2, #16]
 8002f4c:	4bd1      	ldr	r3, [pc, #836]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f4e:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 8002f50:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f54:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 8002f58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002f5c:	4acd      	ldr	r2, [pc, #820]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8002f5e:	430b      	orrs	r3, r1
 8002f60:	6713      	str	r3, [r2, #112]	@ 0x70
 8002f62:	e008      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8002f64:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f68:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 8002f6c:	e003      	b.n	8002f76 <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002f6e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8002f72:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8002f76:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7e:	f002 0301 	and.w	r3, r2, #1
 8002f82:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002f86:	2300      	movs	r3, #0
 8002f88:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f8c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002f90:	460b      	mov	r3, r1
 8002f92:	4313      	orrs	r3, r2
 8002f94:	f000 808b 	beq.w	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8002f98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8002f9c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8002fa0:	2b28      	cmp	r3, #40	@ 0x28
 8002fa2:	d86b      	bhi.n	800307c <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8002fa4:	a201      	add	r2, pc, #4	@ (adr r2, 8002fac <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8002fa6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002faa:	bf00      	nop
 8002fac:	08003085 	.word	0x08003085
 8002fb0:	0800307d 	.word	0x0800307d
 8002fb4:	0800307d 	.word	0x0800307d
 8002fb8:	0800307d 	.word	0x0800307d
 8002fbc:	0800307d 	.word	0x0800307d
 8002fc0:	0800307d 	.word	0x0800307d
 8002fc4:	0800307d 	.word	0x0800307d
 8002fc8:	0800307d 	.word	0x0800307d
 8002fcc:	08003051 	.word	0x08003051
 8002fd0:	0800307d 	.word	0x0800307d
 8002fd4:	0800307d 	.word	0x0800307d
 8002fd8:	0800307d 	.word	0x0800307d
 8002fdc:	0800307d 	.word	0x0800307d
 8002fe0:	0800307d 	.word	0x0800307d
 8002fe4:	0800307d 	.word	0x0800307d
 8002fe8:	0800307d 	.word	0x0800307d
 8002fec:	08003067 	.word	0x08003067
 8002ff0:	0800307d 	.word	0x0800307d
 8002ff4:	0800307d 	.word	0x0800307d
 8002ff8:	0800307d 	.word	0x0800307d
 8002ffc:	0800307d 	.word	0x0800307d
 8003000:	0800307d 	.word	0x0800307d
 8003004:	0800307d 	.word	0x0800307d
 8003008:	0800307d 	.word	0x0800307d
 800300c:	08003085 	.word	0x08003085
 8003010:	0800307d 	.word	0x0800307d
 8003014:	0800307d 	.word	0x0800307d
 8003018:	0800307d 	.word	0x0800307d
 800301c:	0800307d 	.word	0x0800307d
 8003020:	0800307d 	.word	0x0800307d
 8003024:	0800307d 	.word	0x0800307d
 8003028:	0800307d 	.word	0x0800307d
 800302c:	08003085 	.word	0x08003085
 8003030:	0800307d 	.word	0x0800307d
 8003034:	0800307d 	.word	0x0800307d
 8003038:	0800307d 	.word	0x0800307d
 800303c:	0800307d 	.word	0x0800307d
 8003040:	0800307d 	.word	0x0800307d
 8003044:	0800307d 	.word	0x0800307d
 8003048:	0800307d 	.word	0x0800307d
 800304c:	08003085 	.word	0x08003085
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8003050:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003054:	3308      	adds	r3, #8
 8003056:	2101      	movs	r1, #1
 8003058:	4618      	mov	r0, r3
 800305a:	f000 ffc5 	bl	8003fe8 <RCCEx_PLL2_Config>
 800305e:	4603      	mov	r3, r0
 8003060:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8003064:	e00f      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003066:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800306a:	3328      	adds	r3, #40	@ 0x28
 800306c:	2101      	movs	r1, #1
 800306e:	4618      	mov	r0, r3
 8003070:	f001 f86c 	bl	800414c <RCCEx_PLL3_Config>
 8003074:	4603      	mov	r3, r0
 8003076:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 800307a:	e004      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800307c:	2301      	movs	r3, #1
 800307e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003082:	e000      	b.n	8003086 <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8003084:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003086:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800308a:	2b00      	cmp	r3, #0
 800308c:	d10b      	bne.n	80030a6 <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 800308e:	4b81      	ldr	r3, [pc, #516]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003090:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003092:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 8003096:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800309a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800309e:	4a7d      	ldr	r2, [pc, #500]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80030a0:	430b      	orrs	r3, r1
 80030a2:	6553      	str	r3, [r2, #84]	@ 0x54
 80030a4:	e003      	b.n	80030ae <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80030a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80030aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 80030ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80030b6:	f002 0302 	and.w	r3, r2, #2
 80030ba:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80030be:	2300      	movs	r3, #0
 80030c0:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80030c4:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 80030c8:	460b      	mov	r3, r1
 80030ca:	4313      	orrs	r3, r2
 80030cc:	d042      	beq.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 80030ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030d2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80030d4:	2b05      	cmp	r3, #5
 80030d6:	d825      	bhi.n	8003124 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 80030d8:	a201      	add	r2, pc, #4	@ (adr r2, 80030e0 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 80030da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030de:	bf00      	nop
 80030e0:	0800312d 	.word	0x0800312d
 80030e4:	080030f9 	.word	0x080030f9
 80030e8:	0800310f 	.word	0x0800310f
 80030ec:	0800312d 	.word	0x0800312d
 80030f0:	0800312d 	.word	0x0800312d
 80030f4:	0800312d 	.word	0x0800312d
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80030f8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80030fc:	3308      	adds	r3, #8
 80030fe:	2101      	movs	r1, #1
 8003100:	4618      	mov	r0, r3
 8003102:	f000 ff71 	bl	8003fe8 <RCCEx_PLL2_Config>
 8003106:	4603      	mov	r3, r0
 8003108:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 800310c:	e00f      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 800310e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003112:	3328      	adds	r3, #40	@ 0x28
 8003114:	2101      	movs	r1, #1
 8003116:	4618      	mov	r0, r3
 8003118:	f001 f818 	bl	800414c <RCCEx_PLL3_Config>
 800311c:	4603      	mov	r3, r0
 800311e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8003122:	e004      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003124:	2301      	movs	r3, #1
 8003126:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800312a:	e000      	b.n	800312e <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 800312c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800312e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003132:	2b00      	cmp	r3, #0
 8003134:	d10a      	bne.n	800314c <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8003136:	4b57      	ldr	r3, [pc, #348]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800313a:	f023 0107 	bic.w	r1, r3, #7
 800313e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003142:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8003144:	4a53      	ldr	r2, [pc, #332]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8003146:	430b      	orrs	r3, r1
 8003148:	6553      	str	r3, [r2, #84]	@ 0x54
 800314a:	e003      	b.n	8003154 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800314c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003150:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003158:	e9d3 2300 	ldrd	r2, r3, [r3]
 800315c:	f002 0304 	and.w	r3, r2, #4
 8003160:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003164:	2300      	movs	r3, #0
 8003166:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800316a:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 800316e:	460b      	mov	r3, r1
 8003170:	4313      	orrs	r3, r2
 8003172:	d044      	beq.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8003174:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003178:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800317c:	2b05      	cmp	r3, #5
 800317e:	d825      	bhi.n	80031cc <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8003180:	a201      	add	r2, pc, #4	@ (adr r2, 8003188 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8003182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003186:	bf00      	nop
 8003188:	080031d5 	.word	0x080031d5
 800318c:	080031a1 	.word	0x080031a1
 8003190:	080031b7 	.word	0x080031b7
 8003194:	080031d5 	.word	0x080031d5
 8003198:	080031d5 	.word	0x080031d5
 800319c:	080031d5 	.word	0x080031d5
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80031a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031a4:	3308      	adds	r3, #8
 80031a6:	2101      	movs	r1, #1
 80031a8:	4618      	mov	r0, r3
 80031aa:	f000 ff1d 	bl	8003fe8 <RCCEx_PLL2_Config>
 80031ae:	4603      	mov	r3, r0
 80031b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031b4:	e00f      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80031b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ba:	3328      	adds	r3, #40	@ 0x28
 80031bc:	2101      	movs	r1, #1
 80031be:	4618      	mov	r0, r3
 80031c0:	f000 ffc4 	bl	800414c <RCCEx_PLL3_Config>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 80031ca:	e004      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80031d2:	e000      	b.n	80031d6 <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 80031d4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80031d6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d10b      	bne.n	80031f6 <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80031de:	4b2d      	ldr	r3, [pc, #180]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031e0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80031e2:	f023 0107 	bic.w	r1, r3, #7
 80031e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80031ea:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80031ee:	4a29      	ldr	r2, [pc, #164]	@ (8003294 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 80031f0:	430b      	orrs	r3, r1
 80031f2:	6593      	str	r3, [r2, #88]	@ 0x58
 80031f4:	e003      	b.n	80031fe <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80031f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80031fa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80031fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003202:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003206:	f002 0320 	and.w	r3, r2, #32
 800320a:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800320e:	2300      	movs	r3, #0
 8003210:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003214:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003218:	460b      	mov	r3, r1
 800321a:	4313      	orrs	r3, r2
 800321c:	d057      	beq.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 800321e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003222:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003226:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800322a:	d035      	beq.n	8003298 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 800322c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003230:	d82c      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003232:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003236:	d031      	beq.n	800329c <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8003238:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800323c:	d826      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800323e:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003242:	d02d      	beq.n	80032a0 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8003244:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 8003248:	d820      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 800324a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800324e:	d012      	beq.n	8003276 <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8003250:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8003254:	d81a      	bhi.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8003256:	2b00      	cmp	r3, #0
 8003258:	d024      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 800325a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800325e:	d115      	bne.n	800328c <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003260:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003264:	3308      	adds	r3, #8
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f000 febd 	bl	8003fe8 <RCCEx_PLL2_Config>
 800326e:	4603      	mov	r3, r0
 8003270:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8003274:	e017      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003276:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800327a:	3328      	adds	r3, #40	@ 0x28
 800327c:	2102      	movs	r1, #2
 800327e:	4618      	mov	r0, r3
 8003280:	f000 ff64 	bl	800414c <RCCEx_PLL3_Config>
 8003284:	4603      	mov	r3, r0
 8003286:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 800328a:	e00c      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003292:	e008      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8003294:	58024400 	.word	0x58024400
        break;
 8003298:	bf00      	nop
 800329a:	e004      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 800329c:	bf00      	nop
 800329e:	e002      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80032a0:	bf00      	nop
 80032a2:	e000      	b.n	80032a6 <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 80032a4:	bf00      	nop
    }

    if (ret == HAL_OK)
 80032a6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d10b      	bne.n	80032c6 <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80032ae:	4bc2      	ldr	r3, [pc, #776]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80032b2:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 80032b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80032be:	4abe      	ldr	r2, [pc, #760]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80032c0:	430b      	orrs	r3, r1
 80032c2:	6553      	str	r3, [r2, #84]	@ 0x54
 80032c4:	e003      	b.n	80032ce <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80032c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80032ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 80032ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032d6:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 80032da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80032de:	2300      	movs	r3, #0
 80032e0:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 80032e4:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 80032e8:	460b      	mov	r3, r1
 80032ea:	4313      	orrs	r3, r2
 80032ec:	d055      	beq.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 80032ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80032f2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 80032f6:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 80032fa:	d033      	beq.n	8003364 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 80032fc:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 8003300:	d82c      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003302:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003306:	d02f      	beq.n	8003368 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8003308:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800330c:	d826      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800330e:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003312:	d02b      	beq.n	800336c <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8003314:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8003318:	d820      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 800331a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800331e:	d012      	beq.n	8003346 <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8003320:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003324:	d81a      	bhi.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8003326:	2b00      	cmp	r3, #0
 8003328:	d022      	beq.n	8003370 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 800332a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800332e:	d115      	bne.n	800335c <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003330:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003334:	3308      	adds	r3, #8
 8003336:	2100      	movs	r1, #0
 8003338:	4618      	mov	r0, r3
 800333a:	f000 fe55 	bl	8003fe8 <RCCEx_PLL2_Config>
 800333e:	4603      	mov	r3, r0
 8003340:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8003344:	e015      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800334a:	3328      	adds	r3, #40	@ 0x28
 800334c:	2102      	movs	r1, #2
 800334e:	4618      	mov	r0, r3
 8003350:	f000 fefc 	bl	800414c <RCCEx_PLL3_Config>
 8003354:	4603      	mov	r3, r0
 8003356:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 800335a:	e00a      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800335c:	2301      	movs	r3, #1
 800335e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003362:	e006      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003364:	bf00      	nop
 8003366:	e004      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003368:	bf00      	nop
 800336a:	e002      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 800336c:	bf00      	nop
 800336e:	e000      	b.n	8003372 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8003370:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003372:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003376:	2b00      	cmp	r3, #0
 8003378:	d10b      	bne.n	8003392 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 800337a:	4b8f      	ldr	r3, [pc, #572]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800337c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800337e:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 8003382:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003386:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 800338a:	4a8b      	ldr	r2, [pc, #556]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800338c:	430b      	orrs	r3, r1
 800338e:	6593      	str	r3, [r2, #88]	@ 0x58
 8003390:	e003      	b.n	800339a <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003392:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003396:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 800339a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800339e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033a2:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 80033a6:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80033aa:	2300      	movs	r3, #0
 80033ac:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80033b0:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 80033b4:	460b      	mov	r3, r1
 80033b6:	4313      	orrs	r3, r2
 80033b8:	d055      	beq.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 80033ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80033be:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 80033c2:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80033c6:	d033      	beq.n	8003430 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 80033c8:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 80033cc:	d82c      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80033ce:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d2:	d02f      	beq.n	8003434 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 80033d4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80033d8:	d826      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80033da:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80033de:	d02b      	beq.n	8003438 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 80033e0:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 80033e4:	d820      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80033e6:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033ea:	d012      	beq.n	8003412 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 80033ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80033f0:	d81a      	bhi.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d022      	beq.n	800343c <HAL_RCCEx_PeriphCLKConfig+0xe64>
 80033f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80033fa:	d115      	bne.n	8003428 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80033fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003400:	3308      	adds	r3, #8
 8003402:	2100      	movs	r1, #0
 8003404:	4618      	mov	r0, r3
 8003406:	f000 fdef 	bl	8003fe8 <RCCEx_PLL2_Config>
 800340a:	4603      	mov	r3, r0
 800340c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003410:	e015      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003416:	3328      	adds	r3, #40	@ 0x28
 8003418:	2102      	movs	r1, #2
 800341a:	4618      	mov	r0, r3
 800341c:	f000 fe96 	bl	800414c <RCCEx_PLL3_Config>
 8003420:	4603      	mov	r3, r0
 8003422:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8003426:	e00a      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800342e:	e006      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003430:	bf00      	nop
 8003432:	e004      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003434:	bf00      	nop
 8003436:	e002      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8003438:	bf00      	nop
 800343a:	e000      	b.n	800343e <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 800343c:	bf00      	nop
    }

    if (ret == HAL_OK)
 800343e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003442:	2b00      	cmp	r3, #0
 8003444:	d10b      	bne.n	800345e <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8003446:	4b5c      	ldr	r3, [pc, #368]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003448:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800344a:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 800344e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003452:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8003456:	4a58      	ldr	r2, [pc, #352]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8003458:	430b      	orrs	r3, r1
 800345a:	6593      	str	r3, [r2, #88]	@ 0x58
 800345c:	e003      	b.n	8003466 <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800345e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003462:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8003466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800346a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800346e:	f002 0308 	and.w	r3, r2, #8
 8003472:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8003476:	2300      	movs	r3, #0
 8003478:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800347c:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 8003480:	460b      	mov	r3, r1
 8003482:	4313      	orrs	r3, r2
 8003484:	d01e      	beq.n	80034c4 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 8003486:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800348a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800348e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003492:	d10c      	bne.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 8003494:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003498:	3328      	adds	r3, #40	@ 0x28
 800349a:	2102      	movs	r1, #2
 800349c:	4618      	mov	r0, r3
 800349e:	f000 fe55 	bl	800414c <RCCEx_PLL3_Config>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d002      	beq.n	80034ae <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 80034a8:	2301      	movs	r3, #1
 80034aa:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 80034ae:	4b42      	ldr	r3, [pc, #264]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034b0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80034b2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80034b6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80034be:	4a3e      	ldr	r2, [pc, #248]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80034c0:	430b      	orrs	r3, r1
 80034c2:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80034c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f002 0310 	and.w	r3, r2, #16
 80034d0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80034d4:	2300      	movs	r3, #0
 80034d6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 80034da:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 80034de:	460b      	mov	r3, r1
 80034e0:	4313      	orrs	r3, r2
 80034e2:	d01e      	beq.n	8003522 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 80034e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034e8:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 80034ec:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80034f0:	d10c      	bne.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80034f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80034f6:	3328      	adds	r3, #40	@ 0x28
 80034f8:	2102      	movs	r1, #2
 80034fa:	4618      	mov	r0, r3
 80034fc:	f000 fe26 	bl	800414c <RCCEx_PLL3_Config>
 8003500:	4603      	mov	r3, r0
 8003502:	2b00      	cmp	r3, #0
 8003504:	d002      	beq.n	800350c <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800350c:	4b2a      	ldr	r3, [pc, #168]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800350e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003510:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003518:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800351c:	4a26      	ldr	r2, [pc, #152]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800351e:	430b      	orrs	r3, r1
 8003520:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003522:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003526:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352a:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 800352e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8003532:	2300      	movs	r3, #0
 8003534:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8003538:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 800353c:	460b      	mov	r3, r1
 800353e:	4313      	orrs	r3, r2
 8003540:	d040      	beq.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 8003542:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003546:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 800354a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 800354e:	d022      	beq.n	8003596 <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 8003550:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8003554:	d81b      	bhi.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 8003556:	2b00      	cmp	r3, #0
 8003558:	d003      	beq.n	8003562 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 800355a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800355e:	d00b      	beq.n	8003578 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 8003560:	e015      	b.n	800358e <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8003562:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003566:	3308      	adds	r3, #8
 8003568:	2100      	movs	r1, #0
 800356a:	4618      	mov	r0, r3
 800356c:	f000 fd3c 	bl	8003fe8 <RCCEx_PLL2_Config>
 8003570:	4603      	mov	r3, r0
 8003572:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8003576:	e00f      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003578:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800357c:	3328      	adds	r3, #40	@ 0x28
 800357e:	2102      	movs	r1, #2
 8003580:	4618      	mov	r0, r3
 8003582:	f000 fde3 	bl	800414c <RCCEx_PLL3_Config>
 8003586:	4603      	mov	r3, r0
 8003588:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 800358c:	e004      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 800358e:	2301      	movs	r3, #1
 8003590:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003594:	e000      	b.n	8003598 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 8003596:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003598:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800359c:	2b00      	cmp	r3, #0
 800359e:	d10d      	bne.n	80035bc <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80035a0:	4b05      	ldr	r3, [pc, #20]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035a2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80035a4:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 80035a8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035ac:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 80035b0:	4a01      	ldr	r2, [pc, #4]	@ (80035b8 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80035b2:	430b      	orrs	r3, r1
 80035b4:	6593      	str	r3, [r2, #88]	@ 0x58
 80035b6:	e005      	b.n	80035c4 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 80035b8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 80035bc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80035c0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80035c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035cc:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 80035d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80035d2:	2300      	movs	r3, #0
 80035d4:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80035d6:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 80035da:	460b      	mov	r3, r1
 80035dc:	4313      	orrs	r3, r2
 80035de:	d03b      	beq.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 80035e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80035e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80035e8:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035ec:	d01f      	beq.n	800362e <HAL_RCCEx_PeriphCLKConfig+0x1056>
 80035ee:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 80035f2:	d818      	bhi.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x104e>
 80035f4:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80035f8:	d003      	beq.n	8003602 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 80035fa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 80035fe:	d007      	beq.n	8003610 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8003600:	e011      	b.n	8003626 <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003602:	4b64      	ldr	r3, [pc, #400]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003604:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003606:	4a63      	ldr	r2, [pc, #396]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003608:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800360c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 800360e:	e00f      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8003610:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003614:	3328      	adds	r3, #40	@ 0x28
 8003616:	2101      	movs	r1, #1
 8003618:	4618      	mov	r0, r3
 800361a:	f000 fd97 	bl	800414c <RCCEx_PLL3_Config>
 800361e:	4603      	mov	r3, r0
 8003620:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 8003624:	e004      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003626:	2301      	movs	r3, #1
 8003628:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 800362c:	e000      	b.n	8003630 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 800362e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003630:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003634:	2b00      	cmp	r3, #0
 8003636:	d10b      	bne.n	8003650 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003638:	4b56      	ldr	r3, [pc, #344]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800363a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800363c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8003640:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003644:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8003648:	4a52      	ldr	r2, [pc, #328]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800364a:	430b      	orrs	r3, r1
 800364c:	6553      	str	r3, [r2, #84]	@ 0x54
 800364e:	e003      	b.n	8003658 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003650:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003654:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 8003658:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 8003664:	673b      	str	r3, [r7, #112]	@ 0x70
 8003666:	2300      	movs	r3, #0
 8003668:	677b      	str	r3, [r7, #116]	@ 0x74
 800366a:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 800366e:	460b      	mov	r3, r1
 8003670:	4313      	orrs	r3, r2
 8003672:	d031      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 8003674:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003678:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800367a:	2b00      	cmp	r3, #0
 800367c:	d003      	beq.n	8003686 <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 800367e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003682:	d007      	beq.n	8003694 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 8003684:	e011      	b.n	80036aa <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003686:	4b43      	ldr	r3, [pc, #268]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003688:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800368a:	4a42      	ldr	r2, [pc, #264]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800368c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003690:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8003692:	e00e      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8003694:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003698:	3308      	adds	r3, #8
 800369a:	2102      	movs	r1, #2
 800369c:	4618      	mov	r0, r3
 800369e:	f000 fca3 	bl	8003fe8 <RCCEx_PLL2_Config>
 80036a2:	4603      	mov	r3, r0
 80036a4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 80036a8:	e003      	b.n	80036b2 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 80036b0:	bf00      	nop
    }

    if (ret == HAL_OK)
 80036b2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d10a      	bne.n	80036d0 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 80036ba:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036bc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80036be:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80036c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036c6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80036c8:	4a32      	ldr	r2, [pc, #200]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80036ca:	430b      	orrs	r3, r1
 80036cc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80036ce:	e003      	b.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80036d0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80036d4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80036d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036e0:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 80036e4:	66bb      	str	r3, [r7, #104]	@ 0x68
 80036e6:	2300      	movs	r3, #0
 80036e8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80036ea:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 80036ee:	460b      	mov	r3, r1
 80036f0:	4313      	orrs	r3, r2
 80036f2:	d00c      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 80036f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80036f8:	3328      	adds	r3, #40	@ 0x28
 80036fa:	2102      	movs	r1, #2
 80036fc:	4618      	mov	r0, r3
 80036fe:	f000 fd25 	bl	800414c <RCCEx_PLL3_Config>
 8003702:	4603      	mov	r3, r0
 8003704:	2b00      	cmp	r3, #0
 8003706:	d002      	beq.n	800370e <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 800370e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003712:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003716:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 800371a:	663b      	str	r3, [r7, #96]	@ 0x60
 800371c:	2300      	movs	r3, #0
 800371e:	667b      	str	r3, [r7, #100]	@ 0x64
 8003720:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 8003724:	460b      	mov	r3, r1
 8003726:	4313      	orrs	r3, r2
 8003728:	d03a      	beq.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 800372a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800372e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8003732:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8003736:	d018      	beq.n	800376a <HAL_RCCEx_PeriphCLKConfig+0x1192>
 8003738:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800373c:	d811      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800373e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003742:	d014      	beq.n	800376e <HAL_RCCEx_PeriphCLKConfig+0x1196>
 8003744:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003748:	d80b      	bhi.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 800374a:	2b00      	cmp	r3, #0
 800374c:	d011      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 800374e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003752:	d106      	bne.n	8003762 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8003754:	4b0f      	ldr	r3, [pc, #60]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8003756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003758:	4a0e      	ldr	r2, [pc, #56]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800375a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800375e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 8003760:	e008      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8003762:	2301      	movs	r3, #1
 8003764:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 8003768:	e004      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800376a:	bf00      	nop
 800376c:	e002      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 800376e:	bf00      	nop
 8003770:	e000      	b.n	8003774 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 8003772:	bf00      	nop
    }

    if (ret == HAL_OK)
 8003774:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003778:	2b00      	cmp	r3, #0
 800377a:	d10d      	bne.n	8003798 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 800377c:	4b05      	ldr	r3, [pc, #20]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800377e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003780:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003784:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003788:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800378c:	4a01      	ldr	r2, [pc, #4]	@ (8003794 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800378e:	430b      	orrs	r3, r1
 8003790:	6553      	str	r3, [r2, #84]	@ 0x54
 8003792:	e005      	b.n	80037a0 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 8003794:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003798:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800379c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 80037a0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037a8:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 80037ac:	65bb      	str	r3, [r7, #88]	@ 0x58
 80037ae:	2300      	movs	r3, #0
 80037b0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80037b2:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 80037b6:	460b      	mov	r3, r1
 80037b8:	4313      	orrs	r3, r2
 80037ba:	d009      	beq.n	80037d0 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 80037bc:	4baa      	ldr	r3, [pc, #680]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037be:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80037c0:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 80037c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037c8:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80037ca:	4aa7      	ldr	r2, [pc, #668]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037cc:	430b      	orrs	r3, r1
 80037ce:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 80037d0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037d8:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 80037dc:	653b      	str	r3, [r7, #80]	@ 0x50
 80037de:	2300      	movs	r3, #0
 80037e0:	657b      	str	r3, [r7, #84]	@ 0x54
 80037e2:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 80037e6:	460b      	mov	r3, r1
 80037e8:	4313      	orrs	r3, r2
 80037ea:	d00a      	beq.n	8003802 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 80037ec:	4b9e      	ldr	r3, [pc, #632]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037ee:	691b      	ldr	r3, [r3, #16]
 80037f0:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 80037f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80037f8:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 80037fc:	4a9a      	ldr	r2, [pc, #616]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80037fe:	430b      	orrs	r3, r1
 8003800:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 8003802:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800380a:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 800380e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003810:	2300      	movs	r3, #0
 8003812:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003814:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 8003818:	460b      	mov	r3, r1
 800381a:	4313      	orrs	r3, r2
 800381c:	d009      	beq.n	8003832 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800381e:	4b92      	ldr	r3, [pc, #584]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8003822:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 8003826:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800382a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800382c:	4a8e      	ldr	r2, [pc, #568]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800382e:	430b      	orrs	r3, r1
 8003830:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 8003832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383a:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 800383e:	643b      	str	r3, [r7, #64]	@ 0x40
 8003840:	2300      	movs	r3, #0
 8003842:	647b      	str	r3, [r7, #68]	@ 0x44
 8003844:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 8003848:	460b      	mov	r3, r1
 800384a:	4313      	orrs	r3, r2
 800384c:	d00e      	beq.n	800386c <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800384e:	4b86      	ldr	r3, [pc, #536]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003850:	691b      	ldr	r3, [r3, #16]
 8003852:	4a85      	ldr	r2, [pc, #532]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003854:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 8003858:	6113      	str	r3, [r2, #16]
 800385a:	4b83      	ldr	r3, [pc, #524]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800385c:	6919      	ldr	r1, [r3, #16]
 800385e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003862:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8003866:	4a80      	ldr	r2, [pc, #512]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003868:	430b      	orrs	r3, r1
 800386a:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 800386c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003874:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 8003878:	63bb      	str	r3, [r7, #56]	@ 0x38
 800387a:	2300      	movs	r3, #0
 800387c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800387e:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 8003882:	460b      	mov	r3, r1
 8003884:	4313      	orrs	r3, r2
 8003886:	d009      	beq.n	800389c <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8003888:	4b77      	ldr	r3, [pc, #476]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 800388a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800388c:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 8003890:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003894:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003896:	4a74      	ldr	r2, [pc, #464]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8003898:	430b      	orrs	r3, r1
 800389a:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800389c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a4:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 80038a8:	633b      	str	r3, [r7, #48]	@ 0x30
 80038aa:	2300      	movs	r3, #0
 80038ac:	637b      	str	r3, [r7, #52]	@ 0x34
 80038ae:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 80038b2:	460b      	mov	r3, r1
 80038b4:	4313      	orrs	r3, r2
 80038b6:	d00a      	beq.n	80038ce <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80038b8:	4b6b      	ldr	r3, [pc, #428]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80038ba:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038bc:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 80038c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80038c8:	4a67      	ldr	r2, [pc, #412]	@ (8003a68 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80038ca:	430b      	orrs	r3, r1
 80038cc:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 80038ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d6:	2100      	movs	r1, #0
 80038d8:	62b9      	str	r1, [r7, #40]	@ 0x28
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80038e0:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 80038e4:	460b      	mov	r3, r1
 80038e6:	4313      	orrs	r3, r2
 80038e8:	d011      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80038ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80038ee:	3308      	adds	r3, #8
 80038f0:	2100      	movs	r1, #0
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fb78 	bl	8003fe8 <RCCEx_PLL2_Config>
 80038f8:	4603      	mov	r3, r0
 80038fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80038fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003902:	2b00      	cmp	r3, #0
 8003904:	d003      	beq.n	800390e <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003906:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800390a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 800390e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003912:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003916:	2100      	movs	r1, #0
 8003918:	6239      	str	r1, [r7, #32]
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003920:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 8003924:	460b      	mov	r3, r1
 8003926:	4313      	orrs	r3, r2
 8003928:	d011      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 800392a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800392e:	3308      	adds	r3, #8
 8003930:	2101      	movs	r1, #1
 8003932:	4618      	mov	r0, r3
 8003934:	f000 fb58 	bl	8003fe8 <RCCEx_PLL2_Config>
 8003938:	4603      	mov	r3, r0
 800393a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800393e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003942:	2b00      	cmp	r3, #0
 8003944:	d003      	beq.n	800394e <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003946:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800394a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 800394e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003952:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003956:	2100      	movs	r1, #0
 8003958:	61b9      	str	r1, [r7, #24]
 800395a:	f003 0304 	and.w	r3, r3, #4
 800395e:	61fb      	str	r3, [r7, #28]
 8003960:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 8003964:	460b      	mov	r3, r1
 8003966:	4313      	orrs	r3, r2
 8003968:	d011      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800396a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 800396e:	3308      	adds	r3, #8
 8003970:	2102      	movs	r1, #2
 8003972:	4618      	mov	r0, r3
 8003974:	f000 fb38 	bl	8003fe8 <RCCEx_PLL2_Config>
 8003978:	4603      	mov	r3, r0
 800397a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 800397e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003982:	2b00      	cmp	r3, #0
 8003984:	d003      	beq.n	800398e <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003986:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 800398a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 800398e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003996:	2100      	movs	r1, #0
 8003998:	6139      	str	r1, [r7, #16]
 800399a:	f003 0308 	and.w	r3, r3, #8
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 80039a4:	460b      	mov	r3, r1
 80039a6:	4313      	orrs	r3, r2
 80039a8:	d011      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80039aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039ae:	3328      	adds	r3, #40	@ 0x28
 80039b0:	2100      	movs	r1, #0
 80039b2:	4618      	mov	r0, r3
 80039b4:	f000 fbca 	bl	800414c <RCCEx_PLL3_Config>
 80039b8:	4603      	mov	r3, r0
 80039ba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 80039be:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80039c6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 80039ca:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 80039ce:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d6:	2100      	movs	r1, #0
 80039d8:	60b9      	str	r1, [r7, #8]
 80039da:	f003 0310 	and.w	r3, r3, #16
 80039de:	60fb      	str	r3, [r7, #12]
 80039e0:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 80039e4:	460b      	mov	r3, r1
 80039e6:	4313      	orrs	r3, r2
 80039e8:	d011      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80039ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 80039ee:	3328      	adds	r3, #40	@ 0x28
 80039f0:	2101      	movs	r1, #1
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 fbaa 	bl	800414c <RCCEx_PLL3_Config>
 80039f8:	4603      	mov	r3, r0
 80039fa:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 80039fe:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d003      	beq.n	8003a0e <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a06:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a0a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8003a0e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a16:	2100      	movs	r1, #0
 8003a18:	6039      	str	r1, [r7, #0]
 8003a1a:	f003 0320 	and.w	r3, r3, #32
 8003a1e:	607b      	str	r3, [r7, #4]
 8003a20:	e9d7 1200 	ldrd	r1, r2, [r7]
 8003a24:	460b      	mov	r3, r1
 8003a26:	4313      	orrs	r3, r2
 8003a28:	d011      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8003a2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 8003a2e:	3328      	adds	r3, #40	@ 0x28
 8003a30:	2102      	movs	r1, #2
 8003a32:	4618      	mov	r0, r3
 8003a34:	f000 fb8a 	bl	800414c <RCCEx_PLL3_Config>
 8003a38:	4603      	mov	r3, r0
 8003a3a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 8003a3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d003      	beq.n	8003a4e <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003a46:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 8003a4a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 8003a4e:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d101      	bne.n	8003a5a <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 8003a56:	2300      	movs	r3, #0
 8003a58:	e000      	b.n	8003a5c <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 8003a5a:	2301      	movs	r3, #1
}
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 8003a62:	46bd      	mov	sp, r7
 8003a64:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003a68:	58024400 	.word	0x58024400

08003a6c <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 8003a6c:	b580      	push	{r7, lr}
 8003a6e:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 8003a70:	f7fe fd56 	bl	8002520 <HAL_RCC_GetHCLKFreq>
 8003a74:	4602      	mov	r2, r0
 8003a76:	4b06      	ldr	r3, [pc, #24]	@ (8003a90 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8003a78:	6a1b      	ldr	r3, [r3, #32]
 8003a7a:	091b      	lsrs	r3, r3, #4
 8003a7c:	f003 0307 	and.w	r3, r3, #7
 8003a80:	4904      	ldr	r1, [pc, #16]	@ (8003a94 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 8003a82:	5ccb      	ldrb	r3, [r1, r3]
 8003a84:	f003 031f 	and.w	r3, r3, #31
 8003a88:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	bd80      	pop	{r7, pc}
 8003a90:	58024400 	.word	0x58024400
 8003a94:	0800a5f8 	.word	0x0800a5f8

08003a98 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b089      	sub	sp, #36	@ 0x24
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003aa0:	4ba1      	ldr	r3, [pc, #644]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aa2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aa4:	f003 0303 	and.w	r3, r3, #3
 8003aa8:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8003aaa:	4b9f      	ldr	r3, [pc, #636]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003aae:	0b1b      	lsrs	r3, r3, #12
 8003ab0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ab4:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 8003ab6:	4b9c      	ldr	r3, [pc, #624]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ab8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003aba:	091b      	lsrs	r3, r3, #4
 8003abc:	f003 0301 	and.w	r3, r3, #1
 8003ac0:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 8003ac2:	4b99      	ldr	r3, [pc, #612]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003ac4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ac6:	08db      	lsrs	r3, r3, #3
 8003ac8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003acc:	693a      	ldr	r2, [r7, #16]
 8003ace:	fb02 f303 	mul.w	r3, r2, r3
 8003ad2:	ee07 3a90 	vmov	s15, r3
 8003ad6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ada:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8003ade:	697b      	ldr	r3, [r7, #20]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8111 	beq.w	8003d08 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 8003ae6:	69bb      	ldr	r3, [r7, #24]
 8003ae8:	2b02      	cmp	r3, #2
 8003aea:	f000 8083 	beq.w	8003bf4 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8003aee:	69bb      	ldr	r3, [r7, #24]
 8003af0:	2b02      	cmp	r3, #2
 8003af2:	f200 80a1 	bhi.w	8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 8003af6:	69bb      	ldr	r3, [r7, #24]
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d003      	beq.n	8003b04 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8003afc:	69bb      	ldr	r3, [r7, #24]
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d056      	beq.n	8003bb0 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 8003b02:	e099      	b.n	8003c38 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003b04:	4b88      	ldr	r3, [pc, #544]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	f003 0320 	and.w	r3, r3, #32
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d02d      	beq.n	8003b6c <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003b10:	4b85      	ldr	r3, [pc, #532]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	08db      	lsrs	r3, r3, #3
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	4a84      	ldr	r2, [pc, #528]	@ (8003d2c <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 8003b1c:	fa22 f303 	lsr.w	r3, r2, r3
 8003b20:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b22:	68bb      	ldr	r3, [r7, #8]
 8003b24:	ee07 3a90 	vmov	s15, r3
 8003b28:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b2c:	697b      	ldr	r3, [r7, #20]
 8003b2e:	ee07 3a90 	vmov	s15, r3
 8003b32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b36:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b3a:	4b7b      	ldr	r3, [pc, #492]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b3e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b42:	ee07 3a90 	vmov	s15, r3
 8003b46:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b4a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b4e:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b52:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b56:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b5a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003b5e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003b62:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b66:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003b6a:	e087      	b.n	8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	ee07 3a90 	vmov	s15, r3
 8003b72:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003b76:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003d34 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8003b7a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003b7e:	4b6a      	ldr	r3, [pc, #424]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003b80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b82:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b86:	ee07 3a90 	vmov	s15, r3
 8003b8a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003b8e:	ed97 6a03 	vldr	s12, [r7, #12]
 8003b92:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003b96:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003b9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003b9e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ba2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ba6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003baa:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bae:	e065      	b.n	8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	ee07 3a90 	vmov	s15, r3
 8003bb6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bba:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003bbe:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003bc2:	4b59      	ldr	r3, [pc, #356]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003bc4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bc6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003bca:	ee07 3a90 	vmov	s15, r3
 8003bce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003bd2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003bd6:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003bda:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003bde:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003be2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003be6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003bea:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bee:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003bf2:	e043      	b.n	8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003bf4:	697b      	ldr	r3, [r7, #20]
 8003bf6:	ee07 3a90 	vmov	s15, r3
 8003bfa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003bfe:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003d3c <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 8003c02:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c06:	4b48      	ldr	r3, [pc, #288]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c0a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c0e:	ee07 3a90 	vmov	s15, r3
 8003c12:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c16:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c1a:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c1e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c22:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c26:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c2a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c2e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c32:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c36:	e021      	b.n	8003c7c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8003c38:	697b      	ldr	r3, [r7, #20]
 8003c3a:	ee07 3a90 	vmov	s15, r3
 8003c3e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c42:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003d38 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8003c46:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003c4a:	4b37      	ldr	r3, [pc, #220]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c4c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c4e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003c52:	ee07 3a90 	vmov	s15, r3
 8003c56:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003c5a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003c5e:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003d30 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8003c62:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003c66:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003c6a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003c6e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003c72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c76:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003c7a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8003c7c:	4b2a      	ldr	r3, [pc, #168]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003c7e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003c80:	0a5b      	lsrs	r3, r3, #9
 8003c82:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c8e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003c92:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003c96:	edd7 6a07 	vldr	s13, [r7, #28]
 8003c9a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c9e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ca2:	ee17 2a90 	vmov	r2, s15
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8003caa:	4b1f      	ldr	r3, [pc, #124]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cac:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cae:	0c1b      	lsrs	r3, r3, #16
 8003cb0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003cb4:	ee07 3a90 	vmov	s15, r3
 8003cb8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cbc:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cc0:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cc4:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cc8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003ccc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cd0:	ee17 2a90 	vmov	r2, s15
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8003cd8:	4b13      	ldr	r3, [pc, #76]	@ (8003d28 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8003cda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cdc:	0e1b      	lsrs	r3, r3, #24
 8003cde:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003ce2:	ee07 3a90 	vmov	s15, r3
 8003ce6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cea:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003cee:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003cf2:	edd7 6a07 	vldr	s13, [r7, #28]
 8003cf6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003cfa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cfe:	ee17 2a90 	vmov	r2, s15
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 8003d06:	e008      	b.n	8003d1a <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	2200      	movs	r2, #0
 8003d12:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2200      	movs	r2, #0
 8003d18:	609a      	str	r2, [r3, #8]
}
 8003d1a:	bf00      	nop
 8003d1c:	3724      	adds	r7, #36	@ 0x24
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	58024400 	.word	0x58024400
 8003d2c:	03d09000 	.word	0x03d09000
 8003d30:	46000000 	.word	0x46000000
 8003d34:	4c742400 	.word	0x4c742400
 8003d38:	4a742400 	.word	0x4a742400
 8003d3c:	4bbebc20 	.word	0x4bbebc20

08003d40 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 8003d40:	b480      	push	{r7}
 8003d42:	b089      	sub	sp, #36	@ 0x24
 8003d44:	af00      	add	r7, sp, #0
 8003d46:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003d48:	4ba1      	ldr	r3, [pc, #644]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d4c:	f003 0303 	and.w	r3, r3, #3
 8003d50:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 8003d52:	4b9f      	ldr	r3, [pc, #636]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d54:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d56:	0d1b      	lsrs	r3, r3, #20
 8003d58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003d5c:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 8003d5e:	4b9c      	ldr	r3, [pc, #624]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d62:	0a1b      	lsrs	r3, r3, #8
 8003d64:	f003 0301 	and.w	r3, r3, #1
 8003d68:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 8003d6a:	4b99      	ldr	r3, [pc, #612]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003d6e:	08db      	lsrs	r3, r3, #3
 8003d70:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003d74:	693a      	ldr	r2, [r7, #16]
 8003d76:	fb02 f303 	mul.w	r3, r2, r3
 8003d7a:	ee07 3a90 	vmov	s15, r3
 8003d7e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d82:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 8003d86:	697b      	ldr	r3, [r7, #20]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	f000 8111 	beq.w	8003fb0 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8003d8e:	69bb      	ldr	r3, [r7, #24]
 8003d90:	2b02      	cmp	r3, #2
 8003d92:	f000 8083 	beq.w	8003e9c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 8003d96:	69bb      	ldr	r3, [r7, #24]
 8003d98:	2b02      	cmp	r3, #2
 8003d9a:	f200 80a1 	bhi.w	8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8003d9e:	69bb      	ldr	r3, [r7, #24]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d003      	beq.n	8003dac <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	2b01      	cmp	r3, #1
 8003da8:	d056      	beq.n	8003e58 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8003daa:	e099      	b.n	8003ee0 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003dac:	4b88      	ldr	r3, [pc, #544]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f003 0320 	and.w	r3, r3, #32
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d02d      	beq.n	8003e14 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003db8:	4b85      	ldr	r3, [pc, #532]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	08db      	lsrs	r3, r3, #3
 8003dbe:	f003 0303 	and.w	r3, r3, #3
 8003dc2:	4a84      	ldr	r2, [pc, #528]	@ (8003fd4 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 8003dc4:	fa22 f303 	lsr.w	r3, r2, r3
 8003dc8:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003dca:	68bb      	ldr	r3, [r7, #8]
 8003dcc:	ee07 3a90 	vmov	s15, r3
 8003dd0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003dd4:	697b      	ldr	r3, [r7, #20]
 8003dd6:	ee07 3a90 	vmov	s15, r3
 8003dda:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003dde:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003de2:	4b7b      	ldr	r3, [pc, #492]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003de4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003de6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003dea:	ee07 3a90 	vmov	s15, r3
 8003dee:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003df2:	ed97 6a03 	vldr	s12, [r7, #12]
 8003df6:	eddf 5a78 	vldr	s11, [pc, #480]	@ 8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003dfa:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003dfe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e02:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e06:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e0a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e0e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8003e12:	e087      	b.n	8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e14:	697b      	ldr	r3, [r7, #20]
 8003e16:	ee07 3a90 	vmov	s15, r3
 8003e1a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e1e:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 8003fdc <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 8003e22:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e26:	4b6a      	ldr	r3, [pc, #424]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e2a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e2e:	ee07 3a90 	vmov	s15, r3
 8003e32:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e36:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e3a:	eddf 5a67 	vldr	s11, [pc, #412]	@ 8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e3e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e42:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e46:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e4a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e56:	e065      	b.n	8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e58:	697b      	ldr	r3, [r7, #20]
 8003e5a:	ee07 3a90 	vmov	s15, r3
 8003e5e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e62:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003e66:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003e6a:	4b59      	ldr	r3, [pc, #356]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003e6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003e6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003e72:	ee07 3a90 	vmov	s15, r3
 8003e76:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003e7a:	ed97 6a03 	vldr	s12, [r7, #12]
 8003e7e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003e82:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003e86:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e8a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003e8e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003e92:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e96:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003e9a:	e043      	b.n	8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003e9c:	697b      	ldr	r3, [r7, #20]
 8003e9e:	ee07 3a90 	vmov	s15, r3
 8003ea2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003ea6:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 8003fe4 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8003eaa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003eae:	4b48      	ldr	r3, [pc, #288]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003eb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eb2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003eb6:	ee07 3a90 	vmov	s15, r3
 8003eba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ebe:	ed97 6a03 	vldr	s12, [r7, #12]
 8003ec2:	eddf 5a45 	vldr	s11, [pc, #276]	@ 8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003ec6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003eca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ece:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003ed2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ed6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003eda:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003ede:	e021      	b.n	8003f24 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	ee07 3a90 	vmov	s15, r3
 8003ee6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003eea:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8003fe0 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8003eee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003ef2:	4b37      	ldr	r3, [pc, #220]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ef6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003efa:	ee07 3a90 	vmov	s15, r3
 8003efe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f02:	ed97 6a03 	vldr	s12, [r7, #12]
 8003f06:	eddf 5a34 	vldr	s11, [pc, #208]	@ 8003fd8 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8003f0a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f0e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f12:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 8003f16:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f1a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f1e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8003f22:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 8003f24:	4b2a      	ldr	r3, [pc, #168]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f28:	0a5b      	lsrs	r3, r3, #9
 8003f2a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f2e:	ee07 3a90 	vmov	s15, r3
 8003f32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f36:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f3a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f3e:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f42:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f46:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f4a:	ee17 2a90 	vmov	r2, s15
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 8003f52:	4b1f      	ldr	r3, [pc, #124]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f56:	0c1b      	lsrs	r3, r3, #16
 8003f58:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f5c:	ee07 3a90 	vmov	s15, r3
 8003f60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f64:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f68:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f6c:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f70:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003f74:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f78:	ee17 2a90 	vmov	r2, s15
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8003f80:	4b13      	ldr	r3, [pc, #76]	@ (8003fd0 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8003f82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f84:	0e1b      	lsrs	r3, r3, #24
 8003f86:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003f8a:	ee07 3a90 	vmov	s15, r3
 8003f8e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f92:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8003f96:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003f9a:	edd7 6a07 	vldr	s13, [r7, #28]
 8003f9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003fa2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003fa6:	ee17 2a90 	vmov	r2, s15
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8003fae:	e008      	b.n	8003fc2 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	2200      	movs	r2, #0
 8003fc0:	609a      	str	r2, [r3, #8]
}
 8003fc2:	bf00      	nop
 8003fc4:	3724      	adds	r7, #36	@ 0x24
 8003fc6:	46bd      	mov	sp, r7
 8003fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fcc:	4770      	bx	lr
 8003fce:	bf00      	nop
 8003fd0:	58024400 	.word	0x58024400
 8003fd4:	03d09000 	.word	0x03d09000
 8003fd8:	46000000 	.word	0x46000000
 8003fdc:	4c742400 	.word	0x4c742400
 8003fe0:	4a742400 	.word	0x4a742400
 8003fe4:	4bbebc20 	.word	0x4bbebc20

08003fe8 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b084      	sub	sp, #16
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
 8003ff0:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8003ff6:	4b53      	ldr	r3, [pc, #332]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8003ff8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ffa:	f003 0303 	and.w	r3, r3, #3
 8003ffe:	2b03      	cmp	r3, #3
 8004000:	d101      	bne.n	8004006 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 8004002:	2301      	movs	r3, #1
 8004004:	e099      	b.n	800413a <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8004006:	4b4f      	ldr	r3, [pc, #316]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4a4e      	ldr	r2, [pc, #312]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 800400c:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8004010:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004012:	f7fc ffed 	bl	8000ff0 <HAL_GetTick>
 8004016:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8004018:	e008      	b.n	800402c <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800401a:	f7fc ffe9 	bl	8000ff0 <HAL_GetTick>
 800401e:	4602      	mov	r2, r0
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	1ad3      	subs	r3, r2, r3
 8004024:	2b02      	cmp	r3, #2
 8004026:	d901      	bls.n	800402c <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e086      	b.n	800413a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 800402c:	4b45      	ldr	r3, [pc, #276]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004034:	2b00      	cmp	r3, #0
 8004036:	d1f0      	bne.n	800401a <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8004038:	4b42      	ldr	r3, [pc, #264]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 800403a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800403c:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	031b      	lsls	r3, r3, #12
 8004046:	493f      	ldr	r1, [pc, #252]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004048:	4313      	orrs	r3, r2
 800404a:	628b      	str	r3, [r1, #40]	@ 0x28
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	685b      	ldr	r3, [r3, #4]
 8004050:	3b01      	subs	r3, #1
 8004052:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	3b01      	subs	r3, #1
 800405c:	025b      	lsls	r3, r3, #9
 800405e:	b29b      	uxth	r3, r3
 8004060:	431a      	orrs	r2, r3
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	68db      	ldr	r3, [r3, #12]
 8004066:	3b01      	subs	r3, #1
 8004068:	041b      	lsls	r3, r3, #16
 800406a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 800406e:	431a      	orrs	r2, r3
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	691b      	ldr	r3, [r3, #16]
 8004074:	3b01      	subs	r3, #1
 8004076:	061b      	lsls	r3, r3, #24
 8004078:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 800407c:	4931      	ldr	r1, [pc, #196]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 800407e:	4313      	orrs	r3, r2
 8004080:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 8004082:	4b30      	ldr	r3, [pc, #192]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004086:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	492d      	ldr	r1, [pc, #180]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004090:	4313      	orrs	r3, r2
 8004092:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 8004094:	4b2b      	ldr	r3, [pc, #172]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004098:	f023 0220 	bic.w	r2, r3, #32
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	699b      	ldr	r3, [r3, #24]
 80040a0:	4928      	ldr	r1, [pc, #160]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040a2:	4313      	orrs	r3, r2
 80040a4:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80040a6:	4b27      	ldr	r3, [pc, #156]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040a8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040aa:	4a26      	ldr	r2, [pc, #152]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040ac:	f023 0310 	bic.w	r3, r3, #16
 80040b0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80040b2:	4b24      	ldr	r3, [pc, #144]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040b4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80040b6:	4b24      	ldr	r3, [pc, #144]	@ (8004148 <RCCEx_PLL2_Config+0x160>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	687a      	ldr	r2, [r7, #4]
 80040bc:	69d2      	ldr	r2, [r2, #28]
 80040be:	00d2      	lsls	r2, r2, #3
 80040c0:	4920      	ldr	r1, [pc, #128]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040c2:	4313      	orrs	r3, r2
 80040c4:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80040c6:	4b1f      	ldr	r3, [pc, #124]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040ca:	4a1e      	ldr	r2, [pc, #120]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040cc:	f043 0310 	orr.w	r3, r3, #16
 80040d0:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d106      	bne.n	80040e6 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 80040d8:	4b1a      	ldr	r3, [pc, #104]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040da:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040dc:	4a19      	ldr	r2, [pc, #100]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040de:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 80040e2:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040e4:	e00f      	b.n	8004106 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 80040e6:	683b      	ldr	r3, [r7, #0]
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d106      	bne.n	80040fa <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 80040ec:	4b15      	ldr	r3, [pc, #84]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040f0:	4a14      	ldr	r2, [pc, #80]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040f2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80040f6:	62d3      	str	r3, [r2, #44]	@ 0x2c
 80040f8:	e005      	b.n	8004106 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 80040fa:	4b12      	ldr	r3, [pc, #72]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 80040fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040fe:	4a11      	ldr	r2, [pc, #68]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004100:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8004104:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8004106:	4b0f      	ldr	r3, [pc, #60]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	4a0e      	ldr	r2, [pc, #56]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 800410c:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8004110:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004112:	f7fc ff6d 	bl	8000ff0 <HAL_GetTick>
 8004116:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8004118:	e008      	b.n	800412c <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 800411a:	f7fc ff69 	bl	8000ff0 <HAL_GetTick>
 800411e:	4602      	mov	r2, r0
 8004120:	68bb      	ldr	r3, [r7, #8]
 8004122:	1ad3      	subs	r3, r2, r3
 8004124:	2b02      	cmp	r3, #2
 8004126:	d901      	bls.n	800412c <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8004128:	2303      	movs	r3, #3
 800412a:	e006      	b.n	800413a <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 800412c:	4b05      	ldr	r3, [pc, #20]	@ (8004144 <RCCEx_PLL2_Config+0x15c>)
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8004134:	2b00      	cmp	r3, #0
 8004136:	d0f0      	beq.n	800411a <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8004138:	7bfb      	ldrb	r3, [r7, #15]
}
 800413a:	4618      	mov	r0, r3
 800413c:	3710      	adds	r7, #16
 800413e:	46bd      	mov	sp, r7
 8004140:	bd80      	pop	{r7, pc}
 8004142:	bf00      	nop
 8004144:	58024400 	.word	0x58024400
 8004148:	ffff0007 	.word	0xffff0007

0800414c <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
 8004154:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8004156:	2300      	movs	r3, #0
 8004158:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 800415a:	4b53      	ldr	r3, [pc, #332]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800415c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800415e:	f003 0303 	and.w	r3, r3, #3
 8004162:	2b03      	cmp	r3, #3
 8004164:	d101      	bne.n	800416a <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8004166:	2301      	movs	r3, #1
 8004168:	e099      	b.n	800429e <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 800416a:	4b4f      	ldr	r3, [pc, #316]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800416c:	681b      	ldr	r3, [r3, #0]
 800416e:	4a4e      	ldr	r2, [pc, #312]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004170:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004174:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004176:	f7fc ff3b 	bl	8000ff0 <HAL_GetTick>
 800417a:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 800417c:	e008      	b.n	8004190 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800417e:	f7fc ff37 	bl	8000ff0 <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	2b02      	cmp	r3, #2
 800418a:	d901      	bls.n	8004190 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 800418c:	2303      	movs	r3, #3
 800418e:	e086      	b.n	800429e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8004190:	4b45      	ldr	r3, [pc, #276]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004198:	2b00      	cmp	r3, #0
 800419a:	d1f0      	bne.n	800417e <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 800419c:	4b42      	ldr	r3, [pc, #264]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800419e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80041a0:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	051b      	lsls	r3, r3, #20
 80041aa:	493f      	ldr	r1, [pc, #252]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 80041ac:	4313      	orrs	r3, r2
 80041ae:	628b      	str	r3, [r1, #40]	@ 0x28
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	3b01      	subs	r3, #1
 80041b6:	f3c3 0208 	ubfx	r2, r3, #0, #9
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	689b      	ldr	r3, [r3, #8]
 80041be:	3b01      	subs	r3, #1
 80041c0:	025b      	lsls	r3, r3, #9
 80041c2:	b29b      	uxth	r3, r3
 80041c4:	431a      	orrs	r2, r3
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	68db      	ldr	r3, [r3, #12]
 80041ca:	3b01      	subs	r3, #1
 80041cc:	041b      	lsls	r3, r3, #16
 80041ce:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 80041d2:	431a      	orrs	r2, r3
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	691b      	ldr	r3, [r3, #16]
 80041d8:	3b01      	subs	r3, #1
 80041da:	061b      	lsls	r3, r3, #24
 80041dc:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 80041e0:	4931      	ldr	r1, [pc, #196]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 80041e2:	4313      	orrs	r3, r2
 80041e4:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 80041e6:	4b30      	ldr	r3, [pc, #192]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041ea:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	695b      	ldr	r3, [r3, #20]
 80041f2:	492d      	ldr	r1, [pc, #180]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 80041f4:	4313      	orrs	r3, r2
 80041f6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 80041f8:	4b2b      	ldr	r3, [pc, #172]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 80041fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80041fc:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	699b      	ldr	r3, [r3, #24]
 8004204:	4928      	ldr	r1, [pc, #160]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004206:	4313      	orrs	r3, r2
 8004208:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 800420a:	4b27      	ldr	r3, [pc, #156]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800420c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800420e:	4a26      	ldr	r2, [pc, #152]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004210:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004214:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8004216:	4b24      	ldr	r3, [pc, #144]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004218:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800421a:	4b24      	ldr	r3, [pc, #144]	@ (80042ac <RCCEx_PLL3_Config+0x160>)
 800421c:	4013      	ands	r3, r2
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	69d2      	ldr	r2, [r2, #28]
 8004222:	00d2      	lsls	r2, r2, #3
 8004224:	4920      	ldr	r1, [pc, #128]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004226:	4313      	orrs	r3, r2
 8004228:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 800422a:	4b1f      	ldr	r3, [pc, #124]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800422c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800422e:	4a1e      	ldr	r2, [pc, #120]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004230:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004234:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d106      	bne.n	800424a <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 800423c:	4b1a      	ldr	r3, [pc, #104]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800423e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004240:	4a19      	ldr	r2, [pc, #100]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004242:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8004246:	62d3      	str	r3, [r2, #44]	@ 0x2c
 8004248:	e00f      	b.n	800426a <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b01      	cmp	r3, #1
 800424e:	d106      	bne.n	800425e <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8004250:	4b15      	ldr	r3, [pc, #84]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004252:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004254:	4a14      	ldr	r2, [pc, #80]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004256:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 800425a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 800425c:	e005      	b.n	800426a <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 800425e:	4b12      	ldr	r3, [pc, #72]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004262:	4a11      	ldr	r2, [pc, #68]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004264:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8004268:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 800426a:	4b0f      	ldr	r3, [pc, #60]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	4a0e      	ldr	r2, [pc, #56]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004270:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004274:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004276:	f7fc febb 	bl	8000ff0 <HAL_GetTick>
 800427a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 800427c:	e008      	b.n	8004290 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 800427e:	f7fc feb7 	bl	8000ff0 <HAL_GetTick>
 8004282:	4602      	mov	r2, r0
 8004284:	68bb      	ldr	r3, [r7, #8]
 8004286:	1ad3      	subs	r3, r2, r3
 8004288:	2b02      	cmp	r3, #2
 800428a:	d901      	bls.n	8004290 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 800428c:	2303      	movs	r3, #3
 800428e:	e006      	b.n	800429e <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8004290:	4b05      	ldr	r3, [pc, #20]	@ (80042a8 <RCCEx_PLL3_Config+0x15c>)
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8004298:	2b00      	cmp	r3, #0
 800429a:	d0f0      	beq.n	800427e <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 800429c:	7bfb      	ldrb	r3, [r7, #15]
}
 800429e:	4618      	mov	r0, r3
 80042a0:	3710      	adds	r7, #16
 80042a2:	46bd      	mov	sp, r7
 80042a4:	bd80      	pop	{r7, pc}
 80042a6:	bf00      	nop
 80042a8:	58024400 	.word	0x58024400
 80042ac:	ffff0007 	.word	0xffff0007

080042b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	b082      	sub	sp, #8
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d101      	bne.n	80042c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042be:	2301      	movs	r3, #1
 80042c0:	e042      	b.n	8004348 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80042c8:	2b00      	cmp	r3, #0
 80042ca:	d106      	bne.n	80042da <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	f7fc fcb9 	bl	8000c4c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	2224      	movs	r2, #36	@ 0x24
 80042de:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	681a      	ldr	r2, [r3, #0]
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	f022 0201 	bic.w	r2, r2, #1
 80042f0:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042f6:	2b00      	cmp	r3, #0
 80042f8:	d002      	beq.n	8004300 <HAL_UART_Init+0x50>
  {
    UART_AdvFeatureConfig(huart);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 fe1e 	bl	8004f3c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8b3 	bl	800446c <UART_SetConfig>
 8004306:	4603      	mov	r3, r0
 8004308:	2b01      	cmp	r3, #1
 800430a:	d101      	bne.n	8004310 <HAL_UART_Init+0x60>
  {
    return HAL_ERROR;
 800430c:	2301      	movs	r3, #1
 800430e:	e01b      	b.n	8004348 <HAL_UART_Init+0x98>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800431e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	689a      	ldr	r2, [r3, #8]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800432e:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	681a      	ldr	r2, [r3, #0]
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f042 0201 	orr.w	r2, r2, #1
 800433e:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004340:	6878      	ldr	r0, [r7, #4]
 8004342:	f000 fe9d 	bl	8005080 <UART_CheckIdleState>
 8004346:	4603      	mov	r3, r0
}
 8004348:	4618      	mov	r0, r3
 800434a:	3708      	adds	r7, #8
 800434c:	46bd      	mov	sp, r7
 800434e:	bd80      	pop	{r7, pc}

08004350 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004350:	b580      	push	{r7, lr}
 8004352:	b08a      	sub	sp, #40	@ 0x28
 8004354:	af02      	add	r7, sp, #8
 8004356:	60f8      	str	r0, [r7, #12]
 8004358:	60b9      	str	r1, [r7, #8]
 800435a:	603b      	str	r3, [r7, #0]
 800435c:	4613      	mov	r3, r2
 800435e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004366:	2b20      	cmp	r3, #32
 8004368:	d17b      	bne.n	8004462 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	2b00      	cmp	r3, #0
 800436e:	d002      	beq.n	8004376 <HAL_UART_Transmit+0x26>
 8004370:	88fb      	ldrh	r3, [r7, #6]
 8004372:	2b00      	cmp	r3, #0
 8004374:	d101      	bne.n	800437a <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8004376:	2301      	movs	r3, #1
 8004378:	e074      	b.n	8004464 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	2221      	movs	r2, #33	@ 0x21
 8004386:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800438a:	f7fc fe31 	bl	8000ff0 <HAL_GetTick>
 800438e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	88fa      	ldrh	r2, [r7, #6]
 8004394:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	88fa      	ldrh	r2, [r7, #6]
 800439c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80043a8:	d108      	bne.n	80043bc <HAL_UART_Transmit+0x6c>
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	691b      	ldr	r3, [r3, #16]
 80043ae:	2b00      	cmp	r3, #0
 80043b0:	d104      	bne.n	80043bc <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80043b2:	2300      	movs	r3, #0
 80043b4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80043b6:	68bb      	ldr	r3, [r7, #8]
 80043b8:	61bb      	str	r3, [r7, #24]
 80043ba:	e003      	b.n	80043c4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80043c0:	2300      	movs	r3, #0
 80043c2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80043c4:	e030      	b.n	8004428 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	9300      	str	r3, [sp, #0]
 80043ca:	697b      	ldr	r3, [r7, #20]
 80043cc:	2200      	movs	r2, #0
 80043ce:	2180      	movs	r1, #128	@ 0x80
 80043d0:	68f8      	ldr	r0, [r7, #12]
 80043d2:	f000 feff 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80043d6:	4603      	mov	r3, r0
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d005      	beq.n	80043e8 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	2220      	movs	r2, #32
 80043e0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 80043e4:	2303      	movs	r3, #3
 80043e6:	e03d      	b.n	8004464 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 80043e8:	69fb      	ldr	r3, [r7, #28]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d10b      	bne.n	8004406 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 80043ee:	69bb      	ldr	r3, [r7, #24]
 80043f0:	881b      	ldrh	r3, [r3, #0]
 80043f2:	461a      	mov	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80043fc:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 80043fe:	69bb      	ldr	r3, [r7, #24]
 8004400:	3302      	adds	r3, #2
 8004402:	61bb      	str	r3, [r7, #24]
 8004404:	e007      	b.n	8004416 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8004406:	69fb      	ldr	r3, [r7, #28]
 8004408:	781a      	ldrb	r2, [r3, #0]
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8004410:	69fb      	ldr	r3, [r7, #28]
 8004412:	3301      	adds	r3, #1
 8004414:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800441c:	b29b      	uxth	r3, r3
 800441e:	3b01      	subs	r3, #1
 8004420:	b29a      	uxth	r2, r3
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 800442e:	b29b      	uxth	r3, r3
 8004430:	2b00      	cmp	r3, #0
 8004432:	d1c8      	bne.n	80043c6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004434:	683b      	ldr	r3, [r7, #0]
 8004436:	9300      	str	r3, [sp, #0]
 8004438:	697b      	ldr	r3, [r7, #20]
 800443a:	2200      	movs	r2, #0
 800443c:	2140      	movs	r1, #64	@ 0x40
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fec8 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d005      	beq.n	8004456 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	2220      	movs	r2, #32
 800444e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e006      	b.n	8004464 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004456:	68fb      	ldr	r3, [r7, #12]
 8004458:	2220      	movs	r2, #32
 800445a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 800445e:	2300      	movs	r3, #0
 8004460:	e000      	b.n	8004464 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8004462:	2302      	movs	r3, #2
  }
}
 8004464:	4618      	mov	r0, r3
 8004466:	3720      	adds	r7, #32
 8004468:	46bd      	mov	sp, r7
 800446a:	bd80      	pop	{r7, pc}

0800446c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800446c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004470:	b092      	sub	sp, #72	@ 0x48
 8004472:	af00      	add	r7, sp, #0
 8004474:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004476:	2300      	movs	r3, #0
 8004478:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800447c:	697b      	ldr	r3, [r7, #20]
 800447e:	689a      	ldr	r2, [r3, #8]
 8004480:	697b      	ldr	r3, [r7, #20]
 8004482:	691b      	ldr	r3, [r3, #16]
 8004484:	431a      	orrs	r2, r3
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	695b      	ldr	r3, [r3, #20]
 800448a:	431a      	orrs	r2, r3
 800448c:	697b      	ldr	r3, [r7, #20]
 800448e:	69db      	ldr	r3, [r3, #28]
 8004490:	4313      	orrs	r3, r2
 8004492:	647b      	str	r3, [r7, #68]	@ 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004494:	697b      	ldr	r3, [r7, #20]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	681a      	ldr	r2, [r3, #0]
 800449a:	4bbe      	ldr	r3, [pc, #760]	@ (8004794 <UART_SetConfig+0x328>)
 800449c:	4013      	ands	r3, r2
 800449e:	697a      	ldr	r2, [r7, #20]
 80044a0:	6812      	ldr	r2, [r2, #0]
 80044a2:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044a4:	430b      	orrs	r3, r1
 80044a6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80044a8:	697b      	ldr	r3, [r7, #20]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80044b2:	697b      	ldr	r3, [r7, #20]
 80044b4:	68da      	ldr	r2, [r3, #12]
 80044b6:	697b      	ldr	r3, [r7, #20]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	430a      	orrs	r2, r1
 80044bc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	647b      	str	r3, [r7, #68]	@ 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80044c4:	697b      	ldr	r3, [r7, #20]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	4ab3      	ldr	r2, [pc, #716]	@ (8004798 <UART_SetConfig+0x32c>)
 80044ca:	4293      	cmp	r3, r2
 80044cc:	d004      	beq.n	80044d8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80044ce:	697b      	ldr	r3, [r7, #20]
 80044d0:	6a1b      	ldr	r3, [r3, #32]
 80044d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80044d4:	4313      	orrs	r3, r2
 80044d6:	647b      	str	r3, [r7, #68]	@ 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80044d8:	697b      	ldr	r3, [r7, #20]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	689a      	ldr	r2, [r3, #8]
 80044de:	4baf      	ldr	r3, [pc, #700]	@ (800479c <UART_SetConfig+0x330>)
 80044e0:	4013      	ands	r3, r2
 80044e2:	697a      	ldr	r2, [r7, #20]
 80044e4:	6812      	ldr	r2, [r2, #0]
 80044e6:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80044e8:	430b      	orrs	r3, r1
 80044ea:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80044ec:	697b      	ldr	r3, [r7, #20]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044f2:	f023 010f 	bic.w	r1, r3, #15
 80044f6:	697b      	ldr	r3, [r7, #20]
 80044f8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	430a      	orrs	r2, r1
 8004500:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	4aa6      	ldr	r2, [pc, #664]	@ (80047a0 <UART_SetConfig+0x334>)
 8004508:	4293      	cmp	r3, r2
 800450a:	d177      	bne.n	80045fc <UART_SetConfig+0x190>
 800450c:	4ba5      	ldr	r3, [pc, #660]	@ (80047a4 <UART_SetConfig+0x338>)
 800450e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004510:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004514:	2b28      	cmp	r3, #40	@ 0x28
 8004516:	d86d      	bhi.n	80045f4 <UART_SetConfig+0x188>
 8004518:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <UART_SetConfig+0xb4>)
 800451a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800451e:	bf00      	nop
 8004520:	080045c5 	.word	0x080045c5
 8004524:	080045f5 	.word	0x080045f5
 8004528:	080045f5 	.word	0x080045f5
 800452c:	080045f5 	.word	0x080045f5
 8004530:	080045f5 	.word	0x080045f5
 8004534:	080045f5 	.word	0x080045f5
 8004538:	080045f5 	.word	0x080045f5
 800453c:	080045f5 	.word	0x080045f5
 8004540:	080045cd 	.word	0x080045cd
 8004544:	080045f5 	.word	0x080045f5
 8004548:	080045f5 	.word	0x080045f5
 800454c:	080045f5 	.word	0x080045f5
 8004550:	080045f5 	.word	0x080045f5
 8004554:	080045f5 	.word	0x080045f5
 8004558:	080045f5 	.word	0x080045f5
 800455c:	080045f5 	.word	0x080045f5
 8004560:	080045d5 	.word	0x080045d5
 8004564:	080045f5 	.word	0x080045f5
 8004568:	080045f5 	.word	0x080045f5
 800456c:	080045f5 	.word	0x080045f5
 8004570:	080045f5 	.word	0x080045f5
 8004574:	080045f5 	.word	0x080045f5
 8004578:	080045f5 	.word	0x080045f5
 800457c:	080045f5 	.word	0x080045f5
 8004580:	080045dd 	.word	0x080045dd
 8004584:	080045f5 	.word	0x080045f5
 8004588:	080045f5 	.word	0x080045f5
 800458c:	080045f5 	.word	0x080045f5
 8004590:	080045f5 	.word	0x080045f5
 8004594:	080045f5 	.word	0x080045f5
 8004598:	080045f5 	.word	0x080045f5
 800459c:	080045f5 	.word	0x080045f5
 80045a0:	080045e5 	.word	0x080045e5
 80045a4:	080045f5 	.word	0x080045f5
 80045a8:	080045f5 	.word	0x080045f5
 80045ac:	080045f5 	.word	0x080045f5
 80045b0:	080045f5 	.word	0x080045f5
 80045b4:	080045f5 	.word	0x080045f5
 80045b8:	080045f5 	.word	0x080045f5
 80045bc:	080045f5 	.word	0x080045f5
 80045c0:	080045ed 	.word	0x080045ed
 80045c4:	2301      	movs	r3, #1
 80045c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ca:	e222      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045cc:	2304      	movs	r3, #4
 80045ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045d2:	e21e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045d4:	2308      	movs	r3, #8
 80045d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045da:	e21a      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045dc:	2310      	movs	r3, #16
 80045de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045e2:	e216      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045e4:	2320      	movs	r3, #32
 80045e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045ea:	e212      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045ec:	2340      	movs	r3, #64	@ 0x40
 80045ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045f2:	e20e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045f4:	2380      	movs	r3, #128	@ 0x80
 80045f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80045fa:	e20a      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80045fc:	697b      	ldr	r3, [r7, #20]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	4a69      	ldr	r2, [pc, #420]	@ (80047a8 <UART_SetConfig+0x33c>)
 8004602:	4293      	cmp	r3, r2
 8004604:	d130      	bne.n	8004668 <UART_SetConfig+0x1fc>
 8004606:	4b67      	ldr	r3, [pc, #412]	@ (80047a4 <UART_SetConfig+0x338>)
 8004608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800460a:	f003 0307 	and.w	r3, r3, #7
 800460e:	2b05      	cmp	r3, #5
 8004610:	d826      	bhi.n	8004660 <UART_SetConfig+0x1f4>
 8004612:	a201      	add	r2, pc, #4	@ (adr r2, 8004618 <UART_SetConfig+0x1ac>)
 8004614:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004618:	08004631 	.word	0x08004631
 800461c:	08004639 	.word	0x08004639
 8004620:	08004641 	.word	0x08004641
 8004624:	08004649 	.word	0x08004649
 8004628:	08004651 	.word	0x08004651
 800462c:	08004659 	.word	0x08004659
 8004630:	2300      	movs	r3, #0
 8004632:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004636:	e1ec      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004638:	2304      	movs	r3, #4
 800463a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800463e:	e1e8      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004640:	2308      	movs	r3, #8
 8004642:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004646:	e1e4      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004648:	2310      	movs	r3, #16
 800464a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800464e:	e1e0      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004650:	2320      	movs	r3, #32
 8004652:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004656:	e1dc      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004658:	2340      	movs	r3, #64	@ 0x40
 800465a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800465e:	e1d8      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004660:	2380      	movs	r3, #128	@ 0x80
 8004662:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004666:	e1d4      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004668:	697b      	ldr	r3, [r7, #20]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	4a4f      	ldr	r2, [pc, #316]	@ (80047ac <UART_SetConfig+0x340>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d130      	bne.n	80046d4 <UART_SetConfig+0x268>
 8004672:	4b4c      	ldr	r3, [pc, #304]	@ (80047a4 <UART_SetConfig+0x338>)
 8004674:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004676:	f003 0307 	and.w	r3, r3, #7
 800467a:	2b05      	cmp	r3, #5
 800467c:	d826      	bhi.n	80046cc <UART_SetConfig+0x260>
 800467e:	a201      	add	r2, pc, #4	@ (adr r2, 8004684 <UART_SetConfig+0x218>)
 8004680:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004684:	0800469d 	.word	0x0800469d
 8004688:	080046a5 	.word	0x080046a5
 800468c:	080046ad 	.word	0x080046ad
 8004690:	080046b5 	.word	0x080046b5
 8004694:	080046bd 	.word	0x080046bd
 8004698:	080046c5 	.word	0x080046c5
 800469c:	2300      	movs	r3, #0
 800469e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046a2:	e1b6      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046a4:	2304      	movs	r3, #4
 80046a6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046aa:	e1b2      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046ac:	2308      	movs	r3, #8
 80046ae:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046b2:	e1ae      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046b4:	2310      	movs	r3, #16
 80046b6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ba:	e1aa      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046bc:	2320      	movs	r3, #32
 80046be:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046c2:	e1a6      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046c4:	2340      	movs	r3, #64	@ 0x40
 80046c6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046ca:	e1a2      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046cc:	2380      	movs	r3, #128	@ 0x80
 80046ce:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80046d2:	e19e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80046d4:	697b      	ldr	r3, [r7, #20]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a35      	ldr	r2, [pc, #212]	@ (80047b0 <UART_SetConfig+0x344>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d130      	bne.n	8004740 <UART_SetConfig+0x2d4>
 80046de:	4b31      	ldr	r3, [pc, #196]	@ (80047a4 <UART_SetConfig+0x338>)
 80046e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80046e2:	f003 0307 	and.w	r3, r3, #7
 80046e6:	2b05      	cmp	r3, #5
 80046e8:	d826      	bhi.n	8004738 <UART_SetConfig+0x2cc>
 80046ea:	a201      	add	r2, pc, #4	@ (adr r2, 80046f0 <UART_SetConfig+0x284>)
 80046ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046f0:	08004709 	.word	0x08004709
 80046f4:	08004711 	.word	0x08004711
 80046f8:	08004719 	.word	0x08004719
 80046fc:	08004721 	.word	0x08004721
 8004700:	08004729 	.word	0x08004729
 8004704:	08004731 	.word	0x08004731
 8004708:	2300      	movs	r3, #0
 800470a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800470e:	e180      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004710:	2304      	movs	r3, #4
 8004712:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004716:	e17c      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004718:	2308      	movs	r3, #8
 800471a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800471e:	e178      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004720:	2310      	movs	r3, #16
 8004722:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004726:	e174      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004728:	2320      	movs	r3, #32
 800472a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800472e:	e170      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004730:	2340      	movs	r3, #64	@ 0x40
 8004732:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004736:	e16c      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004738:	2380      	movs	r3, #128	@ 0x80
 800473a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800473e:	e168      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	681b      	ldr	r3, [r3, #0]
 8004744:	4a1b      	ldr	r2, [pc, #108]	@ (80047b4 <UART_SetConfig+0x348>)
 8004746:	4293      	cmp	r3, r2
 8004748:	d142      	bne.n	80047d0 <UART_SetConfig+0x364>
 800474a:	4b16      	ldr	r3, [pc, #88]	@ (80047a4 <UART_SetConfig+0x338>)
 800474c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800474e:	f003 0307 	and.w	r3, r3, #7
 8004752:	2b05      	cmp	r3, #5
 8004754:	d838      	bhi.n	80047c8 <UART_SetConfig+0x35c>
 8004756:	a201      	add	r2, pc, #4	@ (adr r2, 800475c <UART_SetConfig+0x2f0>)
 8004758:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800475c:	08004775 	.word	0x08004775
 8004760:	0800477d 	.word	0x0800477d
 8004764:	08004785 	.word	0x08004785
 8004768:	0800478d 	.word	0x0800478d
 800476c:	080047b9 	.word	0x080047b9
 8004770:	080047c1 	.word	0x080047c1
 8004774:	2300      	movs	r3, #0
 8004776:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800477a:	e14a      	b.n	8004a12 <UART_SetConfig+0x5a6>
 800477c:	2304      	movs	r3, #4
 800477e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004782:	e146      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004784:	2308      	movs	r3, #8
 8004786:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800478a:	e142      	b.n	8004a12 <UART_SetConfig+0x5a6>
 800478c:	2310      	movs	r3, #16
 800478e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004792:	e13e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004794:	cfff69f3 	.word	0xcfff69f3
 8004798:	58000c00 	.word	0x58000c00
 800479c:	11fff4ff 	.word	0x11fff4ff
 80047a0:	40011000 	.word	0x40011000
 80047a4:	58024400 	.word	0x58024400
 80047a8:	40004400 	.word	0x40004400
 80047ac:	40004800 	.word	0x40004800
 80047b0:	40004c00 	.word	0x40004c00
 80047b4:	40005000 	.word	0x40005000
 80047b8:	2320      	movs	r3, #32
 80047ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047be:	e128      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80047c0:	2340      	movs	r3, #64	@ 0x40
 80047c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047c6:	e124      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80047c8:	2380      	movs	r3, #128	@ 0x80
 80047ca:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80047ce:	e120      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80047d0:	697b      	ldr	r3, [r7, #20]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	4acb      	ldr	r2, [pc, #812]	@ (8004b04 <UART_SetConfig+0x698>)
 80047d6:	4293      	cmp	r3, r2
 80047d8:	d176      	bne.n	80048c8 <UART_SetConfig+0x45c>
 80047da:	4bcb      	ldr	r3, [pc, #812]	@ (8004b08 <UART_SetConfig+0x69c>)
 80047dc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80047de:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80047e2:	2b28      	cmp	r3, #40	@ 0x28
 80047e4:	d86c      	bhi.n	80048c0 <UART_SetConfig+0x454>
 80047e6:	a201      	add	r2, pc, #4	@ (adr r2, 80047ec <UART_SetConfig+0x380>)
 80047e8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047ec:	08004891 	.word	0x08004891
 80047f0:	080048c1 	.word	0x080048c1
 80047f4:	080048c1 	.word	0x080048c1
 80047f8:	080048c1 	.word	0x080048c1
 80047fc:	080048c1 	.word	0x080048c1
 8004800:	080048c1 	.word	0x080048c1
 8004804:	080048c1 	.word	0x080048c1
 8004808:	080048c1 	.word	0x080048c1
 800480c:	08004899 	.word	0x08004899
 8004810:	080048c1 	.word	0x080048c1
 8004814:	080048c1 	.word	0x080048c1
 8004818:	080048c1 	.word	0x080048c1
 800481c:	080048c1 	.word	0x080048c1
 8004820:	080048c1 	.word	0x080048c1
 8004824:	080048c1 	.word	0x080048c1
 8004828:	080048c1 	.word	0x080048c1
 800482c:	080048a1 	.word	0x080048a1
 8004830:	080048c1 	.word	0x080048c1
 8004834:	080048c1 	.word	0x080048c1
 8004838:	080048c1 	.word	0x080048c1
 800483c:	080048c1 	.word	0x080048c1
 8004840:	080048c1 	.word	0x080048c1
 8004844:	080048c1 	.word	0x080048c1
 8004848:	080048c1 	.word	0x080048c1
 800484c:	080048a9 	.word	0x080048a9
 8004850:	080048c1 	.word	0x080048c1
 8004854:	080048c1 	.word	0x080048c1
 8004858:	080048c1 	.word	0x080048c1
 800485c:	080048c1 	.word	0x080048c1
 8004860:	080048c1 	.word	0x080048c1
 8004864:	080048c1 	.word	0x080048c1
 8004868:	080048c1 	.word	0x080048c1
 800486c:	080048b1 	.word	0x080048b1
 8004870:	080048c1 	.word	0x080048c1
 8004874:	080048c1 	.word	0x080048c1
 8004878:	080048c1 	.word	0x080048c1
 800487c:	080048c1 	.word	0x080048c1
 8004880:	080048c1 	.word	0x080048c1
 8004884:	080048c1 	.word	0x080048c1
 8004888:	080048c1 	.word	0x080048c1
 800488c:	080048b9 	.word	0x080048b9
 8004890:	2301      	movs	r3, #1
 8004892:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004896:	e0bc      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004898:	2304      	movs	r3, #4
 800489a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800489e:	e0b8      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80048a0:	2308      	movs	r3, #8
 80048a2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048a6:	e0b4      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80048a8:	2310      	movs	r3, #16
 80048aa:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048ae:	e0b0      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80048b0:	2320      	movs	r3, #32
 80048b2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048b6:	e0ac      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80048b8:	2340      	movs	r3, #64	@ 0x40
 80048ba:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048be:	e0a8      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80048c0:	2380      	movs	r3, #128	@ 0x80
 80048c2:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80048c6:	e0a4      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80048c8:	697b      	ldr	r3, [r7, #20]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	4a8f      	ldr	r2, [pc, #572]	@ (8004b0c <UART_SetConfig+0x6a0>)
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d130      	bne.n	8004934 <UART_SetConfig+0x4c8>
 80048d2:	4b8d      	ldr	r3, [pc, #564]	@ (8004b08 <UART_SetConfig+0x69c>)
 80048d4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80048d6:	f003 0307 	and.w	r3, r3, #7
 80048da:	2b05      	cmp	r3, #5
 80048dc:	d826      	bhi.n	800492c <UART_SetConfig+0x4c0>
 80048de:	a201      	add	r2, pc, #4	@ (adr r2, 80048e4 <UART_SetConfig+0x478>)
 80048e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80048e4:	080048fd 	.word	0x080048fd
 80048e8:	08004905 	.word	0x08004905
 80048ec:	0800490d 	.word	0x0800490d
 80048f0:	08004915 	.word	0x08004915
 80048f4:	0800491d 	.word	0x0800491d
 80048f8:	08004925 	.word	0x08004925
 80048fc:	2300      	movs	r3, #0
 80048fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004902:	e086      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004904:	2304      	movs	r3, #4
 8004906:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800490a:	e082      	b.n	8004a12 <UART_SetConfig+0x5a6>
 800490c:	2308      	movs	r3, #8
 800490e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004912:	e07e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004914:	2310      	movs	r3, #16
 8004916:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800491a:	e07a      	b.n	8004a12 <UART_SetConfig+0x5a6>
 800491c:	2320      	movs	r3, #32
 800491e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004922:	e076      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004924:	2340      	movs	r3, #64	@ 0x40
 8004926:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800492a:	e072      	b.n	8004a12 <UART_SetConfig+0x5a6>
 800492c:	2380      	movs	r3, #128	@ 0x80
 800492e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004932:	e06e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004934:	697b      	ldr	r3, [r7, #20]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	4a75      	ldr	r2, [pc, #468]	@ (8004b10 <UART_SetConfig+0x6a4>)
 800493a:	4293      	cmp	r3, r2
 800493c:	d130      	bne.n	80049a0 <UART_SetConfig+0x534>
 800493e:	4b72      	ldr	r3, [pc, #456]	@ (8004b08 <UART_SetConfig+0x69c>)
 8004940:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004942:	f003 0307 	and.w	r3, r3, #7
 8004946:	2b05      	cmp	r3, #5
 8004948:	d826      	bhi.n	8004998 <UART_SetConfig+0x52c>
 800494a:	a201      	add	r2, pc, #4	@ (adr r2, 8004950 <UART_SetConfig+0x4e4>)
 800494c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004950:	08004969 	.word	0x08004969
 8004954:	08004971 	.word	0x08004971
 8004958:	08004979 	.word	0x08004979
 800495c:	08004981 	.word	0x08004981
 8004960:	08004989 	.word	0x08004989
 8004964:	08004991 	.word	0x08004991
 8004968:	2300      	movs	r3, #0
 800496a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800496e:	e050      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004970:	2304      	movs	r3, #4
 8004972:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004976:	e04c      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004978:	2308      	movs	r3, #8
 800497a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800497e:	e048      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004980:	2310      	movs	r3, #16
 8004982:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004986:	e044      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004988:	2320      	movs	r3, #32
 800498a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800498e:	e040      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004990:	2340      	movs	r3, #64	@ 0x40
 8004992:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004996:	e03c      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004998:	2380      	movs	r3, #128	@ 0x80
 800499a:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 800499e:	e038      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80049a0:	697b      	ldr	r3, [r7, #20]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4a5b      	ldr	r2, [pc, #364]	@ (8004b14 <UART_SetConfig+0x6a8>)
 80049a6:	4293      	cmp	r3, r2
 80049a8:	d130      	bne.n	8004a0c <UART_SetConfig+0x5a0>
 80049aa:	4b57      	ldr	r3, [pc, #348]	@ (8004b08 <UART_SetConfig+0x69c>)
 80049ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80049ae:	f003 0307 	and.w	r3, r3, #7
 80049b2:	2b05      	cmp	r3, #5
 80049b4:	d826      	bhi.n	8004a04 <UART_SetConfig+0x598>
 80049b6:	a201      	add	r2, pc, #4	@ (adr r2, 80049bc <UART_SetConfig+0x550>)
 80049b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049bc:	080049d5 	.word	0x080049d5
 80049c0:	080049dd 	.word	0x080049dd
 80049c4:	080049e5 	.word	0x080049e5
 80049c8:	080049ed 	.word	0x080049ed
 80049cc:	080049f5 	.word	0x080049f5
 80049d0:	080049fd 	.word	0x080049fd
 80049d4:	2302      	movs	r3, #2
 80049d6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049da:	e01a      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80049dc:	2304      	movs	r3, #4
 80049de:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049e2:	e016      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80049e4:	2308      	movs	r3, #8
 80049e6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049ea:	e012      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80049ec:	2310      	movs	r3, #16
 80049ee:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049f2:	e00e      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80049f4:	2320      	movs	r3, #32
 80049f6:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 80049fa:	e00a      	b.n	8004a12 <UART_SetConfig+0x5a6>
 80049fc:	2340      	movs	r3, #64	@ 0x40
 80049fe:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a02:	e006      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004a04:	2380      	movs	r3, #128	@ 0x80
 8004a06:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43
 8004a0a:	e002      	b.n	8004a12 <UART_SetConfig+0x5a6>
 8004a0c:	2380      	movs	r3, #128	@ 0x80
 8004a0e:	f887 3043 	strb.w	r3, [r7, #67]	@ 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a3f      	ldr	r2, [pc, #252]	@ (8004b14 <UART_SetConfig+0x6a8>)
 8004a18:	4293      	cmp	r3, r2
 8004a1a:	f040 80f8 	bne.w	8004c0e <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004a1e:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004a22:	2b20      	cmp	r3, #32
 8004a24:	dc46      	bgt.n	8004ab4 <UART_SetConfig+0x648>
 8004a26:	2b02      	cmp	r3, #2
 8004a28:	f2c0 8082 	blt.w	8004b30 <UART_SetConfig+0x6c4>
 8004a2c:	3b02      	subs	r3, #2
 8004a2e:	2b1e      	cmp	r3, #30
 8004a30:	d87e      	bhi.n	8004b30 <UART_SetConfig+0x6c4>
 8004a32:	a201      	add	r2, pc, #4	@ (adr r2, 8004a38 <UART_SetConfig+0x5cc>)
 8004a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004a38:	08004abb 	.word	0x08004abb
 8004a3c:	08004b31 	.word	0x08004b31
 8004a40:	08004ac3 	.word	0x08004ac3
 8004a44:	08004b31 	.word	0x08004b31
 8004a48:	08004b31 	.word	0x08004b31
 8004a4c:	08004b31 	.word	0x08004b31
 8004a50:	08004ad3 	.word	0x08004ad3
 8004a54:	08004b31 	.word	0x08004b31
 8004a58:	08004b31 	.word	0x08004b31
 8004a5c:	08004b31 	.word	0x08004b31
 8004a60:	08004b31 	.word	0x08004b31
 8004a64:	08004b31 	.word	0x08004b31
 8004a68:	08004b31 	.word	0x08004b31
 8004a6c:	08004b31 	.word	0x08004b31
 8004a70:	08004ae3 	.word	0x08004ae3
 8004a74:	08004b31 	.word	0x08004b31
 8004a78:	08004b31 	.word	0x08004b31
 8004a7c:	08004b31 	.word	0x08004b31
 8004a80:	08004b31 	.word	0x08004b31
 8004a84:	08004b31 	.word	0x08004b31
 8004a88:	08004b31 	.word	0x08004b31
 8004a8c:	08004b31 	.word	0x08004b31
 8004a90:	08004b31 	.word	0x08004b31
 8004a94:	08004b31 	.word	0x08004b31
 8004a98:	08004b31 	.word	0x08004b31
 8004a9c:	08004b31 	.word	0x08004b31
 8004aa0:	08004b31 	.word	0x08004b31
 8004aa4:	08004b31 	.word	0x08004b31
 8004aa8:	08004b31 	.word	0x08004b31
 8004aac:	08004b31 	.word	0x08004b31
 8004ab0:	08004b23 	.word	0x08004b23
 8004ab4:	2b40      	cmp	r3, #64	@ 0x40
 8004ab6:	d037      	beq.n	8004b28 <UART_SetConfig+0x6bc>
 8004ab8:	e03a      	b.n	8004b30 <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 8004aba:	f7fe ffd7 	bl	8003a6c <HAL_RCCEx_GetD3PCLK1Freq>
 8004abe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004ac0:	e03c      	b.n	8004b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004ac2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004ac6:	4618      	mov	r0, r3
 8004ac8:	f7fe ffe6 	bl	8003a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004acc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004ace:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ad0:	e034      	b.n	8004b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004ad2:	f107 0318 	add.w	r3, r7, #24
 8004ad6:	4618      	mov	r0, r3
 8004ad8:	f7ff f932 	bl	8003d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004adc:	69fb      	ldr	r3, [r7, #28]
 8004ade:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ae0:	e02c      	b.n	8004b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004ae2:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <UART_SetConfig+0x69c>)
 8004ae4:	681b      	ldr	r3, [r3, #0]
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d016      	beq.n	8004b1c <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004aee:	4b06      	ldr	r3, [pc, #24]	@ (8004b08 <UART_SetConfig+0x69c>)
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	08db      	lsrs	r3, r3, #3
 8004af4:	f003 0303 	and.w	r3, r3, #3
 8004af8:	4a07      	ldr	r2, [pc, #28]	@ (8004b18 <UART_SetConfig+0x6ac>)
 8004afa:	fa22 f303 	lsr.w	r3, r2, r3
 8004afe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004b00:	e01c      	b.n	8004b3c <UART_SetConfig+0x6d0>
 8004b02:	bf00      	nop
 8004b04:	40011400 	.word	0x40011400
 8004b08:	58024400 	.word	0x58024400
 8004b0c:	40007800 	.word	0x40007800
 8004b10:	40007c00 	.word	0x40007c00
 8004b14:	58000c00 	.word	0x58000c00
 8004b18:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8004b1c:	4b9d      	ldr	r3, [pc, #628]	@ (8004d94 <UART_SetConfig+0x928>)
 8004b1e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b20:	e00c      	b.n	8004b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004b22:	4b9d      	ldr	r3, [pc, #628]	@ (8004d98 <UART_SetConfig+0x92c>)
 8004b24:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b26:	e009      	b.n	8004b3c <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b28:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004b2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004b2e:	e005      	b.n	8004b3c <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 8004b30:	2300      	movs	r3, #0
 8004b32:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004b34:	2301      	movs	r3, #1
 8004b36:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004b3a:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004b3c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	f000 81de 	beq.w	8004f00 <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8004b44:	697b      	ldr	r3, [r7, #20]
 8004b46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b48:	4a94      	ldr	r2, [pc, #592]	@ (8004d9c <UART_SetConfig+0x930>)
 8004b4a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b4e:	461a      	mov	r2, r3
 8004b50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b52:	fbb3 f3f2 	udiv	r3, r3, r2
 8004b56:	633b      	str	r3, [r7, #48]	@ 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b58:	697b      	ldr	r3, [r7, #20]
 8004b5a:	685a      	ldr	r2, [r3, #4]
 8004b5c:	4613      	mov	r3, r2
 8004b5e:	005b      	lsls	r3, r3, #1
 8004b60:	4413      	add	r3, r2
 8004b62:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b64:	429a      	cmp	r2, r3
 8004b66:	d305      	bcc.n	8004b74 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004b68:	697b      	ldr	r3, [r7, #20]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004b6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004b70:	429a      	cmp	r2, r3
 8004b72:	d903      	bls.n	8004b7c <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 8004b74:	2301      	movs	r3, #1
 8004b76:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004b7a:	e1c1      	b.n	8004f00 <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b7c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004b7e:	2200      	movs	r2, #0
 8004b80:	60bb      	str	r3, [r7, #8]
 8004b82:	60fa      	str	r2, [r7, #12]
 8004b84:	697b      	ldr	r3, [r7, #20]
 8004b86:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004b88:	4a84      	ldr	r2, [pc, #528]	@ (8004d9c <UART_SetConfig+0x930>)
 8004b8a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004b8e:	b29b      	uxth	r3, r3
 8004b90:	2200      	movs	r2, #0
 8004b92:	603b      	str	r3, [r7, #0]
 8004b94:	607a      	str	r2, [r7, #4]
 8004b96:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004b9a:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8004b9e:	f7fb fbef 	bl	8000380 <__aeabi_uldivmod>
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	4610      	mov	r0, r2
 8004ba8:	4619      	mov	r1, r3
 8004baa:	f04f 0200 	mov.w	r2, #0
 8004bae:	f04f 0300 	mov.w	r3, #0
 8004bb2:	020b      	lsls	r3, r1, #8
 8004bb4:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8004bb8:	0202      	lsls	r2, r0, #8
 8004bba:	6979      	ldr	r1, [r7, #20]
 8004bbc:	6849      	ldr	r1, [r1, #4]
 8004bbe:	0849      	lsrs	r1, r1, #1
 8004bc0:	2000      	movs	r0, #0
 8004bc2:	460c      	mov	r4, r1
 8004bc4:	4605      	mov	r5, r0
 8004bc6:	eb12 0804 	adds.w	r8, r2, r4
 8004bca:	eb43 0905 	adc.w	r9, r3, r5
 8004bce:	697b      	ldr	r3, [r7, #20]
 8004bd0:	685b      	ldr	r3, [r3, #4]
 8004bd2:	2200      	movs	r2, #0
 8004bd4:	469a      	mov	sl, r3
 8004bd6:	4693      	mov	fp, r2
 8004bd8:	4652      	mov	r2, sl
 8004bda:	465b      	mov	r3, fp
 8004bdc:	4640      	mov	r0, r8
 8004bde:	4649      	mov	r1, r9
 8004be0:	f7fb fbce 	bl	8000380 <__aeabi_uldivmod>
 8004be4:	4602      	mov	r2, r0
 8004be6:	460b      	mov	r3, r1
 8004be8:	4613      	mov	r3, r2
 8004bea:	63bb      	str	r3, [r7, #56]	@ 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8004bec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bee:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bf2:	d308      	bcc.n	8004c06 <UART_SetConfig+0x79a>
 8004bf4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004bf6:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8004bfa:	d204      	bcs.n	8004c06 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8004bfc:	697b      	ldr	r3, [r7, #20]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8004c02:	60da      	str	r2, [r3, #12]
 8004c04:	e17c      	b.n	8004f00 <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8004c06:	2301      	movs	r3, #1
 8004c08:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004c0c:	e178      	b.n	8004f00 <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c0e:	697b      	ldr	r3, [r7, #20]
 8004c10:	69db      	ldr	r3, [r3, #28]
 8004c12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004c16:	f040 80c5 	bne.w	8004da4 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8004c1a:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004c1e:	2b20      	cmp	r3, #32
 8004c20:	dc48      	bgt.n	8004cb4 <UART_SetConfig+0x848>
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	db7b      	blt.n	8004d1e <UART_SetConfig+0x8b2>
 8004c26:	2b20      	cmp	r3, #32
 8004c28:	d879      	bhi.n	8004d1e <UART_SetConfig+0x8b2>
 8004c2a:	a201      	add	r2, pc, #4	@ (adr r2, 8004c30 <UART_SetConfig+0x7c4>)
 8004c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c30:	08004cbb 	.word	0x08004cbb
 8004c34:	08004cc3 	.word	0x08004cc3
 8004c38:	08004d1f 	.word	0x08004d1f
 8004c3c:	08004d1f 	.word	0x08004d1f
 8004c40:	08004ccb 	.word	0x08004ccb
 8004c44:	08004d1f 	.word	0x08004d1f
 8004c48:	08004d1f 	.word	0x08004d1f
 8004c4c:	08004d1f 	.word	0x08004d1f
 8004c50:	08004cdb 	.word	0x08004cdb
 8004c54:	08004d1f 	.word	0x08004d1f
 8004c58:	08004d1f 	.word	0x08004d1f
 8004c5c:	08004d1f 	.word	0x08004d1f
 8004c60:	08004d1f 	.word	0x08004d1f
 8004c64:	08004d1f 	.word	0x08004d1f
 8004c68:	08004d1f 	.word	0x08004d1f
 8004c6c:	08004d1f 	.word	0x08004d1f
 8004c70:	08004ceb 	.word	0x08004ceb
 8004c74:	08004d1f 	.word	0x08004d1f
 8004c78:	08004d1f 	.word	0x08004d1f
 8004c7c:	08004d1f 	.word	0x08004d1f
 8004c80:	08004d1f 	.word	0x08004d1f
 8004c84:	08004d1f 	.word	0x08004d1f
 8004c88:	08004d1f 	.word	0x08004d1f
 8004c8c:	08004d1f 	.word	0x08004d1f
 8004c90:	08004d1f 	.word	0x08004d1f
 8004c94:	08004d1f 	.word	0x08004d1f
 8004c98:	08004d1f 	.word	0x08004d1f
 8004c9c:	08004d1f 	.word	0x08004d1f
 8004ca0:	08004d1f 	.word	0x08004d1f
 8004ca4:	08004d1f 	.word	0x08004d1f
 8004ca8:	08004d1f 	.word	0x08004d1f
 8004cac:	08004d1f 	.word	0x08004d1f
 8004cb0:	08004d11 	.word	0x08004d11
 8004cb4:	2b40      	cmp	r3, #64	@ 0x40
 8004cb6:	d02e      	beq.n	8004d16 <UART_SetConfig+0x8aa>
 8004cb8:	e031      	b.n	8004d1e <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004cba:	f7fd fc61 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004cbe:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004cc0:	e033      	b.n	8004d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004cc2:	f7fd fc73 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004cc6:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004cc8:	e02f      	b.n	8004d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004cca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fee2 	bl	8003a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004cd4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cd6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004cd8:	e027      	b.n	8004d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004cda:	f107 0318 	add.w	r3, r7, #24
 8004cde:	4618      	mov	r0, r3
 8004ce0:	f7ff f82e 	bl	8003d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004ce4:	69fb      	ldr	r3, [r7, #28]
 8004ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ce8:	e01f      	b.n	8004d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004cea:	4b2d      	ldr	r3, [pc, #180]	@ (8004da0 <UART_SetConfig+0x934>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f003 0320 	and.w	r3, r3, #32
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d009      	beq.n	8004d0a <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004cf6:	4b2a      	ldr	r3, [pc, #168]	@ (8004da0 <UART_SetConfig+0x934>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	08db      	lsrs	r3, r3, #3
 8004cfc:	f003 0303 	and.w	r3, r3, #3
 8004d00:	4a24      	ldr	r2, [pc, #144]	@ (8004d94 <UART_SetConfig+0x928>)
 8004d02:	fa22 f303 	lsr.w	r3, r2, r3
 8004d06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004d08:	e00f      	b.n	8004d2a <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8004d0a:	4b22      	ldr	r3, [pc, #136]	@ (8004d94 <UART_SetConfig+0x928>)
 8004d0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d0e:	e00c      	b.n	8004d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004d10:	4b21      	ldr	r3, [pc, #132]	@ (8004d98 <UART_SetConfig+0x92c>)
 8004d12:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d14:	e009      	b.n	8004d2a <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004d16:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004d1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004d1c:	e005      	b.n	8004d2a <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 8004d1e:	2300      	movs	r3, #0
 8004d20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004d22:	2301      	movs	r3, #1
 8004d24:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004d28:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004d2a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d2c:	2b00      	cmp	r3, #0
 8004d2e:	f000 80e7 	beq.w	8004f00 <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004d32:	697b      	ldr	r3, [r7, #20]
 8004d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d36:	4a19      	ldr	r2, [pc, #100]	@ (8004d9c <UART_SetConfig+0x930>)
 8004d38:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004d3c:	461a      	mov	r2, r3
 8004d3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004d40:	fbb3 f3f2 	udiv	r3, r3, r2
 8004d44:	005a      	lsls	r2, r3, #1
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	685b      	ldr	r3, [r3, #4]
 8004d4a:	085b      	lsrs	r3, r3, #1
 8004d4c:	441a      	add	r2, r3
 8004d4e:	697b      	ldr	r3, [r7, #20]
 8004d50:	685b      	ldr	r3, [r3, #4]
 8004d52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d56:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004d58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d5a:	2b0f      	cmp	r3, #15
 8004d5c:	d916      	bls.n	8004d8c <UART_SetConfig+0x920>
 8004d5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d60:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004d64:	d212      	bcs.n	8004d8c <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d68:	b29b      	uxth	r3, r3
 8004d6a:	f023 030f 	bic.w	r3, r3, #15
 8004d6e:	86fb      	strh	r3, [r7, #54]	@ 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004d70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d72:	085b      	lsrs	r3, r3, #1
 8004d74:	b29b      	uxth	r3, r3
 8004d76:	f003 0307 	and.w	r3, r3, #7
 8004d7a:	b29a      	uxth	r2, r3
 8004d7c:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	86fb      	strh	r3, [r7, #54]	@ 0x36
        huart->Instance->BRR = brrtemp;
 8004d82:	697b      	ldr	r3, [r7, #20]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8004d88:	60da      	str	r2, [r3, #12]
 8004d8a:	e0b9      	b.n	8004f00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004d8c:	2301      	movs	r3, #1
 8004d8e:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
 8004d92:	e0b5      	b.n	8004f00 <UART_SetConfig+0xa94>
 8004d94:	03d09000 	.word	0x03d09000
 8004d98:	003d0900 	.word	0x003d0900
 8004d9c:	0800a608 	.word	0x0800a608
 8004da0:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 8004da4:	f897 3043 	ldrb.w	r3, [r7, #67]	@ 0x43
 8004da8:	2b20      	cmp	r3, #32
 8004daa:	dc49      	bgt.n	8004e40 <UART_SetConfig+0x9d4>
 8004dac:	2b00      	cmp	r3, #0
 8004dae:	db7c      	blt.n	8004eaa <UART_SetConfig+0xa3e>
 8004db0:	2b20      	cmp	r3, #32
 8004db2:	d87a      	bhi.n	8004eaa <UART_SetConfig+0xa3e>
 8004db4:	a201      	add	r2, pc, #4	@ (adr r2, 8004dbc <UART_SetConfig+0x950>)
 8004db6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dba:	bf00      	nop
 8004dbc:	08004e47 	.word	0x08004e47
 8004dc0:	08004e4f 	.word	0x08004e4f
 8004dc4:	08004eab 	.word	0x08004eab
 8004dc8:	08004eab 	.word	0x08004eab
 8004dcc:	08004e57 	.word	0x08004e57
 8004dd0:	08004eab 	.word	0x08004eab
 8004dd4:	08004eab 	.word	0x08004eab
 8004dd8:	08004eab 	.word	0x08004eab
 8004ddc:	08004e67 	.word	0x08004e67
 8004de0:	08004eab 	.word	0x08004eab
 8004de4:	08004eab 	.word	0x08004eab
 8004de8:	08004eab 	.word	0x08004eab
 8004dec:	08004eab 	.word	0x08004eab
 8004df0:	08004eab 	.word	0x08004eab
 8004df4:	08004eab 	.word	0x08004eab
 8004df8:	08004eab 	.word	0x08004eab
 8004dfc:	08004e77 	.word	0x08004e77
 8004e00:	08004eab 	.word	0x08004eab
 8004e04:	08004eab 	.word	0x08004eab
 8004e08:	08004eab 	.word	0x08004eab
 8004e0c:	08004eab 	.word	0x08004eab
 8004e10:	08004eab 	.word	0x08004eab
 8004e14:	08004eab 	.word	0x08004eab
 8004e18:	08004eab 	.word	0x08004eab
 8004e1c:	08004eab 	.word	0x08004eab
 8004e20:	08004eab 	.word	0x08004eab
 8004e24:	08004eab 	.word	0x08004eab
 8004e28:	08004eab 	.word	0x08004eab
 8004e2c:	08004eab 	.word	0x08004eab
 8004e30:	08004eab 	.word	0x08004eab
 8004e34:	08004eab 	.word	0x08004eab
 8004e38:	08004eab 	.word	0x08004eab
 8004e3c:	08004e9d 	.word	0x08004e9d
 8004e40:	2b40      	cmp	r3, #64	@ 0x40
 8004e42:	d02e      	beq.n	8004ea2 <UART_SetConfig+0xa36>
 8004e44:	e031      	b.n	8004eaa <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004e46:	f7fd fb9b 	bl	8002580 <HAL_RCC_GetPCLK1Freq>
 8004e4a:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e4c:	e033      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004e4e:	f7fd fbad 	bl	80025ac <HAL_RCC_GetPCLK2Freq>
 8004e52:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 8004e54:	e02f      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8004e56:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	f7fe fe1c 	bl	8003a98 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8004e60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004e62:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e64:	e027      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8004e66:	f107 0318 	add.w	r3, r7, #24
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	f7fe ff68 	bl	8003d40 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8004e70:	69fb      	ldr	r3, [r7, #28]
 8004e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e74:	e01f      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8004e76:	4b2d      	ldr	r3, [pc, #180]	@ (8004f2c <UART_SetConfig+0xac0>)
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	f003 0320 	and.w	r3, r3, #32
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d009      	beq.n	8004e96 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8004e82:	4b2a      	ldr	r3, [pc, #168]	@ (8004f2c <UART_SetConfig+0xac0>)
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	08db      	lsrs	r3, r3, #3
 8004e88:	f003 0303 	and.w	r3, r3, #3
 8004e8c:	4a28      	ldr	r2, [pc, #160]	@ (8004f30 <UART_SetConfig+0xac4>)
 8004e8e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e92:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8004e94:	e00f      	b.n	8004eb6 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 8004e96:	4b26      	ldr	r3, [pc, #152]	@ (8004f30 <UART_SetConfig+0xac4>)
 8004e98:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004e9a:	e00c      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 8004e9c:	4b25      	ldr	r3, [pc, #148]	@ (8004f34 <UART_SetConfig+0xac8>)
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ea0:	e009      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004ea2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8004ea6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 8004ea8:	e005      	b.n	8004eb6 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        ret = HAL_ERROR;
 8004eae:	2301      	movs	r3, #1
 8004eb0:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
        break;
 8004eb4:	bf00      	nop
    }

    if (pclk != 0U)
 8004eb6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d021      	beq.n	8004f00 <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ec0:	4a1d      	ldr	r2, [pc, #116]	@ (8004f38 <UART_SetConfig+0xacc>)
 8004ec2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004ec6:	461a      	mov	r2, r3
 8004ec8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004eca:	fbb3 f2f2 	udiv	r2, r3, r2
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	685b      	ldr	r3, [r3, #4]
 8004ed2:	085b      	lsrs	r3, r3, #1
 8004ed4:	441a      	add	r2, r3
 8004ed6:	697b      	ldr	r3, [r7, #20]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ede:	63bb      	str	r3, [r7, #56]	@ 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ee0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee2:	2b0f      	cmp	r3, #15
 8004ee4:	d909      	bls.n	8004efa <UART_SetConfig+0xa8e>
 8004ee6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ee8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004eec:	d205      	bcs.n	8004efa <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004eee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ef0:	b29a      	uxth	r2, r3
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	60da      	str	r2, [r3, #12]
 8004ef8:	e002      	b.n	8004f00 <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	f887 3042 	strb.w	r3, [r7, #66]	@ 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	2201      	movs	r2, #1
 8004f0c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	2200      	movs	r2, #0
 8004f14:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8004f16:	697b      	ldr	r3, [r7, #20]
 8004f18:	2200      	movs	r2, #0
 8004f1a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8004f1c:	f897 3042 	ldrb.w	r3, [r7, #66]	@ 0x42
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3748      	adds	r7, #72	@ 0x48
 8004f24:	46bd      	mov	sp, r7
 8004f26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004f2a:	bf00      	nop
 8004f2c:	58024400 	.word	0x58024400
 8004f30:	03d09000 	.word	0x03d09000
 8004f34:	003d0900 	.word	0x003d0900
 8004f38:	0800a608 	.word	0x0800a608

08004f3c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004f3c:	b480      	push	{r7}
 8004f3e:	b083      	sub	sp, #12
 8004f40:	af00      	add	r7, sp, #0
 8004f42:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f48:	f003 0308 	and.w	r3, r3, #8
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d00a      	beq.n	8004f66 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	685b      	ldr	r3, [r3, #4]
 8004f56:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	430a      	orrs	r2, r1
 8004f64:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d00a      	beq.n	8004f88 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	685b      	ldr	r3, [r3, #4]
 8004f78:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	430a      	orrs	r2, r1
 8004f86:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004f8c:	f003 0302 	and.w	r3, r3, #2
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d00a      	beq.n	8004faa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	685b      	ldr	r3, [r3, #4]
 8004f9a:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	430a      	orrs	r2, r1
 8004fa8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fae:	f003 0304 	and.w	r3, r3, #4
 8004fb2:	2b00      	cmp	r3, #0
 8004fb4:	d00a      	beq.n	8004fcc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	685b      	ldr	r3, [r3, #4]
 8004fbc:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	430a      	orrs	r2, r1
 8004fca:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004fd0:	f003 0310 	and.w	r3, r3, #16
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d00a      	beq.n	8004fee <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	689b      	ldr	r3, [r3, #8]
 8004fde:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	430a      	orrs	r2, r1
 8004fec:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff2:	f003 0320 	and.w	r3, r3, #32
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d00a      	beq.n	8005010 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	689b      	ldr	r3, [r3, #8]
 8005000:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	430a      	orrs	r2, r1
 800500e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005014:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005018:	2b00      	cmp	r3, #0
 800501a:	d01a      	beq.n	8005052 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	430a      	orrs	r2, r1
 8005030:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800503a:	d10a      	bne.n	8005052 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	430a      	orrs	r2, r1
 8005050:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00a      	beq.n	8005074 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	430a      	orrs	r2, r1
 8005072:	605a      	str	r2, [r3, #4]
  }
}
 8005074:	bf00      	nop
 8005076:	370c      	adds	r7, #12
 8005078:	46bd      	mov	sp, r7
 800507a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800507e:	4770      	bx	lr

08005080 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8005080:	b580      	push	{r7, lr}
 8005082:	b098      	sub	sp, #96	@ 0x60
 8005084:	af02      	add	r7, sp, #8
 8005086:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	2200      	movs	r2, #0
 800508c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8005090:	f7fb ffae 	bl	8000ff0 <HAL_GetTick>
 8005094:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f003 0308 	and.w	r3, r3, #8
 80050a0:	2b08      	cmp	r3, #8
 80050a2:	d12f      	bne.n	8005104 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80050a4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80050a8:	9300      	str	r3, [sp, #0]
 80050aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80050ac:	2200      	movs	r2, #0
 80050ae:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 80050b2:	6878      	ldr	r0, [r7, #4]
 80050b4:	f000 f88e 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 80050b8:	4603      	mov	r3, r0
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d022      	beq.n	8005104 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	63bb      	str	r3, [r7, #56]	@ 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050c6:	e853 3f00 	ldrex	r3, [r3]
 80050ca:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80050cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80050ce:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80050d2:	653b      	str	r3, [r7, #80]	@ 0x50
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	461a      	mov	r2, r3
 80050da:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80050dc:	647b      	str	r3, [r7, #68]	@ 0x44
 80050de:	643a      	str	r2, [r7, #64]	@ 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80050e0:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80050e2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80050e4:	e841 2300 	strex	r3, r2, [r1]
 80050e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80050ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d1e6      	bne.n	80050be <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2220      	movs	r2, #32
 80050f4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2200      	movs	r2, #0
 80050fc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8005100:	2303      	movs	r3, #3
 8005102:	e063      	b.n	80051cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	681b      	ldr	r3, [r3, #0]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	f003 0304 	and.w	r3, r3, #4
 800510e:	2b04      	cmp	r3, #4
 8005110:	d149      	bne.n	80051a6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8005112:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8005116:	9300      	str	r3, [sp, #0]
 8005118:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800511a:	2200      	movs	r2, #0
 800511c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8005120:	6878      	ldr	r0, [r7, #4]
 8005122:	f000 f857 	bl	80051d4 <UART_WaitOnFlagUntilTimeout>
 8005126:	4603      	mov	r3, r0
 8005128:	2b00      	cmp	r3, #0
 800512a:	d03c      	beq.n	80051a6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	623b      	str	r3, [r7, #32]
   return(result);
 800513a:	6a3b      	ldr	r3, [r7, #32]
 800513c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005140:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	461a      	mov	r2, r3
 8005148:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800514a:	633b      	str	r3, [r7, #48]	@ 0x30
 800514c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005150:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005158:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e6      	bne.n	800512c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	681b      	ldr	r3, [r3, #0]
 8005162:	3308      	adds	r3, #8
 8005164:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	e853 3f00 	ldrex	r3, [r3]
 800516c:	60fb      	str	r3, [r7, #12]
   return(result);
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	f023 0301 	bic.w	r3, r3, #1
 8005174:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	3308      	adds	r3, #8
 800517c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800517e:	61fa      	str	r2, [r7, #28]
 8005180:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005182:	69b9      	ldr	r1, [r7, #24]
 8005184:	69fa      	ldr	r2, [r7, #28]
 8005186:	e841 2300 	strex	r3, r2, [r1]
 800518a:	617b      	str	r3, [r7, #20]
   return(result);
 800518c:	697b      	ldr	r3, [r7, #20]
 800518e:	2b00      	cmp	r3, #0
 8005190:	d1e5      	bne.n	800515e <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	2220      	movs	r2, #32
 8005196:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2200      	movs	r2, #0
 800519e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80051a2:	2303      	movs	r3, #3
 80051a4:	e012      	b.n	80051cc <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2220      	movs	r2, #32
 80051aa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2220      	movs	r2, #32
 80051b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	2200      	movs	r2, #0
 80051ba:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2200      	movs	r2, #0
 80051c0:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	2200      	movs	r2, #0
 80051c6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80051ca:	2300      	movs	r3, #0
}
 80051cc:	4618      	mov	r0, r3
 80051ce:	3758      	adds	r7, #88	@ 0x58
 80051d0:	46bd      	mov	sp, r7
 80051d2:	bd80      	pop	{r7, pc}

080051d4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b084      	sub	sp, #16
 80051d8:	af00      	add	r7, sp, #0
 80051da:	60f8      	str	r0, [r7, #12]
 80051dc:	60b9      	str	r1, [r7, #8]
 80051de:	603b      	str	r3, [r7, #0]
 80051e0:	4613      	mov	r3, r2
 80051e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80051e4:	e04f      	b.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80051e6:	69bb      	ldr	r3, [r7, #24]
 80051e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80051ec:	d04b      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80051ee:	f7fb feff 	bl	8000ff0 <HAL_GetTick>
 80051f2:	4602      	mov	r2, r0
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	1ad3      	subs	r3, r2, r3
 80051f8:	69ba      	ldr	r2, [r7, #24]
 80051fa:	429a      	cmp	r2, r3
 80051fc:	d302      	bcc.n	8005204 <UART_WaitOnFlagUntilTimeout+0x30>
 80051fe:	69bb      	ldr	r3, [r7, #24]
 8005200:	2b00      	cmp	r3, #0
 8005202:	d101      	bne.n	8005208 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005204:	2303      	movs	r3, #3
 8005206:	e04e      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 0304 	and.w	r3, r3, #4
 8005212:	2b00      	cmp	r3, #0
 8005214:	d037      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
 8005216:	68bb      	ldr	r3, [r7, #8]
 8005218:	2b80      	cmp	r3, #128	@ 0x80
 800521a:	d034      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
 800521c:	68bb      	ldr	r3, [r7, #8]
 800521e:	2b40      	cmp	r3, #64	@ 0x40
 8005220:	d031      	beq.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005222:	68fb      	ldr	r3, [r7, #12]
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	69db      	ldr	r3, [r3, #28]
 8005228:	f003 0308 	and.w	r3, r3, #8
 800522c:	2b08      	cmp	r3, #8
 800522e:	d110      	bne.n	8005252 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005230:	68fb      	ldr	r3, [r7, #12]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	2208      	movs	r2, #8
 8005236:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005238:	68f8      	ldr	r0, [r7, #12]
 800523a:	f000 f839 	bl	80052b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2208      	movs	r2, #8
 8005242:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2200      	movs	r2, #0
 800524a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800524e:	2301      	movs	r3, #1
 8005250:	e029      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	69db      	ldr	r3, [r3, #28]
 8005258:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800525c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8005260:	d111      	bne.n	8005286 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800526a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800526c:	68f8      	ldr	r0, [r7, #12]
 800526e:	f000 f81f 	bl	80052b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8005272:	68fb      	ldr	r3, [r7, #12]
 8005274:	2220      	movs	r2, #32
 8005276:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	2200      	movs	r2, #0
 800527e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8005282:	2303      	movs	r3, #3
 8005284:	e00f      	b.n	80052a6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	69da      	ldr	r2, [r3, #28]
 800528c:	68bb      	ldr	r3, [r7, #8]
 800528e:	4013      	ands	r3, r2
 8005290:	68ba      	ldr	r2, [r7, #8]
 8005292:	429a      	cmp	r2, r3
 8005294:	bf0c      	ite	eq
 8005296:	2301      	moveq	r3, #1
 8005298:	2300      	movne	r3, #0
 800529a:	b2db      	uxtb	r3, r3
 800529c:	461a      	mov	r2, r3
 800529e:	79fb      	ldrb	r3, [r7, #7]
 80052a0:	429a      	cmp	r2, r3
 80052a2:	d0a0      	beq.n	80051e6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80052a4:	2300      	movs	r3, #0
}
 80052a6:	4618      	mov	r0, r3
 80052a8:	3710      	adds	r7, #16
 80052aa:	46bd      	mov	sp, r7
 80052ac:	bd80      	pop	{r7, pc}
	...

080052b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80052b0:	b480      	push	{r7}
 80052b2:	b095      	sub	sp, #84	@ 0x54
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052be:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80052c0:	e853 3f00 	ldrex	r3, [r3]
 80052c4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80052c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80052c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80052cc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	461a      	mov	r2, r3
 80052d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80052d6:	643b      	str	r3, [r7, #64]	@ 0x40
 80052d8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80052da:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80052dc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80052de:	e841 2300 	strex	r3, r2, [r1]
 80052e2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80052e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d1e6      	bne.n	80052b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	681b      	ldr	r3, [r3, #0]
 80052ee:	3308      	adds	r3, #8
 80052f0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80052f2:	6a3b      	ldr	r3, [r7, #32]
 80052f4:	e853 3f00 	ldrex	r3, [r3]
 80052f8:	61fb      	str	r3, [r7, #28]
   return(result);
 80052fa:	69fa      	ldr	r2, [r7, #28]
 80052fc:	4b1e      	ldr	r3, [pc, #120]	@ (8005378 <UART_EndRxTransfer+0xc8>)
 80052fe:	4013      	ands	r3, r2
 8005300:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	3308      	adds	r3, #8
 8005308:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800530a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800530c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800530e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005310:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005312:	e841 2300 	strex	r3, r2, [r1]
 8005316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800531a:	2b00      	cmp	r3, #0
 800531c:	d1e5      	bne.n	80052ea <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005322:	2b01      	cmp	r3, #1
 8005324:	d118      	bne.n	8005358 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	e853 3f00 	ldrex	r3, [r3]
 8005332:	60bb      	str	r3, [r7, #8]
   return(result);
 8005334:	68bb      	ldr	r3, [r7, #8]
 8005336:	f023 0310 	bic.w	r3, r3, #16
 800533a:	647b      	str	r3, [r7, #68]	@ 0x44
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	461a      	mov	r2, r3
 8005342:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005344:	61bb      	str	r3, [r7, #24]
 8005346:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005348:	6979      	ldr	r1, [r7, #20]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	e841 2300 	strex	r3, r2, [r1]
 8005350:	613b      	str	r3, [r7, #16]
   return(result);
 8005352:	693b      	ldr	r3, [r7, #16]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d1e6      	bne.n	8005326 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2220      	movs	r2, #32
 800535c:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	2200      	movs	r2, #0
 8005364:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	2200      	movs	r2, #0
 800536a:	675a      	str	r2, [r3, #116]	@ 0x74
}
 800536c:	bf00      	nop
 800536e:	3754      	adds	r7, #84	@ 0x54
 8005370:	46bd      	mov	sp, r7
 8005372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005376:	4770      	bx	lr
 8005378:	effffffe 	.word	0xeffffffe

0800537c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 800537c:	b480      	push	{r7}
 800537e:	b085      	sub	sp, #20
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800538a:	2b01      	cmp	r3, #1
 800538c:	d101      	bne.n	8005392 <HAL_UARTEx_DisableFifoMode+0x16>
 800538e:	2302      	movs	r3, #2
 8005390:	e027      	b.n	80053e2 <HAL_UARTEx_DisableFifoMode+0x66>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2201      	movs	r2, #1
 8005396:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	2224      	movs	r2, #36	@ 0x24
 800539e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	681a      	ldr	r2, [r3, #0]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	601a      	str	r2, [r3, #0]

  /* Disable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 80053c0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	68fa      	ldr	r2, [r7, #12]
 80053ce:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2220      	movs	r2, #32
 80053d4:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3714      	adds	r7, #20
 80053e6:	46bd      	mov	sp, r7
 80053e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ec:	4770      	bx	lr

080053ee <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80053ee:	b580      	push	{r7, lr}
 80053f0:	b084      	sub	sp, #16
 80053f2:	af00      	add	r7, sp, #0
 80053f4:	6078      	str	r0, [r7, #4]
 80053f6:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 80053fe:	2b01      	cmp	r3, #1
 8005400:	d101      	bne.n	8005406 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8005402:	2302      	movs	r3, #2
 8005404:	e02d      	b.n	8005462 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2201      	movs	r2, #1
 800540a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2224      	movs	r2, #36	@ 0x24
 8005412:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	681a      	ldr	r2, [r3, #0]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	f022 0201 	bic.w	r2, r2, #1
 800542c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	681b      	ldr	r3, [r3, #0]
 8005432:	689b      	ldr	r3, [r3, #8]
 8005434:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	683a      	ldr	r2, [r7, #0]
 800543e:	430a      	orrs	r2, r1
 8005440:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f000 f850 	bl	80054e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	68fa      	ldr	r2, [r7, #12]
 800544e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2220      	movs	r2, #32
 8005454:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	2200      	movs	r2, #0
 800545c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8005460:	2300      	movs	r3, #0
}
 8005462:	4618      	mov	r0, r3
 8005464:	3710      	adds	r7, #16
 8005466:	46bd      	mov	sp, r7
 8005468:	bd80      	pop	{r7, pc}

0800546a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800546a:	b580      	push	{r7, lr}
 800546c:	b084      	sub	sp, #16
 800546e:	af00      	add	r7, sp, #0
 8005470:	6078      	str	r0, [r7, #4]
 8005472:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800547a:	2b01      	cmp	r3, #1
 800547c:	d101      	bne.n	8005482 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800547e:	2302      	movs	r3, #2
 8005480:	e02d      	b.n	80054de <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	2201      	movs	r2, #1
 8005486:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	2224      	movs	r2, #36	@ 0x24
 800548e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	681a      	ldr	r2, [r3, #0]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f022 0201 	bic.w	r2, r2, #1
 80054a8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	689b      	ldr	r3, [r3, #8]
 80054b0:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	683a      	ldr	r2, [r7, #0]
 80054ba:	430a      	orrs	r2, r1
 80054bc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80054be:	6878      	ldr	r0, [r7, #4]
 80054c0:	f000 f812 	bl	80054e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	68fa      	ldr	r2, [r7, #12]
 80054ca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80054dc:	2300      	movs	r3, #0
}
 80054de:	4618      	mov	r0, r3
 80054e0:	3710      	adds	r7, #16
 80054e2:	46bd      	mov	sp, r7
 80054e4:	bd80      	pop	{r7, pc}
	...

080054e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80054e8:	b480      	push	{r7}
 80054ea:	b085      	sub	sp, #20
 80054ec:	af00      	add	r7, sp, #0
 80054ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80054f4:	2b00      	cmp	r3, #0
 80054f6:	d108      	bne.n	800550a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	2201      	movs	r2, #1
 80054fc:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	2201      	movs	r2, #1
 8005504:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005508:	e031      	b.n	800556e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800550a:	2310      	movs	r3, #16
 800550c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 800550e:	2310      	movs	r3, #16
 8005510:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	689b      	ldr	r3, [r3, #8]
 8005518:	0e5b      	lsrs	r3, r3, #25
 800551a:	b2db      	uxtb	r3, r3
 800551c:	f003 0307 	and.w	r3, r3, #7
 8005520:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	0f5b      	lsrs	r3, r3, #29
 800552a:	b2db      	uxtb	r3, r3
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005532:	7bbb      	ldrb	r3, [r7, #14]
 8005534:	7b3a      	ldrb	r2, [r7, #12]
 8005536:	4911      	ldr	r1, [pc, #68]	@ (800557c <UARTEx_SetNbDataToProcess+0x94>)
 8005538:	5c8a      	ldrb	r2, [r1, r2]
 800553a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 800553e:	7b3a      	ldrb	r2, [r7, #12]
 8005540:	490f      	ldr	r1, [pc, #60]	@ (8005580 <UARTEx_SetNbDataToProcess+0x98>)
 8005542:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005544:	fb93 f3f2 	sdiv	r3, r3, r2
 8005548:	b29a      	uxth	r2, r3
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005550:	7bfb      	ldrb	r3, [r7, #15]
 8005552:	7b7a      	ldrb	r2, [r7, #13]
 8005554:	4909      	ldr	r1, [pc, #36]	@ (800557c <UARTEx_SetNbDataToProcess+0x94>)
 8005556:	5c8a      	ldrb	r2, [r1, r2]
 8005558:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 800555c:	7b7a      	ldrb	r2, [r7, #13]
 800555e:	4908      	ldr	r1, [pc, #32]	@ (8005580 <UARTEx_SetNbDataToProcess+0x98>)
 8005560:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005562:	fb93 f3f2 	sdiv	r3, r3, r2
 8005566:	b29a      	uxth	r2, r3
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 800556e:	bf00      	nop
 8005570:	3714      	adds	r7, #20
 8005572:	46bd      	mov	sp, r7
 8005574:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005578:	4770      	bx	lr
 800557a:	bf00      	nop
 800557c:	0800a620 	.word	0x0800a620
 8005580:	0800a628 	.word	0x0800a628

08005584 <_write>:
#include "tinyaudiocnn.h"
#include "tinyaudiocnn_data.h"
#include "mel_spec_buffer.h"

int _write(int file, char *ptr, int len)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
    HAL_UART_Transmit(&huart1, (uint8_t *)ptr, len, HAL_MAX_DELAY);
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	b29a      	uxth	r2, r3
 8005594:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005598:	68b9      	ldr	r1, [r7, #8]
 800559a:	4804      	ldr	r0, [pc, #16]	@ (80055ac <_write+0x28>)
 800559c:	f7fe fed8 	bl	8004350 <HAL_UART_Transmit>
    return len;
 80055a0:	687b      	ldr	r3, [r7, #4]
}
 80055a2:	4618      	mov	r0, r3
 80055a4:	3710      	adds	r7, #16
 80055a6:	46bd      	mov	sp, r7
 80055a8:	bd80      	pop	{r7, pc}
 80055aa:	bf00      	nop
 80055ac:	24010d24 	.word	0x24010d24

080055b0 <ai_log_err>:

// simulated spectrogram 64 mel bands × 258 time frames = 16512 float values
// float dummy_mel_spectrogram[64 * 258];

static void ai_log_err(const ai_error err, const char *fct)
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b082      	sub	sp, #8
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	6078      	str	r0, [r7, #4]
 80055b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN log */
  if (fct)
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	d009      	beq.n	80055d4 <ai_log_err+0x24>
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
        err.type, err.code);
 80055c0:	793b      	ldrb	r3, [r7, #4]
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80055c2:	461a      	mov	r2, r3
        err.type, err.code);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	f3c3 2317 	ubfx	r3, r3, #8, #24
    printf("TEMPLATE - Error (%s) - type=0x%02x code=0x%02x\r\n", fct,
 80055ca:	6839      	ldr	r1, [r7, #0]
 80055cc:	4807      	ldr	r0, [pc, #28]	@ (80055ec <ai_log_err+0x3c>)
 80055ce:	f004 f911 	bl	80097f4 <iprintf>
 80055d2:	e009      	b.n	80055e8 <ai_log_err+0x38>
  else
    printf("TEMPLATE - Error - type=0x%02x code=0x%02x\r\n", err.type, err.code);
 80055d4:	793b      	ldrb	r3, [r7, #4]
 80055d6:	4619      	mov	r1, r3
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f3c3 2317 	ubfx	r3, r3, #8, #24
 80055de:	461a      	mov	r2, r3
 80055e0:	4803      	ldr	r0, [pc, #12]	@ (80055f0 <ai_log_err+0x40>)
 80055e2:	f004 f907 	bl	80097f4 <iprintf>

  do {} while (1);
 80055e6:	bf00      	nop
 80055e8:	bf00      	nop
 80055ea:	e7fd      	b.n	80055e8 <ai_log_err+0x38>
 80055ec:	0800a478 	.word	0x0800a478
 80055f0:	0800a4ac 	.word	0x0800a4ac

080055f4 <ai_boostrap>:
  /* USER CODE END log */
}

static int ai_boostrap(ai_handle *act_addr)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b086      	sub	sp, #24
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  ai_error err;

  /* Create and initialize an instance of the model */
  err = ai_tinyaudiocnn_create_and_init(&tinyaudiocnn, act_addr, NULL);
 80055fc:	2200      	movs	r2, #0
 80055fe:	6879      	ldr	r1, [r7, #4]
 8005600:	4828      	ldr	r0, [pc, #160]	@ (80056a4 <ai_boostrap+0xb0>)
 8005602:	f000 fb1b 	bl	8005c3c <ai_tinyaudiocnn_create_and_init>
 8005606:	4603      	mov	r3, r0
 8005608:	60fb      	str	r3, [r7, #12]
  if (err.type != AI_ERROR_NONE) {
 800560a:	7b3b      	ldrb	r3, [r7, #12]
 800560c:	2b00      	cmp	r3, #0
 800560e:	d006      	beq.n	800561e <ai_boostrap+0x2a>
    ai_log_err(err, "ai_tinyaudiocnn_create_and_init");
 8005610:	4925      	ldr	r1, [pc, #148]	@ (80056a8 <ai_boostrap+0xb4>)
 8005612:	68f8      	ldr	r0, [r7, #12]
 8005614:	f7ff ffcc 	bl	80055b0 <ai_log_err>
    return -1;
 8005618:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800561c:	e03e      	b.n	800569c <ai_boostrap+0xa8>
  }

  ai_input = ai_tinyaudiocnn_inputs_get(tinyaudiocnn, NULL);
 800561e:	4b21      	ldr	r3, [pc, #132]	@ (80056a4 <ai_boostrap+0xb0>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f000 fb87 	bl	8005d38 <ai_tinyaudiocnn_inputs_get>
 800562a:	4603      	mov	r3, r0
 800562c:	4a1f      	ldr	r2, [pc, #124]	@ (80056ac <ai_boostrap+0xb8>)
 800562e:	6013      	str	r3, [r2, #0]
  ai_output = ai_tinyaudiocnn_outputs_get(tinyaudiocnn, NULL);
 8005630:	4b1c      	ldr	r3, [pc, #112]	@ (80056a4 <ai_boostrap+0xb0>)
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f000 fb98 	bl	8005d6c <ai_tinyaudiocnn_outputs_get>
 800563c:	4603      	mov	r3, r0
 800563e:	4a1c      	ldr	r2, [pc, #112]	@ (80056b0 <ai_boostrap+0xbc>)
 8005640:	6013      	str	r3, [r2, #0]

#if defined(AI_TINYAUDIOCNN_INPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-inputs" option is used, memory buffer can be
   *  used from the activations buffer. This is not mandatory.
   */
  for (int idx=0; idx < AI_TINYAUDIOCNN_IN_NUM; idx++) {
 8005642:	2300      	movs	r3, #0
 8005644:	617b      	str	r3, [r7, #20]
 8005646:	e00f      	b.n	8005668 <ai_boostrap+0x74>
	data_ins[idx] = ai_input[idx].data;
 8005648:	4b18      	ldr	r3, [pc, #96]	@ (80056ac <ai_boostrap+0xb8>)
 800564a:	6819      	ldr	r1, [r3, #0]
 800564c:	697a      	ldr	r2, [r7, #20]
 800564e:	4613      	mov	r3, r2
 8005650:	00db      	lsls	r3, r3, #3
 8005652:	1a9b      	subs	r3, r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	440b      	add	r3, r1
 8005658:	685a      	ldr	r2, [r3, #4]
 800565a:	4916      	ldr	r1, [pc, #88]	@ (80056b4 <ai_boostrap+0xc0>)
 800565c:	697b      	ldr	r3, [r7, #20]
 800565e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_TINYAUDIOCNN_IN_NUM; idx++) {
 8005662:	697b      	ldr	r3, [r7, #20]
 8005664:	3301      	adds	r3, #1
 8005666:	617b      	str	r3, [r7, #20]
 8005668:	697b      	ldr	r3, [r7, #20]
 800566a:	2b00      	cmp	r3, #0
 800566c:	ddec      	ble.n	8005648 <ai_boostrap+0x54>

#if defined(AI_TINYAUDIOCNN_OUTPUTS_IN_ACTIVATIONS)
  /*  In the case where "--allocate-outputs" option is used, memory buffer can be
   *  used from the activations buffer. This is no mandatory.
   */
  for (int idx=0; idx < AI_TINYAUDIOCNN_OUT_NUM; idx++) {
 800566e:	2300      	movs	r3, #0
 8005670:	613b      	str	r3, [r7, #16]
 8005672:	e00f      	b.n	8005694 <ai_boostrap+0xa0>
	data_outs[idx] = ai_output[idx].data;
 8005674:	4b0e      	ldr	r3, [pc, #56]	@ (80056b0 <ai_boostrap+0xbc>)
 8005676:	6819      	ldr	r1, [r3, #0]
 8005678:	693a      	ldr	r2, [r7, #16]
 800567a:	4613      	mov	r3, r2
 800567c:	00db      	lsls	r3, r3, #3
 800567e:	1a9b      	subs	r3, r3, r2
 8005680:	009b      	lsls	r3, r3, #2
 8005682:	440b      	add	r3, r1
 8005684:	685a      	ldr	r2, [r3, #4]
 8005686:	490c      	ldr	r1, [pc, #48]	@ (80056b8 <ai_boostrap+0xc4>)
 8005688:	693b      	ldr	r3, [r7, #16]
 800568a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  for (int idx=0; idx < AI_TINYAUDIOCNN_OUT_NUM; idx++) {
 800568e:	693b      	ldr	r3, [r7, #16]
 8005690:	3301      	adds	r3, #1
 8005692:	613b      	str	r3, [r7, #16]
 8005694:	693b      	ldr	r3, [r7, #16]
 8005696:	2b00      	cmp	r3, #0
 8005698:	ddec      	ble.n	8005674 <ai_boostrap+0x80>
  for (int idx=0; idx < AI_TINYAUDIOCNN_OUT_NUM; idx++) {
	ai_output[idx].data = data_outs[idx];
  }
#endif

  return 0;
 800569a:	2300      	movs	r3, #0
}
 800569c:	4618      	mov	r0, r3
 800569e:	3718      	adds	r7, #24
 80056a0:	46bd      	mov	sp, r7
 80056a2:	bd80      	pop	{r7, pc}
 80056a4:	24041000 	.word	0x24041000
 80056a8:	0800a4dc 	.word	0x0800a4dc
 80056ac:	24041004 	.word	0x24041004
 80056b0:	24041008 	.word	0x24041008
 80056b4:	24010db8 	.word	0x24010db8
 80056b8:	24010dbc 	.word	0x24010dbc

080056bc <ai_run>:

static int ai_run(void)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b082      	sub	sp, #8
 80056c0:	af00      	add	r7, sp, #0
  ai_i32 batch;

  batch = ai_tinyaudiocnn_run(tinyaudiocnn, ai_input, ai_output);
 80056c2:	4b0f      	ldr	r3, [pc, #60]	@ (8005700 <ai_run+0x44>)
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	4a0f      	ldr	r2, [pc, #60]	@ (8005704 <ai_run+0x48>)
 80056c8:	6811      	ldr	r1, [r2, #0]
 80056ca:	4a0f      	ldr	r2, [pc, #60]	@ (8005708 <ai_run+0x4c>)
 80056cc:	6812      	ldr	r2, [r2, #0]
 80056ce:	4618      	mov	r0, r3
 80056d0:	f000 fba2 	bl	8005e18 <ai_tinyaudiocnn_run>
 80056d4:	6078      	str	r0, [r7, #4]
  if (batch != 1) {
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	2b01      	cmp	r3, #1
 80056da:	d00c      	beq.n	80056f6 <ai_run+0x3a>
    ai_log_err(ai_tinyaudiocnn_get_error(tinyaudiocnn),
 80056dc:	4b08      	ldr	r3, [pc, #32]	@ (8005700 <ai_run+0x44>)
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	4618      	mov	r0, r3
 80056e2:	f000 fa89 	bl	8005bf8 <ai_tinyaudiocnn_get_error>
 80056e6:	4603      	mov	r3, r0
 80056e8:	4908      	ldr	r1, [pc, #32]	@ (800570c <ai_run+0x50>)
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7ff ff60 	bl	80055b0 <ai_log_err>
        "ai_tinyaudiocnn_run");
    return -1;
 80056f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80056f4:	e000      	b.n	80056f8 <ai_run+0x3c>
  }

  return 0;
 80056f6:	2300      	movs	r3, #0
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	3708      	adds	r7, #8
 80056fc:	46bd      	mov	sp, r7
 80056fe:	bd80      	pop	{r7, pc}
 8005700:	24041000 	.word	0x24041000
 8005704:	24041004 	.word	0x24041004
 8005708:	24041008 	.word	0x24041008
 800570c:	0800a4fc 	.word	0x0800a4fc

08005710 <acquire_and_process_data>:
// non dummy integration part
// extern float mel_spec_buffer[64 * 258]; 

/* USER CODE BEGIN 2 */
int acquire_and_process_data(ai_i8* data[])
{
 8005710:	b480      	push	{r7}
 8005712:	b085      	sub	sp, #20
 8005714:	af00      	add	r7, sp, #0
 8005716:	6078      	str	r0, [r7, #4]
      data[idx] = ....
  }

  */

    float *dst = (float *)data[0];
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	60bb      	str	r3, [r7, #8]

    for (int i = 0; i < AI_TINYAUDIOCNN_IN_1_SIZE; ++i) {
 800571e:	2300      	movs	r3, #0
 8005720:	60fb      	str	r3, [r7, #12]
 8005722:	e00c      	b.n	800573e <acquire_and_process_data+0x2e>
        dst[i] = mel_spec_buffer[i];  // 64 * 258 = 16512
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	68ba      	ldr	r2, [r7, #8]
 800572a:	4413      	add	r3, r2
 800572c:	4909      	ldr	r1, [pc, #36]	@ (8005754 <acquire_and_process_data+0x44>)
 800572e:	68fa      	ldr	r2, [r7, #12]
 8005730:	0092      	lsls	r2, r2, #2
 8005732:	440a      	add	r2, r1
 8005734:	6812      	ldr	r2, [r2, #0]
 8005736:	601a      	str	r2, [r3, #0]
    for (int i = 0; i < AI_TINYAUDIOCNN_IN_1_SIZE; ++i) {
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	3301      	adds	r3, #1
 800573c:	60fb      	str	r3, [r7, #12]
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	f5b3 4f81 	cmp.w	r3, #16512	@ 0x4080
 8005744:	dbee      	blt.n	8005724 <acquire_and_process_data+0x14>
    }

    return 0;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr
 8005754:	24000010 	.word	0x24000010

08005758 <post_process>:


int post_process(ai_i8* data[])
{
 8005758:	b5b0      	push	{r4, r5, r7, lr}
 800575a:	b08e      	sub	sp, #56	@ 0x38
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  }

  */

    // data[0] is a void pointer to a float buffer
    float *predictions = (float *)data[0]; 
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	627b      	str	r3, [r7, #36]	@ 0x24

    char *class_names[] = {
 8005766:	4b3c      	ldr	r3, [pc, #240]	@ (8005858 <post_process+0x100>)
 8005768:	f107 0408 	add.w	r4, r7, #8
 800576c:	461d      	mov	r5, r3
 800576e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8005770:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8005772:	e895 0003 	ldmia.w	r5, {r0, r1}
 8005776:	e884 0003 	stmia.w	r4, {r0, r1}
        "Alarm",
        "Chick Begging",
        "no_buow"
    };

    int max_index = 0;
 800577a:	2300      	movs	r3, #0
 800577c:	637b      	str	r3, [r7, #52]	@ 0x34
    float max_value = predictions[0];
 800577e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	633b      	str	r3, [r7, #48]	@ 0x30
    for (int i = 0; i < AI_TINYAUDIOCNN_OUT_1_SIZE; ++i) {
 8005784:	2300      	movs	r3, #0
 8005786:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005788:	e04f      	b.n	800582a <post_process+0xd2>
        if (predictions[i] > max_value) {
 800578a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005790:	4413      	add	r3, r2
 8005792:	edd3 7a00 	vldr	s15, [r3]
 8005796:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 800579a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800579e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80057a2:	d507      	bpl.n	80057b4 <post_process+0x5c>
            max_value = predictions[i];
 80057a4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057aa:	4413      	add	r3, r2
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	633b      	str	r3, [r7, #48]	@ 0x30
            max_index = i;
 80057b0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b2:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        int predict = predictions[i] * 100;
 80057b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057b6:	009b      	lsls	r3, r3, #2
 80057b8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80057ba:	4413      	add	r3, r2
 80057bc:	edd3 7a00 	vldr	s15, [r3]
 80057c0:	ed9f 7a26 	vldr	s14, [pc, #152]	@ 800585c <post_process+0x104>
 80057c4:	ee67 7a87 	vmul.f32	s15, s15, s14
 80057c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80057cc:	ee17 3a90 	vmov	r3, s15
 80057d0:	62bb      	str	r3, [r7, #40]	@ 0x28
        int whole_part = predict / 100;
 80057d2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057d4:	4a22      	ldr	r2, [pc, #136]	@ (8005860 <post_process+0x108>)
 80057d6:	fb82 1203 	smull	r1, r2, r2, r3
 80057da:	1152      	asrs	r2, r2, #5
 80057dc:	17db      	asrs	r3, r3, #31
 80057de:	1ad3      	subs	r3, r2, r3
 80057e0:	623b      	str	r3, [r7, #32]
        if (predict < 0) {
 80057e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	da02      	bge.n	80057ee <post_process+0x96>
          predict -= 2 * predict; // convert to positive
 80057e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ea:	425b      	negs	r3, r3
 80057ec:	62bb      	str	r3, [r7, #40]	@ 0x28
        }

      printf("Class: %s, Score: %d.%d\n\r", class_names[i], whole_part, predict%100);
 80057ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057f0:	009b      	lsls	r3, r3, #2
 80057f2:	3338      	adds	r3, #56	@ 0x38
 80057f4:	443b      	add	r3, r7
 80057f6:	f853 0c30 	ldr.w	r0, [r3, #-48]
 80057fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057fc:	4a18      	ldr	r2, [pc, #96]	@ (8005860 <post_process+0x108>)
 80057fe:	fb82 1203 	smull	r1, r2, r2, r3
 8005802:	1151      	asrs	r1, r2, #5
 8005804:	17da      	asrs	r2, r3, #31
 8005806:	1a8a      	subs	r2, r1, r2
 8005808:	2164      	movs	r1, #100	@ 0x64
 800580a:	fb01 f202 	mul.w	r2, r1, r2
 800580e:	1a9a      	subs	r2, r3, r2
 8005810:	4613      	mov	r3, r2
 8005812:	6a3a      	ldr	r2, [r7, #32]
 8005814:	4601      	mov	r1, r0
 8005816:	4813      	ldr	r0, [pc, #76]	@ (8005864 <post_process+0x10c>)
 8005818:	f003 ffec 	bl	80097f4 <iprintf>
      HAL_Delay(2000);
 800581c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8005820:	f7fb fbf2 	bl	8001008 <HAL_Delay>
    for (int i = 0; i < AI_TINYAUDIOCNN_OUT_1_SIZE; ++i) {
 8005824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005826:	3301      	adds	r3, #1
 8005828:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800582a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800582c:	2b05      	cmp	r3, #5
 800582e:	ddac      	ble.n	800578a <post_process+0x32>
    }
    printf("Predicted Class: %s\n\r", class_names[max_index]);
 8005830:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005832:	009b      	lsls	r3, r3, #2
 8005834:	3338      	adds	r3, #56	@ 0x38
 8005836:	443b      	add	r3, r7
 8005838:	f853 3c30 	ldr.w	r3, [r3, #-48]
 800583c:	4619      	mov	r1, r3
 800583e:	480a      	ldr	r0, [pc, #40]	@ (8005868 <post_process+0x110>)
 8005840:	f003 ffd8 	bl	80097f4 <iprintf>
    HAL_Delay(8000);
 8005844:	f44f 50fa 	mov.w	r0, #8000	@ 0x1f40
 8005848:	f7fb fbde 	bl	8001008 <HAL_Delay>

    return 0;
 800584c:	2300      	movs	r3, #0
    //     }
    // }

    // printf("Predicted class: %d with confidence %.2f\n", max_idx, max_val);
    // return 0;
}
 800584e:	4618      	mov	r0, r3
 8005850:	3738      	adds	r7, #56	@ 0x38
 8005852:	46bd      	mov	sp, r7
 8005854:	bdb0      	pop	{r4, r5, r7, pc}
 8005856:	bf00      	nop
 8005858:	0800a57c 	.word	0x0800a57c
 800585c:	42c80000 	.word	0x42c80000
 8005860:	51eb851f 	.word	0x51eb851f
 8005864:	0800a510 	.word	0x0800a510
 8005868:	0800a52c 	.word	0x0800a52c

0800586c <MX_X_CUBE_AI_Init>:
/* USER CODE END 2 */

/* Entry points --------------------------------------------------------------*/

void MX_X_CUBE_AI_Init(void)
{
 800586c:	b580      	push	{r7, lr}
 800586e:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 5 */
  printf("\r\nTEMPLATE - initialization\r\n");
 8005870:	4803      	ldr	r0, [pc, #12]	@ (8005880 <MX_X_CUBE_AI_Init+0x14>)
 8005872:	f004 f827 	bl	80098c4 <puts>

  ai_boostrap(data_activations0);
 8005876:	4803      	ldr	r0, [pc, #12]	@ (8005884 <MX_X_CUBE_AI_Init+0x18>)
 8005878:	f7ff febc 	bl	80055f4 <ai_boostrap>
    /* USER CODE END 5 */
}
 800587c:	bf00      	nop
 800587e:	bd80      	pop	{r7, pc}
 8005880:	0800a594 	.word	0x0800a594
 8005884:	24010210 	.word	0x24010210

08005888 <MX_X_CUBE_AI_Process>:

void MX_X_CUBE_AI_Process(void)
{
 8005888:	b580      	push	{r7, lr}
 800588a:	b082      	sub	sp, #8
 800588c:	af00      	add	r7, sp, #0
    /* USER CODE BEGIN 6 */
  int res = -1;
 800588e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005892:	607b      	str	r3, [r7, #4]

  if (tinyaudiocnn) {
 8005894:	4b14      	ldr	r3, [pc, #80]	@ (80058e8 <MX_X_CUBE_AI_Process+0x60>)
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	2b00      	cmp	r3, #0
 800589a:	d013      	beq.n	80058c4 <MX_X_CUBE_AI_Process+0x3c>

    do {
      /* 1 - acquire and pre-process input data */
      res = acquire_and_process_data(data_ins);
 800589c:	4813      	ldr	r0, [pc, #76]	@ (80058ec <MX_X_CUBE_AI_Process+0x64>)
 800589e:	f7ff ff37 	bl	8005710 <acquire_and_process_data>
 80058a2:	6078      	str	r0, [r7, #4]
      /* 2 - process the data - call inference engine */
      if (res == 0)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d102      	bne.n	80058b0 <MX_X_CUBE_AI_Process+0x28>
        res = ai_run();
 80058aa:	f7ff ff07 	bl	80056bc <ai_run>
 80058ae:	6078      	str	r0, [r7, #4]
      /* 3- post-process the predictions */
      if (res == 0)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d103      	bne.n	80058be <MX_X_CUBE_AI_Process+0x36>
        res = post_process(data_outs);
 80058b6:	480e      	ldr	r0, [pc, #56]	@ (80058f0 <MX_X_CUBE_AI_Process+0x68>)
 80058b8:	f7ff ff4e 	bl	8005758 <post_process>
 80058bc:	6078      	str	r0, [r7, #4]
    } while (res==0);
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d0eb      	beq.n	800589c <MX_X_CUBE_AI_Process+0x14>
  }

  if (res) {
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	d00a      	beq.n	80058e0 <MX_X_CUBE_AI_Process+0x58>
    ai_error err = {AI_ERROR_INVALID_STATE, AI_ERROR_CODE_NETWORK};
 80058ca:	2311      	movs	r3, #17
 80058cc:	703b      	strb	r3, [r7, #0]
 80058ce:	683b      	ldr	r3, [r7, #0]
 80058d0:	2210      	movs	r2, #16
 80058d2:	f362 231f 	bfi	r3, r2, #8, #24
 80058d6:	603b      	str	r3, [r7, #0]
    ai_log_err(err, "Process has FAILED");
 80058d8:	4906      	ldr	r1, [pc, #24]	@ (80058f4 <MX_X_CUBE_AI_Process+0x6c>)
 80058da:	6838      	ldr	r0, [r7, #0]
 80058dc:	f7ff fe68 	bl	80055b0 <ai_log_err>
  }
    /* USER CODE END 6 */
}
 80058e0:	bf00      	nop
 80058e2:	3708      	adds	r7, #8
 80058e4:	46bd      	mov	sp, r7
 80058e6:	bd80      	pop	{r7, pc}
 80058e8:	24041000 	.word	0x24041000
 80058ec:	24010db8 	.word	0x24010db8
 80058f0:	24010dbc 	.word	0x24010dbc
 80058f4:	0800a5b4 	.word	0x0800a5b4

080058f8 <tinyaudiocnn_configure_activations>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool tinyaudiocnn_configure_activations(
  ai_network* net_ctx, const ai_network_params* params)
{
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
 8005900:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_activations_map(g_tinyaudiocnn_activations_map, 1, params)) {
 8005902:	683a      	ldr	r2, [r7, #0]
 8005904:	2101      	movs	r1, #1
 8005906:	484d      	ldr	r0, [pc, #308]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005908:	f000 fb5e 	bl	8005fc8 <ai_platform_get_activations_map>
 800590c:	4603      	mov	r3, r0
 800590e:	2b00      	cmp	r3, #0
 8005910:	f000 808a 	beq.w	8005a28 <tinyaudiocnn_configure_activations+0x130>
    /* Updating activations (byte) offsets */
    
    serving_default_args_00_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 85848);
 8005914:	4b49      	ldr	r3, [pc, #292]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005916:	681a      	ldr	r2, [r3, #0]
 8005918:	4b49      	ldr	r3, [pc, #292]	@ (8005a40 <tinyaudiocnn_configure_activations+0x148>)
 800591a:	4413      	add	r3, r2
 800591c:	4a49      	ldr	r2, [pc, #292]	@ (8005a44 <tinyaudiocnn_configure_activations+0x14c>)
 800591e:	6093      	str	r3, [r2, #8]
    serving_default_args_00_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 85848);
 8005920:	4b46      	ldr	r3, [pc, #280]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005922:	681a      	ldr	r2, [r3, #0]
 8005924:	4b46      	ldr	r3, [pc, #280]	@ (8005a40 <tinyaudiocnn_configure_activations+0x148>)
 8005926:	4413      	add	r3, r2
 8005928:	4a46      	ldr	r2, [pc, #280]	@ (8005a44 <tinyaudiocnn_configure_activations+0x14c>)
 800592a:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch0_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151896);
 800592c:	4b43      	ldr	r3, [pc, #268]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 800592e:	681a      	ldr	r2, [r3, #0]
 8005930:	4b45      	ldr	r3, [pc, #276]	@ (8005a48 <tinyaudiocnn_configure_activations+0x150>)
 8005932:	4413      	add	r3, r2
 8005934:	4a45      	ldr	r2, [pc, #276]	@ (8005a4c <tinyaudiocnn_configure_activations+0x154>)
 8005936:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch0_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151896);
 8005938:	4b40      	ldr	r3, [pc, #256]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 800593a:	681a      	ldr	r2, [r3, #0]
 800593c:	4b42      	ldr	r3, [pc, #264]	@ (8005a48 <tinyaudiocnn_configure_activations+0x150>)
 800593e:	4413      	add	r3, r2
 8005940:	4a42      	ldr	r2, [pc, #264]	@ (8005a4c <tinyaudiocnn_configure_activations+0x154>)
 8005942:	60d3      	str	r3, [r2, #12]
    conv2d_1_scratch1_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151932);
 8005944:	4b3d      	ldr	r3, [pc, #244]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	4b41      	ldr	r3, [pc, #260]	@ (8005a50 <tinyaudiocnn_configure_activations+0x158>)
 800594a:	4413      	add	r3, r2
 800594c:	4a41      	ldr	r2, [pc, #260]	@ (8005a54 <tinyaudiocnn_configure_activations+0x15c>)
 800594e:	6093      	str	r3, [r2, #8]
    conv2d_1_scratch1_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 151932);
 8005950:	4b3a      	ldr	r3, [pc, #232]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005952:	681a      	ldr	r2, [r3, #0]
 8005954:	4b3e      	ldr	r3, [pc, #248]	@ (8005a50 <tinyaudiocnn_configure_activations+0x158>)
 8005956:	4413      	add	r3, r2
 8005958:	4a3e      	ldr	r2, [pc, #248]	@ (8005a54 <tinyaudiocnn_configure_activations+0x15c>)
 800595a:	60d3      	str	r3, [r2, #12]
    conv2d_1_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 8352);
 800595c:	4b37      	ldr	r3, [pc, #220]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 800595e:	681a      	ldr	r2, [r3, #0]
 8005960:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 8005964:	4413      	add	r3, r2
 8005966:	4a3c      	ldr	r2, [pc, #240]	@ (8005a58 <tinyaudiocnn_configure_activations+0x160>)
 8005968:	6093      	str	r3, [r2, #8]
    conv2d_1_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 8352);
 800596a:	4b34      	ldr	r3, [pc, #208]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	f242 03a0 	movw	r3, #8352	@ 0x20a0
 8005972:	4413      	add	r3, r2
 8005974:	4a38      	ldr	r2, [pc, #224]	@ (8005a58 <tinyaudiocnn_configure_activations+0x160>)
 8005976:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch0_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140448);
 8005978:	4b30      	ldr	r3, [pc, #192]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 800597a:	681a      	ldr	r2, [r3, #0]
 800597c:	4b37      	ldr	r3, [pc, #220]	@ (8005a5c <tinyaudiocnn_configure_activations+0x164>)
 800597e:	4413      	add	r3, r2
 8005980:	4a37      	ldr	r2, [pc, #220]	@ (8005a60 <tinyaudiocnn_configure_activations+0x168>)
 8005982:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch0_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140448);
 8005984:	4b2d      	ldr	r3, [pc, #180]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005986:	681a      	ldr	r2, [r3, #0]
 8005988:	4b34      	ldr	r3, [pc, #208]	@ (8005a5c <tinyaudiocnn_configure_activations+0x164>)
 800598a:	4413      	add	r3, r2
 800598c:	4a34      	ldr	r2, [pc, #208]	@ (8005a60 <tinyaudiocnn_configure_activations+0x168>)
 800598e:	60d3      	str	r3, [r2, #12]
    conv2d_3_scratch1_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140736);
 8005990:	4b2a      	ldr	r3, [pc, #168]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	4b33      	ldr	r3, [pc, #204]	@ (8005a64 <tinyaudiocnn_configure_activations+0x16c>)
 8005996:	4413      	add	r3, r2
 8005998:	4a33      	ldr	r2, [pc, #204]	@ (8005a68 <tinyaudiocnn_configure_activations+0x170>)
 800599a:	6093      	str	r3, [r2, #8]
    conv2d_3_scratch1_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 140736);
 800599c:	4b27      	ldr	r3, [pc, #156]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 800599e:	681a      	ldr	r2, [r3, #0]
 80059a0:	4b30      	ldr	r3, [pc, #192]	@ (8005a64 <tinyaudiocnn_configure_activations+0x16c>)
 80059a2:	4413      	add	r3, r2
 80059a4:	4a30      	ldr	r2, [pc, #192]	@ (8005a68 <tinyaudiocnn_configure_activations+0x170>)
 80059a6:	60d3      	str	r3, [r2, #12]
    conv2d_3_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 80059a8:	4b24      	ldr	r3, [pc, #144]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	4a2f      	ldr	r2, [pc, #188]	@ (8005a6c <tinyaudiocnn_configure_activations+0x174>)
 80059ae:	6093      	str	r3, [r2, #8]
    conv2d_3_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 80059b0:	4b22      	ldr	r3, [pc, #136]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	4a2d      	ldr	r2, [pc, #180]	@ (8005a6c <tinyaudiocnn_configure_activations+0x174>)
 80059b6:	60d3      	str	r3, [r2, #12]
    conv2d_5_scratch0_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 65536);
 80059b8:	4b20      	ldr	r3, [pc, #128]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059c0:	4a2b      	ldr	r2, [pc, #172]	@ (8005a70 <tinyaudiocnn_configure_activations+0x178>)
 80059c2:	6093      	str	r3, [r2, #8]
    conv2d_5_scratch0_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 65536);
 80059c4:	4b1d      	ldr	r3, [pc, #116]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	f503 3380 	add.w	r3, r3, #65536	@ 0x10000
 80059cc:	4a28      	ldr	r2, [pc, #160]	@ (8005a70 <tinyaudiocnn_configure_activations+0x178>)
 80059ce:	60d3      	str	r3, [r2, #12]
    conv2d_5_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 80059d0:	4b1a      	ldr	r3, [pc, #104]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	4b27      	ldr	r3, [pc, #156]	@ (8005a74 <tinyaudiocnn_configure_activations+0x17c>)
 80059d6:	4413      	add	r3, r2
 80059d8:	4a27      	ldr	r2, [pc, #156]	@ (8005a78 <tinyaudiocnn_configure_activations+0x180>)
 80059da:	6093      	str	r3, [r2, #8]
    conv2d_5_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 80059dc:	4b17      	ldr	r3, [pc, #92]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059de:	681a      	ldr	r2, [r3, #0]
 80059e0:	4b24      	ldr	r3, [pc, #144]	@ (8005a74 <tinyaudiocnn_configure_activations+0x17c>)
 80059e2:	4413      	add	r3, r2
 80059e4:	4a24      	ldr	r2, [pc, #144]	@ (8005a78 <tinyaudiocnn_configure_activations+0x180>)
 80059e6:	60d3      	str	r3, [r2, #12]
    nl_5_nl_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 80059e8:	4b14      	ldr	r3, [pc, #80]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059ea:	681a      	ldr	r2, [r3, #0]
 80059ec:	4b21      	ldr	r3, [pc, #132]	@ (8005a74 <tinyaudiocnn_configure_activations+0x17c>)
 80059ee:	4413      	add	r3, r2
 80059f0:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <tinyaudiocnn_configure_activations+0x184>)
 80059f2:	6093      	str	r3, [r2, #8]
    nl_5_nl_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 66112);
 80059f4:	4b11      	ldr	r3, [pc, #68]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 80059f6:	681a      	ldr	r2, [r3, #0]
 80059f8:	4b1e      	ldr	r3, [pc, #120]	@ (8005a74 <tinyaudiocnn_configure_activations+0x17c>)
 80059fa:	4413      	add	r3, r2
 80059fc:	4a1f      	ldr	r2, [pc, #124]	@ (8005a7c <tinyaudiocnn_configure_activations+0x184>)
 80059fe:	60d3      	str	r3, [r2, #12]
    reduce_6_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 8005a00:	4b0e      	ldr	r3, [pc, #56]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	4a1e      	ldr	r2, [pc, #120]	@ (8005a80 <tinyaudiocnn_configure_activations+0x188>)
 8005a06:	6093      	str	r3, [r2, #8]
    reduce_6_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 0);
 8005a08:	4b0c      	ldr	r3, [pc, #48]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	4a1c      	ldr	r2, [pc, #112]	@ (8005a80 <tinyaudiocnn_configure_activations+0x188>)
 8005a0e:	60d3      	str	r3, [r2, #12]
    gemm_7_output_array.data = AI_PTR(g_tinyaudiocnn_activations_map[0] + 128);
 8005a10:	4b0a      	ldr	r3, [pc, #40]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	3380      	adds	r3, #128	@ 0x80
 8005a16:	4a1b      	ldr	r2, [pc, #108]	@ (8005a84 <tinyaudiocnn_configure_activations+0x18c>)
 8005a18:	6093      	str	r3, [r2, #8]
    gemm_7_output_array.data_start = AI_PTR(g_tinyaudiocnn_activations_map[0] + 128);
 8005a1a:	4b08      	ldr	r3, [pc, #32]	@ (8005a3c <tinyaudiocnn_configure_activations+0x144>)
 8005a1c:	681b      	ldr	r3, [r3, #0]
 8005a1e:	3380      	adds	r3, #128	@ 0x80
 8005a20:	4a18      	ldr	r2, [pc, #96]	@ (8005a84 <tinyaudiocnn_configure_activations+0x18c>)
 8005a22:	60d3      	str	r3, [r2, #12]
    return true;
 8005a24:	2301      	movs	r3, #1
 8005a26:	e005      	b.n	8005a34 <tinyaudiocnn_configure_activations+0x13c>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_ACTIVATIONS);
 8005a28:	2213      	movs	r2, #19
 8005a2a:	2130      	movs	r1, #48	@ 0x30
 8005a2c:	6878      	ldr	r0, [r7, #4]
 8005a2e:	f000 fb4b 	bl	80060c8 <ai_platform_network_set_error>
  return false;
 8005a32:	2300      	movs	r3, #0
}
 8005a34:	4618      	mov	r0, r3
 8005a36:	3708      	adds	r7, #8
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	bd80      	pop	{r7, pc}
 8005a3c:	2404100c 	.word	0x2404100c
 8005a40:	00014f58 	.word	0x00014f58
 8005a44:	24010214 	.word	0x24010214
 8005a48:	00025158 	.word	0x00025158
 8005a4c:	24010304 	.word	0x24010304
 8005a50:	0002517c 	.word	0x0002517c
 8005a54:	24010314 	.word	0x24010314
 8005a58:	24010224 	.word	0x24010224
 8005a5c:	000224a0 	.word	0x000224a0
 8005a60:	24010324 	.word	0x24010324
 8005a64:	000225c0 	.word	0x000225c0
 8005a68:	24010334 	.word	0x24010334
 8005a6c:	24010234 	.word	0x24010234
 8005a70:	24010344 	.word	0x24010344
 8005a74:	00010240 	.word	0x00010240
 8005a78:	24010244 	.word	0x24010244
 8005a7c:	24010254 	.word	0x24010254
 8005a80:	24010264 	.word	0x24010264
 8005a84:	24010274 	.word	0x24010274

08005a88 <tinyaudiocnn_configure_weights>:

/******************************************************************************/
AI_DECLARE_STATIC
ai_bool tinyaudiocnn_configure_weights(
  ai_network* net_ctx, const ai_network_params* params)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
  AI_ASSERT(net_ctx)

  if (ai_platform_get_weights_map(g_tinyaudiocnn_weights_map, 1, params)) {
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	2101      	movs	r1, #1
 8005a96:	484f      	ldr	r0, [pc, #316]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005a98:	f000 fa3e 	bl	8005f18 <ai_platform_get_weights_map>
 8005a9c:	4603      	mov	r3, r0
 8005a9e:	2b00      	cmp	r3, #0
 8005aa0:	f000 808e 	beq.w	8005bc0 <tinyaudiocnn_configure_weights+0x138>
    /* Updating weights (byte) offsets */
    
    conv2d_1_weights_array.format |= AI_FMT_FLAG_CONST;
 8005aa4:	4b4c      	ldr	r3, [pc, #304]	@ (8005bd8 <tinyaudiocnn_configure_weights+0x150>)
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aac:	4a4a      	ldr	r2, [pc, #296]	@ (8005bd8 <tinyaudiocnn_configure_weights+0x150>)
 8005aae:	6013      	str	r3, [r2, #0]
    conv2d_1_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 0);
 8005ab0:	4b48      	ldr	r3, [pc, #288]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	4a48      	ldr	r2, [pc, #288]	@ (8005bd8 <tinyaudiocnn_configure_weights+0x150>)
 8005ab6:	6093      	str	r3, [r2, #8]
    conv2d_1_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 0);
 8005ab8:	4b46      	ldr	r3, [pc, #280]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	4a46      	ldr	r2, [pc, #280]	@ (8005bd8 <tinyaudiocnn_configure_weights+0x150>)
 8005abe:	60d3      	str	r3, [r2, #12]
    conv2d_1_bias_array.format |= AI_FMT_FLAG_CONST;
 8005ac0:	4b46      	ldr	r3, [pc, #280]	@ (8005bdc <tinyaudiocnn_configure_weights+0x154>)
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ac8:	4a44      	ldr	r2, [pc, #272]	@ (8005bdc <tinyaudiocnn_configure_weights+0x154>)
 8005aca:	6013      	str	r3, [r2, #0]
    conv2d_1_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 288);
 8005acc:	4b41      	ldr	r3, [pc, #260]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005ad4:	4a41      	ldr	r2, [pc, #260]	@ (8005bdc <tinyaudiocnn_configure_weights+0x154>)
 8005ad6:	6093      	str	r3, [r2, #8]
    conv2d_1_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 288);
 8005ad8:	4b3e      	ldr	r3, [pc, #248]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	f503 7390 	add.w	r3, r3, #288	@ 0x120
 8005ae0:	4a3e      	ldr	r2, [pc, #248]	@ (8005bdc <tinyaudiocnn_configure_weights+0x154>)
 8005ae2:	60d3      	str	r3, [r2, #12]
    conv2d_3_weights_array.format |= AI_FMT_FLAG_CONST;
 8005ae4:	4b3e      	ldr	r3, [pc, #248]	@ (8005be0 <tinyaudiocnn_configure_weights+0x158>)
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005aec:	4a3c      	ldr	r2, [pc, #240]	@ (8005be0 <tinyaudiocnn_configure_weights+0x158>)
 8005aee:	6013      	str	r3, [r2, #0]
    conv2d_3_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 320);
 8005af0:	4b38      	ldr	r3, [pc, #224]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005af8:	4a39      	ldr	r2, [pc, #228]	@ (8005be0 <tinyaudiocnn_configure_weights+0x158>)
 8005afa:	6093      	str	r3, [r2, #8]
    conv2d_3_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 320);
 8005afc:	4b35      	ldr	r3, [pc, #212]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8005b04:	4a36      	ldr	r2, [pc, #216]	@ (8005be0 <tinyaudiocnn_configure_weights+0x158>)
 8005b06:	60d3      	str	r3, [r2, #12]
    conv2d_3_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b08:	4b36      	ldr	r3, [pc, #216]	@ (8005be4 <tinyaudiocnn_configure_weights+0x15c>)
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b10:	4a34      	ldr	r2, [pc, #208]	@ (8005be4 <tinyaudiocnn_configure_weights+0x15c>)
 8005b12:	6013      	str	r3, [r2, #0]
    conv2d_3_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4928);
 8005b14:	4b2f      	ldr	r3, [pc, #188]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8005b1c:	4a31      	ldr	r2, [pc, #196]	@ (8005be4 <tinyaudiocnn_configure_weights+0x15c>)
 8005b1e:	6093      	str	r3, [r2, #8]
    conv2d_3_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4928);
 8005b20:	4b2c      	ldr	r3, [pc, #176]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	f503 539a 	add.w	r3, r3, #4928	@ 0x1340
 8005b28:	4a2e      	ldr	r2, [pc, #184]	@ (8005be4 <tinyaudiocnn_configure_weights+0x15c>)
 8005b2a:	60d3      	str	r3, [r2, #12]
    conv2d_5_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b2c:	4b2e      	ldr	r3, [pc, #184]	@ (8005be8 <tinyaudiocnn_configure_weights+0x160>)
 8005b2e:	681b      	ldr	r3, [r3, #0]
 8005b30:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b34:	4a2c      	ldr	r2, [pc, #176]	@ (8005be8 <tinyaudiocnn_configure_weights+0x160>)
 8005b36:	6013      	str	r3, [r2, #0]
    conv2d_5_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4992);
 8005b38:	4b26      	ldr	r3, [pc, #152]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8005b40:	4a29      	ldr	r2, [pc, #164]	@ (8005be8 <tinyaudiocnn_configure_weights+0x160>)
 8005b42:	6093      	str	r3, [r2, #8]
    conv2d_5_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 4992);
 8005b44:	4b23      	ldr	r3, [pc, #140]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b46:	681b      	ldr	r3, [r3, #0]
 8005b48:	f503 539c 	add.w	r3, r3, #4992	@ 0x1380
 8005b4c:	4a26      	ldr	r2, [pc, #152]	@ (8005be8 <tinyaudiocnn_configure_weights+0x160>)
 8005b4e:	60d3      	str	r3, [r2, #12]
    conv2d_5_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b50:	4b26      	ldr	r3, [pc, #152]	@ (8005bec <tinyaudiocnn_configure_weights+0x164>)
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b58:	4a24      	ldr	r2, [pc, #144]	@ (8005bec <tinyaudiocnn_configure_weights+0x164>)
 8005b5a:	6013      	str	r3, [r2, #0]
    conv2d_5_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23424);
 8005b5c:	4b1d      	ldr	r3, [pc, #116]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f503 43b7 	add.w	r3, r3, #23424	@ 0x5b80
 8005b64:	4a21      	ldr	r2, [pc, #132]	@ (8005bec <tinyaudiocnn_configure_weights+0x164>)
 8005b66:	6093      	str	r3, [r2, #8]
    conv2d_5_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23424);
 8005b68:	4b1a      	ldr	r3, [pc, #104]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f503 43b7 	add.w	r3, r3, #23424	@ 0x5b80
 8005b70:	4a1e      	ldr	r2, [pc, #120]	@ (8005bec <tinyaudiocnn_configure_weights+0x164>)
 8005b72:	60d3      	str	r3, [r2, #12]
    gemm_7_weights_array.format |= AI_FMT_FLAG_CONST;
 8005b74:	4b1e      	ldr	r3, [pc, #120]	@ (8005bf0 <tinyaudiocnn_configure_weights+0x168>)
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005b7c:	4a1c      	ldr	r2, [pc, #112]	@ (8005bf0 <tinyaudiocnn_configure_weights+0x168>)
 8005b7e:	6013      	str	r3, [r2, #0]
    gemm_7_weights_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23552);
 8005b80:	4b14      	ldr	r3, [pc, #80]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8005b88:	4a19      	ldr	r2, [pc, #100]	@ (8005bf0 <tinyaudiocnn_configure_weights+0x168>)
 8005b8a:	6093      	str	r3, [r2, #8]
    gemm_7_weights_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 23552);
 8005b8c:	4b11      	ldr	r3, [pc, #68]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	f503 43b8 	add.w	r3, r3, #23552	@ 0x5c00
 8005b94:	4a16      	ldr	r2, [pc, #88]	@ (8005bf0 <tinyaudiocnn_configure_weights+0x168>)
 8005b96:	60d3      	str	r3, [r2, #12]
    gemm_7_bias_array.format |= AI_FMT_FLAG_CONST;
 8005b98:	4b16      	ldr	r3, [pc, #88]	@ (8005bf4 <tinyaudiocnn_configure_weights+0x16c>)
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8005ba0:	4a14      	ldr	r2, [pc, #80]	@ (8005bf4 <tinyaudiocnn_configure_weights+0x16c>)
 8005ba2:	6013      	str	r3, [r2, #0]
    gemm_7_bias_array.data = AI_PTR(g_tinyaudiocnn_weights_map[0] + 24320);
 8005ba4:	4b0b      	ldr	r3, [pc, #44]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f503 43be 	add.w	r3, r3, #24320	@ 0x5f00
 8005bac:	4a11      	ldr	r2, [pc, #68]	@ (8005bf4 <tinyaudiocnn_configure_weights+0x16c>)
 8005bae:	6093      	str	r3, [r2, #8]
    gemm_7_bias_array.data_start = AI_PTR(g_tinyaudiocnn_weights_map[0] + 24320);
 8005bb0:	4b08      	ldr	r3, [pc, #32]	@ (8005bd4 <tinyaudiocnn_configure_weights+0x14c>)
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f503 43be 	add.w	r3, r3, #24320	@ 0x5f00
 8005bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8005bf4 <tinyaudiocnn_configure_weights+0x16c>)
 8005bba:	60d3      	str	r3, [r2, #12]
    return true;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	e005      	b.n	8005bcc <tinyaudiocnn_configure_weights+0x144>
  }
  AI_ERROR_TRAP(net_ctx, INIT_FAILED, NETWORK_WEIGHTS);
 8005bc0:	2212      	movs	r2, #18
 8005bc2:	2130      	movs	r1, #48	@ 0x30
 8005bc4:	6878      	ldr	r0, [r7, #4]
 8005bc6:	f000 fa7f 	bl	80060c8 <ai_platform_network_set_error>
  return false;
 8005bca:	2300      	movs	r3, #0
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3708      	adds	r7, #8
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}
 8005bd4:	24041010 	.word	0x24041010
 8005bd8:	24010284 	.word	0x24010284
 8005bdc:	24010294 	.word	0x24010294
 8005be0:	240102a4 	.word	0x240102a4
 8005be4:	240102b4 	.word	0x240102b4
 8005be8:	240102c4 	.word	0x240102c4
 8005bec:	240102d4 	.word	0x240102d4
 8005bf0:	240102e4 	.word	0x240102e4
 8005bf4:	240102f4 	.word	0x240102f4

08005bf8 <ai_tinyaudiocnn_get_error>:
}


AI_API_ENTRY
ai_error ai_tinyaudiocnn_get_error(ai_handle network)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b082      	sub	sp, #8
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  return ai_platform_network_get_error(network);
 8005c00:	6878      	ldr	r0, [r7, #4]
 8005c02:	f000 fa55 	bl	80060b0 <ai_platform_network_get_error>
 8005c06:	4603      	mov	r3, r0
}
 8005c08:	4618      	mov	r0, r3
 8005c0a:	3708      	adds	r7, #8
 8005c0c:	46bd      	mov	sp, r7
 8005c0e:	bd80      	pop	{r7, pc}

08005c10 <ai_tinyaudiocnn_create>:


AI_API_ENTRY
ai_error ai_tinyaudiocnn_create(
  ai_handle* network, const ai_buffer* network_config)
{
 8005c10:	b580      	push	{r7, lr}
 8005c12:	b084      	sub	sp, #16
 8005c14:	af02      	add	r7, sp, #8
 8005c16:	6078      	str	r0, [r7, #4]
 8005c18:	6039      	str	r1, [r7, #0]
  return ai_platform_network_create(
 8005c1a:	2300      	movs	r3, #0
 8005c1c:	9301      	str	r3, [sp, #4]
 8005c1e:	2305      	movs	r3, #5
 8005c20:	9300      	str	r3, [sp, #0]
 8005c22:	2301      	movs	r3, #1
 8005c24:	4a04      	ldr	r2, [pc, #16]	@ (8005c38 <ai_tinyaudiocnn_create+0x28>)
 8005c26:	6839      	ldr	r1, [r7, #0]
 8005c28:	6878      	ldr	r0, [r7, #4]
 8005c2a:	f000 fb43 	bl	80062b4 <ai_platform_network_create>
 8005c2e:	4603      	mov	r3, r0
    network, network_config, 
    AI_CONTEXT_OBJ(&AI_NET_OBJ_INSTANCE),
    AI_TOOLS_API_VERSION_MAJOR, AI_TOOLS_API_VERSION_MINOR, AI_TOOLS_API_VERSION_MICRO);
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3708      	adds	r7, #8
 8005c34:	46bd      	mov	sp, r7
 8005c36:	bd80      	pop	{r7, pc}
 8005c38:	24010bf8 	.word	0x24010bf8

08005c3c <ai_tinyaudiocnn_create_and_init>:


AI_API_ENTRY
ai_error ai_tinyaudiocnn_create_and_init(
  ai_handle* network, const ai_handle activations[], const ai_handle weights[])
{
 8005c3c:	b580      	push	{r7, lr}
 8005c3e:	b094      	sub	sp, #80	@ 0x50
 8005c40:	af00      	add	r7, sp, #0
 8005c42:	60f8      	str	r0, [r7, #12]
 8005c44:	60b9      	str	r1, [r7, #8]
 8005c46:	607a      	str	r2, [r7, #4]
  ai_error err;
  ai_network_params params;

  err = ai_tinyaudiocnn_create(network, AI_TINYAUDIOCNN_DATA_CONFIG);
 8005c48:	2100      	movs	r1, #0
 8005c4a:	68f8      	ldr	r0, [r7, #12]
 8005c4c:	f7ff ffe0 	bl	8005c10 <ai_tinyaudiocnn_create>
 8005c50:	4603      	mov	r3, r0
 8005c52:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (err.type != AI_ERROR_NONE) {
 8005c54:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d001      	beq.n	8005c60 <ai_tinyaudiocnn_create_and_init+0x24>
    return err;
 8005c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c5e:	e067      	b.n	8005d30 <ai_tinyaudiocnn_create_and_init+0xf4>
  }
  
  if (ai_tinyaudiocnn_data_params_get(&params) != true) {
 8005c60:	f107 0310 	add.w	r3, r7, #16
 8005c64:	4618      	mov	r0, r3
 8005c66:	f000 f8e7 	bl	8005e38 <ai_tinyaudiocnn_data_params_get>
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	f083 0301 	eor.w	r3, r3, #1
 8005c70:	b2db      	uxtb	r3, r3
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d008      	beq.n	8005c88 <ai_tinyaudiocnn_create_and_init+0x4c>
    err = ai_tinyaudiocnn_get_error(*network);
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	f7ff ffbc 	bl	8005bf8 <ai_tinyaudiocnn_get_error>
 8005c80:	4603      	mov	r3, r0
 8005c82:	64bb      	str	r3, [r7, #72]	@ 0x48
    return err;
 8005c84:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005c86:	e053      	b.n	8005d30 <ai_tinyaudiocnn_create_and_init+0xf4>
  }
#if defined(AI_TINYAUDIOCNN_DATA_ACTIVATIONS_COUNT)
  /* set the addresses of the activations buffers */
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005c88:	2300      	movs	r3, #0
 8005c8a:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005c8e:	e012      	b.n	8005cb6 <ai_tinyaudiocnn_create_and_init+0x7a>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_activations, idx, activations[idx]);
 8005c90:	f8b7 104e 	ldrh.w	r1, [r7, #78]	@ 0x4e
 8005c94:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005c98:	009b      	lsls	r3, r3, #2
 8005c9a:	68ba      	ldr	r2, [r7, #8]
 8005c9c:	4413      	add	r3, r2
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	f107 0310 	add.w	r3, r7, #16
 8005ca4:	330c      	adds	r3, #12
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	f000 f928 	bl	8005efc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; activations && idx<params.map_activations.size; idx++) {
 8005cac:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8005cb0:	3301      	adds	r3, #1
 8005cb2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8005cb6:	68bb      	ldr	r3, [r7, #8]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d004      	beq.n	8005cc6 <ai_tinyaudiocnn_create_and_init+0x8a>
 8005cbc:	8bfb      	ldrh	r3, [r7, #30]
 8005cbe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	@ 0x4e
 8005cc2:	429a      	cmp	r2, r3
 8005cc4:	d3e4      	bcc.n	8005c90 <ai_tinyaudiocnn_create_and_init+0x54>
  }
#endif
#if defined(AI_TINYAUDIOCNN_DATA_WEIGHTS_COUNT)
  /* set the addresses of the weight buffers */
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8005cc6:	2300      	movs	r3, #0
 8005cc8:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005ccc:	e012      	b.n	8005cf4 <ai_tinyaudiocnn_create_and_init+0xb8>
    AI_BUFFER_ARRAY_ITEM_SET_ADDRESS(&params.map_weights, idx, weights[idx]);
 8005cce:	f8b7 104c 	ldrh.w	r1, [r7, #76]	@ 0x4c
 8005cd2:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005cd6:	009b      	lsls	r3, r3, #2
 8005cd8:	687a      	ldr	r2, [r7, #4]
 8005cda:	4413      	add	r3, r2
 8005cdc:	681a      	ldr	r2, [r3, #0]
 8005cde:	f107 0310 	add.w	r3, r7, #16
 8005ce2:	3304      	adds	r3, #4
 8005ce4:	4618      	mov	r0, r3
 8005ce6:	f000 f909 	bl	8005efc <ai_buffer_array_item_set_address>
  for (ai_u16 idx=0; weights && idx<params.map_weights.size; idx++) {
 8005cea:	f8b7 304c 	ldrh.w	r3, [r7, #76]	@ 0x4c
 8005cee:	3301      	adds	r3, #1
 8005cf0:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d004      	beq.n	8005d04 <ai_tinyaudiocnn_create_and_init+0xc8>
 8005cfa:	8afb      	ldrh	r3, [r7, #22]
 8005cfc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	@ 0x4c
 8005d00:	429a      	cmp	r2, r3
 8005d02:	d3e4      	bcc.n	8005cce <ai_tinyaudiocnn_create_and_init+0x92>
  }
#endif
  if (ai_tinyaudiocnn_init(*network, &params) != true) {
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	f107 0210 	add.w	r2, r7, #16
 8005d0c:	4611      	mov	r1, r2
 8005d0e:	4618      	mov	r0, r3
 8005d10:	f000 f846 	bl	8005da0 <ai_tinyaudiocnn_init>
 8005d14:	4603      	mov	r3, r0
 8005d16:	f083 0301 	eor.w	r3, r3, #1
 8005d1a:	b2db      	uxtb	r3, r3
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d006      	beq.n	8005d2e <ai_tinyaudiocnn_create_and_init+0xf2>
    err = ai_tinyaudiocnn_get_error(*network);
 8005d20:	68fb      	ldr	r3, [r7, #12]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	4618      	mov	r0, r3
 8005d26:	f7ff ff67 	bl	8005bf8 <ai_tinyaudiocnn_get_error>
 8005d2a:	4603      	mov	r3, r0
 8005d2c:	64bb      	str	r3, [r7, #72]	@ 0x48
  }
  return err;
 8005d2e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005d30:	4618      	mov	r0, r3
 8005d32:	3750      	adds	r7, #80	@ 0x50
 8005d34:	46bd      	mov	sp, r7
 8005d36:	bd80      	pop	{r7, pc}

08005d38 <ai_tinyaudiocnn_inputs_get>:


AI_API_ENTRY
ai_buffer* ai_tinyaudiocnn_inputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005d38:	b580      	push	{r7, lr}
 8005d3a:	b082      	sub	sp, #8
 8005d3c:	af00      	add	r7, sp, #0
 8005d3e:	6078      	str	r0, [r7, #4]
 8005d40:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d104      	bne.n	8005d52 <ai_tinyaudiocnn_inputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005d48:	4b06      	ldr	r3, [pc, #24]	@ (8005d64 <ai_tinyaudiocnn_inputs_get+0x2c>)
 8005d4a:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	4a06      	ldr	r2, [pc, #24]	@ (8005d68 <ai_tinyaudiocnn_inputs_get+0x30>)
 8005d50:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_inputs_get(network, n_buffer);
 8005d52:	6839      	ldr	r1, [r7, #0]
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f000 f9bd 	bl	80060d4 <ai_platform_inputs_get>
 8005d5a:	4603      	mov	r3, r0
}
 8005d5c:	4618      	mov	r0, r3
 8005d5e:	3708      	adds	r7, #8
 8005d60:	46bd      	mov	sp, r7
 8005d62:	bd80      	pop	{r7, pc}
 8005d64:	24010bf8 	.word	0x24010bf8
 8005d68:	a1c00100 	.word	0xa1c00100

08005d6c <ai_tinyaudiocnn_outputs_get>:


AI_API_ENTRY
ai_buffer* ai_tinyaudiocnn_outputs_get(ai_handle network, ai_u16 *n_buffer)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b082      	sub	sp, #8
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
 8005d74:	6039      	str	r1, [r7, #0]
  if (network == AI_HANDLE_NULL) {
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d104      	bne.n	8005d86 <ai_tinyaudiocnn_outputs_get+0x1a>
    network = (ai_handle)&AI_NET_OBJ_INSTANCE;
 8005d7c:	4b06      	ldr	r3, [pc, #24]	@ (8005d98 <ai_tinyaudiocnn_outputs_get+0x2c>)
 8005d7e:	607b      	str	r3, [r7, #4]
    AI_NETWORK_OBJ(network)->magic = AI_MAGIC_CONTEXT_TOKEN;
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	4a06      	ldr	r2, [pc, #24]	@ (8005d9c <ai_tinyaudiocnn_outputs_get+0x30>)
 8005d84:	601a      	str	r2, [r3, #0]
  }
  return ai_platform_outputs_get(network, n_buffer);
 8005d86:	6839      	ldr	r1, [r7, #0]
 8005d88:	6878      	ldr	r0, [r7, #4]
 8005d8a:	f000 fa1d 	bl	80061c8 <ai_platform_outputs_get>
 8005d8e:	4603      	mov	r3, r0
}
 8005d90:	4618      	mov	r0, r3
 8005d92:	3708      	adds	r7, #8
 8005d94:	46bd      	mov	sp, r7
 8005d96:	bd80      	pop	{r7, pc}
 8005d98:	24010bf8 	.word	0x24010bf8
 8005d9c:	a1c00100 	.word	0xa1c00100

08005da0 <ai_tinyaudiocnn_init>:


AI_API_ENTRY
ai_bool ai_tinyaudiocnn_init(
  ai_handle network, const ai_network_params* params)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b084      	sub	sp, #16
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
 8005da8:	6039      	str	r1, [r7, #0]
  ai_network* net_ctx = AI_NETWORK_OBJ(ai_platform_network_init(network, params));
 8005daa:	6839      	ldr	r1, [r7, #0]
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f000 fac3 	bl	8006338 <ai_platform_network_init>
 8005db2:	60f8      	str	r0, [r7, #12]
  ai_bool ok = true;
 8005db4:	2301      	movs	r3, #1
 8005db6:	72fb      	strb	r3, [r7, #11]

  if (!net_ctx) return false;
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d101      	bne.n	8005dc2 <ai_tinyaudiocnn_init+0x22>
 8005dbe:	2300      	movs	r3, #0
 8005dc0:	e026      	b.n	8005e10 <ai_tinyaudiocnn_init+0x70>
  ok &= tinyaudiocnn_configure_weights(net_ctx, params);
 8005dc2:	6839      	ldr	r1, [r7, #0]
 8005dc4:	68f8      	ldr	r0, [r7, #12]
 8005dc6:	f7ff fe5f 	bl	8005a88 <tinyaudiocnn_configure_weights>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	461a      	mov	r2, r3
 8005dce:	7afb      	ldrb	r3, [r7, #11]
 8005dd0:	4013      	ands	r3, r2
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	bf14      	ite	ne
 8005dd6:	2301      	movne	r3, #1
 8005dd8:	2300      	moveq	r3, #0
 8005dda:	72fb      	strb	r3, [r7, #11]
  ok &= tinyaudiocnn_configure_activations(net_ctx, params);
 8005ddc:	6839      	ldr	r1, [r7, #0]
 8005dde:	68f8      	ldr	r0, [r7, #12]
 8005de0:	f7ff fd8a 	bl	80058f8 <tinyaudiocnn_configure_activations>
 8005de4:	4603      	mov	r3, r0
 8005de6:	461a      	mov	r2, r3
 8005de8:	7afb      	ldrb	r3, [r7, #11]
 8005dea:	4013      	ands	r3, r2
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	bf14      	ite	ne
 8005df0:	2301      	movne	r3, #1
 8005df2:	2300      	moveq	r3, #0
 8005df4:	72fb      	strb	r3, [r7, #11]

  ok &= ai_platform_network_post_init(network);
 8005df6:	6878      	ldr	r0, [r7, #4]
 8005df8:	f000 fb40 	bl	800647c <ai_platform_network_post_init>
 8005dfc:	4603      	mov	r3, r0
 8005dfe:	461a      	mov	r2, r3
 8005e00:	7afb      	ldrb	r3, [r7, #11]
 8005e02:	4013      	ands	r3, r2
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	bf14      	ite	ne
 8005e08:	2301      	movne	r3, #1
 8005e0a:	2300      	moveq	r3, #0
 8005e0c:	72fb      	strb	r3, [r7, #11]

  return ok;
 8005e0e:	7afb      	ldrb	r3, [r7, #11]
}
 8005e10:	4618      	mov	r0, r3
 8005e12:	3710      	adds	r7, #16
 8005e14:	46bd      	mov	sp, r7
 8005e16:	bd80      	pop	{r7, pc}

08005e18 <ai_tinyaudiocnn_run>:


AI_API_ENTRY
ai_i32 ai_tinyaudiocnn_run(
  ai_handle network, const ai_buffer* input, ai_buffer* output)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	60f8      	str	r0, [r7, #12]
 8005e20:	60b9      	str	r1, [r7, #8]
 8005e22:	607a      	str	r2, [r7, #4]
  return ai_platform_network_process(network, input, output);
 8005e24:	687a      	ldr	r2, [r7, #4]
 8005e26:	68b9      	ldr	r1, [r7, #8]
 8005e28:	68f8      	ldr	r0, [r7, #12]
 8005e2a:	f000 fb53 	bl	80064d4 <ai_platform_network_process>
 8005e2e:	4603      	mov	r3, r0
}
 8005e30:	4618      	mov	r0, r3
 8005e32:	3710      	adds	r7, #16
 8005e34:	46bd      	mov	sp, r7
 8005e36:	bd80      	pop	{r7, pc}

08005e38 <ai_tinyaudiocnn_data_params_get>:
 * @ingroup tinyaudiocnn_data
 * @return true if a valid configuration is present, false otherwise
 */
AI_API_ENTRY
ai_bool ai_tinyaudiocnn_data_params_get(ai_network_params* params)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b086      	sub	sp, #24
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
  if (!params) return false;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d101      	bne.n	8005e4a <ai_tinyaudiocnn_data_params_get+0x12>
 8005e46:	2300      	movs	r3, #0
 8005e48:	e016      	b.n	8005e78 <ai_tinyaudiocnn_data_params_get+0x40>
  
  const ai_buffer_array map_activations = 
 8005e4a:	4a0d      	ldr	r2, [pc, #52]	@ (8005e80 <ai_tinyaudiocnn_data_params_get+0x48>)
 8005e4c:	f107 0310 	add.w	r3, r7, #16
 8005e50:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e54:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TINYAUDIOCNN_DATA_ACTIVATIONS_COUNT, g_tinyaudiocnn_data_map_activations);
  
  const ai_buffer_array map_weights = 
 8005e58:	4a0a      	ldr	r2, [pc, #40]	@ (8005e84 <ai_tinyaudiocnn_data_params_get+0x4c>)
 8005e5a:	f107 0308 	add.w	r3, r7, #8
 8005e5e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8005e62:	e883 0003 	stmia.w	r3, {r0, r1}
    AI_BUFFER_ARRAY_OBJ_INIT(AI_FLAG_NONE, AI_TINYAUDIOCNN_DATA_WEIGHTS_COUNT, g_tinyaudiocnn_data_map_weights);

  return ai_platform_bind_network_params(params, &map_weights, &map_activations);
 8005e66:	f107 0210 	add.w	r2, r7, #16
 8005e6a:	f107 0308 	add.w	r3, r7, #8
 8005e6e:	4619      	mov	r1, r3
 8005e70:	6878      	ldr	r0, [r7, #4]
 8005e72:	f000 f903 	bl	800607c <ai_platform_bind_network_params>
 8005e76:	4603      	mov	r3, r0
}
 8005e78:	4618      	mov	r0, r3
 8005e7a:	3718      	adds	r7, #24
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	bd80      	pop	{r7, pc}
 8005e80:	0800a5e8 	.word	0x0800a5e8
 8005e84:	0800a5f0 	.word	0x0800a5f0

08005e88 <ai_buffer_get_size>:
 8005e88:	b348      	cbz	r0, 8005ede <ai_buffer_get_size+0x56>
 8005e8a:	4b15      	ldr	r3, [pc, #84]	@ (8005ee0 <ai_buffer_get_size+0x58>)
 8005e8c:	b430      	push	{r4, r5}
 8005e8e:	6802      	ldr	r2, [r0, #0]
 8005e90:	4d14      	ldr	r5, [pc, #80]	@ (8005ee4 <ai_buffer_get_size+0x5c>)
 8005e92:	4013      	ands	r3, r2
 8005e94:	6984      	ldr	r4, [r0, #24]
 8005e96:	42ab      	cmp	r3, r5
 8005e98:	6862      	ldr	r2, [r4, #4]
 8005e9a:	d103      	bne.n	8005ea4 <ai_buffer_get_size+0x1c>
 8005e9c:	b111      	cbz	r1, 8005ea4 <ai_buffer_get_size+0x1c>
 8005e9e:	321f      	adds	r2, #31
 8005ea0:	f022 021f 	bic.w	r2, r2, #31
 8005ea4:	7d03      	ldrb	r3, [r0, #20]
 8005ea6:	6941      	ldr	r1, [r0, #20]
 8005ea8:	f1a3 0301 	sub.w	r3, r3, #1
 8005eac:	f3c1 2017 	ubfx	r0, r1, #8, #24
 8005eb0:	fab3 f383 	clz	r3, r3
 8005eb4:	095b      	lsrs	r3, r3, #5
 8005eb6:	ebb3 2f11 	cmp.w	r3, r1, lsr #8
 8005eba:	da0c      	bge.n	8005ed6 <ai_buffer_get_size+0x4e>
 8005ebc:	2b01      	cmp	r3, #1
 8005ebe:	d103      	bne.n	8005ec8 <ai_buffer_get_size+0x40>
 8005ec0:	2802      	cmp	r0, #2
 8005ec2:	f04f 0302 	mov.w	r3, #2
 8005ec6:	d006      	beq.n	8005ed6 <ai_buffer_get_size+0x4e>
 8005ec8:	f854 1023 	ldr.w	r1, [r4, r3, lsl #2]
 8005ecc:	3301      	adds	r3, #1
 8005ece:	4298      	cmp	r0, r3
 8005ed0:	fb01 f202 	mul.w	r2, r1, r2
 8005ed4:	d1f2      	bne.n	8005ebc <ai_buffer_get_size+0x34>
 8005ed6:	ea22 70e2 	bic.w	r0, r2, r2, asr #31
 8005eda:	bc30      	pop	{r4, r5}
 8005edc:	4770      	bx	lr
 8005ede:	4770      	bx	lr
 8005ee0:	017fffff 	.word	0x017fffff
 8005ee4:	000400c0 	.word	0x000400c0

08005ee8 <ai_buffer_array_sane>:
 8005ee8:	b138      	cbz	r0, 8005efa <ai_buffer_array_sane+0x12>
 8005eea:	6843      	ldr	r3, [r0, #4]
 8005eec:	b123      	cbz	r3, 8005ef8 <ai_buffer_array_sane+0x10>
 8005eee:	8840      	ldrh	r0, [r0, #2]
 8005ef0:	3800      	subs	r0, #0
 8005ef2:	bf18      	it	ne
 8005ef4:	2001      	movne	r0, #1
 8005ef6:	4770      	bx	lr
 8005ef8:	4618      	mov	r0, r3
 8005efa:	4770      	bx	lr

08005efc <ai_buffer_array_item_set_address>:
 8005efc:	b158      	cbz	r0, 8005f16 <ai_buffer_array_item_set_address+0x1a>
 8005efe:	6843      	ldr	r3, [r0, #4]
 8005f00:	b143      	cbz	r3, 8005f14 <ai_buffer_array_item_set_address+0x18>
 8005f02:	8840      	ldrh	r0, [r0, #2]
 8005f04:	b138      	cbz	r0, 8005f16 <ai_buffer_array_item_set_address+0x1a>
 8005f06:	ebc1 01c1 	rsb	r1, r1, r1, lsl #3
 8005f0a:	2001      	movs	r0, #1
 8005f0c:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8005f10:	605a      	str	r2, [r3, #4]
 8005f12:	4770      	bx	lr
 8005f14:	4618      	mov	r0, r3
 8005f16:	4770      	bx	lr

08005f18 <ai_platform_get_weights_map>:
 8005f18:	2900      	cmp	r1, #0
 8005f1a:	bf18      	it	ne
 8005f1c:	2800      	cmpne	r0, #0
 8005f1e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f20:	bf0c      	ite	eq
 8005f22:	2401      	moveq	r4, #1
 8005f24:	2400      	movne	r4, #0
 8005f26:	2a00      	cmp	r2, #0
 8005f28:	bf08      	it	eq
 8005f2a:	f044 0401 	orreq.w	r4, r4, #1
 8005f2e:	b114      	cbz	r4, 8005f36 <ai_platform_get_weights_map+0x1e>
 8005f30:	2400      	movs	r4, #0
 8005f32:	4620      	mov	r0, r4
 8005f34:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005f36:	4616      	mov	r6, r2
 8005f38:	4b22      	ldr	r3, [pc, #136]	@ (8005fc4 <ai_platform_get_weights_map+0xac>)
 8005f3a:	6812      	ldr	r2, [r2, #0]
 8005f3c:	4605      	mov	r5, r0
 8005f3e:	460f      	mov	r7, r1
 8005f40:	429a      	cmp	r2, r3
 8005f42:	d024      	beq.n	8005f8e <ai_platform_get_weights_map+0x76>
 8005f44:	6870      	ldr	r0, [r6, #4]
 8005f46:	2800      	cmp	r0, #0
 8005f48:	d0f2      	beq.n	8005f30 <ai_platform_get_weights_map+0x18>
 8005f4a:	6806      	ldr	r6, [r0, #0]
 8005f4c:	429e      	cmp	r6, r3
 8005f4e:	d006      	beq.n	8005f5e <ai_platform_get_weights_map+0x46>
 8005f50:	f1a1 0401 	sub.w	r4, r1, #1
 8005f54:	6028      	str	r0, [r5, #0]
 8005f56:	fab4 f484 	clz	r4, r4
 8005f5a:	0964      	lsrs	r4, r4, #5
 8005f5c:	e7e9      	b.n	8005f32 <ai_platform_get_weights_map+0x1a>
 8005f5e:	3d04      	subs	r5, #4
 8005f60:	4601      	mov	r1, r0
 8005f62:	4623      	mov	r3, r4
 8005f64:	e004      	b.n	8005f70 <ai_platform_get_weights_map+0x58>
 8005f66:	3301      	adds	r3, #1
 8005f68:	f845 2f04 	str.w	r2, [r5, #4]!
 8005f6c:	429f      	cmp	r7, r3
 8005f6e:	d903      	bls.n	8005f78 <ai_platform_get_weights_map+0x60>
 8005f70:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8005f74:	42b2      	cmp	r2, r6
 8005f76:	d1f6      	bne.n	8005f66 <ai_platform_get_weights_map+0x4e>
 8005f78:	429f      	cmp	r7, r3
 8005f7a:	d1da      	bne.n	8005f32 <ai_platform_get_weights_map+0x1a>
 8005f7c:	1c79      	adds	r1, r7, #1
 8005f7e:	4b11      	ldr	r3, [pc, #68]	@ (8005fc4 <ai_platform_get_weights_map+0xac>)
 8005f80:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8005f84:	1ae4      	subs	r4, r4, r3
 8005f86:	fab4 f484 	clz	r4, r4
 8005f8a:	0964      	lsrs	r4, r4, #5
 8005f8c:	e7d1      	b.n	8005f32 <ai_platform_get_weights_map+0x1a>
 8005f8e:	1d30      	adds	r0, r6, #4
 8005f90:	f7ff ffaa 	bl	8005ee8 <ai_buffer_array_sane>
 8005f94:	2800      	cmp	r0, #0
 8005f96:	d0cb      	beq.n	8005f30 <ai_platform_get_weights_map+0x18>
 8005f98:	88f3      	ldrh	r3, [r6, #6]
 8005f9a:	429f      	cmp	r7, r3
 8005f9c:	d1c8      	bne.n	8005f30 <ai_platform_get_weights_map+0x18>
 8005f9e:	3d04      	subs	r5, #4
 8005fa0:	4622      	mov	r2, r4
 8005fa2:	e004      	b.n	8005fae <ai_platform_get_weights_map+0x96>
 8005fa4:	3201      	adds	r2, #1
 8005fa6:	f845 3f04 	str.w	r3, [r5, #4]!
 8005faa:	4297      	cmp	r7, r2
 8005fac:	d905      	bls.n	8005fba <ai_platform_get_weights_map+0xa2>
 8005fae:	68b3      	ldr	r3, [r6, #8]
 8005fb0:	4423      	add	r3, r4
 8005fb2:	341c      	adds	r4, #28
 8005fb4:	685b      	ldr	r3, [r3, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d1f4      	bne.n	8005fa4 <ai_platform_get_weights_map+0x8c>
 8005fba:	1abc      	subs	r4, r7, r2
 8005fbc:	fab4 f484 	clz	r4, r4
 8005fc0:	0964      	lsrs	r4, r4, #5
 8005fc2:	e7b6      	b.n	8005f32 <ai_platform_get_weights_map+0x1a>
 8005fc4:	a1facade 	.word	0xa1facade

08005fc8 <ai_platform_get_activations_map>:
 8005fc8:	2900      	cmp	r1, #0
 8005fca:	bf18      	it	ne
 8005fcc:	2800      	cmpne	r0, #0
 8005fce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fd0:	bf0c      	ite	eq
 8005fd2:	2401      	moveq	r4, #1
 8005fd4:	2400      	movne	r4, #0
 8005fd6:	2a00      	cmp	r2, #0
 8005fd8:	bf08      	it	eq
 8005fda:	f044 0401 	orreq.w	r4, r4, #1
 8005fde:	b114      	cbz	r4, 8005fe6 <ai_platform_get_activations_map+0x1e>
 8005fe0:	2400      	movs	r4, #0
 8005fe2:	4620      	mov	r0, r4
 8005fe4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005fe6:	4616      	mov	r6, r2
 8005fe8:	4b23      	ldr	r3, [pc, #140]	@ (8006078 <ai_platform_get_activations_map+0xb0>)
 8005fea:	6812      	ldr	r2, [r2, #0]
 8005fec:	4605      	mov	r5, r0
 8005fee:	460f      	mov	r7, r1
 8005ff0:	429a      	cmp	r2, r3
 8005ff2:	d024      	beq.n	800603e <ai_platform_get_activations_map+0x76>
 8005ff4:	6a30      	ldr	r0, [r6, #32]
 8005ff6:	2800      	cmp	r0, #0
 8005ff8:	d0f2      	beq.n	8005fe0 <ai_platform_get_activations_map+0x18>
 8005ffa:	6806      	ldr	r6, [r0, #0]
 8005ffc:	429e      	cmp	r6, r3
 8005ffe:	d006      	beq.n	800600e <ai_platform_get_activations_map+0x46>
 8006000:	f1a1 0401 	sub.w	r4, r1, #1
 8006004:	6028      	str	r0, [r5, #0]
 8006006:	fab4 f484 	clz	r4, r4
 800600a:	0964      	lsrs	r4, r4, #5
 800600c:	e7e9      	b.n	8005fe2 <ai_platform_get_activations_map+0x1a>
 800600e:	3d04      	subs	r5, #4
 8006010:	4601      	mov	r1, r0
 8006012:	4623      	mov	r3, r4
 8006014:	e004      	b.n	8006020 <ai_platform_get_activations_map+0x58>
 8006016:	3301      	adds	r3, #1
 8006018:	f845 2f04 	str.w	r2, [r5, #4]!
 800601c:	429f      	cmp	r7, r3
 800601e:	d903      	bls.n	8006028 <ai_platform_get_activations_map+0x60>
 8006020:	f851 2f04 	ldr.w	r2, [r1, #4]!
 8006024:	42b2      	cmp	r2, r6
 8006026:	d1f6      	bne.n	8006016 <ai_platform_get_activations_map+0x4e>
 8006028:	429f      	cmp	r7, r3
 800602a:	d1da      	bne.n	8005fe2 <ai_platform_get_activations_map+0x1a>
 800602c:	1c79      	adds	r1, r7, #1
 800602e:	4b12      	ldr	r3, [pc, #72]	@ (8006078 <ai_platform_get_activations_map+0xb0>)
 8006030:	f850 4021 	ldr.w	r4, [r0, r1, lsl #2]
 8006034:	1ae4      	subs	r4, r4, r3
 8006036:	fab4 f484 	clz	r4, r4
 800603a:	0964      	lsrs	r4, r4, #5
 800603c:	e7d1      	b.n	8005fe2 <ai_platform_get_activations_map+0x1a>
 800603e:	f106 000c 	add.w	r0, r6, #12
 8006042:	f7ff ff51 	bl	8005ee8 <ai_buffer_array_sane>
 8006046:	2800      	cmp	r0, #0
 8006048:	d0ca      	beq.n	8005fe0 <ai_platform_get_activations_map+0x18>
 800604a:	89f3      	ldrh	r3, [r6, #14]
 800604c:	429f      	cmp	r7, r3
 800604e:	d1c7      	bne.n	8005fe0 <ai_platform_get_activations_map+0x18>
 8006050:	3d04      	subs	r5, #4
 8006052:	4622      	mov	r2, r4
 8006054:	e004      	b.n	8006060 <ai_platform_get_activations_map+0x98>
 8006056:	3201      	adds	r2, #1
 8006058:	f845 3f04 	str.w	r3, [r5, #4]!
 800605c:	4297      	cmp	r7, r2
 800605e:	d905      	bls.n	800606c <ai_platform_get_activations_map+0xa4>
 8006060:	6933      	ldr	r3, [r6, #16]
 8006062:	4423      	add	r3, r4
 8006064:	341c      	adds	r4, #28
 8006066:	685b      	ldr	r3, [r3, #4]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d1f4      	bne.n	8006056 <ai_platform_get_activations_map+0x8e>
 800606c:	1abc      	subs	r4, r7, r2
 800606e:	fab4 f484 	clz	r4, r4
 8006072:	0964      	lsrs	r4, r4, #5
 8006074:	e7b5      	b.n	8005fe2 <ai_platform_get_activations_map+0x1a>
 8006076:	bf00      	nop
 8006078:	a1facade 	.word	0xa1facade

0800607c <ai_platform_bind_network_params>:
 800607c:	2a00      	cmp	r2, #0
 800607e:	bf18      	it	ne
 8006080:	2900      	cmpne	r1, #0
 8006082:	d010      	beq.n	80060a6 <ai_platform_bind_network_params+0x2a>
 8006084:	b178      	cbz	r0, 80060a6 <ai_platform_bind_network_params+0x2a>
 8006086:	4603      	mov	r3, r0
 8006088:	4808      	ldr	r0, [pc, #32]	@ (80060ac <ai_platform_bind_network_params+0x30>)
 800608a:	f103 0c0c 	add.w	ip, r3, #12
 800608e:	f843 0b04 	str.w	r0, [r3], #4
 8006092:	c903      	ldmia	r1, {r0, r1}
 8006094:	e883 0003 	stmia.w	r3, {r0, r1}
 8006098:	2301      	movs	r3, #1
 800609a:	e892 0003 	ldmia.w	r2, {r0, r1}
 800609e:	e88c 0003 	stmia.w	ip, {r0, r1}
 80060a2:	4618      	mov	r0, r3
 80060a4:	4770      	bx	lr
 80060a6:	2300      	movs	r3, #0
 80060a8:	4618      	mov	r0, r3
 80060aa:	4770      	bx	lr
 80060ac:	a1facade 	.word	0xa1facade

080060b0 <ai_platform_network_get_error>:
 80060b0:	4b04      	ldr	r3, [pc, #16]	@ (80060c4 <ai_platform_network_get_error+0x14>)
 80060b2:	6802      	ldr	r2, [r0, #0]
 80060b4:	4393      	bics	r3, r2
 80060b6:	d102      	bne.n	80060be <ai_platform_network_get_error+0xe>
 80060b8:	300c      	adds	r0, #12
 80060ba:	f000 bc33 	b.w	8006924 <core_get_error>
 80060be:	f241 0010 	movw	r0, #4112	@ 0x1010
 80060c2:	4770      	bx	lr
 80060c4:	a1c00100 	.word	0xa1c00100

080060c8 <ai_platform_network_set_error>:
 80060c8:	b110      	cbz	r0, 80060d0 <ai_platform_network_set_error+0x8>
 80060ca:	300c      	adds	r0, #12
 80060cc:	f000 bc30 	b.w	8006930 <core_set_error>
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop

080060d4 <ai_platform_inputs_get>:
 80060d4:	4b3b      	ldr	r3, [pc, #236]	@ (80061c4 <ai_platform_inputs_get+0xf0>)
 80060d6:	6802      	ldr	r2, [r0, #0]
 80060d8:	4393      	bics	r3, r2
 80060da:	d168      	bne.n	80061ae <ai_platform_inputs_get+0xda>
 80060dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80060e0:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80060e2:	b085      	sub	sp, #20
 80060e4:	4605      	mov	r5, r0
 80060e6:	460f      	mov	r7, r1
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d053      	beq.n	8006194 <ai_platform_inputs_get+0xc0>
 80060ec:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 80060f0:	f1bb 0f00 	cmp.w	fp, #0
 80060f4:	d04e      	beq.n	8006194 <ai_platform_inputs_get+0xc0>
 80060f6:	f04f 0a00 	mov.w	sl, #0
 80060fa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80060fe:	4656      	mov	r6, sl
 8006100:	46d1      	mov	r9, sl
 8006102:	46da      	mov	sl, fp
 8006104:	e016      	b.n	8006134 <ai_platform_inputs_get+0x60>
 8006106:	9a01      	ldr	r2, [sp, #4]
 8006108:	2301      	movs	r3, #1
 800610a:	f84b 3002 	str.w	r3, [fp, r2]
 800610e:	69aa      	ldr	r2, [r5, #24]
 8006110:	f04f 0301 	mov.w	r3, #1
 8006114:	6855      	ldr	r5, [r2, #4]
 8006116:	6020      	str	r0, [r4, #0]
 8006118:	3601      	adds	r6, #1
 800611a:	7523      	strb	r3, [r4, #20]
 800611c:	f109 091c 	add.w	r9, r9, #28
 8006120:	6960      	ldr	r0, [r4, #20]
 8006122:	2300      	movs	r3, #0
 8006124:	f368 201f 	bfi	r0, r8, #8, #24
 8006128:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800612c:	e9c4 3503 	strd	r3, r5, [r4, #12]
 8006130:	e9c4 0105 	strd	r0, r1, [r4, #20]
 8006134:	f8ba 3000 	ldrh.w	r3, [sl]
 8006138:	00f2      	lsls	r2, r6, #3
 800613a:	42b3      	cmp	r3, r6
 800613c:	9201      	str	r2, [sp, #4]
 800613e:	d938      	bls.n	80061b2 <ai_platform_inputs_get+0xde>
 8006140:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d034      	beq.n	80061b2 <ai_platform_inputs_get+0xde>
 8006148:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800614c:	2d00      	cmp	r5, #0
 800614e:	d030      	beq.n	80061b2 <ai_platform_inputs_get+0xde>
 8006150:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006154:	69a8      	ldr	r0, [r5, #24]
 8006156:	68e9      	ldr	r1, [r5, #12]
 8006158:	6800      	ldr	r0, [r0, #0]
 800615a:	9100      	str	r1, [sp, #0]
 800615c:	e9d3 4b01 	ldrd	r4, fp, [r3, #4]
 8006160:	68ab      	ldr	r3, [r5, #8]
 8006162:	eb0b 07c6 	add.w	r7, fp, r6, lsl #3
 8006166:	444c      	add	r4, r9
 8006168:	f3c3 2817 	ubfx	r8, r3, #8, #24
 800616c:	f003 f886 	bl	800927c <ai_array_to_buffer_fmt>
 8006170:	69aa      	ldr	r2, [r5, #24]
 8006172:	9900      	ldr	r1, [sp, #0]
 8006174:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006178:	2f00      	cmp	r7, #0
 800617a:	d0c9      	beq.n	8006110 <ai_platform_inputs_get+0x3c>
 800617c:	2200      	movs	r2, #0
 800617e:	f84b 2036 	str.w	r2, [fp, r6, lsl #3]
 8006182:	682a      	ldr	r2, [r5, #0]
 8006184:	607a      	str	r2, [r7, #4]
 8006186:	b112      	cbz	r2, 800618e <ai_platform_inputs_get+0xba>
 8006188:	8852      	ldrh	r2, [r2, #2]
 800618a:	2a00      	cmp	r2, #0
 800618c:	d1bb      	bne.n	8006106 <ai_platform_inputs_get+0x32>
 800618e:	69aa      	ldr	r2, [r5, #24]
 8006190:	2700      	movs	r7, #0
 8006192:	e7bd      	b.n	8006110 <ai_platform_inputs_get+0x3c>
 8006194:	2600      	movs	r6, #0
 8006196:	2218      	movs	r2, #24
 8006198:	2111      	movs	r1, #17
 800619a:	f105 000c 	add.w	r0, r5, #12
 800619e:	f000 fbc7 	bl	8006930 <core_set_error>
 80061a2:	4630      	mov	r0, r6
 80061a4:	b107      	cbz	r7, 80061a8 <ai_platform_inputs_get+0xd4>
 80061a6:	803e      	strh	r6, [r7, #0]
 80061a8:	b005      	add	sp, #20
 80061aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80061ae:	2000      	movs	r0, #0
 80061b0:	4770      	bx	lr
 80061b2:	b2b6      	uxth	r6, r6
 80061b4:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 80061b8:	2e00      	cmp	r6, #0
 80061ba:	d0eb      	beq.n	8006194 <ai_platform_inputs_get+0xc0>
 80061bc:	f8da 3008 	ldr.w	r3, [sl, #8]
 80061c0:	6858      	ldr	r0, [r3, #4]
 80061c2:	e7ef      	b.n	80061a4 <ai_platform_inputs_get+0xd0>
 80061c4:	a1c00100 	.word	0xa1c00100

080061c8 <ai_platform_outputs_get>:
 80061c8:	4b39      	ldr	r3, [pc, #228]	@ (80062b0 <ai_platform_outputs_get+0xe8>)
 80061ca:	6802      	ldr	r2, [r0, #0]
 80061cc:	4393      	bics	r3, r2
 80061ce:	d16d      	bne.n	80062ac <ai_platform_outputs_get+0xe4>
 80061d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80061d4:	8e03      	ldrh	r3, [r0, #48]	@ 0x30
 80061d6:	b085      	sub	sp, #20
 80061d8:	4605      	mov	r5, r0
 80061da:	460f      	mov	r7, r1
 80061dc:	2b01      	cmp	r3, #1
 80061de:	d94f      	bls.n	8006280 <ai_platform_outputs_get+0xb8>
 80061e0:	f04f 0a00 	mov.w	sl, #0
 80061e4:	f8d0 b034 	ldr.w	fp, [r0, #52]	@ 0x34
 80061e8:	4656      	mov	r6, sl
 80061ea:	46d1      	mov	r9, sl
 80061ec:	46da      	mov	sl, fp
 80061ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80061f2:	e016      	b.n	8006222 <ai_platform_outputs_get+0x5a>
 80061f4:	9a01      	ldr	r2, [sp, #4]
 80061f6:	2301      	movs	r3, #1
 80061f8:	f84b 3002 	str.w	r3, [fp, r2]
 80061fc:	69aa      	ldr	r2, [r5, #24]
 80061fe:	f04f 0301 	mov.w	r3, #1
 8006202:	6855      	ldr	r5, [r2, #4]
 8006204:	6020      	str	r0, [r4, #0]
 8006206:	3601      	adds	r6, #1
 8006208:	7523      	strb	r3, [r4, #20]
 800620a:	f109 091c 	add.w	r9, r9, #28
 800620e:	6960      	ldr	r0, [r4, #20]
 8006210:	2300      	movs	r3, #0
 8006212:	f368 201f 	bfi	r0, r8, #8, #24
 8006216:	e9c4 c701 	strd	ip, r7, [r4, #4]
 800621a:	e9c4 3503 	strd	r3, r5, [r4, #12]
 800621e:	e9c4 0105 	strd	r0, r1, [r4, #20]
 8006222:	f8ba 300c 	ldrh.w	r3, [sl, #12]
 8006226:	00f2      	lsls	r2, r6, #3
 8006228:	42b3      	cmp	r3, r6
 800622a:	9201      	str	r2, [sp, #4]
 800622c:	d935      	bls.n	800629a <ai_platform_outputs_get+0xd2>
 800622e:	f8da 3010 	ldr.w	r3, [sl, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d031      	beq.n	800629a <ai_platform_outputs_get+0xd2>
 8006236:	f853 5026 	ldr.w	r5, [r3, r6, lsl #2]
 800623a:	b375      	cbz	r5, 800629a <ai_platform_outputs_get+0xd2>
 800623c:	f8da 3014 	ldr.w	r3, [sl, #20]
 8006240:	69a8      	ldr	r0, [r5, #24]
 8006242:	68e9      	ldr	r1, [r5, #12]
 8006244:	6800      	ldr	r0, [r0, #0]
 8006246:	9100      	str	r1, [sp, #0]
 8006248:	e9d3 4b01 	ldrd	r4, fp, [r3, #4]
 800624c:	68ab      	ldr	r3, [r5, #8]
 800624e:	eb0b 07c6 	add.w	r7, fp, r6, lsl #3
 8006252:	444c      	add	r4, r9
 8006254:	f3c3 2817 	ubfx	r8, r3, #8, #24
 8006258:	f003 f810 	bl	800927c <ai_array_to_buffer_fmt>
 800625c:	69aa      	ldr	r2, [r5, #24]
 800625e:	9900      	ldr	r1, [sp, #0]
 8006260:	f8d2 c008 	ldr.w	ip, [r2, #8]
 8006264:	2f00      	cmp	r7, #0
 8006266:	d0ca      	beq.n	80061fe <ai_platform_outputs_get+0x36>
 8006268:	2200      	movs	r2, #0
 800626a:	f84b 2036 	str.w	r2, [fp, r6, lsl #3]
 800626e:	682a      	ldr	r2, [r5, #0]
 8006270:	607a      	str	r2, [r7, #4]
 8006272:	b112      	cbz	r2, 800627a <ai_platform_outputs_get+0xb2>
 8006274:	8852      	ldrh	r2, [r2, #2]
 8006276:	2a00      	cmp	r2, #0
 8006278:	d1bc      	bne.n	80061f4 <ai_platform_outputs_get+0x2c>
 800627a:	69aa      	ldr	r2, [r5, #24]
 800627c:	2700      	movs	r7, #0
 800627e:	e7be      	b.n	80061fe <ai_platform_outputs_get+0x36>
 8006280:	2600      	movs	r6, #0
 8006282:	2218      	movs	r2, #24
 8006284:	2111      	movs	r1, #17
 8006286:	f105 000c 	add.w	r0, r5, #12
 800628a:	f000 fb51 	bl	8006930 <core_set_error>
 800628e:	4630      	mov	r0, r6
 8006290:	b107      	cbz	r7, 8006294 <ai_platform_outputs_get+0xcc>
 8006292:	803e      	strh	r6, [r7, #0]
 8006294:	b005      	add	sp, #20
 8006296:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800629a:	b2b6      	uxth	r6, r6
 800629c:	e9dd 5702 	ldrd	r5, r7, [sp, #8]
 80062a0:	2e00      	cmp	r6, #0
 80062a2:	d0ed      	beq.n	8006280 <ai_platform_outputs_get+0xb8>
 80062a4:	f8da 3014 	ldr.w	r3, [sl, #20]
 80062a8:	6858      	ldr	r0, [r3, #4]
 80062aa:	e7f1      	b.n	8006290 <ai_platform_outputs_get+0xc8>
 80062ac:	2000      	movs	r0, #0
 80062ae:	4770      	bx	lr
 80062b0:	a1c00100 	.word	0xa1c00100

080062b4 <ai_platform_network_create>:
 80062b4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 80062b8:	b083      	sub	sp, #12
 80062ba:	f89d 8028 	ldrb.w	r8, [sp, #40]	@ 0x28
 80062be:	f89d 902c 	ldrb.w	r9, [sp, #44]	@ 0x2c
 80062c2:	b320      	cbz	r0, 800630e <ai_platform_network_create+0x5a>
 80062c4:	6002      	str	r2, [r0, #0]
 80062c6:	4616      	mov	r6, r2
 80062c8:	461f      	mov	r7, r3
 80062ca:	4604      	mov	r4, r0
 80062cc:	f000 fb28 	bl	8006920 <core_init>
 80062d0:	b970      	cbnz	r0, 80062f0 <ai_platform_network_create+0x3c>
 80062d2:	2530      	movs	r5, #48	@ 0x30
 80062d4:	2300      	movs	r3, #0
 80062d6:	6023      	str	r3, [r4, #0]
 80062d8:	2410      	movs	r4, #16
 80062da:	464a      	mov	r2, r9
 80062dc:	4641      	mov	r1, r8
 80062de:	4638      	mov	r0, r7
 80062e0:	f003 f86e 	bl	80093c0 <ai_version_get>
 80062e4:	60b0      	str	r0, [r6, #8]
 80062e6:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 80062ea:	b003      	add	sp, #12
 80062ec:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80062f0:	2200      	movs	r2, #0
 80062f2:	4641      	mov	r1, r8
 80062f4:	4638      	mov	r0, r7
 80062f6:	f003 f863 	bl	80093c0 <ai_version_get>
 80062fa:	4605      	mov	r5, r0
 80062fc:	2200      	movs	r2, #0
 80062fe:	2105      	movs	r1, #5
 8006300:	2001      	movs	r0, #1
 8006302:	f003 f85d 	bl	80093c0 <ai_version_get>
 8006306:	4285      	cmp	r5, r0
 8006308:	d008      	beq.n	800631c <ai_platform_network_create+0x68>
 800630a:	2501      	movs	r5, #1
 800630c:	e7e2      	b.n	80062d4 <ai_platform_network_create+0x20>
 800630e:	2510      	movs	r5, #16
 8006310:	462c      	mov	r4, r5
 8006312:	ea45 2004 	orr.w	r0, r5, r4, lsl #8
 8006316:	b003      	add	sp, #12
 8006318:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800631c:	4b05      	ldr	r3, [pc, #20]	@ (8006334 <ai_platform_network_create+0x80>)
 800631e:	a801      	add	r0, sp, #4
 8006320:	9301      	str	r3, [sp, #4]
 8006322:	f000 fb11 	bl	8006948 <ai_check_custom_types>
 8006326:	b110      	cbz	r0, 800632e <ai_platform_network_create+0x7a>
 8006328:	2400      	movs	r4, #0
 800632a:	4625      	mov	r5, r4
 800632c:	e7d5      	b.n	80062da <ai_platform_network_create+0x26>
 800632e:	2502      	movs	r5, #2
 8006330:	e7d0      	b.n	80062d4 <ai_platform_network_create+0x20>
 8006332:	bf00      	nop
 8006334:	84048403 	.word	0x84048403

08006338 <ai_platform_network_init>:
 8006338:	4a4e      	ldr	r2, [pc, #312]	@ (8006474 <ai_platform_network_init+0x13c>)
 800633a:	460b      	mov	r3, r1
 800633c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006340:	6801      	ldr	r1, [r0, #0]
 8006342:	ea01 0802 	and.w	r8, r1, r2
 8006346:	438a      	bics	r2, r1
 8006348:	d13b      	bne.n	80063c2 <ai_platform_network_init+0x8a>
 800634a:	4604      	mov	r4, r0
 800634c:	2b00      	cmp	r3, #0
 800634e:	d05b      	beq.n	8006408 <ai_platform_network_init+0xd0>
 8006350:	4a49      	ldr	r2, [pc, #292]	@ (8006478 <ai_platform_network_init+0x140>)
 8006352:	6818      	ldr	r0, [r3, #0]
 8006354:	4290      	cmp	r0, r2
 8006356:	d10a      	bne.n	800636e <ai_platform_network_init+0x36>
 8006358:	4541      	cmp	r1, r8
 800635a:	e9d3 7203 	ldrd	r7, r2, [r3, #12]
 800635e:	e9d3 0301 	ldrd	r0, r3, [r3, #4]
 8006362:	d042      	beq.n	80063ea <ai_platform_network_init+0xb2>
 8006364:	2303      	movs	r3, #3
 8006366:	4620      	mov	r0, r4
 8006368:	6123      	str	r3, [r4, #16]
 800636a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800636e:	461d      	mov	r5, r3
 8006370:	2101      	movs	r1, #1
 8006372:	4618      	mov	r0, r3
 8006374:	f8d3 9004 	ldr.w	r9, [r3, #4]
 8006378:	f105 061c 	add.w	r6, r5, #28
 800637c:	f7ff fd84 	bl	8005e88 <ai_buffer_get_size>
 8006380:	4607      	mov	r7, r0
 8006382:	2101      	movs	r1, #1
 8006384:	4630      	mov	r0, r6
 8006386:	f8d5 a020 	ldr.w	sl, [r5, #32]
 800638a:	f7ff fd7d 	bl	8005e88 <ai_buffer_get_size>
 800638e:	b1d7      	cbz	r7, 80063c6 <ai_platform_network_init+0x8e>
 8006390:	b340      	cbz	r0, 80063e4 <ai_platform_network_init+0xac>
 8006392:	f1ba 0f00 	cmp.w	sl, #0
 8006396:	d030      	beq.n	80063fa <ai_platform_network_init+0xc2>
 8006398:	f04f 0e01 	mov.w	lr, #1
 800639c:	f1b9 0f00 	cmp.w	r9, #0
 80063a0:	d038      	beq.n	8006414 <ai_platform_network_init+0xdc>
 80063a2:	2001      	movs	r0, #1
 80063a4:	4b33      	ldr	r3, [pc, #204]	@ (8006474 <ai_platform_network_init+0x13c>)
 80063a6:	ea4f 470e 	mov.w	r7, lr, lsl #16
 80063aa:	6822      	ldr	r2, [r4, #0]
 80063ac:	429a      	cmp	r2, r3
 80063ae:	d1d9      	bne.n	8006364 <ai_platform_network_init+0x2c>
 80063b0:	8c63      	ldrh	r3, [r4, #34]	@ 0x22
 80063b2:	4283      	cmp	r3, r0
 80063b4:	d235      	bcs.n	8006422 <ai_platform_network_init+0xea>
 80063b6:	2212      	movs	r2, #18
 80063b8:	2116      	movs	r1, #22
 80063ba:	f104 000c 	add.w	r0, r4, #12
 80063be:	f000 fab7 	bl	8006930 <core_set_error>
 80063c2:	2000      	movs	r0, #0
 80063c4:	e7d1      	b.n	800636a <ai_platform_network_init+0x32>
 80063c6:	b138      	cbz	r0, 80063d8 <ai_platform_network_init+0xa0>
 80063c8:	f1ba 0f00 	cmp.w	sl, #0
 80063cc:	d015      	beq.n	80063fa <ai_platform_network_init+0xc2>
 80063ce:	4638      	mov	r0, r7
 80063d0:	f04f 0e01 	mov.w	lr, #1
 80063d4:	463d      	mov	r5, r7
 80063d6:	e7e5      	b.n	80063a4 <ai_platform_network_init+0x6c>
 80063d8:	6823      	ldr	r3, [r4, #0]
 80063da:	4543      	cmp	r3, r8
 80063dc:	d1c2      	bne.n	8006364 <ai_platform_network_init+0x2c>
 80063de:	4607      	mov	r7, r0
 80063e0:	6220      	str	r0, [r4, #32]
 80063e2:	e005      	b.n	80063f0 <ai_platform_network_init+0xb8>
 80063e4:	4606      	mov	r6, r0
 80063e6:	4686      	mov	lr, r0
 80063e8:	e7d8      	b.n	800639c <ai_platform_network_init+0x64>
 80063ea:	e9c4 0308 	strd	r0, r3, [r4, #32]
 80063ee:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80063f0:	4620      	mov	r0, r4
 80063f2:	62a7      	str	r7, [r4, #40]	@ 0x28
 80063f4:	f000 fad0 	bl	8006998 <ai_layers_init_all>
 80063f8:	e7b4      	b.n	8006364 <ai_platform_network_init+0x2c>
 80063fa:	2213      	movs	r2, #19
 80063fc:	2110      	movs	r1, #16
 80063fe:	f104 000c 	add.w	r0, r4, #12
 8006402:	f000 fa95 	bl	8006930 <core_set_error>
 8006406:	e7dc      	b.n	80063c2 <ai_platform_network_init+0x8a>
 8006408:	2211      	movs	r2, #17
 800640a:	2110      	movs	r1, #16
 800640c:	300c      	adds	r0, #12
 800640e:	f000 fa8f 	bl	8006930 <core_set_error>
 8006412:	e7d6      	b.n	80063c2 <ai_platform_network_init+0x8a>
 8006414:	2212      	movs	r2, #18
 8006416:	2110      	movs	r1, #16
 8006418:	f104 000c 	add.w	r0, r4, #12
 800641c:	f000 fa88 	bl	8006930 <core_set_error>
 8006420:	e7cf      	b.n	80063c2 <ai_platform_network_init+0x8a>
 8006422:	b1e0      	cbz	r0, 800645e <ai_platform_network_init+0x126>
 8006424:	46ac      	mov	ip, r5
 8006426:	6a65      	ldr	r5, [r4, #36]	@ 0x24
 8006428:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 800642c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006430:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006432:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006436:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800643a:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 800643c:	f8c4 8020 	str.w	r8, [r4, #32]
 8006440:	4573      	cmp	r3, lr
 8006442:	d310      	bcc.n	8006466 <ai_platform_network_init+0x12e>
 8006444:	f1be 0f00 	cmp.w	lr, #0
 8006448:	d0d2      	beq.n	80063f0 <ai_platform_network_init+0xb8>
 800644a:	46b4      	mov	ip, r6
 800644c:	6ae5      	ldr	r5, [r4, #44]	@ 0x2c
 800644e:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
 8006452:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8006454:	e89c 0007 	ldmia.w	ip, {r0, r1, r2}
 8006458:	e885 0007 	stmia.w	r5, {r0, r1, r2}
 800645c:	e7c8      	b.n	80063f0 <ai_platform_network_init+0xb8>
 800645e:	8d63      	ldrh	r3, [r4, #42]	@ 0x2a
 8006460:	6220      	str	r0, [r4, #32]
 8006462:	4573      	cmp	r3, lr
 8006464:	d2ee      	bcs.n	8006444 <ai_platform_network_init+0x10c>
 8006466:	2213      	movs	r2, #19
 8006468:	2116      	movs	r1, #22
 800646a:	f104 000c 	add.w	r0, r4, #12
 800646e:	f000 fa5f 	bl	8006930 <core_set_error>
 8006472:	e7a6      	b.n	80063c2 <ai_platform_network_init+0x8a>
 8006474:	a1c00100 	.word	0xa1c00100
 8006478:	a1facade 	.word	0xa1facade

0800647c <ai_platform_network_post_init>:
 800647c:	b538      	push	{r3, r4, r5, lr}
 800647e:	4b14      	ldr	r3, [pc, #80]	@ (80064d0 <ai_platform_network_post_init+0x54>)
 8006480:	6802      	ldr	r2, [r0, #0]
 8006482:	ea02 0103 	and.w	r1, r2, r3
 8006486:	4393      	bics	r3, r2
 8006488:	d10c      	bne.n	80064a4 <ai_platform_network_post_init+0x28>
 800648a:	6903      	ldr	r3, [r0, #16]
 800648c:	4604      	mov	r4, r0
 800648e:	079b      	lsls	r3, r3, #30
 8006490:	d503      	bpl.n	800649a <ai_platform_network_post_init+0x1e>
 8006492:	428a      	cmp	r2, r1
 8006494:	d008      	beq.n	80064a8 <ai_platform_network_post_init+0x2c>
 8006496:	2001      	movs	r0, #1
 8006498:	bd38      	pop	{r3, r4, r5, pc}
 800649a:	2210      	movs	r2, #16
 800649c:	2111      	movs	r1, #17
 800649e:	300c      	adds	r0, #12
 80064a0:	f000 fa46 	bl	8006930 <core_set_error>
 80064a4:	2000      	movs	r0, #0
 80064a6:	bd38      	pop	{r3, r4, r5, pc}
 80064a8:	f000 fa86 	bl	80069b8 <ai_layers_post_init_all>
 80064ac:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d0f1      	beq.n	8006496 <ai_platform_network_post_init+0x1a>
 80064b2:	6ba5      	ldr	r5, [r4, #56]	@ 0x38
 80064b4:	2d00      	cmp	r5, #0
 80064b6:	d0ee      	beq.n	8006496 <ai_platform_network_post_init+0x1a>
 80064b8:	4629      	mov	r1, r5
 80064ba:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 80064bc:	2000      	movs	r0, #0
 80064be:	4798      	blx	r3
 80064c0:	692b      	ldr	r3, [r5, #16]
 80064c2:	42ab      	cmp	r3, r5
 80064c4:	461d      	mov	r5, r3
 80064c6:	d0e6      	beq.n	8006496 <ai_platform_network_post_init+0x1a>
 80064c8:	2b00      	cmp	r3, #0
 80064ca:	d0e4      	beq.n	8006496 <ai_platform_network_post_init+0x1a>
 80064cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80064ce:	e7f3      	b.n	80064b8 <ai_platform_network_post_init+0x3c>
 80064d0:	a1c00100 	.word	0xa1c00100

080064d4 <ai_platform_network_process>:
 80064d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80064d8:	4bba      	ldr	r3, [pc, #744]	@ (80067c4 <ai_platform_network_process+0x2f0>)
 80064da:	4691      	mov	r9, r2
 80064dc:	6802      	ldr	r2, [r0, #0]
 80064de:	b085      	sub	sp, #20
 80064e0:	4393      	bics	r3, r2
 80064e2:	f040 812f 	bne.w	8006744 <ai_platform_network_process+0x270>
 80064e6:	6903      	ldr	r3, [r0, #16]
 80064e8:	4604      	mov	r4, r0
 80064ea:	8e02      	ldrh	r2, [r0, #48]	@ 0x30
 80064ec:	f003 0303 	and.w	r3, r3, #3
 80064f0:	2a00      	cmp	r2, #0
 80064f2:	f000 811e 	beq.w	8006732 <ai_platform_network_process+0x25e>
 80064f6:	2200      	movs	r2, #0
 80064f8:	2b03      	cmp	r3, #3
 80064fa:	f8d0 a034 	ldr.w	sl, [r0, #52]	@ 0x34
 80064fe:	6182      	str	r2, [r0, #24]
 8006500:	f040 811a 	bne.w	8006738 <ai_platform_network_process+0x264>
 8006504:	2900      	cmp	r1, #0
 8006506:	f000 8128 	beq.w	800675a <ai_platform_network_process+0x286>
 800650a:	faba f78a 	clz	r7, sl
 800650e:	097f      	lsrs	r7, r7, #5
 8006510:	f1ba 0f00 	cmp.w	sl, #0
 8006514:	f000 8121 	beq.w	800675a <ai_platform_network_process+0x286>
 8006518:	f8ba 3000 	ldrh.w	r3, [sl]
 800651c:	2b00      	cmp	r3, #0
 800651e:	f000 811c 	beq.w	800675a <ai_platform_network_process+0x286>
 8006522:	698b      	ldr	r3, [r1, #24]
 8006524:	460d      	mov	r5, r1
 8006526:	f8cd 900c 	str.w	r9, [sp, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	e9cd 3001 	strd	r3, r0, [sp, #4]
 8006530:	f8da 3004 	ldr.w	r3, [sl, #4]
 8006534:	2b00      	cmp	r3, #0
 8006536:	d072      	beq.n	800661e <ai_platform_network_process+0x14a>
 8006538:	f853 6027 	ldr.w	r6, [r3, r7, lsl #2]
 800653c:	2e00      	cmp	r6, #0
 800653e:	d06e      	beq.n	800661e <ai_platform_network_process+0x14a>
 8006540:	f8da 3008 	ldr.w	r3, [sl, #8]
 8006544:	ea4f 1907 	mov.w	r9, r7, lsl #4
 8006548:	f8d3 b000 	ldr.w	fp, [r3]
 800654c:	eb1b 1807 	adds.w	r8, fp, r7, lsl #4
 8006550:	f000 8102 	beq.w	8006758 <ai_platform_network_process+0x284>
 8006554:	69b3      	ldr	r3, [r6, #24]
 8006556:	2101      	movs	r1, #1
 8006558:	4628      	mov	r0, r5
 800655a:	685c      	ldr	r4, [r3, #4]
 800655c:	f7ff fc94 	bl	8005e88 <ai_buffer_get_size>
 8006560:	4284      	cmp	r4, r0
 8006562:	f0c0 8101 	bcc.w	8006768 <ai_platform_network_process+0x294>
 8006566:	68f0      	ldr	r0, [r6, #12]
 8006568:	69a9      	ldr	r1, [r5, #24]
 800656a:	68c2      	ldr	r2, [r0, #12]
 800656c:	68cb      	ldr	r3, [r1, #12]
 800656e:	429a      	cmp	r2, r3
 8006570:	f040 80fa 	bne.w	8006768 <ai_platform_network_process+0x294>
 8006574:	6882      	ldr	r2, [r0, #8]
 8006576:	688b      	ldr	r3, [r1, #8]
 8006578:	429a      	cmp	r2, r3
 800657a:	f040 80f5 	bne.w	8006768 <ai_platform_network_process+0x294>
 800657e:	6842      	ldr	r2, [r0, #4]
 8006580:	684b      	ldr	r3, [r1, #4]
 8006582:	429a      	cmp	r2, r3
 8006584:	f040 80f0 	bne.w	8006768 <ai_platform_network_process+0x294>
 8006588:	69b3      	ldr	r3, [r6, #24]
 800658a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800658e:	f002 ff07 	bl	80093a0 <ai_array_get_data_byte_size>
 8006592:	4604      	mov	r4, r0
 8006594:	4630      	mov	r0, r6
 8006596:	f002 ff19 	bl	80093cc <get_tensor_byte_size>
 800659a:	4284      	cmp	r4, r0
 800659c:	f0c0 80e4 	bcc.w	8006768 <ai_platform_network_process+0x294>
 80065a0:	69b3      	ldr	r3, [r6, #24]
 80065a2:	6818      	ldr	r0, [r3, #0]
 80065a4:	f002 fe6a 	bl	800927c <ai_array_to_buffer_fmt>
 80065a8:	682b      	ldr	r3, [r5, #0]
 80065aa:	4058      	eors	r0, r3
 80065ac:	f030 437e 	bics.w	r3, r0, #4261412864	@ 0xfe000000
 80065b0:	f040 8192 	bne.w	80068d8 <ai_platform_network_process+0x404>
 80065b4:	686b      	ldr	r3, [r5, #4]
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	f000 80ce 	beq.w	8006758 <ai_platform_network_process+0x284>
 80065bc:	69ab      	ldr	r3, [r5, #24]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	2b00      	cmp	r3, #0
 80065c2:	f000 8181 	beq.w	80068c8 <ai_platform_network_process+0x3f4>
 80065c6:	9a01      	ldr	r2, [sp, #4]
 80065c8:	4630      	mov	r0, r6
 80065ca:	3701      	adds	r7, #1
 80065cc:	351c      	adds	r5, #28
 80065ce:	429a      	cmp	r2, r3
 80065d0:	bf38      	it	cc
 80065d2:	461a      	movcc	r2, r3
 80065d4:	9201      	str	r2, [sp, #4]
 80065d6:	f002 fef9 	bl	80093cc <get_tensor_byte_size>
 80065da:	f8c8 0008 	str.w	r0, [r8, #8]
 80065de:	f855 3c04 	ldr.w	r3, [r5, #-4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	fb00 f303 	mul.w	r3, r0, r3
 80065e8:	f8c8 300c 	str.w	r3, [r8, #12]
 80065ec:	f855 1c18 	ldr.w	r1, [r5, #-24]
 80065f0:	440b      	add	r3, r1
 80065f2:	f8c8 1004 	str.w	r1, [r8, #4]
 80065f6:	f84b 3009 	str.w	r3, [fp, r9]
 80065fa:	69b0      	ldr	r0, [r6, #24]
 80065fc:	6803      	ldr	r3, [r0, #0]
 80065fe:	009a      	lsls	r2, r3, #2
 8006600:	f100 80a4 	bmi.w	800674c <ai_platform_network_process+0x278>
 8006604:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 8006608:	1a9b      	subs	r3, r3, r2
 800660a:	4419      	add	r1, r3
 800660c:	6081      	str	r1, [r0, #8]
 800660e:	69b3      	ldr	r3, [r6, #24]
 8006610:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006614:	60da      	str	r2, [r3, #12]
 8006616:	f8ba 3000 	ldrh.w	r3, [sl]
 800661a:	42bb      	cmp	r3, r7
 800661c:	d888      	bhi.n	8006530 <ai_platform_network_process+0x5c>
 800661e:	e9dd 4902 	ldrd	r4, r9, [sp, #8]
 8006622:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 8006624:	f1b9 0f00 	cmp.w	r9, #0
 8006628:	f000 815e 	beq.w	80068e8 <ai_platform_network_process+0x414>
 800662c:	2a01      	cmp	r2, #1
 800662e:	f240 80a4 	bls.w	800677a <ai_platform_network_process+0x2a6>
 8006632:	f8d4 8034 	ldr.w	r8, [r4, #52]	@ 0x34
 8006636:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800663a:	2b00      	cmp	r3, #0
 800663c:	f000 809d 	beq.w	800677a <ai_platform_network_process+0x2a6>
 8006640:	464e      	mov	r6, r9
 8006642:	2700      	movs	r7, #0
 8006644:	9402      	str	r4, [sp, #8]
 8006646:	f8d8 3010 	ldr.w	r3, [r8, #16]
 800664a:	2b00      	cmp	r3, #0
 800664c:	f000 80a1 	beq.w	8006792 <ai_platform_network_process+0x2be>
 8006650:	f853 5027 	ldr.w	r5, [r3, r7, lsl #2]
 8006654:	2d00      	cmp	r5, #0
 8006656:	f000 809c 	beq.w	8006792 <ai_platform_network_process+0x2be>
 800665a:	f8d8 3014 	ldr.w	r3, [r8, #20]
 800665e:	ea4f 1b07 	mov.w	fp, r7, lsl #4
 8006662:	f8d3 9000 	ldr.w	r9, [r3]
 8006666:	eb19 1a07 	adds.w	sl, r9, r7, lsl #4
 800666a:	f000 8150 	beq.w	800690e <ai_platform_network_process+0x43a>
 800666e:	69ab      	ldr	r3, [r5, #24]
 8006670:	2101      	movs	r1, #1
 8006672:	4630      	mov	r0, r6
 8006674:	685c      	ldr	r4, [r3, #4]
 8006676:	f7ff fc07 	bl	8005e88 <ai_buffer_get_size>
 800667a:	4284      	cmp	r4, r0
 800667c:	d37c      	bcc.n	8006778 <ai_platform_network_process+0x2a4>
 800667e:	68e8      	ldr	r0, [r5, #12]
 8006680:	69b1      	ldr	r1, [r6, #24]
 8006682:	68c2      	ldr	r2, [r0, #12]
 8006684:	68cb      	ldr	r3, [r1, #12]
 8006686:	429a      	cmp	r2, r3
 8006688:	d176      	bne.n	8006778 <ai_platform_network_process+0x2a4>
 800668a:	6882      	ldr	r2, [r0, #8]
 800668c:	688b      	ldr	r3, [r1, #8]
 800668e:	429a      	cmp	r2, r3
 8006690:	d172      	bne.n	8006778 <ai_platform_network_process+0x2a4>
 8006692:	6842      	ldr	r2, [r0, #4]
 8006694:	684b      	ldr	r3, [r1, #4]
 8006696:	429a      	cmp	r2, r3
 8006698:	d16e      	bne.n	8006778 <ai_platform_network_process+0x2a4>
 800669a:	69ab      	ldr	r3, [r5, #24]
 800669c:	e9d3 0100 	ldrd	r0, r1, [r3]
 80066a0:	f002 fe7e 	bl	80093a0 <ai_array_get_data_byte_size>
 80066a4:	9003      	str	r0, [sp, #12]
 80066a6:	4628      	mov	r0, r5
 80066a8:	f002 fe90 	bl	80093cc <get_tensor_byte_size>
 80066ac:	9b03      	ldr	r3, [sp, #12]
 80066ae:	4283      	cmp	r3, r0
 80066b0:	d362      	bcc.n	8006778 <ai_platform_network_process+0x2a4>
 80066b2:	69ab      	ldr	r3, [r5, #24]
 80066b4:	6818      	ldr	r0, [r3, #0]
 80066b6:	f002 fde1 	bl	800927c <ai_array_to_buffer_fmt>
 80066ba:	6833      	ldr	r3, [r6, #0]
 80066bc:	4043      	eors	r3, r0
 80066be:	f033 437e 	bics.w	r3, r3, #4261412864	@ 0xfe000000
 80066c2:	f040 8114 	bne.w	80068ee <ai_platform_network_process+0x41a>
 80066c6:	6873      	ldr	r3, [r6, #4]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	f000 8120 	beq.w	800690e <ai_platform_network_process+0x43a>
 80066ce:	69b3      	ldr	r3, [r6, #24]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	f000 8113 	beq.w	80068fe <ai_platform_network_process+0x42a>
 80066d8:	9a01      	ldr	r2, [sp, #4]
 80066da:	4628      	mov	r0, r5
 80066dc:	3701      	adds	r7, #1
 80066de:	361c      	adds	r6, #28
 80066e0:	429a      	cmp	r2, r3
 80066e2:	bf38      	it	cc
 80066e4:	461a      	movcc	r2, r3
 80066e6:	9201      	str	r2, [sp, #4]
 80066e8:	f002 fe70 	bl	80093cc <get_tensor_byte_size>
 80066ec:	f8ca 0008 	str.w	r0, [sl, #8]
 80066f0:	4603      	mov	r3, r0
 80066f2:	f856 2c04 	ldr.w	r2, [r6, #-4]
 80066f6:	6812      	ldr	r2, [r2, #0]
 80066f8:	fb02 f303 	mul.w	r3, r2, r3
 80066fc:	f8ca 300c 	str.w	r3, [sl, #12]
 8006700:	f856 1c18 	ldr.w	r1, [r6, #-24]
 8006704:	440b      	add	r3, r1
 8006706:	f8ca 1004 	str.w	r1, [sl, #4]
 800670a:	f849 300b 	str.w	r3, [r9, fp]
 800670e:	69a8      	ldr	r0, [r5, #24]
 8006710:	6803      	ldr	r3, [r0, #0]
 8006712:	009b      	lsls	r3, r3, #2
 8006714:	d438      	bmi.n	8006788 <ai_platform_network_process+0x2b4>
 8006716:	e9d0 3202 	ldrd	r3, r2, [r0, #8]
 800671a:	1a9b      	subs	r3, r3, r2
 800671c:	4419      	add	r1, r3
 800671e:	6081      	str	r1, [r0, #8]
 8006720:	69ab      	ldr	r3, [r5, #24]
 8006722:	f8da 2004 	ldr.w	r2, [sl, #4]
 8006726:	60da      	str	r2, [r3, #12]
 8006728:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800672c:	429f      	cmp	r7, r3
 800672e:	d38a      	bcc.n	8006646 <ai_platform_network_process+0x172>
 8006730:	e02f      	b.n	8006792 <ai_platform_network_process+0x2be>
 8006732:	2b03      	cmp	r3, #3
 8006734:	6182      	str	r2, [r0, #24]
 8006736:	d010      	beq.n	800675a <ai_platform_network_process+0x286>
 8006738:	2230      	movs	r2, #48	@ 0x30
 800673a:	2111      	movs	r1, #17
 800673c:	f104 000c 	add.w	r0, r4, #12
 8006740:	f000 f8f6 	bl	8006930 <core_set_error>
 8006744:	2000      	movs	r0, #0
 8006746:	b005      	add	sp, #20
 8006748:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800674c:	f8ba 3000 	ldrh.w	r3, [sl]
 8006750:	429f      	cmp	r7, r3
 8006752:	f4ff aeed 	bcc.w	8006530 <ai_platform_network_process+0x5c>
 8006756:	e762      	b.n	800661e <ai_platform_network_process+0x14a>
 8006758:	9c02      	ldr	r4, [sp, #8]
 800675a:	2217      	movs	r2, #23
 800675c:	2112      	movs	r1, #18
 800675e:	f104 000c 	add.w	r0, r4, #12
 8006762:	f000 f8e5 	bl	8006930 <core_set_error>
 8006766:	e7ed      	b.n	8006744 <ai_platform_network_process+0x270>
 8006768:	9c02      	ldr	r4, [sp, #8]
 800676a:	2218      	movs	r2, #24
 800676c:	2112      	movs	r1, #18
 800676e:	f104 000c 	add.w	r0, r4, #12
 8006772:	f000 f8dd 	bl	8006930 <core_set_error>
 8006776:	e7e5      	b.n	8006744 <ai_platform_network_process+0x270>
 8006778:	9c02      	ldr	r4, [sp, #8]
 800677a:	2218      	movs	r2, #24
 800677c:	2113      	movs	r1, #19
 800677e:	f104 000c 	add.w	r0, r4, #12
 8006782:	f000 f8d5 	bl	8006930 <core_set_error>
 8006786:	e7dd      	b.n	8006744 <ai_platform_network_process+0x270>
 8006788:	f8b8 300c 	ldrh.w	r3, [r8, #12]
 800678c:	429f      	cmp	r7, r3
 800678e:	f4ff af5a 	bcc.w	8006646 <ai_platform_network_process+0x172>
 8006792:	9c02      	ldr	r4, [sp, #8]
 8006794:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 8006798:	8e22      	ldrh	r2, [r4, #48]	@ 0x30
 800679a:	8323      	strh	r3, [r4, #24]
 800679c:	2a00      	cmp	r2, #0
 800679e:	f000 808d 	beq.w	80068bc <ai_platform_network_process+0x3e8>
 80067a2:	2a01      	cmp	r2, #1
 80067a4:	6b67      	ldr	r7, [r4, #52]	@ 0x34
 80067a6:	f000 808c 	beq.w	80068c2 <ai_platform_network_process+0x3ee>
 80067aa:	f107 080c 	add.w	r8, r7, #12
 80067ae:	8b60      	ldrh	r0, [r4, #26]
 80067b0:	4283      	cmp	r3, r0
 80067b2:	d9c8      	bls.n	8006746 <ai_platform_network_process+0x272>
 80067b4:	4646      	mov	r6, r8
 80067b6:	46a3      	mov	fp, r4
 80067b8:	2f00      	cmp	r7, #0
 80067ba:	d031      	beq.n	8006820 <ai_platform_network_process+0x34c>
 80067bc:	f04f 0800 	mov.w	r8, #0
 80067c0:	e015      	b.n	80067ee <ai_platform_network_process+0x31a>
 80067c2:	bf00      	nop
 80067c4:	a1c00100 	.word	0xa1c00100
 80067c8:	68dc      	ldr	r4, [r3, #12]
 80067ca:	1b09      	subs	r1, r1, r4
 80067cc:	4408      	add	r0, r1
 80067ce:	6098      	str	r0, [r3, #8]
 80067d0:	6993      	ldr	r3, [r2, #24]
 80067d2:	686a      	ldr	r2, [r5, #4]
 80067d4:	60da      	str	r2, [r3, #12]
 80067d6:	f859 200a 	ldr.w	r2, [r9, sl]
 80067da:	f108 0801 	add.w	r8, r8, #1
 80067de:	e9d5 3101 	ldrd	r3, r1, [r5, #4]
 80067e2:	440b      	add	r3, r1
 80067e4:	4293      	cmp	r3, r2
 80067e6:	d301      	bcc.n	80067ec <ai_platform_network_process+0x318>
 80067e8:	68eb      	ldr	r3, [r5, #12]
 80067ea:	1ad3      	subs	r3, r2, r3
 80067ec:	606b      	str	r3, [r5, #4]
 80067ee:	883b      	ldrh	r3, [r7, #0]
 80067f0:	ea4f 1a08 	mov.w	sl, r8, lsl #4
 80067f4:	4543      	cmp	r3, r8
 80067f6:	d913      	bls.n	8006820 <ai_platform_network_process+0x34c>
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	b18b      	cbz	r3, 8006820 <ai_platform_network_process+0x34c>
 80067fc:	f853 2028 	ldr.w	r2, [r3, r8, lsl #2]
 8006800:	b172      	cbz	r2, 8006820 <ai_platform_network_process+0x34c>
 8006802:	68b9      	ldr	r1, [r7, #8]
 8006804:	6993      	ldr	r3, [r2, #24]
 8006806:	f8d1 9000 	ldr.w	r9, [r1]
 800680a:	681c      	ldr	r4, [r3, #0]
 800680c:	eb09 1508 	add.w	r5, r9, r8, lsl #4
 8006810:	6899      	ldr	r1, [r3, #8]
 8006812:	00a4      	lsls	r4, r4, #2
 8006814:	6868      	ldr	r0, [r5, #4]
 8006816:	d5d7      	bpl.n	80067c8 <ai_platform_network_process+0x2f4>
 8006818:	68aa      	ldr	r2, [r5, #8]
 800681a:	f002 fc7d 	bl	8009118 <st_int8_copy>
 800681e:	e7da      	b.n	80067d6 <ai_platform_network_process+0x302>
 8006820:	4658      	mov	r0, fp
 8006822:	f000 f8e1 	bl	80069e8 <ai_layers_forward_all>
 8006826:	2e00      	cmp	r6, #0
 8006828:	d03b      	beq.n	80068a2 <ai_platform_network_process+0x3ce>
 800682a:	2500      	movs	r5, #0
 800682c:	e014      	b.n	8006858 <ai_platform_network_process+0x384>
 800682e:	4411      	add	r1, r2
 8006830:	f859 300a 	ldr.w	r3, [r9, sl]
 8006834:	4299      	cmp	r1, r3
 8006836:	d302      	bcc.n	800683e <ai_platform_network_process+0x36a>
 8006838:	f8d8 100c 	ldr.w	r1, [r8, #12]
 800683c:	1a59      	subs	r1, r3, r1
 800683e:	f8c8 1004 	str.w	r1, [r8, #4]
 8006842:	6982      	ldr	r2, [r0, #24]
 8006844:	e9d2 3402 	ldrd	r3, r4, [r2, #8]
 8006848:	1b1b      	subs	r3, r3, r4
 800684a:	4419      	add	r1, r3
 800684c:	6091      	str	r1, [r2, #8]
 800684e:	6983      	ldr	r3, [r0, #24]
 8006850:	f8d8 2004 	ldr.w	r2, [r8, #4]
 8006854:	60da      	str	r2, [r3, #12]
 8006856:	3501      	adds	r5, #1
 8006858:	8833      	ldrh	r3, [r6, #0]
 800685a:	42ab      	cmp	r3, r5
 800685c:	d921      	bls.n	80068a2 <ai_platform_network_process+0x3ce>
 800685e:	6873      	ldr	r3, [r6, #4]
 8006860:	b1fb      	cbz	r3, 80068a2 <ai_platform_network_process+0x3ce>
 8006862:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006866:	b1e0      	cbz	r0, 80068a2 <ai_platform_network_process+0x3ce>
 8006868:	68b2      	ldr	r2, [r6, #8]
 800686a:	ea4f 1a05 	mov.w	sl, r5, lsl #4
 800686e:	6983      	ldr	r3, [r0, #24]
 8006870:	f8d2 9000 	ldr.w	r9, [r2]
 8006874:	681c      	ldr	r4, [r3, #0]
 8006876:	eb09 1805 	add.w	r8, r9, r5, lsl #4
 800687a:	00a4      	lsls	r4, r4, #2
 800687c:	e9d8 1201 	ldrd	r1, r2, [r8, #4]
 8006880:	d5d5      	bpl.n	800682e <ai_platform_network_process+0x35a>
 8006882:	6898      	ldr	r0, [r3, #8]
 8006884:	f002 fc48 	bl	8009118 <st_int8_copy>
 8006888:	f859 200a 	ldr.w	r2, [r9, sl]
 800688c:	e9d8 3101 	ldrd	r3, r1, [r8, #4]
 8006890:	440b      	add	r3, r1
 8006892:	4293      	cmp	r3, r2
 8006894:	d302      	bcc.n	800689c <ai_platform_network_process+0x3c8>
 8006896:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800689a:	1ad3      	subs	r3, r2, r3
 800689c:	f8c8 3004 	str.w	r3, [r8, #4]
 80068a0:	e7d9      	b.n	8006856 <ai_platform_network_process+0x382>
 80068a2:	f8bb 001a 	ldrh.w	r0, [fp, #26]
 80068a6:	f8bb 3018 	ldrh.w	r3, [fp, #24]
 80068aa:	3001      	adds	r0, #1
 80068ac:	b280      	uxth	r0, r0
 80068ae:	4283      	cmp	r3, r0
 80068b0:	f8ab 001a 	strh.w	r0, [fp, #26]
 80068b4:	d880      	bhi.n	80067b8 <ai_platform_network_process+0x2e4>
 80068b6:	b005      	add	sp, #20
 80068b8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80068bc:	4617      	mov	r7, r2
 80068be:	4690      	mov	r8, r2
 80068c0:	e775      	b.n	80067ae <ai_platform_network_process+0x2da>
 80068c2:	f04f 0800 	mov.w	r8, #0
 80068c6:	e772      	b.n	80067ae <ai_platform_network_process+0x2da>
 80068c8:	9c02      	ldr	r4, [sp, #8]
 80068ca:	2221      	movs	r2, #33	@ 0x21
 80068cc:	2112      	movs	r1, #18
 80068ce:	f104 000c 	add.w	r0, r4, #12
 80068d2:	f000 f82d 	bl	8006930 <core_set_error>
 80068d6:	e735      	b.n	8006744 <ai_platform_network_process+0x270>
 80068d8:	9c02      	ldr	r4, [sp, #8]
 80068da:	2219      	movs	r2, #25
 80068dc:	2112      	movs	r1, #18
 80068de:	f104 000c 	add.w	r0, r4, #12
 80068e2:	f000 f825 	bl	8006930 <core_set_error>
 80068e6:	e72d      	b.n	8006744 <ai_platform_network_process+0x270>
 80068e8:	f8bd 3004 	ldrh.w	r3, [sp, #4]
 80068ec:	e755      	b.n	800679a <ai_platform_network_process+0x2c6>
 80068ee:	9c02      	ldr	r4, [sp, #8]
 80068f0:	2219      	movs	r2, #25
 80068f2:	2113      	movs	r1, #19
 80068f4:	f104 000c 	add.w	r0, r4, #12
 80068f8:	f000 f81a 	bl	8006930 <core_set_error>
 80068fc:	e722      	b.n	8006744 <ai_platform_network_process+0x270>
 80068fe:	9c02      	ldr	r4, [sp, #8]
 8006900:	2221      	movs	r2, #33	@ 0x21
 8006902:	2113      	movs	r1, #19
 8006904:	f104 000c 	add.w	r0, r4, #12
 8006908:	f000 f812 	bl	8006930 <core_set_error>
 800690c:	e71a      	b.n	8006744 <ai_platform_network_process+0x270>
 800690e:	9c02      	ldr	r4, [sp, #8]
 8006910:	2217      	movs	r2, #23
 8006912:	2113      	movs	r1, #19
 8006914:	f104 000c 	add.w	r0, r4, #12
 8006918:	f000 f80a 	bl	8006930 <core_set_error>
 800691c:	e712      	b.n	8006744 <ai_platform_network_process+0x270>
 800691e:	bf00      	nop

08006920 <core_init>:
 8006920:	2001      	movs	r0, #1
 8006922:	4770      	bx	lr

08006924 <core_get_error>:
 8006924:	4603      	mov	r3, r0
 8006926:	2200      	movs	r2, #0
 8006928:	6800      	ldr	r0, [r0, #0]
 800692a:	601a      	str	r2, [r3, #0]
 800692c:	4770      	bx	lr
 800692e:	bf00      	nop

08006930 <core_set_error>:
 8006930:	4603      	mov	r3, r0
 8006932:	7800      	ldrb	r0, [r0, #0]
 8006934:	b108      	cbz	r0, 800693a <core_set_error+0xa>
 8006936:	2000      	movs	r0, #0
 8006938:	4770      	bx	lr
 800693a:	7019      	strb	r1, [r3, #0]
 800693c:	2001      	movs	r0, #1
 800693e:	6819      	ldr	r1, [r3, #0]
 8006940:	f362 211f 	bfi	r1, r2, #8, #24
 8006944:	6019      	str	r1, [r3, #0]
 8006946:	4770      	bx	lr

08006948 <ai_check_custom_types>:
 8006948:	b082      	sub	sp, #8
 800694a:	4b12      	ldr	r3, [pc, #72]	@ (8006994 <ai_check_custom_types+0x4c>)
 800694c:	9301      	str	r3, [sp, #4]
 800694e:	b118      	cbz	r0, 8006958 <ai_check_custom_types+0x10>
 8006950:	7803      	ldrb	r3, [r0, #0]
 8006952:	2b03      	cmp	r3, #3
 8006954:	d002      	beq.n	800695c <ai_check_custom_types+0x14>
 8006956:	2000      	movs	r0, #0
 8006958:	b002      	add	sp, #8
 800695a:	4770      	bx	lr
 800695c:	f89d 2004 	ldrb.w	r2, [sp, #4]
 8006960:	4293      	cmp	r3, r2
 8006962:	d004      	beq.n	800696e <ai_check_custom_types+0x26>
 8006964:	2001      	movs	r0, #1
 8006966:	f080 0001 	eor.w	r0, r0, #1
 800696a:	b002      	add	sp, #8
 800696c:	4770      	bx	lr
 800696e:	7842      	ldrb	r2, [r0, #1]
 8006970:	3001      	adds	r0, #1
 8006972:	f89d 3005 	ldrb.w	r3, [sp, #5]
 8006976:	429a      	cmp	r2, r3
 8006978:	d1f4      	bne.n	8006964 <ai_check_custom_types+0x1c>
 800697a:	f810 2f01 	ldrb.w	r2, [r0, #1]!
 800697e:	f89d 3006 	ldrb.w	r3, [sp, #6]
 8006982:	429a      	cmp	r2, r3
 8006984:	d1ee      	bne.n	8006964 <ai_check_custom_types+0x1c>
 8006986:	7842      	ldrb	r2, [r0, #1]
 8006988:	f89d 3007 	ldrb.w	r3, [sp, #7]
 800698c:	429a      	cmp	r2, r3
 800698e:	d1e9      	bne.n	8006964 <ai_check_custom_types+0x1c>
 8006990:	2000      	movs	r0, #0
 8006992:	e7e8      	b.n	8006966 <ai_check_custom_types+0x1e>
 8006994:	84048403 	.word	0x84048403

08006998 <ai_layers_init_all>:
 8006998:	6b83      	ldr	r3, [r0, #56]	@ 0x38
 800699a:	4601      	mov	r1, r0
 800699c:	b14b      	cbz	r3, 80069b2 <ai_layers_init_all+0x1a>
 800699e:	2000      	movs	r0, #0
 80069a0:	461a      	mov	r2, r3
 80069a2:	60d9      	str	r1, [r3, #12]
 80069a4:	691b      	ldr	r3, [r3, #16]
 80069a6:	3001      	adds	r0, #1
 80069a8:	4293      	cmp	r3, r2
 80069aa:	d003      	beq.n	80069b4 <ai_layers_init_all+0x1c>
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d1f7      	bne.n	80069a0 <ai_layers_init_all+0x8>
 80069b0:	4770      	bx	lr
 80069b2:	4618      	mov	r0, r3
 80069b4:	4770      	bx	lr
 80069b6:	bf00      	nop

080069b8 <ai_layers_post_init_all>:
 80069b8:	b538      	push	{r3, r4, r5, lr}
 80069ba:	6b84      	ldr	r4, [r0, #56]	@ 0x38
 80069bc:	b184      	cbz	r4, 80069e0 <ai_layers_post_init_all+0x28>
 80069be:	2500      	movs	r5, #0
 80069c0:	6863      	ldr	r3, [r4, #4]
 80069c2:	07db      	lsls	r3, r3, #31
 80069c4:	d504      	bpl.n	80069d0 <ai_layers_post_init_all+0x18>
 80069c6:	6a23      	ldr	r3, [r4, #32]
 80069c8:	4620      	mov	r0, r4
 80069ca:	b10b      	cbz	r3, 80069d0 <ai_layers_post_init_all+0x18>
 80069cc:	3501      	adds	r5, #1
 80069ce:	4798      	blx	r3
 80069d0:	6923      	ldr	r3, [r4, #16]
 80069d2:	42a3      	cmp	r3, r4
 80069d4:	461c      	mov	r4, r3
 80069d6:	d001      	beq.n	80069dc <ai_layers_post_init_all+0x24>
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f1      	bne.n	80069c0 <ai_layers_post_init_all+0x8>
 80069dc:	4628      	mov	r0, r5
 80069de:	bd38      	pop	{r3, r4, r5, pc}
 80069e0:	4625      	mov	r5, r4
 80069e2:	4628      	mov	r0, r5
 80069e4:	bd38      	pop	{r3, r4, r5, pc}
 80069e6:	bf00      	nop

080069e8 <ai_layers_forward_all>:
 80069e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80069ec:	6b85      	ldr	r5, [r0, #56]	@ 0x38
 80069ee:	4604      	mov	r4, r0
 80069f0:	f8d0 8040 	ldr.w	r8, [r0, #64]	@ 0x40
 80069f4:	63c5      	str	r5, [r0, #60]	@ 0x3c
 80069f6:	f1b8 0f00 	cmp.w	r8, #0
 80069fa:	d029      	beq.n	8006a50 <ai_layers_forward_all+0x68>
 80069fc:	b325      	cbz	r5, 8006a48 <ai_layers_forward_all+0x60>
 80069fe:	6c42      	ldr	r2, [r0, #68]	@ 0x44
 8006a00:	4629      	mov	r1, r5
 8006a02:	2001      	movs	r0, #1
 8006a04:	47c0      	blx	r8
 8006a06:	6be6      	ldr	r6, [r4, #60]	@ 0x3c
 8006a08:	b1f6      	cbz	r6, 8006a48 <ai_layers_forward_all+0x60>
 8006a0a:	2700      	movs	r7, #0
 8006a0c:	4631      	mov	r1, r6
 8006a0e:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006a10:	2002      	movs	r0, #2
 8006a12:	47c0      	blx	r8
 8006a14:	6be5      	ldr	r5, [r4, #60]	@ 0x3c
 8006a16:	4628      	mov	r0, r5
 8006a18:	696b      	ldr	r3, [r5, #20]
 8006a1a:	4798      	blx	r3
 8006a1c:	692e      	ldr	r6, [r5, #16]
 8006a1e:	2003      	movs	r0, #3
 8006a20:	6c62      	ldr	r2, [r4, #68]	@ 0x44
 8006a22:	42b5      	cmp	r5, r6
 8006a24:	6be1      	ldr	r1, [r4, #60]	@ 0x3c
 8006a26:	d007      	beq.n	8006a38 <ai_layers_forward_all+0x50>
 8006a28:	47c0      	blx	r8
 8006a2a:	3701      	adds	r7, #1
 8006a2c:	63e6      	str	r6, [r4, #60]	@ 0x3c
 8006a2e:	2e00      	cmp	r6, #0
 8006a30:	d1ec      	bne.n	8006a0c <ai_layers_forward_all+0x24>
 8006a32:	4638      	mov	r0, r7
 8006a34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a38:	2003      	movs	r0, #3
 8006a3a:	3701      	adds	r7, #1
 8006a3c:	47c0      	blx	r8
 8006a3e:	2300      	movs	r3, #0
 8006a40:	4638      	mov	r0, r7
 8006a42:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006a44:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a48:	2700      	movs	r7, #0
 8006a4a:	4638      	mov	r0, r7
 8006a4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a50:	2d00      	cmp	r5, #0
 8006a52:	d0f9      	beq.n	8006a48 <ai_layers_forward_all+0x60>
 8006a54:	4647      	mov	r7, r8
 8006a56:	696b      	ldr	r3, [r5, #20]
 8006a58:	4628      	mov	r0, r5
 8006a5a:	4798      	blx	r3
 8006a5c:	462b      	mov	r3, r5
 8006a5e:	692d      	ldr	r5, [r5, #16]
 8006a60:	429d      	cmp	r5, r3
 8006a62:	d004      	beq.n	8006a6e <ai_layers_forward_all+0x86>
 8006a64:	3701      	adds	r7, #1
 8006a66:	63e5      	str	r5, [r4, #60]	@ 0x3c
 8006a68:	2d00      	cmp	r5, #0
 8006a6a:	d1f4      	bne.n	8006a56 <ai_layers_forward_all+0x6e>
 8006a6c:	e7e1      	b.n	8006a32 <ai_layers_forward_all+0x4a>
 8006a6e:	2300      	movs	r3, #0
 8006a70:	3701      	adds	r7, #1
 8006a72:	63e3      	str	r3, [r4, #60]	@ 0x3c
 8006a74:	e7dd      	b.n	8006a32 <ai_layers_forward_all+0x4a>
 8006a76:	bf00      	nop

08006a78 <forward_conv2d_if32of32wf32>:
 8006a78:	6982      	ldr	r2, [r0, #24]
 8006a7a:	8813      	ldrh	r3, [r2, #0]
 8006a7c:	b90b      	cbnz	r3, 8006a82 <forward_conv2d_if32of32wf32+0xa>
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	deff      	udf	#255	@ 0xff
 8006a82:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006a86:	6857      	ldr	r7, [r2, #4]
 8006a88:	b0a3      	sub	sp, #140	@ 0x8c
 8006a8a:	4686      	mov	lr, r0
 8006a8c:	687a      	ldr	r2, [r7, #4]
 8006a8e:	b102      	cbz	r2, 8006a92 <forward_conv2d_if32of32wf32+0x1a>
 8006a90:	6812      	ldr	r2, [r2, #0]
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	f000 80c0 	beq.w	8006c18 <forward_conv2d_if32of32wf32+0x1a0>
 8006a98:	6938      	ldr	r0, [r7, #16]
 8006a9a:	b100      	cbz	r0, 8006a9e <forward_conv2d_if32of32wf32+0x26>
 8006a9c:	6800      	ldr	r0, [r0, #0]
 8006a9e:	2b02      	cmp	r3, #2
 8006aa0:	f000 80b5 	beq.w	8006c0e <forward_conv2d_if32of32wf32+0x196>
 8006aa4:	69fe      	ldr	r6, [r7, #28]
 8006aa6:	2e00      	cmp	r6, #0
 8006aa8:	f000 80b4 	beq.w	8006c14 <forward_conv2d_if32of32wf32+0x19c>
 8006aac:	8b39      	ldrh	r1, [r7, #24]
 8006aae:	6834      	ldr	r4, [r6, #0]
 8006ab0:	2901      	cmp	r1, #1
 8006ab2:	f240 80b4 	bls.w	8006c1e <forward_conv2d_if32of32wf32+0x1a6>
 8006ab6:	6876      	ldr	r6, [r6, #4]
 8006ab8:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8006abc:	f8d0 900c 	ldr.w	r9, [r0, #12]
 8006ac0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8006ac4:	f8de c03c 	ldr.w	ip, [lr, #60]	@ 0x3c
 8006ac8:	9113      	str	r1, [sp, #76]	@ 0x4c
 8006aca:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8006ace:	6992      	ldr	r2, [r2, #24]
 8006ad0:	9115      	str	r1, [sp, #84]	@ 0x54
 8006ad2:	f8d9 100c 	ldr.w	r1, [r9, #12]
 8006ad6:	6892      	ldr	r2, [r2, #8]
 8006ad8:	9116      	str	r1, [sp, #88]	@ 0x58
 8006ada:	f8d9 1008 	ldr.w	r1, [r9, #8]
 8006ade:	f8d4 a00c 	ldr.w	sl, [r4, #12]
 8006ae2:	9117      	str	r1, [sp, #92]	@ 0x5c
 8006ae4:	f8d8 100c 	ldr.w	r1, [r8, #12]
 8006ae8:	9220      	str	r2, [sp, #128]	@ 0x80
 8006aea:	9118      	str	r1, [sp, #96]	@ 0x60
 8006aec:	f8d8 1008 	ldr.w	r1, [r8, #8]
 8006af0:	69a2      	ldr	r2, [r4, #24]
 8006af2:	9119      	str	r1, [sp, #100]	@ 0x64
 8006af4:	f8be 102c 	ldrh.w	r1, [lr, #44]	@ 0x2c
 8006af8:	f8be b028 	ldrh.w	fp, [lr, #40]	@ 0x28
 8006afc:	911a      	str	r1, [sp, #104]	@ 0x68
 8006afe:	f8de 101c 	ldr.w	r1, [lr, #28]
 8006b02:	911f      	str	r1, [sp, #124]	@ 0x7c
 8006b04:	f8bc 1000 	ldrh.w	r1, [ip]
 8006b08:	e9de 540c 	ldrd	r5, r4, [lr, #48]	@ 0x30
 8006b0c:	911b      	str	r1, [sp, #108]	@ 0x6c
 8006b0e:	f8bc 1004 	ldrh.w	r1, [ip, #4]
 8006b12:	911c      	str	r1, [sp, #112]	@ 0x70
 8006b14:	b2a9      	uxth	r1, r5
 8006b16:	911d      	str	r1, [sp, #116]	@ 0x74
 8006b18:	b2a1      	uxth	r1, r4
 8006b1a:	911e      	str	r1, [sp, #120]	@ 0x78
 8006b1c:	6891      	ldr	r1, [r2, #8]
 8006b1e:	e9da 9801 	ldrd	r9, r8, [sl, #4]
 8006b22:	b10e      	cbz	r6, 8006b28 <forward_conv2d_if32of32wf32+0xb0>
 8006b24:	69b6      	ldr	r6, [r6, #24]
 8006b26:	68b6      	ldr	r6, [r6, #8]
 8006b28:	6980      	ldr	r0, [r0, #24]
 8006b2a:	b2a4      	uxth	r4, r4
 8006b2c:	b2ad      	uxth	r5, r5
 8006b2e:	2b03      	cmp	r3, #3
 8006b30:	6880      	ldr	r0, [r0, #8]
 8006b32:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 8006b36:	f105 35ff 	add.w	r5, r5, #4294967295	@ 0xffffffff
 8006b3a:	9014      	str	r0, [sp, #80]	@ 0x50
 8006b3c:	f108 30ff 	add.w	r0, r8, #4294967295	@ 0xffffffff
 8006b40:	fb00 8404 	mla	r4, r0, r4, r8
 8006b44:	f109 30ff 	add.w	r0, r9, #4294967295	@ 0xffffffff
 8006b48:	fb00 9505 	mla	r5, r0, r5, r9
 8006b4c:	d074      	beq.n	8006c38 <forward_conv2d_if32of32wf32+0x1c0>
 8006b4e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d03e      	beq.n	8006bd2 <forward_conv2d_if32of32wf32+0x15a>
 8006b54:	f8d3 a000 	ldr.w	sl, [r3]
 8006b58:	f1ba 0f00 	cmp.w	sl, #0
 8006b5c:	d003      	beq.n	8006b66 <forward_conv2d_if32of32wf32+0xee>
 8006b5e:	f8da 0018 	ldr.w	r0, [sl, #24]
 8006b62:	f8d0 a008 	ldr.w	sl, [r0, #8]
 8006b66:	6858      	ldr	r0, [r3, #4]
 8006b68:	2800      	cmp	r0, #0
 8006b6a:	d033      	beq.n	8006bd4 <forward_conv2d_if32of32wf32+0x15c>
 8006b6c:	6983      	ldr	r3, [r0, #24]
 8006b6e:	f8d2 c000 	ldr.w	ip, [r2]
 8006b72:	689f      	ldr	r7, [r3, #8]
 8006b74:	f3cc 4343 	ubfx	r3, ip, #17, #4
 8006b78:	2b08      	cmp	r3, #8
 8006b7a:	d052      	beq.n	8006c22 <forward_conv2d_if32of32wf32+0x1aa>
 8006b7c:	2f00      	cmp	r7, #0
 8006b7e:	bf08      	it	eq
 8006b80:	460f      	moveq	r7, r1
 8006b82:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8006b84:	463a      	mov	r2, r7
 8006b86:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8006b88:	9820      	ldr	r0, [sp, #128]	@ 0x80
 8006b8a:	940d      	str	r4, [sp, #52]	@ 0x34
 8006b8c:	f8cd 901c 	str.w	r9, [sp, #28]
 8006b90:	950e      	str	r5, [sp, #56]	@ 0x38
 8006b92:	e9cd b30b 	strd	fp, r3, [sp, #44]	@ 0x2c
 8006b96:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8006b98:	930a      	str	r3, [sp, #40]	@ 0x28
 8006b9a:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8006b9c:	e9cd 8308 	strd	r8, r3, [sp, #32]
 8006ba0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ba2:	9306      	str	r3, [sp, #24]
 8006ba4:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006ba6:	9305      	str	r3, [sp, #20]
 8006ba8:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 8006baa:	9304      	str	r3, [sp, #16]
 8006bac:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8006bae:	9303      	str	r3, [sp, #12]
 8006bb0:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8006bb2:	9302      	str	r3, [sp, #8]
 8006bb4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006bb6:	e9cd a300 	strd	sl, r3, [sp]
 8006bba:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8006bbc:	9311      	str	r3, [sp, #68]	@ 0x44
 8006bbe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8006bc0:	9310      	str	r3, [sp, #64]	@ 0x40
 8006bc2:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8006bc4:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006bc6:	4633      	mov	r3, r6
 8006bc8:	f000 fb4e 	bl	8007268 <forward_lite_conv2d_if32of32wf32>
 8006bcc:	b023      	add	sp, #140	@ 0x8c
 8006bce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006bd2:	469a      	mov	sl, r3
 8006bd4:	6810      	ldr	r0, [r2, #0]
 8006bd6:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8006bda:	2b08      	cmp	r3, #8
 8006bdc:	d001      	beq.n	8006be2 <forward_conv2d_if32of32wf32+0x16a>
 8006bde:	460f      	mov	r7, r1
 8006be0:	e7cf      	b.n	8006b82 <forward_conv2d_if32of32wf32+0x10a>
 8006be2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8006be6:	f3c0 5041 	ubfx	r0, r0, #21, #2
 8006bea:	68d2      	ldr	r2, [r2, #12]
 8006bec:	4103      	asrs	r3, r0
 8006bee:	b29b      	uxth	r3, r3
 8006bf0:	2a00      	cmp	r2, #0
 8006bf2:	d0f4      	beq.n	8006bde <forward_conv2d_if32of32wf32+0x166>
 8006bf4:	2700      	movs	r7, #0
 8006bf6:	4638      	mov	r0, r7
 8006bf8:	6980      	ldr	r0, [r0, #24]
 8006bfa:	9121      	str	r1, [sp, #132]	@ 0x84
 8006bfc:	6840      	ldr	r0, [r0, #4]
 8006bfe:	9001      	str	r0, [sp, #4]
 8006c00:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8006c02:	9000      	str	r0, [sp, #0]
 8006c04:	4638      	mov	r0, r7
 8006c06:	f001 fca9 	bl	800855c <lite_decompress_ilutof32>
 8006c0a:	9921      	ldr	r1, [sp, #132]	@ 0x84
 8006c0c:	e7b6      	b.n	8006b7c <forward_conv2d_if32of32wf32+0x104>
 8006c0e:	2300      	movs	r3, #0
 8006c10:	685b      	ldr	r3, [r3, #4]
 8006c12:	deff      	udf	#255	@ 0xff
 8006c14:	4634      	mov	r4, r6
 8006c16:	e74f      	b.n	8006ab8 <forward_conv2d_if32of32wf32+0x40>
 8006c18:	2300      	movs	r3, #0
 8006c1a:	685b      	ldr	r3, [r3, #4]
 8006c1c:	deff      	udf	#255	@ 0xff
 8006c1e:	2600      	movs	r6, #0
 8006c20:	e74a      	b.n	8006ab8 <forward_conv2d_if32of32wf32+0x40>
 8006c22:	68d2      	ldr	r2, [r2, #12]
 8006c24:	2a00      	cmp	r2, #0
 8006c26:	d0a9      	beq.n	8006b7c <forward_conv2d_if32of32wf32+0x104>
 8006c28:	f3cc 13c6 	ubfx	r3, ip, #7, #7
 8006c2c:	f3cc 5c41 	ubfx	ip, ip, #21, #2
 8006c30:	fa43 f30c 	asr.w	r3, r3, ip
 8006c34:	b29b      	uxth	r3, r3
 8006c36:	e7df      	b.n	8006bf8 <forward_conv2d_if32of32wf32+0x180>
 8006c38:	2300      	movs	r3, #0
 8006c3a:	685b      	ldr	r3, [r3, #4]
 8006c3c:	deff      	udf	#255	@ 0xff
 8006c3e:	bf00      	nop

08006c40 <forward_conv2d_if32of32wf32_nl_pool>:
 8006c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c44:	f8d0 c018 	ldr.w	ip, [r0, #24]
 8006c48:	b0c1      	sub	sp, #260	@ 0x104
 8006c4a:	f8bc 7000 	ldrh.w	r7, [ip]
 8006c4e:	b90f      	cbnz	r7, 8006c54 <forward_conv2d_if32of32wf32_nl_pool+0x14>
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	deff      	udf	#255	@ 0xff
 8006c54:	f8dc 3004 	ldr.w	r3, [ip, #4]
 8006c58:	4604      	mov	r4, r0
 8006c5a:	f8d3 a004 	ldr.w	sl, [r3, #4]
 8006c5e:	f1ba 0f00 	cmp.w	sl, #0
 8006c62:	d001      	beq.n	8006c68 <forward_conv2d_if32of32wf32_nl_pool+0x28>
 8006c64:	f8da a000 	ldr.w	sl, [sl]
 8006c68:	2f01      	cmp	r7, #1
 8006c6a:	f000 812d 	beq.w	8006ec8 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8006c6e:	f8d3 9010 	ldr.w	r9, [r3, #16]
 8006c72:	f1b9 0f00 	cmp.w	r9, #0
 8006c76:	d001      	beq.n	8006c7c <forward_conv2d_if32of32wf32_nl_pool+0x3c>
 8006c78:	f8d9 9000 	ldr.w	r9, [r9]
 8006c7c:	2f02      	cmp	r7, #2
 8006c7e:	f000 8123 	beq.w	8006ec8 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8006c82:	69d9      	ldr	r1, [r3, #28]
 8006c84:	2900      	cmp	r1, #0
 8006c86:	f000 8142 	beq.w	8006f0e <forward_conv2d_if32of32wf32_nl_pool+0x2ce>
 8006c8a:	8b1b      	ldrh	r3, [r3, #24]
 8006c8c:	680a      	ldr	r2, [r1, #0]
 8006c8e:	2b01      	cmp	r3, #1
 8006c90:	f240 812c 	bls.w	8006eec <forward_conv2d_if32of32wf32_nl_pool+0x2ac>
 8006c94:	684b      	ldr	r3, [r1, #4]
 8006c96:	933e      	str	r3, [sp, #248]	@ 0xf8
 8006c98:	f8da 000c 	ldr.w	r0, [sl, #12]
 8006c9c:	f8d2 e00c 	ldr.w	lr, [r2, #12]
 8006ca0:	9021      	str	r0, [sp, #132]	@ 0x84
 8006ca2:	f8d9 000c 	ldr.w	r0, [r9, #12]
 8006ca6:	6be3      	ldr	r3, [r4, #60]	@ 0x3c
 8006ca8:	9022      	str	r0, [sp, #136]	@ 0x88
 8006caa:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8006cac:	f8d1 b008 	ldr.w	fp, [r1, #8]
 8006cb0:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006cb4:	f8de 1004 	ldr.w	r1, [lr, #4]
 8006cb8:	902e      	str	r0, [sp, #184]	@ 0xb8
 8006cba:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8006cbc:	681e      	ldr	r6, [r3, #0]
 8006cbe:	f9b0 0004 	ldrsh.w	r0, [r0, #4]
 8006cc2:	9129      	str	r1, [sp, #164]	@ 0xa4
 8006cc4:	902f      	str	r0, [sp, #188]	@ 0xbc
 8006cc6:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8006cc8:	f8de 1008 	ldr.w	r1, [lr, #8]
 8006ccc:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006cd0:	9627      	str	r6, [sp, #156]	@ 0x9c
 8006cd2:	9030      	str	r0, [sp, #192]	@ 0xc0
 8006cd4:	9822      	ldr	r0, [sp, #136]	@ 0x88
 8006cd6:	912d      	str	r1, [sp, #180]	@ 0xb4
 8006cd8:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006cdc:	e9d4 850a 	ldrd	r8, r5, [r4, #40]	@ 0x28
 8006ce0:	9031      	str	r0, [sp, #196]	@ 0xc4
 8006ce2:	9526      	str	r5, [sp, #152]	@ 0x98
 8006ce4:	685d      	ldr	r5, [r3, #4]
 8006ce6:	9528      	str	r5, [sp, #160]	@ 0xa0
 8006ce8:	e9d4 560c 	ldrd	r5, r6, [r4, #48]	@ 0x30
 8006cec:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8006cee:	f9b0 000c 	ldrsh.w	r0, [r0, #12]
 8006cf2:	9022      	str	r0, [sp, #136]	@ 0x88
 8006cf4:	9821      	ldr	r0, [sp, #132]	@ 0x84
 8006cf6:	f9b0 0008 	ldrsh.w	r0, [r0, #8]
 8006cfa:	9023      	str	r0, [sp, #140]	@ 0x8c
 8006cfc:	fa1f f088 	uxth.w	r0, r8
 8006d00:	9032      	str	r0, [sp, #200]	@ 0xc8
 8006d02:	f8bd 0098 	ldrh.w	r0, [sp, #152]	@ 0x98
 8006d06:	9033      	str	r0, [sp, #204]	@ 0xcc
 8006d08:	f8bd 009c 	ldrh.w	r0, [sp, #156]	@ 0x9c
 8006d0c:	9034      	str	r0, [sp, #208]	@ 0xd0
 8006d0e:	f8bd 00a0 	ldrh.w	r0, [sp, #160]	@ 0xa0
 8006d12:	9035      	str	r0, [sp, #212]	@ 0xd4
 8006d14:	6898      	ldr	r0, [r3, #8]
 8006d16:	68db      	ldr	r3, [r3, #12]
 8006d18:	902b      	str	r0, [sp, #172]	@ 0xac
 8006d1a:	932c      	str	r3, [sp, #176]	@ 0xb0
 8006d1c:	f9b4 301c 	ldrsh.w	r3, [r4, #28]
 8006d20:	9336      	str	r3, [sp, #216]	@ 0xd8
 8006d22:	b2ab      	uxth	r3, r5
 8006d24:	9337      	str	r3, [sp, #220]	@ 0xdc
 8006d26:	b2b3      	uxth	r3, r6
 8006d28:	9338      	str	r3, [sp, #224]	@ 0xe0
 8006d2a:	f9bd 30a4 	ldrsh.w	r3, [sp, #164]	@ 0xa4
 8006d2e:	9324      	str	r3, [sp, #144]	@ 0x90
 8006d30:	b20b      	sxth	r3, r1
 8006d32:	9325      	str	r3, [sp, #148]	@ 0x94
 8006d34:	f9b4 3044 	ldrsh.w	r3, [r4, #68]	@ 0x44
 8006d38:	9339      	str	r3, [sp, #228]	@ 0xe4
 8006d3a:	f9b4 304c 	ldrsh.w	r3, [r4, #76]	@ 0x4c
 8006d3e:	933a      	str	r3, [sp, #232]	@ 0xe8
 8006d40:	f9b4 3050 	ldrsh.w	r3, [r4, #80]	@ 0x50
 8006d44:	933b      	str	r3, [sp, #236]	@ 0xec
 8006d46:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d48:	f9b3 3000 	ldrsh.w	r3, [r3]
 8006d4c:	933c      	str	r3, [sp, #240]	@ 0xf0
 8006d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006d50:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8006d54:	933d      	str	r3, [sp, #244]	@ 0xf4
 8006d56:	6a23      	ldr	r3, [r4, #32]
 8006d58:	9321      	str	r3, [sp, #132]	@ 0x84
 8006d5a:	f1bb 0f00 	cmp.w	fp, #0
 8006d5e:	f000 80b6 	beq.w	8006ece <forward_conv2d_if32of32wf32_nl_pool+0x28e>
 8006d62:	f8db 3018 	ldr.w	r3, [fp, #24]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 80b7 	beq.w	8006eda <forward_conv2d_if32of32wf32_nl_pool+0x29a>
 8006d6c:	922a      	str	r2, [sp, #168]	@ 0xa8
 8006d6e:	e9d3 0100 	ldrd	r0, r1, [r3]
 8006d72:	689b      	ldr	r3, [r3, #8]
 8006d74:	9321      	str	r3, [sp, #132]	@ 0x84
 8006d76:	f002 faf1 	bl	800935c <ai_array_get_byte_size>
 8006d7a:	f8db 7018 	ldr.w	r7, [fp, #24]
 8006d7e:	4683      	mov	fp, r0
 8006d80:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8006d82:	2f00      	cmp	r7, #0
 8006d84:	f000 80b9 	beq.w	8006efa <forward_conv2d_if32of32wf32_nl_pool+0x2ba>
 8006d88:	923f      	str	r2, [sp, #252]	@ 0xfc
 8006d8a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006d8e:	f002 fae5 	bl	800935c <ai_array_get_byte_size>
 8006d92:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006d96:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8006d98:	f8bc 7000 	ldrh.w	r7, [ip]
 8006d9c:	902a      	str	r0, [sp, #168]	@ 0xa8
 8006d9e:	9b3e      	ldr	r3, [sp, #248]	@ 0xf8
 8006da0:	b2ad      	uxth	r5, r5
 8006da2:	f8da 0018 	ldr.w	r0, [sl, #24]
 8006da6:	b2b6      	uxth	r6, r6
 8006da8:	699b      	ldr	r3, [r3, #24]
 8006daa:	3d01      	subs	r5, #1
 8006dac:	f8d9 1018 	ldr.w	r1, [r9, #24]
 8006db0:	3e01      	subs	r6, #1
 8006db2:	f8d3 a008 	ldr.w	sl, [r3, #8]
 8006db6:	fa1f f888 	uxth.w	r8, r8
 8006dba:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006dbc:	2f03      	cmp	r7, #3
 8006dbe:	f8bd e098 	ldrh.w	lr, [sp, #152]	@ 0x98
 8006dc2:	f103 39ff 	add.w	r9, r3, #4294967295	@ 0xffffffff
 8006dc6:	9b29      	ldr	r3, [sp, #164]	@ 0xa4
 8006dc8:	6992      	ldr	r2, [r2, #24]
 8006dca:	fb15 3509 	smlabb	r5, r5, r9, r3
 8006dce:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006dd0:	6880      	ldr	r0, [r0, #8]
 8006dd2:	fa0f f985 	sxth.w	r9, r5
 8006dd6:	f103 35ff 	add.w	r5, r3, #4294967295	@ 0xffffffff
 8006dda:	9b2d      	ldr	r3, [sp, #180]	@ 0xb4
 8006ddc:	6889      	ldr	r1, [r1, #8]
 8006dde:	fb16 3605 	smlabb	r6, r6, r5, r3
 8006de2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006de4:	6892      	ldr	r2, [r2, #8]
 8006de6:	eba3 0509 	sub.w	r5, r3, r9
 8006dea:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8006dec:	b236      	sxth	r6, r6
 8006dee:	fa15 f583 	uxtah	r5, r5, r3
 8006df2:	9b2c      	ldr	r3, [sp, #176]	@ 0xb0
 8006df4:	fa15 f583 	uxtah	r5, r5, r3
 8006df8:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006dfa:	fb95 f5f8 	sdiv	r5, r5, r8
 8006dfe:	eba3 0806 	sub.w	r8, r3, r6
 8006e02:	9b27      	ldr	r3, [sp, #156]	@ 0x9c
 8006e04:	f105 0501 	add.w	r5, r5, #1
 8006e08:	fa18 f883 	uxtah	r8, r8, r3
 8006e0c:	9b2b      	ldr	r3, [sp, #172]	@ 0xac
 8006e0e:	b22d      	sxth	r5, r5
 8006e10:	fa18 f883 	uxtah	r8, r8, r3
 8006e14:	6de3      	ldr	r3, [r4, #92]	@ 0x5c
 8006e16:	fb98 fefe 	sdiv	lr, r8, lr
 8006e1a:	9326      	str	r3, [sp, #152]	@ 0x98
 8006e1c:	f10e 0e01 	add.w	lr, lr, #1
 8006e20:	f8d4 8024 	ldr.w	r8, [r4, #36]	@ 0x24
 8006e24:	f9b4 4048 	ldrsh.w	r4, [r4, #72]	@ 0x48
 8006e28:	d94e      	bls.n	8006ec8 <forward_conv2d_if32of32wf32_nl_pool+0x288>
 8006e2a:	f8dc 7004 	ldr.w	r7, [ip, #4]
 8006e2e:	f8d7 c028 	ldr.w	ip, [r7, #40]	@ 0x28
 8006e32:	f1bc 0f00 	cmp.w	ip, #0
 8006e36:	d067      	beq.n	8006f08 <forward_conv2d_if32of32wf32_nl_pool+0x2c8>
 8006e38:	f8dc 7000 	ldr.w	r7, [ip]
 8006e3c:	b10f      	cbz	r7, 8006e42 <forward_conv2d_if32of32wf32_nl_pool+0x202>
 8006e3e:	69bf      	ldr	r7, [r7, #24]
 8006e40:	68bf      	ldr	r7, [r7, #8]
 8006e42:	9b3c      	ldr	r3, [sp, #240]	@ 0xf0
 8006e44:	9513      	str	r5, [sp, #76]	@ 0x4c
 8006e46:	931f      	str	r3, [sp, #124]	@ 0x7c
 8006e48:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8006e4a:	960e      	str	r6, [sp, #56]	@ 0x38
 8006e4c:	931e      	str	r3, [sp, #120]	@ 0x78
 8006e4e:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 8006e50:	931d      	str	r3, [sp, #116]	@ 0x74
 8006e52:	9b3a      	ldr	r3, [sp, #232]	@ 0xe8
 8006e54:	e9cd 431b 	strd	r4, r3, [sp, #108]	@ 0x6c
 8006e58:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 8006e5a:	931a      	str	r3, [sp, #104]	@ 0x68
 8006e5c:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 8006e5e:	9319      	str	r3, [sp, #100]	@ 0x64
 8006e60:	9b2a      	ldr	r3, [sp, #168]	@ 0xa8
 8006e62:	e9cd b317 	strd	fp, r3, [sp, #92]	@ 0x5c
 8006e66:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006e68:	e9cd 8315 	strd	r8, r3, [sp, #84]	@ 0x54
 8006e6c:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8006e6e:	9312      	str	r3, [sp, #72]	@ 0x48
 8006e70:	9b38      	ldr	r3, [sp, #224]	@ 0xe0
 8006e72:	9311      	str	r3, [sp, #68]	@ 0x44
 8006e74:	9b37      	ldr	r3, [sp, #220]	@ 0xdc
 8006e76:	e9cd 930f 	strd	r9, r3, [sp, #60]	@ 0x3c
 8006e7a:	9b33      	ldr	r3, [sp, #204]	@ 0xcc
 8006e7c:	930d      	str	r3, [sp, #52]	@ 0x34
 8006e7e:	9b32      	ldr	r3, [sp, #200]	@ 0xc8
 8006e80:	930c      	str	r3, [sp, #48]	@ 0x30
 8006e82:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8006e84:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006e86:	9b35      	ldr	r3, [sp, #212]	@ 0xd4
 8006e88:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e8a:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 8006e8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8006e8e:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 8006e90:	9308      	str	r3, [sp, #32]
 8006e92:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 8006e94:	9307      	str	r3, [sp, #28]
 8006e96:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8006e98:	9306      	str	r3, [sp, #24]
 8006e9a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8006e9c:	9305      	str	r3, [sp, #20]
 8006e9e:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006ea0:	9304      	str	r3, [sp, #16]
 8006ea2:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8006ea4:	9303      	str	r3, [sp, #12]
 8006ea6:	9b2e      	ldr	r3, [sp, #184]	@ 0xb8
 8006ea8:	e9cd 7301 	strd	r7, r3, [sp, #4]
 8006eac:	fa0f f38e 	sxth.w	r3, lr
 8006eb0:	9314      	str	r3, [sp, #80]	@ 0x50
 8006eb2:	4653      	mov	r3, sl
 8006eb4:	f8dc 4004 	ldr.w	r4, [ip, #4]
 8006eb8:	69a4      	ldr	r4, [r4, #24]
 8006eba:	68a4      	ldr	r4, [r4, #8]
 8006ebc:	9400      	str	r4, [sp, #0]
 8006ebe:	f000 fcab 	bl	8007818 <forward_lite_conv2d_if32of32wf32_pool>
 8006ec2:	b041      	add	sp, #260	@ 0x104
 8006ec4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006ec8:	2300      	movs	r3, #0
 8006eca:	685b      	ldr	r3, [r3, #4]
 8006ecc:	deff      	udf	#255	@ 0xff
 8006ece:	b183      	cbz	r3, 8006ef2 <forward_conv2d_if32of32wf32_nl_pool+0x2b2>
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	9321      	str	r3, [sp, #132]	@ 0x84
 8006ed4:	2301      	movs	r3, #1
 8006ed6:	932a      	str	r3, [sp, #168]	@ 0xa8
 8006ed8:	e761      	b.n	8006d9e <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 8006eda:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8006edc:	b10b      	cbz	r3, 8006ee2 <forward_conv2d_if32of32wf32_nl_pool+0x2a2>
 8006ede:	689b      	ldr	r3, [r3, #8]
 8006ee0:	9321      	str	r3, [sp, #132]	@ 0x84
 8006ee2:	2301      	movs	r3, #1
 8006ee4:	f04f 0b00 	mov.w	fp, #0
 8006ee8:	932a      	str	r3, [sp, #168]	@ 0xa8
 8006eea:	e758      	b.n	8006d9e <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 8006eec:	2300      	movs	r3, #0
 8006eee:	933e      	str	r3, [sp, #248]	@ 0xf8
 8006ef0:	e6d2      	b.n	8006c98 <forward_conv2d_if32of32wf32_nl_pool+0x58>
 8006ef2:	469b      	mov	fp, r3
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	932a      	str	r3, [sp, #168]	@ 0xa8
 8006ef8:	e751      	b.n	8006d9e <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 8006efa:	f8d4 c018 	ldr.w	ip, [r4, #24]
 8006efe:	2301      	movs	r3, #1
 8006f00:	f8bc 7000 	ldrh.w	r7, [ip]
 8006f04:	932a      	str	r3, [sp, #168]	@ 0xa8
 8006f06:	e74a      	b.n	8006d9e <forward_conv2d_if32of32wf32_nl_pool+0x15e>
 8006f08:	f8dc 3018 	ldr.w	r3, [ip, #24]
 8006f0c:	deff      	udf	#255	@ 0xff
 8006f0e:	68cb      	ldr	r3, [r1, #12]
 8006f10:	deff      	udf	#255	@ 0xff
 8006f12:	bf00      	nop

08006f14 <forward_dense>:
 8006f14:	6982      	ldr	r2, [r0, #24]
 8006f16:	8813      	ldrh	r3, [r2, #0]
 8006f18:	b90b      	cbnz	r3, 8006f1e <forward_dense+0xa>
 8006f1a:	685b      	ldr	r3, [r3, #4]
 8006f1c:	deff      	udf	#255	@ 0xff
 8006f1e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006f22:	f8d2 a004 	ldr.w	sl, [r2, #4]
 8006f26:	b08e      	sub	sp, #56	@ 0x38
 8006f28:	f8da 0004 	ldr.w	r0, [sl, #4]
 8006f2c:	b100      	cbz	r0, 8006f30 <forward_dense+0x1c>
 8006f2e:	6800      	ldr	r0, [r0, #0]
 8006f30:	2b01      	cmp	r3, #1
 8006f32:	d061      	beq.n	8006ff8 <forward_dense+0xe4>
 8006f34:	f8da 2010 	ldr.w	r2, [sl, #16]
 8006f38:	b102      	cbz	r2, 8006f3c <forward_dense+0x28>
 8006f3a:	6812      	ldr	r2, [r2, #0]
 8006f3c:	2b02      	cmp	r3, #2
 8006f3e:	d035      	beq.n	8006fac <forward_dense+0x98>
 8006f40:	f8da 501c 	ldr.w	r5, [sl, #28]
 8006f44:	2d00      	cmp	r5, #0
 8006f46:	d055      	beq.n	8006ff4 <forward_dense+0xe0>
 8006f48:	f8ba 4018 	ldrh.w	r4, [sl, #24]
 8006f4c:	6829      	ldr	r1, [r5, #0]
 8006f4e:	2c01      	cmp	r4, #1
 8006f50:	d955      	bls.n	8006ffe <forward_dense+0xea>
 8006f52:	686d      	ldr	r5, [r5, #4]
 8006f54:	698e      	ldr	r6, [r1, #24]
 8006f56:	2b03      	cmp	r3, #3
 8006f58:	68d1      	ldr	r1, [r2, #12]
 8006f5a:	68c4      	ldr	r4, [r0, #12]
 8006f5c:	f8d1 9004 	ldr.w	r9, [r1, #4]
 8006f60:	f8d4 e004 	ldr.w	lr, [r4, #4]
 8006f64:	e9d1 4702 	ldrd	r4, r7, [r1, #8]
 8006f68:	6831      	ldr	r1, [r6, #0]
 8006f6a:	fb07 f804 	mul.w	r8, r7, r4
 8006f6e:	f021 4c7e 	bic.w	ip, r1, #4261412864	@ 0xfe000000
 8006f72:	d046      	beq.n	8007002 <forward_dense+0xee>
 8006f74:	f8da 4028 	ldr.w	r4, [sl, #40]	@ 0x28
 8006f78:	b11c      	cbz	r4, 8006f82 <forward_dense+0x6e>
 8006f7a:	6824      	ldr	r4, [r4, #0]
 8006f7c:	b10c      	cbz	r4, 8006f82 <forward_dense+0x6e>
 8006f7e:	69a3      	ldr	r3, [r4, #24]
 8006f80:	689c      	ldr	r4, [r3, #8]
 8006f82:	6983      	ldr	r3, [r0, #24]
 8006f84:	6992      	ldr	r2, [r2, #24]
 8006f86:	6899      	ldr	r1, [r3, #8]
 8006f88:	6890      	ldr	r0, [r2, #8]
 8006f8a:	b10d      	cbz	r5, 8006f90 <forward_dense+0x7c>
 8006f8c:	69ab      	ldr	r3, [r5, #24]
 8006f8e:	689d      	ldr	r5, [r3, #8]
 8006f90:	4f1d      	ldr	r7, [pc, #116]	@ (8007008 <forward_dense+0xf4>)
 8006f92:	45bc      	cmp	ip, r7
 8006f94:	e9d6 2302 	ldrd	r2, r3, [r6, #8]
 8006f98:	d022      	beq.n	8006fe0 <forward_dense+0xcc>
 8006f9a:	4e1c      	ldr	r6, [pc, #112]	@ (800700c <forward_dense+0xf8>)
 8006f9c:	45b4      	cmp	ip, r6
 8006f9e:	d015      	beq.n	8006fcc <forward_dense+0xb8>
 8006fa0:	4b1b      	ldr	r3, [pc, #108]	@ (8007010 <forward_dense+0xfc>)
 8006fa2:	459c      	cmp	ip, r3
 8006fa4:	d005      	beq.n	8006fb2 <forward_dense+0x9e>
 8006fa6:	b00e      	add	sp, #56	@ 0x38
 8006fa8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fac:	2300      	movs	r3, #0
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	deff      	udf	#255	@ 0xff
 8006fb2:	e9cd 0107 	strd	r0, r1, [sp, #28]
 8006fb6:	a807      	add	r0, sp, #28
 8006fb8:	9209      	str	r2, [sp, #36]	@ 0x24
 8006fba:	e9cd 5e0a 	strd	r5, lr, [sp, #40]	@ 0x28
 8006fbe:	e9cd 980c 	strd	r9, r8, [sp, #48]	@ 0x30
 8006fc2:	f001 fb21 	bl	8008608 <forward_lite_dense_if32of32wf32>
 8006fc6:	b00e      	add	sp, #56	@ 0x38
 8006fc8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fcc:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8006fd0:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8006fd4:	9400      	str	r4, [sp, #0]
 8006fd6:	f001 fc71 	bl	80088bc <forward_lite_dense_if32of32wf32_lut4>
 8006fda:	b00e      	add	sp, #56	@ 0x38
 8006fdc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fe0:	e9cd 9803 	strd	r9, r8, [sp, #12]
 8006fe4:	e9cd 5e01 	strd	r5, lr, [sp, #4]
 8006fe8:	9400      	str	r4, [sp, #0]
 8006fea:	f001 fdaf 	bl	8008b4c <forward_lite_dense_if32of32wf32_lut8>
 8006fee:	b00e      	add	sp, #56	@ 0x38
 8006ff0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006ff4:	4629      	mov	r1, r5
 8006ff6:	e7ad      	b.n	8006f54 <forward_dense+0x40>
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	685b      	ldr	r3, [r3, #4]
 8006ffc:	deff      	udf	#255	@ 0xff
 8006ffe:	2500      	movs	r5, #0
 8007000:	e7a8      	b.n	8006f54 <forward_dense+0x40>
 8007002:	2300      	movs	r3, #0
 8007004:	685b      	ldr	r3, [r3, #4]
 8007006:	deff      	udf	#255	@ 0xff
 8007008:	00d01040 	.word	0x00d01040
 800700c:	00f01040 	.word	0x00f01040
 8007010:	00821040 	.word	0x00821040

08007014 <forward_reduce>:
 8007014:	6981      	ldr	r1, [r0, #24]
 8007016:	880a      	ldrh	r2, [r1, #0]
 8007018:	b90a      	cbnz	r2, 800701e <forward_reduce+0xa>
 800701a:	6853      	ldr	r3, [r2, #4]
 800701c:	deff      	udf	#255	@ 0xff
 800701e:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007022:	6849      	ldr	r1, [r1, #4]
 8007024:	b08b      	sub	sp, #44	@ 0x2c
 8007026:	4603      	mov	r3, r0
 8007028:	684e      	ldr	r6, [r1, #4]
 800702a:	b106      	cbz	r6, 800702e <forward_reduce+0x1a>
 800702c:	6836      	ldr	r6, [r6, #0]
 800702e:	2a01      	cmp	r2, #1
 8007030:	f000 8081 	beq.w	8007136 <forward_reduce+0x122>
 8007034:	690a      	ldr	r2, [r1, #16]
 8007036:	2a00      	cmp	r2, #0
 8007038:	d07b      	beq.n	8007132 <forward_reduce+0x11e>
 800703a:	6814      	ldr	r4, [r2, #0]
 800703c:	2200      	movs	r2, #0
 800703e:	6971      	ldr	r1, [r6, #20]
 8007040:	a803      	add	r0, sp, #12
 8007042:	e9d3 3807 	ldrd	r3, r8, [r3, #28]
 8007046:	684f      	ldr	r7, [r1, #4]
 8007048:	f104 0108 	add.w	r1, r4, #8
 800704c:	9301      	str	r3, [sp, #4]
 800704e:	6963      	ldr	r3, [r4, #20]
 8007050:	685d      	ldr	r5, [r3, #4]
 8007052:	ab05      	add	r3, sp, #20
 8007054:	9209      	str	r2, [sp, #36]	@ 0x24
 8007056:	9304      	str	r3, [sp, #16]
 8007058:	f240 5302 	movw	r3, #1282	@ 0x502
 800705c:	e9cd 2205 	strd	r2, r2, [sp, #20]
 8007060:	e9cd 2207 	strd	r2, r2, [sp, #28]
 8007064:	9303      	str	r3, [sp, #12]
 8007066:	f106 0208 	add.w	r2, r6, #8
 800706a:	463b      	mov	r3, r7
 800706c:	f002 f9c4 	bl	80093f8 <core_compute_offsets>
 8007070:	69b3      	ldr	r3, [r6, #24]
 8007072:	e9d3 0100 	ldrd	r0, r1, [r3]
 8007076:	f8d3 b008 	ldr.w	fp, [r3, #8]
 800707a:	f002 f96f 	bl	800935c <ai_array_get_byte_size>
 800707e:	69a2      	ldr	r2, [r4, #24]
 8007080:	6894      	ldr	r4, [r2, #8]
 8007082:	e9d2 0100 	ldrd	r0, r1, [r2]
 8007086:	f002 f969 	bl	800935c <ai_array_get_byte_size>
 800708a:	eb04 0900 	add.w	r9, r4, r0
 800708e:	454c      	cmp	r4, r9
 8007090:	d209      	bcs.n	80070a6 <forward_reduce+0x92>
 8007092:	46a2      	mov	sl, r4
 8007094:	9b01      	ldr	r3, [sp, #4]
 8007096:	4651      	mov	r1, sl
 8007098:	44aa      	add	sl, r5
 800709a:	462a      	mov	r2, r5
 800709c:	6898      	ldr	r0, [r3, #8]
 800709e:	f002 f83b 	bl	8009118 <st_int8_copy>
 80070a2:	45d1      	cmp	r9, sl
 80070a4:	d8f6      	bhi.n	8007094 <forward_reduce+0x80>
 80070a6:	68f2      	ldr	r2, [r6, #12]
 80070a8:	68d1      	ldr	r1, [r2, #12]
 80070aa:	2900      	cmp	r1, #0
 80070ac:	d03e      	beq.n	800712c <forward_reduce+0x118>
 80070ae:	2300      	movs	r3, #0
 80070b0:	6895      	ldr	r5, [r2, #8]
 80070b2:	9301      	str	r3, [sp, #4]
 80070b4:	2d00      	cmp	r5, #0
 80070b6:	d039      	beq.n	800712c <forward_reduce+0x118>
 80070b8:	68b1      	ldr	r1, [r6, #8]
 80070ba:	f04f 0a00 	mov.w	sl, #0
 80070be:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80070c2:	f04f 0900 	mov.w	r9, #0
 80070c6:	2904      	cmp	r1, #4
 80070c8:	bf8c      	ite	hi
 80070ca:	6910      	ldrhi	r0, [r2, #16]
 80070cc:	2001      	movls	r0, #1
 80070ce:	4581      	cmp	r9, r0
 80070d0:	d21c      	bcs.n	800710c <forward_reduce+0xf8>
 80070d2:	6850      	ldr	r0, [r2, #4]
 80070d4:	b180      	cbz	r0, 80070f8 <forward_reduce+0xe4>
 80070d6:	2500      	movs	r5, #0
 80070d8:	465a      	mov	r2, fp
 80070da:	4621      	mov	r1, r4
 80070dc:	4620      	mov	r0, r4
 80070de:	3501      	adds	r5, #1
 80070e0:	47c0      	blx	r8
 80070e2:	9904      	ldr	r1, [sp, #16]
 80070e4:	68f2      	ldr	r2, [r6, #12]
 80070e6:	44bb      	add	fp, r7
 80070e8:	6848      	ldr	r0, [r1, #4]
 80070ea:	6851      	ldr	r1, [r2, #4]
 80070ec:	4404      	add	r4, r0
 80070ee:	42a9      	cmp	r1, r5
 80070f0:	d8f2      	bhi.n	80070d8 <forward_reduce+0xc4>
 80070f2:	68b1      	ldr	r1, [r6, #8]
 80070f4:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80070f8:	9803      	ldr	r0, [sp, #12]
 80070fa:	f5b0 6fa0 	cmp.w	r0, #1280	@ 0x500
 80070fe:	d302      	bcc.n	8007106 <forward_reduce+0xf2>
 8007100:	9804      	ldr	r0, [sp, #16]
 8007102:	6900      	ldr	r0, [r0, #16]
 8007104:	4404      	add	r4, r0
 8007106:	f109 0901 	add.w	r9, r9, #1
 800710a:	e7dc      	b.n	80070c6 <forward_reduce+0xb2>
 800710c:	9b04      	ldr	r3, [sp, #16]
 800710e:	f10a 0a01 	add.w	sl, sl, #1
 8007112:	6895      	ldr	r5, [r2, #8]
 8007114:	6898      	ldr	r0, [r3, #8]
 8007116:	4555      	cmp	r5, sl
 8007118:	4404      	add	r4, r0
 800711a:	d8d2      	bhi.n	80070c2 <forward_reduce+0xae>
 800711c:	68d8      	ldr	r0, [r3, #12]
 800711e:	9b01      	ldr	r3, [sp, #4]
 8007120:	68d1      	ldr	r1, [r2, #12]
 8007122:	4404      	add	r4, r0
 8007124:	3301      	adds	r3, #1
 8007126:	428b      	cmp	r3, r1
 8007128:	9301      	str	r3, [sp, #4]
 800712a:	d3c3      	bcc.n	80070b4 <forward_reduce+0xa0>
 800712c:	b00b      	add	sp, #44	@ 0x2c
 800712e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007132:	6953      	ldr	r3, [r2, #20]
 8007134:	deff      	udf	#255	@ 0xff
 8007136:	2300      	movs	r3, #0
 8007138:	685b      	ldr	r3, [r3, #4]
 800713a:	deff      	udf	#255	@ 0xff

0800713c <forward_relu>:
 800713c:	6982      	ldr	r2, [r0, #24]
 800713e:	8813      	ldrh	r3, [r2, #0]
 8007140:	b90b      	cbnz	r3, 8007146 <forward_relu+0xa>
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	deff      	udf	#255	@ 0xff
 8007146:	6851      	ldr	r1, [r2, #4]
 8007148:	684a      	ldr	r2, [r1, #4]
 800714a:	b102      	cbz	r2, 800714e <forward_relu+0x12>
 800714c:	6812      	ldr	r2, [r2, #0]
 800714e:	2b01      	cmp	r3, #1
 8007150:	f000 8084 	beq.w	800725c <forward_relu+0x120>
 8007154:	b470      	push	{r4, r5, r6}
 8007156:	690b      	ldr	r3, [r1, #16]
 8007158:	b103      	cbz	r3, 800715c <forward_relu+0x20>
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	699c      	ldr	r4, [r3, #24]
 800715e:	6991      	ldr	r1, [r2, #24]
 8007160:	6893      	ldr	r3, [r2, #8]
 8007162:	69c6      	ldr	r6, [r0, #28]
 8007164:	6889      	ldr	r1, [r1, #8]
 8007166:	f3c3 2317 	ubfx	r3, r3, #8, #24
 800716a:	68a0      	ldr	r0, [r4, #8]
 800716c:	b196      	cbz	r6, 8007194 <forward_relu+0x58>
 800716e:	6874      	ldr	r4, [r6, #4]
 8007170:	2c01      	cmp	r4, #1
 8007172:	d036      	beq.n	80071e2 <forward_relu+0xa6>
 8007174:	2b00      	cmp	r3, #0
 8007176:	d068      	beq.n	800724a <forward_relu+0x10e>
 8007178:	68d5      	ldr	r5, [r2, #12]
 800717a:	2201      	movs	r2, #1
 800717c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8007180:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 8007184:	429d      	cmp	r5, r3
 8007186:	fb04 f202 	mul.w	r2, r4, r2
 800718a:	d1f9      	bne.n	8007180 <forward_relu+0x44>
 800718c:	68b3      	ldr	r3, [r6, #8]
 800718e:	bc70      	pop	{r4, r5, r6}
 8007190:	f000 bf5c 	b.w	800804c <forward_lite_nl_relu_generic_if32of32_kernel>
 8007194:	2b00      	cmp	r3, #0
 8007196:	d05a      	beq.n	800724e <forward_relu+0x112>
 8007198:	68d5      	ldr	r5, [r2, #12]
 800719a:	2201      	movs	r2, #1
 800719c:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80071a0:	f853 4d04 	ldr.w	r4, [r3, #-4]!
 80071a4:	429d      	cmp	r5, r3
 80071a6:	fb04 f202 	mul.w	r2, r4, r2
 80071aa:	d1f9      	bne.n	80071a0 <forward_relu+0x64>
 80071ac:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80071b0:	4413      	add	r3, r2
 80071b2:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80071b6:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 80071ba:	428a      	cmp	r2, r1
 80071bc:	d30f      	bcc.n	80071de <forward_relu+0xa2>
 80071be:	1a51      	subs	r1, r2, r1
 80071c0:	1d13      	adds	r3, r2, #4
 80071c2:	3004      	adds	r0, #4
 80071c4:	ed9f 7a27 	vldr	s14, [pc, #156]	@ 8007264 <forward_relu+0x128>
 80071c8:	f021 0103 	bic.w	r1, r1, #3
 80071cc:	1a52      	subs	r2, r2, r1
 80071ce:	ed73 7a01 	vldmdb	r3!, {s15}
 80071d2:	429a      	cmp	r2, r3
 80071d4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80071d8:	ed60 7a01 	vstmdb	r0!, {s15}
 80071dc:	d1f7      	bne.n	80071ce <forward_relu+0x92>
 80071de:	bc70      	pop	{r4, r5, r6}
 80071e0:	4770      	bx	lr
 80071e2:	b3b3      	cbz	r3, 8007252 <forward_relu+0x116>
 80071e4:	68d5      	ldr	r5, [r2, #12]
 80071e6:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 80071ea:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80071ee:	429d      	cmp	r5, r3
 80071f0:	fb02 f404 	mul.w	r4, r2, r4
 80071f4:	d1f9      	bne.n	80071ea <forward_relu+0xae>
 80071f6:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80071fa:	68b2      	ldr	r2, [r6, #8]
 80071fc:	4423      	add	r3, r4
 80071fe:	ed92 7a00 	vldr	s14, [r2]
 8007202:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 8007206:	eb00 0083 	add.w	r0, r0, r3, lsl #2
 800720a:	428a      	cmp	r2, r1
 800720c:	d3e7      	bcc.n	80071de <forward_relu+0xa2>
 800720e:	1a51      	subs	r1, r2, r1
 8007210:	1d13      	adds	r3, r2, #4
 8007212:	3004      	adds	r0, #4
 8007214:	2400      	movs	r4, #0
 8007216:	f021 0103 	bic.w	r1, r1, #3
 800721a:	1a52      	subs	r2, r2, r1
 800721c:	ed73 7a01 	vldmdb	r3!, {s15}
 8007220:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007228:	d50a      	bpl.n	8007240 <forward_relu+0x104>
 800722a:	429a      	cmp	r2, r3
 800722c:	ed60 7a01 	vstmdb	r0!, {s15}
 8007230:	d0d5      	beq.n	80071de <forward_relu+0xa2>
 8007232:	ed73 7a01 	vldmdb	r3!, {s15}
 8007236:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800723a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800723e:	d4f4      	bmi.n	800722a <forward_relu+0xee>
 8007240:	429a      	cmp	r2, r3
 8007242:	f840 4d04 	str.w	r4, [r0, #-4]!
 8007246:	d1e9      	bne.n	800721c <forward_relu+0xe0>
 8007248:	e7c9      	b.n	80071de <forward_relu+0xa2>
 800724a:	2201      	movs	r2, #1
 800724c:	e79e      	b.n	800718c <forward_relu+0x50>
 800724e:	460a      	mov	r2, r1
 8007250:	e7b5      	b.n	80071be <forward_relu+0x82>
 8007252:	68b3      	ldr	r3, [r6, #8]
 8007254:	460a      	mov	r2, r1
 8007256:	ed93 7a00 	vldr	s14, [r3]
 800725a:	e7d8      	b.n	800720e <forward_relu+0xd2>
 800725c:	2300      	movs	r3, #0
 800725e:	685b      	ldr	r3, [r3, #4]
 8007260:	deff      	udf	#255	@ 0xff
 8007262:	bf00      	nop
 8007264:	00000000 	.word	0x00000000

08007268 <forward_lite_conv2d_if32of32wf32>:
 8007268:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800726c:	ed2d 8b0e 	vpush	{d8-d14}
 8007270:	b0a1      	sub	sp, #132	@ 0x84
 8007272:	4681      	mov	r9, r0
 8007274:	460c      	mov	r4, r1
 8007276:	4690      	mov	r8, r2
 8007278:	f8bd 5104 	ldrh.w	r5, [sp, #260]	@ 0x104
 800727c:	f8bd 610c 	ldrh.w	r6, [sp, #268]	@ 0x10c
 8007280:	9f3e      	ldr	r7, [sp, #248]	@ 0xf8
 8007282:	9018      	str	r0, [sp, #96]	@ 0x60
 8007284:	9211      	str	r2, [sp, #68]	@ 0x44
 8007286:	930c      	str	r3, [sp, #48]	@ 0x30
 8007288:	f8bd 2108 	ldrh.w	r2, [sp, #264]	@ 0x108
 800728c:	983a      	ldr	r0, [sp, #232]	@ 0xe8
 800728e:	9b40      	ldr	r3, [sp, #256]	@ 0x100
 8007290:	f8bd 1110 	ldrh.w	r1, [sp, #272]	@ 0x110
 8007294:	9512      	str	r5, [sp, #72]	@ 0x48
 8007296:	9605      	str	r6, [sp, #20]
 8007298:	2f00      	cmp	r7, #0
 800729a:	f000 817a 	beq.w	8007592 <forward_lite_conv2d_if32of32wf32+0x32a>
 800729e:	9f3f      	ldr	r7, [sp, #252]	@ 0xfc
 80072a0:	f1c2 0e00 	rsb	lr, r2, #0
 80072a4:	4694      	mov	ip, r2
 80072a6:	426d      	negs	r5, r5
 80072a8:	fb07 f303 	mul.w	r3, r7, r3
 80072ac:	9f39      	ldr	r7, [sp, #228]	@ 0xe4
 80072ae:	9510      	str	r5, [sp, #64]	@ 0x40
 80072b0:	fb07 f303 	mul.w	r3, r7, r3
 80072b4:	ed9f 8ac0 	vldr	s16, [pc, #768]	@ 80075b8 <forward_lite_conv2d_if32of32wf32+0x350>
 80072b8:	9119      	str	r1, [sp, #100]	@ 0x64
 80072ba:	009b      	lsls	r3, r3, #2
 80072bc:	930d      	str	r3, [sp, #52]	@ 0x34
 80072be:	9b3b      	ldr	r3, [sp, #236]	@ 0xec
 80072c0:	fb07 f303 	mul.w	r3, r7, r3
 80072c4:	9f3d      	ldr	r7, [sp, #244]	@ 0xf4
 80072c6:	fb07 f200 	mul.w	r2, r7, r0
 80072ca:	0087      	lsls	r7, r0, #2
 80072cc:	9702      	str	r7, [sp, #8]
 80072ce:	0097      	lsls	r7, r2, #2
 80072d0:	fb01 f203 	mul.w	r2, r1, r3
 80072d4:	fb03 f30e 	mul.w	r3, r3, lr
 80072d8:	9714      	str	r7, [sp, #80]	@ 0x50
 80072da:	0097      	lsls	r7, r2, #2
 80072dc:	eb09 0083 	add.w	r0, r9, r3, lsl #2
 80072e0:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80072e2:	f108 4278 	add.w	r2, r8, #4160749568	@ 0xf8000000
 80072e6:	9716      	str	r7, [sp, #88]	@ 0x58
 80072e8:	fb06 f303 	mul.w	r3, r6, r3
 80072ec:	4677      	mov	r7, lr
 80072ee:	9213      	str	r2, [sp, #76]	@ 0x4c
 80072f0:	4606      	mov	r6, r0
 80072f2:	009b      	lsls	r3, r3, #2
 80072f4:	2200      	movs	r2, #0
 80072f6:	9304      	str	r3, [sp, #16]
 80072f8:	9b39      	ldr	r3, [sp, #228]	@ 0xe4
 80072fa:	920f      	str	r2, [sp, #60]	@ 0x3c
 80072fc:	009b      	lsls	r3, r3, #2
 80072fe:	fb03 f905 	mul.w	r9, r3, r5
 8007302:	4665      	mov	r5, ip
 8007304:	9300      	str	r3, [sp, #0]
 8007306:	2f00      	cmp	r7, #0
 8007308:	f2c0 8281 	blt.w	800780e <forward_lite_conv2d_if32of32wf32+0x5a6>
 800730c:	2300      	movs	r3, #0
 800730e:	960b      	str	r6, [sp, #44]	@ 0x2c
 8007310:	9a3c      	ldr	r2, [sp, #240]	@ 0xf0
 8007312:	9945      	ldr	r1, [sp, #276]	@ 0x114
 8007314:	442a      	add	r2, r5
 8007316:	428a      	cmp	r2, r1
 8007318:	bf94      	ite	ls
 800731a:	ebc3 0202 	rsbls	r2, r3, r2
 800731e:	ebc3 0201 	rsbhi	r2, r3, r1
 8007322:	4610      	mov	r0, r2
 8007324:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8007326:	2a00      	cmp	r2, #0
 8007328:	f000 8148 	beq.w	80075bc <forward_lite_conv2d_if32of32wf32+0x354>
 800732c:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800732e:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8007332:	f0c0 8143 	bcc.w	80075bc <forward_lite_conv2d_if32of32wf32+0x354>
 8007336:	9a02      	ldr	r2, [sp, #8]
 8007338:	18a2      	adds	r2, r4, r2
 800733a:	4294      	cmp	r4, r2
 800733c:	9215      	str	r2, [sp, #84]	@ 0x54
 800733e:	f080 811a 	bcs.w	8007576 <forward_lite_conv2d_if32of32wf32+0x30e>
 8007342:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8007344:	46a2      	mov	sl, r4
 8007346:	4680      	mov	r8, r0
 8007348:	941e      	str	r4, [sp, #120]	@ 0x78
 800734a:	fb02 f303 	mul.w	r3, r2, r3
 800734e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007350:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007352:	444b      	add	r3, r9
 8007354:	9317      	str	r3, [sp, #92]	@ 0x5c
 8007356:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007358:	930e      	str	r3, [sp, #56]	@ 0x38
 800735a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800735c:	e9cd 761a 	strd	r7, r6, [sp, #104]	@ 0x68
 8007360:	930a      	str	r3, [sp, #40]	@ 0x28
 8007362:	e9cd 591c 	strd	r5, r9, [sp, #112]	@ 0x70
 8007366:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007368:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 800736a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800736c:	f001 fed4 	bl	8009118 <st_int8_copy>
 8007370:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007372:	2b00      	cmp	r3, #0
 8007374:	f000 811d 	beq.w	80075b2 <forward_lite_conv2d_if32of32wf32+0x34a>
 8007378:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800737a:	ecf3 6a01 	vldmia	r3!, {s13}
 800737e:	930e      	str	r3, [sp, #56]	@ 0x38
 8007380:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 8007382:	2b00      	cmp	r3, #0
 8007384:	f000 80e8 	beq.w	8007558 <forward_lite_conv2d_if32of32wf32+0x2f0>
 8007388:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800738a:	2000      	movs	r0, #0
 800738c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800738e:	9201      	str	r2, [sp, #4]
 8007390:	4602      	mov	r2, r0
 8007392:	9d10      	ldr	r5, [sp, #64]	@ 0x40
 8007394:	4650      	mov	r0, sl
 8007396:	4614      	mov	r4, r2
 8007398:	f8cd a07c 	str.w	sl, [sp, #124]	@ 0x7c
 800739c:	2d00      	cmp	r5, #0
 800739e:	f2c0 80ff 	blt.w	80075a0 <forward_lite_conv2d_if32of32wf32+0x338>
 80073a2:	9a01      	ldr	r2, [sp, #4]
 80073a4:	2600      	movs	r6, #0
 80073a6:	9203      	str	r2, [sp, #12]
 80073a8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80073aa:	9938      	ldr	r1, [sp, #224]	@ 0xe0
 80073ac:	9f00      	ldr	r7, [sp, #0]
 80073ae:	fb02 1207 	mla	r2, r2, r7, r1
 80073b2:	993b      	ldr	r1, [sp, #236]	@ 0xec
 80073b4:	18cf      	adds	r7, r1, r3
 80073b6:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 80073b8:	428f      	cmp	r7, r1
 80073ba:	bf94      	ite	ls
 80073bc:	ebc6 0607 	rsbls	r6, r6, r7
 80073c0:	ebc6 0601 	rsbhi	r6, r6, r1
 80073c4:	993b      	ldr	r1, [sp, #236]	@ 0xec
 80073c6:	f1b8 0f00 	cmp.w	r8, #0
 80073ca:	eba1 0b06 	sub.w	fp, r1, r6
 80073ce:	993f      	ldr	r1, [sp, #252]	@ 0xfc
 80073d0:	eba1 0a06 	sub.w	sl, r1, r6
 80073d4:	9939      	ldr	r1, [sp, #228]	@ 0xe4
 80073d6:	fb01 f606 	mul.w	r6, r1, r6
 80073da:	f340 80e7 	ble.w	80075ac <forward_lite_conv2d_if32of32wf32+0x344>
 80073de:	9f00      	ldr	r7, [sp, #0]
 80073e0:	eeb0 7a66 	vmov.f32	s14, s13
 80073e4:	f04f 0c00 	mov.w	ip, #0
 80073e8:	9903      	ldr	r1, [sp, #12]
 80073ea:	fb07 fb0b 	mul.w	fp, r7, fp
 80073ee:	fb07 fa0a 	mul.w	sl, r7, sl
 80073f2:	f026 070f 	bic.w	r7, r6, #15
 80073f6:	9408      	str	r4, [sp, #32]
 80073f8:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 80073fc:	9303      	str	r3, [sp, #12]
 80073fe:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8007402:	f109 0901 	add.w	r9, r9, #1
 8007406:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 800740a:	ea4f 1909 	mov.w	r9, r9, lsl #4
 800740e:	e9cd 0506 	strd	r0, r5, [sp, #24]
 8007412:	2f00      	cmp	r7, #0
 8007414:	f340 80c2 	ble.w	800759c <forward_lite_conv2d_if32of32wf32+0x334>
 8007418:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 800741c:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8007420:	2400      	movs	r4, #0
 8007422:	ed10 6a0f 	vldr	s12, [r0, #-60]	@ 0xffffffc4
 8007426:	3410      	adds	r4, #16
 8007428:	ed53 7a0f 	vldr	s15, [r3, #-60]	@ 0xffffffc4
 800742c:	3040      	adds	r0, #64	@ 0x40
 800742e:	ed53 4a10 	vldr	s9, [r3, #-64]	@ 0xffffffc0
 8007432:	42bc      	cmp	r4, r7
 8007434:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007438:	ed10 5a20 	vldr	s10, [r0, #-128]	@ 0xffffff80
 800743c:	ed53 5a0e 	vldr	s11, [r3, #-56]	@ 0xffffffc8
 8007440:	f103 0340 	add.w	r3, r3, #64	@ 0x40
 8007444:	ed10 6a1e 	vldr	s12, [r0, #-120]	@ 0xffffff88
 8007448:	eee4 7a85 	vfma.f32	s15, s9, s10
 800744c:	ed53 da1d 	vldr	s27, [r3, #-116]	@ 0xffffff8c
 8007450:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 8007454:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8007458:	ed50 ca1c 	vldr	s25, [r0, #-112]	@ 0xffffff90
 800745c:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8007460:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8007464:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007468:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 800746c:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8007470:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8007474:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8007478:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 800747c:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 8007480:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8007484:	ed10 0a17 	vldr	s0, [r0, #-92]	@ 0xffffffa4
 8007488:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 800748c:	ed10 1a16 	vldr	s2, [r0, #-88]	@ 0xffffffa8
 8007490:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 8007494:	ed10 2a15 	vldr	s4, [r0, #-84]	@ 0xffffffac
 8007498:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 800749c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 80074a0:	ed13 3a14 	vldr	s6, [r3, #-80]	@ 0xffffffb0
 80074a4:	ed50 3a14 	vldr	s7, [r0, #-80]	@ 0xffffffb0
 80074a8:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 80074ac:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 80074b0:	ed10 5a12 	vldr	s10, [r0, #-72]	@ 0xffffffb8
 80074b4:	ed53 5a12 	vldr	s11, [r3, #-72]	@ 0xffffffb8
 80074b8:	eeec 7a2b 	vfma.f32	s15, s24, s23
 80074bc:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 80074c0:	ed53 da11 	vldr	s27, [r3, #-68]	@ 0xffffffbc
 80074c4:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 80074c8:	eeea 7a29 	vfma.f32	s15, s20, s19
 80074cc:	eee9 7a28 	vfma.f32	s15, s18, s17
 80074d0:	eee0 7a20 	vfma.f32	s15, s0, s1
 80074d4:	eee1 7a21 	vfma.f32	s15, s2, s3
 80074d8:	eee2 7a22 	vfma.f32	s15, s4, s5
 80074dc:	eee3 7a23 	vfma.f32	s15, s6, s7
 80074e0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80074e4:	eee5 7a25 	vfma.f32	s15, s10, s11
 80074e8:	eee6 7a2d 	vfma.f32	s15, s12, s27
 80074ec:	ee37 7a27 	vadd.f32	s14, s14, s15
 80074f0:	db97      	blt.n	8007422 <forward_lite_conv2d_if32of32wf32+0x1ba>
 80074f2:	4471      	add	r1, lr
 80074f4:	4472      	add	r2, lr
 80074f6:	4648      	mov	r0, r9
 80074f8:	4286      	cmp	r6, r0
 80074fa:	dd10      	ble.n	800751e <forward_lite_conv2d_if32of32wf32+0x2b6>
 80074fc:	4603      	mov	r3, r0
 80074fe:	460d      	mov	r5, r1
 8007500:	4614      	mov	r4, r2
 8007502:	3301      	adds	r3, #1
 8007504:	ecb4 6a01 	vldmia	r4!, {s12}
 8007508:	ecf5 7a01 	vldmia	r5!, {s15}
 800750c:	429e      	cmp	r6, r3
 800750e:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007512:	d1f6      	bne.n	8007502 <forward_lite_conv2d_if32of32wf32+0x29a>
 8007514:	1a30      	subs	r0, r6, r0
 8007516:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 800751a:	eb01 0180 	add.w	r1, r1, r0, lsl #2
 800751e:	f10c 0c01 	add.w	ip, ip, #1
 8007522:	4459      	add	r1, fp
 8007524:	4452      	add	r2, sl
 8007526:	45e0      	cmp	r8, ip
 8007528:	f47f af73 	bne.w	8007412 <forward_lite_conv2d_if32of32wf32+0x1aa>
 800752c:	9c08      	ldr	r4, [sp, #32]
 800752e:	9b03      	ldr	r3, [sp, #12]
 8007530:	e9dd 0506 	ldrd	r0, r5, [sp, #24]
 8007534:	9a05      	ldr	r2, [sp, #20]
 8007536:	3401      	adds	r4, #1
 8007538:	9902      	ldr	r1, [sp, #8]
 800753a:	4415      	add	r5, r2
 800753c:	1a9b      	subs	r3, r3, r2
 800753e:	ed80 7a00 	vstr	s14, [r0]
 8007542:	4408      	add	r0, r1
 8007544:	9a01      	ldr	r2, [sp, #4]
 8007546:	9904      	ldr	r1, [sp, #16]
 8007548:	440a      	add	r2, r1
 800754a:	9201      	str	r2, [sp, #4]
 800754c:	9a3d      	ldr	r2, [sp, #244]	@ 0xf4
 800754e:	42a2      	cmp	r2, r4
 8007550:	f47f af24 	bne.w	800739c <forward_lite_conv2d_if32of32wf32+0x134>
 8007554:	f8dd a07c 	ldr.w	sl, [sp, #124]	@ 0x7c
 8007558:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800755a:	f10a 0a04 	add.w	sl, sl, #4
 800755e:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007560:	4413      	add	r3, r2
 8007562:	930a      	str	r3, [sp, #40]	@ 0x28
 8007564:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007566:	459a      	cmp	sl, r3
 8007568:	f4ff aefd 	bcc.w	8007366 <forward_lite_conv2d_if32of32wf32+0xfe>
 800756c:	9c1e      	ldr	r4, [sp, #120]	@ 0x78
 800756e:	e9dd 761a 	ldrd	r7, r6, [sp, #104]	@ 0x68
 8007572:	e9dd 591c 	ldrd	r5, r9, [sp, #112]	@ 0x70
 8007576:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8007578:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800757a:	4414      	add	r4, r2
 800757c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800757e:	3301      	adds	r3, #1
 8007580:	4417      	add	r7, r2
 8007582:	1aad      	subs	r5, r5, r2
 8007584:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8007586:	930f      	str	r3, [sp, #60]	@ 0x3c
 8007588:	4416      	add	r6, r2
 800758a:	9a3e      	ldr	r2, [sp, #248]	@ 0xf8
 800758c:	429a      	cmp	r2, r3
 800758e:	f47f aeba 	bne.w	8007306 <forward_lite_conv2d_if32of32wf32+0x9e>
 8007592:	b021      	add	sp, #132	@ 0x84
 8007594:	ecbd 8b0e 	vpop	{d8-d14}
 8007598:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800759c:	2000      	movs	r0, #0
 800759e:	e7ab      	b.n	80074f8 <forward_lite_conv2d_if32of32wf32+0x290>
 80075a0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80075a2:	461e      	mov	r6, r3
 80075a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80075a6:	441a      	add	r2, r3
 80075a8:	9103      	str	r1, [sp, #12]
 80075aa:	e6fe      	b.n	80073aa <forward_lite_conv2d_if32of32wf32+0x142>
 80075ac:	eeb0 7a66 	vmov.f32	s14, s13
 80075b0:	e7c0      	b.n	8007534 <forward_lite_conv2d_if32of32wf32+0x2cc>
 80075b2:	eef0 6a48 	vmov.f32	s13, s16
 80075b6:	e6e3      	b.n	8007380 <forward_lite_conv2d_if32of32wf32+0x118>
 80075b8:	00000000 	.word	0x00000000
 80075bc:	9a02      	ldr	r2, [sp, #8]
 80075be:	eb04 0c02 	add.w	ip, r4, r2
 80075c2:	4564      	cmp	r4, ip
 80075c4:	d2d7      	bcs.n	8007576 <forward_lite_conv2d_if32of32wf32+0x30e>
 80075c6:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 80075c8:	4683      	mov	fp, r0
 80075ca:	9911      	ldr	r1, [sp, #68]	@ 0x44
 80075cc:	fb02 f303 	mul.w	r3, r2, r3
 80075d0:	4622      	mov	r2, r4
 80075d2:	9109      	str	r1, [sp, #36]	@ 0x24
 80075d4:	930a      	str	r3, [sp, #40]	@ 0x28
 80075d6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80075d8:	970e      	str	r7, [sp, #56]	@ 0x38
 80075da:	eb03 0e09 	add.w	lr, r3, r9
 80075de:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80075e0:	9615      	str	r6, [sp, #84]	@ 0x54
 80075e2:	9517      	str	r5, [sp, #92]	@ 0x5c
 80075e4:	941a      	str	r4, [sp, #104]	@ 0x68
 80075e6:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80075e8:	2900      	cmp	r1, #0
 80075ea:	f000 810d 	beq.w	8007808 <forward_lite_conv2d_if32of32wf32+0x5a0>
 80075ee:	ecf3 6a01 	vldmia	r3!, {s13}
 80075f2:	993d      	ldr	r1, [sp, #244]	@ 0xf4
 80075f4:	2900      	cmp	r1, #0
 80075f6:	f000 80ef 	beq.w	80077d8 <forward_lite_conv2d_if32of32wf32+0x570>
 80075fa:	2100      	movs	r1, #0
 80075fc:	9812      	ldr	r0, [sp, #72]	@ 0x48
 80075fe:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007600:	f8cd e004 	str.w	lr, [sp, #4]
 8007604:	f8cd e07c 	str.w	lr, [sp, #124]	@ 0x7c
 8007608:	e9cd 321b 	strd	r3, r2, [sp, #108]	@ 0x6c
 800760c:	460b      	mov	r3, r1
 800760e:	4611      	mov	r1, r2
 8007610:	461d      	mov	r5, r3
 8007612:	e9cd c91d 	strd	ip, r9, [sp, #116]	@ 0x74
 8007616:	2e00      	cmp	r6, #0
 8007618:	f2c0 80ed 	blt.w	80077f6 <forward_lite_conv2d_if32of32wf32+0x58e>
 800761c:	9b01      	ldr	r3, [sp, #4]
 800761e:	2400      	movs	r4, #0
 8007620:	9303      	str	r3, [sp, #12]
 8007622:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007624:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007626:	9f00      	ldr	r7, [sp, #0]
 8007628:	fb03 2307 	mla	r3, r3, r7, r2
 800762c:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 800762e:	1817      	adds	r7, r2, r0
 8007630:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 8007632:	4297      	cmp	r7, r2
 8007634:	bf94      	ite	ls
 8007636:	ebc4 0407 	rsbls	r4, r4, r7
 800763a:	ebc4 0402 	rsbhi	r4, r4, r2
 800763e:	9a3b      	ldr	r2, [sp, #236]	@ 0xec
 8007640:	f1bb 0f00 	cmp.w	fp, #0
 8007644:	eba2 0a04 	sub.w	sl, r2, r4
 8007648:	9a3f      	ldr	r2, [sp, #252]	@ 0xfc
 800764a:	eba2 0904 	sub.w	r9, r2, r4
 800764e:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8007650:	fb02 f404 	mul.w	r4, r2, r4
 8007654:	f340 80d5 	ble.w	8007802 <forward_lite_conv2d_if32of32wf32+0x59a>
 8007658:	f024 0c0f 	bic.w	ip, r4, #15
 800765c:	9f00      	ldr	r7, [sp, #0]
 800765e:	eeb0 7a66 	vmov.f32	s14, s13
 8007662:	9a03      	ldr	r2, [sp, #12]
 8007664:	f10c 38ff 	add.w	r8, ip, #4294967295	@ 0xffffffff
 8007668:	fb07 fa0a 	mul.w	sl, r7, sl
 800766c:	fb07 f909 	mul.w	r9, r7, r9
 8007670:	2700      	movs	r7, #0
 8007672:	ea4f 1818 	mov.w	r8, r8, lsr #4
 8007676:	9508      	str	r5, [sp, #32]
 8007678:	9003      	str	r0, [sp, #12]
 800767a:	f108 0801 	add.w	r8, r8, #1
 800767e:	ea4f 1e88 	mov.w	lr, r8, lsl #6
 8007682:	ea4f 1808 	mov.w	r8, r8, lsl #4
 8007686:	e9cd 1606 	strd	r1, r6, [sp, #24]
 800768a:	f1bc 0f00 	cmp.w	ip, #0
 800768e:	f340 80b0 	ble.w	80077f2 <forward_lite_conv2d_if32of32wf32+0x58a>
 8007692:	f102 0040 	add.w	r0, r2, #64	@ 0x40
 8007696:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 800769a:	2500      	movs	r5, #0
 800769c:	ed11 6a0f 	vldr	s12, [r1, #-60]	@ 0xffffffc4
 80076a0:	3510      	adds	r5, #16
 80076a2:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 80076a6:	3140      	adds	r1, #64	@ 0x40
 80076a8:	ed10 5a10 	vldr	s10, [r0, #-64]	@ 0xffffffc0
 80076ac:	4565      	cmp	r5, ip
 80076ae:	ee67 7a86 	vmul.f32	s15, s15, s12
 80076b2:	ed51 4a20 	vldr	s9, [r1, #-128]	@ 0xffffff80
 80076b6:	ed10 6a0e 	vldr	s12, [r0, #-56]	@ 0xffffffc8
 80076ba:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 80076be:	ed51 5a1e 	vldr	s11, [r1, #-120]	@ 0xffffff88
 80076c2:	eee4 7a85 	vfma.f32	s15, s9, s10
 80076c6:	ed51 da1d 	vldr	s27, [r1, #-116]	@ 0xffffff8c
 80076ca:	ed10 ea1d 	vldr	s28, [r0, #-116]	@ 0xffffff8c
 80076ce:	ed10 da1c 	vldr	s26, [r0, #-112]	@ 0xffffff90
 80076d2:	ed51 ca1c 	vldr	s25, [r1, #-112]	@ 0xffffff90
 80076d6:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 80076da:	ed51 ba1b 	vldr	s23, [r1, #-108]	@ 0xffffff94
 80076de:	eee5 7a86 	vfma.f32	s15, s11, s12
 80076e2:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 80076e6:	ed51 aa1a 	vldr	s21, [r1, #-104]	@ 0xffffff98
 80076ea:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 80076ee:	ed51 9a19 	vldr	s19, [r1, #-100]	@ 0xffffff9c
 80076f2:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 80076f6:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 80076fa:	eeed 7a8e 	vfma.f32	s15, s27, s28
 80076fe:	ed50 0a17 	vldr	s1, [r0, #-92]	@ 0xffffffa4
 8007702:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8007706:	ed50 1a16 	vldr	s3, [r0, #-88]	@ 0xffffffa8
 800770a:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 800770e:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8007712:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 8007716:	eeed 7a2c 	vfma.f32	s15, s26, s25
 800771a:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 800771e:	ed51 3a14 	vldr	s7, [r1, #-80]	@ 0xffffffb0
 8007722:	ed50 4a13 	vldr	s9, [r0, #-76]	@ 0xffffffb4
 8007726:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 800772a:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 800772e:	ed11 5a12 	vldr	s10, [r1, #-72]	@ 0xffffffb8
 8007732:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007736:	ed10 6a11 	vldr	s12, [r0, #-68]	@ 0xffffffbc
 800773a:	ed51 da11 	vldr	s27, [r1, #-68]	@ 0xffffffbc
 800773e:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8007742:	eeea 7a29 	vfma.f32	s15, s20, s19
 8007746:	eee9 7a28 	vfma.f32	s15, s18, s17
 800774a:	eee0 7a20 	vfma.f32	s15, s0, s1
 800774e:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007752:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007756:	eee3 7a23 	vfma.f32	s15, s6, s7
 800775a:	eee4 7a24 	vfma.f32	s15, s8, s9
 800775e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007762:	eee6 7a2d 	vfma.f32	s15, s12, s27
 8007766:	ee37 7a27 	vadd.f32	s14, s14, s15
 800776a:	db97      	blt.n	800769c <forward_lite_conv2d_if32of32wf32+0x434>
 800776c:	4472      	add	r2, lr
 800776e:	4473      	add	r3, lr
 8007770:	4641      	mov	r1, r8
 8007772:	428c      	cmp	r4, r1
 8007774:	dd10      	ble.n	8007798 <forward_lite_conv2d_if32of32wf32+0x530>
 8007776:	4608      	mov	r0, r1
 8007778:	4616      	mov	r6, r2
 800777a:	461d      	mov	r5, r3
 800777c:	3001      	adds	r0, #1
 800777e:	ecb5 6a01 	vldmia	r5!, {s12}
 8007782:	ecf6 7a01 	vldmia	r6!, {s15}
 8007786:	4284      	cmp	r4, r0
 8007788:	eea6 7a27 	vfma.f32	s14, s12, s15
 800778c:	d1f6      	bne.n	800777c <forward_lite_conv2d_if32of32wf32+0x514>
 800778e:	1a61      	subs	r1, r4, r1
 8007790:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007794:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007798:	3701      	adds	r7, #1
 800779a:	4452      	add	r2, sl
 800779c:	444b      	add	r3, r9
 800779e:	45bb      	cmp	fp, r7
 80077a0:	f47f af73 	bne.w	800768a <forward_lite_conv2d_if32of32wf32+0x422>
 80077a4:	9d08      	ldr	r5, [sp, #32]
 80077a6:	9803      	ldr	r0, [sp, #12]
 80077a8:	e9dd 1606 	ldrd	r1, r6, [sp, #24]
 80077ac:	9b05      	ldr	r3, [sp, #20]
 80077ae:	3501      	adds	r5, #1
 80077b0:	9a02      	ldr	r2, [sp, #8]
 80077b2:	441e      	add	r6, r3
 80077b4:	1ac0      	subs	r0, r0, r3
 80077b6:	ed81 7a00 	vstr	s14, [r1]
 80077ba:	4411      	add	r1, r2
 80077bc:	9b01      	ldr	r3, [sp, #4]
 80077be:	9a04      	ldr	r2, [sp, #16]
 80077c0:	4413      	add	r3, r2
 80077c2:	9301      	str	r3, [sp, #4]
 80077c4:	9b3d      	ldr	r3, [sp, #244]	@ 0xf4
 80077c6:	42ab      	cmp	r3, r5
 80077c8:	f47f af25 	bne.w	8007616 <forward_lite_conv2d_if32of32wf32+0x3ae>
 80077cc:	f8dd e07c 	ldr.w	lr, [sp, #124]	@ 0x7c
 80077d0:	e9dd 321b 	ldrd	r3, r2, [sp, #108]	@ 0x6c
 80077d4:	e9dd c91d 	ldrd	ip, r9, [sp, #116]	@ 0x74
 80077d8:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80077da:	3204      	adds	r2, #4
 80077dc:	980d      	ldr	r0, [sp, #52]	@ 0x34
 80077de:	4562      	cmp	r2, ip
 80077e0:	4401      	add	r1, r0
 80077e2:	9109      	str	r1, [sp, #36]	@ 0x24
 80077e4:	f4ff aeff 	bcc.w	80075e6 <forward_lite_conv2d_if32of32wf32+0x37e>
 80077e8:	9f0e      	ldr	r7, [sp, #56]	@ 0x38
 80077ea:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 80077ec:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 80077ee:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 80077f0:	e6c1      	b.n	8007576 <forward_lite_conv2d_if32of32wf32+0x30e>
 80077f2:	2100      	movs	r1, #0
 80077f4:	e7bd      	b.n	8007772 <forward_lite_conv2d_if32of32wf32+0x50a>
 80077f6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80077f8:	4604      	mov	r4, r0
 80077fa:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 80077fc:	4403      	add	r3, r0
 80077fe:	9203      	str	r2, [sp, #12]
 8007800:	e710      	b.n	8007624 <forward_lite_conv2d_if32of32wf32+0x3bc>
 8007802:	eeb0 7a66 	vmov.f32	s14, s13
 8007806:	e7d1      	b.n	80077ac <forward_lite_conv2d_if32of32wf32+0x544>
 8007808:	eef0 6a48 	vmov.f32	s13, s16
 800780c:	e6f1      	b.n	80075f2 <forward_lite_conv2d_if32of32wf32+0x38a>
 800780e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007810:	462b      	mov	r3, r5
 8007812:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007814:	e57c      	b.n	8007310 <forward_lite_conv2d_if32of32wf32+0xa8>
 8007816:	bf00      	nop

08007818 <forward_lite_conv2d_if32of32wf32_pool>:
 8007818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800781c:	ed2d 8b0e 	vpush	{d8-d14}
 8007820:	b0c5      	sub	sp, #276	@ 0x114
 8007822:	4694      	mov	ip, r2
 8007824:	4680      	mov	r8, r0
 8007826:	f9bd 4178 	ldrsh.w	r4, [sp, #376]	@ 0x178
 800782a:	f9bd 51bc 	ldrsh.w	r5, [sp, #444]	@ 0x1bc
 800782e:	931f      	str	r3, [sp, #124]	@ 0x7c
 8007830:	9410      	str	r4, [sp, #64]	@ 0x40
 8007832:	f9bd 31dc 	ldrsh.w	r3, [sp, #476]	@ 0x1dc
 8007836:	f8bd 41a0 	ldrh.w	r4, [sp, #416]	@ 0x1a0
 800783a:	912e      	str	r1, [sp, #184]	@ 0xb8
 800783c:	922f      	str	r2, [sp, #188]	@ 0xbc
 800783e:	fb05 f103 	mul.w	r1, r5, r3
 8007842:	f9bd 2190 	ldrsh.w	r2, [sp, #400]	@ 0x190
 8007846:	9327      	str	r3, [sp, #156]	@ 0x9c
 8007848:	9411      	str	r4, [sp, #68]	@ 0x44
 800784a:	f9bd 3184 	ldrsh.w	r3, [sp, #388]	@ 0x184
 800784e:	f8bd 41a4 	ldrh.w	r4, [sp, #420]	@ 0x1a4
 8007852:	f9bd 718c 	ldrsh.w	r7, [sp, #396]	@ 0x18c
 8007856:	f9bd 6180 	ldrsh.w	r6, [sp, #384]	@ 0x180
 800785a:	9339      	str	r3, [sp, #228]	@ 0xe4
 800785c:	2f00      	cmp	r7, #0
 800785e:	f9bd 3188 	ldrsh.w	r3, [sp, #392]	@ 0x188
 8007862:	920a      	str	r2, [sp, #40]	@ 0x28
 8007864:	9426      	str	r4, [sp, #152]	@ 0x98
 8007866:	f8bd 2198 	ldrh.w	r2, [sp, #408]	@ 0x198
 800786a:	f9bd 41a8 	ldrsh.w	r4, [sp, #424]	@ 0x1a8
 800786e:	f9bd e17c 	ldrsh.w	lr, [sp, #380]	@ 0x17c
 8007872:	9038      	str	r0, [sp, #224]	@ 0xe0
 8007874:	9330      	str	r3, [sp, #192]	@ 0xc0
 8007876:	f8bd 019c 	ldrh.w	r0, [sp, #412]	@ 0x19c
 800787a:	fb0e f101 	mul.w	r1, lr, r1
 800787e:	9225      	str	r2, [sp, #148]	@ 0x94
 8007880:	f9bd 3194 	ldrsh.w	r3, [sp, #404]	@ 0x194
 8007884:	950d      	str	r5, [sp, #52]	@ 0x34
 8007886:	9731      	str	r7, [sp, #196]	@ 0xc4
 8007888:	960f      	str	r6, [sp, #60]	@ 0x3c
 800788a:	943a      	str	r4, [sp, #232]	@ 0xe8
 800788c:	f9bd 41d8 	ldrsh.w	r4, [sp, #472]	@ 0x1d8
 8007890:	f9bd 21c0 	ldrsh.w	r2, [sp, #448]	@ 0x1c0
 8007894:	943b      	str	r4, [sp, #236]	@ 0xec
 8007896:	f9bd 41e0 	ldrsh.w	r4, [sp, #480]	@ 0x1e0
 800789a:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 800789e:	943c      	str	r4, [sp, #240]	@ 0xf0
 80078a0:	f9bd 41e4 	ldrsh.w	r4, [sp, #484]	@ 0x1e4
 80078a4:	9420      	str	r4, [sp, #128]	@ 0x80
 80078a6:	f9bd 41e8 	ldrsh.w	r4, [sp, #488]	@ 0x1e8
 80078aa:	943d      	str	r4, [sp, #244]	@ 0xf4
 80078ac:	f9bd 41ec 	ldrsh.w	r4, [sp, #492]	@ 0x1ec
 80078b0:	940c      	str	r4, [sp, #48]	@ 0x30
 80078b2:	f1c0 0400 	rsb	r4, r0, #0
 80078b6:	941b      	str	r4, [sp, #108]	@ 0x6c
 80078b8:	f340 8270 	ble.w	8007d9c <forward_lite_conv2d_if32of32wf32_pool+0x584>
 80078bc:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 80078be:	2a00      	cmp	r2, #0
 80078c0:	9c10      	ldr	r4, [sp, #64]	@ 0x40
 80078c2:	fb07 f303 	mul.w	r3, r7, r3
 80078c6:	ed9f 8a72 	vldr	s16, [pc, #456]	@ 8007a90 <forward_lite_conv2d_if32of32wf32_pool+0x278>
 80078ca:	901c      	str	r0, [sp, #112]	@ 0x70
 80078cc:	fb04 f303 	mul.w	r3, r4, r3
 80078d0:	9820      	ldr	r0, [sp, #128]	@ 0x80
 80078d2:	ea4f 0783 	mov.w	r7, r3, lsl #2
 80078d6:	fb0e f300 	mul.w	r3, lr, r0
 80078da:	fb05 f303 	mul.w	r3, r5, r3
 80078de:	9721      	str	r7, [sp, #132]	@ 0x84
 80078e0:	ea4f 0784 	mov.w	r7, r4, lsl #2
 80078e4:	ea4f 0083 	mov.w	r0, r3, lsl #2
 80078e8:	fb0e f505 	mul.w	r5, lr, r5
 80078ec:	9712      	str	r7, [sp, #72]	@ 0x48
 80078ee:	9035      	str	r0, [sp, #212]	@ 0xd4
 80078f0:	9826      	ldr	r0, [sp, #152]	@ 0x98
 80078f2:	9534      	str	r5, [sp, #208]	@ 0xd0
 80078f4:	f10c 4578 	add.w	r5, ip, #4160749568	@ 0xf8000000
 80078f8:	fb00 f306 	mul.w	r3, r0, r6
 80078fc:	9532      	str	r5, [sp, #200]	@ 0xc8
 80078fe:	ea4f 058e 	mov.w	r5, lr, lsl #2
 8007902:	fb04 f303 	mul.w	r3, r4, r3
 8007906:	950e      	str	r5, [sp, #56]	@ 0x38
 8007908:	ea4f 0083 	mov.w	r0, r3, lsl #2
 800790c:	9b30      	ldr	r3, [sp, #192]	@ 0xc0
 800790e:	902c      	str	r0, [sp, #176]	@ 0xb0
 8007910:	ea4f 0081 	mov.w	r0, r1, lsl #2
 8007914:	fb0e f303 	mul.w	r3, lr, r3
 8007918:	902a      	str	r0, [sp, #168]	@ 0xa8
 800791a:	985c      	ldr	r0, [sp, #368]	@ 0x170
 800791c:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8007920:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 8007922:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007924:	ea4f 0183 	mov.w	r1, r3, lsl #2
 8007928:	fb06 f307 	mul.w	r3, r6, r7
 800792c:	f8dd b02c 	ldr.w	fp, [sp, #44]	@ 0x2c
 8007930:	9133      	str	r1, [sp, #204]	@ 0xcc
 8007932:	4639      	mov	r1, r7
 8007934:	fb00 8603 	mla	r6, r0, r3, r8
 8007938:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 800793a:	982a      	ldr	r0, [sp, #168]	@ 0xa8
 800793c:	961d      	str	r6, [sp, #116]	@ 0x74
 800793e:	f1c3 0600 	rsb	r6, r3, #0
 8007942:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007944:	f1c0 0000 	rsb	r0, r0, #0
 8007948:	9629      	str	r6, [sp, #164]	@ 0xa4
 800794a:	fb03 f304 	mul.w	r3, r3, r4
 800794e:	f04f 0400 	mov.w	r4, #0
 8007952:	9023      	str	r0, [sp, #140]	@ 0x8c
 8007954:	ea4f 0783 	mov.w	r7, r3, lsl #2
 8007958:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800795a:	fb06 f001 	mul.w	r0, r6, r1
 800795e:	9e5c      	ldr	r6, [sp, #368]	@ 0x170
 8007960:	932b      	str	r3, [sp, #172]	@ 0xac
 8007962:	4698      	mov	r8, r3
 8007964:	f102 33ff 	add.w	r3, r2, #4294967295	@ 0xffffffff
 8007968:	9713      	str	r7, [sp, #76]	@ 0x4c
 800796a:	9424      	str	r4, [sp, #144]	@ 0x90
 800796c:	464f      	mov	r7, r9
 800796e:	b21b      	sxth	r3, r3
 8007970:	941e      	str	r4, [sp, #120]	@ 0x78
 8007972:	902d      	str	r0, [sp, #180]	@ 0xb4
 8007974:	4634      	mov	r4, r6
 8007976:	9322      	str	r3, [sp, #136]	@ 0x88
 8007978:	4676      	mov	r6, lr
 800797a:	f300 808b 	bgt.w	8007a94 <forward_lite_conv2d_if32of32wf32_pool+0x27c>
 800797e:	2b00      	cmp	r3, #0
 8007980:	f280 822b 	bge.w	8007dda <forward_lite_conv2d_if32of32wf32_pool+0x5c2>
 8007984:	9b34      	ldr	r3, [sp, #208]	@ 0xd0
 8007986:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 8007988:	fb03 f308 	mul.w	r3, r3, r8
 800798c:	eba4 0383 	sub.w	r3, r4, r3, lsl #2
 8007990:	429a      	cmp	r2, r3
 8007992:	d901      	bls.n	8007998 <forward_lite_conv2d_if32of32wf32_pool+0x180>
 8007994:	9a2a      	ldr	r2, [sp, #168]	@ 0xa8
 8007996:	4413      	add	r3, r2
 8007998:	9a5c      	ldr	r2, [sp, #368]	@ 0x170
 800799a:	429a      	cmp	r2, r3
 800799c:	d213      	bcs.n	80079c6 <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 800799e:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80079a0:	4542      	cmp	r2, r8
 80079a2:	d010      	beq.n	80079c6 <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80079a4:	459b      	cmp	fp, r3
 80079a6:	d90e      	bls.n	80079c6 <forward_lite_conv2d_if32of32wf32_pool+0x1ae>
 80079a8:	4621      	mov	r1, r4
 80079aa:	461a      	mov	r2, r3
 80079ac:	f852 0b04 	ldr.w	r0, [r2], #4
 80079b0:	4593      	cmp	fp, r2
 80079b2:	f841 0b04 	str.w	r0, [r1], #4
 80079b6:	d8f9      	bhi.n	80079ac <forward_lite_conv2d_if32of32wf32_pool+0x194>
 80079b8:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80079bc:	1ad3      	subs	r3, r2, r3
 80079be:	f023 0303 	bic.w	r3, r3, #3
 80079c2:	3304      	adds	r3, #4
 80079c4:	441c      	add	r4, r3
 80079c6:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 80079c8:	fa1f f388 	uxth.w	r3, r8
 80079cc:	9927      	ldr	r1, [sp, #156]	@ 0x9c
 80079ce:	440a      	add	r2, r1
 80079d0:	9935      	ldr	r1, [sp, #212]	@ 0xd4
 80079d2:	1ad2      	subs	r2, r2, r3
 80079d4:	440c      	add	r4, r1
 80079d6:	9920      	ldr	r1, [sp, #128]	@ 0x80
 80079d8:	b212      	sxth	r2, r2
 80079da:	45a3      	cmp	fp, r4
 80079dc:	440b      	add	r3, r1
 80079de:	9224      	str	r2, [sp, #144]	@ 0x90
 80079e0:	fa0f f883 	sxth.w	r8, r3
 80079e4:	d803      	bhi.n	80079ee <forward_lite_conv2d_if32of32wf32_pool+0x1d6>
 80079e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80079e8:	441c      	add	r4, r3
 80079ea:	45a3      	cmp	fp, r4
 80079ec:	d9fc      	bls.n	80079e8 <forward_lite_conv2d_if32of32wf32_pool+0x1d0>
 80079ee:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 80079f0:	4542      	cmp	r2, r8
 80079f2:	f300 81c3 	bgt.w	8007d7c <forward_lite_conv2d_if32of32wf32_pool+0x564>
 80079f6:	9d26      	ldr	r5, [sp, #152]	@ 0x98
 80079f8:	981b      	ldr	r0, [sp, #108]	@ 0x6c
 80079fa:	992e      	ldr	r1, [sp, #184]	@ 0xb8
 80079fc:	4428      	add	r0, r5
 80079fe:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007a00:	9108      	str	r1, [sp, #32]
 8007a02:	901b      	str	r0, [sp, #108]	@ 0x6c
 8007a04:	3301      	adds	r3, #1
 8007a06:	9833      	ldr	r0, [sp, #204]	@ 0xcc
 8007a08:	b21b      	sxth	r3, r3
 8007a0a:	f8dd a0ac 	ldr.w	sl, [sp, #172]	@ 0xac
 8007a0e:	4401      	add	r1, r0
 8007a10:	982c      	ldr	r0, [sp, #176]	@ 0xb0
 8007a12:	931e      	str	r3, [sp, #120]	@ 0x78
 8007a14:	b293      	uxth	r3, r2
 8007a16:	912e      	str	r1, [sp, #184]	@ 0xb8
 8007a18:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8007a1a:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 8007a1c:	1b49      	subs	r1, r1, r5
 8007a1e:	9301      	str	r3, [sp, #4]
 8007a20:	1a9b      	subs	r3, r3, r2
 8007a22:	9d75      	ldr	r5, [sp, #468]	@ 0x1d4
 8007a24:	911c      	str	r1, [sp, #112]	@ 0x70
 8007a26:	991d      	ldr	r1, [sp, #116]	@ 0x74
 8007a28:	b29a      	uxth	r2, r3
 8007a2a:	f8bd 3080 	ldrh.w	r3, [sp, #128]	@ 0x80
 8007a2e:	4401      	add	r1, r0
 8007a30:	985c      	ldr	r0, [sp, #368]	@ 0x170
 8007a32:	9305      	str	r3, [sp, #20]
 8007a34:	911d      	str	r1, [sp, #116]	@ 0x74
 8007a36:	eba8 0103 	sub.w	r1, r8, r3
 8007a3a:	fa1f f38a 	uxth.w	r3, sl
 8007a3e:	fa0f f881 	sxth.w	r8, r1
 8007a42:	f8bd 1034 	ldrh.w	r1, [sp, #52]	@ 0x34
 8007a46:	9303      	str	r3, [sp, #12]
 8007a48:	2301      	movs	r3, #1
 8007a4a:	9307      	str	r3, [sp, #28]
 8007a4c:	f8bd 30c0 	ldrh.w	r3, [sp, #192]	@ 0xc0
 8007a50:	9306      	str	r3, [sp, #24]
 8007a52:	f8bd 30f0 	ldrh.w	r3, [sp, #240]	@ 0xf0
 8007a56:	9304      	str	r3, [sp, #16]
 8007a58:	f8bd 30f4 	ldrh.w	r3, [sp, #244]	@ 0xf4
 8007a5c:	9302      	str	r3, [sp, #8]
 8007a5e:	f8bd 30ec 	ldrh.w	r3, [sp, #236]	@ 0xec
 8007a62:	9300      	str	r3, [sp, #0]
 8007a64:	b2b3      	uxth	r3, r6
 8007a66:	47a8      	blx	r5
 8007a68:	4652      	mov	r2, sl
 8007a6a:	9920      	ldr	r1, [sp, #128]	@ 0x80
 8007a6c:	1a53      	subs	r3, r2, r1
 8007a6e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8007a72:	b21a      	sxth	r2, r3
 8007a74:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 8007a76:	922b      	str	r2, [sp, #172]	@ 0xac
 8007a78:	9a31      	ldr	r2, [sp, #196]	@ 0xc4
 8007a7a:	429a      	cmp	r2, r3
 8007a7c:	f340 818e 	ble.w	8007d9c <forward_lite_conv2d_if32of32wf32_pool+0x584>
 8007a80:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 8007a82:	1e53      	subs	r3, r2, #1
 8007a84:	2a00      	cmp	r2, #0
 8007a86:	b21b      	sxth	r3, r3
 8007a88:	9322      	str	r3, [sp, #136]	@ 0x88
 8007a8a:	f77f af78 	ble.w	800797e <forward_lite_conv2d_if32of32wf32_pool+0x166>
 8007a8e:	e001      	b.n	8007a94 <forward_lite_conv2d_if32of32wf32_pool+0x27c>
 8007a90:	00000000 	.word	0x00000000
 8007a94:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	f2c0 82d3 	blt.w	8008042 <forward_lite_conv2d_if32of32wf32_pool+0x82a>
 8007a9c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007a9e:	931a      	str	r3, [sp, #104]	@ 0x68
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	991c      	ldr	r1, [sp, #112]	@ 0x70
 8007aa4:	9a39      	ldr	r2, [sp, #228]	@ 0xe4
 8007aa6:	440a      	add	r2, r1
 8007aa8:	993a      	ldr	r1, [sp, #232]	@ 0xe8
 8007aaa:	428a      	cmp	r2, r1
 8007aac:	bfd4      	ite	le
 8007aae:	ebc3 0202 	rsble	r2, r3, r2
 8007ab2:	ebc3 0201 	rsbgt	r2, r3, r1
 8007ab6:	4615      	mov	r5, r2
 8007ab8:	9a5d      	ldr	r2, [sp, #372]	@ 0x174
 8007aba:	2a00      	cmp	r2, #0
 8007abc:	f000 8191 	beq.w	8007de2 <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 8007ac0:	9a32      	ldr	r2, [sp, #200]	@ 0xc8
 8007ac2:	f1b2 7f80 	cmp.w	r2, #16777216	@ 0x1000000
 8007ac6:	f0c0 818c 	bcc.w	8007de2 <forward_lite_conv2d_if32of32wf32_pool+0x5ca>
 8007aca:	2e00      	cmp	r6, #0
 8007acc:	f340 8127 	ble.w	8007d1e <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8007ad0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007ad2:	46a2      	mov	sl, r4
 8007ad4:	f8cd 8108 	str.w	r8, [sp, #264]	@ 0x108
 8007ad8:	46a8      	mov	r8, r5
 8007ada:	fb02 f303 	mul.w	r3, r2, r3
 8007ade:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8007ae0:	f8cd 91c8 	str.w	r9, [sp, #456]	@ 0x1c8
 8007ae4:	9318      	str	r3, [sp, #96]	@ 0x60
 8007ae6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007ae8:	18e3      	adds	r3, r4, r3
 8007aea:	9336      	str	r3, [sp, #216]	@ 0xd8
 8007aec:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007aee:	4413      	add	r3, r2
 8007af0:	9337      	str	r3, [sp, #220]	@ 0xdc
 8007af2:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007af4:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007af6:	9b2f      	ldr	r3, [sp, #188]	@ 0xbc
 8007af8:	e9cd 7b3e 	strd	r7, fp, [sp, #248]	@ 0xf8
 8007afc:	9319      	str	r3, [sp, #100]	@ 0x64
 8007afe:	e9cd 4640 	strd	r4, r6, [sp, #256]	@ 0x100
 8007b02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007b04:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8007b06:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8007b08:	f001 fb06 	bl	8009118 <st_int8_copy>
 8007b0c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	f000 8160 	beq.w	8007dd4 <forward_lite_conv2d_if32of32wf32_pool+0x5bc>
 8007b14:	9b28      	ldr	r3, [sp, #160]	@ 0xa0
 8007b16:	ecf3 6a01 	vldmia	r3!, {s13}
 8007b1a:	9328      	str	r3, [sp, #160]	@ 0xa0
 8007b1c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	f000 80eb 	beq.w	8007cfa <forward_lite_conv2d_if32of32wf32_pool+0x4e2>
 8007b24:	9a25      	ldr	r2, [sp, #148]	@ 0x94
 8007b26:	2500      	movs	r5, #0
 8007b28:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007b2a:	9937      	ldr	r1, [sp, #220]	@ 0xdc
 8007b2c:	4413      	add	r3, r2
 8007b2e:	9c29      	ldr	r4, [sp, #164]	@ 0xa4
 8007b30:	f8cd a10c 	str.w	sl, [sp, #268]	@ 0x10c
 8007b34:	e9cd 120b 	strd	r1, r2, [sp, #44]	@ 0x2c
 8007b38:	462a      	mov	r2, r5
 8007b3a:	4655      	mov	r5, sl
 8007b3c:	4610      	mov	r0, r2
 8007b3e:	2c00      	cmp	r4, #0
 8007b40:	f2c0 813e 	blt.w	8007dc0 <forward_lite_conv2d_if32of32wf32_pool+0x5a8>
 8007b44:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007b46:	2600      	movs	r6, #0
 8007b48:	9214      	str	r2, [sp, #80]	@ 0x50
 8007b4a:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007b4c:	9f0a      	ldr	r7, [sp, #40]	@ 0x28
 8007b4e:	995d      	ldr	r1, [sp, #372]	@ 0x174
 8007b50:	429f      	cmp	r7, r3
 8007b52:	bf94      	ite	ls
 8007b54:	ebc6 0607 	rsbls	r6, r6, r7
 8007b58:	ebc6 0603 	rsbhi	r6, r6, r3
 8007b5c:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8007b5e:	f1b8 0f00 	cmp.w	r8, #0
 8007b62:	fb02 1207 	mla	r2, r2, r7, r1
 8007b66:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8007b68:	eba1 0b06 	sub.w	fp, r1, r6
 8007b6c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8007b6e:	eba1 0a06 	sub.w	sl, r1, r6
 8007b72:	9910      	ldr	r1, [sp, #64]	@ 0x40
 8007b74:	fb01 f606 	mul.w	r6, r1, r6
 8007b78:	f340 8129 	ble.w	8007dce <forward_lite_conv2d_if32of32wf32_pool+0x5b6>
 8007b7c:	fb07 fb0b 	mul.w	fp, r7, fp
 8007b80:	eeb0 7a66 	vmov.f32	s14, s13
 8007b84:	fb07 fa0a 	mul.w	sl, r7, sl
 8007b88:	f026 070f 	bic.w	r7, r6, #15
 8007b8c:	f04f 0c00 	mov.w	ip, #0
 8007b90:	9914      	ldr	r1, [sp, #80]	@ 0x50
 8007b92:	f107 39ff 	add.w	r9, r7, #4294967295	@ 0xffffffff
 8007b96:	ea4f 1919 	mov.w	r9, r9, lsr #4
 8007b9a:	f109 0901 	add.w	r9, r9, #1
 8007b9e:	ea4f 1e89 	mov.w	lr, r9, lsl #6
 8007ba2:	ea4f 1909 	mov.w	r9, r9, lsl #4
 8007ba6:	e9cd 5414 	strd	r5, r4, [sp, #80]	@ 0x50
 8007baa:	e9cd 0316 	strd	r0, r3, [sp, #88]	@ 0x58
 8007bae:	2f00      	cmp	r7, #0
 8007bb0:	f340 8104 	ble.w	8007dbc <forward_lite_conv2d_if32of32wf32_pool+0x5a4>
 8007bb4:	f101 0040 	add.w	r0, r1, #64	@ 0x40
 8007bb8:	f102 0340 	add.w	r3, r2, #64	@ 0x40
 8007bbc:	2400      	movs	r4, #0
 8007bbe:	ed13 6a0f 	vldr	s12, [r3, #-60]	@ 0xffffffc4
 8007bc2:	3410      	adds	r4, #16
 8007bc4:	ed50 7a0f 	vldr	s15, [r0, #-60]	@ 0xffffffc4
 8007bc8:	3340      	adds	r3, #64	@ 0x40
 8007bca:	ed50 4a10 	vldr	s9, [r0, #-64]	@ 0xffffffc0
 8007bce:	42bc      	cmp	r4, r7
 8007bd0:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007bd4:	ed13 4a20 	vldr	s8, [r3, #-128]	@ 0xffffff80
 8007bd8:	ed10 5a0e 	vldr	s10, [r0, #-56]	@ 0xffffffc8
 8007bdc:	f100 0040 	add.w	r0, r0, #64	@ 0x40
 8007be0:	ed53 5a1e 	vldr	s11, [r3, #-120]	@ 0xffffff88
 8007be4:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007be8:	ed13 6a1d 	vldr	s12, [r3, #-116]	@ 0xffffff8c
 8007bec:	ed50 da1d 	vldr	s27, [r0, #-116]	@ 0xffffff8c
 8007bf0:	ed13 da1c 	vldr	s26, [r3, #-112]	@ 0xffffff90
 8007bf4:	ed50 ca1c 	vldr	s25, [r0, #-112]	@ 0xffffff90
 8007bf8:	ed10 ca1b 	vldr	s24, [r0, #-108]	@ 0xffffff94
 8007bfc:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 8007c00:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c04:	ed10 ba1a 	vldr	s22, [r0, #-104]	@ 0xffffff98
 8007c08:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 8007c0c:	ed10 aa19 	vldr	s20, [r0, #-100]	@ 0xffffff9c
 8007c10:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 8007c14:	ed13 9a18 	vldr	s18, [r3, #-96]	@ 0xffffffa0
 8007c18:	ed50 8a18 	vldr	s17, [r0, #-96]	@ 0xffffffa0
 8007c1c:	eeed 7a86 	vfma.f32	s15, s27, s12
 8007c20:	ed50 0a17 	vldr	s1, [r0, #-92]	@ 0xffffffa4
 8007c24:	ed13 0a17 	vldr	s0, [r3, #-92]	@ 0xffffffa4
 8007c28:	ed50 1a16 	vldr	s3, [r0, #-88]	@ 0xffffffa8
 8007c2c:	ed13 1a16 	vldr	s2, [r3, #-88]	@ 0xffffffa8
 8007c30:	ed50 2a15 	vldr	s5, [r0, #-84]	@ 0xffffffac
 8007c34:	ed13 2a15 	vldr	s4, [r3, #-84]	@ 0xffffffac
 8007c38:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007c3c:	ed10 3a14 	vldr	s6, [r0, #-80]	@ 0xffffffb0
 8007c40:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 8007c44:	ed10 4a13 	vldr	s8, [r0, #-76]	@ 0xffffffb4
 8007c48:	ed53 4a13 	vldr	s9, [r3, #-76]	@ 0xffffffb4
 8007c4c:	ed50 5a12 	vldr	s11, [r0, #-72]	@ 0xffffffb8
 8007c50:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8007c54:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007c58:	ed10 ea11 	vldr	s28, [r0, #-68]	@ 0xffffffbc
 8007c5c:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8007c60:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8007c64:	eeea 7a29 	vfma.f32	s15, s20, s19
 8007c68:	eee9 7a28 	vfma.f32	s15, s18, s17
 8007c6c:	eee0 7a20 	vfma.f32	s15, s0, s1
 8007c70:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007c74:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007c78:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007c7c:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007c80:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007c84:	eee6 7a0e 	vfma.f32	s15, s12, s28
 8007c88:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007c8c:	db97      	blt.n	8007bbe <forward_lite_conv2d_if32of32wf32_pool+0x3a6>
 8007c8e:	4471      	add	r1, lr
 8007c90:	4472      	add	r2, lr
 8007c92:	464d      	mov	r5, r9
 8007c94:	42ae      	cmp	r6, r5
 8007c96:	dd10      	ble.n	8007cba <forward_lite_conv2d_if32of32wf32_pool+0x4a2>
 8007c98:	462b      	mov	r3, r5
 8007c9a:	460c      	mov	r4, r1
 8007c9c:	4610      	mov	r0, r2
 8007c9e:	3301      	adds	r3, #1
 8007ca0:	ecb0 6a01 	vldmia	r0!, {s12}
 8007ca4:	ecf4 7a01 	vldmia	r4!, {s15}
 8007ca8:	429e      	cmp	r6, r3
 8007caa:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007cae:	d1f6      	bne.n	8007c9e <forward_lite_conv2d_if32of32wf32_pool+0x486>
 8007cb0:	1b75      	subs	r5, r6, r5
 8007cb2:	eb02 0285 	add.w	r2, r2, r5, lsl #2
 8007cb6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
 8007cba:	f10c 0c01 	add.w	ip, ip, #1
 8007cbe:	4459      	add	r1, fp
 8007cc0:	4452      	add	r2, sl
 8007cc2:	45e0      	cmp	r8, ip
 8007cc4:	f47f af73 	bne.w	8007bae <forward_lite_conv2d_if32of32wf32_pool+0x396>
 8007cc8:	e9dd 5414 	ldrd	r5, r4, [sp, #80]	@ 0x50
 8007ccc:	e9dd 0316 	ldrd	r0, r3, [sp, #88]	@ 0x58
 8007cd0:	990e      	ldr	r1, [sp, #56]	@ 0x38
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007cd6:	ed85 7a00 	vstr	s14, [r5]
 8007cda:	440d      	add	r5, r1
 8007cdc:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007cde:	4414      	add	r4, r2
 8007ce0:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007ce2:	1a9b      	subs	r3, r3, r2
 8007ce4:	1a89      	subs	r1, r1, r2
 8007ce6:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007ce8:	910c      	str	r1, [sp, #48]	@ 0x30
 8007cea:	4282      	cmp	r2, r0
 8007cec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8007cee:	4431      	add	r1, r6
 8007cf0:	910b      	str	r1, [sp, #44]	@ 0x2c
 8007cf2:	f47f af24 	bne.w	8007b3e <forward_lite_conv2d_if32of32wf32_pool+0x326>
 8007cf6:	f8dd a10c 	ldr.w	sl, [sp, #268]	@ 0x10c
 8007cfa:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007cfc:	f10a 0a04 	add.w	sl, sl, #4
 8007d00:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007d02:	4413      	add	r3, r2
 8007d04:	9319      	str	r3, [sp, #100]	@ 0x64
 8007d06:	9b36      	ldr	r3, [sp, #216]	@ 0xd8
 8007d08:	459a      	cmp	sl, r3
 8007d0a:	f47f aefa 	bne.w	8007b02 <forward_lite_conv2d_if32of32wf32_pool+0x2ea>
 8007d0e:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8007d12:	f8dd 8108 	ldr.w	r8, [sp, #264]	@ 0x108
 8007d16:	e9dd 7b3e 	ldrd	r7, fp, [sp, #248]	@ 0xf8
 8007d1a:	e9dd 4640 	ldrd	r4, r6, [sp, #256]	@ 0x100
 8007d1e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	dd23      	ble.n	8007d6c <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8007d24:	9b71      	ldr	r3, [sp, #452]	@ 0x1c4
 8007d26:	2b00      	cmp	r3, #0
 8007d28:	d03d      	beq.n	8007da6 <forward_lite_conv2d_if32of32wf32_pool+0x58e>
 8007d2a:	469a      	mov	sl, r3
 8007d2c:	4643      	mov	r3, r8
 8007d2e:	2500      	movs	r5, #0
 8007d30:	46b0      	mov	r8, r6
 8007d32:	4626      	mov	r6, r4
 8007d34:	461c      	mov	r4, r3
 8007d36:	9a73      	ldr	r2, [sp, #460]	@ 0x1cc
 8007d38:	463b      	mov	r3, r7
 8007d3a:	4631      	mov	r1, r6
 8007d3c:	4630      	mov	r0, r6
 8007d3e:	4417      	add	r7, r2
 8007d40:	4642      	mov	r2, r8
 8007d42:	47d0      	blx	sl
 8007d44:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007d46:	9a74      	ldr	r2, [sp, #464]	@ 0x1d0
 8007d48:	3501      	adds	r5, #1
 8007d4a:	441e      	add	r6, r3
 8007d4c:	eba7 0309 	sub.w	r3, r7, r9
 8007d50:	4293      	cmp	r3, r2
 8007d52:	bfa8      	it	ge
 8007d54:	464f      	movge	r7, r9
 8007d56:	455e      	cmp	r6, fp
 8007d58:	d301      	bcc.n	8007d5e <forward_lite_conv2d_if32of32wf32_pool+0x546>
 8007d5a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007d5c:	441e      	add	r6, r3
 8007d5e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007d60:	42ab      	cmp	r3, r5
 8007d62:	d1e8      	bne.n	8007d36 <forward_lite_conv2d_if32of32wf32_pool+0x51e>
 8007d64:	4623      	mov	r3, r4
 8007d66:	4634      	mov	r4, r6
 8007d68:	4646      	mov	r6, r8
 8007d6a:	4698      	mov	r8, r3
 8007d6c:	f108 0301 	add.w	r3, r8, #1
 8007d70:	9a27      	ldr	r2, [sp, #156]	@ 0x9c
 8007d72:	fa0f f883 	sxth.w	r8, r3
 8007d76:	4542      	cmp	r2, r8
 8007d78:	f77f ae3d 	ble.w	80079f6 <forward_lite_conv2d_if32of32wf32_pool+0x1de>
 8007d7c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 8007d7e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 8007d80:	4413      	add	r3, r2
 8007d82:	931b      	str	r3, [sp, #108]	@ 0x6c
 8007d84:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8007d86:	1a9b      	subs	r3, r3, r2
 8007d88:	9a2c      	ldr	r2, [sp, #176]	@ 0xb0
 8007d8a:	931c      	str	r3, [sp, #112]	@ 0x70
 8007d8c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8007d8e:	4413      	add	r3, r2
 8007d90:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 8007d92:	931d      	str	r3, [sp, #116]	@ 0x74
 8007d94:	9b31      	ldr	r3, [sp, #196]	@ 0xc4
 8007d96:	4293      	cmp	r3, r2
 8007d98:	f73f ae72 	bgt.w	8007a80 <forward_lite_conv2d_if32of32wf32_pool+0x268>
 8007d9c:	b045      	add	sp, #276	@ 0x114
 8007d9e:	ecbd 8b0e 	vpop	{d8-d14}
 8007da2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007da6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007da8:	3301      	adds	r3, #1
 8007daa:	4414      	add	r4, r2
 8007dac:	45a3      	cmp	fp, r4
 8007dae:	d801      	bhi.n	8007db4 <forward_lite_conv2d_if32of32wf32_pool+0x59c>
 8007db0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007db2:	4414      	add	r4, r2
 8007db4:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007db6:	429a      	cmp	r2, r3
 8007db8:	d1f5      	bne.n	8007da6 <forward_lite_conv2d_if32of32wf32_pool+0x58e>
 8007dba:	e7d7      	b.n	8007d6c <forward_lite_conv2d_if32of32wf32_pool+0x554>
 8007dbc:	2500      	movs	r5, #0
 8007dbe:	e769      	b.n	8007c94 <forward_lite_conv2d_if32of32wf32_pool+0x47c>
 8007dc0:	990c      	ldr	r1, [sp, #48]	@ 0x30
 8007dc2:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 8007dc4:	460e      	mov	r6, r1
 8007dc6:	440a      	add	r2, r1
 8007dc8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8007dca:	9114      	str	r1, [sp, #80]	@ 0x50
 8007dcc:	e6be      	b.n	8007b4c <forward_lite_conv2d_if32of32wf32_pool+0x334>
 8007dce:	eeb0 7a66 	vmov.f32	s14, s13
 8007dd2:	e77d      	b.n	8007cd0 <forward_lite_conv2d_if32of32wf32_pool+0x4b8>
 8007dd4:	eef0 6a48 	vmov.f32	s13, s16
 8007dd8:	e6a0      	b.n	8007b1c <forward_lite_conv2d_if32of32wf32_pool+0x304>
 8007dda:	f647 73ff 	movw	r3, #32767	@ 0x7fff
 8007dde:	9322      	str	r3, [sp, #136]	@ 0x88
 8007de0:	e605      	b.n	80079ee <forward_lite_conv2d_if32of32wf32_pool+0x1d6>
 8007de2:	2e00      	cmp	r6, #0
 8007de4:	dd9b      	ble.n	8007d1e <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8007de6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8007de8:	992f      	ldr	r1, [sp, #188]	@ 0xbc
 8007dea:	fb02 f303 	mul.w	r3, r2, r3
 8007dee:	9a2d      	ldr	r2, [sp, #180]	@ 0xb4
 8007df0:	f8cd b0d8 	str.w	fp, [sp, #216]	@ 0xd8
 8007df4:	46ab      	mov	fp, r5
 8007df6:	9319      	str	r3, [sp, #100]	@ 0x64
 8007df8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8007dfa:	9118      	str	r1, [sp, #96]	@ 0x60
 8007dfc:	18e0      	adds	r0, r4, r3
 8007dfe:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 8007e00:	9728      	str	r7, [sp, #160]	@ 0xa0
 8007e02:	eb03 0a02 	add.w	sl, r3, r2
 8007e06:	4623      	mov	r3, r4
 8007e08:	9a1f      	ldr	r2, [sp, #124]	@ 0x7c
 8007e0a:	991f      	ldr	r1, [sp, #124]	@ 0x7c
 8007e0c:	2900      	cmp	r1, #0
 8007e0e:	f000 8115 	beq.w	800803c <forward_lite_conv2d_if32of32wf32_pool+0x824>
 8007e12:	ecf2 6a01 	vldmia	r2!, {s13}
 8007e16:	990d      	ldr	r1, [sp, #52]	@ 0x34
 8007e18:	2900      	cmp	r1, #0
 8007e1a:	f000 80f8 	beq.w	800800e <forward_lite_conv2d_if32of32wf32_pool+0x7f6>
 8007e1e:	9925      	ldr	r1, [sp, #148]	@ 0x94
 8007e20:	469c      	mov	ip, r3
 8007e22:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 8007e24:	933e      	str	r3, [sp, #248]	@ 0xf8
 8007e26:	440d      	add	r5, r1
 8007e28:	f8dd e0a4 	ldr.w	lr, [sp, #164]	@ 0xa4
 8007e2c:	9237      	str	r2, [sp, #220]	@ 0xdc
 8007e2e:	f8cd 91c8 	str.w	r9, [sp, #456]	@ 0x1c8
 8007e32:	f8cd 810c 	str.w	r8, [sp, #268]	@ 0x10c
 8007e36:	e9cd a10b 	strd	sl, r1, [sp, #44]	@ 0x2c
 8007e3a:	2100      	movs	r1, #0
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	4661      	mov	r1, ip
 8007e40:	469c      	mov	ip, r3
 8007e42:	e9cd 403f 	strd	r4, r0, [sp, #252]	@ 0xfc
 8007e46:	e9cd a641 	strd	sl, r6, [sp, #260]	@ 0x104
 8007e4a:	f1be 0f00 	cmp.w	lr, #0
 8007e4e:	f2c0 80ec 	blt.w	800802a <forward_lite_conv2d_if32of32wf32_pool+0x812>
 8007e52:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007e54:	2000      	movs	r0, #0
 8007e56:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8007e58:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 8007e5a:	9f18      	ldr	r7, [sp, #96]	@ 0x60
 8007e5c:	42ae      	cmp	r6, r5
 8007e5e:	bf94      	ite	ls
 8007e60:	ebc0 0006 	rsbls	r0, r0, r6
 8007e64:	ebc0 0005 	rsbhi	r0, r0, r5
 8007e68:	9c12      	ldr	r4, [sp, #72]	@ 0x48
 8007e6a:	f1bb 0f00 	cmp.w	fp, #0
 8007e6e:	eba6 0900 	sub.w	r9, r6, r0
 8007e72:	fb03 7304 	mla	r3, r3, r4, r7
 8007e76:	9e10      	ldr	r6, [sp, #64]	@ 0x40
 8007e78:	9f0f      	ldr	r7, [sp, #60]	@ 0x3c
 8007e7a:	eba7 0a00 	sub.w	sl, r7, r0
 8007e7e:	fb06 f000 	mul.w	r0, r6, r0
 8007e82:	f340 80d8 	ble.w	8008036 <forward_lite_conv2d_if32of32wf32_pool+0x81e>
 8007e86:	f020 080f 	bic.w	r8, r0, #15
 8007e8a:	eeb0 7a66 	vmov.f32	s14, s13
 8007e8e:	fb04 fa0a 	mul.w	sl, r4, sl
 8007e92:	f108 37ff 	add.w	r7, r8, #4294967295	@ 0xffffffff
 8007e96:	fb04 f909 	mul.w	r9, r4, r9
 8007e9a:	2400      	movs	r4, #0
 8007e9c:	093f      	lsrs	r7, r7, #4
 8007e9e:	3701      	adds	r7, #1
 8007ea0:	01be      	lsls	r6, r7, #6
 8007ea2:	013f      	lsls	r7, r7, #4
 8007ea4:	e9cd 1e14 	strd	r1, lr, [sp, #80]	@ 0x50
 8007ea8:	e9cd c516 	strd	ip, r5, [sp, #88]	@ 0x58
 8007eac:	f1b8 0f00 	cmp.w	r8, #0
 8007eb0:	f340 80b9 	ble.w	8008026 <forward_lite_conv2d_if32of32wf32_pool+0x80e>
 8007eb4:	f102 0540 	add.w	r5, r2, #64	@ 0x40
 8007eb8:	f103 0140 	add.w	r1, r3, #64	@ 0x40
 8007ebc:	f04f 0c00 	mov.w	ip, #0
 8007ec0:	ed15 6a0f 	vldr	s12, [r5, #-60]	@ 0xffffffc4
 8007ec4:	f10c 0c10 	add.w	ip, ip, #16
 8007ec8:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 8007ecc:	3540      	adds	r5, #64	@ 0x40
 8007ece:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 8007ed2:	45c4      	cmp	ip, r8
 8007ed4:	ee67 7a86 	vmul.f32	s15, s15, s12
 8007ed8:	ed15 5a20 	vldr	s10, [r5, #-128]	@ 0xffffff80
 8007edc:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 8007ee0:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8007ee4:	ed15 6a1e 	vldr	s12, [r5, #-120]	@ 0xffffff88
 8007ee8:	eee4 7a85 	vfma.f32	s15, s9, s10
 8007eec:	ed51 da1d 	vldr	s27, [r1, #-116]	@ 0xffffff8c
 8007ef0:	ed15 ea1d 	vldr	s28, [r5, #-116]	@ 0xffffff8c
 8007ef4:	ed15 da1c 	vldr	s26, [r5, #-112]	@ 0xffffff90
 8007ef8:	ed51 ca1c 	vldr	s25, [r1, #-112]	@ 0xffffff90
 8007efc:	ed15 ca1b 	vldr	s24, [r5, #-108]	@ 0xffffff94
 8007f00:	ed51 ba1b 	vldr	s23, [r1, #-108]	@ 0xffffff94
 8007f04:	eee5 7a86 	vfma.f32	s15, s11, s12
 8007f08:	ed15 ba1a 	vldr	s22, [r5, #-104]	@ 0xffffff98
 8007f0c:	ed51 aa1a 	vldr	s21, [r1, #-104]	@ 0xffffff98
 8007f10:	ed15 aa19 	vldr	s20, [r5, #-100]	@ 0xffffff9c
 8007f14:	ed51 9a19 	vldr	s19, [r1, #-100]	@ 0xffffff9c
 8007f18:	ed11 9a18 	vldr	s18, [r1, #-96]	@ 0xffffffa0
 8007f1c:	ed55 8a18 	vldr	s17, [r5, #-96]	@ 0xffffffa0
 8007f20:	eeed 7a8e 	vfma.f32	s15, s27, s28
 8007f24:	ed55 0a17 	vldr	s1, [r5, #-92]	@ 0xffffffa4
 8007f28:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 8007f2c:	ed55 1a16 	vldr	s3, [r5, #-88]	@ 0xffffffa8
 8007f30:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 8007f34:	ed55 2a15 	vldr	s5, [r5, #-84]	@ 0xffffffac
 8007f38:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 8007f3c:	eeed 7a2c 	vfma.f32	s15, s26, s25
 8007f40:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 8007f44:	ed55 3a14 	vldr	s7, [r5, #-80]	@ 0xffffffb0
 8007f48:	ed55 4a13 	vldr	s9, [r5, #-76]	@ 0xffffffb4
 8007f4c:	ed11 4a13 	vldr	s8, [r1, #-76]	@ 0xffffffb4
 8007f50:	ed15 5a12 	vldr	s10, [r5, #-72]	@ 0xffffffb8
 8007f54:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8007f58:	eeec 7a2b 	vfma.f32	s15, s24, s23
 8007f5c:	ed15 6a11 	vldr	s12, [r5, #-68]	@ 0xffffffbc
 8007f60:	ed51 da11 	vldr	s27, [r1, #-68]	@ 0xffffffbc
 8007f64:	eeeb 7a2a 	vfma.f32	s15, s22, s21
 8007f68:	eeea 7a29 	vfma.f32	s15, s20, s19
 8007f6c:	eee9 7a28 	vfma.f32	s15, s18, s17
 8007f70:	eee0 7a20 	vfma.f32	s15, s0, s1
 8007f74:	eee1 7a21 	vfma.f32	s15, s2, s3
 8007f78:	eee2 7a22 	vfma.f32	s15, s4, s5
 8007f7c:	eee3 7a23 	vfma.f32	s15, s6, s7
 8007f80:	eee4 7a24 	vfma.f32	s15, s8, s9
 8007f84:	eee5 7a25 	vfma.f32	s15, s10, s11
 8007f88:	eee6 7a2d 	vfma.f32	s15, s12, s27
 8007f8c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8007f90:	db96      	blt.n	8007ec0 <forward_lite_conv2d_if32of32wf32_pool+0x6a8>
 8007f92:	4432      	add	r2, r6
 8007f94:	4433      	add	r3, r6
 8007f96:	4639      	mov	r1, r7
 8007f98:	4288      	cmp	r0, r1
 8007f9a:	dd10      	ble.n	8007fbe <forward_lite_conv2d_if32of32wf32_pool+0x7a6>
 8007f9c:	460d      	mov	r5, r1
 8007f9e:	4696      	mov	lr, r2
 8007fa0:	469c      	mov	ip, r3
 8007fa2:	3501      	adds	r5, #1
 8007fa4:	ecbc 6a01 	vldmia	ip!, {s12}
 8007fa8:	ecfe 7a01 	vldmia	lr!, {s15}
 8007fac:	42a8      	cmp	r0, r5
 8007fae:	eea6 7a27 	vfma.f32	s14, s12, s15
 8007fb2:	d1f6      	bne.n	8007fa2 <forward_lite_conv2d_if32of32wf32_pool+0x78a>
 8007fb4:	1a41      	subs	r1, r0, r1
 8007fb6:	eb03 0381 	add.w	r3, r3, r1, lsl #2
 8007fba:	eb02 0281 	add.w	r2, r2, r1, lsl #2
 8007fbe:	3401      	adds	r4, #1
 8007fc0:	4452      	add	r2, sl
 8007fc2:	444b      	add	r3, r9
 8007fc4:	45a3      	cmp	fp, r4
 8007fc6:	f47f af71 	bne.w	8007eac <forward_lite_conv2d_if32of32wf32_pool+0x694>
 8007fca:	e9dd 1e14 	ldrd	r1, lr, [sp, #80]	@ 0x50
 8007fce:	e9dd c516 	ldrd	ip, r5, [sp, #88]	@ 0x58
 8007fd2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007fd4:	f10c 0c01 	add.w	ip, ip, #1
 8007fd8:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007fda:	ed81 7a00 	vstr	s14, [r1]
 8007fde:	4411      	add	r1, r2
 8007fe0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007fe2:	449e      	add	lr, r3
 8007fe4:	9813      	ldr	r0, [sp, #76]	@ 0x4c
 8007fe6:	1aed      	subs	r5, r5, r3
 8007fe8:	1ad2      	subs	r2, r2, r3
 8007fea:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007fec:	920c      	str	r2, [sp, #48]	@ 0x30
 8007fee:	4563      	cmp	r3, ip
 8007ff0:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8007ff2:	4402      	add	r2, r0
 8007ff4:	920b      	str	r2, [sp, #44]	@ 0x2c
 8007ff6:	f47f af28 	bne.w	8007e4a <forward_lite_conv2d_if32of32wf32_pool+0x632>
 8007ffa:	9a37      	ldr	r2, [sp, #220]	@ 0xdc
 8007ffc:	9e42      	ldr	r6, [sp, #264]	@ 0x108
 8007ffe:	f8dd 91c8 	ldr.w	r9, [sp, #456]	@ 0x1c8
 8008002:	f8dd 810c 	ldr.w	r8, [sp, #268]	@ 0x10c
 8008006:	e9dd 343e 	ldrd	r3, r4, [sp, #248]	@ 0xf8
 800800a:	e9dd 0a40 	ldrd	r0, sl, [sp, #256]	@ 0x100
 800800e:	9918      	ldr	r1, [sp, #96]	@ 0x60
 8008010:	3304      	adds	r3, #4
 8008012:	9d21      	ldr	r5, [sp, #132]	@ 0x84
 8008014:	4283      	cmp	r3, r0
 8008016:	4429      	add	r1, r5
 8008018:	9118      	str	r1, [sp, #96]	@ 0x60
 800801a:	f47f aef6 	bne.w	8007e0a <forward_lite_conv2d_if32of32wf32_pool+0x5f2>
 800801e:	9f28      	ldr	r7, [sp, #160]	@ 0xa0
 8008020:	f8dd b0d8 	ldr.w	fp, [sp, #216]	@ 0xd8
 8008024:	e67b      	b.n	8007d1e <forward_lite_conv2d_if32of32wf32_pool+0x506>
 8008026:	2100      	movs	r1, #0
 8008028:	e7b6      	b.n	8007f98 <forward_lite_conv2d_if32of32wf32_pool+0x780>
 800802a:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 800802c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800802e:	4610      	mov	r0, r2
 8008030:	4413      	add	r3, r2
 8008032:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8008034:	e710      	b.n	8007e58 <forward_lite_conv2d_if32of32wf32_pool+0x640>
 8008036:	eeb0 7a66 	vmov.f32	s14, s13
 800803a:	e7ca      	b.n	8007fd2 <forward_lite_conv2d_if32of32wf32_pool+0x7ba>
 800803c:	eef0 6a48 	vmov.f32	s13, s16
 8008040:	e6e9      	b.n	8007e16 <forward_lite_conv2d_if32of32wf32_pool+0x5fe>
 8008042:	9a38      	ldr	r2, [sp, #224]	@ 0xe0
 8008044:	9b1c      	ldr	r3, [sp, #112]	@ 0x70
 8008046:	921a      	str	r2, [sp, #104]	@ 0x68
 8008048:	e52b      	b.n	8007aa2 <forward_lite_conv2d_if32of32wf32_pool+0x28a>
 800804a:	bf00      	nop

0800804c <forward_lite_nl_relu_generic_if32of32_kernel>:
 800804c:	b500      	push	{lr}
 800804e:	edd3 6a02 	vldr	s13, [r3, #8]
 8008052:	f06f 4c40 	mvn.w	ip, #3221225472	@ 0xc0000000
 8008056:	ed93 7a00 	vldr	s14, [r3]
 800805a:	eef5 6ac0 	vcmpe.f32	s13, #0.0
 800805e:	4494      	add	ip, r2
 8008060:	ed93 6a01 	vldr	s12, [r3, #4]
 8008064:	ea4f 0e8c 	mov.w	lr, ip, lsl #2
 8008068:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800806c:	eb01 028c 	add.w	r2, r1, ip, lsl #2
 8008070:	eb00 008c 	add.w	r0, r0, ip, lsl #2
 8008074:	d422      	bmi.n	80080bc <forward_lite_nl_relu_generic_if32of32_kernel+0x70>
 8008076:	428a      	cmp	r2, r1
 8008078:	d31e      	bcc.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800807a:	1d13      	adds	r3, r2, #4
 800807c:	3004      	adds	r0, #4
 800807e:	eba2 020e 	sub.w	r2, r2, lr
 8008082:	e00c      	b.n	800809e <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 8008084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8008088:	ee77 5ac7 	vsub.f32	s11, s15, s14
 800808c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008090:	db01      	blt.n	8008096 <forward_lite_nl_relu_generic_if32of32_kernel+0x4a>
 8008092:	ee65 7a86 	vmul.f32	s15, s11, s12
 8008096:	4293      	cmp	r3, r2
 8008098:	ed60 7a01 	vstmdb	r0!, {s15}
 800809c:	d00c      	beq.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800809e:	ed73 7a01 	vldmdb	r3!, {s15}
 80080a2:	eef4 6ae7 	vcmpe.f32	s13, s15
 80080a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080aa:	daeb      	bge.n	8008084 <forward_lite_nl_relu_generic_if32of32_kernel+0x38>
 80080ac:	eef0 7a66 	vmov.f32	s15, s13
 80080b0:	4293      	cmp	r3, r2
 80080b2:	ed60 7a01 	vstmdb	r0!, {s15}
 80080b6:	d1f2      	bne.n	800809e <forward_lite_nl_relu_generic_if32of32_kernel+0x52>
 80080b8:	f85d fb04 	ldr.w	pc, [sp], #4
 80080bc:	eeb5 6a40 	vcmp.f32	s12, #0.0
 80080c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080c4:	d015      	beq.n	80080f2 <forward_lite_nl_relu_generic_if32of32_kernel+0xa6>
 80080c6:	428a      	cmp	r2, r1
 80080c8:	d3f6      	bcc.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80080ca:	1d13      	adds	r3, r2, #4
 80080cc:	3004      	adds	r0, #4
 80080ce:	eba2 020e 	sub.w	r2, r2, lr
 80080d2:	ed73 7a01 	vldmdb	r3!, {s15}
 80080d6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80080da:	ee77 6ac7 	vsub.f32	s13, s15, s14
 80080de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80080e2:	ee66 6a86 	vmul.f32	s13, s13, s12
 80080e6:	d822      	bhi.n	800812e <forward_lite_nl_relu_generic_if32of32_kernel+0xe2>
 80080e8:	4293      	cmp	r3, r2
 80080ea:	ed60 6a01 	vstmdb	r0!, {s13}
 80080ee:	d1f0      	bne.n	80080d2 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 80080f0:	e7e2      	b.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80080f2:	428a      	cmp	r2, r1
 80080f4:	d3e0      	bcc.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 80080f6:	1d13      	adds	r3, r2, #4
 80080f8:	3004      	adds	r0, #4
 80080fa:	eba2 020e 	sub.w	r2, r2, lr
 80080fe:	2100      	movs	r1, #0
 8008100:	ed73 7a01 	vldmdb	r3!, {s15}
 8008104:	eef4 7ac7 	vcmpe.f32	s15, s14
 8008108:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800810c:	dd0a      	ble.n	8008124 <forward_lite_nl_relu_generic_if32of32_kernel+0xd8>
 800810e:	429a      	cmp	r2, r3
 8008110:	ed60 7a01 	vstmdb	r0!, {s15}
 8008114:	d0d0      	beq.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 8008116:	ed73 7a01 	vldmdb	r3!, {s15}
 800811a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800811e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8008122:	dcf4      	bgt.n	800810e <forward_lite_nl_relu_generic_if32of32_kernel+0xc2>
 8008124:	429a      	cmp	r2, r3
 8008126:	f840 1d04 	str.w	r1, [r0, #-4]!
 800812a:	d1e9      	bne.n	8008100 <forward_lite_nl_relu_generic_if32of32_kernel+0xb4>
 800812c:	e7c4      	b.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>
 800812e:	4293      	cmp	r3, r2
 8008130:	ed60 7a01 	vstmdb	r0!, {s15}
 8008134:	d1cd      	bne.n	80080d2 <forward_lite_nl_relu_generic_if32of32_kernel+0x86>
 8008136:	e7bf      	b.n	80080b8 <forward_lite_nl_relu_generic_if32of32_kernel+0x6c>

08008138 <pool_func_mp_array_f32>:
 8008138:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800813c:	b091      	sub	sp, #68	@ 0x44
 800813e:	4688      	mov	r8, r1
 8008140:	469a      	mov	sl, r3
 8008142:	4694      	mov	ip, r2
 8008144:	f8bd 106c 	ldrh.w	r1, [sp, #108]	@ 0x6c
 8008148:	4681      	mov	r9, r0
 800814a:	f8bd 3068 	ldrh.w	r3, [sp, #104]	@ 0x68
 800814e:	9103      	str	r1, [sp, #12]
 8008150:	f8bd 1078 	ldrh.w	r1, [sp, #120]	@ 0x78
 8008154:	f8bd 2074 	ldrh.w	r2, [sp, #116]	@ 0x74
 8008158:	9302      	str	r3, [sp, #8]
 800815a:	9105      	str	r1, [sp, #20]
 800815c:	f8bd 3070 	ldrh.w	r3, [sp, #112]	@ 0x70
 8008160:	f8bd 1080 	ldrh.w	r1, [sp, #128]	@ 0x80
 8008164:	ea52 0503 	orrs.w	r5, r2, r3
 8008168:	f8bd 407c 	ldrh.w	r4, [sp, #124]	@ 0x7c
 800816c:	9101      	str	r1, [sp, #4]
 800816e:	f8bd 1084 	ldrh.w	r1, [sp, #132]	@ 0x84
 8008172:	9104      	str	r1, [sp, #16]
 8008174:	d179      	bne.n	800826a <pool_func_mp_array_f32+0x132>
 8008176:	9902      	ldr	r1, [sp, #8]
 8008178:	9e01      	ldr	r6, [sp, #4]
 800817a:	eba1 0008 	sub.w	r0, r1, r8
 800817e:	9f05      	ldr	r7, [sp, #20]
 8008180:	1e71      	subs	r1, r6, #1
 8008182:	3801      	subs	r0, #1
 8008184:	fb11 0107 	smlabb	r1, r1, r7, r0
 8008188:	0408      	lsls	r0, r1, #16
 800818a:	d56e      	bpl.n	800826a <pool_func_mp_array_f32+0x132>
 800818c:	9903      	ldr	r1, [sp, #12]
 800818e:	9f04      	ldr	r7, [sp, #16]
 8008190:	eba1 000c 	sub.w	r0, r1, ip
 8008194:	1e79      	subs	r1, r7, #1
 8008196:	3801      	subs	r0, #1
 8008198:	fb11 0104 	smlabb	r1, r1, r4, r0
 800819c:	0409      	lsls	r1, r1, #16
 800819e:	d564      	bpl.n	800826a <pool_func_mp_array_f32+0x132>
 80081a0:	2f00      	cmp	r7, #0
 80081a2:	d05f      	beq.n	8008264 <pool_func_mp_array_f32+0x12c>
 80081a4:	2e00      	cmp	r6, #0
 80081a6:	d05d      	beq.n	8008264 <pool_func_mp_array_f32+0x12c>
 80081a8:	4653      	mov	r3, sl
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d05a      	beq.n	8008264 <pool_func_mp_array_f32+0x12c>
 80081ae:	2b01      	cmp	r3, #1
 80081b0:	f040 8164 	bne.w	800847c <pool_func_mp_array_f32+0x344>
 80081b4:	462b      	mov	r3, r5
 80081b6:	462a      	mov	r2, r5
 80081b8:	4629      	mov	r1, r5
 80081ba:	f8dd b014 	ldr.w	fp, [sp, #20]
 80081be:	9801      	ldr	r0, [sp, #4]
 80081c0:	f04f 0c00 	mov.w	ip, #0
 80081c4:	f9bd 700c 	ldrsh.w	r7, [sp, #12]
 80081c8:	fb00 f101 	mul.w	r1, r0, r1
 80081cc:	f8dd a008 	ldr.w	sl, [sp, #8]
 80081d0:	4660      	mov	r0, ip
 80081d2:	46e6      	mov	lr, ip
 80081d4:	9107      	str	r1, [sp, #28]
 80081d6:	b219      	sxth	r1, r3
 80081d8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80081dc:	4622      	mov	r2, r4
 80081de:	9b07      	ldr	r3, [sp, #28]
 80081e0:	42b9      	cmp	r1, r7
 80081e2:	fa0f f58a 	sxth.w	r5, sl
 80081e6:	eddf 7aa4 	vldr	s15, [pc, #656]	@ 8008478 <pool_func_mp_array_f32+0x340>
 80081ea:	eb0e 0403 	add.w	r4, lr, r3
 80081ee:	fa0f fe8c 	sxth.w	lr, ip
 80081f2:	da17      	bge.n	8008224 <pool_func_mp_array_f32+0xec>
 80081f4:	460e      	mov	r6, r1
 80081f6:	e9cd 0405 	strd	r0, r4, [sp, #20]
 80081fa:	45ae      	cmp	lr, r5
 80081fc:	da0c      	bge.n	8008218 <pool_func_mp_array_f32+0xe0>
 80081fe:	fb06 e008 	mla	r0, r6, r8, lr
 8008202:	4673      	mov	r3, lr
 8008204:	eb09 0080 	add.w	r0, r9, r0, lsl #2
 8008208:	3301      	adds	r3, #1
 800820a:	ecb0 7a01 	vldmia	r0!, {s14}
 800820e:	b21c      	sxth	r4, r3
 8008210:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008214:	42ac      	cmp	r4, r5
 8008216:	dbf7      	blt.n	8008208 <pool_func_mp_array_f32+0xd0>
 8008218:	3601      	adds	r6, #1
 800821a:	b236      	sxth	r6, r6
 800821c:	42be      	cmp	r6, r7
 800821e:	dbec      	blt.n	80081fa <pool_func_mp_array_f32+0xc2>
 8008220:	e9dd 0405 	ldrd	r0, r4, [sp, #20]
 8008224:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008226:	3001      	adds	r0, #1
 8008228:	44da      	add	sl, fp
 800822a:	44dc      	add	ip, fp
 800822c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008230:	9b01      	ldr	r3, [sp, #4]
 8008232:	b200      	sxth	r0, r0
 8008234:	fa1f fa8a 	uxth.w	sl, sl
 8008238:	edc4 7a00 	vstr	s15, [r4]
 800823c:	4283      	cmp	r3, r0
 800823e:	fa1f fc8c 	uxth.w	ip, ip
 8008242:	4686      	mov	lr, r0
 8008244:	dccb      	bgt.n	80081de <pool_func_mp_array_f32+0xa6>
 8008246:	4614      	mov	r4, r2
 8008248:	9a08      	ldr	r2, [sp, #32]
 800824a:	9903      	ldr	r1, [sp, #12]
 800824c:	3201      	adds	r2, #1
 800824e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008250:	4421      	add	r1, r4
 8008252:	9804      	ldr	r0, [sp, #16]
 8008254:	b212      	sxth	r2, r2
 8008256:	4423      	add	r3, r4
 8008258:	b289      	uxth	r1, r1
 800825a:	4290      	cmp	r0, r2
 800825c:	b29b      	uxth	r3, r3
 800825e:	9103      	str	r1, [sp, #12]
 8008260:	4611      	mov	r1, r2
 8008262:	dcac      	bgt.n	80081be <pool_func_mp_array_f32+0x86>
 8008264:	b011      	add	sp, #68	@ 0x44
 8008266:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800826a:	9904      	ldr	r1, [sp, #16]
 800826c:	2900      	cmp	r1, #0
 800826e:	d0f9      	beq.n	8008264 <pool_func_mp_array_f32+0x12c>
 8008270:	9901      	ldr	r1, [sp, #4]
 8008272:	2900      	cmp	r1, #0
 8008274:	d0f6      	beq.n	8008264 <pool_func_mp_array_f32+0x12c>
 8008276:	4651      	mov	r1, sl
 8008278:	2900      	cmp	r1, #0
 800827a:	d0f3      	beq.n	8008264 <pool_func_mp_array_f32+0x12c>
 800827c:	2901      	cmp	r1, #1
 800827e:	9903      	ldr	r1, [sp, #12]
 8008280:	d16e      	bne.n	8008360 <pool_func_mp_array_f32+0x228>
 8008282:	1a8a      	subs	r2, r1, r2
 8008284:	9902      	ldr	r1, [sp, #8]
 8008286:	9407      	str	r4, [sp, #28]
 8008288:	1ac9      	subs	r1, r1, r3
 800828a:	425b      	negs	r3, r3
 800828c:	b292      	uxth	r2, r2
 800828e:	fa1f fb81 	uxth.w	fp, r1
 8008292:	9901      	ldr	r1, [sp, #4]
 8008294:	b29d      	uxth	r5, r3
 8008296:	2300      	movs	r3, #0
 8008298:	4618      	mov	r0, r3
 800829a:	461c      	mov	r4, r3
 800829c:	4613      	mov	r3, r2
 800829e:	465a      	mov	r2, fp
 80082a0:	f8dd b014 	ldr.w	fp, [sp, #20]
 80082a4:	fb01 f000 	mul.w	r0, r1, r0
 80082a8:	4692      	mov	sl, r2
 80082aa:	46ae      	mov	lr, r5
 80082ac:	b21e      	sxth	r6, r3
 80082ae:	9005      	str	r0, [sp, #20]
 80082b0:	9803      	ldr	r0, [sp, #12]
 80082b2:	1a18      	subs	r0, r3, r0
 80082b4:	b200      	sxth	r0, r0
 80082b6:	9006      	str	r0, [sp, #24]
 80082b8:	2000      	movs	r0, #0
 80082ba:	e9cd 4308 	strd	r4, r3, [sp, #32]
 80082be:	4607      	mov	r7, r0
 80082c0:	460c      	mov	r4, r1
 80082c2:	e9cd 250a 	strd	r2, r5, [sp, #40]	@ 0x28
 80082c6:	9a06      	ldr	r2, [sp, #24]
 80082c8:	fa0f f58a 	sxth.w	r5, sl
 80082cc:	9b05      	ldr	r3, [sp, #20]
 80082ce:	42b2      	cmp	r2, r6
 80082d0:	eddf 7a69 	vldr	s15, [pc, #420]	@ 8008478 <pool_func_mp_array_f32+0x340>
 80082d4:	eb07 0103 	add.w	r1, r7, r3
 80082d8:	fa0f f78e 	sxth.w	r7, lr
 80082dc:	da1f      	bge.n	800831e <pool_func_mp_array_f32+0x1e6>
 80082de:	e9cd 1001 	strd	r1, r0, [sp, #4]
 80082e2:	42af      	cmp	r7, r5
 80082e4:	da15      	bge.n	8008312 <pool_func_mp_array_f32+0x1da>
 80082e6:	4594      	cmp	ip, r2
 80082e8:	dd13      	ble.n	8008312 <pool_func_mp_array_f32+0x1da>
 80082ea:	fb02 7108 	mla	r1, r2, r8, r7
 80082ee:	463b      	mov	r3, r7
 80082f0:	eb09 0181 	add.w	r1, r9, r1, lsl #2
 80082f4:	ea42 0003 	orr.w	r0, r2, r3
 80082f8:	0400      	lsls	r0, r0, #16
 80082fa:	d405      	bmi.n	8008308 <pool_func_mp_array_f32+0x1d0>
 80082fc:	4598      	cmp	r8, r3
 80082fe:	dd03      	ble.n	8008308 <pool_func_mp_array_f32+0x1d0>
 8008300:	ed91 7a00 	vldr	s14, [r1]
 8008304:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 8008308:	3301      	adds	r3, #1
 800830a:	3104      	adds	r1, #4
 800830c:	b218      	sxth	r0, r3
 800830e:	42a8      	cmp	r0, r5
 8008310:	dbf0      	blt.n	80082f4 <pool_func_mp_array_f32+0x1bc>
 8008312:	3201      	adds	r2, #1
 8008314:	b212      	sxth	r2, r2
 8008316:	42b2      	cmp	r2, r6
 8008318:	dbe3      	blt.n	80082e2 <pool_func_mp_array_f32+0x1aa>
 800831a:	e9dd 1001 	ldrd	r1, r0, [sp, #4]
 800831e:	3001      	adds	r0, #1
 8008320:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008322:	44da      	add	sl, fp
 8008324:	44de      	add	lr, fp
 8008326:	b200      	sxth	r0, r0
 8008328:	eb03 0181 	add.w	r1, r3, r1, lsl #2
 800832c:	4284      	cmp	r4, r0
 800832e:	fa1f fa8a 	uxth.w	sl, sl
 8008332:	fa1f fe8e 	uxth.w	lr, lr
 8008336:	4607      	mov	r7, r0
 8008338:	edc1 7a00 	vstr	s15, [r1]
 800833c:	dcc3      	bgt.n	80082c6 <pool_func_mp_array_f32+0x18e>
 800833e:	4621      	mov	r1, r4
 8008340:	9c08      	ldr	r4, [sp, #32]
 8008342:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008344:	1c60      	adds	r0, r4, #1
 8008346:	9c07      	ldr	r4, [sp, #28]
 8008348:	9e04      	ldr	r6, [sp, #16]
 800834a:	4423      	add	r3, r4
 800834c:	b204      	sxth	r4, r0
 800834e:	42a6      	cmp	r6, r4
 8008350:	b29b      	uxth	r3, r3
 8008352:	4620      	mov	r0, r4
 8008354:	e9dd 250a 	ldrd	r2, r5, [sp, #40]	@ 0x28
 8008358:	dca4      	bgt.n	80082a4 <pool_func_mp_array_f32+0x16c>
 800835a:	b011      	add	sp, #68	@ 0x44
 800835c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008360:	1a88      	subs	r0, r1, r2
 8008362:	9902      	ldr	r1, [sp, #8]
 8008364:	4252      	negs	r2, r2
 8008366:	4656      	mov	r6, sl
 8008368:	1ac9      	subs	r1, r1, r3
 800836a:	425b      	negs	r3, r3
 800836c:	b280      	uxth	r0, r0
 800836e:	fa1f fe81 	uxth.w	lr, r1
 8008372:	2100      	movs	r1, #0
 8008374:	b29f      	uxth	r7, r3
 8008376:	b295      	uxth	r5, r2
 8008378:	460b      	mov	r3, r1
 800837a:	ea4f 0b8a 	mov.w	fp, sl, lsl #2
 800837e:	4602      	mov	r2, r0
 8008380:	468a      	mov	sl, r1
 8008382:	4639      	mov	r1, r7
 8008384:	4677      	mov	r7, lr
 8008386:	46b6      	mov	lr, r6
 8008388:	9801      	ldr	r0, [sp, #4]
 800838a:	b216      	sxth	r6, r2
 800838c:	970e      	str	r7, [sp, #56]	@ 0x38
 800838e:	fb00 f00a 	mul.w	r0, r0, sl
 8008392:	f04f 0a00 	mov.w	sl, #0
 8008396:	9009      	str	r0, [sp, #36]	@ 0x24
 8008398:	b228      	sxth	r0, r5
 800839a:	e9cd 320a 	strd	r3, r2, [sp, #40]	@ 0x28
 800839e:	9008      	str	r0, [sp, #32]
 80083a0:	460b      	mov	r3, r1
 80083a2:	4650      	mov	r0, sl
 80083a4:	e9cd 7102 	strd	r7, r1, [sp, #8]
 80083a8:	e9cd 540c 	strd	r5, r4, [sp, #48]	@ 0x30
 80083ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80083ae:	f8cd a03c 	str.w	sl, [sp, #60]	@ 0x3c
 80083b2:	469a      	mov	sl, r3
 80083b4:	4410      	add	r0, r2
 80083b6:	f9bd 500c 	ldrsh.w	r5, [sp, #12]
 80083ba:	f9bd 4008 	ldrsh.w	r4, [sp, #8]
 80083be:	fb0e f200 	mul.w	r2, lr, r0
 80083c2:	2000      	movs	r0, #0
 80083c4:	4607      	mov	r7, r0
 80083c6:	9207      	str	r2, [sp, #28]
 80083c8:	9908      	ldr	r1, [sp, #32]
 80083ca:	eddf 7a2b 	vldr	s15, [pc, #172]	@ 8008478 <pool_func_mp_array_f32+0x340>
 80083ce:	42b1      	cmp	r1, r6
 80083d0:	da1f      	bge.n	8008412 <pool_func_mp_array_f32+0x2da>
 80083d2:	9006      	str	r0, [sp, #24]
 80083d4:	42a5      	cmp	r5, r4
 80083d6:	da17      	bge.n	8008408 <pool_func_mp_array_f32+0x2d0>
 80083d8:	4561      	cmp	r1, ip
 80083da:	da15      	bge.n	8008408 <pool_func_mp_array_f32+0x2d0>
 80083dc:	fb01 5208 	mla	r2, r1, r8, r5
 80083e0:	462b      	mov	r3, r5
 80083e2:	fb0e 7202 	mla	r2, lr, r2, r7
 80083e6:	eb09 0282 	add.w	r2, r9, r2, lsl #2
 80083ea:	ea41 0003 	orr.w	r0, r1, r3
 80083ee:	0400      	lsls	r0, r0, #16
 80083f0:	d405      	bmi.n	80083fe <pool_func_mp_array_f32+0x2c6>
 80083f2:	4598      	cmp	r8, r3
 80083f4:	dd03      	ble.n	80083fe <pool_func_mp_array_f32+0x2c6>
 80083f6:	ed92 7a00 	vldr	s14, [r2]
 80083fa:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80083fe:	3301      	adds	r3, #1
 8008400:	445a      	add	r2, fp
 8008402:	b218      	sxth	r0, r3
 8008404:	42a0      	cmp	r0, r4
 8008406:	dbf0      	blt.n	80083ea <pool_func_mp_array_f32+0x2b2>
 8008408:	3101      	adds	r1, #1
 800840a:	b209      	sxth	r1, r1
 800840c:	42b1      	cmp	r1, r6
 800840e:	dbe1      	blt.n	80083d4 <pool_func_mp_array_f32+0x29c>
 8008410:	9806      	ldr	r0, [sp, #24]
 8008412:	9b07      	ldr	r3, [sp, #28]
 8008414:	3001      	adds	r0, #1
 8008416:	441f      	add	r7, r3
 8008418:	b200      	sxth	r0, r0
 800841a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 800841c:	4570      	cmp	r0, lr
 800841e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8008422:	edc7 7a00 	vstr	s15, [r7]
 8008426:	4607      	mov	r7, r0
 8008428:	dbce      	blt.n	80083c8 <pool_func_mp_array_f32+0x290>
 800842a:	9a05      	ldr	r2, [sp, #20]
 800842c:	4653      	mov	r3, sl
 800842e:	9c02      	ldr	r4, [sp, #8]
 8008430:	9803      	ldr	r0, [sp, #12]
 8008432:	4414      	add	r4, r2
 8008434:	f8dd a03c 	ldr.w	sl, [sp, #60]	@ 0x3c
 8008438:	4410      	add	r0, r2
 800843a:	b2a2      	uxth	r2, r4
 800843c:	f10a 0501 	add.w	r5, sl, #1
 8008440:	9202      	str	r2, [sp, #8]
 8008442:	b282      	uxth	r2, r0
 8008444:	fa0f fa85 	sxth.w	sl, r5
 8008448:	9203      	str	r2, [sp, #12]
 800844a:	9a01      	ldr	r2, [sp, #4]
 800844c:	4650      	mov	r0, sl
 800844e:	4552      	cmp	r2, sl
 8008450:	dcac      	bgt.n	80083ac <pool_func_mp_array_f32+0x274>
 8008452:	4619      	mov	r1, r3
 8008454:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008456:	e9dd 250b 	ldrd	r2, r5, [sp, #44]	@ 0x2c
 800845a:	e9dd 470d 	ldrd	r4, r7, [sp, #52]	@ 0x34
 800845e:	3301      	adds	r3, #1
 8008460:	1960      	adds	r0, r4, r5
 8008462:	4422      	add	r2, r4
 8008464:	b21b      	sxth	r3, r3
 8008466:	b285      	uxth	r5, r0
 8008468:	9804      	ldr	r0, [sp, #16]
 800846a:	b292      	uxth	r2, r2
 800846c:	469a      	mov	sl, r3
 800846e:	4298      	cmp	r0, r3
 8008470:	dc8a      	bgt.n	8008388 <pool_func_mp_array_f32+0x250>
 8008472:	b011      	add	sp, #68	@ 0x44
 8008474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008478:	cf000000 	.word	0xcf000000
 800847c:	4652      	mov	r2, sl
 800847e:	4628      	mov	r0, r5
 8008480:	462e      	mov	r6, r5
 8008482:	462b      	mov	r3, r5
 8008484:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
 8008488:	4696      	mov	lr, r2
 800848a:	9d03      	ldr	r5, [sp, #12]
 800848c:	9a01      	ldr	r2, [sp, #4]
 800848e:	fa0f fc85 	sxth.w	ip, r5
 8008492:	f8dd b008 	ldr.w	fp, [sp, #8]
 8008496:	fb03 f302 	mul.w	r3, r3, r2
 800849a:	2200      	movs	r2, #0
 800849c:	e9cd 6008 	strd	r6, r0, [sp, #32]
 80084a0:	9303      	str	r3, [sp, #12]
 80084a2:	462e      	mov	r6, r5
 80084a4:	b203      	sxth	r3, r0
 80084a6:	4625      	mov	r5, r4
 80084a8:	4658      	mov	r0, fp
 80084aa:	4614      	mov	r4, r2
 80084ac:	9307      	str	r3, [sp, #28]
 80084ae:	4629      	mov	r1, r5
 80084b0:	4613      	mov	r3, r2
 80084b2:	9d03      	ldr	r5, [sp, #12]
 80084b4:	b217      	sxth	r7, r2
 80084b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80084b8:	442c      	add	r4, r5
 80084ba:	b205      	sxth	r5, r0
 80084bc:	fb0e f404 	mul.w	r4, lr, r4
 80084c0:	9406      	str	r4, [sp, #24]
 80084c2:	2400      	movs	r4, #0
 80084c4:	e9cd 300a 	strd	r3, r0, [sp, #40]	@ 0x28
 80084c8:	46a3      	mov	fp, r4
 80084ca:	4630      	mov	r0, r6
 80084cc:	9e07      	ldr	r6, [sp, #28]
 80084ce:	ed5f 7a16 	vldr	s15, [pc, #-88]	@ 8008478 <pool_func_mp_array_f32+0x340>
 80084d2:	4566      	cmp	r6, ip
 80084d4:	da17      	bge.n	8008506 <pool_func_mp_array_f32+0x3ce>
 80084d6:	940d      	str	r4, [sp, #52]	@ 0x34
 80084d8:	42af      	cmp	r7, r5
 80084da:	da0f      	bge.n	80084fc <pool_func_mp_array_f32+0x3c4>
 80084dc:	fb08 7306 	mla	r3, r8, r6, r7
 80084e0:	463a      	mov	r2, r7
 80084e2:	fb0e b303 	mla	r3, lr, r3, fp
 80084e6:	eb09 0383 	add.w	r3, r9, r3, lsl #2
 80084ea:	3201      	adds	r2, #1
 80084ec:	ed93 7a00 	vldr	s14, [r3]
 80084f0:	4453      	add	r3, sl
 80084f2:	b214      	sxth	r4, r2
 80084f4:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 80084f8:	42ac      	cmp	r4, r5
 80084fa:	dbf6      	blt.n	80084ea <pool_func_mp_array_f32+0x3b2>
 80084fc:	3601      	adds	r6, #1
 80084fe:	b236      	sxth	r6, r6
 8008500:	4566      	cmp	r6, ip
 8008502:	dbe9      	blt.n	80084d8 <pool_func_mp_array_f32+0x3a0>
 8008504:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 8008506:	9b06      	ldr	r3, [sp, #24]
 8008508:	3401      	adds	r4, #1
 800850a:	449b      	add	fp, r3
 800850c:	b224      	sxth	r4, r4
 800850e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 8008510:	4574      	cmp	r4, lr
 8008512:	eb03 0b8b 	add.w	fp, r3, fp, lsl #2
 8008516:	edcb 7a00 	vstr	s15, [fp]
 800851a:	46a3      	mov	fp, r4
 800851c:	dbd6      	blt.n	80084cc <pool_func_mp_array_f32+0x394>
 800851e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8008520:	4606      	mov	r6, r0
 8008522:	9c05      	ldr	r4, [sp, #20]
 8008524:	3301      	adds	r3, #1
 8008526:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008528:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 800852a:	b21b      	sxth	r3, r3
 800852c:	9d01      	ldr	r5, [sp, #4]
 800852e:	4420      	add	r0, r4
 8008530:	4422      	add	r2, r4
 8008532:	429d      	cmp	r5, r3
 8008534:	461c      	mov	r4, r3
 8008536:	b280      	uxth	r0, r0
 8008538:	b292      	uxth	r2, r2
 800853a:	dcba      	bgt.n	80084b2 <pool_func_mp_array_f32+0x37a>
 800853c:	4635      	mov	r5, r6
 800853e:	9e08      	ldr	r6, [sp, #32]
 8008540:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008542:	460c      	mov	r4, r1
 8008544:	194a      	adds	r2, r1, r5
 8008546:	3601      	adds	r6, #1
 8008548:	180b      	adds	r3, r1, r0
 800854a:	b236      	sxth	r6, r6
 800854c:	b295      	uxth	r5, r2
 800854e:	9a04      	ldr	r2, [sp, #16]
 8008550:	b298      	uxth	r0, r3
 8008552:	4633      	mov	r3, r6
 8008554:	42b2      	cmp	r2, r6
 8008556:	dc99      	bgt.n	800848c <pool_func_mp_array_f32+0x354>
 8008558:	e684      	b.n	8008264 <pool_func_mp_array_f32+0x12c>
 800855a:	bf00      	nop

0800855c <lite_decompress_ilutof32>:
 800855c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8008560:	9d08      	ldr	r5, [sp, #32]
 8008562:	4604      	mov	r4, r0
 8008564:	2b04      	cmp	r3, #4
 8008566:	4608      	mov	r0, r1
 8008568:	ea4f 0685 	mov.w	r6, r5, lsl #2
 800856c:	eb04 0585 	add.w	r5, r4, r5, lsl #2
 8008570:	d012      	beq.n	8008598 <lite_decompress_ilutof32+0x3c>
 8008572:	2b08      	cmp	r3, #8
 8008574:	d10e      	bne.n	8008594 <lite_decompress_ilutof32+0x38>
 8008576:	42ac      	cmp	r4, r5
 8008578:	d20c      	bcs.n	8008594 <lite_decompress_ilutof32+0x38>
 800857a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800857e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008582:	681b      	ldr	r3, [r3, #0]
 8008584:	f844 3b04 	str.w	r3, [r4], #4
 8008588:	42a5      	cmp	r5, r4
 800858a:	d8f6      	bhi.n	800857a <lite_decompress_ilutof32+0x1e>
 800858c:	3e01      	subs	r6, #1
 800858e:	eb00 0696 	add.w	r6, r0, r6, lsr #2
 8008592:	1c70      	adds	r0, r6, #1
 8008594:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008598:	9b07      	ldr	r3, [sp, #28]
 800859a:	085f      	lsrs	r7, r3, #1
 800859c:	f003 0601 	and.w	r6, r3, #1
 80085a0:	ea4f 09c7 	mov.w	r9, r7, lsl #3
 80085a4:	f107 38ff 	add.w	r8, r7, #4294967295	@ 0xffffffff
 80085a8:	42ac      	cmp	r4, r5
 80085aa:	d2f3      	bcs.n	8008594 <lite_decompress_ilutof32+0x38>
 80085ac:	b30f      	cbz	r7, 80085f2 <lite_decompress_ilutof32+0x96>
 80085ae:	f104 0e08 	add.w	lr, r4, #8
 80085b2:	f100 3cff 	add.w	ip, r0, #4294967295	@ 0xffffffff
 80085b6:	eb00 0108 	add.w	r1, r0, r8
 80085ba:	f81c 3f01 	ldrb.w	r3, [ip, #1]!
 80085be:	f10e 0e08 	add.w	lr, lr, #8
 80085c2:	091b      	lsrs	r3, r3, #4
 80085c4:	4561      	cmp	r1, ip
 80085c6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085ca:	681b      	ldr	r3, [r3, #0]
 80085cc:	f84e 3c10 	str.w	r3, [lr, #-16]
 80085d0:	f89c 3000 	ldrb.w	r3, [ip]
 80085d4:	f003 030f 	and.w	r3, r3, #15
 80085d8:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	f84e 3c0c 	str.w	r3, [lr, #-12]
 80085e2:	d1ea      	bne.n	80085ba <lite_decompress_ilutof32+0x5e>
 80085e4:	4438      	add	r0, r7
 80085e6:	444c      	add	r4, r9
 80085e8:	b92e      	cbnz	r6, 80085f6 <lite_decompress_ilutof32+0x9a>
 80085ea:	42a5      	cmp	r5, r4
 80085ec:	d8df      	bhi.n	80085ae <lite_decompress_ilutof32+0x52>
 80085ee:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80085f2:	b906      	cbnz	r6, 80085f6 <lite_decompress_ilutof32+0x9a>
 80085f4:	e7fe      	b.n	80085f4 <lite_decompress_ilutof32+0x98>
 80085f6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80085fa:	091b      	lsrs	r3, r3, #4
 80085fc:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008600:	681b      	ldr	r3, [r3, #0]
 8008602:	f844 3b04 	str.w	r3, [r4], #4
 8008606:	e7cf      	b.n	80085a8 <lite_decompress_ilutof32+0x4c>

08008608 <forward_lite_dense_if32of32wf32>:
 8008608:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800860c:	ed2d 8b0c 	vpush	{d8-d13}
 8008610:	e9d0 c305 	ldrd	ip, r3, [r0, #20]
 8008614:	e9d0 1700 	ldrd	r1, r7, [r0]
 8008618:	fb03 f30c 	mul.w	r3, r3, ip
 800861c:	4602      	mov	r2, r0
 800861e:	b083      	sub	sp, #12
 8008620:	eb01 0083 	add.w	r0, r1, r3, lsl #2
 8008624:	4281      	cmp	r1, r0
 8008626:	f080 811d 	bcs.w	8008864 <forward_lite_dense_if32of32wf32+0x25c>
 800862a:	6915      	ldr	r5, [r2, #16]
 800862c:	ea4f 068c 	mov.w	r6, ip, lsl #2
 8008630:	4664      	mov	r4, ip
 8008632:	eb01 0806 	add.w	r8, r1, r6
 8008636:	6896      	ldr	r6, [r2, #8]
 8008638:	4588      	cmp	r8, r1
 800863a:	f240 8108 	bls.w	800884e <forward_lite_dense_if32of32wf32+0x246>
 800863e:	f1a5 0e10 	sub.w	lr, r5, #16
 8008642:	ea4f 0985 	mov.w	r9, r5, lsl #2
 8008646:	468c      	mov	ip, r1
 8008648:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 800864c:	f10e 0e01 	add.w	lr, lr, #1
 8008650:	ea4f 1b8e 	mov.w	fp, lr, lsl #6
 8008654:	eb07 1e8e 	add.w	lr, r7, lr, lsl #6
 8008658:	e9cd 0100 	strd	r0, r1, [sp]
 800865c:	2d0f      	cmp	r5, #15
 800865e:	f240 8106 	bls.w	800886e <forward_lite_dense_if32of32wf32+0x266>
 8008662:	f107 0140 	add.w	r1, r7, #64	@ 0x40
 8008666:	f106 0340 	add.w	r3, r6, #64	@ 0x40
 800866a:	ed9f 7a93 	vldr	s14, [pc, #588]	@ 80088b8 <forward_lite_dense_if32of32wf32+0x2b0>
 800866e:	4628      	mov	r0, r5
 8008670:	ed53 6a0f 	vldr	s13, [r3, #-60]	@ 0xffffffc4
 8008674:	3810      	subs	r0, #16
 8008676:	ed51 7a0f 	vldr	s15, [r1, #-60]	@ 0xffffffc4
 800867a:	3340      	adds	r3, #64	@ 0x40
 800867c:	ed51 4a10 	vldr	s9, [r1, #-64]	@ 0xffffffc0
 8008680:	280f      	cmp	r0, #15
 8008682:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008686:	ed13 5a20 	vldr	s10, [r3, #-128]	@ 0xffffff80
 800868a:	ed51 5a0e 	vldr	s11, [r1, #-56]	@ 0xffffffc8
 800868e:	f101 0140 	add.w	r1, r1, #64	@ 0x40
 8008692:	ed53 6a1e 	vldr	s13, [r3, #-120]	@ 0xffffff88
 8008696:	eee4 7a85 	vfma.f32	s15, s9, s10
 800869a:	ed11 6a1d 	vldr	s12, [r1, #-116]	@ 0xffffff8c
 800869e:	ed13 da1d 	vldr	s26, [r3, #-116]	@ 0xffffff8c
 80086a2:	ed53 ca1c 	vldr	s25, [r3, #-112]	@ 0xffffff90
 80086a6:	ed11 ca1c 	vldr	s24, [r1, #-112]	@ 0xffffff90
 80086aa:	ed11 ba1b 	vldr	s22, [r1, #-108]	@ 0xffffff94
 80086ae:	ed53 ba1b 	vldr	s23, [r3, #-108]	@ 0xffffff94
 80086b2:	eee5 7aa6 	vfma.f32	s15, s11, s13
 80086b6:	ed11 aa1a 	vldr	s20, [r1, #-104]	@ 0xffffff98
 80086ba:	ed53 aa1a 	vldr	s21, [r3, #-104]	@ 0xffffff98
 80086be:	ed11 9a19 	vldr	s18, [r1, #-100]	@ 0xffffff9c
 80086c2:	ed53 9a19 	vldr	s19, [r3, #-100]	@ 0xffffff9c
 80086c6:	ed51 8a18 	vldr	s17, [r1, #-96]	@ 0xffffffa0
 80086ca:	ed13 8a18 	vldr	s16, [r3, #-96]	@ 0xffffffa0
 80086ce:	eeed 7a06 	vfma.f32	s15, s26, s12
 80086d2:	ed11 0a17 	vldr	s0, [r1, #-92]	@ 0xffffffa4
 80086d6:	ed53 0a17 	vldr	s1, [r3, #-92]	@ 0xffffffa4
 80086da:	ed11 1a16 	vldr	s2, [r1, #-88]	@ 0xffffffa8
 80086de:	ed53 1a16 	vldr	s3, [r3, #-88]	@ 0xffffffa8
 80086e2:	ed11 2a15 	vldr	s4, [r1, #-84]	@ 0xffffffac
 80086e6:	ed53 2a15 	vldr	s5, [r3, #-84]	@ 0xffffffac
 80086ea:	eeec 7a8c 	vfma.f32	s15, s25, s24
 80086ee:	ed11 3a14 	vldr	s6, [r1, #-80]	@ 0xffffffb0
 80086f2:	ed53 3a14 	vldr	s7, [r3, #-80]	@ 0xffffffb0
 80086f6:	ed51 4a13 	vldr	s9, [r1, #-76]	@ 0xffffffb4
 80086fa:	ed13 4a13 	vldr	s8, [r3, #-76]	@ 0xffffffb4
 80086fe:	ed51 5a12 	vldr	s11, [r1, #-72]	@ 0xffffffb8
 8008702:	ed13 5a12 	vldr	s10, [r3, #-72]	@ 0xffffffb8
 8008706:	eeeb 7a8b 	vfma.f32	s15, s23, s22
 800870a:	ed51 6a11 	vldr	s13, [r1, #-68]	@ 0xffffffbc
 800870e:	ed13 6a11 	vldr	s12, [r3, #-68]	@ 0xffffffbc
 8008712:	eeea 7a8a 	vfma.f32	s15, s21, s20
 8008716:	eee9 7a89 	vfma.f32	s15, s19, s18
 800871a:	eee8 7a88 	vfma.f32	s15, s17, s16
 800871e:	eee0 7a20 	vfma.f32	s15, s0, s1
 8008722:	eee1 7a21 	vfma.f32	s15, s2, s3
 8008726:	eee2 7a22 	vfma.f32	s15, s4, s5
 800872a:	eee3 7a23 	vfma.f32	s15, s6, s7
 800872e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008732:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008736:	eee6 7a26 	vfma.f32	s15, s12, s13
 800873a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800873e:	d897      	bhi.n	8008670 <forward_lite_dense_if32of32wf32+0x68>
 8008740:	eb06 010b 	add.w	r1, r6, fp
 8008744:	f005 000f 	and.w	r0, r5, #15
 8008748:	4673      	mov	r3, lr
 800874a:	2803      	cmp	r0, #3
 800874c:	d95f      	bls.n	800880e <forward_lite_dense_if32of32wf32+0x206>
 800874e:	edd1 6a01 	vldr	s13, [r1, #4]
 8008752:	1f04      	subs	r4, r0, #4
 8008754:	edd3 7a01 	vldr	s15, [r3, #4]
 8008758:	ed93 4a00 	vldr	s8, [r3]
 800875c:	2c03      	cmp	r4, #3
 800875e:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8008762:	edd1 4a00 	vldr	s9, [r1]
 8008766:	ed93 5a02 	vldr	s10, [r3, #8]
 800876a:	edd1 5a02 	vldr	s11, [r1, #8]
 800876e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008772:	ed93 6a03 	vldr	s12, [r3, #12]
 8008776:	edd1 6a03 	vldr	s13, [r1, #12]
 800877a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800877e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008782:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008786:	eeb0 7a67 	vmov.f32	s14, s15
 800878a:	d938      	bls.n	80087fe <forward_lite_dense_if32of32wf32+0x1f6>
 800878c:	edd1 6a05 	vldr	s13, [r1, #20]
 8008790:	f1a0 0a08 	sub.w	sl, r0, #8
 8008794:	edd3 7a05 	vldr	s15, [r3, #20]
 8008798:	ed93 4a04 	vldr	s8, [r3, #16]
 800879c:	f1ba 0f03 	cmp.w	sl, #3
 80087a0:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087a4:	edd1 4a04 	vldr	s9, [r1, #16]
 80087a8:	ed93 5a06 	vldr	s10, [r3, #24]
 80087ac:	edd1 5a06 	vldr	s11, [r1, #24]
 80087b0:	eee4 7a24 	vfma.f32	s15, s8, s9
 80087b4:	ed93 6a07 	vldr	s12, [r3, #28]
 80087b8:	edd1 6a07 	vldr	s13, [r1, #28]
 80087bc:	eee5 7a25 	vfma.f32	s15, s10, s11
 80087c0:	eee6 7a26 	vfma.f32	s15, s12, s13
 80087c4:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087c8:	d919      	bls.n	80087fe <forward_lite_dense_if32of32wf32+0x1f6>
 80087ca:	edd3 6a09 	vldr	s13, [r3, #36]	@ 0x24
 80087ce:	edd1 7a09 	vldr	s15, [r1, #36]	@ 0x24
 80087d2:	ed91 4a08 	vldr	s8, [r1, #32]
 80087d6:	ee67 7aa6 	vmul.f32	s15, s15, s13
 80087da:	edd3 4a08 	vldr	s9, [r3, #32]
 80087de:	ed91 5a0a 	vldr	s10, [r1, #40]	@ 0x28
 80087e2:	edd3 5a0a 	vldr	s11, [r3, #40]	@ 0x28
 80087e6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80087ea:	ed91 6a0b 	vldr	s12, [r1, #44]	@ 0x2c
 80087ee:	edd3 6a0b 	vldr	s13, [r3, #44]	@ 0x2c
 80087f2:	eee5 7a25 	vfma.f32	s15, s10, s11
 80087f6:	eee6 7a26 	vfma.f32	s15, s12, s13
 80087fa:	ee37 7a27 	vadd.f32	s14, s14, s15
 80087fe:	08a4      	lsrs	r4, r4, #2
 8008800:	f000 0003 	and.w	r0, r0, #3
 8008804:	3401      	adds	r4, #1
 8008806:	eb01 1104 	add.w	r1, r1, r4, lsl #4
 800880a:	eb03 1304 	add.w	r3, r3, r4, lsl #4
 800880e:	b1a8      	cbz	r0, 800883c <forward_lite_dense_if32of32wf32+0x234>
 8008810:	edd3 6a00 	vldr	s13, [r3]
 8008814:	2801      	cmp	r0, #1
 8008816:	edd1 7a00 	vldr	s15, [r1]
 800881a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800881e:	d00d      	beq.n	800883c <forward_lite_dense_if32of32wf32+0x234>
 8008820:	edd3 6a01 	vldr	s13, [r3, #4]
 8008824:	2802      	cmp	r0, #2
 8008826:	edd1 7a01 	vldr	s15, [r1, #4]
 800882a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800882e:	d005      	beq.n	800883c <forward_lite_dense_if32of32wf32+0x234>
 8008830:	edd1 6a02 	vldr	s13, [r1, #8]
 8008834:	edd3 7a02 	vldr	s15, [r3, #8]
 8008838:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800883c:	ecac 7a01 	vstmia	ip!, {s14}
 8008840:	45e0      	cmp	r8, ip
 8008842:	444e      	add	r6, r9
 8008844:	f63f af0a 	bhi.w	800865c <forward_lite_dense_if32of32wf32+0x54>
 8008848:	6954      	ldr	r4, [r2, #20]
 800884a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800884e:	68d3      	ldr	r3, [r2, #12]
 8008850:	b99b      	cbnz	r3, 800887a <forward_lite_dense_if32of32wf32+0x272>
 8008852:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 8008856:	6915      	ldr	r5, [r2, #16]
 8008858:	00a6      	lsls	r6, r4, #2
 800885a:	4288      	cmp	r0, r1
 800885c:	eb07 0785 	add.w	r7, r7, r5, lsl #2
 8008860:	f63f aee7 	bhi.w	8008632 <forward_lite_dense_if32of32wf32+0x2a>
 8008864:	b003      	add	sp, #12
 8008866:	ecbd 8b0c 	vpop	{d8-d13}
 800886a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800886e:	4628      	mov	r0, r5
 8008870:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 80088b8 <forward_lite_dense_if32of32wf32+0x2b0>
 8008874:	4631      	mov	r1, r6
 8008876:	463b      	mov	r3, r7
 8008878:	e767      	b.n	800874a <forward_lite_dense_if32of32wf32+0x142>
 800887a:	2c00      	cmp	r4, #0
 800887c:	d0e9      	beq.n	8008852 <forward_lite_dense_if32of32wf32+0x24a>
 800887e:	edd1 7a00 	vldr	s15, [r1]
 8008882:	ed93 7a00 	vldr	s14, [r3]
 8008886:	ee77 7a87 	vadd.f32	s15, s15, s14
 800888a:	edc1 7a00 	vstr	s15, [r1]
 800888e:	6954      	ldr	r4, [r2, #20]
 8008890:	2c01      	cmp	r4, #1
 8008892:	d9de      	bls.n	8008852 <forward_lite_dense_if32of32wf32+0x24a>
 8008894:	1d0d      	adds	r5, r1, #4
 8008896:	2301      	movs	r3, #1
 8008898:	68d4      	ldr	r4, [r2, #12]
 800889a:	ed95 7a00 	vldr	s14, [r5]
 800889e:	eb04 0483 	add.w	r4, r4, r3, lsl #2
 80088a2:	3301      	adds	r3, #1
 80088a4:	edd4 7a00 	vldr	s15, [r4]
 80088a8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80088ac:	ece5 7a01 	vstmia	r5!, {s15}
 80088b0:	6954      	ldr	r4, [r2, #20]
 80088b2:	429c      	cmp	r4, r3
 80088b4:	d8f0      	bhi.n	8008898 <forward_lite_dense_if32of32wf32+0x290>
 80088b6:	e7cc      	b.n	8008852 <forward_lite_dense_if32of32wf32+0x24a>
 80088b8:	00000000 	.word	0x00000000

080088bc <forward_lite_dense_if32of32wf32_lut4>:
 80088bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088c0:	b08d      	sub	sp, #52	@ 0x34
 80088c2:	4604      	mov	r4, r0
 80088c4:	4618      	mov	r0, r3
 80088c6:	460d      	mov	r5, r1
 80088c8:	920a      	str	r2, [sp, #40]	@ 0x28
 80088ca:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80088ce:	e9dd 2319 	ldrd	r2, r3, [sp, #100]	@ 0x64
 80088d2:	e9dd 6717 	ldrd	r6, r7, [sp, #92]	@ 0x5c
 80088d6:	fb02 f303 	mul.w	r3, r2, r3
 80088da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 80088de:	9308      	str	r3, [sp, #32]
 80088e0:	f1b8 0f00 	cmp.w	r8, #0
 80088e4:	d004      	beq.n	80088f0 <forward_lite_dense_if32of32wf32_lut4+0x34>
 80088e6:	2240      	movs	r2, #64	@ 0x40
 80088e8:	4641      	mov	r1, r8
 80088ea:	f000 fc15 	bl	8009118 <st_int8_copy>
 80088ee:	4640      	mov	r0, r8
 80088f0:	9b08      	ldr	r3, [sp, #32]
 80088f2:	429c      	cmp	r4, r3
 80088f4:	f080 810c 	bcs.w	8008b10 <forward_lite_dense_if32of32wf32_lut4+0x254>
 80088f8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80088fa:	08fa      	lsrs	r2, r7, #3
 80088fc:	f027 0901 	bic.w	r9, r7, #1
 8008900:	9405      	str	r4, [sp, #20]
 8008902:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008906:	f007 0301 	and.w	r3, r7, #1
 800890a:	eb05 1b42 	add.w	fp, r5, r2, lsl #5
 800890e:	9202      	str	r2, [sp, #8]
 8008910:	9303      	str	r3, [sp, #12]
 8008912:	00bb      	lsls	r3, r7, #2
 8008914:	0092      	lsls	r2, r2, #2
 8008916:	f105 0120 	add.w	r1, r5, #32
 800891a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800891c:	eb05 0989 	add.w	r9, r5, r9, lsl #2
 8008920:	46e6      	mov	lr, ip
 8008922:	465c      	mov	r4, fp
 8008924:	9b05      	ldr	r3, [sp, #20]
 8008926:	9204      	str	r2, [sp, #16]
 8008928:	f8cd c01c 	str.w	ip, [sp, #28]
 800892c:	9617      	str	r6, [sp, #92]	@ 0x5c
 800892e:	f8cd c024 	str.w	ip, [sp, #36]	@ 0x24
 8008932:	9a07      	ldr	r2, [sp, #28]
 8008934:	eb03 0a02 	add.w	sl, r3, r2
 8008938:	f1a1 0220 	sub.w	r2, r1, #32
 800893c:	459a      	cmp	sl, r3
 800893e:	9206      	str	r2, [sp, #24]
 8008940:	f240 80e9 	bls.w	8008b16 <forward_lite_dense_if32of32wf32_lut4+0x25a>
 8008944:	f109 3bff 	add.w	fp, r9, #4294967295	@ 0xffffffff
 8008948:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800894a:	4698      	mov	r8, r3
 800894c:	465d      	mov	r5, fp
 800894e:	9b02      	ldr	r3, [sp, #8]
 8008950:	2b00      	cmp	r3, #0
 8008952:	f000 80c0 	beq.w	8008ad6 <forward_lite_dense_if32of32wf32_lut4+0x21a>
 8008956:	9b04      	ldr	r3, [sp, #16]
 8008958:	ed9f 7a7b 	vldr	s14, [pc, #492]	@ 8008b48 <forward_lite_dense_if32of32wf32_lut4+0x28c>
 800895c:	eb02 0c03 	add.w	ip, r2, r3
 8008960:	460b      	mov	r3, r1
 8008962:	f892 e000 	ldrb.w	lr, [r2]
 8008966:	3204      	adds	r2, #4
 8008968:	ed53 2a07 	vldr	s5, [r3, #-28]	@ 0xffffffe4
 800896c:	3320      	adds	r3, #32
 800896e:	f00e 0b0f 	and.w	fp, lr, #15
 8008972:	ea4f 1e1e 	mov.w	lr, lr, lsr #4
 8008976:	f812 7c03 	ldrb.w	r7, [r2, #-3]
 800897a:	eb00 0b8b 	add.w	fp, r0, fp, lsl #2
 800897e:	ed13 4a10 	vldr	s8, [r3, #-64]	@ 0xffffffc0
 8008982:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 8008986:	ed53 3a0e 	vldr	s7, [r3, #-56]	@ 0xffffffc8
 800898a:	eddb 7a00 	vldr	s15, [fp]
 800898e:	ed9e 3a00 	vldr	s6, [lr]
 8008992:	ea4f 1e17 	mov.w	lr, r7, lsr #4
 8008996:	ee67 7aa2 	vmul.f32	s15, s15, s5
 800899a:	f007 070f 	and.w	r7, r7, #15
 800899e:	eb00 0e8e 	add.w	lr, r0, lr, lsl #2
 80089a2:	f812 6c02 	ldrb.w	r6, [r2, #-2]
 80089a6:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80089aa:	ed13 5a0d 	vldr	s10, [r3, #-52]	@ 0xffffffcc
 80089ae:	eee3 7a04 	vfma.f32	s15, s6, s8
 80089b2:	ed9e 3a00 	vldr	s6, [lr]
 80089b6:	ed97 4a00 	vldr	s8, [r7]
 80089ba:	0937      	lsrs	r7, r6, #4
 80089bc:	ed53 4a0c 	vldr	s9, [r3, #-48]	@ 0xffffffd0
 80089c0:	f006 060f 	and.w	r6, r6, #15
 80089c4:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80089c8:	ed13 6a0b 	vldr	s12, [r3, #-44]	@ 0xffffffd4
 80089cc:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 80089d0:	ed53 5a0a 	vldr	s11, [r3, #-40]	@ 0xffffffd8
 80089d4:	ed53 6a09 	vldr	s13, [r3, #-36]	@ 0xffffffdc
 80089d8:	eee3 7a23 	vfma.f32	s15, s6, s7
 80089dc:	eee4 7a05 	vfma.f32	s15, s8, s10
 80089e0:	ed97 4a00 	vldr	s8, [r7]
 80089e4:	ed96 5a00 	vldr	s10, [r6]
 80089e8:	f812 6c01 	ldrb.w	r6, [r2, #-1]
 80089ec:	4562      	cmp	r2, ip
 80089ee:	ea4f 1716 	mov.w	r7, r6, lsr #4
 80089f2:	f006 060f 	and.w	r6, r6, #15
 80089f6:	eee4 7a24 	vfma.f32	s15, s8, s9
 80089fa:	eb00 0787 	add.w	r7, r0, r7, lsl #2
 80089fe:	eb00 0686 	add.w	r6, r0, r6, lsl #2
 8008a02:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008a06:	ed97 5a00 	vldr	s10, [r7]
 8008a0a:	ed96 6a00 	vldr	s12, [r6]
 8008a0e:	eee5 7a25 	vfma.f32	s15, s10, s11
 8008a12:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a16:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a1a:	d1a2      	bne.n	8008962 <forward_lite_dense_if32of32wf32_lut4+0xa6>
 8008a1c:	46a6      	mov	lr, r4
 8008a1e:	45ce      	cmp	lr, r9
 8008a20:	d260      	bcs.n	8008ae4 <forward_lite_dense_if32of32wf32_lut4+0x228>
 8008a22:	eba5 070e 	sub.w	r7, r5, lr
 8008a26:	f10e 0208 	add.w	r2, lr, #8
 8008a2a:	f10c 36ff 	add.w	r6, ip, #4294967295	@ 0xffffffff
 8008a2e:	f8cd a004 	str.w	sl, [sp, #4]
 8008a32:	ea4f 0bd7 	mov.w	fp, r7, lsr #3
 8008a36:	eb0c 07d7 	add.w	r7, ip, r7, lsr #3
 8008a3a:	f816 3f01 	ldrb.w	r3, [r6, #1]!
 8008a3e:	3208      	adds	r2, #8
 8008a40:	ed52 5a03 	vldr	s11, [r2, #-12]
 8008a44:	f003 0a0f 	and.w	sl, r3, #15
 8008a48:	091b      	lsrs	r3, r3, #4
 8008a4a:	ed52 6a04 	vldr	s13, [r2, #-16]
 8008a4e:	42b7      	cmp	r7, r6
 8008a50:	eb00 0a8a 	add.w	sl, r0, sl, lsl #2
 8008a54:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008a58:	edda 7a00 	vldr	s15, [sl]
 8008a5c:	ed93 6a00 	vldr	s12, [r3]
 8008a60:	ee67 7aa5 	vmul.f32	s15, s15, s11
 8008a64:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008a68:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008a6c:	d1e5      	bne.n	8008a3a <forward_lite_dense_if32of32wf32_lut4+0x17e>
 8008a6e:	f10b 0b01 	add.w	fp, fp, #1
 8008a72:	f8dd a004 	ldr.w	sl, [sp, #4]
 8008a76:	eb0c 020b 	add.w	r2, ip, fp
 8008a7a:	eb0e 0ecb 	add.w	lr, lr, fp, lsl #3
 8008a7e:	9b03      	ldr	r3, [sp, #12]
 8008a80:	b30b      	cbz	r3, 8008ac6 <forward_lite_dense_if32of32wf32_lut4+0x20a>
 8008a82:	f812 3b01 	ldrb.w	r3, [r2], #1
 8008a86:	edde 7a00 	vldr	s15, [lr]
 8008a8a:	091b      	lsrs	r3, r3, #4
 8008a8c:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008a90:	edd3 6a00 	vldr	s13, [r3]
 8008a94:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008a98:	eca8 7a01 	vstmia	r8!, {s14}
 8008a9c:	45c2      	cmp	sl, r8
 8008a9e:	f63f af56 	bhi.w	800894e <forward_lite_dense_if32of32wf32_lut4+0x92>
 8008aa2:	9b05      	ldr	r3, [sp, #20]
 8008aa4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa6:	189d      	adds	r5, r3, r2
 8008aa8:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8008aaa:	b9eb      	cbnz	r3, 8008ae8 <forward_lite_dense_if32of32wf32_lut4+0x22c>
 8008aac:	9b08      	ldr	r3, [sp, #32]
 8008aae:	42ab      	cmp	r3, r5
 8008ab0:	d92e      	bls.n	8008b10 <forward_lite_dense_if32of32wf32_lut4+0x254>
 8008ab2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008ab4:	4499      	add	r9, r3
 8008ab6:	441c      	add	r4, r3
 8008ab8:	4419      	add	r1, r3
 8008aba:	9b05      	ldr	r3, [sp, #20]
 8008abc:	459a      	cmp	sl, r3
 8008abe:	d92c      	bls.n	8008b1a <forward_lite_dense_if32of32wf32_lut4+0x25e>
 8008ac0:	462b      	mov	r3, r5
 8008ac2:	9505      	str	r5, [sp, #20]
 8008ac4:	e735      	b.n	8008932 <forward_lite_dense_if32of32wf32_lut4+0x76>
 8008ac6:	eca8 7a01 	vstmia	r8!, {s14}
 8008aca:	45c2      	cmp	sl, r8
 8008acc:	d9e9      	bls.n	8008aa2 <forward_lite_dense_if32of32wf32_lut4+0x1e6>
 8008ace:	9b02      	ldr	r3, [sp, #8]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	f47f af40 	bne.w	8008956 <forward_lite_dense_if32of32wf32_lut4+0x9a>
 8008ad6:	f8dd e018 	ldr.w	lr, [sp, #24]
 8008ada:	4694      	mov	ip, r2
 8008adc:	ed9f 7a1a 	vldr	s14, [pc, #104]	@ 8008b48 <forward_lite_dense_if32of32wf32_lut4+0x28c>
 8008ae0:	45ce      	cmp	lr, r9
 8008ae2:	d39e      	bcc.n	8008a22 <forward_lite_dense_if32of32wf32_lut4+0x166>
 8008ae4:	4662      	mov	r2, ip
 8008ae6:	e7ca      	b.n	8008a7e <forward_lite_dense_if32of32wf32_lut4+0x1c2>
 8008ae8:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	d0de      	beq.n	8008aac <forward_lite_dense_if32of32wf32_lut4+0x1f0>
 8008aee:	9b07      	ldr	r3, [sp, #28]
 8008af0:	f8dd c05c 	ldr.w	ip, [sp, #92]	@ 0x5c
 8008af4:	1aea      	subs	r2, r5, r3
 8008af6:	edd2 7a00 	vldr	s15, [r2]
 8008afa:	ecbc 7a01 	vldmia	ip!, {s14}
 8008afe:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b02:	ece2 7a01 	vstmia	r2!, {s15}
 8008b06:	42aa      	cmp	r2, r5
 8008b08:	d1f5      	bne.n	8008af6 <forward_lite_dense_if32of32wf32_lut4+0x23a>
 8008b0a:	9b08      	ldr	r3, [sp, #32]
 8008b0c:	42ab      	cmp	r3, r5
 8008b0e:	d8d0      	bhi.n	8008ab2 <forward_lite_dense_if32of32wf32_lut4+0x1f6>
 8008b10:	b00d      	add	sp, #52	@ 0x34
 8008b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008b16:	461d      	mov	r5, r3
 8008b18:	e7c6      	b.n	8008aa8 <forward_lite_dense_if32of32wf32_lut4+0x1ec>
 8008b1a:	f8dd c01c 	ldr.w	ip, [sp, #28]
 8008b1e:	9919      	ldr	r1, [sp, #100]	@ 0x64
 8008b20:	9e17      	ldr	r6, [sp, #92]	@ 0x5c
 8008b22:	eba5 0c0c 	sub.w	ip, r5, ip
 8008b26:	b169      	cbz	r1, 8008b44 <forward_lite_dense_if32of32wf32_lut4+0x288>
 8008b28:	4663      	mov	r3, ip
 8008b2a:	4632      	mov	r2, r6
 8008b2c:	ed93 7a00 	vldr	s14, [r3]
 8008b30:	ecf2 7a01 	vldmia	r2!, {s15}
 8008b34:	ee77 7a87 	vadd.f32	s15, s15, s14
 8008b38:	ece3 7a01 	vstmia	r3!, {s15}
 8008b3c:	429d      	cmp	r5, r3
 8008b3e:	d1f5      	bne.n	8008b2c <forward_lite_dense_if32of32wf32_lut4+0x270>
 8008b40:	2900      	cmp	r1, #0
 8008b42:	d1f1      	bne.n	8008b28 <forward_lite_dense_if32of32wf32_lut4+0x26c>
 8008b44:	e7fe      	b.n	8008b44 <forward_lite_dense_if32of32wf32_lut4+0x288>
 8008b46:	bf00      	nop
 8008b48:	00000000 	.word	0x00000000

08008b4c <forward_lite_dense_if32of32wf32_lut8>:
 8008b4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008b50:	b093      	sub	sp, #76	@ 0x4c
 8008b52:	469a      	mov	sl, r3
 8008b54:	4604      	mov	r4, r0
 8008b56:	468b      	mov	fp, r1
 8008b58:	920d      	str	r2, [sp, #52]	@ 0x34
 8008b5a:	9e1c      	ldr	r6, [sp, #112]	@ 0x70
 8008b5c:	e9dd 231f 	ldrd	r2, r3, [sp, #124]	@ 0x7c
 8008b60:	e9dd 591d 	ldrd	r5, r9, [sp, #116]	@ 0x74
 8008b64:	fb02 f303 	mul.w	r3, r2, r3
 8008b68:	eb00 0383 	add.w	r3, r0, r3, lsl #2
 8008b6c:	930c      	str	r3, [sp, #48]	@ 0x30
 8008b6e:	b136      	cbz	r6, 8008b7e <forward_lite_dense_if32of32wf32_lut8+0x32>
 8008b70:	4650      	mov	r0, sl
 8008b72:	46b2      	mov	sl, r6
 8008b74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008b78:	4631      	mov	r1, r6
 8008b7a:	f000 facd 	bl	8009118 <st_int8_copy>
 8008b7e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008b80:	429c      	cmp	r4, r3
 8008b82:	f080 8290 	bcs.w	80090a6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 8008b86:	4ab5      	ldr	r2, [pc, #724]	@ (8008e5c <forward_lite_dense_if32of32wf32_lut8+0x310>)
 8008b88:	462f      	mov	r7, r5
 8008b8a:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008b8c:	444a      	add	r2, r9
 8008b8e:	eddf 3ab4 	vldr	s7, [pc, #720]	@ 8008e60 <forward_lite_dense_if32of32wf32_lut8+0x314>
 8008b92:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 8008b96:	0092      	lsls	r2, r2, #2
 8008b98:	f8cd c02c 	str.w	ip, [sp, #44]	@ 0x2c
 8008b9c:	0953      	lsrs	r3, r2, #5
 8008b9e:	f8cd c044 	str.w	ip, [sp, #68]	@ 0x44
 8008ba2:	f102 0020 	add.w	r0, r2, #32
 8008ba6:	4616      	mov	r6, r2
 8008ba8:	930e      	str	r3, [sp, #56]	@ 0x38
 8008baa:	3301      	adds	r3, #1
 8008bac:	eb0b 0800 	add.w	r8, fp, r0
 8008bb0:	4602      	mov	r2, r0
 8008bb2:	930f      	str	r3, [sp, #60]	@ 0x3c
 8008bb4:	00db      	lsls	r3, r3, #3
 8008bb6:	9310      	str	r3, [sp, #64]	@ 0x40
 8008bb8:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008bba:	eb04 0c03 	add.w	ip, r4, r3
 8008bbe:	45a4      	cmp	ip, r4
 8008bc0:	d952      	bls.n	8008c68 <forward_lite_dense_if32of32wf32_lut8+0x11c>
 8008bc2:	f106 031f 	add.w	r3, r6, #31
 8008bc6:	eb06 000b 	add.w	r0, r6, fp
 8008bca:	4625      	mov	r5, r4
 8008bcc:	eb0b 0e02 	add.w	lr, fp, r2
 8008bd0:	089b      	lsrs	r3, r3, #2
 8008bd2:	f100 011f 	add.w	r1, r0, #31
 8008bd6:	9001      	str	r0, [sp, #4]
 8008bd8:	3301      	adds	r3, #1
 8008bda:	9103      	str	r1, [sp, #12]
 8008bdc:	1f01      	subs	r1, r0, #4
 8008bde:	940a      	str	r4, [sp, #40]	@ 0x28
 8008be0:	9302      	str	r3, [sp, #8]
 8008be2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8008be4:	9104      	str	r1, [sp, #16]
 8008be6:	f10b 0104 	add.w	r1, fp, #4
 8008bea:	00db      	lsls	r3, r3, #3
 8008bec:	971d      	str	r7, [sp, #116]	@ 0x74
 8008bee:	9105      	str	r1, [sp, #20]
 8008bf0:	3310      	adds	r3, #16
 8008bf2:	9307      	str	r3, [sp, #28]
 8008bf4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8008bf6:	eb0b 1343 	add.w	r3, fp, r3, lsl #5
 8008bfa:	9306      	str	r3, [sp, #24]
 8008bfc:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008bfe:	e9cd 2608 	strd	r2, r6, [sp, #32]
 8008c02:	f1b9 0f07 	cmp.w	r9, #7
 8008c06:	d83f      	bhi.n	8008c88 <forward_lite_dense_if32of32wf32_lut8+0x13c>
 8008c08:	45c3      	cmp	fp, r8
 8008c0a:	ed9f 7a95 	vldr	s14, [pc, #596]	@ 8008e60 <forward_lite_dense_if32of32wf32_lut8+0x314>
 8008c0e:	d20f      	bcs.n	8008c30 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 8008c10:	4659      	mov	r1, fp
 8008c12:	4618      	mov	r0, r3
 8008c14:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008c18:	ecf1 7a01 	vldmia	r1!, {s15}
 8008c1c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008c20:	4541      	cmp	r1, r8
 8008c22:	edd2 6a00 	vldr	s13, [r2]
 8008c26:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008c2a:	d3f3      	bcc.n	8008c14 <forward_lite_dense_if32of32wf32_lut8+0xc8>
 8008c2c:	9a02      	ldr	r2, [sp, #8]
 8008c2e:	4413      	add	r3, r2
 8008c30:	eca5 7a01 	vstmia	r5!, {s14}
 8008c34:	45ac      	cmp	ip, r5
 8008c36:	d8e4      	bhi.n	8008c02 <forward_lite_dense_if32of32wf32_lut8+0xb6>
 8008c38:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8008c3a:	46f3      	mov	fp, lr
 8008c3c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008c3e:	9f1d      	ldr	r7, [sp, #116]	@ 0x74
 8008c40:	18e0      	adds	r0, r4, r3
 8008c42:	e9dd 2608 	ldrd	r2, r6, [sp, #32]
 8008c46:	2f00      	cmp	r7, #0
 8008c48:	f040 8218 	bne.w	800907c <forward_lite_dense_if32of32wf32_lut8+0x530>
 8008c4c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c4e:	4283      	cmp	r3, r0
 8008c50:	f240 8229 	bls.w	80090a6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 8008c54:	45a4      	cmp	ip, r4
 8008c56:	4490      	add	r8, r2
 8008c58:	f240 823d 	bls.w	80090d6 <forward_lite_dense_if32of32wf32_lut8+0x58a>
 8008c5c:	4604      	mov	r4, r0
 8008c5e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008c60:	eb04 0c03 	add.w	ip, r4, r3
 8008c64:	45a4      	cmp	ip, r4
 8008c66:	d8ac      	bhi.n	8008bc2 <forward_lite_dense_if32of32wf32_lut8+0x76>
 8008c68:	2f00      	cmp	r7, #0
 8008c6a:	f040 8205 	bne.w	8009078 <forward_lite_dense_if32of32wf32_lut8+0x52c>
 8008c6e:	469c      	mov	ip, r3
 8008c70:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008c72:	463d      	mov	r5, r7
 8008c74:	42a3      	cmp	r3, r4
 8008c76:	f240 8216 	bls.w	80090a6 <forward_lite_dense_if32of32wf32_lut8+0x55a>
 8008c7a:	f1cc 0100 	rsb	r1, ip, #0
 8008c7e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 8008c80:	2d00      	cmp	r5, #0
 8008c82:	f040 8217 	bne.w	80090b4 <forward_lite_dense_if32of32wf32_lut8+0x568>
 8008c86:	e7fe      	b.n	8008c86 <forward_lite_dense_if32of32wf32_lut8+0x13a>
 8008c88:	f003 0203 	and.w	r2, r3, #3
 8008c8c:	2a02      	cmp	r2, #2
 8008c8e:	f000 81ef 	beq.w	8009070 <forward_lite_dense_if32of32wf32_lut8+0x524>
 8008c92:	2a03      	cmp	r2, #3
 8008c94:	f000 80e6 	beq.w	8008e64 <forward_lite_dense_if32of32wf32_lut8+0x318>
 8008c98:	2a01      	cmp	r2, #1
 8008c9a:	f000 81d3 	beq.w	8009044 <forward_lite_dense_if32of32wf32_lut8+0x4f8>
 8008c9e:	9a01      	ldr	r2, [sp, #4]
 8008ca0:	ed9f 7a6f 	vldr	s14, [pc, #444]	@ 8008e60 <forward_lite_dense_if32of32wf32_lut8+0x314>
 8008ca4:	4593      	cmp	fp, r2
 8008ca6:	f200 8203 	bhi.w	80090b0 <forward_lite_dense_if32of32wf32_lut8+0x564>
 8008caa:	9807      	ldr	r0, [sp, #28]
 8008cac:	f103 0208 	add.w	r2, r3, #8
 8008cb0:	f10b 0120 	add.w	r1, fp, #32
 8008cb4:	18c4      	adds	r4, r0, r3
 8008cb6:	f812 0c07 	ldrb.w	r0, [r2, #-7]
 8008cba:	3208      	adds	r2, #8
 8008cbc:	ed51 2a07 	vldr	s5, [r1, #-28]	@ 0xffffffe4
 8008cc0:	3120      	adds	r1, #32
 8008cc2:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008cc6:	ed11 3a10 	vldr	s6, [r1, #-64]	@ 0xffffffc0
 8008cca:	ed11 4a0e 	vldr	s8, [r1, #-56]	@ 0xffffffc8
 8008cce:	edd0 7a00 	vldr	s15, [r0]
 8008cd2:	f812 0c10 	ldrb.w	r0, [r2, #-16]
 8008cd6:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8008cda:	ed51 4a0d 	vldr	s9, [r1, #-52]	@ 0xffffffcc
 8008cde:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008ce2:	ed51 6a0c 	vldr	s13, [r1, #-48]	@ 0xffffffd0
 8008ce6:	ed11 5a0b 	vldr	s10, [r1, #-44]	@ 0xffffffd4
 8008cea:	edd0 2a00 	vldr	s5, [r0]
 8008cee:	f812 0c0e 	ldrb.w	r0, [r2, #-14]
 8008cf2:	eee2 7a83 	vfma.f32	s15, s5, s6
 8008cf6:	ed51 5a0a 	vldr	s11, [r1, #-40]	@ 0xffffffd8
 8008cfa:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008cfe:	ed11 6a09 	vldr	s12, [r1, #-36]	@ 0xffffffdc
 8008d02:	ed90 3a00 	vldr	s6, [r0]
 8008d06:	f812 0c0d 	ldrb.w	r0, [r2, #-13]
 8008d0a:	eee3 7a04 	vfma.f32	s15, s6, s8
 8008d0e:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008d12:	ed90 4a00 	vldr	s8, [r0]
 8008d16:	f812 0c0c 	ldrb.w	r0, [r2, #-12]
 8008d1a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008d1e:	eee4 7a24 	vfma.f32	s15, s8, s9
 8008d22:	edd0 4a00 	vldr	s9, [r0]
 8008d26:	f812 0c0b 	ldrb.w	r0, [r2, #-11]
 8008d2a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008d2e:	eee4 7aa6 	vfma.f32	s15, s9, s13
 8008d32:	edd0 6a00 	vldr	s13, [r0]
 8008d36:	f812 0c0a 	ldrb.w	r0, [r2, #-10]
 8008d3a:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008d3e:	eee5 7a26 	vfma.f32	s15, s10, s13
 8008d42:	edd0 6a00 	vldr	s13, [r0]
 8008d46:	f812 0c09 	ldrb.w	r0, [r2, #-9]
 8008d4a:	4294      	cmp	r4, r2
 8008d4c:	eb0a 0080 	add.w	r0, sl, r0, lsl #2
 8008d50:	eee5 7aa6 	vfma.f32	s15, s11, s13
 8008d54:	edd0 6a00 	vldr	s13, [r0]
 8008d58:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008d5c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008d60:	d1a9      	bne.n	8008cb6 <forward_lite_dense_if32of32wf32_lut8+0x16a>
 8008d62:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 8008d64:	4413      	add	r3, r2
 8008d66:	9a06      	ldr	r2, [sp, #24]
 8008d68:	4572      	cmp	r2, lr
 8008d6a:	f4bf af61 	bcs.w	8008c30 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 8008d6e:	7819      	ldrb	r1, [r3, #0]
 8008d70:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008d74:	edd1 7a00 	vldr	s15, [r1]
 8008d78:	4611      	mov	r1, r2
 8008d7a:	ecf1 6a01 	vldmia	r1!, {s13}
 8008d7e:	458e      	cmp	lr, r1
 8008d80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d84:	d963      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008d86:	7859      	ldrb	r1, [r3, #1]
 8008d88:	edd2 6a01 	vldr	s13, [r2, #4]
 8008d8c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008d90:	edd1 7a00 	vldr	s15, [r1]
 8008d94:	f102 0108 	add.w	r1, r2, #8
 8008d98:	4588      	cmp	r8, r1
 8008d9a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008d9e:	d956      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008da0:	7899      	ldrb	r1, [r3, #2]
 8008da2:	edd2 7a02 	vldr	s15, [r2, #8]
 8008da6:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008daa:	edd1 6a00 	vldr	s13, [r1]
 8008dae:	f102 010c 	add.w	r1, r2, #12
 8008db2:	4588      	cmp	r8, r1
 8008db4:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008db8:	d949      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008dba:	78d9      	ldrb	r1, [r3, #3]
 8008dbc:	edd2 6a03 	vldr	s13, [r2, #12]
 8008dc0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008dc4:	edd1 7a00 	vldr	s15, [r1]
 8008dc8:	f102 0110 	add.w	r1, r2, #16
 8008dcc:	4588      	cmp	r8, r1
 8008dce:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008dd2:	d93c      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008dd4:	7919      	ldrb	r1, [r3, #4]
 8008dd6:	edd2 6a04 	vldr	s13, [r2, #16]
 8008dda:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008dde:	edd1 7a00 	vldr	s15, [r1]
 8008de2:	f102 0114 	add.w	r1, r2, #20
 8008de6:	4588      	cmp	r8, r1
 8008de8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008dec:	d92f      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008dee:	7959      	ldrb	r1, [r3, #5]
 8008df0:	edd2 6a05 	vldr	s13, [r2, #20]
 8008df4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008df8:	edd1 7a00 	vldr	s15, [r1]
 8008dfc:	f102 0118 	add.w	r1, r2, #24
 8008e00:	4588      	cmp	r8, r1
 8008e02:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e06:	d922      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008e08:	7999      	ldrb	r1, [r3, #6]
 8008e0a:	edd2 6a06 	vldr	s13, [r2, #24]
 8008e0e:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008e12:	edd1 7a00 	vldr	s15, [r1]
 8008e16:	f102 011c 	add.w	r1, r2, #28
 8008e1a:	4588      	cmp	r8, r1
 8008e1c:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e20:	d915      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008e22:	79d9      	ldrb	r1, [r3, #7]
 8008e24:	edd2 7a07 	vldr	s15, [r2, #28]
 8008e28:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008e2c:	edd1 6a00 	vldr	s13, [r1]
 8008e30:	f102 0120 	add.w	r1, r2, #32
 8008e34:	4588      	cmp	r8, r1
 8008e36:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e3a:	d908      	bls.n	8008e4e <forward_lite_dense_if32of32wf32_lut8+0x302>
 8008e3c:	7a19      	ldrb	r1, [r3, #8]
 8008e3e:	edd2 7a08 	vldr	s15, [r2, #32]
 8008e42:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008e46:	edd1 6a00 	vldr	s13, [r1]
 8008e4a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e4e:	9903      	ldr	r1, [sp, #12]
 8008e50:	1a8a      	subs	r2, r1, r2
 8008e52:	eb03 0292 	add.w	r2, r3, r2, lsr #2
 8008e56:	1c53      	adds	r3, r2, #1
 8008e58:	e6ea      	b.n	8008c30 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 8008e5a:	bf00      	nop
 8008e5c:	3ffffff8 	.word	0x3ffffff8
 8008e60:	00000000 	.word	0x00000000
 8008e64:	eeb0 7a63 	vmov.f32	s14, s7
 8008e68:	465a      	mov	r2, fp
 8008e6a:	461f      	mov	r7, r3
 8008e6c:	4610      	mov	r0, r2
 8008e6e:	f817 1b01 	ldrb.w	r1, [r7], #1
 8008e72:	ecf0 7a01 	vldmia	r0!, {s15}
 8008e76:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008e7a:	edd1 6a00 	vldr	s13, [r1]
 8008e7e:	9901      	ldr	r1, [sp, #4]
 8008e80:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008e84:	4288      	cmp	r0, r1
 8008e86:	f200 8111 	bhi.w	80090ac <forward_lite_dense_if32of32wf32_lut8+0x560>
 8008e8a:	9904      	ldr	r1, [sp, #16]
 8008e8c:	f103 0411 	add.w	r4, r3, #17
 8008e90:	3309      	adds	r3, #9
 8008e92:	1a8e      	subs	r6, r1, r2
 8008e94:	3224      	adds	r2, #36	@ 0x24
 8008e96:	0976      	lsrs	r6, r6, #5
 8008e98:	eb04 04c6 	add.w	r4, r4, r6, lsl #3
 8008e9c:	f813 1c07 	ldrb.w	r1, [r3, #-7]
 8008ea0:	3308      	adds	r3, #8
 8008ea2:	ed12 6a07 	vldr	s12, [r2, #-28]	@ 0xffffffe4
 8008ea6:	3220      	adds	r2, #32
 8008ea8:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008eac:	ed52 2a10 	vldr	s5, [r2, #-64]	@ 0xffffffc0
 8008eb0:	ed12 3a0e 	vldr	s6, [r2, #-56]	@ 0xffffffc8
 8008eb4:	edd1 7a00 	vldr	s15, [r1]
 8008eb8:	f813 1c10 	ldrb.w	r1, [r3, #-16]
 8008ebc:	ee67 7a86 	vmul.f32	s15, s15, s12
 8008ec0:	ed12 4a0d 	vldr	s8, [r2, #-52]	@ 0xffffffcc
 8008ec4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008ec8:	ed52 4a0c 	vldr	s9, [r2, #-48]	@ 0xffffffd0
 8008ecc:	ed12 5a0b 	vldr	s10, [r2, #-44]	@ 0xffffffd4
 8008ed0:	ed91 6a00 	vldr	s12, [r1]
 8008ed4:	f813 1c0e 	ldrb.w	r1, [r3, #-14]
 8008ed8:	eee2 7a86 	vfma.f32	s15, s5, s12
 8008edc:	ed52 5a0a 	vldr	s11, [r2, #-40]	@ 0xffffffd8
 8008ee0:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008ee4:	ed52 6a09 	vldr	s13, [r2, #-36]	@ 0xffffffdc
 8008ee8:	ed91 6a00 	vldr	s12, [r1]
 8008eec:	f813 1c0d 	ldrb.w	r1, [r3, #-13]
 8008ef0:	eee3 7a06 	vfma.f32	s15, s6, s12
 8008ef4:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008ef8:	ed91 6a00 	vldr	s12, [r1]
 8008efc:	f813 1c0c 	ldrb.w	r1, [r3, #-12]
 8008f00:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008f04:	eee4 7a06 	vfma.f32	s15, s8, s12
 8008f08:	ed91 6a00 	vldr	s12, [r1]
 8008f0c:	f813 1c0b 	ldrb.w	r1, [r3, #-11]
 8008f10:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008f14:	eee4 7a86 	vfma.f32	s15, s9, s12
 8008f18:	ed91 6a00 	vldr	s12, [r1]
 8008f1c:	f813 1c0a 	ldrb.w	r1, [r3, #-10]
 8008f20:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008f24:	eee5 7a06 	vfma.f32	s15, s10, s12
 8008f28:	ed91 6a00 	vldr	s12, [r1]
 8008f2c:	f813 1c09 	ldrb.w	r1, [r3, #-9]
 8008f30:	429c      	cmp	r4, r3
 8008f32:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8008f36:	eee5 7a86 	vfma.f32	s15, s11, s12
 8008f3a:	ed91 6a00 	vldr	s12, [r1]
 8008f3e:	eee6 7a26 	vfma.f32	s15, s12, s13
 8008f42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8008f46:	d1a9      	bne.n	8008e9c <forward_lite_dense_if32of32wf32_lut8+0x350>
 8008f48:	3601      	adds	r6, #1
 8008f4a:	eb07 03c6 	add.w	r3, r7, r6, lsl #3
 8008f4e:	eb00 1046 	add.w	r0, r0, r6, lsl #5
 8008f52:	4540      	cmp	r0, r8
 8008f54:	f4bf ae6c 	bcs.w	8008c30 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 8008f58:	781a      	ldrb	r2, [r3, #0]
 8008f5a:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008f5e:	edd2 7a00 	vldr	s15, [r2]
 8008f62:	4602      	mov	r2, r0
 8008f64:	ecf2 6a01 	vldmia	r2!, {s13}
 8008f68:	4590      	cmp	r8, r2
 8008f6a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008f6e:	d963      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8008f70:	785a      	ldrb	r2, [r3, #1]
 8008f72:	edd0 6a01 	vldr	s13, [r0, #4]
 8008f76:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008f7a:	edd2 7a00 	vldr	s15, [r2]
 8008f7e:	f100 0208 	add.w	r2, r0, #8
 8008f82:	4590      	cmp	r8, r2
 8008f84:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008f88:	d956      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8008f8a:	789a      	ldrb	r2, [r3, #2]
 8008f8c:	edd0 6a02 	vldr	s13, [r0, #8]
 8008f90:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008f94:	edd2 7a00 	vldr	s15, [r2]
 8008f98:	f100 020c 	add.w	r2, r0, #12
 8008f9c:	4590      	cmp	r8, r2
 8008f9e:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008fa2:	d949      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8008fa4:	78da      	ldrb	r2, [r3, #3]
 8008fa6:	edd0 6a03 	vldr	s13, [r0, #12]
 8008faa:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008fae:	edd2 7a00 	vldr	s15, [r2]
 8008fb2:	f100 0210 	add.w	r2, r0, #16
 8008fb6:	4590      	cmp	r8, r2
 8008fb8:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008fbc:	d93c      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8008fbe:	791a      	ldrb	r2, [r3, #4]
 8008fc0:	edd0 6a04 	vldr	s13, [r0, #16]
 8008fc4:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008fc8:	edd2 7a00 	vldr	s15, [r2]
 8008fcc:	f100 0214 	add.w	r2, r0, #20
 8008fd0:	4590      	cmp	r8, r2
 8008fd2:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008fd6:	d92f      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8008fd8:	795a      	ldrb	r2, [r3, #5]
 8008fda:	edd0 6a05 	vldr	s13, [r0, #20]
 8008fde:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008fe2:	edd2 7a00 	vldr	s15, [r2]
 8008fe6:	f100 0218 	add.w	r2, r0, #24
 8008fea:	4596      	cmp	lr, r2
 8008fec:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8008ff0:	d922      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8008ff2:	799a      	ldrb	r2, [r3, #6]
 8008ff4:	edd0 6a06 	vldr	s13, [r0, #24]
 8008ff8:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8008ffc:	edd2 7a00 	vldr	s15, [r2]
 8009000:	f100 021c 	add.w	r2, r0, #28
 8009004:	4596      	cmp	lr, r2
 8009006:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800900a:	d915      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 800900c:	79da      	ldrb	r2, [r3, #7]
 800900e:	edd0 6a07 	vldr	s13, [r0, #28]
 8009012:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8009016:	edd2 7a00 	vldr	s15, [r2]
 800901a:	f100 0220 	add.w	r2, r0, #32
 800901e:	4596      	cmp	lr, r2
 8009020:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009024:	d908      	bls.n	8009038 <forward_lite_dense_if32of32wf32_lut8+0x4ec>
 8009026:	7a1a      	ldrb	r2, [r3, #8]
 8009028:	edd0 7a08 	vldr	s15, [r0, #32]
 800902c:	eb0a 0282 	add.w	r2, sl, r2, lsl #2
 8009030:	edd2 6a00 	vldr	s13, [r2]
 8009034:	eea6 7aa7 	vfma.f32	s14, s13, s15
 8009038:	9a03      	ldr	r2, [sp, #12]
 800903a:	1a10      	subs	r0, r2, r0
 800903c:	eb03 0090 	add.w	r0, r3, r0, lsr #2
 8009040:	1c43      	adds	r3, r0, #1
 8009042:	e5f5      	b.n	8008c30 <forward_lite_dense_if32of32wf32_lut8+0xe4>
 8009044:	f813 1b01 	ldrb.w	r1, [r3], #1
 8009048:	eddb 7a00 	vldr	s15, [fp]
 800904c:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8009050:	9a05      	ldr	r2, [sp, #20]
 8009052:	ed91 7a00 	vldr	s14, [r1]
 8009056:	ee27 7a27 	vmul.f32	s14, s14, s15
 800905a:	f813 1b01 	ldrb.w	r1, [r3], #1
 800905e:	ecf2 7a01 	vldmia	r2!, {s15}
 8009062:	eb0a 0181 	add.w	r1, sl, r1, lsl #2
 8009066:	edd1 6a00 	vldr	s13, [r1]
 800906a:	eea6 7aa7 	vfma.f32	s14, s13, s15
 800906e:	e6fc      	b.n	8008e6a <forward_lite_dense_if32of32wf32_lut8+0x31e>
 8009070:	eeb0 7a63 	vmov.f32	s14, s7
 8009074:	465a      	mov	r2, fp
 8009076:	e7f0      	b.n	800905a <forward_lite_dense_if32of32wf32_lut8+0x50e>
 8009078:	4493      	add	fp, r2
 800907a:	4620      	mov	r0, r4
 800907c:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 800907e:	2b00      	cmp	r3, #0
 8009080:	f43f ade4 	beq.w	8008c4c <forward_lite_dense_if32of32wf32_lut8+0x100>
 8009084:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009086:	4639      	mov	r1, r7
 8009088:	1ac3      	subs	r3, r0, r3
 800908a:	edd3 7a00 	vldr	s15, [r3]
 800908e:	ecb1 7a01 	vldmia	r1!, {s14}
 8009092:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009096:	ece3 7a01 	vstmia	r3!, {s15}
 800909a:	4298      	cmp	r0, r3
 800909c:	d1f5      	bne.n	800908a <forward_lite_dense_if32of32wf32_lut8+0x53e>
 800909e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80090a0:	4283      	cmp	r3, r0
 80090a2:	f63f add7 	bhi.w	8008c54 <forward_lite_dense_if32of32wf32_lut8+0x108>
 80090a6:	b013      	add	sp, #76	@ 0x4c
 80090a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090ac:	463b      	mov	r3, r7
 80090ae:	e750      	b.n	8008f52 <forward_lite_dense_if32of32wf32_lut8+0x406>
 80090b0:	465a      	mov	r2, fp
 80090b2:	e659      	b.n	8008d68 <forward_lite_dense_if32of32wf32_lut8+0x21c>
 80090b4:	2b00      	cmp	r3, #0
 80090b6:	f43f ade3 	beq.w	8008c80 <forward_lite_dense_if32of32wf32_lut8+0x134>
 80090ba:	4421      	add	r1, r4
 80090bc:	460b      	mov	r3, r1
 80090be:	462a      	mov	r2, r5
 80090c0:	ed93 7a00 	vldr	s14, [r3]
 80090c4:	ecf2 7a01 	vldmia	r2!, {s15}
 80090c8:	ee77 7a87 	vadd.f32	s15, s15, s14
 80090cc:	ece3 7a01 	vstmia	r3!, {s15}
 80090d0:	429c      	cmp	r4, r3
 80090d2:	d1f5      	bne.n	80090c0 <forward_lite_dense_if32of32wf32_lut8+0x574>
 80090d4:	e7f2      	b.n	80090bc <forward_lite_dense_if32of32wf32_lut8+0x570>
 80090d6:	f8dd c02c 	ldr.w	ip, [sp, #44]	@ 0x2c
 80090da:	463d      	mov	r5, r7
 80090dc:	4604      	mov	r4, r0
 80090de:	e5cc      	b.n	8008c7a <forward_lite_dense_if32of32wf32_lut8+0x12e>

080090e0 <forward_lite_nl_relu_if32of32>:
 80090e0:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 80090e4:	4413      	add	r3, r2
 80090e6:	eb01 0283 	add.w	r2, r1, r3, lsl #2
 80090ea:	ea4f 0c83 	mov.w	ip, r3, lsl #2
 80090ee:	4291      	cmp	r1, r2
 80090f0:	d80f      	bhi.n	8009112 <forward_lite_nl_relu_if32of32+0x32>
 80090f2:	f10c 0104 	add.w	r1, ip, #4
 80090f6:	1d13      	adds	r3, r2, #4
 80090f8:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8009114 <forward_lite_nl_relu_if32of32+0x34>
 80090fc:	eba2 020c 	sub.w	r2, r2, ip
 8009100:	4408      	add	r0, r1
 8009102:	ed73 7a01 	vldmdb	r3!, {s15}
 8009106:	4293      	cmp	r3, r2
 8009108:	fec7 7a87 	vmaxnm.f32	s15, s15, s14
 800910c:	ed60 7a01 	vstmdb	r0!, {s15}
 8009110:	d1f7      	bne.n	8009102 <forward_lite_nl_relu_if32of32+0x22>
 8009112:	4770      	bx	lr
 8009114:	00000000 	.word	0x00000000

08009118 <st_int8_copy>:
 8009118:	4288      	cmp	r0, r1
 800911a:	d00e      	beq.n	800913a <st_int8_copy+0x22>
 800911c:	b16a      	cbz	r2, 800913a <st_int8_copy+0x22>
 800911e:	4288      	cmp	r0, r1
 8009120:	eb00 0302 	add.w	r3, r0, r2
 8009124:	d20a      	bcs.n	800913c <st_int8_copy+0x24>
 8009126:	4299      	cmp	r1, r3
 8009128:	d208      	bcs.n	800913c <st_int8_copy+0x24>
 800912a:	440a      	add	r2, r1
 800912c:	f913 1d01 	ldrsb.w	r1, [r3, #-1]!
 8009130:	4298      	cmp	r0, r3
 8009132:	f802 1d01 	strb.w	r1, [r2, #-1]!
 8009136:	d1f9      	bne.n	800912c <st_int8_copy+0x14>
 8009138:	4770      	bx	lr
 800913a:	4770      	bx	lr
 800913c:	2a03      	cmp	r2, #3
 800913e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009142:	d81b      	bhi.n	800917c <st_int8_copy+0x64>
 8009144:	1e54      	subs	r4, r2, #1
 8009146:	f810 3b01 	ldrb.w	r3, [r0], #1
 800914a:	f801 3b01 	strb.w	r3, [r1], #1
 800914e:	b19c      	cbz	r4, 8009178 <st_int8_copy+0x60>
 8009150:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009154:	f801 3b01 	strb.w	r3, [r1], #1
 8009158:	2a02      	cmp	r2, #2
 800915a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800915e:	bf18      	it	ne
 8009160:	2200      	movne	r2, #0
 8009162:	2c01      	cmp	r4, #1
 8009164:	d008      	beq.n	8009178 <st_int8_copy+0x60>
 8009166:	f810 3b01 	ldrb.w	r3, [r0], #1
 800916a:	f801 3b01 	strb.w	r3, [r1], #1
 800916e:	b11a      	cbz	r2, 8009178 <st_int8_copy+0x60>
 8009170:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009174:	f801 3b01 	strb.w	r3, [r1], #1
 8009178:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800917c:	f001 0e03 	and.w	lr, r1, #3
 8009180:	f000 0803 	and.w	r8, r0, #3
 8009184:	f1ce 0304 	rsb	r3, lr, #4
 8009188:	eba2 0c03 	sub.w	ip, r2, r3
 800918c:	f1ce 0203 	rsb	r2, lr, #3
 8009190:	f810 3b01 	ldrb.w	r3, [r0], #1
 8009194:	f801 3b01 	strb.w	r3, [r1], #1
 8009198:	b182      	cbz	r2, 80091bc <st_int8_copy+0xa4>
 800919a:	f810 3b01 	ldrb.w	r3, [r0], #1
 800919e:	f801 3b01 	strb.w	r3, [r1], #1
 80091a2:	2a01      	cmp	r2, #1
 80091a4:	d00a      	beq.n	80091bc <st_int8_copy+0xa4>
 80091a6:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091aa:	f801 3b01 	strb.w	r3, [r1], #1
 80091ae:	f1be 0f01 	cmp.w	lr, #1
 80091b2:	d003      	beq.n	80091bc <st_int8_copy+0xa4>
 80091b4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80091b8:	f801 3b01 	strb.w	r3, [r1], #1
 80091bc:	45c6      	cmp	lr, r8
 80091be:	d02a      	beq.n	8009216 <st_int8_copy+0xfe>
 80091c0:	ea5f 121c 	movs.w	r2, ip, lsr #4
 80091c4:	d00a      	beq.n	80091dc <st_int8_copy+0xc4>
 80091c6:	f850 3b04 	ldr.w	r3, [r0], #4
 80091ca:	f850 4b04 	ldr.w	r4, [r0], #4
 80091ce:	f850 5b04 	ldr.w	r5, [r0], #4
 80091d2:	f850 6b04 	ldr.w	r6, [r0], #4
 80091d6:	c178      	stmia	r1!, {r3, r4, r5, r6}
 80091d8:	3a01      	subs	r2, #1
 80091da:	d1f4      	bne.n	80091c6 <st_int8_copy+0xae>
 80091dc:	f01c 0f08 	tst.w	ip, #8
 80091e0:	d004      	beq.n	80091ec <st_int8_copy+0xd4>
 80091e2:	f850 3b04 	ldr.w	r3, [r0], #4
 80091e6:	f850 4b04 	ldr.w	r4, [r0], #4
 80091ea:	c118      	stmia	r1!, {r3, r4}
 80091ec:	f01c 0f04 	tst.w	ip, #4
 80091f0:	d003      	beq.n	80091fa <st_int8_copy+0xe2>
 80091f2:	f850 3b04 	ldr.w	r3, [r0], #4
 80091f6:	f841 3b04 	str.w	r3, [r1], #4
 80091fa:	f01c 0f02 	tst.w	ip, #2
 80091fe:	d003      	beq.n	8009208 <st_int8_copy+0xf0>
 8009200:	f830 3b02 	ldrh.w	r3, [r0], #2
 8009204:	f821 3b02 	strh.w	r3, [r1], #2
 8009208:	f01c 0f01 	tst.w	ip, #1
 800920c:	d0b4      	beq.n	8009178 <st_int8_copy+0x60>
 800920e:	7803      	ldrb	r3, [r0, #0]
 8009210:	700b      	strb	r3, [r1, #0]
 8009212:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009216:	ea5f 199c 	movs.w	r9, ip, lsr #6
 800921a:	d00e      	beq.n	800923a <st_int8_copy+0x122>
 800921c:	4688      	mov	r8, r1
 800921e:	4686      	mov	lr, r0
 8009220:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8009224:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8009228:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800922c:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8009230:	f1b9 0901 	subs.w	r9, r9, #1
 8009234:	4641      	mov	r1, r8
 8009236:	4670      	mov	r0, lr
 8009238:	d1f0      	bne.n	800921c <st_int8_copy+0x104>
 800923a:	f01c 0f20 	tst.w	ip, #32
 800923e:	d007      	beq.n	8009250 <st_int8_copy+0x138>
 8009240:	4688      	mov	r8, r1
 8009242:	4686      	mov	lr, r0
 8009244:	e8be 00ff 	ldmia.w	lr!, {r0, r1, r2, r3, r4, r5, r6, r7}
 8009248:	e8a8 00ff 	stmia.w	r8!, {r0, r1, r2, r3, r4, r5, r6, r7}
 800924c:	4641      	mov	r1, r8
 800924e:	4670      	mov	r0, lr
 8009250:	f01c 0f10 	tst.w	ip, #16
 8009254:	d001      	beq.n	800925a <st_int8_copy+0x142>
 8009256:	c878      	ldmia	r0!, {r3, r4, r5, r6}
 8009258:	c178      	stmia	r1!, {r3, r4, r5, r6}
 800925a:	f01c 0f08 	tst.w	ip, #8
 800925e:	d0c5      	beq.n	80091ec <st_int8_copy+0xd4>
 8009260:	c818      	ldmia	r0!, {r3, r4}
 8009262:	c118      	stmia	r1!, {r3, r4}
 8009264:	e7c2      	b.n	80091ec <st_int8_copy+0xd4>
 8009266:	bf00      	nop

08009268 <ai_sum>:
 8009268:	edd1 7a00 	vldr	s15, [r1]
 800926c:	ed92 7a00 	vldr	s14, [r2]
 8009270:	ee77 7a87 	vadd.f32	s15, s15, s14
 8009274:	edc0 7a00 	vstr	s15, [r0]
 8009278:	4770      	bx	lr
 800927a:	bf00      	nop

0800927c <ai_array_to_buffer_fmt>:
 800927c:	f3c0 4343 	ubfx	r3, r0, #17, #4
 8009280:	2b02      	cmp	r3, #2
 8009282:	d055      	beq.n	8009330 <ai_array_to_buffer_fmt+0xb4>
 8009284:	f020 437e 	bic.w	r3, r0, #4261412864	@ 0xfe000000
 8009288:	4a2c      	ldr	r2, [pc, #176]	@ (800933c <ai_array_to_buffer_fmt+0xc0>)
 800928a:	4293      	cmp	r3, r2
 800928c:	d010      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 800928e:	dc21      	bgt.n	80092d4 <ai_array_to_buffer_fmt+0x58>
 8009290:	4a2b      	ldr	r2, [pc, #172]	@ (8009340 <ai_array_to_buffer_fmt+0xc4>)
 8009292:	4293      	cmp	r3, r2
 8009294:	d00c      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 8009296:	dd0f      	ble.n	80092b8 <ai_array_to_buffer_fmt+0x3c>
 8009298:	4a2a      	ldr	r2, [pc, #168]	@ (8009344 <ai_array_to_buffer_fmt+0xc8>)
 800929a:	4293      	cmp	r3, r2
 800929c:	d008      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 800929e:	f502 32fa 	add.w	r2, r2, #128000	@ 0x1f400
 80092a2:	4293      	cmp	r3, r2
 80092a4:	d004      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 80092a6:	4a28      	ldr	r2, [pc, #160]	@ (8009348 <ai_array_to_buffer_fmt+0xcc>)
 80092a8:	4293      	cmp	r3, r2
 80092aa:	bf0c      	ite	eq
 80092ac:	4613      	moveq	r3, r2
 80092ae:	2340      	movne	r3, #64	@ 0x40
 80092b0:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80092b4:	4318      	orrs	r0, r3
 80092b6:	4770      	bx	lr
 80092b8:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 80092bc:	4293      	cmp	r3, r2
 80092be:	d0f7      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 80092c0:	dd2c      	ble.n	800931c <ai_array_to_buffer_fmt+0xa0>
 80092c2:	4a22      	ldr	r2, [pc, #136]	@ (800934c <ai_array_to_buffer_fmt+0xd0>)
 80092c4:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80092c8:	4293      	cmp	r3, r2
 80092ca:	bf0c      	ite	eq
 80092cc:	4613      	moveq	r3, r2
 80092ce:	2340      	movne	r3, #64	@ 0x40
 80092d0:	4318      	orrs	r0, r3
 80092d2:	4770      	bx	lr
 80092d4:	4a1e      	ldr	r2, [pc, #120]	@ (8009350 <ai_array_to_buffer_fmt+0xd4>)
 80092d6:	4293      	cmp	r3, r2
 80092d8:	d0ea      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 80092da:	dd10      	ble.n	80092fe <ai_array_to_buffer_fmt+0x82>
 80092dc:	4a1d      	ldr	r2, [pc, #116]	@ (8009354 <ai_array_to_buffer_fmt+0xd8>)
 80092de:	4293      	cmp	r3, r2
 80092e0:	d0e6      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 80092e2:	f202 72f1 	addw	r2, r2, #2033	@ 0x7f1
 80092e6:	4293      	cmp	r3, r2
 80092e8:	d0e2      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 80092ea:	f5a2 6200 	sub.w	r2, r2, #2048	@ 0x800
 80092ee:	f000 40d0 	and.w	r0, r0, #1744830464	@ 0x68000000
 80092f2:	4293      	cmp	r3, r2
 80092f4:	bf0c      	ite	eq
 80092f6:	4613      	moveq	r3, r2
 80092f8:	2340      	movne	r3, #64	@ 0x40
 80092fa:	4318      	orrs	r0, r3
 80092fc:	4770      	bx	lr
 80092fe:	f2a2 3287 	subw	r2, r2, #903	@ 0x387
 8009302:	4293      	cmp	r3, r2
 8009304:	d0d4      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 8009306:	f502 7260 	add.w	r2, r2, #896	@ 0x380
 800930a:	4293      	cmp	r3, r2
 800930c:	d0d0      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 800930e:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8009312:	4293      	cmp	r3, r2
 8009314:	bf0c      	ite	eq
 8009316:	4613      	moveq	r3, r2
 8009318:	2340      	movne	r3, #64	@ 0x40
 800931a:	e7c9      	b.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 800931c:	f5a2 6280 	sub.w	r2, r2, #1024	@ 0x400
 8009320:	4293      	cmp	r3, r2
 8009322:	d0c5      	beq.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 8009324:	3280      	adds	r2, #128	@ 0x80
 8009326:	4293      	cmp	r3, r2
 8009328:	bf0c      	ite	eq
 800932a:	4613      	moveq	r3, r2
 800932c:	2340      	movne	r3, #64	@ 0x40
 800932e:	e7bf      	b.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 8009330:	4b09      	ldr	r3, [pc, #36]	@ (8009358 <ai_array_to_buffer_fmt+0xdc>)
 8009332:	4003      	ands	r3, r0
 8009334:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8009338:	e7ba      	b.n	80092b0 <ai_array_to_buffer_fmt+0x34>
 800933a:	bf00      	nop
 800933c:	00821040 	.word	0x00821040
 8009340:	00040840 	.word	0x00040840
 8009344:	00041040 	.word	0x00041040
 8009348:	0004084f 	.word	0x0004084f
 800934c:	00040447 	.word	0x00040447
 8009350:	00840447 	.word	0x00840447
 8009354:	0084084f 	.word	0x0084084f
 8009358:	00803fff 	.word	0x00803fff

0800935c <ai_array_get_byte_size>:
 800935c:	b1f1      	cbz	r1, 800939c <ai_array_get_byte_size+0x40>
 800935e:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 8009362:	f3c0 4c43 	ubfx	ip, r0, #17, #4
 8009366:	f46f 7288 	mvn.w	r2, #272	@ 0x110
 800936a:	f3c0 5041 	ubfx	r0, r0, #21, #2
 800936e:	fb03 f101 	mul.w	r1, r3, r1
 8009372:	fa42 f20c 	asr.w	r2, r2, ip
 8009376:	3107      	adds	r1, #7
 8009378:	07d2      	lsls	r2, r2, #31
 800937a:	f021 0107 	bic.w	r1, r1, #7
 800937e:	fa21 f100 	lsr.w	r1, r1, r0
 8009382:	d504      	bpl.n	800938e <ai_array_get_byte_size+0x32>
 8009384:	2300      	movs	r3, #0
 8009386:	3107      	adds	r1, #7
 8009388:	4419      	add	r1, r3
 800938a:	08c8      	lsrs	r0, r1, #3
 800938c:	4770      	bx	lr
 800938e:	fa43 f000 	asr.w	r0, r3, r0
 8009392:	3107      	adds	r1, #7
 8009394:	4083      	lsls	r3, r0
 8009396:	4419      	add	r1, r3
 8009398:	08c8      	lsrs	r0, r1, #3
 800939a:	4770      	bx	lr
 800939c:	4608      	mov	r0, r1
 800939e:	4770      	bx	lr

080093a0 <ai_array_get_data_byte_size>:
 80093a0:	b161      	cbz	r1, 80093bc <ai_array_get_data_byte_size+0x1c>
 80093a2:	f3c0 13c6 	ubfx	r3, r0, #7, #7
 80093a6:	f3c0 5241 	ubfx	r2, r0, #21, #2
 80093aa:	fb01 f003 	mul.w	r0, r1, r3
 80093ae:	3007      	adds	r0, #7
 80093b0:	f020 0007 	bic.w	r0, r0, #7
 80093b4:	40d0      	lsrs	r0, r2
 80093b6:	3007      	adds	r0, #7
 80093b8:	08c0      	lsrs	r0, r0, #3
 80093ba:	4770      	bx	lr
 80093bc:	4608      	mov	r0, r1
 80093be:	4770      	bx	lr

080093c0 <ai_version_get>:
 80093c0:	0212      	lsls	r2, r2, #8
 80093c2:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80093c6:	ea42 6000 	orr.w	r0, r2, r0, lsl #24
 80093ca:	4770      	bx	lr

080093cc <get_tensor_byte_size>:
 80093cc:	b430      	push	{r4, r5}
 80093ce:	6985      	ldr	r5, [r0, #24]
 80093d0:	68c4      	ldr	r4, [r0, #12]
 80093d2:	6941      	ldr	r1, [r0, #20]
 80093d4:	4b06      	ldr	r3, [pc, #24]	@ (80093f0 <get_tensor_byte_size+0x24>)
 80093d6:	6828      	ldr	r0, [r5, #0]
 80093d8:	4a06      	ldr	r2, [pc, #24]	@ (80093f4 <get_tensor_byte_size+0x28>)
 80093da:	4003      	ands	r3, r0
 80093dc:	68c9      	ldr	r1, [r1, #12]
 80093de:	68e0      	ldr	r0, [r4, #12]
 80093e0:	4293      	cmp	r3, r2
 80093e2:	fb01 f000 	mul.w	r0, r1, r0
 80093e6:	d101      	bne.n	80093ec <get_tensor_byte_size+0x20>
 80093e8:	3007      	adds	r0, #7
 80093ea:	08c0      	lsrs	r0, r0, #3
 80093ec:	bc30      	pop	{r4, r5}
 80093ee:	4770      	bx	lr
 80093f0:	017fffff 	.word	0x017fffff
 80093f4:	000400c0 	.word	0x000400c0

080093f8 <core_compute_offsets>:
 80093f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093fc:	e9d1 4600 	ldrd	r4, r6, [r1]
 8009400:	f8d2 c004 	ldr.w	ip, [r2, #4]
 8009404:	b083      	sub	sp, #12
 8009406:	f5b4 6fa0 	cmp.w	r4, #1280	@ 0x500
 800940a:	6871      	ldr	r1, [r6, #4]
 800940c:	f8dc 8004 	ldr.w	r8, [ip, #4]
 8009410:	d37b      	bcc.n	800950a <core_compute_offsets+0x112>
 8009412:	6935      	ldr	r5, [r6, #16]
 8009414:	fb05 fe01 	mul.w	lr, r5, r1
 8009418:	6812      	ldr	r2, [r2, #0]
 800941a:	e9d6 4602 	ldrd	r4, r6, [r6, #8]
 800941e:	f5b2 6fa0 	cmp.w	r2, #1280	@ 0x500
 8009422:	6802      	ldr	r2, [r0, #0]
 8009424:	9600      	str	r6, [sp, #0]
 8009426:	bf2c      	ite	cs
 8009428:	f8dc 9010 	ldrcs.w	r9, [ip, #16]
 800942c:	f04f 0901 	movcc.w	r9, #1
 8009430:	f5b2 7f00 	cmp.w	r2, #512	@ 0x200
 8009434:	e9dc 6702 	ldrd	r6, r7, [ip, #8]
 8009438:	9701      	str	r7, [sp, #4]
 800943a:	d363      	bcc.n	8009504 <core_compute_offsets+0x10c>
 800943c:	4541      	cmp	r1, r8
 800943e:	6847      	ldr	r7, [r0, #4]
 8009440:	bf0c      	ite	eq
 8009442:	461a      	moveq	r2, r3
 8009444:	2200      	movne	r2, #0
 8009446:	607a      	str	r2, [r7, #4]
 8009448:	bf18      	it	ne
 800944a:	2201      	movne	r2, #1
 800944c:	f8d0 a000 	ldr.w	sl, [r0]
 8009450:	bf08      	it	eq
 8009452:	2200      	moveq	r2, #0
 8009454:	ebb5 0c09 	subs.w	ip, r5, r9
 8009458:	f3ca 2b17 	ubfx	fp, sl, #8, #24
 800945c:	bf18      	it	ne
 800945e:	f04f 0c01 	movne.w	ip, #1
 8009462:	f5ba 6fa0 	cmp.w	sl, #1280	@ 0x500
 8009466:	d313      	bcc.n	8009490 <core_compute_offsets+0x98>
 8009468:	454d      	cmp	r5, r9
 800946a:	bf14      	ite	ne
 800946c:	f04f 0a00 	movne.w	sl, #0
 8009470:	f002 0a01 	andeq.w	sl, r2, #1
 8009474:	4541      	cmp	r1, r8
 8009476:	bf14      	ite	ne
 8009478:	2500      	movne	r5, #0
 800947a:	f00c 0501 	andeq.w	r5, ip, #1
 800947e:	6847      	ldr	r7, [r0, #4]
 8009480:	fb01 a815 	mls	r8, r1, r5, sl
 8009484:	fb03 f508 	mul.w	r5, r3, r8
 8009488:	613d      	str	r5, [r7, #16]
 800948a:	6805      	ldr	r5, [r0, #0]
 800948c:	f3c5 2b17 	ubfx	fp, r5, #8, #24
 8009490:	ebb4 0806 	subs.w	r8, r4, r6
 8009494:	bf18      	it	ne
 8009496:	f04f 0801 	movne.w	r8, #1
 800949a:	f1bb 0f02 	cmp.w	fp, #2
 800949e:	fb08 f50e 	mul.w	r5, r8, lr
 80094a2:	d92f      	bls.n	8009504 <core_compute_offsets+0x10c>
 80094a4:	42b4      	cmp	r4, r6
 80094a6:	bf14      	ite	ne
 80094a8:	f04f 0900 	movne.w	r9, #0
 80094ac:	f002 0901 	andeq.w	r9, r2, #1
 80094b0:	9f01      	ldr	r7, [sp, #4]
 80094b2:	ea0c 0909 	and.w	r9, ip, r9
 80094b6:	eba9 0905 	sub.w	r9, r9, r5
 80094ba:	fb01 990c 	mla	r9, r1, ip, r9
 80094be:	9900      	ldr	r1, [sp, #0]
 80094c0:	f1a1 0601 	sub.w	r6, r1, #1
 80094c4:	fb03 f909 	mul.w	r9, r3, r9
 80094c8:	fab6 f686 	clz	r6, r6
 80094cc:	0976      	lsrs	r6, r6, #5
 80094ce:	42b9      	cmp	r1, r7
 80094d0:	bf18      	it	ne
 80094d2:	f046 0601 	orrne.w	r6, r6, #1
 80094d6:	6847      	ldr	r7, [r0, #4]
 80094d8:	f8c7 9008 	str.w	r9, [r7, #8]
 80094dc:	6801      	ldr	r1, [r0, #0]
 80094de:	f3c1 2117 	ubfx	r1, r1, #8, #24
 80094e2:	b9ae      	cbnz	r6, 8009510 <core_compute_offsets+0x118>
 80094e4:	f1b8 0f00 	cmp.w	r8, #0
 80094e8:	d012      	beq.n	8009510 <core_compute_offsets+0x118>
 80094ea:	ea02 020c 	and.w	r2, r2, ip
 80094ee:	2903      	cmp	r1, #3
 80094f0:	d908      	bls.n	8009504 <core_compute_offsets+0x10c>
 80094f2:	fb0e f404 	mul.w	r4, lr, r4
 80094f6:	6841      	ldr	r1, [r0, #4]
 80094f8:	fb06 2214 	mls	r2, r6, r4, r2
 80094fc:	442a      	add	r2, r5
 80094fe:	fb03 f202 	mul.w	r2, r3, r2
 8009502:	60ca      	str	r2, [r1, #12]
 8009504:	b003      	add	sp, #12
 8009506:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800950a:	468e      	mov	lr, r1
 800950c:	2501      	movs	r5, #1
 800950e:	e783      	b.n	8009418 <core_compute_offsets+0x20>
 8009510:	2200      	movs	r2, #0
 8009512:	e7ec      	b.n	80094ee <core_compute_offsets+0xf6>

08009514 <sbrk_aligned>:
 8009514:	b570      	push	{r4, r5, r6, lr}
 8009516:	4e0f      	ldr	r6, [pc, #60]	@ (8009554 <sbrk_aligned+0x40>)
 8009518:	460c      	mov	r4, r1
 800951a:	6831      	ldr	r1, [r6, #0]
 800951c:	4605      	mov	r5, r0
 800951e:	b911      	cbnz	r1, 8009526 <sbrk_aligned+0x12>
 8009520:	f000 f9e0 	bl	80098e4 <_sbrk_r>
 8009524:	6030      	str	r0, [r6, #0]
 8009526:	4621      	mov	r1, r4
 8009528:	4628      	mov	r0, r5
 800952a:	f000 f9db 	bl	80098e4 <_sbrk_r>
 800952e:	1c43      	adds	r3, r0, #1
 8009530:	d103      	bne.n	800953a <sbrk_aligned+0x26>
 8009532:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009536:	4620      	mov	r0, r4
 8009538:	bd70      	pop	{r4, r5, r6, pc}
 800953a:	1cc4      	adds	r4, r0, #3
 800953c:	f024 0403 	bic.w	r4, r4, #3
 8009540:	42a0      	cmp	r0, r4
 8009542:	d0f8      	beq.n	8009536 <sbrk_aligned+0x22>
 8009544:	1a21      	subs	r1, r4, r0
 8009546:	4628      	mov	r0, r5
 8009548:	f000 f9cc 	bl	80098e4 <_sbrk_r>
 800954c:	3001      	adds	r0, #1
 800954e:	d1f2      	bne.n	8009536 <sbrk_aligned+0x22>
 8009550:	e7ef      	b.n	8009532 <sbrk_aligned+0x1e>
 8009552:	bf00      	nop
 8009554:	240410b0 	.word	0x240410b0

08009558 <_malloc_r>:
 8009558:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800955c:	1ccd      	adds	r5, r1, #3
 800955e:	f025 0503 	bic.w	r5, r5, #3
 8009562:	3508      	adds	r5, #8
 8009564:	2d0c      	cmp	r5, #12
 8009566:	bf38      	it	cc
 8009568:	250c      	movcc	r5, #12
 800956a:	2d00      	cmp	r5, #0
 800956c:	4606      	mov	r6, r0
 800956e:	db01      	blt.n	8009574 <_malloc_r+0x1c>
 8009570:	42a9      	cmp	r1, r5
 8009572:	d904      	bls.n	800957e <_malloc_r+0x26>
 8009574:	230c      	movs	r3, #12
 8009576:	6033      	str	r3, [r6, #0]
 8009578:	2000      	movs	r0, #0
 800957a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800957e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009654 <_malloc_r+0xfc>
 8009582:	f000 f869 	bl	8009658 <__malloc_lock>
 8009586:	f8d8 3000 	ldr.w	r3, [r8]
 800958a:	461c      	mov	r4, r3
 800958c:	bb44      	cbnz	r4, 80095e0 <_malloc_r+0x88>
 800958e:	4629      	mov	r1, r5
 8009590:	4630      	mov	r0, r6
 8009592:	f7ff ffbf 	bl	8009514 <sbrk_aligned>
 8009596:	1c43      	adds	r3, r0, #1
 8009598:	4604      	mov	r4, r0
 800959a:	d158      	bne.n	800964e <_malloc_r+0xf6>
 800959c:	f8d8 4000 	ldr.w	r4, [r8]
 80095a0:	4627      	mov	r7, r4
 80095a2:	2f00      	cmp	r7, #0
 80095a4:	d143      	bne.n	800962e <_malloc_r+0xd6>
 80095a6:	2c00      	cmp	r4, #0
 80095a8:	d04b      	beq.n	8009642 <_malloc_r+0xea>
 80095aa:	6823      	ldr	r3, [r4, #0]
 80095ac:	4639      	mov	r1, r7
 80095ae:	4630      	mov	r0, r6
 80095b0:	eb04 0903 	add.w	r9, r4, r3
 80095b4:	f000 f996 	bl	80098e4 <_sbrk_r>
 80095b8:	4581      	cmp	r9, r0
 80095ba:	d142      	bne.n	8009642 <_malloc_r+0xea>
 80095bc:	6821      	ldr	r1, [r4, #0]
 80095be:	1a6d      	subs	r5, r5, r1
 80095c0:	4629      	mov	r1, r5
 80095c2:	4630      	mov	r0, r6
 80095c4:	f7ff ffa6 	bl	8009514 <sbrk_aligned>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d03a      	beq.n	8009642 <_malloc_r+0xea>
 80095cc:	6823      	ldr	r3, [r4, #0]
 80095ce:	442b      	add	r3, r5
 80095d0:	6023      	str	r3, [r4, #0]
 80095d2:	f8d8 3000 	ldr.w	r3, [r8]
 80095d6:	685a      	ldr	r2, [r3, #4]
 80095d8:	bb62      	cbnz	r2, 8009634 <_malloc_r+0xdc>
 80095da:	f8c8 7000 	str.w	r7, [r8]
 80095de:	e00f      	b.n	8009600 <_malloc_r+0xa8>
 80095e0:	6822      	ldr	r2, [r4, #0]
 80095e2:	1b52      	subs	r2, r2, r5
 80095e4:	d420      	bmi.n	8009628 <_malloc_r+0xd0>
 80095e6:	2a0b      	cmp	r2, #11
 80095e8:	d917      	bls.n	800961a <_malloc_r+0xc2>
 80095ea:	1961      	adds	r1, r4, r5
 80095ec:	42a3      	cmp	r3, r4
 80095ee:	6025      	str	r5, [r4, #0]
 80095f0:	bf18      	it	ne
 80095f2:	6059      	strne	r1, [r3, #4]
 80095f4:	6863      	ldr	r3, [r4, #4]
 80095f6:	bf08      	it	eq
 80095f8:	f8c8 1000 	streq.w	r1, [r8]
 80095fc:	5162      	str	r2, [r4, r5]
 80095fe:	604b      	str	r3, [r1, #4]
 8009600:	4630      	mov	r0, r6
 8009602:	f000 f82f 	bl	8009664 <__malloc_unlock>
 8009606:	f104 000b 	add.w	r0, r4, #11
 800960a:	1d23      	adds	r3, r4, #4
 800960c:	f020 0007 	bic.w	r0, r0, #7
 8009610:	1ac2      	subs	r2, r0, r3
 8009612:	bf1c      	itt	ne
 8009614:	1a1b      	subne	r3, r3, r0
 8009616:	50a3      	strne	r3, [r4, r2]
 8009618:	e7af      	b.n	800957a <_malloc_r+0x22>
 800961a:	6862      	ldr	r2, [r4, #4]
 800961c:	42a3      	cmp	r3, r4
 800961e:	bf0c      	ite	eq
 8009620:	f8c8 2000 	streq.w	r2, [r8]
 8009624:	605a      	strne	r2, [r3, #4]
 8009626:	e7eb      	b.n	8009600 <_malloc_r+0xa8>
 8009628:	4623      	mov	r3, r4
 800962a:	6864      	ldr	r4, [r4, #4]
 800962c:	e7ae      	b.n	800958c <_malloc_r+0x34>
 800962e:	463c      	mov	r4, r7
 8009630:	687f      	ldr	r7, [r7, #4]
 8009632:	e7b6      	b.n	80095a2 <_malloc_r+0x4a>
 8009634:	461a      	mov	r2, r3
 8009636:	685b      	ldr	r3, [r3, #4]
 8009638:	42a3      	cmp	r3, r4
 800963a:	d1fb      	bne.n	8009634 <_malloc_r+0xdc>
 800963c:	2300      	movs	r3, #0
 800963e:	6053      	str	r3, [r2, #4]
 8009640:	e7de      	b.n	8009600 <_malloc_r+0xa8>
 8009642:	230c      	movs	r3, #12
 8009644:	6033      	str	r3, [r6, #0]
 8009646:	4630      	mov	r0, r6
 8009648:	f000 f80c 	bl	8009664 <__malloc_unlock>
 800964c:	e794      	b.n	8009578 <_malloc_r+0x20>
 800964e:	6005      	str	r5, [r0, #0]
 8009650:	e7d6      	b.n	8009600 <_malloc_r+0xa8>
 8009652:	bf00      	nop
 8009654:	240410b4 	.word	0x240410b4

08009658 <__malloc_lock>:
 8009658:	4801      	ldr	r0, [pc, #4]	@ (8009660 <__malloc_lock+0x8>)
 800965a:	f000 b97e 	b.w	800995a <__retarget_lock_acquire_recursive>
 800965e:	bf00      	nop
 8009660:	240411f4 	.word	0x240411f4

08009664 <__malloc_unlock>:
 8009664:	4801      	ldr	r0, [pc, #4]	@ (800966c <__malloc_unlock+0x8>)
 8009666:	f000 b979 	b.w	800995c <__retarget_lock_release_recursive>
 800966a:	bf00      	nop
 800966c:	240411f4 	.word	0x240411f4

08009670 <std>:
 8009670:	2300      	movs	r3, #0
 8009672:	b510      	push	{r4, lr}
 8009674:	4604      	mov	r4, r0
 8009676:	e9c0 3300 	strd	r3, r3, [r0]
 800967a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800967e:	6083      	str	r3, [r0, #8]
 8009680:	8181      	strh	r1, [r0, #12]
 8009682:	6643      	str	r3, [r0, #100]	@ 0x64
 8009684:	81c2      	strh	r2, [r0, #14]
 8009686:	6183      	str	r3, [r0, #24]
 8009688:	4619      	mov	r1, r3
 800968a:	2208      	movs	r2, #8
 800968c:	305c      	adds	r0, #92	@ 0x5c
 800968e:	f000 f921 	bl	80098d4 <memset>
 8009692:	4b0d      	ldr	r3, [pc, #52]	@ (80096c8 <std+0x58>)
 8009694:	6263      	str	r3, [r4, #36]	@ 0x24
 8009696:	4b0d      	ldr	r3, [pc, #52]	@ (80096cc <std+0x5c>)
 8009698:	62a3      	str	r3, [r4, #40]	@ 0x28
 800969a:	4b0d      	ldr	r3, [pc, #52]	@ (80096d0 <std+0x60>)
 800969c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800969e:	4b0d      	ldr	r3, [pc, #52]	@ (80096d4 <std+0x64>)
 80096a0:	6323      	str	r3, [r4, #48]	@ 0x30
 80096a2:	4b0d      	ldr	r3, [pc, #52]	@ (80096d8 <std+0x68>)
 80096a4:	6224      	str	r4, [r4, #32]
 80096a6:	429c      	cmp	r4, r3
 80096a8:	d006      	beq.n	80096b8 <std+0x48>
 80096aa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80096ae:	4294      	cmp	r4, r2
 80096b0:	d002      	beq.n	80096b8 <std+0x48>
 80096b2:	33d0      	adds	r3, #208	@ 0xd0
 80096b4:	429c      	cmp	r4, r3
 80096b6:	d105      	bne.n	80096c4 <std+0x54>
 80096b8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80096bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80096c0:	f000 b94a 	b.w	8009958 <__retarget_lock_init_recursive>
 80096c4:	bd10      	pop	{r4, pc}
 80096c6:	bf00      	nop
 80096c8:	0800a0e9 	.word	0x0800a0e9
 80096cc:	0800a10b 	.word	0x0800a10b
 80096d0:	0800a143 	.word	0x0800a143
 80096d4:	0800a167 	.word	0x0800a167
 80096d8:	240410b8 	.word	0x240410b8

080096dc <stdio_exit_handler>:
 80096dc:	4a02      	ldr	r2, [pc, #8]	@ (80096e8 <stdio_exit_handler+0xc>)
 80096de:	4903      	ldr	r1, [pc, #12]	@ (80096ec <stdio_exit_handler+0x10>)
 80096e0:	4803      	ldr	r0, [pc, #12]	@ (80096f0 <stdio_exit_handler+0x14>)
 80096e2:	f000 b869 	b.w	80097b8 <_fwalk_sglue>
 80096e6:	bf00      	nop
 80096e8:	24010c9c 	.word	0x24010c9c
 80096ec:	0800a099 	.word	0x0800a099
 80096f0:	24010cac 	.word	0x24010cac

080096f4 <cleanup_stdio>:
 80096f4:	6841      	ldr	r1, [r0, #4]
 80096f6:	4b0c      	ldr	r3, [pc, #48]	@ (8009728 <cleanup_stdio+0x34>)
 80096f8:	4299      	cmp	r1, r3
 80096fa:	b510      	push	{r4, lr}
 80096fc:	4604      	mov	r4, r0
 80096fe:	d001      	beq.n	8009704 <cleanup_stdio+0x10>
 8009700:	f000 fcca 	bl	800a098 <_fflush_r>
 8009704:	68a1      	ldr	r1, [r4, #8]
 8009706:	4b09      	ldr	r3, [pc, #36]	@ (800972c <cleanup_stdio+0x38>)
 8009708:	4299      	cmp	r1, r3
 800970a:	d002      	beq.n	8009712 <cleanup_stdio+0x1e>
 800970c:	4620      	mov	r0, r4
 800970e:	f000 fcc3 	bl	800a098 <_fflush_r>
 8009712:	68e1      	ldr	r1, [r4, #12]
 8009714:	4b06      	ldr	r3, [pc, #24]	@ (8009730 <cleanup_stdio+0x3c>)
 8009716:	4299      	cmp	r1, r3
 8009718:	d004      	beq.n	8009724 <cleanup_stdio+0x30>
 800971a:	4620      	mov	r0, r4
 800971c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009720:	f000 bcba 	b.w	800a098 <_fflush_r>
 8009724:	bd10      	pop	{r4, pc}
 8009726:	bf00      	nop
 8009728:	240410b8 	.word	0x240410b8
 800972c:	24041120 	.word	0x24041120
 8009730:	24041188 	.word	0x24041188

08009734 <global_stdio_init.part.0>:
 8009734:	b510      	push	{r4, lr}
 8009736:	4b0b      	ldr	r3, [pc, #44]	@ (8009764 <global_stdio_init.part.0+0x30>)
 8009738:	4c0b      	ldr	r4, [pc, #44]	@ (8009768 <global_stdio_init.part.0+0x34>)
 800973a:	4a0c      	ldr	r2, [pc, #48]	@ (800976c <global_stdio_init.part.0+0x38>)
 800973c:	601a      	str	r2, [r3, #0]
 800973e:	4620      	mov	r0, r4
 8009740:	2200      	movs	r2, #0
 8009742:	2104      	movs	r1, #4
 8009744:	f7ff ff94 	bl	8009670 <std>
 8009748:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800974c:	2201      	movs	r2, #1
 800974e:	2109      	movs	r1, #9
 8009750:	f7ff ff8e 	bl	8009670 <std>
 8009754:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009758:	2202      	movs	r2, #2
 800975a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800975e:	2112      	movs	r1, #18
 8009760:	f7ff bf86 	b.w	8009670 <std>
 8009764:	240411f0 	.word	0x240411f0
 8009768:	240410b8 	.word	0x240410b8
 800976c:	080096dd 	.word	0x080096dd

08009770 <__sfp_lock_acquire>:
 8009770:	4801      	ldr	r0, [pc, #4]	@ (8009778 <__sfp_lock_acquire+0x8>)
 8009772:	f000 b8f2 	b.w	800995a <__retarget_lock_acquire_recursive>
 8009776:	bf00      	nop
 8009778:	240411f5 	.word	0x240411f5

0800977c <__sfp_lock_release>:
 800977c:	4801      	ldr	r0, [pc, #4]	@ (8009784 <__sfp_lock_release+0x8>)
 800977e:	f000 b8ed 	b.w	800995c <__retarget_lock_release_recursive>
 8009782:	bf00      	nop
 8009784:	240411f5 	.word	0x240411f5

08009788 <__sinit>:
 8009788:	b510      	push	{r4, lr}
 800978a:	4604      	mov	r4, r0
 800978c:	f7ff fff0 	bl	8009770 <__sfp_lock_acquire>
 8009790:	6a23      	ldr	r3, [r4, #32]
 8009792:	b11b      	cbz	r3, 800979c <__sinit+0x14>
 8009794:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8009798:	f7ff bff0 	b.w	800977c <__sfp_lock_release>
 800979c:	4b04      	ldr	r3, [pc, #16]	@ (80097b0 <__sinit+0x28>)
 800979e:	6223      	str	r3, [r4, #32]
 80097a0:	4b04      	ldr	r3, [pc, #16]	@ (80097b4 <__sinit+0x2c>)
 80097a2:	681b      	ldr	r3, [r3, #0]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d1f5      	bne.n	8009794 <__sinit+0xc>
 80097a8:	f7ff ffc4 	bl	8009734 <global_stdio_init.part.0>
 80097ac:	e7f2      	b.n	8009794 <__sinit+0xc>
 80097ae:	bf00      	nop
 80097b0:	080096f5 	.word	0x080096f5
 80097b4:	240411f0 	.word	0x240411f0

080097b8 <_fwalk_sglue>:
 80097b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80097bc:	4607      	mov	r7, r0
 80097be:	4688      	mov	r8, r1
 80097c0:	4614      	mov	r4, r2
 80097c2:	2600      	movs	r6, #0
 80097c4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80097c8:	f1b9 0901 	subs.w	r9, r9, #1
 80097cc:	d505      	bpl.n	80097da <_fwalk_sglue+0x22>
 80097ce:	6824      	ldr	r4, [r4, #0]
 80097d0:	2c00      	cmp	r4, #0
 80097d2:	d1f7      	bne.n	80097c4 <_fwalk_sglue+0xc>
 80097d4:	4630      	mov	r0, r6
 80097d6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80097da:	89ab      	ldrh	r3, [r5, #12]
 80097dc:	2b01      	cmp	r3, #1
 80097de:	d907      	bls.n	80097f0 <_fwalk_sglue+0x38>
 80097e0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80097e4:	3301      	adds	r3, #1
 80097e6:	d003      	beq.n	80097f0 <_fwalk_sglue+0x38>
 80097e8:	4629      	mov	r1, r5
 80097ea:	4638      	mov	r0, r7
 80097ec:	47c0      	blx	r8
 80097ee:	4306      	orrs	r6, r0
 80097f0:	3568      	adds	r5, #104	@ 0x68
 80097f2:	e7e9      	b.n	80097c8 <_fwalk_sglue+0x10>

080097f4 <iprintf>:
 80097f4:	b40f      	push	{r0, r1, r2, r3}
 80097f6:	b507      	push	{r0, r1, r2, lr}
 80097f8:	4906      	ldr	r1, [pc, #24]	@ (8009814 <iprintf+0x20>)
 80097fa:	ab04      	add	r3, sp, #16
 80097fc:	6808      	ldr	r0, [r1, #0]
 80097fe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009802:	6881      	ldr	r1, [r0, #8]
 8009804:	9301      	str	r3, [sp, #4]
 8009806:	f000 f91f 	bl	8009a48 <_vfiprintf_r>
 800980a:	b003      	add	sp, #12
 800980c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009810:	b004      	add	sp, #16
 8009812:	4770      	bx	lr
 8009814:	24010ca8 	.word	0x24010ca8

08009818 <_puts_r>:
 8009818:	6a03      	ldr	r3, [r0, #32]
 800981a:	b570      	push	{r4, r5, r6, lr}
 800981c:	6884      	ldr	r4, [r0, #8]
 800981e:	4605      	mov	r5, r0
 8009820:	460e      	mov	r6, r1
 8009822:	b90b      	cbnz	r3, 8009828 <_puts_r+0x10>
 8009824:	f7ff ffb0 	bl	8009788 <__sinit>
 8009828:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800982a:	07db      	lsls	r3, r3, #31
 800982c:	d405      	bmi.n	800983a <_puts_r+0x22>
 800982e:	89a3      	ldrh	r3, [r4, #12]
 8009830:	0598      	lsls	r0, r3, #22
 8009832:	d402      	bmi.n	800983a <_puts_r+0x22>
 8009834:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009836:	f000 f890 	bl	800995a <__retarget_lock_acquire_recursive>
 800983a:	89a3      	ldrh	r3, [r4, #12]
 800983c:	0719      	lsls	r1, r3, #28
 800983e:	d502      	bpl.n	8009846 <_puts_r+0x2e>
 8009840:	6923      	ldr	r3, [r4, #16]
 8009842:	2b00      	cmp	r3, #0
 8009844:	d135      	bne.n	80098b2 <_puts_r+0x9a>
 8009846:	4621      	mov	r1, r4
 8009848:	4628      	mov	r0, r5
 800984a:	f000 fccf 	bl	800a1ec <__swsetup_r>
 800984e:	b380      	cbz	r0, 80098b2 <_puts_r+0x9a>
 8009850:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8009854:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009856:	07da      	lsls	r2, r3, #31
 8009858:	d405      	bmi.n	8009866 <_puts_r+0x4e>
 800985a:	89a3      	ldrh	r3, [r4, #12]
 800985c:	059b      	lsls	r3, r3, #22
 800985e:	d402      	bmi.n	8009866 <_puts_r+0x4e>
 8009860:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009862:	f000 f87b 	bl	800995c <__retarget_lock_release_recursive>
 8009866:	4628      	mov	r0, r5
 8009868:	bd70      	pop	{r4, r5, r6, pc}
 800986a:	2b00      	cmp	r3, #0
 800986c:	da04      	bge.n	8009878 <_puts_r+0x60>
 800986e:	69a2      	ldr	r2, [r4, #24]
 8009870:	429a      	cmp	r2, r3
 8009872:	dc17      	bgt.n	80098a4 <_puts_r+0x8c>
 8009874:	290a      	cmp	r1, #10
 8009876:	d015      	beq.n	80098a4 <_puts_r+0x8c>
 8009878:	6823      	ldr	r3, [r4, #0]
 800987a:	1c5a      	adds	r2, r3, #1
 800987c:	6022      	str	r2, [r4, #0]
 800987e:	7019      	strb	r1, [r3, #0]
 8009880:	68a3      	ldr	r3, [r4, #8]
 8009882:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8009886:	3b01      	subs	r3, #1
 8009888:	60a3      	str	r3, [r4, #8]
 800988a:	2900      	cmp	r1, #0
 800988c:	d1ed      	bne.n	800986a <_puts_r+0x52>
 800988e:	2b00      	cmp	r3, #0
 8009890:	da11      	bge.n	80098b6 <_puts_r+0x9e>
 8009892:	4622      	mov	r2, r4
 8009894:	210a      	movs	r1, #10
 8009896:	4628      	mov	r0, r5
 8009898:	f000 fc69 	bl	800a16e <__swbuf_r>
 800989c:	3001      	adds	r0, #1
 800989e:	d0d7      	beq.n	8009850 <_puts_r+0x38>
 80098a0:	250a      	movs	r5, #10
 80098a2:	e7d7      	b.n	8009854 <_puts_r+0x3c>
 80098a4:	4622      	mov	r2, r4
 80098a6:	4628      	mov	r0, r5
 80098a8:	f000 fc61 	bl	800a16e <__swbuf_r>
 80098ac:	3001      	adds	r0, #1
 80098ae:	d1e7      	bne.n	8009880 <_puts_r+0x68>
 80098b0:	e7ce      	b.n	8009850 <_puts_r+0x38>
 80098b2:	3e01      	subs	r6, #1
 80098b4:	e7e4      	b.n	8009880 <_puts_r+0x68>
 80098b6:	6823      	ldr	r3, [r4, #0]
 80098b8:	1c5a      	adds	r2, r3, #1
 80098ba:	6022      	str	r2, [r4, #0]
 80098bc:	220a      	movs	r2, #10
 80098be:	701a      	strb	r2, [r3, #0]
 80098c0:	e7ee      	b.n	80098a0 <_puts_r+0x88>
	...

080098c4 <puts>:
 80098c4:	4b02      	ldr	r3, [pc, #8]	@ (80098d0 <puts+0xc>)
 80098c6:	4601      	mov	r1, r0
 80098c8:	6818      	ldr	r0, [r3, #0]
 80098ca:	f7ff bfa5 	b.w	8009818 <_puts_r>
 80098ce:	bf00      	nop
 80098d0:	24010ca8 	.word	0x24010ca8

080098d4 <memset>:
 80098d4:	4402      	add	r2, r0
 80098d6:	4603      	mov	r3, r0
 80098d8:	4293      	cmp	r3, r2
 80098da:	d100      	bne.n	80098de <memset+0xa>
 80098dc:	4770      	bx	lr
 80098de:	f803 1b01 	strb.w	r1, [r3], #1
 80098e2:	e7f9      	b.n	80098d8 <memset+0x4>

080098e4 <_sbrk_r>:
 80098e4:	b538      	push	{r3, r4, r5, lr}
 80098e6:	4d06      	ldr	r5, [pc, #24]	@ (8009900 <_sbrk_r+0x1c>)
 80098e8:	2300      	movs	r3, #0
 80098ea:	4604      	mov	r4, r0
 80098ec:	4608      	mov	r0, r1
 80098ee:	602b      	str	r3, [r5, #0]
 80098f0:	f7f7 fa96 	bl	8000e20 <_sbrk>
 80098f4:	1c43      	adds	r3, r0, #1
 80098f6:	d102      	bne.n	80098fe <_sbrk_r+0x1a>
 80098f8:	682b      	ldr	r3, [r5, #0]
 80098fa:	b103      	cbz	r3, 80098fe <_sbrk_r+0x1a>
 80098fc:	6023      	str	r3, [r4, #0]
 80098fe:	bd38      	pop	{r3, r4, r5, pc}
 8009900:	240411f8 	.word	0x240411f8

08009904 <__errno>:
 8009904:	4b01      	ldr	r3, [pc, #4]	@ (800990c <__errno+0x8>)
 8009906:	6818      	ldr	r0, [r3, #0]
 8009908:	4770      	bx	lr
 800990a:	bf00      	nop
 800990c:	24010ca8 	.word	0x24010ca8

08009910 <__libc_init_array>:
 8009910:	b570      	push	{r4, r5, r6, lr}
 8009912:	4d0d      	ldr	r5, [pc, #52]	@ (8009948 <__libc_init_array+0x38>)
 8009914:	4c0d      	ldr	r4, [pc, #52]	@ (800994c <__libc_init_array+0x3c>)
 8009916:	1b64      	subs	r4, r4, r5
 8009918:	10a4      	asrs	r4, r4, #2
 800991a:	2600      	movs	r6, #0
 800991c:	42a6      	cmp	r6, r4
 800991e:	d109      	bne.n	8009934 <__libc_init_array+0x24>
 8009920:	4d0b      	ldr	r5, [pc, #44]	@ (8009950 <__libc_init_array+0x40>)
 8009922:	4c0c      	ldr	r4, [pc, #48]	@ (8009954 <__libc_init_array+0x44>)
 8009924:	f000 fd82 	bl	800a42c <_init>
 8009928:	1b64      	subs	r4, r4, r5
 800992a:	10a4      	asrs	r4, r4, #2
 800992c:	2600      	movs	r6, #0
 800992e:	42a6      	cmp	r6, r4
 8009930:	d105      	bne.n	800993e <__libc_init_array+0x2e>
 8009932:	bd70      	pop	{r4, r5, r6, pc}
 8009934:	f855 3b04 	ldr.w	r3, [r5], #4
 8009938:	4798      	blx	r3
 800993a:	3601      	adds	r6, #1
 800993c:	e7ee      	b.n	800991c <__libc_init_array+0xc>
 800993e:	f855 3b04 	ldr.w	r3, [r5], #4
 8009942:	4798      	blx	r3
 8009944:	3601      	adds	r6, #1
 8009946:	e7f2      	b.n	800992e <__libc_init_array+0x1e>
 8009948:	080105d4 	.word	0x080105d4
 800994c:	080105d4 	.word	0x080105d4
 8009950:	080105d4 	.word	0x080105d4
 8009954:	080105d8 	.word	0x080105d8

08009958 <__retarget_lock_init_recursive>:
 8009958:	4770      	bx	lr

0800995a <__retarget_lock_acquire_recursive>:
 800995a:	4770      	bx	lr

0800995c <__retarget_lock_release_recursive>:
 800995c:	4770      	bx	lr
	...

08009960 <_free_r>:
 8009960:	b538      	push	{r3, r4, r5, lr}
 8009962:	4605      	mov	r5, r0
 8009964:	2900      	cmp	r1, #0
 8009966:	d041      	beq.n	80099ec <_free_r+0x8c>
 8009968:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800996c:	1f0c      	subs	r4, r1, #4
 800996e:	2b00      	cmp	r3, #0
 8009970:	bfb8      	it	lt
 8009972:	18e4      	addlt	r4, r4, r3
 8009974:	f7ff fe70 	bl	8009658 <__malloc_lock>
 8009978:	4a1d      	ldr	r2, [pc, #116]	@ (80099f0 <_free_r+0x90>)
 800997a:	6813      	ldr	r3, [r2, #0]
 800997c:	b933      	cbnz	r3, 800998c <_free_r+0x2c>
 800997e:	6063      	str	r3, [r4, #4]
 8009980:	6014      	str	r4, [r2, #0]
 8009982:	4628      	mov	r0, r5
 8009984:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009988:	f7ff be6c 	b.w	8009664 <__malloc_unlock>
 800998c:	42a3      	cmp	r3, r4
 800998e:	d908      	bls.n	80099a2 <_free_r+0x42>
 8009990:	6820      	ldr	r0, [r4, #0]
 8009992:	1821      	adds	r1, r4, r0
 8009994:	428b      	cmp	r3, r1
 8009996:	bf01      	itttt	eq
 8009998:	6819      	ldreq	r1, [r3, #0]
 800999a:	685b      	ldreq	r3, [r3, #4]
 800999c:	1809      	addeq	r1, r1, r0
 800999e:	6021      	streq	r1, [r4, #0]
 80099a0:	e7ed      	b.n	800997e <_free_r+0x1e>
 80099a2:	461a      	mov	r2, r3
 80099a4:	685b      	ldr	r3, [r3, #4]
 80099a6:	b10b      	cbz	r3, 80099ac <_free_r+0x4c>
 80099a8:	42a3      	cmp	r3, r4
 80099aa:	d9fa      	bls.n	80099a2 <_free_r+0x42>
 80099ac:	6811      	ldr	r1, [r2, #0]
 80099ae:	1850      	adds	r0, r2, r1
 80099b0:	42a0      	cmp	r0, r4
 80099b2:	d10b      	bne.n	80099cc <_free_r+0x6c>
 80099b4:	6820      	ldr	r0, [r4, #0]
 80099b6:	4401      	add	r1, r0
 80099b8:	1850      	adds	r0, r2, r1
 80099ba:	4283      	cmp	r3, r0
 80099bc:	6011      	str	r1, [r2, #0]
 80099be:	d1e0      	bne.n	8009982 <_free_r+0x22>
 80099c0:	6818      	ldr	r0, [r3, #0]
 80099c2:	685b      	ldr	r3, [r3, #4]
 80099c4:	6053      	str	r3, [r2, #4]
 80099c6:	4408      	add	r0, r1
 80099c8:	6010      	str	r0, [r2, #0]
 80099ca:	e7da      	b.n	8009982 <_free_r+0x22>
 80099cc:	d902      	bls.n	80099d4 <_free_r+0x74>
 80099ce:	230c      	movs	r3, #12
 80099d0:	602b      	str	r3, [r5, #0]
 80099d2:	e7d6      	b.n	8009982 <_free_r+0x22>
 80099d4:	6820      	ldr	r0, [r4, #0]
 80099d6:	1821      	adds	r1, r4, r0
 80099d8:	428b      	cmp	r3, r1
 80099da:	bf04      	itt	eq
 80099dc:	6819      	ldreq	r1, [r3, #0]
 80099de:	685b      	ldreq	r3, [r3, #4]
 80099e0:	6063      	str	r3, [r4, #4]
 80099e2:	bf04      	itt	eq
 80099e4:	1809      	addeq	r1, r1, r0
 80099e6:	6021      	streq	r1, [r4, #0]
 80099e8:	6054      	str	r4, [r2, #4]
 80099ea:	e7ca      	b.n	8009982 <_free_r+0x22>
 80099ec:	bd38      	pop	{r3, r4, r5, pc}
 80099ee:	bf00      	nop
 80099f0:	240410b4 	.word	0x240410b4

080099f4 <__sfputc_r>:
 80099f4:	6893      	ldr	r3, [r2, #8]
 80099f6:	3b01      	subs	r3, #1
 80099f8:	2b00      	cmp	r3, #0
 80099fa:	b410      	push	{r4}
 80099fc:	6093      	str	r3, [r2, #8]
 80099fe:	da08      	bge.n	8009a12 <__sfputc_r+0x1e>
 8009a00:	6994      	ldr	r4, [r2, #24]
 8009a02:	42a3      	cmp	r3, r4
 8009a04:	db01      	blt.n	8009a0a <__sfputc_r+0x16>
 8009a06:	290a      	cmp	r1, #10
 8009a08:	d103      	bne.n	8009a12 <__sfputc_r+0x1e>
 8009a0a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a0e:	f000 bbae 	b.w	800a16e <__swbuf_r>
 8009a12:	6813      	ldr	r3, [r2, #0]
 8009a14:	1c58      	adds	r0, r3, #1
 8009a16:	6010      	str	r0, [r2, #0]
 8009a18:	7019      	strb	r1, [r3, #0]
 8009a1a:	4608      	mov	r0, r1
 8009a1c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009a20:	4770      	bx	lr

08009a22 <__sfputs_r>:
 8009a22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009a24:	4606      	mov	r6, r0
 8009a26:	460f      	mov	r7, r1
 8009a28:	4614      	mov	r4, r2
 8009a2a:	18d5      	adds	r5, r2, r3
 8009a2c:	42ac      	cmp	r4, r5
 8009a2e:	d101      	bne.n	8009a34 <__sfputs_r+0x12>
 8009a30:	2000      	movs	r0, #0
 8009a32:	e007      	b.n	8009a44 <__sfputs_r+0x22>
 8009a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009a38:	463a      	mov	r2, r7
 8009a3a:	4630      	mov	r0, r6
 8009a3c:	f7ff ffda 	bl	80099f4 <__sfputc_r>
 8009a40:	1c43      	adds	r3, r0, #1
 8009a42:	d1f3      	bne.n	8009a2c <__sfputs_r+0xa>
 8009a44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009a48 <_vfiprintf_r>:
 8009a48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a4c:	460d      	mov	r5, r1
 8009a4e:	b09d      	sub	sp, #116	@ 0x74
 8009a50:	4614      	mov	r4, r2
 8009a52:	4698      	mov	r8, r3
 8009a54:	4606      	mov	r6, r0
 8009a56:	b118      	cbz	r0, 8009a60 <_vfiprintf_r+0x18>
 8009a58:	6a03      	ldr	r3, [r0, #32]
 8009a5a:	b90b      	cbnz	r3, 8009a60 <_vfiprintf_r+0x18>
 8009a5c:	f7ff fe94 	bl	8009788 <__sinit>
 8009a60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a62:	07d9      	lsls	r1, r3, #31
 8009a64:	d405      	bmi.n	8009a72 <_vfiprintf_r+0x2a>
 8009a66:	89ab      	ldrh	r3, [r5, #12]
 8009a68:	059a      	lsls	r2, r3, #22
 8009a6a:	d402      	bmi.n	8009a72 <_vfiprintf_r+0x2a>
 8009a6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a6e:	f7ff ff74 	bl	800995a <__retarget_lock_acquire_recursive>
 8009a72:	89ab      	ldrh	r3, [r5, #12]
 8009a74:	071b      	lsls	r3, r3, #28
 8009a76:	d501      	bpl.n	8009a7c <_vfiprintf_r+0x34>
 8009a78:	692b      	ldr	r3, [r5, #16]
 8009a7a:	b99b      	cbnz	r3, 8009aa4 <_vfiprintf_r+0x5c>
 8009a7c:	4629      	mov	r1, r5
 8009a7e:	4630      	mov	r0, r6
 8009a80:	f000 fbb4 	bl	800a1ec <__swsetup_r>
 8009a84:	b170      	cbz	r0, 8009aa4 <_vfiprintf_r+0x5c>
 8009a86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009a88:	07dc      	lsls	r4, r3, #31
 8009a8a:	d504      	bpl.n	8009a96 <_vfiprintf_r+0x4e>
 8009a8c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009a90:	b01d      	add	sp, #116	@ 0x74
 8009a92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a96:	89ab      	ldrh	r3, [r5, #12]
 8009a98:	0598      	lsls	r0, r3, #22
 8009a9a:	d4f7      	bmi.n	8009a8c <_vfiprintf_r+0x44>
 8009a9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009a9e:	f7ff ff5d 	bl	800995c <__retarget_lock_release_recursive>
 8009aa2:	e7f3      	b.n	8009a8c <_vfiprintf_r+0x44>
 8009aa4:	2300      	movs	r3, #0
 8009aa6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009aa8:	2320      	movs	r3, #32
 8009aaa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009aae:	f8cd 800c 	str.w	r8, [sp, #12]
 8009ab2:	2330      	movs	r3, #48	@ 0x30
 8009ab4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009c64 <_vfiprintf_r+0x21c>
 8009ab8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009abc:	f04f 0901 	mov.w	r9, #1
 8009ac0:	4623      	mov	r3, r4
 8009ac2:	469a      	mov	sl, r3
 8009ac4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009ac8:	b10a      	cbz	r2, 8009ace <_vfiprintf_r+0x86>
 8009aca:	2a25      	cmp	r2, #37	@ 0x25
 8009acc:	d1f9      	bne.n	8009ac2 <_vfiprintf_r+0x7a>
 8009ace:	ebba 0b04 	subs.w	fp, sl, r4
 8009ad2:	d00b      	beq.n	8009aec <_vfiprintf_r+0xa4>
 8009ad4:	465b      	mov	r3, fp
 8009ad6:	4622      	mov	r2, r4
 8009ad8:	4629      	mov	r1, r5
 8009ada:	4630      	mov	r0, r6
 8009adc:	f7ff ffa1 	bl	8009a22 <__sfputs_r>
 8009ae0:	3001      	adds	r0, #1
 8009ae2:	f000 80a7 	beq.w	8009c34 <_vfiprintf_r+0x1ec>
 8009ae6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ae8:	445a      	add	r2, fp
 8009aea:	9209      	str	r2, [sp, #36]	@ 0x24
 8009aec:	f89a 3000 	ldrb.w	r3, [sl]
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	f000 809f 	beq.w	8009c34 <_vfiprintf_r+0x1ec>
 8009af6:	2300      	movs	r3, #0
 8009af8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009afc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009b00:	f10a 0a01 	add.w	sl, sl, #1
 8009b04:	9304      	str	r3, [sp, #16]
 8009b06:	9307      	str	r3, [sp, #28]
 8009b08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009b0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8009b0e:	4654      	mov	r4, sl
 8009b10:	2205      	movs	r2, #5
 8009b12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009b16:	4853      	ldr	r0, [pc, #332]	@ (8009c64 <_vfiprintf_r+0x21c>)
 8009b18:	f7f6 fbe2 	bl	80002e0 <memchr>
 8009b1c:	9a04      	ldr	r2, [sp, #16]
 8009b1e:	b9d8      	cbnz	r0, 8009b58 <_vfiprintf_r+0x110>
 8009b20:	06d1      	lsls	r1, r2, #27
 8009b22:	bf44      	itt	mi
 8009b24:	2320      	movmi	r3, #32
 8009b26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b2a:	0713      	lsls	r3, r2, #28
 8009b2c:	bf44      	itt	mi
 8009b2e:	232b      	movmi	r3, #43	@ 0x2b
 8009b30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009b34:	f89a 3000 	ldrb.w	r3, [sl]
 8009b38:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b3a:	d015      	beq.n	8009b68 <_vfiprintf_r+0x120>
 8009b3c:	9a07      	ldr	r2, [sp, #28]
 8009b3e:	4654      	mov	r4, sl
 8009b40:	2000      	movs	r0, #0
 8009b42:	f04f 0c0a 	mov.w	ip, #10
 8009b46:	4621      	mov	r1, r4
 8009b48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009b4c:	3b30      	subs	r3, #48	@ 0x30
 8009b4e:	2b09      	cmp	r3, #9
 8009b50:	d94b      	bls.n	8009bea <_vfiprintf_r+0x1a2>
 8009b52:	b1b0      	cbz	r0, 8009b82 <_vfiprintf_r+0x13a>
 8009b54:	9207      	str	r2, [sp, #28]
 8009b56:	e014      	b.n	8009b82 <_vfiprintf_r+0x13a>
 8009b58:	eba0 0308 	sub.w	r3, r0, r8
 8009b5c:	fa09 f303 	lsl.w	r3, r9, r3
 8009b60:	4313      	orrs	r3, r2
 8009b62:	9304      	str	r3, [sp, #16]
 8009b64:	46a2      	mov	sl, r4
 8009b66:	e7d2      	b.n	8009b0e <_vfiprintf_r+0xc6>
 8009b68:	9b03      	ldr	r3, [sp, #12]
 8009b6a:	1d19      	adds	r1, r3, #4
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	9103      	str	r1, [sp, #12]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	bfbb      	ittet	lt
 8009b74:	425b      	neglt	r3, r3
 8009b76:	f042 0202 	orrlt.w	r2, r2, #2
 8009b7a:	9307      	strge	r3, [sp, #28]
 8009b7c:	9307      	strlt	r3, [sp, #28]
 8009b7e:	bfb8      	it	lt
 8009b80:	9204      	strlt	r2, [sp, #16]
 8009b82:	7823      	ldrb	r3, [r4, #0]
 8009b84:	2b2e      	cmp	r3, #46	@ 0x2e
 8009b86:	d10a      	bne.n	8009b9e <_vfiprintf_r+0x156>
 8009b88:	7863      	ldrb	r3, [r4, #1]
 8009b8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8009b8c:	d132      	bne.n	8009bf4 <_vfiprintf_r+0x1ac>
 8009b8e:	9b03      	ldr	r3, [sp, #12]
 8009b90:	1d1a      	adds	r2, r3, #4
 8009b92:	681b      	ldr	r3, [r3, #0]
 8009b94:	9203      	str	r2, [sp, #12]
 8009b96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009b9a:	3402      	adds	r4, #2
 8009b9c:	9305      	str	r3, [sp, #20]
 8009b9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009c74 <_vfiprintf_r+0x22c>
 8009ba2:	7821      	ldrb	r1, [r4, #0]
 8009ba4:	2203      	movs	r2, #3
 8009ba6:	4650      	mov	r0, sl
 8009ba8:	f7f6 fb9a 	bl	80002e0 <memchr>
 8009bac:	b138      	cbz	r0, 8009bbe <_vfiprintf_r+0x176>
 8009bae:	9b04      	ldr	r3, [sp, #16]
 8009bb0:	eba0 000a 	sub.w	r0, r0, sl
 8009bb4:	2240      	movs	r2, #64	@ 0x40
 8009bb6:	4082      	lsls	r2, r0
 8009bb8:	4313      	orrs	r3, r2
 8009bba:	3401      	adds	r4, #1
 8009bbc:	9304      	str	r3, [sp, #16]
 8009bbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009bc2:	4829      	ldr	r0, [pc, #164]	@ (8009c68 <_vfiprintf_r+0x220>)
 8009bc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009bc8:	2206      	movs	r2, #6
 8009bca:	f7f6 fb89 	bl	80002e0 <memchr>
 8009bce:	2800      	cmp	r0, #0
 8009bd0:	d03f      	beq.n	8009c52 <_vfiprintf_r+0x20a>
 8009bd2:	4b26      	ldr	r3, [pc, #152]	@ (8009c6c <_vfiprintf_r+0x224>)
 8009bd4:	bb1b      	cbnz	r3, 8009c1e <_vfiprintf_r+0x1d6>
 8009bd6:	9b03      	ldr	r3, [sp, #12]
 8009bd8:	3307      	adds	r3, #7
 8009bda:	f023 0307 	bic.w	r3, r3, #7
 8009bde:	3308      	adds	r3, #8
 8009be0:	9303      	str	r3, [sp, #12]
 8009be2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009be4:	443b      	add	r3, r7
 8009be6:	9309      	str	r3, [sp, #36]	@ 0x24
 8009be8:	e76a      	b.n	8009ac0 <_vfiprintf_r+0x78>
 8009bea:	fb0c 3202 	mla	r2, ip, r2, r3
 8009bee:	460c      	mov	r4, r1
 8009bf0:	2001      	movs	r0, #1
 8009bf2:	e7a8      	b.n	8009b46 <_vfiprintf_r+0xfe>
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	3401      	adds	r4, #1
 8009bf8:	9305      	str	r3, [sp, #20]
 8009bfa:	4619      	mov	r1, r3
 8009bfc:	f04f 0c0a 	mov.w	ip, #10
 8009c00:	4620      	mov	r0, r4
 8009c02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009c06:	3a30      	subs	r2, #48	@ 0x30
 8009c08:	2a09      	cmp	r2, #9
 8009c0a:	d903      	bls.n	8009c14 <_vfiprintf_r+0x1cc>
 8009c0c:	2b00      	cmp	r3, #0
 8009c0e:	d0c6      	beq.n	8009b9e <_vfiprintf_r+0x156>
 8009c10:	9105      	str	r1, [sp, #20]
 8009c12:	e7c4      	b.n	8009b9e <_vfiprintf_r+0x156>
 8009c14:	fb0c 2101 	mla	r1, ip, r1, r2
 8009c18:	4604      	mov	r4, r0
 8009c1a:	2301      	movs	r3, #1
 8009c1c:	e7f0      	b.n	8009c00 <_vfiprintf_r+0x1b8>
 8009c1e:	ab03      	add	r3, sp, #12
 8009c20:	9300      	str	r3, [sp, #0]
 8009c22:	462a      	mov	r2, r5
 8009c24:	4b12      	ldr	r3, [pc, #72]	@ (8009c70 <_vfiprintf_r+0x228>)
 8009c26:	a904      	add	r1, sp, #16
 8009c28:	4630      	mov	r0, r6
 8009c2a:	f3af 8000 	nop.w
 8009c2e:	4607      	mov	r7, r0
 8009c30:	1c78      	adds	r0, r7, #1
 8009c32:	d1d6      	bne.n	8009be2 <_vfiprintf_r+0x19a>
 8009c34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c36:	07d9      	lsls	r1, r3, #31
 8009c38:	d405      	bmi.n	8009c46 <_vfiprintf_r+0x1fe>
 8009c3a:	89ab      	ldrh	r3, [r5, #12]
 8009c3c:	059a      	lsls	r2, r3, #22
 8009c3e:	d402      	bmi.n	8009c46 <_vfiprintf_r+0x1fe>
 8009c40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c42:	f7ff fe8b 	bl	800995c <__retarget_lock_release_recursive>
 8009c46:	89ab      	ldrh	r3, [r5, #12]
 8009c48:	065b      	lsls	r3, r3, #25
 8009c4a:	f53f af1f 	bmi.w	8009a8c <_vfiprintf_r+0x44>
 8009c4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009c50:	e71e      	b.n	8009a90 <_vfiprintf_r+0x48>
 8009c52:	ab03      	add	r3, sp, #12
 8009c54:	9300      	str	r3, [sp, #0]
 8009c56:	462a      	mov	r2, r5
 8009c58:	4b05      	ldr	r3, [pc, #20]	@ (8009c70 <_vfiprintf_r+0x228>)
 8009c5a:	a904      	add	r1, sp, #16
 8009c5c:	4630      	mov	r0, r6
 8009c5e:	f000 f879 	bl	8009d54 <_printf_i>
 8009c62:	e7e4      	b.n	8009c2e <_vfiprintf_r+0x1e6>
 8009c64:	08010598 	.word	0x08010598
 8009c68:	080105a2 	.word	0x080105a2
 8009c6c:	00000000 	.word	0x00000000
 8009c70:	08009a23 	.word	0x08009a23
 8009c74:	0801059e 	.word	0x0801059e

08009c78 <_printf_common>:
 8009c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009c7c:	4616      	mov	r6, r2
 8009c7e:	4698      	mov	r8, r3
 8009c80:	688a      	ldr	r2, [r1, #8]
 8009c82:	690b      	ldr	r3, [r1, #16]
 8009c84:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009c88:	4293      	cmp	r3, r2
 8009c8a:	bfb8      	it	lt
 8009c8c:	4613      	movlt	r3, r2
 8009c8e:	6033      	str	r3, [r6, #0]
 8009c90:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009c94:	4607      	mov	r7, r0
 8009c96:	460c      	mov	r4, r1
 8009c98:	b10a      	cbz	r2, 8009c9e <_printf_common+0x26>
 8009c9a:	3301      	adds	r3, #1
 8009c9c:	6033      	str	r3, [r6, #0]
 8009c9e:	6823      	ldr	r3, [r4, #0]
 8009ca0:	0699      	lsls	r1, r3, #26
 8009ca2:	bf42      	ittt	mi
 8009ca4:	6833      	ldrmi	r3, [r6, #0]
 8009ca6:	3302      	addmi	r3, #2
 8009ca8:	6033      	strmi	r3, [r6, #0]
 8009caa:	6825      	ldr	r5, [r4, #0]
 8009cac:	f015 0506 	ands.w	r5, r5, #6
 8009cb0:	d106      	bne.n	8009cc0 <_printf_common+0x48>
 8009cb2:	f104 0a19 	add.w	sl, r4, #25
 8009cb6:	68e3      	ldr	r3, [r4, #12]
 8009cb8:	6832      	ldr	r2, [r6, #0]
 8009cba:	1a9b      	subs	r3, r3, r2
 8009cbc:	42ab      	cmp	r3, r5
 8009cbe:	dc26      	bgt.n	8009d0e <_printf_common+0x96>
 8009cc0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009cc4:	6822      	ldr	r2, [r4, #0]
 8009cc6:	3b00      	subs	r3, #0
 8009cc8:	bf18      	it	ne
 8009cca:	2301      	movne	r3, #1
 8009ccc:	0692      	lsls	r2, r2, #26
 8009cce:	d42b      	bmi.n	8009d28 <_printf_common+0xb0>
 8009cd0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009cd4:	4641      	mov	r1, r8
 8009cd6:	4638      	mov	r0, r7
 8009cd8:	47c8      	blx	r9
 8009cda:	3001      	adds	r0, #1
 8009cdc:	d01e      	beq.n	8009d1c <_printf_common+0xa4>
 8009cde:	6823      	ldr	r3, [r4, #0]
 8009ce0:	6922      	ldr	r2, [r4, #16]
 8009ce2:	f003 0306 	and.w	r3, r3, #6
 8009ce6:	2b04      	cmp	r3, #4
 8009ce8:	bf02      	ittt	eq
 8009cea:	68e5      	ldreq	r5, [r4, #12]
 8009cec:	6833      	ldreq	r3, [r6, #0]
 8009cee:	1aed      	subeq	r5, r5, r3
 8009cf0:	68a3      	ldr	r3, [r4, #8]
 8009cf2:	bf0c      	ite	eq
 8009cf4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009cf8:	2500      	movne	r5, #0
 8009cfa:	4293      	cmp	r3, r2
 8009cfc:	bfc4      	itt	gt
 8009cfe:	1a9b      	subgt	r3, r3, r2
 8009d00:	18ed      	addgt	r5, r5, r3
 8009d02:	2600      	movs	r6, #0
 8009d04:	341a      	adds	r4, #26
 8009d06:	42b5      	cmp	r5, r6
 8009d08:	d11a      	bne.n	8009d40 <_printf_common+0xc8>
 8009d0a:	2000      	movs	r0, #0
 8009d0c:	e008      	b.n	8009d20 <_printf_common+0xa8>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4652      	mov	r2, sl
 8009d12:	4641      	mov	r1, r8
 8009d14:	4638      	mov	r0, r7
 8009d16:	47c8      	blx	r9
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d103      	bne.n	8009d24 <_printf_common+0xac>
 8009d1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009d20:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d24:	3501      	adds	r5, #1
 8009d26:	e7c6      	b.n	8009cb6 <_printf_common+0x3e>
 8009d28:	18e1      	adds	r1, r4, r3
 8009d2a:	1c5a      	adds	r2, r3, #1
 8009d2c:	2030      	movs	r0, #48	@ 0x30
 8009d2e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009d32:	4422      	add	r2, r4
 8009d34:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009d38:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009d3c:	3302      	adds	r3, #2
 8009d3e:	e7c7      	b.n	8009cd0 <_printf_common+0x58>
 8009d40:	2301      	movs	r3, #1
 8009d42:	4622      	mov	r2, r4
 8009d44:	4641      	mov	r1, r8
 8009d46:	4638      	mov	r0, r7
 8009d48:	47c8      	blx	r9
 8009d4a:	3001      	adds	r0, #1
 8009d4c:	d0e6      	beq.n	8009d1c <_printf_common+0xa4>
 8009d4e:	3601      	adds	r6, #1
 8009d50:	e7d9      	b.n	8009d06 <_printf_common+0x8e>
	...

08009d54 <_printf_i>:
 8009d54:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009d58:	7e0f      	ldrb	r7, [r1, #24]
 8009d5a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009d5c:	2f78      	cmp	r7, #120	@ 0x78
 8009d5e:	4691      	mov	r9, r2
 8009d60:	4680      	mov	r8, r0
 8009d62:	460c      	mov	r4, r1
 8009d64:	469a      	mov	sl, r3
 8009d66:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009d6a:	d807      	bhi.n	8009d7c <_printf_i+0x28>
 8009d6c:	2f62      	cmp	r7, #98	@ 0x62
 8009d6e:	d80a      	bhi.n	8009d86 <_printf_i+0x32>
 8009d70:	2f00      	cmp	r7, #0
 8009d72:	f000 80d1 	beq.w	8009f18 <_printf_i+0x1c4>
 8009d76:	2f58      	cmp	r7, #88	@ 0x58
 8009d78:	f000 80b8 	beq.w	8009eec <_printf_i+0x198>
 8009d7c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009d80:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009d84:	e03a      	b.n	8009dfc <_printf_i+0xa8>
 8009d86:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009d8a:	2b15      	cmp	r3, #21
 8009d8c:	d8f6      	bhi.n	8009d7c <_printf_i+0x28>
 8009d8e:	a101      	add	r1, pc, #4	@ (adr r1, 8009d94 <_printf_i+0x40>)
 8009d90:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009d94:	08009ded 	.word	0x08009ded
 8009d98:	08009e01 	.word	0x08009e01
 8009d9c:	08009d7d 	.word	0x08009d7d
 8009da0:	08009d7d 	.word	0x08009d7d
 8009da4:	08009d7d 	.word	0x08009d7d
 8009da8:	08009d7d 	.word	0x08009d7d
 8009dac:	08009e01 	.word	0x08009e01
 8009db0:	08009d7d 	.word	0x08009d7d
 8009db4:	08009d7d 	.word	0x08009d7d
 8009db8:	08009d7d 	.word	0x08009d7d
 8009dbc:	08009d7d 	.word	0x08009d7d
 8009dc0:	08009eff 	.word	0x08009eff
 8009dc4:	08009e2b 	.word	0x08009e2b
 8009dc8:	08009eb9 	.word	0x08009eb9
 8009dcc:	08009d7d 	.word	0x08009d7d
 8009dd0:	08009d7d 	.word	0x08009d7d
 8009dd4:	08009f21 	.word	0x08009f21
 8009dd8:	08009d7d 	.word	0x08009d7d
 8009ddc:	08009e2b 	.word	0x08009e2b
 8009de0:	08009d7d 	.word	0x08009d7d
 8009de4:	08009d7d 	.word	0x08009d7d
 8009de8:	08009ec1 	.word	0x08009ec1
 8009dec:	6833      	ldr	r3, [r6, #0]
 8009dee:	1d1a      	adds	r2, r3, #4
 8009df0:	681b      	ldr	r3, [r3, #0]
 8009df2:	6032      	str	r2, [r6, #0]
 8009df4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009df8:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009dfc:	2301      	movs	r3, #1
 8009dfe:	e09c      	b.n	8009f3a <_printf_i+0x1e6>
 8009e00:	6833      	ldr	r3, [r6, #0]
 8009e02:	6820      	ldr	r0, [r4, #0]
 8009e04:	1d19      	adds	r1, r3, #4
 8009e06:	6031      	str	r1, [r6, #0]
 8009e08:	0606      	lsls	r6, r0, #24
 8009e0a:	d501      	bpl.n	8009e10 <_printf_i+0xbc>
 8009e0c:	681d      	ldr	r5, [r3, #0]
 8009e0e:	e003      	b.n	8009e18 <_printf_i+0xc4>
 8009e10:	0645      	lsls	r5, r0, #25
 8009e12:	d5fb      	bpl.n	8009e0c <_printf_i+0xb8>
 8009e14:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009e18:	2d00      	cmp	r5, #0
 8009e1a:	da03      	bge.n	8009e24 <_printf_i+0xd0>
 8009e1c:	232d      	movs	r3, #45	@ 0x2d
 8009e1e:	426d      	negs	r5, r5
 8009e20:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009e24:	4858      	ldr	r0, [pc, #352]	@ (8009f88 <_printf_i+0x234>)
 8009e26:	230a      	movs	r3, #10
 8009e28:	e011      	b.n	8009e4e <_printf_i+0xfa>
 8009e2a:	6821      	ldr	r1, [r4, #0]
 8009e2c:	6833      	ldr	r3, [r6, #0]
 8009e2e:	0608      	lsls	r0, r1, #24
 8009e30:	f853 5b04 	ldr.w	r5, [r3], #4
 8009e34:	d402      	bmi.n	8009e3c <_printf_i+0xe8>
 8009e36:	0649      	lsls	r1, r1, #25
 8009e38:	bf48      	it	mi
 8009e3a:	b2ad      	uxthmi	r5, r5
 8009e3c:	2f6f      	cmp	r7, #111	@ 0x6f
 8009e3e:	4852      	ldr	r0, [pc, #328]	@ (8009f88 <_printf_i+0x234>)
 8009e40:	6033      	str	r3, [r6, #0]
 8009e42:	bf14      	ite	ne
 8009e44:	230a      	movne	r3, #10
 8009e46:	2308      	moveq	r3, #8
 8009e48:	2100      	movs	r1, #0
 8009e4a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8009e4e:	6866      	ldr	r6, [r4, #4]
 8009e50:	60a6      	str	r6, [r4, #8]
 8009e52:	2e00      	cmp	r6, #0
 8009e54:	db05      	blt.n	8009e62 <_printf_i+0x10e>
 8009e56:	6821      	ldr	r1, [r4, #0]
 8009e58:	432e      	orrs	r6, r5
 8009e5a:	f021 0104 	bic.w	r1, r1, #4
 8009e5e:	6021      	str	r1, [r4, #0]
 8009e60:	d04b      	beq.n	8009efa <_printf_i+0x1a6>
 8009e62:	4616      	mov	r6, r2
 8009e64:	fbb5 f1f3 	udiv	r1, r5, r3
 8009e68:	fb03 5711 	mls	r7, r3, r1, r5
 8009e6c:	5dc7      	ldrb	r7, [r0, r7]
 8009e6e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8009e72:	462f      	mov	r7, r5
 8009e74:	42bb      	cmp	r3, r7
 8009e76:	460d      	mov	r5, r1
 8009e78:	d9f4      	bls.n	8009e64 <_printf_i+0x110>
 8009e7a:	2b08      	cmp	r3, #8
 8009e7c:	d10b      	bne.n	8009e96 <_printf_i+0x142>
 8009e7e:	6823      	ldr	r3, [r4, #0]
 8009e80:	07df      	lsls	r7, r3, #31
 8009e82:	d508      	bpl.n	8009e96 <_printf_i+0x142>
 8009e84:	6923      	ldr	r3, [r4, #16]
 8009e86:	6861      	ldr	r1, [r4, #4]
 8009e88:	4299      	cmp	r1, r3
 8009e8a:	bfde      	ittt	le
 8009e8c:	2330      	movle	r3, #48	@ 0x30
 8009e8e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8009e92:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8009e96:	1b92      	subs	r2, r2, r6
 8009e98:	6122      	str	r2, [r4, #16]
 8009e9a:	f8cd a000 	str.w	sl, [sp]
 8009e9e:	464b      	mov	r3, r9
 8009ea0:	aa03      	add	r2, sp, #12
 8009ea2:	4621      	mov	r1, r4
 8009ea4:	4640      	mov	r0, r8
 8009ea6:	f7ff fee7 	bl	8009c78 <_printf_common>
 8009eaa:	3001      	adds	r0, #1
 8009eac:	d14a      	bne.n	8009f44 <_printf_i+0x1f0>
 8009eae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009eb2:	b004      	add	sp, #16
 8009eb4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009eb8:	6823      	ldr	r3, [r4, #0]
 8009eba:	f043 0320 	orr.w	r3, r3, #32
 8009ebe:	6023      	str	r3, [r4, #0]
 8009ec0:	4832      	ldr	r0, [pc, #200]	@ (8009f8c <_printf_i+0x238>)
 8009ec2:	2778      	movs	r7, #120	@ 0x78
 8009ec4:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009ec8:	6823      	ldr	r3, [r4, #0]
 8009eca:	6831      	ldr	r1, [r6, #0]
 8009ecc:	061f      	lsls	r7, r3, #24
 8009ece:	f851 5b04 	ldr.w	r5, [r1], #4
 8009ed2:	d402      	bmi.n	8009eda <_printf_i+0x186>
 8009ed4:	065f      	lsls	r7, r3, #25
 8009ed6:	bf48      	it	mi
 8009ed8:	b2ad      	uxthmi	r5, r5
 8009eda:	6031      	str	r1, [r6, #0]
 8009edc:	07d9      	lsls	r1, r3, #31
 8009ede:	bf44      	itt	mi
 8009ee0:	f043 0320 	orrmi.w	r3, r3, #32
 8009ee4:	6023      	strmi	r3, [r4, #0]
 8009ee6:	b11d      	cbz	r5, 8009ef0 <_printf_i+0x19c>
 8009ee8:	2310      	movs	r3, #16
 8009eea:	e7ad      	b.n	8009e48 <_printf_i+0xf4>
 8009eec:	4826      	ldr	r0, [pc, #152]	@ (8009f88 <_printf_i+0x234>)
 8009eee:	e7e9      	b.n	8009ec4 <_printf_i+0x170>
 8009ef0:	6823      	ldr	r3, [r4, #0]
 8009ef2:	f023 0320 	bic.w	r3, r3, #32
 8009ef6:	6023      	str	r3, [r4, #0]
 8009ef8:	e7f6      	b.n	8009ee8 <_printf_i+0x194>
 8009efa:	4616      	mov	r6, r2
 8009efc:	e7bd      	b.n	8009e7a <_printf_i+0x126>
 8009efe:	6833      	ldr	r3, [r6, #0]
 8009f00:	6825      	ldr	r5, [r4, #0]
 8009f02:	6961      	ldr	r1, [r4, #20]
 8009f04:	1d18      	adds	r0, r3, #4
 8009f06:	6030      	str	r0, [r6, #0]
 8009f08:	062e      	lsls	r6, r5, #24
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	d501      	bpl.n	8009f12 <_printf_i+0x1be>
 8009f0e:	6019      	str	r1, [r3, #0]
 8009f10:	e002      	b.n	8009f18 <_printf_i+0x1c4>
 8009f12:	0668      	lsls	r0, r5, #25
 8009f14:	d5fb      	bpl.n	8009f0e <_printf_i+0x1ba>
 8009f16:	8019      	strh	r1, [r3, #0]
 8009f18:	2300      	movs	r3, #0
 8009f1a:	6123      	str	r3, [r4, #16]
 8009f1c:	4616      	mov	r6, r2
 8009f1e:	e7bc      	b.n	8009e9a <_printf_i+0x146>
 8009f20:	6833      	ldr	r3, [r6, #0]
 8009f22:	1d1a      	adds	r2, r3, #4
 8009f24:	6032      	str	r2, [r6, #0]
 8009f26:	681e      	ldr	r6, [r3, #0]
 8009f28:	6862      	ldr	r2, [r4, #4]
 8009f2a:	2100      	movs	r1, #0
 8009f2c:	4630      	mov	r0, r6
 8009f2e:	f7f6 f9d7 	bl	80002e0 <memchr>
 8009f32:	b108      	cbz	r0, 8009f38 <_printf_i+0x1e4>
 8009f34:	1b80      	subs	r0, r0, r6
 8009f36:	6060      	str	r0, [r4, #4]
 8009f38:	6863      	ldr	r3, [r4, #4]
 8009f3a:	6123      	str	r3, [r4, #16]
 8009f3c:	2300      	movs	r3, #0
 8009f3e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8009f42:	e7aa      	b.n	8009e9a <_printf_i+0x146>
 8009f44:	6923      	ldr	r3, [r4, #16]
 8009f46:	4632      	mov	r2, r6
 8009f48:	4649      	mov	r1, r9
 8009f4a:	4640      	mov	r0, r8
 8009f4c:	47d0      	blx	sl
 8009f4e:	3001      	adds	r0, #1
 8009f50:	d0ad      	beq.n	8009eae <_printf_i+0x15a>
 8009f52:	6823      	ldr	r3, [r4, #0]
 8009f54:	079b      	lsls	r3, r3, #30
 8009f56:	d413      	bmi.n	8009f80 <_printf_i+0x22c>
 8009f58:	68e0      	ldr	r0, [r4, #12]
 8009f5a:	9b03      	ldr	r3, [sp, #12]
 8009f5c:	4298      	cmp	r0, r3
 8009f5e:	bfb8      	it	lt
 8009f60:	4618      	movlt	r0, r3
 8009f62:	e7a6      	b.n	8009eb2 <_printf_i+0x15e>
 8009f64:	2301      	movs	r3, #1
 8009f66:	4632      	mov	r2, r6
 8009f68:	4649      	mov	r1, r9
 8009f6a:	4640      	mov	r0, r8
 8009f6c:	47d0      	blx	sl
 8009f6e:	3001      	adds	r0, #1
 8009f70:	d09d      	beq.n	8009eae <_printf_i+0x15a>
 8009f72:	3501      	adds	r5, #1
 8009f74:	68e3      	ldr	r3, [r4, #12]
 8009f76:	9903      	ldr	r1, [sp, #12]
 8009f78:	1a5b      	subs	r3, r3, r1
 8009f7a:	42ab      	cmp	r3, r5
 8009f7c:	dcf2      	bgt.n	8009f64 <_printf_i+0x210>
 8009f7e:	e7eb      	b.n	8009f58 <_printf_i+0x204>
 8009f80:	2500      	movs	r5, #0
 8009f82:	f104 0619 	add.w	r6, r4, #25
 8009f86:	e7f5      	b.n	8009f74 <_printf_i+0x220>
 8009f88:	080105a9 	.word	0x080105a9
 8009f8c:	080105ba 	.word	0x080105ba

08009f90 <__sflush_r>:
 8009f90:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009f94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009f98:	0716      	lsls	r6, r2, #28
 8009f9a:	4605      	mov	r5, r0
 8009f9c:	460c      	mov	r4, r1
 8009f9e:	d454      	bmi.n	800a04a <__sflush_r+0xba>
 8009fa0:	684b      	ldr	r3, [r1, #4]
 8009fa2:	2b00      	cmp	r3, #0
 8009fa4:	dc02      	bgt.n	8009fac <__sflush_r+0x1c>
 8009fa6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	dd48      	ble.n	800a03e <__sflush_r+0xae>
 8009fac:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fae:	2e00      	cmp	r6, #0
 8009fb0:	d045      	beq.n	800a03e <__sflush_r+0xae>
 8009fb2:	2300      	movs	r3, #0
 8009fb4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009fb8:	682f      	ldr	r7, [r5, #0]
 8009fba:	6a21      	ldr	r1, [r4, #32]
 8009fbc:	602b      	str	r3, [r5, #0]
 8009fbe:	d030      	beq.n	800a022 <__sflush_r+0x92>
 8009fc0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8009fc2:	89a3      	ldrh	r3, [r4, #12]
 8009fc4:	0759      	lsls	r1, r3, #29
 8009fc6:	d505      	bpl.n	8009fd4 <__sflush_r+0x44>
 8009fc8:	6863      	ldr	r3, [r4, #4]
 8009fca:	1ad2      	subs	r2, r2, r3
 8009fcc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009fce:	b10b      	cbz	r3, 8009fd4 <__sflush_r+0x44>
 8009fd0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8009fd2:	1ad2      	subs	r2, r2, r3
 8009fd4:	2300      	movs	r3, #0
 8009fd6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009fd8:	6a21      	ldr	r1, [r4, #32]
 8009fda:	4628      	mov	r0, r5
 8009fdc:	47b0      	blx	r6
 8009fde:	1c43      	adds	r3, r0, #1
 8009fe0:	89a3      	ldrh	r3, [r4, #12]
 8009fe2:	d106      	bne.n	8009ff2 <__sflush_r+0x62>
 8009fe4:	6829      	ldr	r1, [r5, #0]
 8009fe6:	291d      	cmp	r1, #29
 8009fe8:	d82b      	bhi.n	800a042 <__sflush_r+0xb2>
 8009fea:	4a2a      	ldr	r2, [pc, #168]	@ (800a094 <__sflush_r+0x104>)
 8009fec:	40ca      	lsrs	r2, r1
 8009fee:	07d6      	lsls	r6, r2, #31
 8009ff0:	d527      	bpl.n	800a042 <__sflush_r+0xb2>
 8009ff2:	2200      	movs	r2, #0
 8009ff4:	6062      	str	r2, [r4, #4]
 8009ff6:	04d9      	lsls	r1, r3, #19
 8009ff8:	6922      	ldr	r2, [r4, #16]
 8009ffa:	6022      	str	r2, [r4, #0]
 8009ffc:	d504      	bpl.n	800a008 <__sflush_r+0x78>
 8009ffe:	1c42      	adds	r2, r0, #1
 800a000:	d101      	bne.n	800a006 <__sflush_r+0x76>
 800a002:	682b      	ldr	r3, [r5, #0]
 800a004:	b903      	cbnz	r3, 800a008 <__sflush_r+0x78>
 800a006:	6560      	str	r0, [r4, #84]	@ 0x54
 800a008:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a00a:	602f      	str	r7, [r5, #0]
 800a00c:	b1b9      	cbz	r1, 800a03e <__sflush_r+0xae>
 800a00e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a012:	4299      	cmp	r1, r3
 800a014:	d002      	beq.n	800a01c <__sflush_r+0x8c>
 800a016:	4628      	mov	r0, r5
 800a018:	f7ff fca2 	bl	8009960 <_free_r>
 800a01c:	2300      	movs	r3, #0
 800a01e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a020:	e00d      	b.n	800a03e <__sflush_r+0xae>
 800a022:	2301      	movs	r3, #1
 800a024:	4628      	mov	r0, r5
 800a026:	47b0      	blx	r6
 800a028:	4602      	mov	r2, r0
 800a02a:	1c50      	adds	r0, r2, #1
 800a02c:	d1c9      	bne.n	8009fc2 <__sflush_r+0x32>
 800a02e:	682b      	ldr	r3, [r5, #0]
 800a030:	2b00      	cmp	r3, #0
 800a032:	d0c6      	beq.n	8009fc2 <__sflush_r+0x32>
 800a034:	2b1d      	cmp	r3, #29
 800a036:	d001      	beq.n	800a03c <__sflush_r+0xac>
 800a038:	2b16      	cmp	r3, #22
 800a03a:	d11e      	bne.n	800a07a <__sflush_r+0xea>
 800a03c:	602f      	str	r7, [r5, #0]
 800a03e:	2000      	movs	r0, #0
 800a040:	e022      	b.n	800a088 <__sflush_r+0xf8>
 800a042:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a046:	b21b      	sxth	r3, r3
 800a048:	e01b      	b.n	800a082 <__sflush_r+0xf2>
 800a04a:	690f      	ldr	r7, [r1, #16]
 800a04c:	2f00      	cmp	r7, #0
 800a04e:	d0f6      	beq.n	800a03e <__sflush_r+0xae>
 800a050:	0793      	lsls	r3, r2, #30
 800a052:	680e      	ldr	r6, [r1, #0]
 800a054:	bf08      	it	eq
 800a056:	694b      	ldreq	r3, [r1, #20]
 800a058:	600f      	str	r7, [r1, #0]
 800a05a:	bf18      	it	ne
 800a05c:	2300      	movne	r3, #0
 800a05e:	eba6 0807 	sub.w	r8, r6, r7
 800a062:	608b      	str	r3, [r1, #8]
 800a064:	f1b8 0f00 	cmp.w	r8, #0
 800a068:	dde9      	ble.n	800a03e <__sflush_r+0xae>
 800a06a:	6a21      	ldr	r1, [r4, #32]
 800a06c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a06e:	4643      	mov	r3, r8
 800a070:	463a      	mov	r2, r7
 800a072:	4628      	mov	r0, r5
 800a074:	47b0      	blx	r6
 800a076:	2800      	cmp	r0, #0
 800a078:	dc08      	bgt.n	800a08c <__sflush_r+0xfc>
 800a07a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a07e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a082:	81a3      	strh	r3, [r4, #12]
 800a084:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a088:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a08c:	4407      	add	r7, r0
 800a08e:	eba8 0800 	sub.w	r8, r8, r0
 800a092:	e7e7      	b.n	800a064 <__sflush_r+0xd4>
 800a094:	20400001 	.word	0x20400001

0800a098 <_fflush_r>:
 800a098:	b538      	push	{r3, r4, r5, lr}
 800a09a:	690b      	ldr	r3, [r1, #16]
 800a09c:	4605      	mov	r5, r0
 800a09e:	460c      	mov	r4, r1
 800a0a0:	b913      	cbnz	r3, 800a0a8 <_fflush_r+0x10>
 800a0a2:	2500      	movs	r5, #0
 800a0a4:	4628      	mov	r0, r5
 800a0a6:	bd38      	pop	{r3, r4, r5, pc}
 800a0a8:	b118      	cbz	r0, 800a0b2 <_fflush_r+0x1a>
 800a0aa:	6a03      	ldr	r3, [r0, #32]
 800a0ac:	b90b      	cbnz	r3, 800a0b2 <_fflush_r+0x1a>
 800a0ae:	f7ff fb6b 	bl	8009788 <__sinit>
 800a0b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a0b6:	2b00      	cmp	r3, #0
 800a0b8:	d0f3      	beq.n	800a0a2 <_fflush_r+0xa>
 800a0ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a0bc:	07d0      	lsls	r0, r2, #31
 800a0be:	d404      	bmi.n	800a0ca <_fflush_r+0x32>
 800a0c0:	0599      	lsls	r1, r3, #22
 800a0c2:	d402      	bmi.n	800a0ca <_fflush_r+0x32>
 800a0c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0c6:	f7ff fc48 	bl	800995a <__retarget_lock_acquire_recursive>
 800a0ca:	4628      	mov	r0, r5
 800a0cc:	4621      	mov	r1, r4
 800a0ce:	f7ff ff5f 	bl	8009f90 <__sflush_r>
 800a0d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a0d4:	07da      	lsls	r2, r3, #31
 800a0d6:	4605      	mov	r5, r0
 800a0d8:	d4e4      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0da:	89a3      	ldrh	r3, [r4, #12]
 800a0dc:	059b      	lsls	r3, r3, #22
 800a0de:	d4e1      	bmi.n	800a0a4 <_fflush_r+0xc>
 800a0e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a0e2:	f7ff fc3b 	bl	800995c <__retarget_lock_release_recursive>
 800a0e6:	e7dd      	b.n	800a0a4 <_fflush_r+0xc>

0800a0e8 <__sread>:
 800a0e8:	b510      	push	{r4, lr}
 800a0ea:	460c      	mov	r4, r1
 800a0ec:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a0f0:	f000 f956 	bl	800a3a0 <_read_r>
 800a0f4:	2800      	cmp	r0, #0
 800a0f6:	bfab      	itete	ge
 800a0f8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800a0fa:	89a3      	ldrhlt	r3, [r4, #12]
 800a0fc:	181b      	addge	r3, r3, r0
 800a0fe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800a102:	bfac      	ite	ge
 800a104:	6563      	strge	r3, [r4, #84]	@ 0x54
 800a106:	81a3      	strhlt	r3, [r4, #12]
 800a108:	bd10      	pop	{r4, pc}

0800a10a <__swrite>:
 800a10a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a10e:	461f      	mov	r7, r3
 800a110:	898b      	ldrh	r3, [r1, #12]
 800a112:	05db      	lsls	r3, r3, #23
 800a114:	4605      	mov	r5, r0
 800a116:	460c      	mov	r4, r1
 800a118:	4616      	mov	r6, r2
 800a11a:	d505      	bpl.n	800a128 <__swrite+0x1e>
 800a11c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a120:	2302      	movs	r3, #2
 800a122:	2200      	movs	r2, #0
 800a124:	f000 f92a 	bl	800a37c <_lseek_r>
 800a128:	89a3      	ldrh	r3, [r4, #12]
 800a12a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a12e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800a132:	81a3      	strh	r3, [r4, #12]
 800a134:	4632      	mov	r2, r6
 800a136:	463b      	mov	r3, r7
 800a138:	4628      	mov	r0, r5
 800a13a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a13e:	f000 b941 	b.w	800a3c4 <_write_r>

0800a142 <__sseek>:
 800a142:	b510      	push	{r4, lr}
 800a144:	460c      	mov	r4, r1
 800a146:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a14a:	f000 f917 	bl	800a37c <_lseek_r>
 800a14e:	1c43      	adds	r3, r0, #1
 800a150:	89a3      	ldrh	r3, [r4, #12]
 800a152:	bf15      	itete	ne
 800a154:	6560      	strne	r0, [r4, #84]	@ 0x54
 800a156:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800a15a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800a15e:	81a3      	strheq	r3, [r4, #12]
 800a160:	bf18      	it	ne
 800a162:	81a3      	strhne	r3, [r4, #12]
 800a164:	bd10      	pop	{r4, pc}

0800a166 <__sclose>:
 800a166:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a16a:	f000 b93d 	b.w	800a3e8 <_close_r>

0800a16e <__swbuf_r>:
 800a16e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a170:	460e      	mov	r6, r1
 800a172:	4614      	mov	r4, r2
 800a174:	4605      	mov	r5, r0
 800a176:	b118      	cbz	r0, 800a180 <__swbuf_r+0x12>
 800a178:	6a03      	ldr	r3, [r0, #32]
 800a17a:	b90b      	cbnz	r3, 800a180 <__swbuf_r+0x12>
 800a17c:	f7ff fb04 	bl	8009788 <__sinit>
 800a180:	69a3      	ldr	r3, [r4, #24]
 800a182:	60a3      	str	r3, [r4, #8]
 800a184:	89a3      	ldrh	r3, [r4, #12]
 800a186:	071a      	lsls	r2, r3, #28
 800a188:	d501      	bpl.n	800a18e <__swbuf_r+0x20>
 800a18a:	6923      	ldr	r3, [r4, #16]
 800a18c:	b943      	cbnz	r3, 800a1a0 <__swbuf_r+0x32>
 800a18e:	4621      	mov	r1, r4
 800a190:	4628      	mov	r0, r5
 800a192:	f000 f82b 	bl	800a1ec <__swsetup_r>
 800a196:	b118      	cbz	r0, 800a1a0 <__swbuf_r+0x32>
 800a198:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800a19c:	4638      	mov	r0, r7
 800a19e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800a1a0:	6823      	ldr	r3, [r4, #0]
 800a1a2:	6922      	ldr	r2, [r4, #16]
 800a1a4:	1a98      	subs	r0, r3, r2
 800a1a6:	6963      	ldr	r3, [r4, #20]
 800a1a8:	b2f6      	uxtb	r6, r6
 800a1aa:	4283      	cmp	r3, r0
 800a1ac:	4637      	mov	r7, r6
 800a1ae:	dc05      	bgt.n	800a1bc <__swbuf_r+0x4e>
 800a1b0:	4621      	mov	r1, r4
 800a1b2:	4628      	mov	r0, r5
 800a1b4:	f7ff ff70 	bl	800a098 <_fflush_r>
 800a1b8:	2800      	cmp	r0, #0
 800a1ba:	d1ed      	bne.n	800a198 <__swbuf_r+0x2a>
 800a1bc:	68a3      	ldr	r3, [r4, #8]
 800a1be:	3b01      	subs	r3, #1
 800a1c0:	60a3      	str	r3, [r4, #8]
 800a1c2:	6823      	ldr	r3, [r4, #0]
 800a1c4:	1c5a      	adds	r2, r3, #1
 800a1c6:	6022      	str	r2, [r4, #0]
 800a1c8:	701e      	strb	r6, [r3, #0]
 800a1ca:	6962      	ldr	r2, [r4, #20]
 800a1cc:	1c43      	adds	r3, r0, #1
 800a1ce:	429a      	cmp	r2, r3
 800a1d0:	d004      	beq.n	800a1dc <__swbuf_r+0x6e>
 800a1d2:	89a3      	ldrh	r3, [r4, #12]
 800a1d4:	07db      	lsls	r3, r3, #31
 800a1d6:	d5e1      	bpl.n	800a19c <__swbuf_r+0x2e>
 800a1d8:	2e0a      	cmp	r6, #10
 800a1da:	d1df      	bne.n	800a19c <__swbuf_r+0x2e>
 800a1dc:	4621      	mov	r1, r4
 800a1de:	4628      	mov	r0, r5
 800a1e0:	f7ff ff5a 	bl	800a098 <_fflush_r>
 800a1e4:	2800      	cmp	r0, #0
 800a1e6:	d0d9      	beq.n	800a19c <__swbuf_r+0x2e>
 800a1e8:	e7d6      	b.n	800a198 <__swbuf_r+0x2a>
	...

0800a1ec <__swsetup_r>:
 800a1ec:	b538      	push	{r3, r4, r5, lr}
 800a1ee:	4b29      	ldr	r3, [pc, #164]	@ (800a294 <__swsetup_r+0xa8>)
 800a1f0:	4605      	mov	r5, r0
 800a1f2:	6818      	ldr	r0, [r3, #0]
 800a1f4:	460c      	mov	r4, r1
 800a1f6:	b118      	cbz	r0, 800a200 <__swsetup_r+0x14>
 800a1f8:	6a03      	ldr	r3, [r0, #32]
 800a1fa:	b90b      	cbnz	r3, 800a200 <__swsetup_r+0x14>
 800a1fc:	f7ff fac4 	bl	8009788 <__sinit>
 800a200:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a204:	0719      	lsls	r1, r3, #28
 800a206:	d422      	bmi.n	800a24e <__swsetup_r+0x62>
 800a208:	06da      	lsls	r2, r3, #27
 800a20a:	d407      	bmi.n	800a21c <__swsetup_r+0x30>
 800a20c:	2209      	movs	r2, #9
 800a20e:	602a      	str	r2, [r5, #0]
 800a210:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a214:	81a3      	strh	r3, [r4, #12]
 800a216:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a21a:	e033      	b.n	800a284 <__swsetup_r+0x98>
 800a21c:	0758      	lsls	r0, r3, #29
 800a21e:	d512      	bpl.n	800a246 <__swsetup_r+0x5a>
 800a220:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a222:	b141      	cbz	r1, 800a236 <__swsetup_r+0x4a>
 800a224:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a228:	4299      	cmp	r1, r3
 800a22a:	d002      	beq.n	800a232 <__swsetup_r+0x46>
 800a22c:	4628      	mov	r0, r5
 800a22e:	f7ff fb97 	bl	8009960 <_free_r>
 800a232:	2300      	movs	r3, #0
 800a234:	6363      	str	r3, [r4, #52]	@ 0x34
 800a236:	89a3      	ldrh	r3, [r4, #12]
 800a238:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800a23c:	81a3      	strh	r3, [r4, #12]
 800a23e:	2300      	movs	r3, #0
 800a240:	6063      	str	r3, [r4, #4]
 800a242:	6923      	ldr	r3, [r4, #16]
 800a244:	6023      	str	r3, [r4, #0]
 800a246:	89a3      	ldrh	r3, [r4, #12]
 800a248:	f043 0308 	orr.w	r3, r3, #8
 800a24c:	81a3      	strh	r3, [r4, #12]
 800a24e:	6923      	ldr	r3, [r4, #16]
 800a250:	b94b      	cbnz	r3, 800a266 <__swsetup_r+0x7a>
 800a252:	89a3      	ldrh	r3, [r4, #12]
 800a254:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800a258:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800a25c:	d003      	beq.n	800a266 <__swsetup_r+0x7a>
 800a25e:	4621      	mov	r1, r4
 800a260:	4628      	mov	r0, r5
 800a262:	f000 f83f 	bl	800a2e4 <__smakebuf_r>
 800a266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a26a:	f013 0201 	ands.w	r2, r3, #1
 800a26e:	d00a      	beq.n	800a286 <__swsetup_r+0x9a>
 800a270:	2200      	movs	r2, #0
 800a272:	60a2      	str	r2, [r4, #8]
 800a274:	6962      	ldr	r2, [r4, #20]
 800a276:	4252      	negs	r2, r2
 800a278:	61a2      	str	r2, [r4, #24]
 800a27a:	6922      	ldr	r2, [r4, #16]
 800a27c:	b942      	cbnz	r2, 800a290 <__swsetup_r+0xa4>
 800a27e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800a282:	d1c5      	bne.n	800a210 <__swsetup_r+0x24>
 800a284:	bd38      	pop	{r3, r4, r5, pc}
 800a286:	0799      	lsls	r1, r3, #30
 800a288:	bf58      	it	pl
 800a28a:	6962      	ldrpl	r2, [r4, #20]
 800a28c:	60a2      	str	r2, [r4, #8]
 800a28e:	e7f4      	b.n	800a27a <__swsetup_r+0x8e>
 800a290:	2000      	movs	r0, #0
 800a292:	e7f7      	b.n	800a284 <__swsetup_r+0x98>
 800a294:	24010ca8 	.word	0x24010ca8

0800a298 <__swhatbuf_r>:
 800a298:	b570      	push	{r4, r5, r6, lr}
 800a29a:	460c      	mov	r4, r1
 800a29c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2a0:	2900      	cmp	r1, #0
 800a2a2:	b096      	sub	sp, #88	@ 0x58
 800a2a4:	4615      	mov	r5, r2
 800a2a6:	461e      	mov	r6, r3
 800a2a8:	da0d      	bge.n	800a2c6 <__swhatbuf_r+0x2e>
 800a2aa:	89a3      	ldrh	r3, [r4, #12]
 800a2ac:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a2b0:	f04f 0100 	mov.w	r1, #0
 800a2b4:	bf14      	ite	ne
 800a2b6:	2340      	movne	r3, #64	@ 0x40
 800a2b8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a2bc:	2000      	movs	r0, #0
 800a2be:	6031      	str	r1, [r6, #0]
 800a2c0:	602b      	str	r3, [r5, #0]
 800a2c2:	b016      	add	sp, #88	@ 0x58
 800a2c4:	bd70      	pop	{r4, r5, r6, pc}
 800a2c6:	466a      	mov	r2, sp
 800a2c8:	f000 f89e 	bl	800a408 <_fstat_r>
 800a2cc:	2800      	cmp	r0, #0
 800a2ce:	dbec      	blt.n	800a2aa <__swhatbuf_r+0x12>
 800a2d0:	9901      	ldr	r1, [sp, #4]
 800a2d2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a2d6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a2da:	4259      	negs	r1, r3
 800a2dc:	4159      	adcs	r1, r3
 800a2de:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a2e2:	e7eb      	b.n	800a2bc <__swhatbuf_r+0x24>

0800a2e4 <__smakebuf_r>:
 800a2e4:	898b      	ldrh	r3, [r1, #12]
 800a2e6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a2e8:	079d      	lsls	r5, r3, #30
 800a2ea:	4606      	mov	r6, r0
 800a2ec:	460c      	mov	r4, r1
 800a2ee:	d507      	bpl.n	800a300 <__smakebuf_r+0x1c>
 800a2f0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a2f4:	6023      	str	r3, [r4, #0]
 800a2f6:	6123      	str	r3, [r4, #16]
 800a2f8:	2301      	movs	r3, #1
 800a2fa:	6163      	str	r3, [r4, #20]
 800a2fc:	b003      	add	sp, #12
 800a2fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a300:	ab01      	add	r3, sp, #4
 800a302:	466a      	mov	r2, sp
 800a304:	f7ff ffc8 	bl	800a298 <__swhatbuf_r>
 800a308:	9f00      	ldr	r7, [sp, #0]
 800a30a:	4605      	mov	r5, r0
 800a30c:	4639      	mov	r1, r7
 800a30e:	4630      	mov	r0, r6
 800a310:	f7ff f922 	bl	8009558 <_malloc_r>
 800a314:	b948      	cbnz	r0, 800a32a <__smakebuf_r+0x46>
 800a316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a31a:	059a      	lsls	r2, r3, #22
 800a31c:	d4ee      	bmi.n	800a2fc <__smakebuf_r+0x18>
 800a31e:	f023 0303 	bic.w	r3, r3, #3
 800a322:	f043 0302 	orr.w	r3, r3, #2
 800a326:	81a3      	strh	r3, [r4, #12]
 800a328:	e7e2      	b.n	800a2f0 <__smakebuf_r+0xc>
 800a32a:	89a3      	ldrh	r3, [r4, #12]
 800a32c:	6020      	str	r0, [r4, #0]
 800a32e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a332:	81a3      	strh	r3, [r4, #12]
 800a334:	9b01      	ldr	r3, [sp, #4]
 800a336:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a33a:	b15b      	cbz	r3, 800a354 <__smakebuf_r+0x70>
 800a33c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a340:	4630      	mov	r0, r6
 800a342:	f000 f80b 	bl	800a35c <_isatty_r>
 800a346:	b128      	cbz	r0, 800a354 <__smakebuf_r+0x70>
 800a348:	89a3      	ldrh	r3, [r4, #12]
 800a34a:	f023 0303 	bic.w	r3, r3, #3
 800a34e:	f043 0301 	orr.w	r3, r3, #1
 800a352:	81a3      	strh	r3, [r4, #12]
 800a354:	89a3      	ldrh	r3, [r4, #12]
 800a356:	431d      	orrs	r5, r3
 800a358:	81a5      	strh	r5, [r4, #12]
 800a35a:	e7cf      	b.n	800a2fc <__smakebuf_r+0x18>

0800a35c <_isatty_r>:
 800a35c:	b538      	push	{r3, r4, r5, lr}
 800a35e:	4d06      	ldr	r5, [pc, #24]	@ (800a378 <_isatty_r+0x1c>)
 800a360:	2300      	movs	r3, #0
 800a362:	4604      	mov	r4, r0
 800a364:	4608      	mov	r0, r1
 800a366:	602b      	str	r3, [r5, #0]
 800a368:	f7f6 fd42 	bl	8000df0 <_isatty>
 800a36c:	1c43      	adds	r3, r0, #1
 800a36e:	d102      	bne.n	800a376 <_isatty_r+0x1a>
 800a370:	682b      	ldr	r3, [r5, #0]
 800a372:	b103      	cbz	r3, 800a376 <_isatty_r+0x1a>
 800a374:	6023      	str	r3, [r4, #0]
 800a376:	bd38      	pop	{r3, r4, r5, pc}
 800a378:	240411f8 	.word	0x240411f8

0800a37c <_lseek_r>:
 800a37c:	b538      	push	{r3, r4, r5, lr}
 800a37e:	4d07      	ldr	r5, [pc, #28]	@ (800a39c <_lseek_r+0x20>)
 800a380:	4604      	mov	r4, r0
 800a382:	4608      	mov	r0, r1
 800a384:	4611      	mov	r1, r2
 800a386:	2200      	movs	r2, #0
 800a388:	602a      	str	r2, [r5, #0]
 800a38a:	461a      	mov	r2, r3
 800a38c:	f7f6 fd3b 	bl	8000e06 <_lseek>
 800a390:	1c43      	adds	r3, r0, #1
 800a392:	d102      	bne.n	800a39a <_lseek_r+0x1e>
 800a394:	682b      	ldr	r3, [r5, #0]
 800a396:	b103      	cbz	r3, 800a39a <_lseek_r+0x1e>
 800a398:	6023      	str	r3, [r4, #0]
 800a39a:	bd38      	pop	{r3, r4, r5, pc}
 800a39c:	240411f8 	.word	0x240411f8

0800a3a0 <_read_r>:
 800a3a0:	b538      	push	{r3, r4, r5, lr}
 800a3a2:	4d07      	ldr	r5, [pc, #28]	@ (800a3c0 <_read_r+0x20>)
 800a3a4:	4604      	mov	r4, r0
 800a3a6:	4608      	mov	r0, r1
 800a3a8:	4611      	mov	r1, r2
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	602a      	str	r2, [r5, #0]
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	f7f6 fce5 	bl	8000d7e <_read>
 800a3b4:	1c43      	adds	r3, r0, #1
 800a3b6:	d102      	bne.n	800a3be <_read_r+0x1e>
 800a3b8:	682b      	ldr	r3, [r5, #0]
 800a3ba:	b103      	cbz	r3, 800a3be <_read_r+0x1e>
 800a3bc:	6023      	str	r3, [r4, #0]
 800a3be:	bd38      	pop	{r3, r4, r5, pc}
 800a3c0:	240411f8 	.word	0x240411f8

0800a3c4 <_write_r>:
 800a3c4:	b538      	push	{r3, r4, r5, lr}
 800a3c6:	4d07      	ldr	r5, [pc, #28]	@ (800a3e4 <_write_r+0x20>)
 800a3c8:	4604      	mov	r4, r0
 800a3ca:	4608      	mov	r0, r1
 800a3cc:	4611      	mov	r1, r2
 800a3ce:	2200      	movs	r2, #0
 800a3d0:	602a      	str	r2, [r5, #0]
 800a3d2:	461a      	mov	r2, r3
 800a3d4:	f7fb f8d6 	bl	8005584 <_write>
 800a3d8:	1c43      	adds	r3, r0, #1
 800a3da:	d102      	bne.n	800a3e2 <_write_r+0x1e>
 800a3dc:	682b      	ldr	r3, [r5, #0]
 800a3de:	b103      	cbz	r3, 800a3e2 <_write_r+0x1e>
 800a3e0:	6023      	str	r3, [r4, #0]
 800a3e2:	bd38      	pop	{r3, r4, r5, pc}
 800a3e4:	240411f8 	.word	0x240411f8

0800a3e8 <_close_r>:
 800a3e8:	b538      	push	{r3, r4, r5, lr}
 800a3ea:	4d06      	ldr	r5, [pc, #24]	@ (800a404 <_close_r+0x1c>)
 800a3ec:	2300      	movs	r3, #0
 800a3ee:	4604      	mov	r4, r0
 800a3f0:	4608      	mov	r0, r1
 800a3f2:	602b      	str	r3, [r5, #0]
 800a3f4:	f7f6 fce0 	bl	8000db8 <_close>
 800a3f8:	1c43      	adds	r3, r0, #1
 800a3fa:	d102      	bne.n	800a402 <_close_r+0x1a>
 800a3fc:	682b      	ldr	r3, [r5, #0]
 800a3fe:	b103      	cbz	r3, 800a402 <_close_r+0x1a>
 800a400:	6023      	str	r3, [r4, #0]
 800a402:	bd38      	pop	{r3, r4, r5, pc}
 800a404:	240411f8 	.word	0x240411f8

0800a408 <_fstat_r>:
 800a408:	b538      	push	{r3, r4, r5, lr}
 800a40a:	4d07      	ldr	r5, [pc, #28]	@ (800a428 <_fstat_r+0x20>)
 800a40c:	2300      	movs	r3, #0
 800a40e:	4604      	mov	r4, r0
 800a410:	4608      	mov	r0, r1
 800a412:	4611      	mov	r1, r2
 800a414:	602b      	str	r3, [r5, #0]
 800a416:	f7f6 fcdb 	bl	8000dd0 <_fstat>
 800a41a:	1c43      	adds	r3, r0, #1
 800a41c:	d102      	bne.n	800a424 <_fstat_r+0x1c>
 800a41e:	682b      	ldr	r3, [r5, #0]
 800a420:	b103      	cbz	r3, 800a424 <_fstat_r+0x1c>
 800a422:	6023      	str	r3, [r4, #0]
 800a424:	bd38      	pop	{r3, r4, r5, pc}
 800a426:	bf00      	nop
 800a428:	240411f8 	.word	0x240411f8

0800a42c <_init>:
 800a42c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a42e:	bf00      	nop
 800a430:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a432:	bc08      	pop	{r3}
 800a434:	469e      	mov	lr, r3
 800a436:	4770      	bx	lr

0800a438 <_fini>:
 800a438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a43a:	bf00      	nop
 800a43c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a43e:	bc08      	pop	{r3}
 800a440:	469e      	mov	lr, r3
 800a442:	4770      	bx	lr
