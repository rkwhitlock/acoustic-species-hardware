
decible_meter_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00026254  080002a0  080002a0  000012a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00007ae0  080264f8  080264f8  000274f8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM          00000008  0802dfd8  0802dfd8  0002efd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .init_array   00000004  0802dfe0  0802dfe0  0002efe0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .fini_array   00000004  0802dfe4  0802dfe4  0002efe4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .data         00000ab4  24000000  0802dfe8  0002f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .RAM_D2       00000200  24000ac0  0802ea9c  0002fac0  2**5
                  CONTENTS, ALLOC, LOAD, DATA
  8 .bss          00007eec  24000cc0  0802ec9c  0002fcc0  2**5
                  ALLOC
  9 ._user_heap_stack 00001404  24008bac  0802ec9c  00030bac  2**0
                  ALLOC
 10 .ARM.attributes 0000002e  00000000  00000000  00030200  2**0
                  CONTENTS, READONLY
 11 .RAM_D3       00000200  38000000  38000000  00030000  2**5
                  CONTENTS, ALLOC, LOAD, DATA
 12 .debug_info   000428ab  00000000  00000000  0003022e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000085a4  00000000  00000000  00072ad9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00003770  00000000  00000000  0007b080  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00002a6a  00000000  00000000  0007e7f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00054fd7  00000000  00000000  0008125a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00050265  00000000  00000000  000d6231  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    001f0256  00000000  00000000  00126496  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000c2  00000000  00000000  003166ec  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000f0e8  00000000  00000000  003167b0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000071  00000000  00000000  00325898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	@ (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	@ (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	@ (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000cc0 	.word	0x24000cc0
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080264dc 	.word	0x080264dc

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	@ (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	@ (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	@ (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000cc4 	.word	0x24000cc4
 80002dc:	080264dc 	.word	0x080264dc

080002e0 <memchr>:
 80002e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002e4:	2a10      	cmp	r2, #16
 80002e6:	db2b      	blt.n	8000340 <memchr+0x60>
 80002e8:	f010 0f07 	tst.w	r0, #7
 80002ec:	d008      	beq.n	8000300 <memchr+0x20>
 80002ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002f2:	3a01      	subs	r2, #1
 80002f4:	428b      	cmp	r3, r1
 80002f6:	d02d      	beq.n	8000354 <memchr+0x74>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	b342      	cbz	r2, 8000350 <memchr+0x70>
 80002fe:	d1f6      	bne.n	80002ee <memchr+0xe>
 8000300:	b4f0      	push	{r4, r5, r6, r7}
 8000302:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000306:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800030a:	f022 0407 	bic.w	r4, r2, #7
 800030e:	f07f 0700 	mvns.w	r7, #0
 8000312:	2300      	movs	r3, #0
 8000314:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000318:	3c08      	subs	r4, #8
 800031a:	ea85 0501 	eor.w	r5, r5, r1
 800031e:	ea86 0601 	eor.w	r6, r6, r1
 8000322:	fa85 f547 	uadd8	r5, r5, r7
 8000326:	faa3 f587 	sel	r5, r3, r7
 800032a:	fa86 f647 	uadd8	r6, r6, r7
 800032e:	faa5 f687 	sel	r6, r5, r7
 8000332:	b98e      	cbnz	r6, 8000358 <memchr+0x78>
 8000334:	d1ee      	bne.n	8000314 <memchr+0x34>
 8000336:	bcf0      	pop	{r4, r5, r6, r7}
 8000338:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800033c:	f002 0207 	and.w	r2, r2, #7
 8000340:	b132      	cbz	r2, 8000350 <memchr+0x70>
 8000342:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000346:	3a01      	subs	r2, #1
 8000348:	ea83 0301 	eor.w	r3, r3, r1
 800034c:	b113      	cbz	r3, 8000354 <memchr+0x74>
 800034e:	d1f8      	bne.n	8000342 <memchr+0x62>
 8000350:	2000      	movs	r0, #0
 8000352:	4770      	bx	lr
 8000354:	3801      	subs	r0, #1
 8000356:	4770      	bx	lr
 8000358:	2d00      	cmp	r5, #0
 800035a:	bf06      	itte	eq
 800035c:	4635      	moveq	r5, r6
 800035e:	3803      	subeq	r0, #3
 8000360:	3807      	subne	r0, #7
 8000362:	f015 0f01 	tst.w	r5, #1
 8000366:	d107      	bne.n	8000378 <memchr+0x98>
 8000368:	3001      	adds	r0, #1
 800036a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800036e:	bf02      	ittt	eq
 8000370:	3001      	addeq	r0, #1
 8000372:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000376:	3001      	addeq	r0, #1
 8000378:	bcf0      	pop	{r4, r5, r6, r7}
 800037a:	3801      	subs	r0, #1
 800037c:	4770      	bx	lr
 800037e:	bf00      	nop

08000380 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{    
 8000380:	b480      	push	{r7}
 8000382:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000384:	4b31      	ldr	r3, [pc, #196]	@ (800044c <SystemInit+0xcc>)
 8000386:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800038a:	4a30      	ldr	r2, [pc, #192]	@ (800044c <SystemInit+0xcc>)
 800038c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000390:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
    detectable by the CPU after a WFI/WFE instruction.*/ 
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 8000394:	4b2d      	ldr	r3, [pc, #180]	@ (800044c <SystemInit+0xcc>)
 8000396:	691b      	ldr	r3, [r3, #16]
 8000398:	4a2c      	ldr	r2, [pc, #176]	@ (800044c <SystemInit+0xcc>)
 800039a:	f043 0310 	orr.w	r3, r3, #16
 800039e:	6113      	str	r3, [r2, #16]

#ifdef CORE_CM7 
  /* Reset the RCC clock configuration to the default reset state ------------*/
  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80003a0:	4b2b      	ldr	r3, [pc, #172]	@ (8000450 <SystemInit+0xd0>)
 80003a2:	681b      	ldr	r3, [r3, #0]
 80003a4:	4a2a      	ldr	r2, [pc, #168]	@ (8000450 <SystemInit+0xd0>)
 80003a6:	f043 0301 	orr.w	r3, r3, #1
 80003aa:	6013      	str	r3, [r2, #0]
  
  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80003ac:	4b28      	ldr	r3, [pc, #160]	@ (8000450 <SystemInit+0xd0>)
 80003ae:	2200      	movs	r2, #0
 80003b0:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, CSSON , CSION,RC48ON, CSIKERON PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80003b2:	4b27      	ldr	r3, [pc, #156]	@ (8000450 <SystemInit+0xd0>)
 80003b4:	681a      	ldr	r2, [r3, #0]
 80003b6:	4926      	ldr	r1, [pc, #152]	@ (8000450 <SystemInit+0xd0>)
 80003b8:	4b26      	ldr	r3, [pc, #152]	@ (8000454 <SystemInit+0xd4>)
 80003ba:	4013      	ands	r3, r2
 80003bc:	600b      	str	r3, [r1, #0]

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 80003be:	4b24      	ldr	r3, [pc, #144]	@ (8000450 <SystemInit+0xd0>)
 80003c0:	2200      	movs	r2, #0
 80003c2:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 80003c4:	4b22      	ldr	r3, [pc, #136]	@ (8000450 <SystemInit+0xd0>)
 80003c6:	2200      	movs	r2, #0
 80003c8:	61da      	str	r2, [r3, #28]
  
  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 80003ca:	4b21      	ldr	r3, [pc, #132]	@ (8000450 <SystemInit+0xd0>)
 80003cc:	2200      	movs	r2, #0
 80003ce:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x00000000;
 80003d0:	4b1f      	ldr	r3, [pc, #124]	@ (8000450 <SystemInit+0xd0>)
 80003d2:	2200      	movs	r2, #0
 80003d4:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x00000000;
 80003d6:	4b1e      	ldr	r3, [pc, #120]	@ (8000450 <SystemInit+0xd0>)
 80003d8:	2200      	movs	r2, #0
 80003da:	62da      	str	r2, [r3, #44]	@ 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x00000000;
 80003dc:	4b1c      	ldr	r3, [pc, #112]	@ (8000450 <SystemInit+0xd0>)
 80003de:	2200      	movs	r2, #0
 80003e0:	631a      	str	r2, [r3, #48]	@ 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 80003e2:	4b1b      	ldr	r3, [pc, #108]	@ (8000450 <SystemInit+0xd0>)
 80003e4:	2200      	movs	r2, #0
 80003e6:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x00000000;
 80003e8:	4b19      	ldr	r3, [pc, #100]	@ (8000450 <SystemInit+0xd0>)
 80003ea:	2200      	movs	r2, #0
 80003ec:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Reset PLL2FRACR register */
  
  RCC->PLL2FRACR = 0x00000000;
 80003ee:	4b18      	ldr	r3, [pc, #96]	@ (8000450 <SystemInit+0xd0>)
 80003f0:	2200      	movs	r2, #0
 80003f2:	63da      	str	r2, [r3, #60]	@ 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x00000000;
 80003f4:	4b16      	ldr	r3, [pc, #88]	@ (8000450 <SystemInit+0xd0>)
 80003f6:	2200      	movs	r2, #0
 80003f8:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 80003fa:	4b15      	ldr	r3, [pc, #84]	@ (8000450 <SystemInit+0xd0>)
 80003fc:	2200      	movs	r2, #0
 80003fe:	645a      	str	r2, [r3, #68]	@ 0x44
  
  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000400:	4b13      	ldr	r3, [pc, #76]	@ (8000450 <SystemInit+0xd0>)
 8000402:	681b      	ldr	r3, [r3, #0]
 8000404:	4a12      	ldr	r2, [pc, #72]	@ (8000450 <SystemInit+0xd0>)
 8000406:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800040a:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 800040c:	4b10      	ldr	r3, [pc, #64]	@ (8000450 <SystemInit+0xd0>)
 800040e:	2200      	movs	r2, #0
 8000410:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;  
 8000412:	4b11      	ldr	r3, [pc, #68]	@ (8000458 <SystemInit+0xd8>)
 8000414:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000416:	4a10      	ldr	r2, [pc, #64]	@ (8000458 <SystemInit+0xd8>)
 8000418:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800041c:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 800041e:	4b0f      	ldr	r3, [pc, #60]	@ (800045c <SystemInit+0xdc>)
 8000420:	681a      	ldr	r2, [r3, #0]
 8000422:	4b0f      	ldr	r3, [pc, #60]	@ (8000460 <SystemInit+0xe0>)
 8000424:	4013      	ands	r3, r2
 8000426:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800042a:	d202      	bcs.n	8000432 <SystemInit+0xb2>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x00000001U;
 800042c:	4b0d      	ldr	r3, [pc, #52]	@ (8000464 <SystemInit+0xe4>)
 800042e:	2201      	movs	r2, #1
 8000430:	601a      	str	r2, [r3, #0]
/*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000432:	4b0d      	ldr	r3, [pc, #52]	@ (8000468 <SystemInit+0xe8>)
 8000434:	f243 02d2 	movw	r2, #12498	@ 0x30d2
 8000438:	601a      	str	r2, [r3, #0]

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = D1_AXISRAM_BASE  | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BANK1_BASE | VECT_TAB_OFFSET;       /* Vector Table Relocation in Internal FLASH */
 800043a:	4b04      	ldr	r3, [pc, #16]	@ (800044c <SystemInit+0xcc>)
 800043c:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000440:	609a      	str	r2, [r3, #8]
#else
#error Please #define CORE_CM4 or CORE_CM7
#endif                       
#endif

}
 8000442:	bf00      	nop
 8000444:	46bd      	mov	sp, r7
 8000446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800044a:	4770      	bx	lr
 800044c:	e000ed00 	.word	0xe000ed00
 8000450:	58024400 	.word	0x58024400
 8000454:	eaf6ed7f 	.word	0xeaf6ed7f
 8000458:	580000c0 	.word	0x580000c0
 800045c:	5c001000 	.word	0x5c001000
 8000460:	ffff0000 	.word	0xffff0000
 8000464:	51008108 	.word	0x51008108
 8000468:	52004000 	.word	0x52004000

0800046c <FT6X06_RegisterBusIO>:
  * @brief  Register IO bus to component object
  * @param  Component object pointer
  * @retval error status
  */
int32_t FT6X06_RegisterBusIO (FT6X06_Object_t *pObj, FT6X06_IO_t *pIO)
{
 800046c:	b580      	push	{r7, lr}
 800046e:	b084      	sub	sp, #16
 8000470:	af00      	add	r7, sp, #0
 8000472:	6078      	str	r0, [r7, #4]
 8000474:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 8000476:	687b      	ldr	r3, [r7, #4]
 8000478:	2b00      	cmp	r3, #0
 800047a:	d103      	bne.n	8000484 <FT6X06_RegisterBusIO+0x18>
  {
    ret = FT6X06_ERROR;
 800047c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000480:	60fb      	str	r3, [r7, #12]
 8000482:	e02c      	b.n	80004de <FT6X06_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8000484:	683b      	ldr	r3, [r7, #0]
 8000486:	681a      	ldr	r2, [r3, #0]
 8000488:	687b      	ldr	r3, [r7, #4]
 800048a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 800048c:	683b      	ldr	r3, [r7, #0]
 800048e:	685a      	ldr	r2, [r3, #4]
 8000490:	687b      	ldr	r3, [r7, #4]
 8000492:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8000494:	683b      	ldr	r3, [r7, #0]
 8000496:	891a      	ldrh	r2, [r3, #8]
 8000498:	687b      	ldr	r3, [r7, #4]
 800049a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 800049c:	683b      	ldr	r3, [r7, #0]
 800049e:	68da      	ldr	r2, [r3, #12]
 80004a0:	687b      	ldr	r3, [r7, #4]
 80004a2:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80004a4:	683b      	ldr	r3, [r7, #0]
 80004a6:	691a      	ldr	r2, [r3, #16]
 80004a8:	687b      	ldr	r3, [r7, #4]
 80004aa:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80004ac:	683b      	ldr	r3, [r7, #0]
 80004ae:	695a      	ldr	r2, [r3, #20]
 80004b0:	687b      	ldr	r3, [r7, #4]
 80004b2:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = ReadRegWrap;
 80004b4:	687b      	ldr	r3, [r7, #4]
 80004b6:	4a0c      	ldr	r2, [pc, #48]	@ (80004e8 <FT6X06_RegisterBusIO+0x7c>)
 80004b8:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WriteRegWrap;
 80004ba:	687b      	ldr	r3, [r7, #4]
 80004bc:	4a0b      	ldr	r2, [pc, #44]	@ (80004ec <FT6X06_RegisterBusIO+0x80>)
 80004be:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80004c0:	687b      	ldr	r3, [r7, #4]
 80004c2:	687a      	ldr	r2, [r7, #4]
 80004c4:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 80004c6:	687b      	ldr	r3, [r7, #4]
 80004c8:	681b      	ldr	r3, [r3, #0]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d004      	beq.n	80004d8 <FT6X06_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80004ce:	687b      	ldr	r3, [r7, #4]
 80004d0:	681b      	ldr	r3, [r3, #0]
 80004d2:	4798      	blx	r3
 80004d4:	60f8      	str	r0, [r7, #12]
 80004d6:	e002      	b.n	80004de <FT6X06_RegisterBusIO+0x72>
    }
    else
    {
      ret = FT6X06_ERROR;
 80004d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80004dc:	60fb      	str	r3, [r7, #12]
    }
  }    
  
  return ret;
 80004de:	68fb      	ldr	r3, [r7, #12]
}
 80004e0:	4618      	mov	r0, r3
 80004e2:	3710      	adds	r7, #16
 80004e4:	46bd      	mov	sp, r7
 80004e6:	bd80      	pop	{r7, pc}
 80004e8:	0800087f 	.word	0x0800087f
 80004ec:	080008b3 	.word	0x080008b3

080004f0 <FT6X06_GetCapabilities>:
  * @param  pObj Component object pointer
  * @param  Capabilities pointer to FT6X06 sensor capabilities
  * @retval Component status
  */
int32_t FT6X06_GetCapabilities(FT6X06_Object_t *pObj, FT6X06_Capabilities_t *Capabilities)
{
 80004f0:	b480      	push	{r7}
 80004f2:	b083      	sub	sp, #12
 80004f4:	af00      	add	r7, sp, #0
 80004f6:	6078      	str	r0, [r7, #4]
 80004f8:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Store component's capabilities */
  Capabilities->MultiTouch = 1;
 80004fa:	683b      	ldr	r3, [r7, #0]
 80004fc:	2201      	movs	r2, #1
 80004fe:	701a      	strb	r2, [r3, #0]
  Capabilities->Gesture    = 0;  /* Gesture feature is currently not activated on FW chipset */
 8000500:	683b      	ldr	r3, [r7, #0]
 8000502:	2200      	movs	r2, #0
 8000504:	705a      	strb	r2, [r3, #1]
  Capabilities->MaxTouch   = FT6X06_MAX_NB_TOUCH;
 8000506:	683b      	ldr	r3, [r7, #0]
 8000508:	2202      	movs	r2, #2
 800050a:	709a      	strb	r2, [r3, #2]
  Capabilities->MaxXl      = FT6X06_MAX_X_LENGTH;
 800050c:	683b      	ldr	r3, [r7, #0]
 800050e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8000512:	605a      	str	r2, [r3, #4]
  Capabilities->MaxYl      = FT6X06_MAX_Y_LENGTH;
 8000514:	683b      	ldr	r3, [r7, #0]
 8000516:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 800051a:	609a      	str	r2, [r3, #8]
  
  return FT6X06_OK;
 800051c:	2300      	movs	r3, #0
}
 800051e:	4618      	mov	r0, r3
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr

0800052a <FT6X06_Init>:
  *         from MCU to FT6X06 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_Init(FT6X06_Object_t *pObj)
{
 800052a:	b580      	push	{r7, lr}
 800052c:	b084      	sub	sp, #16
 800052e:	af00      	add	r7, sp, #0
 8000530:	6078      	str	r0, [r7, #4]
  int32_t ret = FT6X06_OK;
 8000532:	2300      	movs	r3, #0
 8000534:	60fb      	str	r3, [r7, #12]
  
  if(pObj->IsInitialized == 0U)
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800053c:	2b00      	cmp	r3, #0
 800053e:	d10d      	bne.n	800055c <FT6X06_Init+0x32>
  {    
    /* Initialize IO BUS layer */
    pObj->IO.Init();
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	681b      	ldr	r3, [r3, #0]
 8000544:	4798      	blx	r3
    /* This is called internal calibration of the touch screen                 */
    ret += FT6X06_TS_Calibration(pObj);
#endif /* (FT6X06_AUTO_CALIBRATION_ENABLED == 1) */    
    /* By default set FT6X06 IC in Polling mode : no INT generation on FT6X06 for new touch available */
    /* Note TS_INT is active low                                                                      */
    ret += FT6X06_DisableIT(pObj);
 8000546:	6878      	ldr	r0, [r7, #4]
 8000548:	f000 f954 	bl	80007f4 <FT6X06_DisableIT>
 800054c:	4602      	mov	r2, r0
 800054e:	68fb      	ldr	r3, [r7, #12]
 8000550:	4413      	add	r3, r2
 8000552:	60fb      	str	r3, [r7, #12]
    
    pObj->IsInitialized = 1;
 8000554:	687b      	ldr	r3, [r7, #4]
 8000556:	2201      	movs	r2, #1
 8000558:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  if(ret != FT6X06_OK)
 800055c:	68fb      	ldr	r3, [r7, #12]
 800055e:	2b00      	cmp	r3, #0
 8000560:	d002      	beq.n	8000568 <FT6X06_Init+0x3e>
  {
    ret = FT6X06_ERROR;
 8000562:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000566:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8000568:	68fb      	ldr	r3, [r7, #12]
}
 800056a:	4618      	mov	r0, r3
 800056c:	3710      	adds	r7, #16
 800056e:	46bd      	mov	sp, r7
 8000570:	bd80      	pop	{r7, pc}

08000572 <FT6X06_DeInit>:
  *         from MCU to FT6X06 : ie I2C channel initialization (if required).
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DeInit(FT6X06_Object_t *pObj)
{
 8000572:	b480      	push	{r7}
 8000574:	b083      	sub	sp, #12
 8000576:	af00      	add	r7, sp, #0
 8000578:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 800057a:	687b      	ldr	r3, [r7, #4]
 800057c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000580:	2b01      	cmp	r3, #1
 8000582:	d103      	bne.n	800058c <FT6X06_DeInit+0x1a>
  {
    pObj->IsInitialized = 0;
 8000584:	687b      	ldr	r3, [r7, #4]
 8000586:	2200      	movs	r2, #0
 8000588:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  return FT6X06_OK;
 800058c:	2300      	movs	r3, #0
}
 800058e:	4618      	mov	r0, r3
 8000590:	370c      	adds	r7, #12
 8000592:	46bd      	mov	sp, r7
 8000594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000598:	4770      	bx	lr

0800059a <FT6X06_GestureConfig>:
  * @param  pObj  Component object pointer
  * @param  GestureInit Gesture init structure
  * @retval Component status
  */
int32_t FT6X06_GestureConfig(FT6X06_Object_t *pObj, FT6X06_Gesture_Init_t *GestureInit)
{
 800059a:	b580      	push	{r7, lr}
 800059c:	b084      	sub	sp, #16
 800059e:	af00      	add	r7, sp, #0
 80005a0:	6078      	str	r0, [r7, #4]
 80005a2:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_radian_value(&pObj->Ctx, (uint8_t)GestureInit->Radian);
 80005a4:	687b      	ldr	r3, [r7, #4]
 80005a6:	f103 0218 	add.w	r2, r3, #24
 80005aa:	683b      	ldr	r3, [r7, #0]
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	b2db      	uxtb	r3, r3
 80005b0:	4619      	mov	r1, r3
 80005b2:	4610      	mov	r0, r2
 80005b4:	f000 f9f4 	bl	80009a0 <ft6x06_radian_value>
 80005b8:	60f8      	str	r0, [r7, #12]
  ret += ft6x06_offset_left_right(&pObj->Ctx, (uint8_t)GestureInit->OffsetLeftRight);
 80005ba:	687b      	ldr	r3, [r7, #4]
 80005bc:	f103 0218 	add.w	r2, r3, #24
 80005c0:	683b      	ldr	r3, [r7, #0]
 80005c2:	685b      	ldr	r3, [r3, #4]
 80005c4:	b2db      	uxtb	r3, r3
 80005c6:	4619      	mov	r1, r3
 80005c8:	4610      	mov	r0, r2
 80005ca:	f000 f9fa 	bl	80009c2 <ft6x06_offset_left_right>
 80005ce:	4602      	mov	r2, r0
 80005d0:	68fb      	ldr	r3, [r7, #12]
 80005d2:	4413      	add	r3, r2
 80005d4:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_offset_up_down(&pObj->Ctx, (uint8_t)GestureInit->OffsetUpDown);
 80005d6:	687b      	ldr	r3, [r7, #4]
 80005d8:	f103 0218 	add.w	r2, r3, #24
 80005dc:	683b      	ldr	r3, [r7, #0]
 80005de:	689b      	ldr	r3, [r3, #8]
 80005e0:	b2db      	uxtb	r3, r3
 80005e2:	4619      	mov	r1, r3
 80005e4:	4610      	mov	r0, r2
 80005e6:	f000 f9fd 	bl	80009e4 <ft6x06_offset_up_down>
 80005ea:	4602      	mov	r2, r0
 80005ec:	68fb      	ldr	r3, [r7, #12]
 80005ee:	4413      	add	r3, r2
 80005f0:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_disatnce_left_right(&pObj->Ctx, (uint8_t)GestureInit->DistanceLeftRight);
 80005f2:	687b      	ldr	r3, [r7, #4]
 80005f4:	f103 0218 	add.w	r2, r3, #24
 80005f8:	683b      	ldr	r3, [r7, #0]
 80005fa:	68db      	ldr	r3, [r3, #12]
 80005fc:	b2db      	uxtb	r3, r3
 80005fe:	4619      	mov	r1, r3
 8000600:	4610      	mov	r0, r2
 8000602:	f000 fa00 	bl	8000a06 <ft6x06_disatnce_left_right>
 8000606:	4602      	mov	r2, r0
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	4413      	add	r3, r2
 800060c:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_distance_up_down(&pObj->Ctx, (uint8_t)GestureInit->DistanceUpDown);
 800060e:	687b      	ldr	r3, [r7, #4]
 8000610:	f103 0218 	add.w	r2, r3, #24
 8000614:	683b      	ldr	r3, [r7, #0]
 8000616:	691b      	ldr	r3, [r3, #16]
 8000618:	b2db      	uxtb	r3, r3
 800061a:	4619      	mov	r1, r3
 800061c:	4610      	mov	r0, r2
 800061e:	f000 fa03 	bl	8000a28 <ft6x06_distance_up_down>
 8000622:	4602      	mov	r2, r0
 8000624:	68fb      	ldr	r3, [r7, #12]
 8000626:	4413      	add	r3, r2
 8000628:	60fb      	str	r3, [r7, #12]
  ret += ft6x06_distance_zoom(&pObj->Ctx, (uint8_t)GestureInit->DistanceZoom);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	f103 0218 	add.w	r2, r3, #24
 8000630:	683b      	ldr	r3, [r7, #0]
 8000632:	695b      	ldr	r3, [r3, #20]
 8000634:	b2db      	uxtb	r3, r3
 8000636:	4619      	mov	r1, r3
 8000638:	4610      	mov	r0, r2
 800063a:	f000 fa06 	bl	8000a4a <ft6x06_distance_zoom>
 800063e:	4602      	mov	r2, r0
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	4413      	add	r3, r2
 8000644:	60fb      	str	r3, [r7, #12]
  
  if(ret != FT6X06_OK)
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	2b00      	cmp	r3, #0
 800064a:	d002      	beq.n	8000652 <FT6X06_GestureConfig+0xb8>
  {
    ret = FT6X06_ERROR;
 800064c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000650:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;   
 8000652:	68fb      	ldr	r3, [r7, #12]
}
 8000654:	4618      	mov	r0, r3
 8000656:	3710      	adds	r7, #16
 8000658:	46bd      	mov	sp, r7
 800065a:	bd80      	pop	{r7, pc}

0800065c <FT6X06_ReadID>:
  * @param  pObj Component object pointer
  * @param  Id Pointer to component's ID
  * @retval Component status
  */
int32_t FT6X06_ReadID(FT6X06_Object_t *pObj, uint32_t *Id)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b084      	sub	sp, #16
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
 8000664:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t ft6x06_id;

  ret = ft6x06_chip_id(&pObj->Ctx, &ft6x06_id);
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	3318      	adds	r3, #24
 800066a:	f107 020b 	add.w	r2, r7, #11
 800066e:	4611      	mov	r1, r2
 8000670:	4618      	mov	r0, r3
 8000672:	f000 fa0c 	bl	8000a8e <ft6x06_chip_id>
 8000676:	60f8      	str	r0, [r7, #12]
  *Id = (uint32_t) ft6x06_id;
 8000678:	7afb      	ldrb	r3, [r7, #11]
 800067a:	461a      	mov	r2, r3
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	601a      	str	r2, [r3, #0]

  return ret;
 8000680:	68fb      	ldr	r3, [r7, #12]
}
 8000682:	4618      	mov	r0, r3
 8000684:	3710      	adds	r7, #16
 8000686:	46bd      	mov	sp, r7
 8000688:	bd80      	pop	{r7, pc}

0800068a <FT6X06_GetState>:
  * @param  pObj Component object pointer
  * @param  State Single Touch structure pointer
  * @retval Component status.
  */
int32_t FT6X06_GetState(FT6X06_Object_t *pObj, FT6X06_State_t *State)
{
 800068a:	b580      	push	{r7, lr}
 800068c:	b084      	sub	sp, #16
 800068e:	af00      	add	r7, sp, #0
 8000690:	6078      	str	r0, [r7, #4]
 8000692:	6039      	str	r1, [r7, #0]
  int32_t ret = FT6X06_OK;
 8000694:	2300      	movs	r3, #0
 8000696:	60fb      	str	r3, [r7, #12]
  uint8_t  data[4];
  
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 8000698:	6878      	ldr	r0, [r7, #4]
 800069a:	f000 f8d0 	bl	800083e <FT6X06_DetectTouch>
 800069e:	4603      	mov	r3, r0
 80006a0:	461a      	mov	r2, r3
 80006a2:	683b      	ldr	r3, [r7, #0]
 80006a4:	601a      	str	r2, [r3, #0]
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 80006a6:	687b      	ldr	r3, [r7, #4]
 80006a8:	f103 0018 	add.w	r0, r3, #24
 80006ac:	f107 0208 	add.w	r2, r7, #8
 80006b0:	2304      	movs	r3, #4
 80006b2:	2103      	movs	r1, #3
 80006b4:	f000 f917 	bl	80008e6 <ft6x06_read_reg>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d003      	beq.n	80006c6 <FT6X06_GetState+0x3c>
  {
    ret = FT6X06_ERROR;
 80006be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006c2:	60fb      	str	r3, [r7, #12]
 80006c4:	e00f      	b.n	80006e6 <FT6X06_GetState+0x5c>
  }
  else
  {
    /* Send back first ready X position to caller */
    State->TouchX = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 80006c6:	7a3b      	ldrb	r3, [r7, #8]
 80006c8:	021b      	lsls	r3, r3, #8
 80006ca:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80006ce:	7a7a      	ldrb	r2, [r7, #9]
 80006d0:	431a      	orrs	r2, r3
 80006d2:	683b      	ldr	r3, [r7, #0]
 80006d4:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 80006d6:	7abb      	ldrb	r3, [r7, #10]
 80006d8:	021b      	lsls	r3, r3, #8
 80006da:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 80006de:	7afa      	ldrb	r2, [r7, #11]
 80006e0:	431a      	orrs	r2, r3
 80006e2:	683b      	ldr	r3, [r7, #0]
 80006e4:	609a      	str	r2, [r3, #8]
  }
  
  return ret;
 80006e6:	68fb      	ldr	r3, [r7, #12]
}
 80006e8:	4618      	mov	r0, r3
 80006ea:	3710      	adds	r7, #16
 80006ec:	46bd      	mov	sp, r7
 80006ee:	bd80      	pop	{r7, pc}

080006f0 <FT6X06_GetMultiTouchState>:
  * @param  pObj Component object pointer
  * @param  State Multi Touch structure pointer
  * @retval Component status.
  */
int32_t FT6X06_GetMultiTouchState(FT6X06_Object_t *pObj, FT6X06_MultiTouch_State_t *State)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b086      	sub	sp, #24
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
 80006f8:	6039      	str	r1, [r7, #0]
  int32_t ret = FT6X06_OK;  
 80006fa:	2300      	movs	r3, #0
 80006fc:	617b      	str	r3, [r7, #20]
  uint8_t  data[12];
  
  State->TouchDetected = (uint32_t)FT6X06_DetectTouch(pObj);
 80006fe:	6878      	ldr	r0, [r7, #4]
 8000700:	f000 f89d 	bl	800083e <FT6X06_DetectTouch>
 8000704:	4603      	mov	r3, r0
 8000706:	461a      	mov	r2, r3
 8000708:	683b      	ldr	r3, [r7, #0]
 800070a:	601a      	str	r2, [r3, #0]
  
  if(ft6x06_read_reg(&pObj->Ctx, FT6X06_P1_XH_REG, data, (uint16_t)sizeof(data)) != FT6X06_OK)
 800070c:	687b      	ldr	r3, [r7, #4]
 800070e:	f103 0018 	add.w	r0, r3, #24
 8000712:	f107 0208 	add.w	r2, r7, #8
 8000716:	230c      	movs	r3, #12
 8000718:	2103      	movs	r1, #3
 800071a:	f000 f8e4 	bl	80008e6 <ft6x06_read_reg>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d003      	beq.n	800072c <FT6X06_GetMultiTouchState+0x3c>
  {
    ret = FT6X06_ERROR;
 8000724:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000728:	617b      	str	r3, [r7, #20]
 800072a:	e03f      	b.n	80007ac <FT6X06_GetMultiTouchState+0xbc>
  }
  else
  {  
    /* Send back first ready X position to caller */
    State->TouchX[0] = (((uint32_t)data[0] & FT6X06_P1_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[1] & FT6X06_P1_XL_TP_BIT_MASK);
 800072c:	7a3b      	ldrb	r3, [r7, #8]
 800072e:	021b      	lsls	r3, r3, #8
 8000730:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000734:	7a7a      	ldrb	r2, [r7, #9]
 8000736:	431a      	orrs	r2, r3
 8000738:	683b      	ldr	r3, [r7, #0]
 800073a:	605a      	str	r2, [r3, #4]
    /* Send back first ready Y position to caller */
    State->TouchY[0] = (((uint32_t)data[2] & FT6X06_P1_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[3] & FT6X06_P1_YL_TP_BIT_MASK);
 800073c:	7abb      	ldrb	r3, [r7, #10]
 800073e:	021b      	lsls	r3, r3, #8
 8000740:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000744:	7afa      	ldrb	r2, [r7, #11]
 8000746:	431a      	orrs	r2, r3
 8000748:	683b      	ldr	r3, [r7, #0]
 800074a:	60da      	str	r2, [r3, #12]
    /* Send back first ready Event to caller */  
    State->TouchEvent[0] = (((uint32_t)data[0] & FT6X06_P1_XH_EF_BIT_MASK) >> FT6X06_P1_XH_EF_BIT_POSITION);
 800074c:	7a3b      	ldrb	r3, [r7, #8]
 800074e:	099b      	lsrs	r3, r3, #6
 8000750:	b2db      	uxtb	r3, r3
 8000752:	461a      	mov	r2, r3
 8000754:	683b      	ldr	r3, [r7, #0]
 8000756:	61da      	str	r2, [r3, #28]
    /* Send back first ready Weight to caller */  
    State->TouchWeight[0] = ((uint32_t)data[4] & FT6X06_P1_WEIGHT_BIT_MASK);
 8000758:	7b3b      	ldrb	r3, [r7, #12]
 800075a:	461a      	mov	r2, r3
 800075c:	683b      	ldr	r3, [r7, #0]
 800075e:	615a      	str	r2, [r3, #20]
    /* Send back first ready Area to caller */  
    State->TouchArea[0] = ((uint32_t)data[5] & FT6X06_P1_MISC_BIT_MASK) >> FT6X06_P1_MISC_BIT_POSITION;
 8000760:	7b7b      	ldrb	r3, [r7, #13]
 8000762:	091b      	lsrs	r3, r3, #4
 8000764:	b2db      	uxtb	r3, r3
 8000766:	461a      	mov	r2, r3
 8000768:	683b      	ldr	r3, [r7, #0]
 800076a:	625a      	str	r2, [r3, #36]	@ 0x24
    
    /* Send back first ready X position to caller */
    State->TouchX[1] = (((uint32_t)data[6] & FT6X06_P2_XH_TP_BIT_MASK) << 8) | ((uint32_t)data[7] & FT6X06_P2_XL_TP_BIT_MASK);
 800076c:	7bbb      	ldrb	r3, [r7, #14]
 800076e:	021b      	lsls	r3, r3, #8
 8000770:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000774:	7bfa      	ldrb	r2, [r7, #15]
 8000776:	431a      	orrs	r2, r3
 8000778:	683b      	ldr	r3, [r7, #0]
 800077a:	609a      	str	r2, [r3, #8]
    /* Send back first ready Y position to caller */
    State->TouchY[1] = (((uint32_t)data[8] & FT6X06_P2_YH_TP_BIT_MASK) << 8) | ((uint32_t)data[9] & FT6X06_P2_YL_TP_BIT_MASK);
 800077c:	7c3b      	ldrb	r3, [r7, #16]
 800077e:	021b      	lsls	r3, r3, #8
 8000780:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8000784:	7c7a      	ldrb	r2, [r7, #17]
 8000786:	431a      	orrs	r2, r3
 8000788:	683b      	ldr	r3, [r7, #0]
 800078a:	611a      	str	r2, [r3, #16]
    /* Send back first ready Event to caller */  
    State->TouchEvent[1] = (((uint32_t)data[6] & FT6X06_P2_XH_EF_BIT_MASK) >> FT6X06_P2_XH_EF_BIT_POSITION);
 800078c:	7bbb      	ldrb	r3, [r7, #14]
 800078e:	099b      	lsrs	r3, r3, #6
 8000790:	b2db      	uxtb	r3, r3
 8000792:	461a      	mov	r2, r3
 8000794:	683b      	ldr	r3, [r7, #0]
 8000796:	621a      	str	r2, [r3, #32]
    /* Send back first ready Weight to caller */  
    State->TouchWeight[1] = ((uint32_t)data[10] & FT6X06_P2_WEIGHT_BIT_MASK);
 8000798:	7cbb      	ldrb	r3, [r7, #18]
 800079a:	461a      	mov	r2, r3
 800079c:	683b      	ldr	r3, [r7, #0]
 800079e:	619a      	str	r2, [r3, #24]
    /* Send back first ready Area to caller */  
    State->TouchArea[1] = ((uint32_t)data[11] & FT6X06_P2_MISC_BIT_MASK) >> FT6X06_P2_MISC_BIT_POSITION;
 80007a0:	7cfb      	ldrb	r3, [r7, #19]
 80007a2:	091b      	lsrs	r3, r3, #4
 80007a4:	b2db      	uxtb	r3, r3
 80007a6:	461a      	mov	r2, r3
 80007a8:	683b      	ldr	r3, [r7, #0]
 80007aa:	629a      	str	r2, [r3, #40]	@ 0x28
  }
  
  return ret;  
 80007ac:	697b      	ldr	r3, [r7, #20]
}
 80007ae:	4618      	mov	r0, r3
 80007b0:	3718      	adds	r7, #24
 80007b2:	46bd      	mov	sp, r7
 80007b4:	bd80      	pop	{r7, pc}

080007b6 <FT6X06_GetGesture>:
  * @param  pObj Component object pointer
  * @param  GestureId gesture ID
  * @retval Component status
  */
int32_t FT6X06_GetGesture(FT6X06_Object_t *pObj, uint8_t *GestureId)
{  
 80007b6:	b580      	push	{r7, lr}
 80007b8:	b082      	sub	sp, #8
 80007ba:	af00      	add	r7, sp, #0
 80007bc:	6078      	str	r0, [r7, #4]
 80007be:	6039      	str	r1, [r7, #0]
  return ft6x06_gest_id(&pObj->Ctx, GestureId);
 80007c0:	687b      	ldr	r3, [r7, #4]
 80007c2:	3318      	adds	r3, #24
 80007c4:	6839      	ldr	r1, [r7, #0]
 80007c6:	4618      	mov	r0, r3
 80007c8:	f000 f8bb 	bl	8000942 <ft6x06_gest_id>
 80007cc:	4603      	mov	r3, r0
}
 80007ce:	4618      	mov	r0, r3
 80007d0:	3708      	adds	r7, #8
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bd80      	pop	{r7, pc}

080007d6 <FT6X06_EnableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_EnableIT(FT6X06_Object_t *pObj)
{
 80007d6:	b580      	push	{r7, lr}
 80007d8:	b082      	sub	sp, #8
 80007da:	af00      	add	r7, sp, #0
 80007dc:	6078      	str	r0, [r7, #4]
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_TRIGGER);
 80007de:	687b      	ldr	r3, [r7, #4]
 80007e0:	3318      	adds	r3, #24
 80007e2:	2101      	movs	r1, #1
 80007e4:	4618      	mov	r0, r3
 80007e6:	f000 f941 	bl	8000a6c <ft6x06_g_mode>
 80007ea:	4603      	mov	r3, r0
}
 80007ec:	4618      	mov	r0, r3
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <FT6X06_DisableIT>:
  *         connected to MCU as EXTI.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_DisableIT(FT6X06_Object_t *pObj)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b082      	sub	sp, #8
 80007f8:	af00      	add	r7, sp, #0
 80007fa:	6078      	str	r0, [r7, #4]
  return ft6x06_g_mode(&pObj->Ctx, FT6X06_G_MODE_INTERRUPT_POLLING);
 80007fc:	687b      	ldr	r3, [r7, #4]
 80007fe:	3318      	adds	r3, #24
 8000800:	2100      	movs	r1, #0
 8000802:	4618      	mov	r0, r3
 8000804:	f000 f932 	bl	8000a6c <ft6x06_g_mode>
 8000808:	4603      	mov	r3, r0
}
 800080a:	4618      	mov	r0, r3
 800080c:	3708      	adds	r7, #8
 800080e:	46bd      	mov	sp, r7
 8000810:	bd80      	pop	{r7, pc}

08000812 <FT6X06_ITStatus>:
  *         @note : This feature is not supported by FT6X06.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_ITStatus(FT6X06_Object_t *pObj)
{
 8000812:	b480      	push	{r7}
 8000814:	b083      	sub	sp, #12
 8000816:	af00      	add	r7, sp, #0
 8000818:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
 800081a:	2300      	movs	r3, #0
}
 800081c:	4618      	mov	r0, r3
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <FT6X06_ClearIT>:
  *         @note : This feature is not supported by FT6X06.
  * @param  pObj Component object pointer
  * @retval Component status
  */
int32_t FT6X06_ClearIT(FT6X06_Object_t *pObj)
{
 8000828:	b480      	push	{r7}
 800082a:	b083      	sub	sp, #12
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  /* Always return FT6X06_OK as feature not supported by FT6X06 */
  return FT6X06_OK;
 8000830:	2300      	movs	r3, #0
}
 8000832:	4618      	mov	r0, r3
 8000834:	370c      	adds	r7, #12
 8000836:	46bd      	mov	sp, r7
 8000838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800083c:	4770      	bx	lr

0800083e <FT6X06_DetectTouch>:
  * @param  pObj Component object pointer
  * @retval Number of active touches detected (can be 0, 1 or 2) or FT6X06_ERROR
  *         in case of error
  */
static int32_t FT6X06_DetectTouch(FT6X06_Object_t *pObj)
{
 800083e:	b580      	push	{r7, lr}
 8000840:	b084      	sub	sp, #16
 8000842:	af00      	add	r7, sp, #0
 8000844:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t nb_touch;
  
  /* Read register FT6X06_TD_STAT_REG to check number of touches detection */
  if(ft6x06_td_status(&pObj->Ctx, &nb_touch) != FT6X06_OK)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	3318      	adds	r3, #24
 800084a:	f107 020b 	add.w	r2, r7, #11
 800084e:	4611      	mov	r1, r2
 8000850:	4618      	mov	r0, r3
 8000852:	f000 f886 	bl	8000962 <ft6x06_td_status>
 8000856:	4603      	mov	r3, r0
 8000858:	2b00      	cmp	r3, #0
 800085a:	d003      	beq.n	8000864 <FT6X06_DetectTouch+0x26>
  {
    ret = FT6X06_ERROR;
 800085c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000860:	60fb      	str	r3, [r7, #12]
 8000862:	e007      	b.n	8000874 <FT6X06_DetectTouch+0x36>
  }
  else
  {
    if(nb_touch > FT6X06_MAX_NB_TOUCH)
 8000864:	7afb      	ldrb	r3, [r7, #11]
 8000866:	2b02      	cmp	r3, #2
 8000868:	d902      	bls.n	8000870 <FT6X06_DetectTouch+0x32>
    {
      /* If invalid number of touch detected, set it to zero */
      ret = 0;
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	e001      	b.n	8000874 <FT6X06_DetectTouch+0x36>
    }
    else
    {
      ret = (int32_t)nb_touch;
 8000870:	7afb      	ldrb	r3, [r7, #11]
 8000872:	60fb      	str	r3, [r7, #12]
    }
  }
  return ret;
 8000874:	68fb      	ldr	r3, [r7, #12]
}
 8000876:	4618      	mov	r0, r3
 8000878:	3710      	adds	r7, #16
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}

0800087e <ReadRegWrap>:
  * @param  pData The target register value to be read
  * @param  Length buffer size to be read
  * @retval Component status.
  */
static int32_t ReadRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 800087e:	b590      	push	{r4, r7, lr}
 8000880:	b087      	sub	sp, #28
 8000882:	af00      	add	r7, sp, #0
 8000884:	60f8      	str	r0, [r7, #12]
 8000886:	607a      	str	r2, [r7, #4]
 8000888:	461a      	mov	r2, r3
 800088a:	460b      	mov	r3, r1
 800088c:	72fb      	strb	r3, [r7, #11]
 800088e:	4613      	mov	r3, r2
 8000890:	813b      	strh	r3, [r7, #8]
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;
 8000892:	68fb      	ldr	r3, [r7, #12]
 8000894:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8000896:	697b      	ldr	r3, [r7, #20]
 8000898:	691c      	ldr	r4, [r3, #16]
 800089a:	697b      	ldr	r3, [r7, #20]
 800089c:	8918      	ldrh	r0, [r3, #8]
 800089e:	7afb      	ldrb	r3, [r7, #11]
 80008a0:	b299      	uxth	r1, r3
 80008a2:	893b      	ldrh	r3, [r7, #8]
 80008a4:	687a      	ldr	r2, [r7, #4]
 80008a6:	47a0      	blx	r4
 80008a8:	4603      	mov	r3, r0
}
 80008aa:	4618      	mov	r0, r3
 80008ac:	371c      	adds	r7, #28
 80008ae:	46bd      	mov	sp, r7
 80008b0:	bd90      	pop	{r4, r7, pc}

080008b2 <WriteRegWrap>:
  * @param  pData The target register value to be written
  * @param  Length buffer size to be written
  * @retval Component status.
  */
static int32_t WriteRegWrap(void *handle, uint8_t Reg, uint8_t* pData, uint16_t Length)
{
 80008b2:	b590      	push	{r4, r7, lr}
 80008b4:	b087      	sub	sp, #28
 80008b6:	af00      	add	r7, sp, #0
 80008b8:	60f8      	str	r0, [r7, #12]
 80008ba:	607a      	str	r2, [r7, #4]
 80008bc:	461a      	mov	r2, r3
 80008be:	460b      	mov	r3, r1
 80008c0:	72fb      	strb	r3, [r7, #11]
 80008c2:	4613      	mov	r3, r2
 80008c4:	813b      	strh	r3, [r7, #8]
  FT6X06_Object_t *pObj = (FT6X06_Object_t *)handle;
 80008c6:	68fb      	ldr	r3, [r7, #12]
 80008c8:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80008ca:	697b      	ldr	r3, [r7, #20]
 80008cc:	68dc      	ldr	r4, [r3, #12]
 80008ce:	697b      	ldr	r3, [r7, #20]
 80008d0:	8918      	ldrh	r0, [r3, #8]
 80008d2:	7afb      	ldrb	r3, [r7, #11]
 80008d4:	b299      	uxth	r1, r3
 80008d6:	893b      	ldrh	r3, [r7, #8]
 80008d8:	687a      	ldr	r2, [r7, #4]
 80008da:	47a0      	blx	r4
 80008dc:	4603      	mov	r3, r0
}
 80008de:	4618      	mov	r0, r3
 80008e0:	371c      	adds	r7, #28
 80008e2:	46bd      	mov	sp, r7
 80008e4:	bd90      	pop	{r4, r7, pc}

080008e6 <ft6x06_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : pdata Read
*******************************************************************************/
int32_t ft6x06_read_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t* pdata, uint16_t length)
{
 80008e6:	b590      	push	{r4, r7, lr}
 80008e8:	b085      	sub	sp, #20
 80008ea:	af00      	add	r7, sp, #0
 80008ec:	60f8      	str	r0, [r7, #12]
 80008ee:	607a      	str	r2, [r7, #4]
 80008f0:	461a      	mov	r2, r3
 80008f2:	460b      	mov	r3, r1
 80008f4:	72fb      	strb	r3, [r7, #11]
 80008f6:	4613      	mov	r3, r2
 80008f8:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 80008fa:	68fb      	ldr	r3, [r7, #12]
 80008fc:	685c      	ldr	r4, [r3, #4]
 80008fe:	68fb      	ldr	r3, [r7, #12]
 8000900:	6898      	ldr	r0, [r3, #8]
 8000902:	893b      	ldrh	r3, [r7, #8]
 8000904:	7af9      	ldrb	r1, [r7, #11]
 8000906:	687a      	ldr	r2, [r7, #4]
 8000908:	47a0      	blx	r4
 800090a:	4603      	mov	r3, r0
}
 800090c:	4618      	mov	r0, r3
 800090e:	3714      	adds	r7, #20
 8000910:	46bd      	mov	sp, r7
 8000912:	bd90      	pop	{r4, r7, pc}

08000914 <ft6x06_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, pdata to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ft6x06_write_reg(ft6x06_ctx_t *ctx, uint8_t reg, uint8_t *pdata, uint16_t length)
{
 8000914:	b590      	push	{r4, r7, lr}
 8000916:	b085      	sub	sp, #20
 8000918:	af00      	add	r7, sp, #0
 800091a:	60f8      	str	r0, [r7, #12]
 800091c:	607a      	str	r2, [r7, #4]
 800091e:	461a      	mov	r2, r3
 8000920:	460b      	mov	r3, r1
 8000922:	72fb      	strb	r3, [r7, #11]
 8000924:	4613      	mov	r3, r2
 8000926:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, pdata, length);
 8000928:	68fb      	ldr	r3, [r7, #12]
 800092a:	681c      	ldr	r4, [r3, #0]
 800092c:	68fb      	ldr	r3, [r7, #12]
 800092e:	6898      	ldr	r0, [r3, #8]
 8000930:	893b      	ldrh	r3, [r7, #8]
 8000932:	7af9      	ldrb	r1, [r7, #11]
 8000934:	687a      	ldr	r2, [r7, #4]
 8000936:	47a0      	blx	r4
 8000938:	4603      	mov	r3, r0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	bd90      	pop	{r4, r7, pc}

08000942 <ft6x06_gest_id>:
* Input          : Pointer to uint8_t
* Output         : Status of GEST_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_gest_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8000942:	b580      	push	{r7, lr}
 8000944:	b082      	sub	sp, #8
 8000946:	af00      	add	r7, sp, #0
 8000948:	6078      	str	r0, [r7, #4]
 800094a:	6039      	str	r1, [r7, #0]
  return ft6x06_read_reg(ctx, FT6X06_GEST_ID_REG, (uint8_t *)value, 1);
 800094c:	2301      	movs	r3, #1
 800094e:	683a      	ldr	r2, [r7, #0]
 8000950:	2101      	movs	r1, #1
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff ffc7 	bl	80008e6 <ft6x06_read_reg>
 8000958:	4603      	mov	r3, r0
}
 800095a:	4618      	mov	r0, r3
 800095c:	3708      	adds	r7, #8
 800095e:	46bd      	mov	sp, r7
 8000960:	bd80      	pop	{r7, pc}

08000962 <ft6x06_td_status>:
* Input          : Pointer to uint8_t
* Output         : Status of TD_STATUS register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_td_status(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8000962:	b580      	push	{r7, lr}
 8000964:	b084      	sub	sp, #16
 8000966:	af00      	add	r7, sp, #0
 8000968:	6078      	str	r0, [r7, #4]
 800096a:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_TD_STAT_REG, (uint8_t *)value, 1);
 800096c:	2301      	movs	r3, #1
 800096e:	683a      	ldr	r2, [r7, #0]
 8000970:	2102      	movs	r1, #2
 8000972:	6878      	ldr	r0, [r7, #4]
 8000974:	f7ff ffb7 	bl	80008e6 <ft6x06_read_reg>
 8000978:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 800097a:	68fb      	ldr	r3, [r7, #12]
 800097c:	2b00      	cmp	r3, #0
 800097e:	d10a      	bne.n	8000996 <ft6x06_td_status+0x34>
  {
    *value &= FT6X06_TD_STATUS_BIT_MASK; 
 8000980:	683b      	ldr	r3, [r7, #0]
 8000982:	781b      	ldrb	r3, [r3, #0]
 8000984:	f003 030f 	and.w	r3, r3, #15
 8000988:	b2da      	uxtb	r2, r3
 800098a:	683b      	ldr	r3, [r7, #0]
 800098c:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT6X06_TD_STATUS_BIT_POSITION; 
 800098e:	683b      	ldr	r3, [r7, #0]
 8000990:	781a      	ldrb	r2, [r3, #0]
 8000992:	683b      	ldr	r3, [r7, #0]
 8000994:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000996:	68fb      	ldr	r3, [r7, #12]
}
 8000998:	4618      	mov	r0, r3
 800099a:	3710      	adds	r7, #16
 800099c:	46bd      	mov	sp, r7
 800099e:	bd80      	pop	{r7, pc}

080009a0 <ft6x06_radian_value>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_radian_value(ft6x06_ctx_t *ctx, uint8_t value)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0
 80009a6:	6078      	str	r0, [r7, #4]
 80009a8:	460b      	mov	r3, r1
 80009aa:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_RADIAN_VALUE_REG, &value, 1);
 80009ac:	1cfa      	adds	r2, r7, #3
 80009ae:	2301      	movs	r3, #1
 80009b0:	2191      	movs	r1, #145	@ 0x91
 80009b2:	6878      	ldr	r0, [r7, #4]
 80009b4:	f7ff ffae 	bl	8000914 <ft6x06_write_reg>
 80009b8:	4603      	mov	r3, r0
}
 80009ba:	4618      	mov	r0, r3
 80009bc:	3708      	adds	r7, #8
 80009be:	46bd      	mov	sp, r7
 80009c0:	bd80      	pop	{r7, pc}

080009c2 <ft6x06_offset_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 80009c2:	b580      	push	{r7, lr}
 80009c4:	b082      	sub	sp, #8
 80009c6:	af00      	add	r7, sp, #0
 80009c8:	6078      	str	r0, [r7, #4]
 80009ca:	460b      	mov	r3, r1
 80009cc:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_LR_REG, &value, 1);
 80009ce:	1cfa      	adds	r2, r7, #3
 80009d0:	2301      	movs	r3, #1
 80009d2:	2192      	movs	r1, #146	@ 0x92
 80009d4:	6878      	ldr	r0, [r7, #4]
 80009d6:	f7ff ff9d 	bl	8000914 <ft6x06_write_reg>
 80009da:	4603      	mov	r3, r0
}
 80009dc:	4618      	mov	r0, r3
 80009de:	3708      	adds	r7, #8
 80009e0:	46bd      	mov	sp, r7
 80009e2:	bd80      	pop	{r7, pc}

080009e4 <ft6x06_offset_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_offset_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
 80009ea:	6078      	str	r0, [r7, #4]
 80009ec:	460b      	mov	r3, r1
 80009ee:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_OFFSET_UD_REG, &value, 1);
 80009f0:	1cfa      	adds	r2, r7, #3
 80009f2:	2301      	movs	r3, #1
 80009f4:	2193      	movs	r1, #147	@ 0x93
 80009f6:	6878      	ldr	r0, [r7, #4]
 80009f8:	f7ff ff8c 	bl	8000914 <ft6x06_write_reg>
 80009fc:	4603      	mov	r3, r0
}
 80009fe:	4618      	mov	r0, r3
 8000a00:	3708      	adds	r7, #8
 8000a02:	46bd      	mov	sp, r7
 8000a04:	bd80      	pop	{r7, pc}

08000a06 <ft6x06_disatnce_left_right>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_disatnce_left_right(ft6x06_ctx_t *ctx, uint8_t value)
{
 8000a06:	b580      	push	{r7, lr}
 8000a08:	b082      	sub	sp, #8
 8000a0a:	af00      	add	r7, sp, #0
 8000a0c:	6078      	str	r0, [r7, #4]
 8000a0e:	460b      	mov	r3, r1
 8000a10:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_LR_REG, &value, 1);
 8000a12:	1cfa      	adds	r2, r7, #3
 8000a14:	2301      	movs	r3, #1
 8000a16:	2194      	movs	r1, #148	@ 0x94
 8000a18:	6878      	ldr	r0, [r7, #4]
 8000a1a:	f7ff ff7b 	bl	8000914 <ft6x06_write_reg>
 8000a1e:	4603      	mov	r3, r0
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3708      	adds	r7, #8
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}

08000a28 <ft6x06_distance_up_down>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_up_down(ft6x06_ctx_t *ctx, uint8_t value)
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	460b      	mov	r3, r1
 8000a32:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_UD_REG, &value, 1);
 8000a34:	1cfa      	adds	r2, r7, #3
 8000a36:	2301      	movs	r3, #1
 8000a38:	2195      	movs	r1, #149	@ 0x95
 8000a3a:	6878      	ldr	r0, [r7, #4]
 8000a3c:	f7ff ff6a 	bl	8000914 <ft6x06_write_reg>
 8000a40:	4603      	mov	r3, r0
}
 8000a42:	4618      	mov	r0, r3
 8000a44:	3708      	adds	r7, #8
 8000a46:	46bd      	mov	sp, r7
 8000a48:	bd80      	pop	{r7, pc}

08000a4a <ft6x06_distance_zoom>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_distance_zoom(ft6x06_ctx_t *ctx, uint8_t value)
{
 8000a4a:	b580      	push	{r7, lr}
 8000a4c:	b082      	sub	sp, #8
 8000a4e:	af00      	add	r7, sp, #0
 8000a50:	6078      	str	r0, [r7, #4]
 8000a52:	460b      	mov	r3, r1
 8000a54:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_DISTANCE_ZOOM_REG, &value, 1);
 8000a56:	1cfa      	adds	r2, r7, #3
 8000a58:	2301      	movs	r3, #1
 8000a5a:	2196      	movs	r1, #150	@ 0x96
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f7ff ff59 	bl	8000914 <ft6x06_write_reg>
 8000a62:	4603      	mov	r3, r0
}
 8000a64:	4618      	mov	r0, r3
 8000a66:	3708      	adds	r7, #8
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}

08000a6c <ft6x06_g_mode>:
* Input          : uint8_t
* Output         : None
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_g_mode(ft6x06_ctx_t *ctx, uint8_t value)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b082      	sub	sp, #8
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
 8000a74:	460b      	mov	r3, r1
 8000a76:	70fb      	strb	r3, [r7, #3]
  return ft6x06_write_reg(ctx, FT6X06_GMODE_REG, &value, 1);
 8000a78:	1cfa      	adds	r2, r7, #3
 8000a7a:	2301      	movs	r3, #1
 8000a7c:	21a4      	movs	r1, #164	@ 0xa4
 8000a7e:	6878      	ldr	r0, [r7, #4]
 8000a80:	f7ff ff48 	bl	8000914 <ft6x06_write_reg>
 8000a84:	4603      	mov	r3, r0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3708      	adds	r7, #8
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <ft6x06_chip_id>:
* Input          : Pointer to uint8_t
* Output         : Status of FT6X06_CHIP_ID register
* Return         : Status [FT6X06_ERROR, FT6X06_OK]
*******************************************************************************/
int32_t  ft6x06_chip_id(ft6x06_ctx_t *ctx, uint8_t *value)
{
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	6078      	str	r0, [r7, #4]
 8000a96:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = ft6x06_read_reg(ctx, FT6X06_CHIP_ID_REG, (uint8_t *)value, 1);
 8000a98:	2301      	movs	r3, #1
 8000a9a:	683a      	ldr	r2, [r7, #0]
 8000a9c:	21a8      	movs	r1, #168	@ 0xa8
 8000a9e:	6878      	ldr	r0, [r7, #4]
 8000aa0:	f7ff ff21 	bl	80008e6 <ft6x06_read_reg>
 8000aa4:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 8000aa6:	68fb      	ldr	r3, [r7, #12]
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d107      	bne.n	8000abc <ft6x06_chip_id+0x2e>
  {
    *value &= FT6X06_CHIP_ID_BIT_MASK; 
 8000aac:	683b      	ldr	r3, [r7, #0]
 8000aae:	781a      	ldrb	r2, [r3, #0]
 8000ab0:	683b      	ldr	r3, [r7, #0]
 8000ab2:	701a      	strb	r2, [r3, #0]
    *value = *value >> FT6X06_CHIP_ID_BIT_POSITION; 
 8000ab4:	683b      	ldr	r3, [r7, #0]
 8000ab6:	781a      	ldrb	r2, [r3, #0]
 8000ab8:	683b      	ldr	r3, [r7, #0]
 8000aba:	701a      	strb	r2, [r3, #0]
  }
  
  return ret;
 8000abc:	68fb      	ldr	r3, [r7, #12]
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3710      	adds	r7, #16
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}

08000ac6 <IS42S32800J_Init>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_Init(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000ac6:	b580      	push	{r7, lr}
 8000ac8:	b084      	sub	sp, #16
 8000aca:	af00      	add	r7, sp, #0
 8000acc:	6078      	str	r0, [r7, #4]
 8000ace:	6039      	str	r1, [r7, #0]
  int32_t ret = IS42S32800J_ERROR;
 8000ad0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ad4:	60fb      	str	r3, [r7, #12]
  
  /* Step 1: Configure a clock configuration enable command */
  if(IS42S32800J_ClockEnable(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000ad6:	683b      	ldr	r3, [r7, #0]
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	4619      	mov	r1, r3
 8000adc:	6878      	ldr	r0, [r7, #4]
 8000ade:	f000 f831 	bl	8000b44 <IS42S32800J_ClockEnable>
 8000ae2:	4603      	mov	r3, r0
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d128      	bne.n	8000b3a <IS42S32800J_Init+0x74>
  {
    /* Step 2: Insert 100 us minimum delay */ 
    /* Inserted delay is equal to 1 ms due to systick time base unit (ms) */
    (void)IS42S32800J_Delay(1);
 8000ae8:	2001      	movs	r0, #1
 8000aea:	f000 f8e1 	bl	8000cb0 <IS42S32800J_Delay>
    
    /* Step 3: Configure a PALL (precharge all) command */ 
    if(IS42S32800J_Precharge(Ctx, pRegMode->TargetBank) == IS42S32800J_OK)
 8000aee:	683b      	ldr	r3, [r7, #0]
 8000af0:	681b      	ldr	r3, [r3, #0]
 8000af2:	4619      	mov	r1, r3
 8000af4:	6878      	ldr	r0, [r7, #4]
 8000af6:	f000 f849 	bl	8000b8c <IS42S32800J_Precharge>
 8000afa:	4603      	mov	r3, r0
 8000afc:	2b00      	cmp	r3, #0
 8000afe:	d11c      	bne.n	8000b3a <IS42S32800J_Init+0x74>
    {
      /* Step 4: Configure a Refresh command */ 
      if(IS42S32800J_RefreshMode(Ctx, pRegMode->TargetBank, pRegMode->RefreshMode) == IS42S32800J_OK)
 8000b00:	683b      	ldr	r3, [r7, #0]
 8000b02:	6819      	ldr	r1, [r3, #0]
 8000b04:	683b      	ldr	r3, [r7, #0]
 8000b06:	685b      	ldr	r3, [r3, #4]
 8000b08:	461a      	mov	r2, r3
 8000b0a:	6878      	ldr	r0, [r7, #4]
 8000b0c:	f000 f896 	bl	8000c3c <IS42S32800J_RefreshMode>
 8000b10:	4603      	mov	r3, r0
 8000b12:	2b00      	cmp	r3, #0
 8000b14:	d111      	bne.n	8000b3a <IS42S32800J_Init+0x74>
      {
        /* Step 5: Program the external memory mode register */
        if(IS42S32800J_ModeRegConfig(Ctx, pRegMode) == IS42S32800J_OK)
 8000b16:	6839      	ldr	r1, [r7, #0]
 8000b18:	6878      	ldr	r0, [r7, #4]
 8000b1a:	f000 f85b 	bl	8000bd4 <IS42S32800J_ModeRegConfig>
 8000b1e:	4603      	mov	r3, r0
 8000b20:	2b00      	cmp	r3, #0
 8000b22:	d10a      	bne.n	8000b3a <IS42S32800J_Init+0x74>
        {
          /* Step 6: Set the refresh rate counter */
          if(IS42S32800J_RefreshRate(Ctx, pRegMode->RefreshRate) == IS42S32800J_OK)
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	689b      	ldr	r3, [r3, #8]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	6878      	ldr	r0, [r7, #4]
 8000b2c:	f000 f8ac 	bl	8000c88 <IS42S32800J_RefreshRate>
 8000b30:	4603      	mov	r3, r0
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d101      	bne.n	8000b3a <IS42S32800J_Init+0x74>
          {
            ret = IS42S32800J_OK;
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
          }
        }
      }
    }
  } 
  return ret;
 8000b3a:	68fb      	ldr	r3, [r7, #12]
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	3710      	adds	r7, #16
 8000b40:	46bd      	mov	sp, r7
 8000b42:	bd80      	pop	{r7, pc}

08000b44 <IS42S32800J_ClockEnable>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_ClockEnable(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
 8000b4c:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_CLK_ENABLE_CMD;
 8000b4e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b88 <IS42S32800J_ClockEnable+0x44>)
 8000b50:	2201      	movs	r2, #1
 8000b52:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000b54:	4a0c      	ldr	r2, [pc, #48]	@ (8000b88 <IS42S32800J_ClockEnable+0x44>)
 8000b56:	683b      	ldr	r3, [r7, #0]
 8000b58:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000b5a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b88 <IS42S32800J_ClockEnable+0x44>)
 8000b5c:	2201      	movs	r2, #1
 8000b5e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000b60:	4b09      	ldr	r3, [pc, #36]	@ (8000b88 <IS42S32800J_ClockEnable+0x44>)
 8000b62:	2200      	movs	r2, #0
 8000b64:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000b66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000b6a:	4907      	ldr	r1, [pc, #28]	@ (8000b88 <IS42S32800J_ClockEnable+0x44>)
 8000b6c:	6878      	ldr	r0, [r7, #4]
 8000b6e:	f020 fce9 	bl	8021544 <HAL_SDRAM_SendCommand>
 8000b72:	4603      	mov	r3, r0
 8000b74:	2b00      	cmp	r3, #0
 8000b76:	d002      	beq.n	8000b7e <IS42S32800J_ClockEnable+0x3a>
  {
    return IS42S32800J_ERROR;
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b7c:	e000      	b.n	8000b80 <IS42S32800J_ClockEnable+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000b7e:	2300      	movs	r3, #0
  }
}
 8000b80:	4618      	mov	r0, r3
 8000b82:	3708      	adds	r7, #8
 8000b84:	46bd      	mov	sp, r7
 8000b86:	bd80      	pop	{r7, pc}
 8000b88:	24000ce0 	.word	0x24000ce0

08000b8c <IS42S32800J_Precharge>:
  * @param  Ctx Component object pointer
  * @param  Interface Could be FMC_SDRAM_CMD_TARGET_BANK1 or FMC_SDRAM_CMD_TARGET_BANK2
  * @retval error status
  */
int32_t IS42S32800J_Precharge(SDRAM_HandleTypeDef *Ctx, uint32_t Interface) 
{
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
 8000b94:	6039      	str	r1, [r7, #0]
  Command.CommandMode            = IS42S32800J_PALL_CMD;
 8000b96:	4b0e      	ldr	r3, [pc, #56]	@ (8000bd0 <IS42S32800J_Precharge+0x44>)
 8000b98:	2202      	movs	r2, #2
 8000b9a:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = Interface;
 8000b9c:	4a0c      	ldr	r2, [pc, #48]	@ (8000bd0 <IS42S32800J_Precharge+0x44>)
 8000b9e:	683b      	ldr	r3, [r7, #0]
 8000ba0:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000ba2:	4b0b      	ldr	r3, [pc, #44]	@ (8000bd0 <IS42S32800J_Precharge+0x44>)
 8000ba4:	2201      	movs	r2, #1
 8000ba6:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000ba8:	4b09      	ldr	r3, [pc, #36]	@ (8000bd0 <IS42S32800J_Precharge+0x44>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000bae:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000bb2:	4907      	ldr	r1, [pc, #28]	@ (8000bd0 <IS42S32800J_Precharge+0x44>)
 8000bb4:	6878      	ldr	r0, [r7, #4]
 8000bb6:	f020 fcc5 	bl	8021544 <HAL_SDRAM_SendCommand>
 8000bba:	4603      	mov	r3, r0
 8000bbc:	2b00      	cmp	r3, #0
 8000bbe:	d002      	beq.n	8000bc6 <IS42S32800J_Precharge+0x3a>
  {
    return IS42S32800J_ERROR;
 8000bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000bc4:	e000      	b.n	8000bc8 <IS42S32800J_Precharge+0x3c>
  }
  else
  {
    return IS42S32800J_OK;
 8000bc6:	2300      	movs	r3, #0
  }
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}
 8000bd0:	24000ce0 	.word	0x24000ce0

08000bd4 <IS42S32800J_ModeRegConfig>:
  * @param  Ctx Component object pointer
  * @param  pRegMode : Pointer to Register Mode structure
  * @retval error status
  */
int32_t IS42S32800J_ModeRegConfig(SDRAM_HandleTypeDef *Ctx, IS42S32800J_Context_t *pRegMode) 
{
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b084      	sub	sp, #16
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpmrd;

  /* Program the external memory mode register */
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000bde:	683b      	ldr	r3, [r7, #0]
 8000be0:	68da      	ldr	r2, [r3, #12]
                     pRegMode->BurstType     |\
 8000be2:	683b      	ldr	r3, [r7, #0]
 8000be4:	691b      	ldr	r3, [r3, #16]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000be6:	431a      	orrs	r2, r3
                     pRegMode->CASLatency    |\
 8000be8:	683b      	ldr	r3, [r7, #0]
 8000bea:	695b      	ldr	r3, [r3, #20]
                     pRegMode->BurstType     |\
 8000bec:	431a      	orrs	r2, r3
                     pRegMode->OperationMode |\
 8000bee:	683b      	ldr	r3, [r7, #0]
 8000bf0:	699b      	ldr	r3, [r3, #24]
                     pRegMode->CASLatency    |\
 8000bf2:	431a      	orrs	r2, r3
                     pRegMode->WriteBurstMode;
 8000bf4:	683b      	ldr	r3, [r7, #0]
 8000bf6:	69db      	ldr	r3, [r3, #28]
  tmpmrd = (uint32_t)pRegMode->BurstLength   |\
 8000bf8:	4313      	orrs	r3, r2
 8000bfa:	60fb      	str	r3, [r7, #12]
  
  Command.CommandMode            = IS42S32800J_LOAD_MODE_CMD;
 8000bfc:	4b0e      	ldr	r3, [pc, #56]	@ (8000c38 <IS42S32800J_ModeRegConfig+0x64>)
 8000bfe:	2204      	movs	r2, #4
 8000c00:	601a      	str	r2, [r3, #0]
  Command.CommandTarget          = pRegMode->TargetBank;
 8000c02:	683b      	ldr	r3, [r7, #0]
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	4a0c      	ldr	r2, [pc, #48]	@ (8000c38 <IS42S32800J_ModeRegConfig+0x64>)
 8000c08:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 1;
 8000c0a:	4b0b      	ldr	r3, [pc, #44]	@ (8000c38 <IS42S32800J_ModeRegConfig+0x64>)
 8000c0c:	2201      	movs	r2, #1
 8000c0e:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = tmpmrd;
 8000c10:	4a09      	ldr	r2, [pc, #36]	@ (8000c38 <IS42S32800J_ModeRegConfig+0x64>)
 8000c12:	68fb      	ldr	r3, [r7, #12]
 8000c14:	60d3      	str	r3, [r2, #12]
  
  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000c16:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c1a:	4907      	ldr	r1, [pc, #28]	@ (8000c38 <IS42S32800J_ModeRegConfig+0x64>)
 8000c1c:	6878      	ldr	r0, [r7, #4]
 8000c1e:	f020 fc91 	bl	8021544 <HAL_SDRAM_SendCommand>
 8000c22:	4603      	mov	r3, r0
 8000c24:	2b00      	cmp	r3, #0
 8000c26:	d002      	beq.n	8000c2e <IS42S32800J_ModeRegConfig+0x5a>
  {
    return IS42S32800J_ERROR;
 8000c28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c2c:	e000      	b.n	8000c30 <IS42S32800J_ModeRegConfig+0x5c>
  }
  else
  {
    return IS42S32800J_OK;
 8000c2e:	2300      	movs	r3, #0
  }
}
 8000c30:	4618      	mov	r0, r3
 8000c32:	3710      	adds	r7, #16
 8000c34:	46bd      	mov	sp, r7
 8000c36:	bd80      	pop	{r7, pc}
 8000c38:	24000ce0 	.word	0x24000ce0

08000c3c <IS42S32800J_RefreshMode>:
  * @param  RefreshMode Could be IS42S32800J_CMD_AUTOREFRESH_MODE or
  *                      IS42S32800J_CMD_SELFREFRESH_MODE
  * @retval error status
  */
int32_t IS42S32800J_RefreshMode(SDRAM_HandleTypeDef *Ctx, uint32_t Interface, uint32_t RefreshMode) 
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	b084      	sub	sp, #16
 8000c40:	af00      	add	r7, sp, #0
 8000c42:	60f8      	str	r0, [r7, #12]
 8000c44:	60b9      	str	r1, [r7, #8]
 8000c46:	607a      	str	r2, [r7, #4]
  Command.CommandMode            = RefreshMode;
 8000c48:	4a0e      	ldr	r2, [pc, #56]	@ (8000c84 <IS42S32800J_RefreshMode+0x48>)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6013      	str	r3, [r2, #0]
  Command.CommandTarget          = Interface;
 8000c4e:	4a0d      	ldr	r2, [pc, #52]	@ (8000c84 <IS42S32800J_RefreshMode+0x48>)
 8000c50:	68bb      	ldr	r3, [r7, #8]
 8000c52:	6053      	str	r3, [r2, #4]
  Command.AutoRefreshNumber      = 8;
 8000c54:	4b0b      	ldr	r3, [pc, #44]	@ (8000c84 <IS42S32800J_RefreshMode+0x48>)
 8000c56:	2208      	movs	r2, #8
 8000c58:	609a      	str	r2, [r3, #8]
  Command.ModeRegisterDefinition = 0;
 8000c5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000c84 <IS42S32800J_RefreshMode+0x48>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]

  /* Send the command */
  if(HAL_SDRAM_SendCommand(Ctx, &Command, IS42S32800J_TIMEOUT) != HAL_OK)
 8000c60:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000c64:	4907      	ldr	r1, [pc, #28]	@ (8000c84 <IS42S32800J_RefreshMode+0x48>)
 8000c66:	68f8      	ldr	r0, [r7, #12]
 8000c68:	f020 fc6c 	bl	8021544 <HAL_SDRAM_SendCommand>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d002      	beq.n	8000c78 <IS42S32800J_RefreshMode+0x3c>
  {
    return IS42S32800J_ERROR;
 8000c72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000c76:	e000      	b.n	8000c7a <IS42S32800J_RefreshMode+0x3e>
  }
  else
  {
    return IS42S32800J_OK;
 8000c78:	2300      	movs	r3, #0
  }
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3710      	adds	r7, #16
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	24000ce0 	.word	0x24000ce0

08000c88 <IS42S32800J_RefreshRate>:
  * @param  Ctx Component object pointer
  * @param  RefreshCount The refresh rate to be programmed
  * @retval error status
  */
int32_t IS42S32800J_RefreshRate(SDRAM_HandleTypeDef *Ctx, uint32_t RefreshCount) 
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
 8000c90:	6039      	str	r1, [r7, #0]
  /* Set the device refresh rate */
  if(HAL_SDRAM_ProgramRefreshRate(Ctx, RefreshCount) != HAL_OK)
 8000c92:	6839      	ldr	r1, [r7, #0]
 8000c94:	6878      	ldr	r0, [r7, #4]
 8000c96:	f020 fc8a 	bl	80215ae <HAL_SDRAM_ProgramRefreshRate>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d002      	beq.n	8000ca6 <IS42S32800J_RefreshRate+0x1e>
  {
    return IS42S32800J_ERROR;
 8000ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ca4:	e000      	b.n	8000ca8 <IS42S32800J_RefreshRate+0x20>
  }
  else
  {
    return IS42S32800J_OK;
 8000ca6:	2300      	movs	r3, #0
  }
}
 8000ca8:	4618      	mov	r0, r3
 8000caa:	3708      	adds	r7, #8
 8000cac:	46bd      	mov	sp, r7
 8000cae:	bd80      	pop	{r7, pc}

08000cb0 <IS42S32800J_Delay>:
  * @brief This function provides accurate delay (in milliseconds)
  * @param Delay : specifies the delay time length, in milliseconds
  * @retval IS42S32800J_OK
  */
static int32_t IS42S32800J_Delay(uint32_t Delay)
{  
 8000cb0:	b580      	push	{r7, lr}
 8000cb2:	b084      	sub	sp, #16
 8000cb4:	af00      	add	r7, sp, #0
 8000cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  tickstart = HAL_GetTick();
 8000cb8:	f011 fa60 	bl	801217c <HAL_GetTick>
 8000cbc:	60f8      	str	r0, [r7, #12]
  while((HAL_GetTick() - tickstart) < Delay)
 8000cbe:	bf00      	nop
 8000cc0:	f011 fa5c 	bl	801217c <HAL_GetTick>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	68fb      	ldr	r3, [r7, #12]
 8000cc8:	1ad3      	subs	r3, r2, r3
 8000cca:	687a      	ldr	r2, [r7, #4]
 8000ccc:	429a      	cmp	r2, r3
 8000cce:	d8f7      	bhi.n	8000cc0 <IS42S32800J_Delay+0x10>
  {
  }
  return IS42S32800J_OK;
 8000cd0:	2300      	movs	r3, #0
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3710      	adds	r7, #16
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}

08000cda <MT25TL01G_GetFlashInfo>:
  * @brief  Return the configuration of the QSPI memory.
  * @param  pInfo pointer on the configuration structure
  * @retval QSPI memory status
  */
int32_t MT25TL01G_GetFlashInfo(MT25TL01G_Info_t *pInfo)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
  pInfo->FlashSize          = MT25TL01G_FLASH_SIZE;
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000ce8:	601a      	str	r2, [r3, #0]
  pInfo->EraseSectorSize    = (2 * MT25TL01G_SUBSECTOR_SIZE);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000cf0:	605a      	str	r2, [r3, #4]
  pInfo->ProgPageSize       = MT25TL01G_PAGE_SIZE;
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000cf8:	60da      	str	r2, [r3, #12]
  pInfo->EraseSectorsNumber = (MT25TL01G_FLASH_SIZE/pInfo->EraseSectorSize);
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	685b      	ldr	r3, [r3, #4]
 8000cfe:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d02:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	609a      	str	r2, [r3, #8]
  pInfo->ProgPagesNumber    = (MT25TL01G_FLASH_SIZE/pInfo->ProgPageSize);
 8000d0a:	687b      	ldr	r3, [r7, #4]
 8000d0c:	68db      	ldr	r3, [r3, #12]
 8000d0e:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8000d12:	fbb2 f2f3 	udiv	r2, r2, r3
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	611a      	str	r2, [r3, #16]
  return MT25TL01G_OK;
 8000d1a:	2300      	movs	r3, #0
}
 8000d1c:	4618      	mov	r0, r3
 8000d1e:	370c      	adds	r7, #12
 8000d20:	46bd      	mov	sp, r7
 8000d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d26:	4770      	bx	lr

08000d28 <MT25TL01G_Enter4BytesAddressMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_Enter4BytesAddressMode(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b090      	sub	sp, #64	@ 0x40
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]
 8000d30:	460b      	mov	r3, r1
 8000d32:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8000d34:	78fb      	ldrb	r3, [r7, #3]
 8000d36:	2b03      	cmp	r3, #3
 8000d38:	d102      	bne.n	8000d40 <MT25TL01G_Enter4BytesAddressMode+0x18>
 8000d3a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000d3e:	e001      	b.n	8000d44 <MT25TL01G_Enter4BytesAddressMode+0x1c>
 8000d40:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000d44:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_4_BYTE_ADDR_MODE_CMD;
 8000d46:	23b7      	movs	r3, #183	@ 0xb7
 8000d48:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000d4e:	2300      	movs	r3, #0
 8000d50:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8000d52:	2300      	movs	r3, #0
 8000d54:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000d62:	2300      	movs	r3, #0
 8000d64:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /*write enable */
  if( MT25TL01G_WriteEnable(Ctx,Mode)!=MT25TL01G_OK)
 8000d66:	78fb      	ldrb	r3, [r7, #3]
 8000d68:	4619      	mov	r1, r3
 8000d6a:	6878      	ldr	r0, [r7, #4]
 8000d6c:	f000 f860 	bl	8000e30 <MT25TL01G_WriteEnable>
 8000d70:	4603      	mov	r3, r0
 8000d72:	2b00      	cmp	r3, #0
 8000d74:	d002      	beq.n	8000d7c <MT25TL01G_Enter4BytesAddressMode+0x54>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000d76:	f06f 0301 	mvn.w	r3, #1
 8000d7a:	e019      	b.n	8000db0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }
  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000d7c:	f107 0308 	add.w	r3, r7, #8
 8000d80:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000d84:	4619      	mov	r1, r3
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f018 fda0 	bl	80198cc <HAL_QSPI_Command>
 8000d8c:	4603      	mov	r3, r0
 8000d8e:	2b00      	cmp	r3, #0
 8000d90:	d002      	beq.n	8000d98 <MT25TL01G_Enter4BytesAddressMode+0x70>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000d92:	f06f 0301 	mvn.w	r3, #1
 8000d96:	e00b      	b.n	8000db0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  /* Configure automatic polling mode to wait the memory is ready */
  else if(MT25TL01G_AutoPollingMemReady(Ctx,Mode)!=MT25TL01G_OK)
 8000d98:	78fb      	ldrb	r3, [r7, #3]
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	6878      	ldr	r0, [r7, #4]
 8000d9e:	f000 f80b 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d002      	beq.n	8000dae <MT25TL01G_Enter4BytesAddressMode+0x86>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000da8:	f06f 0301 	mvn.w	r3, #1
 8000dac:	e000      	b.n	8000db0 <MT25TL01G_Enter4BytesAddressMode+0x88>
  }

  return MT25TL01G_OK;
 8000dae:	2300      	movs	r3, #0
}
 8000db0:	4618      	mov	r0, r3
 8000db2:	3740      	adds	r7, #64	@ 0x40
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}

08000db8 <MT25TL01G_AutoPollingMemReady>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_AutoPollingMemReady(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b096      	sub	sp, #88	@ 0x58
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]

  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Configure automatic polling mode to wait for memory ready */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8000dc4:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000dc8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.Instruction       = MT25TL01G_READ_STATUS_REG_CMD;
 8000dca:	2305      	movs	r3, #5
 8000dcc:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8000dd6:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000dda:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 2;
 8000ddc:	2302      	movs	r3, #2
 8000dde:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000de0:	2300      	movs	r3, #0
 8000de2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000de4:	2300      	movs	r3, #0
 8000de6:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000de8:	2300      	movs	r3, #0
 8000dea:	657b      	str	r3, [r7, #84]	@ 0x54

  s_config.Match           = 0;
 8000dec:	2300      	movs	r3, #0
 8000dee:	60bb      	str	r3, [r7, #8]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000df0:	2300      	movs	r3, #0
 8000df2:	61bb      	str	r3, [r7, #24]
  s_config.Interval        = 0x10;
 8000df4:	2310      	movs	r3, #16
 8000df6:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000df8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfc:	61fb      	str	r3, [r7, #28]
  s_config.Mask            = MT25TL01G_SR_WIP | (MT25TL01G_SR_WIP <<8);
 8000dfe:	f240 1301 	movw	r3, #257	@ 0x101
 8000e02:	60fb      	str	r3, [r7, #12]
  s_config.StatusBytesSize = 2;
 8000e04:	2302      	movs	r3, #2
 8000e06:	617b      	str	r3, [r7, #20]

  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e08:	f107 0208 	add.w	r2, r7, #8
 8000e0c:	f107 0120 	add.w	r1, r7, #32
 8000e10:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000e14:	6878      	ldr	r0, [r7, #4]
 8000e16:	f018 fee6 	bl	8019be6 <HAL_QSPI_AutoPolling>
 8000e1a:	4603      	mov	r3, r0
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	d002      	beq.n	8000e26 <MT25TL01G_AutoPollingMemReady+0x6e>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8000e20:	f06f 0304 	mvn.w	r3, #4
 8000e24:	e000      	b.n	8000e28 <MT25TL01G_AutoPollingMemReady+0x70>
  }

  return MT25TL01G_OK;
 8000e26:	2300      	movs	r3, #0

}
 8000e28:	4618      	mov	r0, r3
 8000e2a:	3758      	adds	r7, #88	@ 0x58
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <MT25TL01G_WriteEnable>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_WriteEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b096      	sub	sp, #88	@ 0x58
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
 8000e38:	460b      	mov	r3, r1
 8000e3a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef     s_command;
  QSPI_AutoPollingTypeDef s_config;

  /* Enable write operations */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8000e3c:	78fb      	ldrb	r3, [r7, #3]
 8000e3e:	2b03      	cmp	r3, #3
 8000e40:	d102      	bne.n	8000e48 <MT25TL01G_WriteEnable+0x18>
 8000e42:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000e46:	e001      	b.n	8000e4c <MT25TL01G_WriteEnable+0x1c>
 8000e48:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000e4c:	63bb      	str	r3, [r7, #56]	@ 0x38

  s_command.Instruction       = MT25TL01G_WRITE_ENABLE_CMD;
 8000e4e:	2306      	movs	r3, #6
 8000e50:	623b      	str	r3, [r7, #32]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8000e52:	2300      	movs	r3, #0
 8000e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000e56:	2300      	movs	r3, #0
 8000e58:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.DataMode          = QSPI_DATA_NONE;
 8000e5a:	2300      	movs	r3, #0
 8000e5c:	647b      	str	r3, [r7, #68]	@ 0x44
  s_command.DummyCycles       = 0;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000e62:	2300      	movs	r3, #0
 8000e64:	64fb      	str	r3, [r7, #76]	@ 0x4c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000e66:	2300      	movs	r3, #0
 8000e68:	653b      	str	r3, [r7, #80]	@ 0x50
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	657b      	str	r3, [r7, #84]	@ 0x54

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000e6e:	f107 0320 	add.w	r3, r7, #32
 8000e72:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000e76:	4619      	mov	r1, r3
 8000e78:	6878      	ldr	r0, [r7, #4]
 8000e7a:	f018 fd27 	bl	80198cc <HAL_QSPI_Command>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	2b00      	cmp	r3, #0
 8000e82:	d002      	beq.n	8000e8a <MT25TL01G_WriteEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000e84:	f06f 0301 	mvn.w	r3, #1
 8000e88:	e029      	b.n	8000ede <MT25TL01G_WriteEnable+0xae>
  }

  /* Configure automatic polling mode to wait for write enabling */
  s_config.Match           = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8000e8a:	f240 2302 	movw	r3, #514	@ 0x202
 8000e8e:	60bb      	str	r3, [r7, #8]
  s_config.Mask            = MT25TL01G_SR_WREN | (MT25TL01G_SR_WREN << 8);
 8000e90:	f240 2302 	movw	r3, #514	@ 0x202
 8000e94:	60fb      	str	r3, [r7, #12]
  s_config.MatchMode       = QSPI_MATCH_MODE_AND;
 8000e96:	2300      	movs	r3, #0
 8000e98:	61bb      	str	r3, [r7, #24]
  s_config.StatusBytesSize = 2;
 8000e9a:	2302      	movs	r3, #2
 8000e9c:	617b      	str	r3, [r7, #20]
  s_config.Interval        = 0x10;
 8000e9e:	2310      	movs	r3, #16
 8000ea0:	613b      	str	r3, [r7, #16]
  s_config.AutomaticStop   = QSPI_AUTOMATIC_STOP_ENABLE;
 8000ea2:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000ea6:	61fb      	str	r3, [r7, #28]

  s_command.Instruction    = MT25TL01G_READ_STATUS_REG_CMD;
 8000ea8:	2305      	movs	r3, #5
 8000eaa:	623b      	str	r3, [r7, #32]
  s_command.DataMode       = (Mode == MT25TL01G_QPI_MODE) ? QSPI_DATA_4_LINES : QSPI_DATA_1_LINE;
 8000eac:	78fb      	ldrb	r3, [r7, #3]
 8000eae:	2b03      	cmp	r3, #3
 8000eb0:	d102      	bne.n	8000eb8 <MT25TL01G_WriteEnable+0x88>
 8000eb2:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000eb6:	e001      	b.n	8000ebc <MT25TL01G_WriteEnable+0x8c>
 8000eb8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000ebc:	647b      	str	r3, [r7, #68]	@ 0x44


  if (HAL_QSPI_AutoPolling(Ctx, &s_command, &s_config, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000ebe:	f107 0208 	add.w	r2, r7, #8
 8000ec2:	f107 0120 	add.w	r1, r7, #32
 8000ec6:	f241 3388 	movw	r3, #5000	@ 0x1388
 8000eca:	6878      	ldr	r0, [r7, #4]
 8000ecc:	f018 fe8b 	bl	8019be6 <HAL_QSPI_AutoPolling>
 8000ed0:	4603      	mov	r3, r0
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	d002      	beq.n	8000edc <MT25TL01G_WriteEnable+0xac>
  {
    return MT25TL01G_ERROR_AUTOPOLLING;
 8000ed6:	f06f 0304 	mvn.w	r3, #4
 8000eda:	e000      	b.n	8000ede <MT25TL01G_WriteEnable+0xae>
  }

  return MT25TL01G_OK;
 8000edc:	2300      	movs	r3, #0
}
 8000ede:	4618      	mov	r0, r3
 8000ee0:	3758      	adds	r7, #88	@ 0x58
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
	...

08000ee8 <MT25TL01G_PageProgram>:
  * @param  Size Size of data to write. Range 1 ~ 256
  * @retval QSPI memory status
  */

int32_t MT25TL01G_PageProgram(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	b092      	sub	sp, #72	@ 0x48
 8000eec:	af00      	add	r7, sp, #0
 8000eee:	60f8      	str	r0, [r7, #12]
 8000ef0:	607a      	str	r2, [r7, #4]
 8000ef2:	603b      	str	r3, [r7, #0]
 8000ef4:	460b      	mov	r3, r1
 8000ef6:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8000ef8:	7afb      	ldrb	r3, [r7, #11]
 8000efa:	2b03      	cmp	r3, #3
 8000efc:	d83a      	bhi.n	8000f74 <MT25TL01G_PageProgram+0x8c>
 8000efe:	a201      	add	r2, pc, #4	@ (adr r2, 8000f04 <MT25TL01G_PageProgram+0x1c>)
 8000f00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f04:	08000f15 	.word	0x08000f15
 8000f08:	08000f2d 	.word	0x08000f2d
 8000f0c:	08000f45 	.word	0x08000f45
 8000f10:	08000f5d 	.word	0x08000f5d
  {

  case MT25TL01G_SPI_MODE :                   /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f14:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f18:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction     = MT25TL01G_PAGE_PROG_CMD;
 8000f1a:	2302      	movs	r3, #2
 8000f1c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_1_LINE;
 8000f1e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f22:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode        = QSPI_DATA_1_LINE;
 8000f24:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8000f28:	637b      	str	r3, [r7, #52]	@ 0x34
    break;
 8000f2a:	e023      	b.n	8000f74 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_2IO_MODE :               /*  1-2-2 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f30:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction     = MT25TL01G_EXT_DUAL_IN_FAST_PROG_CMD;
 8000f32:	23d2      	movs	r3, #210	@ 0xd2
 8000f34:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_2_LINES;
 8000f36:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000f3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode        = QSPI_DATA_2_LINES;
 8000f3c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8000f40:	637b      	str	r3, [r7, #52]	@ 0x34
    break;
 8000f42:	e017      	b.n	8000f74 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_SPI_4IO_MODE :               /* 1-4-4 program commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_1_LINE;
 8000f44:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000f48:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction     = MT25TL01G_EXT_QUAD_IN_FAST_PROG_CMD;
 8000f4a:	2338      	movs	r3, #56	@ 0x38
 8000f4c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8000f4e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f52:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8000f54:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000f58:	637b      	str	r3, [r7, #52]	@ 0x34
    break;
 8000f5a:	e00b      	b.n	8000f74 <MT25TL01G_PageProgram+0x8c>

  case MT25TL01G_QPI_MODE :                   /* 4-4-4 commands */
    s_command.InstructionMode = QSPI_INSTRUCTION_4_LINES;
 8000f5c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8000f60:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction     = MT25TL01G_QUAD_IN_FAST_PROG_4_BYTE_ADDR_CMD;
 8000f62:	2334      	movs	r3, #52	@ 0x34
 8000f64:	613b      	str	r3, [r7, #16]
    s_command.AddressMode     = QSPI_ADDRESS_4_LINES;
 8000f66:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8000f6a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode        = QSPI_DATA_4_LINES;
 8000f6c:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8000f70:	637b      	str	r3, [r7, #52]	@ 0x34
    break;
 8000f72:	bf00      	nop

  }

  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8000f74:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000f78:	61fb      	str	r3, [r7, #28]
  s_command.Address           = WriteAddr;
 8000f7a:	683b      	ldr	r3, [r7, #0]
 8000f7c:	617b      	str	r3, [r7, #20]
  s_command.NbData            = Size;
 8000f7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f80:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8000f82:	2300      	movs	r3, #0
 8000f84:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = 0;
 8000f86:	2300      	movs	r3, #0
 8000f88:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8000f8e:	2300      	movs	r3, #0
 8000f90:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8000f92:	2300      	movs	r3, #0
 8000f94:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000f96:	f107 0310 	add.w	r3, r7, #16
 8000f9a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000f9e:	4619      	mov	r1, r3
 8000fa0:	68f8      	ldr	r0, [r7, #12]
 8000fa2:	f018 fc93 	bl	80198cc <HAL_QSPI_Command>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d002      	beq.n	8000fb2 <MT25TL01G_PageProgram+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 8000fac:	f06f 0301 	mvn.w	r3, #1
 8000fb0:	e00c      	b.n	8000fcc <MT25TL01G_PageProgram+0xe4>
  }
  if (HAL_QSPI_Transmit(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8000fb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8000fb6:	6879      	ldr	r1, [r7, #4]
 8000fb8:	68f8      	ldr	r0, [r7, #12]
 8000fba:	f018 fce5 	bl	8019988 <HAL_QSPI_Transmit>
 8000fbe:	4603      	mov	r3, r0
 8000fc0:	2b00      	cmp	r3, #0
 8000fc2:	d002      	beq.n	8000fca <MT25TL01G_PageProgram+0xe2>
  {
    return MT25TL01G_ERROR_TRANSMIT;
 8000fc4:	f06f 0302 	mvn.w	r3, #2
 8000fc8:	e000      	b.n	8000fcc <MT25TL01G_PageProgram+0xe4>
  }
  return MT25TL01G_OK;
 8000fca:	2300      	movs	r3, #0
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	3748      	adds	r7, #72	@ 0x48
 8000fd0:	46bd      	mov	sp, r7
 8000fd2:	bd80      	pop	{r7, pc}

08000fd4 <MT25TL01G_ReadDTR>:
  * @param  ReadAddr Read start address
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ReadDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b092      	sub	sp, #72	@ 0x48
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	60f8      	str	r0, [r7, #12]
 8000fdc:	607a      	str	r2, [r7, #4]
 8000fde:	603b      	str	r3, [r7, #0]
 8000fe0:	460b      	mov	r3, r1
 8000fe2:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 8000fe4:	7afb      	ldrb	r3, [r7, #11]
 8000fe6:	2b03      	cmp	r3, #3
 8000fe8:	d83a      	bhi.n	8001060 <MT25TL01G_ReadDTR+0x8c>
 8000fea:	a201      	add	r2, pc, #4	@ (adr r2, 8000ff0 <MT25TL01G_ReadDTR+0x1c>)
 8000fec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000ff0:	08001001 	.word	0x08001001
 8000ff4:	08001019 	.word	0x08001019
 8000ff8:	08001031 	.word	0x08001031
 8000ffc:	08001049 	.word	0x08001049
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001000:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001004:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 8001006:	230e      	movs	r3, #14
 8001008:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800100a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800100e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001010:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001014:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8001016:	e023      	b.n	8001060 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001018:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800101c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 800101e:	233d      	movs	r3, #61	@ 0x3d
 8001020:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 8001022:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001026:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001028:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800102c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800102e:	e017      	b.n	8001060 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001030:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001034:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 8001036:	23ee      	movs	r3, #238	@ 0xee
 8001038:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800103a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800103e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001040:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001044:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8001046:	e00b      	b.n	8001060 <MT25TL01G_ReadDTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001048:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 800104e:	23ed      	movs	r3, #237	@ 0xed
 8001050:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001052:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001056:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001058:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800105c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800105e:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 8001060:	2308      	movs	r3, #8
 8001062:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001064:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001068:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800106a:	683b      	ldr	r3, [r7, #0]
 800106c:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800106e:	2300      	movs	r3, #0
 8001070:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.NbData            = Size;
 8001072:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001074:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 8001076:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 800107a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 800107c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001080:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001082:	2300      	movs	r3, #0
 8001084:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001086:	f107 0310 	add.w	r3, r7, #16
 800108a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800108e:	4619      	mov	r1, r3
 8001090:	68f8      	ldr	r0, [r7, #12]
 8001092:	f018 fc1b 	bl	80198cc <HAL_QSPI_Command>
 8001096:	4603      	mov	r3, r0
 8001098:	2b00      	cmp	r3, #0
 800109a:	d002      	beq.n	80010a2 <MT25TL01G_ReadDTR+0xce>
  {
    return MT25TL01G_ERROR_COMMAND;
 800109c:	f06f 0301 	mvn.w	r3, #1
 80010a0:	e00c      	b.n	80010bc <MT25TL01G_ReadDTR+0xe8>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80010a2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80010a6:	6879      	ldr	r1, [r7, #4]
 80010a8:	68f8      	ldr	r0, [r7, #12]
 80010aa:	f018 fcff 	bl	8019aac <HAL_QSPI_Receive>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d002      	beq.n	80010ba <MT25TL01G_ReadDTR+0xe6>
  {
    return MT25TL01G_ERROR_RECEIVE;
 80010b4:	f06f 0303 	mvn.w	r3, #3
 80010b8:	e000      	b.n	80010bc <MT25TL01G_ReadDTR+0xe8>
  }

  return MT25TL01G_OK;
 80010ba:	2300      	movs	r3, #0

}
 80010bc:	4618      	mov	r0, r3
 80010be:	3748      	adds	r7, #72	@ 0x48
 80010c0:	46bd      	mov	sp, r7
 80010c2:	bd80      	pop	{r7, pc}

080010c4 <MT25TL01G_ReadSTR>:
  * @param  Size Size of data to read
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ReadSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b092      	sub	sp, #72	@ 0x48
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	60f8      	str	r0, [r7, #12]
 80010cc:	607a      	str	r2, [r7, #4]
 80010ce:	603b      	str	r3, [r7, #0]
 80010d0:	460b      	mov	r3, r1
 80010d2:	72fb      	strb	r3, [r7, #11]
  QSPI_CommandTypeDef s_command;
  switch(Mode)
 80010d4:	7afb      	ldrb	r3, [r7, #11]
 80010d6:	2b03      	cmp	r3, #3
 80010d8:	d83a      	bhi.n	8001150 <MT25TL01G_ReadSTR+0x8c>
 80010da:	a201      	add	r2, pc, #4	@ (adr r2, 80010e0 <MT25TL01G_ReadSTR+0x1c>)
 80010dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80010e0:	080010f1 	.word	0x080010f1
 80010e4:	08001109 	.word	0x08001109
 80010e8:	08001121 	.word	0x08001121
 80010ec:	08001139 	.word	0x08001139
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80010f0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80010f4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 80010f6:	230c      	movs	r3, #12
 80010f8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80010fa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80010fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001100:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001104:	637b      	str	r3, [r7, #52]	@ 0x34


    break;
 8001106:	e023      	b.n	8001150 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001108:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800110c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 800110e:	23bc      	movs	r3, #188	@ 0xbc
 8001110:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8001112:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001116:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 8001118:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800111c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800111e:	e017      	b.n	8001150 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001120:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001124:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001126:	23ec      	movs	r3, #236	@ 0xec
 8001128:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 800112a:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800112e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001130:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 8001136:	e00b      	b.n	8001150 <MT25TL01G_ReadSTR+0x8c>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8001138:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800113c:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 800113e:	23eb      	movs	r3, #235	@ 0xeb
 8001140:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001142:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 8001146:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 8001148:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 800114e:	bf00      	nop
  }
  /* Initialize the read command */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 8001150:	2308      	movs	r3, #8
 8001152:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001154:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001158:	61fb      	str	r3, [r7, #28]
  s_command.Address           = ReadAddr;
 800115a:	683b      	ldr	r3, [r7, #0]
 800115c:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 800115e:	2300      	movs	r3, #0
 8001160:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.NbData            = Size;
 8001162:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8001164:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001166:	2300      	movs	r3, #0
 8001168:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 800116a:	2300      	movs	r3, #0
 800116c:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800116e:	2300      	movs	r3, #0
 8001170:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001172:	f107 0310 	add.w	r3, r7, #16
 8001176:	f241 3288 	movw	r2, #5000	@ 0x1388
 800117a:	4619      	mov	r1, r3
 800117c:	68f8      	ldr	r0, [r7, #12]
 800117e:	f018 fba5 	bl	80198cc <HAL_QSPI_Command>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d002      	beq.n	800118e <MT25TL01G_ReadSTR+0xca>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001188:	f06f 0301 	mvn.w	r3, #1
 800118c:	e00c      	b.n	80011a8 <MT25TL01G_ReadSTR+0xe4>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(Ctx, pData, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800118e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001192:	6879      	ldr	r1, [r7, #4]
 8001194:	68f8      	ldr	r0, [r7, #12]
 8001196:	f018 fc89 	bl	8019aac <HAL_QSPI_Receive>
 800119a:	4603      	mov	r3, r0
 800119c:	2b00      	cmp	r3, #0
 800119e:	d002      	beq.n	80011a6 <MT25TL01G_ReadSTR+0xe2>
  {
    return MT25TL01G_ERROR_RECEIVE;
 80011a0:	f06f 0303 	mvn.w	r3, #3
 80011a4:	e000      	b.n	80011a8 <MT25TL01G_ReadSTR+0xe4>
  }


  return MT25TL01G_OK;
 80011a6:	2300      	movs	r3, #0

}
 80011a8:	4618      	mov	r0, r3
 80011aa:	3748      	adds	r7, #72	@ 0x48
 80011ac:	46bd      	mov	sp, r7
 80011ae:	bd80      	pop	{r7, pc}

080011b0 <MT25TL01G_BlockErase>:
  * @param  BlockAddress Block address to erase
  * @retval QSPI memory status
  */

int32_t MT25TL01G_BlockErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode ,uint32_t BlockAddress, MT25TL01G_Erase_t BlockSize)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	b092      	sub	sp, #72	@ 0x48
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	60f8      	str	r0, [r7, #12]
 80011b8:	607a      	str	r2, [r7, #4]
 80011ba:	461a      	mov	r2, r3
 80011bc:	460b      	mov	r3, r1
 80011be:	72fb      	strb	r3, [r7, #11]
 80011c0:	4613      	mov	r3, r2
 80011c2:	72bb      	strb	r3, [r7, #10]
  QSPI_CommandTypeDef s_command;
  switch(BlockSize)
 80011c4:	7abb      	ldrb	r3, [r7, #10]
 80011c6:	2b03      	cmp	r3, #3
 80011c8:	d00e      	beq.n	80011e8 <MT25TL01G_BlockErase+0x38>
 80011ca:	2b03      	cmp	r3, #3
 80011cc:	dc03      	bgt.n	80011d6 <MT25TL01G_BlockErase+0x26>
 80011ce:	2b01      	cmp	r3, #1
 80011d0:	d004      	beq.n	80011dc <MT25TL01G_BlockErase+0x2c>
 80011d2:	2b02      	cmp	r3, #2
 80011d4:	d005      	beq.n	80011e2 <MT25TL01G_BlockErase+0x32>
  {
  default :
  case MT25TL01G_ERASE_4K :
    s_command.Instruction     = MT25TL01G_SUBSECTOR_ERASE_4_BYTE_ADDR_CMD_4K;
 80011d6:	2321      	movs	r3, #33	@ 0x21
 80011d8:	613b      	str	r3, [r7, #16]
    break;
 80011da:	e00c      	b.n	80011f6 <MT25TL01G_BlockErase+0x46>

  case MT25TL01G_ERASE_32K :
    s_command.Instruction     = MT25TL01G_SUBSECTOR_ERASE_CMD_32K;
 80011dc:	2352      	movs	r3, #82	@ 0x52
 80011de:	613b      	str	r3, [r7, #16]
    break;
 80011e0:	e009      	b.n	80011f6 <MT25TL01G_BlockErase+0x46>

  case MT25TL01G_ERASE_64K :
    s_command.Instruction     = MT25TL01G_SECTOR_ERASE_4_BYTE_ADDR_CMD;
 80011e2:	23dc      	movs	r3, #220	@ 0xdc
 80011e4:	613b      	str	r3, [r7, #16]
    break;
 80011e6:	e006      	b.n	80011f6 <MT25TL01G_BlockErase+0x46>

  case MT25TL01G_ERASE_CHIP :
    return MT25TL01G_ChipErase(Ctx, Mode);
 80011e8:	7afb      	ldrb	r3, [r7, #11]
 80011ea:	4619      	mov	r1, r3
 80011ec:	68f8      	ldr	r0, [r7, #12]
 80011ee:	f000 f83c 	bl	800126a <MT25TL01G_ChipErase>
 80011f2:	4603      	mov	r3, r0
 80011f4:	e035      	b.n	8001262 <MT25TL01G_BlockErase+0xb2>
  }
  /* Initialize the erase command */

  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 80011f6:	7afb      	ldrb	r3, [r7, #11]
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d102      	bne.n	8001202 <MT25TL01G_BlockErase+0x52>
 80011fc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001200:	e001      	b.n	8001206 <MT25TL01G_BlockErase+0x56>
 8001202:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001206:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 8001208:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 800120e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001212:	61fb      	str	r3, [r7, #28]
  s_command.Address           = BlockAddress;
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	617b      	str	r3, [r7, #20]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001218:	2300      	movs	r3, #0
 800121a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DataMode          = QSPI_DATA_NONE;
 800121c:	2300      	movs	r3, #0
 800121e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DummyCycles       = 0;
 8001220:	2300      	movs	r3, #0
 8001222:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001224:	2300      	movs	r3, #0
 8001226:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001228:	2300      	movs	r3, #0
 800122a:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800122c:	2300      	movs	r3, #0
 800122e:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Send the command */
  MT25TL01G_WriteEnable(Ctx,Mode);
 8001230:	7afb      	ldrb	r3, [r7, #11]
 8001232:	4619      	mov	r1, r3
 8001234:	68f8      	ldr	r0, [r7, #12]
 8001236:	f7ff fdfb 	bl	8000e30 <MT25TL01G_WriteEnable>
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800123a:	f107 0310 	add.w	r3, r7, #16
 800123e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001242:	4619      	mov	r1, r3
 8001244:	68f8      	ldr	r0, [r7, #12]
 8001246:	f018 fb41 	bl	80198cc <HAL_QSPI_Command>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d002      	beq.n	8001256 <MT25TL01G_BlockErase+0xa6>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001250:	f06f 0301 	mvn.w	r3, #1
 8001254:	e005      	b.n	8001262 <MT25TL01G_BlockErase+0xb2>
  }
  MT25TL01G_AutoPollingMemReady(Ctx,Mode);
 8001256:	7afb      	ldrb	r3, [r7, #11]
 8001258:	4619      	mov	r1, r3
 800125a:	68f8      	ldr	r0, [r7, #12]
 800125c:	f7ff fdac 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
  return MT25TL01G_OK;
 8001260:	2300      	movs	r3, #0
}
 8001262:	4618      	mov	r0, r3
 8001264:	3748      	adds	r7, #72	@ 0x48
 8001266:	46bd      	mov	sp, r7
 8001268:	bd80      	pop	{r7, pc}

0800126a <MT25TL01G_ChipErase>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_ChipErase(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800126a:	b580      	push	{r7, lr}
 800126c:	b090      	sub	sp, #64	@ 0x40
 800126e:	af00      	add	r7, sp, #0
 8001270:	6078      	str	r0, [r7, #4]
 8001272:	460b      	mov	r3, r1
 8001274:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the erase command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001276:	78fb      	ldrb	r3, [r7, #3]
 8001278:	2b03      	cmp	r3, #3
 800127a:	d102      	bne.n	8001282 <MT25TL01G_ChipErase+0x18>
 800127c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001280:	e001      	b.n	8001286 <MT25TL01G_ChipErase+0x1c>
 8001282:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001286:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_DIE_ERASE_CMD;
 8001288:	23c7      	movs	r3, #199	@ 0xc7
 800128a:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800128c:	2300      	movs	r3, #0
 800128e:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001290:	2300      	movs	r3, #0
 8001292:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001294:	2300      	movs	r3, #0
 8001296:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8001298:	2300      	movs	r3, #0
 800129a:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800129c:	2300      	movs	r3, #0
 800129e:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012a0:	2300      	movs	r3, #0
 80012a2:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012a4:	2300      	movs	r3, #0
 80012a6:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012a8:	f107 0308 	add.w	r3, r7, #8
 80012ac:	f241 3288 	movw	r2, #5000	@ 0x1388
 80012b0:	4619      	mov	r1, r3
 80012b2:	6878      	ldr	r0, [r7, #4]
 80012b4:	f018 fb0a 	bl	80198cc <HAL_QSPI_Command>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d002      	beq.n	80012c4 <MT25TL01G_ChipErase+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80012be:	f06f 0301 	mvn.w	r3, #1
 80012c2:	e000      	b.n	80012c6 <MT25TL01G_ChipErase+0x5c>
  }

  return MT25TL01G_OK;
 80012c4:	2300      	movs	r3, #0

}
 80012c6:	4618      	mov	r0, r3
 80012c8:	3740      	adds	r7, #64	@ 0x40
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <MT25TL01G_EnterQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnterQPIMode(QSPI_HandleTypeDef *Ctx)
{
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b090      	sub	sp, #64	@ 0x40
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80012d6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80012da:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_ENTER_QUAD_CMD;
 80012dc:	2335      	movs	r3, #53	@ 0x35
 80012de:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80012e0:	2300      	movs	r3, #0
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80012fc:	f107 0308 	add.w	r3, r7, #8
 8001300:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001304:	4619      	mov	r1, r3
 8001306:	6878      	ldr	r0, [r7, #4]
 8001308:	f018 fae0 	bl	80198cc <HAL_QSPI_Command>
 800130c:	4603      	mov	r3, r0
 800130e:	2b00      	cmp	r3, #0
 8001310:	d002      	beq.n	8001318 <MT25TL01G_EnterQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001312:	f06f 0301 	mvn.w	r3, #1
 8001316:	e000      	b.n	800131a <MT25TL01G_EnterQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 8001318:	2300      	movs	r3, #0
}
 800131a:	4618      	mov	r0, r3
 800131c:	3740      	adds	r7, #64	@ 0x40
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <MT25TL01G_ExitQPIMode>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ExitQPIMode(QSPI_HandleTypeDef *Ctx)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b090      	sub	sp, #64	@ 0x40
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
  QSPI_CommandTypeDef s_command;

  s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800132a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800132e:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_EXIT_QUAD_CMD;
 8001330:	23f5      	movs	r3, #245	@ 0xf5
 8001332:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 8001334:	2300      	movs	r3, #0
 8001336:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001338:	2300      	movs	r3, #0
 800133a:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 800133c:	2300      	movs	r3, #0
 800133e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 8001340:	2300      	movs	r3, #0
 8001342:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8001344:	2300      	movs	r3, #0
 8001346:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001348:	2300      	movs	r3, #0
 800134a:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800134c:	2300      	movs	r3, #0
 800134e:	63fb      	str	r3, [r7, #60]	@ 0x3c

  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8001350:	f107 0308 	add.w	r3, r7, #8
 8001354:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001358:	4619      	mov	r1, r3
 800135a:	6878      	ldr	r0, [r7, #4]
 800135c:	f018 fab6 	bl	80198cc <HAL_QSPI_Command>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d002      	beq.n	800136c <MT25TL01G_ExitQPIMode+0x4a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001366:	f06f 0301 	mvn.w	r3, #1
 800136a:	e000      	b.n	800136e <MT25TL01G_ExitQPIMode+0x4c>
  }

  return MT25TL01G_OK;
 800136c:	2300      	movs	r3, #0
}
 800136e:	4618      	mov	r0, r3
 8001370:	3740      	adds	r7, #64	@ 0x40
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
	...

08001378 <MT25TL01G_EnableMemoryMappedModeDTR>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_EnableMemoryMappedModeDTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b092      	sub	sp, #72	@ 0x48
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
 8001380:	460b      	mov	r3, r1
 8001382:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8001384:	78fb      	ldrb	r3, [r7, #3]
 8001386:	2b03      	cmp	r3, #3
 8001388:	d83a      	bhi.n	8001400 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
 800138a:	a201      	add	r2, pc, #4	@ (adr r2, 8001390 <MT25TL01G_EnableMemoryMappedModeDTR+0x18>)
 800138c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001390:	080013a1 	.word	0x080013a1
 8001394:	080013b9 	.word	0x080013b9
 8001398:	080013d1 	.word	0x080013d1
 800139c:	080013e9 	.word	0x080013e9
  {
  case MT25TL01G_SPI_MODE:                /* 1-1-1 commands, Power on H/W default setting */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013a0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013a4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_DTR_CMD;
 80013a6:	230e      	movs	r3, #14
 80013a8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80013aa:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013ae:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 80013b0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80013b4:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80013b6:	e023      	b.n	8001400 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-1-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013b8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013bc:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_OUT_FAST_READ_DTR_CMD;
 80013be:	233d      	movs	r3, #61	@ 0x3d
 80013c0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 80013c2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80013c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 80013c8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80013cc:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80013ce:	e017      	b.n	8001400 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80013d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013d4:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_DTR_CMD;
 80013d6:	23ee      	movs	r3, #238	@ 0xee
 80013d8:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80013da:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013de:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80013e0:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80013e4:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80013e6:	e00b      	b.n	8001400 <MT25TL01G_EnableMemoryMappedModeDTR+0x88>
  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80013e8:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80013ec:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_DTR_CMD;
 80013ee:	23ed      	movs	r3, #237	@ 0xed
 80013f0:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80013f2:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80013f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80013f8:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80013fc:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80013fe:	bf00      	nop
  }
  /* Configure the command for the read instruction */
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 8001400:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001404:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001406:	2300      	movs	r3, #0
 8001408:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ_QUAD_DTR;
 800140a:	2308      	movs	r3, #8
 800140c:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.DdrMode           = QSPI_DDR_MODE_ENABLE;
 800140e:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8001412:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_HALF_CLK_DELAY;
 8001414:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8001418:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 800141a:	2300      	movs	r3, #0
 800141c:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 8001422:	2300      	movs	r3, #0
 8001424:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 8001426:	f107 0208 	add.w	r2, r7, #8
 800142a:	f107 0310 	add.w	r3, r7, #16
 800142e:	4619      	mov	r1, r3
 8001430:	6878      	ldr	r0, [r7, #4]
 8001432:	f018 fc4f 	bl	8019cd4 <HAL_QSPI_MemoryMapped>
 8001436:	4603      	mov	r3, r0
 8001438:	2b00      	cmp	r3, #0
 800143a:	d002      	beq.n	8001442 <MT25TL01G_EnableMemoryMappedModeDTR+0xca>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800143c:	f06f 0305 	mvn.w	r3, #5
 8001440:	e000      	b.n	8001444 <MT25TL01G_EnableMemoryMappedModeDTR+0xcc>
  }

  return MT25TL01G_OK;
 8001442:	2300      	movs	r3, #0
}
 8001444:	4618      	mov	r0, r3
 8001446:	3748      	adds	r7, #72	@ 0x48
 8001448:	46bd      	mov	sp, r7
 800144a:	bd80      	pop	{r7, pc}

0800144c <MT25TL01G_EnableMemoryMappedModeSTR>:
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */

int32_t MT25TL01G_EnableMemoryMappedModeSTR(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b092      	sub	sp, #72	@ 0x48
 8001450:	af00      	add	r7, sp, #0
 8001452:	6078      	str	r0, [r7, #4]
 8001454:	460b      	mov	r3, r1
 8001456:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef      s_command;
  QSPI_MemoryMappedTypeDef s_mem_mapped_cfg;
  switch(Mode)
 8001458:	78fb      	ldrb	r3, [r7, #3]
 800145a:	2b03      	cmp	r3, #3
 800145c:	d83a      	bhi.n	80014d4 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
 800145e:	a201      	add	r2, pc, #4	@ (adr r2, 8001464 <MT25TL01G_EnableMemoryMappedModeSTR+0x18>)
 8001460:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001464:	08001475 	.word	0x08001475
 8001468:	0800148d 	.word	0x0800148d
 800146c:	080014a5 	.word	0x080014a5
 8001470:	080014bd 	.word	0x080014bd
  {
  case MT25TL01G_SPI_MODE:           /* 1-1-1 read commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 8001474:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001478:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_FAST_READ_4_BYTE_ADDR_CMD;
 800147a:	230c      	movs	r3, #12
 800147c:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_1_LINE;
 800147e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001482:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_1_LINE;
 8001484:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8001488:	637b      	str	r3, [r7, #52]	@ 0x34


    break;
 800148a:	e023      	b.n	80014d4 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>
  case MT25TL01G_SPI_2IO_MODE:           /* 1-2-2 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 800148c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001490:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_DUAL_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 8001492:	23bc      	movs	r3, #188	@ 0xbc
 8001494:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_2_LINES;
 8001496:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800149a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_2_LINES;
 800149c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80014a0:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80014a2:	e017      	b.n	80014d4 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_SPI_4IO_MODE:             /* 1-4-4 read commands */

    s_command.InstructionMode   = QSPI_INSTRUCTION_1_LINE;
 80014a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80014a8:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_4_BYTE_ADDR_CMD;
 80014aa:	23ec      	movs	r3, #236	@ 0xec
 80014ac:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80014ae:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80014b4:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80014b8:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80014ba:	e00b      	b.n	80014d4 <MT25TL01G_EnableMemoryMappedModeSTR+0x88>

  case MT25TL01G_QPI_MODE:                 /* 4-4-4 commands */
    s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 80014bc:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014c0:	62bb      	str	r3, [r7, #40]	@ 0x28
    s_command.Instruction       = MT25TL01G_QUAD_INOUT_FAST_READ_CMD;
 80014c2:	23eb      	movs	r3, #235	@ 0xeb
 80014c4:	613b      	str	r3, [r7, #16]
    s_command.AddressMode       = QSPI_ADDRESS_4_LINES;
 80014c6:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80014ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    s_command.DataMode          = QSPI_DATA_4_LINES;
 80014cc:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 80014d0:	637b      	str	r3, [r7, #52]	@ 0x34

    break;
 80014d2:	bf00      	nop

  }
  /* Configure the command for the read instruction */
  s_command.DummyCycles       = MT25TL01G_DUMMY_CYCLES_READ;
 80014d4:	2308      	movs	r3, #8
 80014d6:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AddressSize       = QSPI_ADDRESS_32_BITS;
 80014d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80014dc:	61fb      	str	r3, [r7, #28]
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80014de:	2300      	movs	r3, #0
 80014e0:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80014e6:	2300      	movs	r3, #0
 80014e8:	643b      	str	r3, [r7, #64]	@ 0x40
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80014ea:	2300      	movs	r3, #0
 80014ec:	647b      	str	r3, [r7, #68]	@ 0x44

  /* Configure the memory mapped mode */
  s_mem_mapped_cfg.TimeOutActivation = QSPI_TIMEOUT_COUNTER_DISABLE;
 80014ee:	2300      	movs	r3, #0
 80014f0:	60fb      	str	r3, [r7, #12]
  s_mem_mapped_cfg.TimeOutPeriod     = 0;
 80014f2:	2300      	movs	r3, #0
 80014f4:	60bb      	str	r3, [r7, #8]

  if (HAL_QSPI_MemoryMapped(Ctx, &s_command, &s_mem_mapped_cfg) != HAL_OK)
 80014f6:	f107 0208 	add.w	r2, r7, #8
 80014fa:	f107 0310 	add.w	r3, r7, #16
 80014fe:	4619      	mov	r1, r3
 8001500:	6878      	ldr	r0, [r7, #4]
 8001502:	f018 fbe7 	bl	8019cd4 <HAL_QSPI_MemoryMapped>
 8001506:	4603      	mov	r3, r0
 8001508:	2b00      	cmp	r3, #0
 800150a:	d002      	beq.n	8001512 <MT25TL01G_EnableMemoryMappedModeSTR+0xc6>
  {
    return MT25TL01G_ERROR_MEMORYMAPPED;
 800150c:	f06f 0305 	mvn.w	r3, #5
 8001510:	e000      	b.n	8001514 <MT25TL01G_EnableMemoryMappedModeSTR+0xc8>
  }

  return MT25TL01G_OK;
 8001512:	2300      	movs	r3, #0
}
 8001514:	4618      	mov	r0, r3
 8001516:	3748      	adds	r7, #72	@ 0x48
 8001518:	46bd      	mov	sp, r7
 800151a:	bd80      	pop	{r7, pc}

0800151c <MT25TL01G_ResetEnable>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetEnable(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b090      	sub	sp, #64	@ 0x40
 8001520:	af00      	add	r7, sp, #0
 8001522:	6078      	str	r0, [r7, #4]
 8001524:	460b      	mov	r3, r1
 8001526:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 8001528:	78fb      	ldrb	r3, [r7, #3]
 800152a:	2b03      	cmp	r3, #3
 800152c:	d102      	bne.n	8001534 <MT25TL01G_ResetEnable+0x18>
 800152e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001532:	e001      	b.n	8001538 <MT25TL01G_ResetEnable+0x1c>
 8001534:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001538:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_ENABLE_CMD;
 800153a:	2366      	movs	r3, #102	@ 0x66
 800153c:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 8001546:	2300      	movs	r3, #0
 8001548:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 800154a:	2300      	movs	r3, #0
 800154c:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 800154e:	2300      	movs	r3, #0
 8001550:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8001552:	2300      	movs	r3, #0
 8001554:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 8001556:	2300      	movs	r3, #0
 8001558:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 800155a:	f107 0308 	add.w	r3, r7, #8
 800155e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001562:	4619      	mov	r1, r3
 8001564:	6878      	ldr	r0, [r7, #4]
 8001566:	f018 f9b1 	bl	80198cc <HAL_QSPI_Command>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d002      	beq.n	8001576 <MT25TL01G_ResetEnable+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 8001570:	f06f 0301 	mvn.w	r3, #1
 8001574:	e000      	b.n	8001578 <MT25TL01G_ResetEnable+0x5c>
  }

  return MT25TL01G_OK;
 8001576:	2300      	movs	r3, #0
}
 8001578:	4618      	mov	r0, r3
 800157a:	3740      	adds	r7, #64	@ 0x40
 800157c:	46bd      	mov	sp, r7
 800157e:	bd80      	pop	{r7, pc}

08001580 <MT25TL01G_ResetMemory>:
  * @param  Ctx Component object pointer
  * @param  Mode Interface mode
  * @retval QSPI memory status
  */
int32_t MT25TL01G_ResetMemory(QSPI_HandleTypeDef *Ctx, MT25TL01G_Interface_t Mode)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b090      	sub	sp, #64	@ 0x40
 8001584:	af00      	add	r7, sp, #0
 8001586:	6078      	str	r0, [r7, #4]
 8001588:	460b      	mov	r3, r1
 800158a:	70fb      	strb	r3, [r7, #3]
  QSPI_CommandTypeDef s_command;

  /* Initialize the reset enable command */
  s_command.InstructionMode   = (Mode == MT25TL01G_QPI_MODE) ? QSPI_INSTRUCTION_4_LINES : QSPI_INSTRUCTION_1_LINE;
 800158c:	78fb      	ldrb	r3, [r7, #3]
 800158e:	2b03      	cmp	r3, #3
 8001590:	d102      	bne.n	8001598 <MT25TL01G_ResetMemory+0x18>
 8001592:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001596:	e001      	b.n	800159c <MT25TL01G_ResetMemory+0x1c>
 8001598:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800159c:	623b      	str	r3, [r7, #32]
  s_command.Instruction       = MT25TL01G_RESET_MEMORY_CMD ;
 800159e:	2399      	movs	r3, #153	@ 0x99
 80015a0:	60bb      	str	r3, [r7, #8]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 80015a2:	2300      	movs	r3, #0
 80015a4:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.DataMode          = QSPI_DATA_NONE;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DummyCycles       = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61fb      	str	r3, [r7, #28]
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 80015b2:	2300      	movs	r3, #0
 80015b4:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 80015b6:	2300      	movs	r3, #0
 80015b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 80015ba:	2300      	movs	r3, #0
 80015bc:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Send the command */
  if (HAL_QSPI_Command(Ctx, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80015be:	f107 0308 	add.w	r3, r7, #8
 80015c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015c6:	4619      	mov	r1, r3
 80015c8:	6878      	ldr	r0, [r7, #4]
 80015ca:	f018 f97f 	bl	80198cc <HAL_QSPI_Command>
 80015ce:	4603      	mov	r3, r0
 80015d0:	2b00      	cmp	r3, #0
 80015d2:	d002      	beq.n	80015da <MT25TL01G_ResetMemory+0x5a>
  {
    return MT25TL01G_ERROR_COMMAND;
 80015d4:	f06f 0301 	mvn.w	r3, #1
 80015d8:	e000      	b.n	80015dc <MT25TL01G_ResetMemory+0x5c>
  }

  return MT25TL01G_OK;
 80015da:	2300      	movs	r3, #0
}
 80015dc:	4618      	mov	r0, r3
 80015de:	3740      	adds	r7, #64	@ 0x40
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bd80      	pop	{r7, pc}

080015e4 <NT35510_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t NT35510_RegisterBusIO (NT35510_Object_t *pObj, NT35510_IO_t *pIO)
{
 80015e4:	b480      	push	{r7}
 80015e6:	b085      	sub	sp, #20
 80015e8:	af00      	add	r7, sp, #0
 80015ea:	6078      	str	r0, [r7, #4]
 80015ec:	6039      	str	r1, [r7, #0]
  int32_t ret = NT35510_OK;
 80015ee:	2300      	movs	r3, #0
 80015f0:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	2b00      	cmp	r3, #0
 80015f6:	d103      	bne.n	8001600 <NT35510_RegisterBusIO+0x1c>
  {
    ret = NT35510_ERROR;
 80015f8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	e014      	b.n	800162a <NT35510_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001600:	683b      	ldr	r3, [r7, #0]
 8001602:	685a      	ldr	r2, [r3, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	689a      	ldr	r2, [r3, #8]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8001610:	683b      	ldr	r3, [r7, #0]
 8001612:	68da      	ldr	r2, [r3, #12]
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = NT35510_ReadRegWrap;
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	4a07      	ldr	r2, [pc, #28]	@ (8001638 <NT35510_RegisterBusIO+0x54>)
 800161c:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = NT35510_WriteRegWrap;
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	4a06      	ldr	r2, [pc, #24]	@ (800163c <NT35510_RegisterBusIO+0x58>)
 8001622:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 800162a:	68fb      	ldr	r3, [r7, #12]
}
 800162c:	4618      	mov	r0, r3
 800162e:	3714      	adds	r7, #20
 8001630:	46bd      	mov	sp, r7
 8001632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001636:	4770      	bx	lr
 8001638:	08001ecf 	.word	0x08001ecf
 800163c:	08001f01 	.word	0x08001f01

08001640 <NT35510_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t NT35510_Init(NT35510_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8001640:	b580      	push	{r7, lr}
 8001642:	b086      	sub	sp, #24
 8001644:	af00      	add	r7, sp, #0
 8001646:	60f8      	str	r0, [r7, #12]
 8001648:	60b9      	str	r1, [r7, #8]
 800164a:	607a      	str	r2, [r7, #4]
  static const uint8_t nt35510_reg34[] = {NT35510_CMD_WRCABCMB, 0xFF};
  static const uint8_t nt35510_reg35[] = {NT35510_CMD_RAMWR, 0x00};
  static const uint8_t nt35510_reg36[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB565};
  static const uint8_t nt35510_reg37[] = {NT35510_CMD_COLMOD, NT35510_COLMOD_RGB888};

  ret =  nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg, 5);/* LV2:  Page 1 enable */
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f103 0010 	add.w	r0, r3, #16
 8001652:	2305      	movs	r3, #5
 8001654:	4aa2      	ldr	r2, [pc, #648]	@ (80018e0 <NT35510_Init+0x2a0>)
 8001656:	21f0      	movs	r1, #240	@ 0xf0
 8001658:	f000 fc9c 	bl	8001f94 <nt35510_write_reg>
 800165c:	6178      	str	r0, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB0, nt35510_reg1, 3);/* AVDD: 5.2V */
 800165e:	68fb      	ldr	r3, [r7, #12]
 8001660:	f103 0010 	add.w	r0, r3, #16
 8001664:	2303      	movs	r3, #3
 8001666:	4a9f      	ldr	r2, [pc, #636]	@ (80018e4 <NT35510_Init+0x2a4>)
 8001668:	21b0      	movs	r1, #176	@ 0xb0
 800166a:	f000 fc93 	bl	8001f94 <nt35510_write_reg>
 800166e:	4602      	mov	r2, r0
 8001670:	697b      	ldr	r3, [r7, #20]
 8001672:	4413      	add	r3, r2
 8001674:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg2, 3); /* AVDD: Ratio */
 8001676:	68fb      	ldr	r3, [r7, #12]
 8001678:	f103 0010 	add.w	r0, r3, #16
 800167c:	2303      	movs	r3, #3
 800167e:	4a9a      	ldr	r2, [pc, #616]	@ (80018e8 <NT35510_Init+0x2a8>)
 8001680:	21b6      	movs	r1, #182	@ 0xb6
 8001682:	f000 fc87 	bl	8001f94 <nt35510_write_reg>
 8001686:	4602      	mov	r2, r0
 8001688:	697b      	ldr	r3, [r7, #20]
 800168a:	4413      	add	r3, r2
 800168c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg3, 3);/* AVEE: -5.2V */
 800168e:	68fb      	ldr	r3, [r7, #12]
 8001690:	f103 0010 	add.w	r0, r3, #16
 8001694:	2303      	movs	r3, #3
 8001696:	4a95      	ldr	r2, [pc, #596]	@ (80018ec <NT35510_Init+0x2ac>)
 8001698:	21b1      	movs	r1, #177	@ 0xb1
 800169a:	f000 fc7b 	bl	8001f94 <nt35510_write_reg>
 800169e:	4602      	mov	r2, r0
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	4413      	add	r3, r2
 80016a4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg4, 3);/* AVEE: Ratio */
 80016a6:	68fb      	ldr	r3, [r7, #12]
 80016a8:	f103 0010 	add.w	r0, r3, #16
 80016ac:	2303      	movs	r3, #3
 80016ae:	4a90      	ldr	r2, [pc, #576]	@ (80018f0 <NT35510_Init+0x2b0>)
 80016b0:	21b7      	movs	r1, #183	@ 0xb7
 80016b2:	f000 fc6f 	bl	8001f94 <nt35510_write_reg>
 80016b6:	4602      	mov	r2, r0
 80016b8:	697b      	ldr	r3, [r7, #20]
 80016ba:	4413      	add	r3, r2
 80016bc:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB2, nt35510_reg5, 3);/* VCL: -2.5V */
 80016be:	68fb      	ldr	r3, [r7, #12]
 80016c0:	f103 0010 	add.w	r0, r3, #16
 80016c4:	2303      	movs	r3, #3
 80016c6:	4a8b      	ldr	r2, [pc, #556]	@ (80018f4 <NT35510_Init+0x2b4>)
 80016c8:	21b2      	movs	r1, #178	@ 0xb2
 80016ca:	f000 fc63 	bl	8001f94 <nt35510_write_reg>
 80016ce:	4602      	mov	r2, r0
 80016d0:	697b      	ldr	r3, [r7, #20]
 80016d2:	4413      	add	r3, r2
 80016d4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg6, 3);/* VCL: Ratio */
 80016d6:	68fb      	ldr	r3, [r7, #12]
 80016d8:	f103 0010 	add.w	r0, r3, #16
 80016dc:	2303      	movs	r3, #3
 80016de:	4a86      	ldr	r2, [pc, #536]	@ (80018f8 <NT35510_Init+0x2b8>)
 80016e0:	21b8      	movs	r1, #184	@ 0xb8
 80016e2:	f000 fc57 	bl	8001f94 <nt35510_write_reg>
 80016e6:	4602      	mov	r2, r0
 80016e8:	697b      	ldr	r3, [r7, #20]
 80016ea:	4413      	add	r3, r2
 80016ec:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBF, nt35510_reg7, 1);/* VGH: 15V (Free Pump) */
 80016ee:	68fb      	ldr	r3, [r7, #12]
 80016f0:	f103 0010 	add.w	r0, r3, #16
 80016f4:	2301      	movs	r3, #1
 80016f6:	4a81      	ldr	r2, [pc, #516]	@ (80018fc <NT35510_Init+0x2bc>)
 80016f8:	21bf      	movs	r1, #191	@ 0xbf
 80016fa:	f000 fc4b 	bl	8001f94 <nt35510_write_reg>
 80016fe:	4602      	mov	r2, r0
 8001700:	697b      	ldr	r3, [r7, #20]
 8001702:	4413      	add	r3, r2
 8001704:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB3, nt35510_reg8, 3);
 8001706:	68fb      	ldr	r3, [r7, #12]
 8001708:	f103 0010 	add.w	r0, r3, #16
 800170c:	2303      	movs	r3, #3
 800170e:	4a7c      	ldr	r2, [pc, #496]	@ (8001900 <NT35510_Init+0x2c0>)
 8001710:	21b3      	movs	r1, #179	@ 0xb3
 8001712:	f000 fc3f 	bl	8001f94 <nt35510_write_reg>
 8001716:	4602      	mov	r2, r0
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	4413      	add	r3, r2
 800171c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB9, nt35510_reg9, 3);/* VGH: Ratio */ 
 800171e:	68fb      	ldr	r3, [r7, #12]
 8001720:	f103 0010 	add.w	r0, r3, #16
 8001724:	2303      	movs	r3, #3
 8001726:	4a77      	ldr	r2, [pc, #476]	@ (8001904 <NT35510_Init+0x2c4>)
 8001728:	21b9      	movs	r1, #185	@ 0xb9
 800172a:	f000 fc33 	bl	8001f94 <nt35510_write_reg>
 800172e:	4602      	mov	r2, r0
 8001730:	697b      	ldr	r3, [r7, #20]
 8001732:	4413      	add	r3, r2
 8001734:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg10, 3);/* VGL_REG: -10V */
 8001736:	68fb      	ldr	r3, [r7, #12]
 8001738:	f103 0010 	add.w	r0, r3, #16
 800173c:	2303      	movs	r3, #3
 800173e:	4a72      	ldr	r2, [pc, #456]	@ (8001908 <NT35510_Init+0x2c8>)
 8001740:	21b5      	movs	r1, #181	@ 0xb5
 8001742:	f000 fc27 	bl	8001f94 <nt35510_write_reg>
 8001746:	4602      	mov	r2, r0
 8001748:	697b      	ldr	r3, [r7, #20]
 800174a:	4413      	add	r3, r2
 800174c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg12, 3);/* VGLX: Ratio */
 800174e:	68fb      	ldr	r3, [r7, #12]
 8001750:	f103 0010 	add.w	r0, r3, #16
 8001754:	2303      	movs	r3, #3
 8001756:	4a6d      	ldr	r2, [pc, #436]	@ (800190c <NT35510_Init+0x2cc>)
 8001758:	21ba      	movs	r1, #186	@ 0xba
 800175a:	f000 fc1b 	bl	8001f94 <nt35510_write_reg>
 800175e:	4602      	mov	r2, r0
 8001760:	697b      	ldr	r3, [r7, #20]
 8001762:	4413      	add	r3, r2
 8001764:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg13, 3);/* VGMP/VGSP: 4.5V/0V */
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	f103 0010 	add.w	r0, r3, #16
 800176c:	2303      	movs	r3, #3
 800176e:	4a68      	ldr	r2, [pc, #416]	@ (8001910 <NT35510_Init+0x2d0>)
 8001770:	21bc      	movs	r1, #188	@ 0xbc
 8001772:	f000 fc0f 	bl	8001f94 <nt35510_write_reg>
 8001776:	4602      	mov	r2, r0
 8001778:	697b      	ldr	r3, [r7, #20]
 800177a:	4413      	add	r3, r2
 800177c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBD, nt35510_reg14, 3);/* VGMN/VGSN:-4.5V/0V */
 800177e:	68fb      	ldr	r3, [r7, #12]
 8001780:	f103 0010 	add.w	r0, r3, #16
 8001784:	2303      	movs	r3, #3
 8001786:	4a63      	ldr	r2, [pc, #396]	@ (8001914 <NT35510_Init+0x2d4>)
 8001788:	21bd      	movs	r1, #189	@ 0xbd
 800178a:	f000 fc03 	bl	8001f94 <nt35510_write_reg>
 800178e:	4602      	mov	r2, r0
 8001790:	697b      	ldr	r3, [r7, #20]
 8001792:	4413      	add	r3, r2
 8001794:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBE, nt35510_reg15, 2);/* VCOM: -1.325V */
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	f103 0010 	add.w	r0, r3, #16
 800179c:	2302      	movs	r3, #2
 800179e:	4a5e      	ldr	r2, [pc, #376]	@ (8001918 <NT35510_Init+0x2d8>)
 80017a0:	21be      	movs	r1, #190	@ 0xbe
 80017a2:	f000 fbf7 	bl	8001f94 <nt35510_write_reg>
 80017a6:	4602      	mov	r2, r0
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	4413      	add	r3, r2
 80017ac:	617b      	str	r3, [r7, #20]

/* ************************************************************************** */
/* Proprietary DCS Initialization                                             */
/* ************************************************************************** */

  ret += nt35510_write_reg(&pObj->Ctx, 0xF0, nt35510_reg16, 5);/* LV2: Page 0 enable */
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	f103 0010 	add.w	r0, r3, #16
 80017b4:	2305      	movs	r3, #5
 80017b6:	4a59      	ldr	r2, [pc, #356]	@ (800191c <NT35510_Init+0x2dc>)
 80017b8:	21f0      	movs	r1, #240	@ 0xf0
 80017ba:	f000 fbeb 	bl	8001f94 <nt35510_write_reg>
 80017be:	4602      	mov	r2, r0
 80017c0:	697b      	ldr	r3, [r7, #20]
 80017c2:	4413      	add	r3, r2
 80017c4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB1, nt35510_reg17, 2);/* Display optional control */
 80017c6:	68fb      	ldr	r3, [r7, #12]
 80017c8:	f103 0010 	add.w	r0, r3, #16
 80017cc:	2302      	movs	r3, #2
 80017ce:	4a54      	ldr	r2, [pc, #336]	@ (8001920 <NT35510_Init+0x2e0>)
 80017d0:	21b1      	movs	r1, #177	@ 0xb1
 80017d2:	f000 fbdf 	bl	8001f94 <nt35510_write_reg>
 80017d6:	4602      	mov	r2, r0
 80017d8:	697b      	ldr	r3, [r7, #20]
 80017da:	4413      	add	r3, r2
 80017dc:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB6, nt35510_reg18, 1);/* Set source output data hold time */
 80017de:	68fb      	ldr	r3, [r7, #12]
 80017e0:	f103 0010 	add.w	r0, r3, #16
 80017e4:	2301      	movs	r3, #1
 80017e6:	4a4f      	ldr	r2, [pc, #316]	@ (8001924 <NT35510_Init+0x2e4>)
 80017e8:	21b6      	movs	r1, #182	@ 0xb6
 80017ea:	f000 fbd3 	bl	8001f94 <nt35510_write_reg>
 80017ee:	4602      	mov	r2, r0
 80017f0:	697b      	ldr	r3, [r7, #20]
 80017f2:	4413      	add	r3, r2
 80017f4:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB5, nt35510_reg19, 1);/*Display resolution control */
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	f103 0010 	add.w	r0, r3, #16
 80017fc:	2301      	movs	r3, #1
 80017fe:	4a4a      	ldr	r2, [pc, #296]	@ (8001928 <NT35510_Init+0x2e8>)
 8001800:	21b5      	movs	r1, #181	@ 0xb5
 8001802:	f000 fbc7 	bl	8001f94 <nt35510_write_reg>
 8001806:	4602      	mov	r2, r0
 8001808:	697b      	ldr	r3, [r7, #20]
 800180a:	4413      	add	r3, r2
 800180c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB7, nt35510_reg20, 2);/* Gate EQ control */
 800180e:	68fb      	ldr	r3, [r7, #12]
 8001810:	f103 0010 	add.w	r0, r3, #16
 8001814:	2302      	movs	r3, #2
 8001816:	4a45      	ldr	r2, [pc, #276]	@ (800192c <NT35510_Init+0x2ec>)
 8001818:	21b7      	movs	r1, #183	@ 0xb7
 800181a:	f000 fbbb 	bl	8001f94 <nt35510_write_reg>
 800181e:	4602      	mov	r2, r0
 8001820:	697b      	ldr	r3, [r7, #20]
 8001822:	4413      	add	r3, r2
 8001824:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xB8, nt35510_reg21, 4);/* Src EQ control(Mode2) */
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	f103 0010 	add.w	r0, r3, #16
 800182c:	2304      	movs	r3, #4
 800182e:	4a40      	ldr	r2, [pc, #256]	@ (8001930 <NT35510_Init+0x2f0>)
 8001830:	21b8      	movs	r1, #184	@ 0xb8
 8001832:	f000 fbaf 	bl	8001f94 <nt35510_write_reg>
 8001836:	4602      	mov	r2, r0
 8001838:	697b      	ldr	r3, [r7, #20]
 800183a:	4413      	add	r3, r2
 800183c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBC, nt35510_reg22, 3);
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	f103 0010 	add.w	r0, r3, #16
 8001844:	2303      	movs	r3, #3
 8001846:	4a3b      	ldr	r2, [pc, #236]	@ (8001934 <NT35510_Init+0x2f4>)
 8001848:	21bc      	movs	r1, #188	@ 0xbc
 800184a:	f000 fba3 	bl	8001f94 <nt35510_write_reg>
 800184e:	4602      	mov	r2, r0
 8001850:	697b      	ldr	r3, [r7, #20]
 8001852:	4413      	add	r3, r2
 8001854:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xCC, nt35510_reg23, 3);
 8001856:	68fb      	ldr	r3, [r7, #12]
 8001858:	f103 0010 	add.w	r0, r3, #16
 800185c:	2303      	movs	r3, #3
 800185e:	4a36      	ldr	r2, [pc, #216]	@ (8001938 <NT35510_Init+0x2f8>)
 8001860:	21cc      	movs	r1, #204	@ 0xcc
 8001862:	f000 fb97 	bl	8001f94 <nt35510_write_reg>
 8001866:	4602      	mov	r2, r0
 8001868:	697b      	ldr	r3, [r7, #20]
 800186a:	4413      	add	r3, r2
 800186c:	617b      	str	r3, [r7, #20]
  ret += nt35510_write_reg(&pObj->Ctx, 0xBA, nt35510_reg24, 1);
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	f103 0010 	add.w	r0, r3, #16
 8001874:	2301      	movs	r3, #1
 8001876:	4a31      	ldr	r2, [pc, #196]	@ (800193c <NT35510_Init+0x2fc>)
 8001878:	21ba      	movs	r1, #186	@ 0xba
 800187a:	f000 fb8b 	bl	8001f94 <nt35510_write_reg>
 800187e:	4602      	mov	r2, r0
 8001880:	697b      	ldr	r3, [r7, #20]
 8001882:	4413      	add	r3, r2
 8001884:	617b      	str	r3, [r7, #20]

  /* Add a delay, otherwise MADCTL not taken */
  (void)NT35510_IO_Delay(pObj, 200);
 8001886:	21c8      	movs	r1, #200	@ 0xc8
 8001888:	68f8      	ldr	r0, [r7, #12]
 800188a:	f000 fb52 	bl	8001f32 <NT35510_IO_Delay>

  /* Configure orientation */
  if(Orientation == NT35510_ORIENTATION_PORTRAIT)
 800188e:	687b      	ldr	r3, [r7, #4]
 8001890:	2b00      	cmp	r3, #0
 8001892:	d15b      	bne.n	800194c <NT35510_Init+0x30c>
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_portrait[1], 0);
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	f103 0010 	add.w	r0, r3, #16
 800189a:	2300      	movs	r3, #0
 800189c:	4a28      	ldr	r2, [pc, #160]	@ (8001940 <NT35510_Init+0x300>)
 800189e:	2136      	movs	r1, #54	@ 0x36
 80018a0:	f000 fb78 	bl	8001f94 <nt35510_write_reg>
 80018a4:	4602      	mov	r2, r0
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	4413      	add	r3, r2
 80018aa:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	f103 0010 	add.w	r0, r3, #16
 80018b2:	2304      	movs	r3, #4
 80018b4:	4a23      	ldr	r2, [pc, #140]	@ (8001944 <NT35510_Init+0x304>)
 80018b6:	212a      	movs	r1, #42	@ 0x2a
 80018b8:	f000 fb6c 	bl	8001f94 <nt35510_write_reg>
 80018bc:	4602      	mov	r2, r0
 80018be:	697b      	ldr	r3, [r7, #20]
 80018c0:	4413      	add	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	f103 0010 	add.w	r0, r3, #16
 80018ca:	2304      	movs	r3, #4
 80018cc:	4a1e      	ldr	r2, [pc, #120]	@ (8001948 <NT35510_Init+0x308>)
 80018ce:	212b      	movs	r1, #43	@ 0x2b
 80018d0:	f000 fb60 	bl	8001f94 <nt35510_write_reg>
 80018d4:	4602      	mov	r2, r0
 80018d6:	697b      	ldr	r3, [r7, #20]
 80018d8:	4413      	add	r3, r2
 80018da:	617b      	str	r3, [r7, #20]
 80018dc:	e05a      	b.n	8001994 <NT35510_Init+0x354>
 80018de:	bf00      	nop
 80018e0:	080274dc 	.word	0x080274dc
 80018e4:	080274e4 	.word	0x080274e4
 80018e8:	080274e8 	.word	0x080274e8
 80018ec:	080274ec 	.word	0x080274ec
 80018f0:	080274f0 	.word	0x080274f0
 80018f4:	080274f4 	.word	0x080274f4
 80018f8:	080274f8 	.word	0x080274f8
 80018fc:	080274fc 	.word	0x080274fc
 8001900:	08027500 	.word	0x08027500
 8001904:	08027504 	.word	0x08027504
 8001908:	08027508 	.word	0x08027508
 800190c:	0802750c 	.word	0x0802750c
 8001910:	08027510 	.word	0x08027510
 8001914:	08027514 	.word	0x08027514
 8001918:	08027518 	.word	0x08027518
 800191c:	0802751c 	.word	0x0802751c
 8001920:	08027524 	.word	0x08027524
 8001924:	08027528 	.word	0x08027528
 8001928:	0802752c 	.word	0x0802752c
 800192c:	08027530 	.word	0x08027530
 8001930:	08027534 	.word	0x08027534
 8001934:	08027538 	.word	0x08027538
 8001938:	0802753c 	.word	0x0802753c
 800193c:	08027540 	.word	0x08027540
 8001940:	080274b5 	.word	0x080274b5
 8001944:	080274b8 	.word	0x080274b8
 8001948:	080274c0 	.word	0x080274c0
  }
  else
  {
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &nt35510_madctl_landscape[1], 0);
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	f103 0010 	add.w	r0, r3, #16
 8001952:	2300      	movs	r3, #0
 8001954:	4a5c      	ldr	r2, [pc, #368]	@ (8001ac8 <NT35510_Init+0x488>)
 8001956:	2136      	movs	r1, #54	@ 0x36
 8001958:	f000 fb1c 	bl	8001f94 <nt35510_write_reg>
 800195c:	4602      	mov	r2, r0
 800195e:	697b      	ldr	r3, [r7, #20]
 8001960:	4413      	add	r3, r2
 8001962:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	f103 0010 	add.w	r0, r3, #16
 800196a:	2304      	movs	r3, #4
 800196c:	4a57      	ldr	r2, [pc, #348]	@ (8001acc <NT35510_Init+0x48c>)
 800196e:	212a      	movs	r1, #42	@ 0x2a
 8001970:	f000 fb10 	bl	8001f94 <nt35510_write_reg>
 8001974:	4602      	mov	r2, r0
 8001976:	697b      	ldr	r3, [r7, #20]
 8001978:	4413      	add	r3, r2
 800197a:	617b      	str	r3, [r7, #20]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 800197c:	68fb      	ldr	r3, [r7, #12]
 800197e:	f103 0010 	add.w	r0, r3, #16
 8001982:	2304      	movs	r3, #4
 8001984:	4a52      	ldr	r2, [pc, #328]	@ (8001ad0 <NT35510_Init+0x490>)
 8001986:	212b      	movs	r1, #43	@ 0x2b
 8001988:	f000 fb04 	bl	8001f94 <nt35510_write_reg>
 800198c:	4602      	mov	r2, r0
 800198e:	697b      	ldr	r3, [r7, #20]
 8001990:	4413      	add	r3, r2
 8001992:	617b      	str	r3, [r7, #20]
  }

  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_SLPOUT, &nt35510_reg27[1], 0);
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	f103 0010 	add.w	r0, r3, #16
 800199a:	2300      	movs	r3, #0
 800199c:	4a4d      	ldr	r2, [pc, #308]	@ (8001ad4 <NT35510_Init+0x494>)
 800199e:	2111      	movs	r1, #17
 80019a0:	f000 faf8 	bl	8001f94 <nt35510_write_reg>
 80019a4:	4602      	mov	r2, r0
 80019a6:	697b      	ldr	r3, [r7, #20]
 80019a8:	4413      	add	r3, r2
 80019aa:	617b      	str	r3, [r7, #20]

  /* Wait for sleep out exit */
  (void)NT35510_IO_Delay(pObj, 20);
 80019ac:	2114      	movs	r1, #20
 80019ae:	68f8      	ldr	r0, [r7, #12]
 80019b0:	f000 fabf 	bl	8001f32 <NT35510_IO_Delay>

  switch(ColorCoding)
 80019b4:	68bb      	ldr	r3, [r7, #8]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d012      	beq.n	80019e0 <NT35510_Init+0x3a0>
 80019ba:	68bb      	ldr	r3, [r7, #8]
 80019bc:	2b02      	cmp	r3, #2
 80019be:	d11f      	bne.n	8001a00 <NT35510_Init+0x3c0>
  {
    case NT35510_FORMAT_RBG565 :
      /* Set Pixel color format to RGB565 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg36[1], 0);
 80019c0:	68fb      	ldr	r3, [r7, #12]
 80019c2:	f103 0010 	add.w	r0, r3, #16
 80019c6:	2300      	movs	r3, #0
 80019c8:	4a43      	ldr	r2, [pc, #268]	@ (8001ad8 <NT35510_Init+0x498>)
 80019ca:	213a      	movs	r1, #58	@ 0x3a
 80019cc:	f000 fae2 	bl	8001f94 <nt35510_write_reg>
 80019d0:	4602      	mov	r2, r0
 80019d2:	697b      	ldr	r3, [r7, #20]
 80019d4:	4413      	add	r3, r2
 80019d6:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RBG565;
 80019d8:	4b40      	ldr	r3, [pc, #256]	@ (8001adc <NT35510_Init+0x49c>)
 80019da:	2202      	movs	r2, #2
 80019dc:	605a      	str	r2, [r3, #4]
      break;
 80019de:	e01f      	b.n	8001a20 <NT35510_Init+0x3e0>
    case NT35510_FORMAT_RGB888 :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 80019e0:	68fb      	ldr	r3, [r7, #12]
 80019e2:	f103 0010 	add.w	r0, r3, #16
 80019e6:	2300      	movs	r3, #0
 80019e8:	4a3d      	ldr	r2, [pc, #244]	@ (8001ae0 <NT35510_Init+0x4a0>)
 80019ea:	213a      	movs	r1, #58	@ 0x3a
 80019ec:	f000 fad2 	bl	8001f94 <nt35510_write_reg>
 80019f0:	4602      	mov	r2, r0
 80019f2:	697b      	ldr	r3, [r7, #20]
 80019f4:	4413      	add	r3, r2
 80019f6:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 80019f8:	4b38      	ldr	r3, [pc, #224]	@ (8001adc <NT35510_Init+0x49c>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	605a      	str	r2, [r3, #4]
      break;
 80019fe:	e00f      	b.n	8001a20 <NT35510_Init+0x3e0>
    default :
      /* Set Pixel color format to RGB888 */
      ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_COLMOD, &nt35510_reg37[1], 0);
 8001a00:	68fb      	ldr	r3, [r7, #12]
 8001a02:	f103 0010 	add.w	r0, r3, #16
 8001a06:	2300      	movs	r3, #0
 8001a08:	4a35      	ldr	r2, [pc, #212]	@ (8001ae0 <NT35510_Init+0x4a0>)
 8001a0a:	213a      	movs	r1, #58	@ 0x3a
 8001a0c:	f000 fac2 	bl	8001f94 <nt35510_write_reg>
 8001a10:	4602      	mov	r2, r0
 8001a12:	697b      	ldr	r3, [r7, #20]
 8001a14:	4413      	add	r3, r2
 8001a16:	617b      	str	r3, [r7, #20]
	  NT35510Ctx.ColorCode = NT35510_FORMAT_RGB888;
 8001a18:	4b30      	ldr	r3, [pc, #192]	@ (8001adc <NT35510_Init+0x49c>)
 8001a1a:	2200      	movs	r2, #0
 8001a1c:	605a      	str	r2, [r3, #4]
      break;
 8001a1e:	bf00      	nop
  }

  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &nt35510_reg31[1], 0);
 8001a20:	68fb      	ldr	r3, [r7, #12]
 8001a22:	f103 0010 	add.w	r0, r3, #16
 8001a26:	2300      	movs	r3, #0
 8001a28:	4a2e      	ldr	r2, [pc, #184]	@ (8001ae4 <NT35510_Init+0x4a4>)
 8001a2a:	2151      	movs	r1, #81	@ 0x51
 8001a2c:	f000 fab2 	bl	8001f94 <nt35510_write_reg>
 8001a30:	4602      	mov	r2, r0
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	4413      	add	r3, r2
 8001a36:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCTRLD, &nt35510_reg32[1], 0);
 8001a38:	68fb      	ldr	r3, [r7, #12]
 8001a3a:	f103 0010 	add.w	r0, r3, #16
 8001a3e:	2300      	movs	r3, #0
 8001a40:	4a29      	ldr	r2, [pc, #164]	@ (8001ae8 <NT35510_Init+0x4a8>)
 8001a42:	2153      	movs	r1, #83	@ 0x53
 8001a44:	f000 faa6 	bl	8001f94 <nt35510_write_reg>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	4413      	add	r3, r2
 8001a4e:	617b      	str	r3, [r7, #20]

  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABC, &nt35510_reg33[1], 0);
 8001a50:	68fb      	ldr	r3, [r7, #12]
 8001a52:	f103 0010 	add.w	r0, r3, #16
 8001a56:	2300      	movs	r3, #0
 8001a58:	4a24      	ldr	r2, [pc, #144]	@ (8001aec <NT35510_Init+0x4ac>)
 8001a5a:	2155      	movs	r1, #85	@ 0x55
 8001a5c:	f000 fa9a 	bl	8001f94 <nt35510_write_reg>
 8001a60:	4602      	mov	r2, r0
 8001a62:	697b      	ldr	r3, [r7, #20]
 8001a64:	4413      	add	r3, r2
 8001a66:	617b      	str	r3, [r7, #20]

  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRCABCMB, &nt35510_reg34[1], 0);
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	f103 0010 	add.w	r0, r3, #16
 8001a6e:	2300      	movs	r3, #0
 8001a70:	4a1f      	ldr	r2, [pc, #124]	@ (8001af0 <NT35510_Init+0x4b0>)
 8001a72:	215e      	movs	r1, #94	@ 0x5e
 8001a74:	f000 fa8e 	bl	8001f94 <nt35510_write_reg>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	697b      	ldr	r3, [r7, #20]
 8001a7c:	4413      	add	r3, r2
 8001a7e:	617b      	str	r3, [r7, #20]

  /** CABC : Content Adaptive Backlight Control section end << */

  /* Send Command Display On */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &nt35510_reg30[1], 0);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	f103 0010 	add.w	r0, r3, #16
 8001a86:	2300      	movs	r3, #0
 8001a88:	4a1a      	ldr	r2, [pc, #104]	@ (8001af4 <NT35510_Init+0x4b4>)
 8001a8a:	2129      	movs	r1, #41	@ 0x29
 8001a8c:	f000 fa82 	bl	8001f94 <nt35510_write_reg>
 8001a90:	4602      	mov	r2, r0
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	4413      	add	r3, r2
 8001a96:	617b      	str	r3, [r7, #20]

  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RAMWR, &nt35510_reg35[1], 0);
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	f103 0010 	add.w	r0, r3, #16
 8001a9e:	2300      	movs	r3, #0
 8001aa0:	4a15      	ldr	r2, [pc, #84]	@ (8001af8 <NT35510_Init+0x4b8>)
 8001aa2:	212c      	movs	r1, #44	@ 0x2c
 8001aa4:	f000 fa76 	bl	8001f94 <nt35510_write_reg>
 8001aa8:	4602      	mov	r2, r0
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	4413      	add	r3, r2
 8001aae:	617b      	str	r3, [r7, #20]

  if(ret != NT35510_OK)
 8001ab0:	697b      	ldr	r3, [r7, #20]
 8001ab2:	2b00      	cmp	r3, #0
 8001ab4:	d002      	beq.n	8001abc <NT35510_Init+0x47c>
  {
    ret = NT35510_ERROR;
 8001ab6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aba:	617b      	str	r3, [r7, #20]
  }

  return ret;
 8001abc:	697b      	ldr	r3, [r7, #20]
}
 8001abe:	4618      	mov	r0, r3
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}
 8001ac6:	bf00      	nop
 8001ac8:	080274c9 	.word	0x080274c9
 8001acc:	080274cc 	.word	0x080274cc
 8001ad0:	080274d4 	.word	0x080274d4
 8001ad4:	08027545 	.word	0x08027545
 8001ad8:	08027549 	.word	0x08027549
 8001adc:	24000cf0 	.word	0x24000cf0
 8001ae0:	0802754d 	.word	0x0802754d
 8001ae4:	08027551 	.word	0x08027551
 8001ae8:	08027555 	.word	0x08027555
 8001aec:	08027559 	.word	0x08027559
 8001af0:	0802755d 	.word	0x0802755d
 8001af4:	08027561 	.word	0x08027561
 8001af8:	08027565 	.word	0x08027565

08001afc <NT35510_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DeInit(NT35510_Object_t *pObj)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  return NT35510_ERROR;
 8001b04:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001b08:	4618      	mov	r0, r3
 8001b0a:	370c      	adds	r7, #12
 8001b0c:	46bd      	mov	sp, r7
 8001b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b12:	4770      	bx	lr

08001b14 <NT35510_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t NT35510_ReadID(NT35510_Object_t *pObj, uint32_t *Id)
{ 
 8001b14:	b580      	push	{r7, lr}
 8001b16:	b084      	sub	sp, #16
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
 8001b1c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(nt35510_read_reg(&pObj->Ctx, NT35510_CMD_RDID2, (uint8_t *)Id, 1)!= NT35510_OK)
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	f103 0010 	add.w	r0, r3, #16
 8001b24:	2301      	movs	r3, #1
 8001b26:	683a      	ldr	r2, [r7, #0]
 8001b28:	21db      	movs	r1, #219	@ 0xdb
 8001b2a:	f000 fa1c 	bl	8001f66 <nt35510_read_reg>
 8001b2e:	4603      	mov	r3, r0
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <NT35510_ReadID+0x28>
  {
    ret = NT35510_ERROR;
 8001b34:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b38:	60fb      	str	r3, [r7, #12]
 8001b3a:	e001      	b.n	8001b40 <NT35510_ReadID+0x2c>
  }
  else
  {
    ret = NT35510_OK;
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	60fb      	str	r3, [r7, #12]
  }

  return ret;  
 8001b40:	68fb      	ldr	r3, [r7, #12]
}  
 8001b42:	4618      	mov	r0, r3
 8001b44:	3710      	adds	r7, #16
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
	...

08001b4c <NT35510_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t NT35510_SetBrightness(NT35510_Object_t *pObj, uint32_t Brightness)
{
 8001b4c:	b580      	push	{r7, lr}
 8001b4e:	b084      	sub	sp, #16
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
 8001b54:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8001b56:	683a      	ldr	r2, [r7, #0]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	021b      	lsls	r3, r3, #8
 8001b5c:	1a9b      	subs	r3, r3, r2
 8001b5e:	4a10      	ldr	r2, [pc, #64]	@ (8001ba0 <NT35510_SetBrightness+0x54>)
 8001b60:	fba2 2303 	umull	r2, r3, r2, r3
 8001b64:	095b      	lsrs	r3, r3, #5
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_WRDISBV, &brightness, 0) != NT35510_OK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f103 0010 	add.w	r0, r3, #16
 8001b70:	f107 020b 	add.w	r2, r7, #11
 8001b74:	2300      	movs	r3, #0
 8001b76:	2151      	movs	r1, #81	@ 0x51
 8001b78:	f000 fa0c 	bl	8001f94 <nt35510_write_reg>
 8001b7c:	4603      	mov	r3, r0
 8001b7e:	2b00      	cmp	r3, #0
 8001b80:	d003      	beq.n	8001b8a <NT35510_SetBrightness+0x3e>
  {
    ret = NT35510_ERROR;
 8001b82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	e004      	b.n	8001b94 <NT35510_SetBrightness+0x48>
  }
  else
  {
    NT35510Ctx.Brightness = Brightness;
 8001b8a:	4a06      	ldr	r2, [pc, #24]	@ (8001ba4 <NT35510_SetBrightness+0x58>)
 8001b8c:	683b      	ldr	r3, [r7, #0]
 8001b8e:	6093      	str	r3, [r2, #8]
    ret = NT35510_OK;
 8001b90:	2300      	movs	r3, #0
 8001b92:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8001b94:	68fb      	ldr	r3, [r7, #12]
}
 8001b96:	4618      	mov	r0, r3
 8001b98:	3710      	adds	r7, #16
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	51eb851f 	.word	0x51eb851f
 8001ba4:	24000cf0 	.word	0x24000cf0

08001ba8 <NT35510_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t NT35510_GetBrightness(NT35510_Object_t *pObj, uint32_t *Brightness)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b083      	sub	sp, #12
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  *Brightness = NT35510Ctx.Brightness;
 8001bb2:	4b05      	ldr	r3, [pc, #20]	@ (8001bc8 <NT35510_GetBrightness+0x20>)
 8001bb4:	689a      	ldr	r2, [r3, #8]
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	601a      	str	r2, [r3, #0]
  return NT35510_OK;  
 8001bba:	2300      	movs	r3, #0
}
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	370c      	adds	r7, #12
 8001bc0:	46bd      	mov	sp, r7
 8001bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc6:	4770      	bx	lr
 8001bc8:	24000cf0 	.word	0x24000cf0

08001bcc <NT35510_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOn(NT35510_Object_t *pObj)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b084      	sub	sp, #16
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001bd4:	2300      	movs	r3, #0
 8001bd6:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPON, &display, 0) != NT35510_OK)
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f103 0010 	add.w	r0, r3, #16
 8001bde:	f107 020b 	add.w	r2, r7, #11
 8001be2:	2300      	movs	r3, #0
 8001be4:	2129      	movs	r1, #41	@ 0x29
 8001be6:	f000 f9d5 	bl	8001f94 <nt35510_write_reg>
 8001bea:	4603      	mov	r3, r0
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d003      	beq.n	8001bf8 <NT35510_DisplayOn+0x2c>
  {
    ret = NT35510_ERROR;
 8001bf0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001bf4:	60fb      	str	r3, [r7, #12]
 8001bf6:	e001      	b.n	8001bfc <NT35510_DisplayOn+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8001bf8:	2300      	movs	r3, #0
 8001bfa:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001bfc:	68fb      	ldr	r3, [r7, #12]
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3710      	adds	r7, #16
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <NT35510_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t NT35510_DisplayOff(NT35510_Object_t *pObj)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b084      	sub	sp, #16
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(nt35510_write_reg(&pObj->Ctx, NT35510_CMD_DISPOFF, &display, 0) != NT35510_OK)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	f103 0010 	add.w	r0, r3, #16
 8001c18:	f107 020b 	add.w	r2, r7, #11
 8001c1c:	2300      	movs	r3, #0
 8001c1e:	2128      	movs	r1, #40	@ 0x28
 8001c20:	f000 f9b8 	bl	8001f94 <nt35510_write_reg>
 8001c24:	4603      	mov	r3, r0
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d003      	beq.n	8001c32 <NT35510_DisplayOff+0x2c>
  {
    ret = NT35510_ERROR;
 8001c2a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c2e:	60fb      	str	r3, [r7, #12]
 8001c30:	e001      	b.n	8001c36 <NT35510_DisplayOff+0x30>
  }
  else
  {
    ret = NT35510_OK;
 8001c32:	2300      	movs	r3, #0
 8001c34:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001c36:	68fb      	ldr	r3, [r7, #12]
}
 8001c38:	4618      	mov	r0, r3
 8001c3a:	3710      	adds	r7, #16
 8001c3c:	46bd      	mov	sp, r7
 8001c3e:	bd80      	pop	{r7, pc}

08001c40 <NT35510_SetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be set
  * @retval Component status
  */
int32_t NT35510_SetOrientation(NT35510_Object_t *pObj, uint32_t Orientation)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b084      	sub	sp, #16
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
 8001c48:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = NT35510_MADCTR_MODE_LANDSCAPE;
 8001c4a:	2360      	movs	r3, #96	@ 0x60
 8001c4c:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = NT35510_MADCTR_MODE_PORTRAIT;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != NT35510_ORIENTATION_LANDSCAPE) && (Orientation != NT35510_ORIENTATION_PORTRAIT))
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d006      	beq.n	8001c66 <NT35510_SetOrientation+0x26>
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	2b00      	cmp	r3, #0
 8001c5c:	d003      	beq.n	8001c66 <NT35510_SetOrientation+0x26>
  {
    ret = NT35510_ERROR;
 8001c5e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001c62:	60fb      	str	r3, [r7, #12]
 8001c64:	e04d      	b.n	8001d02 <NT35510_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == NT35510_ORIENTATION_LANDSCAPE)
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	2b01      	cmp	r3, #1
 8001c6a:	d125      	bne.n	8001cb8 <NT35510_SetOrientation+0x78>
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RDDMADCTL, &tmp, 0);
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	f103 0010 	add.w	r0, r3, #16
 8001c72:	f107 020b 	add.w	r2, r7, #11
 8001c76:	2300      	movs	r3, #0
 8001c78:	210b      	movs	r1, #11
 8001c7a:	f000 f98b 	bl	8001f94 <nt35510_write_reg>
 8001c7e:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_landscape, 4);
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	f103 0010 	add.w	r0, r3, #16
 8001c86:	2304      	movs	r3, #4
 8001c88:	4a23      	ldr	r2, [pc, #140]	@ (8001d18 <NT35510_SetOrientation+0xd8>)
 8001c8a:	212a      	movs	r1, #42	@ 0x2a
 8001c8c:	f000 f982 	bl	8001f94 <nt35510_write_reg>
 8001c90:	4602      	mov	r2, r0
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	4413      	add	r3, r2
 8001c96:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_landscape, 4);
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f103 0010 	add.w	r0, r3, #16
 8001c9e:	2304      	movs	r3, #4
 8001ca0:	4a1e      	ldr	r2, [pc, #120]	@ (8001d1c <NT35510_SetOrientation+0xdc>)
 8001ca2:	212b      	movs	r1, #43	@ 0x2b
 8001ca4:	f000 f976 	bl	8001f94 <nt35510_write_reg>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	4413      	add	r3, r2
 8001cae:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_LANDSCAPE;
 8001cb0:	4b1b      	ldr	r3, [pc, #108]	@ (8001d20 <NT35510_SetOrientation+0xe0>)
 8001cb2:	2201      	movs	r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
 8001cb6:	e024      	b.n	8001d02 <NT35510_SetOrientation+0xc2>
  }
  else
  {
    ret = nt35510_write_reg(&pObj->Ctx, NT35510_CMD_MADCTL, &tmp1, 0);
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f103 0010 	add.w	r0, r3, #16
 8001cbe:	f107 020a 	add.w	r2, r7, #10
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	2136      	movs	r1, #54	@ 0x36
 8001cc6:	f000 f965 	bl	8001f94 <nt35510_write_reg>
 8001cca:	60f8      	str	r0, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_CASET, nt35510_caset_portrait, 4);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	f103 0010 	add.w	r0, r3, #16
 8001cd2:	2304      	movs	r3, #4
 8001cd4:	4a13      	ldr	r2, [pc, #76]	@ (8001d24 <NT35510_SetOrientation+0xe4>)
 8001cd6:	212a      	movs	r1, #42	@ 0x2a
 8001cd8:	f000 f95c 	bl	8001f94 <nt35510_write_reg>
 8001cdc:	4602      	mov	r2, r0
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	4413      	add	r3, r2
 8001ce2:	60fb      	str	r3, [r7, #12]
    ret += nt35510_write_reg(&pObj->Ctx, NT35510_CMD_RASET, nt35510_raset_portrait, 4);
 8001ce4:	687b      	ldr	r3, [r7, #4]
 8001ce6:	f103 0010 	add.w	r0, r3, #16
 8001cea:	2304      	movs	r3, #4
 8001cec:	4a0e      	ldr	r2, [pc, #56]	@ (8001d28 <NT35510_SetOrientation+0xe8>)
 8001cee:	212b      	movs	r1, #43	@ 0x2b
 8001cf0:	f000 f950 	bl	8001f94 <nt35510_write_reg>
 8001cf4:	4602      	mov	r2, r0
 8001cf6:	68fb      	ldr	r3, [r7, #12]
 8001cf8:	4413      	add	r3, r2
 8001cfa:	60fb      	str	r3, [r7, #12]
    
    NT35510Ctx.Orientation = NT35510_ORIENTATION_PORTRAIT;
 8001cfc:	4b08      	ldr	r3, [pc, #32]	@ (8001d20 <NT35510_SetOrientation+0xe0>)
 8001cfe:	2200      	movs	r2, #0
 8001d00:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != NT35510_OK)
 8001d02:	68fb      	ldr	r3, [r7, #12]
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	d002      	beq.n	8001d0e <NT35510_SetOrientation+0xce>
  {
    ret = NT35510_ERROR;
 8001d08:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d0c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8001d0e:	68fb      	ldr	r3, [r7, #12]
}
 8001d10:	4618      	mov	r0, r3
 8001d12:	3710      	adds	r7, #16
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	080274cc 	.word	0x080274cc
 8001d1c:	080274d4 	.word	0x080274d4
 8001d20:	24000cf0 	.word	0x24000cf0
 8001d24:	080274b8 	.word	0x080274b8
 8001d28:	080274c0 	.word	0x080274c0

08001d2c <NT35510_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t NT35510_GetOrientation(NT35510_Object_t *pObj, uint32_t *Orientation)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	b083      	sub	sp, #12
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	6078      	str	r0, [r7, #4]
 8001d34:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = NT35510Ctx.Orientation;
 8001d36:	4b05      	ldr	r3, [pc, #20]	@ (8001d4c <NT35510_GetOrientation+0x20>)
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	683b      	ldr	r3, [r7, #0]
 8001d3c:	601a      	str	r2, [r3, #0]
  
  return NT35510_OK;
 8001d3e:	2300      	movs	r3, #0
}
 8001d40:	4618      	mov	r0, r3
 8001d42:	370c      	adds	r7, #12
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	24000cf0 	.word	0x24000cf0

08001d50 <NT35510_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t NT35510_GetXSize(NT35510_Object_t *pObj, uint32_t *Xsize)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8001d5a:	4b0e      	ldr	r3, [pc, #56]	@ (8001d94 <NT35510_GetXSize+0x44>)
 8001d5c:	681b      	ldr	r3, [r3, #0]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d002      	beq.n	8001d68 <NT35510_GetXSize+0x18>
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d005      	beq.n	8001d72 <NT35510_GetXSize+0x22>
 8001d66:	e009      	b.n	8001d7c <NT35510_GetXSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Xsize = NT35510_480X800_WIDTH;
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001d6e:	601a      	str	r2, [r3, #0]
    break;
 8001d70:	e009      	b.n	8001d86 <NT35510_GetXSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Xsize = NT35510_800X480_WIDTH;
 8001d72:	683b      	ldr	r3, [r7, #0]
 8001d74:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d78:	601a      	str	r2, [r3, #0]
    break;
 8001d7a:	e004      	b.n	8001d86 <NT35510_GetXSize+0x36>
  default:
    *Xsize = NT35510_800X480_WIDTH;
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001d82:	601a      	str	r2, [r3, #0]
    break;
 8001d84:	bf00      	nop
  }
  
  return NT35510_OK;
 8001d86:	2300      	movs	r3, #0
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	370c      	adds	r7, #12
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr
 8001d94:	24000cf0 	.word	0x24000cf0

08001d98 <NT35510_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t NT35510_GetYSize(NT35510_Object_t *pObj, uint32_t *Ysize)
{
 8001d98:	b480      	push	{r7}
 8001d9a:	b083      	sub	sp, #12
 8001d9c:	af00      	add	r7, sp, #0
 8001d9e:	6078      	str	r0, [r7, #4]
 8001da0:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(NT35510Ctx.Orientation)
 8001da2:	4b0e      	ldr	r3, [pc, #56]	@ (8001ddc <NT35510_GetYSize+0x44>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d002      	beq.n	8001db0 <NT35510_GetYSize+0x18>
 8001daa:	2b01      	cmp	r3, #1
 8001dac:	d005      	beq.n	8001dba <NT35510_GetYSize+0x22>
 8001dae:	e009      	b.n	8001dc4 <NT35510_GetYSize+0x2c>
  {
  case NT35510_ORIENTATION_PORTRAIT:
    *Ysize = NT35510_480X800_HEIGHT;
 8001db0:	683b      	ldr	r3, [r7, #0]
 8001db2:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8001db6:	601a      	str	r2, [r3, #0]
    break;
 8001db8:	e009      	b.n	8001dce <NT35510_GetYSize+0x36>
  case NT35510_ORIENTATION_LANDSCAPE:
    *Ysize = NT35510_800X480_HEIGHT;
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001dc0:	601a      	str	r2, [r3, #0]
    break;
 8001dc2:	e004      	b.n	8001dce <NT35510_GetYSize+0x36>
  default:
    *Ysize = NT35510_800X480_HEIGHT;
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8001dca:	601a      	str	r2, [r3, #0]
    break;
 8001dcc:	bf00      	nop
  }
  
  return NT35510_OK;
 8001dce:	2300      	movs	r3, #0
}
 8001dd0:	4618      	mov	r0, r3
 8001dd2:	370c      	adds	r7, #12
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dda:	4770      	bx	lr
 8001ddc:	24000cf0 	.word	0x24000cf0

08001de0 <NT35510_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t NT35510_SetCursor(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b085      	sub	sp, #20
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001df0:	4618      	mov	r0, r3
 8001df2:	3714      	adds	r7, #20
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr

08001dfc <NT35510_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t NT35510_DrawBitmap(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8001dfc:	b480      	push	{r7}
 8001dfe:	b085      	sub	sp, #20
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	60f8      	str	r0, [r7, #12]
 8001e04:	60b9      	str	r1, [r7, #8]
 8001e06:	607a      	str	r2, [r7, #4]
 8001e08:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001e0a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e0e:	4618      	mov	r0, r3
 8001e10:	3714      	adds	r7, #20
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr

08001e1a <NT35510_FillRGBRect>:

int32_t NT35510_FillRGBRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8001e1a:	b480      	push	{r7}
 8001e1c:	b085      	sub	sp, #20
 8001e1e:	af00      	add	r7, sp, #0
 8001e20:	60f8      	str	r0, [r7, #12]
 8001e22:	60b9      	str	r1, [r7, #8]
 8001e24:	607a      	str	r2, [r7, #4]
 8001e26:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001e28:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3714      	adds	r7, #20
 8001e30:	46bd      	mov	sp, r7
 8001e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e36:	4770      	bx	lr

08001e38 <NT35510_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawHLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b085      	sub	sp, #20
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
 8001e44:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001e46:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e4a:	4618      	mov	r0, r3
 8001e4c:	3714      	adds	r7, #20
 8001e4e:	46bd      	mov	sp, r7
 8001e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e54:	4770      	bx	lr

08001e56 <NT35510_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_DrawVLine(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8001e56:	b480      	push	{r7}
 8001e58:	b085      	sub	sp, #20
 8001e5a:	af00      	add	r7, sp, #0
 8001e5c:	60f8      	str	r0, [r7, #12]
 8001e5e:	60b9      	str	r1, [r7, #8]
 8001e60:	607a      	str	r2, [r7, #4]
 8001e62:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001e64:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e68:	4618      	mov	r0, r3
 8001e6a:	3714      	adds	r7, #20
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e72:	4770      	bx	lr

08001e74 <NT35510_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t NT35510_FillRect(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8001e74:	b480      	push	{r7}
 8001e76:	b085      	sub	sp, #20
 8001e78:	af00      	add	r7, sp, #0
 8001e7a:	60f8      	str	r0, [r7, #12]
 8001e7c:	60b9      	str	r1, [r7, #8]
 8001e7e:	607a      	str	r2, [r7, #4]
 8001e80:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001e86:	4618      	mov	r0, r3
 8001e88:	3714      	adds	r7, #20
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e90:	4770      	bx	lr

08001e92 <NT35510_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_GetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8001e92:	b480      	push	{r7}
 8001e94:	b085      	sub	sp, #20
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	60f8      	str	r0, [r7, #12]
 8001e9a:	60b9      	str	r1, [r7, #8]
 8001e9c:	607a      	str	r2, [r7, #4]
 8001e9e:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001ea0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ea4:	4618      	mov	r0, r3
 8001ea6:	3714      	adds	r7, #20
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eae:	4770      	bx	lr

08001eb0 <NT35510_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t NT35510_SetPixel(NT35510_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8001eb0:	b480      	push	{r7}
 8001eb2:	b085      	sub	sp, #20
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	60f8      	str	r0, [r7, #12]
 8001eb8:	60b9      	str	r1, [r7, #8]
 8001eba:	607a      	str	r2, [r7, #4]
 8001ebc:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return NT35510_ERROR;
 8001ebe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001ec2:	4618      	mov	r0, r3
 8001ec4:	3714      	adds	r7, #20
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <NT35510_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8001ece:	b590      	push	{r4, r7, lr}
 8001ed0:	b087      	sub	sp, #28
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	60f8      	str	r0, [r7, #12]
 8001ed6:	607a      	str	r2, [r7, #4]
 8001ed8:	461a      	mov	r2, r3
 8001eda:	460b      	mov	r3, r1
 8001edc:	817b      	strh	r3, [r7, #10]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8001ee2:	68fb      	ldr	r3, [r7, #12]
 8001ee4:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	689c      	ldr	r4, [r3, #8]
 8001eea:	697b      	ldr	r3, [r7, #20]
 8001eec:	8818      	ldrh	r0, [r3, #0]
 8001eee:	893b      	ldrh	r3, [r7, #8]
 8001ef0:	8979      	ldrh	r1, [r7, #10]
 8001ef2:	687a      	ldr	r2, [r7, #4]
 8001ef4:	47a0      	blx	r4
 8001ef6:	4603      	mov	r3, r0
}
 8001ef8:	4618      	mov	r0, r3
 8001efa:	371c      	adds	r7, #28
 8001efc:	46bd      	mov	sp, r7
 8001efe:	bd90      	pop	{r4, r7, pc}

08001f00 <NT35510_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t NT35510_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8001f00:	b590      	push	{r4, r7, lr}
 8001f02:	b087      	sub	sp, #28
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	60f8      	str	r0, [r7, #12]
 8001f08:	607a      	str	r2, [r7, #4]
 8001f0a:	461a      	mov	r2, r3
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	817b      	strh	r3, [r7, #10]
 8001f10:	4613      	mov	r3, r2
 8001f12:	813b      	strh	r3, [r7, #8]
  NT35510_Object_t *pObj = (NT35510_Object_t *)Handle;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8001f18:	697b      	ldr	r3, [r7, #20]
 8001f1a:	685c      	ldr	r4, [r3, #4]
 8001f1c:	697b      	ldr	r3, [r7, #20]
 8001f1e:	8818      	ldrh	r0, [r3, #0]
 8001f20:	893b      	ldrh	r3, [r7, #8]
 8001f22:	8979      	ldrh	r1, [r7, #10]
 8001f24:	687a      	ldr	r2, [r7, #4]
 8001f26:	47a0      	blx	r4
 8001f28:	4603      	mov	r3, r0
}
 8001f2a:	4618      	mov	r0, r3
 8001f2c:	371c      	adds	r7, #28
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd90      	pop	{r4, r7, pc}

08001f32 <NT35510_IO_Delay>:
/**
  * @brief  NT35510 delay
  * @param  Delay  Delay in ms
  */
static int32_t NT35510_IO_Delay(NT35510_Object_t *pObj, uint32_t Delay)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b084      	sub	sp, #16
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
 8001f3a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	68db      	ldr	r3, [r3, #12]
 8001f40:	4798      	blx	r3
 8001f42:	4603      	mov	r3, r0
 8001f44:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8001f46:	bf00      	nop
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	68db      	ldr	r3, [r3, #12]
 8001f4c:	4798      	blx	r3
 8001f4e:	4603      	mov	r3, r0
 8001f50:	461a      	mov	r2, r3
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	683a      	ldr	r2, [r7, #0]
 8001f58:	429a      	cmp	r2, r3
 8001f5a:	d8f5      	bhi.n	8001f48 <NT35510_IO_Delay+0x16>
  {
  }
  return NT35510_OK;
 8001f5c:	2300      	movs	r3, #0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3710      	adds	r7, #16
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}

08001f66 <nt35510_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t nt35510_read_reg(nt35510_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8001f66:	b590      	push	{r4, r7, lr}
 8001f68:	b085      	sub	sp, #20
 8001f6a:	af00      	add	r7, sp, #0
 8001f6c:	60f8      	str	r0, [r7, #12]
 8001f6e:	607a      	str	r2, [r7, #4]
 8001f70:	461a      	mov	r2, r3
 8001f72:	460b      	mov	r3, r1
 8001f74:	817b      	strh	r3, [r7, #10]
 8001f76:	4613      	mov	r3, r2
 8001f78:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	685c      	ldr	r4, [r3, #4]
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	6898      	ldr	r0, [r3, #8]
 8001f82:	893b      	ldrh	r3, [r7, #8]
 8001f84:	8979      	ldrh	r1, [r7, #10]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	47a0      	blx	r4
 8001f8a:	4603      	mov	r3, r0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bd90      	pop	{r4, r7, pc}

08001f94 <nt35510_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t nt35510_write_reg(nt35510_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8001f94:	b590      	push	{r4, r7, lr}
 8001f96:	b085      	sub	sp, #20
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	607a      	str	r2, [r7, #4]
 8001f9e:	461a      	mov	r2, r3
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	817b      	strh	r3, [r7, #10]
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681c      	ldr	r4, [r3, #0]
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6898      	ldr	r0, [r3, #8]
 8001fb0:	893b      	ldrh	r3, [r7, #8]
 8001fb2:	8979      	ldrh	r1, [r7, #10]
 8001fb4:	687a      	ldr	r2, [r7, #4]
 8001fb6:	47a0      	blx	r4
 8001fb8:	4603      	mov	r3, r0
}
 8001fba:	4618      	mov	r0, r3
 8001fbc:	3714      	adds	r7, #20
 8001fbe:	46bd      	mov	sp, r7
 8001fc0:	bd90      	pop	{r4, r7, pc}
	...

08001fc4 <OTM8009A_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OTM8009A_RegisterBusIO (OTM8009A_Object_t *pObj, OTM8009A_IO_t *pIO)
{
 8001fc4:	b480      	push	{r7}
 8001fc6:	b085      	sub	sp, #20
 8001fc8:	af00      	add	r7, sp, #0
 8001fca:	6078      	str	r0, [r7, #4]
 8001fcc:	6039      	str	r1, [r7, #0]
  int32_t ret = OTM8009A_OK;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60fb      	str	r3, [r7, #12]

  if(pObj == NULL)
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <OTM8009A_RegisterBusIO+0x1c>
  {
    ret = OTM8009A_ERROR;
 8001fd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001fdc:	60fb      	str	r3, [r7, #12]
 8001fde:	e014      	b.n	800200a <OTM8009A_RegisterBusIO+0x46>
  }
  else
  {
    pObj->IO.WriteReg  = pIO->WriteReg;
 8001fe0:	683b      	ldr	r3, [r7, #0]
 8001fe2:	685a      	ldr	r2, [r3, #4]
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	605a      	str	r2, [r3, #4]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8001fe8:	683b      	ldr	r3, [r7, #0]
 8001fea:	689a      	ldr	r2, [r3, #8]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	609a      	str	r2, [r3, #8]
    pObj->IO.GetTick   = pIO->GetTick;
 8001ff0:	683b      	ldr	r3, [r7, #0]
 8001ff2:	68da      	ldr	r2, [r3, #12]
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	60da      	str	r2, [r3, #12]
    
    pObj->Ctx.ReadReg  = OTM8009A_ReadRegWrap;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	4a07      	ldr	r2, [pc, #28]	@ (8002018 <OTM8009A_RegisterBusIO+0x54>)
 8001ffc:	615a      	str	r2, [r3, #20]
    pObj->Ctx.WriteReg = OTM8009A_WriteRegWrap;
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	4a06      	ldr	r2, [pc, #24]	@ (800201c <OTM8009A_RegisterBusIO+0x58>)
 8002002:	611a      	str	r2, [r3, #16]
    pObj->Ctx.handle   = pObj;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	687a      	ldr	r2, [r7, #4]
 8002008:	619a      	str	r2, [r3, #24]
  }
  
  return ret;
 800200a:	68fb      	ldr	r3, [r7, #12]
}
 800200c:	4618      	mov	r0, r3
 800200e:	3714      	adds	r7, #20
 8002010:	46bd      	mov	sp, r7
 8002012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002016:	4770      	bx	lr
 8002018:	08002f7f 	.word	0x08002f7f
 800201c:	08002fb1 	.word	0x08002fb1

08002020 <OTM8009A_Init>:
  * @param  ColorCoding   Color Code
  * @param  Orientation   Display orientation
  * @retval Component status
  */
int32_t OTM8009A_Init(OTM8009A_Object_t *pObj, uint32_t ColorCoding, uint32_t Orientation)
{
 8002020:	b580      	push	{r7, lr}
 8002022:	b086      	sub	sp, #24
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
    0xE0,0xF0,0x00,OTM8009A_COLMOD_RGB565,OTM8009A_COLMOD_RGB888,0x7F,0x2C,0x02,0xFF,0x00,
    0x00,0x00,0x66,0xB6,0x06,0xB1,0x06};
  
  /* Enable CMD2 to access vendor specific commands                               */
  /* Enter in command 2 mode and set EXTC to enable address shift function (0x00) */ 
  ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 800202c:	68fb      	ldr	r3, [r7, #12]
 800202e:	f103 0010 	add.w	r0, r3, #16
 8002032:	2300      	movs	r3, #0
 8002034:	4abf      	ldr	r2, [pc, #764]	@ (8002334 <OTM8009A_Init+0x314>)
 8002036:	2100      	movs	r1, #0
 8002038:	f001 f804 	bl	8003044 <otm8009a_write_reg>
 800203c:	6178      	str	r0, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data1, 3);
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	f103 0010 	add.w	r0, r3, #16
 8002044:	2303      	movs	r3, #3
 8002046:	4abc      	ldr	r2, [pc, #752]	@ (8002338 <OTM8009A_Init+0x318>)
 8002048:	21ff      	movs	r1, #255	@ 0xff
 800204a:	f000 fffb 	bl	8003044 <otm8009a_write_reg>
 800204e:	4602      	mov	r2, r0
 8002050:	697b      	ldr	r3, [r7, #20]
 8002052:	4413      	add	r3, r2
 8002054:	617b      	str	r3, [r7, #20]
  
  /* Enter ORISE Command 2 */
  /* Shift address to 0x80 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8002056:	68fb      	ldr	r3, [r7, #12]
 8002058:	f103 0010 	add.w	r0, r3, #16
 800205c:	2300      	movs	r3, #0
 800205e:	4ab7      	ldr	r2, [pc, #732]	@ (800233c <OTM8009A_Init+0x31c>)
 8002060:	2100      	movs	r1, #0
 8002062:	f000 ffef 	bl	8003044 <otm8009a_write_reg>
 8002066:	4602      	mov	r2, r0
 8002068:	697b      	ldr	r3, [r7, #20]
 800206a:	4413      	add	r3, r2
 800206c:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data2, 2);
 800206e:	68fb      	ldr	r3, [r7, #12]
 8002070:	f103 0010 	add.w	r0, r3, #16
 8002074:	2302      	movs	r3, #2
 8002076:	4ab2      	ldr	r2, [pc, #712]	@ (8002340 <OTM8009A_Init+0x320>)
 8002078:	21ff      	movs	r1, #255	@ 0xff
 800207a:	f000 ffe3 	bl	8003044 <otm8009a_write_reg>
 800207e:	4602      	mov	r2, r0
 8002080:	697b      	ldr	r3, [r7, #20]
 8002082:	4413      	add	r3, r2
 8002084:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////
  /* SD_PCH_CTRL - 0xC480h - 129th parameter - Default 0x00          */
  /* Set SD_PT                                                       */
  /* -> Source output level during porch and non-display area to GND */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8002086:	68fb      	ldr	r3, [r7, #12]
 8002088:	f103 0010 	add.w	r0, r3, #16
 800208c:	2300      	movs	r3, #0
 800208e:	4aab      	ldr	r2, [pc, #684]	@ (800233c <OTM8009A_Init+0x31c>)
 8002090:	2100      	movs	r1, #0
 8002092:	f000 ffd7 	bl	8003044 <otm8009a_write_reg>
 8002096:	4602      	mov	r2, r0
 8002098:	697b      	ldr	r3, [r7, #20]
 800209a:	4413      	add	r3, r2
 800209c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[3], 0);
 800209e:	68fb      	ldr	r3, [r7, #12]
 80020a0:	f103 0010 	add.w	r0, r3, #16
 80020a4:	2300      	movs	r3, #0
 80020a6:	4aa7      	ldr	r2, [pc, #668]	@ (8002344 <OTM8009A_Init+0x324>)
 80020a8:	21c4      	movs	r1, #196	@ 0xc4
 80020aa:	f000 ffcb 	bl	8003044 <otm8009a_write_reg>
 80020ae:	4602      	mov	r2, r0
 80020b0:	697b      	ldr	r3, [r7, #20]
 80020b2:	4413      	add	r3, r2
 80020b4:	617b      	str	r3, [r7, #20]
  
  (void)OTM8009A_IO_Delay(pObj, 10);
 80020b6:	210a      	movs	r1, #10
 80020b8:	68f8      	ldr	r0, [r7, #12]
 80020ba:	f000 ff92 	bl	8002fe2 <OTM8009A_IO_Delay>
  /* Not documented */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[4], 0);
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	f103 0010 	add.w	r0, r3, #16
 80020c4:	2300      	movs	r3, #0
 80020c6:	4aa0      	ldr	r2, [pc, #640]	@ (8002348 <OTM8009A_Init+0x328>)
 80020c8:	2100      	movs	r1, #0
 80020ca:	f000 ffbb 	bl	8003044 <otm8009a_write_reg>
 80020ce:	4602      	mov	r2, r0
 80020d0:	697b      	ldr	r3, [r7, #20]
 80020d2:	4413      	add	r3, r2
 80020d4:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[5], 0);
 80020d6:	68fb      	ldr	r3, [r7, #12]
 80020d8:	f103 0010 	add.w	r0, r3, #16
 80020dc:	2300      	movs	r3, #0
 80020de:	4a9b      	ldr	r2, [pc, #620]	@ (800234c <OTM8009A_Init+0x32c>)
 80020e0:	21c4      	movs	r1, #196	@ 0xc4
 80020e2:	f000 ffaf 	bl	8003044 <otm8009a_write_reg>
 80020e6:	4602      	mov	r2, r0
 80020e8:	697b      	ldr	r3, [r7, #20]
 80020ea:	4413      	add	r3, r2
 80020ec:	617b      	str	r3, [r7, #20]
  (void)OTM8009A_IO_Delay(pObj, 10);
 80020ee:	210a      	movs	r1, #10
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f000 ff76 	bl	8002fe2 <OTM8009A_IO_Delay>
  /////////////////////////////////////////////////////////////////////
  
  /* PWR_CTRL4 - 0xC4B0h - 178th parameter - Default 0xA8 */
  /* Set gvdd_en_test                                     */
  /* -> enable GVDD test mode !!!                         */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[6], 0);
 80020f6:	68fb      	ldr	r3, [r7, #12]
 80020f8:	f103 0010 	add.w	r0, r3, #16
 80020fc:	2300      	movs	r3, #0
 80020fe:	4a94      	ldr	r2, [pc, #592]	@ (8002350 <OTM8009A_Init+0x330>)
 8002100:	2100      	movs	r1, #0
 8002102:	f000 ff9f 	bl	8003044 <otm8009a_write_reg>
 8002106:	4602      	mov	r2, r0
 8002108:	697b      	ldr	r3, [r7, #20]
 800210a:	4413      	add	r3, r2
 800210c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[7], 0);
 800210e:	68fb      	ldr	r3, [r7, #12]
 8002110:	f103 0010 	add.w	r0, r3, #16
 8002114:	2300      	movs	r3, #0
 8002116:	4a8f      	ldr	r2, [pc, #572]	@ (8002354 <OTM8009A_Init+0x334>)
 8002118:	21c5      	movs	r1, #197	@ 0xc5
 800211a:	f000 ff93 	bl	8003044 <otm8009a_write_reg>
 800211e:	4602      	mov	r2, r0
 8002120:	697b      	ldr	r3, [r7, #20]
 8002122:	4413      	add	r3, r2
 8002124:	617b      	str	r3, [r7, #20]
  /* PWR_CTRL2 - 0xC590h - 146th parameter - Default 0x79      */
  /* Set pump 4 vgh voltage                                    */
  /* -> from 15.0v down to 13.0v                               */
  /* Set pump 5 vgh voltage                                    */
  /* -> from -12.0v downto -9.0v                               */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[8], 0);
 8002126:	68fb      	ldr	r3, [r7, #12]
 8002128:	f103 0010 	add.w	r0, r3, #16
 800212c:	2300      	movs	r3, #0
 800212e:	4a8a      	ldr	r2, [pc, #552]	@ (8002358 <OTM8009A_Init+0x338>)
 8002130:	2100      	movs	r1, #0
 8002132:	f000 ff87 	bl	8003044 <otm8009a_write_reg>
 8002136:	4602      	mov	r2, r0
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	4413      	add	r3, r2
 800213c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	f103 0010 	add.w	r0, r3, #16
 8002144:	2300      	movs	r3, #0
 8002146:	4a85      	ldr	r2, [pc, #532]	@ (800235c <OTM8009A_Init+0x33c>)
 8002148:	21c5      	movs	r1, #197	@ 0xc5
 800214a:	f000 ff7b 	bl	8003044 <otm8009a_write_reg>
 800214e:	4602      	mov	r2, r0
 8002150:	697b      	ldr	r3, [r7, #20]
 8002152:	4413      	add	r3, r2
 8002154:	617b      	str	r3, [r7, #20]
  
  /* P_DRV_M - 0xC0B4h - 181th parameter - Default 0x00 */
  /* -> Column inversion                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[10], 0);
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	f103 0010 	add.w	r0, r3, #16
 800215c:	2300      	movs	r3, #0
 800215e:	4a80      	ldr	r2, [pc, #512]	@ (8002360 <OTM8009A_Init+0x340>)
 8002160:	2100      	movs	r1, #0
 8002162:	f000 ff6f 	bl	8003044 <otm8009a_write_reg>
 8002166:	4602      	mov	r2, r0
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	4413      	add	r3, r2
 800216c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[11], 0);
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	f103 0010 	add.w	r0, r3, #16
 8002174:	2300      	movs	r3, #0
 8002176:	4a7b      	ldr	r2, [pc, #492]	@ (8002364 <OTM8009A_Init+0x344>)
 8002178:	21c0      	movs	r1, #192	@ 0xc0
 800217a:	f000 ff63 	bl	8003044 <otm8009a_write_reg>
 800217e:	4602      	mov	r2, r0
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	4413      	add	r3, r2
 8002184:	617b      	str	r3, [r7, #20]
  
  /* VCOMDC - 0xD900h - 1st parameter - Default 0x39h */
  /* VCOM Voltage settings                            */
  /* -> from -1.0000v downto -1.2625v                 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002186:	68fb      	ldr	r3, [r7, #12]
 8002188:	f103 0010 	add.w	r0, r3, #16
 800218c:	2300      	movs	r3, #0
 800218e:	4a69      	ldr	r2, [pc, #420]	@ (8002334 <OTM8009A_Init+0x314>)
 8002190:	2100      	movs	r1, #0
 8002192:	f000 ff57 	bl	8003044 <otm8009a_write_reg>
 8002196:	4602      	mov	r2, r0
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	4413      	add	r3, r2
 800219c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD9, &short_reg_data[12], 0);
 800219e:	68fb      	ldr	r3, [r7, #12]
 80021a0:	f103 0010 	add.w	r0, r3, #16
 80021a4:	2300      	movs	r3, #0
 80021a6:	4a70      	ldr	r2, [pc, #448]	@ (8002368 <OTM8009A_Init+0x348>)
 80021a8:	21d9      	movs	r1, #217	@ 0xd9
 80021aa:	f000 ff4b 	bl	8003044 <otm8009a_write_reg>
 80021ae:	4602      	mov	r2, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	4413      	add	r3, r2
 80021b4:	617b      	str	r3, [r7, #20]
  
  /* Oscillator adjustment for Idle/Normal mode (LPDT only) set to 65Hz (default is 60Hz) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80021b6:	68fb      	ldr	r3, [r7, #12]
 80021b8:	f103 0010 	add.w	r0, r3, #16
 80021bc:	2300      	movs	r3, #0
 80021be:	4a6b      	ldr	r2, [pc, #428]	@ (800236c <OTM8009A_Init+0x34c>)
 80021c0:	2100      	movs	r1, #0
 80021c2:	f000 ff3f 	bl	8003044 <otm8009a_write_reg>
 80021c6:	4602      	mov	r2, r0
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	4413      	add	r3, r2
 80021cc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[14], 0);
 80021ce:	68fb      	ldr	r3, [r7, #12]
 80021d0:	f103 0010 	add.w	r0, r3, #16
 80021d4:	2300      	movs	r3, #0
 80021d6:	4a66      	ldr	r2, [pc, #408]	@ (8002370 <OTM8009A_Init+0x350>)
 80021d8:	21c1      	movs	r1, #193	@ 0xc1
 80021da:	f000 ff33 	bl	8003044 <otm8009a_write_reg>
 80021de:	4602      	mov	r2, r0
 80021e0:	697b      	ldr	r3, [r7, #20]
 80021e2:	4413      	add	r3, r2
 80021e4:	617b      	str	r3, [r7, #20]
  
  /* Video mode internal */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80021e6:	68fb      	ldr	r3, [r7, #12]
 80021e8:	f103 0010 	add.w	r0, r3, #16
 80021ec:	2300      	movs	r3, #0
 80021ee:	4a61      	ldr	r2, [pc, #388]	@ (8002374 <OTM8009A_Init+0x354>)
 80021f0:	2100      	movs	r1, #0
 80021f2:	f000 ff27 	bl	8003044 <otm8009a_write_reg>
 80021f6:	4602      	mov	r2, r0
 80021f8:	697b      	ldr	r3, [r7, #20]
 80021fa:	4413      	add	r3, r2
 80021fc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[16], 0);
 80021fe:	68fb      	ldr	r3, [r7, #12]
 8002200:	f103 0010 	add.w	r0, r3, #16
 8002204:	2300      	movs	r3, #0
 8002206:	4a5c      	ldr	r2, [pc, #368]	@ (8002378 <OTM8009A_Init+0x358>)
 8002208:	21c1      	movs	r1, #193	@ 0xc1
 800220a:	f000 ff1b 	bl	8003044 <otm8009a_write_reg>
 800220e:	4602      	mov	r2, r0
 8002210:	697b      	ldr	r3, [r7, #20]
 8002212:	4413      	add	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 147h parameter - Default 0x00 */
  /* Set pump 4&5 x6                                     */
  /* -> ONLY VALID when PUMP4_EN_ASDM_HV = "0"           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[17], 0);
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	f103 0010 	add.w	r0, r3, #16
 800221c:	2300      	movs	r3, #0
 800221e:	4a57      	ldr	r2, [pc, #348]	@ (800237c <OTM8009A_Init+0x35c>)
 8002220:	2100      	movs	r1, #0
 8002222:	f000 ff0f 	bl	8003044 <otm8009a_write_reg>
 8002226:	4602      	mov	r2, r0
 8002228:	697b      	ldr	r3, [r7, #20]
 800222a:	4413      	add	r3, r2
 800222c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[18], 0);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	f103 0010 	add.w	r0, r3, #16
 8002234:	2300      	movs	r3, #0
 8002236:	4a52      	ldr	r2, [pc, #328]	@ (8002380 <OTM8009A_Init+0x360>)
 8002238:	21c5      	movs	r1, #197	@ 0xc5
 800223a:	f000 ff03 	bl	8003044 <otm8009a_write_reg>
 800223e:	4602      	mov	r2, r0
 8002240:	697b      	ldr	r3, [r7, #20]
 8002242:	4413      	add	r3, r2
 8002244:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 150th parameter - Default 0x33h */
  /* Change pump4 clock ratio                              */
  /* -> from 1 line to 1/2 line                            */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[19], 0);
 8002246:	68fb      	ldr	r3, [r7, #12]
 8002248:	f103 0010 	add.w	r0, r3, #16
 800224c:	2300      	movs	r3, #0
 800224e:	4a4d      	ldr	r2, [pc, #308]	@ (8002384 <OTM8009A_Init+0x364>)
 8002250:	2100      	movs	r1, #0
 8002252:	f000 fef7 	bl	8003044 <otm8009a_write_reg>
 8002256:	4602      	mov	r2, r0
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	4413      	add	r3, r2
 800225c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[9], 0);
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	f103 0010 	add.w	r0, r3, #16
 8002264:	2300      	movs	r3, #0
 8002266:	4a3d      	ldr	r2, [pc, #244]	@ (800235c <OTM8009A_Init+0x33c>)
 8002268:	21c5      	movs	r1, #197	@ 0xc5
 800226a:	f000 feeb 	bl	8003044 <otm8009a_write_reg>
 800226e:	4602      	mov	r2, r0
 8002270:	697b      	ldr	r3, [r7, #20]
 8002272:	4413      	add	r3, r2
 8002274:	617b      	str	r3, [r7, #20]
  
  /* GVDD/NGVDD settings */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	f103 0010 	add.w	r0, r3, #16
 800227c:	2300      	movs	r3, #0
 800227e:	4a2d      	ldr	r2, [pc, #180]	@ (8002334 <OTM8009A_Init+0x314>)
 8002280:	2100      	movs	r1, #0
 8002282:	f000 fedf 	bl	8003044 <otm8009a_write_reg>
 8002286:	4602      	mov	r2, r0
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	4413      	add	r3, r2
 800228c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xD8, lcd_reg_data5, 2);
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	f103 0010 	add.w	r0, r3, #16
 8002294:	2302      	movs	r3, #2
 8002296:	4a3c      	ldr	r2, [pc, #240]	@ (8002388 <OTM8009A_Init+0x368>)
 8002298:	21d8      	movs	r1, #216	@ 0xd8
 800229a:	f000 fed3 	bl	8003044 <otm8009a_write_reg>
 800229e:	4602      	mov	r2, r0
 80022a0:	697b      	ldr	r3, [r7, #20]
 80022a2:	4413      	add	r3, r2
 80022a4:	617b      	str	r3, [r7, #20]
  
  /* PWR_CTRL2 - 0xC590h - 149th parameter - Default 0x33h */
  /* Rewrite the default value !                           */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[20], 0);
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	f103 0010 	add.w	r0, r3, #16
 80022ac:	2300      	movs	r3, #0
 80022ae:	4a37      	ldr	r2, [pc, #220]	@ (800238c <OTM8009A_Init+0x36c>)
 80022b0:	2100      	movs	r1, #0
 80022b2:	f000 fec7 	bl	8003044 <otm8009a_write_reg>
 80022b6:	4602      	mov	r2, r0
 80022b8:	697b      	ldr	r3, [r7, #20]
 80022ba:	4413      	add	r3, r2
 80022bc:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[21], 0);
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	f103 0010 	add.w	r0, r3, #16
 80022c4:	2300      	movs	r3, #0
 80022c6:	4a32      	ldr	r2, [pc, #200]	@ (8002390 <OTM8009A_Init+0x370>)
 80022c8:	21c5      	movs	r1, #197	@ 0xc5
 80022ca:	f000 febb 	bl	8003044 <otm8009a_write_reg>
 80022ce:	4602      	mov	r2, r0
 80022d0:	697b      	ldr	r3, [r7, #20]
 80022d2:	4413      	add	r3, r2
 80022d4:	617b      	str	r3, [r7, #20]
  
  /* Panel display timing Setting 3 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[22], 0);
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	f103 0010 	add.w	r0, r3, #16
 80022dc:	2300      	movs	r3, #0
 80022de:	4a2d      	ldr	r2, [pc, #180]	@ (8002394 <OTM8009A_Init+0x374>)
 80022e0:	2100      	movs	r1, #0
 80022e2:	f000 feaf 	bl	8003044 <otm8009a_write_reg>
 80022e6:	4602      	mov	r2, r0
 80022e8:	697b      	ldr	r3, [r7, #20]
 80022ea:	4413      	add	r3, r2
 80022ec:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC0, &short_reg_data[23], 0);
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	f103 0010 	add.w	r0, r3, #16
 80022f4:	2300      	movs	r3, #0
 80022f6:	4a28      	ldr	r2, [pc, #160]	@ (8002398 <OTM8009A_Init+0x378>)
 80022f8:	21c0      	movs	r1, #192	@ 0xc0
 80022fa:	f000 fea3 	bl	8003044 <otm8009a_write_reg>
 80022fe:	4602      	mov	r2, r0
 8002300:	697b      	ldr	r3, [r7, #20]
 8002302:	4413      	add	r3, r2
 8002304:	617b      	str	r3, [r7, #20]
  
  /* Power control 1 */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[24], 0);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	f103 0010 	add.w	r0, r3, #16
 800230c:	2300      	movs	r3, #0
 800230e:	4a23      	ldr	r2, [pc, #140]	@ (800239c <OTM8009A_Init+0x37c>)
 8002310:	2100      	movs	r1, #0
 8002312:	f000 fe97 	bl	8003044 <otm8009a_write_reg>
 8002316:	4602      	mov	r2, r0
 8002318:	697b      	ldr	r3, [r7, #20]
 800231a:	4413      	add	r3, r2
 800231c:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[25], 0);
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	f103 0010 	add.w	r0, r3, #16
 8002324:	2300      	movs	r3, #0
 8002326:	4a1e      	ldr	r2, [pc, #120]	@ (80023a0 <OTM8009A_Init+0x380>)
 8002328:	21c5      	movs	r1, #197	@ 0xc5
 800232a:	f000 fe8b 	bl	8003044 <otm8009a_write_reg>
 800232e:	4602      	mov	r2, r0
 8002330:	e038      	b.n	80023a4 <OTM8009A_Init+0x384>
 8002332:	bf00      	nop
 8002334:	08027571 	.word	0x08027571
 8002338:	080275a4 	.word	0x080275a4
 800233c:	08027572 	.word	0x08027572
 8002340:	080275a8 	.word	0x080275a8
 8002344:	08027573 	.word	0x08027573
 8002348:	08027574 	.word	0x08027574
 800234c:	08027575 	.word	0x08027575
 8002350:	08027576 	.word	0x08027576
 8002354:	08027577 	.word	0x08027577
 8002358:	08027578 	.word	0x08027578
 800235c:	08027579 	.word	0x08027579
 8002360:	0802757a 	.word	0x0802757a
 8002364:	0802757b 	.word	0x0802757b
 8002368:	0802757c 	.word	0x0802757c
 800236c:	0802757d 	.word	0x0802757d
 8002370:	0802757e 	.word	0x0802757e
 8002374:	0802757f 	.word	0x0802757f
 8002378:	08027580 	.word	0x08027580
 800237c:	08027581 	.word	0x08027581
 8002380:	08027582 	.word	0x08027582
 8002384:	08027583 	.word	0x08027583
 8002388:	080275ac 	.word	0x080275ac
 800238c:	08027584 	.word	0x08027584
 8002390:	08027585 	.word	0x08027585
 8002394:	08027586 	.word	0x08027586
 8002398:	08027587 	.word	0x08027587
 800239c:	08027588 	.word	0x08027588
 80023a0:	08027589 	.word	0x08027589
 80023a4:	697b      	ldr	r3, [r7, #20]
 80023a6:	4413      	add	r3, r2
 80023a8:	617b      	str	r3, [r7, #20]
  
  /* Source driver precharge */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 80023aa:	68fb      	ldr	r3, [r7, #12]
 80023ac:	f103 0010 	add.w	r0, r3, #16
 80023b0:	2300      	movs	r3, #0
 80023b2:	4abe      	ldr	r2, [pc, #760]	@ (80026ac <OTM8009A_Init+0x68c>)
 80023b4:	2100      	movs	r1, #0
 80023b6:	f000 fe45 	bl	8003044 <otm8009a_write_reg>
 80023ba:	4602      	mov	r2, r0
 80023bc:	697b      	ldr	r3, [r7, #20]
 80023be:	4413      	add	r3, r2
 80023c0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC4, &short_reg_data[26], 0);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f103 0010 	add.w	r0, r3, #16
 80023c8:	2300      	movs	r3, #0
 80023ca:	4ab9      	ldr	r2, [pc, #740]	@ (80026b0 <OTM8009A_Init+0x690>)
 80023cc:	21c4      	movs	r1, #196	@ 0xc4
 80023ce:	f000 fe39 	bl	8003044 <otm8009a_write_reg>
 80023d2:	4602      	mov	r2, r0
 80023d4:	697b      	ldr	r3, [r7, #20]
 80023d6:	4413      	add	r3, r2
 80023d8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[15], 0);
 80023da:	68fb      	ldr	r3, [r7, #12]
 80023dc:	f103 0010 	add.w	r0, r3, #16
 80023e0:	2300      	movs	r3, #0
 80023e2:	4ab4      	ldr	r2, [pc, #720]	@ (80026b4 <OTM8009A_Init+0x694>)
 80023e4:	2100      	movs	r1, #0
 80023e6:	f000 fe2d 	bl	8003044 <otm8009a_write_reg>
 80023ea:	4602      	mov	r2, r0
 80023ec:	697b      	ldr	r3, [r7, #20]
 80023ee:	4413      	add	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC1, &short_reg_data[27], 0);
 80023f2:	68fb      	ldr	r3, [r7, #12]
 80023f4:	f103 0010 	add.w	r0, r3, #16
 80023f8:	2300      	movs	r3, #0
 80023fa:	4aaf      	ldr	r2, [pc, #700]	@ (80026b8 <OTM8009A_Init+0x698>)
 80023fc:	21c1      	movs	r1, #193	@ 0xc1
 80023fe:	f000 fe21 	bl	8003044 <otm8009a_write_reg>
 8002402:	4602      	mov	r2, r0
 8002404:	697b      	ldr	r3, [r7, #20]
 8002406:	4413      	add	r3, r2
 8002408:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[28], 0);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	f103 0010 	add.w	r0, r3, #16
 8002410:	2300      	movs	r3, #0
 8002412:	4aaa      	ldr	r2, [pc, #680]	@ (80026bc <OTM8009A_Init+0x69c>)
 8002414:	2100      	movs	r1, #0
 8002416:	f000 fe15 	bl	8003044 <otm8009a_write_reg>
 800241a:	4602      	mov	r2, r0
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	4413      	add	r3, r2
 8002420:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xB3, lcd_reg_data6, 2);
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	f103 0010 	add.w	r0, r3, #16
 8002428:	2302      	movs	r3, #2
 800242a:	4aa5      	ldr	r2, [pc, #660]	@ (80026c0 <OTM8009A_Init+0x6a0>)
 800242c:	21b3      	movs	r1, #179	@ 0xb3
 800242e:	f000 fe09 	bl	8003044 <otm8009a_write_reg>
 8002432:	4602      	mov	r2, r0
 8002434:	697b      	ldr	r3, [r7, #20]
 8002436:	4413      	add	r3, r2
 8002438:	617b      	str	r3, [r7, #20]
  
  /* GOAVST */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	f103 0010 	add.w	r0, r3, #16
 8002440:	2300      	movs	r3, #0
 8002442:	4aa0      	ldr	r2, [pc, #640]	@ (80026c4 <OTM8009A_Init+0x6a4>)
 8002444:	2100      	movs	r1, #0
 8002446:	f000 fdfd 	bl	8003044 <otm8009a_write_reg>
 800244a:	4602      	mov	r2, r0
 800244c:	697b      	ldr	r3, [r7, #20]
 800244e:	4413      	add	r3, r2
 8002450:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data7, 6);
 8002452:	68fb      	ldr	r3, [r7, #12]
 8002454:	f103 0010 	add.w	r0, r3, #16
 8002458:	2306      	movs	r3, #6
 800245a:	4a9b      	ldr	r2, [pc, #620]	@ (80026c8 <OTM8009A_Init+0x6a8>)
 800245c:	21ce      	movs	r1, #206	@ 0xce
 800245e:	f000 fdf1 	bl	8003044 <otm8009a_write_reg>
 8002462:	4602      	mov	r2, r0
 8002464:	697b      	ldr	r3, [r7, #20]
 8002466:	4413      	add	r3, r2
 8002468:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	f103 0010 	add.w	r0, r3, #16
 8002470:	2300      	movs	r3, #0
 8002472:	4a96      	ldr	r2, [pc, #600]	@ (80026cc <OTM8009A_Init+0x6ac>)
 8002474:	2100      	movs	r1, #0
 8002476:	f000 fde5 	bl	8003044 <otm8009a_write_reg>
 800247a:	4602      	mov	r2, r0
 800247c:	697b      	ldr	r3, [r7, #20]
 800247e:	4413      	add	r3, r2
 8002480:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data8, 14);
 8002482:	68fb      	ldr	r3, [r7, #12]
 8002484:	f103 0010 	add.w	r0, r3, #16
 8002488:	230e      	movs	r3, #14
 800248a:	4a91      	ldr	r2, [pc, #580]	@ (80026d0 <OTM8009A_Init+0x6b0>)
 800248c:	21ce      	movs	r1, #206	@ 0xce
 800248e:	f000 fdd9 	bl	8003044 <otm8009a_write_reg>
 8002492:	4602      	mov	r2, r0
 8002494:	697b      	ldr	r3, [r7, #20]
 8002496:	4413      	add	r3, r2
 8002498:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	f103 0010 	add.w	r0, r3, #16
 80024a0:	2300      	movs	r3, #0
 80024a2:	4a8c      	ldr	r2, [pc, #560]	@ (80026d4 <OTM8009A_Init+0x6b4>)
 80024a4:	2100      	movs	r1, #0
 80024a6:	f000 fdcd 	bl	8003044 <otm8009a_write_reg>
 80024aa:	4602      	mov	r2, r0
 80024ac:	697b      	ldr	r3, [r7, #20]
 80024ae:	4413      	add	r3, r2
 80024b0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCE, lcd_reg_data9, 14);
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	f103 0010 	add.w	r0, r3, #16
 80024b8:	230e      	movs	r3, #14
 80024ba:	4a87      	ldr	r2, [pc, #540]	@ (80026d8 <OTM8009A_Init+0x6b8>)
 80024bc:	21ce      	movs	r1, #206	@ 0xce
 80024be:	f000 fdc1 	bl	8003044 <otm8009a_write_reg>
 80024c2:	4602      	mov	r2, r0
 80024c4:	697b      	ldr	r3, [r7, #20]
 80024c6:	4413      	add	r3, r2
 80024c8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	f103 0010 	add.w	r0, r3, #16
 80024d0:	2300      	movs	r3, #0
 80024d2:	4a82      	ldr	r2, [pc, #520]	@ (80026dc <OTM8009A_Init+0x6bc>)
 80024d4:	2100      	movs	r1, #0
 80024d6:	f000 fdb5 	bl	8003044 <otm8009a_write_reg>
 80024da:	4602      	mov	r2, r0
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	4413      	add	r3, r2
 80024e0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, lcd_reg_data10, 10);
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	f103 0010 	add.w	r0, r3, #16
 80024e8:	230a      	movs	r3, #10
 80024ea:	4a7d      	ldr	r2, [pc, #500]	@ (80026e0 <OTM8009A_Init+0x6c0>)
 80024ec:	21cf      	movs	r1, #207	@ 0xcf
 80024ee:	f000 fda9 	bl	8003044 <otm8009a_write_reg>
 80024f2:	4602      	mov	r2, r0
 80024f4:	697b      	ldr	r3, [r7, #20]
 80024f6:	4413      	add	r3, r2
 80024f8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	f103 0010 	add.w	r0, r3, #16
 8002500:	2300      	movs	r3, #0
 8002502:	4a78      	ldr	r2, [pc, #480]	@ (80026e4 <OTM8009A_Init+0x6c4>)
 8002504:	2100      	movs	r1, #0
 8002506:	f000 fd9d 	bl	8003044 <otm8009a_write_reg>
 800250a:	4602      	mov	r2, r0
 800250c:	697b      	ldr	r3, [r7, #20]
 800250e:	4413      	add	r3, r2
 8002510:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCF, &short_reg_data[45], 0);
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	f103 0010 	add.w	r0, r3, #16
 8002518:	2300      	movs	r3, #0
 800251a:	4a73      	ldr	r2, [pc, #460]	@ (80026e8 <OTM8009A_Init+0x6c8>)
 800251c:	21cf      	movs	r1, #207	@ 0xcf
 800251e:	f000 fd91 	bl	8003044 <otm8009a_write_reg>
 8002522:	4602      	mov	r2, r0
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	4413      	add	r3, r2
 8002528:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 800252a:	68fb      	ldr	r3, [r7, #12]
 800252c:	f103 0010 	add.w	r0, r3, #16
 8002530:	2300      	movs	r3, #0
 8002532:	4a64      	ldr	r2, [pc, #400]	@ (80026c4 <OTM8009A_Init+0x6a4>)
 8002534:	2100      	movs	r1, #0
 8002536:	f000 fd85 	bl	8003044 <otm8009a_write_reg>
 800253a:	4602      	mov	r2, r0
 800253c:	697b      	ldr	r3, [r7, #20]
 800253e:	4413      	add	r3, r2
 8002540:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data11, 10);
 8002542:	68fb      	ldr	r3, [r7, #12]
 8002544:	f103 0010 	add.w	r0, r3, #16
 8002548:	230a      	movs	r3, #10
 800254a:	4a68      	ldr	r2, [pc, #416]	@ (80026ec <OTM8009A_Init+0x6cc>)
 800254c:	21cb      	movs	r1, #203	@ 0xcb
 800254e:	f000 fd79 	bl	8003044 <otm8009a_write_reg>
 8002552:	4602      	mov	r2, r0
 8002554:	697b      	ldr	r3, [r7, #20]
 8002556:	4413      	add	r3, r2
 8002558:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	f103 0010 	add.w	r0, r3, #16
 8002560:	2300      	movs	r3, #0
 8002562:	4a63      	ldr	r2, [pc, #396]	@ (80026f0 <OTM8009A_Init+0x6d0>)
 8002564:	2100      	movs	r1, #0
 8002566:	f000 fd6d 	bl	8003044 <otm8009a_write_reg>
 800256a:	4602      	mov	r2, r0
 800256c:	697b      	ldr	r3, [r7, #20]
 800256e:	4413      	add	r3, r2
 8002570:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data12, 15);
 8002572:	68fb      	ldr	r3, [r7, #12]
 8002574:	f103 0010 	add.w	r0, r3, #16
 8002578:	230f      	movs	r3, #15
 800257a:	4a5e      	ldr	r2, [pc, #376]	@ (80026f4 <OTM8009A_Init+0x6d4>)
 800257c:	21cb      	movs	r1, #203	@ 0xcb
 800257e:	f000 fd61 	bl	8003044 <otm8009a_write_reg>
 8002582:	4602      	mov	r2, r0
 8002584:	697b      	ldr	r3, [r7, #20]
 8002586:	4413      	add	r3, r2
 8002588:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 800258a:	68fb      	ldr	r3, [r7, #12]
 800258c:	f103 0010 	add.w	r0, r3, #16
 8002590:	2300      	movs	r3, #0
 8002592:	4a4e      	ldr	r2, [pc, #312]	@ (80026cc <OTM8009A_Init+0x6ac>)
 8002594:	2100      	movs	r1, #0
 8002596:	f000 fd55 	bl	8003044 <otm8009a_write_reg>
 800259a:	4602      	mov	r2, r0
 800259c:	697b      	ldr	r3, [r7, #20]
 800259e:	4413      	add	r3, r2
 80025a0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data13, 15);
 80025a2:	68fb      	ldr	r3, [r7, #12]
 80025a4:	f103 0010 	add.w	r0, r3, #16
 80025a8:	230f      	movs	r3, #15
 80025aa:	4a53      	ldr	r2, [pc, #332]	@ (80026f8 <OTM8009A_Init+0x6d8>)
 80025ac:	21cb      	movs	r1, #203	@ 0xcb
 80025ae:	f000 fd49 	bl	8003044 <otm8009a_write_reg>
 80025b2:	4602      	mov	r2, r0
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	4413      	add	r3, r2
 80025b8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80025ba:	68fb      	ldr	r3, [r7, #12]
 80025bc:	f103 0010 	add.w	r0, r3, #16
 80025c0:	2300      	movs	r3, #0
 80025c2:	4a44      	ldr	r2, [pc, #272]	@ (80026d4 <OTM8009A_Init+0x6b4>)
 80025c4:	2100      	movs	r1, #0
 80025c6:	f000 fd3d 	bl	8003044 <otm8009a_write_reg>
 80025ca:	4602      	mov	r2, r0
 80025cc:	697b      	ldr	r3, [r7, #20]
 80025ce:	4413      	add	r3, r2
 80025d0:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data14, 10);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	f103 0010 	add.w	r0, r3, #16
 80025d8:	230a      	movs	r3, #10
 80025da:	4a48      	ldr	r2, [pc, #288]	@ (80026fc <OTM8009A_Init+0x6dc>)
 80025dc:	21cb      	movs	r1, #203	@ 0xcb
 80025de:	f000 fd31 	bl	8003044 <otm8009a_write_reg>
 80025e2:	4602      	mov	r2, r0
 80025e4:	697b      	ldr	r3, [r7, #20]
 80025e6:	4413      	add	r3, r2
 80025e8:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f103 0010 	add.w	r0, r3, #16
 80025f0:	2300      	movs	r3, #0
 80025f2:	4a3a      	ldr	r2, [pc, #232]	@ (80026dc <OTM8009A_Init+0x6bc>)
 80025f4:	2100      	movs	r1, #0
 80025f6:	f000 fd25 	bl	8003044 <otm8009a_write_reg>
 80025fa:	4602      	mov	r2, r0
 80025fc:	697b      	ldr	r3, [r7, #20]
 80025fe:	4413      	add	r3, r2
 8002600:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data15, 15);
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	f103 0010 	add.w	r0, r3, #16
 8002608:	230f      	movs	r3, #15
 800260a:	4a3d      	ldr	r2, [pc, #244]	@ (8002700 <OTM8009A_Init+0x6e0>)
 800260c:	21cb      	movs	r1, #203	@ 0xcb
 800260e:	f000 fd19 	bl	8003044 <otm8009a_write_reg>
 8002612:	4602      	mov	r2, r0
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	4413      	add	r3, r2
 8002618:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	f103 0010 	add.w	r0, r3, #16
 8002620:	2300      	movs	r3, #0
 8002622:	4a30      	ldr	r2, [pc, #192]	@ (80026e4 <OTM8009A_Init+0x6c4>)
 8002624:	2100      	movs	r1, #0
 8002626:	f000 fd0d 	bl	8003044 <otm8009a_write_reg>
 800262a:	4602      	mov	r2, r0
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	4413      	add	r3, r2
 8002630:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data16, 15);
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	f103 0010 	add.w	r0, r3, #16
 8002638:	230f      	movs	r3, #15
 800263a:	4a32      	ldr	r2, [pc, #200]	@ (8002704 <OTM8009A_Init+0x6e4>)
 800263c:	21cb      	movs	r1, #203	@ 0xcb
 800263e:	f000 fd01 	bl	8003044 <otm8009a_write_reg>
 8002642:	4602      	mov	r2, r0
 8002644:	697b      	ldr	r3, [r7, #20]
 8002646:	4413      	add	r3, r2
 8002648:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[34], 0);
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	f103 0010 	add.w	r0, r3, #16
 8002650:	2300      	movs	r3, #0
 8002652:	4a2d      	ldr	r2, [pc, #180]	@ (8002708 <OTM8009A_Init+0x6e8>)
 8002654:	2100      	movs	r1, #0
 8002656:	f000 fcf5 	bl	8003044 <otm8009a_write_reg>
 800265a:	4602      	mov	r2, r0
 800265c:	697b      	ldr	r3, [r7, #20]
 800265e:	4413      	add	r3, r2
 8002660:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data17, 10);
 8002662:	68fb      	ldr	r3, [r7, #12]
 8002664:	f103 0010 	add.w	r0, r3, #16
 8002668:	230a      	movs	r3, #10
 800266a:	4a28      	ldr	r2, [pc, #160]	@ (800270c <OTM8009A_Init+0x6ec>)
 800266c:	21cb      	movs	r1, #203	@ 0xcb
 800266e:	f000 fce9 	bl	8003044 <otm8009a_write_reg>
 8002672:	4602      	mov	r2, r0
 8002674:	697b      	ldr	r3, [r7, #20]
 8002676:	4413      	add	r3, r2
 8002678:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[35], 0);
 800267a:	68fb      	ldr	r3, [r7, #12]
 800267c:	f103 0010 	add.w	r0, r3, #16
 8002680:	2300      	movs	r3, #0
 8002682:	4a23      	ldr	r2, [pc, #140]	@ (8002710 <OTM8009A_Init+0x6f0>)
 8002684:	2100      	movs	r1, #0
 8002686:	f000 fcdd 	bl	8003044 <otm8009a_write_reg>
 800268a:	4602      	mov	r2, r0
 800268c:	697b      	ldr	r3, [r7, #20]
 800268e:	4413      	add	r3, r2
 8002690:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCB, lcd_reg_data18, 10);
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	f103 0010 	add.w	r0, r3, #16
 8002698:	230a      	movs	r3, #10
 800269a:	4a1e      	ldr	r2, [pc, #120]	@ (8002714 <OTM8009A_Init+0x6f4>)
 800269c:	21cb      	movs	r1, #203	@ 0xcb
 800269e:	f000 fcd1 	bl	8003044 <otm8009a_write_reg>
 80026a2:	4602      	mov	r2, r0
 80026a4:	697b      	ldr	r3, [r7, #20]
 80026a6:	4413      	add	r3, r2
 80026a8:	617b      	str	r3, [r7, #20]
 80026aa:	e035      	b.n	8002718 <OTM8009A_Init+0x6f8>
 80026ac:	0802757d 	.word	0x0802757d
 80026b0:	0802758a 	.word	0x0802758a
 80026b4:	0802757f 	.word	0x0802757f
 80026b8:	0802758b 	.word	0x0802758b
 80026bc:	0802758c 	.word	0x0802758c
 80026c0:	080275b0 	.word	0x080275b0
 80026c4:	08027572 	.word	0x08027572
 80026c8:	080275b4 	.word	0x080275b4
 80026cc:	0802758d 	.word	0x0802758d
 80026d0:	080275bc 	.word	0x080275bc
 80026d4:	0802758e 	.word	0x0802758e
 80026d8:	080275cc 	.word	0x080275cc
 80026dc:	0802758f 	.word	0x0802758f
 80026e0:	080275dc 	.word	0x080275dc
 80026e4:	08027590 	.word	0x08027590
 80026e8:	0802759d 	.word	0x0802759d
 80026ec:	080275e8 	.word	0x080275e8
 80026f0:	08027591 	.word	0x08027591
 80026f4:	080275f4 	.word	0x080275f4
 80026f8:	08027604 	.word	0x08027604
 80026fc:	08027614 	.word	0x08027614
 8002700:	08027620 	.word	0x08027620
 8002704:	08027630 	.word	0x08027630
 8002708:	08027592 	.word	0x08027592
 800270c:	08027640 	.word	0x08027640
 8002710:	08027593 	.word	0x08027593
 8002714:	0802764c 	.word	0x0802764c
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[2], 0);
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f103 0010 	add.w	r0, r3, #16
 800271e:	2300      	movs	r3, #0
 8002720:	4aae      	ldr	r2, [pc, #696]	@ (80029dc <OTM8009A_Init+0x9bc>)
 8002722:	2100      	movs	r1, #0
 8002724:	f000 fc8e 	bl	8003044 <otm8009a_write_reg>
 8002728:	4602      	mov	r2, r0
 800272a:	697b      	ldr	r3, [r7, #20]
 800272c:	4413      	add	r3, r2
 800272e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data19, 10);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	f103 0010 	add.w	r0, r3, #16
 8002736:	230a      	movs	r3, #10
 8002738:	4aa9      	ldr	r2, [pc, #676]	@ (80029e0 <OTM8009A_Init+0x9c0>)
 800273a:	21cc      	movs	r1, #204	@ 0xcc
 800273c:	f000 fc82 	bl	8003044 <otm8009a_write_reg>
 8002740:	4602      	mov	r2, r0
 8002742:	697b      	ldr	r3, [r7, #20]
 8002744:	4413      	add	r3, r2
 8002746:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[33], 0);
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f103 0010 	add.w	r0, r3, #16
 800274e:	2300      	movs	r3, #0
 8002750:	4aa4      	ldr	r2, [pc, #656]	@ (80029e4 <OTM8009A_Init+0x9c4>)
 8002752:	2100      	movs	r1, #0
 8002754:	f000 fc76 	bl	8003044 <otm8009a_write_reg>
 8002758:	4602      	mov	r2, r0
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	4413      	add	r3, r2
 800275e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data20, 15);
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	f103 0010 	add.w	r0, r3, #16
 8002766:	230f      	movs	r3, #15
 8002768:	4a9f      	ldr	r2, [pc, #636]	@ (80029e8 <OTM8009A_Init+0x9c8>)
 800276a:	21cc      	movs	r1, #204	@ 0xcc
 800276c:	f000 fc6a 	bl	8003044 <otm8009a_write_reg>
 8002770:	4602      	mov	r2, r0
 8002772:	697b      	ldr	r3, [r7, #20]
 8002774:	4413      	add	r3, r2
 8002776:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[29], 0);
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	f103 0010 	add.w	r0, r3, #16
 800277e:	2300      	movs	r3, #0
 8002780:	4a9a      	ldr	r2, [pc, #616]	@ (80029ec <OTM8009A_Init+0x9cc>)
 8002782:	2100      	movs	r1, #0
 8002784:	f000 fc5e 	bl	8003044 <otm8009a_write_reg>
 8002788:	4602      	mov	r2, r0
 800278a:	697b      	ldr	r3, [r7, #20]
 800278c:	4413      	add	r3, r2
 800278e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data21, 15);
 8002790:	68fb      	ldr	r3, [r7, #12]
 8002792:	f103 0010 	add.w	r0, r3, #16
 8002796:	230f      	movs	r3, #15
 8002798:	4a95      	ldr	r2, [pc, #596]	@ (80029f0 <OTM8009A_Init+0x9d0>)
 800279a:	21cc      	movs	r1, #204	@ 0xcc
 800279c:	f000 fc52 	bl	8003044 <otm8009a_write_reg>
 80027a0:	4602      	mov	r2, r0
 80027a2:	697b      	ldr	r3, [r7, #20]
 80027a4:	4413      	add	r3, r2
 80027a6:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[30], 0);
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	f103 0010 	add.w	r0, r3, #16
 80027ae:	2300      	movs	r3, #0
 80027b0:	4a90      	ldr	r2, [pc, #576]	@ (80029f4 <OTM8009A_Init+0x9d4>)
 80027b2:	2100      	movs	r1, #0
 80027b4:	f000 fc46 	bl	8003044 <otm8009a_write_reg>
 80027b8:	4602      	mov	r2, r0
 80027ba:	697b      	ldr	r3, [r7, #20]
 80027bc:	4413      	add	r3, r2
 80027be:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data22, 10);
 80027c0:	68fb      	ldr	r3, [r7, #12]
 80027c2:	f103 0010 	add.w	r0, r3, #16
 80027c6:	230a      	movs	r3, #10
 80027c8:	4a8b      	ldr	r2, [pc, #556]	@ (80029f8 <OTM8009A_Init+0x9d8>)
 80027ca:	21cc      	movs	r1, #204	@ 0xcc
 80027cc:	f000 fc3a 	bl	8003044 <otm8009a_write_reg>
 80027d0:	4602      	mov	r2, r0
 80027d2:	697b      	ldr	r3, [r7, #20]
 80027d4:	4413      	add	r3, r2
 80027d6:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[31], 0);
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	f103 0010 	add.w	r0, r3, #16
 80027de:	2300      	movs	r3, #0
 80027e0:	4a86      	ldr	r2, [pc, #536]	@ (80029fc <OTM8009A_Init+0x9dc>)
 80027e2:	2100      	movs	r1, #0
 80027e4:	f000 fc2e 	bl	8003044 <otm8009a_write_reg>
 80027e8:	4602      	mov	r2, r0
 80027ea:	697b      	ldr	r3, [r7, #20]
 80027ec:	4413      	add	r3, r2
 80027ee:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data23, 15);
 80027f0:	68fb      	ldr	r3, [r7, #12]
 80027f2:	f103 0010 	add.w	r0, r3, #16
 80027f6:	230f      	movs	r3, #15
 80027f8:	4a81      	ldr	r2, [pc, #516]	@ (8002a00 <OTM8009A_Init+0x9e0>)
 80027fa:	21cc      	movs	r1, #204	@ 0xcc
 80027fc:	f000 fc22 	bl	8003044 <otm8009a_write_reg>
 8002800:	4602      	mov	r2, r0
 8002802:	697b      	ldr	r3, [r7, #20]
 8002804:	4413      	add	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
  
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[32], 0);
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	f103 0010 	add.w	r0, r3, #16
 800280e:	2300      	movs	r3, #0
 8002810:	4a7c      	ldr	r2, [pc, #496]	@ (8002a04 <OTM8009A_Init+0x9e4>)
 8002812:	2100      	movs	r1, #0
 8002814:	f000 fc16 	bl	8003044 <otm8009a_write_reg>
 8002818:	4602      	mov	r2, r0
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	4413      	add	r3, r2
 800281e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xCC, lcd_reg_data24, 15);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	f103 0010 	add.w	r0, r3, #16
 8002826:	230f      	movs	r3, #15
 8002828:	4a77      	ldr	r2, [pc, #476]	@ (8002a08 <OTM8009A_Init+0x9e8>)
 800282a:	21cc      	movs	r1, #204	@ 0xcc
 800282c:	f000 fc0a 	bl	8003044 <otm8009a_write_reg>
 8002830:	4602      	mov	r2, r0
 8002832:	697b      	ldr	r3, [r7, #20]
 8002834:	4413      	add	r3, r2
 8002836:	617b      	str	r3, [r7, #20]
  
  /////////////////////////////////////////////////////////////////////////////
  /* PWR_CTRL1 - 0xc580h - 130th parameter - default 0x00 */
  /* Pump 1 min and max DM                                */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[13], 0);
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	f103 0010 	add.w	r0, r3, #16
 800283e:	2300      	movs	r3, #0
 8002840:	4a72      	ldr	r2, [pc, #456]	@ (8002a0c <OTM8009A_Init+0x9ec>)
 8002842:	2100      	movs	r1, #0
 8002844:	f000 fbfe 	bl	8003044 <otm8009a_write_reg>
 8002848:	4602      	mov	r2, r0
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	4413      	add	r3, r2
 800284e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC5, &short_reg_data[46], 0);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	f103 0010 	add.w	r0, r3, #16
 8002856:	2300      	movs	r3, #0
 8002858:	4a6d      	ldr	r2, [pc, #436]	@ (8002a10 <OTM8009A_Init+0x9f0>)
 800285a:	21c5      	movs	r1, #197	@ 0xc5
 800285c:	f000 fbf2 	bl	8003044 <otm8009a_write_reg>
 8002860:	4602      	mov	r2, r0
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	4413      	add	r3, r2
 8002866:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[47], 0);
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	f103 0010 	add.w	r0, r3, #16
 800286e:	2300      	movs	r3, #0
 8002870:	4a68      	ldr	r2, [pc, #416]	@ (8002a14 <OTM8009A_Init+0x9f4>)
 8002872:	2100      	movs	r1, #0
 8002874:	f000 fbe6 	bl	8003044 <otm8009a_write_reg>
 8002878:	4602      	mov	r2, r0
 800287a:	697b      	ldr	r3, [r7, #20]
 800287c:	4413      	add	r3, r2
 800287e:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xF5, &short_reg_data[48], 0);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	f103 0010 	add.w	r0, r3, #16
 8002886:	2300      	movs	r3, #0
 8002888:	4a63      	ldr	r2, [pc, #396]	@ (8002a18 <OTM8009A_Init+0x9f8>)
 800288a:	21f5      	movs	r1, #245	@ 0xf5
 800288c:	f000 fbda 	bl	8003044 <otm8009a_write_reg>
 8002890:	4602      	mov	r2, r0
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	4413      	add	r3, r2
 8002896:	617b      	str	r3, [r7, #20]
  /////////////////////////////////////////////////////////////////////////////
  
  /* CABC LEDPWM frequency adjusted to 19,5kHz */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[49], 0);
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f103 0010 	add.w	r0, r3, #16
 800289e:	2300      	movs	r3, #0
 80028a0:	4a5e      	ldr	r2, [pc, #376]	@ (8002a1c <OTM8009A_Init+0x9fc>)
 80028a2:	2100      	movs	r1, #0
 80028a4:	f000 fbce 	bl	8003044 <otm8009a_write_reg>
 80028a8:	4602      	mov	r2, r0
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	4413      	add	r3, r2
 80028ae:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xC6, &short_reg_data[50], 0);
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f103 0010 	add.w	r0, r3, #16
 80028b6:	2300      	movs	r3, #0
 80028b8:	4a59      	ldr	r2, [pc, #356]	@ (8002a20 <OTM8009A_Init+0xa00>)
 80028ba:	21c6      	movs	r1, #198	@ 0xc6
 80028bc:	f000 fbc2 	bl	8003044 <otm8009a_write_reg>
 80028c0:	4602      	mov	r2, r0
 80028c2:	697b      	ldr	r3, [r7, #20]
 80028c4:	4413      	add	r3, r2
 80028c6:	617b      	str	r3, [r7, #20]
  
  /* Exit CMD2 mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	f103 0010 	add.w	r0, r3, #16
 80028ce:	2300      	movs	r3, #0
 80028d0:	4a54      	ldr	r2, [pc, #336]	@ (8002a24 <OTM8009A_Init+0xa04>)
 80028d2:	2100      	movs	r1, #0
 80028d4:	f000 fbb6 	bl	8003044 <otm8009a_write_reg>
 80028d8:	4602      	mov	r2, r0
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	4413      	add	r3, r2
 80028de:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xFF, lcd_reg_data25, 3);
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	f103 0010 	add.w	r0, r3, #16
 80028e6:	2303      	movs	r3, #3
 80028e8:	4a4f      	ldr	r2, [pc, #316]	@ (8002a28 <OTM8009A_Init+0xa08>)
 80028ea:	21ff      	movs	r1, #255	@ 0xff
 80028ec:	f000 fbaa 	bl	8003044 <otm8009a_write_reg>
 80028f0:	4602      	mov	r2, r0
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	4413      	add	r3, r2
 80028f6:	617b      	str	r3, [r7, #20]
  /*************************************************************************** */
  /* Standard DCS Initialization TO KEEP CAN BE DONE IN HSDT                   */
  /*************************************************************************** */
  
  /* NOP - goes back to DCS std command ? */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	f103 0010 	add.w	r0, r3, #16
 80028fe:	2300      	movs	r3, #0
 8002900:	4a48      	ldr	r2, [pc, #288]	@ (8002a24 <OTM8009A_Init+0xa04>)
 8002902:	2100      	movs	r1, #0
 8002904:	f000 fb9e 	bl	8003044 <otm8009a_write_reg>
 8002908:	4602      	mov	r2, r0
 800290a:	697b      	ldr	r3, [r7, #20]
 800290c:	4413      	add	r3, r2
 800290e:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2+ table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	f103 0010 	add.w	r0, r3, #16
 8002916:	2300      	movs	r3, #0
 8002918:	4a42      	ldr	r2, [pc, #264]	@ (8002a24 <OTM8009A_Init+0xa04>)
 800291a:	2100      	movs	r1, #0
 800291c:	f000 fb92 	bl	8003044 <otm8009a_write_reg>
 8002920:	4602      	mov	r2, r0
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	4413      	add	r3, r2
 8002926:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE1, lcd_reg_data3, 16);
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	f103 0010 	add.w	r0, r3, #16
 800292e:	2310      	movs	r3, #16
 8002930:	4a3e      	ldr	r2, [pc, #248]	@ (8002a2c <OTM8009A_Init+0xa0c>)
 8002932:	21e1      	movs	r1, #225	@ 0xe1
 8002934:	f000 fb86 	bl	8003044 <otm8009a_write_reg>
 8002938:	4602      	mov	r2, r0
 800293a:	697b      	ldr	r3, [r7, #20]
 800293c:	4413      	add	r3, r2
 800293e:	617b      	str	r3, [r7, #20]
  
  /* Gamma correction 2.2- table (HSDT possible) */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	f103 0010 	add.w	r0, r3, #16
 8002946:	2300      	movs	r3, #0
 8002948:	4a36      	ldr	r2, [pc, #216]	@ (8002a24 <OTM8009A_Init+0xa04>)
 800294a:	2100      	movs	r1, #0
 800294c:	f000 fb7a 	bl	8003044 <otm8009a_write_reg>
 8002950:	4602      	mov	r2, r0
 8002952:	697b      	ldr	r3, [r7, #20]
 8002954:	4413      	add	r3, r2
 8002956:	617b      	str	r3, [r7, #20]
  ret += otm8009a_write_reg(&pObj->Ctx, 0xE2, lcd_reg_data4, 16);
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f103 0010 	add.w	r0, r3, #16
 800295e:	2310      	movs	r3, #16
 8002960:	4a33      	ldr	r2, [pc, #204]	@ (8002a30 <OTM8009A_Init+0xa10>)
 8002962:	21e2      	movs	r1, #226	@ 0xe2
 8002964:	f000 fb6e 	bl	8003044 <otm8009a_write_reg>
 8002968:	4602      	mov	r2, r0
 800296a:	697b      	ldr	r3, [r7, #20]
 800296c:	4413      	add	r3, r2
 800296e:	617b      	str	r3, [r7, #20]
  
  /* Send Sleep Out command to display : no parameter */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_SLPOUT, &short_reg_data[36], 0);
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	f103 0010 	add.w	r0, r3, #16
 8002976:	2300      	movs	r3, #0
 8002978:	4a2e      	ldr	r2, [pc, #184]	@ (8002a34 <OTM8009A_Init+0xa14>)
 800297a:	2111      	movs	r1, #17
 800297c:	f000 fb62 	bl	8003044 <otm8009a_write_reg>
 8002980:	4602      	mov	r2, r0
 8002982:	697b      	ldr	r3, [r7, #20]
 8002984:	4413      	add	r3, r2
 8002986:	617b      	str	r3, [r7, #20]
  
  /* Wait for sleep out exit */
  (void)OTM8009A_IO_Delay(pObj, 120);
 8002988:	2178      	movs	r1, #120	@ 0x78
 800298a:	68f8      	ldr	r0, [r7, #12]
 800298c:	f000 fb29 	bl	8002fe2 <OTM8009A_IO_Delay>
  
  switch(ColorCoding)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	2b00      	cmp	r3, #0
 8002994:	d012      	beq.n	80029bc <OTM8009A_Init+0x99c>
 8002996:	68bb      	ldr	r3, [r7, #8]
 8002998:	2b02      	cmp	r3, #2
 800299a:	d153      	bne.n	8002a44 <OTM8009A_Init+0xa24>
  {
  case OTM8009A_FORMAT_RBG565 :
    /* Set Pixel color format to RGB565 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[37], 0);
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	f103 0010 	add.w	r0, r3, #16
 80029a2:	2300      	movs	r3, #0
 80029a4:	4a24      	ldr	r2, [pc, #144]	@ (8002a38 <OTM8009A_Init+0xa18>)
 80029a6:	213a      	movs	r1, #58	@ 0x3a
 80029a8:	f000 fb4c 	bl	8003044 <otm8009a_write_reg>
 80029ac:	4602      	mov	r2, r0
 80029ae:	697b      	ldr	r3, [r7, #20]
 80029b0:	4413      	add	r3, r2
 80029b2:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RBG565;
 80029b4:	4b21      	ldr	r3, [pc, #132]	@ (8002a3c <OTM8009A_Init+0xa1c>)
 80029b6:	2202      	movs	r2, #2
 80029b8:	605a      	str	r2, [r3, #4]
    break;
 80029ba:	e044      	b.n	8002a46 <OTM8009A_Init+0xa26>
  case OTM8009A_FORMAT_RGB888 :
    /* Set Pixel color format to RGB888 */
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_COLMOD, &short_reg_data[38], 0);
 80029bc:	68fb      	ldr	r3, [r7, #12]
 80029be:	f103 0010 	add.w	r0, r3, #16
 80029c2:	2300      	movs	r3, #0
 80029c4:	4a1e      	ldr	r2, [pc, #120]	@ (8002a40 <OTM8009A_Init+0xa20>)
 80029c6:	213a      	movs	r1, #58	@ 0x3a
 80029c8:	f000 fb3c 	bl	8003044 <otm8009a_write_reg>
 80029cc:	4602      	mov	r2, r0
 80029ce:	697b      	ldr	r3, [r7, #20]
 80029d0:	4413      	add	r3, r2
 80029d2:	617b      	str	r3, [r7, #20]
    OTM8009ACtx.ColorCode = OTM8009A_FORMAT_RGB888;
 80029d4:	4b19      	ldr	r3, [pc, #100]	@ (8002a3c <OTM8009A_Init+0xa1c>)
 80029d6:	2200      	movs	r2, #0
 80029d8:	605a      	str	r2, [r3, #4]
    break;
 80029da:	e034      	b.n	8002a46 <OTM8009A_Init+0xa26>
 80029dc:	08027572 	.word	0x08027572
 80029e0:	08027658 	.word	0x08027658
 80029e4:	08027591 	.word	0x08027591
 80029e8:	08027664 	.word	0x08027664
 80029ec:	0802758d 	.word	0x0802758d
 80029f0:	08027674 	.word	0x08027674
 80029f4:	0802758e 	.word	0x0802758e
 80029f8:	08027684 	.word	0x08027684
 80029fc:	0802758f 	.word	0x0802758f
 8002a00:	08027690 	.word	0x08027690
 8002a04:	08027590 	.word	0x08027590
 8002a08:	080276a0 	.word	0x080276a0
 8002a0c:	0802757d 	.word	0x0802757d
 8002a10:	0802759e 	.word	0x0802759e
 8002a14:	0802759f 	.word	0x0802759f
 8002a18:	080275a0 	.word	0x080275a0
 8002a1c:	080275a1 	.word	0x080275a1
 8002a20:	080275a2 	.word	0x080275a2
 8002a24:	08027571 	.word	0x08027571
 8002a28:	080276b0 	.word	0x080276b0
 8002a2c:	080276b4 	.word	0x080276b4
 8002a30:	080276c4 	.word	0x080276c4
 8002a34:	08027594 	.word	0x08027594
 8002a38:	08027595 	.word	0x08027595
 8002a3c:	24000cfc 	.word	0x24000cfc
 8002a40:	08027596 	.word	0x08027596
  default :
    break;
 8002a44:	bf00      	nop
  }
  
  /* Send command to configure display in landscape orientation mode. By default
  the orientation mode is portrait  */
  if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d12a      	bne.n	8002aa2 <OTM8009A_Init+0xa82>
  {
	uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8002a4c:	2360      	movs	r3, #96	@ 0x60
 8002a4e:	74fb      	strb	r3, [r7, #19]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	f103 0010 	add.w	r0, r3, #16
 8002a56:	f107 0213 	add.w	r2, r7, #19
 8002a5a:	2300      	movs	r3, #0
 8002a5c:	2136      	movs	r1, #54	@ 0x36
 8002a5e:	f000 faf1 	bl	8003044 <otm8009a_write_reg>
 8002a62:	4602      	mov	r2, r0
 8002a64:	697b      	ldr	r3, [r7, #20]
 8002a66:	4413      	add	r3, r2
 8002a68:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8002a6a:	68fb      	ldr	r3, [r7, #12]
 8002a6c:	f103 0010 	add.w	r0, r3, #16
 8002a70:	2304      	movs	r3, #4
 8002a72:	4a44      	ldr	r2, [pc, #272]	@ (8002b84 <OTM8009A_Init+0xb64>)
 8002a74:	212a      	movs	r1, #42	@ 0x2a
 8002a76:	f000 fae5 	bl	8003044 <otm8009a_write_reg>
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	697b      	ldr	r3, [r7, #20]
 8002a7e:	4413      	add	r3, r2
 8002a80:	617b      	str	r3, [r7, #20]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	f103 0010 	add.w	r0, r3, #16
 8002a88:	2304      	movs	r3, #4
 8002a8a:	4a3f      	ldr	r2, [pc, #252]	@ (8002b88 <OTM8009A_Init+0xb68>)
 8002a8c:	212b      	movs	r1, #43	@ 0x2b
 8002a8e:	f000 fad9 	bl	8003044 <otm8009a_write_reg>
 8002a92:	4602      	mov	r2, r0
 8002a94:	697b      	ldr	r3, [r7, #20]
 8002a96:	4413      	add	r3, r2
 8002a98:	617b      	str	r3, [r7, #20]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8002a9a:	4b3c      	ldr	r3, [pc, #240]	@ (8002b8c <OTM8009A_Init+0xb6c>)
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	e002      	b.n	8002aa8 <OTM8009A_Init+0xa88>
  }
  else
  {
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8002aa2:	4b3a      	ldr	r3, [pc, #232]	@ (8002b8c <OTM8009A_Init+0xb6c>)
 8002aa4:	2200      	movs	r2, #0
 8002aa6:	601a      	str	r2, [r3, #0]
  }
  
  /** CABC : Content Adaptive Backlight Control section start >> */
  /* Note : defaut is 0 (lowest Brightness], 0xFF is highest Brightness, try 0x7F : intermediate value */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &short_reg_data[39], 0);
 8002aa8:	68fb      	ldr	r3, [r7, #12]
 8002aaa:	f103 0010 	add.w	r0, r3, #16
 8002aae:	2300      	movs	r3, #0
 8002ab0:	4a37      	ldr	r2, [pc, #220]	@ (8002b90 <OTM8009A_Init+0xb70>)
 8002ab2:	2151      	movs	r1, #81	@ 0x51
 8002ab4:	f000 fac6 	bl	8003044 <otm8009a_write_reg>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	697b      	ldr	r3, [r7, #20]
 8002abc:	4413      	add	r3, r2
 8002abe:	617b      	str	r3, [r7, #20]
  /* Store default brightness */
  OTM8009ACtx.Brightness = ((uint32_t)short_reg_data[39] / 0xFFU) * 100U;
 8002ac0:	4b34      	ldr	r3, [pc, #208]	@ (8002b94 <OTM8009A_Init+0xb74>)
 8002ac2:	f893 3027 	ldrb.w	r3, [r3, #39]	@ 0x27
 8002ac6:	4a34      	ldr	r2, [pc, #208]	@ (8002b98 <OTM8009A_Init+0xb78>)
 8002ac8:	fba2 2303 	umull	r2, r3, r2, r3
 8002acc:	09db      	lsrs	r3, r3, #7
 8002ace:	b2db      	uxtb	r3, r3
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2364      	movs	r3, #100	@ 0x64
 8002ad4:	fb02 f303 	mul.w	r3, r2, r3
 8002ad8:	4a2c      	ldr	r2, [pc, #176]	@ (8002b8c <OTM8009A_Init+0xb6c>)
 8002ada:	6093      	str	r3, [r2, #8]
  
  /* defaut is 0, try 0x2C - Brightness Control Block, Display Dimming & BackLight on */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCTRLD, &short_reg_data[40], 0);
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	f103 0010 	add.w	r0, r3, #16
 8002ae2:	2300      	movs	r3, #0
 8002ae4:	4a2d      	ldr	r2, [pc, #180]	@ (8002b9c <OTM8009A_Init+0xb7c>)
 8002ae6:	2153      	movs	r1, #83	@ 0x53
 8002ae8:	f000 faac 	bl	8003044 <otm8009a_write_reg>
 8002aec:	4602      	mov	r2, r0
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	4413      	add	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0, try 0x02 - image Content based Adaptive Brightness [Still Picture] */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABC, &short_reg_data[41], 0);
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	f103 0010 	add.w	r0, r3, #16
 8002afa:	2300      	movs	r3, #0
 8002afc:	4a28      	ldr	r2, [pc, #160]	@ (8002ba0 <OTM8009A_Init+0xb80>)
 8002afe:	2155      	movs	r1, #85	@ 0x55
 8002b00:	f000 faa0 	bl	8003044 <otm8009a_write_reg>
 8002b04:	4602      	mov	r2, r0
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	4413      	add	r3, r2
 8002b0a:	617b      	str	r3, [r7, #20]
  
  /* defaut is 0 (lowest Brightness], 0xFF is highest Brightness */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRCABCMB, &short_reg_data[42], 0);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	f103 0010 	add.w	r0, r3, #16
 8002b12:	2300      	movs	r3, #0
 8002b14:	4a23      	ldr	r2, [pc, #140]	@ (8002ba4 <OTM8009A_Init+0xb84>)
 8002b16:	215e      	movs	r1, #94	@ 0x5e
 8002b18:	f000 fa94 	bl	8003044 <otm8009a_write_reg>
 8002b1c:	4602      	mov	r2, r0
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	4413      	add	r3, r2
 8002b22:	617b      	str	r3, [r7, #20]
  
  /** CABC : Content Adaptive Backlight Control section end << */
  
  /* Send Command Display On */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &short_reg_data[43], 0);
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	f103 0010 	add.w	r0, r3, #16
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	4a1e      	ldr	r2, [pc, #120]	@ (8002ba8 <OTM8009A_Init+0xb88>)
 8002b2e:	2129      	movs	r1, #41	@ 0x29
 8002b30:	f000 fa88 	bl	8003044 <otm8009a_write_reg>
 8002b34:	4602      	mov	r2, r0
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	4413      	add	r3, r2
 8002b3a:	617b      	str	r3, [r7, #20]
  
  /* NOP command */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_NOP, &short_reg_data[1], 0);
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	f103 0010 	add.w	r0, r3, #16
 8002b42:	2300      	movs	r3, #0
 8002b44:	4a19      	ldr	r2, [pc, #100]	@ (8002bac <OTM8009A_Init+0xb8c>)
 8002b46:	2100      	movs	r1, #0
 8002b48:	f000 fa7c 	bl	8003044 <otm8009a_write_reg>
 8002b4c:	4602      	mov	r2, r0
 8002b4e:	697b      	ldr	r3, [r7, #20]
 8002b50:	4413      	add	r3, r2
 8002b52:	617b      	str	r3, [r7, #20]
  
  /* Send Command GRAM memory write (no parameters) : this initiates frame write via other DSI commands sent by */
  /* DSI host from LTDC incoming pixels in video mode */
  ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_RAMWR, &short_reg_data[44], 0);
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	f103 0010 	add.w	r0, r3, #16
 8002b5a:	2300      	movs	r3, #0
 8002b5c:	4a14      	ldr	r2, [pc, #80]	@ (8002bb0 <OTM8009A_Init+0xb90>)
 8002b5e:	212c      	movs	r1, #44	@ 0x2c
 8002b60:	f000 fa70 	bl	8003044 <otm8009a_write_reg>
 8002b64:	4602      	mov	r2, r0
 8002b66:	697b      	ldr	r3, [r7, #20]
 8002b68:	4413      	add	r3, r2
 8002b6a:	617b      	str	r3, [r7, #20]
  
  if(ret != OTM8009A_OK)
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	2b00      	cmp	r3, #0
 8002b70:	d002      	beq.n	8002b78 <OTM8009A_Init+0xb58>
  {
    ret = OTM8009A_ERROR;
 8002b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002b76:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8002b78:	697b      	ldr	r3, [r7, #20]
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3718      	adds	r7, #24
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
 8002b82:	bf00      	nop
 8002b84:	08027568 	.word	0x08027568
 8002b88:	0802756c 	.word	0x0802756c
 8002b8c:	24000cfc 	.word	0x24000cfc
 8002b90:	08027597 	.word	0x08027597
 8002b94:	08027570 	.word	0x08027570
 8002b98:	80808081 	.word	0x80808081
 8002b9c:	08027598 	.word	0x08027598
 8002ba0:	08027599 	.word	0x08027599
 8002ba4:	0802759a 	.word	0x0802759a
 8002ba8:	0802759b 	.word	0x0802759b
 8002bac:	08027571 	.word	0x08027571
 8002bb0:	0802759c 	.word	0x0802759c

08002bb4 <OTM8009A_DeInit>:
  * @brief  De-Initializes the component
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DeInit(OTM8009A_Object_t *pObj)
{
 8002bb4:	b480      	push	{r7}
 8002bb6:	b083      	sub	sp, #12
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  return OTM8009A_ERROR;
 8002bbc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	370c      	adds	r7, #12
 8002bc4:	46bd      	mov	sp, r7
 8002bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bca:	4770      	bx	lr

08002bcc <OTM8009A_ReadID>:
  * @param  pObj Component object
  * @param  Id   Component ID
  * @retval Component status
  */
int32_t OTM8009A_ReadID(OTM8009A_Object_t *pObj, uint32_t *Id)
{ 
 8002bcc:	b580      	push	{r7, lr}
 8002bce:	b084      	sub	sp, #16
 8002bd0:	af00      	add	r7, sp, #0
 8002bd2:	6078      	str	r0, [r7, #4]
 8002bd4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if(otm8009a_read_reg(&pObj->Ctx, OTM8009A_CMD_ID1, (uint8_t *)Id, 1)!= OTM8009A_OK)
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	f103 0010 	add.w	r0, r3, #16
 8002bdc:	2301      	movs	r3, #1
 8002bde:	683a      	ldr	r2, [r7, #0]
 8002be0:	21da      	movs	r1, #218	@ 0xda
 8002be2:	f000 fa18 	bl	8003016 <otm8009a_read_reg>
 8002be6:	4603      	mov	r3, r0
 8002be8:	2b00      	cmp	r3, #0
 8002bea:	d003      	beq.n	8002bf4 <OTM8009A_ReadID+0x28>
  {
    ret = OTM8009A_ERROR;
 8002bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002bf0:	60fb      	str	r3, [r7, #12]
 8002bf2:	e001      	b.n	8002bf8 <OTM8009A_ReadID+0x2c>
  }
  else
  {
    ret = OTM8009A_OK;
 8002bf4:	2300      	movs	r3, #0
 8002bf6:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8002bf8:	68fb      	ldr	r3, [r7, #12]
}  
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3710      	adds	r7, #16
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}
	...

08002c04 <OTM8009A_SetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be set
  * @retval Component status
  */
int32_t OTM8009A_SetBrightness(OTM8009A_Object_t *pObj, uint32_t Brightness)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b084      	sub	sp, #16
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t brightness = (uint8_t)((Brightness * 255U)/100U);
 8002c0e:	683a      	ldr	r2, [r7, #0]
 8002c10:	4613      	mov	r3, r2
 8002c12:	021b      	lsls	r3, r3, #8
 8002c14:	1a9b      	subs	r3, r3, r2
 8002c16:	4a10      	ldr	r2, [pc, #64]	@ (8002c58 <OTM8009A_SetBrightness+0x54>)
 8002c18:	fba2 2303 	umull	r2, r3, r2, r3
 8002c1c:	095b      	lsrs	r3, r3, #5
 8002c1e:	b2db      	uxtb	r3, r3
 8002c20:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_WRDISBV, &brightness, 0) != OTM8009A_OK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f103 0010 	add.w	r0, r3, #16
 8002c28:	f107 020b 	add.w	r2, r7, #11
 8002c2c:	2300      	movs	r3, #0
 8002c2e:	2151      	movs	r1, #81	@ 0x51
 8002c30:	f000 fa08 	bl	8003044 <otm8009a_write_reg>
 8002c34:	4603      	mov	r3, r0
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d003      	beq.n	8002c42 <OTM8009A_SetBrightness+0x3e>
  {
    ret = OTM8009A_ERROR;
 8002c3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002c3e:	60fb      	str	r3, [r7, #12]
 8002c40:	e004      	b.n	8002c4c <OTM8009A_SetBrightness+0x48>
  }
  else
  {
    OTM8009ACtx.Brightness = Brightness;
 8002c42:	4a06      	ldr	r2, [pc, #24]	@ (8002c5c <OTM8009A_SetBrightness+0x58>)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	6093      	str	r3, [r2, #8]
    ret = OTM8009A_OK;
 8002c48:	2300      	movs	r3, #0
 8002c4a:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 8002c4c:	68fb      	ldr	r3, [r7, #12]
}
 8002c4e:	4618      	mov	r0, r3
 8002c50:	3710      	adds	r7, #16
 8002c52:	46bd      	mov	sp, r7
 8002c54:	bd80      	pop	{r7, pc}
 8002c56:	bf00      	nop
 8002c58:	51eb851f 	.word	0x51eb851f
 8002c5c:	24000cfc 	.word	0x24000cfc

08002c60 <OTM8009A_GetBrightness>:
  * @param  pObj Component object
  * @param  Brightness   display brightness to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetBrightness(OTM8009A_Object_t *pObj, uint32_t *Brightness)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b083      	sub	sp, #12
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  *Brightness = OTM8009ACtx.Brightness;
 8002c6a:	4b05      	ldr	r3, [pc, #20]	@ (8002c80 <OTM8009A_GetBrightness+0x20>)
 8002c6c:	689a      	ldr	r2, [r3, #8]
 8002c6e:	683b      	ldr	r3, [r7, #0]
 8002c70:	601a      	str	r2, [r3, #0]
  return OTM8009A_OK;  
 8002c72:	2300      	movs	r3, #0
}
 8002c74:	4618      	mov	r0, r3
 8002c76:	370c      	adds	r7, #12
 8002c78:	46bd      	mov	sp, r7
 8002c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c7e:	4770      	bx	lr
 8002c80:	24000cfc 	.word	0x24000cfc

08002c84 <OTM8009A_DisplayOn>:
  * @brief  Set the display On.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOn(OTM8009A_Object_t *pObj)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	b084      	sub	sp, #16
 8002c88:	af00      	add	r7, sp, #0
 8002c8a:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8002c8c:	2300      	movs	r3, #0
 8002c8e:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPON, &display, 0) != OTM8009A_OK)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	f103 0010 	add.w	r0, r3, #16
 8002c96:	f107 020b 	add.w	r2, r7, #11
 8002c9a:	2300      	movs	r3, #0
 8002c9c:	2129      	movs	r1, #41	@ 0x29
 8002c9e:	f000 f9d1 	bl	8003044 <otm8009a_write_reg>
 8002ca2:	4603      	mov	r3, r0
 8002ca4:	2b00      	cmp	r3, #0
 8002ca6:	d003      	beq.n	8002cb0 <OTM8009A_DisplayOn+0x2c>
  {
    ret = OTM8009A_ERROR;
 8002ca8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002cac:	60fb      	str	r3, [r7, #12]
 8002cae:	e001      	b.n	8002cb4 <OTM8009A_DisplayOn+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8002cb0:	2300      	movs	r3, #0
 8002cb2:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002cb4:	68fb      	ldr	r3, [r7, #12]
}
 8002cb6:	4618      	mov	r0, r3
 8002cb8:	3710      	adds	r7, #16
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}

08002cbe <OTM8009A_DisplayOff>:
  * @brief  Set the display Off.
  * @param  pObj Component object
  * @retval Component status
  */
int32_t OTM8009A_DisplayOff(OTM8009A_Object_t *pObj)
{
 8002cbe:	b580      	push	{r7, lr}
 8002cc0:	b084      	sub	sp, #16
 8002cc2:	af00      	add	r7, sp, #0
 8002cc4:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint8_t display = 0;
 8002cc6:	2300      	movs	r3, #0
 8002cc8:	72fb      	strb	r3, [r7, #11]
  
  /* Send Display on DCS command to display */
  if(otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_DISPOFF, &display, 0) != OTM8009A_OK)
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	f103 0010 	add.w	r0, r3, #16
 8002cd0:	f107 020b 	add.w	r2, r7, #11
 8002cd4:	2300      	movs	r3, #0
 8002cd6:	2128      	movs	r1, #40	@ 0x28
 8002cd8:	f000 f9b4 	bl	8003044 <otm8009a_write_reg>
 8002cdc:	4603      	mov	r3, r0
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d003      	beq.n	8002cea <OTM8009A_DisplayOff+0x2c>
  {
    ret = OTM8009A_ERROR;
 8002ce2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002ce6:	60fb      	str	r3, [r7, #12]
 8002ce8:	e001      	b.n	8002cee <OTM8009A_DisplayOff+0x30>
  }
  else
  {
    ret = OTM8009A_OK;
 8002cea:	2300      	movs	r3, #0
 8002cec:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002cee:	68fb      	ldr	r3, [r7, #12]
}
 8002cf0:	4618      	mov	r0, r3
 8002cf2:	3710      	adds	r7, #16
 8002cf4:	46bd      	mov	sp, r7
 8002cf6:	bd80      	pop	{r7, pc}

08002cf8 <OTM8009A_SetOrientation>:
* @param  pObj Component object
* @param  Orientation   display Orientation to be set
* @retval Component status
*/
int32_t OTM8009A_SetOrientation(OTM8009A_Object_t *pObj, uint32_t Orientation)
{
 8002cf8:	b580      	push	{r7, lr}
 8002cfa:	b084      	sub	sp, #16
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
 8002d00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = OTM8009A_MADCTR_MODE_LANDSCAPE;
 8002d02:	2360      	movs	r3, #96	@ 0x60
 8002d04:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp1 = OTM8009A_MADCTR_MODE_PORTRAIT;
 8002d06:	2300      	movs	r3, #0
 8002d08:	72bb      	strb	r3, [r7, #10]
  
  if((Orientation != OTM8009A_ORIENTATION_LANDSCAPE) && (Orientation != OTM8009A_ORIENTATION_PORTRAIT))
 8002d0a:	683b      	ldr	r3, [r7, #0]
 8002d0c:	2b01      	cmp	r3, #1
 8002d0e:	d006      	beq.n	8002d1e <OTM8009A_SetOrientation+0x26>
 8002d10:	683b      	ldr	r3, [r7, #0]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d003      	beq.n	8002d1e <OTM8009A_SetOrientation+0x26>
  {
    ret = OTM8009A_ERROR;
 8002d16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002d1a:	60fb      	str	r3, [r7, #12]
 8002d1c:	e04d      	b.n	8002dba <OTM8009A_SetOrientation+0xc2>
  }/* Send command to configure display orientation mode  */
  else if(Orientation == OTM8009A_ORIENTATION_LANDSCAPE)
 8002d1e:	683b      	ldr	r3, [r7, #0]
 8002d20:	2b01      	cmp	r3, #1
 8002d22:	d125      	bne.n	8002d70 <OTM8009A_SetOrientation+0x78>
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp, 0);
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f103 0010 	add.w	r0, r3, #16
 8002d2a:	f107 020b 	add.w	r2, r7, #11
 8002d2e:	2300      	movs	r3, #0
 8002d30:	2136      	movs	r1, #54	@ 0x36
 8002d32:	f000 f987 	bl	8003044 <otm8009a_write_reg>
 8002d36:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	f103 0010 	add.w	r0, r3, #16
 8002d3e:	2304      	movs	r3, #4
 8002d40:	4a23      	ldr	r2, [pc, #140]	@ (8002dd0 <OTM8009A_SetOrientation+0xd8>)
 8002d42:	212a      	movs	r1, #42	@ 0x2a
 8002d44:	f000 f97e 	bl	8003044 <otm8009a_write_reg>
 8002d48:	4602      	mov	r2, r0
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	f103 0010 	add.w	r0, r3, #16
 8002d56:	2304      	movs	r3, #4
 8002d58:	4a1e      	ldr	r2, [pc, #120]	@ (8002dd4 <OTM8009A_SetOrientation+0xdc>)
 8002d5a:	212b      	movs	r1, #43	@ 0x2b
 8002d5c:	f000 f972 	bl	8003044 <otm8009a_write_reg>
 8002d60:	4602      	mov	r2, r0
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4413      	add	r3, r2
 8002d66:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_LANDSCAPE;
 8002d68:	4b1b      	ldr	r3, [pc, #108]	@ (8002dd8 <OTM8009A_SetOrientation+0xe0>)
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	601a      	str	r2, [r3, #0]
 8002d6e:	e024      	b.n	8002dba <OTM8009A_SetOrientation+0xc2>
  }
  else
  {
    ret = otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_MADCTR, &tmp1, 0);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f103 0010 	add.w	r0, r3, #16
 8002d76:	f107 020a 	add.w	r2, r7, #10
 8002d7a:	2300      	movs	r3, #0
 8002d7c:	2136      	movs	r1, #54	@ 0x36
 8002d7e:	f000 f961 	bl	8003044 <otm8009a_write_reg>
 8002d82:	60f8      	str	r0, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_CASET, LcdRegData27, 4);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f103 0010 	add.w	r0, r3, #16
 8002d8a:	2304      	movs	r3, #4
 8002d8c:	4a10      	ldr	r2, [pc, #64]	@ (8002dd0 <OTM8009A_SetOrientation+0xd8>)
 8002d8e:	212a      	movs	r1, #42	@ 0x2a
 8002d90:	f000 f958 	bl	8003044 <otm8009a_write_reg>
 8002d94:	4602      	mov	r2, r0
 8002d96:	68fb      	ldr	r3, [r7, #12]
 8002d98:	4413      	add	r3, r2
 8002d9a:	60fb      	str	r3, [r7, #12]
    ret += otm8009a_write_reg(&pObj->Ctx, OTM8009A_CMD_PASET, LcdRegData28, 4);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f103 0010 	add.w	r0, r3, #16
 8002da2:	2304      	movs	r3, #4
 8002da4:	4a0b      	ldr	r2, [pc, #44]	@ (8002dd4 <OTM8009A_SetOrientation+0xdc>)
 8002da6:	212b      	movs	r1, #43	@ 0x2b
 8002da8:	f000 f94c 	bl	8003044 <otm8009a_write_reg>
 8002dac:	4602      	mov	r2, r0
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	4413      	add	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
    
    OTM8009ACtx.Orientation = OTM8009A_ORIENTATION_PORTRAIT;
 8002db4:	4b08      	ldr	r3, [pc, #32]	@ (8002dd8 <OTM8009A_SetOrientation+0xe0>)
 8002db6:	2200      	movs	r2, #0
 8002db8:	601a      	str	r2, [r3, #0]
  }
  
  if(ret != OTM8009A_OK)
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <OTM8009A_SetOrientation+0xce>
  {
    ret = OTM8009A_ERROR;
 8002dc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002dc4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8002dc6:	68fb      	ldr	r3, [r7, #12]
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	3710      	adds	r7, #16
 8002dcc:	46bd      	mov	sp, r7
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	08027568 	.word	0x08027568
 8002dd4:	0802756c 	.word	0x0802756c
 8002dd8:	24000cfc 	.word	0x24000cfc

08002ddc <OTM8009A_GetOrientation>:
  * @param  pObj Component object
  * @param  Orientation   display Orientation to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetOrientation(OTM8009A_Object_t *pObj, uint32_t *Orientation)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	b083      	sub	sp, #12
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]
 8002de4:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  *Orientation = OTM8009ACtx.Orientation;
 8002de6:	4b05      	ldr	r3, [pc, #20]	@ (8002dfc <OTM8009A_GetOrientation+0x20>)
 8002de8:	681a      	ldr	r2, [r3, #0]
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	601a      	str	r2, [r3, #0]
  
  return OTM8009A_OK;
 8002dee:	2300      	movs	r3, #0
}
 8002df0:	4618      	mov	r0, r3
 8002df2:	370c      	adds	r7, #12
 8002df4:	46bd      	mov	sp, r7
 8002df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dfa:	4770      	bx	lr
 8002dfc:	24000cfc 	.word	0x24000cfc

08002e00 <OTM8009A_GetXSize>:
  * @param  pObj Component object
  * @param  Xsize   display Width to be set
  * @retval Component status
  */
int32_t OTM8009A_GetXSize(OTM8009A_Object_t *pObj, uint32_t *Xsize)
{
 8002e00:	b480      	push	{r7}
 8002e02:	b083      	sub	sp, #12
 8002e04:	af00      	add	r7, sp, #0
 8002e06:	6078      	str	r0, [r7, #4]
 8002e08:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8002e0a:	4b0e      	ldr	r3, [pc, #56]	@ (8002e44 <OTM8009A_GetXSize+0x44>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <OTM8009A_GetXSize+0x18>
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d005      	beq.n	8002e22 <OTM8009A_GetXSize+0x22>
 8002e16:	e009      	b.n	8002e2c <OTM8009A_GetXSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Xsize = OTM8009A_480X800_WIDTH;
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002e1e:	601a      	str	r2, [r3, #0]
    break;
 8002e20:	e009      	b.n	8002e36 <OTM8009A_GetXSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Xsize = OTM8009A_800X480_WIDTH;
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e28:	601a      	str	r2, [r3, #0]
    break;
 8002e2a:	e004      	b.n	8002e36 <OTM8009A_GetXSize+0x36>
  default:
    *Xsize = OTM8009A_800X480_WIDTH;
 8002e2c:	683b      	ldr	r3, [r7, #0]
 8002e2e:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e32:	601a      	str	r2, [r3, #0]
    break;
 8002e34:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8002e36:	2300      	movs	r3, #0
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	370c      	adds	r7, #12
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e42:	4770      	bx	lr
 8002e44:	24000cfc 	.word	0x24000cfc

08002e48 <OTM8009A_GetYSize>:
  * @param  pObj Component object
  * @param  Ysize   display Height to be set
  * @retval Component status
  */
int32_t OTM8009A_GetYSize(OTM8009A_Object_t *pObj, uint32_t *Ysize)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
 8002e50:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  switch(OTM8009ACtx.Orientation)
 8002e52:	4b0e      	ldr	r3, [pc, #56]	@ (8002e8c <OTM8009A_GetYSize+0x44>)
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	2b00      	cmp	r3, #0
 8002e58:	d002      	beq.n	8002e60 <OTM8009A_GetYSize+0x18>
 8002e5a:	2b01      	cmp	r3, #1
 8002e5c:	d005      	beq.n	8002e6a <OTM8009A_GetYSize+0x22>
 8002e5e:	e009      	b.n	8002e74 <OTM8009A_GetYSize+0x2c>
  {
  case OTM8009A_ORIENTATION_PORTRAIT:
    *Ysize = OTM8009A_480X800_HEIGHT;
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	f44f 7248 	mov.w	r2, #800	@ 0x320
 8002e66:	601a      	str	r2, [r3, #0]
    break;
 8002e68:	e009      	b.n	8002e7e <OTM8009A_GetYSize+0x36>
  case OTM8009A_ORIENTATION_LANDSCAPE:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002e70:	601a      	str	r2, [r3, #0]
    break;
 8002e72:	e004      	b.n	8002e7e <OTM8009A_GetYSize+0x36>
  default:
    *Ysize = OTM8009A_800X480_HEIGHT;
 8002e74:	683b      	ldr	r3, [r7, #0]
 8002e76:	f44f 72f0 	mov.w	r2, #480	@ 0x1e0
 8002e7a:	601a      	str	r2, [r3, #0]
    break;
 8002e7c:	bf00      	nop
  }
  
  return OTM8009A_OK;
 8002e7e:	2300      	movs	r3, #0
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	370c      	adds	r7, #12
 8002e84:	46bd      	mov	sp, r7
 8002e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e8a:	4770      	bx	lr
 8002e8c:	24000cfc 	.word	0x24000cfc

08002e90 <OTM8009A_SetCursor>:
  * @param  Xpos X position
  * @param  Ypos Y position
  * @retval Component status
  */
int32_t OTM8009A_SetCursor(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos)
{
 8002e90:	b480      	push	{r7}
 8002e92:	b085      	sub	sp, #20
 8002e94:	af00      	add	r7, sp, #0
 8002e96:	60f8      	str	r0, [r7, #12]
 8002e98:	60b9      	str	r1, [r7, #8]
 8002e9a:	607a      	str	r2, [r7, #4]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002e9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ea0:	4618      	mov	r0, r3
 8002ea2:	3714      	adds	r7, #20
 8002ea4:	46bd      	mov	sp, r7
 8002ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eaa:	4770      	bx	lr

08002eac <OTM8009A_DrawBitmap>:
  * @param  Ypos Y position
  * @param  pBmp pointer to bmp data
  * @retval Component status
  */
int32_t OTM8009A_DrawBitmap(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 8002eac:	b480      	push	{r7}
 8002eae:	b085      	sub	sp, #20
 8002eb0:	af00      	add	r7, sp, #0
 8002eb2:	60f8      	str	r0, [r7, #12]
 8002eb4:	60b9      	str	r1, [r7, #8]
 8002eb6:	607a      	str	r2, [r7, #4]
 8002eb8:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002eba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002ebe:	4618      	mov	r0, r3
 8002ec0:	3714      	adds	r7, #20
 8002ec2:	46bd      	mov	sp, r7
 8002ec4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ec8:	4770      	bx	lr

08002eca <OTM8009A_FillRGBRect>:

int32_t OTM8009A_FillRGBRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 8002eca:	b480      	push	{r7}
 8002ecc:	b085      	sub	sp, #20
 8002ece:	af00      	add	r7, sp, #0
 8002ed0:	60f8      	str	r0, [r7, #12]
 8002ed2:	60b9      	str	r1, [r7, #8]
 8002ed4:	607a      	str	r2, [r7, #4]
 8002ed6:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002ed8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002edc:	4618      	mov	r0, r3
 8002ede:	3714      	adds	r7, #20
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr

08002ee8 <OTM8009A_DrawHLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawHLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002ee8:	b480      	push	{r7}
 8002eea:	b085      	sub	sp, #20
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	60f8      	str	r0, [r7, #12]
 8002ef0:	60b9      	str	r1, [r7, #8]
 8002ef2:	607a      	str	r2, [r7, #4]
 8002ef4:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002ef6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002efa:	4618      	mov	r0, r3
 8002efc:	3714      	adds	r7, #20
 8002efe:	46bd      	mov	sp, r7
 8002f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f04:	4770      	bx	lr

08002f06 <OTM8009A_DrawVLine>:
  * @param  Length Line length
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_DrawVLine(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8002f06:	b480      	push	{r7}
 8002f08:	b085      	sub	sp, #20
 8002f0a:	af00      	add	r7, sp, #0
 8002f0c:	60f8      	str	r0, [r7, #12]
 8002f0e:	60b9      	str	r1, [r7, #8]
 8002f10:	607a      	str	r2, [r7, #4]
 8002f12:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002f14:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f18:	4618      	mov	r0, r3
 8002f1a:	3714      	adds	r7, #20
 8002f1c:	46bd      	mov	sp, r7
 8002f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f22:	4770      	bx	lr

08002f24 <OTM8009A_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Draw color
  * @retval Component status
  */
int32_t OTM8009A_FillRect(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8002f24:	b480      	push	{r7}
 8002f26:	b085      	sub	sp, #20
 8002f28:	af00      	add	r7, sp, #0
 8002f2a:	60f8      	str	r0, [r7, #12]
 8002f2c:	60b9      	str	r1, [r7, #8]
 8002f2e:	607a      	str	r2, [r7, #4]
 8002f30:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002f32:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3714      	adds	r7, #20
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f40:	4770      	bx	lr

08002f42 <OTM8009A_GetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_GetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 8002f42:	b480      	push	{r7}
 8002f44:	b085      	sub	sp, #20
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	60f8      	str	r0, [r7, #12]
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002f50:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f54:	4618      	mov	r0, r3
 8002f56:	3714      	adds	r7, #20
 8002f58:	46bd      	mov	sp, r7
 8002f5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f5e:	4770      	bx	lr

08002f60 <OTM8009A_SetPixel>:
  * @param  Ypos Y position
  * @param  Color Color to be returned
  * @retval Component status
  */
int32_t OTM8009A_SetPixel(OTM8009A_Object_t *pObj, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 8002f60:	b480      	push	{r7}
 8002f62:	b085      	sub	sp, #20
 8002f64:	af00      	add	r7, sp, #0
 8002f66:	60f8      	str	r0, [r7, #12]
 8002f68:	60b9      	str	r1, [r7, #8]
 8002f6a:	607a      	str	r2, [r7, #4]
 8002f6c:	603b      	str	r3, [r7, #0]
  /* Prevent unused argument(s) compilation warning */  
  (void)(pObj);
  
  return OTM8009A_ERROR;
 8002f6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002f72:	4618      	mov	r0, r3
 8002f74:	3714      	adds	r7, #20
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <OTM8009A_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_ReadRegWrap(void *Handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8002f7e:	b590      	push	{r4, r7, lr}
 8002f80:	b087      	sub	sp, #28
 8002f82:	af00      	add	r7, sp, #0
 8002f84:	60f8      	str	r0, [r7, #12]
 8002f86:	607a      	str	r2, [r7, #4]
 8002f88:	461a      	mov	r2, r3
 8002f8a:	460b      	mov	r3, r1
 8002f8c:	817b      	strh	r3, [r7, #10]
 8002f8e:	4613      	mov	r3, r2
 8002f90:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	689c      	ldr	r4, [r3, #8]
 8002f9a:	697b      	ldr	r3, [r7, #20]
 8002f9c:	8818      	ldrh	r0, [r3, #0]
 8002f9e:	893b      	ldrh	r3, [r7, #8]
 8002fa0:	8979      	ldrh	r1, [r7, #10]
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	47a0      	blx	r4
 8002fa6:	4603      	mov	r3, r0
}
 8002fa8:	4618      	mov	r0, r3
 8002faa:	371c      	adds	r7, #28
 8002fac:	46bd      	mov	sp, r7
 8002fae:	bd90      	pop	{r4, r7, pc}

08002fb0 <OTM8009A_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OTM8009A_WriteRegWrap(void *Handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8002fb0:	b590      	push	{r4, r7, lr}
 8002fb2:	b087      	sub	sp, #28
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	60f8      	str	r0, [r7, #12]
 8002fb8:	607a      	str	r2, [r7, #4]
 8002fba:	461a      	mov	r2, r3
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	817b      	strh	r3, [r7, #10]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	813b      	strh	r3, [r7, #8]
  OTM8009A_Object_t *pObj = (OTM8009A_Object_t *)Handle;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	685c      	ldr	r4, [r3, #4]
 8002fcc:	697b      	ldr	r3, [r7, #20]
 8002fce:	8818      	ldrh	r0, [r3, #0]
 8002fd0:	893b      	ldrh	r3, [r7, #8]
 8002fd2:	8979      	ldrh	r1, [r7, #10]
 8002fd4:	687a      	ldr	r2, [r7, #4]
 8002fd6:	47a0      	blx	r4
 8002fd8:	4603      	mov	r3, r0
}
 8002fda:	4618      	mov	r0, r3
 8002fdc:	371c      	adds	r7, #28
 8002fde:	46bd      	mov	sp, r7
 8002fe0:	bd90      	pop	{r4, r7, pc}

08002fe2 <OTM8009A_IO_Delay>:
/**
  * @brief  OTM8009A delay
  * @param  Delay  Delay in ms
  */
static int32_t OTM8009A_IO_Delay(OTM8009A_Object_t *pObj, uint32_t Delay)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b084      	sub	sp, #16
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
 8002fea:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	68db      	ldr	r3, [r3, #12]
 8002ff0:	4798      	blx	r3
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8002ff6:	bf00      	nop
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	68db      	ldr	r3, [r3, #12]
 8002ffc:	4798      	blx	r3
 8002ffe:	4603      	mov	r3, r0
 8003000:	461a      	mov	r2, r3
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	1ad3      	subs	r3, r2, r3
 8003006:	683a      	ldr	r2, [r7, #0]
 8003008:	429a      	cmp	r2, r3
 800300a:	d8f5      	bhi.n	8002ff8 <OTM8009A_IO_Delay+0x16>
  {
  }
  return OTM8009A_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <otm8009a_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t otm8009a_read_reg(otm8009a_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8003016:	b590      	push	{r4, r7, lr}
 8003018:	b085      	sub	sp, #20
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	607a      	str	r2, [r7, #4]
 8003020:	461a      	mov	r2, r3
 8003022:	460b      	mov	r3, r1
 8003024:	817b      	strh	r3, [r7, #10]
 8003026:	4613      	mov	r3, r2
 8003028:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	685c      	ldr	r4, [r3, #4]
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	6898      	ldr	r0, [r3, #8]
 8003032:	893b      	ldrh	r3, [r7, #8]
 8003034:	8979      	ldrh	r1, [r7, #10]
 8003036:	687a      	ldr	r2, [r7, #4]
 8003038:	47a0      	blx	r4
 800303a:	4603      	mov	r3, r0
}
 800303c:	4618      	mov	r0, r3
 800303e:	3714      	adds	r7, #20
 8003040:	46bd      	mov	sp, r7
 8003042:	bd90      	pop	{r4, r7, pc}

08003044 <otm8009a_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t otm8009a_write_reg(otm8009a_ctx_t *ctx, uint16_t reg, const uint8_t *pdata, uint16_t length)
{
 8003044:	b590      	push	{r4, r7, lr}
 8003046:	b085      	sub	sp, #20
 8003048:	af00      	add	r7, sp, #0
 800304a:	60f8      	str	r0, [r7, #12]
 800304c:	607a      	str	r2, [r7, #4]
 800304e:	461a      	mov	r2, r3
 8003050:	460b      	mov	r3, r1
 8003052:	817b      	strh	r3, [r7, #10]
 8003054:	4613      	mov	r3, r2
 8003056:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)pdata, length);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	681c      	ldr	r4, [r3, #0]
 800305c:	68fb      	ldr	r3, [r7, #12]
 800305e:	6898      	ldr	r0, [r3, #8]
 8003060:	893b      	ldrh	r3, [r7, #8]
 8003062:	8979      	ldrh	r1, [r7, #10]
 8003064:	687a      	ldr	r2, [r7, #4]
 8003066:	47a0      	blx	r4
 8003068:	4603      	mov	r3, r0
}
 800306a:	4618      	mov	r0, r3
 800306c:	3714      	adds	r7, #20
 800306e:	46bd      	mov	sp, r7
 8003070:	bd90      	pop	{r4, r7, pc}
	...

08003074 <OV5640_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV5640_RegisterBusIO(OV5640_Object_t *pObj, OV5640_IO_t *pIO)
{
 8003074:	b580      	push	{r7, lr}
 8003076:	b084      	sub	sp, #16
 8003078:	af00      	add	r7, sp, #0
 800307a:	6078      	str	r0, [r7, #4]
 800307c:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2b00      	cmp	r3, #0
 8003082:	d103      	bne.n	800308c <OV5640_RegisterBusIO+0x18>
  {
    ret = OV5640_ERROR;
 8003084:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003088:	60fb      	str	r3, [r7, #12]
 800308a:	e02c      	b.n	80030e6 <OV5640_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	681a      	ldr	r2, [r3, #0]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685a      	ldr	r2, [r3, #4]
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	891a      	ldrh	r2, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68da      	ldr	r2, [r3, #12]
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80030ac:	683b      	ldr	r3, [r7, #0]
 80030ae:	691a      	ldr	r2, [r3, #16]
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	695a      	ldr	r2, [r3, #20]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV5640_ReadRegWrap;
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	4a0c      	ldr	r2, [pc, #48]	@ (80030f0 <OV5640_RegisterBusIO+0x7c>)
 80030c0:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV5640_WriteRegWrap;
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	4a0b      	ldr	r2, [pc, #44]	@ (80030f4 <OV5640_RegisterBusIO+0x80>)
 80030c6:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	687a      	ldr	r2, [r7, #4]
 80030cc:	621a      	str	r2, [r3, #32]

    if (pObj->IO.Init != NULL)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	2b00      	cmp	r3, #0
 80030d4:	d004      	beq.n	80030e0 <OV5640_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4798      	blx	r3
 80030dc:	60f8      	str	r0, [r7, #12]
 80030de:	e002      	b.n	80030e6 <OV5640_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV5640_ERROR;
 80030e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030e4:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 80030e6:	68fb      	ldr	r3, [r7, #12]
}
 80030e8:	4618      	mov	r0, r3
 80030ea:	3710      	adds	r7, #16
 80030ec:	46bd      	mov	sp, r7
 80030ee:	bd80      	pop	{r7, pc}
 80030f0:	08004a7d 	.word	0x08004a7d
 80030f4:	08004aaf 	.word	0x08004aaf

080030f8 <OV5640_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_Init(OV5640_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b088      	sub	sp, #32
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	60f8      	str	r0, [r7, #12]
 8003100:	60b9      	str	r1, [r7, #8]
 8003102:	607a      	str	r2, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 8003104:	2300      	movs	r3, #0
 8003106:	61bb      	str	r3, [r7, #24]
    {OV5640_AEC_CTRL1F, 0x14},
    {OV5640_SYSTEM_CTROL0, 0x02},
  };
  uint8_t tmp;

  if (pObj->IsInitialized == 0U)
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800310e:	2b00      	cmp	r3, #0
 8003110:	f040 8091 	bne.w	8003236 <OV5640_Init+0x13e>
  {
    /* Check if resolution is supported */
    if ((Resolution > OV5640_R800x480) ||
 8003114:	68bb      	ldr	r3, [r7, #8]
 8003116:	2b04      	cmp	r3, #4
 8003118:	d80e      	bhi.n	8003138 <OV5640_Init+0x40>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d00f      	beq.n	8003140 <OV5640_Init+0x48>
        ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2b02      	cmp	r3, #2
 8003124:	d00c      	beq.n	8003140 <OV5640_Init+0x48>
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b01      	cmp	r3, #1
 800312a:	d009      	beq.n	8003140 <OV5640_Init+0x48>
         (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2b07      	cmp	r3, #7
 8003130:	d006      	beq.n	8003140 <OV5640_Init+0x48>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	2b08      	cmp	r3, #8
 8003136:	d003      	beq.n	8003140 <OV5640_Init+0x48>
         (PixelFormat != OV5640_JPEG)))
    {
      ret = OV5640_ERROR;
 8003138:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800313c:	61bb      	str	r3, [r7, #24]
 800313e:	e07a      	b.n	8003236 <OV5640_Init+0x13e>
    }
    else
    {
      /* Set common parameters for all resolutions */
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003140:	2300      	movs	r3, #0
 8003142:	61fb      	str	r3, [r7, #28]
 8003144:	e01f      	b.n	8003186 <OV5640_Init+0x8e>
      {
        if (ret != OV5640_ERROR)
 8003146:	69bb      	ldr	r3, [r7, #24]
 8003148:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800314c:	d018      	beq.n	8003180 <OV5640_Init+0x88>
        {
          tmp = (uint8_t)OV5640_Common[index][1];
 800314e:	4a3c      	ldr	r2, [pc, #240]	@ (8003240 <OV5640_Init+0x148>)
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	009b      	lsls	r3, r3, #2
 8003154:	4413      	add	r3, r2
 8003156:	885b      	ldrh	r3, [r3, #2]
 8003158:	b2db      	uxtb	r3, r3
 800315a:	75fb      	strb	r3, [r7, #23]

          if (ov5640_write_reg(&pObj->Ctx, OV5640_Common[index][0], &tmp, 1) != OV5640_OK)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	f103 0018 	add.w	r0, r3, #24
 8003162:	4a37      	ldr	r2, [pc, #220]	@ (8003240 <OV5640_Init+0x148>)
 8003164:	69fb      	ldr	r3, [r7, #28]
 8003166:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800316a:	f107 0217 	add.w	r2, r7, #23
 800316e:	2301      	movs	r3, #1
 8003170:	f001 fccd 	bl	8004b0e <ov5640_write_reg>
 8003174:	4603      	mov	r3, r0
 8003176:	2b00      	cmp	r3, #0
 8003178:	d002      	beq.n	8003180 <OV5640_Init+0x88>
          {
            ret = OV5640_ERROR;
 800317a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800317e:	61bb      	str	r3, [r7, #24]
      for (index = 0; index < (sizeof(OV5640_Common) / 4U) ; index++)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	3301      	adds	r3, #1
 8003184:	61fb      	str	r3, [r7, #28]
 8003186:	69fb      	ldr	r3, [r7, #28]
 8003188:	2bf5      	cmp	r3, #245	@ 0xf5
 800318a:	d9dc      	bls.n	8003146 <OV5640_Init+0x4e>
          }
        }
      }

      if(ret == OV5640_OK)
 800318c:	69bb      	ldr	r3, [r7, #24]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d127      	bne.n	80031e2 <OV5640_Init+0xea>
      {
        /* Set configuration for Serial Interface */
        if(pObj->Mode == SERIAL_MODE)
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8003198:	2b01      	cmp	r3, #1
 800319a:	d116      	bne.n	80031ca <OV5640_Init+0xd2>
        {
          if(OV5640_EnableMIPIMode(pObj) != OV5640_OK)
 800319c:	68f8      	ldr	r0, [r7, #12]
 800319e:	f001 fbe9 	bl	8004974 <OV5640_EnableMIPIMode>
 80031a2:	4603      	mov	r3, r0
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d003      	beq.n	80031b0 <OV5640_Init+0xb8>
          {
            ret = OV5640_ERROR;
 80031a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031ac:	61bb      	str	r3, [r7, #24]
 80031ae:	e018      	b.n	80031e2 <OV5640_Init+0xea>
          }
          else if(OV5640_SetMIPIVirtualChannel(pObj, pObj->VirtualChannelID) != OV5640_OK)
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031b4:	4619      	mov	r1, r3
 80031b6:	68f8      	ldr	r0, [r7, #12]
 80031b8:	f001 fc0c 	bl	80049d4 <OV5640_SetMIPIVirtualChannel>
 80031bc:	4603      	mov	r3, r0
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00f      	beq.n	80031e2 <OV5640_Init+0xea>
          {
            ret = OV5640_ERROR;
 80031c2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031c6:	61bb      	str	r3, [r7, #24]
 80031c8:	e00b      	b.n	80031e2 <OV5640_Init+0xea>
          }
        }
        else
        {
          /* Set configuration for parallel Interface */
          if(OV5640_EnableDVPMode(pObj) != OV5640_OK)
 80031ca:	68f8      	ldr	r0, [r7, #12]
 80031cc:	f001 fba2 	bl	8004914 <OV5640_EnableDVPMode>
 80031d0:	4603      	mov	r3, r0
 80031d2:	2b00      	cmp	r3, #0
 80031d4:	d003      	beq.n	80031de <OV5640_Init+0xe6>
          {
            ret = OV5640_ERROR;
 80031d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031da:	61bb      	str	r3, [r7, #24]
 80031dc:	e001      	b.n	80031e2 <OV5640_Init+0xea>
          }
          else
          {
            ret = OV5640_OK;
 80031de:	2300      	movs	r3, #0
 80031e0:	61bb      	str	r3, [r7, #24]
          }
        }
      }


      if (ret == OV5640_OK)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d126      	bne.n	8003236 <OV5640_Init+0x13e>
      {
        /* Set specific parameters for each resolution */
        if (OV5640_SetResolution(pObj, Resolution) != OV5640_OK)
 80031e8:	68b9      	ldr	r1, [r7, #8]
 80031ea:	68f8      	ldr	r0, [r7, #12]
 80031ec:	f000 f9e0 	bl	80035b0 <OV5640_SetResolution>
 80031f0:	4603      	mov	r3, r0
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d003      	beq.n	80031fe <OV5640_Init+0x106>
        {
          ret = OV5640_ERROR;
 80031f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80031fa:	61bb      	str	r3, [r7, #24]
 80031fc:	e01b      	b.n	8003236 <OV5640_Init+0x13e>
        }/* Set specific parameters for each pixel format */
        else if (OV5640_SetPixelFormat(pObj, PixelFormat) != OV5640_OK)
 80031fe:	6879      	ldr	r1, [r7, #4]
 8003200:	68f8      	ldr	r0, [r7, #12]
 8003202:	f000 f833 	bl	800326c <OV5640_SetPixelFormat>
 8003206:	4603      	mov	r3, r0
 8003208:	2b00      	cmp	r3, #0
 800320a:	d003      	beq.n	8003214 <OV5640_Init+0x11c>
        {
          ret = OV5640_ERROR;
 800320c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003210:	61bb      	str	r3, [r7, #24]
 8003212:	e010      	b.n	8003236 <OV5640_Init+0x13e>
        }/* Set PixelClock, Href and VSync Polarity */
        else if (OV5640_SetPolarities(pObj, OV5640_POLARITY_PCLK_HIGH, OV5640_POLARITY_HREF_HIGH,
 8003214:	2300      	movs	r3, #0
 8003216:	2201      	movs	r2, #1
 8003218:	2101      	movs	r1, #1
 800321a:	68f8      	ldr	r0, [r7, #12]
 800321c:	f000 fb62 	bl	80038e4 <OV5640_SetPolarities>
 8003220:	4603      	mov	r3, r0
 8003222:	2b00      	cmp	r3, #0
 8003224:	d003      	beq.n	800322e <OV5640_Init+0x136>
                                      OV5640_POLARITY_VSYNC_HIGH) != OV5640_OK)
        {
          ret = OV5640_ERROR;
 8003226:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800322a:	61bb      	str	r3, [r7, #24]
 800322c:	e003      	b.n	8003236 <OV5640_Init+0x13e>
        }
        else
        {
          pObj->IsInitialized = 1U;
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	2201      	movs	r2, #1
 8003232:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
      }
    }
  }

  return ret;
 8003236:	69bb      	ldr	r3, [r7, #24]
}
 8003238:	4618      	mov	r0, r3
 800323a:	3720      	adds	r7, #32
 800323c:	46bd      	mov	sp, r7
 800323e:	bd80      	pop	{r7, pc}
 8003240:	080276d4 	.word	0x080276d4

08003244 <OV5640_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_DeInit(OV5640_Object_t *pObj)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	6078      	str	r0, [r7, #4]
  if (pObj->IsInitialized == 1U)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8003252:	2b01      	cmp	r3, #1
 8003254:	d103      	bne.n	800325e <OV5640_DeInit+0x1a>
  {
    /* De-initialize camera sensor interface */
    pObj->IsInitialized = 0U;
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	2200      	movs	r2, #0
 800325a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return OV5640_OK;
 800325e:	2300      	movs	r3, #0
}
 8003260:	4618      	mov	r0, r3
 8003262:	370c      	adds	r7, #12
 8003264:	46bd      	mov	sp, r7
 8003266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800326a:	4770      	bx	lr

0800326c <OV5640_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_SetPixelFormat(OV5640_Object_t *pObj, uint32_t PixelFormat)
{
 800326c:	b580      	push	{r7, lr}
 800326e:	b086      	sub	sp, #24
 8003270:	af00      	add	r7, sp, #0
 8003272:	6078      	str	r0, [r7, #4]
 8003274:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8003276:	2300      	movs	r3, #0
 8003278:	617b      	str	r3, [r7, #20]
    {OV5640_FORMAT_CTRL00, 0x30},
    {OV5640_FORMAT_MUX_CTRL, 0x00},
  };

  /* Check if PixelFormat is supported */
  if ((PixelFormat != OV5640_RGB565) && (PixelFormat != OV5640_YUV422) &&
 800327a:	683b      	ldr	r3, [r7, #0]
 800327c:	2b00      	cmp	r3, #0
 800327e:	d00f      	beq.n	80032a0 <OV5640_SetPixelFormat+0x34>
 8003280:	683b      	ldr	r3, [r7, #0]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d00c      	beq.n	80032a0 <OV5640_SetPixelFormat+0x34>
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d009      	beq.n	80032a0 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_RGB888) && (PixelFormat != OV5640_Y8) &&
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	2b07      	cmp	r3, #7
 8003290:	d006      	beq.n	80032a0 <OV5640_SetPixelFormat+0x34>
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	2b08      	cmp	r3, #8
 8003296:	d003      	beq.n	80032a0 <OV5640_SetPixelFormat+0x34>
      (PixelFormat != OV5640_JPEG))
  {
    /* Pixel format not supported */
    ret = OV5640_ERROR;
 8003298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800329c:	617b      	str	r3, [r7, #20]
 800329e:	e16a      	b.n	8003576 <OV5640_SetPixelFormat+0x30a>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    switch (PixelFormat)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	3b01      	subs	r3, #1
 80032a4:	2b07      	cmp	r3, #7
 80032a6:	f200 80c3 	bhi.w	8003430 <OV5640_SetPixelFormat+0x1c4>
 80032aa:	a201      	add	r2, pc, #4	@ (adr r2, 80032b0 <OV5640_SetPixelFormat+0x44>)
 80032ac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80032b0:	08003329 	.word	0x08003329
 80032b4:	080032d1 	.word	0x080032d1
 80032b8:	08003431 	.word	0x08003431
 80032bc:	08003431 	.word	0x08003431
 80032c0:	08003431 	.word	0x08003431
 80032c4:	08003431 	.word	0x08003431
 80032c8:	08003381 	.word	0x08003381
 80032cc:	080033d9 	.word	0x080033d9
    {
      case OV5640_YUV422:
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 80032d0:	2300      	movs	r3, #0
 80032d2:	613b      	str	r3, [r7, #16]
 80032d4:	e024      	b.n	8003320 <OV5640_SetPixelFormat+0xb4>
        {
          if (ret != OV5640_ERROR)
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80032dc:	d01d      	beq.n	800331a <OV5640_SetPixelFormat+0xae>
          {
            tmp = (uint8_t)OV5640_PF_YUV422[index][1];
 80032de:	4aa8      	ldr	r2, [pc, #672]	@ (8003580 <OV5640_SetPixelFormat+0x314>)
 80032e0:	693b      	ldr	r3, [r7, #16]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	4413      	add	r3, r2
 80032e6:	885b      	ldrh	r3, [r3, #2]
 80032e8:	b2db      	uxtb	r3, r3
 80032ea:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_YUV422[index][0], &tmp, 1) != OV5640_OK)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	f103 0018 	add.w	r0, r3, #24
 80032f2:	4aa3      	ldr	r2, [pc, #652]	@ (8003580 <OV5640_SetPixelFormat+0x314>)
 80032f4:	693b      	ldr	r3, [r7, #16]
 80032f6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80032fa:	f107 020f 	add.w	r2, r7, #15
 80032fe:	2301      	movs	r3, #1
 8003300:	f001 fc05 	bl	8004b0e <ov5640_write_reg>
 8003304:	4603      	mov	r3, r0
 8003306:	2b00      	cmp	r3, #0
 8003308:	d003      	beq.n	8003312 <OV5640_SetPixelFormat+0xa6>
            {
              ret = OV5640_ERROR;
 800330a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800330e:	617b      	str	r3, [r7, #20]
 8003310:	e003      	b.n	800331a <OV5640_SetPixelFormat+0xae>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003312:	2101      	movs	r1, #1
 8003314:	6878      	ldr	r0, [r7, #4]
 8003316:	f001 fb97 	bl	8004a48 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_YUV422) / 4U); index++)
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	3301      	adds	r3, #1
 800331e:	613b      	str	r3, [r7, #16]
 8003320:	693b      	ldr	r3, [r7, #16]
 8003322:	2b01      	cmp	r3, #1
 8003324:	d9d7      	bls.n	80032d6 <OV5640_SetPixelFormat+0x6a>
            }
          }
        }
        break;
 8003326:	e0af      	b.n	8003488 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB888:
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003328:	2300      	movs	r3, #0
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	e024      	b.n	8003378 <OV5640_SetPixelFormat+0x10c>
        {
          if (ret != OV5640_ERROR)
 800332e:	697b      	ldr	r3, [r7, #20]
 8003330:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003334:	d01d      	beq.n	8003372 <OV5640_SetPixelFormat+0x106>
          {
            tmp = (uint8_t)OV5640_PF_RGB888[index][1];
 8003336:	4a93      	ldr	r2, [pc, #588]	@ (8003584 <OV5640_SetPixelFormat+0x318>)
 8003338:	693b      	ldr	r3, [r7, #16]
 800333a:	009b      	lsls	r3, r3, #2
 800333c:	4413      	add	r3, r2
 800333e:	885b      	ldrh	r3, [r3, #2]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB888[index][0], &tmp, 1) != OV5640_OK)
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	f103 0018 	add.w	r0, r3, #24
 800334a:	4a8e      	ldr	r2, [pc, #568]	@ (8003584 <OV5640_SetPixelFormat+0x318>)
 800334c:	693b      	ldr	r3, [r7, #16]
 800334e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003352:	f107 020f 	add.w	r2, r7, #15
 8003356:	2301      	movs	r3, #1
 8003358:	f001 fbd9 	bl	8004b0e <ov5640_write_reg>
 800335c:	4603      	mov	r3, r0
 800335e:	2b00      	cmp	r3, #0
 8003360:	d003      	beq.n	800336a <OV5640_SetPixelFormat+0xfe>
            {
              ret = OV5640_ERROR;
 8003362:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003366:	617b      	str	r3, [r7, #20]
 8003368:	e003      	b.n	8003372 <OV5640_SetPixelFormat+0x106>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800336a:	2101      	movs	r1, #1
 800336c:	6878      	ldr	r0, [r7, #4]
 800336e:	f001 fb6b 	bl	8004a48 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB888) / 4U); index++)
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	3301      	adds	r3, #1
 8003376:	613b      	str	r3, [r7, #16]
 8003378:	693b      	ldr	r3, [r7, #16]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d9d7      	bls.n	800332e <OV5640_SetPixelFormat+0xc2>
            }
          }
        }
        break;
 800337e:	e083      	b.n	8003488 <OV5640_SetPixelFormat+0x21c>

      case OV5640_Y8:
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 8003380:	2300      	movs	r3, #0
 8003382:	613b      	str	r3, [r7, #16]
 8003384:	e024      	b.n	80033d0 <OV5640_SetPixelFormat+0x164>
        {
          if (ret != OV5640_ERROR)
 8003386:	697b      	ldr	r3, [r7, #20]
 8003388:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800338c:	d01d      	beq.n	80033ca <OV5640_SetPixelFormat+0x15e>
          {
            tmp = (uint8_t)OV5640_PF_Y8[index][1];
 800338e:	4a7e      	ldr	r2, [pc, #504]	@ (8003588 <OV5640_SetPixelFormat+0x31c>)
 8003390:	693b      	ldr	r3, [r7, #16]
 8003392:	009b      	lsls	r3, r3, #2
 8003394:	4413      	add	r3, r2
 8003396:	885b      	ldrh	r3, [r3, #2]
 8003398:	b2db      	uxtb	r3, r3
 800339a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_Y8[index][0], &tmp, 1) != OV5640_OK)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	f103 0018 	add.w	r0, r3, #24
 80033a2:	4a79      	ldr	r2, [pc, #484]	@ (8003588 <OV5640_SetPixelFormat+0x31c>)
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80033aa:	f107 020f 	add.w	r2, r7, #15
 80033ae:	2301      	movs	r3, #1
 80033b0:	f001 fbad 	bl	8004b0e <ov5640_write_reg>
 80033b4:	4603      	mov	r3, r0
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d003      	beq.n	80033c2 <OV5640_SetPixelFormat+0x156>
            {
              ret = OV5640_ERROR;
 80033ba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80033be:	617b      	str	r3, [r7, #20]
 80033c0:	e003      	b.n	80033ca <OV5640_SetPixelFormat+0x15e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 80033c2:	2101      	movs	r1, #1
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f001 fb3f 	bl	8004a48 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_Y8) / 4U); index++)
 80033ca:	693b      	ldr	r3, [r7, #16]
 80033cc:	3301      	adds	r3, #1
 80033ce:	613b      	str	r3, [r7, #16]
 80033d0:	693b      	ldr	r3, [r7, #16]
 80033d2:	2b01      	cmp	r3, #1
 80033d4:	d9d7      	bls.n	8003386 <OV5640_SetPixelFormat+0x11a>
            }
          }
        }
        break;
 80033d6:	e057      	b.n	8003488 <OV5640_SetPixelFormat+0x21c>

      case OV5640_JPEG:
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 80033d8:	2300      	movs	r3, #0
 80033da:	613b      	str	r3, [r7, #16]
 80033dc:	e024      	b.n	8003428 <OV5640_SetPixelFormat+0x1bc>
        {
          if (ret != OV5640_ERROR)
 80033de:	697b      	ldr	r3, [r7, #20]
 80033e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80033e4:	d01d      	beq.n	8003422 <OV5640_SetPixelFormat+0x1b6>
          {
            tmp = (uint8_t)OV5640_PF_JPEG[index][1];
 80033e6:	4a69      	ldr	r2, [pc, #420]	@ (800358c <OV5640_SetPixelFormat+0x320>)
 80033e8:	693b      	ldr	r3, [r7, #16]
 80033ea:	009b      	lsls	r3, r3, #2
 80033ec:	4413      	add	r3, r2
 80033ee:	885b      	ldrh	r3, [r3, #2]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_JPEG[index][0], &tmp, 1) != OV5640_OK)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	f103 0018 	add.w	r0, r3, #24
 80033fa:	4a64      	ldr	r2, [pc, #400]	@ (800358c <OV5640_SetPixelFormat+0x320>)
 80033fc:	693b      	ldr	r3, [r7, #16]
 80033fe:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003402:	f107 020f 	add.w	r2, r7, #15
 8003406:	2301      	movs	r3, #1
 8003408:	f001 fb81 	bl	8004b0e <ov5640_write_reg>
 800340c:	4603      	mov	r3, r0
 800340e:	2b00      	cmp	r3, #0
 8003410:	d003      	beq.n	800341a <OV5640_SetPixelFormat+0x1ae>
            {
              ret = OV5640_ERROR;
 8003412:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003416:	617b      	str	r3, [r7, #20]
 8003418:	e003      	b.n	8003422 <OV5640_SetPixelFormat+0x1b6>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 800341a:	2101      	movs	r1, #1
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f001 fb13 	bl	8004a48 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_JPEG) / 4U); index++)
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	3301      	adds	r3, #1
 8003426:	613b      	str	r3, [r7, #16]
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	2b01      	cmp	r3, #1
 800342c:	d9d7      	bls.n	80033de <OV5640_SetPixelFormat+0x172>
            }
          }
        }
        break;
 800342e:	e02b      	b.n	8003488 <OV5640_SetPixelFormat+0x21c>

      case OV5640_RGB565:
      default:
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 8003430:	2300      	movs	r3, #0
 8003432:	613b      	str	r3, [r7, #16]
 8003434:	e024      	b.n	8003480 <OV5640_SetPixelFormat+0x214>
        {
          if (ret != OV5640_ERROR)
 8003436:	697b      	ldr	r3, [r7, #20]
 8003438:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800343c:	d01d      	beq.n	800347a <OV5640_SetPixelFormat+0x20e>
          {
            tmp = (uint8_t)OV5640_PF_RGB565[index][1];
 800343e:	4a54      	ldr	r2, [pc, #336]	@ (8003590 <OV5640_SetPixelFormat+0x324>)
 8003440:	693b      	ldr	r3, [r7, #16]
 8003442:	009b      	lsls	r3, r3, #2
 8003444:	4413      	add	r3, r2
 8003446:	885b      	ldrh	r3, [r3, #2]
 8003448:	b2db      	uxtb	r3, r3
 800344a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_PF_RGB565[index][0], &tmp, 1) != OV5640_OK)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	f103 0018 	add.w	r0, r3, #24
 8003452:	4a4f      	ldr	r2, [pc, #316]	@ (8003590 <OV5640_SetPixelFormat+0x324>)
 8003454:	693b      	ldr	r3, [r7, #16]
 8003456:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800345a:	f107 020f 	add.w	r2, r7, #15
 800345e:	2301      	movs	r3, #1
 8003460:	f001 fb55 	bl	8004b0e <ov5640_write_reg>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d003      	beq.n	8003472 <OV5640_SetPixelFormat+0x206>
            {
              ret = OV5640_ERROR;
 800346a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800346e:	617b      	str	r3, [r7, #20]
 8003470:	e003      	b.n	800347a <OV5640_SetPixelFormat+0x20e>
            }
            else
            {
              (void)OV5640_Delay(pObj, 1);
 8003472:	2101      	movs	r1, #1
 8003474:	6878      	ldr	r0, [r7, #4]
 8003476:	f001 fae7 	bl	8004a48 <OV5640_Delay>
        for (index = 0; index < (sizeof(OV5640_PF_RGB565) / 4U); index++)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	3301      	adds	r3, #1
 800347e:	613b      	str	r3, [r7, #16]
 8003480:	693b      	ldr	r3, [r7, #16]
 8003482:	2b01      	cmp	r3, #1
 8003484:	d9d7      	bls.n	8003436 <OV5640_SetPixelFormat+0x1ca>
            }
          }
        }
        break;
 8003486:	bf00      	nop

    }

    if (PixelFormat == OV5640_JPEG)
 8003488:	683b      	ldr	r3, [r7, #0]
 800348a:	2b08      	cmp	r3, #8
 800348c:	d173      	bne.n	8003576 <OV5640_SetPixelFormat+0x30a>
    {
      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	f103 0018 	add.w	r0, r3, #24
 8003494:	f107 020f 	add.w	r2, r7, #15
 8003498:	2301      	movs	r3, #1
 800349a:	f643 0121 	movw	r1, #14369	@ 0x3821
 800349e:	f001 fb1f 	bl	8004ae0 <ov5640_read_reg>
 80034a2:	4603      	mov	r3, r0
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d003      	beq.n	80034b0 <OV5640_SetPixelFormat+0x244>
      {
        ret = OV5640_ERROR;
 80034a8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034ac:	617b      	str	r3, [r7, #20]
 80034ae:	e062      	b.n	8003576 <OV5640_SetPixelFormat+0x30a>
      }
      else
      {
        tmp |= (1 << 5);
 80034b0:	7bfb      	ldrb	r3, [r7, #15]
 80034b2:	f043 0320 	orr.w	r3, r3, #32
 80034b6:	b2db      	uxtb	r3, r3
 80034b8:	73fb      	strb	r3, [r7, #15]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp, 1) != OV5640_OK)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f103 0018 	add.w	r0, r3, #24
 80034c0:	f107 020f 	add.w	r2, r7, #15
 80034c4:	2301      	movs	r3, #1
 80034c6:	f643 0121 	movw	r1, #14369	@ 0x3821
 80034ca:	f001 fb20 	bl	8004b0e <ov5640_write_reg>
 80034ce:	4603      	mov	r3, r0
 80034d0:	2b00      	cmp	r3, #0
 80034d2:	d003      	beq.n	80034dc <OV5640_SetPixelFormat+0x270>
        {
          ret = OV5640_ERROR;
 80034d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034d8:	617b      	str	r3, [r7, #20]
 80034da:	e04c      	b.n	8003576 <OV5640_SetPixelFormat+0x30a>
        }
        else
        {
          if (ov5640_read_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	f103 0018 	add.w	r0, r3, #24
 80034e2:	f107 020f 	add.w	r2, r7, #15
 80034e6:	2301      	movs	r3, #1
 80034e8:	f243 0102 	movw	r1, #12290	@ 0x3002
 80034ec:	f001 faf8 	bl	8004ae0 <ov5640_read_reg>
 80034f0:	4603      	mov	r3, r0
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d003      	beq.n	80034fe <OV5640_SetPixelFormat+0x292>
          {
            ret = OV5640_ERROR;
 80034f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80034fa:	617b      	str	r3, [r7, #20]
 80034fc:	e03b      	b.n	8003576 <OV5640_SetPixelFormat+0x30a>
          }
          else
          {
            tmp &= ~((1 << 4) | (1 << 3) | (1 << 2));
 80034fe:	7bfb      	ldrb	r3, [r7, #15]
 8003500:	f023 031c 	bic.w	r3, r3, #28
 8003504:	b2db      	uxtb	r3, r3
 8003506:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSREM_RESET02, &tmp, 1) != OV5640_OK)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	f103 0018 	add.w	r0, r3, #24
 800350e:	f107 020f 	add.w	r2, r7, #15
 8003512:	2301      	movs	r3, #1
 8003514:	f243 0102 	movw	r1, #12290	@ 0x3002
 8003518:	f001 faf9 	bl	8004b0e <ov5640_write_reg>
 800351c:	4603      	mov	r3, r0
 800351e:	2b00      	cmp	r3, #0
 8003520:	d003      	beq.n	800352a <OV5640_SetPixelFormat+0x2be>
            {
              ret = OV5640_ERROR;
 8003522:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003526:	617b      	str	r3, [r7, #20]
 8003528:	e025      	b.n	8003576 <OV5640_SetPixelFormat+0x30a>
            }
            else
            {
              if (ov5640_read_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	f103 0018 	add.w	r0, r3, #24
 8003530:	f107 020f 	add.w	r2, r7, #15
 8003534:	2301      	movs	r3, #1
 8003536:	f243 0106 	movw	r1, #12294	@ 0x3006
 800353a:	f001 fad1 	bl	8004ae0 <ov5640_read_reg>
 800353e:	4603      	mov	r3, r0
 8003540:	2b00      	cmp	r3, #0
 8003542:	d003      	beq.n	800354c <OV5640_SetPixelFormat+0x2e0>
              {
                ret = OV5640_ERROR;
 8003544:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003548:	617b      	str	r3, [r7, #20]
 800354a:	e014      	b.n	8003576 <OV5640_SetPixelFormat+0x30a>
              }
              else
              {
                tmp |= ((1 << 5) | (1 << 3));
 800354c:	7bfb      	ldrb	r3, [r7, #15]
 800354e:	f043 0328 	orr.w	r3, r3, #40	@ 0x28
 8003552:	b2db      	uxtb	r3, r3
 8003554:	73fb      	strb	r3, [r7, #15]
                if (ov5640_write_reg(&pObj->Ctx, OV5640_CLOCK_ENABLE02, &tmp, 1) != OV5640_OK)
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	f103 0018 	add.w	r0, r3, #24
 800355c:	f107 020f 	add.w	r2, r7, #15
 8003560:	2301      	movs	r3, #1
 8003562:	f243 0106 	movw	r1, #12294	@ 0x3006
 8003566:	f001 fad2 	bl	8004b0e <ov5640_write_reg>
 800356a:	4603      	mov	r3, r0
 800356c:	2b00      	cmp	r3, #0
 800356e:	d002      	beq.n	8003576 <OV5640_SetPixelFormat+0x30a>
                {
                  ret = OV5640_ERROR;
 8003570:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003574:	617b      	str	r3, [r7, #20]
          }
        }
      }
    }
  }
  return ret;
 8003576:	697b      	ldr	r3, [r7, #20]
}
 8003578:	4618      	mov	r0, r3
 800357a:	3718      	adds	r7, #24
 800357c:	46bd      	mov	sp, r7
 800357e:	bd80      	pop	{r7, pc}
 8003580:	08027aac 	.word	0x08027aac
 8003584:	08027ab4 	.word	0x08027ab4
 8003588:	08027abc 	.word	0x08027abc
 800358c:	08027ac4 	.word	0x08027ac4
 8003590:	08027acc 	.word	0x08027acc

08003594 <OV5640_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV5640_GetPixelFormat(OV5640_Object_t *pObj, uint32_t *PixelFormat)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV5640_ERROR;
 800359e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80035a2:	4618      	mov	r0, r3
 80035a4:	370c      	adds	r7, #12
 80035a6:	46bd      	mov	sp, r7
 80035a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ac:	4770      	bx	lr
	...

080035b0 <OV5640_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_SetResolution(OV5640_Object_t *pObj, uint32_t Resolution)
{
 80035b0:	b580      	push	{r7, lr}
 80035b2:	b086      	sub	sp, #24
 80035b4:	af00      	add	r7, sp, #0
 80035b6:	6078      	str	r0, [r7, #4]
 80035b8:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80035ba:	2300      	movs	r3, #0
 80035bc:	617b      	str	r3, [r7, #20]
    {OV5640_TIMING_DVPVO_HIGH, 0x00},
    {OV5640_TIMING_DVPVO_LOW, 0x78},
  };

  /* Check if resolution is supported */
  if (Resolution > OV5640_R800x480)
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	2b04      	cmp	r3, #4
 80035c2:	d903      	bls.n	80035cc <OV5640_SetResolution+0x1c>
  {
    ret = OV5640_ERROR;
 80035c4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	e0d8      	b.n	800377e <OV5640_SetResolution+0x1ce>
  }
  else
  {
    /* Initialize OV5640 */
    switch (Resolution)
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b04      	cmp	r3, #4
 80035d0:	f200 80d1 	bhi.w	8003776 <OV5640_SetResolution+0x1c6>
 80035d4:	a201      	add	r2, pc, #4	@ (adr r2, 80035dc <OV5640_SetResolution+0x2c>)
 80035d6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80035da:	bf00      	nop
 80035dc:	080035f1 	.word	0x080035f1
 80035e0:	0800363f 	.word	0x0800363f
 80035e4:	0800368d 	.word	0x0800368d
 80035e8:	080036db 	.word	0x080036db
 80035ec:	08003729 	.word	0x08003729
    {
      case OV5640_R160x120:
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 80035f0:	2300      	movs	r3, #0
 80035f2:	613b      	str	r3, [r7, #16]
 80035f4:	e01f      	b.n	8003636 <OV5640_SetResolution+0x86>
        {
          if (ret != OV5640_ERROR)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80035fc:	d018      	beq.n	8003630 <OV5640_SetResolution+0x80>
          {
            tmp = (uint8_t)OV5640_QQVGA[index][1];
 80035fe:	4a62      	ldr	r2, [pc, #392]	@ (8003788 <OV5640_SetResolution+0x1d8>)
 8003600:	693b      	ldr	r3, [r7, #16]
 8003602:	009b      	lsls	r3, r3, #2
 8003604:	4413      	add	r3, r2
 8003606:	885b      	ldrh	r3, [r3, #2]
 8003608:	b2db      	uxtb	r3, r3
 800360a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QQVGA[index][0], &tmp, 1) != OV5640_OK)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f103 0018 	add.w	r0, r3, #24
 8003612:	4a5d      	ldr	r2, [pc, #372]	@ (8003788 <OV5640_SetResolution+0x1d8>)
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 800361a:	f107 020f 	add.w	r2, r7, #15
 800361e:	2301      	movs	r3, #1
 8003620:	f001 fa75 	bl	8004b0e <ov5640_write_reg>
 8003624:	4603      	mov	r3, r0
 8003626:	2b00      	cmp	r3, #0
 8003628:	d002      	beq.n	8003630 <OV5640_SetResolution+0x80>
            {
              ret = OV5640_ERROR;
 800362a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800362e:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QQVGA) / 4U); index++)
 8003630:	693b      	ldr	r3, [r7, #16]
 8003632:	3301      	adds	r3, #1
 8003634:	613b      	str	r3, [r7, #16]
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	2b03      	cmp	r3, #3
 800363a:	d9dc      	bls.n	80035f6 <OV5640_SetResolution+0x46>
            }
          }
        }
        break;
 800363c:	e09f      	b.n	800377e <OV5640_SetResolution+0x1ce>
      case OV5640_R320x240:
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800363e:	2300      	movs	r3, #0
 8003640:	613b      	str	r3, [r7, #16]
 8003642:	e01f      	b.n	8003684 <OV5640_SetResolution+0xd4>
        {
          if (ret != OV5640_ERROR)
 8003644:	697b      	ldr	r3, [r7, #20]
 8003646:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800364a:	d018      	beq.n	800367e <OV5640_SetResolution+0xce>
          {
            tmp = (uint8_t)OV5640_QVGA[index][1];
 800364c:	4a4f      	ldr	r2, [pc, #316]	@ (800378c <OV5640_SetResolution+0x1dc>)
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	009b      	lsls	r3, r3, #2
 8003652:	4413      	add	r3, r2
 8003654:	885b      	ldrh	r3, [r3, #2]
 8003656:	b2db      	uxtb	r3, r3
 8003658:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_QVGA[index][0], &tmp, 1) != OV5640_OK)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	f103 0018 	add.w	r0, r3, #24
 8003660:	4a4a      	ldr	r2, [pc, #296]	@ (800378c <OV5640_SetResolution+0x1dc>)
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003668:	f107 020f 	add.w	r2, r7, #15
 800366c:	2301      	movs	r3, #1
 800366e:	f001 fa4e 	bl	8004b0e <ov5640_write_reg>
 8003672:	4603      	mov	r3, r0
 8003674:	2b00      	cmp	r3, #0
 8003676:	d002      	beq.n	800367e <OV5640_SetResolution+0xce>
            {
              ret = OV5640_ERROR;
 8003678:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800367c:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_QVGA) / 4U); index++)
 800367e:	693b      	ldr	r3, [r7, #16]
 8003680:	3301      	adds	r3, #1
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
 8003686:	2b03      	cmp	r3, #3
 8003688:	d9dc      	bls.n	8003644 <OV5640_SetResolution+0x94>
            }
          }
        }
        break;
 800368a:	e078      	b.n	800377e <OV5640_SetResolution+0x1ce>
      case OV5640_R480x272:
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 800368c:	2300      	movs	r3, #0
 800368e:	613b      	str	r3, [r7, #16]
 8003690:	e01f      	b.n	80036d2 <OV5640_SetResolution+0x122>
        {
          if (ret != OV5640_ERROR)
 8003692:	697b      	ldr	r3, [r7, #20]
 8003694:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003698:	d018      	beq.n	80036cc <OV5640_SetResolution+0x11c>
          {
            tmp = (uint8_t)OV5640_480x272[index][1];
 800369a:	4a3d      	ldr	r2, [pc, #244]	@ (8003790 <OV5640_SetResolution+0x1e0>)
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	009b      	lsls	r3, r3, #2
 80036a0:	4413      	add	r3, r2
 80036a2:	885b      	ldrh	r3, [r3, #2]
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_480x272[index][0], &tmp, 1) != OV5640_OK)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	f103 0018 	add.w	r0, r3, #24
 80036ae:	4a38      	ldr	r2, [pc, #224]	@ (8003790 <OV5640_SetResolution+0x1e0>)
 80036b0:	693b      	ldr	r3, [r7, #16]
 80036b2:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80036b6:	f107 020f 	add.w	r2, r7, #15
 80036ba:	2301      	movs	r3, #1
 80036bc:	f001 fa27 	bl	8004b0e <ov5640_write_reg>
 80036c0:	4603      	mov	r3, r0
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d002      	beq.n	80036cc <OV5640_SetResolution+0x11c>
            {
              ret = OV5640_ERROR;
 80036c6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80036ca:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_480x272) / 4U); index++)
 80036cc:	693b      	ldr	r3, [r7, #16]
 80036ce:	3301      	adds	r3, #1
 80036d0:	613b      	str	r3, [r7, #16]
 80036d2:	693b      	ldr	r3, [r7, #16]
 80036d4:	2b03      	cmp	r3, #3
 80036d6:	d9dc      	bls.n	8003692 <OV5640_SetResolution+0xe2>
            }
          }
        }
        break;
 80036d8:	e051      	b.n	800377e <OV5640_SetResolution+0x1ce>
      case OV5640_R640x480:
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 80036da:	2300      	movs	r3, #0
 80036dc:	613b      	str	r3, [r7, #16]
 80036de:	e01f      	b.n	8003720 <OV5640_SetResolution+0x170>
        {
          if (ret != OV5640_ERROR)
 80036e0:	697b      	ldr	r3, [r7, #20]
 80036e2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80036e6:	d018      	beq.n	800371a <OV5640_SetResolution+0x16a>
          {
            tmp = (uint8_t)OV5640_VGA[index][1];
 80036e8:	4a2a      	ldr	r2, [pc, #168]	@ (8003794 <OV5640_SetResolution+0x1e4>)
 80036ea:	693b      	ldr	r3, [r7, #16]
 80036ec:	009b      	lsls	r3, r3, #2
 80036ee:	4413      	add	r3, r2
 80036f0:	885b      	ldrh	r3, [r3, #2]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_VGA[index][0], &tmp, 1) != OV5640_OK)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	f103 0018 	add.w	r0, r3, #24
 80036fc:	4a25      	ldr	r2, [pc, #148]	@ (8003794 <OV5640_SetResolution+0x1e4>)
 80036fe:	693b      	ldr	r3, [r7, #16]
 8003700:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003704:	f107 020f 	add.w	r2, r7, #15
 8003708:	2301      	movs	r3, #1
 800370a:	f001 fa00 	bl	8004b0e <ov5640_write_reg>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d002      	beq.n	800371a <OV5640_SetResolution+0x16a>
            {
              ret = OV5640_ERROR;
 8003714:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003718:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_VGA) / 4U); index++)
 800371a:	693b      	ldr	r3, [r7, #16]
 800371c:	3301      	adds	r3, #1
 800371e:	613b      	str	r3, [r7, #16]
 8003720:	693b      	ldr	r3, [r7, #16]
 8003722:	2b03      	cmp	r3, #3
 8003724:	d9dc      	bls.n	80036e0 <OV5640_SetResolution+0x130>
            }
          }
        }
        break;
 8003726:	e02a      	b.n	800377e <OV5640_SetResolution+0x1ce>
      case OV5640_R800x480:
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003728:	2300      	movs	r3, #0
 800372a:	613b      	str	r3, [r7, #16]
 800372c:	e01f      	b.n	800376e <OV5640_SetResolution+0x1be>
        {
          if (ret != OV5640_ERROR)
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003734:	d018      	beq.n	8003768 <OV5640_SetResolution+0x1b8>
          {
            tmp = (uint8_t)OV5640_WVGA[index][1];
 8003736:	4a18      	ldr	r2, [pc, #96]	@ (8003798 <OV5640_SetResolution+0x1e8>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	009b      	lsls	r3, r3, #2
 800373c:	4413      	add	r3, r2
 800373e:	885b      	ldrh	r3, [r3, #2]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_WVGA[index][0], &tmp, 1) != OV5640_OK)
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	f103 0018 	add.w	r0, r3, #24
 800374a:	4a13      	ldr	r2, [pc, #76]	@ (8003798 <OV5640_SetResolution+0x1e8>)
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003752:	f107 020f 	add.w	r2, r7, #15
 8003756:	2301      	movs	r3, #1
 8003758:	f001 f9d9 	bl	8004b0e <ov5640_write_reg>
 800375c:	4603      	mov	r3, r0
 800375e:	2b00      	cmp	r3, #0
 8003760:	d002      	beq.n	8003768 <OV5640_SetResolution+0x1b8>
            {
              ret = OV5640_ERROR;
 8003762:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003766:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_WVGA) / 4U); index++)
 8003768:	693b      	ldr	r3, [r7, #16]
 800376a:	3301      	adds	r3, #1
 800376c:	613b      	str	r3, [r7, #16]
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	2b03      	cmp	r3, #3
 8003772:	d9dc      	bls.n	800372e <OV5640_SetResolution+0x17e>
            }
          }
        }
        break;
 8003774:	e003      	b.n	800377e <OV5640_SetResolution+0x1ce>
      default:
        ret = OV5640_ERROR;
 8003776:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800377a:	617b      	str	r3, [r7, #20]
        break;
 800377c:	bf00      	nop
    }
  }

  return ret;
 800377e:	697b      	ldr	r3, [r7, #20]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}
 8003788:	08027ad4 	.word	0x08027ad4
 800378c:	08027ae4 	.word	0x08027ae4
 8003790:	08027af4 	.word	0x08027af4
 8003794:	08027b04 	.word	0x08027b04
 8003798:	08027b14 	.word	0x08027b14

0800379c <OV5640_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV5640_GetResolution(OV5640_Object_t *pObj, uint32_t *Resolution)
{
 800379c:	b580      	push	{r7, lr}
 800379e:	b086      	sub	sp, #24
 80037a0:	af00      	add	r7, sp, #0
 80037a2:	6078      	str	r0, [r7, #4]
 80037a4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t x_size;
  uint16_t y_size;
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_HIGH, &tmp, 1) != OV5640_OK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	f103 0018 	add.w	r0, r3, #24
 80037ac:	f107 020f 	add.w	r2, r7, #15
 80037b0:	2301      	movs	r3, #1
 80037b2:	f643 0108 	movw	r1, #14344	@ 0x3808
 80037b6:	f001 f993 	bl	8004ae0 <ov5640_read_reg>
 80037ba:	4603      	mov	r3, r0
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d003      	beq.n	80037c8 <OV5640_GetResolution+0x2c>
  {
    ret = OV5640_ERROR;
 80037c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037c4:	617b      	str	r3, [r7, #20]
 80037c6:	e088      	b.n	80038da <OV5640_GetResolution+0x13e>
  }
  else
  {
    x_size = (uint16_t)tmp << 8U;
 80037c8:	7bfb      	ldrb	r3, [r7, #15]
 80037ca:	021b      	lsls	r3, r3, #8
 80037cc:	827b      	strh	r3, [r7, #18]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPHO_LOW, &tmp, 1) != OV5640_OK)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	f103 0018 	add.w	r0, r3, #24
 80037d4:	f107 020f 	add.w	r2, r7, #15
 80037d8:	2301      	movs	r3, #1
 80037da:	f643 0109 	movw	r1, #14345	@ 0x3809
 80037de:	f001 f97f 	bl	8004ae0 <ov5640_read_reg>
 80037e2:	4603      	mov	r3, r0
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d003      	beq.n	80037f0 <OV5640_GetResolution+0x54>
    {
      ret = OV5640_ERROR;
 80037e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80037ec:	617b      	str	r3, [r7, #20]
 80037ee:	e074      	b.n	80038da <OV5640_GetResolution+0x13e>
    }
    else
    {
      x_size |= tmp;
 80037f0:	7bfb      	ldrb	r3, [r7, #15]
 80037f2:	461a      	mov	r2, r3
 80037f4:	8a7b      	ldrh	r3, [r7, #18]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	827b      	strh	r3, [r7, #18]

      if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_HIGH, &tmp, 1) != OV5640_OK)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f103 0018 	add.w	r0, r3, #24
 8003800:	f107 020f 	add.w	r2, r7, #15
 8003804:	2301      	movs	r3, #1
 8003806:	f643 010a 	movw	r1, #14346	@ 0x380a
 800380a:	f001 f969 	bl	8004ae0 <ov5640_read_reg>
 800380e:	4603      	mov	r3, r0
 8003810:	2b00      	cmp	r3, #0
 8003812:	d003      	beq.n	800381c <OV5640_GetResolution+0x80>
      {
        ret = OV5640_ERROR;
 8003814:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003818:	617b      	str	r3, [r7, #20]
 800381a:	e05e      	b.n	80038da <OV5640_GetResolution+0x13e>
      }
      else
      {
        y_size = (uint16_t)tmp << 8U;
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	021b      	lsls	r3, r3, #8
 8003820:	823b      	strh	r3, [r7, #16]
        if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_DVPVO_LOW, &tmp, 1) != OV5640_OK)
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	f103 0018 	add.w	r0, r3, #24
 8003828:	f107 020f 	add.w	r2, r7, #15
 800382c:	2301      	movs	r3, #1
 800382e:	f643 010b 	movw	r1, #14347	@ 0x380b
 8003832:	f001 f955 	bl	8004ae0 <ov5640_read_reg>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d003      	beq.n	8003844 <OV5640_GetResolution+0xa8>
        {
          ret = OV5640_ERROR;
 800383c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003840:	617b      	str	r3, [r7, #20]
 8003842:	e04a      	b.n	80038da <OV5640_GetResolution+0x13e>
        }
        else
        {
          y_size |= tmp;
 8003844:	7bfb      	ldrb	r3, [r7, #15]
 8003846:	461a      	mov	r2, r3
 8003848:	8a3b      	ldrh	r3, [r7, #16]
 800384a:	4313      	orrs	r3, r2
 800384c:	823b      	strh	r3, [r7, #16]

          if ((x_size == 800U) && (y_size == 480U))
 800384e:	8a7b      	ldrh	r3, [r7, #18]
 8003850:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 8003854:	d109      	bne.n	800386a <OV5640_GetResolution+0xce>
 8003856:	8a3b      	ldrh	r3, [r7, #16]
 8003858:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800385c:	d105      	bne.n	800386a <OV5640_GetResolution+0xce>
          {
            *Resolution = OV5640_R800x480;
 800385e:	683b      	ldr	r3, [r7, #0]
 8003860:	2204      	movs	r2, #4
 8003862:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8003864:	2300      	movs	r3, #0
 8003866:	617b      	str	r3, [r7, #20]
 8003868:	e037      	b.n	80038da <OV5640_GetResolution+0x13e>
          }
          else if ((x_size == 640U) && (y_size == 480U))
 800386a:	8a7b      	ldrh	r3, [r7, #18]
 800386c:	f5b3 7f20 	cmp.w	r3, #640	@ 0x280
 8003870:	d109      	bne.n	8003886 <OV5640_GetResolution+0xea>
 8003872:	8a3b      	ldrh	r3, [r7, #16]
 8003874:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 8003878:	d105      	bne.n	8003886 <OV5640_GetResolution+0xea>
          {
            *Resolution = OV5640_R640x480;
 800387a:	683b      	ldr	r3, [r7, #0]
 800387c:	2203      	movs	r2, #3
 800387e:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 8003880:	2300      	movs	r3, #0
 8003882:	617b      	str	r3, [r7, #20]
 8003884:	e029      	b.n	80038da <OV5640_GetResolution+0x13e>
          }
          else if ((x_size == 480U) && (y_size == 272U))
 8003886:	8a7b      	ldrh	r3, [r7, #18]
 8003888:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 800388c:	d109      	bne.n	80038a2 <OV5640_GetResolution+0x106>
 800388e:	8a3b      	ldrh	r3, [r7, #16]
 8003890:	f5b3 7f88 	cmp.w	r3, #272	@ 0x110
 8003894:	d105      	bne.n	80038a2 <OV5640_GetResolution+0x106>
          {
            *Resolution = OV5640_R480x272;
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	2202      	movs	r2, #2
 800389a:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 800389c:	2300      	movs	r3, #0
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e01b      	b.n	80038da <OV5640_GetResolution+0x13e>
          }
          else if ((x_size == 320U) && (y_size == 240U))
 80038a2:	8a7b      	ldrh	r3, [r7, #18]
 80038a4:	f5b3 7fa0 	cmp.w	r3, #320	@ 0x140
 80038a8:	d108      	bne.n	80038bc <OV5640_GetResolution+0x120>
 80038aa:	8a3b      	ldrh	r3, [r7, #16]
 80038ac:	2bf0      	cmp	r3, #240	@ 0xf0
 80038ae:	d105      	bne.n	80038bc <OV5640_GetResolution+0x120>
          {
            *Resolution = OV5640_R320x240;
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	2201      	movs	r2, #1
 80038b4:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80038b6:	2300      	movs	r3, #0
 80038b8:	617b      	str	r3, [r7, #20]
 80038ba:	e00e      	b.n	80038da <OV5640_GetResolution+0x13e>
          }
          else if ((x_size == 160U) && (y_size == 120U))
 80038bc:	8a7b      	ldrh	r3, [r7, #18]
 80038be:	2ba0      	cmp	r3, #160	@ 0xa0
 80038c0:	d108      	bne.n	80038d4 <OV5640_GetResolution+0x138>
 80038c2:	8a3b      	ldrh	r3, [r7, #16]
 80038c4:	2b78      	cmp	r3, #120	@ 0x78
 80038c6:	d105      	bne.n	80038d4 <OV5640_GetResolution+0x138>
          {
            *Resolution = OV5640_R160x120;
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2200      	movs	r2, #0
 80038cc:	601a      	str	r2, [r3, #0]
            ret = OV5640_OK;
 80038ce:	2300      	movs	r3, #0
 80038d0:	617b      	str	r3, [r7, #20]
 80038d2:	e002      	b.n	80038da <OV5640_GetResolution+0x13e>
          }
          else
          {
            ret = OV5640_ERROR;
 80038d4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038d8:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80038da:	697b      	ldr	r3, [r7, #20]
}
 80038dc:	4618      	mov	r0, r3
 80038de:	3718      	adds	r7, #24
 80038e0:	46bd      	mov	sp, r7
 80038e2:	bd80      	pop	{r7, pc}

080038e4 <OV5640_SetPolarities>:
  * @param  VsyncPolarity Polarity of the Vsync
  * @retval Component status
  */
int32_t OV5640_SetPolarities(OV5640_Object_t *pObj, uint32_t PclkPolarity, uint32_t HrefPolarity,
                             uint32_t VsyncPolarity)
{
 80038e4:	b580      	push	{r7, lr}
 80038e6:	b086      	sub	sp, #24
 80038e8:	af00      	add	r7, sp, #0
 80038ea:	60f8      	str	r0, [r7, #12]
 80038ec:	60b9      	str	r1, [r7, #8]
 80038ee:	607a      	str	r2, [r7, #4]
 80038f0:	603b      	str	r3, [r7, #0]
  uint8_t tmp;
  int32_t ret = OV5640_OK;
 80038f2:	2300      	movs	r3, #0
 80038f4:	617b      	str	r3, [r7, #20]

  if ((pObj == NULL) || ((PclkPolarity != OV5640_POLARITY_PCLK_LOW) && (PclkPolarity != OV5640_POLARITY_PCLK_HIGH)) ||
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d011      	beq.n	8003920 <OV5640_SetPolarities+0x3c>
 80038fc:	68bb      	ldr	r3, [r7, #8]
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d002      	beq.n	8003908 <OV5640_SetPolarities+0x24>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	2b01      	cmp	r3, #1
 8003906:	d10b      	bne.n	8003920 <OV5640_SetPolarities+0x3c>
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2b00      	cmp	r3, #0
 800390c:	d002      	beq.n	8003914 <OV5640_SetPolarities+0x30>
      ((HrefPolarity != OV5640_POLARITY_HREF_LOW) && (HrefPolarity != OV5640_POLARITY_HREF_HIGH)) ||
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	2b01      	cmp	r3, #1
 8003912:	d105      	bne.n	8003920 <OV5640_SetPolarities+0x3c>
 8003914:	683b      	ldr	r3, [r7, #0]
 8003916:	2b01      	cmp	r3, #1
 8003918:	d006      	beq.n	8003928 <OV5640_SetPolarities+0x44>
      ((VsyncPolarity != OV5640_POLARITY_VSYNC_LOW) && (VsyncPolarity != OV5640_POLARITY_VSYNC_HIGH)))
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	2b00      	cmp	r3, #0
 800391e:	d003      	beq.n	8003928 <OV5640_SetPolarities+0x44>
  {
    ret = OV5640_ERROR;
 8003920:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003924:	617b      	str	r3, [r7, #20]
 8003926:	e01e      	b.n	8003966 <OV5640_SetPolarities+0x82>
  }
  else
  {
    tmp = (uint8_t)(PclkPolarity << 5U) | (HrefPolarity << 1U) | VsyncPolarity;
 8003928:	68bb      	ldr	r3, [r7, #8]
 800392a:	b2db      	uxtb	r3, r3
 800392c:	015b      	lsls	r3, r3, #5
 800392e:	b2da      	uxtb	r2, r3
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	b2db      	uxtb	r3, r3
 8003934:	005b      	lsls	r3, r3, #1
 8003936:	b2db      	uxtb	r3, r3
 8003938:	4313      	orrs	r3, r2
 800393a:	b2da      	uxtb	r2, r3
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	b2db      	uxtb	r3, r3
 8003940:	4313      	orrs	r3, r2
 8003942:	b2db      	uxtb	r3, r3
 8003944:	74fb      	strb	r3, [r7, #19]

    if (ov5640_write_reg(&pObj->Ctx, OV5640_POLARITY_CTRL, &tmp, 1) != OV5640_OK)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f103 0018 	add.w	r0, r3, #24
 800394c:	f107 0213 	add.w	r2, r7, #19
 8003950:	2301      	movs	r3, #1
 8003952:	f244 7140 	movw	r1, #18240	@ 0x4740
 8003956:	f001 f8da 	bl	8004b0e <ov5640_write_reg>
 800395a:	4603      	mov	r3, r0
 800395c:	2b00      	cmp	r3, #0
 800395e:	d002      	beq.n	8003966 <OV5640_SetPolarities+0x82>
    {
      ret = OV5640_ERROR;
 8003960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003964:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 8003966:	697b      	ldr	r3, [r7, #20]
}
 8003968:	4618      	mov	r0, r3
 800396a:	3718      	adds	r7, #24
 800396c:	46bd      	mov	sp, r7
 800396e:	bd80      	pop	{r7, pc}

08003970 <OV5640_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV5640_ReadID(OV5640_Object_t *pObj, uint32_t *Id)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b084      	sub	sp, #16
 8003974:	af00      	add	r7, sp, #0
 8003976:	6078      	str	r0, [r7, #4]
 8003978:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	4798      	blx	r3

  /* Prepare the camera to be configured */
  tmp = 0x80;
 8003980:	2380      	movs	r3, #128	@ 0x80
 8003982:	72fb      	strb	r3, [r7, #11]
  if (ov5640_write_reg(&pObj->Ctx, OV5640_SYSTEM_CTROL0, &tmp, 1) != OV5640_OK)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	f103 0018 	add.w	r0, r3, #24
 800398a:	f107 020b 	add.w	r2, r7, #11
 800398e:	2301      	movs	r3, #1
 8003990:	f243 0108 	movw	r1, #12296	@ 0x3008
 8003994:	f001 f8bb 	bl	8004b0e <ov5640_write_reg>
 8003998:	4603      	mov	r3, r0
 800399a:	2b00      	cmp	r3, #0
 800399c:	d003      	beq.n	80039a6 <OV5640_ReadID+0x36>
  {
    ret = OV5640_ERROR;
 800399e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039a2:	60fb      	str	r3, [r7, #12]
 80039a4:	e032      	b.n	8003a0c <OV5640_ReadID+0x9c>
  }
  else
  {
    (void)OV5640_Delay(pObj, 500);
 80039a6:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f001 f84c 	bl	8004a48 <OV5640_Delay>

    if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_HIGH_BYTE, &tmp, 1) != OV5640_OK)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	f103 0018 	add.w	r0, r3, #24
 80039b6:	f107 020b 	add.w	r2, r7, #11
 80039ba:	2301      	movs	r3, #1
 80039bc:	f243 010a 	movw	r1, #12298	@ 0x300a
 80039c0:	f001 f88e 	bl	8004ae0 <ov5640_read_reg>
 80039c4:	4603      	mov	r3, r0
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <OV5640_ReadID+0x62>
    {
      ret = OV5640_ERROR;
 80039ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039ce:	60fb      	str	r3, [r7, #12]
 80039d0:	e01c      	b.n	8003a0c <OV5640_ReadID+0x9c>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80039d2:	7afb      	ldrb	r3, [r7, #11]
 80039d4:	021a      	lsls	r2, r3, #8
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	601a      	str	r2, [r3, #0]
      if (ov5640_read_reg(&pObj->Ctx, OV5640_CHIP_ID_LOW_BYTE, &tmp, 1) != OV5640_OK)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f103 0018 	add.w	r0, r3, #24
 80039e0:	f107 020b 	add.w	r2, r7, #11
 80039e4:	2301      	movs	r3, #1
 80039e6:	f243 010b 	movw	r1, #12299	@ 0x300b
 80039ea:	f001 f879 	bl	8004ae0 <ov5640_read_reg>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d003      	beq.n	80039fc <OV5640_ReadID+0x8c>
      {
        ret = OV5640_ERROR;
 80039f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	e007      	b.n	8003a0c <OV5640_ReadID+0x9c>
      }
      else
      {
        *Id |= tmp;
 80039fc:	683b      	ldr	r3, [r7, #0]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	7afa      	ldrb	r2, [r7, #11]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	683b      	ldr	r3, [r7, #0]
 8003a06:	601a      	str	r2, [r3, #0]
        ret = OV5640_OK;
 8003a08:	2300      	movs	r3, #0
 8003a0a:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  /* Component status */
  return ret;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
}
 8003a0e:	4618      	mov	r0, r3
 8003a10:	3710      	adds	r7, #16
 8003a12:	46bd      	mov	sp, r7
 8003a14:	bd80      	pop	{r7, pc}

08003a16 <OV5640_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV5640_GetCapabilities(OV5640_Object_t *pObj, OV5640_Capabilities_t *Capabilities)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b085      	sub	sp, #20
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
 8003a1e:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d103      	bne.n	8003a2e <OV5640_GetCapabilities+0x18>
  {
    ret = OV5640_ERROR;
 8003a26:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003a2a:	60fb      	str	r3, [r7, #12]
 8003a2c:	e01f      	b.n	8003a6e <OV5640_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8003a2e:	683b      	ldr	r3, [r7, #0]
 8003a30:	2201      	movs	r2, #1
 8003a32:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 8003a34:	683b      	ldr	r3, [r7, #0]
 8003a36:	2201      	movs	r2, #1
 8003a38:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 1;
 8003a3a:	683b      	ldr	r3, [r7, #0]
 8003a3c:	2201      	movs	r2, #1
 8003a3e:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 1;
 8003a40:	683b      	ldr	r3, [r7, #0]
 8003a42:	2201      	movs	r2, #1
 8003a44:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 8003a46:	683b      	ldr	r3, [r7, #0]
 8003a48:	2201      	movs	r2, #1
 8003a4a:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8003a4c:	683b      	ldr	r3, [r7, #0]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	625a      	str	r2, [r3, #36]	@ 0x24
    Capabilities->Config_Resolution    = 1;
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	2201      	movs	r2, #1
 8003a56:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 1;
 8003a58:	683b      	ldr	r3, [r7, #0]
 8003a5a:	2201      	movs	r2, #1
 8003a5c:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	2201      	movs	r2, #1
 8003a62:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 1;
 8003a64:	683b      	ldr	r3, [r7, #0]
 8003a66:	2201      	movs	r2, #1
 8003a68:	621a      	str	r2, [r3, #32]

    ret = OV5640_OK;
 8003a6a:	2300      	movs	r3, #0
 8003a6c:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
}
 8003a70:	4618      	mov	r0, r3
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7a:	4770      	bx	lr

08003a7c <OV5640_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetLightMode(OV5640_Object_t *pObj, uint32_t LightMode)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	6078      	str	r0, [r7, #4]
 8003a84:	6039      	str	r1, [r7, #0]
    {OV5640_AWB_G_GAIN_LSB, 0x00},
    {OV5640_AWB_B_GAIN_MSB, 0x04},
    {OV5640_AWB_B_GAIN_LSB, 0xF3},
  };

  tmp = 0x00;
 8003a86:	2300      	movs	r3, #0
 8003a88:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_MANUAL_CONTROL, &tmp, 1);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	f103 0018 	add.w	r0, r3, #24
 8003a90:	f107 020f 	add.w	r2, r7, #15
 8003a94:	2301      	movs	r3, #1
 8003a96:	f243 4106 	movw	r1, #13318	@ 0x3406
 8003a9a:	f001 f838 	bl	8004b0e <ov5640_write_reg>
 8003a9e:	6178      	str	r0, [r7, #20]
  if (ret == OV5640_OK)
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d10c      	bne.n	8003ac0 <OV5640_SetLightMode+0x44>
  {
    tmp = 0x46;
 8003aa6:	2346      	movs	r3, #70	@ 0x46
 8003aa8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL16, &tmp, 1);
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	f103 0018 	add.w	r0, r3, #24
 8003ab0:	f107 020f 	add.w	r2, r7, #15
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	f245 1190 	movw	r1, #20880	@ 0x5190
 8003aba:	f001 f828 	bl	8004b0e <ov5640_write_reg>
 8003abe:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8003ac0:	697b      	ldr	r3, [r7, #20]
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d10c      	bne.n	8003ae0 <OV5640_SetLightMode+0x64>
  {
    tmp = 0xF8;
 8003ac6:	23f8      	movs	r3, #248	@ 0xf8
 8003ac8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL17, &tmp, 1);
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f103 0018 	add.w	r0, r3, #24
 8003ad0:	f107 020f 	add.w	r2, r7, #15
 8003ad4:	2301      	movs	r3, #1
 8003ad6:	f245 1191 	movw	r1, #20881	@ 0x5191
 8003ada:	f001 f818 	bl	8004b0e <ov5640_write_reg>
 8003ade:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8003ae0:	697b      	ldr	r3, [r7, #20]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d10c      	bne.n	8003b00 <OV5640_SetLightMode+0x84>
  {
    tmp = 0x04;
 8003ae6:	2304      	movs	r3, #4
 8003ae8:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_AWB_CTRL18, &tmp, 1);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	f103 0018 	add.w	r0, r3, #24
 8003af0:	f107 020f 	add.w	r2, r7, #15
 8003af4:	2301      	movs	r3, #1
 8003af6:	f245 1192 	movw	r1, #20882	@ 0x5192
 8003afa:	f001 f808 	bl	8004b0e <ov5640_write_reg>
 8003afe:	6178      	str	r0, [r7, #20]
  }

  if (ret == OV5640_OK)
 8003b00:	697b      	ldr	r3, [r7, #20]
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	f040 80db 	bne.w	8003cbe <OV5640_SetLightMode+0x242>
  {
    switch (LightMode)
 8003b08:	683b      	ldr	r3, [r7, #0]
 8003b0a:	3b01      	subs	r3, #1
 8003b0c:	2b07      	cmp	r3, #7
 8003b0e:	f200 80af 	bhi.w	8003c70 <OV5640_SetLightMode+0x1f4>
 8003b12:	a201      	add	r2, pc, #4	@ (adr r2, 8003b18 <OV5640_SetLightMode+0x9c>)
 8003b14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b18:	08003b39 	.word	0x08003b39
 8003b1c:	08003b87 	.word	0x08003b87
 8003b20:	08003c71 	.word	0x08003c71
 8003b24:	08003c23 	.word	0x08003c23
 8003b28:	08003c71 	.word	0x08003c71
 8003b2c:	08003c71 	.word	0x08003c71
 8003b30:	08003c71 	.word	0x08003c71
 8003b34:	08003bd5 	.word	0x08003bd5
    {
      case OV5640_LIGHT_SUNNY:
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8003b38:	2300      	movs	r3, #0
 8003b3a:	613b      	str	r3, [r7, #16]
 8003b3c:	e01f      	b.n	8003b7e <OV5640_SetLightMode+0x102>
        {
          if (ret != OV5640_ERROR)
 8003b3e:	697b      	ldr	r3, [r7, #20]
 8003b40:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b44:	d018      	beq.n	8003b78 <OV5640_SetLightMode+0xfc>
          {
            tmp = (uint8_t)OV5640_LightModeSunny[index][1];
 8003b46:	4a60      	ldr	r2, [pc, #384]	@ (8003cc8 <OV5640_SetLightMode+0x24c>)
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	009b      	lsls	r3, r3, #2
 8003b4c:	4413      	add	r3, r2
 8003b4e:	885b      	ldrh	r3, [r3, #2]
 8003b50:	b2db      	uxtb	r3, r3
 8003b52:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeSunny[index][0], &tmp, 1) != OV5640_OK)
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	f103 0018 	add.w	r0, r3, #24
 8003b5a:	4a5b      	ldr	r2, [pc, #364]	@ (8003cc8 <OV5640_SetLightMode+0x24c>)
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003b62:	f107 020f 	add.w	r2, r7, #15
 8003b66:	2301      	movs	r3, #1
 8003b68:	f000 ffd1 	bl	8004b0e <ov5640_write_reg>
 8003b6c:	4603      	mov	r3, r0
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d002      	beq.n	8003b78 <OV5640_SetLightMode+0xfc>
            {
              ret = OV5640_ERROR;
 8003b72:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003b76:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeSunny) / 4U) ; index++)
 8003b78:	693b      	ldr	r3, [r7, #16]
 8003b7a:	3301      	adds	r3, #1
 8003b7c:	613b      	str	r3, [r7, #16]
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	2b06      	cmp	r3, #6
 8003b82:	d9dc      	bls.n	8003b3e <OV5640_SetLightMode+0xc2>
            }
          }
        }
        break;
 8003b84:	e09b      	b.n	8003cbe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_OFFICE:
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8003b86:	2300      	movs	r3, #0
 8003b88:	613b      	str	r3, [r7, #16]
 8003b8a:	e01f      	b.n	8003bcc <OV5640_SetLightMode+0x150>
        {
          if (ret != OV5640_ERROR)
 8003b8c:	697b      	ldr	r3, [r7, #20]
 8003b8e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b92:	d018      	beq.n	8003bc6 <OV5640_SetLightMode+0x14a>
          {
            tmp = (uint8_t)OV5640_LightModeOffice[index][1];
 8003b94:	4a4d      	ldr	r2, [pc, #308]	@ (8003ccc <OV5640_SetLightMode+0x250>)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	009b      	lsls	r3, r3, #2
 8003b9a:	4413      	add	r3, r2
 8003b9c:	885b      	ldrh	r3, [r3, #2]
 8003b9e:	b2db      	uxtb	r3, r3
 8003ba0:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeOffice[index][0], &tmp, 1) != OV5640_OK)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	f103 0018 	add.w	r0, r3, #24
 8003ba8:	4a48      	ldr	r2, [pc, #288]	@ (8003ccc <OV5640_SetLightMode+0x250>)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003bb0:	f107 020f 	add.w	r2, r7, #15
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	f000 ffaa 	bl	8004b0e <ov5640_write_reg>
 8003bba:	4603      	mov	r3, r0
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d002      	beq.n	8003bc6 <OV5640_SetLightMode+0x14a>
            {
              ret = OV5640_ERROR;
 8003bc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003bc4:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeOffice) / 4U) ; index++)
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	3301      	adds	r3, #1
 8003bca:	613b      	str	r3, [r7, #16]
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	2b06      	cmp	r3, #6
 8003bd0:	d9dc      	bls.n	8003b8c <OV5640_SetLightMode+0x110>
            }
          }
        }
        break;
 8003bd2:	e074      	b.n	8003cbe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_CLOUDY:
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	613b      	str	r3, [r7, #16]
 8003bd8:	e01f      	b.n	8003c1a <OV5640_SetLightMode+0x19e>
        {
          if (ret != OV5640_ERROR)
 8003bda:	697b      	ldr	r3, [r7, #20]
 8003bdc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003be0:	d018      	beq.n	8003c14 <OV5640_SetLightMode+0x198>
          {
            tmp = (uint8_t)OV5640_LightModeCloudy[index][1];
 8003be2:	4a3b      	ldr	r2, [pc, #236]	@ (8003cd0 <OV5640_SetLightMode+0x254>)
 8003be4:	693b      	ldr	r3, [r7, #16]
 8003be6:	009b      	lsls	r3, r3, #2
 8003be8:	4413      	add	r3, r2
 8003bea:	885b      	ldrh	r3, [r3, #2]
 8003bec:	b2db      	uxtb	r3, r3
 8003bee:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeCloudy[index][0], &tmp, 1) != OV5640_OK)
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	f103 0018 	add.w	r0, r3, #24
 8003bf6:	4a36      	ldr	r2, [pc, #216]	@ (8003cd0 <OV5640_SetLightMode+0x254>)
 8003bf8:	693b      	ldr	r3, [r7, #16]
 8003bfa:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003bfe:	f107 020f 	add.w	r2, r7, #15
 8003c02:	2301      	movs	r3, #1
 8003c04:	f000 ff83 	bl	8004b0e <ov5640_write_reg>
 8003c08:	4603      	mov	r3, r0
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d002      	beq.n	8003c14 <OV5640_SetLightMode+0x198>
            {
              ret = OV5640_ERROR;
 8003c0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c12:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeCloudy) / 4U) ; index++)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	3301      	adds	r3, #1
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	693b      	ldr	r3, [r7, #16]
 8003c1c:	2b06      	cmp	r3, #6
 8003c1e:	d9dc      	bls.n	8003bda <OV5640_SetLightMode+0x15e>
            }
          }
        }
        break;
 8003c20:	e04d      	b.n	8003cbe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_HOME:
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e01f      	b.n	8003c68 <OV5640_SetLightMode+0x1ec>
        {
          if (ret != OV5640_ERROR)
 8003c28:	697b      	ldr	r3, [r7, #20]
 8003c2a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c2e:	d018      	beq.n	8003c62 <OV5640_SetLightMode+0x1e6>
          {
            tmp = (uint8_t)OV5640_LightModeHome[index][1];
 8003c30:	4a28      	ldr	r2, [pc, #160]	@ (8003cd4 <OV5640_SetLightMode+0x258>)
 8003c32:	693b      	ldr	r3, [r7, #16]
 8003c34:	009b      	lsls	r3, r3, #2
 8003c36:	4413      	add	r3, r2
 8003c38:	885b      	ldrh	r3, [r3, #2]
 8003c3a:	b2db      	uxtb	r3, r3
 8003c3c:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeHome[index][0], &tmp, 1) != OV5640_OK)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	f103 0018 	add.w	r0, r3, #24
 8003c44:	4a23      	ldr	r2, [pc, #140]	@ (8003cd4 <OV5640_SetLightMode+0x258>)
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003c4c:	f107 020f 	add.w	r2, r7, #15
 8003c50:	2301      	movs	r3, #1
 8003c52:	f000 ff5c 	bl	8004b0e <ov5640_write_reg>
 8003c56:	4603      	mov	r3, r0
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <OV5640_SetLightMode+0x1e6>
            {
              ret = OV5640_ERROR;
 8003c5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003c60:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeHome) / 4U) ; index++)
 8003c62:	693b      	ldr	r3, [r7, #16]
 8003c64:	3301      	adds	r3, #1
 8003c66:	613b      	str	r3, [r7, #16]
 8003c68:	693b      	ldr	r3, [r7, #16]
 8003c6a:	2b06      	cmp	r3, #6
 8003c6c:	d9dc      	bls.n	8003c28 <OV5640_SetLightMode+0x1ac>
            }
          }
        }
        break;
 8003c6e:	e026      	b.n	8003cbe <OV5640_SetLightMode+0x242>
      case OV5640_LIGHT_AUTO:
      default :
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8003c70:	2300      	movs	r3, #0
 8003c72:	613b      	str	r3, [r7, #16]
 8003c74:	e01f      	b.n	8003cb6 <OV5640_SetLightMode+0x23a>
        {
          if (ret != OV5640_ERROR)
 8003c76:	697b      	ldr	r3, [r7, #20]
 8003c78:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c7c:	d018      	beq.n	8003cb0 <OV5640_SetLightMode+0x234>
          {
            tmp = (uint8_t)OV5640_LightModeAuto[index][1];
 8003c7e:	4a16      	ldr	r2, [pc, #88]	@ (8003cd8 <OV5640_SetLightMode+0x25c>)
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	009b      	lsls	r3, r3, #2
 8003c84:	4413      	add	r3, r2
 8003c86:	885b      	ldrh	r3, [r3, #2]
 8003c88:	b2db      	uxtb	r3, r3
 8003c8a:	73fb      	strb	r3, [r7, #15]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_LightModeAuto[index][0], &tmp, 1) != OV5640_OK)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	f103 0018 	add.w	r0, r3, #24
 8003c92:	4a11      	ldr	r2, [pc, #68]	@ (8003cd8 <OV5640_SetLightMode+0x25c>)
 8003c94:	693b      	ldr	r3, [r7, #16]
 8003c96:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8003c9a:	f107 020f 	add.w	r2, r7, #15
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	f000 ff35 	bl	8004b0e <ov5640_write_reg>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d002      	beq.n	8003cb0 <OV5640_SetLightMode+0x234>
            {
              ret = OV5640_ERROR;
 8003caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003cae:	617b      	str	r3, [r7, #20]
        for (index = 0; index < (sizeof(OV5640_LightModeAuto) / 4U) ; index++)
 8003cb0:	693b      	ldr	r3, [r7, #16]
 8003cb2:	3301      	adds	r3, #1
 8003cb4:	613b      	str	r3, [r7, #16]
 8003cb6:	693b      	ldr	r3, [r7, #16]
 8003cb8:	2b06      	cmp	r3, #6
 8003cba:	d9dc      	bls.n	8003c76 <OV5640_SetLightMode+0x1fa>
            }
          }
        }
        break;
 8003cbc:	bf00      	nop
    }
  }
  return ret;
 8003cbe:	697b      	ldr	r3, [r7, #20]
}
 8003cc0:	4618      	mov	r0, r3
 8003cc2:	3718      	adds	r7, #24
 8003cc4:	46bd      	mov	sp, r7
 8003cc6:	bd80      	pop	{r7, pc}
 8003cc8:	08027b24 	.word	0x08027b24
 8003ccc:	08027b40 	.word	0x08027b40
 8003cd0:	08027b5c 	.word	0x08027b5c
 8003cd4:	08027b78 	.word	0x08027b78
 8003cd8:	08027b94 	.word	0x08027b94

08003cdc <OV5640_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV5640_SetColorEffect(OV5640_Object_t *pObj, uint32_t Effect)
{
 8003cdc:	b580      	push	{r7, lr}
 8003cde:	b084      	sub	sp, #16
 8003ce0:	af00      	add	r7, sp, #0
 8003ce2:	6078      	str	r0, [r7, #4]
 8003ce4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch (Effect)
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	3b01      	subs	r3, #1
 8003cea:	2b1f      	cmp	r3, #31
 8003cec:	f200 81c0 	bhi.w	8004070 <OV5640_SetColorEffect+0x394>
 8003cf0:	a201      	add	r2, pc, #4	@ (adr r2, 8003cf8 <OV5640_SetColorEffect+0x1c>)
 8003cf2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003cf6:	bf00      	nop
 8003cf8:	08003d79 	.word	0x08003d79
 8003cfc:	08003e03 	.word	0x08003e03
 8003d00:	08004071 	.word	0x08004071
 8003d04:	08003e8d 	.word	0x08003e8d
 8003d08:	08004071 	.word	0x08004071
 8003d0c:	08004071 	.word	0x08004071
 8003d10:	08004071 	.word	0x08004071
 8003d14:	08003f17 	.word	0x08003f17
 8003d18:	08004071 	.word	0x08004071
 8003d1c:	08004071 	.word	0x08004071
 8003d20:	08004071 	.word	0x08004071
 8003d24:	08004071 	.word	0x08004071
 8003d28:	08004071 	.word	0x08004071
 8003d2c:	08004071 	.word	0x08004071
 8003d30:	08004071 	.word	0x08004071
 8003d34:	08003fa1 	.word	0x08003fa1
 8003d38:	08004071 	.word	0x08004071
 8003d3c:	08004071 	.word	0x08004071
 8003d40:	08004071 	.word	0x08004071
 8003d44:	08004071 	.word	0x08004071
 8003d48:	08004071 	.word	0x08004071
 8003d4c:	08004071 	.word	0x08004071
 8003d50:	08004071 	.word	0x08004071
 8003d54:	08004071 	.word	0x08004071
 8003d58:	08004071 	.word	0x08004071
 8003d5c:	08004071 	.word	0x08004071
 8003d60:	08004071 	.word	0x08004071
 8003d64:	08004071 	.word	0x08004071
 8003d68:	08004071 	.word	0x08004071
 8003d6c:	08004071 	.word	0x08004071
 8003d70:	08004071 	.word	0x08004071
 8003d74:	08004029 	.word	0x08004029
  {
    case OV5640_COLOR_EFFECT_BLUE:
      tmp = 0xFF;
 8003d78:	23ff      	movs	r3, #255	@ 0xff
 8003d7a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	f103 0018 	add.w	r0, r3, #24
 8003d82:	f107 020b 	add.w	r2, r7, #11
 8003d86:	2301      	movs	r3, #1
 8003d88:	f245 0101 	movw	r1, #20481	@ 0x5001
 8003d8c:	f000 febf 	bl	8004b0e <ov5640_write_reg>
 8003d90:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d10c      	bne.n	8003db2 <OV5640_SetColorEffect+0xd6>
      {
        tmp = 0x18;
 8003d98:	2318      	movs	r3, #24
 8003d9a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f103 0018 	add.w	r0, r3, #24
 8003da2:	f107 020b 	add.w	r2, r7, #11
 8003da6:	2301      	movs	r3, #1
 8003da8:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8003dac:	f000 feaf 	bl	8004b0e <ov5640_write_reg>
 8003db0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d10c      	bne.n	8003dd2 <OV5640_SetColorEffect+0xf6>
      {
        tmp = 0xA0;
 8003db8:	23a0      	movs	r3, #160	@ 0xa0
 8003dba:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f103 0018 	add.w	r0, r3, #24
 8003dc2:	f107 020b 	add.w	r2, r7, #11
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	f245 5183 	movw	r1, #21891	@ 0x5583
 8003dcc:	f000 fe9f 	bl	8004b0e <ov5640_write_reg>
 8003dd0:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d10c      	bne.n	8003df2 <OV5640_SetColorEffect+0x116>
      {
        tmp = 0x40;
 8003dd8:	2340      	movs	r3, #64	@ 0x40
 8003dda:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	f103 0018 	add.w	r0, r3, #24
 8003de2:	f107 020b 	add.w	r2, r7, #11
 8003de6:	2301      	movs	r3, #1
 8003de8:	f245 5184 	movw	r1, #21892	@ 0x5584
 8003dec:	f000 fe8f 	bl	8004b0e <ov5640_write_reg>
 8003df0:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	f000 815f 	beq.w	80040b8 <OV5640_SetColorEffect+0x3dc>
      {
        ret = OV5640_ERROR;
 8003dfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003dfe:	60fb      	str	r3, [r7, #12]
      }
      break;
 8003e00:	e15a      	b.n	80040b8 <OV5640_SetColorEffect+0x3dc>

    case OV5640_COLOR_EFFECT_RED:
      tmp = 0xFF;
 8003e02:	23ff      	movs	r3, #255	@ 0xff
 8003e04:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f103 0018 	add.w	r0, r3, #24
 8003e0c:	f107 020b 	add.w	r2, r7, #11
 8003e10:	2301      	movs	r3, #1
 8003e12:	f245 0101 	movw	r1, #20481	@ 0x5001
 8003e16:	f000 fe7a 	bl	8004b0e <ov5640_write_reg>
 8003e1a:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d10c      	bne.n	8003e3c <OV5640_SetColorEffect+0x160>
      {
        tmp = 0x18;
 8003e22:	2318      	movs	r3, #24
 8003e24:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	f103 0018 	add.w	r0, r3, #24
 8003e2c:	f107 020b 	add.w	r2, r7, #11
 8003e30:	2301      	movs	r3, #1
 8003e32:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8003e36:	f000 fe6a 	bl	8004b0e <ov5640_write_reg>
 8003e3a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d10c      	bne.n	8003e5c <OV5640_SetColorEffect+0x180>
      {
        tmp = 0x80;
 8003e42:	2380      	movs	r3, #128	@ 0x80
 8003e44:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	f103 0018 	add.w	r0, r3, #24
 8003e4c:	f107 020b 	add.w	r2, r7, #11
 8003e50:	2301      	movs	r3, #1
 8003e52:	f245 5183 	movw	r1, #21891	@ 0x5583
 8003e56:	f000 fe5a 	bl	8004b0e <ov5640_write_reg>
 8003e5a:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d10c      	bne.n	8003e7c <OV5640_SetColorEffect+0x1a0>
      {
        tmp = 0xC0;
 8003e62:	23c0      	movs	r3, #192	@ 0xc0
 8003e64:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	f103 0018 	add.w	r0, r3, #24
 8003e6c:	f107 020b 	add.w	r2, r7, #11
 8003e70:	2301      	movs	r3, #1
 8003e72:	f245 5184 	movw	r1, #21892	@ 0x5584
 8003e76:	f000 fe4a 	bl	8004b0e <ov5640_write_reg>
 8003e7a:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	f000 811c 	beq.w	80040bc <OV5640_SetColorEffect+0x3e0>
      {
        ret = OV5640_ERROR;
 8003e84:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003e88:	60fb      	str	r3, [r7, #12]
      }
      break;
 8003e8a:	e117      	b.n	80040bc <OV5640_SetColorEffect+0x3e0>

    case OV5640_COLOR_EFFECT_GREEN:
      tmp = 0xFF;
 8003e8c:	23ff      	movs	r3, #255	@ 0xff
 8003e8e:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f103 0018 	add.w	r0, r3, #24
 8003e96:	f107 020b 	add.w	r2, r7, #11
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	f245 0101 	movw	r1, #20481	@ 0x5001
 8003ea0:	f000 fe35 	bl	8004b0e <ov5640_write_reg>
 8003ea4:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	2b00      	cmp	r3, #0
 8003eaa:	d10c      	bne.n	8003ec6 <OV5640_SetColorEffect+0x1ea>
      {
        tmp = 0x18;
 8003eac:	2318      	movs	r3, #24
 8003eae:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	f103 0018 	add.w	r0, r3, #24
 8003eb6:	f107 020b 	add.w	r2, r7, #11
 8003eba:	2301      	movs	r3, #1
 8003ebc:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8003ec0:	f000 fe25 	bl	8004b0e <ov5640_write_reg>
 8003ec4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10c      	bne.n	8003ee6 <OV5640_SetColorEffect+0x20a>
      {
        tmp = 0x60;
 8003ecc:	2360      	movs	r3, #96	@ 0x60
 8003ece:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	f103 0018 	add.w	r0, r3, #24
 8003ed6:	f107 020b 	add.w	r2, r7, #11
 8003eda:	2301      	movs	r3, #1
 8003edc:	f245 5183 	movw	r1, #21891	@ 0x5583
 8003ee0:	f000 fe15 	bl	8004b0e <ov5640_write_reg>
 8003ee4:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d10c      	bne.n	8003f06 <OV5640_SetColorEffect+0x22a>
      {
        tmp = 0x60;
 8003eec:	2360      	movs	r3, #96	@ 0x60
 8003eee:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	f103 0018 	add.w	r0, r3, #24
 8003ef6:	f107 020b 	add.w	r2, r7, #11
 8003efa:	2301      	movs	r3, #1
 8003efc:	f245 5184 	movw	r1, #21892	@ 0x5584
 8003f00:	f000 fe05 	bl	8004b0e <ov5640_write_reg>
 8003f04:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	f000 80d9 	beq.w	80040c0 <OV5640_SetColorEffect+0x3e4>
      {
        ret = OV5640_ERROR;
 8003f0e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f12:	60fb      	str	r3, [r7, #12]
      }
      break;
 8003f14:	e0d4      	b.n	80040c0 <OV5640_SetColorEffect+0x3e4>

    case OV5640_COLOR_EFFECT_BW:
      tmp = 0xFF;
 8003f16:	23ff      	movs	r3, #255	@ 0xff
 8003f18:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	f103 0018 	add.w	r0, r3, #24
 8003f20:	f107 020b 	add.w	r2, r7, #11
 8003f24:	2301      	movs	r3, #1
 8003f26:	f245 0101 	movw	r1, #20481	@ 0x5001
 8003f2a:	f000 fdf0 	bl	8004b0e <ov5640_write_reg>
 8003f2e:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2b00      	cmp	r3, #0
 8003f34:	d10c      	bne.n	8003f50 <OV5640_SetColorEffect+0x274>
      {
        tmp = 0x18;
 8003f36:	2318      	movs	r3, #24
 8003f38:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	f103 0018 	add.w	r0, r3, #24
 8003f40:	f107 020b 	add.w	r2, r7, #11
 8003f44:	2301      	movs	r3, #1
 8003f46:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8003f4a:	f000 fde0 	bl	8004b0e <ov5640_write_reg>
 8003f4e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d10c      	bne.n	8003f70 <OV5640_SetColorEffect+0x294>
      {
        tmp = 0x80;
 8003f56:	2380      	movs	r3, #128	@ 0x80
 8003f58:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	f103 0018 	add.w	r0, r3, #24
 8003f60:	f107 020b 	add.w	r2, r7, #11
 8003f64:	2301      	movs	r3, #1
 8003f66:	f245 5183 	movw	r1, #21891	@ 0x5583
 8003f6a:	f000 fdd0 	bl	8004b0e <ov5640_write_reg>
 8003f6e:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d10c      	bne.n	8003f90 <OV5640_SetColorEffect+0x2b4>
      {
        tmp = 0x80;
 8003f76:	2380      	movs	r3, #128	@ 0x80
 8003f78:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	f103 0018 	add.w	r0, r3, #24
 8003f80:	f107 020b 	add.w	r2, r7, #11
 8003f84:	2301      	movs	r3, #1
 8003f86:	f245 5184 	movw	r1, #21892	@ 0x5584
 8003f8a:	f000 fdc0 	bl	8004b0e <ov5640_write_reg>
 8003f8e:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	f000 8096 	beq.w	80040c4 <OV5640_SetColorEffect+0x3e8>
      {
        ret = OV5640_ERROR;
 8003f98:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003f9c:	60fb      	str	r3, [r7, #12]
      }
      break;
 8003f9e:	e091      	b.n	80040c4 <OV5640_SetColorEffect+0x3e8>

    case OV5640_COLOR_EFFECT_SEPIA:
      tmp = 0xFF;
 8003fa0:	23ff      	movs	r3, #255	@ 0xff
 8003fa2:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f103 0018 	add.w	r0, r3, #24
 8003faa:	f107 020b 	add.w	r2, r7, #11
 8003fae:	2301      	movs	r3, #1
 8003fb0:	f245 0101 	movw	r1, #20481	@ 0x5001
 8003fb4:	f000 fdab 	bl	8004b0e <ov5640_write_reg>
 8003fb8:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8003fba:	68fb      	ldr	r3, [r7, #12]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d10c      	bne.n	8003fda <OV5640_SetColorEffect+0x2fe>
      {
        tmp = 0x18;
 8003fc0:	2318      	movs	r3, #24
 8003fc2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	f103 0018 	add.w	r0, r3, #24
 8003fca:	f107 020b 	add.w	r2, r7, #11
 8003fce:	2301      	movs	r3, #1
 8003fd0:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8003fd4:	f000 fd9b 	bl	8004b0e <ov5640_write_reg>
 8003fd8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2b00      	cmp	r3, #0
 8003fde:	d10c      	bne.n	8003ffa <OV5640_SetColorEffect+0x31e>
      {
        tmp = 0x40;
 8003fe0:	2340      	movs	r3, #64	@ 0x40
 8003fe2:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	f103 0018 	add.w	r0, r3, #24
 8003fea:	f107 020b 	add.w	r2, r7, #11
 8003fee:	2301      	movs	r3, #1
 8003ff0:	f245 5183 	movw	r1, #21891	@ 0x5583
 8003ff4:	f000 fd8b 	bl	8004b0e <ov5640_write_reg>
 8003ff8:	60f8      	str	r0, [r7, #12]
      }
      if (ret == OV5640_OK)
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2b00      	cmp	r3, #0
 8003ffe:	d10c      	bne.n	800401a <OV5640_SetColorEffect+0x33e>
      {
        tmp = 0xA0;
 8004000:	23a0      	movs	r3, #160	@ 0xa0
 8004002:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	f103 0018 	add.w	r0, r3, #24
 800400a:	f107 020b 	add.w	r2, r7, #11
 800400e:	2301      	movs	r3, #1
 8004010:	f245 5184 	movw	r1, #21892	@ 0x5584
 8004014:	f000 fd7b 	bl	8004b0e <ov5640_write_reg>
 8004018:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d053      	beq.n	80040c8 <OV5640_SetColorEffect+0x3ec>
      {
        ret = OV5640_ERROR;
 8004020:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004024:	60fb      	str	r3, [r7, #12]
      }
      break;
 8004026:	e04f      	b.n	80040c8 <OV5640_SetColorEffect+0x3ec>

    case OV5640_COLOR_EFFECT_NEGATIVE:
      tmp = 0xFF;
 8004028:	23ff      	movs	r3, #255	@ 0xff
 800402a:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f103 0018 	add.w	r0, r3, #24
 8004032:	f107 020b 	add.w	r2, r7, #11
 8004036:	2301      	movs	r3, #1
 8004038:	f245 0101 	movw	r1, #20481	@ 0x5001
 800403c:	f000 fd67 	bl	8004b0e <ov5640_write_reg>
 8004040:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d10c      	bne.n	8004062 <OV5640_SetColorEffect+0x386>
      {
        tmp = 0x40;
 8004048:	2340      	movs	r3, #64	@ 0x40
 800404a:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	f103 0018 	add.w	r0, r3, #24
 8004052:	f107 020b 	add.w	r2, r7, #11
 8004056:	2301      	movs	r3, #1
 8004058:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 800405c:	f000 fd57 	bl	8004b0e <ov5640_write_reg>
 8004060:	60f8      	str	r0, [r7, #12]
      }
      if (ret != OV5640_OK)
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2b00      	cmp	r3, #0
 8004066:	d031      	beq.n	80040cc <OV5640_SetColorEffect+0x3f0>
      {
        ret = OV5640_ERROR;
 8004068:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800406c:	60fb      	str	r3, [r7, #12]
      }
      break;
 800406e:	e02d      	b.n	80040cc <OV5640_SetColorEffect+0x3f0>

    case OV5640_COLOR_EFFECT_NONE:
    default :
      tmp = 0x7F;
 8004070:	237f      	movs	r3, #127	@ 0x7f
 8004072:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	f103 0018 	add.w	r0, r3, #24
 800407a:	f107 020b 	add.w	r2, r7, #11
 800407e:	2301      	movs	r3, #1
 8004080:	f245 0101 	movw	r1, #20481	@ 0x5001
 8004084:	f000 fd43 	bl	8004b0e <ov5640_write_reg>
 8004088:	60f8      	str	r0, [r7, #12]

      if (ret == OV5640_OK)
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2b00      	cmp	r3, #0
 800408e:	d10c      	bne.n	80040aa <OV5640_SetColorEffect+0x3ce>
      {
        tmp = 0x00;
 8004090:	2300      	movs	r3, #0
 8004092:	72fb      	strb	r3, [r7, #11]
        ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	f103 0018 	add.w	r0, r3, #24
 800409a:	f107 020b 	add.w	r2, r7, #11
 800409e:	2301      	movs	r3, #1
 80040a0:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80040a4:	f000 fd33 	bl	8004b0e <ov5640_write_reg>
 80040a8:	60f8      	str	r0, [r7, #12]
      }

      if (ret != OV5640_OK)
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d00f      	beq.n	80040d0 <OV5640_SetColorEffect+0x3f4>
      {
        ret = OV5640_ERROR;
 80040b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80040b4:	60fb      	str	r3, [r7, #12]
      }

      break;
 80040b6:	e00b      	b.n	80040d0 <OV5640_SetColorEffect+0x3f4>
      break;
 80040b8:	bf00      	nop
 80040ba:	e00a      	b.n	80040d2 <OV5640_SetColorEffect+0x3f6>
      break;
 80040bc:	bf00      	nop
 80040be:	e008      	b.n	80040d2 <OV5640_SetColorEffect+0x3f6>
      break;
 80040c0:	bf00      	nop
 80040c2:	e006      	b.n	80040d2 <OV5640_SetColorEffect+0x3f6>
      break;
 80040c4:	bf00      	nop
 80040c6:	e004      	b.n	80040d2 <OV5640_SetColorEffect+0x3f6>
      break;
 80040c8:	bf00      	nop
 80040ca:	e002      	b.n	80040d2 <OV5640_SetColorEffect+0x3f6>
      break;
 80040cc:	bf00      	nop
 80040ce:	e000      	b.n	80040d2 <OV5640_SetColorEffect+0x3f6>
      break;
 80040d0:	bf00      	nop
  }

  return ret;
 80040d2:	68fb      	ldr	r3, [r7, #12]
}
 80040d4:	4618      	mov	r0, r3
 80040d6:	3710      	adds	r7, #16
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <OV5640_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetBrightness(OV5640_Object_t *pObj, int32_t Level)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b088      	sub	sp, #32
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	6078      	str	r0, [r7, #4]
 80040e4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t brightness_level[] = {0x40U, 0x30U, 0x20U, 0x10U, 0x00U, 0x10U, 0x20U, 0x30U, 0x40U};
 80040e6:	4a34      	ldr	r2, [pc, #208]	@ (80041b8 <OV5640_SetBrightness+0xdc>)
 80040e8:	f107 0310 	add.w	r3, r7, #16
 80040ec:	ca07      	ldmia	r2, {r0, r1, r2}
 80040ee:	c303      	stmia	r3!, {r0, r1}
 80040f0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80040f2:	23ff      	movs	r3, #255	@ 0xff
 80040f4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	f103 0018 	add.w	r0, r3, #24
 80040fc:	f107 020f 	add.w	r2, r7, #15
 8004100:	2301      	movs	r3, #1
 8004102:	f245 0101 	movw	r1, #20481	@ 0x5001
 8004106:	f000 fd02 	bl	8004b0e <ov5640_write_reg>
 800410a:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	2b00      	cmp	r3, #0
 8004110:	d111      	bne.n	8004136 <OV5640_SetBrightness+0x5a>
  {
    tmp = brightness_level[Level + 4];
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	3304      	adds	r3, #4
 8004116:	3320      	adds	r3, #32
 8004118:	443b      	add	r3, r7
 800411a:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800411e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL7, &tmp, 1);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	f103 0018 	add.w	r0, r3, #24
 8004126:	f107 020f 	add.w	r2, r7, #15
 800412a:	2301      	movs	r3, #1
 800412c:	f245 5187 	movw	r1, #21895	@ 0x5587
 8004130:	f000 fced 	bl	8004b0e <ov5640_write_reg>
 8004134:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004136:	69fb      	ldr	r3, [r7, #28]
 8004138:	2b00      	cmp	r3, #0
 800413a:	d10c      	bne.n	8004156 <OV5640_SetBrightness+0x7a>
  {
    tmp = 0x04;
 800413c:	2304      	movs	r3, #4
 800413e:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	f103 0018 	add.w	r0, r3, #24
 8004146:	f107 020f 	add.w	r2, r7, #15
 800414a:	2301      	movs	r3, #1
 800414c:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 8004150:	f000 fcdd 	bl	8004b0e <ov5640_write_reg>
 8004154:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d127      	bne.n	80041ac <OV5640_SetBrightness+0xd0>
  {
    if (Level < 0)
 800415c:	683b      	ldr	r3, [r7, #0]
 800415e:	2b00      	cmp	r3, #0
 8004160:	da12      	bge.n	8004188 <OV5640_SetBrightness+0xac>
    {
      tmp = 0x01;
 8004162:	2301      	movs	r3, #1
 8004164:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	f103 0018 	add.w	r0, r3, #24
 800416c:	f107 020f 	add.w	r2, r7, #15
 8004170:	2301      	movs	r3, #1
 8004172:	f245 5188 	movw	r1, #21896	@ 0x5588
 8004176:	f000 fcca 	bl	8004b0e <ov5640_write_reg>
 800417a:	4603      	mov	r3, r0
 800417c:	2b00      	cmp	r3, #0
 800417e:	d015      	beq.n	80041ac <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 8004180:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004184:	61fb      	str	r3, [r7, #28]
 8004186:	e011      	b.n	80041ac <OV5640_SetBrightness+0xd0>
      }
    }
    else
    {
      tmp = 0x09;
 8004188:	2309      	movs	r3, #9
 800418a:	73fb      	strb	r3, [r7, #15]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1) != OV5640_OK)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	f103 0018 	add.w	r0, r3, #24
 8004192:	f107 020f 	add.w	r2, r7, #15
 8004196:	2301      	movs	r3, #1
 8004198:	f245 5188 	movw	r1, #21896	@ 0x5588
 800419c:	f000 fcb7 	bl	8004b0e <ov5640_write_reg>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d002      	beq.n	80041ac <OV5640_SetBrightness+0xd0>
      {
        ret = OV5640_ERROR;
 80041a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041aa:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ret;
 80041ac:	69fb      	ldr	r3, [r7, #28]
}
 80041ae:	4618      	mov	r0, r3
 80041b0:	3720      	adds	r7, #32
 80041b2:	46bd      	mov	sp, r7
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	080264f8 	.word	0x080264f8

080041bc <OV5640_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetSaturation(OV5640_Object_t *pObj, int32_t Level)
{
 80041bc:	b580      	push	{r7, lr}
 80041be:	b088      	sub	sp, #32
 80041c0:	af00      	add	r7, sp, #0
 80041c2:	6078      	str	r0, [r7, #4]
 80041c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t saturation_level[] = {0x00U, 0x10U, 0x20U, 0x30U, 0x80U, 0x70U, 0x60U, 0x50U, 0x40U};
 80041c6:	4a30      	ldr	r2, [pc, #192]	@ (8004288 <OV5640_SetSaturation+0xcc>)
 80041c8:	f107 0310 	add.w	r3, r7, #16
 80041cc:	ca07      	ldmia	r2, {r0, r1, r2}
 80041ce:	c303      	stmia	r3!, {r0, r1}
 80041d0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80041d2:	23ff      	movs	r3, #255	@ 0xff
 80041d4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f103 0018 	add.w	r0, r3, #24
 80041dc:	f107 020f 	add.w	r2, r7, #15
 80041e0:	2301      	movs	r3, #1
 80041e2:	f245 0101 	movw	r1, #20481	@ 0x5001
 80041e6:	f000 fc92 	bl	8004b0e <ov5640_write_reg>
 80041ea:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80041ec:	69fb      	ldr	r3, [r7, #28]
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d111      	bne.n	8004216 <OV5640_SetSaturation+0x5a>
  {
    tmp = saturation_level[Level + 4];
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	3304      	adds	r3, #4
 80041f6:	3320      	adds	r3, #32
 80041f8:	443b      	add	r3, r7
 80041fa:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80041fe:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL3, &tmp, 1);
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	f103 0018 	add.w	r0, r3, #24
 8004206:	f107 020f 	add.w	r2, r7, #15
 800420a:	2301      	movs	r3, #1
 800420c:	f245 5183 	movw	r1, #21891	@ 0x5583
 8004210:	f000 fc7d 	bl	8004b0e <ov5640_write_reg>
 8004214:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004216:	69fb      	ldr	r3, [r7, #28]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d10a      	bne.n	8004232 <OV5640_SetSaturation+0x76>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL4, &tmp, 1);
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f103 0018 	add.w	r0, r3, #24
 8004222:	f107 020f 	add.w	r2, r7, #15
 8004226:	2301      	movs	r3, #1
 8004228:	f245 5184 	movw	r1, #21892	@ 0x5584
 800422c:	f000 fc6f 	bl	8004b0e <ov5640_write_reg>
 8004230:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	2b00      	cmp	r3, #0
 8004236:	d10c      	bne.n	8004252 <OV5640_SetSaturation+0x96>
  {
    tmp = 0x02;
 8004238:	2302      	movs	r3, #2
 800423a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	f103 0018 	add.w	r0, r3, #24
 8004242:	f107 020f 	add.w	r2, r7, #15
 8004246:	2301      	movs	r3, #1
 8004248:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 800424c:	f000 fc5f 	bl	8004b0e <ov5640_write_reg>
 8004250:	61f8      	str	r0, [r7, #28]
  }

  if (ret == OV5640_OK)
 8004252:	69fb      	ldr	r3, [r7, #28]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d10c      	bne.n	8004272 <OV5640_SetSaturation+0xb6>
  {
    tmp = 0x41;
 8004258:	2341      	movs	r3, #65	@ 0x41
 800425a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	f103 0018 	add.w	r0, r3, #24
 8004262:	f107 020f 	add.w	r2, r7, #15
 8004266:	2301      	movs	r3, #1
 8004268:	f245 5188 	movw	r1, #21896	@ 0x5588
 800426c:	f000 fc4f 	bl	8004b0e <ov5640_write_reg>
 8004270:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8004272:	69fb      	ldr	r3, [r7, #28]
 8004274:	2b00      	cmp	r3, #0
 8004276:	d002      	beq.n	800427e <OV5640_SetSaturation+0xc2>
  {
    ret = OV5640_ERROR;
 8004278:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800427c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800427e:	69fb      	ldr	r3, [r7, #28]
}
 8004280:	4618      	mov	r0, r3
 8004282:	3720      	adds	r7, #32
 8004284:	46bd      	mov	sp, r7
 8004286:	bd80      	pop	{r7, pc}
 8004288:	08026504 	.word	0x08026504

0800428c <OV5640_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetContrast(OV5640_Object_t *pObj, int32_t Level)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b088      	sub	sp, #32
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t contrast_level[] = {0x10U, 0x14U, 0x18U, 0x1CU, 0x20U, 0x24U, 0x28U, 0x2CU, 0x30U};
 8004296:	4a30      	ldr	r2, [pc, #192]	@ (8004358 <OV5640_SetContrast+0xcc>)
 8004298:	f107 0310 	add.w	r3, r7, #16
 800429c:	ca07      	ldmia	r2, {r0, r1, r2}
 800429e:	c303      	stmia	r3!, {r0, r1}
 80042a0:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = 0xFF;
 80042a2:	23ff      	movs	r3, #255	@ 0xff
 80042a4:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	f103 0018 	add.w	r0, r3, #24
 80042ac:	f107 020f 	add.w	r2, r7, #15
 80042b0:	2301      	movs	r3, #1
 80042b2:	f245 0101 	movw	r1, #20481	@ 0x5001
 80042b6:	f000 fc2a 	bl	8004b0e <ov5640_write_reg>
 80042ba:	61f8      	str	r0, [r7, #28]

  if (ret == OV5640_OK)
 80042bc:	69fb      	ldr	r3, [r7, #28]
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d10c      	bne.n	80042dc <OV5640_SetContrast+0x50>
  {
    tmp = 0x04;
 80042c2:	2304      	movs	r3, #4
 80042c4:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	f103 0018 	add.w	r0, r3, #24
 80042cc:	f107 020f 	add.w	r2, r7, #15
 80042d0:	2301      	movs	r3, #1
 80042d2:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80042d6:	f000 fc1a 	bl	8004b0e <ov5640_write_reg>
 80042da:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 80042dc:	69fb      	ldr	r3, [r7, #28]
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d111      	bne.n	8004306 <OV5640_SetContrast+0x7a>
  {
    tmp = contrast_level[Level + 4];
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	3304      	adds	r3, #4
 80042e6:	3320      	adds	r3, #32
 80042e8:	443b      	add	r3, r7
 80042ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80042ee:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL6, &tmp, 1);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f103 0018 	add.w	r0, r3, #24
 80042f6:	f107 020f 	add.w	r2, r7, #15
 80042fa:	2301      	movs	r3, #1
 80042fc:	f245 5186 	movw	r1, #21894	@ 0x5586
 8004300:	f000 fc05 	bl	8004b0e <ov5640_write_reg>
 8004304:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004306:	69fb      	ldr	r3, [r7, #28]
 8004308:	2b00      	cmp	r3, #0
 800430a:	d10a      	bne.n	8004322 <OV5640_SetContrast+0x96>
  {
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL5, &tmp, 1);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	f103 0018 	add.w	r0, r3, #24
 8004312:	f107 020f 	add.w	r2, r7, #15
 8004316:	2301      	movs	r3, #1
 8004318:	f245 5185 	movw	r1, #21893	@ 0x5585
 800431c:	f000 fbf7 	bl	8004b0e <ov5640_write_reg>
 8004320:	61f8      	str	r0, [r7, #28]
  }
  if (ret == OV5640_OK)
 8004322:	69fb      	ldr	r3, [r7, #28]
 8004324:	2b00      	cmp	r3, #0
 8004326:	d10c      	bne.n	8004342 <OV5640_SetContrast+0xb6>
  {
    tmp = 0x41;
 8004328:	2341      	movs	r3, #65	@ 0x41
 800432a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	f103 0018 	add.w	r0, r3, #24
 8004332:	f107 020f 	add.w	r2, r7, #15
 8004336:	2301      	movs	r3, #1
 8004338:	f245 5188 	movw	r1, #21896	@ 0x5588
 800433c:	f000 fbe7 	bl	8004b0e <ov5640_write_reg>
 8004340:	61f8      	str	r0, [r7, #28]
  }

  if (ret != OV5640_OK)
 8004342:	69fb      	ldr	r3, [r7, #28]
 8004344:	2b00      	cmp	r3, #0
 8004346:	d002      	beq.n	800434e <OV5640_SetContrast+0xc2>
  {
    ret = OV5640_ERROR;
 8004348:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800434c:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800434e:	69fb      	ldr	r3, [r7, #28]
}
 8004350:	4618      	mov	r0, r3
 8004352:	3720      	adds	r7, #32
 8004354:	46bd      	mov	sp, r7
 8004356:	bd80      	pop	{r7, pc}
 8004358:	08026510 	.word	0x08026510

0800435c <OV5640_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV5640_SetHueDegree(OV5640_Object_t *pObj, int32_t Degree)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b08e      	sub	sp, #56	@ 0x38
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
 8004364:	6039      	str	r1, [r7, #0]
  int32_t ret;
  const uint8_t hue_degree_ctrl1[] = {0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U,
 8004366:	4a3c      	ldr	r2, [pc, #240]	@ (8004458 <OV5640_SetHueDegree+0xfc>)
 8004368:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800436c:	ca07      	ldmia	r2, {r0, r1, r2}
 800436e:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x6FU
                                     };
  const uint8_t hue_degree_ctrl2[] = {0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU, 0x40U, 0x00U, 0x40U, 0x6FU, 0x80U, 0x6FU,
 8004372:	4a3a      	ldr	r2, [pc, #232]	@ (800445c <OV5640_SetHueDegree+0x100>)
 8004374:	f107 031c 	add.w	r3, r7, #28
 8004378:	ca07      	ldmia	r2, {r0, r1, r2}
 800437a:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x40U
                                     };
  const uint8_t hue_degree_ctrl8[] = {0x32U, 0x32U, 0x32U, 0x02U, 0x02U, 0x02U, 0x01U, 0x01U, 0x01U, 0x31U, 0x31U,
 800437e:	4a38      	ldr	r2, [pc, #224]	@ (8004460 <OV5640_SetHueDegree+0x104>)
 8004380:	f107 0310 	add.w	r3, r7, #16
 8004384:	ca07      	ldmia	r2, {r0, r1, r2}
 8004386:	e883 0007 	stmia.w	r3, {r0, r1, r2}
                                      0x31U
                                     };
  uint8_t tmp;

  tmp = 0xFF;
 800438a:	23ff      	movs	r3, #255	@ 0xff
 800438c:	73fb      	strb	r3, [r7, #15]
  ret = ov5640_write_reg(&pObj->Ctx, OV5640_ISP_CONTROL01, &tmp, 1);
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	f103 0018 	add.w	r0, r3, #24
 8004394:	f107 020f 	add.w	r2, r7, #15
 8004398:	2301      	movs	r3, #1
 800439a:	f245 0101 	movw	r1, #20481	@ 0x5001
 800439e:	f000 fbb6 	bl	8004b0e <ov5640_write_reg>
 80043a2:	6378      	str	r0, [r7, #52]	@ 0x34

  if (ret == OV5640_OK)
 80043a4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d10c      	bne.n	80043c4 <OV5640_SetHueDegree+0x68>
  {
    tmp = 0x01;
 80043aa:	2301      	movs	r3, #1
 80043ac:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL0, &tmp, 1);
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	f103 0018 	add.w	r0, r3, #24
 80043b4:	f107 020f 	add.w	r2, r7, #15
 80043b8:	2301      	movs	r3, #1
 80043ba:	f44f 41ab 	mov.w	r1, #21888	@ 0x5580
 80043be:	f000 fba6 	bl	8004b0e <ov5640_write_reg>
 80043c2:	6378      	str	r0, [r7, #52]	@ 0x34
  }
  if (ret == OV5640_OK)
 80043c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d111      	bne.n	80043ee <OV5640_SetHueDegree+0x92>
  {
    tmp = hue_degree_ctrl1[Degree + 6];
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	3306      	adds	r3, #6
 80043ce:	3338      	adds	r3, #56	@ 0x38
 80043d0:	443b      	add	r3, r7
 80043d2:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80043d6:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL1, &tmp, 1);
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	f103 0018 	add.w	r0, r3, #24
 80043de:	f107 020f 	add.w	r2, r7, #15
 80043e2:	2301      	movs	r3, #1
 80043e4:	f245 5181 	movw	r1, #21889	@ 0x5581
 80043e8:	f000 fb91 	bl	8004b0e <ov5640_write_reg>
 80043ec:	6378      	str	r0, [r7, #52]	@ 0x34
  }
  if (ret == OV5640_OK)
 80043ee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d111      	bne.n	8004418 <OV5640_SetHueDegree+0xbc>
  {
    tmp = hue_degree_ctrl2[Degree + 6];
 80043f4:	683b      	ldr	r3, [r7, #0]
 80043f6:	3306      	adds	r3, #6
 80043f8:	3338      	adds	r3, #56	@ 0x38
 80043fa:	443b      	add	r3, r7
 80043fc:	f813 3c1c 	ldrb.w	r3, [r3, #-28]
 8004400:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL2, &tmp, 1);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	f103 0018 	add.w	r0, r3, #24
 8004408:	f107 020f 	add.w	r2, r7, #15
 800440c:	2301      	movs	r3, #1
 800440e:	f245 5182 	movw	r1, #21890	@ 0x5582
 8004412:	f000 fb7c 	bl	8004b0e <ov5640_write_reg>
 8004416:	6378      	str	r0, [r7, #52]	@ 0x34
  }
  if (ret == OV5640_OK)
 8004418:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800441a:	2b00      	cmp	r3, #0
 800441c:	d111      	bne.n	8004442 <OV5640_SetHueDegree+0xe6>
  {
    tmp = hue_degree_ctrl8[Degree + 6];
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	3306      	adds	r3, #6
 8004422:	3338      	adds	r3, #56	@ 0x38
 8004424:	443b      	add	r3, r7
 8004426:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800442a:	73fb      	strb	r3, [r7, #15]
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SDE_CTRL8, &tmp, 1);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	f103 0018 	add.w	r0, r3, #24
 8004432:	f107 020f 	add.w	r2, r7, #15
 8004436:	2301      	movs	r3, #1
 8004438:	f245 5188 	movw	r1, #21896	@ 0x5588
 800443c:	f000 fb67 	bl	8004b0e <ov5640_write_reg>
 8004440:	6378      	str	r0, [r7, #52]	@ 0x34
  }

  if (ret != OV5640_OK)
 8004442:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004444:	2b00      	cmp	r3, #0
 8004446:	d002      	beq.n	800444e <OV5640_SetHueDegree+0xf2>
  {
    ret = OV5640_ERROR;
 8004448:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800444c:	637b      	str	r3, [r7, #52]	@ 0x34
  }

  return ret;
 800444e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8004450:	4618      	mov	r0, r3
 8004452:	3738      	adds	r7, #56	@ 0x38
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	0802651c 	.word	0x0802651c
 800445c:	08026528 	.word	0x08026528
 8004460:	08026534 	.word	0x08026534

08004464 <OV5640_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV5640_MirrorFlipConfig(OV5640_Object_t *pObj, uint32_t Config)
{
 8004464:	b580      	push	{r7, lr}
 8004466:	b084      	sub	sp, #16
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp3820 = 0;
 800446e:	2300      	movs	r3, #0
 8004470:	72fb      	strb	r3, [r7, #11]
  uint8_t tmp3821;

  if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	f103 0018 	add.w	r0, r3, #24
 8004478:	f107 020b 	add.w	r2, r7, #11
 800447c:	2301      	movs	r3, #1
 800447e:	f643 0120 	movw	r1, #14368	@ 0x3820
 8004482:	f000 fb2d 	bl	8004ae0 <ov5640_read_reg>
 8004486:	4603      	mov	r3, r0
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <OV5640_MirrorFlipConfig+0x30>
  {
    ret = OV5640_ERROR;
 800448c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004490:	60fb      	str	r3, [r7, #12]
 8004492:	e0cb      	b.n	800462c <OV5640_MirrorFlipConfig+0x1c8>
  }
  else
  {
    tmp3820 &= 0xF9U;
 8004494:	7afb      	ldrb	r3, [r7, #11]
 8004496:	f023 0306 	bic.w	r3, r3, #6
 800449a:	b2db      	uxtb	r3, r3
 800449c:	72fb      	strb	r3, [r7, #11]

    if (ov5640_read_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	f103 0018 	add.w	r0, r3, #24
 80044a4:	f107 020a 	add.w	r2, r7, #10
 80044a8:	2301      	movs	r3, #1
 80044aa:	f643 0121 	movw	r1, #14369	@ 0x3821
 80044ae:	f000 fb17 	bl	8004ae0 <ov5640_read_reg>
 80044b2:	4603      	mov	r3, r0
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d003      	beq.n	80044c0 <OV5640_MirrorFlipConfig+0x5c>
    {
      ret = OV5640_ERROR;
 80044b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80044bc:	60fb      	str	r3, [r7, #12]
 80044be:	e0b5      	b.n	800462c <OV5640_MirrorFlipConfig+0x1c8>
    }
    else
    {
      ret = OV5640_OK;
 80044c0:	2300      	movs	r3, #0
 80044c2:	60fb      	str	r3, [r7, #12]
      tmp3821 &= 0xF9U;
 80044c4:	7abb      	ldrb	r3, [r7, #10]
 80044c6:	f023 0306 	bic.w	r3, r3, #6
 80044ca:	b2db      	uxtb	r3, r3
 80044cc:	72bb      	strb	r3, [r7, #10]

      switch (Config)
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	2b03      	cmp	r3, #3
 80044d2:	d056      	beq.n	8004582 <OV5640_MirrorFlipConfig+0x11e>
 80044d4:	683b      	ldr	r3, [r7, #0]
 80044d6:	2b03      	cmp	r3, #3
 80044d8:	d87f      	bhi.n	80045da <OV5640_MirrorFlipConfig+0x176>
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d029      	beq.n	8004534 <OV5640_MirrorFlipConfig+0xd0>
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	2b02      	cmp	r3, #2
 80044e4:	d179      	bne.n	80045da <OV5640_MirrorFlipConfig+0x176>
      {
        case OV5640_MIRROR:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f103 0018 	add.w	r0, r3, #24
 80044ec:	f107 020b 	add.w	r2, r7, #11
 80044f0:	2301      	movs	r3, #1
 80044f2:	f643 0120 	movw	r1, #14368	@ 0x3820
 80044f6:	f000 fb0a 	bl	8004b0e <ov5640_write_reg>
 80044fa:	4603      	mov	r3, r0
 80044fc:	2b00      	cmp	r3, #0
 80044fe:	d003      	beq.n	8004508 <OV5640_MirrorFlipConfig+0xa4>
          {
            ret = OV5640_ERROR;
 8004500:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004504:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 8004506:	e08a      	b.n	800461e <OV5640_MirrorFlipConfig+0x1ba>
            tmp3821 |= 0x06U;
 8004508:	7abb      	ldrb	r3, [r7, #10]
 800450a:	f043 0306 	orr.w	r3, r3, #6
 800450e:	b2db      	uxtb	r3, r3
 8004510:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	f103 0018 	add.w	r0, r3, #24
 8004518:	f107 020a 	add.w	r2, r7, #10
 800451c:	2301      	movs	r3, #1
 800451e:	f643 0121 	movw	r1, #14369	@ 0x3821
 8004522:	f000 faf4 	bl	8004b0e <ov5640_write_reg>
 8004526:	4603      	mov	r3, r0
 8004528:	2b00      	cmp	r3, #0
 800452a:	d078      	beq.n	800461e <OV5640_MirrorFlipConfig+0x1ba>
              ret = OV5640_ERROR;
 800452c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004530:	60fb      	str	r3, [r7, #12]
          break;
 8004532:	e074      	b.n	800461e <OV5640_MirrorFlipConfig+0x1ba>
        case OV5640_FLIP:
          tmp3820 |= 0x06U;
 8004534:	7afb      	ldrb	r3, [r7, #11]
 8004536:	f043 0306 	orr.w	r3, r3, #6
 800453a:	b2db      	uxtb	r3, r3
 800453c:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	f103 0018 	add.w	r0, r3, #24
 8004544:	f107 020b 	add.w	r2, r7, #11
 8004548:	2301      	movs	r3, #1
 800454a:	f643 0120 	movw	r1, #14368	@ 0x3820
 800454e:	f000 fade 	bl	8004b0e <ov5640_write_reg>
 8004552:	4603      	mov	r3, r0
 8004554:	2b00      	cmp	r3, #0
 8004556:	d003      	beq.n	8004560 <OV5640_MirrorFlipConfig+0xfc>
          {
            ret = OV5640_ERROR;
 8004558:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800455c:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 800455e:	e060      	b.n	8004622 <OV5640_MirrorFlipConfig+0x1be>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	f103 0018 	add.w	r0, r3, #24
 8004566:	f107 020a 	add.w	r2, r7, #10
 800456a:	2301      	movs	r3, #1
 800456c:	f643 0121 	movw	r1, #14369	@ 0x3821
 8004570:	f000 facd 	bl	8004b0e <ov5640_write_reg>
 8004574:	4603      	mov	r3, r0
 8004576:	2b00      	cmp	r3, #0
 8004578:	d053      	beq.n	8004622 <OV5640_MirrorFlipConfig+0x1be>
              ret = OV5640_ERROR;
 800457a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800457e:	60fb      	str	r3, [r7, #12]
          break;
 8004580:	e04f      	b.n	8004622 <OV5640_MirrorFlipConfig+0x1be>
        case OV5640_MIRROR_FLIP:
          tmp3820 |= 0x06U;
 8004582:	7afb      	ldrb	r3, [r7, #11]
 8004584:	f043 0306 	orr.w	r3, r3, #6
 8004588:	b2db      	uxtb	r3, r3
 800458a:	72fb      	strb	r3, [r7, #11]
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	f103 0018 	add.w	r0, r3, #24
 8004592:	f107 020b 	add.w	r2, r7, #11
 8004596:	2301      	movs	r3, #1
 8004598:	f643 0120 	movw	r1, #14368	@ 0x3820
 800459c:	f000 fab7 	bl	8004b0e <ov5640_write_reg>
 80045a0:	4603      	mov	r3, r0
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <OV5640_MirrorFlipConfig+0x14a>
          {
            ret = OV5640_ERROR;
 80045a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045aa:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80045ac:	e03b      	b.n	8004626 <OV5640_MirrorFlipConfig+0x1c2>
            tmp3821 |= 0x06U;
 80045ae:	7abb      	ldrb	r3, [r7, #10]
 80045b0:	f043 0306 	orr.w	r3, r3, #6
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	72bb      	strb	r3, [r7, #10]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	f103 0018 	add.w	r0, r3, #24
 80045be:	f107 020a 	add.w	r2, r7, #10
 80045c2:	2301      	movs	r3, #1
 80045c4:	f643 0121 	movw	r1, #14369	@ 0x3821
 80045c8:	f000 faa1 	bl	8004b0e <ov5640_write_reg>
 80045cc:	4603      	mov	r3, r0
 80045ce:	2b00      	cmp	r3, #0
 80045d0:	d029      	beq.n	8004626 <OV5640_MirrorFlipConfig+0x1c2>
              ret = OV5640_ERROR;
 80045d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045d6:	60fb      	str	r3, [r7, #12]
          break;
 80045d8:	e025      	b.n	8004626 <OV5640_MirrorFlipConfig+0x1c2>

        case OV5640_MIRROR_FLIP_NONE:
        default:
          if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG20, &tmp3820, 1) != OV5640_OK)
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	f103 0018 	add.w	r0, r3, #24
 80045e0:	f107 020b 	add.w	r2, r7, #11
 80045e4:	2301      	movs	r3, #1
 80045e6:	f643 0120 	movw	r1, #14368	@ 0x3820
 80045ea:	f000 fa90 	bl	8004b0e <ov5640_write_reg>
 80045ee:	4603      	mov	r3, r0
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d003      	beq.n	80045fc <OV5640_MirrorFlipConfig+0x198>
          {
            ret = OV5640_ERROR;
 80045f4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80045f8:	60fb      	str	r3, [r7, #12]
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
            {
              ret = OV5640_ERROR;
            }
          }
          break;
 80045fa:	e016      	b.n	800462a <OV5640_MirrorFlipConfig+0x1c6>
            if (ov5640_write_reg(&pObj->Ctx, OV5640_TIMING_TC_REG21, &tmp3821, 1) != OV5640_OK)
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	f103 0018 	add.w	r0, r3, #24
 8004602:	f107 020a 	add.w	r2, r7, #10
 8004606:	2301      	movs	r3, #1
 8004608:	f643 0121 	movw	r1, #14369	@ 0x3821
 800460c:	f000 fa7f 	bl	8004b0e <ov5640_write_reg>
 8004610:	4603      	mov	r3, r0
 8004612:	2b00      	cmp	r3, #0
 8004614:	d009      	beq.n	800462a <OV5640_MirrorFlipConfig+0x1c6>
              ret = OV5640_ERROR;
 8004616:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800461a:	60fb      	str	r3, [r7, #12]
          break;
 800461c:	e005      	b.n	800462a <OV5640_MirrorFlipConfig+0x1c6>
          break;
 800461e:	bf00      	nop
 8004620:	e004      	b.n	800462c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8004622:	bf00      	nop
 8004624:	e002      	b.n	800462c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 8004626:	bf00      	nop
 8004628:	e000      	b.n	800462c <OV5640_MirrorFlipConfig+0x1c8>
          break;
 800462a:	bf00      	nop
      }
    }
  }

  return ret;
 800462c:	68fb      	ldr	r3, [r7, #12]
}
 800462e:	4618      	mov	r0, r3
 8004630:	3710      	adds	r7, #16
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}

08004636 <OV5640_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV5640_ZoomConfig(OV5640_Object_t *pObj, uint32_t Zoom)
{
 8004636:	b580      	push	{r7, lr}
 8004638:	b086      	sub	sp, #24
 800463a:	af00      	add	r7, sp, #0
 800463c:	6078      	str	r0, [r7, #4]
 800463e:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 8004640:	2300      	movs	r3, #0
 8004642:	617b      	str	r3, [r7, #20]
  uint32_t res;
  uint32_t zoom;
  uint8_t tmp;

  /* Get camera resolution */
  if (OV5640_GetResolution(pObj, &res) != OV5640_OK)
 8004644:	f107 030c 	add.w	r3, r7, #12
 8004648:	4619      	mov	r1, r3
 800464a:	6878      	ldr	r0, [r7, #4]
 800464c:	f7ff f8a6 	bl	800379c <OV5640_GetResolution>
 8004650:	4603      	mov	r3, r0
 8004652:	2b00      	cmp	r3, #0
 8004654:	d003      	beq.n	800465e <OV5640_ZoomConfig+0x28>
  {
    ret = OV5640_ERROR;
 8004656:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800465a:	617b      	str	r3, [r7, #20]
 800465c:	e04e      	b.n	80046fc <OV5640_ZoomConfig+0xc6>
  }
  else
  {
    zoom = Zoom;
 800465e:	683b      	ldr	r3, [r7, #0]
 8004660:	613b      	str	r3, [r7, #16]

    if (zoom == OV5640_ZOOM_x1)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b44      	cmp	r3, #68	@ 0x44
 8004666:	d112      	bne.n	800468e <OV5640_ZoomConfig+0x58>
    {
      tmp = 0x10;
 8004668:	2310      	movs	r3, #16
 800466a:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	f103 0018 	add.w	r0, r3, #24
 8004672:	f107 020b 	add.w	r2, r7, #11
 8004676:	2301      	movs	r3, #1
 8004678:	f44f 41ac 	mov.w	r1, #22016	@ 0x5600
 800467c:	f000 fa47 	bl	8004b0e <ov5640_write_reg>
 8004680:	4603      	mov	r3, r0
 8004682:	2b00      	cmp	r3, #0
 8004684:	d03a      	beq.n	80046fc <OV5640_ZoomConfig+0xc6>
      {
        ret = OV5640_ERROR;
 8004686:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800468a:	617b      	str	r3, [r7, #20]
 800468c:	e036      	b.n	80046fc <OV5640_ZoomConfig+0xc6>
      }
    }
    else
    {
      switch (res)
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	2b02      	cmp	r3, #2
 8004692:	d802      	bhi.n	800469a <OV5640_ZoomConfig+0x64>
 8004694:	2b00      	cmp	r3, #0
 8004696:	d103      	bne.n	80046a0 <OV5640_ZoomConfig+0x6a>
          break;
        case OV5640_R640x480:
          zoom = zoom >> 2U;
          break;
        default:
          break;
 8004698:	e00a      	b.n	80046b0 <OV5640_ZoomConfig+0x7a>
      switch (res)
 800469a:	2b03      	cmp	r3, #3
 800469c:	d004      	beq.n	80046a8 <OV5640_ZoomConfig+0x72>
          break;
 800469e:	e007      	b.n	80046b0 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 1U;
 80046a0:	693b      	ldr	r3, [r7, #16]
 80046a2:	085b      	lsrs	r3, r3, #1
 80046a4:	613b      	str	r3, [r7, #16]
          break;
 80046a6:	e003      	b.n	80046b0 <OV5640_ZoomConfig+0x7a>
          zoom = zoom >> 2U;
 80046a8:	693b      	ldr	r3, [r7, #16]
 80046aa:	089b      	lsrs	r3, r3, #2
 80046ac:	613b      	str	r3, [r7, #16]
          break;
 80046ae:	bf00      	nop
      }

      tmp = 0x00;
 80046b0:	2300      	movs	r3, #0
 80046b2:	72fb      	strb	r3, [r7, #11]
      if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL0, &tmp, 1) != OV5640_OK)
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	f103 0018 	add.w	r0, r3, #24
 80046ba:	f107 020b 	add.w	r2, r7, #11
 80046be:	2301      	movs	r3, #1
 80046c0:	f44f 41ac 	mov.w	r1, #22016	@ 0x5600
 80046c4:	f000 fa23 	bl	8004b0e <ov5640_write_reg>
 80046c8:	4603      	mov	r3, r0
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d003      	beq.n	80046d6 <OV5640_ZoomConfig+0xa0>
      {
        ret = OV5640_ERROR;
 80046ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e012      	b.n	80046fc <OV5640_ZoomConfig+0xc6>
      }
      else
      {
        tmp = (uint8_t)zoom;
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	b2db      	uxtb	r3, r3
 80046da:	72fb      	strb	r3, [r7, #11]
        if (ov5640_write_reg(&pObj->Ctx, OV5640_SCALE_CTRL1, &tmp, 1) != OV5640_OK)
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	f103 0018 	add.w	r0, r3, #24
 80046e2:	f107 020b 	add.w	r2, r7, #11
 80046e6:	2301      	movs	r3, #1
 80046e8:	f245 6101 	movw	r1, #22017	@ 0x5601
 80046ec:	f000 fa0f 	bl	8004b0e <ov5640_write_reg>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d002      	beq.n	80046fc <OV5640_ZoomConfig+0xc6>
        {
          ret = OV5640_ERROR;
 80046f6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80046fa:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return ret;
 80046fc:	697b      	ldr	r3, [r7, #20]
}
 80046fe:	4618      	mov	r0, r3
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <OV5640_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV5640_NightModeConfig(OV5640_Object_t *pObj, uint32_t Cmd)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b084      	sub	sp, #16
 800470a:	af00      	add	r7, sp, #0
 800470c:	6078      	str	r0, [r7, #4]
 800470e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp = 0;
 8004710:	2300      	movs	r3, #0
 8004712:	72fb      	strb	r3, [r7, #11]

  if (Cmd == NIGHT_MODE_ENABLE)
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	2b01      	cmp	r3, #1
 8004718:	f040 80ce 	bne.w	80048b8 <OV5640_NightModeConfig+0x1b2>
  {
    /* Auto Frame Rate: 15fps ~ 3.75fps night mode for 60/50Hz light environment,
    24Mhz clock input,24Mhz PCLK*/
    ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL4, &tmp, 1);
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f103 0018 	add.w	r0, r3, #24
 8004722:	f107 020b 	add.w	r2, r7, #11
 8004726:	2301      	movs	r3, #1
 8004728:	f243 0138 	movw	r1, #12344	@ 0x3038
 800472c:	f000 f9ef 	bl	8004b0e <ov5640_write_reg>
 8004730:	60f8      	str	r0, [r7, #12]
    if (ret == OV5640_OK)
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2b00      	cmp	r3, #0
 8004736:	d10a      	bne.n	800474e <OV5640_NightModeConfig+0x48>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_SC_PLL_CONTRL5, &tmp, 1);
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	f103 0018 	add.w	r0, r3, #24
 800473e:	f107 020b 	add.w	r2, r7, #11
 8004742:	2301      	movs	r3, #1
 8004744:	f243 0139 	movw	r1, #12345	@ 0x3039
 8004748:	f000 f9e1 	bl	8004b0e <ov5640_write_reg>
 800474c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800474e:	68fb      	ldr	r3, [r7, #12]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d10c      	bne.n	800476e <OV5640_NightModeConfig+0x68>
    {
      tmp = 0x7C;
 8004754:	237c      	movs	r3, #124	@ 0x7c
 8004756:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1);
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	f103 0018 	add.w	r0, r3, #24
 800475e:	f107 020b 	add.w	r2, r7, #11
 8004762:	2301      	movs	r3, #1
 8004764:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 8004768:	f000 f9d1 	bl	8004b0e <ov5640_write_reg>
 800476c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	2b00      	cmp	r3, #0
 8004772:	d10c      	bne.n	800478e <OV5640_NightModeConfig+0x88>
    {
      tmp = 0x01;
 8004774:	2301      	movs	r3, #1
 8004776:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_HIGH, &tmp, 1);
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	f103 0018 	add.w	r0, r3, #24
 800477e:	f107 020b 	add.w	r2, r7, #11
 8004782:	2301      	movs	r3, #1
 8004784:	f643 2108 	movw	r1, #14856	@ 0x3a08
 8004788:	f000 f9c1 	bl	8004b0e <ov5640_write_reg>
 800478c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	2b00      	cmp	r3, #0
 8004792:	d10c      	bne.n	80047ae <OV5640_NightModeConfig+0xa8>
    {
      tmp = 0x27;
 8004794:	2327      	movs	r3, #39	@ 0x27
 8004796:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B50_STEP_LOW, &tmp, 1);
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	f103 0018 	add.w	r0, r3, #24
 800479e:	f107 020b 	add.w	r2, r7, #11
 80047a2:	2301      	movs	r3, #1
 80047a4:	f643 2109 	movw	r1, #14857	@ 0x3a09
 80047a8:	f000 f9b1 	bl	8004b0e <ov5640_write_reg>
 80047ac:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d10c      	bne.n	80047ce <OV5640_NightModeConfig+0xc8>
    {
      tmp = 0x00;
 80047b4:	2300      	movs	r3, #0
 80047b6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_HIGH, &tmp, 1);
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	f103 0018 	add.w	r0, r3, #24
 80047be:	f107 020b 	add.w	r2, r7, #11
 80047c2:	2301      	movs	r3, #1
 80047c4:	f643 210a 	movw	r1, #14858	@ 0x3a0a
 80047c8:	f000 f9a1 	bl	8004b0e <ov5640_write_reg>
 80047cc:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2b00      	cmp	r3, #0
 80047d2:	d10c      	bne.n	80047ee <OV5640_NightModeConfig+0xe8>
    {
      tmp = 0xF6;
 80047d4:	23f6      	movs	r3, #246	@ 0xf6
 80047d6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_B60_STEP_LOW, &tmp, 1);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f103 0018 	add.w	r0, r3, #24
 80047de:	f107 020b 	add.w	r2, r7, #11
 80047e2:	2301      	movs	r3, #1
 80047e4:	f643 210b 	movw	r1, #14859	@ 0x3a0b
 80047e8:	f000 f991 	bl	8004b0e <ov5640_write_reg>
 80047ec:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	2b00      	cmp	r3, #0
 80047f2:	d10c      	bne.n	800480e <OV5640_NightModeConfig+0x108>
    {
      tmp = 0x04;
 80047f4:	2304      	movs	r3, #4
 80047f6:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0D, &tmp, 1);
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	f103 0018 	add.w	r0, r3, #24
 80047fe:	f107 020b 	add.w	r2, r7, #11
 8004802:	2301      	movs	r3, #1
 8004804:	f643 210d 	movw	r1, #14861	@ 0x3a0d
 8004808:	f000 f981 	bl	8004b0e <ov5640_write_reg>
 800480c:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d10a      	bne.n	800482a <OV5640_NightModeConfig+0x124>
    {
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL0E, &tmp, 1);
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	f103 0018 	add.w	r0, r3, #24
 800481a:	f107 020b 	add.w	r2, r7, #11
 800481e:	2301      	movs	r3, #1
 8004820:	f643 210e 	movw	r1, #14862	@ 0x3a0e
 8004824:	f000 f973 	bl	8004b0e <ov5640_write_reg>
 8004828:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2b00      	cmp	r3, #0
 800482e:	d10c      	bne.n	800484a <OV5640_NightModeConfig+0x144>
    {
      tmp = 0x0B;
 8004830:	230b      	movs	r3, #11
 8004832:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL02, &tmp, 1);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	f103 0018 	add.w	r0, r3, #24
 800483a:	f107 020b 	add.w	r2, r7, #11
 800483e:	2301      	movs	r3, #1
 8004840:	f643 2102 	movw	r1, #14850	@ 0x3a02
 8004844:	f000 f963 	bl	8004b0e <ov5640_write_reg>
 8004848:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	2b00      	cmp	r3, #0
 800484e:	d10c      	bne.n	800486a <OV5640_NightModeConfig+0x164>
    {
      tmp = 0x88;
 8004850:	2388      	movs	r3, #136	@ 0x88
 8004852:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL03, &tmp, 1);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	f103 0018 	add.w	r0, r3, #24
 800485a:	f107 020b 	add.w	r2, r7, #11
 800485e:	2301      	movs	r3, #1
 8004860:	f643 2103 	movw	r1, #14851	@ 0x3a03
 8004864:	f000 f953 	bl	8004b0e <ov5640_write_reg>
 8004868:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800486a:	68fb      	ldr	r3, [r7, #12]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d10c      	bne.n	800488a <OV5640_NightModeConfig+0x184>
    {
      tmp = 0x0B;
 8004870:	230b      	movs	r3, #11
 8004872:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_HIGH, &tmp, 1);
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	f103 0018 	add.w	r0, r3, #24
 800487a:	f107 020b 	add.w	r2, r7, #11
 800487e:	2301      	movs	r3, #1
 8004880:	f643 2114 	movw	r1, #14868	@ 0x3a14
 8004884:	f000 f943 	bl	8004b0e <ov5640_write_reg>
 8004888:	60f8      	str	r0, [r7, #12]
    }
    if (ret == OV5640_OK)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d10c      	bne.n	80048aa <OV5640_NightModeConfig+0x1a4>
    {
      tmp = 0x88;
 8004890:	2388      	movs	r3, #136	@ 0x88
 8004892:	72fb      	strb	r3, [r7, #11]
      ret = ov5640_write_reg(&pObj->Ctx, OV5640_AEC_MAX_EXPO_LOW, &tmp, 1);
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	f103 0018 	add.w	r0, r3, #24
 800489a:	f107 020b 	add.w	r2, r7, #11
 800489e:	2301      	movs	r3, #1
 80048a0:	f643 2115 	movw	r1, #14869	@ 0x3a15
 80048a4:	f000 f933 	bl	8004b0e <ov5640_write_reg>
 80048a8:	60f8      	str	r0, [r7, #12]
    }
    if (ret != OV5640_OK)
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	2b00      	cmp	r3, #0
 80048ae:	d02b      	beq.n	8004908 <OV5640_NightModeConfig+0x202>
    {
      ret = OV5640_ERROR;
 80048b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048b4:	60fb      	str	r3, [r7, #12]
 80048b6:	e027      	b.n	8004908 <OV5640_NightModeConfig+0x202>
    }
  }
  else
  {
    if (ov5640_read_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	f103 0018 	add.w	r0, r3, #24
 80048be:	f107 020b 	add.w	r2, r7, #11
 80048c2:	2301      	movs	r3, #1
 80048c4:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 80048c8:	f000 f90a 	bl	8004ae0 <ov5640_read_reg>
 80048cc:	4603      	mov	r3, r0
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d003      	beq.n	80048da <OV5640_NightModeConfig+0x1d4>
    {
      ret = OV5640_ERROR;
 80048d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80048d6:	60fb      	str	r3, [r7, #12]
 80048d8:	e016      	b.n	8004908 <OV5640_NightModeConfig+0x202>
    }
    else
    {
      ret = OV5640_OK;
 80048da:	2300      	movs	r3, #0
 80048dc:	60fb      	str	r3, [r7, #12]
      tmp &= 0xFBU;
 80048de:	7afb      	ldrb	r3, [r7, #11]
 80048e0:	f023 0304 	bic.w	r3, r3, #4
 80048e4:	b2db      	uxtb	r3, r3
 80048e6:	72fb      	strb	r3, [r7, #11]
      /* Set Bit 2 to 0 */
      if (ov5640_write_reg(&pObj->Ctx, OV5640_AEC_CTRL00, &tmp, 1) != OV5640_OK)
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	f103 0018 	add.w	r0, r3, #24
 80048ee:	f107 020b 	add.w	r2, r7, #11
 80048f2:	2301      	movs	r3, #1
 80048f4:	f44f 5168 	mov.w	r1, #14848	@ 0x3a00
 80048f8:	f000 f909 	bl	8004b0e <ov5640_write_reg>
 80048fc:	4603      	mov	r3, r0
 80048fe:	2b00      	cmp	r3, #0
 8004900:	d002      	beq.n	8004908 <OV5640_NightModeConfig+0x202>
      {
        ret = OV5640_ERROR;
 8004902:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004906:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 8004908:	68fb      	ldr	r3, [r7, #12]
}
 800490a:	4618      	mov	r0, r3
 800490c:	3710      	adds	r7, #16
 800490e:	46bd      	mov	sp, r7
 8004910:	bd80      	pop	{r7, pc}
	...

08004914 <OV5640_EnableDVPMode>:
  * @brief  Enable DVP(Digital Video Port) Mode: Parallel Data Output
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int OV5640_EnableDVPMode(OV5640_Object_t *pObj)
{
 8004914:	b580      	push	{r7, lr}
 8004916:	b086      	sub	sp, #24
 8004918:	af00      	add	r7, sp, #0
 800491a:	6078      	str	r0, [r7, #4]
  uint32_t index;
  int32_t ret = OV5640_OK;
 800491c:	2300      	movs	r3, #0
 800491e:	613b      	str	r3, [r7, #16]
    {OV5640_SC_PLL_CONTRL2, 0x60},
    {OV5640_SC_PLL_CONTRL3, 0x13},
    {OV5640_SYSTEM_ROOT_DIVIDER, 0x01},
  };

  for(index=0; index < sizeof(regs) / 4U ; index++)
 8004920:	2300      	movs	r3, #0
 8004922:	617b      	str	r3, [r7, #20]
 8004924:	e01c      	b.n	8004960 <OV5640_EnableDVPMode+0x4c>
  {
    tmp = (uint8_t)regs[index][1];
 8004926:	4a12      	ldr	r2, [pc, #72]	@ (8004970 <OV5640_EnableDVPMode+0x5c>)
 8004928:	697b      	ldr	r3, [r7, #20]
 800492a:	009b      	lsls	r3, r3, #2
 800492c:	4413      	add	r3, r2
 800492e:	885b      	ldrh	r3, [r3, #2]
 8004930:	b2db      	uxtb	r3, r3
 8004932:	73fb      	strb	r3, [r7, #15]
    if(ov5640_write_reg(&pObj->Ctx, regs[index][0], &tmp, 1) != OV5640_OK)
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	f103 0018 	add.w	r0, r3, #24
 800493a:	4a0d      	ldr	r2, [pc, #52]	@ (8004970 <OV5640_EnableDVPMode+0x5c>)
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 8004942:	f107 020f 	add.w	r2, r7, #15
 8004946:	2301      	movs	r3, #1
 8004948:	f000 f8e1 	bl	8004b0e <ov5640_write_reg>
 800494c:	4603      	mov	r3, r0
 800494e:	2b00      	cmp	r3, #0
 8004950:	d003      	beq.n	800495a <OV5640_EnableDVPMode+0x46>
    {
      ret = OV5640_ERROR;
 8004952:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004956:	613b      	str	r3, [r7, #16]
      break;
 8004958:	e005      	b.n	8004966 <OV5640_EnableDVPMode+0x52>
  for(index=0; index < sizeof(regs) / 4U ; index++)
 800495a:	697b      	ldr	r3, [r7, #20]
 800495c:	3301      	adds	r3, #1
 800495e:	617b      	str	r3, [r7, #20]
 8004960:	697b      	ldr	r3, [r7, #20]
 8004962:	2b09      	cmp	r3, #9
 8004964:	d9df      	bls.n	8004926 <OV5640_EnableDVPMode+0x12>
    }
  }

  return ret;
 8004966:	693b      	ldr	r3, [r7, #16]
}
 8004968:	4618      	mov	r0, r3
 800496a:	3718      	adds	r7, #24
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	08027bb0 	.word	0x08027bb0

08004974 <OV5640_EnableMIPIMode>:
  * @brief  Enable MIPI (Mobile Industry Processor Interface) Mode: Serial port
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV5640_EnableMIPIMode(OV5640_Object_t *pObj)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b086      	sub	sp, #24
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  int32_t ret = OV5640_OK;
 800497c:	2300      	movs	r3, #0
 800497e:	617b      	str	r3, [r7, #20]
    {OV5640_PAD_OUTPUT_VALUE00, 0x70},
    {OV5640_MIPI_CONTROL00, 0x45},
    {OV5640_FRAME_CTRL02, 0x00},
  };

  for(index=0; index < sizeof(regs) / 4U ; index++)
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e01c      	b.n	80049c0 <OV5640_EnableMIPIMode+0x4c>
  {
    tmp = (uint8_t)regs[index][1];
 8004986:	4a12      	ldr	r2, [pc, #72]	@ (80049d0 <OV5640_EnableMIPIMode+0x5c>)
 8004988:	693b      	ldr	r3, [r7, #16]
 800498a:	009b      	lsls	r3, r3, #2
 800498c:	4413      	add	r3, r2
 800498e:	885b      	ldrh	r3, [r3, #2]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	73fb      	strb	r3, [r7, #15]
    if(ov5640_write_reg(&pObj->Ctx, regs[index][0], &tmp, 1) != OV5640_OK)
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f103 0018 	add.w	r0, r3, #24
 800499a:	4a0d      	ldr	r2, [pc, #52]	@ (80049d0 <OV5640_EnableMIPIMode+0x5c>)
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	f832 1023 	ldrh.w	r1, [r2, r3, lsl #2]
 80049a2:	f107 020f 	add.w	r2, r7, #15
 80049a6:	2301      	movs	r3, #1
 80049a8:	f000 f8b1 	bl	8004b0e <ov5640_write_reg>
 80049ac:	4603      	mov	r3, r0
 80049ae:	2b00      	cmp	r3, #0
 80049b0:	d003      	beq.n	80049ba <OV5640_EnableMIPIMode+0x46>
    {
      ret = OV5640_ERROR;
 80049b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049b6:	617b      	str	r3, [r7, #20]
      break;
 80049b8:	e005      	b.n	80049c6 <OV5640_EnableMIPIMode+0x52>
  for(index=0; index < sizeof(regs) / 4U ; index++)
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	3301      	adds	r3, #1
 80049be:	613b      	str	r3, [r7, #16]
 80049c0:	693b      	ldr	r3, [r7, #16]
 80049c2:	2b0d      	cmp	r3, #13
 80049c4:	d9df      	bls.n	8004986 <OV5640_EnableMIPIMode+0x12>
    }
  }

  return ret;
 80049c6:	697b      	ldr	r3, [r7, #20]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	3718      	adds	r7, #24
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd80      	pop	{r7, pc}
 80049d0:	08027bd8 	.word	0x08027bd8

080049d4 <OV5640_SetMIPIVirtualChannel>:
  * @param  pObj  pointer to component object
  * @param  vchannel virtual channel for Mipi Mode
  * @retval Component status
  */
int32_t OV5640_SetMIPIVirtualChannel(OV5640_Object_t *pObj, uint32_t vchannel)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  int32_t ret = OV5640_OK;
 80049de:	2300      	movs	r3, #0
 80049e0:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if (ov5640_read_reg(&pObj->Ctx, 0x4814, &tmp, 1) != OV5640_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f103 0018 	add.w	r0, r3, #24
 80049e8:	f107 020b 	add.w	r2, r7, #11
 80049ec:	2301      	movs	r3, #1
 80049ee:	f644 0114 	movw	r1, #18452	@ 0x4814
 80049f2:	f000 f875 	bl	8004ae0 <ov5640_read_reg>
 80049f6:	4603      	mov	r3, r0
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d003      	beq.n	8004a04 <OV5640_SetMIPIVirtualChannel+0x30>
  {
    ret = OV5640_ERROR;
 80049fc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a00:	60fb      	str	r3, [r7, #12]
 8004a02:	e01c      	b.n	8004a3e <OV5640_SetMIPIVirtualChannel+0x6a>
  }
  else
  {
    tmp &= ~(3 << 6);
 8004a04:	7afb      	ldrb	r3, [r7, #11]
 8004a06:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a0a:	b2db      	uxtb	r3, r3
 8004a0c:	72fb      	strb	r3, [r7, #11]
    tmp |= (vchannel << 6);
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	b2db      	uxtb	r3, r3
 8004a12:	019b      	lsls	r3, r3, #6
 8004a14:	b2da      	uxtb	r2, r3
 8004a16:	7afb      	ldrb	r3, [r7, #11]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	b2db      	uxtb	r3, r3
 8004a1c:	72fb      	strb	r3, [r7, #11]
    if (ov5640_write_reg(&pObj->Ctx, 0x4814, &tmp, 1) != OV5640_OK)
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	f103 0018 	add.w	r0, r3, #24
 8004a24:	f107 020b 	add.w	r2, r7, #11
 8004a28:	2301      	movs	r3, #1
 8004a2a:	f644 0114 	movw	r1, #18452	@ 0x4814
 8004a2e:	f000 f86e 	bl	8004b0e <ov5640_write_reg>
 8004a32:	4603      	mov	r3, r0
 8004a34:	2b00      	cmp	r3, #0
 8004a36:	d002      	beq.n	8004a3e <OV5640_SetMIPIVirtualChannel+0x6a>
    {
      ret = OV5640_ERROR;
 8004a38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a3c:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
}
 8004a40:	4618      	mov	r0, r3
 8004a42:	3710      	adds	r7, #16
 8004a44:	46bd      	mov	sp, r7
 8004a46:	bd80      	pop	{r7, pc}

08004a48 <OV5640_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV5640_OK
  */
static int32_t OV5640_Delay(OV5640_Object_t *pObj, uint32_t Delay)
{
 8004a48:	b580      	push	{r7, lr}
 8004a4a:	b084      	sub	sp, #16
 8004a4c:	af00      	add	r7, sp, #0
 8004a4e:	6078      	str	r0, [r7, #4]
 8004a50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	695b      	ldr	r3, [r3, #20]
 8004a56:	4798      	blx	r3
 8004a58:	4603      	mov	r3, r0
 8004a5a:	60fb      	str	r3, [r7, #12]
  while ((pObj->IO.GetTick() - tickstart) < Delay)
 8004a5c:	bf00      	nop
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695b      	ldr	r3, [r3, #20]
 8004a62:	4798      	blx	r3
 8004a64:	4603      	mov	r3, r0
 8004a66:	461a      	mov	r2, r3
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	1ad3      	subs	r3, r2, r3
 8004a6c:	683a      	ldr	r2, [r7, #0]
 8004a6e:	429a      	cmp	r2, r3
 8004a70:	d8f5      	bhi.n	8004a5e <OV5640_Delay+0x16>
  {
  }
  return OV5640_OK;
 8004a72:	2300      	movs	r3, #0
}
 8004a74:	4618      	mov	r0, r3
 8004a76:	3710      	adds	r7, #16
 8004a78:	46bd      	mov	sp, r7
 8004a7a:	bd80      	pop	{r7, pc}

08004a7c <OV5640_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_ReadRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004a7c:	b590      	push	{r4, r7, lr}
 8004a7e:	b087      	sub	sp, #28
 8004a80:	af00      	add	r7, sp, #0
 8004a82:	60f8      	str	r0, [r7, #12]
 8004a84:	607a      	str	r2, [r7, #4]
 8004a86:	461a      	mov	r2, r3
 8004a88:	460b      	mov	r3, r1
 8004a8a:	817b      	strh	r3, [r7, #10]
 8004a8c:	4613      	mov	r3, r2
 8004a8e:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8004a94:	697b      	ldr	r3, [r7, #20]
 8004a96:	691c      	ldr	r4, [r3, #16]
 8004a98:	697b      	ldr	r3, [r7, #20]
 8004a9a:	8918      	ldrh	r0, [r3, #8]
 8004a9c:	893b      	ldrh	r3, [r7, #8]
 8004a9e:	8979      	ldrh	r1, [r7, #10]
 8004aa0:	687a      	ldr	r2, [r7, #4]
 8004aa2:	47a0      	blx	r4
 8004aa4:	4603      	mov	r3, r0
}
 8004aa6:	4618      	mov	r0, r3
 8004aa8:	371c      	adds	r7, #28
 8004aaa:	46bd      	mov	sp, r7
 8004aac:	bd90      	pop	{r4, r7, pc}

08004aae <OV5640_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV5640_WriteRegWrap(void *handle, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 8004aae:	b590      	push	{r4, r7, lr}
 8004ab0:	b087      	sub	sp, #28
 8004ab2:	af00      	add	r7, sp, #0
 8004ab4:	60f8      	str	r0, [r7, #12]
 8004ab6:	607a      	str	r2, [r7, #4]
 8004ab8:	461a      	mov	r2, r3
 8004aba:	460b      	mov	r3, r1
 8004abc:	817b      	strh	r3, [r7, #10]
 8004abe:	4613      	mov	r3, r2
 8004ac0:	813b      	strh	r3, [r7, #8]
  OV5640_Object_t *pObj = (OV5640_Object_t *)handle;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8004ac6:	697b      	ldr	r3, [r7, #20]
 8004ac8:	68dc      	ldr	r4, [r3, #12]
 8004aca:	697b      	ldr	r3, [r7, #20]
 8004acc:	8918      	ldrh	r0, [r3, #8]
 8004ace:	893b      	ldrh	r3, [r7, #8]
 8004ad0:	8979      	ldrh	r1, [r7, #10]
 8004ad2:	687a      	ldr	r2, [r7, #4]
 8004ad4:	47a0      	blx	r4
 8004ad6:	4603      	mov	r3, r0
}
 8004ad8:	4618      	mov	r0, r3
 8004ada:	371c      	adds	r7, #28
 8004adc:	46bd      	mov	sp, r7
 8004ade:	bd90      	pop	{r4, r7, pc}

08004ae0 <ov5640_read_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to read
  * @retval Component status
  */
int32_t ov5640_read_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8004ae0:	b590      	push	{r4, r7, lr}
 8004ae2:	b085      	sub	sp, #20
 8004ae4:	af00      	add	r7, sp, #0
 8004ae6:	60f8      	str	r0, [r7, #12]
 8004ae8:	607a      	str	r2, [r7, #4]
 8004aea:	461a      	mov	r2, r3
 8004aec:	460b      	mov	r3, r1
 8004aee:	817b      	strh	r3, [r7, #10]
 8004af0:	4613      	mov	r3, r2
 8004af2:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	685c      	ldr	r4, [r3, #4]
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6898      	ldr	r0, [r3, #8]
 8004afc:	893b      	ldrh	r3, [r7, #8]
 8004afe:	8979      	ldrh	r1, [r7, #10]
 8004b00:	687a      	ldr	r2, [r7, #4]
 8004b02:	47a0      	blx	r4
 8004b04:	4603      	mov	r3, r0
}
 8004b06:	4618      	mov	r0, r3
 8004b08:	3714      	adds	r7, #20
 8004b0a:	46bd      	mov	sp, r7
 8004b0c:	bd90      	pop	{r4, r7, pc}

08004b0e <ov5640_write_reg>:
  * @param  pdata Pointer to data buffer
  * @param  length Number of data to write
  * @retval Component status
  */
int32_t ov5640_write_reg(ov5640_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8004b0e:	b590      	push	{r4, r7, lr}
 8004b10:	b085      	sub	sp, #20
 8004b12:	af00      	add	r7, sp, #0
 8004b14:	60f8      	str	r0, [r7, #12]
 8004b16:	607a      	str	r2, [r7, #4]
 8004b18:	461a      	mov	r2, r3
 8004b1a:	460b      	mov	r3, r1
 8004b1c:	817b      	strh	r3, [r7, #10]
 8004b1e:	4613      	mov	r3, r2
 8004b20:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	681c      	ldr	r4, [r3, #0]
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6898      	ldr	r0, [r3, #8]
 8004b2a:	893b      	ldrh	r3, [r7, #8]
 8004b2c:	8979      	ldrh	r1, [r7, #10]
 8004b2e:	687a      	ldr	r2, [r7, #4]
 8004b30:	47a0      	blx	r4
 8004b32:	4603      	mov	r3, r0
}
 8004b34:	4618      	mov	r0, r3
 8004b36:	3714      	adds	r7, #20
 8004b38:	46bd      	mov	sp, r7
 8004b3a:	bd90      	pop	{r4, r7, pc}

08004b3c <OV9655_RegisterBusIO>:
  * @brief  Register component IO bus
  * @param  Component object pointer
  * @retval Component status
  */
int32_t OV9655_RegisterBusIO (OV9655_Object_t *pObj, OV9655_IO_t *pIO)
{
 8004b3c:	b580      	push	{r7, lr}
 8004b3e:	b084      	sub	sp, #16
 8004b40:	af00      	add	r7, sp, #0
 8004b42:	6078      	str	r0, [r7, #4]
 8004b44:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if (pObj == NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	d103      	bne.n	8004b54 <OV9655_RegisterBusIO+0x18>
  {
    ret = OV9655_ERROR;
 8004b4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004b50:	60fb      	str	r3, [r7, #12]
 8004b52:	e02c      	b.n	8004bae <OV9655_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	681a      	ldr	r2, [r3, #0]
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 8004b5c:	683b      	ldr	r3, [r7, #0]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 8004b64:	683b      	ldr	r3, [r7, #0]
 8004b66:	891a      	ldrh	r2, [r3, #8]
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 8004b6c:	683b      	ldr	r3, [r7, #0]
 8004b6e:	68da      	ldr	r2, [r3, #12]
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	691a      	ldr	r2, [r3, #16]
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 8004b7c:	683b      	ldr	r3, [r7, #0]
 8004b7e:	695a      	ldr	r2, [r3, #20]
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	615a      	str	r2, [r3, #20]

    pObj->Ctx.ReadReg  = OV9655_ReadRegWrap;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	4a0c      	ldr	r2, [pc, #48]	@ (8004bb8 <OV9655_RegisterBusIO+0x7c>)
 8004b88:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = OV9655_WriteRegWrap;
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	4a0b      	ldr	r2, [pc, #44]	@ (8004bbc <OV9655_RegisterBusIO+0x80>)
 8004b8e:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	687a      	ldr	r2, [r7, #4]
 8004b94:	621a      	str	r2, [r3, #32]

    if(pObj->IO.Init != NULL)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d004      	beq.n	8004ba8 <OV9655_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	4798      	blx	r3
 8004ba4:	60f8      	str	r0, [r7, #12]
 8004ba6:	e002      	b.n	8004bae <OV9655_RegisterBusIO+0x72>
    }
    else
    {
      ret = OV9655_ERROR;
 8004ba8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bac:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8004bae:	68fb      	ldr	r3, [r7, #12]
}
 8004bb0:	4618      	mov	r0, r3
 8004bb2:	3710      	adds	r7, #16
 8004bb4:	46bd      	mov	sp, r7
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	080059c1 	.word	0x080059c1
 8004bbc:	080059f3 	.word	0x080059f3

08004bc0 <OV9655_Init>:
  * @param  Resolution  Camera resolution
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV9655_Init(OV9655_Object_t *pObj, uint32_t Resolution, uint32_t PixelFormat)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b086      	sub	sp, #24
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	60f8      	str	r0, [r7, #12]
 8004bc8:	60b9      	str	r1, [r7, #8]
 8004bca:	607a      	str	r2, [r7, #4]
  int32_t ret = OV9655_OK;
 8004bcc:	2300      	movs	r3, #0
 8004bce:	617b      	str	r3, [r7, #20]
  uint8_t tmp;

  if(pObj->IsInitialized == 0U)
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d13c      	bne.n	8004c54 <OV9655_Init+0x94>
  {
    /* Check if resolution is supported */
    if((Resolution > OV9655_R640x480) || ((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422)))
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	2b03      	cmp	r3, #3
 8004bde:	d805      	bhi.n	8004bec <OV9655_Init+0x2c>
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	2b00      	cmp	r3, #0
 8004be4:	d006      	beq.n	8004bf4 <OV9655_Init+0x34>
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	2b02      	cmp	r3, #2
 8004bea:	d003      	beq.n	8004bf4 <OV9655_Init+0x34>
    {
      ret = OV9655_ERROR;
 8004bec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004bf0:	617b      	str	r3, [r7, #20]
 8004bf2:	e02f      	b.n	8004c54 <OV9655_Init+0x94>
    }
    else
    {
      tmp = 0x80U;
 8004bf4:	2380      	movs	r3, #128	@ 0x80
 8004bf6:	74fb      	strb	r3, [r7, #19]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	f103 0018 	add.w	r0, r3, #24
 8004bfe:	f107 0213 	add.w	r2, r7, #19
 8004c02:	2301      	movs	r3, #1
 8004c04:	2112      	movs	r1, #18
 8004c06:	f000 ff24 	bl	8005a52 <ov9655_write_reg>
 8004c0a:	4603      	mov	r3, r0
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d003      	beq.n	8004c18 <OV9655_Init+0x58>
      {
        ret = OV9655_ERROR;
 8004c10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c14:	617b      	str	r3, [r7, #20]
 8004c16:	e01d      	b.n	8004c54 <OV9655_Init+0x94>
      }

      else
      {
        OV9655_Delay(pObj, 200);
 8004c18:	21c8      	movs	r1, #200	@ 0xc8
 8004c1a:	68f8      	ldr	r0, [r7, #12]
 8004c1c:	f000 feb6 	bl	800598c <OV9655_Delay>
        /* Set specific parameters for each resolution */
        if(OV9655_SetResolution(pObj, Resolution)!= OV9655_OK)
 8004c20:	68b9      	ldr	r1, [r7, #8]
 8004c22:	68f8      	ldr	r0, [r7, #12]
 8004c24:	f000 f910 	bl	8004e48 <OV9655_SetResolution>
 8004c28:	4603      	mov	r3, r0
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d003      	beq.n	8004c36 <OV9655_Init+0x76>
        {
          ret = OV9655_ERROR;
 8004c2e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c32:	617b      	str	r3, [r7, #20]
 8004c34:	e00e      	b.n	8004c54 <OV9655_Init+0x94>
        }/* Set specific parameters for each pixel format */
        else if(OV9655_SetPixelFormat(pObj, PixelFormat)!= OV9655_OK)
 8004c36:	6879      	ldr	r1, [r7, #4]
 8004c38:	68f8      	ldr	r0, [r7, #12]
 8004c3a:	f000 f824 	bl	8004c86 <OV9655_SetPixelFormat>
 8004c3e:	4603      	mov	r3, r0
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d003      	beq.n	8004c4c <OV9655_Init+0x8c>
        {
          ret = OV9655_ERROR;
 8004c44:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004c48:	617b      	str	r3, [r7, #20]
 8004c4a:	e003      	b.n	8004c54 <OV9655_Init+0x94>
        }
        else
        {
          pObj->IsInitialized = 1U;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2201      	movs	r2, #1
 8004c50:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
        }
      }
    }
  }

  return ret;
 8004c54:	697b      	ldr	r3, [r7, #20]
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3718      	adds	r7, #24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bd80      	pop	{r7, pc}

08004c5e <OV9655_DeInit>:
  * @brief  De-initializes the camera sensor.
  * @param  pObj  pointer to component object
  * @retval Component status
  */
int32_t OV9655_DeInit(OV9655_Object_t *pObj)
{
 8004c5e:	b480      	push	{r7}
 8004c60:	b083      	sub	sp, #12
 8004c62:	af00      	add	r7, sp, #0
 8004c64:	6078      	str	r0, [r7, #4]
  if(pObj->IsInitialized == 1U)
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d103      	bne.n	8004c78 <OV9655_DeInit+0x1a>
  {
    pObj->IsInitialized = 0U;
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	2200      	movs	r2, #0
 8004c74:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }

  return OV9655_OK;
 8004c78:	2300      	movs	r3, #0
}
 8004c7a:	4618      	mov	r0, r3
 8004c7c:	370c      	adds	r7, #12
 8004c7e:	46bd      	mov	sp, r7
 8004c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c84:	4770      	bx	lr

08004c86 <OV9655_SetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV9655_SetPixelFormat(OV9655_Object_t *pObj, uint32_t PixelFormat)
{
 8004c86:	b580      	push	{r7, lr}
 8004c88:	b084      	sub	sp, #16
 8004c8a:	af00      	add	r7, sp, #0
 8004c8c:	6078      	str	r0, [r7, #4]
 8004c8e:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 8004c90:	2300      	movs	r3, #0
 8004c92:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  /* Check if PixelFormat is supported */
  if((PixelFormat != OV9655_RGB565) && (PixelFormat != OV9655_YUV422))
 8004c94:	683b      	ldr	r3, [r7, #0]
 8004c96:	2b00      	cmp	r3, #0
 8004c98:	d006      	beq.n	8004ca8 <OV9655_SetPixelFormat+0x22>
 8004c9a:	683b      	ldr	r3, [r7, #0]
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d003      	beq.n	8004ca8 <OV9655_SetPixelFormat+0x22>
  {
    /* Pixel format not supported */
    ret = OV9655_ERROR;
 8004ca0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ca4:	60fb      	str	r3, [r7, #12]
 8004ca6:	e0bd      	b.n	8004e24 <OV9655_SetPixelFormat+0x19e>
  }
  else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	f103 0018 	add.w	r0, r3, #24
 8004cae:	f107 020b 	add.w	r2, r7, #11
 8004cb2:	2301      	movs	r3, #1
 8004cb4:	2112      	movs	r1, #18
 8004cb6:	f000 feb5 	bl	8005a24 <ov9655_read_reg>
 8004cba:	4603      	mov	r3, r0
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d003      	beq.n	8004cc8 <OV9655_SetPixelFormat+0x42>
  {
    ret = OV9655_ERROR;
 8004cc0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cc4:	60fb      	str	r3, [r7, #12]
 8004cc6:	e0ad      	b.n	8004e24 <OV9655_SetPixelFormat+0x19e>
  }
  else
  {
    /* Set specific parameters for each PixelFormat */
    tmp &= ~0x03U; /* Reset Bit[0:1] corresponding to pixel format selection */
 8004cc8:	7afb      	ldrb	r3, [r7, #11]
 8004cca:	f023 0303 	bic.w	r3, r3, #3
 8004cce:	b2db      	uxtb	r3, r3
 8004cd0:	72fb      	strb	r3, [r7, #11]

    switch (PixelFormat)
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	2b02      	cmp	r3, #2
 8004cd6:	d168      	bne.n	8004daa <OV9655_SetPixelFormat+0x124>
    {
    case OV9655_YUV422:
      tmp |= 0x02U;
 8004cd8:	7afb      	ldrb	r3, [r7, #11]
 8004cda:	f043 0302 	orr.w	r3, r3, #2
 8004cde:	b2db      	uxtb	r3, r3
 8004ce0:	72fb      	strb	r3, [r7, #11]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	f103 0018 	add.w	r0, r3, #24
 8004ce8:	f107 020b 	add.w	r2, r7, #11
 8004cec:	2301      	movs	r3, #1
 8004cee:	2112      	movs	r1, #18
 8004cf0:	f000 feaf 	bl	8005a52 <ov9655_write_reg>
 8004cf4:	4603      	mov	r3, r0
 8004cf6:	2b00      	cmp	r3, #0
 8004cf8:	d003      	beq.n	8004d02 <OV9655_SetPixelFormat+0x7c>
      {
        ret = OV9655_ERROR;
 8004cfa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004cfe:	60fb      	str	r3, [r7, #12]
              ret = OV9655_ERROR;
            }
          }
        }
      }
      break;
 8004d00:	e08d      	b.n	8004e1e <OV9655_SetPixelFormat+0x198>
        if(ov9655_read_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	f103 0018 	add.w	r0, r3, #24
 8004d08:	f107 020b 	add.w	r2, r7, #11
 8004d0c:	2301      	movs	r3, #1
 8004d0e:	213a      	movs	r1, #58	@ 0x3a
 8004d10:	f000 fe88 	bl	8005a24 <ov9655_read_reg>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d003      	beq.n	8004d22 <OV9655_SetPixelFormat+0x9c>
          ret = OV9655_ERROR;
 8004d1a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d1e:	60fb      	str	r3, [r7, #12]
      break;
 8004d20:	e07d      	b.n	8004e1e <OV9655_SetPixelFormat+0x198>
          tmp &= ~(1 << 5); /* Clear bit 5: Output bit-wise reverse */
 8004d22:	7afb      	ldrb	r3, [r7, #11]
 8004d24:	f023 0320 	bic.w	r3, r3, #32
 8004d28:	b2db      	uxtb	r3, r3
 8004d2a:	72fb      	strb	r3, [r7, #11]
          tmp &= ~(3 << 2); /* Clear bits 3:2: YUV output sequence is 0:yuyv */
 8004d2c:	7afb      	ldrb	r3, [r7, #11]
 8004d2e:	f023 030c 	bic.w	r3, r3, #12
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	72fb      	strb	r3, [r7, #11]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1) != OV9655_OK)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	f103 0018 	add.w	r0, r3, #24
 8004d3c:	f107 020b 	add.w	r2, r7, #11
 8004d40:	2301      	movs	r3, #1
 8004d42:	213a      	movs	r1, #58	@ 0x3a
 8004d44:	f000 fe85 	bl	8005a52 <ov9655_write_reg>
 8004d48:	4603      	mov	r3, r0
 8004d4a:	2b00      	cmp	r3, #0
 8004d4c:	d003      	beq.n	8004d56 <OV9655_SetPixelFormat+0xd0>
            ret = OV9655_ERROR;
 8004d4e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d52:	60fb      	str	r3, [r7, #12]
      break;
 8004d54:	e063      	b.n	8004e1e <OV9655_SetPixelFormat+0x198>
            if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f103 0018 	add.w	r0, r3, #24
 8004d5c:	f107 020b 	add.w	r2, r7, #11
 8004d60:	2301      	movs	r3, #1
 8004d62:	2140      	movs	r1, #64	@ 0x40
 8004d64:	f000 fe5e 	bl	8005a24 <ov9655_read_reg>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d003      	beq.n	8004d76 <OV9655_SetPixelFormat+0xf0>
              ret = OV9655_ERROR;
 8004d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004d72:	60fb      	str	r3, [r7, #12]
 8004d74:	e009      	b.n	8004d8a <OV9655_SetPixelFormat+0x104>
                tmp |=  (3 << 6); /* Data format - output full range enable 3: [00] to [FF] */
 8004d76:	7afb      	ldrb	r3, [r7, #11]
 8004d78:	f063 033f 	orn	r3, r3, #63	@ 0x3f
 8004d7c:	b2db      	uxtb	r3, r3
 8004d7e:	72fb      	strb	r3, [r7, #11]
                tmp &= ~(3 << 4); /* Clear bits 5:4: RGB 555/565 option */
 8004d80:	7afb      	ldrb	r3, [r7, #11]
 8004d82:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 8004d86:	b2db      	uxtb	r3, r3
 8004d88:	72fb      	strb	r3, [r7, #11]
            if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	f103 0018 	add.w	r0, r3, #24
 8004d90:	f107 020b 	add.w	r2, r7, #11
 8004d94:	2301      	movs	r3, #1
 8004d96:	2140      	movs	r1, #64	@ 0x40
 8004d98:	f000 fe5b 	bl	8005a52 <ov9655_write_reg>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d03d      	beq.n	8004e1e <OV9655_SetPixelFormat+0x198>
              ret = OV9655_ERROR;
 8004da2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004da6:	60fb      	str	r3, [r7, #12]
      break;
 8004da8:	e039      	b.n	8004e1e <OV9655_SetPixelFormat+0x198>
    case OV9655_RGB565:
    default:
      tmp |= 0x03U;
 8004daa:	7afb      	ldrb	r3, [r7, #11]
 8004dac:	f043 0303 	orr.w	r3, r3, #3
 8004db0:	b2db      	uxtb	r3, r3
 8004db2:	72fb      	strb	r3, [r7, #11]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL7, &tmp, 1) != OV9655_OK)
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	f103 0018 	add.w	r0, r3, #24
 8004dba:	f107 020b 	add.w	r2, r7, #11
 8004dbe:	2301      	movs	r3, #1
 8004dc0:	2112      	movs	r1, #18
 8004dc2:	f000 fe46 	bl	8005a52 <ov9655_write_reg>
 8004dc6:	4603      	mov	r3, r0
 8004dc8:	2b00      	cmp	r3, #0
 8004dca:	d003      	beq.n	8004dd4 <OV9655_SetPixelFormat+0x14e>
      {
        ret = OV9655_ERROR;
 8004dcc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004dd0:	60fb      	str	r3, [r7, #12]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
        {
          ret = OV9655_ERROR;
        }
      }
      break;
 8004dd2:	e026      	b.n	8004e22 <OV9655_SetPixelFormat+0x19c>
      else if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	f103 0018 	add.w	r0, r3, #24
 8004dda:	f107 020b 	add.w	r2, r7, #11
 8004dde:	2301      	movs	r3, #1
 8004de0:	2140      	movs	r1, #64	@ 0x40
 8004de2:	f000 fe1f 	bl	8005a24 <ov9655_read_reg>
 8004de6:	4603      	mov	r3, r0
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	d003      	beq.n	8004df4 <OV9655_SetPixelFormat+0x16e>
        ret = OV9655_ERROR;
 8004dec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004df0:	60fb      	str	r3, [r7, #12]
      break;
 8004df2:	e016      	b.n	8004e22 <OV9655_SetPixelFormat+0x19c>
        tmp |= 0x10U;
 8004df4:	7afb      	ldrb	r3, [r7, #11]
 8004df6:	f043 0310 	orr.w	r3, r3, #16
 8004dfa:	b2db      	uxtb	r3, r3
 8004dfc:	72fb      	strb	r3, [r7, #11]
        if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL15, &tmp, 1) != OV9655_OK)
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	f103 0018 	add.w	r0, r3, #24
 8004e04:	f107 020b 	add.w	r2, r7, #11
 8004e08:	2301      	movs	r3, #1
 8004e0a:	2140      	movs	r1, #64	@ 0x40
 8004e0c:	f000 fe21 	bl	8005a52 <ov9655_write_reg>
 8004e10:	4603      	mov	r3, r0
 8004e12:	2b00      	cmp	r3, #0
 8004e14:	d005      	beq.n	8004e22 <OV9655_SetPixelFormat+0x19c>
          ret = OV9655_ERROR;
 8004e16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e1a:	60fb      	str	r3, [r7, #12]
      break;
 8004e1c:	e001      	b.n	8004e22 <OV9655_SetPixelFormat+0x19c>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e000      	b.n	8004e24 <OV9655_SetPixelFormat+0x19e>
      break;
 8004e22:	bf00      	nop
    }
  }

  return ret;
 8004e24:	68fb      	ldr	r3, [r7, #12]
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3710      	adds	r7, #16
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}

08004e2e <OV9655_GetPixelFormat>:
  * @param  pObj  pointer to component object
  * @param  PixelFormat pixel format to be configured
  * @retval Component status
  */
int32_t OV9655_GetPixelFormat(OV9655_Object_t *pObj, uint32_t *PixelFormat)
{
 8004e2e:	b480      	push	{r7}
 8004e30:	b083      	sub	sp, #12
 8004e32:	af00      	add	r7, sp, #0
 8004e34:	6078      	str	r0, [r7, #4]
 8004e36:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(PixelFormat);

  return OV9655_ERROR;
 8004e38:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	370c      	adds	r7, #12
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <OV9655_SetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV9655_SetResolution(OV9655_Object_t *pObj, uint32_t Resolution)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b086      	sub	sp, #24
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 8004e52:	2300      	movs	r3, #0
 8004e54:	617b      	str	r3, [r7, #20]
    {0x73, 0x02},
    {0xc7, 0x82},
  };

  /* Check if resolution is supported */
  if (Resolution > OV9655_R640x480)
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	2b03      	cmp	r3, #3
 8004e5a:	d903      	bls.n	8004e64 <OV9655_SetResolution+0x1c>
  {
    ret = OV9655_ERROR;
 8004e5c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004e60:	617b      	str	r3, [r7, #20]
 8004e62:	e0e7      	b.n	8005034 <OV9655_SetResolution+0x1ec>
  }
  else
  {
    /* Initialize OV9655 */
    switch (Resolution)
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b03      	cmp	r3, #3
 8004e68:	f200 80e0 	bhi.w	800502c <OV9655_SetResolution+0x1e4>
 8004e6c:	683b      	ldr	r3, [r7, #0]
 8004e6e:	2b02      	cmp	r3, #2
 8004e70:	f080 80b1 	bcs.w	8004fd6 <OV9655_SetResolution+0x18e>
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d003      	beq.n	8004e82 <OV9655_SetResolution+0x3a>
 8004e7a:	683b      	ldr	r3, [r7, #0]
 8004e7c:	2b01      	cmp	r3, #1
 8004e7e:	d055      	beq.n	8004f2c <OV9655_SetResolution+0xe4>
 8004e80:	e0d4      	b.n	800502c <OV9655_SetResolution+0x1e4>
    {
    case OV9655_R160x120:
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8004e82:	2300      	movs	r3, #0
 8004e84:	613b      	str	r3, [r7, #16]
 8004e86:	e023      	b.n	8004ed0 <OV9655_SetResolution+0x88>
      {
        if(ret != OV9655_ERROR)
 8004e88:	697b      	ldr	r3, [r7, #20]
 8004e8a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004e8e:	d01c      	beq.n	8004eca <OV9655_SetResolution+0x82>
        {
          tmp = OV9655_QVGA_QQVGA[index][1];
 8004e90:	4a6b      	ldr	r2, [pc, #428]	@ (8005040 <OV9655_SetResolution+0x1f8>)
 8004e92:	693b      	ldr	r3, [r7, #16]
 8004e94:	005b      	lsls	r3, r3, #1
 8004e96:	4413      	add	r3, r2
 8004e98:	785b      	ldrb	r3, [r3, #1]
 8004e9a:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f103 0018 	add.w	r0, r3, #24
 8004ea2:	4a67      	ldr	r2, [pc, #412]	@ (8005040 <OV9655_SetResolution+0x1f8>)
 8004ea4:	693b      	ldr	r3, [r7, #16]
 8004ea6:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004eaa:	4619      	mov	r1, r3
 8004eac:	f107 020f 	add.w	r2, r7, #15
 8004eb0:	2301      	movs	r3, #1
 8004eb2:	f000 fdce 	bl	8005a52 <ov9655_write_reg>
 8004eb6:	4603      	mov	r3, r0
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d002      	beq.n	8004ec2 <OV9655_SetResolution+0x7a>
          {
            ret = OV9655_ERROR;
 8004ebc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004ec0:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8004ec2:	2102      	movs	r1, #2
 8004ec4:	6878      	ldr	r0, [r7, #4]
 8004ec6:	f000 fd61 	bl	800598c <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	613b      	str	r3, [r7, #16]
 8004ed0:	693b      	ldr	r3, [r7, #16]
 8004ed2:	2b90      	cmp	r3, #144	@ 0x90
 8004ed4:	d9d8      	bls.n	8004e88 <OV9655_SetResolution+0x40>
        }
      }
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	613b      	str	r3, [r7, #16]
 8004eda:	e023      	b.n	8004f24 <OV9655_SetResolution+0xdc>
      {
        if(ret != OV9655_ERROR)
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ee2:	d01c      	beq.n	8004f1e <OV9655_SetResolution+0xd6>
        {
          tmp = OV9655_QQVGA[index][1];
 8004ee4:	4a57      	ldr	r2, [pc, #348]	@ (8005044 <OV9655_SetResolution+0x1fc>)
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	005b      	lsls	r3, r3, #1
 8004eea:	4413      	add	r3, r2
 8004eec:	785b      	ldrb	r3, [r3, #1]
 8004eee:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	f103 0018 	add.w	r0, r3, #24
 8004ef6:	4a53      	ldr	r2, [pc, #332]	@ (8005044 <OV9655_SetResolution+0x1fc>)
 8004ef8:	693b      	ldr	r3, [r7, #16]
 8004efa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004efe:	4619      	mov	r1, r3
 8004f00:	f107 020f 	add.w	r2, r7, #15
 8004f04:	2301      	movs	r3, #1
 8004f06:	f000 fda4 	bl	8005a52 <ov9655_write_reg>
 8004f0a:	4603      	mov	r3, r0
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d002      	beq.n	8004f16 <OV9655_SetResolution+0xce>
          {
            ret = OV9655_ERROR;
 8004f10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f14:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8004f16:	2102      	movs	r1, #2
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 fd37 	bl	800598c <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_QQVGA)/2U); index++)
 8004f1e:	693b      	ldr	r3, [r7, #16]
 8004f20:	3301      	adds	r3, #1
 8004f22:	613b      	str	r3, [r7, #16]
 8004f24:	693b      	ldr	r3, [r7, #16]
 8004f26:	2b04      	cmp	r3, #4
 8004f28:	d9d8      	bls.n	8004edc <OV9655_SetResolution+0x94>
        }
      }
      break;
 8004f2a:	e083      	b.n	8005034 <OV9655_SetResolution+0x1ec>
    case OV9655_R320x240:
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8004f2c:	2300      	movs	r3, #0
 8004f2e:	613b      	str	r3, [r7, #16]
 8004f30:	e023      	b.n	8004f7a <OV9655_SetResolution+0x132>
      {
        if(ret != OV9655_ERROR)
 8004f32:	697b      	ldr	r3, [r7, #20]
 8004f34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f38:	d01c      	beq.n	8004f74 <OV9655_SetResolution+0x12c>
        {
          tmp = OV9655_QVGA_QQVGA[index][1];
 8004f3a:	4a41      	ldr	r2, [pc, #260]	@ (8005040 <OV9655_SetResolution+0x1f8>)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	005b      	lsls	r3, r3, #1
 8004f40:	4413      	add	r3, r2
 8004f42:	785b      	ldrb	r3, [r3, #1]
 8004f44:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA_QQVGA[index][0], &tmp, 1) != OV9655_OK)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f103 0018 	add.w	r0, r3, #24
 8004f4c:	4a3c      	ldr	r2, [pc, #240]	@ (8005040 <OV9655_SetResolution+0x1f8>)
 8004f4e:	693b      	ldr	r3, [r7, #16]
 8004f50:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004f54:	4619      	mov	r1, r3
 8004f56:	f107 020f 	add.w	r2, r7, #15
 8004f5a:	2301      	movs	r3, #1
 8004f5c:	f000 fd79 	bl	8005a52 <ov9655_write_reg>
 8004f60:	4603      	mov	r3, r0
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d002      	beq.n	8004f6c <OV9655_SetResolution+0x124>
          {
            ret = OV9655_ERROR;
 8004f66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004f6a:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8004f6c:	2102      	movs	r1, #2
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 fd0c 	bl	800598c <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_QVGA_QQVGA)/2U); index++)
 8004f74:	693b      	ldr	r3, [r7, #16]
 8004f76:	3301      	adds	r3, #1
 8004f78:	613b      	str	r3, [r7, #16]
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	2b90      	cmp	r3, #144	@ 0x90
 8004f7e:	d9d8      	bls.n	8004f32 <OV9655_SetResolution+0xea>
        }
      }
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8004f80:	2300      	movs	r3, #0
 8004f82:	613b      	str	r3, [r7, #16]
 8004f84:	e023      	b.n	8004fce <OV9655_SetResolution+0x186>
      {
        if(ret != OV9655_ERROR)
 8004f86:	697b      	ldr	r3, [r7, #20]
 8004f88:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004f8c:	d01c      	beq.n	8004fc8 <OV9655_SetResolution+0x180>
        {
          tmp = OV9655_QVGA[index][1];
 8004f8e:	4a2e      	ldr	r2, [pc, #184]	@ (8005048 <OV9655_SetResolution+0x200>)
 8004f90:	693b      	ldr	r3, [r7, #16]
 8004f92:	005b      	lsls	r3, r3, #1
 8004f94:	4413      	add	r3, r2
 8004f96:	785b      	ldrb	r3, [r3, #1]
 8004f98:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_QVGA[index][0], &tmp, 1) != OV9655_OK)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f103 0018 	add.w	r0, r3, #24
 8004fa0:	4a29      	ldr	r2, [pc, #164]	@ (8005048 <OV9655_SetResolution+0x200>)
 8004fa2:	693b      	ldr	r3, [r7, #16]
 8004fa4:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004fa8:	4619      	mov	r1, r3
 8004faa:	f107 020f 	add.w	r2, r7, #15
 8004fae:	2301      	movs	r3, #1
 8004fb0:	f000 fd4f 	bl	8005a52 <ov9655_write_reg>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d002      	beq.n	8004fc0 <OV9655_SetResolution+0x178>
          {
            ret = OV9655_ERROR;
 8004fba:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004fbe:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8004fc0:	2102      	movs	r1, #2
 8004fc2:	6878      	ldr	r0, [r7, #4]
 8004fc4:	f000 fce2 	bl	800598c <OV9655_Delay>
      for(index=0; index< (sizeof(OV9655_QVGA)/2U); index++)
 8004fc8:	693b      	ldr	r3, [r7, #16]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	613b      	str	r3, [r7, #16]
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	2b04      	cmp	r3, #4
 8004fd2:	d9d8      	bls.n	8004f86 <OV9655_SetResolution+0x13e>
        }
      }
      break;
 8004fd4:	e02e      	b.n	8005034 <OV9655_SetResolution+0x1ec>
    case OV9655_R480x272:
    case OV9655_R640x480:
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 8004fd6:	2300      	movs	r3, #0
 8004fd8:	613b      	str	r3, [r7, #16]
 8004fda:	e023      	b.n	8005024 <OV9655_SetResolution+0x1dc>
      {
        if(ret != OV9655_ERROR)
 8004fdc:	697b      	ldr	r3, [r7, #20]
 8004fde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004fe2:	d01c      	beq.n	800501e <OV9655_SetResolution+0x1d6>
        {
          tmp = OV9655_VGA[index][1];
 8004fe4:	4a19      	ldr	r2, [pc, #100]	@ (800504c <OV9655_SetResolution+0x204>)
 8004fe6:	693b      	ldr	r3, [r7, #16]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	4413      	add	r3, r2
 8004fec:	785b      	ldrb	r3, [r3, #1]
 8004fee:	73fb      	strb	r3, [r7, #15]
          if(ov9655_write_reg(&pObj->Ctx, OV9655_VGA[index][0], &tmp, 1) != OV9655_OK)
 8004ff0:	687b      	ldr	r3, [r7, #4]
 8004ff2:	f103 0018 	add.w	r0, r3, #24
 8004ff6:	4a15      	ldr	r2, [pc, #84]	@ (800504c <OV9655_SetResolution+0x204>)
 8004ff8:	693b      	ldr	r3, [r7, #16]
 8004ffa:	f812 3013 	ldrb.w	r3, [r2, r3, lsl #1]
 8004ffe:	4619      	mov	r1, r3
 8005000:	f107 020f 	add.w	r2, r7, #15
 8005004:	2301      	movs	r3, #1
 8005006:	f000 fd24 	bl	8005a52 <ov9655_write_reg>
 800500a:	4603      	mov	r3, r0
 800500c:	2b00      	cmp	r3, #0
 800500e:	d002      	beq.n	8005016 <OV9655_SetResolution+0x1ce>
          {
            ret = OV9655_ERROR;
 8005010:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005014:	617b      	str	r3, [r7, #20]
          }
          (void)OV9655_Delay(pObj, 2);
 8005016:	2102      	movs	r1, #2
 8005018:	6878      	ldr	r0, [r7, #4]
 800501a:	f000 fcb7 	bl	800598c <OV9655_Delay>
      for(index=0; index<(sizeof(OV9655_VGA)/2U); index++)
 800501e:	693b      	ldr	r3, [r7, #16]
 8005020:	3301      	adds	r3, #1
 8005022:	613b      	str	r3, [r7, #16]
 8005024:	693b      	ldr	r3, [r7, #16]
 8005026:	2b92      	cmp	r3, #146	@ 0x92
 8005028:	d9d8      	bls.n	8004fdc <OV9655_SetResolution+0x194>
        }
      }
      break;
 800502a:	e003      	b.n	8005034 <OV9655_SetResolution+0x1ec>
    default:
      ret = OV9655_ERROR;
 800502c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005030:	617b      	str	r3, [r7, #20]
      break;
 8005032:	bf00      	nop
    }
  }

  return ret;
 8005034:	697b      	ldr	r3, [r7, #20]
}
 8005036:	4618      	mov	r0, r3
 8005038:	3718      	adds	r7, #24
 800503a:	46bd      	mov	sp, r7
 800503c:	bd80      	pop	{r7, pc}
 800503e:	bf00      	nop
 8005040:	08027c10 	.word	0x08027c10
 8005044:	08027d34 	.word	0x08027d34
 8005048:	08027d40 	.word	0x08027d40
 800504c:	08027d4c 	.word	0x08027d4c

08005050 <OV9655_GetResolution>:
  * @param  pObj  pointer to component object
  * @param  Resolution  Camera resolution
  * @retval Component status
  */
int32_t OV9655_GetResolution(OV9655_Object_t *pObj, uint32_t *Resolution)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b084      	sub	sp, #16
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
 8005058:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 800505a:	2300      	movs	r3, #0
 800505c:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if(ov9655_read_reg(&pObj->Ctx, OV9655_HORIZONTAL_FRAME_CTRL, &tmp, 1) != OV9655_OK)
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	f103 0018 	add.w	r0, r3, #24
 8005064:	f107 020b 	add.w	r2, r7, #11
 8005068:	2301      	movs	r3, #1
 800506a:	2132      	movs	r1, #50	@ 0x32
 800506c:	f000 fcda 	bl	8005a24 <ov9655_read_reg>
 8005070:	4603      	mov	r3, r0
 8005072:	2b00      	cmp	r3, #0
 8005074:	d003      	beq.n	800507e <OV9655_GetResolution+0x2e>
  {
    ret = OV9655_ERROR;
 8005076:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	e019      	b.n	80050b2 <OV9655_GetResolution+0x62>
  }
  else
  {
    switch (tmp)
 800507e:	7afb      	ldrb	r3, [r7, #11]
 8005080:	2bff      	cmp	r3, #255	@ 0xff
 8005082:	d006      	beq.n	8005092 <OV9655_GetResolution+0x42>
 8005084:	2bff      	cmp	r3, #255	@ 0xff
 8005086:	dc10      	bgt.n	80050aa <OV9655_GetResolution+0x5a>
 8005088:	2b12      	cmp	r3, #18
 800508a:	d006      	beq.n	800509a <OV9655_GetResolution+0x4a>
 800508c:	2ba4      	cmp	r3, #164	@ 0xa4
 800508e:	d008      	beq.n	80050a2 <OV9655_GetResolution+0x52>
 8005090:	e00b      	b.n	80050aa <OV9655_GetResolution+0x5a>
    {
    case 0xFF:
      *Resolution = OV9655_R640x480;
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2203      	movs	r2, #3
 8005096:	601a      	str	r2, [r3, #0]
      break;
 8005098:	e00b      	b.n	80050b2 <OV9655_GetResolution+0x62>
    case 0x12:
      *Resolution = OV9655_R320x240;
 800509a:	683b      	ldr	r3, [r7, #0]
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]
      break;
 80050a0:	e007      	b.n	80050b2 <OV9655_GetResolution+0x62>
    case 0xA4:
      *Resolution = OV9655_R160x120;
 80050a2:	683b      	ldr	r3, [r7, #0]
 80050a4:	2200      	movs	r2, #0
 80050a6:	601a      	str	r2, [r3, #0]
      break;
 80050a8:	e003      	b.n	80050b2 <OV9655_GetResolution+0x62>
    default:
      ret = OV9655_ERROR;
 80050aa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050ae:	60fb      	str	r3, [r7, #12]
      break;
 80050b0:	bf00      	nop
    }
  }

  return ret;
 80050b2:	68fb      	ldr	r3, [r7, #12]
}
 80050b4:	4618      	mov	r0, r3
 80050b6:	3710      	adds	r7, #16
 80050b8:	46bd      	mov	sp, r7
 80050ba:	bd80      	pop	{r7, pc}

080050bc <OV9655_ReadID>:
  * @param  pObj  pointer to component object
  * @param  Id    pointer to component ID
  * @retval Component status
  */
int32_t OV9655_ReadID(OV9655_Object_t *pObj, uint32_t *Id)
{
 80050bc:	b580      	push	{r7, lr}
 80050be:	b084      	sub	sp, #16
 80050c0:	af00      	add	r7, sp, #0
 80050c2:	6078      	str	r0, [r7, #4]
 80050c4:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  /* Initialize I2C */
  pObj->IO.Init();
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	4798      	blx	r3

    if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_HIGH, &tmp, 1)!= OV9655_OK)
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	f103 0018 	add.w	r0, r3, #24
 80050d2:	f107 020b 	add.w	r2, r7, #11
 80050d6:	2301      	movs	r3, #1
 80050d8:	210a      	movs	r1, #10
 80050da:	f000 fca3 	bl	8005a24 <ov9655_read_reg>
 80050de:	4603      	mov	r3, r0
 80050e0:	2b00      	cmp	r3, #0
 80050e2:	d003      	beq.n	80050ec <OV9655_ReadID+0x30>
    {
      ret = OV9655_ERROR;
 80050e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80050e8:	60fb      	str	r3, [r7, #12]
 80050ea:	e01b      	b.n	8005124 <OV9655_ReadID+0x68>
    }
    else
    {
      *Id = (uint32_t)tmp << 8U;
 80050ec:	7afb      	ldrb	r3, [r7, #11]
 80050ee:	021a      	lsls	r2, r3, #8
 80050f0:	683b      	ldr	r3, [r7, #0]
 80050f2:	601a      	str	r2, [r3, #0]
      if(ov9655_read_reg(&pObj->Ctx, OV9655_PID_NUMBER_LOW, &tmp, 1)!= OV9655_OK)
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	f103 0018 	add.w	r0, r3, #24
 80050fa:	f107 020b 	add.w	r2, r7, #11
 80050fe:	2301      	movs	r3, #1
 8005100:	210b      	movs	r1, #11
 8005102:	f000 fc8f 	bl	8005a24 <ov9655_read_reg>
 8005106:	4603      	mov	r3, r0
 8005108:	2b00      	cmp	r3, #0
 800510a:	d003      	beq.n	8005114 <OV9655_ReadID+0x58>
      {
        ret = OV9655_ERROR;
 800510c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005110:	60fb      	str	r3, [r7, #12]
 8005112:	e007      	b.n	8005124 <OV9655_ReadID+0x68>
      }
      else
      {
        *Id |= tmp;
 8005114:	683b      	ldr	r3, [r7, #0]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	7afa      	ldrb	r2, [r7, #11]
 800511a:	431a      	orrs	r2, r3
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	601a      	str	r2, [r3, #0]
        ret = OV9655_OK;
 8005120:	2300      	movs	r3, #0
 8005122:	60fb      	str	r3, [r7, #12]
      }
    }

  /* Component status */
  return ret;
 8005124:	68fb      	ldr	r3, [r7, #12]
}
 8005126:	4618      	mov	r0, r3
 8005128:	3710      	adds	r7, #16
 800512a:	46bd      	mov	sp, r7
 800512c:	bd80      	pop	{r7, pc}

0800512e <OV9655_GetCapabilities>:
  * @param  pObj          pointer to component object
  * @param  Capabilities  pointer to component Capabilities
  * @retval Component status
  */
int32_t OV9655_GetCapabilities(OV9655_Object_t *pObj, OV9655_Capabilities_t *Capabilities)
{
 800512e:	b480      	push	{r7}
 8005130:	b085      	sub	sp, #20
 8005132:	af00      	add	r7, sp, #0
 8005134:	6078      	str	r0, [r7, #4]
 8005136:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(pObj == NULL)
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	2b00      	cmp	r3, #0
 800513c:	d103      	bne.n	8005146 <OV9655_GetCapabilities+0x18>
  {
    ret = OV9655_ERROR;
 800513e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005142:	60fb      	str	r3, [r7, #12]
 8005144:	e01f      	b.n	8005186 <OV9655_GetCapabilities+0x58>
  }
  else
  {
    Capabilities->Config_Brightness    = 1;
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	2201      	movs	r2, #1
 800514a:	60da      	str	r2, [r3, #12]
    Capabilities->Config_Contrast      = 1;
 800514c:	683b      	ldr	r3, [r7, #0]
 800514e:	2201      	movs	r2, #1
 8005150:	615a      	str	r2, [r3, #20]
    Capabilities->Config_HueDegree     = 0;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2200      	movs	r2, #0
 8005156:	619a      	str	r2, [r3, #24]
    Capabilities->Config_LightMode     = 0;
 8005158:	683b      	ldr	r3, [r7, #0]
 800515a:	2200      	movs	r2, #0
 800515c:	605a      	str	r2, [r3, #4]
    Capabilities->Config_MirrorFlip    = 1;
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	2201      	movs	r2, #1
 8005162:	61da      	str	r2, [r3, #28]
    Capabilities->Config_NightMode     = 1;
 8005164:	683b      	ldr	r3, [r7, #0]
 8005166:	2201      	movs	r2, #1
 8005168:	625a      	str	r2, [r3, #36]	@ 0x24
    Capabilities->Config_Resolution    = 1;
 800516a:	683b      	ldr	r3, [r7, #0]
 800516c:	2201      	movs	r2, #1
 800516e:	601a      	str	r2, [r3, #0]
    Capabilities->Config_Saturation    = 0;
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	2200      	movs	r2, #0
 8005174:	611a      	str	r2, [r3, #16]
    Capabilities->Config_SpecialEffect = 1;
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2201      	movs	r2, #1
 800517a:	609a      	str	r2, [r3, #8]
    Capabilities->Config_Zoom          = 0;
 800517c:	683b      	ldr	r3, [r7, #0]
 800517e:	2200      	movs	r2, #0
 8005180:	621a      	str	r2, [r3, #32]

    ret = OV9655_OK;
 8005182:	2300      	movs	r3, #0
 8005184:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8005186:	68fb      	ldr	r3, [r7, #12]
}
 8005188:	4618      	mov	r0, r3
 800518a:	3714      	adds	r7, #20
 800518c:	46bd      	mov	sp, r7
 800518e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005192:	4770      	bx	lr

08005194 <OV9655_SetLightMode>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV9655_SetLightMode(OV9655_Object_t *pObj, uint32_t LightMode)
{
 8005194:	b480      	push	{r7}
 8005196:	b083      	sub	sp, #12
 8005198:	af00      	add	r7, sp, #0
 800519a:	6078      	str	r0, [r7, #4]
 800519c:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(LightMode);

  return OV9655_ERROR;
 800519e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80051a2:	4618      	mov	r0, r3
 80051a4:	370c      	adds	r7, #12
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
	...

080051b0 <OV9655_SetColorEffect>:
  * @param  pObj  pointer to component object
  * @param  Effect  Effect to be configured
  * @retval Component status
  */
int32_t OV9655_SetColorEffect(OV9655_Object_t *pObj, uint32_t Effect)
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b084      	sub	sp, #16
 80051b4:	af00      	add	r7, sp, #0
 80051b6:	6078      	str	r0, [r7, #4]
 80051b8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint8_t tmp;

  switch(Effect)
 80051ba:	683b      	ldr	r3, [r7, #0]
 80051bc:	3b01      	subs	r3, #1
 80051be:	2b1f      	cmp	r3, #31
 80051c0:	f200 8284 	bhi.w	80056cc <OV9655_SetColorEffect+0x51c>
 80051c4:	a201      	add	r2, pc, #4	@ (adr r2, 80051cc <OV9655_SetColorEffect+0x1c>)
 80051c6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ca:	bf00      	nop
 80051cc:	0800524d 	.word	0x0800524d
 80051d0:	0800530b 	.word	0x0800530b
 80051d4:	080056cd 	.word	0x080056cd
 80051d8:	080053c9 	.word	0x080053c9
 80051dc:	080056cd 	.word	0x080056cd
 80051e0:	080056cd 	.word	0x080056cd
 80051e4:	080056cd 	.word	0x080056cd
 80051e8:	0800548b 	.word	0x0800548b
 80051ec:	080056cd 	.word	0x080056cd
 80051f0:	080056cd 	.word	0x080056cd
 80051f4:	080056cd 	.word	0x080056cd
 80051f8:	080056cd 	.word	0x080056cd
 80051fc:	080056cd 	.word	0x080056cd
 8005200:	080056cd 	.word	0x080056cd
 8005204:	080056cd 	.word	0x080056cd
 8005208:	08005545 	.word	0x08005545
 800520c:	080056cd 	.word	0x080056cd
 8005210:	080056cd 	.word	0x080056cd
 8005214:	080056cd 	.word	0x080056cd
 8005218:	080056cd 	.word	0x080056cd
 800521c:	080056cd 	.word	0x080056cd
 8005220:	080056cd 	.word	0x080056cd
 8005224:	080056cd 	.word	0x080056cd
 8005228:	080056cd 	.word	0x080056cd
 800522c:	080056cd 	.word	0x080056cd
 8005230:	080056cd 	.word	0x080056cd
 8005234:	080056cd 	.word	0x080056cd
 8005238:	080056cd 	.word	0x080056cd
 800523c:	080056cd 	.word	0x080056cd
 8005240:	080056cd 	.word	0x080056cd
 8005244:	080056cd 	.word	0x080056cd
 8005248:	0800560b 	.word	0x0800560b
  {
  case OV9655_COLOR_EFFECT_BLUE:
    tmp = 0xCC;
 800524c:	23cc      	movs	r3, #204	@ 0xcc
 800524e:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f103 0018 	add.w	r0, r3, #24
 8005256:	f107 020b 	add.w	r2, r7, #11
 800525a:	2301      	movs	r3, #1
 800525c:	213a      	movs	r1, #58	@ 0x3a
 800525e:	f000 fbf8 	bl	8005a52 <ov9655_write_reg>
 8005262:	60f8      	str	r0, [r7, #12]
    tmp = 0x00;
 8005264:	2300      	movs	r3, #0
 8005266:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	f103 0018 	add.w	r0, r3, #24
 800526e:	f107 020b 	add.w	r2, r7, #11
 8005272:	2301      	movs	r3, #1
 8005274:	214f      	movs	r1, #79	@ 0x4f
 8005276:	f000 fbec 	bl	8005a52 <ov9655_write_reg>
 800527a:	4602      	mov	r2, r0
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	4413      	add	r3, r2
 8005280:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8005282:	687b      	ldr	r3, [r7, #4]
 8005284:	f103 0018 	add.w	r0, r3, #24
 8005288:	f107 020b 	add.w	r2, r7, #11
 800528c:	2301      	movs	r3, #1
 800528e:	2150      	movs	r1, #80	@ 0x50
 8005290:	f000 fbdf 	bl	8005a52 <ov9655_write_reg>
 8005294:	4602      	mov	r2, r0
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	4413      	add	r3, r2
 800529a:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	f103 0018 	add.w	r0, r3, #24
 80052a2:	f107 020b 	add.w	r2, r7, #11
 80052a6:	2301      	movs	r3, #1
 80052a8:	2151      	movs	r1, #81	@ 0x51
 80052aa:	f000 fbd2 	bl	8005a52 <ov9655_write_reg>
 80052ae:	4602      	mov	r2, r0
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	4413      	add	r3, r2
 80052b4:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	f103 0018 	add.w	r0, r3, #24
 80052bc:	f107 020b 	add.w	r2, r7, #11
 80052c0:	2301      	movs	r3, #1
 80052c2:	2152      	movs	r1, #82	@ 0x52
 80052c4:	f000 fbc5 	bl	8005a52 <ov9655_write_reg>
 80052c8:	4602      	mov	r2, r0
 80052ca:	68fb      	ldr	r3, [r7, #12]
 80052cc:	4413      	add	r3, r2
 80052ce:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	f103 0018 	add.w	r0, r3, #24
 80052d6:	f107 020b 	add.w	r2, r7, #11
 80052da:	2301      	movs	r3, #1
 80052dc:	2153      	movs	r1, #83	@ 0x53
 80052de:	f000 fbb8 	bl	8005a52 <ov9655_write_reg>
 80052e2:	4602      	mov	r2, r0
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	4413      	add	r3, r2
 80052e8:	60fb      	str	r3, [r7, #12]
    tmp = 0x60;
 80052ea:	2360      	movs	r3, #96	@ 0x60
 80052ec:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f103 0018 	add.w	r0, r3, #24
 80052f4:	f107 020b 	add.w	r2, r7, #11
 80052f8:	2301      	movs	r3, #1
 80052fa:	2154      	movs	r1, #84	@ 0x54
 80052fc:	f000 fba9 	bl	8005a52 <ov9655_write_reg>
 8005300:	4602      	mov	r2, r0
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	4413      	add	r3, r2
 8005306:	60fb      	str	r3, [r7, #12]
    break;
 8005308:	e241      	b.n	800578e <OV9655_SetColorEffect+0x5de>

  case OV9655_COLOR_EFFECT_RED:
    tmp = 0xCC;
 800530a:	23cc      	movs	r3, #204	@ 0xcc
 800530c:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f103 0018 	add.w	r0, r3, #24
 8005314:	f107 020b 	add.w	r2, r7, #11
 8005318:	2301      	movs	r3, #1
 800531a:	213a      	movs	r1, #58	@ 0x3a
 800531c:	f000 fb99 	bl	8005a52 <ov9655_write_reg>
 8005320:	60f8      	str	r0, [r7, #12]
    tmp = 0x60;
 8005322:	2360      	movs	r3, #96	@ 0x60
 8005324:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	f103 0018 	add.w	r0, r3, #24
 800532c:	f107 020b 	add.w	r2, r7, #11
 8005330:	2301      	movs	r3, #1
 8005332:	214f      	movs	r1, #79	@ 0x4f
 8005334:	f000 fb8d 	bl	8005a52 <ov9655_write_reg>
 8005338:	4602      	mov	r2, r0
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4413      	add	r3, r2
 800533e:	60fb      	str	r3, [r7, #12]
    tmp = 0x00;
 8005340:	2300      	movs	r3, #0
 8005342:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	f103 0018 	add.w	r0, r3, #24
 800534a:	f107 020b 	add.w	r2, r7, #11
 800534e:	2301      	movs	r3, #1
 8005350:	2150      	movs	r1, #80	@ 0x50
 8005352:	f000 fb7e 	bl	8005a52 <ov9655_write_reg>
 8005356:	4602      	mov	r2, r0
 8005358:	68fb      	ldr	r3, [r7, #12]
 800535a:	4413      	add	r3, r2
 800535c:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	f103 0018 	add.w	r0, r3, #24
 8005364:	f107 020b 	add.w	r2, r7, #11
 8005368:	2301      	movs	r3, #1
 800536a:	2151      	movs	r1, #81	@ 0x51
 800536c:	f000 fb71 	bl	8005a52 <ov9655_write_reg>
 8005370:	4602      	mov	r2, r0
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4413      	add	r3, r2
 8005376:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f103 0018 	add.w	r0, r3, #24
 800537e:	f107 020b 	add.w	r2, r7, #11
 8005382:	2301      	movs	r3, #1
 8005384:	2152      	movs	r1, #82	@ 0x52
 8005386:	f000 fb64 	bl	8005a52 <ov9655_write_reg>
 800538a:	4602      	mov	r2, r0
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	4413      	add	r3, r2
 8005390:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f103 0018 	add.w	r0, r3, #24
 8005398:	f107 020b 	add.w	r2, r7, #11
 800539c:	2301      	movs	r3, #1
 800539e:	2153      	movs	r1, #83	@ 0x53
 80053a0:	f000 fb57 	bl	8005a52 <ov9655_write_reg>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	4413      	add	r3, r2
 80053aa:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	f103 0018 	add.w	r0, r3, #24
 80053b2:	f107 020b 	add.w	r2, r7, #11
 80053b6:	2301      	movs	r3, #1
 80053b8:	2154      	movs	r1, #84	@ 0x54
 80053ba:	f000 fb4a 	bl	8005a52 <ov9655_write_reg>
 80053be:	4602      	mov	r2, r0
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	4413      	add	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
    break;
 80053c6:	e1e2      	b.n	800578e <OV9655_SetColorEffect+0x5de>

  case OV9655_COLOR_EFFECT_GREEN:
    tmp = 0xCC;
 80053c8:	23cc      	movs	r3, #204	@ 0xcc
 80053ca:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f103 0018 	add.w	r0, r3, #24
 80053d2:	f107 020b 	add.w	r2, r7, #11
 80053d6:	2301      	movs	r3, #1
 80053d8:	213a      	movs	r1, #58	@ 0x3a
 80053da:	f000 fb3a 	bl	8005a52 <ov9655_write_reg>
 80053de:	60f8      	str	r0, [r7, #12]
    tmp = 0x00;
 80053e0:	2300      	movs	r3, #0
 80053e2:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	f103 0018 	add.w	r0, r3, #24
 80053ea:	f107 020b 	add.w	r2, r7, #11
 80053ee:	2301      	movs	r3, #1
 80053f0:	214f      	movs	r1, #79	@ 0x4f
 80053f2:	f000 fb2e 	bl	8005a52 <ov9655_write_reg>
 80053f6:	4602      	mov	r2, r0
 80053f8:	68fb      	ldr	r3, [r7, #12]
 80053fa:	4413      	add	r3, r2
 80053fc:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	f103 0018 	add.w	r0, r3, #24
 8005404:	f107 020b 	add.w	r2, r7, #11
 8005408:	2301      	movs	r3, #1
 800540a:	2150      	movs	r1, #80	@ 0x50
 800540c:	f000 fb21 	bl	8005a52 <ov9655_write_reg>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4413      	add	r3, r2
 8005416:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	f103 0018 	add.w	r0, r3, #24
 800541e:	f107 020b 	add.w	r2, r7, #11
 8005422:	2301      	movs	r3, #1
 8005424:	2151      	movs	r1, #81	@ 0x51
 8005426:	f000 fb14 	bl	8005a52 <ov9655_write_reg>
 800542a:	4602      	mov	r2, r0
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	4413      	add	r3, r2
 8005430:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	f103 0018 	add.w	r0, r3, #24
 8005438:	f107 020b 	add.w	r2, r7, #11
 800543c:	2301      	movs	r3, #1
 800543e:	2152      	movs	r1, #82	@ 0x52
 8005440:	f000 fb07 	bl	8005a52 <ov9655_write_reg>
 8005444:	4602      	mov	r2, r0
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	4413      	add	r3, r2
 800544a:	60fb      	str	r3, [r7, #12]
    tmp = 0x80;
 800544c:	2380      	movs	r3, #128	@ 0x80
 800544e:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	f103 0018 	add.w	r0, r3, #24
 8005456:	f107 020b 	add.w	r2, r7, #11
 800545a:	2301      	movs	r3, #1
 800545c:	2153      	movs	r1, #83	@ 0x53
 800545e:	f000 faf8 	bl	8005a52 <ov9655_write_reg>
 8005462:	4602      	mov	r2, r0
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	4413      	add	r3, r2
 8005468:	60fb      	str	r3, [r7, #12]
    tmp = 0x00;
 800546a:	2300      	movs	r3, #0
 800546c:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	f103 0018 	add.w	r0, r3, #24
 8005474:	f107 020b 	add.w	r2, r7, #11
 8005478:	2301      	movs	r3, #1
 800547a:	2154      	movs	r1, #84	@ 0x54
 800547c:	f000 fae9 	bl	8005a52 <ov9655_write_reg>
 8005480:	4602      	mov	r2, r0
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	4413      	add	r3, r2
 8005486:	60fb      	str	r3, [r7, #12]
    break;
 8005488:	e181      	b.n	800578e <OV9655_SetColorEffect+0x5de>

  case OV9655_COLOR_EFFECT_BW:
    tmp = 0xCC;
 800548a:	23cc      	movs	r3, #204	@ 0xcc
 800548c:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	f103 0018 	add.w	r0, r3, #24
 8005494:	f107 020b 	add.w	r2, r7, #11
 8005498:	2301      	movs	r3, #1
 800549a:	213a      	movs	r1, #58	@ 0x3a
 800549c:	f000 fad9 	bl	8005a52 <ov9655_write_reg>
 80054a0:	60f8      	str	r0, [r7, #12]
    tmp = 0x00;
 80054a2:	2300      	movs	r3, #0
 80054a4:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80054a6:	687b      	ldr	r3, [r7, #4]
 80054a8:	f103 0018 	add.w	r0, r3, #24
 80054ac:	f107 020b 	add.w	r2, r7, #11
 80054b0:	2301      	movs	r3, #1
 80054b2:	214f      	movs	r1, #79	@ 0x4f
 80054b4:	f000 facd 	bl	8005a52 <ov9655_write_reg>
 80054b8:	4602      	mov	r2, r0
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	4413      	add	r3, r2
 80054be:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	f103 0018 	add.w	r0, r3, #24
 80054c6:	f107 020b 	add.w	r2, r7, #11
 80054ca:	2301      	movs	r3, #1
 80054cc:	2150      	movs	r1, #80	@ 0x50
 80054ce:	f000 fac0 	bl	8005a52 <ov9655_write_reg>
 80054d2:	4602      	mov	r2, r0
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	4413      	add	r3, r2
 80054d8:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	f103 0018 	add.w	r0, r3, #24
 80054e0:	f107 020b 	add.w	r2, r7, #11
 80054e4:	2301      	movs	r3, #1
 80054e6:	2151      	movs	r1, #81	@ 0x51
 80054e8:	f000 fab3 	bl	8005a52 <ov9655_write_reg>
 80054ec:	4602      	mov	r2, r0
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	4413      	add	r3, r2
 80054f2:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	f103 0018 	add.w	r0, r3, #24
 80054fa:	f107 020b 	add.w	r2, r7, #11
 80054fe:	2301      	movs	r3, #1
 8005500:	2152      	movs	r1, #82	@ 0x52
 8005502:	f000 faa6 	bl	8005a52 <ov9655_write_reg>
 8005506:	4602      	mov	r2, r0
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	4413      	add	r3, r2
 800550c:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	f103 0018 	add.w	r0, r3, #24
 8005514:	f107 020b 	add.w	r2, r7, #11
 8005518:	2301      	movs	r3, #1
 800551a:	2153      	movs	r1, #83	@ 0x53
 800551c:	f000 fa99 	bl	8005a52 <ov9655_write_reg>
 8005520:	4602      	mov	r2, r0
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	4413      	add	r3, r2
 8005526:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f103 0018 	add.w	r0, r3, #24
 800552e:	f107 020b 	add.w	r2, r7, #11
 8005532:	2301      	movs	r3, #1
 8005534:	2154      	movs	r1, #84	@ 0x54
 8005536:	f000 fa8c 	bl	8005a52 <ov9655_write_reg>
 800553a:	4602      	mov	r2, r0
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4413      	add	r3, r2
 8005540:	60fb      	str	r3, [r7, #12]
    break;
 8005542:	e124      	b.n	800578e <OV9655_SetColorEffect+0x5de>

  case OV9655_COLOR_EFFECT_SEPIA:
    tmp = 0xCC;
 8005544:	23cc      	movs	r3, #204	@ 0xcc
 8005546:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	f103 0018 	add.w	r0, r3, #24
 800554e:	f107 020b 	add.w	r2, r7, #11
 8005552:	2301      	movs	r3, #1
 8005554:	213a      	movs	r1, #58	@ 0x3a
 8005556:	f000 fa7c 	bl	8005a52 <ov9655_write_reg>
 800555a:	60f8      	str	r0, [r7, #12]
    tmp = 0x00;
 800555c:	2300      	movs	r3, #0
 800555e:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	f103 0018 	add.w	r0, r3, #24
 8005566:	f107 020b 	add.w	r2, r7, #11
 800556a:	2301      	movs	r3, #1
 800556c:	214f      	movs	r1, #79	@ 0x4f
 800556e:	f000 fa70 	bl	8005a52 <ov9655_write_reg>
 8005572:	4602      	mov	r2, r0
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4413      	add	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	f103 0018 	add.w	r0, r3, #24
 8005580:	f107 020b 	add.w	r2, r7, #11
 8005584:	2301      	movs	r3, #1
 8005586:	2150      	movs	r1, #80	@ 0x50
 8005588:	f000 fa63 	bl	8005a52 <ov9655_write_reg>
 800558c:	4602      	mov	r2, r0
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	4413      	add	r3, r2
 8005592:	60fb      	str	r3, [r7, #12]
    tmp = 0x20;
 8005594:	2320      	movs	r3, #32
 8005596:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	f103 0018 	add.w	r0, r3, #24
 800559e:	f107 020b 	add.w	r2, r7, #11
 80055a2:	2301      	movs	r3, #1
 80055a4:	2151      	movs	r1, #81	@ 0x51
 80055a6:	f000 fa54 	bl	8005a52 <ov9655_write_reg>
 80055aa:	4602      	mov	r2, r0
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	4413      	add	r3, r2
 80055b0:	60fb      	str	r3, [r7, #12]
    tmp = 0xF0;
 80055b2:	23f0      	movs	r3, #240	@ 0xf0
 80055b4:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	f103 0018 	add.w	r0, r3, #24
 80055bc:	f107 020b 	add.w	r2, r7, #11
 80055c0:	2301      	movs	r3, #1
 80055c2:	2152      	movs	r1, #82	@ 0x52
 80055c4:	f000 fa45 	bl	8005a52 <ov9655_write_reg>
 80055c8:	4602      	mov	r2, r0
 80055ca:	68fb      	ldr	r3, [r7, #12]
 80055cc:	4413      	add	r3, r2
 80055ce:	60fb      	str	r3, [r7, #12]
    tmp = 0x00;
 80055d0:	2300      	movs	r3, #0
 80055d2:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 80055d4:	687b      	ldr	r3, [r7, #4]
 80055d6:	f103 0018 	add.w	r0, r3, #24
 80055da:	f107 020b 	add.w	r2, r7, #11
 80055de:	2301      	movs	r3, #1
 80055e0:	2153      	movs	r1, #83	@ 0x53
 80055e2:	f000 fa36 	bl	8005a52 <ov9655_write_reg>
 80055e6:	4602      	mov	r2, r0
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	4413      	add	r3, r2
 80055ec:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	f103 0018 	add.w	r0, r3, #24
 80055f4:	f107 020b 	add.w	r2, r7, #11
 80055f8:	2301      	movs	r3, #1
 80055fa:	2154      	movs	r1, #84	@ 0x54
 80055fc:	f000 fa29 	bl	8005a52 <ov9655_write_reg>
 8005600:	4602      	mov	r2, r0
 8005602:	68fb      	ldr	r3, [r7, #12]
 8005604:	4413      	add	r3, r2
 8005606:	60fb      	str	r3, [r7, #12]
    break;
 8005608:	e0c1      	b.n	800578e <OV9655_SetColorEffect+0x5de>

  case OV9655_COLOR_EFFECT_NEGATIVE:
    tmp = 0xEC;
 800560a:	23ec      	movs	r3, #236	@ 0xec
 800560c:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	f103 0018 	add.w	r0, r3, #24
 8005614:	f107 020b 	add.w	r2, r7, #11
 8005618:	2301      	movs	r3, #1
 800561a:	213a      	movs	r1, #58	@ 0x3a
 800561c:	f000 fa19 	bl	8005a52 <ov9655_write_reg>
 8005620:	60f8      	str	r0, [r7, #12]
    tmp = 0x80;
 8005622:	2380      	movs	r3, #128	@ 0x80
 8005624:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	f103 0018 	add.w	r0, r3, #24
 800562c:	f107 020b 	add.w	r2, r7, #11
 8005630:	2301      	movs	r3, #1
 8005632:	214f      	movs	r1, #79	@ 0x4f
 8005634:	f000 fa0d 	bl	8005a52 <ov9655_write_reg>
 8005638:	4602      	mov	r2, r0
 800563a:	68fb      	ldr	r3, [r7, #12]
 800563c:	4413      	add	r3, r2
 800563e:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8005640:	687b      	ldr	r3, [r7, #4]
 8005642:	f103 0018 	add.w	r0, r3, #24
 8005646:	f107 020b 	add.w	r2, r7, #11
 800564a:	2301      	movs	r3, #1
 800564c:	2150      	movs	r1, #80	@ 0x50
 800564e:	f000 fa00 	bl	8005a52 <ov9655_write_reg>
 8005652:	4602      	mov	r2, r0
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	4413      	add	r3, r2
 8005658:	60fb      	str	r3, [r7, #12]
    tmp = 0x00;
 800565a:	2300      	movs	r3, #0
 800565c:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f103 0018 	add.w	r0, r3, #24
 8005664:	f107 020b 	add.w	r2, r7, #11
 8005668:	2301      	movs	r3, #1
 800566a:	2151      	movs	r1, #81	@ 0x51
 800566c:	f000 f9f1 	bl	8005a52 <ov9655_write_reg>
 8005670:	4602      	mov	r2, r0
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	4413      	add	r3, r2
 8005676:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	f103 0018 	add.w	r0, r3, #24
 800567e:	f107 020b 	add.w	r2, r7, #11
 8005682:	2301      	movs	r3, #1
 8005684:	2152      	movs	r1, #82	@ 0x52
 8005686:	f000 f9e4 	bl	8005a52 <ov9655_write_reg>
 800568a:	4602      	mov	r2, r0
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	4413      	add	r3, r2
 8005690:	60fb      	str	r3, [r7, #12]
    tmp = 0x80;
 8005692:	2380      	movs	r3, #128	@ 0x80
 8005694:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	f103 0018 	add.w	r0, r3, #24
 800569c:	f107 020b 	add.w	r2, r7, #11
 80056a0:	2301      	movs	r3, #1
 80056a2:	2153      	movs	r1, #83	@ 0x53
 80056a4:	f000 f9d5 	bl	8005a52 <ov9655_write_reg>
 80056a8:	4602      	mov	r2, r0
 80056aa:	68fb      	ldr	r3, [r7, #12]
 80056ac:	4413      	add	r3, r2
 80056ae:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f103 0018 	add.w	r0, r3, #24
 80056b6:	f107 020b 	add.w	r2, r7, #11
 80056ba:	2301      	movs	r3, #1
 80056bc:	2154      	movs	r1, #84	@ 0x54
 80056be:	f000 f9c8 	bl	8005a52 <ov9655_write_reg>
 80056c2:	4602      	mov	r2, r0
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	4413      	add	r3, r2
 80056c8:	60fb      	str	r3, [r7, #12]
    break;
 80056ca:	e060      	b.n	800578e <OV9655_SetColorEffect+0x5de>

  case OV9655_COLOR_EFFECT_NONE:
  default :
    tmp = 0xCC;
 80056cc:	23cc      	movs	r3, #204	@ 0xcc
 80056ce:	72fb      	strb	r3, [r7, #11]
    ret = ov9655_write_reg(&pObj->Ctx, OV9655_TSLB, &tmp, 1);
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	f103 0018 	add.w	r0, r3, #24
 80056d6:	f107 020b 	add.w	r2, r7, #11
 80056da:	2301      	movs	r3, #1
 80056dc:	213a      	movs	r1, #58	@ 0x3a
 80056de:	f000 f9b8 	bl	8005a52 <ov9655_write_reg>
 80056e2:	60f8      	str	r0, [r7, #12]
    tmp = 0x80;
 80056e4:	2380      	movs	r3, #128	@ 0x80
 80056e6:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_1, &tmp, 1);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f103 0018 	add.w	r0, r3, #24
 80056ee:	f107 020b 	add.w	r2, r7, #11
 80056f2:	2301      	movs	r3, #1
 80056f4:	214f      	movs	r1, #79	@ 0x4f
 80056f6:	f000 f9ac 	bl	8005a52 <ov9655_write_reg>
 80056fa:	4602      	mov	r2, r0
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	4413      	add	r3, r2
 8005700:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_2, &tmp, 1);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	f103 0018 	add.w	r0, r3, #24
 8005708:	f107 020b 	add.w	r2, r7, #11
 800570c:	2301      	movs	r3, #1
 800570e:	2150      	movs	r1, #80	@ 0x50
 8005710:	f000 f99f 	bl	8005a52 <ov9655_write_reg>
 8005714:	4602      	mov	r2, r0
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	4413      	add	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
    tmp = 0x00;
 800571c:	2300      	movs	r3, #0
 800571e:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_3, &tmp, 1);
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	f103 0018 	add.w	r0, r3, #24
 8005726:	f107 020b 	add.w	r2, r7, #11
 800572a:	2301      	movs	r3, #1
 800572c:	2151      	movs	r1, #81	@ 0x51
 800572e:	f000 f990 	bl	8005a52 <ov9655_write_reg>
 8005732:	4602      	mov	r2, r0
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	4413      	add	r3, r2
 8005738:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_4, &tmp, 1);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	f103 0018 	add.w	r0, r3, #24
 8005740:	f107 020b 	add.w	r2, r7, #11
 8005744:	2301      	movs	r3, #1
 8005746:	2152      	movs	r1, #82	@ 0x52
 8005748:	f000 f983 	bl	8005a52 <ov9655_write_reg>
 800574c:	4602      	mov	r2, r0
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	4413      	add	r3, r2
 8005752:	60fb      	str	r3, [r7, #12]
    tmp = 0x80;
 8005754:	2380      	movs	r3, #128	@ 0x80
 8005756:	72fb      	strb	r3, [r7, #11]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_5, &tmp, 1);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	f103 0018 	add.w	r0, r3, #24
 800575e:	f107 020b 	add.w	r2, r7, #11
 8005762:	2301      	movs	r3, #1
 8005764:	2153      	movs	r1, #83	@ 0x53
 8005766:	f000 f974 	bl	8005a52 <ov9655_write_reg>
 800576a:	4602      	mov	r2, r0
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	4413      	add	r3, r2
 8005770:	60fb      	str	r3, [r7, #12]
    ret += ov9655_write_reg(&pObj->Ctx, OV9655_MATRIX_COEFFICIENT_6, &tmp, 1);
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	f103 0018 	add.w	r0, r3, #24
 8005778:	f107 020b 	add.w	r2, r7, #11
 800577c:	2301      	movs	r3, #1
 800577e:	2154      	movs	r1, #84	@ 0x54
 8005780:	f000 f967 	bl	8005a52 <ov9655_write_reg>
 8005784:	4602      	mov	r2, r0
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	4413      	add	r3, r2
 800578a:	60fb      	str	r3, [r7, #12]
    break;
 800578c:	bf00      	nop
  }

  if(ret != OV9655_OK)
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d002      	beq.n	800579a <OV9655_SetColorEffect+0x5ea>
  {
    ret = OV9655_ERROR;
 8005794:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005798:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 800579a:	68fb      	ldr	r3, [r7, #12]
}
 800579c:	4618      	mov	r0, r3
 800579e:	3710      	adds	r7, #16
 80057a0:	46bd      	mov	sp, r7
 80057a2:	bd80      	pop	{r7, pc}

080057a4 <OV9655_SetBrightness>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV9655_SetBrightness(OV9655_Object_t *pObj, int32_t Level)
{
 80057a4:	b580      	push	{r7, lr}
 80057a6:	b088      	sub	sp, #32
 80057a8:	af00      	add	r7, sp, #0
 80057aa:	6078      	str	r0, [r7, #4]
 80057ac:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 80057ae:	2300      	movs	r3, #0
 80057b0:	61fb      	str	r3, [r7, #28]
  const uint8_t brightness_level[] = {0xB0U, 0xB0U, 0xB0U, 0x98U, 0x00U, 0x18U, 0x30U, 0x30U, 0x30U};
 80057b2:	4a10      	ldr	r2, [pc, #64]	@ (80057f4 <OV9655_SetBrightness+0x50>)
 80057b4:	f107 0310 	add.w	r3, r7, #16
 80057b8:	ca07      	ldmia	r2, {r0, r1, r2}
 80057ba:	c303      	stmia	r3!, {r0, r1}
 80057bc:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = brightness_level[Level + 4];
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	3304      	adds	r3, #4
 80057c2:	3320      	adds	r3, #32
 80057c4:	443b      	add	r3, r7
 80057c6:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 80057ca:	73fb      	strb	r3, [r7, #15]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_BRIGHTNESS_ADJUSTMENT, &tmp, 1) != OV9655_OK)
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	f103 0018 	add.w	r0, r3, #24
 80057d2:	f107 020f 	add.w	r2, r7, #15
 80057d6:	2301      	movs	r3, #1
 80057d8:	2155      	movs	r1, #85	@ 0x55
 80057da:	f000 f93a 	bl	8005a52 <ov9655_write_reg>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d002      	beq.n	80057ea <OV9655_SetBrightness+0x46>
  {
    ret = OV9655_ERROR;
 80057e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80057e8:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 80057ea:	69fb      	ldr	r3, [r7, #28]
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3720      	adds	r7, #32
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	08026540 	.word	0x08026540

080057f8 <OV9655_SetSaturation>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV9655_SetSaturation(OV9655_Object_t *pObj, int32_t Level)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b083      	sub	sp, #12
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Level);

  return OV9655_ERROR;
 8005802:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005806:	4618      	mov	r0, r3
 8005808:	370c      	adds	r7, #12
 800580a:	46bd      	mov	sp, r7
 800580c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005810:	4770      	bx	lr
	...

08005814 <OV9655_SetContrast>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV9655_SetContrast(OV9655_Object_t *pObj, int32_t Level)
{
 8005814:	b580      	push	{r7, lr}
 8005816:	b088      	sub	sp, #32
 8005818:	af00      	add	r7, sp, #0
 800581a:	6078      	str	r0, [r7, #4]
 800581c:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 800581e:	2300      	movs	r3, #0
 8005820:	61fb      	str	r3, [r7, #28]
  const uint8_t contrast_level[] = {0x30U, 0x30U, 0x30U, 0x38U, 0x40U, 0x50U, 0x60U, 0x60U, 0x60U};
 8005822:	4a10      	ldr	r2, [pc, #64]	@ (8005864 <OV9655_SetContrast+0x50>)
 8005824:	f107 0310 	add.w	r3, r7, #16
 8005828:	ca07      	ldmia	r2, {r0, r1, r2}
 800582a:	c303      	stmia	r3!, {r0, r1}
 800582c:	701a      	strb	r2, [r3, #0]
  uint8_t tmp;

  tmp = contrast_level[Level + 4];
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	3304      	adds	r3, #4
 8005832:	3320      	adds	r3, #32
 8005834:	443b      	add	r3, r7
 8005836:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800583a:	73fb      	strb	r3, [r7, #15]
  if(ov9655_write_reg(&pObj->Ctx, OV9655_CONTRAST_COEFFICIENT_1, &tmp, 1) != OV9655_OK)
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	f103 0018 	add.w	r0, r3, #24
 8005842:	f107 020f 	add.w	r2, r7, #15
 8005846:	2301      	movs	r3, #1
 8005848:	2156      	movs	r1, #86	@ 0x56
 800584a:	f000 f902 	bl	8005a52 <ov9655_write_reg>
 800584e:	4603      	mov	r3, r0
 8005850:	2b00      	cmp	r3, #0
 8005852:	d002      	beq.n	800585a <OV9655_SetContrast+0x46>
  {
    ret = OV9655_ERROR;
 8005854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005858:	61fb      	str	r3, [r7, #28]
  }

  return ret;
 800585a:	69fb      	ldr	r3, [r7, #28]
}
 800585c:	4618      	mov	r0, r3
 800585e:	3720      	adds	r7, #32
 8005860:	46bd      	mov	sp, r7
 8005862:	bd80      	pop	{r7, pc}
 8005864:	0802654c 	.word	0x0802654c

08005868 <OV9655_SetHueDegree>:
  * @param  pObj  pointer to component object
  * @param  Level Value to be configured
  * @retval Component status
  */
int32_t OV9655_SetHueDegree(OV9655_Object_t *pObj, int32_t Degree)
{
 8005868:	b480      	push	{r7}
 800586a:	b083      	sub	sp, #12
 800586c:	af00      	add	r7, sp, #0
 800586e:	6078      	str	r0, [r7, #4]
 8005870:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Degree);

  return OV9655_ERROR;
 8005872:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8005876:	4618      	mov	r0, r3
 8005878:	370c      	adds	r7, #12
 800587a:	46bd      	mov	sp, r7
 800587c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005880:	4770      	bx	lr

08005882 <OV9655_MirrorFlipConfig>:
  * @param  pObj  pointer to component object
  * @param  Config To configure mirror, flip, both or none
  * @retval Component status
  */
int32_t OV9655_MirrorFlipConfig(OV9655_Object_t *pObj, uint32_t Config)
{
 8005882:	b580      	push	{r7, lr}
 8005884:	b084      	sub	sp, #16
 8005886:	af00      	add	r7, sp, #0
 8005888:	6078      	str	r0, [r7, #4]
 800588a:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 800588c:	2300      	movs	r3, #0
 800588e:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if(Config > OV9655_MIRROR_FLIP)
 8005890:	683b      	ldr	r3, [r7, #0]
 8005892:	2b03      	cmp	r3, #3
 8005894:	d903      	bls.n	800589e <OV9655_MirrorFlipConfig+0x1c>
  {
    ret = OV9655_ERROR;
 8005896:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800589a:	60fb      	str	r3, [r7, #12]
 800589c:	e02b      	b.n	80058f6 <OV9655_MirrorFlipConfig+0x74>
  }
  else
  {
    if(ov9655_read_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	f103 0018 	add.w	r0, r3, #24
 80058a4:	f107 020b 	add.w	r2, r7, #11
 80058a8:	2301      	movs	r3, #1
 80058aa:	211e      	movs	r1, #30
 80058ac:	f000 f8ba 	bl	8005a24 <ov9655_read_reg>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d003      	beq.n	80058be <OV9655_MirrorFlipConfig+0x3c>
    {
      ret = OV9655_ERROR;
 80058b6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058ba:	60fb      	str	r3, [r7, #12]
 80058bc:	e01b      	b.n	80058f6 <OV9655_MirrorFlipConfig+0x74>
    }
    else
    {
      tmp &= ~(3U << 4U);    /* Clear Bit[5:4] Mirror/VFlip */
 80058be:	7afb      	ldrb	r3, [r7, #11]
 80058c0:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	72fb      	strb	r3, [r7, #11]
      tmp |= (Config << 4U); /* Configure Bit[5:4] Mirror/VFlip */
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	b2db      	uxtb	r3, r3
 80058cc:	011b      	lsls	r3, r3, #4
 80058ce:	b2da      	uxtb	r2, r3
 80058d0:	7afb      	ldrb	r3, [r7, #11]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	b2db      	uxtb	r3, r3
 80058d6:	72fb      	strb	r3, [r7, #11]
      if(ov9655_write_reg(&pObj->Ctx, OV9655_MIRROR_VFLIP, &tmp, 1) != OV9655_OK)
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	f103 0018 	add.w	r0, r3, #24
 80058de:	f107 020b 	add.w	r2, r7, #11
 80058e2:	2301      	movs	r3, #1
 80058e4:	211e      	movs	r1, #30
 80058e6:	f000 f8b4 	bl	8005a52 <ov9655_write_reg>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d002      	beq.n	80058f6 <OV9655_MirrorFlipConfig+0x74>
      {
        ret = OV9655_ERROR;
 80058f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80058f4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80058f6:	68fb      	ldr	r3, [r7, #12]
}
 80058f8:	4618      	mov	r0, r3
 80058fa:	3710      	adds	r7, #16
 80058fc:	46bd      	mov	sp, r7
 80058fe:	bd80      	pop	{r7, pc}

08005900 <OV9655_ZoomConfig>:
  * @param  pObj  pointer to component object
  * @param  Zoom  Zoom to be configured
  * @retval Component status
  */
int32_t OV9655_ZoomConfig(OV9655_Object_t *pObj, uint32_t Zoom)
{
 8005900:	b480      	push	{r7}
 8005902:	b083      	sub	sp, #12
 8005904:	af00      	add	r7, sp, #0
 8005906:	6078      	str	r0, [r7, #4]
 8005908:	6039      	str	r1, [r7, #0]
  (void)(pObj);
  (void)(Zoom);

  return OV9655_ERROR;
 800590a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800590e:	4618      	mov	r0, r3
 8005910:	370c      	adds	r7, #12
 8005912:	46bd      	mov	sp, r7
 8005914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005918:	4770      	bx	lr

0800591a <OV9655_NightModeConfig>:
  * @param  pObj  pointer to component object
  * @param  Cmd   Enable disable night mode
  * @retval Component status
  */
int32_t OV9655_NightModeConfig(OV9655_Object_t *pObj, uint32_t Cmd)
{
 800591a:	b580      	push	{r7, lr}
 800591c:	b084      	sub	sp, #16
 800591e:	af00      	add	r7, sp, #0
 8005920:	6078      	str	r0, [r7, #4]
 8005922:	6039      	str	r1, [r7, #0]
  int32_t ret = OV9655_OK;
 8005924:	2300      	movs	r3, #0
 8005926:	60fb      	str	r3, [r7, #12]
  uint8_t tmp;

  if(ov9655_read_reg(&pObj->Ctx, OV9655_COMMON_CTRL11, &tmp, 1) != OV9655_OK)
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	f103 0018 	add.w	r0, r3, #24
 800592e:	f107 020b 	add.w	r2, r7, #11
 8005932:	2301      	movs	r3, #1
 8005934:	213b      	movs	r1, #59	@ 0x3b
 8005936:	f000 f875 	bl	8005a24 <ov9655_read_reg>
 800593a:	4603      	mov	r3, r0
 800593c:	2b00      	cmp	r3, #0
 800593e:	d003      	beq.n	8005948 <OV9655_NightModeConfig+0x2e>
  {
    ret = OV9655_ERROR;
 8005940:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005944:	60fb      	str	r3, [r7, #12]
 8005946:	e01c      	b.n	8005982 <OV9655_NightModeConfig+0x68>
  }
  else
  {
    if(Cmd == NIGHT_MODE_ENABLE)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	2b01      	cmp	r3, #1
 800594c:	d105      	bne.n	800595a <OV9655_NightModeConfig+0x40>
    {
      tmp |= 0x80U;
 800594e:	7afb      	ldrb	r3, [r7, #11]
 8005950:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8005954:	b2db      	uxtb	r3, r3
 8005956:	72fb      	strb	r3, [r7, #11]
 8005958:	e004      	b.n	8005964 <OV9655_NightModeConfig+0x4a>
    }
    else
    {
      tmp &= 0x7FU;
 800595a:	7afb      	ldrb	r3, [r7, #11]
 800595c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005960:	b2db      	uxtb	r3, r3
 8005962:	72fb      	strb	r3, [r7, #11]
    }

    if(ov9655_write_reg(&pObj->Ctx, OV9655_COMMON_CTRL11 ,&tmp, 1) != OV9655_OK)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f103 0018 	add.w	r0, r3, #24
 800596a:	f107 020b 	add.w	r2, r7, #11
 800596e:	2301      	movs	r3, #1
 8005970:	213b      	movs	r1, #59	@ 0x3b
 8005972:	f000 f86e 	bl	8005a52 <ov9655_write_reg>
 8005976:	4603      	mov	r3, r0
 8005978:	2b00      	cmp	r3, #0
 800597a:	d002      	beq.n	8005982 <OV9655_NightModeConfig+0x68>
    {
      ret = OV9655_ERROR;
 800597c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8005980:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8005982:	68fb      	ldr	r3, [r7, #12]
}
 8005984:	4618      	mov	r0, r3
 8005986:	3710      	adds	r7, #16
 8005988:	46bd      	mov	sp, r7
 800598a:	bd80      	pop	{r7, pc}

0800598c <OV9655_Delay>:
  * @param pObj   pointer to component object
  * @param Delay  specifies the delay time length, in milliseconds
  * @retval OV9655_OK
  */
static int32_t OV9655_Delay(OV9655_Object_t *pObj, uint32_t Delay)
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b084      	sub	sp, #16
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  tickstart = pObj->IO.GetTick();
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	695b      	ldr	r3, [r3, #20]
 800599a:	4798      	blx	r3
 800599c:	4603      	mov	r3, r0
 800599e:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 80059a0:	bf00      	nop
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	695b      	ldr	r3, [r3, #20]
 80059a6:	4798      	blx	r3
 80059a8:	4603      	mov	r3, r0
 80059aa:	461a      	mov	r2, r3
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	1ad3      	subs	r3, r2, r3
 80059b0:	683a      	ldr	r2, [r7, #0]
 80059b2:	429a      	cmp	r2, r3
 80059b4:	d8f5      	bhi.n	80059a2 <OV9655_Delay+0x16>
  {
  }
  return OV9655_OK;
 80059b6:	2300      	movs	r3, #0
}
 80059b8:	4618      	mov	r0, r3
 80059ba:	3710      	adds	r7, #16
 80059bc:	46bd      	mov	sp, r7
 80059be:	bd80      	pop	{r7, pc}

080059c0 <OV9655_ReadRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80059c0:	b590      	push	{r4, r7, lr}
 80059c2:	b087      	sub	sp, #28
 80059c4:	af00      	add	r7, sp, #0
 80059c6:	60f8      	str	r0, [r7, #12]
 80059c8:	607a      	str	r2, [r7, #4]
 80059ca:	461a      	mov	r2, r3
 80059cc:	460b      	mov	r3, r1
 80059ce:	817b      	strh	r3, [r7, #10]
 80059d0:	4613      	mov	r3, r2
 80059d2:	813b      	strh	r3, [r7, #8]
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 80059d8:	697b      	ldr	r3, [r7, #20]
 80059da:	691c      	ldr	r4, [r3, #16]
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	8918      	ldrh	r0, [r3, #8]
 80059e0:	893b      	ldrh	r3, [r7, #8]
 80059e2:	8979      	ldrh	r1, [r7, #10]
 80059e4:	687a      	ldr	r2, [r7, #4]
 80059e6:	47a0      	blx	r4
 80059e8:	4603      	mov	r3, r0
}
 80059ea:	4618      	mov	r0, r3
 80059ec:	371c      	adds	r7, #28
 80059ee:	46bd      	mov	sp, r7
 80059f0:	bd90      	pop	{r4, r7, pc}

080059f2 <OV9655_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t OV9655_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 80059f2:	b590      	push	{r4, r7, lr}
 80059f4:	b087      	sub	sp, #28
 80059f6:	af00      	add	r7, sp, #0
 80059f8:	60f8      	str	r0, [r7, #12]
 80059fa:	607a      	str	r2, [r7, #4]
 80059fc:	461a      	mov	r2, r3
 80059fe:	460b      	mov	r3, r1
 8005a00:	817b      	strh	r3, [r7, #10]
 8005a02:	4613      	mov	r3, r2
 8005a04:	813b      	strh	r3, [r7, #8]
  OV9655_Object_t *pObj = (OV9655_Object_t *)handle;
 8005a06:	68fb      	ldr	r3, [r7, #12]
 8005a08:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	68dc      	ldr	r4, [r3, #12]
 8005a0e:	697b      	ldr	r3, [r7, #20]
 8005a10:	8918      	ldrh	r0, [r3, #8]
 8005a12:	893b      	ldrh	r3, [r7, #8]
 8005a14:	8979      	ldrh	r1, [r7, #10]
 8005a16:	687a      	ldr	r2, [r7, #4]
 8005a18:	47a0      	blx	r4
 8005a1a:	4603      	mov	r3, r0
}
 8005a1c:	4618      	mov	r0, r3
 8005a1e:	371c      	adds	r7, #28
 8005a20:	46bd      	mov	sp, r7
 8005a22:	bd90      	pop	{r4, r7, pc}

08005a24 <ov9655_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : Data Read
*******************************************************************************/
int32_t ov9655_read_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *pdata, uint16_t length)
{
 8005a24:	b590      	push	{r4, r7, lr}
 8005a26:	b085      	sub	sp, #20
 8005a28:	af00      	add	r7, sp, #0
 8005a2a:	60f8      	str	r0, [r7, #12]
 8005a2c:	607a      	str	r2, [r7, #4]
 8005a2e:	461a      	mov	r2, r3
 8005a30:	460b      	mov	r3, r1
 8005a32:	817b      	strh	r3, [r7, #10]
 8005a34:	4613      	mov	r3, r2
 8005a36:	813b      	strh	r3, [r7, #8]
  return ctx->ReadReg(ctx->handle, reg, pdata, length);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	685c      	ldr	r4, [r3, #4]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6898      	ldr	r0, [r3, #8]
 8005a40:	893b      	ldrh	r3, [r7, #8]
 8005a42:	8979      	ldrh	r1, [r7, #10]
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	47a0      	blx	r4
 8005a48:	4603      	mov	r3, r0
}
 8005a4a:	4618      	mov	r0, r3
 8005a4c:	3714      	adds	r7, #20
 8005a4e:	46bd      	mov	sp, r7
 8005a50:	bd90      	pop	{r4, r7, pc}

08005a52 <ov9655_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, Data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t ov9655_write_reg(ov9655_ctx_t *ctx, uint16_t reg, uint8_t *data, uint16_t length)
{
 8005a52:	b590      	push	{r4, r7, lr}
 8005a54:	b085      	sub	sp, #20
 8005a56:	af00      	add	r7, sp, #0
 8005a58:	60f8      	str	r0, [r7, #12]
 8005a5a:	607a      	str	r2, [r7, #4]
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	460b      	mov	r3, r1
 8005a60:	817b      	strh	r3, [r7, #10]
 8005a62:	4613      	mov	r3, r2
 8005a64:	813b      	strh	r3, [r7, #8]
  return ctx->WriteReg(ctx->handle, reg, data, length);
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681c      	ldr	r4, [r3, #0]
 8005a6a:	68fb      	ldr	r3, [r7, #12]
 8005a6c:	6898      	ldr	r0, [r3, #8]
 8005a6e:	893b      	ldrh	r3, [r7, #8]
 8005a70:	8979      	ldrh	r1, [r7, #10]
 8005a72:	687a      	ldr	r2, [r7, #4]
 8005a74:	47a0      	blx	r4
 8005a76:	4603      	mov	r3, r0
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	3714      	adds	r7, #20
 8005a7c:	46bd      	mov	sp, r7
 8005a7e:	bd90      	pop	{r4, r7, pc}

08005a80 <WM8994_Init>:
  * @param pObj pointer to component object
  * @param pInit pointer de component init structure
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Init(WM8994_Object_t *pObj, WM8994_Init_t *pInit)
{
 8005a80:	b580      	push	{r7, lr}
 8005a82:	b084      	sub	sp, #16
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
 8005a88:	6039      	str	r1, [r7, #0]
  int32_t ret;
  static uint8_t ColdStartup = 1;
  uint16_t tmp;
  
  /* wm8994 Errata Work-Arounds */
  tmp = 0x0003;
 8005a8a:	2303      	movs	r3, #3
 8005a8c:	817b      	strh	r3, [r7, #10]
  ret = wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	f103 0018 	add.w	r0, r3, #24
 8005a94:	f107 020a 	add.w	r2, r7, #10
 8005a98:	2302      	movs	r3, #2
 8005a9a:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005a9e:	f001 fdb9 	bl	8007614 <wm8994_write_reg>
 8005aa2:	60f8      	str	r0, [r7, #12]
  tmp = 0x0000;
 8005aa4:	2300      	movs	r3, #0
 8005aa6:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, 0x817, &tmp, 2);
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	f103 0018 	add.w	r0, r3, #24
 8005aae:	f107 020a 	add.w	r2, r7, #10
 8005ab2:	2302      	movs	r3, #2
 8005ab4:	f640 0117 	movw	r1, #2071	@ 0x817
 8005ab8:	f001 fdac 	bl	8007614 <wm8994_write_reg>
 8005abc:	4602      	mov	r2, r0
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	4413      	add	r3, r2
 8005ac2:	60fb      	str	r3, [r7, #12]
  ret += wm8994_write_reg(&pObj->Ctx, 0x102, &tmp, 2);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	f103 0018 	add.w	r0, r3, #24
 8005aca:	f107 020a 	add.w	r2, r7, #10
 8005ace:	2302      	movs	r3, #2
 8005ad0:	f44f 7181 	mov.w	r1, #258	@ 0x102
 8005ad4:	f001 fd9e 	bl	8007614 <wm8994_write_reg>
 8005ad8:	4602      	mov	r2, r0
 8005ada:	68fb      	ldr	r3, [r7, #12]
 8005adc:	4413      	add	r3, r2
 8005ade:	60fb      	str	r3, [r7, #12]
  
  /* Enable VMID soft start (fast), Start-up Bias Current Enabled: 0x006C at reg 0x39 */
  /* Bias Enable */
  tmp = 0x006C;
 8005ae0:	236c      	movs	r3, #108	@ 0x6c
 8005ae2:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANTIPOP2, &tmp, 2);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	f103 0018 	add.w	r0, r3, #24
 8005aea:	f107 020a 	add.w	r2, r7, #10
 8005aee:	2302      	movs	r3, #2
 8005af0:	2139      	movs	r1, #57	@ 0x39
 8005af2:	f001 fd8f 	bl	8007614 <wm8994_write_reg>
 8005af6:	4602      	mov	r2, r0
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	4413      	add	r3, r2
 8005afc:	60fb      	str	r3, [r7, #12]
  
  /* Enable bias generator, Enable VMID */
  if (pInit->InputDevice != WM8994_IN_NONE)
 8005afe:	683b      	ldr	r3, [r7, #0]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	2b00      	cmp	r3, #0
 8005b04:	d00f      	beq.n	8005b26 <WM8994_Init+0xa6>
  {
    tmp = 0x0013;
 8005b06:	2313      	movs	r3, #19
 8005b08:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);  
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f103 0018 	add.w	r0, r3, #24
 8005b10:	f107 020a 	add.w	r2, r7, #10
 8005b14:	2302      	movs	r3, #2
 8005b16:	2101      	movs	r1, #1
 8005b18:	f001 fd7c 	bl	8007614 <wm8994_write_reg>
 8005b1c:	4602      	mov	r2, r0
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	4413      	add	r3, r2
 8005b22:	60fb      	str	r3, [r7, #12]
 8005b24:	e00e      	b.n	8005b44 <WM8994_Init+0xc4>
  }
  else
  { 
    tmp = 0x0003;
 8005b26:	2303      	movs	r3, #3
 8005b28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f103 0018 	add.w	r0, r3, #24
 8005b30:	f107 020a 	add.w	r2, r7, #10
 8005b34:	2302      	movs	r3, #2
 8005b36:	2101      	movs	r1, #1
 8005b38:	f001 fd6c 	bl	8007614 <wm8994_write_reg>
 8005b3c:	4602      	mov	r2, r0
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	4413      	add	r3, r2
 8005b42:	60fb      	str	r3, [r7, #12]
  }
  
  /* Add Delay */
  (void)WM8994_Delay(pObj, 50);
 8005b44:	2132      	movs	r1, #50	@ 0x32
 8005b46:	6878      	ldr	r0, [r7, #4]
 8005b48:	f001 fcec 	bl	8007524 <WM8994_Delay>
  
  /* Path Configurations for output */
  switch (pInit->OutputDevice)
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	2b03      	cmp	r3, #3
 8005b52:	f200 8141 	bhi.w	8005dd8 <WM8994_Init+0x358>
 8005b56:	a201      	add	r2, pc, #4	@ (adr r2, 8005b5c <WM8994_Init+0xdc>)
 8005b58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b5c:	08005e73 	.word	0x08005e73
 8005b60:	08005b6d 	.word	0x08005b6d
 8005b64:	08005c07 	.word	0x08005c07
 8005b68:	08005ca1 	.word	0x08005ca1
  {
  case WM8994_OUT_SPEAKER: 
    /* Enable DAC1 (Left), Enable DAC1 (Right),
    Disable DAC2 (Left), Disable DAC2 (Right)*/
    tmp = 0x0C0C;
 8005b6c:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8005b70:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8005b72:	687b      	ldr	r3, [r7, #4]
 8005b74:	f103 0018 	add.w	r0, r3, #24
 8005b78:	f107 020a 	add.w	r2, r7, #10
 8005b7c:	2302      	movs	r3, #2
 8005b7e:	2105      	movs	r1, #5
 8005b80:	f001 fd48 	bl	8007614 <wm8994_write_reg>
 8005b84:	4602      	mov	r2, r0
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	4413      	add	r3, r2
 8005b8a:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0000;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	f103 0018 	add.w	r0, r3, #24
 8005b96:	f107 020a 	add.w	r2, r7, #10
 8005b9a:	2302      	movs	r3, #2
 8005b9c:	f240 6101 	movw	r1, #1537	@ 0x601
 8005ba0:	f001 fd38 	bl	8007614 <wm8994_write_reg>
 8005ba4:	4602      	mov	r2, r0
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	4413      	add	r3, r2
 8005baa:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	f103 0018 	add.w	r0, r3, #24
 8005bb2:	f107 020a 	add.w	r2, r7, #10
 8005bb6:	2302      	movs	r3, #2
 8005bb8:	f240 6102 	movw	r1, #1538	@ 0x602
 8005bbc:	f001 fd2a 	bl	8007614 <wm8994_write_reg>
 8005bc0:	4602      	mov	r2, r0
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	4413      	add	r3, r2
 8005bc6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0002;
 8005bc8:	2302      	movs	r3, #2
 8005bca:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	f103 0018 	add.w	r0, r3, #24
 8005bd2:	f107 020a 	add.w	r2, r7, #10
 8005bd6:	2302      	movs	r3, #2
 8005bd8:	f240 6104 	movw	r1, #1540	@ 0x604
 8005bdc:	f001 fd1a 	bl	8007614 <wm8994_write_reg>
 8005be0:	4602      	mov	r2, r0
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	4413      	add	r3, r2
 8005be6:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f103 0018 	add.w	r0, r3, #24
 8005bee:	f107 020a 	add.w	r2, r7, #10
 8005bf2:	2302      	movs	r3, #2
 8005bf4:	f240 6105 	movw	r1, #1541	@ 0x605
 8005bf8:	f001 fd0c 	bl	8007614 <wm8994_write_reg>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	68fb      	ldr	r3, [r7, #12]
 8005c00:	4413      	add	r3, r2
 8005c02:	60fb      	str	r3, [r7, #12]
    break;
 8005c04:	e136      	b.n	8005e74 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_HEADPHONE:    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8005c06:	f240 3303 	movw	r3, #771	@ 0x303
 8005c0a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f103 0018 	add.w	r0, r3, #24
 8005c12:	f107 020a 	add.w	r2, r7, #10
 8005c16:	2302      	movs	r3, #2
 8005c18:	2105      	movs	r1, #5
 8005c1a:	f001 fcfb 	bl	8007614 <wm8994_write_reg>
 8005c1e:	4602      	mov	r2, r0
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	4413      	add	r3, r2
 8005c24:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8005c26:	2301      	movs	r3, #1
 8005c28:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8005c2a:	687b      	ldr	r3, [r7, #4]
 8005c2c:	f103 0018 	add.w	r0, r3, #24
 8005c30:	f107 020a 	add.w	r2, r7, #10
 8005c34:	2302      	movs	r3, #2
 8005c36:	f240 6101 	movw	r1, #1537	@ 0x601
 8005c3a:	f001 fceb 	bl	8007614 <wm8994_write_reg>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	68fb      	ldr	r3, [r7, #12]
 8005c42:	4413      	add	r3, r2
 8005c44:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	f103 0018 	add.w	r0, r3, #24
 8005c4c:	f107 020a 	add.w	r2, r7, #10
 8005c50:	2302      	movs	r3, #2
 8005c52:	f240 6102 	movw	r1, #1538	@ 0x602
 8005c56:	f001 fcdd 	bl	8007614 <wm8994_write_reg>
 8005c5a:	4602      	mov	r2, r0
 8005c5c:	68fb      	ldr	r3, [r7, #12]
 8005c5e:	4413      	add	r3, r2
 8005c60:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8005c62:	2300      	movs	r3, #0
 8005c64:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	f103 0018 	add.w	r0, r3, #24
 8005c6c:	f107 020a 	add.w	r2, r7, #10
 8005c70:	2302      	movs	r3, #2
 8005c72:	f240 6104 	movw	r1, #1540	@ 0x604
 8005c76:	f001 fccd 	bl	8007614 <wm8994_write_reg>
 8005c7a:	4602      	mov	r2, r0
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	4413      	add	r3, r2
 8005c80:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	f103 0018 	add.w	r0, r3, #24
 8005c88:	f107 020a 	add.w	r2, r7, #10
 8005c8c:	2302      	movs	r3, #2
 8005c8e:	f240 6105 	movw	r1, #1541	@ 0x605
 8005c92:	f001 fcbf 	bl	8007614 <wm8994_write_reg>
 8005c96:	4602      	mov	r2, r0
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	4413      	add	r3, r2
 8005c9c:	60fb      	str	r3, [r7, #12]
    break;
 8005c9e:	e0e9      	b.n	8005e74 <WM8994_Init+0x3f4>
    
  case WM8994_OUT_BOTH:
    if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	2b05      	cmp	r3, #5
 8005ca6:	d14a      	bne.n	8005d3e <WM8994_Init+0x2be>
    {
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8005ca8:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8005cac:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	f103 0018 	add.w	r0, r3, #24
 8005cb4:	f107 020a 	add.w	r2, r7, #10
 8005cb8:	2302      	movs	r3, #2
 8005cba:	2105      	movs	r1, #5
 8005cbc:	f001 fcaa 	bl	8007614 <wm8994_write_reg>
 8005cc0:	4602      	mov	r2, r0
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	4413      	add	r3, r2
 8005cc6:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0003;
 8005cc8:	2303      	movs	r3, #3
 8005cca:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	f103 0018 	add.w	r0, r3, #24
 8005cd2:	f107 020a 	add.w	r2, r7, #10
 8005cd6:	2302      	movs	r3, #2
 8005cd8:	f240 6101 	movw	r1, #1537	@ 0x601
 8005cdc:	f001 fc9a 	bl	8007614 <wm8994_write_reg>
 8005ce0:	4602      	mov	r2, r0
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4413      	add	r3, r2
 8005ce6:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	f103 0018 	add.w	r0, r3, #24
 8005cee:	f107 020a 	add.w	r2, r7, #10
 8005cf2:	2302      	movs	r3, #2
 8005cf4:	f240 6102 	movw	r1, #1538	@ 0x602
 8005cf8:	f001 fc8c 	bl	8007614 <wm8994_write_reg>
 8005cfc:	4602      	mov	r2, r0
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	4413      	add	r3, r2
 8005d02:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 2 (Left) mixer path
      Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path  */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f103 0018 	add.w	r0, r3, #24
 8005d0a:	f107 020a 	add.w	r2, r7, #10
 8005d0e:	2302      	movs	r3, #2
 8005d10:	f240 6104 	movw	r1, #1540	@ 0x604
 8005d14:	f001 fc7e 	bl	8007614 <wm8994_write_reg>
 8005d18:	4602      	mov	r2, r0
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	4413      	add	r3, r2
 8005d1e:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 2 (Right) mixer path
      Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */       
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	f103 0018 	add.w	r0, r3, #24
 8005d26:	f107 020a 	add.w	r2, r7, #10
 8005d2a:	2302      	movs	r3, #2
 8005d2c:	f240 6105 	movw	r1, #1541	@ 0x605
 8005d30:	f001 fc70 	bl	8007614 <wm8994_write_reg>
 8005d34:	4602      	mov	r2, r0
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	4413      	add	r3, r2
 8005d3a:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
      
      /* Enable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
    }
    break;
 8005d3c:	e09a      	b.n	8005e74 <WM8994_Init+0x3f4>
      tmp = 0x0F0F;
 8005d3e:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8005d42:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	f103 0018 	add.w	r0, r3, #24
 8005d4a:	f107 020a 	add.w	r2, r7, #10
 8005d4e:	2302      	movs	r3, #2
 8005d50:	2105      	movs	r1, #5
 8005d52:	f001 fc5f 	bl	8007614 <wm8994_write_reg>
 8005d56:	4602      	mov	r2, r0
 8005d58:	68fb      	ldr	r3, [r7, #12]
 8005d5a:	4413      	add	r3, r2
 8005d5c:	60fb      	str	r3, [r7, #12]
      tmp = 0x0001;
 8005d5e:	2301      	movs	r3, #1
 8005d60:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	f103 0018 	add.w	r0, r3, #24
 8005d68:	f107 020a 	add.w	r2, r7, #10
 8005d6c:	2302      	movs	r3, #2
 8005d6e:	f240 6101 	movw	r1, #1537	@ 0x601
 8005d72:	f001 fc4f 	bl	8007614 <wm8994_write_reg>
 8005d76:	4602      	mov	r2, r0
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	4413      	add	r3, r2
 8005d7c:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f103 0018 	add.w	r0, r3, #24
 8005d84:	f107 020a 	add.w	r2, r7, #10
 8005d88:	2302      	movs	r3, #2
 8005d8a:	f240 6102 	movw	r1, #1538	@ 0x602
 8005d8e:	f001 fc41 	bl	8007614 <wm8994_write_reg>
 8005d92:	4602      	mov	r2, r0
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4413      	add	r3, r2
 8005d98:	60fb      	str	r3, [r7, #12]
      tmp = 0x0002;
 8005d9a:	2302      	movs	r3, #2
 8005d9c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	f103 0018 	add.w	r0, r3, #24
 8005da4:	f107 020a 	add.w	r2, r7, #10
 8005da8:	2302      	movs	r3, #2
 8005daa:	f240 6104 	movw	r1, #1540	@ 0x604
 8005dae:	f001 fc31 	bl	8007614 <wm8994_write_reg>
 8005db2:	4602      	mov	r2, r0
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	4413      	add	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	f103 0018 	add.w	r0, r3, #24
 8005dc0:	f107 020a 	add.w	r2, r7, #10
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	f240 6105 	movw	r1, #1541	@ 0x605
 8005dca:	f001 fc23 	bl	8007614 <wm8994_write_reg>
 8005dce:	4602      	mov	r2, r0
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	4413      	add	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
    break;
 8005dd6:	e04d      	b.n	8005e74 <WM8994_Init+0x3f4>
    break;
  case WM8994_OUT_AUTO :
  default:
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8005dd8:	f240 3303 	movw	r3, #771	@ 0x303
 8005ddc:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f103 0018 	add.w	r0, r3, #24
 8005de4:	f107 020a 	add.w	r2, r7, #10
 8005de8:	2302      	movs	r3, #2
 8005dea:	2105      	movs	r1, #5
 8005dec:	f001 fc12 	bl	8007614 <wm8994_write_reg>
 8005df0:	4602      	mov	r2, r0
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	4413      	add	r3, r2
 8005df6:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	f103 0018 	add.w	r0, r3, #24
 8005e02:	f107 020a 	add.w	r2, r7, #10
 8005e06:	2302      	movs	r3, #2
 8005e08:	f240 6101 	movw	r1, #1537	@ 0x601
 8005e0c:	f001 fc02 	bl	8007614 <wm8994_write_reg>
 8005e10:	4602      	mov	r2, r0
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	4413      	add	r3, r2
 8005e16:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f103 0018 	add.w	r0, r3, #24
 8005e1e:	f107 020a 	add.w	r2, r7, #10
 8005e22:	2302      	movs	r3, #2
 8005e24:	f240 6102 	movw	r1, #1538	@ 0x602
 8005e28:	f001 fbf4 	bl	8007614 <wm8994_write_reg>
 8005e2c:	4602      	mov	r2, r0
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	4413      	add	r3, r2
 8005e32:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8005e34:	2300      	movs	r3, #0
 8005e36:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	f103 0018 	add.w	r0, r3, #24
 8005e3e:	f107 020a 	add.w	r2, r7, #10
 8005e42:	2302      	movs	r3, #2
 8005e44:	f240 6104 	movw	r1, #1540	@ 0x604
 8005e48:	f001 fbe4 	bl	8007614 <wm8994_write_reg>
 8005e4c:	4602      	mov	r2, r0
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	4413      	add	r3, r2
 8005e52:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	f103 0018 	add.w	r0, r3, #24
 8005e5a:	f107 020a 	add.w	r2, r7, #10
 8005e5e:	2302      	movs	r3, #2
 8005e60:	f240 6105 	movw	r1, #1541	@ 0x605
 8005e64:	f001 fbd6 	bl	8007614 <wm8994_write_reg>
 8005e68:	4602      	mov	r2, r0
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	4413      	add	r3, r2
 8005e6e:	60fb      	str	r3, [r7, #12]
    break;
 8005e70:	e000      	b.n	8005e74 <WM8994_Init+0x3f4>
    break;
 8005e72:	bf00      	nop
  }
  
  /* Path Configurations for input */
  switch (pInit->InputDevice)
 8005e74:	683b      	ldr	r3, [r7, #0]
 8005e76:	681b      	ldr	r3, [r3, #0]
 8005e78:	3b01      	subs	r3, #1
 8005e7a:	2b04      	cmp	r3, #4
 8005e7c:	f200 81e0 	bhi.w	8006240 <WM8994_Init+0x7c0>
 8005e80:	a201      	add	r2, pc, #4	@ (adr r2, 8005e88 <WM8994_Init+0x408>)
 8005e82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005e86:	bf00      	nop
 8005e88:	08006071 	.word	0x08006071
 8005e8c:	08005e9d 	.word	0x08005e9d
 8005e90:	08005f5b 	.word	0x08005f5b
 8005e94:	08006241 	.word	0x08006241
 8005e98:	0800612f 	.word	0x0800612f
  {
  case WM8994_IN_MIC2 :
    /* Enable AIF1ADC2 (Left), Enable AIF1ADC2 (Right)
    * Enable DMICDAT2 (Left), Enable DMICDAT2 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0C30;
 8005e9c:	f44f 6343 	mov.w	r3, #3120	@ 0xc30
 8005ea0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	f103 0018 	add.w	r0, r3, #24
 8005ea8:	f107 020a 	add.w	r2, r7, #10
 8005eac:	2302      	movs	r3, #2
 8005eae:	2104      	movs	r1, #4
 8005eb0:	f001 fbb0 	bl	8007614 <wm8994_write_reg>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	4413      	add	r3, r2
 8005eba:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 8005ebc:	23db      	movs	r3, #219	@ 0xdb
 8005ebe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f103 0018 	add.w	r0, r3, #24
 8005ec6:	f107 020a 	add.w	r2, r7, #10
 8005eca:	2302      	movs	r3, #2
 8005ecc:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8005ed0:	f001 fba0 	bl	8007614 <wm8994_write_reg>
 8005ed4:	4602      	mov	r2, r0
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	4413      	add	r3, r2
 8005eda:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, IN2L, IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6000;
 8005edc:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8005ee0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	f103 0018 	add.w	r0, r3, #24
 8005ee8:	f107 020a 	add.w	r2, r7, #10
 8005eec:	2302      	movs	r3, #2
 8005eee:	2102      	movs	r1, #2
 8005ef0:	f001 fb90 	bl	8007614 <wm8994_write_reg>
 8005ef4:	4602      	mov	r2, r0
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	4413      	add	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    tmp = 0x0002;
 8005efc:	2302      	movs	r3, #2
 8005efe:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	f103 0018 	add.w	r0, r3, #24
 8005f06:	f107 020a 	add.w	r2, r7, #10
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 8005f10:	f001 fb80 	bl	8007614 <wm8994_write_reg>
 8005f14:	4602      	mov	r2, r0
 8005f16:	68fb      	ldr	r3, [r7, #12]
 8005f18:	4413      	add	r3, r2
 8005f1a:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	f103 0018 	add.w	r0, r3, #24
 8005f22:	f107 020a 	add.w	r2, r7, #10
 8005f26:	2302      	movs	r3, #2
 8005f28:	f240 6109 	movw	r1, #1545	@ 0x609
 8005f2c:	f001 fb72 	bl	8007614 <wm8994_write_reg>
 8005f30:	4602      	mov	r2, r0
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	4413      	add	r3, r2
 8005f36:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC2 signal detect */
    tmp = 0x000E;
 8005f38:	230e      	movs	r3, #14
 8005f3a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	f103 0018 	add.w	r0, r3, #24
 8005f42:	f107 020a 	add.w	r2, r7, #10
 8005f46:	2302      	movs	r3, #2
 8005f48:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8005f4c:	f001 fb62 	bl	8007614 <wm8994_write_reg>
 8005f50:	4602      	mov	r2, r0
 8005f52:	68fb      	ldr	r3, [r7, #12]
 8005f54:	4413      	add	r3, r2
 8005f56:	60fb      	str	r3, [r7, #12]
    break;
 8005f58:	e173      	b.n	8006242 <WM8994_Init+0x7c2>
    
  case WM8994_IN_LINE1 :
    /* IN1LN_TO_IN1L, IN1RN_TO_IN1R */
    tmp = 0x0011;
 8005f5a:	2311      	movs	r3, #17
 8005f5c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_2, &tmp, 2);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	f103 0018 	add.w	r0, r3, #24
 8005f64:	f107 020a 	add.w	r2, r7, #10
 8005f68:	2302      	movs	r3, #2
 8005f6a:	2128      	movs	r1, #40	@ 0x28
 8005f6c:	f001 fb52 	bl	8007614 <wm8994_write_reg>
 8005f70:	4602      	mov	r2, r0
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	4413      	add	r3, r2
 8005f76:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1L_TO_MIXINL and +30dB on IN1L PGA output */
    tmp = 0x0035;
 8005f78:	2335      	movs	r3, #53	@ 0x35
 8005f7a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_3, &tmp, 2);
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	f103 0018 	add.w	r0, r3, #24
 8005f82:	f107 020a 	add.w	r2, r7, #10
 8005f86:	2302      	movs	r3, #2
 8005f88:	2129      	movs	r1, #41	@ 0x29
 8005f8a:	f001 fb43 	bl	8007614 <wm8994_write_reg>
 8005f8e:	4602      	mov	r2, r0
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	4413      	add	r3, r2
 8005f94:	60fb      	str	r3, [r7, #12]
    
    /* Disable mute on IN1R_TO_MIXINL, Gain = +30dB */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_INPUT_MIXER_4, &tmp, 2);
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	f103 0018 	add.w	r0, r3, #24
 8005f9c:	f107 020a 	add.w	r2, r7, #10
 8005fa0:	2302      	movs	r3, #2
 8005fa2:	212a      	movs	r1, #42	@ 0x2a
 8005fa4:	f001 fb36 	bl	8007614 <wm8994_write_reg>
 8005fa8:	4602      	mov	r2, r0
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	4413      	add	r3, r2
 8005fae:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0303;
 8005fb0:	f240 3303 	movw	r3, #771	@ 0x303
 8005fb4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f103 0018 	add.w	r0, r3, #24
 8005fbc:	f107 020a 	add.w	r2, r7, #10
 8005fc0:	2302      	movs	r3, #2
 8005fc2:	2104      	movs	r1, #4
 8005fc4:	f001 fb26 	bl	8007614 <wm8994_write_reg>
 8005fc8:	4602      	mov	r2, r0
 8005fca:	68fb      	ldr	r3, [r7, #12]
 8005fcc:	4413      	add	r3, r2
 8005fce:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8005fd0:	23db      	movs	r3, #219	@ 0xdb
 8005fd2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f103 0018 	add.w	r0, r3, #24
 8005fda:	f107 020a 	add.w	r2, r7, #10
 8005fde:	2302      	movs	r3, #2
 8005fe0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 8005fe4:	f001 fb16 	bl	8007614 <wm8994_write_reg>
 8005fe8:	4602      	mov	r2, r0
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	4413      	add	r3, r2
 8005fee:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 8005ff0:	f246 3350 	movw	r3, #25424	@ 0x6350
 8005ff4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	f103 0018 	add.w	r0, r3, #24
 8005ffc:	f107 020a 	add.w	r2, r7, #10
 8006000:	2302      	movs	r3, #2
 8006002:	2102      	movs	r1, #2
 8006004:	f001 fb06 	bl	8007614 <wm8994_write_reg>
 8006008:	4602      	mov	r2, r0
 800600a:	68fb      	ldr	r3, [r7, #12]
 800600c:	4413      	add	r3, r2
 800600e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 8006010:	2302      	movs	r3, #2
 8006012:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f103 0018 	add.w	r0, r3, #24
 800601a:	f107 020a 	add.w	r2, r7, #10
 800601e:	2302      	movs	r3, #2
 8006020:	f240 6106 	movw	r1, #1542	@ 0x606
 8006024:	f001 faf6 	bl	8007614 <wm8994_write_reg>
 8006028:	4602      	mov	r2, r0
 800602a:	68fb      	ldr	r3, [r7, #12]
 800602c:	4413      	add	r3, r2
 800602e:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f103 0018 	add.w	r0, r3, #24
 8006036:	f107 020a 	add.w	r2, r7, #10
 800603a:	2302      	movs	r3, #2
 800603c:	f240 6107 	movw	r1, #1543	@ 0x607
 8006040:	f001 fae8 	bl	8007614 <wm8994_write_reg>
 8006044:	4602      	mov	r2, r0
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	4413      	add	r3, r2
 800604a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x800D;
 800604c:	f248 030d 	movw	r3, #32781	@ 0x800d
 8006050:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	f103 0018 	add.w	r0, r3, #24
 8006058:	f107 020a 	add.w	r2, r7, #10
 800605c:	2302      	movs	r3, #2
 800605e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006062:	f001 fad7 	bl	8007614 <wm8994_write_reg>
 8006066:	4602      	mov	r2, r0
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	4413      	add	r3, r2
 800606c:	60fb      	str	r3, [r7, #12]
    break;
 800606e:	e0e8      	b.n	8006242 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x030C;
 8006070:	f44f 7343 	mov.w	r3, #780	@ 0x30c
 8006074:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	f103 0018 	add.w	r0, r3, #24
 800607c:	f107 020a 	add.w	r2, r7, #10
 8006080:	2302      	movs	r3, #2
 8006082:	2104      	movs	r1, #4
 8006084:	f001 fac6 	bl	8007614 <wm8994_write_reg>
 8006088:	4602      	mov	r2, r0
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	4413      	add	r3, r2
 800608e:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC1 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    tmp = 0x00DB;
 8006090:	23db      	movs	r3, #219	@ 0xdb
 8006092:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f103 0018 	add.w	r0, r3, #24
 800609a:	f107 020a 	add.w	r2, r7, #10
 800609e:	2302      	movs	r3, #2
 80060a0:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 80060a4:	f001 fab6 	bl	8007614 <wm8994_write_reg>
 80060a8:	4602      	mov	r2, r0
 80060aa:	68fb      	ldr	r3, [r7, #12]
 80060ac:	4413      	add	r3, r2
 80060ae:	60fb      	str	r3, [r7, #12]
    
    /* Enable IN1L and IN1R, Disable IN2L and IN2R, Enable Thermal sensor & shutdown */
    tmp = 0x6350;
 80060b0:	f246 3350 	movw	r3, #25424	@ 0x6350
 80060b4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f103 0018 	add.w	r0, r3, #24
 80060bc:	f107 020a 	add.w	r2, r7, #10
 80060c0:	2302      	movs	r3, #2
 80060c2:	2102      	movs	r1, #2
 80060c4:	f001 faa6 	bl	8007614 <wm8994_write_reg>
 80060c8:	4602      	mov	r2, r0
 80060ca:	68fb      	ldr	r3, [r7, #12]
 80060cc:	4413      	add	r3, r2
 80060ce:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80060d0:	2302      	movs	r3, #2
 80060d2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f103 0018 	add.w	r0, r3, #24
 80060da:	f107 020a 	add.w	r2, r7, #10
 80060de:	2302      	movs	r3, #2
 80060e0:	f240 6106 	movw	r1, #1542	@ 0x606
 80060e4:	f001 fa96 	bl	8007614 <wm8994_write_reg>
 80060e8:	4602      	mov	r2, r0
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	4413      	add	r3, r2
 80060ee:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	f103 0018 	add.w	r0, r3, #24
 80060f6:	f107 020a 	add.w	r2, r7, #10
 80060fa:	2302      	movs	r3, #2
 80060fc:	f240 6107 	movw	r1, #1543	@ 0x607
 8006100:	f001 fa88 	bl	8007614 <wm8994_write_reg>
 8006104:	4602      	mov	r2, r0
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	4413      	add	r3, r2
 800610a:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800610c:	230d      	movs	r3, #13
 800610e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f103 0018 	add.w	r0, r3, #24
 8006116:	f107 020a 	add.w	r2, r7, #10
 800611a:	2302      	movs	r3, #2
 800611c:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006120:	f001 fa78 	bl	8007614 <wm8994_write_reg>
 8006124:	4602      	mov	r2, r0
 8006126:	68fb      	ldr	r3, [r7, #12]
 8006128:	4413      	add	r3, r2
 800612a:	60fb      	str	r3, [r7, #12]
    break;
 800612c:	e089      	b.n	8006242 <WM8994_Init+0x7c2>
    
  case WM8994_IN_MIC1_MIC2 :
    /* Enable AIF1ADC1 (Left), Enable AIF1ADC1 (Right)
    * Enable DMICDAT1 (Left), Enable DMICDAT1 (Right)
    * Enable Left ADC, Enable Right ADC */
    tmp = 0x0F3C;
 800612e:	f640 733c 	movw	r3, #3900	@ 0xf3c
 8006132:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_4, &tmp, 2);
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	f103 0018 	add.w	r0, r3, #24
 800613a:	f107 020a 	add.w	r2, r7, #10
 800613e:	2302      	movs	r3, #2
 8006140:	2104      	movs	r1, #4
 8006142:	f001 fa67 	bl	8007614 <wm8994_write_reg>
 8006146:	4602      	mov	r2, r0
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	4413      	add	r3, r2
 800614c:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC2 Left/Right Timeslot 1 */
    tmp = 0x00DB;
 800614e:	23db      	movs	r3, #219	@ 0xdb
 8006150:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC2, &tmp, 2);
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f103 0018 	add.w	r0, r3, #24
 8006158:	f107 020a 	add.w	r2, r7, #10
 800615c:	2302      	movs	r3, #2
 800615e:	f44f 618a 	mov.w	r1, #1104	@ 0x450
 8006162:	f001 fa57 	bl	8007614 <wm8994_write_reg>
 8006166:	4602      	mov	r2, r0
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	4413      	add	r3, r2
 800616c:	60fb      	str	r3, [r7, #12]
    
    /* Enable AIF1 DRC2 Signal Detect & DRC in AIF1ADC1 Left/Right Timeslot 0 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DRC1, &tmp, 2);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	f103 0018 	add.w	r0, r3, #24
 8006174:	f107 020a 	add.w	r2, r7, #10
 8006178:	2302      	movs	r3, #2
 800617a:	f44f 6188 	mov.w	r1, #1088	@ 0x440
 800617e:	f001 fa49 	bl	8007614 <wm8994_write_reg>
 8006182:	4602      	mov	r2, r0
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	4413      	add	r3, r2
 8006188:	60fb      	str	r3, [r7, #12]
    
    /* Disable IN1L, IN1R, Enable IN2L, IN2R, Thermal sensor & shutdown */
    tmp = 0x63A0;
 800618a:	f246 33a0 	movw	r3, #25504	@ 0x63a0
 800618e:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2);
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f103 0018 	add.w	r0, r3, #24
 8006196:	f107 020a 	add.w	r2, r7, #10
 800619a:	2302      	movs	r3, #2
 800619c:	2102      	movs	r1, #2
 800619e:	f001 fa39 	bl	8007614 <wm8994_write_reg>
 80061a2:	4602      	mov	r2, r0
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	4413      	add	r3, r2
 80061a8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCL(Left) to AIF1 Timeslot 0 (Left) mixer path */
    tmp = 0x0002;
 80061aa:	2302      	movs	r3, #2
 80061ac:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LMR, &tmp, 2);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f103 0018 	add.w	r0, r3, #24
 80061b4:	f107 020a 	add.w	r2, r7, #10
 80061b8:	2302      	movs	r3, #2
 80061ba:	f240 6106 	movw	r1, #1542	@ 0x606
 80061be:	f001 fa29 	bl	8007614 <wm8994_write_reg>
 80061c2:	4602      	mov	r2, r0
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	4413      	add	r3, r2
 80061c8:	60fb      	str	r3, [r7, #12]
    
    /* Enable the ADCR(Right) to AIF1 Timeslot 0 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RMR, &tmp, 2);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f103 0018 	add.w	r0, r3, #24
 80061d0:	f107 020a 	add.w	r2, r7, #10
 80061d4:	2302      	movs	r3, #2
 80061d6:	f240 6107 	movw	r1, #1543	@ 0x607
 80061da:	f001 fa1b 	bl	8007614 <wm8994_write_reg>
 80061de:	4602      	mov	r2, r0
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	4413      	add	r3, r2
 80061e4:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Left) to AIF1 Timeslot 1 (Left) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LMR, &tmp, 2);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	f103 0018 	add.w	r0, r3, #24
 80061ec:	f107 020a 	add.w	r2, r7, #10
 80061f0:	2302      	movs	r3, #2
 80061f2:	f44f 61c1 	mov.w	r1, #1544	@ 0x608
 80061f6:	f001 fa0d 	bl	8007614 <wm8994_write_reg>
 80061fa:	4602      	mov	r2, r0
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	4413      	add	r3, r2
 8006200:	60fb      	str	r3, [r7, #12]
    
    /* Enable the DMIC2(Right) to AIF1 Timeslot 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RMR, &tmp, 2);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	f103 0018 	add.w	r0, r3, #24
 8006208:	f107 020a 	add.w	r2, r7, #10
 800620c:	2302      	movs	r3, #2
 800620e:	f240 6109 	movw	r1, #1545	@ 0x609
 8006212:	f001 f9ff 	bl	8007614 <wm8994_write_reg>
 8006216:	4602      	mov	r2, r0
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	4413      	add	r3, r2
 800621c:	60fb      	str	r3, [r7, #12]
    
    /* GPIO1 pin configuration GP1_DIR = output, GP1_FN = AIF1 DRC1 signal detect */
    tmp = 0x000D;
 800621e:	230d      	movs	r3, #13
 8006220:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_GPIO1, &tmp, 2);
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	f103 0018 	add.w	r0, r3, #24
 8006228:	f107 020a 	add.w	r2, r7, #10
 800622c:	2302      	movs	r3, #2
 800622e:	f44f 61e0 	mov.w	r1, #1792	@ 0x700
 8006232:	f001 f9ef 	bl	8007614 <wm8994_write_reg>
 8006236:	4602      	mov	r2, r0
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	4413      	add	r3, r2
 800623c:	60fb      	str	r3, [r7, #12]
    
    break;    
 800623e:	e000      	b.n	8006242 <WM8994_Init+0x7c2>
  case WM8994_IN_LINE2 :
  case WM8994_IN_NONE:      
  default:
    /* Actually, no other input devices supported */
    break;
 8006240:	bf00      	nop
  }
  
  /*  Clock Configurations */
  ret += WM8994_SetFrequency(pObj, pInit->Frequency);
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	689b      	ldr	r3, [r3, #8]
 8006246:	4619      	mov	r1, r3
 8006248:	6878      	ldr	r0, [r7, #4]
 800624a:	f000 fff9 	bl	8007240 <WM8994_SetFrequency>
 800624e:	4602      	mov	r2, r0
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	4413      	add	r3, r2
 8006254:	60fb      	str	r3, [r7, #12]
  
  if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 8006256:	683b      	ldr	r3, [r7, #0]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	2b05      	cmp	r3, #5
 800625c:	d11a      	bne.n	8006294 <WM8994_Init+0x814>
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = DSP mode */
    ret += WM8994_SetResolution(pObj, WM8994_RESOLUTION_16b);
 800625e:	2100      	movs	r1, #0
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 ff59 	bl	8007118 <WM8994_SetResolution>
 8006266:	4602      	mov	r2, r0
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	4413      	add	r3, r2
 800626c:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_DSP);
 800626e:	2103      	movs	r1, #3
 8006270:	6878      	ldr	r0, [r7, #4]
 8006272:	f000 ffab 	bl	80071cc <WM8994_SetProtocol>
 8006276:	4602      	mov	r2, r0
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	4413      	add	r3, r2
 800627c:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	3318      	adds	r3, #24
 8006282:	2101      	movs	r1, #1
 8006284:	4618      	mov	r0, r3
 8006286:	f001 faf5 	bl	8007874 <wm8994_aif1_control1_adcr_src>
 800628a:	4602      	mov	r2, r0
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	4413      	add	r3, r2
 8006290:	60fb      	str	r3, [r7, #12]
 8006292:	e01b      	b.n	80062cc <WM8994_Init+0x84c>
  }
  else
  {
    /* AIF1 Word Length = 16-bits, AIF1 Format = I2S (Default Register Value) */
    ret += WM8994_SetResolution(pObj, pInit->Resolution);
 8006294:	683b      	ldr	r3, [r7, #0]
 8006296:	68db      	ldr	r3, [r3, #12]
 8006298:	4619      	mov	r1, r3
 800629a:	6878      	ldr	r0, [r7, #4]
 800629c:	f000 ff3c 	bl	8007118 <WM8994_SetResolution>
 80062a0:	4602      	mov	r2, r0
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	4413      	add	r3, r2
 80062a6:	60fb      	str	r3, [r7, #12]
    ret += WM8994_SetProtocol(pObj, WM8994_PROTOCOL_I2S);
 80062a8:	2102      	movs	r1, #2
 80062aa:	6878      	ldr	r0, [r7, #4]
 80062ac:	f000 ff8e 	bl	80071cc <WM8994_SetProtocol>
 80062b0:	4602      	mov	r2, r0
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	4413      	add	r3, r2
 80062b6:	60fb      	str	r3, [r7, #12]
    ret += wm8994_aif1_control1_adcr_src(&pObj->Ctx, 1);
 80062b8:	687b      	ldr	r3, [r7, #4]
 80062ba:	3318      	adds	r3, #24
 80062bc:	2101      	movs	r1, #1
 80062be:	4618      	mov	r0, r3
 80062c0:	f001 fad8 	bl	8007874 <wm8994_aif1_control1_adcr_src>
 80062c4:	4602      	mov	r2, r0
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	4413      	add	r3, r2
 80062ca:	60fb      	str	r3, [r7, #12]
  }
  
  /* slave mode */
  tmp = 0x0000;
 80062cc:	2300      	movs	r3, #0
 80062ce:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_MASTER_SLAVE, &tmp, 2);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f103 0018 	add.w	r0, r3, #24
 80062d6:	f107 020a 	add.w	r2, r7, #10
 80062da:	2302      	movs	r3, #2
 80062dc:	f240 3102 	movw	r1, #770	@ 0x302
 80062e0:	f001 f998 	bl	8007614 <wm8994_write_reg>
 80062e4:	4602      	mov	r2, r0
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	4413      	add	r3, r2
 80062ea:	60fb      	str	r3, [r7, #12]
  
  /* Enable the DSP processing clock for AIF1, Enable the core clock */
  tmp = 0x000A;
 80062ec:	230a      	movs	r3, #10
 80062ee:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLOCKING1, &tmp, 2);
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	f103 0018 	add.w	r0, r3, #24
 80062f6:	f107 020a 	add.w	r2, r7, #10
 80062fa:	2302      	movs	r3, #2
 80062fc:	f44f 7102 	mov.w	r1, #520	@ 0x208
 8006300:	f001 f988 	bl	8007614 <wm8994_write_reg>
 8006304:	4602      	mov	r2, r0
 8006306:	68fb      	ldr	r3, [r7, #12]
 8006308:	4413      	add	r3, r2
 800630a:	60fb      	str	r3, [r7, #12]
  
  /* Enable AIF1 Clock, AIF1 Clock Source = MCLK1 pin */
  tmp = 0x0001;
 800630c:	2301      	movs	r3, #1
 800630e:	817b      	strh	r3, [r7, #10]
  ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_CLOCKING1, &tmp, 2);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	f103 0018 	add.w	r0, r3, #24
 8006316:	f107 020a 	add.w	r2, r7, #10
 800631a:	2302      	movs	r3, #2
 800631c:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8006320:	f001 f978 	bl	8007614 <wm8994_write_reg>
 8006324:	4602      	mov	r2, r0
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	4413      	add	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  
  if (pInit->OutputDevice != WM8994_OUT_NONE)  /* Audio output selected */  
 800632c:	683b      	ldr	r3, [r7, #0]
 800632e:	685b      	ldr	r3, [r3, #4]
 8006330:	2b00      	cmp	r3, #0
 8006332:	f000 81c6 	beq.w	80066c2 <WM8994_Init+0xc42>
  {  
    if ((pInit->OutputDevice == WM8994_OUT_HEADPHONE) && (pInit->InputDevice == WM8994_IN_NONE))
 8006336:	683b      	ldr	r3, [r7, #0]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	2b02      	cmp	r3, #2
 800633c:	d164      	bne.n	8006408 <WM8994_Init+0x988>
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	681b      	ldr	r3, [r3, #0]
 8006342:	2b00      	cmp	r3, #0
 8006344:	d160      	bne.n	8006408 <WM8994_Init+0x988>
    {    
      tmp = 0x0100;
 8006346:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800634a:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f103 0018 	add.w	r0, r3, #24
 8006352:	f107 020a 	add.w	r2, r7, #10
 8006356:	2302      	movs	r3, #2
 8006358:	212d      	movs	r1, #45	@ 0x2d
 800635a:	f001 f95b 	bl	8007614 <wm8994_write_reg>
 800635e:	4602      	mov	r2, r0
 8006360:	68fb      	ldr	r3, [r7, #12]
 8006362:	4413      	add	r3, r2
 8006364:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	f103 0018 	add.w	r0, r3, #24
 800636c:	f107 020a 	add.w	r2, r7, #10
 8006370:	2302      	movs	r3, #2
 8006372:	212e      	movs	r1, #46	@ 0x2e
 8006374:	f001 f94e 	bl	8007614 <wm8994_write_reg>
 8006378:	4602      	mov	r2, r0
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	4413      	add	r3, r2
 800637e:	60fb      	str	r3, [r7, #12]
      
      /* Startup sequence for Headphone */
      if(ColdStartup == 1U)
 8006380:	4b52      	ldr	r3, [pc, #328]	@ (80064cc <WM8994_Init+0xa4c>)
 8006382:	781b      	ldrb	r3, [r3, #0]
 8006384:	2b01      	cmp	r3, #1
 8006386:	d119      	bne.n	80063bc <WM8994_Init+0x93c>
      {
        /* Enable/Start the write sequencer */
        tmp = 0x8100;
 8006388:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 800638c:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	f103 0018 	add.w	r0, r3, #24
 8006394:	f107 020a 	add.w	r2, r7, #10
 8006398:	2302      	movs	r3, #2
 800639a:	f44f 7188 	mov.w	r1, #272	@ 0x110
 800639e:	f001 f939 	bl	8007614 <wm8994_write_reg>
 80063a2:	4602      	mov	r2, r0
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	4413      	add	r3, r2
 80063a8:	60fb      	str	r3, [r7, #12]
        
        ColdStartup=0;
 80063aa:	4b48      	ldr	r3, [pc, #288]	@ (80064cc <WM8994_Init+0xa4c>)
 80063ac:	2200      	movs	r2, #0
 80063ae:	701a      	strb	r2, [r3, #0]
        /* Add Delay */
        (void)WM8994_Delay(pObj, 325);
 80063b0:	f240 1145 	movw	r1, #325	@ 0x145
 80063b4:	6878      	ldr	r0, [r7, #4]
 80063b6:	f001 f8b5 	bl	8007524 <WM8994_Delay>
 80063ba:	e014      	b.n	80063e6 <WM8994_Init+0x966>
      }
      else 
      { 
        /* Headphone Warm Start-Up */
        tmp = 0x8108;
 80063bc:	f248 1308 	movw	r3, #33032	@ 0x8108
 80063c0:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f103 0018 	add.w	r0, r3, #24
 80063c8:	f107 020a 	add.w	r2, r7, #10
 80063cc:	2302      	movs	r3, #2
 80063ce:	f44f 7188 	mov.w	r1, #272	@ 0x110
 80063d2:	f001 f91f 	bl	8007614 <wm8994_write_reg>
 80063d6:	4602      	mov	r2, r0
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	4413      	add	r3, r2
 80063dc:	60fb      	str	r3, [r7, #12]
        
        /* Add Delay */
        (void)WM8994_Delay(pObj, 50);
 80063de:	2132      	movs	r1, #50	@ 0x32
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f001 f89f 	bl	8007524 <WM8994_Delay>
      }
      
      /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
      tmp = 0x0000;
 80063e6:	2300      	movs	r3, #0
 80063e8:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	f103 0018 	add.w	r0, r3, #24
 80063f0:	f107 020a 	add.w	r2, r7, #10
 80063f4:	2302      	movs	r3, #2
 80063f6:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 80063fa:	f001 f90b 	bl	8007614 <wm8994_write_reg>
 80063fe:	4602      	mov	r2, r0
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	4413      	add	r3, r2
 8006404:	60fb      	str	r3, [r7, #12]
 8006406:	e0f4      	b.n	80065f2 <WM8994_Init+0xb72>
    else
    {
      /* Analog Output Configuration */
      
      /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
      tmp = 0x0300;
 8006408:	f44f 7340 	mov.w	r3, #768	@ 0x300
 800640c:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f103 0018 	add.w	r0, r3, #24
 8006414:	f107 020a 	add.w	r2, r7, #10
 8006418:	2302      	movs	r3, #2
 800641a:	2103      	movs	r1, #3
 800641c:	f001 f8fa 	bl	8007614 <wm8994_write_reg>
 8006420:	4602      	mov	r2, r0
 8006422:	68fb      	ldr	r3, [r7, #12]
 8006424:	4413      	add	r3, r2
 8006426:	60fb      	str	r3, [r7, #12]
      
      /* Left Speaker Mixer Volume = 0dB */
      tmp = 0x0000;
 8006428:	2300      	movs	r3, #0
 800642a:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f103 0018 	add.w	r0, r3, #24
 8006432:	f107 020a 	add.w	r2, r7, #10
 8006436:	2302      	movs	r3, #2
 8006438:	2122      	movs	r1, #34	@ 0x22
 800643a:	f001 f8eb 	bl	8007614 <wm8994_write_reg>
 800643e:	4602      	mov	r2, r0
 8006440:	68fb      	ldr	r3, [r7, #12]
 8006442:	4413      	add	r3, r2
 8006444:	60fb      	str	r3, [r7, #12]
      
      /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f103 0018 	add.w	r0, r3, #24
 800644c:	f107 020a 	add.w	r2, r7, #10
 8006450:	2302      	movs	r3, #2
 8006452:	2123      	movs	r1, #35	@ 0x23
 8006454:	f001 f8de 	bl	8007614 <wm8994_write_reg>
 8006458:	4602      	mov	r2, r0
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	4413      	add	r3, r2
 800645e:	60fb      	str	r3, [r7, #12]
      
      /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
      Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
      tmp = 0x0300;
 8006460:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006464:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	f103 0018 	add.w	r0, r3, #24
 800646c:	f107 020a 	add.w	r2, r7, #10
 8006470:	2302      	movs	r3, #2
 8006472:	2136      	movs	r1, #54	@ 0x36
 8006474:	f001 f8ce 	bl	8007614 <wm8994_write_reg>
 8006478:	4602      	mov	r2, r0
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	4413      	add	r3, r2
 800647e:	60fb      	str	r3, [r7, #12]
      
      /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
      tmp = 0x3003;
 8006480:	f243 0303 	movw	r3, #12291	@ 0x3003
 8006484:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	f103 0018 	add.w	r0, r3, #24
 800648c:	f107 020a 	add.w	r2, r7, #10
 8006490:	2302      	movs	r3, #2
 8006492:	2101      	movs	r1, #1
 8006494:	f001 f8be 	bl	8007614 <wm8994_write_reg>
 8006498:	4602      	mov	r2, r0
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	4413      	add	r3, r2
 800649e:	60fb      	str	r3, [r7, #12]
      /* Headphone/Speaker Enable */
      
      if (pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2b05      	cmp	r3, #5
 80064a6:	d113      	bne.n	80064d0 <WM8994_Init+0xa50>
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslots 0 and 1 */
        tmp = 0x0205;
 80064a8:	f240 2305 	movw	r3, #517	@ 0x205
 80064ac:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2); 
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f103 0018 	add.w	r0, r3, #24
 80064b4:	f107 020a 	add.w	r2, r7, #10
 80064b8:	2302      	movs	r3, #2
 80064ba:	2151      	movs	r1, #81	@ 0x51
 80064bc:	f001 f8aa 	bl	8007614 <wm8994_write_reg>
 80064c0:	4602      	mov	r2, r0
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	4413      	add	r3, r2
 80064c6:	60fb      	str	r3, [r7, #12]
 80064c8:	e011      	b.n	80064ee <WM8994_Init+0xa6e>
 80064ca:	bf00      	nop
 80064cc:	240005a0 	.word	0x240005a0
      }
      else
      {
        /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
        tmp = 0x0005;
 80064d0:	2305      	movs	r3, #5
 80064d2:	817b      	strh	r3, [r7, #10]
        ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	f103 0018 	add.w	r0, r3, #24
 80064da:	f107 020a 	add.w	r2, r7, #10
 80064de:	2302      	movs	r3, #2
 80064e0:	2151      	movs	r1, #81	@ 0x51
 80064e2:	f001 f897 	bl	8007614 <wm8994_write_reg>
 80064e6:	4602      	mov	r2, r0
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	4413      	add	r3, r2
 80064ec:	60fb      	str	r3, [r7, #12]
      }
      
      /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
      /* idem for Speaker */
      tmp = 0x3303;
 80064ee:	f243 3303 	movw	r3, #13059	@ 0x3303
 80064f2:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	f103 0018 	add.w	r0, r3, #24
 80064fa:	f107 020a 	add.w	r2, r7, #10
 80064fe:	2302      	movs	r3, #2
 8006500:	2101      	movs	r1, #1
 8006502:	f001 f887 	bl	8007614 <wm8994_write_reg>
 8006506:	4602      	mov	r2, r0
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	4413      	add	r3, r2
 800650c:	60fb      	str	r3, [r7, #12]
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
      tmp = 0x0022;
 800650e:	2322      	movs	r3, #34	@ 0x22
 8006510:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	f103 0018 	add.w	r0, r3, #24
 8006518:	f107 020a 	add.w	r2, r7, #10
 800651c:	2302      	movs	r3, #2
 800651e:	2160      	movs	r1, #96	@ 0x60
 8006520:	f001 f878 	bl	8007614 <wm8994_write_reg>
 8006524:	4602      	mov	r2, r0
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	4413      	add	r3, r2
 800652a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Charge Pump */
      tmp = 0x9F25;
 800652c:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8006530:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f103 0018 	add.w	r0, r3, #24
 8006538:	f107 020a 	add.w	r2, r7, #10
 800653c:	2302      	movs	r3, #2
 800653e:	214c      	movs	r1, #76	@ 0x4c
 8006540:	f001 f868 	bl	8007614 <wm8994_write_reg>
 8006544:	4602      	mov	r2, r0
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	4413      	add	r3, r2
 800654a:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 15);
 800654c:	210f      	movs	r1, #15
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	f000 ffe8 	bl	8007524 <WM8994_Delay>
      
      tmp = 0x0001;
 8006554:	2301      	movs	r3, #1
 8006556:	817b      	strh	r3, [r7, #10]
      /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	f103 0018 	add.w	r0, r3, #24
 800655e:	f107 020a 	add.w	r2, r7, #10
 8006562:	2302      	movs	r3, #2
 8006564:	212d      	movs	r1, #45	@ 0x2d
 8006566:	f001 f855 	bl	8007614 <wm8994_write_reg>
 800656a:	4602      	mov	r2, r0
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	4413      	add	r3, r2
 8006570:	60fb      	str	r3, [r7, #12]
      
      /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f103 0018 	add.w	r0, r3, #24
 8006578:	f107 020a 	add.w	r2, r7, #10
 800657c:	2302      	movs	r3, #2
 800657e:	212e      	movs	r1, #46	@ 0x2e
 8006580:	f001 f848 	bl	8007614 <wm8994_write_reg>
 8006584:	4602      	mov	r2, r0
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	4413      	add	r3, r2
 800658a:	60fb      	str	r3, [r7, #12]
      
      /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
      /* idem for SPKOUTL and SPKOUTR */
      tmp = 0x0330;
 800658c:	f44f 734c 	mov.w	r3, #816	@ 0x330
 8006590:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	f103 0018 	add.w	r0, r3, #24
 8006598:	f107 020a 	add.w	r2, r7, #10
 800659c:	2302      	movs	r3, #2
 800659e:	2103      	movs	r1, #3
 80065a0:	f001 f838 	bl	8007614 <wm8994_write_reg>
 80065a4:	4602      	mov	r2, r0
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	4413      	add	r3, r2
 80065aa:	60fb      	str	r3, [r7, #12]
      
      /* Enable DC Servo and trigger start-up mode on left and right channels */
      tmp = 0x0033;
 80065ac:	2333      	movs	r3, #51	@ 0x33
 80065ae:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	f103 0018 	add.w	r0, r3, #24
 80065b6:	f107 020a 	add.w	r2, r7, #10
 80065ba:	2302      	movs	r3, #2
 80065bc:	2154      	movs	r1, #84	@ 0x54
 80065be:	f001 f829 	bl	8007614 <wm8994_write_reg>
 80065c2:	4602      	mov	r2, r0
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	4413      	add	r3, r2
 80065c8:	60fb      	str	r3, [r7, #12]
      
      /* Add Delay */
      (void)WM8994_Delay(pObj, 257);
 80065ca:	f240 1101 	movw	r1, #257	@ 0x101
 80065ce:	6878      	ldr	r0, [r7, #4]
 80065d0:	f000 ffa8 	bl	8007524 <WM8994_Delay>
      
      /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
      tmp = 0x00EE;
 80065d4:	23ee      	movs	r3, #238	@ 0xee
 80065d6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f103 0018 	add.w	r0, r3, #24
 80065de:	f107 020a 	add.w	r2, r7, #10
 80065e2:	2302      	movs	r3, #2
 80065e4:	2160      	movs	r1, #96	@ 0x60
 80065e6:	f001 f815 	bl	8007614 <wm8994_write_reg>
 80065ea:	4602      	mov	r2, r0
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	4413      	add	r3, r2
 80065f0:	60fb      	str	r3, [r7, #12]
    }
    
    /* Unmutes */
    
    /* Unmute DAC 1 (Left) */
    tmp = 0x00C0;
 80065f2:	23c0      	movs	r3, #192	@ 0xc0
 80065f4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_LEFT_VOL, &tmp, 2);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f103 0018 	add.w	r0, r3, #24
 80065fc:	f107 020a 	add.w	r2, r7, #10
 8006600:	2302      	movs	r3, #2
 8006602:	f44f 61c2 	mov.w	r1, #1552	@ 0x610
 8006606:	f001 f805 	bl	8007614 <wm8994_write_reg>
 800660a:	4602      	mov	r2, r0
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	4413      	add	r3, r2
 8006610:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 1 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC1_RIGHT_VOL, &tmp, 2);
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f103 0018 	add.w	r0, r3, #24
 8006618:	f107 020a 	add.w	r2, r7, #10
 800661c:	2302      	movs	r3, #2
 800661e:	f240 6111 	movw	r1, #1553	@ 0x611
 8006622:	f000 fff7 	bl	8007614 <wm8994_write_reg>
 8006626:	4602      	mov	r2, r0
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	4413      	add	r3, r2
 800662c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 0 DAC path */
    tmp = 0x0010;
 800662e:	2310      	movs	r3, #16
 8006630:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	f103 0018 	add.w	r0, r3, #24
 8006638:	f107 020a 	add.w	r2, r7, #10
 800663c:	2302      	movs	r3, #2
 800663e:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006642:	f000 ffe7 	bl	8007614 <wm8994_write_reg>
 8006646:	4602      	mov	r2, r0
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	4413      	add	r3, r2
 800664c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Left) */
    tmp = 0x00C0;
 800664e:	23c0      	movs	r3, #192	@ 0xc0
 8006650:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_LEFT_VOL, &tmp, 2);
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	f103 0018 	add.w	r0, r3, #24
 8006658:	f107 020a 	add.w	r2, r7, #10
 800665c:	2302      	movs	r3, #2
 800665e:	f240 6112 	movw	r1, #1554	@ 0x612
 8006662:	f000 ffd7 	bl	8007614 <wm8994_write_reg>
 8006666:	4602      	mov	r2, r0
 8006668:	68fb      	ldr	r3, [r7, #12]
 800666a:	4413      	add	r3, r2
 800666c:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC 2 (Right) */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DAC2_RIGHT_VOL, &tmp, 2);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f103 0018 	add.w	r0, r3, #24
 8006674:	f107 020a 	add.w	r2, r7, #10
 8006678:	2302      	movs	r3, #2
 800667a:	f240 6113 	movw	r1, #1555	@ 0x613
 800667e:	f000 ffc9 	bl	8007614 <wm8994_write_reg>
 8006682:	4602      	mov	r2, r0
 8006684:	68fb      	ldr	r3, [r7, #12]
 8006686:	4413      	add	r3, r2
 8006688:	60fb      	str	r3, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path */
    tmp = 0x0010;
 800668a:	2310      	movs	r3, #16
 800668c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800668e:	687b      	ldr	r3, [r7, #4]
 8006690:	f103 0018 	add.w	r0, r3, #24
 8006694:	f107 020a 	add.w	r2, r7, #10
 8006698:	2302      	movs	r3, #2
 800669a:	f240 4122 	movw	r1, #1058	@ 0x422
 800669e:	f000 ffb9 	bl	8007614 <wm8994_write_reg>
 80066a2:	4602      	mov	r2, r0
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	4413      	add	r3, r2
 80066a8:	60fb      	str	r3, [r7, #12]
    
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_OUTPUT, (uint8_t)pInit->Volume); 
 80066aa:	683b      	ldr	r3, [r7, #0]
 80066ac:	691b      	ldr	r3, [r3, #16]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	461a      	mov	r2, r3
 80066b2:	2101      	movs	r1, #1
 80066b4:	6878      	ldr	r0, [r7, #4]
 80066b6:	f000 f99f 	bl	80069f8 <WM8994_SetVolume>
 80066ba:	4602      	mov	r2, r0
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	4413      	add	r3, r2
 80066c0:	60fb      	str	r3, [r7, #12]
  }
  
  if (pInit->InputDevice != WM8994_IN_NONE) /* Audio input selected */
 80066c2:	683b      	ldr	r3, [r7, #0]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	f000 80b5 	beq.w	8006836 <WM8994_Init+0xdb6>
  {
    if ((pInit->InputDevice == WM8994_IN_MIC1) || (pInit->InputDevice == WM8994_IN_MIC2))
 80066cc:	683b      	ldr	r3, [r7, #0]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b01      	cmp	r3, #1
 80066d2:	d003      	beq.n	80066dc <WM8994_Init+0xc5c>
 80066d4:	683b      	ldr	r3, [r7, #0]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	2b02      	cmp	r3, #2
 80066da:	d130      	bne.n	800673e <WM8994_Init+0xcbe>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 80066dc:	2313      	movs	r3, #19
 80066de:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	f103 0018 	add.w	r0, r3, #24
 80066e6:	f107 020a 	add.w	r2, r7, #10
 80066ea:	2302      	movs	r3, #2
 80066ec:	2101      	movs	r1, #1
 80066ee:	f000 ff91 	bl	8007614 <wm8994_write_reg>
 80066f2:	4602      	mov	r2, r0
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	4413      	add	r3, r2
 80066f8:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 80066fa:	2302      	movs	r3, #2
 80066fc:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f103 0018 	add.w	r0, r3, #24
 8006704:	f107 020a 	add.w	r2, r7, #10
 8006708:	2302      	movs	r3, #2
 800670a:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 800670e:	f000 ff81 	bl	8007614 <wm8994_write_reg>
 8006712:	4602      	mov	r2, r0
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	4413      	add	r3, r2
 8006718:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x3800;
 800671a:	f44f 5360 	mov.w	r3, #14336	@ 0x3800
 800671e:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	f103 0018 	add.w	r0, r3, #24
 8006726:	f107 020a 	add.w	r2, r7, #10
 800672a:	2302      	movs	r3, #2
 800672c:	f240 4111 	movw	r1, #1041	@ 0x411
 8006730:	f000 ff70 	bl	8007614 <wm8994_write_reg>
 8006734:	4602      	mov	r2, r0
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	4413      	add	r3, r2
 800673a:	60fb      	str	r3, [r7, #12]
 800673c:	e06f      	b.n	800681e <WM8994_Init+0xd9e>
    }
    else if(pInit->InputDevice == WM8994_IN_MIC1_MIC2)
 800673e:	683b      	ldr	r3, [r7, #0]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	2b05      	cmp	r3, #5
 8006744:	d13e      	bne.n	80067c4 <WM8994_Init+0xd44>
    {
      /* Enable Microphone bias 1 generator, Enable VMID */
      tmp = 0x0013;
 8006746:	2313      	movs	r3, #19
 8006748:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	f103 0018 	add.w	r0, r3, #24
 8006750:	f107 020a 	add.w	r2, r7, #10
 8006754:	2302      	movs	r3, #2
 8006756:	2101      	movs	r1, #1
 8006758:	f000 ff5c 	bl	8007614 <wm8994_write_reg>
 800675c:	4602      	mov	r2, r0
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	4413      	add	r3, r2
 8006762:	60fb      	str	r3, [r7, #12]
      
      /* ADC oversample enable */
      tmp = 0x0002;
 8006764:	2302      	movs	r3, #2
 8006766:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_OVERSAMPLING, &tmp, 2);
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	f103 0018 	add.w	r0, r3, #24
 800676e:	f107 020a 	add.w	r2, r7, #10
 8006772:	2302      	movs	r3, #2
 8006774:	f44f 61c4 	mov.w	r1, #1568	@ 0x620
 8006778:	f000 ff4c 	bl	8007614 <wm8994_write_reg>
 800677c:	4602      	mov	r2, r0
 800677e:	68fb      	ldr	r3, [r7, #12]
 8006780:	4413      	add	r3, r2
 8006782:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 8006784:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006788:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f103 0018 	add.w	r0, r3, #24
 8006790:	f107 020a 	add.w	r2, r7, #10
 8006794:	2302      	movs	r3, #2
 8006796:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 800679a:	f000 ff3b 	bl	8007614 <wm8994_write_reg>
 800679e:	4602      	mov	r2, r0
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	4413      	add	r3, r2
 80067a4:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC2 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_FILTERS, &tmp, 2);
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	f103 0018 	add.w	r0, r3, #24
 80067ac:	f107 020a 	add.w	r2, r7, #10
 80067b0:	2302      	movs	r3, #2
 80067b2:	f240 4111 	movw	r1, #1041	@ 0x411
 80067b6:	f000 ff2d 	bl	8007614 <wm8994_write_reg>
 80067ba:	4602      	mov	r2, r0
 80067bc:	68fb      	ldr	r3, [r7, #12]
 80067be:	4413      	add	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
 80067c2:	e02c      	b.n	800681e <WM8994_Init+0xd9e>
    }    
    else /* ((pInit->InputDevice == WM8994_IN_LINE1) || (pInit->InputDevice == WM8994_IN_LINE2)) */
    {      
      /* Disable mute on IN1L, IN1L Volume = +0dB */
      tmp = 0x000B;
 80067c4:	230b      	movs	r3, #11
 80067c6:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_LINE_IN12_VOL, &tmp, 2);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	f103 0018 	add.w	r0, r3, #24
 80067ce:	f107 020a 	add.w	r2, r7, #10
 80067d2:	2302      	movs	r3, #2
 80067d4:	2118      	movs	r1, #24
 80067d6:	f000 ff1d 	bl	8007614 <wm8994_write_reg>
 80067da:	4602      	mov	r2, r0
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	4413      	add	r3, r2
 80067e0:	60fb      	str	r3, [r7, #12]
      
      /* Disable mute on IN1R, IN1R Volume = +0dB */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_LINE_IN12_VOL, &tmp, 2);
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f103 0018 	add.w	r0, r3, #24
 80067e8:	f107 020a 	add.w	r2, r7, #10
 80067ec:	2302      	movs	r3, #2
 80067ee:	211a      	movs	r1, #26
 80067f0:	f000 ff10 	bl	8007614 <wm8994_write_reg>
 80067f4:	4602      	mov	r2, r0
 80067f6:	68fb      	ldr	r3, [r7, #12]
 80067f8:	4413      	add	r3, r2
 80067fa:	60fb      	str	r3, [r7, #12]
      
      /* AIF ADC1 HPF enable, HPF cut = voice mode 1 fc=127Hz at fs=8kHz */
      tmp = 0x1800;
 80067fc:	f44f 53c0 	mov.w	r3, #6144	@ 0x1800
 8006800:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_FILTERS, &tmp, 2);
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f103 0018 	add.w	r0, r3, #24
 8006808:	f107 020a 	add.w	r2, r7, #10
 800680c:	2302      	movs	r3, #2
 800680e:	f44f 6182 	mov.w	r1, #1040	@ 0x410
 8006812:	f000 feff 	bl	8007614 <wm8994_write_reg>
 8006816:	4602      	mov	r2, r0
 8006818:	68fb      	ldr	r3, [r7, #12]
 800681a:	4413      	add	r3, r2
 800681c:	60fb      	str	r3, [r7, #12]
    }
    /* Volume Control */
    ret += WM8994_SetVolume(pObj, VOLUME_INPUT, (uint8_t)pInit->Volume); 
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	691b      	ldr	r3, [r3, #16]
 8006822:	b2db      	uxtb	r3, r3
 8006824:	461a      	mov	r2, r3
 8006826:	2100      	movs	r1, #0
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 f8e5 	bl	80069f8 <WM8994_SetVolume>
 800682e:	4602      	mov	r2, r0
 8006830:	68fb      	ldr	r3, [r7, #12]
 8006832:	4413      	add	r3, r2
 8006834:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8006836:	68fb      	ldr	r3, [r7, #12]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <WM8994_Init+0xdc2>
  {
    ret = WM8994_ERROR;
 800683c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006840:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8006842:	68fb      	ldr	r3, [r7, #12]
}
 8006844:	4618      	mov	r0, r3
 8006846:	3710      	adds	r7, #16
 8006848:	46bd      	mov	sp, r7
 800684a:	bd80      	pop	{r7, pc}

0800684c <WM8994_DeInit>:
  * @brief  Deinitializes the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_DeInit(WM8994_Object_t *pObj)
{
 800684c:	b580      	push	{r7, lr}
 800684e:	b082      	sub	sp, #8
 8006850:	af00      	add	r7, sp, #0
 8006852:	6078      	str	r0, [r7, #4]
  /* De-Initialize Audio Codec interface */
  return WM8994_Stop(pObj, WM8994_PDWN_HW);
 8006854:	2100      	movs	r1, #0
 8006856:	6878      	ldr	r0, [r7, #4]
 8006858:	f000 f861 	bl	800691e <WM8994_Stop>
 800685c:	4603      	mov	r3, r0
}
 800685e:	4618      	mov	r0, r3
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <WM8994_ReadID>:
  * @param  pObj pointer to component object
  * @param  Id component ID
  * @retval Component status 
  */
int32_t WM8994_ReadID(WM8994_Object_t *pObj, uint32_t *Id)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t wm8994_id;
  
  /* Initialize the Control interface of the Audio Codec */
  pObj->IO.Init();
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4798      	blx	r3
  /* Get ID from component */
  ret = wm8994_sw_reset_r(&pObj->Ctx, &wm8994_id);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3318      	adds	r3, #24
 800687a:	f107 020a 	add.w	r2, r7, #10
 800687e:	4611      	mov	r1, r2
 8006880:	4618      	mov	r0, r3
 8006882:	f000 ff00 	bl	8007686 <wm8994_sw_reset_r>
 8006886:	60f8      	str	r0, [r7, #12]
  
  *Id = wm8994_id;
 8006888:	897b      	ldrh	r3, [r7, #10]
 800688a:	461a      	mov	r2, r3
 800688c:	683b      	ldr	r3, [r7, #0]
 800688e:	601a      	str	r2, [r3, #0]
  
  return ret;
 8006890:	68fb      	ldr	r3, [r7, #12]
}
 8006892:	4618      	mov	r0, r3
 8006894:	3710      	adds	r7, #16
 8006896:	46bd      	mov	sp, r7
 8006898:	bd80      	pop	{r7, pc}

0800689a <WM8994_Play>:
  * @note For this codec no Play options are required.
  * @param  pObj pointer to component object  
  * @retval Component status
  */
int32_t WM8994_Play(WM8994_Object_t *pObj)
{ 
 800689a:	b580      	push	{r7, lr}
 800689c:	b082      	sub	sp, #8
 800689e:	af00      	add	r7, sp, #0
 80068a0:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 80068a2:	2100      	movs	r1, #0
 80068a4:	6878      	ldr	r0, [r7, #4]
 80068a6:	f000 f9d3 	bl	8006c50 <WM8994_SetMute>
 80068aa:	4603      	mov	r3, r0
}
 80068ac:	4618      	mov	r0, r3
 80068ae:	3708      	adds	r7, #8
 80068b0:	46bd      	mov	sp, r7
 80068b2:	bd80      	pop	{r7, pc}

080068b4 <WM8994_Pause>:
  * @brief Pauses playing on the audio codec.
  * @param  pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_Pause(WM8994_Object_t *pObj)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b084      	sub	sp, #16
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	6078      	str	r0, [r7, #4]
  int32_t ret;
  uint16_t tmp = 0x0001;
 80068bc:	2301      	movs	r3, #1
 80068be:	817b      	strh	r3, [r7, #10]
  
  /* Pause the audio file playing */
  /* Mute the output first */
  if(WM8994_SetMute(pObj, WM8994_MUTE_ON) != WM8994_OK)
 80068c0:	2101      	movs	r1, #1
 80068c2:	6878      	ldr	r0, [r7, #4]
 80068c4:	f000 f9c4 	bl	8006c50 <WM8994_SetMute>
 80068c8:	4603      	mov	r3, r0
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d003      	beq.n	80068d6 <WM8994_Pause+0x22>
  {
    ret  = WM8994_ERROR;
 80068ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068d2:	60fb      	str	r3, [r7, #12]
 80068d4:	e011      	b.n	80068fa <WM8994_Pause+0x46>
  }/* Put the Codec in Power save mode */
  else if(wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_2, &tmp, 2) != WM8994_OK)
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	f103 0018 	add.w	r0, r3, #24
 80068dc:	f107 020a 	add.w	r2, r7, #10
 80068e0:	2302      	movs	r3, #2
 80068e2:	2102      	movs	r1, #2
 80068e4:	f000 fe96 	bl	8007614 <wm8994_write_reg>
 80068e8:	4603      	mov	r3, r0
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d003      	beq.n	80068f6 <WM8994_Pause+0x42>
  {
    ret  = WM8994_ERROR;
 80068ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80068f2:	60fb      	str	r3, [r7, #12]
 80068f4:	e001      	b.n	80068fa <WM8994_Pause+0x46>
  }
  else
  {
    ret = WM8994_OK;
 80068f6:	2300      	movs	r3, #0
 80068f8:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80068fa:	68fb      	ldr	r3, [r7, #12]
}
 80068fc:	4618      	mov	r0, r3
 80068fe:	3710      	adds	r7, #16
 8006900:	46bd      	mov	sp, r7
 8006902:	bd80      	pop	{r7, pc}

08006904 <WM8994_Resume>:
  * @brief Resumes playing on the audio codec.
  * @param  pObj pointer to component object 
  * @retval Component status
  */
int32_t WM8994_Resume(WM8994_Object_t *pObj)
{  
 8006904:	b580      	push	{r7, lr}
 8006906:	b082      	sub	sp, #8
 8006908:	af00      	add	r7, sp, #0
 800690a:	6078      	str	r0, [r7, #4]
  /* Resumes the audio file playing */  
  /* Unmute the output first */
  return WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 800690c:	2100      	movs	r1, #0
 800690e:	6878      	ldr	r0, [r7, #4]
 8006910:	f000 f99e 	bl	8006c50 <WM8994_SetMute>
 8006914:	4603      	mov	r3, r0
}
 8006916:	4618      	mov	r0, r3
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}

0800691e <WM8994_Stop>:
  *                           (user should re-Initialize the codec in order to 
  *                            play again the audio stream).
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_Stop(WM8994_Object_t *pObj, uint32_t CodecPdwnMode)
{
 800691e:	b580      	push	{r7, lr}
 8006920:	b084      	sub	sp, #16
 8006922:	af00      	add	r7, sp, #0
 8006924:	6078      	str	r0, [r7, #4]
 8006926:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Mute the output first */
  ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8006928:	2101      	movs	r1, #1
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f990 	bl	8006c50 <WM8994_SetMute>
 8006930:	60f8      	str	r0, [r7, #12]
  
  if (CodecPdwnMode == WM8994_PDWN_SW)
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	2b01      	cmp	r3, #1
 8006936:	d054      	beq.n	80069e2 <WM8994_Stop+0xc4>
  {
    /* Only output mute required*/
  }
  else /* WM8994_PDWN_HW */
  {
    tmp = 0x0200;
 8006938:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800693c:	817b      	strh	r3, [r7, #10]
    /* Mute the AIF1 Timeslot 0 DAC1 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	f103 0018 	add.w	r0, r3, #24
 8006944:	f107 020a 	add.w	r2, r7, #10
 8006948:	2302      	movs	r3, #2
 800694a:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 800694e:	f000 fe61 	bl	8007614 <wm8994_write_reg>
 8006952:	4602      	mov	r2, r0
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	4413      	add	r3, r2
 8006958:	60fb      	str	r3, [r7, #12]
    
    /* Mute the AIF1 Timeslot 1 DAC2 path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	f103 0018 	add.w	r0, r3, #24
 8006960:	f107 020a 	add.w	r2, r7, #10
 8006964:	2302      	movs	r3, #2
 8006966:	f240 4122 	movw	r1, #1058	@ 0x422
 800696a:	f000 fe53 	bl	8007614 <wm8994_write_reg>
 800696e:	4602      	mov	r2, r0
 8006970:	68fb      	ldr	r3, [r7, #12]
 8006972:	4413      	add	r3, r2
 8006974:	60fb      	str	r3, [r7, #12]
    
    tmp = 0x0000;
 8006976:	2300      	movs	r3, #0
 8006978:	817b      	strh	r3, [r7, #10]
    /* Disable DAC1L_TO_HPOUT1L */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	f103 0018 	add.w	r0, r3, #24
 8006980:	f107 020a 	add.w	r2, r7, #10
 8006984:	2302      	movs	r3, #2
 8006986:	212d      	movs	r1, #45	@ 0x2d
 8006988:	f000 fe44 	bl	8007614 <wm8994_write_reg>
 800698c:	4602      	mov	r2, r0
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	4413      	add	r3, r2
 8006992:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1R_TO_HPOUT1R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	f103 0018 	add.w	r0, r3, #24
 800699a:	f107 020a 	add.w	r2, r7, #10
 800699e:	2302      	movs	r3, #2
 80069a0:	212e      	movs	r1, #46	@ 0x2e
 80069a2:	f000 fe37 	bl	8007614 <wm8994_write_reg>
 80069a6:	4602      	mov	r2, r0
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	4413      	add	r3, r2
 80069ac:	60fb      	str	r3, [r7, #12]
    
    /* Disable DAC1 and DAC2 */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	f103 0018 	add.w	r0, r3, #24
 80069b4:	f107 020a 	add.w	r2, r7, #10
 80069b8:	2302      	movs	r3, #2
 80069ba:	2105      	movs	r1, #5
 80069bc:	f000 fe2a 	bl	8007614 <wm8994_write_reg>
 80069c0:	4602      	mov	r2, r0
 80069c2:	68fb      	ldr	r3, [r7, #12]
 80069c4:	4413      	add	r3, r2
 80069c6:	60fb      	str	r3, [r7, #12]
    
    /* Reset Codec by writing in 0x0000 address register */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SW_RESET, &tmp, 2);
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	f103 0018 	add.w	r0, r3, #24
 80069ce:	f107 020a 	add.w	r2, r7, #10
 80069d2:	2302      	movs	r3, #2
 80069d4:	2100      	movs	r1, #0
 80069d6:	f000 fe1d 	bl	8007614 <wm8994_write_reg>
 80069da:	4602      	mov	r2, r0
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	4413      	add	r3, r2
 80069e0:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 80069e2:	68fb      	ldr	r3, [r7, #12]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	d002      	beq.n	80069ee <WM8994_Stop+0xd0>
  {
    ret = WM8994_ERROR;
 80069e8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80069ec:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 80069ee:	68fb      	ldr	r3, [r7, #12]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3710      	adds	r7, #16
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}

080069f8 <WM8994_SetVolume>:
  * @param  Volume  a byte value from 0 to 63 for output and from 0 to 240 for input
  *         (refer to codec registers description for more details).
  * @retval Component status
  */
int32_t WM8994_SetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t Volume)
{
 80069f8:	b580      	push	{r7, lr}
 80069fa:	b086      	sub	sp, #24
 80069fc:	af00      	add	r7, sp, #0
 80069fe:	60f8      	str	r0, [r7, #12]
 8006a00:	60b9      	str	r1, [r7, #8]
 8006a02:	4613      	mov	r3, r2
 8006a04:	71fb      	strb	r3, [r7, #7]
  int32_t ret;  
  uint16_t tmp;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8006a06:	68bb      	ldr	r3, [r7, #8]
 8006a08:	2b01      	cmp	r3, #1
 8006a0a:	f040 8089 	bne.w	8006b20 <WM8994_SetVolume+0x128>
  {    
    if(Volume > 0x3EU)
 8006a0e:	79fb      	ldrb	r3, [r7, #7]
 8006a10:	2b3e      	cmp	r3, #62	@ 0x3e
 8006a12:	d93c      	bls.n	8006a8e <WM8994_SetVolume+0x96>
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8006a14:	2100      	movs	r1, #0
 8006a16:	68f8      	ldr	r0, [r7, #12]
 8006a18:	f000 f91a 	bl	8006c50 <WM8994_SetMute>
 8006a1c:	6178      	str	r0, [r7, #20]
      tmp = 0x3FU | 0x140U;
 8006a1e:	f240 137f 	movw	r3, #383	@ 0x17f
 8006a22:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	f103 0018 	add.w	r0, r3, #24
 8006a2a:	f107 0212 	add.w	r2, r7, #18
 8006a2e:	2302      	movs	r3, #2
 8006a30:	211c      	movs	r1, #28
 8006a32:	f000 fdef 	bl	8007614 <wm8994_write_reg>
 8006a36:	4602      	mov	r2, r0
 8006a38:	697b      	ldr	r3, [r7, #20]
 8006a3a:	4413      	add	r3, r2
 8006a3c:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8006a3e:	68fb      	ldr	r3, [r7, #12]
 8006a40:	f103 0018 	add.w	r0, r3, #24
 8006a44:	f107 0212 	add.w	r2, r7, #18
 8006a48:	2302      	movs	r3, #2
 8006a4a:	211d      	movs	r1, #29
 8006a4c:	f000 fde2 	bl	8007614 <wm8994_write_reg>
 8006a50:	4602      	mov	r2, r0
 8006a52:	697b      	ldr	r3, [r7, #20]
 8006a54:	4413      	add	r3, r2
 8006a56:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8006a58:	68fb      	ldr	r3, [r7, #12]
 8006a5a:	f103 0018 	add.w	r0, r3, #24
 8006a5e:	f107 0212 	add.w	r2, r7, #18
 8006a62:	2302      	movs	r3, #2
 8006a64:	2126      	movs	r1, #38	@ 0x26
 8006a66:	f000 fdd5 	bl	8007614 <wm8994_write_reg>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	4413      	add	r3, r2
 8006a70:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);
 8006a72:	68fb      	ldr	r3, [r7, #12]
 8006a74:	f103 0018 	add.w	r0, r3, #24
 8006a78:	f107 0212 	add.w	r2, r7, #18
 8006a7c:	2302      	movs	r3, #2
 8006a7e:	2127      	movs	r1, #39	@ 0x27
 8006a80:	f000 fdc8 	bl	8007614 <wm8994_write_reg>
 8006a84:	4602      	mov	r2, r0
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	4413      	add	r3, r2
 8006a8a:	617b      	str	r3, [r7, #20]
 8006a8c:	e083      	b.n	8006b96 <WM8994_SetVolume+0x19e>
    }
    else if (Volume == 0U)
 8006a8e:	79fb      	ldrb	r3, [r7, #7]
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d105      	bne.n	8006aa0 <WM8994_SetVolume+0xa8>
    {
      /* Mute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_ON);
 8006a94:	2101      	movs	r1, #1
 8006a96:	68f8      	ldr	r0, [r7, #12]
 8006a98:	f000 f8da 	bl	8006c50 <WM8994_SetMute>
 8006a9c:	6178      	str	r0, [r7, #20]
 8006a9e:	e07a      	b.n	8006b96 <WM8994_SetVolume+0x19e>
    }
    else
    {
      /* Unmute audio codec */
      ret = WM8994_SetMute(pObj, WM8994_MUTE_OFF);
 8006aa0:	2100      	movs	r1, #0
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f000 f8d4 	bl	8006c50 <WM8994_SetMute>
 8006aa8:	6178      	str	r0, [r7, #20]
      
      tmp = Volume | 0x140U;
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	b29b      	uxth	r3, r3
 8006aae:	f443 73a0 	orr.w	r3, r3, #320	@ 0x140
 8006ab2:	b29b      	uxth	r3, r3
 8006ab4:	827b      	strh	r3, [r7, #18]
      
      /* Left Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_LEFT_OUTPUT_VOL, &tmp, 2);
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	f103 0018 	add.w	r0, r3, #24
 8006abc:	f107 0212 	add.w	r2, r7, #18
 8006ac0:	2302      	movs	r3, #2
 8006ac2:	211c      	movs	r1, #28
 8006ac4:	f000 fda6 	bl	8007614 <wm8994_write_reg>
 8006ac8:	4602      	mov	r2, r0
 8006aca:	697b      	ldr	r3, [r7, #20]
 8006acc:	4413      	add	r3, r2
 8006ace:	617b      	str	r3, [r7, #20]
      
      /* Right Headphone Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_RIGHT_OUTPUT_VOL, &tmp, 2);
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	f103 0018 	add.w	r0, r3, #24
 8006ad6:	f107 0212 	add.w	r2, r7, #18
 8006ada:	2302      	movs	r3, #2
 8006adc:	211d      	movs	r1, #29
 8006ade:	f000 fd99 	bl	8007614 <wm8994_write_reg>
 8006ae2:	4602      	mov	r2, r0
 8006ae4:	697b      	ldr	r3, [r7, #20]
 8006ae6:	4413      	add	r3, r2
 8006ae8:	617b      	str	r3, [r7, #20]
      
      /* Left Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_LEFT_VOL, &tmp, 2);
 8006aea:	68fb      	ldr	r3, [r7, #12]
 8006aec:	f103 0018 	add.w	r0, r3, #24
 8006af0:	f107 0212 	add.w	r2, r7, #18
 8006af4:	2302      	movs	r3, #2
 8006af6:	2126      	movs	r1, #38	@ 0x26
 8006af8:	f000 fd8c 	bl	8007614 <wm8994_write_reg>
 8006afc:	4602      	mov	r2, r0
 8006afe:	697b      	ldr	r3, [r7, #20]
 8006b00:	4413      	add	r3, r2
 8006b02:	617b      	str	r3, [r7, #20]
      
      /* Right Speaker Volume */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPK_RIGHT_VOL, &tmp, 2);      
 8006b04:	68fb      	ldr	r3, [r7, #12]
 8006b06:	f103 0018 	add.w	r0, r3, #24
 8006b0a:	f107 0212 	add.w	r2, r7, #18
 8006b0e:	2302      	movs	r3, #2
 8006b10:	2127      	movs	r1, #39	@ 0x27
 8006b12:	f000 fd7f 	bl	8007614 <wm8994_write_reg>
 8006b16:	4602      	mov	r2, r0
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	4413      	add	r3, r2
 8006b1c:	617b      	str	r3, [r7, #20]
 8006b1e:	e03a      	b.n	8006b96 <WM8994_SetVolume+0x19e>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    tmp = Volume | 0x100U;
 8006b20:	79fb      	ldrb	r3, [r7, #7]
 8006b22:	b29b      	uxth	r3, r3
 8006b24:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006b28:	b29b      	uxth	r3, r3
 8006b2a:	827b      	strh	r3, [r7, #18]
    
    /* Left AIF1 ADC1 volume */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_LEFT_VOL, &tmp, 2); 
 8006b2c:	68fb      	ldr	r3, [r7, #12]
 8006b2e:	f103 0018 	add.w	r0, r3, #24
 8006b32:	f107 0212 	add.w	r2, r7, #18
 8006b36:	2302      	movs	r3, #2
 8006b38:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8006b3c:	f000 fd6a 	bl	8007614 <wm8994_write_reg>
 8006b40:	6178      	str	r0, [r7, #20]
    
    /* Right AIF1 ADC1 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC1_RIGHT_VOL, &tmp, 2); 
 8006b42:	68fb      	ldr	r3, [r7, #12]
 8006b44:	f103 0018 	add.w	r0, r3, #24
 8006b48:	f107 0212 	add.w	r2, r7, #18
 8006b4c:	2302      	movs	r3, #2
 8006b4e:	f240 4101 	movw	r1, #1025	@ 0x401
 8006b52:	f000 fd5f 	bl	8007614 <wm8994_write_reg>
 8006b56:	4602      	mov	r2, r0
 8006b58:	697b      	ldr	r3, [r7, #20]
 8006b5a:	4413      	add	r3, r2
 8006b5c:	617b      	str	r3, [r7, #20]
    
    /* Left AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_LEFT_VOL, &tmp, 2); 
 8006b5e:	68fb      	ldr	r3, [r7, #12]
 8006b60:	f103 0018 	add.w	r0, r3, #24
 8006b64:	f107 0212 	add.w	r2, r7, #18
 8006b68:	2302      	movs	r3, #2
 8006b6a:	f240 4104 	movw	r1, #1028	@ 0x404
 8006b6e:	f000 fd51 	bl	8007614 <wm8994_write_reg>
 8006b72:	4602      	mov	r2, r0
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	4413      	add	r3, r2
 8006b78:	617b      	str	r3, [r7, #20]
    
    /* Right AIF1 ADC2 volume */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_ADC2_RIGHT_VOL, &tmp, 2); 
 8006b7a:	68fb      	ldr	r3, [r7, #12]
 8006b7c:	f103 0018 	add.w	r0, r3, #24
 8006b80:	f107 0212 	add.w	r2, r7, #18
 8006b84:	2302      	movs	r3, #2
 8006b86:	f240 4105 	movw	r1, #1029	@ 0x405
 8006b8a:	f000 fd43 	bl	8007614 <wm8994_write_reg>
 8006b8e:	4602      	mov	r2, r0
 8006b90:	697b      	ldr	r3, [r7, #20]
 8006b92:	4413      	add	r3, r2
 8006b94:	617b      	str	r3, [r7, #20]
  }
  
  if(ret != WM8994_OK)
 8006b96:	697b      	ldr	r3, [r7, #20]
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d002      	beq.n	8006ba2 <WM8994_SetVolume+0x1aa>
  {
    ret = WM8994_ERROR;
 8006b9c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006ba0:	617b      	str	r3, [r7, #20]
  }
  
  return ret;
 8006ba2:	697b      	ldr	r3, [r7, #20]
}
 8006ba4:	4618      	mov	r0, r3
 8006ba6:	3718      	adds	r7, #24
 8006ba8:	46bd      	mov	sp, r7
 8006baa:	bd80      	pop	{r7, pc}

08006bac <WM8994_GetVolume>:
  * @param  InputOutput Input or Output volume
  * @param  Volume audio volume 
  * @retval Component status
  */
int32_t WM8994_GetVolume(WM8994_Object_t *pObj, uint32_t InputOutput, uint8_t *Volume)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b086      	sub	sp, #24
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	60f8      	str	r0, [r7, #12]
 8006bb4:	60b9      	str	r1, [r7, #8]
 8006bb6:	607a      	str	r2, [r7, #4]
  int32_t ret = WM8994_OK;  
 8006bb8:	2300      	movs	r3, #0
 8006bba:	617b      	str	r3, [r7, #20]
  uint16_t invertedvol;
  
  /* Output volume */
  if (InputOutput == VOLUME_OUTPUT)
 8006bbc:	68bb      	ldr	r3, [r7, #8]
 8006bbe:	2b01      	cmp	r3, #1
 8006bc0:	d11e      	bne.n	8006c00 <WM8994_GetVolume+0x54>
  {
    if(wm8994_lo_hpout1l_vol_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8006bc2:	68fb      	ldr	r3, [r7, #12]
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	f107 0212 	add.w	r2, r7, #18
 8006bca:	4611      	mov	r1, r2
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f000 fd6a 	bl	80076a6 <wm8994_lo_hpout1l_vol_r>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d003      	beq.n	8006be0 <WM8994_GetVolume+0x34>
    {
      ret = WM8994_ERROR;
 8006bd8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006bdc:	617b      	str	r3, [r7, #20]
 8006bde:	e02d      	b.n	8006c3c <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_OUT_INVERT(invertedvol);
 8006be0:	8a7b      	ldrh	r3, [r7, #18]
 8006be2:	461a      	mov	r2, r3
 8006be4:	2364      	movs	r3, #100	@ 0x64
 8006be6:	fb02 f303 	mul.w	r3, r2, r3
 8006bea:	4a17      	ldr	r2, [pc, #92]	@ (8006c48 <WM8994_GetVolume+0x9c>)
 8006bec:	fb82 1203 	smull	r1, r2, r2, r3
 8006bf0:	441a      	add	r2, r3
 8006bf2:	1152      	asrs	r2, r2, #5
 8006bf4:	17db      	asrs	r3, r3, #31
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	b2da      	uxtb	r2, r3
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	701a      	strb	r2, [r3, #0]
 8006bfe:	e01d      	b.n	8006c3c <WM8994_GetVolume+0x90>
    }
  }
  else /* Input volume: VOLUME_INPUT */
  {
    if(wm8994_aif1_adc1_left_vol_adc1l_r(&pObj->Ctx, &invertedvol) != WM8994_OK)
 8006c00:	68fb      	ldr	r3, [r7, #12]
 8006c02:	3318      	adds	r3, #24
 8006c04:	f107 0212 	add.w	r2, r7, #18
 8006c08:	4611      	mov	r1, r2
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fe63 	bl	80078d6 <wm8994_aif1_adc1_left_vol_adc1l_r>
 8006c10:	4603      	mov	r3, r0
 8006c12:	2b00      	cmp	r3, #0
 8006c14:	d003      	beq.n	8006c1e <WM8994_GetVolume+0x72>
    {
      ret = WM8994_ERROR;
 8006c16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006c1a:	617b      	str	r3, [r7, #20]
 8006c1c:	e00e      	b.n	8006c3c <WM8994_GetVolume+0x90>
    }
    else
    {
      *Volume = VOLUME_IN_INVERT(invertedvol);
 8006c1e:	8a7b      	ldrh	r3, [r7, #18]
 8006c20:	461a      	mov	r2, r3
 8006c22:	2364      	movs	r3, #100	@ 0x64
 8006c24:	fb02 f303 	mul.w	r3, r2, r3
 8006c28:	4a08      	ldr	r2, [pc, #32]	@ (8006c4c <WM8994_GetVolume+0xa0>)
 8006c2a:	fb82 1203 	smull	r1, r2, r2, r3
 8006c2e:	441a      	add	r2, r3
 8006c30:	11d2      	asrs	r2, r2, #7
 8006c32:	17db      	asrs	r3, r3, #31
 8006c34:	1ad3      	subs	r3, r2, r3
 8006c36:	b2da      	uxtb	r2, r3
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	701a      	strb	r2, [r3, #0]
    }
  }
  
  return ret;
 8006c3c:	697b      	ldr	r3, [r7, #20]
}
 8006c3e:	4618      	mov	r0, r3
 8006c40:	3718      	adds	r7, #24
 8006c42:	46bd      	mov	sp, r7
 8006c44:	bd80      	pop	{r7, pc}
 8006c46:	bf00      	nop
 8006c48:	82082083 	.word	0x82082083
 8006c4c:	891ac73b 	.word	0x891ac73b

08006c50 <WM8994_SetMute>:
  * @param Cmd  WM8994_MUTE_ON to enable the mute or WM8994_MUTE_OFF to disable the
  *             mute mode.
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetMute(WM8994_Object_t *pObj, uint32_t Cmd)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b084      	sub	sp, #16
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	6078      	str	r0, [r7, #4]
 8006c58:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  /* Set the Mute mode */
  if(Cmd == WM8994_MUTE_ON)
 8006c5a:	683b      	ldr	r3, [r7, #0]
 8006c5c:	2b01      	cmp	r3, #1
 8006c5e:	d11c      	bne.n	8006c9a <WM8994_SetMute+0x4a>
  { 
    tmp = 0x0200;
 8006c60:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8006c64:	817b      	strh	r3, [r7, #10]
    /* Soft Mute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	f103 0018 	add.w	r0, r3, #24
 8006c6c:	f107 020a 	add.w	r2, r7, #10
 8006c70:	2302      	movs	r3, #2
 8006c72:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006c76:	f000 fccd 	bl	8007614 <wm8994_write_reg>
 8006c7a:	60f8      	str	r0, [r7, #12]
    
    /* Soft Mute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	f103 0018 	add.w	r0, r3, #24
 8006c82:	f107 020a 	add.w	r2, r7, #10
 8006c86:	2302      	movs	r3, #2
 8006c88:	f240 4122 	movw	r1, #1058	@ 0x422
 8006c8c:	f000 fcc2 	bl	8007614 <wm8994_write_reg>
 8006c90:	4602      	mov	r2, r0
 8006c92:	68fb      	ldr	r3, [r7, #12]
 8006c94:	4413      	add	r3, r2
 8006c96:	60fb      	str	r3, [r7, #12]
 8006c98:	e01a      	b.n	8006cd0 <WM8994_SetMute+0x80>
  }
  else /* WM8994_MUTE_OFF Disable the Mute */
  {
    tmp = 0x0010;
 8006c9a:	2310      	movs	r3, #16
 8006c9c:	817b      	strh	r3, [r7, #10]
    /* Unmute the AIF1 Timeslot 0 DAC1 path L&R */
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f103 0018 	add.w	r0, r3, #24
 8006ca4:	f107 020a 	add.w	r2, r7, #10
 8006ca8:	2302      	movs	r3, #2
 8006caa:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006cae:	f000 fcb1 	bl	8007614 <wm8994_write_reg>
 8006cb2:	60f8      	str	r0, [r7, #12]
    
    /* Unmute the AIF1 Timeslot 1 DAC2 path L&R */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_FILTER1, &tmp, 2);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f103 0018 	add.w	r0, r3, #24
 8006cba:	f107 020a 	add.w	r2, r7, #10
 8006cbe:	2302      	movs	r3, #2
 8006cc0:	f240 4122 	movw	r1, #1058	@ 0x422
 8006cc4:	f000 fca6 	bl	8007614 <wm8994_write_reg>
 8006cc8:	4602      	mov	r2, r0
 8006cca:	68fb      	ldr	r3, [r7, #12]
 8006ccc:	4413      	add	r3, r2
 8006cce:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8006cd0:	68fb      	ldr	r3, [r7, #12]
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d002      	beq.n	8006cdc <WM8994_SetMute+0x8c>
  {
    ret = WM8994_ERROR;
 8006cd6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8006cda:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8006cdc:	68fb      	ldr	r3, [r7, #12]
}
 8006cde:	4618      	mov	r0, r3
 8006ce0:	3710      	adds	r7, #16
 8006ce2:	46bd      	mov	sp, r7
 8006ce4:	bd80      	pop	{r7, pc}

08006ce6 <WM8994_SetOutputMode>:
  * @param Output  specifies the audio output target: WM8994_OUT_SPEAKER,
  *         WM8994_OUT_HEADPHONE, WM8994_OUT_BOTH or WM8994_OUT_AUTO 
  * @retval 0 if correct communication, else wrong communication
  */
int32_t WM8994_SetOutputMode(WM8994_Object_t *pObj, uint32_t Output)
{
 8006ce6:	b580      	push	{r7, lr}
 8006ce8:	b084      	sub	sp, #16
 8006cea:	af00      	add	r7, sp, #0
 8006cec:	6078      	str	r0, [r7, #4]
 8006cee:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  if((Output == WM8994_OUT_HEADPHONE) || (Output == WM8994_OUT_AUTO))
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	2b02      	cmp	r3, #2
 8006cf4:	d003      	beq.n	8006cfe <WM8994_SetOutputMode+0x18>
 8006cf6:	683b      	ldr	r3, [r7, #0]
 8006cf8:	2b04      	cmp	r3, #4
 8006cfa:	f040 809c 	bne.w	8006e36 <WM8994_SetOutputMode+0x150>
  {
    /* Disable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x0000;
 8006cfe:	2300      	movs	r3, #0
 8006d00:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	f103 0018 	add.w	r0, r3, #24
 8006d08:	f107 020a 	add.w	r2, r7, #10
 8006d0c:	2302      	movs	r3, #2
 8006d0e:	2101      	movs	r1, #1
 8006d10:	f000 fc80 	bl	8007614 <wm8994_write_reg>
 8006d14:	60f8      	str	r0, [r7, #12]
    
    /* Disable DAC1 (Left), Disable DAC1 (Right),
    Enable DAC2 (Left), Enable DAC2 (Right)*/
    tmp = 0x0303;
 8006d16:	f240 3303 	movw	r3, #771	@ 0x303
 8006d1a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f103 0018 	add.w	r0, r3, #24
 8006d22:	f107 020a 	add.w	r2, r7, #10
 8006d26:	2302      	movs	r3, #2
 8006d28:	2105      	movs	r1, #5
 8006d2a:	f000 fc73 	bl	8007614 <wm8994_write_reg>
 8006d2e:	4602      	mov	r2, r0
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	4413      	add	r3, r2
 8006d34:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
    tmp = 0x0001;
 8006d36:	2301      	movs	r3, #1
 8006d38:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f103 0018 	add.w	r0, r3, #24
 8006d40:	f107 020a 	add.w	r2, r7, #10
 8006d44:	2302      	movs	r3, #2
 8006d46:	f240 6101 	movw	r1, #1537	@ 0x601
 8006d4a:	f000 fc63 	bl	8007614 <wm8994_write_reg>
 8006d4e:	4602      	mov	r2, r0
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	4413      	add	r3, r2
 8006d54:	60fb      	str	r3, [r7, #12]
    
    /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	f103 0018 	add.w	r0, r3, #24
 8006d5c:	f107 020a 	add.w	r2, r7, #10
 8006d60:	2302      	movs	r3, #2
 8006d62:	f240 6102 	movw	r1, #1538	@ 0x602
 8006d66:	f000 fc55 	bl	8007614 <wm8994_write_reg>
 8006d6a:	4602      	mov	r2, r0
 8006d6c:	68fb      	ldr	r3, [r7, #12]
 8006d6e:	4413      	add	r3, r2
 8006d70:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
    tmp = 0x0000;
 8006d72:	2300      	movs	r3, #0
 8006d74:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	f103 0018 	add.w	r0, r3, #24
 8006d7c:	f107 020a 	add.w	r2, r7, #10
 8006d80:	2302      	movs	r3, #2
 8006d82:	f240 6104 	movw	r1, #1540	@ 0x604
 8006d86:	f000 fc45 	bl	8007614 <wm8994_write_reg>
 8006d8a:	4602      	mov	r2, r0
 8006d8c:	68fb      	ldr	r3, [r7, #12]
 8006d8e:	4413      	add	r3, r2
 8006d90:	60fb      	str	r3, [r7, #12]
    
    /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	f103 0018 	add.w	r0, r3, #24
 8006d98:	f107 020a 	add.w	r2, r7, #10
 8006d9c:	2302      	movs	r3, #2
 8006d9e:	f240 6105 	movw	r1, #1541	@ 0x605
 8006da2:	f000 fc37 	bl	8007614 <wm8994_write_reg>
 8006da6:	4602      	mov	r2, r0
 8006da8:	68fb      	ldr	r3, [r7, #12]
 8006daa:	4413      	add	r3, r2
 8006dac:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0100;
 8006dae:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8006db2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8006db4:	687b      	ldr	r3, [r7, #4]
 8006db6:	f103 0018 	add.w	r0, r3, #24
 8006dba:	f107 020a 	add.w	r2, r7, #10
 8006dbe:	2302      	movs	r3, #2
 8006dc0:	212d      	movs	r1, #45	@ 0x2d
 8006dc2:	f000 fc27 	bl	8007614 <wm8994_write_reg>
 8006dc6:	4602      	mov	r2, r0
 8006dc8:	68fb      	ldr	r3, [r7, #12]
 8006dca:	4413      	add	r3, r2
 8006dcc:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	f103 0018 	add.w	r0, r3, #24
 8006dd4:	f107 020a 	add.w	r2, r7, #10
 8006dd8:	2302      	movs	r3, #2
 8006dda:	212e      	movs	r1, #46	@ 0x2e
 8006ddc:	f000 fc1a 	bl	8007614 <wm8994_write_reg>
 8006de0:	4602      	mov	r2, r0
 8006de2:	68fb      	ldr	r3, [r7, #12]
 8006de4:	4413      	add	r3, r2
 8006de6:	60fb      	str	r3, [r7, #12]
    
    /* Startup sequence for Headphone */
    /* Enable/Start the write sequencer */
    tmp = 0x8100;
 8006de8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8006dec:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_WRITE_SEQ_CTRL1, &tmp, 2);
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	f103 0018 	add.w	r0, r3, #24
 8006df4:	f107 020a 	add.w	r2, r7, #10
 8006df8:	2302      	movs	r3, #2
 8006dfa:	f44f 7188 	mov.w	r1, #272	@ 0x110
 8006dfe:	f000 fc09 	bl	8007614 <wm8994_write_reg>
 8006e02:	4602      	mov	r2, r0
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	4413      	add	r3, r2
 8006e08:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 300);
 8006e0a:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006e0e:	6878      	ldr	r0, [r7, #4]
 8006e10:	f000 fb88 	bl	8007524 <WM8994_Delay>
    
    /* Soft un-Mute the AIF1 Timeslot 0 DAC1 path L&R */
    tmp = 0x0000;
 8006e14:	2300      	movs	r3, #0
 8006e16:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_FILTER1, &tmp, 2);    
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f103 0018 	add.w	r0, r3, #24
 8006e1e:	f107 020a 	add.w	r2, r7, #10
 8006e22:	2302      	movs	r3, #2
 8006e24:	f44f 6184 	mov.w	r1, #1056	@ 0x420
 8006e28:	f000 fbf4 	bl	8007614 <wm8994_write_reg>
 8006e2c:	4602      	mov	r2, r0
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	4413      	add	r3, r2
 8006e32:	60fb      	str	r3, [r7, #12]
 8006e34:	e165      	b.n	8007102 <WM8994_SetOutputMode+0x41c>
  }
  else
  {    
    switch (Output) 
 8006e36:	683b      	ldr	r3, [r7, #0]
 8006e38:	2b01      	cmp	r3, #1
 8006e3a:	d149      	bne.n	8006ed0 <WM8994_SetOutputMode+0x1ea>
    {    
    case WM8994_OUT_SPEAKER: 
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      Disable DAC2 (Left), Disable DAC2 (Right)*/
      tmp = 0x0C0C;
 8006e3c:	f640 430c 	movw	r3, #3084	@ 0xc0c
 8006e40:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	f103 0018 	add.w	r0, r3, #24
 8006e48:	f107 020a 	add.w	r2, r7, #10
 8006e4c:	2302      	movs	r3, #2
 8006e4e:	2105      	movs	r1, #5
 8006e50:	f000 fbe0 	bl	8007614 <wm8994_write_reg>
 8006e54:	60f8      	str	r0, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0000;
 8006e56:	2300      	movs	r3, #0
 8006e58:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f103 0018 	add.w	r0, r3, #24
 8006e60:	f107 020a 	add.w	r2, r7, #10
 8006e64:	2302      	movs	r3, #2
 8006e66:	f240 6101 	movw	r1, #1537	@ 0x601
 8006e6a:	f000 fbd3 	bl	8007614 <wm8994_write_reg>
 8006e6e:	4602      	mov	r2, r0
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	4413      	add	r3, r2
 8006e74:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f103 0018 	add.w	r0, r3, #24
 8006e7c:	f107 020a 	add.w	r2, r7, #10
 8006e80:	2302      	movs	r3, #2
 8006e82:	f240 6102 	movw	r1, #1538	@ 0x602
 8006e86:	f000 fbc5 	bl	8007614 <wm8994_write_reg>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	4413      	add	r3, r2
 8006e90:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8006e92:	2302      	movs	r3, #2
 8006e94:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	f103 0018 	add.w	r0, r3, #24
 8006e9c:	f107 020a 	add.w	r2, r7, #10
 8006ea0:	2302      	movs	r3, #2
 8006ea2:	f240 6104 	movw	r1, #1540	@ 0x604
 8006ea6:	f000 fbb5 	bl	8007614 <wm8994_write_reg>
 8006eaa:	4602      	mov	r2, r0
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	4413      	add	r3, r2
 8006eb0:	60fb      	str	r3, [r7, #12]
      
      /* Disable the AIF1 Timeslot 1 (Right) to DAC 2 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_RMR, &tmp, 2);
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	f103 0018 	add.w	r0, r3, #24
 8006eb8:	f107 020a 	add.w	r2, r7, #10
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	f240 6105 	movw	r1, #1541	@ 0x605
 8006ec2:	f000 fba7 	bl	8007614 <wm8994_write_reg>
 8006ec6:	4602      	mov	r2, r0
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	4413      	add	r3, r2
 8006ecc:	60fb      	str	r3, [r7, #12]
      break;
 8006ece:	e03b      	b.n	8006f48 <WM8994_SetOutputMode+0x262>
      
    case WM8994_OUT_BOTH:
    default:  
      /* Enable DAC1 (Left), Enable DAC1 (Right),
      also Enable DAC2 (Left), Enable DAC2 (Right)*/
      tmp = 0x0F0F;
 8006ed0:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8006ed4:	817b      	strh	r3, [r7, #10]
      ret = wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_5, &tmp, 2);
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	f103 0018 	add.w	r0, r3, #24
 8006edc:	f107 020a 	add.w	r2, r7, #10
 8006ee0:	2302      	movs	r3, #2
 8006ee2:	2105      	movs	r1, #5
 8006ee4:	f000 fb96 	bl	8007614 <wm8994_write_reg>
 8006ee8:	60f8      	str	r0, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Left) to DAC 1 (Left) mixer path */
      tmp = 0x0001;
 8006eea:	2301      	movs	r3, #1
 8006eec:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_LMR, &tmp, 2);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f103 0018 	add.w	r0, r3, #24
 8006ef4:	f107 020a 	add.w	r2, r7, #10
 8006ef8:	2302      	movs	r3, #2
 8006efa:	f240 6101 	movw	r1, #1537	@ 0x601
 8006efe:	f000 fb89 	bl	8007614 <wm8994_write_reg>
 8006f02:	4602      	mov	r2, r0
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4413      	add	r3, r2
 8006f08:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 0 (Right) to DAC 1 (Right) mixer path */
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC1_RMR, &tmp, 2);
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	f103 0018 	add.w	r0, r3, #24
 8006f10:	f107 020a 	add.w	r2, r7, #10
 8006f14:	2302      	movs	r3, #2
 8006f16:	f240 6102 	movw	r1, #1538	@ 0x602
 8006f1a:	f000 fb7b 	bl	8007614 <wm8994_write_reg>
 8006f1e:	4602      	mov	r2, r0
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	4413      	add	r3, r2
 8006f24:	60fb      	str	r3, [r7, #12]
      
      /* Enable the AIF1 Timeslot 1 (Left) to DAC 2 (Left) mixer path */
      tmp = 0x0002;
 8006f26:	2302      	movs	r3, #2
 8006f28:	817b      	strh	r3, [r7, #10]
      ret += wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_DAC2_LMR, &tmp, 2);      
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	f103 0018 	add.w	r0, r3, #24
 8006f30:	f107 020a 	add.w	r2, r7, #10
 8006f34:	2302      	movs	r3, #2
 8006f36:	f240 6104 	movw	r1, #1540	@ 0x604
 8006f3a:	f000 fb6b 	bl	8007614 <wm8994_write_reg>
 8006f3e:	4602      	mov	r2, r0
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	4413      	add	r3, r2
 8006f44:	60fb      	str	r3, [r7, #12]
      break;
 8006f46:	bf00      	nop
    }
    
    /* Enable SPKRVOL PGA, Enable SPKMIXR, Enable SPKLVOL PGA, Enable SPKMIXL */
    tmp = 0x0300;
 8006f48:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006f4c:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	f103 0018 	add.w	r0, r3, #24
 8006f54:	f107 020a 	add.w	r2, r7, #10
 8006f58:	2302      	movs	r3, #2
 8006f5a:	2103      	movs	r1, #3
 8006f5c:	f000 fb5a 	bl	8007614 <wm8994_write_reg>
 8006f60:	4602      	mov	r2, r0
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4413      	add	r3, r2
 8006f66:	60fb      	str	r3, [r7, #12]
    
    /* Left Speaker Mixer Volume = 0dB */
    tmp = 0x0000;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXL_ATT, &tmp, 2);
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	f103 0018 	add.w	r0, r3, #24
 8006f72:	f107 020a 	add.w	r2, r7, #10
 8006f76:	2302      	movs	r3, #2
 8006f78:	2122      	movs	r1, #34	@ 0x22
 8006f7a:	f000 fb4b 	bl	8007614 <wm8994_write_reg>
 8006f7e:	4602      	mov	r2, r0
 8006f80:	68fb      	ldr	r3, [r7, #12]
 8006f82:	4413      	add	r3, r2
 8006f84:	60fb      	str	r3, [r7, #12]
    
    /* Speaker output mode = Class D, Right Speaker Mixer Volume = 0dB ((0x23, 0x0100) = class AB)*/
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPKMIXR_ATT, &tmp, 2);
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	f103 0018 	add.w	r0, r3, #24
 8006f8c:	f107 020a 	add.w	r2, r7, #10
 8006f90:	2302      	movs	r3, #2
 8006f92:	2123      	movs	r1, #35	@ 0x23
 8006f94:	f000 fb3e 	bl	8007614 <wm8994_write_reg>
 8006f98:	4602      	mov	r2, r0
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	4413      	add	r3, r2
 8006f9e:	60fb      	str	r3, [r7, #12]
    
    /* Unmute DAC2 (Left) to Left Speaker Mixer (SPKMIXL) path,
    Unmute DAC2 (Right) to Right Speaker Mixer (SPKMIXR) path */
    tmp = 0x0300;
 8006fa0:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8006fa4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_SPEAKER_MIXER, &tmp, 2);
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f103 0018 	add.w	r0, r3, #24
 8006fac:	f107 020a 	add.w	r2, r7, #10
 8006fb0:	2302      	movs	r3, #2
 8006fb2:	2136      	movs	r1, #54	@ 0x36
 8006fb4:	f000 fb2e 	bl	8007614 <wm8994_write_reg>
 8006fb8:	4602      	mov	r2, r0
 8006fba:	68fb      	ldr	r3, [r7, #12]
 8006fbc:	4413      	add	r3, r2
 8006fbe:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable SPKOUTL, Enable SPKOUTR */
    tmp = 0x3003;
 8006fc0:	f243 0303 	movw	r3, #12291	@ 0x3003
 8006fc4:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	f103 0018 	add.w	r0, r3, #24
 8006fcc:	f107 020a 	add.w	r2, r7, #10
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	2101      	movs	r1, #1
 8006fd4:	f000 fb1e 	bl	8007614 <wm8994_write_reg>
 8006fd8:	4602      	mov	r2, r0
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	4413      	add	r3, r2
 8006fde:	60fb      	str	r3, [r7, #12]
    /* Headphone/Speaker Enable */
    
    /* Enable Class W, Class W Envelope Tracking = AIF1 Timeslot 0 */
    tmp = 0x0005;
 8006fe0:	2305      	movs	r3, #5
 8006fe2:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CLASS_W, &tmp, 2);
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	f103 0018 	add.w	r0, r3, #24
 8006fea:	f107 020a 	add.w	r2, r7, #10
 8006fee:	2302      	movs	r3, #2
 8006ff0:	2151      	movs	r1, #81	@ 0x51
 8006ff2:	f000 fb0f 	bl	8007614 <wm8994_write_reg>
 8006ff6:	4602      	mov	r2, r0
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	4413      	add	r3, r2
 8006ffc:	60fb      	str	r3, [r7, #12]
    
    /* Enable bias generator, Enable VMID, Enable HPOUT1 (Left) and Enable HPOUT1 (Right) input stages */
    /* idem for Speaker */
    tmp = 0x3303;
 8006ffe:	f243 3303 	movw	r3, #13059	@ 0x3303
 8007002:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_1, &tmp, 2);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	f103 0018 	add.w	r0, r3, #24
 800700a:	f107 020a 	add.w	r2, r7, #10
 800700e:	2302      	movs	r3, #2
 8007010:	2101      	movs	r1, #1
 8007012:	f000 faff 	bl	8007614 <wm8994_write_reg>
 8007016:	4602      	mov	r2, r0
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	4413      	add	r3, r2
 800701c:	60fb      	str	r3, [r7, #12]
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate stages */
    tmp = 0x0022;
 800701e:	2322      	movs	r3, #34	@ 0x22
 8007020:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	f103 0018 	add.w	r0, r3, #24
 8007028:	f107 020a 	add.w	r2, r7, #10
 800702c:	2302      	movs	r3, #2
 800702e:	2160      	movs	r1, #96	@ 0x60
 8007030:	f000 faf0 	bl	8007614 <wm8994_write_reg>
 8007034:	4602      	mov	r2, r0
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	4413      	add	r3, r2
 800703a:	60fb      	str	r3, [r7, #12]
    
    /* Enable Charge Pump */
    tmp = 0x9F25;
 800703c:	f649 7325 	movw	r3, #40741	@ 0x9f25
 8007040:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_CHARGE_PUMP1, &tmp, 2);
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f103 0018 	add.w	r0, r3, #24
 8007048:	f107 020a 	add.w	r2, r7, #10
 800704c:	2302      	movs	r3, #2
 800704e:	214c      	movs	r1, #76	@ 0x4c
 8007050:	f000 fae0 	bl	8007614 <wm8994_write_reg>
 8007054:	4602      	mov	r2, r0
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	4413      	add	r3, r2
 800705a:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 15);
 800705c:	210f      	movs	r1, #15
 800705e:	6878      	ldr	r0, [r7, #4]
 8007060:	f000 fa60 	bl	8007524 <WM8994_Delay>
    
    /* Select DAC1 (Left) to Left Headphone Output PGA (HPOUT1LVOL) path */
    tmp = 0x0001;
 8007064:	2301      	movs	r3, #1
 8007066:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_1, &tmp, 2);
 8007068:	687b      	ldr	r3, [r7, #4]
 800706a:	f103 0018 	add.w	r0, r3, #24
 800706e:	f107 020a 	add.w	r2, r7, #10
 8007072:	2302      	movs	r3, #2
 8007074:	212d      	movs	r1, #45	@ 0x2d
 8007076:	f000 facd 	bl	8007614 <wm8994_write_reg>
 800707a:	4602      	mov	r2, r0
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	4413      	add	r3, r2
 8007080:	60fb      	str	r3, [r7, #12]
    
    /* Select DAC1 (Right) to Right Headphone Output PGA (HPOUT1RVOL) path */
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_OUTPUT_MIXER_2, &tmp, 2);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	f103 0018 	add.w	r0, r3, #24
 8007088:	f107 020a 	add.w	r2, r7, #10
 800708c:	2302      	movs	r3, #2
 800708e:	212e      	movs	r1, #46	@ 0x2e
 8007090:	f000 fac0 	bl	8007614 <wm8994_write_reg>
 8007094:	4602      	mov	r2, r0
 8007096:	68fb      	ldr	r3, [r7, #12]
 8007098:	4413      	add	r3, r2
 800709a:	60fb      	str	r3, [r7, #12]
    
    /* Enable Left Output Mixer (MIXOUTL), Enable Right Output Mixer (MIXOUTR) */
    /* idem for SPKOUTL and SPKOUTR */
    tmp = 0x0330;
 800709c:	f44f 734c 	mov.w	r3, #816	@ 0x330
 80070a0:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_PWR_MANAGEMENT_3, &tmp, 2);
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	f103 0018 	add.w	r0, r3, #24
 80070a8:	f107 020a 	add.w	r2, r7, #10
 80070ac:	2302      	movs	r3, #2
 80070ae:	2103      	movs	r1, #3
 80070b0:	f000 fab0 	bl	8007614 <wm8994_write_reg>
 80070b4:	4602      	mov	r2, r0
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	4413      	add	r3, r2
 80070ba:	60fb      	str	r3, [r7, #12]
    
    /* Enable DC Servo and trigger start-up mode on left and right channels */
    tmp = 0x0033;
 80070bc:	2333      	movs	r3, #51	@ 0x33
 80070be:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_DC_SERVO1, &tmp, 2);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f103 0018 	add.w	r0, r3, #24
 80070c6:	f107 020a 	add.w	r2, r7, #10
 80070ca:	2302      	movs	r3, #2
 80070cc:	2154      	movs	r1, #84	@ 0x54
 80070ce:	f000 faa1 	bl	8007614 <wm8994_write_reg>
 80070d2:	4602      	mov	r2, r0
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	4413      	add	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]
    
    /* Add Delay */
    (void)WM8994_Delay(pObj, 257);
 80070da:	f240 1101 	movw	r1, #257	@ 0x101
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f000 fa20 	bl	8007524 <WM8994_Delay>
    
    /* Enable HPOUT1 (Left) and HPOUT1 (Right) intermediate and output stages. Remove clamps */
    tmp = 0x00EE;
 80070e4:	23ee      	movs	r3, #238	@ 0xee
 80070e6:	817b      	strh	r3, [r7, #10]
    ret += wm8994_write_reg(&pObj->Ctx, WM8994_ANALOG_HP, &tmp, 2);    
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f103 0018 	add.w	r0, r3, #24
 80070ee:	f107 020a 	add.w	r2, r7, #10
 80070f2:	2302      	movs	r3, #2
 80070f4:	2160      	movs	r1, #96	@ 0x60
 80070f6:	f000 fa8d 	bl	8007614 <wm8994_write_reg>
 80070fa:	4602      	mov	r2, r0
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	4413      	add	r3, r2
 8007100:	60fb      	str	r3, [r7, #12]
  }
  
  if(ret != WM8994_OK)
 8007102:	68fb      	ldr	r3, [r7, #12]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d002      	beq.n	800710e <WM8994_SetOutputMode+0x428>
  {
    ret = WM8994_ERROR;
 8007108:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800710c:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 800710e:	68fb      	ldr	r3, [r7, #12]
}
 8007110:	4618      	mov	r0, r3
 8007112:	3710      	adds	r7, #16
 8007114:	46bd      	mov	sp, r7
 8007116:	bd80      	pop	{r7, pc}

08007118 <WM8994_SetResolution>:
  *                    WM8994_RESOLUTION_16b, WM8994_RESOLUTION_20b, 
  *                    WM8994_RESOLUTION_24b or WM8994_RESOLUTION_32b
  * @retval Component status
  */
int32_t WM8994_SetResolution(WM8994_Object_t *pObj, uint32_t Resolution)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	b084      	sub	sp, #16
 800711c:	af00      	add	r7, sp, #0
 800711e:	6078      	str	r0, [r7, #4]
 8007120:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;
 8007122:	2300      	movs	r3, #0
 8007124:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_wl(&pObj->Ctx, (uint16_t)Resolution) != WM8994_OK)
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	3318      	adds	r3, #24
 800712a:	683a      	ldr	r2, [r7, #0]
 800712c:	b292      	uxth	r2, r2
 800712e:	4611      	mov	r1, r2
 8007130:	4618      	mov	r0, r3
 8007132:	f000 fb4c 	bl	80077ce <wm8994_aif1_control1_wl>
 8007136:	4603      	mov	r3, r0
 8007138:	2b00      	cmp	r3, #0
 800713a:	d002      	beq.n	8007142 <WM8994_SetResolution+0x2a>
  {
    ret = WM8994_ERROR;
 800713c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007140:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8007142:	68fb      	ldr	r3, [r7, #12]
}
 8007144:	4618      	mov	r0, r3
 8007146:	3710      	adds	r7, #16
 8007148:	46bd      	mov	sp, r7
 800714a:	bd80      	pop	{r7, pc}

0800714c <WM8994_GetResolution>:
  * @brief Get Audio resolution.
  * @param pObj pointer to component object
  * @retval Audio resolution
  */
int32_t WM8994_GetResolution(WM8994_Object_t *pObj, uint32_t *Resolution)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b084      	sub	sp, #16
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
 8007154:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 8007156:	2300      	movs	r3, #0
 8007158:	60fb      	str	r3, [r7, #12]
  uint16_t resolution = 0;
 800715a:	2300      	movs	r3, #0
 800715c:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_control1_wl_r(&pObj->Ctx, &resolution) != WM8994_OK)
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	3318      	adds	r3, #24
 8007162:	f107 020a 	add.w	r2, r7, #10
 8007166:	4611      	mov	r1, r2
 8007168:	4618      	mov	r0, r3
 800716a:	f000 fb61 	bl	8007830 <wm8994_aif1_control1_wl_r>
 800716e:	4603      	mov	r3, r0
 8007170:	2b00      	cmp	r3, #0
 8007172:	d003      	beq.n	800717c <WM8994_GetResolution+0x30>
  {
    ret = WM8994_ERROR;
 8007174:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007178:	60fb      	str	r3, [r7, #12]
 800717a:	e021      	b.n	80071c0 <WM8994_GetResolution+0x74>
  }
  else
  {
    switch(resolution)
 800717c:	897b      	ldrh	r3, [r7, #10]
 800717e:	2b03      	cmp	r3, #3
 8007180:	d81a      	bhi.n	80071b8 <WM8994_GetResolution+0x6c>
 8007182:	a201      	add	r2, pc, #4	@ (adr r2, 8007188 <WM8994_GetResolution+0x3c>)
 8007184:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007188:	08007199 	.word	0x08007199
 800718c:	080071a1 	.word	0x080071a1
 8007190:	080071a9 	.word	0x080071a9
 8007194:	080071b1 	.word	0x080071b1
    {
    case 0:
      *Resolution = WM8994_RESOLUTION_16b;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	2200      	movs	r2, #0
 800719c:	601a      	str	r2, [r3, #0]
      break;
 800719e:	e00f      	b.n	80071c0 <WM8994_GetResolution+0x74>
    case 1:
      *Resolution = WM8994_RESOLUTION_20b;
 80071a0:	683b      	ldr	r3, [r7, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	601a      	str	r2, [r3, #0]
      break;
 80071a6:	e00b      	b.n	80071c0 <WM8994_GetResolution+0x74>
    case 2:
      *Resolution = WM8994_RESOLUTION_24b;
 80071a8:	683b      	ldr	r3, [r7, #0]
 80071aa:	2202      	movs	r2, #2
 80071ac:	601a      	str	r2, [r3, #0]
      break;
 80071ae:	e007      	b.n	80071c0 <WM8994_GetResolution+0x74>
    case 3:
      *Resolution = WM8994_RESOLUTION_32b;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	2203      	movs	r2, #3
 80071b4:	601a      	str	r2, [r3, #0]
      break; 
 80071b6:	e003      	b.n	80071c0 <WM8994_GetResolution+0x74>
    default:
      *Resolution = WM8994_RESOLUTION_16b;
 80071b8:	683b      	ldr	r3, [r7, #0]
 80071ba:	2200      	movs	r2, #0
 80071bc:	601a      	str	r2, [r3, #0]
      break;
 80071be:	bf00      	nop
    }
  }
  
  return ret;
 80071c0:	68fb      	ldr	r3, [r7, #12]
}
 80071c2:	4618      	mov	r0, r3
 80071c4:	3710      	adds	r7, #16
 80071c6:	46bd      	mov	sp, r7
 80071c8:	bd80      	pop	{r7, pc}
 80071ca:	bf00      	nop

080071cc <WM8994_SetProtocol>:
  *                  WM8994_PROTOCOL_R_JUSTIFIED, WM8994_PROTOCOL_L_JUSTIFIED, 
  *                  WM8994_PROTOCOL_I2S or WM8994_PROTOCOL_DSP
  * @retval Component status
  */
int32_t WM8994_SetProtocol(WM8994_Object_t *pObj, uint32_t Protocol)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	6078      	str	r0, [r7, #4]
 80071d4:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK; 
 80071d6:	2300      	movs	r3, #0
 80071d8:	60fb      	str	r3, [r7, #12]
  
  if(wm8994_aif1_control1_fmt(&pObj->Ctx, (uint16_t)Protocol) != WM8994_OK)
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	3318      	adds	r3, #24
 80071de:	683a      	ldr	r2, [r7, #0]
 80071e0:	b292      	uxth	r2, r2
 80071e2:	4611      	mov	r1, r2
 80071e4:	4618      	mov	r0, r3
 80071e6:	f000 fa9f 	bl	8007728 <wm8994_aif1_control1_fmt>
 80071ea:	4603      	mov	r3, r0
 80071ec:	2b00      	cmp	r3, #0
 80071ee:	d002      	beq.n	80071f6 <WM8994_SetProtocol+0x2a>
  {
    ret = WM8994_ERROR;
 80071f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80071f4:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;  
 80071f6:	68fb      	ldr	r3, [r7, #12]
}
 80071f8:	4618      	mov	r0, r3
 80071fa:	3710      	adds	r7, #16
 80071fc:	46bd      	mov	sp, r7
 80071fe:	bd80      	pop	{r7, pc}

08007200 <WM8994_GetProtocol>:
  * @brief Get Audio Protocol.
  * @param pObj pointer to component object
  * @retval Component status
  */
int32_t WM8994_GetProtocol(WM8994_Object_t *pObj, uint32_t *Protocol)
{
 8007200:	b580      	push	{r7, lr}
 8007202:	b084      	sub	sp, #16
 8007204:	af00      	add	r7, sp, #0
 8007206:	6078      	str	r0, [r7, #4]
 8007208:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;  
 800720a:	2300      	movs	r3, #0
 800720c:	60fb      	str	r3, [r7, #12]
  uint16_t protocol;
  
  if(wm8994_aif1_control1_fmt_r(&pObj->Ctx, &protocol) != WM8994_OK)
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	3318      	adds	r3, #24
 8007212:	f107 020a 	add.w	r2, r7, #10
 8007216:	4611      	mov	r1, r2
 8007218:	4618      	mov	r0, r3
 800721a:	f000 fab6 	bl	800778a <wm8994_aif1_control1_fmt_r>
 800721e:	4603      	mov	r3, r0
 8007220:	2b00      	cmp	r3, #0
 8007222:	d003      	beq.n	800722c <WM8994_GetProtocol+0x2c>
  {
    ret = WM8994_ERROR;
 8007224:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007228:	60fb      	str	r3, [r7, #12]
 800722a:	e003      	b.n	8007234 <WM8994_GetProtocol+0x34>
  }
  else
  {
    *Protocol = protocol;
 800722c:	897b      	ldrh	r3, [r7, #10]
 800722e:	461a      	mov	r2, r3
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	601a      	str	r2, [r3, #0]
  }
  
  return ret;
 8007234:	68fb      	ldr	r3, [r7, #12]
}
 8007236:	4618      	mov	r0, r3
 8007238:	3710      	adds	r7, #16
 800723a:	46bd      	mov	sp, r7
 800723c:	bd80      	pop	{r7, pc}
	...

08007240 <WM8994_SetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_SetFrequency(WM8994_Object_t *pObj, uint32_t AudioFreq)
{
 8007240:	b580      	push	{r7, lr}
 8007242:	b084      	sub	sp, #16
 8007244:	af00      	add	r7, sp, #0
 8007246:	6078      	str	r0, [r7, #4]
 8007248:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint16_t tmp;
  
  switch (AudioFreq)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	4a55      	ldr	r2, [pc, #340]	@ (80073a4 <WM8994_SetFrequency+0x164>)
 800724e:	4293      	cmp	r3, r2
 8007250:	d05d      	beq.n	800730e <WM8994_SetFrequency+0xce>
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	4a53      	ldr	r2, [pc, #332]	@ (80073a4 <WM8994_SetFrequency+0x164>)
 8007256:	4293      	cmp	r3, r2
 8007258:	f200 8091 	bhi.w	800737e <WM8994_SetFrequency+0x13e>
 800725c:	683b      	ldr	r3, [r7, #0]
 800725e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8007262:	4293      	cmp	r3, r2
 8007264:	d07d      	beq.n	8007362 <WM8994_SetFrequency+0x122>
 8007266:	683b      	ldr	r3, [r7, #0]
 8007268:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800726c:	4293      	cmp	r3, r2
 800726e:	f200 8086 	bhi.w	800737e <WM8994_SetFrequency+0x13e>
 8007272:	683b      	ldr	r3, [r7, #0]
 8007274:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007278:	d03b      	beq.n	80072f2 <WM8994_SetFrequency+0xb2>
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	f5b3 4ffa 	cmp.w	r3, #32000	@ 0x7d00
 8007280:	d87d      	bhi.n	800737e <WM8994_SetFrequency+0x13e>
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007288:	4293      	cmp	r3, r2
 800728a:	d05c      	beq.n	8007346 <WM8994_SetFrequency+0x106>
 800728c:	683b      	ldr	r3, [r7, #0]
 800728e:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007292:	4293      	cmp	r3, r2
 8007294:	d873      	bhi.n	800737e <WM8994_SetFrequency+0x13e>
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 800729c:	d01b      	beq.n	80072d6 <WM8994_SetFrequency+0x96>
 800729e:	683b      	ldr	r3, [r7, #0]
 80072a0:	f5b3 5f7a 	cmp.w	r3, #16000	@ 0x3e80
 80072a4:	d86b      	bhi.n	800737e <WM8994_SetFrequency+0x13e>
 80072a6:	683b      	ldr	r3, [r7, #0]
 80072a8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80072ac:	d005      	beq.n	80072ba <WM8994_SetFrequency+0x7a>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	f642 3211 	movw	r2, #11025	@ 0x2b11
 80072b4:	4293      	cmp	r3, r2
 80072b6:	d038      	beq.n	800732a <WM8994_SetFrequency+0xea>
 80072b8:	e061      	b.n	800737e <WM8994_SetFrequency+0x13e>
  {
  case  WM8994_FREQUENCY_8K:
    /* AIF1 Sample Rate = 8 (KHz), ratio=256 */
    tmp = 0x0003;
 80072ba:	2303      	movs	r3, #3
 80072bc:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	f103 0018 	add.w	r0, r3, #24
 80072c4:	f107 020a 	add.w	r2, r7, #10
 80072c8:	2302      	movs	r3, #2
 80072ca:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80072ce:	f000 f9a1 	bl	8007614 <wm8994_write_reg>
 80072d2:	60f8      	str	r0, [r7, #12]
    break;
 80072d4:	e061      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_16K:
    /* AIF1 Sample Rate = 16 (KHz), ratio=256 */ 
    tmp = 0x0033;
 80072d6:	2333      	movs	r3, #51	@ 0x33
 80072d8:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	f103 0018 	add.w	r0, r3, #24
 80072e0:	f107 020a 	add.w	r2, r7, #10
 80072e4:	2302      	movs	r3, #2
 80072e6:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80072ea:	f000 f993 	bl	8007614 <wm8994_write_reg>
 80072ee:	60f8      	str	r0, [r7, #12]
    break;
 80072f0:	e053      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_32K:
    /* AIF1 Sample Rate = 32 (KHz), ratio=256 */
    tmp = 0x0063;
 80072f2:	2363      	movs	r3, #99	@ 0x63
 80072f4:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 80072f6:	687b      	ldr	r3, [r7, #4]
 80072f8:	f103 0018 	add.w	r0, r3, #24
 80072fc:	f107 020a 	add.w	r2, r7, #10
 8007300:	2302      	movs	r3, #2
 8007302:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007306:	f000 f985 	bl	8007614 <wm8994_write_reg>
 800730a:	60f8      	str	r0, [r7, #12]
    break;
 800730c:	e045      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_96K:
    /* AIF1 Sample Rate = 96 (KHz), ratio=256 */
    tmp = 0x00A3;
 800730e:	23a3      	movs	r3, #163	@ 0xa3
 8007310:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	f103 0018 	add.w	r0, r3, #24
 8007318:	f107 020a 	add.w	r2, r7, #10
 800731c:	2302      	movs	r3, #2
 800731e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007322:	f000 f977 	bl	8007614 <wm8994_write_reg>
 8007326:	60f8      	str	r0, [r7, #12]
    break;
 8007328:	e037      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_11K:
    /* AIF1 Sample Rate = 11.025 (KHz), ratio=256 */ 
    tmp = 0x0013;
 800732a:	2313      	movs	r3, #19
 800732c:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800732e:	687b      	ldr	r3, [r7, #4]
 8007330:	f103 0018 	add.w	r0, r3, #24
 8007334:	f107 020a 	add.w	r2, r7, #10
 8007338:	2302      	movs	r3, #2
 800733a:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800733e:	f000 f969 	bl	8007614 <wm8994_write_reg>
 8007342:	60f8      	str	r0, [r7, #12]
    break;
 8007344:	e029      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_22K:
    /* AIF1 Sample Rate = 22.050 (KHz), ratio=256 */ 
    tmp = 0x0043;
 8007346:	2343      	movs	r3, #67	@ 0x43
 8007348:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	f103 0018 	add.w	r0, r3, #24
 8007350:	f107 020a 	add.w	r2, r7, #10
 8007354:	2302      	movs	r3, #2
 8007356:	f44f 7104 	mov.w	r1, #528	@ 0x210
 800735a:	f000 f95b 	bl	8007614 <wm8994_write_reg>
 800735e:	60f8      	str	r0, [r7, #12]
    break;
 8007360:	e01b      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_44K:
    /* AIF1 Sample Rate = 44.1 (KHz), ratio=256 */ 
    tmp = 0x0073;
 8007362:	2373      	movs	r3, #115	@ 0x73
 8007364:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	f103 0018 	add.w	r0, r3, #24
 800736c:	f107 020a 	add.w	r2, r7, #10
 8007370:	2302      	movs	r3, #2
 8007372:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007376:	f000 f94d 	bl	8007614 <wm8994_write_reg>
 800737a:	60f8      	str	r0, [r7, #12]
    break; 
 800737c:	e00d      	b.n	800739a <WM8994_SetFrequency+0x15a>
    
  case  WM8994_FREQUENCY_48K:    
  default:
    /* AIF1 Sample Rate = 48 (KHz), ratio=256 */
    tmp = 0x0083;
 800737e:	2383      	movs	r3, #131	@ 0x83
 8007380:	817b      	strh	r3, [r7, #10]
    ret = wm8994_write_reg(&pObj->Ctx, WM8994_AIF1_RATE, &tmp, 2);
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	f103 0018 	add.w	r0, r3, #24
 8007388:	f107 020a 	add.w	r2, r7, #10
 800738c:	2302      	movs	r3, #2
 800738e:	f44f 7104 	mov.w	r1, #528	@ 0x210
 8007392:	f000 f93f 	bl	8007614 <wm8994_write_reg>
 8007396:	60f8      	str	r0, [r7, #12]
    break; 
 8007398:	bf00      	nop
  }
  
  return ret;
 800739a:	68fb      	ldr	r3, [r7, #12]
}
 800739c:	4618      	mov	r0, r3
 800739e:	3710      	adds	r7, #16
 80073a0:	46bd      	mov	sp, r7
 80073a2:	bd80      	pop	{r7, pc}
 80073a4:	00017700 	.word	0x00017700

080073a8 <WM8994_GetFrequency>:
  * @param pObj pointer to component object
  * @param AudioFreq Audio frequency
  * @retval Component status
  */
int32_t WM8994_GetFrequency(WM8994_Object_t *pObj, uint32_t *AudioFreq)
{
 80073a8:	b580      	push	{r7, lr}
 80073aa:	b084      	sub	sp, #16
 80073ac:	af00      	add	r7, sp, #0
 80073ae:	6078      	str	r0, [r7, #4]
 80073b0:	6039      	str	r1, [r7, #0]
  int32_t ret = WM8994_OK;   
 80073b2:	2300      	movs	r3, #0
 80073b4:	60fb      	str	r3, [r7, #12]
  uint16_t freq = 0;
 80073b6:	2300      	movs	r3, #0
 80073b8:	817b      	strh	r3, [r7, #10]
  
  if(wm8994_aif1_sr_r(&pObj->Ctx, &freq) != WM8994_OK)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	3318      	adds	r3, #24
 80073be:	f107 020a 	add.w	r2, r7, #10
 80073c2:	4611      	mov	r1, r2
 80073c4:	4618      	mov	r0, r3
 80073c6:	f000 f98d 	bl	80076e4 <wm8994_aif1_sr_r>
 80073ca:	4603      	mov	r3, r0
 80073cc:	2b00      	cmp	r3, #0
 80073ce:	d003      	beq.n	80073d8 <WM8994_GetFrequency+0x30>
  {
    ret = WM8994_ERROR;
 80073d0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	e043      	b.n	8007460 <WM8994_GetFrequency+0xb8>
  }
  else
  {
    switch(freq)
 80073d8:	897b      	ldrh	r3, [r7, #10]
 80073da:	2b0a      	cmp	r3, #10
 80073dc:	d83f      	bhi.n	800745e <WM8994_GetFrequency+0xb6>
 80073de:	a201      	add	r2, pc, #4	@ (adr r2, 80073e4 <WM8994_GetFrequency+0x3c>)
 80073e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80073e4:	08007411 	.word	0x08007411
 80073e8:	0800741b 	.word	0x0800741b
 80073ec:	0800745f 	.word	0x0800745f
 80073f0:	08007425 	.word	0x08007425
 80073f4:	0800742f 	.word	0x0800742f
 80073f8:	0800745f 	.word	0x0800745f
 80073fc:	08007439 	.word	0x08007439
 8007400:	08007443 	.word	0x08007443
 8007404:	0800744d 	.word	0x0800744d
 8007408:	0800745f 	.word	0x0800745f
 800740c:	08007457 	.word	0x08007457
    {
    case 0:
      *AudioFreq = WM8994_FREQUENCY_8K;
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	f44f 52fa 	mov.w	r2, #8000	@ 0x1f40
 8007416:	601a      	str	r2, [r3, #0]
      break;
 8007418:	e022      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 1:
      *AudioFreq = WM8994_FREQUENCY_11K;
 800741a:	683b      	ldr	r3, [r7, #0]
 800741c:	f642 3211 	movw	r2, #11025	@ 0x2b11
 8007420:	601a      	str	r2, [r3, #0]
      break;    
 8007422:	e01d      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 3:
      *AudioFreq = WM8994_FREQUENCY_16K;
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	f44f 527a 	mov.w	r2, #16000	@ 0x3e80
 800742a:	601a      	str	r2, [r3, #0]
      break;
 800742c:	e018      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 4:
      *AudioFreq = WM8994_FREQUENCY_22K;
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	f245 6222 	movw	r2, #22050	@ 0x5622
 8007434:	601a      	str	r2, [r3, #0]
      break; 
 8007436:	e013      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 6:
      *AudioFreq = WM8994_FREQUENCY_32K;
 8007438:	683b      	ldr	r3, [r7, #0]
 800743a:	f44f 42fa 	mov.w	r2, #32000	@ 0x7d00
 800743e:	601a      	str	r2, [r3, #0]
      break; 
 8007440:	e00e      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 7:
      *AudioFreq = WM8994_FREQUENCY_44K;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	f64a 4244 	movw	r2, #44100	@ 0xac44
 8007448:	601a      	str	r2, [r3, #0]
      break;    
 800744a:	e009      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 8:
      *AudioFreq = WM8994_FREQUENCY_48K;
 800744c:	683b      	ldr	r3, [r7, #0]
 800744e:	f64b 3280 	movw	r2, #48000	@ 0xbb80
 8007452:	601a      	str	r2, [r3, #0]
      break;
 8007454:	e004      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    case 10:
      *AudioFreq = WM8994_FREQUENCY_96K;
 8007456:	683b      	ldr	r3, [r7, #0]
 8007458:	4a04      	ldr	r2, [pc, #16]	@ (800746c <WM8994_GetFrequency+0xc4>)
 800745a:	601a      	str	r2, [r3, #0]
      break;    
 800745c:	e000      	b.n	8007460 <WM8994_GetFrequency+0xb8>
    default:
      break;    
 800745e:	bf00      	nop
    }
  }
  
  return ret;
 8007460:	68fb      	ldr	r3, [r7, #12]
}
 8007462:	4618      	mov	r0, r3
 8007464:	3710      	adds	r7, #16
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}
 800746a:	bf00      	nop
 800746c:	00017700 	.word	0x00017700

08007470 <WM8994_Reset>:
  * @brief Resets wm8994 registers.
  * @param pObj pointer to component object 
  * @retval Component status if correct communication, else wrong communication
  */
int32_t WM8994_Reset(WM8994_Object_t *pObj)
{
 8007470:	b580      	push	{r7, lr}
 8007472:	b084      	sub	sp, #16
 8007474:	af00      	add	r7, sp, #0
 8007476:	6078      	str	r0, [r7, #4]
  int32_t ret = WM8994_OK;
 8007478:	2300      	movs	r3, #0
 800747a:	60fb      	str	r3, [r7, #12]
  
  /* Reset Codec by writing in 0x0000 address register */
  if(wm8994_sw_reset_w(&pObj->Ctx, 0x0000) != WM8994_OK)
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	3318      	adds	r3, #24
 8007480:	2100      	movs	r1, #0
 8007482:	4618      	mov	r0, r3
 8007484:	f000 f8ee 	bl	8007664 <wm8994_sw_reset_w>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d002      	beq.n	8007494 <WM8994_Reset+0x24>
  {
    ret = WM8994_ERROR;
 800748e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007492:	60fb      	str	r3, [r7, #12]
  }
  
  return ret;
 8007494:	68fb      	ldr	r3, [r7, #12]
}
 8007496:	4618      	mov	r0, r3
 8007498:	3710      	adds	r7, #16
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}
	...

080074a0 <WM8994_RegisterBusIO>:
  * @brief  Function
  * @param  Component object pointer
  * @retval error status
  */
int32_t WM8994_RegisterBusIO (WM8994_Object_t *pObj, WM8994_IO_t *pIO)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b084      	sub	sp, #16
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  if (pObj == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d103      	bne.n	80074b8 <WM8994_RegisterBusIO+0x18>
  {
    ret = WM8994_ERROR;
 80074b0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80074b4:	60fb      	str	r3, [r7, #12]
 80074b6:	e02c      	b.n	8007512 <WM8994_RegisterBusIO+0x72>
  }
  else
  {
    pObj->IO.Init      = pIO->Init;
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	681a      	ldr	r2, [r3, #0]
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	601a      	str	r2, [r3, #0]
    pObj->IO.DeInit    = pIO->DeInit;
 80074c0:	683b      	ldr	r3, [r7, #0]
 80074c2:	685a      	ldr	r2, [r3, #4]
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	605a      	str	r2, [r3, #4]
    pObj->IO.Address   = pIO->Address;
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	891a      	ldrh	r2, [r3, #8]
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	811a      	strh	r2, [r3, #8]
    pObj->IO.WriteReg  = pIO->WriteReg;
 80074d0:	683b      	ldr	r3, [r7, #0]
 80074d2:	68da      	ldr	r2, [r3, #12]
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	60da      	str	r2, [r3, #12]
    pObj->IO.ReadReg   = pIO->ReadReg;
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	691a      	ldr	r2, [r3, #16]
 80074dc:	687b      	ldr	r3, [r7, #4]
 80074de:	611a      	str	r2, [r3, #16]
    pObj->IO.GetTick   = pIO->GetTick;
 80074e0:	683b      	ldr	r3, [r7, #0]
 80074e2:	695a      	ldr	r2, [r3, #20]
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	615a      	str	r2, [r3, #20]
    
    pObj->Ctx.ReadReg  = WM8994_ReadRegWrap;
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	4a0c      	ldr	r2, [pc, #48]	@ (800751c <WM8994_RegisterBusIO+0x7c>)
 80074ec:	61da      	str	r2, [r3, #28]
    pObj->Ctx.WriteReg = WM8994_WriteRegWrap;
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	4a0b      	ldr	r2, [pc, #44]	@ (8007520 <WM8994_RegisterBusIO+0x80>)
 80074f2:	619a      	str	r2, [r3, #24]
    pObj->Ctx.handle   = pObj;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	687a      	ldr	r2, [r7, #4]
 80074f8:	621a      	str	r2, [r3, #32]
    
    if(pObj->IO.Init != NULL)
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d004      	beq.n	800750c <WM8994_RegisterBusIO+0x6c>
    {
      ret = pObj->IO.Init();
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	4798      	blx	r3
 8007508:	60f8      	str	r0, [r7, #12]
 800750a:	e002      	b.n	8007512 <WM8994_RegisterBusIO+0x72>
    }
    else
    {
      ret = WM8994_ERROR;
 800750c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8007510:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return ret;
 8007512:	68fb      	ldr	r3, [r7, #12]
}
 8007514:	4618      	mov	r0, r3
 8007516:	3710      	adds	r7, #16
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}
 800751c:	08007559 	.word	0x08007559
 8007520:	0800758b 	.word	0x0800758b

08007524 <WM8994_Delay>:
  * @param pObj pointer to component object
  * @param Delay: specifies the delay time length, in milliseconds
  * @retval Component status
  */
static int32_t WM8994_Delay(WM8994_Object_t *pObj, uint32_t Delay)
{  
 8007524:	b580      	push	{r7, lr}
 8007526:	b084      	sub	sp, #16
 8007528:	af00      	add	r7, sp, #0
 800752a:	6078      	str	r0, [r7, #4]
 800752c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  tickstart = pObj->IO.GetTick();
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	695b      	ldr	r3, [r3, #20]
 8007532:	4798      	blx	r3
 8007534:	4603      	mov	r3, r0
 8007536:	60fb      	str	r3, [r7, #12]
  while((pObj->IO.GetTick() - tickstart) < Delay)
 8007538:	bf00      	nop
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	695b      	ldr	r3, [r3, #20]
 800753e:	4798      	blx	r3
 8007540:	4603      	mov	r3, r0
 8007542:	461a      	mov	r2, r3
 8007544:	68fb      	ldr	r3, [r7, #12]
 8007546:	1ad3      	subs	r3, r2, r3
 8007548:	683a      	ldr	r2, [r7, #0]
 800754a:	429a      	cmp	r2, r3
 800754c:	d8f5      	bhi.n	800753a <WM8994_Delay+0x16>
  {
  }
  return WM8994_OK;
 800754e:	2300      	movs	r3, #0
}
 8007550:	4618      	mov	r0, r3
 8007552:	3710      	adds	r7, #16
 8007554:	46bd      	mov	sp, r7
 8007556:	bd80      	pop	{r7, pc}

08007558 <WM8994_ReadRegWrap>:
  * @param  pData   The target register value to be written
  * @param  Length  buffer size to be written
  * @retval error status
  */
static int32_t WM8994_ReadRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 8007558:	b590      	push	{r4, r7, lr}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	607a      	str	r2, [r7, #4]
 8007562:	461a      	mov	r2, r3
 8007564:	460b      	mov	r3, r1
 8007566:	817b      	strh	r3, [r7, #10]
 8007568:	4613      	mov	r3, r2
 800756a:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	617b      	str	r3, [r7, #20]

  return pObj->IO.ReadReg(pObj->IO.Address, Reg, pData, Length);
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	691c      	ldr	r4, [r3, #16]
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	8918      	ldrh	r0, [r3, #8]
 8007578:	893b      	ldrh	r3, [r7, #8]
 800757a:	8979      	ldrh	r1, [r7, #10]
 800757c:	687a      	ldr	r2, [r7, #4]
 800757e:	47a0      	blx	r4
 8007580:	4603      	mov	r3, r0
}
 8007582:	4618      	mov	r0, r3
 8007584:	371c      	adds	r7, #28
 8007586:	46bd      	mov	sp, r7
 8007588:	bd90      	pop	{r4, r7, pc}

0800758a <WM8994_WriteRegWrap>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval error status
  */
static int32_t WM8994_WriteRegWrap(void *handle, uint16_t Reg, uint8_t* pData, uint16_t Length)
{
 800758a:	b590      	push	{r4, r7, lr}
 800758c:	b087      	sub	sp, #28
 800758e:	af00      	add	r7, sp, #0
 8007590:	60f8      	str	r0, [r7, #12]
 8007592:	607a      	str	r2, [r7, #4]
 8007594:	461a      	mov	r2, r3
 8007596:	460b      	mov	r3, r1
 8007598:	817b      	strh	r3, [r7, #10]
 800759a:	4613      	mov	r3, r2
 800759c:	813b      	strh	r3, [r7, #8]
  WM8994_Object_t *pObj = (WM8994_Object_t *)handle;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	617b      	str	r3, [r7, #20]

  return pObj->IO.WriteReg(pObj->IO.Address, Reg, pData, Length);
 80075a2:	697b      	ldr	r3, [r7, #20]
 80075a4:	68dc      	ldr	r4, [r3, #12]
 80075a6:	697b      	ldr	r3, [r7, #20]
 80075a8:	8918      	ldrh	r0, [r3, #8]
 80075aa:	893b      	ldrh	r3, [r7, #8]
 80075ac:	8979      	ldrh	r1, [r7, #10]
 80075ae:	687a      	ldr	r2, [r7, #4]
 80075b0:	47a0      	blx	r4
 80075b2:	4603      	mov	r3, r0
}
 80075b4:	4618      	mov	r0, r3
 80075b6:	371c      	adds	r7, #28
 80075b8:	46bd      	mov	sp, r7
 80075ba:	bd90      	pop	{r4, r7, pc}

080075bc <wm8994_read_reg>:
*                 I2C or SPI reading functions
* Input         : Register Address, length of buffer
* Output        : data Read
*******************************************************************************/
int32_t wm8994_read_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t* data, uint16_t length)
{
 80075bc:	b590      	push	{r4, r7, lr}
 80075be:	b087      	sub	sp, #28
 80075c0:	af00      	add	r7, sp, #0
 80075c2:	60f8      	str	r0, [r7, #12]
 80075c4:	607a      	str	r2, [r7, #4]
 80075c6:	461a      	mov	r2, r3
 80075c8:	460b      	mov	r3, r1
 80075ca:	817b      	strh	r3, [r7, #10]
 80075cc:	4613      	mov	r3, r2
 80075ce:	813b      	strh	r3, [r7, #8]
  int32_t ret;
  uint16_t tmp;
  
  ret = ctx->ReadReg(ctx->handle, reg, (uint8_t *)data, length);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	685c      	ldr	r4, [r3, #4]
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6898      	ldr	r0, [r3, #8]
 80075d8:	893b      	ldrh	r3, [r7, #8]
 80075da:	8979      	ldrh	r1, [r7, #10]
 80075dc:	687a      	ldr	r2, [r7, #4]
 80075de:	47a0      	blx	r4
 80075e0:	6178      	str	r0, [r7, #20]
  
  if(ret >= 0)
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2b00      	cmp	r3, #0
 80075e6:	db10      	blt.n	800760a <wm8994_read_reg+0x4e>
  {
    tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	881b      	ldrh	r3, [r3, #0]
 80075ec:	0a1b      	lsrs	r3, r3, #8
 80075ee:	827b      	strh	r3, [r7, #18]
    tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	881b      	ldrh	r3, [r3, #0]
 80075f4:	b21b      	sxth	r3, r3
 80075f6:	021b      	lsls	r3, r3, #8
 80075f8:	b21a      	sxth	r2, r3
 80075fa:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80075fe:	4313      	orrs	r3, r2
 8007600:	b21b      	sxth	r3, r3
 8007602:	827b      	strh	r3, [r7, #18]
    *data = tmp;
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	8a7a      	ldrh	r2, [r7, #18]
 8007608:	801a      	strh	r2, [r3, #0]
  }
  return ret;
 800760a:	697b      	ldr	r3, [r7, #20]
}
 800760c:	4618      	mov	r0, r3
 800760e:	371c      	adds	r7, #28
 8007610:	46bd      	mov	sp, r7
 8007612:	bd90      	pop	{r4, r7, pc}

08007614 <wm8994_write_reg>:
*                 I2C or SPI writing function
* Input         : Register Address, data to be written, length of buffer
* Output        : None
*******************************************************************************/
int32_t wm8994_write_reg(wm8994_ctx_t *ctx, uint16_t reg, uint16_t *data, uint16_t length)
{
 8007614:	b590      	push	{r4, r7, lr}
 8007616:	b087      	sub	sp, #28
 8007618:	af00      	add	r7, sp, #0
 800761a:	60f8      	str	r0, [r7, #12]
 800761c:	607a      	str	r2, [r7, #4]
 800761e:	461a      	mov	r2, r3
 8007620:	460b      	mov	r3, r1
 8007622:	817b      	strh	r3, [r7, #10]
 8007624:	4613      	mov	r3, r2
 8007626:	813b      	strh	r3, [r7, #8]
  uint16_t tmp;
  tmp = ((uint16_t)(*data >> 8) & 0x00FF);
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	881b      	ldrh	r3, [r3, #0]
 800762c:	0a1b      	lsrs	r3, r3, #8
 800762e:	b29b      	uxth	r3, r3
 8007630:	82fb      	strh	r3, [r7, #22]
  tmp |= ((uint16_t)(*data << 8) & 0xFF00);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	881b      	ldrh	r3, [r3, #0]
 8007636:	b21b      	sxth	r3, r3
 8007638:	021b      	lsls	r3, r3, #8
 800763a:	b21a      	sxth	r2, r3
 800763c:	8afb      	ldrh	r3, [r7, #22]
 800763e:	b21b      	sxth	r3, r3
 8007640:	4313      	orrs	r3, r2
 8007642:	b21b      	sxth	r3, r3
 8007644:	b29b      	uxth	r3, r3
 8007646:	82fb      	strh	r3, [r7, #22]
  
  return ctx->WriteReg(ctx->handle, reg, (uint8_t *)&tmp, length);
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	681c      	ldr	r4, [r3, #0]
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	6898      	ldr	r0, [r3, #8]
 8007650:	893b      	ldrh	r3, [r7, #8]
 8007652:	f107 0216 	add.w	r2, r7, #22
 8007656:	8979      	ldrh	r1, [r7, #10]
 8007658:	47a0      	blx	r4
 800765a:	4603      	mov	r3, r0
}
 800765c:	4618      	mov	r0, r3
 800765e:	371c      	adds	r7, #28
 8007660:	46bd      	mov	sp, r7
 8007662:	bd90      	pop	{r4, r7, pc}

08007664 <wm8994_sw_reset_w>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_w(wm8994_ctx_t *ctx, uint16_t value)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b082      	sub	sp, #8
 8007668:	af00      	add	r7, sp, #0
 800766a:	6078      	str	r0, [r7, #4]
 800766c:	460b      	mov	r3, r1
 800766e:	807b      	strh	r3, [r7, #2]
  return wm8994_write_reg(ctx, WM8994_SW_RESET, &value, 2);
 8007670:	1cba      	adds	r2, r7, #2
 8007672:	2302      	movs	r3, #2
 8007674:	2100      	movs	r1, #0
 8007676:	6878      	ldr	r0, [r7, #4]
 8007678:	f7ff ffcc 	bl	8007614 <wm8994_write_reg>
 800767c:	4603      	mov	r3, r0
}
 800767e:	4618      	mov	r0, r3
 8007680:	3708      	adds	r7, #8
 8007682:	46bd      	mov	sp, r7
 8007684:	bd80      	pop	{r7, pc}

08007686 <wm8994_sw_reset_r>:
* Input          : Pointer to uint8_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_sw_reset_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8007686:	b580      	push	{r7, lr}
 8007688:	b082      	sub	sp, #8
 800768a:	af00      	add	r7, sp, #0
 800768c:	6078      	str	r0, [r7, #4]
 800768e:	6039      	str	r1, [r7, #0]
  return wm8994_read_reg(ctx, WM8994_SW_RESET, value, 2);
 8007690:	2302      	movs	r3, #2
 8007692:	683a      	ldr	r2, [r7, #0]
 8007694:	2100      	movs	r1, #0
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f7ff ff90 	bl	80075bc <wm8994_read_reg>
 800769c:	4603      	mov	r3, r0
}
 800769e:	4618      	mov	r0, r3
 80076a0:	3708      	adds	r7, #8
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}

080076a6 <wm8994_lo_hpout1l_vol_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_lo_hpout1l_vol_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80076a6:	b580      	push	{r7, lr}
 80076a8:	b084      	sub	sp, #16
 80076aa:	af00      	add	r7, sp, #0
 80076ac:	6078      	str	r0, [r7, #4]
 80076ae:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_LEFT_OUTPUT_VOL, value, 2);
 80076b0:	2302      	movs	r3, #2
 80076b2:	683a      	ldr	r2, [r7, #0]
 80076b4:	211c      	movs	r1, #28
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f7ff ff80 	bl	80075bc <wm8994_read_reg>
 80076bc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80076be:	68fb      	ldr	r3, [r7, #12]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10a      	bne.n	80076da <wm8994_lo_hpout1l_vol_r+0x34>
  {  
  *value &= WM8994_LO_HPOUT1L_VOL_MASK;
 80076c4:	683b      	ldr	r3, [r7, #0]
 80076c6:	881b      	ldrh	r3, [r3, #0]
 80076c8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80076cc:	b29a      	uxth	r2, r3
 80076ce:	683b      	ldr	r3, [r7, #0]
 80076d0:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_LO_HPOUT1L_VOL_POSITION;
 80076d2:	683b      	ldr	r3, [r7, #0]
 80076d4:	881a      	ldrh	r2, [r3, #0]
 80076d6:	683b      	ldr	r3, [r7, #0]
 80076d8:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80076da:	68fb      	ldr	r3, [r7, #12]
}
 80076dc:	4618      	mov	r0, r3
 80076de:	3710      	adds	r7, #16
 80076e0:	46bd      	mov	sp, r7
 80076e2:	bd80      	pop	{r7, pc}

080076e4 <wm8994_aif1_sr_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_sr_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80076e4:	b580      	push	{r7, lr}
 80076e6:	b084      	sub	sp, #16
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
 80076ec:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_RATE, value, 2);
 80076ee:	2302      	movs	r3, #2
 80076f0:	683a      	ldr	r2, [r7, #0]
 80076f2:	f44f 7104 	mov.w	r1, #528	@ 0x210
 80076f6:	6878      	ldr	r0, [r7, #4]
 80076f8:	f7ff ff60 	bl	80075bc <wm8994_read_reg>
 80076fc:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d10c      	bne.n	800771e <wm8994_aif1_sr_r+0x3a>
  {  
  *value &= WM8994_AIF1_SR_MASK;
 8007704:	683b      	ldr	r3, [r7, #0]
 8007706:	881b      	ldrh	r3, [r3, #0]
 8007708:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800770c:	b29a      	uxth	r2, r3
 800770e:	683b      	ldr	r3, [r7, #0]
 8007710:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_SR_POSITION;
 8007712:	683b      	ldr	r3, [r7, #0]
 8007714:	881b      	ldrh	r3, [r3, #0]
 8007716:	091b      	lsrs	r3, r3, #4
 8007718:	b29a      	uxth	r2, r3
 800771a:	683b      	ldr	r3, [r7, #0]
 800771c:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800771e:	68fb      	ldr	r3, [r7, #12]
}
 8007720:	4618      	mov	r0, r3
 8007722:	3710      	adds	r7, #16
 8007724:	46bd      	mov	sp, r7
 8007726:	bd80      	pop	{r7, pc}

08007728 <wm8994_aif1_control1_fmt>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt(wm8994_ctx_t *ctx, uint16_t value)
{
 8007728:	b580      	push	{r7, lr}
 800772a:	b084      	sub	sp, #16
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	460b      	mov	r3, r1
 8007732:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8007734:	2300      	movs	r3, #0
 8007736:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8007738:	f107 020a 	add.w	r2, r7, #10
 800773c:	2302      	movs	r3, #2
 800773e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007742:	6878      	ldr	r0, [r7, #4]
 8007744:	f7ff ff3a 	bl	80075bc <wm8994_read_reg>
 8007748:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800774a:	68fb      	ldr	r3, [r7, #12]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d117      	bne.n	8007780 <wm8994_aif1_control1_fmt+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_FMT_MASK;
 8007750:	897b      	ldrh	r3, [r7, #10]
 8007752:	f023 0318 	bic.w	r3, r3, #24
 8007756:	b29b      	uxth	r3, r3
 8007758:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_FMT_POSITION;
 800775a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800775e:	00db      	lsls	r3, r3, #3
 8007760:	b21a      	sxth	r2, r3
 8007762:	897b      	ldrh	r3, [r7, #10]
 8007764:	b21b      	sxth	r3, r3
 8007766:	4313      	orrs	r3, r2
 8007768:	b21b      	sxth	r3, r3
 800776a:	b29b      	uxth	r3, r3
 800776c:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 800776e:	f107 020a 	add.w	r2, r7, #10
 8007772:	2302      	movs	r3, #2
 8007774:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007778:	6878      	ldr	r0, [r7, #4]
 800777a:	f7ff ff4b 	bl	8007614 <wm8994_write_reg>
 800777e:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8007780:	68fb      	ldr	r3, [r7, #12]
}
 8007782:	4618      	mov	r0, r3
 8007784:	3710      	adds	r7, #16
 8007786:	46bd      	mov	sp, r7
 8007788:	bd80      	pop	{r7, pc}

0800778a <wm8994_aif1_control1_fmt_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_fmt_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 800778a:	b580      	push	{r7, lr}
 800778c:	b084      	sub	sp, #16
 800778e:	af00      	add	r7, sp, #0
 8007790:	6078      	str	r0, [r7, #4]
 8007792:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 8007794:	2302      	movs	r3, #2
 8007796:	683a      	ldr	r2, [r7, #0]
 8007798:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f7ff ff0d 	bl	80075bc <wm8994_read_reg>
 80077a2:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d10c      	bne.n	80077c4 <wm8994_aif1_control1_fmt_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_FMT_MASK;
 80077aa:	683b      	ldr	r3, [r7, #0]
 80077ac:	881b      	ldrh	r3, [r3, #0]
 80077ae:	f003 0318 	and.w	r3, r3, #24
 80077b2:	b29a      	uxth	r2, r3
 80077b4:	683b      	ldr	r3, [r7, #0]
 80077b6:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_FMT_POSITION;
 80077b8:	683b      	ldr	r3, [r7, #0]
 80077ba:	881b      	ldrh	r3, [r3, #0]
 80077bc:	08db      	lsrs	r3, r3, #3
 80077be:	b29a      	uxth	r2, r3
 80077c0:	683b      	ldr	r3, [r7, #0]
 80077c2:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 80077c4:	68fb      	ldr	r3, [r7, #12]
}
 80077c6:	4618      	mov	r0, r3
 80077c8:	3710      	adds	r7, #16
 80077ca:	46bd      	mov	sp, r7
 80077cc:	bd80      	pop	{r7, pc}

080077ce <wm8994_aif1_control1_wl>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl(wm8994_ctx_t *ctx, uint16_t value)
{
 80077ce:	b580      	push	{r7, lr}
 80077d0:	b084      	sub	sp, #16
 80077d2:	af00      	add	r7, sp, #0
 80077d4:	6078      	str	r0, [r7, #4]
 80077d6:	460b      	mov	r3, r1
 80077d8:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 80077da:	2300      	movs	r3, #0
 80077dc:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80077de:	f107 020a 	add.w	r2, r7, #10
 80077e2:	2302      	movs	r3, #2
 80077e4:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f7ff fee7 	bl	80075bc <wm8994_read_reg>
 80077ee:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d117      	bne.n	8007826 <wm8994_aif1_control1_wl+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_WL_MASK;
 80077f6:	897b      	ldrh	r3, [r7, #10]
 80077f8:	f023 0360 	bic.w	r3, r3, #96	@ 0x60
 80077fc:	b29b      	uxth	r3, r3
 80077fe:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_WL_POSITION;
 8007800:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8007804:	015b      	lsls	r3, r3, #5
 8007806:	b21a      	sxth	r2, r3
 8007808:	897b      	ldrh	r3, [r7, #10]
 800780a:	b21b      	sxth	r3, r3
 800780c:	4313      	orrs	r3, r2
 800780e:	b21b      	sxth	r3, r3
 8007810:	b29b      	uxth	r3, r3
 8007812:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8007814:	f107 020a 	add.w	r2, r7, #10
 8007818:	2302      	movs	r3, #2
 800781a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800781e:	6878      	ldr	r0, [r7, #4]
 8007820:	f7ff fef8 	bl	8007614 <wm8994_write_reg>
 8007824:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 8007826:	68fb      	ldr	r3, [r7, #12]
}
 8007828:	4618      	mov	r0, r3
 800782a:	3710      	adds	r7, #16
 800782c:	46bd      	mov	sp, r7
 800782e:	bd80      	pop	{r7, pc}

08007830 <wm8994_aif1_control1_wl_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_wl_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 8007830:	b580      	push	{r7, lr}
 8007832:	b084      	sub	sp, #16
 8007834:	af00      	add	r7, sp, #0
 8007836:	6078      	str	r0, [r7, #4]
 8007838:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, value, 2);
 800783a:	2302      	movs	r3, #2
 800783c:	683a      	ldr	r2, [r7, #0]
 800783e:	f44f 7140 	mov.w	r1, #768	@ 0x300
 8007842:	6878      	ldr	r0, [r7, #4]
 8007844:	f7ff feba 	bl	80075bc <wm8994_read_reg>
 8007848:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	2b00      	cmp	r3, #0
 800784e:	d10c      	bne.n	800786a <wm8994_aif1_control1_wl_r+0x3a>
  {  
  *value &= WM8994_AIF1_CONTROL1_WL_MASK;
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	881b      	ldrh	r3, [r3, #0]
 8007854:	f003 0360 	and.w	r3, r3, #96	@ 0x60
 8007858:	b29a      	uxth	r2, r3
 800785a:	683b      	ldr	r3, [r7, #0]
 800785c:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_CONTROL1_WL_POSITION;
 800785e:	683b      	ldr	r3, [r7, #0]
 8007860:	881b      	ldrh	r3, [r3, #0]
 8007862:	095b      	lsrs	r3, r3, #5
 8007864:	b29a      	uxth	r2, r3
 8007866:	683b      	ldr	r3, [r7, #0]
 8007868:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800786a:	68fb      	ldr	r3, [r7, #12]
}
 800786c:	4618      	mov	r0, r3
 800786e:	3710      	adds	r7, #16
 8007870:	46bd      	mov	sp, r7
 8007872:	bd80      	pop	{r7, pc}

08007874 <wm8994_aif1_control1_adcr_src>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_control1_adcr_src(wm8994_ctx_t *ctx, uint16_t value)
{
 8007874:	b580      	push	{r7, lr}
 8007876:	b084      	sub	sp, #16
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
 800787c:	460b      	mov	r3, r1
 800787e:	807b      	strh	r3, [r7, #2]
  int32_t ret;
  uint16_t tmp = 0;
 8007880:	2300      	movs	r3, #0
 8007882:	817b      	strh	r3, [r7, #10]
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 8007884:	f107 020a 	add.w	r2, r7, #10
 8007888:	2302      	movs	r3, #2
 800788a:	f44f 7140 	mov.w	r1, #768	@ 0x300
 800788e:	6878      	ldr	r0, [r7, #4]
 8007890:	f7ff fe94 	bl	80075bc <wm8994_read_reg>
 8007894:	60f8      	str	r0, [r7, #12]

  if(ret == 0)
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2b00      	cmp	r3, #0
 800789a:	d117      	bne.n	80078cc <wm8994_aif1_control1_adcr_src+0x58>
  {
    tmp &= ~WM8994_AIF1_CONTROL1_ADCR_SRC_MASK;
 800789c:	897b      	ldrh	r3, [r7, #10]
 800789e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80078a2:	b29b      	uxth	r3, r3
 80078a4:	817b      	strh	r3, [r7, #10]
    tmp |= value << WM8994_AIF1_CONTROL1_ADCR_SRC_POSITION;
 80078a6:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80078aa:	039b      	lsls	r3, r3, #14
 80078ac:	b21a      	sxth	r2, r3
 80078ae:	897b      	ldrh	r3, [r7, #10]
 80078b0:	b21b      	sxth	r3, r3
 80078b2:	4313      	orrs	r3, r2
 80078b4:	b21b      	sxth	r3, r3
 80078b6:	b29b      	uxth	r3, r3
 80078b8:	817b      	strh	r3, [r7, #10]
    
    ret = wm8994_write_reg(ctx, WM8994_AIF1_CONTROL1, &tmp, 2);
 80078ba:	f107 020a 	add.w	r2, r7, #10
 80078be:	2302      	movs	r3, #2
 80078c0:	f44f 7140 	mov.w	r1, #768	@ 0x300
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f7ff fea5 	bl	8007614 <wm8994_write_reg>
 80078ca:	60f8      	str	r0, [r7, #12]
  }
  
  return ret;
 80078cc:	68fb      	ldr	r3, [r7, #12]
}
 80078ce:	4618      	mov	r0, r3
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}

080078d6 <wm8994_aif1_adc1_left_vol_adc1l_r>:
* Input          : uint16_t
* Output         : None
* Return         : Status [WM8994_ERROR, WM8994_OK]
*******************************************************************************/
int32_t  wm8994_aif1_adc1_left_vol_adc1l_r(wm8994_ctx_t *ctx, uint16_t *value)
{
 80078d6:	b580      	push	{r7, lr}
 80078d8:	b084      	sub	sp, #16
 80078da:	af00      	add	r7, sp, #0
 80078dc:	6078      	str	r0, [r7, #4]
 80078de:	6039      	str	r1, [r7, #0]
  int32_t ret;
  
  ret = wm8994_read_reg(ctx, WM8994_AIF1_ADC1_LEFT_VOL, value, 2);
 80078e0:	2302      	movs	r3, #2
 80078e2:	683a      	ldr	r2, [r7, #0]
 80078e4:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7ff fe67 	bl	80075bc <wm8994_read_reg>
 80078ee:	60f8      	str	r0, [r7, #12]
  
  if(ret == 0)
 80078f0:	68fb      	ldr	r3, [r7, #12]
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d109      	bne.n	800790a <wm8994_aif1_adc1_left_vol_adc1l_r+0x34>
  {  
  *value &= WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_MASK;
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	881b      	ldrh	r3, [r3, #0]
 80078fa:	b2db      	uxtb	r3, r3
 80078fc:	b29a      	uxth	r2, r3
 80078fe:	683b      	ldr	r3, [r7, #0]
 8007900:	801a      	strh	r2, [r3, #0]
  *value = *value >> WM8994_AIF1_ADC1_LEFT_VOL_ADC1L_POSITION;
 8007902:	683b      	ldr	r3, [r7, #0]
 8007904:	881a      	ldrh	r2, [r3, #0]
 8007906:	683b      	ldr	r3, [r7, #0]
 8007908:	801a      	strh	r2, [r3, #0]
  }
  
  return ret;
 800790a:	68fb      	ldr	r3, [r7, #12]
}
 800790c:	4618      	mov	r0, r3
 800790e:	3710      	adds	r7, #16
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}

08007914 <AnalogAudioRecord_demo>:
  *   Audio peripheral.
  * @param  None
  * @retval None
*/
void AnalogAudioRecord_demo(void)
{
 8007914:	b580      	push	{r7, lr}
 8007916:	b086      	sub	sp, #24
 8007918:	af02      	add	r7, sp, #8
  uint32_t channel_nbr = 2;
 800791a:	2302      	movs	r3, #2
 800791c:	60fb      	str	r3, [r7, #12]

  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800791e:	f107 0308 	add.w	r3, r7, #8
 8007922:	4619      	mov	r1, r3
 8007924:	2000      	movs	r0, #0
 8007926:	f007 fd07 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800792a:	1d3b      	adds	r3, r7, #4
 800792c:	4619      	mov	r1, r3
 800792e:	2000      	movs	r0, #0
 8007930:	f007 fd2a 	bl	800f388 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8007934:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007938:	f01a ff96 	bl	8022868 <UTIL_LCD_Clear>
  /* Set Audio Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 90, UTIL_LCD_COLOR_BLUE);
 800793c:	68ba      	ldr	r2, [r7, #8]
 800793e:	4b4f      	ldr	r3, [pc, #316]	@ (8007a7c <AnalogAudioRecord_demo+0x168>)
 8007940:	9300      	str	r3, [sp, #0]
 8007942:	235a      	movs	r3, #90	@ 0x5a
 8007944:	2100      	movs	r1, #0
 8007946:	2000      	movs	r0, #0
 8007948:	f01b fbb4 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800794c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007950:	f01a fe82 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8007954:	4849      	ldr	r0, [pc, #292]	@ (8007a7c <AnalogAudioRecord_demo+0x168>)
 8007956:	f01a fe93 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 800795a:	4849      	ldr	r0, [pc, #292]	@ (8007a80 <AnalogAudioRecord_demo+0x16c>)
 800795c:	f01a fea4 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD SAI ANALOG EXAMPLE", CENTER_MODE);
 8007960:	2301      	movs	r3, #1
 8007962:	4a48      	ldr	r2, [pc, #288]	@ (8007a84 <AnalogAudioRecord_demo+0x170>)
 8007964:	2100      	movs	r1, #0
 8007966:	2000      	movs	r0, #0
 8007968:	f01a ffca 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 800796c:	4846      	ldr	r0, [pc, #280]	@ (8007a88 <AnalogAudioRecord_demo+0x174>)
 800796e:	f01a fe9b 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 24,  (uint8_t *)"Press User button for next menu", CENTER_MODE);
 8007972:	2301      	movs	r3, #1
 8007974:	4a45      	ldr	r2, [pc, #276]	@ (8007a8c <AnalogAudioRecord_demo+0x178>)
 8007976:	2118      	movs	r1, #24
 8007978:	2000      	movs	r0, #0
 800797a:	f01a ffc1 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 100, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 800797e:	68bb      	ldr	r3, [r7, #8]
 8007980:	f1a3 0214 	sub.w	r2, r3, #20
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	3b6e      	subs	r3, #110	@ 0x6e
 8007988:	493c      	ldr	r1, [pc, #240]	@ (8007a7c <AnalogAudioRecord_demo+0x168>)
 800798a:	9100      	str	r1, [sp, #0]
 800798c:	2164      	movs	r1, #100	@ 0x64
 800798e:	200a      	movs	r0, #10
 8007990:	f01b f920 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 101, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 8007994:	68bb      	ldr	r3, [r7, #8]
 8007996:	f1a3 0216 	sub.w	r2, r3, #22
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	3b70      	subs	r3, #112	@ 0x70
 800799e:	4937      	ldr	r1, [pc, #220]	@ (8007a7c <AnalogAudioRecord_demo+0x168>)
 80079a0:	9100      	str	r1, [sp, #0]
 80079a2:	2165      	movs	r1, #101	@ 0x65
 80079a4:	200b      	movs	r0, #11
 80079a6:	f01b f915 	bl	8022bd4 <UTIL_LCD_DrawRect>

  AudioFreq_Ptr = AudioFreq+2; /* AUDIO_FREQUENCY_16K; */
 80079aa:	4a39      	ldr	r2, [pc, #228]	@ (8007a90 <AnalogAudioRecord_demo+0x17c>)
 80079ac:	4b39      	ldr	r3, [pc, #228]	@ (8007a94 <AnalogAudioRecord_demo+0x180>)
 80079ae:	601a      	str	r2, [r3, #0]

  AnalogAudioOutInit.Device = AUDIO_OUT_DEVICE_AUTO;
 80079b0:	4b39      	ldr	r3, [pc, #228]	@ (8007a98 <AnalogAudioRecord_demo+0x184>)
 80079b2:	2204      	movs	r2, #4
 80079b4:	601a      	str	r2, [r3, #0]
  AnalogAudioOutInit.ChannelsNbr = channel_nbr;
 80079b6:	4a38      	ldr	r2, [pc, #224]	@ (8007a98 <AnalogAudioRecord_demo+0x184>)
 80079b8:	68fb      	ldr	r3, [r7, #12]
 80079ba:	60d3      	str	r3, [r2, #12]
  AnalogAudioOutInit.SampleRate = *AudioFreq_Ptr;
 80079bc:	4b35      	ldr	r3, [pc, #212]	@ (8007a94 <AnalogAudioRecord_demo+0x180>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	681b      	ldr	r3, [r3, #0]
 80079c2:	4a35      	ldr	r2, [pc, #212]	@ (8007a98 <AnalogAudioRecord_demo+0x184>)
 80079c4:	6053      	str	r3, [r2, #4]
  AnalogAudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80079c6:	4b34      	ldr	r3, [pc, #208]	@ (8007a98 <AnalogAudioRecord_demo+0x184>)
 80079c8:	2210      	movs	r2, #16
 80079ca:	609a      	str	r2, [r3, #8]
  AnalogAudioOutInit.Volume = AnalogVolumeLevel;
 80079cc:	4b33      	ldr	r3, [pc, #204]	@ (8007a9c <AnalogAudioRecord_demo+0x188>)
 80079ce:	681b      	ldr	r3, [r3, #0]
 80079d0:	4a31      	ldr	r2, [pc, #196]	@ (8007a98 <AnalogAudioRecord_demo+0x184>)
 80079d2:	6113      	str	r3, [r2, #16]

  AnalogAudioInInit.Device = AUDIO_IN_DEVICE_ANALOG_MIC;
 80079d4:	4b32      	ldr	r3, [pc, #200]	@ (8007aa0 <AnalogAudioRecord_demo+0x18c>)
 80079d6:	2200      	movs	r2, #0
 80079d8:	601a      	str	r2, [r3, #0]
  AnalogAudioInInit.ChannelsNbr = channel_nbr;
 80079da:	4a31      	ldr	r2, [pc, #196]	@ (8007aa0 <AnalogAudioRecord_demo+0x18c>)
 80079dc:	68fb      	ldr	r3, [r7, #12]
 80079de:	60d3      	str	r3, [r2, #12]
  AnalogAudioInInit.SampleRate = *AudioFreq_Ptr;
 80079e0:	4b2c      	ldr	r3, [pc, #176]	@ (8007a94 <AnalogAudioRecord_demo+0x180>)
 80079e2:	681b      	ldr	r3, [r3, #0]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	4a2e      	ldr	r2, [pc, #184]	@ (8007aa0 <AnalogAudioRecord_demo+0x18c>)
 80079e8:	6053      	str	r3, [r2, #4]
  AnalogAudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80079ea:	4b2d      	ldr	r3, [pc, #180]	@ (8007aa0 <AnalogAudioRecord_demo+0x18c>)
 80079ec:	2210      	movs	r2, #16
 80079ee:	609a      	str	r2, [r3, #8]
  AnalogAudioInInit.Volume = AnalogVolumeLevel;
 80079f0:	4b2a      	ldr	r3, [pc, #168]	@ (8007a9c <AnalogAudioRecord_demo+0x188>)
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	4a2a      	ldr	r2, [pc, #168]	@ (8007aa0 <AnalogAudioRecord_demo+0x18c>)
 80079f6:	6113      	str	r3, [r2, #16]

  BSP_JOY_Init(JOY1, JOY_MODE_GPIO, JOY_ALL);
 80079f8:	221f      	movs	r2, #31
 80079fa:	2100      	movs	r1, #0
 80079fc:	2000      	movs	r0, #0
 80079fe:	f003 ff51 	bl	800b8a4 <BSP_JOY_Init>

  /* Initialize Audio Recorder with 2 channels to be used */
  BSP_AUDIO_OUT_Init(0, &AnalogAudioOutInit);
 8007a02:	4925      	ldr	r1, [pc, #148]	@ (8007a98 <AnalogAudioRecord_demo+0x184>)
 8007a04:	2000      	movs	r0, #0
 8007a06:	f004 f923 	bl	800bc50 <BSP_AUDIO_OUT_Init>
  BSP_AUDIO_IN_Init(0, &AnalogAudioInInit);
 8007a0a:	4925      	ldr	r1, [pc, #148]	@ (8007aa0 <AnalogAudioRecord_demo+0x18c>)
 8007a0c:	2000      	movs	r0, #0
 8007a0e:	f004 fd79 	bl	800c504 <BSP_AUDIO_IN_Init>

  BSP_AUDIO_OUT_SetDevice(0, AUDIO_OUT_DEVICE_HEADPHONE);
 8007a12:	2102      	movs	r1, #2
 8007a14:	2000      	movs	r0, #0
 8007a16:	f004 fd0f 	bl	800c438 <BSP_AUDIO_OUT_SetDevice>

  /* Start Recording */
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"Start Recording ", CENTER_MODE);
 8007a1a:	2301      	movs	r3, #1
 8007a1c:	4a21      	ldr	r2, [pc, #132]	@ (8007aa4 <AnalogAudioRecord_demo+0x190>)
 8007a1e:	21be      	movs	r1, #190	@ 0xbe
 8007a20:	2000      	movs	r0, #0
 8007a22:	f01a ff6d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_IN_Record(0, (uint8_t*)&recordBuf, 2*AUDIO_IN_BUFFER_SIZE);
 8007a26:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a2a:	491f      	ldr	r1, [pc, #124]	@ (8007aa8 <AnalogAudioRecord_demo+0x194>)
 8007a2c:	2000      	movs	r0, #0
 8007a2e:	f005 f94b 	bl	800ccc8 <BSP_AUDIO_IN_Record>

  /* Play the recorded buffer*/
  UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)"Play the recorded buffer... ", CENTER_MODE);
 8007a32:	2301      	movs	r3, #1
 8007a34:	4a1d      	ldr	r2, [pc, #116]	@ (8007aac <AnalogAudioRecord_demo+0x198>)
 8007a36:	21dc      	movs	r1, #220	@ 0xdc
 8007a38:	2000      	movs	r0, #0
 8007a3a:	f01a ff61 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Play(0, (uint8_t*)&recordBuf[0], 2*AUDIO_IN_BUFFER_SIZE);
 8007a3e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007a42:	4919      	ldr	r1, [pc, #100]	@ (8007aa8 <AnalogAudioRecord_demo+0x194>)
 8007a44:	2000      	movs	r0, #0
 8007a46:	f004 fb59 	bl	800c0fc <BSP_AUDIO_OUT_Play>
  while (1)
  {
    if (CheckForUserInput() > 0)
 8007a4a:	f001 feaf 	bl	80097ac <CheckForUserInput>
 8007a4e:	4603      	mov	r3, r0
 8007a50:	2b00      	cmp	r3, #0
 8007a52:	d0fa      	beq.n	8007a4a <AnalogAudioRecord_demo+0x136>
    {
      ButtonState = 0;
 8007a54:	4b16      	ldr	r3, [pc, #88]	@ (8007ab0 <AnalogAudioRecord_demo+0x19c>)
 8007a56:	2200      	movs	r2, #0
 8007a58:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 8007a5a:	2000      	movs	r0, #0
 8007a5c:	f004 fc44 	bl	800c2e8 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 8007a60:	2000      	movs	r0, #0
 8007a62:	f004 f9ef 	bl	800be44 <BSP_AUDIO_OUT_DeInit>
      BSP_AUDIO_IN_Stop(0);
 8007a66:	2000      	movs	r0, #0
 8007a68:	f005 f960 	bl	800cd2c <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(0);
 8007a6c:	2000      	movs	r0, #0
 8007a6e:	f004 fed1 	bl	800c814 <BSP_AUDIO_IN_DeInit>
      return;
 8007a72:	bf00      	nop
    }
  }
}
 8007a74:	3710      	adds	r7, #16
 8007a76:	46bd      	mov	sp, r7
 8007a78:	bd80      	pop	{r7, pc}
 8007a7a:	bf00      	nop
 8007a7c:	ff0000ff 	.word	0xff0000ff
 8007a80:	24000a44 	.word	0x24000a44
 8007a84:	08026558 	.word	0x08026558
 8007a88:	24000a54 	.word	0x24000a54
 8007a8c:	08026578 	.word	0x08026578
 8007a90:	240005ac 	.word	0x240005ac
 8007a94:	24000d08 	.word	0x24000d08
 8007a98:	24000d20 	.word	0x24000d20
 8007a9c:	240005c8 	.word	0x240005c8
 8007aa0:	24000d0c 	.word	0x24000d0c
 8007aa4:	08026598 	.word	0x08026598
 8007aa8:	24000ac0 	.word	0x24000ac0
 8007aac:	080265ac 	.word	0x080265ac
 8007ab0:	240055c0 	.word	0x240055c0

08007ab4 <AudioPlay_demo>:
  * @brief  Audio Play demo
  * @param  None
  * @retval None
  */
void AudioPlay_demo (void)
{
 8007ab4:	b580      	push	{r7, lr}
 8007ab6:	b0c4      	sub	sp, #272	@ 0x110
 8007ab8:	af00      	add	r7, sp, #0
  uint32_t x_size, y_size;
  BSP_LCD_GetXSize(0, &x_size);
 8007aba:	f507 7382 	add.w	r3, r7, #260	@ 0x104
 8007abe:	4619      	mov	r1, r3
 8007ac0:	2000      	movs	r0, #0
 8007ac2:	f007 fc39 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8007ac6:	f507 7380 	add.w	r3, r7, #256	@ 0x100
 8007aca:	4619      	mov	r1, r3
 8007acc:	2000      	movs	r0, #0
 8007ace:	f007 fc5b 	bl	800f388 <BSP_LCD_GetYSize>
  uint8_t status = 0;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b
  uint32_t *AudioFreq_ptr;
  AudioFreq_ptr = AudioFreq+6; /*AF_48K*/
 8007ad8:	4bb8      	ldr	r3, [pc, #736]	@ (8007dbc <AudioPlay_demo+0x308>)
 8007ada:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
  uint8_t FreqStr[256] = {0};
 8007ade:	f507 7388 	add.w	r3, r7, #272	@ 0x110
 8007ae2:	f5a3 7388 	sub.w	r3, r3, #272	@ 0x110
 8007ae6:	4618      	mov	r0, r3
 8007ae8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8007aec:	461a      	mov	r2, r3
 8007aee:	2100      	movs	r1, #0
 8007af0:	f01d feb0 	bl	8025854 <memset>

  uwVolume = 40;
 8007af4:	4bb2      	ldr	r3, [pc, #712]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007af6:	2228      	movs	r2, #40	@ 0x28
 8007af8:	601a      	str	r2, [r3, #0]

  Audio_SetHint();
 8007afa:	f000 faa7 	bl	800804c <Audio_SetHint>

  status =  BSP_JOY_Init(JOY1, JOY_MODE_EXTI, JOY_ALL);
 8007afe:	221f      	movs	r2, #31
 8007b00:	2101      	movs	r1, #1
 8007b02:	2000      	movs	r0, #0
 8007b04:	f003 fece 	bl	800b8a4 <BSP_JOY_Init>
 8007b08:	4603      	mov	r3, r0
 8007b0a:	f887 310b 	strb.w	r3, [r7, #267]	@ 0x10b

  if (status != HAL_OK)
 8007b0e:	f897 310b 	ldrb.w	r3, [r7, #267]	@ 0x10b
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d018      	beq.n	8007b48 <AudioPlay_demo+0x94>
  {
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8007b16:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b1a:	f01a fdb1 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8007b1e:	48a9      	ldr	r0, [pc, #676]	@ (8007dc4 <AudioPlay_demo+0x310>)
 8007b20:	f01a fd9a 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(0, x_size - 115, (uint8_t *)"ERROR", CENTER_MODE);
 8007b24:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b28:	f1a3 0173 	sub.w	r1, r3, #115	@ 0x73
 8007b2c:	2301      	movs	r3, #1
 8007b2e:	4aa6      	ldr	r2, [pc, #664]	@ (8007dc8 <AudioPlay_demo+0x314>)
 8007b30:	2000      	movs	r0, #0
 8007b32:	f01a fee5 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, x_size - 100, (uint8_t *)"Joystick cannot be initialized", CENTER_MODE);
 8007b36:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b3a:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
 8007b3e:	2301      	movs	r3, #1
 8007b40:	4aa2      	ldr	r2, [pc, #648]	@ (8007dcc <AudioPlay_demo+0x318>)
 8007b42:	2000      	movs	r0, #0
 8007b44:	f01a fedc 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  AudioPlayInit->Device = AUDIO_OUT_DEVICE_HEADPHONE;
 8007b48:	4ba1      	ldr	r3, [pc, #644]	@ (8007dd0 <AudioPlay_demo+0x31c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	2202      	movs	r2, #2
 8007b4e:	601a      	str	r2, [r3, #0]
  AudioPlayInit->ChannelsNbr = 2;
 8007b50:	4b9f      	ldr	r3, [pc, #636]	@ (8007dd0 <AudioPlay_demo+0x31c>)
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2202      	movs	r2, #2
 8007b56:	60da      	str	r2, [r3, #12]
  AudioPlayInit->SampleRate = 96000 ;
 8007b58:	4b9d      	ldr	r3, [pc, #628]	@ (8007dd0 <AudioPlay_demo+0x31c>)
 8007b5a:	681b      	ldr	r3, [r3, #0]
 8007b5c:	4a9d      	ldr	r2, [pc, #628]	@ (8007dd4 <AudioPlay_demo+0x320>)
 8007b5e:	605a      	str	r2, [r3, #4]
  AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 8007b60:	4b9b      	ldr	r3, [pc, #620]	@ (8007dd0 <AudioPlay_demo+0x31c>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	2210      	movs	r2, #16
 8007b66:	609a      	str	r2, [r3, #8]
  AudioPlayInit->Volume = uwVolume;
 8007b68:	4b99      	ldr	r3, [pc, #612]	@ (8007dd0 <AudioPlay_demo+0x31c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	4a94      	ldr	r2, [pc, #592]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007b6e:	6812      	ldr	r2, [r2, #0]
 8007b70:	611a      	str	r2, [r3, #16]
  if(BSP_AUDIO_OUT_Init(0, AudioPlayInit) == 0)
 8007b72:	4b97      	ldr	r3, [pc, #604]	@ (8007dd0 <AudioPlay_demo+0x31c>)
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	4619      	mov	r1, r3
 8007b78:	2000      	movs	r0, #0
 8007b7a:	f004 f869 	bl	800bc50 <BSP_AUDIO_OUT_Init>
 8007b7e:	4603      	mov	r3, r0
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d111      	bne.n	8007ba8 <AudioPlay_demo+0xf4>
  {
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8007b84:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007b88:	f01a fd7a 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8007b8c:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8007b90:	f01a fd62 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(0, x_size - 115, (uint8_t *)"  AUDIO CODEC   OK  ", CENTER_MODE);
 8007b94:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007b98:	f1a3 0173 	sub.w	r1, r3, #115	@ 0x73
 8007b9c:	2301      	movs	r3, #1
 8007b9e:	4a8e      	ldr	r2, [pc, #568]	@ (8007dd8 <AudioPlay_demo+0x324>)
 8007ba0:	2000      	movs	r0, #0
 8007ba2:	f01a fead 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8007ba6:	e018      	b.n	8007bda <AudioPlay_demo+0x126>
  }
  else
  {
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8007ba8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007bac:	f01a fd68 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8007bb0:	4884      	ldr	r0, [pc, #528]	@ (8007dc4 <AudioPlay_demo+0x310>)
 8007bb2:	f01a fd51 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(0, x_size - 115, (uint8_t *)"  AUDIO CODEC  FAIL ", CENTER_MODE);
 8007bb6:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bba:	f1a3 0173 	sub.w	r1, r3, #115	@ 0x73
 8007bbe:	2301      	movs	r3, #1
 8007bc0:	4a86      	ldr	r2, [pc, #536]	@ (8007ddc <AudioPlay_demo+0x328>)
 8007bc2:	2000      	movs	r0, #0
 8007bc4:	f01a fe9c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, x_size - 100, (uint8_t *)" Try to reset board ", CENTER_MODE);
 8007bc8:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bcc:	f1a3 0164 	sub.w	r1, r3, #100	@ 0x64
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4a83      	ldr	r2, [pc, #524]	@ (8007de0 <AudioPlay_demo+0x32c>)
 8007bd4:	2000      	movs	r0, #0
 8007bd6:	f01a fe93 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  Start playing the file from a circular buffer, once the DMA is enabled, it is
  always in running state. Application has to fill the buffer with the audio data
  using Transfer complete and/or half transfer complete interrupts callbacks
  (AUDIO_TransferComplete_CallBack() or AUDIO_HalfTransfer_CallBack()...
  */
  AUDIO_Start((uint32_t *)AUDIO_SRC_FILE_ADDRESS, (uint32_t)AUDIO_FILE_SIZE);
 8007bda:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007bde:	4881      	ldr	r0, [pc, #516]	@ (8007de4 <AudioPlay_demo+0x330>)
 8007be0:	f000 faa2 	bl	8008128 <AUDIO_Start>

  /* Display the state on the screen */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8007be4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8007be8:	f01a fd4a 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8007bec:	487e      	ldr	r0, [pc, #504]	@ (8007de8 <AudioPlay_demo+0x334>)
 8007bee:	f01a fd33 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DisplayStringAt(0, x_size - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 8007bf2:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007bf6:	f1a3 0150 	sub.w	r1, r3, #80	@ 0x50
 8007bfa:	2301      	movs	r3, #1
 8007bfc:	4a7b      	ldr	r2, [pc, #492]	@ (8007dec <AudioPlay_demo+0x338>)
 8007bfe:	2000      	movs	r0, #0
 8007c00:	f01a fe7e 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8007c04:	4b6e      	ldr	r3, [pc, #440]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007c06:	681a      	ldr	r2, [r3, #0]
 8007c08:	463b      	mov	r3, r7
 8007c0a:	4979      	ldr	r1, [pc, #484]	@ (8007df0 <AudioPlay_demo+0x33c>)
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f01d fdff 	bl	8025810 <siprintf>
  UTIL_LCD_DisplayStringAt(0, x_size - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8007c12:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c16:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 8007c1a:	463a      	mov	r2, r7
 8007c1c:	2301      	movs	r3, #1
 8007c1e:	2000      	movs	r0, #0
 8007c20:	f01a fe6e 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8007c24:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	463b      	mov	r3, r7
 8007c2c:	4971      	ldr	r1, [pc, #452]	@ (8007df4 <AudioPlay_demo+0x340>)
 8007c2e:	4618      	mov	r0, r3
 8007c30:	f01d fdee 	bl	8025810 <siprintf>
  UTIL_LCD_DisplayStringAt(0, x_size - 50, (uint8_t *)FreqStr, CENTER_MODE);
 8007c34:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007c38:	f1a3 0132 	sub.w	r1, r3, #50	@ 0x32
 8007c3c:	463a      	mov	r2, r7
 8007c3e:	2301      	movs	r3, #1
 8007c40:	2000      	movs	r0, #0
 8007c42:	f01a fe5d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(15), (uint8_t *)"Hear nothing ?", CENTER_MODE);
 8007c46:	f01a fd43 	bl	80226d0 <UTIL_LCD_GetFont>
 8007c4a:	4603      	mov	r3, r0
 8007c4c:	88db      	ldrh	r3, [r3, #6]
 8007c4e:	461a      	mov	r2, r3
 8007c50:	4613      	mov	r3, r2
 8007c52:	011b      	lsls	r3, r3, #4
 8007c54:	1a9b      	subs	r3, r3, r2
 8007c56:	4619      	mov	r1, r3
 8007c58:	2301      	movs	r3, #1
 8007c5a:	4a67      	ldr	r2, [pc, #412]	@ (8007df8 <AudioPlay_demo+0x344>)
 8007c5c:	2000      	movs	r0, #0
 8007c5e:	f01a fe4f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, LINE(16), (uint8_t *)"Have you copied the audio file with STM-LINK UTILITY ?", CENTER_MODE);
 8007c62:	f01a fd35 	bl	80226d0 <UTIL_LCD_GetFont>
 8007c66:	4603      	mov	r3, r0
 8007c68:	88db      	ldrh	r3, [r3, #6]
 8007c6a:	011b      	lsls	r3, r3, #4
 8007c6c:	4619      	mov	r1, r3
 8007c6e:	2301      	movs	r3, #1
 8007c70:	4a62      	ldr	r2, [pc, #392]	@ (8007dfc <AudioPlay_demo+0x348>)
 8007c72:	2000      	movs	r0, #0
 8007c74:	f01a fe44 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  /* Infinite loop */
  while (1)
  {
    AUDIO_Process();
 8007c78:	f000 fa8a 	bl	8008190 <AUDIO_Process>
    switch (JoyState)
 8007c7c:	4b60      	ldr	r3, [pc, #384]	@ (8007e00 <AudioPlay_demo+0x34c>)
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	3b01      	subs	r3, #1
 8007c82:	2b0f      	cmp	r3, #15
 8007c84:	f200 81b6 	bhi.w	8007ff4 <AudioPlay_demo+0x540>
 8007c88:	a201      	add	r2, pc, #4	@ (adr r2, 8007c90 <AudioPlay_demo+0x1dc>)
 8007c8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007c8e:	bf00      	nop
 8007c90:	08007f89 	.word	0x08007f89
 8007c94:	08007d47 	.word	0x08007d47
 8007c98:	08007ff5 	.word	0x08007ff5
 8007c9c:	08007e0d 	.word	0x08007e0d
 8007ca0:	08007ff5 	.word	0x08007ff5
 8007ca4:	08007ff5 	.word	0x08007ff5
 8007ca8:	08007ff5 	.word	0x08007ff5
 8007cac:	08007ecb 	.word	0x08007ecb
 8007cb0:	08007ff5 	.word	0x08007ff5
 8007cb4:	08007ff5 	.word	0x08007ff5
 8007cb8:	08007ff5 	.word	0x08007ff5
 8007cbc:	08007ff5 	.word	0x08007ff5
 8007cc0:	08007ff5 	.word	0x08007ff5
 8007cc4:	08007ff5 	.word	0x08007ff5
 8007cc8:	08007ff5 	.word	0x08007ff5
 8007ccc:	08007cd1 	.word	0x08007cd1
    {
      case JOY_UP:
        if (audio_state != AUDIO_STATE_PAUSE)
 8007cd0:	4b4c      	ldr	r3, [pc, #304]	@ (8007e04 <AudioPlay_demo+0x350>)
 8007cd2:	781b      	ldrb	r3, [r3, #0]
 8007cd4:	2b03      	cmp	r3, #3
 8007cd6:	f000 818f 	beq.w	8007ff8 <AudioPlay_demo+0x544>
        {
          /* Increase volume by 5% */
          if (uwVolume < 95)
 8007cda:	4b39      	ldr	r3, [pc, #228]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b5e      	cmp	r3, #94	@ 0x5e
 8007ce0:	d805      	bhi.n	8007cee <AudioPlay_demo+0x23a>
            uwVolume += 5;
 8007ce2:	4b37      	ldr	r3, [pc, #220]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	3305      	adds	r3, #5
 8007ce8:	4a35      	ldr	r2, [pc, #212]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007cea:	6013      	str	r3, [r2, #0]
 8007cec:	e002      	b.n	8007cf4 <AudioPlay_demo+0x240>
          else
            uwVolume = 100;
 8007cee:	4b34      	ldr	r3, [pc, #208]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007cf0:	2264      	movs	r2, #100	@ 0x64
 8007cf2:	601a      	str	r2, [r3, #0]
          sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8007cf4:	4b32      	ldr	r3, [pc, #200]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007cf6:	681a      	ldr	r2, [r3, #0]
 8007cf8:	463b      	mov	r3, r7
 8007cfa:	493d      	ldr	r1, [pc, #244]	@ (8007df0 <AudioPlay_demo+0x33c>)
 8007cfc:	4618      	mov	r0, r3
 8007cfe:	f01d fd87 	bl	8025810 <siprintf>
          BSP_AUDIO_OUT_SetVolume(0,uwVolume);
 8007d02:	4b2f      	ldr	r3, [pc, #188]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	4619      	mov	r1, r3
 8007d08:	2000      	movs	r0, #0
 8007d0a:	f004 fb3b 	bl	800c384 <BSP_AUDIO_OUT_SetVolume>
          UTIL_LCD_DisplayStringAt(0, x_size - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8007d0e:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d12:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 8007d16:	463a      	mov	r2, r7
 8007d18:	2301      	movs	r3, #1
 8007d1a:	2000      	movs	r0, #0
 8007d1c:	f01a fdf0 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"                      ", CENTER_MODE);
 8007d20:	f01a fcd6 	bl	80226d0 <UTIL_LCD_GetFont>
 8007d24:	4603      	mov	r3, r0
 8007d26:	88db      	ldrh	r3, [r3, #6]
 8007d28:	461a      	mov	r2, r3
 8007d2a:	4613      	mov	r3, r2
 8007d2c:	00db      	lsls	r3, r3, #3
 8007d2e:	1a9b      	subs	r3, r3, r2
 8007d30:	005b      	lsls	r3, r3, #1
 8007d32:	4619      	mov	r1, r3
 8007d34:	2301      	movs	r3, #1
 8007d36:	4a34      	ldr	r2, [pc, #208]	@ (8007e08 <AudioPlay_demo+0x354>)
 8007d38:	2000      	movs	r0, #0
 8007d3a:	f01a fde1 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          HAL_Delay(100);
 8007d3e:	2064      	movs	r0, #100	@ 0x64
 8007d40:	f00a fa28 	bl	8012194 <HAL_Delay>
        }
        break;
 8007d44:	e158      	b.n	8007ff8 <AudioPlay_demo+0x544>
      case JOY_DOWN:
        if (audio_state != AUDIO_STATE_PAUSE)
 8007d46:	4b2f      	ldr	r3, [pc, #188]	@ (8007e04 <AudioPlay_demo+0x350>)
 8007d48:	781b      	ldrb	r3, [r3, #0]
 8007d4a:	2b03      	cmp	r3, #3
 8007d4c:	f000 8156 	beq.w	8007ffc <AudioPlay_demo+0x548>
        {
          /* Decrease volume by 5% */
          if (uwVolume > 5)
 8007d50:	4b1b      	ldr	r3, [pc, #108]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d52:	681b      	ldr	r3, [r3, #0]
 8007d54:	2b05      	cmp	r3, #5
 8007d56:	d905      	bls.n	8007d64 <AudioPlay_demo+0x2b0>
            uwVolume -= 5;
 8007d58:	4b19      	ldr	r3, [pc, #100]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	3b05      	subs	r3, #5
 8007d5e:	4a18      	ldr	r2, [pc, #96]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d60:	6013      	str	r3, [r2, #0]
 8007d62:	e002      	b.n	8007d6a <AudioPlay_demo+0x2b6>
          else
            uwVolume = 0;
 8007d64:	4b16      	ldr	r3, [pc, #88]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d66:	2200      	movs	r2, #0
 8007d68:	601a      	str	r2, [r3, #0]
          sprintf((char*)FreqStr, "       VOL:    %3lu     ", uwVolume);
 8007d6a:	4b15      	ldr	r3, [pc, #84]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d6c:	681a      	ldr	r2, [r3, #0]
 8007d6e:	463b      	mov	r3, r7
 8007d70:	491f      	ldr	r1, [pc, #124]	@ (8007df0 <AudioPlay_demo+0x33c>)
 8007d72:	4618      	mov	r0, r3
 8007d74:	f01d fd4c 	bl	8025810 <siprintf>
          BSP_AUDIO_OUT_SetVolume(0,uwVolume);
 8007d78:	4b11      	ldr	r3, [pc, #68]	@ (8007dc0 <AudioPlay_demo+0x30c>)
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	4619      	mov	r1, r3
 8007d7e:	2000      	movs	r0, #0
 8007d80:	f004 fb00 	bl	800c384 <BSP_AUDIO_OUT_SetVolume>
          UTIL_LCD_DisplayStringAt(0, x_size - 65, (uint8_t *)FreqStr, CENTER_MODE);
 8007d84:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007d88:	f1a3 0141 	sub.w	r1, r3, #65	@ 0x41
 8007d8c:	463a      	mov	r2, r7
 8007d8e:	2301      	movs	r3, #1
 8007d90:	2000      	movs	r0, #0
 8007d92:	f01a fdb5 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"                      ", CENTER_MODE);
 8007d96:	f01a fc9b 	bl	80226d0 <UTIL_LCD_GetFont>
 8007d9a:	4603      	mov	r3, r0
 8007d9c:	88db      	ldrh	r3, [r3, #6]
 8007d9e:	461a      	mov	r2, r3
 8007da0:	4613      	mov	r3, r2
 8007da2:	00db      	lsls	r3, r3, #3
 8007da4:	1a9b      	subs	r3, r3, r2
 8007da6:	005b      	lsls	r3, r3, #1
 8007da8:	4619      	mov	r1, r3
 8007daa:	2301      	movs	r3, #1
 8007dac:	4a16      	ldr	r2, [pc, #88]	@ (8007e08 <AudioPlay_demo+0x354>)
 8007dae:	2000      	movs	r0, #0
 8007db0:	f01a fda6 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          HAL_Delay(100);
 8007db4:	2064      	movs	r0, #100	@ 0x64
 8007db6:	f00a f9ed 	bl	8012194 <HAL_Delay>
        }
        break;
 8007dba:	e11f      	b.n	8007ffc <AudioPlay_demo+0x548>
 8007dbc:	240005e8 	.word	0x240005e8
 8007dc0:	240005cc 	.word	0x240005cc
 8007dc4:	ffff0000 	.word	0xffff0000
 8007dc8:	080265cc 	.word	0x080265cc
 8007dcc:	080265d4 	.word	0x080265d4
 8007dd0:	24001558 	.word	0x24001558
 8007dd4:	00017700 	.word	0x00017700
 8007dd8:	080265f4 	.word	0x080265f4
 8007ddc:	0802660c 	.word	0x0802660c
 8007de0:	08026624 	.word	0x08026624
 8007de4:	08080000 	.word	0x08080000
 8007de8:	ff0000ff 	.word	0xff0000ff
 8007dec:	0802663c 	.word	0x0802663c
 8007df0:	08026654 	.word	0x08026654
 8007df4:	08026670 	.word	0x08026670
 8007df8:	08026688 	.word	0x08026688
 8007dfc:	08026698 	.word	0x08026698
 8007e00:	24001554 	.word	0x24001554
 8007e04:	24001550 	.word	0x24001550
 8007e08:	080266d0 	.word	0x080266d0
      case JOY_LEFT:
        if (audio_state != AUDIO_STATE_PAUSE)
 8007e0c:	4b86      	ldr	r3, [pc, #536]	@ (8008028 <AudioPlay_demo+0x574>)
 8007e0e:	781b      	ldrb	r3, [r3, #0]
 8007e10:	2b03      	cmp	r3, #3
 8007e12:	f000 80f5 	beq.w	8008000 <AudioPlay_demo+0x54c>
        {
          /*Decrease Frequency */
          if (*AudioFreq_ptr != 8000)
 8007e16:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 8007e20:	d037      	beq.n	8007e92 <AudioPlay_demo+0x3de>
          {
            AudioFreq_ptr--;
 8007e22:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e26:	3b04      	subs	r3, #4
 8007e28:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8007e2c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007e30:	681a      	ldr	r2, [r3, #0]
 8007e32:	463b      	mov	r3, r7
 8007e34:	497d      	ldr	r1, [pc, #500]	@ (800802c <AudioPlay_demo+0x578>)
 8007e36:	4618      	mov	r0, r3
 8007e38:	f01d fcea 	bl	8025810 <siprintf>
            BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007e3c:	2001      	movs	r0, #1
 8007e3e:	f004 fa53 	bl	800c2e8 <BSP_AUDIO_OUT_Stop>
            AudioPlayInit->Device = AUDIO_OUT_DEVICE_SPK_HP;
 8007e42:	4b7b      	ldr	r3, [pc, #492]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	2203      	movs	r2, #3
 8007e48:	601a      	str	r2, [r3, #0]
            AudioPlayInit->ChannelsNbr = 2;
 8007e4a:	4b79      	ldr	r3, [pc, #484]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007e4c:	681b      	ldr	r3, [r3, #0]
 8007e4e:	2202      	movs	r2, #2
 8007e50:	60da      	str	r2, [r3, #12]
            AudioPlayInit->SampleRate = *AudioFreq_ptr;
 8007e52:	4b77      	ldr	r3, [pc, #476]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8007e5a:	6812      	ldr	r2, [r2, #0]
 8007e5c:	605a      	str	r2, [r3, #4]
            AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 8007e5e:	4b74      	ldr	r3, [pc, #464]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	2210      	movs	r2, #16
 8007e64:	609a      	str	r2, [r3, #8]
            AudioPlayInit->Volume = uwVolume;
 8007e66:	4b72      	ldr	r3, [pc, #456]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	4a72      	ldr	r2, [pc, #456]	@ (8008034 <AudioPlay_demo+0x580>)
 8007e6c:	6812      	ldr	r2, [r2, #0]
 8007e6e:	611a      	str	r2, [r3, #16]
            BSP_AUDIO_OUT_Init(0,AudioPlayInit);
 8007e70:	4b6f      	ldr	r3, [pc, #444]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	4619      	mov	r1, r3
 8007e76:	2000      	movs	r0, #0
 8007e78:	f003 feea 	bl	800bc50 <BSP_AUDIO_OUT_Init>
            AUDIO_Start((uint32_t *)AUDIO_SRC_FILE_ADDRESS, (uint32_t)AUDIO_FILE_SIZE);
 8007e7c:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007e80:	486d      	ldr	r0, [pc, #436]	@ (8008038 <AudioPlay_demo+0x584>)
 8007e82:	f000 f951 	bl	8008128 <AUDIO_Start>
            BSP_AUDIO_OUT_SetVolume(0,uwVolume);
 8007e86:	4b6b      	ldr	r3, [pc, #428]	@ (8008034 <AudioPlay_demo+0x580>)
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	4619      	mov	r1, r3
 8007e8c:	2000      	movs	r0, #0
 8007e8e:	f004 fa79 	bl	800c384 <BSP_AUDIO_OUT_SetVolume>
          }
          UTIL_LCD_DisplayStringAt(0, x_size - 50, (uint8_t *)FreqStr, CENTER_MODE);
 8007e92:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007e96:	f1a3 0132 	sub.w	r1, r3, #50	@ 0x32
 8007e9a:	463a      	mov	r2, r7
 8007e9c:	2301      	movs	r3, #1
 8007e9e:	2000      	movs	r0, #0
 8007ea0:	f01a fd2e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"                      ", CENTER_MODE);
 8007ea4:	f01a fc14 	bl	80226d0 <UTIL_LCD_GetFont>
 8007ea8:	4603      	mov	r3, r0
 8007eaa:	88db      	ldrh	r3, [r3, #6]
 8007eac:	461a      	mov	r2, r3
 8007eae:	4613      	mov	r3, r2
 8007eb0:	00db      	lsls	r3, r3, #3
 8007eb2:	1a9b      	subs	r3, r3, r2
 8007eb4:	005b      	lsls	r3, r3, #1
 8007eb6:	4619      	mov	r1, r3
 8007eb8:	2301      	movs	r3, #1
 8007eba:	4a60      	ldr	r2, [pc, #384]	@ (800803c <AudioPlay_demo+0x588>)
 8007ebc:	2000      	movs	r0, #0
 8007ebe:	f01a fd1f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          HAL_Delay(100);
 8007ec2:	2064      	movs	r0, #100	@ 0x64
 8007ec4:	f00a f966 	bl	8012194 <HAL_Delay>
        }
        break;
 8007ec8:	e09a      	b.n	8008000 <AudioPlay_demo+0x54c>
      case JOY_RIGHT:
        if (audio_state != AUDIO_STATE_PAUSE)
 8007eca:	4b57      	ldr	r3, [pc, #348]	@ (8008028 <AudioPlay_demo+0x574>)
 8007ecc:	781b      	ldrb	r3, [r3, #0]
 8007ece:	2b03      	cmp	r3, #3
 8007ed0:	f000 8098 	beq.w	8008004 <AudioPlay_demo+0x550>
        {
          /* Increase Frequency */
          if (*AudioFreq_ptr != 96000)
 8007ed4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ed8:	681b      	ldr	r3, [r3, #0]
 8007eda:	4a59      	ldr	r2, [pc, #356]	@ (8008040 <AudioPlay_demo+0x58c>)
 8007edc:	4293      	cmp	r3, r2
 8007ede:	d037      	beq.n	8007f50 <AudioPlay_demo+0x49c>
          {
            AudioFreq_ptr++;
 8007ee0:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007ee4:	3304      	adds	r3, #4
 8007ee6:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
            sprintf((char*)FreqStr, "      FREQ: %6lu     ", *AudioFreq_ptr);
 8007eea:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8007eee:	681a      	ldr	r2, [r3, #0]
 8007ef0:	463b      	mov	r3, r7
 8007ef2:	494e      	ldr	r1, [pc, #312]	@ (800802c <AudioPlay_demo+0x578>)
 8007ef4:	4618      	mov	r0, r3
 8007ef6:	f01d fc8b 	bl	8025810 <siprintf>
            BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8007efa:	2001      	movs	r0, #1
 8007efc:	f004 f9f4 	bl	800c2e8 <BSP_AUDIO_OUT_Stop>
            AudioPlayInit->Device = AUDIO_OUT_DEVICE_SPK_HP;
 8007f00:	4b4b      	ldr	r3, [pc, #300]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007f02:	681b      	ldr	r3, [r3, #0]
 8007f04:	2203      	movs	r2, #3
 8007f06:	601a      	str	r2, [r3, #0]
            AudioPlayInit->ChannelsNbr = 2;
 8007f08:	4b49      	ldr	r3, [pc, #292]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	2202      	movs	r2, #2
 8007f0e:	60da      	str	r2, [r3, #12]
            AudioPlayInit->SampleRate = *AudioFreq_ptr;
 8007f10:	4b47      	ldr	r3, [pc, #284]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	f8d7 210c 	ldr.w	r2, [r7, #268]	@ 0x10c
 8007f18:	6812      	ldr	r2, [r2, #0]
 8007f1a:	605a      	str	r2, [r3, #4]
            AudioPlayInit->BitsPerSample = AUDIO_RESOLUTION_16B;
 8007f1c:	4b44      	ldr	r3, [pc, #272]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007f1e:	681b      	ldr	r3, [r3, #0]
 8007f20:	2210      	movs	r2, #16
 8007f22:	609a      	str	r2, [r3, #8]
            AudioPlayInit->Volume = uwVolume;
 8007f24:	4b42      	ldr	r3, [pc, #264]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007f26:	681b      	ldr	r3, [r3, #0]
 8007f28:	4a42      	ldr	r2, [pc, #264]	@ (8008034 <AudioPlay_demo+0x580>)
 8007f2a:	6812      	ldr	r2, [r2, #0]
 8007f2c:	611a      	str	r2, [r3, #16]
            BSP_AUDIO_OUT_Init(0,AudioPlayInit);
 8007f2e:	4b40      	ldr	r3, [pc, #256]	@ (8008030 <AudioPlay_demo+0x57c>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	4619      	mov	r1, r3
 8007f34:	2000      	movs	r0, #0
 8007f36:	f003 fe8b 	bl	800bc50 <BSP_AUDIO_OUT_Init>
            AUDIO_Start((uint32_t *)AUDIO_SRC_FILE_ADDRESS, (uint32_t)AUDIO_FILE_SIZE);
 8007f3a:	f44f 2100 	mov.w	r1, #524288	@ 0x80000
 8007f3e:	483e      	ldr	r0, [pc, #248]	@ (8008038 <AudioPlay_demo+0x584>)
 8007f40:	f000 f8f2 	bl	8008128 <AUDIO_Start>
            BSP_AUDIO_OUT_SetVolume(0,uwVolume);
 8007f44:	4b3b      	ldr	r3, [pc, #236]	@ (8008034 <AudioPlay_demo+0x580>)
 8007f46:	681b      	ldr	r3, [r3, #0]
 8007f48:	4619      	mov	r1, r3
 8007f4a:	2000      	movs	r0, #0
 8007f4c:	f004 fa1a 	bl	800c384 <BSP_AUDIO_OUT_SetVolume>
          }

          UTIL_LCD_DisplayStringAt(0, x_size - 50, (uint8_t *)FreqStr, CENTER_MODE);
 8007f50:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007f54:	f1a3 0132 	sub.w	r1, r3, #50	@ 0x32
 8007f58:	463a      	mov	r2, r7
 8007f5a:	2301      	movs	r3, #1
 8007f5c:	2000      	movs	r0, #0
 8007f5e:	f01a fccf 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"                      ", CENTER_MODE);
 8007f62:	f01a fbb5 	bl	80226d0 <UTIL_LCD_GetFont>
 8007f66:	4603      	mov	r3, r0
 8007f68:	88db      	ldrh	r3, [r3, #6]
 8007f6a:	461a      	mov	r2, r3
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	1a9b      	subs	r3, r3, r2
 8007f72:	005b      	lsls	r3, r3, #1
 8007f74:	4619      	mov	r1, r3
 8007f76:	2301      	movs	r3, #1
 8007f78:	4a30      	ldr	r2, [pc, #192]	@ (800803c <AudioPlay_demo+0x588>)
 8007f7a:	2000      	movs	r0, #0
 8007f7c:	f01a fcc0 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          HAL_Delay(100);
 8007f80:	2064      	movs	r0, #100	@ 0x64
 8007f82:	f00a f907 	bl	8012194 <HAL_Delay>
        }
        break;
 8007f86:	e03d      	b.n	8008004 <AudioPlay_demo+0x550>
      case JOY_SEL:
        /* Set Pause / Resume */
        if (audio_state == AUDIO_STATE_PAUSE)
 8007f88:	4b27      	ldr	r3, [pc, #156]	@ (8008028 <AudioPlay_demo+0x574>)
 8007f8a:	781b      	ldrb	r3, [r3, #0]
 8007f8c:	2b03      	cmp	r3, #3
 8007f8e:	d10f      	bne.n	8007fb0 <AudioPlay_demo+0x4fc>
        {
          /* Pause is enabled, call Resume */
          BSP_AUDIO_OUT_Resume(0);
 8007f90:	2000      	movs	r0, #0
 8007f92:	f004 f96b 	bl	800c26c <BSP_AUDIO_OUT_Resume>
          audio_state = AUDIO_STATE_PLAYING;
 8007f96:	4b24      	ldr	r3, [pc, #144]	@ (8008028 <AudioPlay_demo+0x574>)
 8007f98:	2202      	movs	r2, #2
 8007f9a:	701a      	strb	r2, [r3, #0]
          UTIL_LCD_DisplayStringAt(0, x_size - 80, (uint8_t *)"       PLAYING...     ", CENTER_MODE);
 8007f9c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fa0:	f1a3 0150 	sub.w	r1, r3, #80	@ 0x50
 8007fa4:	2301      	movs	r3, #1
 8007fa6:	4a27      	ldr	r2, [pc, #156]	@ (8008044 <AudioPlay_demo+0x590>)
 8007fa8:	2000      	movs	r0, #0
 8007faa:	f01a fca9 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8007fae:	e00e      	b.n	8007fce <AudioPlay_demo+0x51a>
        }
        else
        {
          /* Pause the playback */
          BSP_AUDIO_OUT_Pause(0);
 8007fb0:	2000      	movs	r0, #0
 8007fb2:	f004 f91d 	bl	800c1f0 <BSP_AUDIO_OUT_Pause>
          audio_state = AUDIO_STATE_PAUSE;
 8007fb6:	4b1c      	ldr	r3, [pc, #112]	@ (8008028 <AudioPlay_demo+0x574>)
 8007fb8:	2203      	movs	r2, #3
 8007fba:	701a      	strb	r2, [r3, #0]
          UTIL_LCD_DisplayStringAt(0, x_size - 80, (uint8_t *)"       PAUSE  ...     ", CENTER_MODE);
 8007fbc:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8007fc0:	f1a3 0150 	sub.w	r1, r3, #80	@ 0x50
 8007fc4:	2301      	movs	r3, #1
 8007fc6:	4a20      	ldr	r2, [pc, #128]	@ (8008048 <AudioPlay_demo+0x594>)
 8007fc8:	2000      	movs	r0, #0
 8007fca:	f01a fc99 	bl	8022900 <UTIL_LCD_DisplayStringAt>
        }
        UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"                      ", CENTER_MODE);
 8007fce:	f01a fb7f 	bl	80226d0 <UTIL_LCD_GetFont>
 8007fd2:	4603      	mov	r3, r0
 8007fd4:	88db      	ldrh	r3, [r3, #6]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	4613      	mov	r3, r2
 8007fda:	00db      	lsls	r3, r3, #3
 8007fdc:	1a9b      	subs	r3, r3, r2
 8007fde:	005b      	lsls	r3, r3, #1
 8007fe0:	4619      	mov	r1, r3
 8007fe2:	2301      	movs	r3, #1
 8007fe4:	4a15      	ldr	r2, [pc, #84]	@ (800803c <AudioPlay_demo+0x588>)
 8007fe6:	2000      	movs	r0, #0
 8007fe8:	f01a fc8a 	bl	8022900 <UTIL_LCD_DisplayStringAt>
        HAL_Delay(200);
 8007fec:	20c8      	movs	r0, #200	@ 0xc8
 8007fee:	f00a f8d1 	bl	8012194 <HAL_Delay>
        break;
 8007ff2:	e008      	b.n	8008006 <AudioPlay_demo+0x552>

      default:
        break;
 8007ff4:	bf00      	nop
 8007ff6:	e006      	b.n	8008006 <AudioPlay_demo+0x552>
        break;
 8007ff8:	bf00      	nop
 8007ffa:	e004      	b.n	8008006 <AudioPlay_demo+0x552>
        break;
 8007ffc:	bf00      	nop
 8007ffe:	e002      	b.n	8008006 <AudioPlay_demo+0x552>
        break;
 8008000:	bf00      	nop
 8008002:	e000      	b.n	8008006 <AudioPlay_demo+0x552>
        break;
 8008004:	bf00      	nop
    }

    if (CheckForUserInput() > 0)
 8008006:	f001 fbd1 	bl	80097ac <CheckForUserInput>
 800800a:	4603      	mov	r3, r0
 800800c:	2b00      	cmp	r3, #0
 800800e:	f43f ae33 	beq.w	8007c78 <AudioPlay_demo+0x1c4>
    {
      /* Stop Player before close Test */
      BSP_AUDIO_OUT_Stop(CODEC_PDWN_SW);
 8008012:	2001      	movs	r0, #1
 8008014:	f004 f968 	bl	800c2e8 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 8008018:	2000      	movs	r0, #0
 800801a:	f003 ff13 	bl	800be44 <BSP_AUDIO_OUT_DeInit>
      return;
 800801e:	bf00      	nop
    }
  }
}
 8008020:	f507 7788 	add.w	r7, r7, #272	@ 0x110
 8008024:	46bd      	mov	sp, r7
 8008026:	bd80      	pop	{r7, pc}
 8008028:	24001550 	.word	0x24001550
 800802c:	08026670 	.word	0x08026670
 8008030:	24001558 	.word	0x24001558
 8008034:	240005cc 	.word	0x240005cc
 8008038:	08080000 	.word	0x08080000
 800803c:	080266d0 	.word	0x080266d0
 8008040:	00017700 	.word	0x00017700
 8008044:	0802663c 	.word	0x0802663c
 8008048:	080266e8 	.word	0x080266e8

0800804c <Audio_SetHint>:
  * @brief  Display Audio demo hint
  * @param  None
  * @retval None
  */
static void Audio_SetHint(void)
{
 800804c:	b580      	push	{r7, lr}
 800804e:	b084      	sub	sp, #16
 8008050:	af02      	add	r7, sp, #8
  uint32_t x_size, y_size;
  BSP_LCD_GetXSize(0, &x_size);
 8008052:	1d3b      	adds	r3, r7, #4
 8008054:	4619      	mov	r1, r3
 8008056:	2000      	movs	r0, #0
 8008058:	f007 f96e 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800805c:	463b      	mov	r3, r7
 800805e:	4619      	mov	r1, r3
 8008060:	2000      	movs	r0, #0
 8008062:	f007 f991 	bl	800f388 <BSP_LCD_GetYSize>
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8008066:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800806a:	f01a fbfd 	bl	8022868 <UTIL_LCD_Clear>

  /* Set Audio Demo description */

  UTIL_LCD_FillRect(0, 0, x_size, 95, UTIL_LCD_COLOR_BLUE);
 800806e:	687a      	ldr	r2, [r7, #4]
 8008070:	4b25      	ldr	r3, [pc, #148]	@ (8008108 <Audio_SetHint+0xbc>)
 8008072:	9300      	str	r3, [sp, #0]
 8008074:	235f      	movs	r3, #95	@ 0x5f
 8008076:	2100      	movs	r1, #0
 8008078:	2000      	movs	r0, #0
 800807a:	f01b f81b 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800807e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008082:	f01a fae9 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8008086:	4820      	ldr	r0, [pc, #128]	@ (8008108 <Audio_SetHint+0xbc>)
 8008088:	f01a fafa 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 800808c:	481f      	ldr	r0, [pc, #124]	@ (800810c <Audio_SetHint+0xc0>)
 800808e:	f01a fb0b 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO EXAMPLE", CENTER_MODE);
 8008092:	2301      	movs	r3, #1
 8008094:	4a1e      	ldr	r2, [pc, #120]	@ (8008110 <Audio_SetHint+0xc4>)
 8008096:	2100      	movs	r1, #0
 8008098:	2000      	movs	r0, #0
 800809a:	f01a fc31 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 800809e:	481d      	ldr	r0, [pc, #116]	@ (8008114 <Audio_SetHint+0xc8>)
 80080a0:	f01a fb02 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Press Tamper button for next menu          ", CENTER_MODE);
 80080a4:	2301      	movs	r3, #1
 80080a6:	4a1c      	ldr	r2, [pc, #112]	@ (8008118 <Audio_SetHint+0xcc>)
 80080a8:	211e      	movs	r1, #30
 80080aa:	2000      	movs	r0, #0
 80080ac:	f01a fc28 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"Use Joystick Up/Down    to change Volume   ", CENTER_MODE);
 80080b0:	2301      	movs	r3, #1
 80080b2:	4a1a      	ldr	r2, [pc, #104]	@ (800811c <Audio_SetHint+0xd0>)
 80080b4:	212d      	movs	r1, #45	@ 0x2d
 80080b6:	2000      	movs	r0, #0
 80080b8:	f01a fc22 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"Use Joystick Left/Right to change Frequency", CENTER_MODE);
 80080bc:	2301      	movs	r3, #1
 80080be:	4a18      	ldr	r2, [pc, #96]	@ (8008120 <Audio_SetHint+0xd4>)
 80080c0:	213c      	movs	r1, #60	@ 0x3c
 80080c2:	2000      	movs	r0, #0
 80080c4:	f01a fc1c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 75, (uint8_t *)"Click on Joystick for Pause/Resume         ", CENTER_MODE);
 80080c8:	2301      	movs	r3, #1
 80080ca:	4a16      	ldr	r2, [pc, #88]	@ (8008124 <Audio_SetHint+0xd8>)
 80080cc:	214b      	movs	r1, #75	@ 0x4b
 80080ce:	2000      	movs	r0, #0
 80080d0:	f01a fc16 	bl	8022900 <UTIL_LCD_DisplayStringAt>


  UTIL_LCD_DrawRect(10, 105, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	f1a3 0214 	sub.w	r2, r3, #20
 80080da:	683b      	ldr	r3, [r7, #0]
 80080dc:	3b6e      	subs	r3, #110	@ 0x6e
 80080de:	490a      	ldr	r1, [pc, #40]	@ (8008108 <Audio_SetHint+0xbc>)
 80080e0:	9100      	str	r1, [sp, #0]
 80080e2:	2169      	movs	r1, #105	@ 0x69
 80080e4:	200a      	movs	r0, #10
 80080e6:	f01a fd75 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 106, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	f1a3 0216 	sub.w	r2, r3, #22
 80080f0:	683b      	ldr	r3, [r7, #0]
 80080f2:	3b70      	subs	r3, #112	@ 0x70
 80080f4:	4904      	ldr	r1, [pc, #16]	@ (8008108 <Audio_SetHint+0xbc>)
 80080f6:	9100      	str	r1, [sp, #0]
 80080f8:	216a      	movs	r1, #106	@ 0x6a
 80080fa:	200b      	movs	r0, #11
 80080fc:	f01a fd6a 	bl	8022bd4 <UTIL_LCD_DrawRect>

}
 8008100:	bf00      	nop
 8008102:	3708      	adds	r7, #8
 8008104:	46bd      	mov	sp, r7
 8008106:	bd80      	pop	{r7, pc}
 8008108:	ff0000ff 	.word	0xff0000ff
 800810c:	24000a44 	.word	0x24000a44
 8008110:	08026700 	.word	0x08026700
 8008114:	24000a54 	.word	0x24000a54
 8008118:	08026710 	.word	0x08026710
 800811c:	0802673c 	.word	0x0802673c
 8008120:	08026768 	.word	0x08026768
 8008124:	08026794 	.word	0x08026794

08008128 <AUDIO_Start>:
  * @brief  Starts Audio streaming.
  * @param  None
  * @retval Audio error
  */
AUDIO_ErrorTypeDef AUDIO_Start(uint32_t *psrc_address, uint32_t file_size)
{
 8008128:	b580      	push	{r7, lr}
 800812a:	b084      	sub	sp, #16
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	6039      	str	r1, [r7, #0]
  uint32_t bytesread;

  buffer_ctl.state = BUFFER_OFFSET_NONE;
 8008132:	4b15      	ldr	r3, [pc, #84]	@ (8008188 <AUDIO_Start+0x60>)
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  buffer_ctl.AudioFileSize = file_size;
 800813a:	4a13      	ldr	r2, [pc, #76]	@ (8008188 <AUDIO_Start+0x60>)
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	f8c2 3808 	str.w	r3, [r2, #2056]	@ 0x808
  buffer_ctl.SrcAddress = psrc_address;
 8008142:	4a11      	ldr	r2, [pc, #68]	@ (8008188 <AUDIO_Start+0x60>)
 8008144:	687b      	ldr	r3, [r7, #4]
 8008146:	f8c2 380c 	str.w	r3, [r2, #2060]	@ 0x80c

  bytesread = GetData( (void *)psrc_address,
 800814a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800814e:	4a0e      	ldr	r2, [pc, #56]	@ (8008188 <AUDIO_Start+0x60>)
 8008150:	2100      	movs	r1, #0
 8008152:	6878      	ldr	r0, [r7, #4]
 8008154:	f000 f8d8 	bl	8008308 <GetData>
 8008158:	60f8      	str	r0, [r7, #12]
                       0,
                       &buffer_ctl.buff[0],
                       AUDIO_BUFFER_SIZE);
  if(bytesread > 0)
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	2b00      	cmp	r3, #0
 800815e:	d00e      	beq.n	800817e <AUDIO_Start+0x56>
  {
    BSP_AUDIO_OUT_Play(0,(uint8_t *)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE);
 8008160:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8008164:	4908      	ldr	r1, [pc, #32]	@ (8008188 <AUDIO_Start+0x60>)
 8008166:	2000      	movs	r0, #0
 8008168:	f003 ffc8 	bl	800c0fc <BSP_AUDIO_OUT_Play>
    audio_state = AUDIO_STATE_PLAYING;
 800816c:	4b07      	ldr	r3, [pc, #28]	@ (800818c <AUDIO_Start+0x64>)
 800816e:	2202      	movs	r2, #2
 8008170:	701a      	strb	r2, [r3, #0]
    buffer_ctl.fptr = bytesread;
 8008172:	4a05      	ldr	r2, [pc, #20]	@ (8008188 <AUDIO_Start+0x60>)
 8008174:	68fb      	ldr	r3, [r7, #12]
 8008176:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
    return AUDIO_ERROR_NONE;
 800817a:	2300      	movs	r3, #0
 800817c:	e000      	b.n	8008180 <AUDIO_Start+0x58>
  }
  return AUDIO_ERROR_IO;
 800817e:	2302      	movs	r3, #2
}
 8008180:	4618      	mov	r0, r3
 8008182:	3710      	adds	r7, #16
 8008184:	46bd      	mov	sp, r7
 8008186:	bd80      	pop	{r7, pc}
 8008188:	24000d40 	.word	0x24000d40
 800818c:	24001550 	.word	0x24001550

08008190 <AUDIO_Process>:
  * @brief  Manages Audio process.
  * @param  None
  * @retval Audio error
  */
uint8_t AUDIO_Process(void)
{
 8008190:	b580      	push	{r7, lr}
 8008192:	b08a      	sub	sp, #40	@ 0x28
 8008194:	af00      	add	r7, sp, #0
  uint32_t bytesread;
  AUDIO_ErrorTypeDef error_state = AUDIO_ERROR_NONE;
 8008196:	2300      	movs	r3, #0
 8008198:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  switch(audio_state)
 800819c:	4b56      	ldr	r3, [pc, #344]	@ (80082f8 <AUDIO_Process+0x168>)
 800819e:	781b      	ldrb	r3, [r3, #0]
 80081a0:	2b02      	cmp	r3, #2
 80081a2:	f040 809e 	bne.w	80082e2 <AUDIO_Process+0x152>
  {
  case AUDIO_STATE_PLAYING:

    if(buffer_ctl.fptr >= buffer_ctl.AudioFileSize)
 80081a6:	4b55      	ldr	r3, [pc, #340]	@ (80082fc <AUDIO_Process+0x16c>)
 80081a8:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80081ac:	4b53      	ldr	r3, [pc, #332]	@ (80082fc <AUDIO_Process+0x16c>)
 80081ae:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 80081b2:	429a      	cmp	r2, r3
 80081b4:	d306      	bcc.n	80081c4 <AUDIO_Process+0x34>
    {
      /* Play audio sample again ... */
      buffer_ctl.fptr = 0;
 80081b6:	4b51      	ldr	r3, [pc, #324]	@ (80082fc <AUDIO_Process+0x16c>)
 80081b8:	2200      	movs	r2, #0
 80081ba:	f8c3 2800 	str.w	r2, [r3, #2048]	@ 0x800
      error_state = AUDIO_ERROR_EOF;
 80081be:	2303      	movs	r3, #3
 80081c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }

    /* 1st half buffer played; so fill it and continue playing from bottom*/
    if(buffer_ctl.state == BUFFER_OFFSET_HALF)
 80081c4:	4b4d      	ldr	r3, [pc, #308]	@ (80082fc <AUDIO_Process+0x16c>)
 80081c6:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 80081ca:	2b01      	cmp	r3, #1
 80081cc:	d141      	bne.n	8008252 <AUDIO_Process+0xc2>
    {
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 80081ce:	4b4b      	ldr	r3, [pc, #300]	@ (80082fc <AUDIO_Process+0x16c>)
 80081d0:	f8d3 080c 	ldr.w	r0, [r3, #2060]	@ 0x80c
 80081d4:	4b49      	ldr	r3, [pc, #292]	@ (80082fc <AUDIO_Process+0x16c>)
 80081d6:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 80081da:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80081de:	4a47      	ldr	r2, [pc, #284]	@ (80082fc <AUDIO_Process+0x16c>)
 80081e0:	f000 f892 	bl	8008308 <GetData>
 80081e4:	6238      	str	r0, [r7, #32]
                          buffer_ctl.fptr,
                          &buffer_ctl.buff[0],
                          AUDIO_BUFFER_SIZE /2);

      if( bytesread >0)
 80081e6:	6a3b      	ldr	r3, [r7, #32]
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d032      	beq.n	8008252 <AUDIO_Process+0xc2>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 80081ec:	4b43      	ldr	r3, [pc, #268]	@ (80082fc <AUDIO_Process+0x16c>)
 80081ee:	2200      	movs	r2, #0
 80081f0:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
        buffer_ctl.fptr += bytesread;
 80081f4:	4b41      	ldr	r3, [pc, #260]	@ (80082fc <AUDIO_Process+0x16c>)
 80081f6:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 80081fa:	6a3b      	ldr	r3, [r7, #32]
 80081fc:	4413      	add	r3, r2
 80081fe:	4a3f      	ldr	r2, [pc, #252]	@ (80082fc <AUDIO_Process+0x16c>)
 8008200:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
 8008204:	4b3d      	ldr	r3, [pc, #244]	@ (80082fc <AUDIO_Process+0x16c>)
 8008206:	61fb      	str	r3, [r7, #28]
 8008208:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800820c:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800820e:	69bb      	ldr	r3, [r7, #24]
 8008210:	2b00      	cmp	r3, #0
 8008212:	dd1d      	ble.n	8008250 <AUDIO_Process+0xc0>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008214:	69fb      	ldr	r3, [r7, #28]
 8008216:	f003 021f 	and.w	r2, r3, #31
 800821a:	69bb      	ldr	r3, [r7, #24]
 800821c:	4413      	add	r3, r2
 800821e:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008220:	69fb      	ldr	r3, [r7, #28]
 8008222:	613b      	str	r3, [r7, #16]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8008224:	f3bf 8f4f 	dsb	sy
}
 8008228:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800822a:	4a35      	ldr	r2, [pc, #212]	@ (8008300 <AUDIO_Process+0x170>)
 800822c:	693b      	ldr	r3, [r7, #16]
 800822e:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008232:	693b      	ldr	r3, [r7, #16]
 8008234:	3320      	adds	r3, #32
 8008236:	613b      	str	r3, [r7, #16]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008238:	697b      	ldr	r3, [r7, #20]
 800823a:	3b20      	subs	r3, #32
 800823c:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800823e:	697b      	ldr	r3, [r7, #20]
 8008240:	2b00      	cmp	r3, #0
 8008242:	dcf2      	bgt.n	800822a <AUDIO_Process+0x9a>
  __ASM volatile ("dsb 0xF":::"memory");
 8008244:	f3bf 8f4f 	dsb	sy
}
 8008248:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800824a:	f3bf 8f6f 	isb	sy
}
 800824e:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 8008250:	bf00      	nop
      SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[0], AUDIO_BUFFER_SIZE/2);
      }
    }

    /* 2nd half buffer played; so fill it and continue playing from top */
    if(buffer_ctl.state == BUFFER_OFFSET_FULL)
 8008252:	4b2a      	ldr	r3, [pc, #168]	@ (80082fc <AUDIO_Process+0x16c>)
 8008254:	f893 3804 	ldrb.w	r3, [r3, #2052]	@ 0x804
 8008258:	2b02      	cmp	r3, #2
 800825a:	d146      	bne.n	80082ea <AUDIO_Process+0x15a>
    {
      bytesread = GetData((void *)buffer_ctl.SrcAddress,
 800825c:	4b27      	ldr	r3, [pc, #156]	@ (80082fc <AUDIO_Process+0x16c>)
 800825e:	f8d3 080c 	ldr.w	r0, [r3, #2060]	@ 0x80c
 8008262:	4b26      	ldr	r3, [pc, #152]	@ (80082fc <AUDIO_Process+0x16c>)
 8008264:	f8d3 1800 	ldr.w	r1, [r3, #2048]	@ 0x800
 8008268:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800826c:	4a25      	ldr	r2, [pc, #148]	@ (8008304 <AUDIO_Process+0x174>)
 800826e:	f000 f84b 	bl	8008308 <GetData>
 8008272:	6238      	str	r0, [r7, #32]
                          buffer_ctl.fptr,
                          &buffer_ctl.buff[AUDIO_BUFFER_SIZE /2],
                          AUDIO_BUFFER_SIZE /2);
      if( bytesread > 0)
 8008274:	6a3b      	ldr	r3, [r7, #32]
 8008276:	2b00      	cmp	r3, #0
 8008278:	d037      	beq.n	80082ea <AUDIO_Process+0x15a>
      {
        buffer_ctl.state = BUFFER_OFFSET_NONE;
 800827a:	4b20      	ldr	r3, [pc, #128]	@ (80082fc <AUDIO_Process+0x16c>)
 800827c:	2200      	movs	r2, #0
 800827e:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
        buffer_ctl.fptr += bytesread;
 8008282:	4b1e      	ldr	r3, [pc, #120]	@ (80082fc <AUDIO_Process+0x16c>)
 8008284:	f8d3 2800 	ldr.w	r2, [r3, #2048]	@ 0x800
 8008288:	6a3b      	ldr	r3, [r7, #32]
 800828a:	4413      	add	r3, r2
 800828c:	4a1b      	ldr	r2, [pc, #108]	@ (80082fc <AUDIO_Process+0x16c>)
 800828e:	f8c2 3800 	str.w	r3, [r2, #2048]	@ 0x800
 8008292:	4b1c      	ldr	r3, [pc, #112]	@ (8008304 <AUDIO_Process+0x174>)
 8008294:	60fb      	str	r3, [r7, #12]
 8008296:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800829a:	60bb      	str	r3, [r7, #8]
    if ( dsize > 0 ) { 
 800829c:	68bb      	ldr	r3, [r7, #8]
 800829e:	2b00      	cmp	r3, #0
 80082a0:	dd1d      	ble.n	80082de <AUDIO_Process+0x14e>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80082a2:	68fb      	ldr	r3, [r7, #12]
 80082a4:	f003 021f 	and.w	r2, r3, #31
 80082a8:	68bb      	ldr	r3, [r7, #8]
 80082aa:	4413      	add	r3, r2
 80082ac:	607b      	str	r3, [r7, #4]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	603b      	str	r3, [r7, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80082b2:	f3bf 8f4f 	dsb	sy
}
 80082b6:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80082b8:	4a11      	ldr	r2, [pc, #68]	@ (8008300 <AUDIO_Process+0x170>)
 80082ba:	683b      	ldr	r3, [r7, #0]
 80082bc:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	3320      	adds	r3, #32
 80082c4:	603b      	str	r3, [r7, #0]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80082c6:	687b      	ldr	r3, [r7, #4]
 80082c8:	3b20      	subs	r3, #32
 80082ca:	607b      	str	r3, [r7, #4]
      } while ( op_size > 0 );
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	dcf2      	bgt.n	80082b8 <AUDIO_Process+0x128>
  __ASM volatile ("dsb 0xF":::"memory");
 80082d2:	f3bf 8f4f 	dsb	sy
}
 80082d6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80082d8:	f3bf 8f6f 	isb	sy
}
 80082dc:	bf00      	nop
}
 80082de:	bf00      	nop
      /* Clean Data Cache to update the content of the SRAM */
      SCB_CleanDCache_by_Addr((uint32_t*)&buffer_ctl.buff[AUDIO_BUFFER_SIZE/2], AUDIO_BUFFER_SIZE/2);
      }
    }
    break;
 80082e0:	e003      	b.n	80082ea <AUDIO_Process+0x15a>

  default:
    error_state = AUDIO_ERROR_NOTREADY;
 80082e2:	2301      	movs	r3, #1
 80082e4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    break;
 80082e8:	e000      	b.n	80082ec <AUDIO_Process+0x15c>
    break;
 80082ea:	bf00      	nop
  }
  return (uint8_t) error_state;
 80082ec:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 80082f0:	4618      	mov	r0, r3
 80082f2:	3728      	adds	r7, #40	@ 0x28
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	24001550 	.word	0x24001550
 80082fc:	24000d40 	.word	0x24000d40
 8008300:	e000ed00 	.word	0xe000ed00
 8008304:	24001140 	.word	0x24001140

08008308 <GetData>:
  * @brief  Gets Data from storage unit.
  * @param  None
  * @retval None
  */
static uint32_t GetData(void *pdata, uint32_t offset, uint8_t *pbuf, uint32_t NbrOfData)
{
 8008308:	b480      	push	{r7}
 800830a:	b087      	sub	sp, #28
 800830c:	af00      	add	r7, sp, #0
 800830e:	60f8      	str	r0, [r7, #12]
 8008310:	60b9      	str	r1, [r7, #8]
 8008312:	607a      	str	r2, [r7, #4]
 8008314:	603b      	str	r3, [r7, #0]
  uint8_t *lptr = pdata;
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	613b      	str	r3, [r7, #16]
  uint32_t ReadDataNbr;

  ReadDataNbr = 0;
 800831a:	2300      	movs	r3, #0
 800831c:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 800831e:	e00c      	b.n	800833a <GetData+0x32>
  {
    pbuf[ReadDataNbr]= lptr [offset + ReadDataNbr];
 8008320:	68ba      	ldr	r2, [r7, #8]
 8008322:	697b      	ldr	r3, [r7, #20]
 8008324:	4413      	add	r3, r2
 8008326:	693a      	ldr	r2, [r7, #16]
 8008328:	441a      	add	r2, r3
 800832a:	6879      	ldr	r1, [r7, #4]
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	440b      	add	r3, r1
 8008330:	7812      	ldrb	r2, [r2, #0]
 8008332:	701a      	strb	r2, [r3, #0]
    ReadDataNbr++;
 8008334:	697b      	ldr	r3, [r7, #20]
 8008336:	3301      	adds	r3, #1
 8008338:	617b      	str	r3, [r7, #20]
  while(((offset + ReadDataNbr) < buffer_ctl.AudioFileSize) && (ReadDataNbr < NbrOfData))
 800833a:	68ba      	ldr	r2, [r7, #8]
 800833c:	697b      	ldr	r3, [r7, #20]
 800833e:	441a      	add	r2, r3
 8008340:	4b07      	ldr	r3, [pc, #28]	@ (8008360 <GetData+0x58>)
 8008342:	f8d3 3808 	ldr.w	r3, [r3, #2056]	@ 0x808
 8008346:	429a      	cmp	r2, r3
 8008348:	d203      	bcs.n	8008352 <GetData+0x4a>
 800834a:	697a      	ldr	r2, [r7, #20]
 800834c:	683b      	ldr	r3, [r7, #0]
 800834e:	429a      	cmp	r2, r3
 8008350:	d3e6      	bcc.n	8008320 <GetData+0x18>
  }
  return ReadDataNbr;
 8008352:	697b      	ldr	r3, [r7, #20]
}
 8008354:	4618      	mov	r0, r3
 8008356:	371c      	adds	r7, #28
 8008358:	46bd      	mov	sp, r7
 800835a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835e:	4770      	bx	lr
 8008360:	24000d40 	.word	0x24000d40

08008364 <BSP_AUDIO_OUT_TransferComplete_CallBack>:
  * @brief  Manages the full Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_TransferComplete_CallBack(uint32_t Instance)
{
 8008364:	b480      	push	{r7}
 8008366:	b083      	sub	sp, #12
 8008368:	af00      	add	r7, sp, #0
 800836a:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 800836c:	4b06      	ldr	r3, [pc, #24]	@ (8008388 <BSP_AUDIO_OUT_TransferComplete_CallBack+0x24>)
 800836e:	781b      	ldrb	r3, [r3, #0]
 8008370:	2b02      	cmp	r3, #2
 8008372:	d103      	bne.n	800837c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 2nd part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_FULL;
 8008374:	4b05      	ldr	r3, [pc, #20]	@ (800838c <BSP_AUDIO_OUT_TransferComplete_CallBack+0x28>)
 8008376:	2202      	movs	r2, #2
 8008378:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  }
}
 800837c:	bf00      	nop
 800837e:	370c      	adds	r7, #12
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr
 8008388:	24001550 	.word	0x24001550
 800838c:	24000d40 	.word	0x24000d40

08008390 <BSP_AUDIO_OUT_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_HalfTransfer_CallBack(uint32_t Instance)
{
 8008390:	b480      	push	{r7}
 8008392:	b083      	sub	sp, #12
 8008394:	af00      	add	r7, sp, #0
 8008396:	6078      	str	r0, [r7, #4]
    if(audio_state == AUDIO_STATE_PLAYING)
 8008398:	4b06      	ldr	r3, [pc, #24]	@ (80083b4 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x24>)
 800839a:	781b      	ldrb	r3, [r3, #0]
 800839c:	2b02      	cmp	r3, #2
 800839e:	d103      	bne.n	80083a8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x18>
  {
    /* allows AUDIO_Process() to refill 1st part of the buffer  */
    buffer_ctl.state = BUFFER_OFFSET_HALF;
 80083a0:	4b05      	ldr	r3, [pc, #20]	@ (80083b8 <BSP_AUDIO_OUT_HalfTransfer_CallBack+0x28>)
 80083a2:	2201      	movs	r2, #1
 80083a4:	f883 2804 	strb.w	r2, [r3, #2052]	@ 0x804
  }

}
 80083a8:	bf00      	nop
 80083aa:	370c      	adds	r7, #12
 80083ac:	46bd      	mov	sp, r7
 80083ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b2:	4770      	bx	lr
 80083b4:	24001550 	.word	0x24001550
 80083b8:	24000d40 	.word	0x24000d40

080083bc <BSP_AUDIO_OUT_Error_CallBack>:
  * @brief  Manages the DMA FIFO error event.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_OUT_Error_CallBack(uint32_t Instance)
{
 80083bc:	b580      	push	{r7, lr}
 80083be:	b082      	sub	sp, #8
 80083c0:	af00      	add	r7, sp, #0
 80083c2:	6078      	str	r0, [r7, #4]
  /* Display message on the LCD screen */
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_RED);
 80083c4:	480f      	ldr	r0, [pc, #60]	@ (8008404 <BSP_AUDIO_OUT_Error_CallBack+0x48>)
 80083c6:	f01a f95b 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_DisplayStringAt(0, LINE(14), (uint8_t *)"       DMA  ERROR     ", CENTER_MODE);
 80083ca:	f01a f981 	bl	80226d0 <UTIL_LCD_GetFont>
 80083ce:	4603      	mov	r3, r0
 80083d0:	88db      	ldrh	r3, [r3, #6]
 80083d2:	461a      	mov	r2, r3
 80083d4:	4613      	mov	r3, r2
 80083d6:	00db      	lsls	r3, r3, #3
 80083d8:	1a9b      	subs	r3, r3, r2
 80083da:	005b      	lsls	r3, r3, #1
 80083dc:	4619      	mov	r1, r3
 80083de:	2301      	movs	r3, #1
 80083e0:	4a09      	ldr	r2, [pc, #36]	@ (8008408 <BSP_AUDIO_OUT_Error_CallBack+0x4c>)
 80083e2:	2000      	movs	r0, #0
 80083e4:	f01a fa8c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80083e8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80083ec:	f01a f948 	bl	8022680 <UTIL_LCD_SetBackColor>

  /* Stop the program with an infinite loop */
  while (BSP_PB_GetState(BUTTON_WAKEUP) != RESET)
 80083f0:	bf00      	nop
 80083f2:	2000      	movs	r0, #0
 80083f4:	f003 fa26 	bl	800b844 <BSP_PB_GetState>
 80083f8:	4603      	mov	r3, r0
 80083fa:	2b00      	cmp	r3, #0
  {
    return;
 80083fc:	bf00      	nop
  }

  /* could also generate a system reset to recover from the error */
  /* .... */
}
 80083fe:	3708      	adds	r7, #8
 8008400:	46bd      	mov	sp, r7
 8008402:	bd80      	pop	{r7, pc}
 8008404:	ffff0000 	.word	0xffff0000
 8008408:	080267c0 	.word	0x080267c0

0800840c <AudioRecord_demo>:
  *   Audio peripheral.
  * @param  None
  * @retval None
*/
void AudioRecord_demo(void)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b086      	sub	sp, #24
 8008410:	af02      	add	r7, sp, #8
   uint32_t channel_nbr = 2;
 8008412:	2302      	movs	r3, #2
 8008414:	60fb      	str	r3, [r7, #12]

  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 8008416:	f107 0308 	add.w	r3, r7, #8
 800841a:	4619      	mov	r1, r3
 800841c:	2000      	movs	r0, #0
 800841e:	f006 ff8b 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8008422:	1d3b      	adds	r3, r7, #4
 8008424:	4619      	mov	r1, r3
 8008426:	2000      	movs	r0, #0
 8008428:	f006 ffae 	bl	800f388 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800842c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008430:	f01a fa1a 	bl	8022868 <UTIL_LCD_Clear>
  /* Set Audio Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 90, UTIL_LCD_COLOR_BLUE);
 8008434:	68ba      	ldr	r2, [r7, #8]
 8008436:	4b51      	ldr	r3, [pc, #324]	@ (800857c <AudioRecord_demo+0x170>)
 8008438:	9300      	str	r3, [sp, #0]
 800843a:	235a      	movs	r3, #90	@ 0x5a
 800843c:	2100      	movs	r1, #0
 800843e:	2000      	movs	r0, #0
 8008440:	f01a fe38 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8008444:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008448:	f01a f906 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800844c:	484b      	ldr	r0, [pc, #300]	@ (800857c <AudioRecord_demo+0x170>)
 800844e:	f01a f917 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8008452:	484b      	ldr	r0, [pc, #300]	@ (8008580 <AudioRecord_demo+0x174>)
 8008454:	f01a f928 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"AUDIO RECORD SAI PDM EXAMPLE", CENTER_MODE);
 8008458:	2301      	movs	r3, #1
 800845a:	4a4a      	ldr	r2, [pc, #296]	@ (8008584 <AudioRecord_demo+0x178>)
 800845c:	2100      	movs	r1, #0
 800845e:	2000      	movs	r0, #0
 8008460:	f01a fa4e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 8008464:	4848      	ldr	r0, [pc, #288]	@ (8008588 <AudioRecord_demo+0x17c>)
 8008466:	f01a f91f 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 24,  (uint8_t *)"Press User button for next menu", CENTER_MODE);
 800846a:	2301      	movs	r3, #1
 800846c:	4a47      	ldr	r2, [pc, #284]	@ (800858c <AudioRecord_demo+0x180>)
 800846e:	2118      	movs	r1, #24
 8008470:	2000      	movs	r0, #0
 8008472:	f01a fa45 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 100, x_size - 20, y_size - 110, UTIL_LCD_COLOR_BLUE);
 8008476:	68bb      	ldr	r3, [r7, #8]
 8008478:	f1a3 0214 	sub.w	r2, r3, #20
 800847c:	687b      	ldr	r3, [r7, #4]
 800847e:	3b6e      	subs	r3, #110	@ 0x6e
 8008480:	493e      	ldr	r1, [pc, #248]	@ (800857c <AudioRecord_demo+0x170>)
 8008482:	9100      	str	r1, [sp, #0]
 8008484:	2164      	movs	r1, #100	@ 0x64
 8008486:	200a      	movs	r0, #10
 8008488:	f01a fba4 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 101, x_size - 22, y_size - 112, UTIL_LCD_COLOR_BLUE);
 800848c:	68bb      	ldr	r3, [r7, #8]
 800848e:	f1a3 0216 	sub.w	r2, r3, #22
 8008492:	687b      	ldr	r3, [r7, #4]
 8008494:	3b70      	subs	r3, #112	@ 0x70
 8008496:	4939      	ldr	r1, [pc, #228]	@ (800857c <AudioRecord_demo+0x170>)
 8008498:	9100      	str	r1, [sp, #0]
 800849a:	2165      	movs	r1, #101	@ 0x65
 800849c:	200b      	movs	r0, #11
 800849e:	f01a fb99 	bl	8022bd4 <UTIL_LCD_DrawRect>

  AudioFreq_ptr = AudioFreq+2; /* AUDIO_FREQUENCY_16K; */
 80084a2:	4a3b      	ldr	r2, [pc, #236]	@ (8008590 <AudioRecord_demo+0x184>)
 80084a4:	4b3b      	ldr	r3, [pc, #236]	@ (8008594 <AudioRecord_demo+0x188>)
 80084a6:	601a      	str	r2, [r3, #0]

  AudioOutInit.Device = AUDIO_OUT_DEVICE_AUTO;
 80084a8:	4b3b      	ldr	r3, [pc, #236]	@ (8008598 <AudioRecord_demo+0x18c>)
 80084aa:	2204      	movs	r2, #4
 80084ac:	601a      	str	r2, [r3, #0]
  AudioOutInit.ChannelsNbr = channel_nbr;
 80084ae:	4a3a      	ldr	r2, [pc, #232]	@ (8008598 <AudioRecord_demo+0x18c>)
 80084b0:	68fb      	ldr	r3, [r7, #12]
 80084b2:	60d3      	str	r3, [r2, #12]
  AudioOutInit.SampleRate = *AudioFreq_ptr;
 80084b4:	4b37      	ldr	r3, [pc, #220]	@ (8008594 <AudioRecord_demo+0x188>)
 80084b6:	681b      	ldr	r3, [r3, #0]
 80084b8:	681b      	ldr	r3, [r3, #0]
 80084ba:	4a37      	ldr	r2, [pc, #220]	@ (8008598 <AudioRecord_demo+0x18c>)
 80084bc:	6053      	str	r3, [r2, #4]
  AudioOutInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80084be:	4b36      	ldr	r3, [pc, #216]	@ (8008598 <AudioRecord_demo+0x18c>)
 80084c0:	2210      	movs	r2, #16
 80084c2:	609a      	str	r2, [r3, #8]
  AudioOutInit.Volume = VolumeLevel;
 80084c4:	4b35      	ldr	r3, [pc, #212]	@ (800859c <AudioRecord_demo+0x190>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a33      	ldr	r2, [pc, #204]	@ (8008598 <AudioRecord_demo+0x18c>)
 80084ca:	6113      	str	r3, [r2, #16]

  AudioInInit.Device = AUDIO_IN_DEVICE_DIGITAL_MIC;
 80084cc:	4b34      	ldr	r3, [pc, #208]	@ (80085a0 <AudioRecord_demo+0x194>)
 80084ce:	2210      	movs	r2, #16
 80084d0:	601a      	str	r2, [r3, #0]
  AudioInInit.ChannelsNbr = channel_nbr;
 80084d2:	4a33      	ldr	r2, [pc, #204]	@ (80085a0 <AudioRecord_demo+0x194>)
 80084d4:	68fb      	ldr	r3, [r7, #12]
 80084d6:	60d3      	str	r3, [r2, #12]
  AudioInInit.SampleRate = *AudioFreq_ptr;
 80084d8:	4b2e      	ldr	r3, [pc, #184]	@ (8008594 <AudioRecord_demo+0x188>)
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	681b      	ldr	r3, [r3, #0]
 80084de:	4a30      	ldr	r2, [pc, #192]	@ (80085a0 <AudioRecord_demo+0x194>)
 80084e0:	6053      	str	r3, [r2, #4]
  AudioInInit.BitsPerSample = AUDIO_RESOLUTION_16B;
 80084e2:	4b2f      	ldr	r3, [pc, #188]	@ (80085a0 <AudioRecord_demo+0x194>)
 80084e4:	2210      	movs	r2, #16
 80084e6:	609a      	str	r2, [r3, #8]
  AudioInInit.Volume = VolumeLevel;
 80084e8:	4b2c      	ldr	r3, [pc, #176]	@ (800859c <AudioRecord_demo+0x190>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	4a2c      	ldr	r2, [pc, #176]	@ (80085a0 <AudioRecord_demo+0x194>)
 80084ee:	6113      	str	r3, [r2, #16]

  BSP_JOY_Init(JOY1, JOY_MODE_GPIO, JOY_ALL);
 80084f0:	221f      	movs	r2, #31
 80084f2:	2100      	movs	r1, #0
 80084f4:	2000      	movs	r0, #0
 80084f6:	f003 f9d5 	bl	800b8a4 <BSP_JOY_Init>

  /* Initialize Audio Recorder with 2 channels to be used */
  BSP_AUDIO_IN_Init(1, &AudioInInit);
 80084fa:	4929      	ldr	r1, [pc, #164]	@ (80085a0 <AudioRecord_demo+0x194>)
 80084fc:	2001      	movs	r0, #1
 80084fe:	f004 f801 	bl	800c504 <BSP_AUDIO_IN_Init>
  BSP_AUDIO_IN_GetState(1, &InState);
 8008502:	4928      	ldr	r1, [pc, #160]	@ (80085a4 <AudioRecord_demo+0x198>)
 8008504:	2001      	movs	r0, #1
 8008506:	f004 fc85 	bl	800ce14 <BSP_AUDIO_IN_GetState>

  BSP_AUDIO_OUT_Init(0, &AudioOutInit);
 800850a:	4923      	ldr	r1, [pc, #140]	@ (8008598 <AudioRecord_demo+0x18c>)
 800850c:	2000      	movs	r0, #0
 800850e:	f003 fb9f 	bl	800bc50 <BSP_AUDIO_OUT_Init>

  BSP_AUDIO_OUT_SetDevice(0, AUDIO_OUT_DEVICE_HEADPHONE);
 8008512:	2102      	movs	r1, #2
 8008514:	2000      	movs	r0, #0
 8008516:	f003 ff8f 	bl	800c438 <BSP_AUDIO_OUT_SetDevice>

  /* Start Recording */
  UTIL_LCD_DisplayStringAt(0, 190, (uint8_t *)"Start Recording ", CENTER_MODE);
 800851a:	2301      	movs	r3, #1
 800851c:	4a22      	ldr	r2, [pc, #136]	@ (80085a8 <AudioRecord_demo+0x19c>)
 800851e:	21be      	movs	r1, #190	@ 0xbe
 8008520:	2000      	movs	r0, #0
 8008522:	f01a f9ed 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_IN_RecordPDM(1, (uint8_t*)&recordPDMBuf, 2*AUDIO_IN_PDM_BUFFER_SIZE);
 8008526:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800852a:	4920      	ldr	r1, [pc, #128]	@ (80085ac <AudioRecord_demo+0x1a0>)
 800852c:	2001      	movs	r0, #1
 800852e:	f004 fc3f 	bl	800cdb0 <BSP_AUDIO_IN_RecordPDM>

  /* Play the recorded buffer*/
  UTIL_LCD_DisplayStringAt(0, 220, (uint8_t *)"Play the recorded buffer... ", CENTER_MODE);
 8008532:	2301      	movs	r3, #1
 8008534:	4a1e      	ldr	r2, [pc, #120]	@ (80085b0 <AudioRecord_demo+0x1a4>)
 8008536:	21dc      	movs	r1, #220	@ 0xdc
 8008538:	2000      	movs	r0, #0
 800853a:	f01a f9e1 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  BSP_AUDIO_OUT_Play(0, (uint8_t*)&RecPlayback[0], 2*RECORD_BUFFER_SIZE);
 800853e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8008542:	491c      	ldr	r1, [pc, #112]	@ (80085b4 <AudioRecord_demo+0x1a8>)
 8008544:	2000      	movs	r0, #0
 8008546:	f003 fdd9 	bl	800c0fc <BSP_AUDIO_OUT_Play>
  while (1)
  {
    if (CheckForUserInput() > 0)
 800854a:	f001 f92f 	bl	80097ac <CheckForUserInput>
 800854e:	4603      	mov	r3, r0
 8008550:	2b00      	cmp	r3, #0
 8008552:	d0fa      	beq.n	800854a <AudioRecord_demo+0x13e>
    {
      ButtonState = 0;
 8008554:	4b18      	ldr	r3, [pc, #96]	@ (80085b8 <AudioRecord_demo+0x1ac>)
 8008556:	2200      	movs	r2, #0
 8008558:	601a      	str	r2, [r3, #0]
      BSP_AUDIO_OUT_Stop(0);
 800855a:	2000      	movs	r0, #0
 800855c:	f003 fec4 	bl	800c2e8 <BSP_AUDIO_OUT_Stop>
      BSP_AUDIO_OUT_DeInit(0);
 8008560:	2000      	movs	r0, #0
 8008562:	f003 fc6f 	bl	800be44 <BSP_AUDIO_OUT_DeInit>
      BSP_AUDIO_IN_Stop(1);
 8008566:	2001      	movs	r0, #1
 8008568:	f004 fbe0 	bl	800cd2c <BSP_AUDIO_IN_Stop>
      BSP_AUDIO_IN_DeInit(1);
 800856c:	2001      	movs	r0, #1
 800856e:	f004 f951 	bl	800c814 <BSP_AUDIO_IN_DeInit>
      return;
 8008572:	bf00      	nop
    }
  }
}
 8008574:	3710      	adds	r7, #16
 8008576:	46bd      	mov	sp, r7
 8008578:	bd80      	pop	{r7, pc}
 800857a:	bf00      	nop
 800857c:	ff0000ff 	.word	0xff0000ff
 8008580:	24000a44 	.word	0x24000a44
 8008584:	080267d8 	.word	0x080267d8
 8008588:	24000a54 	.word	0x24000a54
 800858c:	080267f8 	.word	0x080267f8
 8008590:	240005fc 	.word	0x240005fc
 8008594:	24005564 	.word	0x24005564
 8008598:	2400557c 	.word	0x2400557c
 800859c:	24000618 	.word	0x24000618
 80085a0:	24005568 	.word	0x24005568
 80085a4:	24005560 	.word	0x24005560
 80085a8:	08026818 	.word	0x08026818
 80085ac:	38000000 	.word	0x38000000
 80085b0:	0802682c 	.word	0x0802682c
 80085b4:	24001560 	.word	0x24001560
 80085b8:	240055c0 	.word	0x240055c0

080085bc <BSP_AUDIO_IN_TransferComplete_CallBack>:
  * @brief Calculates the remaining file size and new position of the pointer.
  * @param  None
  * @retval None
  */
void  BSP_AUDIO_IN_TransferComplete_CallBack(uint32_t Instance)
{
 80085bc:	b580      	push	{r7, lr}
 80085be:	b08a      	sub	sp, #40	@ 0x28
 80085c0:	af00      	add	r7, sp, #0
 80085c2:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b01      	cmp	r3, #1
 80085c8:	d168      	bne.n	800869c <BSP_AUDIO_IN_TransferComplete_CallBack+0xe0>
 80085ca:	4b38      	ldr	r3, [pc, #224]	@ (80086ac <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 80085cc:	617b      	str	r3, [r7, #20]
 80085ce:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80085d2:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80085d4:	693b      	ldr	r3, [r7, #16]
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	dd1d      	ble.n	8008616 <BSP_AUDIO_IN_TransferComplete_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80085da:	697b      	ldr	r3, [r7, #20]
 80085dc:	f003 021f 	and.w	r2, r3, #31
 80085e0:	693b      	ldr	r3, [r7, #16]
 80085e2:	4413      	add	r3, r2
 80085e4:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80085e6:	697b      	ldr	r3, [r7, #20]
 80085e8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80085ea:	f3bf 8f4f 	dsb	sy
}
 80085ee:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80085f0:	4a2f      	ldr	r2, [pc, #188]	@ (80086b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 80085f2:	68bb      	ldr	r3, [r7, #8]
 80085f4:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80085f8:	68bb      	ldr	r3, [r7, #8]
 80085fa:	3320      	adds	r3, #32
 80085fc:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 80085fe:	68fb      	ldr	r3, [r7, #12]
 8008600:	3b20      	subs	r3, #32
 8008602:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8008604:	68fb      	ldr	r3, [r7, #12]
 8008606:	2b00      	cmp	r3, #0
 8008608:	dcf2      	bgt.n	80085f0 <BSP_AUDIO_IN_TransferComplete_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800860a:	f3bf 8f4f 	dsb	sy
}
 800860e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008610:	f3bf 8f6f 	isb	sy
}
 8008614:	bf00      	nop
}
 8008616:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[AUDIO_IN_PDM_BUFFER_SIZE/2], &RecPlayback[playbackPtr]);
 8008618:	4b26      	ldr	r3, [pc, #152]	@ (80086b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	005b      	lsls	r3, r3, #1
 800861e:	4a26      	ldr	r2, [pc, #152]	@ (80086b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 8008620:	4413      	add	r3, r2
 8008622:	461a      	mov	r2, r3
 8008624:	4921      	ldr	r1, [pc, #132]	@ (80086ac <BSP_AUDIO_IN_TransferComplete_CallBack+0xf0>)
 8008626:	6878      	ldr	r0, [r7, #4]
 8008628:	f004 fb14 	bl	800cc54 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 800862c:	4b21      	ldr	r3, [pc, #132]	@ (80086b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	005b      	lsls	r3, r3, #1
 8008632:	4a21      	ldr	r2, [pc, #132]	@ (80086b8 <BSP_AUDIO_IN_TransferComplete_CallBack+0xfc>)
 8008634:	4413      	add	r3, r2
 8008636:	627b      	str	r3, [r7, #36]	@ 0x24
 8008638:	2340      	movs	r3, #64	@ 0x40
 800863a:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 800863c:	6a3b      	ldr	r3, [r7, #32]
 800863e:	2b00      	cmp	r3, #0
 8008640:	dd1d      	ble.n	800867e <BSP_AUDIO_IN_TransferComplete_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008642:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008644:	f003 021f 	and.w	r2, r3, #31
 8008648:	6a3b      	ldr	r3, [r7, #32]
 800864a:	4413      	add	r3, r2
 800864c:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800864e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008650:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8008652:	f3bf 8f4f 	dsb	sy
}
 8008656:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8008658:	4a15      	ldr	r2, [pc, #84]	@ (80086b0 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf4>)
 800865a:	69bb      	ldr	r3, [r7, #24]
 800865c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008660:	69bb      	ldr	r3, [r7, #24]
 8008662:	3320      	adds	r3, #32
 8008664:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008666:	69fb      	ldr	r3, [r7, #28]
 8008668:	3b20      	subs	r3, #32
 800866a:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 800866c:	69fb      	ldr	r3, [r7, #28]
 800866e:	2b00      	cmp	r3, #0
 8008670:	dcf2      	bgt.n	8008658 <BSP_AUDIO_IN_TransferComplete_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8008672:	f3bf 8f4f 	dsb	sy
}
 8008676:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008678:	f3bf 8f6f 	isb	sy
}
 800867c:	bf00      	nop
}
 800867e:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8008680:	4b0c      	ldr	r3, [pc, #48]	@ (80086b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8008682:	681b      	ldr	r3, [r3, #0]
 8008684:	3320      	adds	r3, #32
 8008686:	4a0b      	ldr	r2, [pc, #44]	@ (80086b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8008688:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 800868a:	4b0a      	ldr	r3, [pc, #40]	@ (80086b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008692:	d306      	bcc.n	80086a2 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
      playbackPtr = 0;
 8008694:	4b07      	ldr	r3, [pc, #28]	@ (80086b4 <BSP_AUDIO_IN_TransferComplete_CallBack+0xf8>)
 8008696:	2200      	movs	r2, #0
 8008698:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_FULL;
  }

}
 800869a:	e002      	b.n	80086a2 <BSP_AUDIO_IN_TransferComplete_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_FULL;
 800869c:	4b07      	ldr	r3, [pc, #28]	@ (80086bc <BSP_AUDIO_IN_TransferComplete_CallBack+0x100>)
 800869e:	2202      	movs	r2, #2
 80086a0:	601a      	str	r2, [r3, #0]
}
 80086a2:	bf00      	nop
 80086a4:	3728      	adds	r7, #40	@ 0x28
 80086a6:	46bd      	mov	sp, r7
 80086a8:	bd80      	pop	{r7, pc}
 80086aa:	bf00      	nop
 80086ac:	38000100 	.word	0x38000100
 80086b0:	e000ed00 	.word	0xe000ed00
 80086b4:	24005590 	.word	0x24005590
 80086b8:	24001560 	.word	0x24001560
 80086bc:	24005594 	.word	0x24005594

080086c0 <BSP_AUDIO_IN_HalfTransfer_CallBack>:
  * @brief  Manages the DMA Half Transfer complete interrupt.
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_HalfTransfer_CallBack(uint32_t Instance)
{
 80086c0:	b580      	push	{r7, lr}
 80086c2:	b08a      	sub	sp, #40	@ 0x28
 80086c4:	af00      	add	r7, sp, #0
 80086c6:	6078      	str	r0, [r7, #4]
    if(Instance == 1U)
 80086c8:	687b      	ldr	r3, [r7, #4]
 80086ca:	2b01      	cmp	r3, #1
 80086cc:	d168      	bne.n	80087a0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe0>
 80086ce:	4b38      	ldr	r3, [pc, #224]	@ (80087b0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 80086d0:	617b      	str	r3, [r7, #20]
 80086d2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80086d6:	613b      	str	r3, [r7, #16]
    if ( dsize > 0 ) { 
 80086d8:	693b      	ldr	r3, [r7, #16]
 80086da:	2b00      	cmp	r3, #0
 80086dc:	dd1d      	ble.n	800871a <BSP_AUDIO_IN_HalfTransfer_CallBack+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 80086de:	697b      	ldr	r3, [r7, #20]
 80086e0:	f003 021f 	and.w	r2, r3, #31
 80086e4:	693b      	ldr	r3, [r7, #16]
 80086e6:	4413      	add	r3, r2
 80086e8:	60fb      	str	r3, [r7, #12]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 80086ea:	697b      	ldr	r3, [r7, #20]
 80086ec:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("dsb 0xF":::"memory");
 80086ee:	f3bf 8f4f 	dsb	sy
}
 80086f2:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 80086f4:	4a2f      	ldr	r2, [pc, #188]	@ (80087b4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 80086f6:	68bb      	ldr	r3, [r7, #8]
 80086f8:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 80086fc:	68bb      	ldr	r3, [r7, #8]
 80086fe:	3320      	adds	r3, #32
 8008700:	60bb      	str	r3, [r7, #8]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	3b20      	subs	r3, #32
 8008706:	60fb      	str	r3, [r7, #12]
      } while ( op_size > 0 );
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	2b00      	cmp	r3, #0
 800870c:	dcf2      	bgt.n	80086f4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800870e:	f3bf 8f4f 	dsb	sy
}
 8008712:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8008714:	f3bf 8f6f 	isb	sy
}
 8008718:	bf00      	nop
}
 800871a:	bf00      	nop
  {
    /* Invalidate Data Cache to get the updated content of the SRAM*/
    SCB_InvalidateDCache_by_Addr((uint32_t *)&recordPDMBuf[0], AUDIO_IN_PDM_BUFFER_SIZE*2);

    BSP_AUDIO_IN_PDMToPCM(Instance, (uint16_t*)&recordPDMBuf[0], &RecPlayback[playbackPtr]);
 800871c:	4b26      	ldr	r3, [pc, #152]	@ (80087b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	005b      	lsls	r3, r3, #1
 8008722:	4a26      	ldr	r2, [pc, #152]	@ (80087bc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 8008724:	4413      	add	r3, r2
 8008726:	461a      	mov	r2, r3
 8008728:	4921      	ldr	r1, [pc, #132]	@ (80087b0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf0>)
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f004 fa92 	bl	800cc54 <BSP_AUDIO_IN_PDMToPCM>

    /* Clean Data Cache to update the content of the SRAM */
    SCB_CleanDCache_by_Addr((uint32_t*)&RecPlayback[playbackPtr], AUDIO_IN_PDM_BUFFER_SIZE/4);
 8008730:	4b21      	ldr	r3, [pc, #132]	@ (80087b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8008732:	681b      	ldr	r3, [r3, #0]
 8008734:	005b      	lsls	r3, r3, #1
 8008736:	4a21      	ldr	r2, [pc, #132]	@ (80087bc <BSP_AUDIO_IN_HalfTransfer_CallBack+0xfc>)
 8008738:	4413      	add	r3, r2
 800873a:	627b      	str	r3, [r7, #36]	@ 0x24
 800873c:	2340      	movs	r3, #64	@ 0x40
 800873e:	623b      	str	r3, [r7, #32]
    if ( dsize > 0 ) { 
 8008740:	6a3b      	ldr	r3, [r7, #32]
 8008742:	2b00      	cmp	r3, #0
 8008744:	dd1d      	ble.n	8008782 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xc2>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8008746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008748:	f003 021f 	and.w	r2, r3, #31
 800874c:	6a3b      	ldr	r3, [r7, #32]
 800874e:	4413      	add	r3, r2
 8008750:	61fb      	str	r3, [r7, #28]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8008752:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008754:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dsb 0xF":::"memory");
 8008756:	f3bf 8f4f 	dsb	sy
}
 800875a:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800875c:	4a15      	ldr	r2, [pc, #84]	@ (80087b4 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf4>)
 800875e:	69bb      	ldr	r3, [r7, #24]
 8008760:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8008764:	69bb      	ldr	r3, [r7, #24]
 8008766:	3320      	adds	r3, #32
 8008768:	61bb      	str	r3, [r7, #24]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800876a:	69fb      	ldr	r3, [r7, #28]
 800876c:	3b20      	subs	r3, #32
 800876e:	61fb      	str	r3, [r7, #28]
      } while ( op_size > 0 );
 8008770:	69fb      	ldr	r3, [r7, #28]
 8008772:	2b00      	cmp	r3, #0
 8008774:	dcf2      	bgt.n	800875c <BSP_AUDIO_IN_HalfTransfer_CallBack+0x9c>
  __ASM volatile ("dsb 0xF":::"memory");
 8008776:	f3bf 8f4f 	dsb	sy
}
 800877a:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800877c:	f3bf 8f6f 	isb	sy
}
 8008780:	bf00      	nop
}
 8008782:	bf00      	nop

    playbackPtr += AUDIO_IN_PDM_BUFFER_SIZE/4/2;
 8008784:	4b0c      	ldr	r3, [pc, #48]	@ (80087b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	3320      	adds	r3, #32
 800878a:	4a0b      	ldr	r2, [pc, #44]	@ (80087b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 800878c:	6013      	str	r3, [r2, #0]
    if(playbackPtr >= RECORD_BUFFER_SIZE)
 800878e:	4b0a      	ldr	r3, [pc, #40]	@ (80087b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 8008790:	681b      	ldr	r3, [r3, #0]
 8008792:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008796:	d306      	bcc.n	80087a6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    {
      playbackPtr = 0;
 8008798:	4b07      	ldr	r3, [pc, #28]	@ (80087b8 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xf8>)
 800879a:	2200      	movs	r2, #0
 800879c:	601a      	str	r2, [r3, #0]
  else
  {
    AudioBufferOffset = BUFFER_OFFSET_HALF;
  }

}
 800879e:	e002      	b.n	80087a6 <BSP_AUDIO_IN_HalfTransfer_CallBack+0xe6>
    AudioBufferOffset = BUFFER_OFFSET_HALF;
 80087a0:	4b07      	ldr	r3, [pc, #28]	@ (80087c0 <BSP_AUDIO_IN_HalfTransfer_CallBack+0x100>)
 80087a2:	2201      	movs	r2, #1
 80087a4:	601a      	str	r2, [r3, #0]
}
 80087a6:	bf00      	nop
 80087a8:	3728      	adds	r7, #40	@ 0x28
 80087aa:	46bd      	mov	sp, r7
 80087ac:	bd80      	pop	{r7, pc}
 80087ae:	bf00      	nop
 80087b0:	38000000 	.word	0x38000000
 80087b4:	e000ed00 	.word	0xe000ed00
 80087b8:	24005590 	.word	0x24005590
 80087bc:	24001560 	.word	0x24001560
 80087c0:	24005594 	.word	0x24005594

080087c4 <BSP_AUDIO_IN_Error_CallBack>:
  * @brief  Audio IN Error callback function
  * @param  None
  * @retval None
  */
void BSP_AUDIO_IN_Error_CallBack(uint32_t Instance)
{
 80087c4:	b580      	push	{r7, lr}
 80087c6:	b082      	sub	sp, #8
 80087c8:	af00      	add	r7, sp, #0
 80087ca:	6078      	str	r0, [r7, #4]
  /* Stop the program with an infinite loop */
  Error_Handler();
 80087cc:	f001 f80e 	bl	80097ec <Error_Handler>
}
 80087d0:	bf00      	nop
 80087d2:	3708      	adds	r7, #8
 80087d4:	46bd      	mov	sp, r7
 80087d6:	bd80      	pop	{r7, pc}

080087d8 <Camera_demo>:
  * @brief  Camera demo
  * @param  None
  * @retval None
  */
void Camera_demo (void)
{
 80087d8:	b580      	push	{r7, lr}
 80087da:	b082      	sub	sp, #8
 80087dc:	af00      	add	r7, sp, #0
  uint32_t exit = 0;
 80087de:	2300      	movs	r3, #0
 80087e0:	603b      	str	r3, [r7, #0]
  uint32_t camera_status = BSP_ERROR_NONE;
 80087e2:	2300      	movs	r3, #0
 80087e4:	607b      	str	r3, [r7, #4]
  BSP_LCD_GetXSize(0,&xsize);
 80087e6:	49b1      	ldr	r1, [pc, #708]	@ (8008aac <Camera_demo+0x2d4>)
 80087e8:	2000      	movs	r0, #0
 80087ea:	f006 fda5 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0,&ysize);
 80087ee:	49b0      	ldr	r1, [pc, #704]	@ (8008ab0 <Camera_demo+0x2d8>)
 80087f0:	2000      	movs	r0, #0
 80087f2:	f006 fdc9 	bl	800f388 <BSP_LCD_GetYSize>

  Camera_SetHint();
 80087f6:	f000 f985 	bl	8008b04 <Camera_SetHint>

  /*## Camera Initialization and start capture ############################*/

  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 80087fa:	48ae      	ldr	r0, [pc, #696]	@ (8008ab4 <Camera_demo+0x2dc>)
 80087fc:	f019 ff40 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8008800:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008804:	f019 ff28 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"Wait for camera initialization...", CENTER_MODE);
 8008808:	4ba9      	ldr	r3, [pc, #676]	@ (8008ab0 <Camera_demo+0x2d8>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f1a3 011e 	sub.w	r1, r3, #30
 8008810:	2301      	movs	r3, #1
 8008812:	4aa9      	ldr	r2, [pc, #676]	@ (8008ab8 <Camera_demo+0x2e0>)
 8008814:	2000      	movs	r0, #0
 8008816:	f01a f873 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  CameraChangeResolutionAsked = 1;
 800881a:	4ba8      	ldr	r3, [pc, #672]	@ (8008abc <Camera_demo+0x2e4>)
 800881c:	2201      	movs	r2, #1
 800881e:	601a      	str	r2, [r3, #0]
  /* Infinite loop */
  while (exit == 0)
 8008820:	e13c      	b.n	8008a9c <Camera_demo+0x2c4>
  {
    if (CameraChangeResolutionAsked)  /* A camera change resolution has been asked */
 8008822:	4ba6      	ldr	r3, [pc, #664]	@ (8008abc <Camera_demo+0x2e4>)
 8008824:	681b      	ldr	r3, [r3, #0]
 8008826:	2b00      	cmp	r3, #0
 8008828:	f000 8098 	beq.w	800895c <Camera_demo+0x184>
    {
      CameraChangeResolutionAsked = 0;
 800882c:	4ba3      	ldr	r3, [pc, #652]	@ (8008abc <Camera_demo+0x2e4>)
 800882e:	2200      	movs	r2, #0
 8008830:	601a      	str	r2, [r3, #0]

      UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8008832:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008836:	f019 ff23 	bl	8022680 <UTIL_LCD_SetBackColor>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 800883a:	489e      	ldr	r0, [pc, #632]	@ (8008ab4 <Camera_demo+0x2dc>)
 800883c:	f019 ff0c 	bl	8022658 <UTIL_LCD_SetTextColor>

      switch (CameraResolution[index_resolution])
 8008840:	4b9f      	ldr	r3, [pc, #636]	@ (8008ac0 <Camera_demo+0x2e8>)
 8008842:	681b      	ldr	r3, [r3, #0]
 8008844:	4a9f      	ldr	r2, [pc, #636]	@ (8008ac4 <Camera_demo+0x2ec>)
 8008846:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800884a:	2b03      	cmp	r3, #3
 800884c:	d856      	bhi.n	80088fc <Camera_demo+0x124>
 800884e:	a201      	add	r2, pc, #4	@ (adr r2, 8008854 <Camera_demo+0x7c>)
 8008850:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008854:	08008865 	.word	0x08008865
 8008858:	0800888b 	.word	0x0800888b
 800885c:	080088b1 	.word	0x080088b1
 8008860:	080088d7 	.word	0x080088d7
      {
        case CAMERA_R160x120:
          /* Initialize the Camera */
          camera_status = BSP_CAMERA_Init(0,CameraResolution[0],CAMERA_PF_RGB565);
 8008864:	4b97      	ldr	r3, [pc, #604]	@ (8008ac4 <Camera_demo+0x2ec>)
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	2200      	movs	r2, #0
 800886a:	4619      	mov	r1, r3
 800886c:	2000      	movs	r0, #0
 800886e:	f005 fb53 	bl	800df18 <BSP_CAMERA_Init>
 8008872:	4603      	mov	r3, r0
 8008874:	607b      	str	r3, [r7, #4]
          UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"       QQVGA camera stream       ", CENTER_MODE);
 8008876:	4b8e      	ldr	r3, [pc, #568]	@ (8008ab0 <Camera_demo+0x2d8>)
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f1a3 011e 	sub.w	r1, r3, #30
 800887e:	2301      	movs	r3, #1
 8008880:	4a91      	ldr	r2, [pc, #580]	@ (8008ac8 <Camera_demo+0x2f0>)
 8008882:	2000      	movs	r0, #0
 8008884:	f01a f83c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          break;
 8008888:	e039      	b.n	80088fe <Camera_demo+0x126>

        case CAMERA_R320x240:
          /* Initialize the Camera */
          camera_status = BSP_CAMERA_Init(0,CameraResolution[1],CAMERA_PF_RGB565);
 800888a:	4b8e      	ldr	r3, [pc, #568]	@ (8008ac4 <Camera_demo+0x2ec>)
 800888c:	685b      	ldr	r3, [r3, #4]
 800888e:	2200      	movs	r2, #0
 8008890:	4619      	mov	r1, r3
 8008892:	2000      	movs	r0, #0
 8008894:	f005 fb40 	bl	800df18 <BSP_CAMERA_Init>
 8008898:	4603      	mov	r3, r0
 800889a:	607b      	str	r3, [r7, #4]
          UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"       QVGA camera stream        ", CENTER_MODE);
 800889c:	4b84      	ldr	r3, [pc, #528]	@ (8008ab0 <Camera_demo+0x2d8>)
 800889e:	681b      	ldr	r3, [r3, #0]
 80088a0:	f1a3 011e 	sub.w	r1, r3, #30
 80088a4:	2301      	movs	r3, #1
 80088a6:	4a89      	ldr	r2, [pc, #548]	@ (8008acc <Camera_demo+0x2f4>)
 80088a8:	2000      	movs	r0, #0
 80088aa:	f01a f829 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          break;
 80088ae:	e026      	b.n	80088fe <Camera_demo+0x126>

        case CAMERA_R480x272:

          /* Initialize the Camera */
          camera_status = BSP_CAMERA_Init(0,CameraResolution[2],CAMERA_PF_RGB565);
 80088b0:	4b84      	ldr	r3, [pc, #528]	@ (8008ac4 <Camera_demo+0x2ec>)
 80088b2:	689b      	ldr	r3, [r3, #8]
 80088b4:	2200      	movs	r2, #0
 80088b6:	4619      	mov	r1, r3
 80088b8:	2000      	movs	r0, #0
 80088ba:	f005 fb2d 	bl	800df18 <BSP_CAMERA_Init>
 80088be:	4603      	mov	r3, r0
 80088c0:	607b      	str	r3, [r7, #4]
          UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"      480x272 camera stream      ", CENTER_MODE);
 80088c2:	4b7b      	ldr	r3, [pc, #492]	@ (8008ab0 <Camera_demo+0x2d8>)
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	f1a3 011e 	sub.w	r1, r3, #30
 80088ca:	2301      	movs	r3, #1
 80088cc:	4a80      	ldr	r2, [pc, #512]	@ (8008ad0 <Camera_demo+0x2f8>)
 80088ce:	2000      	movs	r0, #0
 80088d0:	f01a f816 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          break;
 80088d4:	e013      	b.n	80088fe <Camera_demo+0x126>

        case CAMERA_R640x480:
          /* Initialize the Camera */
          camera_status = BSP_CAMERA_Init(0,CameraResolution[3],CAMERA_PF_RGB565);
 80088d6:	4b7b      	ldr	r3, [pc, #492]	@ (8008ac4 <Camera_demo+0x2ec>)
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	2200      	movs	r2, #0
 80088dc:	4619      	mov	r1, r3
 80088de:	2000      	movs	r0, #0
 80088e0:	f005 fb1a 	bl	800df18 <BSP_CAMERA_Init>
 80088e4:	4603      	mov	r3, r0
 80088e6:	607b      	str	r3, [r7, #4]
          UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"        VGA camera stream        ", CENTER_MODE);
 80088e8:	4b71      	ldr	r3, [pc, #452]	@ (8008ab0 <Camera_demo+0x2d8>)
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f1a3 011e 	sub.w	r1, r3, #30
 80088f0:	2301      	movs	r3, #1
 80088f2:	4a78      	ldr	r2, [pc, #480]	@ (8008ad4 <Camera_demo+0x2fc>)
 80088f4:	2000      	movs	r0, #0
 80088f6:	f01a f803 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          break;
 80088fa:	e000      	b.n	80088fe <Camera_demo+0x126>

        default :
          break;
 80088fc:	bf00      	nop
      }

      if (camera_status != BSP_ERROR_NONE)
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	2b00      	cmp	r3, #0
 8008902:	d00d      	beq.n	8008920 <Camera_demo+0x148>
      {
        UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS - 15, (uint8_t *)"        CAMERA INIT ERROR        ", CENTER_MODE);
 8008904:	4b6a      	ldr	r3, [pc, #424]	@ (8008ab0 <Camera_demo+0x2d8>)
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f1a3 012d 	sub.w	r1, r3, #45	@ 0x2d
 800890c:	2301      	movs	r3, #1
 800890e:	4a72      	ldr	r2, [pc, #456]	@ (8008ad8 <Camera_demo+0x300>)
 8008910:	2000      	movs	r0, #0
 8008912:	f019 fff5 	bl	8022900 <UTIL_LCD_DisplayStringAt>
        HAL_Delay(2000);
 8008916:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 800891a:	f009 fc3b 	bl	8012194 <HAL_Delay>
        break ;
 800891e:	e0c1      	b.n	8008aa4 <Camera_demo+0x2cc>
      }

      /* Start / Restart camera stream */
      BSP_CAMERA_Start(0, (uint8_t *)CAMERA_FRAME_BUFFER, CAMERA_MODE_CONTINUOUS);
 8008920:	2200      	movs	r2, #0
 8008922:	496e      	ldr	r1, [pc, #440]	@ (8008adc <Camera_demo+0x304>)
 8008924:	2000      	movs	r0, #0
 8008926:	f005 fc31 	bl	800e18c <BSP_CAMERA_Start>

    }
    while( brightness < CAMERA_BRIGHTNESS_MAX)
 800892a:	e017      	b.n	800895c <Camera_demo+0x184>
    {
      brightness++;
 800892c:	4b6c      	ldr	r3, [pc, #432]	@ (8008ae0 <Camera_demo+0x308>)
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	3301      	adds	r3, #1
 8008932:	4a6b      	ldr	r2, [pc, #428]	@ (8008ae0 <Camera_demo+0x308>)
 8008934:	6013      	str	r3, [r2, #0]
      BSP_CAMERA_SetBrightness(0,brightness);
 8008936:	4b6a      	ldr	r3, [pc, #424]	@ (8008ae0 <Camera_demo+0x308>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	4619      	mov	r1, r3
 800893c:	2000      	movs	r0, #0
 800893e:	f005 fcb9 	bl	800e2b4 <BSP_CAMERA_SetBrightness>
      UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"        Brightness change        ", CENTER_MODE);
 8008942:	4b5b      	ldr	r3, [pc, #364]	@ (8008ab0 <Camera_demo+0x2d8>)
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	f1a3 011e 	sub.w	r1, r3, #30
 800894a:	2301      	movs	r3, #1
 800894c:	4a65      	ldr	r2, [pc, #404]	@ (8008ae4 <Camera_demo+0x30c>)
 800894e:	2000      	movs	r0, #0
 8008950:	f019 ffd6 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      HAL_Delay(500);
 8008954:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008958:	f009 fc1c 	bl	8012194 <HAL_Delay>
    while( brightness < CAMERA_BRIGHTNESS_MAX)
 800895c:	4b60      	ldr	r3, [pc, #384]	@ (8008ae0 <Camera_demo+0x308>)
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	2b03      	cmp	r3, #3
 8008962:	dde3      	ble.n	800892c <Camera_demo+0x154>
    }
     while( contrast < CAMERA_CONTRAST_MAX)
 8008964:	e017      	b.n	8008996 <Camera_demo+0x1be>
    {
      contrast++;
 8008966:	4b60      	ldr	r3, [pc, #384]	@ (8008ae8 <Camera_demo+0x310>)
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	3301      	adds	r3, #1
 800896c:	4a5e      	ldr	r2, [pc, #376]	@ (8008ae8 <Camera_demo+0x310>)
 800896e:	6013      	str	r3, [r2, #0]
      BSP_CAMERA_SetContrast(0,contrast);
 8008970:	4b5d      	ldr	r3, [pc, #372]	@ (8008ae8 <Camera_demo+0x310>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4619      	mov	r1, r3
 8008976:	2000      	movs	r0, #0
 8008978:	f005 fcde 	bl	800e338 <BSP_CAMERA_SetContrast>
      UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"          Contrast change        ", CENTER_MODE);
 800897c:	4b4c      	ldr	r3, [pc, #304]	@ (8008ab0 <Camera_demo+0x2d8>)
 800897e:	681b      	ldr	r3, [r3, #0]
 8008980:	f1a3 011e 	sub.w	r1, r3, #30
 8008984:	2301      	movs	r3, #1
 8008986:	4a59      	ldr	r2, [pc, #356]	@ (8008aec <Camera_demo+0x314>)
 8008988:	2000      	movs	r0, #0
 800898a:	f019 ffb9 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      HAL_Delay(500);
 800898e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8008992:	f009 fbff 	bl	8012194 <HAL_Delay>
     while( contrast < CAMERA_CONTRAST_MAX)
 8008996:	4b54      	ldr	r3, [pc, #336]	@ (8008ae8 <Camera_demo+0x310>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	2b03      	cmp	r3, #3
 800899c:	dde3      	ble.n	8008966 <Camera_demo+0x18e>
    }
    BSP_CAMERA_EnableNightMode(0);
 800899e:	2000      	movs	r0, #0
 80089a0:	f005 fd48 	bl	800e434 <BSP_CAMERA_EnableNightMode>
    UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"          Night Mode ON        ", CENTER_MODE);
 80089a4:	4b42      	ldr	r3, [pc, #264]	@ (8008ab0 <Camera_demo+0x2d8>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	f1a3 011e 	sub.w	r1, r3, #30
 80089ac:	2301      	movs	r3, #1
 80089ae:	4a50      	ldr	r2, [pc, #320]	@ (8008af0 <Camera_demo+0x318>)
 80089b0:	2000      	movs	r0, #0
 80089b2:	f019 ffa5 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    HAL_Delay(1000);
 80089b6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089ba:	f009 fbeb 	bl	8012194 <HAL_Delay>
    BSP_CAMERA_DisableNightMode(0);
 80089be:	2000      	movs	r0, #0
 80089c0:	f005 fd68 	bl	800e494 <BSP_CAMERA_DisableNightMode>
    UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"          Night Mode OFF        ", CENTER_MODE);
 80089c4:	4b3a      	ldr	r3, [pc, #232]	@ (8008ab0 <Camera_demo+0x2d8>)
 80089c6:	681b      	ldr	r3, [r3, #0]
 80089c8:	f1a3 011e 	sub.w	r1, r3, #30
 80089cc:	2301      	movs	r3, #1
 80089ce:	4a49      	ldr	r2, [pc, #292]	@ (8008af4 <Camera_demo+0x31c>)
 80089d0:	2000      	movs	r0, #0
 80089d2:	f019 ff95 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    HAL_Delay(1000);
 80089d6:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089da:	f009 fbdb 	bl	8012194 <HAL_Delay>
    BSP_CAMERA_SetMirrorFlip(0,CAMERA_MIRRORFLIP_NONE);
 80089de:	2100      	movs	r1, #0
 80089e0:	2000      	movs	r0, #0
 80089e2:	f005 fceb 	bl	800e3bc <BSP_CAMERA_SetMirrorFlip>
    UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"          MirrorFlip None        ", CENTER_MODE);
 80089e6:	4b32      	ldr	r3, [pc, #200]	@ (8008ab0 <Camera_demo+0x2d8>)
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	f1a3 011e 	sub.w	r1, r3, #30
 80089ee:	2301      	movs	r3, #1
 80089f0:	4a41      	ldr	r2, [pc, #260]	@ (8008af8 <Camera_demo+0x320>)
 80089f2:	2000      	movs	r0, #0
 80089f4:	f019 ff84 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    HAL_Delay(1000);
 80089f8:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80089fc:	f009 fbca 	bl	8012194 <HAL_Delay>
    BSP_CAMERA_SetMirrorFlip(0,CAMERA_MIRRORFLIP_FLIP);
 8008a00:	2101      	movs	r1, #1
 8008a02:	2000      	movs	r0, #0
 8008a04:	f005 fcda 	bl	800e3bc <BSP_CAMERA_SetMirrorFlip>
    UTIL_LCD_DisplayStringAt(0, ysize - CAMERA_STATUS_TEXT_POS, (uint8_t *)"          MIRRORFLIP FLIP        ", CENTER_MODE);
 8008a08:	4b29      	ldr	r3, [pc, #164]	@ (8008ab0 <Camera_demo+0x2d8>)
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	f1a3 011e 	sub.w	r1, r3, #30
 8008a10:	2301      	movs	r3, #1
 8008a12:	4a3a      	ldr	r2, [pc, #232]	@ (8008afc <Camera_demo+0x324>)
 8008a14:	2000      	movs	r0, #0
 8008a16:	f019 ff73 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    HAL_Delay(1000);
 8008a1a:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8008a1e:	f009 fbb9 	bl	8012194 <HAL_Delay>
    BSP_LED_Toggle(LED4);
 8008a22:	2003      	movs	r0, #3
 8008a24:	f002 fe7e 	bl	800b724 <BSP_LED_Toggle>

    /* Insert 100 ms delay */
    HAL_Delay(100);
 8008a28:	2064      	movs	r0, #100	@ 0x64
 8008a2a:	f009 fbb3 	bl	8012194 <HAL_Delay>

    BSP_LED_Toggle(LED2);
 8008a2e:	2001      	movs	r0, #1
 8008a30:	f002 fe78 	bl	800b724 <BSP_LED_Toggle>

    /* Insert 100 ms delay */
    HAL_Delay(100);
 8008a34:	2064      	movs	r0, #100	@ 0x64
 8008a36:	f009 fbad 	bl	8012194 <HAL_Delay>
    if (CheckForUserInput() > 0)
 8008a3a:	f000 feb7 	bl	80097ac <CheckForUserInput>
 8008a3e:	4603      	mov	r3, r0
 8008a40:	2b00      	cmp	r3, #0
 8008a42:	d02b      	beq.n	8008a9c <Camera_demo+0x2c4>
    {
      if (index_resolution < 3)
 8008a44:	4b1e      	ldr	r3, [pc, #120]	@ (8008ac0 <Camera_demo+0x2e8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	2b02      	cmp	r3, #2
 8008a4a:	d81b      	bhi.n	8008a84 <Camera_demo+0x2ac>
      {
        index_resolution++;
 8008a4c:	4b1c      	ldr	r3, [pc, #112]	@ (8008ac0 <Camera_demo+0x2e8>)
 8008a4e:	681b      	ldr	r3, [r3, #0]
 8008a50:	3301      	adds	r3, #1
 8008a52:	4a1b      	ldr	r2, [pc, #108]	@ (8008ac0 <Camera_demo+0x2e8>)
 8008a54:	6013      	str	r3, [r2, #0]
        /* Switch to higher resolution */
        CameraChangeResolutionAsked = 1;
 8008a56:	4b19      	ldr	r3, [pc, #100]	@ (8008abc <Camera_demo+0x2e4>)
 8008a58:	2201      	movs	r2, #1
 8008a5a:	601a      	str	r2, [r3, #0]
        ButtonState=0;
 8008a5c:	4b28      	ldr	r3, [pc, #160]	@ (8008b00 <Camera_demo+0x328>)
 8008a5e:	2200      	movs	r2, #0
 8008a60:	601a      	str	r2, [r3, #0]
        BSP_CAMERA_DeInit(0);
 8008a62:	2000      	movs	r0, #0
 8008a64:	f005 fb04 	bl	800e070 <BSP_CAMERA_DeInit>
        brightness =CAMERA_BRIGHTNESS_MIN;
 8008a68:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae0 <Camera_demo+0x308>)
 8008a6a:	f06f 0203 	mvn.w	r2, #3
 8008a6e:	601a      	str	r2, [r3, #0]
        contrast = CAMERA_CONTRAST_MIN;
 8008a70:	4b1d      	ldr	r3, [pc, #116]	@ (8008ae8 <Camera_demo+0x310>)
 8008a72:	f06f 0203 	mvn.w	r2, #3
 8008a76:	601a      	str	r2, [r3, #0]
        Camera_SetHint();
 8008a78:	f000 f844 	bl	8008b04 <Camera_SetHint>
        /* Insert 10 ms delay */
        HAL_Delay(100);
 8008a7c:	2064      	movs	r0, #100	@ 0x64
 8008a7e:	f009 fb89 	bl	8012194 <HAL_Delay>
 8008a82:	e00b      	b.n	8008a9c <Camera_demo+0x2c4>
      }
      else
      {

        BSP_CAMERA_DeInit(0);
 8008a84:	2000      	movs	r0, #0
 8008a86:	f005 faf3 	bl	800e070 <BSP_CAMERA_DeInit>
        BSP_LED_Off(LED2);
 8008a8a:	2001      	movs	r0, #1
 8008a8c:	f002 fe2c 	bl	800b6e8 <BSP_LED_Off>
        BSP_LED_Off(LED4);
 8008a90:	2003      	movs	r0, #3
 8008a92:	f002 fe29 	bl	800b6e8 <BSP_LED_Off>
        exit = 1;
 8008a96:	2301      	movs	r3, #1
 8008a98:	603b      	str	r3, [r7, #0]
        return;
 8008a9a:	e003      	b.n	8008aa4 <Camera_demo+0x2cc>
  while (exit == 0)
 8008a9c:	683b      	ldr	r3, [r7, #0]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	f43f aebf 	beq.w	8008822 <Camera_demo+0x4a>
      }
    }
  }
  /* End of camera demo */
}
 8008aa4:	3708      	adds	r7, #8
 8008aa6:	46bd      	mov	sp, r7
 8008aa8:	bd80      	pop	{r7, pc}
 8008aaa:	bf00      	nop
 8008aac:	2400559c 	.word	0x2400559c
 8008ab0:	240055a0 	.word	0x240055a0
 8008ab4:	ff0000ff 	.word	0xff0000ff
 8008ab8:	0802684c 	.word	0x0802684c
 8008abc:	24005598 	.word	0x24005598
 8008ac0:	240055a4 	.word	0x240055a4
 8008ac4:	24000624 	.word	0x24000624
 8008ac8:	08026870 	.word	0x08026870
 8008acc:	08026894 	.word	0x08026894
 8008ad0:	080268b8 	.word	0x080268b8
 8008ad4:	080268dc 	.word	0x080268dc
 8008ad8:	08026900 	.word	0x08026900
 8008adc:	d0600000 	.word	0xd0600000
 8008ae0:	2400061c 	.word	0x2400061c
 8008ae4:	08026924 	.word	0x08026924
 8008ae8:	24000620 	.word	0x24000620
 8008aec:	08026948 	.word	0x08026948
 8008af0:	0802696c 	.word	0x0802696c
 8008af4:	0802698c 	.word	0x0802698c
 8008af8:	080269b0 	.word	0x080269b0
 8008afc:	080269d4 	.word	0x080269d4
 8008b00:	240055c0 	.word	0x240055c0

08008b04 <Camera_SetHint>:
  * @brief  Display Camera demo hint
  * @param  None
  * @retval None
  */
static void Camera_SetHint(void)
{
 8008b04:	b580      	push	{r7, lr}
 8008b06:	b082      	sub	sp, #8
 8008b08:	af02      	add	r7, sp, #8
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8008b0a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b0e:	f019 feab 	bl	8022868 <UTIL_LCD_Clear>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8008b12:	4821      	ldr	r0, [pc, #132]	@ (8008b98 <Camera_SetHint+0x94>)
 8008b14:	f019 fda0 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(0, 0, xsize, 80,UTIL_LCD_COLOR_BLUE);
 8008b18:	4b20      	ldr	r3, [pc, #128]	@ (8008b9c <Camera_SetHint+0x98>)
 8008b1a:	681a      	ldr	r2, [r3, #0]
 8008b1c:	4b1e      	ldr	r3, [pc, #120]	@ (8008b98 <Camera_SetHint+0x94>)
 8008b1e:	9300      	str	r3, [sp, #0]
 8008b20:	2350      	movs	r3, #80	@ 0x50
 8008b22:	2100      	movs	r1, #0
 8008b24:	2000      	movs	r0, #0
 8008b26:	f01a fac5 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8008b2a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008b2e:	f019 fd93 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8008b32:	4819      	ldr	r0, [pc, #100]	@ (8008b98 <Camera_SetHint+0x94>)
 8008b34:	f019 fda4 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8008b38:	4819      	ldr	r0, [pc, #100]	@ (8008ba0 <Camera_SetHint+0x9c>)
 8008b3a:	f019 fdb5 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"CAMERA EXAMPLE", CENTER_MODE);
 8008b3e:	2301      	movs	r3, #1
 8008b40:	4a18      	ldr	r2, [pc, #96]	@ (8008ba4 <Camera_SetHint+0xa0>)
 8008b42:	2100      	movs	r1, #0
 8008b44:	2000      	movs	r0, #0
 8008b46:	f019 fedb 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font16);
 8008b4a:	4817      	ldr	r0, [pc, #92]	@ (8008ba8 <Camera_SetHint+0xa4>)
 8008b4c:	f019 fdac 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"     Press  Wakeup button for next resolution     ", CENTER_MODE);
 8008b50:	2301      	movs	r3, #1
 8008b52:	4a16      	ldr	r2, [pc, #88]	@ (8008bac <Camera_SetHint+0xa8>)
 8008b54:	211e      	movs	r1, #30
 8008b56:	2000      	movs	r0, #0
 8008b58:	f019 fed2 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DrawRect(10, 90, xsize - 20, ysize - 100,UTIL_LCD_COLOR_BLUE);
 8008b5c:	4b0f      	ldr	r3, [pc, #60]	@ (8008b9c <Camera_SetHint+0x98>)
 8008b5e:	681b      	ldr	r3, [r3, #0]
 8008b60:	f1a3 0214 	sub.w	r2, r3, #20
 8008b64:	4b12      	ldr	r3, [pc, #72]	@ (8008bb0 <Camera_SetHint+0xac>)
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	3b64      	subs	r3, #100	@ 0x64
 8008b6a:	490b      	ldr	r1, [pc, #44]	@ (8008b98 <Camera_SetHint+0x94>)
 8008b6c:	9100      	str	r1, [sp, #0]
 8008b6e:	215a      	movs	r1, #90	@ 0x5a
 8008b70:	200a      	movs	r0, #10
 8008b72:	f01a f82f 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, xsize - 22, ysize - 102,UTIL_LCD_COLOR_BLUE);
 8008b76:	4b09      	ldr	r3, [pc, #36]	@ (8008b9c <Camera_SetHint+0x98>)
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	f1a3 0216 	sub.w	r2, r3, #22
 8008b7e:	4b0c      	ldr	r3, [pc, #48]	@ (8008bb0 <Camera_SetHint+0xac>)
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3b66      	subs	r3, #102	@ 0x66
 8008b84:	4904      	ldr	r1, [pc, #16]	@ (8008b98 <Camera_SetHint+0x94>)
 8008b86:	9100      	str	r1, [sp, #0]
 8008b88:	215b      	movs	r1, #91	@ 0x5b
 8008b8a:	200b      	movs	r0, #11
 8008b8c:	f01a f822 	bl	8022bd4 <UTIL_LCD_DrawRect>
}
 8008b90:	bf00      	nop
 8008b92:	46bd      	mov	sp, r7
 8008b94:	bd80      	pop	{r7, pc}
 8008b96:	bf00      	nop
 8008b98:	ff0000ff 	.word	0xff0000ff
 8008b9c:	2400559c 	.word	0x2400559c
 8008ba0:	24000a44 	.word	0x24000a44
 8008ba4:	080269f8 	.word	0x080269f8
 8008ba8:	24000a54 	.word	0x24000a54
 8008bac:	08026a08 	.word	0x08026a08
 8008bb0:	240055a0 	.word	0x240055a0

08008bb4 <BSP_CAMERA_FrameEventCallback>:

/**
  * @brief  Camera Frame Event callback.
  */
void BSP_CAMERA_FrameEventCallback(uint32_t Instance)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b082      	sub	sp, #8
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	6078      	str	r0, [r7, #4]
  BSP_CAMERA_Suspend(0);
 8008bbc:	2000      	movs	r0, #0
 8008bbe:	f005 fb3d 	bl	800e23c <BSP_CAMERA_Suspend>

  /* Convert captured frame to ARGB8888 and copy it to LCD FRAME BUFFER */
  LCD_LL_Convert_RGB565ToARGB8888((uint32_t *)(CAMERA_FRAME_BUFFER), (uint32_t *)(LCD_LAYER_0_ADDRESS), CameraResX[index_resolution], CameraResY[index_resolution]);
 8008bc2:	4b0c      	ldr	r3, [pc, #48]	@ (8008bf4 <BSP_CAMERA_FrameEventCallback+0x40>)
 8008bc4:	681b      	ldr	r3, [r3, #0]
 8008bc6:	4a0c      	ldr	r2, [pc, #48]	@ (8008bf8 <BSP_CAMERA_FrameEventCallback+0x44>)
 8008bc8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8008bcc:	b29a      	uxth	r2, r3
 8008bce:	4b09      	ldr	r3, [pc, #36]	@ (8008bf4 <BSP_CAMERA_FrameEventCallback+0x40>)
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	490a      	ldr	r1, [pc, #40]	@ (8008bfc <BSP_CAMERA_FrameEventCallback+0x48>)
 8008bd4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8008bd8:	b29b      	uxth	r3, r3
 8008bda:	f04f 4150 	mov.w	r1, #3489660928	@ 0xd0000000
 8008bde:	4808      	ldr	r0, [pc, #32]	@ (8008c00 <BSP_CAMERA_FrameEventCallback+0x4c>)
 8008be0:	f000 f810 	bl	8008c04 <LCD_LL_Convert_RGB565ToARGB8888>



  BSP_CAMERA_Resume(0);
 8008be4:	2000      	movs	r0, #0
 8008be6:	f005 fb47 	bl	800e278 <BSP_CAMERA_Resume>
}
 8008bea:	bf00      	nop
 8008bec:	3708      	adds	r7, #8
 8008bee:	46bd      	mov	sp, r7
 8008bf0:	bd80      	pop	{r7, pc}
 8008bf2:	bf00      	nop
 8008bf4:	240055a4 	.word	0x240055a4
 8008bf8:	24000634 	.word	0x24000634
 8008bfc:	24000648 	.word	0x24000648
 8008c00:	d0600000 	.word	0xd0600000

08008c04 <LCD_LL_Convert_RGB565ToARGB8888>:
  * @param  pSrc: Pointer to source buffer
  * @param  pDst: Pointer to destination buffer
  * @retval None
  */
static void LCD_LL_Convert_RGB565ToARGB8888(void *pSrc, void *pDst, uint16_t xsize, uint16_t ysize)
{
 8008c04:	b580      	push	{r7, lr}
 8008c06:	b08c      	sub	sp, #48	@ 0x30
 8008c08:	af02      	add	r7, sp, #8
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	4611      	mov	r1, r2
 8008c10:	461a      	mov	r2, r3
 8008c12:	460b      	mov	r3, r1
 8008c14:	80fb      	strh	r3, [r7, #6]
 8008c16:	4613      	mov	r3, r2
 8008c18:	80bb      	strh	r3, [r7, #4]
  uint32_t xPos, yPos, destination;
  uint32_t LcdResX,LcdResY;
  BSP_LCD_GetXSize(0, &LcdResX);
 8008c1a:	f107 0318 	add.w	r3, r7, #24
 8008c1e:	4619      	mov	r1, r3
 8008c20:	2000      	movs	r0, #0
 8008c22:	f006 fb89 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &LcdResY);
 8008c26:	f107 0314 	add.w	r3, r7, #20
 8008c2a:	4619      	mov	r1, r3
 8008c2c:	2000      	movs	r0, #0
 8008c2e:	f006 fbab 	bl	800f388 <BSP_LCD_GetYSize>
  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 8008c32:	4b29      	ldr	r3, [pc, #164]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c34:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8008c38:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = DMA2D_OUTPUT_ARGB8888;
 8008c3a:	4b27      	ldr	r3, [pc, #156]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c3c:	2200      	movs	r2, #0
 8008c3e:	609a      	str	r2, [r3, #8]
  hlcd_dma2d.Init.OutputOffset = LcdResX - xsize;
 8008c40:	69ba      	ldr	r2, [r7, #24]
 8008c42:	88fb      	ldrh	r3, [r7, #6]
 8008c44:	1ad3      	subs	r3, r2, r3
 8008c46:	4a24      	ldr	r2, [pc, #144]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c48:	60d3      	str	r3, [r2, #12]
  /* DMA2D Callbacks Configuration */
  hlcd_dma2d.XferCpltCallback  = NULL;
 8008c4a:	4b23      	ldr	r3, [pc, #140]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c4c:	2200      	movs	r2, #0
 8008c4e:	621a      	str	r2, [r3, #32]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_REPLACE_ALPHA;
 8008c50:	4b21      	ldr	r3, [pc, #132]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c52:	2201      	movs	r2, #1
 8008c54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 8008c56:	4b20      	ldr	r3, [pc, #128]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c58:	22ff      	movs	r2, #255	@ 0xff
 8008c5a:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = DMA2D_INPUT_RGB565;
 8008c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c5e:	2202      	movs	r2, #2
 8008c60:	649a      	str	r2, [r3, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 8008c62:	4b1d      	ldr	r3, [pc, #116]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c64:	2200      	movs	r2, #0
 8008c66:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 8008c68:	4b1b      	ldr	r3, [pc, #108]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c6a:	4a1c      	ldr	r2, [pc, #112]	@ (8008cdc <LCD_LL_Convert_RGB565ToARGB8888+0xd8>)
 8008c6c:	601a      	str	r2, [r3, #0]

  /* Calculate the destination transfer address */
  xPos = (LcdResX  - xsize)/2;
 8008c6e:	69ba      	ldr	r2, [r7, #24]
 8008c70:	88fb      	ldrh	r3, [r7, #6]
 8008c72:	1ad3      	subs	r3, r2, r3
 8008c74:	085b      	lsrs	r3, r3, #1
 8008c76:	627b      	str	r3, [r7, #36]	@ 0x24
  yPos = (LcdResY  - ysize)/2;
 8008c78:	697a      	ldr	r2, [r7, #20]
 8008c7a:	88bb      	ldrh	r3, [r7, #4]
 8008c7c:	1ad3      	subs	r3, r2, r3
 8008c7e:	085b      	lsrs	r3, r3, #1
 8008c80:	623b      	str	r3, [r7, #32]

  destination = (uint32_t)pDst + (yPos * LcdResX + xPos) * 4;
 8008c82:	69bb      	ldr	r3, [r7, #24]
 8008c84:	6a3a      	ldr	r2, [r7, #32]
 8008c86:	fb03 f202 	mul.w	r2, r3, r2
 8008c8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008c8c:	4413      	add	r3, r2
 8008c8e:	009a      	lsls	r2, r3, #2
 8008c90:	68bb      	ldr	r3, [r7, #8]
 8008c92:	4413      	add	r3, r2
 8008c94:	61fb      	str	r3, [r7, #28]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 8008c96:	4810      	ldr	r0, [pc, #64]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008c98:	f00d f88c 	bl	8015db4 <HAL_DMA2D_Init>
 8008c9c:	4603      	mov	r3, r0
 8008c9e:	2b00      	cmp	r3, #0
 8008ca0:	d116      	bne.n	8008cd0 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 8008ca2:	2101      	movs	r1, #1
 8008ca4:	480c      	ldr	r0, [pc, #48]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008ca6:	f00d fa07 	bl	80160b8 <HAL_DMA2D_ConfigLayer>
 8008caa:	4603      	mov	r3, r0
 8008cac:	2b00      	cmp	r3, #0
 8008cae:	d10f      	bne.n	8008cd0 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, destination, xsize, ysize) == HAL_OK)
 8008cb0:	68f9      	ldr	r1, [r7, #12]
 8008cb2:	88fa      	ldrh	r2, [r7, #6]
 8008cb4:	88bb      	ldrh	r3, [r7, #4]
 8008cb6:	9300      	str	r3, [sp, #0]
 8008cb8:	4613      	mov	r3, r2
 8008cba:	69fa      	ldr	r2, [r7, #28]
 8008cbc:	4806      	ldr	r0, [pc, #24]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008cbe:	f00d f8e7 	bl	8015e90 <HAL_DMA2D_Start>
 8008cc2:	4603      	mov	r3, r0
 8008cc4:	2b00      	cmp	r3, #0
 8008cc6:	d103      	bne.n	8008cd0 <LCD_LL_Convert_RGB565ToARGB8888+0xcc>
      {
        /* Polling For DMA transfer */
        HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 100);
 8008cc8:	2164      	movs	r1, #100	@ 0x64
 8008cca:	4803      	ldr	r0, [pc, #12]	@ (8008cd8 <LCD_LL_Convert_RGB565ToARGB8888+0xd4>)
 8008ccc:	f00d f90b 	bl	8015ee6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 8008cd0:	bf00      	nop
 8008cd2:	3728      	adds	r7, #40	@ 0x28
 8008cd4:	46bd      	mov	sp, r7
 8008cd6:	bd80      	pop	{r7, pc}
 8008cd8:	24008624 	.word	0x24008624
 8008cdc:	52001000 	.word	0x52001000

08008ce0 <Joystick_demo>:
* @brief  Joystick demo
* @param  None
* @retval None
*/
void Joystick_demo (void)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	af00      	add	r7, sp, #0
  JoyStickDemo = 1;
 8008ce4:	4b33      	ldr	r3, [pc, #204]	@ (8008db4 <Joystick_demo+0xd4>)
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	601a      	str	r2, [r3, #0]
  Joystick_SetHint();
 8008cea:	f000 f93f 	bl	8008f6c <Joystick_SetHint>
  BSP_JOY_Init(JOY1, JOY_MODE_EXTI,JOY_ALL);
 8008cee:	221f      	movs	r2, #31
 8008cf0:	2101      	movs	r1, #1
 8008cf2:	2000      	movs	r0, #0
 8008cf4:	f002 fdd6 	bl	800b8a4 <BSP_JOY_Init>

   JoyPinPressed = 0;
 8008cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8008db8 <Joystick_demo+0xd8>)
 8008cfa:	2200      	movs	r2, #0
 8008cfc:	601a      	str	r2, [r3, #0]
  while (1)
  {
          switch(JoyPinPressed)
 8008cfe:	4b2e      	ldr	r3, [pc, #184]	@ (8008db8 <Joystick_demo+0xd8>)
 8008d00:	681b      	ldr	r3, [r3, #0]
 8008d02:	3b01      	subs	r3, #1
 8008d04:	2b0f      	cmp	r3, #15
 8008d06:	d837      	bhi.n	8008d78 <Joystick_demo+0x98>
 8008d08:	a201      	add	r2, pc, #4	@ (adr r2, 8008d10 <Joystick_demo+0x30>)
 8008d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008d0e:	bf00      	nop
 8008d10:	08008d51 	.word	0x08008d51
 8008d14:	08008d59 	.word	0x08008d59
 8008d18:	08008d79 	.word	0x08008d79
 8008d1c:	08008d61 	.word	0x08008d61
 8008d20:	08008d79 	.word	0x08008d79
 8008d24:	08008d79 	.word	0x08008d79
 8008d28:	08008d79 	.word	0x08008d79
 8008d2c:	08008d69 	.word	0x08008d69
 8008d30:	08008d79 	.word	0x08008d79
 8008d34:	08008d79 	.word	0x08008d79
 8008d38:	08008d79 	.word	0x08008d79
 8008d3c:	08008d79 	.word	0x08008d79
 8008d40:	08008d79 	.word	0x08008d79
 8008d44:	08008d79 	.word	0x08008d79
 8008d48:	08008d79 	.word	0x08008d79
 8008d4c:	08008d71 	.word	0x08008d71
      {
      case 0x01U:
        Joy_State = JOY_SEL;
 8008d50:	4b1a      	ldr	r3, [pc, #104]	@ (8008dbc <Joystick_demo+0xdc>)
 8008d52:	2201      	movs	r2, #1
 8008d54:	601a      	str	r2, [r3, #0]
        break;
 8008d56:	e013      	b.n	8008d80 <Joystick_demo+0xa0>

      case 0x02U:
        Joy_State = JOY_DOWN;
 8008d58:	4b18      	ldr	r3, [pc, #96]	@ (8008dbc <Joystick_demo+0xdc>)
 8008d5a:	2202      	movs	r2, #2
 8008d5c:	601a      	str	r2, [r3, #0]
        break;
 8008d5e:	e00f      	b.n	8008d80 <Joystick_demo+0xa0>

      case 0x04U:
        Joy_State = JOY_LEFT;
 8008d60:	4b16      	ldr	r3, [pc, #88]	@ (8008dbc <Joystick_demo+0xdc>)
 8008d62:	2204      	movs	r2, #4
 8008d64:	601a      	str	r2, [r3, #0]
        break;
 8008d66:	e00b      	b.n	8008d80 <Joystick_demo+0xa0>

      case 0x08U:
        Joy_State = JOY_RIGHT;
 8008d68:	4b14      	ldr	r3, [pc, #80]	@ (8008dbc <Joystick_demo+0xdc>)
 8008d6a:	2208      	movs	r2, #8
 8008d6c:	601a      	str	r2, [r3, #0]
        break;
 8008d6e:	e007      	b.n	8008d80 <Joystick_demo+0xa0>

      case 0x10U:
        Joy_State = JOY_UP;
 8008d70:	4b12      	ldr	r3, [pc, #72]	@ (8008dbc <Joystick_demo+0xdc>)
 8008d72:	2210      	movs	r2, #16
 8008d74:	601a      	str	r2, [r3, #0]
        break;
 8008d76:	e003      	b.n	8008d80 <Joystick_demo+0xa0>
      default:
        Joy_State = JOY_NONE;
 8008d78:	4b10      	ldr	r3, [pc, #64]	@ (8008dbc <Joystick_demo+0xdc>)
 8008d7a:	2200      	movs	r2, #0
 8008d7c:	601a      	str	r2, [r3, #0]
        break;
 8008d7e:	bf00      	nop
      }
    Joystick_SetCursorPosition();
 8008d80:	f000 f832 	bl	8008de8 <Joystick_SetCursorPosition>
    JoyPinPressed = 0;
 8008d84:	4b0c      	ldr	r3, [pc, #48]	@ (8008db8 <Joystick_demo+0xd8>)
 8008d86:	2200      	movs	r2, #0
 8008d88:	601a      	str	r2, [r3, #0]
    if(CheckForUserInput() > 0)
 8008d8a:	f000 fd0f 	bl	80097ac <CheckForUserInput>
 8008d8e:	4603      	mov	r3, r0
 8008d90:	2b00      	cmp	r3, #0
 8008d92:	d00a      	beq.n	8008daa <Joystick_demo+0xca>
    {

      BSP_JOY_DeInit(JOY1, JOY_ALL);
 8008d94:	211f      	movs	r1, #31
 8008d96:	2000      	movs	r0, #0
 8008d98:	f002 fe76 	bl	800ba88 <BSP_JOY_DeInit>
      ButtonState = 0;
 8008d9c:	4b08      	ldr	r3, [pc, #32]	@ (8008dc0 <Joystick_demo+0xe0>)
 8008d9e:	2200      	movs	r2, #0
 8008da0:	601a      	str	r2, [r3, #0]
      JoyStickDemo = 0;
 8008da2:	4b04      	ldr	r3, [pc, #16]	@ (8008db4 <Joystick_demo+0xd4>)
 8008da4:	2200      	movs	r2, #0
 8008da6:	601a      	str	r2, [r3, #0]
      return;
 8008da8:	e003      	b.n	8008db2 <Joystick_demo+0xd2>
    }
     HAL_Delay(6);
 8008daa:	2006      	movs	r0, #6
 8008dac:	f009 f9f2 	bl	8012194 <HAL_Delay>
          switch(JoyPinPressed)
 8008db0:	e7a5      	b.n	8008cfe <Joystick_demo+0x1e>
  }
}
 8008db2:	bd80      	pop	{r7, pc}
 8008db4:	240055b8 	.word	0x240055b8
 8008db8:	240055a8 	.word	0x240055a8
 8008dbc:	240055ac 	.word	0x240055ac
 8008dc0:	240055c0 	.word	0x240055c0

08008dc4 <BSP_JOY_Callback>:

void BSP_JOY_Callback(JOY_TypeDef JOY, uint32_t JoyPin)
{
 8008dc4:	b480      	push	{r7}
 8008dc6:	b083      	sub	sp, #12
 8008dc8:	af00      	add	r7, sp, #0
 8008dca:	4603      	mov	r3, r0
 8008dcc:	6039      	str	r1, [r7, #0]
 8008dce:	71fb      	strb	r3, [r7, #7]
    JoyPinPressed = JoyPin;
 8008dd0:	4a04      	ldr	r2, [pc, #16]	@ (8008de4 <BSP_JOY_Callback+0x20>)
 8008dd2:	683b      	ldr	r3, [r7, #0]
 8008dd4:	6013      	str	r3, [r2, #0]
}
 8008dd6:	bf00      	nop
 8008dd8:	370c      	adds	r7, #12
 8008dda:	46bd      	mov	sp, r7
 8008ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008de0:	4770      	bx	lr
 8008de2:	bf00      	nop
 8008de4:	240055a8 	.word	0x240055a8

08008de8 <Joystick_SetCursorPosition>:
* @brief  Joystick cursor position
* @param  None
* @retval None
*/
static void Joystick_SetCursorPosition()
{
 8008de8:	b580      	push	{r7, lr}
 8008dea:	af00      	add	r7, sp, #0
  static uint16_t yPtr = HEADBAND_HEIGHT + 12;
  static uint16_t old_xPtr = 12;
  static uint16_t old_yPtr = HEADBAND_HEIGHT + 12;


  switch(Joy_State)
 8008dec:	4b57      	ldr	r3, [pc, #348]	@ (8008f4c <Joystick_SetCursorPosition+0x164>)
 8008dee:	681b      	ldr	r3, [r3, #0]
 8008df0:	3b02      	subs	r3, #2
 8008df2:	2b0e      	cmp	r3, #14
 8008df4:	d854      	bhi.n	8008ea0 <Joystick_SetCursorPosition+0xb8>
 8008df6:	a201      	add	r2, pc, #4	@ (adr r2, 8008dfc <Joystick_SetCursorPosition+0x14>)
 8008df8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008dfc:	08008e4f 	.word	0x08008e4f
 8008e00:	08008ea1 	.word	0x08008ea1
 8008e04:	08008e6d 	.word	0x08008e6d
 8008e08:	08008ea1 	.word	0x08008ea1
 8008e0c:	08008ea1 	.word	0x08008ea1
 8008e10:	08008ea1 	.word	0x08008ea1
 8008e14:	08008e83 	.word	0x08008e83
 8008e18:	08008ea1 	.word	0x08008ea1
 8008e1c:	08008ea1 	.word	0x08008ea1
 8008e20:	08008ea1 	.word	0x08008ea1
 8008e24:	08008ea1 	.word	0x08008ea1
 8008e28:	08008ea1 	.word	0x08008ea1
 8008e2c:	08008ea1 	.word	0x08008ea1
 8008e30:	08008ea1 	.word	0x08008ea1
 8008e34:	08008e39 	.word	0x08008e39
  {
  case JOY_UP:
    if(yPtr > HEADBAND_HEIGHT + 12)
 8008e38:	4b45      	ldr	r3, [pc, #276]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008e3a:	881b      	ldrh	r3, [r3, #0]
 8008e3c:	2b5c      	cmp	r3, #92	@ 0x5c
 8008e3e:	d931      	bls.n	8008ea4 <Joystick_SetCursorPosition+0xbc>
    {
      yPtr--;
 8008e40:	4b43      	ldr	r3, [pc, #268]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008e42:	881b      	ldrh	r3, [r3, #0]
 8008e44:	3b01      	subs	r3, #1
 8008e46:	b29a      	uxth	r2, r3
 8008e48:	4b41      	ldr	r3, [pc, #260]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008e4a:	801a      	strh	r2, [r3, #0]
    }
    break;
 8008e4c:	e02a      	b.n	8008ea4 <Joystick_SetCursorPosition+0xbc>
  case JOY_DOWN:
    if(yPtr < (y_size - 12 - 11))
 8008e4e:	4b40      	ldr	r3, [pc, #256]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008e50:	881b      	ldrh	r3, [r3, #0]
 8008e52:	461a      	mov	r2, r3
 8008e54:	4b3f      	ldr	r3, [pc, #252]	@ (8008f54 <Joystick_SetCursorPosition+0x16c>)
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	3b17      	subs	r3, #23
 8008e5a:	429a      	cmp	r2, r3
 8008e5c:	d224      	bcs.n	8008ea8 <Joystick_SetCursorPosition+0xc0>
    {
      yPtr++;
 8008e5e:	4b3c      	ldr	r3, [pc, #240]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008e60:	881b      	ldrh	r3, [r3, #0]
 8008e62:	3301      	adds	r3, #1
 8008e64:	b29a      	uxth	r2, r3
 8008e66:	4b3a      	ldr	r3, [pc, #232]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008e68:	801a      	strh	r2, [r3, #0]
    }
    break;
 8008e6a:	e01d      	b.n	8008ea8 <Joystick_SetCursorPosition+0xc0>
  case JOY_LEFT:
    if(xPtr > 12)
 8008e6c:	4b3a      	ldr	r3, [pc, #232]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008e6e:	881b      	ldrh	r3, [r3, #0]
 8008e70:	2b0c      	cmp	r3, #12
 8008e72:	d91b      	bls.n	8008eac <Joystick_SetCursorPosition+0xc4>
    {
      xPtr--;
 8008e74:	4b38      	ldr	r3, [pc, #224]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008e76:	881b      	ldrh	r3, [r3, #0]
 8008e78:	3b01      	subs	r3, #1
 8008e7a:	b29a      	uxth	r2, r3
 8008e7c:	4b36      	ldr	r3, [pc, #216]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008e7e:	801a      	strh	r2, [r3, #0]
    }
    break;
 8008e80:	e014      	b.n	8008eac <Joystick_SetCursorPosition+0xc4>
  case JOY_RIGHT:
    if(xPtr < (y_size - 8 - 11))
 8008e82:	4b35      	ldr	r3, [pc, #212]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008e84:	881b      	ldrh	r3, [r3, #0]
 8008e86:	461a      	mov	r2, r3
 8008e88:	4b32      	ldr	r3, [pc, #200]	@ (8008f54 <Joystick_SetCursorPosition+0x16c>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	3b13      	subs	r3, #19
 8008e8e:	429a      	cmp	r2, r3
 8008e90:	d20e      	bcs.n	8008eb0 <Joystick_SetCursorPosition+0xc8>
    {
      xPtr++;
 8008e92:	4b31      	ldr	r3, [pc, #196]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008e94:	881b      	ldrh	r3, [r3, #0]
 8008e96:	3301      	adds	r3, #1
 8008e98:	b29a      	uxth	r2, r3
 8008e9a:	4b2f      	ldr	r3, [pc, #188]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008e9c:	801a      	strh	r2, [r3, #0]
    }
    break;
 8008e9e:	e007      	b.n	8008eb0 <Joystick_SetCursorPosition+0xc8>
  default:

    break;
 8008ea0:	bf00      	nop
 8008ea2:	e006      	b.n	8008eb2 <Joystick_SetCursorPosition+0xca>
    break;
 8008ea4:	bf00      	nop
 8008ea6:	e004      	b.n	8008eb2 <Joystick_SetCursorPosition+0xca>
    break;
 8008ea8:	bf00      	nop
 8008eaa:	e002      	b.n	8008eb2 <Joystick_SetCursorPosition+0xca>
    break;
 8008eac:	bf00      	nop
 8008eae:	e000      	b.n	8008eb2 <Joystick_SetCursorPosition+0xca>
    break;
 8008eb0:	bf00      	nop
  }

  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8008eb2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008eb6:	f019 fbe3 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8008eba:	4828      	ldr	r0, [pc, #160]	@ (8008f5c <Joystick_SetCursorPosition+0x174>)
 8008ebc:	f019 fbcc 	bl	8022658 <UTIL_LCD_SetTextColor>

  if(Joy_State == JOY_SEL)
 8008ec0:	4b22      	ldr	r3, [pc, #136]	@ (8008f4c <Joystick_SetCursorPosition+0x164>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	2b01      	cmp	r3, #1
 8008ec6:	d10c      	bne.n	8008ee2 <Joystick_SetCursorPosition+0xfa>
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8008ec8:	4825      	ldr	r0, [pc, #148]	@ (8008f60 <Joystick_SetCursorPosition+0x178>)
 8008eca:	f019 fbc5 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayChar(xPtr, yPtr, 'X');
 8008ece:	4b22      	ldr	r3, [pc, #136]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008ed0:	881b      	ldrh	r3, [r3, #0]
 8008ed2:	4618      	mov	r0, r3
 8008ed4:	4b1e      	ldr	r3, [pc, #120]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008ed6:	881b      	ldrh	r3, [r3, #0]
 8008ed8:	2258      	movs	r2, #88	@ 0x58
 8008eda:	4619      	mov	r1, r3
 8008edc:	f019 fcda 	bl	8022894 <UTIL_LCD_DisplayChar>
    UTIL_LCD_DisplayChar(xPtr, yPtr, 'X');

    old_xPtr = xPtr;
    old_yPtr = yPtr;
  }
}
 8008ee0:	e031      	b.n	8008f46 <Joystick_SetCursorPosition+0x15e>
  else if(Joy_State == JOY_NONE)
 8008ee2:	4b1a      	ldr	r3, [pc, #104]	@ (8008f4c <Joystick_SetCursorPosition+0x164>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	2b00      	cmp	r3, #0
 8008ee8:	d10c      	bne.n	8008f04 <Joystick_SetCursorPosition+0x11c>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8008eea:	481c      	ldr	r0, [pc, #112]	@ (8008f5c <Joystick_SetCursorPosition+0x174>)
 8008eec:	f019 fbb4 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayChar(xPtr, yPtr, 'X');
 8008ef0:	4b19      	ldr	r3, [pc, #100]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008ef2:	881b      	ldrh	r3, [r3, #0]
 8008ef4:	4618      	mov	r0, r3
 8008ef6:	4b16      	ldr	r3, [pc, #88]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008ef8:	881b      	ldrh	r3, [r3, #0]
 8008efa:	2258      	movs	r2, #88	@ 0x58
 8008efc:	4619      	mov	r1, r3
 8008efe:	f019 fcc9 	bl	8022894 <UTIL_LCD_DisplayChar>
}
 8008f02:	e020      	b.n	8008f46 <Joystick_SetCursorPosition+0x15e>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8008f04:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f08:	f019 fba6 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayChar(old_xPtr, old_yPtr, 'X');
 8008f0c:	4b15      	ldr	r3, [pc, #84]	@ (8008f64 <Joystick_SetCursorPosition+0x17c>)
 8008f0e:	881b      	ldrh	r3, [r3, #0]
 8008f10:	4618      	mov	r0, r3
 8008f12:	4b15      	ldr	r3, [pc, #84]	@ (8008f68 <Joystick_SetCursorPosition+0x180>)
 8008f14:	881b      	ldrh	r3, [r3, #0]
 8008f16:	2258      	movs	r2, #88	@ 0x58
 8008f18:	4619      	mov	r1, r3
 8008f1a:	f019 fcbb 	bl	8022894 <UTIL_LCD_DisplayChar>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 8008f1e:	480f      	ldr	r0, [pc, #60]	@ (8008f5c <Joystick_SetCursorPosition+0x174>)
 8008f20:	f019 fb9a 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayChar(xPtr, yPtr, 'X');
 8008f24:	4b0c      	ldr	r3, [pc, #48]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008f26:	881b      	ldrh	r3, [r3, #0]
 8008f28:	4618      	mov	r0, r3
 8008f2a:	4b09      	ldr	r3, [pc, #36]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008f2c:	881b      	ldrh	r3, [r3, #0]
 8008f2e:	2258      	movs	r2, #88	@ 0x58
 8008f30:	4619      	mov	r1, r3
 8008f32:	f019 fcaf 	bl	8022894 <UTIL_LCD_DisplayChar>
    old_xPtr = xPtr;
 8008f36:	4b08      	ldr	r3, [pc, #32]	@ (8008f58 <Joystick_SetCursorPosition+0x170>)
 8008f38:	881a      	ldrh	r2, [r3, #0]
 8008f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8008f64 <Joystick_SetCursorPosition+0x17c>)
 8008f3c:	801a      	strh	r2, [r3, #0]
    old_yPtr = yPtr;
 8008f3e:	4b04      	ldr	r3, [pc, #16]	@ (8008f50 <Joystick_SetCursorPosition+0x168>)
 8008f40:	881a      	ldrh	r2, [r3, #0]
 8008f42:	4b09      	ldr	r3, [pc, #36]	@ (8008f68 <Joystick_SetCursorPosition+0x180>)
 8008f44:	801a      	strh	r2, [r3, #0]
}
 8008f46:	bf00      	nop
 8008f48:	bd80      	pop	{r7, pc}
 8008f4a:	bf00      	nop
 8008f4c:	240055ac 	.word	0x240055ac
 8008f50:	2400065c 	.word	0x2400065c
 8008f54:	240055b4 	.word	0x240055b4
 8008f58:	2400065e 	.word	0x2400065e
 8008f5c:	ff0000ff 	.word	0xff0000ff
 8008f60:	ffff0000 	.word	0xffff0000
 8008f64:	24000660 	.word	0x24000660
 8008f68:	24000662 	.word	0x24000662

08008f6c <Joystick_SetHint>:
* @brief  Display joystick demo hint
* @param  None
* @retval None
*/
static void Joystick_SetHint(void)
{
 8008f6c:	b580      	push	{r7, lr}
 8008f6e:	b082      	sub	sp, #8
 8008f70:	af02      	add	r7, sp, #8
  BSP_LCD_GetXSize(0, &x_size);
 8008f72:	492b      	ldr	r1, [pc, #172]	@ (8009020 <Joystick_SetHint+0xb4>)
 8008f74:	2000      	movs	r0, #0
 8008f76:	f006 f9df 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8008f7a:	492a      	ldr	r1, [pc, #168]	@ (8009024 <Joystick_SetHint+0xb8>)
 8008f7c:	2000      	movs	r0, #0
 8008f7e:	f006 fa03 	bl	800f388 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8008f82:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008f86:	f019 fc6f 	bl	8022868 <UTIL_LCD_Clear>

  /* Set Joystick Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 8008f8a:	4b25      	ldr	r3, [pc, #148]	@ (8009020 <Joystick_SetHint+0xb4>)
 8008f8c:	681a      	ldr	r2, [r3, #0]
 8008f8e:	4b26      	ldr	r3, [pc, #152]	@ (8009028 <Joystick_SetHint+0xbc>)
 8008f90:	9300      	str	r3, [sp, #0]
 8008f92:	2350      	movs	r3, #80	@ 0x50
 8008f94:	2100      	movs	r1, #0
 8008f96:	2000      	movs	r0, #0
 8008f98:	f01a f88c 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8008f9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008fa0:	f019 fb5a 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8008fa4:	4820      	ldr	r0, [pc, #128]	@ (8009028 <Joystick_SetHint+0xbc>)
 8008fa6:	f019 fb6b 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8008faa:	4820      	ldr	r0, [pc, #128]	@ (800902c <Joystick_SetHint+0xc0>)
 8008fac:	f019 fb7c 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Joystick", CENTER_MODE);
 8008fb0:	2301      	movs	r3, #1
 8008fb2:	4a1f      	ldr	r2, [pc, #124]	@ (8009030 <Joystick_SetHint+0xc4>)
 8008fb4:	2100      	movs	r1, #0
 8008fb6:	2000      	movs	r0, #0
 8008fb8:	f019 fca2 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 8008fbc:	481d      	ldr	r0, [pc, #116]	@ (8009034 <Joystick_SetHint+0xc8>)
 8008fbe:	f019 fb73 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the joystick to move", CENTER_MODE);
 8008fc2:	2301      	movs	r3, #1
 8008fc4:	4a1c      	ldr	r2, [pc, #112]	@ (8009038 <Joystick_SetHint+0xcc>)
 8008fc6:	211e      	movs	r1, #30
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f019 fc99 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"the pointer inside the rectangle", CENTER_MODE);
 8008fce:	2301      	movs	r3, #1
 8008fd0:	4a1a      	ldr	r2, [pc, #104]	@ (800903c <Joystick_SetHint+0xd0>)
 8008fd2:	212d      	movs	r1, #45	@ 0x2d
 8008fd4:	2000      	movs	r0, #0
 8008fd6:	f019 fc93 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"Press Tamper push-button to switch to next menu", CENTER_MODE);
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4a18      	ldr	r2, [pc, #96]	@ (8009040 <Joystick_SetHint+0xd4>)
 8008fde:	213c      	movs	r1, #60	@ 0x3c
 8008fe0:	2000      	movs	r0, #0
 8008fe2:	f019 fc8d 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 8008fe6:	4b0e      	ldr	r3, [pc, #56]	@ (8009020 <Joystick_SetHint+0xb4>)
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	f1a3 0214 	sub.w	r2, r3, #20
 8008fee:	4b0d      	ldr	r3, [pc, #52]	@ (8009024 <Joystick_SetHint+0xb8>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	3b64      	subs	r3, #100	@ 0x64
 8008ff4:	490c      	ldr	r1, [pc, #48]	@ (8009028 <Joystick_SetHint+0xbc>)
 8008ff6:	9100      	str	r1, [sp, #0]
 8008ff8:	215a      	movs	r1, #90	@ 0x5a
 8008ffa:	200a      	movs	r0, #10
 8008ffc:	f019 fdea 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 8009000:	4b07      	ldr	r3, [pc, #28]	@ (8009020 <Joystick_SetHint+0xb4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	f1a3 0216 	sub.w	r2, r3, #22
 8009008:	4b06      	ldr	r3, [pc, #24]	@ (8009024 <Joystick_SetHint+0xb8>)
 800900a:	681b      	ldr	r3, [r3, #0]
 800900c:	3b66      	subs	r3, #102	@ 0x66
 800900e:	4906      	ldr	r1, [pc, #24]	@ (8009028 <Joystick_SetHint+0xbc>)
 8009010:	9100      	str	r1, [sp, #0]
 8009012:	215b      	movs	r1, #91	@ 0x5b
 8009014:	200b      	movs	r0, #11
 8009016:	f019 fddd 	bl	8022bd4 <UTIL_LCD_DrawRect>
}
 800901a:	bf00      	nop
 800901c:	46bd      	mov	sp, r7
 800901e:	bd80      	pop	{r7, pc}
 8009020:	240055b0 	.word	0x240055b0
 8009024:	240055b4 	.word	0x240055b4
 8009028:	ff0000ff 	.word	0xff0000ff
 800902c:	24000a44 	.word	0x24000a44
 8009030:	08026a3c 	.word	0x08026a3c
 8009034:	24000a5c 	.word	0x24000a5c
 8009038:	08026a48 	.word	0x08026a48
 800903c:	08026a68 	.word	0x08026a68
 8009040:	08026a8c 	.word	0x08026a8c

08009044 <LCD_demo>:
  * @brief  LCD demo
  * @param  None
  * @retval None
  */
void LCD_demo (void)
{
 8009044:	b580      	push	{r7, lr}
 8009046:	af00      	add	r7, sp, #0
  LCD_SetHint();
 8009048:	f000 f824 	bl	8009094 <LCD_SetHint>
  LCD_Feature = 0;
 800904c:	4b10      	ldr	r3, [pc, #64]	@ (8009090 <LCD_demo+0x4c>)
 800904e:	2200      	movs	r2, #0
 8009050:	701a      	strb	r2, [r3, #0]
  LCD_Show_Feature (LCD_Feature);
 8009052:	4b0f      	ldr	r3, [pc, #60]	@ (8009090 <LCD_demo+0x4c>)
 8009054:	781b      	ldrb	r3, [r3, #0]
 8009056:	4618      	mov	r0, r3
 8009058:	f000 f888 	bl	800916c <LCD_Show_Feature>

  while (1)
  {

    if(CheckForUserInput() > 0)
 800905c:	f000 fba6 	bl	80097ac <CheckForUserInput>
 8009060:	4603      	mov	r3, r0
 8009062:	2b00      	cmp	r3, #0
 8009064:	d00e      	beq.n	8009084 <LCD_demo+0x40>
    {
      if(++LCD_Feature < LCD_FEATURES_NUM)
 8009066:	4b0a      	ldr	r3, [pc, #40]	@ (8009090 <LCD_demo+0x4c>)
 8009068:	781b      	ldrb	r3, [r3, #0]
 800906a:	3301      	adds	r3, #1
 800906c:	b2da      	uxtb	r2, r3
 800906e:	4b08      	ldr	r3, [pc, #32]	@ (8009090 <LCD_demo+0x4c>)
 8009070:	701a      	strb	r2, [r3, #0]
 8009072:	4b07      	ldr	r3, [pc, #28]	@ (8009090 <LCD_demo+0x4c>)
 8009074:	781b      	ldrb	r3, [r3, #0]
 8009076:	2b03      	cmp	r3, #3
 8009078:	d808      	bhi.n	800908c <LCD_demo+0x48>
      {
       LCD_Show_Feature (LCD_Feature);
 800907a:	4b05      	ldr	r3, [pc, #20]	@ (8009090 <LCD_demo+0x4c>)
 800907c:	781b      	ldrb	r3, [r3, #0]
 800907e:	4618      	mov	r0, r3
 8009080:	f000 f874 	bl	800916c <LCD_Show_Feature>
      else
      {
        return;
      }
    }
    HAL_Delay(100);
 8009084:	2064      	movs	r0, #100	@ 0x64
 8009086:	f009 f885 	bl	8012194 <HAL_Delay>
    if(CheckForUserInput() > 0)
 800908a:	e7e7      	b.n	800905c <LCD_demo+0x18>
        return;
 800908c:	bf00      	nop
  }
}
 800908e:	bd80      	pop	{r7, pc}
 8009090:	240055bc 	.word	0x240055bc

08009094 <LCD_SetHint>:
  * @brief  Display LCD demo hint
  * @param  None
  * @retval None
  */
static void LCD_SetHint(void)
{
 8009094:	b580      	push	{r7, lr}
 8009096:	b084      	sub	sp, #16
 8009098:	af02      	add	r7, sp, #8
  uint32_t x_size;
  uint32_t y_size;
  BSP_LCD_GetXSize(0, &x_size);
 800909a:	1d3b      	adds	r3, r7, #4
 800909c:	4619      	mov	r1, r3
 800909e:	2000      	movs	r0, #0
 80090a0:	f006 f94a 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 80090a4:	463b      	mov	r3, r7
 80090a6:	4619      	mov	r1, r3
 80090a8:	2000      	movs	r0, #0
 80090aa:	f006 f96d 	bl	800f388 <BSP_LCD_GetYSize>
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80090ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090b2:	f019 fbd9 	bl	8022868 <UTIL_LCD_Clear>

  /*  Set the LCD Text Color */
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 80090b6:	4825      	ldr	r0, [pc, #148]	@ (800914c <LCD_SetHint+0xb8>)
 80090b8:	f019 face 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 80090bc:	687a      	ldr	r2, [r7, #4]
 80090be:	4b24      	ldr	r3, [pc, #144]	@ (8009150 <LCD_SetHint+0xbc>)
 80090c0:	9300      	str	r3, [sp, #0]
 80090c2:	2350      	movs	r3, #80	@ 0x50
 80090c4:	2100      	movs	r1, #0
 80090c6:	2000      	movs	r0, #0
 80090c8:	f019 fff4 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80090cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80090d0:	f019 fac2 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 80090d4:	481e      	ldr	r0, [pc, #120]	@ (8009150 <LCD_SetHint+0xbc>)
 80090d6:	f019 fad3 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 80090da:	481e      	ldr	r0, [pc, #120]	@ (8009154 <LCD_SetHint+0xc0>)
 80090dc:	f019 fae4 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"LCD", CENTER_MODE);
 80090e0:	2301      	movs	r3, #1
 80090e2:	4a1d      	ldr	r2, [pc, #116]	@ (8009158 <LCD_SetHint+0xc4>)
 80090e4:	2100      	movs	r1, #0
 80090e6:	2000      	movs	r0, #0
 80090e8:	f019 fc0a 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 80090ec:	481b      	ldr	r0, [pc, #108]	@ (800915c <LCD_SetHint+0xc8>)
 80090ee:	f019 fadb 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows the different", CENTER_MODE);
 80090f2:	2301      	movs	r3, #1
 80090f4:	4a1a      	ldr	r2, [pc, #104]	@ (8009160 <LCD_SetHint+0xcc>)
 80090f6:	211e      	movs	r1, #30
 80090f8:	2000      	movs	r0, #0
 80090fa:	f019 fc01 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"LCD Features, use Tamper push-button to display", CENTER_MODE);
 80090fe:	2301      	movs	r3, #1
 8009100:	4a18      	ldr	r2, [pc, #96]	@ (8009164 <LCD_SetHint+0xd0>)
 8009102:	212d      	movs	r1, #45	@ 0x2d
 8009104:	2000      	movs	r0, #0
 8009106:	f019 fbfb 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"next page", CENTER_MODE);
 800910a:	2301      	movs	r3, #1
 800910c:	4a16      	ldr	r2, [pc, #88]	@ (8009168 <LCD_SetHint+0xd4>)
 800910e:	213c      	movs	r1, #60	@ 0x3c
 8009110:	2000      	movs	r0, #0
 8009112:	f019 fbf5 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	f1a3 0214 	sub.w	r2, r3, #20
 800911c:	683b      	ldr	r3, [r7, #0]
 800911e:	3b64      	subs	r3, #100	@ 0x64
 8009120:	490b      	ldr	r1, [pc, #44]	@ (8009150 <LCD_SetHint+0xbc>)
 8009122:	9100      	str	r1, [sp, #0]
 8009124:	215a      	movs	r1, #90	@ 0x5a
 8009126:	200a      	movs	r0, #10
 8009128:	f019 fd54 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	f1a3 0216 	sub.w	r2, r3, #22
 8009132:	683b      	ldr	r3, [r7, #0]
 8009134:	3b66      	subs	r3, #102	@ 0x66
 8009136:	4906      	ldr	r1, [pc, #24]	@ (8009150 <LCD_SetHint+0xbc>)
 8009138:	9100      	str	r1, [sp, #0]
 800913a:	215b      	movs	r1, #91	@ 0x5b
 800913c:	200b      	movs	r0, #11
 800913e:	f019 fd49 	bl	8022bd4 <UTIL_LCD_DrawRect>
 }
 8009142:	bf00      	nop
 8009144:	3708      	adds	r7, #8
 8009146:	46bd      	mov	sp, r7
 8009148:	bd80      	pop	{r7, pc}
 800914a:	bf00      	nop
 800914c:	ff000080 	.word	0xff000080
 8009150:	ff0000ff 	.word	0xff0000ff
 8009154:	24000a44 	.word	0x24000a44
 8009158:	08026abc 	.word	0x08026abc
 800915c:	24000a5c 	.word	0x24000a5c
 8009160:	08026ac0 	.word	0x08026ac0
 8009164:	08026ae4 	.word	0x08026ae4
 8009168:	08026b14 	.word	0x08026b14

0800916c <LCD_Show_Feature>:
  * @brief  Show LCD Features
  * @param  feature : feature index
  * @retval None
  */
static void LCD_Show_Feature(uint8_t feature)
{
 800916c:	b5b0      	push	{r4, r5, r7, lr}
 800916e:	b0a0      	sub	sp, #128	@ 0x80
 8009170:	af02      	add	r7, sp, #8
 8009172:	4603      	mov	r3, r0
 8009174:	71fb      	strb	r3, [r7, #7]
  Point Points[]= {{220, 220}, {280, 180}, {320, 180}, {370, 220}, {370, 260}, {320, 310}, {280, 310}, {220, 260}};
 8009176:	4bce      	ldr	r3, [pc, #824]	@ (80094b0 <LCD_Show_Feature+0x344>)
 8009178:	f107 0454 	add.w	r4, r7, #84	@ 0x54
 800917c:	461d      	mov	r5, r3
 800917e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8009180:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8009182:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8009186:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  Point Points2[3];
  uint32_t x_size, y_size;
  int32_t i = 0;
 800918a:	2300      	movs	r3, #0
 800918c:	677b      	str	r3, [r7, #116]	@ 0x74
  uint8_t text[50];
  BSP_LCD_GetXSize(0, &x_size);
 800918e:	f107 0344 	add.w	r3, r7, #68	@ 0x44
 8009192:	4619      	mov	r1, r3
 8009194:	2000      	movs	r0, #0
 8009196:	f006 f8cf 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800919a:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 800919e:	4619      	mov	r1, r3
 80091a0:	2000      	movs	r0, #0
 80091a2:	f006 f8f1 	bl	800f388 <BSP_LCD_GetYSize>

  Points2[0].X = x_size - 80;
 80091a6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091a8:	b29b      	uxth	r3, r3
 80091aa:	3b50      	subs	r3, #80	@ 0x50
 80091ac:	b29b      	uxth	r3, r3
 80091ae:	b21b      	sxth	r3, r3
 80091b0:	f8a7 3048 	strh.w	r3, [r7, #72]	@ 0x48
  Points2[0].Y = 150;
 80091b4:	2396      	movs	r3, #150	@ 0x96
 80091b6:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  Points2[1].X = x_size - 20;
 80091ba:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091bc:	b29b      	uxth	r3, r3
 80091be:	3b14      	subs	r3, #20
 80091c0:	b29b      	uxth	r3, r3
 80091c2:	b21b      	sxth	r3, r3
 80091c4:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
  Points2[1].Y = 150;
 80091c8:	2396      	movs	r3, #150	@ 0x96
 80091ca:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
  Points2[2].X = x_size - 20;
 80091ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091d0:	b29b      	uxth	r3, r3
 80091d2:	3b14      	subs	r3, #20
 80091d4:	b29b      	uxth	r3, r3
 80091d6:	b21b      	sxth	r3, r3
 80091d8:	f8a7 3050 	strh.w	r3, [r7, #80]	@ 0x50
  Points2[2].Y = 200;
 80091dc:	23c8      	movs	r3, #200	@ 0xc8
 80091de:	f8a7 3052 	strh.w	r3, [r7, #82]	@ 0x52

  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80091e2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091e6:	f019 fa4b 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 80091ea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80091ee:	f019 fa33 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_FillRect(12, 92, x_size - 24, y_size- 104, UTIL_LCD_COLOR_WHITE);
 80091f2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80091f4:	f1a3 0218 	sub.w	r2, r3, #24
 80091f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80091fa:	3b68      	subs	r3, #104	@ 0x68
 80091fc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8009200:	9100      	str	r1, [sp, #0]
 8009202:	215c      	movs	r1, #92	@ 0x5c
 8009204:	200c      	movs	r0, #12
 8009206:	f019 ff55 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800920a:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800920e:	f019 fa23 	bl	8022658 <UTIL_LCD_SetTextColor>

  switch (feature)
 8009212:	79fb      	ldrb	r3, [r7, #7]
 8009214:	2b03      	cmp	r3, #3
 8009216:	f200 8147 	bhi.w	80094a8 <LCD_Show_Feature+0x33c>
 800921a:	a201      	add	r2, pc, #4	@ (adr r2, 8009220 <LCD_Show_Feature+0xb4>)
 800921c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009220:	08009231 	.word	0x08009231
 8009224:	08009297 	.word	0x08009297
 8009228:	08009377 	.word	0x08009377
 800922c:	08009405 	.word	0x08009405
  {
  case 0:
    /* Text Feature */

    UTIL_LCD_DisplayStringAt(14, 100, (uint8_t *)"Left aligned Text", LEFT_MODE);
 8009230:	2303      	movs	r3, #3
 8009232:	4aa0      	ldr	r2, [pc, #640]	@ (80094b4 <LCD_Show_Feature+0x348>)
 8009234:	2164      	movs	r1, #100	@ 0x64
 8009236:	200e      	movs	r0, #14
 8009238:	f019 fb62 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, 115, (uint8_t *)"Center aligned Text", CENTER_MODE);
 800923c:	2301      	movs	r3, #1
 800923e:	4a9e      	ldr	r2, [pc, #632]	@ (80094b8 <LCD_Show_Feature+0x34c>)
 8009240:	2173      	movs	r1, #115	@ 0x73
 8009242:	2000      	movs	r0, #0
 8009244:	f019 fb5c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(14, 130, (uint8_t*)"Right aligned Text", RIGHT_MODE);
 8009248:	2302      	movs	r3, #2
 800924a:	4a9c      	ldr	r2, [pc, #624]	@ (80094bc <LCD_Show_Feature+0x350>)
 800924c:	2182      	movs	r1, #130	@ 0x82
 800924e:	200e      	movs	r0, #14
 8009250:	f019 fb56 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font24);
 8009254:	489a      	ldr	r0, [pc, #616]	@ (80094c0 <LCD_Show_Feature+0x354>)
 8009256:	f019 fa27 	bl	80226a8 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(14, 180, (uint8_t *)"Font24", LEFT_MODE);
 800925a:	2303      	movs	r3, #3
 800925c:	4a99      	ldr	r2, [pc, #612]	@ (80094c4 <LCD_Show_Feature+0x358>)
 800925e:	21b4      	movs	r1, #180	@ 0xb4
 8009260:	200e      	movs	r0, #14
 8009262:	f019 fb4d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font20);
 8009266:	4898      	ldr	r0, [pc, #608]	@ (80094c8 <LCD_Show_Feature+0x35c>)
 8009268:	f019 fa1e 	bl	80226a8 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(x_size/2 -20, 180, (uint8_t *)"Font20", LEFT_MODE);
 800926c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800926e:	085b      	lsrs	r3, r3, #1
 8009270:	f1a3 0014 	sub.w	r0, r3, #20
 8009274:	2303      	movs	r3, #3
 8009276:	4a95      	ldr	r2, [pc, #596]	@ (80094cc <LCD_Show_Feature+0x360>)
 8009278:	21b4      	movs	r1, #180	@ 0xb4
 800927a:	f019 fb41 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font16);
 800927e:	4894      	ldr	r0, [pc, #592]	@ (80094d0 <LCD_Show_Feature+0x364>)
 8009280:	f019 fa12 	bl	80226a8 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(x_size - 80, 184, (uint8_t *)"Font16", LEFT_MODE);
 8009284:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009286:	f1a3 0050 	sub.w	r0, r3, #80	@ 0x50
 800928a:	2303      	movs	r3, #3
 800928c:	4a91      	ldr	r2, [pc, #580]	@ (80094d4 <LCD_Show_Feature+0x368>)
 800928e:	21b8      	movs	r1, #184	@ 0xb8
 8009290:	f019 fb36 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    break;
 8009294:	e108      	b.n	80094a8 <LCD_Show_Feature+0x33c>

  case 1:


    /* Draw misc. Shapes */
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8009296:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800929a:	f019 f9dd 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DrawRect(20, 100, 60 , 40, UTIL_LCD_COLOR_BLACK);
 800929e:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80092a2:	9300      	str	r3, [sp, #0]
 80092a4:	2328      	movs	r3, #40	@ 0x28
 80092a6:	223c      	movs	r2, #60	@ 0x3c
 80092a8:	2164      	movs	r1, #100	@ 0x64
 80092aa:	2014      	movs	r0, #20
 80092ac:	f019 fc92 	bl	8022bd4 <UTIL_LCD_DrawRect>
    UTIL_LCD_FillRect(100, 100, 60 , 40, UTIL_LCD_COLOR_BLACK);
 80092b0:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 80092b4:	9300      	str	r3, [sp, #0]
 80092b6:	2328      	movs	r3, #40	@ 0x28
 80092b8:	223c      	movs	r2, #60	@ 0x3c
 80092ba:	2164      	movs	r1, #100	@ 0x64
 80092bc:	2064      	movs	r0, #100	@ 0x64
 80092be:	f019 fef9 	bl	80230b4 <UTIL_LCD_FillRect>

    UTIL_LCD_DrawCircle(x_size - 120, 120, 20, UTIL_LCD_COLOR_GRAY);
 80092c2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092c4:	f1a3 0078 	sub.w	r0, r3, #120	@ 0x78
 80092c8:	4b83      	ldr	r3, [pc, #524]	@ (80094d8 <LCD_Show_Feature+0x36c>)
 80092ca:	2214      	movs	r2, #20
 80092cc:	2178      	movs	r1, #120	@ 0x78
 80092ce:	f019 fcab 	bl	8022c28 <UTIL_LCD_DrawCircle>
    UTIL_LCD_FillCircle(x_size - 40, 120, 20, UTIL_LCD_COLOR_GRAY);
 80092d2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80092d4:	f1a3 0028 	sub.w	r0, r3, #40	@ 0x28
 80092d8:	4b7f      	ldr	r3, [pc, #508]	@ (80094d8 <LCD_Show_Feature+0x36c>)
 80092da:	2214      	movs	r2, #20
 80092dc:	2178      	movs	r1, #120	@ 0x78
 80092de:	f019 ff23 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillPolygon(Points, 8, UTIL_LCD_COLOR_GREEN);
 80092e2:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80092e6:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 80092ea:	2108      	movs	r1, #8
 80092ec:	4618      	mov	r0, r3
 80092ee:	f019 ffc7 	bl	8023280 <UTIL_LCD_FillPolygon>

    UTIL_LCD_DrawEllipse(130, 170, 30, 20, UTIL_LCD_COLOR_RED);
 80092f2:	4b7a      	ldr	r3, [pc, #488]	@ (80094dc <LCD_Show_Feature+0x370>)
 80092f4:	9300      	str	r3, [sp, #0]
 80092f6:	2314      	movs	r3, #20
 80092f8:	221e      	movs	r2, #30
 80092fa:	21aa      	movs	r1, #170	@ 0xaa
 80092fc:	2082      	movs	r0, #130	@ 0x82
 80092fe:	f019 fdf2 	bl	8022ee6 <UTIL_LCD_DrawEllipse>
    UTIL_LCD_FillEllipse(200, 170, 30, 20, UTIL_LCD_COLOR_RED);
 8009302:	4b76      	ldr	r3, [pc, #472]	@ (80094dc <LCD_Show_Feature+0x370>)
 8009304:	9300      	str	r3, [sp, #0]
 8009306:	2314      	movs	r3, #20
 8009308:	221e      	movs	r2, #30
 800930a:	21aa      	movs	r1, #170	@ 0xaa
 800930c:	20c8      	movs	r0, #200	@ 0xc8
 800930e:	f01a f8dd 	bl	80234cc <UTIL_LCD_FillEllipse>

    UTIL_LCD_DrawHLine(20, y_size - 30, x_size / 5, UTIL_LCD_COLOR_BLACK);
 8009312:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009314:	f1a3 011e 	sub.w	r1, r3, #30
 8009318:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800931a:	4a71      	ldr	r2, [pc, #452]	@ (80094e0 <LCD_Show_Feature+0x374>)
 800931c:	fba2 2303 	umull	r2, r3, r2, r3
 8009320:	089a      	lsrs	r2, r3, #2
 8009322:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 8009326:	2014      	movs	r0, #20
 8009328:	f019 f9fe 	bl	8022728 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawLine (100, y_size - 20, 230, y_size- 50, UTIL_LCD_COLOR_BLACK);
 800932c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800932e:	f1a3 0114 	sub.w	r1, r3, #20
 8009332:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009334:	3b32      	subs	r3, #50	@ 0x32
 8009336:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 800933a:	9200      	str	r2, [sp, #0]
 800933c:	22e6      	movs	r2, #230	@ 0xe6
 800933e:	2064      	movs	r0, #100	@ 0x64
 8009340:	f019 fb8c 	bl	8022a5c <UTIL_LCD_DrawLine>
    UTIL_LCD_DrawLine (100, y_size- 50, 230, y_size- 20, UTIL_LCD_COLOR_BLACK);
 8009344:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8009346:	f1a3 0132 	sub.w	r1, r3, #50	@ 0x32
 800934a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800934c:	3b14      	subs	r3, #20
 800934e:	f04f 427f 	mov.w	r2, #4278190080	@ 0xff000000
 8009352:	9200      	str	r2, [sp, #0]
 8009354:	22e6      	movs	r2, #230	@ 0xe6
 8009356:	2064      	movs	r0, #100	@ 0x64
 8009358:	f019 fb80 	bl	8022a5c <UTIL_LCD_DrawLine>

    UTIL_LCD_DrawPolygon(Points2, 3, UTIL_LCD_COLOR_GREEN);
 800935c:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8009360:	f04f 22ff 	mov.w	r2, #4278255360	@ 0xff00ff00
 8009364:	2103      	movs	r1, #3
 8009366:	4618      	mov	r0, r3
 8009368:	f019 fd68 	bl	8022e3c <UTIL_LCD_DrawPolygon>
    HAL_Delay(2000);
 800936c:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8009370:	f008 ff10 	bl	8012194 <HAL_Delay>
    break;
 8009374:	e098      	b.n	80094a8 <LCD_Show_Feature+0x33c>

  case 2:
    /* Draw Bitmap */
    /* Draw Bitmap */
    UTIL_LCD_DrawBitmap(20, 100, (uint8_t *)stlogo);
 8009376:	4a5b      	ldr	r2, [pc, #364]	@ (80094e4 <LCD_Show_Feature+0x378>)
 8009378:	2164      	movs	r1, #100	@ 0x64
 800937a:	2014      	movs	r0, #20
 800937c:	f019 fe84 	bl	8023088 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8009380:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8009384:	f008 ff06 	bl	8012194 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size/2 - 40, 100, (uint8_t *)stlogo);
 8009388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800938a:	085b      	lsrs	r3, r3, #1
 800938c:	3b28      	subs	r3, #40	@ 0x28
 800938e:	4a55      	ldr	r2, [pc, #340]	@ (80094e4 <LCD_Show_Feature+0x378>)
 8009390:	2164      	movs	r1, #100	@ 0x64
 8009392:	4618      	mov	r0, r3
 8009394:	f019 fe78 	bl	8023088 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 8009398:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800939c:	f008 fefa 	bl	8012194 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size-100, 100, (uint8_t *)stlogo);
 80093a0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093a2:	3b64      	subs	r3, #100	@ 0x64
 80093a4:	4a4f      	ldr	r2, [pc, #316]	@ (80094e4 <LCD_Show_Feature+0x378>)
 80093a6:	2164      	movs	r1, #100	@ 0x64
 80093a8:	4618      	mov	r0, r3
 80093aa:	f019 fe6d 	bl	8023088 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 80093ae:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80093b2:	f008 feef 	bl	8012194 <HAL_Delay>

    UTIL_LCD_DrawBitmap(20, y_size- 80, (uint8_t *)stlogo);
 80093b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093b8:	3b50      	subs	r3, #80	@ 0x50
 80093ba:	4a4a      	ldr	r2, [pc, #296]	@ (80094e4 <LCD_Show_Feature+0x378>)
 80093bc:	4619      	mov	r1, r3
 80093be:	2014      	movs	r0, #20
 80093c0:	f019 fe62 	bl	8023088 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 80093c4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80093c8:	f008 fee4 	bl	8012194 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size/2 - 40, y_size- 80, (uint8_t *)stlogo);
 80093cc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093ce:	085b      	lsrs	r3, r3, #1
 80093d0:	f1a3 0028 	sub.w	r0, r3, #40	@ 0x28
 80093d4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093d6:	3b50      	subs	r3, #80	@ 0x50
 80093d8:	4a42      	ldr	r2, [pc, #264]	@ (80094e4 <LCD_Show_Feature+0x378>)
 80093da:	4619      	mov	r1, r3
 80093dc:	f019 fe54 	bl	8023088 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 80093e0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80093e4:	f008 fed6 	bl	8012194 <HAL_Delay>

    UTIL_LCD_DrawBitmap(x_size-100, y_size- 80, (uint8_t *)stlogo);
 80093e8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80093ea:	f1a3 0064 	sub.w	r0, r3, #100	@ 0x64
 80093ee:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80093f0:	3b50      	subs	r3, #80	@ 0x50
 80093f2:	4a3c      	ldr	r2, [pc, #240]	@ (80094e4 <LCD_Show_Feature+0x378>)
 80093f4:	4619      	mov	r1, r3
 80093f6:	f019 fe47 	bl	8023088 <UTIL_LCD_DrawBitmap>
    HAL_Delay(500);
 80093fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80093fe:	f008 fec9 	bl	8012194 <HAL_Delay>
    break;
 8009402:	e051      	b.n	80094a8 <LCD_Show_Feature+0x33c>

  case 3:
    UTIL_LCD_SetFont(&Font24);
 8009404:	482e      	ldr	r0, [pc, #184]	@ (80094c0 <LCD_Show_Feature+0x354>)
 8009406:	f019 f94f 	bl	80226a8 <UTIL_LCD_SetFont>
    /* Set the LCD Back Color and Text Color*/
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800940a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800940e:	f019 f937 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8009412:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8009416:	f019 f91f 	bl	8022658 <UTIL_LCD_SetTextColor>

    /*  Set the brightness */
    for( i = 100; i >= 0; i-=10)
 800941a:	2364      	movs	r3, #100	@ 0x64
 800941c:	677b      	str	r3, [r7, #116]	@ 0x74
 800941e:	e01c      	b.n	800945a <LCD_Show_Feature+0x2ee>
    {
      sprintf((char*)text," Brightness  =  %d ",(int)i);
 8009420:	f107 030c 	add.w	r3, r7, #12
 8009424:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8009426:	4930      	ldr	r1, [pc, #192]	@ (80094e8 <LCD_Show_Feature+0x37c>)
 8009428:	4618      	mov	r0, r3
 800942a:	f01c f9f1 	bl	8025810 <siprintf>
      UTIL_LCD_DisplayStringAt(0, x_size/2 + 45, (uint8_t *)text, CENTER_MODE);
 800942e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009430:	085b      	lsrs	r3, r3, #1
 8009432:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 8009436:	f107 020c 	add.w	r2, r7, #12
 800943a:	2301      	movs	r3, #1
 800943c:	2000      	movs	r0, #0
 800943e:	f019 fa5f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      BSP_LCD_SetBrightness(0,i);
 8009442:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009444:	4619      	mov	r1, r3
 8009446:	2000      	movs	r0, #0
 8009448:	f005 ffec 	bl	800f424 <BSP_LCD_SetBrightness>
      HAL_Delay(300);
 800944c:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009450:	f008 fea0 	bl	8012194 <HAL_Delay>
    for( i = 100; i >= 0; i-=10)
 8009454:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009456:	3b0a      	subs	r3, #10
 8009458:	677b      	str	r3, [r7, #116]	@ 0x74
 800945a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800945c:	2b00      	cmp	r3, #0
 800945e:	dadf      	bge.n	8009420 <LCD_Show_Feature+0x2b4>
    }

    for( i = 0; i <= 100; i+=10)
 8009460:	2300      	movs	r3, #0
 8009462:	677b      	str	r3, [r7, #116]	@ 0x74
 8009464:	e01c      	b.n	80094a0 <LCD_Show_Feature+0x334>
    {
      sprintf((char*)text," Brightness  =  %d ",(int)i);
 8009466:	f107 030c 	add.w	r3, r7, #12
 800946a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 800946c:	491e      	ldr	r1, [pc, #120]	@ (80094e8 <LCD_Show_Feature+0x37c>)
 800946e:	4618      	mov	r0, r3
 8009470:	f01c f9ce 	bl	8025810 <siprintf>
      UTIL_LCD_DisplayStringAt(0, x_size/2 + 45, (uint8_t *)text, CENTER_MODE);
 8009474:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009476:	085b      	lsrs	r3, r3, #1
 8009478:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 800947c:	f107 020c 	add.w	r2, r7, #12
 8009480:	2301      	movs	r3, #1
 8009482:	2000      	movs	r0, #0
 8009484:	f019 fa3c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      BSP_LCD_SetBrightness(0,i);
 8009488:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800948a:	4619      	mov	r1, r3
 800948c:	2000      	movs	r0, #0
 800948e:	f005 ffc9 	bl	800f424 <BSP_LCD_SetBrightness>
      HAL_Delay(300);
 8009492:	f44f 7096 	mov.w	r0, #300	@ 0x12c
 8009496:	f008 fe7d 	bl	8012194 <HAL_Delay>
    for( i = 0; i <= 100; i+=10)
 800949a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800949c:	330a      	adds	r3, #10
 800949e:	677b      	str	r3, [r7, #116]	@ 0x74
 80094a0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094a2:	2b64      	cmp	r3, #100	@ 0x64
 80094a4:	dddf      	ble.n	8009466 <LCD_Show_Feature+0x2fa>
    }
    break;
 80094a6:	bf00      	nop
  }
}
 80094a8:	bf00      	nop
 80094aa:	3778      	adds	r7, #120	@ 0x78
 80094ac:	46bd      	mov	sp, r7
 80094ae:	bdb0      	pop	{r4, r5, r7, pc}
 80094b0:	08026b88 	.word	0x08026b88
 80094b4:	08026b20 	.word	0x08026b20
 80094b8:	08026b34 	.word	0x08026b34
 80094bc:	08026b48 	.word	0x08026b48
 80094c0:	24000a44 	.word	0x24000a44
 80094c4:	08026b5c 	.word	0x08026b5c
 80094c8:	24000a4c 	.word	0x24000a4c
 80094cc:	08026b64 	.word	0x08026b64
 80094d0:	24000a54 	.word	0x24000a54
 80094d4:	08026b6c 	.word	0x08026b6c
 80094d8:	ff808080 	.word	0xff808080
 80094dc:	ffff0000 	.word	0xffff0000
 80094e0:	cccccccd 	.word	0xcccccccd
 80094e4:	08027e74 	.word	0x08027e74
 80094e8:	08026b74 	.word	0x08026b74

080094ec <main>:
 * @brief  Main program
 * @param  None
 * @retval None
 */
int main(void)
{
 80094ec:	b580      	push	{r7, lr}
 80094ee:	af00      	add	r7, sp, #0
    /* System Init, System clock, voltage scaling and L1-Cache configuration are done by CPU1
       (Cortex-M7) in the meantime Domain D2 is put in STOP mode(Cortex-M4 in deep-sleep)
    */

    /* Configure the MPU attributes as Write Through */
    MPU_Config();
 80094f0:	f000 f983 	bl	80097fa <MPU_Config>

    /* Enable the CPU Cache */
    CPU_CACHE_Enable();
 80094f4:	f000 f9de 	bl	80098b4 <CPU_CACHE_Enable>
           duration should be kept 1ms since PPP_TIMEOUT_VALUEs are defined and
           handled in milliseconds basis.
         - Set NVIC Group Priority to 4
         - Low Level Initialization
       */
    HAL_Init();
 80094f8:	f008 fdba 	bl	8012070 <HAL_Init>

    /* Configure the system clock to 400 MHz */
    SystemClock_Config();
 80094fc:	f000 f856 	bl	80095ac <SystemClock_Config>

    /* When system initialization is finished, Cortex-M7 could wakeup (when needed) the Cortex-M4 by
       means of HSEM notification or by any D2 wakeup source (SEV,EXTI..)   */

    /* Configure the Wakeup push-button in EXTI Mode */
    BSP_PB_Init(BUTTON_WAKEUP, BUTTON_MODE_EXTI);
 8009500:	2101      	movs	r1, #1
 8009502:	2000      	movs	r0, #0
 8009504:	f002 f92c 	bl	800b760 <BSP_PB_Init>
    BSP_LED_Init(LED1);
 8009508:	2000      	movs	r0, #0
 800950a:	f002 f88b 	bl	800b624 <BSP_LED_Init>
    BSP_LED_Init(LED2);
 800950e:	2001      	movs	r0, #1
 8009510:	f002 f888 	bl	800b624 <BSP_LED_Init>
    BSP_LED_Init(LED3);
 8009514:	2002      	movs	r0, #2
 8009516:	f002 f885 	bl	800b624 <BSP_LED_Init>
    BSP_LED_Init(LED4);
 800951a:	2003      	movs	r0, #3
 800951c:	f002 f882 	bl	800b624 <BSP_LED_Init>
    /*##-1- Initialize the LCD #################################################*/
    /* Initialize the LCD */
    BSP_LCD_Init(0, LCD_ORIENTATION_LANDSCAPE);
 8009520:	2101      	movs	r1, #1
 8009522:	2000      	movs	r0, #0
 8009524:	f005 fb78 	bl	800ec18 <BSP_LCD_Init>
    UTIL_LCD_SetFuncDriver(&LCD_Driver);
 8009528:	481a      	ldr	r0, [pc, #104]	@ (8009594 <main+0xa8>)
 800952a:	f019 f83f 	bl	80225ac <UTIL_LCD_SetFuncDriver>
    UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 800952e:	481a      	ldr	r0, [pc, #104]	@ (8009598 <main+0xac>)
 8009530:	f019 f8ba 	bl	80226a8 <UTIL_LCD_SetFont>
    Display_DemoDescription();
 8009534:	f000 f8a8 	bl	8009688 <Display_DemoDescription>
    /* Wait For User inputs */
    while (1)
    {
        if (ButtonState == 1)
 8009538:	4b18      	ldr	r3, [pc, #96]	@ (800959c <main+0xb0>)
 800953a:	681b      	ldr	r3, [r3, #0]
 800953c:	2b01      	cmp	r3, #1
 800953e:	d1fb      	bne.n	8009538 <main+0x4c>
        {
            HAL_Delay(400);
 8009540:	f44f 70c8 	mov.w	r0, #400	@ 0x190
 8009544:	f008 fe26 	bl	8012194 <HAL_Delay>
            ButtonState = 0;
 8009548:	4b14      	ldr	r3, [pc, #80]	@ (800959c <main+0xb0>)
 800954a:	2200      	movs	r2, #0
 800954c:	601a      	str	r2, [r3, #0]
            BSP_examples[DemoIndex++].DemoFunc();
 800954e:	4b14      	ldr	r3, [pc, #80]	@ (80095a0 <main+0xb4>)
 8009550:	781b      	ldrb	r3, [r3, #0]
 8009552:	1c5a      	adds	r2, r3, #1
 8009554:	b2d1      	uxtb	r1, r2
 8009556:	4a12      	ldr	r2, [pc, #72]	@ (80095a0 <main+0xb4>)
 8009558:	7011      	strb	r1, [r2, #0]
 800955a:	4619      	mov	r1, r3
 800955c:	4a11      	ldr	r2, [pc, #68]	@ (80095a4 <main+0xb8>)
 800955e:	460b      	mov	r3, r1
 8009560:	011b      	lsls	r3, r3, #4
 8009562:	1a5b      	subs	r3, r3, r1
 8009564:	009b      	lsls	r3, r3, #2
 8009566:	4413      	add	r3, r2
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	4798      	blx	r3

            HAL_Delay(100);
 800956c:	2064      	movs	r0, #100	@ 0x64
 800956e:	f008 fe11 	bl	8012194 <HAL_Delay>

            if (DemoIndex >= COUNT_OF_EXAMPLE(BSP_examples))
 8009572:	4b0b      	ldr	r3, [pc, #44]	@ (80095a0 <main+0xb4>)
 8009574:	781b      	ldrb	r3, [r3, #0]
 8009576:	2b0d      	cmp	r3, #13
 8009578:	d909      	bls.n	800958e <main+0xa2>
            {
                NbLoop++;
 800957a:	4b0b      	ldr	r3, [pc, #44]	@ (80095a8 <main+0xbc>)
 800957c:	781b      	ldrb	r3, [r3, #0]
 800957e:	b2db      	uxtb	r3, r3
 8009580:	3301      	adds	r3, #1
 8009582:	b2da      	uxtb	r2, r3
 8009584:	4b08      	ldr	r3, [pc, #32]	@ (80095a8 <main+0xbc>)
 8009586:	701a      	strb	r2, [r3, #0]
                DemoIndex = 0;
 8009588:	4b05      	ldr	r3, [pc, #20]	@ (80095a0 <main+0xb4>)
 800958a:	2200      	movs	r2, #0
 800958c:	701a      	strb	r2, [r3, #0]
            }
            Display_DemoDescription();
 800958e:	f000 f87b 	bl	8009688 <Display_DemoDescription>
        if (ButtonState == 1)
 8009592:	e7d1      	b.n	8009538 <main+0x4c>
 8009594:	0802a310 	.word	0x0802a310
 8009598:	24000a44 	.word	0x24000a44
 800959c:	240055c0 	.word	0x240055c0
 80095a0:	240055bd 	.word	0x240055bd
 80095a4:	24000668 	.word	0x24000668
 80095a8:	24000664 	.word	0x24000664

080095ac <SystemClock_Config>:
 *            Flash Latency(WS)              = 4
 * @param  None
 * @retval None
 */
static void SystemClock_Config(void)
{
 80095ac:	b580      	push	{r7, lr}
 80095ae:	b09e      	sub	sp, #120	@ 0x78
 80095b0:	af00      	add	r7, sp, #0
    RCC_ClkInitTypeDef RCC_ClkInitStruct;
    RCC_OscInitTypeDef RCC_OscInitStruct;
    HAL_StatusTypeDef ret = HAL_OK;
 80095b2:	2300      	movs	r3, #0
 80095b4:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    // while (!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY))
    // {
    // }

    /* Enable HSE Oscillator and activate PLL with HSE as source */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80095b8:	2301      	movs	r3, #1
 80095ba:	60bb      	str	r3, [r7, #8]
    RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80095bc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80095c0:	60fb      	str	r3, [r7, #12]
    RCC_OscInitStruct.HSIState = RCC_HSI_OFF;
 80095c2:	2300      	movs	r3, #0
 80095c4:	617b      	str	r3, [r7, #20]
    RCC_OscInitStruct.CSIState = RCC_CSI_OFF;
 80095c6:	2300      	movs	r3, #0
 80095c8:	627b      	str	r3, [r7, #36]	@ 0x24
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80095ca:	2302      	movs	r3, #2
 80095cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80095ce:	2302      	movs	r3, #2
 80095d0:	633b      	str	r3, [r7, #48]	@ 0x30

    RCC_OscInitStruct.PLL.PLLM = 5;
 80095d2:	2305      	movs	r3, #5
 80095d4:	637b      	str	r3, [r7, #52]	@ 0x34
    RCC_OscInitStruct.PLL.PLLN = 160;
 80095d6:	23a0      	movs	r3, #160	@ 0xa0
 80095d8:	63bb      	str	r3, [r7, #56]	@ 0x38
    RCC_OscInitStruct.PLL.PLLFRACN = 0;
 80095da:	2300      	movs	r3, #0
 80095dc:	653b      	str	r3, [r7, #80]	@ 0x50
    RCC_OscInitStruct.PLL.PLLP = 2;
 80095de:	2302      	movs	r3, #2
 80095e0:	63fb      	str	r3, [r7, #60]	@ 0x3c
    RCC_OscInitStruct.PLL.PLLR = 2;
 80095e2:	2302      	movs	r3, #2
 80095e4:	647b      	str	r3, [r7, #68]	@ 0x44
    RCC_OscInitStruct.PLL.PLLQ = 4;
 80095e6:	2304      	movs	r3, #4
 80095e8:	643b      	str	r3, [r7, #64]	@ 0x40

    RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOWIDE;
 80095ea:	2300      	movs	r3, #0
 80095ec:	64fb      	str	r3, [r7, #76]	@ 0x4c
    RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_2;
 80095ee:	2308      	movs	r3, #8
 80095f0:	64bb      	str	r3, [r7, #72]	@ 0x48
    ret = HAL_RCC_OscConfig(&RCC_OscInitStruct);
 80095f2:	f107 0308 	add.w	r3, r7, #8
 80095f6:	4618      	mov	r0, r3
 80095f8:	f010 fdaa 	bl	801a150 <HAL_RCC_OscConfig>
 80095fc:	4603      	mov	r3, r0
 80095fe:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8009602:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009606:	2b00      	cmp	r3, #0
 8009608:	d001      	beq.n	800960e <SystemClock_Config+0x62>
    {
        Error_Handler();
 800960a:	f000 f8ef 	bl	80097ec <Error_Handler>
    }

    /* Select PLL as system clock source and configure  bus clocks dividers */
    RCC_ClkInitStruct.ClockType =
 800960e:	233f      	movs	r3, #63	@ 0x3f
 8009610:	657b      	str	r3, [r7, #84]	@ 0x54
        (RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_D1PCLK1 | RCC_CLOCKTYPE_PCLK1 |
         RCC_CLOCKTYPE_PCLK2 | RCC_CLOCKTYPE_D3PCLK1);

    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8009612:	2303      	movs	r3, #3
 8009614:	65bb      	str	r3, [r7, #88]	@ 0x58
    RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8009616:	2300      	movs	r3, #0
 8009618:	65fb      	str	r3, [r7, #92]	@ 0x5c
    RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV2;
 800961a:	2308      	movs	r3, #8
 800961c:	663b      	str	r3, [r7, #96]	@ 0x60
    RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV2;
 800961e:	2340      	movs	r3, #64	@ 0x40
 8009620:	667b      	str	r3, [r7, #100]	@ 0x64
    RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV2;
 8009622:	2340      	movs	r3, #64	@ 0x40
 8009624:	66bb      	str	r3, [r7, #104]	@ 0x68
    RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 8009626:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800962a:	66fb      	str	r3, [r7, #108]	@ 0x6c
    RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV2;
 800962c:	2340      	movs	r3, #64	@ 0x40
 800962e:	673b      	str	r3, [r7, #112]	@ 0x70
    ret = HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4);
 8009630:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8009634:	2104      	movs	r1, #4
 8009636:	4618      	mov	r0, r3
 8009638:	f011 f9e4 	bl	801aa04 <HAL_RCC_ClockConfig>
 800963c:	4603      	mov	r3, r0
 800963e:	f887 3077 	strb.w	r3, [r7, #119]	@ 0x77
    if (ret != HAL_OK)
 8009642:	f897 3077 	ldrb.w	r3, [r7, #119]	@ 0x77
 8009646:	2b00      	cmp	r3, #0
 8009648:	d001      	beq.n	800964e <SystemClock_Config+0xa2>
    {
        Error_Handler();
 800964a:	f000 f8cf 	bl	80097ec <Error_Handler>
           - The activation of the SYSCFG clock
           - Enabling the I/O Compensation Cell : setting bit[0] of register SYSCFG_CCCSR
    */

    /*activate CSI clock mondatory for I/O Compensation Cell*/
    __HAL_RCC_CSI_ENABLE();
 800964e:	4b0d      	ldr	r3, [pc, #52]	@ (8009684 <SystemClock_Config+0xd8>)
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	4a0c      	ldr	r2, [pc, #48]	@ (8009684 <SystemClock_Config+0xd8>)
 8009654:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009658:	6013      	str	r3, [r2, #0]

    /* Enable SYSCFG clock mondatory for I/O Compensation Cell */
    __HAL_RCC_SYSCFG_CLK_ENABLE();
 800965a:	4b0a      	ldr	r3, [pc, #40]	@ (8009684 <SystemClock_Config+0xd8>)
 800965c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009660:	4a08      	ldr	r2, [pc, #32]	@ (8009684 <SystemClock_Config+0xd8>)
 8009662:	f043 0302 	orr.w	r3, r3, #2
 8009666:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800966a:	4b06      	ldr	r3, [pc, #24]	@ (8009684 <SystemClock_Config+0xd8>)
 800966c:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8009670:	f003 0302 	and.w	r3, r3, #2
 8009674:	607b      	str	r3, [r7, #4]
 8009676:	687b      	ldr	r3, [r7, #4]

    /* Enables the I/O Compensation Cell */
    HAL_EnableCompensationCell();
 8009678:	f008 fdbc 	bl	80121f4 <HAL_EnableCompensationCell>
}
 800967c:	bf00      	nop
 800967e:	3778      	adds	r7, #120	@ 0x78
 8009680:	46bd      	mov	sp, r7
 8009682:	bd80      	pop	{r7, pc}
 8009684:	58024400 	.word	0x58024400

08009688 <Display_DemoDescription>:
 * @brief  Display main demo messages
 * @param  None
 * @retval None
 */
static void Display_DemoDescription(void)
{
 8009688:	b580      	push	{r7, lr}
 800968a:	b094      	sub	sp, #80	@ 0x50
 800968c:	af02      	add	r7, sp, #8
    char desc[64];
    uint32_t x_size;
    uint32_t y_size;

    BSP_LCD_GetXSize(0, &x_size);
 800968e:	1d3b      	adds	r3, r7, #4
 8009690:	4619      	mov	r1, r3
 8009692:	2000      	movs	r0, #0
 8009694:	f005 fe50 	bl	800f338 <BSP_LCD_GetXSize>
    BSP_LCD_GetYSize(0, &y_size);
 8009698:	463b      	mov	r3, r7
 800969a:	4619      	mov	r1, r3
 800969c:	2000      	movs	r0, #0
 800969e:	f005 fe73 	bl	800f388 <BSP_LCD_GetYSize>
    /* Set LCD Foreground Layer  */
    UTIL_LCD_SetFont(&UTIL_LCD_DEFAULT_FONT);
 80096a2:	4835      	ldr	r0, [pc, #212]	@ (8009778 <Display_DemoDescription+0xf0>)
 80096a4:	f019 f800 	bl	80226a8 <UTIL_LCD_SetFont>

    /* Clear the LCD */
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 80096a8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096ac:	f018 ffe8 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 80096b0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80096b4:	f019 f8d8 	bl	8022868 <UTIL_LCD_Clear>

    /* Set the LCD Text Color */
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_DARKBLUE);
 80096b8:	4830      	ldr	r0, [pc, #192]	@ (800977c <Display_DemoDescription+0xf4>)
 80096ba:	f018 ffcd 	bl	8022658 <UTIL_LCD_SetTextColor>

    /* Display LCD messages */
    UTIL_LCD_DisplayStringAt(0, 10, (uint8_t *)"STM32H747I BSP", CENTER_MODE);
 80096be:	2301      	movs	r3, #1
 80096c0:	4a2f      	ldr	r2, [pc, #188]	@ (8009780 <Display_DemoDescription+0xf8>)
 80096c2:	210a      	movs	r1, #10
 80096c4:	2000      	movs	r0, #0
 80096c6:	f019 f91b 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(0, 35, (uint8_t *)"Drivers examples", CENTER_MODE);
 80096ca:	2301      	movs	r3, #1
 80096cc:	4a2d      	ldr	r2, [pc, #180]	@ (8009784 <Display_DemoDescription+0xfc>)
 80096ce:	2123      	movs	r1, #35	@ 0x23
 80096d0:	2000      	movs	r0, #0
 80096d2:	f019 f915 	bl	8022900 <UTIL_LCD_DisplayStringAt>

    /* Draw Bitmap */
    UTIL_LCD_DrawBitmap((x_size - 80) / 2, 65, (uint8_t *)stlogo);
 80096d6:	687b      	ldr	r3, [r7, #4]
 80096d8:	3b50      	subs	r3, #80	@ 0x50
 80096da:	085b      	lsrs	r3, r3, #1
 80096dc:	4a2a      	ldr	r2, [pc, #168]	@ (8009788 <Display_DemoDescription+0x100>)
 80096de:	2141      	movs	r1, #65	@ 0x41
 80096e0:	4618      	mov	r0, r3
 80096e2:	f019 fcd1 	bl	8023088 <UTIL_LCD_DrawBitmap>

    UTIL_LCD_SetFont(&Font12);
 80096e6:	4829      	ldr	r0, [pc, #164]	@ (800978c <Display_DemoDescription+0x104>)
 80096e8:	f018 ffde 	bl	80226a8 <UTIL_LCD_SetFont>
    UTIL_LCD_DisplayStringAt(0, y_size - 20, (uint8_t *)"Copyright (c) STMicroelectronics 2018",
 80096ec:	683b      	ldr	r3, [r7, #0]
 80096ee:	f1a3 0114 	sub.w	r1, r3, #20
 80096f2:	2301      	movs	r3, #1
 80096f4:	4a26      	ldr	r2, [pc, #152]	@ (8009790 <Display_DemoDescription+0x108>)
 80096f6:	2000      	movs	r0, #0
 80096f8:	f019 f902 	bl	8022900 <UTIL_LCD_DisplayStringAt>
                             CENTER_MODE);

    UTIL_LCD_SetFont(&Font16);
 80096fc:	4825      	ldr	r0, [pc, #148]	@ (8009794 <Display_DemoDescription+0x10c>)
 80096fe:	f018 ffd3 	bl	80226a8 <UTIL_LCD_SetFont>
    BSP_LCD_FillRect(0, 0, y_size / 2 + 15, x_size, 60, UTIL_LCD_COLOR_BLUE);
 8009702:	683b      	ldr	r3, [r7, #0]
 8009704:	085b      	lsrs	r3, r3, #1
 8009706:	f103 020f 	add.w	r2, r3, #15
 800970a:	687b      	ldr	r3, [r7, #4]
 800970c:	4922      	ldr	r1, [pc, #136]	@ (8009798 <Display_DemoDescription+0x110>)
 800970e:	9101      	str	r1, [sp, #4]
 8009710:	213c      	movs	r1, #60	@ 0x3c
 8009712:	9100      	str	r1, [sp, #0]
 8009714:	2100      	movs	r1, #0
 8009716:	2000      	movs	r0, #0
 8009718:	f006 f88a 	bl	800f830 <BSP_LCD_FillRect>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800971c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009720:	f018 ff9a 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8009724:	481c      	ldr	r0, [pc, #112]	@ (8009798 <Display_DemoDescription+0x110>)
 8009726:	f018 ffab 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_DisplayStringAt(0, y_size / 2 + 30,
 800972a:	683b      	ldr	r3, [r7, #0]
 800972c:	085b      	lsrs	r3, r3, #1
 800972e:	f103 011e 	add.w	r1, r3, #30
 8009732:	2301      	movs	r3, #1
 8009734:	4a19      	ldr	r2, [pc, #100]	@ (800979c <Display_DemoDescription+0x114>)
 8009736:	2000      	movs	r0, #0
 8009738:	f019 f8e2 	bl	8022900 <UTIL_LCD_DisplayStringAt>
                             (uint8_t *)"Press Wakeup button to start :", CENTER_MODE);
    sprintf(desc, "%s example", BSP_examples[DemoIndex].DemoName);
 800973c:	4b18      	ldr	r3, [pc, #96]	@ (80097a0 <Display_DemoDescription+0x118>)
 800973e:	781b      	ldrb	r3, [r3, #0]
 8009740:	461a      	mov	r2, r3
 8009742:	4613      	mov	r3, r2
 8009744:	011b      	lsls	r3, r3, #4
 8009746:	1a9b      	subs	r3, r3, r2
 8009748:	009b      	lsls	r3, r3, #2
 800974a:	4a16      	ldr	r2, [pc, #88]	@ (80097a4 <Display_DemoDescription+0x11c>)
 800974c:	4413      	add	r3, r2
 800974e:	1d1a      	adds	r2, r3, #4
 8009750:	f107 0308 	add.w	r3, r7, #8
 8009754:	4914      	ldr	r1, [pc, #80]	@ (80097a8 <Display_DemoDescription+0x120>)
 8009756:	4618      	mov	r0, r3
 8009758:	f01c f85a 	bl	8025810 <siprintf>
    UTIL_LCD_DisplayStringAt(0, y_size / 2 + 45, (uint8_t *)desc, CENTER_MODE);
 800975c:	683b      	ldr	r3, [r7, #0]
 800975e:	085b      	lsrs	r3, r3, #1
 8009760:	f103 012d 	add.w	r1, r3, #45	@ 0x2d
 8009764:	f107 0208 	add.w	r2, r7, #8
 8009768:	2301      	movs	r3, #1
 800976a:	2000      	movs	r0, #0
 800976c:	f019 f8c8 	bl	8022900 <UTIL_LCD_DisplayStringAt>
}
 8009770:	bf00      	nop
 8009772:	3748      	adds	r7, #72	@ 0x48
 8009774:	46bd      	mov	sp, r7
 8009776:	bd80      	pop	{r7, pc}
 8009778:	24000a44 	.word	0x24000a44
 800977c:	ff000080 	.word	0xff000080
 8009780:	08026ba8 	.word	0x08026ba8
 8009784:	08026bb8 	.word	0x08026bb8
 8009788:	08027e74 	.word	0x08027e74
 800978c:	24000a5c 	.word	0x24000a5c
 8009790:	08026bcc 	.word	0x08026bcc
 8009794:	24000a54 	.word	0x24000a54
 8009798:	ff0000ff 	.word	0xff0000ff
 800979c:	08026bf4 	.word	0x08026bf4
 80097a0:	240055bd 	.word	0x240055bd
 80097a4:	24000668 	.word	0x24000668
 80097a8:	08026c14 	.word	0x08026c14

080097ac <CheckForUserInput>:
/**
 * @brief  Check for user input
 * @param  None
 * @retval Input state (1 : active / 0 : Inactive)
 */
uint8_t CheckForUserInput(void) { return ButtonState; }
 80097ac:	b480      	push	{r7}
 80097ae:	af00      	add	r7, sp, #0
 80097b0:	4b03      	ldr	r3, [pc, #12]	@ (80097c0 <CheckForUserInput+0x14>)
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	b2db      	uxtb	r3, r3
 80097b6:	4618      	mov	r0, r3
 80097b8:	46bd      	mov	sp, r7
 80097ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097be:	4770      	bx	lr
 80097c0:	240055c0 	.word	0x240055c0

080097c4 <BSP_PB_Callback>:
 * @brief  Button Callback
 * @param  Button Specifies the pin connected EXTI line
 * @retval None
 */
void BSP_PB_Callback(Button_TypeDef Button)
{
 80097c4:	b480      	push	{r7}
 80097c6:	b083      	sub	sp, #12
 80097c8:	af00      	add	r7, sp, #0
 80097ca:	4603      	mov	r3, r0
 80097cc:	71fb      	strb	r3, [r7, #7]
    if (Button == BUTTON_WAKEUP)
 80097ce:	79fb      	ldrb	r3, [r7, #7]
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	d102      	bne.n	80097da <BSP_PB_Callback+0x16>
    {

        ButtonState = 1;
 80097d4:	4b04      	ldr	r3, [pc, #16]	@ (80097e8 <BSP_PB_Callback+0x24>)
 80097d6:	2201      	movs	r2, #1
 80097d8:	601a      	str	r2, [r3, #0]
    }
}
 80097da:	bf00      	nop
 80097dc:	370c      	adds	r7, #12
 80097de:	46bd      	mov	sp, r7
 80097e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097e4:	4770      	bx	lr
 80097e6:	bf00      	nop
 80097e8:	240055c0 	.word	0x240055c0

080097ec <Error_Handler>:
 * @brief  This function is executed in case of error occurrence.
 * @param  None
 * @retval None
 */
void Error_Handler(void)
{
 80097ec:	b580      	push	{r7, lr}
 80097ee:	af00      	add	r7, sp, #0
    /* Turn LED REDon */
    BSP_LED_On(LED_RED);
 80097f0:	2002      	movs	r0, #2
 80097f2:	f001 ff5b 	bl	800b6ac <BSP_LED_On>
    while (1)
 80097f6:	bf00      	nop
 80097f8:	e7fd      	b.n	80097f6 <Error_Handler+0xa>

080097fa <MPU_Config>:
 *         The Region Size is 32MB.
 * @param  None
 * @retval None
 */
static void MPU_Config(void)
{
 80097fa:	b580      	push	{r7, lr}
 80097fc:	b084      	sub	sp, #16
 80097fe:	af00      	add	r7, sp, #0
    MPU_Region_InitTypeDef MPU_InitStruct;

    /* Disable the MPU */
    HAL_MPU_Disable();
 8009800:	f008 fe4a 	bl	8012498 <HAL_MPU_Disable>

    /* Configure the MPU as Strongly ordered for not defined regions */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009804:	2301      	movs	r3, #1
 8009806:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x00;
 8009808:	2300      	movs	r3, #0
 800980a:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_4GB;
 800980c:	231f      	movs	r3, #31
 800980e:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_NO_ACCESS;
 8009810:	2300      	movs	r3, #0
 8009812:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009814:	2300      	movs	r3, #0
 8009816:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_NOT_CACHEABLE;
 8009818:	2300      	movs	r3, #0
 800981a:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_SHAREABLE;
 800981c:	2301      	movs	r3, #1
 800981e:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER0;
 8009820:	2300      	movs	r3, #0
 8009822:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009824:	2300      	movs	r3, #0
 8009826:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x87;
 8009828:	2387      	movs	r3, #135	@ 0x87
 800982a:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_DISABLE;
 800982c:	2301      	movs	r3, #1
 800982e:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009830:	463b      	mov	r3, r7
 8009832:	4618      	mov	r0, r3
 8009834:	f008 fe68 	bl	8012508 <HAL_MPU_ConfigRegion>

    /* Configure the MPU attributes as WT for SDRAM */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 8009838:	2301      	movs	r3, #1
 800983a:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = SDRAM_DEVICE_ADDR;
 800983c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 8009840:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_32MB;
 8009842:	2318      	movs	r3, #24
 8009844:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 8009846:	2303      	movs	r3, #3
 8009848:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 800984a:	2300      	movs	r3, #0
 800984c:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 800984e:	2301      	movs	r3, #1
 8009850:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8009852:	2300      	movs	r3, #0
 8009854:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER1;
 8009856:	2301      	movs	r3, #1
 8009858:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 800985a:	2300      	movs	r3, #0
 800985c:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x00;
 800985e:	2300      	movs	r3, #0
 8009860:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8009862:	2300      	movs	r3, #0
 8009864:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 8009866:	463b      	mov	r3, r7
 8009868:	4618      	mov	r0, r3
 800986a:	f008 fe4d 	bl	8012508 <HAL_MPU_ConfigRegion>

    /* Configure the MPU QSPI flash */
    MPU_InitStruct.Enable = MPU_REGION_ENABLE;
 800986e:	2301      	movs	r3, #1
 8009870:	703b      	strb	r3, [r7, #0]
    MPU_InitStruct.BaseAddress = 0x90000000;
 8009872:	f04f 4310 	mov.w	r3, #2415919104	@ 0x90000000
 8009876:	607b      	str	r3, [r7, #4]
    MPU_InitStruct.Size = MPU_REGION_SIZE_128MB;
 8009878:	231a      	movs	r3, #26
 800987a:	723b      	strb	r3, [r7, #8]
    MPU_InitStruct.AccessPermission = MPU_REGION_FULL_ACCESS;
 800987c:	2303      	movs	r3, #3
 800987e:	72fb      	strb	r3, [r7, #11]
    MPU_InitStruct.IsBufferable = MPU_ACCESS_NOT_BUFFERABLE;
 8009880:	2300      	movs	r3, #0
 8009882:	73fb      	strb	r3, [r7, #15]
    MPU_InitStruct.IsCacheable = MPU_ACCESS_CACHEABLE;
 8009884:	2301      	movs	r3, #1
 8009886:	73bb      	strb	r3, [r7, #14]
    MPU_InitStruct.IsShareable = MPU_ACCESS_NOT_SHAREABLE;
 8009888:	2300      	movs	r3, #0
 800988a:	737b      	strb	r3, [r7, #13]
    MPU_InitStruct.Number = MPU_REGION_NUMBER2;
 800988c:	2302      	movs	r3, #2
 800988e:	707b      	strb	r3, [r7, #1]
    MPU_InitStruct.TypeExtField = MPU_TEX_LEVEL0;
 8009890:	2300      	movs	r3, #0
 8009892:	72bb      	strb	r3, [r7, #10]
    MPU_InitStruct.SubRegionDisable = 0x0;
 8009894:	2300      	movs	r3, #0
 8009896:	727b      	strb	r3, [r7, #9]
    MPU_InitStruct.DisableExec = MPU_INSTRUCTION_ACCESS_ENABLE;
 8009898:	2300      	movs	r3, #0
 800989a:	733b      	strb	r3, [r7, #12]

    HAL_MPU_ConfigRegion(&MPU_InitStruct);
 800989c:	463b      	mov	r3, r7
 800989e:	4618      	mov	r0, r3
 80098a0:	f008 fe32 	bl	8012508 <HAL_MPU_ConfigRegion>

    /* Enable the MPU */
    HAL_MPU_Enable(MPU_PRIVILEGED_DEFAULT);
 80098a4:	2004      	movs	r0, #4
 80098a6:	f008 fe0f 	bl	80124c8 <HAL_MPU_Enable>
}
 80098aa:	bf00      	nop
 80098ac:	3710      	adds	r7, #16
 80098ae:	46bd      	mov	sp, r7
 80098b0:	bd80      	pop	{r7, pc}
	...

080098b4 <CPU_CACHE_Enable>:
 * @brief  CPU L1-Cache enable.
 * @param  None
 * @retval None
 */
static void CPU_CACHE_Enable(void)
{
 80098b4:	b480      	push	{r7}
 80098b6:	b085      	sub	sp, #20
 80098b8:	af00      	add	r7, sp, #0
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80098ba:	4b34      	ldr	r3, [pc, #208]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 80098bc:	695b      	ldr	r3, [r3, #20]
 80098be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80098c2:	2b00      	cmp	r3, #0
 80098c4:	d11b      	bne.n	80098fe <CPU_CACHE_Enable+0x4a>
  __ASM volatile ("dsb 0xF":::"memory");
 80098c6:	f3bf 8f4f 	dsb	sy
}
 80098ca:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80098cc:	f3bf 8f6f 	isb	sy
}
 80098d0:	bf00      	nop
    SCB->ICIALLU = 0UL;                     /* invalidate I-Cache */
 80098d2:	4b2e      	ldr	r3, [pc, #184]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 80098d4:	2200      	movs	r2, #0
 80098d6:	f8c3 2250 	str.w	r2, [r3, #592]	@ 0x250
  __ASM volatile ("dsb 0xF":::"memory");
 80098da:	f3bf 8f4f 	dsb	sy
}
 80098de:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80098e0:	f3bf 8f6f 	isb	sy
}
 80098e4:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_IC_Msk;  /* enable I-Cache */
 80098e6:	4b29      	ldr	r3, [pc, #164]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 80098e8:	695b      	ldr	r3, [r3, #20]
 80098ea:	4a28      	ldr	r2, [pc, #160]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 80098ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80098f0:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 80098f2:	f3bf 8f4f 	dsb	sy
}
 80098f6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80098f8:	f3bf 8f6f 	isb	sy
}
 80098fc:	e000      	b.n	8009900 <CPU_CACHE_Enable+0x4c>
    if (SCB->CCR & SCB_CCR_IC_Msk) return;  /* return if ICache is already enabled */
 80098fe:	bf00      	nop
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 8009900:	4b22      	ldr	r3, [pc, #136]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 8009902:	695b      	ldr	r3, [r3, #20]
 8009904:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8009908:	2b00      	cmp	r3, #0
 800990a:	d138      	bne.n	800997e <CPU_CACHE_Enable+0xca>
    SCB->CSSELR = 0U;                       /* select Level 1 data cache */
 800990c:	4b1f      	ldr	r3, [pc, #124]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 800990e:	2200      	movs	r2, #0
 8009910:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
  __ASM volatile ("dsb 0xF":::"memory");
 8009914:	f3bf 8f4f 	dsb	sy
}
 8009918:	bf00      	nop
    ccsidr = SCB->CCSIDR;
 800991a:	4b1c      	ldr	r3, [pc, #112]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 800991c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8009920:	60fb      	str	r3, [r7, #12]
    sets = (uint32_t)(CCSIDR_SETS(ccsidr));
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	0b5b      	lsrs	r3, r3, #13
 8009926:	f3c3 030e 	ubfx	r3, r3, #0, #15
 800992a:	60bb      	str	r3, [r7, #8]
      ways = (uint32_t)(CCSIDR_WAYS(ccsidr));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	08db      	lsrs	r3, r3, #3
 8009930:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8009934:	607b      	str	r3, [r7, #4]
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009936:	68bb      	ldr	r3, [r7, #8]
 8009938:	015a      	lsls	r2, r3, #5
 800993a:	f643 73e0 	movw	r3, #16352	@ 0x3fe0
 800993e:	4013      	ands	r3, r2
                      ((ways << SCB_DCISW_WAY_Pos) & SCB_DCISW_WAY_Msk)  );
 8009940:	687a      	ldr	r2, [r7, #4]
 8009942:	0792      	lsls	r2, r2, #30
        SCB->DCISW = (((sets << SCB_DCISW_SET_Pos) & SCB_DCISW_SET_Msk) |
 8009944:	4911      	ldr	r1, [pc, #68]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 8009946:	4313      	orrs	r3, r2
 8009948:	f8c1 3260 	str.w	r3, [r1, #608]	@ 0x260
      } while (ways-- != 0U);
 800994c:	687b      	ldr	r3, [r7, #4]
 800994e:	1e5a      	subs	r2, r3, #1
 8009950:	607a      	str	r2, [r7, #4]
 8009952:	2b00      	cmp	r3, #0
 8009954:	d1ef      	bne.n	8009936 <CPU_CACHE_Enable+0x82>
    } while(sets-- != 0U);
 8009956:	68bb      	ldr	r3, [r7, #8]
 8009958:	1e5a      	subs	r2, r3, #1
 800995a:	60ba      	str	r2, [r7, #8]
 800995c:	2b00      	cmp	r3, #0
 800995e:	d1e5      	bne.n	800992c <CPU_CACHE_Enable+0x78>
  __ASM volatile ("dsb 0xF":::"memory");
 8009960:	f3bf 8f4f 	dsb	sy
}
 8009964:	bf00      	nop
    SCB->CCR |=  (uint32_t)SCB_CCR_DC_Msk;  /* enable D-Cache */
 8009966:	4b09      	ldr	r3, [pc, #36]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 8009968:	695b      	ldr	r3, [r3, #20]
 800996a:	4a08      	ldr	r2, [pc, #32]	@ (800998c <CPU_CACHE_Enable+0xd8>)
 800996c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8009970:	6153      	str	r3, [r2, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009972:	f3bf 8f4f 	dsb	sy
}
 8009976:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009978:	f3bf 8f6f 	isb	sy
}
 800997c:	e000      	b.n	8009980 <CPU_CACHE_Enable+0xcc>
    if (SCB->CCR & SCB_CCR_DC_Msk) return;  /* return if DCache is already enabled */
 800997e:	bf00      	nop
    /* Enable I-Cache */
    SCB_EnableICache();

    /* Enable D-Cache */
    SCB_EnableDCache();
}
 8009980:	bf00      	nop
 8009982:	3714      	adds	r7, #20
 8009984:	46bd      	mov	sp, r7
 8009986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800998a:	4770      	bx	lr
 800998c:	e000ed00 	.word	0xe000ed00

08009990 <QSPI_demo>:
  * @brief  QSPI Demo
  * @param  None
  * @retval None
  */
void QSPI_demo (void)
{
 8009990:	b580      	push	{r7, lr}
 8009992:	b088      	sub	sp, #32
 8009994:	af00      	add	r7, sp, #0
  /* QSPI info structure */
  BSP_QSPI_Info_t pQSPI_Info;
  uint8_t status;

  QSPI_SetHint();
 8009996:	f000 f93f 	bl	8009c18 <QSPI_SetHint>

  /*##-1- Configure the QSPI device ##########################################*/
  /* QSPI device configuration */
  BSP_QSPI_Init_t init ;
  init.InterfaceMode=MT25TL01G_QPI_MODE;
 800999a:	2303      	movs	r3, #3
 800999c:	713b      	strb	r3, [r7, #4]
  init.TransferRate= MT25TL01G_DTR_TRANSFER ;
 800999e:	2301      	movs	r3, #1
 80099a0:	717b      	strb	r3, [r7, #5]
  init.DualFlashMode= MT25TL01G_DUALFLASH_ENABLE;
 80099a2:	2340      	movs	r3, #64	@ 0x40
 80099a4:	71bb      	strb	r3, [r7, #6]
  status = BSP_QSPI_Init(0,&init);
 80099a6:	1d3b      	adds	r3, r7, #4
 80099a8:	4619      	mov	r1, r3
 80099aa:	2000      	movs	r0, #0
 80099ac:	f006 fadc 	bl	800ff68 <BSP_QSPI_Init>
 80099b0:	4603      	mov	r3, r0
 80099b2:	77fb      	strb	r3, [r7, #31]

  if (status != BSP_ERROR_NONE)
 80099b4:	7ffb      	ldrb	r3, [r7, #31]
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d024      	beq.n	8009a04 <QSPI_demo+0x74>
  {
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : FAILED.", LEFT_MODE);
 80099ba:	2303      	movs	r3, #3
 80099bc:	4a80      	ldr	r2, [pc, #512]	@ (8009bc0 <QSPI_demo+0x230>)
 80099be:	2164      	movs	r1, #100	@ 0x64
 80099c0:	2014      	movs	r0, #20
 80099c2:	f018 ff9d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 80099c6:	2303      	movs	r3, #3
 80099c8:	4a7e      	ldr	r2, [pc, #504]	@ (8009bc4 <QSPI_demo+0x234>)
 80099ca:	2173      	movs	r1, #115	@ 0x73
 80099cc:	2014      	movs	r0, #20
 80099ce:	f018 ff97 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"Check the hardware configuration :", LEFT_MODE);
 80099d2:	2303      	movs	r3, #3
 80099d4:	4a7c      	ldr	r2, [pc, #496]	@ (8009bc8 <QSPI_demo+0x238>)
 80099d6:	2191      	movs	r1, #145	@ 0x91
 80099d8:	2014      	movs	r0, #20
 80099da:	f018 ff91 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"  refer to the UM of the board", LEFT_MODE);
 80099de:	2303      	movs	r3, #3
 80099e0:	4a7a      	ldr	r2, [pc, #488]	@ (8009bcc <QSPI_demo+0x23c>)
 80099e2:	21a0      	movs	r1, #160	@ 0xa0
 80099e4:	2014      	movs	r0, #20
 80099e6:	f018 ff8b 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"  for the hardware modifications", LEFT_MODE);
 80099ea:	2303      	movs	r3, #3
 80099ec:	4a78      	ldr	r2, [pc, #480]	@ (8009bd0 <QSPI_demo+0x240>)
 80099ee:	21af      	movs	r1, #175	@ 0xaf
 80099f0:	2014      	movs	r0, #20
 80099f2:	f018 ff85 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"  to connect the QSPI memory", LEFT_MODE);
 80099f6:	2303      	movs	r3, #3
 80099f8:	4a76      	ldr	r2, [pc, #472]	@ (8009bd4 <QSPI_demo+0x244>)
 80099fa:	21be      	movs	r1, #190	@ 0xbe
 80099fc:	2014      	movs	r0, #20
 80099fe:	f018 ff7f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009a02:	e0d3      	b.n	8009bac <QSPI_demo+0x21c>
  }

  else
  {
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t*)"QSPI Initialization : OK.", LEFT_MODE);
 8009a04:	2303      	movs	r3, #3
 8009a06:	4a74      	ldr	r2, [pc, #464]	@ (8009bd8 <QSPI_demo+0x248>)
 8009a08:	2164      	movs	r1, #100	@ 0x64
 8009a0a:	2014      	movs	r0, #20
 8009a0c:	f018 ff78 	bl	8022900 <UTIL_LCD_DisplayStringAt>

    /*##-2- Read & check the QSPI info #######################################*/
    /* Initialize the structure */
    pQSPI_Info.FlashSize          = (uint32_t)0x00;
 8009a10:	2300      	movs	r3, #0
 8009a12:	60bb      	str	r3, [r7, #8]
    pQSPI_Info.EraseSectorSize    = (uint32_t)0x00;
 8009a14:	2300      	movs	r3, #0
 8009a16:	60fb      	str	r3, [r7, #12]
    pQSPI_Info.EraseSectorsNumber = (uint32_t)0x00;
 8009a18:	2300      	movs	r3, #0
 8009a1a:	613b      	str	r3, [r7, #16]
    pQSPI_Info.ProgPageSize       = (uint32_t)0x00;
 8009a1c:	2300      	movs	r3, #0
 8009a1e:	617b      	str	r3, [r7, #20]
    pQSPI_Info.ProgPagesNumber    = (uint32_t)0x00;
 8009a20:	2300      	movs	r3, #0
 8009a22:	61bb      	str	r3, [r7, #24]

    /* Read the QSPI memory info */
    BSP_QSPI_GetInfo(0,&pQSPI_Info);
 8009a24:	f107 0308 	add.w	r3, r7, #8
 8009a28:	4619      	mov	r1, r3
 8009a2a:	2000      	movs	r0, #0
 8009a2c:	f006 fcba 	bl	80103a4 <BSP_QSPI_GetInfo>

    /* Test the correctness */
    if((pQSPI_Info.FlashSize != 0x8000000) || (pQSPI_Info.EraseSectorSize != 0x2000)  ||
 8009a30:	68bb      	ldr	r3, [r7, #8]
 8009a32:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8009a36:	d10f      	bne.n	8009a58 <QSPI_demo+0xc8>
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8009a3e:	d10b      	bne.n	8009a58 <QSPI_demo+0xc8>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 0x4000) ||
 8009a40:	697b      	ldr	r3, [r7, #20]
    if((pQSPI_Info.FlashSize != 0x8000000) || (pQSPI_Info.EraseSectorSize != 0x2000)  ||
 8009a42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8009a46:	d107      	bne.n	8009a58 <QSPI_demo+0xc8>
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 0x4000) ||
 8009a48:	693b      	ldr	r3, [r7, #16]
 8009a4a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8009a4e:	d103      	bne.n	8009a58 <QSPI_demo+0xc8>
         (pQSPI_Info.ProgPagesNumber != 0x80000))
 8009a50:	69bb      	ldr	r3, [r7, #24]
       (pQSPI_Info.ProgPageSize != 0x100)  || (pQSPI_Info.EraseSectorsNumber != 0x4000) ||
 8009a52:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8009a56:	d00c      	beq.n	8009a72 <QSPI_demo+0xe2>
    {
      UTIL_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : FAILED.", LEFT_MODE);
 8009a58:	2303      	movs	r3, #3
 8009a5a:	4a60      	ldr	r2, [pc, #384]	@ (8009bdc <QSPI_demo+0x24c>)
 8009a5c:	2173      	movs	r1, #115	@ 0x73
 8009a5e:	2014      	movs	r0, #20
 8009a60:	f018 ff4e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009a64:	2303      	movs	r3, #3
 8009a66:	4a57      	ldr	r2, [pc, #348]	@ (8009bc4 <QSPI_demo+0x234>)
 8009a68:	2182      	movs	r1, #130	@ 0x82
 8009a6a:	2014      	movs	r0, #20
 8009a6c:	f018 ff48 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009a70:	e09c      	b.n	8009bac <QSPI_demo+0x21c>
    }
    else
    {
      UTIL_LCD_DisplayStringAt(20, 115, (uint8_t*)"QSPI GET INFO : OK.   ", LEFT_MODE);
 8009a72:	2303      	movs	r3, #3
 8009a74:	4a5a      	ldr	r2, [pc, #360]	@ (8009be0 <QSPI_demo+0x250>)
 8009a76:	2173      	movs	r1, #115	@ 0x73
 8009a78:	2014      	movs	r0, #20
 8009a7a:	f018 ff41 	bl	8022900 <UTIL_LCD_DisplayStringAt>

      /*##-3- Erase QSPI memory ################################################*/
      if(BSP_QSPI_EraseBlock(0,WRITE_READ_ADDR,BSP_QSPI_ERASE_8K) != BSP_ERROR_NONE)
 8009a7e:	2200      	movs	r2, #0
 8009a80:	2150      	movs	r1, #80	@ 0x50
 8009a82:	2000      	movs	r0, #0
 8009a84:	f006 fc38 	bl	80102f8 <BSP_QSPI_EraseBlock>
 8009a88:	4603      	mov	r3, r0
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	d00c      	beq.n	8009aa8 <QSPI_demo+0x118>
      {
        UTIL_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : FAILED.", LEFT_MODE);
 8009a8e:	2303      	movs	r3, #3
 8009a90:	4a54      	ldr	r2, [pc, #336]	@ (8009be4 <QSPI_demo+0x254>)
 8009a92:	2182      	movs	r1, #130	@ 0x82
 8009a94:	2014      	movs	r0, #20
 8009a96:	f018 ff33 	bl	8022900 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009a9a:	2303      	movs	r3, #3
 8009a9c:	4a49      	ldr	r2, [pc, #292]	@ (8009bc4 <QSPI_demo+0x234>)
 8009a9e:	2191      	movs	r1, #145	@ 0x91
 8009aa0:	2014      	movs	r0, #20
 8009aa2:	f018 ff2d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009aa6:	e081      	b.n	8009bac <QSPI_demo+0x21c>
      }
      else
      {
        UTIL_LCD_DisplayStringAt(20, 130, (uint8_t*)"QSPI ERASE : OK.   ", LEFT_MODE);
 8009aa8:	2303      	movs	r3, #3
 8009aaa:	4a4f      	ldr	r2, [pc, #316]	@ (8009be8 <QSPI_demo+0x258>)
 8009aac:	2182      	movs	r1, #130	@ 0x82
 8009aae:	2014      	movs	r0, #20
 8009ab0:	f018 ff26 	bl	8022900 <UTIL_LCD_DisplayStringAt>

        /*##-4- QSPI memory read/write access  #################################*/
        /* Fill the buffer to write */
        Fill_Buffer(qspi_aTxBuffer, BUFFER_SIZE, 0xD20F);
 8009ab4:	f24d 220f 	movw	r2, #53775	@ 0xd20f
 8009ab8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 8009abc:	484b      	ldr	r0, [pc, #300]	@ (8009bec <QSPI_demo+0x25c>)
 8009abe:	f000 f919 	bl	8009cf4 <Fill_Buffer>

        /* Write data to the QSPI memory */
        if(BSP_QSPI_Write(0,qspi_aTxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != BSP_ERROR_NONE)
 8009ac2:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009ac6:	2250      	movs	r2, #80	@ 0x50
 8009ac8:	4948      	ldr	r1, [pc, #288]	@ (8009bec <QSPI_demo+0x25c>)
 8009aca:	2000      	movs	r0, #0
 8009acc:	f006 fb78 	bl	80101c0 <BSP_QSPI_Write>
 8009ad0:	4603      	mov	r3, r0
 8009ad2:	2b00      	cmp	r3, #0
 8009ad4:	d00c      	beq.n	8009af0 <QSPI_demo+0x160>
        {
          UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : FAILED.", LEFT_MODE);
 8009ad6:	2303      	movs	r3, #3
 8009ad8:	4a45      	ldr	r2, [pc, #276]	@ (8009bf0 <QSPI_demo+0x260>)
 8009ada:	2191      	movs	r1, #145	@ 0x91
 8009adc:	2014      	movs	r0, #20
 8009ade:	f018 ff0f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009ae2:	2303      	movs	r3, #3
 8009ae4:	4a37      	ldr	r2, [pc, #220]	@ (8009bc4 <QSPI_demo+0x234>)
 8009ae6:	21a0      	movs	r1, #160	@ 0xa0
 8009ae8:	2014      	movs	r0, #20
 8009aea:	f018 ff09 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009aee:	e05d      	b.n	8009bac <QSPI_demo+0x21c>
        }
        else
        {
          UTIL_LCD_DisplayStringAt(20, 145, (uint8_t*)"QSPI WRITE : OK.     ", LEFT_MODE);
 8009af0:	2303      	movs	r3, #3
 8009af2:	4a40      	ldr	r2, [pc, #256]	@ (8009bf4 <QSPI_demo+0x264>)
 8009af4:	2191      	movs	r1, #145	@ 0x91
 8009af6:	2014      	movs	r0, #20
 8009af8:	f018 ff02 	bl	8022900 <UTIL_LCD_DisplayStringAt>

          /* Read back data from the QSPI memory */
          if(BSP_QSPI_Read(0,qspi_aRxBuffer, WRITE_READ_ADDR, BUFFER_SIZE) != BSP_ERROR_NONE)
 8009afc:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8009b00:	2250      	movs	r2, #80	@ 0x50
 8009b02:	493d      	ldr	r1, [pc, #244]	@ (8009bf8 <QSPI_demo+0x268>)
 8009b04:	2000      	movs	r0, #0
 8009b06:	f006 fb09 	bl	801011c <BSP_QSPI_Read>
 8009b0a:	4603      	mov	r3, r0
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d00c      	beq.n	8009b2a <QSPI_demo+0x19a>
          {
            UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ : FAILED.", LEFT_MODE);
 8009b10:	2303      	movs	r3, #3
 8009b12:	4a3a      	ldr	r2, [pc, #232]	@ (8009bfc <QSPI_demo+0x26c>)
 8009b14:	21a0      	movs	r1, #160	@ 0xa0
 8009b16:	2014      	movs	r0, #20
 8009b18:	f018 fef2 	bl	8022900 <UTIL_LCD_DisplayStringAt>
            UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009b1c:	2303      	movs	r3, #3
 8009b1e:	4a29      	ldr	r2, [pc, #164]	@ (8009bc4 <QSPI_demo+0x234>)
 8009b20:	21af      	movs	r1, #175	@ 0xaf
 8009b22:	2014      	movs	r0, #20
 8009b24:	f018 feec 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009b28:	e040      	b.n	8009bac <QSPI_demo+0x21c>
          }
          else
          {
            UTIL_LCD_DisplayStringAt(20, 160, (uint8_t*)"QSPI READ :  OK.    ", LEFT_MODE);
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	4a34      	ldr	r2, [pc, #208]	@ (8009c00 <QSPI_demo+0x270>)
 8009b2e:	21a0      	movs	r1, #160	@ 0xa0
 8009b30:	2014      	movs	r0, #20
 8009b32:	f018 fee5 	bl	8022900 <UTIL_LCD_DisplayStringAt>

            /*##-5- Checking data integrity ############################################*/
            if(Buffercmp(qspi_aRxBuffer, qspi_aTxBuffer, BUFFER_SIZE) > 0)
 8009b36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8009b3a:	492c      	ldr	r1, [pc, #176]	@ (8009bec <QSPI_demo+0x25c>)
 8009b3c:	482e      	ldr	r0, [pc, #184]	@ (8009bf8 <QSPI_demo+0x268>)
 8009b3e:	f000 f8fc 	bl	8009d3a <Buffercmp>
 8009b42:	4603      	mov	r3, r0
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d00c      	beq.n	8009b62 <QSPI_demo+0x1d2>
            {
              UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : FAILED.", LEFT_MODE);
 8009b48:	2303      	movs	r3, #3
 8009b4a:	4a2e      	ldr	r2, [pc, #184]	@ (8009c04 <QSPI_demo+0x274>)
 8009b4c:	21af      	movs	r1, #175	@ 0xaf
 8009b4e:	2014      	movs	r0, #20
 8009b50:	f018 fed6 	bl	8022900 <UTIL_LCD_DisplayStringAt>
              UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009b54:	2303      	movs	r3, #3
 8009b56:	4a1b      	ldr	r2, [pc, #108]	@ (8009bc4 <QSPI_demo+0x234>)
 8009b58:	21be      	movs	r1, #190	@ 0xbe
 8009b5a:	2014      	movs	r0, #20
 8009b5c:	f018 fed0 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009b60:	e024      	b.n	8009bac <QSPI_demo+0x21c>
            }
            else
            {
              UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI COMPARE : OK.     ", LEFT_MODE);
 8009b62:	2303      	movs	r3, #3
 8009b64:	4a28      	ldr	r2, [pc, #160]	@ (8009c08 <QSPI_demo+0x278>)
 8009b66:	21af      	movs	r1, #175	@ 0xaf
 8009b68:	2014      	movs	r0, #20
 8009b6a:	f018 fec9 	bl	8022900 <UTIL_LCD_DisplayStringAt>
              /*##-6-Memory Mapped Mode ###############################################*/
             if(BSP_QSPI_EnableMemoryMappedMode(0)!=BSP_ERROR_NONE)
 8009b6e:	2000      	movs	r0, #0
 8009b70:	f006 fc2e 	bl	80103d0 <BSP_QSPI_EnableMemoryMappedMode>
 8009b74:	4603      	mov	r3, r0
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d00c      	beq.n	8009b94 <QSPI_demo+0x204>
             {
               UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Memory Mapped Mode : FAILED.     ", LEFT_MODE);
 8009b7a:	2303      	movs	r3, #3
 8009b7c:	4a23      	ldr	r2, [pc, #140]	@ (8009c0c <QSPI_demo+0x27c>)
 8009b7e:	21be      	movs	r1, #190	@ 0xbe
 8009b80:	2014      	movs	r0, #20
 8009b82:	f018 febd 	bl	8022900 <UTIL_LCD_DisplayStringAt>
               UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Test Aborted.", LEFT_MODE);
 8009b86:	2303      	movs	r3, #3
 8009b88:	4a0e      	ldr	r2, [pc, #56]	@ (8009bc4 <QSPI_demo+0x234>)
 8009b8a:	21be      	movs	r1, #190	@ 0xbe
 8009b8c:	2014      	movs	r0, #20
 8009b8e:	f018 feb7 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009b92:	e00b      	b.n	8009bac <QSPI_demo+0x21c>
             }
             else
             {
               UTIL_LCD_DisplayStringAt(20, 190, (uint8_t*)"QSPI Memory Mapped Mode : OK.     ", LEFT_MODE);
 8009b94:	2303      	movs	r3, #3
 8009b96:	4a1e      	ldr	r2, [pc, #120]	@ (8009c10 <QSPI_demo+0x280>)
 8009b98:	21be      	movs	r1, #190	@ 0xbe
 8009b9a:	2014      	movs	r0, #20
 8009b9c:	f018 feb0 	bl	8022900 <UTIL_LCD_DisplayStringAt>
               UTIL_LCD_DisplayStringAt(20, 175, (uint8_t*)"QSPI Test : OK.     ", LEFT_MODE);
 8009ba0:	2303      	movs	r3, #3
 8009ba2:	4a1c      	ldr	r2, [pc, #112]	@ (8009c14 <QSPI_demo+0x284>)
 8009ba4:	21af      	movs	r1, #175	@ 0xaf
 8009ba6:	2014      	movs	r0, #20
 8009ba8:	f018 feaa 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    }
  }

  while (1)
  {
    if(CheckForUserInput() > 0)
 8009bac:	f7ff fdfe 	bl	80097ac <CheckForUserInput>
 8009bb0:	4603      	mov	r3, r0
 8009bb2:	2b00      	cmp	r3, #0
 8009bb4:	d100      	bne.n	8009bb8 <QSPI_demo+0x228>
 8009bb6:	e7f9      	b.n	8009bac <QSPI_demo+0x21c>
    {
      return;
 8009bb8:	bf00      	nop
    }
  }
}
 8009bba:	3720      	adds	r7, #32
 8009bbc:	46bd      	mov	sp, r7
 8009bbe:	bd80      	pop	{r7, pc}
 8009bc0:	08026c20 	.word	0x08026c20
 8009bc4:	08026c40 	.word	0x08026c40
 8009bc8:	08026c54 	.word	0x08026c54
 8009bcc:	08026c78 	.word	0x08026c78
 8009bd0:	08026c98 	.word	0x08026c98
 8009bd4:	08026cbc 	.word	0x08026cbc
 8009bd8:	08026cdc 	.word	0x08026cdc
 8009bdc:	08026cf8 	.word	0x08026cf8
 8009be0:	08026d10 	.word	0x08026d10
 8009be4:	08026d28 	.word	0x08026d28
 8009be8:	08026d40 	.word	0x08026d40
 8009bec:	240055c8 	.word	0x240055c8
 8009bf0:	08026d54 	.word	0x08026d54
 8009bf4:	08026d6c 	.word	0x08026d6c
 8009bf8:	240057c8 	.word	0x240057c8
 8009bfc:	08026d84 	.word	0x08026d84
 8009c00:	08026d98 	.word	0x08026d98
 8009c04:	08026db0 	.word	0x08026db0
 8009c08:	08026dc8 	.word	0x08026dc8
 8009c0c:	08026de0 	.word	0x08026de0
 8009c10:	08026e08 	.word	0x08026e08
 8009c14:	08026e2c 	.word	0x08026e2c

08009c18 <QSPI_SetHint>:
  * @brief  Display QSPI Demo Hint
  * @param  None
  * @retval None
  */
static void QSPI_SetHint(void)
{
 8009c18:	b580      	push	{r7, lr}
 8009c1a:	b084      	sub	sp, #16
 8009c1c:	af02      	add	r7, sp, #8
  uint32_t x_size;
  uint32_t y_size;
  BSP_LCD_GetXSize(0, &x_size);
 8009c1e:	1d3b      	adds	r3, r7, #4
 8009c20:	4619      	mov	r1, r3
 8009c22:	2000      	movs	r0, #0
 8009c24:	f005 fb88 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8009c28:	463b      	mov	r3, r7
 8009c2a:	4619      	mov	r1, r3
 8009c2c:	2000      	movs	r0, #0
 8009c2e:	f005 fbab 	bl	800f388 <BSP_LCD_GetYSize>
  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 8009c32:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c36:	f018 fe17 	bl	8022868 <UTIL_LCD_Clear>

  /* Set LCD Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 80,UTIL_LCD_COLOR_BLUE);
 8009c3a:	687a      	ldr	r2, [r7, #4]
 8009c3c:	4b26      	ldr	r3, [pc, #152]	@ (8009cd8 <QSPI_SetHint+0xc0>)
 8009c3e:	9300      	str	r3, [sp, #0]
 8009c40:	2350      	movs	r3, #80	@ 0x50
 8009c42:	2100      	movs	r1, #0
 8009c44:	2000      	movs	r0, #0
 8009c46:	f019 fa35 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 8009c4a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009c4e:	f018 fd03 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 8009c52:	4821      	ldr	r0, [pc, #132]	@ (8009cd8 <QSPI_SetHint+0xc0>)
 8009c54:	f018 fd14 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 8009c58:	4820      	ldr	r0, [pc, #128]	@ (8009cdc <QSPI_SetHint+0xc4>)
 8009c5a:	f018 fd25 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t*)"QSPI", CENTER_MODE);
 8009c5e:	2301      	movs	r3, #1
 8009c60:	4a1f      	ldr	r2, [pc, #124]	@ (8009ce0 <QSPI_SetHint+0xc8>)
 8009c62:	2100      	movs	r1, #0
 8009c64:	2000      	movs	r0, #0
 8009c66:	f018 fe4b 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 8009c6a:	481e      	ldr	r0, [pc, #120]	@ (8009ce4 <QSPI_SetHint+0xcc>)
 8009c6c:	f018 fd1c 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t*)"This example shows how to write", CENTER_MODE);
 8009c70:	2301      	movs	r3, #1
 8009c72:	4a1d      	ldr	r2, [pc, #116]	@ (8009ce8 <QSPI_SetHint+0xd0>)
 8009c74:	211e      	movs	r1, #30
 8009c76:	2000      	movs	r0, #0
 8009c78:	f018 fe42 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t*)"and read data on QSPI memory", CENTER_MODE);
 8009c7c:	2301      	movs	r3, #1
 8009c7e:	4a1b      	ldr	r2, [pc, #108]	@ (8009cec <QSPI_SetHint+0xd4>)
 8009c80:	212d      	movs	r1, #45	@ 0x2d
 8009c82:	2000      	movs	r0, #0
 8009c84:	f018 fe3c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t*)"(Hardware modifications needed)", CENTER_MODE);
 8009c88:	2301      	movs	r3, #1
 8009c8a:	4a19      	ldr	r2, [pc, #100]	@ (8009cf0 <QSPI_SetHint+0xd8>)
 8009c8c:	213c      	movs	r1, #60	@ 0x3c
 8009c8e:	2000      	movs	r0, #0
 8009c90:	f018 fe36 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 90, x_size - 20,y_size- 100,UTIL_LCD_COLOR_BLUE);
 8009c94:	687b      	ldr	r3, [r7, #4]
 8009c96:	f1a3 0214 	sub.w	r2, r3, #20
 8009c9a:	683b      	ldr	r3, [r7, #0]
 8009c9c:	3b64      	subs	r3, #100	@ 0x64
 8009c9e:	490e      	ldr	r1, [pc, #56]	@ (8009cd8 <QSPI_SetHint+0xc0>)
 8009ca0:	9100      	str	r1, [sp, #0]
 8009ca2:	215a      	movs	r1, #90	@ 0x5a
 8009ca4:	200a      	movs	r0, #10
 8009ca6:	f018 ff95 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102,UTIL_LCD_COLOR_BLUE);
 8009caa:	687b      	ldr	r3, [r7, #4]
 8009cac:	f1a3 0216 	sub.w	r2, r3, #22
 8009cb0:	683b      	ldr	r3, [r7, #0]
 8009cb2:	3b66      	subs	r3, #102	@ 0x66
 8009cb4:	4908      	ldr	r1, [pc, #32]	@ (8009cd8 <QSPI_SetHint+0xc0>)
 8009cb6:	9100      	str	r1, [sp, #0]
 8009cb8:	215b      	movs	r1, #91	@ 0x5b
 8009cba:	200b      	movs	r0, #11
 8009cbc:	f018 ff8a 	bl	8022bd4 <UTIL_LCD_DrawRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8009cc0:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009cc4:	f018 fcc8 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 8009cc8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8009ccc:	f018 fcd8 	bl	8022680 <UTIL_LCD_SetBackColor>
}
 8009cd0:	bf00      	nop
 8009cd2:	3708      	adds	r7, #8
 8009cd4:	46bd      	mov	sp, r7
 8009cd6:	bd80      	pop	{r7, pc}
 8009cd8:	ff0000ff 	.word	0xff0000ff
 8009cdc:	24000a44 	.word	0x24000a44
 8009ce0:	08026e44 	.word	0x08026e44
 8009ce4:	24000a5c 	.word	0x24000a5c
 8009ce8:	08026e4c 	.word	0x08026e4c
 8009cec:	08026e6c 	.word	0x08026e6c
 8009cf0:	08026e8c 	.word	0x08026e8c

08009cf4 <Fill_Buffer>:
  * @param  uwBufferLenght: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint8_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 8009cf4:	b480      	push	{r7}
 8009cf6:	b087      	sub	sp, #28
 8009cf8:	af00      	add	r7, sp, #0
 8009cfa:	60f8      	str	r0, [r7, #12]
 8009cfc:	60b9      	str	r1, [r7, #8]
 8009cfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 8009d00:	2300      	movs	r3, #0
 8009d02:	617b      	str	r3, [r7, #20]

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009d04:	2300      	movs	r3, #0
 8009d06:	617b      	str	r3, [r7, #20]
 8009d08:	e00c      	b.n	8009d24 <Fill_Buffer+0x30>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 8009d0a:	697b      	ldr	r3, [r7, #20]
 8009d0c:	b2d9      	uxtb	r1, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	b2da      	uxtb	r2, r3
 8009d12:	68f8      	ldr	r0, [r7, #12]
 8009d14:	697b      	ldr	r3, [r7, #20]
 8009d16:	4403      	add	r3, r0
 8009d18:	440a      	add	r2, r1
 8009d1a:	b2d2      	uxtb	r2, r2
 8009d1c:	701a      	strb	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 8009d1e:	697b      	ldr	r3, [r7, #20]
 8009d20:	3301      	adds	r3, #1
 8009d22:	617b      	str	r3, [r7, #20]
 8009d24:	697a      	ldr	r2, [r7, #20]
 8009d26:	68bb      	ldr	r3, [r7, #8]
 8009d28:	429a      	cmp	r2, r3
 8009d2a:	d3ee      	bcc.n	8009d0a <Fill_Buffer+0x16>
  }
}
 8009d2c:	bf00      	nop
 8009d2e:	bf00      	nop
 8009d30:	371c      	adds	r7, #28
 8009d32:	46bd      	mov	sp, r7
 8009d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d38:	4770      	bx	lr

08009d3a <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint8_t* pBuffer1, uint8_t* pBuffer2, uint32_t BufferLength)
{
 8009d3a:	b480      	push	{r7}
 8009d3c:	b085      	sub	sp, #20
 8009d3e:	af00      	add	r7, sp, #0
 8009d40:	60f8      	str	r0, [r7, #12]
 8009d42:	60b9      	str	r1, [r7, #8]
 8009d44:	607a      	str	r2, [r7, #4]
  while (BufferLength--)
 8009d46:	e00d      	b.n	8009d64 <Buffercmp+0x2a>
  {
    if (*pBuffer1 != *pBuffer2)
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	781a      	ldrb	r2, [r3, #0]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	781b      	ldrb	r3, [r3, #0]
 8009d50:	429a      	cmp	r2, r3
 8009d52:	d001      	beq.n	8009d58 <Buffercmp+0x1e>
    {
      return 1;
 8009d54:	2301      	movs	r3, #1
 8009d56:	e00b      	b.n	8009d70 <Buffercmp+0x36>
    }

    pBuffer1++;
 8009d58:	68fb      	ldr	r3, [r7, #12]
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 8009d5e:	68bb      	ldr	r3, [r7, #8]
 8009d60:	3301      	adds	r3, #1
 8009d62:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	1e5a      	subs	r2, r3, #1
 8009d68:	607a      	str	r2, [r7, #4]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d1ec      	bne.n	8009d48 <Buffercmp+0xe>
  }

  return 0;
 8009d6e:	2300      	movs	r3, #0
}
 8009d70:	4618      	mov	r0, r3
 8009d72:	3714      	adds	r7, #20
 8009d74:	46bd      	mov	sp, r7
 8009d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d7a:	4770      	bx	lr

08009d7c <SD_DMA_demo>:
static void SD_demo(uint32_t Mode);

/* Private functions ---------------------------------------------------------*/

void SD_DMA_demo(void)
{
 8009d7c:	b580      	push	{r7, lr}
 8009d7e:	af00      	add	r7, sp, #0
  SD_demo(SD_DMA_MODE);
 8009d80:	2000      	movs	r0, #0
 8009d82:	f000 f811 	bl	8009da8 <SD_demo>
}
 8009d86:	bf00      	nop
 8009d88:	bd80      	pop	{r7, pc}

08009d8a <SD_IT_demo>:

void SD_IT_demo(void)
{
 8009d8a:	b580      	push	{r7, lr}
 8009d8c:	af00      	add	r7, sp, #0
  SD_demo(SD_IT_MODE);
 8009d8e:	2001      	movs	r0, #1
 8009d90:	f000 f80a 	bl	8009da8 <SD_demo>
}
 8009d94:	bf00      	nop
 8009d96:	bd80      	pop	{r7, pc}

08009d98 <SD_POLLING_demo>:

void SD_POLLING_demo(void)
{
 8009d98:	b580      	push	{r7, lr}
 8009d9a:	af00      	add	r7, sp, #0
  SD_demo(SD_POLLING_MODE);
 8009d9c:	2002      	movs	r0, #2
 8009d9e:	f000 f803 	bl	8009da8 <SD_demo>
}
 8009da2:	bf00      	nop
 8009da4:	bd80      	pop	{r7, pc}
	...

08009da8 <SD_demo>:
* @brief  SD Demo
* @param  Mode SD_DMA_MODE, SD_IT_MODE or SD_POLLING_MODE
* @retval None
*/
static void SD_demo(uint32_t Mode)
{
 8009da8:	b580      	push	{r7, lr}
 8009daa:	b08a      	sub	sp, #40	@ 0x28
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
  uint8_t SD1_state = BSP_ERROR_NONE;
 8009db0:	2300      	movs	r3, #0
 8009db2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t x_size, y_size;
  BSP_LCD_GetXSize(0, &x_size);
 8009db6:	f107 0310 	add.w	r3, r7, #16
 8009dba:	4619      	mov	r1, r3
 8009dbc:	2000      	movs	r0, #0
 8009dbe:	f005 fabb 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 8009dc2:	f107 030c 	add.w	r3, r7, #12
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	2000      	movs	r0, #0
 8009dca:	f005 fadd 	bl	800f388 <BSP_LCD_GetYSize>

  SdmmcTest = 0;
 8009dce:	4bbb      	ldr	r3, [pc, #748]	@ (800a0bc <SD_demo+0x314>)
 8009dd0:	2200      	movs	r2, #0
 8009dd2:	601a      	str	r2, [r3, #0]
  SD_SetHint(Mode);
 8009dd4:	6878      	ldr	r0, [r7, #4]
 8009dd6:	f000 f9e3 	bl	800a1a0 <SD_SetHint>

  SD1_state = BSP_SD_Init(0);
 8009dda:	2000      	movs	r0, #0
 8009ddc:	f006 fe0a 	bl	80109f4 <BSP_SD_Init>
 8009de0:	4603      	mov	r3, r0
 8009de2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  BSP_SD_DetectITConfig(0);
 8009de6:	2000      	movs	r0, #0
 8009de8:	f006 fee2 	bl	8010bb0 <BSP_SD_DetectITConfig>

  /* Check if the SD card is plugged in the slot */
  if(BSP_SD_IsDetected(0) == SD_PRESENT)
 8009dec:	2000      	movs	r0, #0
 8009dee:	f006 ff39 	bl	8010c64 <BSP_SD_IsDetected>
 8009df2:	4603      	mov	r3, r0
 8009df4:	2b01      	cmp	r3, #1
 8009df6:	d10c      	bne.n	8009e12 <SD_demo+0x6a>
  {
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 8009df8:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 8009dfc:	f018 fc2c 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(20, y_size - 30, (uint8_t *)" SD1 Connected    ", LEFT_MODE);
 8009e00:	68fb      	ldr	r3, [r7, #12]
 8009e02:	f1a3 011e 	sub.w	r1, r3, #30
 8009e06:	2303      	movs	r3, #3
 8009e08:	4aad      	ldr	r2, [pc, #692]	@ (800a0c0 <SD_demo+0x318>)
 8009e0a:	2014      	movs	r0, #20
 8009e0c:	f018 fd78 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009e10:	e00a      	b.n	8009e28 <SD_demo+0x80>
  }
  else
  {

    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 8009e12:	48ac      	ldr	r0, [pc, #688]	@ (800a0c4 <SD_demo+0x31c>)
 8009e14:	f018 fc20 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(20, y_size - 30, (uint8_t *)"SD1 Not Connected", LEFT_MODE);
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	f1a3 011e 	sub.w	r1, r3, #30
 8009e1e:	2303      	movs	r3, #3
 8009e20:	4aa9      	ldr	r2, [pc, #676]	@ (800a0c8 <SD_demo+0x320>)
 8009e22:	2014      	movs	r0, #20
 8009e24:	f018 fd6c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 8009e28:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 8009e2c:	f018 fc14 	bl	8022658 <UTIL_LCD_SetTextColor>

  if(SD1_state == BSP_ERROR_NONE)
 8009e30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f040 811d 	bne.w	800a074 <SD_demo+0x2cc>
  {
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD1 INITIALIZATION : OK.", LEFT_MODE);
 8009e3a:	2303      	movs	r3, #3
 8009e3c:	4aa3      	ldr	r2, [pc, #652]	@ (800a0cc <SD_demo+0x324>)
 8009e3e:	2164      	movs	r1, #100	@ 0x64
 8009e40:	2014      	movs	r0, #20
 8009e42:	f018 fd5d 	bl	8022900 <UTIL_LCD_DisplayStringAt>

    SD1_state = BSP_SD_Erase(0, BLOCK_START_ADDR, BLOCK_START_ADDR + NUM_OF_BLOCKS);
 8009e46:	2205      	movs	r2, #5
 8009e48:	2100      	movs	r1, #0
 8009e4a:	2000      	movs	r0, #0
 8009e4c:	f007 f836 	bl	8010ebc <BSP_SD_Erase>
 8009e50:	4603      	mov	r3, r0
 8009e52:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    /* Wait until SD card is ready to use for new operation */
    while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK);
 8009e56:	bf00      	nop
 8009e58:	2000      	movs	r0, #0
 8009e5a:	f007 f859 	bl	8010f10 <BSP_SD_GetCardState>
 8009e5e:	4603      	mov	r3, r0
 8009e60:	2b00      	cmp	r3, #0
 8009e62:	d1f9      	bne.n	8009e58 <SD_demo+0xb0>

    if(SD1_state != BSP_ERROR_NONE)
 8009e64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009e68:	2b00      	cmp	r3, #0
 8009e6a:	d00c      	beq.n	8009e86 <SD_demo+0xde>
    {
      UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD1 ERASE : FAILED.", LEFT_MODE);
 8009e6c:	2303      	movs	r3, #3
 8009e6e:	4a98      	ldr	r2, [pc, #608]	@ (800a0d0 <SD_demo+0x328>)
 8009e70:	2173      	movs	r1, #115	@ 0x73
 8009e72:	2014      	movs	r0, #20
 8009e74:	f018 fd44 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD1 Test Aborted.", LEFT_MODE);
 8009e78:	2303      	movs	r3, #3
 8009e7a:	4a96      	ldr	r2, [pc, #600]	@ (800a0d4 <SD_demo+0x32c>)
 8009e7c:	2182      	movs	r1, #130	@ 0x82
 8009e7e:	2014      	movs	r0, #20
 8009e80:	f018 fd3e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009e84:	e105      	b.n	800a092 <SD_demo+0x2ea>
    }
    else
    {
      UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD1 ERASE : OK.", LEFT_MODE);
 8009e86:	2303      	movs	r3, #3
 8009e88:	4a93      	ldr	r2, [pc, #588]	@ (800a0d8 <SD_demo+0x330>)
 8009e8a:	2173      	movs	r1, #115	@ 0x73
 8009e8c:	2014      	movs	r0, #20
 8009e8e:	f018 fd37 	bl	8022900 <UTIL_LCD_DisplayStringAt>

      /* Fill the buffer to write */
      Fill_Buffer(aTxBuffer, BUFFER_WORDS_SIZE, 0x22FF);
 8009e92:	f242 22ff 	movw	r2, #8959	@ 0x22ff
 8009e96:	f44f 7120 	mov.w	r1, #640	@ 0x280
 8009e9a:	4890      	ldr	r0, [pc, #576]	@ (800a0dc <SD_demo+0x334>)
 8009e9c:	f000 fa0a 	bl	800a2b4 <Fill_Buffer>
      if(Mode == SD_DMA_MODE)
 8009ea0:	687b      	ldr	r3, [r7, #4]
 8009ea2:	2b00      	cmp	r3, #0
 8009ea4:	d111      	bne.n	8009eca <SD_demo+0x122>
      {
        SD1_state = BSP_SD_WriteBlocks_DMA(0, (uint32_t *)aTxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS);
 8009ea6:	2305      	movs	r3, #5
 8009ea8:	2200      	movs	r2, #0
 8009eaa:	498c      	ldr	r1, [pc, #560]	@ (800a0dc <SD_demo+0x334>)
 8009eac:	2000      	movs	r0, #0
 8009eae:	f006 ff87 	bl	8010dc0 <BSP_SD_WriteBlocks_DMA>
 8009eb2:	4603      	mov	r3, r0
 8009eb4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        /* Wait for the write process is completed */
        while((SD1WriteStatus == 0));
 8009eb8:	bf00      	nop
 8009eba:	4b89      	ldr	r3, [pc, #548]	@ (800a0e0 <SD_demo+0x338>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	2b00      	cmp	r3, #0
 8009ec0:	d0fb      	beq.n	8009eba <SD_demo+0x112>
        SD1WriteStatus = 0;
 8009ec2:	4b87      	ldr	r3, [pc, #540]	@ (800a0e0 <SD_demo+0x338>)
 8009ec4:	2200      	movs	r2, #0
 8009ec6:	601a      	str	r2, [r3, #0]
 8009ec8:	e020      	b.n	8009f0c <SD_demo+0x164>
      }
      else if(Mode == SD_IT_MODE)
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	2b01      	cmp	r3, #1
 8009ece:	d114      	bne.n	8009efa <SD_demo+0x152>
      {
        SdmmcTest = 1;
 8009ed0:	4b7a      	ldr	r3, [pc, #488]	@ (800a0bc <SD_demo+0x314>)
 8009ed2:	2201      	movs	r2, #1
 8009ed4:	601a      	str	r2, [r3, #0]
        SD1_state = BSP_SD_WriteBlocks_IT(0, (uint32_t *)aTxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS);
 8009ed6:	2305      	movs	r3, #5
 8009ed8:	2200      	movs	r2, #0
 8009eda:	4980      	ldr	r1, [pc, #512]	@ (800a0dc <SD_demo+0x334>)
 8009edc:	2000      	movs	r0, #0
 8009ede:	f006 ffc3 	bl	8010e68 <BSP_SD_WriteBlocks_IT>
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        /* Wait for the write process is completed */
        while((SD1WriteStatus == 0));
 8009ee8:	bf00      	nop
 8009eea:	4b7d      	ldr	r3, [pc, #500]	@ (800a0e0 <SD_demo+0x338>)
 8009eec:	681b      	ldr	r3, [r3, #0]
 8009eee:	2b00      	cmp	r3, #0
 8009ef0:	d0fb      	beq.n	8009eea <SD_demo+0x142>
        SD1WriteStatus = 0;
 8009ef2:	4b7b      	ldr	r3, [pc, #492]	@ (800a0e0 <SD_demo+0x338>)
 8009ef4:	2200      	movs	r2, #0
 8009ef6:	601a      	str	r2, [r3, #0]
 8009ef8:	e008      	b.n	8009f0c <SD_demo+0x164>
      }
      else
      {
        SD1_state = BSP_SD_WriteBlocks(0, (uint32_t *)aTxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS);
 8009efa:	2305      	movs	r3, #5
 8009efc:	2200      	movs	r2, #0
 8009efe:	4977      	ldr	r1, [pc, #476]	@ (800a0dc <SD_demo+0x334>)
 8009f00:	2000      	movs	r0, #0
 8009f02:	f006 ff03 	bl	8010d0c <BSP_SD_WriteBlocks>
 8009f06:	4603      	mov	r3, r0
 8009f08:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
      }

      /* Wait until SD cards are ready to use for new operation */
      while((BSP_SD_GetCardState(0) != SD_TRANSFER_OK));
 8009f0c:	bf00      	nop
 8009f0e:	2000      	movs	r0, #0
 8009f10:	f006 fffe 	bl	8010f10 <BSP_SD_GetCardState>
 8009f14:	4603      	mov	r3, r0
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d1f9      	bne.n	8009f0e <SD_demo+0x166>

      if(SD1_state != BSP_ERROR_NONE)
 8009f1a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d00c      	beq.n	8009f3c <SD_demo+0x194>
      {
        UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD1 WRITE : FAILED.", LEFT_MODE);
 8009f22:	2303      	movs	r3, #3
 8009f24:	4a6f      	ldr	r2, [pc, #444]	@ (800a0e4 <SD_demo+0x33c>)
 8009f26:	2182      	movs	r1, #130	@ 0x82
 8009f28:	2014      	movs	r0, #20
 8009f2a:	f018 fce9 	bl	8022900 <UTIL_LCD_DisplayStringAt>
        UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD1 Test Aborted.", LEFT_MODE);
 8009f2e:	2303      	movs	r3, #3
 8009f30:	4a68      	ldr	r2, [pc, #416]	@ (800a0d4 <SD_demo+0x32c>)
 8009f32:	2191      	movs	r1, #145	@ 0x91
 8009f34:	2014      	movs	r0, #20
 8009f36:	f018 fce3 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 8009f3a:	e0aa      	b.n	800a092 <SD_demo+0x2ea>
      }
      else
      {
        UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SD1 WRITE : OK.", LEFT_MODE);
 8009f3c:	2303      	movs	r3, #3
 8009f3e:	4a6a      	ldr	r2, [pc, #424]	@ (800a0e8 <SD_demo+0x340>)
 8009f40:	2182      	movs	r1, #130	@ 0x82
 8009f42:	2014      	movs	r0, #20
 8009f44:	f018 fcdc 	bl	8022900 <UTIL_LCD_DisplayStringAt>
        if(Mode == SD_DMA_MODE)
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d137      	bne.n	8009fbe <SD_demo+0x216>
        {
          SD1_state = BSP_SD_ReadBlocks_DMA(0, (uint32_t *)aRxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS);
 8009f4e:	2305      	movs	r3, #5
 8009f50:	2200      	movs	r2, #0
 8009f52:	4966      	ldr	r1, [pc, #408]	@ (800a0ec <SD_demo+0x344>)
 8009f54:	2000      	movs	r0, #0
 8009f56:	f006 ff09 	bl	8010d6c <BSP_SD_ReadBlocks_DMA>
 8009f5a:	4603      	mov	r3, r0
 8009f5c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

          /* Wait for the read process is completed */
          while(SD1ReadStatus == 0);
 8009f60:	bf00      	nop
 8009f62:	4b63      	ldr	r3, [pc, #396]	@ (800a0f0 <SD_demo+0x348>)
 8009f64:	681b      	ldr	r3, [r3, #0]
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d0fb      	beq.n	8009f62 <SD_demo+0x1ba>
          SD1ReadStatus = 0;
 8009f6a:	4b61      	ldr	r3, [pc, #388]	@ (800a0f0 <SD_demo+0x348>)
 8009f6c:	2200      	movs	r2, #0
 8009f6e:	601a      	str	r2, [r3, #0]
 8009f70:	4b5e      	ldr	r3, [pc, #376]	@ (800a0ec <SD_demo+0x344>)
 8009f72:	623b      	str	r3, [r7, #32]
 8009f74:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8009f78:	61fb      	str	r3, [r7, #28]
    if ( dsize > 0 ) { 
 8009f7a:	69fb      	ldr	r3, [r7, #28]
 8009f7c:	2b00      	cmp	r3, #0
 8009f7e:	dd3d      	ble.n	8009ffc <SD_demo+0x254>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 8009f80:	6a3b      	ldr	r3, [r7, #32]
 8009f82:	f003 021f 	and.w	r2, r3, #31
 8009f86:	69fb      	ldr	r3, [r7, #28]
 8009f88:	4413      	add	r3, r2
 8009f8a:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 8009f8c:	6a3b      	ldr	r3, [r7, #32]
 8009f8e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 8009f90:	f3bf 8f4f 	dsb	sy
}
 8009f94:	bf00      	nop
        SCB->DCIMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 8009f96:	4a57      	ldr	r2, [pc, #348]	@ (800a0f4 <SD_demo+0x34c>)
 8009f98:	697b      	ldr	r3, [r7, #20]
 8009f9a:	f8c2 325c 	str.w	r3, [r2, #604]	@ 0x25c
        op_addr += __SCB_DCACHE_LINE_SIZE;
 8009f9e:	697b      	ldr	r3, [r7, #20]
 8009fa0:	3320      	adds	r3, #32
 8009fa2:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 8009fa4:	69bb      	ldr	r3, [r7, #24]
 8009fa6:	3b20      	subs	r3, #32
 8009fa8:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 8009faa:	69bb      	ldr	r3, [r7, #24]
 8009fac:	2b00      	cmp	r3, #0
 8009fae:	dcf2      	bgt.n	8009f96 <SD_demo+0x1ee>
  __ASM volatile ("dsb 0xF":::"memory");
 8009fb0:	f3bf 8f4f 	dsb	sy
}
 8009fb4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8009fb6:	f3bf 8f6f 	isb	sy
}
 8009fba:	bf00      	nop
}
 8009fbc:	e01e      	b.n	8009ffc <SD_demo+0x254>

          /* Invalidate Data Cache to get the updated content of the SRAM*/
          SCB_InvalidateDCache_by_Addr((uint32_t *)aRxBuffer, BUFFER_WORDS_SIZE*4);

        }
        else if(Mode == SD_IT_MODE)
 8009fbe:	687b      	ldr	r3, [r7, #4]
 8009fc0:	2b01      	cmp	r3, #1
 8009fc2:	d111      	bne.n	8009fe8 <SD_demo+0x240>
        {
          SD1_state = BSP_SD_ReadBlocks_IT(0, (uint32_t *)aRxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS);
 8009fc4:	2305      	movs	r3, #5
 8009fc6:	2200      	movs	r2, #0
 8009fc8:	4948      	ldr	r1, [pc, #288]	@ (800a0ec <SD_demo+0x344>)
 8009fca:	2000      	movs	r0, #0
 8009fcc:	f006 ff22 	bl	8010e14 <BSP_SD_ReadBlocks_IT>
 8009fd0:	4603      	mov	r3, r0
 8009fd2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
          /* Wait for the read process is completed */
          while(SD1ReadStatus == 0);
 8009fd6:	bf00      	nop
 8009fd8:	4b45      	ldr	r3, [pc, #276]	@ (800a0f0 <SD_demo+0x348>)
 8009fda:	681b      	ldr	r3, [r3, #0]
 8009fdc:	2b00      	cmp	r3, #0
 8009fde:	d0fb      	beq.n	8009fd8 <SD_demo+0x230>
          SD1ReadStatus = 0;
 8009fe0:	4b43      	ldr	r3, [pc, #268]	@ (800a0f0 <SD_demo+0x348>)
 8009fe2:	2200      	movs	r2, #0
 8009fe4:	601a      	str	r2, [r3, #0]
 8009fe6:	e00a      	b.n	8009ffe <SD_demo+0x256>
        }
        else
        {
          SD1_state = BSP_SD_ReadBlocks(0, (uint32_t *)aRxBuffer, BLOCK_START_ADDR, NUM_OF_BLOCKS);
 8009fe8:	2305      	movs	r3, #5
 8009fea:	2200      	movs	r2, #0
 8009fec:	493f      	ldr	r1, [pc, #252]	@ (800a0ec <SD_demo+0x344>)
 8009fee:	2000      	movs	r0, #0
 8009ff0:	f006 fe5c 	bl	8010cac <BSP_SD_ReadBlocks>
 8009ff4:	4603      	mov	r3, r0
 8009ff6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8009ffa:	e000      	b.n	8009ffe <SD_demo+0x256>
 8009ffc:	bf00      	nop
        }
        /* Wait until SD card is ready to use for new operation */
        while(BSP_SD_GetCardState(0) != SD_TRANSFER_OK);
 8009ffe:	bf00      	nop
 800a000:	2000      	movs	r0, #0
 800a002:	f006 ff85 	bl	8010f10 <BSP_SD_GetCardState>
 800a006:	4603      	mov	r3, r0
 800a008:	2b00      	cmp	r3, #0
 800a00a:	d1f9      	bne.n	800a000 <SD_demo+0x258>

        if(SD1_state != BSP_ERROR_NONE)
 800a00c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a010:	2b00      	cmp	r3, #0
 800a012:	d00c      	beq.n	800a02e <SD_demo+0x286>
        {
          UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD1 READ : FAILED.", LEFT_MODE);
 800a014:	2303      	movs	r3, #3
 800a016:	4a38      	ldr	r2, [pc, #224]	@ (800a0f8 <SD_demo+0x350>)
 800a018:	2191      	movs	r1, #145	@ 0x91
 800a01a:	2014      	movs	r0, #20
 800a01c:	f018 fc70 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          UTIL_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD1 Test Aborted.", LEFT_MODE);
 800a020:	2303      	movs	r3, #3
 800a022:	4a2c      	ldr	r2, [pc, #176]	@ (800a0d4 <SD_demo+0x32c>)
 800a024:	21a0      	movs	r1, #160	@ 0xa0
 800a026:	2014      	movs	r0, #20
 800a028:	f018 fc6a 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a02c:	e031      	b.n	800a092 <SD_demo+0x2ea>
        }
        else
        {
          UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SD1 READ : OK.", LEFT_MODE);
 800a02e:	2303      	movs	r3, #3
 800a030:	4a32      	ldr	r2, [pc, #200]	@ (800a0fc <SD_demo+0x354>)
 800a032:	2191      	movs	r1, #145	@ 0x91
 800a034:	2014      	movs	r0, #20
 800a036:	f018 fc63 	bl	8022900 <UTIL_LCD_DisplayStringAt>
          if(Buffercmp(aTxBuffer, aRxBuffer, BUFFER_WORDS_SIZE) > 0)
 800a03a:	f44f 7220 	mov.w	r2, #640	@ 0x280
 800a03e:	492b      	ldr	r1, [pc, #172]	@ (800a0ec <SD_demo+0x344>)
 800a040:	4826      	ldr	r0, [pc, #152]	@ (800a0dc <SD_demo+0x334>)
 800a042:	f000 f981 	bl	800a348 <Buffercmp>
 800a046:	4603      	mov	r3, r0
 800a048:	2b00      	cmp	r3, #0
 800a04a:	d00c      	beq.n	800a066 <SD_demo+0x2be>
          {
            UTIL_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD1 COMPARE : FAILED.", LEFT_MODE);
 800a04c:	2303      	movs	r3, #3
 800a04e:	4a2c      	ldr	r2, [pc, #176]	@ (800a100 <SD_demo+0x358>)
 800a050:	21a0      	movs	r1, #160	@ 0xa0
 800a052:	2014      	movs	r0, #20
 800a054:	f018 fc54 	bl	8022900 <UTIL_LCD_DisplayStringAt>
            UTIL_LCD_DisplayStringAt(20, 175, (uint8_t *)"SD1 Test Aborted.", LEFT_MODE);
 800a058:	2303      	movs	r3, #3
 800a05a:	4a1e      	ldr	r2, [pc, #120]	@ (800a0d4 <SD_demo+0x32c>)
 800a05c:	21af      	movs	r1, #175	@ 0xaf
 800a05e:	2014      	movs	r0, #20
 800a060:	f018 fc4e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a064:	e015      	b.n	800a092 <SD_demo+0x2ea>
          }
          else
          {
            UTIL_LCD_DisplayStringAt(20, 160, (uint8_t *)"SD1 COMPARE : OK.", LEFT_MODE);
 800a066:	2303      	movs	r3, #3
 800a068:	4a26      	ldr	r2, [pc, #152]	@ (800a104 <SD_demo+0x35c>)
 800a06a:	21a0      	movs	r1, #160	@ 0xa0
 800a06c:	2014      	movs	r0, #20
 800a06e:	f018 fc47 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a072:	e00e      	b.n	800a092 <SD_demo+0x2ea>
        }
      }
    }
  }
  else{
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800a074:	4813      	ldr	r0, [pc, #76]	@ (800a0c4 <SD_demo+0x31c>)
 800a076:	f018 faef 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t *)"SD INITIALIZATION : FAIL.", LEFT_MODE);
 800a07a:	2303      	movs	r3, #3
 800a07c:	4a22      	ldr	r2, [pc, #136]	@ (800a108 <SD_demo+0x360>)
 800a07e:	2164      	movs	r1, #100	@ 0x64
 800a080:	2014      	movs	r0, #20
 800a082:	f018 fc3d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SD Test Aborted.", LEFT_MODE);
 800a086:	2303      	movs	r3, #3
 800a088:	4a20      	ldr	r2, [pc, #128]	@ (800a10c <SD_demo+0x364>)
 800a08a:	2173      	movs	r1, #115	@ 0x73
 800a08c:	2014      	movs	r0, #20
 800a08e:	f018 fc37 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  while (1)
  {
    if(CheckForUserInput() > 0)
 800a092:	f7ff fb8b 	bl	80097ac <CheckForUserInput>
 800a096:	4603      	mov	r3, r0
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d0fa      	beq.n	800a092 <SD_demo+0x2ea>
    {
      HAL_Delay(200);
 800a09c:	20c8      	movs	r0, #200	@ 0xc8
 800a09e:	f008 f879 	bl	8012194 <HAL_Delay>
      ButtonState = 0;
 800a0a2:	4b1b      	ldr	r3, [pc, #108]	@ (800a110 <SD_demo+0x368>)
 800a0a4:	2200      	movs	r2, #0
 800a0a6:	601a      	str	r2, [r3, #0]
      SdmmcTest = 0;
 800a0a8:	4b04      	ldr	r3, [pc, #16]	@ (800a0bc <SD_demo+0x314>)
 800a0aa:	2200      	movs	r2, #0
 800a0ac:	601a      	str	r2, [r3, #0]
      BSP_SD_DeInit(0);
 800a0ae:	2000      	movs	r0, #0
 800a0b0:	f006 fd1c 	bl	8010aec <BSP_SD_DeInit>
      return;
 800a0b4:	bf00      	nop

    }
  }
}
 800a0b6:	3728      	adds	r7, #40	@ 0x28
 800a0b8:	46bd      	mov	sp, r7
 800a0ba:	bd80      	pop	{r7, pc}
 800a0bc:	24006de8 	.word	0x24006de8
 800a0c0:	08026eac 	.word	0x08026eac
 800a0c4:	ffff0000 	.word	0xffff0000
 800a0c8:	08026ec0 	.word	0x08026ec0
 800a0cc:	08026ed4 	.word	0x08026ed4
 800a0d0:	08026ef0 	.word	0x08026ef0
 800a0d4:	08026f04 	.word	0x08026f04
 800a0d8:	08026f18 	.word	0x08026f18
 800a0dc:	240059e0 	.word	0x240059e0
 800a0e0:	24006de0 	.word	0x24006de0
 800a0e4:	08026f28 	.word	0x08026f28
 800a0e8:	08026f3c 	.word	0x08026f3c
 800a0ec:	240063e0 	.word	0x240063e0
 800a0f0:	24006de4 	.word	0x24006de4
 800a0f4:	e000ed00 	.word	0xe000ed00
 800a0f8:	08026f4c 	.word	0x08026f4c
 800a0fc:	08026f60 	.word	0x08026f60
 800a100:	08026f70 	.word	0x08026f70
 800a104:	08026f88 	.word	0x08026f88
 800a108:	08026f9c 	.word	0x08026f9c
 800a10c:	08026fb8 	.word	0x08026fb8
 800a110:	240055c0 	.word	0x240055c0

0800a114 <BSP_SD_DetectCallback>:
* @brief  BSP SD Callback.
* @param  GPIO_Pin: Specifies the pin connected EXTI line
* @retval None.
*/
void BSP_SD_DetectCallback(uint32_t Instance, uint32_t Status)
{
 800a114:	b580      	push	{r7, lr}
 800a116:	b084      	sub	sp, #16
 800a118:	af00      	add	r7, sp, #0
 800a11a:	6078      	str	r0, [r7, #4]
 800a11c:	6039      	str	r1, [r7, #0]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800a11e:	f107 030c 	add.w	r3, r7, #12
 800a122:	4619      	mov	r1, r3
 800a124:	2000      	movs	r0, #0
 800a126:	f005 f907 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800a12a:	f107 0308 	add.w	r3, r7, #8
 800a12e:	4619      	mov	r1, r3
 800a130:	2000      	movs	r0, #0
 800a132:	f005 f929 	bl	800f388 <BSP_LCD_GetYSize>

  /* Check if the SD card is plugged in the slot */
  switch(Instance)
 800a136:	687b      	ldr	r3, [r7, #4]
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d11b      	bne.n	800a174 <BSP_SD_DetectCallback+0x60>
  {
  case 0:
    if(Status == SD_PRESENT)
 800a13c:	683b      	ldr	r3, [r7, #0]
 800a13e:	2b01      	cmp	r3, #1
 800a140:	d10c      	bne.n	800a15c <BSP_SD_DetectCallback+0x48>
    {
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_GREEN);
 800a142:	f04f 20ff 	mov.w	r0, #4278255360	@ 0xff00ff00
 800a146:	f018 fa87 	bl	8022658 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(20, y_size - 30, (uint8_t *)" SD1 Connected    ", LEFT_MODE);
 800a14a:	68bb      	ldr	r3, [r7, #8]
 800a14c:	f1a3 011e 	sub.w	r1, r3, #30
 800a150:	2303      	movs	r3, #3
 800a152:	4a10      	ldr	r2, [pc, #64]	@ (800a194 <BSP_SD_DetectCallback+0x80>)
 800a154:	2014      	movs	r0, #20
 800a156:	f018 fbd3 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    else
    {
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
      UTIL_LCD_DisplayStringAt(20, y_size - 30, (uint8_t *)"SD1 Not Connected", LEFT_MODE);
    }
    break;
 800a15a:	e017      	b.n	800a18c <BSP_SD_DetectCallback+0x78>
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800a15c:	480e      	ldr	r0, [pc, #56]	@ (800a198 <BSP_SD_DetectCallback+0x84>)
 800a15e:	f018 fa7b 	bl	8022658 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(20, y_size - 30, (uint8_t *)"SD1 Not Connected", LEFT_MODE);
 800a162:	68bb      	ldr	r3, [r7, #8]
 800a164:	f1a3 011e 	sub.w	r1, r3, #30
 800a168:	2303      	movs	r3, #3
 800a16a:	4a0c      	ldr	r2, [pc, #48]	@ (800a19c <BSP_SD_DetectCallback+0x88>)
 800a16c:	2014      	movs	r0, #20
 800a16e:	f018 fbc7 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    break;
 800a172:	e00b      	b.n	800a18c <BSP_SD_DetectCallback+0x78>
  default:
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800a174:	4808      	ldr	r0, [pc, #32]	@ (800a198 <BSP_SD_DetectCallback+0x84>)
 800a176:	f018 fa6f 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_DisplayStringAt(20, y_size - 30, (uint8_t *)"SD1 Not Connected", LEFT_MODE);
 800a17a:	68bb      	ldr	r3, [r7, #8]
 800a17c:	f1a3 011e 	sub.w	r1, r3, #30
 800a180:	2303      	movs	r3, #3
 800a182:	4a06      	ldr	r2, [pc, #24]	@ (800a19c <BSP_SD_DetectCallback+0x88>)
 800a184:	2014      	movs	r0, #20
 800a186:	f018 fbbb 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    break;
 800a18a:	bf00      	nop
  }
}
 800a18c:	bf00      	nop
 800a18e:	3710      	adds	r7, #16
 800a190:	46bd      	mov	sp, r7
 800a192:	bd80      	pop	{r7, pc}
 800a194:	08026eac 	.word	0x08026eac
 800a198:	ffff0000 	.word	0xffff0000
 800a19c:	08026ec0 	.word	0x08026ec0

0800a1a0 <SD_SetHint>:
* @brief  Display SD Demo Hint
* @param  Mode SD_DMA_MODE, SD_IT_MODE or SD_POLLING_MODE
* @retval None
*/
static void SD_SetHint(uint32_t Mode)
{
 800a1a0:	b580      	push	{r7, lr}
 800a1a2:	b086      	sub	sp, #24
 800a1a4:	af02      	add	r7, sp, #8
 800a1a6:	6078      	str	r0, [r7, #4]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800a1a8:	f107 030c 	add.w	r3, r7, #12
 800a1ac:	4619      	mov	r1, r3
 800a1ae:	2000      	movs	r0, #0
 800a1b0:	f005 f8c2 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800a1b4:	f107 0308 	add.w	r3, r7, #8
 800a1b8:	4619      	mov	r1, r3
 800a1ba:	2000      	movs	r0, #0
 800a1bc:	f005 f8e4 	bl	800f388 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800a1c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1c4:	f018 fb50 	bl	8022868 <UTIL_LCD_Clear>

  /* Set LCD Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 87, UTIL_LCD_COLOR_BLUE);
 800a1c8:	68fa      	ldr	r2, [r7, #12]
 800a1ca:	4b31      	ldr	r3, [pc, #196]	@ (800a290 <SD_SetHint+0xf0>)
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	2357      	movs	r3, #87	@ 0x57
 800a1d0:	2100      	movs	r1, #0
 800a1d2:	2000      	movs	r0, #0
 800a1d4:	f018 ff6e 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800a1d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a1dc:	f018 fa3c 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800a1e0:	482b      	ldr	r0, [pc, #172]	@ (800a290 <SD_SetHint+0xf0>)
 800a1e2:	f018 fa4d 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 800a1e6:	482b      	ldr	r0, [pc, #172]	@ (800a294 <SD_SetHint+0xf4>)
 800a1e8:	f018 fa5e 	bl	80226a8 <UTIL_LCD_SetFont>
  if(Mode == SD_DMA_MODE)
 800a1ec:	687b      	ldr	r3, [r7, #4]
 800a1ee:	2b00      	cmp	r3, #0
 800a1f0:	d106      	bne.n	800a200 <SD_SetHint+0x60>
  {
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"SD1: DMA MODE", CENTER_MODE);
 800a1f2:	2301      	movs	r3, #1
 800a1f4:	4a28      	ldr	r2, [pc, #160]	@ (800a298 <SD_SetHint+0xf8>)
 800a1f6:	2100      	movs	r1, #0
 800a1f8:	2000      	movs	r0, #0
 800a1fa:	f018 fb81 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a1fe:	e00f      	b.n	800a220 <SD_SetHint+0x80>
  }
  else if(Mode == SD_IT_MODE)
 800a200:	687b      	ldr	r3, [r7, #4]
 800a202:	2b01      	cmp	r3, #1
 800a204:	d106      	bne.n	800a214 <SD_SetHint+0x74>
  {
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"SD1: IT MODE", CENTER_MODE);
 800a206:	2301      	movs	r3, #1
 800a208:	4a24      	ldr	r2, [pc, #144]	@ (800a29c <SD_SetHint+0xfc>)
 800a20a:	2100      	movs	r1, #0
 800a20c:	2000      	movs	r0, #0
 800a20e:	f018 fb77 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a212:	e005      	b.n	800a220 <SD_SetHint+0x80>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"SD1: POLLING MODE", CENTER_MODE);
 800a214:	2301      	movs	r3, #1
 800a216:	4a22      	ldr	r2, [pc, #136]	@ (800a2a0 <SD_SetHint+0x100>)
 800a218:	2100      	movs	r1, #0
 800a21a:	2000      	movs	r0, #0
 800a21c:	f018 fb70 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  UTIL_LCD_SetFont(&Font12);
 800a220:	4820      	ldr	r0, [pc, #128]	@ (800a2a4 <SD_SetHint+0x104>)
 800a222:	f018 fa41 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800a226:	2301      	movs	r3, #1
 800a228:	4a1f      	ldr	r2, [pc, #124]	@ (800a2a8 <SD_SetHint+0x108>)
 800a22a:	211e      	movs	r1, #30
 800a22c:	2000      	movs	r0, #0
 800a22e:	f018 fb67 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on the microSD and also", CENTER_MODE);
 800a232:	2301      	movs	r3, #1
 800a234:	4a1d      	ldr	r2, [pc, #116]	@ (800a2ac <SD_SetHint+0x10c>)
 800a236:	212d      	movs	r1, #45	@ 0x2d
 800a238:	2000      	movs	r0, #0
 800a23a:	f018 fb61 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"how to detect the presence of the card", CENTER_MODE);
 800a23e:	2301      	movs	r3, #1
 800a240:	4a1b      	ldr	r2, [pc, #108]	@ (800a2b0 <SD_SetHint+0x110>)
 800a242:	213c      	movs	r1, #60	@ 0x3c
 800a244:	2000      	movs	r0, #0
 800a246:	f018 fb5b 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 92, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	f1a3 0214 	sub.w	r2, r3, #20
 800a250:	68bb      	ldr	r3, [r7, #8]
 800a252:	3b64      	subs	r3, #100	@ 0x64
 800a254:	490e      	ldr	r1, [pc, #56]	@ (800a290 <SD_SetHint+0xf0>)
 800a256:	9100      	str	r1, [sp, #0]
 800a258:	215c      	movs	r1, #92	@ 0x5c
 800a25a:	200a      	movs	r0, #10
 800a25c:	f018 fcba 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 93, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	f1a3 0216 	sub.w	r2, r3, #22
 800a266:	68bb      	ldr	r3, [r7, #8]
 800a268:	3b66      	subs	r3, #102	@ 0x66
 800a26a:	4909      	ldr	r1, [pc, #36]	@ (800a290 <SD_SetHint+0xf0>)
 800a26c:	9100      	str	r1, [sp, #0]
 800a26e:	215d      	movs	r1, #93	@ 0x5d
 800a270:	200b      	movs	r0, #11
 800a272:	f018 fcaf 	bl	8022bd4 <UTIL_LCD_DrawRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800a276:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800a27a:	f018 f9ed 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800a27e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a282:	f018 f9fd 	bl	8022680 <UTIL_LCD_SetBackColor>
}
 800a286:	bf00      	nop
 800a288:	3710      	adds	r7, #16
 800a28a:	46bd      	mov	sp, r7
 800a28c:	bd80      	pop	{r7, pc}
 800a28e:	bf00      	nop
 800a290:	ff0000ff 	.word	0xff0000ff
 800a294:	24000a44 	.word	0x24000a44
 800a298:	08026fcc 	.word	0x08026fcc
 800a29c:	08026fdc 	.word	0x08026fdc
 800a2a0:	08026fec 	.word	0x08026fec
 800a2a4:	24000a5c 	.word	0x24000a5c
 800a2a8:	08027000 	.word	0x08027000
 800a2ac:	08027020 	.word	0x08027020
 800a2b0:	08027048 	.word	0x08027048

0800a2b4 <Fill_Buffer>:
* @param  uwBufferLenght: size of the buffer to fill
* @param  uwOffset: first value to fill on the buffer
* @retval None
*/
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLenght, uint32_t uwOffset)
{
 800a2b4:	b480      	push	{r7}
 800a2b6:	b08b      	sub	sp, #44	@ 0x2c
 800a2b8:	af00      	add	r7, sp, #0
 800a2ba:	60f8      	str	r0, [r7, #12]
 800a2bc:	60b9      	str	r1, [r7, #8]
 800a2be:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 800a2c0:	2300      	movs	r3, #0
 800a2c2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800a2c4:	2300      	movs	r3, #0
 800a2c6:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2c8:	e00a      	b.n	800a2e0 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800a2ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	68fa      	ldr	r2, [r7, #12]
 800a2d0:	4413      	add	r3, r2
 800a2d2:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	440a      	add	r2, r1
 800a2d8:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLenght; tmpIndex++ )
 800a2da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a2dc:	3301      	adds	r3, #1
 800a2de:	627b      	str	r3, [r7, #36]	@ 0x24
 800a2e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a2e2:	68bb      	ldr	r3, [r7, #8]
 800a2e4:	429a      	cmp	r2, r3
 800a2e6:	d3f0      	bcc.n	800a2ca <Fill_Buffer+0x16>
  }

  /* Clean Data Cache to update the content of the SRAM */
  SCB_CleanDCache_by_Addr((uint32_t*)pBuffer, uwBufferLenght*4);
 800a2e8:	68bb      	ldr	r3, [r7, #8]
 800a2ea:	009b      	lsls	r3, r3, #2
 800a2ec:	461a      	mov	r2, r3
 800a2ee:	68fb      	ldr	r3, [r7, #12]
 800a2f0:	623b      	str	r3, [r7, #32]
 800a2f2:	61fa      	str	r2, [r7, #28]
    if ( dsize > 0 ) { 
 800a2f4:	69fb      	ldr	r3, [r7, #28]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	dd1d      	ble.n	800a336 <Fill_Buffer+0x82>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a2fa:	6a3b      	ldr	r3, [r7, #32]
 800a2fc:	f003 021f 	and.w	r2, r3, #31
 800a300:	69fb      	ldr	r3, [r7, #28]
 800a302:	4413      	add	r3, r2
 800a304:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a306:	6a3b      	ldr	r3, [r7, #32]
 800a308:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a30a:	f3bf 8f4f 	dsb	sy
}
 800a30e:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a310:	4a0c      	ldr	r2, [pc, #48]	@ (800a344 <Fill_Buffer+0x90>)
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a318:	697b      	ldr	r3, [r7, #20]
 800a31a:	3320      	adds	r3, #32
 800a31c:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a31e:	69bb      	ldr	r3, [r7, #24]
 800a320:	3b20      	subs	r3, #32
 800a322:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800a324:	69bb      	ldr	r3, [r7, #24]
 800a326:	2b00      	cmp	r3, #0
 800a328:	dcf2      	bgt.n	800a310 <Fill_Buffer+0x5c>
  __ASM volatile ("dsb 0xF":::"memory");
 800a32a:	f3bf 8f4f 	dsb	sy
}
 800a32e:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a330:	f3bf 8f6f 	isb	sy
}
 800a334:	bf00      	nop
}
 800a336:	bf00      	nop
}
 800a338:	bf00      	nop
 800a33a:	372c      	adds	r7, #44	@ 0x2c
 800a33c:	46bd      	mov	sp, r7
 800a33e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a342:	4770      	bx	lr
 800a344:	e000ed00 	.word	0xe000ed00

0800a348 <Buffercmp>:
* @param  BufferLength: buffer's length
* @retval 1: pBuffer identical to pBuffer1
*         0: pBuffer differs from pBuffer1
*/
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 800a348:	b480      	push	{r7}
 800a34a:	b085      	sub	sp, #20
 800a34c:	af00      	add	r7, sp, #0
 800a34e:	60f8      	str	r0, [r7, #12]
 800a350:	60b9      	str	r1, [r7, #8]
 800a352:	4613      	mov	r3, r2
 800a354:	80fb      	strh	r3, [r7, #6]
  while (BufferLength--)
 800a356:	e00d      	b.n	800a374 <Buffercmp+0x2c>
  {
    if (*pBuffer1 != *pBuffer2)
 800a358:	68fb      	ldr	r3, [r7, #12]
 800a35a:	681a      	ldr	r2, [r3, #0]
 800a35c:	68bb      	ldr	r3, [r7, #8]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	429a      	cmp	r2, r3
 800a362:	d001      	beq.n	800a368 <Buffercmp+0x20>
    {
      return 1;
 800a364:	2301      	movs	r3, #1
 800a366:	e00b      	b.n	800a380 <Buffercmp+0x38>
    }

    pBuffer1++;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	3304      	adds	r3, #4
 800a36c:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800a36e:	68bb      	ldr	r3, [r7, #8]
 800a370:	3304      	adds	r3, #4
 800a372:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800a374:	88fb      	ldrh	r3, [r7, #6]
 800a376:	1e5a      	subs	r2, r3, #1
 800a378:	80fa      	strh	r2, [r7, #6]
 800a37a:	2b00      	cmp	r3, #0
 800a37c:	d1ec      	bne.n	800a358 <Buffercmp+0x10>
  }
  return 0;
 800a37e:	2300      	movs	r3, #0
}
 800a380:	4618      	mov	r0, r3
 800a382:	3714      	adds	r7, #20
 800a384:	46bd      	mov	sp, r7
 800a386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a38a:	4770      	bx	lr

0800a38c <BSP_SD_WriteCpltCallback>:
* @brief Tx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_WriteCpltCallback(uint32_t Instance)
{
 800a38c:	b480      	push	{r7}
 800a38e:	b083      	sub	sp, #12
 800a390:	af00      	add	r7, sp, #0
 800a392:	6078      	str	r0, [r7, #4]
  SD1WriteStatus = 1;
 800a394:	4b04      	ldr	r3, [pc, #16]	@ (800a3a8 <BSP_SD_WriteCpltCallback+0x1c>)
 800a396:	2201      	movs	r2, #1
 800a398:	601a      	str	r2, [r3, #0]
}
 800a39a:	bf00      	nop
 800a39c:	370c      	adds	r7, #12
 800a39e:	46bd      	mov	sp, r7
 800a3a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3a4:	4770      	bx	lr
 800a3a6:	bf00      	nop
 800a3a8:	24006de0 	.word	0x24006de0

0800a3ac <BSP_SD_ReadCpltCallback>:
* @brief Rx Transfer completed callbacks
* @param hsd: SD handle
* @retval None
*/
void BSP_SD_ReadCpltCallback(uint32_t Instance)
{
 800a3ac:	b480      	push	{r7}
 800a3ae:	b083      	sub	sp, #12
 800a3b0:	af00      	add	r7, sp, #0
 800a3b2:	6078      	str	r0, [r7, #4]
  SD1ReadStatus = 1;
 800a3b4:	4b04      	ldr	r3, [pc, #16]	@ (800a3c8 <BSP_SD_ReadCpltCallback+0x1c>)
 800a3b6:	2201      	movs	r2, #1
 800a3b8:	601a      	str	r2, [r3, #0]
}
 800a3ba:	bf00      	nop
 800a3bc:	370c      	adds	r7, #12
 800a3be:	46bd      	mov	sp, r7
 800a3c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3c4:	4770      	bx	lr
 800a3c6:	bf00      	nop
 800a3c8:	24006de4 	.word	0x24006de4

0800a3cc <SDRAM_demo>:
  * @brief  SDRAM Demo
  * @param  None
  * @retval None
  */
void SDRAM_demo (void)
{
 800a3cc:	b580      	push	{r7, lr}
 800a3ce:	af00      	add	r7, sp, #0
  SDRAM_SetHint();
 800a3d0:	f000 f968 	bl	800a6a4 <SDRAM_SetHint>

  /* SDRAM device configuration */
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800a3d4:	2000      	movs	r0, #0
 800a3d6:	f006 fecf 	bl	8011178 <BSP_SDRAM_Init>
 800a3da:	4603      	mov	r3, r0
 800a3dc:	2b00      	cmp	r3, #0
 800a3de:	d00c      	beq.n	800a3fa <SDRAM_demo+0x2e>
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800a3e0:	2303      	movs	r3, #3
 800a3e2:	4a3d      	ldr	r2, [pc, #244]	@ (800a4d8 <SDRAM_demo+0x10c>)
 800a3e4:	2173      	movs	r1, #115	@ 0x73
 800a3e6:	2014      	movs	r0, #20
 800a3e8:	f018 fa8a 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a3ec:	2303      	movs	r3, #3
 800a3ee:	4a3b      	ldr	r2, [pc, #236]	@ (800a4dc <SDRAM_demo+0x110>)
 800a3f0:	2182      	movs	r1, #130	@ 0x82
 800a3f2:	2014      	movs	r0, #20
 800a3f4:	f018 fa84 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a3f8:	e005      	b.n	800a406 <SDRAM_demo+0x3a>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800a3fa:	2303      	movs	r3, #3
 800a3fc:	4a38      	ldr	r2, [pc, #224]	@ (800a4e0 <SDRAM_demo+0x114>)
 800a3fe:	2164      	movs	r1, #100	@ 0x64
 800a400:	2014      	movs	r0, #20
 800a402:	f018 fa7d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  /* Fill the buffer to write */
  Fill_Buffer(sdram_aTxBuffer, BUFFER_SIZE, 0xA244250F);
 800a406:	4a37      	ldr	r2, [pc, #220]	@ (800a4e4 <SDRAM_demo+0x118>)
 800a408:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a40c:	4836      	ldr	r0, [pc, #216]	@ (800a4e8 <SDRAM_demo+0x11c>)
 800a40e:	f000 fa15 	bl	800a83c <Fill_Buffer>

  /* Write data to the SDRAM memory */
  if(HAL_SDRAM_Write_32b(&hsdram[0], (uint32_t *)(SDRAM_WRITE_READ_ADDR + WRITE_READ_ADDR), (uint32_t*)sdram_aTxBuffer, BUFFER_SIZE) != BSP_ERROR_NONE)
 800a412:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a416:	4a34      	ldr	r2, [pc, #208]	@ (800a4e8 <SDRAM_demo+0x11c>)
 800a418:	4934      	ldr	r1, [pc, #208]	@ (800a4ec <SDRAM_demo+0x120>)
 800a41a:	4835      	ldr	r0, [pc, #212]	@ (800a4f0 <SDRAM_demo+0x124>)
 800a41c:	f016 ffa7 	bl	802136e <HAL_SDRAM_Write_32b>
 800a420:	4603      	mov	r3, r0
 800a422:	2b00      	cmp	r3, #0
 800a424:	d00c      	beq.n	800a440 <SDRAM_demo+0x74>
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 800a426:	2303      	movs	r3, #3
 800a428:	4a32      	ldr	r2, [pc, #200]	@ (800a4f4 <SDRAM_demo+0x128>)
 800a42a:	2173      	movs	r1, #115	@ 0x73
 800a42c:	2014      	movs	r0, #20
 800a42e:	f018 fa67 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a432:	2303      	movs	r3, #3
 800a434:	4a29      	ldr	r2, [pc, #164]	@ (800a4dc <SDRAM_demo+0x110>)
 800a436:	2182      	movs	r1, #130	@ 0x82
 800a438:	2014      	movs	r0, #20
 800a43a:	f018 fa61 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a43e:	e005      	b.n	800a44c <SDRAM_demo+0x80>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 800a440:	2303      	movs	r3, #3
 800a442:	4a2d      	ldr	r2, [pc, #180]	@ (800a4f8 <SDRAM_demo+0x12c>)
 800a444:	2173      	movs	r1, #115	@ 0x73
 800a446:	2014      	movs	r0, #20
 800a448:	f018 fa5a 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }

  /* Read back data from the SDRAM memory */
  if(HAL_SDRAM_Read_32b(&hsdram[0], (uint32_t *)(SDRAM_WRITE_READ_ADDR + WRITE_READ_ADDR), (uint32_t*)sdram_aRxBuffer, BUFFER_SIZE) != BSP_ERROR_NONE)
 800a44c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a450:	4a2a      	ldr	r2, [pc, #168]	@ (800a4fc <SDRAM_demo+0x130>)
 800a452:	4926      	ldr	r1, [pc, #152]	@ (800a4ec <SDRAM_demo+0x120>)
 800a454:	4826      	ldr	r0, [pc, #152]	@ (800a4f0 <SDRAM_demo+0x124>)
 800a456:	f016 ff3d 	bl	80212d4 <HAL_SDRAM_Read_32b>
 800a45a:	4603      	mov	r3, r0
 800a45c:	2b00      	cmp	r3, #0
 800a45e:	d00c      	beq.n	800a47a <SDRAM_demo+0xae>
  {
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 800a460:	2303      	movs	r3, #3
 800a462:	4a27      	ldr	r2, [pc, #156]	@ (800a500 <SDRAM_demo+0x134>)
 800a464:	2182      	movs	r1, #130	@ 0x82
 800a466:	2014      	movs	r0, #20
 800a468:	f018 fa4a 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a46c:	2303      	movs	r3, #3
 800a46e:	4a1b      	ldr	r2, [pc, #108]	@ (800a4dc <SDRAM_demo+0x110>)
 800a470:	2191      	movs	r1, #145	@ 0x91
 800a472:	2014      	movs	r0, #20
 800a474:	f018 fa44 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a478:	e005      	b.n	800a486 <SDRAM_demo+0xba>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 800a47a:	2303      	movs	r3, #3
 800a47c:	4a21      	ldr	r2, [pc, #132]	@ (800a504 <SDRAM_demo+0x138>)
 800a47e:	2182      	movs	r1, #130	@ 0x82
 800a480:	2014      	movs	r0, #20
 800a482:	f018 fa3d 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }

  if(Buffercmp(sdram_aTxBuffer, sdram_aRxBuffer, BUFFER_SIZE) > 0)
 800a486:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a48a:	491c      	ldr	r1, [pc, #112]	@ (800a4fc <SDRAM_demo+0x130>)
 800a48c:	4816      	ldr	r0, [pc, #88]	@ (800a4e8 <SDRAM_demo+0x11c>)
 800a48e:	f000 fa1f 	bl	800a8d0 <Buffercmp>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d00c      	beq.n	800a4b2 <SDRAM_demo+0xe6>
  {
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 800a498:	2303      	movs	r3, #3
 800a49a:	4a1b      	ldr	r2, [pc, #108]	@ (800a508 <SDRAM_demo+0x13c>)
 800a49c:	2191      	movs	r1, #145	@ 0x91
 800a49e:	2014      	movs	r0, #20
 800a4a0:	f018 fa2e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a4a4:	2303      	movs	r3, #3
 800a4a6:	4a0d      	ldr	r2, [pc, #52]	@ (800a4dc <SDRAM_demo+0x110>)
 800a4a8:	21a0      	movs	r1, #160	@ 0xa0
 800a4aa:	2014      	movs	r0, #20
 800a4ac:	f018 fa28 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a4b0:	e005      	b.n	800a4be <SDRAM_demo+0xf2>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 800a4b2:	2303      	movs	r3, #3
 800a4b4:	4a15      	ldr	r2, [pc, #84]	@ (800a50c <SDRAM_demo+0x140>)
 800a4b6:	2191      	movs	r1, #145	@ 0x91
 800a4b8:	2014      	movs	r0, #20
 800a4ba:	f018 fa21 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }

  ButtonState = 0;
 800a4be:	4b14      	ldr	r3, [pc, #80]	@ (800a510 <SDRAM_demo+0x144>)
 800a4c0:	2200      	movs	r2, #0
 800a4c2:	601a      	str	r2, [r3, #0]
  while (1)
  {
    if(CheckForUserInput() > 0)
 800a4c4:	f7ff f972 	bl	80097ac <CheckForUserInput>
 800a4c8:	4603      	mov	r3, r0
 800a4ca:	2b00      	cmp	r3, #0
 800a4cc:	d0fa      	beq.n	800a4c4 <SDRAM_demo+0xf8>
    {
      ButtonState = 0;
 800a4ce:	4b10      	ldr	r3, [pc, #64]	@ (800a510 <SDRAM_demo+0x144>)
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	601a      	str	r2, [r3, #0]
      return;
 800a4d4:	bf00      	nop
    }
  }
}
 800a4d6:	bd80      	pop	{r7, pc}
 800a4d8:	08027070 	.word	0x08027070
 800a4dc:	08027090 	.word	0x08027090
 800a4e0:	080270a4 	.word	0x080270a4
 800a4e4:	a244250f 	.word	0xa244250f
 800a4e8:	24006dec 	.word	0x24006dec
 800a4ec:	d0178000 	.word	0xd0178000
 800a4f0:	24008870 	.word	0x24008870
 800a4f4:	080270c0 	.word	0x080270c0
 800a4f8:	080270d8 	.word	0x080270d8
 800a4fc:	240071ec 	.word	0x240071ec
 800a500:	080270ec 	.word	0x080270ec
 800a504:	08027104 	.word	0x08027104
 800a508:	08027118 	.word	0x08027118
 800a50c:	08027130 	.word	0x08027130
 800a510:	240055c0 	.word	0x240055c0

0800a514 <SDRAM_DMA_demo>:
  * @brief  SDRAM DMA Demo
  * @param  None
  * @retval None
  */
void SDRAM_DMA_demo (void)
{
 800a514:	b580      	push	{r7, lr}
 800a516:	af00      	add	r7, sp, #0

  SDRAM_DMA_SetHint();
 800a518:	f000 f92a 	bl	800a770 <SDRAM_DMA_SetHint>

  SdramTest = 1;
 800a51c:	4b50      	ldr	r3, [pc, #320]	@ (800a660 <SDRAM_DMA_demo+0x14c>)
 800a51e:	2201      	movs	r2, #1
 800a520:	601a      	str	r2, [r3, #0]
  BSP_SDRAM_DeInit(0);
 800a522:	2000      	movs	r0, #0
 800a524:	f006 fe70 	bl	8011208 <BSP_SDRAM_DeInit>
  /* SDRAM device configuration */
  if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800a528:	2000      	movs	r0, #0
 800a52a:	f006 fe25 	bl	8011178 <BSP_SDRAM_Init>
 800a52e:	4603      	mov	r3, r0
 800a530:	2b00      	cmp	r3, #0
 800a532:	d00f      	beq.n	800a554 <SDRAM_DMA_demo+0x40>
  {
    BSP_LCD_DisplayOn(0);
 800a534:	2000      	movs	r0, #0
 800a536:	f004 ff51 	bl	800f3dc <BSP_LCD_DisplayOn>
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM Initialization : FAILED.", LEFT_MODE);
 800a53a:	2303      	movs	r3, #3
 800a53c:	4a49      	ldr	r2, [pc, #292]	@ (800a664 <SDRAM_DMA_demo+0x150>)
 800a53e:	2173      	movs	r1, #115	@ 0x73
 800a540:	2014      	movs	r0, #20
 800a542:	f018 f9dd 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a546:	2303      	movs	r3, #3
 800a548:	4a47      	ldr	r2, [pc, #284]	@ (800a668 <SDRAM_DMA_demo+0x154>)
 800a54a:	2182      	movs	r1, #130	@ 0x82
 800a54c:	2014      	movs	r0, #20
 800a54e:	f018 f9d7 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a552:	e008      	b.n	800a566 <SDRAM_DMA_demo+0x52>
  }
  else
  {
    BSP_LCD_DisplayOn(0);
 800a554:	2000      	movs	r0, #0
 800a556:	f004 ff41 	bl	800f3dc <BSP_LCD_DisplayOn>
    UTIL_LCD_DisplayStringAt(20, 100, (uint8_t *)"SDRAM Initialization : OK.", LEFT_MODE);
 800a55a:	2303      	movs	r3, #3
 800a55c:	4a43      	ldr	r2, [pc, #268]	@ (800a66c <SDRAM_DMA_demo+0x158>)
 800a55e:	2164      	movs	r1, #100	@ 0x64
 800a560:	2014      	movs	r0, #20
 800a562:	f018 f9cd 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  /* Fill the buffer to write */
  Fill_Buffer(sdram_aTxBuffer, BUFFER_SIZE, 0xA244250F);
 800a566:	4a42      	ldr	r2, [pc, #264]	@ (800a670 <SDRAM_DMA_demo+0x15c>)
 800a568:	f44f 7180 	mov.w	r1, #256	@ 0x100
 800a56c:	4841      	ldr	r0, [pc, #260]	@ (800a674 <SDRAM_DMA_demo+0x160>)
 800a56e:	f000 f965 	bl	800a83c <Fill_Buffer>
  BSP_LCD_DisplayOn(0);
 800a572:	2000      	movs	r0, #0
 800a574:	f004 ff32 	bl	800f3dc <BSP_LCD_DisplayOn>
  /* Write data to the SDRAM memory */
  uwMDMA_Transfer_Complete = 0;
 800a578:	4b3f      	ldr	r3, [pc, #252]	@ (800a678 <SDRAM_DMA_demo+0x164>)
 800a57a:	2200      	movs	r2, #0
 800a57c:	601a      	str	r2, [r3, #0]
  if(HAL_SDRAM_Write_DMA(&hsdram[0], (uint32_t *)(SDRAM_WRITE_READ_ADDR + WRITE_READ_ADDR), sdram_aTxBuffer, BUFFER_SIZE) != BSP_ERROR_NONE)
 800a57e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a582:	4a3c      	ldr	r2, [pc, #240]	@ (800a674 <SDRAM_DMA_demo+0x160>)
 800a584:	493d      	ldr	r1, [pc, #244]	@ (800a67c <SDRAM_DMA_demo+0x168>)
 800a586:	483e      	ldr	r0, [pc, #248]	@ (800a680 <SDRAM_DMA_demo+0x16c>)
 800a588:	f016 ff92 	bl	80214b0 <HAL_SDRAM_Write_DMA>
 800a58c:	4603      	mov	r3, r0
 800a58e:	2b00      	cmp	r3, #0
 800a590:	d00c      	beq.n	800a5ac <SDRAM_DMA_demo+0x98>
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : FAILED.", LEFT_MODE);
 800a592:	2303      	movs	r3, #3
 800a594:	4a3b      	ldr	r2, [pc, #236]	@ (800a684 <SDRAM_DMA_demo+0x170>)
 800a596:	2173      	movs	r1, #115	@ 0x73
 800a598:	2014      	movs	r0, #20
 800a59a:	f018 f9b1 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a59e:	2303      	movs	r3, #3
 800a5a0:	4a31      	ldr	r2, [pc, #196]	@ (800a668 <SDRAM_DMA_demo+0x154>)
 800a5a2:	2182      	movs	r1, #130	@ 0x82
 800a5a4:	2014      	movs	r0, #20
 800a5a6:	f018 f9ab 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a5aa:	e005      	b.n	800a5b8 <SDRAM_DMA_demo+0xa4>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 115, (uint8_t *)"SDRAM WRITE : OK.", LEFT_MODE);
 800a5ac:	2303      	movs	r3, #3
 800a5ae:	4a36      	ldr	r2, [pc, #216]	@ (800a688 <SDRAM_DMA_demo+0x174>)
 800a5b0:	2173      	movs	r1, #115	@ 0x73
 800a5b2:	2014      	movs	r0, #20
 800a5b4:	f018 f9a4 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  /* Wait until DMA transfer is complete */
  while (!uwMDMA_Transfer_Complete)
 800a5b8:	bf00      	nop
 800a5ba:	4b2f      	ldr	r3, [pc, #188]	@ (800a678 <SDRAM_DMA_demo+0x164>)
 800a5bc:	681b      	ldr	r3, [r3, #0]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d0fb      	beq.n	800a5ba <SDRAM_DMA_demo+0xa6>
  {}

  /* Read back data from the SDRAM memory */
  uwMDMA_Transfer_Complete = 0;
 800a5c2:	4b2d      	ldr	r3, [pc, #180]	@ (800a678 <SDRAM_DMA_demo+0x164>)
 800a5c4:	2200      	movs	r2, #0
 800a5c6:	601a      	str	r2, [r3, #0]
  if(HAL_SDRAM_Read_DMA(&hsdram[0], (uint32_t *)(SDRAM_WRITE_READ_ADDR + WRITE_READ_ADDR), sdram_aRxBuffer, BUFFER_SIZE) != BSP_ERROR_NONE)
 800a5c8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800a5cc:	4a2f      	ldr	r2, [pc, #188]	@ (800a68c <SDRAM_DMA_demo+0x178>)
 800a5ce:	492b      	ldr	r1, [pc, #172]	@ (800a67c <SDRAM_DMA_demo+0x168>)
 800a5d0:	482b      	ldr	r0, [pc, #172]	@ (800a680 <SDRAM_DMA_demo+0x16c>)
 800a5d2:	f016 ff19 	bl	8021408 <HAL_SDRAM_Read_DMA>
 800a5d6:	4603      	mov	r3, r0
 800a5d8:	2b00      	cmp	r3, #0
 800a5da:	d00c      	beq.n	800a5f6 <SDRAM_DMA_demo+0xe2>
  {
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : FAILED.", LEFT_MODE);
 800a5dc:	2303      	movs	r3, #3
 800a5de:	4a2c      	ldr	r2, [pc, #176]	@ (800a690 <SDRAM_DMA_demo+0x17c>)
 800a5e0:	2182      	movs	r1, #130	@ 0x82
 800a5e2:	2014      	movs	r0, #20
 800a5e4:	f018 f98c 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a5e8:	2303      	movs	r3, #3
 800a5ea:	4a1f      	ldr	r2, [pc, #124]	@ (800a668 <SDRAM_DMA_demo+0x154>)
 800a5ec:	2191      	movs	r1, #145	@ 0x91
 800a5ee:	2014      	movs	r0, #20
 800a5f0:	f018 f986 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a5f4:	e005      	b.n	800a602 <SDRAM_DMA_demo+0xee>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 130, (uint8_t *)"SDRAM READ : OK.", LEFT_MODE);
 800a5f6:	2303      	movs	r3, #3
 800a5f8:	4a26      	ldr	r2, [pc, #152]	@ (800a694 <SDRAM_DMA_demo+0x180>)
 800a5fa:	2182      	movs	r1, #130	@ 0x82
 800a5fc:	2014      	movs	r0, #20
 800a5fe:	f018 f97f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }
  /* Wait until DMA transfer is complete */
  while (!uwMDMA_Transfer_Complete)
 800a602:	bf00      	nop
 800a604:	4b1c      	ldr	r3, [pc, #112]	@ (800a678 <SDRAM_DMA_demo+0x164>)
 800a606:	681b      	ldr	r3, [r3, #0]
 800a608:	2b00      	cmp	r3, #0
 800a60a:	d0fb      	beq.n	800a604 <SDRAM_DMA_demo+0xf0>
  {}

  if(Buffercmp(sdram_aTxBuffer, sdram_aRxBuffer, BUFFER_SIZE) > 0)
 800a60c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800a610:	491e      	ldr	r1, [pc, #120]	@ (800a68c <SDRAM_DMA_demo+0x178>)
 800a612:	4818      	ldr	r0, [pc, #96]	@ (800a674 <SDRAM_DMA_demo+0x160>)
 800a614:	f000 f95c 	bl	800a8d0 <Buffercmp>
 800a618:	4603      	mov	r3, r0
 800a61a:	2b00      	cmp	r3, #0
 800a61c:	d00c      	beq.n	800a638 <SDRAM_DMA_demo+0x124>
  {
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM COMPARE : FAILED.", LEFT_MODE);
 800a61e:	2303      	movs	r3, #3
 800a620:	4a1d      	ldr	r2, [pc, #116]	@ (800a698 <SDRAM_DMA_demo+0x184>)
 800a622:	2191      	movs	r1, #145	@ 0x91
 800a624:	2014      	movs	r0, #20
 800a626:	f018 f96b 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_DisplayStringAt(20, 160, (uint8_t *)"SDRAM Test Aborted.", LEFT_MODE);
 800a62a:	2303      	movs	r3, #3
 800a62c:	4a0e      	ldr	r2, [pc, #56]	@ (800a668 <SDRAM_DMA_demo+0x154>)
 800a62e:	21a0      	movs	r1, #160	@ 0xa0
 800a630:	2014      	movs	r0, #20
 800a632:	f018 f965 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800a636:	e005      	b.n	800a644 <SDRAM_DMA_demo+0x130>
  }
  else
  {
    UTIL_LCD_DisplayStringAt(20, 145, (uint8_t *)"SDRAM Test : OK.", LEFT_MODE);
 800a638:	2303      	movs	r3, #3
 800a63a:	4a18      	ldr	r2, [pc, #96]	@ (800a69c <SDRAM_DMA_demo+0x188>)
 800a63c:	2191      	movs	r1, #145	@ 0x91
 800a63e:	2014      	movs	r0, #20
 800a640:	f018 f95e 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  }

  while (1)
  {
    if(CheckForUserInput() > 0)
 800a644:	f7ff f8b2 	bl	80097ac <CheckForUserInput>
 800a648:	4603      	mov	r3, r0
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d0fa      	beq.n	800a644 <SDRAM_DMA_demo+0x130>
    {
      ButtonState = 0;
 800a64e:	4b14      	ldr	r3, [pc, #80]	@ (800a6a0 <SDRAM_DMA_demo+0x18c>)
 800a650:	2200      	movs	r2, #0
 800a652:	601a      	str	r2, [r3, #0]
      SdramTest = 0;
 800a654:	4b02      	ldr	r3, [pc, #8]	@ (800a660 <SDRAM_DMA_demo+0x14c>)
 800a656:	2200      	movs	r2, #0
 800a658:	601a      	str	r2, [r3, #0]
      return;
 800a65a:	bf00      	nop
    }
  }
}
 800a65c:	bd80      	pop	{r7, pc}
 800a65e:	bf00      	nop
 800a660:	240055c4 	.word	0x240055c4
 800a664:	08027070 	.word	0x08027070
 800a668:	08027090 	.word	0x08027090
 800a66c:	080270a4 	.word	0x080270a4
 800a670:	a244250f 	.word	0xa244250f
 800a674:	24006dec 	.word	0x24006dec
 800a678:	240075ec 	.word	0x240075ec
 800a67c:	d0178000 	.word	0xd0178000
 800a680:	24008870 	.word	0x24008870
 800a684:	080270c0 	.word	0x080270c0
 800a688:	080270d8 	.word	0x080270d8
 800a68c:	240071ec 	.word	0x240071ec
 800a690:	080270ec 	.word	0x080270ec
 800a694:	08027104 	.word	0x08027104
 800a698:	08027118 	.word	0x08027118
 800a69c:	08027130 	.word	0x08027130
 800a6a0:	240055c0 	.word	0x240055c0

0800a6a4 <SDRAM_SetHint>:
  * @brief  Display SDRAM Demo Hint
  * @param  None
  * @retval None
  */
static void SDRAM_SetHint(void)
{
 800a6a4:	b580      	push	{r7, lr}
 800a6a6:	b084      	sub	sp, #16
 800a6a8:	af02      	add	r7, sp, #8
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800a6aa:	1d3b      	adds	r3, r7, #4
 800a6ac:	4619      	mov	r1, r3
 800a6ae:	2000      	movs	r0, #0
 800a6b0:	f004 fe42 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800a6b4:	463b      	mov	r3, r7
 800a6b6:	4619      	mov	r1, r3
 800a6b8:	2000      	movs	r0, #0
 800a6ba:	f004 fe65 	bl	800f388 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800a6be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6c2:	f018 f8d1 	bl	8022868 <UTIL_LCD_Clear>

  /* Set LCD Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 800a6c6:	687a      	ldr	r2, [r7, #4]
 800a6c8:	4b23      	ldr	r3, [pc, #140]	@ (800a758 <SDRAM_SetHint+0xb4>)
 800a6ca:	9300      	str	r3, [sp, #0]
 800a6cc:	2350      	movs	r3, #80	@ 0x50
 800a6ce:	2100      	movs	r1, #0
 800a6d0:	2000      	movs	r0, #0
 800a6d2:	f018 fcef 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800a6d6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a6da:	f017 ffbd 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800a6de:	481e      	ldr	r0, [pc, #120]	@ (800a758 <SDRAM_SetHint+0xb4>)
 800a6e0:	f017 ffce 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 800a6e4:	481d      	ldr	r0, [pc, #116]	@ (800a75c <SDRAM_SetHint+0xb8>)
 800a6e6:	f017 ffdf 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM", CENTER_MODE);
 800a6ea:	2301      	movs	r3, #1
 800a6ec:	4a1c      	ldr	r2, [pc, #112]	@ (800a760 <SDRAM_SetHint+0xbc>)
 800a6ee:	2100      	movs	r1, #0
 800a6f0:	2000      	movs	r0, #0
 800a6f2:	f018 f905 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 800a6f6:	481b      	ldr	r0, [pc, #108]	@ (800a764 <SDRAM_SetHint+0xc0>)
 800a6f8:	f017 ffd6 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800a6fc:	2301      	movs	r3, #1
 800a6fe:	4a1a      	ldr	r2, [pc, #104]	@ (800a768 <SDRAM_SetHint+0xc4>)
 800a700:	211e      	movs	r1, #30
 800a702:	2000      	movs	r0, #0
 800a704:	f018 f8fc 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM", CENTER_MODE);
 800a708:	2301      	movs	r3, #1
 800a70a:	4a18      	ldr	r2, [pc, #96]	@ (800a76c <SDRAM_SetHint+0xc8>)
 800a70c:	212d      	movs	r1, #45	@ 0x2d
 800a70e:	2000      	movs	r0, #0
 800a710:	f018 f8f6 	bl	8022900 <UTIL_LCD_DisplayStringAt>

   /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	f1a3 0214 	sub.w	r2, r3, #20
 800a71a:	683b      	ldr	r3, [r7, #0]
 800a71c:	3b64      	subs	r3, #100	@ 0x64
 800a71e:	490e      	ldr	r1, [pc, #56]	@ (800a758 <SDRAM_SetHint+0xb4>)
 800a720:	9100      	str	r1, [sp, #0]
 800a722:	215a      	movs	r1, #90	@ 0x5a
 800a724:	200a      	movs	r0, #10
 800a726:	f018 fa55 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	f1a3 0216 	sub.w	r2, r3, #22
 800a730:	683b      	ldr	r3, [r7, #0]
 800a732:	3b66      	subs	r3, #102	@ 0x66
 800a734:	4908      	ldr	r1, [pc, #32]	@ (800a758 <SDRAM_SetHint+0xb4>)
 800a736:	9100      	str	r1, [sp, #0]
 800a738:	215b      	movs	r1, #91	@ 0x5b
 800a73a:	200b      	movs	r0, #11
 800a73c:	f018 fa4a 	bl	8022bd4 <UTIL_LCD_DrawRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800a740:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800a744:	f017 ff88 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800a748:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a74c:	f017 ff98 	bl	8022680 <UTIL_LCD_SetBackColor>
 }
 800a750:	bf00      	nop
 800a752:	3708      	adds	r7, #8
 800a754:	46bd      	mov	sp, r7
 800a756:	bd80      	pop	{r7, pc}
 800a758:	ff0000ff 	.word	0xff0000ff
 800a75c:	24000a44 	.word	0x24000a44
 800a760:	08027144 	.word	0x08027144
 800a764:	24000a5c 	.word	0x24000a5c
 800a768:	0802714c 	.word	0x0802714c
 800a76c:	0802716c 	.word	0x0802716c

0800a770 <SDRAM_DMA_SetHint>:
  * @brief  Display SDRAM DMA Demo Hint
  * @param  None
  * @retval None
  */
static void SDRAM_DMA_SetHint(void)
{
 800a770:	b580      	push	{r7, lr}
 800a772:	b084      	sub	sp, #16
 800a774:	af02      	add	r7, sp, #8
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800a776:	1d3b      	adds	r3, r7, #4
 800a778:	4619      	mov	r1, r3
 800a77a:	2000      	movs	r0, #0
 800a77c:	f004 fddc 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800a780:	463b      	mov	r3, r7
 800a782:	4619      	mov	r1, r3
 800a784:	2000      	movs	r0, #0
 800a786:	f004 fdff 	bl	800f388 <BSP_LCD_GetYSize>

  /* Clear the LCD */
  UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800a78a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a78e:	f018 f86b 	bl	8022868 <UTIL_LCD_Clear>

  /* Set LCD Demo description */
  UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 800a792:	687a      	ldr	r2, [r7, #4]
 800a794:	4b23      	ldr	r3, [pc, #140]	@ (800a824 <SDRAM_DMA_SetHint+0xb4>)
 800a796:	9300      	str	r3, [sp, #0]
 800a798:	2350      	movs	r3, #80	@ 0x50
 800a79a:	2100      	movs	r1, #0
 800a79c:	2000      	movs	r0, #0
 800a79e:	f018 fc89 	bl	80230b4 <UTIL_LCD_FillRect>
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800a7a2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a7a6:	f017 ff57 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800a7aa:	481e      	ldr	r0, [pc, #120]	@ (800a824 <SDRAM_DMA_SetHint+0xb4>)
 800a7ac:	f017 ff68 	bl	8022680 <UTIL_LCD_SetBackColor>
  UTIL_LCD_SetFont(&Font24);
 800a7b0:	481d      	ldr	r0, [pc, #116]	@ (800a828 <SDRAM_DMA_SetHint+0xb8>)
 800a7b2:	f017 ff79 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"SDRAM DMA", CENTER_MODE);
 800a7b6:	2301      	movs	r3, #1
 800a7b8:	4a1c      	ldr	r2, [pc, #112]	@ (800a82c <SDRAM_DMA_SetHint+0xbc>)
 800a7ba:	2100      	movs	r1, #0
 800a7bc:	2000      	movs	r0, #0
 800a7be:	f018 f89f 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_SetFont(&Font12);
 800a7c2:	481b      	ldr	r0, [pc, #108]	@ (800a830 <SDRAM_DMA_SetHint+0xc0>)
 800a7c4:	f017 ff70 	bl	80226a8 <UTIL_LCD_SetFont>
  UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"This example shows how to write", CENTER_MODE);
 800a7c8:	2301      	movs	r3, #1
 800a7ca:	4a1a      	ldr	r2, [pc, #104]	@ (800a834 <SDRAM_DMA_SetHint+0xc4>)
 800a7cc:	211e      	movs	r1, #30
 800a7ce:	2000      	movs	r0, #0
 800a7d0:	f018 f896 	bl	8022900 <UTIL_LCD_DisplayStringAt>
  UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"and read data on SDRAM in DMA mode", CENTER_MODE);
 800a7d4:	2301      	movs	r3, #1
 800a7d6:	4a18      	ldr	r2, [pc, #96]	@ (800a838 <SDRAM_DMA_SetHint+0xc8>)
 800a7d8:	212d      	movs	r1, #45	@ 0x2d
 800a7da:	2000      	movs	r0, #0
 800a7dc:	f018 f890 	bl	8022900 <UTIL_LCD_DisplayStringAt>

  /* Set the LCD Text Color */
  UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size- 100, UTIL_LCD_COLOR_BLUE);
 800a7e0:	687b      	ldr	r3, [r7, #4]
 800a7e2:	f1a3 0214 	sub.w	r2, r3, #20
 800a7e6:	683b      	ldr	r3, [r7, #0]
 800a7e8:	3b64      	subs	r3, #100	@ 0x64
 800a7ea:	490e      	ldr	r1, [pc, #56]	@ (800a824 <SDRAM_DMA_SetHint+0xb4>)
 800a7ec:	9100      	str	r1, [sp, #0]
 800a7ee:	215a      	movs	r1, #90	@ 0x5a
 800a7f0:	200a      	movs	r0, #10
 800a7f2:	f018 f9ef 	bl	8022bd4 <UTIL_LCD_DrawRect>
  UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size- 102, UTIL_LCD_COLOR_BLUE);
 800a7f6:	687b      	ldr	r3, [r7, #4]
 800a7f8:	f1a3 0216 	sub.w	r2, r3, #22
 800a7fc:	683b      	ldr	r3, [r7, #0]
 800a7fe:	3b66      	subs	r3, #102	@ 0x66
 800a800:	4908      	ldr	r1, [pc, #32]	@ (800a824 <SDRAM_DMA_SetHint+0xb4>)
 800a802:	9100      	str	r1, [sp, #0]
 800a804:	215b      	movs	r1, #91	@ 0x5b
 800a806:	200b      	movs	r0, #11
 800a808:	f018 f9e4 	bl	8022bd4 <UTIL_LCD_DrawRect>

  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800a80c:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800a810:	f017 ff22 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800a814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a818:	f017 ff32 	bl	8022680 <UTIL_LCD_SetBackColor>
}
 800a81c:	bf00      	nop
 800a81e:	3708      	adds	r7, #8
 800a820:	46bd      	mov	sp, r7
 800a822:	bd80      	pop	{r7, pc}
 800a824:	ff0000ff 	.word	0xff0000ff
 800a828:	24000a44 	.word	0x24000a44
 800a82c:	08027184 	.word	0x08027184
 800a830:	24000a5c 	.word	0x24000a5c
 800a834:	0802714c 	.word	0x0802714c
 800a838:	08027190 	.word	0x08027190

0800a83c <Fill_Buffer>:
  * @param  uwBufferLenght: size of the buffer to fill
  * @param  uwOffset: first value to fill on the buffer
  * @retval None
  */
static void Fill_Buffer(uint32_t *pBuffer, uint32_t uwBufferLength, uint32_t uwOffset)
{
 800a83c:	b480      	push	{r7}
 800a83e:	b08b      	sub	sp, #44	@ 0x2c
 800a840:	af00      	add	r7, sp, #0
 800a842:	60f8      	str	r0, [r7, #12]
 800a844:	60b9      	str	r1, [r7, #8]
 800a846:	607a      	str	r2, [r7, #4]
  uint32_t tmpIndex = 0;
 800a848:	2300      	movs	r3, #0
 800a84a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Put in global buffer different values */
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 800a84c:	2300      	movs	r3, #0
 800a84e:	627b      	str	r3, [r7, #36]	@ 0x24
 800a850:	e00a      	b.n	800a868 <Fill_Buffer+0x2c>
  {
    pBuffer[tmpIndex] = tmpIndex + uwOffset;
 800a852:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a854:	009b      	lsls	r3, r3, #2
 800a856:	68fa      	ldr	r2, [r7, #12]
 800a858:	4413      	add	r3, r2
 800a85a:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a85c:	687a      	ldr	r2, [r7, #4]
 800a85e:	440a      	add	r2, r1
 800a860:	601a      	str	r2, [r3, #0]
  for (tmpIndex = 0; tmpIndex < uwBufferLength; tmpIndex++ )
 800a862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a864:	3301      	adds	r3, #1
 800a866:	627b      	str	r3, [r7, #36]	@ 0x24
 800a868:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a86a:	68bb      	ldr	r3, [r7, #8]
 800a86c:	429a      	cmp	r2, r3
 800a86e:	d3f0      	bcc.n	800a852 <Fill_Buffer+0x16>
  }
  /* Clean Data Cache to update the content of the SDRAM */
  SCB_CleanDCache_by_Addr((uint32_t*)pBuffer, uwBufferLength*4);
 800a870:	68bb      	ldr	r3, [r7, #8]
 800a872:	009b      	lsls	r3, r3, #2
 800a874:	461a      	mov	r2, r3
 800a876:	68fb      	ldr	r3, [r7, #12]
 800a878:	623b      	str	r3, [r7, #32]
 800a87a:	61fa      	str	r2, [r7, #28]
    if ( dsize > 0 ) { 
 800a87c:	69fb      	ldr	r3, [r7, #28]
 800a87e:	2b00      	cmp	r3, #0
 800a880:	dd1d      	ble.n	800a8be <Fill_Buffer+0x82>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a882:	6a3b      	ldr	r3, [r7, #32]
 800a884:	f003 021f 	and.w	r2, r3, #31
 800a888:	69fb      	ldr	r3, [r7, #28]
 800a88a:	4413      	add	r3, r2
 800a88c:	61bb      	str	r3, [r7, #24]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a88e:	6a3b      	ldr	r3, [r7, #32]
 800a890:	617b      	str	r3, [r7, #20]
  __ASM volatile ("dsb 0xF":::"memory");
 800a892:	f3bf 8f4f 	dsb	sy
}
 800a896:	bf00      	nop
        SCB->DCCMVAC = op_addr;             /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a898:	4a0c      	ldr	r2, [pc, #48]	@ (800a8cc <Fill_Buffer+0x90>)
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f8c2 3268 	str.w	r3, [r2, #616]	@ 0x268
        op_addr += __SCB_DCACHE_LINE_SIZE;
 800a8a0:	697b      	ldr	r3, [r7, #20]
 800a8a2:	3320      	adds	r3, #32
 800a8a4:	617b      	str	r3, [r7, #20]
        op_size -= __SCB_DCACHE_LINE_SIZE;
 800a8a6:	69bb      	ldr	r3, [r7, #24]
 800a8a8:	3b20      	subs	r3, #32
 800a8aa:	61bb      	str	r3, [r7, #24]
      } while ( op_size > 0 );
 800a8ac:	69bb      	ldr	r3, [r7, #24]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	dcf2      	bgt.n	800a898 <Fill_Buffer+0x5c>
  __ASM volatile ("dsb 0xF":::"memory");
 800a8b2:	f3bf 8f4f 	dsb	sy
}
 800a8b6:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a8b8:	f3bf 8f6f 	isb	sy
}
 800a8bc:	bf00      	nop
}
 800a8be:	bf00      	nop
}
 800a8c0:	bf00      	nop
 800a8c2:	372c      	adds	r7, #44	@ 0x2c
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	e000ed00 	.word	0xe000ed00

0800a8d0 <Buffercmp>:
  * @param  BufferLength: buffer's length
  * @retval 1: pBuffer identical to pBuffer1
  *         0: pBuffer differs from pBuffer1
  */
static uint8_t Buffercmp(uint32_t* pBuffer1, uint32_t* pBuffer2, uint16_t BufferLength)
{
 800a8d0:	b480      	push	{r7}
 800a8d2:	b089      	sub	sp, #36	@ 0x24
 800a8d4:	af00      	add	r7, sp, #0
 800a8d6:	60f8      	str	r0, [r7, #12]
 800a8d8:	60b9      	str	r1, [r7, #8]
 800a8da:	4613      	mov	r3, r2
 800a8dc:	80fb      	strh	r3, [r7, #6]
  /* Invalidate Data Cache to get the updated content of the SRAM*/
  SCB_CleanInvalidateDCache_by_Addr((uint32_t *)pBuffer2, BufferLength*4);
 800a8de:	88fb      	ldrh	r3, [r7, #6]
 800a8e0:	009b      	lsls	r3, r3, #2
 800a8e2:	68ba      	ldr	r2, [r7, #8]
 800a8e4:	61fa      	str	r2, [r7, #28]
 800a8e6:	61bb      	str	r3, [r7, #24]
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_FORCEINLINE void SCB_CleanInvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
    if ( dsize > 0 ) { 
 800a8e8:	69bb      	ldr	r3, [r7, #24]
 800a8ea:	2b00      	cmp	r3, #0
 800a8ec:	dd1d      	ble.n	800a92a <Buffercmp+0x5a>
       int32_t op_size = dsize + (((uint32_t)addr) & (__SCB_DCACHE_LINE_SIZE - 1U));
 800a8ee:	69fb      	ldr	r3, [r7, #28]
 800a8f0:	f003 021f 	and.w	r2, r3, #31
 800a8f4:	69bb      	ldr	r3, [r7, #24]
 800a8f6:	4413      	add	r3, r2
 800a8f8:	617b      	str	r3, [r7, #20]
      uint32_t op_addr = (uint32_t)addr /* & ~(__SCB_DCACHE_LINE_SIZE - 1U) */;
 800a8fa:	69fb      	ldr	r3, [r7, #28]
 800a8fc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 800a8fe:	f3bf 8f4f 	dsb	sy
}
 800a902:	bf00      	nop
    
      __DSB();

      do {
        SCB->DCCIMVAC = op_addr;            /* register accepts only 32byte aligned values, only bits 31..5 are valid */
 800a904:	4a17      	ldr	r2, [pc, #92]	@ (800a964 <Buffercmp+0x94>)
 800a906:	693b      	ldr	r3, [r7, #16]
 800a908:	f8c2 3270 	str.w	r3, [r2, #624]	@ 0x270
        op_addr +=          __SCB_DCACHE_LINE_SIZE;
 800a90c:	693b      	ldr	r3, [r7, #16]
 800a90e:	3320      	adds	r3, #32
 800a910:	613b      	str	r3, [r7, #16]
        op_size -=          __SCB_DCACHE_LINE_SIZE;
 800a912:	697b      	ldr	r3, [r7, #20]
 800a914:	3b20      	subs	r3, #32
 800a916:	617b      	str	r3, [r7, #20]
      } while ( op_size > 0 );
 800a918:	697b      	ldr	r3, [r7, #20]
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	dcf2      	bgt.n	800a904 <Buffercmp+0x34>
  __ASM volatile ("dsb 0xF":::"memory");
 800a91e:	f3bf 8f4f 	dsb	sy
}
 800a922:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800a924:	f3bf 8f6f 	isb	sy
}
 800a928:	bf00      	nop

      __DSB();
      __ISB();
    }
  #endif
}
 800a92a:	bf00      	nop

  while (BufferLength--)
 800a92c:	e00d      	b.n	800a94a <Buffercmp+0x7a>
  {
    if (*pBuffer1 != *pBuffer2)
 800a92e:	68fb      	ldr	r3, [r7, #12]
 800a930:	681a      	ldr	r2, [r3, #0]
 800a932:	68bb      	ldr	r3, [r7, #8]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	429a      	cmp	r2, r3
 800a938:	d001      	beq.n	800a93e <Buffercmp+0x6e>
    {
      return 1;
 800a93a:	2301      	movs	r3, #1
 800a93c:	e00b      	b.n	800a956 <Buffercmp+0x86>
    }

    pBuffer1++;
 800a93e:	68fb      	ldr	r3, [r7, #12]
 800a940:	3304      	adds	r3, #4
 800a942:	60fb      	str	r3, [r7, #12]
    pBuffer2++;
 800a944:	68bb      	ldr	r3, [r7, #8]
 800a946:	3304      	adds	r3, #4
 800a948:	60bb      	str	r3, [r7, #8]
  while (BufferLength--)
 800a94a:	88fb      	ldrh	r3, [r7, #6]
 800a94c:	1e5a      	subs	r2, r3, #1
 800a94e:	80fa      	strh	r2, [r7, #6]
 800a950:	2b00      	cmp	r3, #0
 800a952:	d1ec      	bne.n	800a92e <Buffercmp+0x5e>
  }

  return 0;
 800a954:	2300      	movs	r3, #0
}
 800a956:	4618      	mov	r0, r3
 800a958:	3724      	adds	r7, #36	@ 0x24
 800a95a:	46bd      	mov	sp, r7
 800a95c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a960:	4770      	bx	lr
 800a962:	bf00      	nop
 800a964:	e000ed00 	.word	0xe000ed00

0800a968 <HAL_SDRAM_DMA_XferCpltCallback>:
  * @note   This function is executed when the transfer complete interrupt
  *         is generated
  * @retval None
  */
void HAL_SDRAM_DMA_XferCpltCallback(MDMA_HandleTypeDef *hmdma)
{
 800a968:	b480      	push	{r7}
 800a96a:	b083      	sub	sp, #12
 800a96c:	af00      	add	r7, sp, #0
 800a96e:	6078      	str	r0, [r7, #4]
  /* Set transfer complete flag */
  uwMDMA_Transfer_Complete = 1;
 800a970:	4b04      	ldr	r3, [pc, #16]	@ (800a984 <HAL_SDRAM_DMA_XferCpltCallback+0x1c>)
 800a972:	2201      	movs	r2, #1
 800a974:	601a      	str	r2, [r3, #0]
}
 800a976:	bf00      	nop
 800a978:	370c      	adds	r7, #12
 800a97a:	46bd      	mov	sp, r7
 800a97c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a980:	4770      	bx	lr
 800a982:	bf00      	nop
 800a984:	240075ec 	.word	0x240075ec

0800a988 <HAL_SDRAM_DMA_XferErrorCallback>:
  * @brief  DMA transfer complete error callback.
  * @param  hdma: DMA handle
  * @retval None
  */
void HAL_SDRAM_DMA_XferErrorCallback(MDMA_HandleTypeDef *hmdma)
{
 800a988:	b580      	push	{r7, lr}
 800a98a:	b082      	sub	sp, #8
 800a98c:	af00      	add	r7, sp, #0
 800a98e:	6078      	str	r0, [r7, #4]
  UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_RED);
 800a990:	4806      	ldr	r0, [pc, #24]	@ (800a9ac <HAL_SDRAM_DMA_XferErrorCallback+0x24>)
 800a992:	f017 fe61 	bl	8022658 <UTIL_LCD_SetTextColor>
  UTIL_LCD_DisplayStringAt(20, 215, (uint8_t *)"MDMA ERROR", LEFT_MODE);
 800a996:	2303      	movs	r3, #3
 800a998:	4a05      	ldr	r2, [pc, #20]	@ (800a9b0 <HAL_SDRAM_DMA_XferErrorCallback+0x28>)
 800a99a:	21d7      	movs	r1, #215	@ 0xd7
 800a99c:	2014      	movs	r0, #20
 800a99e:	f017 ffaf 	bl	8022900 <UTIL_LCD_DisplayStringAt>
}
 800a9a2:	bf00      	nop
 800a9a4:	3708      	adds	r7, #8
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	bd80      	pop	{r7, pc}
 800a9aa:	bf00      	nop
 800a9ac:	ffff0000 	.word	0xffff0000
 800a9b0:	080271b4 	.word	0x080271b4

0800a9b4 <HAL_MspInit>:
  * @brief  Initializes the Global MSP.
  * @param  None
  * @retval None
  */
void HAL_MspInit(void)
{
 800a9b4:	b480      	push	{r7}
 800a9b6:	af00      	add	r7, sp, #0
}
 800a9b8:	bf00      	nop
 800a9ba:	46bd      	mov	sp, r7
 800a9bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9c0:	4770      	bx	lr

0800a9c2 <NMI_Handler>:
  * @brief  This function handles NMI exception.
  * @param  None
  * @retval None
  */
void NMI_Handler(void)
{
 800a9c2:	b480      	push	{r7}
 800a9c4:	af00      	add	r7, sp, #0
}
 800a9c6:	bf00      	nop
 800a9c8:	46bd      	mov	sp, r7
 800a9ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ce:	4770      	bx	lr

0800a9d0 <HardFault_Handler>:
  * @brief  This function handles Hard Fault exception.
  * @param  None
  * @retval None
  */
void HardFault_Handler(void)
{
 800a9d0:	b480      	push	{r7}
 800a9d2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Hard Fault exception occurs */
  while (1)
 800a9d4:	bf00      	nop
 800a9d6:	e7fd      	b.n	800a9d4 <HardFault_Handler+0x4>

0800a9d8 <MemManage_Handler>:
  * @brief  This function handles Memory Manage exception.
  * @param  None
  * @retval None
  */
void MemManage_Handler(void)
{
 800a9d8:	b480      	push	{r7}
 800a9da:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Memory Manage exception occurs */
  while (1)
 800a9dc:	bf00      	nop
 800a9de:	e7fd      	b.n	800a9dc <MemManage_Handler+0x4>

0800a9e0 <BusFault_Handler>:
  * @brief  This function handles Bus Fault exception.
  * @param  None
  * @retval None
  */
void BusFault_Handler(void)
{
 800a9e0:	b480      	push	{r7}
 800a9e2:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Bus Fault exception occurs */
  while (1)
 800a9e4:	bf00      	nop
 800a9e6:	e7fd      	b.n	800a9e4 <BusFault_Handler+0x4>

0800a9e8 <UsageFault_Handler>:
  * @brief  This function handles Usage Fault exception.
  * @param  None
  * @retval None
  */
void UsageFault_Handler(void)
{
 800a9e8:	b480      	push	{r7}
 800a9ea:	af00      	add	r7, sp, #0
  /* Go to infinite loop when Usage Fault exception occurs */
  while (1)
 800a9ec:	bf00      	nop
 800a9ee:	e7fd      	b.n	800a9ec <UsageFault_Handler+0x4>

0800a9f0 <SVC_Handler>:
  * @brief  This function handles SVCall exception.
  * @param  None
  * @retval None
  */
void SVC_Handler(void)
{
 800a9f0:	b480      	push	{r7}
 800a9f2:	af00      	add	r7, sp, #0
}
 800a9f4:	bf00      	nop
 800a9f6:	46bd      	mov	sp, r7
 800a9f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9fc:	4770      	bx	lr

0800a9fe <DebugMon_Handler>:
  * @brief  This function handles Debug Monitor exception.
  * @param  None
  * @retval None
  */
void DebugMon_Handler(void)
{
 800a9fe:	b480      	push	{r7}
 800aa00:	af00      	add	r7, sp, #0
}
 800aa02:	bf00      	nop
 800aa04:	46bd      	mov	sp, r7
 800aa06:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa0a:	4770      	bx	lr

0800aa0c <PendSV_Handler>:
  * @brief  This function handles PendSVC exception.
  * @param  None
  * @retval None
  */
void PendSV_Handler(void)
{
 800aa0c:	b480      	push	{r7}
 800aa0e:	af00      	add	r7, sp, #0
}
 800aa10:	bf00      	nop
 800aa12:	46bd      	mov	sp, r7
 800aa14:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa18:	4770      	bx	lr

0800aa1a <SysTick_Handler>:
  * @brief  This function handles SysTick Handler.
  * @param  None
  * @retval None
  */
void SysTick_Handler(void)
{
 800aa1a:	b580      	push	{r7, lr}
 800aa1c:	af00      	add	r7, sp, #0
  HAL_IncTick();
 800aa1e:	f007 fb99 	bl	8012154 <HAL_IncTick>
}
 800aa22:	bf00      	nop
 800aa24:	bd80      	pop	{r7, pc}

0800aa26 <EXTI2_IRQHandler>:
* @brief  This function handles External line 2 interrupt request.
* @param  None
* @retval None
*/
void EXTI2_IRQHandler(void)
{
 800aa26:	b580      	push	{r7, lr}
 800aa28:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_SEL);
 800aa2a:	2101      	movs	r1, #1
 800aa2c:	2000      	movs	r0, #0
 800aa2e:	f001 f8bf 	bl	800bbb0 <BSP_JOY_IRQHandler>
}
 800aa32:	bf00      	nop
 800aa34:	bd80      	pop	{r7, pc}

0800aa36 <EXTI3_IRQHandler>:
* @brief  This function handles External line 3 interrupt request.
* @param  None
* @retval None
*/
void EXTI3_IRQHandler(void)
{
 800aa36:	b580      	push	{r7, lr}
 800aa38:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_DOWN);
 800aa3a:	2102      	movs	r1, #2
 800aa3c:	2000      	movs	r0, #0
 800aa3e:	f001 f8b7 	bl	800bbb0 <BSP_JOY_IRQHandler>
}
 800aa42:	bf00      	nop
 800aa44:	bd80      	pop	{r7, pc}

0800aa46 <EXTI4_IRQHandler>:
* @brief  This function handles External line 4 interrupt request.
* @param  None
* @retval None
*/
void EXTI4_IRQHandler(void)
{
 800aa46:	b580      	push	{r7, lr}
 800aa48:	af00      	add	r7, sp, #0
   BSP_JOY_IRQHandler(JOY1, JOY_LEFT);
 800aa4a:	2104      	movs	r1, #4
 800aa4c:	2000      	movs	r0, #0
 800aa4e:	f001 f8af 	bl	800bbb0 <BSP_JOY_IRQHandler>
}
 800aa52:	bf00      	nop
 800aa54:	bd80      	pop	{r7, pc}

0800aa56 <EXTI9_5_IRQHandler>:
* @brief  This function handles External lines 9 to 5 interrupt request.
* @param  None
* @retval None
*/
void EXTI9_5_IRQHandler(void)
{
 800aa56:	b580      	push	{r7, lr}
 800aa58:	af00      	add	r7, sp, #0
  BSP_JOY_IRQHandler(JOY1, JOY_RIGHT);
 800aa5a:	2108      	movs	r1, #8
 800aa5c:	2000      	movs	r0, #0
 800aa5e:	f001 f8a7 	bl	800bbb0 <BSP_JOY_IRQHandler>
  BSP_JOY_IRQHandler(JOY1, JOY_UP);
 800aa62:	2110      	movs	r1, #16
 800aa64:	2000      	movs	r0, #0
 800aa66:	f001 f8a3 	bl	800bbb0 <BSP_JOY_IRQHandler>
}
 800aa6a:	bf00      	nop
 800aa6c:	bd80      	pop	{r7, pc}

0800aa6e <EXTI15_10_IRQHandler>:
  * @brief  This function handles External lines 15 to 10 interrupt request.
  * @param  None
  * @retval None
  */
void EXTI15_10_IRQHandler(void)
{
 800aa6e:	b580      	push	{r7, lr}
 800aa70:	af00      	add	r7, sp, #0
  BSP_PB_IRQHandler(BUTTON_WAKEUP);
 800aa72:	2000      	movs	r0, #0
 800aa74:	f000 fefc 	bl	800b870 <BSP_PB_IRQHandler>
}
 800aa78:	bf00      	nop
 800aa7a:	bd80      	pop	{r7, pc}

0800aa7c <DMA2_Stream4_IRQHandler>:
  * @brief  This function handles SAI DMA interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAIx_DMAx_IRQHandler()
{
 800aa7c:	b580      	push	{r7, lr}
 800aa7e:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(0,AUDIO_IN_DEVICE_DIGITAL_MIC);
 800aa80:	2110      	movs	r1, #16
 800aa82:	2000      	movs	r0, #0
 800aa84:	f002 f9e8 	bl	800ce58 <BSP_AUDIO_IN_IRQHandler>
}
 800aa88:	bf00      	nop
 800aa8a:	bd80      	pop	{r7, pc}

0800aa8c <DMA2_Stream1_IRQHandler>:
  * @brief  This function handles DMA2 Stream 1 interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_OUT_SAIx_DMAx_IRQHandler(void)
{
 800aa8c:	b580      	push	{r7, lr}
 800aa8e:	af00      	add	r7, sp, #0
  BSP_AUDIO_OUT_IRQHandler(0);
 800aa90:	2000      	movs	r0, #0
 800aa92:	f001 fcf7 	bl	800c484 <BSP_AUDIO_OUT_IRQHandler>
}
 800aa96:	bf00      	nop
 800aa98:	bd80      	pop	{r7, pc}

0800aa9a <BDMA_Channel1_IRQHandler>:
  * @brief  This function handles BDMA Channel 1 for SAI_PDM interrupt request.
  * @param  None
  * @retval None
  */
void AUDIO_IN_SAI_PDMx_DMAx_IRQHandler(void)
{
 800aa9a:	b580      	push	{r7, lr}
 800aa9c:	af00      	add	r7, sp, #0
  BSP_AUDIO_IN_IRQHandler(1, AUDIO_IN_DEVICE_DIGITAL_MIC);
 800aa9e:	2110      	movs	r1, #16
 800aaa0:	2001      	movs	r0, #1
 800aaa2:	f002 f9d9 	bl	800ce58 <BSP_AUDIO_IN_IRQHandler>
}
 800aaa6:	bf00      	nop
 800aaa8:	bd80      	pop	{r7, pc}

0800aaaa <MDMA_IRQHandler>:
/**
  * @brief  Handles MDMA transfer interrupt request.
  * @retval None
  */
void MDMA_IRQHandler(void)
{
 800aaaa:	b580      	push	{r7, lr}
 800aaac:	af00      	add	r7, sp, #0
    BSP_SDRAM_IRQHandler(0);
 800aaae:	2000      	movs	r0, #0
 800aab0:	f006 fc26 	bl	8011300 <BSP_SDRAM_IRQHandler>
}
 800aab4:	bf00      	nop
 800aab6:	bd80      	pop	{r7, pc}

0800aab8 <SDMMC1_IRQHandler>:
  * @brief  This function handles SD interrupt request.
  * @param  None
  * @retval None
  */
void SDMMC1_IRQHandler(void)
{
 800aab8:	b580      	push	{r7, lr}
 800aaba:	af00      	add	r7, sp, #0
  BSP_SD_IRQHandler(0);
 800aabc:	2000      	movs	r0, #0
 800aabe:	f006 fa69 	bl	8010f94 <BSP_SD_IRQHandler>
}
 800aac2:	bf00      	nop
 800aac4:	bd80      	pop	{r7, pc}

0800aac6 <DCMI_IRQHandler>:
  * @brief  DCMI interrupt handler.
  * @param  None
  * @retval None
  */
void DCMI_IRQHandler(void)
{
 800aac6:	b580      	push	{r7, lr}
 800aac8:	af00      	add	r7, sp, #0
   BSP_CAMERA_IRQHandler(0);
 800aaca:	2000      	movs	r0, #0
 800aacc:	f003 fd92 	bl	800e5f4 <BSP_CAMERA_IRQHandler>
}
 800aad0:	bf00      	nop
 800aad2:	bd80      	pop	{r7, pc}

0800aad4 <DMA2_Stream3_IRQHandler>:
  * @brief  DMA interrupt handler.
  * @param  None
  * @retval None
  */
void DMA2_Stream3_IRQHandler(void)
{
 800aad4:	b580      	push	{r7, lr}
 800aad6:	af00      	add	r7, sp, #0
  BSP_CAMERA_DMA_IRQHandler(0);
 800aad8:	2000      	movs	r0, #0
 800aada:	f003 fd99 	bl	800e610 <BSP_CAMERA_DMA_IRQHandler>
}
 800aade:	bf00      	nop
 800aae0:	bd80      	pop	{r7, pc}
	...

0800aae4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aae4:	b580      	push	{r7, lr}
 800aae6:	b086      	sub	sp, #24
 800aae8:	af00      	add	r7, sp, #0
 800aaea:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aaec:	4a14      	ldr	r2, [pc, #80]	@ (800ab40 <_sbrk+0x5c>)
 800aaee:	4b15      	ldr	r3, [pc, #84]	@ (800ab44 <_sbrk+0x60>)
 800aaf0:	1ad3      	subs	r3, r2, r3
 800aaf2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aaf8:	4b13      	ldr	r3, [pc, #76]	@ (800ab48 <_sbrk+0x64>)
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	2b00      	cmp	r3, #0
 800aafe:	d102      	bne.n	800ab06 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800ab00:	4b11      	ldr	r3, [pc, #68]	@ (800ab48 <_sbrk+0x64>)
 800ab02:	4a12      	ldr	r2, [pc, #72]	@ (800ab4c <_sbrk+0x68>)
 800ab04:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800ab06:	4b10      	ldr	r3, [pc, #64]	@ (800ab48 <_sbrk+0x64>)
 800ab08:	681a      	ldr	r2, [r3, #0]
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	4413      	add	r3, r2
 800ab0e:	693a      	ldr	r2, [r7, #16]
 800ab10:	429a      	cmp	r2, r3
 800ab12:	d207      	bcs.n	800ab24 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800ab14:	f01a fea6 	bl	8025864 <__errno>
 800ab18:	4603      	mov	r3, r0
 800ab1a:	220c      	movs	r2, #12
 800ab1c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800ab1e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ab22:	e009      	b.n	800ab38 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800ab24:	4b08      	ldr	r3, [pc, #32]	@ (800ab48 <_sbrk+0x64>)
 800ab26:	681b      	ldr	r3, [r3, #0]
 800ab28:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800ab2a:	4b07      	ldr	r3, [pc, #28]	@ (800ab48 <_sbrk+0x64>)
 800ab2c:	681a      	ldr	r2, [r3, #0]
 800ab2e:	687b      	ldr	r3, [r7, #4]
 800ab30:	4413      	add	r3, r2
 800ab32:	4a05      	ldr	r2, [pc, #20]	@ (800ab48 <_sbrk+0x64>)
 800ab34:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800ab36:	68fb      	ldr	r3, [r7, #12]
}
 800ab38:	4618      	mov	r0, r3
 800ab3a:	3718      	adds	r7, #24
 800ab3c:	46bd      	mov	sp, r7
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	24080000 	.word	0x24080000
 800ab44:	00001000 	.word	0x00001000
 800ab48:	240075f0 	.word	0x240075f0
 800ab4c:	24008bb0 	.word	0x24008bb0

0800ab50 <Touchscreen_demo1>:
  * @brief  Touchscreen Demo1 : test touchscreen calibration and single touch in polling mode
  * @param  None
  * @retval None
  */
void Touchscreen_demo1(void)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b086      	sub	sp, #24
 800ab54:	af00      	add	r7, sp, #0
  uint16_t x1, y1;
  uint8_t state = 0;
 800ab56:	2300      	movs	r3, #0
 800ab58:	75fb      	strb	r3, [r7, #23]
  uint32_t ts_status = BSP_ERROR_NONE;
 800ab5a:	2300      	movs	r3, #0
 800ab5c:	613b      	str	r3, [r7, #16]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800ab5e:	f107 0308 	add.w	r3, r7, #8
 800ab62:	4619      	mov	r1, r3
 800ab64:	2000      	movs	r0, #0
 800ab66:	f004 fbe7 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800ab6a:	1d3b      	adds	r3, r7, #4
 800ab6c:	4619      	mov	r1, r3
 800ab6e:	2000      	movs	r0, #0
 800ab70:	f004 fc0a 	bl	800f388 <BSP_LCD_GetYSize>
  ButtonState = 0;
 800ab74:	4b5d      	ldr	r3, [pc, #372]	@ (800acec <Touchscreen_demo1+0x19c>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	601a      	str	r2, [r3, #0]

  hTS->Width = x_size;
 800ab7a:	4b5d      	ldr	r3, [pc, #372]	@ (800acf0 <Touchscreen_demo1+0x1a0>)
 800ab7c:	681b      	ldr	r3, [r3, #0]
 800ab7e:	68ba      	ldr	r2, [r7, #8]
 800ab80:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
 800ab82:	4b5b      	ldr	r3, [pc, #364]	@ (800acf0 <Touchscreen_demo1+0x1a0>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	687a      	ldr	r2, [r7, #4]
 800ab88:	605a      	str	r2, [r3, #4]
  hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
 800ab8a:	4b59      	ldr	r3, [pc, #356]	@ (800acf0 <Touchscreen_demo1+0x1a0>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	220c      	movs	r2, #12
 800ab90:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 0;
 800ab92:	4b57      	ldr	r3, [pc, #348]	@ (800acf0 <Touchscreen_demo1+0x1a0>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	2200      	movs	r2, #0
 800ab98:	60da      	str	r2, [r3, #12]

  /* Touchscreen initialization */
  ts_status = BSP_TS_Init(0, hTS);
 800ab9a:	4b55      	ldr	r3, [pc, #340]	@ (800acf0 <Touchscreen_demo1+0x1a0>)
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4619      	mov	r1, r3
 800aba0:	2000      	movs	r0, #0
 800aba2:	f006 fcef 	bl	8011584 <BSP_TS_Init>
 800aba6:	4603      	mov	r3, r0
 800aba8:	613b      	str	r3, [r7, #16]

  if(ts_status == BSP_ERROR_NONE)
 800abaa:	693b      	ldr	r3, [r7, #16]
 800abac:	2b00      	cmp	r3, #0
 800abae:	f040 809a 	bne.w	800ace6 <Touchscreen_demo1+0x196>
  {
    /* Display touch screen demo description */
    Touchscreen_SetHint_Demo(TOUCHSCREEN_DEMO_1);
 800abb2:	2001      	movs	r0, #1
 800abb4:	f000 fa76 	bl	800b0a4 <Touchscreen_SetHint_Demo>
    Touchscreen_DrawBackground_Circles(state);
 800abb8:	7dfb      	ldrb	r3, [r7, #23]
 800abba:	4618      	mov	r0, r3
 800abbc:	f000 fb28 	bl	800b210 <Touchscreen_DrawBackground_Circles>

    while (1)
    {
      /* Check in polling mode in touch screen the touch status and coordinates */
      /* of touches if touch occurred                                           */
      ts_status = BSP_TS_GetState(0, &TS_State);
 800abc0:	494c      	ldr	r1, [pc, #304]	@ (800acf4 <Touchscreen_demo1+0x1a4>)
 800abc2:	2000      	movs	r0, #0
 800abc4:	f006 fdc2 	bl	801174c <BSP_TS_GetState>
 800abc8:	4603      	mov	r3, r0
 800abca:	613b      	str	r3, [r7, #16]
      if(TS_State.TouchDetected)
 800abcc:	4b49      	ldr	r3, [pc, #292]	@ (800acf4 <Touchscreen_demo1+0x1a4>)
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d078      	beq.n	800acc6 <Touchscreen_demo1+0x176>
      {
        /* One or dual touch have been detected          */
        /* Only take into account the first touch so far */

        /* Get X and Y position of the first touch post calibrated */
        x1 = TS_State.TouchX;
 800abd4:	4b47      	ldr	r3, [pc, #284]	@ (800acf4 <Touchscreen_demo1+0x1a4>)
 800abd6:	685b      	ldr	r3, [r3, #4]
 800abd8:	81fb      	strh	r3, [r7, #14]
        y1 = TS_State.TouchY;
 800abda:	4b46      	ldr	r3, [pc, #280]	@ (800acf4 <Touchscreen_demo1+0x1a4>)
 800abdc:	689b      	ldr	r3, [r3, #8]
 800abde:	81bb      	strh	r3, [r7, #12]

        if ((y1 > (CIRCLE_YPOS(1) - CIRCLE_RADIUS)) &&
 800abe0:	89bb      	ldrh	r3, [r7, #12]
 800abe2:	f5b3 7faa 	cmp.w	r3, #340	@ 0x154
 800abe6:	d96e      	bls.n	800acc6 <Touchscreen_demo1+0x176>
 800abe8:	89bb      	ldrh	r3, [r7, #12]
 800abea:	f5b3 7fd2 	cmp.w	r3, #420	@ 0x1a4
 800abee:	d26a      	bcs.n	800acc6 <Touchscreen_demo1+0x176>
            (y1 < (CIRCLE_YPOS(1) + CIRCLE_RADIUS)))
        {
          if ((x1 > (CIRCLE_XPOS(1) - CIRCLE_RADIUS)) &&
 800abf0:	89fb      	ldrh	r3, [r7, #14]
 800abf2:	2b78      	cmp	r3, #120	@ 0x78
 800abf4:	d914      	bls.n	800ac20 <Touchscreen_demo1+0xd0>
 800abf6:	89fb      	ldrh	r3, [r7, #14]
 800abf8:	2bc7      	cmp	r3, #199	@ 0xc7
 800abfa:	d811      	bhi.n	800ac20 <Touchscreen_demo1+0xd0>
              (x1 < (CIRCLE_XPOS(1) + CIRCLE_RADIUS)))
          {
            if ((state & 1) == 0)
 800abfc:	7dfb      	ldrb	r3, [r7, #23]
 800abfe:	f003 0301 	and.w	r3, r3, #1
 800ac02:	2b00      	cmp	r3, #0
 800ac04:	d10c      	bne.n	800ac20 <Touchscreen_demo1+0xd0>
            {
              Touchscreen_DrawBackground_Circles(state);
 800ac06:	7dfb      	ldrb	r3, [r7, #23]
 800ac08:	4618      	mov	r0, r3
 800ac0a:	f000 fb01 	bl	800b210 <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800ac0e:	4b3a      	ldr	r3, [pc, #232]	@ (800acf8 <Touchscreen_demo1+0x1a8>)
 800ac10:	2228      	movs	r2, #40	@ 0x28
 800ac12:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800ac16:	20a0      	movs	r0, #160	@ 0xa0
 800ac18:	f018 fa86 	bl	8023128 <UTIL_LCD_FillCircle>
              state = 1;
 800ac1c:	2301      	movs	r3, #1
 800ac1e:	75fb      	strb	r3, [r7, #23]
            }
          }
          if ((x1 > (CIRCLE_XPOS(2) - CIRCLE_RADIUS)) &&
 800ac20:	89fb      	ldrh	r3, [r7, #14]
 800ac22:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 800ac26:	d916      	bls.n	800ac56 <Touchscreen_demo1+0x106>
 800ac28:	89fb      	ldrh	r3, [r7, #14]
 800ac2a:	f5b3 7fb4 	cmp.w	r3, #360	@ 0x168
 800ac2e:	d212      	bcs.n	800ac56 <Touchscreen_demo1+0x106>
              (x1 < (CIRCLE_XPOS(2) + CIRCLE_RADIUS)))
          {
            if ((state & 2) == 0)
 800ac30:	7dfb      	ldrb	r3, [r7, #23]
 800ac32:	f003 0302 	and.w	r3, r3, #2
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d10d      	bne.n	800ac56 <Touchscreen_demo1+0x106>
            {
              Touchscreen_DrawBackground_Circles(state);
 800ac3a:	7dfb      	ldrb	r3, [r7, #23]
 800ac3c:	4618      	mov	r0, r3
 800ac3e:	f000 fae7 	bl	800b210 <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_RED);
 800ac42:	4b2e      	ldr	r3, [pc, #184]	@ (800acfc <Touchscreen_demo1+0x1ac>)
 800ac44:	2228      	movs	r2, #40	@ 0x28
 800ac46:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800ac4a:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800ac4e:	f018 fa6b 	bl	8023128 <UTIL_LCD_FillCircle>
              state = 2;
 800ac52:	2302      	movs	r3, #2
 800ac54:	75fb      	strb	r3, [r7, #23]
            }
          }

          if ((x1 > (CIRCLE_XPOS(3) - CIRCLE_RADIUS)) &&
 800ac56:	89fb      	ldrh	r3, [r7, #14]
 800ac58:	f5b3 7fdc 	cmp.w	r3, #440	@ 0x1b8
 800ac5c:	d917      	bls.n	800ac8e <Touchscreen_demo1+0x13e>
 800ac5e:	89fb      	ldrh	r3, [r7, #14]
 800ac60:	f5b3 7f02 	cmp.w	r3, #520	@ 0x208
 800ac64:	d213      	bcs.n	800ac8e <Touchscreen_demo1+0x13e>
              (x1 < (CIRCLE_XPOS(3) + CIRCLE_RADIUS)))
          {
            if ((state & 4) == 0)
 800ac66:	7dfb      	ldrb	r3, [r7, #23]
 800ac68:	f003 0304 	and.w	r3, r3, #4
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d10e      	bne.n	800ac8e <Touchscreen_demo1+0x13e>
            {
              Touchscreen_DrawBackground_Circles(state);
 800ac70:	7dfb      	ldrb	r3, [r7, #23]
 800ac72:	4618      	mov	r0, r3
 800ac74:	f000 facc 	bl	800b210 <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_YELLOW);
 800ac78:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 800ac7c:	2228      	movs	r2, #40	@ 0x28
 800ac7e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800ac82:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800ac86:	f018 fa4f 	bl	8023128 <UTIL_LCD_FillCircle>
              state = 4;
 800ac8a:	2304      	movs	r3, #4
 800ac8c:	75fb      	strb	r3, [r7, #23]
            }
          }

          if ((x1 > (CIRCLE_XPOS(4) - CIRCLE_RADIUS)) &&
 800ac8e:	89fb      	ldrh	r3, [r7, #14]
 800ac90:	f5b3 7f16 	cmp.w	r3, #600	@ 0x258
 800ac94:	d917      	bls.n	800acc6 <Touchscreen_demo1+0x176>
 800ac96:	89fb      	ldrh	r3, [r7, #14]
 800ac98:	f5b3 7f2a 	cmp.w	r3, #680	@ 0x2a8
 800ac9c:	d213      	bcs.n	800acc6 <Touchscreen_demo1+0x176>
              (x1 < (CIRCLE_XPOS(4) + CIRCLE_RADIUS)))
          {
            if ((state & 8) == 0)
 800ac9e:	7dfb      	ldrb	r3, [r7, #23]
 800aca0:	f003 0308 	and.w	r3, r3, #8
 800aca4:	2b00      	cmp	r3, #0
 800aca6:	d10e      	bne.n	800acc6 <Touchscreen_demo1+0x176>
            {
              Touchscreen_DrawBackground_Circles(state);
 800aca8:	7dfb      	ldrb	r3, [r7, #23]
 800acaa:	4618      	mov	r0, r3
 800acac:	f000 fab0 	bl	800b210 <Touchscreen_DrawBackground_Circles>
              UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_GREEN);
 800acb0:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 800acb4:	2228      	movs	r2, #40	@ 0x28
 800acb6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800acba:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800acbe:	f018 fa33 	bl	8023128 <UTIL_LCD_FillCircle>
              state = 8;
 800acc2:	2308      	movs	r3, #8
 800acc4:	75fb      	strb	r3, [r7, #23]
            }
          }
        }

      }
      if(CheckForUserInput() > 0)
 800acc6:	f7fe fd71 	bl	80097ac <CheckForUserInput>
 800acca:	4603      	mov	r3, r0
 800accc:	2b00      	cmp	r3, #0
 800acce:	d006      	beq.n	800acde <Touchscreen_demo1+0x18e>
      {

        BSP_TS_DeInit(0);
 800acd0:	2000      	movs	r0, #0
 800acd2:	f006 fd13 	bl	80116fc <BSP_TS_DeInit>

        ButtonState = 0;
 800acd6:	4b05      	ldr	r3, [pc, #20]	@ (800acec <Touchscreen_demo1+0x19c>)
 800acd8:	2200      	movs	r2, #0
 800acda:	601a      	str	r2, [r3, #0]
 800acdc:	e003      	b.n	800ace6 <Touchscreen_demo1+0x196>
        return;
      }

      HAL_Delay(20);
 800acde:	2014      	movs	r0, #20
 800ace0:	f007 fa58 	bl	8012194 <HAL_Delay>
      ts_status = BSP_TS_GetState(0, &TS_State);
 800ace4:	e76c      	b.n	800abc0 <Touchscreen_demo1+0x70>
    }
  }
}
 800ace6:	3718      	adds	r7, #24
 800ace8:	46bd      	mov	sp, r7
 800acea:	bd80      	pop	{r7, pc}
 800acec:	240055c0 	.word	0x240055c0
 800acf0:	24007630 	.word	0x24007630
 800acf4:	240075f8 	.word	0x240075f8
 800acf8:	ff0000ff 	.word	0xff0000ff
 800acfc:	ffff0000 	.word	0xffff0000

0800ad00 <Touchscreen_demo2>:
  * @brief  Touchscreen Demo2 : test touchscreen single and dual touch in polling mode
  * @param  None
  * @retval None
  */
void Touchscreen_demo2(void)
{
 800ad00:	b580      	push	{r7, lr}
 800ad02:	b084      	sub	sp, #16
 800ad04:	af00      	add	r7, sp, #0
  uint32_t ts_status = BSP_ERROR_NONE;
 800ad06:	2300      	movs	r3, #0
 800ad08:	60fb      	str	r3, [r7, #12]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800ad0a:	f107 0308 	add.w	r3, r7, #8
 800ad0e:	4619      	mov	r1, r3
 800ad10:	2000      	movs	r0, #0
 800ad12:	f004 fb11 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800ad16:	1d3b      	adds	r3, r7, #4
 800ad18:	4619      	mov	r1, r3
 800ad1a:	2000      	movs	r0, #0
 800ad1c:	f004 fb34 	bl	800f388 <BSP_LCD_GetYSize>

  hTS->Width = x_size;
 800ad20:	4b23      	ldr	r3, [pc, #140]	@ (800adb0 <Touchscreen_demo2+0xb0>)
 800ad22:	681b      	ldr	r3, [r3, #0]
 800ad24:	68ba      	ldr	r2, [r7, #8]
 800ad26:	601a      	str	r2, [r3, #0]
  hTS->Height = y_size;
 800ad28:	4b21      	ldr	r3, [pc, #132]	@ (800adb0 <Touchscreen_demo2+0xb0>)
 800ad2a:	681b      	ldr	r3, [r3, #0]
 800ad2c:	687a      	ldr	r2, [r7, #4]
 800ad2e:	605a      	str	r2, [r3, #4]
  hTS->Orientation = TS_SWAP_XY | TS_SWAP_Y;
 800ad30:	4b1f      	ldr	r3, [pc, #124]	@ (800adb0 <Touchscreen_demo2+0xb0>)
 800ad32:	681b      	ldr	r3, [r3, #0]
 800ad34:	220c      	movs	r2, #12
 800ad36:	609a      	str	r2, [r3, #8]
  hTS->Accuracy = 5;
 800ad38:	4b1d      	ldr	r3, [pc, #116]	@ (800adb0 <Touchscreen_demo2+0xb0>)
 800ad3a:	681b      	ldr	r3, [r3, #0]
 800ad3c:	2205      	movs	r2, #5
 800ad3e:	60da      	str	r2, [r3, #12]

  GestureConf.Radian = 0x0A;
 800ad40:	4b1c      	ldr	r3, [pc, #112]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad42:	220a      	movs	r2, #10
 800ad44:	601a      	str	r2, [r3, #0]
  GestureConf.OffsetLeftRight = 0x19;
 800ad46:	4b1b      	ldr	r3, [pc, #108]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad48:	2219      	movs	r2, #25
 800ad4a:	605a      	str	r2, [r3, #4]
  GestureConf.OffsetUpDown = 0x19;
 800ad4c:	4b19      	ldr	r3, [pc, #100]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad4e:	2219      	movs	r2, #25
 800ad50:	609a      	str	r2, [r3, #8]
  GestureConf.DistanceLeftRight = 0x19;
 800ad52:	4b18      	ldr	r3, [pc, #96]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad54:	2219      	movs	r2, #25
 800ad56:	60da      	str	r2, [r3, #12]
  GestureConf.DistanceUpDown = 0x19;
 800ad58:	4b16      	ldr	r3, [pc, #88]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad5a:	2219      	movs	r2, #25
 800ad5c:	611a      	str	r2, [r3, #16]
  GestureConf.DistanceZoom = 0x32;
 800ad5e:	4b15      	ldr	r3, [pc, #84]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad60:	2232      	movs	r2, #50	@ 0x32
 800ad62:	615a      	str	r2, [r3, #20]

  /* Touchscreen initialization */
  ts_status = BSP_TS_Init(0, hTS);
 800ad64:	4b12      	ldr	r3, [pc, #72]	@ (800adb0 <Touchscreen_demo2+0xb0>)
 800ad66:	681b      	ldr	r3, [r3, #0]
 800ad68:	4619      	mov	r1, r3
 800ad6a:	2000      	movs	r0, #0
 800ad6c:	f006 fc0a 	bl	8011584 <BSP_TS_Init>
 800ad70:	4603      	mov	r3, r0
 800ad72:	60fb      	str	r3, [r7, #12]
  ts_status = BSP_TS_GestureConfig(0, &GestureConf);
 800ad74:	490f      	ldr	r1, [pc, #60]	@ (800adb4 <Touchscreen_demo2+0xb4>)
 800ad76:	2000      	movs	r0, #0
 800ad78:	f007 f838 	bl	8011dec <BSP_TS_GestureConfig>
 800ad7c:	4603      	mov	r3, r0
 800ad7e:	60fb      	str	r3, [r7, #12]

  if(ts_status == BSP_ERROR_NONE)
 800ad80:	68fb      	ldr	r3, [r7, #12]
 800ad82:	2b00      	cmp	r3, #0
 800ad84:	d102      	bne.n	800ad8c <Touchscreen_demo2+0x8c>
  {
    /* Display touch screen demo2 description */
    Touchscreen_SetHint_Demo(TOUCHSCREEN_DEMO_2);
 800ad86:	2002      	movs	r0, #2
 800ad88:	f000 f98c 	bl	800b0a4 <Touchscreen_SetHint_Demo>
  } /* of if(status == BSP_ERROR_NONE) */

  while (1)
  {
    Touchscreen_Handle_NewTouch();
 800ad8c:	f000 f816 	bl	800adbc <Touchscreen_Handle_NewTouch>

    if(CheckForUserInput() > 0)
 800ad90:	f7fe fd0c 	bl	80097ac <CheckForUserInput>
 800ad94:	4603      	mov	r3, r0
 800ad96:	2b00      	cmp	r3, #0
 800ad98:	d003      	beq.n	800ada2 <Touchscreen_demo2+0xa2>
    {
      ButtonState = 0;
 800ad9a:	4b07      	ldr	r3, [pc, #28]	@ (800adb8 <Touchscreen_demo2+0xb8>)
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	601a      	str	r2, [r3, #0]

      return;
 800ada0:	e003      	b.n	800adaa <Touchscreen_demo2+0xaa>
    }
    HAL_Delay(100);
 800ada2:	2064      	movs	r0, #100	@ 0x64
 800ada4:	f007 f9f6 	bl	8012194 <HAL_Delay>
    Touchscreen_Handle_NewTouch();
 800ada8:	e7f0      	b.n	800ad8c <Touchscreen_demo2+0x8c>
  }
}
 800adaa:	3710      	adds	r7, #16
 800adac:	46bd      	mov	sp, r7
 800adae:	bd80      	pop	{r7, pc}
 800adb0:	24007630 	.word	0x24007630
 800adb4:	24007634 	.word	0x24007634
 800adb8:	240055c0 	.word	0x240055c0

0800adbc <Touchscreen_Handle_NewTouch>:
  * @brief  Touchscreen_Handle_NewTouch: factorization of touch management
  * @param  None
  * @retval BSP_ERROR_NONE
  */
static uint32_t Touchscreen_Handle_NewTouch(void)
{
 800adbc:	b590      	push	{r4, r7, lr}
 800adbe:	b0b5      	sub	sp, #212	@ 0xd4
 800adc0:	af02      	add	r7, sp, #8
  uint32_t GestureId = GESTURE_ID_NO_GESTURE;
 800adc2:	2300      	movs	r3, #0
 800adc4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
#define TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS 15
#define TOUCH_INFO_STRING_SIZE                70
  uint16_t x1 = 0;
 800adc8:	2300      	movs	r3, #0
 800adca:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
  uint16_t y1 = 0;
 800adce:	2300      	movs	r3, #0
 800add0:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8
  uint16_t x2 = 0;
 800add4:	2300      	movs	r3, #0
 800add6:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
  uint16_t y2 = 0;
 800adda:	2300      	movs	r3, #0
 800addc:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4
  uint32_t drawTouch1 = 0; /* activate/deactivate draw of footprint of touch 1 */
 800ade0:	2300      	movs	r3, #0
 800ade2:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
  uint32_t drawTouch2 = 0; /* activate/deactivate draw of footprint of touch 2 */
 800ade6:	2300      	movs	r3, #0
 800ade8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
  uint32_t colors[24] = {UTIL_LCD_COLOR_BLUE, UTIL_LCD_COLOR_GREEN, UTIL_LCD_COLOR_RED, UTIL_LCD_COLOR_CYAN, UTIL_LCD_COLOR_MAGENTA, UTIL_LCD_COLOR_YELLOW,
 800adec:	4a9f      	ldr	r2, [pc, #636]	@ (800b06c <Touchscreen_Handle_NewTouch+0x2b0>)
 800adee:	f107 0350 	add.w	r3, r7, #80	@ 0x50
 800adf2:	4611      	mov	r1, r2
 800adf4:	2260      	movs	r2, #96	@ 0x60
 800adf6:	4618      	mov	r0, r3
 800adf8:	f01a fd60 	bl	80258bc <memcpy>
  UTIL_LCD_COLOR_LIGHTBLUE, UTIL_LCD_COLOR_LIGHTGREEN, UTIL_LCD_COLOR_LIGHTRED, UTIL_LCD_COLOR_LIGHTCYAN, UTIL_LCD_COLOR_LIGHTMAGENTA,
  UTIL_LCD_COLOR_LIGHTYELLOW, UTIL_LCD_COLOR_DARKBLUE, UTIL_LCD_COLOR_DARKGREEN, UTIL_LCD_COLOR_DARKRED, UTIL_LCD_COLOR_DARKCYAN,
  UTIL_LCD_COLOR_DARKMAGENTA, UTIL_LCD_COLOR_DARKYELLOW, UTIL_LCD_COLOR_LIGHTGRAY, UTIL_LCD_COLOR_GRAY, UTIL_LCD_COLOR_DARKGRAY,
  UTIL_LCD_COLOR_BLACK, UTIL_LCD_COLOR_BROWN, UTIL_LCD_COLOR_ORANGE };
  uint32_t ts_status = BSP_ERROR_NONE;
 800adfc:	2300      	movs	r3, #0
 800adfe:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint8_t lcd_string[TOUCH_INFO_STRING_SIZE] = "";
 800ae02:	f107 0308 	add.w	r3, r7, #8
 800ae06:	2246      	movs	r2, #70	@ 0x46
 800ae08:	2100      	movs	r1, #0
 800ae0a:	4618      	mov	r0, r3
 800ae0c:	f01a fd22 	bl	8025854 <memset>
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800ae10:	1d3b      	adds	r3, r7, #4
 800ae12:	4619      	mov	r1, r3
 800ae14:	2000      	movs	r0, #0
 800ae16:	f004 fa8f 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800ae1a:	463b      	mov	r3, r7
 800ae1c:	4619      	mov	r1, r3
 800ae1e:	2000      	movs	r0, #0
 800ae20:	f004 fab2 	bl	800f388 <BSP_LCD_GetYSize>

  /* Check in polling mode in touch screen the touch status and coordinates */
  /* of touches if touch occurred                                           */
  ts_status = BSP_TS_Get_MultiTouchState(0, &TS_MTState);
 800ae24:	4992      	ldr	r1, [pc, #584]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800ae26:	2000      	movs	r0, #0
 800ae28:	f006 fdea 	bl	8011a00 <BSP_TS_Get_MultiTouchState>
 800ae2c:	4603      	mov	r3, r0
 800ae2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  if(TS_MTState.TouchDetected)
 800ae32:	4b8f      	ldr	r3, [pc, #572]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800ae34:	681b      	ldr	r3, [r3, #0]
 800ae36:	2b00      	cmp	r3, #0
 800ae38:	f000 8112 	beq.w	800b060 <Touchscreen_Handle_NewTouch+0x2a4>
  {
    /* One or dual touch have been detected  */

    /* Erase previous information on touchscreen play pad area */
    UTIL_LCD_FillRect(0, 80, x_size, y_size - 160, UTIL_LCD_COLOR_WHITE);
 800ae3c:	687a      	ldr	r2, [r7, #4]
 800ae3e:	683b      	ldr	r3, [r7, #0]
 800ae40:	3ba0      	subs	r3, #160	@ 0xa0
 800ae42:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 800ae46:	9100      	str	r1, [sp, #0]
 800ae48:	2150      	movs	r1, #80	@ 0x50
 800ae4a:	2000      	movs	r0, #0
 800ae4c:	f018 f932 	bl	80230b4 <UTIL_LCD_FillRect>

    /* Re-Draw touch screen play area on LCD */
    UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size - 180, UTIL_LCD_COLOR_BLUE);
 800ae50:	687b      	ldr	r3, [r7, #4]
 800ae52:	f1a3 0214 	sub.w	r2, r3, #20
 800ae56:	683b      	ldr	r3, [r7, #0]
 800ae58:	3bb4      	subs	r3, #180	@ 0xb4
 800ae5a:	4986      	ldr	r1, [pc, #536]	@ (800b074 <Touchscreen_Handle_NewTouch+0x2b8>)
 800ae5c:	9100      	str	r1, [sp, #0]
 800ae5e:	215a      	movs	r1, #90	@ 0x5a
 800ae60:	200a      	movs	r0, #10
 800ae62:	f017 feb7 	bl	8022bd4 <UTIL_LCD_DrawRect>
    UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size - 182, UTIL_LCD_COLOR_BLUE);
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	f1a3 0216 	sub.w	r2, r3, #22
 800ae6c:	683b      	ldr	r3, [r7, #0]
 800ae6e:	3bb6      	subs	r3, #182	@ 0xb6
 800ae70:	4980      	ldr	r1, [pc, #512]	@ (800b074 <Touchscreen_Handle_NewTouch+0x2b8>)
 800ae72:	9100      	str	r1, [sp, #0]
 800ae74:	215b      	movs	r1, #91	@ 0x5b
 800ae76:	200b      	movs	r0, #11
 800ae78:	f017 feac 	bl	8022bd4 <UTIL_LCD_DrawRect>

    /* Erase previous information on bottom text bar */
    UTIL_LCD_FillRect(0, y_size - 80, x_size, 80, UTIL_LCD_COLOR_BLUE);
 800ae7c:	683b      	ldr	r3, [r7, #0]
 800ae7e:	f1a3 0150 	sub.w	r1, r3, #80	@ 0x50
 800ae82:	687a      	ldr	r2, [r7, #4]
 800ae84:	4b7b      	ldr	r3, [pc, #492]	@ (800b074 <Touchscreen_Handle_NewTouch+0x2b8>)
 800ae86:	9300      	str	r3, [sp, #0]
 800ae88:	2350      	movs	r3, #80	@ 0x50
 800ae8a:	2000      	movs	r0, #0
 800ae8c:	f018 f912 	bl	80230b4 <UTIL_LCD_FillRect>

    /* Deactivate drawing footprint of touch 1 and touch 2 until validated against boundaries of touch pad values */
    drawTouch1 = drawTouch2 = 0;
 800ae90:	2300      	movs	r3, #0
 800ae92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800ae96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800ae9a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4

    /* Get X and Y position of the first touch post calibrated */
    x1 = TS_MTState.TouchX[0];
 800ae9e:	4b74      	ldr	r3, [pc, #464]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800aea0:	685b      	ldr	r3, [r3, #4]
 800aea2:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    y1 = TS_MTState.TouchY[0];
 800aea6:	4b72      	ldr	r3, [pc, #456]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800aea8:	68db      	ldr	r3, [r3, #12]
 800aeaa:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8

    if((y1 > (90 + TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS)) &&
 800aeae:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800aeb2:	2b69      	cmp	r3, #105	@ 0x69
 800aeb4:	d908      	bls.n	800aec8 <Touchscreen_Handle_NewTouch+0x10c>
       (y1 < (y_size - 90 - TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS)))
 800aeb6:	f8b7 20b8 	ldrh.w	r2, [r7, #184]	@ 0xb8
 800aeba:	683b      	ldr	r3, [r7, #0]
 800aebc:	3b69      	subs	r3, #105	@ 0x69
    if((y1 > (90 + TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS)) &&
 800aebe:	429a      	cmp	r2, r3
 800aec0:	d202      	bcs.n	800aec8 <Touchscreen_Handle_NewTouch+0x10c>
    {
      drawTouch1 = 1;
 800aec2:	2301      	movs	r3, #1
 800aec4:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
    }

    /* If valid touch 1 position : inside the reserved area for the use case : draw the touch */
    if(drawTouch1 == 1)
 800aec8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800aecc:	2b01      	cmp	r3, #1
 800aece:	d149      	bne.n	800af64 <Touchscreen_Handle_NewTouch+0x1a8>
    {
      /* Draw circle of first touch : turn on colors[] table */
      UTIL_LCD_FillCircle(x1, y1, TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS, colors[(touchscreen_color_idx++ % 24)]);
 800aed0:	f8b7 00ba 	ldrh.w	r0, [r7, #186]	@ 0xba
 800aed4:	f8b7 40b8 	ldrh.w	r4, [r7, #184]	@ 0xb8
 800aed8:	4b67      	ldr	r3, [pc, #412]	@ (800b078 <Touchscreen_Handle_NewTouch+0x2bc>)
 800aeda:	6819      	ldr	r1, [r3, #0]
 800aedc:	1c4b      	adds	r3, r1, #1
 800aede:	4a66      	ldr	r2, [pc, #408]	@ (800b078 <Touchscreen_Handle_NewTouch+0x2bc>)
 800aee0:	6013      	str	r3, [r2, #0]
 800aee2:	4b66      	ldr	r3, [pc, #408]	@ (800b07c <Touchscreen_Handle_NewTouch+0x2c0>)
 800aee4:	fba3 2301 	umull	r2, r3, r3, r1
 800aee8:	091a      	lsrs	r2, r3, #4
 800aeea:	4613      	mov	r3, r2
 800aeec:	005b      	lsls	r3, r3, #1
 800aeee:	4413      	add	r3, r2
 800aef0:	00db      	lsls	r3, r3, #3
 800aef2:	1aca      	subs	r2, r1, r3
 800aef4:	0093      	lsls	r3, r2, #2
 800aef6:	33c8      	adds	r3, #200	@ 0xc8
 800aef8:	443b      	add	r3, r7
 800aefa:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800aefe:	220f      	movs	r2, #15
 800af00:	4621      	mov	r1, r4
 800af02:	f018 f911 	bl	8023128 <UTIL_LCD_FillCircle>

      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800af06:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800af0a:	f017 fba5 	bl	8022658 <UTIL_LCD_SetTextColor>
      UTIL_LCD_SetFont(&Font16);
 800af0e:	485c      	ldr	r0, [pc, #368]	@ (800b080 <Touchscreen_Handle_NewTouch+0x2c4>)
 800af10:	f017 fbca 	bl	80226a8 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, y_size - 70, (uint8_t *)"TOUCH INFO : ", CENTER_MODE);
 800af14:	683b      	ldr	r3, [r7, #0]
 800af16:	f1a3 0146 	sub.w	r1, r3, #70	@ 0x46
 800af1a:	2301      	movs	r3, #1
 800af1c:	4a59      	ldr	r2, [pc, #356]	@ (800b084 <Touchscreen_Handle_NewTouch+0x2c8>)
 800af1e:	2000      	movs	r0, #0
 800af20:	f017 fcee 	bl	8022900 <UTIL_LCD_DisplayStringAt>

      UTIL_LCD_SetFont(&Font12);
 800af24:	4858      	ldr	r0, [pc, #352]	@ (800b088 <Touchscreen_Handle_NewTouch+0x2cc>)
 800af26:	f017 fbbf 	bl	80226a8 <UTIL_LCD_SetFont>
      sprintf((char*)lcd_string, "x1 = %u, y1 = %u, Event = %s, Weight = %lu",
 800af2a:	f8b7 10ba 	ldrh.w	r1, [r7, #186]	@ 0xba
 800af2e:	f8b7 40b8 	ldrh.w	r4, [r7, #184]	@ 0xb8
              x1,
              y1,
              ts_event_string_tab[TS_MTState.TouchEvent[0]],
 800af32:	4b4f      	ldr	r3, [pc, #316]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800af34:	69db      	ldr	r3, [r3, #28]
      sprintf((char*)lcd_string, "x1 = %u, y1 = %u, Event = %s, Weight = %lu",
 800af36:	4a55      	ldr	r2, [pc, #340]	@ (800b08c <Touchscreen_Handle_NewTouch+0x2d0>)
 800af38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800af3c:	4a4c      	ldr	r2, [pc, #304]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800af3e:	6952      	ldr	r2, [r2, #20]
 800af40:	f107 0008 	add.w	r0, r7, #8
 800af44:	9201      	str	r2, [sp, #4]
 800af46:	9300      	str	r3, [sp, #0]
 800af48:	4623      	mov	r3, r4
 800af4a:	460a      	mov	r2, r1
 800af4c:	4950      	ldr	r1, [pc, #320]	@ (800b090 <Touchscreen_Handle_NewTouch+0x2d4>)
 800af4e:	f01a fc5f 	bl	8025810 <siprintf>
              TS_MTState.TouchWeight[0]);
      UTIL_LCD_DisplayStringAt(0, y_size - 45, lcd_string, CENTER_MODE);
 800af52:	683b      	ldr	r3, [r7, #0]
 800af54:	f1a3 012d 	sub.w	r1, r3, #45	@ 0x2d
 800af58:	f107 0208 	add.w	r2, r7, #8
 800af5c:	2301      	movs	r3, #1
 800af5e:	2000      	movs	r0, #0
 800af60:	f017 fcce 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    } /* of if(drawTouch1 == 1) */

    if(TS_MTState.TouchDetected > 1)
 800af64:	4b42      	ldr	r3, [pc, #264]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800af66:	681b      	ldr	r3, [r3, #0]
 800af68:	2b01      	cmp	r3, #1
 800af6a:	d950      	bls.n	800b00e <Touchscreen_Handle_NewTouch+0x252>
    {
      /* Get X and Y position of the second touch post calibrated */
      x2 = TS_MTState.TouchX[1];
 800af6c:	4b40      	ldr	r3, [pc, #256]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800af6e:	689b      	ldr	r3, [r3, #8]
 800af70:	f8a7 30b6 	strh.w	r3, [r7, #182]	@ 0xb6
      y2 = TS_MTState.TouchY[1];
 800af74:	4b3e      	ldr	r3, [pc, #248]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800af76:	691b      	ldr	r3, [r3, #16]
 800af78:	f8a7 30b4 	strh.w	r3, [r7, #180]	@ 0xb4

      if((y2 > (90 + TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS)) &&
 800af7c:	f8b7 30b4 	ldrh.w	r3, [r7, #180]	@ 0xb4
 800af80:	2b69      	cmp	r3, #105	@ 0x69
 800af82:	d908      	bls.n	800af96 <Touchscreen_Handle_NewTouch+0x1da>
         (y2 < (y_size - 90 - TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS)))
 800af84:	f8b7 20b4 	ldrh.w	r2, [r7, #180]	@ 0xb4
 800af88:	683b      	ldr	r3, [r7, #0]
 800af8a:	3b69      	subs	r3, #105	@ 0x69
      if((y2 > (90 + TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS)) &&
 800af8c:	429a      	cmp	r2, r3
 800af8e:	d202      	bcs.n	800af96 <Touchscreen_Handle_NewTouch+0x1da>
      {
        drawTouch2 = 1;
 800af90:	2301      	movs	r3, #1
 800af92:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
      }

      /* If valid touch 2 position : inside the reserved area for the use case : draw the touch */
      if(drawTouch2 == 1)
 800af96:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800af9a:	2b01      	cmp	r3, #1
 800af9c:	d137      	bne.n	800b00e <Touchscreen_Handle_NewTouch+0x252>
      {
        sprintf((char*)lcd_string, "x2 = %u, y2 = %u, Event = %s, Weight = %lu",
 800af9e:	f8b7 10b6 	ldrh.w	r1, [r7, #182]	@ 0xb6
 800afa2:	f8b7 40b4 	ldrh.w	r4, [r7, #180]	@ 0xb4
                x2,
                y2,
                ts_event_string_tab[TS_MTState.TouchEvent[1]],
 800afa6:	4b32      	ldr	r3, [pc, #200]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800afa8:	6a1b      	ldr	r3, [r3, #32]
        sprintf((char*)lcd_string, "x2 = %u, y2 = %u, Event = %s, Weight = %lu",
 800afaa:	4a38      	ldr	r2, [pc, #224]	@ (800b08c <Touchscreen_Handle_NewTouch+0x2d0>)
 800afac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800afb0:	4a2f      	ldr	r2, [pc, #188]	@ (800b070 <Touchscreen_Handle_NewTouch+0x2b4>)
 800afb2:	6992      	ldr	r2, [r2, #24]
 800afb4:	f107 0008 	add.w	r0, r7, #8
 800afb8:	9201      	str	r2, [sp, #4]
 800afba:	9300      	str	r3, [sp, #0]
 800afbc:	4623      	mov	r3, r4
 800afbe:	460a      	mov	r2, r1
 800afc0:	4934      	ldr	r1, [pc, #208]	@ (800b094 <Touchscreen_Handle_NewTouch+0x2d8>)
 800afc2:	f01a fc25 	bl	8025810 <siprintf>
                TS_MTState.TouchWeight[1]);
        UTIL_LCD_DisplayStringAt(0, y_size - 35, lcd_string, CENTER_MODE);
 800afc6:	683b      	ldr	r3, [r7, #0]
 800afc8:	f1a3 0123 	sub.w	r1, r3, #35	@ 0x23
 800afcc:	f107 0208 	add.w	r2, r7, #8
 800afd0:	2301      	movs	r3, #1
 800afd2:	2000      	movs	r0, #0
 800afd4:	f017 fc94 	bl	8022900 <UTIL_LCD_DisplayStringAt>

        /* Draw circle of second touch : turn on color[] table */
        UTIL_LCD_FillCircle(x2, y2, TS_MULTITOUCH_FOOTPRINT_CIRCLE_RADIUS, colors[(touchscreen_color_idx++ % 24)]);
 800afd8:	f8b7 00b6 	ldrh.w	r0, [r7, #182]	@ 0xb6
 800afdc:	f8b7 40b4 	ldrh.w	r4, [r7, #180]	@ 0xb4
 800afe0:	4b25      	ldr	r3, [pc, #148]	@ (800b078 <Touchscreen_Handle_NewTouch+0x2bc>)
 800afe2:	6819      	ldr	r1, [r3, #0]
 800afe4:	1c4b      	adds	r3, r1, #1
 800afe6:	4a24      	ldr	r2, [pc, #144]	@ (800b078 <Touchscreen_Handle_NewTouch+0x2bc>)
 800afe8:	6013      	str	r3, [r2, #0]
 800afea:	4b24      	ldr	r3, [pc, #144]	@ (800b07c <Touchscreen_Handle_NewTouch+0x2c0>)
 800afec:	fba3 2301 	umull	r2, r3, r3, r1
 800aff0:	091a      	lsrs	r2, r3, #4
 800aff2:	4613      	mov	r3, r2
 800aff4:	005b      	lsls	r3, r3, #1
 800aff6:	4413      	add	r3, r2
 800aff8:	00db      	lsls	r3, r3, #3
 800affa:	1aca      	subs	r2, r1, r3
 800affc:	0093      	lsls	r3, r2, #2
 800affe:	33c8      	adds	r3, #200	@ 0xc8
 800b000:	443b      	add	r3, r7
 800b002:	f853 3c78 	ldr.w	r3, [r3, #-120]
 800b006:	220f      	movs	r2, #15
 800b008:	4621      	mov	r1, r4
 800b00a:	f018 f88d 	bl	8023128 <UTIL_LCD_FillCircle>
      } /* of if(drawTouch2 == 1) */

    } /* of if(TS_MTState.TouchDetected > 1) */

    if((drawTouch1 == 1) || (drawTouch2 == 1))
 800b00e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800b012:	2b01      	cmp	r3, #1
 800b014:	d003      	beq.n	800b01e <Touchscreen_Handle_NewTouch+0x262>
 800b016:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800b01a:	2b01      	cmp	r3, #1
 800b01c:	d114      	bne.n	800b048 <Touchscreen_Handle_NewTouch+0x28c>
    {
      /* Get updated gesture Id in global variable 'TS_State' */
      ts_status = BSP_TS_GetGestureId(0, &GestureId);
 800b01e:	f107 03b0 	add.w	r3, r7, #176	@ 0xb0
 800b022:	4619      	mov	r1, r3
 800b024:	2000      	movs	r0, #0
 800b026:	f006 ff09 	bl	8011e3c <BSP_TS_GetGestureId>
 800b02a:	4603      	mov	r3, r0
 800b02c:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc

      sprintf((char*)lcd_string, "Gesture Id = %s", ts_gesture_id_string_tab[GestureId]);
 800b030:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 800b034:	4a18      	ldr	r2, [pc, #96]	@ (800b098 <Touchscreen_Handle_NewTouch+0x2dc>)
 800b036:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b03a:	f107 0308 	add.w	r3, r7, #8
 800b03e:	4917      	ldr	r1, [pc, #92]	@ (800b09c <Touchscreen_Handle_NewTouch+0x2e0>)
 800b040:	4618      	mov	r0, r3
 800b042:	f01a fbe5 	bl	8025810 <siprintf>
 800b046:	e00b      	b.n	800b060 <Touchscreen_Handle_NewTouch+0x2a4>
    }
    else
    {
      /* Invalid touch position */
      UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800b048:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b04c:	f017 fb04 	bl	8022658 <UTIL_LCD_SetTextColor>
      UTIL_LCD_DisplayStringAt(0, y_size - 70, (uint8_t *)"Invalid touch position : use drawn touch area : ", CENTER_MODE);
 800b050:	683b      	ldr	r3, [r7, #0]
 800b052:	f1a3 0146 	sub.w	r1, r3, #70	@ 0x46
 800b056:	2301      	movs	r3, #1
 800b058:	4a11      	ldr	r2, [pc, #68]	@ (800b0a0 <Touchscreen_Handle_NewTouch+0x2e4>)
 800b05a:	2000      	movs	r0, #0
 800b05c:	f017 fc50 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    }
  } /* of if(TS_MTState.TouchDetected) */

  return(ts_status);
 800b060:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
}
 800b064:	4618      	mov	r0, r3
 800b066:	37cc      	adds	r7, #204	@ 0xcc
 800b068:	46bd      	mov	sp, r7
 800b06a:	bd90      	pop	{r4, r7, pc}
 800b06c:	080272dc 	.word	0x080272dc
 800b070:	24007604 	.word	0x24007604
 800b074:	ff0000ff 	.word	0xff0000ff
 800b078:	240075f4 	.word	0x240075f4
 800b07c:	aaaaaaab 	.word	0xaaaaaaab
 800b080:	24000a54 	.word	0x24000a54
 800b084:	08027230 	.word	0x08027230
 800b088:	24000a5c 	.word	0x24000a5c
 800b08c:	240009b0 	.word	0x240009b0
 800b090:	08027240 	.word	0x08027240
 800b094:	0802726c 	.word	0x0802726c
 800b098:	240009c0 	.word	0x240009c0
 800b09c:	08027298 	.word	0x08027298
 800b0a0:	080272a8 	.word	0x080272a8

0800b0a4 <Touchscreen_SetHint_Demo>:
  *         demoIndex in parameter.
  * @param  demoIndex : parameter of type @ref TouchScreenDemoTypeDef
  * @retval None
  */
static void Touchscreen_SetHint_Demo(TouchScreenDemoTypeDef demoIndex)
{
 800b0a4:	b580      	push	{r7, lr}
 800b0a6:	b086      	sub	sp, #24
 800b0a8:	af02      	add	r7, sp, #8
 800b0aa:	4603      	mov	r3, r0
 800b0ac:	71fb      	strb	r3, [r7, #7]
  uint32_t x_size, y_size;

  BSP_LCD_GetXSize(0, &x_size);
 800b0ae:	f107 030c 	add.w	r3, r7, #12
 800b0b2:	4619      	mov	r1, r3
 800b0b4:	2000      	movs	r0, #0
 800b0b6:	f004 f93f 	bl	800f338 <BSP_LCD_GetXSize>
  BSP_LCD_GetYSize(0, &y_size);
 800b0ba:	f107 0308 	add.w	r3, r7, #8
 800b0be:	4619      	mov	r1, r3
 800b0c0:	2000      	movs	r0, #0
 800b0c2:	f004 f961 	bl	800f388 <BSP_LCD_GetYSize>

  if(demoIndex <= TOUCHSCREEN_DEMO_MAX)
 800b0c6:	79fb      	ldrb	r3, [r7, #7]
 800b0c8:	2b03      	cmp	r3, #3
 800b0ca:	f200 8085 	bhi.w	800b1d8 <Touchscreen_SetHint_Demo+0x134>
  {
    /* Clear the LCD */
    UTIL_LCD_Clear(UTIL_LCD_COLOR_WHITE);
 800b0ce:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0d2:	f017 fbc9 	bl	8022868 <UTIL_LCD_Clear>

    /* Set Touchscreen Demo1 description */
    UTIL_LCD_FillRect(0, 0, x_size, 80, UTIL_LCD_COLOR_BLUE);
 800b0d6:	68fa      	ldr	r2, [r7, #12]
 800b0d8:	4b41      	ldr	r3, [pc, #260]	@ (800b1e0 <Touchscreen_SetHint_Demo+0x13c>)
 800b0da:	9300      	str	r3, [sp, #0]
 800b0dc:	2350      	movs	r3, #80	@ 0x50
 800b0de:	2100      	movs	r1, #0
 800b0e0:	2000      	movs	r0, #0
 800b0e2:	f017 ffe7 	bl	80230b4 <UTIL_LCD_FillRect>
    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_WHITE);
 800b0e6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b0ea:	f017 fab5 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_BLUE);
 800b0ee:	483c      	ldr	r0, [pc, #240]	@ (800b1e0 <Touchscreen_SetHint_Demo+0x13c>)
 800b0f0:	f017 fac6 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font24);
 800b0f4:	483b      	ldr	r0, [pc, #236]	@ (800b1e4 <Touchscreen_SetHint_Demo+0x140>)
 800b0f6:	f017 fad7 	bl	80226a8 <UTIL_LCD_SetFont>

    if(demoIndex == TOUCHSCREEN_DEMO_1)
 800b0fa:	79fb      	ldrb	r3, [r7, #7]
 800b0fc:	2b01      	cmp	r3, #1
 800b0fe:	d11b      	bne.n	800b138 <Touchscreen_SetHint_Demo+0x94>
    {
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen basic polling", CENTER_MODE);
 800b100:	2301      	movs	r3, #1
 800b102:	4a39      	ldr	r2, [pc, #228]	@ (800b1e8 <Touchscreen_SetHint_Demo+0x144>)
 800b104:	2100      	movs	r1, #0
 800b106:	2000      	movs	r0, #0
 800b108:	f017 fbfa 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetFont(&Font12);
 800b10c:	4837      	ldr	r0, [pc, #220]	@ (800b1ec <Touchscreen_SetHint_Demo+0x148>)
 800b10e:	f017 facb 	bl	80226a8 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please use the Touchscreen to", CENTER_MODE);
 800b112:	2301      	movs	r3, #1
 800b114:	4a36      	ldr	r2, [pc, #216]	@ (800b1f0 <Touchscreen_SetHint_Demo+0x14c>)
 800b116:	211e      	movs	r1, #30
 800b118:	2000      	movs	r0, #0
 800b11a:	f017 fbf1 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"activate the colored circle", CENTER_MODE);
 800b11e:	2301      	movs	r3, #1
 800b120:	4a34      	ldr	r2, [pc, #208]	@ (800b1f4 <Touchscreen_SetHint_Demo+0x150>)
 800b122:	212d      	movs	r1, #45	@ 0x2d
 800b124:	2000      	movs	r0, #0
 800b126:	f017 fbeb 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"inside the rectangle. Then press User button", CENTER_MODE);
 800b12a:	2301      	movs	r3, #1
 800b12c:	4a32      	ldr	r2, [pc, #200]	@ (800b1f8 <Touchscreen_SetHint_Demo+0x154>)
 800b12e:	213c      	movs	r1, #60	@ 0x3c
 800b130:	2000      	movs	r0, #0
 800b132:	f017 fbe5 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800b136:	e039      	b.n	800b1ac <Touchscreen_SetHint_Demo+0x108>
    }
    else if (demoIndex == TOUCHSCREEN_DEMO_2)
 800b138:	79fb      	ldrb	r3, [r7, #7]
 800b13a:	2b02      	cmp	r3, #2
 800b13c:	d11b      	bne.n	800b176 <Touchscreen_SetHint_Demo+0xd2>
    {
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen dual touch polling", CENTER_MODE);
 800b13e:	2301      	movs	r3, #1
 800b140:	4a2e      	ldr	r2, [pc, #184]	@ (800b1fc <Touchscreen_SetHint_Demo+0x158>)
 800b142:	2100      	movs	r1, #0
 800b144:	2000      	movs	r0, #0
 800b146:	f017 fbdb 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetFont(&Font12);
 800b14a:	4828      	ldr	r0, [pc, #160]	@ (800b1ec <Touchscreen_SetHint_Demo+0x148>)
 800b14c:	f017 faac 	bl	80226a8 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please press the Touchscreen to", CENTER_MODE);
 800b150:	2301      	movs	r3, #1
 800b152:	4a2b      	ldr	r2, [pc, #172]	@ (800b200 <Touchscreen_SetHint_Demo+0x15c>)
 800b154:	211e      	movs	r1, #30
 800b156:	2000      	movs	r0, #0
 800b158:	f017 fbd2 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"activate single and", CENTER_MODE);
 800b15c:	2301      	movs	r3, #1
 800b15e:	4a29      	ldr	r2, [pc, #164]	@ (800b204 <Touchscreen_SetHint_Demo+0x160>)
 800b160:	212d      	movs	r1, #45	@ 0x2d
 800b162:	2000      	movs	r0, #0
 800b164:	f017 fbcc 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"dual touch", CENTER_MODE);
 800b168:	2301      	movs	r3, #1
 800b16a:	4a27      	ldr	r2, [pc, #156]	@ (800b208 <Touchscreen_SetHint_Demo+0x164>)
 800b16c:	213c      	movs	r1, #60	@ 0x3c
 800b16e:	2000      	movs	r0, #0
 800b170:	f017 fbc6 	bl	8022900 <UTIL_LCD_DisplayStringAt>
 800b174:	e01a      	b.n	800b1ac <Touchscreen_SetHint_Demo+0x108>

    }
    else /* demoIndex == TOUCHSCREEN_DEMO_3 */
    {
      UTIL_LCD_DisplayStringAt(0, 0, (uint8_t *)"Touchscreen dual touch interrupt", CENTER_MODE);
 800b176:	2301      	movs	r3, #1
 800b178:	4a24      	ldr	r2, [pc, #144]	@ (800b20c <Touchscreen_SetHint_Demo+0x168>)
 800b17a:	2100      	movs	r1, #0
 800b17c:	2000      	movs	r0, #0
 800b17e:	f017 fbbf 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_SetFont(&Font12);
 800b182:	481a      	ldr	r0, [pc, #104]	@ (800b1ec <Touchscreen_SetHint_Demo+0x148>)
 800b184:	f017 fa90 	bl	80226a8 <UTIL_LCD_SetFont>
      UTIL_LCD_DisplayStringAt(0, 30, (uint8_t *)"Please press the Touchscreen to", CENTER_MODE);
 800b188:	2301      	movs	r3, #1
 800b18a:	4a1d      	ldr	r2, [pc, #116]	@ (800b200 <Touchscreen_SetHint_Demo+0x15c>)
 800b18c:	211e      	movs	r1, #30
 800b18e:	2000      	movs	r0, #0
 800b190:	f017 fbb6 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 45, (uint8_t *)"activate single and", CENTER_MODE);
 800b194:	2301      	movs	r3, #1
 800b196:	4a1b      	ldr	r2, [pc, #108]	@ (800b204 <Touchscreen_SetHint_Demo+0x160>)
 800b198:	212d      	movs	r1, #45	@ 0x2d
 800b19a:	2000      	movs	r0, #0
 800b19c:	f017 fbb0 	bl	8022900 <UTIL_LCD_DisplayStringAt>
      UTIL_LCD_DisplayStringAt(0, 60, (uint8_t *)"dual touch", CENTER_MODE);
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	4a19      	ldr	r2, [pc, #100]	@ (800b208 <Touchscreen_SetHint_Demo+0x164>)
 800b1a4:	213c      	movs	r1, #60	@ 0x3c
 800b1a6:	2000      	movs	r0, #0
 800b1a8:	f017 fbaa 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    }

    UTIL_LCD_DrawRect(10, 90, x_size - 20, y_size - 100, UTIL_LCD_COLOR_BLUE);
 800b1ac:	68fb      	ldr	r3, [r7, #12]
 800b1ae:	f1a3 0214 	sub.w	r2, r3, #20
 800b1b2:	68bb      	ldr	r3, [r7, #8]
 800b1b4:	3b64      	subs	r3, #100	@ 0x64
 800b1b6:	490a      	ldr	r1, [pc, #40]	@ (800b1e0 <Touchscreen_SetHint_Demo+0x13c>)
 800b1b8:	9100      	str	r1, [sp, #0]
 800b1ba:	215a      	movs	r1, #90	@ 0x5a
 800b1bc:	200a      	movs	r0, #10
 800b1be:	f017 fd09 	bl	8022bd4 <UTIL_LCD_DrawRect>
    UTIL_LCD_DrawRect(11, 91, x_size - 22, y_size - 102, UTIL_LCD_COLOR_BLUE);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	f1a3 0216 	sub.w	r2, r3, #22
 800b1c8:	68bb      	ldr	r3, [r7, #8]
 800b1ca:	3b66      	subs	r3, #102	@ 0x66
 800b1cc:	4904      	ldr	r1, [pc, #16]	@ (800b1e0 <Touchscreen_SetHint_Demo+0x13c>)
 800b1ce:	9100      	str	r1, [sp, #0]
 800b1d0:	215b      	movs	r1, #91	@ 0x5b
 800b1d2:	200b      	movs	r0, #11
 800b1d4:	f017 fcfe 	bl	8022bd4 <UTIL_LCD_DrawRect>

  } /* of if(demoIndex <= TOUCHSCREEN_DEMO_MAX) */
}
 800b1d8:	bf00      	nop
 800b1da:	3710      	adds	r7, #16
 800b1dc:	46bd      	mov	sp, r7
 800b1de:	bd80      	pop	{r7, pc}
 800b1e0:	ff0000ff 	.word	0xff0000ff
 800b1e4:	24000a44 	.word	0x24000a44
 800b1e8:	0802733c 	.word	0x0802733c
 800b1ec:	24000a5c 	.word	0x24000a5c
 800b1f0:	08027358 	.word	0x08027358
 800b1f4:	08027378 	.word	0x08027378
 800b1f8:	08027394 	.word	0x08027394
 800b1fc:	080273c4 	.word	0x080273c4
 800b200:	080273e4 	.word	0x080273e4
 800b204:	08027404 	.word	0x08027404
 800b208:	08027418 	.word	0x08027418
 800b20c:	08027424 	.word	0x08027424

0800b210 <Touchscreen_DrawBackground_Circles>:
  * @brief  Draw Touchscreen Background
  * @param  state : touch zone state
  * @retval None
  */
void Touchscreen_DrawBackground_Circles(uint8_t state)
{
 800b210:	b580      	push	{r7, lr}
 800b212:	b084      	sub	sp, #16
 800b214:	af00      	add	r7, sp, #0
 800b216:	4603      	mov	r3, r0
 800b218:	71fb      	strb	r3, [r7, #7]
  uint16_t x, y;
  switch (state)
 800b21a:	79fb      	ldrb	r3, [r7, #7]
 800b21c:	2b20      	cmp	r3, #32
 800b21e:	f200 81c1 	bhi.w	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>
 800b222:	a201      	add	r2, pc, #4	@ (adr r2, 800b228 <Touchscreen_DrawBackground_Circles+0x18>)
 800b224:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800b228:	0800b2ad 	.word	0x0800b2ad
 800b22c:	0800b337 	.word	0x0800b337
 800b230:	0800b357 	.word	0x0800b357
 800b234:	0800b5a5 	.word	0x0800b5a5
 800b238:	0800b37b 	.word	0x0800b37b
 800b23c:	0800b5a5 	.word	0x0800b5a5
 800b240:	0800b5a5 	.word	0x0800b5a5
 800b244:	0800b5a5 	.word	0x0800b5a5
 800b248:	0800b3a1 	.word	0x0800b3a1
 800b24c:	0800b5a5 	.word	0x0800b5a5
 800b250:	0800b5a5 	.word	0x0800b5a5
 800b254:	0800b5a5 	.word	0x0800b5a5
 800b258:	0800b5a5 	.word	0x0800b5a5
 800b25c:	0800b5a5 	.word	0x0800b5a5
 800b260:	0800b5a5 	.word	0x0800b5a5
 800b264:	0800b5a5 	.word	0x0800b5a5
 800b268:	0800b3c7 	.word	0x0800b3c7
 800b26c:	0800b5a5 	.word	0x0800b5a5
 800b270:	0800b5a5 	.word	0x0800b5a5
 800b274:	0800b5a5 	.word	0x0800b5a5
 800b278:	0800b5a5 	.word	0x0800b5a5
 800b27c:	0800b5a5 	.word	0x0800b5a5
 800b280:	0800b5a5 	.word	0x0800b5a5
 800b284:	0800b5a5 	.word	0x0800b5a5
 800b288:	0800b5a5 	.word	0x0800b5a5
 800b28c:	0800b5a5 	.word	0x0800b5a5
 800b290:	0800b5a5 	.word	0x0800b5a5
 800b294:	0800b5a5 	.word	0x0800b5a5
 800b298:	0800b5a5 	.word	0x0800b5a5
 800b29c:	0800b5a5 	.word	0x0800b5a5
 800b2a0:	0800b5a5 	.word	0x0800b5a5
 800b2a4:	0800b5a5 	.word	0x0800b5a5
 800b2a8:	0800b4fd 	.word	0x0800b4fd
  {
  case 0:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800b2ac:	4bbf      	ldr	r3, [pc, #764]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b2ae:	2228      	movs	r2, #40	@ 0x28
 800b2b0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b2b4:	20a0      	movs	r0, #160	@ 0xa0
 800b2b6:	f017 ff37 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_RED);
 800b2ba:	4bbd      	ldr	r3, [pc, #756]	@ (800b5b0 <Touchscreen_DrawBackground_Circles+0x3a0>)
 800b2bc:	2228      	movs	r2, #40	@ 0x28
 800b2be:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b2c2:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b2c6:	f017 ff2f 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_YELLOW);
 800b2ca:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 800b2ce:	2228      	movs	r2, #40	@ 0x28
 800b2d0:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b2d4:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800b2d8:	f017 ff26 	bl	8023128 <UTIL_LCD_FillCircle>


    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_GREEN);
 800b2dc:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 800b2e0:	2228      	movs	r2, #40	@ 0x28
 800b2e2:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b2e6:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b2ea:	f017 ff1d 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b2ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b2f2:	2226      	movs	r2, #38	@ 0x26
 800b2f4:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b2f8:	20a0      	movs	r0, #160	@ 0xa0
 800b2fa:	f017 ff15 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b2fe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b302:	2226      	movs	r2, #38	@ 0x26
 800b304:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b308:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b30c:	f017 ff0c 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b310:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b314:	2226      	movs	r2, #38	@ 0x26
 800b316:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b31a:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800b31e:	f017 ff03 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b322:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b326:	2226      	movs	r2, #38	@ 0x26
 800b328:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b32c:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b330:	f017 fefa 	bl	8023128 <UTIL_LCD_FillCircle>
    break;
 800b334:	e136      	b.n	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>

  case 1:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800b336:	4b9d      	ldr	r3, [pc, #628]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b338:	2228      	movs	r2, #40	@ 0x28
 800b33a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b33e:	20a0      	movs	r0, #160	@ 0xa0
 800b340:	f017 fef2 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b344:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b348:	2226      	movs	r2, #38	@ 0x26
 800b34a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b34e:	20a0      	movs	r0, #160	@ 0xa0
 800b350:	f017 feea 	bl	8023128 <UTIL_LCD_FillCircle>
    break;
 800b354:	e126      	b.n	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>

  case 2:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_RED);
 800b356:	4b96      	ldr	r3, [pc, #600]	@ (800b5b0 <Touchscreen_DrawBackground_Circles+0x3a0>)
 800b358:	2228      	movs	r2, #40	@ 0x28
 800b35a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b35e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b362:	f017 fee1 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b366:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b36a:	2226      	movs	r2, #38	@ 0x26
 800b36c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b370:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b374:	f017 fed8 	bl	8023128 <UTIL_LCD_FillCircle>
    break;
 800b378:	e114      	b.n	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>

  case 4:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_YELLOW);
 800b37a:	f06f 03ff 	mvn.w	r3, #255	@ 0xff
 800b37e:	2228      	movs	r2, #40	@ 0x28
 800b380:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b384:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800b388:	f017 fece 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b38c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b390:	2226      	movs	r2, #38	@ 0x26
 800b392:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b396:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800b39a:	f017 fec5 	bl	8023128 <UTIL_LCD_FillCircle>
    break;
 800b39e:	e101      	b.n	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>

  case 8:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS, UTIL_LCD_COLOR_GREEN);
 800b3a0:	f04f 23ff 	mov.w	r3, #4278255360	@ 0xff00ff00
 800b3a4:	2228      	movs	r2, #40	@ 0x28
 800b3a6:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b3aa:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b3ae:	f017 febb 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(4), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b3b2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b3b6:	2226      	movs	r2, #38	@ 0x26
 800b3b8:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b3bc:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b3c0:	f017 feb2 	bl	8023128 <UTIL_LCD_FillCircle>
    break;
 800b3c4:	e0ee      	b.n	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>

  case 16:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800b3c6:	4b79      	ldr	r3, [pc, #484]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b3c8:	2228      	movs	r2, #40	@ 0x28
 800b3ca:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b3ce:	20a0      	movs	r0, #160	@ 0xa0
 800b3d0:	f017 feaa 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800b3d4:	4b75      	ldr	r3, [pc, #468]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b3d6:	2228      	movs	r2, #40	@ 0x28
 800b3d8:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b3dc:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b3e0:	f017 fea2 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800b3e4:	4b71      	ldr	r3, [pc, #452]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b3e6:	2228      	movs	r2, #40	@ 0x28
 800b3e8:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b3ec:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800b3f0:	f017 fe9a 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLUE);
 800b3f4:	4b6d      	ldr	r3, [pc, #436]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b3f6:	2228      	movs	r2, #40	@ 0x28
 800b3f8:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b3fc:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b400:	f017 fe92 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b404:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b408:	2226      	movs	r2, #38	@ 0x26
 800b40a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b40e:	20a0      	movs	r0, #160	@ 0xa0
 800b410:	f017 fe8a 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b414:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b418:	2226      	movs	r2, #38	@ 0x26
 800b41a:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b41e:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b422:	f017 fe81 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(3), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b426:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b42a:	2226      	movs	r2, #38	@ 0x26
 800b42c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b430:	f44f 70f0 	mov.w	r0, #480	@ 0x1e0
 800b434:	f017 fe78 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(4), CIRCLE_YPOS(3), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b438:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b43c:	2226      	movs	r2, #38	@ 0x26
 800b43e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b442:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b446:	f017 fe6f 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_DrawHLine(CIRCLE_XPOS(1)-LINE_LENGHT, CIRCLE_YPOS(1), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 800b44a:	4b58      	ldr	r3, [pc, #352]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b44c:	223c      	movs	r2, #60	@ 0x3c
 800b44e:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b452:	2082      	movs	r0, #130	@ 0x82
 800b454:	f017 f968 	bl	8022728 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawHLine(CIRCLE_XPOS(2)-LINE_LENGHT, CIRCLE_YPOS(2), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 800b458:	4b54      	ldr	r3, [pc, #336]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b45a:	223c      	movs	r2, #60	@ 0x3c
 800b45c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b460:	f44f 7091 	mov.w	r0, #290	@ 0x122
 800b464:	f017 f960 	bl	8022728 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawVLine(CIRCLE_XPOS(2), CIRCLE_YPOS(2)-LINE_LENGHT, 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 800b468:	4b50      	ldr	r3, [pc, #320]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b46a:	223c      	movs	r2, #60	@ 0x3c
 800b46c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800b470:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b474:	f017 f98e 	bl	8022794 <UTIL_LCD_DrawVLine>
    UTIL_LCD_DrawHLine(CIRCLE_XPOS(3)-LINE_LENGHT, CIRCLE_YPOS(3), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 800b478:	4b4c      	ldr	r3, [pc, #304]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b47a:	223c      	movs	r2, #60	@ 0x3c
 800b47c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b480:	f44f 70e1 	mov.w	r0, #450	@ 0x1c2
 800b484:	f017 f950 	bl	8022728 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawHLine(CIRCLE_XPOS(4)-LINE_LENGHT, CIRCLE_YPOS(4), 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 800b488:	4b48      	ldr	r3, [pc, #288]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b48a:	223c      	movs	r2, #60	@ 0x3c
 800b48c:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b490:	f240 2062 	movw	r0, #610	@ 0x262
 800b494:	f017 f948 	bl	8022728 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawVLine(CIRCLE_XPOS(4), CIRCLE_YPOS(4)-LINE_LENGHT, 2*LINE_LENGHT, UTIL_LCD_COLOR_BLUE);
 800b498:	4b44      	ldr	r3, [pc, #272]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b49a:	223c      	movs	r2, #60	@ 0x3c
 800b49c:	f44f 71af 	mov.w	r1, #350	@ 0x15e
 800b4a0:	f44f 7020 	mov.w	r0, #640	@ 0x280
 800b4a4:	f017 f976 	bl	8022794 <UTIL_LCD_DrawVLine>

    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLUE);
 800b4a8:	4840      	ldr	r0, [pc, #256]	@ (800b5ac <Touchscreen_DrawBackground_Circles+0x39c>)
 800b4aa:	f017 f8d5 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800b4ae:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b4b2:	f017 f8e5 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font24);
 800b4b6:	483f      	ldr	r0, [pc, #252]	@ (800b5b4 <Touchscreen_DrawBackground_Circles+0x3a4>)
 800b4b8:	f017 f8f6 	bl	80226a8 <UTIL_LCD_SetFont>
    x = CIRCLE_XPOS(1);
 800b4bc:	23a0      	movs	r3, #160	@ 0xa0
 800b4be:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(1) - CIRCLE_RADIUS - UTIL_LCD_GetFont()->Height;
 800b4c0:	f017 f906 	bl	80226d0 <UTIL_LCD_GetFont>
 800b4c4:	4603      	mov	r3, r0
 800b4c6:	88db      	ldrh	r3, [r3, #6]
 800b4c8:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 800b4cc:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Volume", CENTER_MODE);
 800b4ce:	89f8      	ldrh	r0, [r7, #14]
 800b4d0:	89b9      	ldrh	r1, [r7, #12]
 800b4d2:	2301      	movs	r3, #1
 800b4d4:	4a38      	ldr	r2, [pc, #224]	@ (800b5b8 <Touchscreen_DrawBackground_Circles+0x3a8>)
 800b4d6:	f017 fa13 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    x = CIRCLE_XPOS(4);
 800b4da:	f44f 7320 	mov.w	r3, #640	@ 0x280
 800b4de:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(4) - CIRCLE_RADIUS - UTIL_LCD_GetFont()->Height;
 800b4e0:	f017 f8f6 	bl	80226d0 <UTIL_LCD_GetFont>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	88db      	ldrh	r3, [r3, #6]
 800b4e8:	f5c3 73aa 	rsb	r3, r3, #340	@ 0x154
 800b4ec:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Frequency", CENTER_MODE);
 800b4ee:	89f8      	ldrh	r0, [r7, #14]
 800b4f0:	89b9      	ldrh	r1, [r7, #12]
 800b4f2:	2301      	movs	r3, #1
 800b4f4:	4a31      	ldr	r2, [pc, #196]	@ (800b5bc <Touchscreen_DrawBackground_Circles+0x3ac>)
 800b4f6:	f017 fa03 	bl	8022900 <UTIL_LCD_DisplayStringAt>

    break;
 800b4fa:	e053      	b.n	800b5a4 <Touchscreen_DrawBackground_Circles+0x394>

  case 32:
    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLACK);
 800b4fc:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800b500:	2228      	movs	r2, #40	@ 0x28
 800b502:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b506:	20a0      	movs	r0, #160	@ 0xa0
 800b508:	f017 fe0e 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS, UTIL_LCD_COLOR_BLACK);
 800b50c:	f04f 437f 	mov.w	r3, #4278190080	@ 0xff000000
 800b510:	2228      	movs	r2, #40	@ 0x28
 800b512:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b516:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b51a:	f017 fe05 	bl	8023128 <UTIL_LCD_FillCircle>

    UTIL_LCD_FillCircle(CIRCLE_XPOS(1), CIRCLE_YPOS(1), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b51e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b522:	2226      	movs	r2, #38	@ 0x26
 800b524:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b528:	20a0      	movs	r0, #160	@ 0xa0
 800b52a:	f017 fdfd 	bl	8023128 <UTIL_LCD_FillCircle>
    UTIL_LCD_FillCircle(CIRCLE_XPOS(2), CIRCLE_YPOS(2), CIRCLE_RADIUS - 2, UTIL_LCD_COLOR_WHITE);
 800b52e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b532:	2226      	movs	r2, #38	@ 0x26
 800b534:	f44f 71be 	mov.w	r1, #380	@ 0x17c
 800b538:	f44f 70a0 	mov.w	r0, #320	@ 0x140
 800b53c:	f017 fdf4 	bl	8023128 <UTIL_LCD_FillCircle>


    UTIL_LCD_SetTextColor(UTIL_LCD_COLOR_BLACK);
 800b540:	f04f 407f 	mov.w	r0, #4278190080	@ 0xff000000
 800b544:	f017 f888 	bl	8022658 <UTIL_LCD_SetTextColor>
    UTIL_LCD_SetBackColor(UTIL_LCD_COLOR_WHITE);
 800b548:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b54c:	f017 f898 	bl	8022680 <UTIL_LCD_SetBackColor>
    UTIL_LCD_SetFont(&Font20);
 800b550:	481b      	ldr	r0, [pc, #108]	@ (800b5c0 <Touchscreen_DrawBackground_Circles+0x3b0>)
 800b552:	f017 f8a9 	bl	80226a8 <UTIL_LCD_SetFont>
    x = CIRCLE_XPOS(1) - 10;
 800b556:	2396      	movs	r3, #150	@ 0x96
 800b558:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(1) - (UTIL_LCD_GetFont()->Height)/2;
 800b55a:	f017 f8b9 	bl	80226d0 <UTIL_LCD_GetFont>
 800b55e:	4603      	mov	r3, r0
 800b560:	88db      	ldrh	r3, [r3, #6]
 800b562:	085b      	lsrs	r3, r3, #1
 800b564:	b29b      	uxth	r3, r3
 800b566:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 800b56a:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Up", LEFT_MODE);
 800b56c:	89f8      	ldrh	r0, [r7, #14]
 800b56e:	89b9      	ldrh	r1, [r7, #12]
 800b570:	2303      	movs	r3, #3
 800b572:	4a14      	ldr	r2, [pc, #80]	@ (800b5c4 <Touchscreen_DrawBackground_Circles+0x3b4>)
 800b574:	f017 f9c4 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    x = CIRCLE_XPOS(2) - 10;
 800b578:	f44f 739b 	mov.w	r3, #310	@ 0x136
 800b57c:	81fb      	strh	r3, [r7, #14]
    y = CIRCLE_YPOS(3)  - (UTIL_LCD_GetFont()->Height)/2;
 800b57e:	f017 f8a7 	bl	80226d0 <UTIL_LCD_GetFont>
 800b582:	4603      	mov	r3, r0
 800b584:	88db      	ldrh	r3, [r3, #6]
 800b586:	085b      	lsrs	r3, r3, #1
 800b588:	b29b      	uxth	r3, r3
 800b58a:	f5c3 73be 	rsb	r3, r3, #380	@ 0x17c
 800b58e:	81bb      	strh	r3, [r7, #12]
    UTIL_LCD_DisplayStringAt(x, y, (uint8_t *)"Dw", LEFT_MODE);
 800b590:	89f8      	ldrh	r0, [r7, #14]
 800b592:	89b9      	ldrh	r1, [r7, #12]
 800b594:	2303      	movs	r3, #3
 800b596:	4a0c      	ldr	r2, [pc, #48]	@ (800b5c8 <Touchscreen_DrawBackground_Circles+0x3b8>)
 800b598:	f017 f9b2 	bl	8022900 <UTIL_LCD_DisplayStringAt>
    UTIL_LCD_SetFont(&Font12);
 800b59c:	480b      	ldr	r0, [pc, #44]	@ (800b5cc <Touchscreen_DrawBackground_Circles+0x3bc>)
 800b59e:	f017 f883 	bl	80226a8 <UTIL_LCD_SetFont>

    break;
 800b5a2:	bf00      	nop
  }
}
 800b5a4:	bf00      	nop
 800b5a6:	3710      	adds	r7, #16
 800b5a8:	46bd      	mov	sp, r7
 800b5aa:	bd80      	pop	{r7, pc}
 800b5ac:	ff0000ff 	.word	0xff0000ff
 800b5b0:	ffff0000 	.word	0xffff0000
 800b5b4:	24000a44 	.word	0x24000a44
 800b5b8:	08027448 	.word	0x08027448
 800b5bc:	08027450 	.word	0x08027450
 800b5c0:	24000a4c 	.word	0x24000a4c
 800b5c4:	0802745c 	.word	0x0802745c
 800b5c8:	08027460 	.word	0x08027460
 800b5cc:	24000a5c 	.word	0x24000a5c

0800b5d0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 800b5d0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800b608 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 800b5d4:	f7f4 fed4 	bl	8000380 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800b5d8:	480c      	ldr	r0, [pc, #48]	@ (800b60c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800b5da:	490d      	ldr	r1, [pc, #52]	@ (800b610 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800b5dc:	4a0d      	ldr	r2, [pc, #52]	@ (800b614 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800b5de:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800b5e0:	e002      	b.n	800b5e8 <LoopCopyDataInit>

0800b5e2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800b5e2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800b5e4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800b5e6:	3304      	adds	r3, #4

0800b5e8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800b5e8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800b5ea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800b5ec:	d3f9      	bcc.n	800b5e2 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800b5ee:	4a0a      	ldr	r2, [pc, #40]	@ (800b618 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800b5f0:	4c0a      	ldr	r4, [pc, #40]	@ (800b61c <LoopFillZerobss+0x22>)
  movs r3, #0
 800b5f2:	2300      	movs	r3, #0
  b LoopFillZerobss
 800b5f4:	e001      	b.n	800b5fa <LoopFillZerobss>

0800b5f6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800b5f6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800b5f8:	3204      	adds	r2, #4

0800b5fa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800b5fa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800b5fc:	d3fb      	bcc.n	800b5f6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800b5fe:	f01a f937 	bl	8025870 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800b602:	f7fd ff73 	bl	80094ec <main>
  bx  lr
 800b606:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800b608:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 800b60c:	24000000 	.word	0x24000000
  ldr r1, =_edata
 800b610:	24000ab4 	.word	0x24000ab4
  ldr r2, =_sidata
 800b614:	0802dfe8 	.word	0x0802dfe8
  ldr r2, =_sbss
 800b618:	24000cc0 	.word	0x24000cc0
  ldr r4, =_ebss
 800b61c:	24008bac 	.word	0x24008bac

0800b620 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800b620:	e7fe      	b.n	800b620 <ADC3_IRQHandler>
	...

0800b624 <BSP_LED_Init>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Init(Led_TypeDef Led)
{
 800b624:	b580      	push	{r7, lr}
 800b626:	b08a      	sub	sp, #40	@ 0x28
 800b628:	af00      	add	r7, sp, #0
 800b62a:	4603      	mov	r3, r0
 800b62c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b62e:	2300      	movs	r3, #0
 800b630:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef  GPIO_InitStruct;

  /* Enable the GPIO_LED clock */
  LEDx_GPIO_CLK_ENABLE();
 800b632:	4b1b      	ldr	r3, [pc, #108]	@ (800b6a0 <BSP_LED_Init+0x7c>)
 800b634:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b638:	4a19      	ldr	r2, [pc, #100]	@ (800b6a0 <BSP_LED_Init+0x7c>)
 800b63a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800b63e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b642:	4b17      	ldr	r3, [pc, #92]	@ (800b6a0 <BSP_LED_Init+0x7c>)
 800b644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b648:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800b64c:	60fb      	str	r3, [r7, #12]
 800b64e:	68fb      	ldr	r3, [r7, #12]

  /* Configure the GPIO_LED pin */
  GPIO_InitStruct.Pin = LED_PIN[Led];
 800b650:	79fb      	ldrb	r3, [r7, #7]
 800b652:	4a14      	ldr	r2, [pc, #80]	@ (800b6a4 <BSP_LED_Init+0x80>)
 800b654:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b658:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800b65a:	2301      	movs	r3, #1
 800b65c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800b65e:	2301      	movs	r3, #1
 800b660:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b662:	2303      	movs	r3, #3
 800b664:	61fb      	str	r3, [r7, #28]

  HAL_GPIO_Init(LED_PORT[Led], &GPIO_InitStruct);
 800b666:	79fb      	ldrb	r3, [r7, #7]
 800b668:	4a0f      	ldr	r2, [pc, #60]	@ (800b6a8 <BSP_LED_Init+0x84>)
 800b66a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b66e:	f107 0210 	add.w	r2, r7, #16
 800b672:	4611      	mov	r1, r2
 800b674:	4618      	mov	r0, r3
 800b676:	f00c f947 	bl	8017908 <HAL_GPIO_Init>

  /* By default, turn off LED */
  HAL_GPIO_WritePin(LED_PORT[Led], LED_PIN[Led], GPIO_PIN_SET);
 800b67a:	79fb      	ldrb	r3, [r7, #7]
 800b67c:	4a0a      	ldr	r2, [pc, #40]	@ (800b6a8 <BSP_LED_Init+0x84>)
 800b67e:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b682:	79fb      	ldrb	r3, [r7, #7]
 800b684:	4a07      	ldr	r2, [pc, #28]	@ (800b6a4 <BSP_LED_Init+0x80>)
 800b686:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b68a:	b29b      	uxth	r3, r3
 800b68c:	2201      	movs	r2, #1
 800b68e:	4619      	mov	r1, r3
 800b690:	f00c fc0c 	bl	8017eac <HAL_GPIO_WritePin>
 return ret;
 800b694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800b696:	4618      	mov	r0, r3
 800b698:	3728      	adds	r7, #40	@ 0x28
 800b69a:	46bd      	mov	sp, r7
 800b69c:	bd80      	pop	{r7, pc}
 800b69e:	bf00      	nop
 800b6a0:	58024400 	.word	0x58024400
 800b6a4:	0802a24c 	.word	0x0802a24c
 800b6a8:	240009dc 	.word	0x240009dc

0800b6ac <BSP_LED_On>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_On(Led_TypeDef Led)
{
 800b6ac:	b580      	push	{r7, lr}
 800b6ae:	b084      	sub	sp, #16
 800b6b0:	af00      	add	r7, sp, #0
 800b6b2:	4603      	mov	r3, r0
 800b6b4:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b6b6:	2300      	movs	r3, #0
 800b6b8:	60fb      	str	r3, [r7, #12]

  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_RESET);
 800b6ba:	79fb      	ldrb	r3, [r7, #7]
 800b6bc:	4a08      	ldr	r2, [pc, #32]	@ (800b6e0 <BSP_LED_On+0x34>)
 800b6be:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b6c2:	79fb      	ldrb	r3, [r7, #7]
 800b6c4:	4a07      	ldr	r2, [pc, #28]	@ (800b6e4 <BSP_LED_On+0x38>)
 800b6c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b6ca:	b29b      	uxth	r3, r3
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	4619      	mov	r1, r3
 800b6d0:	f00c fbec 	bl	8017eac <HAL_GPIO_WritePin>
  return ret;
 800b6d4:	68fb      	ldr	r3, [r7, #12]
}
 800b6d6:	4618      	mov	r0, r3
 800b6d8:	3710      	adds	r7, #16
 800b6da:	46bd      	mov	sp, r7
 800b6dc:	bd80      	pop	{r7, pc}
 800b6de:	bf00      	nop
 800b6e0:	240009dc 	.word	0x240009dc
 800b6e4:	0802a24c 	.word	0x0802a24c

0800b6e8 <BSP_LED_Off>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Off(Led_TypeDef Led)
{
 800b6e8:	b580      	push	{r7, lr}
 800b6ea:	b084      	sub	sp, #16
 800b6ec:	af00      	add	r7, sp, #0
 800b6ee:	4603      	mov	r3, r0
 800b6f0:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b6f2:	2300      	movs	r3, #0
 800b6f4:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_WritePin (LED_PORT [Led], (uint16_t)LED_PIN [Led], GPIO_PIN_SET);
 800b6f6:	79fb      	ldrb	r3, [r7, #7]
 800b6f8:	4a08      	ldr	r2, [pc, #32]	@ (800b71c <BSP_LED_Off+0x34>)
 800b6fa:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 800b6fe:	79fb      	ldrb	r3, [r7, #7]
 800b700:	4a07      	ldr	r2, [pc, #28]	@ (800b720 <BSP_LED_Off+0x38>)
 800b702:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b706:	b29b      	uxth	r3, r3
 800b708:	2201      	movs	r2, #1
 800b70a:	4619      	mov	r1, r3
 800b70c:	f00c fbce 	bl	8017eac <HAL_GPIO_WritePin>
  return ret;
 800b710:	68fb      	ldr	r3, [r7, #12]
}
 800b712:	4618      	mov	r0, r3
 800b714:	3710      	adds	r7, #16
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
 800b71a:	bf00      	nop
 800b71c:	240009dc 	.word	0x240009dc
 800b720:	0802a24c 	.word	0x0802a24c

0800b724 <BSP_LED_Toggle>:
  *            @arg  LED3
  *            @arg  LED4
  * @retval BSP status
  */
int32_t  BSP_LED_Toggle(Led_TypeDef Led)
{
 800b724:	b580      	push	{r7, lr}
 800b726:	b084      	sub	sp, #16
 800b728:	af00      	add	r7, sp, #0
 800b72a:	4603      	mov	r3, r0
 800b72c:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 800b72e:	2300      	movs	r3, #0
 800b730:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_TogglePin(LED_PORT[Led], (uint16_t)LED_PIN[Led]);
 800b732:	79fb      	ldrb	r3, [r7, #7]
 800b734:	4a08      	ldr	r2, [pc, #32]	@ (800b758 <BSP_LED_Toggle+0x34>)
 800b736:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800b73a:	79fb      	ldrb	r3, [r7, #7]
 800b73c:	4907      	ldr	r1, [pc, #28]	@ (800b75c <BSP_LED_Toggle+0x38>)
 800b73e:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b742:	b29b      	uxth	r3, r3
 800b744:	4619      	mov	r1, r3
 800b746:	4610      	mov	r0, r2
 800b748:	f00c fbc9 	bl	8017ede <HAL_GPIO_TogglePin>
  return ret;
 800b74c:	68fb      	ldr	r3, [r7, #12]
}
 800b74e:	4618      	mov	r0, r3
 800b750:	3710      	adds	r7, #16
 800b752:	46bd      	mov	sp, r7
 800b754:	bd80      	pop	{r7, pc}
 800b756:	bf00      	nop
 800b758:	240009dc 	.word	0x240009dc
 800b75c:	0802a24c 	.word	0x0802a24c

0800b760 <BSP_PB_Init>:
  *            @arg  BUTTON_MODE_EXTI: Button will be connected to EXTI line
  *                                    with interrupt generation capability
  * @retval BSP status
  */
int32_t  BSP_PB_Init(Button_TypeDef Button, ButtonMode_TypeDef ButtonMode)
{
 800b760:	b580      	push	{r7, lr}
 800b762:	b088      	sub	sp, #32
 800b764:	af00      	add	r7, sp, #0
 800b766:	4603      	mov	r3, r0
 800b768:	460a      	mov	r2, r1
 800b76a:	71fb      	strb	r3, [r7, #7]
 800b76c:	4613      	mov	r3, r2
 800b76e:	71bb      	strb	r3, [r7, #6]
  GPIO_InitTypeDef gpio_init_structure;
  static BSP_EXTI_LineCallback ButtonCallback[BUTTONn] ={BUTTON_WAKEUP_EXTI_Callback};
  static uint32_t  BSP_BUTTON_PRIO [BUTTONn] ={BSP_BUTTON_WAKEUP_IT_PRIORITY};
  static const uint32_t BUTTON_EXTI_LINE[BUTTONn] ={BUTTON_WAKEUP_EXTI_LINE};
  /* Enable the BUTTON clock*/
  BUTTON_WAKEUP_GPIO_CLK_ENABLE();
 800b770:	4b2e      	ldr	r3, [pc, #184]	@ (800b82c <BSP_PB_Init+0xcc>)
 800b772:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b776:	4a2d      	ldr	r2, [pc, #180]	@ (800b82c <BSP_PB_Init+0xcc>)
 800b778:	f043 0304 	orr.w	r3, r3, #4
 800b77c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b780:	4b2a      	ldr	r3, [pc, #168]	@ (800b82c <BSP_PB_Init+0xcc>)
 800b782:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b786:	f003 0304 	and.w	r3, r3, #4
 800b78a:	60bb      	str	r3, [r7, #8]
 800b78c:	68bb      	ldr	r3, [r7, #8]
  gpio_init_structure.Pin = BUTTON_PIN [Button];
 800b78e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800b792:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Pull = GPIO_NOPULL;
 800b794:	2300      	movs	r3, #0
 800b796:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800b798:	2302      	movs	r3, #2
 800b79a:	61bb      	str	r3, [r7, #24]

  if(ButtonMode == BUTTON_MODE_GPIO)
 800b79c:	79bb      	ldrb	r3, [r7, #6]
 800b79e:	2b00      	cmp	r3, #0
 800b7a0:	d10c      	bne.n	800b7bc <BSP_PB_Init+0x5c>
  {
    /* Configure Button pin as input */
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800b7a2:	2300      	movs	r3, #0
 800b7a4:	613b      	str	r3, [r7, #16]
    HAL_GPIO_Init(BUTTON_PORT [Button], &gpio_init_structure);
 800b7a6:	79fb      	ldrb	r3, [r7, #7]
 800b7a8:	4a21      	ldr	r2, [pc, #132]	@ (800b830 <BSP_PB_Init+0xd0>)
 800b7aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ae:	f107 020c 	add.w	r2, r7, #12
 800b7b2:	4611      	mov	r1, r2
 800b7b4:	4618      	mov	r0, r3
 800b7b6:	f00c f8a7 	bl	8017908 <HAL_GPIO_Init>
 800b7ba:	e031      	b.n	800b820 <BSP_PB_Init+0xc0>
  }
  else /* (ButtonMode == BUTTON_MODE_EXTI) */
  {
    /* Configure Button pin as input with External interrupt */
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING;
 800b7bc:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800b7c0:	613b      	str	r3, [r7, #16]

    HAL_GPIO_Init(BUTTON_PORT[Button], &gpio_init_structure);
 800b7c2:	79fb      	ldrb	r3, [r7, #7]
 800b7c4:	4a1a      	ldr	r2, [pc, #104]	@ (800b830 <BSP_PB_Init+0xd0>)
 800b7c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7ca:	f107 020c 	add.w	r2, r7, #12
 800b7ce:	4611      	mov	r1, r2
 800b7d0:	4618      	mov	r0, r3
 800b7d2:	f00c f899 	bl	8017908 <HAL_GPIO_Init>

    (void)HAL_EXTI_GetHandle(&hpb_exti[Button], BUTTON_EXTI_LINE[Button]);
 800b7d6:	79fb      	ldrb	r3, [r7, #7]
 800b7d8:	00db      	lsls	r3, r3, #3
 800b7da:	4a16      	ldr	r2, [pc, #88]	@ (800b834 <BSP_PB_Init+0xd4>)
 800b7dc:	441a      	add	r2, r3
 800b7de:	79fb      	ldrb	r3, [r7, #7]
 800b7e0:	4915      	ldr	r1, [pc, #84]	@ (800b838 <BSP_PB_Init+0xd8>)
 800b7e2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800b7e6:	4619      	mov	r1, r3
 800b7e8:	4610      	mov	r0, r2
 800b7ea:	f00c f83c 	bl	8017866 <HAL_EXTI_GetHandle>
    (void)HAL_EXTI_RegisterCallback(&hpb_exti[Button],  HAL_EXTI_COMMON_CB_ID, ButtonCallback[Button]);
 800b7ee:	79fb      	ldrb	r3, [r7, #7]
 800b7f0:	00db      	lsls	r3, r3, #3
 800b7f2:	4a10      	ldr	r2, [pc, #64]	@ (800b834 <BSP_PB_Init+0xd4>)
 800b7f4:	1898      	adds	r0, r3, r2
 800b7f6:	79fb      	ldrb	r3, [r7, #7]
 800b7f8:	4a10      	ldr	r2, [pc, #64]	@ (800b83c <BSP_PB_Init+0xdc>)
 800b7fa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b7fe:	461a      	mov	r2, r3
 800b800:	2100      	movs	r1, #0
 800b802:	f00c f811 	bl	8017828 <HAL_EXTI_RegisterCallback>

    /* Enable and set Button EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((BUTTON_IRQn[Button]), BSP_BUTTON_PRIO[Button], 0x00);
 800b806:	2028      	movs	r0, #40	@ 0x28
 800b808:	79fb      	ldrb	r3, [r7, #7]
 800b80a:	4a0d      	ldr	r2, [pc, #52]	@ (800b840 <BSP_PB_Init+0xe0>)
 800b80c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b810:	2200      	movs	r2, #0
 800b812:	4619      	mov	r1, r3
 800b814:	f006 fdfd 	bl	8012412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((BUTTON_IRQn[Button]));
 800b818:	2328      	movs	r3, #40	@ 0x28
 800b81a:	4618      	mov	r0, r3
 800b81c:	f006 fe13 	bl	8012446 <HAL_NVIC_EnableIRQ>
  }
  return BSP_ERROR_NONE;
 800b820:	2300      	movs	r3, #0
}
 800b822:	4618      	mov	r0, r3
 800b824:	3720      	adds	r7, #32
 800b826:	46bd      	mov	sp, r7
 800b828:	bd80      	pop	{r7, pc}
 800b82a:	bf00      	nop
 800b82c:	58024400 	.word	0x58024400
 800b830:	240009ec 	.word	0x240009ec
 800b834:	2400764c 	.word	0x2400764c
 800b838:	0802a274 	.word	0x0802a274
 800b83c:	24000a04 	.word	0x24000a04
 800b840:	24000a08 	.word	0x24000a08

0800b844 <BSP_PB_GetState>:
  *          This parameter can be one of the following values:
  *            @arg  BUTTON_WAKEUP: Wakeup Push Button
  * @retval The Button GPIO pin value
  */
int32_t  BSP_PB_GetState(Button_TypeDef Button)
{
 800b844:	b580      	push	{r7, lr}
 800b846:	b082      	sub	sp, #8
 800b848:	af00      	add	r7, sp, #0
 800b84a:	4603      	mov	r3, r0
 800b84c:	71fb      	strb	r3, [r7, #7]
  return HAL_GPIO_ReadPin(BUTTON_PORT[Button], BUTTON_PIN[Button]);
 800b84e:	79fb      	ldrb	r3, [r7, #7]
 800b850:	4a06      	ldr	r2, [pc, #24]	@ (800b86c <BSP_PB_GetState+0x28>)
 800b852:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b856:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800b85a:	4611      	mov	r1, r2
 800b85c:	4618      	mov	r0, r3
 800b85e:	f00c fb0d 	bl	8017e7c <HAL_GPIO_ReadPin>
 800b862:	4603      	mov	r3, r0
}
 800b864:	4618      	mov	r0, r3
 800b866:	3708      	adds	r7, #8
 800b868:	46bd      	mov	sp, r7
 800b86a:	bd80      	pop	{r7, pc}
 800b86c:	240009ec 	.word	0x240009ec

0800b870 <BSP_PB_IRQHandler>:
  * @brief  This function handles Push-Button interrupt requests.
  * @param  Button Specifies the pin connected EXTI line
  * @retval None
  */
void BSP_PB_IRQHandler(Button_TypeDef Button)
{
 800b870:	b580      	push	{r7, lr}
 800b872:	b082      	sub	sp, #8
 800b874:	af00      	add	r7, sp, #0
 800b876:	4603      	mov	r3, r0
 800b878:	71fb      	strb	r3, [r7, #7]
  HAL_EXTI_IRQHandler(&hpb_exti[Button]);
 800b87a:	79fb      	ldrb	r3, [r7, #7]
 800b87c:	00db      	lsls	r3, r3, #3
 800b87e:	4a04      	ldr	r2, [pc, #16]	@ (800b890 <BSP_PB_IRQHandler+0x20>)
 800b880:	4413      	add	r3, r2
 800b882:	4618      	mov	r0, r3
 800b884:	f00c f804 	bl	8017890 <HAL_EXTI_IRQHandler>
}
 800b888:	bf00      	nop
 800b88a:	3708      	adds	r7, #8
 800b88c:	46bd      	mov	sp, r7
 800b88e:	bd80      	pop	{r7, pc}
 800b890:	2400764c 	.word	0x2400764c

0800b894 <BUTTON_WAKEUP_EXTI_Callback>:
/**
  * @brief  KEY EXTI line detection callbacks.
  * @retval None
  */
static void BUTTON_WAKEUP_EXTI_Callback(void)
{
 800b894:	b580      	push	{r7, lr}
 800b896:	af00      	add	r7, sp, #0
  BSP_PB_Callback(BUTTON_WAKEUP);
 800b898:	2000      	movs	r0, #0
 800b89a:	f7fd ff93 	bl	80097c4 <BSP_PB_Callback>
}
 800b89e:	bf00      	nop
 800b8a0:	bd80      	pop	{r7, pc}
	...

0800b8a4 <BSP_JOY_Init>:
  *                                 with interrupt generation capability
  * @param  JoyPins joystick pins to be initialized
  * @retval BSP status
  */
int32_t BSP_JOY_Init(JOY_TypeDef JOY, JOYMode_TypeDef JoyMode, JOYPin_TypeDef JoyPins)
{
 800b8a4:	b580      	push	{r7, lr}
 800b8a6:	b090      	sub	sp, #64	@ 0x40
 800b8a8:	af00      	add	r7, sp, #0
 800b8aa:	4603      	mov	r3, r0
 800b8ac:	71fb      	strb	r3, [r7, #7]
 800b8ae:	460b      	mov	r3, r1
 800b8b0:	71bb      	strb	r3, [r7, #6]
 800b8b2:	4613      	mov	r3, r2
 800b8b4:	717b      	strb	r3, [r7, #5]
  int32_t ret = BSP_ERROR_NONE;
 800b8b6:	2300      	movs	r3, #0
 800b8b8:	63bb      	str	r3, [r7, #56]	@ 0x38
                                                   BSP_JOY1_RIGHT_IT_PRIORITY,
                                                   BSP_JOY1_UP_IT_PRIORITY
                                                  };

  /* Store Joystick pins initialized */
  JoyPinsMask |= (uint32_t)JoyPins;
 800b8ba:	797a      	ldrb	r2, [r7, #5]
 800b8bc:	4b69      	ldr	r3, [pc, #420]	@ (800ba64 <BSP_JOY_Init+0x1c0>)
 800b8be:	681b      	ldr	r3, [r3, #0]
 800b8c0:	4313      	orrs	r3, r2
 800b8c2:	4a68      	ldr	r2, [pc, #416]	@ (800ba64 <BSP_JOY_Init+0x1c0>)
 800b8c4:	6013      	str	r3, [r2, #0]

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800b8c6:	2300      	movs	r3, #0
 800b8c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800b8ca:	e0c1      	b.n	800ba50 <BSP_JOY_Init+0x1ac>
  {
    key_pressed = 1UL << joykey;
 800b8cc:	2201      	movs	r2, #1
 800b8ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b8d0:	fa02 f303 	lsl.w	r3, r2, r3
 800b8d4:	637b      	str	r3, [r7, #52]	@ 0x34
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 800b8d6:	797a      	ldrb	r2, [r7, #5]
 800b8d8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8da:	4013      	ands	r3, r2
 800b8dc:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800b8de:	429a      	cmp	r2, r3
 800b8e0:	f040 80b3 	bne.w	800ba4a <BSP_JOY_Init+0x1a6>
    {
      if(JOY == JOY1)
 800b8e4:	79fb      	ldrb	r3, [r7, #7]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	f040 80af 	bne.w	800ba4a <BSP_JOY_Init+0x1a6>
      {
      /* Enable the JOY clock */
        if(key_pressed == (uint32_t)JOY_SEL)
 800b8ec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b8ee:	2b01      	cmp	r3, #1
 800b8f0:	d10f      	bne.n	800b912 <BSP_JOY_Init+0x6e>
        {
          JOY1_SEL_GPIO_CLK_ENABLE();
 800b8f2:	4b5d      	ldr	r3, [pc, #372]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b8f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b8f8:	4a5b      	ldr	r2, [pc, #364]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b8fa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b8fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b902:	4b59      	ldr	r3, [pc, #356]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b904:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b90c:	61fb      	str	r3, [r7, #28]
 800b90e:	69fb      	ldr	r3, [r7, #28]
 800b910:	e04a      	b.n	800b9a8 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t)JOY_DOWN)
 800b912:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b914:	2b02      	cmp	r3, #2
 800b916:	d10f      	bne.n	800b938 <BSP_JOY_Init+0x94>
        {
          JOY1_DOWN_GPIO_CLK_ENABLE();
 800b918:	4b53      	ldr	r3, [pc, #332]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b91a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b91e:	4a52      	ldr	r2, [pc, #328]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b920:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b924:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b928:	4b4f      	ldr	r3, [pc, #316]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b92a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b92e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b932:	61bb      	str	r3, [r7, #24]
 800b934:	69bb      	ldr	r3, [r7, #24]
 800b936:	e037      	b.n	800b9a8 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_LEFT)
 800b938:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b93a:	2b04      	cmp	r3, #4
 800b93c:	d10f      	bne.n	800b95e <BSP_JOY_Init+0xba>
        {
          JOY1_LEFT_GPIO_CLK_ENABLE();
 800b93e:	4b4a      	ldr	r3, [pc, #296]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b940:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b944:	4a48      	ldr	r2, [pc, #288]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b946:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b94a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b94e:	4b46      	ldr	r3, [pc, #280]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b950:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b958:	617b      	str	r3, [r7, #20]
 800b95a:	697b      	ldr	r3, [r7, #20]
 800b95c:	e024      	b.n	800b9a8 <BSP_JOY_Init+0x104>
        }
        else if(key_pressed == (uint32_t) JOY_RIGHT)
 800b95e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b960:	2b08      	cmp	r3, #8
 800b962:	d10f      	bne.n	800b984 <BSP_JOY_Init+0xe0>
        {
          JOY1_RIGHT_GPIO_CLK_ENABLE();
 800b964:	4b40      	ldr	r3, [pc, #256]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b966:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b96a:	4a3f      	ldr	r2, [pc, #252]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b96c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b970:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b974:	4b3c      	ldr	r3, [pc, #240]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b976:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b97a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b97e:	613b      	str	r3, [r7, #16]
 800b980:	693b      	ldr	r3, [r7, #16]
 800b982:	e011      	b.n	800b9a8 <BSP_JOY_Init+0x104>
        }
        else
        {
          if(key_pressed == (uint32_t) JOY_UP)
 800b984:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800b986:	2b10      	cmp	r3, #16
 800b988:	d10e      	bne.n	800b9a8 <BSP_JOY_Init+0x104>
          {
            JOY1_UP_GPIO_CLK_ENABLE();
 800b98a:	4b37      	ldr	r3, [pc, #220]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b98c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b990:	4a35      	ldr	r2, [pc, #212]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b992:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800b996:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800b99a:	4b33      	ldr	r3, [pc, #204]	@ (800ba68 <BSP_JOY_Init+0x1c4>)
 800b99c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800b9a0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800b9a4:	60fb      	str	r3, [r7, #12]
 800b9a6:	68fb      	ldr	r3, [r7, #12]
          }
        }

        gpio_init_structure.Pin = JOY1_PIN[joykey];
 800b9a8:	4a30      	ldr	r2, [pc, #192]	@ (800ba6c <BSP_JOY_Init+0x1c8>)
 800b9aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9ac:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800b9b0:	623b      	str	r3, [r7, #32]
        gpio_init_structure.Pull = GPIO_PULLUP;
 800b9b2:	2301      	movs	r3, #1
 800b9b4:	62bb      	str	r3, [r7, #40]	@ 0x28
        gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b9b6:	2303      	movs	r3, #3
 800b9b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

        if (JoyMode == JOY_MODE_GPIO)
 800b9ba:	79bb      	ldrb	r3, [r7, #6]
 800b9bc:	2b00      	cmp	r3, #0
 800b9be:	d10c      	bne.n	800b9da <BSP_JOY_Init+0x136>
        {
          /* Configure Joy pin as input */
          gpio_init_structure.Mode = GPIO_MODE_INPUT;
 800b9c0:	2300      	movs	r3, #0
 800b9c2:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800b9c4:	4a2a      	ldr	r2, [pc, #168]	@ (800ba70 <BSP_JOY_Init+0x1cc>)
 800b9c6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9cc:	f107 0220 	add.w	r2, r7, #32
 800b9d0:	4611      	mov	r1, r2
 800b9d2:	4618      	mov	r0, r3
 800b9d4:	f00b ff98 	bl	8017908 <HAL_GPIO_Init>
 800b9d8:	e037      	b.n	800ba4a <BSP_JOY_Init+0x1a6>
        }
        else /*(JoyMode == JOY_MODE_EXTI)*/
        {
          /* Configure Joy pin as input with External interrupt */
          gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 800b9da:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 800b9de:	627b      	str	r3, [r7, #36]	@ 0x24
          HAL_GPIO_Init(JOY1_PORT[joykey], &gpio_init_structure);
 800b9e0:	4a23      	ldr	r2, [pc, #140]	@ (800ba70 <BSP_JOY_Init+0x1cc>)
 800b9e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9e4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800b9e8:	f107 0220 	add.w	r2, r7, #32
 800b9ec:	4611      	mov	r1, r2
 800b9ee:	4618      	mov	r0, r3
 800b9f0:	f00b ff8a 	bl	8017908 <HAL_GPIO_Init>

         (void)HAL_EXTI_GetHandle(&hjoy_exti[joykey], JOY_EXTI_LINE[joykey]);
 800b9f4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800b9f6:	00db      	lsls	r3, r3, #3
 800b9f8:	4a1e      	ldr	r2, [pc, #120]	@ (800ba74 <BSP_JOY_Init+0x1d0>)
 800b9fa:	441a      	add	r2, r3
 800b9fc:	491e      	ldr	r1, [pc, #120]	@ (800ba78 <BSP_JOY_Init+0x1d4>)
 800b9fe:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba00:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800ba04:	4619      	mov	r1, r3
 800ba06:	4610      	mov	r0, r2
 800ba08:	f00b ff2d 	bl	8017866 <HAL_EXTI_GetHandle>
         (void)HAL_EXTI_RegisterCallback(&hjoy_exti[joykey],  HAL_EXTI_COMMON_CB_ID, JoyCallback[joykey]);
 800ba0c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba0e:	00db      	lsls	r3, r3, #3
 800ba10:	4a18      	ldr	r2, [pc, #96]	@ (800ba74 <BSP_JOY_Init+0x1d0>)
 800ba12:	1898      	adds	r0, r3, r2
 800ba14:	4a19      	ldr	r2, [pc, #100]	@ (800ba7c <BSP_JOY_Init+0x1d8>)
 800ba16:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba1c:	461a      	mov	r2, r3
 800ba1e:	2100      	movs	r1, #0
 800ba20:	f00b ff02 	bl	8017828 <HAL_EXTI_RegisterCallback>

          /* Enable and set Joy EXTI Interrupt to the lowest priority */
          HAL_NVIC_SetPriority((IRQn_Type)(JOY1_IRQn[joykey]), BSP_JOY_PRIO[joykey], 0x00);
 800ba24:	4a16      	ldr	r2, [pc, #88]	@ (800ba80 <BSP_JOY_Init+0x1dc>)
 800ba26:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba28:	f932 0013 	ldrsh.w	r0, [r2, r3, lsl #1]
 800ba2c:	4a15      	ldr	r2, [pc, #84]	@ (800ba84 <BSP_JOY_Init+0x1e0>)
 800ba2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba30:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800ba34:	2200      	movs	r2, #0
 800ba36:	4619      	mov	r1, r3
 800ba38:	f006 fceb 	bl	8012412 <HAL_NVIC_SetPriority>
          HAL_NVIC_EnableIRQ((IRQn_Type)(JOY1_IRQn[joykey]));
 800ba3c:	4a10      	ldr	r2, [pc, #64]	@ (800ba80 <BSP_JOY_Init+0x1dc>)
 800ba3e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba40:	f932 3013 	ldrsh.w	r3, [r2, r3, lsl #1]
 800ba44:	4618      	mov	r0, r3
 800ba46:	f006 fcfe 	bl	8012446 <HAL_NVIC_EnableIRQ>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800ba4a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba4c:	3301      	adds	r3, #1
 800ba4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ba50:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ba52:	2b04      	cmp	r3, #4
 800ba54:	f67f af3a 	bls.w	800b8cc <BSP_JOY_Init+0x28>
        }
      }
    }
  }

  return ret;
 800ba58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	3740      	adds	r7, #64	@ 0x40
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	24007654 	.word	0x24007654
 800ba68:	58024400 	.word	0x58024400
 800ba6c:	0802a25c 	.word	0x0802a25c
 800ba70:	240009f0 	.word	0x240009f0
 800ba74:	24007658 	.word	0x24007658
 800ba78:	0802a278 	.word	0x0802a278
 800ba7c:	24000a0c 	.word	0x24000a0c
 800ba80:	0802a268 	.word	0x0802a268
 800ba84:	24000a20 	.word	0x24000a20

0800ba88 <BSP_JOY_DeInit>:
  * @note   JOY DeInit does not disable the MFX, just set the MFX pins in Off mode
  * @param  JoyPins joystick pins to be de-initialized
  * @retval BSP status
  */
int32_t BSP_JOY_DeInit(JOY_TypeDef JOY, JOYPin_TypeDef JoyPins)
{
 800ba88:	b580      	push	{r7, lr}
 800ba8a:	b084      	sub	sp, #16
 800ba8c:	af00      	add	r7, sp, #0
 800ba8e:	4603      	mov	r3, r0
 800ba90:	460a      	mov	r2, r1
 800ba92:	71fb      	strb	r3, [r7, #7]
 800ba94:	4613      	mov	r3, r2
 800ba96:	71bb      	strb	r3, [r7, #6]
  uint32_t joykey, key_pressed;

  /* Store Joystick pins initialized */
  JoyPinsMask &= (uint32_t)JoyPins;
 800ba98:	79ba      	ldrb	r2, [r7, #6]
 800ba9a:	4b41      	ldr	r3, [pc, #260]	@ (800bba0 <BSP_JOY_DeInit+0x118>)
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	4013      	ands	r3, r2
 800baa0:	4a3f      	ldr	r2, [pc, #252]	@ (800bba0 <BSP_JOY_DeInit+0x118>)
 800baa2:	6013      	str	r3, [r2, #0]

  /* Initialized the Joystick. */
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800baa4:	2300      	movs	r3, #0
 800baa6:	60fb      	str	r3, [r7, #12]
 800baa8:	e071      	b.n	800bb8e <BSP_JOY_DeInit+0x106>
  {
    key_pressed = 1UL << joykey;
 800baaa:	2201      	movs	r2, #1
 800baac:	68fb      	ldr	r3, [r7, #12]
 800baae:	fa02 f303 	lsl.w	r3, r2, r3
 800bab2:	60bb      	str	r3, [r7, #8]
    if((key_pressed & (uint32_t)JoyPins) == key_pressed)
 800bab4:	79ba      	ldrb	r2, [r7, #6]
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	4013      	ands	r3, r2
 800baba:	68ba      	ldr	r2, [r7, #8]
 800babc:	429a      	cmp	r2, r3
 800babe:	d163      	bne.n	800bb88 <BSP_JOY_DeInit+0x100>
    {
      if(JOY == JOY1)
 800bac0:	79fb      	ldrb	r3, [r7, #7]
 800bac2:	2b00      	cmp	r3, #0
 800bac4:	d160      	bne.n	800bb88 <BSP_JOY_DeInit+0x100>
      {
        /* Disable the JOY clock */
        switch(key_pressed)
 800bac6:	68bb      	ldr	r3, [r7, #8]
 800bac8:	3b01      	subs	r3, #1
 800baca:	2b0f      	cmp	r3, #15
 800bacc:	d84f      	bhi.n	800bb6e <BSP_JOY_DeInit+0xe6>
 800bace:	a201      	add	r2, pc, #4	@ (adr r2, 800bad4 <BSP_JOY_DeInit+0x4c>)
 800bad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800bad4:	0800bb15 	.word	0x0800bb15
 800bad8:	0800bb27 	.word	0x0800bb27
 800badc:	0800bb6f 	.word	0x0800bb6f
 800bae0:	0800bb39 	.word	0x0800bb39
 800bae4:	0800bb6f 	.word	0x0800bb6f
 800bae8:	0800bb6f 	.word	0x0800bb6f
 800baec:	0800bb6f 	.word	0x0800bb6f
 800baf0:	0800bb4b 	.word	0x0800bb4b
 800baf4:	0800bb6f 	.word	0x0800bb6f
 800baf8:	0800bb6f 	.word	0x0800bb6f
 800bafc:	0800bb6f 	.word	0x0800bb6f
 800bb00:	0800bb6f 	.word	0x0800bb6f
 800bb04:	0800bb6f 	.word	0x0800bb6f
 800bb08:	0800bb6f 	.word	0x0800bb6f
 800bb0c:	0800bb6f 	.word	0x0800bb6f
 800bb10:	0800bb5d 	.word	0x0800bb5d
        {
          case JOY_SEL:
          JOY1_SEL_GPIO_CLK_DISABLE();
 800bb14:	4b23      	ldr	r3, [pc, #140]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb16:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb1a:	4a22      	ldr	r2, [pc, #136]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb1c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb20:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
          break;
 800bb24:	e024      	b.n	800bb70 <BSP_JOY_DeInit+0xe8>

          case JOY_DOWN:
          JOY1_DOWN_GPIO_CLK_DISABLE();
 800bb26:	4b1f      	ldr	r3, [pc, #124]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb28:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb2c:	4a1d      	ldr	r2, [pc, #116]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb32:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
          break;
 800bb36:	e01b      	b.n	800bb70 <BSP_JOY_DeInit+0xe8>

          case JOY_LEFT:
          JOY1_LEFT_GPIO_CLK_DISABLE();
 800bb38:	4b1a      	ldr	r3, [pc, #104]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb3a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb3e:	4a19      	ldr	r2, [pc, #100]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb40:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb44:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
          break;
 800bb48:	e012      	b.n	800bb70 <BSP_JOY_DeInit+0xe8>

          case JOY_RIGHT:
          JOY1_RIGHT_GPIO_CLK_DISABLE();
 800bb4a:	4b16      	ldr	r3, [pc, #88]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb4c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb50:	4a14      	ldr	r2, [pc, #80]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb52:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb56:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
          break;
 800bb5a:	e009      	b.n	800bb70 <BSP_JOY_DeInit+0xe8>

          case JOY_UP:
          JOY1_UP_GPIO_CLK_DISABLE();
 800bb5c:	4b11      	ldr	r3, [pc, #68]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb5e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800bb62:	4a10      	ldr	r2, [pc, #64]	@ (800bba4 <BSP_JOY_DeInit+0x11c>)
 800bb64:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800bb68:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
          break;
 800bb6c:	e000      	b.n	800bb70 <BSP_JOY_DeInit+0xe8>
          default:
          break;
 800bb6e:	bf00      	nop
        }
        HAL_GPIO_DeInit(JOY1_PORT[joykey], JOY1_PIN[joykey]);
 800bb70:	4a0d      	ldr	r2, [pc, #52]	@ (800bba8 <BSP_JOY_DeInit+0x120>)
 800bb72:	68fb      	ldr	r3, [r7, #12]
 800bb74:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 800bb78:	490c      	ldr	r1, [pc, #48]	@ (800bbac <BSP_JOY_DeInit+0x124>)
 800bb7a:	68fb      	ldr	r3, [r7, #12]
 800bb7c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 800bb80:	4619      	mov	r1, r3
 800bb82:	4610      	mov	r0, r2
 800bb84:	f00c f870 	bl	8017c68 <HAL_GPIO_DeInit>
  for(joykey = 0U; joykey < JOY_KEY_NUMBER ; joykey++)
 800bb88:	68fb      	ldr	r3, [r7, #12]
 800bb8a:	3301      	adds	r3, #1
 800bb8c:	60fb      	str	r3, [r7, #12]
 800bb8e:	68fb      	ldr	r3, [r7, #12]
 800bb90:	2b04      	cmp	r3, #4
 800bb92:	d98a      	bls.n	800baaa <BSP_JOY_DeInit+0x22>
      }
    }
  }
  return BSP_ERROR_NONE;
 800bb94:	2300      	movs	r3, #0
}
 800bb96:	4618      	mov	r0, r3
 800bb98:	3710      	adds	r7, #16
 800bb9a:	46bd      	mov	sp, r7
 800bb9c:	bd80      	pop	{r7, pc}
 800bb9e:	bf00      	nop
 800bba0:	24007654 	.word	0x24007654
 800bba4:	58024400 	.word	0x58024400
 800bba8:	240009f0 	.word	0x240009f0
 800bbac:	0802a25c 	.word	0x0802a25c

0800bbb0 <BSP_JOY_IRQHandler>:
  * @param  JOY Joystick instance
  * @param  JoyPin Specifies the pin connected EXTI handler
  * @retval None
  */
void BSP_JOY_IRQHandler(JOY_TypeDef JOY, JOYPin_TypeDef JoyPin)
{
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b086      	sub	sp, #24
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	4603      	mov	r3, r0
 800bbb8:	460a      	mov	r2, r1
 800bbba:	71fb      	strb	r3, [r7, #7]
 800bbbc:	4613      	mov	r3, r2
 800bbbe:	71bb      	strb	r3, [r7, #6]
  if(JOY == JOY1)
 800bbc0:	79fb      	ldrb	r3, [r7, #7]
 800bbc2:	2b00      	cmp	r3, #0
 800bbc4:	d116      	bne.n	800bbf4 <BSP_JOY_IRQHandler+0x44>
  {
    HAL_EXTI_IRQHandler(&hjoy_exti[POSITION_VAL(JoyPin)]);
 800bbc6:	79bb      	ldrb	r3, [r7, #6]
 800bbc8:	613b      	str	r3, [r7, #16]
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800bbca:	693b      	ldr	r3, [r7, #16]
 800bbcc:	fa93 f3a3 	rbit	r3, r3
 800bbd0:	60fb      	str	r3, [r7, #12]
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 800bbd2:	68fb      	ldr	r3, [r7, #12]
 800bbd4:	617b      	str	r3, [r7, #20]
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800bbd6:	697b      	ldr	r3, [r7, #20]
 800bbd8:	2b00      	cmp	r3, #0
 800bbda:	d101      	bne.n	800bbe0 <BSP_JOY_IRQHandler+0x30>
  {
    return 32U;
 800bbdc:	2320      	movs	r3, #32
 800bbde:	e003      	b.n	800bbe8 <BSP_JOY_IRQHandler+0x38>
  }
  return __builtin_clz(value);
 800bbe0:	697b      	ldr	r3, [r7, #20]
 800bbe2:	fab3 f383 	clz	r3, r3
 800bbe6:	b2db      	uxtb	r3, r3
 800bbe8:	00db      	lsls	r3, r3, #3
 800bbea:	4a04      	ldr	r2, [pc, #16]	@ (800bbfc <BSP_JOY_IRQHandler+0x4c>)
 800bbec:	4413      	add	r3, r2
 800bbee:	4618      	mov	r0, r3
 800bbf0:	f00b fe4e 	bl	8017890 <HAL_EXTI_IRQHandler>
  }
}
 800bbf4:	bf00      	nop
 800bbf6:	3718      	adds	r7, #24
 800bbf8:	46bd      	mov	sp, r7
 800bbfa:	bd80      	pop	{r7, pc}
 800bbfc:	24007658 	.word	0x24007658

0800bc00 <JOY1_UP_EXTI_Callback>:
/**
  * @brief  JOY1 UP EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_UP_EXTI_Callback(void)
{
 800bc00:	b580      	push	{r7, lr}
 800bc02:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_UP);
 800bc04:	2110      	movs	r1, #16
 800bc06:	2000      	movs	r0, #0
 800bc08:	f7fd f8dc 	bl	8008dc4 <BSP_JOY_Callback>
}
 800bc0c:	bf00      	nop
 800bc0e:	bd80      	pop	{r7, pc}

0800bc10 <JOY1_DOWN_EXTI_Callback>:
/**
  * @brief  JOY1 DOWN EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_DOWN_EXTI_Callback(void)
{
 800bc10:	b580      	push	{r7, lr}
 800bc12:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_DOWN);
 800bc14:	2102      	movs	r1, #2
 800bc16:	2000      	movs	r0, #0
 800bc18:	f7fd f8d4 	bl	8008dc4 <BSP_JOY_Callback>
}
 800bc1c:	bf00      	nop
 800bc1e:	bd80      	pop	{r7, pc}

0800bc20 <JOY1_SEL_EXTI_Callback>:
/**
  * @brief  JOY1 SEL EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_SEL_EXTI_Callback(void)
{
 800bc20:	b580      	push	{r7, lr}
 800bc22:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_SEL);
 800bc24:	2101      	movs	r1, #1
 800bc26:	2000      	movs	r0, #0
 800bc28:	f7fd f8cc 	bl	8008dc4 <BSP_JOY_Callback>
}
 800bc2c:	bf00      	nop
 800bc2e:	bd80      	pop	{r7, pc}

0800bc30 <JOY1_LEFT_EXTI_Callback>:
/**
  * @brief  JOY1 LEFT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_LEFT_EXTI_Callback(void)
{
 800bc30:	b580      	push	{r7, lr}
 800bc32:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_LEFT);
 800bc34:	2104      	movs	r1, #4
 800bc36:	2000      	movs	r0, #0
 800bc38:	f7fd f8c4 	bl	8008dc4 <BSP_JOY_Callback>
}
 800bc3c:	bf00      	nop
 800bc3e:	bd80      	pop	{r7, pc}

0800bc40 <JOY1_RIGHT_EXTI_Callback>:
/**
  * @brief  JOY1 RIGHT EXTI line detection callbacks.
  * @retval None
  */
static void JOY1_RIGHT_EXTI_Callback(void)
{
 800bc40:	b580      	push	{r7, lr}
 800bc42:	af00      	add	r7, sp, #0
  BSP_JOY_Callback(JOY1, JOY_RIGHT);
 800bc44:	2108      	movs	r1, #8
 800bc46:	2000      	movs	r0, #0
 800bc48:	f7fd f8bc 	bl	8008dc4 <BSP_JOY_Callback>
}
 800bc4c:	bf00      	nop
 800bc4e:	bd80      	pop	{r7, pc}

0800bc50 <BSP_AUDIO_OUT_Init>:
  * @param  Instance  : AUDIO_OUT Instance. It can only be 0 (SAI)
  * @param  AudioInit : AUDIO_OUT init Structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b094      	sub	sp, #80	@ 0x50
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800bc5a:	2300      	movs	r3, #0
 800bc5c:	64fb      	str	r3, [r7, #76]	@ 0x4c

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800bc5e:	687b      	ldr	r3, [r7, #4]
 800bc60:	2b01      	cmp	r3, #1
 800bc62:	d903      	bls.n	800bc6c <BSP_AUDIO_OUT_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800bc64:	f06f 0301 	mvn.w	r3, #1
 800bc68:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bc6a:	e0da      	b.n	800be22 <BSP_AUDIO_OUT_Init+0x1d2>
  }
  else
  {
    /* Fill Audio_Out_Ctx structure */
    Audio_Out_Ctx[Instance].Device         = AudioInit->Device;
 800bc6c:	683b      	ldr	r3, [r7, #0]
 800bc6e:	6819      	ldr	r1, [r3, #0]
 800bc70:	486e      	ldr	r0, [pc, #440]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bc72:	687a      	ldr	r2, [r7, #4]
 800bc74:	4613      	mov	r3, r2
 800bc76:	00db      	lsls	r3, r3, #3
 800bc78:	4413      	add	r3, r2
 800bc7a:	009b      	lsls	r3, r3, #2
 800bc7c:	4403      	add	r3, r0
 800bc7e:	3304      	adds	r3, #4
 800bc80:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Instance       = Instance;
 800bc82:	496a      	ldr	r1, [pc, #424]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bc84:	687a      	ldr	r2, [r7, #4]
 800bc86:	4613      	mov	r3, r2
 800bc88:	00db      	lsls	r3, r3, #3
 800bc8a:	4413      	add	r3, r2
 800bc8c:	009b      	lsls	r3, r3, #2
 800bc8e:	440b      	add	r3, r1
 800bc90:	687a      	ldr	r2, [r7, #4]
 800bc92:	601a      	str	r2, [r3, #0]
    Audio_Out_Ctx[Instance].SampleRate     = AudioInit->SampleRate;
 800bc94:	683b      	ldr	r3, [r7, #0]
 800bc96:	6859      	ldr	r1, [r3, #4]
 800bc98:	4864      	ldr	r0, [pc, #400]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bc9a:	687a      	ldr	r2, [r7, #4]
 800bc9c:	4613      	mov	r3, r2
 800bc9e:	00db      	lsls	r3, r3, #3
 800bca0:	4413      	add	r3, r2
 800bca2:	009b      	lsls	r3, r3, #2
 800bca4:	4403      	add	r3, r0
 800bca6:	3308      	adds	r3, #8
 800bca8:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].BitsPerSample  = AudioInit->BitsPerSample;
 800bcaa:	683b      	ldr	r3, [r7, #0]
 800bcac:	6899      	ldr	r1, [r3, #8]
 800bcae:	485f      	ldr	r0, [pc, #380]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bcb0:	687a      	ldr	r2, [r7, #4]
 800bcb2:	4613      	mov	r3, r2
 800bcb4:	00db      	lsls	r3, r3, #3
 800bcb6:	4413      	add	r3, r2
 800bcb8:	009b      	lsls	r3, r3, #2
 800bcba:	4403      	add	r3, r0
 800bcbc:	330c      	adds	r3, #12
 800bcbe:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].ChannelsNbr    = AudioInit->ChannelsNbr;
 800bcc0:	683b      	ldr	r3, [r7, #0]
 800bcc2:	68d9      	ldr	r1, [r3, #12]
 800bcc4:	4859      	ldr	r0, [pc, #356]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bcc6:	687a      	ldr	r2, [r7, #4]
 800bcc8:	4613      	mov	r3, r2
 800bcca:	00db      	lsls	r3, r3, #3
 800bccc:	4413      	add	r3, r2
 800bcce:	009b      	lsls	r3, r3, #2
 800bcd0:	4403      	add	r3, r0
 800bcd2:	3314      	adds	r3, #20
 800bcd4:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].Volume         = AudioInit->Volume;
 800bcd6:	683b      	ldr	r3, [r7, #0]
 800bcd8:	6919      	ldr	r1, [r3, #16]
 800bcda:	4854      	ldr	r0, [pc, #336]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bcdc:	687a      	ldr	r2, [r7, #4]
 800bcde:	4613      	mov	r3, r2
 800bce0:	00db      	lsls	r3, r3, #3
 800bce2:	4413      	add	r3, r2
 800bce4:	009b      	lsls	r3, r3, #2
 800bce6:	4403      	add	r3, r0
 800bce8:	3310      	adds	r3, #16
 800bcea:	6019      	str	r1, [r3, #0]
    Audio_Out_Ctx[Instance].State          = AUDIO_OUT_STATE_RESET;
 800bcec:	494f      	ldr	r1, [pc, #316]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800bcee:	687a      	ldr	r2, [r7, #4]
 800bcf0:	4613      	mov	r3, r2
 800bcf2:	00db      	lsls	r3, r3, #3
 800bcf4:	4413      	add	r3, r2
 800bcf6:	009b      	lsls	r3, r3, #2
 800bcf8:	440b      	add	r3, r1
 800bcfa:	331c      	adds	r3, #28
 800bcfc:	2200      	movs	r2, #0
 800bcfe:	601a      	str	r2, [r3, #0]

#if (USE_AUDIO_CODEC_WM8994 == 1)
    if(WM8994_Probe() != BSP_ERROR_NONE)
 800bd00:	f001 f8ee 	bl	800cee0 <WM8994_Probe>
 800bd04:	4603      	mov	r3, r0
 800bd06:	2b00      	cmp	r3, #0
 800bd08:	d002      	beq.n	800bd10 <BSP_AUDIO_OUT_Init+0xc0>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800bd0a:	f06f 0304 	mvn.w	r3, #4
 800bd0e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    }
#endif

    if(ret == BSP_ERROR_NONE)
 800bd10:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	f040 8085 	bne.w	800be22 <BSP_AUDIO_OUT_Init+0x1d2>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_out_sai, AudioInit->SampleRate) != HAL_OK)
 800bd18:	683b      	ldr	r3, [r7, #0]
 800bd1a:	685b      	ldr	r3, [r3, #4]
 800bd1c:	4619      	mov	r1, r3
 800bd1e:	4844      	ldr	r0, [pc, #272]	@ (800be30 <BSP_AUDIO_OUT_Init+0x1e0>)
 800bd20:	f000 f95d 	bl	800bfde <MX_SAI1_ClockConfig>
 800bd24:	4603      	mov	r3, r0
 800bd26:	2b00      	cmp	r3, #0
 800bd28:	d003      	beq.n	800bd32 <BSP_AUDIO_OUT_Init+0xe2>
      {
        ret = BSP_ERROR_CLOCK_FAILURE;
 800bd2a:	f06f 0308 	mvn.w	r3, #8
 800bd2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bd30:	e077      	b.n	800be22 <BSP_AUDIO_OUT_Init+0x1d2>
      }
      else
      {
        /* SAI data transfer preparation:
        Prepare the Media to be used for the audio transfer from memory to SAI peripheral */
        haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800bd32:	4b3f      	ldr	r3, [pc, #252]	@ (800be30 <BSP_AUDIO_OUT_Init+0x1e0>)
 800bd34:	4a3f      	ldr	r2, [pc, #252]	@ (800be34 <BSP_AUDIO_OUT_Init+0x1e4>)
 800bd36:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
          }
        }
#else
        SAI_MspInit(&haudio_out_sai);
 800bd38:	483d      	ldr	r0, [pc, #244]	@ (800be30 <BSP_AUDIO_OUT_Init+0x1e0>)
 800bd3a:	f001 f92b 	bl	800cf94 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
        if(ret == BSP_ERROR_NONE)
 800bd3e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d16e      	bne.n	800be22 <BSP_AUDIO_OUT_Init+0x1d2>
	{
          MX_SAI_Config_t mx_sai_config;

          /* Prepare haudio_out_sai handle */
          mx_sai_config.AudioFrequency    = AudioInit->SampleRate;
 800bd44:	683b      	ldr	r3, [r7, #0]
 800bd46:	685b      	ldr	r3, [r3, #4]
 800bd48:	60fb      	str	r3, [r7, #12]
          mx_sai_config.AudioMode         = SAI_MODEMASTER_TX;
 800bd4a:	2300      	movs	r3, #0
 800bd4c:	613b      	str	r3, [r7, #16]
          mx_sai_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800bd4e:	2301      	movs	r3, #1
 800bd50:	61fb      	str	r3, [r7, #28]
          mx_sai_config.MonoStereoMode    = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800bd52:	683b      	ldr	r3, [r7, #0]
 800bd54:	68db      	ldr	r3, [r3, #12]
 800bd56:	2b01      	cmp	r3, #1
 800bd58:	d102      	bne.n	800bd60 <BSP_AUDIO_OUT_Init+0x110>
 800bd5a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800bd5e:	e000      	b.n	800bd62 <BSP_AUDIO_OUT_Init+0x112>
 800bd60:	2300      	movs	r3, #0
 800bd62:	61bb      	str	r3, [r7, #24]
          mx_sai_config.DataSize          = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? SAI_DATASIZE_32 : SAI_DATASIZE_16;
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	689b      	ldr	r3, [r3, #8]
 800bd68:	2b20      	cmp	r3, #32
 800bd6a:	d101      	bne.n	800bd70 <BSP_AUDIO_OUT_Init+0x120>
 800bd6c:	23e0      	movs	r3, #224	@ 0xe0
 800bd6e:	e000      	b.n	800bd72 <BSP_AUDIO_OUT_Init+0x122>
 800bd70:	2380      	movs	r3, #128	@ 0x80
 800bd72:	617b      	str	r3, [r7, #20]
          mx_sai_config.FrameLength       = 128;
 800bd74:	2380      	movs	r3, #128	@ 0x80
 800bd76:	62fb      	str	r3, [r7, #44]	@ 0x2c
          mx_sai_config.ActiveFrameLength = 64;
 800bd78:	2340      	movs	r3, #64	@ 0x40
 800bd7a:	633b      	str	r3, [r7, #48]	@ 0x30
          mx_sai_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800bd7c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800bd80:	627b      	str	r3, [r7, #36]	@ 0x24
          mx_sai_config.Synchro           = SAI_ASYNCHRONOUS;
 800bd82:	2300      	movs	r3, #0
 800bd84:	623b      	str	r3, [r7, #32]
          mx_sai_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800bd86:	2300      	movs	r3, #0
 800bd88:	62bb      	str	r3, [r7, #40]	@ 0x28
          mx_sai_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_02;
 800bd8a:	2305      	movs	r3, #5
 800bd8c:	637b      	str	r3, [r7, #52]	@ 0x34

          /* SAI peripheral initialization: this __weak function can be redefined by the application  */
          if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_sai_config) != HAL_OK)
 800bd8e:	f107 030c 	add.w	r3, r7, #12
 800bd92:	4619      	mov	r1, r3
 800bd94:	4826      	ldr	r0, [pc, #152]	@ (800be30 <BSP_AUDIO_OUT_Init+0x1e0>)
 800bd96:	f000 f899 	bl	800becc <MX_SAI1_Block_A_Init>
 800bd9a:	4603      	mov	r3, r0
 800bd9c:	2b00      	cmp	r3, #0
 800bd9e:	d003      	beq.n	800bda8 <BSP_AUDIO_OUT_Init+0x158>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800bda0:	f06f 0303 	mvn.w	r3, #3
 800bda4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800bda6:	e03c      	b.n	800be22 <BSP_AUDIO_OUT_Init+0x1d2>
#endif
          else
          {
#if (USE_AUDIO_CODEC_WM8994 == 1)
            WM8994_Init_t codec_init;
            codec_init.Resolution   = (AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B) ? 3 : 0;
 800bda8:	683b      	ldr	r3, [r7, #0]
 800bdaa:	689b      	ldr	r3, [r3, #8]
 800bdac:	2b20      	cmp	r3, #32
 800bdae:	d101      	bne.n	800bdb4 <BSP_AUDIO_OUT_Init+0x164>
 800bdb0:	2303      	movs	r3, #3
 800bdb2:	e000      	b.n	800bdb6 <BSP_AUDIO_OUT_Init+0x166>
 800bdb4:	2300      	movs	r3, #0
 800bdb6:	647b      	str	r3, [r7, #68]	@ 0x44
            /* Fill codec_init structure */
            codec_init.Frequency    = AudioInit->SampleRate;
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	685b      	ldr	r3, [r3, #4]
 800bdbc:	643b      	str	r3, [r7, #64]	@ 0x40
            codec_init.InputDevice  = WM8994_IN_NONE;
 800bdbe:	2300      	movs	r3, #0
 800bdc0:	63bb      	str	r3, [r7, #56]	@ 0x38
            codec_init.OutputDevice = AudioInit->Device;
 800bdc2:	683b      	ldr	r3, [r7, #0]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	63fb      	str	r3, [r7, #60]	@ 0x3c

            /* Convert volume before sending to the codec */
            codec_init.Volume       = VOLUME_OUT_CONVERT(AudioInit->Volume);
 800bdc8:	683b      	ldr	r3, [r7, #0]
 800bdca:	691b      	ldr	r3, [r3, #16]
 800bdcc:	2b64      	cmp	r3, #100	@ 0x64
 800bdce:	d80a      	bhi.n	800bde6 <BSP_AUDIO_OUT_Init+0x196>
 800bdd0:	683b      	ldr	r3, [r7, #0]
 800bdd2:	691a      	ldr	r2, [r3, #16]
 800bdd4:	4613      	mov	r3, r2
 800bdd6:	019b      	lsls	r3, r3, #6
 800bdd8:	1a9b      	subs	r3, r3, r2
 800bdda:	4a17      	ldr	r2, [pc, #92]	@ (800be38 <BSP_AUDIO_OUT_Init+0x1e8>)
 800bddc:	fba2 2303 	umull	r2, r3, r2, r3
 800bde0:	095b      	lsrs	r3, r3, #5
 800bde2:	b2db      	uxtb	r3, r3
 800bde4:	e000      	b.n	800bde8 <BSP_AUDIO_OUT_Init+0x198>
 800bde6:	233f      	movs	r3, #63	@ 0x3f
 800bde8:	64bb      	str	r3, [r7, #72]	@ 0x48

            /* Initialize the codec internal registers */
            if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800bdea:	4b14      	ldr	r3, [pc, #80]	@ (800be3c <BSP_AUDIO_OUT_Init+0x1ec>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	681b      	ldr	r3, [r3, #0]
 800bdf0:	4a13      	ldr	r2, [pc, #76]	@ (800be40 <BSP_AUDIO_OUT_Init+0x1f0>)
 800bdf2:	6812      	ldr	r2, [r2, #0]
 800bdf4:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 800bdf8:	4610      	mov	r0, r2
 800bdfa:	4798      	blx	r3
 800bdfc:	4603      	mov	r3, r0
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	d002      	beq.n	800be08 <BSP_AUDIO_OUT_Init+0x1b8>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 800be02:	f06f 0304 	mvn.w	r3, #4
 800be06:	64fb      	str	r3, [r7, #76]	@ 0x4c
            }
#endif
            if(ret == BSP_ERROR_NONE)
 800be08:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d109      	bne.n	800be22 <BSP_AUDIO_OUT_Init+0x1d2>
            {
              /* Update BSP AUDIO OUT state */
              Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800be0e:	4907      	ldr	r1, [pc, #28]	@ (800be2c <BSP_AUDIO_OUT_Init+0x1dc>)
 800be10:	687a      	ldr	r2, [r7, #4]
 800be12:	4613      	mov	r3, r2
 800be14:	00db      	lsls	r3, r3, #3
 800be16:	4413      	add	r3, r2
 800be18:	009b      	lsls	r3, r3, #2
 800be1a:	440b      	add	r3, r1
 800be1c:	331c      	adds	r3, #28
 800be1e:	2202      	movs	r2, #2
 800be20:	601a      	str	r2, [r3, #0]
	}
      }
    }
  }

  return ret;
 800be22:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
}
 800be24:	4618      	mov	r0, r3
 800be26:	3750      	adds	r7, #80	@ 0x50
 800be28:	46bd      	mov	sp, r7
 800be2a:	bd80      	pop	{r7, pc}
 800be2c:	2400785c 	.word	0x2400785c
 800be30:	2400772c 	.word	0x2400772c
 800be34:	40015804 	.word	0x40015804
 800be38:	51eb851f 	.word	0x51eb851f
 800be3c:	24007680 	.word	0x24007680
 800be40:	24007728 	.word	0x24007728

0800be44 <BSP_AUDIO_OUT_DeInit>:
  * @brief  De-initializes the audio out peripheral.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval None
  */
int32_t BSP_AUDIO_OUT_DeInit(uint32_t Instance)
{
 800be44:	b580      	push	{r7, lr}
 800be46:	b084      	sub	sp, #16
 800be48:	af00      	add	r7, sp, #0
 800be4a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800be4c:	2300      	movs	r3, #0
 800be4e:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800be50:	687b      	ldr	r3, [r7, #4]
 800be52:	2b01      	cmp	r3, #1
 800be54:	d903      	bls.n	800be5e <BSP_AUDIO_OUT_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800be56:	f06f 0301 	mvn.w	r3, #1
 800be5a:	60fb      	str	r3, [r7, #12]
 800be5c:	e027      	b.n	800beae <BSP_AUDIO_OUT_DeInit+0x6a>
  }
  else
  {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
    SAI_MspDeInit(&haudio_out_sai);
 800be5e:	4816      	ldr	r0, [pc, #88]	@ (800beb8 <BSP_AUDIO_OUT_DeInit+0x74>)
 800be60:	f001 fb36 	bl	800d4d0 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */
    /* Initialize the haudio_out_sai Instance parameter */
    haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800be64:	4b14      	ldr	r3, [pc, #80]	@ (800beb8 <BSP_AUDIO_OUT_DeInit+0x74>)
 800be66:	4a15      	ldr	r2, [pc, #84]	@ (800bebc <BSP_AUDIO_OUT_DeInit+0x78>)
 800be68:	601a      	str	r2, [r3, #0]
    /* Call the Media layer stop function */
    if(Audio_Drv->DeInit(Audio_CompObj) != 0)
 800be6a:	4b15      	ldr	r3, [pc, #84]	@ (800bec0 <BSP_AUDIO_OUT_DeInit+0x7c>)
 800be6c:	681b      	ldr	r3, [r3, #0]
 800be6e:	685b      	ldr	r3, [r3, #4]
 800be70:	4a14      	ldr	r2, [pc, #80]	@ (800bec4 <BSP_AUDIO_OUT_DeInit+0x80>)
 800be72:	6812      	ldr	r2, [r2, #0]
 800be74:	4610      	mov	r0, r2
 800be76:	4798      	blx	r3
 800be78:	4603      	mov	r3, r0
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d003      	beq.n	800be86 <BSP_AUDIO_OUT_DeInit+0x42>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800be7e:	f06f 0304 	mvn.w	r3, #4
 800be82:	60fb      	str	r3, [r7, #12]
 800be84:	e013      	b.n	800beae <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 800be86:	480c      	ldr	r0, [pc, #48]	@ (800beb8 <BSP_AUDIO_OUT_DeInit+0x74>)
 800be88:	f012 fad6 	bl	801e438 <HAL_SAI_DeInit>
 800be8c:	4603      	mov	r3, r0
 800be8e:	2b00      	cmp	r3, #0
 800be90:	d003      	beq.n	800be9a <BSP_AUDIO_OUT_DeInit+0x56>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800be92:	f06f 0303 	mvn.w	r3, #3
 800be96:	60fb      	str	r3, [r7, #12]
 800be98:	e009      	b.n	800beae <BSP_AUDIO_OUT_DeInit+0x6a>
    }
    else
    {
      /* Update BSP AUDIO OUT state */
      Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_RESET;
 800be9a:	490b      	ldr	r1, [pc, #44]	@ (800bec8 <BSP_AUDIO_OUT_DeInit+0x84>)
 800be9c:	687a      	ldr	r2, [r7, #4]
 800be9e:	4613      	mov	r3, r2
 800bea0:	00db      	lsls	r3, r3, #3
 800bea2:	4413      	add	r3, r2
 800bea4:	009b      	lsls	r3, r3, #2
 800bea6:	440b      	add	r3, r1
 800bea8:	331c      	adds	r3, #28
 800beaa:	2200      	movs	r2, #0
 800beac:	601a      	str	r2, [r3, #0]
    }
  }
  /* Return BSP status */
  return ret;
 800beae:	68fb      	ldr	r3, [r7, #12]
}
 800beb0:	4618      	mov	r0, r3
 800beb2:	3710      	adds	r7, #16
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	2400772c 	.word	0x2400772c
 800bebc:	40015804 	.word	0x40015804
 800bec0:	24007680 	.word	0x24007680
 800bec4:	24007728 	.word	0x24007728
 800bec8:	2400785c 	.word	0x2400785c

0800becc <MX_SAI1_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 800becc:	b580      	push	{r7, lr}
 800bece:	b084      	sub	sp, #16
 800bed0:	af00      	add	r7, sp, #0
 800bed2:	6078      	str	r0, [r7, #4]
 800bed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800beda:	687b      	ldr	r3, [r7, #4]
 800bedc:	681b      	ldr	r3, [r3, #0]
 800bede:	681a      	ldr	r2, [r3, #0]
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	681b      	ldr	r3, [r3, #0]
 800bee4:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800bee8:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_A */
  hsai->Init.MonoStereoMode       = MXConfig->MonoStereoMode;
 800beea:	683b      	ldr	r3, [r7, #0]
 800beec:	68da      	ldr	r2, [r3, #12]
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioFrequency       = MXConfig->AudioFrequency;
 800bef2:	683b      	ldr	r3, [r7, #0]
 800bef4:	681a      	ldr	r2, [r3, #0]
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	621a      	str	r2, [r3, #32]
  hsai->Init.AudioMode            = MXConfig->AudioMode;
 800befa:	683b      	ldr	r3, [r7, #0]
 800befc:	685a      	ldr	r2, [r3, #4]
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider            = SAI_MASTERDIVIDER_ENABLE;
 800bf02:	687b      	ldr	r3, [r7, #4]
 800bf04:	2200      	movs	r2, #0
 800bf06:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol             = SAI_FREE_PROTOCOL;
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2200      	movs	r2, #0
 800bf0c:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize             = MXConfig->DataSize;
 800bf0e:	683b      	ldr	r3, [r7, #0]
 800bf10:	689a      	ldr	r2, [r3, #8]
 800bf12:	687b      	ldr	r3, [r7, #4]
 800bf14:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit             = SAI_FIRSTBIT_MSB;
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	2200      	movs	r2, #0
 800bf1a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing        = MXConfig->ClockStrobing;
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	691a      	ldr	r2, [r3, #16]
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro              = MXConfig->Synchro;
 800bf24:	683b      	ldr	r3, [r7, #0]
 800bf26:	695a      	ldr	r2, [r3, #20]
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive          = MXConfig->OutputDrive;
 800bf2c:	683b      	ldr	r3, [r7, #0]
 800bf2e:	699a      	ldr	r2, [r3, #24]
 800bf30:	687b      	ldr	r3, [r7, #4]
 800bf32:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold        = SAI_FIFOTHRESHOLD_1QF;
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	2201      	movs	r2, #1
 800bf38:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt           = MXConfig->SynchroExt;
 800bf3a:	683b      	ldr	r3, [r7, #0]
 800bf3c:	69da      	ldr	r2, [r3, #28]
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode       = SAI_NOCOMPANDING;
 800bf42:	687b      	ldr	r3, [r7, #4]
 800bf44:	2200      	movs	r2, #0
 800bf46:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState             = SAI_OUTPUT_NOTRELEASED;
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	2200      	movs	r2, #0
 800bf4c:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv               = 0;
 800bf4e:	687b      	ldr	r3, [r7, #4]
 800bf50:	2200      	movs	r2, #0
 800bf52:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.MckOverSampling      = SAI_MCK_OVERSAMPLING_DISABLE;
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	2200      	movs	r2, #0
 800bf58:	629a      	str	r2, [r3, #40]	@ 0x28
  hsai->Init.MckOutput            = SAI_MCK_OUTPUT_DISABLE;
 800bf5a:	687b      	ldr	r3, [r7, #4]
 800bf5c:	2200      	movs	r2, #0
 800bf5e:	611a      	str	r2, [r3, #16]
  hsai->Init.PdmInit.Activation   = DISABLE;
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	2200      	movs	r2, #0
 800bf64:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.ClockEnable  = 0;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2200      	movs	r2, #0
 800bf6c:	641a      	str	r2, [r3, #64]	@ 0x40
  hsai->Init.PdmInit.MicPairsNbr  = 0;
 800bf6e:	687b      	ldr	r3, [r7, #4]
 800bf70:	2200      	movs	r2, #0
 800bf72:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800bf74:	683b      	ldr	r3, [r7, #0]
 800bf76:	6a1a      	ldr	r2, [r3, #32]
 800bf78:	687b      	ldr	r3, [r7, #4]
 800bf7a:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800bf7c:	683b      	ldr	r3, [r7, #0]
 800bf7e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800bf84:	687b      	ldr	r3, [r7, #4]
 800bf86:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800bf8a:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	2200      	movs	r2, #0
 800bf90:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800bf92:	687b      	ldr	r3, [r7, #4]
 800bf94:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800bf98:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800bfa0:	687b      	ldr	r3, [r7, #4]
 800bfa2:	2200      	movs	r2, #0
 800bfa4:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	2204      	movs	r2, #4
 800bfaa:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive         = MXConfig->SlotActive;
 800bfac:	683b      	ldr	r3, [r7, #0]
 800bfae:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800bfb0:	687b      	ldr	r3, [r7, #4]
 800bfb2:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800bfb4:	6878      	ldr	r0, [r7, #4]
 800bfb6:	f011 ff95 	bl	801dee4 <HAL_SAI_Init>
 800bfba:	4603      	mov	r3, r0
 800bfbc:	2b00      	cmp	r3, #0
 800bfbe:	d001      	beq.n	800bfc4 <MX_SAI1_Block_A_Init+0xf8>
  {
    ret = HAL_ERROR;
 800bfc0:	2301      	movs	r3, #1
 800bfc2:	73fb      	strb	r3, [r7, #15]
  }

  __HAL_SAI_ENABLE(hsai);
 800bfc4:	687b      	ldr	r3, [r7, #4]
 800bfc6:	681b      	ldr	r3, [r3, #0]
 800bfc8:	681a      	ldr	r2, [r3, #0]
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800bfd2:	601a      	str	r2, [r3, #0]

  return ret;
 800bfd4:	7bfb      	ldrb	r3, [r7, #15]
}
 800bfd6:	4618      	mov	r0, r3
 800bfd8:	3710      	adds	r7, #16
 800bfda:	46bd      	mov	sp, r7
 800bfdc:	bd80      	pop	{r7, pc}

0800bfde <MX_SAI1_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 800bfde:	b580      	push	{r7, lr}
 800bfe0:	b0b6      	sub	sp, #216	@ 0xd8
 800bfe2:	af00      	add	r7, sp, #0
 800bfe4:	6078      	str	r0, [r7, #4]
 800bfe6:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 800bfe8:	2300      	movs	r3, #0
 800bfea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800bfee:	f107 0308 	add.w	r3, r7, #8
 800bff2:	4618      	mov	r0, r3
 800bff4:	f010 fadc 	bl	801c5b0 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800bff8:	683b      	ldr	r3, [r7, #0]
 800bffa:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800bffe:	4293      	cmp	r3, r2
 800c000:	d009      	beq.n	800c016 <MX_SAI1_ClockConfig+0x38>
 800c002:	683b      	ldr	r3, [r7, #0]
 800c004:	f245 6222 	movw	r2, #22050	@ 0x5622
 800c008:	4293      	cmp	r3, r2
 800c00a:	d004      	beq.n	800c016 <MX_SAI1_ClockConfig+0x38>
 800c00c:	683b      	ldr	r3, [r7, #0]
 800c00e:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800c012:	4293      	cmp	r3, r2
 800c014:	d105      	bne.n	800c022 <MX_SAI1_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 800c016:	2326      	movs	r3, #38	@ 0x26
 800c018:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 800c01a:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800c01e:	617b      	str	r3, [r7, #20]
 800c020:	e004      	b.n	800c02c <MX_SAI1_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 800c022:	2307      	movs	r3, #7
 800c024:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800c026:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800c02a:	617b      	str	r3, [r7, #20]
  }
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI1;
 800c02c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800c030:	f04f 0300 	mov.w	r3, #0
 800c034:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLL2;
 800c038:	2301      	movs	r3, #1
 800c03a:	667b      	str	r3, [r7, #100]	@ 0x64
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 800c03c:	2301      	movs	r3, #1
 800c03e:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 800c040:	2301      	movs	r3, #1
 800c042:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800c044:	2319      	movs	r3, #25
 800c046:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800c048:	f107 0308 	add.w	r3, r7, #8
 800c04c:	4618      	mov	r0, r3
 800c04e:	f00f f865 	bl	801b11c <HAL_RCCEx_PeriphCLKConfig>
 800c052:	4603      	mov	r3, r0
 800c054:	2b00      	cmp	r3, #0
 800c056:	d002      	beq.n	800c05e <MX_SAI1_ClockConfig+0x80>
  {
    ret = HAL_ERROR;
 800c058:	2301      	movs	r3, #1
 800c05a:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 800c05e:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c062:	4618      	mov	r0, r3
 800c064:	37d8      	adds	r7, #216	@ 0xd8
 800c066:	46bd      	mov	sp, r7
 800c068:	bd80      	pop	{r7, pc}

0800c06a <MX_SAI4_ClockConfig>:
  * @note   This API is called by BSP_AUDIO_OUT_Init() and BSP_AUDIO_OUT_SetFrequency()
  *         Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_ClockConfig(SAI_HandleTypeDef *hsai, uint32_t SampleRate)
{
 800c06a:	b580      	push	{r7, lr}
 800c06c:	b0b6      	sub	sp, #216	@ 0xd8
 800c06e:	af00      	add	r7, sp, #0
 800c070:	6078      	str	r0, [r7, #4]
 800c072:	6039      	str	r1, [r7, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  HAL_StatusTypeDef ret = HAL_OK;
 800c074:	2300      	movs	r3, #0
 800c076:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  RCC_PeriphCLKInitTypeDef rcc_ex_clk_init_struct;
  HAL_RCCEx_GetPeriphCLKConfig(&rcc_ex_clk_init_struct);
 800c07a:	f107 0308 	add.w	r3, r7, #8
 800c07e:	4618      	mov	r0, r3
 800c080:	f010 fa96 	bl	801c5b0 <HAL_RCCEx_GetPeriphCLKConfig>

  /* Set the PLL configuration according to the audio frequency */
  if((SampleRate == AUDIO_FREQUENCY_11K) || (SampleRate == AUDIO_FREQUENCY_22K) || (SampleRate == AUDIO_FREQUENCY_44K))
 800c084:	683b      	ldr	r3, [r7, #0]
 800c086:	f642 3211 	movw	r2, #11025	@ 0x2b11
 800c08a:	4293      	cmp	r3, r2
 800c08c:	d009      	beq.n	800c0a2 <MX_SAI4_ClockConfig+0x38>
 800c08e:	683b      	ldr	r3, [r7, #0]
 800c090:	f245 6222 	movw	r2, #22050	@ 0x5622
 800c094:	4293      	cmp	r3, r2
 800c096:	d004      	beq.n	800c0a2 <MX_SAI4_ClockConfig+0x38>
 800c098:	683b      	ldr	r3, [r7, #0]
 800c09a:	f64a 4244 	movw	r2, #44100	@ 0xac44
 800c09e:	4293      	cmp	r3, r2
 800c0a0:	d105      	bne.n	800c0ae <MX_SAI4_ClockConfig+0x44>
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 38;
 800c0a2:	2326      	movs	r3, #38	@ 0x26
 800c0a4:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 429;
 800c0a6:	f240 13ad 	movw	r3, #429	@ 0x1ad
 800c0aa:	617b      	str	r3, [r7, #20]
 800c0ac:	e004      	b.n	800c0b8 <MX_SAI4_ClockConfig+0x4e>
  }
  else /* AUDIO_FREQUENCY_8K, AUDIO_FREQUENCY_16K, AUDIO_FREQUENCY_32K, AUDIO_FREQUENCY_48K, AUDIO_FREQUENCY_96K */
  {
    rcc_ex_clk_init_struct.PLL2.PLL2P = 7;
 800c0ae:	2307      	movs	r3, #7
 800c0b0:	61bb      	str	r3, [r7, #24]
    rcc_ex_clk_init_struct.PLL2.PLL2N = 344;
 800c0b2:	f44f 73ac 	mov.w	r3, #344	@ 0x158
 800c0b6:	617b      	str	r3, [r7, #20]
  }
  /* SAI clock config */
  rcc_ex_clk_init_struct.PeriphClockSelection = RCC_PERIPHCLK_SAI4A;
 800c0b8:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800c0bc:	f04f 0300 	mov.w	r3, #0
 800c0c0:	e9c7 2302 	strd	r2, r3, [r7, #8]
  rcc_ex_clk_init_struct.Sai4AClockSelection = RCC_SAI4ACLKSOURCE_PLL2;
 800c0c4:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 800c0c8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  rcc_ex_clk_init_struct.PLL2.PLL2Q = 1;
 800c0cc:	2301      	movs	r3, #1
 800c0ce:	61fb      	str	r3, [r7, #28]
  rcc_ex_clk_init_struct.PLL2.PLL2R = 1;
 800c0d0:	2301      	movs	r3, #1
 800c0d2:	623b      	str	r3, [r7, #32]
  rcc_ex_clk_init_struct.PLL2.PLL2M = 25;
 800c0d4:	2319      	movs	r3, #25
 800c0d6:	613b      	str	r3, [r7, #16]
  if(HAL_RCCEx_PeriphCLKConfig(&rcc_ex_clk_init_struct) != HAL_OK)
 800c0d8:	f107 0308 	add.w	r3, r7, #8
 800c0dc:	4618      	mov	r0, r3
 800c0de:	f00f f81d 	bl	801b11c <HAL_RCCEx_PeriphCLKConfig>
 800c0e2:	4603      	mov	r3, r0
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	d002      	beq.n	800c0ee <MX_SAI4_ClockConfig+0x84>
  {
    ret = HAL_ERROR;
 800c0e8:	2301      	movs	r3, #1
 800c0ea:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  return ret;
 800c0ee:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 800c0f2:	4618      	mov	r0, r3
 800c0f4:	37d8      	adds	r7, #216	@ 0xd8
 800c0f6:	46bd      	mov	sp, r7
 800c0f8:	bd80      	pop	{r7, pc}
	...

0800c0fc <BSP_AUDIO_OUT_Play>:
  * @param  NbrOfBytes   Size of total samples in bytes
  *                      BitsPerSample: 16 or 32
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Play(uint32_t Instance, uint8_t* pData, uint32_t NbrOfBytes)
{
 800c0fc:	b580      	push	{r7, lr}
 800c0fe:	b086      	sub	sp, #24
 800c100:	af00      	add	r7, sp, #0
 800c102:	60f8      	str	r0, [r7, #12]
 800c104:	60b9      	str	r1, [r7, #8]
 800c106:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c108:	2300      	movs	r3, #0
 800c10a:	617b      	str	r3, [r7, #20]

  if((Instance >= AUDIO_OUT_INSTANCES_NBR) || (((NbrOfBytes / (Audio_Out_Ctx[Instance].BitsPerSample/8U)) > 0xFFFFU)))
 800c10c:	68fb      	ldr	r3, [r7, #12]
 800c10e:	2b01      	cmp	r3, #1
 800c110:	d80f      	bhi.n	800c132 <BSP_AUDIO_OUT_Play+0x36>
 800c112:	4933      	ldr	r1, [pc, #204]	@ (800c1e0 <BSP_AUDIO_OUT_Play+0xe4>)
 800c114:	68fa      	ldr	r2, [r7, #12]
 800c116:	4613      	mov	r3, r2
 800c118:	00db      	lsls	r3, r3, #3
 800c11a:	4413      	add	r3, r2
 800c11c:	009b      	lsls	r3, r3, #2
 800c11e:	440b      	add	r3, r1
 800c120:	330c      	adds	r3, #12
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	08db      	lsrs	r3, r3, #3
 800c126:	687a      	ldr	r2, [r7, #4]
 800c128:	fbb2 f3f3 	udiv	r3, r2, r3
 800c12c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800c130:	d303      	bcc.n	800c13a <BSP_AUDIO_OUT_Play+0x3e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c132:	f06f 0301 	mvn.w	r3, #1
 800c136:	617b      	str	r3, [r7, #20]
 800c138:	e04d      	b.n	800c1d6 <BSP_AUDIO_OUT_Play+0xda>
  }
  else if((Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_STOP) || (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_RESET))
 800c13a:	4929      	ldr	r1, [pc, #164]	@ (800c1e0 <BSP_AUDIO_OUT_Play+0xe4>)
 800c13c:	68fa      	ldr	r2, [r7, #12]
 800c13e:	4613      	mov	r3, r2
 800c140:	00db      	lsls	r3, r3, #3
 800c142:	4413      	add	r3, r2
 800c144:	009b      	lsls	r3, r3, #2
 800c146:	440b      	add	r3, r1
 800c148:	331c      	adds	r3, #28
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	2b02      	cmp	r3, #2
 800c14e:	d00a      	beq.n	800c166 <BSP_AUDIO_OUT_Play+0x6a>
 800c150:	4923      	ldr	r1, [pc, #140]	@ (800c1e0 <BSP_AUDIO_OUT_Play+0xe4>)
 800c152:	68fa      	ldr	r2, [r7, #12]
 800c154:	4613      	mov	r3, r2
 800c156:	00db      	lsls	r3, r3, #3
 800c158:	4413      	add	r3, r2
 800c15a:	009b      	lsls	r3, r3, #2
 800c15c:	440b      	add	r3, r1
 800c15e:	331c      	adds	r3, #28
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	2b00      	cmp	r3, #0
 800c164:	d134      	bne.n	800c1d0 <BSP_AUDIO_OUT_Play+0xd4>
  {
    if(HAL_SAI_Transmit_DMA(&haudio_out_sai, pData, (uint16_t)(NbrOfBytes /(Audio_Out_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800c166:	491e      	ldr	r1, [pc, #120]	@ (800c1e0 <BSP_AUDIO_OUT_Play+0xe4>)
 800c168:	68fa      	ldr	r2, [r7, #12]
 800c16a:	4613      	mov	r3, r2
 800c16c:	00db      	lsls	r3, r3, #3
 800c16e:	4413      	add	r3, r2
 800c170:	009b      	lsls	r3, r3, #2
 800c172:	440b      	add	r3, r1
 800c174:	330c      	adds	r3, #12
 800c176:	681b      	ldr	r3, [r3, #0]
 800c178:	08db      	lsrs	r3, r3, #3
 800c17a:	687a      	ldr	r2, [r7, #4]
 800c17c:	fbb2 f3f3 	udiv	r3, r2, r3
 800c180:	b29b      	uxth	r3, r3
 800c182:	461a      	mov	r2, r3
 800c184:	68b9      	ldr	r1, [r7, #8]
 800c186:	4817      	ldr	r0, [pc, #92]	@ (800c1e4 <BSP_AUDIO_OUT_Play+0xe8>)
 800c188:	f012 faa2 	bl	801e6d0 <HAL_SAI_Transmit_DMA>
 800c18c:	4603      	mov	r3, r0
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d002      	beq.n	800c198 <BSP_AUDIO_OUT_Play+0x9c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c192:	f06f 0303 	mvn.w	r3, #3
 800c196:	617b      	str	r3, [r7, #20]
    }
    if(ret == BSP_ERROR_NONE)
 800c198:	697b      	ldr	r3, [r7, #20]
 800c19a:	2b00      	cmp	r3, #0
 800c19c:	d11b      	bne.n	800c1d6 <BSP_AUDIO_OUT_Play+0xda>
    {
      if(Audio_Drv->Play(Audio_CompObj) != BSP_ERROR_NONE)
 800c19e:	4b12      	ldr	r3, [pc, #72]	@ (800c1e8 <BSP_AUDIO_OUT_Play+0xec>)
 800c1a0:	681b      	ldr	r3, [r3, #0]
 800c1a2:	68db      	ldr	r3, [r3, #12]
 800c1a4:	4a11      	ldr	r2, [pc, #68]	@ (800c1ec <BSP_AUDIO_OUT_Play+0xf0>)
 800c1a6:	6812      	ldr	r2, [r2, #0]
 800c1a8:	4610      	mov	r0, r2
 800c1aa:	4798      	blx	r3
 800c1ac:	4603      	mov	r3, r0
 800c1ae:	2b00      	cmp	r3, #0
 800c1b0:	d003      	beq.n	800c1ba <BSP_AUDIO_OUT_Play+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c1b2:	f06f 0304 	mvn.w	r3, #4
 800c1b6:	617b      	str	r3, [r7, #20]
    if(ret == BSP_ERROR_NONE)
 800c1b8:	e00d      	b.n	800c1d6 <BSP_AUDIO_OUT_Play+0xda>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 800c1ba:	4909      	ldr	r1, [pc, #36]	@ (800c1e0 <BSP_AUDIO_OUT_Play+0xe4>)
 800c1bc:	68fa      	ldr	r2, [r7, #12]
 800c1be:	4613      	mov	r3, r2
 800c1c0:	00db      	lsls	r3, r3, #3
 800c1c2:	4413      	add	r3, r2
 800c1c4:	009b      	lsls	r3, r3, #2
 800c1c6:	440b      	add	r3, r1
 800c1c8:	331c      	adds	r3, #28
 800c1ca:	2201      	movs	r2, #1
 800c1cc:	601a      	str	r2, [r3, #0]
    if(ret == BSP_ERROR_NONE)
 800c1ce:	e002      	b.n	800c1d6 <BSP_AUDIO_OUT_Play+0xda>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 800c1d0:	f06f 0302 	mvn.w	r3, #2
 800c1d4:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 800c1d6:	697b      	ldr	r3, [r7, #20]
}
 800c1d8:	4618      	mov	r0, r3
 800c1da:	3718      	adds	r7, #24
 800c1dc:	46bd      	mov	sp, r7
 800c1de:	bd80      	pop	{r7, pc}
 800c1e0:	2400785c 	.word	0x2400785c
 800c1e4:	2400772c 	.word	0x2400772c
 800c1e8:	24007680 	.word	0x24007680
 800c1ec:	24007728 	.word	0x24007728

0800c1f0 <BSP_AUDIO_OUT_Pause>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
  *          function for resume could lead to unexpected behavior).
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Pause(uint32_t Instance)
{
 800c1f0:	b580      	push	{r7, lr}
 800c1f2:	b084      	sub	sp, #16
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c1f8:	2300      	movs	r3, #0
 800c1fa:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800c1fc:	687b      	ldr	r3, [r7, #4]
 800c1fe:	2b01      	cmp	r3, #1
 800c200:	d903      	bls.n	800c20a <BSP_AUDIO_OUT_Pause+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c202:	f06f 0301 	mvn.w	r3, #1
 800c206:	60fb      	str	r3, [r7, #12]
 800c208:	e023      	b.n	800c252 <BSP_AUDIO_OUT_Pause+0x62>
  }
  else
  {
    /* Call the Media layer pause function */
    if(HAL_SAI_DMAPause(&haudio_out_sai) != HAL_OK)
 800c20a:	4814      	ldr	r0, [pc, #80]	@ (800c25c <BSP_AUDIO_OUT_Pause+0x6c>)
 800c20c:	f012 f98e 	bl	801e52c <HAL_SAI_DMAPause>
 800c210:	4603      	mov	r3, r0
 800c212:	2b00      	cmp	r3, #0
 800c214:	d002      	beq.n	800c21c <BSP_AUDIO_OUT_Pause+0x2c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c216:	f06f 0303 	mvn.w	r3, #3
 800c21a:	60fb      	str	r3, [r7, #12]
    }

    if(ret == BSP_ERROR_NONE)
 800c21c:	68fb      	ldr	r3, [r7, #12]
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d117      	bne.n	800c252 <BSP_AUDIO_OUT_Pause+0x62>
    {
      /* Call the Audio Codec Pause/Resume function */
      if(Audio_Drv->Pause(Audio_CompObj) != BSP_ERROR_NONE)
 800c222:	4b0f      	ldr	r3, [pc, #60]	@ (800c260 <BSP_AUDIO_OUT_Pause+0x70>)
 800c224:	681b      	ldr	r3, [r3, #0]
 800c226:	691b      	ldr	r3, [r3, #16]
 800c228:	4a0e      	ldr	r2, [pc, #56]	@ (800c264 <BSP_AUDIO_OUT_Pause+0x74>)
 800c22a:	6812      	ldr	r2, [r2, #0]
 800c22c:	4610      	mov	r0, r2
 800c22e:	4798      	blx	r3
 800c230:	4603      	mov	r3, r0
 800c232:	2b00      	cmp	r3, #0
 800c234:	d003      	beq.n	800c23e <BSP_AUDIO_OUT_Pause+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c236:	f06f 0304 	mvn.w	r3, #4
 800c23a:	60fb      	str	r3, [r7, #12]
 800c23c:	e009      	b.n	800c252 <BSP_AUDIO_OUT_Pause+0x62>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PAUSE;
 800c23e:	490a      	ldr	r1, [pc, #40]	@ (800c268 <BSP_AUDIO_OUT_Pause+0x78>)
 800c240:	687a      	ldr	r2, [r7, #4]
 800c242:	4613      	mov	r3, r2
 800c244:	00db      	lsls	r3, r3, #3
 800c246:	4413      	add	r3, r2
 800c248:	009b      	lsls	r3, r3, #2
 800c24a:	440b      	add	r3, r1
 800c24c:	331c      	adds	r3, #28
 800c24e:	2203      	movs	r2, #3
 800c250:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c252:	68fb      	ldr	r3, [r7, #12]
}
 800c254:	4618      	mov	r0, r3
 800c256:	3710      	adds	r7, #16
 800c258:	46bd      	mov	sp, r7
 800c25a:	bd80      	pop	{r7, pc}
 800c25c:	2400772c 	.word	0x2400772c
 800c260:	24007680 	.word	0x24007680
 800c264:	24007728 	.word	0x24007728
 800c268:	2400785c 	.word	0x2400785c

0800c26c <BSP_AUDIO_OUT_Resume>:
  *          BSP_AUDIO_OUT_Resume() function should be called for resume (use of BSP_AUDIO_OUT_Play()
  *          function for resume could lead to unexpected behavior).
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Resume(uint32_t Instance)
{
 800c26c:	b580      	push	{r7, lr}
 800c26e:	b084      	sub	sp, #16
 800c270:	af00      	add	r7, sp, #0
 800c272:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c274:	2300      	movs	r3, #0
 800c276:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	2b01      	cmp	r3, #1
 800c27c:	d903      	bls.n	800c286 <BSP_AUDIO_OUT_Resume+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c27e:	f06f 0301 	mvn.w	r3, #1
 800c282:	60fb      	str	r3, [r7, #12]
 800c284:	e023      	b.n	800c2ce <BSP_AUDIO_OUT_Resume+0x62>
  }
  else
  {
    /* Call the Media layer pause/resume function */
    if(HAL_SAI_DMAResume(&haudio_out_sai) != HAL_OK)
 800c286:	4814      	ldr	r0, [pc, #80]	@ (800c2d8 <BSP_AUDIO_OUT_Resume+0x6c>)
 800c288:	f012 f972 	bl	801e570 <HAL_SAI_DMAResume>
 800c28c:	4603      	mov	r3, r0
 800c28e:	2b00      	cmp	r3, #0
 800c290:	d002      	beq.n	800c298 <BSP_AUDIO_OUT_Resume+0x2c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800c292:	f06f 0303 	mvn.w	r3, #3
 800c296:	60fb      	str	r3, [r7, #12]
    }

    if(ret == BSP_ERROR_NONE)
 800c298:	68fb      	ldr	r3, [r7, #12]
 800c29a:	2b00      	cmp	r3, #0
 800c29c:	d117      	bne.n	800c2ce <BSP_AUDIO_OUT_Resume+0x62>
    {
      if(Audio_Drv->Resume(Audio_CompObj) != BSP_ERROR_NONE)
 800c29e:	4b0f      	ldr	r3, [pc, #60]	@ (800c2dc <BSP_AUDIO_OUT_Resume+0x70>)
 800c2a0:	681b      	ldr	r3, [r3, #0]
 800c2a2:	695b      	ldr	r3, [r3, #20]
 800c2a4:	4a0e      	ldr	r2, [pc, #56]	@ (800c2e0 <BSP_AUDIO_OUT_Resume+0x74>)
 800c2a6:	6812      	ldr	r2, [r2, #0]
 800c2a8:	4610      	mov	r0, r2
 800c2aa:	4798      	blx	r3
 800c2ac:	4603      	mov	r3, r0
 800c2ae:	2b00      	cmp	r3, #0
 800c2b0:	d003      	beq.n	800c2ba <BSP_AUDIO_OUT_Resume+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c2b2:	f06f 0304 	mvn.w	r3, #4
 800c2b6:	60fb      	str	r3, [r7, #12]
 800c2b8:	e009      	b.n	800c2ce <BSP_AUDIO_OUT_Resume+0x62>
      }
      else
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_PLAYING;
 800c2ba:	490a      	ldr	r1, [pc, #40]	@ (800c2e4 <BSP_AUDIO_OUT_Resume+0x78>)
 800c2bc:	687a      	ldr	r2, [r7, #4]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	00db      	lsls	r3, r3, #3
 800c2c2:	4413      	add	r3, r2
 800c2c4:	009b      	lsls	r3, r3, #2
 800c2c6:	440b      	add	r3, r1
 800c2c8:	331c      	adds	r3, #28
 800c2ca:	2201      	movs	r2, #1
 800c2cc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 800c2ce:	68fb      	ldr	r3, [r7, #12]
}
 800c2d0:	4618      	mov	r0, r3
 800c2d2:	3710      	adds	r7, #16
 800c2d4:	46bd      	mov	sp, r7
 800c2d6:	bd80      	pop	{r7, pc}
 800c2d8:	2400772c 	.word	0x2400772c
 800c2dc:	24007680 	.word	0x24007680
 800c2e0:	24007728 	.word	0x24007728
 800c2e4:	2400785c 	.word	0x2400785c

0800c2e8 <BSP_AUDIO_OUT_Stop>:
  * @brief  Stops audio playing and Power down the Audio Codec.
  * @param  Instance : AUDIO OUT Instance. It can only be 0 (SAI)
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_Stop(uint32_t Instance)
{
 800c2e8:	b580      	push	{r7, lr}
 800c2ea:	b084      	sub	sp, #16
 800c2ec:	af00      	add	r7, sp, #0
 800c2ee:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c2f0:	2300      	movs	r3, #0
 800c2f2:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800c2f4:	687b      	ldr	r3, [r7, #4]
 800c2f6:	2b01      	cmp	r3, #1
 800c2f8:	d903      	bls.n	800c302 <BSP_AUDIO_OUT_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c2fa:	f06f 0301 	mvn.w	r3, #1
 800c2fe:	60fb      	str	r3, [r7, #12]
 800c300:	e033      	b.n	800c36a <BSP_AUDIO_OUT_Stop+0x82>
  }
  else if (Audio_Out_Ctx[Instance].State == AUDIO_OUT_STATE_PLAYING)
 800c302:	491c      	ldr	r1, [pc, #112]	@ (800c374 <BSP_AUDIO_OUT_Stop+0x8c>)
 800c304:	687a      	ldr	r2, [r7, #4]
 800c306:	4613      	mov	r3, r2
 800c308:	00db      	lsls	r3, r3, #3
 800c30a:	4413      	add	r3, r2
 800c30c:	009b      	lsls	r3, r3, #2
 800c30e:	440b      	add	r3, r1
 800c310:	331c      	adds	r3, #28
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	2b01      	cmp	r3, #1
 800c316:	d125      	bne.n	800c364 <BSP_AUDIO_OUT_Stop+0x7c>
  {
    /* Call the Media layer stop function */
    if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 800c318:	4b17      	ldr	r3, [pc, #92]	@ (800c378 <BSP_AUDIO_OUT_Stop+0x90>)
 800c31a:	681b      	ldr	r3, [r3, #0]
 800c31c:	699b      	ldr	r3, [r3, #24]
 800c31e:	4a17      	ldr	r2, [pc, #92]	@ (800c37c <BSP_AUDIO_OUT_Stop+0x94>)
 800c320:	6812      	ldr	r2, [r2, #0]
 800c322:	2101      	movs	r1, #1
 800c324:	4610      	mov	r0, r2
 800c326:	4798      	blx	r3
 800c328:	4603      	mov	r3, r0
 800c32a:	2b00      	cmp	r3, #0
 800c32c:	d003      	beq.n	800c336 <BSP_AUDIO_OUT_Stop+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c32e:	f06f 0304 	mvn.w	r3, #4
 800c332:	60fb      	str	r3, [r7, #12]
 800c334:	e019      	b.n	800c36a <BSP_AUDIO_OUT_Stop+0x82>
    }
    else
    {
      if(HAL_SAI_DMAStop(&haudio_out_sai)!= HAL_OK)
 800c336:	4812      	ldr	r0, [pc, #72]	@ (800c380 <BSP_AUDIO_OUT_Stop+0x98>)
 800c338:	f012 f94b 	bl	801e5d2 <HAL_SAI_DMAStop>
 800c33c:	4603      	mov	r3, r0
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d002      	beq.n	800c348 <BSP_AUDIO_OUT_Stop+0x60>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c342:	f06f 0303 	mvn.w	r3, #3
 800c346:	60fb      	str	r3, [r7, #12]
      }

      if( ret==BSP_ERROR_NONE)
 800c348:	68fb      	ldr	r3, [r7, #12]
 800c34a:	2b00      	cmp	r3, #0
 800c34c:	d10d      	bne.n	800c36a <BSP_AUDIO_OUT_Stop+0x82>
      {
        /* Update BSP AUDIO OUT state */
        Audio_Out_Ctx[Instance].State = AUDIO_OUT_STATE_STOP;
 800c34e:	4909      	ldr	r1, [pc, #36]	@ (800c374 <BSP_AUDIO_OUT_Stop+0x8c>)
 800c350:	687a      	ldr	r2, [r7, #4]
 800c352:	4613      	mov	r3, r2
 800c354:	00db      	lsls	r3, r3, #3
 800c356:	4413      	add	r3, r2
 800c358:	009b      	lsls	r3, r3, #2
 800c35a:	440b      	add	r3, r1
 800c35c:	331c      	adds	r3, #28
 800c35e:	2202      	movs	r2, #2
 800c360:	601a      	str	r2, [r3, #0]
 800c362:	e002      	b.n	800c36a <BSP_AUDIO_OUT_Stop+0x82>
      }
    }
  }
  else
  {
    ret = BSP_ERROR_BUSY;
 800c364:	f06f 0302 	mvn.w	r3, #2
 800c368:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800c36a:	68fb      	ldr	r3, [r7, #12]
}
 800c36c:	4618      	mov	r0, r3
 800c36e:	3710      	adds	r7, #16
 800c370:	46bd      	mov	sp, r7
 800c372:	bd80      	pop	{r7, pc}
 800c374:	2400785c 	.word	0x2400785c
 800c378:	24007680 	.word	0x24007680
 800c37c:	24007728 	.word	0x24007728
 800c380:	2400772c 	.word	0x2400772c

0800c384 <BSP_AUDIO_OUT_SetVolume>:
  * @param  Volume    Volume level to be set in percentage from 0% to 100% (0 for
  *         Mute and 100 for Max volume level).
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetVolume(uint32_t Instance, uint32_t Volume)
{
 800c384:	b590      	push	{r4, r7, lr}
 800c386:	b085      	sub	sp, #20
 800c388:	af00      	add	r7, sp, #0
 800c38a:	6078      	str	r0, [r7, #4]
 800c38c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c38e:	2300      	movs	r3, #0
 800c390:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_OUT_INSTANCES_NBR)
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	2b01      	cmp	r3, #1
 800c396:	d903      	bls.n	800c3a0 <BSP_AUDIO_OUT_SetVolume+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c398:	f06f 0301 	mvn.w	r3, #1
 800c39c:	60fb      	str	r3, [r7, #12]
 800c39e:	e03e      	b.n	800c41e <BSP_AUDIO_OUT_SetVolume+0x9a>
  }
  else
  {
    /* Call the codec volume control function with converted volume value */
    if(Audio_Drv->SetVolume(Audio_CompObj, AUDIO_VOLUME_OUTPUT, VOLUME_OUT_CONVERT(Volume)) != BSP_ERROR_NONE)
 800c3a0:	4b21      	ldr	r3, [pc, #132]	@ (800c428 <BSP_AUDIO_OUT_SetVolume+0xa4>)
 800c3a2:	681b      	ldr	r3, [r3, #0]
 800c3a4:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 800c3a6:	4b21      	ldr	r3, [pc, #132]	@ (800c42c <BSP_AUDIO_OUT_SetVolume+0xa8>)
 800c3a8:	6818      	ldr	r0, [r3, #0]
 800c3aa:	683b      	ldr	r3, [r7, #0]
 800c3ac:	2b64      	cmp	r3, #100	@ 0x64
 800c3ae:	d809      	bhi.n	800c3c4 <BSP_AUDIO_OUT_SetVolume+0x40>
 800c3b0:	683a      	ldr	r2, [r7, #0]
 800c3b2:	4613      	mov	r3, r2
 800c3b4:	019b      	lsls	r3, r3, #6
 800c3b6:	1a9b      	subs	r3, r3, r2
 800c3b8:	4a1d      	ldr	r2, [pc, #116]	@ (800c430 <BSP_AUDIO_OUT_SetVolume+0xac>)
 800c3ba:	fba2 2303 	umull	r2, r3, r2, r3
 800c3be:	095b      	lsrs	r3, r3, #5
 800c3c0:	b2db      	uxtb	r3, r3
 800c3c2:	e000      	b.n	800c3c6 <BSP_AUDIO_OUT_SetVolume+0x42>
 800c3c4:	233f      	movs	r3, #63	@ 0x3f
 800c3c6:	461a      	mov	r2, r3
 800c3c8:	2101      	movs	r1, #1
 800c3ca:	47a0      	blx	r4
 800c3cc:	4603      	mov	r3, r0
 800c3ce:	2b00      	cmp	r3, #0
 800c3d0:	d003      	beq.n	800c3da <BSP_AUDIO_OUT_SetVolume+0x56>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800c3d2:	f06f 0304 	mvn.w	r3, #4
 800c3d6:	60fb      	str	r3, [r7, #12]
 800c3d8:	e017      	b.n	800c40a <BSP_AUDIO_OUT_SetVolume+0x86>
    }
    else if(Volume == 0U)
 800c3da:	683b      	ldr	r3, [r7, #0]
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d10a      	bne.n	800c3f6 <BSP_AUDIO_OUT_SetVolume+0x72>
    {
      /* Update Mute State */
      Audio_Out_Ctx[Instance].IsMute = BSP_AUDIO_MUTE_ENABLED;
 800c3e0:	4914      	ldr	r1, [pc, #80]	@ (800c434 <BSP_AUDIO_OUT_SetVolume+0xb0>)
 800c3e2:	687a      	ldr	r2, [r7, #4]
 800c3e4:	4613      	mov	r3, r2
 800c3e6:	00db      	lsls	r3, r3, #3
 800c3e8:	4413      	add	r3, r2
 800c3ea:	009b      	lsls	r3, r3, #2
 800c3ec:	440b      	add	r3, r1
 800c3ee:	3318      	adds	r3, #24
 800c3f0:	2201      	movs	r2, #1
 800c3f2:	601a      	str	r2, [r3, #0]
 800c3f4:	e009      	b.n	800c40a <BSP_AUDIO_OUT_SetVolume+0x86>
    }
    else
    {
      /* Update Mute State */
      Audio_Out_Ctx[Instance].IsMute = BSP_AUDIO_MUTE_DISABLED;
 800c3f6:	490f      	ldr	r1, [pc, #60]	@ (800c434 <BSP_AUDIO_OUT_SetVolume+0xb0>)
 800c3f8:	687a      	ldr	r2, [r7, #4]
 800c3fa:	4613      	mov	r3, r2
 800c3fc:	00db      	lsls	r3, r3, #3
 800c3fe:	4413      	add	r3, r2
 800c400:	009b      	lsls	r3, r3, #2
 800c402:	440b      	add	r3, r1
 800c404:	3318      	adds	r3, #24
 800c406:	2200      	movs	r2, #0
 800c408:	601a      	str	r2, [r3, #0]
    }
   Audio_Out_Ctx[Instance].Volume = Volume;
 800c40a:	490a      	ldr	r1, [pc, #40]	@ (800c434 <BSP_AUDIO_OUT_SetVolume+0xb0>)
 800c40c:	687a      	ldr	r2, [r7, #4]
 800c40e:	4613      	mov	r3, r2
 800c410:	00db      	lsls	r3, r3, #3
 800c412:	4413      	add	r3, r2
 800c414:	009b      	lsls	r3, r3, #2
 800c416:	440b      	add	r3, r1
 800c418:	3310      	adds	r3, #16
 800c41a:	683a      	ldr	r2, [r7, #0]
 800c41c:	601a      	str	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 800c41e:	68fb      	ldr	r3, [r7, #12]
}
 800c420:	4618      	mov	r0, r3
 800c422:	3714      	adds	r7, #20
 800c424:	46bd      	mov	sp, r7
 800c426:	bd90      	pop	{r4, r7, pc}
 800c428:	24007680 	.word	0x24007680
 800c42c:	24007728 	.word	0x24007728
 800c430:	51eb851f 	.word	0x51eb851f
 800c434:	2400785c 	.word	0x2400785c

0800c438 <BSP_AUDIO_OUT_SetDevice>:
  * @param  Instance AUDIO OUT Instance. It can only be 0 (SAI) or 1 (I2S)
  * @param  Device  The audio output device
  * @retval BSP status
  */
int32_t BSP_AUDIO_OUT_SetDevice(uint32_t Instance, uint32_t Device)
{
 800c438:	b480      	push	{r7}
 800c43a:	b085      	sub	sp, #20
 800c43c:	af00      	add	r7, sp, #0
 800c43e:	6078      	str	r0, [r7, #4]
 800c440:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800c442:	2300      	movs	r3, #0
 800c444:	60fb      	str	r3, [r7, #12]

  UNUSED(Device);

  if (Instance >= AUDIO_OUT_INSTANCES_NBR)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	2b01      	cmp	r3, #1
 800c44a:	d903      	bls.n	800c454 <BSP_AUDIO_OUT_SetDevice+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c44c:	f06f 0301 	mvn.w	r3, #1
 800c450:	60fb      	str	r3, [r7, #12]
 800c452:	e00d      	b.n	800c470 <BSP_AUDIO_OUT_SetDevice+0x38>
  }
  /* Check audio out state */
  else if (Audio_Out_Ctx[Instance].State != AUDIO_OUT_STATE_STOP)
 800c454:	490a      	ldr	r1, [pc, #40]	@ (800c480 <BSP_AUDIO_OUT_SetDevice+0x48>)
 800c456:	687a      	ldr	r2, [r7, #4]
 800c458:	4613      	mov	r3, r2
 800c45a:	00db      	lsls	r3, r3, #3
 800c45c:	4413      	add	r3, r2
 800c45e:	009b      	lsls	r3, r3, #2
 800c460:	440b      	add	r3, r1
 800c462:	331c      	adds	r3, #28
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	2b02      	cmp	r3, #2
 800c468:	d002      	beq.n	800c470 <BSP_AUDIO_OUT_SetDevice+0x38>
  {
    ret = BSP_ERROR_BUSY;
 800c46a:	f06f 0302 	mvn.w	r3, #2
 800c46e:	60fb      	str	r3, [r7, #12]
  {
    /* Nothing to do because there is only one device (AUDIO_OUT_DEVICE_HEADPHONE) */
  }

  /* Return BSP status */
  return ret;
 800c470:	68fb      	ldr	r3, [r7, #12]
}
 800c472:	4618      	mov	r0, r3
 800c474:	3714      	adds	r7, #20
 800c476:	46bd      	mov	sp, r7
 800c478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c47c:	4770      	bx	lr
 800c47e:	bf00      	nop
 800c480:	2400785c 	.word	0x2400785c

0800c484 <BSP_AUDIO_OUT_IRQHandler>:
  /* Return BSP status */
  return ret;
}

void BSP_AUDIO_OUT_IRQHandler(uint32_t Instance)
{
 800c484:	b580      	push	{r7, lr}
 800c486:	b082      	sub	sp, #8
 800c488:	af00      	add	r7, sp, #0
 800c48a:	6078      	str	r0, [r7, #4]
  if (Instance == 0U)
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	2b00      	cmp	r3, #0
 800c490:	d105      	bne.n	800c49e <BSP_AUDIO_OUT_IRQHandler+0x1a>
  {
    HAL_DMA_IRQHandler(haudio_out_sai.hdmatx);
 800c492:	4b05      	ldr	r3, [pc, #20]	@ (800c4a8 <BSP_AUDIO_OUT_IRQHandler+0x24>)
 800c494:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800c498:	4618      	mov	r0, r3
 800c49a:	f008 f96d 	bl	8014778 <HAL_DMA_IRQHandler>
  }
}
 800c49e:	bf00      	nop
 800c4a0:	3708      	adds	r7, #8
 800c4a2:	46bd      	mov	sp, r7
 800c4a4:	bd80      	pop	{r7, pc}
 800c4a6:	bf00      	nop
 800c4a8:	2400772c 	.word	0x2400772c

0800c4ac <HAL_SAI_TxCpltCallback>:
  * @brief  Tx Transfer completed callbacks.
  * @param  hsai SAI handle
  * @retval None
  */
void HAL_SAI_TxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800c4ac:	b580      	push	{r7, lr}
 800c4ae:	b082      	sub	sp, #8
 800c4b0:	af00      	add	r7, sp, #0
 800c4b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_TransferComplete_CallBack(0);
 800c4b4:	2000      	movs	r0, #0
 800c4b6:	f7fb ff55 	bl	8008364 <BSP_AUDIO_OUT_TransferComplete_CallBack>
}
 800c4ba:	bf00      	nop
 800c4bc:	3708      	adds	r7, #8
 800c4be:	46bd      	mov	sp, r7
 800c4c0:	bd80      	pop	{r7, pc}

0800c4c2 <HAL_SAI_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_TxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800c4c2:	b580      	push	{r7, lr}
 800c4c4:	b082      	sub	sp, #8
 800c4c6:	af00      	add	r7, sp, #0
 800c4c8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsai);

  /* Manage the remaining file size and new address offset: This function
     should be coded by user (its prototype is already declared in stm32h747i_discovery_audio.h) */
  BSP_AUDIO_OUT_HalfTransfer_CallBack(0);
 800c4ca:	2000      	movs	r0, #0
 800c4cc:	f7fb ff60 	bl	8008390 <BSP_AUDIO_OUT_HalfTransfer_CallBack>
}
 800c4d0:	bf00      	nop
 800c4d2:	3708      	adds	r7, #8
 800c4d4:	46bd      	mov	sp, r7
 800c4d6:	bd80      	pop	{r7, pc}

0800c4d8 <HAL_SAI_ErrorCallback>:
  * @brief  SAI error callbacks.
  * @param  hsai  SAI handle
  * @retval None
  */
void HAL_SAI_ErrorCallback(SAI_HandleTypeDef *hsai)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b082      	sub	sp, #8
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	4a06      	ldr	r2, [pc, #24]	@ (800c500 <HAL_SAI_ErrorCallback+0x28>)
 800c4e6:	4293      	cmp	r3, r2
 800c4e8:	d103      	bne.n	800c4f2 <HAL_SAI_ErrorCallback+0x1a>
  {
  BSP_AUDIO_OUT_Error_CallBack(0);
 800c4ea:	2000      	movs	r0, #0
 800c4ec:	f7fb ff66 	bl	80083bc <BSP_AUDIO_OUT_Error_CallBack>
  }
  else
  {
  BSP_AUDIO_IN_Error_CallBack(0);
  }
}
 800c4f0:	e002      	b.n	800c4f8 <HAL_SAI_ErrorCallback+0x20>
  BSP_AUDIO_IN_Error_CallBack(0);
 800c4f2:	2000      	movs	r0, #0
 800c4f4:	f7fc f966 	bl	80087c4 <BSP_AUDIO_IN_Error_CallBack>
}
 800c4f8:	bf00      	nop
 800c4fa:	3708      	adds	r7, #8
 800c4fc:	46bd      	mov	sp, r7
 800c4fe:	bd80      	pop	{r7, pc}
 800c500:	40015804 	.word	0x40015804

0800c504 <BSP_AUDIO_IN_Init>:
  *       - 1 if SAI PDM is used
  * @param  AudioInit Init structure
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Init(uint32_t Instance, BSP_AUDIO_Init_t* AudioInit)
{
 800c504:	b590      	push	{r4, r7, lr}
 800c506:	b093      	sub	sp, #76	@ 0x4c
 800c508:	af00      	add	r7, sp, #0
 800c50a:	6078      	str	r0, [r7, #4]
 800c50c:	6039      	str	r1, [r7, #0]


  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800c50e:	687b      	ldr	r3, [r7, #4]
 800c510:	2b01      	cmp	r3, #1
 800c512:	d902      	bls.n	800c51a <BSP_AUDIO_IN_Init+0x16>
  {
    return BSP_ERROR_WRONG_PARAM;
 800c514:	f06f 0301 	mvn.w	r3, #1
 800c518:	e175      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
  }
  else
  {
    /* Store the audio record context */
    Audio_In_Ctx[Instance].Device          = AudioInit->Device;
 800c51a:	683b      	ldr	r3, [r7, #0]
 800c51c:	6819      	ldr	r1, [r3, #0]
 800c51e:	489c      	ldr	r0, [pc, #624]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c520:	687a      	ldr	r2, [r7, #4]
 800c522:	4613      	mov	r3, r2
 800c524:	005b      	lsls	r3, r3, #1
 800c526:	4413      	add	r3, r2
 800c528:	011b      	lsls	r3, r3, #4
 800c52a:	4403      	add	r3, r0
 800c52c:	3304      	adds	r3, #4
 800c52e:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].ChannelsNbr     = AudioInit->ChannelsNbr;
 800c530:	683b      	ldr	r3, [r7, #0]
 800c532:	68d9      	ldr	r1, [r3, #12]
 800c534:	4896      	ldr	r0, [pc, #600]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c536:	687a      	ldr	r2, [r7, #4]
 800c538:	4613      	mov	r3, r2
 800c53a:	005b      	lsls	r3, r3, #1
 800c53c:	4413      	add	r3, r2
 800c53e:	011b      	lsls	r3, r3, #4
 800c540:	4403      	add	r3, r0
 800c542:	3310      	adds	r3, #16
 800c544:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].SampleRate      = AudioInit->SampleRate;
 800c546:	683b      	ldr	r3, [r7, #0]
 800c548:	6859      	ldr	r1, [r3, #4]
 800c54a:	4891      	ldr	r0, [pc, #580]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c54c:	687a      	ldr	r2, [r7, #4]
 800c54e:	4613      	mov	r3, r2
 800c550:	005b      	lsls	r3, r3, #1
 800c552:	4413      	add	r3, r2
 800c554:	011b      	lsls	r3, r3, #4
 800c556:	4403      	add	r3, r0
 800c558:	3308      	adds	r3, #8
 800c55a:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].BitsPerSample   = AudioInit->BitsPerSample;
 800c55c:	683b      	ldr	r3, [r7, #0]
 800c55e:	6899      	ldr	r1, [r3, #8]
 800c560:	488b      	ldr	r0, [pc, #556]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c562:	687a      	ldr	r2, [r7, #4]
 800c564:	4613      	mov	r3, r2
 800c566:	005b      	lsls	r3, r3, #1
 800c568:	4413      	add	r3, r2
 800c56a:	011b      	lsls	r3, r3, #4
 800c56c:	4403      	add	r3, r0
 800c56e:	330c      	adds	r3, #12
 800c570:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].Volume          = AudioInit->Volume;
 800c572:	683b      	ldr	r3, [r7, #0]
 800c574:	6919      	ldr	r1, [r3, #16]
 800c576:	4886      	ldr	r0, [pc, #536]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c578:	687a      	ldr	r2, [r7, #4]
 800c57a:	4613      	mov	r3, r2
 800c57c:	005b      	lsls	r3, r3, #1
 800c57e:	4413      	add	r3, r2
 800c580:	011b      	lsls	r3, r3, #4
 800c582:	4403      	add	r3, r0
 800c584:	3320      	adds	r3, #32
 800c586:	6019      	str	r1, [r3, #0]
    Audio_In_Ctx[Instance].State           = AUDIO_IN_STATE_RESET;
 800c588:	4981      	ldr	r1, [pc, #516]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c58a:	687a      	ldr	r2, [r7, #4]
 800c58c:	4613      	mov	r3, r2
 800c58e:	005b      	lsls	r3, r3, #1
 800c590:	4413      	add	r3, r2
 800c592:	011b      	lsls	r3, r3, #4
 800c594:	440b      	add	r3, r1
 800c596:	3324      	adds	r3, #36	@ 0x24
 800c598:	2200      	movs	r2, #0
 800c59a:	601a      	str	r2, [r3, #0]

    if(Instance == 0U)
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	2b00      	cmp	r3, #0
 800c5a0:	f040 80b6 	bne.w	800c710 <BSP_AUDIO_IN_Init+0x20c>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI1_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 800c5a4:	683b      	ldr	r3, [r7, #0]
 800c5a6:	685b      	ldr	r3, [r3, #4]
 800c5a8:	4619      	mov	r1, r3
 800c5aa:	487a      	ldr	r0, [pc, #488]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c5ac:	f7ff fd17 	bl	800bfde <MX_SAI1_ClockConfig>
 800c5b0:	4603      	mov	r3, r0
 800c5b2:	2b00      	cmp	r3, #0
 800c5b4:	d002      	beq.n	800c5bc <BSP_AUDIO_IN_Init+0xb8>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 800c5b6:	f06f 0308 	mvn.w	r3, #8
 800c5ba:	e124      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800c5bc:	4b75      	ldr	r3, [pc, #468]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c5be:	4a76      	ldr	r2, [pc, #472]	@ (800c798 <BSP_AUDIO_IN_Init+0x294>)
 800c5c0:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 800c5c2:	4874      	ldr	r0, [pc, #464]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c5c4:	f000 fce6 	bl	800cf94 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      mx_config.MonoStereoMode = (AudioInit->ChannelsNbr == 1U) ? SAI_MONOMODE : SAI_STEREOMODE;
 800c5c8:	683b      	ldr	r3, [r7, #0]
 800c5ca:	68db      	ldr	r3, [r3, #12]
 800c5cc:	2b01      	cmp	r3, #1
 800c5ce:	d102      	bne.n	800c5d6 <BSP_AUDIO_IN_Init+0xd2>
 800c5d0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800c5d4:	e000      	b.n	800c5d8 <BSP_AUDIO_IN_Init+0xd4>
 800c5d6:	2300      	movs	r3, #0
 800c5d8:	617b      	str	r3, [r7, #20]
      mx_config.FrameLength       = 64;
 800c5da:	2340      	movs	r3, #64	@ 0x40
 800c5dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 32;
 800c5de:	2320      	movs	r3, #32
 800c5e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.DataSize =(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?SAI_DATASIZE_32: SAI_DATASIZE_16;
 800c5e2:	683b      	ldr	r3, [r7, #0]
 800c5e4:	689b      	ldr	r3, [r3, #8]
 800c5e6:	2b20      	cmp	r3, #32
 800c5e8:	d101      	bne.n	800c5ee <BSP_AUDIO_IN_Init+0xea>
 800c5ea:	23e0      	movs	r3, #224	@ 0xe0
 800c5ec:	e000      	b.n	800c5f0 <BSP_AUDIO_IN_Init+0xec>
 800c5ee:	2380      	movs	r3, #128	@ 0x80
 800c5f0:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?128: 64;
 800c5f2:	683b      	ldr	r3, [r7, #0]
 800c5f4:	689b      	ldr	r3, [r3, #8]
 800c5f6:	2b20      	cmp	r3, #32
 800c5f8:	d101      	bne.n	800c5fe <BSP_AUDIO_IN_Init+0xfa>
 800c5fa:	2380      	movs	r3, #128	@ 0x80
 800c5fc:	e000      	b.n	800c600 <BSP_AUDIO_IN_Init+0xfc>
 800c5fe:	2340      	movs	r3, #64	@ 0x40
 800c600:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength=(AudioInit->BitsPerSample == AUDIO_RESOLUTION_32B)?64: 32;
 800c602:	683b      	ldr	r3, [r7, #0]
 800c604:	689b      	ldr	r3, [r3, #8]
 800c606:	2b20      	cmp	r3, #32
 800c608:	d101      	bne.n	800c60e <BSP_AUDIO_IN_Init+0x10a>
 800c60a:	2340      	movs	r3, #64	@ 0x40
 800c60c:	e000      	b.n	800c610 <BSP_AUDIO_IN_Init+0x10c>
 800c60e:	2320      	movs	r3, #32
 800c610:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 800c612:	2300      	movs	r3, #0
 800c614:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = CODEC_AUDIOFRAME_SLOT_0123;
 800c616:	230f      	movs	r3, #15
 800c618:	633b      	str	r3, [r7, #48]	@ 0x30
      /* Prepare haudio_in_sai handle */
      haudio_in_sai.Instance        = SAI1_Block_B;
 800c61a:	4b5e      	ldr	r3, [pc, #376]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c61c:	4a5e      	ldr	r2, [pc, #376]	@ (800c798 <BSP_AUDIO_IN_Init+0x294>)
 800c61e:	601a      	str	r2, [r3, #0]
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate;
 800c620:	495b      	ldr	r1, [pc, #364]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c622:	687a      	ldr	r2, [r7, #4]
 800c624:	4613      	mov	r3, r2
 800c626:	005b      	lsls	r3, r3, #1
 800c628:	4413      	add	r3, r2
 800c62a:	011b      	lsls	r3, r3, #4
 800c62c:	440b      	add	r3, r1
 800c62e:	3308      	adds	r3, #8
 800c630:	681b      	ldr	r3, [r3, #0]
 800c632:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODESLAVE_RX;
 800c634:	2303      	movs	r3, #3
 800c636:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_RISINGEDGE;
 800c638:	2301      	movs	r3, #1
 800c63a:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_SYNCHRONOUS;
 800c63c:	2301      	movs	r3, #1
 800c63e:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800c640:	2300      	movs	r3, #0
 800c642:	627b      	str	r3, [r7, #36]	@ 0x24
      /* Disable SAI peripheral to allow access to SAI internal registers */

      if(MX_SAI1_Block_B_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 800c644:	f107 0308 	add.w	r3, r7, #8
 800c648:	4619      	mov	r1, r3
 800c64a:	4852      	ldr	r0, [pc, #328]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c64c:	f000 f95c 	bl	800c908 <MX_SAI1_Block_B_Init>
 800c650:	4603      	mov	r3, r0
 800c652:	2b00      	cmp	r3, #0
 800c654:	d002      	beq.n	800c65c <BSP_AUDIO_IN_Init+0x158>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800c656:	f06f 0303 	mvn.w	r3, #3
 800c65a:	e0d4      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
      }

      /* Prepare haudio_out_sai handle */
      haudio_out_sai.Instance       = SAI1_Block_A;
 800c65c:	4b4f      	ldr	r3, [pc, #316]	@ (800c79c <BSP_AUDIO_IN_Init+0x298>)
 800c65e:	4a50      	ldr	r2, [pc, #320]	@ (800c7a0 <BSP_AUDIO_IN_Init+0x29c>)
 800c660:	601a      	str	r2, [r3, #0]
      mx_config.AudioMode         = SAI_MODEMASTER_TX;
 800c662:	2300      	movs	r3, #0
 800c664:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c666:	2300      	movs	r3, #0
 800c668:	61bb      	str	r3, [r7, #24]
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_ENABLE;
 800c66a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800c66e:	623b      	str	r3, [r7, #32]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 800c670:	2300      	movs	r3, #0
 800c672:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800c674:	2300      	movs	r3, #0
 800c676:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_SAI1_Block_A_Init(&haudio_out_sai, &mx_config) != HAL_OK)
 800c678:	f107 0308 	add.w	r3, r7, #8
 800c67c:	4619      	mov	r1, r3
 800c67e:	4847      	ldr	r0, [pc, #284]	@ (800c79c <BSP_AUDIO_IN_Init+0x298>)
 800c680:	f7ff fc24 	bl	800becc <MX_SAI1_Block_A_Init>
 800c684:	4603      	mov	r3, r0
 800c686:	2b00      	cmp	r3, #0
 800c688:	d002      	beq.n	800c690 <BSP_AUDIO_IN_Init+0x18c>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800c68a:	f06f 0303 	mvn.w	r3, #3
 800c68e:	e0ba      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
#if (USE_AUDIO_CODEC_WM8994 == 1U)
      /* Initialize the codec internal registers */
      if(WM8994_Probe() == BSP_ERROR_NONE)
 800c690:	f000 fc26 	bl	800cee0 <WM8994_Probe>
 800c694:	4603      	mov	r3, r0
 800c696:	2b00      	cmp	r3, #0
 800c698:	f040 80aa 	bne.w	800c7f0 <BSP_AUDIO_IN_Init+0x2ec>
      {
        WM8994_Init_t codec_init;

        /* Fill codec_init structure */
        codec_init.Frequency    = AudioInit->SampleRate;
 800c69c:	683b      	ldr	r3, [r7, #0]
 800c69e:	685b      	ldr	r3, [r3, #4]
 800c6a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        codec_init.OutputDevice = WM8994_OUT_NONE;
 800c6a2:	2300      	movs	r3, #0
 800c6a4:	63bb      	str	r3, [r7, #56]	@ 0x38
        if(AudioInit->Device == AUDIO_IN_DEVICE_ANALOG_MIC)
 800c6a6:	683b      	ldr	r3, [r7, #0]
 800c6a8:	681b      	ldr	r3, [r3, #0]
 800c6aa:	2b00      	cmp	r3, #0
 800c6ac:	d104      	bne.n	800c6b8 <BSP_AUDIO_IN_Init+0x1b4>
        {
          codec_init.InputDevice = WM8994_IN_LINE1;
 800c6ae:	2303      	movs	r3, #3
 800c6b0:	637b      	str	r3, [r7, #52]	@ 0x34
          codec_init.OutputDevice = AUDIO_OUT_DEVICE_HEADPHONE;
 800c6b2:	2302      	movs	r3, #2
 800c6b4:	63bb      	str	r3, [r7, #56]	@ 0x38
 800c6b6:	e001      	b.n	800c6bc <BSP_AUDIO_IN_Init+0x1b8>
        }
        else /* (AudioInit->Device == AUDIO_IN_DEVICE_DIGITAL_MIC) */
        {
          codec_init.InputDevice = WM8994_IN_MIC2;
 800c6b8:	2302      	movs	r3, #2
 800c6ba:	637b      	str	r3, [r7, #52]	@ 0x34
        }
        codec_init.Resolution=(AudioInit->BitsPerSample==AUDIO_RESOLUTION_32B)? 3:0;
 800c6bc:	683b      	ldr	r3, [r7, #0]
 800c6be:	689b      	ldr	r3, [r3, #8]
 800c6c0:	2b20      	cmp	r3, #32
 800c6c2:	d101      	bne.n	800c6c8 <BSP_AUDIO_IN_Init+0x1c4>
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	e000      	b.n	800c6ca <BSP_AUDIO_IN_Init+0x1c6>
 800c6c8:	2300      	movs	r3, #0
 800c6ca:	643b      	str	r3, [r7, #64]	@ 0x40
        /* Convert volume before sending to the codec */
        codec_init.Volume       = VOLUME_IN_CONVERT(AudioInit->Volume);
 800c6cc:	683b      	ldr	r3, [r7, #0]
 800c6ce:	691b      	ldr	r3, [r3, #16]
 800c6d0:	2b63      	cmp	r3, #99	@ 0x63
 800c6d2:	d80c      	bhi.n	800c6ee <BSP_AUDIO_IN_Init+0x1ea>
 800c6d4:	683b      	ldr	r3, [r7, #0]
 800c6d6:	691a      	ldr	r2, [r3, #16]
 800c6d8:	4613      	mov	r3, r2
 800c6da:	011b      	lsls	r3, r3, #4
 800c6dc:	1a9b      	subs	r3, r3, r2
 800c6de:	011b      	lsls	r3, r3, #4
 800c6e0:	1a9b      	subs	r3, r3, r2
 800c6e2:	4a30      	ldr	r2, [pc, #192]	@ (800c7a4 <BSP_AUDIO_IN_Init+0x2a0>)
 800c6e4:	fba2 2303 	umull	r2, r3, r2, r3
 800c6e8:	095b      	lsrs	r3, r3, #5
 800c6ea:	b2db      	uxtb	r3, r3
 800c6ec:	e000      	b.n	800c6f0 <BSP_AUDIO_IN_Init+0x1ec>
 800c6ee:	23ef      	movs	r3, #239	@ 0xef
 800c6f0:	647b      	str	r3, [r7, #68]	@ 0x44

        /* Initialize the codec internal registers */
        if(Audio_Drv->Init(Audio_CompObj, &codec_init) != 0)
 800c6f2:	4b2d      	ldr	r3, [pc, #180]	@ (800c7a8 <BSP_AUDIO_IN_Init+0x2a4>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	681b      	ldr	r3, [r3, #0]
 800c6f8:	4a2c      	ldr	r2, [pc, #176]	@ (800c7ac <BSP_AUDIO_IN_Init+0x2a8>)
 800c6fa:	6812      	ldr	r2, [r2, #0]
 800c6fc:	f107 0134 	add.w	r1, r7, #52	@ 0x34
 800c700:	4610      	mov	r0, r2
 800c702:	4798      	blx	r3
 800c704:	4603      	mov	r3, r0
 800c706:	2b00      	cmp	r3, #0
 800c708:	d072      	beq.n	800c7f0 <BSP_AUDIO_IN_Init+0x2ec>
        {
          return BSP_ERROR_COMPONENT_FAILURE;
 800c70a:	f06f 0304 	mvn.w	r3, #4
        return BSP_ERROR_CLOCK_FAILURE;
 800c70e:	e07a      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
        }
      }
#endif  /*USE_AUDIO_CODEC_WM8994 == 1)*/
    }
    else if(Instance == 1U)
 800c710:	687b      	ldr	r3, [r7, #4]
 800c712:	2b01      	cmp	r3, #1
 800c714:	d16c      	bne.n	800c7f0 <BSP_AUDIO_IN_Init+0x2ec>
    {
      /* PLL clock is set depending by the AudioFreq (44.1khz vs 48khz groups) */
      if(MX_SAI4_ClockConfig(&haudio_in_sai, AudioInit->SampleRate) != HAL_OK)
 800c716:	683b      	ldr	r3, [r7, #0]
 800c718:	685b      	ldr	r3, [r3, #4]
 800c71a:	4619      	mov	r1, r3
 800c71c:	481d      	ldr	r0, [pc, #116]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c71e:	f7ff fca4 	bl	800c06a <MX_SAI4_ClockConfig>
 800c722:	4603      	mov	r3, r0
 800c724:	2b00      	cmp	r3, #0
 800c726:	d002      	beq.n	800c72e <BSP_AUDIO_IN_Init+0x22a>
      {
        return BSP_ERROR_CLOCK_FAILURE;
 800c728:	f06f 0308 	mvn.w	r3, #8
 800c72c:	e06b      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
      }
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 800c72e:	4b19      	ldr	r3, [pc, #100]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c730:	4a1f      	ldr	r2, [pc, #124]	@ (800c7b0 <BSP_AUDIO_IN_Init+0x2ac>)
 800c732:	601a      	str	r2, [r3, #0]
        {
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      SAI_MspInit(&haudio_in_sai);
 800c734:	4817      	ldr	r0, [pc, #92]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c736:	f000 fc2d 	bl	800cf94 <SAI_MspInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */
      MX_SAI_Config_t mx_config;

      /* Prepare haudio_in_sai handle */
      mx_config.MonoStereoMode    = SAI_STEREOMODE;
 800c73a:	2300      	movs	r3, #0
 800c73c:	617b      	str	r3, [r7, #20]
      mx_config.DataSize          = SAI_DATASIZE_16;
 800c73e:	2380      	movs	r3, #128	@ 0x80
 800c740:	613b      	str	r3, [r7, #16]
      mx_config.FrameLength       = 16;
 800c742:	2310      	movs	r3, #16
 800c744:	62bb      	str	r3, [r7, #40]	@ 0x28
      mx_config.ActiveFrameLength = 1;
 800c746:	2301      	movs	r3, #1
 800c748:	62fb      	str	r3, [r7, #44]	@ 0x2c
      mx_config.OutputDrive       = SAI_OUTPUTDRIVE_DISABLE;
 800c74a:	2300      	movs	r3, #0
 800c74c:	623b      	str	r3, [r7, #32]
      mx_config.SlotActive        = SAI_SLOTACTIVE_0;
 800c74e:	2301      	movs	r3, #1
 800c750:	633b      	str	r3, [r7, #48]	@ 0x30
      mx_config.AudioFrequency    = Audio_In_Ctx[Instance].SampleRate*8;
 800c752:	490f      	ldr	r1, [pc, #60]	@ (800c790 <BSP_AUDIO_IN_Init+0x28c>)
 800c754:	687a      	ldr	r2, [r7, #4]
 800c756:	4613      	mov	r3, r2
 800c758:	005b      	lsls	r3, r3, #1
 800c75a:	4413      	add	r3, r2
 800c75c:	011b      	lsls	r3, r3, #4
 800c75e:	440b      	add	r3, r1
 800c760:	3308      	adds	r3, #8
 800c762:	681b      	ldr	r3, [r3, #0]
 800c764:	00db      	lsls	r3, r3, #3
 800c766:	60bb      	str	r3, [r7, #8]
      mx_config.AudioMode         = SAI_MODEMASTER_RX;
 800c768:	2301      	movs	r3, #1
 800c76a:	60fb      	str	r3, [r7, #12]
      mx_config.ClockStrobing     = SAI_CLOCKSTROBING_FALLINGEDGE;
 800c76c:	2300      	movs	r3, #0
 800c76e:	61bb      	str	r3, [r7, #24]
      mx_config.Synchro           = SAI_ASYNCHRONOUS;
 800c770:	2300      	movs	r3, #0
 800c772:	61fb      	str	r3, [r7, #28]
      mx_config.SynchroExt        = SAI_SYNCEXT_DISABLE;
 800c774:	2300      	movs	r3, #0
 800c776:	627b      	str	r3, [r7, #36]	@ 0x24

      if(MX_SAI4_Block_A_Init(&haudio_in_sai, &mx_config) != HAL_OK)
 800c778:	f107 0308 	add.w	r3, r7, #8
 800c77c:	4619      	mov	r1, r3
 800c77e:	4805      	ldr	r0, [pc, #20]	@ (800c794 <BSP_AUDIO_IN_Init+0x290>)
 800c780:	f000 f93f 	bl	800ca02 <MX_SAI4_Block_A_Init>
 800c784:	4603      	mov	r3, r0
 800c786:	2b00      	cmp	r3, #0
 800c788:	d014      	beq.n	800c7b4 <BSP_AUDIO_IN_Init+0x2b0>
      {
        /* Return BSP_ERROR_PERIPH_FAILURE when operations are not correctly done */
        return BSP_ERROR_PERIPH_FAILURE;
 800c78a:	f06f 0303 	mvn.w	r3, #3
 800c78e:	e03a      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
 800c790:	240078a4 	.word	0x240078a4
 800c794:	240077c4 	.word	0x240077c4
 800c798:	40015824 	.word	0x40015824
 800c79c:	2400772c 	.word	0x2400772c
 800c7a0:	40015804 	.word	0x40015804
 800c7a4:	51eb851f 	.word	0x51eb851f
 800c7a8:	24007680 	.word	0x24007680
 800c7ac:	24007728 	.word	0x24007728
 800c7b0:	58005404 	.word	0x58005404
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 1U) */

      if(BSP_AUDIO_IN_PDMToPCM_Init(Instance, AudioInit->SampleRate, Audio_In_Ctx[Instance].ChannelsNbr, Audio_In_Ctx[Instance].ChannelsNbr) != BSP_ERROR_NONE)
 800c7b4:	683b      	ldr	r3, [r7, #0]
 800c7b6:	6859      	ldr	r1, [r3, #4]
 800c7b8:	4815      	ldr	r0, [pc, #84]	@ (800c810 <BSP_AUDIO_IN_Init+0x30c>)
 800c7ba:	687a      	ldr	r2, [r7, #4]
 800c7bc:	4613      	mov	r3, r2
 800c7be:	005b      	lsls	r3, r3, #1
 800c7c0:	4413      	add	r3, r2
 800c7c2:	011b      	lsls	r3, r3, #4
 800c7c4:	4403      	add	r3, r0
 800c7c6:	3310      	adds	r3, #16
 800c7c8:	6818      	ldr	r0, [r3, #0]
 800c7ca:	4c11      	ldr	r4, [pc, #68]	@ (800c810 <BSP_AUDIO_IN_Init+0x30c>)
 800c7cc:	687a      	ldr	r2, [r7, #4]
 800c7ce:	4613      	mov	r3, r2
 800c7d0:	005b      	lsls	r3, r3, #1
 800c7d2:	4413      	add	r3, r2
 800c7d4:	011b      	lsls	r3, r3, #4
 800c7d6:	4423      	add	r3, r4
 800c7d8:	3310      	adds	r3, #16
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	4602      	mov	r2, r0
 800c7de:	6878      	ldr	r0, [r7, #4]
 800c7e0:	f000 f994 	bl	800cb0c <BSP_AUDIO_IN_PDMToPCM_Init>
 800c7e4:	4603      	mov	r3, r0
 800c7e6:	2b00      	cmp	r3, #0
 800c7e8:	d002      	beq.n	800c7f0 <BSP_AUDIO_IN_Init+0x2ec>
      {
        return BSP_ERROR_NO_INIT;
 800c7ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800c7ee:	e00a      	b.n	800c806 <BSP_AUDIO_IN_Init+0x302>
    }
    else
    {}

    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 800c7f0:	4907      	ldr	r1, [pc, #28]	@ (800c810 <BSP_AUDIO_IN_Init+0x30c>)
 800c7f2:	687a      	ldr	r2, [r7, #4]
 800c7f4:	4613      	mov	r3, r2
 800c7f6:	005b      	lsls	r3, r3, #1
 800c7f8:	4413      	add	r3, r2
 800c7fa:	011b      	lsls	r3, r3, #4
 800c7fc:	440b      	add	r3, r1
 800c7fe:	3324      	adds	r3, #36	@ 0x24
 800c800:	2202      	movs	r2, #2
 800c802:	601a      	str	r2, [r3, #0]
    /* Return BSP status */
    return BSP_ERROR_NONE;
 800c804:	2300      	movs	r3, #0
  }
}
 800c806:	4618      	mov	r0, r3
 800c808:	374c      	adds	r7, #76	@ 0x4c
 800c80a:	46bd      	mov	sp, r7
 800c80c:	bd90      	pop	{r4, r7, pc}
 800c80e:	bf00      	nop
 800c810:	240078a4 	.word	0x240078a4

0800c814 <BSP_AUDIO_IN_DeInit>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used or 1 if PDM is used
  * @retval BSP status
  */

int32_t BSP_AUDIO_IN_DeInit(uint32_t Instance)
{
 800c814:	b580      	push	{r7, lr}
 800c816:	b084      	sub	sp, #16
 800c818:	af00      	add	r7, sp, #0
 800c81a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800c81c:	2300      	movs	r3, #0
 800c81e:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800c820:	687b      	ldr	r3, [r7, #4]
 800c822:	2b01      	cmp	r3, #1
 800c824:	d903      	bls.n	800c82e <BSP_AUDIO_IN_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800c826:	f06f 0301 	mvn.w	r3, #1
 800c82a:	60fb      	str	r3, [r7, #12]
 800c82c:	e056      	b.n	800c8dc <BSP_AUDIO_IN_DeInit+0xc8>
  }
  else
  {
    if(Instance == 0U)
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	2b00      	cmp	r3, #0
 800c832:	d12a      	bne.n	800c88a <BSP_AUDIO_IN_DeInit+0x76>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 800c834:	482c      	ldr	r0, [pc, #176]	@ (800c8e8 <BSP_AUDIO_IN_DeInit+0xd4>)
 800c836:	f000 fe4b 	bl	800d4d0 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAIx;
 800c83a:	4b2b      	ldr	r3, [pc, #172]	@ (800c8e8 <BSP_AUDIO_IN_DeInit+0xd4>)
 800c83c:	4a2b      	ldr	r2, [pc, #172]	@ (800c8ec <BSP_AUDIO_IN_DeInit+0xd8>)
 800c83e:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800c840:	4b2b      	ldr	r3, [pc, #172]	@ (800c8f0 <BSP_AUDIO_IN_DeInit+0xdc>)
 800c842:	4a2c      	ldr	r2, [pc, #176]	@ (800c8f4 <BSP_AUDIO_IN_DeInit+0xe0>)
 800c844:	601a      	str	r2, [r3, #0]

      if(Audio_Drv->DeInit(Audio_CompObj) != BSP_ERROR_NONE)
 800c846:	4b2c      	ldr	r3, [pc, #176]	@ (800c8f8 <BSP_AUDIO_IN_DeInit+0xe4>)
 800c848:	681b      	ldr	r3, [r3, #0]
 800c84a:	685b      	ldr	r3, [r3, #4]
 800c84c:	4a2b      	ldr	r2, [pc, #172]	@ (800c8fc <BSP_AUDIO_IN_DeInit+0xe8>)
 800c84e:	6812      	ldr	r2, [r2, #0]
 800c850:	4610      	mov	r0, r2
 800c852:	4798      	blx	r3
 800c854:	4603      	mov	r3, r0
 800c856:	2b00      	cmp	r3, #0
 800c858:	d003      	beq.n	800c862 <BSP_AUDIO_IN_DeInit+0x4e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800c85a:	f06f 0304 	mvn.w	r3, #4
 800c85e:	60fb      	str	r3, [r7, #12]
 800c860:	e032      	b.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
      }/* De-Initializes SAI handles */
      else if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 800c862:	4821      	ldr	r0, [pc, #132]	@ (800c8e8 <BSP_AUDIO_IN_DeInit+0xd4>)
 800c864:	f011 fde8 	bl	801e438 <HAL_SAI_DeInit>
 800c868:	4603      	mov	r3, r0
 800c86a:	2b00      	cmp	r3, #0
 800c86c:	d003      	beq.n	800c876 <BSP_AUDIO_IN_DeInit+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c86e:	f06f 0303 	mvn.w	r3, #3
 800c872:	60fb      	str	r3, [r7, #12]
 800c874:	e028      	b.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 800c876:	481e      	ldr	r0, [pc, #120]	@ (800c8f0 <BSP_AUDIO_IN_DeInit+0xdc>)
 800c878:	f011 fdde 	bl	801e438 <HAL_SAI_DeInit>
 800c87c:	4603      	mov	r3, r0
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d022      	beq.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c882:	f06f 0303 	mvn.w	r3, #3
 800c886:	60fb      	str	r3, [r7, #12]
 800c888:	e01e      	b.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
        }
      }
    }
    else if (Instance == 1U)
 800c88a:	687b      	ldr	r3, [r7, #4]
 800c88c:	2b01      	cmp	r3, #1
 800c88e:	d11b      	bne.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
    {
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 0U)
      SAI_MspDeInit(&haudio_in_sai);
 800c890:	4815      	ldr	r0, [pc, #84]	@ (800c8e8 <BSP_AUDIO_IN_DeInit+0xd4>)
 800c892:	f000 fe1d 	bl	800d4d0 <SAI_MspDeInit>
#endif /* (USE_HAL_SAI_REGISTER_CALLBACKS == 0U) */

      /* Initialize the haudio_in_sai Instance parameter */
      haudio_in_sai.Instance = AUDIO_IN_SAI_PDMx;
 800c896:	4b14      	ldr	r3, [pc, #80]	@ (800c8e8 <BSP_AUDIO_IN_DeInit+0xd4>)
 800c898:	4a19      	ldr	r2, [pc, #100]	@ (800c900 <BSP_AUDIO_IN_DeInit+0xec>)
 800c89a:	601a      	str	r2, [r3, #0]
      /* Initialize the haudio_out_sai Instance parameter */
      haudio_out_sai.Instance = AUDIO_OUT_SAIx;
 800c89c:	4b14      	ldr	r3, [pc, #80]	@ (800c8f0 <BSP_AUDIO_IN_DeInit+0xdc>)
 800c89e:	4a15      	ldr	r2, [pc, #84]	@ (800c8f4 <BSP_AUDIO_IN_DeInit+0xe0>)
 800c8a0:	601a      	str	r2, [r3, #0]

      if(HAL_SAI_DeInit(&haudio_in_sai) != HAL_OK)
 800c8a2:	4811      	ldr	r0, [pc, #68]	@ (800c8e8 <BSP_AUDIO_IN_DeInit+0xd4>)
 800c8a4:	f011 fdc8 	bl	801e438 <HAL_SAI_DeInit>
 800c8a8:	4603      	mov	r3, r0
 800c8aa:	2b00      	cmp	r3, #0
 800c8ac:	d003      	beq.n	800c8b6 <BSP_AUDIO_IN_DeInit+0xa2>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800c8ae:	f06f 0303 	mvn.w	r3, #3
 800c8b2:	60fb      	str	r3, [r7, #12]
 800c8b4:	e008      	b.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
      }
      else
      {
        if(HAL_SAI_DeInit(&haudio_out_sai) != HAL_OK)
 800c8b6:	480e      	ldr	r0, [pc, #56]	@ (800c8f0 <BSP_AUDIO_IN_DeInit+0xdc>)
 800c8b8:	f011 fdbe 	bl	801e438 <HAL_SAI_DeInit>
 800c8bc:	4603      	mov	r3, r0
 800c8be:	2b00      	cmp	r3, #0
 800c8c0:	d002      	beq.n	800c8c8 <BSP_AUDIO_IN_DeInit+0xb4>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800c8c2:	f06f 0303 	mvn.w	r3, #3
 800c8c6:	60fb      	str	r3, [r7, #12]
      }
    }
    else
    {}
    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_RESET;
 800c8c8:	490e      	ldr	r1, [pc, #56]	@ (800c904 <BSP_AUDIO_IN_DeInit+0xf0>)
 800c8ca:	687a      	ldr	r2, [r7, #4]
 800c8cc:	4613      	mov	r3, r2
 800c8ce:	005b      	lsls	r3, r3, #1
 800c8d0:	4413      	add	r3, r2
 800c8d2:	011b      	lsls	r3, r3, #4
 800c8d4:	440b      	add	r3, r1
 800c8d6:	3324      	adds	r3, #36	@ 0x24
 800c8d8:	2200      	movs	r2, #0
 800c8da:	601a      	str	r2, [r3, #0]
  }


  /* Return BSP status */
  return ret;
 800c8dc:	68fb      	ldr	r3, [r7, #12]
}
 800c8de:	4618      	mov	r0, r3
 800c8e0:	3710      	adds	r7, #16
 800c8e2:	46bd      	mov	sp, r7
 800c8e4:	bd80      	pop	{r7, pc}
 800c8e6:	bf00      	nop
 800c8e8:	240077c4 	.word	0x240077c4
 800c8ec:	40015824 	.word	0x40015824
 800c8f0:	2400772c 	.word	0x2400772c
 800c8f4:	40015804 	.word	0x40015804
 800c8f8:	24007680 	.word	0x24007680
 800c8fc:	24007728 	.word	0x24007728
 800c900:	58005404 	.word	0x58005404
 800c904:	240078a4 	.word	0x240078a4

0800c908 <MX_SAI1_Block_B_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI1_Block_B_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 800c908:	b580      	push	{r7, lr}
 800c90a:	b084      	sub	sp, #16
 800c90c:	af00      	add	r7, sp, #0
 800c90e:	6078      	str	r0, [r7, #4]
 800c910:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800c912:	2300      	movs	r3, #0
 800c914:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800c916:	687b      	ldr	r3, [r7, #4]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	681a      	ldr	r2, [r3, #0]
 800c91c:	687b      	ldr	r3, [r7, #4]
 800c91e:	681b      	ldr	r3, [r3, #0]
 800c920:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800c924:	601a      	str	r2, [r3, #0]

  /* Configure SAI1_Block_B */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 800c926:	683b      	ldr	r3, [r7, #0]
 800c928:	681a      	ldr	r2, [r3, #0]
 800c92a:	687b      	ldr	r3, [r7, #4]
 800c92c:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 800c92e:	683b      	ldr	r3, [r7, #0]
 800c930:	68da      	ldr	r2, [r3, #12]
 800c932:	687b      	ldr	r3, [r7, #4]
 800c934:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 800c936:	683b      	ldr	r3, [r7, #0]
 800c938:	685a      	ldr	r2, [r3, #4]
 800c93a:	687b      	ldr	r3, [r7, #4]
 800c93c:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_ENABLE;
 800c93e:	687b      	ldr	r3, [r7, #4]
 800c940:	2200      	movs	r2, #0
 800c942:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 800c944:	687b      	ldr	r3, [r7, #4]
 800c946:	2200      	movs	r2, #0
 800c948:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800c94a:	683b      	ldr	r3, [r7, #0]
 800c94c:	689a      	ldr	r2, [r3, #8]
 800c94e:	687b      	ldr	r3, [r7, #4]
 800c950:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_MSB;
 800c952:	687b      	ldr	r3, [r7, #4]
 800c954:	2200      	movs	r2, #0
 800c956:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800c958:	683b      	ldr	r3, [r7, #0]
 800c95a:	691a      	ldr	r2, [r3, #16]
 800c95c:	687b      	ldr	r3, [r7, #4]
 800c95e:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 800c960:	683b      	ldr	r3, [r7, #0]
 800c962:	695a      	ldr	r2, [r3, #20]
 800c964:	687b      	ldr	r3, [r7, #4]
 800c966:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800c968:	683b      	ldr	r3, [r7, #0]
 800c96a:	699a      	ldr	r2, [r3, #24]
 800c96c:	687b      	ldr	r3, [r7, #4]
 800c96e:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2201      	movs	r2, #1
 800c974:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800c976:	683b      	ldr	r3, [r7, #0]
 800c978:	69da      	ldr	r2, [r3, #28]
 800c97a:	687b      	ldr	r3, [r7, #4]
 800c97c:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800c97e:	687b      	ldr	r3, [r7, #4]
 800c980:	2200      	movs	r2, #0
 800c982:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 800c984:	687b      	ldr	r3, [r7, #4]
 800c986:	2210      	movs	r2, #16
 800c988:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 800c98a:	687b      	ldr	r3, [r7, #4]
 800c98c:	2200      	movs	r2, #0
 800c98e:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = DISABLE;
 800c990:	687b      	ldr	r3, [r7, #4]
 800c992:	2200      	movs	r2, #0
 800c994:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800c998:	683b      	ldr	r3, [r7, #0]
 800c99a:	6a1a      	ldr	r2, [r3, #32]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800c9a0:	683b      	ldr	r3, [r7, #0]
 800c9a2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_CHANNEL_IDENTIFICATION;
 800c9a8:	687b      	ldr	r3, [r7, #4]
 800c9aa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800c9ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_LOW;
 800c9b0:	687b      	ldr	r3, [r7, #4]
 800c9b2:	2200      	movs	r2, #0
 800c9b4:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_BEFOREFIRSTBIT;
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	f44f 2280 	mov.w	r2, #262144	@ 0x40000
 800c9bc:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	2200      	movs	r2, #0
 800c9c2:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800c9c4:	687b      	ldr	r3, [r7, #4]
 800c9c6:	2200      	movs	r2, #0
 800c9c8:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 4;
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2204      	movs	r2, #4
 800c9ce:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 800c9d0:	683b      	ldr	r3, [r7, #0]
 800c9d2:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c9d4:	687b      	ldr	r3, [r7, #4]
 800c9d6:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800c9d8:	6878      	ldr	r0, [r7, #4]
 800c9da:	f011 fa83 	bl	801dee4 <HAL_SAI_Init>
 800c9de:	4603      	mov	r3, r0
 800c9e0:	2b00      	cmp	r3, #0
 800c9e2:	d001      	beq.n	800c9e8 <MX_SAI1_Block_B_Init+0xe0>
  {
    ret = HAL_ERROR;
 800c9e4:	2301      	movs	r3, #1
 800c9e6:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	681a      	ldr	r2, [r3, #0]
 800c9ee:	687b      	ldr	r3, [r7, #4]
 800c9f0:	681b      	ldr	r3, [r3, #0]
 800c9f2:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800c9f6:	601a      	str	r2, [r3, #0]

  return ret;
 800c9f8:	7bfb      	ldrb	r3, [r7, #15]
}
 800c9fa:	4618      	mov	r0, r3
 800c9fc:	3710      	adds	r7, #16
 800c9fe:	46bd      	mov	sp, r7
 800ca00:	bd80      	pop	{r7, pc}

0800ca02 <MX_SAI4_Block_A_Init>:
  * @param  MXConfig SAI configuration structure
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SAI4_Block_A_Init(SAI_HandleTypeDef* hsai, MX_SAI_Config_t *MXConfig)
{
 800ca02:	b580      	push	{r7, lr}
 800ca04:	b084      	sub	sp, #16
 800ca06:	af00      	add	r7, sp, #0
 800ca08:	6078      	str	r0, [r7, #4]
 800ca0a:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 800ca0c:	2300      	movs	r3, #0
 800ca0e:	73fb      	strb	r3, [r7, #15]

  /* Disable SAI peripheral to allow access to SAI internal registers */
  __HAL_SAI_DISABLE(hsai);
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	681a      	ldr	r2, [r3, #0]
 800ca16:	687b      	ldr	r3, [r7, #4]
 800ca18:	681b      	ldr	r3, [r3, #0]
 800ca1a:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800ca1e:	601a      	str	r2, [r3, #0]

  /* Configure SAI4_Block_A */
  hsai->Init.AudioFrequency         = MXConfig->AudioFrequency;
 800ca20:	683b      	ldr	r3, [r7, #0]
 800ca22:	681a      	ldr	r2, [r3, #0]
 800ca24:	687b      	ldr	r3, [r7, #4]
 800ca26:	621a      	str	r2, [r3, #32]
  hsai->Init.MonoStereoMode         = MXConfig->MonoStereoMode;
 800ca28:	683b      	ldr	r3, [r7, #0]
 800ca2a:	68da      	ldr	r2, [r3, #12]
 800ca2c:	687b      	ldr	r3, [r7, #4]
 800ca2e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsai->Init.AudioMode              = MXConfig->AudioMode;
 800ca30:	683b      	ldr	r3, [r7, #0]
 800ca32:	685a      	ldr	r2, [r3, #4]
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	605a      	str	r2, [r3, #4]
  hsai->Init.NoDivider              = SAI_MASTERDIVIDER_DISABLE;
 800ca38:	687b      	ldr	r3, [r7, #4]
 800ca3a:	f44f 2200 	mov.w	r2, #524288	@ 0x80000
 800ca3e:	619a      	str	r2, [r3, #24]
  hsai->Init.Protocol               = SAI_FREE_PROTOCOL;
 800ca40:	687b      	ldr	r3, [r7, #4]
 800ca42:	2200      	movs	r2, #0
 800ca44:	645a      	str	r2, [r3, #68]	@ 0x44
  hsai->Init.DataSize               = MXConfig->DataSize;
 800ca46:	683b      	ldr	r3, [r7, #0]
 800ca48:	689a      	ldr	r2, [r3, #8]
 800ca4a:	687b      	ldr	r3, [r7, #4]
 800ca4c:	649a      	str	r2, [r3, #72]	@ 0x48
  hsai->Init.FirstBit               = SAI_FIRSTBIT_LSB;
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800ca54:	64da      	str	r2, [r3, #76]	@ 0x4c
  hsai->Init.ClockStrobing          = MXConfig->ClockStrobing;
 800ca56:	683b      	ldr	r3, [r7, #0]
 800ca58:	691a      	ldr	r2, [r3, #16]
 800ca5a:	687b      	ldr	r3, [r7, #4]
 800ca5c:	651a      	str	r2, [r3, #80]	@ 0x50
  hsai->Init.Synchro                = MXConfig->Synchro;
 800ca5e:	683b      	ldr	r3, [r7, #0]
 800ca60:	695a      	ldr	r2, [r3, #20]
 800ca62:	687b      	ldr	r3, [r7, #4]
 800ca64:	609a      	str	r2, [r3, #8]
  hsai->Init.OutputDrive            = MXConfig->OutputDrive;
 800ca66:	683b      	ldr	r3, [r7, #0]
 800ca68:	699a      	ldr	r2, [r3, #24]
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	615a      	str	r2, [r3, #20]
  hsai->Init.FIFOThreshold          = SAI_FIFOTHRESHOLD_1QF;
 800ca6e:	687b      	ldr	r3, [r7, #4]
 800ca70:	2201      	movs	r2, #1
 800ca72:	61da      	str	r2, [r3, #28]
  hsai->Init.SynchroExt             = MXConfig->SynchroExt;
 800ca74:	683b      	ldr	r3, [r7, #0]
 800ca76:	69da      	ldr	r2, [r3, #28]
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	60da      	str	r2, [r3, #12]
  hsai->Init.CompandingMode         = SAI_NOCOMPANDING;
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	2200      	movs	r2, #0
 800ca80:	631a      	str	r2, [r3, #48]	@ 0x30
  hsai->Init.TriState               = SAI_OUTPUT_RELEASED;
 800ca82:	687b      	ldr	r3, [r7, #4]
 800ca84:	2210      	movs	r2, #16
 800ca86:	635a      	str	r2, [r3, #52]	@ 0x34
  hsai->Init.Mckdiv                 = 0;
 800ca88:	687b      	ldr	r3, [r7, #4]
 800ca8a:	2200      	movs	r2, #0
 800ca8c:	625a      	str	r2, [r3, #36]	@ 0x24
  hsai->Init.PdmInit.Activation     = ENABLE;
 800ca8e:	687b      	ldr	r3, [r7, #4]
 800ca90:	2201      	movs	r2, #1
 800ca92:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hsai->Init.PdmInit.MicPairsNbr    = 1;
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	2201      	movs	r2, #1
 800ca9a:	63da      	str	r2, [r3, #60]	@ 0x3c
  hsai->Init.PdmInit.ClockEnable    = SAI_PDM_CLOCK1_ENABLE;
 800ca9c:	687b      	ldr	r3, [r7, #4]
 800ca9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800caa2:	641a      	str	r2, [r3, #64]	@ 0x40


  /* Configure SAI_Block_x Frame */
  hsai->FrameInit.FrameLength       = MXConfig->FrameLength;
 800caa4:	683b      	ldr	r3, [r7, #0]
 800caa6:	6a1a      	ldr	r2, [r3, #32]
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	655a      	str	r2, [r3, #84]	@ 0x54
  hsai->FrameInit.ActiveFrameLength = MXConfig->ActiveFrameLength;
 800caac:	683b      	ldr	r3, [r7, #0]
 800caae:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800cab0:	687b      	ldr	r3, [r7, #4]
 800cab2:	659a      	str	r2, [r3, #88]	@ 0x58
  hsai->FrameInit.FSDefinition      = SAI_FS_STARTFRAME;
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	2200      	movs	r2, #0
 800cab8:	65da      	str	r2, [r3, #92]	@ 0x5c
  hsai->FrameInit.FSPolarity        = SAI_FS_ACTIVE_HIGH;
 800caba:	687b      	ldr	r3, [r7, #4]
 800cabc:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800cac0:	661a      	str	r2, [r3, #96]	@ 0x60
  hsai->FrameInit.FSOffset          = SAI_FS_FIRSTBIT;
 800cac2:	687b      	ldr	r3, [r7, #4]
 800cac4:	2200      	movs	r2, #0
 800cac6:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Configure SAI Block_x Slot */
  hsai->SlotInit.FirstBitOffset     = 0;
 800cac8:	687b      	ldr	r3, [r7, #4]
 800caca:	2200      	movs	r2, #0
 800cacc:	669a      	str	r2, [r3, #104]	@ 0x68
  hsai->SlotInit.SlotSize           = SAI_SLOTSIZE_DATASIZE;
 800cace:	687b      	ldr	r3, [r7, #4]
 800cad0:	2200      	movs	r2, #0
 800cad2:	66da      	str	r2, [r3, #108]	@ 0x6c
  hsai->SlotInit.SlotNumber         = 1;
 800cad4:	687b      	ldr	r3, [r7, #4]
 800cad6:	2201      	movs	r2, #1
 800cad8:	671a      	str	r2, [r3, #112]	@ 0x70
  hsai->SlotInit.SlotActive        = MXConfig->SlotActive;
 800cada:	683b      	ldr	r3, [r7, #0]
 800cadc:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800cade:	687b      	ldr	r3, [r7, #4]
 800cae0:	675a      	str	r2, [r3, #116]	@ 0x74

  if(HAL_SAI_Init(hsai) != HAL_OK)
 800cae2:	6878      	ldr	r0, [r7, #4]
 800cae4:	f011 f9fe 	bl	801dee4 <HAL_SAI_Init>
 800cae8:	4603      	mov	r3, r0
 800caea:	2b00      	cmp	r3, #0
 800caec:	d001      	beq.n	800caf2 <MX_SAI4_Block_A_Init+0xf0>
  {
    ret = HAL_ERROR;
 800caee:	2301      	movs	r3, #1
 800caf0:	73fb      	strb	r3, [r7, #15]
  }

  /* Enable SAI peripheral */
  __HAL_SAI_ENABLE(hsai);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	681b      	ldr	r3, [r3, #0]
 800caf6:	681a      	ldr	r2, [r3, #0]
 800caf8:	687b      	ldr	r3, [r7, #4]
 800cafa:	681b      	ldr	r3, [r3, #0]
 800cafc:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 800cb00:	601a      	str	r2, [r3, #0]

  return ret;
 800cb02:	7bfb      	ldrb	r3, [r7, #15]
}
 800cb04:	4618      	mov	r0, r3
 800cb06:	3710      	adds	r7, #16
 800cb08:	46bd      	mov	sp, r7
 800cb0a:	bd80      	pop	{r7, pc}

0800cb0c <BSP_AUDIO_IN_PDMToPCM_Init>:
  * @param  ChnlNbrIn  Number of input audio channels in the PDM buffer
  * @param  ChnlNbrOut Number of desired output audio channels in the  resulting PCM buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM_Init(uint32_t Instance, uint32_t AudioFreq, uint32_t ChnlNbrIn, uint32_t ChnlNbrOut)
{
 800cb0c:	b580      	push	{r7, lr}
 800cb0e:	b086      	sub	sp, #24
 800cb10:	af00      	add	r7, sp, #0
 800cb12:	60f8      	str	r0, [r7, #12]
 800cb14:	60b9      	str	r1, [r7, #8]
 800cb16:	607a      	str	r2, [r7, #4]
 800cb18:	603b      	str	r3, [r7, #0]
  uint32_t index = 0;
 800cb1a:	2300      	movs	r3, #0
 800cb1c:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800cb1e:	68fb      	ldr	r3, [r7, #12]
 800cb20:	2b01      	cmp	r3, #1
 800cb22:	d002      	beq.n	800cb2a <BSP_AUDIO_IN_PDMToPCM_Init+0x1e>
  {
    return BSP_ERROR_WRONG_PARAM;
 800cb24:	f06f 0301 	mvn.w	r3, #1
 800cb28:	e085      	b.n	800cc36 <BSP_AUDIO_IN_PDMToPCM_Init+0x12a>
  }
  else
  {
    /* Enable CRC peripheral to unlock the PDM library */
    __HAL_RCC_CRC_CLK_ENABLE();
 800cb2a:	4b45      	ldr	r3, [pc, #276]	@ (800cc40 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800cb2c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb30:	4a43      	ldr	r2, [pc, #268]	@ (800cc40 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800cb32:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800cb36:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cb3a:	4b41      	ldr	r3, [pc, #260]	@ (800cc40 <BSP_AUDIO_IN_PDMToPCM_Init+0x134>)
 800cb3c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cb40:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800cb44:	613b      	str	r3, [r7, #16]
 800cb46:	693b      	ldr	r3, [r7, #16]

    for(index = 0; index < ChnlNbrIn; index++)
 800cb48:	2300      	movs	r3, #0
 800cb4a:	617b      	str	r3, [r7, #20]
 800cb4c:	e06e      	b.n	800cc2c <BSP_AUDIO_IN_PDMToPCM_Init+0x120>
    {
      /* Init PDM filters */
      PDM_FilterHandler[index].bit_order  = PDM_FILTER_BIT_ORDER_MSB;
 800cb4e:	4a3d      	ldr	r2, [pc, #244]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cb50:	697b      	ldr	r3, [r7, #20]
 800cb52:	214c      	movs	r1, #76	@ 0x4c
 800cb54:	fb01 f303 	mul.w	r3, r1, r3
 800cb58:	4413      	add	r3, r2
 800cb5a:	2201      	movs	r2, #1
 800cb5c:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].endianness = PDM_FILTER_ENDIANNESS_LE;
 800cb5e:	4a39      	ldr	r2, [pc, #228]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cb60:	697b      	ldr	r3, [r7, #20]
 800cb62:	214c      	movs	r1, #76	@ 0x4c
 800cb64:	fb01 f303 	mul.w	r3, r1, r3
 800cb68:	4413      	add	r3, r2
 800cb6a:	3302      	adds	r3, #2
 800cb6c:	2200      	movs	r2, #0
 800cb6e:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].high_pass_tap = 2122358088;
 800cb70:	4a34      	ldr	r2, [pc, #208]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cb72:	697b      	ldr	r3, [r7, #20]
 800cb74:	214c      	movs	r1, #76	@ 0x4c
 800cb76:	fb01 f303 	mul.w	r3, r1, r3
 800cb7a:	4413      	add	r3, r2
 800cb7c:	3304      	adds	r3, #4
 800cb7e:	4a32      	ldr	r2, [pc, #200]	@ (800cc48 <BSP_AUDIO_IN_PDMToPCM_Init+0x13c>)
 800cb80:	601a      	str	r2, [r3, #0]
      PDM_FilterHandler[index].out_ptr_channels = ChnlNbrOut;
 800cb82:	683b      	ldr	r3, [r7, #0]
 800cb84:	b298      	uxth	r0, r3
 800cb86:	4a2f      	ldr	r2, [pc, #188]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cb88:	697b      	ldr	r3, [r7, #20]
 800cb8a:	214c      	movs	r1, #76	@ 0x4c
 800cb8c:	fb01 f303 	mul.w	r3, r1, r3
 800cb90:	4413      	add	r3, r2
 800cb92:	330a      	adds	r3, #10
 800cb94:	4602      	mov	r2, r0
 800cb96:	801a      	strh	r2, [r3, #0]
      PDM_FilterHandler[index].in_ptr_channels  = ChnlNbrIn;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	b298      	uxth	r0, r3
 800cb9c:	4a29      	ldr	r2, [pc, #164]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cb9e:	697b      	ldr	r3, [r7, #20]
 800cba0:	214c      	movs	r1, #76	@ 0x4c
 800cba2:	fb01 f303 	mul.w	r3, r1, r3
 800cba6:	4413      	add	r3, r2
 800cba8:	3308      	adds	r3, #8
 800cbaa:	4602      	mov	r2, r0
 800cbac:	801a      	strh	r2, [r3, #0]
      PDM_Filter_Init((PDM_Filter_Handler_t *)(&PDM_FilterHandler[index]));
 800cbae:	697b      	ldr	r3, [r7, #20]
 800cbb0:	224c      	movs	r2, #76	@ 0x4c
 800cbb2:	fb02 f303 	mul.w	r3, r2, r3
 800cbb6:	4a23      	ldr	r2, [pc, #140]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cbb8:	4413      	add	r3, r2
 800cbba:	4618      	mov	r0, r3
 800cbbc:	f018 fc66 	bl	802548c <PDM_Filter_Init>

      /* PDM lib config phase */
      PDM_FilterConfig[index].output_samples_number = AudioFreq/1000;
 800cbc0:	68bb      	ldr	r3, [r7, #8]
 800cbc2:	4a22      	ldr	r2, [pc, #136]	@ (800cc4c <BSP_AUDIO_IN_PDMToPCM_Init+0x140>)
 800cbc4:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc8:	099b      	lsrs	r3, r3, #6
 800cbca:	b298      	uxth	r0, r3
 800cbcc:	4920      	ldr	r1, [pc, #128]	@ (800cc50 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800cbce:	697a      	ldr	r2, [r7, #20]
 800cbd0:	4613      	mov	r3, r2
 800cbd2:	005b      	lsls	r3, r3, #1
 800cbd4:	4413      	add	r3, r2
 800cbd6:	005b      	lsls	r3, r3, #1
 800cbd8:	440b      	add	r3, r1
 800cbda:	3302      	adds	r3, #2
 800cbdc:	4602      	mov	r2, r0
 800cbde:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].mic_gain = 24;
 800cbe0:	491b      	ldr	r1, [pc, #108]	@ (800cc50 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800cbe2:	697a      	ldr	r2, [r7, #20]
 800cbe4:	4613      	mov	r3, r2
 800cbe6:	005b      	lsls	r3, r3, #1
 800cbe8:	4413      	add	r3, r2
 800cbea:	005b      	lsls	r3, r3, #1
 800cbec:	440b      	add	r3, r1
 800cbee:	3304      	adds	r3, #4
 800cbf0:	2218      	movs	r2, #24
 800cbf2:	801a      	strh	r2, [r3, #0]
      PDM_FilterConfig[index].decimation_factor = PDM_FILTER_DEC_FACTOR_64;
 800cbf4:	4916      	ldr	r1, [pc, #88]	@ (800cc50 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800cbf6:	697a      	ldr	r2, [r7, #20]
 800cbf8:	4613      	mov	r3, r2
 800cbfa:	005b      	lsls	r3, r3, #1
 800cbfc:	4413      	add	r3, r2
 800cbfe:	005b      	lsls	r3, r3, #1
 800cc00:	440b      	add	r3, r1
 800cc02:	2202      	movs	r2, #2
 800cc04:	801a      	strh	r2, [r3, #0]
      PDM_Filter_setConfig((PDM_Filter_Handler_t *)&PDM_FilterHandler[index], &PDM_FilterConfig[index]);
 800cc06:	697b      	ldr	r3, [r7, #20]
 800cc08:	224c      	movs	r2, #76	@ 0x4c
 800cc0a:	fb02 f303 	mul.w	r3, r2, r3
 800cc0e:	4a0d      	ldr	r2, [pc, #52]	@ (800cc44 <BSP_AUDIO_IN_PDMToPCM_Init+0x138>)
 800cc10:	1898      	adds	r0, r3, r2
 800cc12:	697a      	ldr	r2, [r7, #20]
 800cc14:	4613      	mov	r3, r2
 800cc16:	005b      	lsls	r3, r3, #1
 800cc18:	4413      	add	r3, r2
 800cc1a:	005b      	lsls	r3, r3, #1
 800cc1c:	4a0c      	ldr	r2, [pc, #48]	@ (800cc50 <BSP_AUDIO_IN_PDMToPCM_Init+0x144>)
 800cc1e:	4413      	add	r3, r2
 800cc20:	4619      	mov	r1, r3
 800cc22:	f018 fcb9 	bl	8025598 <PDM_Filter_setConfig>
    for(index = 0; index < ChnlNbrIn; index++)
 800cc26:	697b      	ldr	r3, [r7, #20]
 800cc28:	3301      	adds	r3, #1
 800cc2a:	617b      	str	r3, [r7, #20]
 800cc2c:	697a      	ldr	r2, [r7, #20]
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	429a      	cmp	r2, r3
 800cc32:	d38c      	bcc.n	800cb4e <BSP_AUDIO_IN_PDMToPCM_Init+0x42>
    }
  }

  return BSP_ERROR_NONE;
 800cc34:	2300      	movs	r3, #0
}
 800cc36:	4618      	mov	r0, r3
 800cc38:	3718      	adds	r7, #24
 800cc3a:	46bd      	mov	sp, r7
 800cc3c:	bd80      	pop	{r7, pc}
 800cc3e:	bf00      	nop
 800cc40:	58024400 	.word	0x58024400
 800cc44:	24007684 	.word	0x24007684
 800cc48:	7e809d48 	.word	0x7e809d48
 800cc4c:	10624dd3 	.word	0x10624dd3
 800cc50:	2400771c 	.word	0x2400771c

0800cc54 <BSP_AUDIO_IN_PDMToPCM>:
  * @param  PDMBuf    Pointer to PDM buffer data
  * @param  PCMBuf    Pointer to PCM buffer data
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_PDMToPCM(uint32_t Instance, uint16_t *PDMBuf, uint16_t *PCMBuf)
{
 800cc54:	b580      	push	{r7, lr}
 800cc56:	b086      	sub	sp, #24
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	607a      	str	r2, [r7, #4]
  uint32_t index = 0;
 800cc60:	2300      	movs	r3, #0
 800cc62:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	2b01      	cmp	r3, #1
 800cc68:	d002      	beq.n	800cc70 <BSP_AUDIO_IN_PDMToPCM+0x1c>
  {
    return BSP_ERROR_WRONG_PARAM;
 800cc6a:	f06f 0301 	mvn.w	r3, #1
 800cc6e:	e022      	b.n	800ccb6 <BSP_AUDIO_IN_PDMToPCM+0x62>
  }
  else
  {
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 800cc70:	2300      	movs	r3, #0
 800cc72:	617b      	str	r3, [r7, #20]
 800cc74:	e012      	b.n	800cc9c <BSP_AUDIO_IN_PDMToPCM+0x48>
    {
      PDM_Filter(&((uint8_t*)(PDMBuf))[index], (uint16_t*)&(PCMBuf[index]), &PDM_FilterHandler[index]);
 800cc76:	68ba      	ldr	r2, [r7, #8]
 800cc78:	697b      	ldr	r3, [r7, #20]
 800cc7a:	18d0      	adds	r0, r2, r3
 800cc7c:	697b      	ldr	r3, [r7, #20]
 800cc7e:	005b      	lsls	r3, r3, #1
 800cc80:	687a      	ldr	r2, [r7, #4]
 800cc82:	18d1      	adds	r1, r2, r3
 800cc84:	697b      	ldr	r3, [r7, #20]
 800cc86:	224c      	movs	r2, #76	@ 0x4c
 800cc88:	fb02 f303 	mul.w	r3, r2, r3
 800cc8c:	4a0c      	ldr	r2, [pc, #48]	@ (800ccc0 <BSP_AUDIO_IN_PDMToPCM+0x6c>)
 800cc8e:	4413      	add	r3, r2
 800cc90:	461a      	mov	r2, r3
 800cc92:	f018 fd6f 	bl	8025774 <PDM_Filter>
    for(index = 0; index < Audio_In_Ctx[Instance].ChannelsNbr; index++)
 800cc96:	697b      	ldr	r3, [r7, #20]
 800cc98:	3301      	adds	r3, #1
 800cc9a:	617b      	str	r3, [r7, #20]
 800cc9c:	4909      	ldr	r1, [pc, #36]	@ (800ccc4 <BSP_AUDIO_IN_PDMToPCM+0x70>)
 800cc9e:	68fa      	ldr	r2, [r7, #12]
 800cca0:	4613      	mov	r3, r2
 800cca2:	005b      	lsls	r3, r3, #1
 800cca4:	4413      	add	r3, r2
 800cca6:	011b      	lsls	r3, r3, #4
 800cca8:	440b      	add	r3, r1
 800ccaa:	3310      	adds	r3, #16
 800ccac:	681b      	ldr	r3, [r3, #0]
 800ccae:	697a      	ldr	r2, [r7, #20]
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d3e0      	bcc.n	800cc76 <BSP_AUDIO_IN_PDMToPCM+0x22>
    }
  }

  return BSP_ERROR_NONE;
 800ccb4:	2300      	movs	r3, #0
}
 800ccb6:	4618      	mov	r0, r3
 800ccb8:	3718      	adds	r7, #24
 800ccba:	46bd      	mov	sp, r7
 800ccbc:	bd80      	pop	{r7, pc}
 800ccbe:	bf00      	nop
 800ccc0:	24007684 	.word	0x24007684
 800ccc4:	240078a4 	.word	0x240078a4

0800ccc8 <BSP_AUDIO_IN_Record>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes  Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Record(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 800ccc8:	b580      	push	{r7, lr}
 800ccca:	b086      	sub	sp, #24
 800cccc:	af00      	add	r7, sp, #0
 800ccce:	60f8      	str	r0, [r7, #12]
 800ccd0:	60b9      	str	r1, [r7, #8]
 800ccd2:	607a      	str	r2, [r7, #4]
  int32_t ret= BSP_ERROR_NONE;
 800ccd4:	2300      	movs	r3, #0
 800ccd6:	617b      	str	r3, [r7, #20]

  if(Instance > 0U)
 800ccd8:	68fb      	ldr	r3, [r7, #12]
 800ccda:	2b00      	cmp	r3, #0
 800ccdc:	d003      	beq.n	800cce6 <BSP_AUDIO_IN_Record+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ccde:	f06f 0301 	mvn.w	r3, #1
 800cce2:	617b      	str	r3, [r7, #20]
 800cce4:	e018      	b.n	800cd18 <BSP_AUDIO_IN_Record+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800cce6:	490f      	ldr	r1, [pc, #60]	@ (800cd24 <BSP_AUDIO_IN_Record+0x5c>)
 800cce8:	68fa      	ldr	r2, [r7, #12]
 800ccea:	4613      	mov	r3, r2
 800ccec:	005b      	lsls	r3, r3, #1
 800ccee:	4413      	add	r3, r2
 800ccf0:	011b      	lsls	r3, r3, #4
 800ccf2:	440b      	add	r3, r1
 800ccf4:	330c      	adds	r3, #12
 800ccf6:	681b      	ldr	r3, [r3, #0]
 800ccf8:	08db      	lsrs	r3, r3, #3
 800ccfa:	687a      	ldr	r2, [r7, #4]
 800ccfc:	fbb2 f3f3 	udiv	r3, r2, r3
 800cd00:	b29b      	uxth	r3, r3
 800cd02:	461a      	mov	r2, r3
 800cd04:	68b9      	ldr	r1, [r7, #8]
 800cd06:	4808      	ldr	r0, [pc, #32]	@ (800cd28 <BSP_AUDIO_IN_Record+0x60>)
 800cd08:	f011 fd98 	bl	801e83c <HAL_SAI_Receive_DMA>
 800cd0c:	4603      	mov	r3, r0
 800cd0e:	2b00      	cmp	r3, #0
 800cd10:	d002      	beq.n	800cd18 <BSP_AUDIO_IN_Record+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800cd12:	f06f 0303 	mvn.w	r3, #3
 800cd16:	617b      	str	r3, [r7, #20]
    }
  }
  /* Return BSP status */
  return ret;
 800cd18:	697b      	ldr	r3, [r7, #20]
}
 800cd1a:	4618      	mov	r0, r3
 800cd1c:	3718      	adds	r7, #24
 800cd1e:	46bd      	mov	sp, r7
 800cd20:	bd80      	pop	{r7, pc}
 800cd22:	bf00      	nop
 800cd24:	240078a4 	.word	0x240078a4
 800cd28:	240077c4 	.word	0x240077c4

0800cd2c <BSP_AUDIO_IN_Stop>:
  * @brief  Stop audio recording.
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_Stop(uint32_t Instance)
{
 800cd2c:	b580      	push	{r7, lr}
 800cd2e:	b084      	sub	sp, #16
 800cd30:	af00      	add	r7, sp, #0
 800cd32:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800cd34:	2300      	movs	r3, #0
 800cd36:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800cd38:	687b      	ldr	r3, [r7, #4]
 800cd3a:	2b01      	cmp	r3, #1
 800cd3c:	d903      	bls.n	800cd46 <BSP_AUDIO_IN_Stop+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800cd3e:	f06f 0301 	mvn.w	r3, #1
 800cd42:	60fb      	str	r3, [r7, #12]
 800cd44:	e01c      	b.n	800cd80 <BSP_AUDIO_IN_Stop+0x54>
  }
  else
  {

      if(Instance == 0U)
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	2b00      	cmp	r3, #0
 800cd4a:	d10d      	bne.n	800cd68 <BSP_AUDIO_IN_Stop+0x3c>
      {
        /* Call the Media layer stop function */
        if(Audio_Drv->Stop(Audio_CompObj, CODEC_PDWN_SW) != BSP_ERROR_NONE)
 800cd4c:	4b14      	ldr	r3, [pc, #80]	@ (800cda0 <BSP_AUDIO_IN_Stop+0x74>)
 800cd4e:	681b      	ldr	r3, [r3, #0]
 800cd50:	699b      	ldr	r3, [r3, #24]
 800cd52:	4a14      	ldr	r2, [pc, #80]	@ (800cda4 <BSP_AUDIO_IN_Stop+0x78>)
 800cd54:	6812      	ldr	r2, [r2, #0]
 800cd56:	2101      	movs	r1, #1
 800cd58:	4610      	mov	r0, r2
 800cd5a:	4798      	blx	r3
 800cd5c:	4603      	mov	r3, r0
 800cd5e:	2b00      	cmp	r3, #0
 800cd60:	d002      	beq.n	800cd68 <BSP_AUDIO_IN_Stop+0x3c>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800cd62:	f06f 0304 	mvn.w	r3, #4
 800cd66:	60fb      	str	r3, [r7, #12]
        }
      }

      if(ret == BSP_ERROR_NONE)
 800cd68:	68fb      	ldr	r3, [r7, #12]
 800cd6a:	2b00      	cmp	r3, #0
 800cd6c:	d108      	bne.n	800cd80 <BSP_AUDIO_IN_Stop+0x54>
      {
        if(HAL_SAI_DMAStop(&haudio_in_sai) != HAL_OK)
 800cd6e:	480e      	ldr	r0, [pc, #56]	@ (800cda8 <BSP_AUDIO_IN_Stop+0x7c>)
 800cd70:	f011 fc2f 	bl	801e5d2 <HAL_SAI_DMAStop>
 800cd74:	4603      	mov	r3, r0
 800cd76:	2b00      	cmp	r3, #0
 800cd78:	d002      	beq.n	800cd80 <BSP_AUDIO_IN_Stop+0x54>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 800cd7a:	f06f 0303 	mvn.w	r3, #3
 800cd7e:	60fb      	str	r3, [r7, #12]
      }
    }


    /* Update BSP AUDIO IN state */
    Audio_In_Ctx[Instance].State = AUDIO_IN_STATE_STOP;
 800cd80:	490a      	ldr	r1, [pc, #40]	@ (800cdac <BSP_AUDIO_IN_Stop+0x80>)
 800cd82:	687a      	ldr	r2, [r7, #4]
 800cd84:	4613      	mov	r3, r2
 800cd86:	005b      	lsls	r3, r3, #1
 800cd88:	4413      	add	r3, r2
 800cd8a:	011b      	lsls	r3, r3, #4
 800cd8c:	440b      	add	r3, r1
 800cd8e:	3324      	adds	r3, #36	@ 0x24
 800cd90:	2202      	movs	r2, #2
 800cd92:	601a      	str	r2, [r3, #0]

  /* Return BSP status */
  return ret;
 800cd94:	68fb      	ldr	r3, [r7, #12]
}
 800cd96:	4618      	mov	r0, r3
 800cd98:	3710      	adds	r7, #16
 800cd9a:	46bd      	mov	sp, r7
 800cd9c:	bd80      	pop	{r7, pc}
 800cd9e:	bf00      	nop
 800cda0:	24007680 	.word	0x24007680
 800cda4:	24007728 	.word	0x24007728
 800cda8:	240077c4 	.word	0x240077c4
 800cdac:	240078a4 	.word	0x240078a4

0800cdb0 <BSP_AUDIO_IN_RecordPDM>:
  * @param  pBuf     Main buffer pointer for the recorded data storing
  * @param  NbrOfBytes  Size of the record buffer
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_RecordPDM(uint32_t Instance, uint8_t* pBuf, uint32_t NbrOfBytes)
{
 800cdb0:	b580      	push	{r7, lr}
 800cdb2:	b086      	sub	sp, #24
 800cdb4:	af00      	add	r7, sp, #0
 800cdb6:	60f8      	str	r0, [r7, #12]
 800cdb8:	60b9      	str	r1, [r7, #8]
 800cdba:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800cdbc:	2300      	movs	r3, #0
 800cdbe:	617b      	str	r3, [r7, #20]

  if(Instance != 1U)
 800cdc0:	68fb      	ldr	r3, [r7, #12]
 800cdc2:	2b01      	cmp	r3, #1
 800cdc4:	d003      	beq.n	800cdce <BSP_AUDIO_IN_RecordPDM+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800cdc6:	f06f 0301 	mvn.w	r3, #1
 800cdca:	617b      	str	r3, [r7, #20]
 800cdcc:	e018      	b.n	800ce00 <BSP_AUDIO_IN_RecordPDM+0x50>
  }
  else
  {
    /* Start the process receive DMA */
    if(HAL_SAI_Receive_DMA(&haudio_in_sai, (uint8_t*)pBuf, (uint16_t)(NbrOfBytes/(Audio_In_Ctx[Instance].BitsPerSample/8U))) != HAL_OK)
 800cdce:	490f      	ldr	r1, [pc, #60]	@ (800ce0c <BSP_AUDIO_IN_RecordPDM+0x5c>)
 800cdd0:	68fa      	ldr	r2, [r7, #12]
 800cdd2:	4613      	mov	r3, r2
 800cdd4:	005b      	lsls	r3, r3, #1
 800cdd6:	4413      	add	r3, r2
 800cdd8:	011b      	lsls	r3, r3, #4
 800cdda:	440b      	add	r3, r1
 800cddc:	330c      	adds	r3, #12
 800cdde:	681b      	ldr	r3, [r3, #0]
 800cde0:	08db      	lsrs	r3, r3, #3
 800cde2:	687a      	ldr	r2, [r7, #4]
 800cde4:	fbb2 f3f3 	udiv	r3, r2, r3
 800cde8:	b29b      	uxth	r3, r3
 800cdea:	461a      	mov	r2, r3
 800cdec:	68b9      	ldr	r1, [r7, #8]
 800cdee:	4808      	ldr	r0, [pc, #32]	@ (800ce10 <BSP_AUDIO_IN_RecordPDM+0x60>)
 800cdf0:	f011 fd24 	bl	801e83c <HAL_SAI_Receive_DMA>
 800cdf4:	4603      	mov	r3, r0
 800cdf6:	2b00      	cmp	r3, #0
 800cdf8:	d002      	beq.n	800ce00 <BSP_AUDIO_IN_RecordPDM+0x50>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800cdfa:	f06f 0303 	mvn.w	r3, #3
 800cdfe:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status */
  return ret;
 800ce00:	697b      	ldr	r3, [r7, #20]
}
 800ce02:	4618      	mov	r0, r3
 800ce04:	3718      	adds	r7, #24
 800ce06:	46bd      	mov	sp, r7
 800ce08:	bd80      	pop	{r7, pc}
 800ce0a:	bf00      	nop
 800ce0c:	240078a4 	.word	0x240078a4
 800ce10:	240077c4 	.word	0x240077c4

0800ce14 <BSP_AUDIO_IN_GetState>:
  * @param  Instance  AUDIO IN Instance. It can be 0 when SAI is used
  * @param  State     Audio Out state
  * @retval BSP status
  */
int32_t BSP_AUDIO_IN_GetState(uint32_t Instance, uint32_t *State)
{
 800ce14:	b480      	push	{r7}
 800ce16:	b085      	sub	sp, #20
 800ce18:	af00      	add	r7, sp, #0
 800ce1a:	6078      	str	r0, [r7, #4]
 800ce1c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ce1e:	2300      	movs	r3, #0
 800ce20:	60fb      	str	r3, [r7, #12]

  if(Instance >= AUDIO_IN_INSTANCES_NBR)
 800ce22:	687b      	ldr	r3, [r7, #4]
 800ce24:	2b01      	cmp	r3, #1
 800ce26:	d903      	bls.n	800ce30 <BSP_AUDIO_IN_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ce28:	f06f 0301 	mvn.w	r3, #1
 800ce2c:	60fb      	str	r3, [r7, #12]
 800ce2e:	e00a      	b.n	800ce46 <BSP_AUDIO_IN_GetState+0x32>
  }
  else
  {
    /* Input State to be returned */
    *State = Audio_In_Ctx[Instance].State;
 800ce30:	4908      	ldr	r1, [pc, #32]	@ (800ce54 <BSP_AUDIO_IN_GetState+0x40>)
 800ce32:	687a      	ldr	r2, [r7, #4]
 800ce34:	4613      	mov	r3, r2
 800ce36:	005b      	lsls	r3, r3, #1
 800ce38:	4413      	add	r3, r2
 800ce3a:	011b      	lsls	r3, r3, #4
 800ce3c:	440b      	add	r3, r1
 800ce3e:	3324      	adds	r3, #36	@ 0x24
 800ce40:	681a      	ldr	r2, [r3, #0]
 800ce42:	683b      	ldr	r3, [r7, #0]
 800ce44:	601a      	str	r2, [r3, #0]
  }
  return ret;
 800ce46:	68fb      	ldr	r3, [r7, #12]
}
 800ce48:	4618      	mov	r0, r3
 800ce4a:	3714      	adds	r7, #20
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce52:	4770      	bx	lr
 800ce54:	240078a4 	.word	0x240078a4

0800ce58 <BSP_AUDIO_IN_IRQHandler>:
  *         - AUDIO_IN_DEVICE_ANALOG_MIC
  *         - AUDIO_IN_DEVICE_DIGITAL_MIC
  * @retval None
  */
void BSP_AUDIO_IN_IRQHandler(uint32_t Instance, uint32_t InputDevice)
{
 800ce58:	b580      	push	{r7, lr}
 800ce5a:	b082      	sub	sp, #8
 800ce5c:	af00      	add	r7, sp, #0
 800ce5e:	6078      	str	r0, [r7, #4]
 800ce60:	6039      	str	r1, [r7, #0]
  if ((InputDevice == AUDIO_IN_DEVICE_DIGITAL_MIC) || (InputDevice == AUDIO_IN_DEVICE_ANALOG_MIC))
 800ce62:	683b      	ldr	r3, [r7, #0]
 800ce64:	2b10      	cmp	r3, #16
 800ce66:	d002      	beq.n	800ce6e <BSP_AUDIO_IN_IRQHandler+0x16>
 800ce68:	683b      	ldr	r3, [r7, #0]
 800ce6a:	2b00      	cmp	r3, #0
 800ce6c:	d105      	bne.n	800ce7a <BSP_AUDIO_IN_IRQHandler+0x22>
  {
    HAL_DMA_IRQHandler(haudio_in_sai.hdmarx);
 800ce6e:	4b05      	ldr	r3, [pc, #20]	@ (800ce84 <BSP_AUDIO_IN_IRQHandler+0x2c>)
 800ce70:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800ce74:	4618      	mov	r0, r3
 800ce76:	f007 fc7f 	bl	8014778 <HAL_DMA_IRQHandler>
  }
}
 800ce7a:	bf00      	nop
 800ce7c:	3708      	adds	r7, #8
 800ce7e:	46bd      	mov	sp, r7
 800ce80:	bd80      	pop	{r7, pc}
 800ce82:	bf00      	nop
 800ce84:	240077c4 	.word	0x240077c4

0800ce88 <HAL_SAI_RxHalfCpltCallback>:
  * @brief  Half reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxHalfCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ce88:	b580      	push	{r7, lr}
 800ce8a:	b082      	sub	sp, #8
 800ce8c:	af00      	add	r7, sp, #0
 800ce8e:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the first half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 800ce90:	687b      	ldr	r3, [r7, #4]
 800ce92:	681b      	ldr	r3, [r3, #0]
 800ce94:	4a06      	ldr	r2, [pc, #24]	@ (800ceb0 <HAL_SAI_RxHalfCpltCallback+0x28>)
 800ce96:	4293      	cmp	r3, r2
 800ce98:	d103      	bne.n	800cea2 <HAL_SAI_RxHalfCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(0);
 800ce9a:	2000      	movs	r0, #0
 800ce9c:	f7fb fc10 	bl	80086c0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
  }
}
 800cea0:	e002      	b.n	800cea8 <HAL_SAI_RxHalfCpltCallback+0x20>
    BSP_AUDIO_IN_HalfTransfer_CallBack(1);
 800cea2:	2001      	movs	r0, #1
 800cea4:	f7fb fc0c 	bl	80086c0 <BSP_AUDIO_IN_HalfTransfer_CallBack>
}
 800cea8:	bf00      	nop
 800ceaa:	3708      	adds	r7, #8
 800ceac:	46bd      	mov	sp, r7
 800ceae:	bd80      	pop	{r7, pc}
 800ceb0:	40015824 	.word	0x40015824

0800ceb4 <HAL_SAI_RxCpltCallback>:
  * @brief  Reception complete callback.
  * @param  hsai   SAI handle.
  * @retval None
  */
void HAL_SAI_RxCpltCallback(SAI_HandleTypeDef *hsai)
{
 800ceb4:	b580      	push	{r7, lr}
 800ceb6:	b082      	sub	sp, #8
 800ceb8:	af00      	add	r7, sp, #0
 800ceba:	6078      	str	r0, [r7, #4]
  /* Call the record update function to get the second half */
  if(hsai->Instance == AUDIO_IN_SAIx)
 800cebc:	687b      	ldr	r3, [r7, #4]
 800cebe:	681b      	ldr	r3, [r3, #0]
 800cec0:	4a06      	ldr	r2, [pc, #24]	@ (800cedc <HAL_SAI_RxCpltCallback+0x28>)
 800cec2:	4293      	cmp	r3, r2
 800cec4:	d103      	bne.n	800cece <HAL_SAI_RxCpltCallback+0x1a>
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(0);
 800cec6:	2000      	movs	r0, #0
 800cec8:	f7fb fb78 	bl	80085bc <BSP_AUDIO_IN_TransferComplete_CallBack>
  }
  else
  {
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
  }
}
 800cecc:	e002      	b.n	800ced4 <HAL_SAI_RxCpltCallback+0x20>
    BSP_AUDIO_IN_TransferComplete_CallBack(1);
 800cece:	2001      	movs	r0, #1
 800ced0:	f7fb fb74 	bl	80085bc <BSP_AUDIO_IN_TransferComplete_CallBack>
}
 800ced4:	bf00      	nop
 800ced6:	3708      	adds	r7, #8
 800ced8:	46bd      	mov	sp, r7
 800ceda:	bd80      	pop	{r7, pc}
 800cedc:	40015824 	.word	0x40015824

0800cee0 <WM8994_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t WM8994_Probe(void)
{
 800cee0:	b580      	push	{r7, lr}
 800cee2:	b088      	sub	sp, #32
 800cee4:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800cee6:	2300      	movs	r3, #0
 800cee8:	61fb      	str	r3, [r7, #28]
  WM8994_IO_t              IOCtx;
  static WM8994_Object_t   WM8994Obj;
  uint32_t id;

  /* Configure the audio driver */
  IOCtx.Address     = AUDIO_I2C_ADDRESS;
 800ceea:	2334      	movs	r3, #52	@ 0x34
 800ceec:	81bb      	strh	r3, [r7, #12]
  IOCtx.Init        = BSP_I2C4_Init;
 800ceee:	4b20      	ldr	r3, [pc, #128]	@ (800cf70 <WM8994_Probe+0x90>)
 800cef0:	607b      	str	r3, [r7, #4]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800cef2:	4b20      	ldr	r3, [pc, #128]	@ (800cf74 <WM8994_Probe+0x94>)
 800cef4:	60bb      	str	r3, [r7, #8]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800cef6:	4b20      	ldr	r3, [pc, #128]	@ (800cf78 <WM8994_Probe+0x98>)
 800cef8:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800cefa:	4b20      	ldr	r3, [pc, #128]	@ (800cf7c <WM8994_Probe+0x9c>)
 800cefc:	613b      	str	r3, [r7, #16]
  IOCtx.GetTick     = BSP_GetTick;
 800cefe:	4b20      	ldr	r3, [pc, #128]	@ (800cf80 <WM8994_Probe+0xa0>)
 800cf00:	61bb      	str	r3, [r7, #24]

  if(WM8994_RegisterBusIO (&WM8994Obj, &IOCtx) != WM8994_OK)
 800cf02:	1d3b      	adds	r3, r7, #4
 800cf04:	4619      	mov	r1, r3
 800cf06:	481f      	ldr	r0, [pc, #124]	@ (800cf84 <WM8994_Probe+0xa4>)
 800cf08:	f7fa faca 	bl	80074a0 <WM8994_RegisterBusIO>
 800cf0c:	4603      	mov	r3, r0
 800cf0e:	2b00      	cmp	r3, #0
 800cf10:	d003      	beq.n	800cf1a <WM8994_Probe+0x3a>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800cf12:	f06f 0307 	mvn.w	r3, #7
 800cf16:	61fb      	str	r3, [r7, #28]
 800cf18:	e024      	b.n	800cf64 <WM8994_Probe+0x84>
  }
  else
  {
    /* Reset the codec */
    if(WM8994_Reset(&WM8994Obj) != WM8994_OK)
 800cf1a:	481a      	ldr	r0, [pc, #104]	@ (800cf84 <WM8994_Probe+0xa4>)
 800cf1c:	f7fa faa8 	bl	8007470 <WM8994_Reset>
 800cf20:	4603      	mov	r3, r0
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d003      	beq.n	800cf2e <WM8994_Probe+0x4e>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cf26:	f06f 0304 	mvn.w	r3, #4
 800cf2a:	61fb      	str	r3, [r7, #28]
 800cf2c:	e01a      	b.n	800cf64 <WM8994_Probe+0x84>
    }
    else if(WM8994_ReadID(&WM8994Obj, &id) != WM8994_OK)
 800cf2e:	463b      	mov	r3, r7
 800cf30:	4619      	mov	r1, r3
 800cf32:	4814      	ldr	r0, [pc, #80]	@ (800cf84 <WM8994_Probe+0xa4>)
 800cf34:	f7f9 fc97 	bl	8006866 <WM8994_ReadID>
 800cf38:	4603      	mov	r3, r0
 800cf3a:	2b00      	cmp	r3, #0
 800cf3c:	d003      	beq.n	800cf46 <WM8994_Probe+0x66>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800cf3e:	f06f 0304 	mvn.w	r3, #4
 800cf42:	61fb      	str	r3, [r7, #28]
 800cf44:	e00e      	b.n	800cf64 <WM8994_Probe+0x84>
    }
    else if(id != WM8994_ID)
 800cf46:	683b      	ldr	r3, [r7, #0]
 800cf48:	f648 1294 	movw	r2, #35220	@ 0x8994
 800cf4c:	4293      	cmp	r3, r2
 800cf4e:	d003      	beq.n	800cf58 <WM8994_Probe+0x78>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800cf50:	f06f 0306 	mvn.w	r3, #6
 800cf54:	61fb      	str	r3, [r7, #28]
 800cf56:	e005      	b.n	800cf64 <WM8994_Probe+0x84>
    }
    else
    {
      Audio_Drv = (AUDIO_Drv_t *) &WM8994_Driver;
 800cf58:	4b0b      	ldr	r3, [pc, #44]	@ (800cf88 <WM8994_Probe+0xa8>)
 800cf5a:	4a0c      	ldr	r2, [pc, #48]	@ (800cf8c <WM8994_Probe+0xac>)
 800cf5c:	601a      	str	r2, [r3, #0]
      Audio_CompObj = &WM8994Obj;
 800cf5e:	4b0c      	ldr	r3, [pc, #48]	@ (800cf90 <WM8994_Probe+0xb0>)
 800cf60:	4a08      	ldr	r2, [pc, #32]	@ (800cf84 <WM8994_Probe+0xa4>)
 800cf62:	601a      	str	r2, [r3, #0]
    }
  }
  return ret;
 800cf64:	69fb      	ldr	r3, [r7, #28]
}
 800cf66:	4618      	mov	r0, r3
 800cf68:	3720      	adds	r7, #32
 800cf6a:	46bd      	mov	sp, r7
 800cf6c:	bd80      	pop	{r7, pc}
 800cf6e:	bf00      	nop
 800cf70:	0800d5b5 	.word	0x0800d5b5
 800cf74:	0800d629 	.word	0x0800d629
 800cf78:	0800d809 	.word	0x0800d809
 800cf7c:	0800d7ad 	.word	0x0800d7ad
 800cf80:	0800d865 	.word	0x0800d865
 800cf84:	24007904 	.word	0x24007904
 800cf88:	24007680 	.word	0x24007680
 800cf8c:	24000558 	.word	0x24000558
 800cf90:	24007728 	.word	0x24007728

0800cf94 <SAI_MspInit>:
  * @brief  Initialize BSP_AUDIO_OUT MSP.
  * @param  hsai  SAI handle
  * @retval None
  */
static void SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 800cf94:	b580      	push	{r7, lr}
 800cf96:	b098      	sub	sp, #96	@ 0x60
 800cf98:	af00      	add	r7, sp, #0
 800cf9a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  static DMA_HandleTypeDef hdma_sai_tx, hdma_sai_rx;

    /* Enable SAI clock */
    AUDIO_OUT_SAIx_CLK_ENABLE();
 800cf9c:	4b75      	ldr	r3, [pc, #468]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cf9e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfa2:	4a74      	ldr	r2, [pc, #464]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfa4:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800cfa8:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800cfac:	4b71      	ldr	r3, [pc, #452]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfae:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800cfb2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800cfb6:	64bb      	str	r3, [r7, #72]	@ 0x48
 800cfb8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

    /* Enable GPIO clock */
    AUDIO_OUT_SAIx_SCK_ENABLE();
 800cfba:	4b6e      	ldr	r3, [pc, #440]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfbc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfc0:	4a6c      	ldr	r2, [pc, #432]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfc2:	f043 0310 	orr.w	r3, r3, #16
 800cfc6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cfca:	4b6a      	ldr	r3, [pc, #424]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfcc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfd0:	f003 0310 	and.w	r3, r3, #16
 800cfd4:	647b      	str	r3, [r7, #68]	@ 0x44
 800cfd6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
    AUDIO_OUT_SAIx_SD_ENABLE();
 800cfd8:	4b66      	ldr	r3, [pc, #408]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfda:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfde:	4a65      	ldr	r2, [pc, #404]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfe0:	f043 0310 	orr.w	r3, r3, #16
 800cfe4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800cfe8:	4b62      	ldr	r3, [pc, #392]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cfea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cfee:	f003 0310 	and.w	r3, r3, #16
 800cff2:	643b      	str	r3, [r7, #64]	@ 0x40
 800cff4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
    AUDIO_OUT_SAIx_FS_ENABLE();
 800cff6:	4b5f      	ldr	r3, [pc, #380]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cff8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800cffc:	4a5d      	ldr	r2, [pc, #372]	@ (800d174 <SAI_MspInit+0x1e0>)
 800cffe:	f043 0310 	orr.w	r3, r3, #16
 800d002:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d006:	4b5b      	ldr	r3, [pc, #364]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d008:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d00c:	f003 0310 	and.w	r3, r3, #16
 800d010:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800d012:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800d014:	2310      	movs	r3, #16
 800d016:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800d018:	2302      	movs	r3, #2
 800d01a:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d01c:	2300      	movs	r3, #0
 800d01e:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d020:	2303      	movs	r3, #3
 800d022:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_FS_AF;
 800d024:	2306      	movs	r3, #6
 800d026:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_FS_GPIO_PORT, &gpio_init_structure);
 800d028:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d02c:	4619      	mov	r1, r3
 800d02e:	4852      	ldr	r0, [pc, #328]	@ (800d178 <SAI_MspInit+0x1e4>)
 800d030:	f00a fc6a 	bl	8017908 <HAL_GPIO_Init>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800d034:	2320      	movs	r3, #32
 800d036:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SCK_AF;
 800d038:	2306      	movs	r3, #6
 800d03a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SCK_GPIO_PORT, &gpio_init_structure);
 800d03c:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d040:	4619      	mov	r1, r3
 800d042:	484d      	ldr	r0, [pc, #308]	@ (800d178 <SAI_MspInit+0x1e4>)
 800d044:	f00a fc60 	bl	8017908 <HAL_GPIO_Init>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800d048:	2340      	movs	r3, #64	@ 0x40
 800d04a:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Alternate = AUDIO_OUT_SAIx_SD_AF;
 800d04c:	2306      	movs	r3, #6
 800d04e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_OUT_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800d050:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d054:	4619      	mov	r1, r3
 800d056:	4848      	ldr	r0, [pc, #288]	@ (800d178 <SAI_MspInit+0x1e4>)
 800d058:	f00a fc56 	bl	8017908 <HAL_GPIO_Init>

    if(hsai->Instance != AUDIO_IN_SAI_PDMx)
 800d05c:	687b      	ldr	r3, [r7, #4]
 800d05e:	681b      	ldr	r3, [r3, #0]
 800d060:	4a46      	ldr	r2, [pc, #280]	@ (800d17c <SAI_MspInit+0x1e8>)
 800d062:	4293      	cmp	r3, r2
 800d064:	d01e      	beq.n	800d0a4 <SAI_MspInit+0x110>
    {
      if(haudio_in_sai.State != HAL_SAI_STATE_READY)
 800d066:	4b46      	ldr	r3, [pc, #280]	@ (800d180 <SAI_MspInit+0x1ec>)
 800d068:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 800d06c:	b2db      	uxtb	r3, r3
 800d06e:	2b01      	cmp	r3, #1
 800d070:	d018      	beq.n	800d0a4 <SAI_MspInit+0x110>
      {
        AUDIO_OUT_SAIx_MCLK_ENABLE();
 800d072:	4b40      	ldr	r3, [pc, #256]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d074:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d078:	4a3e      	ldr	r2, [pc, #248]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d07a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d07e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d082:	4b3c      	ldr	r3, [pc, #240]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d084:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d088:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d08c:	63bb      	str	r3, [r7, #56]	@ 0x38
 800d08e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
        gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800d090:	2380      	movs	r3, #128	@ 0x80
 800d092:	64fb      	str	r3, [r7, #76]	@ 0x4c
        gpio_init_structure.Alternate = AUDIO_OUT_SAIx_MCLK_AF;
 800d094:	2306      	movs	r3, #6
 800d096:	65fb      	str	r3, [r7, #92]	@ 0x5c
        HAL_GPIO_Init(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, &gpio_init_structure);
 800d098:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d09c:	4619      	mov	r1, r3
 800d09e:	4839      	ldr	r0, [pc, #228]	@ (800d184 <SAI_MspInit+0x1f0>)
 800d0a0:	f00a fc32 	bl	8017908 <HAL_GPIO_Init>
      }
    }

  if(hsai->Instance == AUDIO_OUT_SAIx)
 800d0a4:	687b      	ldr	r3, [r7, #4]
 800d0a6:	681b      	ldr	r3, [r3, #0]
 800d0a8:	4a37      	ldr	r2, [pc, #220]	@ (800d188 <SAI_MspInit+0x1f4>)
 800d0aa:	4293      	cmp	r3, r2
 800d0ac:	f040 80b3 	bne.w	800d216 <SAI_MspInit+0x282>
  {

	    /* Enable SAI clock */
    __HAL_RCC_SAI1_CLK_ENABLE();
 800d0b0:	4b30      	ldr	r3, [pc, #192]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d0b2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0b6:	4a2f      	ldr	r2, [pc, #188]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d0b8:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d0bc:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d0c0:	4b2c      	ldr	r3, [pc, #176]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d0c2:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d0c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d0ca:	637b      	str	r3, [r7, #52]	@ 0x34
 800d0cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34

  /* CODEC_SAI pins configuration: FS, SCK and SD pins */
  /* Enable FS, SCK and SD clocks */
 __HAL_RCC_GPIOE_CLK_ENABLE();
 800d0ce:	4b29      	ldr	r3, [pc, #164]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d0d0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0d4:	4a27      	ldr	r2, [pc, #156]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d0d6:	f043 0310 	orr.w	r3, r3, #16
 800d0da:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d0de:	4b25      	ldr	r3, [pc, #148]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d0e0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d0e4:	f003 0310 	and.w	r3, r3, #16
 800d0e8:	633b      	str	r3, [r7, #48]	@ 0x30
 800d0ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  /* Enable FS, SCK and SD pins */
  gpio_init_structure.Pin = GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_6;
 800d0ec:	2370      	movs	r3, #112	@ 0x70
 800d0ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
  gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800d0f0:	2302      	movs	r3, #2
 800d0f2:	653b      	str	r3, [r7, #80]	@ 0x50
  gpio_init_structure.Pull = GPIO_NOPULL;
 800d0f4:	2300      	movs	r3, #0
 800d0f6:	657b      	str	r3, [r7, #84]	@ 0x54
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800d0f8:	2303      	movs	r3, #3
 800d0fa:	65bb      	str	r3, [r7, #88]	@ 0x58
  gpio_init_structure.Alternate = GPIO_AF6_SAI1;
 800d0fc:	2306      	movs	r3, #6
 800d0fe:	65fb      	str	r3, [r7, #92]	@ 0x5c
  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 800d100:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d104:	4619      	mov	r1, r3
 800d106:	481c      	ldr	r0, [pc, #112]	@ (800d178 <SAI_MspInit+0x1e4>)
 800d108:	f00a fbfe 	bl	8017908 <HAL_GPIO_Init>

  /* Enable MCLK clock */
   __HAL_RCC_GPIOG_CLK_ENABLE();
 800d10c:	4b19      	ldr	r3, [pc, #100]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d10e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d112:	4a18      	ldr	r2, [pc, #96]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d114:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d118:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d11c:	4b15      	ldr	r3, [pc, #84]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d11e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d122:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800d126:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800d128:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  /* Enable MCLK pin */
  gpio_init_structure.Pin = GPIO_PIN_7;
 800d12a:	2380      	movs	r3, #128	@ 0x80
 800d12c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800d12e:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d132:	4619      	mov	r1, r3
 800d134:	4813      	ldr	r0, [pc, #76]	@ (800d184 <SAI_MspInit+0x1f0>)
 800d136:	f00a fbe7 	bl	8017908 <HAL_GPIO_Init>


    /* Enable the DMA clock */
    AUDIO_OUT_SAIx_DMAx_CLK_ENABLE();
 800d13a:	4b0e      	ldr	r3, [pc, #56]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d13c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d140:	4a0c      	ldr	r2, [pc, #48]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d142:	f043 0302 	orr.w	r3, r3, #2
 800d146:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d14a:	4b0a      	ldr	r3, [pc, #40]	@ (800d174 <SAI_MspInit+0x1e0>)
 800d14c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d150:	f003 0302 	and.w	r3, r3, #2
 800d154:	62bb      	str	r3, [r7, #40]	@ 0x28
 800d156:	6abb      	ldr	r3, [r7, #40]	@ 0x28

    /* Configure the hdma_saiTx handle parameters */
    if(Audio_Out_Ctx[0].BitsPerSample == AUDIO_RESOLUTION_16B)
 800d158:	4b0c      	ldr	r3, [pc, #48]	@ (800d18c <SAI_MspInit+0x1f8>)
 800d15a:	68db      	ldr	r3, [r3, #12]
 800d15c:	2b10      	cmp	r3, #16
 800d15e:	d119      	bne.n	800d194 <SAI_MspInit+0x200>
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800d160:	4b0b      	ldr	r3, [pc, #44]	@ (800d190 <SAI_MspInit+0x1fc>)
 800d162:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d166:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_HALFWORD;
 800d168:	4b09      	ldr	r3, [pc, #36]	@ (800d190 <SAI_MspInit+0x1fc>)
 800d16a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d16e:	619a      	str	r2, [r3, #24]
 800d170:	e018      	b.n	800d1a4 <SAI_MspInit+0x210>
 800d172:	bf00      	nop
 800d174:	58024400 	.word	0x58024400
 800d178:	58021000 	.word	0x58021000
 800d17c:	58005404 	.word	0x58005404
 800d180:	240077c4 	.word	0x240077c4
 800d184:	58021800 	.word	0x58021800
 800d188:	40015804 	.word	0x40015804
 800d18c:	2400785c 	.word	0x2400785c
 800d190:	2400792c 	.word	0x2400792c
    }
    else
    {
      hdma_sai_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800d194:	4baf      	ldr	r3, [pc, #700]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d196:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800d19a:	615a      	str	r2, [r3, #20]
      hdma_sai_tx.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800d19c:	4bad      	ldr	r3, [pc, #692]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d19e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800d1a2:	619a      	str	r2, [r3, #24]
    }

    hdma_sai_tx.Init.Request             = AUDIO_OUT_SAIx_DMAx_REQUEST;
 800d1a4:	4bab      	ldr	r3, [pc, #684]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1a6:	2257      	movs	r2, #87	@ 0x57
 800d1a8:	605a      	str	r2, [r3, #4]
    hdma_sai_tx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800d1aa:	4baa      	ldr	r3, [pc, #680]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1ac:	2200      	movs	r2, #0
 800d1ae:	60da      	str	r2, [r3, #12]
    hdma_sai_tx.Init.MemInc              = DMA_MINC_ENABLE;
 800d1b0:	4ba8      	ldr	r3, [pc, #672]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1b2:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d1b6:	611a      	str	r2, [r3, #16]
    hdma_sai_tx.Init.Mode                = DMA_CIRCULAR;
 800d1b8:	4ba6      	ldr	r3, [pc, #664]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1ba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d1be:	61da      	str	r2, [r3, #28]
    hdma_sai_tx.Init.Priority            = DMA_PRIORITY_HIGH;
 800d1c0:	4ba4      	ldr	r3, [pc, #656]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1c2:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d1c6:	621a      	str	r2, [r3, #32]
    hdma_sai_tx.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800d1c8:	4ba2      	ldr	r3, [pc, #648]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1ca:	2204      	movs	r2, #4
 800d1cc:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_tx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800d1ce:	4ba1      	ldr	r3, [pc, #644]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1d0:	2203      	movs	r2, #3
 800d1d2:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_tx.Init.Direction           = DMA_MEMORY_TO_PERIPH;
 800d1d4:	4b9f      	ldr	r3, [pc, #636]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1d6:	2240      	movs	r2, #64	@ 0x40
 800d1d8:	609a      	str	r2, [r3, #8]
    hdma_sai_tx.Instance                 = AUDIO_OUT_SAIx_DMAx_STREAM;
 800d1da:	4b9e      	ldr	r3, [pc, #632]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1dc:	4a9e      	ldr	r2, [pc, #632]	@ (800d458 <SAI_MspInit+0x4c4>)
 800d1de:	601a      	str	r2, [r3, #0]
    hdma_sai_tx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800d1e0:	4b9c      	ldr	r3, [pc, #624]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1e2:	2200      	movs	r2, #0
 800d1e4:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_tx.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800d1e6:	4b9b      	ldr	r3, [pc, #620]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1e8:	2200      	movs	r2, #0
 800d1ea:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmatx, hdma_sai_tx);
 800d1ec:	687b      	ldr	r3, [r7, #4]
 800d1ee:	4a99      	ldr	r2, [pc, #612]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1f0:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
 800d1f4:	4a97      	ldr	r2, [pc, #604]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1f6:	687b      	ldr	r3, [r7, #4]
 800d1f8:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    (void)HAL_DMA_DeInit(&hdma_sai_tx);
 800d1fa:	4896      	ldr	r0, [pc, #600]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d1fc:	f006 f938 	bl	8013470 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    (void)HAL_DMA_Init(&hdma_sai_tx);
 800d200:	4894      	ldr	r0, [pc, #592]	@ (800d454 <SAI_MspInit+0x4c0>)
 800d202:	f005 fdd9 	bl	8012db8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_OUT_SAIx_DMAx_IRQ, BSP_AUDIO_OUT_IT_PRIORITY, 0);
 800d206:	2200      	movs	r2, #0
 800d208:	210e      	movs	r1, #14
 800d20a:	2039      	movs	r0, #57	@ 0x39
 800d20c:	f005 f901 	bl	8012412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800d210:	2039      	movs	r0, #57	@ 0x39
 800d212:	f005 f918 	bl	8012446 <HAL_NVIC_EnableIRQ>
  }

  /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAI_PDMx)
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	681b      	ldr	r3, [r3, #0]
 800d21a:	4a90      	ldr	r2, [pc, #576]	@ (800d45c <SAI_MspInit+0x4c8>)
 800d21c:	4293      	cmp	r3, r2
 800d21e:	f040 80b8 	bne.w	800d392 <SAI_MspInit+0x3fe>
  {
     /* Enable SAI clock */
     AUDIO_IN_SAI_PDMx_CLK_ENABLE();
 800d222:	4b8f      	ldr	r3, [pc, #572]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d224:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d228:	4a8d      	ldr	r2, [pc, #564]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d22a:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d22e:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800d232:	4b8b      	ldr	r3, [pc, #556]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d234:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800d238:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d23c:	627b      	str	r3, [r7, #36]	@ 0x24
 800d23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

     AUDIO_IN_SAI_PDMx_CLK_IN_ENABLE();
 800d240:	4b87      	ldr	r3, [pc, #540]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d242:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d246:	4a86      	ldr	r2, [pc, #536]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d248:	f043 0310 	orr.w	r3, r3, #16
 800d24c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d250:	4b83      	ldr	r3, [pc, #524]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d252:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d256:	f003 0310 	and.w	r3, r3, #16
 800d25a:	623b      	str	r3, [r7, #32]
 800d25c:	6a3b      	ldr	r3, [r7, #32]
     AUDIO_IN_SAI_PDMx_DATA_IN_ENABLE();
 800d25e:	4b80      	ldr	r3, [pc, #512]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d260:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d264:	4a7e      	ldr	r2, [pc, #504]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d266:	f043 0304 	orr.w	r3, r3, #4
 800d26a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d26e:	4b7c      	ldr	r3, [pc, #496]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d270:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d274:	f003 0304 	and.w	r3, r3, #4
 800d278:	61fb      	str	r3, [r7, #28]
 800d27a:	69fb      	ldr	r3, [r7, #28]

     gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_CLK_IN_PIN;
 800d27c:	2304      	movs	r3, #4
 800d27e:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800d280:	2302      	movs	r3, #2
 800d282:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d284:	2300      	movs	r3, #0
 800d286:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800d288:	2302      	movs	r3, #2
 800d28a:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = GPIO_AF10_SAI4;
 800d28c:	230a      	movs	r3, #10
 800d28e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_CLK_IN_PORT, &gpio_init_structure);
 800d290:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d294:	4619      	mov	r1, r3
 800d296:	4873      	ldr	r0, [pc, #460]	@ (800d464 <SAI_MspInit+0x4d0>)
 800d298:	f00a fb36 	bl	8017908 <HAL_GPIO_Init>

    gpio_init_structure.Pull = GPIO_PULLUP;
 800d29c:	2301      	movs	r3, #1
 800d29e:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_MEDIUM;
 800d2a0:	2301      	movs	r3, #1
 800d2a2:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_DATA_IN_PIN;
 800d2a4:	2302      	movs	r3, #2
 800d2a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_DATA_IN_PORT, &gpio_init_structure);
 800d2a8:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d2ac:	4619      	mov	r1, r3
 800d2ae:	486e      	ldr	r0, [pc, #440]	@ (800d468 <SAI_MspInit+0x4d4>)
 800d2b0:	f00a fb2a 	bl	8017908 <HAL_GPIO_Init>

    AUDIO_IN_SAI_PDMx_FS_SCK_ENABLE();
 800d2b4:	4b6a      	ldr	r3, [pc, #424]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d2b6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2ba:	4a69      	ldr	r2, [pc, #420]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d2bc:	f043 0310 	orr.w	r3, r3, #16
 800d2c0:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d2c4:	4b66      	ldr	r3, [pc, #408]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d2c6:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2ca:	f003 0310 	and.w	r3, r3, #16
 800d2ce:	61bb      	str	r3, [r7, #24]
 800d2d0:	69bb      	ldr	r3, [r7, #24]

    /* CODEC_SAI pins configuration: FS, SCK, MCK and SD pins ------------------*/
    gpio_init_structure.Pin = AUDIO_IN_SAI_PDMx_FS_PIN | AUDIO_IN_SAI_PDMx_SCK_PIN;
 800d2d2:	2330      	movs	r3, #48	@ 0x30
 800d2d4:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800d2d6:	2302      	movs	r3, #2
 800d2d8:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d2da:	2300      	movs	r3, #0
 800d2dc:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800d2de:	2302      	movs	r3, #2
 800d2e0:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAI_PDMx_FS_SCK_AF;
 800d2e2:	2308      	movs	r3, #8
 800d2e4:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAI_PDMx_FS_SCK_GPIO_PORT, &gpio_init_structure);
 800d2e6:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d2ea:	4619      	mov	r1, r3
 800d2ec:	485d      	ldr	r0, [pc, #372]	@ (800d464 <SAI_MspInit+0x4d0>)
 800d2ee:	f00a fb0b 	bl	8017908 <HAL_GPIO_Init>

    /* Enable the DMA clock */
      __HAL_RCC_BDMA_CLK_ENABLE();
 800d2f2:	4b5b      	ldr	r3, [pc, #364]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d2f4:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d2f8:	4a59      	ldr	r2, [pc, #356]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d2fa:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800d2fe:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d302:	4b57      	ldr	r3, [pc, #348]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d304:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d308:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800d30c:	617b      	str	r3, [r7, #20]
 800d30e:	697b      	ldr	r3, [r7, #20]
    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAI_PDMx_DMAx_REQUEST;
 800d310:	4b56      	ldr	r3, [pc, #344]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d312:	220f      	movs	r2, #15
 800d314:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800d316:	4b55      	ldr	r3, [pc, #340]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d318:	2200      	movs	r2, #0
 800d31a:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800d31c:	4b53      	ldr	r3, [pc, #332]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d31e:	2200      	movs	r2, #0
 800d320:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800d322:	4b52      	ldr	r3, [pc, #328]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d324:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d328:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAI_PDMx_DMAx_PERIPH_DATA_SIZE;
 800d32a:	4b50      	ldr	r3, [pc, #320]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d32c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d330:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAI_PDMx_DMAx_MEM_DATA_SIZE;
 800d332:	4b4e      	ldr	r3, [pc, #312]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d334:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d338:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800d33a:	4b4c      	ldr	r3, [pc, #304]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d33c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d340:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800d342:	4b4a      	ldr	r3, [pc, #296]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d344:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d348:	621a      	str	r2, [r3, #32]
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800d34a:	4b48      	ldr	r3, [pc, #288]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d34c:	2200      	movs	r2, #0
 800d34e:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800d350:	4b46      	ldr	r3, [pc, #280]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d352:	2203      	movs	r2, #3
 800d354:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800d356:	4b45      	ldr	r3, [pc, #276]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d358:	2200      	movs	r2, #0
 800d35a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800d35c:	4b43      	ldr	r3, [pc, #268]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d35e:	2200      	movs	r2, #0
 800d360:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAI_PDMx_DMAx_STREAM;
 800d362:	4b42      	ldr	r3, [pc, #264]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d364:	4a42      	ldr	r2, [pc, #264]	@ (800d470 <SAI_MspInit+0x4dc>)
 800d366:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800d368:	687b      	ldr	r3, [r7, #4]
 800d36a:	4a40      	ldr	r2, [pc, #256]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d36c:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800d370:	4a3e      	ldr	r2, [pc, #248]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800d376:	483d      	ldr	r0, [pc, #244]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d378:	f006 f87a 	bl	8013470 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800d37c:	483b      	ldr	r0, [pc, #236]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d37e:	f005 fd1b 	bl	8012db8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAI_PDMx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800d382:	2200      	movs	r2, #0
 800d384:	210f      	movs	r1, #15
 800d386:	2082      	movs	r0, #130	@ 0x82
 800d388:	f005 f843 	bl	8012412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAI_PDMx_DMAx_IRQ);
 800d38c:	2082      	movs	r0, #130	@ 0x82
 800d38e:	f005 f85a 	bl	8012446 <HAL_NVIC_EnableIRQ>
  }
   /* Audio In Msp initialization */
  if(hsai->Instance == AUDIO_IN_SAIx)
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	681b      	ldr	r3, [r3, #0]
 800d396:	4a37      	ldr	r2, [pc, #220]	@ (800d474 <SAI_MspInit+0x4e0>)
 800d398:	4293      	cmp	r3, r2
 800d39a:	f040 8091 	bne.w	800d4c0 <SAI_MspInit+0x52c>
  {
        /* Enable SAI clock */
    AUDIO_IN_SAIx_CLK_ENABLE();
 800d39e:	4b30      	ldr	r3, [pc, #192]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3a0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3a4:	4a2e      	ldr	r2, [pc, #184]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3a6:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 800d3aa:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
 800d3ae:	4b2c      	ldr	r3, [pc, #176]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3b0:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d3b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800d3b8:	613b      	str	r3, [r7, #16]
 800d3ba:	693b      	ldr	r3, [r7, #16]

    /* Enable SD GPIO clock */
    AUDIO_IN_SAIx_SD_ENABLE();
 800d3bc:	4b28      	ldr	r3, [pc, #160]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3c2:	4a27      	ldr	r2, [pc, #156]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3c4:	f043 0310 	orr.w	r3, r3, #16
 800d3c8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800d3cc:	4b24      	ldr	r3, [pc, #144]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3ce:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800d3d2:	f003 0310 	and.w	r3, r3, #16
 800d3d6:	60fb      	str	r3, [r7, #12]
 800d3d8:	68fb      	ldr	r3, [r7, #12]
    /* CODEC_SAI pin configuration: SD pin */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800d3da:	2308      	movs	r3, #8
 800d3dc:	64fb      	str	r3, [r7, #76]	@ 0x4c
    gpio_init_structure.Mode = GPIO_MODE_AF_PP;
 800d3de:	2302      	movs	r3, #2
 800d3e0:	653b      	str	r3, [r7, #80]	@ 0x50
    gpio_init_structure.Pull = GPIO_NOPULL;
 800d3e2:	2300      	movs	r3, #0
 800d3e4:	657b      	str	r3, [r7, #84]	@ 0x54
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 800d3e6:	2302      	movs	r3, #2
 800d3e8:	65bb      	str	r3, [r7, #88]	@ 0x58
    gpio_init_structure.Alternate = AUDIO_IN_SAIx_AF;
 800d3ea:	2306      	movs	r3, #6
 800d3ec:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(AUDIO_IN_SAIx_SD_GPIO_PORT, &gpio_init_structure);
 800d3ee:	f107 034c 	add.w	r3, r7, #76	@ 0x4c
 800d3f2:	4619      	mov	r1, r3
 800d3f4:	481b      	ldr	r0, [pc, #108]	@ (800d464 <SAI_MspInit+0x4d0>)
 800d3f6:	f00a fa87 	bl	8017908 <HAL_GPIO_Init>

    /* Enable the DMA clock */
    AUDIO_IN_SAIx_DMAx_CLK_ENABLE();
 800d3fa:	4b19      	ldr	r3, [pc, #100]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d3fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d400:	4a17      	ldr	r2, [pc, #92]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d402:	f043 0302 	orr.w	r3, r3, #2
 800d406:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800d40a:	4b15      	ldr	r3, [pc, #84]	@ (800d460 <SAI_MspInit+0x4cc>)
 800d40c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800d410:	f003 0302 	and.w	r3, r3, #2
 800d414:	60bb      	str	r3, [r7, #8]
 800d416:	68bb      	ldr	r3, [r7, #8]

    /* Configure the hdma_sai_rx handle parameters */
    hdma_sai_rx.Init.Request             = AUDIO_IN_SAIx_DMAx_REQUEST;
 800d418:	4b14      	ldr	r3, [pc, #80]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d41a:	2258      	movs	r2, #88	@ 0x58
 800d41c:	605a      	str	r2, [r3, #4]
    hdma_sai_rx.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800d41e:	4b13      	ldr	r3, [pc, #76]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d420:	2200      	movs	r2, #0
 800d422:	609a      	str	r2, [r3, #8]
    hdma_sai_rx.Init.PeriphInc           = DMA_PINC_DISABLE;
 800d424:	4b11      	ldr	r3, [pc, #68]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d426:	2200      	movs	r2, #0
 800d428:	60da      	str	r2, [r3, #12]
    hdma_sai_rx.Init.MemInc              = DMA_MINC_ENABLE;
 800d42a:	4b10      	ldr	r3, [pc, #64]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d42c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800d430:	611a      	str	r2, [r3, #16]
    hdma_sai_rx.Init.PeriphDataAlignment = AUDIO_IN_SAIx_DMAx_PERIPH_DATA_SIZE;
 800d432:	4b0e      	ldr	r3, [pc, #56]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d434:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800d438:	615a      	str	r2, [r3, #20]
    hdma_sai_rx.Init.MemDataAlignment    = AUDIO_IN_SAIx_DMAx_MEM_DATA_SIZE;
 800d43a:	4b0c      	ldr	r3, [pc, #48]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d43c:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800d440:	619a      	str	r2, [r3, #24]
    hdma_sai_rx.Init.Mode                = DMA_CIRCULAR;
 800d442:	4b0a      	ldr	r3, [pc, #40]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d444:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800d448:	61da      	str	r2, [r3, #28]
    hdma_sai_rx.Init.Priority            = DMA_PRIORITY_HIGH;
 800d44a:	4b08      	ldr	r3, [pc, #32]	@ (800d46c <SAI_MspInit+0x4d8>)
 800d44c:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800d450:	621a      	str	r2, [r3, #32]
 800d452:	e011      	b.n	800d478 <SAI_MspInit+0x4e4>
 800d454:	2400792c 	.word	0x2400792c
 800d458:	40020428 	.word	0x40020428
 800d45c:	58005404 	.word	0x58005404
 800d460:	58024400 	.word	0x58024400
 800d464:	58021000 	.word	0x58021000
 800d468:	58020800 	.word	0x58020800
 800d46c:	240079a4 	.word	0x240079a4
 800d470:	5802541c 	.word	0x5802541c
 800d474:	40015824 	.word	0x40015824
    hdma_sai_rx.Init.FIFOMode            = DMA_FIFOMODE_DISABLE;
 800d478:	4b13      	ldr	r3, [pc, #76]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d47a:	2200      	movs	r2, #0
 800d47c:	625a      	str	r2, [r3, #36]	@ 0x24
    hdma_sai_rx.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800d47e:	4b12      	ldr	r3, [pc, #72]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d480:	2203      	movs	r2, #3
 800d482:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_sai_rx.Init.MemBurst            = DMA_MBURST_SINGLE;
 800d484:	4b10      	ldr	r3, [pc, #64]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d486:	2200      	movs	r2, #0
 800d488:	62da      	str	r2, [r3, #44]	@ 0x2c
    hdma_sai_rx.Init.PeriphBurst         = DMA_MBURST_SINGLE;
 800d48a:	4b0f      	ldr	r3, [pc, #60]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d48c:	2200      	movs	r2, #0
 800d48e:	631a      	str	r2, [r3, #48]	@ 0x30

    hdma_sai_rx.Instance = AUDIO_IN_SAIx_DMAx_STREAM;
 800d490:	4b0d      	ldr	r3, [pc, #52]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d492:	4a0e      	ldr	r2, [pc, #56]	@ (800d4cc <SAI_MspInit+0x538>)
 800d494:	601a      	str	r2, [r3, #0]

    /* Associate the DMA handle */
    __HAL_LINKDMA(hsai, hdmarx, hdma_sai_rx);
 800d496:	687b      	ldr	r3, [r7, #4]
 800d498:	4a0b      	ldr	r2, [pc, #44]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d49a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
 800d49e:	4a0a      	ldr	r2, [pc, #40]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d4a0:	687b      	ldr	r3, [r7, #4]
 800d4a2:	6393      	str	r3, [r2, #56]	@ 0x38

    /* Deinitialize the Stream for new transfer */
    HAL_DMA_DeInit(&hdma_sai_rx);
 800d4a4:	4808      	ldr	r0, [pc, #32]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d4a6:	f005 ffe3 	bl	8013470 <HAL_DMA_DeInit>

    /* Configure the DMA Stream */
    HAL_DMA_Init(&hdma_sai_rx);
 800d4aa:	4807      	ldr	r0, [pc, #28]	@ (800d4c8 <SAI_MspInit+0x534>)
 800d4ac:	f005 fc84 	bl	8012db8 <HAL_DMA_Init>

    /* SAI DMA IRQ Channel configuration */
    HAL_NVIC_SetPriority(AUDIO_IN_SAIx_DMAx_IRQ, BSP_AUDIO_IN_IT_PRIORITY, 0);
 800d4b0:	2200      	movs	r2, #0
 800d4b2:	210f      	movs	r1, #15
 800d4b4:	203c      	movs	r0, #60	@ 0x3c
 800d4b6:	f004 ffac 	bl	8012412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800d4ba:	203c      	movs	r0, #60	@ 0x3c
 800d4bc:	f004 ffc3 	bl	8012446 <HAL_NVIC_EnableIRQ>

  }
}
 800d4c0:	bf00      	nop
 800d4c2:	3760      	adds	r7, #96	@ 0x60
 800d4c4:	46bd      	mov	sp, r7
 800d4c6:	bd80      	pop	{r7, pc}
 800d4c8:	240079a4 	.word	0x240079a4
 800d4cc:	40020470 	.word	0x40020470

0800d4d0 <SAI_MspDeInit>:
  * @brief  Deinitializes SAI MSP.
  * @param  hsai  SAI handle
  * @retval HAL status
  */
static void SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 800d4d0:	b580      	push	{r7, lr}
 800d4d2:	b088      	sub	sp, #32
 800d4d4:	af00      	add	r7, sp, #0
 800d4d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;
  if(hsai->Instance == AUDIO_OUT_SAIx)
 800d4d8:	687b      	ldr	r3, [r7, #4]
 800d4da:	681b      	ldr	r3, [r3, #0]
 800d4dc:	4a30      	ldr	r2, [pc, #192]	@ (800d5a0 <SAI_MspDeInit+0xd0>)
 800d4de:	4293      	cmp	r3, r2
 800d4e0:	d134      	bne.n	800d54c <SAI_MspDeInit+0x7c>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_OUT_SAIx_DMAx_IRQ);
 800d4e2:	2039      	movs	r0, #57	@ 0x39
 800d4e4:	f004 ffbd 	bl	8012462 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmatx);
 800d4e8:	687b      	ldr	r3, [r7, #4]
 800d4ea:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800d4ee:	4618      	mov	r0, r3
 800d4f0:	f005 ffbe 	bl	8013470 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 800d4f4:	687b      	ldr	r3, [r7, #4]
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	681a      	ldr	r2, [r3, #0]
 800d4fa:	687b      	ldr	r3, [r7, #4]
 800d4fc:	681b      	ldr	r3, [r3, #0]
 800d4fe:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d502:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pins FS, SCK, MCK and SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_OUT_SAIx_FS_PIN;
 800d504:	2310      	movs	r3, #16
 800d506:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_FS_GPIO_PORT, gpio_init_structure.Pin);
 800d508:	68fb      	ldr	r3, [r7, #12]
 800d50a:	4619      	mov	r1, r3
 800d50c:	4825      	ldr	r0, [pc, #148]	@ (800d5a4 <SAI_MspDeInit+0xd4>)
 800d50e:	f00a fbab 	bl	8017c68 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_SCK_PIN;
 800d512:	2320      	movs	r3, #32
 800d514:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SCK_GPIO_PORT, gpio_init_structure.Pin);
 800d516:	68fb      	ldr	r3, [r7, #12]
 800d518:	4619      	mov	r1, r3
 800d51a:	4822      	ldr	r0, [pc, #136]	@ (800d5a4 <SAI_MspDeInit+0xd4>)
 800d51c:	f00a fba4 	bl	8017c68 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin =  AUDIO_OUT_SAIx_SD_PIN;
 800d520:	2340      	movs	r3, #64	@ 0x40
 800d522:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 800d524:	68fb      	ldr	r3, [r7, #12]
 800d526:	4619      	mov	r1, r3
 800d528:	481e      	ldr	r0, [pc, #120]	@ (800d5a4 <SAI_MspDeInit+0xd4>)
 800d52a:	f00a fb9d 	bl	8017c68 <HAL_GPIO_DeInit>

    gpio_init_structure.Pin = AUDIO_OUT_SAIx_MCLK_PIN;
 800d52e:	2380      	movs	r3, #128	@ 0x80
 800d530:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_OUT_SAIx_MCLK_GPIO_PORT, gpio_init_structure.Pin);
 800d532:	68fb      	ldr	r3, [r7, #12]
 800d534:	4619      	mov	r1, r3
 800d536:	481c      	ldr	r0, [pc, #112]	@ (800d5a8 <SAI_MspDeInit+0xd8>)
 800d538:	f00a fb96 	bl	8017c68 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_OUT_SAIx_CLK_DISABLE();
 800d53c:	4b1b      	ldr	r3, [pc, #108]	@ (800d5ac <SAI_MspDeInit+0xdc>)
 800d53e:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d542:	4a1a      	ldr	r2, [pc, #104]	@ (800d5ac <SAI_MspDeInit+0xdc>)
 800d544:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800d548:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  }
  if(hsai->Instance == AUDIO_IN_SAIx)
 800d54c:	687b      	ldr	r3, [r7, #4]
 800d54e:	681b      	ldr	r3, [r3, #0]
 800d550:	4a17      	ldr	r2, [pc, #92]	@ (800d5b0 <SAI_MspDeInit+0xe0>)
 800d552:	4293      	cmp	r3, r2
 800d554:	d11f      	bne.n	800d596 <SAI_MspDeInit+0xc6>
  {
    /* SAI DMA IRQ Channel deactivation */
    HAL_NVIC_DisableIRQ(AUDIO_IN_SAIx_DMAx_IRQ);
 800d556:	203c      	movs	r0, #60	@ 0x3c
 800d558:	f004 ff83 	bl	8012462 <HAL_NVIC_DisableIRQ>

    /* Deinitialize the DMA stream */
    (void)HAL_DMA_DeInit(hsai->hdmarx);
 800d55c:	687b      	ldr	r3, [r7, #4]
 800d55e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800d562:	4618      	mov	r0, r3
 800d564:	f005 ff84 	bl	8013470 <HAL_DMA_DeInit>

    /* Disable SAI peripheral */
    __HAL_SAI_DISABLE(hsai);
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	681b      	ldr	r3, [r3, #0]
 800d56c:	681a      	ldr	r2, [r3, #0]
 800d56e:	687b      	ldr	r3, [r7, #4]
 800d570:	681b      	ldr	r3, [r3, #0]
 800d572:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 800d576:	601a      	str	r2, [r3, #0]

    /* Deactivates CODEC_SAI pin SD by putting them in input mode */
    gpio_init_structure.Pin = AUDIO_IN_SAIx_SD_PIN;
 800d578:	2308      	movs	r3, #8
 800d57a:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(AUDIO_IN_SAIx_SD_GPIO_PORT, gpio_init_structure.Pin);
 800d57c:	68fb      	ldr	r3, [r7, #12]
 800d57e:	4619      	mov	r1, r3
 800d580:	4808      	ldr	r0, [pc, #32]	@ (800d5a4 <SAI_MspDeInit+0xd4>)
 800d582:	f00a fb71 	bl	8017c68 <HAL_GPIO_DeInit>

    /* Disable SAI clock */
    AUDIO_IN_SAIx_CLK_DISABLE();
 800d586:	4b09      	ldr	r3, [pc, #36]	@ (800d5ac <SAI_MspDeInit+0xdc>)
 800d588:	f8d3 30f0 	ldr.w	r3, [r3, #240]	@ 0xf0
 800d58c:	4a07      	ldr	r2, [pc, #28]	@ (800d5ac <SAI_MspDeInit+0xdc>)
 800d58e:	f423 0380 	bic.w	r3, r3, #4194304	@ 0x400000
 800d592:	f8c2 30f0 	str.w	r3, [r2, #240]	@ 0xf0
  }
}
 800d596:	bf00      	nop
 800d598:	3720      	adds	r7, #32
 800d59a:	46bd      	mov	sp, r7
 800d59c:	bd80      	pop	{r7, pc}
 800d59e:	bf00      	nop
 800d5a0:	40015804 	.word	0x40015804
 800d5a4:	58021000 	.word	0x58021000
 800d5a8:	58021800 	.word	0x58021800
 800d5ac:	58024400 	.word	0x58024400
 800d5b0:	40015824 	.word	0x40015824

0800d5b4 <BSP_I2C4_Init>:
/**
  * @brief  Initializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_Init(void)
{
 800d5b4:	b580      	push	{r7, lr}
 800d5b6:	b082      	sub	sp, #8
 800d5b8:	af00      	add	r7, sp, #0
  int32_t ret = BSP_ERROR_NONE;
 800d5ba:	2300      	movs	r3, #0
 800d5bc:	607b      	str	r3, [r7, #4]

  hbus_i2c4.Instance = BUS_I2C4;
 800d5be:	4b16      	ldr	r3, [pc, #88]	@ (800d618 <BSP_I2C4_Init+0x64>)
 800d5c0:	4a16      	ldr	r2, [pc, #88]	@ (800d61c <BSP_I2C4_Init+0x68>)
 800d5c2:	601a      	str	r2, [r3, #0]

  if (I2c4InitCounter == 0U)
 800d5c4:	4b16      	ldr	r3, [pc, #88]	@ (800d620 <BSP_I2C4_Init+0x6c>)
 800d5c6:	681b      	ldr	r3, [r3, #0]
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	d11f      	bne.n	800d60c <BSP_I2C4_Init+0x58>
  {
    I2c4InitCounter++;
 800d5cc:	4b14      	ldr	r3, [pc, #80]	@ (800d620 <BSP_I2C4_Init+0x6c>)
 800d5ce:	681b      	ldr	r3, [r3, #0]
 800d5d0:	3301      	adds	r3, #1
 800d5d2:	4a13      	ldr	r2, [pc, #76]	@ (800d620 <BSP_I2C4_Init+0x6c>)
 800d5d4:	6013      	str	r3, [r2, #0]

    if (HAL_I2C_GetState(&hbus_i2c4) == HAL_I2C_STATE_RESET)
 800d5d6:	4810      	ldr	r0, [pc, #64]	@ (800d618 <BSP_I2C4_Init+0x64>)
 800d5d8:	f00a ffaa 	bl	8018530 <HAL_I2C_GetState>
 800d5dc:	4603      	mov	r3, r0
 800d5de:	2b00      	cmp	r3, #0
 800d5e0:	d114      	bne.n	800d60c <BSP_I2C4_Init+0x58>
        BspI2cSemaphore = osSemaphoreCreate(osSemaphore(BSP_I2C_SEM), 1);
      }
#endif
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
      /* Init the I2C4 Msp */
      I2C4_MspInit(&hbus_i2c4);
 800d5e2:	480d      	ldr	r0, [pc, #52]	@ (800d618 <BSP_I2C4_Init+0x64>)
 800d5e4:	f000 fbbc 	bl	800dd60 <I2C4_MspInit>
        }
      }
      if (ret == BSP_ERROR_NONE)
      {
#endif
        if (MX_I2C4_Init(&hbus_i2c4, I2C_GetTiming(HAL_RCC_GetPCLK2Freq(), BUS_I2C4_FREQUENCY)) != HAL_OK)
 800d5e8:	f00d fd82 	bl	801b0f0 <HAL_RCC_GetPCLK2Freq>
 800d5ec:	4603      	mov	r3, r0
 800d5ee:	490d      	ldr	r1, [pc, #52]	@ (800d624 <BSP_I2C4_Init+0x70>)
 800d5f0:	4618      	mov	r0, r3
 800d5f2:	f000 f93f 	bl	800d874 <I2C_GetTiming>
 800d5f6:	4603      	mov	r3, r0
 800d5f8:	4619      	mov	r1, r3
 800d5fa:	4807      	ldr	r0, [pc, #28]	@ (800d618 <BSP_I2C4_Init+0x64>)
 800d5fc:	f000 f838 	bl	800d670 <MX_I2C4_Init>
 800d600:	4603      	mov	r3, r0
 800d602:	2b00      	cmp	r3, #0
 800d604:	d002      	beq.n	800d60c <BSP_I2C4_Init+0x58>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800d606:	f06f 0307 	mvn.w	r3, #7
 800d60a:	607b      	str	r3, [r7, #4]
      }
#endif
    }
  }

  return ret;
 800d60c:	687b      	ldr	r3, [r7, #4]
}
 800d60e:	4618      	mov	r0, r3
 800d610:	3708      	adds	r7, #8
 800d612:	46bd      	mov	sp, r7
 800d614:	bd80      	pop	{r7, pc}
 800d616:	bf00      	nop
 800d618:	24008424 	.word	0x24008424
 800d61c:	58001c00 	.word	0x58001c00
 800d620:	24007a1c 	.word	0x24007a1c
 800d624:	000186a0 	.word	0x000186a0

0800d628 <BSP_I2C4_DeInit>:
/**
  * @brief  DeInitializes I2C HAL.
  * @retval BSP status
  */
int32_t BSP_I2C4_DeInit(void)
{
 800d628:	b580      	push	{r7, lr}
 800d62a:	b082      	sub	sp, #8
 800d62c:	af00      	add	r7, sp, #0
  int32_t ret  = BSP_ERROR_NONE;
 800d62e:	2300      	movs	r3, #0
 800d630:	607b      	str	r3, [r7, #4]

  I2c4InitCounter--;
 800d632:	4b0d      	ldr	r3, [pc, #52]	@ (800d668 <BSP_I2C4_DeInit+0x40>)
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	3b01      	subs	r3, #1
 800d638:	4a0b      	ldr	r2, [pc, #44]	@ (800d668 <BSP_I2C4_DeInit+0x40>)
 800d63a:	6013      	str	r3, [r2, #0]
  if (I2c4InitCounter == 0U)
 800d63c:	4b0a      	ldr	r3, [pc, #40]	@ (800d668 <BSP_I2C4_DeInit+0x40>)
 800d63e:	681b      	ldr	r3, [r3, #0]
 800d640:	2b00      	cmp	r3, #0
 800d642:	d10b      	bne.n	800d65c <BSP_I2C4_DeInit+0x34>
  {
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 0)
    I2C4_MspDeInit(&hbus_i2c4);
 800d644:	4809      	ldr	r0, [pc, #36]	@ (800d66c <BSP_I2C4_DeInit+0x44>)
 800d646:	f000 fbf7 	bl	800de38 <I2C4_MspDeInit>
#endif /* (USE_HAL_I2C_REGISTER_CALLBACKS == 0) */

    /* Init the I2C */
    if (HAL_I2C_DeInit(&hbus_i2c4) != HAL_OK)
 800d64a:	4808      	ldr	r0, [pc, #32]	@ (800d66c <BSP_I2C4_DeInit+0x44>)
 800d64c:	f00a fcfe 	bl	801804c <HAL_I2C_DeInit>
 800d650:	4603      	mov	r3, r0
 800d652:	2b00      	cmp	r3, #0
 800d654:	d002      	beq.n	800d65c <BSP_I2C4_DeInit+0x34>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800d656:	f06f 0307 	mvn.w	r3, #7
 800d65a:	607b      	str	r3, [r7, #4]
    }
  }

  return ret;
 800d65c:	687b      	ldr	r3, [r7, #4]
}
 800d65e:	4618      	mov	r0, r3
 800d660:	3708      	adds	r7, #8
 800d662:	46bd      	mov	sp, r7
 800d664:	bd80      	pop	{r7, pc}
 800d666:	bf00      	nop
 800d668:	24007a1c 	.word	0x24007a1c
 800d66c:	24008424 	.word	0x24008424

0800d670 <MX_I2C4_Init>:
  * @param  hI2c I2C handle
  * @param  timing I2C timing
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_I2C4_Init(I2C_HandleTypeDef *hI2c, uint32_t timing)
{
 800d670:	b580      	push	{r7, lr}
 800d672:	b084      	sub	sp, #16
 800d674:	af00      	add	r7, sp, #0
 800d676:	6078      	str	r0, [r7, #4]
 800d678:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800d67a:	2300      	movs	r3, #0
 800d67c:	73fb      	strb	r3, [r7, #15]

  hI2c->Init.Timing           = timing;
 800d67e:	687b      	ldr	r3, [r7, #4]
 800d680:	683a      	ldr	r2, [r7, #0]
 800d682:	605a      	str	r2, [r3, #4]
  hI2c->Init.OwnAddress1      = 0;
 800d684:	687b      	ldr	r3, [r7, #4]
 800d686:	2200      	movs	r2, #0
 800d688:	609a      	str	r2, [r3, #8]
  hI2c->Init.AddressingMode   = I2C_ADDRESSINGMODE_7BIT;
 800d68a:	687b      	ldr	r3, [r7, #4]
 800d68c:	2201      	movs	r2, #1
 800d68e:	60da      	str	r2, [r3, #12]
  hI2c->Init.DualAddressMode  = I2C_DUALADDRESS_DISABLE;
 800d690:	687b      	ldr	r3, [r7, #4]
 800d692:	2200      	movs	r2, #0
 800d694:	611a      	str	r2, [r3, #16]
  hI2c->Init.OwnAddress2      = 0;
 800d696:	687b      	ldr	r3, [r7, #4]
 800d698:	2200      	movs	r2, #0
 800d69a:	615a      	str	r2, [r3, #20]
  hI2c->Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 800d69c:	687b      	ldr	r3, [r7, #4]
 800d69e:	2200      	movs	r2, #0
 800d6a0:	619a      	str	r2, [r3, #24]
  hI2c->Init.GeneralCallMode  = I2C_GENERALCALL_DISABLE;
 800d6a2:	687b      	ldr	r3, [r7, #4]
 800d6a4:	2200      	movs	r2, #0
 800d6a6:	61da      	str	r2, [r3, #28]
  hI2c->Init.NoStretchMode    = I2C_NOSTRETCH_DISABLE;
 800d6a8:	687b      	ldr	r3, [r7, #4]
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	621a      	str	r2, [r3, #32]

  if (HAL_I2C_Init(hI2c) != HAL_OK)
 800d6ae:	6878      	ldr	r0, [r7, #4]
 800d6b0:	f00a fc30 	bl	8017f14 <HAL_I2C_Init>
 800d6b4:	4603      	mov	r3, r0
 800d6b6:	2b00      	cmp	r3, #0
 800d6b8:	d002      	beq.n	800d6c0 <MX_I2C4_Init+0x50>
  {
    status = HAL_ERROR;
 800d6ba:	2301      	movs	r3, #1
 800d6bc:	73fb      	strb	r3, [r7, #15]
 800d6be:	e014      	b.n	800d6ea <MX_I2C4_Init+0x7a>
  }
  else
  {
    uint32_t analog_filter;

    analog_filter = I2C_ANALOGFILTER_ENABLE;
 800d6c0:	2300      	movs	r3, #0
 800d6c2:	60bb      	str	r3, [r7, #8]
    if (HAL_I2CEx_ConfigAnalogFilter(hI2c, analog_filter) != HAL_OK)
 800d6c4:	68b9      	ldr	r1, [r7, #8]
 800d6c6:	6878      	ldr	r0, [r7, #4]
 800d6c8:	f00b fa0e 	bl	8018ae8 <HAL_I2CEx_ConfigAnalogFilter>
 800d6cc:	4603      	mov	r3, r0
 800d6ce:	2b00      	cmp	r3, #0
 800d6d0:	d002      	beq.n	800d6d8 <MX_I2C4_Init+0x68>
    {
      status = HAL_ERROR;
 800d6d2:	2301      	movs	r3, #1
 800d6d4:	73fb      	strb	r3, [r7, #15]
 800d6d6:	e008      	b.n	800d6ea <MX_I2C4_Init+0x7a>
    }
    else
    {
      if (HAL_I2CEx_ConfigDigitalFilter(hI2c, I2C_DIGITAL_FILTER_COEF) != HAL_OK)
 800d6d8:	2100      	movs	r1, #0
 800d6da:	6878      	ldr	r0, [r7, #4]
 800d6dc:	f00b fa4f 	bl	8018b7e <HAL_I2CEx_ConfigDigitalFilter>
 800d6e0:	4603      	mov	r3, r0
 800d6e2:	2b00      	cmp	r3, #0
 800d6e4:	d001      	beq.n	800d6ea <MX_I2C4_Init+0x7a>
      {
        status = HAL_ERROR;
 800d6e6:	2301      	movs	r3, #1
 800d6e8:	73fb      	strb	r3, [r7, #15]
      }
    }
  }

  return status;
 800d6ea:	7bfb      	ldrb	r3, [r7, #15]
}
 800d6ec:	4618      	mov	r0, r3
 800d6ee:	3710      	adds	r7, #16
 800d6f0:	46bd      	mov	sp, r7
 800d6f2:	bd80      	pop	{r7, pc}

0800d6f4 <BSP_I2C4_WriteReg>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800d6f4:	b580      	push	{r7, lr}
 800d6f6:	b088      	sub	sp, #32
 800d6f8:	af02      	add	r7, sp, #8
 800d6fa:	60ba      	str	r2, [r7, #8]
 800d6fc:	461a      	mov	r2, r3
 800d6fe:	4603      	mov	r3, r0
 800d700:	81fb      	strh	r3, [r7, #14]
 800d702:	460b      	mov	r3, r1
 800d704:	81bb      	strh	r3, [r7, #12]
 800d706:	4613      	mov	r3, r2
 800d708:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800d70a:	89b9      	ldrh	r1, [r7, #12]
 800d70c:	89f8      	ldrh	r0, [r7, #14]
 800d70e:	88fb      	ldrh	r3, [r7, #6]
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	68bb      	ldr	r3, [r7, #8]
 800d714:	2201      	movs	r2, #1
 800d716:	f000 fbb3 	bl	800de80 <I2C4_WriteReg>
 800d71a:	4603      	mov	r3, r0
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d102      	bne.n	800d726 <BSP_I2C4_WriteReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800d720:	2300      	movs	r3, #0
 800d722:	617b      	str	r3, [r7, #20]
 800d724:	e00c      	b.n	800d740 <BSP_I2C4_WriteReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800d726:	4809      	ldr	r0, [pc, #36]	@ (800d74c <BSP_I2C4_WriteReg+0x58>)
 800d728:	f00a ff10 	bl	801854c <HAL_I2C_GetError>
 800d72c:	4603      	mov	r3, r0
 800d72e:	2b04      	cmp	r3, #4
 800d730:	d103      	bne.n	800d73a <BSP_I2C4_WriteReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800d732:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800d736:	617b      	str	r3, [r7, #20]
 800d738:	e002      	b.n	800d740 <BSP_I2C4_WriteReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800d73a:	f06f 0303 	mvn.w	r3, #3
 800d73e:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800d740:	697b      	ldr	r3, [r7, #20]
}
 800d742:	4618      	mov	r0, r3
 800d744:	3718      	adds	r7, #24
 800d746:	46bd      	mov	sp, r7
 800d748:	bd80      	pop	{r7, pc}
 800d74a:	bf00      	nop
 800d74c:	24008424 	.word	0x24008424

0800d750 <BSP_I2C4_ReadReg>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800d750:	b580      	push	{r7, lr}
 800d752:	b088      	sub	sp, #32
 800d754:	af02      	add	r7, sp, #8
 800d756:	60ba      	str	r2, [r7, #8]
 800d758:	461a      	mov	r2, r3
 800d75a:	4603      	mov	r3, r0
 800d75c:	81fb      	strh	r3, [r7, #14]
 800d75e:	460b      	mov	r3, r1
 800d760:	81bb      	strh	r3, [r7, #12]
 800d762:	4613      	mov	r3, r2
 800d764:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_8BIT, pData, Length) == 0)
 800d766:	89b9      	ldrh	r1, [r7, #12]
 800d768:	89f8      	ldrh	r0, [r7, #14]
 800d76a:	88fb      	ldrh	r3, [r7, #6]
 800d76c:	9300      	str	r3, [sp, #0]
 800d76e:	68bb      	ldr	r3, [r7, #8]
 800d770:	2201      	movs	r2, #1
 800d772:	f000 fbab 	bl	800decc <I2C4_ReadReg>
 800d776:	4603      	mov	r3, r0
 800d778:	2b00      	cmp	r3, #0
 800d77a:	d102      	bne.n	800d782 <BSP_I2C4_ReadReg+0x32>
  {
    ret = BSP_ERROR_NONE;
 800d77c:	2300      	movs	r3, #0
 800d77e:	617b      	str	r3, [r7, #20]
 800d780:	e00c      	b.n	800d79c <BSP_I2C4_ReadReg+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800d782:	4809      	ldr	r0, [pc, #36]	@ (800d7a8 <BSP_I2C4_ReadReg+0x58>)
 800d784:	f00a fee2 	bl	801854c <HAL_I2C_GetError>
 800d788:	4603      	mov	r3, r0
 800d78a:	2b04      	cmp	r3, #4
 800d78c:	d103      	bne.n	800d796 <BSP_I2C4_ReadReg+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800d78e:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800d792:	617b      	str	r3, [r7, #20]
 800d794:	e002      	b.n	800d79c <BSP_I2C4_ReadReg+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800d796:	f06f 0303 	mvn.w	r3, #3
 800d79a:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800d79c:	697b      	ldr	r3, [r7, #20]
}
 800d79e:	4618      	mov	r0, r3
 800d7a0:	3718      	adds	r7, #24
 800d7a2:	46bd      	mov	sp, r7
 800d7a4:	bd80      	pop	{r7, pc}
 800d7a6:	bf00      	nop
 800d7a8:	24008424 	.word	0x24008424

0800d7ac <BSP_I2C4_WriteReg16>:
  * @param  pData  The target register value to be written
  * @param  Length buffer size to be written
  * @retval BSP status
  */
int32_t BSP_I2C4_WriteReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800d7ac:	b580      	push	{r7, lr}
 800d7ae:	b088      	sub	sp, #32
 800d7b0:	af02      	add	r7, sp, #8
 800d7b2:	60ba      	str	r2, [r7, #8]
 800d7b4:	461a      	mov	r2, r3
 800d7b6:	4603      	mov	r3, r0
 800d7b8:	81fb      	strh	r3, [r7, #14]
 800d7ba:	460b      	mov	r3, r1
 800d7bc:	81bb      	strh	r3, [r7, #12]
 800d7be:	4613      	mov	r3, r2
 800d7c0:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
 #if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_WriteReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800d7c2:	89b9      	ldrh	r1, [r7, #12]
 800d7c4:	89f8      	ldrh	r0, [r7, #14]
 800d7c6:	88fb      	ldrh	r3, [r7, #6]
 800d7c8:	9300      	str	r3, [sp, #0]
 800d7ca:	68bb      	ldr	r3, [r7, #8]
 800d7cc:	2202      	movs	r2, #2
 800d7ce:	f000 fb57 	bl	800de80 <I2C4_WriteReg>
 800d7d2:	4603      	mov	r3, r0
 800d7d4:	2b00      	cmp	r3, #0
 800d7d6:	d102      	bne.n	800d7de <BSP_I2C4_WriteReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800d7d8:	2300      	movs	r3, #0
 800d7da:	617b      	str	r3, [r7, #20]
 800d7dc:	e00c      	b.n	800d7f8 <BSP_I2C4_WriteReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800d7de:	4809      	ldr	r0, [pc, #36]	@ (800d804 <BSP_I2C4_WriteReg16+0x58>)
 800d7e0:	f00a feb4 	bl	801854c <HAL_I2C_GetError>
 800d7e4:	4603      	mov	r3, r0
 800d7e6:	2b04      	cmp	r3, #4
 800d7e8:	d103      	bne.n	800d7f2 <BSP_I2C4_WriteReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800d7ea:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800d7ee:	617b      	str	r3, [r7, #20]
 800d7f0:	e002      	b.n	800d7f8 <BSP_I2C4_WriteReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800d7f2:	f06f 0303 	mvn.w	r3, #3
 800d7f6:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800d7f8:	697b      	ldr	r3, [r7, #20]
}
 800d7fa:	4618      	mov	r0, r3
 800d7fc:	3718      	adds	r7, #24
 800d7fe:	46bd      	mov	sp, r7
 800d800:	bd80      	pop	{r7, pc}
 800d802:	bf00      	nop
 800d804:	24008424 	.word	0x24008424

0800d808 <BSP_I2C4_ReadReg16>:
  * @param  pData   Pointer to data buffer
  * @param  Length  Length of the data
  * @retval BSP status
  */
int32_t BSP_I2C4_ReadReg16(uint16_t DevAddr, uint16_t Reg, uint8_t *pData, uint16_t Length)
{
 800d808:	b580      	push	{r7, lr}
 800d80a:	b088      	sub	sp, #32
 800d80c:	af02      	add	r7, sp, #8
 800d80e:	60ba      	str	r2, [r7, #8]
 800d810:	461a      	mov	r2, r3
 800d812:	4603      	mov	r3, r0
 800d814:	81fb      	strh	r3, [r7, #14]
 800d816:	460b      	mov	r3, r1
 800d818:	81bb      	strh	r3, [r7, #12]
 800d81a:	4613      	mov	r3, r2
 800d81c:	80fb      	strh	r3, [r7, #6]
  int32_t ret;
#if defined(BSP_USE_CMSIS_OS)
  /* Get semaphore to prevent multiple I2C access */
  osSemaphoreWait(BspI2cSemaphore, osWaitForever);
#endif
  if(I2C4_ReadReg(DevAddr, Reg, I2C_MEMADD_SIZE_16BIT, pData, Length) == 0)
 800d81e:	89b9      	ldrh	r1, [r7, #12]
 800d820:	89f8      	ldrh	r0, [r7, #14]
 800d822:	88fb      	ldrh	r3, [r7, #6]
 800d824:	9300      	str	r3, [sp, #0]
 800d826:	68bb      	ldr	r3, [r7, #8]
 800d828:	2202      	movs	r2, #2
 800d82a:	f000 fb4f 	bl	800decc <I2C4_ReadReg>
 800d82e:	4603      	mov	r3, r0
 800d830:	2b00      	cmp	r3, #0
 800d832:	d102      	bne.n	800d83a <BSP_I2C4_ReadReg16+0x32>
  {
    ret = BSP_ERROR_NONE;
 800d834:	2300      	movs	r3, #0
 800d836:	617b      	str	r3, [r7, #20]
 800d838:	e00c      	b.n	800d854 <BSP_I2C4_ReadReg16+0x4c>
  }
  else
  {
    if( HAL_I2C_GetError(&hbus_i2c4) == HAL_I2C_ERROR_AF)
 800d83a:	4809      	ldr	r0, [pc, #36]	@ (800d860 <BSP_I2C4_ReadReg16+0x58>)
 800d83c:	f00a fe86 	bl	801854c <HAL_I2C_GetError>
 800d840:	4603      	mov	r3, r0
 800d842:	2b04      	cmp	r3, #4
 800d844:	d103      	bne.n	800d84e <BSP_I2C4_ReadReg16+0x46>
    {
      ret = BSP_ERROR_BUS_ACKNOWLEDGE_FAILURE;
 800d846:	f06f 0365 	mvn.w	r3, #101	@ 0x65
 800d84a:	617b      	str	r3, [r7, #20]
 800d84c:	e002      	b.n	800d854 <BSP_I2C4_ReadReg16+0x4c>
    }
    else
    {
      ret =  BSP_ERROR_PERIPH_FAILURE;
 800d84e:	f06f 0303 	mvn.w	r3, #3
 800d852:	617b      	str	r3, [r7, #20]
  }
#if defined(BSP_USE_CMSIS_OS)
  /* Release semaphore to prevent multiple I2C access */
  osSemaphoreRelease(BspI2cSemaphore);
#endif
  return ret;
 800d854:	697b      	ldr	r3, [r7, #20]
}
 800d856:	4618      	mov	r0, r3
 800d858:	3718      	adds	r7, #24
 800d85a:	46bd      	mov	sp, r7
 800d85c:	bd80      	pop	{r7, pc}
 800d85e:	bf00      	nop
 800d860:	24008424 	.word	0x24008424

0800d864 <BSP_GetTick>:
/**
  * @brief  Delay function
  * @retval Tick value
  */
int32_t BSP_GetTick(void)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	af00      	add	r7, sp, #0
  return (int32_t)HAL_GetTick();
 800d868:	f004 fc88 	bl	801217c <HAL_GetTick>
 800d86c:	4603      	mov	r3, r0
}
 800d86e:	4618      	mov	r0, r3
 800d870:	bd80      	pop	{r7, pc}
	...

0800d874 <I2C_GetTiming>:
  * @param  clock_src_freq I2C clock source in Hz.
  * @param  i2c_freq Required I2C clock in Hz.
  * @retval I2C timing or 0 in case of error.
  */
static uint32_t I2C_GetTiming(uint32_t clock_src_freq, uint32_t i2c_freq)
{
 800d874:	b580      	push	{r7, lr}
 800d876:	b086      	sub	sp, #24
 800d878:	af00      	add	r7, sp, #0
 800d87a:	6078      	str	r0, [r7, #4]
 800d87c:	6039      	str	r1, [r7, #0]
  uint32_t ret = 0;
 800d87e:	2300      	movs	r3, #0
 800d880:	617b      	str	r3, [r7, #20]
  uint32_t speed;
  uint32_t idx;

  if((clock_src_freq != 0U) && (i2c_freq != 0U))
 800d882:	687b      	ldr	r3, [r7, #4]
 800d884:	2b00      	cmp	r3, #0
 800d886:	d06b      	beq.n	800d960 <I2C_GetTiming+0xec>
 800d888:	683b      	ldr	r3, [r7, #0]
 800d88a:	2b00      	cmp	r3, #0
 800d88c:	d068      	beq.n	800d960 <I2C_GetTiming+0xec>
  {
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800d88e:	2300      	movs	r3, #0
 800d890:	613b      	str	r3, [r7, #16]
 800d892:	e060      	b.n	800d956 <I2C_GetTiming+0xe2>
    {
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800d894:	4a35      	ldr	r2, [pc, #212]	@ (800d96c <I2C_GetTiming+0xf8>)
 800d896:	693b      	ldr	r3, [r7, #16]
 800d898:	212c      	movs	r1, #44	@ 0x2c
 800d89a:	fb01 f303 	mul.w	r3, r1, r3
 800d89e:	4413      	add	r3, r2
 800d8a0:	3304      	adds	r3, #4
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	683a      	ldr	r2, [r7, #0]
 800d8a6:	429a      	cmp	r2, r3
 800d8a8:	d352      	bcc.n	800d950 <I2C_GetTiming+0xdc>
          (i2c_freq <= I2C_Charac[speed].freq_max))
 800d8aa:	4a30      	ldr	r2, [pc, #192]	@ (800d96c <I2C_GetTiming+0xf8>)
 800d8ac:	693b      	ldr	r3, [r7, #16]
 800d8ae:	212c      	movs	r1, #44	@ 0x2c
 800d8b0:	fb01 f303 	mul.w	r3, r1, r3
 800d8b4:	4413      	add	r3, r2
 800d8b6:	3308      	adds	r3, #8
 800d8b8:	681b      	ldr	r3, [r3, #0]
      if ((i2c_freq >= I2C_Charac[speed].freq_min) &&
 800d8ba:	683a      	ldr	r2, [r7, #0]
 800d8bc:	429a      	cmp	r2, r3
 800d8be:	d847      	bhi.n	800d950 <I2C_GetTiming+0xdc>
      {
        I2C_Compute_PRESC_SCLDEL_SDADEL(clock_src_freq, speed);
 800d8c0:	6939      	ldr	r1, [r7, #16]
 800d8c2:	6878      	ldr	r0, [r7, #4]
 800d8c4:	f000 f856 	bl	800d974 <I2C_Compute_PRESC_SCLDEL_SDADEL>
        idx = I2C_Compute_SCLL_SCLH(clock_src_freq, speed);
 800d8c8:	6939      	ldr	r1, [r7, #16]
 800d8ca:	6878      	ldr	r0, [r7, #4]
 800d8cc:	f000 f940 	bl	800db50 <I2C_Compute_SCLL_SCLH>
 800d8d0:	60f8      	str	r0, [r7, #12]

        if (idx < I2C_VALID_TIMING_NBR)
 800d8d2:	68fb      	ldr	r3, [r7, #12]
 800d8d4:	2b7f      	cmp	r3, #127	@ 0x7f
 800d8d6:	d842      	bhi.n	800d95e <I2C_GetTiming+0xea>
        {
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800d8d8:	4925      	ldr	r1, [pc, #148]	@ (800d970 <I2C_GetTiming+0xfc>)
 800d8da:	68fa      	ldr	r2, [r7, #12]
 800d8dc:	4613      	mov	r3, r2
 800d8de:	009b      	lsls	r3, r3, #2
 800d8e0:	4413      	add	r3, r2
 800d8e2:	009b      	lsls	r3, r3, #2
 800d8e4:	440b      	add	r3, r1
 800d8e6:	681b      	ldr	r3, [r3, #0]
 800d8e8:	0719      	lsls	r1, r3, #28
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800d8ea:	4821      	ldr	r0, [pc, #132]	@ (800d970 <I2C_GetTiming+0xfc>)
 800d8ec:	68fa      	ldr	r2, [r7, #12]
 800d8ee:	4613      	mov	r3, r2
 800d8f0:	009b      	lsls	r3, r3, #2
 800d8f2:	4413      	add	r3, r2
 800d8f4:	009b      	lsls	r3, r3, #2
 800d8f6:	4403      	add	r3, r0
 800d8f8:	3304      	adds	r3, #4
 800d8fa:	681b      	ldr	r3, [r3, #0]
 800d8fc:	051b      	lsls	r3, r3, #20
 800d8fe:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800d902:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800d904:	481a      	ldr	r0, [pc, #104]	@ (800d970 <I2C_GetTiming+0xfc>)
 800d906:	68fa      	ldr	r2, [r7, #12]
 800d908:	4613      	mov	r3, r2
 800d90a:	009b      	lsls	r3, r3, #2
 800d90c:	4413      	add	r3, r2
 800d90e:	009b      	lsls	r3, r3, #2
 800d910:	4403      	add	r3, r0
 800d912:	3308      	adds	r3, #8
 800d914:	681b      	ldr	r3, [r3, #0]
 800d916:	041b      	lsls	r3, r3, #16
 800d918:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
                ((I2c_valid_timing[idx].tscldel & 0x0FU) << 20) |\
 800d91c:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].sclh & 0xFFU) << 8) |\
 800d91e:	4814      	ldr	r0, [pc, #80]	@ (800d970 <I2C_GetTiming+0xfc>)
 800d920:	68fa      	ldr	r2, [r7, #12]
 800d922:	4613      	mov	r3, r2
 800d924:	009b      	lsls	r3, r3, #2
 800d926:	4413      	add	r3, r2
 800d928:	009b      	lsls	r3, r3, #2
 800d92a:	4403      	add	r3, r0
 800d92c:	330c      	adds	r3, #12
 800d92e:	681b      	ldr	r3, [r3, #0]
 800d930:	021b      	lsls	r3, r3, #8
 800d932:	b29b      	uxth	r3, r3
                ((I2c_valid_timing[idx].tsdadel & 0x0FU) << 16) |\
 800d934:	4319      	orrs	r1, r3
                ((I2c_valid_timing[idx].scll & 0xFFU) << 0);
 800d936:	480e      	ldr	r0, [pc, #56]	@ (800d970 <I2C_GetTiming+0xfc>)
 800d938:	68fa      	ldr	r2, [r7, #12]
 800d93a:	4613      	mov	r3, r2
 800d93c:	009b      	lsls	r3, r3, #2
 800d93e:	4413      	add	r3, r2
 800d940:	009b      	lsls	r3, r3, #2
 800d942:	4403      	add	r3, r0
 800d944:	3310      	adds	r3, #16
 800d946:	681b      	ldr	r3, [r3, #0]
 800d948:	b2db      	uxtb	r3, r3
          ret = ((I2c_valid_timing[idx].presc  & 0x0FU) << 28) |\
 800d94a:	430b      	orrs	r3, r1
 800d94c:	617b      	str	r3, [r7, #20]
        }
        break;
 800d94e:	e006      	b.n	800d95e <I2C_GetTiming+0xea>
    for ( speed = 0 ; speed <=  (uint32_t)I2C_SPEED_FREQ_FAST_PLUS ; speed++)
 800d950:	693b      	ldr	r3, [r7, #16]
 800d952:	3301      	adds	r3, #1
 800d954:	613b      	str	r3, [r7, #16]
 800d956:	693b      	ldr	r3, [r7, #16]
 800d958:	2b02      	cmp	r3, #2
 800d95a:	d99b      	bls.n	800d894 <I2C_GetTiming+0x20>
 800d95c:	e000      	b.n	800d960 <I2C_GetTiming+0xec>
        break;
 800d95e:	bf00      	nop
      }
    }
  }

  return ret;
 800d960:	697b      	ldr	r3, [r7, #20]
}
 800d962:	4618      	mov	r0, r3
 800d964:	3718      	adds	r7, #24
 800d966:	46bd      	mov	sp, r7
 800d968:	bd80      	pop	{r7, pc}
 800d96a:	bf00      	nop
 800d96c:	0802a28c 	.word	0x0802a28c
 800d970:	24007a20 	.word	0x24007a20

0800d974 <I2C_Compute_PRESC_SCLDEL_SDADEL>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval None.
  */
static void I2C_Compute_PRESC_SCLDEL_SDADEL(uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800d974:	b480      	push	{r7}
 800d976:	b08f      	sub	sp, #60	@ 0x3c
 800d978:	af00      	add	r7, sp, #0
 800d97a:	6078      	str	r0, [r7, #4]
 800d97c:	6039      	str	r1, [r7, #0]
  uint32_t prev_presc = I2C_PRESC_MAX;
 800d97e:	2310      	movs	r3, #16
 800d980:	637b      	str	r3, [r7, #52]	@ 0x34
  int32_t  tsdadel_min, tsdadel_max;
  int32_t  tscldel_min;
  uint32_t presc, scldel, sdadel;
  uint32_t tafdel_min, tafdel_max;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800d982:	687b      	ldr	r3, [r7, #4]
 800d984:	085a      	lsrs	r2, r3, #1
 800d986:	4b6e      	ldr	r3, [pc, #440]	@ (800db40 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1cc>)
 800d988:	4413      	add	r3, r2
 800d98a:	687a      	ldr	r2, [r7, #4]
 800d98c:	fbb3 f3f2 	udiv	r3, r3, r2
 800d990:	61fb      	str	r3, [r7, #28]

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800d992:	2332      	movs	r3, #50	@ 0x32
 800d994:	61bb      	str	r3, [r7, #24]
  tafdel_max = I2C_ANALOG_FILTER_DELAY_MAX;
 800d996:	f44f 7382 	mov.w	r3, #260	@ 0x104
 800d99a:	617b      	str	r3, [r7, #20]
  /* tDNF = DNF x tI2CCLK
     tPRESC = (PRESC+1) x tI2CCLK
     SDADEL >= {tf +tHD;DAT(min) - tAF(min) - tDNF - [3 x tI2CCLK]} / {tPRESC}
     SDADEL <= {tVD;DAT(max) - tr - tAF(max) - tDNF- [4 x tI2CCLK]} / {tPRESC} */

  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800d99c:	4a69      	ldr	r2, [pc, #420]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d99e:	683b      	ldr	r3, [r7, #0]
 800d9a0:	212c      	movs	r1, #44	@ 0x2c
 800d9a2:	fb01 f303 	mul.w	r3, r1, r3
 800d9a6:	4413      	add	r3, r2
 800d9a8:	3324      	adds	r3, #36	@ 0x24
 800d9aa:	681b      	ldr	r3, [r3, #0]
 800d9ac:	4618      	mov	r0, r3
 800d9ae:	4a65      	ldr	r2, [pc, #404]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d9b0:	683b      	ldr	r3, [r7, #0]
 800d9b2:	212c      	movs	r1, #44	@ 0x2c
 800d9b4:	fb01 f303 	mul.w	r3, r1, r3
 800d9b8:	4413      	add	r3, r2
 800d9ba:	330c      	adds	r3, #12
 800d9bc:	681b      	ldr	r3, [r3, #0]
 800d9be:	18c2      	adds	r2, r0, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800d9c0:	69bb      	ldr	r3, [r7, #24]
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800d9c2:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_min - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 3) * (int32_t)ti2cclk);
 800d9c4:	495f      	ldr	r1, [pc, #380]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d9c6:	683b      	ldr	r3, [r7, #0]
 800d9c8:	202c      	movs	r0, #44	@ 0x2c
 800d9ca:	fb00 f303 	mul.w	r3, r0, r3
 800d9ce:	440b      	add	r3, r1
 800d9d0:	3328      	adds	r3, #40	@ 0x28
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3303      	adds	r3, #3
 800d9d6:	69f9      	ldr	r1, [r7, #28]
 800d9d8:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_min = (int32_t)I2C_Charac[I2C_speed].tfall + (int32_t)I2C_Charac[I2C_speed].hddat_min -
 800d9dc:	1ad3      	subs	r3, r2, r3
 800d9de:	633b      	str	r3, [r7, #48]	@ 0x30

  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800d9e0:	4a58      	ldr	r2, [pc, #352]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d9e2:	683b      	ldr	r3, [r7, #0]
 800d9e4:	212c      	movs	r1, #44	@ 0x2c
 800d9e6:	fb01 f303 	mul.w	r3, r1, r3
 800d9ea:	4413      	add	r3, r2
 800d9ec:	3310      	adds	r3, #16
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	4618      	mov	r0, r3
 800d9f2:	4a54      	ldr	r2, [pc, #336]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800d9f4:	683b      	ldr	r3, [r7, #0]
 800d9f6:	212c      	movs	r1, #44	@ 0x2c
 800d9f8:	fb01 f303 	mul.w	r3, r1, r3
 800d9fc:	4413      	add	r3, r2
 800d9fe:	3320      	adds	r3, #32
 800da00:	681b      	ldr	r3, [r3, #0]
 800da02:	1ac2      	subs	r2, r0, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800da04:	697b      	ldr	r3, [r7, #20]
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800da06:	1ad2      	subs	r2, r2, r3
    (int32_t)tafdel_max - (int32_t)(((int32_t)I2C_Charac[I2C_speed].dnf + 4) * (int32_t)ti2cclk);
 800da08:	494e      	ldr	r1, [pc, #312]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800da0a:	683b      	ldr	r3, [r7, #0]
 800da0c:	202c      	movs	r0, #44	@ 0x2c
 800da0e:	fb00 f303 	mul.w	r3, r0, r3
 800da12:	440b      	add	r3, r1
 800da14:	3328      	adds	r3, #40	@ 0x28
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	3304      	adds	r3, #4
 800da1a:	69f9      	ldr	r1, [r7, #28]
 800da1c:	fb01 f303 	mul.w	r3, r1, r3
  tsdadel_max = (int32_t)I2C_Charac[I2C_speed].vddat_max - (int32_t)I2C_Charac[I2C_speed].trise -
 800da20:	1ad3      	subs	r3, r2, r3
 800da22:	62fb      	str	r3, [r7, #44]	@ 0x2c


  /* {[tr+ tSU;DAT(min)] / [tPRESC]} - 1 <= SCLDEL */
  tscldel_min = (int32_t)I2C_Charac[I2C_speed].trise + (int32_t)I2C_Charac[I2C_speed].sudat_min;
 800da24:	4a47      	ldr	r2, [pc, #284]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800da26:	683b      	ldr	r3, [r7, #0]
 800da28:	212c      	movs	r1, #44	@ 0x2c
 800da2a:	fb01 f303 	mul.w	r3, r1, r3
 800da2e:	4413      	add	r3, r2
 800da30:	3320      	adds	r3, #32
 800da32:	681b      	ldr	r3, [r3, #0]
 800da34:	4618      	mov	r0, r3
 800da36:	4a43      	ldr	r2, [pc, #268]	@ (800db44 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d0>)
 800da38:	683b      	ldr	r3, [r7, #0]
 800da3a:	212c      	movs	r1, #44	@ 0x2c
 800da3c:	fb01 f303 	mul.w	r3, r1, r3
 800da40:	4413      	add	r3, r2
 800da42:	3314      	adds	r3, #20
 800da44:	681b      	ldr	r3, [r3, #0]
 800da46:	4403      	add	r3, r0
 800da48:	613b      	str	r3, [r7, #16]

  if (tsdadel_min <= 0)
 800da4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800da4c:	2b00      	cmp	r3, #0
 800da4e:	dc01      	bgt.n	800da54 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xe0>
  {
    tsdadel_min = 0;
 800da50:	2300      	movs	r3, #0
 800da52:	633b      	str	r3, [r7, #48]	@ 0x30
  }

  if (tsdadel_max <= 0)
 800da54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800da56:	2b00      	cmp	r3, #0
 800da58:	dc01      	bgt.n	800da5e <I2C_Compute_PRESC_SCLDEL_SDADEL+0xea>
  {
    tsdadel_max = 0;
 800da5a:	2300      	movs	r3, #0
 800da5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }

  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800da5e:	2300      	movs	r3, #0
 800da60:	62bb      	str	r3, [r7, #40]	@ 0x28
 800da62:	e062      	b.n	800db2a <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1b6>
  {
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800da64:	2300      	movs	r3, #0
 800da66:	627b      	str	r3, [r7, #36]	@ 0x24
 800da68:	e059      	b.n	800db1e <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1aa>
    {
      /* TSCLDEL = (SCLDEL+1) * (PRESC+1) * TI2CCLK */
      uint32_t tscldel = (scldel + 1U) * (presc + 1U) * ti2cclk;
 800da6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800da6c:	3301      	adds	r3, #1
 800da6e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800da70:	3201      	adds	r2, #1
 800da72:	fb03 f202 	mul.w	r2, r3, r2
 800da76:	69fb      	ldr	r3, [r7, #28]
 800da78:	fb02 f303 	mul.w	r3, r2, r3
 800da7c:	60fb      	str	r3, [r7, #12]

      if (tscldel >= (uint32_t)tscldel_min)
 800da7e:	693b      	ldr	r3, [r7, #16]
 800da80:	68fa      	ldr	r2, [r7, #12]
 800da82:	429a      	cmp	r2, r3
 800da84:	d348      	bcc.n	800db18 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1a4>
      {
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800da86:	2300      	movs	r3, #0
 800da88:	623b      	str	r3, [r7, #32]
 800da8a:	e042      	b.n	800db12 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x19e>
        {
          /* TSDADEL = SDADEL * (PRESC+1) * TI2CCLK */
          uint32_t tsdadel = (sdadel * (presc + 1U)) * ti2cclk;
 800da8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800da8e:	3301      	adds	r3, #1
 800da90:	6a3a      	ldr	r2, [r7, #32]
 800da92:	fb03 f202 	mul.w	r2, r3, r2
 800da96:	69fb      	ldr	r3, [r7, #28]
 800da98:	fb02 f303 	mul.w	r3, r2, r3
 800da9c:	60bb      	str	r3, [r7, #8]

          if ((tsdadel >= (uint32_t)tsdadel_min) && (tsdadel <= (uint32_t)tsdadel_max))
 800da9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800daa0:	68ba      	ldr	r2, [r7, #8]
 800daa2:	429a      	cmp	r2, r3
 800daa4:	d332      	bcc.n	800db0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
 800daa6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800daa8:	68ba      	ldr	r2, [r7, #8]
 800daaa:	429a      	cmp	r2, r3
 800daac:	d82e      	bhi.n	800db0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
          {
            if(presc != prev_presc)
 800daae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dab2:	429a      	cmp	r2, r3
 800dab4:	d02a      	beq.n	800db0c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x198>
            {
              I2c_valid_timing[I2c_valid_timing_nbr].presc = presc;
 800dab6:	4b24      	ldr	r3, [pc, #144]	@ (800db48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800dab8:	681a      	ldr	r2, [r3, #0]
 800daba:	4924      	ldr	r1, [pc, #144]	@ (800db4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800dabc:	4613      	mov	r3, r2
 800dabe:	009b      	lsls	r3, r3, #2
 800dac0:	4413      	add	r3, r2
 800dac2:	009b      	lsls	r3, r3, #2
 800dac4:	440b      	add	r3, r1
 800dac6:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800dac8:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tscldel = scldel;
 800daca:	4b1f      	ldr	r3, [pc, #124]	@ (800db48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800dacc:	681a      	ldr	r2, [r3, #0]
 800dace:	491f      	ldr	r1, [pc, #124]	@ (800db4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800dad0:	4613      	mov	r3, r2
 800dad2:	009b      	lsls	r3, r3, #2
 800dad4:	4413      	add	r3, r2
 800dad6:	009b      	lsls	r3, r3, #2
 800dad8:	440b      	add	r3, r1
 800dada:	3304      	adds	r3, #4
 800dadc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dade:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[I2c_valid_timing_nbr].tsdadel = sdadel;
 800dae0:	4b19      	ldr	r3, [pc, #100]	@ (800db48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800dae2:	681a      	ldr	r2, [r3, #0]
 800dae4:	4919      	ldr	r1, [pc, #100]	@ (800db4c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d8>)
 800dae6:	4613      	mov	r3, r2
 800dae8:	009b      	lsls	r3, r3, #2
 800daea:	4413      	add	r3, r2
 800daec:	009b      	lsls	r3, r3, #2
 800daee:	440b      	add	r3, r1
 800daf0:	3308      	adds	r3, #8
 800daf2:	6a3a      	ldr	r2, [r7, #32]
 800daf4:	601a      	str	r2, [r3, #0]
              prev_presc = presc;
 800daf6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800daf8:	637b      	str	r3, [r7, #52]	@ 0x34
              I2c_valid_timing_nbr ++;
 800dafa:	4b13      	ldr	r3, [pc, #76]	@ (800db48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	3301      	adds	r3, #1
 800db00:	4a11      	ldr	r2, [pc, #68]	@ (800db48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800db02:	6013      	str	r3, [r2, #0]

              if(I2c_valid_timing_nbr >= I2C_VALID_TIMING_NBR)
 800db04:	4b10      	ldr	r3, [pc, #64]	@ (800db48 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1d4>)
 800db06:	681b      	ldr	r3, [r3, #0]
 800db08:	2b7f      	cmp	r3, #127	@ 0x7f
 800db0a:	d812      	bhi.n	800db32 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1be>
        for (sdadel = 0; sdadel < I2C_SDADEL_MAX; sdadel++)
 800db0c:	6a3b      	ldr	r3, [r7, #32]
 800db0e:	3301      	adds	r3, #1
 800db10:	623b      	str	r3, [r7, #32]
 800db12:	6a3b      	ldr	r3, [r7, #32]
 800db14:	2b0f      	cmp	r3, #15
 800db16:	d9b9      	bls.n	800da8c <I2C_Compute_PRESC_SCLDEL_SDADEL+0x118>
    for (scldel = 0; scldel < I2C_SCLDEL_MAX; scldel++)
 800db18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db1a:	3301      	adds	r3, #1
 800db1c:	627b      	str	r3, [r7, #36]	@ 0x24
 800db1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800db20:	2b0f      	cmp	r3, #15
 800db22:	d9a2      	bls.n	800da6a <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf6>
  for (presc = 0; presc < I2C_PRESC_MAX; presc++)
 800db24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db26:	3301      	adds	r3, #1
 800db28:	62bb      	str	r3, [r7, #40]	@ 0x28
 800db2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800db2c:	2b0f      	cmp	r3, #15
 800db2e:	d999      	bls.n	800da64 <I2C_Compute_PRESC_SCLDEL_SDADEL+0xf0>
 800db30:	e000      	b.n	800db34 <I2C_Compute_PRESC_SCLDEL_SDADEL+0x1c0>
              {
                return;
 800db32:	bf00      	nop
          }
        }
      }
    }
  }
}
 800db34:	373c      	adds	r7, #60	@ 0x3c
 800db36:	46bd      	mov	sp, r7
 800db38:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db3c:	4770      	bx	lr
 800db3e:	bf00      	nop
 800db40:	3b9aca00 	.word	0x3b9aca00
 800db44:	0802a28c 	.word	0x0802a28c
 800db48:	24008420 	.word	0x24008420
 800db4c:	24007a20 	.word	0x24007a20

0800db50 <I2C_Compute_SCLL_SCLH>:
  * @param  clock_src_freq I2C source clock in HZ.
  * @param  I2C_speed I2C frequency (index).
  * @retval config index (0 to I2C_VALID_TIMING_NBR], 0xFFFFFFFF for no valid config.
  */
static uint32_t I2C_Compute_SCLL_SCLH (uint32_t clock_src_freq, uint32_t I2C_speed)
{
 800db50:	b480      	push	{r7}
 800db52:	b093      	sub	sp, #76	@ 0x4c
 800db54:	af00      	add	r7, sp, #0
 800db56:	6078      	str	r0, [r7, #4]
 800db58:	6039      	str	r1, [r7, #0]
 uint32_t ret = 0xFFFFFFFFU;
 800db5a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800db5e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t dnf_delay;
  uint32_t clk_min, clk_max;
  uint32_t scll, sclh;
  uint32_t tafdel_min;

  ti2cclk   = (SEC2NSEC + (clock_src_freq / 2U))/ clock_src_freq;
 800db60:	687b      	ldr	r3, [r7, #4]
 800db62:	085a      	lsrs	r2, r3, #1
 800db64:	4b7a      	ldr	r3, [pc, #488]	@ (800dd50 <I2C_Compute_SCLL_SCLH+0x200>)
 800db66:	4413      	add	r3, r2
 800db68:	687a      	ldr	r2, [r7, #4]
 800db6a:	fbb3 f3f2 	udiv	r3, r3, r2
 800db6e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  ti2cspeed   = (SEC2NSEC + (I2C_Charac[I2C_speed].freq / 2U))/ I2C_Charac[I2C_speed].freq;
 800db70:	4a78      	ldr	r2, [pc, #480]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800db72:	683b      	ldr	r3, [r7, #0]
 800db74:	212c      	movs	r1, #44	@ 0x2c
 800db76:	fb01 f303 	mul.w	r3, r1, r3
 800db7a:	4413      	add	r3, r2
 800db7c:	681b      	ldr	r3, [r3, #0]
 800db7e:	085a      	lsrs	r2, r3, #1
 800db80:	4b73      	ldr	r3, [pc, #460]	@ (800dd50 <I2C_Compute_SCLL_SCLH+0x200>)
 800db82:	4413      	add	r3, r2
 800db84:	4973      	ldr	r1, [pc, #460]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800db86:	683a      	ldr	r2, [r7, #0]
 800db88:	202c      	movs	r0, #44	@ 0x2c
 800db8a:	fb00 f202 	mul.w	r2, r0, r2
 800db8e:	440a      	add	r2, r1
 800db90:	6812      	ldr	r2, [r2, #0]
 800db92:	fbb3 f3f2 	udiv	r3, r3, r2
 800db96:	62bb      	str	r3, [r7, #40]	@ 0x28

  tafdel_min = I2C_ANALOG_FILTER_DELAY_MIN;
 800db98:	2332      	movs	r3, #50	@ 0x32
 800db9a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* tDNF = DNF x tI2CCLK */
  dnf_delay = I2C_Charac[I2C_speed].dnf * ti2cclk;
 800db9c:	4a6d      	ldr	r2, [pc, #436]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800db9e:	683b      	ldr	r3, [r7, #0]
 800dba0:	212c      	movs	r1, #44	@ 0x2c
 800dba2:	fb01 f303 	mul.w	r3, r1, r3
 800dba6:	4413      	add	r3, r2
 800dba8:	3328      	adds	r3, #40	@ 0x28
 800dbaa:	681a      	ldr	r2, [r3, #0]
 800dbac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dbae:	fb02 f303 	mul.w	r3, r2, r3
 800dbb2:	623b      	str	r3, [r7, #32]

  clk_max = SEC2NSEC / I2C_Charac[I2C_speed].freq_min;
 800dbb4:	4a67      	ldr	r2, [pc, #412]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800dbb6:	683b      	ldr	r3, [r7, #0]
 800dbb8:	212c      	movs	r1, #44	@ 0x2c
 800dbba:	fb01 f303 	mul.w	r3, r1, r3
 800dbbe:	4413      	add	r3, r2
 800dbc0:	3304      	adds	r3, #4
 800dbc2:	681b      	ldr	r3, [r3, #0]
 800dbc4:	4a62      	ldr	r2, [pc, #392]	@ (800dd50 <I2C_Compute_SCLL_SCLH+0x200>)
 800dbc6:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbca:	61fb      	str	r3, [r7, #28]
  clk_min = SEC2NSEC / I2C_Charac[I2C_speed].freq_max;
 800dbcc:	4a61      	ldr	r2, [pc, #388]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800dbce:	683b      	ldr	r3, [r7, #0]
 800dbd0:	212c      	movs	r1, #44	@ 0x2c
 800dbd2:	fb01 f303 	mul.w	r3, r1, r3
 800dbd6:	4413      	add	r3, r2
 800dbd8:	3308      	adds	r3, #8
 800dbda:	681b      	ldr	r3, [r3, #0]
 800dbdc:	4a5c      	ldr	r2, [pc, #368]	@ (800dd50 <I2C_Compute_SCLL_SCLH+0x200>)
 800dbde:	fbb2 f3f3 	udiv	r3, r2, r3
 800dbe2:	61bb      	str	r3, [r7, #24]

  prev_error = ti2cspeed;
 800dbe4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dbe6:	643b      	str	r3, [r7, #64]	@ 0x40

  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800dbe8:	2300      	movs	r3, #0
 800dbea:	637b      	str	r3, [r7, #52]	@ 0x34
 800dbec:	e0a3      	b.n	800dd36 <I2C_Compute_SCLL_SCLH+0x1e6>
  {
    /* tPRESC = (PRESC+1) x tI2CCLK*/
    uint32_t tpresc = (I2c_valid_timing[count].presc + 1U) * ti2cclk;
 800dbee:	495a      	ldr	r1, [pc, #360]	@ (800dd58 <I2C_Compute_SCLL_SCLH+0x208>)
 800dbf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dbf2:	4613      	mov	r3, r2
 800dbf4:	009b      	lsls	r3, r3, #2
 800dbf6:	4413      	add	r3, r2
 800dbf8:	009b      	lsls	r3, r3, #2
 800dbfa:	440b      	add	r3, r1
 800dbfc:	681b      	ldr	r3, [r3, #0]
 800dbfe:	1c5a      	adds	r2, r3, #1
 800dc00:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc02:	fb02 f303 	mul.w	r3, r2, r3
 800dc06:	617b      	str	r3, [r7, #20]

    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dc0c:	e08c      	b.n	800dd28 <I2C_Compute_SCLL_SCLH+0x1d8>
    {
      /* tLOW(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLL+1) x tPRESC ] */
      uint32_t tscl_l = tafdel_min + dnf_delay + (2U * ti2cclk) + ((scll + 1U) * tpresc);
 800dc0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc10:	6a3b      	ldr	r3, [r7, #32]
 800dc12:	441a      	add	r2, r3
 800dc14:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dc16:	3301      	adds	r3, #1
 800dc18:	6979      	ldr	r1, [r7, #20]
 800dc1a:	fb03 f101 	mul.w	r1, r3, r1
 800dc1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc20:	005b      	lsls	r3, r3, #1
 800dc22:	440b      	add	r3, r1
 800dc24:	4413      	add	r3, r2
 800dc26:	613b      	str	r3, [r7, #16]


      /* The I2CCLK period tI2CCLK must respect the following conditions:
      tI2CCLK < (tLOW - tfilters) / 4 and tI2CCLK < tHIGH */
      if ((tscl_l > I2C_Charac[I2C_speed].lscl_min) && (ti2cclk < ((tscl_l - tafdel_min - dnf_delay) / 4U)))
 800dc28:	4a4a      	ldr	r2, [pc, #296]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800dc2a:	683b      	ldr	r3, [r7, #0]
 800dc2c:	212c      	movs	r1, #44	@ 0x2c
 800dc2e:	fb01 f303 	mul.w	r3, r1, r3
 800dc32:	4413      	add	r3, r2
 800dc34:	3318      	adds	r3, #24
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	693a      	ldr	r2, [r7, #16]
 800dc3a:	429a      	cmp	r2, r3
 800dc3c:	d971      	bls.n	800dd22 <I2C_Compute_SCLL_SCLH+0x1d2>
 800dc3e:	693a      	ldr	r2, [r7, #16]
 800dc40:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800dc42:	1ad2      	subs	r2, r2, r3
 800dc44:	6a3b      	ldr	r3, [r7, #32]
 800dc46:	1ad3      	subs	r3, r2, r3
 800dc48:	089b      	lsrs	r3, r3, #2
 800dc4a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dc4c:	429a      	cmp	r2, r3
 800dc4e:	d268      	bcs.n	800dd22 <I2C_Compute_SCLL_SCLH+0x1d2>
      {
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800dc50:	2300      	movs	r3, #0
 800dc52:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dc54:	e062      	b.n	800dd1c <I2C_Compute_SCLL_SCLH+0x1cc>
        {
          /* tHIGH(min) <= tAF(min) + tDNF + 2 x tI2CCLK + [(SCLH+1) x tPRESC] */
          uint32_t tscl_h = tafdel_min + dnf_delay + (2U * ti2cclk) + ((sclh + 1U) * tpresc);
 800dc56:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800dc58:	6a3b      	ldr	r3, [r7, #32]
 800dc5a:	441a      	add	r2, r3
 800dc5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dc5e:	3301      	adds	r3, #1
 800dc60:	6979      	ldr	r1, [r7, #20]
 800dc62:	fb03 f101 	mul.w	r1, r3, r1
 800dc66:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800dc68:	005b      	lsls	r3, r3, #1
 800dc6a:	440b      	add	r3, r1
 800dc6c:	4413      	add	r3, r2
 800dc6e:	60fb      	str	r3, [r7, #12]

          /* tSCL = tf + tLOW + tr + tHIGH */
          uint32_t tscl = tscl_l + tscl_h + I2C_Charac[I2C_speed].trise + I2C_Charac[I2C_speed].tfall;
 800dc70:	693a      	ldr	r2, [r7, #16]
 800dc72:	68fb      	ldr	r3, [r7, #12]
 800dc74:	441a      	add	r2, r3
 800dc76:	4937      	ldr	r1, [pc, #220]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800dc78:	683b      	ldr	r3, [r7, #0]
 800dc7a:	202c      	movs	r0, #44	@ 0x2c
 800dc7c:	fb00 f303 	mul.w	r3, r0, r3
 800dc80:	440b      	add	r3, r1
 800dc82:	3320      	adds	r3, #32
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	441a      	add	r2, r3
 800dc88:	4932      	ldr	r1, [pc, #200]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800dc8a:	683b      	ldr	r3, [r7, #0]
 800dc8c:	202c      	movs	r0, #44	@ 0x2c
 800dc8e:	fb00 f303 	mul.w	r3, r0, r3
 800dc92:	440b      	add	r3, r1
 800dc94:	3324      	adds	r3, #36	@ 0x24
 800dc96:	681b      	ldr	r3, [r3, #0]
 800dc98:	4413      	add	r3, r2
 800dc9a:	60bb      	str	r3, [r7, #8]

          if ((tscl >= clk_min) && (tscl <= clk_max) && (tscl_h >= I2C_Charac[I2C_speed].hscl_min) && (ti2cclk < tscl_h))
 800dc9c:	68ba      	ldr	r2, [r7, #8]
 800dc9e:	69bb      	ldr	r3, [r7, #24]
 800dca0:	429a      	cmp	r2, r3
 800dca2:	d338      	bcc.n	800dd16 <I2C_Compute_SCLL_SCLH+0x1c6>
 800dca4:	68ba      	ldr	r2, [r7, #8]
 800dca6:	69fb      	ldr	r3, [r7, #28]
 800dca8:	429a      	cmp	r2, r3
 800dcaa:	d834      	bhi.n	800dd16 <I2C_Compute_SCLL_SCLH+0x1c6>
 800dcac:	4a29      	ldr	r2, [pc, #164]	@ (800dd54 <I2C_Compute_SCLL_SCLH+0x204>)
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	212c      	movs	r1, #44	@ 0x2c
 800dcb2:	fb01 f303 	mul.w	r3, r1, r3
 800dcb6:	4413      	add	r3, r2
 800dcb8:	331c      	adds	r3, #28
 800dcba:	681b      	ldr	r3, [r3, #0]
 800dcbc:	68fa      	ldr	r2, [r7, #12]
 800dcbe:	429a      	cmp	r2, r3
 800dcc0:	d329      	bcc.n	800dd16 <I2C_Compute_SCLL_SCLH+0x1c6>
 800dcc2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800dcc4:	68fb      	ldr	r3, [r7, #12]
 800dcc6:	429a      	cmp	r2, r3
 800dcc8:	d225      	bcs.n	800dd16 <I2C_Compute_SCLL_SCLH+0x1c6>
          {
            int32_t error = (int32_t)tscl - (int32_t)ti2cspeed;
 800dcca:	68ba      	ldr	r2, [r7, #8]
 800dccc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800dcce:	1ad3      	subs	r3, r2, r3
 800dcd0:	633b      	str	r3, [r7, #48]	@ 0x30

            if (error < 0)
 800dcd2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcd4:	2b00      	cmp	r3, #0
 800dcd6:	da02      	bge.n	800dcde <I2C_Compute_SCLL_SCLH+0x18e>
            {
              error = -error;
 800dcd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dcda:	425b      	negs	r3, r3
 800dcdc:	633b      	str	r3, [r7, #48]	@ 0x30
            }

            /* look for the timings with the lowest clock error */
            if ((uint32_t)error < prev_error)
 800dcde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce0:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800dce2:	429a      	cmp	r2, r3
 800dce4:	d917      	bls.n	800dd16 <I2C_Compute_SCLL_SCLH+0x1c6>
            {
              prev_error = (uint32_t)error;
 800dce6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800dce8:	643b      	str	r3, [r7, #64]	@ 0x40
              I2c_valid_timing[count].scll = scll;
 800dcea:	491b      	ldr	r1, [pc, #108]	@ (800dd58 <I2C_Compute_SCLL_SCLH+0x208>)
 800dcec:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dcee:	4613      	mov	r3, r2
 800dcf0:	009b      	lsls	r3, r3, #2
 800dcf2:	4413      	add	r3, r2
 800dcf4:	009b      	lsls	r3, r3, #2
 800dcf6:	440b      	add	r3, r1
 800dcf8:	3310      	adds	r3, #16
 800dcfa:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800dcfc:	601a      	str	r2, [r3, #0]
              I2c_valid_timing[count].sclh = sclh;
 800dcfe:	4916      	ldr	r1, [pc, #88]	@ (800dd58 <I2C_Compute_SCLL_SCLH+0x208>)
 800dd00:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd02:	4613      	mov	r3, r2
 800dd04:	009b      	lsls	r3, r3, #2
 800dd06:	4413      	add	r3, r2
 800dd08:	009b      	lsls	r3, r3, #2
 800dd0a:	440b      	add	r3, r1
 800dd0c:	330c      	adds	r3, #12
 800dd0e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800dd10:	601a      	str	r2, [r3, #0]
              ret = count;
 800dd12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd14:	647b      	str	r3, [r7, #68]	@ 0x44
        for (sclh = 0; sclh < I2C_SCLH_MAX; sclh++)
 800dd16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd18:	3301      	adds	r3, #1
 800dd1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800dd1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800dd1e:	2bff      	cmp	r3, #255	@ 0xff
 800dd20:	d999      	bls.n	800dc56 <I2C_Compute_SCLL_SCLH+0x106>
    for (scll = 0; scll < I2C_SCLL_MAX; scll++)
 800dd22:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd24:	3301      	adds	r3, #1
 800dd26:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800dd28:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800dd2a:	2bff      	cmp	r3, #255	@ 0xff
 800dd2c:	f67f af6f 	bls.w	800dc0e <I2C_Compute_SCLL_SCLH+0xbe>
  for (uint32_t count = 0; count < I2c_valid_timing_nbr; count++)
 800dd30:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800dd32:	3301      	adds	r3, #1
 800dd34:	637b      	str	r3, [r7, #52]	@ 0x34
 800dd36:	4b09      	ldr	r3, [pc, #36]	@ (800dd5c <I2C_Compute_SCLL_SCLH+0x20c>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800dd3c:	429a      	cmp	r2, r3
 800dd3e:	f4ff af56 	bcc.w	800dbee <I2C_Compute_SCLL_SCLH+0x9e>
        }
      }
    }
  }

  return ret;
 800dd42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 800dd44:	4618      	mov	r0, r3
 800dd46:	374c      	adds	r7, #76	@ 0x4c
 800dd48:	46bd      	mov	sp, r7
 800dd4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd4e:	4770      	bx	lr
 800dd50:	3b9aca00 	.word	0x3b9aca00
 800dd54:	0802a28c 	.word	0x0802a28c
 800dd58:	24007a20 	.word	0x24007a20
 800dd5c:	24008420 	.word	0x24008420

0800dd60 <I2C4_MspInit>:
  * @brief  Initializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspInit(I2C_HandleTypeDef *phi2c)
{
 800dd60:	b580      	push	{r7, lr}
 800dd62:	b08a      	sub	sp, #40	@ 0x28
 800dd64:	af00      	add	r7, sp, #0
 800dd66:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /*** Configure the GPIOs ***/
  /* Enable SCL GPIO clock */
  BUS_I2C4_SCL_GPIO_CLK_ENABLE();
 800dd68:	4b31      	ldr	r3, [pc, #196]	@ (800de30 <I2C4_MspInit+0xd0>)
 800dd6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd6e:	4a30      	ldr	r2, [pc, #192]	@ (800de30 <I2C4_MspInit+0xd0>)
 800dd70:	f043 0308 	orr.w	r3, r3, #8
 800dd74:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dd78:	4b2d      	ldr	r3, [pc, #180]	@ (800de30 <I2C4_MspInit+0xd0>)
 800dd7a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd7e:	f003 0308 	and.w	r3, r3, #8
 800dd82:	613b      	str	r3, [r7, #16]
 800dd84:	693b      	ldr	r3, [r7, #16]
  /* Enable SDA GPIO clock */
  BUS_I2C4_SDA_GPIO_CLK_ENABLE();
 800dd86:	4b2a      	ldr	r3, [pc, #168]	@ (800de30 <I2C4_MspInit+0xd0>)
 800dd88:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd8c:	4a28      	ldr	r2, [pc, #160]	@ (800de30 <I2C4_MspInit+0xd0>)
 800dd8e:	f043 0308 	orr.w	r3, r3, #8
 800dd92:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800dd96:	4b26      	ldr	r3, [pc, #152]	@ (800de30 <I2C4_MspInit+0xd0>)
 800dd98:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800dd9c:	f003 0308 	and.w	r3, r3, #8
 800dda0:	60fb      	str	r3, [r7, #12]
 800dda2:	68fb      	ldr	r3, [r7, #12]

  /* Configure I2C Tx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SCL_PIN;
 800dda4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800dda8:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800ddaa:	2312      	movs	r3, #18
 800ddac:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800ddae:	2300      	movs	r3, #0
 800ddb0:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ddb2:	2302      	movs	r3, #2
 800ddb4:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SCL_AF;
 800ddb6:	2304      	movs	r3, #4
 800ddb8:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SCL_GPIO_PORT, &gpio_init_structure);
 800ddba:	f107 0314 	add.w	r3, r7, #20
 800ddbe:	4619      	mov	r1, r3
 800ddc0:	481c      	ldr	r0, [pc, #112]	@ (800de34 <I2C4_MspInit+0xd4>)
 800ddc2:	f009 fda1 	bl	8017908 <HAL_GPIO_Init>

  /* Configure I2C Rx as alternate function */
  gpio_init_structure.Pin       = BUS_I2C4_SDA_PIN;
 800ddc6:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800ddca:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Mode      = GPIO_MODE_AF_OD;
 800ddcc:	2312      	movs	r3, #18
 800ddce:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800ddd0:	2300      	movs	r3, #0
 800ddd2:	61fb      	str	r3, [r7, #28]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ddd4:	2302      	movs	r3, #2
 800ddd6:	623b      	str	r3, [r7, #32]
  gpio_init_structure.Alternate = BUS_I2C4_SDA_AF;
 800ddd8:	2304      	movs	r3, #4
 800ddda:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(BUS_I2C4_SDA_GPIO_PORT, &gpio_init_structure);
 800dddc:	f107 0314 	add.w	r3, r7, #20
 800dde0:	4619      	mov	r1, r3
 800dde2:	4814      	ldr	r0, [pc, #80]	@ (800de34 <I2C4_MspInit+0xd4>)
 800dde4:	f009 fd90 	bl	8017908 <HAL_GPIO_Init>

  /*** Configure the I2C peripheral ***/
  /* Enable I2C clock */
  BUS_I2C4_CLK_ENABLE();
 800dde8:	4b11      	ldr	r3, [pc, #68]	@ (800de30 <I2C4_MspInit+0xd0>)
 800ddea:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddee:	4a10      	ldr	r2, [pc, #64]	@ (800de30 <I2C4_MspInit+0xd0>)
 800ddf0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ddf4:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 800ddf8:	4b0d      	ldr	r3, [pc, #52]	@ (800de30 <I2C4_MspInit+0xd0>)
 800ddfa:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800ddfe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800de02:	60bb      	str	r3, [r7, #8]
 800de04:	68bb      	ldr	r3, [r7, #8]

  /* Force the I2C peripheral clock reset */
  BUS_I2C4_FORCE_RESET();
 800de06:	4b0a      	ldr	r3, [pc, #40]	@ (800de30 <I2C4_MspInit+0xd0>)
 800de08:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de0c:	4a08      	ldr	r2, [pc, #32]	@ (800de30 <I2C4_MspInit+0xd0>)
 800de0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800de12:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c

  /* Release the I2C peripheral clock reset */
  BUS_I2C4_RELEASE_RESET();
 800de16:	4b06      	ldr	r3, [pc, #24]	@ (800de30 <I2C4_MspInit+0xd0>)
 800de18:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 800de1c:	4a04      	ldr	r2, [pc, #16]	@ (800de30 <I2C4_MspInit+0xd0>)
 800de1e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de22:	f8c2 309c 	str.w	r3, [r2, #156]	@ 0x9c
}
 800de26:	bf00      	nop
 800de28:	3728      	adds	r7, #40	@ 0x28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	58024400 	.word	0x58024400
 800de34:	58020c00 	.word	0x58020c00

0800de38 <I2C4_MspDeInit>:
  * @brief  DeInitializes I2C MSP.
  * @param  phi2c  I2C handler
  * @retval None
  */
static void I2C4_MspDeInit(I2C_HandleTypeDef *phi2c)
{
 800de38:	b580      	push	{r7, lr}
 800de3a:	b088      	sub	sp, #32
 800de3c:	af00      	add	r7, sp, #0
 800de3e:	6078      	str	r0, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(phi2c);

  /* Configure I2C Tx, Rx as alternate function */
  gpio_init_structure.Pin = BUS_I2C4_SCL_PIN;
 800de40:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800de44:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SCL_GPIO_PORT, gpio_init_structure.Pin );
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	4619      	mov	r1, r3
 800de4a:	480b      	ldr	r0, [pc, #44]	@ (800de78 <I2C4_MspDeInit+0x40>)
 800de4c:	f009 ff0c 	bl	8017c68 <HAL_GPIO_DeInit>
  gpio_init_structure.Pin = BUS_I2C4_SDA_PIN;
 800de50:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800de54:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(BUS_I2C4_SDA_GPIO_PORT, gpio_init_structure.Pin);
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	4619      	mov	r1, r3
 800de5a:	4807      	ldr	r0, [pc, #28]	@ (800de78 <I2C4_MspDeInit+0x40>)
 800de5c:	f009 ff04 	bl	8017c68 <HAL_GPIO_DeInit>

  /* Disable I2C clock */
  BUS_I2C4_CLK_DISABLE();
 800de60:	4b06      	ldr	r3, [pc, #24]	@ (800de7c <I2C4_MspDeInit+0x44>)
 800de62:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 800de66:	4a05      	ldr	r2, [pc, #20]	@ (800de7c <I2C4_MspDeInit+0x44>)
 800de68:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800de6c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
}
 800de70:	bf00      	nop
 800de72:	3720      	adds	r7, #32
 800de74:	46bd      	mov	sp, r7
 800de76:	bd80      	pop	{r7, pc}
 800de78:	58020c00 	.word	0x58020c00
 800de7c:	58024400 	.word	0x58024400

0800de80 <I2C4_WriteReg>:
  * @param  pData      The target register value to be written
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_WriteReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800de80:	b580      	push	{r7, lr}
 800de82:	b088      	sub	sp, #32
 800de84:	af04      	add	r7, sp, #16
 800de86:	607b      	str	r3, [r7, #4]
 800de88:	4603      	mov	r3, r0
 800de8a:	81fb      	strh	r3, [r7, #14]
 800de8c:	460b      	mov	r3, r1
 800de8e:	81bb      	strh	r3, [r7, #12]
 800de90:	4613      	mov	r3, r2
 800de92:	817b      	strh	r3, [r7, #10]
  if(HAL_I2C_Mem_Write(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800de94:	8978      	ldrh	r0, [r7, #10]
 800de96:	89ba      	ldrh	r2, [r7, #12]
 800de98:	89f9      	ldrh	r1, [r7, #14]
 800de9a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800de9e:	9302      	str	r3, [sp, #8]
 800dea0:	8b3b      	ldrh	r3, [r7, #24]
 800dea2:	9301      	str	r3, [sp, #4]
 800dea4:	687b      	ldr	r3, [r7, #4]
 800dea6:	9300      	str	r3, [sp, #0]
 800dea8:	4603      	mov	r3, r0
 800deaa:	4807      	ldr	r0, [pc, #28]	@ (800dec8 <I2C4_WriteReg+0x48>)
 800deac:	f00a f912 	bl	80180d4 <HAL_I2C_Mem_Write>
 800deb0:	4603      	mov	r3, r0
 800deb2:	2b00      	cmp	r3, #0
 800deb4:	d101      	bne.n	800deba <I2C4_WriteReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800deb6:	2300      	movs	r3, #0
 800deb8:	e001      	b.n	800debe <I2C4_WriteReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800deba:	f06f 0307 	mvn.w	r3, #7
}
 800debe:	4618      	mov	r0, r3
 800dec0:	3710      	adds	r7, #16
 800dec2:	46bd      	mov	sp, r7
 800dec4:	bd80      	pop	{r7, pc}
 800dec6:	bf00      	nop
 800dec8:	24008424 	.word	0x24008424

0800decc <I2C4_ReadReg>:
  * @param  pData      The target register value to be read
  * @param  Length     data length in bytes
  * @retval BSP status
  */
static int32_t I2C4_ReadReg(uint16_t DevAddr, uint16_t Reg, uint16_t MemAddSize, uint8_t *pData, uint16_t Length)
{
 800decc:	b580      	push	{r7, lr}
 800dece:	b088      	sub	sp, #32
 800ded0:	af04      	add	r7, sp, #16
 800ded2:	607b      	str	r3, [r7, #4]
 800ded4:	4603      	mov	r3, r0
 800ded6:	81fb      	strh	r3, [r7, #14]
 800ded8:	460b      	mov	r3, r1
 800deda:	81bb      	strh	r3, [r7, #12]
 800dedc:	4613      	mov	r3, r2
 800dede:	817b      	strh	r3, [r7, #10]
  if (HAL_I2C_Mem_Read(&hbus_i2c4, DevAddr, Reg, MemAddSize, pData, Length, 1000) == HAL_OK)
 800dee0:	8978      	ldrh	r0, [r7, #10]
 800dee2:	89ba      	ldrh	r2, [r7, #12]
 800dee4:	89f9      	ldrh	r1, [r7, #14]
 800dee6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800deea:	9302      	str	r3, [sp, #8]
 800deec:	8b3b      	ldrh	r3, [r7, #24]
 800deee:	9301      	str	r3, [sp, #4]
 800def0:	687b      	ldr	r3, [r7, #4]
 800def2:	9300      	str	r3, [sp, #0]
 800def4:	4603      	mov	r3, r0
 800def6:	4807      	ldr	r0, [pc, #28]	@ (800df14 <I2C4_ReadReg+0x48>)
 800def8:	f00a fa00 	bl	80182fc <HAL_I2C_Mem_Read>
 800defc:	4603      	mov	r3, r0
 800defe:	2b00      	cmp	r3, #0
 800df00:	d101      	bne.n	800df06 <I2C4_ReadReg+0x3a>
  {
    return BSP_ERROR_NONE;
 800df02:	2300      	movs	r3, #0
 800df04:	e001      	b.n	800df0a <I2C4_ReadReg+0x3e>
  }

  return BSP_ERROR_BUS_FAILURE;
 800df06:	f06f 0307 	mvn.w	r3, #7
}
 800df0a:	4618      	mov	r0, r3
 800df0c:	3710      	adds	r7, #16
 800df0e:	46bd      	mov	sp, r7
 800df10:	bd80      	pop	{r7, pc}
 800df12:	bf00      	nop
 800df14:	24008424 	.word	0x24008424

0800df18 <BSP_CAMERA_Init>:
  *         naming QQVGA, QVGA, VGA ...
  * @param  PixelFormat Capture pixel format
  * @retval BSP status
  */
int32_t BSP_CAMERA_Init(uint32_t Instance, uint32_t Resolution, uint32_t PixelFormat)
{
 800df18:	b580      	push	{r7, lr}
 800df1a:	b088      	sub	sp, #32
 800df1c:	af02      	add	r7, sp, #8
 800df1e:	60f8      	str	r0, [r7, #12]
 800df20:	60b9      	str	r1, [r7, #8]
 800df22:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800df24:	2300      	movs	r3, #0
 800df26:	617b      	str	r3, [r7, #20]

  if(Instance >= CAMERA_INSTANCES_NBR)
 800df28:	68fb      	ldr	r3, [r7, #12]
 800df2a:	2b00      	cmp	r3, #0
 800df2c:	d003      	beq.n	800df36 <BSP_CAMERA_Init+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800df2e:	f06f 0301 	mvn.w	r3, #1
 800df32:	617b      	str	r3, [r7, #20]
 800df34:	e08f      	b.n	800e056 <BSP_CAMERA_Init+0x13e>
        return BSP_ERROR_MSP_FAILURE;
      }
    }
#else
    /* DCMI Initialization */
    DCMI_MspInit(&hcamera_dcmi);
 800df36:	484a      	ldr	r0, [pc, #296]	@ (800e060 <BSP_CAMERA_Init+0x148>)
 800df38:	f000 fbcc 	bl	800e6d4 <DCMI_MspInit>
#endif
    /* Initialize the camera driver structure */
    if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800df3c:	4848      	ldr	r0, [pc, #288]	@ (800e060 <BSP_CAMERA_Init+0x148>)
 800df3e:	f000 f8f9 	bl	800e134 <MX_DCMI_Init>
 800df42:	4603      	mov	r3, r0
 800df44:	2b00      	cmp	r3, #0
 800df46:	d003      	beq.n	800df50 <BSP_CAMERA_Init+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800df48:	f06f 0303 	mvn.w	r3, #3
 800df4c:	617b      	str	r3, [r7, #20]
 800df4e:	e082      	b.n	800e056 <BSP_CAMERA_Init+0x13e>
    }
    else if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 800df50:	2000      	movs	r0, #0
 800df52:	f000 facf 	bl	800e4f4 <BSP_CAMERA_HwReset>
 800df56:	4603      	mov	r3, r0
 800df58:	2b00      	cmp	r3, #0
 800df5a:	d003      	beq.n	800df64 <BSP_CAMERA_Init+0x4c>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800df5c:	f06f 0307 	mvn.w	r3, #7
 800df60:	617b      	str	r3, [r7, #20]
 800df62:	e078      	b.n	800e056 <BSP_CAMERA_Init+0x13e>
    }
    else
    {
#if (USE_CAMERA_SENSOR_OV9655 == 1)
      ret= OV9655_Probe(Resolution, PixelFormat);
 800df64:	6879      	ldr	r1, [r7, #4]
 800df66:	68b8      	ldr	r0, [r7, #8]
 800df68:	f000 fd68 	bl	800ea3c <OV9655_Probe>
 800df6c:	6178      	str	r0, [r7, #20]
#endif
#if (USE_CAMERA_SENSOR_OV5640 == 1)
      if(ret != BSP_ERROR_NONE)
 800df6e:	697b      	ldr	r3, [r7, #20]
 800df70:	2b00      	cmp	r3, #0
 800df72:	d004      	beq.n	800df7e <BSP_CAMERA_Init+0x66>
      {
        ret = OV5640_Probe(Resolution, PixelFormat);
 800df74:	6879      	ldr	r1, [r7, #4]
 800df76:	68b8      	ldr	r0, [r7, #8]
 800df78:	f000 fdda 	bl	800eb30 <OV5640_Probe>
 800df7c:	6178      	str	r0, [r7, #20]
      }
#endif
      if(ret != BSP_ERROR_NONE)
 800df7e:	697b      	ldr	r3, [r7, #20]
 800df80:	2b00      	cmp	r3, #0
 800df82:	d003      	beq.n	800df8c <BSP_CAMERA_Init+0x74>
      {
        ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800df84:	f06f 0306 	mvn.w	r3, #6
 800df88:	617b      	str	r3, [r7, #20]
 800df8a:	e064      	b.n	800e056 <BSP_CAMERA_Init+0x13e>
      }
      else
      {
        if((CameraId == OV9655_ID) || (CameraId == OV9655_ID_2))
 800df8c:	4b35      	ldr	r3, [pc, #212]	@ (800e064 <BSP_CAMERA_Init+0x14c>)
 800df8e:	681b      	ldr	r3, [r3, #0]
 800df90:	f249 6256 	movw	r2, #38486	@ 0x9656
 800df94:	4293      	cmp	r3, r2
 800df96:	d005      	beq.n	800dfa4 <BSP_CAMERA_Init+0x8c>
 800df98:	4b32      	ldr	r3, [pc, #200]	@ (800e064 <BSP_CAMERA_Init+0x14c>)
 800df9a:	681b      	ldr	r3, [r3, #0]
 800df9c:	f249 6257 	movw	r2, #38487	@ 0x9657
 800dfa0:	4293      	cmp	r3, r2
 800dfa2:	d11d      	bne.n	800dfe0 <BSP_CAMERA_Init+0xc8>
        {
          if(Resolution == CAMERA_R480x272)
 800dfa4:	68bb      	ldr	r3, [r7, #8]
 800dfa6:	2b02      	cmp	r3, #2
 800dfa8:	d127      	bne.n	800dffa <BSP_CAMERA_Init+0xe2>
          {
            if(HAL_DCMI_ConfigCROP(&hcamera_dcmi,           /* Crop in the middle of the VGA picture */
 800dfaa:	f240 130f 	movw	r3, #271	@ 0x10f
 800dfae:	9300      	str	r3, [sp, #0]
 800dfb0:	f240 33bf 	movw	r3, #959	@ 0x3bf
 800dfb4:	2268      	movs	r2, #104	@ 0x68
 800dfb6:	2150      	movs	r1, #80	@ 0x50
 800dfb8:	4829      	ldr	r0, [pc, #164]	@ (800e060 <BSP_CAMERA_Init+0x148>)
 800dfba:	f004 fdc5 	bl	8012b48 <HAL_DCMI_ConfigCrop>
 800dfbe:	4603      	mov	r3, r0
 800dfc0:	2b00      	cmp	r3, #0
 800dfc2:	d003      	beq.n	800dfcc <BSP_CAMERA_Init+0xb4>
                                   (CAMERA_VGA_RES_X - CAMERA_480x272_RES_X)/2,
                                   (CAMERA_VGA_RES_Y - CAMERA_480x272_RES_Y)/2,
                                   (CAMERA_480x272_RES_X * 2) - 1,
                                   CAMERA_480x272_RES_Y - 1) != HAL_OK)
            {
              ret = BSP_ERROR_PERIPH_FAILURE;
 800dfc4:	f06f 0303 	mvn.w	r3, #3
 800dfc8:	617b      	str	r3, [r7, #20]
          if(Resolution == CAMERA_R480x272)
 800dfca:	e016      	b.n	800dffa <BSP_CAMERA_Init+0xe2>
            }
            else
            {
              if(HAL_DCMI_EnableCROP(&hcamera_dcmi) != HAL_OK)
 800dfcc:	4824      	ldr	r0, [pc, #144]	@ (800e060 <BSP_CAMERA_Init+0x148>)
 800dfce:	f004 fe18 	bl	8012c02 <HAL_DCMI_EnableCrop>
 800dfd2:	4603      	mov	r3, r0
 800dfd4:	2b00      	cmp	r3, #0
 800dfd6:	d010      	beq.n	800dffa <BSP_CAMERA_Init+0xe2>
              {
                ret = BSP_ERROR_PERIPH_FAILURE;
 800dfd8:	f06f 0303 	mvn.w	r3, #3
 800dfdc:	617b      	str	r3, [r7, #20]
          if(Resolution == CAMERA_R480x272)
 800dfde:	e00c      	b.n	800dffa <BSP_CAMERA_Init+0xe2>
            }
          }
        }
        else
        {
          HSPolarity = DCMI_HSPOLARITY_HIGH;
 800dfe0:	4b21      	ldr	r3, [pc, #132]	@ (800e068 <BSP_CAMERA_Init+0x150>)
 800dfe2:	2240      	movs	r2, #64	@ 0x40
 800dfe4:	601a      	str	r2, [r3, #0]
          /* Initialize the camera driver structure */
          if(MX_DCMI_Init(&hcamera_dcmi) != HAL_OK)
 800dfe6:	481e      	ldr	r0, [pc, #120]	@ (800e060 <BSP_CAMERA_Init+0x148>)
 800dfe8:	f000 f8a4 	bl	800e134 <MX_DCMI_Init>
 800dfec:	4603      	mov	r3, r0
 800dfee:	2b00      	cmp	r3, #0
 800dff0:	d004      	beq.n	800dffc <BSP_CAMERA_Init+0xe4>
          {
            ret = BSP_ERROR_PERIPH_FAILURE;
 800dff2:	f06f 0303 	mvn.w	r3, #3
 800dff6:	617b      	str	r3, [r7, #20]
 800dff8:	e000      	b.n	800dffc <BSP_CAMERA_Init+0xe4>
          if(Resolution == CAMERA_R480x272)
 800dffa:	bf00      	nop
          }
        }

        if(ret == BSP_ERROR_NONE)
 800dffc:	697b      	ldr	r3, [r7, #20]
 800dffe:	2b00      	cmp	r3, #0
 800e000:	d108      	bne.n	800e014 <BSP_CAMERA_Init+0xfc>
        {
          if(BSP_CAMERA_HwReset(0) != BSP_ERROR_NONE)
 800e002:	2000      	movs	r0, #0
 800e004:	f000 fa76 	bl	800e4f4 <BSP_CAMERA_HwReset>
 800e008:	4603      	mov	r3, r0
 800e00a:	2b00      	cmp	r3, #0
 800e00c:	d002      	beq.n	800e014 <BSP_CAMERA_Init+0xfc>
          {
            ret = BSP_ERROR_BUS_FAILURE;
 800e00e:	f06f 0307 	mvn.w	r3, #7
 800e012:	617b      	str	r3, [r7, #20]
          }
        }

        if(ret == BSP_ERROR_NONE)
 800e014:	697b      	ldr	r3, [r7, #20]
 800e016:	2b00      	cmp	r3, #0
 800e018:	d108      	bne.n	800e02c <BSP_CAMERA_Init+0x114>
        {
          Camera_Ctx[Instance].CameraId  = CameraId;
 800e01a:	4b12      	ldr	r3, [pc, #72]	@ (800e064 <BSP_CAMERA_Init+0x14c>)
 800e01c:	681a      	ldr	r2, [r3, #0]
 800e01e:	4913      	ldr	r1, [pc, #76]	@ (800e06c <BSP_CAMERA_Init+0x154>)
 800e020:	68fb      	ldr	r3, [r7, #12]
 800e022:	2034      	movs	r0, #52	@ 0x34
 800e024:	fb00 f303 	mul.w	r3, r0, r3
 800e028:	440b      	add	r3, r1
 800e02a:	601a      	str	r2, [r3, #0]
          {
            ret = BSP_ERROR_NONE;
          }
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 1) */
        }
        if(ret == BSP_ERROR_NONE)
 800e02c:	697b      	ldr	r3, [r7, #20]
 800e02e:	2b00      	cmp	r3, #0
 800e030:	d111      	bne.n	800e056 <BSP_CAMERA_Init+0x13e>
        {
          Camera_Ctx[Instance].Resolution  = Resolution;
 800e032:	4a0e      	ldr	r2, [pc, #56]	@ (800e06c <BSP_CAMERA_Init+0x154>)
 800e034:	68fb      	ldr	r3, [r7, #12]
 800e036:	2134      	movs	r1, #52	@ 0x34
 800e038:	fb01 f303 	mul.w	r3, r1, r3
 800e03c:	4413      	add	r3, r2
 800e03e:	3304      	adds	r3, #4
 800e040:	68ba      	ldr	r2, [r7, #8]
 800e042:	601a      	str	r2, [r3, #0]
          Camera_Ctx[Instance].PixelFormat = PixelFormat;
 800e044:	4a09      	ldr	r2, [pc, #36]	@ (800e06c <BSP_CAMERA_Init+0x154>)
 800e046:	68fb      	ldr	r3, [r7, #12]
 800e048:	2134      	movs	r1, #52	@ 0x34
 800e04a:	fb01 f303 	mul.w	r3, r1, r3
 800e04e:	4413      	add	r3, r2
 800e050:	3308      	adds	r3, #8
 800e052:	687a      	ldr	r2, [r7, #4]
 800e054:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* BSP status */
  return ret;
 800e056:	697b      	ldr	r3, [r7, #20]
}
 800e058:	4618      	mov	r0, r3
 800e05a:	3718      	adds	r7, #24
 800e05c:	46bd      	mov	sp, r7
 800e05e:	bd80      	pop	{r7, pc}
 800e060:	2400847c 	.word	0x2400847c
 800e064:	24008530 	.word	0x24008530
 800e068:	2400852c 	.word	0x2400852c
 800e06c:	240084cc 	.word	0x240084cc

0800e070 <BSP_CAMERA_DeInit>:
  * @brief  DeInitializes the camera.
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DeInit(uint32_t Instance)
{
 800e070:	b580      	push	{r7, lr}
 800e072:	b084      	sub	sp, #16
 800e074:	af00      	add	r7, sp, #0
 800e076:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e078:	687b      	ldr	r3, [r7, #4]
 800e07a:	2b00      	cmp	r3, #0
 800e07c:	d003      	beq.n	800e086 <BSP_CAMERA_DeInit+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e07e:	f06f 0301 	mvn.w	r3, #1
 800e082:	60fb      	str	r3, [r7, #12]
 800e084:	e049      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
  }
  else
  {
    if((Camera_CompObj == NULL)||(Camera_Drv == NULL))
 800e086:	4b27      	ldr	r3, [pc, #156]	@ (800e124 <BSP_CAMERA_DeInit+0xb4>)
 800e088:	681b      	ldr	r3, [r3, #0]
 800e08a:	2b00      	cmp	r3, #0
 800e08c:	d003      	beq.n	800e096 <BSP_CAMERA_DeInit+0x26>
 800e08e:	4b26      	ldr	r3, [pc, #152]	@ (800e128 <BSP_CAMERA_DeInit+0xb8>)
 800e090:	681b      	ldr	r3, [r3, #0]
 800e092:	2b00      	cmp	r3, #0
 800e094:	d103      	bne.n	800e09e <BSP_CAMERA_DeInit+0x2e>
    {
      ret = BSP_ERROR_NO_INIT;
 800e096:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800e09a:	60fb      	str	r3, [r7, #12]
 800e09c:	e03d      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
    }
    else
    {
      hcamera_dcmi.Instance = DCMI;
 800e09e:	4b23      	ldr	r3, [pc, #140]	@ (800e12c <BSP_CAMERA_DeInit+0xbc>)
 800e0a0:	4a23      	ldr	r2, [pc, #140]	@ (800e130 <BSP_CAMERA_DeInit+0xc0>)
 800e0a2:	601a      	str	r2, [r3, #0]

      /* First stop the camera to insure all data are transferred */
      if(BSP_CAMERA_Stop(Instance) != BSP_ERROR_NONE)
 800e0a4:	6878      	ldr	r0, [r7, #4]
 800e0a6:	f000 f8ab 	bl	800e200 <BSP_CAMERA_Stop>
 800e0aa:	4603      	mov	r3, r0
 800e0ac:	2b00      	cmp	r3, #0
 800e0ae:	d003      	beq.n	800e0b8 <BSP_CAMERA_DeInit+0x48>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800e0b0:	f06f 0303 	mvn.w	r3, #3
 800e0b4:	60fb      	str	r3, [r7, #12]
 800e0b6:	e030      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
      }
      else if(HAL_DCMI_DisableCROP(&hcamera_dcmi)!= HAL_OK)
 800e0b8:	481c      	ldr	r0, [pc, #112]	@ (800e12c <BSP_CAMERA_DeInit+0xbc>)
 800e0ba:	f004 fd78 	bl	8012bae <HAL_DCMI_DisableCrop>
 800e0be:	4603      	mov	r3, r0
 800e0c0:	2b00      	cmp	r3, #0
 800e0c2:	d003      	beq.n	800e0cc <BSP_CAMERA_DeInit+0x5c>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800e0c4:	f06f 0303 	mvn.w	r3, #3
 800e0c8:	60fb      	str	r3, [r7, #12]
 800e0ca:	e026      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
      }
      else if(HAL_DCMI_DeInit(&hcamera_dcmi) != HAL_OK)
 800e0cc:	4817      	ldr	r0, [pc, #92]	@ (800e12c <BSP_CAMERA_DeInit+0xbc>)
 800e0ce:	f004 fae7 	bl	80126a0 <HAL_DCMI_DeInit>
 800e0d2:	4603      	mov	r3, r0
 800e0d4:	2b00      	cmp	r3, #0
 800e0d6:	d003      	beq.n	800e0e0 <BSP_CAMERA_DeInit+0x70>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800e0d8:	f06f 0303 	mvn.w	r3, #3
 800e0dc:	60fb      	str	r3, [r7, #12]
 800e0de:	e01c      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
      }
      else
      {
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 0)
        DCMI_MspDeInit(&hcamera_dcmi);
 800e0e0:	4812      	ldr	r0, [pc, #72]	@ (800e12c <BSP_CAMERA_DeInit+0xbc>)
 800e0e2:	f000 fc13 	bl	800e90c <DCMI_MspDeInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS == 0) */

        if(Camera_Drv->DeInit(Camera_CompObj) != BSP_ERROR_NONE)
 800e0e6:	4b10      	ldr	r3, [pc, #64]	@ (800e128 <BSP_CAMERA_DeInit+0xb8>)
 800e0e8:	681b      	ldr	r3, [r3, #0]
 800e0ea:	685b      	ldr	r3, [r3, #4]
 800e0ec:	4a0d      	ldr	r2, [pc, #52]	@ (800e124 <BSP_CAMERA_DeInit+0xb4>)
 800e0ee:	6812      	ldr	r2, [r2, #0]
 800e0f0:	4610      	mov	r0, r2
 800e0f2:	4798      	blx	r3
 800e0f4:	4603      	mov	r3, r0
 800e0f6:	2b00      	cmp	r3, #0
 800e0f8:	d003      	beq.n	800e102 <BSP_CAMERA_DeInit+0x92>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 800e0fa:	f06f 0304 	mvn.w	r3, #4
 800e0fe:	60fb      	str	r3, [r7, #12]
 800e100:	e00b      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
        }/* Set Camera in Power Down */
        else if(BSP_CAMERA_PwrDown(0) != BSP_ERROR_NONE)
 800e102:	2000      	movs	r0, #0
 800e104:	f000 fa3c 	bl	800e580 <BSP_CAMERA_PwrDown>
 800e108:	4603      	mov	r3, r0
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d003      	beq.n	800e116 <BSP_CAMERA_DeInit+0xa6>
        {
          ret = BSP_ERROR_BUS_FAILURE;
 800e10e:	f06f 0307 	mvn.w	r3, #7
 800e112:	60fb      	str	r3, [r7, #12]
 800e114:	e001      	b.n	800e11a <BSP_CAMERA_DeInit+0xaa>
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800e116:	2300      	movs	r3, #0
 800e118:	60fb      	str	r3, [r7, #12]
        }
      }
    }
  }
  /* Return BSP status */
  return ret;
 800e11a:	68fb      	ldr	r3, [r7, #12]
}
 800e11c:	4618      	mov	r0, r3
 800e11e:	3710      	adds	r7, #16
 800e120:	46bd      	mov	sp, r7
 800e122:	bd80      	pop	{r7, pc}
 800e124:	24008478 	.word	0x24008478
 800e128:	24008500 	.word	0x24008500
 800e12c:	2400847c 	.word	0x2400847c
 800e130:	48020000 	.word	0x48020000

0800e134 <MX_DCMI_Init>:
  * @param  hdcmi  DCMI handle
  * @note   Being __weak it can be overwritten by the application
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DCMI_Init(DCMI_HandleTypeDef* hdcmi)
{
 800e134:	b580      	push	{r7, lr}
 800e136:	b082      	sub	sp, #8
 800e138:	af00      	add	r7, sp, #0
 800e13a:	6078      	str	r0, [r7, #4]
  /*** Configures the DCMI to interface with the camera module ***/
  /* DCMI configuration */
  hdcmi->Instance              = DCMI;
 800e13c:	687b      	ldr	r3, [r7, #4]
 800e13e:	4a11      	ldr	r2, [pc, #68]	@ (800e184 <MX_DCMI_Init+0x50>)
 800e140:	601a      	str	r2, [r3, #0]
  hdcmi->Init.CaptureRate      = DCMI_CR_ALL_FRAME;
 800e142:	687b      	ldr	r3, [r7, #4]
 800e144:	2200      	movs	r2, #0
 800e146:	615a      	str	r2, [r3, #20]
  hdcmi->Init.HSPolarity       = HSPolarity;
 800e148:	4b0f      	ldr	r3, [pc, #60]	@ (800e188 <MX_DCMI_Init+0x54>)
 800e14a:	681a      	ldr	r2, [r3, #0]
 800e14c:	687b      	ldr	r3, [r7, #4]
 800e14e:	611a      	str	r2, [r3, #16]
  hdcmi->Init.SynchroMode      = DCMI_SYNCHRO_HARDWARE;
 800e150:	687b      	ldr	r3, [r7, #4]
 800e152:	2200      	movs	r2, #0
 800e154:	605a      	str	r2, [r3, #4]
  hdcmi->Init.VSPolarity       = DCMI_VSPOLARITY_HIGH;
 800e156:	687b      	ldr	r3, [r7, #4]
 800e158:	2280      	movs	r2, #128	@ 0x80
 800e15a:	60da      	str	r2, [r3, #12]
  hdcmi->Init.ExtendedDataMode = DCMI_EXTEND_DATA_8B;
 800e15c:	687b      	ldr	r3, [r7, #4]
 800e15e:	2200      	movs	r2, #0
 800e160:	619a      	str	r2, [r3, #24]
  hdcmi->Init.PCKPolarity      = DCMI_PCKPOLARITY_RISING;
 800e162:	687b      	ldr	r3, [r7, #4]
 800e164:	2220      	movs	r2, #32
 800e166:	609a      	str	r2, [r3, #8]

  if(HAL_DCMI_Init(hdcmi) != HAL_OK)
 800e168:	6878      	ldr	r0, [r7, #4]
 800e16a:	f004 fa1f 	bl	80125ac <HAL_DCMI_Init>
 800e16e:	4603      	mov	r3, r0
 800e170:	2b00      	cmp	r3, #0
 800e172:	d001      	beq.n	800e178 <MX_DCMI_Init+0x44>
  {
    return HAL_ERROR;
 800e174:	2301      	movs	r3, #1
 800e176:	e000      	b.n	800e17a <MX_DCMI_Init+0x46>
  }
  return HAL_OK;
 800e178:	2300      	movs	r3, #0
}
 800e17a:	4618      	mov	r0, r3
 800e17c:	3708      	adds	r7, #8
 800e17e:	46bd      	mov	sp, r7
 800e180:	bd80      	pop	{r7, pc}
 800e182:	bf00      	nop
 800e184:	48020000 	.word	0x48020000
 800e188:	2400852c 	.word	0x2400852c

0800e18c <BSP_CAMERA_Start>:
  * @param  pBff     pointer to the camera output buffer
  * @param  Mode CAMERA_MODE_CONTINUOUS or CAMERA_MODE_SNAPSHOT
  * @retval BSP status
  */
int32_t BSP_CAMERA_Start(uint32_t Instance, uint8_t *pBff, uint32_t Mode)
{
 800e18c:	b590      	push	{r4, r7, lr}
 800e18e:	b087      	sub	sp, #28
 800e190:	af00      	add	r7, sp, #0
 800e192:	60f8      	str	r0, [r7, #12]
 800e194:	60b9      	str	r1, [r7, #8]
 800e196:	607a      	str	r2, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e198:	68fb      	ldr	r3, [r7, #12]
 800e19a:	2b00      	cmp	r3, #0
 800e19c:	d003      	beq.n	800e1a6 <BSP_CAMERA_Start+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e19e:	f06f 0301 	mvn.w	r3, #1
 800e1a2:	617b      	str	r3, [r7, #20]
 800e1a4:	e022      	b.n	800e1ec <BSP_CAMERA_Start+0x60>
  }
  else if(HAL_DCMI_Start_DMA(&hcamera_dcmi, Mode, (uint32_t)pBff, (uint32_t)GetSize(Camera_Ctx[Instance].Resolution, Camera_Ctx[Instance].PixelFormat)) != HAL_OK)
 800e1a6:	68bc      	ldr	r4, [r7, #8]
 800e1a8:	4a13      	ldr	r2, [pc, #76]	@ (800e1f8 <BSP_CAMERA_Start+0x6c>)
 800e1aa:	68fb      	ldr	r3, [r7, #12]
 800e1ac:	2134      	movs	r1, #52	@ 0x34
 800e1ae:	fb01 f303 	mul.w	r3, r1, r3
 800e1b2:	4413      	add	r3, r2
 800e1b4:	3304      	adds	r3, #4
 800e1b6:	681a      	ldr	r2, [r3, #0]
 800e1b8:	490f      	ldr	r1, [pc, #60]	@ (800e1f8 <BSP_CAMERA_Start+0x6c>)
 800e1ba:	68fb      	ldr	r3, [r7, #12]
 800e1bc:	2034      	movs	r0, #52	@ 0x34
 800e1be:	fb00 f303 	mul.w	r3, r0, r3
 800e1c2:	440b      	add	r3, r1
 800e1c4:	3308      	adds	r3, #8
 800e1c6:	681b      	ldr	r3, [r3, #0]
 800e1c8:	4619      	mov	r1, r3
 800e1ca:	4610      	mov	r0, r2
 800e1cc:	f000 fa30 	bl	800e630 <GetSize>
 800e1d0:	4603      	mov	r3, r0
 800e1d2:	4622      	mov	r2, r4
 800e1d4:	6879      	ldr	r1, [r7, #4]
 800e1d6:	4809      	ldr	r0, [pc, #36]	@ (800e1fc <BSP_CAMERA_Start+0x70>)
 800e1d8:	f004 fa8e 	bl	80126f8 <HAL_DCMI_Start_DMA>
 800e1dc:	4603      	mov	r3, r0
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <BSP_CAMERA_Start+0x5c>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800e1e2:	f06f 0303 	mvn.w	r3, #3
 800e1e6:	e002      	b.n	800e1ee <BSP_CAMERA_Start+0x62>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	617b      	str	r3, [r7, #20]
  }

  /* Return BSP status */
  return ret;
 800e1ec:	697b      	ldr	r3, [r7, #20]
}
 800e1ee:	4618      	mov	r0, r3
 800e1f0:	371c      	adds	r7, #28
 800e1f2:	46bd      	mov	sp, r7
 800e1f4:	bd90      	pop	{r4, r7, pc}
 800e1f6:	bf00      	nop
 800e1f8:	240084cc 	.word	0x240084cc
 800e1fc:	2400847c 	.word	0x2400847c

0800e200 <BSP_CAMERA_Stop>:
  * @brief  Stop the CAMERA capture
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_Stop(uint32_t Instance)
{
 800e200:	b580      	push	{r7, lr}
 800e202:	b084      	sub	sp, #16
 800e204:	af00      	add	r7, sp, #0
 800e206:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e208:	687b      	ldr	r3, [r7, #4]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	d003      	beq.n	800e216 <BSP_CAMERA_Stop+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e20e:	f06f 0301 	mvn.w	r3, #1
 800e212:	60fb      	str	r3, [r7, #12]
 800e214:	e00b      	b.n	800e22e <BSP_CAMERA_Stop+0x2e>
  }
  else if(HAL_DCMI_Stop(&hcamera_dcmi) != HAL_OK)
 800e216:	4808      	ldr	r0, [pc, #32]	@ (800e238 <BSP_CAMERA_Stop+0x38>)
 800e218:	f004 fb30 	bl	801287c <HAL_DCMI_Stop>
 800e21c:	4603      	mov	r3, r0
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d003      	beq.n	800e22a <BSP_CAMERA_Stop+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800e222:	f06f 0303 	mvn.w	r3, #3
 800e226:	60fb      	str	r3, [r7, #12]
 800e228:	e001      	b.n	800e22e <BSP_CAMERA_Stop+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800e22a:	2300      	movs	r3, #0
 800e22c:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e22e:	68fb      	ldr	r3, [r7, #12]
}
 800e230:	4618      	mov	r0, r3
 800e232:	3710      	adds	r7, #16
 800e234:	46bd      	mov	sp, r7
 800e236:	bd80      	pop	{r7, pc}
 800e238:	2400847c 	.word	0x2400847c

0800e23c <BSP_CAMERA_Suspend>:
/**
  * @brief Suspend the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Suspend(uint32_t Instance)
{
 800e23c:	b580      	push	{r7, lr}
 800e23e:	b084      	sub	sp, #16
 800e240:	af00      	add	r7, sp, #0
 800e242:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e244:	687b      	ldr	r3, [r7, #4]
 800e246:	2b00      	cmp	r3, #0
 800e248:	d003      	beq.n	800e252 <BSP_CAMERA_Suspend+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e24a:	f06f 0301 	mvn.w	r3, #1
 800e24e:	60fb      	str	r3, [r7, #12]
 800e250:	e00a      	b.n	800e268 <BSP_CAMERA_Suspend+0x2c>
  }
  else if(HAL_DCMI_Suspend(&hcamera_dcmi) != HAL_OK)
 800e252:	4808      	ldr	r0, [pc, #32]	@ (800e274 <BSP_CAMERA_Suspend+0x38>)
 800e254:	f004 fb72 	bl	801293c <HAL_DCMI_Suspend>
 800e258:	4603      	mov	r3, r0
 800e25a:	2b00      	cmp	r3, #0
 800e25c:	d002      	beq.n	800e264 <BSP_CAMERA_Suspend+0x28>
  {
    return BSP_ERROR_PERIPH_FAILURE;
 800e25e:	f06f 0303 	mvn.w	r3, #3
 800e262:	e002      	b.n	800e26a <BSP_CAMERA_Suspend+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800e264:	2300      	movs	r3, #0
 800e266:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e268:	68fb      	ldr	r3, [r7, #12]
}
 800e26a:	4618      	mov	r0, r3
 800e26c:	3710      	adds	r7, #16
 800e26e:	46bd      	mov	sp, r7
 800e270:	bd80      	pop	{r7, pc}
 800e272:	bf00      	nop
 800e274:	2400847c 	.word	0x2400847c

0800e278 <BSP_CAMERA_Resume>:
/**
  * @brief Resume the CAMERA capture
  * @param  Instance Camera instance.
  */
int32_t BSP_CAMERA_Resume(uint32_t Instance)
{
 800e278:	b580      	push	{r7, lr}
 800e27a:	b084      	sub	sp, #16
 800e27c:	af00      	add	r7, sp, #0
 800e27e:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e280:	687b      	ldr	r3, [r7, #4]
 800e282:	2b00      	cmp	r3, #0
 800e284:	d003      	beq.n	800e28e <BSP_CAMERA_Resume+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e286:	f06f 0301 	mvn.w	r3, #1
 800e28a:	60fb      	str	r3, [r7, #12]
 800e28c:	e00b      	b.n	800e2a6 <BSP_CAMERA_Resume+0x2e>
  }
  else if(HAL_DCMI_Resume(&hcamera_dcmi) != HAL_OK)
 800e28e:	4808      	ldr	r0, [pc, #32]	@ (800e2b0 <BSP_CAMERA_Resume+0x38>)
 800e290:	f004 fbac 	bl	80129ec <HAL_DCMI_Resume>
 800e294:	4603      	mov	r3, r0
 800e296:	2b00      	cmp	r3, #0
 800e298:	d003      	beq.n	800e2a2 <BSP_CAMERA_Resume+0x2a>
  {
    ret = BSP_ERROR_PERIPH_FAILURE;
 800e29a:	f06f 0303 	mvn.w	r3, #3
 800e29e:	60fb      	str	r3, [r7, #12]
 800e2a0:	e001      	b.n	800e2a6 <BSP_CAMERA_Resume+0x2e>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800e2a2:	2300      	movs	r3, #0
 800e2a4:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e2a6:	68fb      	ldr	r3, [r7, #12]
}
 800e2a8:	4618      	mov	r0, r3
 800e2aa:	3710      	adds	r7, #16
 800e2ac:	46bd      	mov	sp, r7
 800e2ae:	bd80      	pop	{r7, pc}
 800e2b0:	2400847c 	.word	0x2400847c

0800e2b4 <BSP_CAMERA_SetBrightness>:
  * @param  Instance   Camera instance.
  * @param  Brightness Brightness Level
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetBrightness(uint32_t Instance, int32_t Brightness)
{
 800e2b4:	b580      	push	{r7, lr}
 800e2b6:	b084      	sub	sp, #16
 800e2b8:	af00      	add	r7, sp, #0
 800e2ba:	6078      	str	r0, [r7, #4]
 800e2bc:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if((Instance >= CAMERA_INSTANCES_NBR) || ((Brightness < CAMERA_BRIGHTNESS_MIN) && (Brightness > CAMERA_BRIGHTNESS_MAX)))
 800e2be:	687b      	ldr	r3, [r7, #4]
 800e2c0:	2b00      	cmp	r3, #0
 800e2c2:	d106      	bne.n	800e2d2 <BSP_CAMERA_SetBrightness+0x1e>
 800e2c4:	683b      	ldr	r3, [r7, #0]
 800e2c6:	f113 0f04 	cmn.w	r3, #4
 800e2ca:	da06      	bge.n	800e2da <BSP_CAMERA_SetBrightness+0x26>
 800e2cc:	683b      	ldr	r3, [r7, #0]
 800e2ce:	2b04      	cmp	r3, #4
 800e2d0:	dd03      	ble.n	800e2da <BSP_CAMERA_SetBrightness+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e2d2:	f06f 0301 	mvn.w	r3, #1
 800e2d6:	60fb      	str	r3, [r7, #12]
 800e2d8:	e021      	b.n	800e31e <BSP_CAMERA_SetBrightness+0x6a>
  }
  else if(Camera_Cap.Brightness == 0U)
 800e2da:	4b13      	ldr	r3, [pc, #76]	@ (800e328 <BSP_CAMERA_SetBrightness+0x74>)
 800e2dc:	68db      	ldr	r3, [r3, #12]
 800e2de:	2b00      	cmp	r3, #0
 800e2e0:	d103      	bne.n	800e2ea <BSP_CAMERA_SetBrightness+0x36>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800e2e2:	f06f 030a 	mvn.w	r3, #10
 800e2e6:	60fb      	str	r3, [r7, #12]
 800e2e8:	e019      	b.n	800e31e <BSP_CAMERA_SetBrightness+0x6a>
  }
  else if(Camera_Drv->SetBrightness(Camera_CompObj, Brightness) < 0)
 800e2ea:	4b10      	ldr	r3, [pc, #64]	@ (800e32c <BSP_CAMERA_SetBrightness+0x78>)
 800e2ec:	681b      	ldr	r3, [r3, #0]
 800e2ee:	699b      	ldr	r3, [r3, #24]
 800e2f0:	4a0f      	ldr	r2, [pc, #60]	@ (800e330 <BSP_CAMERA_SetBrightness+0x7c>)
 800e2f2:	6812      	ldr	r2, [r2, #0]
 800e2f4:	6839      	ldr	r1, [r7, #0]
 800e2f6:	4610      	mov	r0, r2
 800e2f8:	4798      	blx	r3
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	da03      	bge.n	800e308 <BSP_CAMERA_SetBrightness+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800e300:	f06f 0304 	mvn.w	r3, #4
 800e304:	60fb      	str	r3, [r7, #12]
 800e306:	e00a      	b.n	800e31e <BSP_CAMERA_SetBrightness+0x6a>
  }
  else
  {
    Camera_Ctx[Instance].Brightness = Brightness;
 800e308:	4a0a      	ldr	r2, [pc, #40]	@ (800e334 <BSP_CAMERA_SetBrightness+0x80>)
 800e30a:	687b      	ldr	r3, [r7, #4]
 800e30c:	2134      	movs	r1, #52	@ 0x34
 800e30e:	fb01 f303 	mul.w	r3, r1, r3
 800e312:	4413      	add	r3, r2
 800e314:	3314      	adds	r3, #20
 800e316:	683a      	ldr	r2, [r7, #0]
 800e318:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 800e31a:	2300      	movs	r3, #0
 800e31c:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e31e:	68fb      	ldr	r3, [r7, #12]
}
 800e320:	4618      	mov	r0, r3
 800e322:	3710      	adds	r7, #16
 800e324:	46bd      	mov	sp, r7
 800e326:	bd80      	pop	{r7, pc}
 800e328:	24008504 	.word	0x24008504
 800e32c:	24008500 	.word	0x24008500
 800e330:	24008478 	.word	0x24008478
 800e334:	240084cc 	.word	0x240084cc

0800e338 <BSP_CAMERA_SetContrast>:
  * @param  Instance Camera instance.
  * @param  Contrast Contrast Level
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetContrast(uint32_t Instance, int32_t Contrast)
{
 800e338:	b580      	push	{r7, lr}
 800e33a:	b084      	sub	sp, #16
 800e33c:	af00      	add	r7, sp, #0
 800e33e:	6078      	str	r0, [r7, #4]
 800e340:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if((Instance >= CAMERA_INSTANCES_NBR) || ((Contrast < CAMERA_CONTRAST_MIN) && (Contrast > CAMERA_CONTRAST_MAX)))
 800e342:	687b      	ldr	r3, [r7, #4]
 800e344:	2b00      	cmp	r3, #0
 800e346:	d106      	bne.n	800e356 <BSP_CAMERA_SetContrast+0x1e>
 800e348:	683b      	ldr	r3, [r7, #0]
 800e34a:	f113 0f04 	cmn.w	r3, #4
 800e34e:	da06      	bge.n	800e35e <BSP_CAMERA_SetContrast+0x26>
 800e350:	683b      	ldr	r3, [r7, #0]
 800e352:	2b04      	cmp	r3, #4
 800e354:	dd03      	ble.n	800e35e <BSP_CAMERA_SetContrast+0x26>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e356:	f06f 0301 	mvn.w	r3, #1
 800e35a:	60fb      	str	r3, [r7, #12]
 800e35c:	e021      	b.n	800e3a2 <BSP_CAMERA_SetContrast+0x6a>
  }
  else if(Camera_Cap.Contrast == 0U)
 800e35e:	4b13      	ldr	r3, [pc, #76]	@ (800e3ac <BSP_CAMERA_SetContrast+0x74>)
 800e360:	695b      	ldr	r3, [r3, #20]
 800e362:	2b00      	cmp	r3, #0
 800e364:	d103      	bne.n	800e36e <BSP_CAMERA_SetContrast+0x36>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800e366:	f06f 030a 	mvn.w	r3, #10
 800e36a:	60fb      	str	r3, [r7, #12]
 800e36c:	e019      	b.n	800e3a2 <BSP_CAMERA_SetContrast+0x6a>
  }
  else if(Camera_Drv->SetContrast(Camera_CompObj, Contrast)  < 0)
 800e36e:	4b10      	ldr	r3, [pc, #64]	@ (800e3b0 <BSP_CAMERA_SetContrast+0x78>)
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	6a1b      	ldr	r3, [r3, #32]
 800e374:	4a0f      	ldr	r2, [pc, #60]	@ (800e3b4 <BSP_CAMERA_SetContrast+0x7c>)
 800e376:	6812      	ldr	r2, [r2, #0]
 800e378:	6839      	ldr	r1, [r7, #0]
 800e37a:	4610      	mov	r0, r2
 800e37c:	4798      	blx	r3
 800e37e:	4603      	mov	r3, r0
 800e380:	2b00      	cmp	r3, #0
 800e382:	da03      	bge.n	800e38c <BSP_CAMERA_SetContrast+0x54>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800e384:	f06f 0304 	mvn.w	r3, #4
 800e388:	60fb      	str	r3, [r7, #12]
 800e38a:	e00a      	b.n	800e3a2 <BSP_CAMERA_SetContrast+0x6a>
  }
  else
  {
    Camera_Ctx[Instance].Contrast = Contrast;
 800e38c:	4a0a      	ldr	r2, [pc, #40]	@ (800e3b8 <BSP_CAMERA_SetContrast+0x80>)
 800e38e:	687b      	ldr	r3, [r7, #4]
 800e390:	2134      	movs	r1, #52	@ 0x34
 800e392:	fb01 f303 	mul.w	r3, r1, r3
 800e396:	4413      	add	r3, r2
 800e398:	331c      	adds	r3, #28
 800e39a:	683a      	ldr	r2, [r7, #0]
 800e39c:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 800e39e:	2300      	movs	r3, #0
 800e3a0:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e3a2:	68fb      	ldr	r3, [r7, #12]
}
 800e3a4:	4618      	mov	r0, r3
 800e3a6:	3710      	adds	r7, #16
 800e3a8:	46bd      	mov	sp, r7
 800e3aa:	bd80      	pop	{r7, pc}
 800e3ac:	24008504 	.word	0x24008504
 800e3b0:	24008500 	.word	0x24008500
 800e3b4:	24008478 	.word	0x24008478
 800e3b8:	240084cc 	.word	0x240084cc

0800e3bc <BSP_CAMERA_SetMirrorFlip>:
  * @param  MirrorFlip CAMERA_MIRRORFLIP_NONE or any combination of
  *                    CAMERA_MIRRORFLIP_FLIP and CAMERA_MIRRORFLIP_MIRROR
  * @retval BSP status
  */
int32_t BSP_CAMERA_SetMirrorFlip(uint32_t Instance, uint32_t MirrorFlip)
{
 800e3bc:	b580      	push	{r7, lr}
 800e3be:	b084      	sub	sp, #16
 800e3c0:	af00      	add	r7, sp, #0
 800e3c2:	6078      	str	r0, [r7, #4]
 800e3c4:	6039      	str	r1, [r7, #0]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e3c6:	687b      	ldr	r3, [r7, #4]
 800e3c8:	2b00      	cmp	r3, #0
 800e3ca:	d003      	beq.n	800e3d4 <BSP_CAMERA_SetMirrorFlip+0x18>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e3cc:	f06f 0301 	mvn.w	r3, #1
 800e3d0:	60fb      	str	r3, [r7, #12]
 800e3d2:	e021      	b.n	800e418 <BSP_CAMERA_SetMirrorFlip+0x5c>
  }
  else if(Camera_Cap.MirrorFlip == 0U)
 800e3d4:	4b13      	ldr	r3, [pc, #76]	@ (800e424 <BSP_CAMERA_SetMirrorFlip+0x68>)
 800e3d6:	69db      	ldr	r3, [r3, #28]
 800e3d8:	2b00      	cmp	r3, #0
 800e3da:	d103      	bne.n	800e3e4 <BSP_CAMERA_SetMirrorFlip+0x28>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800e3dc:	f06f 030a 	mvn.w	r3, #10
 800e3e0:	60fb      	str	r3, [r7, #12]
 800e3e2:	e019      	b.n	800e418 <BSP_CAMERA_SetMirrorFlip+0x5c>
  }
  else if(Camera_Drv->MirrorFlipConfig(Camera_CompObj, MirrorFlip)  < 0)
 800e3e4:	4b10      	ldr	r3, [pc, #64]	@ (800e428 <BSP_CAMERA_SetMirrorFlip+0x6c>)
 800e3e6:	681b      	ldr	r3, [r3, #0]
 800e3e8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800e3ea:	4a10      	ldr	r2, [pc, #64]	@ (800e42c <BSP_CAMERA_SetMirrorFlip+0x70>)
 800e3ec:	6812      	ldr	r2, [r2, #0]
 800e3ee:	6839      	ldr	r1, [r7, #0]
 800e3f0:	4610      	mov	r0, r2
 800e3f2:	4798      	blx	r3
 800e3f4:	4603      	mov	r3, r0
 800e3f6:	2b00      	cmp	r3, #0
 800e3f8:	da03      	bge.n	800e402 <BSP_CAMERA_SetMirrorFlip+0x46>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800e3fa:	f06f 0304 	mvn.w	r3, #4
 800e3fe:	60fb      	str	r3, [r7, #12]
 800e400:	e00a      	b.n	800e418 <BSP_CAMERA_SetMirrorFlip+0x5c>
  }
  else
  {
    Camera_Ctx[Instance].MirrorFlip = MirrorFlip;
 800e402:	4a0b      	ldr	r2, [pc, #44]	@ (800e430 <BSP_CAMERA_SetMirrorFlip+0x74>)
 800e404:	687b      	ldr	r3, [r7, #4]
 800e406:	2134      	movs	r1, #52	@ 0x34
 800e408:	fb01 f303 	mul.w	r3, r1, r3
 800e40c:	4413      	add	r3, r2
 800e40e:	3324      	adds	r3, #36	@ 0x24
 800e410:	683a      	ldr	r2, [r7, #0]
 800e412:	601a      	str	r2, [r3, #0]
    ret = BSP_ERROR_NONE;
 800e414:	2300      	movs	r3, #0
 800e416:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e418:	68fb      	ldr	r3, [r7, #12]
}
 800e41a:	4618      	mov	r0, r3
 800e41c:	3710      	adds	r7, #16
 800e41e:	46bd      	mov	sp, r7
 800e420:	bd80      	pop	{r7, pc}
 800e422:	bf00      	nop
 800e424:	24008504 	.word	0x24008504
 800e428:	24008500 	.word	0x24008500
 800e42c:	24008478 	.word	0x24008478
 800e430:	240084cc 	.word	0x240084cc

0800e434 <BSP_CAMERA_EnableNightMode>:
  * @brief  Enable the camera night mode
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_EnableNightMode(uint32_t Instance)
{
 800e434:	b580      	push	{r7, lr}
 800e436:	b084      	sub	sp, #16
 800e438:	af00      	add	r7, sp, #0
 800e43a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e43c:	687b      	ldr	r3, [r7, #4]
 800e43e:	2b00      	cmp	r3, #0
 800e440:	d003      	beq.n	800e44a <BSP_CAMERA_EnableNightMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e442:	f06f 0301 	mvn.w	r3, #1
 800e446:	60fb      	str	r3, [r7, #12]
 800e448:	e018      	b.n	800e47c <BSP_CAMERA_EnableNightMode+0x48>
  }
  else if(Camera_Cap.NightMode == 0U)
 800e44a:	4b0f      	ldr	r3, [pc, #60]	@ (800e488 <BSP_CAMERA_EnableNightMode+0x54>)
 800e44c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e44e:	2b00      	cmp	r3, #0
 800e450:	d103      	bne.n	800e45a <BSP_CAMERA_EnableNightMode+0x26>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800e452:	f06f 030a 	mvn.w	r3, #10
 800e456:	60fb      	str	r3, [r7, #12]
 800e458:	e010      	b.n	800e47c <BSP_CAMERA_EnableNightMode+0x48>
  }
  else if(Camera_Drv->NightModeConfig(Camera_CompObj, CAMERA_NIGHT_MODE_SET) < 0)
 800e45a:	4b0c      	ldr	r3, [pc, #48]	@ (800e48c <BSP_CAMERA_EnableNightMode+0x58>)
 800e45c:	681b      	ldr	r3, [r3, #0]
 800e45e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e460:	4a0b      	ldr	r2, [pc, #44]	@ (800e490 <BSP_CAMERA_EnableNightMode+0x5c>)
 800e462:	6812      	ldr	r2, [r2, #0]
 800e464:	2100      	movs	r1, #0
 800e466:	4610      	mov	r0, r2
 800e468:	4798      	blx	r3
 800e46a:	4603      	mov	r3, r0
 800e46c:	2b00      	cmp	r3, #0
 800e46e:	da03      	bge.n	800e478 <BSP_CAMERA_EnableNightMode+0x44>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800e470:	f06f 0304 	mvn.w	r3, #4
 800e474:	60fb      	str	r3, [r7, #12]
 800e476:	e001      	b.n	800e47c <BSP_CAMERA_EnableNightMode+0x48>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800e478:	2300      	movs	r3, #0
 800e47a:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e47c:	68fb      	ldr	r3, [r7, #12]
}
 800e47e:	4618      	mov	r0, r3
 800e480:	3710      	adds	r7, #16
 800e482:	46bd      	mov	sp, r7
 800e484:	bd80      	pop	{r7, pc}
 800e486:	bf00      	nop
 800e488:	24008504 	.word	0x24008504
 800e48c:	24008500 	.word	0x24008500
 800e490:	24008478 	.word	0x24008478

0800e494 <BSP_CAMERA_DisableNightMode>:
  * @brief  Disable the camera night mode
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_DisableNightMode(uint32_t Instance)
{
 800e494:	b580      	push	{r7, lr}
 800e496:	b084      	sub	sp, #16
 800e498:	af00      	add	r7, sp, #0
 800e49a:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e49c:	687b      	ldr	r3, [r7, #4]
 800e49e:	2b00      	cmp	r3, #0
 800e4a0:	d003      	beq.n	800e4aa <BSP_CAMERA_DisableNightMode+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e4a2:	f06f 0301 	mvn.w	r3, #1
 800e4a6:	60fb      	str	r3, [r7, #12]
 800e4a8:	e018      	b.n	800e4dc <BSP_CAMERA_DisableNightMode+0x48>
  }
  else if(Camera_Cap.NightMode == 0U)
 800e4aa:	4b0f      	ldr	r3, [pc, #60]	@ (800e4e8 <BSP_CAMERA_DisableNightMode+0x54>)
 800e4ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e4ae:	2b00      	cmp	r3, #0
 800e4b0:	d103      	bne.n	800e4ba <BSP_CAMERA_DisableNightMode+0x26>
  {
    ret = BSP_ERROR_FEATURE_NOT_SUPPORTED;
 800e4b2:	f06f 030a 	mvn.w	r3, #10
 800e4b6:	60fb      	str	r3, [r7, #12]
 800e4b8:	e010      	b.n	800e4dc <BSP_CAMERA_DisableNightMode+0x48>
  }
  else if(Camera_Drv->NightModeConfig(Camera_CompObj, CAMERA_NIGHT_MODE_RESET) < 0)
 800e4ba:	4b0c      	ldr	r3, [pc, #48]	@ (800e4ec <BSP_CAMERA_DisableNightMode+0x58>)
 800e4bc:	681b      	ldr	r3, [r3, #0]
 800e4be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800e4c0:	4a0b      	ldr	r2, [pc, #44]	@ (800e4f0 <BSP_CAMERA_DisableNightMode+0x5c>)
 800e4c2:	6812      	ldr	r2, [r2, #0]
 800e4c4:	2101      	movs	r1, #1
 800e4c6:	4610      	mov	r0, r2
 800e4c8:	4798      	blx	r3
 800e4ca:	4603      	mov	r3, r0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	da03      	bge.n	800e4d8 <BSP_CAMERA_DisableNightMode+0x44>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800e4d0:	f06f 0304 	mvn.w	r3, #4
 800e4d4:	60fb      	str	r3, [r7, #12]
 800e4d6:	e001      	b.n	800e4dc <BSP_CAMERA_DisableNightMode+0x48>
  }
  else
  {
    ret = BSP_ERROR_NONE;
 800e4d8:	2300      	movs	r3, #0
 800e4da:	60fb      	str	r3, [r7, #12]
  }

  /* Return BSP status */
  return ret;
 800e4dc:	68fb      	ldr	r3, [r7, #12]
}
 800e4de:	4618      	mov	r0, r3
 800e4e0:	3710      	adds	r7, #16
 800e4e2:	46bd      	mov	sp, r7
 800e4e4:	bd80      	pop	{r7, pc}
 800e4e6:	bf00      	nop
 800e4e8:	24008504 	.word	0x24008504
 800e4ec:	24008500 	.word	0x24008500
 800e4f0:	24008478 	.word	0x24008478

0800e4f4 <BSP_CAMERA_HwReset>:
  * @brief  CAMERA hardware reset
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_HwReset(uint32_t Instance)
{
 800e4f4:	b580      	push	{r7, lr}
 800e4f6:	b08a      	sub	sp, #40	@ 0x28
 800e4f8:	af00      	add	r7, sp, #0
 800e4fa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e500:	687b      	ldr	r3, [r7, #4]
 800e502:	2b00      	cmp	r3, #0
 800e504:	d003      	beq.n	800e50e <BSP_CAMERA_HwReset+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e506:	f06f 0301 	mvn.w	r3, #1
 800e50a:	627b      	str	r3, [r7, #36]	@ 0x24
 800e50c:	e02f      	b.n	800e56e <BSP_CAMERA_HwReset+0x7a>
  }
  else
  {
    /* Init DCMI PWR_ENABLE Pin */
    /* Enable GPIO clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e50e:	4b1a      	ldr	r3, [pc, #104]	@ (800e578 <BSP_CAMERA_HwReset+0x84>)
 800e510:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e514:	4a18      	ldr	r2, [pc, #96]	@ (800e578 <BSP_CAMERA_HwReset+0x84>)
 800e516:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e51a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e51e:	4b16      	ldr	r3, [pc, #88]	@ (800e578 <BSP_CAMERA_HwReset+0x84>)
 800e520:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e524:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e528:	60fb      	str	r3, [r7, #12]
 800e52a:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 800e52c:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e530:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800e532:	2301      	movs	r3, #1
 800e534:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800e536:	2300      	movs	r3, #0
 800e538:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800e53a:	2302      	movs	r3, #2
 800e53c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800e53e:	f107 0310 	add.w	r3, r7, #16
 800e542:	4619      	mov	r1, r3
 800e544:	480d      	ldr	r0, [pc, #52]	@ (800e57c <BSP_CAMERA_HwReset+0x88>)
 800e546:	f009 f9df 	bl	8017908 <HAL_GPIO_Init>

    /* De-assert the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_SET);
 800e54a:	2201      	movs	r2, #1
 800e54c:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e550:	480a      	ldr	r0, [pc, #40]	@ (800e57c <BSP_CAMERA_HwReset+0x88>)
 800e552:	f009 fcab 	bl	8017eac <HAL_GPIO_WritePin>

    HAL_Delay(100);     /* POWER_DOWN de-asserted during 100 ms */
 800e556:	2064      	movs	r0, #100	@ 0x64
 800e558:	f003 fe1c 	bl	8012194 <HAL_Delay>

    /* Assert the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ,GPIO_PIN_14, GPIO_PIN_RESET);
 800e55c:	2200      	movs	r2, #0
 800e55e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e562:	4806      	ldr	r0, [pc, #24]	@ (800e57c <BSP_CAMERA_HwReset+0x88>)
 800e564:	f009 fca2 	bl	8017eac <HAL_GPIO_WritePin>
    HAL_Delay(20);
 800e568:	2014      	movs	r0, #20
 800e56a:	f003 fe13 	bl	8012194 <HAL_Delay>
  }

  return ret;
 800e56e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e570:	4618      	mov	r0, r3
 800e572:	3728      	adds	r7, #40	@ 0x28
 800e574:	46bd      	mov	sp, r7
 800e576:	bd80      	pop	{r7, pc}
 800e578:	58024400 	.word	0x58024400
 800e57c:	58022400 	.word	0x58022400

0800e580 <BSP_CAMERA_PwrDown>:
  * @brief  CAMERA power down
  * @param  Instance Camera instance.
  * @retval BSP status
  */
int32_t BSP_CAMERA_PwrDown(uint32_t Instance)
{
 800e580:	b580      	push	{r7, lr}
 800e582:	b08a      	sub	sp, #40	@ 0x28
 800e584:	af00      	add	r7, sp, #0
 800e586:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 800e588:	2300      	movs	r3, #0
 800e58a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= CAMERA_INSTANCES_NBR)
 800e58c:	687b      	ldr	r3, [r7, #4]
 800e58e:	2b00      	cmp	r3, #0
 800e590:	d003      	beq.n	800e59a <BSP_CAMERA_PwrDown+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800e592:	f06f 0301 	mvn.w	r3, #1
 800e596:	627b      	str	r3, [r7, #36]	@ 0x24
 800e598:	e023      	b.n	800e5e2 <BSP_CAMERA_PwrDown+0x62>
  }
  else
  {
    /* Init DCMI PWR_ENABLE Pin */
    /* Enable GPIO clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 800e59a:	4b14      	ldr	r3, [pc, #80]	@ (800e5ec <BSP_CAMERA_PwrDown+0x6c>)
 800e59c:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e5a0:	4a12      	ldr	r2, [pc, #72]	@ (800e5ec <BSP_CAMERA_PwrDown+0x6c>)
 800e5a2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800e5a6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e5aa:	4b10      	ldr	r3, [pc, #64]	@ (800e5ec <BSP_CAMERA_PwrDown+0x6c>)
 800e5ac:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e5b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800e5b4:	60fb      	str	r3, [r7, #12]
 800e5b6:	68fb      	ldr	r3, [r7, #12]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 800e5b8:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 800e5bc:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800e5be:	2301      	movs	r3, #1
 800e5c0:	617b      	str	r3, [r7, #20]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 800e5c2:	2300      	movs	r3, #0
 800e5c4:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800e5c6:	2302      	movs	r3, #2
 800e5c8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 800e5ca:	f107 0310 	add.w	r3, r7, #16
 800e5ce:	4619      	mov	r1, r3
 800e5d0:	4807      	ldr	r0, [pc, #28]	@ (800e5f0 <BSP_CAMERA_PwrDown+0x70>)
 800e5d2:	f009 f999 	bl	8017908 <HAL_GPIO_Init>

    /* Assert the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 800e5d6:	2201      	movs	r2, #1
 800e5d8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800e5dc:	4804      	ldr	r0, [pc, #16]	@ (800e5f0 <BSP_CAMERA_PwrDown+0x70>)
 800e5de:	f009 fc65 	bl	8017eac <HAL_GPIO_WritePin>
  }

  return ret;
 800e5e2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800e5e4:	4618      	mov	r0, r3
 800e5e6:	3728      	adds	r7, #40	@ 0x28
 800e5e8:	46bd      	mov	sp, r7
 800e5ea:	bd80      	pop	{r7, pc}
 800e5ec:	58024400 	.word	0x58024400
 800e5f0:	58022400 	.word	0x58022400

0800e5f4 <BSP_CAMERA_IRQHandler>:
  * @brief  This function handles DCMI interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_IRQHandler(uint32_t Instance)
{
 800e5f4:	b580      	push	{r7, lr}
 800e5f6:	b082      	sub	sp, #8
 800e5f8:	af00      	add	r7, sp, #0
 800e5fa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DCMI_IRQHandler(&hcamera_dcmi);
 800e5fc:	4803      	ldr	r0, [pc, #12]	@ (800e60c <BSP_CAMERA_IRQHandler+0x18>)
 800e5fe:	f004 fa21 	bl	8012a44 <HAL_DCMI_IRQHandler>
}
 800e602:	bf00      	nop
 800e604:	3708      	adds	r7, #8
 800e606:	46bd      	mov	sp, r7
 800e608:	bd80      	pop	{r7, pc}
 800e60a:	bf00      	nop
 800e60c:	2400847c 	.word	0x2400847c

0800e610 <BSP_CAMERA_DMA_IRQHandler>:
  * @brief  This function handles DCMI DMA interrupt request.
  * @param  Instance Camera instance
  * @retval None
  */
void BSP_CAMERA_DMA_IRQHandler(uint32_t Instance)
{
 800e610:	b580      	push	{r7, lr}
 800e612:	b082      	sub	sp, #8
 800e614:	af00      	add	r7, sp, #0
 800e616:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_DMA_IRQHandler(hcamera_dcmi.DMA_Handle);
 800e618:	4b04      	ldr	r3, [pc, #16]	@ (800e62c <BSP_CAMERA_DMA_IRQHandler+0x1c>)
 800e61a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e61c:	4618      	mov	r0, r3
 800e61e:	f006 f8ab 	bl	8014778 <HAL_DMA_IRQHandler>
}
 800e622:	bf00      	nop
 800e624:	3708      	adds	r7, #8
 800e626:	46bd      	mov	sp, r7
 800e628:	bd80      	pop	{r7, pc}
 800e62a:	bf00      	nop
 800e62c:	2400847c 	.word	0x2400847c

0800e630 <GetSize>:
  * @param  Resolution  the current resolution.
  * @param  PixelFormat Camera pixel format
  * @retval capture size in 32-bit words.
  */
static int32_t GetSize(uint32_t Resolution, uint32_t PixelFormat)
{
 800e630:	b480      	push	{r7}
 800e632:	b085      	sub	sp, #20
 800e634:	af00      	add	r7, sp, #0
 800e636:	6078      	str	r0, [r7, #4]
 800e638:	6039      	str	r1, [r7, #0]
  uint32_t size = 0;
 800e63a:	2300      	movs	r3, #0
 800e63c:	60fb      	str	r3, [r7, #12]
  uint32_t pf_div;
  if(PixelFormat == CAMERA_PF_RGB888)
 800e63e:	683b      	ldr	r3, [r7, #0]
 800e640:	2b01      	cmp	r3, #1
 800e642:	d102      	bne.n	800e64a <GetSize+0x1a>
  {
    pf_div = 3; /* each pixel on 3 bytes so 3/4 words */
 800e644:	2303      	movs	r3, #3
 800e646:	60bb      	str	r3, [r7, #8]
 800e648:	e001      	b.n	800e64e <GetSize+0x1e>
  }
  else
  {
    pf_div = 2; /* each pixel on 2 bytes so 1/2 words*/
 800e64a:	2302      	movs	r3, #2
 800e64c:	60bb      	str	r3, [r7, #8]
  }
  /* Get capture size */
  switch (Resolution)
 800e64e:	687b      	ldr	r3, [r7, #4]
 800e650:	2b04      	cmp	r3, #4
 800e652:	d834      	bhi.n	800e6be <GetSize+0x8e>
 800e654:	a201      	add	r2, pc, #4	@ (adr r2, 800e65c <GetSize+0x2c>)
 800e656:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e65a:	bf00      	nop
 800e65c:	0800e671 	.word	0x0800e671
 800e660:	0800e681 	.word	0x0800e681
 800e664:	0800e691 	.word	0x0800e691
 800e668:	0800e6a1 	.word	0x0800e6a1
 800e66c:	0800e6b1 	.word	0x0800e6b1
  {
  case CAMERA_R160x120:
    size =  ((uint32_t)(160*120)*pf_div)/4U;
 800e670:	68bb      	ldr	r3, [r7, #8]
 800e672:	f44f 4296 	mov.w	r2, #19200	@ 0x4b00
 800e676:	fb02 f303 	mul.w	r3, r2, r3
 800e67a:	089b      	lsrs	r3, r3, #2
 800e67c:	60fb      	str	r3, [r7, #12]
    break;
 800e67e:	e01f      	b.n	800e6c0 <GetSize+0x90>
  case CAMERA_R320x240:
    size =  ((uint32_t)(320*240)*pf_div)/4U;
 800e680:	68bb      	ldr	r3, [r7, #8]
 800e682:	f44f 3296 	mov.w	r2, #76800	@ 0x12c00
 800e686:	fb02 f303 	mul.w	r3, r2, r3
 800e68a:	089b      	lsrs	r3, r3, #2
 800e68c:	60fb      	str	r3, [r7, #12]
    break;
 800e68e:	e017      	b.n	800e6c0 <GetSize+0x90>
  case CAMERA_R480x272:
    size =  ((uint32_t)(480*272)*pf_div)/4U;
 800e690:	68ba      	ldr	r2, [r7, #8]
 800e692:	4613      	mov	r3, r2
 800e694:	021b      	lsls	r3, r3, #8
 800e696:	1a9b      	subs	r3, r3, r2
 800e698:	025b      	lsls	r3, r3, #9
 800e69a:	089b      	lsrs	r3, r3, #2
 800e69c:	60fb      	str	r3, [r7, #12]
    break;
 800e69e:	e00f      	b.n	800e6c0 <GetSize+0x90>
  case CAMERA_R640x480:
    size =  ((uint32_t)(640*480)*pf_div)/4U;
 800e6a0:	68bb      	ldr	r3, [r7, #8]
 800e6a2:	f44f 2296 	mov.w	r2, #307200	@ 0x4b000
 800e6a6:	fb02 f303 	mul.w	r3, r2, r3
 800e6aa:	089b      	lsrs	r3, r3, #2
 800e6ac:	60fb      	str	r3, [r7, #12]
    break;
 800e6ae:	e007      	b.n	800e6c0 <GetSize+0x90>
  case CAMERA_R800x480:
    size =  ((uint32_t)(800*480)*pf_div)/4U;
 800e6b0:	68bb      	ldr	r3, [r7, #8]
 800e6b2:	4a07      	ldr	r2, [pc, #28]	@ (800e6d0 <GetSize+0xa0>)
 800e6b4:	fb02 f303 	mul.w	r3, r2, r3
 800e6b8:	089b      	lsrs	r3, r3, #2
 800e6ba:	60fb      	str	r3, [r7, #12]
    break;
 800e6bc:	e000      	b.n	800e6c0 <GetSize+0x90>
  default:
    break;
 800e6be:	bf00      	nop
  }

  return (int32_t)size;
 800e6c0:	68fb      	ldr	r3, [r7, #12]
}
 800e6c2:	4618      	mov	r0, r3
 800e6c4:	3714      	adds	r7, #20
 800e6c6:	46bd      	mov	sp, r7
 800e6c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6cc:	4770      	bx	lr
 800e6ce:	bf00      	nop
 800e6d0:	0005dc00 	.word	0x0005dc00

0800e6d4 <DCMI_MspInit>:
  * @brief  Initializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 800e6d4:	b580      	push	{r7, lr}
 800e6d6:	b08e      	sub	sp, #56	@ 0x38
 800e6d8:	af00      	add	r7, sp, #0
 800e6da:	6078      	str	r0, [r7, #4]
  static DMA_HandleTypeDef hdma_handler;
  GPIO_InitTypeDef gpio_init_structure;

  /*** Enable peripherals and GPIO clocks ***/
  /* Enable DCMI clock */
  __HAL_RCC_DCMI_CLK_ENABLE();
 800e6dc:	4b83      	ldr	r3, [pc, #524]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e6de:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e6e2:	4a82      	ldr	r2, [pc, #520]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e6e4:	f043 0301 	orr.w	r3, r3, #1
 800e6e8:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
 800e6ec:	4b7f      	ldr	r3, [pc, #508]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e6ee:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e6f2:	f003 0301 	and.w	r3, r3, #1
 800e6f6:	623b      	str	r3, [r7, #32]
 800e6f8:	6a3b      	ldr	r3, [r7, #32]

  /* Enable DMA2 clock */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800e6fa:	4b7c      	ldr	r3, [pc, #496]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e6fc:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e700:	4a7a      	ldr	r2, [pc, #488]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e702:	f043 0302 	orr.w	r3, r3, #2
 800e706:	f8c2 30d8 	str.w	r3, [r2, #216]	@ 0xd8
 800e70a:	4b78      	ldr	r3, [pc, #480]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e70c:	f8d3 30d8 	ldr.w	r3, [r3, #216]	@ 0xd8
 800e710:	f003 0302 	and.w	r3, r3, #2
 800e714:	61fb      	str	r3, [r7, #28]
 800e716:	69fb      	ldr	r3, [r7, #28]

  /* Enable GPIO clocks */

  __HAL_RCC_GPIOA_CLK_ENABLE();
 800e718:	4b74      	ldr	r3, [pc, #464]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e71a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e71e:	4a73      	ldr	r2, [pc, #460]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e720:	f043 0301 	orr.w	r3, r3, #1
 800e724:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e728:	4b70      	ldr	r3, [pc, #448]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e72a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e72e:	f003 0301 	and.w	r3, r3, #1
 800e732:	61bb      	str	r3, [r7, #24]
 800e734:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800e736:	4b6d      	ldr	r3, [pc, #436]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e738:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e73c:	4a6b      	ldr	r2, [pc, #428]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e73e:	f043 0302 	orr.w	r3, r3, #2
 800e742:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e746:	4b69      	ldr	r3, [pc, #420]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e748:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e74c:	f003 0302 	and.w	r3, r3, #2
 800e750:	617b      	str	r3, [r7, #20]
 800e752:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800e754:	4b65      	ldr	r3, [pc, #404]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e756:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e75a:	4a64      	ldr	r2, [pc, #400]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e75c:	f043 0304 	orr.w	r3, r3, #4
 800e760:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e764:	4b61      	ldr	r3, [pc, #388]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e766:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e76a:	f003 0304 	and.w	r3, r3, #4
 800e76e:	613b      	str	r3, [r7, #16]
 800e770:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800e772:	4b5e      	ldr	r3, [pc, #376]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e774:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e778:	4a5c      	ldr	r2, [pc, #368]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e77a:	f043 0308 	orr.w	r3, r3, #8
 800e77e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e782:	4b5a      	ldr	r3, [pc, #360]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e784:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e788:	f003 0308 	and.w	r3, r3, #8
 800e78c:	60fb      	str	r3, [r7, #12]
 800e78e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800e790:	4b56      	ldr	r3, [pc, #344]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e792:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e796:	4a55      	ldr	r2, [pc, #340]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e798:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800e79c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800e7a0:	4b52      	ldr	r3, [pc, #328]	@ (800e8ec <DCMI_MspInit+0x218>)
 800e7a2:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800e7a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800e7aa:	60bb      	str	r3, [r7, #8]
 800e7ac:	68bb      	ldr	r3, [r7, #8]

  /*** Configure the GPIO ***/
  /* Configure DCMI GPIO as alternate function */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800e7ae:	2350      	movs	r3, #80	@ 0x50
 800e7b0:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e7b2:	2302      	movs	r3, #2
 800e7b4:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800e7b6:	2301      	movs	r3, #1
 800e7b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7ba:	2303      	movs	r3, #3
 800e7bc:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800e7be:	230d      	movs	r3, #13
 800e7c0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &gpio_init_structure);
 800e7c2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e7c6:	4619      	mov	r1, r3
 800e7c8:	4849      	ldr	r0, [pc, #292]	@ (800e8f0 <DCMI_MspInit+0x21c>)
 800e7ca:	f009 f89d 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800e7ce:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800e7d2:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e7d4:	2302      	movs	r3, #2
 800e7d6:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800e7d8:	2301      	movs	r3, #1
 800e7da:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7dc:	2303      	movs	r3, #3
 800e7de:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800e7e0:	230d      	movs	r3, #13
 800e7e2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &gpio_init_structure);
 800e7e4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e7e8:	4619      	mov	r1, r3
 800e7ea:	4842      	ldr	r0, [pc, #264]	@ (800e8f4 <DCMI_MspInit+0x220>)
 800e7ec:	f009 f88c 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800e7f0:	f44f 632c 	mov.w	r3, #2752	@ 0xac0
 800e7f4:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e7f6:	2302      	movs	r3, #2
 800e7f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800e7fa:	2301      	movs	r3, #1
 800e7fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800e7fe:	2303      	movs	r3, #3
 800e800:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800e802:	230d      	movs	r3, #13
 800e804:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 800e806:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e80a:	4619      	mov	r1, r3
 800e80c:	483a      	ldr	r0, [pc, #232]	@ (800e8f8 <DCMI_MspInit+0x224>)
 800e80e:	f009 f87b 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_3;
 800e812:	2308      	movs	r3, #8
 800e814:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e816:	2302      	movs	r3, #2
 800e818:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800e81a:	2301      	movs	r3, #1
 800e81c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800e81e:	2303      	movs	r3, #3
 800e820:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800e822:	230d      	movs	r3, #13
 800e824:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 800e826:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e82a:	4619      	mov	r1, r3
 800e82c:	4833      	ldr	r0, [pc, #204]	@ (800e8fc <DCMI_MspInit+0x228>)
 800e82e:	f009 f86b 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = GPIO_PIN_10;
 800e832:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e836:	627b      	str	r3, [r7, #36]	@ 0x24
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 800e838:	2302      	movs	r3, #2
 800e83a:	62bb      	str	r3, [r7, #40]	@ 0x28
  gpio_init_structure.Pull      = GPIO_PULLUP;
 800e83c:	2301      	movs	r3, #1
 800e83e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 800e840:	2303      	movs	r3, #3
 800e842:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Alternate = GPIO_AF13_DCMI;
 800e844:	230d      	movs	r3, #13
 800e846:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 800e848:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800e84c:	4619      	mov	r1, r3
 800e84e:	482c      	ldr	r0, [pc, #176]	@ (800e900 <DCMI_MspInit+0x22c>)
 800e850:	f009 f85a 	bl	8017908 <HAL_GPIO_Init>

  /*** Configure the DMA ***/
  /* Set the parameters to be configured */
  hdma_handler.Init.Request             = DMA_REQUEST_DCMI;
 800e854:	4b2b      	ldr	r3, [pc, #172]	@ (800e904 <DCMI_MspInit+0x230>)
 800e856:	224b      	movs	r2, #75	@ 0x4b
 800e858:	605a      	str	r2, [r3, #4]
  hdma_handler.Init.Direction           = DMA_PERIPH_TO_MEMORY;
 800e85a:	4b2a      	ldr	r3, [pc, #168]	@ (800e904 <DCMI_MspInit+0x230>)
 800e85c:	2200      	movs	r2, #0
 800e85e:	609a      	str	r2, [r3, #8]
  hdma_handler.Init.PeriphInc           = DMA_PINC_DISABLE;
 800e860:	4b28      	ldr	r3, [pc, #160]	@ (800e904 <DCMI_MspInit+0x230>)
 800e862:	2200      	movs	r2, #0
 800e864:	60da      	str	r2, [r3, #12]
  hdma_handler.Init.MemInc              = DMA_MINC_ENABLE;
 800e866:	4b27      	ldr	r3, [pc, #156]	@ (800e904 <DCMI_MspInit+0x230>)
 800e868:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800e86c:	611a      	str	r2, [r3, #16]
  hdma_handler.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800e86e:	4b25      	ldr	r3, [pc, #148]	@ (800e904 <DCMI_MspInit+0x230>)
 800e870:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800e874:	615a      	str	r2, [r3, #20]
  hdma_handler.Init.MemDataAlignment    = DMA_MDATAALIGN_WORD;
 800e876:	4b23      	ldr	r3, [pc, #140]	@ (800e904 <DCMI_MspInit+0x230>)
 800e878:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800e87c:	619a      	str	r2, [r3, #24]
  hdma_handler.Init.Mode                = DMA_CIRCULAR;
 800e87e:	4b21      	ldr	r3, [pc, #132]	@ (800e904 <DCMI_MspInit+0x230>)
 800e880:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800e884:	61da      	str	r2, [r3, #28]
  hdma_handler.Init.Priority            = DMA_PRIORITY_HIGH;
 800e886:	4b1f      	ldr	r3, [pc, #124]	@ (800e904 <DCMI_MspInit+0x230>)
 800e888:	f44f 3200 	mov.w	r2, #131072	@ 0x20000
 800e88c:	621a      	str	r2, [r3, #32]
  hdma_handler.Init.FIFOMode            = DMA_FIFOMODE_ENABLE;
 800e88e:	4b1d      	ldr	r3, [pc, #116]	@ (800e904 <DCMI_MspInit+0x230>)
 800e890:	2204      	movs	r2, #4
 800e892:	625a      	str	r2, [r3, #36]	@ 0x24
  hdma_handler.Init.FIFOThreshold       = DMA_FIFO_THRESHOLD_FULL;
 800e894:	4b1b      	ldr	r3, [pc, #108]	@ (800e904 <DCMI_MspInit+0x230>)
 800e896:	2203      	movs	r2, #3
 800e898:	629a      	str	r2, [r3, #40]	@ 0x28
  hdma_handler.Init.MemBurst            = DMA_MBURST_SINGLE;
 800e89a:	4b1a      	ldr	r3, [pc, #104]	@ (800e904 <DCMI_MspInit+0x230>)
 800e89c:	2200      	movs	r2, #0
 800e89e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdma_handler.Init.PeriphBurst         = DMA_PBURST_SINGLE;
 800e8a0:	4b18      	ldr	r3, [pc, #96]	@ (800e904 <DCMI_MspInit+0x230>)
 800e8a2:	2200      	movs	r2, #0
 800e8a4:	631a      	str	r2, [r3, #48]	@ 0x30
  hdma_handler.Instance                 = DMA2_Stream3;
 800e8a6:	4b17      	ldr	r3, [pc, #92]	@ (800e904 <DCMI_MspInit+0x230>)
 800e8a8:	4a17      	ldr	r2, [pc, #92]	@ (800e908 <DCMI_MspInit+0x234>)
 800e8aa:	601a      	str	r2, [r3, #0]

  /* Associate the initialized DMA handle to the DCMI handle */
  __HAL_LINKDMA(hdcmi, DMA_Handle, hdma_handler);
 800e8ac:	687b      	ldr	r3, [r7, #4]
 800e8ae:	4a15      	ldr	r2, [pc, #84]	@ (800e904 <DCMI_MspInit+0x230>)
 800e8b0:	649a      	str	r2, [r3, #72]	@ 0x48
 800e8b2:	4a14      	ldr	r2, [pc, #80]	@ (800e904 <DCMI_MspInit+0x230>)
 800e8b4:	687b      	ldr	r3, [r7, #4]
 800e8b6:	6393      	str	r3, [r2, #56]	@ 0x38

  /*** Configure the NVIC for DCMI and DMA ***/
  /* NVIC configuration for DCMI transfer complete interrupt */
  HAL_NVIC_SetPriority(DCMI_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800e8b8:	2200      	movs	r2, #0
 800e8ba:	210f      	movs	r1, #15
 800e8bc:	204e      	movs	r0, #78	@ 0x4e
 800e8be:	f003 fda8 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DCMI_IRQn);
 800e8c2:	204e      	movs	r0, #78	@ 0x4e
 800e8c4:	f003 fdbf 	bl	8012446 <HAL_NVIC_EnableIRQ>

  /* NVIC configuration for DMA2D transfer complete interrupt */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, BSP_CAMERA_IT_PRIORITY, 0);
 800e8c8:	2200      	movs	r2, #0
 800e8ca:	210f      	movs	r1, #15
 800e8cc:	203b      	movs	r0, #59	@ 0x3b
 800e8ce:	f003 fda0 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 800e8d2:	203b      	movs	r0, #59	@ 0x3b
 800e8d4:	f003 fdb7 	bl	8012446 <HAL_NVIC_EnableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_Init(hdcmi->DMA_Handle);
 800e8d8:	687b      	ldr	r3, [r7, #4]
 800e8da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e8dc:	4618      	mov	r0, r3
 800e8de:	f004 fa6b 	bl	8012db8 <HAL_DMA_Init>
}
 800e8e2:	bf00      	nop
 800e8e4:	3738      	adds	r7, #56	@ 0x38
 800e8e6:	46bd      	mov	sp, r7
 800e8e8:	bd80      	pop	{r7, pc}
 800e8ea:	bf00      	nop
 800e8ec:	58024400 	.word	0x58024400
 800e8f0:	58020000 	.word	0x58020000
 800e8f4:	58020400 	.word	0x58020400
 800e8f8:	58020800 	.word	0x58020800
 800e8fc:	58020c00 	.word	0x58020c00
 800e900:	58021800 	.word	0x58021800
 800e904:	24008534 	.word	0x24008534
 800e908:	40020458 	.word	0x40020458

0800e90c <DCMI_MspDeInit>:
  * @brief  DeInitializes the DCMI MSP.
  * @param  hdcmi  DCMI handle
  * @retval None
  */
static void DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
 800e90c:	b580      	push	{r7, lr}
 800e90e:	b088      	sub	sp, #32
 800e910:	af00      	add	r7, sp, #0
 800e912:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /* Disable NVIC  for DCMI transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DCMI_IRQn);
 800e914:	204e      	movs	r0, #78	@ 0x4e
 800e916:	f003 fda4 	bl	8012462 <HAL_NVIC_DisableIRQ>

  /* Disable NVIC for DMA2 transfer complete interrupt */
  HAL_NVIC_DisableIRQ(DMA2_Stream3_IRQn);
 800e91a:	203b      	movs	r0, #59	@ 0x3b
 800e91c:	f003 fda1 	bl	8012462 <HAL_NVIC_DisableIRQ>

  /* Configure the DMA stream */
  (void)HAL_DMA_DeInit(hdcmi->DMA_Handle);
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e924:	4618      	mov	r0, r3
 800e926:	f004 fda3 	bl	8013470 <HAL_DMA_DeInit>

  /* DeInit DCMI GPIOs */
  gpio_init_structure.Pin       = GPIO_PIN_4 | GPIO_PIN_6;
 800e92a:	2350      	movs	r3, #80	@ 0x50
 800e92c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOA, gpio_init_structure.Pin);
 800e92e:	68fb      	ldr	r3, [r7, #12]
 800e930:	4619      	mov	r1, r3
 800e932:	4817      	ldr	r0, [pc, #92]	@ (800e990 <DCMI_MspDeInit+0x84>)
 800e934:	f009 f998 	bl	8017c68 <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9;
 800e938:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800e93c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOB, gpio_init_structure.Pin);
 800e93e:	68fb      	ldr	r3, [r7, #12]
 800e940:	4619      	mov	r1, r3
 800e942:	4814      	ldr	r0, [pc, #80]	@ (800e994 <DCMI_MspDeInit+0x88>)
 800e944:	f009 f990 	bl	8017c68 <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_11;
 800e948:	f44f 632c 	mov.w	r3, #2752	@ 0xac0
 800e94c:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 800e94e:	68fb      	ldr	r3, [r7, #12]
 800e950:	4619      	mov	r1, r3
 800e952:	4811      	ldr	r0, [pc, #68]	@ (800e998 <DCMI_MspDeInit+0x8c>)
 800e954:	f009 f988 	bl	8017c68 <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_3;
 800e958:	2308      	movs	r3, #8
 800e95a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 800e95c:	68fb      	ldr	r3, [r7, #12]
 800e95e:	4619      	mov	r1, r3
 800e960:	480e      	ldr	r0, [pc, #56]	@ (800e99c <DCMI_MspDeInit+0x90>)
 800e962:	f009 f981 	bl	8017c68 <HAL_GPIO_DeInit>

  gpio_init_structure.Pin       = GPIO_PIN_10;
 800e966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800e96a:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_DeInit(GPIOG, gpio_init_structure.Pin);
 800e96c:	68fb      	ldr	r3, [r7, #12]
 800e96e:	4619      	mov	r1, r3
 800e970:	480b      	ldr	r0, [pc, #44]	@ (800e9a0 <DCMI_MspDeInit+0x94>)
 800e972:	f009 f979 	bl	8017c68 <HAL_GPIO_DeInit>



  /* Disable DCMI clock */
  __HAL_RCC_DCMI_CLK_DISABLE();
 800e976:	4b0b      	ldr	r3, [pc, #44]	@ (800e9a4 <DCMI_MspDeInit+0x98>)
 800e978:	f8d3 30dc 	ldr.w	r3, [r3, #220]	@ 0xdc
 800e97c:	4a09      	ldr	r2, [pc, #36]	@ (800e9a4 <DCMI_MspDeInit+0x98>)
 800e97e:	f023 0301 	bic.w	r3, r3, #1
 800e982:	f8c2 30dc 	str.w	r3, [r2, #220]	@ 0xdc
}
 800e986:	bf00      	nop
 800e988:	3720      	adds	r7, #32
 800e98a:	46bd      	mov	sp, r7
 800e98c:	bd80      	pop	{r7, pc}
 800e98e:	bf00      	nop
 800e990:	58020000 	.word	0x58020000
 800e994:	58020400 	.word	0x58020400
 800e998:	58020800 	.word	0x58020800
 800e99c:	58020c00 	.word	0x58020c00
 800e9a0:	58021800 	.word	0x58021800
 800e9a4:	58024400 	.word	0x58024400

0800e9a8 <HAL_DCMI_LineEventCallback>:
  * @brief  Line event callback
  * @param  hdcmi  pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_LineEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800e9a8:	b580      	push	{r7, lr}
 800e9aa:	b082      	sub	sp, #8
 800e9ac:	af00      	add	r7, sp, #0
 800e9ae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_LineEventCallback(0);
 800e9b0:	2000      	movs	r0, #0
 800e9b2:	f000 f825 	bl	800ea00 <BSP_CAMERA_LineEventCallback>
}
 800e9b6:	bf00      	nop
 800e9b8:	3708      	adds	r7, #8
 800e9ba:	46bd      	mov	sp, r7
 800e9bc:	bd80      	pop	{r7, pc}

0800e9be <HAL_DCMI_FrameEventCallback>:
  * @brief  Frame event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_FrameEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800e9be:	b580      	push	{r7, lr}
 800e9c0:	b082      	sub	sp, #8
 800e9c2:	af00      	add	r7, sp, #0
 800e9c4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_FrameEventCallback(0);
 800e9c6:	2000      	movs	r0, #0
 800e9c8:	f7fa f8f4 	bl	8008bb4 <BSP_CAMERA_FrameEventCallback>
}
 800e9cc:	bf00      	nop
 800e9ce:	3708      	adds	r7, #8
 800e9d0:	46bd      	mov	sp, r7
 800e9d2:	bd80      	pop	{r7, pc}

0800e9d4 <HAL_DCMI_VsyncEventCallback>:
  * @brief  Vsync event callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_VsyncEventCallback(DCMI_HandleTypeDef *hdcmi)
{
 800e9d4:	b580      	push	{r7, lr}
 800e9d6:	b082      	sub	sp, #8
 800e9d8:	af00      	add	r7, sp, #0
 800e9da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_VsyncEventCallback(0);
 800e9dc:	2000      	movs	r0, #0
 800e9de:	f000 f819 	bl	800ea14 <BSP_CAMERA_VsyncEventCallback>
}
 800e9e2:	bf00      	nop
 800e9e4:	3708      	adds	r7, #8
 800e9e6:	46bd      	mov	sp, r7
 800e9e8:	bd80      	pop	{r7, pc}

0800e9ea <HAL_DCMI_ErrorCallback>:
  * @brief  Error callback
  * @param  hdcmi pointer to the DCMI handle
  * @retval None
  */
void HAL_DCMI_ErrorCallback(DCMI_HandleTypeDef *hdcmi)
{
 800e9ea:	b580      	push	{r7, lr}
 800e9ec:	b082      	sub	sp, #8
 800e9ee:	af00      	add	r7, sp, #0
 800e9f0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdcmi);

  BSP_CAMERA_ErrorCallback(0);
 800e9f2:	2000      	movs	r0, #0
 800e9f4:	f000 f818 	bl	800ea28 <BSP_CAMERA_ErrorCallback>
}
 800e9f8:	bf00      	nop
 800e9fa:	3708      	adds	r7, #8
 800e9fc:	46bd      	mov	sp, r7
 800e9fe:	bd80      	pop	{r7, pc}

0800ea00 <BSP_CAMERA_LineEventCallback>:
  * @brief  Line Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_LineEventCallback(uint32_t Instance)
{
 800ea00:	b480      	push	{r7}
 800ea02:	b083      	sub	sp, #12
 800ea04:	af00      	add	r7, sp, #0
 800ea06:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_LineEventCallback could be implemented in the user file
   */
}
 800ea08:	bf00      	nop
 800ea0a:	370c      	adds	r7, #12
 800ea0c:	46bd      	mov	sp, r7
 800ea0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea12:	4770      	bx	lr

0800ea14 <BSP_CAMERA_VsyncEventCallback>:
  * @brief  Vsync Event callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_VsyncEventCallback(uint32_t Instance)
{
 800ea14:	b480      	push	{r7}
 800ea16:	b083      	sub	sp, #12
 800ea18:	af00      	add	r7, sp, #0
 800ea1a:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_FrameEventCallback could be implemented in the user file
   */
}
 800ea1c:	bf00      	nop
 800ea1e:	370c      	adds	r7, #12
 800ea20:	46bd      	mov	sp, r7
 800ea22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea26:	4770      	bx	lr

0800ea28 <BSP_CAMERA_ErrorCallback>:
  * @brief  Error callback.
  * @param  Instance Camera instance.
  * @retval None
  */
__weak void BSP_CAMERA_ErrorCallback(uint32_t Instance)
{
 800ea28:	b480      	push	{r7}
 800ea2a:	b083      	sub	sp, #12
 800ea2c:	af00      	add	r7, sp, #0
 800ea2e:	6078      	str	r0, [r7, #4]
  UNUSED(Instance);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_ErrorCallback could be implemented in the user file
   */
}
 800ea30:	bf00      	nop
 800ea32:	370c      	adds	r7, #12
 800ea34:	46bd      	mov	sp, r7
 800ea36:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ea3a:	4770      	bx	lr

0800ea3c <OV9655_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV9655_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 800ea3c:	b580      	push	{r7, lr}
 800ea3e:	b08a      	sub	sp, #40	@ 0x28
 800ea40:	af00      	add	r7, sp, #0
 800ea42:	6078      	str	r0, [r7, #4]
 800ea44:	6039      	str	r1, [r7, #0]
  int32_t ret;
  OV9655_IO_t              IOCtx;
  static OV9655_Object_t   OV9655Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV9655_ADDRESS;
 800ea46:	2360      	movs	r3, #96	@ 0x60
 800ea48:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800ea4a:	4b2e      	ldr	r3, [pc, #184]	@ (800eb04 <OV9655_Probe+0xc8>)
 800ea4c:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800ea4e:	4b2e      	ldr	r3, [pc, #184]	@ (800eb08 <OV9655_Probe+0xcc>)
 800ea50:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 800ea52:	4b2e      	ldr	r3, [pc, #184]	@ (800eb0c <OV9655_Probe+0xd0>)
 800ea54:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 800ea56:	4b2e      	ldr	r3, [pc, #184]	@ (800eb10 <OV9655_Probe+0xd4>)
 800ea58:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800ea5a:	4b2e      	ldr	r3, [pc, #184]	@ (800eb14 <OV9655_Probe+0xd8>)
 800ea5c:	623b      	str	r3, [r7, #32]

  if(OV9655_RegisterBusIO (&OV9655Obj, &IOCtx) != OV9655_OK)
 800ea5e:	f107 030c 	add.w	r3, r7, #12
 800ea62:	4619      	mov	r1, r3
 800ea64:	482c      	ldr	r0, [pc, #176]	@ (800eb18 <OV9655_Probe+0xdc>)
 800ea66:	f7f6 f869 	bl	8004b3c <OV9655_RegisterBusIO>
 800ea6a:	4603      	mov	r3, r0
 800ea6c:	2b00      	cmp	r3, #0
 800ea6e:	d003      	beq.n	800ea78 <OV9655_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ea70:	f06f 0304 	mvn.w	r3, #4
 800ea74:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea76:	e040      	b.n	800eafa <OV9655_Probe+0xbe>
  }
  else if(OV9655_ReadID(&OV9655Obj, &CameraId) != OV9655_OK)
 800ea78:	4928      	ldr	r1, [pc, #160]	@ (800eb1c <OV9655_Probe+0xe0>)
 800ea7a:	4827      	ldr	r0, [pc, #156]	@ (800eb18 <OV9655_Probe+0xdc>)
 800ea7c:	f7f6 fb1e 	bl	80050bc <OV9655_ReadID>
 800ea80:	4603      	mov	r3, r0
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d003      	beq.n	800ea8e <OV9655_Probe+0x52>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800ea86:	f06f 0304 	mvn.w	r3, #4
 800ea8a:	627b      	str	r3, [r7, #36]	@ 0x24
 800ea8c:	e035      	b.n	800eafa <OV9655_Probe+0xbe>
  }
  else
  {
    if((CameraId != OV9655_ID) && (CameraId != OV9655_ID_2))
 800ea8e:	4b23      	ldr	r3, [pc, #140]	@ (800eb1c <OV9655_Probe+0xe0>)
 800ea90:	681b      	ldr	r3, [r3, #0]
 800ea92:	f249 6256 	movw	r2, #38486	@ 0x9656
 800ea96:	4293      	cmp	r3, r2
 800ea98:	d009      	beq.n	800eaae <OV9655_Probe+0x72>
 800ea9a:	4b20      	ldr	r3, [pc, #128]	@ (800eb1c <OV9655_Probe+0xe0>)
 800ea9c:	681b      	ldr	r3, [r3, #0]
 800ea9e:	f249 6257 	movw	r2, #38487	@ 0x9657
 800eaa2:	4293      	cmp	r3, r2
 800eaa4:	d003      	beq.n	800eaae <OV9655_Probe+0x72>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800eaa6:	f06f 0306 	mvn.w	r3, #6
 800eaaa:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaac:	e025      	b.n	800eafa <OV9655_Probe+0xbe>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV9655_CAMERA_Driver;
 800eaae:	4b1c      	ldr	r3, [pc, #112]	@ (800eb20 <OV9655_Probe+0xe4>)
 800eab0:	4a1c      	ldr	r2, [pc, #112]	@ (800eb24 <OV9655_Probe+0xe8>)
 800eab2:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV9655Obj;
 800eab4:	4b1c      	ldr	r3, [pc, #112]	@ (800eb28 <OV9655_Probe+0xec>)
 800eab6:	4a18      	ldr	r2, [pc, #96]	@ (800eb18 <OV9655_Probe+0xdc>)
 800eab8:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV9655_OK)
 800eaba:	4b19      	ldr	r3, [pc, #100]	@ (800eb20 <OV9655_Probe+0xe4>)
 800eabc:	681b      	ldr	r3, [r3, #0]
 800eabe:	681b      	ldr	r3, [r3, #0]
 800eac0:	4a19      	ldr	r2, [pc, #100]	@ (800eb28 <OV9655_Probe+0xec>)
 800eac2:	6810      	ldr	r0, [r2, #0]
 800eac4:	683a      	ldr	r2, [r7, #0]
 800eac6:	6879      	ldr	r1, [r7, #4]
 800eac8:	4798      	blx	r3
 800eaca:	4603      	mov	r3, r0
 800eacc:	2b00      	cmp	r3, #0
 800eace:	d003      	beq.n	800ead8 <OV9655_Probe+0x9c>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ead0:	f06f 0304 	mvn.w	r3, #4
 800ead4:	627b      	str	r3, [r7, #36]	@ 0x24
 800ead6:	e010      	b.n	800eafa <OV9655_Probe+0xbe>
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV9655_OK)
 800ead8:	4b11      	ldr	r3, [pc, #68]	@ (800eb20 <OV9655_Probe+0xe4>)
 800eada:	681b      	ldr	r3, [r3, #0]
 800eadc:	68db      	ldr	r3, [r3, #12]
 800eade:	4a12      	ldr	r2, [pc, #72]	@ (800eb28 <OV9655_Probe+0xec>)
 800eae0:	6812      	ldr	r2, [r2, #0]
 800eae2:	4912      	ldr	r1, [pc, #72]	@ (800eb2c <OV9655_Probe+0xf0>)
 800eae4:	4610      	mov	r0, r2
 800eae6:	4798      	blx	r3
 800eae8:	4603      	mov	r3, r0
 800eaea:	2b00      	cmp	r3, #0
 800eaec:	d003      	beq.n	800eaf6 <OV9655_Probe+0xba>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800eaee:	f06f 0304 	mvn.w	r3, #4
 800eaf2:	627b      	str	r3, [r7, #36]	@ 0x24
 800eaf4:	e001      	b.n	800eafa <OV9655_Probe+0xbe>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800eaf6:	2300      	movs	r3, #0
 800eaf8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ret;
 800eafa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800eafc:	4618      	mov	r0, r3
 800eafe:	3728      	adds	r7, #40	@ 0x28
 800eb00:	46bd      	mov	sp, r7
 800eb02:	bd80      	pop	{r7, pc}
 800eb04:	0800d5b5 	.word	0x0800d5b5
 800eb08:	0800d629 	.word	0x0800d629
 800eb0c:	0800d751 	.word	0x0800d751
 800eb10:	0800d6f5 	.word	0x0800d6f5
 800eb14:	0800d865 	.word	0x0800d865
 800eb18:	240085ac 	.word	0x240085ac
 800eb1c:	24008530 	.word	0x24008530
 800eb20:	24008500 	.word	0x24008500
 800eb24:	24000514 	.word	0x24000514
 800eb28:	24008478 	.word	0x24008478
 800eb2c:	24008504 	.word	0x24008504

0800eb30 <OV5640_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OV5640_Probe(uint32_t Resolution, uint32_t PixelFormat)
{
 800eb30:	b580      	push	{r7, lr}
 800eb32:	b08a      	sub	sp, #40	@ 0x28
 800eb34:	af00      	add	r7, sp, #0
 800eb36:	6078      	str	r0, [r7, #4]
 800eb38:	6039      	str	r1, [r7, #0]
   int32_t ret;
  OV5640_IO_t              IOCtx;
  static OV5640_Object_t   OV5640Obj;

  /* Configure the audio driver */
  IOCtx.Address     = CAMERA_OV5640_ADDRESS;
 800eb3a:	2378      	movs	r3, #120	@ 0x78
 800eb3c:	82bb      	strh	r3, [r7, #20]
  IOCtx.Init        = BSP_I2C4_Init;
 800eb3e:	4b2b      	ldr	r3, [pc, #172]	@ (800ebec <OV5640_Probe+0xbc>)
 800eb40:	60fb      	str	r3, [r7, #12]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 800eb42:	4b2b      	ldr	r3, [pc, #172]	@ (800ebf0 <OV5640_Probe+0xc0>)
 800eb44:	613b      	str	r3, [r7, #16]
  IOCtx.ReadReg     = BSP_I2C4_ReadReg16;
 800eb46:	4b2b      	ldr	r3, [pc, #172]	@ (800ebf4 <OV5640_Probe+0xc4>)
 800eb48:	61fb      	str	r3, [r7, #28]
  IOCtx.WriteReg    = BSP_I2C4_WriteReg16;
 800eb4a:	4b2b      	ldr	r3, [pc, #172]	@ (800ebf8 <OV5640_Probe+0xc8>)
 800eb4c:	61bb      	str	r3, [r7, #24]
  IOCtx.GetTick     = BSP_GetTick;
 800eb4e:	4b2b      	ldr	r3, [pc, #172]	@ (800ebfc <OV5640_Probe+0xcc>)
 800eb50:	623b      	str	r3, [r7, #32]

  if(OV5640_RegisterBusIO (&OV5640Obj, &IOCtx) != OV5640_OK)
 800eb52:	f107 030c 	add.w	r3, r7, #12
 800eb56:	4619      	mov	r1, r3
 800eb58:	4829      	ldr	r0, [pc, #164]	@ (800ec00 <OV5640_Probe+0xd0>)
 800eb5a:	f7f4 fa8b 	bl	8003074 <OV5640_RegisterBusIO>
 800eb5e:	4603      	mov	r3, r0
 800eb60:	2b00      	cmp	r3, #0
 800eb62:	d003      	beq.n	800eb6c <OV5640_Probe+0x3c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800eb64:	f06f 0304 	mvn.w	r3, #4
 800eb68:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb6a:	e03a      	b.n	800ebe2 <OV5640_Probe+0xb2>
  }
  else if(OV5640_ReadID(&OV5640Obj, &CameraId) != OV5640_OK)
 800eb6c:	4925      	ldr	r1, [pc, #148]	@ (800ec04 <OV5640_Probe+0xd4>)
 800eb6e:	4824      	ldr	r0, [pc, #144]	@ (800ec00 <OV5640_Probe+0xd0>)
 800eb70:	f7f4 fefe 	bl	8003970 <OV5640_ReadID>
 800eb74:	4603      	mov	r3, r0
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d003      	beq.n	800eb82 <OV5640_Probe+0x52>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 800eb7a:	f06f 0304 	mvn.w	r3, #4
 800eb7e:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb80:	e02f      	b.n	800ebe2 <OV5640_Probe+0xb2>
  }
  else
  {
    if(CameraId != OV5640_ID)
 800eb82:	4b20      	ldr	r3, [pc, #128]	@ (800ec04 <OV5640_Probe+0xd4>)
 800eb84:	681b      	ldr	r3, [r3, #0]
 800eb86:	f245 6240 	movw	r2, #22080	@ 0x5640
 800eb8a:	4293      	cmp	r3, r2
 800eb8c:	d003      	beq.n	800eb96 <OV5640_Probe+0x66>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800eb8e:	f06f 0306 	mvn.w	r3, #6
 800eb92:	627b      	str	r3, [r7, #36]	@ 0x24
 800eb94:	e025      	b.n	800ebe2 <OV5640_Probe+0xb2>
    }
    else
    {
      Camera_Drv = (CAMERA_Drv_t *) &OV5640_CAMERA_Driver;
 800eb96:	4b1c      	ldr	r3, [pc, #112]	@ (800ec08 <OV5640_Probe+0xd8>)
 800eb98:	4a1c      	ldr	r2, [pc, #112]	@ (800ec0c <OV5640_Probe+0xdc>)
 800eb9a:	601a      	str	r2, [r3, #0]
      Camera_CompObj = &OV5640Obj;
 800eb9c:	4b1c      	ldr	r3, [pc, #112]	@ (800ec10 <OV5640_Probe+0xe0>)
 800eb9e:	4a18      	ldr	r2, [pc, #96]	@ (800ec00 <OV5640_Probe+0xd0>)
 800eba0:	601a      	str	r2, [r3, #0]
      if(Camera_Drv->Init(Camera_CompObj, Resolution, PixelFormat) != OV5640_OK)
 800eba2:	4b19      	ldr	r3, [pc, #100]	@ (800ec08 <OV5640_Probe+0xd8>)
 800eba4:	681b      	ldr	r3, [r3, #0]
 800eba6:	681b      	ldr	r3, [r3, #0]
 800eba8:	4a19      	ldr	r2, [pc, #100]	@ (800ec10 <OV5640_Probe+0xe0>)
 800ebaa:	6810      	ldr	r0, [r2, #0]
 800ebac:	683a      	ldr	r2, [r7, #0]
 800ebae:	6879      	ldr	r1, [r7, #4]
 800ebb0:	4798      	blx	r3
 800ebb2:	4603      	mov	r3, r0
 800ebb4:	2b00      	cmp	r3, #0
 800ebb6:	d003      	beq.n	800ebc0 <OV5640_Probe+0x90>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ebb8:	f06f 0304 	mvn.w	r3, #4
 800ebbc:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebbe:	e010      	b.n	800ebe2 <OV5640_Probe+0xb2>
      }
      else if(Camera_Drv->GetCapabilities(Camera_CompObj, &Camera_Cap) != OV5640_OK)
 800ebc0:	4b11      	ldr	r3, [pc, #68]	@ (800ec08 <OV5640_Probe+0xd8>)
 800ebc2:	681b      	ldr	r3, [r3, #0]
 800ebc4:	68db      	ldr	r3, [r3, #12]
 800ebc6:	4a12      	ldr	r2, [pc, #72]	@ (800ec10 <OV5640_Probe+0xe0>)
 800ebc8:	6812      	ldr	r2, [r2, #0]
 800ebca:	4912      	ldr	r1, [pc, #72]	@ (800ec14 <OV5640_Probe+0xe4>)
 800ebcc:	4610      	mov	r0, r2
 800ebce:	4798      	blx	r3
 800ebd0:	4603      	mov	r3, r0
 800ebd2:	2b00      	cmp	r3, #0
 800ebd4:	d003      	beq.n	800ebde <OV5640_Probe+0xae>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ebd6:	f06f 0304 	mvn.w	r3, #4
 800ebda:	627b      	str	r3, [r7, #36]	@ 0x24
 800ebdc:	e001      	b.n	800ebe2 <OV5640_Probe+0xb2>
      }
      else
      {

        ret = BSP_ERROR_NONE;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	627b      	str	r3, [r7, #36]	@ 0x24
      }
    }
  }

  return ret;
 800ebe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800ebe4:	4618      	mov	r0, r3
 800ebe6:	3728      	adds	r7, #40	@ 0x28
 800ebe8:	46bd      	mov	sp, r7
 800ebea:	bd80      	pop	{r7, pc}
 800ebec:	0800d5b5 	.word	0x0800d5b5
 800ebf0:	0800d629 	.word	0x0800d629
 800ebf4:	0800d809 	.word	0x0800d809
 800ebf8:	0800d7ad 	.word	0x0800d7ad
 800ebfc:	0800d865 	.word	0x0800d865
 800ec00:	240085d4 	.word	0x240085d4
 800ec04:	24008530 	.word	0x24008530
 800ec08:	24008500 	.word	0x24008500
 800ec0c:	240004d0 	.word	0x240004d0
 800ec10:	24008478 	.word	0x24008478
 800ec14:	24008504 	.word	0x24008504

0800ec18 <BSP_LCD_Init>:
  * @param  Instance    LCD Instance
  * @param  Orientation LCD_ORIENTATION_LANDSCAPE
  * @retval BSP status
  */
int32_t BSP_LCD_Init(uint32_t Instance, uint32_t Orientation)
{
 800ec18:	b580      	push	{r7, lr}
 800ec1a:	b084      	sub	sp, #16
 800ec1c:	af02      	add	r7, sp, #8
 800ec1e:	6078      	str	r0, [r7, #4]
 800ec20:	6039      	str	r1, [r7, #0]
  return BSP_LCD_InitEx(Instance, Orientation, LCD_PIXEL_FORMAT_RGB888, LCD_DEFAULT_WIDTH, LCD_DEFAULT_HEIGHT);
 800ec22:	f44f 73f0 	mov.w	r3, #480	@ 0x1e0
 800ec26:	9300      	str	r3, [sp, #0]
 800ec28:	f44f 7348 	mov.w	r3, #800	@ 0x320
 800ec2c:	2201      	movs	r2, #1
 800ec2e:	6839      	ldr	r1, [r7, #0]
 800ec30:	6878      	ldr	r0, [r7, #4]
 800ec32:	f000 f805 	bl	800ec40 <BSP_LCD_InitEx>
 800ec36:	4603      	mov	r3, r0
}
 800ec38:	4618      	mov	r0, r3
 800ec3a:	3708      	adds	r7, #8
 800ec3c:	46bd      	mov	sp, r7
 800ec3e:	bd80      	pop	{r7, pc}

0800ec40 <BSP_LCD_InitEx>:
  * @param  Width       Display width
  * @param  Height      Display height
  * @retval BSP status
  */
int32_t BSP_LCD_InitEx(uint32_t Instance, uint32_t Orientation, uint32_t PixelFormat, uint32_t Width, uint32_t Height)
{
 800ec40:	b580      	push	{r7, lr}
 800ec42:	b08e      	sub	sp, #56	@ 0x38
 800ec44:	af00      	add	r7, sp, #0
 800ec46:	60f8      	str	r0, [r7, #12]
 800ec48:	60b9      	str	r1, [r7, #8]
 800ec4a:	607a      	str	r2, [r7, #4]
 800ec4c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ec4e:	2300      	movs	r3, #0
 800ec50:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t ctrl_pixel_format, ltdc_pixel_format, dsi_pixel_format;
  MX_LTDC_LayerConfig_t config;

  if((Orientation > LCD_ORIENTATION_LANDSCAPE) || (Instance >= LCD_INSTANCES_NBR) || \
 800ec52:	68bb      	ldr	r3, [r7, #8]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d808      	bhi.n	800ec6a <BSP_LCD_InitEx+0x2a>
 800ec58:	68fb      	ldr	r3, [r7, #12]
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d105      	bne.n	800ec6a <BSP_LCD_InitEx+0x2a>
 800ec5e:	687b      	ldr	r3, [r7, #4]
 800ec60:	2b02      	cmp	r3, #2
 800ec62:	d006      	beq.n	800ec72 <BSP_LCD_InitEx+0x32>
     ((PixelFormat != LCD_PIXEL_FORMAT_RGB565) && (PixelFormat != LTDC_PIXEL_FORMAT_RGB888)))
 800ec64:	687b      	ldr	r3, [r7, #4]
 800ec66:	2b01      	cmp	r3, #1
 800ec68:	d003      	beq.n	800ec72 <BSP_LCD_InitEx+0x32>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ec6a:	f06f 0301 	mvn.w	r3, #1
 800ec6e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ec70:	e0db      	b.n	800ee2a <BSP_LCD_InitEx+0x1ea>
  }
  else
  {
    if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800ec72:	687b      	ldr	r3, [r7, #4]
 800ec74:	2b02      	cmp	r3, #2
 800ec76:	d10e      	bne.n	800ec96 <BSP_LCD_InitEx+0x56>
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_RGB565;
 800ec78:	2302      	movs	r3, #2
 800ec7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB565;
 800ec7c:	2300      	movs	r3, #0
 800ec7e:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 2U;
 800ec80:	496c      	ldr	r1, [pc, #432]	@ (800ee34 <BSP_LCD_InitEx+0x1f4>)
 800ec82:	68fa      	ldr	r2, [r7, #12]
 800ec84:	4613      	mov	r3, r2
 800ec86:	00db      	lsls	r3, r3, #3
 800ec88:	1a9b      	subs	r3, r3, r2
 800ec8a:	009b      	lsls	r3, r3, #2
 800ec8c:	440b      	add	r3, r1
 800ec8e:	3310      	adds	r3, #16
 800ec90:	2202      	movs	r2, #2
 800ec92:	601a      	str	r2, [r3, #0]
 800ec94:	e00d      	b.n	800ecb2 <BSP_LCD_InitEx+0x72>
    }
    else /* LCD_PIXEL_FORMAT_RGB888 */
    {
      ltdc_pixel_format = LTDC_PIXEL_FORMAT_ARGB8888;
 800ec96:	2300      	movs	r3, #0
 800ec98:	62fb      	str	r3, [r7, #44]	@ 0x2c
      dsi_pixel_format = DSI_RGB888;
 800ec9a:	2305      	movs	r3, #5
 800ec9c:	62bb      	str	r3, [r7, #40]	@ 0x28
      Lcd_Ctx[Instance].BppFactor = 4U;
 800ec9e:	4965      	ldr	r1, [pc, #404]	@ (800ee34 <BSP_LCD_InitEx+0x1f4>)
 800eca0:	68fa      	ldr	r2, [r7, #12]
 800eca2:	4613      	mov	r3, r2
 800eca4:	00db      	lsls	r3, r3, #3
 800eca6:	1a9b      	subs	r3, r3, r2
 800eca8:	009b      	lsls	r3, r3, #2
 800ecaa:	440b      	add	r3, r1
 800ecac:	3310      	adds	r3, #16
 800ecae:	2204      	movs	r2, #4
 800ecb0:	601a      	str	r2, [r3, #0]
    }

    /* Store pixel format, xsize and ysize information */
    Lcd_Ctx[Instance].PixelFormat = PixelFormat;
 800ecb2:	4960      	ldr	r1, [pc, #384]	@ (800ee34 <BSP_LCD_InitEx+0x1f4>)
 800ecb4:	68fa      	ldr	r2, [r7, #12]
 800ecb6:	4613      	mov	r3, r2
 800ecb8:	00db      	lsls	r3, r3, #3
 800ecba:	1a9b      	subs	r3, r3, r2
 800ecbc:	009b      	lsls	r3, r3, #2
 800ecbe:	440b      	add	r3, r1
 800ecc0:	330c      	adds	r3, #12
 800ecc2:	687a      	ldr	r2, [r7, #4]
 800ecc4:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].XSize  = Width;
 800ecc6:	495b      	ldr	r1, [pc, #364]	@ (800ee34 <BSP_LCD_InitEx+0x1f4>)
 800ecc8:	68fa      	ldr	r2, [r7, #12]
 800ecca:	4613      	mov	r3, r2
 800eccc:	00db      	lsls	r3, r3, #3
 800ecce:	1a9b      	subs	r3, r3, r2
 800ecd0:	009b      	lsls	r3, r3, #2
 800ecd2:	440b      	add	r3, r1
 800ecd4:	683a      	ldr	r2, [r7, #0]
 800ecd6:	601a      	str	r2, [r3, #0]
    Lcd_Ctx[Instance].YSize  = Height;
 800ecd8:	4956      	ldr	r1, [pc, #344]	@ (800ee34 <BSP_LCD_InitEx+0x1f4>)
 800ecda:	68fa      	ldr	r2, [r7, #12]
 800ecdc:	4613      	mov	r3, r2
 800ecde:	00db      	lsls	r3, r3, #3
 800ece0:	1a9b      	subs	r3, r3, r2
 800ece2:	009b      	lsls	r3, r3, #2
 800ece4:	440b      	add	r3, r1
 800ece6:	3304      	adds	r3, #4
 800ece8:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ecea:	601a      	str	r2, [r3, #0]

    /* Toggle Hardware Reset of the LCD using its XRES signal (active low) */
    BSP_LCD_Reset(Instance);
 800ecec:	68f8      	ldr	r0, [r7, #12]
 800ecee:	f000 f8af 	bl	800ee50 <BSP_LCD_Reset>


    /* Initialize LCD special pins GPIOs */
    LCD_InitSequence();
 800ecf2:	f000 f8e7 	bl	800eec4 <LCD_InitSequence>

    /* Initializes peripherals instance value */
    hlcd_ltdc.Instance = LTDC;
 800ecf6:	4b50      	ldr	r3, [pc, #320]	@ (800ee38 <BSP_LCD_InitEx+0x1f8>)
 800ecf8:	4a50      	ldr	r2, [pc, #320]	@ (800ee3c <BSP_LCD_InitEx+0x1fc>)
 800ecfa:	601a      	str	r2, [r3, #0]
    hlcd_dma2d.Instance = DMA2D;
 800ecfc:	4b50      	ldr	r3, [pc, #320]	@ (800ee40 <BSP_LCD_InitEx+0x200>)
 800ecfe:	4a51      	ldr	r2, [pc, #324]	@ (800ee44 <BSP_LCD_InitEx+0x204>)
 800ed00:	601a      	str	r2, [r3, #0]
    hlcd_dsi.Instance = DSI;
 800ed02:	4b51      	ldr	r3, [pc, #324]	@ (800ee48 <BSP_LCD_InitEx+0x208>)
 800ed04:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800ed08:	601a      	str	r2, [r3, #0]
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    LTDC_MspInit(&hlcd_ltdc);
 800ed0a:	484b      	ldr	r0, [pc, #300]	@ (800ee38 <BSP_LCD_InitEx+0x1f8>)
 800ed0c:	f000 ff80 	bl	800fc10 <LTDC_MspInit>
#endif

    DMA2D_MspInit(&hlcd_dma2d);
 800ed10:	484b      	ldr	r0, [pc, #300]	@ (800ee40 <BSP_LCD_InitEx+0x200>)
 800ed12:	f000 ffaf 	bl	800fc74 <DMA2D_MspInit>
      {
        return BSP_ERROR_PERIPH_FAILURE;
      }
    }
#else
    DSI_MspInit(&hlcd_dsi);
 800ed16:	484c      	ldr	r0, [pc, #304]	@ (800ee48 <BSP_LCD_InitEx+0x208>)
 800ed18:	f000 ffda 	bl	800fcd0 <DSI_MspInit>
#endif
    if(MX_DSIHOST_DSI_Init(&hlcd_dsi, Width, Height, dsi_pixel_format) != HAL_OK)
 800ed1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ed1e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed20:	6839      	ldr	r1, [r7, #0]
 800ed22:	4849      	ldr	r0, [pc, #292]	@ (800ee48 <BSP_LCD_InitEx+0x208>)
 800ed24:	f000 f936 	bl	800ef94 <MX_DSIHOST_DSI_Init>
 800ed28:	4603      	mov	r3, r0
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d003      	beq.n	800ed36 <BSP_LCD_InitEx+0xf6>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800ed2e:	f06f 0303 	mvn.w	r3, #3
 800ed32:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed34:	e014      	b.n	800ed60 <BSP_LCD_InitEx+0x120>
    }
    else if(MX_LTDC_ClockConfig(&hlcd_ltdc) != HAL_OK)
 800ed36:	4840      	ldr	r0, [pc, #256]	@ (800ee38 <BSP_LCD_InitEx+0x1f8>)
 800ed38:	f000 fa94 	bl	800f264 <MX_LTDC_ClockConfig>
 800ed3c:	4603      	mov	r3, r0
 800ed3e:	2b00      	cmp	r3, #0
 800ed40:	d003      	beq.n	800ed4a <BSP_LCD_InitEx+0x10a>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800ed42:	f06f 0303 	mvn.w	r3, #3
 800ed46:	637b      	str	r3, [r7, #52]	@ 0x34
 800ed48:	e00a      	b.n	800ed60 <BSP_LCD_InitEx+0x120>
    }
    else
    {
     if(MX_LTDC_Init(&hlcd_ltdc, Width, Height) != HAL_OK)
 800ed4a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800ed4c:	6839      	ldr	r1, [r7, #0]
 800ed4e:	483a      	ldr	r0, [pc, #232]	@ (800ee38 <BSP_LCD_InitEx+0x1f8>)
 800ed50:	f000 f9d2 	bl	800f0f8 <MX_LTDC_Init>
 800ed54:	4603      	mov	r3, r0
 800ed56:	2b00      	cmp	r3, #0
 800ed58:	d002      	beq.n	800ed60 <BSP_LCD_InitEx+0x120>
     {
       ret = BSP_ERROR_PERIPH_FAILURE;
 800ed5a:	f06f 0303 	mvn.w	r3, #3
 800ed5e:	637b      	str	r3, [r7, #52]	@ 0x34
     }
    }

    if(ret == BSP_ERROR_NONE)
 800ed60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ed62:	2b00      	cmp	r3, #0
 800ed64:	d161      	bne.n	800ee2a <BSP_LCD_InitEx+0x1ea>
    {
      /* Before configuring LTDC layer, ensure SDRAM is initialized */
#if !defined(DATA_IN_ExtSDRAM)
      /* Initialize the SDRAM */
      if(BSP_SDRAM_Init(0) != BSP_ERROR_NONE)
 800ed66:	2000      	movs	r0, #0
 800ed68:	f002 fa06 	bl	8011178 <BSP_SDRAM_Init>
 800ed6c:	4603      	mov	r3, r0
 800ed6e:	2b00      	cmp	r3, #0
 800ed70:	d002      	beq.n	800ed78 <BSP_LCD_InitEx+0x138>
      {
        return BSP_ERROR_PERIPH_FAILURE;
 800ed72:	f06f 0303 	mvn.w	r3, #3
 800ed76:	e059      	b.n	800ee2c <BSP_LCD_InitEx+0x1ec>
      }
#endif /* DATA_IN_ExtSDRAM */

      /* Configure default LTDC Layer 0. This configuration can be override by calling
      BSP_LCD_ConfigLayer() at application level */
      config.X0          = 0;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	613b      	str	r3, [r7, #16]
      config.X1          = Width;
 800ed7c:	683b      	ldr	r3, [r7, #0]
 800ed7e:	617b      	str	r3, [r7, #20]
      config.Y0          = 0;
 800ed80:	2300      	movs	r3, #0
 800ed82:	61bb      	str	r3, [r7, #24]
      config.Y1          = Height;
 800ed84:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800ed86:	61fb      	str	r3, [r7, #28]
      config.PixelFormat = ltdc_pixel_format;
 800ed88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ed8a:	623b      	str	r3, [r7, #32]
      config.Address     = LCD_LAYER_0_ADDRESS;
 800ed8c:	f04f 4350 	mov.w	r3, #3489660928	@ 0xd0000000
 800ed90:	627b      	str	r3, [r7, #36]	@ 0x24
      if(MX_LTDC_ConfigLayer(&hlcd_ltdc, 0, &config) != HAL_OK)
 800ed92:	f107 0310 	add.w	r3, r7, #16
 800ed96:	461a      	mov	r2, r3
 800ed98:	2100      	movs	r1, #0
 800ed9a:	4827      	ldr	r0, [pc, #156]	@ (800ee38 <BSP_LCD_InitEx+0x1f8>)
 800ed9c:	f000 fa20 	bl	800f1e0 <MX_LTDC_ConfigLayer>
 800eda0:	4603      	mov	r3, r0
 800eda2:	2b00      	cmp	r3, #0
 800eda4:	d003      	beq.n	800edae <BSP_LCD_InitEx+0x16e>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 800eda6:	f06f 0303 	mvn.w	r3, #3
 800edaa:	637b      	str	r3, [r7, #52]	@ 0x34
 800edac:	e033      	b.n	800ee16 <BSP_LCD_InitEx+0x1d6>
      }
      else
      {
        /* Enable the DSI host and wrapper after the LTDC initialization
        To avoid any synchronization issue, the DSI shall be started after enabling the LTDC */
        (void)HAL_DSI_Start(&hlcd_dsi);
 800edae:	4826      	ldr	r0, [pc, #152]	@ (800ee48 <BSP_LCD_InitEx+0x208>)
 800edb0:	f008 fb80 	bl	80174b4 <HAL_DSI_Start>

        /* Enable the DSI BTW for read operations */
        (void)HAL_DSI_ConfigFlowControl(&hlcd_dsi, DSI_FLOW_CONTROL_BTA);
 800edb4:	2104      	movs	r1, #4
 800edb6:	4824      	ldr	r0, [pc, #144]	@ (800ee48 <BSP_LCD_InitEx+0x208>)
 800edb8:	f008 fb54 	bl	8017464 <HAL_DSI_ConfigFlowControl>

        /* Initialize the NT35510 LCD Display IC Driver (KoD LCD IC Driver)
        depending on configuration of DSI */
        if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800edbc:	687b      	ldr	r3, [r7, #4]
 800edbe:	2b02      	cmp	r3, #2
 800edc0:	d102      	bne.n	800edc8 <BSP_LCD_InitEx+0x188>
        {
          ctrl_pixel_format = NT35510_FORMAT_RBG565;
 800edc2:	2302      	movs	r3, #2
 800edc4:	633b      	str	r3, [r7, #48]	@ 0x30
 800edc6:	e001      	b.n	800edcc <BSP_LCD_InitEx+0x18c>
        }
        else /* LCD_PIXEL_FORMAT_RGB888 */
        {
          ctrl_pixel_format = NT35510_FORMAT_RGB888;
 800edc8:	2300      	movs	r3, #0
 800edca:	633b      	str	r3, [r7, #48]	@ 0x30
        }
        if(NT35510_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 800edcc:	68b9      	ldr	r1, [r7, #8]
 800edce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edd0:	f001 f812 	bl	800fdf8 <NT35510_Probe>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b00      	cmp	r3, #0
 800edd8:	d01b      	beq.n	800ee12 <BSP_LCD_InitEx+0x1d2>
        {
         Lcd_Driver_Type = LCD_CTRL_OTM8009A;
 800edda:	4b1c      	ldr	r3, [pc, #112]	@ (800ee4c <BSP_LCD_InitEx+0x20c>)
 800eddc:	2201      	movs	r2, #1
 800edde:	701a      	strb	r2, [r3, #0]

          if(ret == BSP_ERROR_NONE)
 800ede0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ede2:	2b00      	cmp	r3, #0
 800ede4:	d117      	bne.n	800ee16 <BSP_LCD_InitEx+0x1d6>
          {
            /* Initialize the OTM8009A LCD Display IC Driver (KoD LCD IC Driver)
            depending on configuration of DSI */
            if(PixelFormat == LCD_PIXEL_FORMAT_RGB565)
 800ede6:	687b      	ldr	r3, [r7, #4]
 800ede8:	2b02      	cmp	r3, #2
 800edea:	d102      	bne.n	800edf2 <BSP_LCD_InitEx+0x1b2>
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RBG565;
 800edec:	2302      	movs	r3, #2
 800edee:	633b      	str	r3, [r7, #48]	@ 0x30
 800edf0:	e001      	b.n	800edf6 <BSP_LCD_InitEx+0x1b6>
            }
            else /* LCD_PIXEL_FORMAT_RGB888 */
            {
              ctrl_pixel_format = OTM8009A_FORMAT_RGB888;
 800edf2:	2300      	movs	r3, #0
 800edf4:	633b      	str	r3, [r7, #48]	@ 0x30
            }
            if(OTM8009A_Probe(ctrl_pixel_format, Orientation) != BSP_ERROR_NONE)
 800edf6:	68b9      	ldr	r1, [r7, #8]
 800edf8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800edfa:	f001 f859 	bl	800feb0 <OTM8009A_Probe>
 800edfe:	4603      	mov	r3, r0
 800ee00:	2b00      	cmp	r3, #0
 800ee02:	d003      	beq.n	800ee0c <BSP_LCD_InitEx+0x1cc>
            {
              ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ee04:	f06f 0306 	mvn.w	r3, #6
 800ee08:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee0a:	e004      	b.n	800ee16 <BSP_LCD_InitEx+0x1d6>
            }
            else
            {
              ret = BSP_ERROR_NONE;
 800ee0c:	2300      	movs	r3, #0
 800ee0e:	637b      	str	r3, [r7, #52]	@ 0x34
 800ee10:	e001      	b.n	800ee16 <BSP_LCD_InitEx+0x1d6>
            }
          }
        }
        else
        {
          ret = BSP_ERROR_NONE;
 800ee12:	2300      	movs	r3, #0
 800ee14:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
    /* By default the reload is activated and executed immediately */
    Lcd_Ctx[Instance].ReloadEnable = 1U;
 800ee16:	4907      	ldr	r1, [pc, #28]	@ (800ee34 <BSP_LCD_InitEx+0x1f4>)
 800ee18:	68fa      	ldr	r2, [r7, #12]
 800ee1a:	4613      	mov	r3, r2
 800ee1c:	00db      	lsls	r3, r3, #3
 800ee1e:	1a9b      	subs	r3, r3, r2
 800ee20:	009b      	lsls	r3, r3, #2
 800ee22:	440b      	add	r3, r1
 800ee24:	3318      	adds	r3, #24
 800ee26:	2201      	movs	r2, #1
 800ee28:	601a      	str	r2, [r3, #0]
   }
  }

  return ret;
 800ee2a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800ee2c:	4618      	mov	r0, r3
 800ee2e:	3738      	adds	r7, #56	@ 0x38
 800ee30:	46bd      	mov	sp, r7
 800ee32:	bd80      	pop	{r7, pc}
 800ee34:	24008734 	.word	0x24008734
 800ee38:	2400868c 	.word	0x2400868c
 800ee3c:	50001000 	.word	0x50001000
 800ee40:	24008624 	.word	0x24008624
 800ee44:	52001000 	.word	0x52001000
 800ee48:	24008608 	.word	0x24008608
 800ee4c:	24008750 	.word	0x24008750

0800ee50 <BSP_LCD_Reset>:
  *         Hw reset the LCD DSI activating its XRES signal (active low for some time)
  *         and deactivating it later.
  * @param  Instance LCD Instance
  */
void BSP_LCD_Reset(uint32_t Instance)
{
 800ee50:	b580      	push	{r7, lr}
 800ee52:	b088      	sub	sp, #32
 800ee54:	af00      	add	r7, sp, #0
 800ee56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef  gpio_init_structure;

  LCD_RESET_GPIO_CLK_ENABLE();
 800ee58:	4b18      	ldr	r3, [pc, #96]	@ (800eebc <BSP_LCD_Reset+0x6c>)
 800ee5a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee5e:	4a17      	ldr	r2, [pc, #92]	@ (800eebc <BSP_LCD_Reset+0x6c>)
 800ee60:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800ee64:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ee68:	4b14      	ldr	r3, [pc, #80]	@ (800eebc <BSP_LCD_Reset+0x6c>)
 800ee6a:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ee6e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800ee72:	60bb      	str	r3, [r7, #8]
 800ee74:	68bb      	ldr	r3, [r7, #8]

  /* Configure the GPIO Reset pin */
  gpio_init_structure.Pin   = LCD_RESET_PIN;
 800ee76:	2308      	movs	r3, #8
 800ee78:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode  = GPIO_MODE_OUTPUT_PP;
 800ee7a:	2301      	movs	r3, #1
 800ee7c:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Pull  = GPIO_PULLUP;
 800ee7e:	2301      	movs	r3, #1
 800ee80:	617b      	str	r3, [r7, #20]
  gpio_init_structure.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ee82:	2303      	movs	r3, #3
 800ee84:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(LCD_RESET_GPIO_PORT , &gpio_init_structure);
 800ee86:	f107 030c 	add.w	r3, r7, #12
 800ee8a:	4619      	mov	r1, r3
 800ee8c:	480c      	ldr	r0, [pc, #48]	@ (800eec0 <BSP_LCD_Reset+0x70>)
 800ee8e:	f008 fd3b 	bl	8017908 <HAL_GPIO_Init>

  /* Activate XRES active low */
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_RESET);
 800ee92:	2200      	movs	r2, #0
 800ee94:	2108      	movs	r1, #8
 800ee96:	480a      	ldr	r0, [pc, #40]	@ (800eec0 <BSP_LCD_Reset+0x70>)
 800ee98:	f009 f808 	bl	8017eac <HAL_GPIO_WritePin>
  HAL_Delay(20);/* wait 20 ms */
 800ee9c:	2014      	movs	r0, #20
 800ee9e:	f003 f979 	bl	8012194 <HAL_Delay>
  HAL_GPIO_WritePin(LCD_RESET_GPIO_PORT , LCD_RESET_PIN, GPIO_PIN_SET);/* Deactivate XRES */
 800eea2:	2201      	movs	r2, #1
 800eea4:	2108      	movs	r1, #8
 800eea6:	4806      	ldr	r0, [pc, #24]	@ (800eec0 <BSP_LCD_Reset+0x70>)
 800eea8:	f009 f800 	bl	8017eac <HAL_GPIO_WritePin>
  HAL_Delay(10);/* Wait for 10ms after releasing XRES before sending commands */
 800eeac:	200a      	movs	r0, #10
 800eeae:	f003 f971 	bl	8012194 <HAL_Delay>
}
 800eeb2:	bf00      	nop
 800eeb4:	3720      	adds	r7, #32
 800eeb6:	46bd      	mov	sp, r7
 800eeb8:	bd80      	pop	{r7, pc}
 800eeba:	bf00      	nop
 800eebc:	58024400 	.word	0x58024400
 800eec0:	58021800 	.word	0x58021800

0800eec4 <LCD_InitSequence>:
/**
  * @brief  Configure LCD control pins (Back-light, Display Enable and TE)
  * @retval None
  */
static void LCD_InitSequence(void)
{
 800eec4:	b580      	push	{r7, lr}
 800eec6:	b088      	sub	sp, #32
 800eec8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef  gpio_init_structure;

  /* LCD_BL_CTRL GPIO configuration */
  LCD_BL_CTRL_GPIO_CLK_ENABLE();
 800eeca:	4b30      	ldr	r3, [pc, #192]	@ (800ef8c <LCD_InitSequence+0xc8>)
 800eecc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eed0:	4a2e      	ldr	r2, [pc, #184]	@ (800ef8c <LCD_InitSequence+0xc8>)
 800eed2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800eed6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800eeda:	4b2c      	ldr	r3, [pc, #176]	@ (800ef8c <LCD_InitSequence+0xc8>)
 800eedc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800eee0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800eee4:	60bb      	str	r3, [r7, #8]
 800eee6:	68bb      	ldr	r3, [r7, #8]

  gpio_init_structure.Pin       = LCD_BL_CTRL_PIN;
 800eee8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800eeec:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 800eeee:	2301      	movs	r3, #1
 800eef0:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800eef2:	2302      	movs	r3, #2
 800eef4:	61bb      	str	r3, [r7, #24]
  gpio_init_structure.Pull      = GPIO_NOPULL;
 800eef6:	2300      	movs	r3, #0
 800eef8:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(LCD_BL_CTRL_GPIO_PORT, &gpio_init_structure);
 800eefa:	f107 030c 	add.w	r3, r7, #12
 800eefe:	4619      	mov	r1, r3
 800ef00:	4823      	ldr	r0, [pc, #140]	@ (800ef90 <LCD_InitSequence+0xcc>)
 800ef02:	f008 fd01 	bl	8017908 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_BL_CTRL_GPIO_PORT, LCD_BL_CTRL_PIN, GPIO_PIN_SET);
 800ef06:	2201      	movs	r2, #1
 800ef08:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 800ef0c:	4820      	ldr	r0, [pc, #128]	@ (800ef90 <LCD_InitSequence+0xcc>)
 800ef0e:	f008 ffcd 	bl	8017eac <HAL_GPIO_WritePin>

  /* LCD_TE_CTRL GPIO configuration */
  LCD_TE_GPIO_CLK_ENABLE();
 800ef12:	4b1e      	ldr	r3, [pc, #120]	@ (800ef8c <LCD_InitSequence+0xc8>)
 800ef14:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ef18:	4a1c      	ldr	r2, [pc, #112]	@ (800ef8c <LCD_InitSequence+0xc8>)
 800ef1a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800ef1e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 800ef22:	4b1a      	ldr	r3, [pc, #104]	@ (800ef8c <LCD_InitSequence+0xc8>)
 800ef24:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 800ef28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800ef2c:	607b      	str	r3, [r7, #4]
 800ef2e:	687b      	ldr	r3, [r7, #4]

  gpio_init_structure.Pin       = LCD_TE_PIN;
 800ef30:	2304      	movs	r3, #4
 800ef32:	60fb      	str	r3, [r7, #12]
  gpio_init_structure.Mode      = GPIO_MODE_INPUT;
 800ef34:	2300      	movs	r3, #0
 800ef36:	613b      	str	r3, [r7, #16]
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_HIGH;
 800ef38:	2302      	movs	r3, #2
 800ef3a:	61bb      	str	r3, [r7, #24]

  HAL_GPIO_Init(LCD_TE_GPIO_PORT, &gpio_init_structure);
 800ef3c:	f107 030c 	add.w	r3, r7, #12
 800ef40:	4619      	mov	r1, r3
 800ef42:	4813      	ldr	r0, [pc, #76]	@ (800ef90 <LCD_InitSequence+0xcc>)
 800ef44:	f008 fce0 	bl	8017908 <HAL_GPIO_Init>
  /* Assert back-light LCD_BL_CTRL pin */
  HAL_GPIO_WritePin(LCD_TE_GPIO_PORT, LCD_TE_PIN, GPIO_PIN_SET);
 800ef48:	2201      	movs	r2, #1
 800ef4a:	2104      	movs	r1, #4
 800ef4c:	4810      	ldr	r0, [pc, #64]	@ (800ef90 <LCD_InitSequence+0xcc>)
 800ef4e:	f008 ffad 	bl	8017eac <HAL_GPIO_WritePin>

      /** @brief NVIC configuration for LTDC interrupt that is now enabled */
  HAL_NVIC_SetPriority(LTDC_IRQn, 0x0F, 0);
 800ef52:	2200      	movs	r2, #0
 800ef54:	210f      	movs	r1, #15
 800ef56:	2058      	movs	r0, #88	@ 0x58
 800ef58:	f003 fa5b 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(LTDC_IRQn);
 800ef5c:	2058      	movs	r0, #88	@ 0x58
 800ef5e:	f003 fa72 	bl	8012446 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DMA2D interrupt that is now enabled */
  HAL_NVIC_SetPriority(DMA2D_IRQn, 0x0F, 0);
 800ef62:	2200      	movs	r2, #0
 800ef64:	210f      	movs	r1, #15
 800ef66:	205a      	movs	r0, #90	@ 0x5a
 800ef68:	f003 fa53 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2D_IRQn);
 800ef6c:	205a      	movs	r0, #90	@ 0x5a
 800ef6e:	f003 fa6a 	bl	8012446 <HAL_NVIC_EnableIRQ>

  /** @brief NVIC configuration for DSI interrupt that is now enabled */
  HAL_NVIC_SetPriority(DSI_IRQn, 0x0F, 0);
 800ef72:	2200      	movs	r2, #0
 800ef74:	210f      	movs	r1, #15
 800ef76:	207b      	movs	r0, #123	@ 0x7b
 800ef78:	f003 fa4b 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DSI_IRQn);
 800ef7c:	207b      	movs	r0, #123	@ 0x7b
 800ef7e:	f003 fa62 	bl	8012446 <HAL_NVIC_EnableIRQ>
}
 800ef82:	bf00      	nop
 800ef84:	3720      	adds	r7, #32
 800ef86:	46bd      	mov	sp, r7
 800ef88:	bd80      	pop	{r7, pc}
 800ef8a:	bf00      	nop
 800ef8c:	58024400 	.word	0x58024400
 800ef90:	58022400 	.word	0x58022400

0800ef94 <MX_DSIHOST_DSI_Init>:
  * @param  Height Vertical active height
  * @param  PixelFormat DSI color coding RGB888 or RGB565
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_DSIHOST_DSI_Init(DSI_HandleTypeDef *hdsi, uint32_t Width, uint32_t Height, uint32_t PixelFormat)
{
 800ef94:	b580      	push	{r7, lr}
 800ef96:	b0a2      	sub	sp, #136	@ 0x88
 800ef98:	af00      	add	r7, sp, #0
 800ef9a:	60f8      	str	r0, [r7, #12]
 800ef9c:	60b9      	str	r1, [r7, #8]
 800ef9e:	607a      	str	r2, [r7, #4]
 800efa0:	603b      	str	r3, [r7, #0]
  DSI_PLLInitTypeDef PLLInit;
  DSI_VidCfgTypeDef VidCfg;

  hdsi->Instance = DSI;
 800efa2:	68fb      	ldr	r3, [r7, #12]
 800efa4:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800efa8:	601a      	str	r2, [r3, #0]
  hdsi->Init.AutomaticClockLaneControl = DSI_AUTO_CLK_LANE_CTRL_DISABLE;
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	2200      	movs	r2, #0
 800efae:	605a      	str	r2, [r3, #4]
  hdsi->Init.TXEscapeCkdiv = 4;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	2204      	movs	r2, #4
 800efb4:	609a      	str	r2, [r3, #8]
  hdsi->Init.NumberOfLanes = DSI_TWO_DATA_LANES;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	2201      	movs	r2, #1
 800efba:	60da      	str	r2, [r3, #12]
  PLLInit.PLLNDIV = 100;
 800efbc:	2364      	movs	r3, #100	@ 0x64
 800efbe:	67fb      	str	r3, [r7, #124]	@ 0x7c
  PLLInit.PLLIDF = DSI_PLL_IN_DIV5;
 800efc0:	2305      	movs	r3, #5
 800efc2:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
  PLLInit.PLLODF = DSI_PLL_OUT_DIV1;
 800efc6:	2300      	movs	r3, #0
 800efc8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (HAL_DSI_Init(hdsi, &PLLInit) != HAL_OK)
 800efcc:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 800efd0:	4619      	mov	r1, r3
 800efd2:	68f8      	ldr	r0, [r7, #12]
 800efd4:	f007 febc 	bl	8016d50 <HAL_DSI_Init>
 800efd8:	4603      	mov	r3, r0
 800efda:	2b00      	cmp	r3, #0
 800efdc:	d001      	beq.n	800efe2 <MX_DSIHOST_DSI_Init+0x4e>
  {
    return HAL_ERROR;
 800efde:	2301      	movs	r3, #1
 800efe0:	e07f      	b.n	800f0e2 <MX_DSIHOST_DSI_Init+0x14e>
  /* Timing parameters for all Video modes */
  /*
  The lane byte clock is set 62500 Khz
  The pixel clock is set to 27429 Khz
  */
  VidCfg.VirtualChannelID = 0;
 800efe2:	2300      	movs	r3, #0
 800efe4:	613b      	str	r3, [r7, #16]
  VidCfg.ColorCoding = PixelFormat;
 800efe6:	683b      	ldr	r3, [r7, #0]
 800efe8:	617b      	str	r3, [r7, #20]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800efea:	4b40      	ldr	r3, [pc, #256]	@ (800f0ec <MX_DSIHOST_DSI_Init+0x158>)
 800efec:	781b      	ldrb	r3, [r3, #0]
 800efee:	2b00      	cmp	r3, #0
 800eff0:	d103      	bne.n	800effa <MX_DSIHOST_DSI_Init+0x66>
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_ENABLE;
 800eff2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800eff6:	61bb      	str	r3, [r7, #24]
 800eff8:	e001      	b.n	800effe <MX_DSIHOST_DSI_Init+0x6a>
  }
  else
  {
    VidCfg.LooselyPacked = DSI_LOOSELY_PACKED_DISABLE;
 800effa:	2300      	movs	r3, #0
 800effc:	61bb      	str	r3, [r7, #24]
  }

  VidCfg.Mode = DSI_VID_MODE_BURST;
 800effe:	2302      	movs	r3, #2
 800f000:	61fb      	str	r3, [r7, #28]
  VidCfg.PacketSize = Width;
 800f002:	68bb      	ldr	r3, [r7, #8]
 800f004:	623b      	str	r3, [r7, #32]
  VidCfg.NumberOfChunks = 0;
 800f006:	2300      	movs	r3, #0
 800f008:	627b      	str	r3, [r7, #36]	@ 0x24
  VidCfg.NullPacketSize = 0xFFFU;
 800f00a:	f640 73ff 	movw	r3, #4095	@ 0xfff
 800f00e:	62bb      	str	r3, [r7, #40]	@ 0x28
  VidCfg.HSPolarity = DSI_HSYNC_ACTIVE_HIGH;
 800f010:	2300      	movs	r3, #0
 800f012:	62fb      	str	r3, [r7, #44]	@ 0x2c
  VidCfg.VSPolarity = DSI_VSYNC_ACTIVE_HIGH;
 800f014:	2300      	movs	r3, #0
 800f016:	633b      	str	r3, [r7, #48]	@ 0x30
  VidCfg.DEPolarity = DSI_DATA_ENABLE_ACTIVE_HIGH;
 800f018:	2300      	movs	r3, #0
 800f01a:	637b      	str	r3, [r7, #52]	@ 0x34
  
  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800f01c:	4b33      	ldr	r3, [pc, #204]	@ (800f0ec <MX_DSIHOST_DSI_Init+0x158>)
 800f01e:	781b      	ldrb	r3, [r3, #0]
 800f020:	2b00      	cmp	r3, #0
 800f022:	d116      	bne.n	800f052 <MX_DSIHOST_DSI_Init+0xbe>
  {
    VidCfg.HorizontalSyncActive = (NT35510_480X800_HSYNC * 62500U)/27429U;
 800f024:	2304      	movs	r3, #4
 800f026:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (NT35510_480X800_HBP * 62500U)/27429U;
 800f028:	234d      	movs	r3, #77	@ 0x4d
 800f02a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + NT35510_480X800_HSYNC + NT35510_480X800_HBP + NT35510_480X800_HFP) * 62500U)/27429U;
 800f02c:	68bb      	ldr	r3, [r7, #8]
 800f02e:	f24f 4224 	movw	r2, #62500	@ 0xf424
 800f032:	fb03 f202 	mul.w	r2, r3, r2
 800f036:	4b2e      	ldr	r3, [pc, #184]	@ (800f0f0 <MX_DSIHOST_DSI_Init+0x15c>)
 800f038:	4413      	add	r3, r2
 800f03a:	4a2e      	ldr	r2, [pc, #184]	@ (800f0f4 <MX_DSIHOST_DSI_Init+0x160>)
 800f03c:	fba2 2303 	umull	r2, r3, r2, r3
 800f040:	0b5b      	lsrs	r3, r3, #13
 800f042:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = NT35510_480X800_VSYNC;
 800f044:	2378      	movs	r3, #120	@ 0x78
 800f046:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = NT35510_480X800_VBP;
 800f048:	2396      	movs	r3, #150	@ 0x96
 800f04a:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = NT35510_480X800_VFP;
 800f04c:	2396      	movs	r3, #150	@ 0x96
 800f04e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800f050:	e015      	b.n	800f07e <MX_DSIHOST_DSI_Init+0xea>
  }
  else
  {
    VidCfg.HorizontalSyncActive = (OTM8009A_480X800_HSYNC * 62500U)/27429U;
 800f052:	2304      	movs	r3, #4
 800f054:	63bb      	str	r3, [r7, #56]	@ 0x38
    VidCfg.HorizontalBackPorch = (OTM8009A_480X800_HBP * 62500U)/27429U;
 800f056:	234d      	movs	r3, #77	@ 0x4d
 800f058:	63fb      	str	r3, [r7, #60]	@ 0x3c
    VidCfg.HorizontalLine = ((Width + OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP) * 62500U)/27429U;
 800f05a:	68bb      	ldr	r3, [r7, #8]
 800f05c:	f24f 4224 	movw	r2, #62500	@ 0xf424
 800f060:	fb03 f202 	mul.w	r2, r3, r2
 800f064:	4b22      	ldr	r3, [pc, #136]	@ (800f0f0 <MX_DSIHOST_DSI_Init+0x15c>)
 800f066:	4413      	add	r3, r2
 800f068:	4a22      	ldr	r2, [pc, #136]	@ (800f0f4 <MX_DSIHOST_DSI_Init+0x160>)
 800f06a:	fba2 2303 	umull	r2, r3, r2, r3
 800f06e:	0b5b      	lsrs	r3, r3, #13
 800f070:	643b      	str	r3, [r7, #64]	@ 0x40
    VidCfg.VerticalSyncActive = OTM8009A_480X800_VSYNC;
 800f072:	2301      	movs	r3, #1
 800f074:	647b      	str	r3, [r7, #68]	@ 0x44
    VidCfg.VerticalBackPorch = OTM8009A_480X800_VBP;
 800f076:	230f      	movs	r3, #15
 800f078:	64bb      	str	r3, [r7, #72]	@ 0x48
    VidCfg.VerticalFrontPorch = OTM8009A_480X800_VFP;
 800f07a:	2310      	movs	r3, #16
 800f07c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  }

  VidCfg.VerticalActive = Height;
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	653b      	str	r3, [r7, #80]	@ 0x50
  VidCfg.LPCommandEnable = DSI_LP_COMMAND_ENABLE;
 800f082:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800f086:	657b      	str	r3, [r7, #84]	@ 0x54

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800f088:	4b18      	ldr	r3, [pc, #96]	@ (800f0ec <MX_DSIHOST_DSI_Init+0x158>)
 800f08a:	781b      	ldrb	r3, [r3, #0]
 800f08c:	2b00      	cmp	r3, #0
 800f08e:	d104      	bne.n	800f09a <MX_DSIHOST_DSI_Init+0x106>
  {
    VidCfg.LPLargestPacketSize = 64;
 800f090:	2340      	movs	r3, #64	@ 0x40
 800f092:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 64;
 800f094:	2340      	movs	r3, #64	@ 0x40
 800f096:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800f098:	e003      	b.n	800f0a2 <MX_DSIHOST_DSI_Init+0x10e>
  }
  else
  {
    VidCfg.LPLargestPacketSize = 4;
 800f09a:	2304      	movs	r3, #4
 800f09c:	65bb      	str	r3, [r7, #88]	@ 0x58
    VidCfg.LPVACTLargestPacketSize = 4;
 800f09e:	2304      	movs	r3, #4
 800f0a0:	65fb      	str	r3, [r7, #92]	@ 0x5c
  }

  VidCfg.LPHorizontalFrontPorchEnable  = DSI_LP_HFP_ENABLE;
 800f0a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800f0a6:	663b      	str	r3, [r7, #96]	@ 0x60
  VidCfg.LPHorizontalBackPorchEnable   = DSI_LP_HBP_ENABLE;
 800f0a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800f0ac:	667b      	str	r3, [r7, #100]	@ 0x64
  VidCfg.LPVerticalActiveEnable        = DSI_LP_VACT_ENABLE;
 800f0ae:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f0b2:	66bb      	str	r3, [r7, #104]	@ 0x68
  VidCfg.LPVerticalFrontPorchEnable    = DSI_LP_VFP_ENABLE;
 800f0b4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f0b8:	66fb      	str	r3, [r7, #108]	@ 0x6c
  VidCfg.LPVerticalBackPorchEnable     = DSI_LP_VBP_ENABLE;
 800f0ba:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800f0be:	673b      	str	r3, [r7, #112]	@ 0x70
  VidCfg.LPVerticalSyncActiveEnable    = DSI_LP_VSYNC_ENABLE;
 800f0c0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800f0c4:	677b      	str	r3, [r7, #116]	@ 0x74
  VidCfg.FrameBTAAcknowledgeEnable     = DSI_FBTAA_DISABLE;
 800f0c6:	2300      	movs	r3, #0
 800f0c8:	67bb      	str	r3, [r7, #120]	@ 0x78

  if (HAL_DSI_ConfigVideoMode(hdsi, &VidCfg) != HAL_OK)
 800f0ca:	f107 0310 	add.w	r3, r7, #16
 800f0ce:	4619      	mov	r1, r3
 800f0d0:	68f8      	ldr	r0, [r7, #12]
 800f0d2:	f007 ffc7 	bl	8017064 <HAL_DSI_ConfigVideoMode>
 800f0d6:	4603      	mov	r3, r0
 800f0d8:	2b00      	cmp	r3, #0
 800f0da:	d001      	beq.n	800f0e0 <MX_DSIHOST_DSI_Init+0x14c>
  {
    return HAL_ERROR;
 800f0dc:	2301      	movs	r3, #1
 800f0de:	e000      	b.n	800f0e2 <MX_DSIHOST_DSI_Init+0x14e>
  }

  return HAL_OK;
 800f0e0:	2300      	movs	r3, #0
}
 800f0e2:	4618      	mov	r0, r3
 800f0e4:	3788      	adds	r7, #136	@ 0x88
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	24008750 	.word	0x24008750
 800f0f0:	0042c1d8 	.word	0x0042c1d8
 800f0f4:	4c751ce3 	.word	0x4c751ce3

0800f0f8 <MX_LTDC_Init>:
  * @param  Width  LTDC width
  * @param  Height LTDC height
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_Init(LTDC_HandleTypeDef *hltdc, uint32_t Width, uint32_t Height)
{
 800f0f8:	b580      	push	{r7, lr}
 800f0fa:	b084      	sub	sp, #16
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	60f8      	str	r0, [r7, #12]
 800f100:	60b9      	str	r1, [r7, #8]
 800f102:	607a      	str	r2, [r7, #4]
  hltdc->Instance = LTDC;
 800f104:	68fb      	ldr	r3, [r7, #12]
 800f106:	4a34      	ldr	r2, [pc, #208]	@ (800f1d8 <MX_LTDC_Init+0xe0>)
 800f108:	601a      	str	r2, [r3, #0]
  hltdc->Init.HSPolarity = LTDC_HSPOLARITY_AL;
 800f10a:	68fb      	ldr	r3, [r7, #12]
 800f10c:	2200      	movs	r2, #0
 800f10e:	605a      	str	r2, [r3, #4]
  hltdc->Init.VSPolarity = LTDC_VSPOLARITY_AL;
 800f110:	68fb      	ldr	r3, [r7, #12]
 800f112:	2200      	movs	r2, #0
 800f114:	609a      	str	r2, [r3, #8]
  hltdc->Init.DEPolarity = LTDC_DEPOLARITY_AL;
 800f116:	68fb      	ldr	r3, [r7, #12]
 800f118:	2200      	movs	r2, #0
 800f11a:	60da      	str	r2, [r3, #12]
  hltdc->Init.PCPolarity = LTDC_PCPOLARITY_IPC;
 800f11c:	68fb      	ldr	r3, [r7, #12]
 800f11e:	2200      	movs	r2, #0
 800f120:	611a      	str	r2, [r3, #16]

  if(Lcd_Driver_Type == LCD_CTRL_NT35510)
 800f122:	4b2e      	ldr	r3, [pc, #184]	@ (800f1dc <MX_LTDC_Init+0xe4>)
 800f124:	781b      	ldrb	r3, [r3, #0]
 800f126:	2b00      	cmp	r3, #0
 800f128:	d121      	bne.n	800f16e <MX_LTDC_Init+0x76>
  {
    hltdc->Init.HorizontalSync     = NT35510_480X800_HSYNC - 1;
 800f12a:	68fb      	ldr	r3, [r7, #12]
 800f12c:	2201      	movs	r2, #1
 800f12e:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = NT35510_480X800_HSYNC + NT35510_480X800_HBP - 1;
 800f130:	68fb      	ldr	r3, [r7, #12]
 800f132:	2223      	movs	r2, #35	@ 0x23
 800f134:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP - 1;
 800f136:	68bb      	ldr	r3, [r7, #8]
 800f138:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 800f13c:	68fb      	ldr	r3, [r7, #12]
 800f13e:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = NT35510_480X800_HSYNC + Width + NT35510_480X800_HBP + NT35510_480X800_HFP - 1;
 800f140:	68bb      	ldr	r3, [r7, #8]
 800f142:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 800f146:	68fb      	ldr	r3, [r7, #12]
 800f148:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = NT35510_480X800_VSYNC - 1;
 800f14a:	68fb      	ldr	r3, [r7, #12]
 800f14c:	2277      	movs	r2, #119	@ 0x77
 800f14e:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = NT35510_480X800_VSYNC + NT35510_480X800_VBP - 1;
 800f150:	68fb      	ldr	r3, [r7, #12]
 800f152:	f240 120d 	movw	r2, #269	@ 0x10d
 800f156:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP - 1;
 800f158:	687b      	ldr	r3, [r7, #4]
 800f15a:	f203 120d 	addw	r2, r3, #269	@ 0x10d
 800f15e:	68fb      	ldr	r3, [r7, #12]
 800f160:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = NT35510_480X800_VSYNC + Height + NT35510_480X800_VBP + NT35510_480X800_VFP - 1;
 800f162:	687b      	ldr	r3, [r7, #4]
 800f164:	f203 12a3 	addw	r2, r3, #419	@ 0x1a3
 800f168:	68fb      	ldr	r3, [r7, #12]
 800f16a:	631a      	str	r2, [r3, #48]	@ 0x30
 800f16c:	e01f      	b.n	800f1ae <MX_LTDC_Init+0xb6>
  }
  else
  {
    hltdc->Init.HorizontalSync     = OTM8009A_480X800_HSYNC - 1;
 800f16e:	68fb      	ldr	r3, [r7, #12]
 800f170:	2201      	movs	r2, #1
 800f172:	615a      	str	r2, [r3, #20]
    hltdc->Init.AccumulatedHBP     = OTM8009A_480X800_HSYNC + OTM8009A_480X800_HBP - 1;
 800f174:	68fb      	ldr	r3, [r7, #12]
 800f176:	2223      	movs	r2, #35	@ 0x23
 800f178:	61da      	str	r2, [r3, #28]
    hltdc->Init.AccumulatedActiveW = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP - 1;
 800f17a:	68bb      	ldr	r3, [r7, #8]
 800f17c:	f103 0223 	add.w	r2, r3, #35	@ 0x23
 800f180:	68fb      	ldr	r3, [r7, #12]
 800f182:	625a      	str	r2, [r3, #36]	@ 0x24
    hltdc->Init.TotalWidth         = OTM8009A_480X800_HSYNC + Width + OTM8009A_480X800_HBP + OTM8009A_480X800_HFP - 1;
 800f184:	68bb      	ldr	r3, [r7, #8]
 800f186:	f103 0245 	add.w	r2, r3, #69	@ 0x45
 800f18a:	68fb      	ldr	r3, [r7, #12]
 800f18c:	62da      	str	r2, [r3, #44]	@ 0x2c
    hltdc->Init.VerticalSync       = OTM8009A_480X800_VSYNC - 1;
 800f18e:	68fb      	ldr	r3, [r7, #12]
 800f190:	2200      	movs	r2, #0
 800f192:	619a      	str	r2, [r3, #24]
    hltdc->Init.AccumulatedVBP     = OTM8009A_480X800_VSYNC + OTM8009A_480X800_VBP - 1;
 800f194:	68fb      	ldr	r3, [r7, #12]
 800f196:	220f      	movs	r2, #15
 800f198:	621a      	str	r2, [r3, #32]
    hltdc->Init.AccumulatedActiveH = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP - 1;
 800f19a:	687b      	ldr	r3, [r7, #4]
 800f19c:	f103 020f 	add.w	r2, r3, #15
 800f1a0:	68fb      	ldr	r3, [r7, #12]
 800f1a2:	629a      	str	r2, [r3, #40]	@ 0x28
    hltdc->Init.TotalHeigh         = OTM8009A_480X800_VSYNC + Height + OTM8009A_480X800_VBP + OTM8009A_480X800_VFP - 1;
 800f1a4:	687b      	ldr	r3, [r7, #4]
 800f1a6:	f103 021f 	add.w	r2, r3, #31
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  hltdc->Init.Backcolor.Blue  = 0x00;
 800f1ae:	68fb      	ldr	r3, [r7, #12]
 800f1b0:	2200      	movs	r2, #0
 800f1b2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  hltdc->Init.Backcolor.Green = 0x00;
 800f1b6:	68fb      	ldr	r3, [r7, #12]
 800f1b8:	2200      	movs	r2, #0
 800f1ba:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  hltdc->Init.Backcolor.Red   = 0x00;
 800f1be:	68fb      	ldr	r3, [r7, #12]
 800f1c0:	2200      	movs	r2, #0
 800f1c2:	f883 2036 	strb.w	r2, [r3, #54]	@ 0x36

  return HAL_LTDC_Init(hltdc);
 800f1c6:	68f8      	ldr	r0, [r7, #12]
 800f1c8:	f009 fd25 	bl	8018c16 <HAL_LTDC_Init>
 800f1cc:	4603      	mov	r3, r0
}
 800f1ce:	4618      	mov	r0, r3
 800f1d0:	3710      	adds	r7, #16
 800f1d2:	46bd      	mov	sp, r7
 800f1d4:	bd80      	pop	{r7, pc}
 800f1d6:	bf00      	nop
 800f1d8:	50001000 	.word	0x50001000
 800f1dc:	24008750 	.word	0x24008750

0800f1e0 <MX_LTDC_ConfigLayer>:
  * @param  LayerIndex Layer 0 or 1
  * @param  Config     Layer configuration
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, uint32_t LayerIndex, MX_LTDC_LayerConfig_t *Config)
{
 800f1e0:	b580      	push	{r7, lr}
 800f1e2:	b092      	sub	sp, #72	@ 0x48
 800f1e4:	af00      	add	r7, sp, #0
 800f1e6:	60f8      	str	r0, [r7, #12]
 800f1e8:	60b9      	str	r1, [r7, #8]
 800f1ea:	607a      	str	r2, [r7, #4]
  LTDC_LayerCfgTypeDef pLayerCfg;

  pLayerCfg.WindowX0 = Config->X0;
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	681b      	ldr	r3, [r3, #0]
 800f1f0:	617b      	str	r3, [r7, #20]
  pLayerCfg.WindowX1 = Config->X1;
 800f1f2:	687b      	ldr	r3, [r7, #4]
 800f1f4:	685b      	ldr	r3, [r3, #4]
 800f1f6:	61bb      	str	r3, [r7, #24]
  pLayerCfg.WindowY0 = Config->Y0;
 800f1f8:	687b      	ldr	r3, [r7, #4]
 800f1fa:	689b      	ldr	r3, [r3, #8]
 800f1fc:	61fb      	str	r3, [r7, #28]
  pLayerCfg.WindowY1 = Config->Y1;
 800f1fe:	687b      	ldr	r3, [r7, #4]
 800f200:	68db      	ldr	r3, [r3, #12]
 800f202:	623b      	str	r3, [r7, #32]
  pLayerCfg.PixelFormat = Config->PixelFormat;
 800f204:	687b      	ldr	r3, [r7, #4]
 800f206:	691b      	ldr	r3, [r3, #16]
 800f208:	627b      	str	r3, [r7, #36]	@ 0x24
  pLayerCfg.Alpha = 255;
 800f20a:	23ff      	movs	r3, #255	@ 0xff
 800f20c:	62bb      	str	r3, [r7, #40]	@ 0x28
  pLayerCfg.Alpha0 = 0;
 800f20e:	2300      	movs	r3, #0
 800f210:	62fb      	str	r3, [r7, #44]	@ 0x2c
  pLayerCfg.BlendingFactor1 = LTDC_BLENDING_FACTOR1_PAxCA;
 800f212:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800f216:	633b      	str	r3, [r7, #48]	@ 0x30
  pLayerCfg.BlendingFactor2 = LTDC_BLENDING_FACTOR2_PAxCA;
 800f218:	2307      	movs	r3, #7
 800f21a:	637b      	str	r3, [r7, #52]	@ 0x34
  pLayerCfg.FBStartAdress = Config->Address;
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	695b      	ldr	r3, [r3, #20]
 800f220:	63bb      	str	r3, [r7, #56]	@ 0x38
  pLayerCfg.ImageWidth = (Config->X1 - Config->X0);
 800f222:	687b      	ldr	r3, [r7, #4]
 800f224:	685a      	ldr	r2, [r3, #4]
 800f226:	687b      	ldr	r3, [r7, #4]
 800f228:	681b      	ldr	r3, [r3, #0]
 800f22a:	1ad3      	subs	r3, r2, r3
 800f22c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  pLayerCfg.ImageHeight = (Config->Y1 - Config->Y0);
 800f22e:	687b      	ldr	r3, [r7, #4]
 800f230:	68da      	ldr	r2, [r3, #12]
 800f232:	687b      	ldr	r3, [r7, #4]
 800f234:	689b      	ldr	r3, [r3, #8]
 800f236:	1ad3      	subs	r3, r2, r3
 800f238:	643b      	str	r3, [r7, #64]	@ 0x40
  pLayerCfg.Backcolor.Blue = 0;
 800f23a:	2300      	movs	r3, #0
 800f23c:	f887 3044 	strb.w	r3, [r7, #68]	@ 0x44
  pLayerCfg.Backcolor.Green = 0;
 800f240:	2300      	movs	r3, #0
 800f242:	f887 3045 	strb.w	r3, [r7, #69]	@ 0x45
  pLayerCfg.Backcolor.Red = 0;
 800f246:	2300      	movs	r3, #0
 800f248:	f887 3046 	strb.w	r3, [r7, #70]	@ 0x46
  return HAL_LTDC_ConfigLayer(hltdc, &pLayerCfg, LayerIndex);
 800f24c:	f107 0314 	add.w	r3, r7, #20
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	4619      	mov	r1, r3
 800f254:	68f8      	ldr	r0, [r7, #12]
 800f256:	f009 fd85 	bl	8018d64 <HAL_LTDC_ConfigLayer>
 800f25a:	4603      	mov	r3, r0
}
 800f25c:	4618      	mov	r0, r3
 800f25e:	3748      	adds	r7, #72	@ 0x48
 800f260:	46bd      	mov	sp, r7
 800f262:	bd80      	pop	{r7, pc}

0800f264 <MX_LTDC_ClockConfig>:
  * @param  hltdc  LTDC Handle
  *         Being __weak it can be overwritten by the application
  * @retval HAL_status
  */
__weak HAL_StatusTypeDef MX_LTDC_ClockConfig(LTDC_HandleTypeDef *hltdc)
{
 800f264:	b580      	push	{r7, lr}
 800f266:	b0b4      	sub	sp, #208	@ 0xd0
 800f268:	af00      	add	r7, sp, #0
 800f26a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef  PeriphClkInitStruct;

  PeriphClkInitStruct.PeriphClockSelection   = RCC_PERIPHCLK_LTDC;
 800f26c:	f04f 5200 	mov.w	r2, #536870912	@ 0x20000000
 800f270:	f04f 0300 	mov.w	r3, #0
 800f274:	e9c7 2302 	strd	r2, r3, [r7, #8]
  PeriphClkInitStruct.PLL3.PLL3M      = 5U;
 800f278:	2305      	movs	r3, #5
 800f27a:	633b      	str	r3, [r7, #48]	@ 0x30
  PeriphClkInitStruct.PLL3.PLL3N      = 132U;
 800f27c:	2384      	movs	r3, #132	@ 0x84
 800f27e:	637b      	str	r3, [r7, #52]	@ 0x34
  PeriphClkInitStruct.PLL3.PLL3P      = 2U;
 800f280:	2302      	movs	r3, #2
 800f282:	63bb      	str	r3, [r7, #56]	@ 0x38
  PeriphClkInitStruct.PLL3.PLL3Q      = 2U;
 800f284:	2302      	movs	r3, #2
 800f286:	63fb      	str	r3, [r7, #60]	@ 0x3c
  PeriphClkInitStruct.PLL3.PLL3R      = 24U;
 800f288:	2318      	movs	r3, #24
 800f28a:	643b      	str	r3, [r7, #64]	@ 0x40
  PeriphClkInitStruct.PLL3.PLL3RGE    = RCC_PLLCFGR_PLL3RGE_2;
 800f28c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800f290:	647b      	str	r3, [r7, #68]	@ 0x44
  PeriphClkInitStruct.PLL3.PLL3VCOSEL = RCC_PLL3VCOWIDE;
 800f292:	2300      	movs	r3, #0
 800f294:	64bb      	str	r3, [r7, #72]	@ 0x48
  PeriphClkInitStruct.PLL3.PLL3FRACN  = 0U;
 800f296:	2300      	movs	r3, #0
 800f298:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct);
 800f29a:	f107 0308 	add.w	r3, r7, #8
 800f29e:	4618      	mov	r0, r3
 800f2a0:	f00b ff3c 	bl	801b11c <HAL_RCCEx_PeriphCLKConfig>
 800f2a4:	4603      	mov	r3, r0
}
 800f2a6:	4618      	mov	r0, r3
 800f2a8:	37d0      	adds	r7, #208	@ 0xd0
 800f2aa:	46bd      	mov	sp, r7
 800f2ac:	bd80      	pop	{r7, pc}
	...

0800f2b0 <BSP_LCD_SetActiveLayer>:
  * @param  Instance    LCD Instance
  * @param  LayerIndex  LCD layer index
  * @retval BSP status
  */
int32_t BSP_LCD_SetActiveLayer(uint32_t Instance, uint32_t LayerIndex)
{
 800f2b0:	b480      	push	{r7}
 800f2b2:	b085      	sub	sp, #20
 800f2b4:	af00      	add	r7, sp, #0
 800f2b6:	6078      	str	r0, [r7, #4]
 800f2b8:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f2ba:	2300      	movs	r3, #0
 800f2bc:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f2be:	687b      	ldr	r3, [r7, #4]
 800f2c0:	2b00      	cmp	r3, #0
 800f2c2:	d003      	beq.n	800f2cc <BSP_LCD_SetActiveLayer+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f2c4:	f06f 0301 	mvn.w	r3, #1
 800f2c8:	60fb      	str	r3, [r7, #12]
 800f2ca:	e009      	b.n	800f2e0 <BSP_LCD_SetActiveLayer+0x30>
  }
  else
  {
    Lcd_Ctx[Instance].ActiveLayer = LayerIndex;
 800f2cc:	4908      	ldr	r1, [pc, #32]	@ (800f2f0 <BSP_LCD_SetActiveLayer+0x40>)
 800f2ce:	687a      	ldr	r2, [r7, #4]
 800f2d0:	4613      	mov	r3, r2
 800f2d2:	00db      	lsls	r3, r3, #3
 800f2d4:	1a9b      	subs	r3, r3, r2
 800f2d6:	009b      	lsls	r3, r3, #2
 800f2d8:	440b      	add	r3, r1
 800f2da:	3308      	adds	r3, #8
 800f2dc:	683a      	ldr	r2, [r7, #0]
 800f2de:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800f2e0:	68fb      	ldr	r3, [r7, #12]
}
 800f2e2:	4618      	mov	r0, r3
 800f2e4:	3714      	adds	r7, #20
 800f2e6:	46bd      	mov	sp, r7
 800f2e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f2ec:	4770      	bx	lr
 800f2ee:	bf00      	nop
 800f2f0:	24008734 	.word	0x24008734

0800f2f4 <BSP_LCD_GetPixelFormat>:
  * @param  Instance    LCD Instance
  * @param  PixelFormat Active LCD Pixel Format
  * @retval BSP status
  */
int32_t BSP_LCD_GetPixelFormat(uint32_t Instance, uint32_t *PixelFormat)
{
 800f2f4:	b480      	push	{r7}
 800f2f6:	b085      	sub	sp, #20
 800f2f8:	af00      	add	r7, sp, #0
 800f2fa:	6078      	str	r0, [r7, #4]
 800f2fc:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f2fe:	2300      	movs	r3, #0
 800f300:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f302:	687b      	ldr	r3, [r7, #4]
 800f304:	2b00      	cmp	r3, #0
 800f306:	d003      	beq.n	800f310 <BSP_LCD_GetPixelFormat+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f308:	f06f 0301 	mvn.w	r3, #1
 800f30c:	60fb      	str	r3, [r7, #12]
 800f30e:	e00a      	b.n	800f326 <BSP_LCD_GetPixelFormat+0x32>
  }
  else
  {
    /* Only RGB565 format is supported */
    *PixelFormat = Lcd_Ctx[Instance].PixelFormat;
 800f310:	4908      	ldr	r1, [pc, #32]	@ (800f334 <BSP_LCD_GetPixelFormat+0x40>)
 800f312:	687a      	ldr	r2, [r7, #4]
 800f314:	4613      	mov	r3, r2
 800f316:	00db      	lsls	r3, r3, #3
 800f318:	1a9b      	subs	r3, r3, r2
 800f31a:	009b      	lsls	r3, r3, #2
 800f31c:	440b      	add	r3, r1
 800f31e:	330c      	adds	r3, #12
 800f320:	681a      	ldr	r2, [r3, #0]
 800f322:	683b      	ldr	r3, [r7, #0]
 800f324:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800f326:	68fb      	ldr	r3, [r7, #12]
}
 800f328:	4618      	mov	r0, r3
 800f32a:	3714      	adds	r7, #20
 800f32c:	46bd      	mov	sp, r7
 800f32e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f332:	4770      	bx	lr
 800f334:	24008734 	.word	0x24008734

0800f338 <BSP_LCD_GetXSize>:
  * @param  Instance  LCD Instance
  * @param  XSize     LCD width
  * @retval BSP status
  */
int32_t BSP_LCD_GetXSize(uint32_t Instance, uint32_t *XSize)
{
 800f338:	b480      	push	{r7}
 800f33a:	b085      	sub	sp, #20
 800f33c:	af00      	add	r7, sp, #0
 800f33e:	6078      	str	r0, [r7, #4]
 800f340:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f342:	2300      	movs	r3, #0
 800f344:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f346:	687b      	ldr	r3, [r7, #4]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d003      	beq.n	800f354 <BSP_LCD_GetXSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f34c:	f06f 0301 	mvn.w	r3, #1
 800f350:	60fb      	str	r3, [r7, #12]
 800f352:	e00e      	b.n	800f372 <BSP_LCD_GetXSize+0x3a>
  }
  else if(Lcd_Drv->GetXSize != NULL)
 800f354:	4b0a      	ldr	r3, [pc, #40]	@ (800f380 <BSP_LCD_GetXSize+0x48>)
 800f356:	681b      	ldr	r3, [r3, #0]
 800f358:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d009      	beq.n	800f372 <BSP_LCD_GetXSize+0x3a>
  {
    *XSize = Lcd_Ctx[Instance].XSize;
 800f35e:	4909      	ldr	r1, [pc, #36]	@ (800f384 <BSP_LCD_GetXSize+0x4c>)
 800f360:	687a      	ldr	r2, [r7, #4]
 800f362:	4613      	mov	r3, r2
 800f364:	00db      	lsls	r3, r3, #3
 800f366:	1a9b      	subs	r3, r3, r2
 800f368:	009b      	lsls	r3, r3, #2
 800f36a:	440b      	add	r3, r1
 800f36c:	681a      	ldr	r2, [r3, #0]
 800f36e:	683b      	ldr	r3, [r7, #0]
 800f370:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800f372:	68fb      	ldr	r3, [r7, #12]
}
 800f374:	4618      	mov	r0, r3
 800f376:	3714      	adds	r7, #20
 800f378:	46bd      	mov	sp, r7
 800f37a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f37e:	4770      	bx	lr
 800f380:	24008600 	.word	0x24008600
 800f384:	24008734 	.word	0x24008734

0800f388 <BSP_LCD_GetYSize>:
  * @param  Instance  LCD Instance
  * @param  YSize     LCD Height
  * @retval BSP status
  */
int32_t BSP_LCD_GetYSize(uint32_t Instance, uint32_t *YSize)
{
 800f388:	b480      	push	{r7}
 800f38a:	b085      	sub	sp, #20
 800f38c:	af00      	add	r7, sp, #0
 800f38e:	6078      	str	r0, [r7, #4]
 800f390:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f392:	2300      	movs	r3, #0
 800f394:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f396:	687b      	ldr	r3, [r7, #4]
 800f398:	2b00      	cmp	r3, #0
 800f39a:	d003      	beq.n	800f3a4 <BSP_LCD_GetYSize+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f39c:	f06f 0301 	mvn.w	r3, #1
 800f3a0:	60fb      	str	r3, [r7, #12]
 800f3a2:	e00f      	b.n	800f3c4 <BSP_LCD_GetYSize+0x3c>
  }
  else if(Lcd_Drv->GetYSize != NULL)
 800f3a4:	4b0b      	ldr	r3, [pc, #44]	@ (800f3d4 <BSP_LCD_GetYSize+0x4c>)
 800f3a6:	681b      	ldr	r3, [r3, #0]
 800f3a8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800f3aa:	2b00      	cmp	r3, #0
 800f3ac:	d00a      	beq.n	800f3c4 <BSP_LCD_GetYSize+0x3c>
  {
    *YSize = Lcd_Ctx[Instance].YSize;
 800f3ae:	490a      	ldr	r1, [pc, #40]	@ (800f3d8 <BSP_LCD_GetYSize+0x50>)
 800f3b0:	687a      	ldr	r2, [r7, #4]
 800f3b2:	4613      	mov	r3, r2
 800f3b4:	00db      	lsls	r3, r3, #3
 800f3b6:	1a9b      	subs	r3, r3, r2
 800f3b8:	009b      	lsls	r3, r3, #2
 800f3ba:	440b      	add	r3, r1
 800f3bc:	3304      	adds	r3, #4
 800f3be:	681a      	ldr	r2, [r3, #0]
 800f3c0:	683b      	ldr	r3, [r7, #0]
 800f3c2:	601a      	str	r2, [r3, #0]
  }

  return ret;
 800f3c4:	68fb      	ldr	r3, [r7, #12]
}
 800f3c6:	4618      	mov	r0, r3
 800f3c8:	3714      	adds	r7, #20
 800f3ca:	46bd      	mov	sp, r7
 800f3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f3d0:	4770      	bx	lr
 800f3d2:	bf00      	nop
 800f3d4:	24008600 	.word	0x24008600
 800f3d8:	24008734 	.word	0x24008734

0800f3dc <BSP_LCD_DisplayOn>:
  * @brief  Switch On the display.
  * @param  Instance    LCD Instance
  * @retval BSP status
  */
int32_t BSP_LCD_DisplayOn(uint32_t Instance)
{
 800f3dc:	b580      	push	{r7, lr}
 800f3de:	b084      	sub	sp, #16
 800f3e0:	af00      	add	r7, sp, #0
 800f3e2:	6078      	str	r0, [r7, #4]
  int32_t ret;

  if(Instance >= LCD_INSTANCES_NBR)
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	2b00      	cmp	r3, #0
 800f3e8:	d003      	beq.n	800f3f2 <BSP_LCD_DisplayOn+0x16>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f3ea:	f06f 0301 	mvn.w	r3, #1
 800f3ee:	60fb      	str	r3, [r7, #12]
 800f3f0:	e00f      	b.n	800f412 <BSP_LCD_DisplayOn+0x36>
  }
  else
  {
    if(Lcd_Drv->DisplayOn(Lcd_CompObj) != BSP_ERROR_NONE)
 800f3f2:	4b0a      	ldr	r3, [pc, #40]	@ (800f41c <BSP_LCD_DisplayOn+0x40>)
 800f3f4:	681b      	ldr	r3, [r3, #0]
 800f3f6:	68db      	ldr	r3, [r3, #12]
 800f3f8:	4a09      	ldr	r2, [pc, #36]	@ (800f420 <BSP_LCD_DisplayOn+0x44>)
 800f3fa:	6812      	ldr	r2, [r2, #0]
 800f3fc:	4610      	mov	r0, r2
 800f3fe:	4798      	blx	r3
 800f400:	4603      	mov	r3, r0
 800f402:	2b00      	cmp	r3, #0
 800f404:	d003      	beq.n	800f40e <BSP_LCD_DisplayOn+0x32>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800f406:	f06f 0303 	mvn.w	r3, #3
 800f40a:	60fb      	str	r3, [r7, #12]
 800f40c:	e001      	b.n	800f412 <BSP_LCD_DisplayOn+0x36>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 800f40e:	2300      	movs	r3, #0
 800f410:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f412:	68fb      	ldr	r3, [r7, #12]
}
 800f414:	4618      	mov	r0, r3
 800f416:	3710      	adds	r7, #16
 800f418:	46bd      	mov	sp, r7
 800f41a:	bd80      	pop	{r7, pc}
 800f41c:	24008600 	.word	0x24008600
 800f420:	24008604 	.word	0x24008604

0800f424 <BSP_LCD_SetBrightness>:
  * @param  Instance    LCD Instance
  * @param  Brightness [00: Min (black), 100 Max]
  * @retval BSP status
  */
int32_t BSP_LCD_SetBrightness(uint32_t Instance, uint32_t Brightness)
{
 800f424:	b580      	push	{r7, lr}
 800f426:	b084      	sub	sp, #16
 800f428:	af00      	add	r7, sp, #0
 800f42a:	6078      	str	r0, [r7, #4]
 800f42c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f42e:	2300      	movs	r3, #0
 800f430:	60fb      	str	r3, [r7, #12]

  if(Instance >= LCD_INSTANCES_NBR)
 800f432:	687b      	ldr	r3, [r7, #4]
 800f434:	2b00      	cmp	r3, #0
 800f436:	d003      	beq.n	800f440 <BSP_LCD_SetBrightness+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800f438:	f06f 0301 	mvn.w	r3, #1
 800f43c:	60fb      	str	r3, [r7, #12]
 800f43e:	e00d      	b.n	800f45c <BSP_LCD_SetBrightness+0x38>
  }
  else
  {
    if(Lcd_Drv->SetBrightness(Lcd_CompObj, Brightness) != BSP_ERROR_NONE)
 800f440:	4b09      	ldr	r3, [pc, #36]	@ (800f468 <BSP_LCD_SetBrightness+0x44>)
 800f442:	681b      	ldr	r3, [r3, #0]
 800f444:	695b      	ldr	r3, [r3, #20]
 800f446:	4a09      	ldr	r2, [pc, #36]	@ (800f46c <BSP_LCD_SetBrightness+0x48>)
 800f448:	6812      	ldr	r2, [r2, #0]
 800f44a:	6839      	ldr	r1, [r7, #0]
 800f44c:	4610      	mov	r0, r2
 800f44e:	4798      	blx	r3
 800f450:	4603      	mov	r3, r0
 800f452:	2b00      	cmp	r3, #0
 800f454:	d002      	beq.n	800f45c <BSP_LCD_SetBrightness+0x38>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 800f456:	f06f 0303 	mvn.w	r3, #3
 800f45a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 800f45c:	68fb      	ldr	r3, [r7, #12]
}
 800f45e:	4618      	mov	r0, r3
 800f460:	3710      	adds	r7, #16
 800f462:	46bd      	mov	sp, r7
 800f464:	bd80      	pop	{r7, pc}
 800f466:	bf00      	nop
 800f468:	24008600 	.word	0x24008600
 800f46c:	24008604 	.word	0x24008604

0800f470 <BSP_LCD_DrawBitmap>:
  * @param  Ypos Bmp Y position in the LCD
  * @param  pBmp Pointer to Bmp picture address in the internal Flash.
  * @retval BSP status
  */
int32_t BSP_LCD_DrawBitmap(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pBmp)
{
 800f470:	b590      	push	{r4, r7, lr}
 800f472:	b08f      	sub	sp, #60	@ 0x3c
 800f474:	af02      	add	r7, sp, #8
 800f476:	60f8      	str	r0, [r7, #12]
 800f478:	60b9      	str	r1, [r7, #8]
 800f47a:	607a      	str	r2, [r7, #4]
 800f47c:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800f47e:	2300      	movs	r3, #0
 800f480:	61fb      	str	r3, [r7, #28]
  uint32_t Address;
  uint32_t input_color_mode;
  uint8_t *pbmp;

  /* Get bitmap data address offset */
  index = (uint32_t)pBmp[10] + ((uint32_t)pBmp[11] << 8) + ((uint32_t)pBmp[12] << 16)  + ((uint32_t)pBmp[13] << 24);
 800f482:	683b      	ldr	r3, [r7, #0]
 800f484:	330a      	adds	r3, #10
 800f486:	781b      	ldrb	r3, [r3, #0]
 800f488:	461a      	mov	r2, r3
 800f48a:	683b      	ldr	r3, [r7, #0]
 800f48c:	330b      	adds	r3, #11
 800f48e:	781b      	ldrb	r3, [r3, #0]
 800f490:	021b      	lsls	r3, r3, #8
 800f492:	441a      	add	r2, r3
 800f494:	683b      	ldr	r3, [r7, #0]
 800f496:	330c      	adds	r3, #12
 800f498:	781b      	ldrb	r3, [r3, #0]
 800f49a:	041b      	lsls	r3, r3, #16
 800f49c:	441a      	add	r2, r3
 800f49e:	683b      	ldr	r3, [r7, #0]
 800f4a0:	330d      	adds	r3, #13
 800f4a2:	781b      	ldrb	r3, [r3, #0]
 800f4a4:	061b      	lsls	r3, r3, #24
 800f4a6:	4413      	add	r3, r2
 800f4a8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Read bitmap width */
  width = (uint32_t)pBmp[18] + ((uint32_t)pBmp[19] << 8) + ((uint32_t)pBmp[20] << 16)  + ((uint32_t)pBmp[21] << 24);
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	3312      	adds	r3, #18
 800f4ae:	781b      	ldrb	r3, [r3, #0]
 800f4b0:	461a      	mov	r2, r3
 800f4b2:	683b      	ldr	r3, [r7, #0]
 800f4b4:	3313      	adds	r3, #19
 800f4b6:	781b      	ldrb	r3, [r3, #0]
 800f4b8:	021b      	lsls	r3, r3, #8
 800f4ba:	441a      	add	r2, r3
 800f4bc:	683b      	ldr	r3, [r7, #0]
 800f4be:	3314      	adds	r3, #20
 800f4c0:	781b      	ldrb	r3, [r3, #0]
 800f4c2:	041b      	lsls	r3, r3, #16
 800f4c4:	441a      	add	r2, r3
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	3315      	adds	r3, #21
 800f4ca:	781b      	ldrb	r3, [r3, #0]
 800f4cc:	061b      	lsls	r3, r3, #24
 800f4ce:	4413      	add	r3, r2
 800f4d0:	61bb      	str	r3, [r7, #24]

  /* Read bitmap height */
  height = (uint32_t)pBmp[22] + ((uint32_t)pBmp[23] << 8) + ((uint32_t)pBmp[24] << 16)  + ((uint32_t)pBmp[25] << 24);
 800f4d2:	683b      	ldr	r3, [r7, #0]
 800f4d4:	3316      	adds	r3, #22
 800f4d6:	781b      	ldrb	r3, [r3, #0]
 800f4d8:	461a      	mov	r2, r3
 800f4da:	683b      	ldr	r3, [r7, #0]
 800f4dc:	3317      	adds	r3, #23
 800f4de:	781b      	ldrb	r3, [r3, #0]
 800f4e0:	021b      	lsls	r3, r3, #8
 800f4e2:	441a      	add	r2, r3
 800f4e4:	683b      	ldr	r3, [r7, #0]
 800f4e6:	3318      	adds	r3, #24
 800f4e8:	781b      	ldrb	r3, [r3, #0]
 800f4ea:	041b      	lsls	r3, r3, #16
 800f4ec:	441a      	add	r2, r3
 800f4ee:	683b      	ldr	r3, [r7, #0]
 800f4f0:	3319      	adds	r3, #25
 800f4f2:	781b      	ldrb	r3, [r3, #0]
 800f4f4:	061b      	lsls	r3, r3, #24
 800f4f6:	4413      	add	r3, r2
 800f4f8:	617b      	str	r3, [r7, #20]

  /* Read bit/pixel */
  bit_pixel = (uint32_t)pBmp[28] + ((uint32_t)pBmp[29] << 8);
 800f4fa:	683b      	ldr	r3, [r7, #0]
 800f4fc:	331c      	adds	r3, #28
 800f4fe:	781b      	ldrb	r3, [r3, #0]
 800f500:	461a      	mov	r2, r3
 800f502:	683b      	ldr	r3, [r7, #0]
 800f504:	331d      	adds	r3, #29
 800f506:	781b      	ldrb	r3, [r3, #0]
 800f508:	021b      	lsls	r3, r3, #8
 800f50a:	4413      	add	r3, r2
 800f50c:	613b      	str	r3, [r7, #16]

  /* Set the address */
  Address = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (((Lcd_Ctx[Instance].XSize*Ypos) + Xpos)*Lcd_Ctx[Instance].BppFactor);
 800f50e:	493f      	ldr	r1, [pc, #252]	@ (800f60c <BSP_LCD_DrawBitmap+0x19c>)
 800f510:	68fa      	ldr	r2, [r7, #12]
 800f512:	4613      	mov	r3, r2
 800f514:	00db      	lsls	r3, r3, #3
 800f516:	1a9b      	subs	r3, r3, r2
 800f518:	009b      	lsls	r3, r3, #2
 800f51a:	440b      	add	r3, r1
 800f51c:	3308      	adds	r3, #8
 800f51e:	681b      	ldr	r3, [r3, #0]
 800f520:	4a3b      	ldr	r2, [pc, #236]	@ (800f610 <BSP_LCD_DrawBitmap+0x1a0>)
 800f522:	2134      	movs	r1, #52	@ 0x34
 800f524:	fb01 f303 	mul.w	r3, r1, r3
 800f528:	4413      	add	r3, r2
 800f52a:	335c      	adds	r3, #92	@ 0x5c
 800f52c:	6819      	ldr	r1, [r3, #0]
 800f52e:	4837      	ldr	r0, [pc, #220]	@ (800f60c <BSP_LCD_DrawBitmap+0x19c>)
 800f530:	68fa      	ldr	r2, [r7, #12]
 800f532:	4613      	mov	r3, r2
 800f534:	00db      	lsls	r3, r3, #3
 800f536:	1a9b      	subs	r3, r3, r2
 800f538:	009b      	lsls	r3, r3, #2
 800f53a:	4403      	add	r3, r0
 800f53c:	681b      	ldr	r3, [r3, #0]
 800f53e:	687a      	ldr	r2, [r7, #4]
 800f540:	fb03 f202 	mul.w	r2, r3, r2
 800f544:	68bb      	ldr	r3, [r7, #8]
 800f546:	18d0      	adds	r0, r2, r3
 800f548:	4c30      	ldr	r4, [pc, #192]	@ (800f60c <BSP_LCD_DrawBitmap+0x19c>)
 800f54a:	68fa      	ldr	r2, [r7, #12]
 800f54c:	4613      	mov	r3, r2
 800f54e:	00db      	lsls	r3, r3, #3
 800f550:	1a9b      	subs	r3, r3, r2
 800f552:	009b      	lsls	r3, r3, #2
 800f554:	4423      	add	r3, r4
 800f556:	3310      	adds	r3, #16
 800f558:	681b      	ldr	r3, [r3, #0]
 800f55a:	fb00 f303 	mul.w	r3, r0, r3
 800f55e:	440b      	add	r3, r1
 800f560:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Get the layer pixel format */
  if ((bit_pixel/8U) == 4U)
 800f562:	693b      	ldr	r3, [r7, #16]
 800f564:	3b20      	subs	r3, #32
 800f566:	2b07      	cmp	r3, #7
 800f568:	d802      	bhi.n	800f570 <BSP_LCD_DrawBitmap+0x100>
  {
    input_color_mode = DMA2D_INPUT_ARGB8888;
 800f56a:	2300      	movs	r3, #0
 800f56c:	627b      	str	r3, [r7, #36]	@ 0x24
 800f56e:	e008      	b.n	800f582 <BSP_LCD_DrawBitmap+0x112>
  }
  else if ((bit_pixel/8U) == 2U)
 800f570:	693b      	ldr	r3, [r7, #16]
 800f572:	3b10      	subs	r3, #16
 800f574:	2b07      	cmp	r3, #7
 800f576:	d802      	bhi.n	800f57e <BSP_LCD_DrawBitmap+0x10e>
  {
    input_color_mode = DMA2D_INPUT_RGB565;
 800f578:	2302      	movs	r3, #2
 800f57a:	627b      	str	r3, [r7, #36]	@ 0x24
 800f57c:	e001      	b.n	800f582 <BSP_LCD_DrawBitmap+0x112>
  }
  else
  {
    input_color_mode = DMA2D_INPUT_RGB888;
 800f57e:	2301      	movs	r3, #1
 800f580:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Bypass the bitmap header */
  pbmp = pBmp + (index + (width * (height - 1U) * (bit_pixel/8U)));
 800f582:	697b      	ldr	r3, [r7, #20]
 800f584:	3b01      	subs	r3, #1
 800f586:	69ba      	ldr	r2, [r7, #24]
 800f588:	fb02 f303 	mul.w	r3, r2, r3
 800f58c:	693a      	ldr	r2, [r7, #16]
 800f58e:	08d2      	lsrs	r2, r2, #3
 800f590:	fb03 f202 	mul.w	r2, r3, r2
 800f594:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f596:	4413      	add	r3, r2
 800f598:	683a      	ldr	r2, [r7, #0]
 800f59a:	4413      	add	r3, r2
 800f59c:	623b      	str	r3, [r7, #32]

  /* Convert picture to ARGB8888 pixel format */
  for(index=0; index < height; index++)
 800f59e:	2300      	movs	r3, #0
 800f5a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5a2:	e029      	b.n	800f5f8 <BSP_LCD_DrawBitmap+0x188>
  {
    /* Pixel format conversion */
    LL_ConvertLineToRGB(Instance, (uint32_t *)pbmp, (uint32_t *)Address, width, input_color_mode);
 800f5a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800f5a8:	9300      	str	r3, [sp, #0]
 800f5aa:	69bb      	ldr	r3, [r7, #24]
 800f5ac:	6a39      	ldr	r1, [r7, #32]
 800f5ae:	68f8      	ldr	r0, [r7, #12]
 800f5b0:	f000 fad6 	bl	800fb60 <LL_ConvertLineToRGB>

    /* Increment the source and destination buffers */
    Address+=  (Lcd_Ctx[Instance].XSize * Lcd_Ctx[Instance].BppFactor);
 800f5b4:	4915      	ldr	r1, [pc, #84]	@ (800f60c <BSP_LCD_DrawBitmap+0x19c>)
 800f5b6:	68fa      	ldr	r2, [r7, #12]
 800f5b8:	4613      	mov	r3, r2
 800f5ba:	00db      	lsls	r3, r3, #3
 800f5bc:	1a9b      	subs	r3, r3, r2
 800f5be:	009b      	lsls	r3, r3, #2
 800f5c0:	440b      	add	r3, r1
 800f5c2:	6819      	ldr	r1, [r3, #0]
 800f5c4:	4811      	ldr	r0, [pc, #68]	@ (800f60c <BSP_LCD_DrawBitmap+0x19c>)
 800f5c6:	68fa      	ldr	r2, [r7, #12]
 800f5c8:	4613      	mov	r3, r2
 800f5ca:	00db      	lsls	r3, r3, #3
 800f5cc:	1a9b      	subs	r3, r3, r2
 800f5ce:	009b      	lsls	r3, r3, #2
 800f5d0:	4403      	add	r3, r0
 800f5d2:	3310      	adds	r3, #16
 800f5d4:	681b      	ldr	r3, [r3, #0]
 800f5d6:	fb01 f303 	mul.w	r3, r1, r3
 800f5da:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f5dc:	4413      	add	r3, r2
 800f5de:	62bb      	str	r3, [r7, #40]	@ 0x28
    pbmp -= width*(bit_pixel/8U);
 800f5e0:	693b      	ldr	r3, [r7, #16]
 800f5e2:	08db      	lsrs	r3, r3, #3
 800f5e4:	69ba      	ldr	r2, [r7, #24]
 800f5e6:	fb02 f303 	mul.w	r3, r2, r3
 800f5ea:	425b      	negs	r3, r3
 800f5ec:	6a3a      	ldr	r2, [r7, #32]
 800f5ee:	4413      	add	r3, r2
 800f5f0:	623b      	str	r3, [r7, #32]
  for(index=0; index < height; index++)
 800f5f2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f5f4:	3301      	adds	r3, #1
 800f5f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800f5f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f5fa:	697b      	ldr	r3, [r7, #20]
 800f5fc:	429a      	cmp	r2, r3
 800f5fe:	d3d1      	bcc.n	800f5a4 <BSP_LCD_DrawBitmap+0x134>
  }

  return ret;
 800f600:	69fb      	ldr	r3, [r7, #28]
}
 800f602:	4618      	mov	r0, r3
 800f604:	3734      	adds	r7, #52	@ 0x34
 800f606:	46bd      	mov	sp, r7
 800f608:	bd90      	pop	{r4, r7, pc}
 800f60a:	bf00      	nop
 800f60c:	24008734 	.word	0x24008734
 800f610:	2400868c 	.word	0x2400868c

0800f614 <BSP_LCD_FillRGBRect>:
  * @param  Width Rectangle width.
  * @param  Height Rectangle Height.
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRGBRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 800f614:	b580      	push	{r7, lr}
 800f616:	b088      	sub	sp, #32
 800f618:	af00      	add	r7, sp, #0
 800f61a:	60f8      	str	r0, [r7, #12]
 800f61c:	60b9      	str	r1, [r7, #8]
 800f61e:	607a      	str	r2, [r7, #4]
 800f620:	603b      	str	r3, [r7, #0]
    }
    pData += Lcd_Ctx[Instance].BppFactor*Width;
  }
#else
  uint32_t color, j;
  for(i = 0; i < Height; i++)
 800f622:	2300      	movs	r3, #0
 800f624:	61fb      	str	r3, [r7, #28]
 800f626:	e035      	b.n	800f694 <BSP_LCD_FillRGBRect+0x80>
  {
    for(j = 0; j < Width; j++)
 800f628:	2300      	movs	r3, #0
 800f62a:	61bb      	str	r3, [r7, #24]
 800f62c:	e02b      	b.n	800f686 <BSP_LCD_FillRGBRect+0x72>
    {
      color = *pData | (*(pData + 1) << 8) | (*(pData + 2) << 16) | (*(pData + 3) << 24);
 800f62e:	683b      	ldr	r3, [r7, #0]
 800f630:	781b      	ldrb	r3, [r3, #0]
 800f632:	461a      	mov	r2, r3
 800f634:	683b      	ldr	r3, [r7, #0]
 800f636:	3301      	adds	r3, #1
 800f638:	781b      	ldrb	r3, [r3, #0]
 800f63a:	021b      	lsls	r3, r3, #8
 800f63c:	431a      	orrs	r2, r3
 800f63e:	683b      	ldr	r3, [r7, #0]
 800f640:	3302      	adds	r3, #2
 800f642:	781b      	ldrb	r3, [r3, #0]
 800f644:	041b      	lsls	r3, r3, #16
 800f646:	431a      	orrs	r2, r3
 800f648:	683b      	ldr	r3, [r7, #0]
 800f64a:	3303      	adds	r3, #3
 800f64c:	781b      	ldrb	r3, [r3, #0]
 800f64e:	061b      	lsls	r3, r3, #24
 800f650:	4313      	orrs	r3, r2
 800f652:	617b      	str	r3, [r7, #20]
      BSP_LCD_WritePixel(Instance, Xpos + j, Ypos + i, color);
 800f654:	68ba      	ldr	r2, [r7, #8]
 800f656:	69bb      	ldr	r3, [r7, #24]
 800f658:	18d1      	adds	r1, r2, r3
 800f65a:	687a      	ldr	r2, [r7, #4]
 800f65c:	69fb      	ldr	r3, [r7, #28]
 800f65e:	441a      	add	r2, r3
 800f660:	697b      	ldr	r3, [r7, #20]
 800f662:	68f8      	ldr	r0, [r7, #12]
 800f664:	f000 f99e 	bl	800f9a4 <BSP_LCD_WritePixel>
      pData += Lcd_Ctx[Instance].BppFactor;
 800f668:	490f      	ldr	r1, [pc, #60]	@ (800f6a8 <BSP_LCD_FillRGBRect+0x94>)
 800f66a:	68fa      	ldr	r2, [r7, #12]
 800f66c:	4613      	mov	r3, r2
 800f66e:	00db      	lsls	r3, r3, #3
 800f670:	1a9b      	subs	r3, r3, r2
 800f672:	009b      	lsls	r3, r3, #2
 800f674:	440b      	add	r3, r1
 800f676:	3310      	adds	r3, #16
 800f678:	681b      	ldr	r3, [r3, #0]
 800f67a:	683a      	ldr	r2, [r7, #0]
 800f67c:	4413      	add	r3, r2
 800f67e:	603b      	str	r3, [r7, #0]
    for(j = 0; j < Width; j++)
 800f680:	69bb      	ldr	r3, [r7, #24]
 800f682:	3301      	adds	r3, #1
 800f684:	61bb      	str	r3, [r7, #24]
 800f686:	69ba      	ldr	r2, [r7, #24]
 800f688:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f68a:	429a      	cmp	r2, r3
 800f68c:	d3cf      	bcc.n	800f62e <BSP_LCD_FillRGBRect+0x1a>
  for(i = 0; i < Height; i++)
 800f68e:	69fb      	ldr	r3, [r7, #28]
 800f690:	3301      	adds	r3, #1
 800f692:	61fb      	str	r3, [r7, #28]
 800f694:	69fa      	ldr	r2, [r7, #28]
 800f696:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800f698:	429a      	cmp	r2, r3
 800f69a:	d3c5      	bcc.n	800f628 <BSP_LCD_FillRGBRect+0x14>
    }
  }
#endif
  return BSP_ERROR_NONE;
 800f69c:	2300      	movs	r3, #0
}
 800f69e:	4618      	mov	r0, r3
 800f6a0:	3720      	adds	r7, #32
 800f6a2:	46bd      	mov	sp, r7
 800f6a4:	bd80      	pop	{r7, pc}
 800f6a6:	bf00      	nop
 800f6a8:	24008734 	.word	0x24008734

0800f6ac <BSP_LCD_DrawHLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawHLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800f6ac:	b590      	push	{r4, r7, lr}
 800f6ae:	b089      	sub	sp, #36	@ 0x24
 800f6b0:	af02      	add	r7, sp, #8
 800f6b2:	60f8      	str	r0, [r7, #12]
 800f6b4:	60b9      	str	r1, [r7, #8]
 800f6b6:	607a      	str	r2, [r7, #4]
 800f6b8:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (Lcd_Ctx[Instance].BppFactor*((Lcd_Ctx[Instance].XSize*Ypos) + Xpos));
 800f6ba:	4928      	ldr	r1, [pc, #160]	@ (800f75c <BSP_LCD_DrawHLine+0xb0>)
 800f6bc:	68fa      	ldr	r2, [r7, #12]
 800f6be:	4613      	mov	r3, r2
 800f6c0:	00db      	lsls	r3, r3, #3
 800f6c2:	1a9b      	subs	r3, r3, r2
 800f6c4:	009b      	lsls	r3, r3, #2
 800f6c6:	440b      	add	r3, r1
 800f6c8:	3308      	adds	r3, #8
 800f6ca:	681b      	ldr	r3, [r3, #0]
 800f6cc:	4a24      	ldr	r2, [pc, #144]	@ (800f760 <BSP_LCD_DrawHLine+0xb4>)
 800f6ce:	2134      	movs	r1, #52	@ 0x34
 800f6d0:	fb01 f303 	mul.w	r3, r1, r3
 800f6d4:	4413      	add	r3, r2
 800f6d6:	335c      	adds	r3, #92	@ 0x5c
 800f6d8:	6819      	ldr	r1, [r3, #0]
 800f6da:	4820      	ldr	r0, [pc, #128]	@ (800f75c <BSP_LCD_DrawHLine+0xb0>)
 800f6dc:	68fa      	ldr	r2, [r7, #12]
 800f6de:	4613      	mov	r3, r2
 800f6e0:	00db      	lsls	r3, r3, #3
 800f6e2:	1a9b      	subs	r3, r3, r2
 800f6e4:	009b      	lsls	r3, r3, #2
 800f6e6:	4403      	add	r3, r0
 800f6e8:	3310      	adds	r3, #16
 800f6ea:	6818      	ldr	r0, [r3, #0]
 800f6ec:	4c1b      	ldr	r4, [pc, #108]	@ (800f75c <BSP_LCD_DrawHLine+0xb0>)
 800f6ee:	68fa      	ldr	r2, [r7, #12]
 800f6f0:	4613      	mov	r3, r2
 800f6f2:	00db      	lsls	r3, r3, #3
 800f6f4:	1a9b      	subs	r3, r3, r2
 800f6f6:	009b      	lsls	r3, r3, #2
 800f6f8:	4423      	add	r3, r4
 800f6fa:	681b      	ldr	r3, [r3, #0]
 800f6fc:	687a      	ldr	r2, [r7, #4]
 800f6fe:	fb03 f202 	mul.w	r2, r3, r2
 800f702:	68bb      	ldr	r3, [r7, #8]
 800f704:	4413      	add	r3, r2
 800f706:	fb00 f303 	mul.w	r3, r0, r3
 800f70a:	440b      	add	r3, r1
 800f70c:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Xpos + Length) > Lcd_Ctx[Instance].XSize)
 800f70e:	68ba      	ldr	r2, [r7, #8]
 800f710:	683b      	ldr	r3, [r7, #0]
 800f712:	18d1      	adds	r1, r2, r3
 800f714:	4811      	ldr	r0, [pc, #68]	@ (800f75c <BSP_LCD_DrawHLine+0xb0>)
 800f716:	68fa      	ldr	r2, [r7, #12]
 800f718:	4613      	mov	r3, r2
 800f71a:	00db      	lsls	r3, r3, #3
 800f71c:	1a9b      	subs	r3, r3, r2
 800f71e:	009b      	lsls	r3, r3, #2
 800f720:	4403      	add	r3, r0
 800f722:	681b      	ldr	r3, [r3, #0]
 800f724:	4299      	cmp	r1, r3
 800f726:	d90a      	bls.n	800f73e <BSP_LCD_DrawHLine+0x92>
  {
    Length = Lcd_Ctx[Instance].XSize - Xpos;
 800f728:	490c      	ldr	r1, [pc, #48]	@ (800f75c <BSP_LCD_DrawHLine+0xb0>)
 800f72a:	68fa      	ldr	r2, [r7, #12]
 800f72c:	4613      	mov	r3, r2
 800f72e:	00db      	lsls	r3, r3, #3
 800f730:	1a9b      	subs	r3, r3, r2
 800f732:	009b      	lsls	r3, r3, #2
 800f734:	440b      	add	r3, r1
 800f736:	681a      	ldr	r2, [r3, #0]
 800f738:	68bb      	ldr	r3, [r7, #8]
 800f73a:	1ad3      	subs	r3, r2, r3
 800f73c:	603b      	str	r3, [r7, #0]
  }
  LL_FillBuffer(Instance, (uint32_t *)Xaddress, Length, 1, 0, Color);
 800f73e:	6979      	ldr	r1, [r7, #20]
 800f740:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f742:	9301      	str	r3, [sp, #4]
 800f744:	2300      	movs	r3, #0
 800f746:	9300      	str	r3, [sp, #0]
 800f748:	2301      	movs	r3, #1
 800f74a:	683a      	ldr	r2, [r7, #0]
 800f74c:	68f8      	ldr	r0, [r7, #12]
 800f74e:	f000 f993 	bl	800fa78 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800f752:	2300      	movs	r3, #0
}
 800f754:	4618      	mov	r0, r3
 800f756:	371c      	adds	r7, #28
 800f758:	46bd      	mov	sp, r7
 800f75a:	bd90      	pop	{r4, r7, pc}
 800f75c:	24008734 	.word	0x24008734
 800f760:	2400868c 	.word	0x2400868c

0800f764 <BSP_LCD_DrawVLine>:
  * @param  Length  Line length
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_DrawVLine(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 800f764:	b590      	push	{r4, r7, lr}
 800f766:	b089      	sub	sp, #36	@ 0x24
 800f768:	af02      	add	r7, sp, #8
 800f76a:	60f8      	str	r0, [r7, #12]
 800f76c:	60b9      	str	r1, [r7, #8]
 800f76e:	607a      	str	r2, [r7, #4]
 800f770:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the line address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800f772:	492d      	ldr	r1, [pc, #180]	@ (800f828 <BSP_LCD_DrawVLine+0xc4>)
 800f774:	68fa      	ldr	r2, [r7, #12]
 800f776:	4613      	mov	r3, r2
 800f778:	00db      	lsls	r3, r3, #3
 800f77a:	1a9b      	subs	r3, r3, r2
 800f77c:	009b      	lsls	r3, r3, #2
 800f77e:	440b      	add	r3, r1
 800f780:	3308      	adds	r3, #8
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4a29      	ldr	r2, [pc, #164]	@ (800f82c <BSP_LCD_DrawVLine+0xc8>)
 800f786:	2134      	movs	r1, #52	@ 0x34
 800f788:	fb01 f303 	mul.w	r3, r1, r3
 800f78c:	4413      	add	r3, r2
 800f78e:	335c      	adds	r3, #92	@ 0x5c
 800f790:	6819      	ldr	r1, [r3, #0]
 800f792:	4825      	ldr	r0, [pc, #148]	@ (800f828 <BSP_LCD_DrawVLine+0xc4>)
 800f794:	68fa      	ldr	r2, [r7, #12]
 800f796:	4613      	mov	r3, r2
 800f798:	00db      	lsls	r3, r3, #3
 800f79a:	1a9b      	subs	r3, r3, r2
 800f79c:	009b      	lsls	r3, r3, #2
 800f79e:	4403      	add	r3, r0
 800f7a0:	3310      	adds	r3, #16
 800f7a2:	6818      	ldr	r0, [r3, #0]
 800f7a4:	4c20      	ldr	r4, [pc, #128]	@ (800f828 <BSP_LCD_DrawVLine+0xc4>)
 800f7a6:	68fa      	ldr	r2, [r7, #12]
 800f7a8:	4613      	mov	r3, r2
 800f7aa:	00db      	lsls	r3, r3, #3
 800f7ac:	1a9b      	subs	r3, r3, r2
 800f7ae:	009b      	lsls	r3, r3, #2
 800f7b0:	4423      	add	r3, r4
 800f7b2:	681b      	ldr	r3, [r3, #0]
 800f7b4:	687a      	ldr	r2, [r7, #4]
 800f7b6:	fb03 f202 	mul.w	r2, r3, r2
 800f7ba:	68bb      	ldr	r3, [r7, #8]
 800f7bc:	4413      	add	r3, r2
 800f7be:	fb00 f303 	mul.w	r3, r0, r3
 800f7c2:	440b      	add	r3, r1
 800f7c4:	617b      	str	r3, [r7, #20]

  /* Write line */
  if((Ypos + Length) > Lcd_Ctx[Instance].YSize)
 800f7c6:	687a      	ldr	r2, [r7, #4]
 800f7c8:	683b      	ldr	r3, [r7, #0]
 800f7ca:	18d1      	adds	r1, r2, r3
 800f7cc:	4816      	ldr	r0, [pc, #88]	@ (800f828 <BSP_LCD_DrawVLine+0xc4>)
 800f7ce:	68fa      	ldr	r2, [r7, #12]
 800f7d0:	4613      	mov	r3, r2
 800f7d2:	00db      	lsls	r3, r3, #3
 800f7d4:	1a9b      	subs	r3, r3, r2
 800f7d6:	009b      	lsls	r3, r3, #2
 800f7d8:	4403      	add	r3, r0
 800f7da:	3304      	adds	r3, #4
 800f7dc:	681b      	ldr	r3, [r3, #0]
 800f7de:	4299      	cmp	r1, r3
 800f7e0:	d90b      	bls.n	800f7fa <BSP_LCD_DrawVLine+0x96>
  {
    Length = Lcd_Ctx[Instance].YSize - Ypos;
 800f7e2:	4911      	ldr	r1, [pc, #68]	@ (800f828 <BSP_LCD_DrawVLine+0xc4>)
 800f7e4:	68fa      	ldr	r2, [r7, #12]
 800f7e6:	4613      	mov	r3, r2
 800f7e8:	00db      	lsls	r3, r3, #3
 800f7ea:	1a9b      	subs	r3, r3, r2
 800f7ec:	009b      	lsls	r3, r3, #2
 800f7ee:	440b      	add	r3, r1
 800f7f0:	3304      	adds	r3, #4
 800f7f2:	681a      	ldr	r2, [r3, #0]
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	1ad3      	subs	r3, r2, r3
 800f7f8:	603b      	str	r3, [r7, #0]
  }
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, 1, Length, (Lcd_Ctx[Instance].XSize - 1U), Color);
 800f7fa:	6979      	ldr	r1, [r7, #20]
 800f7fc:	480a      	ldr	r0, [pc, #40]	@ (800f828 <BSP_LCD_DrawVLine+0xc4>)
 800f7fe:	68fa      	ldr	r2, [r7, #12]
 800f800:	4613      	mov	r3, r2
 800f802:	00db      	lsls	r3, r3, #3
 800f804:	1a9b      	subs	r3, r3, r2
 800f806:	009b      	lsls	r3, r3, #2
 800f808:	4403      	add	r3, r0
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	3b01      	subs	r3, #1
 800f80e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f810:	9201      	str	r2, [sp, #4]
 800f812:	9300      	str	r3, [sp, #0]
 800f814:	683b      	ldr	r3, [r7, #0]
 800f816:	2201      	movs	r2, #1
 800f818:	68f8      	ldr	r0, [r7, #12]
 800f81a:	f000 f92d 	bl	800fa78 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800f81e:	2300      	movs	r3, #0
}
 800f820:	4618      	mov	r0, r3
 800f822:	371c      	adds	r7, #28
 800f824:	46bd      	mov	sp, r7
 800f826:	bd90      	pop	{r4, r7, pc}
 800f828:	24008734 	.word	0x24008734
 800f82c:	2400868c 	.word	0x2400868c

0800f830 <BSP_LCD_FillRect>:
  * @param  Height Rectangle height
  * @param  Color Pixel color
  * @retval BSP status.
  */
int32_t BSP_LCD_FillRect(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 800f830:	b590      	push	{r4, r7, lr}
 800f832:	b089      	sub	sp, #36	@ 0x24
 800f834:	af02      	add	r7, sp, #8
 800f836:	60f8      	str	r0, [r7, #12]
 800f838:	60b9      	str	r1, [r7, #8]
 800f83a:	607a      	str	r2, [r7, #4]
 800f83c:	603b      	str	r3, [r7, #0]
  uint32_t  Xaddress;

  /* Get the rectangle start address */
  Xaddress = (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress) + (Lcd_Ctx[Instance].BppFactor*(Lcd_Ctx[Instance].XSize*Ypos + Xpos));
 800f83e:	4921      	ldr	r1, [pc, #132]	@ (800f8c4 <BSP_LCD_FillRect+0x94>)
 800f840:	68fa      	ldr	r2, [r7, #12]
 800f842:	4613      	mov	r3, r2
 800f844:	00db      	lsls	r3, r3, #3
 800f846:	1a9b      	subs	r3, r3, r2
 800f848:	009b      	lsls	r3, r3, #2
 800f84a:	440b      	add	r3, r1
 800f84c:	3308      	adds	r3, #8
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	4a1d      	ldr	r2, [pc, #116]	@ (800f8c8 <BSP_LCD_FillRect+0x98>)
 800f852:	2134      	movs	r1, #52	@ 0x34
 800f854:	fb01 f303 	mul.w	r3, r1, r3
 800f858:	4413      	add	r3, r2
 800f85a:	335c      	adds	r3, #92	@ 0x5c
 800f85c:	6819      	ldr	r1, [r3, #0]
 800f85e:	4819      	ldr	r0, [pc, #100]	@ (800f8c4 <BSP_LCD_FillRect+0x94>)
 800f860:	68fa      	ldr	r2, [r7, #12]
 800f862:	4613      	mov	r3, r2
 800f864:	00db      	lsls	r3, r3, #3
 800f866:	1a9b      	subs	r3, r3, r2
 800f868:	009b      	lsls	r3, r3, #2
 800f86a:	4403      	add	r3, r0
 800f86c:	3310      	adds	r3, #16
 800f86e:	6818      	ldr	r0, [r3, #0]
 800f870:	4c14      	ldr	r4, [pc, #80]	@ (800f8c4 <BSP_LCD_FillRect+0x94>)
 800f872:	68fa      	ldr	r2, [r7, #12]
 800f874:	4613      	mov	r3, r2
 800f876:	00db      	lsls	r3, r3, #3
 800f878:	1a9b      	subs	r3, r3, r2
 800f87a:	009b      	lsls	r3, r3, #2
 800f87c:	4423      	add	r3, r4
 800f87e:	681b      	ldr	r3, [r3, #0]
 800f880:	687a      	ldr	r2, [r7, #4]
 800f882:	fb03 f202 	mul.w	r2, r3, r2
 800f886:	68bb      	ldr	r3, [r7, #8]
 800f888:	4413      	add	r3, r2
 800f88a:	fb00 f303 	mul.w	r3, r0, r3
 800f88e:	440b      	add	r3, r1
 800f890:	617b      	str	r3, [r7, #20]

  /* Fill the rectangle */
 LL_FillBuffer(Instance, (uint32_t *)Xaddress, Width, Height, (Lcd_Ctx[Instance].XSize - Width), Color);
 800f892:	6979      	ldr	r1, [r7, #20]
 800f894:	480b      	ldr	r0, [pc, #44]	@ (800f8c4 <BSP_LCD_FillRect+0x94>)
 800f896:	68fa      	ldr	r2, [r7, #12]
 800f898:	4613      	mov	r3, r2
 800f89a:	00db      	lsls	r3, r3, #3
 800f89c:	1a9b      	subs	r3, r3, r2
 800f89e:	009b      	lsls	r3, r3, #2
 800f8a0:	4403      	add	r3, r0
 800f8a2:	681a      	ldr	r2, [r3, #0]
 800f8a4:	683b      	ldr	r3, [r7, #0]
 800f8a6:	1ad3      	subs	r3, r2, r3
 800f8a8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800f8aa:	9201      	str	r2, [sp, #4]
 800f8ac:	9300      	str	r3, [sp, #0]
 800f8ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f8b0:	683a      	ldr	r2, [r7, #0]
 800f8b2:	68f8      	ldr	r0, [r7, #12]
 800f8b4:	f000 f8e0 	bl	800fa78 <LL_FillBuffer>

  return BSP_ERROR_NONE;
 800f8b8:	2300      	movs	r3, #0
}
 800f8ba:	4618      	mov	r0, r3
 800f8bc:	371c      	adds	r7, #28
 800f8be:	46bd      	mov	sp, r7
 800f8c0:	bd90      	pop	{r4, r7, pc}
 800f8c2:	bf00      	nop
 800f8c4:	24008734 	.word	0x24008734
 800f8c8:	2400868c 	.word	0x2400868c

0800f8cc <BSP_LCD_ReadPixel>:
  * @param  Ypos Y position
  * @param  Color RGB pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_ReadPixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t *Color)
{
 800f8cc:	b480      	push	{r7}
 800f8ce:	b085      	sub	sp, #20
 800f8d0:	af00      	add	r7, sp, #0
 800f8d2:	60f8      	str	r0, [r7, #12]
 800f8d4:	60b9      	str	r1, [r7, #8]
 800f8d6:	607a      	str	r2, [r7, #4]
 800f8d8:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f8da:	4930      	ldr	r1, [pc, #192]	@ (800f99c <BSP_LCD_ReadPixel+0xd0>)
 800f8dc:	68fa      	ldr	r2, [r7, #12]
 800f8de:	4613      	mov	r3, r2
 800f8e0:	00db      	lsls	r3, r3, #3
 800f8e2:	1a9b      	subs	r3, r3, r2
 800f8e4:	009b      	lsls	r3, r3, #2
 800f8e6:	440b      	add	r3, r1
 800f8e8:	3308      	adds	r3, #8
 800f8ea:	681b      	ldr	r3, [r3, #0]
 800f8ec:	4a2c      	ldr	r2, [pc, #176]	@ (800f9a0 <BSP_LCD_ReadPixel+0xd4>)
 800f8ee:	2134      	movs	r1, #52	@ 0x34
 800f8f0:	fb01 f303 	mul.w	r3, r1, r3
 800f8f4:	4413      	add	r3, r2
 800f8f6:	3348      	adds	r3, #72	@ 0x48
 800f8f8:	681b      	ldr	r3, [r3, #0]
 800f8fa:	2b00      	cmp	r3, #0
 800f8fc:	d122      	bne.n	800f944 <BSP_LCD_ReadPixel+0x78>
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800f8fe:	4927      	ldr	r1, [pc, #156]	@ (800f99c <BSP_LCD_ReadPixel+0xd0>)
 800f900:	68fa      	ldr	r2, [r7, #12]
 800f902:	4613      	mov	r3, r2
 800f904:	00db      	lsls	r3, r3, #3
 800f906:	1a9b      	subs	r3, r3, r2
 800f908:	009b      	lsls	r3, r3, #2
 800f90a:	440b      	add	r3, r1
 800f90c:	3308      	adds	r3, #8
 800f90e:	681b      	ldr	r3, [r3, #0]
 800f910:	4a23      	ldr	r2, [pc, #140]	@ (800f9a0 <BSP_LCD_ReadPixel+0xd4>)
 800f912:	2134      	movs	r1, #52	@ 0x34
 800f914:	fb01 f303 	mul.w	r3, r1, r3
 800f918:	4413      	add	r3, r2
 800f91a:	335c      	adds	r3, #92	@ 0x5c
 800f91c:	6819      	ldr	r1, [r3, #0]
 800f91e:	481f      	ldr	r0, [pc, #124]	@ (800f99c <BSP_LCD_ReadPixel+0xd0>)
 800f920:	68fa      	ldr	r2, [r7, #12]
 800f922:	4613      	mov	r3, r2
 800f924:	00db      	lsls	r3, r3, #3
 800f926:	1a9b      	subs	r3, r3, r2
 800f928:	009b      	lsls	r3, r3, #2
 800f92a:	4403      	add	r3, r0
 800f92c:	681b      	ldr	r3, [r3, #0]
 800f92e:	687a      	ldr	r2, [r7, #4]
 800f930:	fb03 f202 	mul.w	r2, r3, r2
 800f934:	68bb      	ldr	r3, [r7, #8]
 800f936:	4413      	add	r3, r2
 800f938:	009b      	lsls	r3, r3, #2
 800f93a:	440b      	add	r3, r1
 800f93c:	681a      	ldr	r2, [r3, #0]
 800f93e:	683b      	ldr	r3, [r7, #0]
 800f940:	601a      	str	r2, [r3, #0]
 800f942:	e023      	b.n	800f98c <BSP_LCD_ReadPixel+0xc0>
  }
  else /* if((hlcd_ltdc.LayerCfg[layer].PixelFormat == LTDC_PIXEL_FORMAT_RGB565) */
  {
    /* Read data value from SDRAM memory */
    *Color = *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos)));
 800f944:	4915      	ldr	r1, [pc, #84]	@ (800f99c <BSP_LCD_ReadPixel+0xd0>)
 800f946:	68fa      	ldr	r2, [r7, #12]
 800f948:	4613      	mov	r3, r2
 800f94a:	00db      	lsls	r3, r3, #3
 800f94c:	1a9b      	subs	r3, r3, r2
 800f94e:	009b      	lsls	r3, r3, #2
 800f950:	440b      	add	r3, r1
 800f952:	3308      	adds	r3, #8
 800f954:	681b      	ldr	r3, [r3, #0]
 800f956:	4a12      	ldr	r2, [pc, #72]	@ (800f9a0 <BSP_LCD_ReadPixel+0xd4>)
 800f958:	2134      	movs	r1, #52	@ 0x34
 800f95a:	fb01 f303 	mul.w	r3, r1, r3
 800f95e:	4413      	add	r3, r2
 800f960:	335c      	adds	r3, #92	@ 0x5c
 800f962:	6819      	ldr	r1, [r3, #0]
 800f964:	480d      	ldr	r0, [pc, #52]	@ (800f99c <BSP_LCD_ReadPixel+0xd0>)
 800f966:	68fa      	ldr	r2, [r7, #12]
 800f968:	4613      	mov	r3, r2
 800f96a:	00db      	lsls	r3, r3, #3
 800f96c:	1a9b      	subs	r3, r3, r2
 800f96e:	009b      	lsls	r3, r3, #2
 800f970:	4403      	add	r3, r0
 800f972:	681b      	ldr	r3, [r3, #0]
 800f974:	687a      	ldr	r2, [r7, #4]
 800f976:	fb03 f202 	mul.w	r2, r3, r2
 800f97a:	68bb      	ldr	r3, [r7, #8]
 800f97c:	4413      	add	r3, r2
 800f97e:	005b      	lsls	r3, r3, #1
 800f980:	440b      	add	r3, r1
 800f982:	881b      	ldrh	r3, [r3, #0]
 800f984:	b29b      	uxth	r3, r3
 800f986:	461a      	mov	r2, r3
 800f988:	683b      	ldr	r3, [r7, #0]
 800f98a:	601a      	str	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800f98c:	2300      	movs	r3, #0
}
 800f98e:	4618      	mov	r0, r3
 800f990:	3714      	adds	r7, #20
 800f992:	46bd      	mov	sp, r7
 800f994:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f998:	4770      	bx	lr
 800f99a:	bf00      	nop
 800f99c:	24008734 	.word	0x24008734
 800f9a0:	2400868c 	.word	0x2400868c

0800f9a4 <BSP_LCD_WritePixel>:
  * @param  Ypos Y position
  * @param  Color Pixel color
  * @retval BSP status
  */
int32_t BSP_LCD_WritePixel(uint32_t Instance, uint32_t Xpos, uint32_t Ypos, uint32_t Color)
{
 800f9a4:	b480      	push	{r7}
 800f9a6:	b085      	sub	sp, #20
 800f9a8:	af00      	add	r7, sp, #0
 800f9aa:	60f8      	str	r0, [r7, #12]
 800f9ac:	60b9      	str	r1, [r7, #8]
 800f9ae:	607a      	str	r2, [r7, #4]
 800f9b0:	603b      	str	r3, [r7, #0]
  if(hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 800f9b2:	492f      	ldr	r1, [pc, #188]	@ (800fa70 <BSP_LCD_WritePixel+0xcc>)
 800f9b4:	68fa      	ldr	r2, [r7, #12]
 800f9b6:	4613      	mov	r3, r2
 800f9b8:	00db      	lsls	r3, r3, #3
 800f9ba:	1a9b      	subs	r3, r3, r2
 800f9bc:	009b      	lsls	r3, r3, #2
 800f9be:	440b      	add	r3, r1
 800f9c0:	3308      	adds	r3, #8
 800f9c2:	681b      	ldr	r3, [r3, #0]
 800f9c4:	4a2b      	ldr	r2, [pc, #172]	@ (800fa74 <BSP_LCD_WritePixel+0xd0>)
 800f9c6:	2134      	movs	r1, #52	@ 0x34
 800f9c8:	fb01 f303 	mul.w	r3, r1, r3
 800f9cc:	4413      	add	r3, r2
 800f9ce:	3348      	adds	r3, #72	@ 0x48
 800f9d0:	681b      	ldr	r3, [r3, #0]
 800f9d2:	2b00      	cmp	r3, #0
 800f9d4:	d122      	bne.n	800fa1c <BSP_LCD_WritePixel+0x78>
  {
    /* Write data value to SDRAM memory */
    *(__IO uint32_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (4U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800f9d6:	4926      	ldr	r1, [pc, #152]	@ (800fa70 <BSP_LCD_WritePixel+0xcc>)
 800f9d8:	68fa      	ldr	r2, [r7, #12]
 800f9da:	4613      	mov	r3, r2
 800f9dc:	00db      	lsls	r3, r3, #3
 800f9de:	1a9b      	subs	r3, r3, r2
 800f9e0:	009b      	lsls	r3, r3, #2
 800f9e2:	440b      	add	r3, r1
 800f9e4:	3308      	adds	r3, #8
 800f9e6:	681b      	ldr	r3, [r3, #0]
 800f9e8:	4a22      	ldr	r2, [pc, #136]	@ (800fa74 <BSP_LCD_WritePixel+0xd0>)
 800f9ea:	2134      	movs	r1, #52	@ 0x34
 800f9ec:	fb01 f303 	mul.w	r3, r1, r3
 800f9f0:	4413      	add	r3, r2
 800f9f2:	335c      	adds	r3, #92	@ 0x5c
 800f9f4:	6819      	ldr	r1, [r3, #0]
 800f9f6:	481e      	ldr	r0, [pc, #120]	@ (800fa70 <BSP_LCD_WritePixel+0xcc>)
 800f9f8:	68fa      	ldr	r2, [r7, #12]
 800f9fa:	4613      	mov	r3, r2
 800f9fc:	00db      	lsls	r3, r3, #3
 800f9fe:	1a9b      	subs	r3, r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	4403      	add	r3, r0
 800fa04:	681b      	ldr	r3, [r3, #0]
 800fa06:	687a      	ldr	r2, [r7, #4]
 800fa08:	fb03 f202 	mul.w	r2, r3, r2
 800fa0c:	68bb      	ldr	r3, [r7, #8]
 800fa0e:	4413      	add	r3, r2
 800fa10:	009b      	lsls	r3, r3, #2
 800fa12:	440b      	add	r3, r1
 800fa14:	461a      	mov	r2, r3
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	6013      	str	r3, [r2, #0]
 800fa1a:	e021      	b.n	800fa60 <BSP_LCD_WritePixel+0xbc>
  }
  else
  {
    /* Write data value to SDRAM memory */
    *(__IO uint16_t*) (hlcd_ltdc.LayerCfg[Lcd_Ctx[Instance].ActiveLayer].FBStartAdress + (2U*(Ypos*Lcd_Ctx[Instance].XSize + Xpos))) = Color;
 800fa1c:	4914      	ldr	r1, [pc, #80]	@ (800fa70 <BSP_LCD_WritePixel+0xcc>)
 800fa1e:	68fa      	ldr	r2, [r7, #12]
 800fa20:	4613      	mov	r3, r2
 800fa22:	00db      	lsls	r3, r3, #3
 800fa24:	1a9b      	subs	r3, r3, r2
 800fa26:	009b      	lsls	r3, r3, #2
 800fa28:	440b      	add	r3, r1
 800fa2a:	3308      	adds	r3, #8
 800fa2c:	681b      	ldr	r3, [r3, #0]
 800fa2e:	4a11      	ldr	r2, [pc, #68]	@ (800fa74 <BSP_LCD_WritePixel+0xd0>)
 800fa30:	2134      	movs	r1, #52	@ 0x34
 800fa32:	fb01 f303 	mul.w	r3, r1, r3
 800fa36:	4413      	add	r3, r2
 800fa38:	335c      	adds	r3, #92	@ 0x5c
 800fa3a:	6819      	ldr	r1, [r3, #0]
 800fa3c:	480c      	ldr	r0, [pc, #48]	@ (800fa70 <BSP_LCD_WritePixel+0xcc>)
 800fa3e:	68fa      	ldr	r2, [r7, #12]
 800fa40:	4613      	mov	r3, r2
 800fa42:	00db      	lsls	r3, r3, #3
 800fa44:	1a9b      	subs	r3, r3, r2
 800fa46:	009b      	lsls	r3, r3, #2
 800fa48:	4403      	add	r3, r0
 800fa4a:	681b      	ldr	r3, [r3, #0]
 800fa4c:	687a      	ldr	r2, [r7, #4]
 800fa4e:	fb03 f202 	mul.w	r2, r3, r2
 800fa52:	68bb      	ldr	r3, [r7, #8]
 800fa54:	4413      	add	r3, r2
 800fa56:	005b      	lsls	r3, r3, #1
 800fa58:	440b      	add	r3, r1
 800fa5a:	683a      	ldr	r2, [r7, #0]
 800fa5c:	b292      	uxth	r2, r2
 800fa5e:	801a      	strh	r2, [r3, #0]
  }

  return BSP_ERROR_NONE;
 800fa60:	2300      	movs	r3, #0
}
 800fa62:	4618      	mov	r0, r3
 800fa64:	3714      	adds	r7, #20
 800fa66:	46bd      	mov	sp, r7
 800fa68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fa6c:	4770      	bx	lr
 800fa6e:	bf00      	nop
 800fa70:	24008734 	.word	0x24008734
 800fa74:	2400868c 	.word	0x2400868c

0800fa78 <LL_FillBuffer>:
  * @param  ySize Buffer height
  * @param  OffLine Offset
  * @param  Color Color index
  */
static void LL_FillBuffer(uint32_t Instance, uint32_t *pDst, uint32_t xSize, uint32_t ySize, uint32_t OffLine, uint32_t Color)
{
 800fa78:	b580      	push	{r7, lr}
 800fa7a:	b088      	sub	sp, #32
 800fa7c:	af02      	add	r7, sp, #8
 800fa7e:	60f8      	str	r0, [r7, #12]
 800fa80:	60b9      	str	r1, [r7, #8]
 800fa82:	607a      	str	r2, [r7, #4]
 800fa84:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode, input_color = Color;
 800fa86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fa88:	613b      	str	r3, [r7, #16]

  switch(Lcd_Ctx[Instance].PixelFormat)
 800fa8a:	4932      	ldr	r1, [pc, #200]	@ (800fb54 <LL_FillBuffer+0xdc>)
 800fa8c:	68fa      	ldr	r2, [r7, #12]
 800fa8e:	4613      	mov	r3, r2
 800fa90:	00db      	lsls	r3, r3, #3
 800fa92:	1a9b      	subs	r3, r3, r2
 800fa94:	009b      	lsls	r3, r3, #2
 800fa96:	440b      	add	r3, r1
 800fa98:	330c      	adds	r3, #12
 800fa9a:	681b      	ldr	r3, [r3, #0]
 800fa9c:	2b02      	cmp	r3, #2
 800fa9e:	d129      	bne.n	800faf4 <LL_FillBuffer+0x7c>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800faa0:	2302      	movs	r3, #2
 800faa2:	617b      	str	r3, [r7, #20]
    input_color = CONVERTRGB5652ARGB8888(Color);
 800faa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800faa6:	0adb      	lsrs	r3, r3, #11
 800faa8:	f003 021f 	and.w	r2, r3, #31
 800faac:	4613      	mov	r3, r2
 800faae:	011b      	lsls	r3, r3, #4
 800fab0:	4413      	add	r3, r2
 800fab2:	015a      	lsls	r2, r3, #5
 800fab4:	1ad3      	subs	r3, r2, r3
 800fab6:	3317      	adds	r3, #23
 800fab8:	099b      	lsrs	r3, r3, #6
 800faba:	0419      	lsls	r1, r3, #16
 800fabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fabe:	095b      	lsrs	r3, r3, #5
 800fac0:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800fac4:	4613      	mov	r3, r2
 800fac6:	01db      	lsls	r3, r3, #7
 800fac8:	4413      	add	r3, r2
 800faca:	005b      	lsls	r3, r3, #1
 800facc:	4413      	add	r3, r2
 800face:	3321      	adds	r3, #33	@ 0x21
 800fad0:	099b      	lsrs	r3, r3, #6
 800fad2:	021b      	lsls	r3, r3, #8
 800fad4:	4319      	orrs	r1, r3
 800fad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800fad8:	f003 021f 	and.w	r2, r3, #31
 800fadc:	4613      	mov	r3, r2
 800fade:	011b      	lsls	r3, r3, #4
 800fae0:	4413      	add	r3, r2
 800fae2:	015a      	lsls	r2, r3, #5
 800fae4:	1ad3      	subs	r3, r2, r3
 800fae6:	3317      	adds	r3, #23
 800fae8:	099b      	lsrs	r3, r3, #6
 800faea:	430b      	orrs	r3, r1
 800faec:	f043 437f 	orr.w	r3, r3, #4278190080	@ 0xff000000
 800faf0:	613b      	str	r3, [r7, #16]
    break;
 800faf2:	e002      	b.n	800fafa <LL_FillBuffer+0x82>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800faf4:	2300      	movs	r3, #0
 800faf6:	617b      	str	r3, [r7, #20]
    break;
 800faf8:	bf00      	nop
  }

  /* Register to memory mode with ARGB8888 as color Mode */
  hlcd_dma2d.Init.Mode         = DMA2D_R2M;
 800fafa:	4b17      	ldr	r3, [pc, #92]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fafc:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 800fb00:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800fb02:	4a15      	ldr	r2, [pc, #84]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb04:	697b      	ldr	r3, [r7, #20]
 800fb06:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = OffLine;
 800fb08:	4a13      	ldr	r2, [pc, #76]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb0a:	6a3b      	ldr	r3, [r7, #32]
 800fb0c:	60d3      	str	r3, [r2, #12]

  hlcd_dma2d.Instance = DMA2D;
 800fb0e:	4b12      	ldr	r3, [pc, #72]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb10:	4a12      	ldr	r2, [pc, #72]	@ (800fb5c <LL_FillBuffer+0xe4>)
 800fb12:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800fb14:	4810      	ldr	r0, [pc, #64]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb16:	f006 f94d 	bl	8015db4 <HAL_DMA2D_Init>
 800fb1a:	4603      	mov	r3, r0
 800fb1c:	2b00      	cmp	r3, #0
 800fb1e:	d115      	bne.n	800fb4c <LL_FillBuffer+0xd4>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800fb20:	2101      	movs	r1, #1
 800fb22:	480d      	ldr	r0, [pc, #52]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb24:	f006 fac8 	bl	80160b8 <HAL_DMA2D_ConfigLayer>
 800fb28:	4603      	mov	r3, r0
 800fb2a:	2b00      	cmp	r3, #0
 800fb2c:	d10e      	bne.n	800fb4c <LL_FillBuffer+0xd4>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, input_color, (uint32_t)pDst, xSize, ySize) == HAL_OK)
 800fb2e:	68ba      	ldr	r2, [r7, #8]
 800fb30:	683b      	ldr	r3, [r7, #0]
 800fb32:	9300      	str	r3, [sp, #0]
 800fb34:	687b      	ldr	r3, [r7, #4]
 800fb36:	6939      	ldr	r1, [r7, #16]
 800fb38:	4807      	ldr	r0, [pc, #28]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb3a:	f006 f9a9 	bl	8015e90 <HAL_DMA2D_Start>
 800fb3e:	4603      	mov	r3, r0
 800fb40:	2b00      	cmp	r3, #0
 800fb42:	d103      	bne.n	800fb4c <LL_FillBuffer+0xd4>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 25);
 800fb44:	2119      	movs	r1, #25
 800fb46:	4804      	ldr	r0, [pc, #16]	@ (800fb58 <LL_FillBuffer+0xe0>)
 800fb48:	f006 f9cd 	bl	8015ee6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800fb4c:	bf00      	nop
 800fb4e:	3718      	adds	r7, #24
 800fb50:	46bd      	mov	sp, r7
 800fb52:	bd80      	pop	{r7, pc}
 800fb54:	24008734 	.word	0x24008734
 800fb58:	24008624 	.word	0x24008624
 800fb5c:	52001000 	.word	0x52001000

0800fb60 <LL_ConvertLineToRGB>:
  * @param  pDst Output color
  * @param  xSize Buffer width
  * @param  ColorMode Input color mode
  */
static void LL_ConvertLineToRGB(uint32_t Instance, uint32_t *pSrc, uint32_t *pDst, uint32_t xSize, uint32_t ColorMode)
{
 800fb60:	b580      	push	{r7, lr}
 800fb62:	b088      	sub	sp, #32
 800fb64:	af02      	add	r7, sp, #8
 800fb66:	60f8      	str	r0, [r7, #12]
 800fb68:	60b9      	str	r1, [r7, #8]
 800fb6a:	607a      	str	r2, [r7, #4]
 800fb6c:	603b      	str	r3, [r7, #0]
  uint32_t output_color_mode;

  switch(Lcd_Ctx[Instance].PixelFormat)
 800fb6e:	4925      	ldr	r1, [pc, #148]	@ (800fc04 <LL_ConvertLineToRGB+0xa4>)
 800fb70:	68fa      	ldr	r2, [r7, #12]
 800fb72:	4613      	mov	r3, r2
 800fb74:	00db      	lsls	r3, r3, #3
 800fb76:	1a9b      	subs	r3, r3, r2
 800fb78:	009b      	lsls	r3, r3, #2
 800fb7a:	440b      	add	r3, r1
 800fb7c:	330c      	adds	r3, #12
 800fb7e:	681b      	ldr	r3, [r3, #0]
 800fb80:	2b02      	cmp	r3, #2
 800fb82:	d102      	bne.n	800fb8a <LL_ConvertLineToRGB+0x2a>
  {
  case LCD_PIXEL_FORMAT_RGB565:
    output_color_mode = DMA2D_OUTPUT_RGB565; /* RGB565 */
 800fb84:	2302      	movs	r3, #2
 800fb86:	617b      	str	r3, [r7, #20]
    break;
 800fb88:	e002      	b.n	800fb90 <LL_ConvertLineToRGB+0x30>
  case LCD_PIXEL_FORMAT_RGB888:
  default:
    output_color_mode = DMA2D_OUTPUT_ARGB8888; /* ARGB8888 */
 800fb8a:	2300      	movs	r3, #0
 800fb8c:	617b      	str	r3, [r7, #20]
    break;
 800fb8e:	bf00      	nop
  }

  /* Configure the DMA2D Mode, Color Mode and output offset */
  hlcd_dma2d.Init.Mode         = DMA2D_M2M_PFC;
 800fb90:	4b1d      	ldr	r3, [pc, #116]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fb92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800fb96:	605a      	str	r2, [r3, #4]
  hlcd_dma2d.Init.ColorMode    = output_color_mode;
 800fb98:	4a1b      	ldr	r2, [pc, #108]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fb9a:	697b      	ldr	r3, [r7, #20]
 800fb9c:	6093      	str	r3, [r2, #8]
  hlcd_dma2d.Init.OutputOffset = 0;
 800fb9e:	4b1a      	ldr	r3, [pc, #104]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fba0:	2200      	movs	r2, #0
 800fba2:	60da      	str	r2, [r3, #12]

  /* Foreground Configuration */
  hlcd_dma2d.LayerCfg[1].AlphaMode = DMA2D_NO_MODIF_ALPHA;
 800fba4:	4b18      	ldr	r3, [pc, #96]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fba6:	2200      	movs	r2, #0
 800fba8:	64da      	str	r2, [r3, #76]	@ 0x4c
  hlcd_dma2d.LayerCfg[1].InputAlpha = 0xFF;
 800fbaa:	4b17      	ldr	r3, [pc, #92]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbac:	22ff      	movs	r2, #255	@ 0xff
 800fbae:	651a      	str	r2, [r3, #80]	@ 0x50
  hlcd_dma2d.LayerCfg[1].InputColorMode = ColorMode;
 800fbb0:	4a15      	ldr	r2, [pc, #84]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbb2:	6a3b      	ldr	r3, [r7, #32]
 800fbb4:	6493      	str	r3, [r2, #72]	@ 0x48
  hlcd_dma2d.LayerCfg[1].InputOffset = 0;
 800fbb6:	4b14      	ldr	r3, [pc, #80]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbb8:	2200      	movs	r2, #0
 800fbba:	645a      	str	r2, [r3, #68]	@ 0x44

  hlcd_dma2d.Instance = DMA2D;
 800fbbc:	4b12      	ldr	r3, [pc, #72]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbbe:	4a13      	ldr	r2, [pc, #76]	@ (800fc0c <LL_ConvertLineToRGB+0xac>)
 800fbc0:	601a      	str	r2, [r3, #0]

  /* DMA2D Initialization */
  if(HAL_DMA2D_Init(&hlcd_dma2d) == HAL_OK)
 800fbc2:	4811      	ldr	r0, [pc, #68]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbc4:	f006 f8f6 	bl	8015db4 <HAL_DMA2D_Init>
 800fbc8:	4603      	mov	r3, r0
 800fbca:	2b00      	cmp	r3, #0
 800fbcc:	d115      	bne.n	800fbfa <LL_ConvertLineToRGB+0x9a>
  {
    if(HAL_DMA2D_ConfigLayer(&hlcd_dma2d, 1) == HAL_OK)
 800fbce:	2101      	movs	r1, #1
 800fbd0:	480d      	ldr	r0, [pc, #52]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbd2:	f006 fa71 	bl	80160b8 <HAL_DMA2D_ConfigLayer>
 800fbd6:	4603      	mov	r3, r0
 800fbd8:	2b00      	cmp	r3, #0
 800fbda:	d10e      	bne.n	800fbfa <LL_ConvertLineToRGB+0x9a>
    {
      if (HAL_DMA2D_Start(&hlcd_dma2d, (uint32_t)pSrc, (uint32_t)pDst, xSize, 1) == HAL_OK)
 800fbdc:	68b9      	ldr	r1, [r7, #8]
 800fbde:	687a      	ldr	r2, [r7, #4]
 800fbe0:	2301      	movs	r3, #1
 800fbe2:	9300      	str	r3, [sp, #0]
 800fbe4:	683b      	ldr	r3, [r7, #0]
 800fbe6:	4808      	ldr	r0, [pc, #32]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbe8:	f006 f952 	bl	8015e90 <HAL_DMA2D_Start>
 800fbec:	4603      	mov	r3, r0
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d103      	bne.n	800fbfa <LL_ConvertLineToRGB+0x9a>
      {
        /* Polling For DMA transfer */
        (void)HAL_DMA2D_PollForTransfer(&hlcd_dma2d, 50);
 800fbf2:	2132      	movs	r1, #50	@ 0x32
 800fbf4:	4804      	ldr	r0, [pc, #16]	@ (800fc08 <LL_ConvertLineToRGB+0xa8>)
 800fbf6:	f006 f976 	bl	8015ee6 <HAL_DMA2D_PollForTransfer>
      }
    }
  }
}
 800fbfa:	bf00      	nop
 800fbfc:	3718      	adds	r7, #24
 800fbfe:	46bd      	mov	sp, r7
 800fc00:	bd80      	pop	{r7, pc}
 800fc02:	bf00      	nop
 800fc04:	24008734 	.word	0x24008734
 800fc08:	24008624 	.word	0x24008624
 800fc0c:	52001000 	.word	0x52001000

0800fc10 <LTDC_MspInit>:
  * @brief  Initialize the BSP LTDC Msp.
  * @param  hltdc  LTDC handle
  * @retval None
  */
static void LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 800fc10:	b480      	push	{r7}
 800fc12:	b085      	sub	sp, #20
 800fc14:	af00      	add	r7, sp, #0
 800fc16:	6078      	str	r0, [r7, #4]
  if(hltdc->Instance == LTDC)
 800fc18:	687b      	ldr	r3, [r7, #4]
 800fc1a:	681b      	ldr	r3, [r3, #0]
 800fc1c:	4a13      	ldr	r2, [pc, #76]	@ (800fc6c <LTDC_MspInit+0x5c>)
 800fc1e:	4293      	cmp	r3, r2
 800fc20:	d11e      	bne.n	800fc60 <LTDC_MspInit+0x50>
  {
    /** Enable the LTDC clock */
    __HAL_RCC_LTDC_CLK_ENABLE();
 800fc22:	4b13      	ldr	r3, [pc, #76]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc24:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc28:	4a11      	ldr	r2, [pc, #68]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc2a:	f043 0308 	orr.w	r3, r3, #8
 800fc2e:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fc32:	4b0f      	ldr	r3, [pc, #60]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc34:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fc38:	f003 0308 	and.w	r3, r3, #8
 800fc3c:	60fb      	str	r3, [r7, #12]
 800fc3e:	68fb      	ldr	r3, [r7, #12]


    /** Toggle Sw reset of LTDC IP */
    __HAL_RCC_LTDC_FORCE_RESET();
 800fc40:	4b0b      	ldr	r3, [pc, #44]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc42:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc46:	4a0a      	ldr	r2, [pc, #40]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc48:	f043 0308 	orr.w	r3, r3, #8
 800fc4c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_LTDC_RELEASE_RESET();
 800fc50:	4b07      	ldr	r3, [pc, #28]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc52:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fc56:	4a06      	ldr	r2, [pc, #24]	@ (800fc70 <LTDC_MspInit+0x60>)
 800fc58:	f023 0308 	bic.w	r3, r3, #8
 800fc5c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 800fc60:	bf00      	nop
 800fc62:	3714      	adds	r7, #20
 800fc64:	46bd      	mov	sp, r7
 800fc66:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fc6a:	4770      	bx	lr
 800fc6c:	50001000 	.word	0x50001000
 800fc70:	58024400 	.word	0x58024400

0800fc74 <DMA2D_MspInit>:
  * @brief  Initialize the BSP DMA2D Msp.
  * @param  hdma2d  DMA2D handle
  * @retval None
  */
static void DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 800fc74:	b480      	push	{r7}
 800fc76:	b085      	sub	sp, #20
 800fc78:	af00      	add	r7, sp, #0
 800fc7a:	6078      	str	r0, [r7, #4]
  if(hdma2d->Instance == DMA2D)
 800fc7c:	687b      	ldr	r3, [r7, #4]
 800fc7e:	681b      	ldr	r3, [r3, #0]
 800fc80:	4a11      	ldr	r2, [pc, #68]	@ (800fcc8 <DMA2D_MspInit+0x54>)
 800fc82:	4293      	cmp	r3, r2
 800fc84:	d11a      	bne.n	800fcbc <DMA2D_MspInit+0x48>
  {
    /** Enable the DMA2D clock */
    __HAL_RCC_DMA2D_CLK_ENABLE();
 800fc86:	4b11      	ldr	r3, [pc, #68]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fc88:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800fc8c:	4a0f      	ldr	r2, [pc, #60]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fc8e:	f043 0310 	orr.w	r3, r3, #16
 800fc92:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 800fc96:	4b0d      	ldr	r3, [pc, #52]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fc98:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 800fc9c:	f003 0310 	and.w	r3, r3, #16
 800fca0:	60fb      	str	r3, [r7, #12]
 800fca2:	68fb      	ldr	r3, [r7, #12]

    /** Toggle Sw reset of DMA2D IP */
    __HAL_RCC_DMA2D_FORCE_RESET();
 800fca4:	4b09      	ldr	r3, [pc, #36]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fca6:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fca8:	4a08      	ldr	r2, [pc, #32]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fcaa:	f043 0310 	orr.w	r3, r3, #16
 800fcae:	67d3      	str	r3, [r2, #124]	@ 0x7c
    __HAL_RCC_DMA2D_RELEASE_RESET();
 800fcb0:	4b06      	ldr	r3, [pc, #24]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fcb2:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 800fcb4:	4a05      	ldr	r2, [pc, #20]	@ (800fccc <DMA2D_MspInit+0x58>)
 800fcb6:	f023 0310 	bic.w	r3, r3, #16
 800fcba:	67d3      	str	r3, [r2, #124]	@ 0x7c
  }
}
 800fcbc:	bf00      	nop
 800fcbe:	3714      	adds	r7, #20
 800fcc0:	46bd      	mov	sp, r7
 800fcc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fcc6:	4770      	bx	lr
 800fcc8:	52001000 	.word	0x52001000
 800fccc:	58024400 	.word	0x58024400

0800fcd0 <DSI_MspInit>:
  * @brief  Initialize the BSP DSI Msp.
  * @param  hdsi  DSI handle
  * @retval None
  */
static void DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 800fcd0:	b480      	push	{r7}
 800fcd2:	b085      	sub	sp, #20
 800fcd4:	af00      	add	r7, sp, #0
 800fcd6:	6078      	str	r0, [r7, #4]
  if(hdsi->Instance == DSI)
 800fcd8:	687b      	ldr	r3, [r7, #4]
 800fcda:	681b      	ldr	r3, [r3, #0]
 800fcdc:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800fce0:	d11e      	bne.n	800fd20 <DSI_MspInit+0x50>
  {
    /** Enable DSI Host and wrapper clocks */
    __HAL_RCC_DSI_CLK_ENABLE();
 800fce2:	4b12      	ldr	r3, [pc, #72]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fce4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fce8:	4a10      	ldr	r2, [pc, #64]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fcea:	f043 0310 	orr.w	r3, r3, #16
 800fcee:	f8c2 30e4 	str.w	r3, [r2, #228]	@ 0xe4
 800fcf2:	4b0e      	ldr	r3, [pc, #56]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fcf4:	f8d3 30e4 	ldr.w	r3, [r3, #228]	@ 0xe4
 800fcf8:	f003 0310 	and.w	r3, r3, #16
 800fcfc:	60fb      	str	r3, [r7, #12]
 800fcfe:	68fb      	ldr	r3, [r7, #12]

    /** Soft Reset the DSI Host and wrapper */
    __HAL_RCC_DSI_FORCE_RESET();
 800fd00:	4b0a      	ldr	r3, [pc, #40]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fd02:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fd06:	4a09      	ldr	r2, [pc, #36]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fd08:	f043 0310 	orr.w	r3, r3, #16
 800fd0c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
    __HAL_RCC_DSI_RELEASE_RESET();
 800fd10:	4b06      	ldr	r3, [pc, #24]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fd12:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800fd16:	4a05      	ldr	r2, [pc, #20]	@ (800fd2c <DSI_MspInit+0x5c>)
 800fd18:	f023 0310 	bic.w	r3, r3, #16
 800fd1c:	f8c2 308c 	str.w	r3, [r2, #140]	@ 0x8c
  }
}
 800fd20:	bf00      	nop
 800fd22:	3714      	adds	r7, #20
 800fd24:	46bd      	mov	sp, r7
 800fd26:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd2a:	4770      	bx	lr
 800fd2c:	58024400 	.word	0x58024400

0800fd30 <DSI_IO_Write>:
  * @param  pData pointer to a buffer of data to be write
  * @param  Size To precise command to be used (short or long)
  * @retval BSP status
  */
static int32_t DSI_IO_Write(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b088      	sub	sp, #32
 800fd34:	af02      	add	r7, sp, #8
 800fd36:	60ba      	str	r2, [r7, #8]
 800fd38:	461a      	mov	r2, r3
 800fd3a:	4603      	mov	r3, r0
 800fd3c:	81fb      	strh	r3, [r7, #14]
 800fd3e:	460b      	mov	r3, r1
 800fd40:	81bb      	strh	r3, [r7, #12]
 800fd42:	4613      	mov	r3, r2
 800fd44:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800fd46:	2300      	movs	r3, #0
 800fd48:	617b      	str	r3, [r7, #20]

  if(Size <= 1U)
 800fd4a:	88fb      	ldrh	r3, [r7, #6]
 800fd4c:	2b01      	cmp	r3, #1
 800fd4e:	d812      	bhi.n	800fd76 <DSI_IO_Write+0x46>
  {
    if(HAL_DSI_ShortWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_SHORT_PKT_WRITE_P1, Reg, (uint32_t)pData[Size]) != HAL_OK)
 800fd50:	89f9      	ldrh	r1, [r7, #14]
 800fd52:	89b8      	ldrh	r0, [r7, #12]
 800fd54:	88fb      	ldrh	r3, [r7, #6]
 800fd56:	68ba      	ldr	r2, [r7, #8]
 800fd58:	4413      	add	r3, r2
 800fd5a:	781b      	ldrb	r3, [r3, #0]
 800fd5c:	9300      	str	r3, [sp, #0]
 800fd5e:	4603      	mov	r3, r0
 800fd60:	2215      	movs	r2, #21
 800fd62:	4810      	ldr	r0, [pc, #64]	@ (800fda4 <DSI_IO_Write+0x74>)
 800fd64:	f007 fbe2 	bl	801752c <HAL_DSI_ShortWrite>
 800fd68:	4603      	mov	r3, r0
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d014      	beq.n	800fd98 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800fd6e:	f06f 0307 	mvn.w	r3, #7
 800fd72:	617b      	str	r3, [r7, #20]
 800fd74:	e010      	b.n	800fd98 <DSI_IO_Write+0x68>
    }
  }
  else
  {
    if(HAL_DSI_LongWrite(&hlcd_dsi, ChannelNbr, DSI_DCS_LONG_PKT_WRITE, Size, (uint32_t)Reg, pData) != HAL_OK)
 800fd76:	89f9      	ldrh	r1, [r7, #14]
 800fd78:	88f8      	ldrh	r0, [r7, #6]
 800fd7a:	89bb      	ldrh	r3, [r7, #12]
 800fd7c:	68ba      	ldr	r2, [r7, #8]
 800fd7e:	9201      	str	r2, [sp, #4]
 800fd80:	9300      	str	r3, [sp, #0]
 800fd82:	4603      	mov	r3, r0
 800fd84:	2239      	movs	r2, #57	@ 0x39
 800fd86:	4807      	ldr	r0, [pc, #28]	@ (800fda4 <DSI_IO_Write+0x74>)
 800fd88:	f007 fbf2 	bl	8017570 <HAL_DSI_LongWrite>
 800fd8c:	4603      	mov	r3, r0
 800fd8e:	2b00      	cmp	r3, #0
 800fd90:	d002      	beq.n	800fd98 <DSI_IO_Write+0x68>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 800fd92:	f06f 0307 	mvn.w	r3, #7
 800fd96:	617b      	str	r3, [r7, #20]
    }
  }

  return ret;
 800fd98:	697b      	ldr	r3, [r7, #20]
}
 800fd9a:	4618      	mov	r0, r3
 800fd9c:	3718      	adds	r7, #24
 800fd9e:	46bd      	mov	sp, r7
 800fda0:	bd80      	pop	{r7, pc}
 800fda2:	bf00      	nop
 800fda4:	24008608 	.word	0x24008608

0800fda8 <DSI_IO_Read>:
  * @param  pData pointer to a buffer to store the payload of a read back operation.
  * @param  Size  Data size to be read (in byte).
  * @retval BSP status
  */
static int32_t DSI_IO_Read(uint16_t ChannelNbr, uint16_t Reg, uint8_t *pData, uint16_t Size)
{
 800fda8:	b580      	push	{r7, lr}
 800fdaa:	b08a      	sub	sp, #40	@ 0x28
 800fdac:	af04      	add	r7, sp, #16
 800fdae:	60ba      	str	r2, [r7, #8]
 800fdb0:	461a      	mov	r2, r3
 800fdb2:	4603      	mov	r3, r0
 800fdb4:	81fb      	strh	r3, [r7, #14]
 800fdb6:	460b      	mov	r3, r1
 800fdb8:	81bb      	strh	r3, [r7, #12]
 800fdba:	4613      	mov	r3, r2
 800fdbc:	80fb      	strh	r3, [r7, #6]
  int32_t ret = BSP_ERROR_NONE;
 800fdbe:	2300      	movs	r3, #0
 800fdc0:	617b      	str	r3, [r7, #20]

  if(HAL_DSI_Read(&hlcd_dsi, ChannelNbr, pData, Size, DSI_DCS_SHORT_PKT_READ, Reg, pData) != HAL_OK)
 800fdc2:	89f9      	ldrh	r1, [r7, #14]
 800fdc4:	88f8      	ldrh	r0, [r7, #6]
 800fdc6:	89bb      	ldrh	r3, [r7, #12]
 800fdc8:	68ba      	ldr	r2, [r7, #8]
 800fdca:	9202      	str	r2, [sp, #8]
 800fdcc:	9301      	str	r3, [sp, #4]
 800fdce:	2306      	movs	r3, #6
 800fdd0:	9300      	str	r3, [sp, #0]
 800fdd2:	4603      	mov	r3, r0
 800fdd4:	68ba      	ldr	r2, [r7, #8]
 800fdd6:	4807      	ldr	r0, [pc, #28]	@ (800fdf4 <DSI_IO_Read+0x4c>)
 800fdd8:	f007 fc62 	bl	80176a0 <HAL_DSI_Read>
 800fddc:	4603      	mov	r3, r0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d002      	beq.n	800fde8 <DSI_IO_Read+0x40>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800fde2:	f06f 0307 	mvn.w	r3, #7
 800fde6:	617b      	str	r3, [r7, #20]
  }

  return ret;
 800fde8:	697b      	ldr	r3, [r7, #20]
}
 800fdea:	4618      	mov	r0, r3
 800fdec:	3718      	adds	r7, #24
 800fdee:	46bd      	mov	sp, r7
 800fdf0:	bd80      	pop	{r7, pc}
 800fdf2:	bf00      	nop
 800fdf4:	24008608 	.word	0x24008608

0800fdf8 <NT35510_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
int32_t NT35510_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 800fdf8:	b580      	push	{r7, lr}
 800fdfa:	b088      	sub	sp, #32
 800fdfc:	af00      	add	r7, sp, #0
 800fdfe:	6078      	str	r0, [r7, #4]
 800fe00:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 800fe02:	2300      	movs	r3, #0
 800fe04:	61bb      	str	r3, [r7, #24]
  NT35510_IO_t              IOCtx;
  static NT35510_Object_t   NT35510Obj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 800fe06:	2300      	movs	r3, #0
 800fe08:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 800fe0a:	4b22      	ldr	r3, [pc, #136]	@ (800fe94 <NT35510_Probe+0x9c>)
 800fe0c:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 800fe0e:	4b22      	ldr	r3, [pc, #136]	@ (800fe98 <NT35510_Probe+0xa0>)
 800fe10:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 800fe12:	4b22      	ldr	r3, [pc, #136]	@ (800fe9c <NT35510_Probe+0xa4>)
 800fe14:	613b      	str	r3, [r7, #16]

  if(NT35510_RegisterBusIO(&NT35510Obj, &IOCtx) != NT35510_OK)
 800fe16:	f107 0308 	add.w	r3, r7, #8
 800fe1a:	4619      	mov	r1, r3
 800fe1c:	4820      	ldr	r0, [pc, #128]	@ (800fea0 <NT35510_Probe+0xa8>)
 800fe1e:	f7f1 fbe1 	bl	80015e4 <NT35510_RegisterBusIO>
 800fe22:	4603      	mov	r3, r0
 800fe24:	2b00      	cmp	r3, #0
 800fe26:	d003      	beq.n	800fe30 <NT35510_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800fe28:	f06f 0307 	mvn.w	r3, #7
 800fe2c:	61fb      	str	r3, [r7, #28]
 800fe2e:	e02c      	b.n	800fe8a <NT35510_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &NT35510Obj;
 800fe30:	4b1c      	ldr	r3, [pc, #112]	@ (800fea4 <NT35510_Probe+0xac>)
 800fe32:	4a1b      	ldr	r2, [pc, #108]	@ (800fea0 <NT35510_Probe+0xa8>)
 800fe34:	601a      	str	r2, [r3, #0]

    if(NT35510_ReadID(Lcd_CompObj, &id) != NT35510_OK)
 800fe36:	4b1b      	ldr	r3, [pc, #108]	@ (800fea4 <NT35510_Probe+0xac>)
 800fe38:	681b      	ldr	r3, [r3, #0]
 800fe3a:	f107 0218 	add.w	r2, r7, #24
 800fe3e:	4611      	mov	r1, r2
 800fe40:	4618      	mov	r0, r3
 800fe42:	f7f1 fe67 	bl	8001b14 <NT35510_ReadID>
 800fe46:	4603      	mov	r3, r0
 800fe48:	2b00      	cmp	r3, #0
 800fe4a:	d003      	beq.n	800fe54 <NT35510_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe4c:	f06f 0304 	mvn.w	r3, #4
 800fe50:	61fb      	str	r3, [r7, #28]
 800fe52:	e01a      	b.n	800fe8a <NT35510_Probe+0x92>
    }
    else if (id != NT35510_ID)
 800fe54:	69bb      	ldr	r3, [r7, #24]
 800fe56:	2b80      	cmp	r3, #128	@ 0x80
 800fe58:	d003      	beq.n	800fe62 <NT35510_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800fe5a:	f06f 0306 	mvn.w	r3, #6
 800fe5e:	61fb      	str	r3, [r7, #28]
 800fe60:	e013      	b.n	800fe8a <NT35510_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &NT35510_LCD_Driver;
 800fe62:	4b11      	ldr	r3, [pc, #68]	@ (800fea8 <NT35510_Probe+0xb0>)
 800fe64:	4a11      	ldr	r2, [pc, #68]	@ (800feac <NT35510_Probe+0xb4>)
 800fe66:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != NT35510_OK)
 800fe68:	4b0f      	ldr	r3, [pc, #60]	@ (800fea8 <NT35510_Probe+0xb0>)
 800fe6a:	681b      	ldr	r3, [r3, #0]
 800fe6c:	681b      	ldr	r3, [r3, #0]
 800fe6e:	4a0d      	ldr	r2, [pc, #52]	@ (800fea4 <NT35510_Probe+0xac>)
 800fe70:	6810      	ldr	r0, [r2, #0]
 800fe72:	683a      	ldr	r2, [r7, #0]
 800fe74:	6879      	ldr	r1, [r7, #4]
 800fe76:	4798      	blx	r3
 800fe78:	4603      	mov	r3, r0
 800fe7a:	2b00      	cmp	r3, #0
 800fe7c:	d003      	beq.n	800fe86 <NT35510_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800fe7e:	f06f 0304 	mvn.w	r3, #4
 800fe82:	61fb      	str	r3, [r7, #28]
 800fe84:	e001      	b.n	800fe8a <NT35510_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800fe86:	2300      	movs	r3, #0
 800fe88:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 800fe8a:	69fb      	ldr	r3, [r7, #28]
}
 800fe8c:	4618      	mov	r0, r3
 800fe8e:	3720      	adds	r7, #32
 800fe90:	46bd      	mov	sp, r7
 800fe92:	bd80      	pop	{r7, pc}
 800fe94:	0800d865 	.word	0x0800d865
 800fe98:	0800fd31 	.word	0x0800fd31
 800fe9c:	0800fda9 	.word	0x0800fda9
 800fea0:	24008754 	.word	0x24008754
 800fea4:	24008604 	.word	0x24008604
 800fea8:	24008600 	.word	0x24008600
 800feac:	24000438 	.word	0x24000438

0800feb0 <OTM8009A_Probe>:
/**
  * @brief  Register Bus IOs if component ID is OK
  * @retval error status
  */
static int32_t OTM8009A_Probe(uint32_t ColorCoding, uint32_t Orientation)
{
 800feb0:	b580      	push	{r7, lr}
 800feb2:	b088      	sub	sp, #32
 800feb4:	af00      	add	r7, sp, #0
 800feb6:	6078      	str	r0, [r7, #4]
 800feb8:	6039      	str	r1, [r7, #0]
  int32_t ret;
  uint32_t id = 0;
 800feba:	2300      	movs	r3, #0
 800febc:	61bb      	str	r3, [r7, #24]
  OTM8009A_IO_t              IOCtx;
  static OTM8009A_Object_t   OTM8009AObj;

  /* Configure the audio driver */
  IOCtx.Address     = 0;
 800febe:	2300      	movs	r3, #0
 800fec0:	813b      	strh	r3, [r7, #8]
  IOCtx.GetTick     = BSP_GetTick;
 800fec2:	4b22      	ldr	r3, [pc, #136]	@ (800ff4c <OTM8009A_Probe+0x9c>)
 800fec4:	617b      	str	r3, [r7, #20]
  IOCtx.WriteReg    = DSI_IO_Write;
 800fec6:	4b22      	ldr	r3, [pc, #136]	@ (800ff50 <OTM8009A_Probe+0xa0>)
 800fec8:	60fb      	str	r3, [r7, #12]
  IOCtx.ReadReg     = DSI_IO_Read;
 800feca:	4b22      	ldr	r3, [pc, #136]	@ (800ff54 <OTM8009A_Probe+0xa4>)
 800fecc:	613b      	str	r3, [r7, #16]

  if(OTM8009A_RegisterBusIO(&OTM8009AObj, &IOCtx) != OTM8009A_OK)
 800fece:	f107 0308 	add.w	r3, r7, #8
 800fed2:	4619      	mov	r1, r3
 800fed4:	4820      	ldr	r0, [pc, #128]	@ (800ff58 <OTM8009A_Probe+0xa8>)
 800fed6:	f7f2 f875 	bl	8001fc4 <OTM8009A_RegisterBusIO>
 800feda:	4603      	mov	r3, r0
 800fedc:	2b00      	cmp	r3, #0
 800fede:	d003      	beq.n	800fee8 <OTM8009A_Probe+0x38>
  {
    ret = BSP_ERROR_BUS_FAILURE;
 800fee0:	f06f 0307 	mvn.w	r3, #7
 800fee4:	61fb      	str	r3, [r7, #28]
 800fee6:	e02c      	b.n	800ff42 <OTM8009A_Probe+0x92>
  }
  else
  {
    Lcd_CompObj = &OTM8009AObj;
 800fee8:	4b1c      	ldr	r3, [pc, #112]	@ (800ff5c <OTM8009A_Probe+0xac>)
 800feea:	4a1b      	ldr	r2, [pc, #108]	@ (800ff58 <OTM8009A_Probe+0xa8>)
 800feec:	601a      	str	r2, [r3, #0]

    if(OTM8009A_ReadID(Lcd_CompObj, &id) != OTM8009A_OK)
 800feee:	4b1b      	ldr	r3, [pc, #108]	@ (800ff5c <OTM8009A_Probe+0xac>)
 800fef0:	681b      	ldr	r3, [r3, #0]
 800fef2:	f107 0218 	add.w	r2, r7, #24
 800fef6:	4611      	mov	r1, r2
 800fef8:	4618      	mov	r0, r3
 800fefa:	f7f2 fe67 	bl	8002bcc <OTM8009A_ReadID>
 800fefe:	4603      	mov	r3, r0
 800ff00:	2b00      	cmp	r3, #0
 800ff02:	d003      	beq.n	800ff0c <OTM8009A_Probe+0x5c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff04:	f06f 0304 	mvn.w	r3, #4
 800ff08:	61fb      	str	r3, [r7, #28]
 800ff0a:	e01a      	b.n	800ff42 <OTM8009A_Probe+0x92>
    }
    else if (id != OTM8009A_ID)
 800ff0c:	69bb      	ldr	r3, [r7, #24]
 800ff0e:	2b40      	cmp	r3, #64	@ 0x40
 800ff10:	d003      	beq.n	800ff1a <OTM8009A_Probe+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 800ff12:	f06f 0306 	mvn.w	r3, #6
 800ff16:	61fb      	str	r3, [r7, #28]
 800ff18:	e013      	b.n	800ff42 <OTM8009A_Probe+0x92>
    }
    else
    {
      Lcd_Drv = (LCD_Drv_t *)(void *) &OTM8009A_LCD_Driver;
 800ff1a:	4b11      	ldr	r3, [pc, #68]	@ (800ff60 <OTM8009A_Probe+0xb0>)
 800ff1c:	4a11      	ldr	r2, [pc, #68]	@ (800ff64 <OTM8009A_Probe+0xb4>)
 800ff1e:	601a      	str	r2, [r3, #0]
      if(Lcd_Drv->Init(Lcd_CompObj, ColorCoding, Orientation) != OTM8009A_OK)
 800ff20:	4b0f      	ldr	r3, [pc, #60]	@ (800ff60 <OTM8009A_Probe+0xb0>)
 800ff22:	681b      	ldr	r3, [r3, #0]
 800ff24:	681b      	ldr	r3, [r3, #0]
 800ff26:	4a0d      	ldr	r2, [pc, #52]	@ (800ff5c <OTM8009A_Probe+0xac>)
 800ff28:	6810      	ldr	r0, [r2, #0]
 800ff2a:	683a      	ldr	r2, [r7, #0]
 800ff2c:	6879      	ldr	r1, [r7, #4]
 800ff2e:	4798      	blx	r3
 800ff30:	4603      	mov	r3, r0
 800ff32:	2b00      	cmp	r3, #0
 800ff34:	d003      	beq.n	800ff3e <OTM8009A_Probe+0x8e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 800ff36:	f06f 0304 	mvn.w	r3, #4
 800ff3a:	61fb      	str	r3, [r7, #28]
 800ff3c:	e001      	b.n	800ff42 <OTM8009A_Probe+0x92>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 800ff3e:	2300      	movs	r3, #0
 800ff40:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  return ret;
 800ff42:	69fb      	ldr	r3, [r7, #28]
}
 800ff44:	4618      	mov	r0, r3
 800ff46:	3720      	adds	r7, #32
 800ff48:	46bd      	mov	sp, r7
 800ff4a:	bd80      	pop	{r7, pc}
 800ff4c:	0800d865 	.word	0x0800d865
 800ff50:	0800fd31 	.word	0x0800fd31
 800ff54:	0800fda9 	.word	0x0800fda9
 800ff58:	24008774 	.word	0x24008774
 800ff5c:	24008604 	.word	0x24008604
 800ff60:	24008600 	.word	0x24008600
 800ff64:	24000484 	.word	0x24000484

0800ff68 <BSP_QSPI_Init>:
  * @param  Instance   QSPI Instance
  * @param  Init       QSPI Init structure
  * @retval BSP status
  */
int32_t BSP_QSPI_Init(uint32_t Instance, BSP_QSPI_Init_t *Init)
{
 800ff68:	b580      	push	{r7, lr}
 800ff6a:	b090      	sub	sp, #64	@ 0x40
 800ff6c:	af00      	add	r7, sp, #0
 800ff6e:	6078      	str	r0, [r7, #4]
 800ff70:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 800ff72:	2300      	movs	r3, #0
 800ff74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  3: For DTR mode to reach max 54Mhz
  */
  static const uint32_t PrescalerTab[2] = {1, 3};

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 800ff76:	687b      	ldr	r3, [r7, #4]
 800ff78:	2b00      	cmp	r3, #0
 800ff7a:	d003      	beq.n	800ff84 <BSP_QSPI_Init+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 800ff7c:	f06f 0301 	mvn.w	r3, #1
 800ff80:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800ff82:	e090      	b.n	80100a6 <BSP_QSPI_Init+0x13e>
  }
  else
  {
    /* Check if instance is already initialized */
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_NONE)
 800ff84:	494a      	ldr	r1, [pc, #296]	@ (80100b0 <BSP_QSPI_Init+0x148>)
 800ff86:	687a      	ldr	r2, [r7, #4]
 800ff88:	4613      	mov	r3, r2
 800ff8a:	005b      	lsls	r3, r3, #1
 800ff8c:	4413      	add	r3, r2
 800ff8e:	009b      	lsls	r3, r3, #2
 800ff90:	440b      	add	r3, r1
 800ff92:	781b      	ldrb	r3, [r3, #0]
 800ff94:	2b00      	cmp	r3, #0
 800ff96:	f040 8086 	bne.w	80100a6 <BSP_QSPI_Init+0x13e>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp QSPI initialization */
      QSPI_MspInit(&hqspi);
 800ff9a:	4846      	ldr	r0, [pc, #280]	@ (80100b4 <BSP_QSPI_Init+0x14c>)
 800ff9c:	f000 faf6 	bl	801058c <QSPI_MspInit>
#endif /* USE_HAL_QSPI_REGISTER_CALLBACKS */

      if(ret == BSP_ERROR_NONE)
 800ffa0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800ffa2:	2b00      	cmp	r3, #0
 800ffa4:	d17f      	bne.n	80100a6 <BSP_QSPI_Init+0x13e>
      {
        /* STM32 QSPI interface initialization */
        (void)MT25TL01G_GetFlashInfo(&pInfo);
 800ffa6:	f107 031c 	add.w	r3, r7, #28
 800ffaa:	4618      	mov	r0, r3
 800ffac:	f7f0 fe95 	bl	8000cda <MT25TL01G_GetFlashInfo>
        qspi_init.ClockPrescaler = PrescalerTab[Init->TransferRate];
 800ffb0:	683b      	ldr	r3, [r7, #0]
 800ffb2:	785b      	ldrb	r3, [r3, #1]
 800ffb4:	461a      	mov	r2, r3
 800ffb6:	4b40      	ldr	r3, [pc, #256]	@ (80100b8 <BSP_QSPI_Init+0x150>)
 800ffb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800ffbc:	613b      	str	r3, [r7, #16]
        qspi_init.DualFlashMode  = QSPI_DUALFLASH_ENABLE;
 800ffbe:	2340      	movs	r3, #64	@ 0x40
 800ffc0:	61bb      	str	r3, [r7, #24]
        qspi_init.FlashSize      = (uint32_t)POSITION_VAL((uint32_t)pInfo.FlashSize) - 1U;
 800ffc2:	69fb      	ldr	r3, [r7, #28]
 800ffc4:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800ffc6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ffc8:	fa93 f3a3 	rbit	r3, r3
 800ffcc:	633b      	str	r3, [r7, #48]	@ 0x30
  return result;
 800ffce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ffd0:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (value == 0U)
 800ffd2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffd4:	2b00      	cmp	r3, #0
 800ffd6:	d101      	bne.n	800ffdc <BSP_QSPI_Init+0x74>
    return 32U;
 800ffd8:	2320      	movs	r3, #32
 800ffda:	e003      	b.n	800ffe4 <BSP_QSPI_Init+0x7c>
  return __builtin_clz(value);
 800ffdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ffde:	fab3 f383 	clz	r3, r3
 800ffe2:	b2db      	uxtb	r3, r3
 800ffe4:	3b01      	subs	r3, #1
 800ffe6:	60fb      	str	r3, [r7, #12]
        qspi_init.SampleShifting = (Init->TransferRate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 800ffe8:	683b      	ldr	r3, [r7, #0]
 800ffea:	785b      	ldrb	r3, [r3, #1]
 800ffec:	2b00      	cmp	r3, #0
 800ffee:	d101      	bne.n	800fff4 <BSP_QSPI_Init+0x8c>
 800fff0:	2310      	movs	r3, #16
 800fff2:	e000      	b.n	800fff6 <BSP_QSPI_Init+0x8e>
 800fff4:	2300      	movs	r3, #0
 800fff6:	617b      	str	r3, [r7, #20]

        if(MX_QSPI_Init(&hqspi, &qspi_init) != HAL_OK)
 800fff8:	f107 030c 	add.w	r3, r7, #12
 800fffc:	4619      	mov	r1, r3
 800fffe:	482d      	ldr	r0, [pc, #180]	@ (80100b4 <BSP_QSPI_Init+0x14c>)
 8010000:	f000 f85c 	bl	80100bc <MX_QSPI_Init>
 8010004:	4603      	mov	r3, r0
 8010006:	2b00      	cmp	r3, #0
 8010008:	d003      	beq.n	8010012 <BSP_QSPI_Init+0xaa>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 801000a:	f06f 0303 	mvn.w	r3, #3
 801000e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010010:	e049      	b.n	80100a6 <BSP_QSPI_Init+0x13e>
        }/* QSPI memory reset */
        else if(QSPI_ResetMemory(Instance) != BSP_ERROR_NONE)
 8010012:	6878      	ldr	r0, [r7, #4]
 8010014:	f000 fc02 	bl	801081c <QSPI_ResetMemory>
 8010018:	4603      	mov	r3, r0
 801001a:	2b00      	cmp	r3, #0
 801001c:	d003      	beq.n	8010026 <BSP_QSPI_Init+0xbe>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 801001e:	f06f 0304 	mvn.w	r3, #4
 8010022:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010024:	e03f      	b.n	80100a6 <BSP_QSPI_Init+0x13e>
        }/* Force Flash enter 4 Byte address mode */
        else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010026:	4922      	ldr	r1, [pc, #136]	@ (80100b0 <BSP_QSPI_Init+0x148>)
 8010028:	687a      	ldr	r2, [r7, #4]
 801002a:	4613      	mov	r3, r2
 801002c:	005b      	lsls	r3, r3, #1
 801002e:	4413      	add	r3, r2
 8010030:	009b      	lsls	r3, r3, #2
 8010032:	440b      	add	r3, r1
 8010034:	3301      	adds	r3, #1
 8010036:	781b      	ldrb	r3, [r3, #0]
 8010038:	4619      	mov	r1, r3
 801003a:	481e      	ldr	r0, [pc, #120]	@ (80100b4 <BSP_QSPI_Init+0x14c>)
 801003c:	f7f0 febc 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
 8010040:	4603      	mov	r3, r0
 8010042:	2b00      	cmp	r3, #0
 8010044:	d003      	beq.n	801004e <BSP_QSPI_Init+0xe6>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8010046:	f06f 0304 	mvn.w	r3, #4
 801004a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801004c:	e02b      	b.n	80100a6 <BSP_QSPI_Init+0x13e>
        }
        else if(MT25TL01G_Enter4BytesAddressMode(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801004e:	4918      	ldr	r1, [pc, #96]	@ (80100b0 <BSP_QSPI_Init+0x148>)
 8010050:	687a      	ldr	r2, [r7, #4]
 8010052:	4613      	mov	r3, r2
 8010054:	005b      	lsls	r3, r3, #1
 8010056:	4413      	add	r3, r2
 8010058:	009b      	lsls	r3, r3, #2
 801005a:	440b      	add	r3, r1
 801005c:	3301      	adds	r3, #1
 801005e:	781b      	ldrb	r3, [r3, #0]
 8010060:	4619      	mov	r1, r3
 8010062:	4814      	ldr	r0, [pc, #80]	@ (80100b4 <BSP_QSPI_Init+0x14c>)
 8010064:	f7f0 fe60 	bl	8000d28 <MT25TL01G_Enter4BytesAddressMode>
 8010068:	4603      	mov	r3, r0
 801006a:	2b00      	cmp	r3, #0
 801006c:	d003      	beq.n	8010076 <BSP_QSPI_Init+0x10e>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 801006e:	f06f 0304 	mvn.w	r3, #4
 8010072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010074:	e017      	b.n	80100a6 <BSP_QSPI_Init+0x13e>
        }/* Configuration of the dummy cycles on QSPI memory side */
        else if(QSPI_DummyCyclesCfg(Instance) != BSP_ERROR_NONE)
 8010076:	6878      	ldr	r0, [r7, #4]
 8010078:	f000 fc3c 	bl	80108f4 <QSPI_DummyCyclesCfg>
 801007c:	4603      	mov	r3, r0
 801007e:	2b00      	cmp	r3, #0
 8010080:	d003      	beq.n	801008a <BSP_QSPI_Init+0x122>
        {
          ret = BSP_ERROR_COMPONENT_FAILURE;
 8010082:	f06f 0304 	mvn.w	r3, #4
 8010086:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010088:	e00d      	b.n	80100a6 <BSP_QSPI_Init+0x13e>
        }
        else
        {
          /* Configure Flash to desired mode */
          if(BSP_QSPI_ConfigFlash(Instance, Init->InterfaceMode, Init->TransferRate) != BSP_ERROR_NONE)
 801008a:	683b      	ldr	r3, [r7, #0]
 801008c:	7819      	ldrb	r1, [r3, #0]
 801008e:	683b      	ldr	r3, [r7, #0]
 8010090:	785b      	ldrb	r3, [r3, #1]
 8010092:	461a      	mov	r2, r3
 8010094:	6878      	ldr	r0, [r7, #4]
 8010096:	f000 f9f7 	bl	8010488 <BSP_QSPI_ConfigFlash>
 801009a:	4603      	mov	r3, r0
 801009c:	2b00      	cmp	r3, #0
 801009e:	d002      	beq.n	80100a6 <BSP_QSPI_Init+0x13e>
          {
            ret = BSP_ERROR_COMPONENT_FAILURE;
 80100a0:	f06f 0304 	mvn.w	r3, #4
 80100a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
    }
  }

  /* Return BSP status */
  return ret;
 80100a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80100a8:	4618      	mov	r0, r3
 80100aa:	3740      	adds	r7, #64	@ 0x40
 80100ac:	46bd      	mov	sp, r7
 80100ae:	bd80      	pop	{r7, pc}
 80100b0:	240087e0 	.word	0x240087e0
 80100b4:	24008794 	.word	0x24008794
 80100b8:	0802a33c 	.word	0x0802a33c

080100bc <MX_QSPI_Init>:
  * @param  hQspi       QSPI handle
  * @param  Config      QSPI configuration structure
  * @retval BSP status
  */
__weak HAL_StatusTypeDef MX_QSPI_Init(QSPI_HandleTypeDef *hQspi, MX_QSPI_Init_t *Config)
{
 80100bc:	b580      	push	{r7, lr}
 80100be:	b082      	sub	sp, #8
 80100c0:	af00      	add	r7, sp, #0
 80100c2:	6078      	str	r0, [r7, #4]
 80100c4:	6039      	str	r1, [r7, #0]
  /* QSPI initialization */
  /* QSPI freq = SYSCLK /(1 + ClockPrescaler) Mhz */
  hQspi->Instance                = QUADSPI;
 80100c6:	687b      	ldr	r3, [r7, #4]
 80100c8:	4a13      	ldr	r2, [pc, #76]	@ (8010118 <MX_QSPI_Init+0x5c>)
 80100ca:	601a      	str	r2, [r3, #0]
  hQspi->Init.ClockPrescaler     = Config->ClockPrescaler;
 80100cc:	683b      	ldr	r3, [r7, #0]
 80100ce:	685a      	ldr	r2, [r3, #4]
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	605a      	str	r2, [r3, #4]
  hQspi->Init.FifoThreshold      = 1;
 80100d4:	687b      	ldr	r3, [r7, #4]
 80100d6:	2201      	movs	r2, #1
 80100d8:	609a      	str	r2, [r3, #8]
  hQspi->Init.SampleShifting     = Config->SampleShifting;
 80100da:	683b      	ldr	r3, [r7, #0]
 80100dc:	689a      	ldr	r2, [r3, #8]
 80100de:	687b      	ldr	r3, [r7, #4]
 80100e0:	60da      	str	r2, [r3, #12]
  hQspi->Init.FlashSize          = Config->FlashSize;
 80100e2:	683b      	ldr	r3, [r7, #0]
 80100e4:	681a      	ldr	r2, [r3, #0]
 80100e6:	687b      	ldr	r3, [r7, #4]
 80100e8:	611a      	str	r2, [r3, #16]
  hQspi->Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_4_CYCLE; /* Min 50ns for nonRead */
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	f44f 7240 	mov.w	r2, #768	@ 0x300
 80100f0:	615a      	str	r2, [r3, #20]
  hQspi->Init.ClockMode          = QSPI_CLOCK_MODE_0;
 80100f2:	687b      	ldr	r3, [r7, #4]
 80100f4:	2200      	movs	r2, #0
 80100f6:	619a      	str	r2, [r3, #24]
  hQspi->Init.FlashID            = QSPI_FLASH_ID_1;
 80100f8:	687b      	ldr	r3, [r7, #4]
 80100fa:	2200      	movs	r2, #0
 80100fc:	61da      	str	r2, [r3, #28]
  hQspi->Init.DualFlash          = Config->DualFlashMode;
 80100fe:	683b      	ldr	r3, [r7, #0]
 8010100:	68da      	ldr	r2, [r3, #12]
 8010102:	687b      	ldr	r3, [r7, #4]
 8010104:	621a      	str	r2, [r3, #32]

  return HAL_QSPI_Init(hQspi);
 8010106:	6878      	ldr	r0, [r7, #4]
 8010108:	f009 fb62 	bl	80197d0 <HAL_QSPI_Init>
 801010c:	4603      	mov	r3, r0
}
 801010e:	4618      	mov	r0, r3
 8010110:	3708      	adds	r7, #8
 8010112:	46bd      	mov	sp, r7
 8010114:	bd80      	pop	{r7, pc}
 8010116:	bf00      	nop
 8010118:	52005000 	.word	0x52005000

0801011c <BSP_QSPI_Read>:
  * @param  ReadAddr  Read start address
  * @param  Size      Size of data to read
  * @retval BSP status
  */
int32_t BSP_QSPI_Read(uint32_t Instance, uint8_t *pData, uint32_t ReadAddr, uint32_t Size)
{
 801011c:	b580      	push	{r7, lr}
 801011e:	b088      	sub	sp, #32
 8010120:	af02      	add	r7, sp, #8
 8010122:	60f8      	str	r0, [r7, #12]
 8010124:	60b9      	str	r1, [r7, #8]
 8010126:	607a      	str	r2, [r7, #4]
 8010128:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 801012a:	2300      	movs	r3, #0
 801012c:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 801012e:	68fb      	ldr	r3, [r7, #12]
 8010130:	2b00      	cmp	r3, #0
 8010132:	d003      	beq.n	801013c <BSP_QSPI_Read+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010134:	f06f 0301 	mvn.w	r3, #1
 8010138:	617b      	str	r3, [r7, #20]
 801013a:	e037      	b.n	80101ac <BSP_QSPI_Read+0x90>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 801013c:	491e      	ldr	r1, [pc, #120]	@ (80101b8 <BSP_QSPI_Read+0x9c>)
 801013e:	68fa      	ldr	r2, [r7, #12]
 8010140:	4613      	mov	r3, r2
 8010142:	005b      	lsls	r3, r3, #1
 8010144:	4413      	add	r3, r2
 8010146:	009b      	lsls	r3, r3, #2
 8010148:	440b      	add	r3, r1
 801014a:	3302      	adds	r3, #2
 801014c:	781b      	ldrb	r3, [r3, #0]
 801014e:	2b00      	cmp	r3, #0
 8010150:	d116      	bne.n	8010180 <BSP_QSPI_Read+0x64>
    {
      if(MT25TL01G_ReadSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, pData, ReadAddr, Size) != MT25TL01G_OK)
 8010152:	4919      	ldr	r1, [pc, #100]	@ (80101b8 <BSP_QSPI_Read+0x9c>)
 8010154:	68fa      	ldr	r2, [r7, #12]
 8010156:	4613      	mov	r3, r2
 8010158:	005b      	lsls	r3, r3, #1
 801015a:	4413      	add	r3, r2
 801015c:	009b      	lsls	r3, r3, #2
 801015e:	440b      	add	r3, r1
 8010160:	3301      	adds	r3, #1
 8010162:	7819      	ldrb	r1, [r3, #0]
 8010164:	683b      	ldr	r3, [r7, #0]
 8010166:	9300      	str	r3, [sp, #0]
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	68ba      	ldr	r2, [r7, #8]
 801016c:	4813      	ldr	r0, [pc, #76]	@ (80101bc <BSP_QSPI_Read+0xa0>)
 801016e:	f7f0 ffa9 	bl	80010c4 <MT25TL01G_ReadSTR>
 8010172:	4603      	mov	r3, r0
 8010174:	2b00      	cmp	r3, #0
 8010176:	d019      	beq.n	80101ac <BSP_QSPI_Read+0x90>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010178:	f06f 0304 	mvn.w	r3, #4
 801017c:	617b      	str	r3, [r7, #20]
 801017e:	e015      	b.n	80101ac <BSP_QSPI_Read+0x90>
      }
    }
    else
    {
      if(MT25TL01G_ReadDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode, pData, ReadAddr, Size) != MT25TL01G_OK)
 8010180:	490d      	ldr	r1, [pc, #52]	@ (80101b8 <BSP_QSPI_Read+0x9c>)
 8010182:	68fa      	ldr	r2, [r7, #12]
 8010184:	4613      	mov	r3, r2
 8010186:	005b      	lsls	r3, r3, #1
 8010188:	4413      	add	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	440b      	add	r3, r1
 801018e:	3301      	adds	r3, #1
 8010190:	7819      	ldrb	r1, [r3, #0]
 8010192:	683b      	ldr	r3, [r7, #0]
 8010194:	9300      	str	r3, [sp, #0]
 8010196:	687b      	ldr	r3, [r7, #4]
 8010198:	68ba      	ldr	r2, [r7, #8]
 801019a:	4808      	ldr	r0, [pc, #32]	@ (80101bc <BSP_QSPI_Read+0xa0>)
 801019c:	f7f0 ff1a 	bl	8000fd4 <MT25TL01G_ReadDTR>
 80101a0:	4603      	mov	r3, r0
 80101a2:	2b00      	cmp	r3, #0
 80101a4:	d002      	beq.n	80101ac <BSP_QSPI_Read+0x90>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80101a6:	f06f 0304 	mvn.w	r3, #4
 80101aa:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 80101ac:	697b      	ldr	r3, [r7, #20]
}
 80101ae:	4618      	mov	r0, r3
 80101b0:	3718      	adds	r7, #24
 80101b2:	46bd      	mov	sp, r7
 80101b4:	bd80      	pop	{r7, pc}
 80101b6:	bf00      	nop
 80101b8:	240087e0 	.word	0x240087e0
 80101bc:	24008794 	.word	0x24008794

080101c0 <BSP_QSPI_Write>:
  * @param  WriteAddr  Write start address
  * @param  Size       Size of data to write
  * @retval BSP status
  */
int32_t BSP_QSPI_Write(uint32_t Instance, uint8_t *pData, uint32_t WriteAddr, uint32_t Size)
{
 80101c0:	b580      	push	{r7, lr}
 80101c2:	b08c      	sub	sp, #48	@ 0x30
 80101c4:	af02      	add	r7, sp, #8
 80101c6:	60f8      	str	r0, [r7, #12]
 80101c8:	60b9      	str	r1, [r7, #8]
 80101ca:	607a      	str	r2, [r7, #4]
 80101cc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80101ce:	2300      	movs	r3, #0
 80101d0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t end_addr, current_size, current_addr;
  uint8_t *write_data;

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80101d2:	68fb      	ldr	r3, [r7, #12]
 80101d4:	2b00      	cmp	r3, #0
 80101d6:	d003      	beq.n	80101e0 <BSP_QSPI_Write+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80101d8:	f06f 0301 	mvn.w	r3, #1
 80101dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80101de:	e081      	b.n	80102e4 <BSP_QSPI_Write+0x124>
  }
  else
  {
    /* Calculation of the size between the write address and the end of the page */
    current_size = MT25TL01G_PAGE_SIZE - (WriteAddr % MT25TL01G_PAGE_SIZE);
 80101e0:	687b      	ldr	r3, [r7, #4]
 80101e2:	b2db      	uxtb	r3, r3
 80101e4:	f5c3 7380 	rsb	r3, r3, #256	@ 0x100
 80101e8:	623b      	str	r3, [r7, #32]

    /* Check if the size of the data is less than the remaining place in the page */
    if (current_size > Size)
 80101ea:	6a3a      	ldr	r2, [r7, #32]
 80101ec:	683b      	ldr	r3, [r7, #0]
 80101ee:	429a      	cmp	r2, r3
 80101f0:	d901      	bls.n	80101f6 <BSP_QSPI_Write+0x36>
    {
      current_size = Size;
 80101f2:	683b      	ldr	r3, [r7, #0]
 80101f4:	623b      	str	r3, [r7, #32]
    }

    /* Initialize the address variables */
    current_addr = WriteAddr;
 80101f6:	687b      	ldr	r3, [r7, #4]
 80101f8:	61fb      	str	r3, [r7, #28]
    end_addr = WriteAddr + Size;
 80101fa:	687a      	ldr	r2, [r7, #4]
 80101fc:	683b      	ldr	r3, [r7, #0]
 80101fe:	4413      	add	r3, r2
 8010200:	617b      	str	r3, [r7, #20]
    write_data = pData;
 8010202:	68bb      	ldr	r3, [r7, #8]
 8010204:	61bb      	str	r3, [r7, #24]

    /* Perform the write page by page */
    do
    {
      /* Check if Flash busy ? */
      if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010206:	493a      	ldr	r1, [pc, #232]	@ (80102f0 <BSP_QSPI_Write+0x130>)
 8010208:	68fa      	ldr	r2, [r7, #12]
 801020a:	4613      	mov	r3, r2
 801020c:	005b      	lsls	r3, r3, #1
 801020e:	4413      	add	r3, r2
 8010210:	009b      	lsls	r3, r3, #2
 8010212:	440b      	add	r3, r1
 8010214:	3301      	adds	r3, #1
 8010216:	781b      	ldrb	r3, [r3, #0]
 8010218:	4619      	mov	r1, r3
 801021a:	4836      	ldr	r0, [pc, #216]	@ (80102f4 <BSP_QSPI_Write+0x134>)
 801021c:	f7f0 fdcc 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
 8010220:	4603      	mov	r3, r0
 8010222:	2b00      	cmp	r3, #0
 8010224:	d003      	beq.n	801022e <BSP_QSPI_Write+0x6e>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010226:	f06f 0304 	mvn.w	r3, #4
 801022a:	627b      	str	r3, [r7, #36]	@ 0x24
 801022c:	e053      	b.n	80102d6 <BSP_QSPI_Write+0x116>
      }/* Enable write operations */
      else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801022e:	4930      	ldr	r1, [pc, #192]	@ (80102f0 <BSP_QSPI_Write+0x130>)
 8010230:	68fa      	ldr	r2, [r7, #12]
 8010232:	4613      	mov	r3, r2
 8010234:	005b      	lsls	r3, r3, #1
 8010236:	4413      	add	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	440b      	add	r3, r1
 801023c:	3301      	adds	r3, #1
 801023e:	781b      	ldrb	r3, [r3, #0]
 8010240:	4619      	mov	r1, r3
 8010242:	482c      	ldr	r0, [pc, #176]	@ (80102f4 <BSP_QSPI_Write+0x134>)
 8010244:	f7f0 fdf4 	bl	8000e30 <MT25TL01G_WriteEnable>
 8010248:	4603      	mov	r3, r0
 801024a:	2b00      	cmp	r3, #0
 801024c:	d003      	beq.n	8010256 <BSP_QSPI_Write+0x96>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801024e:	f06f 0304 	mvn.w	r3, #4
 8010252:	627b      	str	r3, [r7, #36]	@ 0x24
 8010254:	e03f      	b.n	80102d6 <BSP_QSPI_Write+0x116>
      }/* Issue page program command */
      else if(MT25TL01G_PageProgram(&hqspi, QSPI_Ctx[Instance].InterfaceMode, write_data, current_addr, current_size) != MT25TL01G_OK)
 8010256:	4926      	ldr	r1, [pc, #152]	@ (80102f0 <BSP_QSPI_Write+0x130>)
 8010258:	68fa      	ldr	r2, [r7, #12]
 801025a:	4613      	mov	r3, r2
 801025c:	005b      	lsls	r3, r3, #1
 801025e:	4413      	add	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	440b      	add	r3, r1
 8010264:	3301      	adds	r3, #1
 8010266:	7819      	ldrb	r1, [r3, #0]
 8010268:	6a3b      	ldr	r3, [r7, #32]
 801026a:	9300      	str	r3, [sp, #0]
 801026c:	69fb      	ldr	r3, [r7, #28]
 801026e:	69ba      	ldr	r2, [r7, #24]
 8010270:	4820      	ldr	r0, [pc, #128]	@ (80102f4 <BSP_QSPI_Write+0x134>)
 8010272:	f7f0 fe39 	bl	8000ee8 <MT25TL01G_PageProgram>
 8010276:	4603      	mov	r3, r0
 8010278:	2b00      	cmp	r3, #0
 801027a:	d003      	beq.n	8010284 <BSP_QSPI_Write+0xc4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801027c:	f06f 0304 	mvn.w	r3, #4
 8010280:	627b      	str	r3, [r7, #36]	@ 0x24
 8010282:	e028      	b.n	80102d6 <BSP_QSPI_Write+0x116>
      }/* Configure automatic polling mode to wait for end of program */
      else if (MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010284:	491a      	ldr	r1, [pc, #104]	@ (80102f0 <BSP_QSPI_Write+0x130>)
 8010286:	68fa      	ldr	r2, [r7, #12]
 8010288:	4613      	mov	r3, r2
 801028a:	005b      	lsls	r3, r3, #1
 801028c:	4413      	add	r3, r2
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	440b      	add	r3, r1
 8010292:	3301      	adds	r3, #1
 8010294:	781b      	ldrb	r3, [r3, #0]
 8010296:	4619      	mov	r1, r3
 8010298:	4816      	ldr	r0, [pc, #88]	@ (80102f4 <BSP_QSPI_Write+0x134>)
 801029a:	f7f0 fd8d 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
 801029e:	4603      	mov	r3, r0
 80102a0:	2b00      	cmp	r3, #0
 80102a2:	d003      	beq.n	80102ac <BSP_QSPI_Write+0xec>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 80102a4:	f06f 0304 	mvn.w	r3, #4
 80102a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80102aa:	e014      	b.n	80102d6 <BSP_QSPI_Write+0x116>
      }
      else
      {
        /* Update the address and size variables for next page programming */
        current_addr += current_size;
 80102ac:	69fa      	ldr	r2, [r7, #28]
 80102ae:	6a3b      	ldr	r3, [r7, #32]
 80102b0:	4413      	add	r3, r2
 80102b2:	61fb      	str	r3, [r7, #28]
        write_data += current_size;
 80102b4:	69ba      	ldr	r2, [r7, #24]
 80102b6:	6a3b      	ldr	r3, [r7, #32]
 80102b8:	4413      	add	r3, r2
 80102ba:	61bb      	str	r3, [r7, #24]
        current_size = ((current_addr + MT25TL01G_PAGE_SIZE) > end_addr) ? (end_addr - current_addr) : MT25TL01G_PAGE_SIZE;
 80102bc:	69fb      	ldr	r3, [r7, #28]
 80102be:	f503 7380 	add.w	r3, r3, #256	@ 0x100
 80102c2:	697a      	ldr	r2, [r7, #20]
 80102c4:	429a      	cmp	r2, r3
 80102c6:	d203      	bcs.n	80102d0 <BSP_QSPI_Write+0x110>
 80102c8:	697a      	ldr	r2, [r7, #20]
 80102ca:	69fb      	ldr	r3, [r7, #28]
 80102cc:	1ad3      	subs	r3, r2, r3
 80102ce:	e001      	b.n	80102d4 <BSP_QSPI_Write+0x114>
 80102d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80102d4:	623b      	str	r3, [r7, #32]
      }
    } while ((current_addr < end_addr) && (ret == BSP_ERROR_NONE));
 80102d6:	69fa      	ldr	r2, [r7, #28]
 80102d8:	697b      	ldr	r3, [r7, #20]
 80102da:	429a      	cmp	r2, r3
 80102dc:	d202      	bcs.n	80102e4 <BSP_QSPI_Write+0x124>
 80102de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80102e0:	2b00      	cmp	r3, #0
 80102e2:	d090      	beq.n	8010206 <BSP_QSPI_Write+0x46>
  }

  /* Return BSP status */
  return ret;
 80102e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80102e6:	4618      	mov	r0, r3
 80102e8:	3728      	adds	r7, #40	@ 0x28
 80102ea:	46bd      	mov	sp, r7
 80102ec:	bd80      	pop	{r7, pc}
 80102ee:	bf00      	nop
 80102f0:	240087e0 	.word	0x240087e0
 80102f4:	24008794 	.word	0x24008794

080102f8 <BSP_QSPI_EraseBlock>:
  * @param  BlockAddress Block address to erase
  * @param  BlockSize    Erase Block size
  * @retval BSP status
  */
int32_t BSP_QSPI_EraseBlock(uint32_t Instance, uint32_t BlockAddress, BSP_QSPI_Erase_t BlockSize)
{
 80102f8:	b580      	push	{r7, lr}
 80102fa:	b086      	sub	sp, #24
 80102fc:	af00      	add	r7, sp, #0
 80102fe:	60f8      	str	r0, [r7, #12]
 8010300:	60b9      	str	r1, [r7, #8]
 8010302:	4613      	mov	r3, r2
 8010304:	71fb      	strb	r3, [r7, #7]
  int32_t ret = BSP_ERROR_NONE;
 8010306:	2300      	movs	r3, #0
 8010308:	617b      	str	r3, [r7, #20]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 801030a:	68fb      	ldr	r3, [r7, #12]
 801030c:	2b00      	cmp	r3, #0
 801030e:	d003      	beq.n	8010318 <BSP_QSPI_EraseBlock+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010310:	f06f 0301 	mvn.w	r3, #1
 8010314:	617b      	str	r3, [r7, #20]
 8010316:	e03b      	b.n	8010390 <BSP_QSPI_EraseBlock+0x98>
  }
  else
  {
    /* Check Flash busy ? */
    if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010318:	4920      	ldr	r1, [pc, #128]	@ (801039c <BSP_QSPI_EraseBlock+0xa4>)
 801031a:	68fa      	ldr	r2, [r7, #12]
 801031c:	4613      	mov	r3, r2
 801031e:	005b      	lsls	r3, r3, #1
 8010320:	4413      	add	r3, r2
 8010322:	009b      	lsls	r3, r3, #2
 8010324:	440b      	add	r3, r1
 8010326:	3301      	adds	r3, #1
 8010328:	781b      	ldrb	r3, [r3, #0]
 801032a:	4619      	mov	r1, r3
 801032c:	481c      	ldr	r0, [pc, #112]	@ (80103a0 <BSP_QSPI_EraseBlock+0xa8>)
 801032e:	f7f0 fd43 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
 8010332:	4603      	mov	r3, r0
 8010334:	2b00      	cmp	r3, #0
 8010336:	d003      	beq.n	8010340 <BSP_QSPI_EraseBlock+0x48>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010338:	f06f 0304 	mvn.w	r3, #4
 801033c:	617b      	str	r3, [r7, #20]
 801033e:	e027      	b.n	8010390 <BSP_QSPI_EraseBlock+0x98>
    }/* Enable write operations */
    else if(MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010340:	4916      	ldr	r1, [pc, #88]	@ (801039c <BSP_QSPI_EraseBlock+0xa4>)
 8010342:	68fa      	ldr	r2, [r7, #12]
 8010344:	4613      	mov	r3, r2
 8010346:	005b      	lsls	r3, r3, #1
 8010348:	4413      	add	r3, r2
 801034a:	009b      	lsls	r3, r3, #2
 801034c:	440b      	add	r3, r1
 801034e:	3301      	adds	r3, #1
 8010350:	781b      	ldrb	r3, [r3, #0]
 8010352:	4619      	mov	r1, r3
 8010354:	4812      	ldr	r0, [pc, #72]	@ (80103a0 <BSP_QSPI_EraseBlock+0xa8>)
 8010356:	f7f0 fd6b 	bl	8000e30 <MT25TL01G_WriteEnable>
 801035a:	4603      	mov	r3, r0
 801035c:	2b00      	cmp	r3, #0
 801035e:	d003      	beq.n	8010368 <BSP_QSPI_EraseBlock+0x70>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8010360:	f06f 0304 	mvn.w	r3, #4
 8010364:	617b      	str	r3, [r7, #20]
 8010366:	e013      	b.n	8010390 <BSP_QSPI_EraseBlock+0x98>
    }
    else
    {
      /* Issue Block Erase command */
      if(MT25TL01G_BlockErase(&hqspi, QSPI_Ctx[Instance].InterfaceMode, BlockAddress, (MT25TL01G_Erase_t)BlockSize) != MT25TL01G_OK)
 8010368:	490c      	ldr	r1, [pc, #48]	@ (801039c <BSP_QSPI_EraseBlock+0xa4>)
 801036a:	68fa      	ldr	r2, [r7, #12]
 801036c:	4613      	mov	r3, r2
 801036e:	005b      	lsls	r3, r3, #1
 8010370:	4413      	add	r3, r2
 8010372:	009b      	lsls	r3, r3, #2
 8010374:	440b      	add	r3, r1
 8010376:	3301      	adds	r3, #1
 8010378:	7819      	ldrb	r1, [r3, #0]
 801037a:	79fb      	ldrb	r3, [r7, #7]
 801037c:	68ba      	ldr	r2, [r7, #8]
 801037e:	4808      	ldr	r0, [pc, #32]	@ (80103a0 <BSP_QSPI_EraseBlock+0xa8>)
 8010380:	f7f0 ff16 	bl	80011b0 <MT25TL01G_BlockErase>
 8010384:	4603      	mov	r3, r0
 8010386:	2b00      	cmp	r3, #0
 8010388:	d002      	beq.n	8010390 <BSP_QSPI_EraseBlock+0x98>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801038a:	f06f 0304 	mvn.w	r3, #4
 801038e:	617b      	str	r3, [r7, #20]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8010390:	697b      	ldr	r3, [r7, #20]
}
 8010392:	4618      	mov	r0, r3
 8010394:	3718      	adds	r7, #24
 8010396:	46bd      	mov	sp, r7
 8010398:	bd80      	pop	{r7, pc}
 801039a:	bf00      	nop
 801039c:	240087e0 	.word	0x240087e0
 80103a0:	24008794 	.word	0x24008794

080103a4 <BSP_QSPI_GetInfo>:
  * @param  Instance  QSPI instance
  * @param  pInfo     pointer on the configuration structure
  * @retval BSP status
  */
int32_t BSP_QSPI_GetInfo(uint32_t Instance, BSP_QSPI_Info_t *pInfo)
{
 80103a4:	b580      	push	{r7, lr}
 80103a6:	b084      	sub	sp, #16
 80103a8:	af00      	add	r7, sp, #0
 80103aa:	6078      	str	r0, [r7, #4]
 80103ac:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 80103ae:	2300      	movs	r3, #0
 80103b0:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	2b00      	cmp	r3, #0
 80103b6:	d003      	beq.n	80103c0 <BSP_QSPI_GetInfo+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80103b8:	f06f 0301 	mvn.w	r3, #1
 80103bc:	60fb      	str	r3, [r7, #12]
 80103be:	e002      	b.n	80103c6 <BSP_QSPI_GetInfo+0x22>
  }
  else
  {
    (void)MT25TL01G_GetFlashInfo(pInfo);
 80103c0:	6838      	ldr	r0, [r7, #0]
 80103c2:	f7f0 fc8a 	bl	8000cda <MT25TL01G_GetFlashInfo>
  }

  /* Return BSP status */
  return ret;
 80103c6:	68fb      	ldr	r3, [r7, #12]
}
 80103c8:	4618      	mov	r0, r3
 80103ca:	3710      	adds	r7, #16
 80103cc:	46bd      	mov	sp, r7
 80103ce:	bd80      	pop	{r7, pc}

080103d0 <BSP_QSPI_EnableMemoryMappedMode>:
  *         Only 1 Instance can running MMP mode. And it will lock system at this mode.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
int32_t BSP_QSPI_EnableMemoryMappedMode(uint32_t Instance)
{
 80103d0:	b580      	push	{r7, lr}
 80103d2:	b084      	sub	sp, #16
 80103d4:	af00      	add	r7, sp, #0
 80103d6:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80103d8:	2300      	movs	r3, #0
 80103da:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 80103dc:	687b      	ldr	r3, [r7, #4]
 80103de:	2b00      	cmp	r3, #0
 80103e0:	d003      	beq.n	80103ea <BSP_QSPI_EnableMemoryMappedMode+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80103e2:	f06f 0301 	mvn.w	r3, #1
 80103e6:	60fb      	str	r3, [r7, #12]
 80103e8:	e045      	b.n	8010476 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
  }
  else
  {
    if(QSPI_Ctx[Instance].TransferRate == BSP_QSPI_STR_TRANSFER)
 80103ea:	4925      	ldr	r1, [pc, #148]	@ (8010480 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 80103ec:	687a      	ldr	r2, [r7, #4]
 80103ee:	4613      	mov	r3, r2
 80103f0:	005b      	lsls	r3, r3, #1
 80103f2:	4413      	add	r3, r2
 80103f4:	009b      	lsls	r3, r3, #2
 80103f6:	440b      	add	r3, r1
 80103f8:	3302      	adds	r3, #2
 80103fa:	781b      	ldrb	r3, [r3, #0]
 80103fc:	2b00      	cmp	r3, #0
 80103fe:	d11d      	bne.n	801043c <BSP_QSPI_EnableMemoryMappedMode+0x6c>
    {
      if(MT25TL01G_EnableMemoryMappedModeSTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010400:	491f      	ldr	r1, [pc, #124]	@ (8010480 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8010402:	687a      	ldr	r2, [r7, #4]
 8010404:	4613      	mov	r3, r2
 8010406:	005b      	lsls	r3, r3, #1
 8010408:	4413      	add	r3, r2
 801040a:	009b      	lsls	r3, r3, #2
 801040c:	440b      	add	r3, r1
 801040e:	3301      	adds	r3, #1
 8010410:	781b      	ldrb	r3, [r3, #0]
 8010412:	4619      	mov	r1, r3
 8010414:	481b      	ldr	r0, [pc, #108]	@ (8010484 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8010416:	f7f1 f819 	bl	800144c <MT25TL01G_EnableMemoryMappedModeSTR>
 801041a:	4603      	mov	r3, r0
 801041c:	2b00      	cmp	r3, #0
 801041e:	d003      	beq.n	8010428 <BSP_QSPI_EnableMemoryMappedMode+0x58>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8010420:	f06f 0304 	mvn.w	r3, #4
 8010424:	60fb      	str	r3, [r7, #12]
 8010426:	e026      	b.n	8010476 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8010428:	4915      	ldr	r1, [pc, #84]	@ (8010480 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 801042a:	687a      	ldr	r2, [r7, #4]
 801042c:	4613      	mov	r3, r2
 801042e:	005b      	lsls	r3, r3, #1
 8010430:	4413      	add	r3, r2
 8010432:	009b      	lsls	r3, r3, #2
 8010434:	440b      	add	r3, r1
 8010436:	2202      	movs	r2, #2
 8010438:	701a      	strb	r2, [r3, #0]
 801043a:	e01c      	b.n	8010476 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
    }
    else
    {
      if(MT25TL01G_EnableMemoryMappedModeDTR(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 801043c:	4910      	ldr	r1, [pc, #64]	@ (8010480 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 801043e:	687a      	ldr	r2, [r7, #4]
 8010440:	4613      	mov	r3, r2
 8010442:	005b      	lsls	r3, r3, #1
 8010444:	4413      	add	r3, r2
 8010446:	009b      	lsls	r3, r3, #2
 8010448:	440b      	add	r3, r1
 801044a:	3301      	adds	r3, #1
 801044c:	781b      	ldrb	r3, [r3, #0]
 801044e:	4619      	mov	r1, r3
 8010450:	480c      	ldr	r0, [pc, #48]	@ (8010484 <BSP_QSPI_EnableMemoryMappedMode+0xb4>)
 8010452:	f7f0 ff91 	bl	8001378 <MT25TL01G_EnableMemoryMappedModeDTR>
 8010456:	4603      	mov	r3, r0
 8010458:	2b00      	cmp	r3, #0
 801045a:	d003      	beq.n	8010464 <BSP_QSPI_EnableMemoryMappedMode+0x94>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 801045c:	f06f 0304 	mvn.w	r3, #4
 8010460:	60fb      	str	r3, [r7, #12]
 8010462:	e008      	b.n	8010476 <BSP_QSPI_EnableMemoryMappedMode+0xa6>
      }
      else /* Update QSPI context if all operations are well done */
      {
        QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_MMP;
 8010464:	4906      	ldr	r1, [pc, #24]	@ (8010480 <BSP_QSPI_EnableMemoryMappedMode+0xb0>)
 8010466:	687a      	ldr	r2, [r7, #4]
 8010468:	4613      	mov	r3, r2
 801046a:	005b      	lsls	r3, r3, #1
 801046c:	4413      	add	r3, r2
 801046e:	009b      	lsls	r3, r3, #2
 8010470:	440b      	add	r3, r1
 8010472:	2202      	movs	r2, #2
 8010474:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 8010476:	68fb      	ldr	r3, [r7, #12]
}
 8010478:	4618      	mov	r0, r3
 801047a:	3710      	adds	r7, #16
 801047c:	46bd      	mov	sp, r7
 801047e:	bd80      	pop	{r7, pc}
 8010480:	240087e0 	.word	0x240087e0
 8010484:	24008794 	.word	0x24008794

08010488 <BSP_QSPI_ConfigFlash>:
  * @param  Mode      QSPI mode
  * @param  Rate      QSPI transfer rate
  * @retval BSP status
  */
int32_t BSP_QSPI_ConfigFlash(uint32_t Instance, BSP_QSPI_Interface_t Mode, BSP_QSPI_Transfer_t Rate)
{
 8010488:	b580      	push	{r7, lr}
 801048a:	b084      	sub	sp, #16
 801048c:	af00      	add	r7, sp, #0
 801048e:	6078      	str	r0, [r7, #4]
 8010490:	460b      	mov	r3, r1
 8010492:	70fb      	strb	r3, [r7, #3]
 8010494:	4613      	mov	r3, r2
 8010496:	70bb      	strb	r3, [r7, #2]
  int32_t ret = BSP_ERROR_NONE;
 8010498:	2300      	movs	r3, #0
 801049a:	60fb      	str	r3, [r7, #12]

  /* Check if the instance is supported */
  if(Instance >= QSPI_INSTANCES_NUMBER)
 801049c:	687b      	ldr	r3, [r7, #4]
 801049e:	2b00      	cmp	r3, #0
 80104a0:	d003      	beq.n	80104aa <BSP_QSPI_ConfigFlash+0x22>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80104a2:	f06f 0301 	mvn.w	r3, #1
 80104a6:	60fb      	str	r3, [r7, #12]
 80104a8:	e067      	b.n	801057a <BSP_QSPI_ConfigFlash+0xf2>
  }
  else
  {
    /* Check if MMP mode locked ************************************************/
    if(QSPI_Ctx[Instance].IsInitialized == QSPI_ACCESS_MMP)
 80104aa:	4936      	ldr	r1, [pc, #216]	@ (8010584 <BSP_QSPI_ConfigFlash+0xfc>)
 80104ac:	687a      	ldr	r2, [r7, #4]
 80104ae:	4613      	mov	r3, r2
 80104b0:	005b      	lsls	r3, r3, #1
 80104b2:	4413      	add	r3, r2
 80104b4:	009b      	lsls	r3, r3, #2
 80104b6:	440b      	add	r3, r1
 80104b8:	781b      	ldrb	r3, [r3, #0]
 80104ba:	2b02      	cmp	r3, #2
 80104bc:	d103      	bne.n	80104c6 <BSP_QSPI_ConfigFlash+0x3e>
    {
      ret = BSP_ERROR_QSPI_MMP_LOCK_FAILURE;
 80104be:	f06f 0319 	mvn.w	r3, #25
 80104c2:	60fb      	str	r3, [r7, #12]
 80104c4:	e059      	b.n	801057a <BSP_QSPI_ConfigFlash+0xf2>
    }
    else
    {
      /* Setup MCU transfer rate setting ***************************************************/
      hqspi.Init.SampleShifting = (Rate == BSP_QSPI_STR_TRANSFER) ? QSPI_SAMPLE_SHIFTING_HALFCYCLE : QSPI_SAMPLE_SHIFTING_NONE;
 80104c6:	78bb      	ldrb	r3, [r7, #2]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d101      	bne.n	80104d0 <BSP_QSPI_ConfigFlash+0x48>
 80104cc:	2310      	movs	r3, #16
 80104ce:	e000      	b.n	80104d2 <BSP_QSPI_ConfigFlash+0x4a>
 80104d0:	2300      	movs	r3, #0
 80104d2:	4a2d      	ldr	r2, [pc, #180]	@ (8010588 <BSP_QSPI_ConfigFlash+0x100>)
 80104d4:	60d3      	str	r3, [r2, #12]

      if(HAL_QSPI_Init(&hqspi)!= HAL_OK)
 80104d6:	482c      	ldr	r0, [pc, #176]	@ (8010588 <BSP_QSPI_ConfigFlash+0x100>)
 80104d8:	f009 f97a 	bl	80197d0 <HAL_QSPI_Init>
 80104dc:	4603      	mov	r3, r0
 80104de:	2b00      	cmp	r3, #0
 80104e0:	d003      	beq.n	80104ea <BSP_QSPI_ConfigFlash+0x62>
      {
        ret = BSP_ERROR_PERIPH_FAILURE;
 80104e2:	f06f 0303 	mvn.w	r3, #3
 80104e6:	60fb      	str	r3, [r7, #12]
 80104e8:	e047      	b.n	801057a <BSP_QSPI_ConfigFlash+0xf2>
      }
      else
      {
        /* Setup Flash interface ***************************************************/
        switch(QSPI_Ctx[Instance].InterfaceMode)
 80104ea:	4926      	ldr	r1, [pc, #152]	@ (8010584 <BSP_QSPI_ConfigFlash+0xfc>)
 80104ec:	687a      	ldr	r2, [r7, #4]
 80104ee:	4613      	mov	r3, r2
 80104f0:	005b      	lsls	r3, r3, #1
 80104f2:	4413      	add	r3, r2
 80104f4:	009b      	lsls	r3, r3, #2
 80104f6:	440b      	add	r3, r1
 80104f8:	3301      	adds	r3, #1
 80104fa:	781b      	ldrb	r3, [r3, #0]
 80104fc:	2b03      	cmp	r3, #3
 80104fe:	d10c      	bne.n	801051a <BSP_QSPI_ConfigFlash+0x92>
        {
        case MT25TL01G_QPI_MODE :               /* 4-4-4 commands */
          if(Mode != MT25TL01G_QPI_MODE)
 8010500:	78fb      	ldrb	r3, [r7, #3]
 8010502:	2b03      	cmp	r3, #3
 8010504:	d016      	beq.n	8010534 <BSP_QSPI_ConfigFlash+0xac>
          {
            if(MT25TL01G_ExitQPIMode(&hqspi) != MT25TL01G_OK)
 8010506:	4820      	ldr	r0, [pc, #128]	@ (8010588 <BSP_QSPI_ConfigFlash+0x100>)
 8010508:	f7f0 ff0b 	bl	8001322 <MT25TL01G_ExitQPIMode>
 801050c:	4603      	mov	r3, r0
 801050e:	2b00      	cmp	r3, #0
 8010510:	d010      	beq.n	8010534 <BSP_QSPI_ConfigFlash+0xac>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 8010512:	f06f 0304 	mvn.w	r3, #4
 8010516:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8010518:	e00c      	b.n	8010534 <BSP_QSPI_ConfigFlash+0xac>

        case BSP_QSPI_SPI_MODE :               /* 1-1-1 commands, Power on H/W default setting */
        case BSP_QSPI_SPI_2IO_MODE :           /* 1-2-2 read commands */
        case BSP_QSPI_SPI_4IO_MODE :           /* 1-4-4 read commands */
        default :
          if(Mode == MT25TL01G_QPI_MODE)
 801051a:	78fb      	ldrb	r3, [r7, #3]
 801051c:	2b03      	cmp	r3, #3
 801051e:	d10b      	bne.n	8010538 <BSP_QSPI_ConfigFlash+0xb0>
          {
            if(MT25TL01G_EnterQPIMode(&hqspi) != MT25TL01G_OK)
 8010520:	4819      	ldr	r0, [pc, #100]	@ (8010588 <BSP_QSPI_ConfigFlash+0x100>)
 8010522:	f7f0 fed4 	bl	80012ce <MT25TL01G_EnterQPIMode>
 8010526:	4603      	mov	r3, r0
 8010528:	2b00      	cmp	r3, #0
 801052a:	d005      	beq.n	8010538 <BSP_QSPI_ConfigFlash+0xb0>
            {
              ret = BSP_ERROR_COMPONENT_FAILURE;
 801052c:	f06f 0304 	mvn.w	r3, #4
 8010530:	60fb      	str	r3, [r7, #12]
            }
          }
          break;
 8010532:	e001      	b.n	8010538 <BSP_QSPI_ConfigFlash+0xb0>
          break;
 8010534:	bf00      	nop
 8010536:	e000      	b.n	801053a <BSP_QSPI_ConfigFlash+0xb2>
          break;
 8010538:	bf00      	nop
        }

        /* Update QSPI context if all operations are well done */
        if(ret == BSP_ERROR_NONE)
 801053a:	68fb      	ldr	r3, [r7, #12]
 801053c:	2b00      	cmp	r3, #0
 801053e:	d11c      	bne.n	801057a <BSP_QSPI_ConfigFlash+0xf2>
        {
          /* Update current status parameter *****************************************/
          QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;
 8010540:	4910      	ldr	r1, [pc, #64]	@ (8010584 <BSP_QSPI_ConfigFlash+0xfc>)
 8010542:	687a      	ldr	r2, [r7, #4]
 8010544:	4613      	mov	r3, r2
 8010546:	005b      	lsls	r3, r3, #1
 8010548:	4413      	add	r3, r2
 801054a:	009b      	lsls	r3, r3, #2
 801054c:	440b      	add	r3, r1
 801054e:	2201      	movs	r2, #1
 8010550:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].InterfaceMode = Mode;
 8010552:	490c      	ldr	r1, [pc, #48]	@ (8010584 <BSP_QSPI_ConfigFlash+0xfc>)
 8010554:	687a      	ldr	r2, [r7, #4]
 8010556:	4613      	mov	r3, r2
 8010558:	005b      	lsls	r3, r3, #1
 801055a:	4413      	add	r3, r2
 801055c:	009b      	lsls	r3, r3, #2
 801055e:	440b      	add	r3, r1
 8010560:	3301      	adds	r3, #1
 8010562:	78fa      	ldrb	r2, [r7, #3]
 8010564:	701a      	strb	r2, [r3, #0]
          QSPI_Ctx[Instance].TransferRate  = Rate;
 8010566:	4907      	ldr	r1, [pc, #28]	@ (8010584 <BSP_QSPI_ConfigFlash+0xfc>)
 8010568:	687a      	ldr	r2, [r7, #4]
 801056a:	4613      	mov	r3, r2
 801056c:	005b      	lsls	r3, r3, #1
 801056e:	4413      	add	r3, r2
 8010570:	009b      	lsls	r3, r3, #2
 8010572:	440b      	add	r3, r1
 8010574:	3302      	adds	r3, #2
 8010576:	78ba      	ldrb	r2, [r7, #2]
 8010578:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Return BSP status */
  return ret;
 801057a:	68fb      	ldr	r3, [r7, #12]
}
 801057c:	4618      	mov	r0, r3
 801057e:	3710      	adds	r7, #16
 8010580:	46bd      	mov	sp, r7
 8010582:	bd80      	pop	{r7, pc}
 8010584:	240087e0 	.word	0x240087e0
 8010588:	24008794 	.word	0x24008794

0801058c <QSPI_MspInit>:
  *           - Peripheral's GPIO Configuration
  *           - NVIC configuration for QSPI interrupt
  * @retval None
  */
static void QSPI_MspInit(QSPI_HandleTypeDef *hQspi)
{
 801058c:	b580      	push	{r7, lr}
 801058e:	b094      	sub	sp, #80	@ 0x50
 8010590:	af00      	add	r7, sp, #0
 8010592:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  /*##-1- Enable peripherals and GPIO Clocks #################################*/
  /* Enable the QuadSPI memory interface clock */
  QSPI_CLK_ENABLE();
 8010594:	4b9b      	ldr	r3, [pc, #620]	@ (8010804 <QSPI_MspInit+0x278>)
 8010596:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801059a:	4a9a      	ldr	r2, [pc, #616]	@ (8010804 <QSPI_MspInit+0x278>)
 801059c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80105a0:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 80105a4:	4b97      	ldr	r3, [pc, #604]	@ (8010804 <QSPI_MspInit+0x278>)
 80105a6:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 80105aa:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80105ae:	63bb      	str	r3, [r7, #56]	@ 0x38
 80105b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
  /* Reset the QuadSPI memory interface */
  QSPI_FORCE_RESET();
 80105b2:	4b94      	ldr	r3, [pc, #592]	@ (8010804 <QSPI_MspInit+0x278>)
 80105b4:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105b6:	4a93      	ldr	r2, [pc, #588]	@ (8010804 <QSPI_MspInit+0x278>)
 80105b8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80105bc:	67d3      	str	r3, [r2, #124]	@ 0x7c
  QSPI_RELEASE_RESET();
 80105be:	4b91      	ldr	r3, [pc, #580]	@ (8010804 <QSPI_MspInit+0x278>)
 80105c0:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80105c2:	4a90      	ldr	r2, [pc, #576]	@ (8010804 <QSPI_MspInit+0x278>)
 80105c4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80105c8:	67d3      	str	r3, [r2, #124]	@ 0x7c
  /* Enable GPIO clocks */
  QSPI_CLK_GPIO_CLK_ENABLE();
 80105ca:	4b8e      	ldr	r3, [pc, #568]	@ (8010804 <QSPI_MspInit+0x278>)
 80105cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105d0:	4a8c      	ldr	r2, [pc, #560]	@ (8010804 <QSPI_MspInit+0x278>)
 80105d2:	f043 0302 	orr.w	r3, r3, #2
 80105d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105da:	4b8a      	ldr	r3, [pc, #552]	@ (8010804 <QSPI_MspInit+0x278>)
 80105dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105e0:	f003 0302 	and.w	r3, r3, #2
 80105e4:	637b      	str	r3, [r7, #52]	@ 0x34
 80105e6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
  QSPI_BK1_CS_GPIO_CLK_ENABLE();
 80105e8:	4b86      	ldr	r3, [pc, #536]	@ (8010804 <QSPI_MspInit+0x278>)
 80105ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105ee:	4a85      	ldr	r2, [pc, #532]	@ (8010804 <QSPI_MspInit+0x278>)
 80105f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80105f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80105f8:	4b82      	ldr	r3, [pc, #520]	@ (8010804 <QSPI_MspInit+0x278>)
 80105fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80105fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010602:	633b      	str	r3, [r7, #48]	@ 0x30
 8010604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
  QSPI_BK1_D0_GPIO_CLK_ENABLE();
 8010606:	4b7f      	ldr	r3, [pc, #508]	@ (8010804 <QSPI_MspInit+0x278>)
 8010608:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801060c:	4a7d      	ldr	r2, [pc, #500]	@ (8010804 <QSPI_MspInit+0x278>)
 801060e:	f043 0308 	orr.w	r3, r3, #8
 8010612:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010616:	4b7b      	ldr	r3, [pc, #492]	@ (8010804 <QSPI_MspInit+0x278>)
 8010618:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801061c:	f003 0308 	and.w	r3, r3, #8
 8010620:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010622:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
  QSPI_BK1_D1_GPIO_CLK_ENABLE();
 8010624:	4b77      	ldr	r3, [pc, #476]	@ (8010804 <QSPI_MspInit+0x278>)
 8010626:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801062a:	4a76      	ldr	r2, [pc, #472]	@ (8010804 <QSPI_MspInit+0x278>)
 801062c:	f043 0320 	orr.w	r3, r3, #32
 8010630:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010634:	4b73      	ldr	r3, [pc, #460]	@ (8010804 <QSPI_MspInit+0x278>)
 8010636:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801063a:	f003 0320 	and.w	r3, r3, #32
 801063e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010640:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  QSPI_BK1_D2_GPIO_CLK_ENABLE();
 8010642:	4b70      	ldr	r3, [pc, #448]	@ (8010804 <QSPI_MspInit+0x278>)
 8010644:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010648:	4a6e      	ldr	r2, [pc, #440]	@ (8010804 <QSPI_MspInit+0x278>)
 801064a:	f043 0320 	orr.w	r3, r3, #32
 801064e:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010652:	4b6c      	ldr	r3, [pc, #432]	@ (8010804 <QSPI_MspInit+0x278>)
 8010654:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010658:	f003 0320 	and.w	r3, r3, #32
 801065c:	627b      	str	r3, [r7, #36]	@ 0x24
 801065e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
  QSPI_BK1_D3_GPIO_CLK_ENABLE();
 8010660:	4b68      	ldr	r3, [pc, #416]	@ (8010804 <QSPI_MspInit+0x278>)
 8010662:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010666:	4a67      	ldr	r2, [pc, #412]	@ (8010804 <QSPI_MspInit+0x278>)
 8010668:	f043 0320 	orr.w	r3, r3, #32
 801066c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010670:	4b64      	ldr	r3, [pc, #400]	@ (8010804 <QSPI_MspInit+0x278>)
 8010672:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010676:	f003 0320 	and.w	r3, r3, #32
 801067a:	623b      	str	r3, [r7, #32]
 801067c:	6a3b      	ldr	r3, [r7, #32]

  QSPI_BK2_CS_GPIO_CLK_ENABLE();
 801067e:	4b61      	ldr	r3, [pc, #388]	@ (8010804 <QSPI_MspInit+0x278>)
 8010680:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010684:	4a5f      	ldr	r2, [pc, #380]	@ (8010804 <QSPI_MspInit+0x278>)
 8010686:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801068a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801068e:	4b5d      	ldr	r3, [pc, #372]	@ (8010804 <QSPI_MspInit+0x278>)
 8010690:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010694:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010698:	61fb      	str	r3, [r7, #28]
 801069a:	69fb      	ldr	r3, [r7, #28]
  QSPI_BK2_D0_GPIO_CLK_ENABLE();
 801069c:	4b59      	ldr	r3, [pc, #356]	@ (8010804 <QSPI_MspInit+0x278>)
 801069e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106a2:	4a58      	ldr	r2, [pc, #352]	@ (8010804 <QSPI_MspInit+0x278>)
 80106a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106a8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80106ac:	4b55      	ldr	r3, [pc, #340]	@ (8010804 <QSPI_MspInit+0x278>)
 80106ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106b2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106b6:	61bb      	str	r3, [r7, #24]
 80106b8:	69bb      	ldr	r3, [r7, #24]
  QSPI_BK2_D1_GPIO_CLK_ENABLE();
 80106ba:	4b52      	ldr	r3, [pc, #328]	@ (8010804 <QSPI_MspInit+0x278>)
 80106bc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106c0:	4a50      	ldr	r2, [pc, #320]	@ (8010804 <QSPI_MspInit+0x278>)
 80106c2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80106c6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80106ca:	4b4e      	ldr	r3, [pc, #312]	@ (8010804 <QSPI_MspInit+0x278>)
 80106cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80106d4:	617b      	str	r3, [r7, #20]
 80106d6:	697b      	ldr	r3, [r7, #20]
  QSPI_BK2_D2_GPIO_CLK_ENABLE();
 80106d8:	4b4a      	ldr	r3, [pc, #296]	@ (8010804 <QSPI_MspInit+0x278>)
 80106da:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106de:	4a49      	ldr	r2, [pc, #292]	@ (8010804 <QSPI_MspInit+0x278>)
 80106e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80106e4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80106e8:	4b46      	ldr	r3, [pc, #280]	@ (8010804 <QSPI_MspInit+0x278>)
 80106ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80106f2:	613b      	str	r3, [r7, #16]
 80106f4:	693b      	ldr	r3, [r7, #16]
  QSPI_BK2_D3_GPIO_CLK_ENABLE();
 80106f6:	4b43      	ldr	r3, [pc, #268]	@ (8010804 <QSPI_MspInit+0x278>)
 80106f8:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80106fc:	4a41      	ldr	r2, [pc, #260]	@ (8010804 <QSPI_MspInit+0x278>)
 80106fe:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8010702:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010706:	4b3f      	ldr	r3, [pc, #252]	@ (8010804 <QSPI_MspInit+0x278>)
 8010708:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801070c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8010710:	60fb      	str	r3, [r7, #12]
 8010712:	68fb      	ldr	r3, [r7, #12]

  /*##-2- Configure peripheral GPIO ##########################################*/
  /* QSPI CLK GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_CLK_PIN;
 8010714:	2304      	movs	r3, #4
 8010716:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8010718:	2302      	movs	r3, #2
 801071a:	643b      	str	r3, [r7, #64]	@ 0x40
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 801071c:	2303      	movs	r3, #3
 801071e:	64bb      	str	r3, [r7, #72]	@ 0x48
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8010720:	2300      	movs	r3, #0
 8010722:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010724:	2309      	movs	r3, #9
 8010726:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_CLK_GPIO_PORT, &gpio_init_structure);
 8010728:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801072c:	4619      	mov	r1, r3
 801072e:	4836      	ldr	r0, [pc, #216]	@ (8010808 <QSPI_MspInit+0x27c>)
 8010730:	f007 f8ea 	bl	8017908 <HAL_GPIO_Init>

  /* QSPI CS GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_CS_PIN;
 8010734:	2340      	movs	r3, #64	@ 0x40
 8010736:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8010738:	2301      	movs	r3, #1
 801073a:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 801073c:	230a      	movs	r3, #10
 801073e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_CS_GPIO_PORT, &gpio_init_structure);
 8010740:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010744:	4619      	mov	r1, r3
 8010746:	4831      	ldr	r0, [pc, #196]	@ (801080c <QSPI_MspInit+0x280>)
 8010748:	f007 f8de 	bl	8017908 <HAL_GPIO_Init>

  /* QSPI D0 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D0_PIN;
 801074c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8010750:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Pull      = GPIO_NOPULL;
 8010752:	2300      	movs	r3, #0
 8010754:	647b      	str	r3, [r7, #68]	@ 0x44
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010756:	2309      	movs	r3, #9
 8010758:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D0_GPIO_PORT, &gpio_init_structure);
 801075a:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801075e:	4619      	mov	r1, r3
 8010760:	482b      	ldr	r0, [pc, #172]	@ (8010810 <QSPI_MspInit+0x284>)
 8010762:	f007 f8d1 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D0_PIN;
 8010766:	2304      	movs	r3, #4
 8010768:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 801076a:	2309      	movs	r3, #9
 801076c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D0_GPIO_PORT, &gpio_init_structure);
 801076e:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010772:	4619      	mov	r1, r3
 8010774:	4827      	ldr	r0, [pc, #156]	@ (8010814 <QSPI_MspInit+0x288>)
 8010776:	f007 f8c7 	bl	8017908 <HAL_GPIO_Init>

  /* QSPI D1 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D1_PIN;
 801077a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801077e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF10_QUADSPI;
 8010780:	230a      	movs	r3, #10
 8010782:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D1_GPIO_PORT, &gpio_init_structure);
 8010784:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 8010788:	4619      	mov	r1, r3
 801078a:	4823      	ldr	r0, [pc, #140]	@ (8010818 <QSPI_MspInit+0x28c>)
 801078c:	f007 f8bc 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D1_PIN;
 8010790:	2308      	movs	r3, #8
 8010792:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 8010794:	2309      	movs	r3, #9
 8010796:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK2_D1_GPIO_PORT, &gpio_init_structure);
 8010798:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 801079c:	4619      	mov	r1, r3
 801079e:	481d      	ldr	r0, [pc, #116]	@ (8010814 <QSPI_MspInit+0x288>)
 80107a0:	f007 f8b2 	bl	8017908 <HAL_GPIO_Init>

  /* QSPI D2 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D2_PIN;
 80107a4:	2380      	movs	r3, #128	@ 0x80
 80107a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  gpio_init_structure.Alternate = GPIO_AF9_QUADSPI;
 80107a8:	2309      	movs	r3, #9
 80107aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  HAL_GPIO_Init(QSPI_BK1_D2_GPIO_PORT, &gpio_init_structure);
 80107ac:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80107b0:	4619      	mov	r1, r3
 80107b2:	4819      	ldr	r0, [pc, #100]	@ (8010818 <QSPI_MspInit+0x28c>)
 80107b4:	f007 f8a8 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D2_PIN;
 80107b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80107bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D2_GPIO_PORT, &gpio_init_structure);
 80107be:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80107c2:	4619      	mov	r1, r3
 80107c4:	4811      	ldr	r0, [pc, #68]	@ (801080c <QSPI_MspInit+0x280>)
 80107c6:	f007 f89f 	bl	8017908 <HAL_GPIO_Init>

  /* QSPI D3 GPIO pin configuration  */
  gpio_init_structure.Pin       = QSPI_BK1_D3_PIN;
 80107ca:	2340      	movs	r3, #64	@ 0x40
 80107cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK1_D3_GPIO_PORT, &gpio_init_structure);
 80107ce:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80107d2:	4619      	mov	r1, r3
 80107d4:	4810      	ldr	r0, [pc, #64]	@ (8010818 <QSPI_MspInit+0x28c>)
 80107d6:	f007 f897 	bl	8017908 <HAL_GPIO_Init>

  gpio_init_structure.Pin       = QSPI_BK2_D3_PIN;
 80107da:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80107de:	63fb      	str	r3, [r7, #60]	@ 0x3c
  HAL_GPIO_Init(QSPI_BK2_D3_GPIO_PORT, &gpio_init_structure);
 80107e0:	f107 033c 	add.w	r3, r7, #60	@ 0x3c
 80107e4:	4619      	mov	r1, r3
 80107e6:	4809      	ldr	r0, [pc, #36]	@ (801080c <QSPI_MspInit+0x280>)
 80107e8:	f007 f88e 	bl	8017908 <HAL_GPIO_Init>

  /*##-3- Configure the NVIC for QSPI #########################################*/
  /* NVIC configuration for QSPI interrupt */
  HAL_NVIC_SetPriority(QUADSPI_IRQn, 0x0F, 0);
 80107ec:	2200      	movs	r2, #0
 80107ee:	210f      	movs	r1, #15
 80107f0:	205c      	movs	r0, #92	@ 0x5c
 80107f2:	f001 fe0e 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(QUADSPI_IRQn);
 80107f6:	205c      	movs	r0, #92	@ 0x5c
 80107f8:	f001 fe25 	bl	8012446 <HAL_NVIC_EnableIRQ>
}
 80107fc:	bf00      	nop
 80107fe:	3750      	adds	r7, #80	@ 0x50
 8010800:	46bd      	mov	sp, r7
 8010802:	bd80      	pop	{r7, pc}
 8010804:	58024400 	.word	0x58024400
 8010808:	58020400 	.word	0x58020400
 801080c:	58021800 	.word	0x58021800
 8010810:	58020c00 	.word	0x58020c00
 8010814:	58021c00 	.word	0x58021c00
 8010818:	58021400 	.word	0x58021400

0801081c <QSPI_ResetMemory>:
  *         Flash accept 1-1-1, 1-1-2, 1-2-2 commands after reset.
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_ResetMemory(uint32_t Instance)
{
 801081c:	b580      	push	{r7, lr}
 801081e:	b084      	sub	sp, #16
 8010820:	af00      	add	r7, sp, #0
 8010822:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010824:	2300      	movs	r3, #0
 8010826:	60fb      	str	r3, [r7, #12]

  /* Send RESET ENABLE command in QPI mode (QUAD I/Os, 4-4-4) */
  if(MT25TL01G_ResetEnable(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 8010828:	2103      	movs	r1, #3
 801082a:	4830      	ldr	r0, [pc, #192]	@ (80108ec <QSPI_ResetMemory+0xd0>)
 801082c:	f7f0 fe76 	bl	800151c <MT25TL01G_ResetEnable>
 8010830:	4603      	mov	r3, r0
 8010832:	2b00      	cmp	r3, #0
 8010834:	d003      	beq.n	801083e <QSPI_ResetMemory+0x22>
  {
    ret =BSP_ERROR_COMPONENT_FAILURE;
 8010836:	f06f 0304 	mvn.w	r3, #4
 801083a:	60fb      	str	r3, [r7, #12]
 801083c:	e051      	b.n	80108e2 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in QPI mode (QUAD I/Os, 4-4-4) */
  else if(MT25TL01G_ResetMemory(&hqspi, MT25TL01G_QPI_MODE) != MT25TL01G_OK)
 801083e:	2103      	movs	r1, #3
 8010840:	482a      	ldr	r0, [pc, #168]	@ (80108ec <QSPI_ResetMemory+0xd0>)
 8010842:	f7f0 fe9d 	bl	8001580 <MT25TL01G_ResetMemory>
 8010846:	4603      	mov	r3, r0
 8010848:	2b00      	cmp	r3, #0
 801084a:	d003      	beq.n	8010854 <QSPI_ResetMemory+0x38>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801084c:	f06f 0304 	mvn.w	r3, #4
 8010850:	60fb      	str	r3, [r7, #12]
 8010852:	e046      	b.n	80108e2 <QSPI_ResetMemory+0xc6>
  }/* Wait Flash ready */
  else if(MT25TL01G_AutoPollingMemReady(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010854:	4926      	ldr	r1, [pc, #152]	@ (80108f0 <QSPI_ResetMemory+0xd4>)
 8010856:	687a      	ldr	r2, [r7, #4]
 8010858:	4613      	mov	r3, r2
 801085a:	005b      	lsls	r3, r3, #1
 801085c:	4413      	add	r3, r2
 801085e:	009b      	lsls	r3, r3, #2
 8010860:	440b      	add	r3, r1
 8010862:	3301      	adds	r3, #1
 8010864:	781b      	ldrb	r3, [r3, #0]
 8010866:	4619      	mov	r1, r3
 8010868:	4820      	ldr	r0, [pc, #128]	@ (80108ec <QSPI_ResetMemory+0xd0>)
 801086a:	f7f0 faa5 	bl	8000db8 <MT25TL01G_AutoPollingMemReady>
 801086e:	4603      	mov	r3, r0
 8010870:	2b00      	cmp	r3, #0
 8010872:	d003      	beq.n	801087c <QSPI_ResetMemory+0x60>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8010874:	f06f 0304 	mvn.w	r3, #4
 8010878:	60fb      	str	r3, [r7, #12]
 801087a:	e032      	b.n	80108e2 <QSPI_ResetMemory+0xc6>
  }/* Send RESET ENABLE command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetEnable(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 801087c:	2100      	movs	r1, #0
 801087e:	481b      	ldr	r0, [pc, #108]	@ (80108ec <QSPI_ResetMemory+0xd0>)
 8010880:	f7f0 fe4c 	bl	800151c <MT25TL01G_ResetEnable>
 8010884:	4603      	mov	r3, r0
 8010886:	2b00      	cmp	r3, #0
 8010888:	d003      	beq.n	8010892 <QSPI_ResetMemory+0x76>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 801088a:	f06f 0304 	mvn.w	r3, #4
 801088e:	60fb      	str	r3, [r7, #12]
 8010890:	e027      	b.n	80108e2 <QSPI_ResetMemory+0xc6>
  }/* Send RESET memory command in SPI mode (1-1-1) */
  else if(MT25TL01G_ResetMemory(&hqspi, BSP_QSPI_SPI_MODE) != MT25TL01G_OK)
 8010892:	2100      	movs	r1, #0
 8010894:	4815      	ldr	r0, [pc, #84]	@ (80108ec <QSPI_ResetMemory+0xd0>)
 8010896:	f7f0 fe73 	bl	8001580 <MT25TL01G_ResetMemory>
 801089a:	4603      	mov	r3, r0
 801089c:	2b00      	cmp	r3, #0
 801089e:	d003      	beq.n	80108a8 <QSPI_ResetMemory+0x8c>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 80108a0:	f06f 0304 	mvn.w	r3, #4
 80108a4:	60fb      	str	r3, [r7, #12]
 80108a6:	e01c      	b.n	80108e2 <QSPI_ResetMemory+0xc6>
  }
  else
  {
    QSPI_Ctx[Instance].IsInitialized = QSPI_ACCESS_INDIRECT;  /* After reset S/W setting to indirect access   */
 80108a8:	4911      	ldr	r1, [pc, #68]	@ (80108f0 <QSPI_ResetMemory+0xd4>)
 80108aa:	687a      	ldr	r2, [r7, #4]
 80108ac:	4613      	mov	r3, r2
 80108ae:	005b      	lsls	r3, r3, #1
 80108b0:	4413      	add	r3, r2
 80108b2:	009b      	lsls	r3, r3, #2
 80108b4:	440b      	add	r3, r1
 80108b6:	2201      	movs	r2, #1
 80108b8:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].InterfaceMode = BSP_QSPI_SPI_MODE;     /* After reset H/W back to SPI mode by default  */
 80108ba:	490d      	ldr	r1, [pc, #52]	@ (80108f0 <QSPI_ResetMemory+0xd4>)
 80108bc:	687a      	ldr	r2, [r7, #4]
 80108be:	4613      	mov	r3, r2
 80108c0:	005b      	lsls	r3, r3, #1
 80108c2:	4413      	add	r3, r2
 80108c4:	009b      	lsls	r3, r3, #2
 80108c6:	440b      	add	r3, r1
 80108c8:	3301      	adds	r3, #1
 80108ca:	2200      	movs	r2, #0
 80108cc:	701a      	strb	r2, [r3, #0]
    QSPI_Ctx[Instance].TransferRate  = BSP_QSPI_STR_TRANSFER; /* After reset S/W setting to STR mode          */
 80108ce:	4908      	ldr	r1, [pc, #32]	@ (80108f0 <QSPI_ResetMemory+0xd4>)
 80108d0:	687a      	ldr	r2, [r7, #4]
 80108d2:	4613      	mov	r3, r2
 80108d4:	005b      	lsls	r3, r3, #1
 80108d6:	4413      	add	r3, r2
 80108d8:	009b      	lsls	r3, r3, #2
 80108da:	440b      	add	r3, r1
 80108dc:	3302      	adds	r3, #2
 80108de:	2200      	movs	r2, #0
 80108e0:	701a      	strb	r2, [r3, #0]
  }

  /* Return BSP status */
  return ret;
 80108e2:	68fb      	ldr	r3, [r7, #12]
}
 80108e4:	4618      	mov	r0, r3
 80108e6:	3710      	adds	r7, #16
 80108e8:	46bd      	mov	sp, r7
 80108ea:	bd80      	pop	{r7, pc}
 80108ec:	24008794 	.word	0x24008794
 80108f0:	240087e0 	.word	0x240087e0

080108f4 <QSPI_DummyCyclesCfg>:
  *         Dummy cycle bit locate in Configuration Register[7:6]
  * @param  Instance  QSPI instance
  * @retval BSP status
  */
static int32_t QSPI_DummyCyclesCfg(uint32_t Instance)
{
 80108f4:	b580      	push	{r7, lr}
 80108f6:	b092      	sub	sp, #72	@ 0x48
 80108f8:	af00      	add	r7, sp, #0
 80108fa:	6078      	str	r0, [r7, #4]
    int32_t ret= BSP_ERROR_NONE;
 80108fc:	2300      	movs	r3, #0
 80108fe:	647b      	str	r3, [r7, #68]	@ 0x44
    QSPI_CommandTypeDef s_command;
  uint16_t reg=0;
 8010900:	2300      	movs	r3, #0
 8010902:	817b      	strh	r3, [r7, #10]

  /* Initialize the read volatile configuration register command */
  s_command.InstructionMode   = QSPI_INSTRUCTION_4_LINES;
 8010904:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8010908:	627b      	str	r3, [r7, #36]	@ 0x24
  s_command.Instruction       = MT25TL01G_READ_VOL_CFG_REG_CMD;
 801090a:	2385      	movs	r3, #133	@ 0x85
 801090c:	60fb      	str	r3, [r7, #12]
  s_command.AddressMode       = QSPI_ADDRESS_NONE;
 801090e:	2300      	movs	r3, #0
 8010910:	62bb      	str	r3, [r7, #40]	@ 0x28
  s_command.AlternateByteMode = QSPI_ALTERNATE_BYTES_NONE;
 8010912:	2300      	movs	r3, #0
 8010914:	62fb      	str	r3, [r7, #44]	@ 0x2c
  s_command.DataMode          = QSPI_DATA_4_LINES;
 8010916:	f04f 7340 	mov.w	r3, #50331648	@ 0x3000000
 801091a:	633b      	str	r3, [r7, #48]	@ 0x30
  s_command.DummyCycles       = 0;
 801091c:	2300      	movs	r3, #0
 801091e:	623b      	str	r3, [r7, #32]
  s_command.NbData            = 2;
 8010920:	2302      	movs	r3, #2
 8010922:	637b      	str	r3, [r7, #52]	@ 0x34
  s_command.DdrMode           = QSPI_DDR_MODE_DISABLE;
 8010924:	2300      	movs	r3, #0
 8010926:	63bb      	str	r3, [r7, #56]	@ 0x38
  s_command.DdrHoldHalfCycle  = QSPI_DDR_HHC_ANALOG_DELAY;
 8010928:	2300      	movs	r3, #0
 801092a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  s_command.SIOOMode          = QSPI_SIOO_INST_EVERY_CMD;
 801092c:	2300      	movs	r3, #0
 801092e:	643b      	str	r3, [r7, #64]	@ 0x40

  /* Configure the command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 8010930:	f107 030c 	add.w	r3, r7, #12
 8010934:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010938:	4619      	mov	r1, r3
 801093a:	482b      	ldr	r0, [pc, #172]	@ (80109e8 <QSPI_DummyCyclesCfg+0xf4>)
 801093c:	f008 ffc6 	bl	80198cc <HAL_QSPI_Command>
 8010940:	4603      	mov	r3, r0
 8010942:	2b00      	cmp	r3, #0
 8010944:	d002      	beq.n	801094c <QSPI_DummyCyclesCfg+0x58>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010946:	f06f 0304 	mvn.w	r3, #4
 801094a:	e048      	b.n	80109de <QSPI_DummyCyclesCfg+0xea>
  }

  /* Reception of the data */
  if (HAL_QSPI_Receive(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 801094c:	f107 030a 	add.w	r3, r7, #10
 8010950:	f241 3288 	movw	r2, #5000	@ 0x1388
 8010954:	4619      	mov	r1, r3
 8010956:	4824      	ldr	r0, [pc, #144]	@ (80109e8 <QSPI_DummyCyclesCfg+0xf4>)
 8010958:	f009 f8a8 	bl	8019aac <HAL_QSPI_Receive>
 801095c:	4603      	mov	r3, r0
 801095e:	2b00      	cmp	r3, #0
 8010960:	d002      	beq.n	8010968 <QSPI_DummyCyclesCfg+0x74>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010962:	f06f 0304 	mvn.w	r3, #4
 8010966:	e03a      	b.n	80109de <QSPI_DummyCyclesCfg+0xea>
  }

  /* Enable write operations */
  if (MT25TL01G_WriteEnable(&hqspi, QSPI_Ctx[Instance].InterfaceMode) != MT25TL01G_OK)
 8010968:	4920      	ldr	r1, [pc, #128]	@ (80109ec <QSPI_DummyCyclesCfg+0xf8>)
 801096a:	687a      	ldr	r2, [r7, #4]
 801096c:	4613      	mov	r3, r2
 801096e:	005b      	lsls	r3, r3, #1
 8010970:	4413      	add	r3, r2
 8010972:	009b      	lsls	r3, r3, #2
 8010974:	440b      	add	r3, r1
 8010976:	3301      	adds	r3, #1
 8010978:	781b      	ldrb	r3, [r3, #0]
 801097a:	4619      	mov	r1, r3
 801097c:	481a      	ldr	r0, [pc, #104]	@ (80109e8 <QSPI_DummyCyclesCfg+0xf4>)
 801097e:	f7f0 fa57 	bl	8000e30 <MT25TL01G_WriteEnable>
 8010982:	4603      	mov	r3, r0
 8010984:	2b00      	cmp	r3, #0
 8010986:	d002      	beq.n	801098e <QSPI_DummyCyclesCfg+0x9a>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 8010988:	f06f 0304 	mvn.w	r3, #4
 801098c:	e027      	b.n	80109de <QSPI_DummyCyclesCfg+0xea>
  }

  /* Update volatile configuration register (with new dummy cycles) */
  s_command.Instruction = MT25TL01G_WRITE_VOL_CFG_REG_CMD;
 801098e:	2381      	movs	r3, #129	@ 0x81
 8010990:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(reg, 0xF0F0, ((MT25TL01G_DUMMY_CYCLES_READ_QUAD << 4) |
 8010992:	897a      	ldrh	r2, [r7, #10]
 8010994:	f640 730f 	movw	r3, #3855	@ 0xf0f
 8010998:	4013      	ands	r3, r2
 801099a:	b29a      	uxth	r2, r3
 801099c:	4b14      	ldr	r3, [pc, #80]	@ (80109f0 <QSPI_DummyCyclesCfg+0xfc>)
 801099e:	4313      	orrs	r3, r2
 80109a0:	b29b      	uxth	r3, r3
 80109a2:	817b      	strh	r3, [r7, #10]
                               (MT25TL01G_DUMMY_CYCLES_READ_QUAD << 12)));

  /* Configure the write volatile configuration register command */
  if (HAL_QSPI_Command(&hqspi, &s_command, HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80109a4:	f107 030c 	add.w	r3, r7, #12
 80109a8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109ac:	4619      	mov	r1, r3
 80109ae:	480e      	ldr	r0, [pc, #56]	@ (80109e8 <QSPI_DummyCyclesCfg+0xf4>)
 80109b0:	f008 ff8c 	bl	80198cc <HAL_QSPI_Command>
 80109b4:	4603      	mov	r3, r0
 80109b6:	2b00      	cmp	r3, #0
 80109b8:	d002      	beq.n	80109c0 <QSPI_DummyCyclesCfg+0xcc>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80109ba:	f06f 0304 	mvn.w	r3, #4
 80109be:	e00e      	b.n	80109de <QSPI_DummyCyclesCfg+0xea>
  }

  /* Transmission of the data */
  if (HAL_QSPI_Transmit(&hqspi, (uint8_t *)(&reg), HAL_QPSI_TIMEOUT_DEFAULT_VALUE) != HAL_OK)
 80109c0:	f107 030a 	add.w	r3, r7, #10
 80109c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80109c8:	4619      	mov	r1, r3
 80109ca:	4807      	ldr	r0, [pc, #28]	@ (80109e8 <QSPI_DummyCyclesCfg+0xf4>)
 80109cc:	f008 ffdc 	bl	8019988 <HAL_QSPI_Transmit>
 80109d0:	4603      	mov	r3, r0
 80109d2:	2b00      	cmp	r3, #0
 80109d4:	d002      	beq.n	80109dc <QSPI_DummyCyclesCfg+0xe8>
  {
    return BSP_ERROR_COMPONENT_FAILURE;
 80109d6:	f06f 0304 	mvn.w	r3, #4
 80109da:	e000      	b.n	80109de <QSPI_DummyCyclesCfg+0xea>
  }

  /* Return BSP status */
  return ret;
 80109dc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
}
 80109de:	4618      	mov	r0, r3
 80109e0:	3748      	adds	r7, #72	@ 0x48
 80109e2:	46bd      	mov	sp, r7
 80109e4:	bd80      	pop	{r7, pc}
 80109e6:	bf00      	nop
 80109e8:	24008794 	.word	0x24008794
 80109ec:	240087e0 	.word	0x240087e0
 80109f0:	ffff8080 	.word	0xffff8080

080109f4 <BSP_SD_Init>:
  * @brief  Initializes the SD card device.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_Init(uint32_t Instance)
{
 80109f4:	b580      	push	{r7, lr}
 80109f6:	b08a      	sub	sp, #40	@ 0x28
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 80109fc:	2300      	movs	r3, #0
 80109fe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	2b00      	cmp	r3, #0
 8010a04:	d003      	beq.n	8010a0e <BSP_SD_Init+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010a06:	f06f 0301 	mvn.w	r3, #1
 8010a0a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a0c:	e063      	b.n	8010ad6 <BSP_SD_Init+0xe2>
  }
  else
  {
    /* Configure Input mode for SD detection pin */
    SD_DETECT_GPIO_CLK_ENABLE();
 8010a0e:	4b34      	ldr	r3, [pc, #208]	@ (8010ae0 <BSP_SD_Init+0xec>)
 8010a10:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a14:	4a32      	ldr	r2, [pc, #200]	@ (8010ae0 <BSP_SD_Init+0xec>)
 8010a16:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8010a1a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010a1e:	4b30      	ldr	r3, [pc, #192]	@ (8010ae0 <BSP_SD_Init+0xec>)
 8010a20:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010a24:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8010a28:	60fb      	str	r3, [r7, #12]
 8010a2a:	68fb      	ldr	r3, [r7, #12]
    gpio_init_structure.Pin = SD_DETECT_PIN;
 8010a2c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010a30:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8010a32:	2301      	movs	r3, #1
 8010a34:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8010a36:	2302      	movs	r3, #2
 8010a38:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_INPUT;
 8010a3a:	2300      	movs	r3, #0
 8010a3c:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8010a3e:	f107 0310 	add.w	r3, r7, #16
 8010a42:	4619      	mov	r1, r3
 8010a44:	4827      	ldr	r0, [pc, #156]	@ (8010ae4 <BSP_SD_Init+0xf0>)
 8010a46:	f006 ff5f 	bl	8017908 <HAL_GPIO_Init>

    if(BSP_SD_IsDetected(Instance) != SD_PRESENT)
 8010a4a:	6878      	ldr	r0, [r7, #4]
 8010a4c:	f000 f90a 	bl	8010c64 <BSP_SD_IsDetected>
 8010a50:	4603      	mov	r3, r0
 8010a52:	2b01      	cmp	r3, #1
 8010a54:	d003      	beq.n	8010a5e <BSP_SD_Init+0x6a>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8010a56:	f06f 0306 	mvn.w	r3, #6
 8010a5a:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a5c:	e03b      	b.n	8010ad6 <BSP_SD_Init+0xe2>
          ret = BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SD initialization */
      SD_MspInit(&hsd_sdmmc[Instance]);
 8010a5e:	687a      	ldr	r2, [r7, #4]
 8010a60:	4613      	mov	r3, r2
 8010a62:	015b      	lsls	r3, r3, #5
 8010a64:	1a9b      	subs	r3, r3, r2
 8010a66:	009b      	lsls	r3, r3, #2
 8010a68:	4a1f      	ldr	r2, [pc, #124]	@ (8010ae8 <BSP_SD_Init+0xf4>)
 8010a6a:	4413      	add	r3, r2
 8010a6c:	4618      	mov	r0, r3
 8010a6e:	f000 fab3 	bl	8010fd8 <SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS   */

      if(ret == BSP_ERROR_NONE)
 8010a72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010a74:	2b00      	cmp	r3, #0
 8010a76:	d12e      	bne.n	8010ad6 <BSP_SD_Init+0xe2>
      {
        /* HAL SD initialization and Enable wide operation   */
        if(MX_SDMMC1_SD_Init(&hsd_sdmmc[Instance]) != HAL_OK)
 8010a78:	687a      	ldr	r2, [r7, #4]
 8010a7a:	4613      	mov	r3, r2
 8010a7c:	015b      	lsls	r3, r3, #5
 8010a7e:	1a9b      	subs	r3, r3, r2
 8010a80:	009b      	lsls	r3, r3, #2
 8010a82:	4a19      	ldr	r2, [pc, #100]	@ (8010ae8 <BSP_SD_Init+0xf4>)
 8010a84:	4413      	add	r3, r2
 8010a86:	4618      	mov	r0, r3
 8010a88:	f000 f86a 	bl	8010b60 <MX_SDMMC1_SD_Init>
 8010a8c:	4603      	mov	r3, r0
 8010a8e:	2b00      	cmp	r3, #0
 8010a90:	d003      	beq.n	8010a9a <BSP_SD_Init+0xa6>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8010a92:	f06f 0303 	mvn.w	r3, #3
 8010a96:	627b      	str	r3, [r7, #36]	@ 0x24
 8010a98:	e01d      	b.n	8010ad6 <BSP_SD_Init+0xe2>
        }
#if (USE_SD_BUS_WIDE_4B > 0)
        else if(HAL_SD_ConfigWideBusOperation(&hsd_sdmmc[Instance], SDMMC_BUS_WIDE_4B) != HAL_OK)
 8010a9a:	687a      	ldr	r2, [r7, #4]
 8010a9c:	4613      	mov	r3, r2
 8010a9e:	015b      	lsls	r3, r3, #5
 8010aa0:	1a9b      	subs	r3, r3, r2
 8010aa2:	009b      	lsls	r3, r3, #2
 8010aa4:	4a10      	ldr	r2, [pc, #64]	@ (8010ae8 <BSP_SD_Init+0xf4>)
 8010aa6:	4413      	add	r3, r2
 8010aa8:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8010aac:	4618      	mov	r0, r3
 8010aae:	f00f fc69 	bl	8020384 <HAL_SD_ConfigWideBusOperation>
 8010ab2:	4603      	mov	r3, r0
 8010ab4:	2b00      	cmp	r3, #0
 8010ab6:	d003      	beq.n	8010ac0 <BSP_SD_Init+0xcc>
        {
          ret = BSP_ERROR_PERIPH_FAILURE;
 8010ab8:	f06f 0303 	mvn.w	r3, #3
 8010abc:	627b      	str	r3, [r7, #36]	@ 0x24
 8010abe:	e00a      	b.n	8010ad6 <BSP_SD_Init+0xe2>
        }
#endif
        else
        {
          /* Switch to High Speed mode if the card support this mode */
          (void)HAL_SD_ConfigSpeedBusOperation(&hsd_sdmmc[Instance], SDMMC_SPEED_MODE_HIGH);
 8010ac0:	687a      	ldr	r2, [r7, #4]
 8010ac2:	4613      	mov	r3, r2
 8010ac4:	015b      	lsls	r3, r3, #5
 8010ac6:	1a9b      	subs	r3, r3, r2
 8010ac8:	009b      	lsls	r3, r3, #2
 8010aca:	4a07      	ldr	r2, [pc, #28]	@ (8010ae8 <BSP_SD_Init+0xf4>)
 8010acc:	4413      	add	r3, r2
 8010ace:	2102      	movs	r1, #2
 8010ad0:	4618      	mov	r0, r3
 8010ad2:	f00f fd69 	bl	80205a8 <HAL_SD_ConfigSpeedBusOperation>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }
    }
  }
  return ret;
 8010ad6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010ad8:	4618      	mov	r0, r3
 8010ada:	3728      	adds	r7, #40	@ 0x28
 8010adc:	46bd      	mov	sp, r7
 8010ade:	bd80      	pop	{r7, pc}
 8010ae0:	58024400 	.word	0x58024400
 8010ae4:	58022000 	.word	0x58022000
 8010ae8:	240087ec 	.word	0x240087ec

08010aec <BSP_SD_DeInit>:
  * @brief  DeInitializes the SD card device.
  * @param Instance      SD Instance
  * @retval SD status
  */
int32_t BSP_SD_DeInit(uint32_t Instance)
{
 8010aec:	b580      	push	{r7, lr}
 8010aee:	b088      	sub	sp, #32
 8010af0:	af00      	add	r7, sp, #0
 8010af2:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010af4:	2300      	movs	r3, #0
 8010af6:	61fb      	str	r3, [r7, #28]
  GPIO_InitTypeDef gpio_init_structure;

  if(Instance >= SD_INSTANCES_NBR)
 8010af8:	687b      	ldr	r3, [r7, #4]
 8010afa:	2b00      	cmp	r3, #0
 8010afc:	d003      	beq.n	8010b06 <BSP_SD_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010afe:	f06f 0301 	mvn.w	r3, #1
 8010b02:	61fb      	str	r3, [r7, #28]
 8010b04:	e022      	b.n	8010b4c <BSP_SD_DeInit+0x60>
  }
  else
  {
    if(HAL_SD_DeInit(&hsd_sdmmc[Instance]) != HAL_OK)/* HAL SD de-initialization */
 8010b06:	687a      	ldr	r2, [r7, #4]
 8010b08:	4613      	mov	r3, r2
 8010b0a:	015b      	lsls	r3, r3, #5
 8010b0c:	1a9b      	subs	r3, r3, r2
 8010b0e:	009b      	lsls	r3, r3, #2
 8010b10:	4a11      	ldr	r2, [pc, #68]	@ (8010b58 <BSP_SD_DeInit+0x6c>)
 8010b12:	4413      	add	r3, r2
 8010b14:	4618      	mov	r0, r3
 8010b16:	f00e f969 	bl	801edec <HAL_SD_DeInit>
 8010b1a:	4603      	mov	r3, r0
 8010b1c:	2b00      	cmp	r3, #0
 8010b1e:	d003      	beq.n	8010b28 <BSP_SD_DeInit+0x3c>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010b20:	f06f 0303 	mvn.w	r3, #3
 8010b24:	61fb      	str	r3, [r7, #28]
 8010b26:	e011      	b.n	8010b4c <BSP_SD_DeInit+0x60>
    }
    else
    {
      /* SD detection pin configuration */
      gpio_init_structure.Pin  = SD_DETECT_PIN;
 8010b28:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8010b2c:	60bb      	str	r3, [r7, #8]
      HAL_GPIO_DeInit(SD_DETECT_GPIO_PORT, gpio_init_structure.Pin);
 8010b2e:	68bb      	ldr	r3, [r7, #8]
 8010b30:	4619      	mov	r1, r3
 8010b32:	480a      	ldr	r0, [pc, #40]	@ (8010b5c <BSP_SD_DeInit+0x70>)
 8010b34:	f007 f898 	bl	8017c68 <HAL_GPIO_DeInit>
      /* Msp SD de-initialization */
#if (USE_HAL_SD_REGISTER_CALLBACKS == 0)
      SD_MspDeInit(&hsd_sdmmc[Instance]);
 8010b38:	687a      	ldr	r2, [r7, #4]
 8010b3a:	4613      	mov	r3, r2
 8010b3c:	015b      	lsls	r3, r3, #5
 8010b3e:	1a9b      	subs	r3, r3, r2
 8010b40:	009b      	lsls	r3, r3, #2
 8010b42:	4a05      	ldr	r2, [pc, #20]	@ (8010b58 <BSP_SD_DeInit+0x6c>)
 8010b44:	4413      	add	r3, r2
 8010b46:	4618      	mov	r0, r3
 8010b48:	f000 fade 	bl	8011108 <SD_MspDeInit>
#endif /* (USE_HAL_SD_REGISTER_CALLBACKS == 0) */
    }
  }

  return ret;
 8010b4c:	69fb      	ldr	r3, [r7, #28]
}
 8010b4e:	4618      	mov	r0, r3
 8010b50:	3720      	adds	r7, #32
 8010b52:	46bd      	mov	sp, r7
 8010b54:	bd80      	pop	{r7, pc}
 8010b56:	bf00      	nop
 8010b58:	240087ec 	.word	0x240087ec
 8010b5c:	58022000 	.word	0x58022000

08010b60 <MX_SDMMC1_SD_Init>:
  * @brief  Initializes the SDMMC1 peripheral.
  * @param  hsd SD handle
  * @retval HAL status
  */
__weak HAL_StatusTypeDef MX_SDMMC1_SD_Init(SD_HandleTypeDef *hsd)
{
 8010b60:	b580      	push	{r7, lr}
 8010b62:	b084      	sub	sp, #16
 8010b64:	af00      	add	r7, sp, #0
 8010b66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 8010b68:	2300      	movs	r3, #0
 8010b6a:	73fb      	strb	r3, [r7, #15]
  /* uSD device interface configuration */
  hsd->Instance                 = SDMMC1;
 8010b6c:	687b      	ldr	r3, [r7, #4]
 8010b6e:	4a0f      	ldr	r2, [pc, #60]	@ (8010bac <MX_SDMMC1_SD_Init+0x4c>)
 8010b70:	601a      	str	r2, [r3, #0]
  hsd->Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	2200      	movs	r2, #0
 8010b76:	605a      	str	r2, [r3, #4]
  hsd->Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 8010b78:	687b      	ldr	r3, [r7, #4]
 8010b7a:	2200      	movs	r2, #0
 8010b7c:	609a      	str	r2, [r3, #8]
#if (USE_SD_BUS_WIDE_4B > 0)
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_4B;
 8010b7e:	687b      	ldr	r3, [r7, #4]
 8010b80:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8010b84:	60da      	str	r2, [r3, #12]
#else
  hsd->Init.BusWide             = SDMMC_BUS_WIDE_1B;
#endif
  hsd->Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 8010b86:	687b      	ldr	r3, [r7, #4]
 8010b88:	2200      	movs	r2, #0
 8010b8a:	611a      	str	r2, [r3, #16]
  hsd->Init.TranceiverPresent   = SDMMC_TRANSCEIVER_PRESENT;
#endif /*USE_SD_TRANSCEIVER*/
#if ( USE_SD_HIGH_PERFORMANCE > 0 )
  hsd->Init.ClockDiv            = SDMMC_HSpeed_CLK_DIV;
#else
  hsd->Init.ClockDiv            = SDMMC_NSpeed_CLK_DIV;
 8010b8c:	687b      	ldr	r3, [r7, #4]
 8010b8e:	2204      	movs	r2, #4
 8010b90:	615a      	str	r2, [r3, #20]
#endif /*USE_SD_HIGH_PERFORMANCE*/

  /* HAL SD initialization   */
  if(HAL_SD_Init(hsd) != HAL_OK)
 8010b92:	6878      	ldr	r0, [r7, #4]
 8010b94:	f00e f803 	bl	801eb9e <HAL_SD_Init>
 8010b98:	4603      	mov	r3, r0
 8010b9a:	2b00      	cmp	r3, #0
 8010b9c:	d001      	beq.n	8010ba2 <MX_SDMMC1_SD_Init+0x42>
  {
    ret = HAL_ERROR;
 8010b9e:	2301      	movs	r3, #1
 8010ba0:	73fb      	strb	r3, [r7, #15]
  }

  return ret;
 8010ba2:	7bfb      	ldrb	r3, [r7, #15]
}
 8010ba4:	4618      	mov	r0, r3
 8010ba6:	3710      	adds	r7, #16
 8010ba8:	46bd      	mov	sp, r7
 8010baa:	bd80      	pop	{r7, pc}
 8010bac:	52007000 	.word	0x52007000

08010bb0 <BSP_SD_DetectITConfig>:
  * @brief  Configures Interrupt mode for SD detection pin.
  * @param  Instance      SD Instance
  * @retval BSP status
  */
int32_t BSP_SD_DetectITConfig(uint32_t Instance)
{
 8010bb0:	b580      	push	{r7, lr}
 8010bb2:	b08a      	sub	sp, #40	@ 0x28
 8010bb4:	af00      	add	r7, sp, #0
 8010bb6:	6078      	str	r0, [r7, #4]
  int32_t ret;
  GPIO_InitTypeDef gpio_init_structure;
  const uint32_t SD_EXTI_LINE[SD_INSTANCES_NBR]   = {SD_DETECT_EXTI_LINE};
 8010bb8:	4b25      	ldr	r3, [pc, #148]	@ (8010c50 <BSP_SD_DetectITConfig+0xa0>)
 8010bba:	60fb      	str	r3, [r7, #12]
  static BSP_EXTI_LineCallback SdCallback[SD_INSTANCES_NBR] = {SD_EXTI_Callback};

  if(Instance> SD_INSTANCES_NBR)
 8010bbc:	687b      	ldr	r3, [r7, #4]
 8010bbe:	2b01      	cmp	r3, #1
 8010bc0:	d903      	bls.n	8010bca <BSP_SD_DetectITConfig+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010bc2:	f06f 0301 	mvn.w	r3, #1
 8010bc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8010bc8:	e03c      	b.n	8010c44 <BSP_SD_DetectITConfig+0x94>
  }
  else
  {
    gpio_init_structure.Pin = PinDetect[Instance];
 8010bca:	4a22      	ldr	r2, [pc, #136]	@ (8010c54 <BSP_SD_DetectITConfig+0xa4>)
 8010bcc:	687b      	ldr	r3, [r7, #4]
 8010bce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010bd2:	613b      	str	r3, [r7, #16]
    gpio_init_structure.Pull = GPIO_PULLUP;
 8010bd4:	2301      	movs	r3, #1
 8010bd6:	61bb      	str	r3, [r7, #24]
    gpio_init_structure.Speed = GPIO_SPEED_FREQ_HIGH;
 8010bd8:	2302      	movs	r3, #2
 8010bda:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode = GPIO_MODE_IT_RISING_FALLING;
 8010bdc:	f44f 1344 	mov.w	r3, #3211264	@ 0x310000
 8010be0:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(SD_DETECT_GPIO_PORT, &gpio_init_structure);
 8010be2:	f107 0310 	add.w	r3, r7, #16
 8010be6:	4619      	mov	r1, r3
 8010be8:	481b      	ldr	r0, [pc, #108]	@ (8010c58 <BSP_SD_DetectITConfig+0xa8>)
 8010bea:	f006 fe8d 	bl	8017908 <HAL_GPIO_Init>

    /* Enable and set SD detect EXTI Interrupt to the lowest priority */
    HAL_NVIC_SetPriority((IRQn_Type)(SD_DETECT_EXTI_IRQn), 0x0F, 0x00);
 8010bee:	2200      	movs	r2, #0
 8010bf0:	210f      	movs	r1, #15
 8010bf2:	2017      	movs	r0, #23
 8010bf4:	f001 fc0d 	bl	8012412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ((IRQn_Type)(SD_DETECT_EXTI_IRQn));
 8010bf8:	2017      	movs	r0, #23
 8010bfa:	f001 fc24 	bl	8012446 <HAL_NVIC_EnableIRQ>
    HAL_EXTI_GetHandle(&hsd_exti[Instance], SD_EXTI_LINE[Instance]);
 8010bfe:	687b      	ldr	r3, [r7, #4]
 8010c00:	00db      	lsls	r3, r3, #3
 8010c02:	4a16      	ldr	r2, [pc, #88]	@ (8010c5c <BSP_SD_DetectITConfig+0xac>)
 8010c04:	441a      	add	r2, r3
 8010c06:	687b      	ldr	r3, [r7, #4]
 8010c08:	009b      	lsls	r3, r3, #2
 8010c0a:	3328      	adds	r3, #40	@ 0x28
 8010c0c:	443b      	add	r3, r7
 8010c0e:	f853 3c1c 	ldr.w	r3, [r3, #-28]
 8010c12:	4619      	mov	r1, r3
 8010c14:	4610      	mov	r0, r2
 8010c16:	f006 fe26 	bl	8017866 <HAL_EXTI_GetHandle>

    if(HAL_EXTI_RegisterCallback(&hsd_exti[Instance],  HAL_EXTI_COMMON_CB_ID, SdCallback[Instance]) != HAL_OK)
 8010c1a:	687b      	ldr	r3, [r7, #4]
 8010c1c:	00db      	lsls	r3, r3, #3
 8010c1e:	4a0f      	ldr	r2, [pc, #60]	@ (8010c5c <BSP_SD_DetectITConfig+0xac>)
 8010c20:	1898      	adds	r0, r3, r2
 8010c22:	4a0f      	ldr	r2, [pc, #60]	@ (8010c60 <BSP_SD_DetectITConfig+0xb0>)
 8010c24:	687b      	ldr	r3, [r7, #4]
 8010c26:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8010c2a:	461a      	mov	r2, r3
 8010c2c:	2100      	movs	r1, #0
 8010c2e:	f006 fdfb 	bl	8017828 <HAL_EXTI_RegisterCallback>
 8010c32:	4603      	mov	r3, r0
 8010c34:	2b00      	cmp	r3, #0
 8010c36:	d003      	beq.n	8010c40 <BSP_SD_DetectITConfig+0x90>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010c38:	f06f 0303 	mvn.w	r3, #3
 8010c3c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010c3e:	e001      	b.n	8010c44 <BSP_SD_DetectITConfig+0x94>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8010c40:	2300      	movs	r3, #0
 8010c42:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }
  /* Return BSP status */
  return ret;
 8010c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8010c46:	4618      	mov	r0, r3
 8010c48:	3728      	adds	r7, #40	@ 0x28
 8010c4a:	46bd      	mov	sp, r7
 8010c4c:	bd80      	pop	{r7, pc}
 8010c4e:	bf00      	nop
 8010c50:	16700008 	.word	0x16700008
 8010c54:	24000a34 	.word	0x24000a34
 8010c58:	58022000 	.word	0x58022000
 8010c5c:	24008868 	.word	0x24008868
 8010c60:	24000a38 	.word	0x24000a38

08010c64 <BSP_SD_IsDetected>:
 * @brief  Detects if SD card is correctly plugged in the memory slot or not.
  * @param Instance  SD Instance
 * @retval Returns if SD is detected or not
 */
int32_t BSP_SD_IsDetected(uint32_t Instance)
{
 8010c64:	b580      	push	{r7, lr}
 8010c66:	b084      	sub	sp, #16
 8010c68:	af00      	add	r7, sp, #0
 8010c6a:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_UNKNOWN_FAILURE;
 8010c6c:	f06f 0305 	mvn.w	r3, #5
 8010c70:	60fb      	str	r3, [r7, #12]

  if(Instance >= SD_INSTANCES_NBR)
 8010c72:	687b      	ldr	r3, [r7, #4]
 8010c74:	2b00      	cmp	r3, #0
 8010c76:	d002      	beq.n	8010c7e <BSP_SD_IsDetected+0x1a>
  {
    return BSP_ERROR_WRONG_PARAM;
 8010c78:	f06f 0301 	mvn.w	r3, #1
 8010c7c:	e00f      	b.n	8010c9e <BSP_SD_IsDetected+0x3a>
  }
  else
  {
    ret = (uint32_t)HAL_GPIO_ReadPin(SD_DETECT_GPIO_PORT,GPIO_PIN_8 );/*PinDetect[Instance]*/
 8010c7e:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8010c82:	4809      	ldr	r0, [pc, #36]	@ (8010ca8 <BSP_SD_IsDetected+0x44>)
 8010c84:	f007 f8fa 	bl	8017e7c <HAL_GPIO_ReadPin>
 8010c88:	4603      	mov	r3, r0
 8010c8a:	60fb      	str	r3, [r7, #12]
    /* Check SD card detect pin */
    if(ret != GPIO_PIN_RESET)
 8010c8c:	68fb      	ldr	r3, [r7, #12]
 8010c8e:	2b00      	cmp	r3, #0
 8010c90:	d002      	beq.n	8010c98 <BSP_SD_IsDetected+0x34>
    {
      ret = (int32_t)SD_NOT_PRESENT;
 8010c92:	2300      	movs	r3, #0
 8010c94:	60fb      	str	r3, [r7, #12]
 8010c96:	e001      	b.n	8010c9c <BSP_SD_IsDetected+0x38>
    }
    else
    {
      ret = (int32_t)SD_PRESENT;
 8010c98:	2301      	movs	r3, #1
 8010c9a:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8010c9c:	68fb      	ldr	r3, [r7, #12]
}
 8010c9e:	4618      	mov	r0, r3
 8010ca0:	3710      	adds	r7, #16
 8010ca2:	46bd      	mov	sp, r7
 8010ca4:	bd80      	pop	{r7, pc}
 8010ca6:	bf00      	nop
 8010ca8:	58022000 	.word	0x58022000

08010cac <BSP_SD_ReadBlocks>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010cac:	b580      	push	{r7, lr}
 8010cae:	b088      	sub	sp, #32
 8010cb0:	af02      	add	r7, sp, #8
 8010cb2:	60f8      	str	r0, [r7, #12]
 8010cb4:	60b9      	str	r1, [r7, #8]
 8010cb6:	607a      	str	r2, [r7, #4]
 8010cb8:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010cba:	2300      	movs	r3, #0
 8010cbc:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8010cbe:	683b      	ldr	r3, [r7, #0]
 8010cc0:	2264      	movs	r2, #100	@ 0x64
 8010cc2:	fb02 f303 	mul.w	r3, r2, r3
 8010cc6:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 8010cc8:	68fb      	ldr	r3, [r7, #12]
 8010cca:	2b00      	cmp	r3, #0
 8010ccc:	d003      	beq.n	8010cd6 <BSP_SD_ReadBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010cce:	f06f 0301 	mvn.w	r3, #1
 8010cd2:	617b      	str	r3, [r7, #20]
 8010cd4:	e013      	b.n	8010cfe <BSP_SD_ReadBlocks+0x52>
  }
  else
  {
    if(HAL_SD_ReadBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8010cd6:	68fa      	ldr	r2, [r7, #12]
 8010cd8:	4613      	mov	r3, r2
 8010cda:	015b      	lsls	r3, r3, #5
 8010cdc:	1a9b      	subs	r3, r3, r2
 8010cde:	009b      	lsls	r3, r3, #2
 8010ce0:	4a09      	ldr	r2, [pc, #36]	@ (8010d08 <BSP_SD_ReadBlocks+0x5c>)
 8010ce2:	1898      	adds	r0, r3, r2
 8010ce4:	693b      	ldr	r3, [r7, #16]
 8010ce6:	9300      	str	r3, [sp, #0]
 8010ce8:	683b      	ldr	r3, [r7, #0]
 8010cea:	687a      	ldr	r2, [r7, #4]
 8010cec:	68b9      	ldr	r1, [r7, #8]
 8010cee:	f00e f8b1 	bl	801ee54 <HAL_SD_ReadBlocks>
 8010cf2:	4603      	mov	r3, r0
 8010cf4:	2b00      	cmp	r3, #0
 8010cf6:	d002      	beq.n	8010cfe <BSP_SD_ReadBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010cf8:	f06f 0303 	mvn.w	r3, #3
 8010cfc:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010cfe:	697b      	ldr	r3, [r7, #20]
}
 8010d00:	4618      	mov	r0, r3
 8010d02:	3718      	adds	r7, #24
 8010d04:	46bd      	mov	sp, r7
 8010d06:	bd80      	pop	{r7, pc}
 8010d08:	240087ec 	.word	0x240087ec

08010d0c <BSP_SD_WriteBlocks>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b088      	sub	sp, #32
 8010d10:	af02      	add	r7, sp, #8
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	607a      	str	r2, [r7, #4]
 8010d18:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010d1a:	2300      	movs	r3, #0
 8010d1c:	617b      	str	r3, [r7, #20]
  uint32_t timeout = SD_READ_TIMEOUT*BlocksNbr;
 8010d1e:	683b      	ldr	r3, [r7, #0]
 8010d20:	2264      	movs	r2, #100	@ 0x64
 8010d22:	fb02 f303 	mul.w	r3, r2, r3
 8010d26:	613b      	str	r3, [r7, #16]

  if(Instance >= SD_INSTANCES_NBR)
 8010d28:	68fb      	ldr	r3, [r7, #12]
 8010d2a:	2b00      	cmp	r3, #0
 8010d2c:	d003      	beq.n	8010d36 <BSP_SD_WriteBlocks+0x2a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010d2e:	f06f 0301 	mvn.w	r3, #1
 8010d32:	617b      	str	r3, [r7, #20]
 8010d34:	e013      	b.n	8010d5e <BSP_SD_WriteBlocks+0x52>
  }
  else
  {
    if(HAL_SD_WriteBlocks(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr, timeout) != HAL_OK)
 8010d36:	68fa      	ldr	r2, [r7, #12]
 8010d38:	4613      	mov	r3, r2
 8010d3a:	015b      	lsls	r3, r3, #5
 8010d3c:	1a9b      	subs	r3, r3, r2
 8010d3e:	009b      	lsls	r3, r3, #2
 8010d40:	4a09      	ldr	r2, [pc, #36]	@ (8010d68 <BSP_SD_WriteBlocks+0x5c>)
 8010d42:	1898      	adds	r0, r3, r2
 8010d44:	693b      	ldr	r3, [r7, #16]
 8010d46:	9300      	str	r3, [sp, #0]
 8010d48:	683b      	ldr	r3, [r7, #0]
 8010d4a:	687a      	ldr	r2, [r7, #4]
 8010d4c:	68b9      	ldr	r1, [r7, #8]
 8010d4e:	f00e fa0b 	bl	801f168 <HAL_SD_WriteBlocks>
 8010d52:	4603      	mov	r3, r0
 8010d54:	2b00      	cmp	r3, #0
 8010d56:	d002      	beq.n	8010d5e <BSP_SD_WriteBlocks+0x52>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010d58:	f06f 0303 	mvn.w	r3, #3
 8010d5c:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010d5e:	697b      	ldr	r3, [r7, #20]
}
 8010d60:	4618      	mov	r0, r3
 8010d62:	3718      	adds	r7, #24
 8010d64:	46bd      	mov	sp, r7
 8010d66:	bd80      	pop	{r7, pc}
 8010d68:	240087ec 	.word	0x240087ec

08010d6c <BSP_SD_ReadBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval BSP status
  */
int32_t BSP_SD_ReadBlocks_DMA(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010d6c:	b580      	push	{r7, lr}
 8010d6e:	b086      	sub	sp, #24
 8010d70:	af00      	add	r7, sp, #0
 8010d72:	60f8      	str	r0, [r7, #12]
 8010d74:	60b9      	str	r1, [r7, #8]
 8010d76:	607a      	str	r2, [r7, #4]
 8010d78:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010d7a:	2300      	movs	r3, #0
 8010d7c:	617b      	str	r3, [r7, #20]

  if(Instance >= SD_INSTANCES_NBR)
 8010d7e:	68fb      	ldr	r3, [r7, #12]
 8010d80:	2b00      	cmp	r3, #0
 8010d82:	d003      	beq.n	8010d8c <BSP_SD_ReadBlocks_DMA+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010d84:	f06f 0301 	mvn.w	r3, #1
 8010d88:	617b      	str	r3, [r7, #20]
 8010d8a:	e011      	b.n	8010db0 <BSP_SD_ReadBlocks_DMA+0x44>
  }
  else
  {
    if(HAL_SD_ReadBlocks_DMA(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8010d8c:	68fa      	ldr	r2, [r7, #12]
 8010d8e:	4613      	mov	r3, r2
 8010d90:	015b      	lsls	r3, r3, #5
 8010d92:	1a9b      	subs	r3, r3, r2
 8010d94:	009b      	lsls	r3, r3, #2
 8010d96:	4a09      	ldr	r2, [pc, #36]	@ (8010dbc <BSP_SD_ReadBlocks_DMA+0x50>)
 8010d98:	1898      	adds	r0, r3, r2
 8010d9a:	683b      	ldr	r3, [r7, #0]
 8010d9c:	687a      	ldr	r2, [r7, #4]
 8010d9e:	68b9      	ldr	r1, [r7, #8]
 8010da0:	f00e fcb0 	bl	801f704 <HAL_SD_ReadBlocks_DMA>
 8010da4:	4603      	mov	r3, r0
 8010da6:	2b00      	cmp	r3, #0
 8010da8:	d002      	beq.n	8010db0 <BSP_SD_ReadBlocks_DMA+0x44>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010daa:	f06f 0303 	mvn.w	r3, #3
 8010dae:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010db0:	697b      	ldr	r3, [r7, #20]
}
 8010db2:	4618      	mov	r0, r3
 8010db4:	3718      	adds	r7, #24
 8010db6:	46bd      	mov	sp, r7
 8010db8:	bd80      	pop	{r7, pc}
 8010dba:	bf00      	nop
 8010dbc:	240087ec 	.word	0x240087ec

08010dc0 <BSP_SD_WriteBlocks_DMA>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval BSP status
  */
int32_t BSP_SD_WriteBlocks_DMA(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010dc0:	b580      	push	{r7, lr}
 8010dc2:	b086      	sub	sp, #24
 8010dc4:	af00      	add	r7, sp, #0
 8010dc6:	60f8      	str	r0, [r7, #12]
 8010dc8:	60b9      	str	r1, [r7, #8]
 8010dca:	607a      	str	r2, [r7, #4]
 8010dcc:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010dce:	2300      	movs	r3, #0
 8010dd0:	617b      	str	r3, [r7, #20]

  if(Instance >= SD_INSTANCES_NBR)
 8010dd2:	68fb      	ldr	r3, [r7, #12]
 8010dd4:	2b00      	cmp	r3, #0
 8010dd6:	d003      	beq.n	8010de0 <BSP_SD_WriteBlocks_DMA+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010dd8:	f06f 0301 	mvn.w	r3, #1
 8010ddc:	617b      	str	r3, [r7, #20]
 8010dde:	e011      	b.n	8010e04 <BSP_SD_WriteBlocks_DMA+0x44>
  }
  else
  {
    if(HAL_SD_WriteBlocks_DMA(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8010de0:	68fa      	ldr	r2, [r7, #12]
 8010de2:	4613      	mov	r3, r2
 8010de4:	015b      	lsls	r3, r3, #5
 8010de6:	1a9b      	subs	r3, r3, r2
 8010de8:	009b      	lsls	r3, r3, #2
 8010dea:	4a09      	ldr	r2, [pc, #36]	@ (8010e10 <BSP_SD_WriteBlocks_DMA+0x50>)
 8010dec:	1898      	adds	r0, r3, r2
 8010dee:	683b      	ldr	r3, [r7, #0]
 8010df0:	687a      	ldr	r2, [r7, #4]
 8010df2:	68b9      	ldr	r1, [r7, #8]
 8010df4:	f00e fd2e 	bl	801f854 <HAL_SD_WriteBlocks_DMA>
 8010df8:	4603      	mov	r3, r0
 8010dfa:	2b00      	cmp	r3, #0
 8010dfc:	d002      	beq.n	8010e04 <BSP_SD_WriteBlocks_DMA+0x44>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010dfe:	f06f 0303 	mvn.w	r3, #3
 8010e02:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010e04:	697b      	ldr	r3, [r7, #20]
}
 8010e06:	4618      	mov	r0, r3
 8010e08:	3718      	adds	r7, #24
 8010e0a:	46bd      	mov	sp, r7
 8010e0c:	bd80      	pop	{r7, pc}
 8010e0e:	bf00      	nop
 8010e10:	240087ec 	.word	0x240087ec

08010e14 <BSP_SD_ReadBlocks_IT>:
  * @param  BlockIdx   Block index from where data is to be read
  * @param  BlocksNbr  Number of SD blocks to read
  * @retval SD status
  */
int32_t BSP_SD_ReadBlocks_IT(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010e14:	b580      	push	{r7, lr}
 8010e16:	b086      	sub	sp, #24
 8010e18:	af00      	add	r7, sp, #0
 8010e1a:	60f8      	str	r0, [r7, #12]
 8010e1c:	60b9      	str	r1, [r7, #8]
 8010e1e:	607a      	str	r2, [r7, #4]
 8010e20:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010e22:	2300      	movs	r3, #0
 8010e24:	617b      	str	r3, [r7, #20]

  if(Instance >= SD_INSTANCES_NBR)
 8010e26:	68fb      	ldr	r3, [r7, #12]
 8010e28:	2b00      	cmp	r3, #0
 8010e2a:	d003      	beq.n	8010e34 <BSP_SD_ReadBlocks_IT+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010e2c:	f06f 0301 	mvn.w	r3, #1
 8010e30:	617b      	str	r3, [r7, #20]
 8010e32:	e011      	b.n	8010e58 <BSP_SD_ReadBlocks_IT+0x44>
  }
  else
  {
    if(HAL_SD_ReadBlocks_IT(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8010e34:	68fa      	ldr	r2, [r7, #12]
 8010e36:	4613      	mov	r3, r2
 8010e38:	015b      	lsls	r3, r3, #5
 8010e3a:	1a9b      	subs	r3, r3, r2
 8010e3c:	009b      	lsls	r3, r3, #2
 8010e3e:	4a09      	ldr	r2, [pc, #36]	@ (8010e64 <BSP_SD_ReadBlocks_IT+0x50>)
 8010e40:	1898      	adds	r0, r3, r2
 8010e42:	683b      	ldr	r3, [r7, #0]
 8010e44:	687a      	ldr	r2, [r7, #4]
 8010e46:	68b9      	ldr	r1, [r7, #8]
 8010e48:	f00e fb1c 	bl	801f484 <HAL_SD_ReadBlocks_IT>
 8010e4c:	4603      	mov	r3, r0
 8010e4e:	2b00      	cmp	r3, #0
 8010e50:	d002      	beq.n	8010e58 <BSP_SD_ReadBlocks_IT+0x44>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010e52:	f06f 0303 	mvn.w	r3, #3
 8010e56:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010e58:	697b      	ldr	r3, [r7, #20]
}
 8010e5a:	4618      	mov	r0, r3
 8010e5c:	3718      	adds	r7, #24
 8010e5e:	46bd      	mov	sp, r7
 8010e60:	bd80      	pop	{r7, pc}
 8010e62:	bf00      	nop
 8010e64:	240087ec 	.word	0x240087ec

08010e68 <BSP_SD_WriteBlocks_IT>:
  * @param  BlockIdx   Block index from where data is to be written
  * @param  BlocksNbr  Number of SD blocks to write
  * @retval SD status
  */
int32_t BSP_SD_WriteBlocks_IT(uint32_t Instance, uint32_t *pData, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010e68:	b580      	push	{r7, lr}
 8010e6a:	b086      	sub	sp, #24
 8010e6c:	af00      	add	r7, sp, #0
 8010e6e:	60f8      	str	r0, [r7, #12]
 8010e70:	60b9      	str	r1, [r7, #8]
 8010e72:	607a      	str	r2, [r7, #4]
 8010e74:	603b      	str	r3, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8010e76:	2300      	movs	r3, #0
 8010e78:	617b      	str	r3, [r7, #20]

  if(Instance >= SD_INSTANCES_NBR)
 8010e7a:	68fb      	ldr	r3, [r7, #12]
 8010e7c:	2b00      	cmp	r3, #0
 8010e7e:	d003      	beq.n	8010e88 <BSP_SD_WriteBlocks_IT+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010e80:	f06f 0301 	mvn.w	r3, #1
 8010e84:	617b      	str	r3, [r7, #20]
 8010e86:	e011      	b.n	8010eac <BSP_SD_WriteBlocks_IT+0x44>
  }
  else
  {
    if(HAL_SD_WriteBlocks_IT(&hsd_sdmmc[Instance], (uint8_t *)pData, BlockIdx, BlocksNbr) != HAL_OK)
 8010e88:	68fa      	ldr	r2, [r7, #12]
 8010e8a:	4613      	mov	r3, r2
 8010e8c:	015b      	lsls	r3, r3, #5
 8010e8e:	1a9b      	subs	r3, r3, r2
 8010e90:	009b      	lsls	r3, r3, #2
 8010e92:	4a09      	ldr	r2, [pc, #36]	@ (8010eb8 <BSP_SD_WriteBlocks_IT+0x50>)
 8010e94:	1898      	adds	r0, r3, r2
 8010e96:	683b      	ldr	r3, [r7, #0]
 8010e98:	687a      	ldr	r2, [r7, #4]
 8010e9a:	68b9      	ldr	r1, [r7, #8]
 8010e9c:	f00e fb92 	bl	801f5c4 <HAL_SD_WriteBlocks_IT>
 8010ea0:	4603      	mov	r3, r0
 8010ea2:	2b00      	cmp	r3, #0
 8010ea4:	d002      	beq.n	8010eac <BSP_SD_WriteBlocks_IT+0x44>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010ea6:	f06f 0303 	mvn.w	r3, #3
 8010eaa:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010eac:	697b      	ldr	r3, [r7, #20]
}
 8010eae:	4618      	mov	r0, r3
 8010eb0:	3718      	adds	r7, #24
 8010eb2:	46bd      	mov	sp, r7
 8010eb4:	bd80      	pop	{r7, pc}
 8010eb6:	bf00      	nop
 8010eb8:	240087ec 	.word	0x240087ec

08010ebc <BSP_SD_Erase>:
  * @param  BlockIdx   Block index from where data is to be
  * @param  BlocksNbr  Number of SD blocks to erase
  * @retval SD status
  */
int32_t BSP_SD_Erase(uint32_t Instance, uint32_t BlockIdx, uint32_t BlocksNbr)
{
 8010ebc:	b580      	push	{r7, lr}
 8010ebe:	b086      	sub	sp, #24
 8010ec0:	af00      	add	r7, sp, #0
 8010ec2:	60f8      	str	r0, [r7, #12]
 8010ec4:	60b9      	str	r1, [r7, #8]
 8010ec6:	607a      	str	r2, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8010ec8:	2300      	movs	r3, #0
 8010eca:	617b      	str	r3, [r7, #20]

  if(Instance >= SD_INSTANCES_NBR)
 8010ecc:	68fb      	ldr	r3, [r7, #12]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	d003      	beq.n	8010eda <BSP_SD_Erase+0x1e>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8010ed2:	f06f 0301 	mvn.w	r3, #1
 8010ed6:	617b      	str	r3, [r7, #20]
 8010ed8:	e013      	b.n	8010f02 <BSP_SD_Erase+0x46>
  }
  else
  {
    if(HAL_SD_Erase(&hsd_sdmmc[Instance], BlockIdx, BlockIdx + BlocksNbr) != HAL_OK)
 8010eda:	68fa      	ldr	r2, [r7, #12]
 8010edc:	4613      	mov	r3, r2
 8010ede:	015b      	lsls	r3, r3, #5
 8010ee0:	1a9b      	subs	r3, r3, r2
 8010ee2:	009b      	lsls	r3, r3, #2
 8010ee4:	4a09      	ldr	r2, [pc, #36]	@ (8010f0c <BSP_SD_Erase+0x50>)
 8010ee6:	1898      	adds	r0, r3, r2
 8010ee8:	68ba      	ldr	r2, [r7, #8]
 8010eea:	687b      	ldr	r3, [r7, #4]
 8010eec:	4413      	add	r3, r2
 8010eee:	461a      	mov	r2, r3
 8010ef0:	68b9      	ldr	r1, [r7, #8]
 8010ef2:	f00e fd57 	bl	801f9a4 <HAL_SD_Erase>
 8010ef6:	4603      	mov	r3, r0
 8010ef8:	2b00      	cmp	r3, #0
 8010efa:	d002      	beq.n	8010f02 <BSP_SD_Erase+0x46>
    {
      ret = BSP_ERROR_PERIPH_FAILURE;
 8010efc:	f06f 0303 	mvn.w	r3, #3
 8010f00:	617b      	str	r3, [r7, #20]
    }
  }

  /* Return BSP status   */
  return ret;
 8010f02:	697b      	ldr	r3, [r7, #20]
}
 8010f04:	4618      	mov	r0, r3
 8010f06:	3718      	adds	r7, #24
 8010f08:	46bd      	mov	sp, r7
 8010f0a:	bd80      	pop	{r7, pc}
 8010f0c:	240087ec 	.word	0x240087ec

08010f10 <BSP_SD_GetCardState>:
  *          This value can be one of the following values:
  *            @arg  SD_TRANSFER_OK: No data transfer is acting
  *            @arg  SD_TRANSFER_BUSY: Data transfer is acting
  */
int32_t BSP_SD_GetCardState(uint32_t Instance)
{
 8010f10:	b580      	push	{r7, lr}
 8010f12:	b082      	sub	sp, #8
 8010f14:	af00      	add	r7, sp, #0
 8010f16:	6078      	str	r0, [r7, #4]
  return (int32_t)((HAL_SD_GetCardState(&hsd_sdmmc[Instance]) == HAL_SD_CARD_TRANSFER ) ? SD_TRANSFER_OK : SD_TRANSFER_BUSY);
 8010f18:	687a      	ldr	r2, [r7, #4]
 8010f1a:	4613      	mov	r3, r2
 8010f1c:	015b      	lsls	r3, r3, #5
 8010f1e:	1a9b      	subs	r3, r3, r2
 8010f20:	009b      	lsls	r3, r3, #2
 8010f22:	4a07      	ldr	r2, [pc, #28]	@ (8010f40 <BSP_SD_GetCardState+0x30>)
 8010f24:	4413      	add	r3, r2
 8010f26:	4618      	mov	r0, r3
 8010f28:	f00f fbfa 	bl	8020720 <HAL_SD_GetCardState>
 8010f2c:	4603      	mov	r3, r0
 8010f2e:	2b04      	cmp	r3, #4
 8010f30:	bf14      	ite	ne
 8010f32:	2301      	movne	r3, #1
 8010f34:	2300      	moveq	r3, #0
 8010f36:	b2db      	uxtb	r3, r3
}
 8010f38:	4618      	mov	r0, r3
 8010f3a:	3708      	adds	r7, #8
 8010f3c:	46bd      	mov	sp, r7
 8010f3e:	bd80      	pop	{r7, pc}
 8010f40:	240087ec 	.word	0x240087ec

08010f44 <HAL_SD_TxCpltCallback>:
  * @brief Tx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_TxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010f44:	b580      	push	{r7, lr}
 8010f46:	b082      	sub	sp, #8
 8010f48:	af00      	add	r7, sp, #0
 8010f4a:	6078      	str	r0, [r7, #4]
  BSP_SD_WriteCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8010f4c:	687b      	ldr	r3, [r7, #4]
 8010f4e:	4a06      	ldr	r2, [pc, #24]	@ (8010f68 <HAL_SD_TxCpltCallback+0x24>)
 8010f50:	4293      	cmp	r3, r2
 8010f52:	bf14      	ite	ne
 8010f54:	2301      	movne	r3, #1
 8010f56:	2300      	moveq	r3, #0
 8010f58:	b2db      	uxtb	r3, r3
 8010f5a:	4618      	mov	r0, r3
 8010f5c:	f7f9 fa16 	bl	800a38c <BSP_SD_WriteCpltCallback>
}
 8010f60:	bf00      	nop
 8010f62:	3708      	adds	r7, #8
 8010f64:	46bd      	mov	sp, r7
 8010f66:	bd80      	pop	{r7, pc}
 8010f68:	240087ec 	.word	0x240087ec

08010f6c <HAL_SD_RxCpltCallback>:
  * @brief Rx Transfer completed callbacks
  * @param hsd  SD handle
  * @retval None
  */
void HAL_SD_RxCpltCallback(SD_HandleTypeDef *hsd)
{
 8010f6c:	b580      	push	{r7, lr}
 8010f6e:	b082      	sub	sp, #8
 8010f70:	af00      	add	r7, sp, #0
 8010f72:	6078      	str	r0, [r7, #4]
  BSP_SD_ReadCpltCallback((hsd == &hsd_sdmmc[0]) ? 0UL : 1UL);
 8010f74:	687b      	ldr	r3, [r7, #4]
 8010f76:	4a06      	ldr	r2, [pc, #24]	@ (8010f90 <HAL_SD_RxCpltCallback+0x24>)
 8010f78:	4293      	cmp	r3, r2
 8010f7a:	bf14      	ite	ne
 8010f7c:	2301      	movne	r3, #1
 8010f7e:	2300      	moveq	r3, #0
 8010f80:	b2db      	uxtb	r3, r3
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7f9 fa12 	bl	800a3ac <BSP_SD_ReadCpltCallback>
}
 8010f88:	bf00      	nop
 8010f8a:	3708      	adds	r7, #8
 8010f8c:	46bd      	mov	sp, r7
 8010f8e:	bd80      	pop	{r7, pc}
 8010f90:	240087ec 	.word	0x240087ec

08010f94 <BSP_SD_IRQHandler>:
  * @brief  This function handles SDMMC interrupt requests.
  * @param  Instance  SD Instance
  * @retval None
  */
void BSP_SD_IRQHandler(uint32_t Instance)
{
 8010f94:	b580      	push	{r7, lr}
 8010f96:	b082      	sub	sp, #8
 8010f98:	af00      	add	r7, sp, #0
 8010f9a:	6078      	str	r0, [r7, #4]
  HAL_SD_IRQHandler(&hsd_sdmmc[Instance]);
 8010f9c:	687a      	ldr	r2, [r7, #4]
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	015b      	lsls	r3, r3, #5
 8010fa2:	1a9b      	subs	r3, r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4a04      	ldr	r2, [pc, #16]	@ (8010fb8 <BSP_SD_IRQHandler+0x24>)
 8010fa8:	4413      	add	r3, r2
 8010faa:	4618      	mov	r0, r3
 8010fac:	f00e fdc6 	bl	801fb3c <HAL_SD_IRQHandler>
}
 8010fb0:	bf00      	nop
 8010fb2:	3708      	adds	r7, #8
 8010fb4:	46bd      	mov	sp, r7
 8010fb6:	bd80      	pop	{r7, pc}
 8010fb8:	240087ec 	.word	0x240087ec

08010fbc <SD_EXTI_Callback>:
/**
  * @brief  SD EXTI line detection callbacks.
  * @retval None
  */
static void SD_EXTI_Callback(void)
{
 8010fbc:	b580      	push	{r7, lr}
 8010fbe:	b082      	sub	sp, #8
 8010fc0:	af00      	add	r7, sp, #0
uint32_t sd_status = SD_PRESENT;
 8010fc2:	2301      	movs	r3, #1
 8010fc4:	607b      	str	r3, [r7, #4]
    BSP_SD_DetectCallback(0,sd_status);
 8010fc6:	6879      	ldr	r1, [r7, #4]
 8010fc8:	2000      	movs	r0, #0
 8010fca:	f7f9 f8a3 	bl	800a114 <BSP_SD_DetectCallback>

}
 8010fce:	bf00      	nop
 8010fd0:	3708      	adds	r7, #8
 8010fd2:	46bd      	mov	sp, r7
 8010fd4:	bd80      	pop	{r7, pc}
	...

08010fd8 <SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspInit(SD_HandleTypeDef *hsd)
{
 8010fd8:	b580      	push	{r7, lr}
 8010fda:	b08c      	sub	sp, #48	@ 0x30
 8010fdc:	af00      	add	r7, sp, #0
 8010fde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 8010fe0:	687b      	ldr	r3, [r7, #4]
 8010fe2:	4a44      	ldr	r2, [pc, #272]	@ (80110f4 <SD_MspInit+0x11c>)
 8010fe4:	4293      	cmp	r3, r2
 8010fe6:	f040 8081 	bne.w	80110ec <SD_MspInit+0x114>
    therefore Camera must be power down before using the BSP SD
    To power down the camera , Set GPIOJ pin 14 to high
    */

    /* Enable GPIO J clock */
    __HAL_RCC_GPIOJ_CLK_ENABLE();
 8010fea:	4b43      	ldr	r3, [pc, #268]	@ (80110f8 <SD_MspInit+0x120>)
 8010fec:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8010ff0:	4a41      	ldr	r2, [pc, #260]	@ (80110f8 <SD_MspInit+0x120>)
 8010ff2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8010ff6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8010ffa:	4b3f      	ldr	r3, [pc, #252]	@ (80110f8 <SD_MspInit+0x120>)
 8010ffc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011000:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8011004:	61bb      	str	r3, [r7, #24]
 8011006:	69bb      	ldr	r3, [r7, #24]

    gpio_init_structure.Pin       = GPIO_PIN_14;
 8011008:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 801100c:	61fb      	str	r3, [r7, #28]
    gpio_init_structure.Mode      = GPIO_MODE_OUTPUT_PP;
 801100e:	2301      	movs	r3, #1
 8011010:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_NOPULL;
 8011012:	2300      	movs	r3, #0
 8011014:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 8011016:	2303      	movs	r3, #3
 8011018:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOJ, &gpio_init_structure);
 801101a:	f107 031c 	add.w	r3, r7, #28
 801101e:	4619      	mov	r1, r3
 8011020:	4836      	ldr	r0, [pc, #216]	@ (80110fc <SD_MspInit+0x124>)
 8011022:	f006 fc71 	bl	8017908 <HAL_GPIO_Init>

    /* Set the camera POWER_DOWN pin (active high) */
    HAL_GPIO_WritePin(GPIOJ, GPIO_PIN_14, GPIO_PIN_SET);
 8011026:	2201      	movs	r2, #1
 8011028:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 801102c:	4833      	ldr	r0, [pc, #204]	@ (80110fc <SD_MspInit+0x124>)
 801102e:	f006 ff3d 	bl	8017eac <HAL_GPIO_WritePin>
#endif

    /* Enable SDIO clock */
    __HAL_RCC_SDMMC1_CLK_ENABLE();
 8011032:	4b31      	ldr	r3, [pc, #196]	@ (80110f8 <SD_MspInit+0x120>)
 8011034:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011038:	4a2f      	ldr	r2, [pc, #188]	@ (80110f8 <SD_MspInit+0x120>)
 801103a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801103e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8011042:	4b2d      	ldr	r3, [pc, #180]	@ (80110f8 <SD_MspInit+0x120>)
 8011044:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011048:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801104c:	617b      	str	r3, [r7, #20]
 801104e:	697b      	ldr	r3, [r7, #20]


    /* Enable GPIOs clock */
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8011050:	4b29      	ldr	r3, [pc, #164]	@ (80110f8 <SD_MspInit+0x120>)
 8011052:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011056:	4a28      	ldr	r2, [pc, #160]	@ (80110f8 <SD_MspInit+0x120>)
 8011058:	f043 0302 	orr.w	r3, r3, #2
 801105c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011060:	4b25      	ldr	r3, [pc, #148]	@ (80110f8 <SD_MspInit+0x120>)
 8011062:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011066:	f003 0302 	and.w	r3, r3, #2
 801106a:	613b      	str	r3, [r7, #16]
 801106c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 801106e:	4b22      	ldr	r3, [pc, #136]	@ (80110f8 <SD_MspInit+0x120>)
 8011070:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011074:	4a20      	ldr	r2, [pc, #128]	@ (80110f8 <SD_MspInit+0x120>)
 8011076:	f043 0304 	orr.w	r3, r3, #4
 801107a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801107e:	4b1e      	ldr	r3, [pc, #120]	@ (80110f8 <SD_MspInit+0x120>)
 8011080:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011084:	f003 0304 	and.w	r3, r3, #4
 8011088:	60fb      	str	r3, [r7, #12]
 801108a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 801108c:	4b1a      	ldr	r3, [pc, #104]	@ (80110f8 <SD_MspInit+0x120>)
 801108e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011092:	4a19      	ldr	r2, [pc, #100]	@ (80110f8 <SD_MspInit+0x120>)
 8011094:	f043 0308 	orr.w	r3, r3, #8
 8011098:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801109c:	4b16      	ldr	r3, [pc, #88]	@ (80110f8 <SD_MspInit+0x120>)
 801109e:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80110a2:	f003 0308 	and.w	r3, r3, #8
 80110a6:	60bb      	str	r3, [r7, #8]
 80110a8:	68bb      	ldr	r3, [r7, #8]


    /* Common GPIO configuration */
    gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 80110aa:	2302      	movs	r3, #2
 80110ac:	623b      	str	r3, [r7, #32]
    gpio_init_structure.Pull      = GPIO_PULLUP;
 80110ae:	2301      	movs	r3, #1
 80110b0:	627b      	str	r3, [r7, #36]	@ 0x24
    gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 80110b2:	2303      	movs	r3, #3
 80110b4:	62bb      	str	r3, [r7, #40]	@ 0x28
    gpio_init_structure.Alternate = GPIO_AF12_SDIO1;
 80110b6:	230c      	movs	r3, #12
 80110b8:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if (USE_SD_BUS_WIDE_4B > 0)
    /* SDMMC GPIO CLKIN PB8, D0 PC8, D1 PC9, D2 PC10, D3 PC11, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 80110ba:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 80110be:	61fb      	str	r3, [r7, #28]
    /* SDMMC GPIO CLKIN PB8, D0 PC8, CK PC12, CMD PD2 */
    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif

    HAL_GPIO_Init(GPIOC, &gpio_init_structure);
 80110c0:	f107 031c 	add.w	r3, r7, #28
 80110c4:	4619      	mov	r1, r3
 80110c6:	480e      	ldr	r0, [pc, #56]	@ (8011100 <SD_MspInit+0x128>)
 80110c8:	f006 fc1e 	bl	8017908 <HAL_GPIO_Init>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 80110cc:	2304      	movs	r3, #4
 80110ce:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 80110d0:	f107 031c 	add.w	r3, r7, #28
 80110d4:	4619      	mov	r1, r3
 80110d6:	480b      	ldr	r0, [pc, #44]	@ (8011104 <SD_MspInit+0x12c>)
 80110d8:	f006 fc16 	bl	8017908 <HAL_GPIO_Init>

    /* NVIC configuration for SDIO interrupts */
    HAL_NVIC_SetPriority(SDMMC1_IRQn, BSP_SD_IT_PRIORITY, 0);
 80110dc:	2200      	movs	r2, #0
 80110de:	210e      	movs	r1, #14
 80110e0:	2031      	movs	r0, #49	@ 0x31
 80110e2:	f001 f996 	bl	8012412 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SDMMC1_IRQn);
 80110e6:	2031      	movs	r0, #49	@ 0x31
 80110e8:	f001 f9ad 	bl	8012446 <HAL_NVIC_EnableIRQ>
  }
}
 80110ec:	bf00      	nop
 80110ee:	3730      	adds	r7, #48	@ 0x30
 80110f0:	46bd      	mov	sp, r7
 80110f2:	bd80      	pop	{r7, pc}
 80110f4:	240087ec 	.word	0x240087ec
 80110f8:	58024400 	.word	0x58024400
 80110fc:	58022400 	.word	0x58022400
 8011100:	58020800 	.word	0x58020800
 8011104:	58020c00 	.word	0x58020c00

08011108 <SD_MspDeInit>:
  * @brief  DeInitializes the SD MSP.
  * @param  hsd  SD handle
  * @retval None
  */
static void SD_MspDeInit(SD_HandleTypeDef *hsd)
{
 8011108:	b580      	push	{r7, lr}
 801110a:	b088      	sub	sp, #32
 801110c:	af00      	add	r7, sp, #0
 801110e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef gpio_init_structure;

  if(hsd == &hsd_sdmmc[0])
 8011110:	687b      	ldr	r3, [r7, #4]
 8011112:	4a14      	ldr	r2, [pc, #80]	@ (8011164 <SD_MspDeInit+0x5c>)
 8011114:	4293      	cmp	r3, r2
 8011116:	d121      	bne.n	801115c <SD_MspDeInit+0x54>
  {
    HAL_NVIC_DisableIRQ(SDMMC1_IRQn);
 8011118:	2031      	movs	r0, #49	@ 0x31
 801111a:	f001 f9a2 	bl	8012462 <HAL_NVIC_DisableIRQ>

    /* DeInit GPIO pins can be done in the application
    (by surcharging this __weak function) */

    /* Disable SDMMC1 clock */
    __HAL_RCC_SDMMC1_CLK_DISABLE();
 801111e:	4b12      	ldr	r3, [pc, #72]	@ (8011168 <SD_MspDeInit+0x60>)
 8011120:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011124:	4a10      	ldr	r2, [pc, #64]	@ (8011168 <SD_MspDeInit+0x60>)
 8011126:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801112a:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4

#if (USE_SD_BUS_WIDE_4B > 0)
    /* GPIOJ configuration */
    gpio_init_structure.Pin       = GPIO_PIN_14;
 801112e:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 8011132:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(GPIOJ, gpio_init_structure.Pin);
 8011134:	68fb      	ldr	r3, [r7, #12]
 8011136:	4619      	mov	r1, r3
 8011138:	480c      	ldr	r0, [pc, #48]	@ (801116c <SD_MspDeInit+0x64>)
 801113a:	f006 fd95 	bl	8017c68 <HAL_GPIO_DeInit>

    /* GPIOC configuration */
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_9 | GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12;
 801113e:	f44f 53f8 	mov.w	r3, #7936	@ 0x1f00
 8011142:	60fb      	str	r3, [r7, #12]
#else
    gpio_init_structure.Pin = GPIO_PIN_8 | GPIO_PIN_12;
#endif
    HAL_GPIO_DeInit(GPIOC, gpio_init_structure.Pin);
 8011144:	68fb      	ldr	r3, [r7, #12]
 8011146:	4619      	mov	r1, r3
 8011148:	4809      	ldr	r0, [pc, #36]	@ (8011170 <SD_MspDeInit+0x68>)
 801114a:	f006 fd8d 	bl	8017c68 <HAL_GPIO_DeInit>

    /* GPIOD configuration */
    gpio_init_structure.Pin = GPIO_PIN_2;
 801114e:	2304      	movs	r3, #4
 8011150:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_DeInit(GPIOD, gpio_init_structure.Pin);
 8011152:	68fb      	ldr	r3, [r7, #12]
 8011154:	4619      	mov	r1, r3
 8011156:	4807      	ldr	r0, [pc, #28]	@ (8011174 <SD_MspDeInit+0x6c>)
 8011158:	f006 fd86 	bl	8017c68 <HAL_GPIO_DeInit>
  }
}
 801115c:	bf00      	nop
 801115e:	3720      	adds	r7, #32
 8011160:	46bd      	mov	sp, r7
 8011162:	bd80      	pop	{r7, pc}
 8011164:	240087ec 	.word	0x240087ec
 8011168:	58024400 	.word	0x58024400
 801116c:	58022400 	.word	0x58022400
 8011170:	58020800 	.word	0x58020800
 8011174:	58020c00 	.word	0x58020c00

08011178 <BSP_SDRAM_Init>:
  * @brief  Initializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_Init(uint32_t Instance)
{
 8011178:	b580      	push	{r7, lr}
 801117a:	b084      	sub	sp, #16
 801117c:	af00      	add	r7, sp, #0
 801117e:	6078      	str	r0, [r7, #4]
  int32_t ret;
  static IS42S32800J_Context_t pRegMode;

  if(Instance >=SDRAM_INSTANCES_NBR)
 8011180:	687b      	ldr	r3, [r7, #4]
 8011182:	2b00      	cmp	r3, #0
 8011184:	d003      	beq.n	801118e <BSP_SDRAM_Init+0x16>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 8011186:	f06f 0301 	mvn.w	r3, #1
 801118a:	60fb      	str	r3, [r7, #12]
 801118c:	e033      	b.n	80111f6 <BSP_SDRAM_Init+0x7e>
          return BSP_ERROR_PERIPH_FAILURE;
        }
      }
#else
      /* Msp SDRAM initialization */
      SDRAM_MspInit(&hsdram[0]);
 801118e:	481c      	ldr	r0, [pc, #112]	@ (8011200 <BSP_SDRAM_Init+0x88>)
 8011190:	f000 f8cc 	bl	801132c <SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

    if(MX_SDRAM_Init(&hsdram[0]) != HAL_OK)
 8011194:	481a      	ldr	r0, [pc, #104]	@ (8011200 <BSP_SDRAM_Init+0x88>)
 8011196:	f000 f869 	bl	801126c <MX_SDRAM_Init>
 801119a:	4603      	mov	r3, r0
 801119c:	2b00      	cmp	r3, #0
 801119e:	d003      	beq.n	80111a8 <BSP_SDRAM_Init+0x30>
    {
      ret = BSP_ERROR_NO_INIT;
 80111a0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80111a4:	60fb      	str	r3, [r7, #12]
 80111a6:	e026      	b.n	80111f6 <BSP_SDRAM_Init+0x7e>
    }
    else
    {
      /* External memory mode register configuration */
      pRegMode.TargetBank      = FMC_SDRAM_CMD_TARGET_BANK2;
 80111a8:	4b16      	ldr	r3, [pc, #88]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111aa:	2208      	movs	r2, #8
 80111ac:	601a      	str	r2, [r3, #0]
      pRegMode.RefreshMode     = IS42S32800J_AUTOREFRESH_MODE_CMD;
 80111ae:	4b15      	ldr	r3, [pc, #84]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111b0:	2203      	movs	r2, #3
 80111b2:	605a      	str	r2, [r3, #4]
      pRegMode.RefreshRate     = REFRESH_COUNT;
 80111b4:	4b13      	ldr	r3, [pc, #76]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111b6:	f240 6203 	movw	r2, #1539	@ 0x603
 80111ba:	609a      	str	r2, [r3, #8]
      pRegMode.BurstLength     = IS42S32800J_BURST_LENGTH_1;
 80111bc:	4b11      	ldr	r3, [pc, #68]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111be:	2200      	movs	r2, #0
 80111c0:	60da      	str	r2, [r3, #12]
      pRegMode.BurstType       = IS42S32800J_BURST_TYPE_SEQUENTIAL;
 80111c2:	4b10      	ldr	r3, [pc, #64]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111c4:	2200      	movs	r2, #0
 80111c6:	611a      	str	r2, [r3, #16]
      pRegMode.CASLatency      = IS42S32800J_CAS_LATENCY_3;
 80111c8:	4b0e      	ldr	r3, [pc, #56]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111ca:	2230      	movs	r2, #48	@ 0x30
 80111cc:	615a      	str	r2, [r3, #20]
      pRegMode.OperationMode   = IS42S32800J_OPERATING_MODE_STANDARD;
 80111ce:	4b0d      	ldr	r3, [pc, #52]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111d0:	2200      	movs	r2, #0
 80111d2:	619a      	str	r2, [r3, #24]
      pRegMode.WriteBurstMode  = IS42S32800J_WRITEBURST_MODE_SINGLE;
 80111d4:	4b0b      	ldr	r3, [pc, #44]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80111da:	61da      	str	r2, [r3, #28]

      /* SDRAM initialization sequence */
      if(IS42S32800J_Init(&hsdram[0], &pRegMode) != IS42S32800J_OK)
 80111dc:	4909      	ldr	r1, [pc, #36]	@ (8011204 <BSP_SDRAM_Init+0x8c>)
 80111de:	4808      	ldr	r0, [pc, #32]	@ (8011200 <BSP_SDRAM_Init+0x88>)
 80111e0:	f7ef fc71 	bl	8000ac6 <IS42S32800J_Init>
 80111e4:	4603      	mov	r3, r0
 80111e6:	2b00      	cmp	r3, #0
 80111e8:	d003      	beq.n	80111f2 <BSP_SDRAM_Init+0x7a>
      {
        ret =  BSP_ERROR_COMPONENT_FAILURE;
 80111ea:	f06f 0304 	mvn.w	r3, #4
 80111ee:	60fb      	str	r3, [r7, #12]
 80111f0:	e001      	b.n	80111f6 <BSP_SDRAM_Init+0x7e>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 80111f2:	2300      	movs	r3, #0
 80111f4:	60fb      	str	r3, [r7, #12]
      }
    }
  }

  return ret;
 80111f6:	68fb      	ldr	r3, [r7, #12]
}
 80111f8:	4618      	mov	r0, r3
 80111fa:	3710      	adds	r7, #16
 80111fc:	46bd      	mov	sp, r7
 80111fe:	bd80      	pop	{r7, pc}
 8011200:	24008870 	.word	0x24008870
 8011204:	240088a4 	.word	0x240088a4

08011208 <BSP_SDRAM_DeInit>:
  * @brief  DeInitializes the SDRAM device.
  * @param Instance  SDRAM Instance
  * @retval BSP status
  */
int32_t BSP_SDRAM_DeInit(uint32_t Instance)
{
 8011208:	b580      	push	{r7, lr}
 801120a:	b084      	sub	sp, #16
 801120c:	af00      	add	r7, sp, #0
 801120e:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8011210:	2300      	movs	r3, #0
 8011212:	60fb      	str	r3, [r7, #12]

  if(Instance >=SDRAM_INSTANCES_NBR)
 8011214:	687b      	ldr	r3, [r7, #4]
 8011216:	2b00      	cmp	r3, #0
 8011218:	d003      	beq.n	8011222 <BSP_SDRAM_DeInit+0x1a>
  {
    ret =  BSP_ERROR_WRONG_PARAM;
 801121a:	f06f 0301 	mvn.w	r3, #1
 801121e:	60fb      	str	r3, [r7, #12]
 8011220:	e01b      	b.n	801125a <BSP_SDRAM_DeInit+0x52>
  }
  else
  {
    /* SDRAM device de-initialization */
    hsdram[Instance].Instance = FMC_SDRAM_DEVICE;
 8011222:	4a10      	ldr	r2, [pc, #64]	@ (8011264 <BSP_SDRAM_DeInit+0x5c>)
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	2134      	movs	r1, #52	@ 0x34
 8011228:	fb01 f303 	mul.w	r3, r1, r3
 801122c:	4413      	add	r3, r2
 801122e:	4a0e      	ldr	r2, [pc, #56]	@ (8011268 <BSP_SDRAM_DeInit+0x60>)
 8011230:	601a      	str	r2, [r3, #0]

    (void)HAL_SDRAM_DeInit(&hsdram[Instance]);
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	2234      	movs	r2, #52	@ 0x34
 8011236:	fb02 f303 	mul.w	r3, r2, r3
 801123a:	4a0a      	ldr	r2, [pc, #40]	@ (8011264 <BSP_SDRAM_DeInit+0x5c>)
 801123c:	4413      	add	r3, r2
 801123e:	4618      	mov	r0, r3
 8011240:	f010 f818 	bl	8021274 <HAL_SDRAM_DeInit>
#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0)
    /* SDRAM controller de-initialization */
    SDRAM_MspDeInit(&hsdram[Instance]);
 8011244:	687b      	ldr	r3, [r7, #4]
 8011246:	2234      	movs	r2, #52	@ 0x34
 8011248:	fb02 f303 	mul.w	r3, r2, r3
 801124c:	4a05      	ldr	r2, [pc, #20]	@ (8011264 <BSP_SDRAM_DeInit+0x5c>)
 801124e:	4413      	add	r3, r2
 8011250:	4618      	mov	r0, r3
 8011252:	f000 f981 	bl	8011558 <SDRAM_MspDeInit>
#endif /* (USE_HAL_SDRAM_REGISTER_CALLBACKS == 0) */

    ret = BSP_ERROR_NONE;
 8011256:	2300      	movs	r3, #0
 8011258:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 801125a:	68fb      	ldr	r3, [r7, #12]
}
 801125c:	4618      	mov	r0, r3
 801125e:	3710      	adds	r7, #16
 8011260:	46bd      	mov	sp, r7
 8011262:	bd80      	pop	{r7, pc}
 8011264:	24008870 	.word	0x24008870
 8011268:	52004140 	.word	0x52004140

0801126c <MX_SDRAM_Init>:
  * @param  hSdram SDRAM handle
  * @retval HAL status
  */

__weak HAL_StatusTypeDef MX_SDRAM_Init(SDRAM_HandleTypeDef *hSdram)
{
 801126c:	b580      	push	{r7, lr}
 801126e:	b08a      	sub	sp, #40	@ 0x28
 8011270:	af00      	add	r7, sp, #0
 8011272:	6078      	str	r0, [r7, #4]
  FMC_SDRAM_TimingTypeDef sdram_timing;

  /* SDRAM device configuration */
  hSdram->Instance = FMC_SDRAM_DEVICE;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	4a20      	ldr	r2, [pc, #128]	@ (80112f8 <MX_SDRAM_Init+0x8c>)
 8011278:	601a      	str	r2, [r3, #0]

  /* SDRAM handle configuration */
  hSdram->Init.SDBank             = FMC_SDRAM_BANK2;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	2201      	movs	r2, #1
 801127e:	605a      	str	r2, [r3, #4]
  hSdram->Init.ColumnBitsNumber   = FMC_SDRAM_COLUMN_BITS_NUM_9;
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	2201      	movs	r2, #1
 8011284:	609a      	str	r2, [r3, #8]
  hSdram->Init.RowBitsNumber      = FMC_SDRAM_ROW_BITS_NUM_12;
 8011286:	687b      	ldr	r3, [r7, #4]
 8011288:	2204      	movs	r2, #4
 801128a:	60da      	str	r2, [r3, #12]
  hSdram->Init.MemoryDataWidth    = FMC_SDRAM_MEM_BUS_WIDTH_32;
 801128c:	687b      	ldr	r3, [r7, #4]
 801128e:	2220      	movs	r2, #32
 8011290:	611a      	str	r2, [r3, #16]
  hSdram->Init.InternalBankNumber = FMC_SDRAM_INTERN_BANKS_NUM_4;
 8011292:	687b      	ldr	r3, [r7, #4]
 8011294:	2240      	movs	r2, #64	@ 0x40
 8011296:	615a      	str	r2, [r3, #20]
  hSdram->Init.CASLatency         = FMC_SDRAM_CAS_LATENCY_3;
 8011298:	687b      	ldr	r3, [r7, #4]
 801129a:	f44f 72c0 	mov.w	r2, #384	@ 0x180
 801129e:	619a      	str	r2, [r3, #24]
  hSdram->Init.WriteProtection    = FMC_SDRAM_WRITE_PROTECTION_DISABLE;
 80112a0:	687b      	ldr	r3, [r7, #4]
 80112a2:	2200      	movs	r2, #0
 80112a4:	61da      	str	r2, [r3, #28]
  hSdram->Init.SDClockPeriod      = FMC_SDRAM_CLOCK_PERIOD_2;
 80112a6:	687b      	ldr	r3, [r7, #4]
 80112a8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80112ac:	621a      	str	r2, [r3, #32]
  hSdram->Init.ReadBurst          = FMC_SDRAM_RBURST_ENABLE;
 80112ae:	687b      	ldr	r3, [r7, #4]
 80112b0:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80112b4:	625a      	str	r2, [r3, #36]	@ 0x24
  hsdram->Init.ReadPipeDelay      = FMC_SDRAM_RPIPE_DELAY_0;
 80112b6:	4b11      	ldr	r3, [pc, #68]	@ (80112fc <MX_SDRAM_Init+0x90>)
 80112b8:	2200      	movs	r2, #0
 80112ba:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Timing configuration for 100Mhz as SDRAM clock frequency (System clock is up to 200Mhz) */
  sdram_timing.LoadToActiveDelay    = 2;
 80112bc:	2302      	movs	r3, #2
 80112be:	60fb      	str	r3, [r7, #12]
  sdram_timing.ExitSelfRefreshDelay = 7;
 80112c0:	2307      	movs	r3, #7
 80112c2:	613b      	str	r3, [r7, #16]
  sdram_timing.SelfRefreshTime      = 4;
 80112c4:	2304      	movs	r3, #4
 80112c6:	617b      	str	r3, [r7, #20]
  sdram_timing.RowCycleDelay        = 7;
 80112c8:	2307      	movs	r3, #7
 80112ca:	61bb      	str	r3, [r7, #24]
  sdram_timing.WriteRecoveryTime    = 2;
 80112cc:	2302      	movs	r3, #2
 80112ce:	61fb      	str	r3, [r7, #28]
  sdram_timing.RPDelay              = 2;
 80112d0:	2302      	movs	r3, #2
 80112d2:	623b      	str	r3, [r7, #32]
  sdram_timing.RCDDelay             = 2;
 80112d4:	2302      	movs	r3, #2
 80112d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* SDRAM controller initialization */
  if(HAL_SDRAM_Init(hSdram, &sdram_timing) != HAL_OK)
 80112d8:	f107 030c 	add.w	r3, r7, #12
 80112dc:	4619      	mov	r1, r3
 80112de:	6878      	ldr	r0, [r7, #4]
 80112e0:	f00f ff8c 	bl	80211fc <HAL_SDRAM_Init>
 80112e4:	4603      	mov	r3, r0
 80112e6:	2b00      	cmp	r3, #0
 80112e8:	d001      	beq.n	80112ee <MX_SDRAM_Init+0x82>
  {
    return  HAL_ERROR;
 80112ea:	2301      	movs	r3, #1
 80112ec:	e000      	b.n	80112f0 <MX_SDRAM_Init+0x84>
  }
  return HAL_OK;
 80112ee:	2300      	movs	r3, #0
}
 80112f0:	4618      	mov	r0, r3
 80112f2:	3728      	adds	r7, #40	@ 0x28
 80112f4:	46bd      	mov	sp, r7
 80112f6:	bd80      	pop	{r7, pc}
 80112f8:	52004140 	.word	0x52004140
 80112fc:	24008870 	.word	0x24008870

08011300 <BSP_SDRAM_IRQHandler>:
/**
  * @brief  This function handles MDMA_MDMA_Channel0 for SDRAM interrupt request.
  * @retval None
  */
void BSP_SDRAM_IRQHandler(uint32_t Instance)
{
 8011300:	b580      	push	{r7, lr}
 8011302:	b082      	sub	sp, #8
 8011304:	af00      	add	r7, sp, #0
 8011306:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Instance);

  HAL_MDMA_IRQHandler(hsdram[Instance].hmdma);
 8011308:	4a07      	ldr	r2, [pc, #28]	@ (8011328 <BSP_SDRAM_IRQHandler+0x28>)
 801130a:	687b      	ldr	r3, [r7, #4]
 801130c:	2134      	movs	r1, #52	@ 0x34
 801130e:	fb01 f303 	mul.w	r3, r1, r3
 8011312:	4413      	add	r3, r2
 8011314:	3330      	adds	r3, #48	@ 0x30
 8011316:	681b      	ldr	r3, [r3, #0]
 8011318:	4618      	mov	r0, r3
 801131a:	f007 fffd 	bl	8019318 <HAL_MDMA_IRQHandler>
}
 801131e:	bf00      	nop
 8011320:	3708      	adds	r7, #8
 8011322:	46bd      	mov	sp, r7
 8011324:	bd80      	pop	{r7, pc}
 8011326:	bf00      	nop
 8011328:	24008870 	.word	0x24008870

0801132c <SDRAM_MspInit>:
  * @brief  Initializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspInit(SDRAM_HandleTypeDef  *hsdram)
{
 801132c:	b580      	push	{r7, lr}
 801132e:	b090      	sub	sp, #64	@ 0x40
 8011330:	af00      	add	r7, sp, #0
 8011332:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;
  GPIO_InitTypeDef gpio_init_structure;

  /* Enable FMC clock */
  __HAL_RCC_FMC_CLK_ENABLE();
 8011334:	4b7f      	ldr	r3, [pc, #508]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011336:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801133a:	4a7e      	ldr	r2, [pc, #504]	@ (8011534 <SDRAM_MspInit+0x208>)
 801133c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8011340:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8011344:	4b7b      	ldr	r3, [pc, #492]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011346:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 801134a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801134e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8011350:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable chosen MDMAx clock */
  SDRAM_MDMAx_CLK_ENABLE();
 8011352:	4b78      	ldr	r3, [pc, #480]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011354:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011358:	4a76      	ldr	r2, [pc, #472]	@ (8011534 <SDRAM_MspInit+0x208>)
 801135a:	f043 0301 	orr.w	r3, r3, #1
 801135e:	f8c2 30d4 	str.w	r3, [r2, #212]	@ 0xd4
 8011362:	4b74      	ldr	r3, [pc, #464]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011364:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8011368:	f003 0301 	and.w	r3, r3, #1
 801136c:	627b      	str	r3, [r7, #36]	@ 0x24
 801136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

  /* Enable GPIOs clock */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8011370:	4b70      	ldr	r3, [pc, #448]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011372:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011376:	4a6f      	ldr	r2, [pc, #444]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011378:	f043 0308 	orr.w	r3, r3, #8
 801137c:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011380:	4b6c      	ldr	r3, [pc, #432]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011382:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011386:	f003 0308 	and.w	r3, r3, #8
 801138a:	623b      	str	r3, [r7, #32]
 801138c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 801138e:	4b69      	ldr	r3, [pc, #420]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011390:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 8011394:	4a67      	ldr	r2, [pc, #412]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011396:	f043 0310 	orr.w	r3, r3, #16
 801139a:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 801139e:	4b65      	ldr	r3, [pc, #404]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113a0:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113a4:	f003 0310 	and.w	r3, r3, #16
 80113a8:	61fb      	str	r3, [r7, #28]
 80113aa:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80113ac:	4b61      	ldr	r3, [pc, #388]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113ae:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113b2:	4a60      	ldr	r2, [pc, #384]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113b4:	f043 0320 	orr.w	r3, r3, #32
 80113b8:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80113bc:	4b5d      	ldr	r3, [pc, #372]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113be:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113c2:	f003 0320 	and.w	r3, r3, #32
 80113c6:	61bb      	str	r3, [r7, #24]
 80113c8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80113ca:	4b5a      	ldr	r3, [pc, #360]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113cc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113d0:	4a58      	ldr	r2, [pc, #352]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80113d6:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80113da:	4b56      	ldr	r3, [pc, #344]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113dc:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113e0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80113e4:	617b      	str	r3, [r7, #20]
 80113e6:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80113e8:	4b52      	ldr	r3, [pc, #328]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113ea:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113ee:	4a51      	ldr	r2, [pc, #324]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113f0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80113f4:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 80113f8:	4b4e      	ldr	r3, [pc, #312]	@ (8011534 <SDRAM_MspInit+0x208>)
 80113fa:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 80113fe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8011402:	613b      	str	r3, [r7, #16]
 8011404:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOI_CLK_ENABLE();
 8011406:	4b4b      	ldr	r3, [pc, #300]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011408:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801140c:	4a49      	ldr	r2, [pc, #292]	@ (8011534 <SDRAM_MspInit+0x208>)
 801140e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8011412:	f8c2 30e0 	str.w	r3, [r2, #224]	@ 0xe0
 8011416:	4b47      	ldr	r3, [pc, #284]	@ (8011534 <SDRAM_MspInit+0x208>)
 8011418:	f8d3 30e0 	ldr.w	r3, [r3, #224]	@ 0xe0
 801141c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8011420:	60fb      	str	r3, [r7, #12]
 8011422:	68fb      	ldr	r3, [r7, #12]

  /* Common GPIO configuration */
  gpio_init_structure.Mode      = GPIO_MODE_AF_PP;
 8011424:	2302      	movs	r3, #2
 8011426:	633b      	str	r3, [r7, #48]	@ 0x30
  gpio_init_structure.Pull      = GPIO_PULLUP;
 8011428:	2301      	movs	r3, #1
 801142a:	637b      	str	r3, [r7, #52]	@ 0x34
  gpio_init_structure.Speed     = GPIO_SPEED_FREQ_VERY_HIGH;
 801142c:	2303      	movs	r3, #3
 801142e:	63bb      	str	r3, [r7, #56]	@ 0x38
  gpio_init_structure.Alternate = GPIO_AF12_FMC;
 8011430:	230c      	movs	r3, #12
 8011432:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* GPIOD configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_8| GPIO_PIN_9 | GPIO_PIN_10 |\
 8011434:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8011438:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_14 | GPIO_PIN_15;

  HAL_GPIO_Init(GPIOD, &gpio_init_structure);
 801143a:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 801143e:	4619      	mov	r1, r3
 8011440:	483d      	ldr	r0, [pc, #244]	@ (8011538 <SDRAM_MspInit+0x20c>)
 8011442:	f006 fa61 	bl	8017908 <HAL_GPIO_Init>

  /* GPIOE configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_7| GPIO_PIN_8 | GPIO_PIN_9 |\
 8011446:	f64f 7383 	movw	r3, #65411	@ 0xff83
 801144a:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOE, &gpio_init_structure);
 801144c:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011450:	4619      	mov	r1, r3
 8011452:	483a      	ldr	r0, [pc, #232]	@ (801153c <SDRAM_MspInit+0x210>)
 8011454:	f006 fa58 	bl	8017908 <HAL_GPIO_Init>
  /* GPIOF configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2| GPIO_PIN_3 | GPIO_PIN_4 |\
 8011458:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 801145c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOF, &gpio_init_structure);
 801145e:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011462:	4619      	mov	r1, r3
 8011464:	4836      	ldr	r0, [pc, #216]	@ (8011540 <SDRAM_MspInit+0x214>)
 8011466:	f006 fa4f 	bl	8017908 <HAL_GPIO_Init>
  /* GPIOG configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 /*| GPIO_PIN_3 */|\
 801146a:	f248 1337 	movw	r3, #33079	@ 0x8137
 801146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_4 | GPIO_PIN_5 | GPIO_PIN_8 | GPIO_PIN_15;
  HAL_GPIO_Init(GPIOG, &gpio_init_structure);
 8011470:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011474:	4619      	mov	r1, r3
 8011476:	4833      	ldr	r0, [pc, #204]	@ (8011544 <SDRAM_MspInit+0x218>)
 8011478:	f006 fa46 	bl	8017908 <HAL_GPIO_Init>

  /* GPIOH configuration */
  gpio_init_structure.Pin   = GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_8 | GPIO_PIN_9 |\
 801147c:	f64f 73e0 	movw	r3, #65504	@ 0xffe0
 8011480:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_10 | GPIO_PIN_11 | GPIO_PIN_12 | GPIO_PIN_13 | GPIO_PIN_14 |\
                              GPIO_PIN_15;

  HAL_GPIO_Init(GPIOH, &gpio_init_structure);
 8011482:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011486:	4619      	mov	r1, r3
 8011488:	482f      	ldr	r0, [pc, #188]	@ (8011548 <SDRAM_MspInit+0x21c>)
 801148a:	f006 fa3d 	bl	8017908 <HAL_GPIO_Init>

  /* GPIOI configuration */
  gpio_init_structure.Pin   = GPIO_PIN_0 | GPIO_PIN_1 | GPIO_PIN_2 | GPIO_PIN_3 | GPIO_PIN_4 |\
 801148e:	f240 63ff 	movw	r3, #1791	@ 0x6ff
 8011492:	62fb      	str	r3, [r7, #44]	@ 0x2c
                              GPIO_PIN_5 | GPIO_PIN_6 | GPIO_PIN_7 | GPIO_PIN_9 | GPIO_PIN_10;

  HAL_GPIO_Init(GPIOI, &gpio_init_structure);
 8011494:	f107 032c 	add.w	r3, r7, #44	@ 0x2c
 8011498:	4619      	mov	r1, r3
 801149a:	482c      	ldr	r0, [pc, #176]	@ (801154c <SDRAM_MspInit+0x220>)
 801149c:	f006 fa34 	bl	8017908 <HAL_GPIO_Init>

  /* Configure common MDMA parameters */
  mdma_handle.Init.Request                  = MDMA_REQUEST_SW;
 80114a0:	4b2b      	ldr	r3, [pc, #172]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114a2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80114a6:	605a      	str	r2, [r3, #4]
  mdma_handle.Init.TransferTriggerMode      = MDMA_BLOCK_TRANSFER;
 80114a8:	4b29      	ldr	r3, [pc, #164]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114aa:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80114ae:	609a      	str	r2, [r3, #8]
  mdma_handle.Init.Priority                 = MDMA_PRIORITY_HIGH;
 80114b0:	4b27      	ldr	r3, [pc, #156]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114b2:	2280      	movs	r2, #128	@ 0x80
 80114b4:	60da      	str	r2, [r3, #12]
  mdma_handle.Init.Endianness               = MDMA_LITTLE_ENDIANNESS_PRESERVE;
 80114b6:	4b26      	ldr	r3, [pc, #152]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114b8:	2200      	movs	r2, #0
 80114ba:	611a      	str	r2, [r3, #16]
  mdma_handle.Init.SourceInc                = MDMA_SRC_INC_WORD;
 80114bc:	4b24      	ldr	r3, [pc, #144]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114be:	f240 2202 	movw	r2, #514	@ 0x202
 80114c2:	615a      	str	r2, [r3, #20]
  mdma_handle.Init.DestinationInc           = MDMA_DEST_INC_WORD;
 80114c4:	4b22      	ldr	r3, [pc, #136]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114c6:	f640 0208 	movw	r2, #2056	@ 0x808
 80114ca:	619a      	str	r2, [r3, #24]
  mdma_handle.Init.SourceDataSize           = MDMA_SRC_DATASIZE_WORD;
 80114cc:	4b20      	ldr	r3, [pc, #128]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114ce:	2220      	movs	r2, #32
 80114d0:	61da      	str	r2, [r3, #28]
  mdma_handle.Init.DestDataSize             = MDMA_DEST_DATASIZE_WORD;
 80114d2:	4b1f      	ldr	r3, [pc, #124]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114d4:	2280      	movs	r2, #128	@ 0x80
 80114d6:	621a      	str	r2, [r3, #32]
  mdma_handle.Init.DataAlignment            = MDMA_DATAALIGN_PACKENABLE;
 80114d8:	4b1d      	ldr	r3, [pc, #116]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114da:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 80114de:	625a      	str	r2, [r3, #36]	@ 0x24
  mdma_handle.Init.SourceBurst              = MDMA_SOURCE_BURST_SINGLE;
 80114e0:	4b1b      	ldr	r3, [pc, #108]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114e2:	2200      	movs	r2, #0
 80114e4:	62da      	str	r2, [r3, #44]	@ 0x2c
  mdma_handle.Init.DestBurst                = MDMA_DEST_BURST_SINGLE;
 80114e6:	4b1a      	ldr	r3, [pc, #104]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114e8:	2200      	movs	r2, #0
 80114ea:	631a      	str	r2, [r3, #48]	@ 0x30
  mdma_handle.Init.BufferTransferLength     = 128;
 80114ec:	4b18      	ldr	r3, [pc, #96]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114ee:	2280      	movs	r2, #128	@ 0x80
 80114f0:	629a      	str	r2, [r3, #40]	@ 0x28
  mdma_handle.Init.SourceBlockAddressOffset = 0;
 80114f2:	4b17      	ldr	r3, [pc, #92]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114f4:	2200      	movs	r2, #0
 80114f6:	635a      	str	r2, [r3, #52]	@ 0x34
  mdma_handle.Init.DestBlockAddressOffset   = 0;
 80114f8:	4b15      	ldr	r3, [pc, #84]	@ (8011550 <SDRAM_MspInit+0x224>)
 80114fa:	2200      	movs	r2, #0
 80114fc:	639a      	str	r2, [r3, #56]	@ 0x38
  mdma_handle.Instance                      = SDRAM_MDMAx_CHANNEL;
 80114fe:	4b14      	ldr	r3, [pc, #80]	@ (8011550 <SDRAM_MspInit+0x224>)
 8011500:	4a14      	ldr	r2, [pc, #80]	@ (8011554 <SDRAM_MspInit+0x228>)
 8011502:	601a      	str	r2, [r3, #0]

   /* Associate the MDMA handle */
  __HAL_LINKDMA(hsdram, hmdma, mdma_handle);
 8011504:	687b      	ldr	r3, [r7, #4]
 8011506:	4a12      	ldr	r2, [pc, #72]	@ (8011550 <SDRAM_MspInit+0x224>)
 8011508:	631a      	str	r2, [r3, #48]	@ 0x30
 801150a:	4a11      	ldr	r2, [pc, #68]	@ (8011550 <SDRAM_MspInit+0x224>)
 801150c:	687b      	ldr	r3, [r7, #4]
 801150e:	6413      	str	r3, [r2, #64]	@ 0x40

  /* Deinitialize the stream for new transfer */
  (void)HAL_MDMA_DeInit(&mdma_handle);
 8011510:	480f      	ldr	r0, [pc, #60]	@ (8011550 <SDRAM_MspInit+0x224>)
 8011512:	f007 fe27 	bl	8019164 <HAL_MDMA_DeInit>

  /* Configure the MDMA stream */
  (void)HAL_MDMA_Init(&mdma_handle);
 8011516:	480e      	ldr	r0, [pc, #56]	@ (8011550 <SDRAM_MspInit+0x224>)
 8011518:	f007 fdd8 	bl	80190cc <HAL_MDMA_Init>

  /* NVIC configuration for DMA transfer complete interrupt */
  HAL_NVIC_SetPriority(SDRAM_MDMAx_IRQn, BSP_SDRAM_IT_PRIORITY, 0);
 801151c:	2200      	movs	r2, #0
 801151e:	210f      	movs	r1, #15
 8011520:	207a      	movs	r0, #122	@ 0x7a
 8011522:	f000 ff76 	bl	8012412 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(SDRAM_MDMAx_IRQn);
 8011526:	207a      	movs	r0, #122	@ 0x7a
 8011528:	f000 ff8d 	bl	8012446 <HAL_NVIC_EnableIRQ>
}
 801152c:	bf00      	nop
 801152e:	3740      	adds	r7, #64	@ 0x40
 8011530:	46bd      	mov	sp, r7
 8011532:	bd80      	pop	{r7, pc}
 8011534:	58024400 	.word	0x58024400
 8011538:	58020c00 	.word	0x58020c00
 801153c:	58021000 	.word	0x58021000
 8011540:	58021400 	.word	0x58021400
 8011544:	58021800 	.word	0x58021800
 8011548:	58021c00 	.word	0x58021c00
 801154c:	58022000 	.word	0x58022000
 8011550:	240088c4 	.word	0x240088c4
 8011554:	52000040 	.word	0x52000040

08011558 <SDRAM_MspDeInit>:
  * @brief  DeInitializes SDRAM MSP.
  * @param  hsdram SDRAM handle
  * @retval None
  */
static void SDRAM_MspDeInit(SDRAM_HandleTypeDef  *hsdram)
{
 8011558:	b580      	push	{r7, lr}
 801155a:	b082      	sub	sp, #8
 801155c:	af00      	add	r7, sp, #0
 801155e:	6078      	str	r0, [r7, #4]
  static MDMA_HandleTypeDef mdma_handle;

  /* Prevent unused argument(s) compilation warning */
  UNUSED(hsdram);
  /* Disable NVIC configuration for MDMA interrupt */
  HAL_NVIC_DisableIRQ(SDRAM_MDMAx_IRQn);
 8011560:	207a      	movs	r0, #122	@ 0x7a
 8011562:	f000 ff7e 	bl	8012462 <HAL_NVIC_DisableIRQ>

  /* Deinitialize the stream for new transfer */
  mdma_handle.Instance = SDRAM_MDMAx_CHANNEL;
 8011566:	4b05      	ldr	r3, [pc, #20]	@ (801157c <SDRAM_MspDeInit+0x24>)
 8011568:	4a05      	ldr	r2, [pc, #20]	@ (8011580 <SDRAM_MspDeInit+0x28>)
 801156a:	601a      	str	r2, [r3, #0]
  (void)HAL_MDMA_DeInit(&mdma_handle);
 801156c:	4803      	ldr	r0, [pc, #12]	@ (801157c <SDRAM_MspDeInit+0x24>)
 801156e:	f007 fdf9 	bl	8019164 <HAL_MDMA_DeInit>
}
 8011572:	bf00      	nop
 8011574:	3708      	adds	r7, #8
 8011576:	46bd      	mov	sp, r7
 8011578:	bd80      	pop	{r7, pc}
 801157a:	bf00      	nop
 801157c:	24008930 	.word	0x24008930
 8011580:	52000040 	.word	0x52000040

08011584 <BSP_TS_Init>:
  * @param  Instance TS instance. Could be only 0.
  * @param  TS_Init  TS Init structure
  * @retval BSP status
  */
int32_t BSP_TS_Init(uint32_t Instance, TS_Init_t *TS_Init)
{
 8011584:	b580      	push	{r7, lr}
 8011586:	b088      	sub	sp, #32
 8011588:	af00      	add	r7, sp, #0
 801158a:	6078      	str	r0, [r7, #4]
 801158c:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 801158e:	2300      	movs	r3, #0
 8011590:	61fb      	str	r3, [r7, #28]

  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 8011592:	687b      	ldr	r3, [r7, #4]
 8011594:	2b00      	cmp	r3, #0
 8011596:	d11c      	bne.n	80115d2 <BSP_TS_Init+0x4e>
 8011598:	683b      	ldr	r3, [r7, #0]
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	2b00      	cmp	r3, #0
 801159e:	d018      	beq.n	80115d2 <BSP_TS_Init+0x4e>
 80115a0:	683b      	ldr	r3, [r7, #0]
 80115a2:	681b      	ldr	r3, [r3, #0]
 80115a4:	f5b3 7f48 	cmp.w	r3, #800	@ 0x320
 80115a8:	d813      	bhi.n	80115d2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80115aa:	683b      	ldr	r3, [r7, #0]
 80115ac:	685b      	ldr	r3, [r3, #4]
  if((Instance >=TS_INSTANCES_NBR) || (TS_Init->Width == 0U) ||( TS_Init->Width > TS_MAX_WIDTH) ||\
 80115ae:	2b00      	cmp	r3, #0
 80115b0:	d00f      	beq.n	80115d2 <BSP_TS_Init+0x4e>
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80115b2:	683b      	ldr	r3, [r7, #0]
 80115b4:	685b      	ldr	r3, [r3, #4]
 80115b6:	f5b3 7ff0 	cmp.w	r3, #480	@ 0x1e0
 80115ba:	d80a      	bhi.n	80115d2 <BSP_TS_Init+0x4e>
                         (TS_Init->Accuracy > TS_MIN((TS_Init->Width), (TS_Init->Height))))
 80115bc:	683b      	ldr	r3, [r7, #0]
 80115be:	68da      	ldr	r2, [r3, #12]
 80115c0:	683b      	ldr	r3, [r7, #0]
 80115c2:	6819      	ldr	r1, [r3, #0]
 80115c4:	683b      	ldr	r3, [r7, #0]
 80115c6:	685b      	ldr	r3, [r3, #4]
 80115c8:	428b      	cmp	r3, r1
 80115ca:	bf28      	it	cs
 80115cc:	460b      	movcs	r3, r1
                         (TS_Init->Height == 0U) ||( TS_Init->Height > TS_MAX_HEIGHT) ||\
 80115ce:	429a      	cmp	r2, r3
 80115d0:	d903      	bls.n	80115da <BSP_TS_Init+0x56>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 80115d2:	f06f 0301 	mvn.w	r3, #1
 80115d6:	61fb      	str	r3, [r7, #28]
 80115d8:	e085      	b.n	80116e6 <BSP_TS_Init+0x162>
  }
  else
  {
    if(FT6X06_Probe(Instance) != BSP_ERROR_NONE)
 80115da:	6878      	ldr	r0, [r7, #4]
 80115dc:	f000 fcc6 	bl	8011f6c <FT6X06_Probe>
 80115e0:	4603      	mov	r3, r0
 80115e2:	2b00      	cmp	r3, #0
 80115e4:	d003      	beq.n	80115ee <BSP_TS_Init+0x6a>
    {
      ret = BSP_ERROR_NO_INIT;
 80115e6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80115ea:	61fb      	str	r3, [r7, #28]
 80115ec:	e07b      	b.n	80116e6 <BSP_TS_Init+0x162>
    }
    else
    {
      TS_Capabilities_t Capabilities;
      Ts_Ctx[Instance].Width             = TS_Init->Width;
 80115ee:	683b      	ldr	r3, [r7, #0]
 80115f0:	6819      	ldr	r1, [r3, #0]
 80115f2:	483f      	ldr	r0, [pc, #252]	@ (80116f0 <BSP_TS_Init+0x16c>)
 80115f4:	687a      	ldr	r2, [r7, #4]
 80115f6:	4613      	mov	r3, r2
 80115f8:	009b      	lsls	r3, r3, #2
 80115fa:	4413      	add	r3, r2
 80115fc:	00db      	lsls	r3, r3, #3
 80115fe:	4403      	add	r3, r0
 8011600:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Height            = TS_Init->Height;
 8011602:	683b      	ldr	r3, [r7, #0]
 8011604:	6859      	ldr	r1, [r3, #4]
 8011606:	483a      	ldr	r0, [pc, #232]	@ (80116f0 <BSP_TS_Init+0x16c>)
 8011608:	687a      	ldr	r2, [r7, #4]
 801160a:	4613      	mov	r3, r2
 801160c:	009b      	lsls	r3, r3, #2
 801160e:	4413      	add	r3, r2
 8011610:	00db      	lsls	r3, r3, #3
 8011612:	4403      	add	r3, r0
 8011614:	3304      	adds	r3, #4
 8011616:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Orientation       = TS_Init->Orientation;
 8011618:	683b      	ldr	r3, [r7, #0]
 801161a:	6899      	ldr	r1, [r3, #8]
 801161c:	4834      	ldr	r0, [pc, #208]	@ (80116f0 <BSP_TS_Init+0x16c>)
 801161e:	687a      	ldr	r2, [r7, #4]
 8011620:	4613      	mov	r3, r2
 8011622:	009b      	lsls	r3, r3, #2
 8011624:	4413      	add	r3, r2
 8011626:	00db      	lsls	r3, r3, #3
 8011628:	4403      	add	r3, r0
 801162a:	3308      	adds	r3, #8
 801162c:	6019      	str	r1, [r3, #0]
      Ts_Ctx[Instance].Accuracy          = TS_Init->Accuracy;
 801162e:	683b      	ldr	r3, [r7, #0]
 8011630:	68d9      	ldr	r1, [r3, #12]
 8011632:	482f      	ldr	r0, [pc, #188]	@ (80116f0 <BSP_TS_Init+0x16c>)
 8011634:	687a      	ldr	r2, [r7, #4]
 8011636:	4613      	mov	r3, r2
 8011638:	009b      	lsls	r3, r3, #2
 801163a:	4413      	add	r3, r2
 801163c:	00db      	lsls	r3, r3, #3
 801163e:	4403      	add	r3, r0
 8011640:	330c      	adds	r3, #12
 8011642:	6019      	str	r1, [r3, #0]

      if (Ts_Drv->GetCapabilities(Ts_CompObj[Instance], &Capabilities) < 0)
 8011644:	4b2b      	ldr	r3, [pc, #172]	@ (80116f4 <BSP_TS_Init+0x170>)
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	69db      	ldr	r3, [r3, #28]
 801164a:	492b      	ldr	r1, [pc, #172]	@ (80116f8 <BSP_TS_Init+0x174>)
 801164c:	687a      	ldr	r2, [r7, #4]
 801164e:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011652:	f107 010c 	add.w	r1, r7, #12
 8011656:	4610      	mov	r0, r2
 8011658:	4798      	blx	r3
 801165a:	4603      	mov	r3, r0
 801165c:	2b00      	cmp	r3, #0
 801165e:	da03      	bge.n	8011668 <BSP_TS_Init+0xe4>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8011660:	f06f 0304 	mvn.w	r3, #4
 8011664:	61fb      	str	r3, [r7, #28]
 8011666:	e03e      	b.n	80116e6 <BSP_TS_Init+0x162>
      }
      else
      {
        /* Store maximum X and Y on context */
        Ts_Ctx[Instance].MaxX = Capabilities.MaxXl;
 8011668:	6939      	ldr	r1, [r7, #16]
 801166a:	4821      	ldr	r0, [pc, #132]	@ (80116f0 <BSP_TS_Init+0x16c>)
 801166c:	687a      	ldr	r2, [r7, #4]
 801166e:	4613      	mov	r3, r2
 8011670:	009b      	lsls	r3, r3, #2
 8011672:	4413      	add	r3, r2
 8011674:	00db      	lsls	r3, r3, #3
 8011676:	4403      	add	r3, r0
 8011678:	3310      	adds	r3, #16
 801167a:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].MaxY = Capabilities.MaxYl;
 801167c:	6979      	ldr	r1, [r7, #20]
 801167e:	481c      	ldr	r0, [pc, #112]	@ (80116f0 <BSP_TS_Init+0x16c>)
 8011680:	687a      	ldr	r2, [r7, #4]
 8011682:	4613      	mov	r3, r2
 8011684:	009b      	lsls	r3, r3, #2
 8011686:	4413      	add	r3, r2
 8011688:	00db      	lsls	r3, r3, #3
 801168a:	4403      	add	r3, r0
 801168c:	3314      	adds	r3, #20
 801168e:	6019      	str	r1, [r3, #0]
        /* Initialize previous position in order to always detect first touch */
        for(int i = 0; i < TS_TOUCH_NBR; i++)
 8011690:	2300      	movs	r3, #0
 8011692:	61bb      	str	r3, [r7, #24]
 8011694:	e024      	b.n	80116e0 <BSP_TS_Init+0x15c>
        {
          Ts_Ctx[Instance].PreviousX[i] = TS_Init->Width + TS_Init->Accuracy + 1U;
 8011696:	683b      	ldr	r3, [r7, #0]
 8011698:	681a      	ldr	r2, [r3, #0]
 801169a:	683b      	ldr	r3, [r7, #0]
 801169c:	68db      	ldr	r3, [r3, #12]
 801169e:	4413      	add	r3, r2
 80116a0:	1c59      	adds	r1, r3, #1
 80116a2:	4813      	ldr	r0, [pc, #76]	@ (80116f0 <BSP_TS_Init+0x16c>)
 80116a4:	687a      	ldr	r2, [r7, #4]
 80116a6:	4613      	mov	r3, r2
 80116a8:	009b      	lsls	r3, r3, #2
 80116aa:	4413      	add	r3, r2
 80116ac:	005b      	lsls	r3, r3, #1
 80116ae:	69ba      	ldr	r2, [r7, #24]
 80116b0:	4413      	add	r3, r2
 80116b2:	3306      	adds	r3, #6
 80116b4:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[i] = TS_Init->Height + TS_Init->Accuracy + 1U;
 80116b8:	683b      	ldr	r3, [r7, #0]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	683b      	ldr	r3, [r7, #0]
 80116be:	68db      	ldr	r3, [r3, #12]
 80116c0:	4413      	add	r3, r2
 80116c2:	1c59      	adds	r1, r3, #1
 80116c4:	480a      	ldr	r0, [pc, #40]	@ (80116f0 <BSP_TS_Init+0x16c>)
 80116c6:	687a      	ldr	r2, [r7, #4]
 80116c8:	4613      	mov	r3, r2
 80116ca:	009b      	lsls	r3, r3, #2
 80116cc:	4413      	add	r3, r2
 80116ce:	005b      	lsls	r3, r3, #1
 80116d0:	69ba      	ldr	r2, [r7, #24]
 80116d2:	4413      	add	r3, r2
 80116d4:	3308      	adds	r3, #8
 80116d6:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
        for(int i = 0; i < TS_TOUCH_NBR; i++)
 80116da:	69bb      	ldr	r3, [r7, #24]
 80116dc:	3301      	adds	r3, #1
 80116de:	61bb      	str	r3, [r7, #24]
 80116e0:	69bb      	ldr	r3, [r7, #24]
 80116e2:	2b01      	cmp	r3, #1
 80116e4:	d9d7      	bls.n	8011696 <BSP_TS_Init+0x112>
        }
      }
    }
  }

  return ret;
 80116e6:	69fb      	ldr	r3, [r7, #28]
}
 80116e8:	4618      	mov	r0, r3
 80116ea:	3720      	adds	r7, #32
 80116ec:	46bd      	mov	sp, r7
 80116ee:	bd80      	pop	{r7, pc}
 80116f0:	240089a0 	.word	0x240089a0
 80116f4:	2400899c 	.word	0x2400899c
 80116f8:	240089c8 	.word	0x240089c8

080116fc <BSP_TS_DeInit>:
  * @brief  De-Initializes the touch screen functionalities
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
int32_t BSP_TS_DeInit(uint32_t Instance)
{
 80116fc:	b580      	push	{r7, lr}
 80116fe:	b084      	sub	sp, #16
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
  int32_t ret = BSP_ERROR_NONE;
 8011704:	2300      	movs	r3, #0
 8011706:	60fb      	str	r3, [r7, #12]

  if(Instance >=TS_INSTANCES_NBR)
 8011708:	687b      	ldr	r3, [r7, #4]
 801170a:	2b00      	cmp	r3, #0
 801170c:	d003      	beq.n	8011716 <BSP_TS_DeInit+0x1a>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 801170e:	f06f 0301 	mvn.w	r3, #1
 8011712:	60fb      	str	r3, [r7, #12]
 8011714:	e011      	b.n	801173a <BSP_TS_DeInit+0x3e>
  }
  else
  {
    if(Ts_Drv->DeInit(Ts_CompObj[Instance]) < 0)
 8011716:	4b0b      	ldr	r3, [pc, #44]	@ (8011744 <BSP_TS_DeInit+0x48>)
 8011718:	681b      	ldr	r3, [r3, #0]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	490a      	ldr	r1, [pc, #40]	@ (8011748 <BSP_TS_DeInit+0x4c>)
 801171e:	687a      	ldr	r2, [r7, #4]
 8011720:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011724:	4610      	mov	r0, r2
 8011726:	4798      	blx	r3
 8011728:	4603      	mov	r3, r0
 801172a:	2b00      	cmp	r3, #0
 801172c:	da03      	bge.n	8011736 <BSP_TS_DeInit+0x3a>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 801172e:	f06f 0304 	mvn.w	r3, #4
 8011732:	60fb      	str	r3, [r7, #12]
 8011734:	e001      	b.n	801173a <BSP_TS_DeInit+0x3e>
    }
    else
    {
      ret = BSP_ERROR_NONE;
 8011736:	2300      	movs	r3, #0
 8011738:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 801173a:	68fb      	ldr	r3, [r7, #12]
}
 801173c:	4618      	mov	r0, r3
 801173e:	3710      	adds	r7, #16
 8011740:	46bd      	mov	sp, r7
 8011742:	bd80      	pop	{r7, pc}
 8011744:	2400899c 	.word	0x2400899c
 8011748:	240089c8 	.word	0x240089c8

0801174c <BSP_TS_GetState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_GetState(uint32_t Instance, TS_State_t *TS_State)
{
 801174c:	b580      	push	{r7, lr}
 801174e:	b08a      	sub	sp, #40	@ 0x28
 8011750:	af00      	add	r7, sp, #0
 8011752:	6078      	str	r0, [r7, #4]
 8011754:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8011756:	2300      	movs	r3, #0
 8011758:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t x_oriented, y_oriented;
  uint32_t x_diff, y_diff;

  if(Instance >= TS_INSTANCES_NBR)
 801175a:	687b      	ldr	r3, [r7, #4]
 801175c:	2b00      	cmp	r3, #0
 801175e:	d003      	beq.n	8011768 <BSP_TS_GetState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011760:	f06f 0301 	mvn.w	r3, #1
 8011764:	627b      	str	r3, [r7, #36]	@ 0x24
 8011766:	e13f      	b.n	80119e8 <BSP_TS_GetState+0x29c>
  else
  {
    FT6X06_State_t state;

    /* Get each touch coordinates */
    if(Ts_Drv->GetState(Ts_CompObj[Instance], &state) < 0)
 8011768:	4ba2      	ldr	r3, [pc, #648]	@ (80119f4 <BSP_TS_GetState+0x2a8>)
 801176a:	681b      	ldr	r3, [r3, #0]
 801176c:	691b      	ldr	r3, [r3, #16]
 801176e:	49a2      	ldr	r1, [pc, #648]	@ (80119f8 <BSP_TS_GetState+0x2ac>)
 8011770:	687a      	ldr	r2, [r7, #4]
 8011772:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011776:	f107 0108 	add.w	r1, r7, #8
 801177a:	4610      	mov	r0, r2
 801177c:	4798      	blx	r3
 801177e:	4603      	mov	r3, r0
 8011780:	2b00      	cmp	r3, #0
 8011782:	da03      	bge.n	801178c <BSP_TS_GetState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8011784:	f06f 0304 	mvn.w	r3, #4
 8011788:	627b      	str	r3, [r7, #36]	@ 0x24
 801178a:	e12d      	b.n	80119e8 <BSP_TS_GetState+0x29c>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 801178c:	68bb      	ldr	r3, [r7, #8]
 801178e:	2b00      	cmp	r3, #0
 8011790:	f000 8111 	beq.w	80119b6 <BSP_TS_GetState+0x26a>
    {
      x_oriented = state.TouchX;
 8011794:	68fb      	ldr	r3, [r7, #12]
 8011796:	623b      	str	r3, [r7, #32]
      y_oriented = state.TouchY;
 8011798:	693b      	ldr	r3, [r7, #16]
 801179a:	61fb      	str	r3, [r7, #28]

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 801179c:	4997      	ldr	r1, [pc, #604]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 801179e:	687a      	ldr	r2, [r7, #4]
 80117a0:	4613      	mov	r3, r2
 80117a2:	009b      	lsls	r3, r3, #2
 80117a4:	4413      	add	r3, r2
 80117a6:	00db      	lsls	r3, r3, #3
 80117a8:	440b      	add	r3, r1
 80117aa:	3308      	adds	r3, #8
 80117ac:	681b      	ldr	r3, [r3, #0]
 80117ae:	f003 0308 	and.w	r3, r3, #8
 80117b2:	2b00      	cmp	r3, #0
 80117b4:	d003      	beq.n	80117be <BSP_TS_GetState+0x72>
      {
        x_oriented = state.TouchY;
 80117b6:	693b      	ldr	r3, [r7, #16]
 80117b8:	623b      	str	r3, [r7, #32]
        y_oriented = state.TouchX;
 80117ba:	68fb      	ldr	r3, [r7, #12]
 80117bc:	61fb      	str	r3, [r7, #28]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 80117be:	498f      	ldr	r1, [pc, #572]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80117c0:	687a      	ldr	r2, [r7, #4]
 80117c2:	4613      	mov	r3, r2
 80117c4:	009b      	lsls	r3, r3, #2
 80117c6:	4413      	add	r3, r2
 80117c8:	00db      	lsls	r3, r3, #3
 80117ca:	440b      	add	r3, r1
 80117cc:	3308      	adds	r3, #8
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	f003 0302 	and.w	r3, r3, #2
 80117d4:	2b00      	cmp	r3, #0
 80117d6:	d00c      	beq.n	80117f2 <BSP_TS_GetState+0xa6>
      {
        x_oriented = Ts_Ctx[Instance].MaxX - x_oriented - 1UL;
 80117d8:	4988      	ldr	r1, [pc, #544]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80117da:	687a      	ldr	r2, [r7, #4]
 80117dc:	4613      	mov	r3, r2
 80117de:	009b      	lsls	r3, r3, #2
 80117e0:	4413      	add	r3, r2
 80117e2:	00db      	lsls	r3, r3, #3
 80117e4:	440b      	add	r3, r1
 80117e6:	3310      	adds	r3, #16
 80117e8:	681a      	ldr	r2, [r3, #0]
 80117ea:	6a3b      	ldr	r3, [r7, #32]
 80117ec:	1ad3      	subs	r3, r2, r3
 80117ee:	3b01      	subs	r3, #1
 80117f0:	623b      	str	r3, [r7, #32]
      }

      if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 80117f2:	4982      	ldr	r1, [pc, #520]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80117f4:	687a      	ldr	r2, [r7, #4]
 80117f6:	4613      	mov	r3, r2
 80117f8:	009b      	lsls	r3, r3, #2
 80117fa:	4413      	add	r3, r2
 80117fc:	00db      	lsls	r3, r3, #3
 80117fe:	440b      	add	r3, r1
 8011800:	3308      	adds	r3, #8
 8011802:	681b      	ldr	r3, [r3, #0]
 8011804:	f003 0304 	and.w	r3, r3, #4
 8011808:	2b00      	cmp	r3, #0
 801180a:	d00c      	beq.n	8011826 <BSP_TS_GetState+0xda>
      {
        y_oriented = Ts_Ctx[Instance].MaxY - y_oriented - 1UL;
 801180c:	497b      	ldr	r1, [pc, #492]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 801180e:	687a      	ldr	r2, [r7, #4]
 8011810:	4613      	mov	r3, r2
 8011812:	009b      	lsls	r3, r3, #2
 8011814:	4413      	add	r3, r2
 8011816:	00db      	lsls	r3, r3, #3
 8011818:	440b      	add	r3, r1
 801181a:	3314      	adds	r3, #20
 801181c:	681a      	ldr	r2, [r3, #0]
 801181e:	69fb      	ldr	r3, [r7, #28]
 8011820:	1ad3      	subs	r3, r2, r3
 8011822:	3b01      	subs	r3, #1
 8011824:	61fb      	str	r3, [r7, #28]
      }

      /* Apply boundary */
      TS_State->TouchX = (x_oriented * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8011826:	4975      	ldr	r1, [pc, #468]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011828:	687a      	ldr	r2, [r7, #4]
 801182a:	4613      	mov	r3, r2
 801182c:	009b      	lsls	r3, r3, #2
 801182e:	4413      	add	r3, r2
 8011830:	00db      	lsls	r3, r3, #3
 8011832:	440b      	add	r3, r1
 8011834:	681b      	ldr	r3, [r3, #0]
 8011836:	6a3a      	ldr	r2, [r7, #32]
 8011838:	fb02 f103 	mul.w	r1, r2, r3
 801183c:	486f      	ldr	r0, [pc, #444]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 801183e:	687a      	ldr	r2, [r7, #4]
 8011840:	4613      	mov	r3, r2
 8011842:	009b      	lsls	r3, r3, #2
 8011844:	4413      	add	r3, r2
 8011846:	00db      	lsls	r3, r3, #3
 8011848:	4403      	add	r3, r0
 801184a:	3310      	adds	r3, #16
 801184c:	681b      	ldr	r3, [r3, #0]
 801184e:	fbb1 f2f3 	udiv	r2, r1, r3
 8011852:	683b      	ldr	r3, [r7, #0]
 8011854:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = (y_oriented * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8011856:	4969      	ldr	r1, [pc, #420]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011858:	687a      	ldr	r2, [r7, #4]
 801185a:	4613      	mov	r3, r2
 801185c:	009b      	lsls	r3, r3, #2
 801185e:	4413      	add	r3, r2
 8011860:	00db      	lsls	r3, r3, #3
 8011862:	440b      	add	r3, r1
 8011864:	3304      	adds	r3, #4
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	69fa      	ldr	r2, [r7, #28]
 801186a:	fb02 f103 	mul.w	r1, r2, r3
 801186e:	4863      	ldr	r0, [pc, #396]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011870:	687a      	ldr	r2, [r7, #4]
 8011872:	4613      	mov	r3, r2
 8011874:	009b      	lsls	r3, r3, #2
 8011876:	4413      	add	r3, r2
 8011878:	00db      	lsls	r3, r3, #3
 801187a:	4403      	add	r3, r0
 801187c:	3314      	adds	r3, #20
 801187e:	681b      	ldr	r3, [r3, #0]
 8011880:	fbb1 f2f3 	udiv	r2, r1, r3
 8011884:	683b      	ldr	r3, [r7, #0]
 8011886:	609a      	str	r2, [r3, #8]
      /* Store Current TS state */
      TS_State->TouchDetected = state.TouchDetected;
 8011888:	68ba      	ldr	r2, [r7, #8]
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	601a      	str	r2, [r3, #0]

      /* Check accuracy */
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 801188e:	683b      	ldr	r3, [r7, #0]
 8011890:	6859      	ldr	r1, [r3, #4]
 8011892:	485a      	ldr	r0, [pc, #360]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011894:	687a      	ldr	r2, [r7, #4]
 8011896:	4613      	mov	r3, r2
 8011898:	009b      	lsls	r3, r3, #2
 801189a:	4413      	add	r3, r2
 801189c:	00db      	lsls	r3, r3, #3
 801189e:	4403      	add	r3, r0
 80118a0:	3318      	adds	r3, #24
 80118a2:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80118a4:	4299      	cmp	r1, r3
 80118a6:	d90c      	bls.n	80118c2 <BSP_TS_GetState+0x176>
 80118a8:	683b      	ldr	r3, [r7, #0]
 80118aa:	6859      	ldr	r1, [r3, #4]
 80118ac:	4853      	ldr	r0, [pc, #332]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80118ae:	687a      	ldr	r2, [r7, #4]
 80118b0:	4613      	mov	r3, r2
 80118b2:	009b      	lsls	r3, r3, #2
 80118b4:	4413      	add	r3, r2
 80118b6:	00db      	lsls	r3, r3, #3
 80118b8:	4403      	add	r3, r0
 80118ba:	3318      	adds	r3, #24
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	1acb      	subs	r3, r1, r3
 80118c0:	e00b      	b.n	80118da <BSP_TS_GetState+0x18e>
               (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX);
 80118c2:	494e      	ldr	r1, [pc, #312]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80118c4:	687a      	ldr	r2, [r7, #4]
 80118c6:	4613      	mov	r3, r2
 80118c8:	009b      	lsls	r3, r3, #2
 80118ca:	4413      	add	r3, r2
 80118cc:	00db      	lsls	r3, r3, #3
 80118ce:	440b      	add	r3, r1
 80118d0:	3318      	adds	r3, #24
 80118d2:	681a      	ldr	r2, [r3, #0]
 80118d4:	683b      	ldr	r3, [r7, #0]
 80118d6:	685b      	ldr	r3, [r3, #4]
               (TS_State->TouchX - Ts_Ctx[Instance].PreviousX[0]):
 80118d8:	1ad3      	subs	r3, r2, r3
      x_diff = (TS_State->TouchX > Ts_Ctx[Instance].PreviousX[0])?
 80118da:	61bb      	str	r3, [r7, #24]

      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 80118dc:	683b      	ldr	r3, [r7, #0]
 80118de:	6899      	ldr	r1, [r3, #8]
 80118e0:	4846      	ldr	r0, [pc, #280]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80118e2:	687a      	ldr	r2, [r7, #4]
 80118e4:	4613      	mov	r3, r2
 80118e6:	009b      	lsls	r3, r3, #2
 80118e8:	4413      	add	r3, r2
 80118ea:	00db      	lsls	r3, r3, #3
 80118ec:	4403      	add	r3, r0
 80118ee:	3320      	adds	r3, #32
 80118f0:	681b      	ldr	r3, [r3, #0]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 80118f2:	4299      	cmp	r1, r3
 80118f4:	d90c      	bls.n	8011910 <BSP_TS_GetState+0x1c4>
 80118f6:	683b      	ldr	r3, [r7, #0]
 80118f8:	6899      	ldr	r1, [r3, #8]
 80118fa:	4840      	ldr	r0, [pc, #256]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80118fc:	687a      	ldr	r2, [r7, #4]
 80118fe:	4613      	mov	r3, r2
 8011900:	009b      	lsls	r3, r3, #2
 8011902:	4413      	add	r3, r2
 8011904:	00db      	lsls	r3, r3, #3
 8011906:	4403      	add	r3, r0
 8011908:	3320      	adds	r3, #32
 801190a:	681b      	ldr	r3, [r3, #0]
 801190c:	1acb      	subs	r3, r1, r3
 801190e:	e00b      	b.n	8011928 <BSP_TS_GetState+0x1dc>
               (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY);
 8011910:	493a      	ldr	r1, [pc, #232]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011912:	687a      	ldr	r2, [r7, #4]
 8011914:	4613      	mov	r3, r2
 8011916:	009b      	lsls	r3, r3, #2
 8011918:	4413      	add	r3, r2
 801191a:	00db      	lsls	r3, r3, #3
 801191c:	440b      	add	r3, r1
 801191e:	3320      	adds	r3, #32
 8011920:	681a      	ldr	r2, [r3, #0]
 8011922:	683b      	ldr	r3, [r7, #0]
 8011924:	689b      	ldr	r3, [r3, #8]
               (TS_State->TouchY - Ts_Ctx[Instance].PreviousY[0]):
 8011926:	1ad3      	subs	r3, r2, r3
      y_diff = (TS_State->TouchY > Ts_Ctx[Instance].PreviousY[0])?
 8011928:	617b      	str	r3, [r7, #20]


      if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 801192a:	4934      	ldr	r1, [pc, #208]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 801192c:	687a      	ldr	r2, [r7, #4]
 801192e:	4613      	mov	r3, r2
 8011930:	009b      	lsls	r3, r3, #2
 8011932:	4413      	add	r3, r2
 8011934:	00db      	lsls	r3, r3, #3
 8011936:	440b      	add	r3, r1
 8011938:	330c      	adds	r3, #12
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	69ba      	ldr	r2, [r7, #24]
 801193e:	429a      	cmp	r2, r3
 8011940:	d80b      	bhi.n	801195a <BSP_TS_GetState+0x20e>
 8011942:	492e      	ldr	r1, [pc, #184]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011944:	687a      	ldr	r2, [r7, #4]
 8011946:	4613      	mov	r3, r2
 8011948:	009b      	lsls	r3, r3, #2
 801194a:	4413      	add	r3, r2
 801194c:	00db      	lsls	r3, r3, #3
 801194e:	440b      	add	r3, r1
 8011950:	330c      	adds	r3, #12
 8011952:	681b      	ldr	r3, [r3, #0]
 8011954:	697a      	ldr	r2, [r7, #20]
 8011956:	429a      	cmp	r2, r3
 8011958:	d916      	bls.n	8011988 <BSP_TS_GetState+0x23c>
      {
        /* New touch detected */
        Ts_Ctx[Instance].PreviousX[0] = TS_State->TouchX;
 801195a:	683b      	ldr	r3, [r7, #0]
 801195c:	6859      	ldr	r1, [r3, #4]
 801195e:	4827      	ldr	r0, [pc, #156]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011960:	687a      	ldr	r2, [r7, #4]
 8011962:	4613      	mov	r3, r2
 8011964:	009b      	lsls	r3, r3, #2
 8011966:	4413      	add	r3, r2
 8011968:	00db      	lsls	r3, r3, #3
 801196a:	4403      	add	r3, r0
 801196c:	3318      	adds	r3, #24
 801196e:	6019      	str	r1, [r3, #0]
        Ts_Ctx[Instance].PreviousY[0] = TS_State->TouchY;
 8011970:	683b      	ldr	r3, [r7, #0]
 8011972:	6899      	ldr	r1, [r3, #8]
 8011974:	4821      	ldr	r0, [pc, #132]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 8011976:	687a      	ldr	r2, [r7, #4]
 8011978:	4613      	mov	r3, r2
 801197a:	009b      	lsls	r3, r3, #2
 801197c:	4413      	add	r3, r2
 801197e:	00db      	lsls	r3, r3, #3
 8011980:	4403      	add	r3, r0
 8011982:	3320      	adds	r3, #32
 8011984:	6019      	str	r1, [r3, #0]
 8011986:	e02f      	b.n	80119e8 <BSP_TS_GetState+0x29c>
      }
      else
      {
        TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 8011988:	491c      	ldr	r1, [pc, #112]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 801198a:	687a      	ldr	r2, [r7, #4]
 801198c:	4613      	mov	r3, r2
 801198e:	009b      	lsls	r3, r3, #2
 8011990:	4413      	add	r3, r2
 8011992:	00db      	lsls	r3, r3, #3
 8011994:	440b      	add	r3, r1
 8011996:	3318      	adds	r3, #24
 8011998:	681a      	ldr	r2, [r3, #0]
 801199a:	683b      	ldr	r3, [r7, #0]
 801199c:	605a      	str	r2, [r3, #4]
        TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 801199e:	4917      	ldr	r1, [pc, #92]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80119a0:	687a      	ldr	r2, [r7, #4]
 80119a2:	4613      	mov	r3, r2
 80119a4:	009b      	lsls	r3, r3, #2
 80119a6:	4413      	add	r3, r2
 80119a8:	00db      	lsls	r3, r3, #3
 80119aa:	440b      	add	r3, r1
 80119ac:	3320      	adds	r3, #32
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	683b      	ldr	r3, [r7, #0]
 80119b2:	609a      	str	r2, [r3, #8]
 80119b4:	e018      	b.n	80119e8 <BSP_TS_GetState+0x29c>
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 80119b6:	683b      	ldr	r3, [r7, #0]
 80119b8:	2200      	movs	r2, #0
 80119ba:	601a      	str	r2, [r3, #0]
      TS_State->TouchX = Ts_Ctx[Instance].PreviousX[0];
 80119bc:	490f      	ldr	r1, [pc, #60]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80119be:	687a      	ldr	r2, [r7, #4]
 80119c0:	4613      	mov	r3, r2
 80119c2:	009b      	lsls	r3, r3, #2
 80119c4:	4413      	add	r3, r2
 80119c6:	00db      	lsls	r3, r3, #3
 80119c8:	440b      	add	r3, r1
 80119ca:	3318      	adds	r3, #24
 80119cc:	681a      	ldr	r2, [r3, #0]
 80119ce:	683b      	ldr	r3, [r7, #0]
 80119d0:	605a      	str	r2, [r3, #4]
      TS_State->TouchY = Ts_Ctx[Instance].PreviousY[0];
 80119d2:	490a      	ldr	r1, [pc, #40]	@ (80119fc <BSP_TS_GetState+0x2b0>)
 80119d4:	687a      	ldr	r2, [r7, #4]
 80119d6:	4613      	mov	r3, r2
 80119d8:	009b      	lsls	r3, r3, #2
 80119da:	4413      	add	r3, r2
 80119dc:	00db      	lsls	r3, r3, #3
 80119de:	440b      	add	r3, r1
 80119e0:	3320      	adds	r3, #32
 80119e2:	681a      	ldr	r2, [r3, #0]
 80119e4:	683b      	ldr	r3, [r7, #0]
 80119e6:	609a      	str	r2, [r3, #8]
    }
  }

  return ret;
 80119e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80119ea:	4618      	mov	r0, r3
 80119ec:	3728      	adds	r7, #40	@ 0x28
 80119ee:	46bd      	mov	sp, r7
 80119f0:	bd80      	pop	{r7, pc}
 80119f2:	bf00      	nop
 80119f4:	2400899c 	.word	0x2400899c
 80119f8:	240089c8 	.word	0x240089c8
 80119fc:	240089a0 	.word	0x240089a0

08011a00 <BSP_TS_Get_MultiTouchState>:
  * @param  Instance  TS instance. Could be only 0.
  * @param  TS_State  Pointer to touch screen current state structure
  * @retval BSP status
  */
int32_t BSP_TS_Get_MultiTouchState(uint32_t Instance, TS_MultiTouch_State_t *TS_State)
{
 8011a00:	b580      	push	{r7, lr}
 8011a02:	b096      	sub	sp, #88	@ 0x58
 8011a04:	af00      	add	r7, sp, #0
 8011a06:	6078      	str	r0, [r7, #4]
 8011a08:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8011a0a:	2300      	movs	r3, #0
 8011a0c:	657b      	str	r3, [r7, #84]	@ 0x54
  uint32_t x_oriented[2], y_oriented[2];
  uint32_t x_diff, y_diff;
  uint32_t index;
  if(Instance >= TS_INSTANCES_NBR)
 8011a0e:	687b      	ldr	r3, [r7, #4]
 8011a10:	2b00      	cmp	r3, #0
 8011a12:	d003      	beq.n	8011a1c <BSP_TS_Get_MultiTouchState+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011a14:	f06f 0301 	mvn.w	r3, #1
 8011a18:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a1a:	e1df      	b.n	8011ddc <BSP_TS_Get_MultiTouchState+0x3dc>
  }
  else
  {
    TS_MultiTouch_State_t state;
    /* Get each touch coordinates */
    if(Ts_Drv->GetMultiTouchState(Ts_CompObj[Instance], &state) < 0)
 8011a1c:	4b9b      	ldr	r3, [pc, #620]	@ (8011c8c <BSP_TS_Get_MultiTouchState+0x28c>)
 8011a1e:	681b      	ldr	r3, [r3, #0]
 8011a20:	695b      	ldr	r3, [r3, #20]
 8011a22:	499b      	ldr	r1, [pc, #620]	@ (8011c90 <BSP_TS_Get_MultiTouchState+0x290>)
 8011a24:	687a      	ldr	r2, [r7, #4]
 8011a26:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011a2a:	f107 010c 	add.w	r1, r7, #12
 8011a2e:	4610      	mov	r0, r2
 8011a30:	4798      	blx	r3
 8011a32:	4603      	mov	r3, r0
 8011a34:	2b00      	cmp	r3, #0
 8011a36:	da03      	bge.n	8011a40 <BSP_TS_Get_MultiTouchState+0x40>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8011a38:	f06f 0304 	mvn.w	r3, #4
 8011a3c:	657b      	str	r3, [r7, #84]	@ 0x54
 8011a3e:	e1cd      	b.n	8011ddc <BSP_TS_Get_MultiTouchState+0x3dc>
    }/* Check and update the number of touches active detected */
    else if(state.TouchDetected != 0U)
 8011a40:	68fb      	ldr	r3, [r7, #12]
 8011a42:	2b00      	cmp	r3, #0
 8011a44:	f000 819d 	beq.w	8011d82 <BSP_TS_Get_MultiTouchState+0x382>
    {
      for(index = 0; index < state.TouchDetected; index++)
 8011a48:	2300      	movs	r3, #0
 8011a4a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011a4c:	e193      	b.n	8011d76 <BSP_TS_Get_MultiTouchState+0x376>
      {
        x_oriented[index] = state.TouchX[index];
 8011a4e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a50:	009b      	lsls	r3, r3, #2
 8011a52:	3358      	adds	r3, #88	@ 0x58
 8011a54:	443b      	add	r3, r7
 8011a56:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8011a5a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a5c:	009b      	lsls	r3, r3, #2
 8011a5e:	3358      	adds	r3, #88	@ 0x58
 8011a60:	443b      	add	r3, r7
 8011a62:	f843 2c18 	str.w	r2, [r3, #-24]
        y_oriented[index] = state.TouchY[index];
 8011a66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a68:	3302      	adds	r3, #2
 8011a6a:	009b      	lsls	r3, r3, #2
 8011a6c:	3358      	adds	r3, #88	@ 0x58
 8011a6e:	443b      	add	r3, r7
 8011a70:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8011a74:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a76:	009b      	lsls	r3, r3, #2
 8011a78:	3358      	adds	r3, #88	@ 0x58
 8011a7a:	443b      	add	r3, r7
 8011a7c:	f843 2c20 	str.w	r2, [r3, #-32]

        if((Ts_Ctx[Instance].Orientation & TS_SWAP_XY) == TS_SWAP_XY)
 8011a80:	4984      	ldr	r1, [pc, #528]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011a82:	687a      	ldr	r2, [r7, #4]
 8011a84:	4613      	mov	r3, r2
 8011a86:	009b      	lsls	r3, r3, #2
 8011a88:	4413      	add	r3, r2
 8011a8a:	00db      	lsls	r3, r3, #3
 8011a8c:	440b      	add	r3, r1
 8011a8e:	3308      	adds	r3, #8
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	f003 0308 	and.w	r3, r3, #8
 8011a96:	2b00      	cmp	r3, #0
 8011a98:	d018      	beq.n	8011acc <BSP_TS_Get_MultiTouchState+0xcc>
        {
          x_oriented[index] = state.TouchY[index];
 8011a9a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011a9c:	3302      	adds	r3, #2
 8011a9e:	009b      	lsls	r3, r3, #2
 8011aa0:	3358      	adds	r3, #88	@ 0x58
 8011aa2:	443b      	add	r3, r7
 8011aa4:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8011aa8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011aaa:	009b      	lsls	r3, r3, #2
 8011aac:	3358      	adds	r3, #88	@ 0x58
 8011aae:	443b      	add	r3, r7
 8011ab0:	f843 2c18 	str.w	r2, [r3, #-24]
          y_oriented[index] = state.TouchX[index];
 8011ab4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ab6:	009b      	lsls	r3, r3, #2
 8011ab8:	3358      	adds	r3, #88	@ 0x58
 8011aba:	443b      	add	r3, r7
 8011abc:	f853 2c48 	ldr.w	r2, [r3, #-72]
 8011ac0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011ac2:	009b      	lsls	r3, r3, #2
 8011ac4:	3358      	adds	r3, #88	@ 0x58
 8011ac6:	443b      	add	r3, r7
 8011ac8:	f843 2c20 	str.w	r2, [r3, #-32]
        }

        if((Ts_Ctx[Instance].Orientation & TS_SWAP_X) == TS_SWAP_X)
 8011acc:	4971      	ldr	r1, [pc, #452]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011ace:	687a      	ldr	r2, [r7, #4]
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	009b      	lsls	r3, r3, #2
 8011ad4:	4413      	add	r3, r2
 8011ad6:	00db      	lsls	r3, r3, #3
 8011ad8:	440b      	add	r3, r1
 8011ada:	3308      	adds	r3, #8
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	f003 0302 	and.w	r3, r3, #2
 8011ae2:	2b00      	cmp	r3, #0
 8011ae4:	d016      	beq.n	8011b14 <BSP_TS_Get_MultiTouchState+0x114>
        {
          x_oriented[index] = Ts_Ctx[Instance].MaxX - x_oriented[index] - 1UL;
 8011ae6:	496b      	ldr	r1, [pc, #428]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011ae8:	687a      	ldr	r2, [r7, #4]
 8011aea:	4613      	mov	r3, r2
 8011aec:	009b      	lsls	r3, r3, #2
 8011aee:	4413      	add	r3, r2
 8011af0:	00db      	lsls	r3, r3, #3
 8011af2:	440b      	add	r3, r1
 8011af4:	3310      	adds	r3, #16
 8011af6:	681a      	ldr	r2, [r3, #0]
 8011af8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011afa:	009b      	lsls	r3, r3, #2
 8011afc:	3358      	adds	r3, #88	@ 0x58
 8011afe:	443b      	add	r3, r7
 8011b00:	f853 3c18 	ldr.w	r3, [r3, #-24]
 8011b04:	1ad3      	subs	r3, r2, r3
 8011b06:	1e5a      	subs	r2, r3, #1
 8011b08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b0a:	009b      	lsls	r3, r3, #2
 8011b0c:	3358      	adds	r3, #88	@ 0x58
 8011b0e:	443b      	add	r3, r7
 8011b10:	f843 2c18 	str.w	r2, [r3, #-24]
        }

        if((Ts_Ctx[Instance].Orientation & TS_SWAP_Y) == TS_SWAP_Y)
 8011b14:	495f      	ldr	r1, [pc, #380]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011b16:	687a      	ldr	r2, [r7, #4]
 8011b18:	4613      	mov	r3, r2
 8011b1a:	009b      	lsls	r3, r3, #2
 8011b1c:	4413      	add	r3, r2
 8011b1e:	00db      	lsls	r3, r3, #3
 8011b20:	440b      	add	r3, r1
 8011b22:	3308      	adds	r3, #8
 8011b24:	681b      	ldr	r3, [r3, #0]
 8011b26:	f003 0304 	and.w	r3, r3, #4
 8011b2a:	2b00      	cmp	r3, #0
 8011b2c:	d016      	beq.n	8011b5c <BSP_TS_Get_MultiTouchState+0x15c>
        {
          y_oriented[index] = Ts_Ctx[Instance].MaxY - y_oriented[index] - 1UL;
 8011b2e:	4959      	ldr	r1, [pc, #356]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	4613      	mov	r3, r2
 8011b34:	009b      	lsls	r3, r3, #2
 8011b36:	4413      	add	r3, r2
 8011b38:	00db      	lsls	r3, r3, #3
 8011b3a:	440b      	add	r3, r1
 8011b3c:	3314      	adds	r3, #20
 8011b3e:	681a      	ldr	r2, [r3, #0]
 8011b40:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b42:	009b      	lsls	r3, r3, #2
 8011b44:	3358      	adds	r3, #88	@ 0x58
 8011b46:	443b      	add	r3, r7
 8011b48:	f853 3c20 	ldr.w	r3, [r3, #-32]
 8011b4c:	1ad3      	subs	r3, r2, r3
 8011b4e:	1e5a      	subs	r2, r3, #1
 8011b50:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b52:	009b      	lsls	r3, r3, #2
 8011b54:	3358      	adds	r3, #88	@ 0x58
 8011b56:	443b      	add	r3, r7
 8011b58:	f843 2c20 	str.w	r2, [r3, #-32]
        }

       /* Apply boundary */
       TS_State->TouchX[index] = (x_oriented[index] * Ts_Ctx[Instance].Width) / Ts_Ctx[Instance].MaxX;
 8011b5c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b5e:	009b      	lsls	r3, r3, #2
 8011b60:	3358      	adds	r3, #88	@ 0x58
 8011b62:	443b      	add	r3, r7
 8011b64:	f853 1c18 	ldr.w	r1, [r3, #-24]
 8011b68:	484a      	ldr	r0, [pc, #296]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011b6a:	687a      	ldr	r2, [r7, #4]
 8011b6c:	4613      	mov	r3, r2
 8011b6e:	009b      	lsls	r3, r3, #2
 8011b70:	4413      	add	r3, r2
 8011b72:	00db      	lsls	r3, r3, #3
 8011b74:	4403      	add	r3, r0
 8011b76:	681b      	ldr	r3, [r3, #0]
 8011b78:	fb03 f101 	mul.w	r1, r3, r1
 8011b7c:	4845      	ldr	r0, [pc, #276]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011b7e:	687a      	ldr	r2, [r7, #4]
 8011b80:	4613      	mov	r3, r2
 8011b82:	009b      	lsls	r3, r3, #2
 8011b84:	4413      	add	r3, r2
 8011b86:	00db      	lsls	r3, r3, #3
 8011b88:	4403      	add	r3, r0
 8011b8a:	3310      	adds	r3, #16
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	fbb1 f2f3 	udiv	r2, r1, r3
 8011b92:	6839      	ldr	r1, [r7, #0]
 8011b94:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b96:	009b      	lsls	r3, r3, #2
 8011b98:	440b      	add	r3, r1
 8011b9a:	605a      	str	r2, [r3, #4]
       TS_State->TouchY[index] = (y_oriented[index] * Ts_Ctx[Instance].Height) / Ts_Ctx[Instance].MaxY;
 8011b9c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011b9e:	009b      	lsls	r3, r3, #2
 8011ba0:	3358      	adds	r3, #88	@ 0x58
 8011ba2:	443b      	add	r3, r7
 8011ba4:	f853 1c20 	ldr.w	r1, [r3, #-32]
 8011ba8:	483a      	ldr	r0, [pc, #232]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011baa:	687a      	ldr	r2, [r7, #4]
 8011bac:	4613      	mov	r3, r2
 8011bae:	009b      	lsls	r3, r3, #2
 8011bb0:	4413      	add	r3, r2
 8011bb2:	00db      	lsls	r3, r3, #3
 8011bb4:	4403      	add	r3, r0
 8011bb6:	3304      	adds	r3, #4
 8011bb8:	681b      	ldr	r3, [r3, #0]
 8011bba:	fb03 f101 	mul.w	r1, r3, r1
 8011bbe:	4835      	ldr	r0, [pc, #212]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011bc0:	687a      	ldr	r2, [r7, #4]
 8011bc2:	4613      	mov	r3, r2
 8011bc4:	009b      	lsls	r3, r3, #2
 8011bc6:	4413      	add	r3, r2
 8011bc8:	00db      	lsls	r3, r3, #3
 8011bca:	4403      	add	r3, r0
 8011bcc:	3314      	adds	r3, #20
 8011bce:	681b      	ldr	r3, [r3, #0]
 8011bd0:	fbb1 f2f3 	udiv	r2, r1, r3
 8011bd4:	6839      	ldr	r1, [r7, #0]
 8011bd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bd8:	3302      	adds	r3, #2
 8011bda:	009b      	lsls	r3, r3, #2
 8011bdc:	440b      	add	r3, r1
 8011bde:	605a      	str	r2, [r3, #4]
       /* Store Current TS state */
       TS_State->TouchDetected = state.TouchDetected;
 8011be0:	68fa      	ldr	r2, [r7, #12]
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	601a      	str	r2, [r3, #0]

        /* Check accuracy */
        x_diff = (TS_State->TouchX[index] > Ts_Ctx[Instance].PreviousX[0])?
 8011be6:	683a      	ldr	r2, [r7, #0]
 8011be8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011bea:	009b      	lsls	r3, r3, #2
 8011bec:	4413      	add	r3, r2
 8011bee:	6859      	ldr	r1, [r3, #4]
 8011bf0:	4828      	ldr	r0, [pc, #160]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011bf2:	687a      	ldr	r2, [r7, #4]
 8011bf4:	4613      	mov	r3, r2
 8011bf6:	009b      	lsls	r3, r3, #2
 8011bf8:	4413      	add	r3, r2
 8011bfa:	00db      	lsls	r3, r3, #3
 8011bfc:	4403      	add	r3, r0
 8011bfe:	3318      	adds	r3, #24
 8011c00:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchX[index] - Ts_Ctx[Instance].PreviousX[0]):
 8011c02:	4299      	cmp	r1, r3
 8011c04:	d90f      	bls.n	8011c26 <BSP_TS_Get_MultiTouchState+0x226>
 8011c06:	683a      	ldr	r2, [r7, #0]
 8011c08:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c0a:	009b      	lsls	r3, r3, #2
 8011c0c:	4413      	add	r3, r2
 8011c0e:	6859      	ldr	r1, [r3, #4]
 8011c10:	4820      	ldr	r0, [pc, #128]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011c12:	687a      	ldr	r2, [r7, #4]
 8011c14:	4613      	mov	r3, r2
 8011c16:	009b      	lsls	r3, r3, #2
 8011c18:	4413      	add	r3, r2
 8011c1a:	00db      	lsls	r3, r3, #3
 8011c1c:	4403      	add	r3, r0
 8011c1e:	3318      	adds	r3, #24
 8011c20:	681b      	ldr	r3, [r3, #0]
 8011c22:	1acb      	subs	r3, r1, r3
 8011c24:	e00e      	b.n	8011c44 <BSP_TS_Get_MultiTouchState+0x244>
          (Ts_Ctx[Instance].PreviousX[0] - TS_State->TouchX[index]);
 8011c26:	491b      	ldr	r1, [pc, #108]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011c28:	687a      	ldr	r2, [r7, #4]
 8011c2a:	4613      	mov	r3, r2
 8011c2c:	009b      	lsls	r3, r3, #2
 8011c2e:	4413      	add	r3, r2
 8011c30:	00db      	lsls	r3, r3, #3
 8011c32:	440b      	add	r3, r1
 8011c34:	3318      	adds	r3, #24
 8011c36:	681a      	ldr	r2, [r3, #0]
 8011c38:	6839      	ldr	r1, [r7, #0]
 8011c3a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c3c:	009b      	lsls	r3, r3, #2
 8011c3e:	440b      	add	r3, r1
 8011c40:	685b      	ldr	r3, [r3, #4]
          (TS_State->TouchX[index] - Ts_Ctx[Instance].PreviousX[0]):
 8011c42:	1ad3      	subs	r3, r2, r3
        x_diff = (TS_State->TouchX[index] > Ts_Ctx[Instance].PreviousX[0])?
 8011c44:	64fb      	str	r3, [r7, #76]	@ 0x4c

        y_diff = (TS_State->TouchY[index] > Ts_Ctx[Instance].PreviousY[0])?
 8011c46:	683a      	ldr	r2, [r7, #0]
 8011c48:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c4a:	3302      	adds	r3, #2
 8011c4c:	009b      	lsls	r3, r3, #2
 8011c4e:	4413      	add	r3, r2
 8011c50:	6859      	ldr	r1, [r3, #4]
 8011c52:	4810      	ldr	r0, [pc, #64]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011c54:	687a      	ldr	r2, [r7, #4]
 8011c56:	4613      	mov	r3, r2
 8011c58:	009b      	lsls	r3, r3, #2
 8011c5a:	4413      	add	r3, r2
 8011c5c:	00db      	lsls	r3, r3, #3
 8011c5e:	4403      	add	r3, r0
 8011c60:	3320      	adds	r3, #32
 8011c62:	681b      	ldr	r3, [r3, #0]
          (TS_State->TouchY[index] - Ts_Ctx[Instance].PreviousY[0]):
 8011c64:	4299      	cmp	r1, r3
 8011c66:	d917      	bls.n	8011c98 <BSP_TS_Get_MultiTouchState+0x298>
 8011c68:	683a      	ldr	r2, [r7, #0]
 8011c6a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011c6c:	3302      	adds	r3, #2
 8011c6e:	009b      	lsls	r3, r3, #2
 8011c70:	4413      	add	r3, r2
 8011c72:	6859      	ldr	r1, [r3, #4]
 8011c74:	4807      	ldr	r0, [pc, #28]	@ (8011c94 <BSP_TS_Get_MultiTouchState+0x294>)
 8011c76:	687a      	ldr	r2, [r7, #4]
 8011c78:	4613      	mov	r3, r2
 8011c7a:	009b      	lsls	r3, r3, #2
 8011c7c:	4413      	add	r3, r2
 8011c7e:	00db      	lsls	r3, r3, #3
 8011c80:	4403      	add	r3, r0
 8011c82:	3320      	adds	r3, #32
 8011c84:	681b      	ldr	r3, [r3, #0]
 8011c86:	1acb      	subs	r3, r1, r3
 8011c88:	e016      	b.n	8011cb8 <BSP_TS_Get_MultiTouchState+0x2b8>
 8011c8a:	bf00      	nop
 8011c8c:	2400899c 	.word	0x2400899c
 8011c90:	240089c8 	.word	0x240089c8
 8011c94:	240089a0 	.word	0x240089a0
          (Ts_Ctx[Instance].PreviousY[0] - TS_State->TouchY[index]);
 8011c98:	4953      	ldr	r1, [pc, #332]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011c9a:	687a      	ldr	r2, [r7, #4]
 8011c9c:	4613      	mov	r3, r2
 8011c9e:	009b      	lsls	r3, r3, #2
 8011ca0:	4413      	add	r3, r2
 8011ca2:	00db      	lsls	r3, r3, #3
 8011ca4:	440b      	add	r3, r1
 8011ca6:	3320      	adds	r3, #32
 8011ca8:	681a      	ldr	r2, [r3, #0]
 8011caa:	6839      	ldr	r1, [r7, #0]
 8011cac:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cae:	3302      	adds	r3, #2
 8011cb0:	009b      	lsls	r3, r3, #2
 8011cb2:	440b      	add	r3, r1
 8011cb4:	685b      	ldr	r3, [r3, #4]
          (TS_State->TouchY[index] - Ts_Ctx[Instance].PreviousY[0]):
 8011cb6:	1ad3      	subs	r3, r2, r3
        y_diff = (TS_State->TouchY[index] > Ts_Ctx[Instance].PreviousY[0])?
 8011cb8:	64bb      	str	r3, [r7, #72]	@ 0x48

        if ((x_diff > Ts_Ctx[Instance].Accuracy) || (y_diff > Ts_Ctx[Instance].Accuracy))
 8011cba:	494b      	ldr	r1, [pc, #300]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011cbc:	687a      	ldr	r2, [r7, #4]
 8011cbe:	4613      	mov	r3, r2
 8011cc0:	009b      	lsls	r3, r3, #2
 8011cc2:	4413      	add	r3, r2
 8011cc4:	00db      	lsls	r3, r3, #3
 8011cc6:	440b      	add	r3, r1
 8011cc8:	330c      	adds	r3, #12
 8011cca:	681b      	ldr	r3, [r3, #0]
 8011ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8011cce:	429a      	cmp	r2, r3
 8011cd0:	d80b      	bhi.n	8011cea <BSP_TS_Get_MultiTouchState+0x2ea>
 8011cd2:	4945      	ldr	r1, [pc, #276]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011cd4:	687a      	ldr	r2, [r7, #4]
 8011cd6:	4613      	mov	r3, r2
 8011cd8:	009b      	lsls	r3, r3, #2
 8011cda:	4413      	add	r3, r2
 8011cdc:	00db      	lsls	r3, r3, #3
 8011cde:	440b      	add	r3, r1
 8011ce0:	330c      	adds	r3, #12
 8011ce2:	681b      	ldr	r3, [r3, #0]
 8011ce4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8011ce6:	429a      	cmp	r2, r3
 8011ce8:	d921      	bls.n	8011d2e <BSP_TS_Get_MultiTouchState+0x32e>
        {
          /* New touch detected */
          Ts_Ctx[Instance].PreviousX[index] = TS_State->TouchX[index];
 8011cea:	683a      	ldr	r2, [r7, #0]
 8011cec:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011cee:	009b      	lsls	r3, r3, #2
 8011cf0:	4413      	add	r3, r2
 8011cf2:	6859      	ldr	r1, [r3, #4]
 8011cf4:	483c      	ldr	r0, [pc, #240]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011cf6:	687a      	ldr	r2, [r7, #4]
 8011cf8:	4613      	mov	r3, r2
 8011cfa:	009b      	lsls	r3, r3, #2
 8011cfc:	4413      	add	r3, r2
 8011cfe:	005b      	lsls	r3, r3, #1
 8011d00:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d02:	4413      	add	r3, r2
 8011d04:	3306      	adds	r3, #6
 8011d06:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
          Ts_Ctx[Instance].PreviousY[index] = TS_State->TouchY[index];
 8011d0a:	683a      	ldr	r2, [r7, #0]
 8011d0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d0e:	3302      	adds	r3, #2
 8011d10:	009b      	lsls	r3, r3, #2
 8011d12:	4413      	add	r3, r2
 8011d14:	6859      	ldr	r1, [r3, #4]
 8011d16:	4834      	ldr	r0, [pc, #208]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011d18:	687a      	ldr	r2, [r7, #4]
 8011d1a:	4613      	mov	r3, r2
 8011d1c:	009b      	lsls	r3, r3, #2
 8011d1e:	4413      	add	r3, r2
 8011d20:	005b      	lsls	r3, r3, #1
 8011d22:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d24:	4413      	add	r3, r2
 8011d26:	3308      	adds	r3, #8
 8011d28:	f840 1023 	str.w	r1, [r0, r3, lsl #2]
 8011d2c:	e020      	b.n	8011d70 <BSP_TS_Get_MultiTouchState+0x370>
        }
        else
        {
          TS_State->TouchX[index] = Ts_Ctx[Instance].PreviousX[index];
 8011d2e:	492e      	ldr	r1, [pc, #184]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011d30:	687a      	ldr	r2, [r7, #4]
 8011d32:	4613      	mov	r3, r2
 8011d34:	009b      	lsls	r3, r3, #2
 8011d36:	4413      	add	r3, r2
 8011d38:	005b      	lsls	r3, r3, #1
 8011d3a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d3c:	4413      	add	r3, r2
 8011d3e:	3306      	adds	r3, #6
 8011d40:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8011d44:	6839      	ldr	r1, [r7, #0]
 8011d46:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d48:	009b      	lsls	r3, r3, #2
 8011d4a:	440b      	add	r3, r1
 8011d4c:	605a      	str	r2, [r3, #4]
          TS_State->TouchY[index] = Ts_Ctx[Instance].PreviousY[index];
 8011d4e:	4926      	ldr	r1, [pc, #152]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011d50:	687a      	ldr	r2, [r7, #4]
 8011d52:	4613      	mov	r3, r2
 8011d54:	009b      	lsls	r3, r3, #2
 8011d56:	4413      	add	r3, r2
 8011d58:	005b      	lsls	r3, r3, #1
 8011d5a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d5c:	4413      	add	r3, r2
 8011d5e:	3308      	adds	r3, #8
 8011d60:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8011d64:	6839      	ldr	r1, [r7, #0]
 8011d66:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d68:	3302      	adds	r3, #2
 8011d6a:	009b      	lsls	r3, r3, #2
 8011d6c:	440b      	add	r3, r1
 8011d6e:	605a      	str	r2, [r3, #4]
      for(index = 0; index < state.TouchDetected; index++)
 8011d70:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011d72:	3301      	adds	r3, #1
 8011d74:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d76:	68fb      	ldr	r3, [r7, #12]
 8011d78:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d7a:	429a      	cmp	r2, r3
 8011d7c:	f4ff ae67 	bcc.w	8011a4e <BSP_TS_Get_MultiTouchState+0x4e>
 8011d80:	e02c      	b.n	8011ddc <BSP_TS_Get_MultiTouchState+0x3dc>
        }
      }
    }
    else
    {
      TS_State->TouchDetected = 0U;
 8011d82:	683b      	ldr	r3, [r7, #0]
 8011d84:	2200      	movs	r2, #0
 8011d86:	601a      	str	r2, [r3, #0]
      for(index = 0; index < TS_TOUCH_NBR; index++)
 8011d88:	2300      	movs	r3, #0
 8011d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8011d8c:	e023      	b.n	8011dd6 <BSP_TS_Get_MultiTouchState+0x3d6>
      {
        TS_State->TouchX[index] = Ts_Ctx[Instance].PreviousX[index];
 8011d8e:	4916      	ldr	r1, [pc, #88]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011d90:	687a      	ldr	r2, [r7, #4]
 8011d92:	4613      	mov	r3, r2
 8011d94:	009b      	lsls	r3, r3, #2
 8011d96:	4413      	add	r3, r2
 8011d98:	005b      	lsls	r3, r3, #1
 8011d9a:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011d9c:	4413      	add	r3, r2
 8011d9e:	3306      	adds	r3, #6
 8011da0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8011da4:	6839      	ldr	r1, [r7, #0]
 8011da6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011da8:	009b      	lsls	r3, r3, #2
 8011daa:	440b      	add	r3, r1
 8011dac:	605a      	str	r2, [r3, #4]
        TS_State->TouchY[index] = Ts_Ctx[Instance].PreviousY[index];
 8011dae:	490e      	ldr	r1, [pc, #56]	@ (8011de8 <BSP_TS_Get_MultiTouchState+0x3e8>)
 8011db0:	687a      	ldr	r2, [r7, #4]
 8011db2:	4613      	mov	r3, r2
 8011db4:	009b      	lsls	r3, r3, #2
 8011db6:	4413      	add	r3, r2
 8011db8:	005b      	lsls	r3, r3, #1
 8011dba:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8011dbc:	4413      	add	r3, r2
 8011dbe:	3308      	adds	r3, #8
 8011dc0:	f851 2023 	ldr.w	r2, [r1, r3, lsl #2]
 8011dc4:	6839      	ldr	r1, [r7, #0]
 8011dc6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dc8:	3302      	adds	r3, #2
 8011dca:	009b      	lsls	r3, r3, #2
 8011dcc:	440b      	add	r3, r1
 8011dce:	605a      	str	r2, [r3, #4]
      for(index = 0; index < TS_TOUCH_NBR; index++)
 8011dd0:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dd2:	3301      	adds	r3, #1
 8011dd4:	653b      	str	r3, [r7, #80]	@ 0x50
 8011dd6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8011dd8:	2b01      	cmp	r3, #1
 8011dda:	d9d8      	bls.n	8011d8e <BSP_TS_Get_MultiTouchState+0x38e>
      }
    }
  }

  return ret;
 8011ddc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
}
 8011dde:	4618      	mov	r0, r3
 8011de0:	3758      	adds	r7, #88	@ 0x58
 8011de2:	46bd      	mov	sp, r7
 8011de4:	bd80      	pop	{r7, pc}
 8011de6:	bf00      	nop
 8011de8:	240089a0 	.word	0x240089a0

08011dec <BSP_TS_GestureConfig>:
  * @param  Instance      TS instance. Could be only 0.
  * @param  GestureConfig Pointer to gesture configuration structure
  * @retval BSP status
  */
int32_t BSP_TS_GestureConfig(uint32_t Instance, TS_Gesture_Config_t *GestureConfig)
{
 8011dec:	b580      	push	{r7, lr}
 8011dee:	b084      	sub	sp, #16
 8011df0:	af00      	add	r7, sp, #0
 8011df2:	6078      	str	r0, [r7, #4]
 8011df4:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8011df6:	2300      	movs	r3, #0
 8011df8:	60fb      	str	r3, [r7, #12]

  if(Instance >=TS_INSTANCES_NBR)
 8011dfa:	687b      	ldr	r3, [r7, #4]
 8011dfc:	2b00      	cmp	r3, #0
 8011dfe:	d003      	beq.n	8011e08 <BSP_TS_GestureConfig+0x1c>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011e00:	f06f 0301 	mvn.w	r3, #1
 8011e04:	60fb      	str	r3, [r7, #12]
 8011e06:	e00f      	b.n	8011e28 <BSP_TS_GestureConfig+0x3c>
  }
  else
  {
    if(Ts_Drv->GestureConfig(Ts_CompObj[Instance], GestureConfig) < 0)
 8011e08:	4b0a      	ldr	r3, [pc, #40]	@ (8011e34 <BSP_TS_GestureConfig+0x48>)
 8011e0a:	681b      	ldr	r3, [r3, #0]
 8011e0c:	689b      	ldr	r3, [r3, #8]
 8011e0e:	490a      	ldr	r1, [pc, #40]	@ (8011e38 <BSP_TS_GestureConfig+0x4c>)
 8011e10:	687a      	ldr	r2, [r7, #4]
 8011e12:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011e16:	6839      	ldr	r1, [r7, #0]
 8011e18:	4610      	mov	r0, r2
 8011e1a:	4798      	blx	r3
 8011e1c:	4603      	mov	r3, r0
 8011e1e:	2b00      	cmp	r3, #0
 8011e20:	da02      	bge.n	8011e28 <BSP_TS_GestureConfig+0x3c>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8011e22:	f06f 0304 	mvn.w	r3, #4
 8011e26:	60fb      	str	r3, [r7, #12]
    }
  }

  return ret;
 8011e28:	68fb      	ldr	r3, [r7, #12]
}
 8011e2a:	4618      	mov	r0, r3
 8011e2c:	3710      	adds	r7, #16
 8011e2e:	46bd      	mov	sp, r7
 8011e30:	bd80      	pop	{r7, pc}
 8011e32:	bf00      	nop
 8011e34:	2400899c 	.word	0x2400899c
 8011e38:	240089c8 	.word	0x240089c8

08011e3c <BSP_TS_GetGestureId>:
  * @param  Instance   TS instance. Could be only 0.
  * @param  GestureId  Pointer to gesture ID
  * @retval BSP status
  */
int32_t BSP_TS_GetGestureId(uint32_t Instance, uint32_t *GestureId)
{
 8011e3c:	b580      	push	{r7, lr}
 8011e3e:	b084      	sub	sp, #16
 8011e40:	af00      	add	r7, sp, #0
 8011e42:	6078      	str	r0, [r7, #4]
 8011e44:	6039      	str	r1, [r7, #0]
  int32_t ret = BSP_ERROR_NONE;
 8011e46:	2300      	movs	r3, #0
 8011e48:	60fb      	str	r3, [r7, #12]
  uint8_t tmp = 0;
 8011e4a:	2300      	movs	r3, #0
 8011e4c:	72fb      	strb	r3, [r7, #11]

  if(Instance >=TS_INSTANCES_NBR)
 8011e4e:	687b      	ldr	r3, [r7, #4]
 8011e50:	2b00      	cmp	r3, #0
 8011e52:	d003      	beq.n	8011e5c <BSP_TS_GetGestureId+0x20>
  {
    ret = BSP_ERROR_WRONG_PARAM;
 8011e54:	f06f 0301 	mvn.w	r3, #1
 8011e58:	60fb      	str	r3, [r7, #12]
 8011e5a:	e07e      	b.n	8011f5a <BSP_TS_GetGestureId+0x11e>
  }/* Get gesture Id */
  else if(Ts_Drv->GetGesture(Ts_CompObj[Instance], &tmp)  < 0)
 8011e5c:	4b41      	ldr	r3, [pc, #260]	@ (8011f64 <BSP_TS_GetGestureId+0x128>)
 8011e5e:	681b      	ldr	r3, [r3, #0]
 8011e60:	699b      	ldr	r3, [r3, #24]
 8011e62:	4941      	ldr	r1, [pc, #260]	@ (8011f68 <BSP_TS_GetGestureId+0x12c>)
 8011e64:	687a      	ldr	r2, [r7, #4]
 8011e66:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8011e6a:	f107 010b 	add.w	r1, r7, #11
 8011e6e:	4610      	mov	r0, r2
 8011e70:	4798      	blx	r3
 8011e72:	4603      	mov	r3, r0
 8011e74:	2b00      	cmp	r3, #0
 8011e76:	da03      	bge.n	8011e80 <BSP_TS_GetGestureId+0x44>
  {
    ret = BSP_ERROR_COMPONENT_FAILURE;
 8011e78:	f06f 0304 	mvn.w	r3, #4
 8011e7c:	60fb      	str	r3, [r7, #12]
 8011e7e:	e06c      	b.n	8011f5a <BSP_TS_GetGestureId+0x11e>
  }
  else
  {
    /* Remap gesture Id to a TS_Gesture_Id_t value */
    switch(tmp)
 8011e80:	7afb      	ldrb	r3, [r7, #11]
 8011e82:	2b49      	cmp	r3, #73	@ 0x49
 8011e84:	d05f      	beq.n	8011f46 <BSP_TS_GetGestureId+0x10a>
 8011e86:	2b49      	cmp	r3, #73	@ 0x49
 8011e88:	dc61      	bgt.n	8011f4e <BSP_TS_GetGestureId+0x112>
 8011e8a:	2b1c      	cmp	r3, #28
 8011e8c:	dc40      	bgt.n	8011f10 <BSP_TS_GetGestureId+0xd4>
 8011e8e:	2b00      	cmp	r3, #0
 8011e90:	db5d      	blt.n	8011f4e <BSP_TS_GetGestureId+0x112>
 8011e92:	2b1c      	cmp	r3, #28
 8011e94:	d85b      	bhi.n	8011f4e <BSP_TS_GetGestureId+0x112>
 8011e96:	a201      	add	r2, pc, #4	@ (adr r2, 8011e9c <BSP_TS_GetGestureId+0x60>)
 8011e98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8011e9c:	08011f17 	.word	0x08011f17
 8011ea0:	08011f4f 	.word	0x08011f4f
 8011ea4:	08011f4f 	.word	0x08011f4f
 8011ea8:	08011f4f 	.word	0x08011f4f
 8011eac:	08011f4f 	.word	0x08011f4f
 8011eb0:	08011f4f 	.word	0x08011f4f
 8011eb4:	08011f4f 	.word	0x08011f4f
 8011eb8:	08011f4f 	.word	0x08011f4f
 8011ebc:	08011f4f 	.word	0x08011f4f
 8011ec0:	08011f4f 	.word	0x08011f4f
 8011ec4:	08011f4f 	.word	0x08011f4f
 8011ec8:	08011f4f 	.word	0x08011f4f
 8011ecc:	08011f4f 	.word	0x08011f4f
 8011ed0:	08011f4f 	.word	0x08011f4f
 8011ed4:	08011f4f 	.word	0x08011f4f
 8011ed8:	08011f4f 	.word	0x08011f4f
 8011edc:	08011f1f 	.word	0x08011f1f
 8011ee0:	08011f4f 	.word	0x08011f4f
 8011ee4:	08011f4f 	.word	0x08011f4f
 8011ee8:	08011f4f 	.word	0x08011f4f
 8011eec:	08011f27 	.word	0x08011f27
 8011ef0:	08011f4f 	.word	0x08011f4f
 8011ef4:	08011f4f 	.word	0x08011f4f
 8011ef8:	08011f4f 	.word	0x08011f4f
 8011efc:	08011f2f 	.word	0x08011f2f
 8011f00:	08011f4f 	.word	0x08011f4f
 8011f04:	08011f4f 	.word	0x08011f4f
 8011f08:	08011f4f 	.word	0x08011f4f
 8011f0c:	08011f37 	.word	0x08011f37
 8011f10:	2b48      	cmp	r3, #72	@ 0x48
 8011f12:	d014      	beq.n	8011f3e <BSP_TS_GetGestureId+0x102>
 8011f14:	e01b      	b.n	8011f4e <BSP_TS_GetGestureId+0x112>
    {
    case FT6X06_GEST_ID_NO_GESTURE :
      *GestureId = GESTURE_ID_NO_GESTURE;
 8011f16:	683b      	ldr	r3, [r7, #0]
 8011f18:	2200      	movs	r2, #0
 8011f1a:	601a      	str	r2, [r3, #0]
      break;
 8011f1c:	e01b      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    case FT6X06_GEST_ID_MOVE_UP :
      *GestureId = GESTURE_ID_MOVE_UP;
 8011f1e:	683b      	ldr	r3, [r7, #0]
 8011f20:	2201      	movs	r2, #1
 8011f22:	601a      	str	r2, [r3, #0]
      break;
 8011f24:	e017      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    case FT6X06_GEST_ID_MOVE_RIGHT :
      *GestureId = GESTURE_ID_MOVE_RIGHT;
 8011f26:	683b      	ldr	r3, [r7, #0]
 8011f28:	2202      	movs	r2, #2
 8011f2a:	601a      	str	r2, [r3, #0]
      break;
 8011f2c:	e013      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    case FT6X06_GEST_ID_MOVE_DOWN :
      *GestureId = GESTURE_ID_MOVE_DOWN;
 8011f2e:	683b      	ldr	r3, [r7, #0]
 8011f30:	2203      	movs	r2, #3
 8011f32:	601a      	str	r2, [r3, #0]
      break;
 8011f34:	e00f      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    case FT6X06_GEST_ID_MOVE_LEFT :
      *GestureId = GESTURE_ID_MOVE_LEFT;
 8011f36:	683b      	ldr	r3, [r7, #0]
 8011f38:	2204      	movs	r2, #4
 8011f3a:	601a      	str	r2, [r3, #0]
      break;
 8011f3c:	e00b      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    case FT6X06_GEST_ID_ZOOM_IN :
      *GestureId = GESTURE_ID_ZOOM_IN;
 8011f3e:	683b      	ldr	r3, [r7, #0]
 8011f40:	2205      	movs	r2, #5
 8011f42:	601a      	str	r2, [r3, #0]
      break;
 8011f44:	e007      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    case FT6X06_GEST_ID_ZOOM_OUT :
      *GestureId = GESTURE_ID_ZOOM_OUT;
 8011f46:	683b      	ldr	r3, [r7, #0]
 8011f48:	2206      	movs	r2, #6
 8011f4a:	601a      	str	r2, [r3, #0]
      break;
 8011f4c:	e003      	b.n	8011f56 <BSP_TS_GetGestureId+0x11a>
    default :
      *GestureId = GESTURE_ID_NO_GESTURE;
 8011f4e:	683b      	ldr	r3, [r7, #0]
 8011f50:	2200      	movs	r2, #0
 8011f52:	601a      	str	r2, [r3, #0]
      break;
 8011f54:	bf00      	nop
    }

    ret = BSP_ERROR_NONE;
 8011f56:	2300      	movs	r3, #0
 8011f58:	60fb      	str	r3, [r7, #12]
  }

  return ret;
 8011f5a:	68fb      	ldr	r3, [r7, #12]
}
 8011f5c:	4618      	mov	r0, r3
 8011f5e:	3710      	adds	r7, #16
 8011f60:	46bd      	mov	sp, r7
 8011f62:	bd80      	pop	{r7, pc}
 8011f64:	2400899c 	.word	0x2400899c
 8011f68:	240089c8 	.word	0x240089c8

08011f6c <FT6X06_Probe>:
  * @brief  Register Bus IOs if component ID is OK
  * @param  Instance TS instance. Could be only 0.
  * @retval BSP status
  */
static int32_t FT6X06_Probe(uint32_t Instance)
{
 8011f6c:	b580      	push	{r7, lr}
 8011f6e:	b090      	sub	sp, #64	@ 0x40
 8011f70:	af00      	add	r7, sp, #0
 8011f72:	6078      	str	r0, [r7, #4]
  int32_t ret;
  FT6X06_IO_t              IOCtx;
  static FT6X06_Object_t   FT6X06Obj;
  FT6X06_Capabilities_t    Cap;
  uint32_t id, i;
  uint32_t const i2c_address[] = {TS_I2C_ADDRESS, TS_I2C_ADDRESS_A02};
 8011f74:	4a34      	ldr	r2, [pc, #208]	@ (8012048 <FT6X06_Probe+0xdc>)
 8011f76:	f107 0308 	add.w	r3, r7, #8
 8011f7a:	e892 0003 	ldmia.w	r2, {r0, r1}
 8011f7e:	e883 0003 	stmia.w	r3, {r0, r1}

  /* Configure the touch screen driver */
  IOCtx.Init        = BSP_I2C4_Init;
 8011f82:	4b32      	ldr	r3, [pc, #200]	@ (801204c <FT6X06_Probe+0xe0>)
 8011f84:	623b      	str	r3, [r7, #32]
  IOCtx.DeInit      = BSP_I2C4_DeInit;
 8011f86:	4b32      	ldr	r3, [pc, #200]	@ (8012050 <FT6X06_Probe+0xe4>)
 8011f88:	627b      	str	r3, [r7, #36]	@ 0x24
  IOCtx.ReadReg     = BSP_I2C4_ReadReg;
 8011f8a:	4b32      	ldr	r3, [pc, #200]	@ (8012054 <FT6X06_Probe+0xe8>)
 8011f8c:	633b      	str	r3, [r7, #48]	@ 0x30
  IOCtx.WriteReg    = BSP_I2C4_WriteReg;
 8011f8e:	4b32      	ldr	r3, [pc, #200]	@ (8012058 <FT6X06_Probe+0xec>)
 8011f90:	62fb      	str	r3, [r7, #44]	@ 0x2c
  IOCtx.GetTick     = BSP_GetTick;
 8011f92:	4b32      	ldr	r3, [pc, #200]	@ (801205c <FT6X06_Probe+0xf0>)
 8011f94:	637b      	str	r3, [r7, #52]	@ 0x34

  for(i = 0; i < 2UL; i++)
 8011f96:	2300      	movs	r3, #0
 8011f98:	63bb      	str	r3, [r7, #56]	@ 0x38
 8011f9a:	e04c      	b.n	8012036 <FT6X06_Probe+0xca>
  {
    IOCtx.Address     = (uint16_t)i2c_address[i];
 8011f9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011f9e:	009b      	lsls	r3, r3, #2
 8011fa0:	3340      	adds	r3, #64	@ 0x40
 8011fa2:	443b      	add	r3, r7
 8011fa4:	f853 3c38 	ldr.w	r3, [r3, #-56]
 8011fa8:	b29b      	uxth	r3, r3
 8011faa:	853b      	strh	r3, [r7, #40]	@ 0x28

    if(FT6X06_RegisterBusIO (&FT6X06Obj, &IOCtx) != FT6X06_OK)
 8011fac:	f107 0320 	add.w	r3, r7, #32
 8011fb0:	4619      	mov	r1, r3
 8011fb2:	482b      	ldr	r0, [pc, #172]	@ (8012060 <FT6X06_Probe+0xf4>)
 8011fb4:	f7ee fa5a 	bl	800046c <FT6X06_RegisterBusIO>
 8011fb8:	4603      	mov	r3, r0
 8011fba:	2b00      	cmp	r3, #0
 8011fbc:	d003      	beq.n	8011fc6 <FT6X06_Probe+0x5a>
    {
      ret = BSP_ERROR_BUS_FAILURE;
 8011fbe:	f06f 0307 	mvn.w	r3, #7
 8011fc2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011fc4:	e034      	b.n	8012030 <FT6X06_Probe+0xc4>
    }
    else if(FT6X06_ReadID(&FT6X06Obj, &id) != FT6X06_OK)
 8011fc6:	f107 0310 	add.w	r3, r7, #16
 8011fca:	4619      	mov	r1, r3
 8011fcc:	4824      	ldr	r0, [pc, #144]	@ (8012060 <FT6X06_Probe+0xf4>)
 8011fce:	f7ee fb45 	bl	800065c <FT6X06_ReadID>
 8011fd2:	4603      	mov	r3, r0
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d003      	beq.n	8011fe0 <FT6X06_Probe+0x74>
    {
      ret = BSP_ERROR_COMPONENT_FAILURE;
 8011fd8:	f06f 0304 	mvn.w	r3, #4
 8011fdc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011fde:	e027      	b.n	8012030 <FT6X06_Probe+0xc4>
    }
    else if(id != FT6X06_ID)
 8011fe0:	693b      	ldr	r3, [r7, #16]
 8011fe2:	2b11      	cmp	r3, #17
 8011fe4:	d003      	beq.n	8011fee <FT6X06_Probe+0x82>
    {
      ret = BSP_ERROR_UNKNOWN_COMPONENT;
 8011fe6:	f06f 0306 	mvn.w	r3, #6
 8011fea:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8011fec:	e020      	b.n	8012030 <FT6X06_Probe+0xc4>
    }
    else
    {

      (void)FT6X06_GetCapabilities(&FT6X06Obj, &Cap);
 8011fee:	f107 0314 	add.w	r3, r7, #20
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	481a      	ldr	r0, [pc, #104]	@ (8012060 <FT6X06_Probe+0xf4>)
 8011ff6:	f7ee fa7b 	bl	80004f0 <FT6X06_GetCapabilities>
      Ts_CompObj[Instance] = &FT6X06Obj;
 8011ffa:	4a1a      	ldr	r2, [pc, #104]	@ (8012064 <FT6X06_Probe+0xf8>)
 8011ffc:	687b      	ldr	r3, [r7, #4]
 8011ffe:	4918      	ldr	r1, [pc, #96]	@ (8012060 <FT6X06_Probe+0xf4>)
 8012000:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      Ts_Drv = (TS_Drv_t *) &FT6X06_TS_Driver;
 8012004:	4b18      	ldr	r3, [pc, #96]	@ (8012068 <FT6X06_Probe+0xfc>)
 8012006:	4a19      	ldr	r2, [pc, #100]	@ (801206c <FT6X06_Probe+0x100>)
 8012008:	601a      	str	r2, [r3, #0]

      if(Ts_Drv->Init(Ts_CompObj[Instance]) != FT6X06_OK)
 801200a:	4b17      	ldr	r3, [pc, #92]	@ (8012068 <FT6X06_Probe+0xfc>)
 801200c:	681b      	ldr	r3, [r3, #0]
 801200e:	681b      	ldr	r3, [r3, #0]
 8012010:	4914      	ldr	r1, [pc, #80]	@ (8012064 <FT6X06_Probe+0xf8>)
 8012012:	687a      	ldr	r2, [r7, #4]
 8012014:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8012018:	4610      	mov	r0, r2
 801201a:	4798      	blx	r3
 801201c:	4603      	mov	r3, r0
 801201e:	2b00      	cmp	r3, #0
 8012020:	d003      	beq.n	801202a <FT6X06_Probe+0xbe>
      {
        ret = BSP_ERROR_COMPONENT_FAILURE;
 8012022:	f06f 0304 	mvn.w	r3, #4
 8012026:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8012028:	e002      	b.n	8012030 <FT6X06_Probe+0xc4>
      }
      else
      {
        ret = BSP_ERROR_NONE;
 801202a:	2300      	movs	r3, #0
 801202c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801202e:	e005      	b.n	801203c <FT6X06_Probe+0xd0>
  for(i = 0; i < 2UL; i++)
 8012030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012032:	3301      	adds	r3, #1
 8012034:	63bb      	str	r3, [r7, #56]	@ 0x38
 8012036:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8012038:	2b01      	cmp	r3, #1
 801203a:	d9af      	bls.n	8011f9c <FT6X06_Probe+0x30>
      }
    }
  }

  return ret;
 801203c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801203e:	4618      	mov	r0, r3
 8012040:	3740      	adds	r7, #64	@ 0x40
 8012042:	46bd      	mov	sp, r7
 8012044:	bd80      	pop	{r7, pc}
 8012046:	bf00      	nop
 8012048:	08027464 	.word	0x08027464
 801204c:	0800d5b5 	.word	0x0800d5b5
 8012050:	0800d629 	.word	0x0800d629
 8012054:	0800d751 	.word	0x0800d751
 8012058:	0800d6f5 	.word	0x0800d6f5
 801205c:	0800d865 	.word	0x0800d865
 8012060:	240089cc 	.word	0x240089cc
 8012064:	240089c8 	.word	0x240089c8
 8012068:	2400899c 	.word	0x2400899c
 801206c:	24000408 	.word	0x24000408

08012070 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012070:	b580      	push	{r7, lr}
 8012072:	b082      	sub	sp, #8
 8012074:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012076:	2003      	movs	r0, #3
 8012078:	f000 f9c0 	bl	80123fc <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801207c:	f008 fe78 	bl	801ad70 <HAL_RCC_GetSysClockFreq>
 8012080:	4602      	mov	r2, r0
 8012082:	4b15      	ldr	r3, [pc, #84]	@ (80120d8 <HAL_Init+0x68>)
 8012084:	699b      	ldr	r3, [r3, #24]
 8012086:	0a1b      	lsrs	r3, r3, #8
 8012088:	f003 030f 	and.w	r3, r3, #15
 801208c:	4913      	ldr	r1, [pc, #76]	@ (80120dc <HAL_Init+0x6c>)
 801208e:	5ccb      	ldrb	r3, [r1, r3]
 8012090:	f003 031f 	and.w	r3, r3, #31
 8012094:	fa22 f303 	lsr.w	r3, r2, r3
 8012098:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801209a:	4b0f      	ldr	r3, [pc, #60]	@ (80120d8 <HAL_Init+0x68>)
 801209c:	699b      	ldr	r3, [r3, #24]
 801209e:	f003 030f 	and.w	r3, r3, #15
 80120a2:	4a0e      	ldr	r2, [pc, #56]	@ (80120dc <HAL_Init+0x6c>)
 80120a4:	5cd3      	ldrb	r3, [r2, r3]
 80120a6:	f003 031f 	and.w	r3, r3, #31
 80120aa:	687a      	ldr	r2, [r7, #4]
 80120ac:	fa22 f303 	lsr.w	r3, r2, r3
 80120b0:	4a0b      	ldr	r2, [pc, #44]	@ (80120e0 <HAL_Init+0x70>)
 80120b2:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80120b4:	4a0b      	ldr	r2, [pc, #44]	@ (80120e4 <HAL_Init+0x74>)
 80120b6:	687b      	ldr	r3, [r7, #4]
 80120b8:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80120ba:	200f      	movs	r0, #15
 80120bc:	f000 f814 	bl	80120e8 <HAL_InitTick>
 80120c0:	4603      	mov	r3, r0
 80120c2:	2b00      	cmp	r3, #0
 80120c4:	d001      	beq.n	80120ca <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 80120c6:	2301      	movs	r3, #1
 80120c8:	e002      	b.n	80120d0 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 80120ca:	f7f8 fc73 	bl	800a9b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80120ce:	2300      	movs	r3, #0
}
 80120d0:	4618      	mov	r0, r3
 80120d2:	3708      	adds	r7, #8
 80120d4:	46bd      	mov	sp, r7
 80120d6:	bd80      	pop	{r7, pc}
 80120d8:	58024400 	.word	0x58024400
 80120dc:	080274a4 	.word	0x080274a4
 80120e0:	24000404 	.word	0x24000404
 80120e4:	24000400 	.word	0x24000400

080120e8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80120e8:	b580      	push	{r7, lr}
 80120ea:	b082      	sub	sp, #8
 80120ec:	af00      	add	r7, sp, #0
 80120ee:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 80120f0:	4b15      	ldr	r3, [pc, #84]	@ (8012148 <HAL_InitTick+0x60>)
 80120f2:	781b      	ldrb	r3, [r3, #0]
 80120f4:	2b00      	cmp	r3, #0
 80120f6:	d101      	bne.n	80120fc <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 80120f8:	2301      	movs	r3, #1
 80120fa:	e021      	b.n	8012140 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 80120fc:	4b13      	ldr	r3, [pc, #76]	@ (801214c <HAL_InitTick+0x64>)
 80120fe:	681a      	ldr	r2, [r3, #0]
 8012100:	4b11      	ldr	r3, [pc, #68]	@ (8012148 <HAL_InitTick+0x60>)
 8012102:	781b      	ldrb	r3, [r3, #0]
 8012104:	4619      	mov	r1, r3
 8012106:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 801210a:	fbb3 f3f1 	udiv	r3, r3, r1
 801210e:	fbb2 f3f3 	udiv	r3, r2, r3
 8012112:	4618      	mov	r0, r3
 8012114:	f000 f9b3 	bl	801247e <HAL_SYSTICK_Config>
 8012118:	4603      	mov	r3, r0
 801211a:	2b00      	cmp	r3, #0
 801211c:	d001      	beq.n	8012122 <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 801211e:	2301      	movs	r3, #1
 8012120:	e00e      	b.n	8012140 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	2b0f      	cmp	r3, #15
 8012126:	d80a      	bhi.n	801213e <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8012128:	2200      	movs	r2, #0
 801212a:	6879      	ldr	r1, [r7, #4]
 801212c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8012130:	f000 f96f 	bl	8012412 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8012134:	4a06      	ldr	r2, [pc, #24]	@ (8012150 <HAL_InitTick+0x68>)
 8012136:	687b      	ldr	r3, [r7, #4]
 8012138:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 801213a:	2300      	movs	r3, #0
 801213c:	e000      	b.n	8012140 <HAL_InitTick+0x58>
    return HAL_ERROR;
 801213e:	2301      	movs	r3, #1
}
 8012140:	4618      	mov	r0, r3
 8012142:	3708      	adds	r7, #8
 8012144:	46bd      	mov	sp, r7
 8012146:	bd80      	pop	{r7, pc}
 8012148:	24000a40 	.word	0x24000a40
 801214c:	24000400 	.word	0x24000400
 8012150:	24000a3c 	.word	0x24000a3c

08012154 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012154:	b480      	push	{r7}
 8012156:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8012158:	4b06      	ldr	r3, [pc, #24]	@ (8012174 <HAL_IncTick+0x20>)
 801215a:	781b      	ldrb	r3, [r3, #0]
 801215c:	461a      	mov	r2, r3
 801215e:	4b06      	ldr	r3, [pc, #24]	@ (8012178 <HAL_IncTick+0x24>)
 8012160:	681b      	ldr	r3, [r3, #0]
 8012162:	4413      	add	r3, r2
 8012164:	4a04      	ldr	r2, [pc, #16]	@ (8012178 <HAL_IncTick+0x24>)
 8012166:	6013      	str	r3, [r2, #0]
}
 8012168:	bf00      	nop
 801216a:	46bd      	mov	sp, r7
 801216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012170:	4770      	bx	lr
 8012172:	bf00      	nop
 8012174:	24000a40 	.word	0x24000a40
 8012178:	240089f4 	.word	0x240089f4

0801217c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 801217c:	b480      	push	{r7}
 801217e:	af00      	add	r7, sp, #0
  return uwTick;
 8012180:	4b03      	ldr	r3, [pc, #12]	@ (8012190 <HAL_GetTick+0x14>)
 8012182:	681b      	ldr	r3, [r3, #0]
}
 8012184:	4618      	mov	r0, r3
 8012186:	46bd      	mov	sp, r7
 8012188:	f85d 7b04 	ldr.w	r7, [sp], #4
 801218c:	4770      	bx	lr
 801218e:	bf00      	nop
 8012190:	240089f4 	.word	0x240089f4

08012194 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8012194:	b580      	push	{r7, lr}
 8012196:	b084      	sub	sp, #16
 8012198:	af00      	add	r7, sp, #0
 801219a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 801219c:	f7ff ffee 	bl	801217c <HAL_GetTick>
 80121a0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80121a6:	68fb      	ldr	r3, [r7, #12]
 80121a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80121ac:	d005      	beq.n	80121ba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80121ae:	4b0a      	ldr	r3, [pc, #40]	@ (80121d8 <HAL_Delay+0x44>)
 80121b0:	781b      	ldrb	r3, [r3, #0]
 80121b2:	461a      	mov	r2, r3
 80121b4:	68fb      	ldr	r3, [r7, #12]
 80121b6:	4413      	add	r3, r2
 80121b8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80121ba:	bf00      	nop
 80121bc:	f7ff ffde 	bl	801217c <HAL_GetTick>
 80121c0:	4602      	mov	r2, r0
 80121c2:	68bb      	ldr	r3, [r7, #8]
 80121c4:	1ad3      	subs	r3, r2, r3
 80121c6:	68fa      	ldr	r2, [r7, #12]
 80121c8:	429a      	cmp	r2, r3
 80121ca:	d8f7      	bhi.n	80121bc <HAL_Delay+0x28>
  {
  }
}
 80121cc:	bf00      	nop
 80121ce:	bf00      	nop
 80121d0:	3710      	adds	r7, #16
 80121d2:	46bd      	mov	sp, r7
 80121d4:	bd80      	pop	{r7, pc}
 80121d6:	bf00      	nop
 80121d8:	24000a40 	.word	0x24000a40

080121dc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80121dc:	b480      	push	{r7}
 80121de:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 80121e0:	4b03      	ldr	r3, [pc, #12]	@ (80121f0 <HAL_GetREVID+0x14>)
 80121e2:	681b      	ldr	r3, [r3, #0]
 80121e4:	0c1b      	lsrs	r3, r3, #16
}
 80121e6:	4618      	mov	r0, r3
 80121e8:	46bd      	mov	sp, r7
 80121ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80121ee:	4770      	bx	lr
 80121f0:	5c001000 	.word	0x5c001000

080121f4 <HAL_EnableCompensationCell>:
  * @note   The I/O compensation cell can be used only when the device supply
  *         voltage ranges from 1.62 to 2.0 V and from 2.7 to 3.6 V.
  * @retval None
  */
void HAL_EnableCompensationCell(void)
{
 80121f4:	b480      	push	{r7}
 80121f6:	af00      	add	r7, sp, #0
  SET_BIT(SYSCFG->CCCSR, SYSCFG_CCCSR_EN) ;
 80121f8:	4b05      	ldr	r3, [pc, #20]	@ (8012210 <HAL_EnableCompensationCell+0x1c>)
 80121fa:	6a1b      	ldr	r3, [r3, #32]
 80121fc:	4a04      	ldr	r2, [pc, #16]	@ (8012210 <HAL_EnableCompensationCell+0x1c>)
 80121fe:	f043 0301 	orr.w	r3, r3, #1
 8012202:	6213      	str	r3, [r2, #32]
}
 8012204:	bf00      	nop
 8012206:	46bd      	mov	sp, r7
 8012208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801220c:	4770      	bx	lr
 801220e:	bf00      	nop
 8012210:	58000400 	.word	0x58000400

08012214 <__NVIC_SetPriorityGrouping>:
{
 8012214:	b480      	push	{r7}
 8012216:	b085      	sub	sp, #20
 8012218:	af00      	add	r7, sp, #0
 801221a:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 801221c:	687b      	ldr	r3, [r7, #4]
 801221e:	f003 0307 	and.w	r3, r3, #7
 8012222:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012224:	4b0b      	ldr	r3, [pc, #44]	@ (8012254 <__NVIC_SetPriorityGrouping+0x40>)
 8012226:	68db      	ldr	r3, [r3, #12]
 8012228:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 801222a:	68ba      	ldr	r2, [r7, #8]
 801222c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8012230:	4013      	ands	r3, r2
 8012232:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012234:	68fb      	ldr	r3, [r7, #12]
 8012236:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012238:	68bb      	ldr	r3, [r7, #8]
 801223a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 801223c:	4b06      	ldr	r3, [pc, #24]	@ (8012258 <__NVIC_SetPriorityGrouping+0x44>)
 801223e:	4313      	orrs	r3, r2
 8012240:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012242:	4a04      	ldr	r2, [pc, #16]	@ (8012254 <__NVIC_SetPriorityGrouping+0x40>)
 8012244:	68bb      	ldr	r3, [r7, #8]
 8012246:	60d3      	str	r3, [r2, #12]
}
 8012248:	bf00      	nop
 801224a:	3714      	adds	r7, #20
 801224c:	46bd      	mov	sp, r7
 801224e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012252:	4770      	bx	lr
 8012254:	e000ed00 	.word	0xe000ed00
 8012258:	05fa0000 	.word	0x05fa0000

0801225c <__NVIC_GetPriorityGrouping>:
{
 801225c:	b480      	push	{r7}
 801225e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012260:	4b04      	ldr	r3, [pc, #16]	@ (8012274 <__NVIC_GetPriorityGrouping+0x18>)
 8012262:	68db      	ldr	r3, [r3, #12]
 8012264:	0a1b      	lsrs	r3, r3, #8
 8012266:	f003 0307 	and.w	r3, r3, #7
}
 801226a:	4618      	mov	r0, r3
 801226c:	46bd      	mov	sp, r7
 801226e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012272:	4770      	bx	lr
 8012274:	e000ed00 	.word	0xe000ed00

08012278 <__NVIC_EnableIRQ>:
{
 8012278:	b480      	push	{r7}
 801227a:	b083      	sub	sp, #12
 801227c:	af00      	add	r7, sp, #0
 801227e:	4603      	mov	r3, r0
 8012280:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012282:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012286:	2b00      	cmp	r3, #0
 8012288:	db0b      	blt.n	80122a2 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 801228a:	88fb      	ldrh	r3, [r7, #6]
 801228c:	f003 021f 	and.w	r2, r3, #31
 8012290:	4907      	ldr	r1, [pc, #28]	@ (80122b0 <__NVIC_EnableIRQ+0x38>)
 8012292:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012296:	095b      	lsrs	r3, r3, #5
 8012298:	2001      	movs	r0, #1
 801229a:	fa00 f202 	lsl.w	r2, r0, r2
 801229e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 80122a2:	bf00      	nop
 80122a4:	370c      	adds	r7, #12
 80122a6:	46bd      	mov	sp, r7
 80122a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122ac:	4770      	bx	lr
 80122ae:	bf00      	nop
 80122b0:	e000e100 	.word	0xe000e100

080122b4 <__NVIC_DisableIRQ>:
{
 80122b4:	b480      	push	{r7}
 80122b6:	b083      	sub	sp, #12
 80122b8:	af00      	add	r7, sp, #0
 80122ba:	4603      	mov	r3, r0
 80122bc:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 80122be:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	db12      	blt.n	80122ec <__NVIC_DisableIRQ+0x38>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80122c6:	88fb      	ldrh	r3, [r7, #6]
 80122c8:	f003 021f 	and.w	r2, r3, #31
 80122cc:	490a      	ldr	r1, [pc, #40]	@ (80122f8 <__NVIC_DisableIRQ+0x44>)
 80122ce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80122d2:	095b      	lsrs	r3, r3, #5
 80122d4:	2001      	movs	r0, #1
 80122d6:	fa00 f202 	lsl.w	r2, r0, r2
 80122da:	3320      	adds	r3, #32
 80122dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  __ASM volatile ("dsb 0xF":::"memory");
 80122e0:	f3bf 8f4f 	dsb	sy
}
 80122e4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80122e6:	f3bf 8f6f 	isb	sy
}
 80122ea:	bf00      	nop
}
 80122ec:	bf00      	nop
 80122ee:	370c      	adds	r7, #12
 80122f0:	46bd      	mov	sp, r7
 80122f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122f6:	4770      	bx	lr
 80122f8:	e000e100 	.word	0xe000e100

080122fc <__NVIC_SetPriority>:
{
 80122fc:	b480      	push	{r7}
 80122fe:	b083      	sub	sp, #12
 8012300:	af00      	add	r7, sp, #0
 8012302:	4603      	mov	r3, r0
 8012304:	6039      	str	r1, [r7, #0]
 8012306:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8012308:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801230c:	2b00      	cmp	r3, #0
 801230e:	db0a      	blt.n	8012326 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012310:	683b      	ldr	r3, [r7, #0]
 8012312:	b2da      	uxtb	r2, r3
 8012314:	490c      	ldr	r1, [pc, #48]	@ (8012348 <__NVIC_SetPriority+0x4c>)
 8012316:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801231a:	0112      	lsls	r2, r2, #4
 801231c:	b2d2      	uxtb	r2, r2
 801231e:	440b      	add	r3, r1
 8012320:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8012324:	e00a      	b.n	801233c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012326:	683b      	ldr	r3, [r7, #0]
 8012328:	b2da      	uxtb	r2, r3
 801232a:	4908      	ldr	r1, [pc, #32]	@ (801234c <__NVIC_SetPriority+0x50>)
 801232c:	88fb      	ldrh	r3, [r7, #6]
 801232e:	f003 030f 	and.w	r3, r3, #15
 8012332:	3b04      	subs	r3, #4
 8012334:	0112      	lsls	r2, r2, #4
 8012336:	b2d2      	uxtb	r2, r2
 8012338:	440b      	add	r3, r1
 801233a:	761a      	strb	r2, [r3, #24]
}
 801233c:	bf00      	nop
 801233e:	370c      	adds	r7, #12
 8012340:	46bd      	mov	sp, r7
 8012342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012346:	4770      	bx	lr
 8012348:	e000e100 	.word	0xe000e100
 801234c:	e000ed00 	.word	0xe000ed00

08012350 <NVIC_EncodePriority>:
{
 8012350:	b480      	push	{r7}
 8012352:	b089      	sub	sp, #36	@ 0x24
 8012354:	af00      	add	r7, sp, #0
 8012356:	60f8      	str	r0, [r7, #12]
 8012358:	60b9      	str	r1, [r7, #8]
 801235a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 801235c:	68fb      	ldr	r3, [r7, #12]
 801235e:	f003 0307 	and.w	r3, r3, #7
 8012362:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012364:	69fb      	ldr	r3, [r7, #28]
 8012366:	f1c3 0307 	rsb	r3, r3, #7
 801236a:	2b04      	cmp	r3, #4
 801236c:	bf28      	it	cs
 801236e:	2304      	movcs	r3, #4
 8012370:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012372:	69fb      	ldr	r3, [r7, #28]
 8012374:	3304      	adds	r3, #4
 8012376:	2b06      	cmp	r3, #6
 8012378:	d902      	bls.n	8012380 <NVIC_EncodePriority+0x30>
 801237a:	69fb      	ldr	r3, [r7, #28]
 801237c:	3b03      	subs	r3, #3
 801237e:	e000      	b.n	8012382 <NVIC_EncodePriority+0x32>
 8012380:	2300      	movs	r3, #0
 8012382:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012384:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8012388:	69bb      	ldr	r3, [r7, #24]
 801238a:	fa02 f303 	lsl.w	r3, r2, r3
 801238e:	43da      	mvns	r2, r3
 8012390:	68bb      	ldr	r3, [r7, #8]
 8012392:	401a      	ands	r2, r3
 8012394:	697b      	ldr	r3, [r7, #20]
 8012396:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012398:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 801239c:	697b      	ldr	r3, [r7, #20]
 801239e:	fa01 f303 	lsl.w	r3, r1, r3
 80123a2:	43d9      	mvns	r1, r3
 80123a4:	687b      	ldr	r3, [r7, #4]
 80123a6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80123a8:	4313      	orrs	r3, r2
}
 80123aa:	4618      	mov	r0, r3
 80123ac:	3724      	adds	r7, #36	@ 0x24
 80123ae:	46bd      	mov	sp, r7
 80123b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123b4:	4770      	bx	lr
	...

080123b8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80123b8:	b580      	push	{r7, lr}
 80123ba:	b082      	sub	sp, #8
 80123bc:	af00      	add	r7, sp, #0
 80123be:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80123c0:	687b      	ldr	r3, [r7, #4]
 80123c2:	3b01      	subs	r3, #1
 80123c4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80123c8:	d301      	bcc.n	80123ce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80123ca:	2301      	movs	r3, #1
 80123cc:	e00f      	b.n	80123ee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80123ce:	4a0a      	ldr	r2, [pc, #40]	@ (80123f8 <SysTick_Config+0x40>)
 80123d0:	687b      	ldr	r3, [r7, #4]
 80123d2:	3b01      	subs	r3, #1
 80123d4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80123d6:	210f      	movs	r1, #15
 80123d8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80123dc:	f7ff ff8e 	bl	80122fc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80123e0:	4b05      	ldr	r3, [pc, #20]	@ (80123f8 <SysTick_Config+0x40>)
 80123e2:	2200      	movs	r2, #0
 80123e4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80123e6:	4b04      	ldr	r3, [pc, #16]	@ (80123f8 <SysTick_Config+0x40>)
 80123e8:	2207      	movs	r2, #7
 80123ea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80123ec:	2300      	movs	r3, #0
}
 80123ee:	4618      	mov	r0, r3
 80123f0:	3708      	adds	r7, #8
 80123f2:	46bd      	mov	sp, r7
 80123f4:	bd80      	pop	{r7, pc}
 80123f6:	bf00      	nop
 80123f8:	e000e010 	.word	0xe000e010

080123fc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80123fc:	b580      	push	{r7, lr}
 80123fe:	b082      	sub	sp, #8
 8012400:	af00      	add	r7, sp, #0
 8012402:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012404:	6878      	ldr	r0, [r7, #4]
 8012406:	f7ff ff05 	bl	8012214 <__NVIC_SetPriorityGrouping>
}
 801240a:	bf00      	nop
 801240c:	3708      	adds	r7, #8
 801240e:	46bd      	mov	sp, r7
 8012410:	bd80      	pop	{r7, pc}

08012412 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012412:	b580      	push	{r7, lr}
 8012414:	b086      	sub	sp, #24
 8012416:	af00      	add	r7, sp, #0
 8012418:	4603      	mov	r3, r0
 801241a:	60b9      	str	r1, [r7, #8]
 801241c:	607a      	str	r2, [r7, #4]
 801241e:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8012420:	f7ff ff1c 	bl	801225c <__NVIC_GetPriorityGrouping>
 8012424:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012426:	687a      	ldr	r2, [r7, #4]
 8012428:	68b9      	ldr	r1, [r7, #8]
 801242a:	6978      	ldr	r0, [r7, #20]
 801242c:	f7ff ff90 	bl	8012350 <NVIC_EncodePriority>
 8012430:	4602      	mov	r2, r0
 8012432:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8012436:	4611      	mov	r1, r2
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff ff5f 	bl	80122fc <__NVIC_SetPriority>
}
 801243e:	bf00      	nop
 8012440:	3718      	adds	r7, #24
 8012442:	46bd      	mov	sp, r7
 8012444:	bd80      	pop	{r7, pc}

08012446 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012446:	b580      	push	{r7, lr}
 8012448:	b082      	sub	sp, #8
 801244a:	af00      	add	r7, sp, #0
 801244c:	4603      	mov	r3, r0
 801244e:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012454:	4618      	mov	r0, r3
 8012456:	f7ff ff0f 	bl	8012278 <__NVIC_EnableIRQ>
}
 801245a:	bf00      	nop
 801245c:	3708      	adds	r7, #8
 801245e:	46bd      	mov	sp, r7
 8012460:	bd80      	pop	{r7, pc}

08012462 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8012462:	b580      	push	{r7, lr}
 8012464:	b082      	sub	sp, #8
 8012466:	af00      	add	r7, sp, #0
 8012468:	4603      	mov	r3, r0
 801246a:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 801246c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8012470:	4618      	mov	r0, r3
 8012472:	f7ff ff1f 	bl	80122b4 <__NVIC_DisableIRQ>
}
 8012476:	bf00      	nop
 8012478:	3708      	adds	r7, #8
 801247a:	46bd      	mov	sp, r7
 801247c:	bd80      	pop	{r7, pc}

0801247e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 801247e:	b580      	push	{r7, lr}
 8012480:	b082      	sub	sp, #8
 8012482:	af00      	add	r7, sp, #0
 8012484:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8012486:	6878      	ldr	r0, [r7, #4]
 8012488:	f7ff ff96 	bl	80123b8 <SysTick_Config>
 801248c:	4603      	mov	r3, r0
}
 801248e:	4618      	mov	r0, r3
 8012490:	3708      	adds	r7, #8
 8012492:	46bd      	mov	sp, r7
 8012494:	bd80      	pop	{r7, pc}
	...

08012498 <HAL_MPU_Disable>:
/**
  * @brief  Disables the MPU
  * @retval None
  */
void HAL_MPU_Disable(void)
{
 8012498:	b480      	push	{r7}
 801249a:	af00      	add	r7, sp, #0
  __ASM volatile ("dmb 0xF":::"memory");
 801249c:	f3bf 8f5f 	dmb	sy
}
 80124a0:	bf00      	nop
  /* Make sure outstanding transfers are done */
  __DMB();

  /* Disable fault exceptions */
  SCB->SHCSR &= ~SCB_SHCSR_MEMFAULTENA_Msk;
 80124a2:	4b07      	ldr	r3, [pc, #28]	@ (80124c0 <HAL_MPU_Disable+0x28>)
 80124a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124a6:	4a06      	ldr	r2, [pc, #24]	@ (80124c0 <HAL_MPU_Disable+0x28>)
 80124a8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80124ac:	6253      	str	r3, [r2, #36]	@ 0x24

  /* Disable the MPU and clear the control register*/
  MPU->CTRL = 0;
 80124ae:	4b05      	ldr	r3, [pc, #20]	@ (80124c4 <HAL_MPU_Disable+0x2c>)
 80124b0:	2200      	movs	r2, #0
 80124b2:	605a      	str	r2, [r3, #4]
}
 80124b4:	bf00      	nop
 80124b6:	46bd      	mov	sp, r7
 80124b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124bc:	4770      	bx	lr
 80124be:	bf00      	nop
 80124c0:	e000ed00 	.word	0xe000ed00
 80124c4:	e000ed90 	.word	0xe000ed90

080124c8 <HAL_MPU_Enable>:
  *            @arg MPU_PRIVILEGED_DEFAULT
  *            @arg MPU_HFNMI_PRIVDEF
  * @retval None
  */
void HAL_MPU_Enable(uint32_t MPU_Control)
{
 80124c8:	b480      	push	{r7}
 80124ca:	b083      	sub	sp, #12
 80124cc:	af00      	add	r7, sp, #0
 80124ce:	6078      	str	r0, [r7, #4]
  /* Enable the MPU */
  MPU->CTRL = MPU_Control | MPU_CTRL_ENABLE_Msk;
 80124d0:	4a0b      	ldr	r2, [pc, #44]	@ (8012500 <HAL_MPU_Enable+0x38>)
 80124d2:	687b      	ldr	r3, [r7, #4]
 80124d4:	f043 0301 	orr.w	r3, r3, #1
 80124d8:	6053      	str	r3, [r2, #4]

  /* Enable fault exceptions */
  SCB->SHCSR |= SCB_SHCSR_MEMFAULTENA_Msk;
 80124da:	4b0a      	ldr	r3, [pc, #40]	@ (8012504 <HAL_MPU_Enable+0x3c>)
 80124dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80124de:	4a09      	ldr	r2, [pc, #36]	@ (8012504 <HAL_MPU_Enable+0x3c>)
 80124e0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80124e4:	6253      	str	r3, [r2, #36]	@ 0x24
  __ASM volatile ("dsb 0xF":::"memory");
 80124e6:	f3bf 8f4f 	dsb	sy
}
 80124ea:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 80124ec:	f3bf 8f6f 	isb	sy
}
 80124f0:	bf00      	nop

  /* Ensure MPU setting take effects */
  __DSB();
  __ISB();
}
 80124f2:	bf00      	nop
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr
 80124fe:	bf00      	nop
 8012500:	e000ed90 	.word	0xe000ed90
 8012504:	e000ed00 	.word	0xe000ed00

08012508 <HAL_MPU_ConfigRegion>:
  * @param MPU_Init Pointer to a MPU_Region_InitTypeDef structure that contains
  *                the initialization and configuration information.
  * @retval None
  */
void HAL_MPU_ConfigRegion(const MPU_Region_InitTypeDef *MPU_Init)
{
 8012508:	b480      	push	{r7}
 801250a:	b083      	sub	sp, #12
 801250c:	af00      	add	r7, sp, #0
 801250e:	6078      	str	r0, [r7, #4]
  assert_param(IS_MPU_ACCESS_BUFFERABLE(MPU_Init->IsBufferable));
  assert_param(IS_MPU_SUB_REGION_DISABLE(MPU_Init->SubRegionDisable));
  assert_param(IS_MPU_REGION_SIZE(MPU_Init->Size));

  /* Set the Region number */
  MPU->RNR = MPU_Init->Number;
 8012510:	687b      	ldr	r3, [r7, #4]
 8012512:	785a      	ldrb	r2, [r3, #1]
 8012514:	4b1b      	ldr	r3, [pc, #108]	@ (8012584 <HAL_MPU_ConfigRegion+0x7c>)
 8012516:	609a      	str	r2, [r3, #8]

  /* Disable the Region */
  CLEAR_BIT(MPU->RASR, MPU_RASR_ENABLE_Msk);
 8012518:	4b1a      	ldr	r3, [pc, #104]	@ (8012584 <HAL_MPU_ConfigRegion+0x7c>)
 801251a:	691b      	ldr	r3, [r3, #16]
 801251c:	4a19      	ldr	r2, [pc, #100]	@ (8012584 <HAL_MPU_ConfigRegion+0x7c>)
 801251e:	f023 0301 	bic.w	r3, r3, #1
 8012522:	6113      	str	r3, [r2, #16]

  /* Apply configuration */
  MPU->RBAR = MPU_Init->BaseAddress;
 8012524:	4a17      	ldr	r2, [pc, #92]	@ (8012584 <HAL_MPU_ConfigRegion+0x7c>)
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	685b      	ldr	r3, [r3, #4]
 801252a:	60d3      	str	r3, [r2, #12]
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 801252c:	687b      	ldr	r3, [r7, #4]
 801252e:	7b1b      	ldrb	r3, [r3, #12]
 8012530:	071a      	lsls	r2, r3, #28
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8012532:	687b      	ldr	r3, [r7, #4]
 8012534:	7adb      	ldrb	r3, [r3, #11]
 8012536:	061b      	lsls	r3, r3, #24
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012538:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 801253a:	687b      	ldr	r3, [r7, #4]
 801253c:	7a9b      	ldrb	r3, [r3, #10]
 801253e:	04db      	lsls	r3, r3, #19
              ((uint32_t)MPU_Init->AccessPermission        << MPU_RASR_AP_Pos)   |
 8012540:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8012542:	687b      	ldr	r3, [r7, #4]
 8012544:	7b5b      	ldrb	r3, [r3, #13]
 8012546:	049b      	lsls	r3, r3, #18
              ((uint32_t)MPU_Init->TypeExtField            << MPU_RASR_TEX_Pos)  |
 8012548:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 801254a:	687b      	ldr	r3, [r7, #4]
 801254c:	7b9b      	ldrb	r3, [r3, #14]
 801254e:	045b      	lsls	r3, r3, #17
              ((uint32_t)MPU_Init->IsShareable             << MPU_RASR_S_Pos)    |
 8012550:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8012552:	687b      	ldr	r3, [r7, #4]
 8012554:	7bdb      	ldrb	r3, [r3, #15]
 8012556:	041b      	lsls	r3, r3, #16
              ((uint32_t)MPU_Init->IsCacheable             << MPU_RASR_C_Pos)    |
 8012558:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 801255a:	687b      	ldr	r3, [r7, #4]
 801255c:	7a5b      	ldrb	r3, [r3, #9]
 801255e:	021b      	lsls	r3, r3, #8
              ((uint32_t)MPU_Init->IsBufferable            << MPU_RASR_B_Pos)    |
 8012560:	431a      	orrs	r2, r3
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8012562:	687b      	ldr	r3, [r7, #4]
 8012564:	7a1b      	ldrb	r3, [r3, #8]
 8012566:	005b      	lsls	r3, r3, #1
              ((uint32_t)MPU_Init->SubRegionDisable        << MPU_RASR_SRD_Pos)  |
 8012568:	4313      	orrs	r3, r2
              ((uint32_t)MPU_Init->Enable                  << MPU_RASR_ENABLE_Pos);
 801256a:	687a      	ldr	r2, [r7, #4]
 801256c:	7812      	ldrb	r2, [r2, #0]
 801256e:	4611      	mov	r1, r2
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012570:	4a04      	ldr	r2, [pc, #16]	@ (8012584 <HAL_MPU_ConfigRegion+0x7c>)
              ((uint32_t)MPU_Init->Size                    << MPU_RASR_SIZE_Pos) |
 8012572:	430b      	orrs	r3, r1
  MPU->RASR = ((uint32_t)MPU_Init->DisableExec             << MPU_RASR_XN_Pos)   |
 8012574:	6113      	str	r3, [r2, #16]
}
 8012576:	bf00      	nop
 8012578:	370c      	adds	r7, #12
 801257a:	46bd      	mov	sp, r7
 801257c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012580:	4770      	bx	lr
 8012582:	bf00      	nop
 8012584:	e000ed90 	.word	0xe000ed90

08012588 <HAL_GetCurrentCPUID>:
/**
  * @brief  Returns the current CPU ID.
  * @retval CPU identifier
  */
uint32_t HAL_GetCurrentCPUID(void)
{
 8012588:	b480      	push	{r7}
 801258a:	af00      	add	r7, sp, #0
  if (((SCB->CPUID & 0x000000F0U) >> 4 )== 0x7U)
 801258c:	4b06      	ldr	r3, [pc, #24]	@ (80125a8 <HAL_GetCurrentCPUID+0x20>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8012594:	2b70      	cmp	r3, #112	@ 0x70
 8012596:	d101      	bne.n	801259c <HAL_GetCurrentCPUID+0x14>
  {
    return  CM7_CPUID;
 8012598:	2303      	movs	r3, #3
 801259a:	e000      	b.n	801259e <HAL_GetCurrentCPUID+0x16>
  }
  else
  {
    return CM4_CPUID;
 801259c:	2301      	movs	r3, #1
  }
}
 801259e:	4618      	mov	r0, r3
 80125a0:	46bd      	mov	sp, r7
 80125a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a6:	4770      	bx	lr
 80125a8:	e000ed00 	.word	0xe000ed00

080125ac <HAL_DCMI_Init>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Init(DCMI_HandleTypeDef *hdcmi)
{
 80125ac:	b580      	push	{r7, lr}
 80125ae:	b082      	sub	sp, #8
 80125b0:	af00      	add	r7, sp, #0
 80125b2:	6078      	str	r0, [r7, #4]
  /* Check the DCMI peripheral state */
  if (hdcmi == NULL)
 80125b4:	687b      	ldr	r3, [r7, #4]
 80125b6:	2b00      	cmp	r3, #0
 80125b8:	d101      	bne.n	80125be <HAL_DCMI_Init+0x12>
  {
    return HAL_ERROR;
 80125ba:	2301      	movs	r3, #1
 80125bc:	e069      	b.n	8012692 <HAL_DCMI_Init+0xe6>
  assert_param(IS_DCMI_BYTE_SELECT_MODE(hdcmi->Init.ByteSelectMode));
  assert_param(IS_DCMI_BYTE_SELECT_START(hdcmi->Init.ByteSelectStart));
  assert_param(IS_DCMI_LINE_SELECT_MODE(hdcmi->Init.LineSelectMode));
  assert_param(IS_DCMI_LINE_SELECT_START(hdcmi->Init.LineSelectStart));

  if (hdcmi->State == HAL_DCMI_STATE_RESET)
 80125be:	687b      	ldr	r3, [r7, #4]
 80125c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80125c4:	b2db      	uxtb	r3, r3
 80125c6:	2b00      	cmp	r3, #0
 80125c8:	d102      	bne.n	80125d0 <HAL_DCMI_Init+0x24>
    }
    /* Initialize the low level hardware (MSP) */
    hdcmi->MspInitCallback(hdcmi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_DCMI_MspInit(hdcmi);
 80125ca:	6878      	ldr	r0, [r7, #4]
 80125cc:	f000 f87f 	bl	80126ce <HAL_DCMI_MspInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */
  }

  /* Change the DCMI state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80125d0:	687b      	ldr	r3, [r7, #4]
 80125d2:	2202      	movs	r2, #2
 80125d4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  if (hdcmi->Init.ExtendedDataMode != DCMI_EXTEND_DATA_8B)
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	699b      	ldr	r3, [r3, #24]
 80125dc:	2b00      	cmp	r3, #0
 80125de:	d002      	beq.n	80125e6 <HAL_DCMI_Init+0x3a>
  {
    /* Byte select mode must be programmed to the reset value if the extended mode
    is not set to 8-bit data capture on every pixel clock */
    hdcmi->Init.ByteSelectMode = DCMI_BSM_ALL;
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	2200      	movs	r2, #0
 80125e4:	625a      	str	r2, [r3, #36]	@ 0x24
  }
  /* Configures the HS, VS, DE and PC polarity */
  hdcmi->Instance->CR &= ~(DCMI_CR_PCKPOL | DCMI_CR_HSPOL  | DCMI_CR_VSPOL  | DCMI_CR_EDM_0 | \
 80125e6:	687b      	ldr	r3, [r7, #4]
 80125e8:	681b      	ldr	r3, [r3, #0]
 80125ea:	6819      	ldr	r1, [r3, #0]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	681a      	ldr	r2, [r3, #0]
 80125f0:	4b2a      	ldr	r3, [pc, #168]	@ (801269c <HAL_DCMI_Init+0xf0>)
 80125f2:	400b      	ands	r3, r1
 80125f4:	6013      	str	r3, [r2, #0]
                           DCMI_CR_EDM_1  | DCMI_CR_FCRC_0 | DCMI_CR_FCRC_1 | DCMI_CR_JPEG  | \
                           DCMI_CR_ESS | DCMI_CR_BSM_0 | DCMI_CR_BSM_1 | DCMI_CR_OEBS | \
                           DCMI_CR_LSM | DCMI_CR_OELS);

  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	681b      	ldr	r3, [r3, #0]
 80125fa:	6819      	ldr	r1, [r3, #0]
 80125fc:	687b      	ldr	r3, [r7, #4]
 80125fe:	685a      	ldr	r2, [r3, #4]
 8012600:	687b      	ldr	r3, [r7, #4]
 8012602:	695b      	ldr	r3, [r3, #20]
 8012604:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8012606:	687b      	ldr	r3, [r7, #4]
 8012608:	68db      	ldr	r3, [r3, #12]
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 801260a:	431a      	orrs	r2, r3
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 801260c:	687b      	ldr	r3, [r7, #4]
 801260e:	691b      	ldr	r3, [r3, #16]
 8012610:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8012612:	687b      	ldr	r3, [r7, #4]
 8012614:	689b      	ldr	r3, [r3, #8]
                                    hdcmi->Init.VSPolarity  | hdcmi->Init.HSPolarity  | \
 8012616:	431a      	orrs	r2, r3
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8012618:	687b      	ldr	r3, [r7, #4]
 801261a:	699b      	ldr	r3, [r3, #24]
 801261c:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 801261e:	687b      	ldr	r3, [r7, #4]
 8012620:	6a1b      	ldr	r3, [r3, #32]
                                    hdcmi->Init.PCKPolarity | hdcmi->Init.ExtendedDataMode | \
 8012622:	431a      	orrs	r2, r3
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 8012624:	687b      	ldr	r3, [r7, #4]
 8012626:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8012628:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 801262a:	687b      	ldr	r3, [r7, #4]
 801262c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                                    hdcmi->Init.JPEGMode | hdcmi->Init.ByteSelectMode | \
 801262e:	431a      	orrs	r2, r3
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 8012630:	687b      	ldr	r3, [r7, #4]
 8012632:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8012634:	431a      	orrs	r2, r3
                                    hdcmi->Init.LineSelectStart);
 8012636:	687b      	ldr	r3, [r7, #4]
 8012638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                                    hdcmi->Init.ByteSelectStart | hdcmi->Init.LineSelectMode | \
 801263a:	431a      	orrs	r2, r3
  hdcmi->Instance->CR |= (uint32_t)(hdcmi->Init.SynchroMode | hdcmi->Init.CaptureRate | \
 801263c:	687b      	ldr	r3, [r7, #4]
 801263e:	681b      	ldr	r3, [r3, #0]
 8012640:	430a      	orrs	r2, r1
 8012642:	601a      	str	r2, [r3, #0]

  if (hdcmi->Init.SynchroMode == DCMI_SYNCHRO_EMBEDDED)
 8012644:	687b      	ldr	r3, [r7, #4]
 8012646:	685b      	ldr	r3, [r3, #4]
 8012648:	2b10      	cmp	r3, #16
 801264a:	d112      	bne.n	8012672 <HAL_DCMI_Init+0xc6>
  {
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 801264c:	687b      	ldr	r3, [r7, #4]
 801264e:	7f1b      	ldrb	r3, [r3, #28]
 8012650:	461a      	mov	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8012652:	687b      	ldr	r3, [r7, #4]
 8012654:	7f5b      	ldrb	r3, [r3, #29]
 8012656:	021b      	lsls	r3, r3, #8
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8012658:	431a      	orrs	r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 801265a:	687b      	ldr	r3, [r7, #4]
 801265c:	7f9b      	ldrb	r3, [r3, #30]
 801265e:	041b      	lsls	r3, r3, #16
                             ((uint32_t)hdcmi->Init.SyncroCode.LineStartCode << DCMI_ESCR_LSC_Pos) | \
 8012660:	ea42 0103 	orr.w	r1, r2, r3
                             ((uint32_t)hdcmi->Init.SyncroCode.FrameEndCode << DCMI_ESCR_FEC_Pos));
 8012664:	687b      	ldr	r3, [r7, #4]
 8012666:	7fdb      	ldrb	r3, [r3, #31]
 8012668:	061a      	lsls	r2, r3, #24
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 801266a:	687b      	ldr	r3, [r7, #4]
 801266c:	681b      	ldr	r3, [r3, #0]
                             ((uint32_t)hdcmi->Init.SyncroCode.LineEndCode << DCMI_ESCR_LEC_Pos) | \
 801266e:	430a      	orrs	r2, r1
    hdcmi->Instance->ESCR = (((uint32_t)hdcmi->Init.SyncroCode.FrameStartCode)    | \
 8012670:	619a      	str	r2, [r3, #24]

  }

  /* Enable the Line, Vsync, Error and Overrun interrupts */
  __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8012672:	687b      	ldr	r3, [r7, #4]
 8012674:	681b      	ldr	r3, [r3, #0]
 8012676:	68da      	ldr	r2, [r3, #12]
 8012678:	687b      	ldr	r3, [r7, #4]
 801267a:	681b      	ldr	r3, [r3, #0]
 801267c:	f042 021e 	orr.w	r2, r2, #30
 8012680:	60da      	str	r2, [r3, #12]

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 8012682:	687b      	ldr	r3, [r7, #4]
 8012684:	2200      	movs	r2, #0
 8012686:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8012688:	687b      	ldr	r3, [r7, #4]
 801268a:	2201      	movs	r2, #1
 801268c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8012690:	2300      	movs	r3, #0
}
 8012692:	4618      	mov	r0, r3
 8012694:	3708      	adds	r7, #8
 8012696:	46bd      	mov	sp, r7
 8012698:	bd80      	pop	{r7, pc}
 801269a:	bf00      	nop
 801269c:	ffe0f007 	.word	0xffe0f007

080126a0 <HAL_DCMI_DeInit>:
  *                the configuration information for DCMI.
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_DCMI_DeInit(DCMI_HandleTypeDef *hdcmi)
{
 80126a0:	b580      	push	{r7, lr}
 80126a2:	b082      	sub	sp, #8
 80126a4:	af00      	add	r7, sp, #0
 80126a6:	6078      	str	r0, [r7, #4]
  }
  /* De-Initialize the low level hardware (MSP) */
  hdcmi->MspDeInitCallback(hdcmi);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC and DMA */
  HAL_DCMI_MspDeInit(hdcmi);
 80126a8:	6878      	ldr	r0, [r7, #4]
 80126aa:	f000 f81a 	bl	80126e2 <HAL_DCMI_MspDeInit>
#endif /* (USE_HAL_DCMI_REGISTER_CALLBACKS) */

  /* Update error code */
  hdcmi->ErrorCode = HAL_DCMI_ERROR_NONE;
 80126ae:	687b      	ldr	r3, [r7, #4]
 80126b0:	2200      	movs	r2, #0
 80126b2:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Initialize the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_RESET;
 80126b4:	687b      	ldr	r3, [r7, #4]
 80126b6:	2200      	movs	r2, #0
 80126b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 80126bc:	687b      	ldr	r3, [r7, #4]
 80126be:	2200      	movs	r2, #0
 80126c0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80126c4:	2300      	movs	r3, #0
}
 80126c6:	4618      	mov	r0, r3
 80126c8:	3708      	adds	r7, #8
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd80      	pop	{r7, pc}

080126ce <HAL_DCMI_MspInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspInit(DCMI_HandleTypeDef *hdcmi)
{
 80126ce:	b480      	push	{r7}
 80126d0:	b083      	sub	sp, #12
 80126d2:	af00      	add	r7, sp, #0
 80126d4:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspInit could be implemented in the user file
   */
}
 80126d6:	bf00      	nop
 80126d8:	370c      	adds	r7, #12
 80126da:	46bd      	mov	sp, r7
 80126dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126e0:	4770      	bx	lr

080126e2 <HAL_DCMI_MspDeInit>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval None
  */
__weak void HAL_DCMI_MspDeInit(DCMI_HandleTypeDef *hdcmi)
{
 80126e2:	b480      	push	{r7}
 80126e4:	b083      	sub	sp, #12
 80126e6:	af00      	add	r7, sp, #0
 80126e8:	6078      	str	r0, [r7, #4]
  UNUSED(hdcmi);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DCMI_MspDeInit could be implemented in the user file
   */
}
 80126ea:	bf00      	nop
 80126ec:	370c      	adds	r7, #12
 80126ee:	46bd      	mov	sp, r7
 80126f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126f4:	4770      	bx	lr
	...

080126f8 <HAL_DCMI_Start_DMA>:
  * @param  pData     The destination memory Buffer address (LCD Frame buffer).
  * @param  Length    The length of capture to be transferred.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Start_DMA(DCMI_HandleTypeDef *hdcmi, uint32_t DCMI_Mode, uint32_t pData, uint32_t Length)
{
 80126f8:	b580      	push	{r7, lr}
 80126fa:	b088      	sub	sp, #32
 80126fc:	af02      	add	r7, sp, #8
 80126fe:	60f8      	str	r0, [r7, #12]
 8012700:	60b9      	str	r1, [r7, #8]
 8012702:	607a      	str	r2, [r7, #4]
 8012704:	603b      	str	r3, [r7, #0]

  /* Check function parameters */
  assert_param(IS_DCMI_CAPTURE_MODE(DCMI_Mode));

  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8012706:	68fb      	ldr	r3, [r7, #12]
 8012708:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801270c:	2b01      	cmp	r3, #1
 801270e:	d101      	bne.n	8012714 <HAL_DCMI_Start_DMA+0x1c>
 8012710:	2302      	movs	r3, #2
 8012712:	e0ab      	b.n	801286c <HAL_DCMI_Start_DMA+0x174>
 8012714:	68fb      	ldr	r3, [r7, #12]
 8012716:	2201      	movs	r2, #1
 8012718:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	2202      	movs	r2, #2
 8012720:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI by setting DCMIEN bit */
  __HAL_DCMI_ENABLE(hdcmi);
 8012724:	68fb      	ldr	r3, [r7, #12]
 8012726:	681b      	ldr	r3, [r3, #0]
 8012728:	681a      	ldr	r2, [r3, #0]
 801272a:	68fb      	ldr	r3, [r7, #12]
 801272c:	681b      	ldr	r3, [r3, #0]
 801272e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8012732:	601a      	str	r2, [r3, #0]

  /* Configure the DCMI Mode */
  hdcmi->Instance->CR &= ~(DCMI_CR_CM);
 8012734:	68fb      	ldr	r3, [r7, #12]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	681a      	ldr	r2, [r3, #0]
 801273a:	68fb      	ldr	r3, [r7, #12]
 801273c:	681b      	ldr	r3, [r3, #0]
 801273e:	f022 0202 	bic.w	r2, r2, #2
 8012742:	601a      	str	r2, [r3, #0]
  hdcmi->Instance->CR |= (uint32_t)(DCMI_Mode);
 8012744:	68fb      	ldr	r3, [r7, #12]
 8012746:	681b      	ldr	r3, [r3, #0]
 8012748:	6819      	ldr	r1, [r3, #0]
 801274a:	68fb      	ldr	r3, [r7, #12]
 801274c:	681b      	ldr	r3, [r3, #0]
 801274e:	68ba      	ldr	r2, [r7, #8]
 8012750:	430a      	orrs	r2, r1
 8012752:	601a      	str	r2, [r3, #0]

  /* Set the DMA memory0 conversion complete callback */
  hdcmi->DMA_Handle->XferCpltCallback = DCMI_DMAXferCplt;
 8012754:	68fb      	ldr	r3, [r7, #12]
 8012756:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012758:	4a46      	ldr	r2, [pc, #280]	@ (8012874 <HAL_DCMI_Start_DMA+0x17c>)
 801275a:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the DMA error callback */
  hdcmi->DMA_Handle->XferErrorCallback = DCMI_DMAError;
 801275c:	68fb      	ldr	r3, [r7, #12]
 801275e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012760:	4a45      	ldr	r2, [pc, #276]	@ (8012878 <HAL_DCMI_Start_DMA+0x180>)
 8012762:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the dma abort callback */
  hdcmi->DMA_Handle->XferAbortCallback = NULL;
 8012764:	68fb      	ldr	r3, [r7, #12]
 8012766:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012768:	2200      	movs	r2, #0
 801276a:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Reset transfer counters value */
  hdcmi->XferCount = 0;
 801276c:	68fb      	ldr	r3, [r7, #12]
 801276e:	2200      	movs	r2, #0
 8012770:	639a      	str	r2, [r3, #56]	@ 0x38
  hdcmi->XferTransferNumber = 0;
 8012772:	68fb      	ldr	r3, [r7, #12]
 8012774:	2200      	movs	r2, #0
 8012776:	641a      	str	r2, [r3, #64]	@ 0x40
  hdcmi->XferSize = 0;
 8012778:	68fb      	ldr	r3, [r7, #12]
 801277a:	2200      	movs	r2, #0
 801277c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdcmi->pBuffPtr = 0;
 801277e:	68fb      	ldr	r3, [r7, #12]
 8012780:	2200      	movs	r2, #0
 8012782:	645a      	str	r2, [r3, #68]	@ 0x44

  if (Length <= 0xFFFFU)
 8012784:	683b      	ldr	r3, [r7, #0]
 8012786:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801278a:	d219      	bcs.n	80127c0 <HAL_DCMI_Start_DMA+0xc8>
  {
    /* Enable the DMA Stream */
    if (HAL_DMA_Start_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, Length) != HAL_OK)
 801278c:	68fb      	ldr	r3, [r7, #12]
 801278e:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8012790:	68fb      	ldr	r3, [r7, #12]
 8012792:	681b      	ldr	r3, [r3, #0]
 8012794:	3328      	adds	r3, #40	@ 0x28
 8012796:	4619      	mov	r1, r3
 8012798:	683b      	ldr	r3, [r7, #0]
 801279a:	687a      	ldr	r2, [r7, #4]
 801279c:	f001 f81e 	bl	80137dc <HAL_DMA_Start_IT>
 80127a0:	4603      	mov	r3, r0
 80127a2:	2b00      	cmp	r3, #0
 80127a4:	d055      	beq.n	8012852 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 80127a6:	68fb      	ldr	r3, [r7, #12]
 80127a8:	2240      	movs	r2, #64	@ 0x40
 80127aa:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	2201      	movs	r2, #1
 80127b0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 80127b4:	68fb      	ldr	r3, [r7, #12]
 80127b6:	2200      	movs	r2, #0
 80127b8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 80127bc:	2301      	movs	r3, #1
 80127be:	e055      	b.n	801286c <HAL_DCMI_Start_DMA+0x174>
    }
  }
  else /* DCMI_DOUBLE_BUFFER Mode */
  {
    /* Set the DMA memory1 conversion complete callback */
    hdcmi->DMA_Handle->XferM1CpltCallback = DCMI_DMAXferCplt;
 80127c0:	68fb      	ldr	r3, [r7, #12]
 80127c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80127c4:	4a2b      	ldr	r2, [pc, #172]	@ (8012874 <HAL_DCMI_Start_DMA+0x17c>)
 80127c6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize transfer parameters */
    hdcmi->XferCount = 1;
 80127c8:	68fb      	ldr	r3, [r7, #12]
 80127ca:	2201      	movs	r2, #1
 80127cc:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferSize = Length;
 80127ce:	68fb      	ldr	r3, [r7, #12]
 80127d0:	683a      	ldr	r2, [r7, #0]
 80127d2:	63da      	str	r2, [r3, #60]	@ 0x3c
    hdcmi->pBuffPtr = pData;
 80127d4:	68fb      	ldr	r3, [r7, #12]
 80127d6:	687a      	ldr	r2, [r7, #4]
 80127d8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Get the number of buffer */
    while (hdcmi->XferSize > 0xFFFFU)
 80127da:	e009      	b.n	80127f0 <HAL_DCMI_Start_DMA+0xf8>
    {
      hdcmi->XferSize = (hdcmi->XferSize / 2U);
 80127dc:	68fb      	ldr	r3, [r7, #12]
 80127de:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127e0:	085a      	lsrs	r2, r3, #1
 80127e2:	68fb      	ldr	r3, [r7, #12]
 80127e4:	63da      	str	r2, [r3, #60]	@ 0x3c
      hdcmi->XferCount = hdcmi->XferCount * 2U;
 80127e6:	68fb      	ldr	r3, [r7, #12]
 80127e8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127ea:	005a      	lsls	r2, r3, #1
 80127ec:	68fb      	ldr	r3, [r7, #12]
 80127ee:	639a      	str	r2, [r3, #56]	@ 0x38
    while (hdcmi->XferSize > 0xFFFFU)
 80127f0:	68fb      	ldr	r3, [r7, #12]
 80127f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80127f4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80127f8:	d2f0      	bcs.n	80127dc <HAL_DCMI_Start_DMA+0xe4>
    }

    /* Update DCMI counter  and transfer number*/
    hdcmi->XferCount = (hdcmi->XferCount - 2U);
 80127fa:	68fb      	ldr	r3, [r7, #12]
 80127fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80127fe:	1e9a      	subs	r2, r3, #2
 8012800:	68fb      	ldr	r3, [r7, #12]
 8012802:	639a      	str	r2, [r3, #56]	@ 0x38
    hdcmi->XferTransferNumber = hdcmi->XferCount;
 8012804:	68fb      	ldr	r3, [r7, #12]
 8012806:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012808:	68fb      	ldr	r3, [r7, #12]
 801280a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Update second memory address */
    SecondMemAddress = (uint32_t)(pData + (4U * hdcmi->XferSize));
 801280c:	68fb      	ldr	r3, [r7, #12]
 801280e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012810:	009b      	lsls	r3, r3, #2
 8012812:	687a      	ldr	r2, [r7, #4]
 8012814:	4413      	add	r3, r2
 8012816:	617b      	str	r3, [r7, #20]

    /* Start DMA multi buffer transfer */
    if (HAL_DMAEx_MultiBufferStart_IT(hdcmi->DMA_Handle, (uint32_t)&hdcmi->Instance->DR, (uint32_t)pData, SecondMemAddress, hdcmi->XferSize) != HAL_OK)
 8012818:	68fb      	ldr	r3, [r7, #12]
 801281a:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 801281c:	68fb      	ldr	r3, [r7, #12]
 801281e:	681b      	ldr	r3, [r3, #0]
 8012820:	3328      	adds	r3, #40	@ 0x28
 8012822:	4619      	mov	r1, r3
 8012824:	68fb      	ldr	r3, [r7, #12]
 8012826:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012828:	9300      	str	r3, [sp, #0]
 801282a:	697b      	ldr	r3, [r7, #20]
 801282c:	687a      	ldr	r2, [r7, #4]
 801282e:	f003 fd97 	bl	8016360 <HAL_DMAEx_MultiBufferStart_IT>
 8012832:	4603      	mov	r3, r0
 8012834:	2b00      	cmp	r3, #0
 8012836:	d00c      	beq.n	8012852 <HAL_DCMI_Start_DMA+0x15a>
    {
      /* Set Error Code */
      hdcmi->ErrorCode = HAL_DCMI_ERROR_DMA;
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	2240      	movs	r2, #64	@ 0x40
 801283c:	64da      	str	r2, [r3, #76]	@ 0x4c
      /* Change DCMI state */
      hdcmi->State = HAL_DCMI_STATE_READY;
 801283e:	68fb      	ldr	r3, [r7, #12]
 8012840:	2201      	movs	r2, #1
 8012842:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      /* Release Lock */
      __HAL_UNLOCK(hdcmi);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2200      	movs	r2, #0
 801284a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      /* Return function status */
      return HAL_ERROR;
 801284e:	2301      	movs	r3, #1
 8012850:	e00c      	b.n	801286c <HAL_DCMI_Start_DMA+0x174>
    }
  }

  /* Enable Capture */
  hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	681a      	ldr	r2, [r3, #0]
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	681b      	ldr	r3, [r3, #0]
 801285c:	f042 0201 	orr.w	r2, r2, #1
 8012860:	601a      	str	r2, [r3, #0]

  /* Release Lock */
  __HAL_UNLOCK(hdcmi);
 8012862:	68fb      	ldr	r3, [r7, #12]
 8012864:	2200      	movs	r2, #0
 8012866:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 801286a:	2300      	movs	r3, #0
}
 801286c:	4618      	mov	r0, r3
 801286e:	3718      	adds	r7, #24
 8012870:	46bd      	mov	sp, r7
 8012872:	bd80      	pop	{r7, pc}
 8012874:	08012c57 	.word	0x08012c57
 8012878:	08012d7d 	.word	0x08012d7d

0801287c <HAL_DCMI_Stop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Stop(DCMI_HandleTypeDef *hdcmi)
{
 801287c:	b580      	push	{r7, lr}
 801287e:	b084      	sub	sp, #16
 8012880:	af00      	add	r7, sp, #0
 8012882:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8012884:	4b2b      	ldr	r3, [pc, #172]	@ (8012934 <HAL_DCMI_Stop+0xb8>)
 8012886:	681b      	ldr	r3, [r3, #0]
 8012888:	4a2b      	ldr	r2, [pc, #172]	@ (8012938 <HAL_DCMI_Stop+0xbc>)
 801288a:	fba2 2303 	umull	r2, r3, r2, r3
 801288e:	0a5b      	lsrs	r3, r3, #9
 8012890:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012894:	fb02 f303 	mul.w	r3, r2, r3
 8012898:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801289a:	2300      	movs	r3, #0
 801289c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 801289e:	687b      	ldr	r3, [r7, #4]
 80128a0:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80128a4:	2b01      	cmp	r3, #1
 80128a6:	d101      	bne.n	80128ac <HAL_DCMI_Stop+0x30>
 80128a8:	2302      	movs	r3, #2
 80128aa:	e03f      	b.n	801292c <HAL_DCMI_Stop+0xb0>
 80128ac:	687b      	ldr	r3, [r7, #4]
 80128ae:	2201      	movs	r2, #1
 80128b0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	2202      	movs	r2, #2
 80128b8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable Capture */
  hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	681b      	ldr	r3, [r3, #0]
 80128c0:	681a      	ldr	r2, [r3, #0]
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	681b      	ldr	r3, [r3, #0]
 80128c6:	f022 0201 	bic.w	r2, r2, #1
 80128ca:	601a      	str	r2, [r3, #0]

  /* Check if the DCMI capture effectively disabled */
  do
  {
    count-- ;
 80128cc:	68fb      	ldr	r3, [r7, #12]
 80128ce:	3b01      	subs	r3, #1
 80128d0:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 80128d2:	68fb      	ldr	r3, [r7, #12]
 80128d4:	2b00      	cmp	r3, #0
 80128d6:	d108      	bne.n	80128ea <HAL_DCMI_Stop+0x6e>
    {
      /* Update error code */
      hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80128d8:	687b      	ldr	r3, [r7, #4]
 80128da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80128dc:	f043 0220 	orr.w	r2, r3, #32
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	64da      	str	r2, [r3, #76]	@ 0x4c

      status = HAL_TIMEOUT;
 80128e4:	2303      	movs	r3, #3
 80128e6:	72fb      	strb	r3, [r7, #11]
      break;
 80128e8:	e006      	b.n	80128f8 <HAL_DCMI_Stop+0x7c>
    }
  }
  while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80128ea:	687b      	ldr	r3, [r7, #4]
 80128ec:	681b      	ldr	r3, [r3, #0]
 80128ee:	681b      	ldr	r3, [r3, #0]
 80128f0:	f003 0301 	and.w	r3, r3, #1
 80128f4:	2b00      	cmp	r3, #0
 80128f6:	d1e9      	bne.n	80128cc <HAL_DCMI_Stop+0x50>

  /* Disable the DCMI */
  __HAL_DCMI_DISABLE(hdcmi);
 80128f8:	687b      	ldr	r3, [r7, #4]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	681a      	ldr	r2, [r3, #0]
 80128fe:	687b      	ldr	r3, [r7, #4]
 8012900:	681b      	ldr	r3, [r3, #0]
 8012902:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8012906:	601a      	str	r2, [r3, #0]

  /* Disable the DMA */
  (void)HAL_DMA_Abort(hdcmi->DMA_Handle);
 8012908:	687b      	ldr	r3, [r7, #4]
 801290a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801290c:	4618      	mov	r0, r3
 801290e:	f001 f9cf 	bl	8013cb0 <HAL_DMA_Abort>

  /* Update error code */
  hdcmi->ErrorCode |= HAL_DCMI_ERROR_NONE;
 8012912:	687b      	ldr	r3, [r7, #4]
 8012914:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8012916:	687b      	ldr	r3, [r7, #4]
 8012918:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Change DCMI state */
  hdcmi->State = HAL_DCMI_STATE_READY;
 801291a:	687b      	ldr	r3, [r7, #4]
 801291c:	2201      	movs	r2, #1
 801291e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8012922:	687b      	ldr	r3, [r7, #4]
 8012924:	2200      	movs	r2, #0
 8012926:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 801292a:	7afb      	ldrb	r3, [r7, #11]
}
 801292c:	4618      	mov	r0, r3
 801292e:	3710      	adds	r7, #16
 8012930:	46bd      	mov	sp, r7
 8012932:	bd80      	pop	{r7, pc}
 8012934:	24000400 	.word	0x24000400
 8012938:	10624dd3 	.word	0x10624dd3

0801293c <HAL_DCMI_Suspend>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Suspend(DCMI_HandleTypeDef *hdcmi)
{
 801293c:	b480      	push	{r7}
 801293e:	b085      	sub	sp, #20
 8012940:	af00      	add	r7, sp, #0
 8012942:	6078      	str	r0, [r7, #4]
  uint32_t count = HAL_TIMEOUT_DCMI_STOP * (SystemCoreClock / 8U / 1000U);
 8012944:	4b27      	ldr	r3, [pc, #156]	@ (80129e4 <HAL_DCMI_Suspend+0xa8>)
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a27      	ldr	r2, [pc, #156]	@ (80129e8 <HAL_DCMI_Suspend+0xac>)
 801294a:	fba2 2303 	umull	r2, r3, r2, r3
 801294e:	0a5b      	lsrs	r3, r3, #9
 8012950:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8012954:	fb02 f303 	mul.w	r3, r2, r3
 8012958:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801295a:	2300      	movs	r3, #0
 801295c:	72fb      	strb	r3, [r7, #11]

  /* Process locked */
  __HAL_LOCK(hdcmi);
 801295e:	687b      	ldr	r3, [r7, #4]
 8012960:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012964:	2b01      	cmp	r3, #1
 8012966:	d101      	bne.n	801296c <HAL_DCMI_Suspend+0x30>
 8012968:	2302      	movs	r3, #2
 801296a:	e034      	b.n	80129d6 <HAL_DCMI_Suspend+0x9a>
 801296c:	687b      	ldr	r3, [r7, #4]
 801296e:	2201      	movs	r2, #1
 8012970:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_BUSY)
 8012974:	687b      	ldr	r3, [r7, #4]
 8012976:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 801297a:	b2db      	uxtb	r3, r3
 801297c:	2b02      	cmp	r3, #2
 801297e:	d125      	bne.n	80129cc <HAL_DCMI_Suspend+0x90>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_SUSPENDED;
 8012980:	687b      	ldr	r3, [r7, #4]
 8012982:	2205      	movs	r2, #5
 8012984:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Disable Capture */
    hdcmi->Instance->CR &= ~(DCMI_CR_CAPTURE);
 8012988:	687b      	ldr	r3, [r7, #4]
 801298a:	681b      	ldr	r3, [r3, #0]
 801298c:	681a      	ldr	r2, [r3, #0]
 801298e:	687b      	ldr	r3, [r7, #4]
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	f022 0201 	bic.w	r2, r2, #1
 8012996:	601a      	str	r2, [r3, #0]

    /* Check if the DCMI capture effectively disabled */
    do
    {
      count-- ;
 8012998:	68fb      	ldr	r3, [r7, #12]
 801299a:	3b01      	subs	r3, #1
 801299c:	60fb      	str	r3, [r7, #12]
      if (count == 0U)
 801299e:	68fb      	ldr	r3, [r7, #12]
 80129a0:	2b00      	cmp	r3, #0
 80129a2:	d10c      	bne.n	80129be <HAL_DCMI_Suspend+0x82>
      {
        /* Update error code */
        hdcmi->ErrorCode |= HAL_DCMI_ERROR_TIMEOUT;
 80129a4:	687b      	ldr	r3, [r7, #4]
 80129a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80129a8:	f043 0220 	orr.w	r2, r3, #32
 80129ac:	687b      	ldr	r3, [r7, #4]
 80129ae:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Change DCMI state */
        hdcmi->State = HAL_DCMI_STATE_READY;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2201      	movs	r2, #1
 80129b4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        status = HAL_TIMEOUT;
 80129b8:	2303      	movs	r3, #3
 80129ba:	72fb      	strb	r3, [r7, #11]
        break;
 80129bc:	e006      	b.n	80129cc <HAL_DCMI_Suspend+0x90>
      }
    }
    while ((hdcmi->Instance->CR & DCMI_CR_CAPTURE) != 0U);
 80129be:	687b      	ldr	r3, [r7, #4]
 80129c0:	681b      	ldr	r3, [r3, #0]
 80129c2:	681b      	ldr	r3, [r3, #0]
 80129c4:	f003 0301 	and.w	r3, r3, #1
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d1e5      	bne.n	8012998 <HAL_DCMI_Suspend+0x5c>
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	2200      	movs	r2, #0
 80129d0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return status;
 80129d4:	7afb      	ldrb	r3, [r7, #11]
}
 80129d6:	4618      	mov	r0, r3
 80129d8:	3714      	adds	r7, #20
 80129da:	46bd      	mov	sp, r7
 80129dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80129e0:	4770      	bx	lr
 80129e2:	bf00      	nop
 80129e4:	24000400 	.word	0x24000400
 80129e8:	10624dd3 	.word	0x10624dd3

080129ec <HAL_DCMI_Resume>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_Resume(DCMI_HandleTypeDef *hdcmi)
{
 80129ec:	b480      	push	{r7}
 80129ee:	b083      	sub	sp, #12
 80129f0:	af00      	add	r7, sp, #0
 80129f2:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdcmi);
 80129f4:	687b      	ldr	r3, [r7, #4]
 80129f6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80129fa:	2b01      	cmp	r3, #1
 80129fc:	d101      	bne.n	8012a02 <HAL_DCMI_Resume+0x16>
 80129fe:	2302      	movs	r3, #2
 8012a00:	e01a      	b.n	8012a38 <HAL_DCMI_Resume+0x4c>
 8012a02:	687b      	ldr	r3, [r7, #4]
 8012a04:	2201      	movs	r2, #1
 8012a06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if (hdcmi->State == HAL_DCMI_STATE_SUSPENDED)
 8012a0a:	687b      	ldr	r3, [r7, #4]
 8012a0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8012a10:	b2db      	uxtb	r3, r3
 8012a12:	2b05      	cmp	r3, #5
 8012a14:	d10b      	bne.n	8012a2e <HAL_DCMI_Resume+0x42>
  {
    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_BUSY;
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	2202      	movs	r2, #2
 8012a1a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Enable Capture */
    hdcmi->Instance->CR |= DCMI_CR_CAPTURE;
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	681b      	ldr	r3, [r3, #0]
 8012a22:	681a      	ldr	r2, [r3, #0]
 8012a24:	687b      	ldr	r3, [r7, #4]
 8012a26:	681b      	ldr	r3, [r3, #0]
 8012a28:	f042 0201 	orr.w	r2, r2, #1
 8012a2c:	601a      	str	r2, [r3, #0]
  }
  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	2200      	movs	r2, #0
 8012a32:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Return function status */
  return HAL_OK;
 8012a36:	2300      	movs	r3, #0
}
 8012a38:	4618      	mov	r0, r3
 8012a3a:	370c      	adds	r7, #12
 8012a3c:	46bd      	mov	sp, r7
 8012a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a42:	4770      	bx	lr

08012a44 <HAL_DCMI_IRQHandler>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for the DCMI.
  * @retval None
  */
void HAL_DCMI_IRQHandler(DCMI_HandleTypeDef *hdcmi)
{
 8012a44:	b580      	push	{r7, lr}
 8012a46:	b084      	sub	sp, #16
 8012a48:	af00      	add	r7, sp, #0
 8012a4a:	6078      	str	r0, [r7, #4]
  uint32_t isr_value = READ_REG(hdcmi->Instance->MISR);
 8012a4c:	687b      	ldr	r3, [r7, #4]
 8012a4e:	681b      	ldr	r3, [r3, #0]
 8012a50:	691b      	ldr	r3, [r3, #16]
 8012a52:	60fb      	str	r3, [r7, #12]

  /* Synchronization error interrupt management *******************************/
  if ((isr_value & DCMI_FLAG_ERRRI) == DCMI_FLAG_ERRRI)
 8012a54:	68fb      	ldr	r3, [r7, #12]
 8012a56:	f003 0304 	and.w	r3, r3, #4
 8012a5a:	2b00      	cmp	r3, #0
 8012a5c:	d016      	beq.n	8012a8c <HAL_DCMI_IRQHandler+0x48>
  {
    /* Clear the Synchronization error flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_ERRRI);
 8012a5e:	687b      	ldr	r3, [r7, #4]
 8012a60:	681b      	ldr	r3, [r3, #0]
 8012a62:	2204      	movs	r2, #4
 8012a64:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_SYNC;
 8012a66:	687b      	ldr	r3, [r7, #4]
 8012a68:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a6a:	f043 0202 	orr.w	r2, r3, #2
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8012a72:	687b      	ldr	r3, [r7, #4]
 8012a74:	2204      	movs	r2, #4
 8012a76:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the synchronization error callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8012a7a:	687b      	ldr	r3, [r7, #4]
 8012a7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a7e:	4a31      	ldr	r2, [pc, #196]	@ (8012b44 <HAL_DCMI_IRQHandler+0x100>)
 8012a80:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8012a82:	687b      	ldr	r3, [r7, #4]
 8012a84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012a86:	4618      	mov	r0, r3
 8012a88:	f001 fc30 	bl	80142ec <HAL_DMA_Abort_IT>
  }
  /* Overflow interrupt management ********************************************/
  if ((isr_value & DCMI_FLAG_OVRRI) == DCMI_FLAG_OVRRI)
 8012a8c:	68fb      	ldr	r3, [r7, #12]
 8012a8e:	f003 0302 	and.w	r3, r3, #2
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d016      	beq.n	8012ac4 <HAL_DCMI_IRQHandler+0x80>
  {
    /* Clear the Overflow flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_OVRRI);
 8012a96:	687b      	ldr	r3, [r7, #4]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	2202      	movs	r2, #2
 8012a9c:	615a      	str	r2, [r3, #20]

    /* Update error code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_OVR;
 8012a9e:	687b      	ldr	r3, [r7, #4]
 8012aa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012aa2:	f043 0201 	orr.w	r2, r3, #1
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Change DCMI state */
    hdcmi->State = HAL_DCMI_STATE_ERROR;
 8012aaa:	687b      	ldr	r3, [r7, #4]
 8012aac:	2204      	movs	r2, #4
 8012aae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set the overflow callback */
    hdcmi->DMA_Handle->XferAbortCallback = DCMI_DMAError;
 8012ab2:	687b      	ldr	r3, [r7, #4]
 8012ab4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ab6:	4a23      	ldr	r2, [pc, #140]	@ (8012b44 <HAL_DCMI_IRQHandler+0x100>)
 8012ab8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Abort the DMA Transfer */
    (void)HAL_DMA_Abort_IT(hdcmi->DMA_Handle);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012abe:	4618      	mov	r0, r3
 8012ac0:	f001 fc14 	bl	80142ec <HAL_DMA_Abort_IT>
  }
  /* Line Interrupt management ************************************************/
  if ((isr_value & DCMI_FLAG_LINERI) == DCMI_FLAG_LINERI)
 8012ac4:	68fb      	ldr	r3, [r7, #12]
 8012ac6:	f003 0310 	and.w	r3, r3, #16
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	d006      	beq.n	8012adc <HAL_DCMI_IRQHandler+0x98>
  {
    /* Clear the Line interrupt flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_LINERI);
 8012ace:	687b      	ldr	r3, [r7, #4]
 8012ad0:	681b      	ldr	r3, [r3, #0]
 8012ad2:	2210      	movs	r2, #16
 8012ad4:	615a      	str	r2, [r3, #20]
    /* Line interrupt Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI line event callback*/
    hdcmi->LineEventCallback(hdcmi);
#else
    HAL_DCMI_LineEventCallback(hdcmi);
 8012ad6:	6878      	ldr	r0, [r7, #4]
 8012ad8:	f7fb ff66 	bl	800e9a8 <HAL_DCMI_LineEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* VSYNC interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_VSYNCRI) == DCMI_FLAG_VSYNCRI)
 8012adc:	68fb      	ldr	r3, [r7, #12]
 8012ade:	f003 0308 	and.w	r3, r3, #8
 8012ae2:	2b00      	cmp	r3, #0
 8012ae4:	d006      	beq.n	8012af4 <HAL_DCMI_IRQHandler+0xb0>
  {
    /* Clear the VSYNC flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_VSYNCRI);
 8012ae6:	687b      	ldr	r3, [r7, #4]
 8012ae8:	681b      	ldr	r3, [r3, #0]
 8012aea:	2208      	movs	r2, #8
 8012aec:	615a      	str	r2, [r3, #20]
    /* VSYNC Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI vsync event callback*/
    hdcmi->VsyncEventCallback(hdcmi);
#else
    HAL_DCMI_VsyncEventCallback(hdcmi);
 8012aee:	6878      	ldr	r0, [r7, #4]
 8012af0:	f7fb ff70 	bl	800e9d4 <HAL_DCMI_VsyncEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
  /* FRAME interrupt management ***********************************************/
  if ((isr_value & DCMI_FLAG_FRAMERI) == DCMI_FLAG_FRAMERI)
 8012af4:	68fb      	ldr	r3, [r7, #12]
 8012af6:	f003 0301 	and.w	r3, r3, #1
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d01d      	beq.n	8012b3a <HAL_DCMI_IRQHandler+0xf6>
  {
    /* When snapshot mode, disable Vsync, Error and Overrun interrupts */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8012afe:	687b      	ldr	r3, [r7, #4]
 8012b00:	681b      	ldr	r3, [r3, #0]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	f003 0302 	and.w	r3, r3, #2
 8012b08:	2b02      	cmp	r3, #2
 8012b0a:	d107      	bne.n	8012b1c <HAL_DCMI_IRQHandler+0xd8>
    {
      /* Disable the Line, Vsync, Error and Overrun interrupts */
      __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_LINE | DCMI_IT_VSYNC | DCMI_IT_ERR | DCMI_IT_OVR);
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	681b      	ldr	r3, [r3, #0]
 8012b10:	68da      	ldr	r2, [r3, #12]
 8012b12:	687b      	ldr	r3, [r7, #4]
 8012b14:	681b      	ldr	r3, [r3, #0]
 8012b16:	f022 021e 	bic.w	r2, r2, #30
 8012b1a:	60da      	str	r2, [r3, #12]
    }

    /* Disable the Frame interrupt */
    __HAL_DCMI_DISABLE_IT(hdcmi, DCMI_IT_FRAME);
 8012b1c:	687b      	ldr	r3, [r7, #4]
 8012b1e:	681b      	ldr	r3, [r3, #0]
 8012b20:	68da      	ldr	r2, [r3, #12]
 8012b22:	687b      	ldr	r3, [r7, #4]
 8012b24:	681b      	ldr	r3, [r3, #0]
 8012b26:	f022 0201 	bic.w	r2, r2, #1
 8012b2a:	60da      	str	r2, [r3, #12]

    /* Clear the End of Frame flag */
    __HAL_DCMI_CLEAR_FLAG(hdcmi, DCMI_FLAG_FRAMERI);
 8012b2c:	687b      	ldr	r3, [r7, #4]
 8012b2e:	681b      	ldr	r3, [r3, #0]
 8012b30:	2201      	movs	r2, #1
 8012b32:	615a      	str	r2, [r3, #20]
    /* Frame Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
    /*Call registered DCMI frame event callback*/
    hdcmi->FrameEventCallback(hdcmi);
#else
    HAL_DCMI_FrameEventCallback(hdcmi);
 8012b34:	6878      	ldr	r0, [r7, #4]
 8012b36:	f7fb ff42 	bl	800e9be <HAL_DCMI_FrameEventCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
  }
}
 8012b3a:	bf00      	nop
 8012b3c:	3710      	adds	r7, #16
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	08012d7d 	.word	0x08012d7d

08012b48 <HAL_DCMI_ConfigCrop>:
  * @param  X0    DCMI window X offset
  * @param  Y0    DCMI window Y offset
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_ConfigCrop(DCMI_HandleTypeDef *hdcmi, uint32_t X0, uint32_t Y0, uint32_t XSize, uint32_t YSize)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b085      	sub	sp, #20
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	60f8      	str	r0, [r7, #12]
 8012b50:	60b9      	str	r1, [r7, #8]
 8012b52:	607a      	str	r2, [r7, #4]
 8012b54:	603b      	str	r3, [r7, #0]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8012b56:	68fb      	ldr	r3, [r7, #12]
 8012b58:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012b5c:	2b01      	cmp	r3, #1
 8012b5e:	d101      	bne.n	8012b64 <HAL_DCMI_ConfigCrop+0x1c>
 8012b60:	2302      	movs	r3, #2
 8012b62:	e01e      	b.n	8012ba2 <HAL_DCMI_ConfigCrop+0x5a>
 8012b64:	68fb      	ldr	r3, [r7, #12]
 8012b66:	2201      	movs	r2, #1
 8012b68:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8012b6c:	68fb      	ldr	r3, [r7, #12]
 8012b6e:	2202      	movs	r2, #2
 8012b70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
  assert_param(IS_DCMI_WINDOW_HEIGHT(Y0));
  assert_param(IS_DCMI_WINDOW_COORDINATE(XSize));
  assert_param(IS_DCMI_WINDOW_COORDINATE(YSize));

  /* Configure CROP */
  hdcmi->Instance->CWSIZER = (XSize | (YSize << DCMI_CWSIZE_VLINE_Pos));
 8012b74:	69bb      	ldr	r3, [r7, #24]
 8012b76:	0419      	lsls	r1, r3, #16
 8012b78:	68fb      	ldr	r3, [r7, #12]
 8012b7a:	681b      	ldr	r3, [r3, #0]
 8012b7c:	683a      	ldr	r2, [r7, #0]
 8012b7e:	430a      	orrs	r2, r1
 8012b80:	625a      	str	r2, [r3, #36]	@ 0x24
  hdcmi->Instance->CWSTRTR = (X0 | (Y0 << DCMI_CWSTRT_VST_Pos));
 8012b82:	687b      	ldr	r3, [r7, #4]
 8012b84:	0419      	lsls	r1, r3, #16
 8012b86:	68fb      	ldr	r3, [r7, #12]
 8012b88:	681b      	ldr	r3, [r3, #0]
 8012b8a:	68ba      	ldr	r2, [r7, #8]
 8012b8c:	430a      	orrs	r2, r1
 8012b8e:	621a      	str	r2, [r3, #32]

  /* Initialize the DCMI state*/
  hdcmi->State  = HAL_DCMI_STATE_READY;
 8012b90:	68fb      	ldr	r3, [r7, #12]
 8012b92:	2201      	movs	r2, #1
 8012b94:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8012b98:	68fb      	ldr	r3, [r7, #12]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8012ba0:	2300      	movs	r3, #0
}
 8012ba2:	4618      	mov	r0, r3
 8012ba4:	3714      	adds	r7, #20
 8012ba6:	46bd      	mov	sp, r7
 8012ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bac:	4770      	bx	lr

08012bae <HAL_DCMI_DisableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_DisableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8012bae:	b480      	push	{r7}
 8012bb0:	b083      	sub	sp, #12
 8012bb2:	af00      	add	r7, sp, #0
 8012bb4:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8012bb6:	687b      	ldr	r3, [r7, #4]
 8012bb8:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012bbc:	2b01      	cmp	r3, #1
 8012bbe:	d101      	bne.n	8012bc4 <HAL_DCMI_DisableCrop+0x16>
 8012bc0:	2302      	movs	r3, #2
 8012bc2:	e018      	b.n	8012bf6 <HAL_DCMI_DisableCrop+0x48>
 8012bc4:	687b      	ldr	r3, [r7, #4]
 8012bc6:	2201      	movs	r2, #1
 8012bc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2202      	movs	r2, #2
 8012bd0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Disable DCMI Crop feature */
  hdcmi->Instance->CR &= ~(uint32_t)DCMI_CR_CROP;
 8012bd4:	687b      	ldr	r3, [r7, #4]
 8012bd6:	681b      	ldr	r3, [r3, #0]
 8012bd8:	681a      	ldr	r2, [r3, #0]
 8012bda:	687b      	ldr	r3, [r7, #4]
 8012bdc:	681b      	ldr	r3, [r3, #0]
 8012bde:	f022 0204 	bic.w	r2, r2, #4
 8012be2:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8012be4:	687b      	ldr	r3, [r7, #4]
 8012be6:	2201      	movs	r2, #1
 8012be8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8012bec:	687b      	ldr	r3, [r7, #4]
 8012bee:	2200      	movs	r2, #0
 8012bf0:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8012bf4:	2300      	movs	r3, #0
}
 8012bf6:	4618      	mov	r0, r3
 8012bf8:	370c      	adds	r7, #12
 8012bfa:	46bd      	mov	sp, r7
 8012bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c00:	4770      	bx	lr

08012c02 <HAL_DCMI_EnableCrop>:
  * @param  hdcmi pointer to a DCMI_HandleTypeDef structure that contains
  *                the configuration information for DCMI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DCMI_EnableCrop(DCMI_HandleTypeDef *hdcmi)
{
 8012c02:	b480      	push	{r7}
 8012c04:	b083      	sub	sp, #12
 8012c06:	af00      	add	r7, sp, #0
 8012c08:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hdcmi);
 8012c0a:	687b      	ldr	r3, [r7, #4]
 8012c0c:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8012c10:	2b01      	cmp	r3, #1
 8012c12:	d101      	bne.n	8012c18 <HAL_DCMI_EnableCrop+0x16>
 8012c14:	2302      	movs	r3, #2
 8012c16:	e018      	b.n	8012c4a <HAL_DCMI_EnableCrop+0x48>
 8012c18:	687b      	ldr	r3, [r7, #4]
 8012c1a:	2201      	movs	r2, #1
 8012c1c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  /* Lock the DCMI peripheral state */
  hdcmi->State = HAL_DCMI_STATE_BUSY;
 8012c20:	687b      	ldr	r3, [r7, #4]
 8012c22:	2202      	movs	r2, #2
 8012c24:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Enable DCMI Crop feature */
  hdcmi->Instance->CR |= (uint32_t)DCMI_CR_CROP;
 8012c28:	687b      	ldr	r3, [r7, #4]
 8012c2a:	681b      	ldr	r3, [r3, #0]
 8012c2c:	681a      	ldr	r2, [r3, #0]
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	681b      	ldr	r3, [r3, #0]
 8012c32:	f042 0204 	orr.w	r2, r2, #4
 8012c36:	601a      	str	r2, [r3, #0]

  /* Change the DCMI state*/
  hdcmi->State = HAL_DCMI_STATE_READY;
 8012c38:	687b      	ldr	r3, [r7, #4]
 8012c3a:	2201      	movs	r2, #1
 8012c3c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Process Unlocked */
  __HAL_UNLOCK(hdcmi);
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	2200      	movs	r2, #0
 8012c44:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8012c48:	2300      	movs	r3, #0
}
 8012c4a:	4618      	mov	r0, r3
 8012c4c:	370c      	adds	r7, #12
 8012c4e:	46bd      	mov	sp, r7
 8012c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c54:	4770      	bx	lr

08012c56 <DCMI_DMAXferCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8012c56:	b580      	push	{r7, lr}
 8012c58:	b084      	sub	sp, #16
 8012c5a:	af00      	add	r7, sp, #0
 8012c5c:	6078      	str	r0, [r7, #4]
  uint32_t tmp ;

  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c62:	60fb      	str	r3, [r7, #12]

  if (hdcmi->XferCount != 0U)
 8012c64:	68fb      	ldr	r3, [r7, #12]
 8012c66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d043      	beq.n	8012cf4 <DCMI_DMAXferCplt+0x9e>
  {
    /* Update memory 0 address location */
    tmp = ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR) & DMA_SxCR_CT);
 8012c6c:	68fb      	ldr	r3, [r7, #12]
 8012c6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c70:	681b      	ldr	r3, [r3, #0]
 8012c72:	681b      	ldr	r3, [r3, #0]
 8012c74:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012c78:	60bb      	str	r3, [r7, #8]
    if (((hdcmi->XferCount % 2U) == 0U) && (tmp != 0U))
 8012c7a:	68fb      	ldr	r3, [r7, #12]
 8012c7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012c7e:	f003 0301 	and.w	r3, r3, #1
 8012c82:	2b00      	cmp	r3, #0
 8012c84:	d118      	bne.n	8012cb8 <DCMI_DMAXferCplt+0x62>
 8012c86:	68bb      	ldr	r3, [r7, #8]
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d015      	beq.n	8012cb8 <DCMI_DMAXferCplt+0x62>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012c90:	681b      	ldr	r3, [r3, #0]
 8012c92:	68db      	ldr	r3, [r3, #12]
 8012c94:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY0);
 8012c96:	68fb      	ldr	r3, [r7, #12]
 8012c98:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8012c9a:	68fb      	ldr	r3, [r7, #12]
 8012c9c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012c9e:	00da      	lsls	r2, r3, #3
 8012ca0:	68bb      	ldr	r3, [r7, #8]
 8012ca2:	4413      	add	r3, r2
 8012ca4:	2200      	movs	r2, #0
 8012ca6:	4619      	mov	r1, r3
 8012ca8:	f003 feb8 	bl	8016a1c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cb0:	1e5a      	subs	r2, r3, #1
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	639a      	str	r2, [r3, #56]	@ 0x38
 8012cb6:	e044      	b.n	8012d42 <DCMI_DMAXferCplt+0xec>
    }
    /* Update memory 1 address location */
    else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8012cb8:	68fb      	ldr	r3, [r7, #12]
 8012cba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012cbc:	681b      	ldr	r3, [r3, #0]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012cc4:	2b00      	cmp	r3, #0
 8012cc6:	d13c      	bne.n	8012d42 <DCMI_DMAXferCplt+0xec>
    {
      tmp = ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR;
 8012cc8:	68fb      	ldr	r3, [r7, #12]
 8012cca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ccc:	681b      	ldr	r3, [r3, #0]
 8012cce:	691b      	ldr	r3, [r3, #16]
 8012cd0:	60bb      	str	r3, [r7, #8]
      (void)HAL_DMAEx_ChangeMemory(hdcmi->DMA_Handle, (tmp + (8U * hdcmi->XferSize)), MEMORY1);
 8012cd2:	68fb      	ldr	r3, [r7, #12]
 8012cd4:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8012cd6:	68fb      	ldr	r3, [r7, #12]
 8012cd8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012cda:	00da      	lsls	r2, r3, #3
 8012cdc:	68bb      	ldr	r3, [r7, #8]
 8012cde:	4413      	add	r3, r2
 8012ce0:	2201      	movs	r2, #1
 8012ce2:	4619      	mov	r1, r3
 8012ce4:	f003 fe9a 	bl	8016a1c <HAL_DMAEx_ChangeMemory>
      hdcmi->XferCount--;
 8012ce8:	68fb      	ldr	r3, [r7, #12]
 8012cea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012cec:	1e5a      	subs	r2, r3, #1
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	639a      	str	r2, [r3, #56]	@ 0x38
 8012cf2:	e026      	b.n	8012d42 <DCMI_DMAXferCplt+0xec>
    {
      /* Nothing to do */
    }
  }
  /* Update memory 0 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) != 0U)
 8012cf4:	68fb      	ldr	r3, [r7, #12]
 8012cf6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012cf8:	681b      	ldr	r3, [r3, #0]
 8012cfa:	681b      	ldr	r3, [r3, #0]
 8012cfc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012d00:	2b00      	cmp	r3, #0
 8012d02:	d006      	beq.n	8012d12 <DCMI_DMAXferCplt+0xbc>
  {
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M0AR = hdcmi->pBuffPtr;
 8012d04:	68fb      	ldr	r3, [r7, #12]
 8012d06:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d08:	681b      	ldr	r3, [r3, #0]
 8012d0a:	68fa      	ldr	r2, [r7, #12]
 8012d0c:	6c52      	ldr	r2, [r2, #68]	@ 0x44
 8012d0e:	60da      	str	r2, [r3, #12]
 8012d10:	e017      	b.n	8012d42 <DCMI_DMAXferCplt+0xec>
  }
  /* Update memory 1 address location */
  else if ((((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->CR & DMA_SxCR_CT) == 0U)
 8012d12:	68fb      	ldr	r3, [r7, #12]
 8012d14:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d16:	681b      	ldr	r3, [r3, #0]
 8012d18:	681b      	ldr	r3, [r3, #0]
 8012d1a:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8012d1e:	2b00      	cmp	r3, #0
 8012d20:	d10f      	bne.n	8012d42 <DCMI_DMAXferCplt+0xec>
  {
    tmp = hdcmi->pBuffPtr;
 8012d22:	68fb      	ldr	r3, [r7, #12]
 8012d24:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012d26:	60bb      	str	r3, [r7, #8]
    ((DMA_Stream_TypeDef *)(hdcmi->DMA_Handle->Instance))->M1AR = (tmp + (4U * hdcmi->XferSize));
 8012d28:	68fb      	ldr	r3, [r7, #12]
 8012d2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012d2c:	0099      	lsls	r1, r3, #2
 8012d2e:	68fb      	ldr	r3, [r7, #12]
 8012d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d32:	681b      	ldr	r3, [r3, #0]
 8012d34:	68ba      	ldr	r2, [r7, #8]
 8012d36:	440a      	add	r2, r1
 8012d38:	611a      	str	r2, [r3, #16]
    hdcmi->XferCount = hdcmi->XferTransferNumber;
 8012d3a:	68fb      	ldr	r3, [r7, #12]
 8012d3c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8012d3e:	68fb      	ldr	r3, [r7, #12]
 8012d40:	639a      	str	r2, [r3, #56]	@ 0x38
  {
    /* Nothing to do */
  }

  /* Check if the frame is transferred */
  if (hdcmi->XferCount == hdcmi->XferTransferNumber)
 8012d42:	68fb      	ldr	r3, [r7, #12]
 8012d44:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012d46:	68fb      	ldr	r3, [r7, #12]
 8012d48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012d4a:	429a      	cmp	r2, r3
 8012d4c:	d112      	bne.n	8012d74 <DCMI_DMAXferCplt+0x11e>
  {
    /* Enable the Frame interrupt */
    __HAL_DCMI_ENABLE_IT(hdcmi, DCMI_IT_FRAME);
 8012d4e:	68fb      	ldr	r3, [r7, #12]
 8012d50:	681b      	ldr	r3, [r3, #0]
 8012d52:	68da      	ldr	r2, [r3, #12]
 8012d54:	68fb      	ldr	r3, [r7, #12]
 8012d56:	681b      	ldr	r3, [r3, #0]
 8012d58:	f042 0201 	orr.w	r2, r2, #1
 8012d5c:	60da      	str	r2, [r3, #12]

    /* When snapshot mode, set dcmi state to ready */
    if ((hdcmi->Instance->CR & DCMI_CR_CM) == DCMI_MODE_SNAPSHOT)
 8012d5e:	68fb      	ldr	r3, [r7, #12]
 8012d60:	681b      	ldr	r3, [r3, #0]
 8012d62:	681b      	ldr	r3, [r3, #0]
 8012d64:	f003 0302 	and.w	r3, r3, #2
 8012d68:	2b02      	cmp	r3, #2
 8012d6a:	d103      	bne.n	8012d74 <DCMI_DMAXferCplt+0x11e>
    {
      hdcmi->State = HAL_DCMI_STATE_READY;
 8012d6c:	68fb      	ldr	r3, [r7, #12]
 8012d6e:	2201      	movs	r2, #1
 8012d70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    }
  }
}
 8012d74:	bf00      	nop
 8012d76:	3710      	adds	r7, #16
 8012d78:	46bd      	mov	sp, r7
 8012d7a:	bd80      	pop	{r7, pc}

08012d7c <DCMI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void DCMI_DMAError(DMA_HandleTypeDef *hdma)
{
 8012d7c:	b580      	push	{r7, lr}
 8012d7e:	b084      	sub	sp, #16
 8012d80:	af00      	add	r7, sp, #0
 8012d82:	6078      	str	r0, [r7, #4]
  DCMI_HandleTypeDef *hdcmi = (DCMI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8012d84:	687b      	ldr	r3, [r7, #4]
 8012d86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012d88:	60fb      	str	r3, [r7, #12]

  if (hdcmi->DMA_Handle->ErrorCode != HAL_DMA_ERROR_FE)
 8012d8a:	68fb      	ldr	r3, [r7, #12]
 8012d8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012d8e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012d90:	2b02      	cmp	r3, #2
 8012d92:	d009      	beq.n	8012da8 <DCMI_DMAError+0x2c>
  {
    /* Initialize the DCMI state*/
    hdcmi->State = HAL_DCMI_STATE_READY;
 8012d94:	68fb      	ldr	r3, [r7, #12]
 8012d96:	2201      	movs	r2, #1
 8012d98:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Set DCMI Error Code */
    hdcmi->ErrorCode |= HAL_DCMI_ERROR_DMA;
 8012d9c:	68fb      	ldr	r3, [r7, #12]
 8012d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012da0:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8012da4:	68fb      	ldr	r3, [r7, #12]
 8012da6:	64da      	str	r2, [r3, #76]	@ 0x4c
  /* DCMI error Callback */
#if (USE_HAL_DCMI_REGISTER_CALLBACKS == 1)
  /*Call registered DCMI error callback*/
  hdcmi->ErrorCallback(hdcmi);
#else
  HAL_DCMI_ErrorCallback(hdcmi);
 8012da8:	68f8      	ldr	r0, [r7, #12]
 8012daa:	f7fb fe1e 	bl	800e9ea <HAL_DCMI_ErrorCallback>
#endif /* USE_HAL_DCMI_REGISTER_CALLBACKS */
}
 8012dae:	bf00      	nop
 8012db0:	3710      	adds	r7, #16
 8012db2:	46bd      	mov	sp, r7
 8012db4:	bd80      	pop	{r7, pc}
	...

08012db8 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8012db8:	b580      	push	{r7, lr}
 8012dba:	b086      	sub	sp, #24
 8012dbc:	af00      	add	r7, sp, #0
 8012dbe:	6078      	str	r0, [r7, #4]
  uint32_t registerValue;
  uint32_t tickstart = HAL_GetTick();
 8012dc0:	f7ff f9dc 	bl	801217c <HAL_GetTick>
 8012dc4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	2b00      	cmp	r3, #0
 8012dca:	d101      	bne.n	8012dd0 <HAL_DMA_Init+0x18>
  {
    return HAL_ERROR;
 8012dcc:	2301      	movs	r3, #1
 8012dce:	e316      	b.n	80133fe <HAL_DMA_Init+0x646>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a66      	ldr	r2, [pc, #408]	@ (8012f70 <HAL_DMA_Init+0x1b8>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d04a      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	4a65      	ldr	r2, [pc, #404]	@ (8012f74 <HAL_DMA_Init+0x1bc>)
 8012de0:	4293      	cmp	r3, r2
 8012de2:	d045      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012de4:	687b      	ldr	r3, [r7, #4]
 8012de6:	681b      	ldr	r3, [r3, #0]
 8012de8:	4a63      	ldr	r2, [pc, #396]	@ (8012f78 <HAL_DMA_Init+0x1c0>)
 8012dea:	4293      	cmp	r3, r2
 8012dec:	d040      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012dee:	687b      	ldr	r3, [r7, #4]
 8012df0:	681b      	ldr	r3, [r3, #0]
 8012df2:	4a62      	ldr	r2, [pc, #392]	@ (8012f7c <HAL_DMA_Init+0x1c4>)
 8012df4:	4293      	cmp	r3, r2
 8012df6:	d03b      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012df8:	687b      	ldr	r3, [r7, #4]
 8012dfa:	681b      	ldr	r3, [r3, #0]
 8012dfc:	4a60      	ldr	r2, [pc, #384]	@ (8012f80 <HAL_DMA_Init+0x1c8>)
 8012dfe:	4293      	cmp	r3, r2
 8012e00:	d036      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e02:	687b      	ldr	r3, [r7, #4]
 8012e04:	681b      	ldr	r3, [r3, #0]
 8012e06:	4a5f      	ldr	r2, [pc, #380]	@ (8012f84 <HAL_DMA_Init+0x1cc>)
 8012e08:	4293      	cmp	r3, r2
 8012e0a:	d031      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e0c:	687b      	ldr	r3, [r7, #4]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	4a5d      	ldr	r2, [pc, #372]	@ (8012f88 <HAL_DMA_Init+0x1d0>)
 8012e12:	4293      	cmp	r3, r2
 8012e14:	d02c      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e16:	687b      	ldr	r3, [r7, #4]
 8012e18:	681b      	ldr	r3, [r3, #0]
 8012e1a:	4a5c      	ldr	r2, [pc, #368]	@ (8012f8c <HAL_DMA_Init+0x1d4>)
 8012e1c:	4293      	cmp	r3, r2
 8012e1e:	d027      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	681b      	ldr	r3, [r3, #0]
 8012e24:	4a5a      	ldr	r2, [pc, #360]	@ (8012f90 <HAL_DMA_Init+0x1d8>)
 8012e26:	4293      	cmp	r3, r2
 8012e28:	d022      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e2a:	687b      	ldr	r3, [r7, #4]
 8012e2c:	681b      	ldr	r3, [r3, #0]
 8012e2e:	4a59      	ldr	r2, [pc, #356]	@ (8012f94 <HAL_DMA_Init+0x1dc>)
 8012e30:	4293      	cmp	r3, r2
 8012e32:	d01d      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e34:	687b      	ldr	r3, [r7, #4]
 8012e36:	681b      	ldr	r3, [r3, #0]
 8012e38:	4a57      	ldr	r2, [pc, #348]	@ (8012f98 <HAL_DMA_Init+0x1e0>)
 8012e3a:	4293      	cmp	r3, r2
 8012e3c:	d018      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	4a56      	ldr	r2, [pc, #344]	@ (8012f9c <HAL_DMA_Init+0x1e4>)
 8012e44:	4293      	cmp	r3, r2
 8012e46:	d013      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	681b      	ldr	r3, [r3, #0]
 8012e4c:	4a54      	ldr	r2, [pc, #336]	@ (8012fa0 <HAL_DMA_Init+0x1e8>)
 8012e4e:	4293      	cmp	r3, r2
 8012e50:	d00e      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e52:	687b      	ldr	r3, [r7, #4]
 8012e54:	681b      	ldr	r3, [r3, #0]
 8012e56:	4a53      	ldr	r2, [pc, #332]	@ (8012fa4 <HAL_DMA_Init+0x1ec>)
 8012e58:	4293      	cmp	r3, r2
 8012e5a:	d009      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e5c:	687b      	ldr	r3, [r7, #4]
 8012e5e:	681b      	ldr	r3, [r3, #0]
 8012e60:	4a51      	ldr	r2, [pc, #324]	@ (8012fa8 <HAL_DMA_Init+0x1f0>)
 8012e62:	4293      	cmp	r3, r2
 8012e64:	d004      	beq.n	8012e70 <HAL_DMA_Init+0xb8>
 8012e66:	687b      	ldr	r3, [r7, #4]
 8012e68:	681b      	ldr	r3, [r3, #0]
 8012e6a:	4a50      	ldr	r2, [pc, #320]	@ (8012fac <HAL_DMA_Init+0x1f4>)
 8012e6c:	4293      	cmp	r3, r2
 8012e6e:	d101      	bne.n	8012e74 <HAL_DMA_Init+0xbc>
 8012e70:	2301      	movs	r3, #1
 8012e72:	e000      	b.n	8012e76 <HAL_DMA_Init+0xbe>
 8012e74:	2300      	movs	r3, #0
 8012e76:	2b00      	cmp	r3, #0
 8012e78:	f000 813b 	beq.w	80130f2 <HAL_DMA_Init+0x33a>
      assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
      assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2202      	movs	r2, #2
 8012e80:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 8012e84:	687b      	ldr	r3, [r7, #4]
 8012e86:	2200      	movs	r2, #0
 8012e88:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8012e8c:	687b      	ldr	r3, [r7, #4]
 8012e8e:	681b      	ldr	r3, [r3, #0]
 8012e90:	4a37      	ldr	r2, [pc, #220]	@ (8012f70 <HAL_DMA_Init+0x1b8>)
 8012e92:	4293      	cmp	r3, r2
 8012e94:	d04a      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681b      	ldr	r3, [r3, #0]
 8012e9a:	4a36      	ldr	r2, [pc, #216]	@ (8012f74 <HAL_DMA_Init+0x1bc>)
 8012e9c:	4293      	cmp	r3, r2
 8012e9e:	d045      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012ea0:	687b      	ldr	r3, [r7, #4]
 8012ea2:	681b      	ldr	r3, [r3, #0]
 8012ea4:	4a34      	ldr	r2, [pc, #208]	@ (8012f78 <HAL_DMA_Init+0x1c0>)
 8012ea6:	4293      	cmp	r3, r2
 8012ea8:	d040      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012eaa:	687b      	ldr	r3, [r7, #4]
 8012eac:	681b      	ldr	r3, [r3, #0]
 8012eae:	4a33      	ldr	r2, [pc, #204]	@ (8012f7c <HAL_DMA_Init+0x1c4>)
 8012eb0:	4293      	cmp	r3, r2
 8012eb2:	d03b      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	681b      	ldr	r3, [r3, #0]
 8012eb8:	4a31      	ldr	r2, [pc, #196]	@ (8012f80 <HAL_DMA_Init+0x1c8>)
 8012eba:	4293      	cmp	r3, r2
 8012ebc:	d036      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	681b      	ldr	r3, [r3, #0]
 8012ec2:	4a30      	ldr	r2, [pc, #192]	@ (8012f84 <HAL_DMA_Init+0x1cc>)
 8012ec4:	4293      	cmp	r3, r2
 8012ec6:	d031      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012ec8:	687b      	ldr	r3, [r7, #4]
 8012eca:	681b      	ldr	r3, [r3, #0]
 8012ecc:	4a2e      	ldr	r2, [pc, #184]	@ (8012f88 <HAL_DMA_Init+0x1d0>)
 8012ece:	4293      	cmp	r3, r2
 8012ed0:	d02c      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012ed2:	687b      	ldr	r3, [r7, #4]
 8012ed4:	681b      	ldr	r3, [r3, #0]
 8012ed6:	4a2d      	ldr	r2, [pc, #180]	@ (8012f8c <HAL_DMA_Init+0x1d4>)
 8012ed8:	4293      	cmp	r3, r2
 8012eda:	d027      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012edc:	687b      	ldr	r3, [r7, #4]
 8012ede:	681b      	ldr	r3, [r3, #0]
 8012ee0:	4a2b      	ldr	r2, [pc, #172]	@ (8012f90 <HAL_DMA_Init+0x1d8>)
 8012ee2:	4293      	cmp	r3, r2
 8012ee4:	d022      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012ee6:	687b      	ldr	r3, [r7, #4]
 8012ee8:	681b      	ldr	r3, [r3, #0]
 8012eea:	4a2a      	ldr	r2, [pc, #168]	@ (8012f94 <HAL_DMA_Init+0x1dc>)
 8012eec:	4293      	cmp	r3, r2
 8012eee:	d01d      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	681b      	ldr	r3, [r3, #0]
 8012ef4:	4a28      	ldr	r2, [pc, #160]	@ (8012f98 <HAL_DMA_Init+0x1e0>)
 8012ef6:	4293      	cmp	r3, r2
 8012ef8:	d018      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012efa:	687b      	ldr	r3, [r7, #4]
 8012efc:	681b      	ldr	r3, [r3, #0]
 8012efe:	4a27      	ldr	r2, [pc, #156]	@ (8012f9c <HAL_DMA_Init+0x1e4>)
 8012f00:	4293      	cmp	r3, r2
 8012f02:	d013      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012f04:	687b      	ldr	r3, [r7, #4]
 8012f06:	681b      	ldr	r3, [r3, #0]
 8012f08:	4a25      	ldr	r2, [pc, #148]	@ (8012fa0 <HAL_DMA_Init+0x1e8>)
 8012f0a:	4293      	cmp	r3, r2
 8012f0c:	d00e      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012f0e:	687b      	ldr	r3, [r7, #4]
 8012f10:	681b      	ldr	r3, [r3, #0]
 8012f12:	4a24      	ldr	r2, [pc, #144]	@ (8012fa4 <HAL_DMA_Init+0x1ec>)
 8012f14:	4293      	cmp	r3, r2
 8012f16:	d009      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012f18:	687b      	ldr	r3, [r7, #4]
 8012f1a:	681b      	ldr	r3, [r3, #0]
 8012f1c:	4a22      	ldr	r2, [pc, #136]	@ (8012fa8 <HAL_DMA_Init+0x1f0>)
 8012f1e:	4293      	cmp	r3, r2
 8012f20:	d004      	beq.n	8012f2c <HAL_DMA_Init+0x174>
 8012f22:	687b      	ldr	r3, [r7, #4]
 8012f24:	681b      	ldr	r3, [r3, #0]
 8012f26:	4a21      	ldr	r2, [pc, #132]	@ (8012fac <HAL_DMA_Init+0x1f4>)
 8012f28:	4293      	cmp	r3, r2
 8012f2a:	d108      	bne.n	8012f3e <HAL_DMA_Init+0x186>
 8012f2c:	687b      	ldr	r3, [r7, #4]
 8012f2e:	681b      	ldr	r3, [r3, #0]
 8012f30:	681a      	ldr	r2, [r3, #0]
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	681b      	ldr	r3, [r3, #0]
 8012f36:	f022 0201 	bic.w	r2, r2, #1
 8012f3a:	601a      	str	r2, [r3, #0]
 8012f3c:	e007      	b.n	8012f4e <HAL_DMA_Init+0x196>
 8012f3e:	687b      	ldr	r3, [r7, #4]
 8012f40:	681b      	ldr	r3, [r3, #0]
 8012f42:	681a      	ldr	r2, [r3, #0]
 8012f44:	687b      	ldr	r3, [r7, #4]
 8012f46:	681b      	ldr	r3, [r3, #0]
 8012f48:	f022 0201 	bic.w	r2, r2, #1
 8012f4c:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8012f4e:	e02f      	b.n	8012fb0 <HAL_DMA_Init+0x1f8>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8012f50:	f7ff f914 	bl	801217c <HAL_GetTick>
 8012f54:	4602      	mov	r2, r0
 8012f56:	693b      	ldr	r3, [r7, #16]
 8012f58:	1ad3      	subs	r3, r2, r3
 8012f5a:	2b05      	cmp	r3, #5
 8012f5c:	d928      	bls.n	8012fb0 <HAL_DMA_Init+0x1f8>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8012f5e:	687b      	ldr	r3, [r7, #4]
 8012f60:	2220      	movs	r2, #32
 8012f62:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2203      	movs	r2, #3
 8012f68:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        return HAL_ERROR;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	e246      	b.n	80133fe <HAL_DMA_Init+0x646>
 8012f70:	40020010 	.word	0x40020010
 8012f74:	40020028 	.word	0x40020028
 8012f78:	40020040 	.word	0x40020040
 8012f7c:	40020058 	.word	0x40020058
 8012f80:	40020070 	.word	0x40020070
 8012f84:	40020088 	.word	0x40020088
 8012f88:	400200a0 	.word	0x400200a0
 8012f8c:	400200b8 	.word	0x400200b8
 8012f90:	40020410 	.word	0x40020410
 8012f94:	40020428 	.word	0x40020428
 8012f98:	40020440 	.word	0x40020440
 8012f9c:	40020458 	.word	0x40020458
 8012fa0:	40020470 	.word	0x40020470
 8012fa4:	40020488 	.word	0x40020488
 8012fa8:	400204a0 	.word	0x400204a0
 8012fac:	400204b8 	.word	0x400204b8
    while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	681b      	ldr	r3, [r3, #0]
 8012fb6:	f003 0301 	and.w	r3, r3, #1
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d1c8      	bne.n	8012f50 <HAL_DMA_Init+0x198>
      }
    }

    /* Get the CR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->CR;
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	681b      	ldr	r3, [r3, #0]
 8012fc2:	681b      	ldr	r3, [r3, #0]
 8012fc4:	617b      	str	r3, [r7, #20]

    /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
    registerValue &= ((uint32_t)~(DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8012fc6:	697a      	ldr	r2, [r7, #20]
 8012fc8:	4b83      	ldr	r3, [pc, #524]	@ (80131d8 <HAL_DMA_Init+0x420>)
 8012fca:	4013      	ands	r3, r2
 8012fcc:	617b      	str	r3, [r7, #20]
                        DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                        DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                        DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

    /* Prepare the DMA Stream configuration */
    registerValue |=  hdma->Init.Direction           |
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	689a      	ldr	r2, [r3, #8]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	68db      	ldr	r3, [r3, #12]
    registerValue |=  hdma->Init.Direction           |
 8012fd6:	431a      	orrs	r2, r3
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	691b      	ldr	r3, [r3, #16]
 8012fdc:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	695b      	ldr	r3, [r3, #20]
            hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8012fe2:	431a      	orrs	r2, r3
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	699b      	ldr	r3, [r3, #24]
 8012fe8:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	69db      	ldr	r3, [r3, #28]
            hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8012fee:	431a      	orrs	r2, r3
            hdma->Init.Mode                | hdma->Init.Priority;
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	6a1b      	ldr	r3, [r3, #32]
 8012ff4:	4313      	orrs	r3, r2
    registerValue |=  hdma->Init.Direction           |
 8012ff6:	697a      	ldr	r2, [r7, #20]
 8012ff8:	4313      	orrs	r3, r2
 8012ffa:	617b      	str	r3, [r7, #20]

    /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8012ffc:	687b      	ldr	r3, [r7, #4]
 8012ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013000:	2b04      	cmp	r3, #4
 8013002:	d107      	bne.n	8013014 <HAL_DMA_Init+0x25c>
    {
      /* Get memory burst and peripheral burst */
      registerValue |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8013008:	687b      	ldr	r3, [r7, #4]
 801300a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801300c:	4313      	orrs	r3, r2
 801300e:	697a      	ldr	r2, [r7, #20]
 8013010:	4313      	orrs	r3, r2
 8013012:	617b      	str	r3, [r7, #20]
    }

    /* Work around for Errata 2.22: UART/USART- DMA transfer lock: DMA stream could be
                                    lock when transferring data to/from USART/UART */
#if (STM32H7_DEV_ID == 0x450UL)
    if((DBGMCU->IDCODE & 0xFFFF0000U) >= 0x20000000U)
 8013014:	4b71      	ldr	r3, [pc, #452]	@ (80131dc <HAL_DMA_Init+0x424>)
 8013016:	681a      	ldr	r2, [r3, #0]
 8013018:	4b71      	ldr	r3, [pc, #452]	@ (80131e0 <HAL_DMA_Init+0x428>)
 801301a:	4013      	ands	r3, r2
 801301c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8013020:	d328      	bcc.n	8013074 <HAL_DMA_Init+0x2bc>
    {
#endif /* STM32H7_DEV_ID == 0x450UL */
      if(IS_DMA_UART_USART_REQUEST(hdma->Init.Request) != 0U)
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	2b28      	cmp	r3, #40	@ 0x28
 8013028:	d903      	bls.n	8013032 <HAL_DMA_Init+0x27a>
 801302a:	687b      	ldr	r3, [r7, #4]
 801302c:	685b      	ldr	r3, [r3, #4]
 801302e:	2b2e      	cmp	r3, #46	@ 0x2e
 8013030:	d917      	bls.n	8013062 <HAL_DMA_Init+0x2aa>
 8013032:	687b      	ldr	r3, [r7, #4]
 8013034:	685b      	ldr	r3, [r3, #4]
 8013036:	2b3e      	cmp	r3, #62	@ 0x3e
 8013038:	d903      	bls.n	8013042 <HAL_DMA_Init+0x28a>
 801303a:	687b      	ldr	r3, [r7, #4]
 801303c:	685b      	ldr	r3, [r3, #4]
 801303e:	2b42      	cmp	r3, #66	@ 0x42
 8013040:	d90f      	bls.n	8013062 <HAL_DMA_Init+0x2aa>
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	685b      	ldr	r3, [r3, #4]
 8013046:	2b46      	cmp	r3, #70	@ 0x46
 8013048:	d903      	bls.n	8013052 <HAL_DMA_Init+0x29a>
 801304a:	687b      	ldr	r3, [r7, #4]
 801304c:	685b      	ldr	r3, [r3, #4]
 801304e:	2b48      	cmp	r3, #72	@ 0x48
 8013050:	d907      	bls.n	8013062 <HAL_DMA_Init+0x2aa>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	685b      	ldr	r3, [r3, #4]
 8013056:	2b4e      	cmp	r3, #78	@ 0x4e
 8013058:	d905      	bls.n	8013066 <HAL_DMA_Init+0x2ae>
 801305a:	687b      	ldr	r3, [r7, #4]
 801305c:	685b      	ldr	r3, [r3, #4]
 801305e:	2b52      	cmp	r3, #82	@ 0x52
 8013060:	d801      	bhi.n	8013066 <HAL_DMA_Init+0x2ae>
 8013062:	2301      	movs	r3, #1
 8013064:	e000      	b.n	8013068 <HAL_DMA_Init+0x2b0>
 8013066:	2300      	movs	r3, #0
 8013068:	2b00      	cmp	r3, #0
 801306a:	d003      	beq.n	8013074 <HAL_DMA_Init+0x2bc>
      {
        registerValue |= DMA_SxCR_TRBUFF;
 801306c:	697b      	ldr	r3, [r7, #20]
 801306e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8013072:	617b      	str	r3, [r7, #20]
#if (STM32H7_DEV_ID == 0x450UL)
    }
#endif /* STM32H7_DEV_ID == 0x450UL */

    /* Write to DMA Stream CR register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR = registerValue;
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	681b      	ldr	r3, [r3, #0]
 8013078:	697a      	ldr	r2, [r7, #20]
 801307a:	601a      	str	r2, [r3, #0]

    /* Get the FCR register value */
    registerValue = ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR;
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	681b      	ldr	r3, [r3, #0]
 8013080:	695b      	ldr	r3, [r3, #20]
 8013082:	617b      	str	r3, [r7, #20]

    /* Clear Direct mode and FIFO threshold bits */
    registerValue &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8013084:	697b      	ldr	r3, [r7, #20]
 8013086:	f023 0307 	bic.w	r3, r3, #7
 801308a:	617b      	str	r3, [r7, #20]

    /* Prepare the DMA Stream FIFO configuration */
    registerValue |= hdma->Init.FIFOMode;
 801308c:	687b      	ldr	r3, [r7, #4]
 801308e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013090:	697a      	ldr	r2, [r7, #20]
 8013092:	4313      	orrs	r3, r2
 8013094:	617b      	str	r3, [r7, #20]

    /* the FIFO threshold is not used when the FIFO mode is disabled */
    if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8013096:	687b      	ldr	r3, [r7, #4]
 8013098:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801309a:	2b04      	cmp	r3, #4
 801309c:	d117      	bne.n	80130ce <HAL_DMA_Init+0x316>
    {
      /* Get the FIFO threshold */
      registerValue |= hdma->Init.FIFOThreshold;
 801309e:	687b      	ldr	r3, [r7, #4]
 80130a0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80130a2:	697a      	ldr	r2, [r7, #20]
 80130a4:	4313      	orrs	r3, r2
 80130a6:	617b      	str	r3, [r7, #20]

      /* Check compatibility between FIFO threshold level and size of the memory burst */
      /* for INCR4, INCR8, INCR16 */
      if(hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80130a8:	687b      	ldr	r3, [r7, #4]
 80130aa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ac:	2b00      	cmp	r3, #0
 80130ae:	d00e      	beq.n	80130ce <HAL_DMA_Init+0x316>
      {
        if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80130b0:	6878      	ldr	r0, [r7, #4]
 80130b2:	f002 fcf5 	bl	8015aa0 <DMA_CheckFifoParam>
 80130b6:	4603      	mov	r3, r0
 80130b8:	2b00      	cmp	r3, #0
 80130ba:	d008      	beq.n	80130ce <HAL_DMA_Init+0x316>
        {
          /* Update error code */
          hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2240      	movs	r2, #64	@ 0x40
 80130c0:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2201      	movs	r2, #1
 80130c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          return HAL_ERROR;
 80130ca:	2301      	movs	r3, #1
 80130cc:	e197      	b.n	80133fe <HAL_DMA_Init+0x646>
        }
      }
    }

    /* Write to DMA Stream FCR */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR = registerValue;
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	681b      	ldr	r3, [r3, #0]
 80130d2:	697a      	ldr	r2, [r7, #20]
 80130d4:	615a      	str	r2, [r3, #20]

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
       DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80130d6:	6878      	ldr	r0, [r7, #4]
 80130d8:	f002 fc30 	bl	801593c <DMA_CalcBaseAndBitshift>
 80130dc:	4603      	mov	r3, r0
 80130de:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80130e0:	687b      	ldr	r3, [r7, #4]
 80130e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80130e4:	f003 031f 	and.w	r3, r3, #31
 80130e8:	223f      	movs	r2, #63	@ 0x3f
 80130ea:	409a      	lsls	r2, r3
 80130ec:	68bb      	ldr	r3, [r7, #8]
 80130ee:	609a      	str	r2, [r3, #8]
 80130f0:	e0cd      	b.n	801328e <HAL_DMA_Init+0x4d6>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 80130f2:	687b      	ldr	r3, [r7, #4]
 80130f4:	681b      	ldr	r3, [r3, #0]
 80130f6:	4a3b      	ldr	r2, [pc, #236]	@ (80131e4 <HAL_DMA_Init+0x42c>)
 80130f8:	4293      	cmp	r3, r2
 80130fa:	d022      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 80130fc:	687b      	ldr	r3, [r7, #4]
 80130fe:	681b      	ldr	r3, [r3, #0]
 8013100:	4a39      	ldr	r2, [pc, #228]	@ (80131e8 <HAL_DMA_Init+0x430>)
 8013102:	4293      	cmp	r3, r2
 8013104:	d01d      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 8013106:	687b      	ldr	r3, [r7, #4]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	4a38      	ldr	r2, [pc, #224]	@ (80131ec <HAL_DMA_Init+0x434>)
 801310c:	4293      	cmp	r3, r2
 801310e:	d018      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 8013110:	687b      	ldr	r3, [r7, #4]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	4a36      	ldr	r2, [pc, #216]	@ (80131f0 <HAL_DMA_Init+0x438>)
 8013116:	4293      	cmp	r3, r2
 8013118:	d013      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 801311a:	687b      	ldr	r3, [r7, #4]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	4a35      	ldr	r2, [pc, #212]	@ (80131f4 <HAL_DMA_Init+0x43c>)
 8013120:	4293      	cmp	r3, r2
 8013122:	d00e      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 8013124:	687b      	ldr	r3, [r7, #4]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	4a33      	ldr	r2, [pc, #204]	@ (80131f8 <HAL_DMA_Init+0x440>)
 801312a:	4293      	cmp	r3, r2
 801312c:	d009      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	681b      	ldr	r3, [r3, #0]
 8013132:	4a32      	ldr	r2, [pc, #200]	@ (80131fc <HAL_DMA_Init+0x444>)
 8013134:	4293      	cmp	r3, r2
 8013136:	d004      	beq.n	8013142 <HAL_DMA_Init+0x38a>
 8013138:	687b      	ldr	r3, [r7, #4]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	4a30      	ldr	r2, [pc, #192]	@ (8013200 <HAL_DMA_Init+0x448>)
 801313e:	4293      	cmp	r3, r2
 8013140:	d101      	bne.n	8013146 <HAL_DMA_Init+0x38e>
 8013142:	2301      	movs	r3, #1
 8013144:	e000      	b.n	8013148 <HAL_DMA_Init+0x390>
 8013146:	2300      	movs	r3, #0
 8013148:	2b00      	cmp	r3, #0
 801314a:	f000 8097 	beq.w	801327c <HAL_DMA_Init+0x4c4>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	681b      	ldr	r3, [r3, #0]
 8013152:	4a24      	ldr	r2, [pc, #144]	@ (80131e4 <HAL_DMA_Init+0x42c>)
 8013154:	4293      	cmp	r3, r2
 8013156:	d021      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	681b      	ldr	r3, [r3, #0]
 801315c:	4a22      	ldr	r2, [pc, #136]	@ (80131e8 <HAL_DMA_Init+0x430>)
 801315e:	4293      	cmp	r3, r2
 8013160:	d01c      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 8013162:	687b      	ldr	r3, [r7, #4]
 8013164:	681b      	ldr	r3, [r3, #0]
 8013166:	4a21      	ldr	r2, [pc, #132]	@ (80131ec <HAL_DMA_Init+0x434>)
 8013168:	4293      	cmp	r3, r2
 801316a:	d017      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 801316c:	687b      	ldr	r3, [r7, #4]
 801316e:	681b      	ldr	r3, [r3, #0]
 8013170:	4a1f      	ldr	r2, [pc, #124]	@ (80131f0 <HAL_DMA_Init+0x438>)
 8013172:	4293      	cmp	r3, r2
 8013174:	d012      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 8013176:	687b      	ldr	r3, [r7, #4]
 8013178:	681b      	ldr	r3, [r3, #0]
 801317a:	4a1e      	ldr	r2, [pc, #120]	@ (80131f4 <HAL_DMA_Init+0x43c>)
 801317c:	4293      	cmp	r3, r2
 801317e:	d00d      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	681b      	ldr	r3, [r3, #0]
 8013184:	4a1c      	ldr	r2, [pc, #112]	@ (80131f8 <HAL_DMA_Init+0x440>)
 8013186:	4293      	cmp	r3, r2
 8013188:	d008      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 801318a:	687b      	ldr	r3, [r7, #4]
 801318c:	681b      	ldr	r3, [r3, #0]
 801318e:	4a1b      	ldr	r2, [pc, #108]	@ (80131fc <HAL_DMA_Init+0x444>)
 8013190:	4293      	cmp	r3, r2
 8013192:	d003      	beq.n	801319c <HAL_DMA_Init+0x3e4>
 8013194:	687b      	ldr	r3, [r7, #4]
 8013196:	681b      	ldr	r3, [r3, #0]
 8013198:	4a19      	ldr	r2, [pc, #100]	@ (8013200 <HAL_DMA_Init+0x448>)
 801319a:	4293      	cmp	r3, r2
      /* Check the request parameter */
      assert_param(IS_BDMA_REQUEST(hdma->Init.Request));
    }

    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801319c:	687b      	ldr	r3, [r7, #4]
 801319e:	2202      	movs	r2, #2
 80131a0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Allocate lock resource */
    __HAL_UNLOCK(hdma);
 80131a4:	687b      	ldr	r3, [r7, #4]
 80131a6:	2200      	movs	r2, #0
 80131a8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Get the CR register value */
    registerValue = ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR;
 80131ac:	687b      	ldr	r3, [r7, #4]
 80131ae:	681b      	ldr	r3, [r3, #0]
 80131b0:	681b      	ldr	r3, [r3, #0]
 80131b2:	617b      	str	r3, [r7, #20]

    /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, MEM2MEM, DBM and CT bits */
    registerValue &= ((uint32_t)~(BDMA_CCR_PL    | BDMA_CCR_MSIZE   | BDMA_CCR_PSIZE  | \
 80131b4:	697a      	ldr	r2, [r7, #20]
 80131b6:	4b13      	ldr	r3, [pc, #76]	@ (8013204 <HAL_DMA_Init+0x44c>)
 80131b8:	4013      	ands	r3, r2
 80131ba:	617b      	str	r3, [r7, #20]
                                  BDMA_CCR_MINC  | BDMA_CCR_PINC    | BDMA_CCR_CIRC   | \
                                  BDMA_CCR_DIR   | BDMA_CCR_MEM2MEM | BDMA_CCR_DBM    | \
                                  BDMA_CCR_CT));

    /* Prepare the DMA Channel configuration */
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 80131bc:	687b      	ldr	r3, [r7, #4]
 80131be:	689b      	ldr	r3, [r3, #8]
 80131c0:	2b40      	cmp	r3, #64	@ 0x40
 80131c2:	d021      	beq.n	8013208 <HAL_DMA_Init+0x450>
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	689b      	ldr	r3, [r3, #8]
 80131c8:	2b80      	cmp	r3, #128	@ 0x80
 80131ca:	d102      	bne.n	80131d2 <HAL_DMA_Init+0x41a>
 80131cc:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80131d0:	e01b      	b.n	801320a <HAL_DMA_Init+0x452>
 80131d2:	2300      	movs	r3, #0
 80131d4:	e019      	b.n	801320a <HAL_DMA_Init+0x452>
 80131d6:	bf00      	nop
 80131d8:	fe10803f 	.word	0xfe10803f
 80131dc:	5c001000 	.word	0x5c001000
 80131e0:	ffff0000 	.word	0xffff0000
 80131e4:	58025408 	.word	0x58025408
 80131e8:	5802541c 	.word	0x5802541c
 80131ec:	58025430 	.word	0x58025430
 80131f0:	58025444 	.word	0x58025444
 80131f4:	58025458 	.word	0x58025458
 80131f8:	5802546c 	.word	0x5802546c
 80131fc:	58025480 	.word	0x58025480
 8013200:	58025494 	.word	0x58025494
 8013204:	fffe000f 	.word	0xfffe000f
 8013208:	2310      	movs	r3, #16
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 801320a:	687a      	ldr	r2, [r7, #4]
 801320c:	68d2      	ldr	r2, [r2, #12]
 801320e:	08d2      	lsrs	r2, r2, #3
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 8013210:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8013212:	687b      	ldr	r3, [r7, #4]
 8013214:	691b      	ldr	r3, [r3, #16]
 8013216:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PERIPHERAL_INC(hdma->Init.PeriphInc)       |
 8013218:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 801321a:	687b      	ldr	r3, [r7, #4]
 801321c:	695b      	ldr	r3, [r3, #20]
 801321e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MEMORY_INC(hdma->Init.MemInc)              |
 8013220:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	699b      	ldr	r3, [r3, #24]
 8013226:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_PDATA_SIZE(hdma->Init.PeriphDataAlignment) |
 8013228:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	69db      	ldr	r3, [r3, #28]
 801322e:	08db      	lsrs	r3, r3, #3
                      DMA_TO_BDMA_MDATA_SIZE(hdma->Init.MemDataAlignment)    |
 8013230:	431a      	orrs	r2, r3
                      DMA_TO_BDMA_PRIORITY(hdma->Init.Priority);
 8013232:	687b      	ldr	r3, [r7, #4]
 8013234:	6a1b      	ldr	r3, [r3, #32]
 8013236:	091b      	lsrs	r3, r3, #4
                      DMA_TO_BDMA_MODE(hdma->Init.Mode)                      |
 8013238:	4313      	orrs	r3, r2
    registerValue |=  DMA_TO_BDMA_DIRECTION(hdma->Init.Direction)            |
 801323a:	697a      	ldr	r2, [r7, #20]
 801323c:	4313      	orrs	r3, r2
 801323e:	617b      	str	r3, [r7, #20]

    /* Write to DMA Channel CR register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR = registerValue;
 8013240:	687b      	ldr	r3, [r7, #4]
 8013242:	681b      	ldr	r3, [r3, #0]
 8013244:	697a      	ldr	r2, [r7, #20]
 8013246:	601a      	str	r2, [r3, #0]

    /* calculation of the channel index */
    hdma->StreamIndex = (((uint32_t)((uint32_t*)hdma->Instance) - (uint32_t)BDMA_Channel0) / ((uint32_t)BDMA_Channel1 - (uint32_t)BDMA_Channel0)) << 2U;
 8013248:	687b      	ldr	r3, [r7, #4]
 801324a:	681b      	ldr	r3, [r3, #0]
 801324c:	461a      	mov	r2, r3
 801324e:	4b6e      	ldr	r3, [pc, #440]	@ (8013408 <HAL_DMA_Init+0x650>)
 8013250:	4413      	add	r3, r2
 8013252:	4a6e      	ldr	r2, [pc, #440]	@ (801340c <HAL_DMA_Init+0x654>)
 8013254:	fba2 2303 	umull	r2, r3, r2, r3
 8013258:	091b      	lsrs	r3, r3, #4
 801325a:	009a      	lsls	r2, r3, #2
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
    DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8013260:	6878      	ldr	r0, [r7, #4]
 8013262:	f002 fb6b 	bl	801593c <DMA_CalcBaseAndBitshift>
 8013266:	4603      	mov	r3, r0
 8013268:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801326e:	f003 031f 	and.w	r3, r3, #31
 8013272:	2201      	movs	r2, #1
 8013274:	409a      	lsls	r2, r3
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	605a      	str	r2, [r3, #4]
 801327a:	e008      	b.n	801328e <HAL_DMA_Init+0x4d6>
  }
  else
  {
    hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 801327c:	687b      	ldr	r3, [r7, #4]
 801327e:	2240      	movs	r2, #64	@ 0x40
 8013280:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->State     = HAL_DMA_STATE_ERROR;
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	2203      	movs	r2, #3
 8013286:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    return HAL_ERROR;
 801328a:	2301      	movs	r3, #1
 801328c:	e0b7      	b.n	80133fe <HAL_DMA_Init+0x646>
  }

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801328e:	687b      	ldr	r3, [r7, #4]
 8013290:	681b      	ldr	r3, [r3, #0]
 8013292:	4a5f      	ldr	r2, [pc, #380]	@ (8013410 <HAL_DMA_Init+0x658>)
 8013294:	4293      	cmp	r3, r2
 8013296:	d072      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013298:	687b      	ldr	r3, [r7, #4]
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	4a5d      	ldr	r2, [pc, #372]	@ (8013414 <HAL_DMA_Init+0x65c>)
 801329e:	4293      	cmp	r3, r2
 80132a0:	d06d      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	681b      	ldr	r3, [r3, #0]
 80132a6:	4a5c      	ldr	r2, [pc, #368]	@ (8013418 <HAL_DMA_Init+0x660>)
 80132a8:	4293      	cmp	r3, r2
 80132aa:	d068      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132ac:	687b      	ldr	r3, [r7, #4]
 80132ae:	681b      	ldr	r3, [r3, #0]
 80132b0:	4a5a      	ldr	r2, [pc, #360]	@ (801341c <HAL_DMA_Init+0x664>)
 80132b2:	4293      	cmp	r3, r2
 80132b4:	d063      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	681b      	ldr	r3, [r3, #0]
 80132ba:	4a59      	ldr	r2, [pc, #356]	@ (8013420 <HAL_DMA_Init+0x668>)
 80132bc:	4293      	cmp	r3, r2
 80132be:	d05e      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132c0:	687b      	ldr	r3, [r7, #4]
 80132c2:	681b      	ldr	r3, [r3, #0]
 80132c4:	4a57      	ldr	r2, [pc, #348]	@ (8013424 <HAL_DMA_Init+0x66c>)
 80132c6:	4293      	cmp	r3, r2
 80132c8:	d059      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132ca:	687b      	ldr	r3, [r7, #4]
 80132cc:	681b      	ldr	r3, [r3, #0]
 80132ce:	4a56      	ldr	r2, [pc, #344]	@ (8013428 <HAL_DMA_Init+0x670>)
 80132d0:	4293      	cmp	r3, r2
 80132d2:	d054      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132d4:	687b      	ldr	r3, [r7, #4]
 80132d6:	681b      	ldr	r3, [r3, #0]
 80132d8:	4a54      	ldr	r2, [pc, #336]	@ (801342c <HAL_DMA_Init+0x674>)
 80132da:	4293      	cmp	r3, r2
 80132dc:	d04f      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	681b      	ldr	r3, [r3, #0]
 80132e2:	4a53      	ldr	r2, [pc, #332]	@ (8013430 <HAL_DMA_Init+0x678>)
 80132e4:	4293      	cmp	r3, r2
 80132e6:	d04a      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	681b      	ldr	r3, [r3, #0]
 80132ec:	4a51      	ldr	r2, [pc, #324]	@ (8013434 <HAL_DMA_Init+0x67c>)
 80132ee:	4293      	cmp	r3, r2
 80132f0:	d045      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	681b      	ldr	r3, [r3, #0]
 80132f6:	4a50      	ldr	r2, [pc, #320]	@ (8013438 <HAL_DMA_Init+0x680>)
 80132f8:	4293      	cmp	r3, r2
 80132fa:	d040      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 80132fc:	687b      	ldr	r3, [r7, #4]
 80132fe:	681b      	ldr	r3, [r3, #0]
 8013300:	4a4e      	ldr	r2, [pc, #312]	@ (801343c <HAL_DMA_Init+0x684>)
 8013302:	4293      	cmp	r3, r2
 8013304:	d03b      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013306:	687b      	ldr	r3, [r7, #4]
 8013308:	681b      	ldr	r3, [r3, #0]
 801330a:	4a4d      	ldr	r2, [pc, #308]	@ (8013440 <HAL_DMA_Init+0x688>)
 801330c:	4293      	cmp	r3, r2
 801330e:	d036      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013310:	687b      	ldr	r3, [r7, #4]
 8013312:	681b      	ldr	r3, [r3, #0]
 8013314:	4a4b      	ldr	r2, [pc, #300]	@ (8013444 <HAL_DMA_Init+0x68c>)
 8013316:	4293      	cmp	r3, r2
 8013318:	d031      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 801331a:	687b      	ldr	r3, [r7, #4]
 801331c:	681b      	ldr	r3, [r3, #0]
 801331e:	4a4a      	ldr	r2, [pc, #296]	@ (8013448 <HAL_DMA_Init+0x690>)
 8013320:	4293      	cmp	r3, r2
 8013322:	d02c      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	681b      	ldr	r3, [r3, #0]
 8013328:	4a48      	ldr	r2, [pc, #288]	@ (801344c <HAL_DMA_Init+0x694>)
 801332a:	4293      	cmp	r3, r2
 801332c:	d027      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	681b      	ldr	r3, [r3, #0]
 8013332:	4a47      	ldr	r2, [pc, #284]	@ (8013450 <HAL_DMA_Init+0x698>)
 8013334:	4293      	cmp	r3, r2
 8013336:	d022      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	681b      	ldr	r3, [r3, #0]
 801333c:	4a45      	ldr	r2, [pc, #276]	@ (8013454 <HAL_DMA_Init+0x69c>)
 801333e:	4293      	cmp	r3, r2
 8013340:	d01d      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013342:	687b      	ldr	r3, [r7, #4]
 8013344:	681b      	ldr	r3, [r3, #0]
 8013346:	4a44      	ldr	r2, [pc, #272]	@ (8013458 <HAL_DMA_Init+0x6a0>)
 8013348:	4293      	cmp	r3, r2
 801334a:	d018      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 801334c:	687b      	ldr	r3, [r7, #4]
 801334e:	681b      	ldr	r3, [r3, #0]
 8013350:	4a42      	ldr	r2, [pc, #264]	@ (801345c <HAL_DMA_Init+0x6a4>)
 8013352:	4293      	cmp	r3, r2
 8013354:	d013      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013356:	687b      	ldr	r3, [r7, #4]
 8013358:	681b      	ldr	r3, [r3, #0]
 801335a:	4a41      	ldr	r2, [pc, #260]	@ (8013460 <HAL_DMA_Init+0x6a8>)
 801335c:	4293      	cmp	r3, r2
 801335e:	d00e      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013360:	687b      	ldr	r3, [r7, #4]
 8013362:	681b      	ldr	r3, [r3, #0]
 8013364:	4a3f      	ldr	r2, [pc, #252]	@ (8013464 <HAL_DMA_Init+0x6ac>)
 8013366:	4293      	cmp	r3, r2
 8013368:	d009      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	681b      	ldr	r3, [r3, #0]
 801336e:	4a3e      	ldr	r2, [pc, #248]	@ (8013468 <HAL_DMA_Init+0x6b0>)
 8013370:	4293      	cmp	r3, r2
 8013372:	d004      	beq.n	801337e <HAL_DMA_Init+0x5c6>
 8013374:	687b      	ldr	r3, [r7, #4]
 8013376:	681b      	ldr	r3, [r3, #0]
 8013378:	4a3c      	ldr	r2, [pc, #240]	@ (801346c <HAL_DMA_Init+0x6b4>)
 801337a:	4293      	cmp	r3, r2
 801337c:	d101      	bne.n	8013382 <HAL_DMA_Init+0x5ca>
 801337e:	2301      	movs	r3, #1
 8013380:	e000      	b.n	8013384 <HAL_DMA_Init+0x5cc>
 8013382:	2300      	movs	r3, #0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d032      	beq.n	80133ee <HAL_DMA_Init+0x636>
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
    */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8013388:	6878      	ldr	r0, [r7, #4]
 801338a:	f002 fc05 	bl	8015b98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 801338e:	687b      	ldr	r3, [r7, #4]
 8013390:	689b      	ldr	r3, [r3, #8]
 8013392:	2b80      	cmp	r3, #128	@ 0x80
 8013394:	d102      	bne.n	801339c <HAL_DMA_Init+0x5e4>
    {
      /* if memory to memory force the request to 0*/
      hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	2200      	movs	r2, #0
 801339a:	605a      	str	r2, [r3, #4]
    }

    /* Set peripheral request  to DMAMUX channel */
    hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	685a      	ldr	r2, [r3, #4]
 80133a0:	687b      	ldr	r3, [r7, #4]
 80133a2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80133a4:	b2d2      	uxtb	r2, r2
 80133a6:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80133a8:	687b      	ldr	r3, [r7, #4]
 80133aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80133ac:	687a      	ldr	r2, [r7, #4]
 80133ae:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 80133b0:	605a      	str	r2, [r3, #4]

    /* Initialize parameters for DMAMUX request generator :
    if the DMA request is DMA_REQUEST_GENERATOR0 to DMA_REQUEST_GENERATOR7
    */
    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	685b      	ldr	r3, [r3, #4]
 80133b6:	2b00      	cmp	r3, #0
 80133b8:	d010      	beq.n	80133dc <HAL_DMA_Init+0x624>
 80133ba:	687b      	ldr	r3, [r7, #4]
 80133bc:	685b      	ldr	r3, [r3, #4]
 80133be:	2b08      	cmp	r3, #8
 80133c0:	d80c      	bhi.n	80133dc <HAL_DMA_Init+0x624>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 80133c2:	6878      	ldr	r0, [r7, #4]
 80133c4:	f002 fc82 	bl	8015ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 80133c8:	687b      	ldr	r3, [r7, #4]
 80133ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80133cc:	2200      	movs	r2, #0
 80133ce:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80133d0:	687b      	ldr	r3, [r7, #4]
 80133d2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80133d4:	687a      	ldr	r2, [r7, #4]
 80133d6:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 80133d8:	605a      	str	r2, [r3, #4]
 80133da:	e008      	b.n	80133ee <HAL_DMA_Init+0x636>
    }
    else
    {
      hdma->DMAmuxRequestGen = 0U;
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2200      	movs	r2, #0
 80133e0:	66da      	str	r2, [r3, #108]	@ 0x6c
      hdma->DMAmuxRequestGenStatus = 0U;
 80133e2:	687b      	ldr	r3, [r7, #4]
 80133e4:	2200      	movs	r2, #0
 80133e6:	671a      	str	r2, [r3, #112]	@ 0x70
      hdma->DMAmuxRequestGenStatusMask = 0U;
 80133e8:	687b      	ldr	r3, [r7, #4]
 80133ea:	2200      	movs	r2, #0
 80133ec:	675a      	str	r2, [r3, #116]	@ 0x74
    }
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80133ee:	687b      	ldr	r3, [r7, #4]
 80133f0:	2200      	movs	r2, #0
 80133f2:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 80133f4:	687b      	ldr	r3, [r7, #4]
 80133f6:	2201      	movs	r2, #1
 80133f8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 80133fc:	2300      	movs	r3, #0
}
 80133fe:	4618      	mov	r0, r3
 8013400:	3718      	adds	r7, #24
 8013402:	46bd      	mov	sp, r7
 8013404:	bd80      	pop	{r7, pc}
 8013406:	bf00      	nop
 8013408:	a7fdabf8 	.word	0xa7fdabf8
 801340c:	cccccccd 	.word	0xcccccccd
 8013410:	40020010 	.word	0x40020010
 8013414:	40020028 	.word	0x40020028
 8013418:	40020040 	.word	0x40020040
 801341c:	40020058 	.word	0x40020058
 8013420:	40020070 	.word	0x40020070
 8013424:	40020088 	.word	0x40020088
 8013428:	400200a0 	.word	0x400200a0
 801342c:	400200b8 	.word	0x400200b8
 8013430:	40020410 	.word	0x40020410
 8013434:	40020428 	.word	0x40020428
 8013438:	40020440 	.word	0x40020440
 801343c:	40020458 	.word	0x40020458
 8013440:	40020470 	.word	0x40020470
 8013444:	40020488 	.word	0x40020488
 8013448:	400204a0 	.word	0x400204a0
 801344c:	400204b8 	.word	0x400204b8
 8013450:	58025408 	.word	0x58025408
 8013454:	5802541c 	.word	0x5802541c
 8013458:	58025430 	.word	0x58025430
 801345c:	58025444 	.word	0x58025444
 8013460:	58025458 	.word	0x58025458
 8013464:	5802546c 	.word	0x5802546c
 8013468:	58025480 	.word	0x58025480
 801346c:	58025494 	.word	0x58025494

08013470 <HAL_DMA_DeInit>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_DeInit(DMA_HandleTypeDef *hdma)
{
 8013470:	b580      	push	{r7, lr}
 8013472:	b084      	sub	sp, #16
 8013474:	af00      	add	r7, sp, #0
 8013476:	6078      	str	r0, [r7, #4]
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8013478:	687b      	ldr	r3, [r7, #4]
 801347a:	2b00      	cmp	r3, #0
 801347c:	d101      	bne.n	8013482 <HAL_DMA_DeInit+0x12>
  {
    return HAL_ERROR;
 801347e:	2301      	movs	r3, #1
 8013480:	e1a8      	b.n	80137d4 <HAL_DMA_DeInit+0x364>
  }

  /* Disable the selected DMA Streamx */
  __HAL_DMA_DISABLE(hdma);
 8013482:	687b      	ldr	r3, [r7, #4]
 8013484:	681b      	ldr	r3, [r3, #0]
 8013486:	4a82      	ldr	r2, [pc, #520]	@ (8013690 <HAL_DMA_DeInit+0x220>)
 8013488:	4293      	cmp	r3, r2
 801348a:	d04a      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4a80      	ldr	r2, [pc, #512]	@ (8013694 <HAL_DMA_DeInit+0x224>)
 8013492:	4293      	cmp	r3, r2
 8013494:	d045      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 8013496:	687b      	ldr	r3, [r7, #4]
 8013498:	681b      	ldr	r3, [r3, #0]
 801349a:	4a7f      	ldr	r2, [pc, #508]	@ (8013698 <HAL_DMA_DeInit+0x228>)
 801349c:	4293      	cmp	r3, r2
 801349e:	d040      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134a0:	687b      	ldr	r3, [r7, #4]
 80134a2:	681b      	ldr	r3, [r3, #0]
 80134a4:	4a7d      	ldr	r2, [pc, #500]	@ (801369c <HAL_DMA_DeInit+0x22c>)
 80134a6:	4293      	cmp	r3, r2
 80134a8:	d03b      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134aa:	687b      	ldr	r3, [r7, #4]
 80134ac:	681b      	ldr	r3, [r3, #0]
 80134ae:	4a7c      	ldr	r2, [pc, #496]	@ (80136a0 <HAL_DMA_DeInit+0x230>)
 80134b0:	4293      	cmp	r3, r2
 80134b2:	d036      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	681b      	ldr	r3, [r3, #0]
 80134b8:	4a7a      	ldr	r2, [pc, #488]	@ (80136a4 <HAL_DMA_DeInit+0x234>)
 80134ba:	4293      	cmp	r3, r2
 80134bc:	d031      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134be:	687b      	ldr	r3, [r7, #4]
 80134c0:	681b      	ldr	r3, [r3, #0]
 80134c2:	4a79      	ldr	r2, [pc, #484]	@ (80136a8 <HAL_DMA_DeInit+0x238>)
 80134c4:	4293      	cmp	r3, r2
 80134c6:	d02c      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134c8:	687b      	ldr	r3, [r7, #4]
 80134ca:	681b      	ldr	r3, [r3, #0]
 80134cc:	4a77      	ldr	r2, [pc, #476]	@ (80136ac <HAL_DMA_DeInit+0x23c>)
 80134ce:	4293      	cmp	r3, r2
 80134d0:	d027      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	681b      	ldr	r3, [r3, #0]
 80134d6:	4a76      	ldr	r2, [pc, #472]	@ (80136b0 <HAL_DMA_DeInit+0x240>)
 80134d8:	4293      	cmp	r3, r2
 80134da:	d022      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134dc:	687b      	ldr	r3, [r7, #4]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	4a74      	ldr	r2, [pc, #464]	@ (80136b4 <HAL_DMA_DeInit+0x244>)
 80134e2:	4293      	cmp	r3, r2
 80134e4:	d01d      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	4a73      	ldr	r2, [pc, #460]	@ (80136b8 <HAL_DMA_DeInit+0x248>)
 80134ec:	4293      	cmp	r3, r2
 80134ee:	d018      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134f0:	687b      	ldr	r3, [r7, #4]
 80134f2:	681b      	ldr	r3, [r3, #0]
 80134f4:	4a71      	ldr	r2, [pc, #452]	@ (80136bc <HAL_DMA_DeInit+0x24c>)
 80134f6:	4293      	cmp	r3, r2
 80134f8:	d013      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	4a70      	ldr	r2, [pc, #448]	@ (80136c0 <HAL_DMA_DeInit+0x250>)
 8013500:	4293      	cmp	r3, r2
 8013502:	d00e      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	4a6e      	ldr	r2, [pc, #440]	@ (80136c4 <HAL_DMA_DeInit+0x254>)
 801350a:	4293      	cmp	r3, r2
 801350c:	d009      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	4a6d      	ldr	r2, [pc, #436]	@ (80136c8 <HAL_DMA_DeInit+0x258>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d004      	beq.n	8013522 <HAL_DMA_DeInit+0xb2>
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	681b      	ldr	r3, [r3, #0]
 801351c:	4a6b      	ldr	r2, [pc, #428]	@ (80136cc <HAL_DMA_DeInit+0x25c>)
 801351e:	4293      	cmp	r3, r2
 8013520:	d108      	bne.n	8013534 <HAL_DMA_DeInit+0xc4>
 8013522:	687b      	ldr	r3, [r7, #4]
 8013524:	681b      	ldr	r3, [r3, #0]
 8013526:	681a      	ldr	r2, [r3, #0]
 8013528:	687b      	ldr	r3, [r7, #4]
 801352a:	681b      	ldr	r3, [r3, #0]
 801352c:	f022 0201 	bic.w	r2, r2, #1
 8013530:	601a      	str	r2, [r3, #0]
 8013532:	e007      	b.n	8013544 <HAL_DMA_DeInit+0xd4>
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	681b      	ldr	r3, [r3, #0]
 8013538:	681a      	ldr	r2, [r3, #0]
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	681b      	ldr	r3, [r3, #0]
 801353e:	f022 0201 	bic.w	r2, r2, #1
 8013542:	601a      	str	r2, [r3, #0]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013544:	687b      	ldr	r3, [r7, #4]
 8013546:	681b      	ldr	r3, [r3, #0]
 8013548:	4a51      	ldr	r2, [pc, #324]	@ (8013690 <HAL_DMA_DeInit+0x220>)
 801354a:	4293      	cmp	r3, r2
 801354c:	d04a      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	681b      	ldr	r3, [r3, #0]
 8013552:	4a50      	ldr	r2, [pc, #320]	@ (8013694 <HAL_DMA_DeInit+0x224>)
 8013554:	4293      	cmp	r3, r2
 8013556:	d045      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 8013558:	687b      	ldr	r3, [r7, #4]
 801355a:	681b      	ldr	r3, [r3, #0]
 801355c:	4a4e      	ldr	r2, [pc, #312]	@ (8013698 <HAL_DMA_DeInit+0x228>)
 801355e:	4293      	cmp	r3, r2
 8013560:	d040      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	681b      	ldr	r3, [r3, #0]
 8013566:	4a4d      	ldr	r2, [pc, #308]	@ (801369c <HAL_DMA_DeInit+0x22c>)
 8013568:	4293      	cmp	r3, r2
 801356a:	d03b      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 801356c:	687b      	ldr	r3, [r7, #4]
 801356e:	681b      	ldr	r3, [r3, #0]
 8013570:	4a4b      	ldr	r2, [pc, #300]	@ (80136a0 <HAL_DMA_DeInit+0x230>)
 8013572:	4293      	cmp	r3, r2
 8013574:	d036      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	681b      	ldr	r3, [r3, #0]
 801357a:	4a4a      	ldr	r2, [pc, #296]	@ (80136a4 <HAL_DMA_DeInit+0x234>)
 801357c:	4293      	cmp	r3, r2
 801357e:	d031      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	681b      	ldr	r3, [r3, #0]
 8013584:	4a48      	ldr	r2, [pc, #288]	@ (80136a8 <HAL_DMA_DeInit+0x238>)
 8013586:	4293      	cmp	r3, r2
 8013588:	d02c      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	4a47      	ldr	r2, [pc, #284]	@ (80136ac <HAL_DMA_DeInit+0x23c>)
 8013590:	4293      	cmp	r3, r2
 8013592:	d027      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 8013594:	687b      	ldr	r3, [r7, #4]
 8013596:	681b      	ldr	r3, [r3, #0]
 8013598:	4a45      	ldr	r2, [pc, #276]	@ (80136b0 <HAL_DMA_DeInit+0x240>)
 801359a:	4293      	cmp	r3, r2
 801359c:	d022      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 801359e:	687b      	ldr	r3, [r7, #4]
 80135a0:	681b      	ldr	r3, [r3, #0]
 80135a2:	4a44      	ldr	r2, [pc, #272]	@ (80136b4 <HAL_DMA_DeInit+0x244>)
 80135a4:	4293      	cmp	r3, r2
 80135a6:	d01d      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	681b      	ldr	r3, [r3, #0]
 80135ac:	4a42      	ldr	r2, [pc, #264]	@ (80136b8 <HAL_DMA_DeInit+0x248>)
 80135ae:	4293      	cmp	r3, r2
 80135b0:	d018      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 80135b2:	687b      	ldr	r3, [r7, #4]
 80135b4:	681b      	ldr	r3, [r3, #0]
 80135b6:	4a41      	ldr	r2, [pc, #260]	@ (80136bc <HAL_DMA_DeInit+0x24c>)
 80135b8:	4293      	cmp	r3, r2
 80135ba:	d013      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 80135bc:	687b      	ldr	r3, [r7, #4]
 80135be:	681b      	ldr	r3, [r3, #0]
 80135c0:	4a3f      	ldr	r2, [pc, #252]	@ (80136c0 <HAL_DMA_DeInit+0x250>)
 80135c2:	4293      	cmp	r3, r2
 80135c4:	d00e      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	681b      	ldr	r3, [r3, #0]
 80135ca:	4a3e      	ldr	r2, [pc, #248]	@ (80136c4 <HAL_DMA_DeInit+0x254>)
 80135cc:	4293      	cmp	r3, r2
 80135ce:	d009      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	681b      	ldr	r3, [r3, #0]
 80135d4:	4a3c      	ldr	r2, [pc, #240]	@ (80136c8 <HAL_DMA_DeInit+0x258>)
 80135d6:	4293      	cmp	r3, r2
 80135d8:	d004      	beq.n	80135e4 <HAL_DMA_DeInit+0x174>
 80135da:	687b      	ldr	r3, [r7, #4]
 80135dc:	681b      	ldr	r3, [r3, #0]
 80135de:	4a3b      	ldr	r2, [pc, #236]	@ (80136cc <HAL_DMA_DeInit+0x25c>)
 80135e0:	4293      	cmp	r3, r2
 80135e2:	d101      	bne.n	80135e8 <HAL_DMA_DeInit+0x178>
 80135e4:	2301      	movs	r3, #1
 80135e6:	e000      	b.n	80135ea <HAL_DMA_DeInit+0x17a>
 80135e8:	2300      	movs	r3, #0
 80135ea:	2b00      	cmp	r3, #0
 80135ec:	d025      	beq.n	801363a <HAL_DMA_DeInit+0x1ca>
  {
    /* Reset DMA Streamx control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->CR   = 0U;
 80135ee:	687b      	ldr	r3, [r7, #4]
 80135f0:	681b      	ldr	r3, [r3, #0]
 80135f2:	2200      	movs	r2, #0
 80135f4:	601a      	str	r2, [r3, #0]

    /* Reset DMA Streamx number of data to transfer register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = 0U;
 80135f6:	687b      	ldr	r3, [r7, #4]
 80135f8:	681b      	ldr	r3, [r3, #0]
 80135fa:	2200      	movs	r2, #0
 80135fc:	605a      	str	r2, [r3, #4]

    /* Reset DMA Streamx peripheral address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR  = 0U;
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	681b      	ldr	r3, [r3, #0]
 8013602:	2200      	movs	r2, #0
 8013604:	609a      	str	r2, [r3, #8]

    /* Reset DMA Streamx memory 0 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = 0U;
 8013606:	687b      	ldr	r3, [r7, #4]
 8013608:	681b      	ldr	r3, [r3, #0]
 801360a:	2200      	movs	r2, #0
 801360c:	60da      	str	r2, [r3, #12]

    /* Reset DMA Streamx memory 1 address register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = 0U;
 801360e:	687b      	ldr	r3, [r7, #4]
 8013610:	681b      	ldr	r3, [r3, #0]
 8013612:	2200      	movs	r2, #0
 8013614:	611a      	str	r2, [r3, #16]

    /* Reset DMA Streamx FIFO control register */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR  = (uint32_t)0x00000021U;
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	2221      	movs	r2, #33	@ 0x21
 801361c:	615a      	str	r2, [r3, #20]

    /* Get DMA steam Base Address */
    regs_dma = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801361e:	6878      	ldr	r0, [r7, #4]
 8013620:	f002 f98c 	bl	801593c <DMA_CalcBaseAndBitshift>
 8013624:	4603      	mov	r3, r0
 8013626:	60bb      	str	r3, [r7, #8]

    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801362c:	f003 031f 	and.w	r3, r3, #31
 8013630:	223f      	movs	r2, #63	@ 0x3f
 8013632:	409a      	lsls	r2, r3
 8013634:	68bb      	ldr	r3, [r7, #8]
 8013636:	609a      	str	r2, [r3, #8]
 8013638:	e081      	b.n	801373e <HAL_DMA_DeInit+0x2ce>
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	4a24      	ldr	r2, [pc, #144]	@ (80136d0 <HAL_DMA_DeInit+0x260>)
 8013640:	4293      	cmp	r3, r2
 8013642:	d022      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	681b      	ldr	r3, [r3, #0]
 8013648:	4a22      	ldr	r2, [pc, #136]	@ (80136d4 <HAL_DMA_DeInit+0x264>)
 801364a:	4293      	cmp	r3, r2
 801364c:	d01d      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 801364e:	687b      	ldr	r3, [r7, #4]
 8013650:	681b      	ldr	r3, [r3, #0]
 8013652:	4a21      	ldr	r2, [pc, #132]	@ (80136d8 <HAL_DMA_DeInit+0x268>)
 8013654:	4293      	cmp	r3, r2
 8013656:	d018      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	4a1f      	ldr	r2, [pc, #124]	@ (80136dc <HAL_DMA_DeInit+0x26c>)
 801365e:	4293      	cmp	r3, r2
 8013660:	d013      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 8013662:	687b      	ldr	r3, [r7, #4]
 8013664:	681b      	ldr	r3, [r3, #0]
 8013666:	4a1e      	ldr	r2, [pc, #120]	@ (80136e0 <HAL_DMA_DeInit+0x270>)
 8013668:	4293      	cmp	r3, r2
 801366a:	d00e      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 801366c:	687b      	ldr	r3, [r7, #4]
 801366e:	681b      	ldr	r3, [r3, #0]
 8013670:	4a1c      	ldr	r2, [pc, #112]	@ (80136e4 <HAL_DMA_DeInit+0x274>)
 8013672:	4293      	cmp	r3, r2
 8013674:	d009      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 8013676:	687b      	ldr	r3, [r7, #4]
 8013678:	681b      	ldr	r3, [r3, #0]
 801367a:	4a1b      	ldr	r2, [pc, #108]	@ (80136e8 <HAL_DMA_DeInit+0x278>)
 801367c:	4293      	cmp	r3, r2
 801367e:	d004      	beq.n	801368a <HAL_DMA_DeInit+0x21a>
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	4a19      	ldr	r2, [pc, #100]	@ (80136ec <HAL_DMA_DeInit+0x27c>)
 8013686:	4293      	cmp	r3, r2
 8013688:	d132      	bne.n	80136f0 <HAL_DMA_DeInit+0x280>
 801368a:	2301      	movs	r3, #1
 801368c:	e031      	b.n	80136f2 <HAL_DMA_DeInit+0x282>
 801368e:	bf00      	nop
 8013690:	40020010 	.word	0x40020010
 8013694:	40020028 	.word	0x40020028
 8013698:	40020040 	.word	0x40020040
 801369c:	40020058 	.word	0x40020058
 80136a0:	40020070 	.word	0x40020070
 80136a4:	40020088 	.word	0x40020088
 80136a8:	400200a0 	.word	0x400200a0
 80136ac:	400200b8 	.word	0x400200b8
 80136b0:	40020410 	.word	0x40020410
 80136b4:	40020428 	.word	0x40020428
 80136b8:	40020440 	.word	0x40020440
 80136bc:	40020458 	.word	0x40020458
 80136c0:	40020470 	.word	0x40020470
 80136c4:	40020488 	.word	0x40020488
 80136c8:	400204a0 	.word	0x400204a0
 80136cc:	400204b8 	.word	0x400204b8
 80136d0:	58025408 	.word	0x58025408
 80136d4:	5802541c 	.word	0x5802541c
 80136d8:	58025430 	.word	0x58025430
 80136dc:	58025444 	.word	0x58025444
 80136e0:	58025458 	.word	0x58025458
 80136e4:	5802546c 	.word	0x5802546c
 80136e8:	58025480 	.word	0x58025480
 80136ec:	58025494 	.word	0x58025494
 80136f0:	2300      	movs	r3, #0
 80136f2:	2b00      	cmp	r3, #0
 80136f4:	d021      	beq.n	801373a <HAL_DMA_DeInit+0x2ca>
  {
    /* Reset DMA Channel control register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CCR  = 0U;
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	2200      	movs	r2, #0
 80136fc:	601a      	str	r2, [r3, #0]

    /* Reset DMA Channel Number of Data to Transfer register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = 0U;
 80136fe:	687b      	ldr	r3, [r7, #4]
 8013700:	681b      	ldr	r3, [r3, #0]
 8013702:	2200      	movs	r2, #0
 8013704:	605a      	str	r2, [r3, #4]

    /* Reset DMA Channel peripheral address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR  = 0U;
 8013706:	687b      	ldr	r3, [r7, #4]
 8013708:	681b      	ldr	r3, [r3, #0]
 801370a:	2200      	movs	r2, #0
 801370c:	609a      	str	r2, [r3, #8]

    /* Reset DMA Channel memory 0 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = 0U;
 801370e:	687b      	ldr	r3, [r7, #4]
 8013710:	681b      	ldr	r3, [r3, #0]
 8013712:	2200      	movs	r2, #0
 8013714:	60da      	str	r2, [r3, #12]

    /* Reset DMA Channel memory 1 address register */
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CM1AR = 0U;
 8013716:	687b      	ldr	r3, [r7, #4]
 8013718:	681b      	ldr	r3, [r3, #0]
 801371a:	2200      	movs	r2, #0
 801371c:	611a      	str	r2, [r3, #16]

    /* Get DMA steam Base Address */
    regs_bdma = (BDMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 801371e:	6878      	ldr	r0, [r7, #4]
 8013720:	f002 f90c 	bl	801593c <DMA_CalcBaseAndBitshift>
 8013724:	4603      	mov	r3, r0
 8013726:	60fb      	str	r3, [r7, #12]

    /* Clear all interrupt flags at correct offset within the register */
    regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8013728:	687b      	ldr	r3, [r7, #4]
 801372a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801372c:	f003 031f 	and.w	r3, r3, #31
 8013730:	2201      	movs	r2, #1
 8013732:	409a      	lsls	r2, r3
 8013734:	68fb      	ldr	r3, [r7, #12]
 8013736:	605a      	str	r2, [r3, #4]
 8013738:	e001      	b.n	801373e <HAL_DMA_DeInit+0x2ce>
  }
  else
  {
    /* Return error status */
    return HAL_ERROR;
 801373a:	2301      	movs	r3, #1
 801373c:	e04a      	b.n	80137d4 <HAL_DMA_DeInit+0x364>
  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
#endif /* BDMA1 */
  {
    /* Initialize parameters for DMAMUX channel :
    DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask */
    DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801373e:	6878      	ldr	r0, [r7, #4]
 8013740:	f002 fa2a 	bl	8015b98 <DMA_CalcDMAMUXChannelBaseAndMask>

    if(hdma->DMAmuxChannel != 0U)
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013748:	2b00      	cmp	r3, #0
 801374a:	d008      	beq.n	801375e <HAL_DMA_DeInit+0x2ee>
    {
      /* Resett he DMAMUX channel that corresponds to the DMA stream */
      hdma->DMAmuxChannel->CCR = 0U;
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013750:	2200      	movs	r2, #0
 8013752:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8013758:	687a      	ldr	r2, [r7, #4]
 801375a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801375c:	605a      	str	r2, [r3, #4]
    }

    if((hdma->Init.Request >= DMA_REQUEST_GENERATOR0) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR7))
 801375e:	687b      	ldr	r3, [r7, #4]
 8013760:	685b      	ldr	r3, [r3, #4]
 8013762:	2b00      	cmp	r3, #0
 8013764:	d00f      	beq.n	8013786 <HAL_DMA_DeInit+0x316>
 8013766:	687b      	ldr	r3, [r7, #4]
 8013768:	685b      	ldr	r3, [r3, #4]
 801376a:	2b08      	cmp	r3, #8
 801376c:	d80b      	bhi.n	8013786 <HAL_DMA_DeInit+0x316>
    {
      /* Initialize parameters for DMAMUX request generator :
      DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask */
      DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 801376e:	6878      	ldr	r0, [r7, #4]
 8013770:	f002 faac 	bl	8015ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>

      /* Reset the DMAMUX request generator register */
      hdma->DMAmuxRequestGen->RGCR = 0U;
 8013774:	687b      	ldr	r3, [r7, #4]
 8013776:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013778:	2200      	movs	r2, #0
 801377a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801377c:	687b      	ldr	r3, [r7, #4]
 801377e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8013780:	687a      	ldr	r2, [r7, #4]
 8013782:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8013784:	605a      	str	r2, [r3, #4]
    }

    hdma->DMAmuxRequestGen = 0U;
 8013786:	687b      	ldr	r3, [r7, #4]
 8013788:	2200      	movs	r2, #0
 801378a:	66da      	str	r2, [r3, #108]	@ 0x6c
    hdma->DMAmuxRequestGenStatus = 0U;
 801378c:	687b      	ldr	r3, [r7, #4]
 801378e:	2200      	movs	r2, #0
 8013790:	671a      	str	r2, [r3, #112]	@ 0x70
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8013792:	687b      	ldr	r3, [r7, #4]
 8013794:	2200      	movs	r2, #0
 8013796:	675a      	str	r2, [r3, #116]	@ 0x74
  }


  /* Clean callbacks */
  hdma->XferCpltCallback       = NULL;
 8013798:	687b      	ldr	r3, [r7, #4]
 801379a:	2200      	movs	r2, #0
 801379c:	63da      	str	r2, [r3, #60]	@ 0x3c
  hdma->XferHalfCpltCallback   = NULL;
 801379e:	687b      	ldr	r3, [r7, #4]
 80137a0:	2200      	movs	r2, #0
 80137a2:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->XferM1CpltCallback     = NULL;
 80137a4:	687b      	ldr	r3, [r7, #4]
 80137a6:	2200      	movs	r2, #0
 80137a8:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->XferM1HalfCpltCallback = NULL;
 80137aa:	687b      	ldr	r3, [r7, #4]
 80137ac:	2200      	movs	r2, #0
 80137ae:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->XferErrorCallback      = NULL;
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	2200      	movs	r2, #0
 80137b4:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->XferAbortCallback      = NULL;
 80137b6:	687b      	ldr	r3, [r7, #4]
 80137b8:	2200      	movs	r2, #0
 80137ba:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80137bc:	687b      	ldr	r3, [r7, #4]
 80137be:	2200      	movs	r2, #0
 80137c0:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_RESET;
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	2200      	movs	r2, #0
 80137c6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Release Lock */
  __HAL_UNLOCK(hdma);
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	2200      	movs	r2, #0
 80137ce:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80137d2:	2300      	movs	r3, #0
}
 80137d4:	4618      	mov	r0, r3
 80137d6:	3710      	adds	r7, #16
 80137d8:	46bd      	mov	sp, r7
 80137da:	bd80      	pop	{r7, pc}

080137dc <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80137dc:	b580      	push	{r7, lr}
 80137de:	b086      	sub	sp, #24
 80137e0:	af00      	add	r7, sp, #0
 80137e2:	60f8      	str	r0, [r7, #12]
 80137e4:	60b9      	str	r1, [r7, #8]
 80137e6:	607a      	str	r2, [r7, #4]
 80137e8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80137ea:	2300      	movs	r3, #0
 80137ec:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80137ee:	68fb      	ldr	r3, [r7, #12]
 80137f0:	2b00      	cmp	r3, #0
 80137f2:	d101      	bne.n	80137f8 <HAL_DMA_Start_IT+0x1c>
  {
    return HAL_ERROR;
 80137f4:	2301      	movs	r3, #1
 80137f6:	e226      	b.n	8013c46 <HAL_DMA_Start_IT+0x46a>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 80137f8:	68fb      	ldr	r3, [r7, #12]
 80137fa:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 80137fe:	2b01      	cmp	r3, #1
 8013800:	d101      	bne.n	8013806 <HAL_DMA_Start_IT+0x2a>
 8013802:	2302      	movs	r3, #2
 8013804:	e21f      	b.n	8013c46 <HAL_DMA_Start_IT+0x46a>
 8013806:	68fb      	ldr	r3, [r7, #12]
 8013808:	2201      	movs	r2, #1
 801380a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801380e:	68fb      	ldr	r3, [r7, #12]
 8013810:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013814:	b2db      	uxtb	r3, r3
 8013816:	2b01      	cmp	r3, #1
 8013818:	f040 820a 	bne.w	8013c30 <HAL_DMA_Start_IT+0x454>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 801381c:	68fb      	ldr	r3, [r7, #12]
 801381e:	2202      	movs	r2, #2
 8013820:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	2200      	movs	r2, #0
 8013828:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 801382a:	68fb      	ldr	r3, [r7, #12]
 801382c:	681b      	ldr	r3, [r3, #0]
 801382e:	4a68      	ldr	r2, [pc, #416]	@ (80139d0 <HAL_DMA_Start_IT+0x1f4>)
 8013830:	4293      	cmp	r3, r2
 8013832:	d04a      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013834:	68fb      	ldr	r3, [r7, #12]
 8013836:	681b      	ldr	r3, [r3, #0]
 8013838:	4a66      	ldr	r2, [pc, #408]	@ (80139d4 <HAL_DMA_Start_IT+0x1f8>)
 801383a:	4293      	cmp	r3, r2
 801383c:	d045      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 801383e:	68fb      	ldr	r3, [r7, #12]
 8013840:	681b      	ldr	r3, [r3, #0]
 8013842:	4a65      	ldr	r2, [pc, #404]	@ (80139d8 <HAL_DMA_Start_IT+0x1fc>)
 8013844:	4293      	cmp	r3, r2
 8013846:	d040      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013848:	68fb      	ldr	r3, [r7, #12]
 801384a:	681b      	ldr	r3, [r3, #0]
 801384c:	4a63      	ldr	r2, [pc, #396]	@ (80139dc <HAL_DMA_Start_IT+0x200>)
 801384e:	4293      	cmp	r3, r2
 8013850:	d03b      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013852:	68fb      	ldr	r3, [r7, #12]
 8013854:	681b      	ldr	r3, [r3, #0]
 8013856:	4a62      	ldr	r2, [pc, #392]	@ (80139e0 <HAL_DMA_Start_IT+0x204>)
 8013858:	4293      	cmp	r3, r2
 801385a:	d036      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 801385c:	68fb      	ldr	r3, [r7, #12]
 801385e:	681b      	ldr	r3, [r3, #0]
 8013860:	4a60      	ldr	r2, [pc, #384]	@ (80139e4 <HAL_DMA_Start_IT+0x208>)
 8013862:	4293      	cmp	r3, r2
 8013864:	d031      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013866:	68fb      	ldr	r3, [r7, #12]
 8013868:	681b      	ldr	r3, [r3, #0]
 801386a:	4a5f      	ldr	r2, [pc, #380]	@ (80139e8 <HAL_DMA_Start_IT+0x20c>)
 801386c:	4293      	cmp	r3, r2
 801386e:	d02c      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013870:	68fb      	ldr	r3, [r7, #12]
 8013872:	681b      	ldr	r3, [r3, #0]
 8013874:	4a5d      	ldr	r2, [pc, #372]	@ (80139ec <HAL_DMA_Start_IT+0x210>)
 8013876:	4293      	cmp	r3, r2
 8013878:	d027      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 801387a:	68fb      	ldr	r3, [r7, #12]
 801387c:	681b      	ldr	r3, [r3, #0]
 801387e:	4a5c      	ldr	r2, [pc, #368]	@ (80139f0 <HAL_DMA_Start_IT+0x214>)
 8013880:	4293      	cmp	r3, r2
 8013882:	d022      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013884:	68fb      	ldr	r3, [r7, #12]
 8013886:	681b      	ldr	r3, [r3, #0]
 8013888:	4a5a      	ldr	r2, [pc, #360]	@ (80139f4 <HAL_DMA_Start_IT+0x218>)
 801388a:	4293      	cmp	r3, r2
 801388c:	d01d      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 801388e:	68fb      	ldr	r3, [r7, #12]
 8013890:	681b      	ldr	r3, [r3, #0]
 8013892:	4a59      	ldr	r2, [pc, #356]	@ (80139f8 <HAL_DMA_Start_IT+0x21c>)
 8013894:	4293      	cmp	r3, r2
 8013896:	d018      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 8013898:	68fb      	ldr	r3, [r7, #12]
 801389a:	681b      	ldr	r3, [r3, #0]
 801389c:	4a57      	ldr	r2, [pc, #348]	@ (80139fc <HAL_DMA_Start_IT+0x220>)
 801389e:	4293      	cmp	r3, r2
 80138a0:	d013      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 80138a2:	68fb      	ldr	r3, [r7, #12]
 80138a4:	681b      	ldr	r3, [r3, #0]
 80138a6:	4a56      	ldr	r2, [pc, #344]	@ (8013a00 <HAL_DMA_Start_IT+0x224>)
 80138a8:	4293      	cmp	r3, r2
 80138aa:	d00e      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	681b      	ldr	r3, [r3, #0]
 80138b0:	4a54      	ldr	r2, [pc, #336]	@ (8013a04 <HAL_DMA_Start_IT+0x228>)
 80138b2:	4293      	cmp	r3, r2
 80138b4:	d009      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	681b      	ldr	r3, [r3, #0]
 80138ba:	4a53      	ldr	r2, [pc, #332]	@ (8013a08 <HAL_DMA_Start_IT+0x22c>)
 80138bc:	4293      	cmp	r3, r2
 80138be:	d004      	beq.n	80138ca <HAL_DMA_Start_IT+0xee>
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	681b      	ldr	r3, [r3, #0]
 80138c4:	4a51      	ldr	r2, [pc, #324]	@ (8013a0c <HAL_DMA_Start_IT+0x230>)
 80138c6:	4293      	cmp	r3, r2
 80138c8:	d108      	bne.n	80138dc <HAL_DMA_Start_IT+0x100>
 80138ca:	68fb      	ldr	r3, [r7, #12]
 80138cc:	681b      	ldr	r3, [r3, #0]
 80138ce:	681a      	ldr	r2, [r3, #0]
 80138d0:	68fb      	ldr	r3, [r7, #12]
 80138d2:	681b      	ldr	r3, [r3, #0]
 80138d4:	f022 0201 	bic.w	r2, r2, #1
 80138d8:	601a      	str	r2, [r3, #0]
 80138da:	e007      	b.n	80138ec <HAL_DMA_Start_IT+0x110>
 80138dc:	68fb      	ldr	r3, [r7, #12]
 80138de:	681b      	ldr	r3, [r3, #0]
 80138e0:	681a      	ldr	r2, [r3, #0]
 80138e2:	68fb      	ldr	r3, [r7, #12]
 80138e4:	681b      	ldr	r3, [r3, #0]
 80138e6:	f022 0201 	bic.w	r2, r2, #1
 80138ea:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	687a      	ldr	r2, [r7, #4]
 80138f0:	68b9      	ldr	r1, [r7, #8]
 80138f2:	68f8      	ldr	r0, [r7, #12]
 80138f4:	f001 fe76 	bl	80155e4 <DMA_SetConfig>

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80138f8:	68fb      	ldr	r3, [r7, #12]
 80138fa:	681b      	ldr	r3, [r3, #0]
 80138fc:	4a34      	ldr	r2, [pc, #208]	@ (80139d0 <HAL_DMA_Start_IT+0x1f4>)
 80138fe:	4293      	cmp	r3, r2
 8013900:	d04a      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013902:	68fb      	ldr	r3, [r7, #12]
 8013904:	681b      	ldr	r3, [r3, #0]
 8013906:	4a33      	ldr	r2, [pc, #204]	@ (80139d4 <HAL_DMA_Start_IT+0x1f8>)
 8013908:	4293      	cmp	r3, r2
 801390a:	d045      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 801390c:	68fb      	ldr	r3, [r7, #12]
 801390e:	681b      	ldr	r3, [r3, #0]
 8013910:	4a31      	ldr	r2, [pc, #196]	@ (80139d8 <HAL_DMA_Start_IT+0x1fc>)
 8013912:	4293      	cmp	r3, r2
 8013914:	d040      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013916:	68fb      	ldr	r3, [r7, #12]
 8013918:	681b      	ldr	r3, [r3, #0]
 801391a:	4a30      	ldr	r2, [pc, #192]	@ (80139dc <HAL_DMA_Start_IT+0x200>)
 801391c:	4293      	cmp	r3, r2
 801391e:	d03b      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013920:	68fb      	ldr	r3, [r7, #12]
 8013922:	681b      	ldr	r3, [r3, #0]
 8013924:	4a2e      	ldr	r2, [pc, #184]	@ (80139e0 <HAL_DMA_Start_IT+0x204>)
 8013926:	4293      	cmp	r3, r2
 8013928:	d036      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 801392a:	68fb      	ldr	r3, [r7, #12]
 801392c:	681b      	ldr	r3, [r3, #0]
 801392e:	4a2d      	ldr	r2, [pc, #180]	@ (80139e4 <HAL_DMA_Start_IT+0x208>)
 8013930:	4293      	cmp	r3, r2
 8013932:	d031      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013934:	68fb      	ldr	r3, [r7, #12]
 8013936:	681b      	ldr	r3, [r3, #0]
 8013938:	4a2b      	ldr	r2, [pc, #172]	@ (80139e8 <HAL_DMA_Start_IT+0x20c>)
 801393a:	4293      	cmp	r3, r2
 801393c:	d02c      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 801393e:	68fb      	ldr	r3, [r7, #12]
 8013940:	681b      	ldr	r3, [r3, #0]
 8013942:	4a2a      	ldr	r2, [pc, #168]	@ (80139ec <HAL_DMA_Start_IT+0x210>)
 8013944:	4293      	cmp	r3, r2
 8013946:	d027      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013948:	68fb      	ldr	r3, [r7, #12]
 801394a:	681b      	ldr	r3, [r3, #0]
 801394c:	4a28      	ldr	r2, [pc, #160]	@ (80139f0 <HAL_DMA_Start_IT+0x214>)
 801394e:	4293      	cmp	r3, r2
 8013950:	d022      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013952:	68fb      	ldr	r3, [r7, #12]
 8013954:	681b      	ldr	r3, [r3, #0]
 8013956:	4a27      	ldr	r2, [pc, #156]	@ (80139f4 <HAL_DMA_Start_IT+0x218>)
 8013958:	4293      	cmp	r3, r2
 801395a:	d01d      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 801395c:	68fb      	ldr	r3, [r7, #12]
 801395e:	681b      	ldr	r3, [r3, #0]
 8013960:	4a25      	ldr	r2, [pc, #148]	@ (80139f8 <HAL_DMA_Start_IT+0x21c>)
 8013962:	4293      	cmp	r3, r2
 8013964:	d018      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013966:	68fb      	ldr	r3, [r7, #12]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	4a24      	ldr	r2, [pc, #144]	@ (80139fc <HAL_DMA_Start_IT+0x220>)
 801396c:	4293      	cmp	r3, r2
 801396e:	d013      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013970:	68fb      	ldr	r3, [r7, #12]
 8013972:	681b      	ldr	r3, [r3, #0]
 8013974:	4a22      	ldr	r2, [pc, #136]	@ (8013a00 <HAL_DMA_Start_IT+0x224>)
 8013976:	4293      	cmp	r3, r2
 8013978:	d00e      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 801397a:	68fb      	ldr	r3, [r7, #12]
 801397c:	681b      	ldr	r3, [r3, #0]
 801397e:	4a21      	ldr	r2, [pc, #132]	@ (8013a04 <HAL_DMA_Start_IT+0x228>)
 8013980:	4293      	cmp	r3, r2
 8013982:	d009      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 8013984:	68fb      	ldr	r3, [r7, #12]
 8013986:	681b      	ldr	r3, [r3, #0]
 8013988:	4a1f      	ldr	r2, [pc, #124]	@ (8013a08 <HAL_DMA_Start_IT+0x22c>)
 801398a:	4293      	cmp	r3, r2
 801398c:	d004      	beq.n	8013998 <HAL_DMA_Start_IT+0x1bc>
 801398e:	68fb      	ldr	r3, [r7, #12]
 8013990:	681b      	ldr	r3, [r3, #0]
 8013992:	4a1e      	ldr	r2, [pc, #120]	@ (8013a0c <HAL_DMA_Start_IT+0x230>)
 8013994:	4293      	cmp	r3, r2
 8013996:	d101      	bne.n	801399c <HAL_DMA_Start_IT+0x1c0>
 8013998:	2301      	movs	r3, #1
 801399a:	e000      	b.n	801399e <HAL_DMA_Start_IT+0x1c2>
 801399c:	2300      	movs	r3, #0
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d036      	beq.n	8013a10 <HAL_DMA_Start_IT+0x234>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80139a2:	68fb      	ldr	r3, [r7, #12]
 80139a4:	681b      	ldr	r3, [r3, #0]
 80139a6:	681b      	ldr	r3, [r3, #0]
 80139a8:	f023 021e 	bic.w	r2, r3, #30
 80139ac:	68fb      	ldr	r3, [r7, #12]
 80139ae:	681b      	ldr	r3, [r3, #0]
 80139b0:	f042 0216 	orr.w	r2, r2, #22
 80139b4:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 80139b6:	68fb      	ldr	r3, [r7, #12]
 80139b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80139ba:	2b00      	cmp	r3, #0
 80139bc:	d03e      	beq.n	8013a3c <HAL_DMA_Start_IT+0x260>
      {
        /* Enable Half Transfer IT if corresponding Callback is set */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 80139be:	68fb      	ldr	r3, [r7, #12]
 80139c0:	681b      	ldr	r3, [r3, #0]
 80139c2:	681a      	ldr	r2, [r3, #0]
 80139c4:	68fb      	ldr	r3, [r7, #12]
 80139c6:	681b      	ldr	r3, [r3, #0]
 80139c8:	f042 0208 	orr.w	r2, r2, #8
 80139cc:	601a      	str	r2, [r3, #0]
 80139ce:	e035      	b.n	8013a3c <HAL_DMA_Start_IT+0x260>
 80139d0:	40020010 	.word	0x40020010
 80139d4:	40020028 	.word	0x40020028
 80139d8:	40020040 	.word	0x40020040
 80139dc:	40020058 	.word	0x40020058
 80139e0:	40020070 	.word	0x40020070
 80139e4:	40020088 	.word	0x40020088
 80139e8:	400200a0 	.word	0x400200a0
 80139ec:	400200b8 	.word	0x400200b8
 80139f0:	40020410 	.word	0x40020410
 80139f4:	40020428 	.word	0x40020428
 80139f8:	40020440 	.word	0x40020440
 80139fc:	40020458 	.word	0x40020458
 8013a00:	40020470 	.word	0x40020470
 8013a04:	40020488 	.word	0x40020488
 8013a08:	400204a0 	.word	0x400204a0
 8013a0c:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA channel */
    {
      /* Enable Common interrupts */
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 8013a10:	68fb      	ldr	r3, [r7, #12]
 8013a12:	681b      	ldr	r3, [r3, #0]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	f023 020e 	bic.w	r2, r3, #14
 8013a1a:	68fb      	ldr	r3, [r7, #12]
 8013a1c:	681b      	ldr	r3, [r3, #0]
 8013a1e:	f042 020a 	orr.w	r2, r2, #10
 8013a22:	601a      	str	r2, [r3, #0]

      if(hdma->XferHalfCpltCallback != NULL)
 8013a24:	68fb      	ldr	r3, [r7, #12]
 8013a26:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013a28:	2b00      	cmp	r3, #0
 8013a2a:	d007      	beq.n	8013a3c <HAL_DMA_Start_IT+0x260>
      {
        /*Enable Half Transfer IT if corresponding Callback is set */
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 8013a2c:	68fb      	ldr	r3, [r7, #12]
 8013a2e:	681b      	ldr	r3, [r3, #0]
 8013a30:	681a      	ldr	r2, [r3, #0]
 8013a32:	68fb      	ldr	r3, [r7, #12]
 8013a34:	681b      	ldr	r3, [r3, #0]
 8013a36:	f042 0204 	orr.w	r2, r2, #4
 8013a3a:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	4a83      	ldr	r2, [pc, #524]	@ (8013c50 <HAL_DMA_Start_IT+0x474>)
 8013a42:	4293      	cmp	r3, r2
 8013a44:	d072      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	681b      	ldr	r3, [r3, #0]
 8013a4a:	4a82      	ldr	r2, [pc, #520]	@ (8013c54 <HAL_DMA_Start_IT+0x478>)
 8013a4c:	4293      	cmp	r3, r2
 8013a4e:	d06d      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a50:	68fb      	ldr	r3, [r7, #12]
 8013a52:	681b      	ldr	r3, [r3, #0]
 8013a54:	4a80      	ldr	r2, [pc, #512]	@ (8013c58 <HAL_DMA_Start_IT+0x47c>)
 8013a56:	4293      	cmp	r3, r2
 8013a58:	d068      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a5a:	68fb      	ldr	r3, [r7, #12]
 8013a5c:	681b      	ldr	r3, [r3, #0]
 8013a5e:	4a7f      	ldr	r2, [pc, #508]	@ (8013c5c <HAL_DMA_Start_IT+0x480>)
 8013a60:	4293      	cmp	r3, r2
 8013a62:	d063      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a64:	68fb      	ldr	r3, [r7, #12]
 8013a66:	681b      	ldr	r3, [r3, #0]
 8013a68:	4a7d      	ldr	r2, [pc, #500]	@ (8013c60 <HAL_DMA_Start_IT+0x484>)
 8013a6a:	4293      	cmp	r3, r2
 8013a6c:	d05e      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a6e:	68fb      	ldr	r3, [r7, #12]
 8013a70:	681b      	ldr	r3, [r3, #0]
 8013a72:	4a7c      	ldr	r2, [pc, #496]	@ (8013c64 <HAL_DMA_Start_IT+0x488>)
 8013a74:	4293      	cmp	r3, r2
 8013a76:	d059      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a78:	68fb      	ldr	r3, [r7, #12]
 8013a7a:	681b      	ldr	r3, [r3, #0]
 8013a7c:	4a7a      	ldr	r2, [pc, #488]	@ (8013c68 <HAL_DMA_Start_IT+0x48c>)
 8013a7e:	4293      	cmp	r3, r2
 8013a80:	d054      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	4a79      	ldr	r2, [pc, #484]	@ (8013c6c <HAL_DMA_Start_IT+0x490>)
 8013a88:	4293      	cmp	r3, r2
 8013a8a:	d04f      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a8c:	68fb      	ldr	r3, [r7, #12]
 8013a8e:	681b      	ldr	r3, [r3, #0]
 8013a90:	4a77      	ldr	r2, [pc, #476]	@ (8013c70 <HAL_DMA_Start_IT+0x494>)
 8013a92:	4293      	cmp	r3, r2
 8013a94:	d04a      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	681b      	ldr	r3, [r3, #0]
 8013a9a:	4a76      	ldr	r2, [pc, #472]	@ (8013c74 <HAL_DMA_Start_IT+0x498>)
 8013a9c:	4293      	cmp	r3, r2
 8013a9e:	d045      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	681b      	ldr	r3, [r3, #0]
 8013aa4:	4a74      	ldr	r2, [pc, #464]	@ (8013c78 <HAL_DMA_Start_IT+0x49c>)
 8013aa6:	4293      	cmp	r3, r2
 8013aa8:	d040      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013aaa:	68fb      	ldr	r3, [r7, #12]
 8013aac:	681b      	ldr	r3, [r3, #0]
 8013aae:	4a73      	ldr	r2, [pc, #460]	@ (8013c7c <HAL_DMA_Start_IT+0x4a0>)
 8013ab0:	4293      	cmp	r3, r2
 8013ab2:	d03b      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013ab4:	68fb      	ldr	r3, [r7, #12]
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	4a71      	ldr	r2, [pc, #452]	@ (8013c80 <HAL_DMA_Start_IT+0x4a4>)
 8013aba:	4293      	cmp	r3, r2
 8013abc:	d036      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013abe:	68fb      	ldr	r3, [r7, #12]
 8013ac0:	681b      	ldr	r3, [r3, #0]
 8013ac2:	4a70      	ldr	r2, [pc, #448]	@ (8013c84 <HAL_DMA_Start_IT+0x4a8>)
 8013ac4:	4293      	cmp	r3, r2
 8013ac6:	d031      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013ac8:	68fb      	ldr	r3, [r7, #12]
 8013aca:	681b      	ldr	r3, [r3, #0]
 8013acc:	4a6e      	ldr	r2, [pc, #440]	@ (8013c88 <HAL_DMA_Start_IT+0x4ac>)
 8013ace:	4293      	cmp	r3, r2
 8013ad0:	d02c      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013ad2:	68fb      	ldr	r3, [r7, #12]
 8013ad4:	681b      	ldr	r3, [r3, #0]
 8013ad6:	4a6d      	ldr	r2, [pc, #436]	@ (8013c8c <HAL_DMA_Start_IT+0x4b0>)
 8013ad8:	4293      	cmp	r3, r2
 8013ada:	d027      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013adc:	68fb      	ldr	r3, [r7, #12]
 8013ade:	681b      	ldr	r3, [r3, #0]
 8013ae0:	4a6b      	ldr	r2, [pc, #428]	@ (8013c90 <HAL_DMA_Start_IT+0x4b4>)
 8013ae2:	4293      	cmp	r3, r2
 8013ae4:	d022      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013ae6:	68fb      	ldr	r3, [r7, #12]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	4a6a      	ldr	r2, [pc, #424]	@ (8013c94 <HAL_DMA_Start_IT+0x4b8>)
 8013aec:	4293      	cmp	r3, r2
 8013aee:	d01d      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013af0:	68fb      	ldr	r3, [r7, #12]
 8013af2:	681b      	ldr	r3, [r3, #0]
 8013af4:	4a68      	ldr	r2, [pc, #416]	@ (8013c98 <HAL_DMA_Start_IT+0x4bc>)
 8013af6:	4293      	cmp	r3, r2
 8013af8:	d018      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013afa:	68fb      	ldr	r3, [r7, #12]
 8013afc:	681b      	ldr	r3, [r3, #0]
 8013afe:	4a67      	ldr	r2, [pc, #412]	@ (8013c9c <HAL_DMA_Start_IT+0x4c0>)
 8013b00:	4293      	cmp	r3, r2
 8013b02:	d013      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013b04:	68fb      	ldr	r3, [r7, #12]
 8013b06:	681b      	ldr	r3, [r3, #0]
 8013b08:	4a65      	ldr	r2, [pc, #404]	@ (8013ca0 <HAL_DMA_Start_IT+0x4c4>)
 8013b0a:	4293      	cmp	r3, r2
 8013b0c:	d00e      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	681b      	ldr	r3, [r3, #0]
 8013b12:	4a64      	ldr	r2, [pc, #400]	@ (8013ca4 <HAL_DMA_Start_IT+0x4c8>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d009      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013b18:	68fb      	ldr	r3, [r7, #12]
 8013b1a:	681b      	ldr	r3, [r3, #0]
 8013b1c:	4a62      	ldr	r2, [pc, #392]	@ (8013ca8 <HAL_DMA_Start_IT+0x4cc>)
 8013b1e:	4293      	cmp	r3, r2
 8013b20:	d004      	beq.n	8013b2c <HAL_DMA_Start_IT+0x350>
 8013b22:	68fb      	ldr	r3, [r7, #12]
 8013b24:	681b      	ldr	r3, [r3, #0]
 8013b26:	4a61      	ldr	r2, [pc, #388]	@ (8013cac <HAL_DMA_Start_IT+0x4d0>)
 8013b28:	4293      	cmp	r3, r2
 8013b2a:	d101      	bne.n	8013b30 <HAL_DMA_Start_IT+0x354>
 8013b2c:	2301      	movs	r3, #1
 8013b2e:	e000      	b.n	8013b32 <HAL_DMA_Start_IT+0x356>
 8013b30:	2300      	movs	r3, #0
 8013b32:	2b00      	cmp	r3, #0
 8013b34:	d01a      	beq.n	8013b6c <HAL_DMA_Start_IT+0x390>
    {
      /* Check if DMAMUX Synchronization is enabled */
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8013b36:	68fb      	ldr	r3, [r7, #12]
 8013b38:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013b3a:	681b      	ldr	r3, [r3, #0]
 8013b3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013b40:	2b00      	cmp	r3, #0
 8013b42:	d007      	beq.n	8013b54 <HAL_DMA_Start_IT+0x378>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8013b44:	68fb      	ldr	r3, [r7, #12]
 8013b46:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013b48:	681a      	ldr	r2, [r3, #0]
 8013b4a:	68fb      	ldr	r3, [r7, #12]
 8013b4c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013b4e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013b52:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 8013b54:	68fb      	ldr	r3, [r7, #12]
 8013b56:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b58:	2b00      	cmp	r3, #0
 8013b5a:	d007      	beq.n	8013b6c <HAL_DMA_Start_IT+0x390>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 8013b5c:	68fb      	ldr	r3, [r7, #12]
 8013b5e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b60:	681a      	ldr	r2, [r3, #0]
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013b66:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8013b6a:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8013b6c:	68fb      	ldr	r3, [r7, #12]
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	4a37      	ldr	r2, [pc, #220]	@ (8013c50 <HAL_DMA_Start_IT+0x474>)
 8013b72:	4293      	cmp	r3, r2
 8013b74:	d04a      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013b76:	68fb      	ldr	r3, [r7, #12]
 8013b78:	681b      	ldr	r3, [r3, #0]
 8013b7a:	4a36      	ldr	r2, [pc, #216]	@ (8013c54 <HAL_DMA_Start_IT+0x478>)
 8013b7c:	4293      	cmp	r3, r2
 8013b7e:	d045      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	681b      	ldr	r3, [r3, #0]
 8013b84:	4a34      	ldr	r2, [pc, #208]	@ (8013c58 <HAL_DMA_Start_IT+0x47c>)
 8013b86:	4293      	cmp	r3, r2
 8013b88:	d040      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013b8a:	68fb      	ldr	r3, [r7, #12]
 8013b8c:	681b      	ldr	r3, [r3, #0]
 8013b8e:	4a33      	ldr	r2, [pc, #204]	@ (8013c5c <HAL_DMA_Start_IT+0x480>)
 8013b90:	4293      	cmp	r3, r2
 8013b92:	d03b      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013b94:	68fb      	ldr	r3, [r7, #12]
 8013b96:	681b      	ldr	r3, [r3, #0]
 8013b98:	4a31      	ldr	r2, [pc, #196]	@ (8013c60 <HAL_DMA_Start_IT+0x484>)
 8013b9a:	4293      	cmp	r3, r2
 8013b9c:	d036      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013b9e:	68fb      	ldr	r3, [r7, #12]
 8013ba0:	681b      	ldr	r3, [r3, #0]
 8013ba2:	4a30      	ldr	r2, [pc, #192]	@ (8013c64 <HAL_DMA_Start_IT+0x488>)
 8013ba4:	4293      	cmp	r3, r2
 8013ba6:	d031      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013ba8:	68fb      	ldr	r3, [r7, #12]
 8013baa:	681b      	ldr	r3, [r3, #0]
 8013bac:	4a2e      	ldr	r2, [pc, #184]	@ (8013c68 <HAL_DMA_Start_IT+0x48c>)
 8013bae:	4293      	cmp	r3, r2
 8013bb0:	d02c      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bb2:	68fb      	ldr	r3, [r7, #12]
 8013bb4:	681b      	ldr	r3, [r3, #0]
 8013bb6:	4a2d      	ldr	r2, [pc, #180]	@ (8013c6c <HAL_DMA_Start_IT+0x490>)
 8013bb8:	4293      	cmp	r3, r2
 8013bba:	d027      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	681b      	ldr	r3, [r3, #0]
 8013bc0:	4a2b      	ldr	r2, [pc, #172]	@ (8013c70 <HAL_DMA_Start_IT+0x494>)
 8013bc2:	4293      	cmp	r3, r2
 8013bc4:	d022      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bc6:	68fb      	ldr	r3, [r7, #12]
 8013bc8:	681b      	ldr	r3, [r3, #0]
 8013bca:	4a2a      	ldr	r2, [pc, #168]	@ (8013c74 <HAL_DMA_Start_IT+0x498>)
 8013bcc:	4293      	cmp	r3, r2
 8013bce:	d01d      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bd0:	68fb      	ldr	r3, [r7, #12]
 8013bd2:	681b      	ldr	r3, [r3, #0]
 8013bd4:	4a28      	ldr	r2, [pc, #160]	@ (8013c78 <HAL_DMA_Start_IT+0x49c>)
 8013bd6:	4293      	cmp	r3, r2
 8013bd8:	d018      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bda:	68fb      	ldr	r3, [r7, #12]
 8013bdc:	681b      	ldr	r3, [r3, #0]
 8013bde:	4a27      	ldr	r2, [pc, #156]	@ (8013c7c <HAL_DMA_Start_IT+0x4a0>)
 8013be0:	4293      	cmp	r3, r2
 8013be2:	d013      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013be4:	68fb      	ldr	r3, [r7, #12]
 8013be6:	681b      	ldr	r3, [r3, #0]
 8013be8:	4a25      	ldr	r2, [pc, #148]	@ (8013c80 <HAL_DMA_Start_IT+0x4a4>)
 8013bea:	4293      	cmp	r3, r2
 8013bec:	d00e      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bee:	68fb      	ldr	r3, [r7, #12]
 8013bf0:	681b      	ldr	r3, [r3, #0]
 8013bf2:	4a24      	ldr	r2, [pc, #144]	@ (8013c84 <HAL_DMA_Start_IT+0x4a8>)
 8013bf4:	4293      	cmp	r3, r2
 8013bf6:	d009      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013bf8:	68fb      	ldr	r3, [r7, #12]
 8013bfa:	681b      	ldr	r3, [r3, #0]
 8013bfc:	4a22      	ldr	r2, [pc, #136]	@ (8013c88 <HAL_DMA_Start_IT+0x4ac>)
 8013bfe:	4293      	cmp	r3, r2
 8013c00:	d004      	beq.n	8013c0c <HAL_DMA_Start_IT+0x430>
 8013c02:	68fb      	ldr	r3, [r7, #12]
 8013c04:	681b      	ldr	r3, [r3, #0]
 8013c06:	4a21      	ldr	r2, [pc, #132]	@ (8013c8c <HAL_DMA_Start_IT+0x4b0>)
 8013c08:	4293      	cmp	r3, r2
 8013c0a:	d108      	bne.n	8013c1e <HAL_DMA_Start_IT+0x442>
 8013c0c:	68fb      	ldr	r3, [r7, #12]
 8013c0e:	681b      	ldr	r3, [r3, #0]
 8013c10:	681a      	ldr	r2, [r3, #0]
 8013c12:	68fb      	ldr	r3, [r7, #12]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	f042 0201 	orr.w	r2, r2, #1
 8013c1a:	601a      	str	r2, [r3, #0]
 8013c1c:	e012      	b.n	8013c44 <HAL_DMA_Start_IT+0x468>
 8013c1e:	68fb      	ldr	r3, [r7, #12]
 8013c20:	681b      	ldr	r3, [r3, #0]
 8013c22:	681a      	ldr	r2, [r3, #0]
 8013c24:	68fb      	ldr	r3, [r7, #12]
 8013c26:	681b      	ldr	r3, [r3, #0]
 8013c28:	f042 0201 	orr.w	r2, r2, #1
 8013c2c:	601a      	str	r2, [r3, #0]
 8013c2e:	e009      	b.n	8013c44 <HAL_DMA_Start_IT+0x468>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 8013c30:	68fb      	ldr	r3, [r7, #12]
 8013c32:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8013c36:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hdma);
 8013c38:	68fb      	ldr	r3, [r7, #12]
 8013c3a:	2200      	movs	r2, #0
 8013c3c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    /* Return error status */
    status = HAL_ERROR;
 8013c40:	2301      	movs	r3, #1
 8013c42:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8013c44:	7dfb      	ldrb	r3, [r7, #23]
}
 8013c46:	4618      	mov	r0, r3
 8013c48:	3718      	adds	r7, #24
 8013c4a:	46bd      	mov	sp, r7
 8013c4c:	bd80      	pop	{r7, pc}
 8013c4e:	bf00      	nop
 8013c50:	40020010 	.word	0x40020010
 8013c54:	40020028 	.word	0x40020028
 8013c58:	40020040 	.word	0x40020040
 8013c5c:	40020058 	.word	0x40020058
 8013c60:	40020070 	.word	0x40020070
 8013c64:	40020088 	.word	0x40020088
 8013c68:	400200a0 	.word	0x400200a0
 8013c6c:	400200b8 	.word	0x400200b8
 8013c70:	40020410 	.word	0x40020410
 8013c74:	40020428 	.word	0x40020428
 8013c78:	40020440 	.word	0x40020440
 8013c7c:	40020458 	.word	0x40020458
 8013c80:	40020470 	.word	0x40020470
 8013c84:	40020488 	.word	0x40020488
 8013c88:	400204a0 	.word	0x400204a0
 8013c8c:	400204b8 	.word	0x400204b8
 8013c90:	58025408 	.word	0x58025408
 8013c94:	5802541c 	.word	0x5802541c
 8013c98:	58025430 	.word	0x58025430
 8013c9c:	58025444 	.word	0x58025444
 8013ca0:	58025458 	.word	0x58025458
 8013ca4:	5802546c 	.word	0x5802546c
 8013ca8:	58025480 	.word	0x58025480
 8013cac:	58025494 	.word	0x58025494

08013cb0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8013cb0:	b580      	push	{r7, lr}
 8013cb2:	b086      	sub	sp, #24
 8013cb4:	af00      	add	r7, sp, #0
 8013cb6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs_dma;
  BDMA_Base_Registers *regs_bdma;
  const __IO uint32_t *enableRegister;

  uint32_t tickstart = HAL_GetTick();
 8013cb8:	f7fe fa60 	bl	801217c <HAL_GetTick>
 8013cbc:	6138      	str	r0, [r7, #16]

 /* Check the DMA peripheral handle */
  if(hdma == NULL)
 8013cbe:	687b      	ldr	r3, [r7, #4]
 8013cc0:	2b00      	cmp	r3, #0
 8013cc2:	d101      	bne.n	8013cc8 <HAL_DMA_Abort+0x18>
  {
    return HAL_ERROR;
 8013cc4:	2301      	movs	r3, #1
 8013cc6:	e2dc      	b.n	8014282 <HAL_DMA_Abort+0x5d2>
  }

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8013cc8:	687b      	ldr	r3, [r7, #4]
 8013cca:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8013cce:	b2db      	uxtb	r3, r3
 8013cd0:	2b02      	cmp	r3, #2
 8013cd2:	d008      	beq.n	8013ce6 <HAL_DMA_Abort+0x36>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8013cd4:	687b      	ldr	r3, [r7, #4]
 8013cd6:	2280      	movs	r2, #128	@ 0x80
 8013cd8:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013cda:	687b      	ldr	r3, [r7, #4]
 8013cdc:	2200      	movs	r2, #0
 8013cde:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

    return HAL_ERROR;
 8013ce2:	2301      	movs	r3, #1
 8013ce4:	e2cd      	b.n	8014282 <HAL_DMA_Abort+0x5d2>
  }
  else
  {
    /* Disable all the transfer interrupts */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	681b      	ldr	r3, [r3, #0]
 8013cea:	4a76      	ldr	r2, [pc, #472]	@ (8013ec4 <HAL_DMA_Abort+0x214>)
 8013cec:	4293      	cmp	r3, r2
 8013cee:	d04a      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013cf0:	687b      	ldr	r3, [r7, #4]
 8013cf2:	681b      	ldr	r3, [r3, #0]
 8013cf4:	4a74      	ldr	r2, [pc, #464]	@ (8013ec8 <HAL_DMA_Abort+0x218>)
 8013cf6:	4293      	cmp	r3, r2
 8013cf8:	d045      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013cfa:	687b      	ldr	r3, [r7, #4]
 8013cfc:	681b      	ldr	r3, [r3, #0]
 8013cfe:	4a73      	ldr	r2, [pc, #460]	@ (8013ecc <HAL_DMA_Abort+0x21c>)
 8013d00:	4293      	cmp	r3, r2
 8013d02:	d040      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d04:	687b      	ldr	r3, [r7, #4]
 8013d06:	681b      	ldr	r3, [r3, #0]
 8013d08:	4a71      	ldr	r2, [pc, #452]	@ (8013ed0 <HAL_DMA_Abort+0x220>)
 8013d0a:	4293      	cmp	r3, r2
 8013d0c:	d03b      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	4a70      	ldr	r2, [pc, #448]	@ (8013ed4 <HAL_DMA_Abort+0x224>)
 8013d14:	4293      	cmp	r3, r2
 8013d16:	d036      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d18:	687b      	ldr	r3, [r7, #4]
 8013d1a:	681b      	ldr	r3, [r3, #0]
 8013d1c:	4a6e      	ldr	r2, [pc, #440]	@ (8013ed8 <HAL_DMA_Abort+0x228>)
 8013d1e:	4293      	cmp	r3, r2
 8013d20:	d031      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d22:	687b      	ldr	r3, [r7, #4]
 8013d24:	681b      	ldr	r3, [r3, #0]
 8013d26:	4a6d      	ldr	r2, [pc, #436]	@ (8013edc <HAL_DMA_Abort+0x22c>)
 8013d28:	4293      	cmp	r3, r2
 8013d2a:	d02c      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	681b      	ldr	r3, [r3, #0]
 8013d30:	4a6b      	ldr	r2, [pc, #428]	@ (8013ee0 <HAL_DMA_Abort+0x230>)
 8013d32:	4293      	cmp	r3, r2
 8013d34:	d027      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d36:	687b      	ldr	r3, [r7, #4]
 8013d38:	681b      	ldr	r3, [r3, #0]
 8013d3a:	4a6a      	ldr	r2, [pc, #424]	@ (8013ee4 <HAL_DMA_Abort+0x234>)
 8013d3c:	4293      	cmp	r3, r2
 8013d3e:	d022      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d40:	687b      	ldr	r3, [r7, #4]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	4a68      	ldr	r2, [pc, #416]	@ (8013ee8 <HAL_DMA_Abort+0x238>)
 8013d46:	4293      	cmp	r3, r2
 8013d48:	d01d      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d4a:	687b      	ldr	r3, [r7, #4]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	4a67      	ldr	r2, [pc, #412]	@ (8013eec <HAL_DMA_Abort+0x23c>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	d018      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d54:	687b      	ldr	r3, [r7, #4]
 8013d56:	681b      	ldr	r3, [r3, #0]
 8013d58:	4a65      	ldr	r2, [pc, #404]	@ (8013ef0 <HAL_DMA_Abort+0x240>)
 8013d5a:	4293      	cmp	r3, r2
 8013d5c:	d013      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d5e:	687b      	ldr	r3, [r7, #4]
 8013d60:	681b      	ldr	r3, [r3, #0]
 8013d62:	4a64      	ldr	r2, [pc, #400]	@ (8013ef4 <HAL_DMA_Abort+0x244>)
 8013d64:	4293      	cmp	r3, r2
 8013d66:	d00e      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d68:	687b      	ldr	r3, [r7, #4]
 8013d6a:	681b      	ldr	r3, [r3, #0]
 8013d6c:	4a62      	ldr	r2, [pc, #392]	@ (8013ef8 <HAL_DMA_Abort+0x248>)
 8013d6e:	4293      	cmp	r3, r2
 8013d70:	d009      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d72:	687b      	ldr	r3, [r7, #4]
 8013d74:	681b      	ldr	r3, [r3, #0]
 8013d76:	4a61      	ldr	r2, [pc, #388]	@ (8013efc <HAL_DMA_Abort+0x24c>)
 8013d78:	4293      	cmp	r3, r2
 8013d7a:	d004      	beq.n	8013d86 <HAL_DMA_Abort+0xd6>
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	4a5f      	ldr	r2, [pc, #380]	@ (8013f00 <HAL_DMA_Abort+0x250>)
 8013d82:	4293      	cmp	r3, r2
 8013d84:	d101      	bne.n	8013d8a <HAL_DMA_Abort+0xda>
 8013d86:	2301      	movs	r3, #1
 8013d88:	e000      	b.n	8013d8c <HAL_DMA_Abort+0xdc>
 8013d8a:	2300      	movs	r3, #0
 8013d8c:	2b00      	cmp	r3, #0
 8013d8e:	d013      	beq.n	8013db8 <HAL_DMA_Abort+0x108>
    {
       /* Disable DMA All Interrupts  */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT);
 8013d90:	687b      	ldr	r3, [r7, #4]
 8013d92:	681b      	ldr	r3, [r3, #0]
 8013d94:	681a      	ldr	r2, [r3, #0]
 8013d96:	687b      	ldr	r3, [r7, #4]
 8013d98:	681b      	ldr	r3, [r3, #0]
 8013d9a:	f022 021e 	bic.w	r2, r2, #30
 8013d9e:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8013da0:	687b      	ldr	r3, [r7, #4]
 8013da2:	681b      	ldr	r3, [r3, #0]
 8013da4:	695a      	ldr	r2, [r3, #20]
 8013da6:	687b      	ldr	r3, [r7, #4]
 8013da8:	681b      	ldr	r3, [r3, #0]
 8013daa:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8013dae:	615a      	str	r2, [r3, #20]

      enableRegister = (__IO uint32_t *)(&(((DMA_Stream_TypeDef   *)hdma->Instance)->CR));
 8013db0:	687b      	ldr	r3, [r7, #4]
 8013db2:	681b      	ldr	r3, [r3, #0]
 8013db4:	617b      	str	r3, [r7, #20]
 8013db6:	e00a      	b.n	8013dce <HAL_DMA_Abort+0x11e>
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 8013db8:	687b      	ldr	r3, [r7, #4]
 8013dba:	681b      	ldr	r3, [r3, #0]
 8013dbc:	681a      	ldr	r2, [r3, #0]
 8013dbe:	687b      	ldr	r3, [r7, #4]
 8013dc0:	681b      	ldr	r3, [r3, #0]
 8013dc2:	f022 020e 	bic.w	r2, r2, #14
 8013dc6:	601a      	str	r2, [r3, #0]

      enableRegister = (__IO uint32_t *)(&(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR));
 8013dc8:	687b      	ldr	r3, [r7, #4]
 8013dca:	681b      	ldr	r3, [r3, #0]
 8013dcc:	617b      	str	r3, [r7, #20]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4a3c      	ldr	r2, [pc, #240]	@ (8013ec4 <HAL_DMA_Abort+0x214>)
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	d072      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013dd8:	687b      	ldr	r3, [r7, #4]
 8013dda:	681b      	ldr	r3, [r3, #0]
 8013ddc:	4a3a      	ldr	r2, [pc, #232]	@ (8013ec8 <HAL_DMA_Abort+0x218>)
 8013dde:	4293      	cmp	r3, r2
 8013de0:	d06d      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013de2:	687b      	ldr	r3, [r7, #4]
 8013de4:	681b      	ldr	r3, [r3, #0]
 8013de6:	4a39      	ldr	r2, [pc, #228]	@ (8013ecc <HAL_DMA_Abort+0x21c>)
 8013de8:	4293      	cmp	r3, r2
 8013dea:	d068      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	681b      	ldr	r3, [r3, #0]
 8013df0:	4a37      	ldr	r2, [pc, #220]	@ (8013ed0 <HAL_DMA_Abort+0x220>)
 8013df2:	4293      	cmp	r3, r2
 8013df4:	d063      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	4a36      	ldr	r2, [pc, #216]	@ (8013ed4 <HAL_DMA_Abort+0x224>)
 8013dfc:	4293      	cmp	r3, r2
 8013dfe:	d05e      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e00:	687b      	ldr	r3, [r7, #4]
 8013e02:	681b      	ldr	r3, [r3, #0]
 8013e04:	4a34      	ldr	r2, [pc, #208]	@ (8013ed8 <HAL_DMA_Abort+0x228>)
 8013e06:	4293      	cmp	r3, r2
 8013e08:	d059      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	4a33      	ldr	r2, [pc, #204]	@ (8013edc <HAL_DMA_Abort+0x22c>)
 8013e10:	4293      	cmp	r3, r2
 8013e12:	d054      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e14:	687b      	ldr	r3, [r7, #4]
 8013e16:	681b      	ldr	r3, [r3, #0]
 8013e18:	4a31      	ldr	r2, [pc, #196]	@ (8013ee0 <HAL_DMA_Abort+0x230>)
 8013e1a:	4293      	cmp	r3, r2
 8013e1c:	d04f      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e1e:	687b      	ldr	r3, [r7, #4]
 8013e20:	681b      	ldr	r3, [r3, #0]
 8013e22:	4a30      	ldr	r2, [pc, #192]	@ (8013ee4 <HAL_DMA_Abort+0x234>)
 8013e24:	4293      	cmp	r3, r2
 8013e26:	d04a      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e28:	687b      	ldr	r3, [r7, #4]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	4a2e      	ldr	r2, [pc, #184]	@ (8013ee8 <HAL_DMA_Abort+0x238>)
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	d045      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e32:	687b      	ldr	r3, [r7, #4]
 8013e34:	681b      	ldr	r3, [r3, #0]
 8013e36:	4a2d      	ldr	r2, [pc, #180]	@ (8013eec <HAL_DMA_Abort+0x23c>)
 8013e38:	4293      	cmp	r3, r2
 8013e3a:	d040      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	681b      	ldr	r3, [r3, #0]
 8013e40:	4a2b      	ldr	r2, [pc, #172]	@ (8013ef0 <HAL_DMA_Abort+0x240>)
 8013e42:	4293      	cmp	r3, r2
 8013e44:	d03b      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	681b      	ldr	r3, [r3, #0]
 8013e4a:	4a2a      	ldr	r2, [pc, #168]	@ (8013ef4 <HAL_DMA_Abort+0x244>)
 8013e4c:	4293      	cmp	r3, r2
 8013e4e:	d036      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e50:	687b      	ldr	r3, [r7, #4]
 8013e52:	681b      	ldr	r3, [r3, #0]
 8013e54:	4a28      	ldr	r2, [pc, #160]	@ (8013ef8 <HAL_DMA_Abort+0x248>)
 8013e56:	4293      	cmp	r3, r2
 8013e58:	d031      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	681b      	ldr	r3, [r3, #0]
 8013e5e:	4a27      	ldr	r2, [pc, #156]	@ (8013efc <HAL_DMA_Abort+0x24c>)
 8013e60:	4293      	cmp	r3, r2
 8013e62:	d02c      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	681b      	ldr	r3, [r3, #0]
 8013e68:	4a25      	ldr	r2, [pc, #148]	@ (8013f00 <HAL_DMA_Abort+0x250>)
 8013e6a:	4293      	cmp	r3, r2
 8013e6c:	d027      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e6e:	687b      	ldr	r3, [r7, #4]
 8013e70:	681b      	ldr	r3, [r3, #0]
 8013e72:	4a24      	ldr	r2, [pc, #144]	@ (8013f04 <HAL_DMA_Abort+0x254>)
 8013e74:	4293      	cmp	r3, r2
 8013e76:	d022      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e78:	687b      	ldr	r3, [r7, #4]
 8013e7a:	681b      	ldr	r3, [r3, #0]
 8013e7c:	4a22      	ldr	r2, [pc, #136]	@ (8013f08 <HAL_DMA_Abort+0x258>)
 8013e7e:	4293      	cmp	r3, r2
 8013e80:	d01d      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	681b      	ldr	r3, [r3, #0]
 8013e86:	4a21      	ldr	r2, [pc, #132]	@ (8013f0c <HAL_DMA_Abort+0x25c>)
 8013e88:	4293      	cmp	r3, r2
 8013e8a:	d018      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e8c:	687b      	ldr	r3, [r7, #4]
 8013e8e:	681b      	ldr	r3, [r3, #0]
 8013e90:	4a1f      	ldr	r2, [pc, #124]	@ (8013f10 <HAL_DMA_Abort+0x260>)
 8013e92:	4293      	cmp	r3, r2
 8013e94:	d013      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013e96:	687b      	ldr	r3, [r7, #4]
 8013e98:	681b      	ldr	r3, [r3, #0]
 8013e9a:	4a1e      	ldr	r2, [pc, #120]	@ (8013f14 <HAL_DMA_Abort+0x264>)
 8013e9c:	4293      	cmp	r3, r2
 8013e9e:	d00e      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013ea0:	687b      	ldr	r3, [r7, #4]
 8013ea2:	681b      	ldr	r3, [r3, #0]
 8013ea4:	4a1c      	ldr	r2, [pc, #112]	@ (8013f18 <HAL_DMA_Abort+0x268>)
 8013ea6:	4293      	cmp	r3, r2
 8013ea8:	d009      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	681b      	ldr	r3, [r3, #0]
 8013eae:	4a1b      	ldr	r2, [pc, #108]	@ (8013f1c <HAL_DMA_Abort+0x26c>)
 8013eb0:	4293      	cmp	r3, r2
 8013eb2:	d004      	beq.n	8013ebe <HAL_DMA_Abort+0x20e>
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	4a19      	ldr	r2, [pc, #100]	@ (8013f20 <HAL_DMA_Abort+0x270>)
 8013eba:	4293      	cmp	r3, r2
 8013ebc:	d132      	bne.n	8013f24 <HAL_DMA_Abort+0x274>
 8013ebe:	2301      	movs	r3, #1
 8013ec0:	e031      	b.n	8013f26 <HAL_DMA_Abort+0x276>
 8013ec2:	bf00      	nop
 8013ec4:	40020010 	.word	0x40020010
 8013ec8:	40020028 	.word	0x40020028
 8013ecc:	40020040 	.word	0x40020040
 8013ed0:	40020058 	.word	0x40020058
 8013ed4:	40020070 	.word	0x40020070
 8013ed8:	40020088 	.word	0x40020088
 8013edc:	400200a0 	.word	0x400200a0
 8013ee0:	400200b8 	.word	0x400200b8
 8013ee4:	40020410 	.word	0x40020410
 8013ee8:	40020428 	.word	0x40020428
 8013eec:	40020440 	.word	0x40020440
 8013ef0:	40020458 	.word	0x40020458
 8013ef4:	40020470 	.word	0x40020470
 8013ef8:	40020488 	.word	0x40020488
 8013efc:	400204a0 	.word	0x400204a0
 8013f00:	400204b8 	.word	0x400204b8
 8013f04:	58025408 	.word	0x58025408
 8013f08:	5802541c 	.word	0x5802541c
 8013f0c:	58025430 	.word	0x58025430
 8013f10:	58025444 	.word	0x58025444
 8013f14:	58025458 	.word	0x58025458
 8013f18:	5802546c 	.word	0x5802546c
 8013f1c:	58025480 	.word	0x58025480
 8013f20:	58025494 	.word	0x58025494
 8013f24:	2300      	movs	r3, #0
 8013f26:	2b00      	cmp	r3, #0
 8013f28:	d007      	beq.n	8013f3a <HAL_DMA_Abort+0x28a>
    {
      /* disable the DMAMUX sync overrun IT */
      hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8013f2a:	687b      	ldr	r3, [r7, #4]
 8013f2c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013f2e:	681a      	ldr	r2, [r3, #0]
 8013f30:	687b      	ldr	r3, [r7, #4]
 8013f32:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013f34:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8013f38:	601a      	str	r2, [r3, #0]
    }

    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8013f3a:	687b      	ldr	r3, [r7, #4]
 8013f3c:	681b      	ldr	r3, [r3, #0]
 8013f3e:	4a6d      	ldr	r2, [pc, #436]	@ (80140f4 <HAL_DMA_Abort+0x444>)
 8013f40:	4293      	cmp	r3, r2
 8013f42:	d04a      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	681b      	ldr	r3, [r3, #0]
 8013f48:	4a6b      	ldr	r2, [pc, #428]	@ (80140f8 <HAL_DMA_Abort+0x448>)
 8013f4a:	4293      	cmp	r3, r2
 8013f4c:	d045      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f4e:	687b      	ldr	r3, [r7, #4]
 8013f50:	681b      	ldr	r3, [r3, #0]
 8013f52:	4a6a      	ldr	r2, [pc, #424]	@ (80140fc <HAL_DMA_Abort+0x44c>)
 8013f54:	4293      	cmp	r3, r2
 8013f56:	d040      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f58:	687b      	ldr	r3, [r7, #4]
 8013f5a:	681b      	ldr	r3, [r3, #0]
 8013f5c:	4a68      	ldr	r2, [pc, #416]	@ (8014100 <HAL_DMA_Abort+0x450>)
 8013f5e:	4293      	cmp	r3, r2
 8013f60:	d03b      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f62:	687b      	ldr	r3, [r7, #4]
 8013f64:	681b      	ldr	r3, [r3, #0]
 8013f66:	4a67      	ldr	r2, [pc, #412]	@ (8014104 <HAL_DMA_Abort+0x454>)
 8013f68:	4293      	cmp	r3, r2
 8013f6a:	d036      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f6c:	687b      	ldr	r3, [r7, #4]
 8013f6e:	681b      	ldr	r3, [r3, #0]
 8013f70:	4a65      	ldr	r2, [pc, #404]	@ (8014108 <HAL_DMA_Abort+0x458>)
 8013f72:	4293      	cmp	r3, r2
 8013f74:	d031      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f76:	687b      	ldr	r3, [r7, #4]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	4a64      	ldr	r2, [pc, #400]	@ (801410c <HAL_DMA_Abort+0x45c>)
 8013f7c:	4293      	cmp	r3, r2
 8013f7e:	d02c      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4a62      	ldr	r2, [pc, #392]	@ (8014110 <HAL_DMA_Abort+0x460>)
 8013f86:	4293      	cmp	r3, r2
 8013f88:	d027      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	4a61      	ldr	r2, [pc, #388]	@ (8014114 <HAL_DMA_Abort+0x464>)
 8013f90:	4293      	cmp	r3, r2
 8013f92:	d022      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	681b      	ldr	r3, [r3, #0]
 8013f98:	4a5f      	ldr	r2, [pc, #380]	@ (8014118 <HAL_DMA_Abort+0x468>)
 8013f9a:	4293      	cmp	r3, r2
 8013f9c:	d01d      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	681b      	ldr	r3, [r3, #0]
 8013fa2:	4a5e      	ldr	r2, [pc, #376]	@ (801411c <HAL_DMA_Abort+0x46c>)
 8013fa4:	4293      	cmp	r3, r2
 8013fa6:	d018      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013fa8:	687b      	ldr	r3, [r7, #4]
 8013faa:	681b      	ldr	r3, [r3, #0]
 8013fac:	4a5c      	ldr	r2, [pc, #368]	@ (8014120 <HAL_DMA_Abort+0x470>)
 8013fae:	4293      	cmp	r3, r2
 8013fb0:	d013      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013fb2:	687b      	ldr	r3, [r7, #4]
 8013fb4:	681b      	ldr	r3, [r3, #0]
 8013fb6:	4a5b      	ldr	r2, [pc, #364]	@ (8014124 <HAL_DMA_Abort+0x474>)
 8013fb8:	4293      	cmp	r3, r2
 8013fba:	d00e      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013fbc:	687b      	ldr	r3, [r7, #4]
 8013fbe:	681b      	ldr	r3, [r3, #0]
 8013fc0:	4a59      	ldr	r2, [pc, #356]	@ (8014128 <HAL_DMA_Abort+0x478>)
 8013fc2:	4293      	cmp	r3, r2
 8013fc4:	d009      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013fc6:	687b      	ldr	r3, [r7, #4]
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	4a58      	ldr	r2, [pc, #352]	@ (801412c <HAL_DMA_Abort+0x47c>)
 8013fcc:	4293      	cmp	r3, r2
 8013fce:	d004      	beq.n	8013fda <HAL_DMA_Abort+0x32a>
 8013fd0:	687b      	ldr	r3, [r7, #4]
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	4a56      	ldr	r2, [pc, #344]	@ (8014130 <HAL_DMA_Abort+0x480>)
 8013fd6:	4293      	cmp	r3, r2
 8013fd8:	d108      	bne.n	8013fec <HAL_DMA_Abort+0x33c>
 8013fda:	687b      	ldr	r3, [r7, #4]
 8013fdc:	681b      	ldr	r3, [r3, #0]
 8013fde:	681a      	ldr	r2, [r3, #0]
 8013fe0:	687b      	ldr	r3, [r7, #4]
 8013fe2:	681b      	ldr	r3, [r3, #0]
 8013fe4:	f022 0201 	bic.w	r2, r2, #1
 8013fe8:	601a      	str	r2, [r3, #0]
 8013fea:	e007      	b.n	8013ffc <HAL_DMA_Abort+0x34c>
 8013fec:	687b      	ldr	r3, [r7, #4]
 8013fee:	681b      	ldr	r3, [r3, #0]
 8013ff0:	681a      	ldr	r2, [r3, #0]
 8013ff2:	687b      	ldr	r3, [r7, #4]
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	f022 0201 	bic.w	r2, r2, #1
 8013ffa:	601a      	str	r2, [r3, #0]

    /* Check if the DMA Stream is effectively disabled */
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8013ffc:	e013      	b.n	8014026 <HAL_DMA_Abort+0x376>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8013ffe:	f7fe f8bd 	bl	801217c <HAL_GetTick>
 8014002:	4602      	mov	r2, r0
 8014004:	693b      	ldr	r3, [r7, #16]
 8014006:	1ad3      	subs	r3, r2, r3
 8014008:	2b05      	cmp	r3, #5
 801400a:	d90c      	bls.n	8014026 <HAL_DMA_Abort+0x376>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 801400c:	687b      	ldr	r3, [r7, #4]
 801400e:	2220      	movs	r2, #32
 8014010:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_ERROR;
 8014012:	687b      	ldr	r3, [r7, #4]
 8014014:	2203      	movs	r2, #3
 8014016:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 801401a:	687b      	ldr	r3, [r7, #4]
 801401c:	2200      	movs	r2, #0
 801401e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        return HAL_ERROR;
 8014022:	2301      	movs	r3, #1
 8014024:	e12d      	b.n	8014282 <HAL_DMA_Abort+0x5d2>
    while(((*enableRegister) & DMA_SxCR_EN) != 0U)
 8014026:	697b      	ldr	r3, [r7, #20]
 8014028:	681b      	ldr	r3, [r3, #0]
 801402a:	f003 0301 	and.w	r3, r3, #1
 801402e:	2b00      	cmp	r3, #0
 8014030:	d1e5      	bne.n	8013ffe <HAL_DMA_Abort+0x34e>
      }
    }

    /* Clear all interrupt flags at correct offset within the register */
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	4a2f      	ldr	r2, [pc, #188]	@ (80140f4 <HAL_DMA_Abort+0x444>)
 8014038:	4293      	cmp	r3, r2
 801403a:	d04a      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	681b      	ldr	r3, [r3, #0]
 8014040:	4a2d      	ldr	r2, [pc, #180]	@ (80140f8 <HAL_DMA_Abort+0x448>)
 8014042:	4293      	cmp	r3, r2
 8014044:	d045      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 8014046:	687b      	ldr	r3, [r7, #4]
 8014048:	681b      	ldr	r3, [r3, #0]
 801404a:	4a2c      	ldr	r2, [pc, #176]	@ (80140fc <HAL_DMA_Abort+0x44c>)
 801404c:	4293      	cmp	r3, r2
 801404e:	d040      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	681b      	ldr	r3, [r3, #0]
 8014054:	4a2a      	ldr	r2, [pc, #168]	@ (8014100 <HAL_DMA_Abort+0x450>)
 8014056:	4293      	cmp	r3, r2
 8014058:	d03b      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 801405a:	687b      	ldr	r3, [r7, #4]
 801405c:	681b      	ldr	r3, [r3, #0]
 801405e:	4a29      	ldr	r2, [pc, #164]	@ (8014104 <HAL_DMA_Abort+0x454>)
 8014060:	4293      	cmp	r3, r2
 8014062:	d036      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 8014064:	687b      	ldr	r3, [r7, #4]
 8014066:	681b      	ldr	r3, [r3, #0]
 8014068:	4a27      	ldr	r2, [pc, #156]	@ (8014108 <HAL_DMA_Abort+0x458>)
 801406a:	4293      	cmp	r3, r2
 801406c:	d031      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	681b      	ldr	r3, [r3, #0]
 8014072:	4a26      	ldr	r2, [pc, #152]	@ (801410c <HAL_DMA_Abort+0x45c>)
 8014074:	4293      	cmp	r3, r2
 8014076:	d02c      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 8014078:	687b      	ldr	r3, [r7, #4]
 801407a:	681b      	ldr	r3, [r3, #0]
 801407c:	4a24      	ldr	r2, [pc, #144]	@ (8014110 <HAL_DMA_Abort+0x460>)
 801407e:	4293      	cmp	r3, r2
 8014080:	d027      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 8014082:	687b      	ldr	r3, [r7, #4]
 8014084:	681b      	ldr	r3, [r3, #0]
 8014086:	4a23      	ldr	r2, [pc, #140]	@ (8014114 <HAL_DMA_Abort+0x464>)
 8014088:	4293      	cmp	r3, r2
 801408a:	d022      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	681b      	ldr	r3, [r3, #0]
 8014090:	4a21      	ldr	r2, [pc, #132]	@ (8014118 <HAL_DMA_Abort+0x468>)
 8014092:	4293      	cmp	r3, r2
 8014094:	d01d      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	681b      	ldr	r3, [r3, #0]
 801409a:	4a20      	ldr	r2, [pc, #128]	@ (801411c <HAL_DMA_Abort+0x46c>)
 801409c:	4293      	cmp	r3, r2
 801409e:	d018      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	681b      	ldr	r3, [r3, #0]
 80140a4:	4a1e      	ldr	r2, [pc, #120]	@ (8014120 <HAL_DMA_Abort+0x470>)
 80140a6:	4293      	cmp	r3, r2
 80140a8:	d013      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 80140aa:	687b      	ldr	r3, [r7, #4]
 80140ac:	681b      	ldr	r3, [r3, #0]
 80140ae:	4a1d      	ldr	r2, [pc, #116]	@ (8014124 <HAL_DMA_Abort+0x474>)
 80140b0:	4293      	cmp	r3, r2
 80140b2:	d00e      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 80140b4:	687b      	ldr	r3, [r7, #4]
 80140b6:	681b      	ldr	r3, [r3, #0]
 80140b8:	4a1b      	ldr	r2, [pc, #108]	@ (8014128 <HAL_DMA_Abort+0x478>)
 80140ba:	4293      	cmp	r3, r2
 80140bc:	d009      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 80140be:	687b      	ldr	r3, [r7, #4]
 80140c0:	681b      	ldr	r3, [r3, #0]
 80140c2:	4a1a      	ldr	r2, [pc, #104]	@ (801412c <HAL_DMA_Abort+0x47c>)
 80140c4:	4293      	cmp	r3, r2
 80140c6:	d004      	beq.n	80140d2 <HAL_DMA_Abort+0x422>
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	681b      	ldr	r3, [r3, #0]
 80140cc:	4a18      	ldr	r2, [pc, #96]	@ (8014130 <HAL_DMA_Abort+0x480>)
 80140ce:	4293      	cmp	r3, r2
 80140d0:	d101      	bne.n	80140d6 <HAL_DMA_Abort+0x426>
 80140d2:	2301      	movs	r3, #1
 80140d4:	e000      	b.n	80140d8 <HAL_DMA_Abort+0x428>
 80140d6:	2300      	movs	r3, #0
 80140d8:	2b00      	cmp	r3, #0
 80140da:	d02b      	beq.n	8014134 <HAL_DMA_Abort+0x484>
    {
      regs_dma = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80140dc:	687b      	ldr	r3, [r7, #4]
 80140de:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80140e0:	60bb      	str	r3, [r7, #8]
      regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80140e2:	687b      	ldr	r3, [r7, #4]
 80140e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80140e6:	f003 031f 	and.w	r3, r3, #31
 80140ea:	223f      	movs	r2, #63	@ 0x3f
 80140ec:	409a      	lsls	r2, r3
 80140ee:	68bb      	ldr	r3, [r7, #8]
 80140f0:	609a      	str	r2, [r3, #8]
 80140f2:	e02a      	b.n	801414a <HAL_DMA_Abort+0x49a>
 80140f4:	40020010 	.word	0x40020010
 80140f8:	40020028 	.word	0x40020028
 80140fc:	40020040 	.word	0x40020040
 8014100:	40020058 	.word	0x40020058
 8014104:	40020070 	.word	0x40020070
 8014108:	40020088 	.word	0x40020088
 801410c:	400200a0 	.word	0x400200a0
 8014110:	400200b8 	.word	0x400200b8
 8014114:	40020410 	.word	0x40020410
 8014118:	40020428 	.word	0x40020428
 801411c:	40020440 	.word	0x40020440
 8014120:	40020458 	.word	0x40020458
 8014124:	40020470 	.word	0x40020470
 8014128:	40020488 	.word	0x40020488
 801412c:	400204a0 	.word	0x400204a0
 8014130:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8014134:	687b      	ldr	r3, [r7, #4]
 8014136:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014138:	60fb      	str	r3, [r7, #12]
      regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801413e:	f003 031f 	and.w	r3, r3, #31
 8014142:	2201      	movs	r2, #1
 8014144:	409a      	lsls	r2, r3
 8014146:	68fb      	ldr	r3, [r7, #12]
 8014148:	605a      	str	r2, [r3, #4]
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801414a:	687b      	ldr	r3, [r7, #4]
 801414c:	681b      	ldr	r3, [r3, #0]
 801414e:	4a4f      	ldr	r2, [pc, #316]	@ (801428c <HAL_DMA_Abort+0x5dc>)
 8014150:	4293      	cmp	r3, r2
 8014152:	d072      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	681b      	ldr	r3, [r3, #0]
 8014158:	4a4d      	ldr	r2, [pc, #308]	@ (8014290 <HAL_DMA_Abort+0x5e0>)
 801415a:	4293      	cmp	r3, r2
 801415c:	d06d      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 801415e:	687b      	ldr	r3, [r7, #4]
 8014160:	681b      	ldr	r3, [r3, #0]
 8014162:	4a4c      	ldr	r2, [pc, #304]	@ (8014294 <HAL_DMA_Abort+0x5e4>)
 8014164:	4293      	cmp	r3, r2
 8014166:	d068      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014168:	687b      	ldr	r3, [r7, #4]
 801416a:	681b      	ldr	r3, [r3, #0]
 801416c:	4a4a      	ldr	r2, [pc, #296]	@ (8014298 <HAL_DMA_Abort+0x5e8>)
 801416e:	4293      	cmp	r3, r2
 8014170:	d063      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014172:	687b      	ldr	r3, [r7, #4]
 8014174:	681b      	ldr	r3, [r3, #0]
 8014176:	4a49      	ldr	r2, [pc, #292]	@ (801429c <HAL_DMA_Abort+0x5ec>)
 8014178:	4293      	cmp	r3, r2
 801417a:	d05e      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 801417c:	687b      	ldr	r3, [r7, #4]
 801417e:	681b      	ldr	r3, [r3, #0]
 8014180:	4a47      	ldr	r2, [pc, #284]	@ (80142a0 <HAL_DMA_Abort+0x5f0>)
 8014182:	4293      	cmp	r3, r2
 8014184:	d059      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014186:	687b      	ldr	r3, [r7, #4]
 8014188:	681b      	ldr	r3, [r3, #0]
 801418a:	4a46      	ldr	r2, [pc, #280]	@ (80142a4 <HAL_DMA_Abort+0x5f4>)
 801418c:	4293      	cmp	r3, r2
 801418e:	d054      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014190:	687b      	ldr	r3, [r7, #4]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	4a44      	ldr	r2, [pc, #272]	@ (80142a8 <HAL_DMA_Abort+0x5f8>)
 8014196:	4293      	cmp	r3, r2
 8014198:	d04f      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 801419a:	687b      	ldr	r3, [r7, #4]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4a43      	ldr	r2, [pc, #268]	@ (80142ac <HAL_DMA_Abort+0x5fc>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d04a      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141a4:	687b      	ldr	r3, [r7, #4]
 80141a6:	681b      	ldr	r3, [r3, #0]
 80141a8:	4a41      	ldr	r2, [pc, #260]	@ (80142b0 <HAL_DMA_Abort+0x600>)
 80141aa:	4293      	cmp	r3, r2
 80141ac:	d045      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141ae:	687b      	ldr	r3, [r7, #4]
 80141b0:	681b      	ldr	r3, [r3, #0]
 80141b2:	4a40      	ldr	r2, [pc, #256]	@ (80142b4 <HAL_DMA_Abort+0x604>)
 80141b4:	4293      	cmp	r3, r2
 80141b6:	d040      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141b8:	687b      	ldr	r3, [r7, #4]
 80141ba:	681b      	ldr	r3, [r3, #0]
 80141bc:	4a3e      	ldr	r2, [pc, #248]	@ (80142b8 <HAL_DMA_Abort+0x608>)
 80141be:	4293      	cmp	r3, r2
 80141c0:	d03b      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141c2:	687b      	ldr	r3, [r7, #4]
 80141c4:	681b      	ldr	r3, [r3, #0]
 80141c6:	4a3d      	ldr	r2, [pc, #244]	@ (80142bc <HAL_DMA_Abort+0x60c>)
 80141c8:	4293      	cmp	r3, r2
 80141ca:	d036      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141cc:	687b      	ldr	r3, [r7, #4]
 80141ce:	681b      	ldr	r3, [r3, #0]
 80141d0:	4a3b      	ldr	r2, [pc, #236]	@ (80142c0 <HAL_DMA_Abort+0x610>)
 80141d2:	4293      	cmp	r3, r2
 80141d4:	d031      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141d6:	687b      	ldr	r3, [r7, #4]
 80141d8:	681b      	ldr	r3, [r3, #0]
 80141da:	4a3a      	ldr	r2, [pc, #232]	@ (80142c4 <HAL_DMA_Abort+0x614>)
 80141dc:	4293      	cmp	r3, r2
 80141de:	d02c      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141e0:	687b      	ldr	r3, [r7, #4]
 80141e2:	681b      	ldr	r3, [r3, #0]
 80141e4:	4a38      	ldr	r2, [pc, #224]	@ (80142c8 <HAL_DMA_Abort+0x618>)
 80141e6:	4293      	cmp	r3, r2
 80141e8:	d027      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	4a37      	ldr	r2, [pc, #220]	@ (80142cc <HAL_DMA_Abort+0x61c>)
 80141f0:	4293      	cmp	r3, r2
 80141f2:	d022      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141f4:	687b      	ldr	r3, [r7, #4]
 80141f6:	681b      	ldr	r3, [r3, #0]
 80141f8:	4a35      	ldr	r2, [pc, #212]	@ (80142d0 <HAL_DMA_Abort+0x620>)
 80141fa:	4293      	cmp	r3, r2
 80141fc:	d01d      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 80141fe:	687b      	ldr	r3, [r7, #4]
 8014200:	681b      	ldr	r3, [r3, #0]
 8014202:	4a34      	ldr	r2, [pc, #208]	@ (80142d4 <HAL_DMA_Abort+0x624>)
 8014204:	4293      	cmp	r3, r2
 8014206:	d018      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014208:	687b      	ldr	r3, [r7, #4]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	4a32      	ldr	r2, [pc, #200]	@ (80142d8 <HAL_DMA_Abort+0x628>)
 801420e:	4293      	cmp	r3, r2
 8014210:	d013      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014212:	687b      	ldr	r3, [r7, #4]
 8014214:	681b      	ldr	r3, [r3, #0]
 8014216:	4a31      	ldr	r2, [pc, #196]	@ (80142dc <HAL_DMA_Abort+0x62c>)
 8014218:	4293      	cmp	r3, r2
 801421a:	d00e      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 801421c:	687b      	ldr	r3, [r7, #4]
 801421e:	681b      	ldr	r3, [r3, #0]
 8014220:	4a2f      	ldr	r2, [pc, #188]	@ (80142e0 <HAL_DMA_Abort+0x630>)
 8014222:	4293      	cmp	r3, r2
 8014224:	d009      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014226:	687b      	ldr	r3, [r7, #4]
 8014228:	681b      	ldr	r3, [r3, #0]
 801422a:	4a2e      	ldr	r2, [pc, #184]	@ (80142e4 <HAL_DMA_Abort+0x634>)
 801422c:	4293      	cmp	r3, r2
 801422e:	d004      	beq.n	801423a <HAL_DMA_Abort+0x58a>
 8014230:	687b      	ldr	r3, [r7, #4]
 8014232:	681b      	ldr	r3, [r3, #0]
 8014234:	4a2c      	ldr	r2, [pc, #176]	@ (80142e8 <HAL_DMA_Abort+0x638>)
 8014236:	4293      	cmp	r3, r2
 8014238:	d101      	bne.n	801423e <HAL_DMA_Abort+0x58e>
 801423a:	2301      	movs	r3, #1
 801423c:	e000      	b.n	8014240 <HAL_DMA_Abort+0x590>
 801423e:	2300      	movs	r3, #0
 8014240:	2b00      	cmp	r3, #0
 8014242:	d015      	beq.n	8014270 <HAL_DMA_Abort+0x5c0>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014244:	687b      	ldr	r3, [r7, #4]
 8014246:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014248:	687a      	ldr	r2, [r7, #4]
 801424a:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 801424c:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 801424e:	687b      	ldr	r3, [r7, #4]
 8014250:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014252:	2b00      	cmp	r3, #0
 8014254:	d00c      	beq.n	8014270 <HAL_DMA_Abort+0x5c0>
      {
        /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT */
        /* disable the request gen overrun IT */
        hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8014256:	687b      	ldr	r3, [r7, #4]
 8014258:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801425a:	681a      	ldr	r2, [r3, #0]
 801425c:	687b      	ldr	r3, [r7, #4]
 801425e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014260:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014264:	601a      	str	r2, [r3, #0]

        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014266:	687b      	ldr	r3, [r7, #4]
 8014268:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801426a:	687a      	ldr	r2, [r7, #4]
 801426c:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801426e:	605a      	str	r2, [r3, #4]
      }
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8014270:	687b      	ldr	r3, [r7, #4]
 8014272:	2201      	movs	r2, #1
 8014274:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8014278:	687b      	ldr	r3, [r7, #4]
 801427a:	2200      	movs	r2, #0
 801427c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }

  return HAL_OK;
 8014280:	2300      	movs	r3, #0
}
 8014282:	4618      	mov	r0, r3
 8014284:	3718      	adds	r7, #24
 8014286:	46bd      	mov	sp, r7
 8014288:	bd80      	pop	{r7, pc}
 801428a:	bf00      	nop
 801428c:	40020010 	.word	0x40020010
 8014290:	40020028 	.word	0x40020028
 8014294:	40020040 	.word	0x40020040
 8014298:	40020058 	.word	0x40020058
 801429c:	40020070 	.word	0x40020070
 80142a0:	40020088 	.word	0x40020088
 80142a4:	400200a0 	.word	0x400200a0
 80142a8:	400200b8 	.word	0x400200b8
 80142ac:	40020410 	.word	0x40020410
 80142b0:	40020428 	.word	0x40020428
 80142b4:	40020440 	.word	0x40020440
 80142b8:	40020458 	.word	0x40020458
 80142bc:	40020470 	.word	0x40020470
 80142c0:	40020488 	.word	0x40020488
 80142c4:	400204a0 	.word	0x400204a0
 80142c8:	400204b8 	.word	0x400204b8
 80142cc:	58025408 	.word	0x58025408
 80142d0:	5802541c 	.word	0x5802541c
 80142d4:	58025430 	.word	0x58025430
 80142d8:	58025444 	.word	0x58025444
 80142dc:	58025458 	.word	0x58025458
 80142e0:	5802546c 	.word	0x5802546c
 80142e4:	58025480 	.word	0x58025480
 80142e8:	58025494 	.word	0x58025494

080142ec <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
  BDMA_Base_Registers *regs_bdma;

  /* Check the DMA peripheral handle */
  if(hdma == NULL)
 80142f4:	687b      	ldr	r3, [r7, #4]
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d101      	bne.n	80142fe <HAL_DMA_Abort_IT+0x12>
  {
    return HAL_ERROR;
 80142fa:	2301      	movs	r3, #1
 80142fc:	e237      	b.n	801476e <HAL_DMA_Abort_IT+0x482>
  }

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80142fe:	687b      	ldr	r3, [r7, #4]
 8014300:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014304:	b2db      	uxtb	r3, r3
 8014306:	2b02      	cmp	r3, #2
 8014308:	d004      	beq.n	8014314 <HAL_DMA_Abort_IT+0x28>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 801430a:	687b      	ldr	r3, [r7, #4]
 801430c:	2280      	movs	r2, #128	@ 0x80
 801430e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8014310:	2301      	movs	r3, #1
 8014312:	e22c      	b.n	801476e <HAL_DMA_Abort_IT+0x482>
  }
  else
  {
    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8014314:	687b      	ldr	r3, [r7, #4]
 8014316:	681b      	ldr	r3, [r3, #0]
 8014318:	4a5c      	ldr	r2, [pc, #368]	@ (801448c <HAL_DMA_Abort_IT+0x1a0>)
 801431a:	4293      	cmp	r3, r2
 801431c:	d04a      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 801431e:	687b      	ldr	r3, [r7, #4]
 8014320:	681b      	ldr	r3, [r3, #0]
 8014322:	4a5b      	ldr	r2, [pc, #364]	@ (8014490 <HAL_DMA_Abort_IT+0x1a4>)
 8014324:	4293      	cmp	r3, r2
 8014326:	d045      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014328:	687b      	ldr	r3, [r7, #4]
 801432a:	681b      	ldr	r3, [r3, #0]
 801432c:	4a59      	ldr	r2, [pc, #356]	@ (8014494 <HAL_DMA_Abort_IT+0x1a8>)
 801432e:	4293      	cmp	r3, r2
 8014330:	d040      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014332:	687b      	ldr	r3, [r7, #4]
 8014334:	681b      	ldr	r3, [r3, #0]
 8014336:	4a58      	ldr	r2, [pc, #352]	@ (8014498 <HAL_DMA_Abort_IT+0x1ac>)
 8014338:	4293      	cmp	r3, r2
 801433a:	d03b      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 801433c:	687b      	ldr	r3, [r7, #4]
 801433e:	681b      	ldr	r3, [r3, #0]
 8014340:	4a56      	ldr	r2, [pc, #344]	@ (801449c <HAL_DMA_Abort_IT+0x1b0>)
 8014342:	4293      	cmp	r3, r2
 8014344:	d036      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	4a55      	ldr	r2, [pc, #340]	@ (80144a0 <HAL_DMA_Abort_IT+0x1b4>)
 801434c:	4293      	cmp	r3, r2
 801434e:	d031      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014350:	687b      	ldr	r3, [r7, #4]
 8014352:	681b      	ldr	r3, [r3, #0]
 8014354:	4a53      	ldr	r2, [pc, #332]	@ (80144a4 <HAL_DMA_Abort_IT+0x1b8>)
 8014356:	4293      	cmp	r3, r2
 8014358:	d02c      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 801435a:	687b      	ldr	r3, [r7, #4]
 801435c:	681b      	ldr	r3, [r3, #0]
 801435e:	4a52      	ldr	r2, [pc, #328]	@ (80144a8 <HAL_DMA_Abort_IT+0x1bc>)
 8014360:	4293      	cmp	r3, r2
 8014362:	d027      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014364:	687b      	ldr	r3, [r7, #4]
 8014366:	681b      	ldr	r3, [r3, #0]
 8014368:	4a50      	ldr	r2, [pc, #320]	@ (80144ac <HAL_DMA_Abort_IT+0x1c0>)
 801436a:	4293      	cmp	r3, r2
 801436c:	d022      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 801436e:	687b      	ldr	r3, [r7, #4]
 8014370:	681b      	ldr	r3, [r3, #0]
 8014372:	4a4f      	ldr	r2, [pc, #316]	@ (80144b0 <HAL_DMA_Abort_IT+0x1c4>)
 8014374:	4293      	cmp	r3, r2
 8014376:	d01d      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	4a4d      	ldr	r2, [pc, #308]	@ (80144b4 <HAL_DMA_Abort_IT+0x1c8>)
 801437e:	4293      	cmp	r3, r2
 8014380:	d018      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014382:	687b      	ldr	r3, [r7, #4]
 8014384:	681b      	ldr	r3, [r3, #0]
 8014386:	4a4c      	ldr	r2, [pc, #304]	@ (80144b8 <HAL_DMA_Abort_IT+0x1cc>)
 8014388:	4293      	cmp	r3, r2
 801438a:	d013      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 801438c:	687b      	ldr	r3, [r7, #4]
 801438e:	681b      	ldr	r3, [r3, #0]
 8014390:	4a4a      	ldr	r2, [pc, #296]	@ (80144bc <HAL_DMA_Abort_IT+0x1d0>)
 8014392:	4293      	cmp	r3, r2
 8014394:	d00e      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 8014396:	687b      	ldr	r3, [r7, #4]
 8014398:	681b      	ldr	r3, [r3, #0]
 801439a:	4a49      	ldr	r2, [pc, #292]	@ (80144c0 <HAL_DMA_Abort_IT+0x1d4>)
 801439c:	4293      	cmp	r3, r2
 801439e:	d009      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 80143a0:	687b      	ldr	r3, [r7, #4]
 80143a2:	681b      	ldr	r3, [r3, #0]
 80143a4:	4a47      	ldr	r2, [pc, #284]	@ (80144c4 <HAL_DMA_Abort_IT+0x1d8>)
 80143a6:	4293      	cmp	r3, r2
 80143a8:	d004      	beq.n	80143b4 <HAL_DMA_Abort_IT+0xc8>
 80143aa:	687b      	ldr	r3, [r7, #4]
 80143ac:	681b      	ldr	r3, [r3, #0]
 80143ae:	4a46      	ldr	r2, [pc, #280]	@ (80144c8 <HAL_DMA_Abort_IT+0x1dc>)
 80143b0:	4293      	cmp	r3, r2
 80143b2:	d101      	bne.n	80143b8 <HAL_DMA_Abort_IT+0xcc>
 80143b4:	2301      	movs	r3, #1
 80143b6:	e000      	b.n	80143ba <HAL_DMA_Abort_IT+0xce>
 80143b8:	2300      	movs	r3, #0
 80143ba:	2b00      	cmp	r3, #0
 80143bc:	f000 8086 	beq.w	80144cc <HAL_DMA_Abort_IT+0x1e0>
    {
      /* Set Abort State  */
      hdma->State = HAL_DMA_STATE_ABORT;
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2204      	movs	r2, #4
 80143c4:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	681b      	ldr	r3, [r3, #0]
 80143cc:	4a2f      	ldr	r2, [pc, #188]	@ (801448c <HAL_DMA_Abort_IT+0x1a0>)
 80143ce:	4293      	cmp	r3, r2
 80143d0:	d04a      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 80143d2:	687b      	ldr	r3, [r7, #4]
 80143d4:	681b      	ldr	r3, [r3, #0]
 80143d6:	4a2e      	ldr	r2, [pc, #184]	@ (8014490 <HAL_DMA_Abort_IT+0x1a4>)
 80143d8:	4293      	cmp	r3, r2
 80143da:	d045      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 80143dc:	687b      	ldr	r3, [r7, #4]
 80143de:	681b      	ldr	r3, [r3, #0]
 80143e0:	4a2c      	ldr	r2, [pc, #176]	@ (8014494 <HAL_DMA_Abort_IT+0x1a8>)
 80143e2:	4293      	cmp	r3, r2
 80143e4:	d040      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 80143e6:	687b      	ldr	r3, [r7, #4]
 80143e8:	681b      	ldr	r3, [r3, #0]
 80143ea:	4a2b      	ldr	r2, [pc, #172]	@ (8014498 <HAL_DMA_Abort_IT+0x1ac>)
 80143ec:	4293      	cmp	r3, r2
 80143ee:	d03b      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 80143f0:	687b      	ldr	r3, [r7, #4]
 80143f2:	681b      	ldr	r3, [r3, #0]
 80143f4:	4a29      	ldr	r2, [pc, #164]	@ (801449c <HAL_DMA_Abort_IT+0x1b0>)
 80143f6:	4293      	cmp	r3, r2
 80143f8:	d036      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 80143fa:	687b      	ldr	r3, [r7, #4]
 80143fc:	681b      	ldr	r3, [r3, #0]
 80143fe:	4a28      	ldr	r2, [pc, #160]	@ (80144a0 <HAL_DMA_Abort_IT+0x1b4>)
 8014400:	4293      	cmp	r3, r2
 8014402:	d031      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	681b      	ldr	r3, [r3, #0]
 8014408:	4a26      	ldr	r2, [pc, #152]	@ (80144a4 <HAL_DMA_Abort_IT+0x1b8>)
 801440a:	4293      	cmp	r3, r2
 801440c:	d02c      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 801440e:	687b      	ldr	r3, [r7, #4]
 8014410:	681b      	ldr	r3, [r3, #0]
 8014412:	4a25      	ldr	r2, [pc, #148]	@ (80144a8 <HAL_DMA_Abort_IT+0x1bc>)
 8014414:	4293      	cmp	r3, r2
 8014416:	d027      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 8014418:	687b      	ldr	r3, [r7, #4]
 801441a:	681b      	ldr	r3, [r3, #0]
 801441c:	4a23      	ldr	r2, [pc, #140]	@ (80144ac <HAL_DMA_Abort_IT+0x1c0>)
 801441e:	4293      	cmp	r3, r2
 8014420:	d022      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 8014422:	687b      	ldr	r3, [r7, #4]
 8014424:	681b      	ldr	r3, [r3, #0]
 8014426:	4a22      	ldr	r2, [pc, #136]	@ (80144b0 <HAL_DMA_Abort_IT+0x1c4>)
 8014428:	4293      	cmp	r3, r2
 801442a:	d01d      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 801442c:	687b      	ldr	r3, [r7, #4]
 801442e:	681b      	ldr	r3, [r3, #0]
 8014430:	4a20      	ldr	r2, [pc, #128]	@ (80144b4 <HAL_DMA_Abort_IT+0x1c8>)
 8014432:	4293      	cmp	r3, r2
 8014434:	d018      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 8014436:	687b      	ldr	r3, [r7, #4]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	4a1f      	ldr	r2, [pc, #124]	@ (80144b8 <HAL_DMA_Abort_IT+0x1cc>)
 801443c:	4293      	cmp	r3, r2
 801443e:	d013      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	681b      	ldr	r3, [r3, #0]
 8014444:	4a1d      	ldr	r2, [pc, #116]	@ (80144bc <HAL_DMA_Abort_IT+0x1d0>)
 8014446:	4293      	cmp	r3, r2
 8014448:	d00e      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 801444a:	687b      	ldr	r3, [r7, #4]
 801444c:	681b      	ldr	r3, [r3, #0]
 801444e:	4a1c      	ldr	r2, [pc, #112]	@ (80144c0 <HAL_DMA_Abort_IT+0x1d4>)
 8014450:	4293      	cmp	r3, r2
 8014452:	d009      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 8014454:	687b      	ldr	r3, [r7, #4]
 8014456:	681b      	ldr	r3, [r3, #0]
 8014458:	4a1a      	ldr	r2, [pc, #104]	@ (80144c4 <HAL_DMA_Abort_IT+0x1d8>)
 801445a:	4293      	cmp	r3, r2
 801445c:	d004      	beq.n	8014468 <HAL_DMA_Abort_IT+0x17c>
 801445e:	687b      	ldr	r3, [r7, #4]
 8014460:	681b      	ldr	r3, [r3, #0]
 8014462:	4a19      	ldr	r2, [pc, #100]	@ (80144c8 <HAL_DMA_Abort_IT+0x1dc>)
 8014464:	4293      	cmp	r3, r2
 8014466:	d108      	bne.n	801447a <HAL_DMA_Abort_IT+0x18e>
 8014468:	687b      	ldr	r3, [r7, #4]
 801446a:	681b      	ldr	r3, [r3, #0]
 801446c:	681a      	ldr	r2, [r3, #0]
 801446e:	687b      	ldr	r3, [r7, #4]
 8014470:	681b      	ldr	r3, [r3, #0]
 8014472:	f022 0201 	bic.w	r2, r2, #1
 8014476:	601a      	str	r2, [r3, #0]
 8014478:	e178      	b.n	801476c <HAL_DMA_Abort_IT+0x480>
 801447a:	687b      	ldr	r3, [r7, #4]
 801447c:	681b      	ldr	r3, [r3, #0]
 801447e:	681a      	ldr	r2, [r3, #0]
 8014480:	687b      	ldr	r3, [r7, #4]
 8014482:	681b      	ldr	r3, [r3, #0]
 8014484:	f022 0201 	bic.w	r2, r2, #1
 8014488:	601a      	str	r2, [r3, #0]
 801448a:	e16f      	b.n	801476c <HAL_DMA_Abort_IT+0x480>
 801448c:	40020010 	.word	0x40020010
 8014490:	40020028 	.word	0x40020028
 8014494:	40020040 	.word	0x40020040
 8014498:	40020058 	.word	0x40020058
 801449c:	40020070 	.word	0x40020070
 80144a0:	40020088 	.word	0x40020088
 80144a4:	400200a0 	.word	0x400200a0
 80144a8:	400200b8 	.word	0x400200b8
 80144ac:	40020410 	.word	0x40020410
 80144b0:	40020428 	.word	0x40020428
 80144b4:	40020440 	.word	0x40020440
 80144b8:	40020458 	.word	0x40020458
 80144bc:	40020470 	.word	0x40020470
 80144c0:	40020488 	.word	0x40020488
 80144c4:	400204a0 	.word	0x400204a0
 80144c8:	400204b8 	.word	0x400204b8
    }
    else /* BDMA channel */
    {
      /* Disable DMA All Interrupts  */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  &= ~(BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE);
 80144cc:	687b      	ldr	r3, [r7, #4]
 80144ce:	681b      	ldr	r3, [r3, #0]
 80144d0:	681a      	ldr	r2, [r3, #0]
 80144d2:	687b      	ldr	r3, [r7, #4]
 80144d4:	681b      	ldr	r3, [r3, #0]
 80144d6:	f022 020e 	bic.w	r2, r2, #14
 80144da:	601a      	str	r2, [r3, #0]

      /* Disable the channel */
      __HAL_DMA_DISABLE(hdma);
 80144dc:	687b      	ldr	r3, [r7, #4]
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	4a6c      	ldr	r2, [pc, #432]	@ (8014694 <HAL_DMA_Abort_IT+0x3a8>)
 80144e2:	4293      	cmp	r3, r2
 80144e4:	d04a      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 80144e6:	687b      	ldr	r3, [r7, #4]
 80144e8:	681b      	ldr	r3, [r3, #0]
 80144ea:	4a6b      	ldr	r2, [pc, #428]	@ (8014698 <HAL_DMA_Abort_IT+0x3ac>)
 80144ec:	4293      	cmp	r3, r2
 80144ee:	d045      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 80144f0:	687b      	ldr	r3, [r7, #4]
 80144f2:	681b      	ldr	r3, [r3, #0]
 80144f4:	4a69      	ldr	r2, [pc, #420]	@ (801469c <HAL_DMA_Abort_IT+0x3b0>)
 80144f6:	4293      	cmp	r3, r2
 80144f8:	d040      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 80144fa:	687b      	ldr	r3, [r7, #4]
 80144fc:	681b      	ldr	r3, [r3, #0]
 80144fe:	4a68      	ldr	r2, [pc, #416]	@ (80146a0 <HAL_DMA_Abort_IT+0x3b4>)
 8014500:	4293      	cmp	r3, r2
 8014502:	d03b      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	681b      	ldr	r3, [r3, #0]
 8014508:	4a66      	ldr	r2, [pc, #408]	@ (80146a4 <HAL_DMA_Abort_IT+0x3b8>)
 801450a:	4293      	cmp	r3, r2
 801450c:	d036      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 801450e:	687b      	ldr	r3, [r7, #4]
 8014510:	681b      	ldr	r3, [r3, #0]
 8014512:	4a65      	ldr	r2, [pc, #404]	@ (80146a8 <HAL_DMA_Abort_IT+0x3bc>)
 8014514:	4293      	cmp	r3, r2
 8014516:	d031      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014518:	687b      	ldr	r3, [r7, #4]
 801451a:	681b      	ldr	r3, [r3, #0]
 801451c:	4a63      	ldr	r2, [pc, #396]	@ (80146ac <HAL_DMA_Abort_IT+0x3c0>)
 801451e:	4293      	cmp	r3, r2
 8014520:	d02c      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014522:	687b      	ldr	r3, [r7, #4]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	4a62      	ldr	r2, [pc, #392]	@ (80146b0 <HAL_DMA_Abort_IT+0x3c4>)
 8014528:	4293      	cmp	r3, r2
 801452a:	d027      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 801452c:	687b      	ldr	r3, [r7, #4]
 801452e:	681b      	ldr	r3, [r3, #0]
 8014530:	4a60      	ldr	r2, [pc, #384]	@ (80146b4 <HAL_DMA_Abort_IT+0x3c8>)
 8014532:	4293      	cmp	r3, r2
 8014534:	d022      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014536:	687b      	ldr	r3, [r7, #4]
 8014538:	681b      	ldr	r3, [r3, #0]
 801453a:	4a5f      	ldr	r2, [pc, #380]	@ (80146b8 <HAL_DMA_Abort_IT+0x3cc>)
 801453c:	4293      	cmp	r3, r2
 801453e:	d01d      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014540:	687b      	ldr	r3, [r7, #4]
 8014542:	681b      	ldr	r3, [r3, #0]
 8014544:	4a5d      	ldr	r2, [pc, #372]	@ (80146bc <HAL_DMA_Abort_IT+0x3d0>)
 8014546:	4293      	cmp	r3, r2
 8014548:	d018      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 801454a:	687b      	ldr	r3, [r7, #4]
 801454c:	681b      	ldr	r3, [r3, #0]
 801454e:	4a5c      	ldr	r2, [pc, #368]	@ (80146c0 <HAL_DMA_Abort_IT+0x3d4>)
 8014550:	4293      	cmp	r3, r2
 8014552:	d013      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014554:	687b      	ldr	r3, [r7, #4]
 8014556:	681b      	ldr	r3, [r3, #0]
 8014558:	4a5a      	ldr	r2, [pc, #360]	@ (80146c4 <HAL_DMA_Abort_IT+0x3d8>)
 801455a:	4293      	cmp	r3, r2
 801455c:	d00e      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 801455e:	687b      	ldr	r3, [r7, #4]
 8014560:	681b      	ldr	r3, [r3, #0]
 8014562:	4a59      	ldr	r2, [pc, #356]	@ (80146c8 <HAL_DMA_Abort_IT+0x3dc>)
 8014564:	4293      	cmp	r3, r2
 8014566:	d009      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014568:	687b      	ldr	r3, [r7, #4]
 801456a:	681b      	ldr	r3, [r3, #0]
 801456c:	4a57      	ldr	r2, [pc, #348]	@ (80146cc <HAL_DMA_Abort_IT+0x3e0>)
 801456e:	4293      	cmp	r3, r2
 8014570:	d004      	beq.n	801457c <HAL_DMA_Abort_IT+0x290>
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	681b      	ldr	r3, [r3, #0]
 8014576:	4a56      	ldr	r2, [pc, #344]	@ (80146d0 <HAL_DMA_Abort_IT+0x3e4>)
 8014578:	4293      	cmp	r3, r2
 801457a:	d108      	bne.n	801458e <HAL_DMA_Abort_IT+0x2a2>
 801457c:	687b      	ldr	r3, [r7, #4]
 801457e:	681b      	ldr	r3, [r3, #0]
 8014580:	681a      	ldr	r2, [r3, #0]
 8014582:	687b      	ldr	r3, [r7, #4]
 8014584:	681b      	ldr	r3, [r3, #0]
 8014586:	f022 0201 	bic.w	r2, r2, #1
 801458a:	601a      	str	r2, [r3, #0]
 801458c:	e007      	b.n	801459e <HAL_DMA_Abort_IT+0x2b2>
 801458e:	687b      	ldr	r3, [r7, #4]
 8014590:	681b      	ldr	r3, [r3, #0]
 8014592:	681a      	ldr	r2, [r3, #0]
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	681b      	ldr	r3, [r3, #0]
 8014598:	f022 0201 	bic.w	r2, r2, #1
 801459c:	601a      	str	r2, [r3, #0]

      if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 801459e:	687b      	ldr	r3, [r7, #4]
 80145a0:	681b      	ldr	r3, [r3, #0]
 80145a2:	4a3c      	ldr	r2, [pc, #240]	@ (8014694 <HAL_DMA_Abort_IT+0x3a8>)
 80145a4:	4293      	cmp	r3, r2
 80145a6:	d072      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	681b      	ldr	r3, [r3, #0]
 80145ac:	4a3a      	ldr	r2, [pc, #232]	@ (8014698 <HAL_DMA_Abort_IT+0x3ac>)
 80145ae:	4293      	cmp	r3, r2
 80145b0:	d06d      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145b2:	687b      	ldr	r3, [r7, #4]
 80145b4:	681b      	ldr	r3, [r3, #0]
 80145b6:	4a39      	ldr	r2, [pc, #228]	@ (801469c <HAL_DMA_Abort_IT+0x3b0>)
 80145b8:	4293      	cmp	r3, r2
 80145ba:	d068      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	681b      	ldr	r3, [r3, #0]
 80145c0:	4a37      	ldr	r2, [pc, #220]	@ (80146a0 <HAL_DMA_Abort_IT+0x3b4>)
 80145c2:	4293      	cmp	r3, r2
 80145c4:	d063      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145c6:	687b      	ldr	r3, [r7, #4]
 80145c8:	681b      	ldr	r3, [r3, #0]
 80145ca:	4a36      	ldr	r2, [pc, #216]	@ (80146a4 <HAL_DMA_Abort_IT+0x3b8>)
 80145cc:	4293      	cmp	r3, r2
 80145ce:	d05e      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145d0:	687b      	ldr	r3, [r7, #4]
 80145d2:	681b      	ldr	r3, [r3, #0]
 80145d4:	4a34      	ldr	r2, [pc, #208]	@ (80146a8 <HAL_DMA_Abort_IT+0x3bc>)
 80145d6:	4293      	cmp	r3, r2
 80145d8:	d059      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145da:	687b      	ldr	r3, [r7, #4]
 80145dc:	681b      	ldr	r3, [r3, #0]
 80145de:	4a33      	ldr	r2, [pc, #204]	@ (80146ac <HAL_DMA_Abort_IT+0x3c0>)
 80145e0:	4293      	cmp	r3, r2
 80145e2:	d054      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145e4:	687b      	ldr	r3, [r7, #4]
 80145e6:	681b      	ldr	r3, [r3, #0]
 80145e8:	4a31      	ldr	r2, [pc, #196]	@ (80146b0 <HAL_DMA_Abort_IT+0x3c4>)
 80145ea:	4293      	cmp	r3, r2
 80145ec:	d04f      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145ee:	687b      	ldr	r3, [r7, #4]
 80145f0:	681b      	ldr	r3, [r3, #0]
 80145f2:	4a30      	ldr	r2, [pc, #192]	@ (80146b4 <HAL_DMA_Abort_IT+0x3c8>)
 80145f4:	4293      	cmp	r3, r2
 80145f6:	d04a      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 80145f8:	687b      	ldr	r3, [r7, #4]
 80145fa:	681b      	ldr	r3, [r3, #0]
 80145fc:	4a2e      	ldr	r2, [pc, #184]	@ (80146b8 <HAL_DMA_Abort_IT+0x3cc>)
 80145fe:	4293      	cmp	r3, r2
 8014600:	d045      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014602:	687b      	ldr	r3, [r7, #4]
 8014604:	681b      	ldr	r3, [r3, #0]
 8014606:	4a2d      	ldr	r2, [pc, #180]	@ (80146bc <HAL_DMA_Abort_IT+0x3d0>)
 8014608:	4293      	cmp	r3, r2
 801460a:	d040      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 801460c:	687b      	ldr	r3, [r7, #4]
 801460e:	681b      	ldr	r3, [r3, #0]
 8014610:	4a2b      	ldr	r2, [pc, #172]	@ (80146c0 <HAL_DMA_Abort_IT+0x3d4>)
 8014612:	4293      	cmp	r3, r2
 8014614:	d03b      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014616:	687b      	ldr	r3, [r7, #4]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	4a2a      	ldr	r2, [pc, #168]	@ (80146c4 <HAL_DMA_Abort_IT+0x3d8>)
 801461c:	4293      	cmp	r3, r2
 801461e:	d036      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	4a28      	ldr	r2, [pc, #160]	@ (80146c8 <HAL_DMA_Abort_IT+0x3dc>)
 8014626:	4293      	cmp	r3, r2
 8014628:	d031      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	681b      	ldr	r3, [r3, #0]
 801462e:	4a27      	ldr	r2, [pc, #156]	@ (80146cc <HAL_DMA_Abort_IT+0x3e0>)
 8014630:	4293      	cmp	r3, r2
 8014632:	d02c      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014634:	687b      	ldr	r3, [r7, #4]
 8014636:	681b      	ldr	r3, [r3, #0]
 8014638:	4a25      	ldr	r2, [pc, #148]	@ (80146d0 <HAL_DMA_Abort_IT+0x3e4>)
 801463a:	4293      	cmp	r3, r2
 801463c:	d027      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 801463e:	687b      	ldr	r3, [r7, #4]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	4a24      	ldr	r2, [pc, #144]	@ (80146d4 <HAL_DMA_Abort_IT+0x3e8>)
 8014644:	4293      	cmp	r3, r2
 8014646:	d022      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014648:	687b      	ldr	r3, [r7, #4]
 801464a:	681b      	ldr	r3, [r3, #0]
 801464c:	4a22      	ldr	r2, [pc, #136]	@ (80146d8 <HAL_DMA_Abort_IT+0x3ec>)
 801464e:	4293      	cmp	r3, r2
 8014650:	d01d      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014652:	687b      	ldr	r3, [r7, #4]
 8014654:	681b      	ldr	r3, [r3, #0]
 8014656:	4a21      	ldr	r2, [pc, #132]	@ (80146dc <HAL_DMA_Abort_IT+0x3f0>)
 8014658:	4293      	cmp	r3, r2
 801465a:	d018      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 801465c:	687b      	ldr	r3, [r7, #4]
 801465e:	681b      	ldr	r3, [r3, #0]
 8014660:	4a1f      	ldr	r2, [pc, #124]	@ (80146e0 <HAL_DMA_Abort_IT+0x3f4>)
 8014662:	4293      	cmp	r3, r2
 8014664:	d013      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014666:	687b      	ldr	r3, [r7, #4]
 8014668:	681b      	ldr	r3, [r3, #0]
 801466a:	4a1e      	ldr	r2, [pc, #120]	@ (80146e4 <HAL_DMA_Abort_IT+0x3f8>)
 801466c:	4293      	cmp	r3, r2
 801466e:	d00e      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014670:	687b      	ldr	r3, [r7, #4]
 8014672:	681b      	ldr	r3, [r3, #0]
 8014674:	4a1c      	ldr	r2, [pc, #112]	@ (80146e8 <HAL_DMA_Abort_IT+0x3fc>)
 8014676:	4293      	cmp	r3, r2
 8014678:	d009      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 801467a:	687b      	ldr	r3, [r7, #4]
 801467c:	681b      	ldr	r3, [r3, #0]
 801467e:	4a1b      	ldr	r2, [pc, #108]	@ (80146ec <HAL_DMA_Abort_IT+0x400>)
 8014680:	4293      	cmp	r3, r2
 8014682:	d004      	beq.n	801468e <HAL_DMA_Abort_IT+0x3a2>
 8014684:	687b      	ldr	r3, [r7, #4]
 8014686:	681b      	ldr	r3, [r3, #0]
 8014688:	4a19      	ldr	r2, [pc, #100]	@ (80146f0 <HAL_DMA_Abort_IT+0x404>)
 801468a:	4293      	cmp	r3, r2
 801468c:	d132      	bne.n	80146f4 <HAL_DMA_Abort_IT+0x408>
 801468e:	2301      	movs	r3, #1
 8014690:	e031      	b.n	80146f6 <HAL_DMA_Abort_IT+0x40a>
 8014692:	bf00      	nop
 8014694:	40020010 	.word	0x40020010
 8014698:	40020028 	.word	0x40020028
 801469c:	40020040 	.word	0x40020040
 80146a0:	40020058 	.word	0x40020058
 80146a4:	40020070 	.word	0x40020070
 80146a8:	40020088 	.word	0x40020088
 80146ac:	400200a0 	.word	0x400200a0
 80146b0:	400200b8 	.word	0x400200b8
 80146b4:	40020410 	.word	0x40020410
 80146b8:	40020428 	.word	0x40020428
 80146bc:	40020440 	.word	0x40020440
 80146c0:	40020458 	.word	0x40020458
 80146c4:	40020470 	.word	0x40020470
 80146c8:	40020488 	.word	0x40020488
 80146cc:	400204a0 	.word	0x400204a0
 80146d0:	400204b8 	.word	0x400204b8
 80146d4:	58025408 	.word	0x58025408
 80146d8:	5802541c 	.word	0x5802541c
 80146dc:	58025430 	.word	0x58025430
 80146e0:	58025444 	.word	0x58025444
 80146e4:	58025458 	.word	0x58025458
 80146e8:	5802546c 	.word	0x5802546c
 80146ec:	58025480 	.word	0x58025480
 80146f0:	58025494 	.word	0x58025494
 80146f4:	2300      	movs	r3, #0
 80146f6:	2b00      	cmp	r3, #0
 80146f8:	d028      	beq.n	801474c <HAL_DMA_Abort_IT+0x460>
      {
        /* disable the DMAMUX sync overrun IT */
        hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80146fe:	681a      	ldr	r2, [r3, #0]
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014704:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014708:	601a      	str	r2, [r3, #0]

        /* Clear all flags */
        regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 801470a:	687b      	ldr	r3, [r7, #4]
 801470c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801470e:	60fb      	str	r3, [r7, #12]
        regs_bdma->IFCR = ((BDMA_IFCR_CGIF0) << (hdma->StreamIndex & 0x1FU));
 8014710:	687b      	ldr	r3, [r7, #4]
 8014712:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014714:	f003 031f 	and.w	r3, r3, #31
 8014718:	2201      	movs	r2, #1
 801471a:	409a      	lsls	r2, r3
 801471c:	68fb      	ldr	r3, [r7, #12]
 801471e:	605a      	str	r2, [r3, #4]

        /* Clear the DMAMUX synchro overrun flag */
        hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8014724:	687a      	ldr	r2, [r7, #4]
 8014726:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8014728:	605a      	str	r2, [r3, #4]

        if(hdma->DMAmuxRequestGen != 0U)
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801472e:	2b00      	cmp	r3, #0
 8014730:	d00c      	beq.n	801474c <HAL_DMA_Abort_IT+0x460>
        {
          /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
          /* disable the request gen overrun IT */
          hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8014732:	687b      	ldr	r3, [r7, #4]
 8014734:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8014736:	681a      	ldr	r2, [r3, #0]
 8014738:	687b      	ldr	r3, [r7, #4]
 801473a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801473c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8014740:	601a      	str	r2, [r3, #0]

          /* Clear the DMAMUX request generator overrun flag */
          hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 801474a:	605a      	str	r2, [r3, #4]
        }
      }

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	2201      	movs	r2, #1
 8014750:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8014754:	687b      	ldr	r3, [r7, #4]
 8014756:	2200      	movs	r2, #0
 8014758:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      /* Call User Abort callback */
      if(hdma->XferAbortCallback != NULL)
 801475c:	687b      	ldr	r3, [r7, #4]
 801475e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014760:	2b00      	cmp	r3, #0
 8014762:	d003      	beq.n	801476c <HAL_DMA_Abort_IT+0x480>
      {
        hdma->XferAbortCallback(hdma);
 8014764:	687b      	ldr	r3, [r7, #4]
 8014766:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014768:	6878      	ldr	r0, [r7, #4]
 801476a:	4798      	blx	r3
      }
    }
  }

  return HAL_OK;
 801476c:	2300      	movs	r3, #0
}
 801476e:	4618      	mov	r0, r3
 8014770:	3710      	adds	r7, #16
 8014772:	46bd      	mov	sp, r7
 8014774:	bd80      	pop	{r7, pc}
 8014776:	bf00      	nop

08014778 <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8014778:	b580      	push	{r7, lr}
 801477a:	b08a      	sub	sp, #40	@ 0x28
 801477c:	af00      	add	r7, sp, #0
 801477e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr_dma, tmpisr_bdma;
  uint32_t ccr_reg;
  __IO uint32_t count = 0U;
 8014780:	2300      	movs	r3, #0
 8014782:	60fb      	str	r3, [r7, #12]
  uint32_t timeout = SystemCoreClock / 9600U;
 8014784:	4b67      	ldr	r3, [pc, #412]	@ (8014924 <HAL_DMA_IRQHandler+0x1ac>)
 8014786:	681b      	ldr	r3, [r3, #0]
 8014788:	4a67      	ldr	r2, [pc, #412]	@ (8014928 <HAL_DMA_IRQHandler+0x1b0>)
 801478a:	fba2 2303 	umull	r2, r3, r2, r3
 801478e:	0a9b      	lsrs	r3, r3, #10
 8014790:	627b      	str	r3, [r7, #36]	@ 0x24

  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8014792:	687b      	ldr	r3, [r7, #4]
 8014794:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014796:	623b      	str	r3, [r7, #32]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 8014798:	687b      	ldr	r3, [r7, #4]
 801479a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801479c:	61fb      	str	r3, [r7, #28]

  tmpisr_dma  = regs_dma->ISR;
 801479e:	6a3b      	ldr	r3, [r7, #32]
 80147a0:	681b      	ldr	r3, [r3, #0]
 80147a2:	61bb      	str	r3, [r7, #24]
  tmpisr_bdma = regs_bdma->ISR;
 80147a4:	69fb      	ldr	r3, [r7, #28]
 80147a6:	681b      	ldr	r3, [r3, #0]
 80147a8:	617b      	str	r3, [r7, #20]

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U)  /* DMA1 or DMA2 instance */
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	681b      	ldr	r3, [r3, #0]
 80147ae:	4a5f      	ldr	r2, [pc, #380]	@ (801492c <HAL_DMA_IRQHandler+0x1b4>)
 80147b0:	4293      	cmp	r3, r2
 80147b2:	d04a      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147b4:	687b      	ldr	r3, [r7, #4]
 80147b6:	681b      	ldr	r3, [r3, #0]
 80147b8:	4a5d      	ldr	r2, [pc, #372]	@ (8014930 <HAL_DMA_IRQHandler+0x1b8>)
 80147ba:	4293      	cmp	r3, r2
 80147bc:	d045      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147be:	687b      	ldr	r3, [r7, #4]
 80147c0:	681b      	ldr	r3, [r3, #0]
 80147c2:	4a5c      	ldr	r2, [pc, #368]	@ (8014934 <HAL_DMA_IRQHandler+0x1bc>)
 80147c4:	4293      	cmp	r3, r2
 80147c6:	d040      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147c8:	687b      	ldr	r3, [r7, #4]
 80147ca:	681b      	ldr	r3, [r3, #0]
 80147cc:	4a5a      	ldr	r2, [pc, #360]	@ (8014938 <HAL_DMA_IRQHandler+0x1c0>)
 80147ce:	4293      	cmp	r3, r2
 80147d0:	d03b      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147d2:	687b      	ldr	r3, [r7, #4]
 80147d4:	681b      	ldr	r3, [r3, #0]
 80147d6:	4a59      	ldr	r2, [pc, #356]	@ (801493c <HAL_DMA_IRQHandler+0x1c4>)
 80147d8:	4293      	cmp	r3, r2
 80147da:	d036      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	681b      	ldr	r3, [r3, #0]
 80147e0:	4a57      	ldr	r2, [pc, #348]	@ (8014940 <HAL_DMA_IRQHandler+0x1c8>)
 80147e2:	4293      	cmp	r3, r2
 80147e4:	d031      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147e6:	687b      	ldr	r3, [r7, #4]
 80147e8:	681b      	ldr	r3, [r3, #0]
 80147ea:	4a56      	ldr	r2, [pc, #344]	@ (8014944 <HAL_DMA_IRQHandler+0x1cc>)
 80147ec:	4293      	cmp	r3, r2
 80147ee:	d02c      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147f0:	687b      	ldr	r3, [r7, #4]
 80147f2:	681b      	ldr	r3, [r3, #0]
 80147f4:	4a54      	ldr	r2, [pc, #336]	@ (8014948 <HAL_DMA_IRQHandler+0x1d0>)
 80147f6:	4293      	cmp	r3, r2
 80147f8:	d027      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 80147fa:	687b      	ldr	r3, [r7, #4]
 80147fc:	681b      	ldr	r3, [r3, #0]
 80147fe:	4a53      	ldr	r2, [pc, #332]	@ (801494c <HAL_DMA_IRQHandler+0x1d4>)
 8014800:	4293      	cmp	r3, r2
 8014802:	d022      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 8014804:	687b      	ldr	r3, [r7, #4]
 8014806:	681b      	ldr	r3, [r3, #0]
 8014808:	4a51      	ldr	r2, [pc, #324]	@ (8014950 <HAL_DMA_IRQHandler+0x1d8>)
 801480a:	4293      	cmp	r3, r2
 801480c:	d01d      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 801480e:	687b      	ldr	r3, [r7, #4]
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	4a50      	ldr	r2, [pc, #320]	@ (8014954 <HAL_DMA_IRQHandler+0x1dc>)
 8014814:	4293      	cmp	r3, r2
 8014816:	d018      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 8014818:	687b      	ldr	r3, [r7, #4]
 801481a:	681b      	ldr	r3, [r3, #0]
 801481c:	4a4e      	ldr	r2, [pc, #312]	@ (8014958 <HAL_DMA_IRQHandler+0x1e0>)
 801481e:	4293      	cmp	r3, r2
 8014820:	d013      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	681b      	ldr	r3, [r3, #0]
 8014826:	4a4d      	ldr	r2, [pc, #308]	@ (801495c <HAL_DMA_IRQHandler+0x1e4>)
 8014828:	4293      	cmp	r3, r2
 801482a:	d00e      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 801482c:	687b      	ldr	r3, [r7, #4]
 801482e:	681b      	ldr	r3, [r3, #0]
 8014830:	4a4b      	ldr	r2, [pc, #300]	@ (8014960 <HAL_DMA_IRQHandler+0x1e8>)
 8014832:	4293      	cmp	r3, r2
 8014834:	d009      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	4a4a      	ldr	r2, [pc, #296]	@ (8014964 <HAL_DMA_IRQHandler+0x1ec>)
 801483c:	4293      	cmp	r3, r2
 801483e:	d004      	beq.n	801484a <HAL_DMA_IRQHandler+0xd2>
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	681b      	ldr	r3, [r3, #0]
 8014844:	4a48      	ldr	r2, [pc, #288]	@ (8014968 <HAL_DMA_IRQHandler+0x1f0>)
 8014846:	4293      	cmp	r3, r2
 8014848:	d101      	bne.n	801484e <HAL_DMA_IRQHandler+0xd6>
 801484a:	2301      	movs	r3, #1
 801484c:	e000      	b.n	8014850 <HAL_DMA_IRQHandler+0xd8>
 801484e:	2300      	movs	r3, #0
 8014850:	2b00      	cmp	r3, #0
 8014852:	f000 842b 	beq.w	80150ac <HAL_DMA_IRQHandler+0x934>
  {
    /* Transfer Error Interrupt management ***************************************/
    if ((tmpisr_dma & (DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801485a:	f003 031f 	and.w	r3, r3, #31
 801485e:	2208      	movs	r2, #8
 8014860:	409a      	lsls	r2, r3
 8014862:	69bb      	ldr	r3, [r7, #24]
 8014864:	4013      	ands	r3, r2
 8014866:	2b00      	cmp	r3, #0
 8014868:	f000 80a2 	beq.w	80149b0 <HAL_DMA_IRQHandler+0x238>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != 0U)
 801486c:	687b      	ldr	r3, [r7, #4]
 801486e:	681b      	ldr	r3, [r3, #0]
 8014870:	4a2e      	ldr	r2, [pc, #184]	@ (801492c <HAL_DMA_IRQHandler+0x1b4>)
 8014872:	4293      	cmp	r3, r2
 8014874:	d04a      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	681b      	ldr	r3, [r3, #0]
 801487a:	4a2d      	ldr	r2, [pc, #180]	@ (8014930 <HAL_DMA_IRQHandler+0x1b8>)
 801487c:	4293      	cmp	r3, r2
 801487e:	d045      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 8014880:	687b      	ldr	r3, [r7, #4]
 8014882:	681b      	ldr	r3, [r3, #0]
 8014884:	4a2b      	ldr	r2, [pc, #172]	@ (8014934 <HAL_DMA_IRQHandler+0x1bc>)
 8014886:	4293      	cmp	r3, r2
 8014888:	d040      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 801488a:	687b      	ldr	r3, [r7, #4]
 801488c:	681b      	ldr	r3, [r3, #0]
 801488e:	4a2a      	ldr	r2, [pc, #168]	@ (8014938 <HAL_DMA_IRQHandler+0x1c0>)
 8014890:	4293      	cmp	r3, r2
 8014892:	d03b      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	4a28      	ldr	r2, [pc, #160]	@ (801493c <HAL_DMA_IRQHandler+0x1c4>)
 801489a:	4293      	cmp	r3, r2
 801489c:	d036      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	681b      	ldr	r3, [r3, #0]
 80148a2:	4a27      	ldr	r2, [pc, #156]	@ (8014940 <HAL_DMA_IRQHandler+0x1c8>)
 80148a4:	4293      	cmp	r3, r2
 80148a6:	d031      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	681b      	ldr	r3, [r3, #0]
 80148ac:	4a25      	ldr	r2, [pc, #148]	@ (8014944 <HAL_DMA_IRQHandler+0x1cc>)
 80148ae:	4293      	cmp	r3, r2
 80148b0:	d02c      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148b2:	687b      	ldr	r3, [r7, #4]
 80148b4:	681b      	ldr	r3, [r3, #0]
 80148b6:	4a24      	ldr	r2, [pc, #144]	@ (8014948 <HAL_DMA_IRQHandler+0x1d0>)
 80148b8:	4293      	cmp	r3, r2
 80148ba:	d027      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	4a22      	ldr	r2, [pc, #136]	@ (801494c <HAL_DMA_IRQHandler+0x1d4>)
 80148c2:	4293      	cmp	r3, r2
 80148c4:	d022      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148c6:	687b      	ldr	r3, [r7, #4]
 80148c8:	681b      	ldr	r3, [r3, #0]
 80148ca:	4a21      	ldr	r2, [pc, #132]	@ (8014950 <HAL_DMA_IRQHandler+0x1d8>)
 80148cc:	4293      	cmp	r3, r2
 80148ce:	d01d      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	681b      	ldr	r3, [r3, #0]
 80148d4:	4a1f      	ldr	r2, [pc, #124]	@ (8014954 <HAL_DMA_IRQHandler+0x1dc>)
 80148d6:	4293      	cmp	r3, r2
 80148d8:	d018      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148da:	687b      	ldr	r3, [r7, #4]
 80148dc:	681b      	ldr	r3, [r3, #0]
 80148de:	4a1e      	ldr	r2, [pc, #120]	@ (8014958 <HAL_DMA_IRQHandler+0x1e0>)
 80148e0:	4293      	cmp	r3, r2
 80148e2:	d013      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	681b      	ldr	r3, [r3, #0]
 80148e8:	4a1c      	ldr	r2, [pc, #112]	@ (801495c <HAL_DMA_IRQHandler+0x1e4>)
 80148ea:	4293      	cmp	r3, r2
 80148ec:	d00e      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	681b      	ldr	r3, [r3, #0]
 80148f2:	4a1b      	ldr	r2, [pc, #108]	@ (8014960 <HAL_DMA_IRQHandler+0x1e8>)
 80148f4:	4293      	cmp	r3, r2
 80148f6:	d009      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	4a19      	ldr	r2, [pc, #100]	@ (8014964 <HAL_DMA_IRQHandler+0x1ec>)
 80148fe:	4293      	cmp	r3, r2
 8014900:	d004      	beq.n	801490c <HAL_DMA_IRQHandler+0x194>
 8014902:	687b      	ldr	r3, [r7, #4]
 8014904:	681b      	ldr	r3, [r3, #0]
 8014906:	4a18      	ldr	r2, [pc, #96]	@ (8014968 <HAL_DMA_IRQHandler+0x1f0>)
 8014908:	4293      	cmp	r3, r2
 801490a:	d12f      	bne.n	801496c <HAL_DMA_IRQHandler+0x1f4>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	681b      	ldr	r3, [r3, #0]
 8014910:	681b      	ldr	r3, [r3, #0]
 8014912:	f003 0304 	and.w	r3, r3, #4
 8014916:	2b00      	cmp	r3, #0
 8014918:	bf14      	ite	ne
 801491a:	2301      	movne	r3, #1
 801491c:	2300      	moveq	r3, #0
 801491e:	b2db      	uxtb	r3, r3
 8014920:	e02e      	b.n	8014980 <HAL_DMA_IRQHandler+0x208>
 8014922:	bf00      	nop
 8014924:	24000400 	.word	0x24000400
 8014928:	1b4e81b5 	.word	0x1b4e81b5
 801492c:	40020010 	.word	0x40020010
 8014930:	40020028 	.word	0x40020028
 8014934:	40020040 	.word	0x40020040
 8014938:	40020058 	.word	0x40020058
 801493c:	40020070 	.word	0x40020070
 8014940:	40020088 	.word	0x40020088
 8014944:	400200a0 	.word	0x400200a0
 8014948:	400200b8 	.word	0x400200b8
 801494c:	40020410 	.word	0x40020410
 8014950:	40020428 	.word	0x40020428
 8014954:	40020440 	.word	0x40020440
 8014958:	40020458 	.word	0x40020458
 801495c:	40020470 	.word	0x40020470
 8014960:	40020488 	.word	0x40020488
 8014964:	400204a0 	.word	0x400204a0
 8014968:	400204b8 	.word	0x400204b8
 801496c:	687b      	ldr	r3, [r7, #4]
 801496e:	681b      	ldr	r3, [r3, #0]
 8014970:	681b      	ldr	r3, [r3, #0]
 8014972:	f003 0308 	and.w	r3, r3, #8
 8014976:	2b00      	cmp	r3, #0
 8014978:	bf14      	ite	ne
 801497a:	2301      	movne	r3, #1
 801497c:	2300      	moveq	r3, #0
 801497e:	b2db      	uxtb	r3, r3
 8014980:	2b00      	cmp	r3, #0
 8014982:	d015      	beq.n	80149b0 <HAL_DMA_IRQHandler+0x238>
      {
        /* Disable the transfer error interrupt */
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TE);
 8014984:	687b      	ldr	r3, [r7, #4]
 8014986:	681b      	ldr	r3, [r3, #0]
 8014988:	681a      	ldr	r2, [r3, #0]
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	681b      	ldr	r3, [r3, #0]
 801498e:	f022 0204 	bic.w	r2, r2, #4
 8014992:	601a      	str	r2, [r3, #0]

        /* Clear the transfer error flag */
        regs_dma->IFCR = DMA_FLAG_TEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8014994:	687b      	ldr	r3, [r7, #4]
 8014996:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014998:	f003 031f 	and.w	r3, r3, #31
 801499c:	2208      	movs	r2, #8
 801499e:	409a      	lsls	r2, r3
 80149a0:	6a3b      	ldr	r3, [r7, #32]
 80149a2:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80149a4:	687b      	ldr	r3, [r7, #4]
 80149a6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80149a8:	f043 0201 	orr.w	r2, r3, #1
 80149ac:	687b      	ldr	r3, [r7, #4]
 80149ae:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* FIFO Error Interrupt management ******************************************/
    if ((tmpisr_dma & (DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 80149b0:	687b      	ldr	r3, [r7, #4]
 80149b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149b4:	f003 031f 	and.w	r3, r3, #31
 80149b8:	69ba      	ldr	r2, [r7, #24]
 80149ba:	fa22 f303 	lsr.w	r3, r2, r3
 80149be:	f003 0301 	and.w	r3, r3, #1
 80149c2:	2b00      	cmp	r3, #0
 80149c4:	d06e      	beq.n	8014aa4 <HAL_DMA_IRQHandler+0x32c>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != 0U)
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	4a69      	ldr	r2, [pc, #420]	@ (8014b70 <HAL_DMA_IRQHandler+0x3f8>)
 80149cc:	4293      	cmp	r3, r2
 80149ce:	d04a      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 80149d0:	687b      	ldr	r3, [r7, #4]
 80149d2:	681b      	ldr	r3, [r3, #0]
 80149d4:	4a67      	ldr	r2, [pc, #412]	@ (8014b74 <HAL_DMA_IRQHandler+0x3fc>)
 80149d6:	4293      	cmp	r3, r2
 80149d8:	d045      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 80149da:	687b      	ldr	r3, [r7, #4]
 80149dc:	681b      	ldr	r3, [r3, #0]
 80149de:	4a66      	ldr	r2, [pc, #408]	@ (8014b78 <HAL_DMA_IRQHandler+0x400>)
 80149e0:	4293      	cmp	r3, r2
 80149e2:	d040      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 80149e4:	687b      	ldr	r3, [r7, #4]
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	4a64      	ldr	r2, [pc, #400]	@ (8014b7c <HAL_DMA_IRQHandler+0x404>)
 80149ea:	4293      	cmp	r3, r2
 80149ec:	d03b      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	681b      	ldr	r3, [r3, #0]
 80149f2:	4a63      	ldr	r2, [pc, #396]	@ (8014b80 <HAL_DMA_IRQHandler+0x408>)
 80149f4:	4293      	cmp	r3, r2
 80149f6:	d036      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 80149f8:	687b      	ldr	r3, [r7, #4]
 80149fa:	681b      	ldr	r3, [r3, #0]
 80149fc:	4a61      	ldr	r2, [pc, #388]	@ (8014b84 <HAL_DMA_IRQHandler+0x40c>)
 80149fe:	4293      	cmp	r3, r2
 8014a00:	d031      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a02:	687b      	ldr	r3, [r7, #4]
 8014a04:	681b      	ldr	r3, [r3, #0]
 8014a06:	4a60      	ldr	r2, [pc, #384]	@ (8014b88 <HAL_DMA_IRQHandler+0x410>)
 8014a08:	4293      	cmp	r3, r2
 8014a0a:	d02c      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a0c:	687b      	ldr	r3, [r7, #4]
 8014a0e:	681b      	ldr	r3, [r3, #0]
 8014a10:	4a5e      	ldr	r2, [pc, #376]	@ (8014b8c <HAL_DMA_IRQHandler+0x414>)
 8014a12:	4293      	cmp	r3, r2
 8014a14:	d027      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a16:	687b      	ldr	r3, [r7, #4]
 8014a18:	681b      	ldr	r3, [r3, #0]
 8014a1a:	4a5d      	ldr	r2, [pc, #372]	@ (8014b90 <HAL_DMA_IRQHandler+0x418>)
 8014a1c:	4293      	cmp	r3, r2
 8014a1e:	d022      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	681b      	ldr	r3, [r3, #0]
 8014a24:	4a5b      	ldr	r2, [pc, #364]	@ (8014b94 <HAL_DMA_IRQHandler+0x41c>)
 8014a26:	4293      	cmp	r3, r2
 8014a28:	d01d      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a2a:	687b      	ldr	r3, [r7, #4]
 8014a2c:	681b      	ldr	r3, [r3, #0]
 8014a2e:	4a5a      	ldr	r2, [pc, #360]	@ (8014b98 <HAL_DMA_IRQHandler+0x420>)
 8014a30:	4293      	cmp	r3, r2
 8014a32:	d018      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a34:	687b      	ldr	r3, [r7, #4]
 8014a36:	681b      	ldr	r3, [r3, #0]
 8014a38:	4a58      	ldr	r2, [pc, #352]	@ (8014b9c <HAL_DMA_IRQHandler+0x424>)
 8014a3a:	4293      	cmp	r3, r2
 8014a3c:	d013      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a3e:	687b      	ldr	r3, [r7, #4]
 8014a40:	681b      	ldr	r3, [r3, #0]
 8014a42:	4a57      	ldr	r2, [pc, #348]	@ (8014ba0 <HAL_DMA_IRQHandler+0x428>)
 8014a44:	4293      	cmp	r3, r2
 8014a46:	d00e      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a48:	687b      	ldr	r3, [r7, #4]
 8014a4a:	681b      	ldr	r3, [r3, #0]
 8014a4c:	4a55      	ldr	r2, [pc, #340]	@ (8014ba4 <HAL_DMA_IRQHandler+0x42c>)
 8014a4e:	4293      	cmp	r3, r2
 8014a50:	d009      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a52:	687b      	ldr	r3, [r7, #4]
 8014a54:	681b      	ldr	r3, [r3, #0]
 8014a56:	4a54      	ldr	r2, [pc, #336]	@ (8014ba8 <HAL_DMA_IRQHandler+0x430>)
 8014a58:	4293      	cmp	r3, r2
 8014a5a:	d004      	beq.n	8014a66 <HAL_DMA_IRQHandler+0x2ee>
 8014a5c:	687b      	ldr	r3, [r7, #4]
 8014a5e:	681b      	ldr	r3, [r3, #0]
 8014a60:	4a52      	ldr	r2, [pc, #328]	@ (8014bac <HAL_DMA_IRQHandler+0x434>)
 8014a62:	4293      	cmp	r3, r2
 8014a64:	d10a      	bne.n	8014a7c <HAL_DMA_IRQHandler+0x304>
 8014a66:	687b      	ldr	r3, [r7, #4]
 8014a68:	681b      	ldr	r3, [r3, #0]
 8014a6a:	695b      	ldr	r3, [r3, #20]
 8014a6c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014a70:	2b00      	cmp	r3, #0
 8014a72:	bf14      	ite	ne
 8014a74:	2301      	movne	r3, #1
 8014a76:	2300      	moveq	r3, #0
 8014a78:	b2db      	uxtb	r3, r3
 8014a7a:	e003      	b.n	8014a84 <HAL_DMA_IRQHandler+0x30c>
 8014a7c:	687b      	ldr	r3, [r7, #4]
 8014a7e:	681b      	ldr	r3, [r3, #0]
 8014a80:	681b      	ldr	r3, [r3, #0]
 8014a82:	2300      	movs	r3, #0
 8014a84:	2b00      	cmp	r3, #0
 8014a86:	d00d      	beq.n	8014aa4 <HAL_DMA_IRQHandler+0x32c>
      {
        /* Clear the FIFO error flag */
        regs_dma->IFCR = DMA_FLAG_FEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a8c:	f003 031f 	and.w	r3, r3, #31
 8014a90:	2201      	movs	r2, #1
 8014a92:	409a      	lsls	r2, r3
 8014a94:	6a3b      	ldr	r3, [r7, #32]
 8014a96:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014a9c:	f043 0202 	orr.w	r2, r3, #2
 8014aa0:	687b      	ldr	r3, [r7, #4]
 8014aa2:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Direct Mode Error Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8014aa4:	687b      	ldr	r3, [r7, #4]
 8014aa6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014aa8:	f003 031f 	and.w	r3, r3, #31
 8014aac:	2204      	movs	r2, #4
 8014aae:	409a      	lsls	r2, r3
 8014ab0:	69bb      	ldr	r3, [r7, #24]
 8014ab2:	4013      	ands	r3, r2
 8014ab4:	2b00      	cmp	r3, #0
 8014ab6:	f000 808f 	beq.w	8014bd8 <HAL_DMA_IRQHandler+0x460>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != 0U)
 8014aba:	687b      	ldr	r3, [r7, #4]
 8014abc:	681b      	ldr	r3, [r3, #0]
 8014abe:	4a2c      	ldr	r2, [pc, #176]	@ (8014b70 <HAL_DMA_IRQHandler+0x3f8>)
 8014ac0:	4293      	cmp	r3, r2
 8014ac2:	d04a      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014ac4:	687b      	ldr	r3, [r7, #4]
 8014ac6:	681b      	ldr	r3, [r3, #0]
 8014ac8:	4a2a      	ldr	r2, [pc, #168]	@ (8014b74 <HAL_DMA_IRQHandler+0x3fc>)
 8014aca:	4293      	cmp	r3, r2
 8014acc:	d045      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014ace:	687b      	ldr	r3, [r7, #4]
 8014ad0:	681b      	ldr	r3, [r3, #0]
 8014ad2:	4a29      	ldr	r2, [pc, #164]	@ (8014b78 <HAL_DMA_IRQHandler+0x400>)
 8014ad4:	4293      	cmp	r3, r2
 8014ad6:	d040      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014ad8:	687b      	ldr	r3, [r7, #4]
 8014ada:	681b      	ldr	r3, [r3, #0]
 8014adc:	4a27      	ldr	r2, [pc, #156]	@ (8014b7c <HAL_DMA_IRQHandler+0x404>)
 8014ade:	4293      	cmp	r3, r2
 8014ae0:	d03b      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014ae2:	687b      	ldr	r3, [r7, #4]
 8014ae4:	681b      	ldr	r3, [r3, #0]
 8014ae6:	4a26      	ldr	r2, [pc, #152]	@ (8014b80 <HAL_DMA_IRQHandler+0x408>)
 8014ae8:	4293      	cmp	r3, r2
 8014aea:	d036      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014aec:	687b      	ldr	r3, [r7, #4]
 8014aee:	681b      	ldr	r3, [r3, #0]
 8014af0:	4a24      	ldr	r2, [pc, #144]	@ (8014b84 <HAL_DMA_IRQHandler+0x40c>)
 8014af2:	4293      	cmp	r3, r2
 8014af4:	d031      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014af6:	687b      	ldr	r3, [r7, #4]
 8014af8:	681b      	ldr	r3, [r3, #0]
 8014afa:	4a23      	ldr	r2, [pc, #140]	@ (8014b88 <HAL_DMA_IRQHandler+0x410>)
 8014afc:	4293      	cmp	r3, r2
 8014afe:	d02c      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b00:	687b      	ldr	r3, [r7, #4]
 8014b02:	681b      	ldr	r3, [r3, #0]
 8014b04:	4a21      	ldr	r2, [pc, #132]	@ (8014b8c <HAL_DMA_IRQHandler+0x414>)
 8014b06:	4293      	cmp	r3, r2
 8014b08:	d027      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b0a:	687b      	ldr	r3, [r7, #4]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	4a20      	ldr	r2, [pc, #128]	@ (8014b90 <HAL_DMA_IRQHandler+0x418>)
 8014b10:	4293      	cmp	r3, r2
 8014b12:	d022      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b14:	687b      	ldr	r3, [r7, #4]
 8014b16:	681b      	ldr	r3, [r3, #0]
 8014b18:	4a1e      	ldr	r2, [pc, #120]	@ (8014b94 <HAL_DMA_IRQHandler+0x41c>)
 8014b1a:	4293      	cmp	r3, r2
 8014b1c:	d01d      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b1e:	687b      	ldr	r3, [r7, #4]
 8014b20:	681b      	ldr	r3, [r3, #0]
 8014b22:	4a1d      	ldr	r2, [pc, #116]	@ (8014b98 <HAL_DMA_IRQHandler+0x420>)
 8014b24:	4293      	cmp	r3, r2
 8014b26:	d018      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b28:	687b      	ldr	r3, [r7, #4]
 8014b2a:	681b      	ldr	r3, [r3, #0]
 8014b2c:	4a1b      	ldr	r2, [pc, #108]	@ (8014b9c <HAL_DMA_IRQHandler+0x424>)
 8014b2e:	4293      	cmp	r3, r2
 8014b30:	d013      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b32:	687b      	ldr	r3, [r7, #4]
 8014b34:	681b      	ldr	r3, [r3, #0]
 8014b36:	4a1a      	ldr	r2, [pc, #104]	@ (8014ba0 <HAL_DMA_IRQHandler+0x428>)
 8014b38:	4293      	cmp	r3, r2
 8014b3a:	d00e      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b3c:	687b      	ldr	r3, [r7, #4]
 8014b3e:	681b      	ldr	r3, [r3, #0]
 8014b40:	4a18      	ldr	r2, [pc, #96]	@ (8014ba4 <HAL_DMA_IRQHandler+0x42c>)
 8014b42:	4293      	cmp	r3, r2
 8014b44:	d009      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b46:	687b      	ldr	r3, [r7, #4]
 8014b48:	681b      	ldr	r3, [r3, #0]
 8014b4a:	4a17      	ldr	r2, [pc, #92]	@ (8014ba8 <HAL_DMA_IRQHandler+0x430>)
 8014b4c:	4293      	cmp	r3, r2
 8014b4e:	d004      	beq.n	8014b5a <HAL_DMA_IRQHandler+0x3e2>
 8014b50:	687b      	ldr	r3, [r7, #4]
 8014b52:	681b      	ldr	r3, [r3, #0]
 8014b54:	4a15      	ldr	r2, [pc, #84]	@ (8014bac <HAL_DMA_IRQHandler+0x434>)
 8014b56:	4293      	cmp	r3, r2
 8014b58:	d12a      	bne.n	8014bb0 <HAL_DMA_IRQHandler+0x438>
 8014b5a:	687b      	ldr	r3, [r7, #4]
 8014b5c:	681b      	ldr	r3, [r3, #0]
 8014b5e:	681b      	ldr	r3, [r3, #0]
 8014b60:	f003 0302 	and.w	r3, r3, #2
 8014b64:	2b00      	cmp	r3, #0
 8014b66:	bf14      	ite	ne
 8014b68:	2301      	movne	r3, #1
 8014b6a:	2300      	moveq	r3, #0
 8014b6c:	b2db      	uxtb	r3, r3
 8014b6e:	e023      	b.n	8014bb8 <HAL_DMA_IRQHandler+0x440>
 8014b70:	40020010 	.word	0x40020010
 8014b74:	40020028 	.word	0x40020028
 8014b78:	40020040 	.word	0x40020040
 8014b7c:	40020058 	.word	0x40020058
 8014b80:	40020070 	.word	0x40020070
 8014b84:	40020088 	.word	0x40020088
 8014b88:	400200a0 	.word	0x400200a0
 8014b8c:	400200b8 	.word	0x400200b8
 8014b90:	40020410 	.word	0x40020410
 8014b94:	40020428 	.word	0x40020428
 8014b98:	40020440 	.word	0x40020440
 8014b9c:	40020458 	.word	0x40020458
 8014ba0:	40020470 	.word	0x40020470
 8014ba4:	40020488 	.word	0x40020488
 8014ba8:	400204a0 	.word	0x400204a0
 8014bac:	400204b8 	.word	0x400204b8
 8014bb0:	687b      	ldr	r3, [r7, #4]
 8014bb2:	681b      	ldr	r3, [r3, #0]
 8014bb4:	681b      	ldr	r3, [r3, #0]
 8014bb6:	2300      	movs	r3, #0
 8014bb8:	2b00      	cmp	r3, #0
 8014bba:	d00d      	beq.n	8014bd8 <HAL_DMA_IRQHandler+0x460>
      {
        /* Clear the direct mode error flag */
        regs_dma->IFCR = DMA_FLAG_DMEIF0_4 << (hdma->StreamIndex & 0x1FU);
 8014bbc:	687b      	ldr	r3, [r7, #4]
 8014bbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bc0:	f003 031f 	and.w	r3, r3, #31
 8014bc4:	2204      	movs	r2, #4
 8014bc6:	409a      	lsls	r2, r3
 8014bc8:	6a3b      	ldr	r3, [r7, #32]
 8014bca:	609a      	str	r2, [r3, #8]

        /* Update error code */
        hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8014bcc:	687b      	ldr	r3, [r7, #4]
 8014bce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bd0:	f043 0204 	orr.w	r2, r3, #4
 8014bd4:	687b      	ldr	r3, [r7, #4]
 8014bd6:	655a      	str	r2, [r3, #84]	@ 0x54
      }
    }
    /* Half Transfer Complete Interrupt management ******************************/
    if ((tmpisr_dma & (DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8014bd8:	687b      	ldr	r3, [r7, #4]
 8014bda:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014bdc:	f003 031f 	and.w	r3, r3, #31
 8014be0:	2210      	movs	r2, #16
 8014be2:	409a      	lsls	r2, r3
 8014be4:	69bb      	ldr	r3, [r7, #24]
 8014be6:	4013      	ands	r3, r2
 8014be8:	2b00      	cmp	r3, #0
 8014bea:	f000 80a6 	beq.w	8014d3a <HAL_DMA_IRQHandler+0x5c2>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != 0U)
 8014bee:	687b      	ldr	r3, [r7, #4]
 8014bf0:	681b      	ldr	r3, [r3, #0]
 8014bf2:	4a85      	ldr	r2, [pc, #532]	@ (8014e08 <HAL_DMA_IRQHandler+0x690>)
 8014bf4:	4293      	cmp	r3, r2
 8014bf6:	d04a      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014bf8:	687b      	ldr	r3, [r7, #4]
 8014bfa:	681b      	ldr	r3, [r3, #0]
 8014bfc:	4a83      	ldr	r2, [pc, #524]	@ (8014e0c <HAL_DMA_IRQHandler+0x694>)
 8014bfe:	4293      	cmp	r3, r2
 8014c00:	d045      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c02:	687b      	ldr	r3, [r7, #4]
 8014c04:	681b      	ldr	r3, [r3, #0]
 8014c06:	4a82      	ldr	r2, [pc, #520]	@ (8014e10 <HAL_DMA_IRQHandler+0x698>)
 8014c08:	4293      	cmp	r3, r2
 8014c0a:	d040      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c0c:	687b      	ldr	r3, [r7, #4]
 8014c0e:	681b      	ldr	r3, [r3, #0]
 8014c10:	4a80      	ldr	r2, [pc, #512]	@ (8014e14 <HAL_DMA_IRQHandler+0x69c>)
 8014c12:	4293      	cmp	r3, r2
 8014c14:	d03b      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c16:	687b      	ldr	r3, [r7, #4]
 8014c18:	681b      	ldr	r3, [r3, #0]
 8014c1a:	4a7f      	ldr	r2, [pc, #508]	@ (8014e18 <HAL_DMA_IRQHandler+0x6a0>)
 8014c1c:	4293      	cmp	r3, r2
 8014c1e:	d036      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c20:	687b      	ldr	r3, [r7, #4]
 8014c22:	681b      	ldr	r3, [r3, #0]
 8014c24:	4a7d      	ldr	r2, [pc, #500]	@ (8014e1c <HAL_DMA_IRQHandler+0x6a4>)
 8014c26:	4293      	cmp	r3, r2
 8014c28:	d031      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c2a:	687b      	ldr	r3, [r7, #4]
 8014c2c:	681b      	ldr	r3, [r3, #0]
 8014c2e:	4a7c      	ldr	r2, [pc, #496]	@ (8014e20 <HAL_DMA_IRQHandler+0x6a8>)
 8014c30:	4293      	cmp	r3, r2
 8014c32:	d02c      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c34:	687b      	ldr	r3, [r7, #4]
 8014c36:	681b      	ldr	r3, [r3, #0]
 8014c38:	4a7a      	ldr	r2, [pc, #488]	@ (8014e24 <HAL_DMA_IRQHandler+0x6ac>)
 8014c3a:	4293      	cmp	r3, r2
 8014c3c:	d027      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	681b      	ldr	r3, [r3, #0]
 8014c42:	4a79      	ldr	r2, [pc, #484]	@ (8014e28 <HAL_DMA_IRQHandler+0x6b0>)
 8014c44:	4293      	cmp	r3, r2
 8014c46:	d022      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	681b      	ldr	r3, [r3, #0]
 8014c4c:	4a77      	ldr	r2, [pc, #476]	@ (8014e2c <HAL_DMA_IRQHandler+0x6b4>)
 8014c4e:	4293      	cmp	r3, r2
 8014c50:	d01d      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c52:	687b      	ldr	r3, [r7, #4]
 8014c54:	681b      	ldr	r3, [r3, #0]
 8014c56:	4a76      	ldr	r2, [pc, #472]	@ (8014e30 <HAL_DMA_IRQHandler+0x6b8>)
 8014c58:	4293      	cmp	r3, r2
 8014c5a:	d018      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c5c:	687b      	ldr	r3, [r7, #4]
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	4a74      	ldr	r2, [pc, #464]	@ (8014e34 <HAL_DMA_IRQHandler+0x6bc>)
 8014c62:	4293      	cmp	r3, r2
 8014c64:	d013      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c66:	687b      	ldr	r3, [r7, #4]
 8014c68:	681b      	ldr	r3, [r3, #0]
 8014c6a:	4a73      	ldr	r2, [pc, #460]	@ (8014e38 <HAL_DMA_IRQHandler+0x6c0>)
 8014c6c:	4293      	cmp	r3, r2
 8014c6e:	d00e      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	4a71      	ldr	r2, [pc, #452]	@ (8014e3c <HAL_DMA_IRQHandler+0x6c4>)
 8014c76:	4293      	cmp	r3, r2
 8014c78:	d009      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	681b      	ldr	r3, [r3, #0]
 8014c7e:	4a70      	ldr	r2, [pc, #448]	@ (8014e40 <HAL_DMA_IRQHandler+0x6c8>)
 8014c80:	4293      	cmp	r3, r2
 8014c82:	d004      	beq.n	8014c8e <HAL_DMA_IRQHandler+0x516>
 8014c84:	687b      	ldr	r3, [r7, #4]
 8014c86:	681b      	ldr	r3, [r3, #0]
 8014c88:	4a6e      	ldr	r2, [pc, #440]	@ (8014e44 <HAL_DMA_IRQHandler+0x6cc>)
 8014c8a:	4293      	cmp	r3, r2
 8014c8c:	d10a      	bne.n	8014ca4 <HAL_DMA_IRQHandler+0x52c>
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	681b      	ldr	r3, [r3, #0]
 8014c92:	681b      	ldr	r3, [r3, #0]
 8014c94:	f003 0308 	and.w	r3, r3, #8
 8014c98:	2b00      	cmp	r3, #0
 8014c9a:	bf14      	ite	ne
 8014c9c:	2301      	movne	r3, #1
 8014c9e:	2300      	moveq	r3, #0
 8014ca0:	b2db      	uxtb	r3, r3
 8014ca2:	e009      	b.n	8014cb8 <HAL_DMA_IRQHandler+0x540>
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	681b      	ldr	r3, [r3, #0]
 8014ca8:	681b      	ldr	r3, [r3, #0]
 8014caa:	f003 0304 	and.w	r3, r3, #4
 8014cae:	2b00      	cmp	r3, #0
 8014cb0:	bf14      	ite	ne
 8014cb2:	2301      	movne	r3, #1
 8014cb4:	2300      	moveq	r3, #0
 8014cb6:	b2db      	uxtb	r3, r3
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d03e      	beq.n	8014d3a <HAL_DMA_IRQHandler+0x5c2>
      {
        /* Clear the half transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_HTIF0_4 << (hdma->StreamIndex & 0x1FU);
 8014cbc:	687b      	ldr	r3, [r7, #4]
 8014cbe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014cc0:	f003 031f 	and.w	r3, r3, #31
 8014cc4:	2210      	movs	r2, #16
 8014cc6:	409a      	lsls	r2, r3
 8014cc8:	6a3b      	ldr	r3, [r7, #32]
 8014cca:	609a      	str	r2, [r3, #8]

        /* Multi_Buffering mode enabled */
        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8014ccc:	687b      	ldr	r3, [r7, #4]
 8014cce:	681b      	ldr	r3, [r3, #0]
 8014cd0:	681b      	ldr	r3, [r3, #0]
 8014cd2:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014cd6:	2b00      	cmp	r3, #0
 8014cd8:	d018      	beq.n	8014d0c <HAL_DMA_IRQHandler+0x594>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8014cda:	687b      	ldr	r3, [r7, #4]
 8014cdc:	681b      	ldr	r3, [r3, #0]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d108      	bne.n	8014cfa <HAL_DMA_IRQHandler+0x582>
          {
            if(hdma->XferHalfCpltCallback != NULL)
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cec:	2b00      	cmp	r3, #0
 8014cee:	d024      	beq.n	8014d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferHalfCpltCallback(hdma);
 8014cf0:	687b      	ldr	r3, [r7, #4]
 8014cf2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014cf4:	6878      	ldr	r0, [r7, #4]
 8014cf6:	4798      	blx	r3
 8014cf8:	e01f      	b.n	8014d3a <HAL_DMA_IRQHandler+0x5c2>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferM1HalfCpltCallback != NULL)
 8014cfa:	687b      	ldr	r3, [r7, #4]
 8014cfc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014cfe:	2b00      	cmp	r3, #0
 8014d00:	d01b      	beq.n	8014d3a <HAL_DMA_IRQHandler+0x5c2>
            {
              /* Half transfer callback */
              hdma->XferM1HalfCpltCallback(hdma);
 8014d02:	687b      	ldr	r3, [r7, #4]
 8014d04:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014d06:	6878      	ldr	r0, [r7, #4]
 8014d08:	4798      	blx	r3
 8014d0a:	e016      	b.n	8014d3a <HAL_DMA_IRQHandler+0x5c2>
          }
        }
        else
        {
          /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8014d0c:	687b      	ldr	r3, [r7, #4]
 8014d0e:	681b      	ldr	r3, [r3, #0]
 8014d10:	681b      	ldr	r3, [r3, #0]
 8014d12:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d107      	bne.n	8014d2a <HAL_DMA_IRQHandler+0x5b2>
          {
            /* Disable the half transfer interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8014d1a:	687b      	ldr	r3, [r7, #4]
 8014d1c:	681b      	ldr	r3, [r3, #0]
 8014d1e:	681a      	ldr	r2, [r3, #0]
 8014d20:	687b      	ldr	r3, [r7, #4]
 8014d22:	681b      	ldr	r3, [r3, #0]
 8014d24:	f022 0208 	bic.w	r2, r2, #8
 8014d28:	601a      	str	r2, [r3, #0]
          }

          if(hdma->XferHalfCpltCallback != NULL)
 8014d2a:	687b      	ldr	r3, [r7, #4]
 8014d2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d2e:	2b00      	cmp	r3, #0
 8014d30:	d003      	beq.n	8014d3a <HAL_DMA_IRQHandler+0x5c2>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8014d32:	687b      	ldr	r3, [r7, #4]
 8014d34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d36:	6878      	ldr	r0, [r7, #4]
 8014d38:	4798      	blx	r3
          }
        }
      }
    }
    /* Transfer Complete Interrupt management ***********************************/
    if ((tmpisr_dma & (DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU))) != 0U)
 8014d3a:	687b      	ldr	r3, [r7, #4]
 8014d3c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014d3e:	f003 031f 	and.w	r3, r3, #31
 8014d42:	2220      	movs	r2, #32
 8014d44:	409a      	lsls	r2, r3
 8014d46:	69bb      	ldr	r3, [r7, #24]
 8014d48:	4013      	ands	r3, r2
 8014d4a:	2b00      	cmp	r3, #0
 8014d4c:	f000 8110 	beq.w	8014f70 <HAL_DMA_IRQHandler+0x7f8>
    {
      if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != 0U)
 8014d50:	687b      	ldr	r3, [r7, #4]
 8014d52:	681b      	ldr	r3, [r3, #0]
 8014d54:	4a2c      	ldr	r2, [pc, #176]	@ (8014e08 <HAL_DMA_IRQHandler+0x690>)
 8014d56:	4293      	cmp	r3, r2
 8014d58:	d04a      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d5a:	687b      	ldr	r3, [r7, #4]
 8014d5c:	681b      	ldr	r3, [r3, #0]
 8014d5e:	4a2b      	ldr	r2, [pc, #172]	@ (8014e0c <HAL_DMA_IRQHandler+0x694>)
 8014d60:	4293      	cmp	r3, r2
 8014d62:	d045      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d64:	687b      	ldr	r3, [r7, #4]
 8014d66:	681b      	ldr	r3, [r3, #0]
 8014d68:	4a29      	ldr	r2, [pc, #164]	@ (8014e10 <HAL_DMA_IRQHandler+0x698>)
 8014d6a:	4293      	cmp	r3, r2
 8014d6c:	d040      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d6e:	687b      	ldr	r3, [r7, #4]
 8014d70:	681b      	ldr	r3, [r3, #0]
 8014d72:	4a28      	ldr	r2, [pc, #160]	@ (8014e14 <HAL_DMA_IRQHandler+0x69c>)
 8014d74:	4293      	cmp	r3, r2
 8014d76:	d03b      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d78:	687b      	ldr	r3, [r7, #4]
 8014d7a:	681b      	ldr	r3, [r3, #0]
 8014d7c:	4a26      	ldr	r2, [pc, #152]	@ (8014e18 <HAL_DMA_IRQHandler+0x6a0>)
 8014d7e:	4293      	cmp	r3, r2
 8014d80:	d036      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d82:	687b      	ldr	r3, [r7, #4]
 8014d84:	681b      	ldr	r3, [r3, #0]
 8014d86:	4a25      	ldr	r2, [pc, #148]	@ (8014e1c <HAL_DMA_IRQHandler+0x6a4>)
 8014d88:	4293      	cmp	r3, r2
 8014d8a:	d031      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d8c:	687b      	ldr	r3, [r7, #4]
 8014d8e:	681b      	ldr	r3, [r3, #0]
 8014d90:	4a23      	ldr	r2, [pc, #140]	@ (8014e20 <HAL_DMA_IRQHandler+0x6a8>)
 8014d92:	4293      	cmp	r3, r2
 8014d94:	d02c      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014d96:	687b      	ldr	r3, [r7, #4]
 8014d98:	681b      	ldr	r3, [r3, #0]
 8014d9a:	4a22      	ldr	r2, [pc, #136]	@ (8014e24 <HAL_DMA_IRQHandler+0x6ac>)
 8014d9c:	4293      	cmp	r3, r2
 8014d9e:	d027      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014da0:	687b      	ldr	r3, [r7, #4]
 8014da2:	681b      	ldr	r3, [r3, #0]
 8014da4:	4a20      	ldr	r2, [pc, #128]	@ (8014e28 <HAL_DMA_IRQHandler+0x6b0>)
 8014da6:	4293      	cmp	r3, r2
 8014da8:	d022      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014daa:	687b      	ldr	r3, [r7, #4]
 8014dac:	681b      	ldr	r3, [r3, #0]
 8014dae:	4a1f      	ldr	r2, [pc, #124]	@ (8014e2c <HAL_DMA_IRQHandler+0x6b4>)
 8014db0:	4293      	cmp	r3, r2
 8014db2:	d01d      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014db4:	687b      	ldr	r3, [r7, #4]
 8014db6:	681b      	ldr	r3, [r3, #0]
 8014db8:	4a1d      	ldr	r2, [pc, #116]	@ (8014e30 <HAL_DMA_IRQHandler+0x6b8>)
 8014dba:	4293      	cmp	r3, r2
 8014dbc:	d018      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014dbe:	687b      	ldr	r3, [r7, #4]
 8014dc0:	681b      	ldr	r3, [r3, #0]
 8014dc2:	4a1c      	ldr	r2, [pc, #112]	@ (8014e34 <HAL_DMA_IRQHandler+0x6bc>)
 8014dc4:	4293      	cmp	r3, r2
 8014dc6:	d013      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	681b      	ldr	r3, [r3, #0]
 8014dcc:	4a1a      	ldr	r2, [pc, #104]	@ (8014e38 <HAL_DMA_IRQHandler+0x6c0>)
 8014dce:	4293      	cmp	r3, r2
 8014dd0:	d00e      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014dd2:	687b      	ldr	r3, [r7, #4]
 8014dd4:	681b      	ldr	r3, [r3, #0]
 8014dd6:	4a19      	ldr	r2, [pc, #100]	@ (8014e3c <HAL_DMA_IRQHandler+0x6c4>)
 8014dd8:	4293      	cmp	r3, r2
 8014dda:	d009      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014ddc:	687b      	ldr	r3, [r7, #4]
 8014dde:	681b      	ldr	r3, [r3, #0]
 8014de0:	4a17      	ldr	r2, [pc, #92]	@ (8014e40 <HAL_DMA_IRQHandler+0x6c8>)
 8014de2:	4293      	cmp	r3, r2
 8014de4:	d004      	beq.n	8014df0 <HAL_DMA_IRQHandler+0x678>
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	4a16      	ldr	r2, [pc, #88]	@ (8014e44 <HAL_DMA_IRQHandler+0x6cc>)
 8014dec:	4293      	cmp	r3, r2
 8014dee:	d12b      	bne.n	8014e48 <HAL_DMA_IRQHandler+0x6d0>
 8014df0:	687b      	ldr	r3, [r7, #4]
 8014df2:	681b      	ldr	r3, [r3, #0]
 8014df4:	681b      	ldr	r3, [r3, #0]
 8014df6:	f003 0310 	and.w	r3, r3, #16
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	bf14      	ite	ne
 8014dfe:	2301      	movne	r3, #1
 8014e00:	2300      	moveq	r3, #0
 8014e02:	b2db      	uxtb	r3, r3
 8014e04:	e02a      	b.n	8014e5c <HAL_DMA_IRQHandler+0x6e4>
 8014e06:	bf00      	nop
 8014e08:	40020010 	.word	0x40020010
 8014e0c:	40020028 	.word	0x40020028
 8014e10:	40020040 	.word	0x40020040
 8014e14:	40020058 	.word	0x40020058
 8014e18:	40020070 	.word	0x40020070
 8014e1c:	40020088 	.word	0x40020088
 8014e20:	400200a0 	.word	0x400200a0
 8014e24:	400200b8 	.word	0x400200b8
 8014e28:	40020410 	.word	0x40020410
 8014e2c:	40020428 	.word	0x40020428
 8014e30:	40020440 	.word	0x40020440
 8014e34:	40020458 	.word	0x40020458
 8014e38:	40020470 	.word	0x40020470
 8014e3c:	40020488 	.word	0x40020488
 8014e40:	400204a0 	.word	0x400204a0
 8014e44:	400204b8 	.word	0x400204b8
 8014e48:	687b      	ldr	r3, [r7, #4]
 8014e4a:	681b      	ldr	r3, [r3, #0]
 8014e4c:	681b      	ldr	r3, [r3, #0]
 8014e4e:	f003 0302 	and.w	r3, r3, #2
 8014e52:	2b00      	cmp	r3, #0
 8014e54:	bf14      	ite	ne
 8014e56:	2301      	movne	r3, #1
 8014e58:	2300      	moveq	r3, #0
 8014e5a:	b2db      	uxtb	r3, r3
 8014e5c:	2b00      	cmp	r3, #0
 8014e5e:	f000 8087 	beq.w	8014f70 <HAL_DMA_IRQHandler+0x7f8>
      {
        /* Clear the transfer complete flag */
        regs_dma->IFCR = DMA_FLAG_TCIF0_4 << (hdma->StreamIndex & 0x1FU);
 8014e62:	687b      	ldr	r3, [r7, #4]
 8014e64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014e66:	f003 031f 	and.w	r3, r3, #31
 8014e6a:	2220      	movs	r2, #32
 8014e6c:	409a      	lsls	r2, r3
 8014e6e:	6a3b      	ldr	r3, [r7, #32]
 8014e70:	609a      	str	r2, [r3, #8]

        if(HAL_DMA_STATE_ABORT == hdma->State)
 8014e72:	687b      	ldr	r3, [r7, #4]
 8014e74:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8014e78:	b2db      	uxtb	r3, r3
 8014e7a:	2b04      	cmp	r3, #4
 8014e7c:	d139      	bne.n	8014ef2 <HAL_DMA_IRQHandler+0x77a>
        {
          /* Disable all the transfer interrupts */
          ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	681b      	ldr	r3, [r3, #0]
 8014e82:	681a      	ldr	r2, [r3, #0]
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	681b      	ldr	r3, [r3, #0]
 8014e88:	f022 0216 	bic.w	r2, r2, #22
 8014e8c:	601a      	str	r2, [r3, #0]
          ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR &= ~(DMA_IT_FE);
 8014e8e:	687b      	ldr	r3, [r7, #4]
 8014e90:	681b      	ldr	r3, [r3, #0]
 8014e92:	695a      	ldr	r2, [r3, #20]
 8014e94:	687b      	ldr	r3, [r7, #4]
 8014e96:	681b      	ldr	r3, [r3, #0]
 8014e98:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8014e9c:	615a      	str	r2, [r3, #20]

          if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8014e9e:	687b      	ldr	r3, [r7, #4]
 8014ea0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014ea2:	2b00      	cmp	r3, #0
 8014ea4:	d103      	bne.n	8014eae <HAL_DMA_IRQHandler+0x736>
 8014ea6:	687b      	ldr	r3, [r7, #4]
 8014ea8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8014eaa:	2b00      	cmp	r3, #0
 8014eac:	d007      	beq.n	8014ebe <HAL_DMA_IRQHandler+0x746>
          {
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_HT);
 8014eae:	687b      	ldr	r3, [r7, #4]
 8014eb0:	681b      	ldr	r3, [r3, #0]
 8014eb2:	681a      	ldr	r2, [r3, #0]
 8014eb4:	687b      	ldr	r3, [r7, #4]
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	f022 0208 	bic.w	r2, r2, #8
 8014ebc:	601a      	str	r2, [r3, #0]
          }

          /* Clear all interrupt flags at correct offset within the register */
          regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8014ebe:	687b      	ldr	r3, [r7, #4]
 8014ec0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014ec2:	f003 031f 	and.w	r3, r3, #31
 8014ec6:	223f      	movs	r2, #63	@ 0x3f
 8014ec8:	409a      	lsls	r2, r3
 8014eca:	6a3b      	ldr	r3, [r7, #32]
 8014ecc:	609a      	str	r2, [r3, #8]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8014ece:	687b      	ldr	r3, [r7, #4]
 8014ed0:	2201      	movs	r2, #1
 8014ed2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8014ed6:	687b      	ldr	r3, [r7, #4]
 8014ed8:	2200      	movs	r2, #0
 8014eda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

          if(hdma->XferAbortCallback != NULL)
 8014ede:	687b      	ldr	r3, [r7, #4]
 8014ee0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	f000 834a 	beq.w	801557c <HAL_DMA_IRQHandler+0xe04>
          {
            hdma->XferAbortCallback(hdma);
 8014ee8:	687b      	ldr	r3, [r7, #4]
 8014eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8014eec:	6878      	ldr	r0, [r7, #4]
 8014eee:	4798      	blx	r3
          }
          return;
 8014ef0:	e344      	b.n	801557c <HAL_DMA_IRQHandler+0xe04>
        }

        if(((((DMA_Stream_TypeDef   *)hdma->Instance)->CR) & (uint32_t)(DMA_SxCR_DBM)) != 0U)
 8014ef2:	687b      	ldr	r3, [r7, #4]
 8014ef4:	681b      	ldr	r3, [r3, #0]
 8014ef6:	681b      	ldr	r3, [r3, #0]
 8014ef8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8014efc:	2b00      	cmp	r3, #0
 8014efe:	d018      	beq.n	8014f32 <HAL_DMA_IRQHandler+0x7ba>
        {
          /* Current memory buffer used is Memory 0 */
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CT) == 0U)
 8014f00:	687b      	ldr	r3, [r7, #4]
 8014f02:	681b      	ldr	r3, [r3, #0]
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014f0a:	2b00      	cmp	r3, #0
 8014f0c:	d108      	bne.n	8014f20 <HAL_DMA_IRQHandler+0x7a8>
          {
            if(hdma->XferM1CpltCallback != NULL)
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f12:	2b00      	cmp	r3, #0
 8014f14:	d02c      	beq.n	8014f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory1 */
              hdma->XferM1CpltCallback(hdma);
 8014f16:	687b      	ldr	r3, [r7, #4]
 8014f18:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8014f1a:	6878      	ldr	r0, [r7, #4]
 8014f1c:	4798      	blx	r3
 8014f1e:	e027      	b.n	8014f70 <HAL_DMA_IRQHandler+0x7f8>
            }
          }
          /* Current memory buffer used is Memory 1 */
          else
          {
            if(hdma->XferCpltCallback != NULL)
 8014f20:	687b      	ldr	r3, [r7, #4]
 8014f22:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f24:	2b00      	cmp	r3, #0
 8014f26:	d023      	beq.n	8014f70 <HAL_DMA_IRQHandler+0x7f8>
            {
              /* Transfer complete Callback for memory0 */
              hdma->XferCpltCallback(hdma);
 8014f28:	687b      	ldr	r3, [r7, #4]
 8014f2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f2c:	6878      	ldr	r0, [r7, #4]
 8014f2e:	4798      	blx	r3
 8014f30:	e01e      	b.n	8014f70 <HAL_DMA_IRQHandler+0x7f8>
          }
        }
        /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
        else
        {
          if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_CIRC) == 0U)
 8014f32:	687b      	ldr	r3, [r7, #4]
 8014f34:	681b      	ldr	r3, [r3, #0]
 8014f36:	681b      	ldr	r3, [r3, #0]
 8014f38:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014f3c:	2b00      	cmp	r3, #0
 8014f3e:	d10f      	bne.n	8014f60 <HAL_DMA_IRQHandler+0x7e8>
          {
            /* Disable the transfer complete interrupt */
            ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  &= ~(DMA_IT_TC);
 8014f40:	687b      	ldr	r3, [r7, #4]
 8014f42:	681b      	ldr	r3, [r3, #0]
 8014f44:	681a      	ldr	r2, [r3, #0]
 8014f46:	687b      	ldr	r3, [r7, #4]
 8014f48:	681b      	ldr	r3, [r3, #0]
 8014f4a:	f022 0210 	bic.w	r2, r2, #16
 8014f4e:	601a      	str	r2, [r3, #0]

            /* Change the DMA state */
            hdma->State = HAL_DMA_STATE_READY;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2201      	movs	r2, #1
 8014f54:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

            /* Process Unlocked */
            __HAL_UNLOCK(hdma);
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	2200      	movs	r2, #0
 8014f5c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
          }

          if(hdma->XferCpltCallback != NULL)
 8014f60:	687b      	ldr	r3, [r7, #4]
 8014f62:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d003      	beq.n	8014f70 <HAL_DMA_IRQHandler+0x7f8>
          {
            /* Transfer complete callback */
            hdma->XferCpltCallback(hdma);
 8014f68:	687b      	ldr	r3, [r7, #4]
 8014f6a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8014f6c:	6878      	ldr	r0, [r7, #4]
 8014f6e:	4798      	blx	r3
        }
      }
    }

    /* manage error case */
    if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	f000 8306 	beq.w	8015586 <HAL_DMA_IRQHandler+0xe0e>
    {
      if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != 0U)
 8014f7a:	687b      	ldr	r3, [r7, #4]
 8014f7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014f7e:	f003 0301 	and.w	r3, r3, #1
 8014f82:	2b00      	cmp	r3, #0
 8014f84:	f000 8088 	beq.w	8015098 <HAL_DMA_IRQHandler+0x920>
      {
        hdma->State = HAL_DMA_STATE_ABORT;
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	2204      	movs	r2, #4
 8014f8c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Disable the stream */
        __HAL_DMA_DISABLE(hdma);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	681b      	ldr	r3, [r3, #0]
 8014f94:	4a7a      	ldr	r2, [pc, #488]	@ (8015180 <HAL_DMA_IRQHandler+0xa08>)
 8014f96:	4293      	cmp	r3, r2
 8014f98:	d04a      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014f9a:	687b      	ldr	r3, [r7, #4]
 8014f9c:	681b      	ldr	r3, [r3, #0]
 8014f9e:	4a79      	ldr	r2, [pc, #484]	@ (8015184 <HAL_DMA_IRQHandler+0xa0c>)
 8014fa0:	4293      	cmp	r3, r2
 8014fa2:	d045      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fa4:	687b      	ldr	r3, [r7, #4]
 8014fa6:	681b      	ldr	r3, [r3, #0]
 8014fa8:	4a77      	ldr	r2, [pc, #476]	@ (8015188 <HAL_DMA_IRQHandler+0xa10>)
 8014faa:	4293      	cmp	r3, r2
 8014fac:	d040      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	4a76      	ldr	r2, [pc, #472]	@ (801518c <HAL_DMA_IRQHandler+0xa14>)
 8014fb4:	4293      	cmp	r3, r2
 8014fb6:	d03b      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	681b      	ldr	r3, [r3, #0]
 8014fbc:	4a74      	ldr	r2, [pc, #464]	@ (8015190 <HAL_DMA_IRQHandler+0xa18>)
 8014fbe:	4293      	cmp	r3, r2
 8014fc0:	d036      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	681b      	ldr	r3, [r3, #0]
 8014fc6:	4a73      	ldr	r2, [pc, #460]	@ (8015194 <HAL_DMA_IRQHandler+0xa1c>)
 8014fc8:	4293      	cmp	r3, r2
 8014fca:	d031      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	681b      	ldr	r3, [r3, #0]
 8014fd0:	4a71      	ldr	r2, [pc, #452]	@ (8015198 <HAL_DMA_IRQHandler+0xa20>)
 8014fd2:	4293      	cmp	r3, r2
 8014fd4:	d02c      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	681b      	ldr	r3, [r3, #0]
 8014fda:	4a70      	ldr	r2, [pc, #448]	@ (801519c <HAL_DMA_IRQHandler+0xa24>)
 8014fdc:	4293      	cmp	r3, r2
 8014fde:	d027      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fe0:	687b      	ldr	r3, [r7, #4]
 8014fe2:	681b      	ldr	r3, [r3, #0]
 8014fe4:	4a6e      	ldr	r2, [pc, #440]	@ (80151a0 <HAL_DMA_IRQHandler+0xa28>)
 8014fe6:	4293      	cmp	r3, r2
 8014fe8:	d022      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014fea:	687b      	ldr	r3, [r7, #4]
 8014fec:	681b      	ldr	r3, [r3, #0]
 8014fee:	4a6d      	ldr	r2, [pc, #436]	@ (80151a4 <HAL_DMA_IRQHandler+0xa2c>)
 8014ff0:	4293      	cmp	r3, r2
 8014ff2:	d01d      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	681b      	ldr	r3, [r3, #0]
 8014ff8:	4a6b      	ldr	r2, [pc, #428]	@ (80151a8 <HAL_DMA_IRQHandler+0xa30>)
 8014ffa:	4293      	cmp	r3, r2
 8014ffc:	d018      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8014ffe:	687b      	ldr	r3, [r7, #4]
 8015000:	681b      	ldr	r3, [r3, #0]
 8015002:	4a6a      	ldr	r2, [pc, #424]	@ (80151ac <HAL_DMA_IRQHandler+0xa34>)
 8015004:	4293      	cmp	r3, r2
 8015006:	d013      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8015008:	687b      	ldr	r3, [r7, #4]
 801500a:	681b      	ldr	r3, [r3, #0]
 801500c:	4a68      	ldr	r2, [pc, #416]	@ (80151b0 <HAL_DMA_IRQHandler+0xa38>)
 801500e:	4293      	cmp	r3, r2
 8015010:	d00e      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8015012:	687b      	ldr	r3, [r7, #4]
 8015014:	681b      	ldr	r3, [r3, #0]
 8015016:	4a67      	ldr	r2, [pc, #412]	@ (80151b4 <HAL_DMA_IRQHandler+0xa3c>)
 8015018:	4293      	cmp	r3, r2
 801501a:	d009      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 801501c:	687b      	ldr	r3, [r7, #4]
 801501e:	681b      	ldr	r3, [r3, #0]
 8015020:	4a65      	ldr	r2, [pc, #404]	@ (80151b8 <HAL_DMA_IRQHandler+0xa40>)
 8015022:	4293      	cmp	r3, r2
 8015024:	d004      	beq.n	8015030 <HAL_DMA_IRQHandler+0x8b8>
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	681b      	ldr	r3, [r3, #0]
 801502a:	4a64      	ldr	r2, [pc, #400]	@ (80151bc <HAL_DMA_IRQHandler+0xa44>)
 801502c:	4293      	cmp	r3, r2
 801502e:	d108      	bne.n	8015042 <HAL_DMA_IRQHandler+0x8ca>
 8015030:	687b      	ldr	r3, [r7, #4]
 8015032:	681b      	ldr	r3, [r3, #0]
 8015034:	681a      	ldr	r2, [r3, #0]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	681b      	ldr	r3, [r3, #0]
 801503a:	f022 0201 	bic.w	r2, r2, #1
 801503e:	601a      	str	r2, [r3, #0]
 8015040:	e007      	b.n	8015052 <HAL_DMA_IRQHandler+0x8da>
 8015042:	687b      	ldr	r3, [r7, #4]
 8015044:	681b      	ldr	r3, [r3, #0]
 8015046:	681a      	ldr	r2, [r3, #0]
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f022 0201 	bic.w	r2, r2, #1
 8015050:	601a      	str	r2, [r3, #0]

        do
        {
          if (++count > timeout)
 8015052:	68fb      	ldr	r3, [r7, #12]
 8015054:	3301      	adds	r3, #1
 8015056:	60fb      	str	r3, [r7, #12]
 8015058:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801505a:	429a      	cmp	r2, r3
 801505c:	d307      	bcc.n	801506e <HAL_DMA_IRQHandler+0x8f6>
          {
            break;
          }
        }
        while((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U);
 801505e:	687b      	ldr	r3, [r7, #4]
 8015060:	681b      	ldr	r3, [r3, #0]
 8015062:	681b      	ldr	r3, [r3, #0]
 8015064:	f003 0301 	and.w	r3, r3, #1
 8015068:	2b00      	cmp	r3, #0
 801506a:	d1f2      	bne.n	8015052 <HAL_DMA_IRQHandler+0x8da>
 801506c:	e000      	b.n	8015070 <HAL_DMA_IRQHandler+0x8f8>
            break;
 801506e:	bf00      	nop

        if((((DMA_Stream_TypeDef   *)hdma->Instance)->CR & DMA_SxCR_EN) != 0U)
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	681b      	ldr	r3, [r3, #0]
 8015076:	f003 0301 	and.w	r3, r3, #1
 801507a:	2b00      	cmp	r3, #0
 801507c:	d004      	beq.n	8015088 <HAL_DMA_IRQHandler+0x910>
        {
          /* Change the DMA state to error if DMA disable fails */
          hdma->State = HAL_DMA_STATE_ERROR;
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	2203      	movs	r2, #3
 8015082:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
 8015086:	e003      	b.n	8015090 <HAL_DMA_IRQHandler+0x918>
        }
        else
        {
          /* Change the DMA state to Ready if DMA disable success */
          hdma->State = HAL_DMA_STATE_READY;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	2201      	movs	r2, #1
 801508c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        }

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	2200      	movs	r2, #0
 8015094:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
      }

      if(hdma->XferErrorCallback != NULL)
 8015098:	687b      	ldr	r3, [r7, #4]
 801509a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801509c:	2b00      	cmp	r3, #0
 801509e:	f000 8272 	beq.w	8015586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 80150a2:	687b      	ldr	r3, [r7, #4]
 80150a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80150a6:	6878      	ldr	r0, [r7, #4]
 80150a8:	4798      	blx	r3
 80150aa:	e26c      	b.n	8015586 <HAL_DMA_IRQHandler+0xe0e>
      }
    }
  }
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U)  /* BDMA instance(s) */
 80150ac:	687b      	ldr	r3, [r7, #4]
 80150ae:	681b      	ldr	r3, [r3, #0]
 80150b0:	4a43      	ldr	r2, [pc, #268]	@ (80151c0 <HAL_DMA_IRQHandler+0xa48>)
 80150b2:	4293      	cmp	r3, r2
 80150b4:	d022      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	4a42      	ldr	r2, [pc, #264]	@ (80151c4 <HAL_DMA_IRQHandler+0xa4c>)
 80150bc:	4293      	cmp	r3, r2
 80150be:	d01d      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150c0:	687b      	ldr	r3, [r7, #4]
 80150c2:	681b      	ldr	r3, [r3, #0]
 80150c4:	4a40      	ldr	r2, [pc, #256]	@ (80151c8 <HAL_DMA_IRQHandler+0xa50>)
 80150c6:	4293      	cmp	r3, r2
 80150c8:	d018      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150ca:	687b      	ldr	r3, [r7, #4]
 80150cc:	681b      	ldr	r3, [r3, #0]
 80150ce:	4a3f      	ldr	r2, [pc, #252]	@ (80151cc <HAL_DMA_IRQHandler+0xa54>)
 80150d0:	4293      	cmp	r3, r2
 80150d2:	d013      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150d4:	687b      	ldr	r3, [r7, #4]
 80150d6:	681b      	ldr	r3, [r3, #0]
 80150d8:	4a3d      	ldr	r2, [pc, #244]	@ (80151d0 <HAL_DMA_IRQHandler+0xa58>)
 80150da:	4293      	cmp	r3, r2
 80150dc:	d00e      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150de:	687b      	ldr	r3, [r7, #4]
 80150e0:	681b      	ldr	r3, [r3, #0]
 80150e2:	4a3c      	ldr	r2, [pc, #240]	@ (80151d4 <HAL_DMA_IRQHandler+0xa5c>)
 80150e4:	4293      	cmp	r3, r2
 80150e6:	d009      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150e8:	687b      	ldr	r3, [r7, #4]
 80150ea:	681b      	ldr	r3, [r3, #0]
 80150ec:	4a3a      	ldr	r2, [pc, #232]	@ (80151d8 <HAL_DMA_IRQHandler+0xa60>)
 80150ee:	4293      	cmp	r3, r2
 80150f0:	d004      	beq.n	80150fc <HAL_DMA_IRQHandler+0x984>
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	4a39      	ldr	r2, [pc, #228]	@ (80151dc <HAL_DMA_IRQHandler+0xa64>)
 80150f8:	4293      	cmp	r3, r2
 80150fa:	d101      	bne.n	8015100 <HAL_DMA_IRQHandler+0x988>
 80150fc:	2301      	movs	r3, #1
 80150fe:	e000      	b.n	8015102 <HAL_DMA_IRQHandler+0x98a>
 8015100:	2300      	movs	r3, #0
 8015102:	2b00      	cmp	r3, #0
 8015104:	f000 823f 	beq.w	8015586 <HAL_DMA_IRQHandler+0xe0e>
  {
    ccr_reg = (((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR);
 8015108:	687b      	ldr	r3, [r7, #4]
 801510a:	681b      	ldr	r3, [r3, #0]
 801510c:	681b      	ldr	r3, [r3, #0]
 801510e:	613b      	str	r3, [r7, #16]

    /* Half Transfer Complete Interrupt management ******************************/
    if (((tmpisr_bdma & (BDMA_FLAG_HT0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_HTIE) != 0U))
 8015110:	687b      	ldr	r3, [r7, #4]
 8015112:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015114:	f003 031f 	and.w	r3, r3, #31
 8015118:	2204      	movs	r2, #4
 801511a:	409a      	lsls	r2, r3
 801511c:	697b      	ldr	r3, [r7, #20]
 801511e:	4013      	ands	r3, r2
 8015120:	2b00      	cmp	r3, #0
 8015122:	f000 80cd 	beq.w	80152c0 <HAL_DMA_IRQHandler+0xb48>
 8015126:	693b      	ldr	r3, [r7, #16]
 8015128:	f003 0304 	and.w	r3, r3, #4
 801512c:	2b00      	cmp	r3, #0
 801512e:	f000 80c7 	beq.w	80152c0 <HAL_DMA_IRQHandler+0xb48>
    {
      /* Clear the half transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_HTIF0 << (hdma->StreamIndex & 0x1FU));
 8015132:	687b      	ldr	r3, [r7, #4]
 8015134:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015136:	f003 031f 	and.w	r3, r3, #31
 801513a:	2204      	movs	r2, #4
 801513c:	409a      	lsls	r2, r3
 801513e:	69fb      	ldr	r3, [r7, #28]
 8015140:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015142:	693b      	ldr	r3, [r7, #16]
 8015144:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015148:	2b00      	cmp	r3, #0
 801514a:	d049      	beq.n	80151e0 <HAL_DMA_IRQHandler+0xa68>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 801514c:	693b      	ldr	r3, [r7, #16]
 801514e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015152:	2b00      	cmp	r3, #0
 8015154:	d109      	bne.n	801516a <HAL_DMA_IRQHandler+0x9f2>
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8015156:	687b      	ldr	r3, [r7, #4]
 8015158:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801515a:	2b00      	cmp	r3, #0
 801515c:	f000 8210 	beq.w	8015580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 1 */
            hdma->XferM1HalfCpltCallback(hdma);
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015164:	6878      	ldr	r0, [r7, #4]
 8015166:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015168:	e20a      	b.n	8015580 <HAL_DMA_IRQHandler+0xe08>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferHalfCpltCallback != NULL)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801516e:	2b00      	cmp	r3, #0
 8015170:	f000 8206 	beq.w	8015580 <HAL_DMA_IRQHandler+0xe08>
          {
            /* Half transfer Callback for Memory 0 */
            hdma->XferHalfCpltCallback(hdma);
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015178:	6878      	ldr	r0, [r7, #4]
 801517a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801517c:	e200      	b.n	8015580 <HAL_DMA_IRQHandler+0xe08>
 801517e:	bf00      	nop
 8015180:	40020010 	.word	0x40020010
 8015184:	40020028 	.word	0x40020028
 8015188:	40020040 	.word	0x40020040
 801518c:	40020058 	.word	0x40020058
 8015190:	40020070 	.word	0x40020070
 8015194:	40020088 	.word	0x40020088
 8015198:	400200a0 	.word	0x400200a0
 801519c:	400200b8 	.word	0x400200b8
 80151a0:	40020410 	.word	0x40020410
 80151a4:	40020428 	.word	0x40020428
 80151a8:	40020440 	.word	0x40020440
 80151ac:	40020458 	.word	0x40020458
 80151b0:	40020470 	.word	0x40020470
 80151b4:	40020488 	.word	0x40020488
 80151b8:	400204a0 	.word	0x400204a0
 80151bc:	400204b8 	.word	0x400204b8
 80151c0:	58025408 	.word	0x58025408
 80151c4:	5802541c 	.word	0x5802541c
 80151c8:	58025430 	.word	0x58025430
 80151cc:	58025444 	.word	0x58025444
 80151d0:	58025458 	.word	0x58025458
 80151d4:	5802546c 	.word	0x5802546c
 80151d8:	58025480 	.word	0x58025480
 80151dc:	58025494 	.word	0x58025494
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 80151e0:	693b      	ldr	r3, [r7, #16]
 80151e2:	f003 0320 	and.w	r3, r3, #32
 80151e6:	2b00      	cmp	r3, #0
 80151e8:	d160      	bne.n	80152ac <HAL_DMA_IRQHandler+0xb34>
        {
          /* Disable the half transfer interrupt */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	681b      	ldr	r3, [r3, #0]
 80151ee:	4a7f      	ldr	r2, [pc, #508]	@ (80153ec <HAL_DMA_IRQHandler+0xc74>)
 80151f0:	4293      	cmp	r3, r2
 80151f2:	d04a      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 80151f4:	687b      	ldr	r3, [r7, #4]
 80151f6:	681b      	ldr	r3, [r3, #0]
 80151f8:	4a7d      	ldr	r2, [pc, #500]	@ (80153f0 <HAL_DMA_IRQHandler+0xc78>)
 80151fa:	4293      	cmp	r3, r2
 80151fc:	d045      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	4a7c      	ldr	r2, [pc, #496]	@ (80153f4 <HAL_DMA_IRQHandler+0xc7c>)
 8015204:	4293      	cmp	r3, r2
 8015206:	d040      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015208:	687b      	ldr	r3, [r7, #4]
 801520a:	681b      	ldr	r3, [r3, #0]
 801520c:	4a7a      	ldr	r2, [pc, #488]	@ (80153f8 <HAL_DMA_IRQHandler+0xc80>)
 801520e:	4293      	cmp	r3, r2
 8015210:	d03b      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	681b      	ldr	r3, [r3, #0]
 8015216:	4a79      	ldr	r2, [pc, #484]	@ (80153fc <HAL_DMA_IRQHandler+0xc84>)
 8015218:	4293      	cmp	r3, r2
 801521a:	d036      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 801521c:	687b      	ldr	r3, [r7, #4]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	4a77      	ldr	r2, [pc, #476]	@ (8015400 <HAL_DMA_IRQHandler+0xc88>)
 8015222:	4293      	cmp	r3, r2
 8015224:	d031      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015226:	687b      	ldr	r3, [r7, #4]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	4a76      	ldr	r2, [pc, #472]	@ (8015404 <HAL_DMA_IRQHandler+0xc8c>)
 801522c:	4293      	cmp	r3, r2
 801522e:	d02c      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	681b      	ldr	r3, [r3, #0]
 8015234:	4a74      	ldr	r2, [pc, #464]	@ (8015408 <HAL_DMA_IRQHandler+0xc90>)
 8015236:	4293      	cmp	r3, r2
 8015238:	d027      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	681b      	ldr	r3, [r3, #0]
 801523e:	4a73      	ldr	r2, [pc, #460]	@ (801540c <HAL_DMA_IRQHandler+0xc94>)
 8015240:	4293      	cmp	r3, r2
 8015242:	d022      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015244:	687b      	ldr	r3, [r7, #4]
 8015246:	681b      	ldr	r3, [r3, #0]
 8015248:	4a71      	ldr	r2, [pc, #452]	@ (8015410 <HAL_DMA_IRQHandler+0xc98>)
 801524a:	4293      	cmp	r3, r2
 801524c:	d01d      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	681b      	ldr	r3, [r3, #0]
 8015252:	4a70      	ldr	r2, [pc, #448]	@ (8015414 <HAL_DMA_IRQHandler+0xc9c>)
 8015254:	4293      	cmp	r3, r2
 8015256:	d018      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015258:	687b      	ldr	r3, [r7, #4]
 801525a:	681b      	ldr	r3, [r3, #0]
 801525c:	4a6e      	ldr	r2, [pc, #440]	@ (8015418 <HAL_DMA_IRQHandler+0xca0>)
 801525e:	4293      	cmp	r3, r2
 8015260:	d013      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015262:	687b      	ldr	r3, [r7, #4]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	4a6d      	ldr	r2, [pc, #436]	@ (801541c <HAL_DMA_IRQHandler+0xca4>)
 8015268:	4293      	cmp	r3, r2
 801526a:	d00e      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 801526c:	687b      	ldr	r3, [r7, #4]
 801526e:	681b      	ldr	r3, [r3, #0]
 8015270:	4a6b      	ldr	r2, [pc, #428]	@ (8015420 <HAL_DMA_IRQHandler+0xca8>)
 8015272:	4293      	cmp	r3, r2
 8015274:	d009      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	4a6a      	ldr	r2, [pc, #424]	@ (8015424 <HAL_DMA_IRQHandler+0xcac>)
 801527c:	4293      	cmp	r3, r2
 801527e:	d004      	beq.n	801528a <HAL_DMA_IRQHandler+0xb12>
 8015280:	687b      	ldr	r3, [r7, #4]
 8015282:	681b      	ldr	r3, [r3, #0]
 8015284:	4a68      	ldr	r2, [pc, #416]	@ (8015428 <HAL_DMA_IRQHandler+0xcb0>)
 8015286:	4293      	cmp	r3, r2
 8015288:	d108      	bne.n	801529c <HAL_DMA_IRQHandler+0xb24>
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	681b      	ldr	r3, [r3, #0]
 801528e:	681a      	ldr	r2, [r3, #0]
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	681b      	ldr	r3, [r3, #0]
 8015294:	f022 0208 	bic.w	r2, r2, #8
 8015298:	601a      	str	r2, [r3, #0]
 801529a:	e007      	b.n	80152ac <HAL_DMA_IRQHandler+0xb34>
 801529c:	687b      	ldr	r3, [r7, #4]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	681a      	ldr	r2, [r3, #0]
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	681b      	ldr	r3, [r3, #0]
 80152a6:	f022 0204 	bic.w	r2, r2, #4
 80152aa:	601a      	str	r2, [r3, #0]
        }

        /* DMA peripheral state is not updated in Half Transfer */
        /* but in Transfer Complete case */

       if(hdma->XferHalfCpltCallback != NULL)
 80152ac:	687b      	ldr	r3, [r7, #4]
 80152ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152b0:	2b00      	cmp	r3, #0
 80152b2:	f000 8165 	beq.w	8015580 <HAL_DMA_IRQHandler+0xe08>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80152be:	e15f      	b.n	8015580 <HAL_DMA_IRQHandler+0xe08>
        }
      }
    }

    /* Transfer Complete Interrupt management ***********************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TC0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TCIE) != 0U))
 80152c0:	687b      	ldr	r3, [r7, #4]
 80152c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80152c4:	f003 031f 	and.w	r3, r3, #31
 80152c8:	2202      	movs	r2, #2
 80152ca:	409a      	lsls	r2, r3
 80152cc:	697b      	ldr	r3, [r7, #20]
 80152ce:	4013      	ands	r3, r2
 80152d0:	2b00      	cmp	r3, #0
 80152d2:	f000 80c5 	beq.w	8015460 <HAL_DMA_IRQHandler+0xce8>
 80152d6:	693b      	ldr	r3, [r7, #16]
 80152d8:	f003 0302 	and.w	r3, r3, #2
 80152dc:	2b00      	cmp	r3, #0
 80152de:	f000 80bf 	beq.w	8015460 <HAL_DMA_IRQHandler+0xce8>
    {
      /* Clear the transfer complete flag */
      regs_bdma->IFCR = (BDMA_ISR_TCIF0) << (hdma->StreamIndex & 0x1FU);
 80152e2:	687b      	ldr	r3, [r7, #4]
 80152e4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80152e6:	f003 031f 	and.w	r3, r3, #31
 80152ea:	2202      	movs	r2, #2
 80152ec:	409a      	lsls	r2, r3
 80152ee:	69fb      	ldr	r3, [r7, #28]
 80152f0:	605a      	str	r2, [r3, #4]

      /* Disable the transfer complete interrupt if the DMA mode is Double Buffering */
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 80152f2:	693b      	ldr	r3, [r7, #16]
 80152f4:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80152f8:	2b00      	cmp	r3, #0
 80152fa:	d018      	beq.n	801532e <HAL_DMA_IRQHandler+0xbb6>
      {
        /* Current memory buffer used is Memory 0 */
        if((ccr_reg & BDMA_CCR_CT) == 0U)
 80152fc:	693b      	ldr	r3, [r7, #16]
 80152fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015302:	2b00      	cmp	r3, #0
 8015304:	d109      	bne.n	801531a <HAL_DMA_IRQHandler+0xba2>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8015306:	687b      	ldr	r3, [r7, #4]
 8015308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801530a:	2b00      	cmp	r3, #0
 801530c:	f000 813a 	beq.w	8015584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 1 */
            hdma->XferM1CpltCallback(hdma);
 8015310:	687b      	ldr	r3, [r7, #4]
 8015312:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015314:	6878      	ldr	r0, [r7, #4]
 8015316:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015318:	e134      	b.n	8015584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801531e:	2b00      	cmp	r3, #0
 8015320:	f000 8130 	beq.w	8015584 <HAL_DMA_IRQHandler+0xe0c>
          {
            /* Transfer complete Callback for Memory 0 */
            hdma->XferCpltCallback(hdma);
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015328:	6878      	ldr	r0, [r7, #4]
 801532a:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801532c:	e12a      	b.n	8015584 <HAL_DMA_IRQHandler+0xe0c>
          }
        }
      }
      else
      {
        if((ccr_reg & BDMA_CCR_CIRC) == 0U)
 801532e:	693b      	ldr	r3, [r7, #16]
 8015330:	f003 0320 	and.w	r3, r3, #32
 8015334:	2b00      	cmp	r3, #0
 8015336:	f040 8089 	bne.w	801544c <HAL_DMA_IRQHandler+0xcd4>
        {
          /* Disable the transfer complete and error interrupt, if the DMA mode is not CIRCULAR */
          __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 801533a:	687b      	ldr	r3, [r7, #4]
 801533c:	681b      	ldr	r3, [r3, #0]
 801533e:	4a2b      	ldr	r2, [pc, #172]	@ (80153ec <HAL_DMA_IRQHandler+0xc74>)
 8015340:	4293      	cmp	r3, r2
 8015342:	d04a      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 8015344:	687b      	ldr	r3, [r7, #4]
 8015346:	681b      	ldr	r3, [r3, #0]
 8015348:	4a29      	ldr	r2, [pc, #164]	@ (80153f0 <HAL_DMA_IRQHandler+0xc78>)
 801534a:	4293      	cmp	r3, r2
 801534c:	d045      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 801534e:	687b      	ldr	r3, [r7, #4]
 8015350:	681b      	ldr	r3, [r3, #0]
 8015352:	4a28      	ldr	r2, [pc, #160]	@ (80153f4 <HAL_DMA_IRQHandler+0xc7c>)
 8015354:	4293      	cmp	r3, r2
 8015356:	d040      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 8015358:	687b      	ldr	r3, [r7, #4]
 801535a:	681b      	ldr	r3, [r3, #0]
 801535c:	4a26      	ldr	r2, [pc, #152]	@ (80153f8 <HAL_DMA_IRQHandler+0xc80>)
 801535e:	4293      	cmp	r3, r2
 8015360:	d03b      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 8015362:	687b      	ldr	r3, [r7, #4]
 8015364:	681b      	ldr	r3, [r3, #0]
 8015366:	4a25      	ldr	r2, [pc, #148]	@ (80153fc <HAL_DMA_IRQHandler+0xc84>)
 8015368:	4293      	cmp	r3, r2
 801536a:	d036      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 801536c:	687b      	ldr	r3, [r7, #4]
 801536e:	681b      	ldr	r3, [r3, #0]
 8015370:	4a23      	ldr	r2, [pc, #140]	@ (8015400 <HAL_DMA_IRQHandler+0xc88>)
 8015372:	4293      	cmp	r3, r2
 8015374:	d031      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 8015376:	687b      	ldr	r3, [r7, #4]
 8015378:	681b      	ldr	r3, [r3, #0]
 801537a:	4a22      	ldr	r2, [pc, #136]	@ (8015404 <HAL_DMA_IRQHandler+0xc8c>)
 801537c:	4293      	cmp	r3, r2
 801537e:	d02c      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 8015380:	687b      	ldr	r3, [r7, #4]
 8015382:	681b      	ldr	r3, [r3, #0]
 8015384:	4a20      	ldr	r2, [pc, #128]	@ (8015408 <HAL_DMA_IRQHandler+0xc90>)
 8015386:	4293      	cmp	r3, r2
 8015388:	d027      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	681b      	ldr	r3, [r3, #0]
 801538e:	4a1f      	ldr	r2, [pc, #124]	@ (801540c <HAL_DMA_IRQHandler+0xc94>)
 8015390:	4293      	cmp	r3, r2
 8015392:	d022      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 8015394:	687b      	ldr	r3, [r7, #4]
 8015396:	681b      	ldr	r3, [r3, #0]
 8015398:	4a1d      	ldr	r2, [pc, #116]	@ (8015410 <HAL_DMA_IRQHandler+0xc98>)
 801539a:	4293      	cmp	r3, r2
 801539c:	d01d      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 801539e:	687b      	ldr	r3, [r7, #4]
 80153a0:	681b      	ldr	r3, [r3, #0]
 80153a2:	4a1c      	ldr	r2, [pc, #112]	@ (8015414 <HAL_DMA_IRQHandler+0xc9c>)
 80153a4:	4293      	cmp	r3, r2
 80153a6:	d018      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	681b      	ldr	r3, [r3, #0]
 80153ac:	4a1a      	ldr	r2, [pc, #104]	@ (8015418 <HAL_DMA_IRQHandler+0xca0>)
 80153ae:	4293      	cmp	r3, r2
 80153b0:	d013      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 80153b2:	687b      	ldr	r3, [r7, #4]
 80153b4:	681b      	ldr	r3, [r3, #0]
 80153b6:	4a19      	ldr	r2, [pc, #100]	@ (801541c <HAL_DMA_IRQHandler+0xca4>)
 80153b8:	4293      	cmp	r3, r2
 80153ba:	d00e      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4a17      	ldr	r2, [pc, #92]	@ (8015420 <HAL_DMA_IRQHandler+0xca8>)
 80153c2:	4293      	cmp	r3, r2
 80153c4:	d009      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	4a16      	ldr	r2, [pc, #88]	@ (8015424 <HAL_DMA_IRQHandler+0xcac>)
 80153cc:	4293      	cmp	r3, r2
 80153ce:	d004      	beq.n	80153da <HAL_DMA_IRQHandler+0xc62>
 80153d0:	687b      	ldr	r3, [r7, #4]
 80153d2:	681b      	ldr	r3, [r3, #0]
 80153d4:	4a14      	ldr	r2, [pc, #80]	@ (8015428 <HAL_DMA_IRQHandler+0xcb0>)
 80153d6:	4293      	cmp	r3, r2
 80153d8:	d128      	bne.n	801542c <HAL_DMA_IRQHandler+0xcb4>
 80153da:	687b      	ldr	r3, [r7, #4]
 80153dc:	681b      	ldr	r3, [r3, #0]
 80153de:	681a      	ldr	r2, [r3, #0]
 80153e0:	687b      	ldr	r3, [r7, #4]
 80153e2:	681b      	ldr	r3, [r3, #0]
 80153e4:	f022 0214 	bic.w	r2, r2, #20
 80153e8:	601a      	str	r2, [r3, #0]
 80153ea:	e027      	b.n	801543c <HAL_DMA_IRQHandler+0xcc4>
 80153ec:	40020010 	.word	0x40020010
 80153f0:	40020028 	.word	0x40020028
 80153f4:	40020040 	.word	0x40020040
 80153f8:	40020058 	.word	0x40020058
 80153fc:	40020070 	.word	0x40020070
 8015400:	40020088 	.word	0x40020088
 8015404:	400200a0 	.word	0x400200a0
 8015408:	400200b8 	.word	0x400200b8
 801540c:	40020410 	.word	0x40020410
 8015410:	40020428 	.word	0x40020428
 8015414:	40020440 	.word	0x40020440
 8015418:	40020458 	.word	0x40020458
 801541c:	40020470 	.word	0x40020470
 8015420:	40020488 	.word	0x40020488
 8015424:	400204a0 	.word	0x400204a0
 8015428:	400204b8 	.word	0x400204b8
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	681b      	ldr	r3, [r3, #0]
 8015430:	681a      	ldr	r2, [r3, #0]
 8015432:	687b      	ldr	r3, [r7, #4]
 8015434:	681b      	ldr	r3, [r3, #0]
 8015436:	f022 020a 	bic.w	r2, r2, #10
 801543a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 801543c:	687b      	ldr	r3, [r7, #4]
 801543e:	2201      	movs	r2, #1
 8015440:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8015444:	687b      	ldr	r3, [r7, #4]
 8015446:	2200      	movs	r2, #0
 8015448:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 801544c:	687b      	ldr	r3, [r7, #4]
 801544e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015450:	2b00      	cmp	r3, #0
 8015452:	f000 8097 	beq.w	8015584 <HAL_DMA_IRQHandler+0xe0c>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8015456:	687b      	ldr	r3, [r7, #4]
 8015458:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801545a:	6878      	ldr	r0, [r7, #4]
 801545c:	4798      	blx	r3
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 801545e:	e091      	b.n	8015584 <HAL_DMA_IRQHandler+0xe0c>
        }
      }
    }
    /* Transfer Error Interrupt management **************************************/
    else if (((tmpisr_bdma & (BDMA_FLAG_TE0 << (hdma->StreamIndex & 0x1FU))) != 0U) && ((ccr_reg & BDMA_CCR_TEIE) != 0U))
 8015460:	687b      	ldr	r3, [r7, #4]
 8015462:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015464:	f003 031f 	and.w	r3, r3, #31
 8015468:	2208      	movs	r2, #8
 801546a:	409a      	lsls	r2, r3
 801546c:	697b      	ldr	r3, [r7, #20]
 801546e:	4013      	ands	r3, r2
 8015470:	2b00      	cmp	r3, #0
 8015472:	f000 8088 	beq.w	8015586 <HAL_DMA_IRQHandler+0xe0e>
 8015476:	693b      	ldr	r3, [r7, #16]
 8015478:	f003 0308 	and.w	r3, r3, #8
 801547c:	2b00      	cmp	r3, #0
 801547e:	f000 8082 	beq.w	8015586 <HAL_DMA_IRQHandler+0xe0e>
    {
      /* When a DMA transfer error occurs */
      /* A hardware clear of its EN bits is performed */
      /* Disable ALL DMA IT */
      __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015482:	687b      	ldr	r3, [r7, #4]
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	4a41      	ldr	r2, [pc, #260]	@ (801558c <HAL_DMA_IRQHandler+0xe14>)
 8015488:	4293      	cmp	r3, r2
 801548a:	d04a      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 801548c:	687b      	ldr	r3, [r7, #4]
 801548e:	681b      	ldr	r3, [r3, #0]
 8015490:	4a3f      	ldr	r2, [pc, #252]	@ (8015590 <HAL_DMA_IRQHandler+0xe18>)
 8015492:	4293      	cmp	r3, r2
 8015494:	d045      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 8015496:	687b      	ldr	r3, [r7, #4]
 8015498:	681b      	ldr	r3, [r3, #0]
 801549a:	4a3e      	ldr	r2, [pc, #248]	@ (8015594 <HAL_DMA_IRQHandler+0xe1c>)
 801549c:	4293      	cmp	r3, r2
 801549e:	d040      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154a0:	687b      	ldr	r3, [r7, #4]
 80154a2:	681b      	ldr	r3, [r3, #0]
 80154a4:	4a3c      	ldr	r2, [pc, #240]	@ (8015598 <HAL_DMA_IRQHandler+0xe20>)
 80154a6:	4293      	cmp	r3, r2
 80154a8:	d03b      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154aa:	687b      	ldr	r3, [r7, #4]
 80154ac:	681b      	ldr	r3, [r3, #0]
 80154ae:	4a3b      	ldr	r2, [pc, #236]	@ (801559c <HAL_DMA_IRQHandler+0xe24>)
 80154b0:	4293      	cmp	r3, r2
 80154b2:	d036      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	681b      	ldr	r3, [r3, #0]
 80154b8:	4a39      	ldr	r2, [pc, #228]	@ (80155a0 <HAL_DMA_IRQHandler+0xe28>)
 80154ba:	4293      	cmp	r3, r2
 80154bc:	d031      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154be:	687b      	ldr	r3, [r7, #4]
 80154c0:	681b      	ldr	r3, [r3, #0]
 80154c2:	4a38      	ldr	r2, [pc, #224]	@ (80155a4 <HAL_DMA_IRQHandler+0xe2c>)
 80154c4:	4293      	cmp	r3, r2
 80154c6:	d02c      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154c8:	687b      	ldr	r3, [r7, #4]
 80154ca:	681b      	ldr	r3, [r3, #0]
 80154cc:	4a36      	ldr	r2, [pc, #216]	@ (80155a8 <HAL_DMA_IRQHandler+0xe30>)
 80154ce:	4293      	cmp	r3, r2
 80154d0:	d027      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154d2:	687b      	ldr	r3, [r7, #4]
 80154d4:	681b      	ldr	r3, [r3, #0]
 80154d6:	4a35      	ldr	r2, [pc, #212]	@ (80155ac <HAL_DMA_IRQHandler+0xe34>)
 80154d8:	4293      	cmp	r3, r2
 80154da:	d022      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	4a33      	ldr	r2, [pc, #204]	@ (80155b0 <HAL_DMA_IRQHandler+0xe38>)
 80154e2:	4293      	cmp	r3, r2
 80154e4:	d01d      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	681b      	ldr	r3, [r3, #0]
 80154ea:	4a32      	ldr	r2, [pc, #200]	@ (80155b4 <HAL_DMA_IRQHandler+0xe3c>)
 80154ec:	4293      	cmp	r3, r2
 80154ee:	d018      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	681b      	ldr	r3, [r3, #0]
 80154f4:	4a30      	ldr	r2, [pc, #192]	@ (80155b8 <HAL_DMA_IRQHandler+0xe40>)
 80154f6:	4293      	cmp	r3, r2
 80154f8:	d013      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	681b      	ldr	r3, [r3, #0]
 80154fe:	4a2f      	ldr	r2, [pc, #188]	@ (80155bc <HAL_DMA_IRQHandler+0xe44>)
 8015500:	4293      	cmp	r3, r2
 8015502:	d00e      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 8015504:	687b      	ldr	r3, [r7, #4]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	4a2d      	ldr	r2, [pc, #180]	@ (80155c0 <HAL_DMA_IRQHandler+0xe48>)
 801550a:	4293      	cmp	r3, r2
 801550c:	d009      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	4a2c      	ldr	r2, [pc, #176]	@ (80155c4 <HAL_DMA_IRQHandler+0xe4c>)
 8015514:	4293      	cmp	r3, r2
 8015516:	d004      	beq.n	8015522 <HAL_DMA_IRQHandler+0xdaa>
 8015518:	687b      	ldr	r3, [r7, #4]
 801551a:	681b      	ldr	r3, [r3, #0]
 801551c:	4a2a      	ldr	r2, [pc, #168]	@ (80155c8 <HAL_DMA_IRQHandler+0xe50>)
 801551e:	4293      	cmp	r3, r2
 8015520:	d108      	bne.n	8015534 <HAL_DMA_IRQHandler+0xdbc>
 8015522:	687b      	ldr	r3, [r7, #4]
 8015524:	681b      	ldr	r3, [r3, #0]
 8015526:	681a      	ldr	r2, [r3, #0]
 8015528:	687b      	ldr	r3, [r7, #4]
 801552a:	681b      	ldr	r3, [r3, #0]
 801552c:	f022 021c 	bic.w	r2, r2, #28
 8015530:	601a      	str	r2, [r3, #0]
 8015532:	e007      	b.n	8015544 <HAL_DMA_IRQHandler+0xdcc>
 8015534:	687b      	ldr	r3, [r7, #4]
 8015536:	681b      	ldr	r3, [r3, #0]
 8015538:	681a      	ldr	r2, [r3, #0]
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	681b      	ldr	r3, [r3, #0]
 801553e:	f022 020e 	bic.w	r2, r2, #14
 8015542:	601a      	str	r2, [r3, #0]

      /* Clear all flags */
      regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8015548:	f003 031f 	and.w	r3, r3, #31
 801554c:	2201      	movs	r2, #1
 801554e:	409a      	lsls	r2, r3
 8015550:	69fb      	ldr	r3, [r7, #28]
 8015552:	605a      	str	r2, [r3, #4]

      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8015554:	687b      	ldr	r3, [r7, #4]
 8015556:	2201      	movs	r2, #1
 8015558:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 801555a:	687b      	ldr	r3, [r7, #4]
 801555c:	2201      	movs	r2, #1
 801555e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	2200      	movs	r2, #0
 8015566:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

      if (hdma->XferErrorCallback != NULL)
 801556a:	687b      	ldr	r3, [r7, #4]
 801556c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801556e:	2b00      	cmp	r3, #0
 8015570:	d009      	beq.n	8015586 <HAL_DMA_IRQHandler+0xe0e>
      {
        /* Transfer error callback */
        hdma->XferErrorCallback(hdma);
 8015572:	687b      	ldr	r3, [r7, #4]
 8015574:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015576:	6878      	ldr	r0, [r7, #4]
 8015578:	4798      	blx	r3
 801557a:	e004      	b.n	8015586 <HAL_DMA_IRQHandler+0xe0e>
          return;
 801557c:	bf00      	nop
 801557e:	e002      	b.n	8015586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015580:	bf00      	nop
 8015582:	e000      	b.n	8015586 <HAL_DMA_IRQHandler+0xe0e>
      if((ccr_reg & BDMA_CCR_DBM) != 0U)
 8015584:	bf00      	nop
  }
  else
  {
    /* Nothing To Do */
  }
}
 8015586:	3728      	adds	r7, #40	@ 0x28
 8015588:	46bd      	mov	sp, r7
 801558a:	bd80      	pop	{r7, pc}
 801558c:	40020010 	.word	0x40020010
 8015590:	40020028 	.word	0x40020028
 8015594:	40020040 	.word	0x40020040
 8015598:	40020058 	.word	0x40020058
 801559c:	40020070 	.word	0x40020070
 80155a0:	40020088 	.word	0x40020088
 80155a4:	400200a0 	.word	0x400200a0
 80155a8:	400200b8 	.word	0x400200b8
 80155ac:	40020410 	.word	0x40020410
 80155b0:	40020428 	.word	0x40020428
 80155b4:	40020440 	.word	0x40020440
 80155b8:	40020458 	.word	0x40020458
 80155bc:	40020470 	.word	0x40020470
 80155c0:	40020488 	.word	0x40020488
 80155c4:	400204a0 	.word	0x400204a0
 80155c8:	400204b8 	.word	0x400204b8

080155cc <HAL_DMA_GetError>:
  * @param  hdma : pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(const DMA_HandleTypeDef *hdma)
{
 80155cc:	b480      	push	{r7}
 80155ce:	b083      	sub	sp, #12
 80155d0:	af00      	add	r7, sp, #0
 80155d2:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80155d4:	687b      	ldr	r3, [r7, #4]
 80155d6:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80155d8:	4618      	mov	r0, r3
 80155da:	370c      	adds	r7, #12
 80155dc:	46bd      	mov	sp, r7
 80155de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155e2:	4770      	bx	lr

080155e4 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval None
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80155e4:	b480      	push	{r7}
 80155e6:	b087      	sub	sp, #28
 80155e8:	af00      	add	r7, sp, #0
 80155ea:	60f8      	str	r0, [r7, #12]
 80155ec:	60b9      	str	r1, [r7, #8]
 80155ee:	607a      	str	r2, [r7, #4]
 80155f0:	603b      	str	r3, [r7, #0]
  /* calculate DMA base and stream number */
  DMA_Base_Registers  *regs_dma  = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80155f2:	68fb      	ldr	r3, [r7, #12]
 80155f4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80155f6:	617b      	str	r3, [r7, #20]
  BDMA_Base_Registers *regs_bdma = (BDMA_Base_Registers *)hdma->StreamBaseAddress;
 80155f8:	68fb      	ldr	r3, [r7, #12]
 80155fa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80155fc:	613b      	str	r3, [r7, #16]

  if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80155fe:	68fb      	ldr	r3, [r7, #12]
 8015600:	681b      	ldr	r3, [r3, #0]
 8015602:	4a7f      	ldr	r2, [pc, #508]	@ (8015800 <DMA_SetConfig+0x21c>)
 8015604:	4293      	cmp	r3, r2
 8015606:	d072      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015608:	68fb      	ldr	r3, [r7, #12]
 801560a:	681b      	ldr	r3, [r3, #0]
 801560c:	4a7d      	ldr	r2, [pc, #500]	@ (8015804 <DMA_SetConfig+0x220>)
 801560e:	4293      	cmp	r3, r2
 8015610:	d06d      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015612:	68fb      	ldr	r3, [r7, #12]
 8015614:	681b      	ldr	r3, [r3, #0]
 8015616:	4a7c      	ldr	r2, [pc, #496]	@ (8015808 <DMA_SetConfig+0x224>)
 8015618:	4293      	cmp	r3, r2
 801561a:	d068      	beq.n	80156ee <DMA_SetConfig+0x10a>
 801561c:	68fb      	ldr	r3, [r7, #12]
 801561e:	681b      	ldr	r3, [r3, #0]
 8015620:	4a7a      	ldr	r2, [pc, #488]	@ (801580c <DMA_SetConfig+0x228>)
 8015622:	4293      	cmp	r3, r2
 8015624:	d063      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015626:	68fb      	ldr	r3, [r7, #12]
 8015628:	681b      	ldr	r3, [r3, #0]
 801562a:	4a79      	ldr	r2, [pc, #484]	@ (8015810 <DMA_SetConfig+0x22c>)
 801562c:	4293      	cmp	r3, r2
 801562e:	d05e      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015630:	68fb      	ldr	r3, [r7, #12]
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	4a77      	ldr	r2, [pc, #476]	@ (8015814 <DMA_SetConfig+0x230>)
 8015636:	4293      	cmp	r3, r2
 8015638:	d059      	beq.n	80156ee <DMA_SetConfig+0x10a>
 801563a:	68fb      	ldr	r3, [r7, #12]
 801563c:	681b      	ldr	r3, [r3, #0]
 801563e:	4a76      	ldr	r2, [pc, #472]	@ (8015818 <DMA_SetConfig+0x234>)
 8015640:	4293      	cmp	r3, r2
 8015642:	d054      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015644:	68fb      	ldr	r3, [r7, #12]
 8015646:	681b      	ldr	r3, [r3, #0]
 8015648:	4a74      	ldr	r2, [pc, #464]	@ (801581c <DMA_SetConfig+0x238>)
 801564a:	4293      	cmp	r3, r2
 801564c:	d04f      	beq.n	80156ee <DMA_SetConfig+0x10a>
 801564e:	68fb      	ldr	r3, [r7, #12]
 8015650:	681b      	ldr	r3, [r3, #0]
 8015652:	4a73      	ldr	r2, [pc, #460]	@ (8015820 <DMA_SetConfig+0x23c>)
 8015654:	4293      	cmp	r3, r2
 8015656:	d04a      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015658:	68fb      	ldr	r3, [r7, #12]
 801565a:	681b      	ldr	r3, [r3, #0]
 801565c:	4a71      	ldr	r2, [pc, #452]	@ (8015824 <DMA_SetConfig+0x240>)
 801565e:	4293      	cmp	r3, r2
 8015660:	d045      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015662:	68fb      	ldr	r3, [r7, #12]
 8015664:	681b      	ldr	r3, [r3, #0]
 8015666:	4a70      	ldr	r2, [pc, #448]	@ (8015828 <DMA_SetConfig+0x244>)
 8015668:	4293      	cmp	r3, r2
 801566a:	d040      	beq.n	80156ee <DMA_SetConfig+0x10a>
 801566c:	68fb      	ldr	r3, [r7, #12]
 801566e:	681b      	ldr	r3, [r3, #0]
 8015670:	4a6e      	ldr	r2, [pc, #440]	@ (801582c <DMA_SetConfig+0x248>)
 8015672:	4293      	cmp	r3, r2
 8015674:	d03b      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015676:	68fb      	ldr	r3, [r7, #12]
 8015678:	681b      	ldr	r3, [r3, #0]
 801567a:	4a6d      	ldr	r2, [pc, #436]	@ (8015830 <DMA_SetConfig+0x24c>)
 801567c:	4293      	cmp	r3, r2
 801567e:	d036      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015680:	68fb      	ldr	r3, [r7, #12]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	4a6b      	ldr	r2, [pc, #428]	@ (8015834 <DMA_SetConfig+0x250>)
 8015686:	4293      	cmp	r3, r2
 8015688:	d031      	beq.n	80156ee <DMA_SetConfig+0x10a>
 801568a:	68fb      	ldr	r3, [r7, #12]
 801568c:	681b      	ldr	r3, [r3, #0]
 801568e:	4a6a      	ldr	r2, [pc, #424]	@ (8015838 <DMA_SetConfig+0x254>)
 8015690:	4293      	cmp	r3, r2
 8015692:	d02c      	beq.n	80156ee <DMA_SetConfig+0x10a>
 8015694:	68fb      	ldr	r3, [r7, #12]
 8015696:	681b      	ldr	r3, [r3, #0]
 8015698:	4a68      	ldr	r2, [pc, #416]	@ (801583c <DMA_SetConfig+0x258>)
 801569a:	4293      	cmp	r3, r2
 801569c:	d027      	beq.n	80156ee <DMA_SetConfig+0x10a>
 801569e:	68fb      	ldr	r3, [r7, #12]
 80156a0:	681b      	ldr	r3, [r3, #0]
 80156a2:	4a67      	ldr	r2, [pc, #412]	@ (8015840 <DMA_SetConfig+0x25c>)
 80156a4:	4293      	cmp	r3, r2
 80156a6:	d022      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156a8:	68fb      	ldr	r3, [r7, #12]
 80156aa:	681b      	ldr	r3, [r3, #0]
 80156ac:	4a65      	ldr	r2, [pc, #404]	@ (8015844 <DMA_SetConfig+0x260>)
 80156ae:	4293      	cmp	r3, r2
 80156b0:	d01d      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156b2:	68fb      	ldr	r3, [r7, #12]
 80156b4:	681b      	ldr	r3, [r3, #0]
 80156b6:	4a64      	ldr	r2, [pc, #400]	@ (8015848 <DMA_SetConfig+0x264>)
 80156b8:	4293      	cmp	r3, r2
 80156ba:	d018      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156bc:	68fb      	ldr	r3, [r7, #12]
 80156be:	681b      	ldr	r3, [r3, #0]
 80156c0:	4a62      	ldr	r2, [pc, #392]	@ (801584c <DMA_SetConfig+0x268>)
 80156c2:	4293      	cmp	r3, r2
 80156c4:	d013      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156c6:	68fb      	ldr	r3, [r7, #12]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	4a61      	ldr	r2, [pc, #388]	@ (8015850 <DMA_SetConfig+0x26c>)
 80156cc:	4293      	cmp	r3, r2
 80156ce:	d00e      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156d0:	68fb      	ldr	r3, [r7, #12]
 80156d2:	681b      	ldr	r3, [r3, #0]
 80156d4:	4a5f      	ldr	r2, [pc, #380]	@ (8015854 <DMA_SetConfig+0x270>)
 80156d6:	4293      	cmp	r3, r2
 80156d8:	d009      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	681b      	ldr	r3, [r3, #0]
 80156de:	4a5e      	ldr	r2, [pc, #376]	@ (8015858 <DMA_SetConfig+0x274>)
 80156e0:	4293      	cmp	r3, r2
 80156e2:	d004      	beq.n	80156ee <DMA_SetConfig+0x10a>
 80156e4:	68fb      	ldr	r3, [r7, #12]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	4a5c      	ldr	r2, [pc, #368]	@ (801585c <DMA_SetConfig+0x278>)
 80156ea:	4293      	cmp	r3, r2
 80156ec:	d101      	bne.n	80156f2 <DMA_SetConfig+0x10e>
 80156ee:	2301      	movs	r3, #1
 80156f0:	e000      	b.n	80156f4 <DMA_SetConfig+0x110>
 80156f2:	2300      	movs	r3, #0
 80156f4:	2b00      	cmp	r3, #0
 80156f6:	d00d      	beq.n	8015714 <DMA_SetConfig+0x130>
  {
    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80156f8:	68fb      	ldr	r3, [r7, #12]
 80156fa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80156fc:	68fa      	ldr	r2, [r7, #12]
 80156fe:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8015700:	605a      	str	r2, [r3, #4]

    if(hdma->DMAmuxRequestGen != 0U)
 8015702:	68fb      	ldr	r3, [r7, #12]
 8015704:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8015706:	2b00      	cmp	r3, #0
 8015708:	d004      	beq.n	8015714 <DMA_SetConfig+0x130>
    {
      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801570a:	68fb      	ldr	r3, [r7, #12]
 801570c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801570e:	68fa      	ldr	r2, [r7, #12]
 8015710:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8015712:	605a      	str	r2, [r3, #4]
    }
  }

  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8015714:	68fb      	ldr	r3, [r7, #12]
 8015716:	681b      	ldr	r3, [r3, #0]
 8015718:	4a39      	ldr	r2, [pc, #228]	@ (8015800 <DMA_SetConfig+0x21c>)
 801571a:	4293      	cmp	r3, r2
 801571c:	d04a      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 801571e:	68fb      	ldr	r3, [r7, #12]
 8015720:	681b      	ldr	r3, [r3, #0]
 8015722:	4a38      	ldr	r2, [pc, #224]	@ (8015804 <DMA_SetConfig+0x220>)
 8015724:	4293      	cmp	r3, r2
 8015726:	d045      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015728:	68fb      	ldr	r3, [r7, #12]
 801572a:	681b      	ldr	r3, [r3, #0]
 801572c:	4a36      	ldr	r2, [pc, #216]	@ (8015808 <DMA_SetConfig+0x224>)
 801572e:	4293      	cmp	r3, r2
 8015730:	d040      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015732:	68fb      	ldr	r3, [r7, #12]
 8015734:	681b      	ldr	r3, [r3, #0]
 8015736:	4a35      	ldr	r2, [pc, #212]	@ (801580c <DMA_SetConfig+0x228>)
 8015738:	4293      	cmp	r3, r2
 801573a:	d03b      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 801573c:	68fb      	ldr	r3, [r7, #12]
 801573e:	681b      	ldr	r3, [r3, #0]
 8015740:	4a33      	ldr	r2, [pc, #204]	@ (8015810 <DMA_SetConfig+0x22c>)
 8015742:	4293      	cmp	r3, r2
 8015744:	d036      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015746:	68fb      	ldr	r3, [r7, #12]
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	4a32      	ldr	r2, [pc, #200]	@ (8015814 <DMA_SetConfig+0x230>)
 801574c:	4293      	cmp	r3, r2
 801574e:	d031      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015750:	68fb      	ldr	r3, [r7, #12]
 8015752:	681b      	ldr	r3, [r3, #0]
 8015754:	4a30      	ldr	r2, [pc, #192]	@ (8015818 <DMA_SetConfig+0x234>)
 8015756:	4293      	cmp	r3, r2
 8015758:	d02c      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 801575a:	68fb      	ldr	r3, [r7, #12]
 801575c:	681b      	ldr	r3, [r3, #0]
 801575e:	4a2f      	ldr	r2, [pc, #188]	@ (801581c <DMA_SetConfig+0x238>)
 8015760:	4293      	cmp	r3, r2
 8015762:	d027      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015764:	68fb      	ldr	r3, [r7, #12]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	4a2d      	ldr	r2, [pc, #180]	@ (8015820 <DMA_SetConfig+0x23c>)
 801576a:	4293      	cmp	r3, r2
 801576c:	d022      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 801576e:	68fb      	ldr	r3, [r7, #12]
 8015770:	681b      	ldr	r3, [r3, #0]
 8015772:	4a2c      	ldr	r2, [pc, #176]	@ (8015824 <DMA_SetConfig+0x240>)
 8015774:	4293      	cmp	r3, r2
 8015776:	d01d      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015778:	68fb      	ldr	r3, [r7, #12]
 801577a:	681b      	ldr	r3, [r3, #0]
 801577c:	4a2a      	ldr	r2, [pc, #168]	@ (8015828 <DMA_SetConfig+0x244>)
 801577e:	4293      	cmp	r3, r2
 8015780:	d018      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015782:	68fb      	ldr	r3, [r7, #12]
 8015784:	681b      	ldr	r3, [r3, #0]
 8015786:	4a29      	ldr	r2, [pc, #164]	@ (801582c <DMA_SetConfig+0x248>)
 8015788:	4293      	cmp	r3, r2
 801578a:	d013      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 801578c:	68fb      	ldr	r3, [r7, #12]
 801578e:	681b      	ldr	r3, [r3, #0]
 8015790:	4a27      	ldr	r2, [pc, #156]	@ (8015830 <DMA_SetConfig+0x24c>)
 8015792:	4293      	cmp	r3, r2
 8015794:	d00e      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	4a26      	ldr	r2, [pc, #152]	@ (8015834 <DMA_SetConfig+0x250>)
 801579c:	4293      	cmp	r3, r2
 801579e:	d009      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 80157a0:	68fb      	ldr	r3, [r7, #12]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	4a24      	ldr	r2, [pc, #144]	@ (8015838 <DMA_SetConfig+0x254>)
 80157a6:	4293      	cmp	r3, r2
 80157a8:	d004      	beq.n	80157b4 <DMA_SetConfig+0x1d0>
 80157aa:	68fb      	ldr	r3, [r7, #12]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	4a23      	ldr	r2, [pc, #140]	@ (801583c <DMA_SetConfig+0x258>)
 80157b0:	4293      	cmp	r3, r2
 80157b2:	d101      	bne.n	80157b8 <DMA_SetConfig+0x1d4>
 80157b4:	2301      	movs	r3, #1
 80157b6:	e000      	b.n	80157ba <DMA_SetConfig+0x1d6>
 80157b8:	2300      	movs	r3, #0
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d059      	beq.n	8015872 <DMA_SetConfig+0x28e>
  {
    /* Clear all interrupt flags at correct offset within the register */
    regs_dma->IFCR = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 80157be:	68fb      	ldr	r3, [r7, #12]
 80157c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80157c2:	f003 031f 	and.w	r3, r3, #31
 80157c6:	223f      	movs	r2, #63	@ 0x3f
 80157c8:	409a      	lsls	r2, r3
 80157ca:	697b      	ldr	r3, [r7, #20]
 80157cc:	609a      	str	r2, [r3, #8]

    /* Clear DBM bit */
    ((DMA_Stream_TypeDef *)hdma->Instance)->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80157ce:	68fb      	ldr	r3, [r7, #12]
 80157d0:	681b      	ldr	r3, [r3, #0]
 80157d2:	681a      	ldr	r2, [r3, #0]
 80157d4:	68fb      	ldr	r3, [r7, #12]
 80157d6:	681b      	ldr	r3, [r3, #0]
 80157d8:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80157dc:	601a      	str	r2, [r3, #0]

    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef *)hdma->Instance)->NDTR = DataLength;
 80157de:	68fb      	ldr	r3, [r7, #12]
 80157e0:	681b      	ldr	r3, [r3, #0]
 80157e2:	683a      	ldr	r2, [r7, #0]
 80157e4:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	689b      	ldr	r3, [r3, #8]
 80157ea:	2b40      	cmp	r3, #64	@ 0x40
 80157ec:	d138      	bne.n	8015860 <DMA_SetConfig+0x27c>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = DstAddress;
 80157ee:	68fb      	ldr	r3, [r7, #12]
 80157f0:	681b      	ldr	r3, [r3, #0]
 80157f2:	687a      	ldr	r2, [r7, #4]
 80157f4:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = SrcAddress;
 80157f6:	68fb      	ldr	r3, [r7, #12]
 80157f8:	681b      	ldr	r3, [r3, #0]
 80157fa:	68ba      	ldr	r2, [r7, #8]
 80157fc:	60da      	str	r2, [r3, #12]
  }
  else
  {
    /* Nothing To Do */
  }
}
 80157fe:	e086      	b.n	801590e <DMA_SetConfig+0x32a>
 8015800:	40020010 	.word	0x40020010
 8015804:	40020028 	.word	0x40020028
 8015808:	40020040 	.word	0x40020040
 801580c:	40020058 	.word	0x40020058
 8015810:	40020070 	.word	0x40020070
 8015814:	40020088 	.word	0x40020088
 8015818:	400200a0 	.word	0x400200a0
 801581c:	400200b8 	.word	0x400200b8
 8015820:	40020410 	.word	0x40020410
 8015824:	40020428 	.word	0x40020428
 8015828:	40020440 	.word	0x40020440
 801582c:	40020458 	.word	0x40020458
 8015830:	40020470 	.word	0x40020470
 8015834:	40020488 	.word	0x40020488
 8015838:	400204a0 	.word	0x400204a0
 801583c:	400204b8 	.word	0x400204b8
 8015840:	58025408 	.word	0x58025408
 8015844:	5802541c 	.word	0x5802541c
 8015848:	58025430 	.word	0x58025430
 801584c:	58025444 	.word	0x58025444
 8015850:	58025458 	.word	0x58025458
 8015854:	5802546c 	.word	0x5802546c
 8015858:	58025480 	.word	0x58025480
 801585c:	58025494 	.word	0x58025494
      ((DMA_Stream_TypeDef *)hdma->Instance)->PAR = SrcAddress;
 8015860:	68fb      	ldr	r3, [r7, #12]
 8015862:	681b      	ldr	r3, [r3, #0]
 8015864:	68ba      	ldr	r2, [r7, #8]
 8015866:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef *)hdma->Instance)->M0AR = DstAddress;
 8015868:	68fb      	ldr	r3, [r7, #12]
 801586a:	681b      	ldr	r3, [r3, #0]
 801586c:	687a      	ldr	r2, [r7, #4]
 801586e:	60da      	str	r2, [r3, #12]
}
 8015870:	e04d      	b.n	801590e <DMA_SetConfig+0x32a>
  else if(IS_BDMA_CHANNEL_INSTANCE(hdma->Instance) != 0U) /* BDMA instance(s) */
 8015872:	68fb      	ldr	r3, [r7, #12]
 8015874:	681b      	ldr	r3, [r3, #0]
 8015876:	4a29      	ldr	r2, [pc, #164]	@ (801591c <DMA_SetConfig+0x338>)
 8015878:	4293      	cmp	r3, r2
 801587a:	d022      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681b      	ldr	r3, [r3, #0]
 8015880:	4a27      	ldr	r2, [pc, #156]	@ (8015920 <DMA_SetConfig+0x33c>)
 8015882:	4293      	cmp	r3, r2
 8015884:	d01d      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 8015886:	68fb      	ldr	r3, [r7, #12]
 8015888:	681b      	ldr	r3, [r3, #0]
 801588a:	4a26      	ldr	r2, [pc, #152]	@ (8015924 <DMA_SetConfig+0x340>)
 801588c:	4293      	cmp	r3, r2
 801588e:	d018      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 8015890:	68fb      	ldr	r3, [r7, #12]
 8015892:	681b      	ldr	r3, [r3, #0]
 8015894:	4a24      	ldr	r2, [pc, #144]	@ (8015928 <DMA_SetConfig+0x344>)
 8015896:	4293      	cmp	r3, r2
 8015898:	d013      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	681b      	ldr	r3, [r3, #0]
 801589e:	4a23      	ldr	r2, [pc, #140]	@ (801592c <DMA_SetConfig+0x348>)
 80158a0:	4293      	cmp	r3, r2
 80158a2:	d00e      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	681b      	ldr	r3, [r3, #0]
 80158a8:	4a21      	ldr	r2, [pc, #132]	@ (8015930 <DMA_SetConfig+0x34c>)
 80158aa:	4293      	cmp	r3, r2
 80158ac:	d009      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	4a20      	ldr	r2, [pc, #128]	@ (8015934 <DMA_SetConfig+0x350>)
 80158b4:	4293      	cmp	r3, r2
 80158b6:	d004      	beq.n	80158c2 <DMA_SetConfig+0x2de>
 80158b8:	68fb      	ldr	r3, [r7, #12]
 80158ba:	681b      	ldr	r3, [r3, #0]
 80158bc:	4a1e      	ldr	r2, [pc, #120]	@ (8015938 <DMA_SetConfig+0x354>)
 80158be:	4293      	cmp	r3, r2
 80158c0:	d101      	bne.n	80158c6 <DMA_SetConfig+0x2e2>
 80158c2:	2301      	movs	r3, #1
 80158c4:	e000      	b.n	80158c8 <DMA_SetConfig+0x2e4>
 80158c6:	2300      	movs	r3, #0
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d020      	beq.n	801590e <DMA_SetConfig+0x32a>
    regs_bdma->IFCR = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80158cc:	68fb      	ldr	r3, [r7, #12]
 80158ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80158d0:	f003 031f 	and.w	r3, r3, #31
 80158d4:	2201      	movs	r2, #1
 80158d6:	409a      	lsls	r2, r3
 80158d8:	693b      	ldr	r3, [r7, #16]
 80158da:	605a      	str	r2, [r3, #4]
    ((BDMA_Channel_TypeDef *)hdma->Instance)->CNDTR = DataLength;
 80158dc:	68fb      	ldr	r3, [r7, #12]
 80158de:	681b      	ldr	r3, [r3, #0]
 80158e0:	683a      	ldr	r2, [r7, #0]
 80158e2:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80158e4:	68fb      	ldr	r3, [r7, #12]
 80158e6:	689b      	ldr	r3, [r3, #8]
 80158e8:	2b40      	cmp	r3, #64	@ 0x40
 80158ea:	d108      	bne.n	80158fe <DMA_SetConfig+0x31a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = DstAddress;
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	681b      	ldr	r3, [r3, #0]
 80158f0:	687a      	ldr	r2, [r7, #4]
 80158f2:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = SrcAddress;
 80158f4:	68fb      	ldr	r3, [r7, #12]
 80158f6:	681b      	ldr	r3, [r3, #0]
 80158f8:	68ba      	ldr	r2, [r7, #8]
 80158fa:	60da      	str	r2, [r3, #12]
}
 80158fc:	e007      	b.n	801590e <DMA_SetConfig+0x32a>
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CPAR = SrcAddress;
 80158fe:	68fb      	ldr	r3, [r7, #12]
 8015900:	681b      	ldr	r3, [r3, #0]
 8015902:	68ba      	ldr	r2, [r7, #8]
 8015904:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef *)hdma->Instance)->CM0AR = DstAddress;
 8015906:	68fb      	ldr	r3, [r7, #12]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	687a      	ldr	r2, [r7, #4]
 801590c:	60da      	str	r2, [r3, #12]
}
 801590e:	bf00      	nop
 8015910:	371c      	adds	r7, #28
 8015912:	46bd      	mov	sp, r7
 8015914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015918:	4770      	bx	lr
 801591a:	bf00      	nop
 801591c:	58025408 	.word	0x58025408
 8015920:	5802541c 	.word	0x5802541c
 8015924:	58025430 	.word	0x58025430
 8015928:	58025444 	.word	0x58025444
 801592c:	58025458 	.word	0x58025458
 8015930:	5802546c 	.word	0x5802546c
 8015934:	58025480 	.word	0x58025480
 8015938:	58025494 	.word	0x58025494

0801593c <DMA_CalcBaseAndBitshift>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 801593c:	b480      	push	{r7}
 801593e:	b085      	sub	sp, #20
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	681b      	ldr	r3, [r3, #0]
 8015948:	4a42      	ldr	r2, [pc, #264]	@ (8015a54 <DMA_CalcBaseAndBitshift+0x118>)
 801594a:	4293      	cmp	r3, r2
 801594c:	d04a      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 801594e:	687b      	ldr	r3, [r7, #4]
 8015950:	681b      	ldr	r3, [r3, #0]
 8015952:	4a41      	ldr	r2, [pc, #260]	@ (8015a58 <DMA_CalcBaseAndBitshift+0x11c>)
 8015954:	4293      	cmp	r3, r2
 8015956:	d045      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 8015958:	687b      	ldr	r3, [r7, #4]
 801595a:	681b      	ldr	r3, [r3, #0]
 801595c:	4a3f      	ldr	r2, [pc, #252]	@ (8015a5c <DMA_CalcBaseAndBitshift+0x120>)
 801595e:	4293      	cmp	r3, r2
 8015960:	d040      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	4a3e      	ldr	r2, [pc, #248]	@ (8015a60 <DMA_CalcBaseAndBitshift+0x124>)
 8015968:	4293      	cmp	r3, r2
 801596a:	d03b      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	681b      	ldr	r3, [r3, #0]
 8015970:	4a3c      	ldr	r2, [pc, #240]	@ (8015a64 <DMA_CalcBaseAndBitshift+0x128>)
 8015972:	4293      	cmp	r3, r2
 8015974:	d036      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 8015976:	687b      	ldr	r3, [r7, #4]
 8015978:	681b      	ldr	r3, [r3, #0]
 801597a:	4a3b      	ldr	r2, [pc, #236]	@ (8015a68 <DMA_CalcBaseAndBitshift+0x12c>)
 801597c:	4293      	cmp	r3, r2
 801597e:	d031      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 8015980:	687b      	ldr	r3, [r7, #4]
 8015982:	681b      	ldr	r3, [r3, #0]
 8015984:	4a39      	ldr	r2, [pc, #228]	@ (8015a6c <DMA_CalcBaseAndBitshift+0x130>)
 8015986:	4293      	cmp	r3, r2
 8015988:	d02c      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 801598a:	687b      	ldr	r3, [r7, #4]
 801598c:	681b      	ldr	r3, [r3, #0]
 801598e:	4a38      	ldr	r2, [pc, #224]	@ (8015a70 <DMA_CalcBaseAndBitshift+0x134>)
 8015990:	4293      	cmp	r3, r2
 8015992:	d027      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 8015994:	687b      	ldr	r3, [r7, #4]
 8015996:	681b      	ldr	r3, [r3, #0]
 8015998:	4a36      	ldr	r2, [pc, #216]	@ (8015a74 <DMA_CalcBaseAndBitshift+0x138>)
 801599a:	4293      	cmp	r3, r2
 801599c:	d022      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 801599e:	687b      	ldr	r3, [r7, #4]
 80159a0:	681b      	ldr	r3, [r3, #0]
 80159a2:	4a35      	ldr	r2, [pc, #212]	@ (8015a78 <DMA_CalcBaseAndBitshift+0x13c>)
 80159a4:	4293      	cmp	r3, r2
 80159a6:	d01d      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 80159a8:	687b      	ldr	r3, [r7, #4]
 80159aa:	681b      	ldr	r3, [r3, #0]
 80159ac:	4a33      	ldr	r2, [pc, #204]	@ (8015a7c <DMA_CalcBaseAndBitshift+0x140>)
 80159ae:	4293      	cmp	r3, r2
 80159b0:	d018      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 80159b2:	687b      	ldr	r3, [r7, #4]
 80159b4:	681b      	ldr	r3, [r3, #0]
 80159b6:	4a32      	ldr	r2, [pc, #200]	@ (8015a80 <DMA_CalcBaseAndBitshift+0x144>)
 80159b8:	4293      	cmp	r3, r2
 80159ba:	d013      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 80159bc:	687b      	ldr	r3, [r7, #4]
 80159be:	681b      	ldr	r3, [r3, #0]
 80159c0:	4a30      	ldr	r2, [pc, #192]	@ (8015a84 <DMA_CalcBaseAndBitshift+0x148>)
 80159c2:	4293      	cmp	r3, r2
 80159c4:	d00e      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 80159c6:	687b      	ldr	r3, [r7, #4]
 80159c8:	681b      	ldr	r3, [r3, #0]
 80159ca:	4a2f      	ldr	r2, [pc, #188]	@ (8015a88 <DMA_CalcBaseAndBitshift+0x14c>)
 80159cc:	4293      	cmp	r3, r2
 80159ce:	d009      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 80159d0:	687b      	ldr	r3, [r7, #4]
 80159d2:	681b      	ldr	r3, [r3, #0]
 80159d4:	4a2d      	ldr	r2, [pc, #180]	@ (8015a8c <DMA_CalcBaseAndBitshift+0x150>)
 80159d6:	4293      	cmp	r3, r2
 80159d8:	d004      	beq.n	80159e4 <DMA_CalcBaseAndBitshift+0xa8>
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	4a2c      	ldr	r2, [pc, #176]	@ (8015a90 <DMA_CalcBaseAndBitshift+0x154>)
 80159e0:	4293      	cmp	r3, r2
 80159e2:	d101      	bne.n	80159e8 <DMA_CalcBaseAndBitshift+0xac>
 80159e4:	2301      	movs	r3, #1
 80159e6:	e000      	b.n	80159ea <DMA_CalcBaseAndBitshift+0xae>
 80159e8:	2300      	movs	r3, #0
 80159ea:	2b00      	cmp	r3, #0
 80159ec:	d024      	beq.n	8015a38 <DMA_CalcBaseAndBitshift+0xfc>
  {
    uint32_t stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 80159ee:	687b      	ldr	r3, [r7, #4]
 80159f0:	681b      	ldr	r3, [r3, #0]
 80159f2:	b2db      	uxtb	r3, r3
 80159f4:	3b10      	subs	r3, #16
 80159f6:	4a27      	ldr	r2, [pc, #156]	@ (8015a94 <DMA_CalcBaseAndBitshift+0x158>)
 80159f8:	fba2 2303 	umull	r2, r3, r2, r3
 80159fc:	091b      	lsrs	r3, r3, #4
 80159fe:	60fb      	str	r3, [r7, #12]

    /* lookup table for necessary bitshift of flags within status registers */
    static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
    hdma->StreamIndex = flagBitshiftOffset[stream_number & 0x7U];
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	f003 0307 	and.w	r3, r3, #7
 8015a06:	4a24      	ldr	r2, [pc, #144]	@ (8015a98 <DMA_CalcBaseAndBitshift+0x15c>)
 8015a08:	5cd3      	ldrb	r3, [r2, r3]
 8015a0a:	461a      	mov	r2, r3
 8015a0c:	687b      	ldr	r3, [r7, #4]
 8015a0e:	65da      	str	r2, [r3, #92]	@ 0x5c

    if (stream_number > 3U)
 8015a10:	68fb      	ldr	r3, [r7, #12]
 8015a12:	2b03      	cmp	r3, #3
 8015a14:	d908      	bls.n	8015a28 <DMA_CalcBaseAndBitshift+0xec>
    {
      /* return pointer to HISR and HIFCR */
      hdma->StreamBaseAddress = (((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU)) + 4U);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	461a      	mov	r2, r3
 8015a1c:	4b1f      	ldr	r3, [pc, #124]	@ (8015a9c <DMA_CalcBaseAndBitshift+0x160>)
 8015a1e:	4013      	ands	r3, r2
 8015a20:	1d1a      	adds	r2, r3, #4
 8015a22:	687b      	ldr	r3, [r7, #4]
 8015a24:	659a      	str	r2, [r3, #88]	@ 0x58
 8015a26:	e00d      	b.n	8015a44 <DMA_CalcBaseAndBitshift+0x108>
    }
    else
    {
      /* return pointer to LISR and LIFCR */
      hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0x3FFU));
 8015a28:	687b      	ldr	r3, [r7, #4]
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	461a      	mov	r2, r3
 8015a2e:	4b1b      	ldr	r3, [pc, #108]	@ (8015a9c <DMA_CalcBaseAndBitshift+0x160>)
 8015a30:	4013      	ands	r3, r2
 8015a32:	687a      	ldr	r2, [r7, #4]
 8015a34:	6593      	str	r3, [r2, #88]	@ 0x58
 8015a36:	e005      	b.n	8015a44 <DMA_CalcBaseAndBitshift+0x108>
    }
  }
  else /* BDMA instance(s) */
  {
    /* return pointer to ISR and IFCR */
    hdma->StreamBaseAddress = ((uint32_t)((uint32_t*)hdma->Instance) & (uint32_t)(~0xFFU));
 8015a38:	687b      	ldr	r3, [r7, #4]
 8015a3a:	681b      	ldr	r3, [r3, #0]
 8015a3c:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8015a40:	687b      	ldr	r3, [r7, #4]
 8015a42:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  return hdma->StreamBaseAddress;
 8015a44:	687b      	ldr	r3, [r7, #4]
 8015a46:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8015a48:	4618      	mov	r0, r3
 8015a4a:	3714      	adds	r7, #20
 8015a4c:	46bd      	mov	sp, r7
 8015a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a52:	4770      	bx	lr
 8015a54:	40020010 	.word	0x40020010
 8015a58:	40020028 	.word	0x40020028
 8015a5c:	40020040 	.word	0x40020040
 8015a60:	40020058 	.word	0x40020058
 8015a64:	40020070 	.word	0x40020070
 8015a68:	40020088 	.word	0x40020088
 8015a6c:	400200a0 	.word	0x400200a0
 8015a70:	400200b8 	.word	0x400200b8
 8015a74:	40020410 	.word	0x40020410
 8015a78:	40020428 	.word	0x40020428
 8015a7c:	40020440 	.word	0x40020440
 8015a80:	40020458 	.word	0x40020458
 8015a84:	40020470 	.word	0x40020470
 8015a88:	40020488 	.word	0x40020488
 8015a8c:	400204a0 	.word	0x400204a0
 8015a90:	400204b8 	.word	0x400204b8
 8015a94:	aaaaaaab 	.word	0xaaaaaaab
 8015a98:	0802a344 	.word	0x0802a344
 8015a9c:	fffffc00 	.word	0xfffffc00

08015aa0 <DMA_CheckFifoParam>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(const DMA_HandleTypeDef *hdma)
{
 8015aa0:	b480      	push	{r7}
 8015aa2:	b085      	sub	sp, #20
 8015aa4:	af00      	add	r7, sp, #0
 8015aa6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8015aa8:	2300      	movs	r3, #0
 8015aaa:	73fb      	strb	r3, [r7, #15]

  /* Memory Data size equal to Byte */
  if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	699b      	ldr	r3, [r3, #24]
 8015ab0:	2b00      	cmp	r3, #0
 8015ab2:	d120      	bne.n	8015af6 <DMA_CheckFifoParam+0x56>
  {
    switch (hdma->Init.FIFOThreshold)
 8015ab4:	687b      	ldr	r3, [r7, #4]
 8015ab6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015ab8:	2b03      	cmp	r3, #3
 8015aba:	d858      	bhi.n	8015b6e <DMA_CheckFifoParam+0xce>
 8015abc:	a201      	add	r2, pc, #4	@ (adr r2, 8015ac4 <DMA_CheckFifoParam+0x24>)
 8015abe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015ac2:	bf00      	nop
 8015ac4:	08015ad5 	.word	0x08015ad5
 8015ac8:	08015ae7 	.word	0x08015ae7
 8015acc:	08015ad5 	.word	0x08015ad5
 8015ad0:	08015b6f 	.word	0x08015b6f
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:

        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015ad4:	687b      	ldr	r3, [r7, #4]
 8015ad6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015ad8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8015adc:	2b00      	cmp	r3, #0
 8015ade:	d048      	beq.n	8015b72 <DMA_CheckFifoParam+0xd2>
        {
          status = HAL_ERROR;
 8015ae0:	2301      	movs	r3, #1
 8015ae2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8015ae4:	e045      	b.n	8015b72 <DMA_CheckFifoParam+0xd2>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015ae6:	687b      	ldr	r3, [r7, #4]
 8015ae8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015aea:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8015aee:	d142      	bne.n	8015b76 <DMA_CheckFifoParam+0xd6>
        {
          status = HAL_ERROR;
 8015af0:	2301      	movs	r3, #1
 8015af2:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8015af4:	e03f      	b.n	8015b76 <DMA_CheckFifoParam+0xd6>
        break;
    }
  }

  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8015af6:	687b      	ldr	r3, [r7, #4]
 8015af8:	699b      	ldr	r3, [r3, #24]
 8015afa:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015afe:	d123      	bne.n	8015b48 <DMA_CheckFifoParam+0xa8>
  {
    switch (hdma->Init.FIFOThreshold)
 8015b00:	687b      	ldr	r3, [r7, #4]
 8015b02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b04:	2b03      	cmp	r3, #3
 8015b06:	d838      	bhi.n	8015b7a <DMA_CheckFifoParam+0xda>
 8015b08:	a201      	add	r2, pc, #4	@ (adr r2, 8015b10 <DMA_CheckFifoParam+0x70>)
 8015b0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015b0e:	bf00      	nop
 8015b10:	08015b21 	.word	0x08015b21
 8015b14:	08015b27 	.word	0x08015b27
 8015b18:	08015b21 	.word	0x08015b21
 8015b1c:	08015b39 	.word	0x08015b39
    {
      case DMA_FIFO_THRESHOLD_1QUARTERFULL:
      case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
        status = HAL_ERROR;
 8015b20:	2301      	movs	r3, #1
 8015b22:	73fb      	strb	r3, [r7, #15]
        break;
 8015b24:	e030      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>

      case DMA_FIFO_THRESHOLD_HALFFULL:
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015b26:	687b      	ldr	r3, [r7, #4]
 8015b28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b2a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8015b2e:	2b00      	cmp	r3, #0
 8015b30:	d025      	beq.n	8015b7e <DMA_CheckFifoParam+0xde>
        {
          status = HAL_ERROR;
 8015b32:	2301      	movs	r3, #1
 8015b34:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8015b36:	e022      	b.n	8015b7e <DMA_CheckFifoParam+0xde>

      case DMA_FIFO_THRESHOLD_FULL:
        if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8015b38:	687b      	ldr	r3, [r7, #4]
 8015b3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b3c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8015b40:	d11f      	bne.n	8015b82 <DMA_CheckFifoParam+0xe2>
        {
          status = HAL_ERROR;
 8015b42:	2301      	movs	r3, #1
 8015b44:	73fb      	strb	r3, [r7, #15]
        }
        break;
 8015b46:	e01c      	b.n	8015b82 <DMA_CheckFifoParam+0xe2>
  }

  /* Memory Data size equal to Word */
  else
  {
    switch (hdma->Init.FIFOThreshold)
 8015b48:	687b      	ldr	r3, [r7, #4]
 8015b4a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015b4c:	2b02      	cmp	r3, #2
 8015b4e:	d902      	bls.n	8015b56 <DMA_CheckFifoParam+0xb6>
 8015b50:	2b03      	cmp	r3, #3
 8015b52:	d003      	beq.n	8015b5c <DMA_CheckFifoParam+0xbc>
          status = HAL_ERROR;
        }
    break;

      default:
        break;
 8015b54:	e018      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        status = HAL_ERROR;
 8015b56:	2301      	movs	r3, #1
 8015b58:	73fb      	strb	r3, [r7, #15]
        break;
 8015b5a:	e015      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8015b5c:	687b      	ldr	r3, [r7, #4]
 8015b5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015b60:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8015b64:	2b00      	cmp	r3, #0
 8015b66:	d00e      	beq.n	8015b86 <DMA_CheckFifoParam+0xe6>
          status = HAL_ERROR;
 8015b68:	2301      	movs	r3, #1
 8015b6a:	73fb      	strb	r3, [r7, #15]
    break;
 8015b6c:	e00b      	b.n	8015b86 <DMA_CheckFifoParam+0xe6>
        break;
 8015b6e:	bf00      	nop
 8015b70:	e00a      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        break;
 8015b72:	bf00      	nop
 8015b74:	e008      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        break;
 8015b76:	bf00      	nop
 8015b78:	e006      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        break;
 8015b7a:	bf00      	nop
 8015b7c:	e004      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        break;
 8015b7e:	bf00      	nop
 8015b80:	e002      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
        break;
 8015b82:	bf00      	nop
 8015b84:	e000      	b.n	8015b88 <DMA_CheckFifoParam+0xe8>
    break;
 8015b86:	bf00      	nop
    }
  }

  return status;
 8015b88:	7bfb      	ldrb	r3, [r7, #15]
}
 8015b8a:	4618      	mov	r0, r3
 8015b8c:	3714      	adds	r7, #20
 8015b8e:	46bd      	mov	sp, r7
 8015b90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b94:	4770      	bx	lr
 8015b96:	bf00      	nop

08015b98 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8015b98:	b480      	push	{r7}
 8015b9a:	b085      	sub	sp, #20
 8015b9c:	af00      	add	r7, sp, #0
 8015b9e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number;
  uint32_t stream_baseaddress = (uint32_t)((uint32_t*)hdma->Instance);
 8015ba0:	687b      	ldr	r3, [r7, #4]
 8015ba2:	681b      	ldr	r3, [r3, #0]
 8015ba4:	60bb      	str	r3, [r7, #8]

  if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8015ba6:	687b      	ldr	r3, [r7, #4]
 8015ba8:	681b      	ldr	r3, [r3, #0]
 8015baa:	4a38      	ldr	r2, [pc, #224]	@ (8015c8c <DMA_CalcDMAMUXChannelBaseAndMask+0xf4>)
 8015bac:	4293      	cmp	r3, r2
 8015bae:	d022      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015bb0:	687b      	ldr	r3, [r7, #4]
 8015bb2:	681b      	ldr	r3, [r3, #0]
 8015bb4:	4a36      	ldr	r2, [pc, #216]	@ (8015c90 <DMA_CalcDMAMUXChannelBaseAndMask+0xf8>)
 8015bb6:	4293      	cmp	r3, r2
 8015bb8:	d01d      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015bba:	687b      	ldr	r3, [r7, #4]
 8015bbc:	681b      	ldr	r3, [r3, #0]
 8015bbe:	4a35      	ldr	r2, [pc, #212]	@ (8015c94 <DMA_CalcDMAMUXChannelBaseAndMask+0xfc>)
 8015bc0:	4293      	cmp	r3, r2
 8015bc2:	d018      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015bc4:	687b      	ldr	r3, [r7, #4]
 8015bc6:	681b      	ldr	r3, [r3, #0]
 8015bc8:	4a33      	ldr	r2, [pc, #204]	@ (8015c98 <DMA_CalcDMAMUXChannelBaseAndMask+0x100>)
 8015bca:	4293      	cmp	r3, r2
 8015bcc:	d013      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015bce:	687b      	ldr	r3, [r7, #4]
 8015bd0:	681b      	ldr	r3, [r3, #0]
 8015bd2:	4a32      	ldr	r2, [pc, #200]	@ (8015c9c <DMA_CalcDMAMUXChannelBaseAndMask+0x104>)
 8015bd4:	4293      	cmp	r3, r2
 8015bd6:	d00e      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015bd8:	687b      	ldr	r3, [r7, #4]
 8015bda:	681b      	ldr	r3, [r3, #0]
 8015bdc:	4a30      	ldr	r2, [pc, #192]	@ (8015ca0 <DMA_CalcDMAMUXChannelBaseAndMask+0x108>)
 8015bde:	4293      	cmp	r3, r2
 8015be0:	d009      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015be2:	687b      	ldr	r3, [r7, #4]
 8015be4:	681b      	ldr	r3, [r3, #0]
 8015be6:	4a2f      	ldr	r2, [pc, #188]	@ (8015ca4 <DMA_CalcDMAMUXChannelBaseAndMask+0x10c>)
 8015be8:	4293      	cmp	r3, r2
 8015bea:	d004      	beq.n	8015bf6 <DMA_CalcDMAMUXChannelBaseAndMask+0x5e>
 8015bec:	687b      	ldr	r3, [r7, #4]
 8015bee:	681b      	ldr	r3, [r3, #0]
 8015bf0:	4a2d      	ldr	r2, [pc, #180]	@ (8015ca8 <DMA_CalcDMAMUXChannelBaseAndMask+0x110>)
 8015bf2:	4293      	cmp	r3, r2
 8015bf4:	d101      	bne.n	8015bfa <DMA_CalcDMAMUXChannelBaseAndMask+0x62>
 8015bf6:	2301      	movs	r3, #1
 8015bf8:	e000      	b.n	8015bfc <DMA_CalcDMAMUXChannelBaseAndMask+0x64>
 8015bfa:	2300      	movs	r3, #0
 8015bfc:	2b00      	cmp	r3, #0
 8015bfe:	d01a      	beq.n	8015c36 <DMA_CalcDMAMUXChannelBaseAndMask+0x9e>
  {
    /* BDMA Channels are connected to DMAMUX2 channels */
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 8U) / 20U;
 8015c00:	687b      	ldr	r3, [r7, #4]
 8015c02:	681b      	ldr	r3, [r3, #0]
 8015c04:	b2db      	uxtb	r3, r3
 8015c06:	3b08      	subs	r3, #8
 8015c08:	4a28      	ldr	r2, [pc, #160]	@ (8015cac <DMA_CalcDMAMUXChannelBaseAndMask+0x114>)
 8015c0a:	fba2 2303 	umull	r2, r3, r2, r3
 8015c0e:	091b      	lsrs	r3, r3, #4
 8015c10:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_Channel0) + (stream_number * 4U)));
 8015c12:	68fa      	ldr	r2, [r7, #12]
 8015c14:	4b26      	ldr	r3, [pc, #152]	@ (8015cb0 <DMA_CalcDMAMUXChannelBaseAndMask+0x118>)
 8015c16:	4413      	add	r3, r2
 8015c18:	009b      	lsls	r3, r3, #2
 8015c1a:	461a      	mov	r2, r3
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX2_ChannelStatus;
 8015c20:	687b      	ldr	r3, [r7, #4]
 8015c22:	4a24      	ldr	r2, [pc, #144]	@ (8015cb4 <DMA_CalcDMAMUXChannelBaseAndMask+0x11c>)
 8015c24:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8015c26:	68fb      	ldr	r3, [r7, #12]
 8015c28:	f003 031f 	and.w	r3, r3, #31
 8015c2c:	2201      	movs	r2, #1
 8015c2e:	409a      	lsls	r2, r3
 8015c30:	687b      	ldr	r3, [r7, #4]
 8015c32:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
  }
}
 8015c34:	e024      	b.n	8015c80 <DMA_CalcDMAMUXChannelBaseAndMask+0xe8>
    stream_number = (((uint32_t)((uint32_t*)hdma->Instance) & 0xFFU) - 16U) / 24U;
 8015c36:	687b      	ldr	r3, [r7, #4]
 8015c38:	681b      	ldr	r3, [r3, #0]
 8015c3a:	b2db      	uxtb	r3, r3
 8015c3c:	3b10      	subs	r3, #16
 8015c3e:	4a1e      	ldr	r2, [pc, #120]	@ (8015cb8 <DMA_CalcDMAMUXChannelBaseAndMask+0x120>)
 8015c40:	fba2 2303 	umull	r2, r3, r2, r3
 8015c44:	091b      	lsrs	r3, r3, #4
 8015c46:	60fb      	str	r3, [r7, #12]
    if((stream_baseaddress <= ((uint32_t)DMA2_Stream7) ) && \
 8015c48:	68bb      	ldr	r3, [r7, #8]
 8015c4a:	4a1c      	ldr	r2, [pc, #112]	@ (8015cbc <DMA_CalcDMAMUXChannelBaseAndMask+0x124>)
 8015c4c:	4293      	cmp	r3, r2
 8015c4e:	d806      	bhi.n	8015c5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
 8015c50:	68bb      	ldr	r3, [r7, #8]
 8015c52:	4a1b      	ldr	r2, [pc, #108]	@ (8015cc0 <DMA_CalcDMAMUXChannelBaseAndMask+0x128>)
 8015c54:	4293      	cmp	r3, r2
 8015c56:	d902      	bls.n	8015c5e <DMA_CalcDMAMUXChannelBaseAndMask+0xc6>
      stream_number += 8U;
 8015c58:	68fb      	ldr	r3, [r7, #12]
 8015c5a:	3308      	adds	r3, #8
 8015c5c:	60fb      	str	r3, [r7, #12]
    hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_Channel0) + (stream_number * 4U)));
 8015c5e:	68fa      	ldr	r2, [r7, #12]
 8015c60:	4b18      	ldr	r3, [pc, #96]	@ (8015cc4 <DMA_CalcDMAMUXChannelBaseAndMask+0x12c>)
 8015c62:	4413      	add	r3, r2
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	461a      	mov	r2, r3
 8015c68:	687b      	ldr	r3, [r7, #4]
 8015c6a:	661a      	str	r2, [r3, #96]	@ 0x60
    hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8015c6c:	687b      	ldr	r3, [r7, #4]
 8015c6e:	4a16      	ldr	r2, [pc, #88]	@ (8015cc8 <DMA_CalcDMAMUXChannelBaseAndMask+0x130>)
 8015c70:	665a      	str	r2, [r3, #100]	@ 0x64
    hdma->DMAmuxChannelStatusMask = 1UL << (stream_number & 0x1FU);
 8015c72:	68fb      	ldr	r3, [r7, #12]
 8015c74:	f003 031f 	and.w	r3, r3, #31
 8015c78:	2201      	movs	r2, #1
 8015c7a:	409a      	lsls	r2, r3
 8015c7c:	687b      	ldr	r3, [r7, #4]
 8015c7e:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8015c80:	bf00      	nop
 8015c82:	3714      	adds	r7, #20
 8015c84:	46bd      	mov	sp, r7
 8015c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015c8a:	4770      	bx	lr
 8015c8c:	58025408 	.word	0x58025408
 8015c90:	5802541c 	.word	0x5802541c
 8015c94:	58025430 	.word	0x58025430
 8015c98:	58025444 	.word	0x58025444
 8015c9c:	58025458 	.word	0x58025458
 8015ca0:	5802546c 	.word	0x5802546c
 8015ca4:	58025480 	.word	0x58025480
 8015ca8:	58025494 	.word	0x58025494
 8015cac:	cccccccd 	.word	0xcccccccd
 8015cb0:	16009600 	.word	0x16009600
 8015cb4:	58025880 	.word	0x58025880
 8015cb8:	aaaaaaab 	.word	0xaaaaaaab
 8015cbc:	400204b8 	.word	0x400204b8
 8015cc0:	4002040f 	.word	0x4002040f
 8015cc4:	10008200 	.word	0x10008200
 8015cc8:	40020880 	.word	0x40020880

08015ccc <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  * @param  hdma:       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8015ccc:	b480      	push	{r7}
 8015cce:	b085      	sub	sp, #20
 8015cd0:	af00      	add	r7, sp, #0
 8015cd2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8015cd4:	687b      	ldr	r3, [r7, #4]
 8015cd6:	685b      	ldr	r3, [r3, #4]
 8015cd8:	b2db      	uxtb	r3, r3
 8015cda:	60fb      	str	r3, [r7, #12]

  if((request >= DMA_REQUEST_GENERATOR0) && (request <= DMA_REQUEST_GENERATOR7))
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	2b00      	cmp	r3, #0
 8015ce0:	d04a      	beq.n	8015d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
 8015ce2:	68fb      	ldr	r3, [r7, #12]
 8015ce4:	2b08      	cmp	r3, #8
 8015ce6:	d847      	bhi.n	8015d78 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xac>
  {
    if(IS_BDMA_CHANNEL_DMAMUX_INSTANCE(hdma->Instance) != 0U)
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	681b      	ldr	r3, [r3, #0]
 8015cec:	4a25      	ldr	r2, [pc, #148]	@ (8015d84 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xb8>)
 8015cee:	4293      	cmp	r3, r2
 8015cf0:	d022      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015cf2:	687b      	ldr	r3, [r7, #4]
 8015cf4:	681b      	ldr	r3, [r3, #0]
 8015cf6:	4a24      	ldr	r2, [pc, #144]	@ (8015d88 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xbc>)
 8015cf8:	4293      	cmp	r3, r2
 8015cfa:	d01d      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015cfc:	687b      	ldr	r3, [r7, #4]
 8015cfe:	681b      	ldr	r3, [r3, #0]
 8015d00:	4a22      	ldr	r2, [pc, #136]	@ (8015d8c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc0>)
 8015d02:	4293      	cmp	r3, r2
 8015d04:	d018      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	4a21      	ldr	r2, [pc, #132]	@ (8015d90 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc4>)
 8015d0c:	4293      	cmp	r3, r2
 8015d0e:	d013      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	681b      	ldr	r3, [r3, #0]
 8015d14:	4a1f      	ldr	r2, [pc, #124]	@ (8015d94 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xc8>)
 8015d16:	4293      	cmp	r3, r2
 8015d18:	d00e      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015d1a:	687b      	ldr	r3, [r7, #4]
 8015d1c:	681b      	ldr	r3, [r3, #0]
 8015d1e:	4a1e      	ldr	r2, [pc, #120]	@ (8015d98 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xcc>)
 8015d20:	4293      	cmp	r3, r2
 8015d22:	d009      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015d24:	687b      	ldr	r3, [r7, #4]
 8015d26:	681b      	ldr	r3, [r3, #0]
 8015d28:	4a1c      	ldr	r2, [pc, #112]	@ (8015d9c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd0>)
 8015d2a:	4293      	cmp	r3, r2
 8015d2c:	d004      	beq.n	8015d38 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x6c>
 8015d2e:	687b      	ldr	r3, [r7, #4]
 8015d30:	681b      	ldr	r3, [r3, #0]
 8015d32:	4a1b      	ldr	r2, [pc, #108]	@ (8015da0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd4>)
 8015d34:	4293      	cmp	r3, r2
 8015d36:	d101      	bne.n	8015d3c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x70>
 8015d38:	2301      	movs	r3, #1
 8015d3a:	e000      	b.n	8015d3e <DMA_CalcDMAMUXRequestGenBaseAndMask+0x72>
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d00a      	beq.n	8015d58 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x8c>
    {
      /* BDMA Channels are connected to DMAMUX2 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX2_RequestGenerator0) + ((request - 1U) * 4U)));
 8015d42:	68fa      	ldr	r2, [r7, #12]
 8015d44:	4b17      	ldr	r3, [pc, #92]	@ (8015da4 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xd8>)
 8015d46:	4413      	add	r3, r2
 8015d48:	009b      	lsls	r3, r3, #2
 8015d4a:	461a      	mov	r2, r3
 8015d4c:	687b      	ldr	r3, [r7, #4]
 8015d4e:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX2_RequestGenStatus;
 8015d50:	687b      	ldr	r3, [r7, #4]
 8015d52:	4a15      	ldr	r2, [pc, #84]	@ (8015da8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xdc>)
 8015d54:	671a      	str	r2, [r3, #112]	@ 0x70
 8015d56:	e009      	b.n	8015d6c <DMA_CalcDMAMUXRequestGenBaseAndMask+0xa0>
    }
    else
    {
      /* DMA1 and DMA2 Streams use DMAMUX1 request generator blocks */
      hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8015d58:	68fa      	ldr	r2, [r7, #12]
 8015d5a:	4b14      	ldr	r3, [pc, #80]	@ (8015dac <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe0>)
 8015d5c:	4413      	add	r3, r2
 8015d5e:	009b      	lsls	r3, r3, #2
 8015d60:	461a      	mov	r2, r3
 8015d62:	687b      	ldr	r3, [r7, #4]
 8015d64:	66da      	str	r2, [r3, #108]	@ 0x6c

      hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8015d66:	687b      	ldr	r3, [r7, #4]
 8015d68:	4a11      	ldr	r2, [pc, #68]	@ (8015db0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0xe4>)
 8015d6a:	671a      	str	r2, [r3, #112]	@ 0x70
    }

    hdma->DMAmuxRequestGenStatusMask = 1UL << (request - 1U);
 8015d6c:	68fb      	ldr	r3, [r7, #12]
 8015d6e:	3b01      	subs	r3, #1
 8015d70:	2201      	movs	r2, #1
 8015d72:	409a      	lsls	r2, r3
 8015d74:	687b      	ldr	r3, [r7, #4]
 8015d76:	675a      	str	r2, [r3, #116]	@ 0x74
  }
}
 8015d78:	bf00      	nop
 8015d7a:	3714      	adds	r7, #20
 8015d7c:	46bd      	mov	sp, r7
 8015d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015d82:	4770      	bx	lr
 8015d84:	58025408 	.word	0x58025408
 8015d88:	5802541c 	.word	0x5802541c
 8015d8c:	58025430 	.word	0x58025430
 8015d90:	58025444 	.word	0x58025444
 8015d94:	58025458 	.word	0x58025458
 8015d98:	5802546c 	.word	0x5802546c
 8015d9c:	58025480 	.word	0x58025480
 8015da0:	58025494 	.word	0x58025494
 8015da4:	1600963f 	.word	0x1600963f
 8015da8:	58025940 	.word	0x58025940
 8015dac:	1000823f 	.word	0x1000823f
 8015db0:	40020940 	.word	0x40020940

08015db4 <HAL_DMA2D_Init>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Init(DMA2D_HandleTypeDef *hdma2d)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b082      	sub	sp, #8
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	6078      	str	r0, [r7, #4]
  /* Check the DMA2D peripheral state */
  if (hdma2d == NULL)
 8015dbc:	687b      	ldr	r3, [r7, #4]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d101      	bne.n	8015dc6 <HAL_DMA2D_Init+0x12>
  {
    return HAL_ERROR;
 8015dc2:	2301      	movs	r3, #1
 8015dc4:	e04f      	b.n	8015e66 <HAL_DMA2D_Init+0xb2>

    /* Init the low level hardware */
    hdma2d->MspInitCallback(hdma2d);
  }
#else
  if (hdma2d->State == HAL_DMA2D_STATE_RESET)
 8015dc6:	687b      	ldr	r3, [r7, #4]
 8015dc8:	f893 3061 	ldrb.w	r3, [r3, #97]	@ 0x61
 8015dcc:	b2db      	uxtb	r3, r3
 8015dce:	2b00      	cmp	r3, #0
 8015dd0:	d106      	bne.n	8015de0 <HAL_DMA2D_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hdma2d->Lock = HAL_UNLOCKED;
 8015dd2:	687b      	ldr	r3, [r7, #4]
 8015dd4:	2200      	movs	r2, #0
 8015dd6:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60
    /* Init the low level hardware */
    HAL_DMA2D_MspInit(hdma2d);
 8015dda:	6878      	ldr	r0, [r7, #4]
 8015ddc:	f000 f84e 	bl	8015e7c <HAL_DMA2D_MspInit>
  }
#endif /* (USE_HAL_DMA2D_REGISTER_CALLBACKS) */

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8015de0:	687b      	ldr	r3, [r7, #4]
 8015de2:	2202      	movs	r2, #2
 8015de4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* DMA2D CR register configuration -------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->CR, DMA2D_CR_MODE | DMA2D_CR_LOM, hdma2d->Init.Mode | hdma2d->Init.LineOffsetMode);
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	681b      	ldr	r3, [r3, #0]
 8015dec:	681a      	ldr	r2, [r3, #0]
 8015dee:	4b20      	ldr	r3, [pc, #128]	@ (8015e70 <HAL_DMA2D_Init+0xbc>)
 8015df0:	4013      	ands	r3, r2
 8015df2:	687a      	ldr	r2, [r7, #4]
 8015df4:	6851      	ldr	r1, [r2, #4]
 8015df6:	687a      	ldr	r2, [r7, #4]
 8015df8:	69d2      	ldr	r2, [r2, #28]
 8015dfa:	4311      	orrs	r1, r2
 8015dfc:	687a      	ldr	r2, [r7, #4]
 8015dfe:	6812      	ldr	r2, [r2, #0]
 8015e00:	430b      	orrs	r3, r1
 8015e02:	6013      	str	r3, [r2, #0]

  /* DMA2D OPFCCR register configuration ---------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, DMA2D_OPFCCR_CM | DMA2D_OPFCCR_SB,
 8015e04:	687b      	ldr	r3, [r7, #4]
 8015e06:	681b      	ldr	r3, [r3, #0]
 8015e08:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8015e0a:	4b1a      	ldr	r3, [pc, #104]	@ (8015e74 <HAL_DMA2D_Init+0xc0>)
 8015e0c:	4013      	ands	r3, r2
 8015e0e:	687a      	ldr	r2, [r7, #4]
 8015e10:	6891      	ldr	r1, [r2, #8]
 8015e12:	687a      	ldr	r2, [r7, #4]
 8015e14:	6992      	ldr	r2, [r2, #24]
 8015e16:	4311      	orrs	r1, r2
 8015e18:	687a      	ldr	r2, [r7, #4]
 8015e1a:	6812      	ldr	r2, [r2, #0]
 8015e1c:	430b      	orrs	r3, r1
 8015e1e:	6353      	str	r3, [r2, #52]	@ 0x34
             hdma2d->Init.ColorMode | hdma2d->Init.BytesSwap);

  /* DMA2D OOR register configuration ------------------------------------------*/
  MODIFY_REG(hdma2d->Instance->OOR, DMA2D_OOR_LO, hdma2d->Init.OutputOffset);
 8015e20:	687b      	ldr	r3, [r7, #4]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8015e26:	4b14      	ldr	r3, [pc, #80]	@ (8015e78 <HAL_DMA2D_Init+0xc4>)
 8015e28:	4013      	ands	r3, r2
 8015e2a:	687a      	ldr	r2, [r7, #4]
 8015e2c:	68d1      	ldr	r1, [r2, #12]
 8015e2e:	687a      	ldr	r2, [r7, #4]
 8015e30:	6812      	ldr	r2, [r2, #0]
 8015e32:	430b      	orrs	r3, r1
 8015e34:	6413      	str	r3, [r2, #64]	@ 0x40
  /* DMA2D OPFCCR AI and RBS fields setting (Output Alpha Inversion)*/
  MODIFY_REG(hdma2d->Instance->OPFCCR, (DMA2D_OPFCCR_AI | DMA2D_OPFCCR_RBS),
 8015e36:	687b      	ldr	r3, [r7, #4]
 8015e38:	681b      	ldr	r3, [r3, #0]
 8015e3a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015e3c:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 8015e40:	687b      	ldr	r3, [r7, #4]
 8015e42:	691b      	ldr	r3, [r3, #16]
 8015e44:	051a      	lsls	r2, r3, #20
 8015e46:	687b      	ldr	r3, [r7, #4]
 8015e48:	695b      	ldr	r3, [r3, #20]
 8015e4a:	055b      	lsls	r3, r3, #21
 8015e4c:	431a      	orrs	r2, r3
 8015e4e:	687b      	ldr	r3, [r7, #4]
 8015e50:	681b      	ldr	r3, [r3, #0]
 8015e52:	430a      	orrs	r2, r1
 8015e54:	635a      	str	r2, [r3, #52]	@ 0x34
             ((hdma2d->Init.AlphaInverted << DMA2D_OPFCCR_AI_Pos) | \
              (hdma2d->Init.RedBlueSwap << DMA2D_OPFCCR_RBS_Pos)));


  /* Update error code */
  hdma2d->ErrorCode = HAL_DMA2D_ERROR_NONE;
 8015e56:	687b      	ldr	r3, [r7, #4]
 8015e58:	2200      	movs	r2, #0
 8015e5a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the DMA2D state*/
  hdma2d->State  = HAL_DMA2D_STATE_READY;
 8015e5c:	687b      	ldr	r3, [r7, #4]
 8015e5e:	2201      	movs	r2, #1
 8015e60:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  return HAL_OK;
 8015e64:	2300      	movs	r3, #0
}
 8015e66:	4618      	mov	r0, r3
 8015e68:	3708      	adds	r7, #8
 8015e6a:	46bd      	mov	sp, r7
 8015e6c:	bd80      	pop	{r7, pc}
 8015e6e:	bf00      	nop
 8015e70:	fff8ffbf 	.word	0xfff8ffbf
 8015e74:	fffffef8 	.word	0xfffffef8
 8015e78:	ffff0000 	.word	0xffff0000

08015e7c <HAL_DMA2D_MspInit>:
  * @param  hdma2d pointer to a DMA2D_HandleTypeDef structure that contains
  *                 the configuration information for the DMA2D.
  * @retval None
  */
__weak void HAL_DMA2D_MspInit(DMA2D_HandleTypeDef *hdma2d)
{
 8015e7c:	b480      	push	{r7}
 8015e7e:	b083      	sub	sp, #12
 8015e80:	af00      	add	r7, sp, #0
 8015e82:	6078      	str	r0, [r7, #4]
  UNUSED(hdma2d);

  /* NOTE : This function should not be modified; when the callback is needed,
            the HAL_DMA2D_MspInit can be implemented in the user file.
   */
}
 8015e84:	bf00      	nop
 8015e86:	370c      	adds	r7, #12
 8015e88:	46bd      	mov	sp, r7
 8015e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015e8e:	4770      	bx	lr

08015e90 <HAL_DMA2D_Start>:
  * @param  Height     The height of data to be transferred from source to destination (expressed in number of lines).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_Start(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                                  uint32_t Height)
{
 8015e90:	b580      	push	{r7, lr}
 8015e92:	b086      	sub	sp, #24
 8015e94:	af02      	add	r7, sp, #8
 8015e96:	60f8      	str	r0, [r7, #12]
 8015e98:	60b9      	str	r1, [r7, #8]
 8015e9a:	607a      	str	r2, [r7, #4]
 8015e9c:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DMA2D_LINE(Height));
  assert_param(IS_DMA2D_PIXEL(Width));

  /* Process locked */
  __HAL_LOCK(hdma2d);
 8015e9e:	68fb      	ldr	r3, [r7, #12]
 8015ea0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 8015ea4:	2b01      	cmp	r3, #1
 8015ea6:	d101      	bne.n	8015eac <HAL_DMA2D_Start+0x1c>
 8015ea8:	2302      	movs	r3, #2
 8015eaa:	e018      	b.n	8015ede <HAL_DMA2D_Start+0x4e>
 8015eac:	68fb      	ldr	r3, [r7, #12]
 8015eae:	2201      	movs	r2, #1
 8015eb0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 8015eb4:	68fb      	ldr	r3, [r7, #12]
 8015eb6:	2202      	movs	r2, #2
 8015eb8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Configure the source, destination address and the data size */
  DMA2D_SetConfig(hdma2d, pdata, DstAddress, Width, Height);
 8015ebc:	69bb      	ldr	r3, [r7, #24]
 8015ebe:	9300      	str	r3, [sp, #0]
 8015ec0:	683b      	ldr	r3, [r7, #0]
 8015ec2:	687a      	ldr	r2, [r7, #4]
 8015ec4:	68b9      	ldr	r1, [r7, #8]
 8015ec6:	68f8      	ldr	r0, [r7, #12]
 8015ec8:	f000 f9a4 	bl	8016214 <DMA2D_SetConfig>

  /* Enable the Peripheral */
  __HAL_DMA2D_ENABLE(hdma2d);
 8015ecc:	68fb      	ldr	r3, [r7, #12]
 8015ece:	681b      	ldr	r3, [r3, #0]
 8015ed0:	681a      	ldr	r2, [r3, #0]
 8015ed2:	68fb      	ldr	r3, [r7, #12]
 8015ed4:	681b      	ldr	r3, [r3, #0]
 8015ed6:	f042 0201 	orr.w	r2, r2, #1
 8015eda:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8015edc:	2300      	movs	r3, #0
}
 8015ede:	4618      	mov	r0, r3
 8015ee0:	3710      	adds	r7, #16
 8015ee2:	46bd      	mov	sp, r7
 8015ee4:	bd80      	pop	{r7, pc}

08015ee6 <HAL_DMA2D_PollForTransfer>:
  *                 the configuration information for the DMA2D.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_PollForTransfer(DMA2D_HandleTypeDef *hdma2d, uint32_t Timeout)
{
 8015ee6:	b580      	push	{r7, lr}
 8015ee8:	b086      	sub	sp, #24
 8015eea:	af00      	add	r7, sp, #0
 8015eec:	6078      	str	r0, [r7, #4]
 8015eee:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t layer_start;
  __IO uint32_t isrflags = 0x0U;
 8015ef0:	2300      	movs	r3, #0
 8015ef2:	60fb      	str	r3, [r7, #12]

  /* Polling for DMA2D transfer */
  if ((hdma2d->Instance->CR & DMA2D_CR_START) != 0U)
 8015ef4:	687b      	ldr	r3, [r7, #4]
 8015ef6:	681b      	ldr	r3, [r3, #0]
 8015ef8:	681b      	ldr	r3, [r3, #0]
 8015efa:	f003 0301 	and.w	r3, r3, #1
 8015efe:	2b00      	cmp	r3, #0
 8015f00:	d056      	beq.n	8015fb0 <HAL_DMA2D_PollForTransfer+0xca>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8015f02:	f7fc f93b 	bl	801217c <HAL_GetTick>
 8015f06:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8015f08:	e04b      	b.n	8015fa2 <HAL_DMA2D_PollForTransfer+0xbc>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	681b      	ldr	r3, [r3, #0]
 8015f0e:	685b      	ldr	r3, [r3, #4]
 8015f10:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8015f12:	68fb      	ldr	r3, [r7, #12]
 8015f14:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d023      	beq.n	8015f64 <HAL_DMA2D_PollForTransfer+0x7e>
      {
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8015f1c:	68fb      	ldr	r3, [r7, #12]
 8015f1e:	f003 0320 	and.w	r3, r3, #32
 8015f22:	2b00      	cmp	r3, #0
 8015f24:	d005      	beq.n	8015f32 <HAL_DMA2D_PollForTransfer+0x4c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 8015f26:	687b      	ldr	r3, [r7, #4]
 8015f28:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f2a:	f043 0202 	orr.w	r2, r3, #2
 8015f2e:	687b      	ldr	r3, [r7, #4]
 8015f30:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8015f32:	68fb      	ldr	r3, [r7, #12]
 8015f34:	f003 0301 	and.w	r3, r3, #1
 8015f38:	2b00      	cmp	r3, #0
 8015f3a:	d005      	beq.n	8015f48 <HAL_DMA2D_PollForTransfer+0x62>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8015f3c:	687b      	ldr	r3, [r7, #4]
 8015f3e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f40:	f043 0201 	orr.w	r2, r3, #1
 8015f44:	687b      	ldr	r3, [r7, #4]
 8015f46:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the transfer and configuration error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 8015f48:	687b      	ldr	r3, [r7, #4]
 8015f4a:	681b      	ldr	r3, [r3, #0]
 8015f4c:	2221      	movs	r2, #33	@ 0x21
 8015f4e:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8015f50:	687b      	ldr	r3, [r7, #4]
 8015f52:	2204      	movs	r2, #4
 8015f54:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 8015f58:	687b      	ldr	r3, [r7, #4]
 8015f5a:	2200      	movs	r2, #0
 8015f5c:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8015f60:	2301      	movs	r3, #1
 8015f62:	e0a5      	b.n	80160b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8015f64:	683b      	ldr	r3, [r7, #0]
 8015f66:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8015f6a:	d01a      	beq.n	8015fa2 <HAL_DMA2D_PollForTransfer+0xbc>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8015f6c:	f7fc f906 	bl	801217c <HAL_GetTick>
 8015f70:	4602      	mov	r2, r0
 8015f72:	697b      	ldr	r3, [r7, #20]
 8015f74:	1ad3      	subs	r3, r2, r3
 8015f76:	683a      	ldr	r2, [r7, #0]
 8015f78:	429a      	cmp	r2, r3
 8015f7a:	d302      	bcc.n	8015f82 <HAL_DMA2D_PollForTransfer+0x9c>
 8015f7c:	683b      	ldr	r3, [r7, #0]
 8015f7e:	2b00      	cmp	r3, #0
 8015f80:	d10f      	bne.n	8015fa2 <HAL_DMA2D_PollForTransfer+0xbc>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8015f82:	687b      	ldr	r3, [r7, #4]
 8015f84:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015f86:	f043 0220 	orr.w	r2, r3, #32
 8015f8a:	687b      	ldr	r3, [r7, #4]
 8015f8c:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8015f8e:	687b      	ldr	r3, [r7, #4]
 8015f90:	2203      	movs	r2, #3
 8015f92:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 8015f96:	687b      	ldr	r3, [r7, #4]
 8015f98:	2200      	movs	r2, #0
 8015f9a:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8015f9e:	2303      	movs	r3, #3
 8015fa0:	e086      	b.n	80160b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_TC) == 0U)
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	681b      	ldr	r3, [r3, #0]
 8015fa6:	685b      	ldr	r3, [r3, #4]
 8015fa8:	f003 0302 	and.w	r3, r3, #2
 8015fac:	2b00      	cmp	r3, #0
 8015fae:	d0ac      	beq.n	8015f0a <HAL_DMA2D_PollForTransfer+0x24>
        }
      }
    }
  }
  /* Polling for CLUT loading (foreground or background) */
  layer_start = hdma2d->Instance->FGPFCCR & DMA2D_FGPFCCR_START;
 8015fb0:	687b      	ldr	r3, [r7, #4]
 8015fb2:	681b      	ldr	r3, [r3, #0]
 8015fb4:	69db      	ldr	r3, [r3, #28]
 8015fb6:	f003 0320 	and.w	r3, r3, #32
 8015fba:	613b      	str	r3, [r7, #16]
  layer_start |= hdma2d->Instance->BGPFCCR & DMA2D_BGPFCCR_START;
 8015fbc:	687b      	ldr	r3, [r7, #4]
 8015fbe:	681b      	ldr	r3, [r3, #0]
 8015fc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015fc2:	f003 0320 	and.w	r3, r3, #32
 8015fc6:	693a      	ldr	r2, [r7, #16]
 8015fc8:	4313      	orrs	r3, r2
 8015fca:	613b      	str	r3, [r7, #16]
  if (layer_start != 0U)
 8015fcc:	693b      	ldr	r3, [r7, #16]
 8015fce:	2b00      	cmp	r3, #0
 8015fd0:	d061      	beq.n	8016096 <HAL_DMA2D_PollForTransfer+0x1b0>
  {
    /* Get tick */
    tickstart = HAL_GetTick();
 8015fd2:	f7fc f8d3 	bl	801217c <HAL_GetTick>
 8015fd6:	6178      	str	r0, [r7, #20]

    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8015fd8:	e056      	b.n	8016088 <HAL_DMA2D_PollForTransfer+0x1a2>
    {
      isrflags = READ_REG(hdma2d->Instance->ISR);
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	681b      	ldr	r3, [r3, #0]
 8015fde:	685b      	ldr	r3, [r3, #4]
 8015fe0:	60fb      	str	r3, [r7, #12]
      if ((isrflags & (DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE)) != 0U)
 8015fe2:	68fb      	ldr	r3, [r7, #12]
 8015fe4:	f003 0329 	and.w	r3, r3, #41	@ 0x29
 8015fe8:	2b00      	cmp	r3, #0
 8015fea:	d02e      	beq.n	801604a <HAL_DMA2D_PollForTransfer+0x164>
      {
        if ((isrflags & DMA2D_FLAG_CAE) != 0U)
 8015fec:	68fb      	ldr	r3, [r7, #12]
 8015fee:	f003 0308 	and.w	r3, r3, #8
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d005      	beq.n	8016002 <HAL_DMA2D_PollForTransfer+0x11c>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CAE;
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8015ffa:	f043 0204 	orr.w	r2, r3, #4
 8015ffe:	687b      	ldr	r3, [r7, #4]
 8016000:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_CE) != 0U)
 8016002:	68fb      	ldr	r3, [r7, #12]
 8016004:	f003 0320 	and.w	r3, r3, #32
 8016008:	2b00      	cmp	r3, #0
 801600a:	d005      	beq.n	8016018 <HAL_DMA2D_PollForTransfer+0x132>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_CE;
 801600c:	687b      	ldr	r3, [r7, #4]
 801600e:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016010:	f043 0202 	orr.w	r2, r3, #2
 8016014:	687b      	ldr	r3, [r7, #4]
 8016016:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        if ((isrflags & DMA2D_FLAG_TE) != 0U)
 8016018:	68fb      	ldr	r3, [r7, #12]
 801601a:	f003 0301 	and.w	r3, r3, #1
 801601e:	2b00      	cmp	r3, #0
 8016020:	d005      	beq.n	801602e <HAL_DMA2D_PollForTransfer+0x148>
        {
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TE;
 8016022:	687b      	ldr	r3, [r7, #4]
 8016024:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016026:	f043 0201 	orr.w	r2, r3, #1
 801602a:	687b      	ldr	r3, [r7, #4]
 801602c:	665a      	str	r2, [r3, #100]	@ 0x64
        }
        /* Clear the CLUT Access Error, Configuration Error and Transfer Error flags */
        __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_CAE | DMA2D_FLAG_CE | DMA2D_FLAG_TE);
 801602e:	687b      	ldr	r3, [r7, #4]
 8016030:	681b      	ldr	r3, [r3, #0]
 8016032:	2229      	movs	r2, #41	@ 0x29
 8016034:	609a      	str	r2, [r3, #8]

        /* Change DMA2D state */
        hdma2d->State = HAL_DMA2D_STATE_ERROR;
 8016036:	687b      	ldr	r3, [r7, #4]
 8016038:	2204      	movs	r2, #4
 801603a:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

        /* Process unlocked */
        __HAL_UNLOCK(hdma2d);
 801603e:	687b      	ldr	r3, [r7, #4]
 8016040:	2200      	movs	r2, #0
 8016042:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

        return HAL_ERROR;
 8016046:	2301      	movs	r3, #1
 8016048:	e032      	b.n	80160b0 <HAL_DMA2D_PollForTransfer+0x1ca>
      }
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8016050:	d01a      	beq.n	8016088 <HAL_DMA2D_PollForTransfer+0x1a2>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8016052:	f7fc f893 	bl	801217c <HAL_GetTick>
 8016056:	4602      	mov	r2, r0
 8016058:	697b      	ldr	r3, [r7, #20]
 801605a:	1ad3      	subs	r3, r2, r3
 801605c:	683a      	ldr	r2, [r7, #0]
 801605e:	429a      	cmp	r2, r3
 8016060:	d302      	bcc.n	8016068 <HAL_DMA2D_PollForTransfer+0x182>
 8016062:	683b      	ldr	r3, [r7, #0]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d10f      	bne.n	8016088 <HAL_DMA2D_PollForTransfer+0x1a2>
        {
          /* Update error code */
          hdma2d->ErrorCode |= HAL_DMA2D_ERROR_TIMEOUT;
 8016068:	687b      	ldr	r3, [r7, #4]
 801606a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801606c:	f043 0220 	orr.w	r2, r3, #32
 8016070:	687b      	ldr	r3, [r7, #4]
 8016072:	665a      	str	r2, [r3, #100]	@ 0x64

          /* Change the DMA2D state */
          hdma2d->State = HAL_DMA2D_STATE_TIMEOUT;
 8016074:	687b      	ldr	r3, [r7, #4]
 8016076:	2203      	movs	r2, #3
 8016078:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

          /* Process unlocked */
          __HAL_UNLOCK(hdma2d);
 801607c:	687b      	ldr	r3, [r7, #4]
 801607e:	2200      	movs	r2, #0
 8016080:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

          return HAL_TIMEOUT;
 8016084:	2303      	movs	r3, #3
 8016086:	e013      	b.n	80160b0 <HAL_DMA2D_PollForTransfer+0x1ca>
    while (__HAL_DMA2D_GET_FLAG(hdma2d, DMA2D_FLAG_CTC) == 0U)
 8016088:	687b      	ldr	r3, [r7, #4]
 801608a:	681b      	ldr	r3, [r3, #0]
 801608c:	685b      	ldr	r3, [r3, #4]
 801608e:	f003 0310 	and.w	r3, r3, #16
 8016092:	2b00      	cmp	r3, #0
 8016094:	d0a1      	beq.n	8015fda <HAL_DMA2D_PollForTransfer+0xf4>
      }
    }
  }

  /* Clear the transfer complete and CLUT loading flags */
  __HAL_DMA2D_CLEAR_FLAG(hdma2d, DMA2D_FLAG_TC | DMA2D_FLAG_CTC);
 8016096:	687b      	ldr	r3, [r7, #4]
 8016098:	681b      	ldr	r3, [r3, #0]
 801609a:	2212      	movs	r2, #18
 801609c:	609a      	str	r2, [r3, #8]

  /* Change DMA2D state */
  hdma2d->State = HAL_DMA2D_STATE_READY;
 801609e:	687b      	ldr	r3, [r7, #4]
 80160a0:	2201      	movs	r2, #1
 80160a2:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80160a6:	687b      	ldr	r3, [r7, #4]
 80160a8:	2200      	movs	r2, #0
 80160aa:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 80160ae:	2300      	movs	r3, #0
}
 80160b0:	4618      	mov	r0, r3
 80160b2:	3718      	adds	r7, #24
 80160b4:	46bd      	mov	sp, r7
 80160b6:	bd80      	pop	{r7, pc}

080160b8 <HAL_DMA2D_ConfigLayer>:
  *                   This parameter can be one of the following values:
  *                   DMA2D_BACKGROUND_LAYER(0) / DMA2D_FOREGROUND_LAYER(1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA2D_ConfigLayer(DMA2D_HandleTypeDef *hdma2d, uint32_t LayerIdx)
{
 80160b8:	b480      	push	{r7}
 80160ba:	b087      	sub	sp, #28
 80160bc:	af00      	add	r7, sp, #0
 80160be:	6078      	str	r0, [r7, #4]
 80160c0:	6039      	str	r1, [r7, #0]
  uint32_t regValue;

  /* Check the parameters */
  assert_param(IS_DMA2D_LAYER(LayerIdx));
  assert_param(IS_DMA2D_OFFSET(hdma2d->LayerCfg[LayerIdx].InputOffset));
  if (hdma2d->Init.Mode != DMA2D_R2M)
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
    }
  }
  assert_param(IS_DMA2D_ALPHA_INVERTED(hdma2d->LayerCfg[LayerIdx].AlphaInverted));
  assert_param(IS_DMA2D_RB_SWAP(hdma2d->LayerCfg[LayerIdx].RedBlueSwap));

  if ((LayerIdx == DMA2D_FOREGROUND_LAYER) && (hdma2d->LayerCfg[LayerIdx].InputColorMode == DMA2D_INPUT_YCBCR))
 80160ca:	683b      	ldr	r3, [r7, #0]
 80160cc:	2b01      	cmp	r3, #1
  {
    assert_param(IS_DMA2D_CHROMA_SUB_SAMPLING(hdma2d->LayerCfg[LayerIdx].ChromaSubSampling));
  }

  /* Process locked */
  __HAL_LOCK(hdma2d);
 80160ce:	687b      	ldr	r3, [r7, #4]
 80160d0:	f893 3060 	ldrb.w	r3, [r3, #96]	@ 0x60
 80160d4:	2b01      	cmp	r3, #1
 80160d6:	d101      	bne.n	80160dc <HAL_DMA2D_ConfigLayer+0x24>
 80160d8:	2302      	movs	r3, #2
 80160da:	e092      	b.n	8016202 <HAL_DMA2D_ConfigLayer+0x14a>
 80160dc:	687b      	ldr	r3, [r7, #4]
 80160de:	2201      	movs	r2, #1
 80160e0:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  /* Change DMA2D peripheral state */
  hdma2d->State = HAL_DMA2D_STATE_BUSY;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	2202      	movs	r2, #2
 80160e8:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  pLayerCfg = &hdma2d->LayerCfg[LayerIdx];
 80160ec:	683a      	ldr	r2, [r7, #0]
 80160ee:	4613      	mov	r3, r2
 80160f0:	00db      	lsls	r3, r3, #3
 80160f2:	1a9b      	subs	r3, r3, r2
 80160f4:	009b      	lsls	r3, r3, #2
 80160f6:	3328      	adds	r3, #40	@ 0x28
 80160f8:	687a      	ldr	r2, [r7, #4]
 80160fa:	4413      	add	r3, r2
 80160fc:	60fb      	str	r3, [r7, #12]

  /* Prepare the value to be written to the BGPFCCR or FGPFCCR register */
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 80160fe:	68fb      	ldr	r3, [r7, #12]
 8016100:	685a      	ldr	r2, [r3, #4]
 8016102:	68fb      	ldr	r3, [r7, #12]
 8016104:	689b      	ldr	r3, [r3, #8]
 8016106:	041b      	lsls	r3, r3, #16
 8016108:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 801610a:	68fb      	ldr	r3, [r7, #12]
 801610c:	691b      	ldr	r3, [r3, #16]
 801610e:	051b      	lsls	r3, r3, #20
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8016110:	431a      	orrs	r2, r3
             (pLayerCfg->AlphaInverted << DMA2D_BGPFCCR_AI_Pos) | (pLayerCfg->RedBlueSwap << DMA2D_BGPFCCR_RBS_Pos);
 8016112:	68fb      	ldr	r3, [r7, #12]
 8016114:	695b      	ldr	r3, [r3, #20]
 8016116:	055b      	lsls	r3, r3, #21
  regValue = pLayerCfg->InputColorMode | (pLayerCfg->AlphaMode << DMA2D_BGPFCCR_AM_Pos) | \
 8016118:	4313      	orrs	r3, r2
 801611a:	613b      	str	r3, [r7, #16]
  regMask  = (DMA2D_BGPFCCR_CM | DMA2D_BGPFCCR_AM | DMA2D_BGPFCCR_ALPHA | DMA2D_BGPFCCR_AI | DMA2D_BGPFCCR_RBS);
 801611c:	4b3c      	ldr	r3, [pc, #240]	@ (8016210 <HAL_DMA2D_ConfigLayer+0x158>)
 801611e:	617b      	str	r3, [r7, #20]


  if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8016120:	68fb      	ldr	r3, [r7, #12]
 8016122:	685b      	ldr	r3, [r3, #4]
 8016124:	2b0a      	cmp	r3, #10
 8016126:	d003      	beq.n	8016130 <HAL_DMA2D_ConfigLayer+0x78>
 8016128:	68fb      	ldr	r3, [r7, #12]
 801612a:	685b      	ldr	r3, [r3, #4]
 801612c:	2b09      	cmp	r3, #9
 801612e:	d107      	bne.n	8016140 <HAL_DMA2D_ConfigLayer+0x88>
  {
    regValue |= (pLayerCfg->InputAlpha & DMA2D_BGPFCCR_ALPHA);
 8016130:	68fb      	ldr	r3, [r7, #12]
 8016132:	68db      	ldr	r3, [r3, #12]
 8016134:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8016138:	693a      	ldr	r2, [r7, #16]
 801613a:	4313      	orrs	r3, r2
 801613c:	613b      	str	r3, [r7, #16]
 801613e:	e005      	b.n	801614c <HAL_DMA2D_ConfigLayer+0x94>
  }
  else
  {
    regValue |= (pLayerCfg->InputAlpha << DMA2D_BGPFCCR_ALPHA_Pos);
 8016140:	68fb      	ldr	r3, [r7, #12]
 8016142:	68db      	ldr	r3, [r3, #12]
 8016144:	061b      	lsls	r3, r3, #24
 8016146:	693a      	ldr	r2, [r7, #16]
 8016148:	4313      	orrs	r3, r2
 801614a:	613b      	str	r3, [r7, #16]
  }

  /* Configure the background DMA2D layer */
  if (LayerIdx == DMA2D_BACKGROUND_LAYER)
 801614c:	683b      	ldr	r3, [r7, #0]
 801614e:	2b00      	cmp	r3, #0
 8016150:	d120      	bne.n	8016194 <HAL_DMA2D_ConfigLayer+0xdc>
  {
    /* Write DMA2D BGPFCCR register */
    MODIFY_REG(hdma2d->Instance->BGPFCCR, regMask, regValue);
 8016152:	687b      	ldr	r3, [r7, #4]
 8016154:	681b      	ldr	r3, [r3, #0]
 8016156:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016158:	697b      	ldr	r3, [r7, #20]
 801615a:	43db      	mvns	r3, r3
 801615c:	ea02 0103 	and.w	r1, r2, r3
 8016160:	687b      	ldr	r3, [r7, #4]
 8016162:	681b      	ldr	r3, [r3, #0]
 8016164:	693a      	ldr	r2, [r7, #16]
 8016166:	430a      	orrs	r2, r1
 8016168:	625a      	str	r2, [r3, #36]	@ 0x24

    /* DMA2D BGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->BGOR, pLayerCfg->InputOffset);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	68fa      	ldr	r2, [r7, #12]
 8016170:	6812      	ldr	r2, [r2, #0]
 8016172:	619a      	str	r2, [r3, #24]

    /* DMA2D BGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 8016174:	68fb      	ldr	r3, [r7, #12]
 8016176:	685b      	ldr	r3, [r3, #4]
 8016178:	2b0a      	cmp	r3, #10
 801617a:	d003      	beq.n	8016184 <HAL_DMA2D_ConfigLayer+0xcc>
 801617c:	68fb      	ldr	r3, [r7, #12]
 801617e:	685b      	ldr	r3, [r3, #4]
 8016180:	2b09      	cmp	r3, #9
 8016182:	d135      	bne.n	80161f0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->BGCOLR, pLayerCfg->InputAlpha & (DMA2D_BGCOLR_BLUE | DMA2D_BGCOLR_GREEN | \
 8016184:	68fb      	ldr	r3, [r7, #12]
 8016186:	68da      	ldr	r2, [r3, #12]
 8016188:	687b      	ldr	r3, [r7, #4]
 801618a:	681b      	ldr	r3, [r3, #0]
 801618c:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 8016190:	629a      	str	r2, [r3, #40]	@ 0x28
 8016192:	e02d      	b.n	80161f0 <HAL_DMA2D_ConfigLayer+0x138>
  }
  /* Configure the foreground DMA2D layer */
  else
  {

    if (pLayerCfg->InputColorMode == DMA2D_INPUT_YCBCR)
 8016194:	68fb      	ldr	r3, [r7, #12]
 8016196:	685b      	ldr	r3, [r3, #4]
 8016198:	2b0b      	cmp	r3, #11
 801619a:	d109      	bne.n	80161b0 <HAL_DMA2D_ConfigLayer+0xf8>
    {
      regValue |= (pLayerCfg->ChromaSubSampling << DMA2D_FGPFCCR_CSS_Pos);
 801619c:	68fb      	ldr	r3, [r7, #12]
 801619e:	699b      	ldr	r3, [r3, #24]
 80161a0:	049b      	lsls	r3, r3, #18
 80161a2:	693a      	ldr	r2, [r7, #16]
 80161a4:	4313      	orrs	r3, r2
 80161a6:	613b      	str	r3, [r7, #16]
      regMask  |= DMA2D_FGPFCCR_CSS;
 80161a8:	697b      	ldr	r3, [r7, #20]
 80161aa:	f443 2340 	orr.w	r3, r3, #786432	@ 0xc0000
 80161ae:	617b      	str	r3, [r7, #20]
    }

    /* Write DMA2D FGPFCCR register */
    MODIFY_REG(hdma2d->Instance->FGPFCCR, regMask, regValue);
 80161b0:	687b      	ldr	r3, [r7, #4]
 80161b2:	681b      	ldr	r3, [r3, #0]
 80161b4:	69da      	ldr	r2, [r3, #28]
 80161b6:	697b      	ldr	r3, [r7, #20]
 80161b8:	43db      	mvns	r3, r3
 80161ba:	ea02 0103 	and.w	r1, r2, r3
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	681b      	ldr	r3, [r3, #0]
 80161c2:	693a      	ldr	r2, [r7, #16]
 80161c4:	430a      	orrs	r2, r1
 80161c6:	61da      	str	r2, [r3, #28]

    /* DMA2D FGOR register configuration -------------------------------------*/
    WRITE_REG(hdma2d->Instance->FGOR, pLayerCfg->InputOffset);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	68fa      	ldr	r2, [r7, #12]
 80161ce:	6812      	ldr	r2, [r2, #0]
 80161d0:	611a      	str	r2, [r3, #16]

    /* DMA2D FGCOLR register configuration -------------------------------------*/
    if ((pLayerCfg->InputColorMode == DMA2D_INPUT_A4) || (pLayerCfg->InputColorMode == DMA2D_INPUT_A8))
 80161d2:	68fb      	ldr	r3, [r7, #12]
 80161d4:	685b      	ldr	r3, [r3, #4]
 80161d6:	2b0a      	cmp	r3, #10
 80161d8:	d003      	beq.n	80161e2 <HAL_DMA2D_ConfigLayer+0x12a>
 80161da:	68fb      	ldr	r3, [r7, #12]
 80161dc:	685b      	ldr	r3, [r3, #4]
 80161de:	2b09      	cmp	r3, #9
 80161e0:	d106      	bne.n	80161f0 <HAL_DMA2D_ConfigLayer+0x138>
    {
      WRITE_REG(hdma2d->Instance->FGCOLR, pLayerCfg->InputAlpha & (DMA2D_FGCOLR_BLUE | DMA2D_FGCOLR_GREEN | \
 80161e2:	68fb      	ldr	r3, [r7, #12]
 80161e4:	68da      	ldr	r2, [r3, #12]
 80161e6:	687b      	ldr	r3, [r7, #4]
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	f022 427f 	bic.w	r2, r2, #4278190080	@ 0xff000000
 80161ee:	621a      	str	r2, [r3, #32]
                                                                   DMA2D_FGCOLR_RED));
    }
  }
  /* Initialize the DMA2D state*/
  hdma2d->State = HAL_DMA2D_STATE_READY;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	2201      	movs	r2, #1
 80161f4:	f883 2061 	strb.w	r2, [r3, #97]	@ 0x61

  /* Process unlocked */
  __HAL_UNLOCK(hdma2d);
 80161f8:	687b      	ldr	r3, [r7, #4]
 80161fa:	2200      	movs	r2, #0
 80161fc:	f883 2060 	strb.w	r2, [r3, #96]	@ 0x60

  return HAL_OK;
 8016200:	2300      	movs	r3, #0
}
 8016202:	4618      	mov	r0, r3
 8016204:	371c      	adds	r7, #28
 8016206:	46bd      	mov	sp, r7
 8016208:	f85d 7b04 	ldr.w	r7, [sp], #4
 801620c:	4770      	bx	lr
 801620e:	bf00      	nop
 8016210:	ff33000f 	.word	0xff33000f

08016214 <DMA2D_SetConfig>:
  * @param  Height     The height of data to be transferred from source to destination.
  * @retval HAL status
  */
static void DMA2D_SetConfig(DMA2D_HandleTypeDef *hdma2d, uint32_t pdata, uint32_t DstAddress, uint32_t Width,
                            uint32_t Height)
{
 8016214:	b480      	push	{r7}
 8016216:	b08b      	sub	sp, #44	@ 0x2c
 8016218:	af00      	add	r7, sp, #0
 801621a:	60f8      	str	r0, [r7, #12]
 801621c:	60b9      	str	r1, [r7, #8]
 801621e:	607a      	str	r2, [r7, #4]
 8016220:	603b      	str	r3, [r7, #0]
  uint32_t tmp2;
  uint32_t tmp3;
  uint32_t tmp4;

  /* Configure DMA2D data size */
  MODIFY_REG(hdma2d->Instance->NLR, (DMA2D_NLR_NL | DMA2D_NLR_PL), (Height | (Width << DMA2D_NLR_PL_Pos)));
 8016222:	68fb      	ldr	r3, [r7, #12]
 8016224:	681b      	ldr	r3, [r3, #0]
 8016226:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016228:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 801622c:	683b      	ldr	r3, [r7, #0]
 801622e:	041a      	lsls	r2, r3, #16
 8016230:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8016232:	431a      	orrs	r2, r3
 8016234:	68fb      	ldr	r3, [r7, #12]
 8016236:	681b      	ldr	r3, [r3, #0]
 8016238:	430a      	orrs	r2, r1
 801623a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Configure DMA2D destination address */
  WRITE_REG(hdma2d->Instance->OMAR, DstAddress);
 801623c:	68fb      	ldr	r3, [r7, #12]
 801623e:	681b      	ldr	r3, [r3, #0]
 8016240:	687a      	ldr	r2, [r7, #4]
 8016242:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Register to memory DMA2D mode selected */
  if (hdma2d->Init.Mode == DMA2D_R2M)
 8016244:	68fb      	ldr	r3, [r7, #12]
 8016246:	685b      	ldr	r3, [r3, #4]
 8016248:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801624c:	d174      	bne.n	8016338 <DMA2D_SetConfig+0x124>
  {
    tmp1 = pdata & DMA2D_OCOLR_ALPHA_1;
 801624e:	68bb      	ldr	r3, [r7, #8]
 8016250:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8016254:	623b      	str	r3, [r7, #32]
    tmp2 = pdata & DMA2D_OCOLR_RED_1;
 8016256:	68bb      	ldr	r3, [r7, #8]
 8016258:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 801625c:	61fb      	str	r3, [r7, #28]
    tmp3 = pdata & DMA2D_OCOLR_GREEN_1;
 801625e:	68bb      	ldr	r3, [r7, #8]
 8016260:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
 8016264:	61bb      	str	r3, [r7, #24]
    tmp4 = pdata & DMA2D_OCOLR_BLUE_1;
 8016266:	68bb      	ldr	r3, [r7, #8]
 8016268:	b2db      	uxtb	r3, r3
 801626a:	617b      	str	r3, [r7, #20]

    /* Prepare the value to be written to the OCOLR register according to the color mode */
    if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB8888)
 801626c:	68fb      	ldr	r3, [r7, #12]
 801626e:	689b      	ldr	r3, [r3, #8]
 8016270:	2b00      	cmp	r3, #0
 8016272:	d108      	bne.n	8016286 <DMA2D_SetConfig+0x72>
    {
      tmp = (tmp3 | tmp2 | tmp1 | tmp4);
 8016274:	69ba      	ldr	r2, [r7, #24]
 8016276:	69fb      	ldr	r3, [r7, #28]
 8016278:	431a      	orrs	r2, r3
 801627a:	6a3b      	ldr	r3, [r7, #32]
 801627c:	4313      	orrs	r3, r2
 801627e:	697a      	ldr	r2, [r7, #20]
 8016280:	4313      	orrs	r3, r2
 8016282:	627b      	str	r3, [r7, #36]	@ 0x24
 8016284:	e053      	b.n	801632e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB888)
 8016286:	68fb      	ldr	r3, [r7, #12]
 8016288:	689b      	ldr	r3, [r3, #8]
 801628a:	2b01      	cmp	r3, #1
 801628c:	d106      	bne.n	801629c <DMA2D_SetConfig+0x88>
    {
      tmp = (tmp3 | tmp2 | tmp4);
 801628e:	69ba      	ldr	r2, [r7, #24]
 8016290:	69fb      	ldr	r3, [r7, #28]
 8016292:	4313      	orrs	r3, r2
 8016294:	697a      	ldr	r2, [r7, #20]
 8016296:	4313      	orrs	r3, r2
 8016298:	627b      	str	r3, [r7, #36]	@ 0x24
 801629a:	e048      	b.n	801632e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_RGB565)
 801629c:	68fb      	ldr	r3, [r7, #12]
 801629e:	689b      	ldr	r3, [r3, #8]
 80162a0:	2b02      	cmp	r3, #2
 80162a2:	d111      	bne.n	80162c8 <DMA2D_SetConfig+0xb4>
    {
      tmp2 = (tmp2 >> 19U);
 80162a4:	69fb      	ldr	r3, [r7, #28]
 80162a6:	0cdb      	lsrs	r3, r3, #19
 80162a8:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 10U);
 80162aa:	69bb      	ldr	r3, [r7, #24]
 80162ac:	0a9b      	lsrs	r3, r3, #10
 80162ae:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	08db      	lsrs	r3, r3, #3
 80162b4:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 11U) | tmp4);
 80162b6:	69bb      	ldr	r3, [r7, #24]
 80162b8:	015a      	lsls	r2, r3, #5
 80162ba:	69fb      	ldr	r3, [r7, #28]
 80162bc:	02db      	lsls	r3, r3, #11
 80162be:	4313      	orrs	r3, r2
 80162c0:	697a      	ldr	r2, [r7, #20]
 80162c2:	4313      	orrs	r3, r2
 80162c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80162c6:	e032      	b.n	801632e <DMA2D_SetConfig+0x11a>
    }
    else if (hdma2d->Init.ColorMode == DMA2D_OUTPUT_ARGB1555)
 80162c8:	68fb      	ldr	r3, [r7, #12]
 80162ca:	689b      	ldr	r3, [r3, #8]
 80162cc:	2b03      	cmp	r3, #3
 80162ce:	d117      	bne.n	8016300 <DMA2D_SetConfig+0xec>
    {
      tmp1 = (tmp1 >> 31U);
 80162d0:	6a3b      	ldr	r3, [r7, #32]
 80162d2:	0fdb      	lsrs	r3, r3, #31
 80162d4:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 19U);
 80162d6:	69fb      	ldr	r3, [r7, #28]
 80162d8:	0cdb      	lsrs	r3, r3, #19
 80162da:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 11U);
 80162dc:	69bb      	ldr	r3, [r7, #24]
 80162de:	0adb      	lsrs	r3, r3, #11
 80162e0:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 3U);
 80162e2:	697b      	ldr	r3, [r7, #20]
 80162e4:	08db      	lsrs	r3, r3, #3
 80162e6:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 5U) | (tmp2 << 10U) | (tmp1 << 15U) | tmp4);
 80162e8:	69bb      	ldr	r3, [r7, #24]
 80162ea:	015a      	lsls	r2, r3, #5
 80162ec:	69fb      	ldr	r3, [r7, #28]
 80162ee:	029b      	lsls	r3, r3, #10
 80162f0:	431a      	orrs	r2, r3
 80162f2:	6a3b      	ldr	r3, [r7, #32]
 80162f4:	03db      	lsls	r3, r3, #15
 80162f6:	4313      	orrs	r3, r2
 80162f8:	697a      	ldr	r2, [r7, #20]
 80162fa:	4313      	orrs	r3, r2
 80162fc:	627b      	str	r3, [r7, #36]	@ 0x24
 80162fe:	e016      	b.n	801632e <DMA2D_SetConfig+0x11a>
    }
    else /* Dhdma2d->Init.ColorMode = DMA2D_OUTPUT_ARGB4444 */
    {
      tmp1 = (tmp1 >> 28U);
 8016300:	6a3b      	ldr	r3, [r7, #32]
 8016302:	0f1b      	lsrs	r3, r3, #28
 8016304:	623b      	str	r3, [r7, #32]
      tmp2 = (tmp2 >> 20U);
 8016306:	69fb      	ldr	r3, [r7, #28]
 8016308:	0d1b      	lsrs	r3, r3, #20
 801630a:	61fb      	str	r3, [r7, #28]
      tmp3 = (tmp3 >> 12U);
 801630c:	69bb      	ldr	r3, [r7, #24]
 801630e:	0b1b      	lsrs	r3, r3, #12
 8016310:	61bb      	str	r3, [r7, #24]
      tmp4 = (tmp4 >> 4U);
 8016312:	697b      	ldr	r3, [r7, #20]
 8016314:	091b      	lsrs	r3, r3, #4
 8016316:	617b      	str	r3, [r7, #20]
      tmp  = ((tmp3 << 4U) | (tmp2 << 8U) | (tmp1 << 12U) | tmp4);
 8016318:	69bb      	ldr	r3, [r7, #24]
 801631a:	011a      	lsls	r2, r3, #4
 801631c:	69fb      	ldr	r3, [r7, #28]
 801631e:	021b      	lsls	r3, r3, #8
 8016320:	431a      	orrs	r2, r3
 8016322:	6a3b      	ldr	r3, [r7, #32]
 8016324:	031b      	lsls	r3, r3, #12
 8016326:	4313      	orrs	r3, r2
 8016328:	697a      	ldr	r2, [r7, #20]
 801632a:	4313      	orrs	r3, r2
 801632c:	627b      	str	r3, [r7, #36]	@ 0x24
    }
    /* Write to DMA2D OCOLR register */
    WRITE_REG(hdma2d->Instance->OCOLR, tmp);
 801632e:	68fb      	ldr	r3, [r7, #12]
 8016330:	681b      	ldr	r3, [r3, #0]
 8016332:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8016334:	639a      	str	r2, [r3, #56]	@ 0x38
  else /* M2M, M2M_PFC,M2M_Blending or M2M_blending with fixed color BG DMA2D Mode */
  {
    /* Configure DMA2D source address */
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
  }
}
 8016336:	e00d      	b.n	8016354 <DMA2D_SetConfig+0x140>
  else if (hdma2d->Init.Mode == DMA2D_M2M_BLEND_FG) /*M2M_blending with fixed color FG DMA2D Mode selected*/
 8016338:	68fb      	ldr	r3, [r7, #12]
 801633a:	685b      	ldr	r3, [r3, #4]
 801633c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016340:	d104      	bne.n	801634c <DMA2D_SetConfig+0x138>
    WRITE_REG(hdma2d->Instance->BGMAR, pdata);
 8016342:	68fb      	ldr	r3, [r7, #12]
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	68ba      	ldr	r2, [r7, #8]
 8016348:	615a      	str	r2, [r3, #20]
}
 801634a:	e003      	b.n	8016354 <DMA2D_SetConfig+0x140>
    WRITE_REG(hdma2d->Instance->FGMAR, pdata);
 801634c:	68fb      	ldr	r3, [r7, #12]
 801634e:	681b      	ldr	r3, [r3, #0]
 8016350:	68ba      	ldr	r2, [r7, #8]
 8016352:	60da      	str	r2, [r3, #12]
}
 8016354:	bf00      	nop
 8016356:	372c      	adds	r7, #44	@ 0x2c
 8016358:	46bd      	mov	sp, r7
 801635a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801635e:	4770      	bx	lr

08016360 <HAL_DMAEx_MultiBufferStart_IT>:
  * @param  SecondMemAddress: The second memory Buffer address in case of multi buffer Transfer
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_MultiBufferStart_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t SecondMemAddress, uint32_t DataLength)
{
 8016360:	b580      	push	{r7, lr}
 8016362:	b086      	sub	sp, #24
 8016364:	af00      	add	r7, sp, #0
 8016366:	60f8      	str	r0, [r7, #12]
 8016368:	60b9      	str	r1, [r7, #8]
 801636a:	607a      	str	r2, [r7, #4]
 801636c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 801636e:	2300      	movs	r3, #0
 8016370:	75fb      	strb	r3, [r7, #23]
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));

  /* Memory-to-memory transfer not supported in double buffering mode */
  if(hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8016372:	68fb      	ldr	r3, [r7, #12]
 8016374:	689b      	ldr	r3, [r3, #8]
 8016376:	2b80      	cmp	r3, #128	@ 0x80
 8016378:	d105      	bne.n	8016386 <HAL_DMAEx_MultiBufferStart_IT+0x26>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NOT_SUPPORTED;
 801637a:	68fb      	ldr	r3, [r7, #12]
 801637c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8016380:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8016382:	2301      	movs	r3, #1
 8016384:	e315      	b.n	80169b2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
  }

  /* Process locked */
  __HAL_LOCK(hdma);
 8016386:	68fb      	ldr	r3, [r7, #12]
 8016388:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 801638c:	2b01      	cmp	r3, #1
 801638e:	d101      	bne.n	8016394 <HAL_DMAEx_MultiBufferStart_IT+0x34>
 8016390:	2302      	movs	r3, #2
 8016392:	e30e      	b.n	80169b2 <HAL_DMAEx_MultiBufferStart_IT+0x652>
 8016394:	68fb      	ldr	r3, [r7, #12]
 8016396:	2201      	movs	r2, #1
 8016398:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

  if(HAL_DMA_STATE_READY == hdma->State)
 801639c:	68fb      	ldr	r3, [r7, #12]
 801639e:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80163a2:	b2db      	uxtb	r3, r3
 80163a4:	2b01      	cmp	r3, #1
 80163a6:	f040 82fd 	bne.w	80169a4 <HAL_DMAEx_MultiBufferStart_IT+0x644>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	2202      	movs	r2, #2
 80163ae:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80163b2:	68fb      	ldr	r3, [r7, #12]
 80163b4:	2200      	movs	r2, #0
 80163b6:	655a      	str	r2, [r3, #84]	@ 0x54

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	681b      	ldr	r3, [r3, #0]
 80163bc:	4a82      	ldr	r2, [pc, #520]	@ (80165c8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80163be:	4293      	cmp	r3, r2
 80163c0:	d04a      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	4a81      	ldr	r2, [pc, #516]	@ (80165cc <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80163c8:	4293      	cmp	r3, r2
 80163ca:	d045      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163cc:	68fb      	ldr	r3, [r7, #12]
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	4a7f      	ldr	r2, [pc, #508]	@ (80165d0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80163d2:	4293      	cmp	r3, r2
 80163d4:	d040      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163d6:	68fb      	ldr	r3, [r7, #12]
 80163d8:	681b      	ldr	r3, [r3, #0]
 80163da:	4a7e      	ldr	r2, [pc, #504]	@ (80165d4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80163dc:	4293      	cmp	r3, r2
 80163de:	d03b      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163e0:	68fb      	ldr	r3, [r7, #12]
 80163e2:	681b      	ldr	r3, [r3, #0]
 80163e4:	4a7c      	ldr	r2, [pc, #496]	@ (80165d8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 80163e6:	4293      	cmp	r3, r2
 80163e8:	d036      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163ea:	68fb      	ldr	r3, [r7, #12]
 80163ec:	681b      	ldr	r3, [r3, #0]
 80163ee:	4a7b      	ldr	r2, [pc, #492]	@ (80165dc <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 80163f0:	4293      	cmp	r3, r2
 80163f2:	d031      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163f4:	68fb      	ldr	r3, [r7, #12]
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	4a79      	ldr	r2, [pc, #484]	@ (80165e0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 80163fa:	4293      	cmp	r3, r2
 80163fc:	d02c      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	681b      	ldr	r3, [r3, #0]
 8016402:	4a78      	ldr	r2, [pc, #480]	@ (80165e4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 8016404:	4293      	cmp	r3, r2
 8016406:	d027      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8016408:	68fb      	ldr	r3, [r7, #12]
 801640a:	681b      	ldr	r3, [r3, #0]
 801640c:	4a76      	ldr	r2, [pc, #472]	@ (80165e8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 801640e:	4293      	cmp	r3, r2
 8016410:	d022      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8016412:	68fb      	ldr	r3, [r7, #12]
 8016414:	681b      	ldr	r3, [r3, #0]
 8016416:	4a75      	ldr	r2, [pc, #468]	@ (80165ec <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8016418:	4293      	cmp	r3, r2
 801641a:	d01d      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801641c:	68fb      	ldr	r3, [r7, #12]
 801641e:	681b      	ldr	r3, [r3, #0]
 8016420:	4a73      	ldr	r2, [pc, #460]	@ (80165f0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 8016422:	4293      	cmp	r3, r2
 8016424:	d018      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8016426:	68fb      	ldr	r3, [r7, #12]
 8016428:	681b      	ldr	r3, [r3, #0]
 801642a:	4a72      	ldr	r2, [pc, #456]	@ (80165f4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 801642c:	4293      	cmp	r3, r2
 801642e:	d013      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8016430:	68fb      	ldr	r3, [r7, #12]
 8016432:	681b      	ldr	r3, [r3, #0]
 8016434:	4a70      	ldr	r2, [pc, #448]	@ (80165f8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8016436:	4293      	cmp	r3, r2
 8016438:	d00e      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801643a:	68fb      	ldr	r3, [r7, #12]
 801643c:	681b      	ldr	r3, [r3, #0]
 801643e:	4a6f      	ldr	r2, [pc, #444]	@ (80165fc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 8016440:	4293      	cmp	r3, r2
 8016442:	d009      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 8016444:	68fb      	ldr	r3, [r7, #12]
 8016446:	681b      	ldr	r3, [r3, #0]
 8016448:	4a6d      	ldr	r2, [pc, #436]	@ (8016600 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 801644a:	4293      	cmp	r3, r2
 801644c:	d004      	beq.n	8016458 <HAL_DMAEx_MultiBufferStart_IT+0xf8>
 801644e:	68fb      	ldr	r3, [r7, #12]
 8016450:	681b      	ldr	r3, [r3, #0]
 8016452:	4a6c      	ldr	r2, [pc, #432]	@ (8016604 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 8016454:	4293      	cmp	r3, r2
 8016456:	d101      	bne.n	801645c <HAL_DMAEx_MultiBufferStart_IT+0xfc>
 8016458:	2301      	movs	r3, #1
 801645a:	e000      	b.n	801645e <HAL_DMAEx_MultiBufferStart_IT+0xfe>
 801645c:	2300      	movs	r3, #0
 801645e:	2b00      	cmp	r3, #0
 8016460:	d018      	beq.n	8016494 <HAL_DMAEx_MultiBufferStart_IT+0x134>
    {
      /* Enable the Double buffer mode */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->CR |= DMA_SxCR_DBM;
 8016462:	68fb      	ldr	r3, [r7, #12]
 8016464:	681b      	ldr	r3, [r3, #0]
 8016466:	681a      	ldr	r2, [r3, #0]
 8016468:	68fb      	ldr	r3, [r7, #12]
 801646a:	681b      	ldr	r3, [r3, #0]
 801646c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8016470:	601a      	str	r2, [r3, #0]

      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = SecondMemAddress;
 8016472:	68fb      	ldr	r3, [r7, #12]
 8016474:	681b      	ldr	r3, [r3, #0]
 8016476:	683a      	ldr	r2, [r7, #0]
 8016478:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 8U));
 801647a:	68fb      	ldr	r3, [r7, #12]
 801647c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801647e:	3308      	adds	r3, #8
 8016480:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = 0x3FUL << (hdma->StreamIndex & 0x1FU);
 8016482:	68fb      	ldr	r3, [r7, #12]
 8016484:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8016486:	f003 031f 	and.w	r3, r3, #31
 801648a:	223f      	movs	r2, #63	@ 0x3f
 801648c:	409a      	lsls	r2, r3
 801648e:	693b      	ldr	r3, [r7, #16]
 8016490:	601a      	str	r2, [r3, #0]
 8016492:	e018      	b.n	80164c6 <HAL_DMAEx_MultiBufferStart_IT+0x166>
    }
    else /* BDMA instance(s) */
    {
      /* Enable the Double buffer mode */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR |= (BDMA_CCR_DBM | BDMA_CCR_CIRC);
 8016494:	68fb      	ldr	r3, [r7, #12]
 8016496:	681b      	ldr	r3, [r3, #0]
 8016498:	6819      	ldr	r1, [r3, #0]
 801649a:	68fb      	ldr	r3, [r7, #12]
 801649c:	681a      	ldr	r2, [r3, #0]
 801649e:	f248 0320 	movw	r3, #32800	@ 0x8020
 80164a2:	430b      	orrs	r3, r1
 80164a4:	6013      	str	r3, [r2, #0]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = SecondMemAddress;
 80164a6:	68fb      	ldr	r3, [r7, #12]
 80164a8:	681b      	ldr	r3, [r3, #0]
 80164aa:	683a      	ldr	r2, [r7, #0]
 80164ac:	611a      	str	r2, [r3, #16]

      /* Calculate the interrupt clear flag register (IFCR) base address  */
      ifcRegister_Base = (uint32_t *)((uint32_t)(hdma->StreamBaseAddress + 4U));
 80164ae:	68fb      	ldr	r3, [r7, #12]
 80164b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80164b2:	3304      	adds	r3, #4
 80164b4:	613b      	str	r3, [r7, #16]

      /* Clear all flags */
      *ifcRegister_Base = (BDMA_ISR_GIF0) << (hdma->StreamIndex & 0x1FU);
 80164b6:	68fb      	ldr	r3, [r7, #12]
 80164b8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80164ba:	f003 031f 	and.w	r3, r3, #31
 80164be:	2201      	movs	r2, #1
 80164c0:	409a      	lsls	r2, r3
 80164c2:	693b      	ldr	r3, [r7, #16]
 80164c4:	601a      	str	r2, [r3, #0]
    }

    /* Configure the source, destination address and the data length */
    DMA_MultiBufferSetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80164c6:	6a3b      	ldr	r3, [r7, #32]
 80164c8:	687a      	ldr	r2, [r7, #4]
 80164ca:	68b9      	ldr	r1, [r7, #8]
 80164cc:	68f8      	ldr	r0, [r7, #12]
 80164ce:	f000 fb41 	bl	8016b54 <DMA_MultiBufferSetConfig>

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80164d2:	68fb      	ldr	r3, [r7, #12]
 80164d4:	681b      	ldr	r3, [r3, #0]
 80164d6:	4a3c      	ldr	r2, [pc, #240]	@ (80165c8 <HAL_DMAEx_MultiBufferStart_IT+0x268>)
 80164d8:	4293      	cmp	r3, r2
 80164da:	d072      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80164dc:	68fb      	ldr	r3, [r7, #12]
 80164de:	681b      	ldr	r3, [r3, #0]
 80164e0:	4a3a      	ldr	r2, [pc, #232]	@ (80165cc <HAL_DMAEx_MultiBufferStart_IT+0x26c>)
 80164e2:	4293      	cmp	r3, r2
 80164e4:	d06d      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80164e6:	68fb      	ldr	r3, [r7, #12]
 80164e8:	681b      	ldr	r3, [r3, #0]
 80164ea:	4a39      	ldr	r2, [pc, #228]	@ (80165d0 <HAL_DMAEx_MultiBufferStart_IT+0x270>)
 80164ec:	4293      	cmp	r3, r2
 80164ee:	d068      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80164f0:	68fb      	ldr	r3, [r7, #12]
 80164f2:	681b      	ldr	r3, [r3, #0]
 80164f4:	4a37      	ldr	r2, [pc, #220]	@ (80165d4 <HAL_DMAEx_MultiBufferStart_IT+0x274>)
 80164f6:	4293      	cmp	r3, r2
 80164f8:	d063      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80164fa:	68fb      	ldr	r3, [r7, #12]
 80164fc:	681b      	ldr	r3, [r3, #0]
 80164fe:	4a36      	ldr	r2, [pc, #216]	@ (80165d8 <HAL_DMAEx_MultiBufferStart_IT+0x278>)
 8016500:	4293      	cmp	r3, r2
 8016502:	d05e      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016504:	68fb      	ldr	r3, [r7, #12]
 8016506:	681b      	ldr	r3, [r3, #0]
 8016508:	4a34      	ldr	r2, [pc, #208]	@ (80165dc <HAL_DMAEx_MultiBufferStart_IT+0x27c>)
 801650a:	4293      	cmp	r3, r2
 801650c:	d059      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801650e:	68fb      	ldr	r3, [r7, #12]
 8016510:	681b      	ldr	r3, [r3, #0]
 8016512:	4a33      	ldr	r2, [pc, #204]	@ (80165e0 <HAL_DMAEx_MultiBufferStart_IT+0x280>)
 8016514:	4293      	cmp	r3, r2
 8016516:	d054      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016518:	68fb      	ldr	r3, [r7, #12]
 801651a:	681b      	ldr	r3, [r3, #0]
 801651c:	4a31      	ldr	r2, [pc, #196]	@ (80165e4 <HAL_DMAEx_MultiBufferStart_IT+0x284>)
 801651e:	4293      	cmp	r3, r2
 8016520:	d04f      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016522:	68fb      	ldr	r3, [r7, #12]
 8016524:	681b      	ldr	r3, [r3, #0]
 8016526:	4a30      	ldr	r2, [pc, #192]	@ (80165e8 <HAL_DMAEx_MultiBufferStart_IT+0x288>)
 8016528:	4293      	cmp	r3, r2
 801652a:	d04a      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801652c:	68fb      	ldr	r3, [r7, #12]
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	4a2e      	ldr	r2, [pc, #184]	@ (80165ec <HAL_DMAEx_MultiBufferStart_IT+0x28c>)
 8016532:	4293      	cmp	r3, r2
 8016534:	d045      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016536:	68fb      	ldr	r3, [r7, #12]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	4a2d      	ldr	r2, [pc, #180]	@ (80165f0 <HAL_DMAEx_MultiBufferStart_IT+0x290>)
 801653c:	4293      	cmp	r3, r2
 801653e:	d040      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016540:	68fb      	ldr	r3, [r7, #12]
 8016542:	681b      	ldr	r3, [r3, #0]
 8016544:	4a2b      	ldr	r2, [pc, #172]	@ (80165f4 <HAL_DMAEx_MultiBufferStart_IT+0x294>)
 8016546:	4293      	cmp	r3, r2
 8016548:	d03b      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801654a:	68fb      	ldr	r3, [r7, #12]
 801654c:	681b      	ldr	r3, [r3, #0]
 801654e:	4a2a      	ldr	r2, [pc, #168]	@ (80165f8 <HAL_DMAEx_MultiBufferStart_IT+0x298>)
 8016550:	4293      	cmp	r3, r2
 8016552:	d036      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016554:	68fb      	ldr	r3, [r7, #12]
 8016556:	681b      	ldr	r3, [r3, #0]
 8016558:	4a28      	ldr	r2, [pc, #160]	@ (80165fc <HAL_DMAEx_MultiBufferStart_IT+0x29c>)
 801655a:	4293      	cmp	r3, r2
 801655c:	d031      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801655e:	68fb      	ldr	r3, [r7, #12]
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	4a27      	ldr	r2, [pc, #156]	@ (8016600 <HAL_DMAEx_MultiBufferStart_IT+0x2a0>)
 8016564:	4293      	cmp	r3, r2
 8016566:	d02c      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016568:	68fb      	ldr	r3, [r7, #12]
 801656a:	681b      	ldr	r3, [r3, #0]
 801656c:	4a25      	ldr	r2, [pc, #148]	@ (8016604 <HAL_DMAEx_MultiBufferStart_IT+0x2a4>)
 801656e:	4293      	cmp	r3, r2
 8016570:	d027      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016572:	68fb      	ldr	r3, [r7, #12]
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	4a24      	ldr	r2, [pc, #144]	@ (8016608 <HAL_DMAEx_MultiBufferStart_IT+0x2a8>)
 8016578:	4293      	cmp	r3, r2
 801657a:	d022      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801657c:	68fb      	ldr	r3, [r7, #12]
 801657e:	681b      	ldr	r3, [r3, #0]
 8016580:	4a22      	ldr	r2, [pc, #136]	@ (801660c <HAL_DMAEx_MultiBufferStart_IT+0x2ac>)
 8016582:	4293      	cmp	r3, r2
 8016584:	d01d      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016586:	68fb      	ldr	r3, [r7, #12]
 8016588:	681b      	ldr	r3, [r3, #0]
 801658a:	4a21      	ldr	r2, [pc, #132]	@ (8016610 <HAL_DMAEx_MultiBufferStart_IT+0x2b0>)
 801658c:	4293      	cmp	r3, r2
 801658e:	d018      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 8016590:	68fb      	ldr	r3, [r7, #12]
 8016592:	681b      	ldr	r3, [r3, #0]
 8016594:	4a1f      	ldr	r2, [pc, #124]	@ (8016614 <HAL_DMAEx_MultiBufferStart_IT+0x2b4>)
 8016596:	4293      	cmp	r3, r2
 8016598:	d013      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	4a1e      	ldr	r2, [pc, #120]	@ (8016618 <HAL_DMAEx_MultiBufferStart_IT+0x2b8>)
 80165a0:	4293      	cmp	r3, r2
 80165a2:	d00e      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80165a4:	68fb      	ldr	r3, [r7, #12]
 80165a6:	681b      	ldr	r3, [r3, #0]
 80165a8:	4a1c      	ldr	r2, [pc, #112]	@ (801661c <HAL_DMAEx_MultiBufferStart_IT+0x2bc>)
 80165aa:	4293      	cmp	r3, r2
 80165ac:	d009      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80165ae:	68fb      	ldr	r3, [r7, #12]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	4a1b      	ldr	r2, [pc, #108]	@ (8016620 <HAL_DMAEx_MultiBufferStart_IT+0x2c0>)
 80165b4:	4293      	cmp	r3, r2
 80165b6:	d004      	beq.n	80165c2 <HAL_DMAEx_MultiBufferStart_IT+0x262>
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	681b      	ldr	r3, [r3, #0]
 80165bc:	4a19      	ldr	r2, [pc, #100]	@ (8016624 <HAL_DMAEx_MultiBufferStart_IT+0x2c4>)
 80165be:	4293      	cmp	r3, r2
 80165c0:	d132      	bne.n	8016628 <HAL_DMAEx_MultiBufferStart_IT+0x2c8>
 80165c2:	2301      	movs	r3, #1
 80165c4:	e031      	b.n	801662a <HAL_DMAEx_MultiBufferStart_IT+0x2ca>
 80165c6:	bf00      	nop
 80165c8:	40020010 	.word	0x40020010
 80165cc:	40020028 	.word	0x40020028
 80165d0:	40020040 	.word	0x40020040
 80165d4:	40020058 	.word	0x40020058
 80165d8:	40020070 	.word	0x40020070
 80165dc:	40020088 	.word	0x40020088
 80165e0:	400200a0 	.word	0x400200a0
 80165e4:	400200b8 	.word	0x400200b8
 80165e8:	40020410 	.word	0x40020410
 80165ec:	40020428 	.word	0x40020428
 80165f0:	40020440 	.word	0x40020440
 80165f4:	40020458 	.word	0x40020458
 80165f8:	40020470 	.word	0x40020470
 80165fc:	40020488 	.word	0x40020488
 8016600:	400204a0 	.word	0x400204a0
 8016604:	400204b8 	.word	0x400204b8
 8016608:	58025408 	.word	0x58025408
 801660c:	5802541c 	.word	0x5802541c
 8016610:	58025430 	.word	0x58025430
 8016614:	58025444 	.word	0x58025444
 8016618:	58025458 	.word	0x58025458
 801661c:	5802546c 	.word	0x5802546c
 8016620:	58025480 	.word	0x58025480
 8016624:	58025494 	.word	0x58025494
 8016628:	2300      	movs	r3, #0
 801662a:	2b00      	cmp	r3, #0
 801662c:	d00d      	beq.n	801664a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
    {
      /* Clear the DMAMUX synchro overrun flag */
      hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801662e:	68fb      	ldr	r3, [r7, #12]
 8016630:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8016632:	68fa      	ldr	r2, [r7, #12]
 8016634:	6e92      	ldr	r2, [r2, #104]	@ 0x68
 8016636:	605a      	str	r2, [r3, #4]

      if(hdma->DMAmuxRequestGen != 0U)
 8016638:	68fb      	ldr	r3, [r7, #12]
 801663a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801663c:	2b00      	cmp	r3, #0
 801663e:	d004      	beq.n	801664a <HAL_DMAEx_MultiBufferStart_IT+0x2ea>
      {
        /* Clear the DMAMUX request generator overrun flag */
        hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8016640:	68fb      	ldr	r3, [r7, #12]
 8016642:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8016644:	68fa      	ldr	r2, [r7, #12]
 8016646:	6f52      	ldr	r2, [r2, #116]	@ 0x74
 8016648:	605a      	str	r2, [r3, #4]
      }
    }

    if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 801664a:	68fb      	ldr	r3, [r7, #12]
 801664c:	681b      	ldr	r3, [r3, #0]
 801664e:	4a3b      	ldr	r2, [pc, #236]	@ (801673c <HAL_DMAEx_MultiBufferStart_IT+0x3dc>)
 8016650:	4293      	cmp	r3, r2
 8016652:	d04a      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8016654:	68fb      	ldr	r3, [r7, #12]
 8016656:	681b      	ldr	r3, [r3, #0]
 8016658:	4a39      	ldr	r2, [pc, #228]	@ (8016740 <HAL_DMAEx_MultiBufferStart_IT+0x3e0>)
 801665a:	4293      	cmp	r3, r2
 801665c:	d045      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801665e:	68fb      	ldr	r3, [r7, #12]
 8016660:	681b      	ldr	r3, [r3, #0]
 8016662:	4a38      	ldr	r2, [pc, #224]	@ (8016744 <HAL_DMAEx_MultiBufferStart_IT+0x3e4>)
 8016664:	4293      	cmp	r3, r2
 8016666:	d040      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8016668:	68fb      	ldr	r3, [r7, #12]
 801666a:	681b      	ldr	r3, [r3, #0]
 801666c:	4a36      	ldr	r2, [pc, #216]	@ (8016748 <HAL_DMAEx_MultiBufferStart_IT+0x3e8>)
 801666e:	4293      	cmp	r3, r2
 8016670:	d03b      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8016672:	68fb      	ldr	r3, [r7, #12]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	4a35      	ldr	r2, [pc, #212]	@ (801674c <HAL_DMAEx_MultiBufferStart_IT+0x3ec>)
 8016678:	4293      	cmp	r3, r2
 801667a:	d036      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801667c:	68fb      	ldr	r3, [r7, #12]
 801667e:	681b      	ldr	r3, [r3, #0]
 8016680:	4a33      	ldr	r2, [pc, #204]	@ (8016750 <HAL_DMAEx_MultiBufferStart_IT+0x3f0>)
 8016682:	4293      	cmp	r3, r2
 8016684:	d031      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8016686:	68fb      	ldr	r3, [r7, #12]
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	4a32      	ldr	r2, [pc, #200]	@ (8016754 <HAL_DMAEx_MultiBufferStart_IT+0x3f4>)
 801668c:	4293      	cmp	r3, r2
 801668e:	d02c      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 8016690:	68fb      	ldr	r3, [r7, #12]
 8016692:	681b      	ldr	r3, [r3, #0]
 8016694:	4a30      	ldr	r2, [pc, #192]	@ (8016758 <HAL_DMAEx_MultiBufferStart_IT+0x3f8>)
 8016696:	4293      	cmp	r3, r2
 8016698:	d027      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 801669a:	68fb      	ldr	r3, [r7, #12]
 801669c:	681b      	ldr	r3, [r3, #0]
 801669e:	4a2f      	ldr	r2, [pc, #188]	@ (801675c <HAL_DMAEx_MultiBufferStart_IT+0x3fc>)
 80166a0:	4293      	cmp	r3, r2
 80166a2:	d022      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166a4:	68fb      	ldr	r3, [r7, #12]
 80166a6:	681b      	ldr	r3, [r3, #0]
 80166a8:	4a2d      	ldr	r2, [pc, #180]	@ (8016760 <HAL_DMAEx_MultiBufferStart_IT+0x400>)
 80166aa:	4293      	cmp	r3, r2
 80166ac:	d01d      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166ae:	68fb      	ldr	r3, [r7, #12]
 80166b0:	681b      	ldr	r3, [r3, #0]
 80166b2:	4a2c      	ldr	r2, [pc, #176]	@ (8016764 <HAL_DMAEx_MultiBufferStart_IT+0x404>)
 80166b4:	4293      	cmp	r3, r2
 80166b6:	d018      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166b8:	68fb      	ldr	r3, [r7, #12]
 80166ba:	681b      	ldr	r3, [r3, #0]
 80166bc:	4a2a      	ldr	r2, [pc, #168]	@ (8016768 <HAL_DMAEx_MultiBufferStart_IT+0x408>)
 80166be:	4293      	cmp	r3, r2
 80166c0:	d013      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166c2:	68fb      	ldr	r3, [r7, #12]
 80166c4:	681b      	ldr	r3, [r3, #0]
 80166c6:	4a29      	ldr	r2, [pc, #164]	@ (801676c <HAL_DMAEx_MultiBufferStart_IT+0x40c>)
 80166c8:	4293      	cmp	r3, r2
 80166ca:	d00e      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166cc:	68fb      	ldr	r3, [r7, #12]
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	4a27      	ldr	r2, [pc, #156]	@ (8016770 <HAL_DMAEx_MultiBufferStart_IT+0x410>)
 80166d2:	4293      	cmp	r3, r2
 80166d4:	d009      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166d6:	68fb      	ldr	r3, [r7, #12]
 80166d8:	681b      	ldr	r3, [r3, #0]
 80166da:	4a26      	ldr	r2, [pc, #152]	@ (8016774 <HAL_DMAEx_MultiBufferStart_IT+0x414>)
 80166dc:	4293      	cmp	r3, r2
 80166de:	d004      	beq.n	80166ea <HAL_DMAEx_MultiBufferStart_IT+0x38a>
 80166e0:	68fb      	ldr	r3, [r7, #12]
 80166e2:	681b      	ldr	r3, [r3, #0]
 80166e4:	4a24      	ldr	r2, [pc, #144]	@ (8016778 <HAL_DMAEx_MultiBufferStart_IT+0x418>)
 80166e6:	4293      	cmp	r3, r2
 80166e8:	d101      	bne.n	80166ee <HAL_DMAEx_MultiBufferStart_IT+0x38e>
 80166ea:	2301      	movs	r3, #1
 80166ec:	e000      	b.n	80166f0 <HAL_DMAEx_MultiBufferStart_IT+0x390>
 80166ee:	2300      	movs	r3, #0
 80166f0:	2b00      	cmp	r3, #0
 80166f2:	d043      	beq.n	801677c <HAL_DMAEx_MultiBufferStart_IT+0x41c>
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((DMA_Stream_TypeDef   *)hdma->Instance)->CR, (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME | DMA_IT_HT), (DMA_IT_TC | DMA_IT_TE | DMA_IT_DME));
 80166f4:	68fb      	ldr	r3, [r7, #12]
 80166f6:	681b      	ldr	r3, [r3, #0]
 80166f8:	681b      	ldr	r3, [r3, #0]
 80166fa:	f023 021e 	bic.w	r2, r3, #30
 80166fe:	68fb      	ldr	r3, [r7, #12]
 8016700:	681b      	ldr	r3, [r3, #0]
 8016702:	f042 0216 	orr.w	r2, r2, #22
 8016706:	601a      	str	r2, [r3, #0]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->FCR |= DMA_IT_FE;
 8016708:	68fb      	ldr	r3, [r7, #12]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	695a      	ldr	r2, [r3, #20]
 801670e:	68fb      	ldr	r3, [r7, #12]
 8016710:	681b      	ldr	r3, [r3, #0]
 8016712:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8016716:	615a      	str	r2, [r3, #20]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016718:	68fb      	ldr	r3, [r7, #12]
 801671a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801671c:	2b00      	cmp	r3, #0
 801671e:	d103      	bne.n	8016728 <HAL_DMAEx_MultiBufferStart_IT+0x3c8>
 8016720:	68fb      	ldr	r3, [r7, #12]
 8016722:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016724:	2b00      	cmp	r3, #0
 8016726:	d043      	beq.n	80167b0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((DMA_Stream_TypeDef   *)hdma->Instance)->CR  |= DMA_IT_HT;
 8016728:	68fb      	ldr	r3, [r7, #12]
 801672a:	681b      	ldr	r3, [r3, #0]
 801672c:	681a      	ldr	r2, [r3, #0]
 801672e:	68fb      	ldr	r3, [r7, #12]
 8016730:	681b      	ldr	r3, [r3, #0]
 8016732:	f042 0208 	orr.w	r2, r2, #8
 8016736:	601a      	str	r2, [r3, #0]
 8016738:	e03a      	b.n	80167b0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
 801673a:	bf00      	nop
 801673c:	40020010 	.word	0x40020010
 8016740:	40020028 	.word	0x40020028
 8016744:	40020040 	.word	0x40020040
 8016748:	40020058 	.word	0x40020058
 801674c:	40020070 	.word	0x40020070
 8016750:	40020088 	.word	0x40020088
 8016754:	400200a0 	.word	0x400200a0
 8016758:	400200b8 	.word	0x400200b8
 801675c:	40020410 	.word	0x40020410
 8016760:	40020428 	.word	0x40020428
 8016764:	40020440 	.word	0x40020440
 8016768:	40020458 	.word	0x40020458
 801676c:	40020470 	.word	0x40020470
 8016770:	40020488 	.word	0x40020488
 8016774:	400204a0 	.word	0x400204a0
 8016778:	400204b8 	.word	0x400204b8
      }
    }
    else /* BDMA instance(s) */
    {
      /* Enable Common interrupts*/
      MODIFY_REG(((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR, (BDMA_CCR_TCIE | BDMA_CCR_HTIE | BDMA_CCR_TEIE), (BDMA_CCR_TCIE | BDMA_CCR_TEIE));
 801677c:	68fb      	ldr	r3, [r7, #12]
 801677e:	681b      	ldr	r3, [r3, #0]
 8016780:	681b      	ldr	r3, [r3, #0]
 8016782:	f023 020e 	bic.w	r2, r3, #14
 8016786:	68fb      	ldr	r3, [r7, #12]
 8016788:	681b      	ldr	r3, [r3, #0]
 801678a:	f042 020a 	orr.w	r2, r2, #10
 801678e:	601a      	str	r2, [r3, #0]

      if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8016790:	68fb      	ldr	r3, [r7, #12]
 8016792:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016794:	2b00      	cmp	r3, #0
 8016796:	d103      	bne.n	80167a0 <HAL_DMAEx_MultiBufferStart_IT+0x440>
 8016798:	68fb      	ldr	r3, [r7, #12]
 801679a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801679c:	2b00      	cmp	r3, #0
 801679e:	d007      	beq.n	80167b0 <HAL_DMAEx_MultiBufferStart_IT+0x450>
      {
        /*Enable Half Transfer IT if corresponding Callback is set*/
        ((BDMA_Channel_TypeDef   *)hdma->Instance)->CCR  |= BDMA_CCR_HTIE;
 80167a0:	68fb      	ldr	r3, [r7, #12]
 80167a2:	681b      	ldr	r3, [r3, #0]
 80167a4:	681a      	ldr	r2, [r3, #0]
 80167a6:	68fb      	ldr	r3, [r7, #12]
 80167a8:	681b      	ldr	r3, [r3, #0]
 80167aa:	f042 0204 	orr.w	r2, r2, #4
 80167ae:	601a      	str	r2, [r3, #0]
      }
    }

    if(IS_DMA_DMAMUX_ALL_INSTANCE(hdma->Instance) != 0U) /* No DMAMUX available for BDMA1 */
 80167b0:	68fb      	ldr	r3, [r7, #12]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	4a81      	ldr	r2, [pc, #516]	@ (80169bc <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80167b6:	4293      	cmp	r3, r2
 80167b8:	d072      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167ba:	68fb      	ldr	r3, [r7, #12]
 80167bc:	681b      	ldr	r3, [r3, #0]
 80167be:	4a80      	ldr	r2, [pc, #512]	@ (80169c0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80167c0:	4293      	cmp	r3, r2
 80167c2:	d06d      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167c4:	68fb      	ldr	r3, [r7, #12]
 80167c6:	681b      	ldr	r3, [r3, #0]
 80167c8:	4a7e      	ldr	r2, [pc, #504]	@ (80169c4 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80167ca:	4293      	cmp	r3, r2
 80167cc:	d068      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167ce:	68fb      	ldr	r3, [r7, #12]
 80167d0:	681b      	ldr	r3, [r3, #0]
 80167d2:	4a7d      	ldr	r2, [pc, #500]	@ (80169c8 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 80167d4:	4293      	cmp	r3, r2
 80167d6:	d063      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167d8:	68fb      	ldr	r3, [r7, #12]
 80167da:	681b      	ldr	r3, [r3, #0]
 80167dc:	4a7b      	ldr	r2, [pc, #492]	@ (80169cc <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 80167de:	4293      	cmp	r3, r2
 80167e0:	d05e      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167e2:	68fb      	ldr	r3, [r7, #12]
 80167e4:	681b      	ldr	r3, [r3, #0]
 80167e6:	4a7a      	ldr	r2, [pc, #488]	@ (80169d0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 80167e8:	4293      	cmp	r3, r2
 80167ea:	d059      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167ec:	68fb      	ldr	r3, [r7, #12]
 80167ee:	681b      	ldr	r3, [r3, #0]
 80167f0:	4a78      	ldr	r2, [pc, #480]	@ (80169d4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 80167f2:	4293      	cmp	r3, r2
 80167f4:	d054      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 80167f6:	68fb      	ldr	r3, [r7, #12]
 80167f8:	681b      	ldr	r3, [r3, #0]
 80167fa:	4a77      	ldr	r2, [pc, #476]	@ (80169d8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 80167fc:	4293      	cmp	r3, r2
 80167fe:	d04f      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016800:	68fb      	ldr	r3, [r7, #12]
 8016802:	681b      	ldr	r3, [r3, #0]
 8016804:	4a75      	ldr	r2, [pc, #468]	@ (80169dc <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8016806:	4293      	cmp	r3, r2
 8016808:	d04a      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801680a:	68fb      	ldr	r3, [r7, #12]
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	4a74      	ldr	r2, [pc, #464]	@ (80169e0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8016810:	4293      	cmp	r3, r2
 8016812:	d045      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016814:	68fb      	ldr	r3, [r7, #12]
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	4a72      	ldr	r2, [pc, #456]	@ (80169e4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801681a:	4293      	cmp	r3, r2
 801681c:	d040      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801681e:	68fb      	ldr	r3, [r7, #12]
 8016820:	681b      	ldr	r3, [r3, #0]
 8016822:	4a71      	ldr	r2, [pc, #452]	@ (80169e8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8016824:	4293      	cmp	r3, r2
 8016826:	d03b      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016828:	68fb      	ldr	r3, [r7, #12]
 801682a:	681b      	ldr	r3, [r3, #0]
 801682c:	4a6f      	ldr	r2, [pc, #444]	@ (80169ec <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801682e:	4293      	cmp	r3, r2
 8016830:	d036      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016832:	68fb      	ldr	r3, [r7, #12]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	4a6e      	ldr	r2, [pc, #440]	@ (80169f0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8016838:	4293      	cmp	r3, r2
 801683a:	d031      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801683c:	68fb      	ldr	r3, [r7, #12]
 801683e:	681b      	ldr	r3, [r3, #0]
 8016840:	4a6c      	ldr	r2, [pc, #432]	@ (80169f4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8016842:	4293      	cmp	r3, r2
 8016844:	d02c      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016846:	68fb      	ldr	r3, [r7, #12]
 8016848:	681b      	ldr	r3, [r3, #0]
 801684a:	4a6b      	ldr	r2, [pc, #428]	@ (80169f8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801684c:	4293      	cmp	r3, r2
 801684e:	d027      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016850:	68fb      	ldr	r3, [r7, #12]
 8016852:	681b      	ldr	r3, [r3, #0]
 8016854:	4a69      	ldr	r2, [pc, #420]	@ (80169fc <HAL_DMAEx_MultiBufferStart_IT+0x69c>)
 8016856:	4293      	cmp	r3, r2
 8016858:	d022      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801685a:	68fb      	ldr	r3, [r7, #12]
 801685c:	681b      	ldr	r3, [r3, #0]
 801685e:	4a68      	ldr	r2, [pc, #416]	@ (8016a00 <HAL_DMAEx_MultiBufferStart_IT+0x6a0>)
 8016860:	4293      	cmp	r3, r2
 8016862:	d01d      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016864:	68fb      	ldr	r3, [r7, #12]
 8016866:	681b      	ldr	r3, [r3, #0]
 8016868:	4a66      	ldr	r2, [pc, #408]	@ (8016a04 <HAL_DMAEx_MultiBufferStart_IT+0x6a4>)
 801686a:	4293      	cmp	r3, r2
 801686c:	d018      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801686e:	68fb      	ldr	r3, [r7, #12]
 8016870:	681b      	ldr	r3, [r3, #0]
 8016872:	4a65      	ldr	r2, [pc, #404]	@ (8016a08 <HAL_DMAEx_MultiBufferStart_IT+0x6a8>)
 8016874:	4293      	cmp	r3, r2
 8016876:	d013      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016878:	68fb      	ldr	r3, [r7, #12]
 801687a:	681b      	ldr	r3, [r3, #0]
 801687c:	4a63      	ldr	r2, [pc, #396]	@ (8016a0c <HAL_DMAEx_MultiBufferStart_IT+0x6ac>)
 801687e:	4293      	cmp	r3, r2
 8016880:	d00e      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016882:	68fb      	ldr	r3, [r7, #12]
 8016884:	681b      	ldr	r3, [r3, #0]
 8016886:	4a62      	ldr	r2, [pc, #392]	@ (8016a10 <HAL_DMAEx_MultiBufferStart_IT+0x6b0>)
 8016888:	4293      	cmp	r3, r2
 801688a:	d009      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 801688c:	68fb      	ldr	r3, [r7, #12]
 801688e:	681b      	ldr	r3, [r3, #0]
 8016890:	4a60      	ldr	r2, [pc, #384]	@ (8016a14 <HAL_DMAEx_MultiBufferStart_IT+0x6b4>)
 8016892:	4293      	cmp	r3, r2
 8016894:	d004      	beq.n	80168a0 <HAL_DMAEx_MultiBufferStart_IT+0x540>
 8016896:	68fb      	ldr	r3, [r7, #12]
 8016898:	681b      	ldr	r3, [r3, #0]
 801689a:	4a5f      	ldr	r2, [pc, #380]	@ (8016a18 <HAL_DMAEx_MultiBufferStart_IT+0x6b8>)
 801689c:	4293      	cmp	r3, r2
 801689e:	d101      	bne.n	80168a4 <HAL_DMAEx_MultiBufferStart_IT+0x544>
 80168a0:	2301      	movs	r3, #1
 80168a2:	e000      	b.n	80168a6 <HAL_DMAEx_MultiBufferStart_IT+0x546>
 80168a4:	2300      	movs	r3, #0
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d01a      	beq.n	80168e0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
    {
      /* Check if DMAMUX Synchronization is enabled*/
      if((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 80168aa:	68fb      	ldr	r3, [r7, #12]
 80168ac:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80168ae:	681b      	ldr	r3, [r3, #0]
 80168b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80168b4:	2b00      	cmp	r3, #0
 80168b6:	d007      	beq.n	80168c8 <HAL_DMAEx_MultiBufferStart_IT+0x568>
      {
        /* Enable DMAMUX sync overrun IT*/
        hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 80168b8:	68fb      	ldr	r3, [r7, #12]
 80168ba:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80168bc:	681a      	ldr	r2, [r3, #0]
 80168be:	68fb      	ldr	r3, [r7, #12]
 80168c0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80168c2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80168c6:	601a      	str	r2, [r3, #0]
      }

      if(hdma->DMAmuxRequestGen != 0U)
 80168c8:	68fb      	ldr	r3, [r7, #12]
 80168ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168cc:	2b00      	cmp	r3, #0
 80168ce:	d007      	beq.n	80168e0 <HAL_DMAEx_MultiBufferStart_IT+0x580>
      {
        /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
        /* enable the request gen overrun IT*/
        hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 80168d0:	68fb      	ldr	r3, [r7, #12]
 80168d2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168d4:	681a      	ldr	r2, [r3, #0]
 80168d6:	68fb      	ldr	r3, [r7, #12]
 80168d8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80168da:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80168de:	601a      	str	r2, [r3, #0]
      }
    }

    /* Enable the peripheral */
    __HAL_DMA_ENABLE(hdma);
 80168e0:	68fb      	ldr	r3, [r7, #12]
 80168e2:	681b      	ldr	r3, [r3, #0]
 80168e4:	4a35      	ldr	r2, [pc, #212]	@ (80169bc <HAL_DMAEx_MultiBufferStart_IT+0x65c>)
 80168e6:	4293      	cmp	r3, r2
 80168e8:	d04a      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	681b      	ldr	r3, [r3, #0]
 80168ee:	4a34      	ldr	r2, [pc, #208]	@ (80169c0 <HAL_DMAEx_MultiBufferStart_IT+0x660>)
 80168f0:	4293      	cmp	r3, r2
 80168f2:	d045      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80168f4:	68fb      	ldr	r3, [r7, #12]
 80168f6:	681b      	ldr	r3, [r3, #0]
 80168f8:	4a32      	ldr	r2, [pc, #200]	@ (80169c4 <HAL_DMAEx_MultiBufferStart_IT+0x664>)
 80168fa:	4293      	cmp	r3, r2
 80168fc:	d040      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	681b      	ldr	r3, [r3, #0]
 8016902:	4a31      	ldr	r2, [pc, #196]	@ (80169c8 <HAL_DMAEx_MultiBufferStart_IT+0x668>)
 8016904:	4293      	cmp	r3, r2
 8016906:	d03b      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016908:	68fb      	ldr	r3, [r7, #12]
 801690a:	681b      	ldr	r3, [r3, #0]
 801690c:	4a2f      	ldr	r2, [pc, #188]	@ (80169cc <HAL_DMAEx_MultiBufferStart_IT+0x66c>)
 801690e:	4293      	cmp	r3, r2
 8016910:	d036      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016912:	68fb      	ldr	r3, [r7, #12]
 8016914:	681b      	ldr	r3, [r3, #0]
 8016916:	4a2e      	ldr	r2, [pc, #184]	@ (80169d0 <HAL_DMAEx_MultiBufferStart_IT+0x670>)
 8016918:	4293      	cmp	r3, r2
 801691a:	d031      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801691c:	68fb      	ldr	r3, [r7, #12]
 801691e:	681b      	ldr	r3, [r3, #0]
 8016920:	4a2c      	ldr	r2, [pc, #176]	@ (80169d4 <HAL_DMAEx_MultiBufferStart_IT+0x674>)
 8016922:	4293      	cmp	r3, r2
 8016924:	d02c      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016926:	68fb      	ldr	r3, [r7, #12]
 8016928:	681b      	ldr	r3, [r3, #0]
 801692a:	4a2b      	ldr	r2, [pc, #172]	@ (80169d8 <HAL_DMAEx_MultiBufferStart_IT+0x678>)
 801692c:	4293      	cmp	r3, r2
 801692e:	d027      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016930:	68fb      	ldr	r3, [r7, #12]
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	4a29      	ldr	r2, [pc, #164]	@ (80169dc <HAL_DMAEx_MultiBufferStart_IT+0x67c>)
 8016936:	4293      	cmp	r3, r2
 8016938:	d022      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801693a:	68fb      	ldr	r3, [r7, #12]
 801693c:	681b      	ldr	r3, [r3, #0]
 801693e:	4a28      	ldr	r2, [pc, #160]	@ (80169e0 <HAL_DMAEx_MultiBufferStart_IT+0x680>)
 8016940:	4293      	cmp	r3, r2
 8016942:	d01d      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016944:	68fb      	ldr	r3, [r7, #12]
 8016946:	681b      	ldr	r3, [r3, #0]
 8016948:	4a26      	ldr	r2, [pc, #152]	@ (80169e4 <HAL_DMAEx_MultiBufferStart_IT+0x684>)
 801694a:	4293      	cmp	r3, r2
 801694c:	d018      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801694e:	68fb      	ldr	r3, [r7, #12]
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	4a25      	ldr	r2, [pc, #148]	@ (80169e8 <HAL_DMAEx_MultiBufferStart_IT+0x688>)
 8016954:	4293      	cmp	r3, r2
 8016956:	d013      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016958:	68fb      	ldr	r3, [r7, #12]
 801695a:	681b      	ldr	r3, [r3, #0]
 801695c:	4a23      	ldr	r2, [pc, #140]	@ (80169ec <HAL_DMAEx_MultiBufferStart_IT+0x68c>)
 801695e:	4293      	cmp	r3, r2
 8016960:	d00e      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016962:	68fb      	ldr	r3, [r7, #12]
 8016964:	681b      	ldr	r3, [r3, #0]
 8016966:	4a22      	ldr	r2, [pc, #136]	@ (80169f0 <HAL_DMAEx_MultiBufferStart_IT+0x690>)
 8016968:	4293      	cmp	r3, r2
 801696a:	d009      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 801696c:	68fb      	ldr	r3, [r7, #12]
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	4a20      	ldr	r2, [pc, #128]	@ (80169f4 <HAL_DMAEx_MultiBufferStart_IT+0x694>)
 8016972:	4293      	cmp	r3, r2
 8016974:	d004      	beq.n	8016980 <HAL_DMAEx_MultiBufferStart_IT+0x620>
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	681b      	ldr	r3, [r3, #0]
 801697a:	4a1f      	ldr	r2, [pc, #124]	@ (80169f8 <HAL_DMAEx_MultiBufferStart_IT+0x698>)
 801697c:	4293      	cmp	r3, r2
 801697e:	d108      	bne.n	8016992 <HAL_DMAEx_MultiBufferStart_IT+0x632>
 8016980:	68fb      	ldr	r3, [r7, #12]
 8016982:	681b      	ldr	r3, [r3, #0]
 8016984:	681a      	ldr	r2, [r3, #0]
 8016986:	68fb      	ldr	r3, [r7, #12]
 8016988:	681b      	ldr	r3, [r3, #0]
 801698a:	f042 0201 	orr.w	r2, r2, #1
 801698e:	601a      	str	r2, [r3, #0]
 8016990:	e00e      	b.n	80169b0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
 8016992:	68fb      	ldr	r3, [r7, #12]
 8016994:	681b      	ldr	r3, [r3, #0]
 8016996:	681a      	ldr	r2, [r3, #0]
 8016998:	68fb      	ldr	r3, [r7, #12]
 801699a:	681b      	ldr	r3, [r3, #0]
 801699c:	f042 0201 	orr.w	r2, r2, #1
 80169a0:	601a      	str	r2, [r3, #0]
 80169a2:	e005      	b.n	80169b0 <HAL_DMAEx_MultiBufferStart_IT+0x650>
  }
  else
  {
    /* Set the error code to busy */
    hdma->ErrorCode = HAL_DMA_ERROR_BUSY;
 80169a4:	68fb      	ldr	r3, [r7, #12]
 80169a6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80169aa:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Return error status */
    status = HAL_ERROR;
 80169ac:	2301      	movs	r3, #1
 80169ae:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80169b0:	7dfb      	ldrb	r3, [r7, #23]
}
 80169b2:	4618      	mov	r0, r3
 80169b4:	3718      	adds	r7, #24
 80169b6:	46bd      	mov	sp, r7
 80169b8:	bd80      	pop	{r7, pc}
 80169ba:	bf00      	nop
 80169bc:	40020010 	.word	0x40020010
 80169c0:	40020028 	.word	0x40020028
 80169c4:	40020040 	.word	0x40020040
 80169c8:	40020058 	.word	0x40020058
 80169cc:	40020070 	.word	0x40020070
 80169d0:	40020088 	.word	0x40020088
 80169d4:	400200a0 	.word	0x400200a0
 80169d8:	400200b8 	.word	0x400200b8
 80169dc:	40020410 	.word	0x40020410
 80169e0:	40020428 	.word	0x40020428
 80169e4:	40020440 	.word	0x40020440
 80169e8:	40020458 	.word	0x40020458
 80169ec:	40020470 	.word	0x40020470
 80169f0:	40020488 	.word	0x40020488
 80169f4:	400204a0 	.word	0x400204a0
 80169f8:	400204b8 	.word	0x400204b8
 80169fc:	58025408 	.word	0x58025408
 8016a00:	5802541c 	.word	0x5802541c
 8016a04:	58025430 	.word	0x58025430
 8016a08:	58025444 	.word	0x58025444
 8016a0c:	58025458 	.word	0x58025458
 8016a10:	5802546c 	.word	0x5802546c
 8016a14:	58025480 	.word	0x58025480
 8016a18:	58025494 	.word	0x58025494

08016a1c <HAL_DMAEx_ChangeMemory>:
  *         MEMORY1 and the MEMORY1 address can be changed only when the current
  *         transfer use MEMORY0.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMAEx_ChangeMemory(DMA_HandleTypeDef *hdma, uint32_t Address, HAL_DMA_MemoryTypeDef memory)
{
 8016a1c:	b480      	push	{r7}
 8016a1e:	b085      	sub	sp, #20
 8016a20:	af00      	add	r7, sp, #0
 8016a22:	60f8      	str	r0, [r7, #12]
 8016a24:	60b9      	str	r1, [r7, #8]
 8016a26:	4613      	mov	r3, r2
 8016a28:	71fb      	strb	r3, [r7, #7]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016a2a:	68fb      	ldr	r3, [r7, #12]
 8016a2c:	681b      	ldr	r3, [r3, #0]
 8016a2e:	4a39      	ldr	r2, [pc, #228]	@ (8016b14 <HAL_DMAEx_ChangeMemory+0xf8>)
 8016a30:	4293      	cmp	r3, r2
 8016a32:	d04a      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a34:	68fb      	ldr	r3, [r7, #12]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	4a37      	ldr	r2, [pc, #220]	@ (8016b18 <HAL_DMAEx_ChangeMemory+0xfc>)
 8016a3a:	4293      	cmp	r3, r2
 8016a3c:	d045      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a3e:	68fb      	ldr	r3, [r7, #12]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	4a36      	ldr	r2, [pc, #216]	@ (8016b1c <HAL_DMAEx_ChangeMemory+0x100>)
 8016a44:	4293      	cmp	r3, r2
 8016a46:	d040      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a48:	68fb      	ldr	r3, [r7, #12]
 8016a4a:	681b      	ldr	r3, [r3, #0]
 8016a4c:	4a34      	ldr	r2, [pc, #208]	@ (8016b20 <HAL_DMAEx_ChangeMemory+0x104>)
 8016a4e:	4293      	cmp	r3, r2
 8016a50:	d03b      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a52:	68fb      	ldr	r3, [r7, #12]
 8016a54:	681b      	ldr	r3, [r3, #0]
 8016a56:	4a33      	ldr	r2, [pc, #204]	@ (8016b24 <HAL_DMAEx_ChangeMemory+0x108>)
 8016a58:	4293      	cmp	r3, r2
 8016a5a:	d036      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a5c:	68fb      	ldr	r3, [r7, #12]
 8016a5e:	681b      	ldr	r3, [r3, #0]
 8016a60:	4a31      	ldr	r2, [pc, #196]	@ (8016b28 <HAL_DMAEx_ChangeMemory+0x10c>)
 8016a62:	4293      	cmp	r3, r2
 8016a64:	d031      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a66:	68fb      	ldr	r3, [r7, #12]
 8016a68:	681b      	ldr	r3, [r3, #0]
 8016a6a:	4a30      	ldr	r2, [pc, #192]	@ (8016b2c <HAL_DMAEx_ChangeMemory+0x110>)
 8016a6c:	4293      	cmp	r3, r2
 8016a6e:	d02c      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a70:	68fb      	ldr	r3, [r7, #12]
 8016a72:	681b      	ldr	r3, [r3, #0]
 8016a74:	4a2e      	ldr	r2, [pc, #184]	@ (8016b30 <HAL_DMAEx_ChangeMemory+0x114>)
 8016a76:	4293      	cmp	r3, r2
 8016a78:	d027      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a7a:	68fb      	ldr	r3, [r7, #12]
 8016a7c:	681b      	ldr	r3, [r3, #0]
 8016a7e:	4a2d      	ldr	r2, [pc, #180]	@ (8016b34 <HAL_DMAEx_ChangeMemory+0x118>)
 8016a80:	4293      	cmp	r3, r2
 8016a82:	d022      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a84:	68fb      	ldr	r3, [r7, #12]
 8016a86:	681b      	ldr	r3, [r3, #0]
 8016a88:	4a2b      	ldr	r2, [pc, #172]	@ (8016b38 <HAL_DMAEx_ChangeMemory+0x11c>)
 8016a8a:	4293      	cmp	r3, r2
 8016a8c:	d01d      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a8e:	68fb      	ldr	r3, [r7, #12]
 8016a90:	681b      	ldr	r3, [r3, #0]
 8016a92:	4a2a      	ldr	r2, [pc, #168]	@ (8016b3c <HAL_DMAEx_ChangeMemory+0x120>)
 8016a94:	4293      	cmp	r3, r2
 8016a96:	d018      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016a98:	68fb      	ldr	r3, [r7, #12]
 8016a9a:	681b      	ldr	r3, [r3, #0]
 8016a9c:	4a28      	ldr	r2, [pc, #160]	@ (8016b40 <HAL_DMAEx_ChangeMemory+0x124>)
 8016a9e:	4293      	cmp	r3, r2
 8016aa0:	d013      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016aa2:	68fb      	ldr	r3, [r7, #12]
 8016aa4:	681b      	ldr	r3, [r3, #0]
 8016aa6:	4a27      	ldr	r2, [pc, #156]	@ (8016b44 <HAL_DMAEx_ChangeMemory+0x128>)
 8016aa8:	4293      	cmp	r3, r2
 8016aaa:	d00e      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016aac:	68fb      	ldr	r3, [r7, #12]
 8016aae:	681b      	ldr	r3, [r3, #0]
 8016ab0:	4a25      	ldr	r2, [pc, #148]	@ (8016b48 <HAL_DMAEx_ChangeMemory+0x12c>)
 8016ab2:	4293      	cmp	r3, r2
 8016ab4:	d009      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016ab6:	68fb      	ldr	r3, [r7, #12]
 8016ab8:	681b      	ldr	r3, [r3, #0]
 8016aba:	4a24      	ldr	r2, [pc, #144]	@ (8016b4c <HAL_DMAEx_ChangeMemory+0x130>)
 8016abc:	4293      	cmp	r3, r2
 8016abe:	d004      	beq.n	8016aca <HAL_DMAEx_ChangeMemory+0xae>
 8016ac0:	68fb      	ldr	r3, [r7, #12]
 8016ac2:	681b      	ldr	r3, [r3, #0]
 8016ac4:	4a22      	ldr	r2, [pc, #136]	@ (8016b50 <HAL_DMAEx_ChangeMemory+0x134>)
 8016ac6:	4293      	cmp	r3, r2
 8016ac8:	d101      	bne.n	8016ace <HAL_DMAEx_ChangeMemory+0xb2>
 8016aca:	2301      	movs	r3, #1
 8016acc:	e000      	b.n	8016ad0 <HAL_DMAEx_ChangeMemory+0xb4>
 8016ace:	2300      	movs	r3, #0
 8016ad0:	2b00      	cmp	r3, #0
 8016ad2:	d00c      	beq.n	8016aee <HAL_DMAEx_ChangeMemory+0xd2>
  {
    if(memory == MEMORY0)
 8016ad4:	79fb      	ldrb	r3, [r7, #7]
 8016ad6:	2b00      	cmp	r3, #0
 8016ad8:	d104      	bne.n	8016ae4 <HAL_DMAEx_ChangeMemory+0xc8>
    {
      /* change the memory0 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = Address;
 8016ada:	68fb      	ldr	r3, [r7, #12]
 8016adc:	681b      	ldr	r3, [r3, #0]
 8016ade:	68ba      	ldr	r2, [r7, #8]
 8016ae0:	60da      	str	r2, [r3, #12]
 8016ae2:	e010      	b.n	8016b06 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M1AR = Address;
 8016ae4:	68fb      	ldr	r3, [r7, #12]
 8016ae6:	681b      	ldr	r3, [r3, #0]
 8016ae8:	68ba      	ldr	r2, [r7, #8]
 8016aea:	611a      	str	r2, [r3, #16]
 8016aec:	e00b      	b.n	8016b06 <HAL_DMAEx_ChangeMemory+0xea>
    }
  }
  else /* BDMA instance(s) */
  {
    if(memory == MEMORY0)
 8016aee:	79fb      	ldrb	r3, [r7, #7]
 8016af0:	2b00      	cmp	r3, #0
 8016af2:	d104      	bne.n	8016afe <HAL_DMAEx_ChangeMemory+0xe2>
    {
      /* change the memory0 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = Address;
 8016af4:	68fb      	ldr	r3, [r7, #12]
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	68ba      	ldr	r2, [r7, #8]
 8016afa:	60da      	str	r2, [r3, #12]
 8016afc:	e003      	b.n	8016b06 <HAL_DMAEx_ChangeMemory+0xea>
    }
    else
    {
      /* change the memory1 address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM1AR = Address;
 8016afe:	68fb      	ldr	r3, [r7, #12]
 8016b00:	681b      	ldr	r3, [r3, #0]
 8016b02:	68ba      	ldr	r2, [r7, #8]
 8016b04:	611a      	str	r2, [r3, #16]
    }
  }

  return HAL_OK;
 8016b06:	2300      	movs	r3, #0
}
 8016b08:	4618      	mov	r0, r3
 8016b0a:	3714      	adds	r7, #20
 8016b0c:	46bd      	mov	sp, r7
 8016b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b12:	4770      	bx	lr
 8016b14:	40020010 	.word	0x40020010
 8016b18:	40020028 	.word	0x40020028
 8016b1c:	40020040 	.word	0x40020040
 8016b20:	40020058 	.word	0x40020058
 8016b24:	40020070 	.word	0x40020070
 8016b28:	40020088 	.word	0x40020088
 8016b2c:	400200a0 	.word	0x400200a0
 8016b30:	400200b8 	.word	0x400200b8
 8016b34:	40020410 	.word	0x40020410
 8016b38:	40020428 	.word	0x40020428
 8016b3c:	40020440 	.word	0x40020440
 8016b40:	40020458 	.word	0x40020458
 8016b44:	40020470 	.word	0x40020470
 8016b48:	40020488 	.word	0x40020488
 8016b4c:	400204a0 	.word	0x400204a0
 8016b50:	400204b8 	.word	0x400204b8

08016b54 <DMA_MultiBufferSetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_MultiBufferSetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8016b54:	b480      	push	{r7}
 8016b56:	b085      	sub	sp, #20
 8016b58:	af00      	add	r7, sp, #0
 8016b5a:	60f8      	str	r0, [r7, #12]
 8016b5c:	60b9      	str	r1, [r7, #8]
 8016b5e:	607a      	str	r2, [r7, #4]
 8016b60:	603b      	str	r3, [r7, #0]
  if(IS_DMA_STREAM_INSTANCE(hdma->Instance) != 0U) /* DMA1 or DMA2 instance */
 8016b62:	68fb      	ldr	r3, [r7, #12]
 8016b64:	681b      	ldr	r3, [r3, #0]
 8016b66:	4a46      	ldr	r2, [pc, #280]	@ (8016c80 <DMA_MultiBufferSetConfig+0x12c>)
 8016b68:	4293      	cmp	r3, r2
 8016b6a:	d04a      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016b6c:	68fb      	ldr	r3, [r7, #12]
 8016b6e:	681b      	ldr	r3, [r3, #0]
 8016b70:	4a44      	ldr	r2, [pc, #272]	@ (8016c84 <DMA_MultiBufferSetConfig+0x130>)
 8016b72:	4293      	cmp	r3, r2
 8016b74:	d045      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016b76:	68fb      	ldr	r3, [r7, #12]
 8016b78:	681b      	ldr	r3, [r3, #0]
 8016b7a:	4a43      	ldr	r2, [pc, #268]	@ (8016c88 <DMA_MultiBufferSetConfig+0x134>)
 8016b7c:	4293      	cmp	r3, r2
 8016b7e:	d040      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016b80:	68fb      	ldr	r3, [r7, #12]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	4a41      	ldr	r2, [pc, #260]	@ (8016c8c <DMA_MultiBufferSetConfig+0x138>)
 8016b86:	4293      	cmp	r3, r2
 8016b88:	d03b      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016b8a:	68fb      	ldr	r3, [r7, #12]
 8016b8c:	681b      	ldr	r3, [r3, #0]
 8016b8e:	4a40      	ldr	r2, [pc, #256]	@ (8016c90 <DMA_MultiBufferSetConfig+0x13c>)
 8016b90:	4293      	cmp	r3, r2
 8016b92:	d036      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016b94:	68fb      	ldr	r3, [r7, #12]
 8016b96:	681b      	ldr	r3, [r3, #0]
 8016b98:	4a3e      	ldr	r2, [pc, #248]	@ (8016c94 <DMA_MultiBufferSetConfig+0x140>)
 8016b9a:	4293      	cmp	r3, r2
 8016b9c:	d031      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016b9e:	68fb      	ldr	r3, [r7, #12]
 8016ba0:	681b      	ldr	r3, [r3, #0]
 8016ba2:	4a3d      	ldr	r2, [pc, #244]	@ (8016c98 <DMA_MultiBufferSetConfig+0x144>)
 8016ba4:	4293      	cmp	r3, r2
 8016ba6:	d02c      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016ba8:	68fb      	ldr	r3, [r7, #12]
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	4a3b      	ldr	r2, [pc, #236]	@ (8016c9c <DMA_MultiBufferSetConfig+0x148>)
 8016bae:	4293      	cmp	r3, r2
 8016bb0:	d027      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bb2:	68fb      	ldr	r3, [r7, #12]
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	4a3a      	ldr	r2, [pc, #232]	@ (8016ca0 <DMA_MultiBufferSetConfig+0x14c>)
 8016bb8:	4293      	cmp	r3, r2
 8016bba:	d022      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bbc:	68fb      	ldr	r3, [r7, #12]
 8016bbe:	681b      	ldr	r3, [r3, #0]
 8016bc0:	4a38      	ldr	r2, [pc, #224]	@ (8016ca4 <DMA_MultiBufferSetConfig+0x150>)
 8016bc2:	4293      	cmp	r3, r2
 8016bc4:	d01d      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bc6:	68fb      	ldr	r3, [r7, #12]
 8016bc8:	681b      	ldr	r3, [r3, #0]
 8016bca:	4a37      	ldr	r2, [pc, #220]	@ (8016ca8 <DMA_MultiBufferSetConfig+0x154>)
 8016bcc:	4293      	cmp	r3, r2
 8016bce:	d018      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bd0:	68fb      	ldr	r3, [r7, #12]
 8016bd2:	681b      	ldr	r3, [r3, #0]
 8016bd4:	4a35      	ldr	r2, [pc, #212]	@ (8016cac <DMA_MultiBufferSetConfig+0x158>)
 8016bd6:	4293      	cmp	r3, r2
 8016bd8:	d013      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bda:	68fb      	ldr	r3, [r7, #12]
 8016bdc:	681b      	ldr	r3, [r3, #0]
 8016bde:	4a34      	ldr	r2, [pc, #208]	@ (8016cb0 <DMA_MultiBufferSetConfig+0x15c>)
 8016be0:	4293      	cmp	r3, r2
 8016be2:	d00e      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016be4:	68fb      	ldr	r3, [r7, #12]
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	4a32      	ldr	r2, [pc, #200]	@ (8016cb4 <DMA_MultiBufferSetConfig+0x160>)
 8016bea:	4293      	cmp	r3, r2
 8016bec:	d009      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bee:	68fb      	ldr	r3, [r7, #12]
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	4a31      	ldr	r2, [pc, #196]	@ (8016cb8 <DMA_MultiBufferSetConfig+0x164>)
 8016bf4:	4293      	cmp	r3, r2
 8016bf6:	d004      	beq.n	8016c02 <DMA_MultiBufferSetConfig+0xae>
 8016bf8:	68fb      	ldr	r3, [r7, #12]
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	4a2f      	ldr	r2, [pc, #188]	@ (8016cbc <DMA_MultiBufferSetConfig+0x168>)
 8016bfe:	4293      	cmp	r3, r2
 8016c00:	d101      	bne.n	8016c06 <DMA_MultiBufferSetConfig+0xb2>
 8016c02:	2301      	movs	r3, #1
 8016c04:	e000      	b.n	8016c08 <DMA_MultiBufferSetConfig+0xb4>
 8016c06:	2300      	movs	r3, #0
 8016c08:	2b00      	cmp	r3, #0
 8016c0a:	d019      	beq.n	8016c40 <DMA_MultiBufferSetConfig+0xec>
  {
    /* Configure DMA Stream data length */
    ((DMA_Stream_TypeDef   *)hdma->Instance)->NDTR = DataLength;
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	681b      	ldr	r3, [r3, #0]
 8016c10:	683a      	ldr	r2, [r7, #0]
 8016c12:	605a      	str	r2, [r3, #4]

    /* Peripheral to Memory */
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016c14:	68fb      	ldr	r3, [r7, #12]
 8016c16:	689b      	ldr	r3, [r3, #8]
 8016c18:	2b40      	cmp	r3, #64	@ 0x40
 8016c1a:	d108      	bne.n	8016c2e <DMA_MultiBufferSetConfig+0xda>
    {
      /* Configure DMA Stream destination address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = DstAddress;
 8016c1c:	68fb      	ldr	r3, [r7, #12]
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	687a      	ldr	r2, [r7, #4]
 8016c22:	609a      	str	r2, [r3, #8]

      /* Configure DMA Stream source address */
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = SrcAddress;
 8016c24:	68fb      	ldr	r3, [r7, #12]
 8016c26:	681b      	ldr	r3, [r3, #0]
 8016c28:	68ba      	ldr	r2, [r7, #8]
 8016c2a:	60da      	str	r2, [r3, #12]

      /* Configure DMA Stream destination address */
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
    }
  }
}
 8016c2c:	e021      	b.n	8016c72 <DMA_MultiBufferSetConfig+0x11e>
      ((DMA_Stream_TypeDef   *)hdma->Instance)->PAR = SrcAddress;
 8016c2e:	68fb      	ldr	r3, [r7, #12]
 8016c30:	681b      	ldr	r3, [r3, #0]
 8016c32:	68ba      	ldr	r2, [r7, #8]
 8016c34:	609a      	str	r2, [r3, #8]
      ((DMA_Stream_TypeDef   *)hdma->Instance)->M0AR = DstAddress;
 8016c36:	68fb      	ldr	r3, [r7, #12]
 8016c38:	681b      	ldr	r3, [r3, #0]
 8016c3a:	687a      	ldr	r2, [r7, #4]
 8016c3c:	60da      	str	r2, [r3, #12]
}
 8016c3e:	e018      	b.n	8016c72 <DMA_MultiBufferSetConfig+0x11e>
    ((BDMA_Channel_TypeDef   *)hdma->Instance)->CNDTR = DataLength;
 8016c40:	68fb      	ldr	r3, [r7, #12]
 8016c42:	681b      	ldr	r3, [r3, #0]
 8016c44:	683a      	ldr	r2, [r7, #0]
 8016c46:	605a      	str	r2, [r3, #4]
    if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8016c48:	68fb      	ldr	r3, [r7, #12]
 8016c4a:	689b      	ldr	r3, [r3, #8]
 8016c4c:	2b40      	cmp	r3, #64	@ 0x40
 8016c4e:	d108      	bne.n	8016c62 <DMA_MultiBufferSetConfig+0x10e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = DstAddress;
 8016c50:	68fb      	ldr	r3, [r7, #12]
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	687a      	ldr	r2, [r7, #4]
 8016c56:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = SrcAddress;
 8016c58:	68fb      	ldr	r3, [r7, #12]
 8016c5a:	681b      	ldr	r3, [r3, #0]
 8016c5c:	68ba      	ldr	r2, [r7, #8]
 8016c5e:	60da      	str	r2, [r3, #12]
}
 8016c60:	e007      	b.n	8016c72 <DMA_MultiBufferSetConfig+0x11e>
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CPAR = SrcAddress;
 8016c62:	68fb      	ldr	r3, [r7, #12]
 8016c64:	681b      	ldr	r3, [r3, #0]
 8016c66:	68ba      	ldr	r2, [r7, #8]
 8016c68:	609a      	str	r2, [r3, #8]
      ((BDMA_Channel_TypeDef   *)hdma->Instance)->CM0AR = DstAddress;
 8016c6a:	68fb      	ldr	r3, [r7, #12]
 8016c6c:	681b      	ldr	r3, [r3, #0]
 8016c6e:	687a      	ldr	r2, [r7, #4]
 8016c70:	60da      	str	r2, [r3, #12]
}
 8016c72:	bf00      	nop
 8016c74:	3714      	adds	r7, #20
 8016c76:	46bd      	mov	sp, r7
 8016c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016c7c:	4770      	bx	lr
 8016c7e:	bf00      	nop
 8016c80:	40020010 	.word	0x40020010
 8016c84:	40020028 	.word	0x40020028
 8016c88:	40020040 	.word	0x40020040
 8016c8c:	40020058 	.word	0x40020058
 8016c90:	40020070 	.word	0x40020070
 8016c94:	40020088 	.word	0x40020088
 8016c98:	400200a0 	.word	0x400200a0
 8016c9c:	400200b8 	.word	0x400200b8
 8016ca0:	40020410 	.word	0x40020410
 8016ca4:	40020428 	.word	0x40020428
 8016ca8:	40020440 	.word	0x40020440
 8016cac:	40020458 	.word	0x40020458
 8016cb0:	40020470 	.word	0x40020470
 8016cb4:	40020488 	.word	0x40020488
 8016cb8:	400204a0 	.word	0x400204a0
 8016cbc:	400204b8 	.word	0x400204b8

08016cc0 <DSI_ConfigPacketHeader>:
static void DSI_ConfigPacketHeader(DSI_TypeDef *DSIx,
                                   uint32_t ChannelID,
                                   uint32_t DataType,
                                   uint32_t Data0,
                                   uint32_t Data1)
{
 8016cc0:	b480      	push	{r7}
 8016cc2:	b085      	sub	sp, #20
 8016cc4:	af00      	add	r7, sp, #0
 8016cc6:	60f8      	str	r0, [r7, #12]
 8016cc8:	60b9      	str	r1, [r7, #8]
 8016cca:	607a      	str	r2, [r7, #4]
 8016ccc:	603b      	str	r3, [r7, #0]
  /* Update the DSI packet header with new information */
  DSIx->GHCR = (DataType | (ChannelID << 6U) | (Data0 << 8U) | (Data1 << 16U));
 8016cce:	68bb      	ldr	r3, [r7, #8]
 8016cd0:	019a      	lsls	r2, r3, #6
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	431a      	orrs	r2, r3
 8016cd6:	683b      	ldr	r3, [r7, #0]
 8016cd8:	021b      	lsls	r3, r3, #8
 8016cda:	431a      	orrs	r2, r3
 8016cdc:	69bb      	ldr	r3, [r7, #24]
 8016cde:	041b      	lsls	r3, r3, #16
 8016ce0:	431a      	orrs	r2, r3
 8016ce2:	68fb      	ldr	r3, [r7, #12]
 8016ce4:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8016ce6:	bf00      	nop
 8016ce8:	3714      	adds	r7, #20
 8016cea:	46bd      	mov	sp, r7
 8016cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016cf0:	4770      	bx	lr

08016cf2 <DSI_ShortWrite>:
static HAL_StatusTypeDef DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                        uint32_t ChannelID,
                                        uint32_t Mode,
                                        uint32_t Param1,
                                        uint32_t Param2)
{
 8016cf2:	b580      	push	{r7, lr}
 8016cf4:	b086      	sub	sp, #24
 8016cf6:	af00      	add	r7, sp, #0
 8016cf8:	60f8      	str	r0, [r7, #12]
 8016cfa:	60b9      	str	r1, [r7, #8]
 8016cfc:	607a      	str	r2, [r7, #4]
 8016cfe:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 8016d00:	f7fb fa3c 	bl	801217c <HAL_GetTick>
 8016d04:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8016d06:	e009      	b.n	8016d1c <DSI_ShortWrite+0x2a>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8016d08:	f7fb fa38 	bl	801217c <HAL_GetTick>
 8016d0c:	4602      	mov	r2, r0
 8016d0e:	697b      	ldr	r3, [r7, #20]
 8016d10:	1ad3      	subs	r3, r2, r3
 8016d12:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016d16:	d901      	bls.n	8016d1c <DSI_ShortWrite+0x2a>
    {
      return HAL_TIMEOUT;
 8016d18:	2303      	movs	r3, #3
 8016d1a:	e015      	b.n	8016d48 <DSI_ShortWrite+0x56>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 8016d1c:	68fb      	ldr	r3, [r7, #12]
 8016d1e:	681b      	ldr	r3, [r3, #0]
 8016d20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016d22:	f003 0301 	and.w	r3, r3, #1
 8016d26:	2b00      	cmp	r3, #0
 8016d28:	d0ee      	beq.n	8016d08 <DSI_ShortWrite+0x16>
    }
  }

  /* Configure the packet to send a short DCS command with 0 or 1 parameter */
  /* Update the DSI packet header with new information */
  hdsi->Instance->GHCR = (Mode | (ChannelID << 6U) | (Param1 << 8U) | (Param2 << 16U));
 8016d2a:	68bb      	ldr	r3, [r7, #8]
 8016d2c:	019a      	lsls	r2, r3, #6
 8016d2e:	687b      	ldr	r3, [r7, #4]
 8016d30:	431a      	orrs	r2, r3
 8016d32:	683b      	ldr	r3, [r7, #0]
 8016d34:	021b      	lsls	r3, r3, #8
 8016d36:	ea42 0103 	orr.w	r1, r2, r3
 8016d3a:	6a3b      	ldr	r3, [r7, #32]
 8016d3c:	041a      	lsls	r2, r3, #16
 8016d3e:	68fb      	ldr	r3, [r7, #12]
 8016d40:	681b      	ldr	r3, [r3, #0]
 8016d42:	430a      	orrs	r2, r1
 8016d44:	66da      	str	r2, [r3, #108]	@ 0x6c

  return HAL_OK;
 8016d46:	2300      	movs	r3, #0
}
 8016d48:	4618      	mov	r0, r3
 8016d4a:	3718      	adds	r7, #24
 8016d4c:	46bd      	mov	sp, r7
 8016d4e:	bd80      	pop	{r7, pc}

08016d50 <HAL_DSI_Init>:
  * @param  PLLInit  pointer to a DSI_PLLInitTypeDef structure that contains
  *                  the PLL Clock structure definition for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Init(DSI_HandleTypeDef *hdsi, DSI_PLLInitTypeDef *PLLInit)
{
 8016d50:	b580      	push	{r7, lr}
 8016d52:	b08a      	sub	sp, #40	@ 0x28
 8016d54:	af00      	add	r7, sp, #0
 8016d56:	6078      	str	r0, [r7, #4]
 8016d58:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t unitIntervalx4;
  uint32_t tempIDF;

  /* Check the DSI handle allocation */
  if (hdsi == NULL)
 8016d5a:	687b      	ldr	r3, [r7, #4]
 8016d5c:	2b00      	cmp	r3, #0
 8016d5e:	d101      	bne.n	8016d64 <HAL_DSI_Init+0x14>
  {
    return HAL_ERROR;
 8016d60:	2301      	movs	r3, #1
 8016d62:	e16c      	b.n	801703e <HAL_DSI_Init+0x2ee>
    }
    /* Initialize the low level hardware */
    hdsi->MspInitCallback(hdsi);
  }
#else
  if (hdsi->State == HAL_DSI_STATE_RESET)
 8016d64:	687b      	ldr	r3, [r7, #4]
 8016d66:	7c5b      	ldrb	r3, [r3, #17]
 8016d68:	b2db      	uxtb	r3, r3
 8016d6a:	2b00      	cmp	r3, #0
 8016d6c:	d102      	bne.n	8016d74 <HAL_DSI_Init+0x24>
  {
    /* Initialize the low level hardware */
    HAL_DSI_MspInit(hdsi);
 8016d6e:	6878      	ldr	r0, [r7, #4]
 8016d70:	f000 f96e 	bl	8017050 <HAL_DSI_MspInit>
  }
#endif /* USE_HAL_DSI_REGISTER_CALLBACKS */

  /* Change DSI peripheral state */
  hdsi->State = HAL_DSI_STATE_BUSY;
 8016d74:	687b      	ldr	r3, [r7, #4]
 8016d76:	2203      	movs	r2, #3
 8016d78:	745a      	strb	r2, [r3, #17]

  /**************** Turn on the regulator and enable the DSI PLL ****************/

  /* Enable the regulator */
  __HAL_DSI_REG_ENABLE(hdsi);
 8016d7a:	2300      	movs	r3, #0
 8016d7c:	61bb      	str	r3, [r7, #24]
 8016d7e:	687b      	ldr	r3, [r7, #4]
 8016d80:	681b      	ldr	r3, [r3, #0]
 8016d82:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8016d86:	687b      	ldr	r3, [r7, #4]
 8016d88:	681b      	ldr	r3, [r3, #0]
 8016d8a:	f042 7280 	orr.w	r2, r2, #16777216	@ 0x1000000
 8016d8e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8016d92:	687b      	ldr	r3, [r7, #4]
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8016d9a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8016d9e:	61bb      	str	r3, [r7, #24]
 8016da0:	69bb      	ldr	r3, [r7, #24]

  /* Get tick */
  tickstart = HAL_GetTick();
 8016da2:	f7fb f9eb 	bl	801217c <HAL_GetTick>
 8016da6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait until the regulator is ready */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8016da8:	e009      	b.n	8016dbe <HAL_DSI_Init+0x6e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8016daa:	f7fb f9e7 	bl	801217c <HAL_GetTick>
 8016dae:	4602      	mov	r2, r0
 8016db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016db2:	1ad3      	subs	r3, r2, r3
 8016db4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016db8:	d901      	bls.n	8016dbe <HAL_DSI_Init+0x6e>
    {
      return HAL_TIMEOUT;
 8016dba:	2303      	movs	r3, #3
 8016dbc:	e13f      	b.n	801703e <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_RRS) == 0U)
 8016dbe:	687b      	ldr	r3, [r7, #4]
 8016dc0:	681b      	ldr	r3, [r3, #0]
 8016dc2:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8016dc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8016dca:	2b00      	cmp	r3, #0
 8016dcc:	d0ed      	beq.n	8016daa <HAL_DSI_Init+0x5a>
    }
  }

  /* Set the PLL division factors */
  hdsi->Instance->WRPCR &= ~(DSI_WRPCR_PLL_NDIV | DSI_WRPCR_PLL_IDF | DSI_WRPCR_PLL_ODF);
 8016dce:	687b      	ldr	r3, [r7, #4]
 8016dd0:	681b      	ldr	r3, [r3, #0]
 8016dd2:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8016dd6:	687b      	ldr	r3, [r7, #4]
 8016dd8:	681a      	ldr	r2, [r3, #0]
 8016dda:	4b9b      	ldr	r3, [pc, #620]	@ (8017048 <HAL_DSI_Init+0x2f8>)
 8016ddc:	400b      	ands	r3, r1
 8016dde:	f8c2 3430 	str.w	r3, [r2, #1072]	@ 0x430
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8016de2:	687b      	ldr	r3, [r7, #4]
 8016de4:	681b      	ldr	r3, [r3, #0]
 8016de6:	f8d3 1430 	ldr.w	r1, [r3, #1072]	@ 0x430
 8016dea:	683b      	ldr	r3, [r7, #0]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	009a      	lsls	r2, r3, #2
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8016df0:	683b      	ldr	r3, [r7, #0]
 8016df2:	685b      	ldr	r3, [r3, #4]
 8016df4:	02db      	lsls	r3, r3, #11
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8016df6:	431a      	orrs	r2, r3
                            ((PLLInit->PLLODF) << DSI_WRPCR_PLL_ODF_Pos));
 8016df8:	683b      	ldr	r3, [r7, #0]
 8016dfa:	689b      	ldr	r3, [r3, #8]
 8016dfc:	041b      	lsls	r3, r3, #16
                            ((PLLInit->PLLIDF) << DSI_WRPCR_PLL_IDF_Pos) | \
 8016dfe:	431a      	orrs	r2, r3
  hdsi->Instance->WRPCR |= (((PLLInit->PLLNDIV) << DSI_WRPCR_PLL_NDIV_Pos) | \
 8016e00:	687b      	ldr	r3, [r7, #4]
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	430a      	orrs	r2, r1
 8016e06:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430

  /* Enable the DSI PLL */
  __HAL_DSI_PLL_ENABLE(hdsi);
 8016e0a:	2300      	movs	r3, #0
 8016e0c:	617b      	str	r3, [r7, #20]
 8016e0e:	687b      	ldr	r3, [r7, #4]
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	f8d3 2430 	ldr.w	r2, [r3, #1072]	@ 0x430
 8016e16:	687b      	ldr	r3, [r7, #4]
 8016e18:	681b      	ldr	r3, [r3, #0]
 8016e1a:	f042 0201 	orr.w	r2, r2, #1
 8016e1e:	f8c3 2430 	str.w	r2, [r3, #1072]	@ 0x430
 8016e22:	687b      	ldr	r3, [r7, #4]
 8016e24:	681b      	ldr	r3, [r3, #0]
 8016e26:	f8d3 3430 	ldr.w	r3, [r3, #1072]	@ 0x430
 8016e2a:	f003 0301 	and.w	r3, r3, #1
 8016e2e:	617b      	str	r3, [r7, #20]
 8016e30:	697b      	ldr	r3, [r7, #20]

  /* Requires min of 400us delay before reading the PLLLS flag */
  /* 1ms delay is inserted that is the minimum HAL delay granularity */
  HAL_Delay(1);
 8016e32:	2001      	movs	r0, #1
 8016e34:	f7fb f9ae 	bl	8012194 <HAL_Delay>

  /* Get tick */
  tickstart = HAL_GetTick();
 8016e38:	f7fb f9a0 	bl	801217c <HAL_GetTick>
 8016e3c:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Wait for the lock of the PLL */
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8016e3e:	e009      	b.n	8016e54 <HAL_DSI_Init+0x104>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8016e40:	f7fb f99c 	bl	801217c <HAL_GetTick>
 8016e44:	4602      	mov	r2, r0
 8016e46:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016e48:	1ad3      	subs	r3, r2, r3
 8016e4a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016e4e:	d901      	bls.n	8016e54 <HAL_DSI_Init+0x104>
    {
      return HAL_TIMEOUT;
 8016e50:	2303      	movs	r3, #3
 8016e52:	e0f4      	b.n	801703e <HAL_DSI_Init+0x2ee>
  while (__HAL_DSI_GET_FLAG(hdsi, DSI_FLAG_PLLLS) == 0U)
 8016e54:	687b      	ldr	r3, [r7, #4]
 8016e56:	681b      	ldr	r3, [r3, #0]
 8016e58:	f8d3 340c 	ldr.w	r3, [r3, #1036]	@ 0x40c
 8016e5c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016e60:	2b00      	cmp	r3, #0
 8016e62:	d0ed      	beq.n	8016e40 <HAL_DSI_Init+0xf0>
    }
  }

  __HAL_DSI_ENABLE(hdsi);
 8016e64:	2300      	movs	r3, #0
 8016e66:	613b      	str	r3, [r7, #16]
 8016e68:	687b      	ldr	r3, [r7, #4]
 8016e6a:	681b      	ldr	r3, [r3, #0]
 8016e6c:	685a      	ldr	r2, [r3, #4]
 8016e6e:	687b      	ldr	r3, [r7, #4]
 8016e70:	681b      	ldr	r3, [r3, #0]
 8016e72:	f042 0201 	orr.w	r2, r2, #1
 8016e76:	605a      	str	r2, [r3, #4]
 8016e78:	687b      	ldr	r3, [r7, #4]
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	685b      	ldr	r3, [r3, #4]
 8016e7e:	f003 0301 	and.w	r3, r3, #1
 8016e82:	613b      	str	r3, [r7, #16]
 8016e84:	693b      	ldr	r3, [r7, #16]

  /************************ Set the DSI clock parameters ************************/
  /* Set the TX escape clock division factor */
  hdsi->Instance->CCR &= ~DSI_CCR_TXECKDIV;
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	681b      	ldr	r3, [r3, #0]
 8016e8a:	689a      	ldr	r2, [r3, #8]
 8016e8c:	687b      	ldr	r3, [r7, #4]
 8016e8e:	681b      	ldr	r3, [r3, #0]
 8016e90:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8016e94:	609a      	str	r2, [r3, #8]
  hdsi->Instance->CCR |= hdsi->Init.TXEscapeCkdiv;
 8016e96:	687b      	ldr	r3, [r7, #4]
 8016e98:	681b      	ldr	r3, [r3, #0]
 8016e9a:	6899      	ldr	r1, [r3, #8]
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	689a      	ldr	r2, [r3, #8]
 8016ea0:	687b      	ldr	r3, [r7, #4]
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	430a      	orrs	r2, r1
 8016ea6:	609a      	str	r2, [r3, #8]

  /*************************** Set the PHY parameters ***************************/
  /* D-PHY clock and digital enable*/
  hdsi->Instance->PCTLR |= DSI_PCTLR_DEN;
 8016ea8:	687b      	ldr	r3, [r7, #4]
 8016eaa:	681b      	ldr	r3, [r3, #0]
 8016eac:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016eb0:	687b      	ldr	r3, [r7, #4]
 8016eb2:	681b      	ldr	r3, [r3, #0]
 8016eb4:	f042 0202 	orr.w	r2, r2, #2
 8016eb8:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0

  hdsi->Instance->PCTLR |= DSI_PCTLR_CKE;
 8016ebc:	687b      	ldr	r3, [r7, #4]
 8016ebe:	681b      	ldr	r3, [r3, #0]
 8016ec0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	@ 0xa0
 8016ec4:	687b      	ldr	r3, [r7, #4]
 8016ec6:	681b      	ldr	r3, [r3, #0]
 8016ec8:	f042 0204 	orr.w	r2, r2, #4
 8016ecc:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0


  /* Configure the number of active data lanes */
  hdsi->Instance->PCONFR &= ~DSI_PCONFR_NL;
 8016ed0:	687b      	ldr	r3, [r7, #4]
 8016ed2:	681b      	ldr	r3, [r3, #0]
 8016ed4:	f8d3 20a4 	ldr.w	r2, [r3, #164]	@ 0xa4
 8016ed8:	687b      	ldr	r3, [r7, #4]
 8016eda:	681b      	ldr	r3, [r3, #0]
 8016edc:	f022 0203 	bic.w	r2, r2, #3
 8016ee0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  hdsi->Instance->PCONFR |= hdsi->Init.NumberOfLanes;
 8016ee4:	687b      	ldr	r3, [r7, #4]
 8016ee6:	681b      	ldr	r3, [r3, #0]
 8016ee8:	f8d3 10a4 	ldr.w	r1, [r3, #164]	@ 0xa4
 8016eec:	687b      	ldr	r3, [r7, #4]
 8016eee:	68da      	ldr	r2, [r3, #12]
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	430a      	orrs	r2, r1
 8016ef6:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Get tick */
  tickstart = HAL_GetTick();
 8016efa:	f7fb f93f 	bl	801217c <HAL_GetTick>
 8016efe:	6278      	str	r0, [r7, #36]	@ 0x24
  if ((hdsi->Instance->PCONFR & DSI_PCONFR_NL) == DSI_ONE_DATA_LANE)
 8016f00:	687b      	ldr	r3, [r7, #4]
 8016f02:	681b      	ldr	r3, [r3, #0]
 8016f04:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 8016f08:	f003 0303 	and.w	r3, r3, #3
 8016f0c:	2b00      	cmp	r3, #0
 8016f0e:	d123      	bne.n	8016f58 <HAL_DSI_Init+0x208>
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8016f10:	e00c      	b.n	8016f2c <HAL_DSI_Init+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8016f12:	f7fb f933 	bl	801217c <HAL_GetTick>
 8016f16:	4602      	mov	r2, r0
 8016f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f1a:	1ad3      	subs	r3, r2, r3
 8016f1c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016f20:	d904      	bls.n	8016f2c <HAL_DSI_Init+0x1dc>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8016f22:	687b      	ldr	r3, [r7, #4]
 8016f24:	2200      	movs	r2, #0
 8016f26:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8016f28:	2303      	movs	r3, #3
 8016f2a:	e088      	b.n	801703e <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | DSI_PSR_PSSC))
 8016f2c:	687b      	ldr	r3, [r7, #4]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016f34:	f003 0314 	and.w	r3, r3, #20
 8016f38:	2b14      	cmp	r3, #20
 8016f3a:	d1ea      	bne.n	8016f12 <HAL_DSI_Init+0x1c2>
 8016f3c:	e014      	b.n	8016f68 <HAL_DSI_Init+0x218>
  else
  {
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
                                                                                    DSI_PSR_PSS1 | DSI_PSR_PSSC))
    {
      if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 8016f3e:	f7fb f91d 	bl	801217c <HAL_GetTick>
 8016f42:	4602      	mov	r2, r0
 8016f44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016f46:	1ad3      	subs	r3, r2, r3
 8016f48:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8016f4c:	d904      	bls.n	8016f58 <HAL_DSI_Init+0x208>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8016f4e:	687b      	ldr	r3, [r7, #4]
 8016f50:	2200      	movs	r2, #0
 8016f52:	741a      	strb	r2, [r3, #16]

        return HAL_TIMEOUT;
 8016f54:	2303      	movs	r3, #3
 8016f56:	e072      	b.n	801703e <HAL_DSI_Init+0x2ee>
    while ((hdsi->Instance->PSR & (DSI_PSR_PSS0 | DSI_PSR_PSS1 | DSI_PSR_PSSC)) != (DSI_PSR_PSS0 | \
 8016f58:	687b      	ldr	r3, [r7, #4]
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 8016f60:	f003 0394 	and.w	r3, r3, #148	@ 0x94
 8016f64:	2b94      	cmp	r3, #148	@ 0x94
 8016f66:	d1ea      	bne.n	8016f3e <HAL_DSI_Init+0x1ee>
  }

  /* Calculate the bit period in high-speed mode in unit of 0.25 ns (UIX4) */
  /* The equation is : UIX4 = IntegerPart( (1000/F_PHY_Mhz) * 4 )          */
  /* Where : F_PHY_Mhz = (NDIV * HSE_Mhz) / (IDF * ODF)                    */
  tempIDF = (PLLInit->PLLIDF > 0U) ? PLLInit->PLLIDF : 1U;
 8016f68:	683b      	ldr	r3, [r7, #0]
 8016f6a:	685b      	ldr	r3, [r3, #4]
 8016f6c:	2b00      	cmp	r3, #0
 8016f6e:	d002      	beq.n	8016f76 <HAL_DSI_Init+0x226>
 8016f70:	683b      	ldr	r3, [r7, #0]
 8016f72:	685b      	ldr	r3, [r3, #4]
 8016f74:	e000      	b.n	8016f78 <HAL_DSI_Init+0x228>
 8016f76:	2301      	movs	r3, #1
 8016f78:	623b      	str	r3, [r7, #32]
  unitIntervalx4 = (4000000U * tempIDF * ((1UL << (0x3U & PLLInit->PLLODF)))) / ((HSE_VALUE / 1000U) * PLLInit->PLLNDIV);
 8016f7a:	6a3b      	ldr	r3, [r7, #32]
 8016f7c:	4a33      	ldr	r2, [pc, #204]	@ (801704c <HAL_DSI_Init+0x2fc>)
 8016f7e:	fb03 f202 	mul.w	r2, r3, r2
 8016f82:	683b      	ldr	r3, [r7, #0]
 8016f84:	689b      	ldr	r3, [r3, #8]
 8016f86:	f003 0303 	and.w	r3, r3, #3
 8016f8a:	409a      	lsls	r2, r3
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	681b      	ldr	r3, [r3, #0]
 8016f90:	f246 11a8 	movw	r1, #25000	@ 0x61a8
 8016f94:	fb01 f303 	mul.w	r3, r1, r3
 8016f98:	fbb2 f3f3 	udiv	r3, r2, r3
 8016f9c:	61fb      	str	r3, [r7, #28]

  /* Set the bit period in high-speed mode */
  hdsi->Instance->WPCR[0U] &= ~DSI_WPCR0_UIX4;
 8016f9e:	687b      	ldr	r3, [r7, #4]
 8016fa0:	681b      	ldr	r3, [r3, #0]
 8016fa2:	f8d3 2418 	ldr.w	r2, [r3, #1048]	@ 0x418
 8016fa6:	687b      	ldr	r3, [r7, #4]
 8016fa8:	681b      	ldr	r3, [r3, #0]
 8016faa:	f022 023f 	bic.w	r2, r2, #63	@ 0x3f
 8016fae:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418
  hdsi->Instance->WPCR[0U] |= unitIntervalx4;
 8016fb2:	687b      	ldr	r3, [r7, #4]
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	f8d3 1418 	ldr.w	r1, [r3, #1048]	@ 0x418
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	69fa      	ldr	r2, [r7, #28]
 8016fc0:	430a      	orrs	r2, r1
 8016fc2:	f8c3 2418 	str.w	r2, [r3, #1048]	@ 0x418

  /****************************** Error management *****************************/

  /* Disable all error interrupts and reset the Error Mask */
  hdsi->Instance->IER[0U] = 0U;
 8016fc6:	687b      	ldr	r3, [r7, #4]
 8016fc8:	681b      	ldr	r3, [r3, #0]
 8016fca:	2200      	movs	r2, #0
 8016fcc:	f8c3 20c4 	str.w	r2, [r3, #196]	@ 0xc4
  hdsi->Instance->IER[1U] = 0U;
 8016fd0:	687b      	ldr	r3, [r7, #4]
 8016fd2:	681b      	ldr	r3, [r3, #0]
 8016fd4:	2200      	movs	r2, #0
 8016fd6:	f8c3 20c8 	str.w	r2, [r3, #200]	@ 0xc8
  hdsi->ErrorMsk = 0U;
 8016fda:	687b      	ldr	r3, [r7, #4]
 8016fdc:	2200      	movs	r2, #0
 8016fde:	619a      	str	r2, [r3, #24]

  __HAL_DSI_DISABLE(hdsi);
 8016fe0:	2300      	movs	r3, #0
 8016fe2:	60fb      	str	r3, [r7, #12]
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	681b      	ldr	r3, [r3, #0]
 8016fe8:	685a      	ldr	r2, [r3, #4]
 8016fea:	687b      	ldr	r3, [r7, #4]
 8016fec:	681b      	ldr	r3, [r3, #0]
 8016fee:	f022 0201 	bic.w	r2, r2, #1
 8016ff2:	605a      	str	r2, [r3, #4]
 8016ff4:	687b      	ldr	r3, [r7, #4]
 8016ff6:	681b      	ldr	r3, [r3, #0]
 8016ff8:	685b      	ldr	r3, [r3, #4]
 8016ffa:	f003 0301 	and.w	r3, r3, #1
 8016ffe:	60fb      	str	r3, [r7, #12]
 8017000:	68fb      	ldr	r3, [r7, #12]

  /* Clock lane configuration */
  hdsi->Instance->CLCR &= ~(DSI_CLCR_DPCC | DSI_CLCR_ACR);
 8017002:	687b      	ldr	r3, [r7, #4]
 8017004:	681b      	ldr	r3, [r3, #0]
 8017006:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	f022 0203 	bic.w	r2, r2, #3
 8017012:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  hdsi->Instance->CLCR |= (DSI_CLCR_DPCC | hdsi->Init.AutomaticClockLaneControl);
 8017016:	687b      	ldr	r3, [r7, #4]
 8017018:	681b      	ldr	r3, [r3, #0]
 801701a:	f8d3 2094 	ldr.w	r2, [r3, #148]	@ 0x94
 801701e:	687b      	ldr	r3, [r7, #4]
 8017020:	685b      	ldr	r3, [r3, #4]
 8017022:	431a      	orrs	r2, r3
 8017024:	687b      	ldr	r3, [r7, #4]
 8017026:	681b      	ldr	r3, [r3, #0]
 8017028:	f042 0201 	orr.w	r2, r2, #1
 801702c:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the error code */
  hdsi->ErrorCode = HAL_DSI_ERROR_NONE;
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	2200      	movs	r2, #0
 8017034:	615a      	str	r2, [r3, #20]

  /* Initialize the DSI state*/
  hdsi->State = HAL_DSI_STATE_READY;
 8017036:	687b      	ldr	r3, [r7, #4]
 8017038:	2201      	movs	r2, #1
 801703a:	745a      	strb	r2, [r3, #17]

  return HAL_OK;
 801703c:	2300      	movs	r3, #0
}
 801703e:	4618      	mov	r0, r3
 8017040:	3728      	adds	r7, #40	@ 0x28
 8017042:	46bd      	mov	sp, r7
 8017044:	bd80      	pop	{r7, pc}
 8017046:	bf00      	nop
 8017048:	fffc8603 	.word	0xfffc8603
 801704c:	003d0900 	.word	0x003d0900

08017050 <HAL_DSI_MspInit>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval None
  */
__weak void HAL_DSI_MspInit(DSI_HandleTypeDef *hdsi)
{
 8017050:	b480      	push	{r7}
 8017052:	b083      	sub	sp, #12
 8017054:	af00      	add	r7, sp, #0
 8017056:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hdsi);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_DSI_MspInit could be implemented in the user file
   */
}
 8017058:	bf00      	nop
 801705a:	370c      	adds	r7, #12
 801705c:	46bd      	mov	sp, r7
 801705e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017062:	4770      	bx	lr

08017064 <HAL_DSI_ConfigVideoMode>:
  * @param  VidCfg pointer to a DSI_VidCfgTypeDef structure that contains
  *                the DSI video mode configuration parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigVideoMode(DSI_HandleTypeDef *hdsi, DSI_VidCfgTypeDef *VidCfg)
{
 8017064:	b480      	push	{r7}
 8017066:	b083      	sub	sp, #12
 8017068:	af00      	add	r7, sp, #0
 801706a:	6078      	str	r0, [r7, #4]
 801706c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	7c1b      	ldrb	r3, [r3, #16]
 8017072:	2b01      	cmp	r3, #1
 8017074:	d101      	bne.n	801707a <HAL_DSI_ConfigVideoMode+0x16>
 8017076:	2302      	movs	r3, #2
 8017078:	e1ee      	b.n	8017458 <HAL_DSI_ConfigVideoMode+0x3f4>
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	2201      	movs	r2, #1
 801707e:	741a      	strb	r2, [r3, #16]
  {
    assert_param(IS_DSI_LOOSELY_PACKED(VidCfg->LooselyPacked));
  }

  /* Select video mode by resetting CMDM and DSIM bits */
  hdsi->Instance->MCR &= ~DSI_MCR_CMDM;
 8017080:	687b      	ldr	r3, [r7, #4]
 8017082:	681b      	ldr	r3, [r3, #0]
 8017084:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	f022 0201 	bic.w	r2, r2, #1
 801708e:	635a      	str	r2, [r3, #52]	@ 0x34
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_DSIM;
 8017090:	687b      	ldr	r3, [r7, #4]
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 8017098:	687b      	ldr	r3, [r7, #4]
 801709a:	681b      	ldr	r3, [r3, #0]
 801709c:	f022 0201 	bic.w	r2, r2, #1
 80170a0:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Configure the video mode transmission type */
  hdsi->Instance->VMCR &= ~DSI_VMCR_VMT;
 80170a4:	687b      	ldr	r3, [r7, #4]
 80170a6:	681b      	ldr	r3, [r3, #0]
 80170a8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80170aa:	687b      	ldr	r3, [r7, #4]
 80170ac:	681b      	ldr	r3, [r3, #0]
 80170ae:	f022 0203 	bic.w	r2, r2, #3
 80170b2:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->Mode;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80170ba:	683b      	ldr	r3, [r7, #0]
 80170bc:	68da      	ldr	r2, [r3, #12]
 80170be:	687b      	ldr	r3, [r7, #4]
 80170c0:	681b      	ldr	r3, [r3, #0]
 80170c2:	430a      	orrs	r2, r1
 80170c4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Configure the video packet size */
  hdsi->Instance->VPCR &= ~DSI_VPCR_VPSIZE;
 80170c6:	687b      	ldr	r3, [r7, #4]
 80170c8:	681b      	ldr	r3, [r3, #0]
 80170ca:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80170cc:	687b      	ldr	r3, [r7, #4]
 80170ce:	681a      	ldr	r2, [r3, #0]
 80170d0:	4b8b      	ldr	r3, [pc, #556]	@ (8017300 <HAL_DSI_ConfigVideoMode+0x29c>)
 80170d2:	400b      	ands	r3, r1
 80170d4:	63d3      	str	r3, [r2, #60]	@ 0x3c
  hdsi->Instance->VPCR |= VidCfg->PacketSize;
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	681b      	ldr	r3, [r3, #0]
 80170da:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 80170dc:	683b      	ldr	r3, [r7, #0]
 80170de:	691a      	ldr	r2, [r3, #16]
 80170e0:	687b      	ldr	r3, [r7, #4]
 80170e2:	681b      	ldr	r3, [r3, #0]
 80170e4:	430a      	orrs	r2, r1
 80170e6:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Set the chunks number to be transmitted through the DSI link */
  hdsi->Instance->VCCR &= ~DSI_VCCR_NUMC;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	681b      	ldr	r3, [r3, #0]
 80170ec:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80170ee:	687b      	ldr	r3, [r7, #4]
 80170f0:	681a      	ldr	r2, [r3, #0]
 80170f2:	4b84      	ldr	r3, [pc, #528]	@ (8017304 <HAL_DSI_ConfigVideoMode+0x2a0>)
 80170f4:	400b      	ands	r3, r1
 80170f6:	6413      	str	r3, [r2, #64]	@ 0x40
  hdsi->Instance->VCCR |= VidCfg->NumberOfChunks;
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	681b      	ldr	r3, [r3, #0]
 80170fc:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80170fe:	683b      	ldr	r3, [r7, #0]
 8017100:	695a      	ldr	r2, [r3, #20]
 8017102:	687b      	ldr	r3, [r7, #4]
 8017104:	681b      	ldr	r3, [r3, #0]
 8017106:	430a      	orrs	r2, r1
 8017108:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Set the size of the null packet */
  hdsi->Instance->VNPCR &= ~DSI_VNPCR_NPSIZE;
 801710a:	687b      	ldr	r3, [r7, #4]
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8017110:	687b      	ldr	r3, [r7, #4]
 8017112:	681a      	ldr	r2, [r3, #0]
 8017114:	4b7b      	ldr	r3, [pc, #492]	@ (8017304 <HAL_DSI_ConfigVideoMode+0x2a0>)
 8017116:	400b      	ands	r3, r1
 8017118:	6453      	str	r3, [r2, #68]	@ 0x44
  hdsi->Instance->VNPCR |= VidCfg->NullPacketSize;
 801711a:	687b      	ldr	r3, [r7, #4]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	6c59      	ldr	r1, [r3, #68]	@ 0x44
 8017120:	683b      	ldr	r3, [r7, #0]
 8017122:	699a      	ldr	r2, [r3, #24]
 8017124:	687b      	ldr	r3, [r7, #4]
 8017126:	681b      	ldr	r3, [r3, #0]
 8017128:	430a      	orrs	r2, r1
 801712a:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Select the virtual channel for the LTDC interface traffic */
  hdsi->Instance->LVCIDR &= ~DSI_LVCIDR_VCID;
 801712c:	687b      	ldr	r3, [r7, #4]
 801712e:	681b      	ldr	r3, [r3, #0]
 8017130:	68da      	ldr	r2, [r3, #12]
 8017132:	687b      	ldr	r3, [r7, #4]
 8017134:	681b      	ldr	r3, [r3, #0]
 8017136:	f022 0203 	bic.w	r2, r2, #3
 801713a:	60da      	str	r2, [r3, #12]
  hdsi->Instance->LVCIDR |= VidCfg->VirtualChannelID;
 801713c:	687b      	ldr	r3, [r7, #4]
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	68d9      	ldr	r1, [r3, #12]
 8017142:	683b      	ldr	r3, [r7, #0]
 8017144:	681a      	ldr	r2, [r3, #0]
 8017146:	687b      	ldr	r3, [r7, #4]
 8017148:	681b      	ldr	r3, [r3, #0]
 801714a:	430a      	orrs	r2, r1
 801714c:	60da      	str	r2, [r3, #12]

  /* Configure the polarity of control signals */
  hdsi->Instance->LPCR &= ~(DSI_LPCR_DEP | DSI_LPCR_VSP | DSI_LPCR_HSP);
 801714e:	687b      	ldr	r3, [r7, #4]
 8017150:	681b      	ldr	r3, [r3, #0]
 8017152:	695a      	ldr	r2, [r3, #20]
 8017154:	687b      	ldr	r3, [r7, #4]
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	f022 0207 	bic.w	r2, r2, #7
 801715c:	615a      	str	r2, [r3, #20]
  hdsi->Instance->LPCR |= (VidCfg->DEPolarity | VidCfg->VSPolarity | VidCfg->HSPolarity);
 801715e:	687b      	ldr	r3, [r7, #4]
 8017160:	681b      	ldr	r3, [r3, #0]
 8017162:	6959      	ldr	r1, [r3, #20]
 8017164:	683b      	ldr	r3, [r7, #0]
 8017166:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8017168:	683b      	ldr	r3, [r7, #0]
 801716a:	6a1b      	ldr	r3, [r3, #32]
 801716c:	431a      	orrs	r2, r3
 801716e:	683b      	ldr	r3, [r7, #0]
 8017170:	69db      	ldr	r3, [r3, #28]
 8017172:	431a      	orrs	r2, r3
 8017174:	687b      	ldr	r3, [r7, #4]
 8017176:	681b      	ldr	r3, [r3, #0]
 8017178:	430a      	orrs	r2, r1
 801717a:	615a      	str	r2, [r3, #20]

  /* Select the color coding for the host */
  hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_COLC;
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	691a      	ldr	r2, [r3, #16]
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	681b      	ldr	r3, [r3, #0]
 8017186:	f022 020f 	bic.w	r2, r2, #15
 801718a:	611a      	str	r2, [r3, #16]
  hdsi->Instance->LCOLCR |= VidCfg->ColorCoding;
 801718c:	687b      	ldr	r3, [r7, #4]
 801718e:	681b      	ldr	r3, [r3, #0]
 8017190:	6919      	ldr	r1, [r3, #16]
 8017192:	683b      	ldr	r3, [r7, #0]
 8017194:	685a      	ldr	r2, [r3, #4]
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	681b      	ldr	r3, [r3, #0]
 801719a:	430a      	orrs	r2, r1
 801719c:	611a      	str	r2, [r3, #16]

  /* Select the color coding for the wrapper */
  hdsi->Instance->WCFGR &= ~DSI_WCFGR_COLMUX;
 801719e:	687b      	ldr	r3, [r7, #4]
 80171a0:	681b      	ldr	r3, [r3, #0]
 80171a2:	f8d3 2400 	ldr.w	r2, [r3, #1024]	@ 0x400
 80171a6:	687b      	ldr	r3, [r7, #4]
 80171a8:	681b      	ldr	r3, [r3, #0]
 80171aa:	f022 020e 	bic.w	r2, r2, #14
 80171ae:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400
  hdsi->Instance->WCFGR |= ((VidCfg->ColorCoding) << 1U);
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	681b      	ldr	r3, [r3, #0]
 80171b6:	f8d3 1400 	ldr.w	r1, [r3, #1024]	@ 0x400
 80171ba:	683b      	ldr	r3, [r7, #0]
 80171bc:	685b      	ldr	r3, [r3, #4]
 80171be:	005a      	lsls	r2, r3, #1
 80171c0:	687b      	ldr	r3, [r7, #4]
 80171c2:	681b      	ldr	r3, [r3, #0]
 80171c4:	430a      	orrs	r2, r1
 80171c6:	f8c3 2400 	str.w	r2, [r3, #1024]	@ 0x400

  /* Enable/disable the loosely packed variant to 18-bit configuration */
  if (VidCfg->ColorCoding == DSI_RGB666)
 80171ca:	683b      	ldr	r3, [r7, #0]
 80171cc:	685b      	ldr	r3, [r3, #4]
 80171ce:	2b03      	cmp	r3, #3
 80171d0:	d110      	bne.n	80171f4 <HAL_DSI_ConfigVideoMode+0x190>
  {
    hdsi->Instance->LCOLCR &= ~DSI_LCOLCR_LPE;
 80171d2:	687b      	ldr	r3, [r7, #4]
 80171d4:	681b      	ldr	r3, [r3, #0]
 80171d6:	691a      	ldr	r2, [r3, #16]
 80171d8:	687b      	ldr	r3, [r7, #4]
 80171da:	681b      	ldr	r3, [r3, #0]
 80171dc:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80171e0:	611a      	str	r2, [r3, #16]
    hdsi->Instance->LCOLCR |= VidCfg->LooselyPacked;
 80171e2:	687b      	ldr	r3, [r7, #4]
 80171e4:	681b      	ldr	r3, [r3, #0]
 80171e6:	6919      	ldr	r1, [r3, #16]
 80171e8:	683b      	ldr	r3, [r7, #0]
 80171ea:	689a      	ldr	r2, [r3, #8]
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	681b      	ldr	r3, [r3, #0]
 80171f0:	430a      	orrs	r2, r1
 80171f2:	611a      	str	r2, [r3, #16]
  }

  /* Set the Horizontal Synchronization Active (HSA) in lane byte clock cycles */
  hdsi->Instance->VHSACR &= ~DSI_VHSACR_HSA;
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	681b      	ldr	r3, [r3, #0]
 80171f8:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 80171fa:	687b      	ldr	r3, [r7, #4]
 80171fc:	681a      	ldr	r2, [r3, #0]
 80171fe:	4b42      	ldr	r3, [pc, #264]	@ (8017308 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8017200:	400b      	ands	r3, r1
 8017202:	6493      	str	r3, [r2, #72]	@ 0x48
  hdsi->Instance->VHSACR |= VidCfg->HorizontalSyncActive;
 8017204:	687b      	ldr	r3, [r7, #4]
 8017206:	681b      	ldr	r3, [r3, #0]
 8017208:	6c99      	ldr	r1, [r3, #72]	@ 0x48
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801720e:	687b      	ldr	r3, [r7, #4]
 8017210:	681b      	ldr	r3, [r3, #0]
 8017212:	430a      	orrs	r2, r1
 8017214:	649a      	str	r2, [r3, #72]	@ 0x48

  /* Set the Horizontal Back Porch (HBP) in lane byte clock cycles */
  hdsi->Instance->VHBPCR &= ~DSI_VHBPCR_HBP;
 8017216:	687b      	ldr	r3, [r7, #4]
 8017218:	681b      	ldr	r3, [r3, #0]
 801721a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801721c:	687b      	ldr	r3, [r7, #4]
 801721e:	681a      	ldr	r2, [r3, #0]
 8017220:	4b39      	ldr	r3, [pc, #228]	@ (8017308 <HAL_DSI_ConfigVideoMode+0x2a4>)
 8017222:	400b      	ands	r3, r1
 8017224:	64d3      	str	r3, [r2, #76]	@ 0x4c
  hdsi->Instance->VHBPCR |= VidCfg->HorizontalBackPorch;
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	681b      	ldr	r3, [r3, #0]
 801722a:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 801722c:	683b      	ldr	r3, [r7, #0]
 801722e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	430a      	orrs	r2, r1
 8017236:	64da      	str	r2, [r3, #76]	@ 0x4c

  /* Set the total line time (HLINE=HSA+HBP+HACT+HFP) in lane byte clock cycles */
  hdsi->Instance->VLCR &= ~DSI_VLCR_HLINE;
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	681b      	ldr	r3, [r3, #0]
 801723c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801723e:	687b      	ldr	r3, [r7, #4]
 8017240:	681a      	ldr	r2, [r3, #0]
 8017242:	4b32      	ldr	r3, [pc, #200]	@ (801730c <HAL_DSI_ConfigVideoMode+0x2a8>)
 8017244:	400b      	ands	r3, r1
 8017246:	6513      	str	r3, [r2, #80]	@ 0x50
  hdsi->Instance->VLCR |= VidCfg->HorizontalLine;
 8017248:	687b      	ldr	r3, [r7, #4]
 801724a:	681b      	ldr	r3, [r3, #0]
 801724c:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	681b      	ldr	r3, [r3, #0]
 8017256:	430a      	orrs	r2, r1
 8017258:	651a      	str	r2, [r3, #80]	@ 0x50

  /* Set the Vertical Synchronization Active (VSA) */
  hdsi->Instance->VVSACR &= ~DSI_VVSACR_VSA;
 801725a:	687b      	ldr	r3, [r7, #4]
 801725c:	681b      	ldr	r3, [r3, #0]
 801725e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	681a      	ldr	r2, [r3, #0]
 8017264:	4b2a      	ldr	r3, [pc, #168]	@ (8017310 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8017266:	400b      	ands	r3, r1
 8017268:	6553      	str	r3, [r2, #84]	@ 0x54
  hdsi->Instance->VVSACR |= VidCfg->VerticalSyncActive;
 801726a:	687b      	ldr	r3, [r7, #4]
 801726c:	681b      	ldr	r3, [r3, #0]
 801726e:	6d59      	ldr	r1, [r3, #84]	@ 0x54
 8017270:	683b      	ldr	r3, [r7, #0]
 8017272:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8017274:	687b      	ldr	r3, [r7, #4]
 8017276:	681b      	ldr	r3, [r3, #0]
 8017278:	430a      	orrs	r2, r1
 801727a:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Set the Vertical Back Porch (VBP)*/
  hdsi->Instance->VVBPCR &= ~DSI_VVBPCR_VBP;
 801727c:	687b      	ldr	r3, [r7, #4]
 801727e:	681b      	ldr	r3, [r3, #0]
 8017280:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017282:	687b      	ldr	r3, [r7, #4]
 8017284:	681a      	ldr	r2, [r3, #0]
 8017286:	4b22      	ldr	r3, [pc, #136]	@ (8017310 <HAL_DSI_ConfigVideoMode+0x2ac>)
 8017288:	400b      	ands	r3, r1
 801728a:	6593      	str	r3, [r2, #88]	@ 0x58
  hdsi->Instance->VVBPCR |= VidCfg->VerticalBackPorch;
 801728c:	687b      	ldr	r3, [r7, #4]
 801728e:	681b      	ldr	r3, [r3, #0]
 8017290:	6d99      	ldr	r1, [r3, #88]	@ 0x58
 8017292:	683b      	ldr	r3, [r7, #0]
 8017294:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	681b      	ldr	r3, [r3, #0]
 801729a:	430a      	orrs	r2, r1
 801729c:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the Vertical Front Porch (VFP)*/
  hdsi->Instance->VVFPCR &= ~DSI_VVFPCR_VFP;
 801729e:	687b      	ldr	r3, [r7, #4]
 80172a0:	681b      	ldr	r3, [r3, #0]
 80172a2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80172a4:	687b      	ldr	r3, [r7, #4]
 80172a6:	681a      	ldr	r2, [r3, #0]
 80172a8:	4b19      	ldr	r3, [pc, #100]	@ (8017310 <HAL_DSI_ConfigVideoMode+0x2ac>)
 80172aa:	400b      	ands	r3, r1
 80172ac:	65d3      	str	r3, [r2, #92]	@ 0x5c
  hdsi->Instance->VVFPCR |= VidCfg->VerticalFrontPorch;
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	681b      	ldr	r3, [r3, #0]
 80172b2:	6dd9      	ldr	r1, [r3, #92]	@ 0x5c
 80172b4:	683b      	ldr	r3, [r7, #0]
 80172b6:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 80172b8:	687b      	ldr	r3, [r7, #4]
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	430a      	orrs	r2, r1
 80172be:	65da      	str	r2, [r3, #92]	@ 0x5c

  /* Set the Vertical Active period*/
  hdsi->Instance->VVACR &= ~DSI_VVACR_VA;
 80172c0:	687b      	ldr	r3, [r7, #4]
 80172c2:	681b      	ldr	r3, [r3, #0]
 80172c4:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80172c6:	687b      	ldr	r3, [r7, #4]
 80172c8:	681a      	ldr	r2, [r3, #0]
 80172ca:	4b0d      	ldr	r3, [pc, #52]	@ (8017300 <HAL_DSI_ConfigVideoMode+0x29c>)
 80172cc:	400b      	ands	r3, r1
 80172ce:	6613      	str	r3, [r2, #96]	@ 0x60
  hdsi->Instance->VVACR |= VidCfg->VerticalActive;
 80172d0:	687b      	ldr	r3, [r7, #4]
 80172d2:	681b      	ldr	r3, [r3, #0]
 80172d4:	6e19      	ldr	r1, [r3, #96]	@ 0x60
 80172d6:	683b      	ldr	r3, [r7, #0]
 80172d8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80172da:	687b      	ldr	r3, [r7, #4]
 80172dc:	681b      	ldr	r3, [r3, #0]
 80172de:	430a      	orrs	r2, r1
 80172e0:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Configure the command transmission mode */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPCE;
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	681b      	ldr	r3, [r3, #0]
 80172e6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80172f0:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPCommandEnable;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	681b      	ldr	r3, [r3, #0]
 80172f6:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80172f8:	683b      	ldr	r3, [r7, #0]
 80172fa:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 80172fc:	e00a      	b.n	8017314 <HAL_DSI_ConfigVideoMode+0x2b0>
 80172fe:	bf00      	nop
 8017300:	ffffc000 	.word	0xffffc000
 8017304:	ffffe000 	.word	0xffffe000
 8017308:	fffff000 	.word	0xfffff000
 801730c:	ffff8000 	.word	0xffff8000
 8017310:	fffffc00 	.word	0xfffffc00
 8017314:	687b      	ldr	r3, [r7, #4]
 8017316:	681b      	ldr	r3, [r3, #0]
 8017318:	430a      	orrs	r2, r1
 801731a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Low power largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_LPSIZE;
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	681b      	ldr	r3, [r3, #0]
 8017320:	699a      	ldr	r2, [r3, #24]
 8017322:	687b      	ldr	r3, [r7, #4]
 8017324:	681b      	ldr	r3, [r3, #0]
 8017326:	f422 027f 	bic.w	r2, r2, #16711680	@ 0xff0000
 801732a:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= ((VidCfg->LPLargestPacketSize) << 16U);
 801732c:	687b      	ldr	r3, [r7, #4]
 801732e:	681b      	ldr	r3, [r3, #0]
 8017330:	6999      	ldr	r1, [r3, #24]
 8017332:	683b      	ldr	r3, [r7, #0]
 8017334:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8017336:	041a      	lsls	r2, r3, #16
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	681b      	ldr	r3, [r3, #0]
 801733c:	430a      	orrs	r2, r1
 801733e:	619a      	str	r2, [r3, #24]

  /* Low power VACT largest packet size */
  hdsi->Instance->LPMCR &= ~DSI_LPMCR_VLPSIZE;
 8017340:	687b      	ldr	r3, [r7, #4]
 8017342:	681b      	ldr	r3, [r3, #0]
 8017344:	699a      	ldr	r2, [r3, #24]
 8017346:	687b      	ldr	r3, [r7, #4]
 8017348:	681b      	ldr	r3, [r3, #0]
 801734a:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 801734e:	619a      	str	r2, [r3, #24]
  hdsi->Instance->LPMCR |= VidCfg->LPVACTLargestPacketSize;
 8017350:	687b      	ldr	r3, [r7, #4]
 8017352:	681b      	ldr	r3, [r3, #0]
 8017354:	6999      	ldr	r1, [r3, #24]
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 801735a:	687b      	ldr	r3, [r7, #4]
 801735c:	681b      	ldr	r3, [r3, #0]
 801735e:	430a      	orrs	r2, r1
 8017360:	619a      	str	r2, [r3, #24]

  /* Enable LP transition in HFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHFPE;
 8017362:	687b      	ldr	r3, [r7, #4]
 8017364:	681b      	ldr	r3, [r3, #0]
 8017366:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017368:	687b      	ldr	r3, [r7, #4]
 801736a:	681b      	ldr	r3, [r3, #0]
 801736c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8017370:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalFrontPorchEnable;
 8017372:	687b      	ldr	r3, [r7, #4]
 8017374:	681b      	ldr	r3, [r3, #0]
 8017376:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017378:	683b      	ldr	r3, [r7, #0]
 801737a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801737c:	687b      	ldr	r3, [r7, #4]
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	430a      	orrs	r2, r1
 8017382:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in HBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPHBPE;
 8017384:	687b      	ldr	r3, [r7, #4]
 8017386:	681b      	ldr	r3, [r3, #0]
 8017388:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801738a:	687b      	ldr	r3, [r7, #4]
 801738c:	681b      	ldr	r3, [r3, #0]
 801738e:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8017392:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPHorizontalBackPorchEnable;
 8017394:	687b      	ldr	r3, [r7, #4]
 8017396:	681b      	ldr	r3, [r3, #0]
 8017398:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 801739a:	683b      	ldr	r3, [r7, #0]
 801739c:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 801739e:	687b      	ldr	r3, [r7, #4]
 80173a0:	681b      	ldr	r3, [r3, #0]
 80173a2:	430a      	orrs	r2, r1
 80173a4:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VACT period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVAE;
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80173ac:	687b      	ldr	r3, [r7, #4]
 80173ae:	681b      	ldr	r3, [r3, #0]
 80173b0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80173b4:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalActiveEnable;
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	681b      	ldr	r3, [r3, #0]
 80173ba:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80173bc:	683b      	ldr	r3, [r7, #0]
 80173be:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
 80173c0:	687b      	ldr	r3, [r7, #4]
 80173c2:	681b      	ldr	r3, [r3, #0]
 80173c4:	430a      	orrs	r2, r1
 80173c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VFP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVFPE;
 80173c8:	687b      	ldr	r3, [r7, #4]
 80173ca:	681b      	ldr	r3, [r3, #0]
 80173cc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80173ce:	687b      	ldr	r3, [r7, #4]
 80173d0:	681b      	ldr	r3, [r3, #0]
 80173d2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80173d6:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalFrontPorchEnable;
 80173d8:	687b      	ldr	r3, [r7, #4]
 80173da:	681b      	ldr	r3, [r3, #0]
 80173dc:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 80173de:	683b      	ldr	r3, [r7, #0]
 80173e0:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 80173e2:	687b      	ldr	r3, [r7, #4]
 80173e4:	681b      	ldr	r3, [r3, #0]
 80173e6:	430a      	orrs	r2, r1
 80173e8:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in VBP period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVBPE;
 80173ea:	687b      	ldr	r3, [r7, #4]
 80173ec:	681b      	ldr	r3, [r3, #0]
 80173ee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	681b      	ldr	r3, [r3, #0]
 80173f4:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 80173f8:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalBackPorchEnable;
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	681b      	ldr	r3, [r3, #0]
 80173fe:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017400:	683b      	ldr	r3, [r7, #0]
 8017402:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 8017404:	687b      	ldr	r3, [r7, #4]
 8017406:	681b      	ldr	r3, [r3, #0]
 8017408:	430a      	orrs	r2, r1
 801740a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable LP transition in vertical sync period */
  hdsi->Instance->VMCR &= ~DSI_VMCR_LPVSAE;
 801740c:	687b      	ldr	r3, [r7, #4]
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801741a:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->LPVerticalSyncActiveEnable;
 801741c:	687b      	ldr	r3, [r7, #4]
 801741e:	681b      	ldr	r3, [r3, #0]
 8017420:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017422:	683b      	ldr	r3, [r7, #0]
 8017424:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8017426:	687b      	ldr	r3, [r7, #4]
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	430a      	orrs	r2, r1
 801742c:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Enable the request for an acknowledge response at the end of a frame */
  hdsi->Instance->VMCR &= ~DSI_VMCR_FBTAAE;
 801742e:	687b      	ldr	r3, [r7, #4]
 8017430:	681b      	ldr	r3, [r3, #0]
 8017432:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	681b      	ldr	r3, [r3, #0]
 8017438:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 801743c:	639a      	str	r2, [r3, #56]	@ 0x38
  hdsi->Instance->VMCR |= VidCfg->FrameBTAAcknowledgeEnable;
 801743e:	687b      	ldr	r3, [r7, #4]
 8017440:	681b      	ldr	r3, [r3, #0]
 8017442:	6b99      	ldr	r1, [r3, #56]	@ 0x38
 8017444:	683b      	ldr	r3, [r7, #0]
 8017446:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8017448:	687b      	ldr	r3, [r7, #4]
 801744a:	681b      	ldr	r3, [r3, #0]
 801744c:	430a      	orrs	r2, r1
 801744e:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8017450:	687b      	ldr	r3, [r7, #4]
 8017452:	2200      	movs	r2, #0
 8017454:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8017456:	2300      	movs	r3, #0
}
 8017458:	4618      	mov	r0, r3
 801745a:	370c      	adds	r7, #12
 801745c:	46bd      	mov	sp, r7
 801745e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017462:	4770      	bx	lr

08017464 <HAL_DSI_ConfigFlowControl>:
  * @param  FlowControl  flow control feature(s) to be enabled.
  *                      This parameter can be any combination of @arg DSI_FlowControl.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_ConfigFlowControl(DSI_HandleTypeDef *hdsi, uint32_t FlowControl)
{
 8017464:	b480      	push	{r7}
 8017466:	b083      	sub	sp, #12
 8017468:	af00      	add	r7, sp, #0
 801746a:	6078      	str	r0, [r7, #4]
 801746c:	6039      	str	r1, [r7, #0]
  /* Process locked */
  __HAL_LOCK(hdsi);
 801746e:	687b      	ldr	r3, [r7, #4]
 8017470:	7c1b      	ldrb	r3, [r3, #16]
 8017472:	2b01      	cmp	r3, #1
 8017474:	d101      	bne.n	801747a <HAL_DSI_ConfigFlowControl+0x16>
 8017476:	2302      	movs	r3, #2
 8017478:	e016      	b.n	80174a8 <HAL_DSI_ConfigFlowControl+0x44>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	2201      	movs	r2, #1
 801747e:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_FLOW_CONTROL(FlowControl));

  /* Set the DSI Host Protocol Configuration Register */
  hdsi->Instance->PCR &= ~DSI_FLOW_CONTROL_ALL;
 8017480:	687b      	ldr	r3, [r7, #4]
 8017482:	681b      	ldr	r3, [r3, #0]
 8017484:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8017486:	687b      	ldr	r3, [r7, #4]
 8017488:	681b      	ldr	r3, [r3, #0]
 801748a:	f022 021f 	bic.w	r2, r2, #31
 801748e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hdsi->Instance->PCR |= FlowControl;
 8017490:	687b      	ldr	r3, [r7, #4]
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8017496:	687b      	ldr	r3, [r7, #4]
 8017498:	681b      	ldr	r3, [r3, #0]
 801749a:	683a      	ldr	r2, [r7, #0]
 801749c:	430a      	orrs	r2, r1
 801749e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 80174a0:	687b      	ldr	r3, [r7, #4]
 80174a2:	2200      	movs	r2, #0
 80174a4:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80174a6:	2300      	movs	r3, #0
}
 80174a8:	4618      	mov	r0, r3
 80174aa:	370c      	adds	r7, #12
 80174ac:	46bd      	mov	sp, r7
 80174ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80174b2:	4770      	bx	lr

080174b4 <HAL_DSI_Start>:
  * @param  hdsi  pointer to a DSI_HandleTypeDef structure that contains
  *               the configuration information for the DSI.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DSI_Start(DSI_HandleTypeDef *hdsi)
{
 80174b4:	b480      	push	{r7}
 80174b6:	b085      	sub	sp, #20
 80174b8:	af00      	add	r7, sp, #0
 80174ba:	6078      	str	r0, [r7, #4]
  /* Process locked */
  __HAL_LOCK(hdsi);
 80174bc:	687b      	ldr	r3, [r7, #4]
 80174be:	7c1b      	ldrb	r3, [r3, #16]
 80174c0:	2b01      	cmp	r3, #1
 80174c2:	d101      	bne.n	80174c8 <HAL_DSI_Start+0x14>
 80174c4:	2302      	movs	r3, #2
 80174c6:	e02b      	b.n	8017520 <HAL_DSI_Start+0x6c>
 80174c8:	687b      	ldr	r3, [r7, #4]
 80174ca:	2201      	movs	r2, #1
 80174cc:	741a      	strb	r2, [r3, #16]

  /* Enable the DSI host */
  __HAL_DSI_ENABLE(hdsi);
 80174ce:	2300      	movs	r3, #0
 80174d0:	60fb      	str	r3, [r7, #12]
 80174d2:	687b      	ldr	r3, [r7, #4]
 80174d4:	681b      	ldr	r3, [r3, #0]
 80174d6:	685a      	ldr	r2, [r3, #4]
 80174d8:	687b      	ldr	r3, [r7, #4]
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	f042 0201 	orr.w	r2, r2, #1
 80174e0:	605a      	str	r2, [r3, #4]
 80174e2:	687b      	ldr	r3, [r7, #4]
 80174e4:	681b      	ldr	r3, [r3, #0]
 80174e6:	685b      	ldr	r3, [r3, #4]
 80174e8:	f003 0301 	and.w	r3, r3, #1
 80174ec:	60fb      	str	r3, [r7, #12]
 80174ee:	68fb      	ldr	r3, [r7, #12]

  /* Enable the DSI wrapper */
  __HAL_DSI_WRAPPER_ENABLE(hdsi);
 80174f0:	2300      	movs	r3, #0
 80174f2:	60bb      	str	r3, [r7, #8]
 80174f4:	687b      	ldr	r3, [r7, #4]
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	f8d3 2404 	ldr.w	r2, [r3, #1028]	@ 0x404
 80174fc:	687b      	ldr	r3, [r7, #4]
 80174fe:	681b      	ldr	r3, [r3, #0]
 8017500:	f042 0208 	orr.w	r2, r2, #8
 8017504:	f8c3 2404 	str.w	r2, [r3, #1028]	@ 0x404
 8017508:	687b      	ldr	r3, [r7, #4]
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	f8d3 3404 	ldr.w	r3, [r3, #1028]	@ 0x404
 8017510:	f003 0308 	and.w	r3, r3, #8
 8017514:	60bb      	str	r3, [r7, #8]
 8017516:	68bb      	ldr	r3, [r7, #8]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8017518:	687b      	ldr	r3, [r7, #4]
 801751a:	2200      	movs	r2, #0
 801751c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 801751e:	2300      	movs	r3, #0
}
 8017520:	4618      	mov	r0, r3
 8017522:	3714      	adds	r7, #20
 8017524:	46bd      	mov	sp, r7
 8017526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801752a:	4770      	bx	lr

0801752c <HAL_DSI_ShortWrite>:
HAL_StatusTypeDef HAL_DSI_ShortWrite(DSI_HandleTypeDef *hdsi,
                                     uint32_t ChannelID,
                                     uint32_t Mode,
                                     uint32_t Param1,
                                     uint32_t Param2)
{
 801752c:	b580      	push	{r7, lr}
 801752e:	b088      	sub	sp, #32
 8017530:	af02      	add	r7, sp, #8
 8017532:	60f8      	str	r0, [r7, #12]
 8017534:	60b9      	str	r1, [r7, #8]
 8017536:	607a      	str	r2, [r7, #4]
 8017538:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  /* Check the parameters */
  assert_param(IS_DSI_SHORT_WRITE_PACKET_TYPE(Mode));

  /* Process locked */
  __HAL_LOCK(hdsi);
 801753a:	68fb      	ldr	r3, [r7, #12]
 801753c:	7c1b      	ldrb	r3, [r3, #16]
 801753e:	2b01      	cmp	r3, #1
 8017540:	d101      	bne.n	8017546 <HAL_DSI_ShortWrite+0x1a>
 8017542:	2302      	movs	r3, #2
 8017544:	e010      	b.n	8017568 <HAL_DSI_ShortWrite+0x3c>
 8017546:	68fb      	ldr	r3, [r7, #12]
 8017548:	2201      	movs	r2, #1
 801754a:	741a      	strb	r2, [r3, #16]

  status = DSI_ShortWrite(hdsi, ChannelID, Mode, Param1, Param2);
 801754c:	6a3b      	ldr	r3, [r7, #32]
 801754e:	9300      	str	r3, [sp, #0]
 8017550:	683b      	ldr	r3, [r7, #0]
 8017552:	687a      	ldr	r2, [r7, #4]
 8017554:	68b9      	ldr	r1, [r7, #8]
 8017556:	68f8      	ldr	r0, [r7, #12]
 8017558:	f7ff fbcb 	bl	8016cf2 <DSI_ShortWrite>
 801755c:	4603      	mov	r3, r0
 801755e:	75fb      	strb	r3, [r7, #23]

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8017560:	68fb      	ldr	r3, [r7, #12]
 8017562:	2200      	movs	r2, #0
 8017564:	741a      	strb	r2, [r3, #16]

  return status;
 8017566:	7dfb      	ldrb	r3, [r7, #23]
}
 8017568:	4618      	mov	r0, r3
 801756a:	3718      	adds	r7, #24
 801756c:	46bd      	mov	sp, r7
 801756e:	bd80      	pop	{r7, pc}

08017570 <HAL_DSI_LongWrite>:
                                    uint32_t ChannelID,
                                    uint32_t Mode,
                                    uint32_t NbParams,
                                    uint32_t Param1,
                                    const uint8_t *ParametersTable)
{
 8017570:	b580      	push	{r7, lr}
 8017572:	b08c      	sub	sp, #48	@ 0x30
 8017574:	af02      	add	r7, sp, #8
 8017576:	60f8      	str	r0, [r7, #12]
 8017578:	60b9      	str	r1, [r7, #8]
 801757a:	607a      	str	r2, [r7, #4]
 801757c:	603b      	str	r3, [r7, #0]
  uint32_t uicounter;
  uint32_t nbBytes;
  uint32_t count;
  uint32_t tickstart;
  uint32_t fifoword;
  const uint8_t *pparams = ParametersTable;
 801757e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017580:	61bb      	str	r3, [r7, #24]

  /* Process locked */
  __HAL_LOCK(hdsi);
 8017582:	68fb      	ldr	r3, [r7, #12]
 8017584:	7c1b      	ldrb	r3, [r3, #16]
 8017586:	2b01      	cmp	r3, #1
 8017588:	d101      	bne.n	801758e <HAL_DSI_LongWrite+0x1e>
 801758a:	2302      	movs	r3, #2
 801758c:	e084      	b.n	8017698 <HAL_DSI_LongWrite+0x128>
 801758e:	68fb      	ldr	r3, [r7, #12]
 8017590:	2201      	movs	r2, #1
 8017592:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_LONG_WRITE_PACKET_TYPE(Mode));

  /* Get tick */
  tickstart = HAL_GetTick();
 8017594:	f7fa fdf2 	bl	801217c <HAL_GetTick>
 8017598:	6178      	str	r0, [r7, #20]

  /* Wait for Command FIFO Empty */
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 801759a:	e00c      	b.n	80175b6 <HAL_DSI_LongWrite+0x46>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 801759c:	f7fa fdee 	bl	801217c <HAL_GetTick>
 80175a0:	4602      	mov	r2, r0
 80175a2:	697b      	ldr	r3, [r7, #20]
 80175a4:	1ad3      	subs	r3, r2, r3
 80175a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80175aa:	d904      	bls.n	80175b6 <HAL_DSI_LongWrite+0x46>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80175ac:	68fb      	ldr	r3, [r7, #12]
 80175ae:	2200      	movs	r2, #0
 80175b0:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80175b2:	2303      	movs	r3, #3
 80175b4:	e070      	b.n	8017698 <HAL_DSI_LongWrite+0x128>
  while ((hdsi->Instance->GPSR & DSI_GPSR_CMDFE) == 0U)
 80175b6:	68fb      	ldr	r3, [r7, #12]
 80175b8:	681b      	ldr	r3, [r3, #0]
 80175ba:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80175bc:	f003 0301 	and.w	r3, r3, #1
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d0eb      	beq.n	801759c <HAL_DSI_LongWrite+0x2c>
    }
  }

  /* Set the DCS code on payload byte 1, and the other parameters on the write FIFO command*/
  fifoword = Param1;
 80175c4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80175c6:	61fb      	str	r3, [r7, #28]
  nbBytes = (NbParams < 3U) ? NbParams : 3U;
 80175c8:	683b      	ldr	r3, [r7, #0]
 80175ca:	2b03      	cmp	r3, #3
 80175cc:	bf28      	it	cs
 80175ce:	2303      	movcs	r3, #3
 80175d0:	613b      	str	r3, [r7, #16]

  for (count = 0U; count < nbBytes; count++)
 80175d2:	2300      	movs	r3, #0
 80175d4:	623b      	str	r3, [r7, #32]
 80175d6:	e00f      	b.n	80175f8 <HAL_DSI_LongWrite+0x88>
  {
    fifoword |= (((uint32_t)(*(pparams + count))) << (8U + (8U * count)));
 80175d8:	69ba      	ldr	r2, [r7, #24]
 80175da:	6a3b      	ldr	r3, [r7, #32]
 80175dc:	4413      	add	r3, r2
 80175de:	781b      	ldrb	r3, [r3, #0]
 80175e0:	461a      	mov	r2, r3
 80175e2:	6a3b      	ldr	r3, [r7, #32]
 80175e4:	3301      	adds	r3, #1
 80175e6:	00db      	lsls	r3, r3, #3
 80175e8:	fa02 f303 	lsl.w	r3, r2, r3
 80175ec:	69fa      	ldr	r2, [r7, #28]
 80175ee:	4313      	orrs	r3, r2
 80175f0:	61fb      	str	r3, [r7, #28]
  for (count = 0U; count < nbBytes; count++)
 80175f2:	6a3b      	ldr	r3, [r7, #32]
 80175f4:	3301      	adds	r3, #1
 80175f6:	623b      	str	r3, [r7, #32]
 80175f8:	6a3a      	ldr	r2, [r7, #32]
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	429a      	cmp	r2, r3
 80175fe:	d3eb      	bcc.n	80175d8 <HAL_DSI_LongWrite+0x68>
  }
  hdsi->Instance->GPDR = fifoword;
 8017600:	68fb      	ldr	r3, [r7, #12]
 8017602:	681b      	ldr	r3, [r3, #0]
 8017604:	69fa      	ldr	r2, [r7, #28]
 8017606:	671a      	str	r2, [r3, #112]	@ 0x70

  uicounter = NbParams - nbBytes;
 8017608:	683a      	ldr	r2, [r7, #0]
 801760a:	693b      	ldr	r3, [r7, #16]
 801760c:	1ad3      	subs	r3, r2, r3
 801760e:	627b      	str	r3, [r7, #36]	@ 0x24
  pparams += nbBytes;
 8017610:	69ba      	ldr	r2, [r7, #24]
 8017612:	693b      	ldr	r3, [r7, #16]
 8017614:	4413      	add	r3, r2
 8017616:	61bb      	str	r3, [r7, #24]
  /* Set the Next parameters on the write FIFO command*/
  while (uicounter != 0U)
 8017618:	e028      	b.n	801766c <HAL_DSI_LongWrite+0xfc>
  {
    nbBytes = (uicounter < 4U) ? uicounter : 4U;
 801761a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801761c:	2b04      	cmp	r3, #4
 801761e:	bf28      	it	cs
 8017620:	2304      	movcs	r3, #4
 8017622:	613b      	str	r3, [r7, #16]
    fifoword = 0U;
 8017624:	2300      	movs	r3, #0
 8017626:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8017628:	2300      	movs	r3, #0
 801762a:	623b      	str	r3, [r7, #32]
 801762c:	e00e      	b.n	801764c <HAL_DSI_LongWrite+0xdc>
    {
      fifoword |= (((uint32_t)(*(pparams + count))) << (8U * count));
 801762e:	69ba      	ldr	r2, [r7, #24]
 8017630:	6a3b      	ldr	r3, [r7, #32]
 8017632:	4413      	add	r3, r2
 8017634:	781b      	ldrb	r3, [r3, #0]
 8017636:	461a      	mov	r2, r3
 8017638:	6a3b      	ldr	r3, [r7, #32]
 801763a:	00db      	lsls	r3, r3, #3
 801763c:	fa02 f303 	lsl.w	r3, r2, r3
 8017640:	69fa      	ldr	r2, [r7, #28]
 8017642:	4313      	orrs	r3, r2
 8017644:	61fb      	str	r3, [r7, #28]
    for (count = 0U; count < nbBytes; count++)
 8017646:	6a3b      	ldr	r3, [r7, #32]
 8017648:	3301      	adds	r3, #1
 801764a:	623b      	str	r3, [r7, #32]
 801764c:	6a3a      	ldr	r2, [r7, #32]
 801764e:	693b      	ldr	r3, [r7, #16]
 8017650:	429a      	cmp	r2, r3
 8017652:	d3ec      	bcc.n	801762e <HAL_DSI_LongWrite+0xbe>
    }
    hdsi->Instance->GPDR = fifoword;
 8017654:	68fb      	ldr	r3, [r7, #12]
 8017656:	681b      	ldr	r3, [r3, #0]
 8017658:	69fa      	ldr	r2, [r7, #28]
 801765a:	671a      	str	r2, [r3, #112]	@ 0x70

    uicounter -= nbBytes;
 801765c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801765e:	693b      	ldr	r3, [r7, #16]
 8017660:	1ad3      	subs	r3, r2, r3
 8017662:	627b      	str	r3, [r7, #36]	@ 0x24
    pparams += nbBytes;
 8017664:	69ba      	ldr	r2, [r7, #24]
 8017666:	693b      	ldr	r3, [r7, #16]
 8017668:	4413      	add	r3, r2
 801766a:	61bb      	str	r3, [r7, #24]
  while (uicounter != 0U)
 801766c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801766e:	2b00      	cmp	r3, #0
 8017670:	d1d3      	bne.n	801761a <HAL_DSI_LongWrite+0xaa>
  }

  /* Configure the packet to send a long DCS command */
  DSI_ConfigPacketHeader(hdsi->Instance,
 8017672:	68fb      	ldr	r3, [r7, #12]
 8017674:	6818      	ldr	r0, [r3, #0]
                         ChannelID,
                         Mode,
                         ((NbParams + 1U) & 0x00FFU),
 8017676:	683b      	ldr	r3, [r7, #0]
 8017678:	3301      	adds	r3, #1
  DSI_ConfigPacketHeader(hdsi->Instance,
 801767a:	b2da      	uxtb	r2, r3
                         (((NbParams + 1U) & 0xFF00U) >> 8U));
 801767c:	683b      	ldr	r3, [r7, #0]
 801767e:	3301      	adds	r3, #1
 8017680:	0a1b      	lsrs	r3, r3, #8
  DSI_ConfigPacketHeader(hdsi->Instance,
 8017682:	b2db      	uxtb	r3, r3
 8017684:	9300      	str	r3, [sp, #0]
 8017686:	4613      	mov	r3, r2
 8017688:	687a      	ldr	r2, [r7, #4]
 801768a:	68b9      	ldr	r1, [r7, #8]
 801768c:	f7ff fb18 	bl	8016cc0 <DSI_ConfigPacketHeader>

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8017690:	68fb      	ldr	r3, [r7, #12]
 8017692:	2200      	movs	r2, #0
 8017694:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 8017696:	2300      	movs	r3, #0
}
 8017698:	4618      	mov	r0, r3
 801769a:	3728      	adds	r7, #40	@ 0x28
 801769c:	46bd      	mov	sp, r7
 801769e:	bd80      	pop	{r7, pc}

080176a0 <HAL_DSI_Read>:
                               uint8_t *Array,
                               uint32_t Size,
                               uint32_t Mode,
                               uint32_t DCSCmd,
                               uint8_t *ParametersTable)
{
 80176a0:	b580      	push	{r7, lr}
 80176a2:	b08c      	sub	sp, #48	@ 0x30
 80176a4:	af02      	add	r7, sp, #8
 80176a6:	60f8      	str	r0, [r7, #12]
 80176a8:	60b9      	str	r1, [r7, #8]
 80176aa:	607a      	str	r2, [r7, #4]
 80176ac:	603b      	str	r3, [r7, #0]
  uint32_t tickstart;
  uint8_t *pdata = Array;
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t datasize = Size;
 80176b2:	683b      	ldr	r3, [r7, #0]
 80176b4:	623b      	str	r3, [r7, #32]
  uint32_t fifoword;
  uint32_t nbbytes;
  uint32_t count;

  /* Process locked */
  __HAL_LOCK(hdsi);
 80176b6:	68fb      	ldr	r3, [r7, #12]
 80176b8:	7c1b      	ldrb	r3, [r3, #16]
 80176ba:	2b01      	cmp	r3, #1
 80176bc:	d101      	bne.n	80176c2 <HAL_DSI_Read+0x22>
 80176be:	2302      	movs	r3, #2
 80176c0:	e0ae      	b.n	8017820 <HAL_DSI_Read+0x180>
 80176c2:	68fb      	ldr	r3, [r7, #12]
 80176c4:	2201      	movs	r2, #1
 80176c6:	741a      	strb	r2, [r3, #16]

  /* Check the parameters */
  assert_param(IS_DSI_READ_PACKET_TYPE(Mode));

  if (datasize > 2U)
 80176c8:	6a3b      	ldr	r3, [r7, #32]
 80176ca:	2b02      	cmp	r3, #2
 80176cc:	d913      	bls.n	80176f6 <HAL_DSI_Read+0x56>
  {
    /* set max return packet size */
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80176ce:	6a3b      	ldr	r3, [r7, #32]
 80176d0:	b2da      	uxtb	r2, r3
                       (((datasize) >> 8U) & 0xFFU)) != HAL_OK)
 80176d2:	6a3b      	ldr	r3, [r7, #32]
 80176d4:	0a1b      	lsrs	r3, r3, #8
    if (DSI_ShortWrite(hdsi, ChannelNbr, DSI_MAX_RETURN_PKT_SIZE, ((datasize) & 0xFFU),
 80176d6:	b2db      	uxtb	r3, r3
 80176d8:	9300      	str	r3, [sp, #0]
 80176da:	4613      	mov	r3, r2
 80176dc:	2237      	movs	r2, #55	@ 0x37
 80176de:	68b9      	ldr	r1, [r7, #8]
 80176e0:	68f8      	ldr	r0, [r7, #12]
 80176e2:	f7ff fb06 	bl	8016cf2 <DSI_ShortWrite>
 80176e6:	4603      	mov	r3, r0
 80176e8:	2b00      	cmp	r3, #0
 80176ea:	d004      	beq.n	80176f6 <HAL_DSI_Read+0x56>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80176ec:	68fb      	ldr	r3, [r7, #12]
 80176ee:	2200      	movs	r2, #0
 80176f0:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 80176f2:	2301      	movs	r3, #1
 80176f4:	e094      	b.n	8017820 <HAL_DSI_Read+0x180>
    }
  }

  /* Configure the packet to read command */
  if (Mode == DSI_DCS_SHORT_PKT_READ)
 80176f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80176f8:	2b06      	cmp	r3, #6
 80176fa:	d109      	bne.n	8017710 <HAL_DSI_Read+0x70>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, DCSCmd, 0U);
 80176fc:	68fb      	ldr	r3, [r7, #12]
 80176fe:	6818      	ldr	r0, [r3, #0]
 8017700:	2300      	movs	r3, #0
 8017702:	9300      	str	r3, [sp, #0]
 8017704:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017706:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017708:	68b9      	ldr	r1, [r7, #8]
 801770a:	f7ff fad9 	bl	8016cc0 <DSI_ConfigPacketHeader>
 801770e:	e033      	b.n	8017778 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P0)
 8017710:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017712:	2b04      	cmp	r3, #4
 8017714:	d109      	bne.n	801772a <HAL_DSI_Read+0x8a>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, 0U, 0U);
 8017716:	68fb      	ldr	r3, [r7, #12]
 8017718:	6818      	ldr	r0, [r3, #0]
 801771a:	2300      	movs	r3, #0
 801771c:	9300      	str	r3, [sp, #0]
 801771e:	2300      	movs	r3, #0
 8017720:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017722:	68b9      	ldr	r1, [r7, #8]
 8017724:	f7ff facc 	bl	8016cc0 <DSI_ConfigPacketHeader>
 8017728:	e026      	b.n	8017778 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P1)
 801772a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801772c:	2b14      	cmp	r3, #20
 801772e:	d10c      	bne.n	801774a <HAL_DSI_Read+0xaa>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], 0U);
 8017730:	68fb      	ldr	r3, [r7, #12]
 8017732:	6818      	ldr	r0, [r3, #0]
 8017734:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017736:	781b      	ldrb	r3, [r3, #0]
 8017738:	461a      	mov	r2, r3
 801773a:	2300      	movs	r3, #0
 801773c:	9300      	str	r3, [sp, #0]
 801773e:	4613      	mov	r3, r2
 8017740:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017742:	68b9      	ldr	r1, [r7, #8]
 8017744:	f7ff fabc 	bl	8016cc0 <DSI_ConfigPacketHeader>
 8017748:	e016      	b.n	8017778 <HAL_DSI_Read+0xd8>
  }
  else if (Mode == DSI_GEN_SHORT_PKT_READ_P2)
 801774a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801774c:	2b24      	cmp	r3, #36	@ 0x24
 801774e:	d10e      	bne.n	801776e <HAL_DSI_Read+0xce>
  {
    DSI_ConfigPacketHeader(hdsi->Instance, ChannelNbr, Mode, ParametersTable[0U], ParametersTable[1U]);
 8017750:	68fb      	ldr	r3, [r7, #12]
 8017752:	6818      	ldr	r0, [r3, #0]
 8017754:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017756:	781b      	ldrb	r3, [r3, #0]
 8017758:	461a      	mov	r2, r3
 801775a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801775c:	3301      	adds	r3, #1
 801775e:	781b      	ldrb	r3, [r3, #0]
 8017760:	9300      	str	r3, [sp, #0]
 8017762:	4613      	mov	r3, r2
 8017764:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017766:	68b9      	ldr	r1, [r7, #8]
 8017768:	f7ff faaa 	bl	8016cc0 <DSI_ConfigPacketHeader>
 801776c:	e004      	b.n	8017778 <HAL_DSI_Read+0xd8>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdsi);
 801776e:	68fb      	ldr	r3, [r7, #12]
 8017770:	2200      	movs	r2, #0
 8017772:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 8017774:	2301      	movs	r3, #1
 8017776:	e053      	b.n	8017820 <HAL_DSI_Read+0x180>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8017778:	f7fa fd00 	bl	801217c <HAL_GetTick>
 801777c:	61b8      	str	r0, [r7, #24]

  /* If DSI fifo is not empty, read requested bytes */
  while (((int32_t)(datasize)) > 0)
 801777e:	e048      	b.n	8017812 <HAL_DSI_Read+0x172>
  {
    if ((hdsi->Instance->GPSR & DSI_GPSR_PRDFE) == 0U)
 8017780:	68fb      	ldr	r3, [r7, #12]
 8017782:	681b      	ldr	r3, [r3, #0]
 8017784:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8017786:	f003 0310 	and.w	r3, r3, #16
 801778a:	2b00      	cmp	r3, #0
 801778c:	d120      	bne.n	80177d0 <HAL_DSI_Read+0x130>
    {
      fifoword = hdsi->Instance->GPDR;
 801778e:	68fb      	ldr	r3, [r7, #12]
 8017790:	681b      	ldr	r3, [r3, #0]
 8017792:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8017794:	617b      	str	r3, [r7, #20]
      nbbytes = (datasize < 4U) ? datasize : 4U;
 8017796:	6a3b      	ldr	r3, [r7, #32]
 8017798:	2b04      	cmp	r3, #4
 801779a:	bf28      	it	cs
 801779c:	2304      	movcs	r3, #4
 801779e:	613b      	str	r3, [r7, #16]

      for (count = 0U; count < nbbytes; count++)
 80177a0:	2300      	movs	r3, #0
 80177a2:	61fb      	str	r3, [r7, #28]
 80177a4:	e010      	b.n	80177c8 <HAL_DSI_Read+0x128>
      {
        *pdata = (uint8_t)(fifoword >> (8U * count));
 80177a6:	69fb      	ldr	r3, [r7, #28]
 80177a8:	00db      	lsls	r3, r3, #3
 80177aa:	697a      	ldr	r2, [r7, #20]
 80177ac:	fa22 f303 	lsr.w	r3, r2, r3
 80177b0:	b2da      	uxtb	r2, r3
 80177b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b4:	701a      	strb	r2, [r3, #0]
        pdata++;
 80177b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b8:	3301      	adds	r3, #1
 80177ba:	627b      	str	r3, [r7, #36]	@ 0x24
        datasize--;
 80177bc:	6a3b      	ldr	r3, [r7, #32]
 80177be:	3b01      	subs	r3, #1
 80177c0:	623b      	str	r3, [r7, #32]
      for (count = 0U; count < nbbytes; count++)
 80177c2:	69fb      	ldr	r3, [r7, #28]
 80177c4:	3301      	adds	r3, #1
 80177c6:	61fb      	str	r3, [r7, #28]
 80177c8:	69fa      	ldr	r2, [r7, #28]
 80177ca:	693b      	ldr	r3, [r7, #16]
 80177cc:	429a      	cmp	r2, r3
 80177ce:	d3ea      	bcc.n	80177a6 <HAL_DSI_Read+0x106>
      }
    }

    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > DSI_TIMEOUT_VALUE)
 80177d0:	f7fa fcd4 	bl	801217c <HAL_GetTick>
 80177d4:	4602      	mov	r2, r0
 80177d6:	69bb      	ldr	r3, [r7, #24]
 80177d8:	1ad3      	subs	r3, r2, r3
 80177da:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80177de:	d904      	bls.n	80177ea <HAL_DSI_Read+0x14a>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hdsi);
 80177e0:	68fb      	ldr	r3, [r7, #12]
 80177e2:	2200      	movs	r2, #0
 80177e4:	741a      	strb	r2, [r3, #16]

      return HAL_TIMEOUT;
 80177e6:	2303      	movs	r3, #3
 80177e8:	e01a      	b.n	8017820 <HAL_DSI_Read+0x180>

    /* Software workaround to avoid HAL_TIMEOUT when a DSI read command is   */
    /* issued to the panel and the read data is not captured by the DSI Host */
    /* which returns Packet Size Error.                                      */
    /* Need to ensure that the Read command has finished before checking PSE */
    if ((hdsi->Instance->GPSR & DSI_GPSR_RCB) == 0U)
 80177ea:	68fb      	ldr	r3, [r7, #12]
 80177ec:	681b      	ldr	r3, [r3, #0]
 80177ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80177f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80177f4:	2b00      	cmp	r3, #0
 80177f6:	d10c      	bne.n	8017812 <HAL_DSI_Read+0x172>
    {
      if ((hdsi->Instance->ISR[1U] & DSI_ISR1_PSE) == DSI_ISR1_PSE)
 80177f8:	68fb      	ldr	r3, [r7, #12]
 80177fa:	681b      	ldr	r3, [r3, #0]
 80177fc:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8017800:	f003 0320 	and.w	r3, r3, #32
 8017804:	2b20      	cmp	r3, #32
 8017806:	d104      	bne.n	8017812 <HAL_DSI_Read+0x172>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hdsi);
 8017808:	68fb      	ldr	r3, [r7, #12]
 801780a:	2200      	movs	r2, #0
 801780c:	741a      	strb	r2, [r3, #16]

        return HAL_ERROR;
 801780e:	2301      	movs	r3, #1
 8017810:	e006      	b.n	8017820 <HAL_DSI_Read+0x180>
  while (((int32_t)(datasize)) > 0)
 8017812:	6a3b      	ldr	r3, [r7, #32]
 8017814:	2b00      	cmp	r3, #0
 8017816:	dcb3      	bgt.n	8017780 <HAL_DSI_Read+0xe0>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hdsi);
 8017818:	68fb      	ldr	r3, [r7, #12]
 801781a:	2200      	movs	r2, #0
 801781c:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 801781e:	2300      	movs	r3, #0
}
 8017820:	4618      	mov	r0, r3
 8017822:	3728      	adds	r7, #40	@ 0x28
 8017824:	46bd      	mov	sp, r7
 8017826:	bd80      	pop	{r7, pc}

08017828 <HAL_EXTI_RegisterCallback>:
  *         This parameter can be one of @arg @ref EXTI_CallbackIDTypeDef values.
  * @param  pPendingCbfn function pointer to be stored as callback.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_RegisterCallback(EXTI_HandleTypeDef *hexti, EXTI_CallbackIDTypeDef CallbackID, void (*pPendingCbfn)(void))
{
 8017828:	b480      	push	{r7}
 801782a:	b087      	sub	sp, #28
 801782c:	af00      	add	r7, sp, #0
 801782e:	60f8      	str	r0, [r7, #12]
 8017830:	460b      	mov	r3, r1
 8017832:	607a      	str	r2, [r7, #4]
 8017834:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef status = HAL_OK;
 8017836:	2300      	movs	r3, #0
 8017838:	75fb      	strb	r3, [r7, #23]

  /* Check null pointer */
  if (hexti == NULL)
 801783a:	68fb      	ldr	r3, [r7, #12]
 801783c:	2b00      	cmp	r3, #0
 801783e:	d101      	bne.n	8017844 <HAL_EXTI_RegisterCallback+0x1c>
  {
    return HAL_ERROR;
 8017840:	2301      	movs	r3, #1
 8017842:	e00a      	b.n	801785a <HAL_EXTI_RegisterCallback+0x32>
  }

  switch (CallbackID)
 8017844:	7afb      	ldrb	r3, [r7, #11]
 8017846:	2b00      	cmp	r3, #0
 8017848:	d103      	bne.n	8017852 <HAL_EXTI_RegisterCallback+0x2a>
  {
    case  HAL_EXTI_COMMON_CB_ID:
      hexti->PendingCallback = pPendingCbfn;
 801784a:	68fb      	ldr	r3, [r7, #12]
 801784c:	687a      	ldr	r2, [r7, #4]
 801784e:	605a      	str	r2, [r3, #4]
      break;
 8017850:	e002      	b.n	8017858 <HAL_EXTI_RegisterCallback+0x30>

    default:
      status = HAL_ERROR;
 8017852:	2301      	movs	r3, #1
 8017854:	75fb      	strb	r3, [r7, #23]
      break;
 8017856:	bf00      	nop
  }

  return status;
 8017858:	7dfb      	ldrb	r3, [r7, #23]
}
 801785a:	4618      	mov	r0, r3
 801785c:	371c      	adds	r7, #28
 801785e:	46bd      	mov	sp, r7
 8017860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017864:	4770      	bx	lr

08017866 <HAL_EXTI_GetHandle>:
  * @param  ExtiLine Exti line number.
  *         This parameter can be from 0 to @ref EXTI_LINE_NB.
  * @retval HAL Status.
  */
HAL_StatusTypeDef HAL_EXTI_GetHandle(EXTI_HandleTypeDef *hexti, uint32_t ExtiLine)
{
 8017866:	b480      	push	{r7}
 8017868:	b083      	sub	sp, #12
 801786a:	af00      	add	r7, sp, #0
 801786c:	6078      	str	r0, [r7, #4]
 801786e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_EXTI_LINE(ExtiLine));

  /* Check null pointer */
  if (hexti == NULL)
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	2b00      	cmp	r3, #0
 8017874:	d101      	bne.n	801787a <HAL_EXTI_GetHandle+0x14>
  {
    return HAL_ERROR;
 8017876:	2301      	movs	r3, #1
 8017878:	e003      	b.n	8017882 <HAL_EXTI_GetHandle+0x1c>
  }
  else
  {
    /* Store line number as handle private field */
    hexti->Line = ExtiLine;
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	683a      	ldr	r2, [r7, #0]
 801787e:	601a      	str	r2, [r3, #0]

    return HAL_OK;
 8017880:	2300      	movs	r3, #0
  }
}
 8017882:	4618      	mov	r0, r3
 8017884:	370c      	adds	r7, #12
 8017886:	46bd      	mov	sp, r7
 8017888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801788c:	4770      	bx	lr
	...

08017890 <HAL_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  hexti Exti handle.
  * @retval none.
  */
void HAL_EXTI_IRQHandler(const EXTI_HandleTypeDef *hexti)
{
 8017890:	b580      	push	{r7, lr}
 8017892:	b086      	sub	sp, #24
 8017894:	af00      	add	r7, sp, #0
 8017896:	6078      	str	r0, [r7, #4]
  uint32_t regval;
  uint32_t maskline;
  uint32_t offset;

  /* Compute line register offset and line mask */
  offset = ((hexti->Line & EXTI_REG_MASK) >> EXTI_REG_SHIFT);
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	0c1b      	lsrs	r3, r3, #16
 801789e:	f003 0303 	and.w	r3, r3, #3
 80178a2:	613b      	str	r3, [r7, #16]
  maskline = (1UL << (hexti->Line & EXTI_PIN_MASK));
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	f003 031f 	and.w	r3, r3, #31
 80178ac:	2201      	movs	r2, #1
 80178ae:	fa02 f303 	lsl.w	r3, r2, r3
 80178b2:	60fb      	str	r3, [r7, #12]

#if defined(DUAL_CORE)
  if (HAL_GetCurrentCPUID() == CM7_CPUID)
 80178b4:	f7fa fe68 	bl	8012588 <HAL_GetCurrentCPUID>
 80178b8:	4603      	mov	r3, r0
 80178ba:	2b03      	cmp	r3, #3
 80178bc:	d105      	bne.n	80178ca <HAL_EXTI_IRQHandler+0x3a>
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
 80178be:	693b      	ldr	r3, [r7, #16]
 80178c0:	011a      	lsls	r2, r3, #4
 80178c2:	4b0f      	ldr	r3, [pc, #60]	@ (8017900 <HAL_EXTI_IRQHandler+0x70>)
 80178c4:	4413      	add	r3, r2
 80178c6:	617b      	str	r3, [r7, #20]
 80178c8:	e004      	b.n	80178d4 <HAL_EXTI_IRQHandler+0x44>
  }
  else /* Cortex-M4*/
  {
    /* Get pending register address */
    regaddr = (__IO uint32_t *)(&EXTI->C2PR1 + (EXTI_MODE_OFFSET * offset));
 80178ca:	693b      	ldr	r3, [r7, #16]
 80178cc:	011a      	lsls	r2, r3, #4
 80178ce:	4b0d      	ldr	r3, [pc, #52]	@ (8017904 <HAL_EXTI_IRQHandler+0x74>)
 80178d0:	4413      	add	r3, r2
 80178d2:	617b      	str	r3, [r7, #20]
#else
  regaddr = (__IO uint32_t *)(&EXTI->PR1 + (EXTI_MODE_OFFSET * offset));
#endif /* DUAL_CORE */

  /* Get pending bit  */
  regval = (*regaddr & maskline);
 80178d4:	697b      	ldr	r3, [r7, #20]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	68fa      	ldr	r2, [r7, #12]
 80178da:	4013      	ands	r3, r2
 80178dc:	60bb      	str	r3, [r7, #8]

  if (regval != 0x00U)
 80178de:	68bb      	ldr	r3, [r7, #8]
 80178e0:	2b00      	cmp	r3, #0
 80178e2:	d009      	beq.n	80178f8 <HAL_EXTI_IRQHandler+0x68>
  {
    /* Clear pending bit */
    *regaddr = maskline;
 80178e4:	697b      	ldr	r3, [r7, #20]
 80178e6:	68fa      	ldr	r2, [r7, #12]
 80178e8:	601a      	str	r2, [r3, #0]

    /* Call callback */
    if (hexti->PendingCallback != NULL)
 80178ea:	687b      	ldr	r3, [r7, #4]
 80178ec:	685b      	ldr	r3, [r3, #4]
 80178ee:	2b00      	cmp	r3, #0
 80178f0:	d002      	beq.n	80178f8 <HAL_EXTI_IRQHandler+0x68>
    {
      hexti->PendingCallback();
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	685b      	ldr	r3, [r3, #4]
 80178f6:	4798      	blx	r3
    }
  }
}
 80178f8:	bf00      	nop
 80178fa:	3718      	adds	r7, #24
 80178fc:	46bd      	mov	sp, r7
 80178fe:	bd80      	pop	{r7, pc}
 8017900:	58000088 	.word	0x58000088
 8017904:	580000c8 	.word	0x580000c8

08017908 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, const GPIO_InitTypeDef *GPIO_Init)
{
 8017908:	b480      	push	{r7}
 801790a:	b089      	sub	sp, #36	@ 0x24
 801790c:	af00      	add	r7, sp, #0
 801790e:	6078      	str	r0, [r7, #4]
 8017910:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8017912:	2300      	movs	r3, #0
 8017914:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8017916:	4b89      	ldr	r3, [pc, #548]	@ (8017b3c <HAL_GPIO_Init+0x234>)
 8017918:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 801791a:	e194      	b.n	8017c46 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 801791c:	683b      	ldr	r3, [r7, #0]
 801791e:	681a      	ldr	r2, [r3, #0]
 8017920:	2101      	movs	r1, #1
 8017922:	69fb      	ldr	r3, [r7, #28]
 8017924:	fa01 f303 	lsl.w	r3, r1, r3
 8017928:	4013      	ands	r3, r2
 801792a:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 801792c:	693b      	ldr	r3, [r7, #16]
 801792e:	2b00      	cmp	r3, #0
 8017930:	f000 8186 	beq.w	8017c40 <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8017934:	683b      	ldr	r3, [r7, #0]
 8017936:	685b      	ldr	r3, [r3, #4]
 8017938:	f003 0303 	and.w	r3, r3, #3
 801793c:	2b01      	cmp	r3, #1
 801793e:	d005      	beq.n	801794c <HAL_GPIO_Init+0x44>
 8017940:	683b      	ldr	r3, [r7, #0]
 8017942:	685b      	ldr	r3, [r3, #4]
 8017944:	f003 0303 	and.w	r3, r3, #3
 8017948:	2b02      	cmp	r3, #2
 801794a:	d130      	bne.n	80179ae <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 801794c:	687b      	ldr	r3, [r7, #4]
 801794e:	689b      	ldr	r3, [r3, #8]
 8017950:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8017952:	69fb      	ldr	r3, [r7, #28]
 8017954:	005b      	lsls	r3, r3, #1
 8017956:	2203      	movs	r2, #3
 8017958:	fa02 f303 	lsl.w	r3, r2, r3
 801795c:	43db      	mvns	r3, r3
 801795e:	69ba      	ldr	r2, [r7, #24]
 8017960:	4013      	ands	r3, r2
 8017962:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8017964:	683b      	ldr	r3, [r7, #0]
 8017966:	68da      	ldr	r2, [r3, #12]
 8017968:	69fb      	ldr	r3, [r7, #28]
 801796a:	005b      	lsls	r3, r3, #1
 801796c:	fa02 f303 	lsl.w	r3, r2, r3
 8017970:	69ba      	ldr	r2, [r7, #24]
 8017972:	4313      	orrs	r3, r2
 8017974:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8017976:	687b      	ldr	r3, [r7, #4]
 8017978:	69ba      	ldr	r2, [r7, #24]
 801797a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 801797c:	687b      	ldr	r3, [r7, #4]
 801797e:	685b      	ldr	r3, [r3, #4]
 8017980:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8017982:	2201      	movs	r2, #1
 8017984:	69fb      	ldr	r3, [r7, #28]
 8017986:	fa02 f303 	lsl.w	r3, r2, r3
 801798a:	43db      	mvns	r3, r3
 801798c:	69ba      	ldr	r2, [r7, #24]
 801798e:	4013      	ands	r3, r2
 8017990:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8017992:	683b      	ldr	r3, [r7, #0]
 8017994:	685b      	ldr	r3, [r3, #4]
 8017996:	091b      	lsrs	r3, r3, #4
 8017998:	f003 0201 	and.w	r2, r3, #1
 801799c:	69fb      	ldr	r3, [r7, #28]
 801799e:	fa02 f303 	lsl.w	r3, r2, r3
 80179a2:	69ba      	ldr	r2, [r7, #24]
 80179a4:	4313      	orrs	r3, r2
 80179a6:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	69ba      	ldr	r2, [r7, #24]
 80179ac:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80179ae:	683b      	ldr	r3, [r7, #0]
 80179b0:	685b      	ldr	r3, [r3, #4]
 80179b2:	f003 0303 	and.w	r3, r3, #3
 80179b6:	2b03      	cmp	r3, #3
 80179b8:	d017      	beq.n	80179ea <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80179ba:	687b      	ldr	r3, [r7, #4]
 80179bc:	68db      	ldr	r3, [r3, #12]
 80179be:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80179c0:	69fb      	ldr	r3, [r7, #28]
 80179c2:	005b      	lsls	r3, r3, #1
 80179c4:	2203      	movs	r2, #3
 80179c6:	fa02 f303 	lsl.w	r3, r2, r3
 80179ca:	43db      	mvns	r3, r3
 80179cc:	69ba      	ldr	r2, [r7, #24]
 80179ce:	4013      	ands	r3, r2
 80179d0:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 80179d2:	683b      	ldr	r3, [r7, #0]
 80179d4:	689a      	ldr	r2, [r3, #8]
 80179d6:	69fb      	ldr	r3, [r7, #28]
 80179d8:	005b      	lsls	r3, r3, #1
 80179da:	fa02 f303 	lsl.w	r3, r2, r3
 80179de:	69ba      	ldr	r2, [r7, #24]
 80179e0:	4313      	orrs	r3, r2
 80179e2:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	69ba      	ldr	r2, [r7, #24]
 80179e8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80179ea:	683b      	ldr	r3, [r7, #0]
 80179ec:	685b      	ldr	r3, [r3, #4]
 80179ee:	f003 0303 	and.w	r3, r3, #3
 80179f2:	2b02      	cmp	r3, #2
 80179f4:	d123      	bne.n	8017a3e <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80179f6:	69fb      	ldr	r3, [r7, #28]
 80179f8:	08da      	lsrs	r2, r3, #3
 80179fa:	687b      	ldr	r3, [r7, #4]
 80179fc:	3208      	adds	r2, #8
 80179fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8017a02:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8017a04:	69fb      	ldr	r3, [r7, #28]
 8017a06:	f003 0307 	and.w	r3, r3, #7
 8017a0a:	009b      	lsls	r3, r3, #2
 8017a0c:	220f      	movs	r2, #15
 8017a0e:	fa02 f303 	lsl.w	r3, r2, r3
 8017a12:	43db      	mvns	r3, r3
 8017a14:	69ba      	ldr	r2, [r7, #24]
 8017a16:	4013      	ands	r3, r2
 8017a18:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8017a1a:	683b      	ldr	r3, [r7, #0]
 8017a1c:	691a      	ldr	r2, [r3, #16]
 8017a1e:	69fb      	ldr	r3, [r7, #28]
 8017a20:	f003 0307 	and.w	r3, r3, #7
 8017a24:	009b      	lsls	r3, r3, #2
 8017a26:	fa02 f303 	lsl.w	r3, r2, r3
 8017a2a:	69ba      	ldr	r2, [r7, #24]
 8017a2c:	4313      	orrs	r3, r2
 8017a2e:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8017a30:	69fb      	ldr	r3, [r7, #28]
 8017a32:	08da      	lsrs	r2, r3, #3
 8017a34:	687b      	ldr	r3, [r7, #4]
 8017a36:	3208      	adds	r2, #8
 8017a38:	69b9      	ldr	r1, [r7, #24]
 8017a3a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	681b      	ldr	r3, [r3, #0]
 8017a42:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8017a44:	69fb      	ldr	r3, [r7, #28]
 8017a46:	005b      	lsls	r3, r3, #1
 8017a48:	2203      	movs	r2, #3
 8017a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8017a4e:	43db      	mvns	r3, r3
 8017a50:	69ba      	ldr	r2, [r7, #24]
 8017a52:	4013      	ands	r3, r2
 8017a54:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8017a56:	683b      	ldr	r3, [r7, #0]
 8017a58:	685b      	ldr	r3, [r3, #4]
 8017a5a:	f003 0203 	and.w	r2, r3, #3
 8017a5e:	69fb      	ldr	r3, [r7, #28]
 8017a60:	005b      	lsls	r3, r3, #1
 8017a62:	fa02 f303 	lsl.w	r3, r2, r3
 8017a66:	69ba      	ldr	r2, [r7, #24]
 8017a68:	4313      	orrs	r3, r2
 8017a6a:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	69ba      	ldr	r2, [r7, #24]
 8017a70:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8017a72:	683b      	ldr	r3, [r7, #0]
 8017a74:	685b      	ldr	r3, [r3, #4]
 8017a76:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8017a7a:	2b00      	cmp	r3, #0
 8017a7c:	f000 80e0 	beq.w	8017c40 <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8017a80:	4b2f      	ldr	r3, [pc, #188]	@ (8017b40 <HAL_GPIO_Init+0x238>)
 8017a82:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017a86:	4a2e      	ldr	r2, [pc, #184]	@ (8017b40 <HAL_GPIO_Init+0x238>)
 8017a88:	f043 0302 	orr.w	r3, r3, #2
 8017a8c:	f8c2 30f4 	str.w	r3, [r2, #244]	@ 0xf4
 8017a90:	4b2b      	ldr	r3, [pc, #172]	@ (8017b40 <HAL_GPIO_Init+0x238>)
 8017a92:	f8d3 30f4 	ldr.w	r3, [r3, #244]	@ 0xf4
 8017a96:	f003 0302 	and.w	r3, r3, #2
 8017a9a:	60fb      	str	r3, [r7, #12]
 8017a9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8017a9e:	4a29      	ldr	r2, [pc, #164]	@ (8017b44 <HAL_GPIO_Init+0x23c>)
 8017aa0:	69fb      	ldr	r3, [r7, #28]
 8017aa2:	089b      	lsrs	r3, r3, #2
 8017aa4:	3302      	adds	r3, #2
 8017aa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017aaa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8017aac:	69fb      	ldr	r3, [r7, #28]
 8017aae:	f003 0303 	and.w	r3, r3, #3
 8017ab2:	009b      	lsls	r3, r3, #2
 8017ab4:	220f      	movs	r2, #15
 8017ab6:	fa02 f303 	lsl.w	r3, r2, r3
 8017aba:	43db      	mvns	r3, r3
 8017abc:	69ba      	ldr	r2, [r7, #24]
 8017abe:	4013      	ands	r3, r2
 8017ac0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8017ac2:	687b      	ldr	r3, [r7, #4]
 8017ac4:	4a20      	ldr	r2, [pc, #128]	@ (8017b48 <HAL_GPIO_Init+0x240>)
 8017ac6:	4293      	cmp	r3, r2
 8017ac8:	d052      	beq.n	8017b70 <HAL_GPIO_Init+0x268>
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	4a1f      	ldr	r2, [pc, #124]	@ (8017b4c <HAL_GPIO_Init+0x244>)
 8017ace:	4293      	cmp	r3, r2
 8017ad0:	d031      	beq.n	8017b36 <HAL_GPIO_Init+0x22e>
 8017ad2:	687b      	ldr	r3, [r7, #4]
 8017ad4:	4a1e      	ldr	r2, [pc, #120]	@ (8017b50 <HAL_GPIO_Init+0x248>)
 8017ad6:	4293      	cmp	r3, r2
 8017ad8:	d02b      	beq.n	8017b32 <HAL_GPIO_Init+0x22a>
 8017ada:	687b      	ldr	r3, [r7, #4]
 8017adc:	4a1d      	ldr	r2, [pc, #116]	@ (8017b54 <HAL_GPIO_Init+0x24c>)
 8017ade:	4293      	cmp	r3, r2
 8017ae0:	d025      	beq.n	8017b2e <HAL_GPIO_Init+0x226>
 8017ae2:	687b      	ldr	r3, [r7, #4]
 8017ae4:	4a1c      	ldr	r2, [pc, #112]	@ (8017b58 <HAL_GPIO_Init+0x250>)
 8017ae6:	4293      	cmp	r3, r2
 8017ae8:	d01f      	beq.n	8017b2a <HAL_GPIO_Init+0x222>
 8017aea:	687b      	ldr	r3, [r7, #4]
 8017aec:	4a1b      	ldr	r2, [pc, #108]	@ (8017b5c <HAL_GPIO_Init+0x254>)
 8017aee:	4293      	cmp	r3, r2
 8017af0:	d019      	beq.n	8017b26 <HAL_GPIO_Init+0x21e>
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	4a1a      	ldr	r2, [pc, #104]	@ (8017b60 <HAL_GPIO_Init+0x258>)
 8017af6:	4293      	cmp	r3, r2
 8017af8:	d013      	beq.n	8017b22 <HAL_GPIO_Init+0x21a>
 8017afa:	687b      	ldr	r3, [r7, #4]
 8017afc:	4a19      	ldr	r2, [pc, #100]	@ (8017b64 <HAL_GPIO_Init+0x25c>)
 8017afe:	4293      	cmp	r3, r2
 8017b00:	d00d      	beq.n	8017b1e <HAL_GPIO_Init+0x216>
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	4a18      	ldr	r2, [pc, #96]	@ (8017b68 <HAL_GPIO_Init+0x260>)
 8017b06:	4293      	cmp	r3, r2
 8017b08:	d007      	beq.n	8017b1a <HAL_GPIO_Init+0x212>
 8017b0a:	687b      	ldr	r3, [r7, #4]
 8017b0c:	4a17      	ldr	r2, [pc, #92]	@ (8017b6c <HAL_GPIO_Init+0x264>)
 8017b0e:	4293      	cmp	r3, r2
 8017b10:	d101      	bne.n	8017b16 <HAL_GPIO_Init+0x20e>
 8017b12:	2309      	movs	r3, #9
 8017b14:	e02d      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b16:	230a      	movs	r3, #10
 8017b18:	e02b      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b1a:	2308      	movs	r3, #8
 8017b1c:	e029      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b1e:	2307      	movs	r3, #7
 8017b20:	e027      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b22:	2306      	movs	r3, #6
 8017b24:	e025      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b26:	2305      	movs	r3, #5
 8017b28:	e023      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b2a:	2304      	movs	r3, #4
 8017b2c:	e021      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b2e:	2303      	movs	r3, #3
 8017b30:	e01f      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b32:	2302      	movs	r3, #2
 8017b34:	e01d      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b36:	2301      	movs	r3, #1
 8017b38:	e01b      	b.n	8017b72 <HAL_GPIO_Init+0x26a>
 8017b3a:	bf00      	nop
 8017b3c:	58000080 	.word	0x58000080
 8017b40:	58024400 	.word	0x58024400
 8017b44:	58000400 	.word	0x58000400
 8017b48:	58020000 	.word	0x58020000
 8017b4c:	58020400 	.word	0x58020400
 8017b50:	58020800 	.word	0x58020800
 8017b54:	58020c00 	.word	0x58020c00
 8017b58:	58021000 	.word	0x58021000
 8017b5c:	58021400 	.word	0x58021400
 8017b60:	58021800 	.word	0x58021800
 8017b64:	58021c00 	.word	0x58021c00
 8017b68:	58022000 	.word	0x58022000
 8017b6c:	58022400 	.word	0x58022400
 8017b70:	2300      	movs	r3, #0
 8017b72:	69fa      	ldr	r2, [r7, #28]
 8017b74:	f002 0203 	and.w	r2, r2, #3
 8017b78:	0092      	lsls	r2, r2, #2
 8017b7a:	4093      	lsls	r3, r2
 8017b7c:	69ba      	ldr	r2, [r7, #24]
 8017b7e:	4313      	orrs	r3, r2
 8017b80:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8017b82:	4938      	ldr	r1, [pc, #224]	@ (8017c64 <HAL_GPIO_Init+0x35c>)
 8017b84:	69fb      	ldr	r3, [r7, #28]
 8017b86:	089b      	lsrs	r3, r3, #2
 8017b88:	3302      	adds	r3, #2
 8017b8a:	69ba      	ldr	r2, [r7, #24]
 8017b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8017b90:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8017b98:	693b      	ldr	r3, [r7, #16]
 8017b9a:	43db      	mvns	r3, r3
 8017b9c:	69ba      	ldr	r2, [r7, #24]
 8017b9e:	4013      	ands	r3, r2
 8017ba0:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8017ba2:	683b      	ldr	r3, [r7, #0]
 8017ba4:	685b      	ldr	r3, [r3, #4]
 8017ba6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8017baa:	2b00      	cmp	r3, #0
 8017bac:	d003      	beq.n	8017bb6 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8017bae:	69ba      	ldr	r2, [r7, #24]
 8017bb0:	693b      	ldr	r3, [r7, #16]
 8017bb2:	4313      	orrs	r3, r2
 8017bb4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8017bb6:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8017bba:	69bb      	ldr	r3, [r7, #24]
 8017bbc:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8017bbe:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017bc2:	685b      	ldr	r3, [r3, #4]
 8017bc4:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8017bc6:	693b      	ldr	r3, [r7, #16]
 8017bc8:	43db      	mvns	r3, r3
 8017bca:	69ba      	ldr	r2, [r7, #24]
 8017bcc:	4013      	ands	r3, r2
 8017bce:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8017bd0:	683b      	ldr	r3, [r7, #0]
 8017bd2:	685b      	ldr	r3, [r3, #4]
 8017bd4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8017bd8:	2b00      	cmp	r3, #0
 8017bda:	d003      	beq.n	8017be4 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8017bdc:	69ba      	ldr	r2, [r7, #24]
 8017bde:	693b      	ldr	r3, [r7, #16]
 8017be0:	4313      	orrs	r3, r2
 8017be2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8017be4:	f04f 42b0 	mov.w	r2, #1476395008	@ 0x58000000
 8017be8:	69bb      	ldr	r3, [r7, #24]
 8017bea:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8017bec:	697b      	ldr	r3, [r7, #20]
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8017bf2:	693b      	ldr	r3, [r7, #16]
 8017bf4:	43db      	mvns	r3, r3
 8017bf6:	69ba      	ldr	r2, [r7, #24]
 8017bf8:	4013      	ands	r3, r2
 8017bfa:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8017bfc:	683b      	ldr	r3, [r7, #0]
 8017bfe:	685b      	ldr	r3, [r3, #4]
 8017c00:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017c04:	2b00      	cmp	r3, #0
 8017c06:	d003      	beq.n	8017c10 <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8017c08:	69ba      	ldr	r2, [r7, #24]
 8017c0a:	693b      	ldr	r3, [r7, #16]
 8017c0c:	4313      	orrs	r3, r2
 8017c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 8017c10:	697b      	ldr	r3, [r7, #20]
 8017c12:	69ba      	ldr	r2, [r7, #24]
 8017c14:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8017c16:	697b      	ldr	r3, [r7, #20]
 8017c18:	681b      	ldr	r3, [r3, #0]
 8017c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8017c1c:	693b      	ldr	r3, [r7, #16]
 8017c1e:	43db      	mvns	r3, r3
 8017c20:	69ba      	ldr	r2, [r7, #24]
 8017c22:	4013      	ands	r3, r2
 8017c24:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8017c26:	683b      	ldr	r3, [r7, #0]
 8017c28:	685b      	ldr	r3, [r3, #4]
 8017c2a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8017c2e:	2b00      	cmp	r3, #0
 8017c30:	d003      	beq.n	8017c3a <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 8017c32:	69ba      	ldr	r2, [r7, #24]
 8017c34:	693b      	ldr	r3, [r7, #16]
 8017c36:	4313      	orrs	r3, r2
 8017c38:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8017c3a:	697b      	ldr	r3, [r7, #20]
 8017c3c:	69ba      	ldr	r2, [r7, #24]
 8017c3e:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 8017c40:	69fb      	ldr	r3, [r7, #28]
 8017c42:	3301      	adds	r3, #1
 8017c44:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8017c46:	683b      	ldr	r3, [r7, #0]
 8017c48:	681a      	ldr	r2, [r3, #0]
 8017c4a:	69fb      	ldr	r3, [r7, #28]
 8017c4c:	fa22 f303 	lsr.w	r3, r2, r3
 8017c50:	2b00      	cmp	r3, #0
 8017c52:	f47f ae63 	bne.w	801791c <HAL_GPIO_Init+0x14>
  }
}
 8017c56:	bf00      	nop
 8017c58:	bf00      	nop
 8017c5a:	3724      	adds	r7, #36	@ 0x24
 8017c5c:	46bd      	mov	sp, r7
 8017c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017c62:	4770      	bx	lr
 8017c64:	58000400 	.word	0x58000400

08017c68 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin: specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 8017c68:	b480      	push	{r7}
 8017c6a:	b087      	sub	sp, #28
 8017c6c:	af00      	add	r7, sp, #0
 8017c6e:	6078      	str	r0, [r7, #4]
 8017c70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8017c72:	2300      	movs	r3, #0
 8017c74:	617b      	str	r3, [r7, #20]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8017c76:	4b75      	ldr	r3, [pc, #468]	@ (8017e4c <HAL_GPIO_DeInit+0x1e4>)
 8017c78:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* Configure the port pins */
  while ((GPIO_Pin >> position) != 0x00U)
 8017c7a:	e0d9      	b.n	8017e30 <HAL_GPIO_DeInit+0x1c8>
  {
    /* Get current io position */
    iocurrent = GPIO_Pin & (1UL << position) ;
 8017c7c:	2201      	movs	r2, #1
 8017c7e:	697b      	ldr	r3, [r7, #20]
 8017c80:	fa02 f303 	lsl.w	r3, r2, r3
 8017c84:	683a      	ldr	r2, [r7, #0]
 8017c86:	4013      	ands	r3, r2
 8017c88:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00U)
 8017c8a:	68fb      	ldr	r3, [r7, #12]
 8017c8c:	2b00      	cmp	r3, #0
 8017c8e:	f000 80cc 	beq.w	8017e2a <HAL_GPIO_DeInit+0x1c2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      /* Clear the External Interrupt or Event for the current IO */
      tmp = SYSCFG->EXTICR[position >> 2U];
 8017c92:	4a6f      	ldr	r2, [pc, #444]	@ (8017e50 <HAL_GPIO_DeInit+0x1e8>)
 8017c94:	697b      	ldr	r3, [r7, #20]
 8017c96:	089b      	lsrs	r3, r3, #2
 8017c98:	3302      	adds	r3, #2
 8017c9a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8017c9e:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FUL << (4U * (position & 0x03U)));
 8017ca0:	697b      	ldr	r3, [r7, #20]
 8017ca2:	f003 0303 	and.w	r3, r3, #3
 8017ca6:	009b      	lsls	r3, r3, #2
 8017ca8:	220f      	movs	r2, #15
 8017caa:	fa02 f303 	lsl.w	r3, r2, r3
 8017cae:	68ba      	ldr	r2, [r7, #8]
 8017cb0:	4013      	ands	r3, r2
 8017cb2:	60bb      	str	r3, [r7, #8]
      if (tmp == (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U))))
 8017cb4:	687b      	ldr	r3, [r7, #4]
 8017cb6:	4a67      	ldr	r2, [pc, #412]	@ (8017e54 <HAL_GPIO_DeInit+0x1ec>)
 8017cb8:	4293      	cmp	r3, r2
 8017cba:	d037      	beq.n	8017d2c <HAL_GPIO_DeInit+0xc4>
 8017cbc:	687b      	ldr	r3, [r7, #4]
 8017cbe:	4a66      	ldr	r2, [pc, #408]	@ (8017e58 <HAL_GPIO_DeInit+0x1f0>)
 8017cc0:	4293      	cmp	r3, r2
 8017cc2:	d031      	beq.n	8017d28 <HAL_GPIO_DeInit+0xc0>
 8017cc4:	687b      	ldr	r3, [r7, #4]
 8017cc6:	4a65      	ldr	r2, [pc, #404]	@ (8017e5c <HAL_GPIO_DeInit+0x1f4>)
 8017cc8:	4293      	cmp	r3, r2
 8017cca:	d02b      	beq.n	8017d24 <HAL_GPIO_DeInit+0xbc>
 8017ccc:	687b      	ldr	r3, [r7, #4]
 8017cce:	4a64      	ldr	r2, [pc, #400]	@ (8017e60 <HAL_GPIO_DeInit+0x1f8>)
 8017cd0:	4293      	cmp	r3, r2
 8017cd2:	d025      	beq.n	8017d20 <HAL_GPIO_DeInit+0xb8>
 8017cd4:	687b      	ldr	r3, [r7, #4]
 8017cd6:	4a63      	ldr	r2, [pc, #396]	@ (8017e64 <HAL_GPIO_DeInit+0x1fc>)
 8017cd8:	4293      	cmp	r3, r2
 8017cda:	d01f      	beq.n	8017d1c <HAL_GPIO_DeInit+0xb4>
 8017cdc:	687b      	ldr	r3, [r7, #4]
 8017cde:	4a62      	ldr	r2, [pc, #392]	@ (8017e68 <HAL_GPIO_DeInit+0x200>)
 8017ce0:	4293      	cmp	r3, r2
 8017ce2:	d019      	beq.n	8017d18 <HAL_GPIO_DeInit+0xb0>
 8017ce4:	687b      	ldr	r3, [r7, #4]
 8017ce6:	4a61      	ldr	r2, [pc, #388]	@ (8017e6c <HAL_GPIO_DeInit+0x204>)
 8017ce8:	4293      	cmp	r3, r2
 8017cea:	d013      	beq.n	8017d14 <HAL_GPIO_DeInit+0xac>
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	4a60      	ldr	r2, [pc, #384]	@ (8017e70 <HAL_GPIO_DeInit+0x208>)
 8017cf0:	4293      	cmp	r3, r2
 8017cf2:	d00d      	beq.n	8017d10 <HAL_GPIO_DeInit+0xa8>
 8017cf4:	687b      	ldr	r3, [r7, #4]
 8017cf6:	4a5f      	ldr	r2, [pc, #380]	@ (8017e74 <HAL_GPIO_DeInit+0x20c>)
 8017cf8:	4293      	cmp	r3, r2
 8017cfa:	d007      	beq.n	8017d0c <HAL_GPIO_DeInit+0xa4>
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	4a5e      	ldr	r2, [pc, #376]	@ (8017e78 <HAL_GPIO_DeInit+0x210>)
 8017d00:	4293      	cmp	r3, r2
 8017d02:	d101      	bne.n	8017d08 <HAL_GPIO_DeInit+0xa0>
 8017d04:	2309      	movs	r3, #9
 8017d06:	e012      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d08:	230a      	movs	r3, #10
 8017d0a:	e010      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d0c:	2308      	movs	r3, #8
 8017d0e:	e00e      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d10:	2307      	movs	r3, #7
 8017d12:	e00c      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d14:	2306      	movs	r3, #6
 8017d16:	e00a      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d18:	2305      	movs	r3, #5
 8017d1a:	e008      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d1c:	2304      	movs	r3, #4
 8017d1e:	e006      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d20:	2303      	movs	r3, #3
 8017d22:	e004      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d24:	2302      	movs	r3, #2
 8017d26:	e002      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d28:	2301      	movs	r3, #1
 8017d2a:	e000      	b.n	8017d2e <HAL_GPIO_DeInit+0xc6>
 8017d2c:	2300      	movs	r3, #0
 8017d2e:	697a      	ldr	r2, [r7, #20]
 8017d30:	f002 0203 	and.w	r2, r2, #3
 8017d34:	0092      	lsls	r2, r2, #2
 8017d36:	4093      	lsls	r3, r2
 8017d38:	68ba      	ldr	r2, [r7, #8]
 8017d3a:	429a      	cmp	r2, r3
 8017d3c:	d136      	bne.n	8017dac <HAL_GPIO_DeInit+0x144>
      {
        /* Clear EXTI line configuration for Current CPU */
        EXTI_CurrentCPU->IMR1 &= ~(iocurrent);
 8017d3e:	693b      	ldr	r3, [r7, #16]
 8017d40:	681a      	ldr	r2, [r3, #0]
 8017d42:	68fb      	ldr	r3, [r7, #12]
 8017d44:	43db      	mvns	r3, r3
 8017d46:	401a      	ands	r2, r3
 8017d48:	693b      	ldr	r3, [r7, #16]
 8017d4a:	601a      	str	r2, [r3, #0]
        EXTI_CurrentCPU->EMR1 &= ~(iocurrent);
 8017d4c:	693b      	ldr	r3, [r7, #16]
 8017d4e:	685a      	ldr	r2, [r3, #4]
 8017d50:	68fb      	ldr	r3, [r7, #12]
 8017d52:	43db      	mvns	r3, r3
 8017d54:	401a      	ands	r2, r3
 8017d56:	693b      	ldr	r3, [r7, #16]
 8017d58:	605a      	str	r2, [r3, #4]

        /* Clear Rising Falling edge configuration */
        EXTI->FTSR1 &= ~(iocurrent);
 8017d5a:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017d5e:	685a      	ldr	r2, [r3, #4]
 8017d60:	68fb      	ldr	r3, [r7, #12]
 8017d62:	43db      	mvns	r3, r3
 8017d64:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017d68:	4013      	ands	r3, r2
 8017d6a:	604b      	str	r3, [r1, #4]
        EXTI->RTSR1 &= ~(iocurrent);
 8017d6c:	f04f 43b0 	mov.w	r3, #1476395008	@ 0x58000000
 8017d70:	681a      	ldr	r2, [r3, #0]
 8017d72:	68fb      	ldr	r3, [r7, #12]
 8017d74:	43db      	mvns	r3, r3
 8017d76:	f04f 41b0 	mov.w	r1, #1476395008	@ 0x58000000
 8017d7a:	4013      	ands	r3, r2
 8017d7c:	600b      	str	r3, [r1, #0]

        tmp = 0x0FUL << (4U * (position & 0x03U));
 8017d7e:	697b      	ldr	r3, [r7, #20]
 8017d80:	f003 0303 	and.w	r3, r3, #3
 8017d84:	009b      	lsls	r3, r3, #2
 8017d86:	220f      	movs	r2, #15
 8017d88:	fa02 f303 	lsl.w	r3, r2, r3
 8017d8c:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 8017d8e:	4a30      	ldr	r2, [pc, #192]	@ (8017e50 <HAL_GPIO_DeInit+0x1e8>)
 8017d90:	697b      	ldr	r3, [r7, #20]
 8017d92:	089b      	lsrs	r3, r3, #2
 8017d94:	3302      	adds	r3, #2
 8017d96:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 8017d9a:	68bb      	ldr	r3, [r7, #8]
 8017d9c:	43da      	mvns	r2, r3
 8017d9e:	482c      	ldr	r0, [pc, #176]	@ (8017e50 <HAL_GPIO_DeInit+0x1e8>)
 8017da0:	697b      	ldr	r3, [r7, #20]
 8017da2:	089b      	lsrs	r3, r3, #2
 8017da4:	400a      	ands	r2, r1
 8017da6:	3302      	adds	r3, #2
 8017da8:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO in Analog Mode */
      GPIOx->MODER |= (GPIO_MODER_MODE0 << (position * 2U));
 8017dac:	687b      	ldr	r3, [r7, #4]
 8017dae:	681a      	ldr	r2, [r3, #0]
 8017db0:	697b      	ldr	r3, [r7, #20]
 8017db2:	005b      	lsls	r3, r3, #1
 8017db4:	2103      	movs	r1, #3
 8017db6:	fa01 f303 	lsl.w	r3, r1, r3
 8017dba:	431a      	orrs	r2, r3
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((position & 0x07U) * 4U)) ;
 8017dc0:	697b      	ldr	r3, [r7, #20]
 8017dc2:	08da      	lsrs	r2, r3, #3
 8017dc4:	687b      	ldr	r3, [r7, #4]
 8017dc6:	3208      	adds	r2, #8
 8017dc8:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8017dcc:	697b      	ldr	r3, [r7, #20]
 8017dce:	f003 0307 	and.w	r3, r3, #7
 8017dd2:	009b      	lsls	r3, r3, #2
 8017dd4:	220f      	movs	r2, #15
 8017dd6:	fa02 f303 	lsl.w	r3, r2, r3
 8017dda:	43db      	mvns	r3, r3
 8017ddc:	697a      	ldr	r2, [r7, #20]
 8017dde:	08d2      	lsrs	r2, r2, #3
 8017de0:	4019      	ands	r1, r3
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	3208      	adds	r2, #8
 8017de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8017dea:	687b      	ldr	r3, [r7, #4]
 8017dec:	68da      	ldr	r2, [r3, #12]
 8017dee:	697b      	ldr	r3, [r7, #20]
 8017df0:	005b      	lsls	r3, r3, #1
 8017df2:	2103      	movs	r1, #3
 8017df4:	fa01 f303 	lsl.w	r3, r1, r3
 8017df8:	43db      	mvns	r3, r3
 8017dfa:	401a      	ands	r2, r3
 8017dfc:	687b      	ldr	r3, [r7, #4]
 8017dfe:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT0 << position) ;
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	685a      	ldr	r2, [r3, #4]
 8017e04:	2101      	movs	r1, #1
 8017e06:	697b      	ldr	r3, [r7, #20]
 8017e08:	fa01 f303 	lsl.w	r3, r1, r3
 8017e0c:	43db      	mvns	r3, r3
 8017e0e:	401a      	ands	r2, r3
 8017e10:	687b      	ldr	r3, [r7, #4]
 8017e12:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8017e14:	687b      	ldr	r3, [r7, #4]
 8017e16:	689a      	ldr	r2, [r3, #8]
 8017e18:	697b      	ldr	r3, [r7, #20]
 8017e1a:	005b      	lsls	r3, r3, #1
 8017e1c:	2103      	movs	r1, #3
 8017e1e:	fa01 f303 	lsl.w	r3, r1, r3
 8017e22:	43db      	mvns	r3, r3
 8017e24:	401a      	ands	r2, r3
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	609a      	str	r2, [r3, #8]
    }

    position++;
 8017e2a:	697b      	ldr	r3, [r7, #20]
 8017e2c:	3301      	adds	r3, #1
 8017e2e:	617b      	str	r3, [r7, #20]
  while ((GPIO_Pin >> position) != 0x00U)
 8017e30:	683a      	ldr	r2, [r7, #0]
 8017e32:	697b      	ldr	r3, [r7, #20]
 8017e34:	fa22 f303 	lsr.w	r3, r2, r3
 8017e38:	2b00      	cmp	r3, #0
 8017e3a:	f47f af1f 	bne.w	8017c7c <HAL_GPIO_DeInit+0x14>
  }
}
 8017e3e:	bf00      	nop
 8017e40:	bf00      	nop
 8017e42:	371c      	adds	r7, #28
 8017e44:	46bd      	mov	sp, r7
 8017e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e4a:	4770      	bx	lr
 8017e4c:	58000080 	.word	0x58000080
 8017e50:	58000400 	.word	0x58000400
 8017e54:	58020000 	.word	0x58020000
 8017e58:	58020400 	.word	0x58020400
 8017e5c:	58020800 	.word	0x58020800
 8017e60:	58020c00 	.word	0x58020c00
 8017e64:	58021000 	.word	0x58021000
 8017e68:	58021400 	.word	0x58021400
 8017e6c:	58021800 	.word	0x58021800
 8017e70:	58021c00 	.word	0x58021c00
 8017e74:	58022000 	.word	0x58022000
 8017e78:	58022400 	.word	0x58022400

08017e7c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(const GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8017e7c:	b480      	push	{r7}
 8017e7e:	b085      	sub	sp, #20
 8017e80:	af00      	add	r7, sp, #0
 8017e82:	6078      	str	r0, [r7, #4]
 8017e84:	460b      	mov	r3, r1
 8017e86:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != 0x00U)
 8017e88:	687b      	ldr	r3, [r7, #4]
 8017e8a:	691a      	ldr	r2, [r3, #16]
 8017e8c:	887b      	ldrh	r3, [r7, #2]
 8017e8e:	4013      	ands	r3, r2
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d002      	beq.n	8017e9a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8017e94:	2301      	movs	r3, #1
 8017e96:	73fb      	strb	r3, [r7, #15]
 8017e98:	e001      	b.n	8017e9e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8017e9a:	2300      	movs	r3, #0
 8017e9c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8017e9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8017ea0:	4618      	mov	r0, r3
 8017ea2:	3714      	adds	r7, #20
 8017ea4:	46bd      	mov	sp, r7
 8017ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017eaa:	4770      	bx	lr

08017eac <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8017eac:	b480      	push	{r7}
 8017eae:	b083      	sub	sp, #12
 8017eb0:	af00      	add	r7, sp, #0
 8017eb2:	6078      	str	r0, [r7, #4]
 8017eb4:	460b      	mov	r3, r1
 8017eb6:	807b      	strh	r3, [r7, #2]
 8017eb8:	4613      	mov	r3, r2
 8017eba:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8017ebc:	787b      	ldrb	r3, [r7, #1]
 8017ebe:	2b00      	cmp	r3, #0
 8017ec0:	d003      	beq.n	8017eca <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8017ec2:	887a      	ldrh	r2, [r7, #2]
 8017ec4:	687b      	ldr	r3, [r7, #4]
 8017ec6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
  }
}
 8017ec8:	e003      	b.n	8017ed2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 8017eca:	887b      	ldrh	r3, [r7, #2]
 8017ecc:	041a      	lsls	r2, r3, #16
 8017ece:	687b      	ldr	r3, [r7, #4]
 8017ed0:	619a      	str	r2, [r3, #24]
}
 8017ed2:	bf00      	nop
 8017ed4:	370c      	adds	r7, #12
 8017ed6:	46bd      	mov	sp, r7
 8017ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017edc:	4770      	bx	lr

08017ede <HAL_GPIO_TogglePin>:
  * @param  GPIOx: Where x can be (A..K) to select the GPIO peripheral.
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8017ede:	b480      	push	{r7}
 8017ee0:	b085      	sub	sp, #20
 8017ee2:	af00      	add	r7, sp, #0
 8017ee4:	6078      	str	r0, [r7, #4]
 8017ee6:	460b      	mov	r3, r1
 8017ee8:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8017eea:	687b      	ldr	r3, [r7, #4]
 8017eec:	695b      	ldr	r3, [r3, #20]
 8017eee:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8017ef0:	887a      	ldrh	r2, [r7, #2]
 8017ef2:	68fb      	ldr	r3, [r7, #12]
 8017ef4:	4013      	ands	r3, r2
 8017ef6:	041a      	lsls	r2, r3, #16
 8017ef8:	68fb      	ldr	r3, [r7, #12]
 8017efa:	43d9      	mvns	r1, r3
 8017efc:	887b      	ldrh	r3, [r7, #2]
 8017efe:	400b      	ands	r3, r1
 8017f00:	431a      	orrs	r2, r3
 8017f02:	687b      	ldr	r3, [r7, #4]
 8017f04:	619a      	str	r2, [r3, #24]
}
 8017f06:	bf00      	nop
 8017f08:	3714      	adds	r7, #20
 8017f0a:	46bd      	mov	sp, r7
 8017f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f10:	4770      	bx	lr
	...

08017f14 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8017f14:	b580      	push	{r7, lr}
 8017f16:	b082      	sub	sp, #8
 8017f18:	af00      	add	r7, sp, #0
 8017f1a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8017f1c:	687b      	ldr	r3, [r7, #4]
 8017f1e:	2b00      	cmp	r3, #0
 8017f20:	d101      	bne.n	8017f26 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8017f22:	2301      	movs	r3, #1
 8017f24:	e08b      	b.n	801803e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8017f26:	687b      	ldr	r3, [r7, #4]
 8017f28:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8017f2c:	b2db      	uxtb	r3, r3
 8017f2e:	2b00      	cmp	r3, #0
 8017f30:	d106      	bne.n	8017f40 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8017f32:	687b      	ldr	r3, [r7, #4]
 8017f34:	2200      	movs	r2, #0
 8017f36:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8017f3a:	6878      	ldr	r0, [r7, #4]
 8017f3c:	f000 f8b5 	bl	80180aa <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8017f40:	687b      	ldr	r3, [r7, #4]
 8017f42:	2224      	movs	r2, #36	@ 0x24
 8017f44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8017f48:	687b      	ldr	r3, [r7, #4]
 8017f4a:	681b      	ldr	r3, [r3, #0]
 8017f4c:	681a      	ldr	r2, [r3, #0]
 8017f4e:	687b      	ldr	r3, [r7, #4]
 8017f50:	681b      	ldr	r3, [r3, #0]
 8017f52:	f022 0201 	bic.w	r2, r2, #1
 8017f56:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8017f58:	687b      	ldr	r3, [r7, #4]
 8017f5a:	685a      	ldr	r2, [r3, #4]
 8017f5c:	687b      	ldr	r3, [r7, #4]
 8017f5e:	681b      	ldr	r3, [r3, #0]
 8017f60:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8017f64:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8017f66:	687b      	ldr	r3, [r7, #4]
 8017f68:	681b      	ldr	r3, [r3, #0]
 8017f6a:	689a      	ldr	r2, [r3, #8]
 8017f6c:	687b      	ldr	r3, [r7, #4]
 8017f6e:	681b      	ldr	r3, [r3, #0]
 8017f70:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017f74:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8017f76:	687b      	ldr	r3, [r7, #4]
 8017f78:	68db      	ldr	r3, [r3, #12]
 8017f7a:	2b01      	cmp	r3, #1
 8017f7c:	d107      	bne.n	8017f8e <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8017f7e:	687b      	ldr	r3, [r7, #4]
 8017f80:	689a      	ldr	r2, [r3, #8]
 8017f82:	687b      	ldr	r3, [r7, #4]
 8017f84:	681b      	ldr	r3, [r3, #0]
 8017f86:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8017f8a:	609a      	str	r2, [r3, #8]
 8017f8c:	e006      	b.n	8017f9c <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8017f8e:	687b      	ldr	r3, [r7, #4]
 8017f90:	689a      	ldr	r2, [r3, #8]
 8017f92:	687b      	ldr	r3, [r7, #4]
 8017f94:	681b      	ldr	r3, [r3, #0]
 8017f96:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8017f9a:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	68db      	ldr	r3, [r3, #12]
 8017fa0:	2b02      	cmp	r3, #2
 8017fa2:	d108      	bne.n	8017fb6 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	681b      	ldr	r3, [r3, #0]
 8017fa8:	685a      	ldr	r2, [r3, #4]
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8017fb2:	605a      	str	r2, [r3, #4]
 8017fb4:	e007      	b.n	8017fc6 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	685a      	ldr	r2, [r3, #4]
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8017fc4:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8017fc6:	687b      	ldr	r3, [r7, #4]
 8017fc8:	681b      	ldr	r3, [r3, #0]
 8017fca:	6859      	ldr	r1, [r3, #4]
 8017fcc:	687b      	ldr	r3, [r7, #4]
 8017fce:	681a      	ldr	r2, [r3, #0]
 8017fd0:	4b1d      	ldr	r3, [pc, #116]	@ (8018048 <HAL_I2C_Init+0x134>)
 8017fd2:	430b      	orrs	r3, r1
 8017fd4:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8017fd6:	687b      	ldr	r3, [r7, #4]
 8017fd8:	681b      	ldr	r3, [r3, #0]
 8017fda:	68da      	ldr	r2, [r3, #12]
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	681b      	ldr	r3, [r3, #0]
 8017fe0:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8017fe4:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8017fe6:	687b      	ldr	r3, [r7, #4]
 8017fe8:	691a      	ldr	r2, [r3, #16]
 8017fea:	687b      	ldr	r3, [r7, #4]
 8017fec:	695b      	ldr	r3, [r3, #20]
 8017fee:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8017ff2:	687b      	ldr	r3, [r7, #4]
 8017ff4:	699b      	ldr	r3, [r3, #24]
 8017ff6:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8017ff8:	687b      	ldr	r3, [r7, #4]
 8017ffa:	681b      	ldr	r3, [r3, #0]
 8017ffc:	430a      	orrs	r2, r1
 8017ffe:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	69d9      	ldr	r1, [r3, #28]
 8018004:	687b      	ldr	r3, [r7, #4]
 8018006:	6a1a      	ldr	r2, [r3, #32]
 8018008:	687b      	ldr	r3, [r7, #4]
 801800a:	681b      	ldr	r3, [r3, #0]
 801800c:	430a      	orrs	r2, r1
 801800e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8018010:	687b      	ldr	r3, [r7, #4]
 8018012:	681b      	ldr	r3, [r3, #0]
 8018014:	681a      	ldr	r2, [r3, #0]
 8018016:	687b      	ldr	r3, [r7, #4]
 8018018:	681b      	ldr	r3, [r3, #0]
 801801a:	f042 0201 	orr.w	r2, r2, #1
 801801e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018020:	687b      	ldr	r3, [r7, #4]
 8018022:	2200      	movs	r2, #0
 8018024:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8018026:	687b      	ldr	r3, [r7, #4]
 8018028:	2220      	movs	r2, #32
 801802a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	2200      	movs	r2, #0
 8018032:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018034:	687b      	ldr	r3, [r7, #4]
 8018036:	2200      	movs	r2, #0
 8018038:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 801803c:	2300      	movs	r3, #0
}
 801803e:	4618      	mov	r0, r3
 8018040:	3708      	adds	r7, #8
 8018042:	46bd      	mov	sp, r7
 8018044:	bd80      	pop	{r7, pc}
 8018046:	bf00      	nop
 8018048:	02008000 	.word	0x02008000

0801804c <HAL_I2C_DeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_DeInit(I2C_HandleTypeDef *hi2c)
{
 801804c:	b580      	push	{r7, lr}
 801804e:	b082      	sub	sp, #8
 8018050:	af00      	add	r7, sp, #0
 8018052:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8018054:	687b      	ldr	r3, [r7, #4]
 8018056:	2b00      	cmp	r3, #0
 8018058:	d101      	bne.n	801805e <HAL_I2C_DeInit+0x12>
  {
    return HAL_ERROR;
 801805a:	2301      	movs	r3, #1
 801805c:	e021      	b.n	80180a2 <HAL_I2C_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));

  hi2c->State = HAL_I2C_STATE_BUSY;
 801805e:	687b      	ldr	r3, [r7, #4]
 8018060:	2224      	movs	r2, #36	@ 0x24
 8018062:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the I2C Peripheral Clock */
  __HAL_I2C_DISABLE(hi2c);
 8018066:	687b      	ldr	r3, [r7, #4]
 8018068:	681b      	ldr	r3, [r3, #0]
 801806a:	681a      	ldr	r2, [r3, #0]
 801806c:	687b      	ldr	r3, [r7, #4]
 801806e:	681b      	ldr	r3, [r3, #0]
 8018070:	f022 0201 	bic.w	r2, r2, #1
 8018074:	601a      	str	r2, [r3, #0]

  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  hi2c->MspDeInitCallback(hi2c);
#else
  /* DeInit the low level hardware: GPIO, CLOCK, NVIC */
  HAL_I2C_MspDeInit(hi2c);
 8018076:	6878      	ldr	r0, [r7, #4]
 8018078:	f000 f821 	bl	80180be <HAL_I2C_MspDeInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801807c:	687b      	ldr	r3, [r7, #4]
 801807e:	2200      	movs	r2, #0
 8018080:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_RESET;
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	2200      	movs	r2, #0
 8018086:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 801808a:	687b      	ldr	r3, [r7, #4]
 801808c:	2200      	movs	r2, #0
 801808e:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	2200      	movs	r2, #0
 8018094:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  /* Release Lock */
  __HAL_UNLOCK(hi2c);
 8018098:	687b      	ldr	r3, [r7, #4]
 801809a:	2200      	movs	r2, #0
 801809c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return HAL_OK;
 80180a0:	2300      	movs	r3, #0
}
 80180a2:	4618      	mov	r0, r3
 80180a4:	3708      	adds	r7, #8
 80180a6:	46bd      	mov	sp, r7
 80180a8:	bd80      	pop	{r7, pc}

080180aa <HAL_I2C_MspInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspInit(I2C_HandleTypeDef *hi2c)
{
 80180aa:	b480      	push	{r7}
 80180ac:	b083      	sub	sp, #12
 80180ae:	af00      	add	r7, sp, #0
 80180b0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspInit could be implemented in the user file
   */
}
 80180b2:	bf00      	nop
 80180b4:	370c      	adds	r7, #12
 80180b6:	46bd      	mov	sp, r7
 80180b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180bc:	4770      	bx	lr

080180be <HAL_I2C_MspDeInit>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MspDeInit(I2C_HandleTypeDef *hi2c)
{
 80180be:	b480      	push	{r7}
 80180c0:	b083      	sub	sp, #12
 80180c2:	af00      	add	r7, sp, #0
 80180c4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MspDeInit could be implemented in the user file
   */
}
 80180c6:	bf00      	nop
 80180c8:	370c      	adds	r7, #12
 80180ca:	46bd      	mov	sp, r7
 80180cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80180d0:	4770      	bx	lr
	...

080180d4 <HAL_I2C_Mem_Write>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                    uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80180d4:	b580      	push	{r7, lr}
 80180d6:	b088      	sub	sp, #32
 80180d8:	af02      	add	r7, sp, #8
 80180da:	60f8      	str	r0, [r7, #12]
 80180dc:	4608      	mov	r0, r1
 80180de:	4611      	mov	r1, r2
 80180e0:	461a      	mov	r2, r3
 80180e2:	4603      	mov	r3, r0
 80180e4:	817b      	strh	r3, [r7, #10]
 80180e6:	460b      	mov	r3, r1
 80180e8:	813b      	strh	r3, [r7, #8]
 80180ea:	4613      	mov	r3, r2
 80180ec:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80180ee:	68fb      	ldr	r3, [r7, #12]
 80180f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80180f4:	b2db      	uxtb	r3, r3
 80180f6:	2b20      	cmp	r3, #32
 80180f8:	f040 80f9 	bne.w	80182ee <HAL_I2C_Mem_Write+0x21a>
  {
    if ((pData == NULL) || (Size == 0U))
 80180fc:	6a3b      	ldr	r3, [r7, #32]
 80180fe:	2b00      	cmp	r3, #0
 8018100:	d002      	beq.n	8018108 <HAL_I2C_Mem_Write+0x34>
 8018102:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8018104:	2b00      	cmp	r3, #0
 8018106:	d105      	bne.n	8018114 <HAL_I2C_Mem_Write+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018108:	68fb      	ldr	r3, [r7, #12]
 801810a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801810e:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8018110:	2301      	movs	r3, #1
 8018112:	e0ed      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018114:	68fb      	ldr	r3, [r7, #12]
 8018116:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801811a:	2b01      	cmp	r3, #1
 801811c:	d101      	bne.n	8018122 <HAL_I2C_Mem_Write+0x4e>
 801811e:	2302      	movs	r3, #2
 8018120:	e0e6      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
 8018122:	68fb      	ldr	r3, [r7, #12]
 8018124:	2201      	movs	r2, #1
 8018126:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 801812a:	f7fa f827 	bl	801217c <HAL_GetTick>
 801812e:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018130:	697b      	ldr	r3, [r7, #20]
 8018132:	9300      	str	r3, [sp, #0]
 8018134:	2319      	movs	r3, #25
 8018136:	2201      	movs	r2, #1
 8018138:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 801813c:	68f8      	ldr	r0, [r7, #12]
 801813e:	f000 fadd 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 8018142:	4603      	mov	r3, r0
 8018144:	2b00      	cmp	r3, #0
 8018146:	d001      	beq.n	801814c <HAL_I2C_Mem_Write+0x78>
    {
      return HAL_ERROR;
 8018148:	2301      	movs	r3, #1
 801814a:	e0d1      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 801814c:	68fb      	ldr	r3, [r7, #12]
 801814e:	2221      	movs	r2, #33	@ 0x21
 8018150:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8018154:	68fb      	ldr	r3, [r7, #12]
 8018156:	2240      	movs	r2, #64	@ 0x40
 8018158:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801815c:	68fb      	ldr	r3, [r7, #12]
 801815e:	2200      	movs	r2, #0
 8018160:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 8018162:	68fb      	ldr	r3, [r7, #12]
 8018164:	6a3a      	ldr	r2, [r7, #32]
 8018166:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8018168:	68fb      	ldr	r3, [r7, #12]
 801816a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 801816c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 801816e:	68fb      	ldr	r3, [r7, #12]
 8018170:	2200      	movs	r2, #0
 8018172:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8018174:	88f8      	ldrh	r0, [r7, #6]
 8018176:	893a      	ldrh	r2, [r7, #8]
 8018178:	8979      	ldrh	r1, [r7, #10]
 801817a:	697b      	ldr	r3, [r7, #20]
 801817c:	9301      	str	r3, [sp, #4]
 801817e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018180:	9300      	str	r3, [sp, #0]
 8018182:	4603      	mov	r3, r0
 8018184:	68f8      	ldr	r0, [r7, #12]
 8018186:	f000 f9ed 	bl	8018564 <I2C_RequestMemoryWrite>
 801818a:	4603      	mov	r3, r0
 801818c:	2b00      	cmp	r3, #0
 801818e:	d005      	beq.n	801819c <HAL_I2C_Mem_Write+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8018190:	68fb      	ldr	r3, [r7, #12]
 8018192:	2200      	movs	r2, #0
 8018194:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 8018198:	2301      	movs	r3, #1
 801819a:	e0a9      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 801819c:	68fb      	ldr	r3, [r7, #12]
 801819e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181a0:	b29b      	uxth	r3, r3
 80181a2:	2bff      	cmp	r3, #255	@ 0xff
 80181a4:	d90e      	bls.n	80181c4 <HAL_I2C_Mem_Write+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80181a6:	68fb      	ldr	r3, [r7, #12]
 80181a8:	22ff      	movs	r2, #255	@ 0xff
 80181aa:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80181ac:	68fb      	ldr	r3, [r7, #12]
 80181ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181b0:	b2da      	uxtb	r2, r3
 80181b2:	8979      	ldrh	r1, [r7, #10]
 80181b4:	2300      	movs	r3, #0
 80181b6:	9300      	str	r3, [sp, #0]
 80181b8:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80181bc:	68f8      	ldr	r0, [r7, #12]
 80181be:	f000 fc61 	bl	8018a84 <I2C_TransferConfig>
 80181c2:	e00f      	b.n	80181e4 <HAL_I2C_Mem_Write+0x110>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80181c4:	68fb      	ldr	r3, [r7, #12]
 80181c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80181c8:	b29a      	uxth	r2, r3
 80181ca:	68fb      	ldr	r3, [r7, #12]
 80181cc:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
 80181ce:	68fb      	ldr	r3, [r7, #12]
 80181d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80181d2:	b2da      	uxtb	r2, r3
 80181d4:	8979      	ldrh	r1, [r7, #10]
 80181d6:	2300      	movs	r3, #0
 80181d8:	9300      	str	r3, [sp, #0]
 80181da:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80181de:	68f8      	ldr	r0, [r7, #12]
 80181e0:	f000 fc50 	bl	8018a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until TXIS flag is set */
      if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80181e4:	697a      	ldr	r2, [r7, #20]
 80181e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80181e8:	68f8      	ldr	r0, [r7, #12]
 80181ea:	f000 fae0 	bl	80187ae <I2C_WaitOnTXISFlagUntilTimeout>
 80181ee:	4603      	mov	r3, r0
 80181f0:	2b00      	cmp	r3, #0
 80181f2:	d001      	beq.n	80181f8 <HAL_I2C_Mem_Write+0x124>
      {
        return HAL_ERROR;
 80181f4:	2301      	movs	r3, #1
 80181f6:	e07b      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
      }

      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80181f8:	68fb      	ldr	r3, [r7, #12]
 80181fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80181fc:	781a      	ldrb	r2, [r3, #0]
 80181fe:	68fb      	ldr	r3, [r7, #12]
 8018200:	681b      	ldr	r3, [r3, #0]
 8018202:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018204:	68fb      	ldr	r3, [r7, #12]
 8018206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018208:	1c5a      	adds	r2, r3, #1
 801820a:	68fb      	ldr	r3, [r7, #12]
 801820c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 801820e:	68fb      	ldr	r3, [r7, #12]
 8018210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018212:	b29b      	uxth	r3, r3
 8018214:	3b01      	subs	r3, #1
 8018216:	b29a      	uxth	r2, r3
 8018218:	68fb      	ldr	r3, [r7, #12]
 801821a:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018220:	3b01      	subs	r3, #1
 8018222:	b29a      	uxth	r2, r3
 8018224:	68fb      	ldr	r3, [r7, #12]
 8018226:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018228:	68fb      	ldr	r3, [r7, #12]
 801822a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801822c:	b29b      	uxth	r3, r3
 801822e:	2b00      	cmp	r3, #0
 8018230:	d034      	beq.n	801829c <HAL_I2C_Mem_Write+0x1c8>
 8018232:	68fb      	ldr	r3, [r7, #12]
 8018234:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018236:	2b00      	cmp	r3, #0
 8018238:	d130      	bne.n	801829c <HAL_I2C_Mem_Write+0x1c8>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801823a:	697b      	ldr	r3, [r7, #20]
 801823c:	9300      	str	r3, [sp, #0]
 801823e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018240:	2200      	movs	r2, #0
 8018242:	2180      	movs	r1, #128	@ 0x80
 8018244:	68f8      	ldr	r0, [r7, #12]
 8018246:	f000 fa59 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 801824a:	4603      	mov	r3, r0
 801824c:	2b00      	cmp	r3, #0
 801824e:	d001      	beq.n	8018254 <HAL_I2C_Mem_Write+0x180>
        {
          return HAL_ERROR;
 8018250:	2301      	movs	r3, #1
 8018252:	e04d      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018254:	68fb      	ldr	r3, [r7, #12]
 8018256:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018258:	b29b      	uxth	r3, r3
 801825a:	2bff      	cmp	r3, #255	@ 0xff
 801825c:	d90e      	bls.n	801827c <HAL_I2C_Mem_Write+0x1a8>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801825e:	68fb      	ldr	r3, [r7, #12]
 8018260:	22ff      	movs	r2, #255	@ 0xff
 8018262:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8018264:	68fb      	ldr	r3, [r7, #12]
 8018266:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018268:	b2da      	uxtb	r2, r3
 801826a:	8979      	ldrh	r1, [r7, #10]
 801826c:	2300      	movs	r3, #0
 801826e:	9300      	str	r3, [sp, #0]
 8018270:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 8018274:	68f8      	ldr	r0, [r7, #12]
 8018276:	f000 fc05 	bl	8018a84 <I2C_TransferConfig>
 801827a:	e00f      	b.n	801829c <HAL_I2C_Mem_Write+0x1c8>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 801827c:	68fb      	ldr	r3, [r7, #12]
 801827e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018280:	b29a      	uxth	r2, r3
 8018282:	68fb      	ldr	r3, [r7, #12]
 8018284:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8018286:	68fb      	ldr	r3, [r7, #12]
 8018288:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 801828a:	b2da      	uxtb	r2, r3
 801828c:	8979      	ldrh	r1, [r7, #10]
 801828e:	2300      	movs	r3, #0
 8018290:	9300      	str	r3, [sp, #0]
 8018292:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8018296:	68f8      	ldr	r0, [r7, #12]
 8018298:	f000 fbf4 	bl	8018a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }

    } while (hi2c->XferCount > 0U);
 801829c:	68fb      	ldr	r3, [r7, #12]
 801829e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80182a0:	b29b      	uxth	r3, r3
 80182a2:	2b00      	cmp	r3, #0
 80182a4:	d19e      	bne.n	80181e4 <HAL_I2C_Mem_Write+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80182a6:	697a      	ldr	r2, [r7, #20]
 80182a8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80182aa:	68f8      	ldr	r0, [r7, #12]
 80182ac:	f000 fac6 	bl	801883c <I2C_WaitOnSTOPFlagUntilTimeout>
 80182b0:	4603      	mov	r3, r0
 80182b2:	2b00      	cmp	r3, #0
 80182b4:	d001      	beq.n	80182ba <HAL_I2C_Mem_Write+0x1e6>
    {
      return HAL_ERROR;
 80182b6:	2301      	movs	r3, #1
 80182b8:	e01a      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80182ba:	68fb      	ldr	r3, [r7, #12]
 80182bc:	681b      	ldr	r3, [r3, #0]
 80182be:	2220      	movs	r2, #32
 80182c0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80182c2:	68fb      	ldr	r3, [r7, #12]
 80182c4:	681b      	ldr	r3, [r3, #0]
 80182c6:	6859      	ldr	r1, [r3, #4]
 80182c8:	68fb      	ldr	r3, [r7, #12]
 80182ca:	681a      	ldr	r2, [r3, #0]
 80182cc:	4b0a      	ldr	r3, [pc, #40]	@ (80182f8 <HAL_I2C_Mem_Write+0x224>)
 80182ce:	400b      	ands	r3, r1
 80182d0:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 80182d2:	68fb      	ldr	r3, [r7, #12]
 80182d4:	2220      	movs	r2, #32
 80182d6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 80182da:	68fb      	ldr	r3, [r7, #12]
 80182dc:	2200      	movs	r2, #0
 80182de:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80182e2:	68fb      	ldr	r3, [r7, #12]
 80182e4:	2200      	movs	r2, #0
 80182e6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 80182ea:	2300      	movs	r3, #0
 80182ec:	e000      	b.n	80182f0 <HAL_I2C_Mem_Write+0x21c>
  }
  else
  {
    return HAL_BUSY;
 80182ee:	2302      	movs	r3, #2
  }
}
 80182f0:	4618      	mov	r0, r3
 80182f2:	3718      	adds	r7, #24
 80182f4:	46bd      	mov	sp, r7
 80182f6:	bd80      	pop	{r7, pc}
 80182f8:	fe00e800 	.word	0xfe00e800

080182fc <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80182fc:	b580      	push	{r7, lr}
 80182fe:	b088      	sub	sp, #32
 8018300:	af02      	add	r7, sp, #8
 8018302:	60f8      	str	r0, [r7, #12]
 8018304:	4608      	mov	r0, r1
 8018306:	4611      	mov	r1, r2
 8018308:	461a      	mov	r2, r3
 801830a:	4603      	mov	r3, r0
 801830c:	817b      	strh	r3, [r7, #10]
 801830e:	460b      	mov	r3, r1
 8018310:	813b      	strh	r3, [r7, #8]
 8018312:	4613      	mov	r3, r2
 8018314:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018316:	68fb      	ldr	r3, [r7, #12]
 8018318:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801831c:	b2db      	uxtb	r3, r3
 801831e:	2b20      	cmp	r3, #32
 8018320:	f040 80fd 	bne.w	801851e <HAL_I2C_Mem_Read+0x222>
  {
    if ((pData == NULL) || (Size == 0U))
 8018324:	6a3b      	ldr	r3, [r7, #32]
 8018326:	2b00      	cmp	r3, #0
 8018328:	d002      	beq.n	8018330 <HAL_I2C_Mem_Read+0x34>
 801832a:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 801832c:	2b00      	cmp	r3, #0
 801832e:	d105      	bne.n	801833c <HAL_I2C_Mem_Read+0x40>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8018330:	68fb      	ldr	r3, [r7, #12]
 8018332:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018336:	645a      	str	r2, [r3, #68]	@ 0x44
      return  HAL_ERROR;
 8018338:	2301      	movs	r3, #1
 801833a:	e0f1      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 801833c:	68fb      	ldr	r3, [r7, #12]
 801833e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018342:	2b01      	cmp	r3, #1
 8018344:	d101      	bne.n	801834a <HAL_I2C_Mem_Read+0x4e>
 8018346:	2302      	movs	r3, #2
 8018348:	e0ea      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
 801834a:	68fb      	ldr	r3, [r7, #12]
 801834c:	2201      	movs	r2, #1
 801834e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8018352:	f7f9 ff13 	bl	801217c <HAL_GetTick>
 8018356:	6178      	str	r0, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 8018358:	697b      	ldr	r3, [r7, #20]
 801835a:	9300      	str	r3, [sp, #0]
 801835c:	2319      	movs	r3, #25
 801835e:	2201      	movs	r2, #1
 8018360:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8018364:	68f8      	ldr	r0, [r7, #12]
 8018366:	f000 f9c9 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 801836a:	4603      	mov	r3, r0
 801836c:	2b00      	cmp	r3, #0
 801836e:	d001      	beq.n	8018374 <HAL_I2C_Mem_Read+0x78>
    {
      return HAL_ERROR;
 8018370:	2301      	movs	r3, #1
 8018372:	e0d5      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8018374:	68fb      	ldr	r3, [r7, #12]
 8018376:	2222      	movs	r2, #34	@ 0x22
 8018378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 801837c:	68fb      	ldr	r3, [r7, #12]
 801837e:	2240      	movs	r2, #64	@ 0x40
 8018380:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8018384:	68fb      	ldr	r3, [r7, #12]
 8018386:	2200      	movs	r2, #0
 8018388:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 801838a:	68fb      	ldr	r3, [r7, #12]
 801838c:	6a3a      	ldr	r2, [r7, #32]
 801838e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount = Size;
 8018390:	68fb      	ldr	r3, [r7, #12]
 8018392:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8018394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferISR   = NULL;
 8018396:	68fb      	ldr	r3, [r7, #12]
 8018398:	2200      	movs	r2, #0
 801839a:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 801839c:	88f8      	ldrh	r0, [r7, #6]
 801839e:	893a      	ldrh	r2, [r7, #8]
 80183a0:	8979      	ldrh	r1, [r7, #10]
 80183a2:	697b      	ldr	r3, [r7, #20]
 80183a4:	9301      	str	r3, [sp, #4]
 80183a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80183a8:	9300      	str	r3, [sp, #0]
 80183aa:	4603      	mov	r3, r0
 80183ac:	68f8      	ldr	r0, [r7, #12]
 80183ae:	f000 f92d 	bl	801860c <I2C_RequestMemoryRead>
 80183b2:	4603      	mov	r3, r0
 80183b4:	2b00      	cmp	r3, #0
 80183b6:	d005      	beq.n	80183c4 <HAL_I2C_Mem_Read+0xc8>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80183b8:	68fb      	ldr	r3, [r7, #12]
 80183ba:	2200      	movs	r2, #0
 80183bc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
      return HAL_ERROR;
 80183c0:	2301      	movs	r3, #1
 80183c2:	e0ad      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80183c4:	68fb      	ldr	r3, [r7, #12]
 80183c6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80183c8:	b29b      	uxth	r3, r3
 80183ca:	2bff      	cmp	r3, #255	@ 0xff
 80183cc:	d90e      	bls.n	80183ec <HAL_I2C_Mem_Read+0xf0>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 80183ce:	68fb      	ldr	r3, [r7, #12]
 80183d0:	22ff      	movs	r2, #255	@ 0xff
 80183d2:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 80183d4:	68fb      	ldr	r3, [r7, #12]
 80183d6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183d8:	b2da      	uxtb	r2, r3
 80183da:	8979      	ldrh	r1, [r7, #10]
 80183dc:	4b52      	ldr	r3, [pc, #328]	@ (8018528 <HAL_I2C_Mem_Read+0x22c>)
 80183de:	9300      	str	r3, [sp, #0]
 80183e0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80183e4:	68f8      	ldr	r0, [r7, #12]
 80183e6:	f000 fb4d 	bl	8018a84 <I2C_TransferConfig>
 80183ea:	e00f      	b.n	801840c <HAL_I2C_Mem_Read+0x110>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80183ec:	68fb      	ldr	r3, [r7, #12]
 80183ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80183f0:	b29a      	uxth	r2, r3
 80183f2:	68fb      	ldr	r3, [r7, #12]
 80183f4:	851a      	strh	r2, [r3, #40]	@ 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80183f6:	68fb      	ldr	r3, [r7, #12]
 80183f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80183fa:	b2da      	uxtb	r2, r3
 80183fc:	8979      	ldrh	r1, [r7, #10]
 80183fe:	4b4a      	ldr	r3, [pc, #296]	@ (8018528 <HAL_I2C_Mem_Read+0x22c>)
 8018400:	9300      	str	r3, [sp, #0]
 8018402:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8018406:	68f8      	ldr	r0, [r7, #12]
 8018408:	f000 fb3c 	bl	8018a84 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 801840c:	697b      	ldr	r3, [r7, #20]
 801840e:	9300      	str	r3, [sp, #0]
 8018410:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018412:	2200      	movs	r2, #0
 8018414:	2104      	movs	r1, #4
 8018416:	68f8      	ldr	r0, [r7, #12]
 8018418:	f000 f970 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 801841c:	4603      	mov	r3, r0
 801841e:	2b00      	cmp	r3, #0
 8018420:	d001      	beq.n	8018426 <HAL_I2C_Mem_Read+0x12a>
      {
        return HAL_ERROR;
 8018422:	2301      	movs	r3, #1
 8018424:	e07c      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8018426:	68fb      	ldr	r3, [r7, #12]
 8018428:	681b      	ldr	r3, [r3, #0]
 801842a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 801842c:	68fb      	ldr	r3, [r7, #12]
 801842e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018430:	b2d2      	uxtb	r2, r2
 8018432:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8018434:	68fb      	ldr	r3, [r7, #12]
 8018436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018438:	1c5a      	adds	r2, r3, #1
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 801843e:	68fb      	ldr	r3, [r7, #12]
 8018440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018442:	3b01      	subs	r3, #1
 8018444:	b29a      	uxth	r2, r3
 8018446:	68fb      	ldr	r3, [r7, #12]
 8018448:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 801844a:	68fb      	ldr	r3, [r7, #12]
 801844c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801844e:	b29b      	uxth	r3, r3
 8018450:	3b01      	subs	r3, #1
 8018452:	b29a      	uxth	r2, r3
 8018454:	68fb      	ldr	r3, [r7, #12]
 8018456:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 801845c:	b29b      	uxth	r3, r3
 801845e:	2b00      	cmp	r3, #0
 8018460:	d034      	beq.n	80184cc <HAL_I2C_Mem_Read+0x1d0>
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018466:	2b00      	cmp	r3, #0
 8018468:	d130      	bne.n	80184cc <HAL_I2C_Mem_Read+0x1d0>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 801846a:	697b      	ldr	r3, [r7, #20]
 801846c:	9300      	str	r3, [sp, #0]
 801846e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018470:	2200      	movs	r2, #0
 8018472:	2180      	movs	r1, #128	@ 0x80
 8018474:	68f8      	ldr	r0, [r7, #12]
 8018476:	f000 f941 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 801847a:	4603      	mov	r3, r0
 801847c:	2b00      	cmp	r3, #0
 801847e:	d001      	beq.n	8018484 <HAL_I2C_Mem_Read+0x188>
        {
          return HAL_ERROR;
 8018480:	2301      	movs	r3, #1
 8018482:	e04d      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8018484:	68fb      	ldr	r3, [r7, #12]
 8018486:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8018488:	b29b      	uxth	r3, r3
 801848a:	2bff      	cmp	r3, #255	@ 0xff
 801848c:	d90e      	bls.n	80184ac <HAL_I2C_Mem_Read+0x1b0>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 801848e:	68fb      	ldr	r3, [r7, #12]
 8018490:	22ff      	movs	r2, #255	@ 0xff
 8018492:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 8018494:	68fb      	ldr	r3, [r7, #12]
 8018496:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8018498:	b2da      	uxtb	r2, r3
 801849a:	8979      	ldrh	r1, [r7, #10]
 801849c:	2300      	movs	r3, #0
 801849e:	9300      	str	r3, [sp, #0]
 80184a0:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80184a4:	68f8      	ldr	r0, [r7, #12]
 80184a6:	f000 faed 	bl	8018a84 <I2C_TransferConfig>
 80184aa:	e00f      	b.n	80184cc <HAL_I2C_Mem_Read+0x1d0>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80184ac:	68fb      	ldr	r3, [r7, #12]
 80184ae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184b0:	b29a      	uxth	r2, r3
 80184b2:	68fb      	ldr	r3, [r7, #12]
 80184b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80184b6:	68fb      	ldr	r3, [r7, #12]
 80184b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80184ba:	b2da      	uxtb	r2, r3
 80184bc:	8979      	ldrh	r1, [r7, #10]
 80184be:	2300      	movs	r3, #0
 80184c0:	9300      	str	r3, [sp, #0]
 80184c2:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80184c6:	68f8      	ldr	r0, [r7, #12]
 80184c8:	f000 fadc 	bl	8018a84 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 80184cc:	68fb      	ldr	r3, [r7, #12]
 80184ce:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80184d0:	b29b      	uxth	r3, r3
 80184d2:	2b00      	cmp	r3, #0
 80184d4:	d19a      	bne.n	801840c <HAL_I2C_Mem_Read+0x110>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80184d6:	697a      	ldr	r2, [r7, #20]
 80184d8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80184da:	68f8      	ldr	r0, [r7, #12]
 80184dc:	f000 f9ae 	bl	801883c <I2C_WaitOnSTOPFlagUntilTimeout>
 80184e0:	4603      	mov	r3, r0
 80184e2:	2b00      	cmp	r3, #0
 80184e4:	d001      	beq.n	80184ea <HAL_I2C_Mem_Read+0x1ee>
    {
      return HAL_ERROR;
 80184e6:	2301      	movs	r3, #1
 80184e8:	e01a      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80184ea:	68fb      	ldr	r3, [r7, #12]
 80184ec:	681b      	ldr	r3, [r3, #0]
 80184ee:	2220      	movs	r2, #32
 80184f0:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 80184f2:	68fb      	ldr	r3, [r7, #12]
 80184f4:	681b      	ldr	r3, [r3, #0]
 80184f6:	6859      	ldr	r1, [r3, #4]
 80184f8:	68fb      	ldr	r3, [r7, #12]
 80184fa:	681a      	ldr	r2, [r3, #0]
 80184fc:	4b0b      	ldr	r3, [pc, #44]	@ (801852c <HAL_I2C_Mem_Read+0x230>)
 80184fe:	400b      	ands	r3, r1
 8018500:	6053      	str	r3, [r2, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8018502:	68fb      	ldr	r3, [r7, #12]
 8018504:	2220      	movs	r2, #32
 8018506:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 801850a:	68fb      	ldr	r3, [r7, #12]
 801850c:	2200      	movs	r2, #0
 801850e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018512:	68fb      	ldr	r3, [r7, #12]
 8018514:	2200      	movs	r2, #0
 8018516:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801851a:	2300      	movs	r3, #0
 801851c:	e000      	b.n	8018520 <HAL_I2C_Mem_Read+0x224>
  }
  else
  {
    return HAL_BUSY;
 801851e:	2302      	movs	r3, #2
  }
}
 8018520:	4618      	mov	r0, r3
 8018522:	3718      	adds	r7, #24
 8018524:	46bd      	mov	sp, r7
 8018526:	bd80      	pop	{r7, pc}
 8018528:	80002400 	.word	0x80002400
 801852c:	fe00e800 	.word	0xfe00e800

08018530 <HAL_I2C_GetState>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL state
  */
HAL_I2C_StateTypeDef HAL_I2C_GetState(const I2C_HandleTypeDef *hi2c)
{
 8018530:	b480      	push	{r7}
 8018532:	b083      	sub	sp, #12
 8018534:	af00      	add	r7, sp, #0
 8018536:	6078      	str	r0, [r7, #4]
  /* Return I2C handle state */
  return hi2c->State;
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801853e:	b2db      	uxtb	r3, r3
}
 8018540:	4618      	mov	r0, r3
 8018542:	370c      	adds	r7, #12
 8018544:	46bd      	mov	sp, r7
 8018546:	f85d 7b04 	ldr.w	r7, [sp], #4
 801854a:	4770      	bx	lr

0801854c <HAL_I2C_GetError>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *              the configuration information for the specified I2C.
  * @retval I2C Error Code
  */
uint32_t HAL_I2C_GetError(const I2C_HandleTypeDef *hi2c)
{
 801854c:	b480      	push	{r7}
 801854e:	b083      	sub	sp, #12
 8018550:	af00      	add	r7, sp, #0
 8018552:	6078      	str	r0, [r7, #4]
  return hi2c->ErrorCode;
 8018554:	687b      	ldr	r3, [r7, #4]
 8018556:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
}
 8018558:	4618      	mov	r0, r3
 801855a:	370c      	adds	r7, #12
 801855c:	46bd      	mov	sp, r7
 801855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018562:	4770      	bx	lr

08018564 <I2C_RequestMemoryWrite>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                                uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                                uint32_t Tickstart)
{
 8018564:	b580      	push	{r7, lr}
 8018566:	b086      	sub	sp, #24
 8018568:	af02      	add	r7, sp, #8
 801856a:	60f8      	str	r0, [r7, #12]
 801856c:	4608      	mov	r0, r1
 801856e:	4611      	mov	r1, r2
 8018570:	461a      	mov	r2, r3
 8018572:	4603      	mov	r3, r0
 8018574:	817b      	strh	r3, [r7, #10]
 8018576:	460b      	mov	r3, r1
 8018578:	813b      	strh	r3, [r7, #8]
 801857a:	4613      	mov	r3, r2
 801857c:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_RELOAD_MODE, I2C_GENERATE_START_WRITE);
 801857e:	88fb      	ldrh	r3, [r7, #6]
 8018580:	b2da      	uxtb	r2, r3
 8018582:	8979      	ldrh	r1, [r7, #10]
 8018584:	4b20      	ldr	r3, [pc, #128]	@ (8018608 <I2C_RequestMemoryWrite+0xa4>)
 8018586:	9300      	str	r3, [sp, #0]
 8018588:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 801858c:	68f8      	ldr	r0, [r7, #12]
 801858e:	f000 fa79 	bl	8018a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018592:	69fa      	ldr	r2, [r7, #28]
 8018594:	69b9      	ldr	r1, [r7, #24]
 8018596:	68f8      	ldr	r0, [r7, #12]
 8018598:	f000 f909 	bl	80187ae <I2C_WaitOnTXISFlagUntilTimeout>
 801859c:	4603      	mov	r3, r0
 801859e:	2b00      	cmp	r3, #0
 80185a0:	d001      	beq.n	80185a6 <I2C_RequestMemoryWrite+0x42>
  {
    return HAL_ERROR;
 80185a2:	2301      	movs	r3, #1
 80185a4:	e02c      	b.n	8018600 <I2C_RequestMemoryWrite+0x9c>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80185a6:	88fb      	ldrh	r3, [r7, #6]
 80185a8:	2b01      	cmp	r3, #1
 80185aa:	d105      	bne.n	80185b8 <I2C_RequestMemoryWrite+0x54>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80185ac:	893b      	ldrh	r3, [r7, #8]
 80185ae:	b2da      	uxtb	r2, r3
 80185b0:	68fb      	ldr	r3, [r7, #12]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	629a      	str	r2, [r3, #40]	@ 0x28
 80185b6:	e015      	b.n	80185e4 <I2C_RequestMemoryWrite+0x80>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 80185b8:	893b      	ldrh	r3, [r7, #8]
 80185ba:	0a1b      	lsrs	r3, r3, #8
 80185bc:	b29b      	uxth	r3, r3
 80185be:	b2da      	uxtb	r2, r3
 80185c0:	68fb      	ldr	r3, [r7, #12]
 80185c2:	681b      	ldr	r3, [r3, #0]
 80185c4:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80185c6:	69fa      	ldr	r2, [r7, #28]
 80185c8:	69b9      	ldr	r1, [r7, #24]
 80185ca:	68f8      	ldr	r0, [r7, #12]
 80185cc:	f000 f8ef 	bl	80187ae <I2C_WaitOnTXISFlagUntilTimeout>
 80185d0:	4603      	mov	r3, r0
 80185d2:	2b00      	cmp	r3, #0
 80185d4:	d001      	beq.n	80185da <I2C_RequestMemoryWrite+0x76>
    {
      return HAL_ERROR;
 80185d6:	2301      	movs	r3, #1
 80185d8:	e012      	b.n	8018600 <I2C_RequestMemoryWrite+0x9c>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 80185da:	893b      	ldrh	r3, [r7, #8]
 80185dc:	b2da      	uxtb	r2, r3
 80185de:	68fb      	ldr	r3, [r7, #12]
 80185e0:	681b      	ldr	r3, [r3, #0]
 80185e2:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TCR flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, Tickstart) != HAL_OK)
 80185e4:	69fb      	ldr	r3, [r7, #28]
 80185e6:	9300      	str	r3, [sp, #0]
 80185e8:	69bb      	ldr	r3, [r7, #24]
 80185ea:	2200      	movs	r2, #0
 80185ec:	2180      	movs	r1, #128	@ 0x80
 80185ee:	68f8      	ldr	r0, [r7, #12]
 80185f0:	f000 f884 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 80185f4:	4603      	mov	r3, r0
 80185f6:	2b00      	cmp	r3, #0
 80185f8:	d001      	beq.n	80185fe <I2C_RequestMemoryWrite+0x9a>
  {
    return HAL_ERROR;
 80185fa:	2301      	movs	r3, #1
 80185fc:	e000      	b.n	8018600 <I2C_RequestMemoryWrite+0x9c>
  }

  return HAL_OK;
 80185fe:	2300      	movs	r3, #0
}
 8018600:	4618      	mov	r0, r3
 8018602:	3710      	adds	r7, #16
 8018604:	46bd      	mov	sp, r7
 8018606:	bd80      	pop	{r7, pc}
 8018608:	80002000 	.word	0x80002000

0801860c <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 801860c:	b580      	push	{r7, lr}
 801860e:	b086      	sub	sp, #24
 8018610:	af02      	add	r7, sp, #8
 8018612:	60f8      	str	r0, [r7, #12]
 8018614:	4608      	mov	r0, r1
 8018616:	4611      	mov	r1, r2
 8018618:	461a      	mov	r2, r3
 801861a:	4603      	mov	r3, r0
 801861c:	817b      	strh	r3, [r7, #10]
 801861e:	460b      	mov	r3, r1
 8018620:	813b      	strh	r3, [r7, #8]
 8018622:	4613      	mov	r3, r2
 8018624:	80fb      	strh	r3, [r7, #6]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8018626:	88fb      	ldrh	r3, [r7, #6]
 8018628:	b2da      	uxtb	r2, r3
 801862a:	8979      	ldrh	r1, [r7, #10]
 801862c:	4b20      	ldr	r3, [pc, #128]	@ (80186b0 <I2C_RequestMemoryRead+0xa4>)
 801862e:	9300      	str	r3, [sp, #0]
 8018630:	2300      	movs	r3, #0
 8018632:	68f8      	ldr	r0, [r7, #12]
 8018634:	f000 fa26 	bl	8018a84 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8018638:	69fa      	ldr	r2, [r7, #28]
 801863a:	69b9      	ldr	r1, [r7, #24]
 801863c:	68f8      	ldr	r0, [r7, #12]
 801863e:	f000 f8b6 	bl	80187ae <I2C_WaitOnTXISFlagUntilTimeout>
 8018642:	4603      	mov	r3, r0
 8018644:	2b00      	cmp	r3, #0
 8018646:	d001      	beq.n	801864c <I2C_RequestMemoryRead+0x40>
  {
    return HAL_ERROR;
 8018648:	2301      	movs	r3, #1
 801864a:	e02c      	b.n	80186a6 <I2C_RequestMemoryRead+0x9a>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 801864c:	88fb      	ldrh	r3, [r7, #6]
 801864e:	2b01      	cmp	r3, #1
 8018650:	d105      	bne.n	801865e <I2C_RequestMemoryRead+0x52>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018652:	893b      	ldrh	r3, [r7, #8]
 8018654:	b2da      	uxtb	r2, r3
 8018656:	68fb      	ldr	r3, [r7, #12]
 8018658:	681b      	ldr	r3, [r3, #0]
 801865a:	629a      	str	r2, [r3, #40]	@ 0x28
 801865c:	e015      	b.n	801868a <I2C_RequestMemoryRead+0x7e>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 801865e:	893b      	ldrh	r3, [r7, #8]
 8018660:	0a1b      	lsrs	r3, r3, #8
 8018662:	b29b      	uxth	r3, r3
 8018664:	b2da      	uxtb	r2, r3
 8018666:	68fb      	ldr	r3, [r7, #12]
 8018668:	681b      	ldr	r3, [r3, #0]
 801866a:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 801866c:	69fa      	ldr	r2, [r7, #28]
 801866e:	69b9      	ldr	r1, [r7, #24]
 8018670:	68f8      	ldr	r0, [r7, #12]
 8018672:	f000 f89c 	bl	80187ae <I2C_WaitOnTXISFlagUntilTimeout>
 8018676:	4603      	mov	r3, r0
 8018678:	2b00      	cmp	r3, #0
 801867a:	d001      	beq.n	8018680 <I2C_RequestMemoryRead+0x74>
    {
      return HAL_ERROR;
 801867c:	2301      	movs	r3, #1
 801867e:	e012      	b.n	80186a6 <I2C_RequestMemoryRead+0x9a>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8018680:	893b      	ldrh	r3, [r7, #8]
 8018682:	b2da      	uxtb	r2, r3
 8018684:	68fb      	ldr	r3, [r7, #12]
 8018686:	681b      	ldr	r3, [r3, #0]
 8018688:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 801868a:	69fb      	ldr	r3, [r7, #28]
 801868c:	9300      	str	r3, [sp, #0]
 801868e:	69bb      	ldr	r3, [r7, #24]
 8018690:	2200      	movs	r2, #0
 8018692:	2140      	movs	r1, #64	@ 0x40
 8018694:	68f8      	ldr	r0, [r7, #12]
 8018696:	f000 f831 	bl	80186fc <I2C_WaitOnFlagUntilTimeout>
 801869a:	4603      	mov	r3, r0
 801869c:	2b00      	cmp	r3, #0
 801869e:	d001      	beq.n	80186a4 <I2C_RequestMemoryRead+0x98>
  {
    return HAL_ERROR;
 80186a0:	2301      	movs	r3, #1
 80186a2:	e000      	b.n	80186a6 <I2C_RequestMemoryRead+0x9a>
  }

  return HAL_OK;
 80186a4:	2300      	movs	r3, #0
}
 80186a6:	4618      	mov	r0, r3
 80186a8:	3710      	adds	r7, #16
 80186aa:	46bd      	mov	sp, r7
 80186ac:	bd80      	pop	{r7, pc}
 80186ae:	bf00      	nop
 80186b0:	80002000 	.word	0x80002000

080186b4 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 80186b4:	b480      	push	{r7}
 80186b6:	b083      	sub	sp, #12
 80186b8:	af00      	add	r7, sp, #0
 80186ba:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	681b      	ldr	r3, [r3, #0]
 80186c0:	699b      	ldr	r3, [r3, #24]
 80186c2:	f003 0302 	and.w	r3, r3, #2
 80186c6:	2b02      	cmp	r3, #2
 80186c8:	d103      	bne.n	80186d2 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 80186ca:	687b      	ldr	r3, [r7, #4]
 80186cc:	681b      	ldr	r3, [r3, #0]
 80186ce:	2200      	movs	r2, #0
 80186d0:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80186d2:	687b      	ldr	r3, [r7, #4]
 80186d4:	681b      	ldr	r3, [r3, #0]
 80186d6:	699b      	ldr	r3, [r3, #24]
 80186d8:	f003 0301 	and.w	r3, r3, #1
 80186dc:	2b01      	cmp	r3, #1
 80186de:	d007      	beq.n	80186f0 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	681b      	ldr	r3, [r3, #0]
 80186e4:	699a      	ldr	r2, [r3, #24]
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	681b      	ldr	r3, [r3, #0]
 80186ea:	f042 0201 	orr.w	r2, r2, #1
 80186ee:	619a      	str	r2, [r3, #24]
  }
}
 80186f0:	bf00      	nop
 80186f2:	370c      	adds	r7, #12
 80186f4:	46bd      	mov	sp, r7
 80186f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80186fa:	4770      	bx	lr

080186fc <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 80186fc:	b580      	push	{r7, lr}
 80186fe:	b084      	sub	sp, #16
 8018700:	af00      	add	r7, sp, #0
 8018702:	60f8      	str	r0, [r7, #12]
 8018704:	60b9      	str	r1, [r7, #8]
 8018706:	603b      	str	r3, [r7, #0]
 8018708:	4613      	mov	r3, r2
 801870a:	71fb      	strb	r3, [r7, #7]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 801870c:	e03b      	b.n	8018786 <I2C_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801870e:	69ba      	ldr	r2, [r7, #24]
 8018710:	6839      	ldr	r1, [r7, #0]
 8018712:	68f8      	ldr	r0, [r7, #12]
 8018714:	f000 f8d6 	bl	80188c4 <I2C_IsErrorOccurred>
 8018718:	4603      	mov	r3, r0
 801871a:	2b00      	cmp	r3, #0
 801871c:	d001      	beq.n	8018722 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 801871e:	2301      	movs	r3, #1
 8018720:	e041      	b.n	80187a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8018722:	683b      	ldr	r3, [r7, #0]
 8018724:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018728:	d02d      	beq.n	8018786 <I2C_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801872a:	f7f9 fd27 	bl	801217c <HAL_GetTick>
 801872e:	4602      	mov	r2, r0
 8018730:	69bb      	ldr	r3, [r7, #24]
 8018732:	1ad3      	subs	r3, r2, r3
 8018734:	683a      	ldr	r2, [r7, #0]
 8018736:	429a      	cmp	r2, r3
 8018738:	d302      	bcc.n	8018740 <I2C_WaitOnFlagUntilTimeout+0x44>
 801873a:	683b      	ldr	r3, [r7, #0]
 801873c:	2b00      	cmp	r3, #0
 801873e:	d122      	bne.n	8018786 <I2C_WaitOnFlagUntilTimeout+0x8a>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8018740:	68fb      	ldr	r3, [r7, #12]
 8018742:	681b      	ldr	r3, [r3, #0]
 8018744:	699a      	ldr	r2, [r3, #24]
 8018746:	68bb      	ldr	r3, [r7, #8]
 8018748:	4013      	ands	r3, r2
 801874a:	68ba      	ldr	r2, [r7, #8]
 801874c:	429a      	cmp	r2, r3
 801874e:	bf0c      	ite	eq
 8018750:	2301      	moveq	r3, #1
 8018752:	2300      	movne	r3, #0
 8018754:	b2db      	uxtb	r3, r3
 8018756:	461a      	mov	r2, r3
 8018758:	79fb      	ldrb	r3, [r7, #7]
 801875a:	429a      	cmp	r2, r3
 801875c:	d113      	bne.n	8018786 <I2C_WaitOnFlagUntilTimeout+0x8a>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 801875e:	68fb      	ldr	r3, [r7, #12]
 8018760:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018762:	f043 0220 	orr.w	r2, r3, #32
 8018766:	68fb      	ldr	r3, [r7, #12]
 8018768:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 801876a:	68fb      	ldr	r3, [r7, #12]
 801876c:	2220      	movs	r2, #32
 801876e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018772:	68fb      	ldr	r3, [r7, #12]
 8018774:	2200      	movs	r2, #0
 8018776:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 801877a:	68fb      	ldr	r3, [r7, #12]
 801877c:	2200      	movs	r2, #0
 801877e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
          return HAL_ERROR;
 8018782:	2301      	movs	r3, #1
 8018784:	e00f      	b.n	80187a6 <I2C_WaitOnFlagUntilTimeout+0xaa>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8018786:	68fb      	ldr	r3, [r7, #12]
 8018788:	681b      	ldr	r3, [r3, #0]
 801878a:	699a      	ldr	r2, [r3, #24]
 801878c:	68bb      	ldr	r3, [r7, #8]
 801878e:	4013      	ands	r3, r2
 8018790:	68ba      	ldr	r2, [r7, #8]
 8018792:	429a      	cmp	r2, r3
 8018794:	bf0c      	ite	eq
 8018796:	2301      	moveq	r3, #1
 8018798:	2300      	movne	r3, #0
 801879a:	b2db      	uxtb	r3, r3
 801879c:	461a      	mov	r2, r3
 801879e:	79fb      	ldrb	r3, [r7, #7]
 80187a0:	429a      	cmp	r2, r3
 80187a2:	d0b4      	beq.n	801870e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80187a4:	2300      	movs	r3, #0
}
 80187a6:	4618      	mov	r0, r3
 80187a8:	3710      	adds	r7, #16
 80187aa:	46bd      	mov	sp, r7
 80187ac:	bd80      	pop	{r7, pc}

080187ae <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 80187ae:	b580      	push	{r7, lr}
 80187b0:	b084      	sub	sp, #16
 80187b2:	af00      	add	r7, sp, #0
 80187b4:	60f8      	str	r0, [r7, #12]
 80187b6:	60b9      	str	r1, [r7, #8]
 80187b8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 80187ba:	e033      	b.n	8018824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 80187bc:	687a      	ldr	r2, [r7, #4]
 80187be:	68b9      	ldr	r1, [r7, #8]
 80187c0:	68f8      	ldr	r0, [r7, #12]
 80187c2:	f000 f87f 	bl	80188c4 <I2C_IsErrorOccurred>
 80187c6:	4603      	mov	r3, r0
 80187c8:	2b00      	cmp	r3, #0
 80187ca:	d001      	beq.n	80187d0 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 80187cc:	2301      	movs	r3, #1
 80187ce:	e031      	b.n	8018834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80187d0:	68bb      	ldr	r3, [r7, #8]
 80187d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80187d6:	d025      	beq.n	8018824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80187d8:	f7f9 fcd0 	bl	801217c <HAL_GetTick>
 80187dc:	4602      	mov	r2, r0
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	1ad3      	subs	r3, r2, r3
 80187e2:	68ba      	ldr	r2, [r7, #8]
 80187e4:	429a      	cmp	r2, r3
 80187e6:	d302      	bcc.n	80187ee <I2C_WaitOnTXISFlagUntilTimeout+0x40>
 80187e8:	68bb      	ldr	r3, [r7, #8]
 80187ea:	2b00      	cmp	r3, #0
 80187ec:	d11a      	bne.n	8018824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	681b      	ldr	r3, [r3, #0]
 80187f2:	699b      	ldr	r3, [r3, #24]
 80187f4:	f003 0302 	and.w	r3, r3, #2
 80187f8:	2b02      	cmp	r3, #2
 80187fa:	d013      	beq.n	8018824 <I2C_WaitOnTXISFlagUntilTimeout+0x76>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018800:	f043 0220 	orr.w	r2, r3, #32
 8018804:	68fb      	ldr	r3, [r7, #12]
 8018806:	645a      	str	r2, [r3, #68]	@ 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8018808:	68fb      	ldr	r3, [r7, #12]
 801880a:	2220      	movs	r2, #32
 801880c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8018810:	68fb      	ldr	r3, [r7, #12]
 8018812:	2200      	movs	r2, #0
 8018814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8018818:	68fb      	ldr	r3, [r7, #12]
 801881a:	2200      	movs	r2, #0
 801881c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8018820:	2301      	movs	r3, #1
 8018822:	e007      	b.n	8018834 <I2C_WaitOnTXISFlagUntilTimeout+0x86>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	681b      	ldr	r3, [r3, #0]
 8018828:	699b      	ldr	r3, [r3, #24]
 801882a:	f003 0302 	and.w	r3, r3, #2
 801882e:	2b02      	cmp	r3, #2
 8018830:	d1c4      	bne.n	80187bc <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8018832:	2300      	movs	r3, #0
}
 8018834:	4618      	mov	r0, r3
 8018836:	3710      	adds	r7, #16
 8018838:	46bd      	mov	sp, r7
 801883a:	bd80      	pop	{r7, pc}

0801883c <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 801883c:	b580      	push	{r7, lr}
 801883e:	b084      	sub	sp, #16
 8018840:	af00      	add	r7, sp, #0
 8018842:	60f8      	str	r0, [r7, #12]
 8018844:	60b9      	str	r1, [r7, #8]
 8018846:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018848:	e02f      	b.n	80188aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 801884a:	687a      	ldr	r2, [r7, #4]
 801884c:	68b9      	ldr	r1, [r7, #8]
 801884e:	68f8      	ldr	r0, [r7, #12]
 8018850:	f000 f838 	bl	80188c4 <I2C_IsErrorOccurred>
 8018854:	4603      	mov	r3, r0
 8018856:	2b00      	cmp	r3, #0
 8018858:	d001      	beq.n	801885e <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 801885a:	2301      	movs	r3, #1
 801885c:	e02d      	b.n	80188ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801885e:	f7f9 fc8d 	bl	801217c <HAL_GetTick>
 8018862:	4602      	mov	r2, r0
 8018864:	687b      	ldr	r3, [r7, #4]
 8018866:	1ad3      	subs	r3, r2, r3
 8018868:	68ba      	ldr	r2, [r7, #8]
 801886a:	429a      	cmp	r2, r3
 801886c:	d302      	bcc.n	8018874 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 801886e:	68bb      	ldr	r3, [r7, #8]
 8018870:	2b00      	cmp	r3, #0
 8018872:	d11a      	bne.n	80188aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8018874:	68fb      	ldr	r3, [r7, #12]
 8018876:	681b      	ldr	r3, [r3, #0]
 8018878:	699b      	ldr	r3, [r3, #24]
 801887a:	f003 0320 	and.w	r3, r3, #32
 801887e:	2b20      	cmp	r3, #32
 8018880:	d013      	beq.n	80188aa <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8018882:	68fb      	ldr	r3, [r7, #12]
 8018884:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8018886:	f043 0220 	orr.w	r2, r3, #32
 801888a:	68fb      	ldr	r3, [r7, #12]
 801888c:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 801888e:	68fb      	ldr	r3, [r7, #12]
 8018890:	2220      	movs	r2, #32
 8018892:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8018896:	68fb      	ldr	r3, [r7, #12]
 8018898:	2200      	movs	r2, #0
 801889a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 801889e:	68fb      	ldr	r3, [r7, #12]
 80188a0:	2200      	movs	r2, #0
 80188a2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_ERROR;
 80188a6:	2301      	movs	r3, #1
 80188a8:	e007      	b.n	80188ba <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 80188aa:	68fb      	ldr	r3, [r7, #12]
 80188ac:	681b      	ldr	r3, [r3, #0]
 80188ae:	699b      	ldr	r3, [r3, #24]
 80188b0:	f003 0320 	and.w	r3, r3, #32
 80188b4:	2b20      	cmp	r3, #32
 80188b6:	d1c8      	bne.n	801884a <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80188b8:	2300      	movs	r3, #0
}
 80188ba:	4618      	mov	r0, r3
 80188bc:	3710      	adds	r7, #16
 80188be:	46bd      	mov	sp, r7
 80188c0:	bd80      	pop	{r7, pc}
	...

080188c4 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80188c4:	b580      	push	{r7, lr}
 80188c6:	b08a      	sub	sp, #40	@ 0x28
 80188c8:	af00      	add	r7, sp, #0
 80188ca:	60f8      	str	r0, [r7, #12]
 80188cc:	60b9      	str	r1, [r7, #8]
 80188ce:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80188d0:	2300      	movs	r3, #0
 80188d2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  uint32_t itflag   = hi2c->Instance->ISR;
 80188d6:	68fb      	ldr	r3, [r7, #12]
 80188d8:	681b      	ldr	r3, [r3, #0]
 80188da:	699b      	ldr	r3, [r3, #24]
 80188dc:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 80188de:	2300      	movs	r3, #0
 80188e0:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 80188e2:	687b      	ldr	r3, [r7, #4]
 80188e4:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 80188e6:	69bb      	ldr	r3, [r7, #24]
 80188e8:	f003 0310 	and.w	r3, r3, #16
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d068      	beq.n	80189c2 <I2C_IsErrorOccurred+0xfe>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80188f0:	68fb      	ldr	r3, [r7, #12]
 80188f2:	681b      	ldr	r3, [r3, #0]
 80188f4:	2210      	movs	r2, #16
 80188f6:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 80188f8:	e049      	b.n	801898e <I2C_IsErrorOccurred+0xca>
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 80188fa:	68bb      	ldr	r3, [r7, #8]
 80188fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8018900:	d045      	beq.n	801898e <I2C_IsErrorOccurred+0xca>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8018902:	f7f9 fc3b 	bl	801217c <HAL_GetTick>
 8018906:	4602      	mov	r2, r0
 8018908:	69fb      	ldr	r3, [r7, #28]
 801890a:	1ad3      	subs	r3, r2, r3
 801890c:	68ba      	ldr	r2, [r7, #8]
 801890e:	429a      	cmp	r2, r3
 8018910:	d302      	bcc.n	8018918 <I2C_IsErrorOccurred+0x54>
 8018912:	68bb      	ldr	r3, [r7, #8]
 8018914:	2b00      	cmp	r3, #0
 8018916:	d13a      	bne.n	801898e <I2C_IsErrorOccurred+0xca>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	681b      	ldr	r3, [r3, #0]
 801891c:	685b      	ldr	r3, [r3, #4]
 801891e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8018922:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8018924:	68fb      	ldr	r3, [r7, #12]
 8018926:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 801892a:	74fb      	strb	r3, [r7, #19]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 801892c:	68fb      	ldr	r3, [r7, #12]
 801892e:	681b      	ldr	r3, [r3, #0]
 8018930:	699b      	ldr	r3, [r3, #24]
 8018932:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8018936:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801893a:	d121      	bne.n	8018980 <I2C_IsErrorOccurred+0xbc>
 801893c:	697b      	ldr	r3, [r7, #20]
 801893e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8018942:	d01d      	beq.n	8018980 <I2C_IsErrorOccurred+0xbc>
              (tmp1 != I2C_CR2_STOP) && \
 8018944:	7cfb      	ldrb	r3, [r7, #19]
 8018946:	2b20      	cmp	r3, #32
 8018948:	d01a      	beq.n	8018980 <I2C_IsErrorOccurred+0xbc>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 801894a:	68fb      	ldr	r3, [r7, #12]
 801894c:	681b      	ldr	r3, [r3, #0]
 801894e:	685a      	ldr	r2, [r3, #4]
 8018950:	68fb      	ldr	r3, [r7, #12]
 8018952:	681b      	ldr	r3, [r3, #0]
 8018954:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8018958:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 801895a:	f7f9 fc0f 	bl	801217c <HAL_GetTick>
 801895e:	61f8      	str	r0, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018960:	e00e      	b.n	8018980 <I2C_IsErrorOccurred+0xbc>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8018962:	f7f9 fc0b 	bl	801217c <HAL_GetTick>
 8018966:	4602      	mov	r2, r0
 8018968:	69fb      	ldr	r3, [r7, #28]
 801896a:	1ad3      	subs	r3, r2, r3
 801896c:	2b19      	cmp	r3, #25
 801896e:	d907      	bls.n	8018980 <I2C_IsErrorOccurred+0xbc>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8018970:	6a3b      	ldr	r3, [r7, #32]
 8018972:	f043 0320 	orr.w	r3, r3, #32
 8018976:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8018978:	2301      	movs	r3, #1
 801897a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

              break;
 801897e:	e006      	b.n	801898e <I2C_IsErrorOccurred+0xca>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8018980:	68fb      	ldr	r3, [r7, #12]
 8018982:	681b      	ldr	r3, [r3, #0]
 8018984:	699b      	ldr	r3, [r3, #24]
 8018986:	f003 0320 	and.w	r3, r3, #32
 801898a:	2b20      	cmp	r3, #32
 801898c:	d1e9      	bne.n	8018962 <I2C_IsErrorOccurred+0x9e>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 801898e:	68fb      	ldr	r3, [r7, #12]
 8018990:	681b      	ldr	r3, [r3, #0]
 8018992:	699b      	ldr	r3, [r3, #24]
 8018994:	f003 0320 	and.w	r3, r3, #32
 8018998:	2b20      	cmp	r3, #32
 801899a:	d003      	beq.n	80189a4 <I2C_IsErrorOccurred+0xe0>
 801899c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189a0:	2b00      	cmp	r3, #0
 80189a2:	d0aa      	beq.n	80188fa <I2C_IsErrorOccurred+0x36>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 80189a4:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80189a8:	2b00      	cmp	r3, #0
 80189aa:	d103      	bne.n	80189b4 <I2C_IsErrorOccurred+0xf0>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80189ac:	68fb      	ldr	r3, [r7, #12]
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	2220      	movs	r2, #32
 80189b2:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 80189b4:	6a3b      	ldr	r3, [r7, #32]
 80189b6:	f043 0304 	orr.w	r3, r3, #4
 80189ba:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 80189bc:	2301      	movs	r3, #1
 80189be:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 80189c2:	68fb      	ldr	r3, [r7, #12]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	699b      	ldr	r3, [r3, #24]
 80189c8:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 80189ca:	69bb      	ldr	r3, [r7, #24]
 80189cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80189d0:	2b00      	cmp	r3, #0
 80189d2:	d00b      	beq.n	80189ec <I2C_IsErrorOccurred+0x128>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 80189d4:	6a3b      	ldr	r3, [r7, #32]
 80189d6:	f043 0301 	orr.w	r3, r3, #1
 80189da:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80189dc:	68fb      	ldr	r3, [r7, #12]
 80189de:	681b      	ldr	r3, [r3, #0]
 80189e0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80189e4:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 80189e6:	2301      	movs	r3, #1
 80189e8:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 80189ec:	69bb      	ldr	r3, [r7, #24]
 80189ee:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80189f2:	2b00      	cmp	r3, #0
 80189f4:	d00b      	beq.n	8018a0e <I2C_IsErrorOccurred+0x14a>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 80189f6:	6a3b      	ldr	r3, [r7, #32]
 80189f8:	f043 0308 	orr.w	r3, r3, #8
 80189fc:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 80189fe:	68fb      	ldr	r3, [r7, #12]
 8018a00:	681b      	ldr	r3, [r3, #0]
 8018a02:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8018a06:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a08:	2301      	movs	r3, #1
 8018a0a:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8018a0e:	69bb      	ldr	r3, [r7, #24]
 8018a10:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d00b      	beq.n	8018a30 <I2C_IsErrorOccurred+0x16c>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8018a18:	6a3b      	ldr	r3, [r7, #32]
 8018a1a:	f043 0302 	orr.w	r3, r3, #2
 8018a1e:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8018a20:	68fb      	ldr	r3, [r7, #12]
 8018a22:	681b      	ldr	r3, [r3, #0]
 8018a24:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8018a28:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8018a2a:	2301      	movs	r3, #1
 8018a2c:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  if (status != HAL_OK)
 8018a30:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8018a34:	2b00      	cmp	r3, #0
 8018a36:	d01c      	beq.n	8018a72 <I2C_IsErrorOccurred+0x1ae>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8018a38:	68f8      	ldr	r0, [r7, #12]
 8018a3a:	f7ff fe3b 	bl	80186b4 <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8018a3e:	68fb      	ldr	r3, [r7, #12]
 8018a40:	681b      	ldr	r3, [r3, #0]
 8018a42:	6859      	ldr	r1, [r3, #4]
 8018a44:	68fb      	ldr	r3, [r7, #12]
 8018a46:	681a      	ldr	r2, [r3, #0]
 8018a48:	4b0d      	ldr	r3, [pc, #52]	@ (8018a80 <I2C_IsErrorOccurred+0x1bc>)
 8018a4a:	400b      	ands	r3, r1
 8018a4c:	6053      	str	r3, [r2, #4]

    hi2c->ErrorCode |= error_code;
 8018a4e:	68fb      	ldr	r3, [r7, #12]
 8018a50:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8018a52:	6a3b      	ldr	r3, [r7, #32]
 8018a54:	431a      	orrs	r2, r3
 8018a56:	68fb      	ldr	r3, [r7, #12]
 8018a58:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8018a5a:	68fb      	ldr	r3, [r7, #12]
 8018a5c:	2220      	movs	r2, #32
 8018a5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8018a62:	68fb      	ldr	r3, [r7, #12]
 8018a64:	2200      	movs	r2, #0
 8018a66:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018a6a:	68fb      	ldr	r3, [r7, #12]
 8018a6c:	2200      	movs	r2, #0
 8018a6e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  }

  return status;
 8018a72:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8018a76:	4618      	mov	r0, r3
 8018a78:	3728      	adds	r7, #40	@ 0x28
 8018a7a:	46bd      	mov	sp, r7
 8018a7c:	bd80      	pop	{r7, pc}
 8018a7e:	bf00      	nop
 8018a80:	fe00e800 	.word	0xfe00e800

08018a84 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8018a84:	b480      	push	{r7}
 8018a86:	b087      	sub	sp, #28
 8018a88:	af00      	add	r7, sp, #0
 8018a8a:	60f8      	str	r0, [r7, #12]
 8018a8c:	607b      	str	r3, [r7, #4]
 8018a8e:	460b      	mov	r3, r1
 8018a90:	817b      	strh	r3, [r7, #10]
 8018a92:	4613      	mov	r3, r2
 8018a94:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018a96:	897b      	ldrh	r3, [r7, #10]
 8018a98:	f3c3 0209 	ubfx	r2, r3, #0, #10
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018a9c:	7a7b      	ldrb	r3, [r7, #9]
 8018a9e:	041b      	lsls	r3, r3, #16
 8018aa0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018aa4:	431a      	orrs	r2, r3
                    (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8018aa6:	687b      	ldr	r3, [r7, #4]
 8018aa8:	431a      	orrs	r2, r3
  tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8018aaa:	6a3b      	ldr	r3, [r7, #32]
 8018aac:	4313      	orrs	r3, r2
 8018aae:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8018ab2:	617b      	str	r3, [r7, #20]
                    (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8018ab4:	68fb      	ldr	r3, [r7, #12]
 8018ab6:	681b      	ldr	r3, [r3, #0]
 8018ab8:	685a      	ldr	r2, [r3, #4]
 8018aba:	6a3b      	ldr	r3, [r7, #32]
 8018abc:	0d5b      	lsrs	r3, r3, #21
 8018abe:	f403 6180 	and.w	r1, r3, #1024	@ 0x400
 8018ac2:	4b08      	ldr	r3, [pc, #32]	@ (8018ae4 <I2C_TransferConfig+0x60>)
 8018ac4:	430b      	orrs	r3, r1
 8018ac6:	43db      	mvns	r3, r3
 8018ac8:	ea02 0103 	and.w	r1, r2, r3
 8018acc:	68fb      	ldr	r3, [r7, #12]
 8018ace:	681b      	ldr	r3, [r3, #0]
 8018ad0:	697a      	ldr	r2, [r7, #20]
 8018ad2:	430a      	orrs	r2, r1
 8018ad4:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8018ad6:	bf00      	nop
 8018ad8:	371c      	adds	r7, #28
 8018ada:	46bd      	mov	sp, r7
 8018adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018ae0:	4770      	bx	lr
 8018ae2:	bf00      	nop
 8018ae4:	03ff63ff 	.word	0x03ff63ff

08018ae8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8018ae8:	b480      	push	{r7}
 8018aea:	b083      	sub	sp, #12
 8018aec:	af00      	add	r7, sp, #0
 8018aee:	6078      	str	r0, [r7, #4]
 8018af0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018af2:	687b      	ldr	r3, [r7, #4]
 8018af4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8018af8:	b2db      	uxtb	r3, r3
 8018afa:	2b20      	cmp	r3, #32
 8018afc:	d138      	bne.n	8018b70 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018afe:	687b      	ldr	r3, [r7, #4]
 8018b00:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018b04:	2b01      	cmp	r3, #1
 8018b06:	d101      	bne.n	8018b0c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8018b08:	2302      	movs	r3, #2
 8018b0a:	e032      	b.n	8018b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8018b0c:	687b      	ldr	r3, [r7, #4]
 8018b0e:	2201      	movs	r2, #1
 8018b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018b14:	687b      	ldr	r3, [r7, #4]
 8018b16:	2224      	movs	r2, #36	@ 0x24
 8018b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018b1c:	687b      	ldr	r3, [r7, #4]
 8018b1e:	681b      	ldr	r3, [r3, #0]
 8018b20:	681a      	ldr	r2, [r3, #0]
 8018b22:	687b      	ldr	r3, [r7, #4]
 8018b24:	681b      	ldr	r3, [r3, #0]
 8018b26:	f022 0201 	bic.w	r2, r2, #1
 8018b2a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8018b2c:	687b      	ldr	r3, [r7, #4]
 8018b2e:	681b      	ldr	r3, [r3, #0]
 8018b30:	681a      	ldr	r2, [r3, #0]
 8018b32:	687b      	ldr	r3, [r7, #4]
 8018b34:	681b      	ldr	r3, [r3, #0]
 8018b36:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8018b3a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	681b      	ldr	r3, [r3, #0]
 8018b40:	6819      	ldr	r1, [r3, #0]
 8018b42:	687b      	ldr	r3, [r7, #4]
 8018b44:	681b      	ldr	r3, [r3, #0]
 8018b46:	683a      	ldr	r2, [r7, #0]
 8018b48:	430a      	orrs	r2, r1
 8018b4a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	681b      	ldr	r3, [r3, #0]
 8018b50:	681a      	ldr	r2, [r3, #0]
 8018b52:	687b      	ldr	r3, [r7, #4]
 8018b54:	681b      	ldr	r3, [r3, #0]
 8018b56:	f042 0201 	orr.w	r2, r2, #1
 8018b5a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018b5c:	687b      	ldr	r3, [r7, #4]
 8018b5e:	2220      	movs	r2, #32
 8018b60:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018b64:	687b      	ldr	r3, [r7, #4]
 8018b66:	2200      	movs	r2, #0
 8018b68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8018b6c:	2300      	movs	r3, #0
 8018b6e:	e000      	b.n	8018b72 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018b70:	2302      	movs	r3, #2
  }
}
 8018b72:	4618      	mov	r0, r3
 8018b74:	370c      	adds	r7, #12
 8018b76:	46bd      	mov	sp, r7
 8018b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b7c:	4770      	bx	lr

08018b7e <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8018b7e:	b480      	push	{r7}
 8018b80:	b085      	sub	sp, #20
 8018b82:	af00      	add	r7, sp, #0
 8018b84:	6078      	str	r0, [r7, #4]
 8018b86:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8018b88:	687b      	ldr	r3, [r7, #4]
 8018b8a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8018b8e:	b2db      	uxtb	r3, r3
 8018b90:	2b20      	cmp	r3, #32
 8018b92:	d139      	bne.n	8018c08 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8018b94:	687b      	ldr	r3, [r7, #4]
 8018b96:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8018b9a:	2b01      	cmp	r3, #1
 8018b9c:	d101      	bne.n	8018ba2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8018b9e:	2302      	movs	r3, #2
 8018ba0:	e033      	b.n	8018c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8018ba2:	687b      	ldr	r3, [r7, #4]
 8018ba4:	2201      	movs	r2, #1
 8018ba6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	2224      	movs	r2, #36	@ 0x24
 8018bae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	681a      	ldr	r2, [r3, #0]
 8018bb8:	687b      	ldr	r3, [r7, #4]
 8018bba:	681b      	ldr	r3, [r3, #0]
 8018bbc:	f022 0201 	bic.w	r2, r2, #1
 8018bc0:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8018bc2:	687b      	ldr	r3, [r7, #4]
 8018bc4:	681b      	ldr	r3, [r3, #0]
 8018bc6:	681b      	ldr	r3, [r3, #0]
 8018bc8:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8018bca:	68fb      	ldr	r3, [r7, #12]
 8018bcc:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8018bd0:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8018bd2:	683b      	ldr	r3, [r7, #0]
 8018bd4:	021b      	lsls	r3, r3, #8
 8018bd6:	68fa      	ldr	r2, [r7, #12]
 8018bd8:	4313      	orrs	r3, r2
 8018bda:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8018bdc:	687b      	ldr	r3, [r7, #4]
 8018bde:	681b      	ldr	r3, [r3, #0]
 8018be0:	68fa      	ldr	r2, [r7, #12]
 8018be2:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8018be4:	687b      	ldr	r3, [r7, #4]
 8018be6:	681b      	ldr	r3, [r3, #0]
 8018be8:	681a      	ldr	r2, [r3, #0]
 8018bea:	687b      	ldr	r3, [r7, #4]
 8018bec:	681b      	ldr	r3, [r3, #0]
 8018bee:	f042 0201 	orr.w	r2, r2, #1
 8018bf2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	2220      	movs	r2, #32
 8018bf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	2200      	movs	r2, #0
 8018c00:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8018c04:	2300      	movs	r3, #0
 8018c06:	e000      	b.n	8018c0a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8018c08:	2302      	movs	r3, #2
  }
}
 8018c0a:	4618      	mov	r0, r3
 8018c0c:	3714      	adds	r7, #20
 8018c0e:	46bd      	mov	sp, r7
 8018c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018c14:	4770      	bx	lr

08018c16 <HAL_LTDC_Init>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_Init(LTDC_HandleTypeDef *hltdc)
{
 8018c16:	b580      	push	{r7, lr}
 8018c18:	b084      	sub	sp, #16
 8018c1a:	af00      	add	r7, sp, #0
 8018c1c:	6078      	str	r0, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;

  /* Check the LTDC peripheral state */
  if (hltdc == NULL)
 8018c1e:	687b      	ldr	r3, [r7, #4]
 8018c20:	2b00      	cmp	r3, #0
 8018c22:	d101      	bne.n	8018c28 <HAL_LTDC_Init+0x12>
  {
    return HAL_ERROR;
 8018c24:	2301      	movs	r3, #1
 8018c26:	e08f      	b.n	8018d48 <HAL_LTDC_Init+0x132>
    }
    /* Init the low level hardware */
    hltdc->MspInitCallback(hltdc);
  }
#else
  if (hltdc->State == HAL_LTDC_STATE_RESET)
 8018c28:	687b      	ldr	r3, [r7, #4]
 8018c2a:	f893 30a1 	ldrb.w	r3, [r3, #161]	@ 0xa1
 8018c2e:	b2db      	uxtb	r3, r3
 8018c30:	2b00      	cmp	r3, #0
 8018c32:	d106      	bne.n	8018c42 <HAL_LTDC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hltdc->Lock = HAL_UNLOCKED;
 8018c34:	687b      	ldr	r3, [r7, #4]
 8018c36:	2200      	movs	r2, #0
 8018c38:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0
    /* Init the low level hardware */
    HAL_LTDC_MspInit(hltdc);
 8018c3c:	6878      	ldr	r0, [r7, #4]
 8018c3e:	f000 f887 	bl	8018d50 <HAL_LTDC_MspInit>
  }
#endif /* USE_HAL_LTDC_REGISTER_CALLBACKS */

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	2202      	movs	r2, #2
 8018c46:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Configure the HS, VS, DE and PC polarity */
  hltdc->Instance->GCR &= ~(LTDC_GCR_HSPOL | LTDC_GCR_VSPOL | LTDC_GCR_DEPOL | LTDC_GCR_PCPOL);
 8018c4a:	687b      	ldr	r3, [r7, #4]
 8018c4c:	681b      	ldr	r3, [r3, #0]
 8018c4e:	699a      	ldr	r2, [r3, #24]
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	681b      	ldr	r3, [r3, #0]
 8018c54:	f022 4270 	bic.w	r2, r2, #4026531840	@ 0xf0000000
 8018c58:	619a      	str	r2, [r3, #24]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	681b      	ldr	r3, [r3, #0]
 8018c5e:	6999      	ldr	r1, [r3, #24]
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	685a      	ldr	r2, [r3, #4]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	689b      	ldr	r3, [r3, #8]
 8018c68:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8018c6a:	687b      	ldr	r3, [r7, #4]
 8018c6c:	68db      	ldr	r3, [r3, #12]
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8018c6e:	431a      	orrs	r2, r3
                                     hltdc->Init.DEPolarity | hltdc->Init.PCPolarity);
 8018c70:	687b      	ldr	r3, [r7, #4]
 8018c72:	691b      	ldr	r3, [r3, #16]
 8018c74:	431a      	orrs	r2, r3
  hltdc->Instance->GCR |= (uint32_t)(hltdc->Init.HSPolarity | hltdc->Init.VSPolarity | \
 8018c76:	687b      	ldr	r3, [r7, #4]
 8018c78:	681b      	ldr	r3, [r3, #0]
 8018c7a:	430a      	orrs	r2, r1
 8018c7c:	619a      	str	r2, [r3, #24]

  /* Set Synchronization size */
  tmp = (hltdc->Init.HorizontalSync << 16U);
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	695b      	ldr	r3, [r3, #20]
 8018c82:	041b      	lsls	r3, r3, #16
 8018c84:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->SSCR, (tmp | hltdc->Init.VerticalSync));
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	6999      	ldr	r1, [r3, #24]
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	68fa      	ldr	r2, [r7, #12]
 8018c90:	430a      	orrs	r2, r1
 8018c92:	609a      	str	r2, [r3, #8]

  /* Set Accumulated Back porch */
  tmp = (hltdc->Init.AccumulatedHBP << 16U);
 8018c94:	687b      	ldr	r3, [r7, #4]
 8018c96:	69db      	ldr	r3, [r3, #28]
 8018c98:	041b      	lsls	r3, r3, #16
 8018c9a:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->BPCR, (tmp | hltdc->Init.AccumulatedVBP));
 8018c9c:	687b      	ldr	r3, [r7, #4]
 8018c9e:	6a19      	ldr	r1, [r3, #32]
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	68fa      	ldr	r2, [r7, #12]
 8018ca6:	430a      	orrs	r2, r1
 8018ca8:	60da      	str	r2, [r3, #12]

  /* Set Accumulated Active Width */
  tmp = (hltdc->Init.AccumulatedActiveW << 16U);
 8018caa:	687b      	ldr	r3, [r7, #4]
 8018cac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018cae:	041b      	lsls	r3, r3, #16
 8018cb0:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->AWCR, (tmp | hltdc->Init.AccumulatedActiveH));
 8018cb2:	687b      	ldr	r3, [r7, #4]
 8018cb4:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8018cb6:	687b      	ldr	r3, [r7, #4]
 8018cb8:	681b      	ldr	r3, [r3, #0]
 8018cba:	68fa      	ldr	r2, [r7, #12]
 8018cbc:	430a      	orrs	r2, r1
 8018cbe:	611a      	str	r2, [r3, #16]

  /* Set Total Width */
  tmp = (hltdc->Init.TotalWidth << 16U);
 8018cc0:	687b      	ldr	r3, [r7, #4]
 8018cc2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018cc4:	041b      	lsls	r3, r3, #16
 8018cc6:	60fb      	str	r3, [r7, #12]
  WRITE_REG(hltdc->Instance->TWCR, (tmp | hltdc->Init.TotalHeigh));
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8018ccc:	687b      	ldr	r3, [r7, #4]
 8018cce:	681b      	ldr	r3, [r3, #0]
 8018cd0:	68fa      	ldr	r2, [r7, #12]
 8018cd2:	430a      	orrs	r2, r1
 8018cd4:	615a      	str	r2, [r3, #20]

  /* Set the background color value */
  tmp = ((uint32_t)(hltdc->Init.Backcolor.Green) << 8U);
 8018cd6:	687b      	ldr	r3, [r7, #4]
 8018cd8:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8018cdc:	021b      	lsls	r3, r3, #8
 8018cde:	60fb      	str	r3, [r7, #12]
  tmp1 = ((uint32_t)(hltdc->Init.Backcolor.Red) << 16U);
 8018ce0:	687b      	ldr	r3, [r7, #4]
 8018ce2:	f893 3036 	ldrb.w	r3, [r3, #54]	@ 0x36
 8018ce6:	041b      	lsls	r3, r3, #16
 8018ce8:	60bb      	str	r3, [r7, #8]
  hltdc->Instance->BCCR &= ~(LTDC_BCCR_BCBLUE | LTDC_BCCR_BCGREEN | LTDC_BCCR_BCRED);
 8018cea:	687b      	ldr	r3, [r7, #4]
 8018cec:	681b      	ldr	r3, [r3, #0]
 8018cee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	681b      	ldr	r3, [r3, #0]
 8018cf4:	f002 427f 	and.w	r2, r2, #4278190080	@ 0xff000000
 8018cf8:	62da      	str	r2, [r3, #44]	@ 0x2c
  hltdc->Instance->BCCR |= (tmp1 | tmp | hltdc->Init.Backcolor.Blue);
 8018cfa:	687b      	ldr	r3, [r7, #4]
 8018cfc:	681b      	ldr	r3, [r3, #0]
 8018cfe:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8018d00:	68ba      	ldr	r2, [r7, #8]
 8018d02:	68fb      	ldr	r3, [r7, #12]
 8018d04:	4313      	orrs	r3, r2
 8018d06:	687a      	ldr	r2, [r7, #4]
 8018d08:	f892 2034 	ldrb.w	r2, [r2, #52]	@ 0x34
 8018d0c:	431a      	orrs	r2, r3
 8018d0e:	687b      	ldr	r3, [r7, #4]
 8018d10:	681b      	ldr	r3, [r3, #0]
 8018d12:	430a      	orrs	r2, r1
 8018d14:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable the Transfer Error and FIFO underrun interrupts */
  __HAL_LTDC_ENABLE_IT(hltdc, LTDC_IT_TE | LTDC_IT_FU);
 8018d16:	687b      	ldr	r3, [r7, #4]
 8018d18:	681b      	ldr	r3, [r3, #0]
 8018d1a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8018d1c:	687b      	ldr	r3, [r7, #4]
 8018d1e:	681b      	ldr	r3, [r3, #0]
 8018d20:	f042 0206 	orr.w	r2, r2, #6
 8018d24:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Enable LTDC by setting LTDCEN bit */
  __HAL_LTDC_ENABLE(hltdc);
 8018d26:	687b      	ldr	r3, [r7, #4]
 8018d28:	681b      	ldr	r3, [r3, #0]
 8018d2a:	699a      	ldr	r2, [r3, #24]
 8018d2c:	687b      	ldr	r3, [r7, #4]
 8018d2e:	681b      	ldr	r3, [r3, #0]
 8018d30:	f042 0201 	orr.w	r2, r2, #1
 8018d34:	619a      	str	r2, [r3, #24]

  /* Initialize the error code */
  hltdc->ErrorCode = HAL_LTDC_ERROR_NONE;
 8018d36:	687b      	ldr	r3, [r7, #4]
 8018d38:	2200      	movs	r2, #0
 8018d3a:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4

  /* Initialize the LTDC state*/
  hltdc->State = HAL_LTDC_STATE_READY;
 8018d3e:	687b      	ldr	r3, [r7, #4]
 8018d40:	2201      	movs	r2, #1
 8018d42:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  return HAL_OK;
 8018d46:	2300      	movs	r3, #0
}
 8018d48:	4618      	mov	r0, r3
 8018d4a:	3710      	adds	r7, #16
 8018d4c:	46bd      	mov	sp, r7
 8018d4e:	bd80      	pop	{r7, pc}

08018d50 <HAL_LTDC_MspInit>:
  * @param  hltdc  pointer to a LTDC_HandleTypeDef structure that contains
  *                the configuration information for the LTDC.
  * @retval None
  */
__weak void HAL_LTDC_MspInit(LTDC_HandleTypeDef *hltdc)
{
 8018d50:	b480      	push	{r7}
 8018d52:	b083      	sub	sp, #12
 8018d54:	af00      	add	r7, sp, #0
 8018d56:	6078      	str	r0, [r7, #4]
  UNUSED(hltdc);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_LTDC_MspInit could be implemented in the user file
   */
}
 8018d58:	bf00      	nop
 8018d5a:	370c      	adds	r7, #12
 8018d5c:	46bd      	mov	sp, r7
 8018d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d62:	4770      	bx	lr

08018d64 <HAL_LTDC_ConfigLayer>:
  *                    This parameter can be one of the following values:
  *                    LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_LTDC_ConfigLayer(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8018d64:	b5b0      	push	{r4, r5, r7, lr}
 8018d66:	b084      	sub	sp, #16
 8018d68:	af00      	add	r7, sp, #0
 8018d6a:	60f8      	str	r0, [r7, #12]
 8018d6c:	60b9      	str	r1, [r7, #8]
 8018d6e:	607a      	str	r2, [r7, #4]
  assert_param(IS_LTDC_BLENDING_FACTOR2(pLayerCfg->BlendingFactor2));
  assert_param(IS_LTDC_CFBLL(pLayerCfg->ImageWidth));
  assert_param(IS_LTDC_CFBLNBR(pLayerCfg->ImageHeight));

  /* Process locked */
  __HAL_LOCK(hltdc);
 8018d70:	68fb      	ldr	r3, [r7, #12]
 8018d72:	f893 30a0 	ldrb.w	r3, [r3, #160]	@ 0xa0
 8018d76:	2b01      	cmp	r3, #1
 8018d78:	d101      	bne.n	8018d7e <HAL_LTDC_ConfigLayer+0x1a>
 8018d7a:	2302      	movs	r3, #2
 8018d7c:	e02c      	b.n	8018dd8 <HAL_LTDC_ConfigLayer+0x74>
 8018d7e:	68fb      	ldr	r3, [r7, #12]
 8018d80:	2201      	movs	r2, #1
 8018d82:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  /* Change LTDC peripheral state */
  hltdc->State = HAL_LTDC_STATE_BUSY;
 8018d86:	68fb      	ldr	r3, [r7, #12]
 8018d88:	2202      	movs	r2, #2
 8018d8a:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Copy new layer configuration into handle structure */
  hltdc->LayerCfg[LayerIdx] = *pLayerCfg;
 8018d8e:	68fa      	ldr	r2, [r7, #12]
 8018d90:	687b      	ldr	r3, [r7, #4]
 8018d92:	2134      	movs	r1, #52	@ 0x34
 8018d94:	fb01 f303 	mul.w	r3, r1, r3
 8018d98:	4413      	add	r3, r2
 8018d9a:	f103 0238 	add.w	r2, r3, #56	@ 0x38
 8018d9e:	68bb      	ldr	r3, [r7, #8]
 8018da0:	4614      	mov	r4, r2
 8018da2:	461d      	mov	r5, r3
 8018da4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018da6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018da8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018daa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018dac:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8018dae:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8018db0:	682b      	ldr	r3, [r5, #0]
 8018db2:	6023      	str	r3, [r4, #0]

  /* Configure the LTDC Layer */
  LTDC_SetConfig(hltdc, pLayerCfg, LayerIdx);
 8018db4:	687a      	ldr	r2, [r7, #4]
 8018db6:	68b9      	ldr	r1, [r7, #8]
 8018db8:	68f8      	ldr	r0, [r7, #12]
 8018dba:	f000 f811 	bl	8018de0 <LTDC_SetConfig>

  /* Set the Immediate Reload type */
  hltdc->Instance->SRCR = LTDC_SRCR_IMR;
 8018dbe:	68fb      	ldr	r3, [r7, #12]
 8018dc0:	681b      	ldr	r3, [r3, #0]
 8018dc2:	2201      	movs	r2, #1
 8018dc4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the LTDC state*/
  hltdc->State  = HAL_LTDC_STATE_READY;
 8018dc6:	68fb      	ldr	r3, [r7, #12]
 8018dc8:	2201      	movs	r2, #1
 8018dca:	f883 20a1 	strb.w	r2, [r3, #161]	@ 0xa1

  /* Process unlocked */
  __HAL_UNLOCK(hltdc);
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	2200      	movs	r2, #0
 8018dd2:	f883 20a0 	strb.w	r2, [r3, #160]	@ 0xa0

  return HAL_OK;
 8018dd6:	2300      	movs	r3, #0
}
 8018dd8:	4618      	mov	r0, r3
 8018dda:	3710      	adds	r7, #16
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bdb0      	pop	{r4, r5, r7, pc}

08018de0 <LTDC_SetConfig>:
  * @param  LayerIdx  LTDC Layer index.
  *                   This parameter can be one of the following values: LTDC_LAYER_1 (0) or LTDC_LAYER_2 (1)
  * @retval None
  */
static void LTDC_SetConfig(LTDC_HandleTypeDef *hltdc, LTDC_LayerCfgTypeDef *pLayerCfg, uint32_t LayerIdx)
{
 8018de0:	b480      	push	{r7}
 8018de2:	b089      	sub	sp, #36	@ 0x24
 8018de4:	af00      	add	r7, sp, #0
 8018de6:	60f8      	str	r0, [r7, #12]
 8018de8:	60b9      	str	r1, [r7, #8]
 8018dea:	607a      	str	r2, [r7, #4]
  uint32_t tmp;
  uint32_t tmp1;
  uint32_t tmp2;

  /* Configure the horizontal start and stop position */
  tmp = ((pLayerCfg->WindowX1 + ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U)) << 16U);
 8018dec:	68bb      	ldr	r3, [r7, #8]
 8018dee:	685a      	ldr	r2, [r3, #4]
 8018df0:	68fb      	ldr	r3, [r7, #12]
 8018df2:	681b      	ldr	r3, [r3, #0]
 8018df4:	68db      	ldr	r3, [r3, #12]
 8018df6:	0c1b      	lsrs	r3, r3, #16
 8018df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8018dfc:	4413      	add	r3, r2
 8018dfe:	041b      	lsls	r3, r3, #16
 8018e00:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR &= ~(LTDC_LxWHPCR_WHSTPOS | LTDC_LxWHPCR_WHSPPOS);
 8018e02:	68fb      	ldr	r3, [r7, #12]
 8018e04:	681b      	ldr	r3, [r3, #0]
 8018e06:	461a      	mov	r2, r3
 8018e08:	687b      	ldr	r3, [r7, #4]
 8018e0a:	01db      	lsls	r3, r3, #7
 8018e0c:	4413      	add	r3, r2
 8018e0e:	3384      	adds	r3, #132	@ 0x84
 8018e10:	685b      	ldr	r3, [r3, #4]
 8018e12:	68fa      	ldr	r2, [r7, #12]
 8018e14:	6812      	ldr	r2, [r2, #0]
 8018e16:	4611      	mov	r1, r2
 8018e18:	687a      	ldr	r2, [r7, #4]
 8018e1a:	01d2      	lsls	r2, r2, #7
 8018e1c:	440a      	add	r2, r1
 8018e1e:	3284      	adds	r2, #132	@ 0x84
 8018e20:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8018e24:	6053      	str	r3, [r2, #4]
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e26:	68bb      	ldr	r3, [r7, #8]
 8018e28:	681a      	ldr	r2, [r3, #0]
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8018e2a:	68fb      	ldr	r3, [r7, #12]
 8018e2c:	681b      	ldr	r3, [r3, #0]
 8018e2e:	68db      	ldr	r3, [r3, #12]
 8018e30:	0c1b      	lsrs	r3, r3, #16
 8018e32:	f3c3 030b 	ubfx	r3, r3, #0, #12
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e36:	4413      	add	r3, r2
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8018e38:	1c5a      	adds	r2, r3, #1
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	681b      	ldr	r3, [r3, #0]
 8018e3e:	4619      	mov	r1, r3
 8018e40:	687b      	ldr	r3, [r7, #4]
 8018e42:	01db      	lsls	r3, r3, #7
 8018e44:	440b      	add	r3, r1
 8018e46:	3384      	adds	r3, #132	@ 0x84
 8018e48:	4619      	mov	r1, r3
                                         ((hltdc->Instance->BPCR & LTDC_BPCR_AHBP) >> 16U) + 1U) | tmp);
 8018e4a:	69fb      	ldr	r3, [r7, #28]
 8018e4c:	4313      	orrs	r3, r2
  LTDC_LAYER(hltdc, LayerIdx)->WHPCR = ((pLayerCfg->WindowX0 + \
 8018e4e:	604b      	str	r3, [r1, #4]

  /* Configure the vertical start and stop position */
  tmp = ((pLayerCfg->WindowY1 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP)) << 16U);
 8018e50:	68bb      	ldr	r3, [r7, #8]
 8018e52:	68da      	ldr	r2, [r3, #12]
 8018e54:	68fb      	ldr	r3, [r7, #12]
 8018e56:	681b      	ldr	r3, [r3, #0]
 8018e58:	68db      	ldr	r3, [r3, #12]
 8018e5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018e5e:	4413      	add	r3, r2
 8018e60:	041b      	lsls	r3, r3, #16
 8018e62:	61fb      	str	r3, [r7, #28]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR &= ~(LTDC_LxWVPCR_WVSTPOS | LTDC_LxWVPCR_WVSPPOS);
 8018e64:	68fb      	ldr	r3, [r7, #12]
 8018e66:	681b      	ldr	r3, [r3, #0]
 8018e68:	461a      	mov	r2, r3
 8018e6a:	687b      	ldr	r3, [r7, #4]
 8018e6c:	01db      	lsls	r3, r3, #7
 8018e6e:	4413      	add	r3, r2
 8018e70:	3384      	adds	r3, #132	@ 0x84
 8018e72:	689b      	ldr	r3, [r3, #8]
 8018e74:	68fa      	ldr	r2, [r7, #12]
 8018e76:	6812      	ldr	r2, [r2, #0]
 8018e78:	4611      	mov	r1, r2
 8018e7a:	687a      	ldr	r2, [r7, #4]
 8018e7c:	01d2      	lsls	r2, r2, #7
 8018e7e:	440a      	add	r2, r1
 8018e80:	3284      	adds	r2, #132	@ 0x84
 8018e82:	f403 4370 	and.w	r3, r3, #61440	@ 0xf000
 8018e86:	6093      	str	r3, [r2, #8]
  LTDC_LAYER(hltdc, LayerIdx)->WVPCR  = ((pLayerCfg->WindowY0 + (hltdc->Instance->BPCR & LTDC_BPCR_AVBP) + 1U) | tmp);
 8018e88:	68bb      	ldr	r3, [r7, #8]
 8018e8a:	689a      	ldr	r2, [r3, #8]
 8018e8c:	68fb      	ldr	r3, [r7, #12]
 8018e8e:	681b      	ldr	r3, [r3, #0]
 8018e90:	68db      	ldr	r3, [r3, #12]
 8018e92:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8018e96:	4413      	add	r3, r2
 8018e98:	1c5a      	adds	r2, r3, #1
 8018e9a:	68fb      	ldr	r3, [r7, #12]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	4619      	mov	r1, r3
 8018ea0:	687b      	ldr	r3, [r7, #4]
 8018ea2:	01db      	lsls	r3, r3, #7
 8018ea4:	440b      	add	r3, r1
 8018ea6:	3384      	adds	r3, #132	@ 0x84
 8018ea8:	4619      	mov	r1, r3
 8018eaa:	69fb      	ldr	r3, [r7, #28]
 8018eac:	4313      	orrs	r3, r2
 8018eae:	608b      	str	r3, [r1, #8]

  /* Specifies the pixel format */
  LTDC_LAYER(hltdc, LayerIdx)->PFCR &= ~(LTDC_LxPFCR_PF);
 8018eb0:	68fb      	ldr	r3, [r7, #12]
 8018eb2:	681b      	ldr	r3, [r3, #0]
 8018eb4:	461a      	mov	r2, r3
 8018eb6:	687b      	ldr	r3, [r7, #4]
 8018eb8:	01db      	lsls	r3, r3, #7
 8018eba:	4413      	add	r3, r2
 8018ebc:	3384      	adds	r3, #132	@ 0x84
 8018ebe:	691b      	ldr	r3, [r3, #16]
 8018ec0:	68fa      	ldr	r2, [r7, #12]
 8018ec2:	6812      	ldr	r2, [r2, #0]
 8018ec4:	4611      	mov	r1, r2
 8018ec6:	687a      	ldr	r2, [r7, #4]
 8018ec8:	01d2      	lsls	r2, r2, #7
 8018eca:	440a      	add	r2, r1
 8018ecc:	3284      	adds	r2, #132	@ 0x84
 8018ece:	f023 0307 	bic.w	r3, r3, #7
 8018ed2:	6113      	str	r3, [r2, #16]
  LTDC_LAYER(hltdc, LayerIdx)->PFCR = (pLayerCfg->PixelFormat);
 8018ed4:	68fb      	ldr	r3, [r7, #12]
 8018ed6:	681b      	ldr	r3, [r3, #0]
 8018ed8:	461a      	mov	r2, r3
 8018eda:	687b      	ldr	r3, [r7, #4]
 8018edc:	01db      	lsls	r3, r3, #7
 8018ede:	4413      	add	r3, r2
 8018ee0:	3384      	adds	r3, #132	@ 0x84
 8018ee2:	461a      	mov	r2, r3
 8018ee4:	68bb      	ldr	r3, [r7, #8]
 8018ee6:	691b      	ldr	r3, [r3, #16]
 8018ee8:	6113      	str	r3, [r2, #16]

  /* Configure the default color values */
  tmp = ((uint32_t)(pLayerCfg->Backcolor.Green) << 8U);
 8018eea:	68bb      	ldr	r3, [r7, #8]
 8018eec:	f893 3031 	ldrb.w	r3, [r3, #49]	@ 0x31
 8018ef0:	021b      	lsls	r3, r3, #8
 8018ef2:	61fb      	str	r3, [r7, #28]
  tmp1 = ((uint32_t)(pLayerCfg->Backcolor.Red) << 16U);
 8018ef4:	68bb      	ldr	r3, [r7, #8]
 8018ef6:	f893 3032 	ldrb.w	r3, [r3, #50]	@ 0x32
 8018efa:	041b      	lsls	r3, r3, #16
 8018efc:	61bb      	str	r3, [r7, #24]
  tmp2 = (pLayerCfg->Alpha0 << 24U);
 8018efe:	68bb      	ldr	r3, [r7, #8]
 8018f00:	699b      	ldr	r3, [r3, #24]
 8018f02:	061b      	lsls	r3, r3, #24
 8018f04:	617b      	str	r3, [r7, #20]
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->DCCR, (pLayerCfg->Backcolor.Blue | tmp | tmp1 | tmp2));
 8018f06:	68bb      	ldr	r3, [r7, #8]
 8018f08:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8018f0c:	461a      	mov	r2, r3
 8018f0e:	69fb      	ldr	r3, [r7, #28]
 8018f10:	431a      	orrs	r2, r3
 8018f12:	69bb      	ldr	r3, [r7, #24]
 8018f14:	431a      	orrs	r2, r3
 8018f16:	68fb      	ldr	r3, [r7, #12]
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	4619      	mov	r1, r3
 8018f1c:	687b      	ldr	r3, [r7, #4]
 8018f1e:	01db      	lsls	r3, r3, #7
 8018f20:	440b      	add	r3, r1
 8018f22:	3384      	adds	r3, #132	@ 0x84
 8018f24:	4619      	mov	r1, r3
 8018f26:	697b      	ldr	r3, [r7, #20]
 8018f28:	4313      	orrs	r3, r2
 8018f2a:	618b      	str	r3, [r1, #24]

  /* Specifies the constant alpha value */
  LTDC_LAYER(hltdc, LayerIdx)->CACR &= ~(LTDC_LxCACR_CONSTA);
 8018f2c:	68fb      	ldr	r3, [r7, #12]
 8018f2e:	681b      	ldr	r3, [r3, #0]
 8018f30:	461a      	mov	r2, r3
 8018f32:	687b      	ldr	r3, [r7, #4]
 8018f34:	01db      	lsls	r3, r3, #7
 8018f36:	4413      	add	r3, r2
 8018f38:	3384      	adds	r3, #132	@ 0x84
 8018f3a:	695b      	ldr	r3, [r3, #20]
 8018f3c:	68fa      	ldr	r2, [r7, #12]
 8018f3e:	6812      	ldr	r2, [r2, #0]
 8018f40:	4611      	mov	r1, r2
 8018f42:	687a      	ldr	r2, [r7, #4]
 8018f44:	01d2      	lsls	r2, r2, #7
 8018f46:	440a      	add	r2, r1
 8018f48:	3284      	adds	r2, #132	@ 0x84
 8018f4a:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8018f4e:	6153      	str	r3, [r2, #20]
  LTDC_LAYER(hltdc, LayerIdx)->CACR = (pLayerCfg->Alpha);
 8018f50:	68fb      	ldr	r3, [r7, #12]
 8018f52:	681b      	ldr	r3, [r3, #0]
 8018f54:	461a      	mov	r2, r3
 8018f56:	687b      	ldr	r3, [r7, #4]
 8018f58:	01db      	lsls	r3, r3, #7
 8018f5a:	4413      	add	r3, r2
 8018f5c:	3384      	adds	r3, #132	@ 0x84
 8018f5e:	461a      	mov	r2, r3
 8018f60:	68bb      	ldr	r3, [r7, #8]
 8018f62:	695b      	ldr	r3, [r3, #20]
 8018f64:	6153      	str	r3, [r2, #20]

  /* Specifies the blending factors */
  LTDC_LAYER(hltdc, LayerIdx)->BFCR &= ~(LTDC_LxBFCR_BF2 | LTDC_LxBFCR_BF1);
 8018f66:	68fb      	ldr	r3, [r7, #12]
 8018f68:	681b      	ldr	r3, [r3, #0]
 8018f6a:	461a      	mov	r2, r3
 8018f6c:	687b      	ldr	r3, [r7, #4]
 8018f6e:	01db      	lsls	r3, r3, #7
 8018f70:	4413      	add	r3, r2
 8018f72:	3384      	adds	r3, #132	@ 0x84
 8018f74:	69da      	ldr	r2, [r3, #28]
 8018f76:	68fb      	ldr	r3, [r7, #12]
 8018f78:	681b      	ldr	r3, [r3, #0]
 8018f7a:	4619      	mov	r1, r3
 8018f7c:	687b      	ldr	r3, [r7, #4]
 8018f7e:	01db      	lsls	r3, r3, #7
 8018f80:	440b      	add	r3, r1
 8018f82:	3384      	adds	r3, #132	@ 0x84
 8018f84:	4619      	mov	r1, r3
 8018f86:	4b4f      	ldr	r3, [pc, #316]	@ (80190c4 <LTDC_SetConfig+0x2e4>)
 8018f88:	4013      	ands	r3, r2
 8018f8a:	61cb      	str	r3, [r1, #28]
  LTDC_LAYER(hltdc, LayerIdx)->BFCR = (pLayerCfg->BlendingFactor1 | pLayerCfg->BlendingFactor2);
 8018f8c:	68bb      	ldr	r3, [r7, #8]
 8018f8e:	69da      	ldr	r2, [r3, #28]
 8018f90:	68bb      	ldr	r3, [r7, #8]
 8018f92:	6a1b      	ldr	r3, [r3, #32]
 8018f94:	68f9      	ldr	r1, [r7, #12]
 8018f96:	6809      	ldr	r1, [r1, #0]
 8018f98:	4608      	mov	r0, r1
 8018f9a:	6879      	ldr	r1, [r7, #4]
 8018f9c:	01c9      	lsls	r1, r1, #7
 8018f9e:	4401      	add	r1, r0
 8018fa0:	3184      	adds	r1, #132	@ 0x84
 8018fa2:	4313      	orrs	r3, r2
 8018fa4:	61cb      	str	r3, [r1, #28]

  /* Configure the color frame buffer start address */
  WRITE_REG(LTDC_LAYER(hltdc, LayerIdx)->CFBAR, pLayerCfg->FBStartAdress);
 8018fa6:	68fb      	ldr	r3, [r7, #12]
 8018fa8:	681b      	ldr	r3, [r3, #0]
 8018faa:	461a      	mov	r2, r3
 8018fac:	687b      	ldr	r3, [r7, #4]
 8018fae:	01db      	lsls	r3, r3, #7
 8018fb0:	4413      	add	r3, r2
 8018fb2:	3384      	adds	r3, #132	@ 0x84
 8018fb4:	461a      	mov	r2, r3
 8018fb6:	68bb      	ldr	r3, [r7, #8]
 8018fb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018fba:	6293      	str	r3, [r2, #40]	@ 0x28

  if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB8888)
 8018fbc:	68bb      	ldr	r3, [r7, #8]
 8018fbe:	691b      	ldr	r3, [r3, #16]
 8018fc0:	2b00      	cmp	r3, #0
 8018fc2:	d102      	bne.n	8018fca <LTDC_SetConfig+0x1ea>
  {
    tmp = 4U;
 8018fc4:	2304      	movs	r3, #4
 8018fc6:	61fb      	str	r3, [r7, #28]
 8018fc8:	e01b      	b.n	8019002 <LTDC_SetConfig+0x222>
  }
  else if (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB888)
 8018fca:	68bb      	ldr	r3, [r7, #8]
 8018fcc:	691b      	ldr	r3, [r3, #16]
 8018fce:	2b01      	cmp	r3, #1
 8018fd0:	d102      	bne.n	8018fd8 <LTDC_SetConfig+0x1f8>
  {
    tmp = 3U;
 8018fd2:	2303      	movs	r3, #3
 8018fd4:	61fb      	str	r3, [r7, #28]
 8018fd6:	e014      	b.n	8019002 <LTDC_SetConfig+0x222>
  }
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8018fd8:	68bb      	ldr	r3, [r7, #8]
 8018fda:	691b      	ldr	r3, [r3, #16]
 8018fdc:	2b04      	cmp	r3, #4
 8018fde:	d00b      	beq.n	8018ff8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8018fe0:	68bb      	ldr	r3, [r7, #8]
 8018fe2:	691b      	ldr	r3, [r3, #16]
  else if ((pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB4444) || \
 8018fe4:	2b02      	cmp	r3, #2
 8018fe6:	d007      	beq.n	8018ff8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8018fe8:	68bb      	ldr	r3, [r7, #8]
 8018fea:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_RGB565)   || \
 8018fec:	2b03      	cmp	r3, #3
 8018fee:	d003      	beq.n	8018ff8 <LTDC_SetConfig+0x218>
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_AL88))
 8018ff0:	68bb      	ldr	r3, [r7, #8]
 8018ff2:	691b      	ldr	r3, [r3, #16]
           (pLayerCfg->PixelFormat == LTDC_PIXEL_FORMAT_ARGB1555) || \
 8018ff4:	2b07      	cmp	r3, #7
 8018ff6:	d102      	bne.n	8018ffe <LTDC_SetConfig+0x21e>
  {
    tmp = 2U;
 8018ff8:	2302      	movs	r3, #2
 8018ffa:	61fb      	str	r3, [r7, #28]
 8018ffc:	e001      	b.n	8019002 <LTDC_SetConfig+0x222>
  }
  else
  {
    tmp = 1U;
 8018ffe:	2301      	movs	r3, #1
 8019000:	61fb      	str	r3, [r7, #28]
  }

  /* Configure the color frame buffer pitch in byte */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  &= ~(LTDC_LxCFBLR_CFBLL | LTDC_LxCFBLR_CFBP);
 8019002:	68fb      	ldr	r3, [r7, #12]
 8019004:	681b      	ldr	r3, [r3, #0]
 8019006:	461a      	mov	r2, r3
 8019008:	687b      	ldr	r3, [r7, #4]
 801900a:	01db      	lsls	r3, r3, #7
 801900c:	4413      	add	r3, r2
 801900e:	3384      	adds	r3, #132	@ 0x84
 8019010:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019012:	68fa      	ldr	r2, [r7, #12]
 8019014:	6812      	ldr	r2, [r2, #0]
 8019016:	4611      	mov	r1, r2
 8019018:	687a      	ldr	r2, [r7, #4]
 801901a:	01d2      	lsls	r2, r2, #7
 801901c:	440a      	add	r2, r1
 801901e:	3284      	adds	r2, #132	@ 0x84
 8019020:	f003 23e0 	and.w	r3, r3, #3758153728	@ 0xe000e000
 8019024:	62d3      	str	r3, [r2, #44]	@ 0x2c
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8019026:	68bb      	ldr	r3, [r7, #8]
 8019028:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801902a:	69fa      	ldr	r2, [r7, #28]
 801902c:	fb02 f303 	mul.w	r3, r2, r3
 8019030:	041a      	lsls	r2, r3, #16
                                         (((pLayerCfg->WindowX1 - pLayerCfg->WindowX0) * tmp)  + 7U));
 8019032:	68bb      	ldr	r3, [r7, #8]
 8019034:	6859      	ldr	r1, [r3, #4]
 8019036:	68bb      	ldr	r3, [r7, #8]
 8019038:	681b      	ldr	r3, [r3, #0]
 801903a:	1acb      	subs	r3, r1, r3
 801903c:	69f9      	ldr	r1, [r7, #28]
 801903e:	fb01 f303 	mul.w	r3, r1, r3
 8019042:	3307      	adds	r3, #7
  LTDC_LAYER(hltdc, LayerIdx)->CFBLR  = (((pLayerCfg->ImageWidth * tmp) << 16U) |
 8019044:	68f9      	ldr	r1, [r7, #12]
 8019046:	6809      	ldr	r1, [r1, #0]
 8019048:	4608      	mov	r0, r1
 801904a:	6879      	ldr	r1, [r7, #4]
 801904c:	01c9      	lsls	r1, r1, #7
 801904e:	4401      	add	r1, r0
 8019050:	3184      	adds	r1, #132	@ 0x84
 8019052:	4313      	orrs	r3, r2
 8019054:	62cb      	str	r3, [r1, #44]	@ 0x2c
  /* Configure the frame buffer line number */
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  &= ~(LTDC_LxCFBLNR_CFBLNBR);
 8019056:	68fb      	ldr	r3, [r7, #12]
 8019058:	681b      	ldr	r3, [r3, #0]
 801905a:	461a      	mov	r2, r3
 801905c:	687b      	ldr	r3, [r7, #4]
 801905e:	01db      	lsls	r3, r3, #7
 8019060:	4413      	add	r3, r2
 8019062:	3384      	adds	r3, #132	@ 0x84
 8019064:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019066:	68fb      	ldr	r3, [r7, #12]
 8019068:	681b      	ldr	r3, [r3, #0]
 801906a:	4619      	mov	r1, r3
 801906c:	687b      	ldr	r3, [r7, #4]
 801906e:	01db      	lsls	r3, r3, #7
 8019070:	440b      	add	r3, r1
 8019072:	3384      	adds	r3, #132	@ 0x84
 8019074:	4619      	mov	r1, r3
 8019076:	4b14      	ldr	r3, [pc, #80]	@ (80190c8 <LTDC_SetConfig+0x2e8>)
 8019078:	4013      	ands	r3, r2
 801907a:	630b      	str	r3, [r1, #48]	@ 0x30
  LTDC_LAYER(hltdc, LayerIdx)->CFBLNR  = (pLayerCfg->ImageHeight);
 801907c:	68fb      	ldr	r3, [r7, #12]
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	461a      	mov	r2, r3
 8019082:	687b      	ldr	r3, [r7, #4]
 8019084:	01db      	lsls	r3, r3, #7
 8019086:	4413      	add	r3, r2
 8019088:	3384      	adds	r3, #132	@ 0x84
 801908a:	461a      	mov	r2, r3
 801908c:	68bb      	ldr	r3, [r7, #8]
 801908e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019090:	6313      	str	r3, [r2, #48]	@ 0x30

  /* Enable LTDC_Layer by setting LEN bit */
  LTDC_LAYER(hltdc, LayerIdx)->CR |= (uint32_t)LTDC_LxCR_LEN;
 8019092:	68fb      	ldr	r3, [r7, #12]
 8019094:	681b      	ldr	r3, [r3, #0]
 8019096:	461a      	mov	r2, r3
 8019098:	687b      	ldr	r3, [r7, #4]
 801909a:	01db      	lsls	r3, r3, #7
 801909c:	4413      	add	r3, r2
 801909e:	3384      	adds	r3, #132	@ 0x84
 80190a0:	681b      	ldr	r3, [r3, #0]
 80190a2:	68fa      	ldr	r2, [r7, #12]
 80190a4:	6812      	ldr	r2, [r2, #0]
 80190a6:	4611      	mov	r1, r2
 80190a8:	687a      	ldr	r2, [r7, #4]
 80190aa:	01d2      	lsls	r2, r2, #7
 80190ac:	440a      	add	r2, r1
 80190ae:	3284      	adds	r2, #132	@ 0x84
 80190b0:	f043 0301 	orr.w	r3, r3, #1
 80190b4:	6013      	str	r3, [r2, #0]
}
 80190b6:	bf00      	nop
 80190b8:	3724      	adds	r7, #36	@ 0x24
 80190ba:	46bd      	mov	sp, r7
 80190bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190c0:	4770      	bx	lr
 80190c2:	bf00      	nop
 80190c4:	fffff8f8 	.word	0xfffff8f8
 80190c8:	fffff800 	.word	0xfffff800

080190cc <HAL_MDMA_Init>:
  * @param  hmdma: Pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b084      	sub	sp, #16
 80190d0:	af00      	add	r7, sp, #0
 80190d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80190d4:	f7f9 f852 	bl	801217c <HAL_GetTick>
 80190d8:	60f8      	str	r0, [r7, #12]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 80190da:	687b      	ldr	r3, [r7, #4]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d101      	bne.n	80190e4 <HAL_MDMA_Init+0x18>
  {
    return HAL_ERROR;
 80190e0:	2301      	movs	r3, #1
 80190e2:	e03b      	b.n	801915c <HAL_MDMA_Init+0x90>
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.SourceBlockAddressOffset));
  assert_param(IS_MDMA_BLOCK_ADDR_OFFSET(hmdma->Init.DestBlockAddressOffset));


  /* Allocate lock resource */
  __HAL_UNLOCK(hmdma);
 80190e4:	687b      	ldr	r3, [r7, #4]
 80190e6:	2200      	movs	r2, #0
 80190e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change MDMA peripheral state */
  hmdma->State = HAL_MDMA_STATE_BUSY;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	2202      	movs	r2, #2
 80190f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 80190f4:	687b      	ldr	r3, [r7, #4]
 80190f6:	681b      	ldr	r3, [r3, #0]
 80190f8:	68da      	ldr	r2, [r3, #12]
 80190fa:	687b      	ldr	r3, [r7, #4]
 80190fc:	681b      	ldr	r3, [r3, #0]
 80190fe:	f022 0201 	bic.w	r2, r2, #1
 8019102:	60da      	str	r2, [r3, #12]

  /* Check if the MDMA channel is effectively disabled */
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019104:	e00f      	b.n	8019126 <HAL_MDMA_Init+0x5a>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_MDMA_ABORT)
 8019106:	f7f9 f839 	bl	801217c <HAL_GetTick>
 801910a:	4602      	mov	r2, r0
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	1ad3      	subs	r3, r2, r3
 8019110:	2b05      	cmp	r3, #5
 8019112:	d908      	bls.n	8019126 <HAL_MDMA_Init+0x5a>
    {
      /* Update error code */
      hmdma->ErrorCode = HAL_MDMA_ERROR_TIMEOUT;
 8019114:	687b      	ldr	r3, [r7, #4]
 8019116:	2240      	movs	r2, #64	@ 0x40
 8019118:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Change the MDMA state */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 801911a:	687b      	ldr	r3, [r7, #4]
 801911c:	2203      	movs	r2, #3
 801911e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      return HAL_ERROR;
 8019122:	2301      	movs	r3, #1
 8019124:	e01a      	b.n	801915c <HAL_MDMA_Init+0x90>
  while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019126:	687b      	ldr	r3, [r7, #4]
 8019128:	681b      	ldr	r3, [r3, #0]
 801912a:	68db      	ldr	r3, [r3, #12]
 801912c:	f003 0301 	and.w	r3, r3, #1
 8019130:	2b00      	cmp	r3, #0
 8019132:	d1e8      	bne.n	8019106 <HAL_MDMA_Init+0x3a>
    }
  }

  /* Initialize the MDMA channel registers */
  MDMA_Init(hmdma);
 8019134:	6878      	ldr	r0, [r7, #4]
 8019136:	f000 fab3 	bl	80196a0 <MDMA_Init>

  /* Reset the MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 801913a:	687b      	ldr	r3, [r7, #4]
 801913c:	2200      	movs	r2, #0
 801913e:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 8019140:	687b      	ldr	r3, [r7, #4]
 8019142:	2200      	movs	r2, #0
 8019144:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 8019146:	687b      	ldr	r3, [r7, #4]
 8019148:	2200      	movs	r2, #0
 801914a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	2200      	movs	r2, #0
 8019150:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_READY;
 8019152:	687b      	ldr	r3, [r7, #4]
 8019154:	2201      	movs	r2, #1
 8019156:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801915a:	2300      	movs	r3, #0
}
 801915c:	4618      	mov	r0, r3
 801915e:	3710      	adds	r7, #16
 8019160:	46bd      	mov	sp, r7
 8019162:	bd80      	pop	{r7, pc}

08019164 <HAL_MDMA_DeInit>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_DeInit(MDMA_HandleTypeDef *hmdma)
{
 8019164:	b480      	push	{r7}
 8019166:	b083      	sub	sp, #12
 8019168:	af00      	add	r7, sp, #0
 801916a:	6078      	str	r0, [r7, #4]

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 801916c:	687b      	ldr	r3, [r7, #4]
 801916e:	2b00      	cmp	r3, #0
 8019170:	d101      	bne.n	8019176 <HAL_MDMA_DeInit+0x12>
  {
    return HAL_ERROR;
 8019172:	2301      	movs	r3, #1
 8019174:	e048      	b.n	8019208 <HAL_MDMA_DeInit+0xa4>
  }

  /* Disable the selected MDMA Channelx */
  __HAL_MDMA_DISABLE(hmdma);
 8019176:	687b      	ldr	r3, [r7, #4]
 8019178:	681b      	ldr	r3, [r3, #0]
 801917a:	68da      	ldr	r2, [r3, #12]
 801917c:	687b      	ldr	r3, [r7, #4]
 801917e:	681b      	ldr	r3, [r3, #0]
 8019180:	f022 0201 	bic.w	r2, r2, #1
 8019184:	60da      	str	r2, [r3, #12]

  /* Reset MDMA Channel control register */
  hmdma->Instance->CCR  = 0;
 8019186:	687b      	ldr	r3, [r7, #4]
 8019188:	681b      	ldr	r3, [r3, #0]
 801918a:	2200      	movs	r2, #0
 801918c:	60da      	str	r2, [r3, #12]
  hmdma->Instance->CTCR = 0;
 801918e:	687b      	ldr	r3, [r7, #4]
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	2200      	movs	r2, #0
 8019194:	611a      	str	r2, [r3, #16]
  hmdma->Instance->CBNDTR = 0;
 8019196:	687b      	ldr	r3, [r7, #4]
 8019198:	681b      	ldr	r3, [r3, #0]
 801919a:	2200      	movs	r2, #0
 801919c:	615a      	str	r2, [r3, #20]
  hmdma->Instance->CSAR = 0;
 801919e:	687b      	ldr	r3, [r7, #4]
 80191a0:	681b      	ldr	r3, [r3, #0]
 80191a2:	2200      	movs	r2, #0
 80191a4:	619a      	str	r2, [r3, #24]
  hmdma->Instance->CDAR = 0;
 80191a6:	687b      	ldr	r3, [r7, #4]
 80191a8:	681b      	ldr	r3, [r3, #0]
 80191aa:	2200      	movs	r2, #0
 80191ac:	61da      	str	r2, [r3, #28]
  hmdma->Instance->CBRUR = 0;
 80191ae:	687b      	ldr	r3, [r7, #4]
 80191b0:	681b      	ldr	r3, [r3, #0]
 80191b2:	2200      	movs	r2, #0
 80191b4:	621a      	str	r2, [r3, #32]
  hmdma->Instance->CLAR = 0;
 80191b6:	687b      	ldr	r3, [r7, #4]
 80191b8:	681b      	ldr	r3, [r3, #0]
 80191ba:	2200      	movs	r2, #0
 80191bc:	625a      	str	r2, [r3, #36]	@ 0x24
  hmdma->Instance->CTBR = 0;
 80191be:	687b      	ldr	r3, [r7, #4]
 80191c0:	681b      	ldr	r3, [r3, #0]
 80191c2:	2200      	movs	r2, #0
 80191c4:	629a      	str	r2, [r3, #40]	@ 0x28
  hmdma->Instance->CMAR = 0;
 80191c6:	687b      	ldr	r3, [r7, #4]
 80191c8:	681b      	ldr	r3, [r3, #0]
 80191ca:	2200      	movs	r2, #0
 80191cc:	631a      	str	r2, [r3, #48]	@ 0x30
  hmdma->Instance->CMDR = 0;
 80191ce:	687b      	ldr	r3, [r7, #4]
 80191d0:	681b      	ldr	r3, [r3, #0]
 80191d2:	2200      	movs	r2, #0
 80191d4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Clear all flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma,(MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_FLAG_BRT | MDMA_FLAG_BT | MDMA_FLAG_BFTC));
 80191d6:	687b      	ldr	r3, [r7, #4]
 80191d8:	681b      	ldr	r3, [r3, #0]
 80191da:	221f      	movs	r2, #31
 80191dc:	605a      	str	r2, [r3, #4]

  /* Reset the  MDMA first/last linkedlist node addresses and node counter */
  hmdma->FirstLinkedListNodeAddress  = 0;
 80191de:	687b      	ldr	r3, [r7, #4]
 80191e0:	2200      	movs	r2, #0
 80191e2:	65da      	str	r2, [r3, #92]	@ 0x5c
  hmdma->LastLinkedListNodeAddress   = 0;
 80191e4:	687b      	ldr	r3, [r7, #4]
 80191e6:	2200      	movs	r2, #0
 80191e8:	661a      	str	r2, [r3, #96]	@ 0x60
  hmdma->LinkedListNodeCounter  = 0;
 80191ea:	687b      	ldr	r3, [r7, #4]
 80191ec:	2200      	movs	r2, #0
 80191ee:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Initialize the error code */
  hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	2200      	movs	r2, #0
 80191f4:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Initialize the MDMA state */
  hmdma->State = HAL_MDMA_STATE_RESET;
 80191f6:	687b      	ldr	r3, [r7, #4]
 80191f8:	2200      	movs	r2, #0
 80191fa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Release Lock */
  __HAL_UNLOCK(hmdma);
 80191fe:	687b      	ldr	r3, [r7, #4]
 8019200:	2200      	movs	r2, #0
 8019202:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8019206:	2300      	movs	r3, #0
}
 8019208:	4618      	mov	r0, r3
 801920a:	370c      	adds	r7, #12
 801920c:	46bd      	mov	sp, r7
 801920e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019212:	4770      	bx	lr

08019214 <HAL_MDMA_Start_IT>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount      : The number of a blocks to be transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_MDMA_Start_IT(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 8019214:	b580      	push	{r7, lr}
 8019216:	b086      	sub	sp, #24
 8019218:	af02      	add	r7, sp, #8
 801921a:	60f8      	str	r0, [r7, #12]
 801921c:	60b9      	str	r1, [r7, #8]
 801921e:	607a      	str	r2, [r7, #4]
 8019220:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_MDMA_TRANSFER_LENGTH(BlockDataLength));
  assert_param(IS_MDMA_BLOCK_COUNT(BlockCount));

  /* Check the MDMA peripheral handle */
  if(hmdma == NULL)
 8019222:	68fb      	ldr	r3, [r7, #12]
 8019224:	2b00      	cmp	r3, #0
 8019226:	d101      	bne.n	801922c <HAL_MDMA_Start_IT+0x18>
  {
    return HAL_ERROR;
 8019228:	2301      	movs	r3, #1
 801922a:	e070      	b.n	801930e <HAL_MDMA_Start_IT+0xfa>
  }

  /* Process locked */
  __HAL_LOCK(hmdma);
 801922c:	68fb      	ldr	r3, [r7, #12]
 801922e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8019232:	2b01      	cmp	r3, #1
 8019234:	d101      	bne.n	801923a <HAL_MDMA_Start_IT+0x26>
 8019236:	2302      	movs	r3, #2
 8019238:	e069      	b.n	801930e <HAL_MDMA_Start_IT+0xfa>
 801923a:	68fb      	ldr	r3, [r7, #12]
 801923c:	2201      	movs	r2, #1
 801923e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  if(HAL_MDMA_STATE_READY == hmdma->State)
 8019242:	68fb      	ldr	r3, [r7, #12]
 8019244:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8019248:	b2db      	uxtb	r3, r3
 801924a:	2b01      	cmp	r3, #1
 801924c:	d158      	bne.n	8019300 <HAL_MDMA_Start_IT+0xec>
  {
    /* Change MDMA peripheral state */
    hmdma->State = HAL_MDMA_STATE_BUSY;
 801924e:	68fb      	ldr	r3, [r7, #12]
 8019250:	2202      	movs	r2, #2
 8019252:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Initialize the error code */
    hmdma->ErrorCode = HAL_MDMA_ERROR_NONE;
 8019256:	68fb      	ldr	r3, [r7, #12]
 8019258:	2200      	movs	r2, #0
 801925a:	669a      	str	r2, [r3, #104]	@ 0x68

    /* Disable the peripheral */
    __HAL_MDMA_DISABLE(hmdma);
 801925c:	68fb      	ldr	r3, [r7, #12]
 801925e:	681b      	ldr	r3, [r3, #0]
 8019260:	68da      	ldr	r2, [r3, #12]
 8019262:	68fb      	ldr	r3, [r7, #12]
 8019264:	681b      	ldr	r3, [r3, #0]
 8019266:	f022 0201 	bic.w	r2, r2, #1
 801926a:	60da      	str	r2, [r3, #12]

    /* Configure the source, destination address and the data length */
    MDMA_SetConfig(hmdma, SrcAddress, DstAddress, BlockDataLength, BlockCount);
 801926c:	69bb      	ldr	r3, [r7, #24]
 801926e:	9300      	str	r3, [sp, #0]
 8019270:	683b      	ldr	r3, [r7, #0]
 8019272:	687a      	ldr	r2, [r7, #4]
 8019274:	68b9      	ldr	r1, [r7, #8]
 8019276:	68f8      	ldr	r0, [r7, #12]
 8019278:	f000 f9a2 	bl	80195c0 <MDMA_SetConfig>

    /* Enable Common interrupts i.e Transfer Error IT and Channel Transfer Complete IT*/
    __HAL_MDMA_ENABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC));
 801927c:	68fb      	ldr	r3, [r7, #12]
 801927e:	681b      	ldr	r3, [r3, #0]
 8019280:	68da      	ldr	r2, [r3, #12]
 8019282:	68fb      	ldr	r3, [r7, #12]
 8019284:	681b      	ldr	r3, [r3, #0]
 8019286:	f042 0206 	orr.w	r2, r2, #6
 801928a:	60da      	str	r2, [r3, #12]

    if(hmdma->XferBlockCpltCallback != NULL)
 801928c:	68fb      	ldr	r3, [r7, #12]
 801928e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019290:	2b00      	cmp	r3, #0
 8019292:	d007      	beq.n	80192a4 <HAL_MDMA_Start_IT+0x90>
    {
      /* if Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BT);
 8019294:	68fb      	ldr	r3, [r7, #12]
 8019296:	681b      	ldr	r3, [r3, #0]
 8019298:	68da      	ldr	r2, [r3, #12]
 801929a:	68fb      	ldr	r3, [r7, #12]
 801929c:	681b      	ldr	r3, [r3, #0]
 801929e:	f042 0210 	orr.w	r2, r2, #16
 80192a2:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferRepeatBlockCpltCallback != NULL)
 80192a4:	68fb      	ldr	r3, [r7, #12]
 80192a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80192a8:	2b00      	cmp	r3, #0
 80192aa:	d007      	beq.n	80192bc <HAL_MDMA_Start_IT+0xa8>
    {
      /* if Repeated Block transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BRT);
 80192ac:	68fb      	ldr	r3, [r7, #12]
 80192ae:	681b      	ldr	r3, [r3, #0]
 80192b0:	68da      	ldr	r2, [r3, #12]
 80192b2:	68fb      	ldr	r3, [r7, #12]
 80192b4:	681b      	ldr	r3, [r3, #0]
 80192b6:	f042 0208 	orr.w	r2, r2, #8
 80192ba:	60da      	str	r2, [r3, #12]
    }

    if(hmdma->XferBufferCpltCallback != NULL)
 80192bc:	68fb      	ldr	r3, [r7, #12]
 80192be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d007      	beq.n	80192d4 <HAL_MDMA_Start_IT+0xc0>
    {
      /* if buffer transfer complete Callback is set enable the corresponding IT*/
      __HAL_MDMA_ENABLE_IT(hmdma, MDMA_IT_BFTC);
 80192c4:	68fb      	ldr	r3, [r7, #12]
 80192c6:	681b      	ldr	r3, [r3, #0]
 80192c8:	68da      	ldr	r2, [r3, #12]
 80192ca:	68fb      	ldr	r3, [r7, #12]
 80192cc:	681b      	ldr	r3, [r3, #0]
 80192ce:	f042 0220 	orr.w	r2, r2, #32
 80192d2:	60da      	str	r2, [r3, #12]
    }

    /* Enable the Peripheral */
    __HAL_MDMA_ENABLE(hmdma);
 80192d4:	68fb      	ldr	r3, [r7, #12]
 80192d6:	681b      	ldr	r3, [r3, #0]
 80192d8:	68da      	ldr	r2, [r3, #12]
 80192da:	68fb      	ldr	r3, [r7, #12]
 80192dc:	681b      	ldr	r3, [r3, #0]
 80192de:	f042 0201 	orr.w	r2, r2, #1
 80192e2:	60da      	str	r2, [r3, #12]

    if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80192e4:	68fb      	ldr	r3, [r7, #12]
 80192e6:	685b      	ldr	r3, [r3, #4]
 80192e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80192ec:	d10e      	bne.n	801930c <HAL_MDMA_Start_IT+0xf8>
    {
      /* activate If SW request mode*/
      hmdma->Instance->CCR |=  MDMA_CCR_SWRQ;
 80192ee:	68fb      	ldr	r3, [r7, #12]
 80192f0:	681b      	ldr	r3, [r3, #0]
 80192f2:	68da      	ldr	r2, [r3, #12]
 80192f4:	68fb      	ldr	r3, [r7, #12]
 80192f6:	681b      	ldr	r3, [r3, #0]
 80192f8:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80192fc:	60da      	str	r2, [r3, #12]
 80192fe:	e005      	b.n	801930c <HAL_MDMA_Start_IT+0xf8>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hmdma);
 8019300:	68fb      	ldr	r3, [r7, #12]
 8019302:	2200      	movs	r2, #0
 8019304:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Return error status */
    return HAL_BUSY;
 8019308:	2302      	movs	r3, #2
 801930a:	e000      	b.n	801930e <HAL_MDMA_Start_IT+0xfa>
  }

  return HAL_OK;
 801930c:	2300      	movs	r3, #0
}
 801930e:	4618      	mov	r0, r3
 8019310:	3710      	adds	r7, #16
 8019312:	46bd      	mov	sp, r7
 8019314:	bd80      	pop	{r7, pc}
	...

08019318 <HAL_MDMA_IRQHandler>:
  * @param  hmdma: pointer to a MDMA_HandleTypeDef structure that contains
  *               the configuration information for the specified MDMA Channel.
  * @retval None
  */
void HAL_MDMA_IRQHandler(MDMA_HandleTypeDef *hmdma)
{
 8019318:	b580      	push	{r7, lr}
 801931a:	b086      	sub	sp, #24
 801931c:	af00      	add	r7, sp, #0
 801931e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0;
 8019320:	2300      	movs	r3, #0
 8019322:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8019324:	4b91      	ldr	r3, [pc, #580]	@ (801956c <HAL_MDMA_IRQHandler+0x254>)
 8019326:	681b      	ldr	r3, [r3, #0]
 8019328:	4a91      	ldr	r2, [pc, #580]	@ (8019570 <HAL_MDMA_IRQHandler+0x258>)
 801932a:	fba2 2303 	umull	r2, r3, r2, r3
 801932e:	0a9b      	lsrs	r3, r3, #10
 8019330:	617b      	str	r3, [r7, #20]

  uint32_t generalIntFlag, errorFlag;

  /* General Interrupt Flag management ****************************************/
  generalIntFlag =  1UL << ((((uint32_t)hmdma->Instance - (uint32_t)(MDMA_Channel0))/HAL_MDMA_CHANNEL_SIZE) & 0x1FU);
 8019332:	687b      	ldr	r3, [r7, #4]
 8019334:	681b      	ldr	r3, [r3, #0]
 8019336:	461a      	mov	r2, r3
 8019338:	4b8e      	ldr	r3, [pc, #568]	@ (8019574 <HAL_MDMA_IRQHandler+0x25c>)
 801933a:	4413      	add	r3, r2
 801933c:	099b      	lsrs	r3, r3, #6
 801933e:	f003 031f 	and.w	r3, r3, #31
 8019342:	2201      	movs	r2, #1
 8019344:	fa02 f303 	lsl.w	r3, r2, r3
 8019348:	613b      	str	r3, [r7, #16]
  if((MDMA->GISR0 & generalIntFlag) == 0U)
 801934a:	f04f 43a4 	mov.w	r3, #1375731712	@ 0x52000000
 801934e:	681a      	ldr	r2, [r3, #0]
 8019350:	693b      	ldr	r3, [r7, #16]
 8019352:	4013      	ands	r3, r2
 8019354:	2b00      	cmp	r3, #0
 8019356:	f000 812d 	beq.w	80195b4 <HAL_MDMA_IRQHandler+0x29c>
  {
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
  }

  /* Transfer Error Interrupt management ***************************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_TE) != 0U))
 801935a:	687b      	ldr	r3, [r7, #4]
 801935c:	681b      	ldr	r3, [r3, #0]
 801935e:	681b      	ldr	r3, [r3, #0]
 8019360:	f003 0301 	and.w	r3, r3, #1
 8019364:	2b00      	cmp	r3, #0
 8019366:	d054      	beq.n	8019412 <HAL_MDMA_IRQHandler+0xfa>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_TE) != 0U)
 8019368:	687b      	ldr	r3, [r7, #4]
 801936a:	681b      	ldr	r3, [r3, #0]
 801936c:	68db      	ldr	r3, [r3, #12]
 801936e:	f003 0302 	and.w	r3, r3, #2
 8019372:	2b00      	cmp	r3, #0
 8019374:	d04d      	beq.n	8019412 <HAL_MDMA_IRQHandler+0xfa>
    {
      /* Disable the transfer error interrupt */
      __HAL_MDMA_DISABLE_IT(hmdma, MDMA_IT_TE);
 8019376:	687b      	ldr	r3, [r7, #4]
 8019378:	681b      	ldr	r3, [r3, #0]
 801937a:	68da      	ldr	r2, [r3, #12]
 801937c:	687b      	ldr	r3, [r7, #4]
 801937e:	681b      	ldr	r3, [r3, #0]
 8019380:	f022 0202 	bic.w	r2, r2, #2
 8019384:	60da      	str	r2, [r3, #12]

      /* Get the transfer error source flag */
      errorFlag = hmdma->Instance->CESR;
 8019386:	687b      	ldr	r3, [r7, #4]
 8019388:	681b      	ldr	r3, [r3, #0]
 801938a:	689b      	ldr	r3, [r3, #8]
 801938c:	60fb      	str	r3, [r7, #12]

      if((errorFlag & MDMA_CESR_TED) == 0U)
 801938e:	68fb      	ldr	r3, [r7, #12]
 8019390:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019394:	2b00      	cmp	r3, #0
 8019396:	d106      	bne.n	80193a6 <HAL_MDMA_IRQHandler+0x8e>
      {
        /* Update error code : Read Transfer error  */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_READ_XFER;
 8019398:	687b      	ldr	r3, [r7, #4]
 801939a:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801939c:	f043 0201 	orr.w	r2, r3, #1
 80193a0:	687b      	ldr	r3, [r7, #4]
 80193a2:	669a      	str	r2, [r3, #104]	@ 0x68
 80193a4:	e005      	b.n	80193b2 <HAL_MDMA_IRQHandler+0x9a>
      }
      else
      {
        /* Update error code : Write Transfer error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_WRITE_XFER;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80193aa:	f043 0202 	orr.w	r2, r3, #2
 80193ae:	687b      	ldr	r3, [r7, #4]
 80193b0:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TEMD) != 0U)
 80193b2:	68fb      	ldr	r3, [r7, #12]
 80193b4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80193b8:	2b00      	cmp	r3, #0
 80193ba:	d005      	beq.n	80193c8 <HAL_MDMA_IRQHandler+0xb0>
      {
        /* Update error code : Error Mask Data */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_MASK_DATA;
 80193bc:	687b      	ldr	r3, [r7, #4]
 80193be:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80193c0:	f043 0204 	orr.w	r2, r3, #4
 80193c4:	687b      	ldr	r3, [r7, #4]
 80193c6:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_TELD) != 0U)
 80193c8:	68fb      	ldr	r3, [r7, #12]
 80193ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80193ce:	2b00      	cmp	r3, #0
 80193d0:	d005      	beq.n	80193de <HAL_MDMA_IRQHandler+0xc6>
      {
        /* Update error code : Error Linked list */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_LINKED_LIST;
 80193d2:	687b      	ldr	r3, [r7, #4]
 80193d4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80193d6:	f043 0208 	orr.w	r2, r3, #8
 80193da:	687b      	ldr	r3, [r7, #4]
 80193dc:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_ASE) != 0U)
 80193de:	68fb      	ldr	r3, [r7, #12]
 80193e0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d005      	beq.n	80193f4 <HAL_MDMA_IRQHandler+0xdc>
      {
        /* Update error code : Address/Size alignment error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_ALIGNMENT;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80193ec:	f043 0210 	orr.w	r2, r3, #16
 80193f0:	687b      	ldr	r3, [r7, #4]
 80193f2:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      if((errorFlag & MDMA_CESR_BSE) != 0U)
 80193f4:	68fb      	ldr	r3, [r7, #12]
 80193f6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80193fa:	2b00      	cmp	r3, #0
 80193fc:	d005      	beq.n	801940a <HAL_MDMA_IRQHandler+0xf2>
      {
        /* Update error code : Block Size error error */
        hmdma->ErrorCode |= HAL_MDMA_ERROR_BLOCK_SIZE;
 80193fe:	687b      	ldr	r3, [r7, #4]
 8019400:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019402:	f043 0220 	orr.w	r2, r3, #32
 8019406:	687b      	ldr	r3, [r7, #4]
 8019408:	669a      	str	r2, [r3, #104]	@ 0x68
      }

      /* Clear the transfer error flags */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE);
 801940a:	687b      	ldr	r3, [r7, #4]
 801940c:	681b      	ldr	r3, [r3, #0]
 801940e:	2201      	movs	r2, #1
 8019410:	605a      	str	r2, [r3, #4]
    }
  }

  /* Buffer Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BFTC) != 0U))
 8019412:	687b      	ldr	r3, [r7, #4]
 8019414:	681b      	ldr	r3, [r3, #0]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	f003 0310 	and.w	r3, r3, #16
 801941c:	2b00      	cmp	r3, #0
 801941e:	d012      	beq.n	8019446 <HAL_MDMA_IRQHandler+0x12e>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BFTC) != 0U)
 8019420:	687b      	ldr	r3, [r7, #4]
 8019422:	681b      	ldr	r3, [r3, #0]
 8019424:	68db      	ldr	r3, [r3, #12]
 8019426:	f003 0320 	and.w	r3, r3, #32
 801942a:	2b00      	cmp	r3, #0
 801942c:	d00b      	beq.n	8019446 <HAL_MDMA_IRQHandler+0x12e>
    {
      /* Clear the buffer transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BFTC);
 801942e:	687b      	ldr	r3, [r7, #4]
 8019430:	681b      	ldr	r3, [r3, #0]
 8019432:	2210      	movs	r2, #16
 8019434:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBufferCpltCallback != NULL)
 8019436:	687b      	ldr	r3, [r7, #4]
 8019438:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801943a:	2b00      	cmp	r3, #0
 801943c:	d003      	beq.n	8019446 <HAL_MDMA_IRQHandler+0x12e>
      {
        /* Buffer transfer callback */
        hmdma->XferBufferCpltCallback(hmdma);
 801943e:	687b      	ldr	r3, [r7, #4]
 8019440:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019442:	6878      	ldr	r0, [r7, #4]
 8019444:	4798      	blx	r3
      }
    }
  }

  /* Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BT) != 0U))
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	681b      	ldr	r3, [r3, #0]
 801944a:	681b      	ldr	r3, [r3, #0]
 801944c:	f003 0308 	and.w	r3, r3, #8
 8019450:	2b00      	cmp	r3, #0
 8019452:	d012      	beq.n	801947a <HAL_MDMA_IRQHandler+0x162>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BT) != 0U)
 8019454:	687b      	ldr	r3, [r7, #4]
 8019456:	681b      	ldr	r3, [r3, #0]
 8019458:	68db      	ldr	r3, [r3, #12]
 801945a:	f003 0310 	and.w	r3, r3, #16
 801945e:	2b00      	cmp	r3, #0
 8019460:	d00b      	beq.n	801947a <HAL_MDMA_IRQHandler+0x162>
    {
      /* Clear the block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BT);
 8019462:	687b      	ldr	r3, [r7, #4]
 8019464:	681b      	ldr	r3, [r3, #0]
 8019466:	2208      	movs	r2, #8
 8019468:	605a      	str	r2, [r3, #4]

      if(hmdma->XferBlockCpltCallback != NULL)
 801946a:	687b      	ldr	r3, [r7, #4]
 801946c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801946e:	2b00      	cmp	r3, #0
 8019470:	d003      	beq.n	801947a <HAL_MDMA_IRQHandler+0x162>
      {
        /* Block transfer callback */
        hmdma->XferBlockCpltCallback(hmdma);
 8019472:	687b      	ldr	r3, [r7, #4]
 8019474:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019476:	6878      	ldr	r0, [r7, #4]
 8019478:	4798      	blx	r3
      }
    }
  }

  /* Repeated Block Transfer Complete Interrupt management ******************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_BRT) != 0U))
 801947a:	687b      	ldr	r3, [r7, #4]
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	681b      	ldr	r3, [r3, #0]
 8019480:	f003 0304 	and.w	r3, r3, #4
 8019484:	2b00      	cmp	r3, #0
 8019486:	d012      	beq.n	80194ae <HAL_MDMA_IRQHandler+0x196>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_BRT) != 0U)
 8019488:	687b      	ldr	r3, [r7, #4]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	68db      	ldr	r3, [r3, #12]
 801948e:	f003 0308 	and.w	r3, r3, #8
 8019492:	2b00      	cmp	r3, #0
 8019494:	d00b      	beq.n	80194ae <HAL_MDMA_IRQHandler+0x196>
    {
      /* Clear the repeat block transfer complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_BRT);
 8019496:	687b      	ldr	r3, [r7, #4]
 8019498:	681b      	ldr	r3, [r3, #0]
 801949a:	2204      	movs	r2, #4
 801949c:	605a      	str	r2, [r3, #4]

      if(hmdma->XferRepeatBlockCpltCallback != NULL)
 801949e:	687b      	ldr	r3, [r7, #4]
 80194a0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194a2:	2b00      	cmp	r3, #0
 80194a4:	d003      	beq.n	80194ae <HAL_MDMA_IRQHandler+0x196>
      {
        /* Repeated Block transfer callback */
        hmdma->XferRepeatBlockCpltCallback(hmdma);
 80194a6:	687b      	ldr	r3, [r7, #4]
 80194a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80194aa:	6878      	ldr	r0, [r7, #4]
 80194ac:	4798      	blx	r3
      }
    }
  }

  /* Channel Transfer Complete Interrupt management ***********************************/
  if((__HAL_MDMA_GET_FLAG(hmdma, MDMA_FLAG_CTC) != 0U))
 80194ae:	687b      	ldr	r3, [r7, #4]
 80194b0:	681b      	ldr	r3, [r3, #0]
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	f003 0302 	and.w	r3, r3, #2
 80194b8:	2b00      	cmp	r3, #0
 80194ba:	d039      	beq.n	8019530 <HAL_MDMA_IRQHandler+0x218>
  {
    if(__HAL_MDMA_GET_IT_SOURCE(hmdma, MDMA_IT_CTC) != 0U)
 80194bc:	687b      	ldr	r3, [r7, #4]
 80194be:	681b      	ldr	r3, [r3, #0]
 80194c0:	68db      	ldr	r3, [r3, #12]
 80194c2:	f003 0304 	and.w	r3, r3, #4
 80194c6:	2b00      	cmp	r3, #0
 80194c8:	d032      	beq.n	8019530 <HAL_MDMA_IRQHandler+0x218>
    {
      /* Disable all the transfer interrupts */
      __HAL_MDMA_DISABLE_IT(hmdma, (MDMA_IT_TE | MDMA_IT_CTC | MDMA_IT_BT | MDMA_IT_BRT | MDMA_IT_BFTC));
 80194ca:	687b      	ldr	r3, [r7, #4]
 80194cc:	681b      	ldr	r3, [r3, #0]
 80194ce:	68da      	ldr	r2, [r3, #12]
 80194d0:	687b      	ldr	r3, [r7, #4]
 80194d2:	681b      	ldr	r3, [r3, #0]
 80194d4:	f022 023e 	bic.w	r2, r2, #62	@ 0x3e
 80194d8:	60da      	str	r2, [r3, #12]

      if(HAL_MDMA_STATE_ABORT == hmdma->State)
 80194da:	687b      	ldr	r3, [r7, #4]
 80194dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80194e0:	b2db      	uxtb	r3, r3
 80194e2:	2b04      	cmp	r3, #4
 80194e4:	d110      	bne.n	8019508 <HAL_MDMA_IRQHandler+0x1f0>
      {
        /* Process Unlocked */
        __HAL_UNLOCK(hmdma);
 80194e6:	687b      	ldr	r3, [r7, #4]
 80194e8:	2200      	movs	r2, #0
 80194ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Change the DMA state */
        hmdma->State = HAL_MDMA_STATE_READY;
 80194ee:	687b      	ldr	r3, [r7, #4]
 80194f0:	2201      	movs	r2, #1
 80194f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        if(hmdma->XferAbortCallback != NULL)
 80194f6:	687b      	ldr	r3, [r7, #4]
 80194f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80194fa:	2b00      	cmp	r3, #0
 80194fc:	d05c      	beq.n	80195b8 <HAL_MDMA_IRQHandler+0x2a0>
        {
          hmdma->XferAbortCallback(hmdma);
 80194fe:	687b      	ldr	r3, [r7, #4]
 8019500:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8019502:	6878      	ldr	r0, [r7, #4]
 8019504:	4798      	blx	r3
        }
        return;
 8019506:	e057      	b.n	80195b8 <HAL_MDMA_IRQHandler+0x2a0>
      }

      /* Clear the Channel Transfer Complete flag */
      __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_CTC);
 8019508:	687b      	ldr	r3, [r7, #4]
 801950a:	681b      	ldr	r3, [r3, #0]
 801950c:	2202      	movs	r2, #2
 801950e:	605a      	str	r2, [r3, #4]

      /* Process Unlocked */
      __HAL_UNLOCK(hmdma);
 8019510:	687b      	ldr	r3, [r7, #4]
 8019512:	2200      	movs	r2, #0
 8019514:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      /* Change MDMA peripheral state */
      hmdma->State = HAL_MDMA_STATE_READY;
 8019518:	687b      	ldr	r3, [r7, #4]
 801951a:	2201      	movs	r2, #1
 801951c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if(hmdma->XferCpltCallback != NULL)
 8019520:	687b      	ldr	r3, [r7, #4]
 8019522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019524:	2b00      	cmp	r3, #0
 8019526:	d003      	beq.n	8019530 <HAL_MDMA_IRQHandler+0x218>
      {
        /* Channel Transfer Complete callback */
        hmdma->XferCpltCallback(hmdma);
 8019528:	687b      	ldr	r3, [r7, #4]
 801952a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801952c:	6878      	ldr	r0, [r7, #4]
 801952e:	4798      	blx	r3
      }
    }
  }

  /* manage error case */
  if(hmdma->ErrorCode != HAL_MDMA_ERROR_NONE)
 8019530:	687b      	ldr	r3, [r7, #4]
 8019532:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8019534:	2b00      	cmp	r3, #0
 8019536:	d040      	beq.n	80195ba <HAL_MDMA_IRQHandler+0x2a2>
  {
    hmdma->State = HAL_MDMA_STATE_ABORT;
 8019538:	687b      	ldr	r3, [r7, #4]
 801953a:	2204      	movs	r2, #4
 801953c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Disable the channel */
    __HAL_MDMA_DISABLE(hmdma);
 8019540:	687b      	ldr	r3, [r7, #4]
 8019542:	681b      	ldr	r3, [r3, #0]
 8019544:	68da      	ldr	r2, [r3, #12]
 8019546:	687b      	ldr	r3, [r7, #4]
 8019548:	681b      	ldr	r3, [r3, #0]
 801954a:	f022 0201 	bic.w	r2, r2, #1
 801954e:	60da      	str	r2, [r3, #12]

    do
    {
      if (++count > timeout)
 8019550:	68bb      	ldr	r3, [r7, #8]
 8019552:	3301      	adds	r3, #1
 8019554:	60bb      	str	r3, [r7, #8]
 8019556:	697a      	ldr	r2, [r7, #20]
 8019558:	429a      	cmp	r2, r3
 801955a:	d30d      	bcc.n	8019578 <HAL_MDMA_IRQHandler+0x260>
      {
        break;
      }
    }
    while((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U);
 801955c:	687b      	ldr	r3, [r7, #4]
 801955e:	681b      	ldr	r3, [r3, #0]
 8019560:	68db      	ldr	r3, [r3, #12]
 8019562:	f003 0301 	and.w	r3, r3, #1
 8019566:	2b00      	cmp	r3, #0
 8019568:	d1f2      	bne.n	8019550 <HAL_MDMA_IRQHandler+0x238>
 801956a:	e006      	b.n	801957a <HAL_MDMA_IRQHandler+0x262>
 801956c:	24000400 	.word	0x24000400
 8019570:	1b4e81b5 	.word	0x1b4e81b5
 8019574:	adffffc0 	.word	0xadffffc0
        break;
 8019578:	bf00      	nop

    /* Process Unlocked */
    __HAL_UNLOCK(hmdma);
 801957a:	687b      	ldr	r3, [r7, #4]
 801957c:	2200      	movs	r2, #0
 801957e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    if((hmdma->Instance->CCR & MDMA_CCR_EN) != 0U)
 8019582:	687b      	ldr	r3, [r7, #4]
 8019584:	681b      	ldr	r3, [r3, #0]
 8019586:	68db      	ldr	r3, [r3, #12]
 8019588:	f003 0301 	and.w	r3, r3, #1
 801958c:	2b00      	cmp	r3, #0
 801958e:	d004      	beq.n	801959a <HAL_MDMA_IRQHandler+0x282>
    {
      /* Change the MDMA state to error if MDMA disable fails */
      hmdma->State = HAL_MDMA_STATE_ERROR;
 8019590:	687b      	ldr	r3, [r7, #4]
 8019592:	2203      	movs	r2, #3
 8019594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8019598:	e003      	b.n	80195a2 <HAL_MDMA_IRQHandler+0x28a>
    }
    else
    {
      /* Change the MDMA state to Ready if MDMA disable success */
      hmdma->State = HAL_MDMA_STATE_READY;
 801959a:	687b      	ldr	r3, [r7, #4]
 801959c:	2201      	movs	r2, #1
 801959e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    }


    if (hmdma->XferErrorCallback != NULL)
 80195a2:	687b      	ldr	r3, [r7, #4]
 80195a4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80195a6:	2b00      	cmp	r3, #0
 80195a8:	d007      	beq.n	80195ba <HAL_MDMA_IRQHandler+0x2a2>
    {
      /* Transfer error callback */
      hmdma->XferErrorCallback(hmdma);
 80195aa:	687b      	ldr	r3, [r7, #4]
 80195ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80195ae:	6878      	ldr	r0, [r7, #4]
 80195b0:	4798      	blx	r3
 80195b2:	e002      	b.n	80195ba <HAL_MDMA_IRQHandler+0x2a2>
    return; /* the  General interrupt flag for the current channel is down , nothing to do */
 80195b4:	bf00      	nop
 80195b6:	e000      	b.n	80195ba <HAL_MDMA_IRQHandler+0x2a2>
        return;
 80195b8:	bf00      	nop
    }
  }
}
 80195ba:	3718      	adds	r7, #24
 80195bc:	46bd      	mov	sp, r7
 80195be:	bd80      	pop	{r7, pc}

080195c0 <MDMA_SetConfig>:
  * @param  BlockDataLength : The length of a block transfer in bytes
  * @param  BlockCount: The number of blocks to be transferred
  * @retval HAL status
  */
static void MDMA_SetConfig(MDMA_HandleTypeDef *hmdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t BlockDataLength, uint32_t BlockCount)
{
 80195c0:	b480      	push	{r7}
 80195c2:	b087      	sub	sp, #28
 80195c4:	af00      	add	r7, sp, #0
 80195c6:	60f8      	str	r0, [r7, #12]
 80195c8:	60b9      	str	r1, [r7, #8]
 80195ca:	607a      	str	r2, [r7, #4]
 80195cc:	603b      	str	r3, [r7, #0]
  uint32_t addressMask;

  /* Configure the MDMA Channel data length */
  MODIFY_REG(hmdma->Instance->CBNDTR ,MDMA_CBNDTR_BNDT, (BlockDataLength & MDMA_CBNDTR_BNDT));
 80195ce:	68fb      	ldr	r3, [r7, #12]
 80195d0:	681b      	ldr	r3, [r3, #0]
 80195d2:	695a      	ldr	r2, [r3, #20]
 80195d4:	4b31      	ldr	r3, [pc, #196]	@ (801969c <MDMA_SetConfig+0xdc>)
 80195d6:	4013      	ands	r3, r2
 80195d8:	683a      	ldr	r2, [r7, #0]
 80195da:	f3c2 0110 	ubfx	r1, r2, #0, #17
 80195de:	68fa      	ldr	r2, [r7, #12]
 80195e0:	6812      	ldr	r2, [r2, #0]
 80195e2:	430b      	orrs	r3, r1
 80195e4:	6153      	str	r3, [r2, #20]

  /* Configure the MDMA block repeat count */
  MODIFY_REG(hmdma->Instance->CBNDTR , MDMA_CBNDTR_BRC , ((BlockCount - 1U) << MDMA_CBNDTR_BRC_Pos) & MDMA_CBNDTR_BRC);
 80195e6:	68fb      	ldr	r3, [r7, #12]
 80195e8:	681b      	ldr	r3, [r3, #0]
 80195ea:	695b      	ldr	r3, [r3, #20]
 80195ec:	f3c3 0113 	ubfx	r1, r3, #0, #20
 80195f0:	6a3b      	ldr	r3, [r7, #32]
 80195f2:	3b01      	subs	r3, #1
 80195f4:	051a      	lsls	r2, r3, #20
 80195f6:	68fb      	ldr	r3, [r7, #12]
 80195f8:	681b      	ldr	r3, [r3, #0]
 80195fa:	430a      	orrs	r2, r1
 80195fc:	615a      	str	r2, [r3, #20]

  /* Clear all interrupt flags */
  __HAL_MDMA_CLEAR_FLAG(hmdma, MDMA_FLAG_TE | MDMA_FLAG_CTC | MDMA_CISR_BRTIF | MDMA_CISR_BTIF | MDMA_CISR_TCIF);
 80195fe:	68fb      	ldr	r3, [r7, #12]
 8019600:	681b      	ldr	r3, [r3, #0]
 8019602:	221f      	movs	r2, #31
 8019604:	605a      	str	r2, [r3, #4]

  /* Configure MDMA Channel destination address */
  hmdma->Instance->CDAR = DstAddress;
 8019606:	68fb      	ldr	r3, [r7, #12]
 8019608:	681b      	ldr	r3, [r3, #0]
 801960a:	687a      	ldr	r2, [r7, #4]
 801960c:	61da      	str	r2, [r3, #28]

  /* Configure MDMA Channel Source address */
  hmdma->Instance->CSAR = SrcAddress;
 801960e:	68fb      	ldr	r3, [r7, #12]
 8019610:	681b      	ldr	r3, [r3, #0]
 8019612:	68ba      	ldr	r2, [r7, #8]
 8019614:	619a      	str	r2, [r3, #24]

  addressMask = SrcAddress & 0xFF000000U;
 8019616:	68bb      	ldr	r3, [r7, #8]
 8019618:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 801961c:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8019624:	d002      	beq.n	801962c <MDMA_SetConfig+0x6c>
 8019626:	697b      	ldr	r3, [r7, #20]
 8019628:	2b00      	cmp	r3, #0
 801962a:	d108      	bne.n	801963e <MDMA_SetConfig+0x7e>
  {
    /*The AHBSbus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_SBUS;
 801962c:	68fb      	ldr	r3, [r7, #12]
 801962e:	681b      	ldr	r3, [r3, #0]
 8019630:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019632:	68fb      	ldr	r3, [r7, #12]
 8019634:	681b      	ldr	r3, [r3, #0]
 8019636:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801963a:	629a      	str	r2, [r3, #40]	@ 0x28
 801963c:	e007      	b.n	801964e <MDMA_SetConfig+0x8e>
  }
  else
  {
    /*The AXI bus is used as source (read operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_SBUS);
 801963e:	68fb      	ldr	r3, [r7, #12]
 8019640:	681b      	ldr	r3, [r3, #0]
 8019642:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019644:	68fb      	ldr	r3, [r7, #12]
 8019646:	681b      	ldr	r3, [r3, #0]
 8019648:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801964c:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  addressMask = DstAddress & 0xFF000000U;
 801964e:	687b      	ldr	r3, [r7, #4]
 8019650:	f003 437f 	and.w	r3, r3, #4278190080	@ 0xff000000
 8019654:	617b      	str	r3, [r7, #20]
  if((addressMask == 0x20000000U) || (addressMask == 0x00000000U))
 8019656:	697b      	ldr	r3, [r7, #20]
 8019658:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801965c:	d002      	beq.n	8019664 <MDMA_SetConfig+0xa4>
 801965e:	697b      	ldr	r3, [r7, #20]
 8019660:	2b00      	cmp	r3, #0
 8019662:	d108      	bne.n	8019676 <MDMA_SetConfig+0xb6>
  {
    /*The AHB bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR |= MDMA_CTBR_DBUS;
 8019664:	68fb      	ldr	r3, [r7, #12]
 8019666:	681b      	ldr	r3, [r3, #0]
 8019668:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801966a:	68fb      	ldr	r3, [r7, #12]
 801966c:	681b      	ldr	r3, [r3, #0]
 801966e:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 8019672:	629a      	str	r2, [r3, #40]	@ 0x28
 8019674:	e007      	b.n	8019686 <MDMA_SetConfig+0xc6>
  }
  else
  {
    /*The AXI bus is used as destination (write operation) on channel x */
    hmdma->Instance->CTBR &= (~MDMA_CTBR_DBUS);
 8019676:	68fb      	ldr	r3, [r7, #12]
 8019678:	681b      	ldr	r3, [r3, #0]
 801967a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801967c:	68fb      	ldr	r3, [r7, #12]
 801967e:	681b      	ldr	r3, [r3, #0]
 8019680:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 8019684:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Set the linked list register to the first node of the list */
  hmdma->Instance->CLAR = (uint32_t)hmdma->FirstLinkedListNodeAddress;
 8019686:	68fb      	ldr	r3, [r7, #12]
 8019688:	6dda      	ldr	r2, [r3, #92]	@ 0x5c
 801968a:	68fb      	ldr	r3, [r7, #12]
 801968c:	681b      	ldr	r3, [r3, #0]
 801968e:	625a      	str	r2, [r3, #36]	@ 0x24
}
 8019690:	bf00      	nop
 8019692:	371c      	adds	r7, #28
 8019694:	46bd      	mov	sp, r7
 8019696:	f85d 7b04 	ldr.w	r7, [sp], #4
 801969a:	4770      	bx	lr
 801969c:	fffe0000 	.word	0xfffe0000

080196a0 <MDMA_Init>:
  * @param  hmdma:       pointer to a MDMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified MDMA Channel.
  * @retval None
  */
static void MDMA_Init(MDMA_HandleTypeDef *hmdma)
{
 80196a0:	b480      	push	{r7}
 80196a2:	b085      	sub	sp, #20
 80196a4:	af00      	add	r7, sp, #0
 80196a6:	6078      	str	r0, [r7, #4]
  uint32_t blockoffset;

  /* Prepare the MDMA Channel configuration */
  hmdma->Instance->CCR = hmdma->Init.Priority  | hmdma->Init.Endianness;
 80196a8:	687b      	ldr	r3, [r7, #4]
 80196aa:	68d9      	ldr	r1, [r3, #12]
 80196ac:	687b      	ldr	r3, [r7, #4]
 80196ae:	691a      	ldr	r2, [r3, #16]
 80196b0:	687b      	ldr	r3, [r7, #4]
 80196b2:	681b      	ldr	r3, [r3, #0]
 80196b4:	430a      	orrs	r2, r1
 80196b6:	60da      	str	r2, [r3, #12]

  /* Write new CTCR Register value */
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80196b8:	687b      	ldr	r3, [r7, #4]
 80196ba:	695a      	ldr	r2, [r3, #20]
 80196bc:	687b      	ldr	r3, [r7, #4]
 80196be:	699b      	ldr	r3, [r3, #24]
 80196c0:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80196c2:	687b      	ldr	r3, [r7, #4]
 80196c4:	69db      	ldr	r3, [r3, #28]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80196c6:	431a      	orrs	r2, r3
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80196c8:	687b      	ldr	r3, [r7, #4]
 80196ca:	6a1b      	ldr	r3, [r3, #32]
 80196cc:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
                           hmdma->Init.SourceDataSize | hmdma->Init.DestDataSize   | \
 80196d2:	431a      	orrs	r2, r3
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80196d4:	687b      	ldr	r3, [r7, #4]
 80196d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80196d8:	431a      	orrs	r2, r3
                           hmdma->Init.DestBurst                                   | \
 80196da:	687b      	ldr	r3, [r7, #4]
 80196dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                           hmdma->Init.DataAlignment  | hmdma->Init.SourceBurst    | \
 80196de:	431a      	orrs	r2, r3
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80196e0:	687b      	ldr	r3, [r7, #4]
 80196e2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80196e4:	3b01      	subs	r3, #1
 80196e6:	049b      	lsls	r3, r3, #18
                           hmdma->Init.DestBurst                                   | \
 80196e8:	ea42 0103 	orr.w	r1, r2, r3
                           hmdma->Init.TransferTriggerMode;
 80196ec:	687b      	ldr	r3, [r7, #4]
 80196ee:	689a      	ldr	r2, [r3, #8]
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80196f0:	687b      	ldr	r3, [r7, #4]
 80196f2:	681b      	ldr	r3, [r3, #0]
                           ((hmdma->Init.BufferTransferLength - 1U) << MDMA_CTCR_TLEN_Pos) | \
 80196f4:	430a      	orrs	r2, r1
  hmdma->Instance->CTCR =  hmdma->Init.SourceInc      | hmdma->Init.DestinationInc | \
 80196f6:	611a      	str	r2, [r3, #16]

  /* If SW request set the CTCR register to SW Request Mode */
  if(hmdma->Init.Request == MDMA_REQUEST_SW)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	685b      	ldr	r3, [r3, #4]
 80196fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8019700:	d107      	bne.n	8019712 <MDMA_Init+0x72>
    -If the request is done by SW : BWM could be set to 1 or 0.
    -If the request is done by a peripheral :
    If mask address not set (0) => BWM must be set to 0
    If mask address set (different than 0) => BWM could be set to 1 or 0
    */
    hmdma->Instance->CTCR |= (MDMA_CTCR_SWRM | MDMA_CTCR_BWM);
 8019702:	687b      	ldr	r3, [r7, #4]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	691a      	ldr	r2, [r3, #16]
 8019708:	687b      	ldr	r3, [r7, #4]
 801970a:	681b      	ldr	r3, [r3, #0]
 801970c:	f042 4240 	orr.w	r2, r2, #3221225472	@ 0xc0000000
 8019710:	611a      	str	r2, [r3, #16]
  }

  /* Reset CBNDTR Register */
  hmdma->Instance->CBNDTR = 0;
 8019712:	687b      	ldr	r3, [r7, #4]
 8019714:	681b      	ldr	r3, [r3, #0]
 8019716:	2200      	movs	r2, #0
 8019718:	615a      	str	r2, [r3, #20]

  /* if block source address offset is negative set the Block Repeat Source address Update Mode to decrement */
  if(hmdma->Init.SourceBlockAddressOffset < 0)
 801971a:	687b      	ldr	r3, [r7, #4]
 801971c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801971e:	2b00      	cmp	r3, #0
 8019720:	da11      	bge.n	8019746 <MDMA_Init+0xa6>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRSUM;
 8019722:	687b      	ldr	r3, [r7, #4]
 8019724:	681b      	ldr	r3, [r3, #0]
 8019726:	695a      	ldr	r2, [r3, #20]
 8019728:	687b      	ldr	r3, [r7, #4]
 801972a:	681b      	ldr	r3, [r3, #0]
 801972c:	f442 2280 	orr.w	r2, r2, #262144	@ 0x40000
 8019730:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : source repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.SourceBlockAddressOffset);
 8019732:	687b      	ldr	r3, [r7, #4]
 8019734:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019736:	425b      	negs	r3, r3
 8019738:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR = (blockoffset & 0x0000FFFFU);
 801973a:	687b      	ldr	r3, [r7, #4]
 801973c:	681b      	ldr	r3, [r3, #0]
 801973e:	68fa      	ldr	r2, [r7, #12]
 8019740:	b292      	uxth	r2, r2
 8019742:	621a      	str	r2, [r3, #32]
 8019744:	e006      	b.n	8019754 <MDMA_Init+0xb4>
  }
  else
  {
    /* Write new CBRUR Register value : source repeat block offset */
    hmdma->Instance->CBRUR = (((uint32_t)hmdma->Init.SourceBlockAddressOffset) & 0x0000FFFFU);
 8019746:	687b      	ldr	r3, [r7, #4]
 8019748:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801974a:	461a      	mov	r2, r3
 801974c:	687b      	ldr	r3, [r7, #4]
 801974e:	681b      	ldr	r3, [r3, #0]
 8019750:	b292      	uxth	r2, r2
 8019752:	621a      	str	r2, [r3, #32]
  }

  /* If block destination address offset is negative set the Block Repeat destination address Update Mode to decrement */
  if(hmdma->Init.DestBlockAddressOffset < 0)
 8019754:	687b      	ldr	r3, [r7, #4]
 8019756:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019758:	2b00      	cmp	r3, #0
 801975a:	da15      	bge.n	8019788 <MDMA_Init+0xe8>
  {
    hmdma->Instance->CBNDTR |= MDMA_CBNDTR_BRDUM;
 801975c:	687b      	ldr	r3, [r7, #4]
 801975e:	681b      	ldr	r3, [r3, #0]
 8019760:	695a      	ldr	r2, [r3, #20]
 8019762:	687b      	ldr	r3, [r7, #4]
 8019764:	681b      	ldr	r3, [r3, #0]
 8019766:	f442 2200 	orr.w	r2, r2, #524288	@ 0x80000
 801976a:	615a      	str	r2, [r3, #20]
    /* Write new CBRUR Register value : destination repeat block offset */
    blockoffset = (uint32_t)(- hmdma->Init.DestBlockAddressOffset);
 801976c:	687b      	ldr	r3, [r7, #4]
 801976e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019770:	425b      	negs	r3, r3
 8019772:	60fb      	str	r3, [r7, #12]
    hmdma->Instance->CBRUR |= ((blockoffset & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8019774:	687b      	ldr	r3, [r7, #4]
 8019776:	681b      	ldr	r3, [r3, #0]
 8019778:	6a19      	ldr	r1, [r3, #32]
 801977a:	68fb      	ldr	r3, [r7, #12]
 801977c:	041a      	lsls	r2, r3, #16
 801977e:	687b      	ldr	r3, [r7, #4]
 8019780:	681b      	ldr	r3, [r3, #0]
 8019782:	430a      	orrs	r2, r1
 8019784:	621a      	str	r2, [r3, #32]
 8019786:	e009      	b.n	801979c <MDMA_Init+0xfc>
  }
  else
  {
    /*write new CBRUR Register value : destination repeat block offset */
    hmdma->Instance->CBRUR |= ((((uint32_t)hmdma->Init.DestBlockAddressOffset) & 0x0000FFFFU) << MDMA_CBRUR_DUV_Pos);
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	681b      	ldr	r3, [r3, #0]
 801978c:	6a19      	ldr	r1, [r3, #32]
 801978e:	687b      	ldr	r3, [r7, #4]
 8019790:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019792:	041a      	lsls	r2, r3, #16
 8019794:	687b      	ldr	r3, [r7, #4]
 8019796:	681b      	ldr	r3, [r3, #0]
 8019798:	430a      	orrs	r2, r1
 801979a:	621a      	str	r2, [r3, #32]
  }

  /* if HW request set the HW request and the requet CleraMask and ClearData MaskData, */
  if(hmdma->Init.Request != MDMA_REQUEST_SW)
 801979c:	687b      	ldr	r3, [r7, #4]
 801979e:	685b      	ldr	r3, [r3, #4]
 80197a0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80197a4:	d006      	beq.n	80197b4 <MDMA_Init+0x114>
  {
    /* Set the HW request in CTRB register  */
    hmdma->Instance->CTBR = hmdma->Init.Request & MDMA_CTBR_TSEL;
 80197a6:	687b      	ldr	r3, [r7, #4]
 80197a8:	685a      	ldr	r2, [r3, #4]
 80197aa:	687b      	ldr	r3, [r7, #4]
 80197ac:	681b      	ldr	r3, [r3, #0]
 80197ae:	b2d2      	uxtb	r2, r2
 80197b0:	629a      	str	r2, [r3, #40]	@ 0x28
 80197b2:	e003      	b.n	80197bc <MDMA_Init+0x11c>
  }
  else /* SW request : reset the CTBR register */
  {
    hmdma->Instance->CTBR = 0;
 80197b4:	687b      	ldr	r3, [r7, #4]
 80197b6:	681b      	ldr	r3, [r3, #0]
 80197b8:	2200      	movs	r2, #0
 80197ba:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Write Link Address Register */
  hmdma->Instance->CLAR =  0;
 80197bc:	687b      	ldr	r3, [r7, #4]
 80197be:	681b      	ldr	r3, [r3, #0]
 80197c0:	2200      	movs	r2, #0
 80197c2:	625a      	str	r2, [r3, #36]	@ 0x24
}
 80197c4:	bf00      	nop
 80197c6:	3714      	adds	r7, #20
 80197c8:	46bd      	mov	sp, r7
 80197ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80197ce:	4770      	bx	lr

080197d0 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 80197d0:	b580      	push	{r7, lr}
 80197d2:	b086      	sub	sp, #24
 80197d4:	af02      	add	r7, sp, #8
 80197d6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80197d8:	f7f8 fcd0 	bl	801217c <HAL_GetTick>
 80197dc:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 80197de:	687b      	ldr	r3, [r7, #4]
 80197e0:	2b00      	cmp	r3, #0
 80197e2:	d101      	bne.n	80197e8 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 80197e4:	2301      	movs	r3, #1
 80197e6:	e05f      	b.n	80198a8 <HAL_QSPI_Init+0xd8>
  if (hqspi->Init.DualFlash != QSPI_DUALFLASH_ENABLE )
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 80197e8:	687b      	ldr	r3, [r7, #4]
 80197ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80197ee:	b2db      	uxtb	r3, r3
 80197f0:	2b00      	cmp	r3, #0
 80197f2:	d107      	bne.n	8019804 <HAL_QSPI_Init+0x34>

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 80197f4:	6878      	ldr	r0, [r7, #4]
 80197f6:	f000 f85f 	bl	80198b8 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 80197fa:	f241 3188 	movw	r1, #5000	@ 0x1388
 80197fe:	6878      	ldr	r0, [r7, #4]
 8019800:	f000 faca 	bl	8019d98 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8019804:	687b      	ldr	r3, [r7, #4]
 8019806:	681b      	ldr	r3, [r3, #0]
 8019808:	681b      	ldr	r3, [r3, #0]
 801980a:	f423 51f8 	bic.w	r1, r3, #7936	@ 0x1f00
 801980e:	687b      	ldr	r3, [r7, #4]
 8019810:	689b      	ldr	r3, [r3, #8]
 8019812:	3b01      	subs	r3, #1
 8019814:	021a      	lsls	r2, r3, #8
 8019816:	687b      	ldr	r3, [r7, #4]
 8019818:	681b      	ldr	r3, [r3, #0]
 801981a:	430a      	orrs	r2, r1
 801981c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 801981e:	687b      	ldr	r3, [r7, #4]
 8019820:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019822:	9300      	str	r3, [sp, #0]
 8019824:	68fb      	ldr	r3, [r7, #12]
 8019826:	2200      	movs	r2, #0
 8019828:	2120      	movs	r1, #32
 801982a:	6878      	ldr	r0, [r7, #4]
 801982c:	f000 fac2 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019830:	4603      	mov	r3, r0
 8019832:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8019834:	7afb      	ldrb	r3, [r7, #11]
 8019836:	2b00      	cmp	r3, #0
 8019838:	d135      	bne.n	80198a6 <HAL_QSPI_Init+0xd6>
  {
    /* Configure QSPI Clock Prescaler and Sample Shift */
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
 801983a:	687b      	ldr	r3, [r7, #4]
 801983c:	681b      	ldr	r3, [r3, #0]
 801983e:	681a      	ldr	r2, [r3, #0]
 8019840:	4b1b      	ldr	r3, [pc, #108]	@ (80198b0 <HAL_QSPI_Init+0xe0>)
 8019842:	4013      	ands	r3, r2
 8019844:	687a      	ldr	r2, [r7, #4]
 8019846:	6852      	ldr	r2, [r2, #4]
 8019848:	0611      	lsls	r1, r2, #24
 801984a:	687a      	ldr	r2, [r7, #4]
 801984c:	68d2      	ldr	r2, [r2, #12]
 801984e:	4311      	orrs	r1, r2
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	69d2      	ldr	r2, [r2, #28]
 8019854:	4311      	orrs	r1, r2
 8019856:	687a      	ldr	r2, [r7, #4]
 8019858:	6a12      	ldr	r2, [r2, #32]
 801985a:	4311      	orrs	r1, r2
 801985c:	687a      	ldr	r2, [r7, #4]
 801985e:	6812      	ldr	r2, [r2, #0]
 8019860:	430b      	orrs	r3, r1
 8019862:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 8019864:	687b      	ldr	r3, [r7, #4]
 8019866:	681b      	ldr	r3, [r3, #0]
 8019868:	685a      	ldr	r2, [r3, #4]
 801986a:	4b12      	ldr	r3, [pc, #72]	@ (80198b4 <HAL_QSPI_Init+0xe4>)
 801986c:	4013      	ands	r3, r2
 801986e:	687a      	ldr	r2, [r7, #4]
 8019870:	6912      	ldr	r2, [r2, #16]
 8019872:	0411      	lsls	r1, r2, #16
 8019874:	687a      	ldr	r2, [r7, #4]
 8019876:	6952      	ldr	r2, [r2, #20]
 8019878:	4311      	orrs	r1, r2
 801987a:	687a      	ldr	r2, [r7, #4]
 801987c:	6992      	ldr	r2, [r2, #24]
 801987e:	4311      	orrs	r1, r2
 8019880:	687a      	ldr	r2, [r7, #4]
 8019882:	6812      	ldr	r2, [r2, #0]
 8019884:	430b      	orrs	r3, r1
 8019886:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 8019888:	687b      	ldr	r3, [r7, #4]
 801988a:	681b      	ldr	r3, [r3, #0]
 801988c:	681a      	ldr	r2, [r3, #0]
 801988e:	687b      	ldr	r3, [r7, #4]
 8019890:	681b      	ldr	r3, [r3, #0]
 8019892:	f042 0201 	orr.w	r2, r2, #1
 8019896:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8019898:	687b      	ldr	r3, [r7, #4]
 801989a:	2200      	movs	r2, #0
 801989c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 801989e:	687b      	ldr	r3, [r7, #4]
 80198a0:	2201      	movs	r2, #1
 80198a2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  }

  /* Return function status */
  return status;
 80198a6:	7afb      	ldrb	r3, [r7, #11]
}
 80198a8:	4618      	mov	r0, r3
 80198aa:	3710      	adds	r7, #16
 80198ac:	46bd      	mov	sp, r7
 80198ae:	bd80      	pop	{r7, pc}
 80198b0:	00ffff2f 	.word	0x00ffff2f
 80198b4:	ffe0f8fe 	.word	0xffe0f8fe

080198b8 <HAL_QSPI_MspInit>:
  * @brief Initialize the QSPI MSP.
  * @param hqspi QSPI handle
  * @retval None
  */
__weak void HAL_QSPI_MspInit(QSPI_HandleTypeDef *hqspi)
{
 80198b8:	b480      	push	{r7}
 80198ba:	b083      	sub	sp, #12
 80198bc:	af00      	add	r7, sp, #0
 80198be:	6078      	str	r0, [r7, #4]
  UNUSED(hqspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_QSPI_MspInit can be implemented in the user file
   */
}
 80198c0:	bf00      	nop
 80198c2:	370c      	adds	r7, #12
 80198c4:	46bd      	mov	sp, r7
 80198c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80198ca:	4770      	bx	lr

080198cc <HAL_QSPI_Command>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read or Write Modes
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Command(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t Timeout)
{
 80198cc:	b580      	push	{r7, lr}
 80198ce:	b088      	sub	sp, #32
 80198d0:	af02      	add	r7, sp, #8
 80198d2:	60f8      	str	r0, [r7, #12]
 80198d4:	60b9      	str	r1, [r7, #8]
 80198d6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 80198d8:	f7f8 fc50 	bl	801217c <HAL_GetTick>
 80198dc:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_DDR_MODE(cmd->DdrMode));
  assert_param(IS_QSPI_DDR_HHC(cmd->DdrHoldHalfCycle));
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 80198de:	68fb      	ldr	r3, [r7, #12]
 80198e0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80198e4:	b2db      	uxtb	r3, r3
 80198e6:	2b01      	cmp	r3, #1
 80198e8:	d101      	bne.n	80198ee <HAL_QSPI_Command+0x22>
 80198ea:	2302      	movs	r3, #2
 80198ec:	e048      	b.n	8019980 <HAL_QSPI_Command+0xb4>
 80198ee:	68fb      	ldr	r3, [r7, #12]
 80198f0:	2201      	movs	r2, #1
 80198f2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80198fc:	b2db      	uxtb	r3, r3
 80198fe:	2b01      	cmp	r3, #1
 8019900:	d137      	bne.n	8019972 <HAL_QSPI_Command+0xa6>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8019902:	68fb      	ldr	r3, [r7, #12]
 8019904:	2200      	movs	r2, #0
 8019906:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update QSPI state */
    hqspi->State = HAL_QSPI_STATE_BUSY;
 8019908:	68fb      	ldr	r3, [r7, #12]
 801990a:	2202      	movs	r2, #2
 801990c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8019910:	687b      	ldr	r3, [r7, #4]
 8019912:	9300      	str	r3, [sp, #0]
 8019914:	693b      	ldr	r3, [r7, #16]
 8019916:	2200      	movs	r2, #0
 8019918:	2120      	movs	r1, #32
 801991a:	68f8      	ldr	r0, [r7, #12]
 801991c:	f000 fa4a 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019920:	4603      	mov	r3, r0
 8019922:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8019924:	7dfb      	ldrb	r3, [r7, #23]
 8019926:	2b00      	cmp	r3, #0
 8019928:	d125      	bne.n	8019976 <HAL_QSPI_Command+0xaa>
    {
      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 801992a:	2200      	movs	r2, #0
 801992c:	68b9      	ldr	r1, [r7, #8]
 801992e:	68f8      	ldr	r0, [r7, #12]
 8019930:	f000 fa77 	bl	8019e22 <QSPI_Config>

      if (cmd->DataMode == QSPI_DATA_NONE)
 8019934:	68bb      	ldr	r3, [r7, #8]
 8019936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019938:	2b00      	cmp	r3, #0
 801993a:	d115      	bne.n	8019968 <HAL_QSPI_Command+0x9c>
      {
        /* When there is no data phase, the transfer start as soon as the configuration is done
        so wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 801993c:	687b      	ldr	r3, [r7, #4]
 801993e:	9300      	str	r3, [sp, #0]
 8019940:	693b      	ldr	r3, [r7, #16]
 8019942:	2201      	movs	r2, #1
 8019944:	2102      	movs	r1, #2
 8019946:	68f8      	ldr	r0, [r7, #12]
 8019948:	f000 fa34 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 801994c:	4603      	mov	r3, r0
 801994e:	75fb      	strb	r3, [r7, #23]

        if (status == HAL_OK)
 8019950:	7dfb      	ldrb	r3, [r7, #23]
 8019952:	2b00      	cmp	r3, #0
 8019954:	d10f      	bne.n	8019976 <HAL_QSPI_Command+0xaa>
        {
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8019956:	68fb      	ldr	r3, [r7, #12]
 8019958:	681b      	ldr	r3, [r3, #0]
 801995a:	2202      	movs	r2, #2
 801995c:	60da      	str	r2, [r3, #12]

          /* Update QSPI state */
          hqspi->State = HAL_QSPI_STATE_READY;
 801995e:	68fb      	ldr	r3, [r7, #12]
 8019960:	2201      	movs	r2, #1
 8019962:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019966:	e006      	b.n	8019976 <HAL_QSPI_Command+0xaa>
        }
      }
      else
      {
        /* Update QSPI state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8019968:	68fb      	ldr	r3, [r7, #12]
 801996a:	2201      	movs	r2, #1
 801996c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019970:	e001      	b.n	8019976 <HAL_QSPI_Command+0xaa>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8019972:	2302      	movs	r3, #2
 8019974:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8019976:	68fb      	ldr	r3, [r7, #12]
 8019978:	2200      	movs	r2, #0
 801997a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 801997e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019980:	4618      	mov	r0, r3
 8019982:	3718      	adds	r7, #24
 8019984:	46bd      	mov	sp, r7
 8019986:	bd80      	pop	{r7, pc}

08019988 <HAL_QSPI_Transmit>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Write Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Transmit(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8019988:	b580      	push	{r7, lr}
 801998a:	b08a      	sub	sp, #40	@ 0x28
 801998c:	af02      	add	r7, sp, #8
 801998e:	60f8      	str	r0, [r7, #12]
 8019990:	60b9      	str	r1, [r7, #8]
 8019992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019994:	2300      	movs	r3, #0
 8019996:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8019998:	f7f8 fbf0 	bl	801217c <HAL_GetTick>
 801999c:	61b8      	str	r0, [r7, #24]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 801999e:	68fb      	ldr	r3, [r7, #12]
 80199a0:	681b      	ldr	r3, [r3, #0]
 80199a2:	3320      	adds	r3, #32
 80199a4:	617b      	str	r3, [r7, #20]

  /* Process locked */
  __HAL_LOCK(hqspi);
 80199a6:	68fb      	ldr	r3, [r7, #12]
 80199a8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80199ac:	b2db      	uxtb	r3, r3
 80199ae:	2b01      	cmp	r3, #1
 80199b0:	d101      	bne.n	80199b6 <HAL_QSPI_Transmit+0x2e>
 80199b2:	2302      	movs	r3, #2
 80199b4:	e076      	b.n	8019aa4 <HAL_QSPI_Transmit+0x11c>
 80199b6:	68fb      	ldr	r3, [r7, #12]
 80199b8:	2201      	movs	r2, #1
 80199ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 80199be:	68fb      	ldr	r3, [r7, #12]
 80199c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80199c4:	b2db      	uxtb	r3, r3
 80199c6:	2b01      	cmp	r3, #1
 80199c8:	d165      	bne.n	8019a96 <HAL_QSPI_Transmit+0x10e>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80199ca:	68fb      	ldr	r3, [r7, #12]
 80199cc:	2200      	movs	r2, #0
 80199ce:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 80199d0:	68bb      	ldr	r3, [r7, #8]
 80199d2:	2b00      	cmp	r3, #0
 80199d4:	d056      	beq.n	8019a84 <HAL_QSPI_Transmit+0xfc>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_TX;
 80199d6:	68fb      	ldr	r3, [r7, #12]
 80199d8:	2212      	movs	r2, #18
 80199da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->TxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 80199de:	68fb      	ldr	r3, [r7, #12]
 80199e0:	681b      	ldr	r3, [r3, #0]
 80199e2:	691b      	ldr	r3, [r3, #16]
 80199e4:	1c5a      	adds	r2, r3, #1
 80199e6:	68fb      	ldr	r3, [r7, #12]
 80199e8:	62da      	str	r2, [r3, #44]	@ 0x2c
      hqspi->TxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 80199ea:	68fb      	ldr	r3, [r7, #12]
 80199ec:	681b      	ldr	r3, [r3, #0]
 80199ee:	691b      	ldr	r3, [r3, #16]
 80199f0:	1c5a      	adds	r2, r3, #1
 80199f2:	68fb      	ldr	r3, [r7, #12]
 80199f4:	629a      	str	r2, [r3, #40]	@ 0x28
      hqspi->pTxBuffPtr = pData;
 80199f6:	68fb      	ldr	r3, [r7, #12]
 80199f8:	68ba      	ldr	r2, [r7, #8]
 80199fa:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: CCR register with functional as indirect write */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_WRITE);
 80199fc:	68fb      	ldr	r3, [r7, #12]
 80199fe:	681b      	ldr	r3, [r3, #0]
 8019a00:	695a      	ldr	r2, [r3, #20]
 8019a02:	68fb      	ldr	r3, [r7, #12]
 8019a04:	681b      	ldr	r3, [r3, #0]
 8019a06:	f022 6240 	bic.w	r2, r2, #201326592	@ 0xc000000
 8019a0a:	615a      	str	r2, [r3, #20]

      while(hqspi->TxXferCount > 0U)
 8019a0c:	e01b      	b.n	8019a46 <HAL_QSPI_Transmit+0xbe>
      {
        /* Wait until FT flag is set to send data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_FT, SET, tickstart, Timeout);
 8019a0e:	687b      	ldr	r3, [r7, #4]
 8019a10:	9300      	str	r3, [sp, #0]
 8019a12:	69bb      	ldr	r3, [r7, #24]
 8019a14:	2201      	movs	r2, #1
 8019a16:	2104      	movs	r1, #4
 8019a18:	68f8      	ldr	r0, [r7, #12]
 8019a1a:	f000 f9cb 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019a1e:	4603      	mov	r3, r0
 8019a20:	77fb      	strb	r3, [r7, #31]

        if (status != HAL_OK)
 8019a22:	7ffb      	ldrb	r3, [r7, #31]
 8019a24:	2b00      	cmp	r3, #0
 8019a26:	d113      	bne.n	8019a50 <HAL_QSPI_Transmit+0xc8>
        {
          break;
        }

        *((__IO uint8_t *)data_reg) = *hqspi->pTxBuffPtr;
 8019a28:	68fb      	ldr	r3, [r7, #12]
 8019a2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a2c:	781a      	ldrb	r2, [r3, #0]
 8019a2e:	697b      	ldr	r3, [r7, #20]
 8019a30:	701a      	strb	r2, [r3, #0]
        hqspi->pTxBuffPtr++;
 8019a32:	68fb      	ldr	r3, [r7, #12]
 8019a34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a36:	1c5a      	adds	r2, r3, #1
 8019a38:	68fb      	ldr	r3, [r7, #12]
 8019a3a:	625a      	str	r2, [r3, #36]	@ 0x24
        hqspi->TxXferCount--;
 8019a3c:	68fb      	ldr	r3, [r7, #12]
 8019a3e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a40:	1e5a      	subs	r2, r3, #1
 8019a42:	68fb      	ldr	r3, [r7, #12]
 8019a44:	62da      	str	r2, [r3, #44]	@ 0x2c
      while(hqspi->TxXferCount > 0U)
 8019a46:	68fb      	ldr	r3, [r7, #12]
 8019a48:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019a4a:	2b00      	cmp	r3, #0
 8019a4c:	d1df      	bne.n	8019a0e <HAL_QSPI_Transmit+0x86>
 8019a4e:	e000      	b.n	8019a52 <HAL_QSPI_Transmit+0xca>
          break;
 8019a50:	bf00      	nop
      }

      if (status == HAL_OK)
 8019a52:	7ffb      	ldrb	r3, [r7, #31]
 8019a54:	2b00      	cmp	r3, #0
 8019a56:	d110      	bne.n	8019a7a <HAL_QSPI_Transmit+0xf2>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8019a58:	687b      	ldr	r3, [r7, #4]
 8019a5a:	9300      	str	r3, [sp, #0]
 8019a5c:	69bb      	ldr	r3, [r7, #24]
 8019a5e:	2201      	movs	r2, #1
 8019a60:	2102      	movs	r1, #2
 8019a62:	68f8      	ldr	r0, [r7, #12]
 8019a64:	f000 f9a6 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019a68:	4603      	mov	r3, r0
 8019a6a:	77fb      	strb	r3, [r7, #31]

        if (status == HAL_OK)
 8019a6c:	7ffb      	ldrb	r3, [r7, #31]
 8019a6e:	2b00      	cmp	r3, #0
 8019a70:	d103      	bne.n	8019a7a <HAL_QSPI_Transmit+0xf2>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8019a72:	68fb      	ldr	r3, [r7, #12]
 8019a74:	681b      	ldr	r3, [r3, #0]
 8019a76:	2202      	movs	r2, #2
 8019a78:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8019a7a:	68fb      	ldr	r3, [r7, #12]
 8019a7c:	2201      	movs	r2, #1
 8019a7e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019a82:	e00a      	b.n	8019a9a <HAL_QSPI_Transmit+0x112>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8019a84:	68fb      	ldr	r3, [r7, #12]
 8019a86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019a88:	f043 0208 	orr.w	r2, r3, #8
 8019a8c:	68fb      	ldr	r3, [r7, #12]
 8019a8e:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8019a90:	2301      	movs	r3, #1
 8019a92:	77fb      	strb	r3, [r7, #31]
 8019a94:	e001      	b.n	8019a9a <HAL_QSPI_Transmit+0x112>
    }
  }
  else
  {
    status = HAL_BUSY;
 8019a96:	2302      	movs	r3, #2
 8019a98:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8019a9a:	68fb      	ldr	r3, [r7, #12]
 8019a9c:	2200      	movs	r2, #0
 8019a9e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8019aa2:	7ffb      	ldrb	r3, [r7, #31]
}
 8019aa4:	4618      	mov	r0, r3
 8019aa6:	3720      	adds	r7, #32
 8019aa8:	46bd      	mov	sp, r7
 8019aaa:	bd80      	pop	{r7, pc}

08019aac <HAL_QSPI_Receive>:
  * @param Timeout Timeout duration
  * @note   This function is used only in Indirect Read Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Receive(QSPI_HandleTypeDef *hqspi, uint8_t *pData, uint32_t Timeout)
{
 8019aac:	b580      	push	{r7, lr}
 8019aae:	b08a      	sub	sp, #40	@ 0x28
 8019ab0:	af02      	add	r7, sp, #8
 8019ab2:	60f8      	str	r0, [r7, #12]
 8019ab4:	60b9      	str	r1, [r7, #8]
 8019ab6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8019ab8:	2300      	movs	r3, #0
 8019aba:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart = HAL_GetTick();
 8019abc:	f7f8 fb5e 	bl	801217c <HAL_GetTick>
 8019ac0:	61b8      	str	r0, [r7, #24]
  uint32_t addr_reg = READ_REG(hqspi->Instance->AR);
 8019ac2:	68fb      	ldr	r3, [r7, #12]
 8019ac4:	681b      	ldr	r3, [r3, #0]
 8019ac6:	699b      	ldr	r3, [r3, #24]
 8019ac8:	617b      	str	r3, [r7, #20]
  __IO uint32_t *data_reg = &hqspi->Instance->DR;
 8019aca:	68fb      	ldr	r3, [r7, #12]
 8019acc:	681b      	ldr	r3, [r3, #0]
 8019ace:	3320      	adds	r3, #32
 8019ad0:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hqspi);
 8019ad2:	68fb      	ldr	r3, [r7, #12]
 8019ad4:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019ad8:	b2db      	uxtb	r3, r3
 8019ada:	2b01      	cmp	r3, #1
 8019adc:	d101      	bne.n	8019ae2 <HAL_QSPI_Receive+0x36>
 8019ade:	2302      	movs	r3, #2
 8019ae0:	e07d      	b.n	8019bde <HAL_QSPI_Receive+0x132>
 8019ae2:	68fb      	ldr	r3, [r7, #12]
 8019ae4:	2201      	movs	r2, #1
 8019ae6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8019aea:	68fb      	ldr	r3, [r7, #12]
 8019aec:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019af0:	b2db      	uxtb	r3, r3
 8019af2:	2b01      	cmp	r3, #1
 8019af4:	d16c      	bne.n	8019bd0 <HAL_QSPI_Receive+0x124>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8019af6:	68fb      	ldr	r3, [r7, #12]
 8019af8:	2200      	movs	r2, #0
 8019afa:	645a      	str	r2, [r3, #68]	@ 0x44

    if(pData != NULL )
 8019afc:	68bb      	ldr	r3, [r7, #8]
 8019afe:	2b00      	cmp	r3, #0
 8019b00:	d05d      	beq.n	8019bbe <HAL_QSPI_Receive+0x112>
    {
      /* Update state */
      hqspi->State = HAL_QSPI_STATE_BUSY_INDIRECT_RX;
 8019b02:	68fb      	ldr	r3, [r7, #12]
 8019b04:	2222      	movs	r2, #34	@ 0x22
 8019b06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      /* Configure counters and size of the handle */
      hqspi->RxXferCount = READ_REG(hqspi->Instance->DLR) + 1U;
 8019b0a:	68fb      	ldr	r3, [r7, #12]
 8019b0c:	681b      	ldr	r3, [r3, #0]
 8019b0e:	691b      	ldr	r3, [r3, #16]
 8019b10:	1c5a      	adds	r2, r3, #1
 8019b12:	68fb      	ldr	r3, [r7, #12]
 8019b14:	639a      	str	r2, [r3, #56]	@ 0x38
      hqspi->RxXferSize = READ_REG(hqspi->Instance->DLR) + 1U;
 8019b16:	68fb      	ldr	r3, [r7, #12]
 8019b18:	681b      	ldr	r3, [r3, #0]
 8019b1a:	691b      	ldr	r3, [r3, #16]
 8019b1c:	1c5a      	adds	r2, r3, #1
 8019b1e:	68fb      	ldr	r3, [r7, #12]
 8019b20:	635a      	str	r2, [r3, #52]	@ 0x34
      hqspi->pRxBuffPtr = pData;
 8019b22:	68fb      	ldr	r3, [r7, #12]
 8019b24:	68ba      	ldr	r2, [r7, #8]
 8019b26:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Configure QSPI: CCR register with functional as indirect read */
      MODIFY_REG(hqspi->Instance->CCR, QUADSPI_CCR_FMODE, QSPI_FUNCTIONAL_MODE_INDIRECT_READ);
 8019b28:	68fb      	ldr	r3, [r7, #12]
 8019b2a:	681b      	ldr	r3, [r3, #0]
 8019b2c:	695b      	ldr	r3, [r3, #20]
 8019b2e:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8019b32:	68fb      	ldr	r3, [r7, #12]
 8019b34:	681b      	ldr	r3, [r3, #0]
 8019b36:	f042 6280 	orr.w	r2, r2, #67108864	@ 0x4000000
 8019b3a:	615a      	str	r2, [r3, #20]

      /* Start the transfer by re-writing the address in AR register */
      WRITE_REG(hqspi->Instance->AR, addr_reg);
 8019b3c:	68fb      	ldr	r3, [r7, #12]
 8019b3e:	681b      	ldr	r3, [r3, #0]
 8019b40:	697a      	ldr	r2, [r7, #20]
 8019b42:	619a      	str	r2, [r3, #24]

      while(hqspi->RxXferCount > 0U)
 8019b44:	e01c      	b.n	8019b80 <HAL_QSPI_Receive+0xd4>
      {
        /* Wait until FT or TC flag is set to read received data */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, (QSPI_FLAG_FT | QSPI_FLAG_TC), SET, tickstart, Timeout);
 8019b46:	687b      	ldr	r3, [r7, #4]
 8019b48:	9300      	str	r3, [sp, #0]
 8019b4a:	69bb      	ldr	r3, [r7, #24]
 8019b4c:	2201      	movs	r2, #1
 8019b4e:	2106      	movs	r1, #6
 8019b50:	68f8      	ldr	r0, [r7, #12]
 8019b52:	f000 f92f 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019b56:	4603      	mov	r3, r0
 8019b58:	77fb      	strb	r3, [r7, #31]

        if  (status != HAL_OK)
 8019b5a:	7ffb      	ldrb	r3, [r7, #31]
 8019b5c:	2b00      	cmp	r3, #0
 8019b5e:	d114      	bne.n	8019b8a <HAL_QSPI_Receive+0xde>
        {
          break;
        }

        *hqspi->pRxBuffPtr = *((__IO uint8_t *)data_reg);
 8019b60:	68fb      	ldr	r3, [r7, #12]
 8019b62:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b64:	693a      	ldr	r2, [r7, #16]
 8019b66:	7812      	ldrb	r2, [r2, #0]
 8019b68:	b2d2      	uxtb	r2, r2
 8019b6a:	701a      	strb	r2, [r3, #0]
        hqspi->pRxBuffPtr++;
 8019b6c:	68fb      	ldr	r3, [r7, #12]
 8019b6e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019b70:	1c5a      	adds	r2, r3, #1
 8019b72:	68fb      	ldr	r3, [r7, #12]
 8019b74:	631a      	str	r2, [r3, #48]	@ 0x30
        hqspi->RxXferCount--;
 8019b76:	68fb      	ldr	r3, [r7, #12]
 8019b78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019b7a:	1e5a      	subs	r2, r3, #1
 8019b7c:	68fb      	ldr	r3, [r7, #12]
 8019b7e:	639a      	str	r2, [r3, #56]	@ 0x38
      while(hqspi->RxXferCount > 0U)
 8019b80:	68fb      	ldr	r3, [r7, #12]
 8019b82:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019b84:	2b00      	cmp	r3, #0
 8019b86:	d1de      	bne.n	8019b46 <HAL_QSPI_Receive+0x9a>
 8019b88:	e000      	b.n	8019b8c <HAL_QSPI_Receive+0xe0>
          break;
 8019b8a:	bf00      	nop
      }

      if (status == HAL_OK)
 8019b8c:	7ffb      	ldrb	r3, [r7, #31]
 8019b8e:	2b00      	cmp	r3, #0
 8019b90:	d110      	bne.n	8019bb4 <HAL_QSPI_Receive+0x108>
      {
        /* Wait until TC flag is set to go back in idle state */
        status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_TC, SET, tickstart, Timeout);
 8019b92:	687b      	ldr	r3, [r7, #4]
 8019b94:	9300      	str	r3, [sp, #0]
 8019b96:	69bb      	ldr	r3, [r7, #24]
 8019b98:	2201      	movs	r2, #1
 8019b9a:	2102      	movs	r1, #2
 8019b9c:	68f8      	ldr	r0, [r7, #12]
 8019b9e:	f000 f909 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019ba2:	4603      	mov	r3, r0
 8019ba4:	77fb      	strb	r3, [r7, #31]

        if  (status == HAL_OK)
 8019ba6:	7ffb      	ldrb	r3, [r7, #31]
 8019ba8:	2b00      	cmp	r3, #0
 8019baa:	d103      	bne.n	8019bb4 <HAL_QSPI_Receive+0x108>
        {
          /* Clear Transfer Complete bit */
          __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TC);
 8019bac:	68fb      	ldr	r3, [r7, #12]
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	2202      	movs	r2, #2
 8019bb2:	60da      	str	r2, [r3, #12]

        }
      }

      /* Update QSPI state */
      hqspi->State = HAL_QSPI_STATE_READY;
 8019bb4:	68fb      	ldr	r3, [r7, #12]
 8019bb6:	2201      	movs	r2, #1
 8019bb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019bbc:	e00a      	b.n	8019bd4 <HAL_QSPI_Receive+0x128>
    }
    else
    {
      hqspi->ErrorCode |= HAL_QSPI_ERROR_INVALID_PARAM;
 8019bbe:	68fb      	ldr	r3, [r7, #12]
 8019bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019bc2:	f043 0208 	orr.w	r2, r3, #8
 8019bc6:	68fb      	ldr	r3, [r7, #12]
 8019bc8:	645a      	str	r2, [r3, #68]	@ 0x44
      status = HAL_ERROR;
 8019bca:	2301      	movs	r3, #1
 8019bcc:	77fb      	strb	r3, [r7, #31]
 8019bce:	e001      	b.n	8019bd4 <HAL_QSPI_Receive+0x128>
    }
  }
  else
  {
    status = HAL_BUSY;
 8019bd0:	2302      	movs	r3, #2
 8019bd2:	77fb      	strb	r3, [r7, #31]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8019bd4:	68fb      	ldr	r3, [r7, #12]
 8019bd6:	2200      	movs	r2, #0
 8019bd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  return status;
 8019bdc:	7ffb      	ldrb	r3, [r7, #31]
}
 8019bde:	4618      	mov	r0, r3
 8019be0:	3720      	adds	r7, #32
 8019be2:	46bd      	mov	sp, r7
 8019be4:	bd80      	pop	{r7, pc}

08019be6 <HAL_QSPI_AutoPolling>:
  * @param  Timeout Timeout duration
  * @note   This function is used only in Automatic Polling Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_AutoPolling(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_AutoPollingTypeDef *cfg, uint32_t Timeout)
{
 8019be6:	b580      	push	{r7, lr}
 8019be8:	b088      	sub	sp, #32
 8019bea:	af02      	add	r7, sp, #8
 8019bec:	60f8      	str	r0, [r7, #12]
 8019bee:	60b9      	str	r1, [r7, #8]
 8019bf0:	607a      	str	r2, [r7, #4]
 8019bf2:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8019bf4:	f7f8 fac2 	bl	801217c <HAL_GetTick>
 8019bf8:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_INTERVAL(cfg->Interval));
  assert_param(IS_QSPI_STATUS_BYTES_SIZE(cfg->StatusBytesSize));
  assert_param(IS_QSPI_MATCH_MODE(cfg->MatchMode));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8019bfa:	68fb      	ldr	r3, [r7, #12]
 8019bfc:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019c00:	b2db      	uxtb	r3, r3
 8019c02:	2b01      	cmp	r3, #1
 8019c04:	d101      	bne.n	8019c0a <HAL_QSPI_AutoPolling+0x24>
 8019c06:	2302      	movs	r3, #2
 8019c08:	e060      	b.n	8019ccc <HAL_QSPI_AutoPolling+0xe6>
 8019c0a:	68fb      	ldr	r3, [r7, #12]
 8019c0c:	2201      	movs	r2, #1
 8019c0e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8019c12:	68fb      	ldr	r3, [r7, #12]
 8019c14:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019c18:	b2db      	uxtb	r3, r3
 8019c1a:	2b01      	cmp	r3, #1
 8019c1c:	d14f      	bne.n	8019cbe <HAL_QSPI_AutoPolling+0xd8>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8019c1e:	68fb      	ldr	r3, [r7, #12]
 8019c20:	2200      	movs	r2, #0
 8019c22:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_AUTO_POLLING;
 8019c24:	68fb      	ldr	r3, [r7, #12]
 8019c26:	2242      	movs	r2, #66	@ 0x42
 8019c28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, Timeout);
 8019c2c:	683b      	ldr	r3, [r7, #0]
 8019c2e:	9300      	str	r3, [sp, #0]
 8019c30:	693b      	ldr	r3, [r7, #16]
 8019c32:	2200      	movs	r2, #0
 8019c34:	2120      	movs	r1, #32
 8019c36:	68f8      	ldr	r0, [r7, #12]
 8019c38:	f000 f8bc 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019c3c:	4603      	mov	r3, r0
 8019c3e:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8019c40:	7dfb      	ldrb	r3, [r7, #23]
 8019c42:	2b00      	cmp	r3, #0
 8019c44:	d13d      	bne.n	8019cc2 <HAL_QSPI_AutoPolling+0xdc>
    {
      /* Configure QSPI: PSMAR register with the status match value */
      WRITE_REG(hqspi->Instance->PSMAR, cfg->Match);
 8019c46:	68fb      	ldr	r3, [r7, #12]
 8019c48:	681b      	ldr	r3, [r3, #0]
 8019c4a:	687a      	ldr	r2, [r7, #4]
 8019c4c:	6812      	ldr	r2, [r2, #0]
 8019c4e:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Configure QSPI: PSMKR register with the status mask value */
      WRITE_REG(hqspi->Instance->PSMKR, cfg->Mask);
 8019c50:	68fb      	ldr	r3, [r7, #12]
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	687a      	ldr	r2, [r7, #4]
 8019c56:	6852      	ldr	r2, [r2, #4]
 8019c58:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Configure QSPI: PIR register with the interval value */
      WRITE_REG(hqspi->Instance->PIR, cfg->Interval);
 8019c5a:	68fb      	ldr	r3, [r7, #12]
 8019c5c:	681b      	ldr	r3, [r3, #0]
 8019c5e:	687a      	ldr	r2, [r7, #4]
 8019c60:	6892      	ldr	r2, [r2, #8]
 8019c62:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Configure QSPI: CR register with Match mode and Automatic stop enabled
      (otherwise there will be an infinite loop in blocking mode) */
      MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PMM | QUADSPI_CR_APMS),
 8019c64:	68fb      	ldr	r3, [r7, #12]
 8019c66:	681b      	ldr	r3, [r3, #0]
 8019c68:	681b      	ldr	r3, [r3, #0]
 8019c6a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8019c6e:	687b      	ldr	r3, [r7, #4]
 8019c70:	691b      	ldr	r3, [r3, #16]
 8019c72:	431a      	orrs	r2, r3
 8019c74:	68fb      	ldr	r3, [r7, #12]
 8019c76:	681b      	ldr	r3, [r3, #0]
 8019c78:	f442 0280 	orr.w	r2, r2, #4194304	@ 0x400000
 8019c7c:	601a      	str	r2, [r3, #0]
               (cfg->MatchMode | QSPI_AUTOMATIC_STOP_ENABLE));

      /* Call the configuration function */
      cmd->NbData = cfg->StatusBytesSize;
 8019c7e:	687b      	ldr	r3, [r7, #4]
 8019c80:	68da      	ldr	r2, [r3, #12]
 8019c82:	68bb      	ldr	r3, [r7, #8]
 8019c84:	629a      	str	r2, [r3, #40]	@ 0x28
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_AUTO_POLLING);
 8019c86:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 8019c8a:	68b9      	ldr	r1, [r7, #8]
 8019c8c:	68f8      	ldr	r0, [r7, #12]
 8019c8e:	f000 f8c8 	bl	8019e22 <QSPI_Config>

      /* Wait until SM flag is set to go back in idle state */
      status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_SM, SET, tickstart, Timeout);
 8019c92:	683b      	ldr	r3, [r7, #0]
 8019c94:	9300      	str	r3, [sp, #0]
 8019c96:	693b      	ldr	r3, [r7, #16]
 8019c98:	2201      	movs	r2, #1
 8019c9a:	2108      	movs	r1, #8
 8019c9c:	68f8      	ldr	r0, [r7, #12]
 8019c9e:	f000 f889 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019ca2:	4603      	mov	r3, r0
 8019ca4:	75fb      	strb	r3, [r7, #23]

      if (status == HAL_OK)
 8019ca6:	7dfb      	ldrb	r3, [r7, #23]
 8019ca8:	2b00      	cmp	r3, #0
 8019caa:	d10a      	bne.n	8019cc2 <HAL_QSPI_AutoPolling+0xdc>
      {
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_SM);
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	681b      	ldr	r3, [r3, #0]
 8019cb0:	2208      	movs	r2, #8
 8019cb2:	60da      	str	r2, [r3, #12]

        /* Update state */
        hqspi->State = HAL_QSPI_STATE_READY;
 8019cb4:	68fb      	ldr	r3, [r7, #12]
 8019cb6:	2201      	movs	r2, #1
 8019cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8019cbc:	e001      	b.n	8019cc2 <HAL_QSPI_AutoPolling+0xdc>
      }
    }
  }
  else
  {
    status = HAL_BUSY;
 8019cbe:	2302      	movs	r3, #2
 8019cc0:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8019cc2:	68fb      	ldr	r3, [r7, #12]
 8019cc4:	2200      	movs	r2, #0
 8019cc6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8019cca:	7dfb      	ldrb	r3, [r7, #23]
}
 8019ccc:	4618      	mov	r0, r3
 8019cce:	3718      	adds	r7, #24
 8019cd0:	46bd      	mov	sp, r7
 8019cd2:	bd80      	pop	{r7, pc}

08019cd4 <HAL_QSPI_MemoryMapped>:
  * @param  cfg structure that contains the memory mapped configuration information.
  * @note   This function is used only in Memory mapped Mode
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_MemoryMapped(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, QSPI_MemoryMappedTypeDef *cfg)
{
 8019cd4:	b580      	push	{r7, lr}
 8019cd6:	b088      	sub	sp, #32
 8019cd8:	af02      	add	r7, sp, #8
 8019cda:	60f8      	str	r0, [r7, #12]
 8019cdc:	60b9      	str	r1, [r7, #8]
 8019cde:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8019ce0:	f7f8 fa4c 	bl	801217c <HAL_GetTick>
 8019ce4:	6138      	str	r0, [r7, #16]
  assert_param(IS_QSPI_SIOO_MODE(cmd->SIOOMode));

  assert_param(IS_QSPI_TIMEOUT_ACTIVATION(cfg->TimeOutActivation));

  /* Process locked */
  __HAL_LOCK(hqspi);
 8019ce6:	68fb      	ldr	r3, [r7, #12]
 8019ce8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8019cec:	b2db      	uxtb	r3, r3
 8019cee:	2b01      	cmp	r3, #1
 8019cf0:	d101      	bne.n	8019cf6 <HAL_QSPI_MemoryMapped+0x22>
 8019cf2:	2302      	movs	r3, #2
 8019cf4:	e04c      	b.n	8019d90 <HAL_QSPI_MemoryMapped+0xbc>
 8019cf6:	68fb      	ldr	r3, [r7, #12]
 8019cf8:	2201      	movs	r2, #1
 8019cfa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  if(hqspi->State == HAL_QSPI_STATE_READY)
 8019cfe:	68fb      	ldr	r3, [r7, #12]
 8019d00:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8019d04:	b2db      	uxtb	r3, r3
 8019d06:	2b01      	cmp	r3, #1
 8019d08:	d13b      	bne.n	8019d82 <HAL_QSPI_MemoryMapped+0xae>
  {
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	2200      	movs	r2, #0
 8019d0e:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Update state */
    hqspi->State = HAL_QSPI_STATE_BUSY_MEM_MAPPED;
 8019d10:	68fb      	ldr	r3, [r7, #12]
 8019d12:	2282      	movs	r2, #130	@ 0x82
 8019d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Wait till BUSY flag reset */
    status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 8019d18:	68fb      	ldr	r3, [r7, #12]
 8019d1a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019d1c:	9300      	str	r3, [sp, #0]
 8019d1e:	693b      	ldr	r3, [r7, #16]
 8019d20:	2200      	movs	r2, #0
 8019d22:	2120      	movs	r1, #32
 8019d24:	68f8      	ldr	r0, [r7, #12]
 8019d26:	f000 f845 	bl	8019db4 <QSPI_WaitFlagStateUntilTimeout>
 8019d2a:	4603      	mov	r3, r0
 8019d2c:	75fb      	strb	r3, [r7, #23]

    if (status == HAL_OK)
 8019d2e:	7dfb      	ldrb	r3, [r7, #23]
 8019d30:	2b00      	cmp	r3, #0
 8019d32:	d128      	bne.n	8019d86 <HAL_QSPI_MemoryMapped+0xb2>
    {
      /* Configure QSPI: CR register with timeout counter enable */
    MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_TCEN, cfg->TimeOutActivation);
 8019d34:	68fb      	ldr	r3, [r7, #12]
 8019d36:	681b      	ldr	r3, [r3, #0]
 8019d38:	681b      	ldr	r3, [r3, #0]
 8019d3a:	f023 0108 	bic.w	r1, r3, #8
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	685a      	ldr	r2, [r3, #4]
 8019d42:	68fb      	ldr	r3, [r7, #12]
 8019d44:	681b      	ldr	r3, [r3, #0]
 8019d46:	430a      	orrs	r2, r1
 8019d48:	601a      	str	r2, [r3, #0]

    if (cfg->TimeOutActivation == QSPI_TIMEOUT_COUNTER_ENABLE)
 8019d4a:	687b      	ldr	r3, [r7, #4]
 8019d4c:	685b      	ldr	r3, [r3, #4]
 8019d4e:	2b08      	cmp	r3, #8
 8019d50:	d110      	bne.n	8019d74 <HAL_QSPI_MemoryMapped+0xa0>
      {
        assert_param(IS_QSPI_TIMEOUT_PERIOD(cfg->TimeOutPeriod));

        /* Configure QSPI: LPTR register with the low-power timeout value */
        WRITE_REG(hqspi->Instance->LPTR, cfg->TimeOutPeriod);
 8019d52:	68fb      	ldr	r3, [r7, #12]
 8019d54:	681b      	ldr	r3, [r3, #0]
 8019d56:	687a      	ldr	r2, [r7, #4]
 8019d58:	6812      	ldr	r2, [r2, #0]
 8019d5a:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Clear interrupt */
        __HAL_QSPI_CLEAR_FLAG(hqspi, QSPI_FLAG_TO);
 8019d5c:	68fb      	ldr	r3, [r7, #12]
 8019d5e:	681b      	ldr	r3, [r3, #0]
 8019d60:	2210      	movs	r2, #16
 8019d62:	60da      	str	r2, [r3, #12]

        /* Enable the QSPI TimeOut Interrupt */
        __HAL_QSPI_ENABLE_IT(hqspi, QSPI_IT_TO);
 8019d64:	68fb      	ldr	r3, [r7, #12]
 8019d66:	681b      	ldr	r3, [r3, #0]
 8019d68:	681a      	ldr	r2, [r3, #0]
 8019d6a:	68fb      	ldr	r3, [r7, #12]
 8019d6c:	681b      	ldr	r3, [r3, #0]
 8019d6e:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8019d72:	601a      	str	r2, [r3, #0]
      }

      /* Call the configuration function */
      QSPI_Config(hqspi, cmd, QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED);
 8019d74:	f04f 6240 	mov.w	r2, #201326592	@ 0xc000000
 8019d78:	68b9      	ldr	r1, [r7, #8]
 8019d7a:	68f8      	ldr	r0, [r7, #12]
 8019d7c:	f000 f851 	bl	8019e22 <QSPI_Config>
 8019d80:	e001      	b.n	8019d86 <HAL_QSPI_MemoryMapped+0xb2>
    }
  }
  else
  {
    status = HAL_BUSY;
 8019d82:	2302      	movs	r3, #2
 8019d84:	75fb      	strb	r3, [r7, #23]
  }

  /* Process unlocked */
  __HAL_UNLOCK(hqspi);
 8019d86:	68fb      	ldr	r3, [r7, #12]
 8019d88:	2200      	movs	r2, #0
 8019d8a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

  /* Return function status */
  return status;
 8019d8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8019d90:	4618      	mov	r0, r3
 8019d92:	3718      	adds	r7, #24
 8019d94:	46bd      	mov	sp, r7
 8019d96:	bd80      	pop	{r7, pc}

08019d98 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8019d98:	b480      	push	{r7}
 8019d9a:	b083      	sub	sp, #12
 8019d9c:	af00      	add	r7, sp, #0
 8019d9e:	6078      	str	r0, [r7, #4]
 8019da0:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 8019da2:	687b      	ldr	r3, [r7, #4]
 8019da4:	683a      	ldr	r2, [r7, #0]
 8019da6:	649a      	str	r2, [r3, #72]	@ 0x48
}
 8019da8:	bf00      	nop
 8019daa:	370c      	adds	r7, #12
 8019dac:	46bd      	mov	sp, r7
 8019dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019db2:	4770      	bx	lr

08019db4 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8019db4:	b580      	push	{r7, lr}
 8019db6:	b084      	sub	sp, #16
 8019db8:	af00      	add	r7, sp, #0
 8019dba:	60f8      	str	r0, [r7, #12]
 8019dbc:	60b9      	str	r1, [r7, #8]
 8019dbe:	603b      	str	r3, [r7, #0]
 8019dc0:	4613      	mov	r3, r2
 8019dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8019dc4:	e01a      	b.n	8019dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8019dc6:	69bb      	ldr	r3, [r7, #24]
 8019dc8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8019dcc:	d016      	beq.n	8019dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8019dce:	f7f8 f9d5 	bl	801217c <HAL_GetTick>
 8019dd2:	4602      	mov	r2, r0
 8019dd4:	683b      	ldr	r3, [r7, #0]
 8019dd6:	1ad3      	subs	r3, r2, r3
 8019dd8:	69ba      	ldr	r2, [r7, #24]
 8019dda:	429a      	cmp	r2, r3
 8019ddc:	d302      	bcc.n	8019de4 <QSPI_WaitFlagStateUntilTimeout+0x30>
 8019dde:	69bb      	ldr	r3, [r7, #24]
 8019de0:	2b00      	cmp	r3, #0
 8019de2:	d10b      	bne.n	8019dfc <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8019de4:	68fb      	ldr	r3, [r7, #12]
 8019de6:	2204      	movs	r2, #4
 8019de8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8019dec:	68fb      	ldr	r3, [r7, #12]
 8019dee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019df0:	f043 0201 	orr.w	r2, r3, #1
 8019df4:	68fb      	ldr	r3, [r7, #12]
 8019df6:	645a      	str	r2, [r3, #68]	@ 0x44

        return HAL_ERROR;
 8019df8:	2301      	movs	r3, #1
 8019dfa:	e00e      	b.n	8019e1a <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8019dfc:	68fb      	ldr	r3, [r7, #12]
 8019dfe:	681b      	ldr	r3, [r3, #0]
 8019e00:	689a      	ldr	r2, [r3, #8]
 8019e02:	68bb      	ldr	r3, [r7, #8]
 8019e04:	4013      	ands	r3, r2
 8019e06:	2b00      	cmp	r3, #0
 8019e08:	bf14      	ite	ne
 8019e0a:	2301      	movne	r3, #1
 8019e0c:	2300      	moveq	r3, #0
 8019e0e:	b2db      	uxtb	r3, r3
 8019e10:	461a      	mov	r2, r3
 8019e12:	79fb      	ldrb	r3, [r7, #7]
 8019e14:	429a      	cmp	r2, r3
 8019e16:	d1d6      	bne.n	8019dc6 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8019e18:	2300      	movs	r3, #0
}
 8019e1a:	4618      	mov	r0, r3
 8019e1c:	3710      	adds	r7, #16
 8019e1e:	46bd      	mov	sp, r7
 8019e20:	bd80      	pop	{r7, pc}

08019e22 <QSPI_Config>:
  *            @arg QSPI_FUNCTIONAL_MODE_AUTO_POLLING: Automatic polling mode
  *            @arg QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED: Memory-mapped mode
  * @retval None
  */
static void QSPI_Config(QSPI_HandleTypeDef *hqspi, QSPI_CommandTypeDef *cmd, uint32_t FunctionalMode)
{
 8019e22:	b480      	push	{r7}
 8019e24:	b085      	sub	sp, #20
 8019e26:	af00      	add	r7, sp, #0
 8019e28:	60f8      	str	r0, [r7, #12]
 8019e2a:	60b9      	str	r1, [r7, #8]
 8019e2c:	607a      	str	r2, [r7, #4]
  assert_param(IS_QSPI_FUNCTIONAL_MODE(FunctionalMode));

  if ((cmd->DataMode != QSPI_DATA_NONE) && (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED))
 8019e2e:	68bb      	ldr	r3, [r7, #8]
 8019e30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e32:	2b00      	cmp	r3, #0
 8019e34:	d009      	beq.n	8019e4a <QSPI_Config+0x28>
 8019e36:	687b      	ldr	r3, [r7, #4]
 8019e38:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8019e3c:	d005      	beq.n	8019e4a <QSPI_Config+0x28>
  {
    /* Configure QSPI: DLR register with the number of data to read or write */
    WRITE_REG(hqspi->Instance->DLR, (cmd->NbData - 1U));
 8019e3e:	68bb      	ldr	r3, [r7, #8]
 8019e40:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8019e42:	68fb      	ldr	r3, [r7, #12]
 8019e44:	681b      	ldr	r3, [r3, #0]
 8019e46:	3a01      	subs	r2, #1
 8019e48:	611a      	str	r2, [r3, #16]
  }

  if (cmd->InstructionMode != QSPI_INSTRUCTION_NONE)
 8019e4a:	68bb      	ldr	r3, [r7, #8]
 8019e4c:	699b      	ldr	r3, [r3, #24]
 8019e4e:	2b00      	cmp	r3, #0
 8019e50:	f000 80c1 	beq.w	8019fd6 <QSPI_Config+0x1b4>
  {
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8019e54:	68bb      	ldr	r3, [r7, #8]
 8019e56:	6a1b      	ldr	r3, [r3, #32]
 8019e58:	2b00      	cmp	r3, #0
 8019e5a:	d063      	beq.n	8019f24 <QSPI_Config+0x102>
    {
      /* Configure QSPI: ABR register with alternate bytes value */
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8019e5c:	68fb      	ldr	r3, [r7, #12]
 8019e5e:	681b      	ldr	r3, [r3, #0]
 8019e60:	68ba      	ldr	r2, [r7, #8]
 8019e62:	6892      	ldr	r2, [r2, #8]
 8019e64:	61da      	str	r2, [r3, #28]

      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8019e66:	68bb      	ldr	r3, [r7, #8]
 8019e68:	69db      	ldr	r3, [r3, #28]
 8019e6a:	2b00      	cmp	r3, #0
 8019e6c:	d031      	beq.n	8019ed2 <QSPI_Config+0xb0>
      {
        /*---- Command with instruction, address and alternate bytes ----*/
        /* Configure QSPI: CCR register with all communications parameters */
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8019e6e:	68bb      	ldr	r3, [r7, #8]
 8019e70:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019e72:	68bb      	ldr	r3, [r7, #8]
 8019e74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019e76:	431a      	orrs	r2, r3
 8019e78:	68bb      	ldr	r3, [r7, #8]
 8019e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019e7c:	431a      	orrs	r2, r3
 8019e7e:	68bb      	ldr	r3, [r7, #8]
 8019e80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019e82:	431a      	orrs	r2, r3
 8019e84:	68bb      	ldr	r3, [r7, #8]
 8019e86:	695b      	ldr	r3, [r3, #20]
 8019e88:	049b      	lsls	r3, r3, #18
 8019e8a:	431a      	orrs	r2, r3
 8019e8c:	68bb      	ldr	r3, [r7, #8]
 8019e8e:	691b      	ldr	r3, [r3, #16]
 8019e90:	431a      	orrs	r2, r3
 8019e92:	68bb      	ldr	r3, [r7, #8]
 8019e94:	6a1b      	ldr	r3, [r3, #32]
 8019e96:	431a      	orrs	r2, r3
 8019e98:	68bb      	ldr	r3, [r7, #8]
 8019e9a:	68db      	ldr	r3, [r3, #12]
 8019e9c:	431a      	orrs	r2, r3
 8019e9e:	68bb      	ldr	r3, [r7, #8]
 8019ea0:	69db      	ldr	r3, [r3, #28]
 8019ea2:	431a      	orrs	r2, r3
 8019ea4:	68bb      	ldr	r3, [r7, #8]
 8019ea6:	699b      	ldr	r3, [r3, #24]
 8019ea8:	431a      	orrs	r2, r3
 8019eaa:	68bb      	ldr	r3, [r7, #8]
 8019eac:	681b      	ldr	r3, [r3, #0]
 8019eae:	ea42 0103 	orr.w	r1, r2, r3
 8019eb2:	68fb      	ldr	r3, [r7, #12]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	687a      	ldr	r2, [r7, #4]
 8019eb8:	430a      	orrs	r2, r1
 8019eba:	615a      	str	r2, [r3, #20]
                                         cmd->DataMode | (cmd->DummyCycles << QUADSPI_CCR_DCYC_Pos) |
                                         cmd->AlternateBytesSize | cmd->AlternateByteMode |
                                         cmd->AddressSize | cmd->AddressMode | cmd->InstructionMode |
                                         cmd->Instruction | FunctionalMode));

        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8019ebc:	687b      	ldr	r3, [r7, #4]
 8019ebe:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8019ec2:	f000 813f 	beq.w	801a144 <QSPI_Config+0x322>
        {
          /* Configure QSPI: AR register with address value */
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8019ec6:	68fb      	ldr	r3, [r7, #12]
 8019ec8:	681b      	ldr	r3, [r3, #0]
 8019eca:	68ba      	ldr	r2, [r7, #8]
 8019ecc:	6852      	ldr	r2, [r2, #4]
 8019ece:	619a      	str	r2, [r3, #24]
          CLEAR_REG(hqspi->Instance->AR);
        }
      }
    }
  }
}
 8019ed0:	e138      	b.n	801a144 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8019ed2:	68bb      	ldr	r3, [r7, #8]
 8019ed4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019eda:	431a      	orrs	r2, r3
 8019edc:	68bb      	ldr	r3, [r7, #8]
 8019ede:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019ee0:	431a      	orrs	r2, r3
 8019ee2:	68bb      	ldr	r3, [r7, #8]
 8019ee4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019ee6:	431a      	orrs	r2, r3
 8019ee8:	68bb      	ldr	r3, [r7, #8]
 8019eea:	695b      	ldr	r3, [r3, #20]
 8019eec:	049b      	lsls	r3, r3, #18
 8019eee:	431a      	orrs	r2, r3
 8019ef0:	68bb      	ldr	r3, [r7, #8]
 8019ef2:	691b      	ldr	r3, [r3, #16]
 8019ef4:	431a      	orrs	r2, r3
 8019ef6:	68bb      	ldr	r3, [r7, #8]
 8019ef8:	6a1b      	ldr	r3, [r3, #32]
 8019efa:	431a      	orrs	r2, r3
 8019efc:	68bb      	ldr	r3, [r7, #8]
 8019efe:	69db      	ldr	r3, [r3, #28]
 8019f00:	431a      	orrs	r2, r3
 8019f02:	68bb      	ldr	r3, [r7, #8]
 8019f04:	699b      	ldr	r3, [r3, #24]
 8019f06:	431a      	orrs	r2, r3
 8019f08:	68bb      	ldr	r3, [r7, #8]
 8019f0a:	681b      	ldr	r3, [r3, #0]
 8019f0c:	ea42 0103 	orr.w	r1, r2, r3
 8019f10:	68fb      	ldr	r3, [r7, #12]
 8019f12:	681b      	ldr	r3, [r3, #0]
 8019f14:	687a      	ldr	r2, [r7, #4]
 8019f16:	430a      	orrs	r2, r1
 8019f18:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8019f1a:	68fb      	ldr	r3, [r7, #12]
 8019f1c:	681b      	ldr	r3, [r3, #0]
 8019f1e:	2200      	movs	r2, #0
 8019f20:	619a      	str	r2, [r3, #24]
}
 8019f22:	e10f      	b.n	801a144 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8019f24:	68bb      	ldr	r3, [r7, #8]
 8019f26:	69db      	ldr	r3, [r3, #28]
 8019f28:	2b00      	cmp	r3, #0
 8019f2a:	d02e      	beq.n	8019f8a <QSPI_Config+0x168>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8019f2c:	68bb      	ldr	r3, [r7, #8]
 8019f2e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f30:	68bb      	ldr	r3, [r7, #8]
 8019f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019f34:	431a      	orrs	r2, r3
 8019f36:	68bb      	ldr	r3, [r7, #8]
 8019f38:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f3a:	431a      	orrs	r2, r3
 8019f3c:	68bb      	ldr	r3, [r7, #8]
 8019f3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f40:	431a      	orrs	r2, r3
 8019f42:	68bb      	ldr	r3, [r7, #8]
 8019f44:	695b      	ldr	r3, [r3, #20]
 8019f46:	049b      	lsls	r3, r3, #18
 8019f48:	431a      	orrs	r2, r3
 8019f4a:	68bb      	ldr	r3, [r7, #8]
 8019f4c:	6a1b      	ldr	r3, [r3, #32]
 8019f4e:	431a      	orrs	r2, r3
 8019f50:	68bb      	ldr	r3, [r7, #8]
 8019f52:	68db      	ldr	r3, [r3, #12]
 8019f54:	431a      	orrs	r2, r3
 8019f56:	68bb      	ldr	r3, [r7, #8]
 8019f58:	69db      	ldr	r3, [r3, #28]
 8019f5a:	431a      	orrs	r2, r3
 8019f5c:	68bb      	ldr	r3, [r7, #8]
 8019f5e:	699b      	ldr	r3, [r3, #24]
 8019f60:	431a      	orrs	r2, r3
 8019f62:	68bb      	ldr	r3, [r7, #8]
 8019f64:	681b      	ldr	r3, [r3, #0]
 8019f66:	ea42 0103 	orr.w	r1, r2, r3
 8019f6a:	68fb      	ldr	r3, [r7, #12]
 8019f6c:	681b      	ldr	r3, [r3, #0]
 8019f6e:	687a      	ldr	r2, [r7, #4]
 8019f70:	430a      	orrs	r2, r1
 8019f72:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 8019f74:	687b      	ldr	r3, [r7, #4]
 8019f76:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 8019f7a:	f000 80e3 	beq.w	801a144 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 8019f7e:	68fb      	ldr	r3, [r7, #12]
 8019f80:	681b      	ldr	r3, [r3, #0]
 8019f82:	68ba      	ldr	r2, [r7, #8]
 8019f84:	6852      	ldr	r2, [r2, #4]
 8019f86:	619a      	str	r2, [r3, #24]
}
 8019f88:	e0dc      	b.n	801a144 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8019f8a:	68bb      	ldr	r3, [r7, #8]
 8019f8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019f92:	431a      	orrs	r2, r3
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019f98:	431a      	orrs	r2, r3
 8019f9a:	68bb      	ldr	r3, [r7, #8]
 8019f9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019f9e:	431a      	orrs	r2, r3
 8019fa0:	68bb      	ldr	r3, [r7, #8]
 8019fa2:	695b      	ldr	r3, [r3, #20]
 8019fa4:	049b      	lsls	r3, r3, #18
 8019fa6:	431a      	orrs	r2, r3
 8019fa8:	68bb      	ldr	r3, [r7, #8]
 8019faa:	6a1b      	ldr	r3, [r3, #32]
 8019fac:	431a      	orrs	r2, r3
 8019fae:	68bb      	ldr	r3, [r7, #8]
 8019fb0:	69db      	ldr	r3, [r3, #28]
 8019fb2:	431a      	orrs	r2, r3
 8019fb4:	68bb      	ldr	r3, [r7, #8]
 8019fb6:	699b      	ldr	r3, [r3, #24]
 8019fb8:	431a      	orrs	r2, r3
 8019fba:	68bb      	ldr	r3, [r7, #8]
 8019fbc:	681b      	ldr	r3, [r3, #0]
 8019fbe:	ea42 0103 	orr.w	r1, r2, r3
 8019fc2:	68fb      	ldr	r3, [r7, #12]
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	687a      	ldr	r2, [r7, #4]
 8019fc8:	430a      	orrs	r2, r1
 8019fca:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 8019fcc:	68fb      	ldr	r3, [r7, #12]
 8019fce:	681b      	ldr	r3, [r3, #0]
 8019fd0:	2200      	movs	r2, #0
 8019fd2:	619a      	str	r2, [r3, #24]
}
 8019fd4:	e0b6      	b.n	801a144 <QSPI_Config+0x322>
    if (cmd->AlternateByteMode != QSPI_ALTERNATE_BYTES_NONE)
 8019fd6:	68bb      	ldr	r3, [r7, #8]
 8019fd8:	6a1b      	ldr	r3, [r3, #32]
 8019fda:	2b00      	cmp	r3, #0
 8019fdc:	d05d      	beq.n	801a09a <QSPI_Config+0x278>
      WRITE_REG(hqspi->Instance->ABR, cmd->AlternateBytes);
 8019fde:	68fb      	ldr	r3, [r7, #12]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	68ba      	ldr	r2, [r7, #8]
 8019fe4:	6892      	ldr	r2, [r2, #8]
 8019fe6:	61da      	str	r2, [r3, #28]
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 8019fe8:	68bb      	ldr	r3, [r7, #8]
 8019fea:	69db      	ldr	r3, [r3, #28]
 8019fec:	2b00      	cmp	r3, #0
 8019fee:	d02e      	beq.n	801a04e <QSPI_Config+0x22c>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 8019ff0:	68bb      	ldr	r3, [r7, #8]
 8019ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019ff4:	68bb      	ldr	r3, [r7, #8]
 8019ff6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019ff8:	431a      	orrs	r2, r3
 8019ffa:	68bb      	ldr	r3, [r7, #8]
 8019ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019ffe:	431a      	orrs	r2, r3
 801a000:	68bb      	ldr	r3, [r7, #8]
 801a002:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a004:	431a      	orrs	r2, r3
 801a006:	68bb      	ldr	r3, [r7, #8]
 801a008:	695b      	ldr	r3, [r3, #20]
 801a00a:	049b      	lsls	r3, r3, #18
 801a00c:	431a      	orrs	r2, r3
 801a00e:	68bb      	ldr	r3, [r7, #8]
 801a010:	691b      	ldr	r3, [r3, #16]
 801a012:	431a      	orrs	r2, r3
 801a014:	68bb      	ldr	r3, [r7, #8]
 801a016:	6a1b      	ldr	r3, [r3, #32]
 801a018:	431a      	orrs	r2, r3
 801a01a:	68bb      	ldr	r3, [r7, #8]
 801a01c:	68db      	ldr	r3, [r3, #12]
 801a01e:	431a      	orrs	r2, r3
 801a020:	68bb      	ldr	r3, [r7, #8]
 801a022:	69db      	ldr	r3, [r3, #28]
 801a024:	431a      	orrs	r2, r3
 801a026:	68bb      	ldr	r3, [r7, #8]
 801a028:	699b      	ldr	r3, [r3, #24]
 801a02a:	ea42 0103 	orr.w	r1, r2, r3
 801a02e:	68fb      	ldr	r3, [r7, #12]
 801a030:	681b      	ldr	r3, [r3, #0]
 801a032:	687a      	ldr	r2, [r7, #4]
 801a034:	430a      	orrs	r2, r1
 801a036:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801a038:	687b      	ldr	r3, [r7, #4]
 801a03a:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801a03e:	f000 8081 	beq.w	801a144 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801a042:	68fb      	ldr	r3, [r7, #12]
 801a044:	681b      	ldr	r3, [r3, #0]
 801a046:	68ba      	ldr	r2, [r7, #8]
 801a048:	6852      	ldr	r2, [r2, #4]
 801a04a:	619a      	str	r2, [r3, #24]
}
 801a04c:	e07a      	b.n	801a144 <QSPI_Config+0x322>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801a04e:	68bb      	ldr	r3, [r7, #8]
 801a050:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a052:	68bb      	ldr	r3, [r7, #8]
 801a054:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a056:	431a      	orrs	r2, r3
 801a058:	68bb      	ldr	r3, [r7, #8]
 801a05a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a05c:	431a      	orrs	r2, r3
 801a05e:	68bb      	ldr	r3, [r7, #8]
 801a060:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a062:	431a      	orrs	r2, r3
 801a064:	68bb      	ldr	r3, [r7, #8]
 801a066:	695b      	ldr	r3, [r3, #20]
 801a068:	049b      	lsls	r3, r3, #18
 801a06a:	431a      	orrs	r2, r3
 801a06c:	68bb      	ldr	r3, [r7, #8]
 801a06e:	691b      	ldr	r3, [r3, #16]
 801a070:	431a      	orrs	r2, r3
 801a072:	68bb      	ldr	r3, [r7, #8]
 801a074:	6a1b      	ldr	r3, [r3, #32]
 801a076:	431a      	orrs	r2, r3
 801a078:	68bb      	ldr	r3, [r7, #8]
 801a07a:	69db      	ldr	r3, [r3, #28]
 801a07c:	431a      	orrs	r2, r3
 801a07e:	68bb      	ldr	r3, [r7, #8]
 801a080:	699b      	ldr	r3, [r3, #24]
 801a082:	ea42 0103 	orr.w	r1, r2, r3
 801a086:	68fb      	ldr	r3, [r7, #12]
 801a088:	681b      	ldr	r3, [r3, #0]
 801a08a:	687a      	ldr	r2, [r7, #4]
 801a08c:	430a      	orrs	r2, r1
 801a08e:	615a      	str	r2, [r3, #20]
        CLEAR_REG(hqspi->Instance->AR);
 801a090:	68fb      	ldr	r3, [r7, #12]
 801a092:	681b      	ldr	r3, [r3, #0]
 801a094:	2200      	movs	r2, #0
 801a096:	619a      	str	r2, [r3, #24]
}
 801a098:	e054      	b.n	801a144 <QSPI_Config+0x322>
      if (cmd->AddressMode != QSPI_ADDRESS_NONE)
 801a09a:	68bb      	ldr	r3, [r7, #8]
 801a09c:	69db      	ldr	r3, [r3, #28]
 801a09e:	2b00      	cmp	r3, #0
 801a0a0:	d02a      	beq.n	801a0f8 <QSPI_Config+0x2d6>
        WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801a0a2:	68bb      	ldr	r3, [r7, #8]
 801a0a4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a0a6:	68bb      	ldr	r3, [r7, #8]
 801a0a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a0aa:	431a      	orrs	r2, r3
 801a0ac:	68bb      	ldr	r3, [r7, #8]
 801a0ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a0b0:	431a      	orrs	r2, r3
 801a0b2:	68bb      	ldr	r3, [r7, #8]
 801a0b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0b6:	431a      	orrs	r2, r3
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	695b      	ldr	r3, [r3, #20]
 801a0bc:	049b      	lsls	r3, r3, #18
 801a0be:	431a      	orrs	r2, r3
 801a0c0:	68bb      	ldr	r3, [r7, #8]
 801a0c2:	6a1b      	ldr	r3, [r3, #32]
 801a0c4:	431a      	orrs	r2, r3
 801a0c6:	68bb      	ldr	r3, [r7, #8]
 801a0c8:	68db      	ldr	r3, [r3, #12]
 801a0ca:	431a      	orrs	r2, r3
 801a0cc:	68bb      	ldr	r3, [r7, #8]
 801a0ce:	69db      	ldr	r3, [r3, #28]
 801a0d0:	431a      	orrs	r2, r3
 801a0d2:	68bb      	ldr	r3, [r7, #8]
 801a0d4:	699b      	ldr	r3, [r3, #24]
 801a0d6:	ea42 0103 	orr.w	r1, r2, r3
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	681b      	ldr	r3, [r3, #0]
 801a0de:	687a      	ldr	r2, [r7, #4]
 801a0e0:	430a      	orrs	r2, r1
 801a0e2:	615a      	str	r2, [r3, #20]
        if (FunctionalMode != QSPI_FUNCTIONAL_MODE_MEMORY_MAPPED)
 801a0e4:	687b      	ldr	r3, [r7, #4]
 801a0e6:	f1b3 6f40 	cmp.w	r3, #201326592	@ 0xc000000
 801a0ea:	d02b      	beq.n	801a144 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->AR, cmd->Address);
 801a0ec:	68fb      	ldr	r3, [r7, #12]
 801a0ee:	681b      	ldr	r3, [r3, #0]
 801a0f0:	68ba      	ldr	r2, [r7, #8]
 801a0f2:	6852      	ldr	r2, [r2, #4]
 801a0f4:	619a      	str	r2, [r3, #24]
}
 801a0f6:	e025      	b.n	801a144 <QSPI_Config+0x322>
        if (cmd->DataMode != QSPI_DATA_NONE)
 801a0f8:	68bb      	ldr	r3, [r7, #8]
 801a0fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a0fc:	2b00      	cmp	r3, #0
 801a0fe:	d021      	beq.n	801a144 <QSPI_Config+0x322>
          WRITE_REG(hqspi->Instance->CCR, (cmd->DdrMode | cmd->DdrHoldHalfCycle | cmd->SIOOMode |
 801a100:	68bb      	ldr	r3, [r7, #8]
 801a102:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801a104:	68bb      	ldr	r3, [r7, #8]
 801a106:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a108:	431a      	orrs	r2, r3
 801a10a:	68bb      	ldr	r3, [r7, #8]
 801a10c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a10e:	431a      	orrs	r2, r3
 801a110:	68bb      	ldr	r3, [r7, #8]
 801a112:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a114:	431a      	orrs	r2, r3
 801a116:	68bb      	ldr	r3, [r7, #8]
 801a118:	695b      	ldr	r3, [r3, #20]
 801a11a:	049b      	lsls	r3, r3, #18
 801a11c:	431a      	orrs	r2, r3
 801a11e:	68bb      	ldr	r3, [r7, #8]
 801a120:	6a1b      	ldr	r3, [r3, #32]
 801a122:	431a      	orrs	r2, r3
 801a124:	68bb      	ldr	r3, [r7, #8]
 801a126:	69db      	ldr	r3, [r3, #28]
 801a128:	431a      	orrs	r2, r3
 801a12a:	68bb      	ldr	r3, [r7, #8]
 801a12c:	699b      	ldr	r3, [r3, #24]
 801a12e:	ea42 0103 	orr.w	r1, r2, r3
 801a132:	68fb      	ldr	r3, [r7, #12]
 801a134:	681b      	ldr	r3, [r3, #0]
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	430a      	orrs	r2, r1
 801a13a:	615a      	str	r2, [r3, #20]
          CLEAR_REG(hqspi->Instance->AR);
 801a13c:	68fb      	ldr	r3, [r7, #12]
 801a13e:	681b      	ldr	r3, [r3, #0]
 801a140:	2200      	movs	r2, #0
 801a142:	619a      	str	r2, [r3, #24]
}
 801a144:	bf00      	nop
 801a146:	3714      	adds	r7, #20
 801a148:	46bd      	mov	sp, r7
 801a14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a14e:	4770      	bx	lr

0801a150 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 801a150:	b580      	push	{r7, lr}
 801a152:	b08c      	sub	sp, #48	@ 0x30
 801a154:	af00      	add	r7, sp, #0
 801a156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 801a158:	687b      	ldr	r3, [r7, #4]
 801a15a:	2b00      	cmp	r3, #0
 801a15c:	d102      	bne.n	801a164 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801a15e:	2301      	movs	r3, #1
 801a160:	f000 bc48 	b.w	801a9f4 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801a164:	687b      	ldr	r3, [r7, #4]
 801a166:	681b      	ldr	r3, [r3, #0]
 801a168:	f003 0301 	and.w	r3, r3, #1
 801a16c:	2b00      	cmp	r3, #0
 801a16e:	f000 8088 	beq.w	801a282 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a172:	4b99      	ldr	r3, [pc, #612]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a174:	691b      	ldr	r3, [r3, #16]
 801a176:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a17a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a17c:	4b96      	ldr	r3, [pc, #600]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a17e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a180:	62bb      	str	r3, [r7, #40]	@ 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 801a182:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a184:	2b10      	cmp	r3, #16
 801a186:	d007      	beq.n	801a198 <HAL_RCC_OscConfig+0x48>
 801a188:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a18a:	2b18      	cmp	r3, #24
 801a18c:	d111      	bne.n	801a1b2 <HAL_RCC_OscConfig+0x62>
 801a18e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a190:	f003 0303 	and.w	r3, r3, #3
 801a194:	2b02      	cmp	r3, #2
 801a196:	d10c      	bne.n	801a1b2 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a198:	4b8f      	ldr	r3, [pc, #572]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a19a:	681b      	ldr	r3, [r3, #0]
 801a19c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a1a0:	2b00      	cmp	r3, #0
 801a1a2:	d06d      	beq.n	801a280 <HAL_RCC_OscConfig+0x130>
 801a1a4:	687b      	ldr	r3, [r7, #4]
 801a1a6:	685b      	ldr	r3, [r3, #4]
 801a1a8:	2b00      	cmp	r3, #0
 801a1aa:	d169      	bne.n	801a280 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 801a1ac:	2301      	movs	r3, #1
 801a1ae:	f000 bc21 	b.w	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 801a1b2:	687b      	ldr	r3, [r7, #4]
 801a1b4:	685b      	ldr	r3, [r3, #4]
 801a1b6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801a1ba:	d106      	bne.n	801a1ca <HAL_RCC_OscConfig+0x7a>
 801a1bc:	4b86      	ldr	r3, [pc, #536]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1be:	681b      	ldr	r3, [r3, #0]
 801a1c0:	4a85      	ldr	r2, [pc, #532]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1c2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a1c6:	6013      	str	r3, [r2, #0]
 801a1c8:	e02e      	b.n	801a228 <HAL_RCC_OscConfig+0xd8>
 801a1ca:	687b      	ldr	r3, [r7, #4]
 801a1cc:	685b      	ldr	r3, [r3, #4]
 801a1ce:	2b00      	cmp	r3, #0
 801a1d0:	d10c      	bne.n	801a1ec <HAL_RCC_OscConfig+0x9c>
 801a1d2:	4b81      	ldr	r3, [pc, #516]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1d4:	681b      	ldr	r3, [r3, #0]
 801a1d6:	4a80      	ldr	r2, [pc, #512]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1d8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a1dc:	6013      	str	r3, [r2, #0]
 801a1de:	4b7e      	ldr	r3, [pc, #504]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1e0:	681b      	ldr	r3, [r3, #0]
 801a1e2:	4a7d      	ldr	r2, [pc, #500]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1e4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801a1e8:	6013      	str	r3, [r2, #0]
 801a1ea:	e01d      	b.n	801a228 <HAL_RCC_OscConfig+0xd8>
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	685b      	ldr	r3, [r3, #4]
 801a1f0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801a1f4:	d10c      	bne.n	801a210 <HAL_RCC_OscConfig+0xc0>
 801a1f6:	4b78      	ldr	r3, [pc, #480]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1f8:	681b      	ldr	r3, [r3, #0]
 801a1fa:	4a77      	ldr	r2, [pc, #476]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a1fc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801a200:	6013      	str	r3, [r2, #0]
 801a202:	4b75      	ldr	r3, [pc, #468]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a204:	681b      	ldr	r3, [r3, #0]
 801a206:	4a74      	ldr	r2, [pc, #464]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a208:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a20c:	6013      	str	r3, [r2, #0]
 801a20e:	e00b      	b.n	801a228 <HAL_RCC_OscConfig+0xd8>
 801a210:	4b71      	ldr	r3, [pc, #452]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a212:	681b      	ldr	r3, [r3, #0]
 801a214:	4a70      	ldr	r2, [pc, #448]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a216:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801a21a:	6013      	str	r3, [r2, #0]
 801a21c:	4b6e      	ldr	r3, [pc, #440]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a21e:	681b      	ldr	r3, [r3, #0]
 801a220:	4a6d      	ldr	r2, [pc, #436]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a222:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 801a226:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 801a228:	687b      	ldr	r3, [r7, #4]
 801a22a:	685b      	ldr	r3, [r3, #4]
 801a22c:	2b00      	cmp	r3, #0
 801a22e:	d013      	beq.n	801a258 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a230:	f7f7 ffa4 	bl	801217c <HAL_GetTick>
 801a234:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a236:	e008      	b.n	801a24a <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a238:	f7f7 ffa0 	bl	801217c <HAL_GetTick>
 801a23c:	4602      	mov	r2, r0
 801a23e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a240:	1ad3      	subs	r3, r2, r3
 801a242:	2b64      	cmp	r3, #100	@ 0x64
 801a244:	d901      	bls.n	801a24a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 801a246:	2303      	movs	r3, #3
 801a248:	e3d4      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801a24a:	4b63      	ldr	r3, [pc, #396]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a24c:	681b      	ldr	r3, [r3, #0]
 801a24e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a252:	2b00      	cmp	r3, #0
 801a254:	d0f0      	beq.n	801a238 <HAL_RCC_OscConfig+0xe8>
 801a256:	e014      	b.n	801a282 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a258:	f7f7 ff90 	bl	801217c <HAL_GetTick>
 801a25c:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a25e:	e008      	b.n	801a272 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 801a260:	f7f7 ff8c 	bl	801217c <HAL_GetTick>
 801a264:	4602      	mov	r2, r0
 801a266:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a268:	1ad3      	subs	r3, r2, r3
 801a26a:	2b64      	cmp	r3, #100	@ 0x64
 801a26c:	d901      	bls.n	801a272 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 801a26e:	2303      	movs	r3, #3
 801a270:	e3c0      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 801a272:	4b59      	ldr	r3, [pc, #356]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a274:	681b      	ldr	r3, [r3, #0]
 801a276:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801a27a:	2b00      	cmp	r3, #0
 801a27c:	d1f0      	bne.n	801a260 <HAL_RCC_OscConfig+0x110>
 801a27e:	e000      	b.n	801a282 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801a280:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 801a282:	687b      	ldr	r3, [r7, #4]
 801a284:	681b      	ldr	r3, [r3, #0]
 801a286:	f003 0302 	and.w	r3, r3, #2
 801a28a:	2b00      	cmp	r3, #0
 801a28c:	f000 80ca 	beq.w	801a424 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a290:	4b51      	ldr	r3, [pc, #324]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a292:	691b      	ldr	r3, [r3, #16]
 801a294:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a298:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a29a:	4b4f      	ldr	r3, [pc, #316]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a29c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a29e:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 801a2a0:	6a3b      	ldr	r3, [r7, #32]
 801a2a2:	2b00      	cmp	r3, #0
 801a2a4:	d007      	beq.n	801a2b6 <HAL_RCC_OscConfig+0x166>
 801a2a6:	6a3b      	ldr	r3, [r7, #32]
 801a2a8:	2b18      	cmp	r3, #24
 801a2aa:	d156      	bne.n	801a35a <HAL_RCC_OscConfig+0x20a>
 801a2ac:	69fb      	ldr	r3, [r7, #28]
 801a2ae:	f003 0303 	and.w	r3, r3, #3
 801a2b2:	2b00      	cmp	r3, #0
 801a2b4:	d151      	bne.n	801a35a <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a2b6:	4b48      	ldr	r3, [pc, #288]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a2b8:	681b      	ldr	r3, [r3, #0]
 801a2ba:	f003 0304 	and.w	r3, r3, #4
 801a2be:	2b00      	cmp	r3, #0
 801a2c0:	d005      	beq.n	801a2ce <HAL_RCC_OscConfig+0x17e>
 801a2c2:	687b      	ldr	r3, [r7, #4]
 801a2c4:	68db      	ldr	r3, [r3, #12]
 801a2c6:	2b00      	cmp	r3, #0
 801a2c8:	d101      	bne.n	801a2ce <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 801a2ca:	2301      	movs	r3, #1
 801a2cc:	e392      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801a2ce:	4b42      	ldr	r3, [pc, #264]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a2d0:	681b      	ldr	r3, [r3, #0]
 801a2d2:	f023 0219 	bic.w	r2, r3, #25
 801a2d6:	687b      	ldr	r3, [r7, #4]
 801a2d8:	68db      	ldr	r3, [r3, #12]
 801a2da:	493f      	ldr	r1, [pc, #252]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a2dc:	4313      	orrs	r3, r2
 801a2de:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a2e0:	f7f7 ff4c 	bl	801217c <HAL_GetTick>
 801a2e4:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a2e6:	e008      	b.n	801a2fa <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a2e8:	f7f7 ff48 	bl	801217c <HAL_GetTick>
 801a2ec:	4602      	mov	r2, r0
 801a2ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a2f0:	1ad3      	subs	r3, r2, r3
 801a2f2:	2b02      	cmp	r3, #2
 801a2f4:	d901      	bls.n	801a2fa <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 801a2f6:	2303      	movs	r3, #3
 801a2f8:	e37c      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a2fa:	4b37      	ldr	r3, [pc, #220]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a2fc:	681b      	ldr	r3, [r3, #0]
 801a2fe:	f003 0304 	and.w	r3, r3, #4
 801a302:	2b00      	cmp	r3, #0
 801a304:	d0f0      	beq.n	801a2e8 <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a306:	f7f7 ff69 	bl	80121dc <HAL_GetREVID>
 801a30a:	4603      	mov	r3, r0
 801a30c:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a310:	4293      	cmp	r3, r2
 801a312:	d817      	bhi.n	801a344 <HAL_RCC_OscConfig+0x1f4>
 801a314:	687b      	ldr	r3, [r7, #4]
 801a316:	691b      	ldr	r3, [r3, #16]
 801a318:	2b40      	cmp	r3, #64	@ 0x40
 801a31a:	d108      	bne.n	801a32e <HAL_RCC_OscConfig+0x1de>
 801a31c:	4b2e      	ldr	r3, [pc, #184]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a31e:	685b      	ldr	r3, [r3, #4]
 801a320:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801a324:	4a2c      	ldr	r2, [pc, #176]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a326:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a32a:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a32c:	e07a      	b.n	801a424 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a32e:	4b2a      	ldr	r3, [pc, #168]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a330:	685b      	ldr	r3, [r3, #4]
 801a332:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801a336:	687b      	ldr	r3, [r7, #4]
 801a338:	691b      	ldr	r3, [r3, #16]
 801a33a:	031b      	lsls	r3, r3, #12
 801a33c:	4926      	ldr	r1, [pc, #152]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a33e:	4313      	orrs	r3, r2
 801a340:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a342:	e06f      	b.n	801a424 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a344:	4b24      	ldr	r3, [pc, #144]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a346:	685b      	ldr	r3, [r3, #4]
 801a348:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801a34c:	687b      	ldr	r3, [r7, #4]
 801a34e:	691b      	ldr	r3, [r3, #16]
 801a350:	061b      	lsls	r3, r3, #24
 801a352:	4921      	ldr	r1, [pc, #132]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a354:	4313      	orrs	r3, r2
 801a356:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 801a358:	e064      	b.n	801a424 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 801a35a:	687b      	ldr	r3, [r7, #4]
 801a35c:	68db      	ldr	r3, [r3, #12]
 801a35e:	2b00      	cmp	r3, #0
 801a360:	d047      	beq.n	801a3f2 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 801a362:	4b1d      	ldr	r3, [pc, #116]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a364:	681b      	ldr	r3, [r3, #0]
 801a366:	f023 0219 	bic.w	r2, r3, #25
 801a36a:	687b      	ldr	r3, [r7, #4]
 801a36c:	68db      	ldr	r3, [r3, #12]
 801a36e:	491a      	ldr	r1, [pc, #104]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a370:	4313      	orrs	r3, r2
 801a372:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a374:	f7f7 ff02 	bl	801217c <HAL_GetTick>
 801a378:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a37a:	e008      	b.n	801a38e <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a37c:	f7f7 fefe 	bl	801217c <HAL_GetTick>
 801a380:	4602      	mov	r2, r0
 801a382:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a384:	1ad3      	subs	r3, r2, r3
 801a386:	2b02      	cmp	r3, #2
 801a388:	d901      	bls.n	801a38e <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 801a38a:	2303      	movs	r3, #3
 801a38c:	e332      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801a38e:	4b12      	ldr	r3, [pc, #72]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a390:	681b      	ldr	r3, [r3, #0]
 801a392:	f003 0304 	and.w	r3, r3, #4
 801a396:	2b00      	cmp	r3, #0
 801a398:	d0f0      	beq.n	801a37c <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801a39a:	f7f7 ff1f 	bl	80121dc <HAL_GetREVID>
 801a39e:	4603      	mov	r3, r0
 801a3a0:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a3a4:	4293      	cmp	r3, r2
 801a3a6:	d819      	bhi.n	801a3dc <HAL_RCC_OscConfig+0x28c>
 801a3a8:	687b      	ldr	r3, [r7, #4]
 801a3aa:	691b      	ldr	r3, [r3, #16]
 801a3ac:	2b40      	cmp	r3, #64	@ 0x40
 801a3ae:	d108      	bne.n	801a3c2 <HAL_RCC_OscConfig+0x272>
 801a3b0:	4b09      	ldr	r3, [pc, #36]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a3b2:	685b      	ldr	r3, [r3, #4]
 801a3b4:	f423 337c 	bic.w	r3, r3, #258048	@ 0x3f000
 801a3b8:	4a07      	ldr	r2, [pc, #28]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a3ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a3be:	6053      	str	r3, [r2, #4]
 801a3c0:	e030      	b.n	801a424 <HAL_RCC_OscConfig+0x2d4>
 801a3c2:	4b05      	ldr	r3, [pc, #20]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a3c4:	685b      	ldr	r3, [r3, #4]
 801a3c6:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	691b      	ldr	r3, [r3, #16]
 801a3ce:	031b      	lsls	r3, r3, #12
 801a3d0:	4901      	ldr	r1, [pc, #4]	@ (801a3d8 <HAL_RCC_OscConfig+0x288>)
 801a3d2:	4313      	orrs	r3, r2
 801a3d4:	604b      	str	r3, [r1, #4]
 801a3d6:	e025      	b.n	801a424 <HAL_RCC_OscConfig+0x2d4>
 801a3d8:	58024400 	.word	0x58024400
 801a3dc:	4b9a      	ldr	r3, [pc, #616]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a3de:	685b      	ldr	r3, [r3, #4]
 801a3e0:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 801a3e4:	687b      	ldr	r3, [r7, #4]
 801a3e6:	691b      	ldr	r3, [r3, #16]
 801a3e8:	061b      	lsls	r3, r3, #24
 801a3ea:	4997      	ldr	r1, [pc, #604]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a3ec:	4313      	orrs	r3, r2
 801a3ee:	604b      	str	r3, [r1, #4]
 801a3f0:	e018      	b.n	801a424 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 801a3f2:	4b95      	ldr	r3, [pc, #596]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a3f4:	681b      	ldr	r3, [r3, #0]
 801a3f6:	4a94      	ldr	r2, [pc, #592]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a3f8:	f023 0301 	bic.w	r3, r3, #1
 801a3fc:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a3fe:	f7f7 febd 	bl	801217c <HAL_GetTick>
 801a402:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a404:	e008      	b.n	801a418 <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801a406:	f7f7 feb9 	bl	801217c <HAL_GetTick>
 801a40a:	4602      	mov	r2, r0
 801a40c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a40e:	1ad3      	subs	r3, r2, r3
 801a410:	2b02      	cmp	r3, #2
 801a412:	d901      	bls.n	801a418 <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 801a414:	2303      	movs	r3, #3
 801a416:	e2ed      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 801a418:	4b8b      	ldr	r3, [pc, #556]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a41a:	681b      	ldr	r3, [r3, #0]
 801a41c:	f003 0304 	and.w	r3, r3, #4
 801a420:	2b00      	cmp	r3, #0
 801a422:	d1f0      	bne.n	801a406 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 801a424:	687b      	ldr	r3, [r7, #4]
 801a426:	681b      	ldr	r3, [r3, #0]
 801a428:	f003 0310 	and.w	r3, r3, #16
 801a42c:	2b00      	cmp	r3, #0
 801a42e:	f000 80a9 	beq.w	801a584 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 801a432:	4b85      	ldr	r3, [pc, #532]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a434:	691b      	ldr	r3, [r3, #16]
 801a436:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a43a:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 801a43c:	4b82      	ldr	r3, [pc, #520]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a43e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a440:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 801a442:	69bb      	ldr	r3, [r7, #24]
 801a444:	2b08      	cmp	r3, #8
 801a446:	d007      	beq.n	801a458 <HAL_RCC_OscConfig+0x308>
 801a448:	69bb      	ldr	r3, [r7, #24]
 801a44a:	2b18      	cmp	r3, #24
 801a44c:	d13a      	bne.n	801a4c4 <HAL_RCC_OscConfig+0x374>
 801a44e:	697b      	ldr	r3, [r7, #20]
 801a450:	f003 0303 	and.w	r3, r3, #3
 801a454:	2b01      	cmp	r3, #1
 801a456:	d135      	bne.n	801a4c4 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a458:	4b7b      	ldr	r3, [pc, #492]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a45a:	681b      	ldr	r3, [r3, #0]
 801a45c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a460:	2b00      	cmp	r3, #0
 801a462:	d005      	beq.n	801a470 <HAL_RCC_OscConfig+0x320>
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	69db      	ldr	r3, [r3, #28]
 801a468:	2b80      	cmp	r3, #128	@ 0x80
 801a46a:	d001      	beq.n	801a470 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 801a46c:	2301      	movs	r3, #1
 801a46e:	e2c1      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a470:	f7f7 feb4 	bl	80121dc <HAL_GetREVID>
 801a474:	4603      	mov	r3, r0
 801a476:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a47a:	4293      	cmp	r3, r2
 801a47c:	d817      	bhi.n	801a4ae <HAL_RCC_OscConfig+0x35e>
 801a47e:	687b      	ldr	r3, [r7, #4]
 801a480:	6a1b      	ldr	r3, [r3, #32]
 801a482:	2b20      	cmp	r3, #32
 801a484:	d108      	bne.n	801a498 <HAL_RCC_OscConfig+0x348>
 801a486:	4b70      	ldr	r3, [pc, #448]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a488:	685b      	ldr	r3, [r3, #4]
 801a48a:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801a48e:	4a6e      	ldr	r2, [pc, #440]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a490:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a494:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a496:	e075      	b.n	801a584 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a498:	4b6b      	ldr	r3, [pc, #428]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a49a:	685b      	ldr	r3, [r3, #4]
 801a49c:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801a4a0:	687b      	ldr	r3, [r7, #4]
 801a4a2:	6a1b      	ldr	r3, [r3, #32]
 801a4a4:	069b      	lsls	r3, r3, #26
 801a4a6:	4968      	ldr	r1, [pc, #416]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a4a8:	4313      	orrs	r3, r2
 801a4aa:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a4ac:	e06a      	b.n	801a584 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a4ae:	4b66      	ldr	r3, [pc, #408]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a4b0:	68db      	ldr	r3, [r3, #12]
 801a4b2:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801a4b6:	687b      	ldr	r3, [r7, #4]
 801a4b8:	6a1b      	ldr	r3, [r3, #32]
 801a4ba:	061b      	lsls	r3, r3, #24
 801a4bc:	4962      	ldr	r1, [pc, #392]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a4be:	4313      	orrs	r3, r2
 801a4c0:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 801a4c2:	e05f      	b.n	801a584 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 801a4c4:	687b      	ldr	r3, [r7, #4]
 801a4c6:	69db      	ldr	r3, [r3, #28]
 801a4c8:	2b00      	cmp	r3, #0
 801a4ca:	d042      	beq.n	801a552 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 801a4cc:	4b5e      	ldr	r3, [pc, #376]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a4ce:	681b      	ldr	r3, [r3, #0]
 801a4d0:	4a5d      	ldr	r2, [pc, #372]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a4d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4d6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a4d8:	f7f7 fe50 	bl	801217c <HAL_GetTick>
 801a4dc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801a4de:	e008      	b.n	801a4f2 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801a4e0:	f7f7 fe4c 	bl	801217c <HAL_GetTick>
 801a4e4:	4602      	mov	r2, r0
 801a4e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a4e8:	1ad3      	subs	r3, r2, r3
 801a4ea:	2b02      	cmp	r3, #2
 801a4ec:	d901      	bls.n	801a4f2 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 801a4ee:	2303      	movs	r3, #3
 801a4f0:	e280      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801a4f2:	4b55      	ldr	r3, [pc, #340]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a4f4:	681b      	ldr	r3, [r3, #0]
 801a4f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a4fa:	2b00      	cmp	r3, #0
 801a4fc:	d0f0      	beq.n	801a4e0 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 801a4fe:	f7f7 fe6d 	bl	80121dc <HAL_GetREVID>
 801a502:	4603      	mov	r3, r0
 801a504:	f241 0203 	movw	r2, #4099	@ 0x1003
 801a508:	4293      	cmp	r3, r2
 801a50a:	d817      	bhi.n	801a53c <HAL_RCC_OscConfig+0x3ec>
 801a50c:	687b      	ldr	r3, [r7, #4]
 801a50e:	6a1b      	ldr	r3, [r3, #32]
 801a510:	2b20      	cmp	r3, #32
 801a512:	d108      	bne.n	801a526 <HAL_RCC_OscConfig+0x3d6>
 801a514:	4b4c      	ldr	r3, [pc, #304]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a516:	685b      	ldr	r3, [r3, #4]
 801a518:	f023 43f8 	bic.w	r3, r3, #2080374784	@ 0x7c000000
 801a51c:	4a4a      	ldr	r2, [pc, #296]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a51e:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 801a522:	6053      	str	r3, [r2, #4]
 801a524:	e02e      	b.n	801a584 <HAL_RCC_OscConfig+0x434>
 801a526:	4b48      	ldr	r3, [pc, #288]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a528:	685b      	ldr	r3, [r3, #4]
 801a52a:	f023 42f8 	bic.w	r2, r3, #2080374784	@ 0x7c000000
 801a52e:	687b      	ldr	r3, [r7, #4]
 801a530:	6a1b      	ldr	r3, [r3, #32]
 801a532:	069b      	lsls	r3, r3, #26
 801a534:	4944      	ldr	r1, [pc, #272]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a536:	4313      	orrs	r3, r2
 801a538:	604b      	str	r3, [r1, #4]
 801a53a:	e023      	b.n	801a584 <HAL_RCC_OscConfig+0x434>
 801a53c:	4b42      	ldr	r3, [pc, #264]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a53e:	68db      	ldr	r3, [r3, #12]
 801a540:	f023 527c 	bic.w	r2, r3, #1056964608	@ 0x3f000000
 801a544:	687b      	ldr	r3, [r7, #4]
 801a546:	6a1b      	ldr	r3, [r3, #32]
 801a548:	061b      	lsls	r3, r3, #24
 801a54a:	493f      	ldr	r1, [pc, #252]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a54c:	4313      	orrs	r3, r2
 801a54e:	60cb      	str	r3, [r1, #12]
 801a550:	e018      	b.n	801a584 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 801a552:	4b3d      	ldr	r3, [pc, #244]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a554:	681b      	ldr	r3, [r3, #0]
 801a556:	4a3c      	ldr	r2, [pc, #240]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a558:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 801a55c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a55e:	f7f7 fe0d 	bl	801217c <HAL_GetTick>
 801a562:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801a564:	e008      	b.n	801a578 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 801a566:	f7f7 fe09 	bl	801217c <HAL_GetTick>
 801a56a:	4602      	mov	r2, r0
 801a56c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a56e:	1ad3      	subs	r3, r2, r3
 801a570:	2b02      	cmp	r3, #2
 801a572:	d901      	bls.n	801a578 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 801a574:	2303      	movs	r3, #3
 801a576:	e23d      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 801a578:	4b33      	ldr	r3, [pc, #204]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a57a:	681b      	ldr	r3, [r3, #0]
 801a57c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a580:	2b00      	cmp	r3, #0
 801a582:	d1f0      	bne.n	801a566 <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801a584:	687b      	ldr	r3, [r7, #4]
 801a586:	681b      	ldr	r3, [r3, #0]
 801a588:	f003 0308 	and.w	r3, r3, #8
 801a58c:	2b00      	cmp	r3, #0
 801a58e:	d036      	beq.n	801a5fe <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 801a590:	687b      	ldr	r3, [r7, #4]
 801a592:	695b      	ldr	r3, [r3, #20]
 801a594:	2b00      	cmp	r3, #0
 801a596:	d019      	beq.n	801a5cc <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 801a598:	4b2b      	ldr	r3, [pc, #172]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a59a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a59c:	4a2a      	ldr	r2, [pc, #168]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a59e:	f043 0301 	orr.w	r3, r3, #1
 801a5a2:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a5a4:	f7f7 fdea 	bl	801217c <HAL_GetTick>
 801a5a8:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a5aa:	e008      	b.n	801a5be <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801a5ac:	f7f7 fde6 	bl	801217c <HAL_GetTick>
 801a5b0:	4602      	mov	r2, r0
 801a5b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5b4:	1ad3      	subs	r3, r2, r3
 801a5b6:	2b02      	cmp	r3, #2
 801a5b8:	d901      	bls.n	801a5be <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 801a5ba:	2303      	movs	r3, #3
 801a5bc:	e21a      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 801a5be:	4b22      	ldr	r3, [pc, #136]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a5c0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a5c2:	f003 0302 	and.w	r3, r3, #2
 801a5c6:	2b00      	cmp	r3, #0
 801a5c8:	d0f0      	beq.n	801a5ac <HAL_RCC_OscConfig+0x45c>
 801a5ca:	e018      	b.n	801a5fe <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 801a5cc:	4b1e      	ldr	r3, [pc, #120]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a5ce:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a5d0:	4a1d      	ldr	r2, [pc, #116]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a5d2:	f023 0301 	bic.w	r3, r3, #1
 801a5d6:	6753      	str	r3, [r2, #116]	@ 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a5d8:	f7f7 fdd0 	bl	801217c <HAL_GetTick>
 801a5dc:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a5de:	e008      	b.n	801a5f2 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801a5e0:	f7f7 fdcc 	bl	801217c <HAL_GetTick>
 801a5e4:	4602      	mov	r2, r0
 801a5e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e8:	1ad3      	subs	r3, r2, r3
 801a5ea:	2b02      	cmp	r3, #2
 801a5ec:	d901      	bls.n	801a5f2 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 801a5ee:	2303      	movs	r3, #3
 801a5f0:	e200      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 801a5f2:	4b15      	ldr	r3, [pc, #84]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a5f4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801a5f6:	f003 0302 	and.w	r3, r3, #2
 801a5fa:	2b00      	cmp	r3, #0
 801a5fc:	d1f0      	bne.n	801a5e0 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 801a5fe:	687b      	ldr	r3, [r7, #4]
 801a600:	681b      	ldr	r3, [r3, #0]
 801a602:	f003 0320 	and.w	r3, r3, #32
 801a606:	2b00      	cmp	r3, #0
 801a608:	d039      	beq.n	801a67e <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 801a60a:	687b      	ldr	r3, [r7, #4]
 801a60c:	699b      	ldr	r3, [r3, #24]
 801a60e:	2b00      	cmp	r3, #0
 801a610:	d01c      	beq.n	801a64c <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 801a612:	4b0d      	ldr	r3, [pc, #52]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a614:	681b      	ldr	r3, [r3, #0]
 801a616:	4a0c      	ldr	r2, [pc, #48]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a618:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801a61c:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801a61e:	f7f7 fdad 	bl	801217c <HAL_GetTick>
 801a622:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a624:	e008      	b.n	801a638 <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a626:	f7f7 fda9 	bl	801217c <HAL_GetTick>
 801a62a:	4602      	mov	r2, r0
 801a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a62e:	1ad3      	subs	r3, r2, r3
 801a630:	2b02      	cmp	r3, #2
 801a632:	d901      	bls.n	801a638 <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 801a634:	2303      	movs	r3, #3
 801a636:	e1dd      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 801a638:	4b03      	ldr	r3, [pc, #12]	@ (801a648 <HAL_RCC_OscConfig+0x4f8>)
 801a63a:	681b      	ldr	r3, [r3, #0]
 801a63c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a640:	2b00      	cmp	r3, #0
 801a642:	d0f0      	beq.n	801a626 <HAL_RCC_OscConfig+0x4d6>
 801a644:	e01b      	b.n	801a67e <HAL_RCC_OscConfig+0x52e>
 801a646:	bf00      	nop
 801a648:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801a64c:	4b9b      	ldr	r3, [pc, #620]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	4a9a      	ldr	r2, [pc, #616]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a652:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801a656:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 801a658:	f7f7 fd90 	bl	801217c <HAL_GetTick>
 801a65c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a65e:	e008      	b.n	801a672 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 801a660:	f7f7 fd8c 	bl	801217c <HAL_GetTick>
 801a664:	4602      	mov	r2, r0
 801a666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a668:	1ad3      	subs	r3, r2, r3
 801a66a:	2b02      	cmp	r3, #2
 801a66c:	d901      	bls.n	801a672 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 801a66e:	2303      	movs	r3, #3
 801a670:	e1c0      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 801a672:	4b92      	ldr	r3, [pc, #584]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a674:	681b      	ldr	r3, [r3, #0]
 801a676:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801a67a:	2b00      	cmp	r3, #0
 801a67c:	d1f0      	bne.n	801a660 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801a67e:	687b      	ldr	r3, [r7, #4]
 801a680:	681b      	ldr	r3, [r3, #0]
 801a682:	f003 0304 	and.w	r3, r3, #4
 801a686:	2b00      	cmp	r3, #0
 801a688:	f000 8081 	beq.w	801a78e <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 801a68c:	4b8c      	ldr	r3, [pc, #560]	@ (801a8c0 <HAL_RCC_OscConfig+0x770>)
 801a68e:	681b      	ldr	r3, [r3, #0]
 801a690:	4a8b      	ldr	r2, [pc, #556]	@ (801a8c0 <HAL_RCC_OscConfig+0x770>)
 801a692:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a696:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801a698:	f7f7 fd70 	bl	801217c <HAL_GetTick>
 801a69c:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801a69e:	e008      	b.n	801a6b2 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801a6a0:	f7f7 fd6c 	bl	801217c <HAL_GetTick>
 801a6a4:	4602      	mov	r2, r0
 801a6a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a6a8:	1ad3      	subs	r3, r2, r3
 801a6aa:	2b64      	cmp	r3, #100	@ 0x64
 801a6ac:	d901      	bls.n	801a6b2 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 801a6ae:	2303      	movs	r3, #3
 801a6b0:	e1a0      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801a6b2:	4b83      	ldr	r3, [pc, #524]	@ (801a8c0 <HAL_RCC_OscConfig+0x770>)
 801a6b4:	681b      	ldr	r3, [r3, #0]
 801a6b6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a6ba:	2b00      	cmp	r3, #0
 801a6bc:	d0f0      	beq.n	801a6a0 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 801a6be:	687b      	ldr	r3, [r7, #4]
 801a6c0:	689b      	ldr	r3, [r3, #8]
 801a6c2:	2b01      	cmp	r3, #1
 801a6c4:	d106      	bne.n	801a6d4 <HAL_RCC_OscConfig+0x584>
 801a6c6:	4b7d      	ldr	r3, [pc, #500]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a6c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6ca:	4a7c      	ldr	r2, [pc, #496]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a6cc:	f043 0301 	orr.w	r3, r3, #1
 801a6d0:	6713      	str	r3, [r2, #112]	@ 0x70
 801a6d2:	e02d      	b.n	801a730 <HAL_RCC_OscConfig+0x5e0>
 801a6d4:	687b      	ldr	r3, [r7, #4]
 801a6d6:	689b      	ldr	r3, [r3, #8]
 801a6d8:	2b00      	cmp	r3, #0
 801a6da:	d10c      	bne.n	801a6f6 <HAL_RCC_OscConfig+0x5a6>
 801a6dc:	4b77      	ldr	r3, [pc, #476]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a6de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6e0:	4a76      	ldr	r2, [pc, #472]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a6e2:	f023 0301 	bic.w	r3, r3, #1
 801a6e6:	6713      	str	r3, [r2, #112]	@ 0x70
 801a6e8:	4b74      	ldr	r3, [pc, #464]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a6ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a6ec:	4a73      	ldr	r2, [pc, #460]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a6ee:	f023 0304 	bic.w	r3, r3, #4
 801a6f2:	6713      	str	r3, [r2, #112]	@ 0x70
 801a6f4:	e01c      	b.n	801a730 <HAL_RCC_OscConfig+0x5e0>
 801a6f6:	687b      	ldr	r3, [r7, #4]
 801a6f8:	689b      	ldr	r3, [r3, #8]
 801a6fa:	2b05      	cmp	r3, #5
 801a6fc:	d10c      	bne.n	801a718 <HAL_RCC_OscConfig+0x5c8>
 801a6fe:	4b6f      	ldr	r3, [pc, #444]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a702:	4a6e      	ldr	r2, [pc, #440]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a704:	f043 0304 	orr.w	r3, r3, #4
 801a708:	6713      	str	r3, [r2, #112]	@ 0x70
 801a70a:	4b6c      	ldr	r3, [pc, #432]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a70c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a70e:	4a6b      	ldr	r2, [pc, #428]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a710:	f043 0301 	orr.w	r3, r3, #1
 801a714:	6713      	str	r3, [r2, #112]	@ 0x70
 801a716:	e00b      	b.n	801a730 <HAL_RCC_OscConfig+0x5e0>
 801a718:	4b68      	ldr	r3, [pc, #416]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a71a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a71c:	4a67      	ldr	r2, [pc, #412]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a71e:	f023 0301 	bic.w	r3, r3, #1
 801a722:	6713      	str	r3, [r2, #112]	@ 0x70
 801a724:	4b65      	ldr	r3, [pc, #404]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a726:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a728:	4a64      	ldr	r2, [pc, #400]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a72a:	f023 0304 	bic.w	r3, r3, #4
 801a72e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 801a730:	687b      	ldr	r3, [r7, #4]
 801a732:	689b      	ldr	r3, [r3, #8]
 801a734:	2b00      	cmp	r3, #0
 801a736:	d015      	beq.n	801a764 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a738:	f7f7 fd20 	bl	801217c <HAL_GetTick>
 801a73c:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a73e:	e00a      	b.n	801a756 <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a740:	f7f7 fd1c 	bl	801217c <HAL_GetTick>
 801a744:	4602      	mov	r2, r0
 801a746:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a748:	1ad3      	subs	r3, r2, r3
 801a74a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a74e:	4293      	cmp	r3, r2
 801a750:	d901      	bls.n	801a756 <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 801a752:	2303      	movs	r3, #3
 801a754:	e14e      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801a756:	4b59      	ldr	r3, [pc, #356]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a758:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a75a:	f003 0302 	and.w	r3, r3, #2
 801a75e:	2b00      	cmp	r3, #0
 801a760:	d0ee      	beq.n	801a740 <HAL_RCC_OscConfig+0x5f0>
 801a762:	e014      	b.n	801a78e <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801a764:	f7f7 fd0a 	bl	801217c <HAL_GetTick>
 801a768:	6278      	str	r0, [r7, #36]	@ 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a76a:	e00a      	b.n	801a782 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801a76c:	f7f7 fd06 	bl	801217c <HAL_GetTick>
 801a770:	4602      	mov	r2, r0
 801a772:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a774:	1ad3      	subs	r3, r2, r3
 801a776:	f241 3288 	movw	r2, #5000	@ 0x1388
 801a77a:	4293      	cmp	r3, r2
 801a77c:	d901      	bls.n	801a782 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 801a77e:	2303      	movs	r3, #3
 801a780:	e138      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 801a782:	4b4e      	ldr	r3, [pc, #312]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a784:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801a786:	f003 0302 	and.w	r3, r3, #2
 801a78a:	2b00      	cmp	r3, #0
 801a78c:	d1ee      	bne.n	801a76c <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 801a78e:	687b      	ldr	r3, [r7, #4]
 801a790:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a792:	2b00      	cmp	r3, #0
 801a794:	f000 812d 	beq.w	801a9f2 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 801a798:	4b48      	ldr	r3, [pc, #288]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a79a:	691b      	ldr	r3, [r3, #16]
 801a79c:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801a7a0:	2b18      	cmp	r3, #24
 801a7a2:	f000 80bd 	beq.w	801a920 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 801a7a6:	687b      	ldr	r3, [r7, #4]
 801a7a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a7aa:	2b02      	cmp	r3, #2
 801a7ac:	f040 809e 	bne.w	801a8ec <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a7b0:	4b42      	ldr	r3, [pc, #264]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a7b2:	681b      	ldr	r3, [r3, #0]
 801a7b4:	4a41      	ldr	r2, [pc, #260]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a7b6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a7ba:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a7bc:	f7f7 fcde 	bl	801217c <HAL_GetTick>
 801a7c0:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801a7c2:	e008      	b.n	801a7d6 <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a7c4:	f7f7 fcda 	bl	801217c <HAL_GetTick>
 801a7c8:	4602      	mov	r2, r0
 801a7ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7cc:	1ad3      	subs	r3, r2, r3
 801a7ce:	2b02      	cmp	r3, #2
 801a7d0:	d901      	bls.n	801a7d6 <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 801a7d2:	2303      	movs	r3, #3
 801a7d4:	e10e      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801a7d6:	4b39      	ldr	r3, [pc, #228]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a7d8:	681b      	ldr	r3, [r3, #0]
 801a7da:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a7de:	2b00      	cmp	r3, #0
 801a7e0:	d1f0      	bne.n	801a7c4 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801a7e2:	4b36      	ldr	r3, [pc, #216]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a7e4:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801a7e6:	4b37      	ldr	r3, [pc, #220]	@ (801a8c4 <HAL_RCC_OscConfig+0x774>)
 801a7e8:	4013      	ands	r3, r2
 801a7ea:	687a      	ldr	r2, [r7, #4]
 801a7ec:	6a91      	ldr	r1, [r2, #40]	@ 0x28
 801a7ee:	687a      	ldr	r2, [r7, #4]
 801a7f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 801a7f2:	0112      	lsls	r2, r2, #4
 801a7f4:	430a      	orrs	r2, r1
 801a7f6:	4931      	ldr	r1, [pc, #196]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a7f8:	4313      	orrs	r3, r2
 801a7fa:	628b      	str	r3, [r1, #40]	@ 0x28
 801a7fc:	687b      	ldr	r3, [r7, #4]
 801a7fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a800:	3b01      	subs	r3, #1
 801a802:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801a806:	687b      	ldr	r3, [r7, #4]
 801a808:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a80a:	3b01      	subs	r3, #1
 801a80c:	025b      	lsls	r3, r3, #9
 801a80e:	b29b      	uxth	r3, r3
 801a810:	431a      	orrs	r2, r3
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a816:	3b01      	subs	r3, #1
 801a818:	041b      	lsls	r3, r3, #16
 801a81a:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801a81e:	431a      	orrs	r2, r3
 801a820:	687b      	ldr	r3, [r7, #4]
 801a822:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a824:	3b01      	subs	r3, #1
 801a826:	061b      	lsls	r3, r3, #24
 801a828:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801a82c:	4923      	ldr	r1, [pc, #140]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a82e:	4313      	orrs	r3, r2
 801a830:	630b      	str	r3, [r1, #48]	@ 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 801a832:	4b22      	ldr	r3, [pc, #136]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a834:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a836:	4a21      	ldr	r2, [pc, #132]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a838:	f023 0301 	bic.w	r3, r3, #1
 801a83c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801a83e:	4b1f      	ldr	r3, [pc, #124]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a840:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a842:	4b21      	ldr	r3, [pc, #132]	@ (801a8c8 <HAL_RCC_OscConfig+0x778>)
 801a844:	4013      	ands	r3, r2
 801a846:	687a      	ldr	r2, [r7, #4]
 801a848:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801a84a:	00d2      	lsls	r2, r2, #3
 801a84c:	491b      	ldr	r1, [pc, #108]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a84e:	4313      	orrs	r3, r2
 801a850:	634b      	str	r3, [r1, #52]	@ 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 801a852:	4b1a      	ldr	r3, [pc, #104]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a854:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a856:	f023 020c 	bic.w	r2, r3, #12
 801a85a:	687b      	ldr	r3, [r7, #4]
 801a85c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801a85e:	4917      	ldr	r1, [pc, #92]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a860:	4313      	orrs	r3, r2
 801a862:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 801a864:	4b15      	ldr	r3, [pc, #84]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a866:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a868:	f023 0202 	bic.w	r2, r3, #2
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801a870:	4912      	ldr	r1, [pc, #72]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a872:	4313      	orrs	r3, r2
 801a874:	62cb      	str	r3, [r1, #44]	@ 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 801a876:	4b11      	ldr	r3, [pc, #68]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a878:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a87a:	4a10      	ldr	r2, [pc, #64]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a87c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801a880:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801a882:	4b0e      	ldr	r3, [pc, #56]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a884:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a886:	4a0d      	ldr	r2, [pc, #52]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a888:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801a88c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 801a88e:	4b0b      	ldr	r3, [pc, #44]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a890:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a892:	4a0a      	ldr	r2, [pc, #40]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 801a898:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 801a89a:	4b08      	ldr	r3, [pc, #32]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a89c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a89e:	4a07      	ldr	r2, [pc, #28]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a8a0:	f043 0301 	orr.w	r3, r3, #1
 801a8a4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 801a8a6:	4b05      	ldr	r3, [pc, #20]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a8a8:	681b      	ldr	r3, [r3, #0]
 801a8aa:	4a04      	ldr	r2, [pc, #16]	@ (801a8bc <HAL_RCC_OscConfig+0x76c>)
 801a8ac:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801a8b0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a8b2:	f7f7 fc63 	bl	801217c <HAL_GetTick>
 801a8b6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a8b8:	e011      	b.n	801a8de <HAL_RCC_OscConfig+0x78e>
 801a8ba:	bf00      	nop
 801a8bc:	58024400 	.word	0x58024400
 801a8c0:	58024800 	.word	0x58024800
 801a8c4:	fffffc0c 	.word	0xfffffc0c
 801a8c8:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a8cc:	f7f7 fc56 	bl	801217c <HAL_GetTick>
 801a8d0:	4602      	mov	r2, r0
 801a8d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a8d4:	1ad3      	subs	r3, r2, r3
 801a8d6:	2b02      	cmp	r3, #2
 801a8d8:	d901      	bls.n	801a8de <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 801a8da:	2303      	movs	r3, #3
 801a8dc:	e08a      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801a8de:	4b47      	ldr	r3, [pc, #284]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a8e0:	681b      	ldr	r3, [r3, #0]
 801a8e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d0f0      	beq.n	801a8cc <HAL_RCC_OscConfig+0x77c>
 801a8ea:	e082      	b.n	801a9f2 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801a8ec:	4b43      	ldr	r3, [pc, #268]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a8ee:	681b      	ldr	r3, [r3, #0]
 801a8f0:	4a42      	ldr	r2, [pc, #264]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a8f2:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801a8f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801a8f8:	f7f7 fc40 	bl	801217c <HAL_GetTick>
 801a8fc:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801a8fe:	e008      	b.n	801a912 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801a900:	f7f7 fc3c 	bl	801217c <HAL_GetTick>
 801a904:	4602      	mov	r2, r0
 801a906:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a908:	1ad3      	subs	r3, r2, r3
 801a90a:	2b02      	cmp	r3, #2
 801a90c:	d901      	bls.n	801a912 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 801a90e:	2303      	movs	r3, #3
 801a910:	e070      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 801a912:	4b3a      	ldr	r3, [pc, #232]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a914:	681b      	ldr	r3, [r3, #0]
 801a916:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801a91a:	2b00      	cmp	r3, #0
 801a91c:	d1f0      	bne.n	801a900 <HAL_RCC_OscConfig+0x7b0>
 801a91e:	e068      	b.n	801a9f2 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 801a920:	4b36      	ldr	r3, [pc, #216]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a922:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a924:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 801a926:	4b35      	ldr	r3, [pc, #212]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a928:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a92a:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a92c:	687b      	ldr	r3, [r7, #4]
 801a92e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a930:	2b01      	cmp	r3, #1
 801a932:	d031      	beq.n	801a998 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a934:	693b      	ldr	r3, [r7, #16]
 801a936:	f003 0203 	and.w	r2, r3, #3
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 801a93e:	429a      	cmp	r2, r3
 801a940:	d12a      	bne.n	801a998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801a942:	693b      	ldr	r3, [r7, #16]
 801a944:	091b      	lsrs	r3, r3, #4
 801a946:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801a94a:	687b      	ldr	r3, [r7, #4]
 801a94c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801a94e:	429a      	cmp	r2, r3
 801a950:	d122      	bne.n	801a998 <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801a952:	68fb      	ldr	r3, [r7, #12]
 801a954:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801a958:	687b      	ldr	r3, [r7, #4]
 801a95a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801a95c:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 801a95e:	429a      	cmp	r2, r3
 801a960:	d11a      	bne.n	801a998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801a962:	68fb      	ldr	r3, [r7, #12]
 801a964:	0a5b      	lsrs	r3, r3, #9
 801a966:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a96e:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 801a970:	429a      	cmp	r2, r3
 801a972:	d111      	bne.n	801a998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801a974:	68fb      	ldr	r3, [r7, #12]
 801a976:	0c1b      	lsrs	r3, r3, #16
 801a978:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a97c:	687b      	ldr	r3, [r7, #4]
 801a97e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801a980:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 801a982:	429a      	cmp	r2, r3
 801a984:	d108      	bne.n	801a998 <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 801a986:	68fb      	ldr	r3, [r7, #12]
 801a988:	0e1b      	lsrs	r3, r3, #24
 801a98a:	f003 027f 	and.w	r2, r3, #127	@ 0x7f
 801a98e:	687b      	ldr	r3, [r7, #4]
 801a990:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801a992:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 801a994:	429a      	cmp	r2, r3
 801a996:	d001      	beq.n	801a99c <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 801a998:	2301      	movs	r3, #1
 801a99a:	e02b      	b.n	801a9f4 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 801a99c:	4b17      	ldr	r3, [pc, #92]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a99e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801a9a0:	08db      	lsrs	r3, r3, #3
 801a9a2:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801a9a6:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 801a9a8:	687b      	ldr	r3, [r7, #4]
 801a9aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801a9ac:	693a      	ldr	r2, [r7, #16]
 801a9ae:	429a      	cmp	r2, r3
 801a9b0:	d01f      	beq.n	801a9f2 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 801a9b2:	4b12      	ldr	r3, [pc, #72]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a9b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9b6:	4a11      	ldr	r2, [pc, #68]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a9b8:	f023 0301 	bic.w	r3, r3, #1
 801a9bc:	62d3      	str	r3, [r2, #44]	@ 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 801a9be:	f7f7 fbdd 	bl	801217c <HAL_GetTick>
 801a9c2:	6278      	str	r0, [r7, #36]	@ 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 801a9c4:	bf00      	nop
 801a9c6:	f7f7 fbd9 	bl	801217c <HAL_GetTick>
 801a9ca:	4602      	mov	r2, r0
 801a9cc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a9ce:	4293      	cmp	r3, r2
 801a9d0:	d0f9      	beq.n	801a9c6 <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 801a9d2:	4b0a      	ldr	r3, [pc, #40]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a9d4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801a9d6:	4b0a      	ldr	r3, [pc, #40]	@ (801aa00 <HAL_RCC_OscConfig+0x8b0>)
 801a9d8:	4013      	ands	r3, r2
 801a9da:	687a      	ldr	r2, [r7, #4]
 801a9dc:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801a9de:	00d2      	lsls	r2, r2, #3
 801a9e0:	4906      	ldr	r1, [pc, #24]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a9e2:	4313      	orrs	r3, r2
 801a9e4:	634b      	str	r3, [r1, #52]	@ 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 801a9e6:	4b05      	ldr	r3, [pc, #20]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a9e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801a9ea:	4a04      	ldr	r2, [pc, #16]	@ (801a9fc <HAL_RCC_OscConfig+0x8ac>)
 801a9ec:	f043 0301 	orr.w	r3, r3, #1
 801a9f0:	62d3      	str	r3, [r2, #44]	@ 0x2c
        }
      }
    }
  }
  return HAL_OK;
 801a9f2:	2300      	movs	r3, #0
}
 801a9f4:	4618      	mov	r0, r3
 801a9f6:	3730      	adds	r7, #48	@ 0x30
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}
 801a9fc:	58024400 	.word	0x58024400
 801aa00:	ffff0007 	.word	0xffff0007

0801aa04 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 801aa04:	b580      	push	{r7, lr}
 801aa06:	b086      	sub	sp, #24
 801aa08:	af00      	add	r7, sp, #0
 801aa0a:	6078      	str	r0, [r7, #4]
 801aa0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801aa0e:	687b      	ldr	r3, [r7, #4]
 801aa10:	2b00      	cmp	r3, #0
 801aa12:	d101      	bne.n	801aa18 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 801aa14:	2301      	movs	r3, #1
 801aa16:	e19c      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801aa18:	4b8a      	ldr	r3, [pc, #552]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801aa1a:	681b      	ldr	r3, [r3, #0]
 801aa1c:	f003 030f 	and.w	r3, r3, #15
 801aa20:	683a      	ldr	r2, [r7, #0]
 801aa22:	429a      	cmp	r2, r3
 801aa24:	d910      	bls.n	801aa48 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801aa26:	4b87      	ldr	r3, [pc, #540]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	f023 020f 	bic.w	r2, r3, #15
 801aa2e:	4985      	ldr	r1, [pc, #532]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801aa30:	683b      	ldr	r3, [r7, #0]
 801aa32:	4313      	orrs	r3, r2
 801aa34:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801aa36:	4b83      	ldr	r3, [pc, #524]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801aa38:	681b      	ldr	r3, [r3, #0]
 801aa3a:	f003 030f 	and.w	r3, r3, #15
 801aa3e:	683a      	ldr	r2, [r7, #0]
 801aa40:	429a      	cmp	r2, r3
 801aa42:	d001      	beq.n	801aa48 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 801aa44:	2301      	movs	r3, #1
 801aa46:	e184      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801aa48:	687b      	ldr	r3, [r7, #4]
 801aa4a:	681b      	ldr	r3, [r3, #0]
 801aa4c:	f003 0304 	and.w	r3, r3, #4
 801aa50:	2b00      	cmp	r3, #0
 801aa52:	d010      	beq.n	801aa76 <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801aa54:	687b      	ldr	r3, [r7, #4]
 801aa56:	691a      	ldr	r2, [r3, #16]
 801aa58:	4b7b      	ldr	r3, [pc, #492]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aa5a:	699b      	ldr	r3, [r3, #24]
 801aa5c:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801aa60:	429a      	cmp	r2, r3
 801aa62:	d908      	bls.n	801aa76 <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801aa64:	4b78      	ldr	r3, [pc, #480]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aa66:	699b      	ldr	r3, [r3, #24]
 801aa68:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801aa6c:	687b      	ldr	r3, [r7, #4]
 801aa6e:	691b      	ldr	r3, [r3, #16]
 801aa70:	4975      	ldr	r1, [pc, #468]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aa72:	4313      	orrs	r3, r2
 801aa74:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801aa76:	687b      	ldr	r3, [r7, #4]
 801aa78:	681b      	ldr	r3, [r3, #0]
 801aa7a:	f003 0308 	and.w	r3, r3, #8
 801aa7e:	2b00      	cmp	r3, #0
 801aa80:	d010      	beq.n	801aaa4 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	695a      	ldr	r2, [r3, #20]
 801aa86:	4b70      	ldr	r3, [pc, #448]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aa88:	69db      	ldr	r3, [r3, #28]
 801aa8a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801aa8e:	429a      	cmp	r2, r3
 801aa90:	d908      	bls.n	801aaa4 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801aa92:	4b6d      	ldr	r3, [pc, #436]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aa94:	69db      	ldr	r3, [r3, #28]
 801aa96:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	695b      	ldr	r3, [r3, #20]
 801aa9e:	496a      	ldr	r1, [pc, #424]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aaa0:	4313      	orrs	r3, r2
 801aaa2:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aaa4:	687b      	ldr	r3, [r7, #4]
 801aaa6:	681b      	ldr	r3, [r3, #0]
 801aaa8:	f003 0310 	and.w	r3, r3, #16
 801aaac:	2b00      	cmp	r3, #0
 801aaae:	d010      	beq.n	801aad2 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801aab0:	687b      	ldr	r3, [r7, #4]
 801aab2:	699a      	ldr	r2, [r3, #24]
 801aab4:	4b64      	ldr	r3, [pc, #400]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aab6:	69db      	ldr	r3, [r3, #28]
 801aab8:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801aabc:	429a      	cmp	r2, r3
 801aabe:	d908      	bls.n	801aad2 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801aac0:	4b61      	ldr	r3, [pc, #388]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aac2:	69db      	ldr	r3, [r3, #28]
 801aac4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801aac8:	687b      	ldr	r3, [r7, #4]
 801aaca:	699b      	ldr	r3, [r3, #24]
 801aacc:	495e      	ldr	r1, [pc, #376]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aace:	4313      	orrs	r3, r2
 801aad0:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801aad2:	687b      	ldr	r3, [r7, #4]
 801aad4:	681b      	ldr	r3, [r3, #0]
 801aad6:	f003 0320 	and.w	r3, r3, #32
 801aada:	2b00      	cmp	r3, #0
 801aadc:	d010      	beq.n	801ab00 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801aade:	687b      	ldr	r3, [r7, #4]
 801aae0:	69da      	ldr	r2, [r3, #28]
 801aae2:	4b59      	ldr	r3, [pc, #356]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aae4:	6a1b      	ldr	r3, [r3, #32]
 801aae6:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801aaea:	429a      	cmp	r2, r3
 801aaec:	d908      	bls.n	801ab00 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801aaee:	4b56      	ldr	r3, [pc, #344]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aaf0:	6a1b      	ldr	r3, [r3, #32]
 801aaf2:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801aaf6:	687b      	ldr	r3, [r7, #4]
 801aaf8:	69db      	ldr	r3, [r3, #28]
 801aafa:	4953      	ldr	r1, [pc, #332]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aafc:	4313      	orrs	r3, r2
 801aafe:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801ab00:	687b      	ldr	r3, [r7, #4]
 801ab02:	681b      	ldr	r3, [r3, #0]
 801ab04:	f003 0302 	and.w	r3, r3, #2
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d010      	beq.n	801ab2e <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	68da      	ldr	r2, [r3, #12]
 801ab10:	4b4d      	ldr	r3, [pc, #308]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab12:	699b      	ldr	r3, [r3, #24]
 801ab14:	f003 030f 	and.w	r3, r3, #15
 801ab18:	429a      	cmp	r2, r3
 801ab1a:	d908      	bls.n	801ab2e <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ab1c:	4b4a      	ldr	r3, [pc, #296]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab1e:	699b      	ldr	r3, [r3, #24]
 801ab20:	f023 020f 	bic.w	r2, r3, #15
 801ab24:	687b      	ldr	r3, [r7, #4]
 801ab26:	68db      	ldr	r3, [r3, #12]
 801ab28:	4947      	ldr	r1, [pc, #284]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab2a:	4313      	orrs	r3, r2
 801ab2c:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 801ab2e:	687b      	ldr	r3, [r7, #4]
 801ab30:	681b      	ldr	r3, [r3, #0]
 801ab32:	f003 0301 	and.w	r3, r3, #1
 801ab36:	2b00      	cmp	r3, #0
 801ab38:	d055      	beq.n	801abe6 <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 801ab3a:	4b43      	ldr	r3, [pc, #268]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab3c:	699b      	ldr	r3, [r3, #24]
 801ab3e:	f423 6270 	bic.w	r2, r3, #3840	@ 0xf00
 801ab42:	687b      	ldr	r3, [r7, #4]
 801ab44:	689b      	ldr	r3, [r3, #8]
 801ab46:	4940      	ldr	r1, [pc, #256]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab48:	4313      	orrs	r3, r2
 801ab4a:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 801ab4c:	687b      	ldr	r3, [r7, #4]
 801ab4e:	685b      	ldr	r3, [r3, #4]
 801ab50:	2b02      	cmp	r3, #2
 801ab52:	d107      	bne.n	801ab64 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801ab54:	4b3c      	ldr	r3, [pc, #240]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ab5c:	2b00      	cmp	r3, #0
 801ab5e:	d121      	bne.n	801aba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ab60:	2301      	movs	r3, #1
 801ab62:	e0f6      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 801ab64:	687b      	ldr	r3, [r7, #4]
 801ab66:	685b      	ldr	r3, [r3, #4]
 801ab68:	2b03      	cmp	r3, #3
 801ab6a:	d107      	bne.n	801ab7c <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 801ab6c:	4b36      	ldr	r3, [pc, #216]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ab74:	2b00      	cmp	r3, #0
 801ab76:	d115      	bne.n	801aba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ab78:	2301      	movs	r3, #1
 801ab7a:	e0ea      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 801ab7c:	687b      	ldr	r3, [r7, #4]
 801ab7e:	685b      	ldr	r3, [r3, #4]
 801ab80:	2b01      	cmp	r3, #1
 801ab82:	d107      	bne.n	801ab94 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 801ab84:	4b30      	ldr	r3, [pc, #192]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab86:	681b      	ldr	r3, [r3, #0]
 801ab88:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ab8c:	2b00      	cmp	r3, #0
 801ab8e:	d109      	bne.n	801aba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801ab90:	2301      	movs	r3, #1
 801ab92:	e0de      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801ab94:	4b2c      	ldr	r3, [pc, #176]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ab96:	681b      	ldr	r3, [r3, #0]
 801ab98:	f003 0304 	and.w	r3, r3, #4
 801ab9c:	2b00      	cmp	r3, #0
 801ab9e:	d101      	bne.n	801aba4 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 801aba0:	2301      	movs	r3, #1
 801aba2:	e0d6      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 801aba4:	4b28      	ldr	r3, [pc, #160]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801aba6:	691b      	ldr	r3, [r3, #16]
 801aba8:	f023 0207 	bic.w	r2, r3, #7
 801abac:	687b      	ldr	r3, [r7, #4]
 801abae:	685b      	ldr	r3, [r3, #4]
 801abb0:	4925      	ldr	r1, [pc, #148]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801abb2:	4313      	orrs	r3, r2
 801abb4:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801abb6:	f7f7 fae1 	bl	801217c <HAL_GetTick>
 801abba:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801abbc:	e00a      	b.n	801abd4 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 801abbe:	f7f7 fadd 	bl	801217c <HAL_GetTick>
 801abc2:	4602      	mov	r2, r0
 801abc4:	697b      	ldr	r3, [r7, #20]
 801abc6:	1ad3      	subs	r3, r2, r3
 801abc8:	f241 3288 	movw	r2, #5000	@ 0x1388
 801abcc:	4293      	cmp	r3, r2
 801abce:	d901      	bls.n	801abd4 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 801abd0:	2303      	movs	r3, #3
 801abd2:	e0be      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 801abd4:	4b1c      	ldr	r3, [pc, #112]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801abd6:	691b      	ldr	r3, [r3, #16]
 801abd8:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801abdc:	687b      	ldr	r3, [r7, #4]
 801abde:	685b      	ldr	r3, [r3, #4]
 801abe0:	00db      	lsls	r3, r3, #3
 801abe2:	429a      	cmp	r2, r3
 801abe4:	d1eb      	bne.n	801abbe <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 801abe6:	687b      	ldr	r3, [r7, #4]
 801abe8:	681b      	ldr	r3, [r3, #0]
 801abea:	f003 0302 	and.w	r3, r3, #2
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d010      	beq.n	801ac14 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 801abf2:	687b      	ldr	r3, [r7, #4]
 801abf4:	68da      	ldr	r2, [r3, #12]
 801abf6:	4b14      	ldr	r3, [pc, #80]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801abf8:	699b      	ldr	r3, [r3, #24]
 801abfa:	f003 030f 	and.w	r3, r3, #15
 801abfe:	429a      	cmp	r2, r3
 801ac00:	d208      	bcs.n	801ac14 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 801ac02:	4b11      	ldr	r3, [pc, #68]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ac04:	699b      	ldr	r3, [r3, #24]
 801ac06:	f023 020f 	bic.w	r2, r3, #15
 801ac0a:	687b      	ldr	r3, [r7, #4]
 801ac0c:	68db      	ldr	r3, [r3, #12]
 801ac0e:	490e      	ldr	r1, [pc, #56]	@ (801ac48 <HAL_RCC_ClockConfig+0x244>)
 801ac10:	4313      	orrs	r3, r2
 801ac12:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 801ac14:	4b0b      	ldr	r3, [pc, #44]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801ac16:	681b      	ldr	r3, [r3, #0]
 801ac18:	f003 030f 	and.w	r3, r3, #15
 801ac1c:	683a      	ldr	r2, [r7, #0]
 801ac1e:	429a      	cmp	r2, r3
 801ac20:	d214      	bcs.n	801ac4c <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 801ac22:	4b08      	ldr	r3, [pc, #32]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801ac24:	681b      	ldr	r3, [r3, #0]
 801ac26:	f023 020f 	bic.w	r2, r3, #15
 801ac2a:	4906      	ldr	r1, [pc, #24]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801ac2c:	683b      	ldr	r3, [r7, #0]
 801ac2e:	4313      	orrs	r3, r2
 801ac30:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 801ac32:	4b04      	ldr	r3, [pc, #16]	@ (801ac44 <HAL_RCC_ClockConfig+0x240>)
 801ac34:	681b      	ldr	r3, [r3, #0]
 801ac36:	f003 030f 	and.w	r3, r3, #15
 801ac3a:	683a      	ldr	r2, [r7, #0]
 801ac3c:	429a      	cmp	r2, r3
 801ac3e:	d005      	beq.n	801ac4c <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 801ac40:	2301      	movs	r3, #1
 801ac42:	e086      	b.n	801ad52 <HAL_RCC_ClockConfig+0x34e>
 801ac44:	52002000 	.word	0x52002000
 801ac48:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 801ac4c:	687b      	ldr	r3, [r7, #4]
 801ac4e:	681b      	ldr	r3, [r3, #0]
 801ac50:	f003 0304 	and.w	r3, r3, #4
 801ac54:	2b00      	cmp	r3, #0
 801ac56:	d010      	beq.n	801ac7a <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 801ac58:	687b      	ldr	r3, [r7, #4]
 801ac5a:	691a      	ldr	r2, [r3, #16]
 801ac5c:	4b3f      	ldr	r3, [pc, #252]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ac5e:	699b      	ldr	r3, [r3, #24]
 801ac60:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ac64:	429a      	cmp	r2, r3
 801ac66:	d208      	bcs.n	801ac7a <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 801ac68:	4b3c      	ldr	r3, [pc, #240]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ac6a:	699b      	ldr	r3, [r3, #24]
 801ac6c:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ac70:	687b      	ldr	r3, [r7, #4]
 801ac72:	691b      	ldr	r3, [r3, #16]
 801ac74:	4939      	ldr	r1, [pc, #228]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ac76:	4313      	orrs	r3, r2
 801ac78:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801ac7a:	687b      	ldr	r3, [r7, #4]
 801ac7c:	681b      	ldr	r3, [r3, #0]
 801ac7e:	f003 0308 	and.w	r3, r3, #8
 801ac82:	2b00      	cmp	r3, #0
 801ac84:	d010      	beq.n	801aca8 <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 801ac86:	687b      	ldr	r3, [r7, #4]
 801ac88:	695a      	ldr	r2, [r3, #20]
 801ac8a:	4b34      	ldr	r3, [pc, #208]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ac8c:	69db      	ldr	r3, [r3, #28]
 801ac8e:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801ac92:	429a      	cmp	r2, r3
 801ac94:	d208      	bcs.n	801aca8 <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 801ac96:	4b31      	ldr	r3, [pc, #196]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ac98:	69db      	ldr	r3, [r3, #28]
 801ac9a:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	695b      	ldr	r3, [r3, #20]
 801aca2:	492e      	ldr	r1, [pc, #184]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801aca4:	4313      	orrs	r3, r2
 801aca6:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	681b      	ldr	r3, [r3, #0]
 801acac:	f003 0310 	and.w	r3, r3, #16
 801acb0:	2b00      	cmp	r3, #0
 801acb2:	d010      	beq.n	801acd6 <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 801acb4:	687b      	ldr	r3, [r7, #4]
 801acb6:	699a      	ldr	r2, [r3, #24]
 801acb8:	4b28      	ldr	r3, [pc, #160]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801acba:	69db      	ldr	r3, [r3, #28]
 801acbc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801acc0:	429a      	cmp	r2, r3
 801acc2:	d208      	bcs.n	801acd6 <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 801acc4:	4b25      	ldr	r3, [pc, #148]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801acc6:	69db      	ldr	r3, [r3, #28]
 801acc8:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	699b      	ldr	r3, [r3, #24]
 801acd0:	4922      	ldr	r1, [pc, #136]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801acd2:	4313      	orrs	r3, r2
 801acd4:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 801acd6:	687b      	ldr	r3, [r7, #4]
 801acd8:	681b      	ldr	r3, [r3, #0]
 801acda:	f003 0320 	and.w	r3, r3, #32
 801acde:	2b00      	cmp	r3, #0
 801ace0:	d010      	beq.n	801ad04 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 801ace2:	687b      	ldr	r3, [r7, #4]
 801ace4:	69da      	ldr	r2, [r3, #28]
 801ace6:	4b1d      	ldr	r3, [pc, #116]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ace8:	6a1b      	ldr	r3, [r3, #32]
 801acea:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 801acee:	429a      	cmp	r2, r3
 801acf0:	d208      	bcs.n	801ad04 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 801acf2:	4b1a      	ldr	r3, [pc, #104]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801acf4:	6a1b      	ldr	r3, [r3, #32]
 801acf6:	f023 0270 	bic.w	r2, r3, #112	@ 0x70
 801acfa:	687b      	ldr	r3, [r7, #4]
 801acfc:	69db      	ldr	r3, [r3, #28]
 801acfe:	4917      	ldr	r1, [pc, #92]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ad00:	4313      	orrs	r3, r2
 801ad02:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 801ad04:	f000 f834 	bl	801ad70 <HAL_RCC_GetSysClockFreq>
 801ad08:	4602      	mov	r2, r0
 801ad0a:	4b14      	ldr	r3, [pc, #80]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ad0c:	699b      	ldr	r3, [r3, #24]
 801ad0e:	0a1b      	lsrs	r3, r3, #8
 801ad10:	f003 030f 	and.w	r3, r3, #15
 801ad14:	4912      	ldr	r1, [pc, #72]	@ (801ad60 <HAL_RCC_ClockConfig+0x35c>)
 801ad16:	5ccb      	ldrb	r3, [r1, r3]
 801ad18:	f003 031f 	and.w	r3, r3, #31
 801ad1c:	fa22 f303 	lsr.w	r3, r2, r3
 801ad20:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801ad22:	4b0e      	ldr	r3, [pc, #56]	@ (801ad5c <HAL_RCC_ClockConfig+0x358>)
 801ad24:	699b      	ldr	r3, [r3, #24]
 801ad26:	f003 030f 	and.w	r3, r3, #15
 801ad2a:	4a0d      	ldr	r2, [pc, #52]	@ (801ad60 <HAL_RCC_ClockConfig+0x35c>)
 801ad2c:	5cd3      	ldrb	r3, [r2, r3]
 801ad2e:	f003 031f 	and.w	r3, r3, #31
 801ad32:	693a      	ldr	r2, [r7, #16]
 801ad34:	fa22 f303 	lsr.w	r3, r2, r3
 801ad38:	4a0a      	ldr	r2, [pc, #40]	@ (801ad64 <HAL_RCC_ClockConfig+0x360>)
 801ad3a:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801ad3c:	4a0a      	ldr	r2, [pc, #40]	@ (801ad68 <HAL_RCC_ClockConfig+0x364>)
 801ad3e:	693b      	ldr	r3, [r7, #16]
 801ad40:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 801ad42:	4b0a      	ldr	r3, [pc, #40]	@ (801ad6c <HAL_RCC_ClockConfig+0x368>)
 801ad44:	681b      	ldr	r3, [r3, #0]
 801ad46:	4618      	mov	r0, r3
 801ad48:	f7f7 f9ce 	bl	80120e8 <HAL_InitTick>
 801ad4c:	4603      	mov	r3, r0
 801ad4e:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 801ad50:	7bfb      	ldrb	r3, [r7, #15]
}
 801ad52:	4618      	mov	r0, r3
 801ad54:	3718      	adds	r7, #24
 801ad56:	46bd      	mov	sp, r7
 801ad58:	bd80      	pop	{r7, pc}
 801ad5a:	bf00      	nop
 801ad5c:	58024400 	.word	0x58024400
 801ad60:	080274a4 	.word	0x080274a4
 801ad64:	24000404 	.word	0x24000404
 801ad68:	24000400 	.word	0x24000400
 801ad6c:	24000a3c 	.word	0x24000a3c

0801ad70 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 801ad70:	b480      	push	{r7}
 801ad72:	b089      	sub	sp, #36	@ 0x24
 801ad74:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 801ad76:	4bb3      	ldr	r3, [pc, #716]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ad78:	691b      	ldr	r3, [r3, #16]
 801ad7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 801ad7e:	2b18      	cmp	r3, #24
 801ad80:	f200 8155 	bhi.w	801b02e <HAL_RCC_GetSysClockFreq+0x2be>
 801ad84:	a201      	add	r2, pc, #4	@ (adr r2, 801ad8c <HAL_RCC_GetSysClockFreq+0x1c>)
 801ad86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ad8a:	bf00      	nop
 801ad8c:	0801adf1 	.word	0x0801adf1
 801ad90:	0801b02f 	.word	0x0801b02f
 801ad94:	0801b02f 	.word	0x0801b02f
 801ad98:	0801b02f 	.word	0x0801b02f
 801ad9c:	0801b02f 	.word	0x0801b02f
 801ada0:	0801b02f 	.word	0x0801b02f
 801ada4:	0801b02f 	.word	0x0801b02f
 801ada8:	0801b02f 	.word	0x0801b02f
 801adac:	0801ae17 	.word	0x0801ae17
 801adb0:	0801b02f 	.word	0x0801b02f
 801adb4:	0801b02f 	.word	0x0801b02f
 801adb8:	0801b02f 	.word	0x0801b02f
 801adbc:	0801b02f 	.word	0x0801b02f
 801adc0:	0801b02f 	.word	0x0801b02f
 801adc4:	0801b02f 	.word	0x0801b02f
 801adc8:	0801b02f 	.word	0x0801b02f
 801adcc:	0801ae1d 	.word	0x0801ae1d
 801add0:	0801b02f 	.word	0x0801b02f
 801add4:	0801b02f 	.word	0x0801b02f
 801add8:	0801b02f 	.word	0x0801b02f
 801addc:	0801b02f 	.word	0x0801b02f
 801ade0:	0801b02f 	.word	0x0801b02f
 801ade4:	0801b02f 	.word	0x0801b02f
 801ade8:	0801b02f 	.word	0x0801b02f
 801adec:	0801ae23 	.word	0x0801ae23
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801adf0:	4b94      	ldr	r3, [pc, #592]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801adf2:	681b      	ldr	r3, [r3, #0]
 801adf4:	f003 0320 	and.w	r3, r3, #32
 801adf8:	2b00      	cmp	r3, #0
 801adfa:	d009      	beq.n	801ae10 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801adfc:	4b91      	ldr	r3, [pc, #580]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801adfe:	681b      	ldr	r3, [r3, #0]
 801ae00:	08db      	lsrs	r3, r3, #3
 801ae02:	f003 0303 	and.w	r3, r3, #3
 801ae06:	4a90      	ldr	r2, [pc, #576]	@ (801b048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ae08:	fa22 f303 	lsr.w	r3, r2, r3
 801ae0c:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 801ae0e:	e111      	b.n	801b034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 801ae10:	4b8d      	ldr	r3, [pc, #564]	@ (801b048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ae12:	61bb      	str	r3, [r7, #24]
      break;
 801ae14:	e10e      	b.n	801b034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 801ae16:	4b8d      	ldr	r3, [pc, #564]	@ (801b04c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801ae18:	61bb      	str	r3, [r7, #24]
      break;
 801ae1a:	e10b      	b.n	801b034 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 801ae1c:	4b8c      	ldr	r3, [pc, #560]	@ (801b050 <HAL_RCC_GetSysClockFreq+0x2e0>)
 801ae1e:	61bb      	str	r3, [r7, #24]
      break;
 801ae20:	e108      	b.n	801b034 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801ae22:	4b88      	ldr	r3, [pc, #544]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ae24:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae26:	f003 0303 	and.w	r3, r3, #3
 801ae2a:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 801ae2c:	4b85      	ldr	r3, [pc, #532]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ae2e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ae30:	091b      	lsrs	r3, r3, #4
 801ae32:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801ae36:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 801ae38:	4b82      	ldr	r3, [pc, #520]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ae3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ae3c:	f003 0301 	and.w	r3, r3, #1
 801ae40:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801ae42:	4b80      	ldr	r3, [pc, #512]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ae44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ae46:	08db      	lsrs	r3, r3, #3
 801ae48:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801ae4c:	68fa      	ldr	r2, [r7, #12]
 801ae4e:	fb02 f303 	mul.w	r3, r2, r3
 801ae52:	ee07 3a90 	vmov	s15, r3
 801ae56:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801ae5a:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 801ae5e:	693b      	ldr	r3, [r7, #16]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	f000 80e1 	beq.w	801b028 <HAL_RCC_GetSysClockFreq+0x2b8>
      {
        switch (pllsource)
 801ae66:	697b      	ldr	r3, [r7, #20]
 801ae68:	2b02      	cmp	r3, #2
 801ae6a:	f000 8083 	beq.w	801af74 <HAL_RCC_GetSysClockFreq+0x204>
 801ae6e:	697b      	ldr	r3, [r7, #20]
 801ae70:	2b02      	cmp	r3, #2
 801ae72:	f200 80a1 	bhi.w	801afb8 <HAL_RCC_GetSysClockFreq+0x248>
 801ae76:	697b      	ldr	r3, [r7, #20]
 801ae78:	2b00      	cmp	r3, #0
 801ae7a:	d003      	beq.n	801ae84 <HAL_RCC_GetSysClockFreq+0x114>
 801ae7c:	697b      	ldr	r3, [r7, #20]
 801ae7e:	2b01      	cmp	r3, #1
 801ae80:	d056      	beq.n	801af30 <HAL_RCC_GetSysClockFreq+0x1c0>
 801ae82:	e099      	b.n	801afb8 <HAL_RCC_GetSysClockFreq+0x248>
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801ae84:	4b6f      	ldr	r3, [pc, #444]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ae86:	681b      	ldr	r3, [r3, #0]
 801ae88:	f003 0320 	and.w	r3, r3, #32
 801ae8c:	2b00      	cmp	r3, #0
 801ae8e:	d02d      	beq.n	801aeec <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801ae90:	4b6c      	ldr	r3, [pc, #432]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801ae92:	681b      	ldr	r3, [r3, #0]
 801ae94:	08db      	lsrs	r3, r3, #3
 801ae96:	f003 0303 	and.w	r3, r3, #3
 801ae9a:	4a6b      	ldr	r2, [pc, #428]	@ (801b048 <HAL_RCC_GetSysClockFreq+0x2d8>)
 801ae9c:	fa22 f303 	lsr.w	r3, r2, r3
 801aea0:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801aea2:	687b      	ldr	r3, [r7, #4]
 801aea4:	ee07 3a90 	vmov	s15, r3
 801aea8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801aeac:	693b      	ldr	r3, [r7, #16]
 801aeae:	ee07 3a90 	vmov	s15, r3
 801aeb2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801aeb6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801aeba:	4b62      	ldr	r3, [pc, #392]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801aebc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801aebe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801aec2:	ee07 3a90 	vmov	s15, r3
 801aec6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801aeca:	ed97 6a02 	vldr	s12, [r7, #8]
 801aece:	eddf 5a61 	vldr	s11, [pc, #388]	@ 801b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 801aed2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801aed6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801aeda:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801aede:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aee2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aee6:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 801aeea:	e087      	b.n	801affc <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801aeec:	693b      	ldr	r3, [r7, #16]
 801aeee:	ee07 3a90 	vmov	s15, r3
 801aef2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801aef6:	eddf 6a58 	vldr	s13, [pc, #352]	@ 801b058 <HAL_RCC_GetSysClockFreq+0x2e8>
 801aefa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801aefe:	4b51      	ldr	r3, [pc, #324]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801af02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801af06:	ee07 3a90 	vmov	s15, r3
 801af0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801af0e:	ed97 6a02 	vldr	s12, [r7, #8]
 801af12:	eddf 5a50 	vldr	s11, [pc, #320]	@ 801b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 801af16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801af1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801af1e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801af22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af26:	ee67 7a27 	vmul.f32	s15, s14, s15
 801af2a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801af2e:	e065      	b.n	801affc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801af30:	693b      	ldr	r3, [r7, #16]
 801af32:	ee07 3a90 	vmov	s15, r3
 801af36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801af3a:	eddf 6a48 	vldr	s13, [pc, #288]	@ 801b05c <HAL_RCC_GetSysClockFreq+0x2ec>
 801af3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801af42:	4b40      	ldr	r3, [pc, #256]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af44:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801af46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801af4a:	ee07 3a90 	vmov	s15, r3
 801af4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801af52:	ed97 6a02 	vldr	s12, [r7, #8]
 801af56:	eddf 5a3f 	vldr	s11, [pc, #252]	@ 801b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 801af5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801af5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801af62:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801af66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801af6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801af6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801af72:	e043      	b.n	801affc <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801af74:	693b      	ldr	r3, [r7, #16]
 801af76:	ee07 3a90 	vmov	s15, r3
 801af7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801af7e:	eddf 6a38 	vldr	s13, [pc, #224]	@ 801b060 <HAL_RCC_GetSysClockFreq+0x2f0>
 801af82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801af86:	4b2f      	ldr	r3, [pc, #188]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801af88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801af8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801af8e:	ee07 3a90 	vmov	s15, r3
 801af92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801af96:	ed97 6a02 	vldr	s12, [r7, #8]
 801af9a:	eddf 5a2e 	vldr	s11, [pc, #184]	@ 801b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 801af9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801afa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801afa6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801afaa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801afae:	ee67 7a27 	vmul.f32	s15, s14, s15
 801afb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801afb6:	e021      	b.n	801affc <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801afb8:	693b      	ldr	r3, [r7, #16]
 801afba:	ee07 3a90 	vmov	s15, r3
 801afbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801afc2:	eddf 6a26 	vldr	s13, [pc, #152]	@ 801b05c <HAL_RCC_GetSysClockFreq+0x2ec>
 801afc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801afca:	4b1e      	ldr	r3, [pc, #120]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801afcc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801afce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801afd2:	ee07 3a90 	vmov	s15, r3
 801afd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801afda:	ed97 6a02 	vldr	s12, [r7, #8]
 801afde:	eddf 5a1d 	vldr	s11, [pc, #116]	@ 801b054 <HAL_RCC_GetSysClockFreq+0x2e4>
 801afe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801afe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801afea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801afee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801aff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801aff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 801affa:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 801affc:	4b11      	ldr	r3, [pc, #68]	@ (801b044 <HAL_RCC_GetSysClockFreq+0x2d4>)
 801affe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801b000:	0a5b      	lsrs	r3, r3, #9
 801b002:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801b006:	3301      	adds	r3, #1
 801b008:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 801b00a:	683b      	ldr	r3, [r7, #0]
 801b00c:	ee07 3a90 	vmov	s15, r3
 801b010:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 801b014:	edd7 6a07 	vldr	s13, [r7, #28]
 801b018:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801b01c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801b020:	ee17 3a90 	vmov	r3, s15
 801b024:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 801b026:	e005      	b.n	801b034 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 801b028:	2300      	movs	r3, #0
 801b02a:	61bb      	str	r3, [r7, #24]
      break;
 801b02c:	e002      	b.n	801b034 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 801b02e:	4b07      	ldr	r3, [pc, #28]	@ (801b04c <HAL_RCC_GetSysClockFreq+0x2dc>)
 801b030:	61bb      	str	r3, [r7, #24]
      break;
 801b032:	bf00      	nop
  }

  return sysclockfreq;
 801b034:	69bb      	ldr	r3, [r7, #24]
}
 801b036:	4618      	mov	r0, r3
 801b038:	3724      	adds	r7, #36	@ 0x24
 801b03a:	46bd      	mov	sp, r7
 801b03c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b040:	4770      	bx	lr
 801b042:	bf00      	nop
 801b044:	58024400 	.word	0x58024400
 801b048:	03d09000 	.word	0x03d09000
 801b04c:	003d0900 	.word	0x003d0900
 801b050:	017d7840 	.word	0x017d7840
 801b054:	46000000 	.word	0x46000000
 801b058:	4c742400 	.word	0x4c742400
 801b05c:	4a742400 	.word	0x4a742400
 801b060:	4bbebc20 	.word	0x4bbebc20

0801b064 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 801b064:	b580      	push	{r7, lr}
 801b066:	b082      	sub	sp, #8
 801b068:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 801b06a:	f7ff fe81 	bl	801ad70 <HAL_RCC_GetSysClockFreq>
 801b06e:	4602      	mov	r2, r0
 801b070:	4b10      	ldr	r3, [pc, #64]	@ (801b0b4 <HAL_RCC_GetHCLKFreq+0x50>)
 801b072:	699b      	ldr	r3, [r3, #24]
 801b074:	0a1b      	lsrs	r3, r3, #8
 801b076:	f003 030f 	and.w	r3, r3, #15
 801b07a:	490f      	ldr	r1, [pc, #60]	@ (801b0b8 <HAL_RCC_GetHCLKFreq+0x54>)
 801b07c:	5ccb      	ldrb	r3, [r1, r3]
 801b07e:	f003 031f 	and.w	r3, r3, #31
 801b082:	fa22 f303 	lsr.w	r3, r2, r3
 801b086:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 801b088:	4b0a      	ldr	r3, [pc, #40]	@ (801b0b4 <HAL_RCC_GetHCLKFreq+0x50>)
 801b08a:	699b      	ldr	r3, [r3, #24]
 801b08c:	f003 030f 	and.w	r3, r3, #15
 801b090:	4a09      	ldr	r2, [pc, #36]	@ (801b0b8 <HAL_RCC_GetHCLKFreq+0x54>)
 801b092:	5cd3      	ldrb	r3, [r2, r3]
 801b094:	f003 031f 	and.w	r3, r3, #31
 801b098:	687a      	ldr	r2, [r7, #4]
 801b09a:	fa22 f303 	lsr.w	r3, r2, r3
 801b09e:	4a07      	ldr	r2, [pc, #28]	@ (801b0bc <HAL_RCC_GetHCLKFreq+0x58>)
 801b0a0:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 801b0a2:	4a07      	ldr	r2, [pc, #28]	@ (801b0c0 <HAL_RCC_GetHCLKFreq+0x5c>)
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 801b0a8:	4b04      	ldr	r3, [pc, #16]	@ (801b0bc <HAL_RCC_GetHCLKFreq+0x58>)
 801b0aa:	681b      	ldr	r3, [r3, #0]
}
 801b0ac:	4618      	mov	r0, r3
 801b0ae:	3708      	adds	r7, #8
 801b0b0:	46bd      	mov	sp, r7
 801b0b2:	bd80      	pop	{r7, pc}
 801b0b4:	58024400 	.word	0x58024400
 801b0b8:	080274a4 	.word	0x080274a4
 801b0bc:	24000404 	.word	0x24000404
 801b0c0:	24000400 	.word	0x24000400

0801b0c4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 801b0c4:	b580      	push	{r7, lr}
 801b0c6:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 801b0c8:	f7ff ffcc 	bl	801b064 <HAL_RCC_GetHCLKFreq>
 801b0cc:	4602      	mov	r2, r0
 801b0ce:	4b06      	ldr	r3, [pc, #24]	@ (801b0e8 <HAL_RCC_GetPCLK1Freq+0x24>)
 801b0d0:	69db      	ldr	r3, [r3, #28]
 801b0d2:	091b      	lsrs	r3, r3, #4
 801b0d4:	f003 0307 	and.w	r3, r3, #7
 801b0d8:	4904      	ldr	r1, [pc, #16]	@ (801b0ec <HAL_RCC_GetPCLK1Freq+0x28>)
 801b0da:	5ccb      	ldrb	r3, [r1, r3]
 801b0dc:	f003 031f 	and.w	r3, r3, #31
 801b0e0:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 801b0e4:	4618      	mov	r0, r3
 801b0e6:	bd80      	pop	{r7, pc}
 801b0e8:	58024400 	.word	0x58024400
 801b0ec:	080274a4 	.word	0x080274a4

0801b0f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801b0f0:	b580      	push	{r7, lr}
 801b0f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 801b0f4:	f7ff ffb6 	bl	801b064 <HAL_RCC_GetHCLKFreq>
 801b0f8:	4602      	mov	r2, r0
 801b0fa:	4b06      	ldr	r3, [pc, #24]	@ (801b114 <HAL_RCC_GetPCLK2Freq+0x24>)
 801b0fc:	69db      	ldr	r3, [r3, #28]
 801b0fe:	0a1b      	lsrs	r3, r3, #8
 801b100:	f003 0307 	and.w	r3, r3, #7
 801b104:	4904      	ldr	r1, [pc, #16]	@ (801b118 <HAL_RCC_GetPCLK2Freq+0x28>)
 801b106:	5ccb      	ldrb	r3, [r1, r3]
 801b108:	f003 031f 	and.w	r3, r3, #31
 801b10c:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 801b110:	4618      	mov	r0, r3
 801b112:	bd80      	pop	{r7, pc}
 801b114:	58024400 	.word	0x58024400
 801b118:	080274a4 	.word	0x080274a4

0801b11c <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801b11c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801b120:	b0cc      	sub	sp, #304	@ 0x130
 801b122:	af00      	add	r7, sp, #0
 801b124:	f8c7 011c 	str.w	r0, [r7, #284]	@ 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 801b128:	2300      	movs	r3, #0
 801b12a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 801b12e:	2300      	movs	r3, #0
 801b130:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 801b134:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b138:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b13c:	f002 6400 	and.w	r4, r2, #134217728	@ 0x8000000
 801b140:	2500      	movs	r5, #0
 801b142:	ea54 0305 	orrs.w	r3, r4, r5
 801b146:	d049      	beq.n	801b1dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 801b148:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b14c:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b14e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801b152:	d02f      	beq.n	801b1b4 <HAL_RCCEx_PeriphCLKConfig+0x98>
 801b154:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801b158:	d828      	bhi.n	801b1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 801b15a:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b15e:	d01a      	beq.n	801b196 <HAL_RCCEx_PeriphCLKConfig+0x7a>
 801b160:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b164:	d822      	bhi.n	801b1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
 801b166:	2b00      	cmp	r3, #0
 801b168:	d003      	beq.n	801b172 <HAL_RCCEx_PeriphCLKConfig+0x56>
 801b16a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801b16e:	d007      	beq.n	801b180 <HAL_RCCEx_PeriphCLKConfig+0x64>
 801b170:	e01c      	b.n	801b1ac <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b172:	4bb8      	ldr	r3, [pc, #736]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b174:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b176:	4ab7      	ldr	r2, [pc, #732]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b178:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b17c:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b17e:	e01a      	b.n	801b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b180:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b184:	3308      	adds	r3, #8
 801b186:	2102      	movs	r1, #2
 801b188:	4618      	mov	r0, r3
 801b18a:	f002 fd47 	bl	801dc1c <RCCEx_PLL2_Config>
 801b18e:	4603      	mov	r3, r0
 801b190:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b194:	e00f      	b.n	801b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801b196:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b19a:	3328      	adds	r3, #40	@ 0x28
 801b19c:	2102      	movs	r1, #2
 801b19e:	4618      	mov	r0, r3
 801b1a0:	f002 fdee 	bl	801dd80 <RCCEx_PLL3_Config>
 801b1a4:	4603      	mov	r3, r0
 801b1a6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 801b1aa:	e004      	b.n	801b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b1ac:	2301      	movs	r3, #1
 801b1ae:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b1b2:	e000      	b.n	801b1b6 <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 801b1b4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b1b6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b1ba:	2b00      	cmp	r3, #0
 801b1bc:	d10a      	bne.n	801b1d4 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 801b1be:	4ba5      	ldr	r3, [pc, #660]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b1c0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b1c2:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801b1c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b1ca:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801b1cc:	4aa1      	ldr	r2, [pc, #644]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b1ce:	430b      	orrs	r3, r1
 801b1d0:	6513      	str	r3, [r2, #80]	@ 0x50
 801b1d2:	e003      	b.n	801b1dc <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b1d4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b1d8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 801b1dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b1e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b1e4:	f402 7880 	and.w	r8, r2, #256	@ 0x100
 801b1e8:	f04f 0900 	mov.w	r9, #0
 801b1ec:	ea58 0309 	orrs.w	r3, r8, r9
 801b1f0:	d047      	beq.n	801b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 801b1f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b1f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b1f8:	2b04      	cmp	r3, #4
 801b1fa:	d82a      	bhi.n	801b252 <HAL_RCCEx_PeriphCLKConfig+0x136>
 801b1fc:	a201      	add	r2, pc, #4	@ (adr r2, 801b204 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 801b1fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b202:	bf00      	nop
 801b204:	0801b219 	.word	0x0801b219
 801b208:	0801b227 	.word	0x0801b227
 801b20c:	0801b23d 	.word	0x0801b23d
 801b210:	0801b25b 	.word	0x0801b25b
 801b214:	0801b25b 	.word	0x0801b25b
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b218:	4b8e      	ldr	r3, [pc, #568]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b21a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b21c:	4a8d      	ldr	r2, [pc, #564]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b21e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b222:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b224:	e01a      	b.n	801b25c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b226:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b22a:	3308      	adds	r3, #8
 801b22c:	2100      	movs	r1, #0
 801b22e:	4618      	mov	r0, r3
 801b230:	f002 fcf4 	bl	801dc1c <RCCEx_PLL2_Config>
 801b234:	4603      	mov	r3, r0
 801b236:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b23a:	e00f      	b.n	801b25c <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b23c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b240:	3328      	adds	r3, #40	@ 0x28
 801b242:	2100      	movs	r1, #0
 801b244:	4618      	mov	r0, r3
 801b246:	f002 fd9b 	bl	801dd80 <RCCEx_PLL3_Config>
 801b24a:	4603      	mov	r3, r0
 801b24c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b250:	e004      	b.n	801b25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b252:	2301      	movs	r3, #1
 801b254:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b258:	e000      	b.n	801b25c <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 801b25a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b25c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b260:	2b00      	cmp	r3, #0
 801b262:	d10a      	bne.n	801b27a <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 801b264:	4b7b      	ldr	r3, [pc, #492]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b266:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b268:	f023 0107 	bic.w	r1, r3, #7
 801b26c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b270:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801b272:	4a78      	ldr	r2, [pc, #480]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b274:	430b      	orrs	r3, r1
 801b276:	6513      	str	r3, [r2, #80]	@ 0x50
 801b278:	e003      	b.n	801b282 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b27a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b27e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 801b282:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b286:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b28a:	f402 7a00 	and.w	sl, r2, #512	@ 0x200
 801b28e:	f04f 0b00 	mov.w	fp, #0
 801b292:	ea5a 030b 	orrs.w	r3, sl, fp
 801b296:	d04c      	beq.n	801b332 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 801b298:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b29c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b29e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b2a2:	d030      	beq.n	801b306 <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 801b2a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b2a8:	d829      	bhi.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b2aa:	2bc0      	cmp	r3, #192	@ 0xc0
 801b2ac:	d02d      	beq.n	801b30a <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 801b2ae:	2bc0      	cmp	r3, #192	@ 0xc0
 801b2b0:	d825      	bhi.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b2b2:	2b80      	cmp	r3, #128	@ 0x80
 801b2b4:	d018      	beq.n	801b2e8 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 801b2b6:	2b80      	cmp	r3, #128	@ 0x80
 801b2b8:	d821      	bhi.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 801b2ba:	2b00      	cmp	r3, #0
 801b2bc:	d002      	beq.n	801b2c4 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 801b2be:	2b40      	cmp	r3, #64	@ 0x40
 801b2c0:	d007      	beq.n	801b2d2 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 801b2c2:	e01c      	b.n	801b2fe <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b2c4:	4b63      	ldr	r3, [pc, #396]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b2c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b2c8:	4a62      	ldr	r2, [pc, #392]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b2ca:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b2ce:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801b2d0:	e01c      	b.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b2d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b2d6:	3308      	adds	r3, #8
 801b2d8:	2100      	movs	r1, #0
 801b2da:	4618      	mov	r0, r3
 801b2dc:	f002 fc9e 	bl	801dc1c <RCCEx_PLL2_Config>
 801b2e0:	4603      	mov	r3, r0
 801b2e2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801b2e6:	e011      	b.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b2e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b2ec:	3328      	adds	r3, #40	@ 0x28
 801b2ee:	2100      	movs	r1, #0
 801b2f0:	4618      	mov	r0, r3
 801b2f2:	f002 fd45 	bl	801dd80 <RCCEx_PLL3_Config>
 801b2f6:	4603      	mov	r3, r0
 801b2f8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 801b2fc:	e006      	b.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b2fe:	2301      	movs	r3, #1
 801b300:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b304:	e002      	b.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801b306:	bf00      	nop
 801b308:	e000      	b.n	801b30c <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 801b30a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b30c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b310:	2b00      	cmp	r3, #0
 801b312:	d10a      	bne.n	801b32a <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 801b314:	4b4f      	ldr	r3, [pc, #316]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b318:	f423 71e0 	bic.w	r1, r3, #448	@ 0x1c0
 801b31c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b320:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801b322:	4a4c      	ldr	r2, [pc, #304]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b324:	430b      	orrs	r3, r1
 801b326:	6513      	str	r3, [r2, #80]	@ 0x50
 801b328:	e003      	b.n	801b332 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b32a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b32e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 801b332:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b336:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b33a:	f402 6380 	and.w	r3, r2, #1024	@ 0x400
 801b33e:	f8c7 3110 	str.w	r3, [r7, #272]	@ 0x110
 801b342:	2300      	movs	r3, #0
 801b344:	f8c7 3114 	str.w	r3, [r7, #276]	@ 0x114
 801b348:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	@ 0x110
 801b34c:	460b      	mov	r3, r1
 801b34e:	4313      	orrs	r3, r2
 801b350:	d053      	beq.n	801b3fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 801b352:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b356:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801b35a:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801b35e:	d035      	beq.n	801b3cc <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 801b360:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801b364:	d82e      	bhi.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801b366:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801b36a:	d031      	beq.n	801b3d0 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 801b36c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801b370:	d828      	bhi.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801b372:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b376:	d01a      	beq.n	801b3ae <HAL_RCCEx_PeriphCLKConfig+0x292>
 801b378:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801b37c:	d822      	bhi.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 801b37e:	2b00      	cmp	r3, #0
 801b380:	d003      	beq.n	801b38a <HAL_RCCEx_PeriphCLKConfig+0x26e>
 801b382:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801b386:	d007      	beq.n	801b398 <HAL_RCCEx_PeriphCLKConfig+0x27c>
 801b388:	e01c      	b.n	801b3c4 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b38a:	4b32      	ldr	r3, [pc, #200]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b38c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b38e:	4a31      	ldr	r2, [pc, #196]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b390:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b394:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b396:	e01c      	b.n	801b3d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b398:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b39c:	3308      	adds	r3, #8
 801b39e:	2100      	movs	r1, #0
 801b3a0:	4618      	mov	r0, r3
 801b3a2:	f002 fc3b 	bl	801dc1c <RCCEx_PLL2_Config>
 801b3a6:	4603      	mov	r3, r0
 801b3a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801b3ac:	e011      	b.n	801b3d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b3ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b3b2:	3328      	adds	r3, #40	@ 0x28
 801b3b4:	2100      	movs	r1, #0
 801b3b6:	4618      	mov	r0, r3
 801b3b8:	f002 fce2 	bl	801dd80 <RCCEx_PLL3_Config>
 801b3bc:	4603      	mov	r3, r0
 801b3be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b3c2:	e006      	b.n	801b3d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801b3c4:	2301      	movs	r3, #1
 801b3c6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b3ca:	e002      	b.n	801b3d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801b3cc:	bf00      	nop
 801b3ce:	e000      	b.n	801b3d2 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 801b3d0:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b3d2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b3d6:	2b00      	cmp	r3, #0
 801b3d8:	d10b      	bne.n	801b3f2 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 801b3da:	4b1e      	ldr	r3, [pc, #120]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b3dc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b3de:	f423 0160 	bic.w	r1, r3, #14680064	@ 0xe00000
 801b3e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b3e6:	f8d3 30ac 	ldr.w	r3, [r3, #172]	@ 0xac
 801b3ea:	4a1a      	ldr	r2, [pc, #104]	@ (801b454 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 801b3ec:	430b      	orrs	r3, r1
 801b3ee:	6593      	str	r3, [r2, #88]	@ 0x58
 801b3f0:	e003      	b.n	801b3fa <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b3f2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b3f6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 801b3fa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b3fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b402:	f402 6300 	and.w	r3, r2, #2048	@ 0x800
 801b406:	f8c7 3108 	str.w	r3, [r7, #264]	@ 0x108
 801b40a:	2300      	movs	r3, #0
 801b40c:	f8c7 310c 	str.w	r3, [r7, #268]	@ 0x10c
 801b410:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	@ 0x108
 801b414:	460b      	mov	r3, r1
 801b416:	4313      	orrs	r3, r2
 801b418:	d056      	beq.n	801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 801b41a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b41e:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801b422:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b426:	d038      	beq.n	801b49a <HAL_RCCEx_PeriphCLKConfig+0x37e>
 801b428:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b42c:	d831      	bhi.n	801b492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b42e:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801b432:	d034      	beq.n	801b49e <HAL_RCCEx_PeriphCLKConfig+0x382>
 801b434:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801b438:	d82b      	bhi.n	801b492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b43a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801b43e:	d01d      	beq.n	801b47c <HAL_RCCEx_PeriphCLKConfig+0x360>
 801b440:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801b444:	d825      	bhi.n	801b492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b446:	2b00      	cmp	r3, #0
 801b448:	d006      	beq.n	801b458 <HAL_RCCEx_PeriphCLKConfig+0x33c>
 801b44a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801b44e:	d00a      	beq.n	801b466 <HAL_RCCEx_PeriphCLKConfig+0x34a>
 801b450:	e01f      	b.n	801b492 <HAL_RCCEx_PeriphCLKConfig+0x376>
 801b452:	bf00      	nop
 801b454:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b458:	4ba2      	ldr	r3, [pc, #648]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b45a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b45c:	4aa1      	ldr	r2, [pc, #644]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b45e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b462:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b464:	e01c      	b.n	801b4a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b466:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b46a:	3308      	adds	r3, #8
 801b46c:	2100      	movs	r1, #0
 801b46e:	4618      	mov	r0, r3
 801b470:	f002 fbd4 	bl	801dc1c <RCCEx_PLL2_Config>
 801b474:	4603      	mov	r3, r0
 801b476:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 801b47a:	e011      	b.n	801b4a0 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b47c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b480:	3328      	adds	r3, #40	@ 0x28
 801b482:	2100      	movs	r1, #0
 801b484:	4618      	mov	r0, r3
 801b486:	f002 fc7b 	bl	801dd80 <RCCEx_PLL3_Config>
 801b48a:	4603      	mov	r3, r0
 801b48c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 801b490:	e006      	b.n	801b4a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 801b492:	2301      	movs	r3, #1
 801b494:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b498:	e002      	b.n	801b4a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801b49a:	bf00      	nop
 801b49c:	e000      	b.n	801b4a0 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 801b49e:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b4a0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b4a4:	2b00      	cmp	r3, #0
 801b4a6:	d10b      	bne.n	801b4c0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 801b4a8:	4b8e      	ldr	r3, [pc, #568]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b4aa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b4ac:	f023 61e0 	bic.w	r1, r3, #117440512	@ 0x7000000
 801b4b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b4b4:	f8d3 30b0 	ldr.w	r3, [r3, #176]	@ 0xb0
 801b4b8:	4a8a      	ldr	r2, [pc, #552]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b4ba:	430b      	orrs	r3, r1
 801b4bc:	6593      	str	r3, [r2, #88]	@ 0x58
 801b4be:	e003      	b.n	801b4c8 <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b4c0:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b4c4:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 801b4c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b4cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b4d0:	f002 7300 	and.w	r3, r2, #33554432	@ 0x2000000
 801b4d4:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 801b4d8:	2300      	movs	r3, #0
 801b4da:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 801b4de:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	@ 0x100
 801b4e2:	460b      	mov	r3, r1
 801b4e4:	4313      	orrs	r3, r2
 801b4e6:	d03a      	beq.n	801b55e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 801b4e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b4ec:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b4ee:	2b30      	cmp	r3, #48	@ 0x30
 801b4f0:	d01f      	beq.n	801b532 <HAL_RCCEx_PeriphCLKConfig+0x416>
 801b4f2:	2b30      	cmp	r3, #48	@ 0x30
 801b4f4:	d819      	bhi.n	801b52a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801b4f6:	2b20      	cmp	r3, #32
 801b4f8:	d00c      	beq.n	801b514 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 801b4fa:	2b20      	cmp	r3, #32
 801b4fc:	d815      	bhi.n	801b52a <HAL_RCCEx_PeriphCLKConfig+0x40e>
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d019      	beq.n	801b536 <HAL_RCCEx_PeriphCLKConfig+0x41a>
 801b502:	2b10      	cmp	r3, #16
 801b504:	d111      	bne.n	801b52a <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b506:	4b77      	ldr	r3, [pc, #476]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b508:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b50a:	4a76      	ldr	r2, [pc, #472]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b50c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b510:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801b512:	e011      	b.n	801b538 <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b514:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b518:	3308      	adds	r3, #8
 801b51a:	2102      	movs	r1, #2
 801b51c:	4618      	mov	r0, r3
 801b51e:	f002 fb7d 	bl	801dc1c <RCCEx_PLL2_Config>
 801b522:	4603      	mov	r3, r0
 801b524:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 801b528:	e006      	b.n	801b538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801b52a:	2301      	movs	r3, #1
 801b52c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b530:	e002      	b.n	801b538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801b532:	bf00      	nop
 801b534:	e000      	b.n	801b538 <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 801b536:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b538:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b53c:	2b00      	cmp	r3, #0
 801b53e:	d10a      	bne.n	801b556 <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 801b540:	4b68      	ldr	r3, [pc, #416]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b542:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b544:	f023 0130 	bic.w	r1, r3, #48	@ 0x30
 801b548:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b54c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b54e:	4a65      	ldr	r2, [pc, #404]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b550:	430b      	orrs	r3, r1
 801b552:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801b554:	e003      	b.n	801b55e <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b556:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b55a:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 801b55e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b562:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b566:	f402 5380 	and.w	r3, r2, #4096	@ 0x1000
 801b56a:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 801b56e:	2300      	movs	r3, #0
 801b570:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 801b574:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	@ 0xf8
 801b578:	460b      	mov	r3, r1
 801b57a:	4313      	orrs	r3, r2
 801b57c:	d051      	beq.n	801b622 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 801b57e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b584:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b588:	d035      	beq.n	801b5f6 <HAL_RCCEx_PeriphCLKConfig+0x4da>
 801b58a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801b58e:	d82e      	bhi.n	801b5ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801b590:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801b594:	d031      	beq.n	801b5fa <HAL_RCCEx_PeriphCLKConfig+0x4de>
 801b596:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801b59a:	d828      	bhi.n	801b5ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801b59c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b5a0:	d01a      	beq.n	801b5d8 <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 801b5a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801b5a6:	d822      	bhi.n	801b5ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 801b5a8:	2b00      	cmp	r3, #0
 801b5aa:	d003      	beq.n	801b5b4 <HAL_RCCEx_PeriphCLKConfig+0x498>
 801b5ac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801b5b0:	d007      	beq.n	801b5c2 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 801b5b2:	e01c      	b.n	801b5ee <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b5b4:	4b4b      	ldr	r3, [pc, #300]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b5b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b5b8:	4a4a      	ldr	r2, [pc, #296]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b5ba:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b5be:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801b5c0:	e01c      	b.n	801b5fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801b5c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b5c6:	3308      	adds	r3, #8
 801b5c8:	2100      	movs	r1, #0
 801b5ca:	4618      	mov	r0, r3
 801b5cc:	f002 fb26 	bl	801dc1c <RCCEx_PLL2_Config>
 801b5d0:	4603      	mov	r3, r0
 801b5d2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801b5d6:	e011      	b.n	801b5fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801b5d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b5dc:	3328      	adds	r3, #40	@ 0x28
 801b5de:	2100      	movs	r1, #0
 801b5e0:	4618      	mov	r0, r3
 801b5e2:	f002 fbcd 	bl	801dd80 <RCCEx_PLL3_Config>
 801b5e6:	4603      	mov	r3, r0
 801b5e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 801b5ec:	e006      	b.n	801b5fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b5ee:	2301      	movs	r3, #1
 801b5f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b5f4:	e002      	b.n	801b5fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801b5f6:	bf00      	nop
 801b5f8:	e000      	b.n	801b5fc <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 801b5fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b5fc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b600:	2b00      	cmp	r3, #0
 801b602:	d10a      	bne.n	801b61a <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 801b604:	4b37      	ldr	r3, [pc, #220]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b608:	f423 41e0 	bic.w	r1, r3, #28672	@ 0x7000
 801b60c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b610:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b612:	4a34      	ldr	r2, [pc, #208]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b614:	430b      	orrs	r3, r1
 801b616:	6513      	str	r3, [r2, #80]	@ 0x50
 801b618:	e003      	b.n	801b622 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b61a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b61e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 801b622:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b626:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b62a:	f402 5300 	and.w	r3, r2, #8192	@ 0x2000
 801b62e:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 801b632:	2300      	movs	r3, #0
 801b634:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 801b638:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	@ 0xf0
 801b63c:	460b      	mov	r3, r1
 801b63e:	4313      	orrs	r3, r2
 801b640:	d056      	beq.n	801b6f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 801b642:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b646:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b648:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b64c:	d033      	beq.n	801b6b6 <HAL_RCCEx_PeriphCLKConfig+0x59a>
 801b64e:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801b652:	d82c      	bhi.n	801b6ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b654:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801b658:	d02f      	beq.n	801b6ba <HAL_RCCEx_PeriphCLKConfig+0x59e>
 801b65a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801b65e:	d826      	bhi.n	801b6ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b660:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801b664:	d02b      	beq.n	801b6be <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 801b666:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801b66a:	d820      	bhi.n	801b6ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b66c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801b670:	d012      	beq.n	801b698 <HAL_RCCEx_PeriphCLKConfig+0x57c>
 801b672:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801b676:	d81a      	bhi.n	801b6ae <HAL_RCCEx_PeriphCLKConfig+0x592>
 801b678:	2b00      	cmp	r3, #0
 801b67a:	d022      	beq.n	801b6c2 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 801b67c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801b680:	d115      	bne.n	801b6ae <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b682:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b686:	3308      	adds	r3, #8
 801b688:	2101      	movs	r1, #1
 801b68a:	4618      	mov	r0, r3
 801b68c:	f002 fac6 	bl	801dc1c <RCCEx_PLL2_Config>
 801b690:	4603      	mov	r3, r0
 801b692:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801b696:	e015      	b.n	801b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801b698:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b69c:	3328      	adds	r3, #40	@ 0x28
 801b69e:	2101      	movs	r1, #1
 801b6a0:	4618      	mov	r0, r3
 801b6a2:	f002 fb6d 	bl	801dd80 <RCCEx_PLL3_Config>
 801b6a6:	4603      	mov	r3, r0
 801b6a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 801b6ac:	e00a      	b.n	801b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b6ae:	2301      	movs	r3, #1
 801b6b0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b6b4:	e006      	b.n	801b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b6b6:	bf00      	nop
 801b6b8:	e004      	b.n	801b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b6ba:	bf00      	nop
 801b6bc:	e002      	b.n	801b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b6be:	bf00      	nop
 801b6c0:	e000      	b.n	801b6c4 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 801b6c2:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b6c4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b6c8:	2b00      	cmp	r3, #0
 801b6ca:	d10d      	bne.n	801b6e8 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 801b6cc:	4b05      	ldr	r3, [pc, #20]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b6ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b6d0:	f423 21e0 	bic.w	r1, r3, #458752	@ 0x70000
 801b6d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b6d8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 801b6da:	4a02      	ldr	r2, [pc, #8]	@ (801b6e4 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 801b6dc:	430b      	orrs	r3, r1
 801b6de:	6513      	str	r3, [r2, #80]	@ 0x50
 801b6e0:	e006      	b.n	801b6f0 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 801b6e2:	bf00      	nop
 801b6e4:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b6e8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b6ec:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 801b6f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b6f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b6f8:	f402 4380 	and.w	r3, r2, #16384	@ 0x4000
 801b6fc:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 801b700:	2300      	movs	r3, #0
 801b702:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 801b706:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	@ 0xe8
 801b70a:	460b      	mov	r3, r1
 801b70c:	4313      	orrs	r3, r2
 801b70e:	d055      	beq.n	801b7bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 801b710:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b714:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b718:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b71c:	d033      	beq.n	801b786 <HAL_RCCEx_PeriphCLKConfig+0x66a>
 801b71e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801b722:	d82c      	bhi.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b724:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b728:	d02f      	beq.n	801b78a <HAL_RCCEx_PeriphCLKConfig+0x66e>
 801b72a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b72e:	d826      	bhi.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b730:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801b734:	d02b      	beq.n	801b78e <HAL_RCCEx_PeriphCLKConfig+0x672>
 801b736:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801b73a:	d820      	bhi.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b73c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b740:	d012      	beq.n	801b768 <HAL_RCCEx_PeriphCLKConfig+0x64c>
 801b742:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b746:	d81a      	bhi.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x662>
 801b748:	2b00      	cmp	r3, #0
 801b74a:	d022      	beq.n	801b792 <HAL_RCCEx_PeriphCLKConfig+0x676>
 801b74c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b750:	d115      	bne.n	801b77e <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b752:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b756:	3308      	adds	r3, #8
 801b758:	2101      	movs	r1, #1
 801b75a:	4618      	mov	r0, r3
 801b75c:	f002 fa5e 	bl	801dc1c <RCCEx_PLL2_Config>
 801b760:	4603      	mov	r3, r0
 801b762:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801b766:	e015      	b.n	801b794 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801b768:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b76c:	3328      	adds	r3, #40	@ 0x28
 801b76e:	2101      	movs	r1, #1
 801b770:	4618      	mov	r0, r3
 801b772:	f002 fb05 	bl	801dd80 <RCCEx_PLL3_Config>
 801b776:	4603      	mov	r3, r0
 801b778:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 801b77c:	e00a      	b.n	801b794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 801b77e:	2301      	movs	r3, #1
 801b780:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b784:	e006      	b.n	801b794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b786:	bf00      	nop
 801b788:	e004      	b.n	801b794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b78a:	bf00      	nop
 801b78c:	e002      	b.n	801b794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b78e:	bf00      	nop
 801b790:	e000      	b.n	801b794 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 801b792:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b794:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b798:	2b00      	cmp	r3, #0
 801b79a:	d10b      	bne.n	801b7b4 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 801b79c:	4bb6      	ldr	r3, [pc, #728]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b79e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801b7a0:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801b7a4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b7a8:	f8d3 30b4 	ldr.w	r3, [r3, #180]	@ 0xb4
 801b7ac:	4ab2      	ldr	r2, [pc, #712]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b7ae:	430b      	orrs	r3, r1
 801b7b0:	6593      	str	r3, [r2, #88]	@ 0x58
 801b7b2:	e003      	b.n	801b7bc <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b7b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b7b8:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 801b7bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b7c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b7c4:	f002 6380 	and.w	r3, r2, #67108864	@ 0x4000000
 801b7c8:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 801b7cc:	2300      	movs	r3, #0
 801b7ce:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 801b7d2:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	@ 0xe0
 801b7d6:	460b      	mov	r3, r1
 801b7d8:	4313      	orrs	r3, r2
 801b7da:	d02a      	beq.n	801b832 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 801b7dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b7e0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b7e2:	2b00      	cmp	r3, #0
 801b7e4:	d011      	beq.n	801b80a <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 801b7e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801b7ea:	d10a      	bne.n	801b802 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b7ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b7f0:	3308      	adds	r3, #8
 801b7f2:	2101      	movs	r1, #1
 801b7f4:	4618      	mov	r0, r3
 801b7f6:	f002 fa11 	bl	801dc1c <RCCEx_PLL2_Config>
 801b7fa:	4603      	mov	r3, r0
 801b7fc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 801b800:	e004      	b.n	801b80c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b802:	2301      	movs	r3, #1
 801b804:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b808:	e000      	b.n	801b80c <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 801b80a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b80c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b810:	2b00      	cmp	r3, #0
 801b812:	d10a      	bne.n	801b82a <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 801b814:	4b98      	ldr	r3, [pc, #608]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b816:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b818:	f423 7180 	bic.w	r1, r3, #256	@ 0x100
 801b81c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b820:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b822:	4a95      	ldr	r2, [pc, #596]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b824:	430b      	orrs	r3, r1
 801b826:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801b828:	e003      	b.n	801b832 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b82a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b82e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 801b832:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b836:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b83a:	f402 4300 	and.w	r3, r2, #32768	@ 0x8000
 801b83e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 801b842:	2300      	movs	r3, #0
 801b844:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 801b848:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 801b84c:	460b      	mov	r3, r1
 801b84e:	4313      	orrs	r3, r2
 801b850:	d037      	beq.n	801b8c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 801b852:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b856:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b858:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b85c:	d00e      	beq.n	801b87c <HAL_RCCEx_PeriphCLKConfig+0x760>
 801b85e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b862:	d816      	bhi.n	801b892 <HAL_RCCEx_PeriphCLKConfig+0x776>
 801b864:	2b00      	cmp	r3, #0
 801b866:	d018      	beq.n	801b89a <HAL_RCCEx_PeriphCLKConfig+0x77e>
 801b868:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801b86c:	d111      	bne.n	801b892 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b86e:	4b82      	ldr	r3, [pc, #520]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b870:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b872:	4a81      	ldr	r2, [pc, #516]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b874:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b878:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801b87a:	e00f      	b.n	801b89c <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801b87c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b880:	3308      	adds	r3, #8
 801b882:	2101      	movs	r1, #1
 801b884:	4618      	mov	r0, r3
 801b886:	f002 f9c9 	bl	801dc1c <RCCEx_PLL2_Config>
 801b88a:	4603      	mov	r3, r0
 801b88c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 801b890:	e004      	b.n	801b89c <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801b892:	2301      	movs	r3, #1
 801b894:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b898:	e000      	b.n	801b89c <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 801b89a:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b89c:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b8a0:	2b00      	cmp	r3, #0
 801b8a2:	d10a      	bne.n	801b8ba <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 801b8a4:	4b74      	ldr	r3, [pc, #464]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b8a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801b8a8:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801b8ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b8b0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801b8b2:	4a71      	ldr	r2, [pc, #452]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b8b4:	430b      	orrs	r3, r1
 801b8b6:	6513      	str	r3, [r2, #80]	@ 0x50
 801b8b8:	e003      	b.n	801b8c2 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b8ba:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b8be:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 801b8c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b8c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b8ca:	f002 7380 	and.w	r3, r2, #16777216	@ 0x1000000
 801b8ce:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 801b8d2:	2300      	movs	r3, #0
 801b8d4:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 801b8d8:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	@ 0xd0
 801b8dc:	460b      	mov	r3, r1
 801b8de:	4313      	orrs	r3, r2
 801b8e0:	d03a      	beq.n	801b958 <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 801b8e2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b8e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b8e8:	2b03      	cmp	r3, #3
 801b8ea:	d81d      	bhi.n	801b928 <HAL_RCCEx_PeriphCLKConfig+0x80c>
 801b8ec:	a201      	add	r2, pc, #4	@ (adr r2, 801b8f4 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 801b8ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801b8f2:	bf00      	nop
 801b8f4:	0801b931 	.word	0x0801b931
 801b8f8:	0801b905 	.word	0x0801b905
 801b8fc:	0801b913 	.word	0x0801b913
 801b900:	0801b931 	.word	0x0801b931
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801b904:	4b5c      	ldr	r3, [pc, #368]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b906:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b908:	4a5b      	ldr	r2, [pc, #364]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b90a:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801b90e:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 801b910:	e00f      	b.n	801b932 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801b912:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b916:	3308      	adds	r3, #8
 801b918:	2102      	movs	r1, #2
 801b91a:	4618      	mov	r0, r3
 801b91c:	f002 f97e 	bl	801dc1c <RCCEx_PLL2_Config>
 801b920:	4603      	mov	r3, r0
 801b922:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 801b926:	e004      	b.n	801b932 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 801b928:	2301      	movs	r3, #1
 801b92a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b92e:	e000      	b.n	801b932 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 801b930:	bf00      	nop
    }

    if (ret == HAL_OK)
 801b932:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b936:	2b00      	cmp	r3, #0
 801b938:	d10a      	bne.n	801b950 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 801b93a:	4b4f      	ldr	r3, [pc, #316]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b93c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801b93e:	f023 0103 	bic.w	r1, r3, #3
 801b942:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b946:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801b948:	4a4b      	ldr	r2, [pc, #300]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b94a:	430b      	orrs	r3, r1
 801b94c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801b94e:	e003      	b.n	801b958 <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801b950:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b954:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801b958:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b95c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801b960:	f402 0380 	and.w	r3, r2, #4194304	@ 0x400000
 801b964:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801b968:	2300      	movs	r3, #0
 801b96a:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 801b96e:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	@ 0xc8
 801b972:	460b      	mov	r3, r1
 801b974:	4313      	orrs	r3, r2
 801b976:	f000 80a0 	beq.w	801baba <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 801b97a:	4b40      	ldr	r3, [pc, #256]	@ (801ba7c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 801b97c:	681b      	ldr	r3, [r3, #0]
 801b97e:	4a3f      	ldr	r2, [pc, #252]	@ (801ba7c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 801b980:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801b984:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 801b986:	f7f6 fbf9 	bl	801217c <HAL_GetTick>
 801b98a:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b98e:	e00b      	b.n	801b9a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 801b990:	f7f6 fbf4 	bl	801217c <HAL_GetTick>
 801b994:	4602      	mov	r2, r0
 801b996:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801b99a:	1ad3      	subs	r3, r2, r3
 801b99c:	2b64      	cmp	r3, #100	@ 0x64
 801b99e:	d903      	bls.n	801b9a8 <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 801b9a0:	2303      	movs	r3, #3
 801b9a2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801b9a6:	e005      	b.n	801b9b4 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 801b9a8:	4b34      	ldr	r3, [pc, #208]	@ (801ba7c <HAL_RCCEx_PeriphCLKConfig+0x960>)
 801b9aa:	681b      	ldr	r3, [r3, #0]
 801b9ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801b9b0:	2b00      	cmp	r3, #0
 801b9b2:	d0ed      	beq.n	801b990 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 801b9b4:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801b9b8:	2b00      	cmp	r3, #0
 801b9ba:	d17a      	bne.n	801bab2 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 801b9bc:	4b2e      	ldr	r3, [pc, #184]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9be:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 801b9c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801b9c4:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801b9c8:	4053      	eors	r3, r2
 801b9ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d015      	beq.n	801b9fe <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 801b9d2:	4b29      	ldr	r3, [pc, #164]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9d4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b9d6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 801b9da:	f8c7 3124 	str.w	r3, [r7, #292]	@ 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 801b9de:	4b26      	ldr	r3, [pc, #152]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b9e2:	4a25      	ldr	r2, [pc, #148]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801b9e8:	6713      	str	r3, [r2, #112]	@ 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 801b9ea:	4b23      	ldr	r3, [pc, #140]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801b9ee:	4a22      	ldr	r2, [pc, #136]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9f0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 801b9f4:	6713      	str	r3, [r2, #112]	@ 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 801b9f6:	4a20      	ldr	r2, [pc, #128]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801b9f8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 801b9fc:	6713      	str	r3, [r2, #112]	@ 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 801b9fe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ba02:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ba06:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ba0a:	d118      	bne.n	801ba3e <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801ba0c:	f7f6 fbb6 	bl	801217c <HAL_GetTick>
 801ba10:	f8c7 0128 	str.w	r0, [r7, #296]	@ 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ba14:	e00d      	b.n	801ba32 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 801ba16:	f7f6 fbb1 	bl	801217c <HAL_GetTick>
 801ba1a:	4602      	mov	r2, r0
 801ba1c:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 801ba20:	1ad2      	subs	r2, r2, r3
 801ba22:	f241 3388 	movw	r3, #5000	@ 0x1388
 801ba26:	429a      	cmp	r2, r3
 801ba28:	d903      	bls.n	801ba32 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 801ba2a:	2303      	movs	r3, #3
 801ba2c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
            break;
 801ba30:	e005      	b.n	801ba3e <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801ba32:	4b11      	ldr	r3, [pc, #68]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801ba34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801ba36:	f003 0302 	and.w	r3, r3, #2
 801ba3a:	2b00      	cmp	r3, #0
 801ba3c:	d0eb      	beq.n	801ba16 <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 801ba3e:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d130      	bne.n	801baa8 <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 801ba46:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ba4a:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ba4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801ba52:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801ba56:	d115      	bne.n	801ba84 <HAL_RCCEx_PeriphCLKConfig+0x968>
 801ba58:	4b07      	ldr	r3, [pc, #28]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801ba5a:	691b      	ldr	r3, [r3, #16]
 801ba5c:	f423 517c 	bic.w	r1, r3, #16128	@ 0x3f00
 801ba60:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ba64:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ba68:	091a      	lsrs	r2, r3, #4
 801ba6a:	4b05      	ldr	r3, [pc, #20]	@ (801ba80 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 801ba6c:	4013      	ands	r3, r2
 801ba6e:	4a02      	ldr	r2, [pc, #8]	@ (801ba78 <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 801ba70:	430b      	orrs	r3, r1
 801ba72:	6113      	str	r3, [r2, #16]
 801ba74:	e00c      	b.n	801ba90 <HAL_RCCEx_PeriphCLKConfig+0x974>
 801ba76:	bf00      	nop
 801ba78:	58024400 	.word	0x58024400
 801ba7c:	58024800 	.word	0x58024800
 801ba80:	00ffffcf 	.word	0x00ffffcf
 801ba84:	4bd4      	ldr	r3, [pc, #848]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801ba86:	691b      	ldr	r3, [r3, #16]
 801ba88:	4ad3      	ldr	r2, [pc, #844]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801ba8a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801ba8e:	6113      	str	r3, [r2, #16]
 801ba90:	4bd1      	ldr	r3, [pc, #836]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801ba92:	6f19      	ldr	r1, [r3, #112]	@ 0x70
 801ba94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801ba98:	f8d3 30b8 	ldr.w	r3, [r3, #184]	@ 0xb8
 801ba9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 801baa0:	4acd      	ldr	r2, [pc, #820]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801baa2:	430b      	orrs	r3, r1
 801baa4:	6713      	str	r3, [r2, #112]	@ 0x70
 801baa6:	e008      	b.n	801baba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 801baa8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801baac:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
 801bab0:	e003      	b.n	801baba <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bab2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bab6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 801baba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801babe:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bac2:	f002 0301 	and.w	r3, r2, #1
 801bac6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 801baca:	2300      	movs	r3, #0
 801bacc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 801bad0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 801bad4:	460b      	mov	r3, r1
 801bad6:	4313      	orrs	r3, r2
 801bad8:	f000 808b 	beq.w	801bbf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 801badc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bae0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801bae4:	2b28      	cmp	r3, #40	@ 0x28
 801bae6:	d86b      	bhi.n	801bbc0 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 801bae8:	a201      	add	r2, pc, #4	@ (adr r2, 801baf0 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 801baea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801baee:	bf00      	nop
 801baf0:	0801bbc9 	.word	0x0801bbc9
 801baf4:	0801bbc1 	.word	0x0801bbc1
 801baf8:	0801bbc1 	.word	0x0801bbc1
 801bafc:	0801bbc1 	.word	0x0801bbc1
 801bb00:	0801bbc1 	.word	0x0801bbc1
 801bb04:	0801bbc1 	.word	0x0801bbc1
 801bb08:	0801bbc1 	.word	0x0801bbc1
 801bb0c:	0801bbc1 	.word	0x0801bbc1
 801bb10:	0801bb95 	.word	0x0801bb95
 801bb14:	0801bbc1 	.word	0x0801bbc1
 801bb18:	0801bbc1 	.word	0x0801bbc1
 801bb1c:	0801bbc1 	.word	0x0801bbc1
 801bb20:	0801bbc1 	.word	0x0801bbc1
 801bb24:	0801bbc1 	.word	0x0801bbc1
 801bb28:	0801bbc1 	.word	0x0801bbc1
 801bb2c:	0801bbc1 	.word	0x0801bbc1
 801bb30:	0801bbab 	.word	0x0801bbab
 801bb34:	0801bbc1 	.word	0x0801bbc1
 801bb38:	0801bbc1 	.word	0x0801bbc1
 801bb3c:	0801bbc1 	.word	0x0801bbc1
 801bb40:	0801bbc1 	.word	0x0801bbc1
 801bb44:	0801bbc1 	.word	0x0801bbc1
 801bb48:	0801bbc1 	.word	0x0801bbc1
 801bb4c:	0801bbc1 	.word	0x0801bbc1
 801bb50:	0801bbc9 	.word	0x0801bbc9
 801bb54:	0801bbc1 	.word	0x0801bbc1
 801bb58:	0801bbc1 	.word	0x0801bbc1
 801bb5c:	0801bbc1 	.word	0x0801bbc1
 801bb60:	0801bbc1 	.word	0x0801bbc1
 801bb64:	0801bbc1 	.word	0x0801bbc1
 801bb68:	0801bbc1 	.word	0x0801bbc1
 801bb6c:	0801bbc1 	.word	0x0801bbc1
 801bb70:	0801bbc9 	.word	0x0801bbc9
 801bb74:	0801bbc1 	.word	0x0801bbc1
 801bb78:	0801bbc1 	.word	0x0801bbc1
 801bb7c:	0801bbc1 	.word	0x0801bbc1
 801bb80:	0801bbc1 	.word	0x0801bbc1
 801bb84:	0801bbc1 	.word	0x0801bbc1
 801bb88:	0801bbc1 	.word	0x0801bbc1
 801bb8c:	0801bbc1 	.word	0x0801bbc1
 801bb90:	0801bbc9 	.word	0x0801bbc9
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bb94:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bb98:	3308      	adds	r3, #8
 801bb9a:	2101      	movs	r1, #1
 801bb9c:	4618      	mov	r0, r3
 801bb9e:	f002 f83d 	bl	801dc1c <RCCEx_PLL2_Config>
 801bba2:	4603      	mov	r3, r0
 801bba4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801bba8:	e00f      	b.n	801bbca <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bbaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bbae:	3328      	adds	r3, #40	@ 0x28
 801bbb0:	2101      	movs	r1, #1
 801bbb2:	4618      	mov	r0, r3
 801bbb4:	f002 f8e4 	bl	801dd80 <RCCEx_PLL3_Config>
 801bbb8:	4603      	mov	r3, r0
 801bbba:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 801bbbe:	e004      	b.n	801bbca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bbc0:	2301      	movs	r3, #1
 801bbc2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801bbc6:	e000      	b.n	801bbca <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 801bbc8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bbca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bbce:	2b00      	cmp	r3, #0
 801bbd0:	d10b      	bne.n	801bbea <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 801bbd2:	4b81      	ldr	r3, [pc, #516]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801bbd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bbd6:	f023 0138 	bic.w	r1, r3, #56	@ 0x38
 801bbda:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bbde:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801bbe2:	4a7d      	ldr	r2, [pc, #500]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801bbe4:	430b      	orrs	r3, r1
 801bbe6:	6553      	str	r3, [r2, #84]	@ 0x54
 801bbe8:	e003      	b.n	801bbf2 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bbea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bbee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 801bbf2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bbf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bbfa:	f002 0302 	and.w	r3, r2, #2
 801bbfe:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 801bc02:	2300      	movs	r3, #0
 801bc04:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 801bc08:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	@ 0xb8
 801bc0c:	460b      	mov	r3, r1
 801bc0e:	4313      	orrs	r3, r2
 801bc10:	d042      	beq.n	801bc98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 801bc12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bc16:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bc18:	2b05      	cmp	r3, #5
 801bc1a:	d825      	bhi.n	801bc68 <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 801bc1c:	a201      	add	r2, pc, #4	@ (adr r2, 801bc24 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 801bc1e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bc22:	bf00      	nop
 801bc24:	0801bc71 	.word	0x0801bc71
 801bc28:	0801bc3d 	.word	0x0801bc3d
 801bc2c:	0801bc53 	.word	0x0801bc53
 801bc30:	0801bc71 	.word	0x0801bc71
 801bc34:	0801bc71 	.word	0x0801bc71
 801bc38:	0801bc71 	.word	0x0801bc71
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bc3c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bc40:	3308      	adds	r3, #8
 801bc42:	2101      	movs	r1, #1
 801bc44:	4618      	mov	r0, r3
 801bc46:	f001 ffe9 	bl	801dc1c <RCCEx_PLL2_Config>
 801bc4a:	4603      	mov	r3, r0
 801bc4c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801bc50:	e00f      	b.n	801bc72 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bc52:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bc56:	3328      	adds	r3, #40	@ 0x28
 801bc58:	2101      	movs	r1, #1
 801bc5a:	4618      	mov	r0, r3
 801bc5c:	f002 f890 	bl	801dd80 <RCCEx_PLL3_Config>
 801bc60:	4603      	mov	r3, r0
 801bc62:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 801bc66:	e004      	b.n	801bc72 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bc68:	2301      	movs	r3, #1
 801bc6a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801bc6e:	e000      	b.n	801bc72 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 801bc70:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bc72:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bc76:	2b00      	cmp	r3, #0
 801bc78:	d10a      	bne.n	801bc90 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 801bc7a:	4b57      	ldr	r3, [pc, #348]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801bc7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bc7e:	f023 0107 	bic.w	r1, r3, #7
 801bc82:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bc86:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801bc88:	4a53      	ldr	r2, [pc, #332]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801bc8a:	430b      	orrs	r3, r1
 801bc8c:	6553      	str	r3, [r2, #84]	@ 0x54
 801bc8e:	e003      	b.n	801bc98 <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bc90:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bc94:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 801bc98:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bc9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bca0:	f002 0304 	and.w	r3, r2, #4
 801bca4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 801bca8:	2300      	movs	r3, #0
 801bcaa:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801bcae:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	@ 0xb0
 801bcb2:	460b      	mov	r3, r1
 801bcb4:	4313      	orrs	r3, r2
 801bcb6:	d044      	beq.n	801bd42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 801bcb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bcbc:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801bcc0:	2b05      	cmp	r3, #5
 801bcc2:	d825      	bhi.n	801bd10 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 801bcc4:	a201      	add	r2, pc, #4	@ (adr r2, 801bccc <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 801bcc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801bcca:	bf00      	nop
 801bccc:	0801bd19 	.word	0x0801bd19
 801bcd0:	0801bce5 	.word	0x0801bce5
 801bcd4:	0801bcfb 	.word	0x0801bcfb
 801bcd8:	0801bd19 	.word	0x0801bd19
 801bcdc:	0801bd19 	.word	0x0801bd19
 801bce0:	0801bd19 	.word	0x0801bd19
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801bce4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bce8:	3308      	adds	r3, #8
 801bcea:	2101      	movs	r1, #1
 801bcec:	4618      	mov	r0, r3
 801bcee:	f001 ff95 	bl	801dc1c <RCCEx_PLL2_Config>
 801bcf2:	4603      	mov	r3, r0
 801bcf4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801bcf8:	e00f      	b.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801bcfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bcfe:	3328      	adds	r3, #40	@ 0x28
 801bd00:	2101      	movs	r1, #1
 801bd02:	4618      	mov	r0, r3
 801bd04:	f002 f83c 	bl	801dd80 <RCCEx_PLL3_Config>
 801bd08:	4603      	mov	r3, r0
 801bd0a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 801bd0e:	e004      	b.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bd10:	2301      	movs	r3, #1
 801bd12:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801bd16:	e000      	b.n	801bd1a <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 801bd18:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bd1a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bd1e:	2b00      	cmp	r3, #0
 801bd20:	d10b      	bne.n	801bd3a <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 801bd22:	4b2d      	ldr	r3, [pc, #180]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801bd24:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bd26:	f023 0107 	bic.w	r1, r3, #7
 801bd2a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bd2e:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801bd32:	4a29      	ldr	r2, [pc, #164]	@ (801bdd8 <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 801bd34:	430b      	orrs	r3, r1
 801bd36:	6593      	str	r3, [r2, #88]	@ 0x58
 801bd38:	e003      	b.n	801bd42 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bd3a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bd3e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 801bd42:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bd4a:	f002 0320 	and.w	r3, r2, #32
 801bd4e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 801bd52:	2300      	movs	r3, #0
 801bd54:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 801bd58:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 801bd5c:	460b      	mov	r3, r1
 801bd5e:	4313      	orrs	r3, r2
 801bd60:	d057      	beq.n	801be12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 801bd62:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bd66:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801bd6a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801bd6e:	d035      	beq.n	801bddc <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 801bd70:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801bd74:	d82c      	bhi.n	801bdd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801bd76:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bd7a:	d031      	beq.n	801bde0 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 801bd7c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801bd80:	d826      	bhi.n	801bdd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801bd82:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801bd86:	d02d      	beq.n	801bde4 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 801bd88:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801bd8c:	d820      	bhi.n	801bdd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801bd8e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801bd92:	d012      	beq.n	801bdba <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 801bd94:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801bd98:	d81a      	bhi.n	801bdd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 801bd9a:	2b00      	cmp	r3, #0
 801bd9c:	d024      	beq.n	801bde8 <HAL_RCCEx_PeriphCLKConfig+0xccc>
 801bd9e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801bda2:	d115      	bne.n	801bdd0 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bda4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bda8:	3308      	adds	r3, #8
 801bdaa:	2100      	movs	r1, #0
 801bdac:	4618      	mov	r0, r3
 801bdae:	f001 ff35 	bl	801dc1c <RCCEx_PLL2_Config>
 801bdb2:	4603      	mov	r3, r0
 801bdb4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801bdb8:	e017      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bdba:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bdbe:	3328      	adds	r3, #40	@ 0x28
 801bdc0:	2102      	movs	r1, #2
 801bdc2:	4618      	mov	r0, r3
 801bdc4:	f001 ffdc 	bl	801dd80 <RCCEx_PLL3_Config>
 801bdc8:	4603      	mov	r3, r0
 801bdca:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 801bdce:	e00c      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bdd0:	2301      	movs	r3, #1
 801bdd2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801bdd6:	e008      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xcce>
 801bdd8:	58024400 	.word	0x58024400
        break;
 801bddc:	bf00      	nop
 801bdde:	e004      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 801bde0:	bf00      	nop
 801bde2:	e002      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 801bde4:	bf00      	nop
 801bde6:	e000      	b.n	801bdea <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 801bde8:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bdea:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bdee:	2b00      	cmp	r3, #0
 801bdf0:	d10b      	bne.n	801be0a <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 801bdf2:	4bc2      	ldr	r3, [pc, #776]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801bdf4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bdf6:	f023 41e0 	bic.w	r1, r3, #1879048192	@ 0x70000000
 801bdfa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bdfe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801be02:	4abe      	ldr	r2, [pc, #760]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801be04:	430b      	orrs	r3, r1
 801be06:	6553      	str	r3, [r2, #84]	@ 0x54
 801be08:	e003      	b.n	801be12 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801be0a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801be0e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 801be12:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801be16:	e9d3 2300 	ldrd	r2, r3, [r3]
 801be1a:	f002 0340 	and.w	r3, r2, #64	@ 0x40
 801be1e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 801be22:	2300      	movs	r3, #0
 801be24:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 801be28:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	@ 0xa0
 801be2c:	460b      	mov	r3, r1
 801be2e:	4313      	orrs	r3, r2
 801be30:	d055      	beq.n	801bede <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 801be32:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801be36:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801be3a:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801be3e:	d033      	beq.n	801bea8 <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 801be40:	f5b3 5fa0 	cmp.w	r3, #5120	@ 0x1400
 801be44:	d82c      	bhi.n	801bea0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801be46:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801be4a:	d02f      	beq.n	801beac <HAL_RCCEx_PeriphCLKConfig+0xd90>
 801be4c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801be50:	d826      	bhi.n	801bea0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801be52:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801be56:	d02b      	beq.n	801beb0 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 801be58:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801be5c:	d820      	bhi.n	801bea0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801be5e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801be62:	d012      	beq.n	801be8a <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 801be64:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801be68:	d81a      	bhi.n	801bea0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	d022      	beq.n	801beb4 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 801be6e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801be72:	d115      	bne.n	801bea0 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801be74:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801be78:	3308      	adds	r3, #8
 801be7a:	2100      	movs	r1, #0
 801be7c:	4618      	mov	r0, r3
 801be7e:	f001 fecd 	bl	801dc1c <RCCEx_PLL2_Config>
 801be82:	4603      	mov	r3, r0
 801be84:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801be88:	e015      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801be8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801be8e:	3328      	adds	r3, #40	@ 0x28
 801be90:	2102      	movs	r1, #2
 801be92:	4618      	mov	r0, r3
 801be94:	f001 ff74 	bl	801dd80 <RCCEx_PLL3_Config>
 801be98:	4603      	mov	r3, r0
 801be9a:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 801be9e:	e00a      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bea0:	2301      	movs	r3, #1
 801bea2:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801bea6:	e006      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 801bea8:	bf00      	nop
 801beaa:	e004      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 801beac:	bf00      	nop
 801beae:	e002      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 801beb0:	bf00      	nop
 801beb2:	e000      	b.n	801beb6 <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 801beb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801beb6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801beba:	2b00      	cmp	r3, #0
 801bebc:	d10b      	bne.n	801bed6 <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 801bebe:	4b8f      	ldr	r3, [pc, #572]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801bec0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bec2:	f423 51e0 	bic.w	r1, r3, #7168	@ 0x1c00
 801bec6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801beca:	f8d3 30a0 	ldr.w	r3, [r3, #160]	@ 0xa0
 801bece:	4a8b      	ldr	r2, [pc, #556]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801bed0:	430b      	orrs	r3, r1
 801bed2:	6593      	str	r3, [r2, #88]	@ 0x58
 801bed4:	e003      	b.n	801bede <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bed6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801beda:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 801bede:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bee6:	f002 0380 	and.w	r3, r2, #128	@ 0x80
 801beea:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801beee:	2300      	movs	r3, #0
 801bef0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801bef4:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	@ 0x98
 801bef8:	460b      	mov	r3, r1
 801befa:	4313      	orrs	r3, r2
 801befc:	d055      	beq.n	801bfaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 801befe:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bf02:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801bf06:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801bf0a:	d033      	beq.n	801bf74 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 801bf0c:	f5b3 4f20 	cmp.w	r3, #40960	@ 0xa000
 801bf10:	d82c      	bhi.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801bf12:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bf16:	d02f      	beq.n	801bf78 <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 801bf18:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801bf1c:	d826      	bhi.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801bf1e:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801bf22:	d02b      	beq.n	801bf7c <HAL_RCCEx_PeriphCLKConfig+0xe60>
 801bf24:	f5b3 4fc0 	cmp.w	r3, #24576	@ 0x6000
 801bf28:	d820      	bhi.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801bf2a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bf2e:	d012      	beq.n	801bf56 <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 801bf30:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801bf34:	d81a      	bhi.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
 801bf36:	2b00      	cmp	r3, #0
 801bf38:	d022      	beq.n	801bf80 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 801bf3a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801bf3e:	d115      	bne.n	801bf6c <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801bf40:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bf44:	3308      	adds	r3, #8
 801bf46:	2100      	movs	r1, #0
 801bf48:	4618      	mov	r0, r3
 801bf4a:	f001 fe67 	bl	801dc1c <RCCEx_PLL2_Config>
 801bf4e:	4603      	mov	r3, r0
 801bf50:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801bf54:	e015      	b.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801bf56:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bf5a:	3328      	adds	r3, #40	@ 0x28
 801bf5c:	2102      	movs	r1, #2
 801bf5e:	4618      	mov	r0, r3
 801bf60:	f001 ff0e 	bl	801dd80 <RCCEx_PLL3_Config>
 801bf64:	4603      	mov	r3, r0
 801bf66:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 801bf6a:	e00a      	b.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801bf6c:	2301      	movs	r3, #1
 801bf6e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801bf72:	e006      	b.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 801bf74:	bf00      	nop
 801bf76:	e004      	b.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 801bf78:	bf00      	nop
 801bf7a:	e002      	b.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 801bf7c:	bf00      	nop
 801bf7e:	e000      	b.n	801bf82 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 801bf80:	bf00      	nop
    }

    if (ret == HAL_OK)
 801bf82:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d10b      	bne.n	801bfa2 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 801bf8a:	4b5c      	ldr	r3, [pc, #368]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801bf8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801bf8e:	f423 4160 	bic.w	r1, r3, #57344	@ 0xe000
 801bf92:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bf96:	f8d3 30a4 	ldr.w	r3, [r3, #164]	@ 0xa4
 801bf9a:	4a58      	ldr	r2, [pc, #352]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801bf9c:	430b      	orrs	r3, r1
 801bf9e:	6593      	str	r3, [r2, #88]	@ 0x58
 801bfa0:	e003      	b.n	801bfaa <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801bfa2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801bfa6:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 801bfaa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bfae:	e9d3 2300 	ldrd	r2, r3, [r3]
 801bfb2:	f002 0308 	and.w	r3, r2, #8
 801bfb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801bfba:	2300      	movs	r3, #0
 801bfbc:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801bfc0:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	@ 0x90
 801bfc4:	460b      	mov	r3, r1
 801bfc6:	4313      	orrs	r3, r2
 801bfc8:	d01e      	beq.n	801c008 <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 801bfca:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bfce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801bfd2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801bfd6:	d10c      	bne.n	801bff2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801bfd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bfdc:	3328      	adds	r3, #40	@ 0x28
 801bfde:	2102      	movs	r1, #2
 801bfe0:	4618      	mov	r0, r3
 801bfe2:	f001 fecd 	bl	801dd80 <RCCEx_PLL3_Config>
 801bfe6:	4603      	mov	r3, r0
 801bfe8:	2b00      	cmp	r3, #0
 801bfea:	d002      	beq.n	801bff2 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 801bfec:	2301      	movs	r3, #1
 801bfee:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 801bff2:	4b42      	ldr	r3, [pc, #264]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801bff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801bff6:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801bffa:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801bffe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801c002:	4a3e      	ldr	r2, [pc, #248]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801c004:	430b      	orrs	r3, r1
 801c006:	6553      	str	r3, [r2, #84]	@ 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 801c008:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c00c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c010:	f002 0310 	and.w	r3, r2, #16
 801c014:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801c018:	2300      	movs	r3, #0
 801c01a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801c01e:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	@ 0x88
 801c022:	460b      	mov	r3, r1
 801c024:	4313      	orrs	r3, r2
 801c026:	d01e      	beq.n	801c066 <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 801c028:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c02c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c030:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c034:	d10c      	bne.n	801c050 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c036:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c03a:	3328      	adds	r3, #40	@ 0x28
 801c03c:	2102      	movs	r1, #2
 801c03e:	4618      	mov	r0, r3
 801c040:	f001 fe9e 	bl	801dd80 <RCCEx_PLL3_Config>
 801c044:	4603      	mov	r3, r0
 801c046:	2b00      	cmp	r3, #0
 801c048:	d002      	beq.n	801c050 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 801c04a:	2301      	movs	r3, #1
 801c04c:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 801c050:	4b2a      	ldr	r3, [pc, #168]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801c052:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c054:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801c058:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c05c:	f8d3 309c 	ldr.w	r3, [r3, #156]	@ 0x9c
 801c060:	4a26      	ldr	r2, [pc, #152]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801c062:	430b      	orrs	r3, r1
 801c064:	6593      	str	r3, [r2, #88]	@ 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 801c066:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c06a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c06e:	f402 2300 	and.w	r3, r2, #524288	@ 0x80000
 801c072:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801c076:	2300      	movs	r3, #0
 801c078:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801c07c:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	@ 0x80
 801c080:	460b      	mov	r3, r1
 801c082:	4313      	orrs	r3, r2
 801c084:	d040      	beq.n	801c108 <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 801c086:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c08a:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c08e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c092:	d022      	beq.n	801c0da <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 801c094:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801c098:	d81b      	bhi.n	801c0d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d003      	beq.n	801c0a6 <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 801c09e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c0a2:	d00b      	beq.n	801c0bc <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 801c0a4:	e015      	b.n	801c0d2 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c0a6:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c0aa:	3308      	adds	r3, #8
 801c0ac:	2100      	movs	r1, #0
 801c0ae:	4618      	mov	r0, r3
 801c0b0:	f001 fdb4 	bl	801dc1c <RCCEx_PLL2_Config>
 801c0b4:	4603      	mov	r3, r0
 801c0b6:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 801c0ba:	e00f      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c0bc:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c0c0:	3328      	adds	r3, #40	@ 0x28
 801c0c2:	2102      	movs	r1, #2
 801c0c4:	4618      	mov	r0, r3
 801c0c6:	f001 fe5b 	bl	801dd80 <RCCEx_PLL3_Config>
 801c0ca:	4603      	mov	r3, r0
 801c0cc:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 801c0d0:	e004      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c0d2:	2301      	movs	r3, #1
 801c0d4:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801c0d8:	e000      	b.n	801c0dc <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 801c0da:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c0dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c0e0:	2b00      	cmp	r3, #0
 801c0e2:	d10d      	bne.n	801c100 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 801c0e4:	4b05      	ldr	r3, [pc, #20]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801c0e6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c0e8:	f423 3140 	bic.w	r1, r3, #196608	@ 0x30000
 801c0ec:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c0f0:	f8d3 30a8 	ldr.w	r3, [r3, #168]	@ 0xa8
 801c0f4:	4a01      	ldr	r2, [pc, #4]	@ (801c0fc <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 801c0f6:	430b      	orrs	r3, r1
 801c0f8:	6593      	str	r3, [r2, #88]	@ 0x58
 801c0fa:	e005      	b.n	801c108 <HAL_RCCEx_PeriphCLKConfig+0xfec>
 801c0fc:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c100:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c104:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 801c108:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c10c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c110:	f402 2380 	and.w	r3, r2, #262144	@ 0x40000
 801c114:	67bb      	str	r3, [r7, #120]	@ 0x78
 801c116:	2300      	movs	r3, #0
 801c118:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801c11a:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	@ 0x78
 801c11e:	460b      	mov	r3, r1
 801c120:	4313      	orrs	r3, r2
 801c122:	d03b      	beq.n	801c19c <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 801c124:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c128:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c12c:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c130:	d01f      	beq.n	801c172 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 801c132:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 801c136:	d818      	bhi.n	801c16a <HAL_RCCEx_PeriphCLKConfig+0x104e>
 801c138:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 801c13c:	d003      	beq.n	801c146 <HAL_RCCEx_PeriphCLKConfig+0x102a>
 801c13e:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801c142:	d007      	beq.n	801c154 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 801c144:	e011      	b.n	801c16a <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c146:	4b64      	ldr	r3, [pc, #400]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c14a:	4a63      	ldr	r2, [pc, #396]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c14c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c150:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 801c152:	e00f      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c154:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c158:	3328      	adds	r3, #40	@ 0x28
 801c15a:	2101      	movs	r1, #1
 801c15c:	4618      	mov	r0, r3
 801c15e:	f001 fe0f 	bl	801dd80 <RCCEx_PLL3_Config>
 801c162:	4603      	mov	r3, r0
 801c164:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 801c168:	e004      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c16a:	2301      	movs	r3, #1
 801c16c:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801c170:	e000      	b.n	801c174 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 801c172:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c174:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c178:	2b00      	cmp	r3, #0
 801c17a:	d10b      	bne.n	801c194 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801c17c:	4b56      	ldr	r3, [pc, #344]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c17e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c180:	f423 1140 	bic.w	r1, r3, #3145728	@ 0x300000
 801c184:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c188:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801c18c:	4a52      	ldr	r2, [pc, #328]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c18e:	430b      	orrs	r3, r1
 801c190:	6553      	str	r3, [r2, #84]	@ 0x54
 801c192:	e003      	b.n	801c19c <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c194:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c198:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 801c19c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c1a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c1a4:	f402 3380 	and.w	r3, r2, #65536	@ 0x10000
 801c1a8:	673b      	str	r3, [r7, #112]	@ 0x70
 801c1aa:	2300      	movs	r3, #0
 801c1ac:	677b      	str	r3, [r7, #116]	@ 0x74
 801c1ae:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	@ 0x70
 801c1b2:	460b      	mov	r3, r1
 801c1b4:	4313      	orrs	r3, r2
 801c1b6:	d031      	beq.n	801c21c <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 801c1b8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c1bc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c1be:	2b00      	cmp	r3, #0
 801c1c0:	d003      	beq.n	801c1ca <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 801c1c2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801c1c6:	d007      	beq.n	801c1d8 <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 801c1c8:	e011      	b.n	801c1ee <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c1ca:	4b43      	ldr	r3, [pc, #268]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c1ce:	4a42      	ldr	r2, [pc, #264]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c1d0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c1d4:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801c1d6:	e00e      	b.n	801c1f6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c1d8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c1dc:	3308      	adds	r3, #8
 801c1de:	2102      	movs	r1, #2
 801c1e0:	4618      	mov	r0, r3
 801c1e2:	f001 fd1b 	bl	801dc1c <RCCEx_PLL2_Config>
 801c1e6:	4603      	mov	r3, r0
 801c1e8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 801c1ec:	e003      	b.n	801c1f6 <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 801c1ee:	2301      	movs	r3, #1
 801c1f0:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801c1f4:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c1f6:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c1fa:	2b00      	cmp	r3, #0
 801c1fc:	d10a      	bne.n	801c214 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 801c1fe:	4b36      	ldr	r3, [pc, #216]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c200:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c202:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 801c206:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c20a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c20c:	4a32      	ldr	r2, [pc, #200]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c20e:	430b      	orrs	r3, r1
 801c210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801c212:	e003      	b.n	801c21c <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c214:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c218:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 801c21c:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c220:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c224:	f002 5300 	and.w	r3, r2, #536870912	@ 0x20000000
 801c228:	66bb      	str	r3, [r7, #104]	@ 0x68
 801c22a:	2300      	movs	r3, #0
 801c22c:	66fb      	str	r3, [r7, #108]	@ 0x6c
 801c22e:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	@ 0x68
 801c232:	460b      	mov	r3, r1
 801c234:	4313      	orrs	r3, r2
 801c236:	d00c      	beq.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 801c238:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c23c:	3328      	adds	r3, #40	@ 0x28
 801c23e:	2102      	movs	r1, #2
 801c240:	4618      	mov	r0, r3
 801c242:	f001 fd9d 	bl	801dd80 <RCCEx_PLL3_Config>
 801c246:	4603      	mov	r3, r0
 801c248:	2b00      	cmp	r3, #0
 801c24a:	d002      	beq.n	801c252 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 801c24c:	2301      	movs	r3, #1
 801c24e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 801c252:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c256:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c25a:	f402 3300 	and.w	r3, r2, #131072	@ 0x20000
 801c25e:	663b      	str	r3, [r7, #96]	@ 0x60
 801c260:	2300      	movs	r3, #0
 801c262:	667b      	str	r3, [r7, #100]	@ 0x64
 801c264:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	@ 0x60
 801c268:	460b      	mov	r3, r1
 801c26a:	4313      	orrs	r3, r2
 801c26c:	d03a      	beq.n	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 801c26e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c272:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c276:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c27a:	d018      	beq.n	801c2ae <HAL_RCCEx_PeriphCLKConfig+0x1192>
 801c27c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801c280:	d811      	bhi.n	801c2a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 801c282:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c286:	d014      	beq.n	801c2b2 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 801c288:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801c28c:	d80b      	bhi.n	801c2a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
 801c28e:	2b00      	cmp	r3, #0
 801c290:	d011      	beq.n	801c2b6 <HAL_RCCEx_PeriphCLKConfig+0x119a>
 801c292:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c296:	d106      	bne.n	801c2a6 <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 801c298:	4b0f      	ldr	r3, [pc, #60]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c29a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c29c:	4a0e      	ldr	r2, [pc, #56]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c29e:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 801c2a2:	62d3      	str	r3, [r2, #44]	@ 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 801c2a4:	e008      	b.n	801c2b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 801c2a6:	2301      	movs	r3, #1
 801c2a8:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
        break;
 801c2ac:	e004      	b.n	801c2b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 801c2ae:	bf00      	nop
 801c2b0:	e002      	b.n	801c2b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 801c2b2:	bf00      	nop
 801c2b4:	e000      	b.n	801c2b8 <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 801c2b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 801c2b8:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c2bc:	2b00      	cmp	r3, #0
 801c2be:	d10d      	bne.n	801c2dc <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 801c2c0:	4b05      	ldr	r3, [pc, #20]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c2c2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c2c4:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 801c2c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c2cc:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801c2d0:	4a01      	ldr	r2, [pc, #4]	@ (801c2d8 <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 801c2d2:	430b      	orrs	r3, r1
 801c2d4:	6553      	str	r3, [r2, #84]	@ 0x54
 801c2d6:	e005      	b.n	801c2e4 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 801c2d8:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c2dc:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c2e0:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 801c2e4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c2e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c2ec:	f402 1380 	and.w	r3, r2, #1048576	@ 0x100000
 801c2f0:	65bb      	str	r3, [r7, #88]	@ 0x58
 801c2f2:	2300      	movs	r3, #0
 801c2f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801c2f6:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	@ 0x58
 801c2fa:	460b      	mov	r3, r1
 801c2fc:	4313      	orrs	r3, r2
 801c2fe:	d009      	beq.n	801c314 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 801c300:	4baa      	ldr	r3, [pc, #680]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c302:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c304:	f023 4100 	bic.w	r1, r3, #2147483648	@ 0x80000000
 801c308:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c30c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801c30e:	4aa7      	ldr	r2, [pc, #668]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c310:	430b      	orrs	r3, r1
 801c312:	6513      	str	r3, [r2, #80]	@ 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 801c314:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c318:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c31c:	f002 5380 	and.w	r3, r2, #268435456	@ 0x10000000
 801c320:	653b      	str	r3, [r7, #80]	@ 0x50
 801c322:	2300      	movs	r3, #0
 801c324:	657b      	str	r3, [r7, #84]	@ 0x54
 801c326:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	@ 0x50
 801c32a:	460b      	mov	r3, r1
 801c32c:	4313      	orrs	r3, r2
 801c32e:	d00a      	beq.n	801c346 <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 801c330:	4b9e      	ldr	r3, [pc, #632]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c332:	691b      	ldr	r3, [r3, #16]
 801c334:	f423 4180 	bic.w	r1, r3, #16384	@ 0x4000
 801c338:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c33c:	f8d3 30bc 	ldr.w	r3, [r3, #188]	@ 0xbc
 801c340:	4a9a      	ldr	r2, [pc, #616]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c342:	430b      	orrs	r3, r1
 801c344:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 801c346:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c34e:	f402 1300 	and.w	r3, r2, #2097152	@ 0x200000
 801c352:	64bb      	str	r3, [r7, #72]	@ 0x48
 801c354:	2300      	movs	r3, #0
 801c356:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801c358:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	@ 0x48
 801c35c:	460b      	mov	r3, r1
 801c35e:	4313      	orrs	r3, r2
 801c360:	d009      	beq.n	801c376 <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 801c362:	4b92      	ldr	r3, [pc, #584]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c364:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c366:	f023 7180 	bic.w	r1, r3, #16777216	@ 0x1000000
 801c36a:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c36e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c370:	4a8e      	ldr	r2, [pc, #568]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c372:	430b      	orrs	r3, r1
 801c374:	6513      	str	r3, [r2, #80]	@ 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 801c376:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c37a:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c37e:	f002 4380 	and.w	r3, r2, #1073741824	@ 0x40000000
 801c382:	643b      	str	r3, [r7, #64]	@ 0x40
 801c384:	2300      	movs	r3, #0
 801c386:	647b      	str	r3, [r7, #68]	@ 0x44
 801c388:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	@ 0x40
 801c38c:	460b      	mov	r3, r1
 801c38e:	4313      	orrs	r3, r2
 801c390:	d00e      	beq.n	801c3b0 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 801c392:	4b86      	ldr	r3, [pc, #536]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c394:	691b      	ldr	r3, [r3, #16]
 801c396:	4a85      	ldr	r2, [pc, #532]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c398:	f423 4300 	bic.w	r3, r3, #32768	@ 0x8000
 801c39c:	6113      	str	r3, [r2, #16]
 801c39e:	4b83      	ldr	r3, [pc, #524]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c3a0:	6919      	ldr	r1, [r3, #16]
 801c3a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c3a6:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 801c3aa:	4a80      	ldr	r2, [pc, #512]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c3ac:	430b      	orrs	r3, r1
 801c3ae:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 801c3b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c3b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3b8:	f002 4300 	and.w	r3, r2, #2147483648	@ 0x80000000
 801c3bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 801c3be:	2300      	movs	r3, #0
 801c3c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c3c2:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	@ 0x38
 801c3c6:	460b      	mov	r3, r1
 801c3c8:	4313      	orrs	r3, r2
 801c3ca:	d009      	beq.n	801c3e0 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 801c3cc:	4b77      	ldr	r3, [pc, #476]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c3ce:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c3d0:	f023 5140 	bic.w	r1, r3, #805306368	@ 0x30000000
 801c3d4:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c3d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c3da:	4a74      	ldr	r2, [pc, #464]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c3dc:	430b      	orrs	r3, r1
 801c3de:	64d3      	str	r3, [r2, #76]	@ 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 801c3e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c3e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c3e8:	f402 0300 	and.w	r3, r2, #8388608	@ 0x800000
 801c3ec:	633b      	str	r3, [r7, #48]	@ 0x30
 801c3ee:	2300      	movs	r3, #0
 801c3f0:	637b      	str	r3, [r7, #52]	@ 0x34
 801c3f2:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	@ 0x30
 801c3f6:	460b      	mov	r3, r1
 801c3f8:	4313      	orrs	r3, r2
 801c3fa:	d00a      	beq.n	801c412 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 801c3fc:	4b6b      	ldr	r3, [pc, #428]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c3fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c400:	f423 0140 	bic.w	r1, r3, #12582912	@ 0xc00000
 801c404:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c408:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801c40c:	4a67      	ldr	r2, [pc, #412]	@ (801c5ac <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 801c40e:	430b      	orrs	r3, r1
 801c410:	6553      	str	r3, [r2, #84]	@ 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 801c412:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c416:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c41a:	2100      	movs	r1, #0
 801c41c:	62b9      	str	r1, [r7, #40]	@ 0x28
 801c41e:	f003 0301 	and.w	r3, r3, #1
 801c422:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801c424:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	@ 0x28
 801c428:	460b      	mov	r3, r1
 801c42a:	4313      	orrs	r3, r2
 801c42c:	d011      	beq.n	801c452 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 801c42e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c432:	3308      	adds	r3, #8
 801c434:	2100      	movs	r1, #0
 801c436:	4618      	mov	r0, r3
 801c438:	f001 fbf0 	bl	801dc1c <RCCEx_PLL2_Config>
 801c43c:	4603      	mov	r3, r0
 801c43e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 801c442:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c446:	2b00      	cmp	r3, #0
 801c448:	d003      	beq.n	801c452 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c44a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c44e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 801c452:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c456:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c45a:	2100      	movs	r1, #0
 801c45c:	6239      	str	r1, [r7, #32]
 801c45e:	f003 0302 	and.w	r3, r3, #2
 801c462:	627b      	str	r3, [r7, #36]	@ 0x24
 801c464:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801c468:	460b      	mov	r3, r1
 801c46a:	4313      	orrs	r3, r2
 801c46c:	d011      	beq.n	801c492 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 801c46e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c472:	3308      	adds	r3, #8
 801c474:	2101      	movs	r1, #1
 801c476:	4618      	mov	r0, r3
 801c478:	f001 fbd0 	bl	801dc1c <RCCEx_PLL2_Config>
 801c47c:	4603      	mov	r3, r0
 801c47e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 801c482:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c486:	2b00      	cmp	r3, #0
 801c488:	d003      	beq.n	801c492 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c48a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c48e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 801c492:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c496:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c49a:	2100      	movs	r1, #0
 801c49c:	61b9      	str	r1, [r7, #24]
 801c49e:	f003 0304 	and.w	r3, r3, #4
 801c4a2:	61fb      	str	r3, [r7, #28]
 801c4a4:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801c4a8:	460b      	mov	r3, r1
 801c4aa:	4313      	orrs	r3, r2
 801c4ac:	d011      	beq.n	801c4d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 801c4ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c4b2:	3308      	adds	r3, #8
 801c4b4:	2102      	movs	r1, #2
 801c4b6:	4618      	mov	r0, r3
 801c4b8:	f001 fbb0 	bl	801dc1c <RCCEx_PLL2_Config>
 801c4bc:	4603      	mov	r3, r0
 801c4be:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 801c4c2:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c4c6:	2b00      	cmp	r3, #0
 801c4c8:	d003      	beq.n	801c4d2 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c4ca:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c4ce:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 801c4d2:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c4d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c4da:	2100      	movs	r1, #0
 801c4dc:	6139      	str	r1, [r7, #16]
 801c4de:	f003 0308 	and.w	r3, r3, #8
 801c4e2:	617b      	str	r3, [r7, #20]
 801c4e4:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801c4e8:	460b      	mov	r3, r1
 801c4ea:	4313      	orrs	r3, r2
 801c4ec:	d011      	beq.n	801c512 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 801c4ee:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c4f2:	3328      	adds	r3, #40	@ 0x28
 801c4f4:	2100      	movs	r1, #0
 801c4f6:	4618      	mov	r0, r3
 801c4f8:	f001 fc42 	bl	801dd80 <RCCEx_PLL3_Config>
 801c4fc:	4603      	mov	r3, r0
 801c4fe:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
  
    if (ret == HAL_OK)
 801c502:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c506:	2b00      	cmp	r3, #0
 801c508:	d003      	beq.n	801c512 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c50a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c50e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 801c512:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c516:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c51a:	2100      	movs	r1, #0
 801c51c:	60b9      	str	r1, [r7, #8]
 801c51e:	f003 0310 	and.w	r3, r3, #16
 801c522:	60fb      	str	r3, [r7, #12]
 801c524:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801c528:	460b      	mov	r3, r1
 801c52a:	4313      	orrs	r3, r2
 801c52c:	d011      	beq.n	801c552 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 801c52e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c532:	3328      	adds	r3, #40	@ 0x28
 801c534:	2101      	movs	r1, #1
 801c536:	4618      	mov	r0, r3
 801c538:	f001 fc22 	bl	801dd80 <RCCEx_PLL3_Config>
 801c53c:	4603      	mov	r3, r0
 801c53e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 801c542:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c546:	2b00      	cmp	r3, #0
 801c548:	d003      	beq.n	801c552 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c54a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c54e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 801c552:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c556:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c55a:	2100      	movs	r1, #0
 801c55c:	6039      	str	r1, [r7, #0]
 801c55e:	f003 0320 	and.w	r3, r3, #32
 801c562:	607b      	str	r3, [r7, #4]
 801c564:	e9d7 1200 	ldrd	r1, r2, [r7]
 801c568:	460b      	mov	r3, r1
 801c56a:	4313      	orrs	r3, r2
 801c56c:	d011      	beq.n	801c592 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 801c56e:	f8d7 311c 	ldr.w	r3, [r7, #284]	@ 0x11c
 801c572:	3328      	adds	r3, #40	@ 0x28
 801c574:	2102      	movs	r1, #2
 801c576:	4618      	mov	r0, r3
 801c578:	f001 fc02 	bl	801dd80 <RCCEx_PLL3_Config>
 801c57c:	4603      	mov	r3, r0
 801c57e:	f887 312f 	strb.w	r3, [r7, #303]	@ 0x12f
    
    if (ret == HAL_OK)
 801c582:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c586:	2b00      	cmp	r3, #0
 801c588:	d003      	beq.n	801c592 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 801c58a:	f897 312f 	ldrb.w	r3, [r7, #303]	@ 0x12f
 801c58e:	f887 312e 	strb.w	r3, [r7, #302]	@ 0x12e
    } 
  }

  if (status == HAL_OK)
 801c592:	f897 312e 	ldrb.w	r3, [r7, #302]	@ 0x12e
 801c596:	2b00      	cmp	r3, #0
 801c598:	d101      	bne.n	801c59e <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 801c59a:	2300      	movs	r3, #0
 801c59c:	e000      	b.n	801c5a0 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 801c59e:	2301      	movs	r3, #1
}
 801c5a0:	4618      	mov	r0, r3
 801c5a2:	f507 7798 	add.w	r7, r7, #304	@ 0x130
 801c5a6:	46bd      	mov	sp, r7
 801c5a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 801c5ac:	58024400 	.word	0x58024400

0801c5b0 <HAL_RCCEx_GetPeriphCLKConfig>:
  * @retval None
  *
  *   (*) : Available on some STM32H7 lines only.
  */
void HAL_RCCEx_GetPeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 801c5b0:	e92d 0fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c5b4:	b08d      	sub	sp, #52	@ 0x34
 801c5b6:	af00      	add	r7, sp, #0
 801c5b8:	62f8      	str	r0, [r7, #44]	@ 0x2c
  /* Set all possible values for the extended clock type parameter------------*/
  PeriphClkInit->PeriphClockSelection =
 801c5ba:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801c5bc:	4aad      	ldr	r2, [pc, #692]	@ (801c874 <HAL_RCCEx_GetPeriphCLKConfig+0x2c4>)
 801c5be:	f04f 0300 	mov.w	r3, #0
 801c5c2:	e9c1 2300 	strd	r2, r3, [r1]
    RCC_PERIPHCLK_CKPER;

#if defined(I2C5)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C1235;
#else
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_I2C123;
 801c5c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5cc:	f042 0408 	orr.w	r4, r2, #8
 801c5d0:	461d      	mov	r5, r3
 801c5d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5d4:	e9c3 4500 	strd	r4, r5, [r3]
#endif /* RCC_CDCCIP1R_SAI2ASEL */
#if defined(RCC_CDCCIP1R_SAI2BSEL)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI2B;
#endif /* RCC_CDCCIP1R_SAI2BSEL */
#if defined(SAI3)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI23;
 801c5d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5de:	f442 7800 	orr.w	r8, r2, #512	@ 0x200
 801c5e2:	4699      	mov	r9, r3
 801c5e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5e6:	e9c3 8900 	strd	r8, r9, [r3]
#endif /* SAI3 */
#if defined(SAI4)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4A;
 801c5ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c5f0:	f442 6180 	orr.w	r1, r2, #1024	@ 0x400
 801c5f4:	6239      	str	r1, [r7, #32]
 801c5f6:	627b      	str	r3, [r7, #36]	@ 0x24
 801c5f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c5fa:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 801c5fe:	e9c3 1200 	strd	r1, r2, [r3]
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_SAI4B;
 801c602:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c604:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c608:	f442 6100 	orr.w	r1, r2, #2048	@ 0x800
 801c60c:	61b9      	str	r1, [r7, #24]
 801c60e:	61fb      	str	r3, [r7, #28]
 801c610:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c612:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 801c616:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* SAI4 */
#if defined(DFSDM2_BASE)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DFSDM2;
#endif /* DFSDM2 */
#if defined(QUADSPI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_QSPI;
 801c61a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c61c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c620:	f042 7100 	orr.w	r1, r2, #33554432	@ 0x2000000
 801c624:	6139      	str	r1, [r7, #16]
 801c626:	617b      	str	r3, [r7, #20]
 801c628:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c62a:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 801c62e:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* QUADSPI */
#if defined(OCTOSPI1) || defined(OCTOSPI2)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_OSPI;
#endif /* OCTOSPI1 || OCTOSPI2 */
#if defined(HRTIM1)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_HRTIM1;
 801c632:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c634:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c638:	f042 5180 	orr.w	r1, r2, #268435456	@ 0x10000000
 801c63c:	60b9      	str	r1, [r7, #8]
 801c63e:	60fb      	str	r3, [r7, #12]
 801c640:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c642:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 801c646:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* HRTIM1 */
#if defined(LTDC)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_LTDC;
 801c64a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c64c:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c650:	f042 5100 	orr.w	r1, r2, #536870912	@ 0x20000000
 801c654:	6039      	str	r1, [r7, #0]
 801c656:	607b      	str	r3, [r7, #4]
 801c658:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c65a:	e9d7 1200 	ldrd	r1, r2, [r7]
 801c65e:	e9c3 1200 	strd	r1, r2, [r3]
#endif /* LTDC */
#if defined(DSI)
  PeriphClkInit->PeriphClockSelection |= RCC_PERIPHCLK_DSI;
 801c662:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c664:	e9d3 2300 	ldrd	r2, r3, [r3]
 801c668:	f042 6a80 	orr.w	sl, r2, #67108864	@ 0x4000000
 801c66c:	469b      	mov	fp, r3
 801c66e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c670:	e9c3 ab00 	strd	sl, fp, [r3]
#endif /* DSI */

  /* Get the PLL3 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL3.PLL3M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> RCC_PLLCKSELR_DIVM3_Pos);
 801c674:	4b80      	ldr	r3, [pc, #512]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c678:	0d1b      	lsrs	r3, r3, #20
 801c67a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c67e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c680:	629a      	str	r2, [r3, #40]	@ 0x28
  PeriphClkInit->PLL3.PLL3N = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_N3) >> RCC_PLL3DIVR_N3_Pos) + 1U;
 801c682:	4b7d      	ldr	r3, [pc, #500]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c684:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c686:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c68a:	1c5a      	adds	r2, r3, #1
 801c68c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c68e:	62da      	str	r2, [r3, #44]	@ 0x2c
  PeriphClkInit->PLL3.PLL3R = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> RCC_PLL3DIVR_R3_Pos) + 1U;
 801c690:	4b79      	ldr	r3, [pc, #484]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c694:	0e1b      	lsrs	r3, r3, #24
 801c696:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c69a:	1c5a      	adds	r2, r3, #1
 801c69c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c69e:	639a      	str	r2, [r3, #56]	@ 0x38
  PeriphClkInit->PLL3.PLL3P = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> RCC_PLL3DIVR_P3_Pos) + 1U;
 801c6a0:	4b75      	ldr	r3, [pc, #468]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c6a4:	0a5b      	lsrs	r3, r3, #9
 801c6a6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c6aa:	1c5a      	adds	r2, r3, #1
 801c6ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6ae:	631a      	str	r2, [r3, #48]	@ 0x30
  PeriphClkInit->PLL3.PLL3Q = (uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> RCC_PLL3DIVR_Q3_Pos) + 1U;
 801c6b0:	4b71      	ldr	r3, [pc, #452]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801c6b4:	0c1b      	lsrs	r3, r3, #16
 801c6b6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c6ba:	1c5a      	adds	r2, r3, #1
 801c6bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6be:	635a      	str	r2, [r3, #52]	@ 0x34
  PeriphClkInit->PLL3.PLL3RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3RGE) >> RCC_PLLCFGR_PLL3RGE_Pos);
 801c6c0:	4b6d      	ldr	r3, [pc, #436]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6c4:	0a9b      	lsrs	r3, r3, #10
 801c6c6:	f003 0203 	and.w	r2, r3, #3
 801c6ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6cc:	63da      	str	r2, [r3, #60]	@ 0x3c
  PeriphClkInit->PLL3.PLL3VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL3VCOSEL) >> RCC_PLLCFGR_PLL3VCOSEL_Pos);
 801c6ce:	4b6a      	ldr	r3, [pc, #424]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c6d2:	0a5b      	lsrs	r3, r3, #9
 801c6d4:	f003 0201 	and.w	r2, r3, #1
 801c6d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get the PLL2 Clock configuration -----------------------------------------------*/
  PeriphClkInit->PLL2.PLL2M = (uint32_t)((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> RCC_PLLCKSELR_DIVM2_Pos);
 801c6dc:	4b66      	ldr	r3, [pc, #408]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801c6e0:	0b1b      	lsrs	r3, r3, #12
 801c6e2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 801c6e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6e8:	609a      	str	r2, [r3, #8]
  PeriphClkInit->PLL2.PLL2N = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_N2) >> RCC_PLL2DIVR_N2_Pos) + 1U;
 801c6ea:	4b63      	ldr	r3, [pc, #396]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6ee:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801c6f2:	1c5a      	adds	r2, r3, #1
 801c6f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c6f6:	60da      	str	r2, [r3, #12]
  PeriphClkInit->PLL2.PLL2R = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> RCC_PLL2DIVR_R2_Pos) + 1U;
 801c6f8:	4b5f      	ldr	r3, [pc, #380]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c6fa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c6fc:	0e1b      	lsrs	r3, r3, #24
 801c6fe:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c702:	1c5a      	adds	r2, r3, #1
 801c704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c706:	619a      	str	r2, [r3, #24]
  PeriphClkInit->PLL2.PLL2P = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> RCC_PLL2DIVR_P2_Pos) + 1U;
 801c708:	4b5b      	ldr	r3, [pc, #364]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c70a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c70c:	0a5b      	lsrs	r3, r3, #9
 801c70e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c712:	1c5a      	adds	r2, r3, #1
 801c714:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c716:	611a      	str	r2, [r3, #16]
  PeriphClkInit->PLL2.PLL2Q = (uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> RCC_PLL2DIVR_Q2_Pos) + 1U;
 801c718:	4b57      	ldr	r3, [pc, #348]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c71a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801c71c:	0c1b      	lsrs	r3, r3, #16
 801c71e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801c722:	1c5a      	adds	r2, r3, #1
 801c724:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c726:	615a      	str	r2, [r3, #20]
  PeriphClkInit->PLL2.PLL2RGE = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2RGE) >> RCC_PLLCFGR_PLL2RGE_Pos);
 801c728:	4b53      	ldr	r3, [pc, #332]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c72a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c72c:	099b      	lsrs	r3, r3, #6
 801c72e:	f003 0203 	and.w	r2, r3, #3
 801c732:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c734:	61da      	str	r2, [r3, #28]
  PeriphClkInit->PLL2.PLL2VCOSEL = (uint32_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLL2VCOSEL) >> RCC_PLLCFGR_PLL2VCOSEL_Pos);
 801c736:	4b50      	ldr	r3, [pc, #320]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c738:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801c73a:	095b      	lsrs	r3, r3, #5
 801c73c:	f003 0201 	and.w	r2, r3, #1
 801c740:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c742:	621a      	str	r2, [r3, #32]

  /* Get the USART1 configuration --------------------------------------------*/
  PeriphClkInit->Usart16ClockSelection      = __HAL_RCC_GET_USART16_SOURCE();
 801c744:	4b4c      	ldr	r3, [pc, #304]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c746:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c748:	f003 0238 	and.w	r2, r3, #56	@ 0x38
 801c74c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c74e:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80
  /* Get the USART2/3/4/5/7/8 clock source -----------------------------------*/
  PeriphClkInit->Usart234578ClockSelection  = __HAL_RCC_GET_USART234578_SOURCE();
 801c752:	4b49      	ldr	r3, [pc, #292]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c754:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c756:	f003 0207 	and.w	r2, r3, #7
 801c75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c75c:	67da      	str	r2, [r3, #124]	@ 0x7c
  /* Get the LPUART1 clock source --------------------------------------------*/
  PeriphClkInit->Lpuart1ClockSelection      = __HAL_RCC_GET_LPUART1_SOURCE();
 801c75e:	4b46      	ldr	r3, [pc, #280]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c760:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c762:	f003 0207 	and.w	r2, r3, #7
 801c766:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c768:	f8c3 2098 	str.w	r2, [r3, #152]	@ 0x98
#if defined(I2C5)
  /* Get the I2C1/2/3/5 clock source -----------------------------------------*/
  PeriphClkInit->I2c1235ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
#else
  /* Get the I2C1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->I2c123ClockSelection       = __HAL_RCC_GET_I2C1_SOURCE();
 801c76c:	4b42      	ldr	r3, [pc, #264]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c76e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c770:	f403 5240 	and.w	r2, r3, #12288	@ 0x3000
 801c774:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c776:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
#endif /*I2C5*/
  /* Get the LPTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim1ClockSelection       = __HAL_RCC_GET_LPTIM1_SOURCE();
 801c77a:	4b3f      	ldr	r3, [pc, #252]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c77c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c77e:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 801c782:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c784:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
  /* Get the LPTIM2 clock source ---------------------------------------------*/
  PeriphClkInit->Lptim2ClockSelection       = __HAL_RCC_GET_LPTIM2_SOURCE();
 801c788:	4b3b      	ldr	r3, [pc, #236]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c78a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c78c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 801c790:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c792:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
  /* Get the LPTIM3/4/5 clock source -----------------------------------------*/
  PeriphClkInit->Lptim345ClockSelection     = __HAL_RCC_GET_LPTIM345_SOURCE();
 801c796:	4b38      	ldr	r3, [pc, #224]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c798:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c79a:	f403 4260 	and.w	r2, r3, #57344	@ 0xe000
 801c79e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7a0:	f8c3 20a4 	str.w	r2, [r3, #164]	@ 0xa4
  /* Get the SAI1 clock source -----------------------------------------------*/
  PeriphClkInit->Sai1ClockSelection         = __HAL_RCC_GET_SAI1_SOURCE();
 801c7a4:	4b34      	ldr	r3, [pc, #208]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7a6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c7a8:	f003 0207 	and.w	r2, r3, #7
 801c7ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ae:	65da      	str	r2, [r3, #92]	@ 0x5c
#if defined(SAI3)
  /* Get the SAI2/3 clock source ---------------------------------------------*/
  PeriphClkInit->Sai23ClockSelection        = __HAL_RCC_GET_SAI23_SOURCE();
 801c7b0:	4b31      	ldr	r3, [pc, #196]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7b2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c7b4:	f403 72e0 	and.w	r2, r3, #448	@ 0x1c0
 801c7b8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7ba:	661a      	str	r2, [r3, #96]	@ 0x60
  /* Get the SAI2B clock source ---------------------------------------------*/
  PeriphClkInit->Sai2BClockSelection        = __HAL_RCC_GET_SAI2B_SOURCE();
#endif  /*SAI2B*/
#if defined(SAI4)
  /* Get the SAI4A clock source ----------------------------------------------*/
  PeriphClkInit->Sai4AClockSelection        = __HAL_RCC_GET_SAI4A_SOURCE();
 801c7bc:	4b2e      	ldr	r3, [pc, #184]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c7c0:	f403 0260 	and.w	r2, r3, #14680064	@ 0xe00000
 801c7c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7c6:	f8c3 20ac 	str.w	r2, [r3, #172]	@ 0xac
  /* Get the SAI4B clock source ----------------------------------------------*/
  PeriphClkInit->Sai4BClockSelection        = __HAL_RCC_GET_SAI4B_SOURCE();
 801c7ca:	4b2b      	ldr	r3, [pc, #172]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7cc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c7ce:	f003 62e0 	and.w	r2, r3, #117440512	@ 0x7000000
 801c7d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7d4:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
#endif  /*SAI4*/
  /* Get the RTC clock source ------------------------------------------------*/
  PeriphClkInit->RTCClockSelection          = __HAL_RCC_GET_RTC_SOURCE();
 801c7d8:	4b27      	ldr	r3, [pc, #156]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7da:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801c7dc:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 801c7e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7e2:	f8c3 20b8 	str.w	r2, [r3, #184]	@ 0xb8
  /* Get the USB clock source ------------------------------------------------*/
  PeriphClkInit->UsbClockSelection          = __HAL_RCC_GET_USB_SOURCE();
 801c7e6:	4b24      	ldr	r3, [pc, #144]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7e8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c7ea:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 801c7ee:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7f0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  /* Get the SDMMC clock source ----------------------------------------------*/
  PeriphClkInit->SdmmcClockSelection        = __HAL_RCC_GET_SDMMC_SOURCE();
 801c7f4:	4b20      	ldr	r3, [pc, #128]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c7f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c7f8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 801c7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c7fe:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Get the RNG clock source ------------------------------------------------*/
  PeriphClkInit->RngClockSelection          = __HAL_RCC_GET_RNG_SOURCE();
 801c800:	4b1d      	ldr	r3, [pc, #116]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c802:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c804:	f403 7240 	and.w	r2, r3, #768	@ 0x300
 801c808:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c80a:	f8c3 2084 	str.w	r2, [r3, #132]	@ 0x84
#if defined(HRTIM1)
  /* Get the HRTIM1 clock source ---------------------------------------------*/
  PeriphClkInit->Hrtim1ClockSelection       = __HAL_RCC_GET_HRTIM1_SOURCE();
 801c80e:	4b1a      	ldr	r3, [pc, #104]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c810:	691b      	ldr	r3, [r3, #16]
 801c812:	f403 4280 	and.w	r2, r3, #16384	@ 0x4000
 801c816:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c818:	f8c3 20bc 	str.w	r2, [r3, #188]	@ 0xbc
#endif /* HRTIM1 */
  /* Get the ADC clock source ------------------------------------------------*/
  PeriphClkInit->AdcClockSelection          = __HAL_RCC_GET_ADC_SOURCE();
 801c81c:	4b16      	ldr	r3, [pc, #88]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c81e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c820:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 801c824:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c826:	f8c3 20a8 	str.w	r2, [r3, #168]	@ 0xa8
  /* Get the SWPMI1 clock source ---------------------------------------------*/
  PeriphClkInit->Swpmi1ClockSelection       = __HAL_RCC_GET_SWPMI1_SOURCE();
 801c82a:	4b13      	ldr	r3, [pc, #76]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c82c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c82e:	f003 4200 	and.w	r2, r3, #2147483648	@ 0x80000000
 801c832:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c834:	679a      	str	r2, [r3, #120]	@ 0x78
  /* Get the DFSDM1 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm1ClockSelection       = __HAL_RCC_GET_DFSDM1_SOURCE();
 801c836:	4b10      	ldr	r3, [pc, #64]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c838:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c83a:	f003 7280 	and.w	r2, r3, #16777216	@ 0x1000000
 801c83e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c840:	671a      	str	r2, [r3, #112]	@ 0x70
#if defined(DFSDM2_BASE)
  /* Get the DFSDM2 clock source ---------------------------------------------*/
  PeriphClkInit->Dfsdm2ClockSelection       = __HAL_RCC_GET_DFSDM2_SOURCE();
#endif /* DFSDM2 */
  /* Get the SPDIFRX clock source --------------------------------------------*/
  PeriphClkInit->SpdifrxClockSelection      = __HAL_RCC_GET_SPDIFRX_SOURCE();
 801c842:	4b0d      	ldr	r3, [pc, #52]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c844:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c846:	f403 1240 	and.w	r2, r3, #3145728	@ 0x300000
 801c84a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c84c:	66da      	str	r2, [r3, #108]	@ 0x6c
  /* Get the SPI1/2/3 clock source -------------------------------------------*/
  PeriphClkInit->Spi123ClockSelection       = __HAL_RCC_GET_SPI123_SOURCE();
 801c84e:	4b0a      	ldr	r3, [pc, #40]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c850:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c852:	f403 42e0 	and.w	r2, r3, #28672	@ 0x7000
 801c856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c858:	665a      	str	r2, [r3, #100]	@ 0x64
  /* Get the SPI4/5 clock source ---------------------------------------------*/
  PeriphClkInit->Spi45ClockSelection        = __HAL_RCC_GET_SPI45_SOURCE();
 801c85a:	4b07      	ldr	r3, [pc, #28]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c85c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c85e:	f403 22e0 	and.w	r2, r3, #458752	@ 0x70000
 801c862:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c864:	669a      	str	r2, [r3, #104]	@ 0x68
  /* Get the SPI6 clock source -----------------------------------------------*/
  PeriphClkInit->Spi6ClockSelection         = __HAL_RCC_GET_SPI6_SOURCE();
 801c866:	4b04      	ldr	r3, [pc, #16]	@ (801c878 <HAL_RCCEx_GetPeriphCLKConfig+0x2c8>)
 801c868:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801c86a:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 801c86e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c870:	e004      	b.n	801c87c <HAL_RCCEx_GetPeriphCLKConfig+0x2cc>
 801c872:	bf00      	nop
 801c874:	c9fff1f7 	.word	0xc9fff1f7
 801c878:	58024400 	.word	0x58024400
 801c87c:	f8c3 20b4 	str.w	r2, [r3, #180]	@ 0xb4
  /* Get the FDCAN clock source ----------------------------------------------*/
  PeriphClkInit->FdcanClockSelection        = __HAL_RCC_GET_FDCAN_SOURCE();
 801c880:	4b1d      	ldr	r3, [pc, #116]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c882:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c884:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 801c888:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c88a:	675a      	str	r2, [r3, #116]	@ 0x74
  /* Get the CEC clock source ------------------------------------------------*/
  PeriphClkInit->CecClockSelection          = __HAL_RCC_GET_CEC_SOURCE();
 801c88c:	4b1a      	ldr	r3, [pc, #104]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c88e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801c890:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 801c894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c896:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  /* Get the FMC clock source ------------------------------------------------*/
  PeriphClkInit->FmcClockSelection          = __HAL_RCC_GET_FMC_SOURCE();
 801c89a:	4b17      	ldr	r3, [pc, #92]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c89c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c89e:	f003 0203 	and.w	r2, r3, #3
 801c8a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8a4:	649a      	str	r2, [r3, #72]	@ 0x48
#if defined(QUADSPI)
  /* Get the QSPI clock source -----------------------------------------------*/
  PeriphClkInit->QspiClockSelection         = __HAL_RCC_GET_QSPI_SOURCE();
 801c8a6:	4b14      	ldr	r3, [pc, #80]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c8a8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c8aa:	f003 0230 	and.w	r2, r3, #48	@ 0x30
 801c8ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8b0:	64da      	str	r2, [r3, #76]	@ 0x4c
  PeriphClkInit->OspiClockSelection         = __HAL_RCC_GET_OSPI_SOURCE();
#endif /* OCTOSPI1 || OCTOSPI2 */

#if defined(DSI)
  /* Get the DSI clock source ------------------------------------------------*/
  PeriphClkInit->DsiClockSelection          = __HAL_RCC_GET_DSI_SOURCE();
 801c8b2:	4b11      	ldr	r3, [pc, #68]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c8b4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c8b6:	f403 7280 	and.w	r2, r3, #256	@ 0x100
 801c8ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8bc:	651a      	str	r2, [r3, #80]	@ 0x50
#endif /*DSI*/

  /* Get the CKPER clock source ----------------------------------------------*/
  PeriphClkInit->CkperClockSelection        = __HAL_RCC_GET_CLKP_SOURCE();
 801c8be:	4b0e      	ldr	r3, [pc, #56]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c8c0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c8c2:	f003 5240 	and.w	r2, r3, #805306368	@ 0x30000000
 801c8c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8c8:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Get the TIM Prescaler configuration -------------------------------------*/
  if ((RCC->CFGR & RCC_CFGR_TIMPRE) == 0U)
 801c8ca:	4b0b      	ldr	r3, [pc, #44]	@ (801c8f8 <HAL_RCCEx_GetPeriphCLKConfig+0x348>)
 801c8cc:	691b      	ldr	r3, [r3, #16]
 801c8ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801c8d2:	2b00      	cmp	r3, #0
 801c8d4:	d104      	bne.n	801c8e0 <HAL_RCCEx_GetPeriphCLKConfig+0x330>
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_DESACTIVATED;
 801c8d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8d8:	2200      	movs	r2, #0
 801c8da:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
  }
  else
  {
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
  }
}
 801c8de:	e004      	b.n	801c8ea <HAL_RCCEx_GetPeriphCLKConfig+0x33a>
    PeriphClkInit->TIMPresSelection = RCC_TIMPRES_ACTIVATED;
 801c8e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801c8e2:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 801c8e6:	f8c3 20c0 	str.w	r2, [r3, #192]	@ 0xc0
}
 801c8ea:	bf00      	nop
 801c8ec:	3734      	adds	r7, #52	@ 0x34
 801c8ee:	46bd      	mov	sp, r7
 801c8f0:	e8bd 0fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp}
 801c8f4:	4770      	bx	lr
 801c8f6:	bf00      	nop
 801c8f8:	58024400 	.word	0x58024400

0801c8fc <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 801c8fc:	b580      	push	{r7, lr}
 801c8fe:	b090      	sub	sp, #64	@ 0x40
 801c900:	af00      	add	r7, sp, #0
 801c902:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 801c906:	e9d7 2300 	ldrd	r2, r3, [r7]
 801c90a:	f5a2 7180 	sub.w	r1, r2, #256	@ 0x100
 801c90e:	430b      	orrs	r3, r1
 801c910:	f040 8094 	bne.w	801ca3c <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 801c914:	4b9e      	ldr	r3, [pc, #632]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c916:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801c918:	f003 0307 	and.w	r3, r3, #7
 801c91c:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801c91e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801c920:	2b04      	cmp	r3, #4
 801c922:	f200 8087 	bhi.w	801ca34 <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 801c926:	a201      	add	r2, pc, #4	@ (adr r2, 801c92c <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 801c928:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c92c:	0801c941 	.word	0x0801c941
 801c930:	0801c969 	.word	0x0801c969
 801c934:	0801c991 	.word	0x0801c991
 801c938:	0801ca2d 	.word	0x0801ca2d
 801c93c:	0801c9b9 	.word	0x0801c9b9
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801c940:	4b93      	ldr	r3, [pc, #588]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c942:	681b      	ldr	r3, [r3, #0]
 801c944:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801c948:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801c94c:	d108      	bne.n	801c960 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801c94e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801c952:	4618      	mov	r0, r3
 801c954:	f001 f810 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801c958:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801c95a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c95c:	f000 bd45 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c960:	2300      	movs	r3, #0
 801c962:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c964:	f000 bd41 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801c968:	4b89      	ldr	r3, [pc, #548]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c96a:	681b      	ldr	r3, [r3, #0]
 801c96c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801c970:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801c974:	d108      	bne.n	801c988 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801c976:	f107 0318 	add.w	r3, r7, #24
 801c97a:	4618      	mov	r0, r3
 801c97c:	f000 fd54 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801c980:	69bb      	ldr	r3, [r7, #24]
 801c982:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c984:	f000 bd31 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c988:	2300      	movs	r3, #0
 801c98a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c98c:	f000 bd2d 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801c990:	4b7f      	ldr	r3, [pc, #508]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c992:	681b      	ldr	r3, [r3, #0]
 801c994:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801c998:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801c99c:	d108      	bne.n	801c9b0 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801c99e:	f107 030c 	add.w	r3, r7, #12
 801c9a2:	4618      	mov	r0, r3
 801c9a4:	f000 fe94 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801c9a8:	68fb      	ldr	r3, [r7, #12]
 801c9aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801c9ac:	f000 bd1d 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801c9b0:	2300      	movs	r3, #0
 801c9b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801c9b4:	f000 bd19 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801c9b8:	4b75      	ldr	r3, [pc, #468]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c9ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801c9bc:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801c9c0:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801c9c2:	4b73      	ldr	r3, [pc, #460]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c9c4:	681b      	ldr	r3, [r3, #0]
 801c9c6:	f003 0304 	and.w	r3, r3, #4
 801c9ca:	2b04      	cmp	r3, #4
 801c9cc:	d10c      	bne.n	801c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 801c9ce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9d0:	2b00      	cmp	r3, #0
 801c9d2:	d109      	bne.n	801c9e8 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801c9d4:	4b6e      	ldr	r3, [pc, #440]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c9d6:	681b      	ldr	r3, [r3, #0]
 801c9d8:	08db      	lsrs	r3, r3, #3
 801c9da:	f003 0303 	and.w	r3, r3, #3
 801c9de:	4a6d      	ldr	r2, [pc, #436]	@ (801cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801c9e0:	fa22 f303 	lsr.w	r3, r2, r3
 801c9e4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801c9e6:	e01f      	b.n	801ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801c9e8:	4b69      	ldr	r3, [pc, #420]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801c9ea:	681b      	ldr	r3, [r3, #0]
 801c9ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801c9f0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801c9f4:	d106      	bne.n	801ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 801c9f6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801c9f8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801c9fc:	d102      	bne.n	801ca04 <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801c9fe:	4b66      	ldr	r3, [pc, #408]	@ (801cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801ca00:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca02:	e011      	b.n	801ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ca04:	4b62      	ldr	r3, [pc, #392]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801ca06:	681b      	ldr	r3, [r3, #0]
 801ca08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ca0c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ca10:	d106      	bne.n	801ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 801ca12:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ca14:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ca18:	d102      	bne.n	801ca20 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ca1a:	4b60      	ldr	r3, [pc, #384]	@ (801cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801ca1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ca1e:	e003      	b.n	801ca28 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ca20:	2300      	movs	r3, #0
 801ca22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ca24:	f000 bce1 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ca28:	f000 bcdf 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ca2c:	4b5c      	ldr	r3, [pc, #368]	@ (801cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801ca2e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ca30:	f000 bcdb 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801ca34:	2300      	movs	r3, #0
 801ca36:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ca38:	f000 bcd7 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 801ca3c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ca40:	f5a2 7100 	sub.w	r1, r2, #512	@ 0x200
 801ca44:	430b      	orrs	r3, r1
 801ca46:	f040 80ad 	bne.w	801cba4 <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 801ca4a:	4b51      	ldr	r3, [pc, #324]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801ca4c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ca4e:	f403 73e0 	and.w	r3, r3, #448	@ 0x1c0
 801ca52:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801ca54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca56:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ca5a:	d056      	beq.n	801cb0a <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 801ca5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca5e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ca62:	f200 8090 	bhi.w	801cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801ca66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca68:	2bc0      	cmp	r3, #192	@ 0xc0
 801ca6a:	f000 8088 	beq.w	801cb7e <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 801ca6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca70:	2bc0      	cmp	r3, #192	@ 0xc0
 801ca72:	f200 8088 	bhi.w	801cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801ca76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca78:	2b80      	cmp	r3, #128	@ 0x80
 801ca7a:	d032      	beq.n	801cae2 <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 801ca7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca7e:	2b80      	cmp	r3, #128	@ 0x80
 801ca80:	f200 8081 	bhi.w	801cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 801ca84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca86:	2b00      	cmp	r3, #0
 801ca88:	d003      	beq.n	801ca92 <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 801ca8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801ca8c:	2b40      	cmp	r3, #64	@ 0x40
 801ca8e:	d014      	beq.n	801caba <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 801ca90:	e079      	b.n	801cb86 <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801ca92:	4b3f      	ldr	r3, [pc, #252]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801ca94:	681b      	ldr	r3, [r3, #0]
 801ca96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ca9a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ca9e:	d108      	bne.n	801cab2 <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801caa0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801caa4:	4618      	mov	r0, r3
 801caa6:	f000 ff67 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801caaa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801caac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801caae:	f000 bc9c 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cab2:	2300      	movs	r3, #0
 801cab4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cab6:	f000 bc98 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801caba:	4b35      	ldr	r3, [pc, #212]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cabc:	681b      	ldr	r3, [r3, #0]
 801cabe:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cac2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cac6:	d108      	bne.n	801cada <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cac8:	f107 0318 	add.w	r3, r7, #24
 801cacc:	4618      	mov	r0, r3
 801cace:	f000 fcab 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cad2:	69bb      	ldr	r3, [r7, #24]
 801cad4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cad6:	f000 bc88 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cada:	2300      	movs	r3, #0
 801cadc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cade:	f000 bc84 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801cae2:	4b2b      	ldr	r3, [pc, #172]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cae4:	681b      	ldr	r3, [r3, #0]
 801cae6:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801caea:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801caee:	d108      	bne.n	801cb02 <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801caf0:	f107 030c 	add.w	r3, r7, #12
 801caf4:	4618      	mov	r0, r3
 801caf6:	f000 fdeb 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cafa:	68fb      	ldr	r3, [r7, #12]
 801cafc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cafe:	f000 bc74 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cb02:	2300      	movs	r3, #0
 801cb04:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cb06:	f000 bc70 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801cb0a:	4b21      	ldr	r3, [pc, #132]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cb0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cb0e:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801cb12:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801cb14:	4b1e      	ldr	r3, [pc, #120]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cb16:	681b      	ldr	r3, [r3, #0]
 801cb18:	f003 0304 	and.w	r3, r3, #4
 801cb1c:	2b04      	cmp	r3, #4
 801cb1e:	d10c      	bne.n	801cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 801cb20:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb22:	2b00      	cmp	r3, #0
 801cb24:	d109      	bne.n	801cb3a <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cb26:	4b1a      	ldr	r3, [pc, #104]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cb28:	681b      	ldr	r3, [r3, #0]
 801cb2a:	08db      	lsrs	r3, r3, #3
 801cb2c:	f003 0303 	and.w	r3, r3, #3
 801cb30:	4a18      	ldr	r2, [pc, #96]	@ (801cb94 <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 801cb32:	fa22 f303 	lsr.w	r3, r2, r3
 801cb36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb38:	e01f      	b.n	801cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cb3a:	4b15      	ldr	r3, [pc, #84]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cb42:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cb46:	d106      	bne.n	801cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 801cb48:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb4a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cb4e:	d102      	bne.n	801cb56 <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801cb50:	4b11      	ldr	r3, [pc, #68]	@ (801cb98 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 801cb52:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb54:	e011      	b.n	801cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801cb56:	4b0e      	ldr	r3, [pc, #56]	@ (801cb90 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 801cb58:	681b      	ldr	r3, [r3, #0]
 801cb5a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cb5e:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cb62:	d106      	bne.n	801cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 801cb64:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cb66:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cb6a:	d102      	bne.n	801cb72 <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801cb6c:	4b0b      	ldr	r3, [pc, #44]	@ (801cb9c <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 801cb6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cb70:	e003      	b.n	801cb7a <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801cb72:	2300      	movs	r3, #0
 801cb74:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801cb76:	f000 bc38 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801cb7a:	f000 bc36 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801cb7e:	4b08      	ldr	r3, [pc, #32]	@ (801cba0 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 801cb80:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cb82:	f000 bc32 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801cb86:	2300      	movs	r3, #0
 801cb88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cb8a:	f000 bc2e 	b.w	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801cb8e:	bf00      	nop
 801cb90:	58024400 	.word	0x58024400
 801cb94:	03d09000 	.word	0x03d09000
 801cb98:	003d0900 	.word	0x003d0900
 801cb9c:	017d7840 	.word	0x017d7840
 801cba0:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 801cba4:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cba8:	f5a2 6180 	sub.w	r1, r2, #1024	@ 0x400
 801cbac:	430b      	orrs	r3, r1
 801cbae:	f040 809c 	bne.w	801ccea <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 801cbb2:	4b9e      	ldr	r3, [pc, #632]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cbb4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801cbb6:	f403 0360 	and.w	r3, r3, #14680064	@ 0xe00000
 801cbba:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801cbbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbbe:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cbc2:	d054      	beq.n	801cc6e <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 801cbc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbc6:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 801cbca:	f200 808b 	bhi.w	801cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801cbce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbd0:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cbd4:	f000 8083 	beq.w	801ccde <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 801cbd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbda:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 801cbde:	f200 8081 	bhi.w	801cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801cbe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbe4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cbe8:	d02f      	beq.n	801cc4a <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 801cbea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbec:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 801cbf0:	d878      	bhi.n	801cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 801cbf2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbf4:	2b00      	cmp	r3, #0
 801cbf6:	d004      	beq.n	801cc02 <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 801cbf8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cbfa:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801cbfe:	d012      	beq.n	801cc26 <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 801cc00:	e070      	b.n	801cce4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801cc02:	4b8a      	ldr	r3, [pc, #552]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cc04:	681b      	ldr	r3, [r3, #0]
 801cc06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cc0a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cc0e:	d107      	bne.n	801cc20 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cc10:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801cc14:	4618      	mov	r0, r3
 801cc16:	f000 feaf 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cc1a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cc1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cc1e:	e3e4      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cc20:	2300      	movs	r3, #0
 801cc22:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cc24:	e3e1      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cc26:	4b81      	ldr	r3, [pc, #516]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cc28:	681b      	ldr	r3, [r3, #0]
 801cc2a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cc2e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cc32:	d107      	bne.n	801cc44 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cc34:	f107 0318 	add.w	r3, r7, #24
 801cc38:	4618      	mov	r0, r3
 801cc3a:	f000 fbf5 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cc3e:	69bb      	ldr	r3, [r7, #24]
 801cc40:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cc42:	e3d2      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cc44:	2300      	movs	r3, #0
 801cc46:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cc48:	e3cf      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801cc4a:	4b78      	ldr	r3, [pc, #480]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cc4c:	681b      	ldr	r3, [r3, #0]
 801cc4e:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801cc52:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cc56:	d107      	bne.n	801cc68 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cc58:	f107 030c 	add.w	r3, r7, #12
 801cc5c:	4618      	mov	r0, r3
 801cc5e:	f000 fd37 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cc62:	68fb      	ldr	r3, [r7, #12]
 801cc64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cc66:	e3c0      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cc68:	2300      	movs	r3, #0
 801cc6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cc6c:	e3bd      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801cc6e:	4b6f      	ldr	r3, [pc, #444]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cc70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cc72:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801cc76:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801cc78:	4b6c      	ldr	r3, [pc, #432]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cc7a:	681b      	ldr	r3, [r3, #0]
 801cc7c:	f003 0304 	and.w	r3, r3, #4
 801cc80:	2b04      	cmp	r3, #4
 801cc82:	d10c      	bne.n	801cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 801cc84:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cc86:	2b00      	cmp	r3, #0
 801cc88:	d109      	bne.n	801cc9e <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cc8a:	4b68      	ldr	r3, [pc, #416]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cc8c:	681b      	ldr	r3, [r3, #0]
 801cc8e:	08db      	lsrs	r3, r3, #3
 801cc90:	f003 0303 	and.w	r3, r3, #3
 801cc94:	4a66      	ldr	r2, [pc, #408]	@ (801ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801cc96:	fa22 f303 	lsr.w	r3, r2, r3
 801cc9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cc9c:	e01e      	b.n	801ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cc9e:	4b63      	ldr	r3, [pc, #396]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cca0:	681b      	ldr	r3, [r3, #0]
 801cca2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cca6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ccaa:	d106      	bne.n	801ccba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 801ccac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccae:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801ccb2:	d102      	bne.n	801ccba <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801ccb4:	4b5f      	ldr	r3, [pc, #380]	@ (801ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801ccb6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ccb8:	e010      	b.n	801ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ccba:	4b5c      	ldr	r3, [pc, #368]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ccbc:	681b      	ldr	r3, [r3, #0]
 801ccbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ccc2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ccc6:	d106      	bne.n	801ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 801ccc8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ccca:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ccce:	d102      	bne.n	801ccd6 <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ccd0:	4b59      	ldr	r3, [pc, #356]	@ (801ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801ccd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ccd4:	e002      	b.n	801ccdc <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ccda:	e386      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ccdc:	e385      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ccde:	4b57      	ldr	r3, [pc, #348]	@ (801ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801cce0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cce2:	e382      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801cce4:	2300      	movs	r3, #0
 801cce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cce8:	e37f      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 801ccea:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ccee:	f5a2 6100 	sub.w	r1, r2, #2048	@ 0x800
 801ccf2:	430b      	orrs	r3, r1
 801ccf4:	f040 80a7 	bne.w	801ce46 <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 801ccf8:	4b4c      	ldr	r3, [pc, #304]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ccfa:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ccfc:	f003 63e0 	and.w	r3, r3, #117440512	@ 0x7000000
 801cd00:	633b      	str	r3, [r7, #48]	@ 0x30

    switch (saiclocksource)
 801cd02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd04:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801cd08:	d055      	beq.n	801cdb6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 801cd0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd0c:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801cd10:	f200 8096 	bhi.w	801ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801cd14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd16:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801cd1a:	f000 8084 	beq.w	801ce26 <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 801cd1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd20:	f1b3 7f40 	cmp.w	r3, #50331648	@ 0x3000000
 801cd24:	f200 808c 	bhi.w	801ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801cd28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd2a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cd2e:	d030      	beq.n	801cd92 <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 801cd30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd32:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cd36:	f200 8083 	bhi.w	801ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 801cd3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d004      	beq.n	801cd4a <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 801cd40:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801cd42:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 801cd46:	d012      	beq.n	801cd6e <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 801cd48:	e07a      	b.n	801ce40 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801cd4a:	4b38      	ldr	r3, [pc, #224]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cd4c:	681b      	ldr	r3, [r3, #0]
 801cd4e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801cd52:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801cd56:	d107      	bne.n	801cd68 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801cd58:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801cd5c:	4618      	mov	r0, r3
 801cd5e:	f000 fe0b 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cd62:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cd64:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cd66:	e340      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cd68:	2300      	movs	r3, #0
 801cd6a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cd6c:	e33d      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cd6e:	4b2f      	ldr	r3, [pc, #188]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cd70:	681b      	ldr	r3, [r3, #0]
 801cd72:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801cd76:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801cd7a:	d107      	bne.n	801cd8c <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801cd7c:	f107 0318 	add.w	r3, r7, #24
 801cd80:	4618      	mov	r0, r3
 801cd82:	f000 fb51 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cd86:	69bb      	ldr	r3, [r7, #24]
 801cd88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cd8a:	e32e      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cd8c:	2300      	movs	r3, #0
 801cd8e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cd90:	e32b      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801cd92:	4b26      	ldr	r3, [pc, #152]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cd94:	681b      	ldr	r3, [r3, #0]
 801cd96:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801cd9a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cd9e:	d107      	bne.n	801cdb0 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cda0:	f107 030c 	add.w	r3, r7, #12
 801cda4:	4618      	mov	r0, r3
 801cda6:	f000 fc93 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cdaa:	68fb      	ldr	r3, [r7, #12]
 801cdac:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cdae:	e31c      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cdb0:	2300      	movs	r3, #0
 801cdb2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cdb4:	e319      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801cdb6:	4b1d      	ldr	r3, [pc, #116]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cdb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cdba:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801cdbe:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801cdc0:	4b1a      	ldr	r3, [pc, #104]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cdc2:	681b      	ldr	r3, [r3, #0]
 801cdc4:	f003 0304 	and.w	r3, r3, #4
 801cdc8:	2b04      	cmp	r3, #4
 801cdca:	d10c      	bne.n	801cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 801cdcc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdce:	2b00      	cmp	r3, #0
 801cdd0:	d109      	bne.n	801cde6 <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cdd2:	4b16      	ldr	r3, [pc, #88]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cdd4:	681b      	ldr	r3, [r3, #0]
 801cdd6:	08db      	lsrs	r3, r3, #3
 801cdd8:	f003 0303 	and.w	r3, r3, #3
 801cddc:	4a14      	ldr	r2, [pc, #80]	@ (801ce30 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 801cdde:	fa22 f303 	lsr.w	r3, r2, r3
 801cde2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cde4:	e01e      	b.n	801ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cde6:	4b11      	ldr	r3, [pc, #68]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801cde8:	681b      	ldr	r3, [r3, #0]
 801cdea:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cdee:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cdf2:	d106      	bne.n	801ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 801cdf4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cdf6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cdfa:	d102      	bne.n	801ce02 <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801cdfc:	4b0d      	ldr	r3, [pc, #52]	@ (801ce34 <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 801cdfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ce00:	e010      	b.n	801ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801ce02:	4b0a      	ldr	r3, [pc, #40]	@ (801ce2c <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 801ce04:	681b      	ldr	r3, [r3, #0]
 801ce06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801ce0a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801ce0e:	d106      	bne.n	801ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 801ce10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801ce12:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801ce16:	d102      	bne.n	801ce1e <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801ce18:	4b07      	ldr	r3, [pc, #28]	@ (801ce38 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 801ce1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801ce1c:	e002      	b.n	801ce24 <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801ce1e:	2300      	movs	r3, #0
 801ce20:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801ce22:	e2e2      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ce24:	e2e1      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801ce26:	4b05      	ldr	r3, [pc, #20]	@ (801ce3c <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 801ce28:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ce2a:	e2de      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801ce2c:	58024400 	.word	0x58024400
 801ce30:	03d09000 	.word	0x03d09000
 801ce34:	003d0900 	.word	0x003d0900
 801ce38:	017d7840 	.word	0x017d7840
 801ce3c:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 801ce40:	2300      	movs	r3, #0
 801ce42:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ce44:	e2d1      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 801ce46:	e9d7 2300 	ldrd	r2, r3, [r7]
 801ce4a:	f5a2 5180 	sub.w	r1, r2, #4096	@ 0x1000
 801ce4e:	430b      	orrs	r3, r1
 801ce50:	f040 809c 	bne.w	801cf8c <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 801ce54:	4b93      	ldr	r3, [pc, #588]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ce56:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801ce58:	f403 43e0 	and.w	r3, r3, #28672	@ 0x7000
 801ce5c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801ce5e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce60:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ce64:	d054      	beq.n	801cf10 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 801ce66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce68:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801ce6c:	f200 808b 	bhi.w	801cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801ce70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce72:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ce76:	f000 8083 	beq.w	801cf80 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 801ce7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce7c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 801ce80:	f200 8081 	bhi.w	801cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801ce84:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce86:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ce8a:	d02f      	beq.n	801ceec <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 801ce8c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce8e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801ce92:	d878      	bhi.n	801cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 801ce94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce96:	2b00      	cmp	r3, #0
 801ce98:	d004      	beq.n	801cea4 <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 801ce9a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801ce9c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801cea0:	d012      	beq.n	801cec8 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 801cea2:	e070      	b.n	801cf86 <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801cea4:	4b7f      	ldr	r3, [pc, #508]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cea6:	681b      	ldr	r3, [r3, #0]
 801cea8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801ceac:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801ceb0:	d107      	bne.n	801cec2 <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801ceb2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801ceb6:	4618      	mov	r0, r3
 801ceb8:	f000 fd5e 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801cebc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801cebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cec0:	e293      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cec2:	2300      	movs	r3, #0
 801cec4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cec6:	e290      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cec8:	4b76      	ldr	r3, [pc, #472]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ceca:	681b      	ldr	r3, [r3, #0]
 801cecc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801ced0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801ced4:	d107      	bne.n	801cee6 <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801ced6:	f107 0318 	add.w	r3, r7, #24
 801ceda:	4618      	mov	r0, r3
 801cedc:	f000 faa4 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801cee0:	69bb      	ldr	r3, [r7, #24]
 801cee2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cee4:	e281      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cee6:	2300      	movs	r3, #0
 801cee8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801ceea:	e27e      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801ceec:	4b6d      	ldr	r3, [pc, #436]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801ceee:	681b      	ldr	r3, [r3, #0]
 801cef0:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801cef4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cef8:	d107      	bne.n	801cf0a <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801cefa:	f107 030c 	add.w	r3, r7, #12
 801cefe:	4618      	mov	r0, r3
 801cf00:	f000 fbe6 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 801cf04:	68fb      	ldr	r3, [r7, #12]
 801cf06:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801cf08:	e26f      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801cf0a:	2300      	movs	r3, #0
 801cf0c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf0e:	e26c      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801cf10:	4b64      	ldr	r3, [pc, #400]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cf12:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801cf14:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801cf18:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801cf1a:	4b62      	ldr	r3, [pc, #392]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cf1c:	681b      	ldr	r3, [r3, #0]
 801cf1e:	f003 0304 	and.w	r3, r3, #4
 801cf22:	2b04      	cmp	r3, #4
 801cf24:	d10c      	bne.n	801cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 801cf26:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf28:	2b00      	cmp	r3, #0
 801cf2a:	d109      	bne.n	801cf40 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801cf2c:	4b5d      	ldr	r3, [pc, #372]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cf2e:	681b      	ldr	r3, [r3, #0]
 801cf30:	08db      	lsrs	r3, r3, #3
 801cf32:	f003 0303 	and.w	r3, r3, #3
 801cf36:	4a5c      	ldr	r2, [pc, #368]	@ (801d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801cf38:	fa22 f303 	lsr.w	r3, r2, r3
 801cf3c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cf3e:	e01e      	b.n	801cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801cf40:	4b58      	ldr	r3, [pc, #352]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cf42:	681b      	ldr	r3, [r3, #0]
 801cf44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801cf48:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801cf4c:	d106      	bne.n	801cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 801cf4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801cf54:	d102      	bne.n	801cf5c <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801cf56:	4b55      	ldr	r3, [pc, #340]	@ (801d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801cf58:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cf5a:	e010      	b.n	801cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801cf5c:	4b51      	ldr	r3, [pc, #324]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cf5e:	681b      	ldr	r3, [r3, #0]
 801cf60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801cf64:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cf68:	d106      	bne.n	801cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 801cf6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801cf6c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801cf70:	d102      	bne.n	801cf78 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801cf72:	4b4f      	ldr	r3, [pc, #316]	@ (801d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801cf74:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801cf76:	e002      	b.n	801cf7e <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801cf78:	2300      	movs	r3, #0
 801cf7a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801cf7c:	e235      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801cf7e:	e234      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 801cf80:	4b4c      	ldr	r3, [pc, #304]	@ (801d0b4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 801cf82:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf84:	e231      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801cf86:	2300      	movs	r3, #0
 801cf88:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801cf8a:	e22e      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 801cf8c:	e9d7 2300 	ldrd	r2, r3, [r7]
 801cf90:	f5a2 5100 	sub.w	r1, r2, #8192	@ 0x2000
 801cf94:	430b      	orrs	r3, r1
 801cf96:	f040 808f 	bne.w	801d0b8 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 801cf9a:	4b42      	ldr	r3, [pc, #264]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cf9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801cf9e:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801cfa2:	63bb      	str	r3, [r7, #56]	@ 0x38
    switch (srcclk)
 801cfa4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfa6:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cfaa:	d06b      	beq.n	801d084 <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 801cfac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfae:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 801cfb2:	d874      	bhi.n	801d09e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cfb4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfb6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cfba:	d056      	beq.n	801d06a <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 801cfbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 801cfc2:	d86c      	bhi.n	801d09e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cfc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfc6:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cfca:	d03b      	beq.n	801d044 <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 801cfcc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfce:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 801cfd2:	d864      	bhi.n	801d09e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cfd4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfd6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cfda:	d021      	beq.n	801d020 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 801cfdc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfde:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801cfe2:	d85c      	bhi.n	801d09e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 801cfe4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfe6:	2b00      	cmp	r3, #0
 801cfe8:	d004      	beq.n	801cff4 <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 801cfea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801cfec:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801cff0:	d004      	beq.n	801cffc <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 801cff2:	e054      	b.n	801d09e <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 801cff4:	f7fe f866 	bl	801b0c4 <HAL_RCC_GetPCLK1Freq>
 801cff8:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801cffa:	e1f6      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801cffc:	4b29      	ldr	r3, [pc, #164]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d004:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d008:	d107      	bne.n	801d01a <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d00a:	f107 0318 	add.w	r3, r7, #24
 801d00e:	4618      	mov	r0, r3
 801d010:	f000 fa0a 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d014:	69fb      	ldr	r3, [r7, #28]
 801d016:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d018:	e1e7      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d01a:	2300      	movs	r3, #0
 801d01c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d01e:	e1e4      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d020:	4b20      	ldr	r3, [pc, #128]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801d028:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d02c:	d107      	bne.n	801d03e <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d02e:	f107 030c 	add.w	r3, r7, #12
 801d032:	4618      	mov	r0, r3
 801d034:	f000 fb4c 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d038:	693b      	ldr	r3, [r7, #16]
 801d03a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d03c:	e1d5      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d03e:	2300      	movs	r3, #0
 801d040:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d042:	e1d2      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d044:	4b17      	ldr	r3, [pc, #92]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801d046:	681b      	ldr	r3, [r3, #0]
 801d048:	f003 0304 	and.w	r3, r3, #4
 801d04c:	2b04      	cmp	r3, #4
 801d04e:	d109      	bne.n	801d064 <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d050:	4b14      	ldr	r3, [pc, #80]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801d052:	681b      	ldr	r3, [r3, #0]
 801d054:	08db      	lsrs	r3, r3, #3
 801d056:	f003 0303 	and.w	r3, r3, #3
 801d05a:	4a13      	ldr	r2, [pc, #76]	@ (801d0a8 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 801d05c:	fa22 f303 	lsr.w	r3, r2, r3
 801d060:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d062:	e1c2      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d064:	2300      	movs	r3, #0
 801d066:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d068:	e1bf      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d06a:	4b0e      	ldr	r3, [pc, #56]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801d06c:	681b      	ldr	r3, [r3, #0]
 801d06e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d072:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d076:	d102      	bne.n	801d07e <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 801d078:	4b0c      	ldr	r3, [pc, #48]	@ (801d0ac <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 801d07a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d07c:	e1b5      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d07e:	2300      	movs	r3, #0
 801d080:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d082:	e1b2      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d084:	4b07      	ldr	r3, [pc, #28]	@ (801d0a4 <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 801d086:	681b      	ldr	r3, [r3, #0]
 801d088:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d08c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d090:	d102      	bne.n	801d098 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 801d092:	4b07      	ldr	r3, [pc, #28]	@ (801d0b0 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 801d094:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d096:	e1a8      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d098:	2300      	movs	r3, #0
 801d09a:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d09c:	e1a5      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801d09e:	2300      	movs	r3, #0
 801d0a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d0a2:	e1a2      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801d0a4:	58024400 	.word	0x58024400
 801d0a8:	03d09000 	.word	0x03d09000
 801d0ac:	003d0900 	.word	0x003d0900
 801d0b0:	017d7840 	.word	0x017d7840
 801d0b4:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 801d0b8:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d0bc:	f5a2 2100 	sub.w	r1, r2, #524288	@ 0x80000
 801d0c0:	430b      	orrs	r3, r1
 801d0c2:	d173      	bne.n	801d1ac <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 801d0c4:	4b9c      	ldr	r3, [pc, #624]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d0c6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d0c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 801d0cc:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801d0ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d0:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d0d4:	d02f      	beq.n	801d136 <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 801d0d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d0dc:	d863      	bhi.n	801d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 801d0de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0e0:	2b00      	cmp	r3, #0
 801d0e2:	d004      	beq.n	801d0ee <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 801d0e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d0e6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d0ea:	d012      	beq.n	801d112 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 801d0ec:	e05b      	b.n	801d1a6 <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d0ee:	4b92      	ldr	r3, [pc, #584]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d0f0:	681b      	ldr	r3, [r3, #0]
 801d0f2:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d0f6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d0fa:	d107      	bne.n	801d10c <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d0fc:	f107 0318 	add.w	r3, r7, #24
 801d100:	4618      	mov	r0, r3
 801d102:	f000 f991 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 801d106:	69bb      	ldr	r3, [r7, #24]
 801d108:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d10a:	e16e      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d10c:	2300      	movs	r3, #0
 801d10e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d110:	e16b      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d112:	4b89      	ldr	r3, [pc, #548]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d114:	681b      	ldr	r3, [r3, #0]
 801d116:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801d11a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d11e:	d107      	bne.n	801d130 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d120:	f107 030c 	add.w	r3, r7, #12
 801d124:	4618      	mov	r0, r3
 801d126:	f000 fad3 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 801d12a:	697b      	ldr	r3, [r7, #20]
 801d12c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d12e:	e15c      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d130:	2300      	movs	r3, #0
 801d132:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d134:	e159      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 801d136:	4b80      	ldr	r3, [pc, #512]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d13a:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801d13e:	637b      	str	r3, [r7, #52]	@ 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 801d140:	4b7d      	ldr	r3, [pc, #500]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d142:	681b      	ldr	r3, [r3, #0]
 801d144:	f003 0304 	and.w	r3, r3, #4
 801d148:	2b04      	cmp	r3, #4
 801d14a:	d10c      	bne.n	801d166 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 801d14c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d14e:	2b00      	cmp	r3, #0
 801d150:	d109      	bne.n	801d166 <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d152:	4b79      	ldr	r3, [pc, #484]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d154:	681b      	ldr	r3, [r3, #0]
 801d156:	08db      	lsrs	r3, r3, #3
 801d158:	f003 0303 	and.w	r3, r3, #3
 801d15c:	4a77      	ldr	r2, [pc, #476]	@ (801d33c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801d15e:	fa22 f303 	lsr.w	r3, r2, r3
 801d162:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d164:	e01e      	b.n	801d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 801d166:	4b74      	ldr	r3, [pc, #464]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d168:	681b      	ldr	r3, [r3, #0]
 801d16a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d16e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d172:	d106      	bne.n	801d182 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 801d174:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d176:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d17a:	d102      	bne.n	801d182 <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 801d17c:	4b70      	ldr	r3, [pc, #448]	@ (801d340 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801d17e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d180:	e010      	b.n	801d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 801d182:	4b6d      	ldr	r3, [pc, #436]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d184:	681b      	ldr	r3, [r3, #0]
 801d186:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d18a:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d18e:	d106      	bne.n	801d19e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 801d190:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801d192:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d196:	d102      	bne.n	801d19e <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 801d198:	4b6a      	ldr	r3, [pc, #424]	@ (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801d19a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801d19c:	e002      	b.n	801d1a4 <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 801d19e:	2300      	movs	r3, #0
 801d1a0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }

        break;
 801d1a2:	e122      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801d1a4:	e121      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801d1a6:	2300      	movs	r3, #0
 801d1a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d1aa:	e11e      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 801d1ac:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d1b0:	f5a2 3180 	sub.w	r1, r2, #65536	@ 0x10000
 801d1b4:	430b      	orrs	r3, r1
 801d1b6:	d133      	bne.n	801d220 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 801d1b8:	4b5f      	ldr	r3, [pc, #380]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d1ba:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801d1bc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801d1c0:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801d1c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1c4:	2b00      	cmp	r3, #0
 801d1c6:	d004      	beq.n	801d1d2 <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 801d1c8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d1ca:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801d1ce:	d012      	beq.n	801d1f6 <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 801d1d0:	e023      	b.n	801d21a <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d1d2:	4b59      	ldr	r3, [pc, #356]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d1d4:	681b      	ldr	r3, [r3, #0]
 801d1d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d1da:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d1de:	d107      	bne.n	801d1f0 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d1e0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801d1e4:	4618      	mov	r0, r3
 801d1e6:	f000 fbc7 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d1ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d1ec:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d1ee:	e0fc      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d1f0:	2300      	movs	r3, #0
 801d1f2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d1f4:	e0f9      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d1f6:	4b50      	ldr	r3, [pc, #320]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d1f8:	681b      	ldr	r3, [r3, #0]
 801d1fa:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d1fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d202:	d107      	bne.n	801d214 <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d204:	f107 0318 	add.w	r3, r7, #24
 801d208:	4618      	mov	r0, r3
 801d20a:	f000 f90d 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 801d20e:	6a3b      	ldr	r3, [r7, #32]
 801d210:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d212:	e0ea      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d214:	2300      	movs	r3, #0
 801d216:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d218:	e0e7      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 801d21a:	2300      	movs	r3, #0
 801d21c:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d21e:	e0e4      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 801d220:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d224:	f5a2 4180 	sub.w	r1, r2, #16384	@ 0x4000
 801d228:	430b      	orrs	r3, r1
 801d22a:	f040 808d 	bne.w	801d348 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 801d22e:	4b42      	ldr	r3, [pc, #264]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d230:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801d232:	f003 43e0 	and.w	r3, r3, #1879048192	@ 0x70000000
 801d236:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801d238:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d23a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d23e:	d06b      	beq.n	801d318 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 801d240:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d242:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 801d246:	d874      	bhi.n	801d332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801d248:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d24a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d24e:	d056      	beq.n	801d2fe <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 801d250:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d252:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801d256:	d86c      	bhi.n	801d332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801d258:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d25a:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d25e:	d03b      	beq.n	801d2d8 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 801d260:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d262:	f1b3 5f40 	cmp.w	r3, #805306368	@ 0x30000000
 801d266:	d864      	bhi.n	801d332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801d268:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d26a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d26e:	d021      	beq.n	801d2b4 <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 801d270:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d272:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d276:	d85c      	bhi.n	801d332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 801d278:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d27a:	2b00      	cmp	r3, #0
 801d27c:	d004      	beq.n	801d288 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 801d27e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d280:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d284:	d004      	beq.n	801d290 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 801d286:	e054      	b.n	801d332 <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 801d288:	f000 f8b8 	bl	801d3fc <HAL_RCCEx_GetD3PCLK1Freq>
 801d28c:	63f8      	str	r0, [r7, #60]	@ 0x3c
        break;
 801d28e:	e0ac      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d290:	4b29      	ldr	r3, [pc, #164]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d292:	681b      	ldr	r3, [r3, #0]
 801d294:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d298:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d29c:	d107      	bne.n	801d2ae <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d29e:	f107 0318 	add.w	r3, r7, #24
 801d2a2:	4618      	mov	r0, r3
 801d2a4:	f000 f8c0 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d2a8:	69fb      	ldr	r3, [r7, #28]
 801d2aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2ac:	e09d      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d2ae:	2300      	movs	r3, #0
 801d2b0:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d2b2:	e09a      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 801d2b4:	4b20      	ldr	r3, [pc, #128]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d2b6:	681b      	ldr	r3, [r3, #0]
 801d2b8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801d2bc:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d2c0:	d107      	bne.n	801d2d2 <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 801d2c2:	f107 030c 	add.w	r3, r7, #12
 801d2c6:	4618      	mov	r0, r3
 801d2c8:	f000 fa02 	bl	801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 801d2cc:	693b      	ldr	r3, [r7, #16]
 801d2ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2d0:	e08b      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d2d2:	2300      	movs	r3, #0
 801d2d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d2d6:	e088      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 801d2d8:	4b17      	ldr	r3, [pc, #92]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d2da:	681b      	ldr	r3, [r3, #0]
 801d2dc:	f003 0304 	and.w	r3, r3, #4
 801d2e0:	2b04      	cmp	r3, #4
 801d2e2:	d109      	bne.n	801d2f8 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d2e4:	4b14      	ldr	r3, [pc, #80]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d2e6:	681b      	ldr	r3, [r3, #0]
 801d2e8:	08db      	lsrs	r3, r3, #3
 801d2ea:	f003 0303 	and.w	r3, r3, #3
 801d2ee:	4a13      	ldr	r2, [pc, #76]	@ (801d33c <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 801d2f0:	fa22 f303 	lsr.w	r3, r2, r3
 801d2f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d2f6:	e078      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d2f8:	2300      	movs	r3, #0
 801d2fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d2fc:	e075      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 801d2fe:	4b0e      	ldr	r3, [pc, #56]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d300:	681b      	ldr	r3, [r3, #0]
 801d302:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801d306:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801d30a:	d102      	bne.n	801d312 <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 801d30c:	4b0c      	ldr	r3, [pc, #48]	@ (801d340 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 801d30e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d310:	e06b      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d312:	2300      	movs	r3, #0
 801d314:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d316:	e068      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d318:	4b07      	ldr	r3, [pc, #28]	@ (801d338 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 801d31a:	681b      	ldr	r3, [r3, #0]
 801d31c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d320:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d324:	d102      	bne.n	801d32c <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 801d326:	4b07      	ldr	r3, [pc, #28]	@ (801d344 <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 801d328:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d32a:	e05e      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d32c:	2300      	movs	r3, #0
 801d32e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d330:	e05b      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 801d332:	2300      	movs	r3, #0
 801d334:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d336:	e058      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 801d338:	58024400 	.word	0x58024400
 801d33c:	03d09000 	.word	0x03d09000
 801d340:	003d0900 	.word	0x003d0900
 801d344:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 801d348:	e9d7 2300 	ldrd	r2, r3, [r7]
 801d34c:	f5a2 4100 	sub.w	r1, r2, #32768	@ 0x8000
 801d350:	430b      	orrs	r3, r1
 801d352:	d148      	bne.n	801d3e6 <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 801d354:	4b27      	ldr	r3, [pc, #156]	@ (801d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d356:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801d358:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 801d35c:	63bb      	str	r3, [r7, #56]	@ 0x38

    switch (srcclk)
 801d35e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d360:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d364:	d02a      	beq.n	801d3bc <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 801d366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d368:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801d36c:	d838      	bhi.n	801d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 801d36e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d370:	2b00      	cmp	r3, #0
 801d372:	d004      	beq.n	801d37e <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 801d374:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801d376:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801d37a:	d00d      	beq.n	801d398 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 801d37c:	e030      	b.n	801d3e0 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 801d37e:	4b1d      	ldr	r3, [pc, #116]	@ (801d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d380:	681b      	ldr	r3, [r3, #0]
 801d382:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 801d386:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 801d38a:	d102      	bne.n	801d392 <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 801d38c:	4b1a      	ldr	r3, [pc, #104]	@ (801d3f8 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 801d38e:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d390:	e02b      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d392:	2300      	movs	r3, #0
 801d394:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d396:	e028      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 801d398:	4b16      	ldr	r3, [pc, #88]	@ (801d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d39a:	681b      	ldr	r3, [r3, #0]
 801d39c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801d3a0:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801d3a4:	d107      	bne.n	801d3b6 <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 801d3a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 801d3aa:	4618      	mov	r0, r3
 801d3ac:	f000 fae4 	bl	801d978 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 801d3b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801d3b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3b4:	e019      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d3b6:	2300      	movs	r3, #0
 801d3b8:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d3ba:	e016      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 801d3bc:	4b0d      	ldr	r3, [pc, #52]	@ (801d3f4 <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 801d3be:	681b      	ldr	r3, [r3, #0]
 801d3c0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801d3c4:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801d3c8:	d107      	bne.n	801d3da <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 801d3ca:	f107 0318 	add.w	r3, r7, #24
 801d3ce:	4618      	mov	r0, r3
 801d3d0:	f000 f82a 	bl	801d428 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 801d3d4:	69fb      	ldr	r3, [r7, #28]
 801d3d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 801d3d8:	e007      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 801d3da:	2300      	movs	r3, #0
 801d3dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d3de:	e004      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 801d3e0:	2300      	movs	r3, #0
 801d3e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
        break;
 801d3e4:	e001      	b.n	801d3ea <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 801d3e6:	2300      	movs	r3, #0
 801d3e8:	63fb      	str	r3, [r7, #60]	@ 0x3c
  }

  return frequency;
 801d3ea:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 801d3ec:	4618      	mov	r0, r3
 801d3ee:	3740      	adds	r7, #64	@ 0x40
 801d3f0:	46bd      	mov	sp, r7
 801d3f2:	bd80      	pop	{r7, pc}
 801d3f4:	58024400 	.word	0x58024400
 801d3f8:	017d7840 	.word	0x017d7840

0801d3fc <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 801d3fc:	b580      	push	{r7, lr}
 801d3fe:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 801d400:	f7fd fe30 	bl	801b064 <HAL_RCC_GetHCLKFreq>
 801d404:	4602      	mov	r2, r0
 801d406:	4b06      	ldr	r3, [pc, #24]	@ (801d420 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 801d408:	6a1b      	ldr	r3, [r3, #32]
 801d40a:	091b      	lsrs	r3, r3, #4
 801d40c:	f003 0307 	and.w	r3, r3, #7
 801d410:	4904      	ldr	r1, [pc, #16]	@ (801d424 <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 801d412:	5ccb      	ldrb	r3, [r1, r3]
 801d414:	f003 031f 	and.w	r3, r3, #31
 801d418:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 801d41c:	4618      	mov	r0, r3
 801d41e:	bd80      	pop	{r7, pc}
 801d420:	58024400 	.word	0x58024400
 801d424:	080274a4 	.word	0x080274a4

0801d428 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 801d428:	b480      	push	{r7}
 801d42a:	b089      	sub	sp, #36	@ 0x24
 801d42c:	af00      	add	r7, sp, #0
 801d42e:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d430:	4ba1      	ldr	r3, [pc, #644]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d432:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d434:	f003 0303 	and.w	r3, r3, #3
 801d438:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 801d43a:	4b9f      	ldr	r3, [pc, #636]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d43c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d43e:	0b1b      	lsrs	r3, r3, #12
 801d440:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d444:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 801d446:	4b9c      	ldr	r3, [pc, #624]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d44a:	091b      	lsrs	r3, r3, #4
 801d44c:	f003 0301 	and.w	r3, r3, #1
 801d450:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 801d452:	4b99      	ldr	r3, [pc, #612]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d454:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801d456:	08db      	lsrs	r3, r3, #3
 801d458:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d45c:	693a      	ldr	r2, [r7, #16]
 801d45e:	fb02 f303 	mul.w	r3, r2, r3
 801d462:	ee07 3a90 	vmov	s15, r3
 801d466:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d46a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 801d46e:	697b      	ldr	r3, [r7, #20]
 801d470:	2b00      	cmp	r3, #0
 801d472:	f000 8111 	beq.w	801d698 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 801d476:	69bb      	ldr	r3, [r7, #24]
 801d478:	2b02      	cmp	r3, #2
 801d47a:	f000 8083 	beq.w	801d584 <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 801d47e:	69bb      	ldr	r3, [r7, #24]
 801d480:	2b02      	cmp	r3, #2
 801d482:	f200 80a1 	bhi.w	801d5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 801d486:	69bb      	ldr	r3, [r7, #24]
 801d488:	2b00      	cmp	r3, #0
 801d48a:	d003      	beq.n	801d494 <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 801d48c:	69bb      	ldr	r3, [r7, #24]
 801d48e:	2b01      	cmp	r3, #1
 801d490:	d056      	beq.n	801d540 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 801d492:	e099      	b.n	801d5c8 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d494:	4b88      	ldr	r3, [pc, #544]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d496:	681b      	ldr	r3, [r3, #0]
 801d498:	f003 0320 	and.w	r3, r3, #32
 801d49c:	2b00      	cmp	r3, #0
 801d49e:	d02d      	beq.n	801d4fc <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d4a0:	4b85      	ldr	r3, [pc, #532]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d4a2:	681b      	ldr	r3, [r3, #0]
 801d4a4:	08db      	lsrs	r3, r3, #3
 801d4a6:	f003 0303 	and.w	r3, r3, #3
 801d4aa:	4a84      	ldr	r2, [pc, #528]	@ (801d6bc <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 801d4ac:	fa22 f303 	lsr.w	r3, r2, r3
 801d4b0:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d4b2:	68bb      	ldr	r3, [r7, #8]
 801d4b4:	ee07 3a90 	vmov	s15, r3
 801d4b8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4bc:	697b      	ldr	r3, [r7, #20]
 801d4be:	ee07 3a90 	vmov	s15, r3
 801d4c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d4c6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d4ca:	4b7b      	ldr	r3, [pc, #492]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d4cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d4ce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d4d2:	ee07 3a90 	vmov	s15, r3
 801d4d6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d4da:	ed97 6a03 	vldr	s12, [r7, #12]
 801d4de:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d4e2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d4e6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d4ea:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d4ee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d4f2:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d4f6:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d4fa:	e087      	b.n	801d60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d4fc:	697b      	ldr	r3, [r7, #20]
 801d4fe:	ee07 3a90 	vmov	s15, r3
 801d502:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d506:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801d6c4 <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 801d50a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d50e:	4b6a      	ldr	r3, [pc, #424]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d512:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d516:	ee07 3a90 	vmov	s15, r3
 801d51a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d51e:	ed97 6a03 	vldr	s12, [r7, #12]
 801d522:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d526:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d52a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d52e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d532:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d536:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d53a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d53e:	e065      	b.n	801d60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d540:	697b      	ldr	r3, [r7, #20]
 801d542:	ee07 3a90 	vmov	s15, r3
 801d546:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d54a:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801d6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801d54e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d552:	4b59      	ldr	r3, [pc, #356]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d554:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d556:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d55a:	ee07 3a90 	vmov	s15, r3
 801d55e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d562:	ed97 6a03 	vldr	s12, [r7, #12]
 801d566:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d56a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d56e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d572:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d576:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d57a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d57e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d582:	e043      	b.n	801d60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d584:	697b      	ldr	r3, [r7, #20]
 801d586:	ee07 3a90 	vmov	s15, r3
 801d58a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d58e:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801d6cc <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 801d592:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d596:	4b48      	ldr	r3, [pc, #288]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d598:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d59a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d59e:	ee07 3a90 	vmov	s15, r3
 801d5a2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5a6:	ed97 6a03 	vldr	s12, [r7, #12]
 801d5aa:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d5ae:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d5b2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d5b6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d5ba:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d5be:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d5c2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d5c6:	e021      	b.n	801d60c <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 801d5c8:	697b      	ldr	r3, [r7, #20]
 801d5ca:	ee07 3a90 	vmov	s15, r3
 801d5ce:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d5d2:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d6c8 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 801d5d6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d5da:	4b37      	ldr	r3, [pc, #220]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d5dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d5de:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d5e2:	ee07 3a90 	vmov	s15, r3
 801d5e6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d5ea:	ed97 6a03 	vldr	s12, [r7, #12]
 801d5ee:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801d6c0 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 801d5f2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d5f6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d5fa:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d5fe:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d602:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d606:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d60a:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 801d60c:	4b2a      	ldr	r3, [pc, #168]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d60e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d610:	0a5b      	lsrs	r3, r3, #9
 801d612:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d616:	ee07 3a90 	vmov	s15, r3
 801d61a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d61e:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d622:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d626:	edd7 6a07 	vldr	s13, [r7, #28]
 801d62a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d62e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d632:	ee17 2a90 	vmov	r2, s15
 801d636:	687b      	ldr	r3, [r7, #4]
 801d638:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 801d63a:	4b1f      	ldr	r3, [pc, #124]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d63e:	0c1b      	lsrs	r3, r3, #16
 801d640:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d644:	ee07 3a90 	vmov	s15, r3
 801d648:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d64c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d650:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d654:	edd7 6a07 	vldr	s13, [r7, #28]
 801d658:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d65c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d660:	ee17 2a90 	vmov	r2, s15
 801d664:	687b      	ldr	r3, [r7, #4]
 801d666:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 801d668:	4b13      	ldr	r3, [pc, #76]	@ (801d6b8 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 801d66a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801d66c:	0e1b      	lsrs	r3, r3, #24
 801d66e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d672:	ee07 3a90 	vmov	s15, r3
 801d676:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d67a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d67e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d682:	edd7 6a07 	vldr	s13, [r7, #28]
 801d686:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d68a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d68e:	ee17 2a90 	vmov	r2, s15
 801d692:	687b      	ldr	r3, [r7, #4]
 801d694:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 801d696:	e008      	b.n	801d6aa <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 801d698:	687b      	ldr	r3, [r7, #4]
 801d69a:	2200      	movs	r2, #0
 801d69c:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 801d69e:	687b      	ldr	r3, [r7, #4]
 801d6a0:	2200      	movs	r2, #0
 801d6a2:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 801d6a4:	687b      	ldr	r3, [r7, #4]
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	609a      	str	r2, [r3, #8]
}
 801d6aa:	bf00      	nop
 801d6ac:	3724      	adds	r7, #36	@ 0x24
 801d6ae:	46bd      	mov	sp, r7
 801d6b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d6b4:	4770      	bx	lr
 801d6b6:	bf00      	nop
 801d6b8:	58024400 	.word	0x58024400
 801d6bc:	03d09000 	.word	0x03d09000
 801d6c0:	46000000 	.word	0x46000000
 801d6c4:	4c742400 	.word	0x4c742400
 801d6c8:	4a742400 	.word	0x4a742400
 801d6cc:	4bbebc20 	.word	0x4bbebc20

0801d6d0 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 801d6d0:	b480      	push	{r7}
 801d6d2:	b089      	sub	sp, #36	@ 0x24
 801d6d4:	af00      	add	r7, sp, #0
 801d6d6:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d6d8:	4ba1      	ldr	r3, [pc, #644]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d6da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6dc:	f003 0303 	and.w	r3, r3, #3
 801d6e0:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 801d6e2:	4b9f      	ldr	r3, [pc, #636]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d6e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d6e6:	0d1b      	lsrs	r3, r3, #20
 801d6e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d6ec:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 801d6ee:	4b9c      	ldr	r3, [pc, #624]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d6f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d6f2:	0a1b      	lsrs	r3, r3, #8
 801d6f4:	f003 0301 	and.w	r3, r3, #1
 801d6f8:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 801d6fa:	4b99      	ldr	r3, [pc, #612]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d6fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801d6fe:	08db      	lsrs	r3, r3, #3
 801d700:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d704:	693a      	ldr	r2, [r7, #16]
 801d706:	fb02 f303 	mul.w	r3, r2, r3
 801d70a:	ee07 3a90 	vmov	s15, r3
 801d70e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d712:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 801d716:	697b      	ldr	r3, [r7, #20]
 801d718:	2b00      	cmp	r3, #0
 801d71a:	f000 8111 	beq.w	801d940 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 801d71e:	69bb      	ldr	r3, [r7, #24]
 801d720:	2b02      	cmp	r3, #2
 801d722:	f000 8083 	beq.w	801d82c <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 801d726:	69bb      	ldr	r3, [r7, #24]
 801d728:	2b02      	cmp	r3, #2
 801d72a:	f200 80a1 	bhi.w	801d870 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 801d72e:	69bb      	ldr	r3, [r7, #24]
 801d730:	2b00      	cmp	r3, #0
 801d732:	d003      	beq.n	801d73c <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 801d734:	69bb      	ldr	r3, [r7, #24]
 801d736:	2b01      	cmp	r3, #1
 801d738:	d056      	beq.n	801d7e8 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 801d73a:	e099      	b.n	801d870 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d73c:	4b88      	ldr	r3, [pc, #544]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d73e:	681b      	ldr	r3, [r3, #0]
 801d740:	f003 0320 	and.w	r3, r3, #32
 801d744:	2b00      	cmp	r3, #0
 801d746:	d02d      	beq.n	801d7a4 <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d748:	4b85      	ldr	r3, [pc, #532]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d74a:	681b      	ldr	r3, [r3, #0]
 801d74c:	08db      	lsrs	r3, r3, #3
 801d74e:	f003 0303 	and.w	r3, r3, #3
 801d752:	4a84      	ldr	r2, [pc, #528]	@ (801d964 <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 801d754:	fa22 f303 	lsr.w	r3, r2, r3
 801d758:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d75a:	68bb      	ldr	r3, [r7, #8]
 801d75c:	ee07 3a90 	vmov	s15, r3
 801d760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d764:	697b      	ldr	r3, [r7, #20]
 801d766:	ee07 3a90 	vmov	s15, r3
 801d76a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d76e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d772:	4b7b      	ldr	r3, [pc, #492]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d776:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d77a:	ee07 3a90 	vmov	s15, r3
 801d77e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d782:	ed97 6a03 	vldr	s12, [r7, #12]
 801d786:	eddf 5a78 	vldr	s11, [pc, #480]	@ 801d968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d78a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d78e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d792:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d796:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d79a:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d79e:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801d7a2:	e087      	b.n	801d8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d7a4:	697b      	ldr	r3, [r7, #20]
 801d7a6:	ee07 3a90 	vmov	s15, r3
 801d7aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7ae:	eddf 6a6f 	vldr	s13, [pc, #444]	@ 801d96c <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 801d7b2:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7b6:	4b6a      	ldr	r3, [pc, #424]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d7b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d7ba:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d7be:	ee07 3a90 	vmov	s15, r3
 801d7c2:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d7c6:	ed97 6a03 	vldr	s12, [r7, #12]
 801d7ca:	eddf 5a67 	vldr	s11, [pc, #412]	@ 801d968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d7ce:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d7d2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d7d6:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d7da:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d7de:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d7e2:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d7e6:	e065      	b.n	801d8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d7e8:	697b      	ldr	r3, [r7, #20]
 801d7ea:	ee07 3a90 	vmov	s15, r3
 801d7ee:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d7f2:	eddf 6a5f 	vldr	s13, [pc, #380]	@ 801d970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d7f6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d7fa:	4b59      	ldr	r3, [pc, #356]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d7fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d7fe:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d802:	ee07 3a90 	vmov	s15, r3
 801d806:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d80a:	ed97 6a03 	vldr	s12, [r7, #12]
 801d80e:	eddf 5a56 	vldr	s11, [pc, #344]	@ 801d968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d812:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d816:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d81a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d81e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d822:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d826:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d82a:	e043      	b.n	801d8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d82c:	697b      	ldr	r3, [r7, #20]
 801d82e:	ee07 3a90 	vmov	s15, r3
 801d832:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d836:	eddf 6a4f 	vldr	s13, [pc, #316]	@ 801d974 <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 801d83a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d83e:	4b48      	ldr	r3, [pc, #288]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d840:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d842:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d846:	ee07 3a90 	vmov	s15, r3
 801d84a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d84e:	ed97 6a03 	vldr	s12, [r7, #12]
 801d852:	eddf 5a45 	vldr	s11, [pc, #276]	@ 801d968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d856:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d85a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d85e:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d862:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d866:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d86a:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d86e:	e021      	b.n	801d8b4 <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 801d870:	697b      	ldr	r3, [r7, #20]
 801d872:	ee07 3a90 	vmov	s15, r3
 801d876:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d87a:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 801d970 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 801d87e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801d882:	4b37      	ldr	r3, [pc, #220]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d886:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801d88a:	ee07 3a90 	vmov	s15, r3
 801d88e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801d892:	ed97 6a03 	vldr	s12, [r7, #12]
 801d896:	eddf 5a34 	vldr	s11, [pc, #208]	@ 801d968 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 801d89a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801d89e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801d8a2:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801d8a6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801d8aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 801d8ae:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801d8b2:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 801d8b4:	4b2a      	ldr	r3, [pc, #168]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d8b6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d8b8:	0a5b      	lsrs	r3, r3, #9
 801d8ba:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d8be:	ee07 3a90 	vmov	s15, r3
 801d8c2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8c6:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d8ca:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8ce:	edd7 6a07 	vldr	s13, [r7, #28]
 801d8d2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d8d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d8da:	ee17 2a90 	vmov	r2, s15
 801d8de:	687b      	ldr	r3, [r7, #4]
 801d8e0:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 801d8e2:	4b1f      	ldr	r3, [pc, #124]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d8e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d8e6:	0c1b      	lsrs	r3, r3, #16
 801d8e8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d8ec:	ee07 3a90 	vmov	s15, r3
 801d8f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d8f4:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d8f8:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d8fc:	edd7 6a07 	vldr	s13, [r7, #28]
 801d900:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d904:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d908:	ee17 2a90 	vmov	r2, s15
 801d90c:	687b      	ldr	r3, [r7, #4]
 801d90e:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 801d910:	4b13      	ldr	r3, [pc, #76]	@ (801d960 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 801d912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801d914:	0e1b      	lsrs	r3, r3, #24
 801d916:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801d91a:	ee07 3a90 	vmov	s15, r3
 801d91e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d922:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801d926:	ee37 7a87 	vadd.f32	s14, s15, s14
 801d92a:	edd7 6a07 	vldr	s13, [r7, #28]
 801d92e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801d932:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801d936:	ee17 2a90 	vmov	r2, s15
 801d93a:	687b      	ldr	r3, [r7, #4]
 801d93c:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 801d93e:	e008      	b.n	801d952 <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 801d940:	687b      	ldr	r3, [r7, #4]
 801d942:	2200      	movs	r2, #0
 801d944:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 801d946:	687b      	ldr	r3, [r7, #4]
 801d948:	2200      	movs	r2, #0
 801d94a:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 801d94c:	687b      	ldr	r3, [r7, #4]
 801d94e:	2200      	movs	r2, #0
 801d950:	609a      	str	r2, [r3, #8]
}
 801d952:	bf00      	nop
 801d954:	3724      	adds	r7, #36	@ 0x24
 801d956:	46bd      	mov	sp, r7
 801d958:	f85d 7b04 	ldr.w	r7, [sp], #4
 801d95c:	4770      	bx	lr
 801d95e:	bf00      	nop
 801d960:	58024400 	.word	0x58024400
 801d964:	03d09000 	.word	0x03d09000
 801d968:	46000000 	.word	0x46000000
 801d96c:	4c742400 	.word	0x4c742400
 801d970:	4a742400 	.word	0x4a742400
 801d974:	4bbebc20 	.word	0x4bbebc20

0801d978 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 801d978:	b480      	push	{r7}
 801d97a:	b089      	sub	sp, #36	@ 0x24
 801d97c:	af00      	add	r7, sp, #0
 801d97e:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 801d980:	4ba0      	ldr	r3, [pc, #640]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d982:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d984:	f003 0303 	and.w	r3, r3, #3
 801d988:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 801d98a:	4b9e      	ldr	r3, [pc, #632]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d98c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801d98e:	091b      	lsrs	r3, r3, #4
 801d990:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 801d994:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 801d996:	4b9b      	ldr	r3, [pc, #620]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d998:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801d99a:	f003 0301 	and.w	r3, r3, #1
 801d99e:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 801d9a0:	4b98      	ldr	r3, [pc, #608]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d9a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801d9a4:	08db      	lsrs	r3, r3, #3
 801d9a6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801d9aa:	693a      	ldr	r2, [r7, #16]
 801d9ac:	fb02 f303 	mul.w	r3, r2, r3
 801d9b0:	ee07 3a90 	vmov	s15, r3
 801d9b4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801d9b8:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 801d9bc:	697b      	ldr	r3, [r7, #20]
 801d9be:	2b00      	cmp	r3, #0
 801d9c0:	f000 8111 	beq.w	801dbe6 <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 801d9c4:	69bb      	ldr	r3, [r7, #24]
 801d9c6:	2b02      	cmp	r3, #2
 801d9c8:	f000 8083 	beq.w	801dad2 <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 801d9cc:	69bb      	ldr	r3, [r7, #24]
 801d9ce:	2b02      	cmp	r3, #2
 801d9d0:	f200 80a1 	bhi.w	801db16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 801d9d4:	69bb      	ldr	r3, [r7, #24]
 801d9d6:	2b00      	cmp	r3, #0
 801d9d8:	d003      	beq.n	801d9e2 <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 801d9da:	69bb      	ldr	r3, [r7, #24]
 801d9dc:	2b01      	cmp	r3, #1
 801d9de:	d056      	beq.n	801da8e <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 801d9e0:	e099      	b.n	801db16 <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 801d9e2:	4b88      	ldr	r3, [pc, #544]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d9e4:	681b      	ldr	r3, [r3, #0]
 801d9e6:	f003 0320 	and.w	r3, r3, #32
 801d9ea:	2b00      	cmp	r3, #0
 801d9ec:	d02d      	beq.n	801da4a <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 801d9ee:	4b85      	ldr	r3, [pc, #532]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801d9f0:	681b      	ldr	r3, [r3, #0]
 801d9f2:	08db      	lsrs	r3, r3, #3
 801d9f4:	f003 0303 	and.w	r3, r3, #3
 801d9f8:	4a83      	ldr	r2, [pc, #524]	@ (801dc08 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 801d9fa:	fa22 f303 	lsr.w	r3, r2, r3
 801d9fe:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801da00:	68bb      	ldr	r3, [r7, #8]
 801da02:	ee07 3a90 	vmov	s15, r3
 801da06:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da0a:	697b      	ldr	r3, [r7, #20]
 801da0c:	ee07 3a90 	vmov	s15, r3
 801da10:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da14:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da18:	4b7a      	ldr	r3, [pc, #488]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801da1a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da1c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da20:	ee07 3a90 	vmov	s15, r3
 801da24:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da28:	ed97 6a03 	vldr	s12, [r7, #12]
 801da2c:	eddf 5a77 	vldr	s11, [pc, #476]	@ 801dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801da30:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801da34:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da38:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801da3c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801da40:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da44:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 801da48:	e087      	b.n	801db5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801da4a:	697b      	ldr	r3, [r7, #20]
 801da4c:	ee07 3a90 	vmov	s15, r3
 801da50:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da54:	eddf 6a6e 	vldr	s13, [pc, #440]	@ 801dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801da58:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801da5c:	4b69      	ldr	r3, [pc, #420]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801da5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801da60:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801da64:	ee07 3a90 	vmov	s15, r3
 801da68:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801da6c:	ed97 6a03 	vldr	s12, [r7, #12]
 801da70:	eddf 5a66 	vldr	s11, [pc, #408]	@ 801dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801da74:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801da78:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801da7c:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801da80:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801da84:	ee67 7a27 	vmul.f32	s15, s14, s15
 801da88:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801da8c:	e065      	b.n	801db5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801da8e:	697b      	ldr	r3, [r7, #20]
 801da90:	ee07 3a90 	vmov	s15, r3
 801da94:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801da98:	eddf 6a5e 	vldr	s13, [pc, #376]	@ 801dc14 <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 801da9c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801daa0:	4b58      	ldr	r3, [pc, #352]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801daa2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801daa4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801daa8:	ee07 3a90 	vmov	s15, r3
 801daac:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801dab0:	ed97 6a03 	vldr	s12, [r7, #12]
 801dab4:	eddf 5a55 	vldr	s11, [pc, #340]	@ 801dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801dab8:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801dabc:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801dac0:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801dac4:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801dac8:	ee67 7a27 	vmul.f32	s15, s14, s15
 801dacc:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801dad0:	e043      	b.n	801db5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801dad2:	697b      	ldr	r3, [r7, #20]
 801dad4:	ee07 3a90 	vmov	s15, r3
 801dad8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dadc:	eddf 6a4e 	vldr	s13, [pc, #312]	@ 801dc18 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 801dae0:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801dae4:	4b47      	ldr	r3, [pc, #284]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dae6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dae8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801daec:	ee07 3a90 	vmov	s15, r3
 801daf0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801daf4:	ed97 6a03 	vldr	s12, [r7, #12]
 801daf8:	eddf 5a44 	vldr	s11, [pc, #272]	@ 801dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801dafc:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db00:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db04:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db08:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db10:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db14:	e021      	b.n	801db5a <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 801db16:	697b      	ldr	r3, [r7, #20]
 801db18:	ee07 3a90 	vmov	s15, r3
 801db1c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db20:	eddf 6a3b 	vldr	s13, [pc, #236]	@ 801dc10 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 801db24:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 801db28:	4b36      	ldr	r3, [pc, #216]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801db2a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801db2c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 801db30:	ee07 3a90 	vmov	s15, r3
 801db34:	eef8 6a67 	vcvt.f32.u32	s13, s15
 801db38:	ed97 6a03 	vldr	s12, [r7, #12]
 801db3c:	eddf 5a33 	vldr	s11, [pc, #204]	@ 801dc0c <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 801db40:	eec6 7a25 	vdiv.f32	s15, s12, s11
 801db44:	ee76 7aa7 	vadd.f32	s15, s13, s15
 801db48:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 801db4c:	ee77 7aa6 	vadd.f32	s15, s15, s13
 801db50:	ee67 7a27 	vmul.f32	s15, s14, s15
 801db54:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 801db58:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 801db5a:	4b2a      	ldr	r3, [pc, #168]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801db5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801db5e:	0a5b      	lsrs	r3, r3, #9
 801db60:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db64:	ee07 3a90 	vmov	s15, r3
 801db68:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db6c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801db70:	ee37 7a87 	vadd.f32	s14, s15, s14
 801db74:	edd7 6a07 	vldr	s13, [r7, #28]
 801db78:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801db7c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801db80:	ee17 2a90 	vmov	r2, s15
 801db84:	687b      	ldr	r3, [r7, #4]
 801db86:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 801db88:	4b1e      	ldr	r3, [pc, #120]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801db8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801db8c:	0c1b      	lsrs	r3, r3, #16
 801db8e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801db92:	ee07 3a90 	vmov	s15, r3
 801db96:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801db9a:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801db9e:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dba2:	edd7 6a07 	vldr	s13, [r7, #28]
 801dba6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dbaa:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dbae:	ee17 2a90 	vmov	r2, s15
 801dbb2:	687b      	ldr	r3, [r7, #4]
 801dbb4:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 801dbb6:	4b13      	ldr	r3, [pc, #76]	@ (801dc04 <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 801dbb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801dbba:	0e1b      	lsrs	r3, r3, #24
 801dbbc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 801dbc0:	ee07 3a90 	vmov	s15, r3
 801dbc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 801dbc8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 801dbcc:	ee37 7a87 	vadd.f32	s14, s15, s14
 801dbd0:	edd7 6a07 	vldr	s13, [r7, #28]
 801dbd4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 801dbd8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 801dbdc:	ee17 2a90 	vmov	r2, s15
 801dbe0:	687b      	ldr	r3, [r7, #4]
 801dbe2:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 801dbe4:	e008      	b.n	801dbf8 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 801dbe6:	687b      	ldr	r3, [r7, #4]
 801dbe8:	2200      	movs	r2, #0
 801dbea:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 801dbec:	687b      	ldr	r3, [r7, #4]
 801dbee:	2200      	movs	r2, #0
 801dbf0:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 801dbf2:	687b      	ldr	r3, [r7, #4]
 801dbf4:	2200      	movs	r2, #0
 801dbf6:	609a      	str	r2, [r3, #8]
}
 801dbf8:	bf00      	nop
 801dbfa:	3724      	adds	r7, #36	@ 0x24
 801dbfc:	46bd      	mov	sp, r7
 801dbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 801dc02:	4770      	bx	lr
 801dc04:	58024400 	.word	0x58024400
 801dc08:	03d09000 	.word	0x03d09000
 801dc0c:	46000000 	.word	0x46000000
 801dc10:	4c742400 	.word	0x4c742400
 801dc14:	4a742400 	.word	0x4a742400
 801dc18:	4bbebc20 	.word	0x4bbebc20

0801dc1c <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(const RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 801dc1c:	b580      	push	{r7, lr}
 801dc1e:	b084      	sub	sp, #16
 801dc20:	af00      	add	r7, sp, #0
 801dc22:	6078      	str	r0, [r7, #4]
 801dc24:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801dc26:	2300      	movs	r3, #0
 801dc28:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801dc2a:	4b53      	ldr	r3, [pc, #332]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dc2c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc2e:	f003 0303 	and.w	r3, r3, #3
 801dc32:	2b03      	cmp	r3, #3
 801dc34:	d101      	bne.n	801dc3a <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 801dc36:	2301      	movs	r3, #1
 801dc38:	e099      	b.n	801dd6e <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 801dc3a:	4b4f      	ldr	r3, [pc, #316]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dc3c:	681b      	ldr	r3, [r3, #0]
 801dc3e:	4a4e      	ldr	r2, [pc, #312]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dc40:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801dc44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dc46:	f7f4 fa99 	bl	801217c <HAL_GetTick>
 801dc4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801dc4c:	e008      	b.n	801dc60 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801dc4e:	f7f4 fa95 	bl	801217c <HAL_GetTick>
 801dc52:	4602      	mov	r2, r0
 801dc54:	68bb      	ldr	r3, [r7, #8]
 801dc56:	1ad3      	subs	r3, r2, r3
 801dc58:	2b02      	cmp	r3, #2
 801dc5a:	d901      	bls.n	801dc60 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 801dc5c:	2303      	movs	r3, #3
 801dc5e:	e086      	b.n	801dd6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 801dc60:	4b45      	ldr	r3, [pc, #276]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dc62:	681b      	ldr	r3, [r3, #0]
 801dc64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801dc68:	2b00      	cmp	r3, #0
 801dc6a:	d1f0      	bne.n	801dc4e <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 801dc6c:	4b42      	ldr	r3, [pc, #264]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dc6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dc70:	f423 327c 	bic.w	r2, r3, #258048	@ 0x3f000
 801dc74:	687b      	ldr	r3, [r7, #4]
 801dc76:	681b      	ldr	r3, [r3, #0]
 801dc78:	031b      	lsls	r3, r3, #12
 801dc7a:	493f      	ldr	r1, [pc, #252]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dc7c:	4313      	orrs	r3, r2
 801dc7e:	628b      	str	r3, [r1, #40]	@ 0x28
 801dc80:	687b      	ldr	r3, [r7, #4]
 801dc82:	685b      	ldr	r3, [r3, #4]
 801dc84:	3b01      	subs	r3, #1
 801dc86:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801dc8a:	687b      	ldr	r3, [r7, #4]
 801dc8c:	689b      	ldr	r3, [r3, #8]
 801dc8e:	3b01      	subs	r3, #1
 801dc90:	025b      	lsls	r3, r3, #9
 801dc92:	b29b      	uxth	r3, r3
 801dc94:	431a      	orrs	r2, r3
 801dc96:	687b      	ldr	r3, [r7, #4]
 801dc98:	68db      	ldr	r3, [r3, #12]
 801dc9a:	3b01      	subs	r3, #1
 801dc9c:	041b      	lsls	r3, r3, #16
 801dc9e:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801dca2:	431a      	orrs	r2, r3
 801dca4:	687b      	ldr	r3, [r7, #4]
 801dca6:	691b      	ldr	r3, [r3, #16]
 801dca8:	3b01      	subs	r3, #1
 801dcaa:	061b      	lsls	r3, r3, #24
 801dcac:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801dcb0:	4931      	ldr	r1, [pc, #196]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcb2:	4313      	orrs	r3, r2
 801dcb4:	638b      	str	r3, [r1, #56]	@ 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 801dcb6:	4b30      	ldr	r3, [pc, #192]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcb8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 801dcbe:	687b      	ldr	r3, [r7, #4]
 801dcc0:	695b      	ldr	r3, [r3, #20]
 801dcc2:	492d      	ldr	r1, [pc, #180]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcc4:	4313      	orrs	r3, r2
 801dcc6:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 801dcc8:	4b2b      	ldr	r3, [pc, #172]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dccc:	f023 0220 	bic.w	r2, r3, #32
 801dcd0:	687b      	ldr	r3, [r7, #4]
 801dcd2:	699b      	ldr	r3, [r3, #24]
 801dcd4:	4928      	ldr	r1, [pc, #160]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcd6:	4313      	orrs	r3, r2
 801dcd8:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 801dcda:	4b27      	ldr	r3, [pc, #156]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcde:	4a26      	ldr	r2, [pc, #152]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dce0:	f023 0310 	bic.w	r3, r3, #16
 801dce4:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 801dce6:	4b24      	ldr	r3, [pc, #144]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dce8:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801dcea:	4b24      	ldr	r3, [pc, #144]	@ (801dd7c <RCCEx_PLL2_Config+0x160>)
 801dcec:	4013      	ands	r3, r2
 801dcee:	687a      	ldr	r2, [r7, #4]
 801dcf0:	69d2      	ldr	r2, [r2, #28]
 801dcf2:	00d2      	lsls	r2, r2, #3
 801dcf4:	4920      	ldr	r1, [pc, #128]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcf6:	4313      	orrs	r3, r2
 801dcf8:	63cb      	str	r3, [r1, #60]	@ 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 801dcfa:	4b1f      	ldr	r3, [pc, #124]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dcfc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dcfe:	4a1e      	ldr	r2, [pc, #120]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd00:	f043 0310 	orr.w	r3, r3, #16
 801dd04:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801dd06:	683b      	ldr	r3, [r7, #0]
 801dd08:	2b00      	cmp	r3, #0
 801dd0a:	d106      	bne.n	801dd1a <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 801dd0c:	4b1a      	ldr	r3, [pc, #104]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd10:	4a19      	ldr	r2, [pc, #100]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd12:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 801dd16:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801dd18:	e00f      	b.n	801dd3a <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801dd1a:	683b      	ldr	r3, [r7, #0]
 801dd1c:	2b01      	cmp	r3, #1
 801dd1e:	d106      	bne.n	801dd2e <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 801dd20:	4b15      	ldr	r3, [pc, #84]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd22:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd24:	4a14      	ldr	r2, [pc, #80]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801dd2a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801dd2c:	e005      	b.n	801dd3a <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 801dd2e:	4b12      	ldr	r3, [pc, #72]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801dd32:	4a11      	ldr	r2, [pc, #68]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd34:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 801dd38:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 801dd3a:	4b0f      	ldr	r3, [pc, #60]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd3c:	681b      	ldr	r3, [r3, #0]
 801dd3e:	4a0e      	ldr	r2, [pc, #56]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd40:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 801dd44:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801dd46:	f7f4 fa19 	bl	801217c <HAL_GetTick>
 801dd4a:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801dd4c:	e008      	b.n	801dd60 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 801dd4e:	f7f4 fa15 	bl	801217c <HAL_GetTick>
 801dd52:	4602      	mov	r2, r0
 801dd54:	68bb      	ldr	r3, [r7, #8]
 801dd56:	1ad3      	subs	r3, r2, r3
 801dd58:	2b02      	cmp	r3, #2
 801dd5a:	d901      	bls.n	801dd60 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 801dd5c:	2303      	movs	r3, #3
 801dd5e:	e006      	b.n	801dd6e <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 801dd60:	4b05      	ldr	r3, [pc, #20]	@ (801dd78 <RCCEx_PLL2_Config+0x15c>)
 801dd62:	681b      	ldr	r3, [r3, #0]
 801dd64:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 801dd68:	2b00      	cmp	r3, #0
 801dd6a:	d0f0      	beq.n	801dd4e <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 801dd6c:	7bfb      	ldrb	r3, [r7, #15]
}
 801dd6e:	4618      	mov	r0, r3
 801dd70:	3710      	adds	r7, #16
 801dd72:	46bd      	mov	sp, r7
 801dd74:	bd80      	pop	{r7, pc}
 801dd76:	bf00      	nop
 801dd78:	58024400 	.word	0x58024400
 801dd7c:	ffff0007 	.word	0xffff0007

0801dd80 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(const RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 801dd80:	b580      	push	{r7, lr}
 801dd82:	b084      	sub	sp, #16
 801dd84:	af00      	add	r7, sp, #0
 801dd86:	6078      	str	r0, [r7, #4]
 801dd88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 801dd8a:	2300      	movs	r3, #0
 801dd8c:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 801dd8e:	4b53      	ldr	r3, [pc, #332]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dd90:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801dd92:	f003 0303 	and.w	r3, r3, #3
 801dd96:	2b03      	cmp	r3, #3
 801dd98:	d101      	bne.n	801dd9e <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 801dd9a:	2301      	movs	r3, #1
 801dd9c:	e099      	b.n	801ded2 <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 801dd9e:	4b4f      	ldr	r3, [pc, #316]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dda0:	681b      	ldr	r3, [r3, #0]
 801dda2:	4a4e      	ldr	r2, [pc, #312]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dda4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801dda8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801ddaa:	f7f4 f9e7 	bl	801217c <HAL_GetTick>
 801ddae:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ddb0:	e008      	b.n	801ddc4 <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801ddb2:	f7f4 f9e3 	bl	801217c <HAL_GetTick>
 801ddb6:	4602      	mov	r2, r0
 801ddb8:	68bb      	ldr	r3, [r7, #8]
 801ddba:	1ad3      	subs	r3, r2, r3
 801ddbc:	2b02      	cmp	r3, #2
 801ddbe:	d901      	bls.n	801ddc4 <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 801ddc0:	2303      	movs	r3, #3
 801ddc2:	e086      	b.n	801ded2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 801ddc4:	4b45      	ldr	r3, [pc, #276]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801ddc6:	681b      	ldr	r3, [r3, #0]
 801ddc8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801ddcc:	2b00      	cmp	r3, #0
 801ddce:	d1f0      	bne.n	801ddb2 <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 801ddd0:	4b42      	ldr	r3, [pc, #264]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801ddd2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ddd4:	f023 727c 	bic.w	r2, r3, #66060288	@ 0x3f00000
 801ddd8:	687b      	ldr	r3, [r7, #4]
 801ddda:	681b      	ldr	r3, [r3, #0]
 801dddc:	051b      	lsls	r3, r3, #20
 801ddde:	493f      	ldr	r1, [pc, #252]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dde0:	4313      	orrs	r3, r2
 801dde2:	628b      	str	r3, [r1, #40]	@ 0x28
 801dde4:	687b      	ldr	r3, [r7, #4]
 801dde6:	685b      	ldr	r3, [r3, #4]
 801dde8:	3b01      	subs	r3, #1
 801ddea:	f3c3 0208 	ubfx	r2, r3, #0, #9
 801ddee:	687b      	ldr	r3, [r7, #4]
 801ddf0:	689b      	ldr	r3, [r3, #8]
 801ddf2:	3b01      	subs	r3, #1
 801ddf4:	025b      	lsls	r3, r3, #9
 801ddf6:	b29b      	uxth	r3, r3
 801ddf8:	431a      	orrs	r2, r3
 801ddfa:	687b      	ldr	r3, [r7, #4]
 801ddfc:	68db      	ldr	r3, [r3, #12]
 801ddfe:	3b01      	subs	r3, #1
 801de00:	041b      	lsls	r3, r3, #16
 801de02:	f403 03fe 	and.w	r3, r3, #8323072	@ 0x7f0000
 801de06:	431a      	orrs	r2, r3
 801de08:	687b      	ldr	r3, [r7, #4]
 801de0a:	691b      	ldr	r3, [r3, #16]
 801de0c:	3b01      	subs	r3, #1
 801de0e:	061b      	lsls	r3, r3, #24
 801de10:	f003 43fe 	and.w	r3, r3, #2130706432	@ 0x7f000000
 801de14:	4931      	ldr	r1, [pc, #196]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de16:	4313      	orrs	r3, r2
 801de18:	640b      	str	r3, [r1, #64]	@ 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 801de1a:	4b30      	ldr	r3, [pc, #192]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de1e:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 801de22:	687b      	ldr	r3, [r7, #4]
 801de24:	695b      	ldr	r3, [r3, #20]
 801de26:	492d      	ldr	r1, [pc, #180]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de28:	4313      	orrs	r3, r2
 801de2a:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 801de2c:	4b2b      	ldr	r3, [pc, #172]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de30:	f423 7200 	bic.w	r2, r3, #512	@ 0x200
 801de34:	687b      	ldr	r3, [r7, #4]
 801de36:	699b      	ldr	r3, [r3, #24]
 801de38:	4928      	ldr	r1, [pc, #160]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de3a:	4313      	orrs	r3, r2
 801de3c:	62cb      	str	r3, [r1, #44]	@ 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 801de3e:	4b27      	ldr	r3, [pc, #156]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de40:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de42:	4a26      	ldr	r2, [pc, #152]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de44:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801de48:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 801de4a:	4b24      	ldr	r3, [pc, #144]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de4c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801de4e:	4b24      	ldr	r3, [pc, #144]	@ (801dee0 <RCCEx_PLL3_Config+0x160>)
 801de50:	4013      	ands	r3, r2
 801de52:	687a      	ldr	r2, [r7, #4]
 801de54:	69d2      	ldr	r2, [r2, #28]
 801de56:	00d2      	lsls	r2, r2, #3
 801de58:	4920      	ldr	r1, [pc, #128]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de5a:	4313      	orrs	r3, r2
 801de5c:	644b      	str	r3, [r1, #68]	@ 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 801de5e:	4b1f      	ldr	r3, [pc, #124]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de62:	4a1e      	ldr	r2, [pc, #120]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de64:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801de68:	62d3      	str	r3, [r2, #44]	@ 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 801de6a:	683b      	ldr	r3, [r7, #0]
 801de6c:	2b00      	cmp	r3, #0
 801de6e:	d106      	bne.n	801de7e <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 801de70:	4b1a      	ldr	r3, [pc, #104]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de72:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de74:	4a19      	ldr	r2, [pc, #100]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de76:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801de7a:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801de7c:	e00f      	b.n	801de9e <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 801de7e:	683b      	ldr	r3, [r7, #0]
 801de80:	2b01      	cmp	r3, #1
 801de82:	d106      	bne.n	801de92 <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 801de84:	4b15      	ldr	r3, [pc, #84]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de86:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de88:	4a14      	ldr	r2, [pc, #80]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de8a:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 801de8e:	62d3      	str	r3, [r2, #44]	@ 0x2c
 801de90:	e005      	b.n	801de9e <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 801de92:	4b12      	ldr	r3, [pc, #72]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801de96:	4a11      	ldr	r2, [pc, #68]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801de98:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801de9c:	62d3      	str	r3, [r2, #44]	@ 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 801de9e:	4b0f      	ldr	r3, [pc, #60]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dea0:	681b      	ldr	r3, [r3, #0]
 801dea2:	4a0e      	ldr	r2, [pc, #56]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dea4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801dea8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 801deaa:	f7f4 f967 	bl	801217c <HAL_GetTick>
 801deae:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801deb0:	e008      	b.n	801dec4 <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 801deb2:	f7f4 f963 	bl	801217c <HAL_GetTick>
 801deb6:	4602      	mov	r2, r0
 801deb8:	68bb      	ldr	r3, [r7, #8]
 801deba:	1ad3      	subs	r3, r2, r3
 801debc:	2b02      	cmp	r3, #2
 801debe:	d901      	bls.n	801dec4 <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 801dec0:	2303      	movs	r3, #3
 801dec2:	e006      	b.n	801ded2 <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 801dec4:	4b05      	ldr	r3, [pc, #20]	@ (801dedc <RCCEx_PLL3_Config+0x15c>)
 801dec6:	681b      	ldr	r3, [r3, #0]
 801dec8:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 801decc:	2b00      	cmp	r3, #0
 801dece:	d0f0      	beq.n	801deb2 <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 801ded0:	7bfb      	ldrb	r3, [r7, #15]
}
 801ded2:	4618      	mov	r0, r3
 801ded4:	3710      	adds	r7, #16
 801ded6:	46bd      	mov	sp, r7
 801ded8:	bd80      	pop	{r7, pc}
 801deda:	bf00      	nop
 801dedc:	58024400 	.word	0x58024400
 801dee0:	ffff0007 	.word	0xffff0007

0801dee4 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 801dee4:	b580      	push	{r7, lr}
 801dee6:	b08a      	sub	sp, #40	@ 0x28
 801dee8:	af00      	add	r7, sp, #0
 801deea:	6078      	str	r0, [r7, #4]
  uint32_t ckstr_bits;
  uint32_t syncen_bits;
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 801deec:	687b      	ldr	r3, [r7, #4]
 801deee:	2b00      	cmp	r3, #0
 801def0:	d101      	bne.n	801def6 <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 801def2:	2301      	movs	r3, #1
 801def4:	e28e      	b.n	801e414 <HAL_SAI_Init+0x530>
  assert_param(IS_SAI_BLOCK_FIRST_BIT(hsai->Init.FirstBit));
  assert_param(IS_SAI_BLOCK_CLOCK_STROBING(hsai->Init.ClockStrobing));
  assert_param(IS_SAI_BLOCK_SYNCHRO(hsai->Init.Synchro));
#if defined(SAI_VER_V2_X)
  /* SAI Peripheral version depends on STM32H7 device revision ID */
  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801def6:	f7f4 f971 	bl	80121dc <HAL_GetREVID>
  assert_param(IS_SAI_BLOCK_SLOT_NUMBER(hsai->SlotInit.SlotNumber));
  assert_param(IS_SAI_SLOT_ACTIVE(hsai->SlotInit.SlotActive));

  /* Check the SAI PDM parameters */
  assert_param(IS_FUNCTIONAL_STATE(hsai->Init.PdmInit.Activation));
  if (hsai->Init.PdmInit.Activation == ENABLE)
 801defa:	687b      	ldr	r3, [r7, #4]
 801defc:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801df00:	2b01      	cmp	r3, #1
 801df02:	d113      	bne.n	801df2c <HAL_SAI_Init+0x48>
  {
    assert_param(IS_SAI_PDM_MIC_PAIRS_NUMBER(hsai->Init.PdmInit.MicPairsNbr));
    assert_param(IS_SAI_PDM_CLOCK_ENABLE(hsai->Init.PdmInit.ClockEnable));
    /* Check that SAI sub-block is SAI1 or SAI4 sub-block A, in master RX mode with free protocol */
#if defined(SAI4)
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 801df04:	687b      	ldr	r3, [r7, #4]
 801df06:	681b      	ldr	r3, [r3, #0]
 801df08:	4a96      	ldr	r2, [pc, #600]	@ (801e164 <HAL_SAI_Init+0x280>)
 801df0a:	4293      	cmp	r3, r2
 801df0c:	d004      	beq.n	801df18 <HAL_SAI_Init+0x34>
 801df0e:	687b      	ldr	r3, [r7, #4]
 801df10:	681b      	ldr	r3, [r3, #0]
 801df12:	4a95      	ldr	r2, [pc, #596]	@ (801e168 <HAL_SAI_Init+0x284>)
 801df14:	4293      	cmp	r3, r2
 801df16:	d107      	bne.n	801df28 <HAL_SAI_Init+0x44>
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801df18:	687b      	ldr	r3, [r7, #4]
 801df1a:	685b      	ldr	r3, [r3, #4]
    if (((hsai->Instance != SAI1_Block_A) && (hsai->Instance != SAI4_Block_A)) ||
 801df1c:	2b01      	cmp	r3, #1
 801df1e:	d103      	bne.n	801df28 <HAL_SAI_Init+0x44>
         (hsai->Init.Protocol != SAI_FREE_PROTOCOL))
 801df20:	687b      	ldr	r3, [r7, #4]
 801df22:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
         (hsai->Init.AudioMode != SAI_MODEMASTER_RX) ||
 801df24:	2b00      	cmp	r3, #0
 801df26:	d001      	beq.n	801df2c <HAL_SAI_Init+0x48>
    {
      return HAL_ERROR;
 801df28:	2301      	movs	r3, #1
 801df2a:	e273      	b.n	801e414 <HAL_SAI_Init+0x530>
    }
#endif /* SAI4 */
  }

  /* Get the SAI base address according to the SAI handle */
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801df2c:	687b      	ldr	r3, [r7, #4]
 801df2e:	681b      	ldr	r3, [r3, #0]
 801df30:	4a8c      	ldr	r2, [pc, #560]	@ (801e164 <HAL_SAI_Init+0x280>)
 801df32:	4293      	cmp	r3, r2
 801df34:	d004      	beq.n	801df40 <HAL_SAI_Init+0x5c>
 801df36:	687b      	ldr	r3, [r7, #4]
 801df38:	681b      	ldr	r3, [r3, #0]
 801df3a:	4a8c      	ldr	r2, [pc, #560]	@ (801e16c <HAL_SAI_Init+0x288>)
 801df3c:	4293      	cmp	r3, r2
 801df3e:	d102      	bne.n	801df46 <HAL_SAI_Init+0x62>
  {
    SaiBaseAddress = SAI1;
 801df40:	4b8b      	ldr	r3, [pc, #556]	@ (801e170 <HAL_SAI_Init+0x28c>)
 801df42:	61bb      	str	r3, [r7, #24]
 801df44:	e028      	b.n	801df98 <HAL_SAI_Init+0xb4>
  }
#if defined(SAI2)
  else if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 801df46:	687b      	ldr	r3, [r7, #4]
 801df48:	681b      	ldr	r3, [r3, #0]
 801df4a:	4a8a      	ldr	r2, [pc, #552]	@ (801e174 <HAL_SAI_Init+0x290>)
 801df4c:	4293      	cmp	r3, r2
 801df4e:	d004      	beq.n	801df5a <HAL_SAI_Init+0x76>
 801df50:	687b      	ldr	r3, [r7, #4]
 801df52:	681b      	ldr	r3, [r3, #0]
 801df54:	4a88      	ldr	r2, [pc, #544]	@ (801e178 <HAL_SAI_Init+0x294>)
 801df56:	4293      	cmp	r3, r2
 801df58:	d102      	bne.n	801df60 <HAL_SAI_Init+0x7c>
  {
    SaiBaseAddress = SAI2;
 801df5a:	4b88      	ldr	r3, [pc, #544]	@ (801e17c <HAL_SAI_Init+0x298>)
 801df5c:	61bb      	str	r3, [r7, #24]
 801df5e:	e01b      	b.n	801df98 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI2 */
#if defined(SAI3)
  else if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 801df60:	687b      	ldr	r3, [r7, #4]
 801df62:	681b      	ldr	r3, [r3, #0]
 801df64:	4a86      	ldr	r2, [pc, #536]	@ (801e180 <HAL_SAI_Init+0x29c>)
 801df66:	4293      	cmp	r3, r2
 801df68:	d004      	beq.n	801df74 <HAL_SAI_Init+0x90>
 801df6a:	687b      	ldr	r3, [r7, #4]
 801df6c:	681b      	ldr	r3, [r3, #0]
 801df6e:	4a85      	ldr	r2, [pc, #532]	@ (801e184 <HAL_SAI_Init+0x2a0>)
 801df70:	4293      	cmp	r3, r2
 801df72:	d102      	bne.n	801df7a <HAL_SAI_Init+0x96>
  {
    SaiBaseAddress = SAI3;
 801df74:	4b84      	ldr	r3, [pc, #528]	@ (801e188 <HAL_SAI_Init+0x2a4>)
 801df76:	61bb      	str	r3, [r7, #24]
 801df78:	e00e      	b.n	801df98 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI3 */
#if defined(SAI4)
  else if ((hsai->Instance == SAI4_Block_A) || (hsai->Instance == SAI4_Block_B))
 801df7a:	687b      	ldr	r3, [r7, #4]
 801df7c:	681b      	ldr	r3, [r3, #0]
 801df7e:	4a7a      	ldr	r2, [pc, #488]	@ (801e168 <HAL_SAI_Init+0x284>)
 801df80:	4293      	cmp	r3, r2
 801df82:	d004      	beq.n	801df8e <HAL_SAI_Init+0xaa>
 801df84:	687b      	ldr	r3, [r7, #4]
 801df86:	681b      	ldr	r3, [r3, #0]
 801df88:	4a80      	ldr	r2, [pc, #512]	@ (801e18c <HAL_SAI_Init+0x2a8>)
 801df8a:	4293      	cmp	r3, r2
 801df8c:	d102      	bne.n	801df94 <HAL_SAI_Init+0xb0>
  {
    SaiBaseAddress = SAI4;
 801df8e:	4b80      	ldr	r3, [pc, #512]	@ (801e190 <HAL_SAI_Init+0x2ac>)
 801df90:	61bb      	str	r3, [r7, #24]
 801df92:	e001      	b.n	801df98 <HAL_SAI_Init+0xb4>
  }
#endif /* SAI4 */
  else
  {
    return HAL_ERROR;
 801df94:	2301      	movs	r3, #1
 801df96:	e23d      	b.n	801e414 <HAL_SAI_Init+0x530>
  }

  if (hsai->State == HAL_SAI_STATE_RESET)
 801df98:	687b      	ldr	r3, [r7, #4]
 801df9a:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801df9e:	b2db      	uxtb	r3, r3
 801dfa0:	2b00      	cmp	r3, #0
 801dfa2:	d106      	bne.n	801dfb2 <HAL_SAI_Init+0xce>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 801dfa4:	687b      	ldr	r3, [r7, #4]
 801dfa6:	2200      	movs	r2, #0
 801dfa8:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 801dfac:	6878      	ldr	r0, [r7, #4]
 801dfae:	f000 faa9 	bl	801e504 <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if(SAI_Disable(hsai) != HAL_OK)
 801dfb2:	6878      	ldr	r0, [r7, #4]
 801dfb4:	f000 fd0e 	bl	801e9d4 <SAI_Disable>
 801dfb8:	4603      	mov	r3, r0
 801dfba:	2b00      	cmp	r3, #0
 801dfbc:	d001      	beq.n	801dfc2 <HAL_SAI_Init+0xde>
  {
    return HAL_ERROR;
 801dfbe:	2301      	movs	r3, #1
 801dfc0:	e228      	b.n	801e414 <HAL_SAI_Init+0x530>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 801dfc2:	687b      	ldr	r3, [r7, #4]
 801dfc4:	2202      	movs	r2, #2
 801dfc6:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
  switch (hsai->Init.SynchroExt)
 801dfca:	687b      	ldr	r3, [r7, #4]
 801dfcc:	68db      	ldr	r3, [r3, #12]
 801dfce:	2b02      	cmp	r3, #2
 801dfd0:	d00c      	beq.n	801dfec <HAL_SAI_Init+0x108>
 801dfd2:	2b02      	cmp	r3, #2
 801dfd4:	d80d      	bhi.n	801dff2 <HAL_SAI_Init+0x10e>
 801dfd6:	2b00      	cmp	r3, #0
 801dfd8:	d002      	beq.n	801dfe0 <HAL_SAI_Init+0xfc>
 801dfda:	2b01      	cmp	r3, #1
 801dfdc:	d003      	beq.n	801dfe6 <HAL_SAI_Init+0x102>
 801dfde:	e008      	b.n	801dff2 <HAL_SAI_Init+0x10e>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 801dfe0:	2300      	movs	r3, #0
 801dfe2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801dfe4:	e008      	b.n	801dff8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 801dfe6:	2310      	movs	r3, #16
 801dfe8:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801dfea:	e005      	b.n	801dff8 <HAL_SAI_Init+0x114>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 801dfec:	2320      	movs	r3, #32
 801dfee:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801dff0:	e002      	b.n	801dff8 <HAL_SAI_Init+0x114>
    default:
      tmpregisterGCR = 0;
 801dff2:	2300      	movs	r3, #0
 801dff4:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801dff6:	bf00      	nop
  }

  switch (hsai->Init.Synchro)
 801dff8:	687b      	ldr	r3, [r7, #4]
 801dffa:	689b      	ldr	r3, [r3, #8]
 801dffc:	2b05      	cmp	r3, #5
 801dffe:	d832      	bhi.n	801e066 <HAL_SAI_Init+0x182>
 801e000:	a201      	add	r2, pc, #4	@ (adr r2, 801e008 <HAL_SAI_Init+0x124>)
 801e002:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801e006:	bf00      	nop
 801e008:	0801e021 	.word	0x0801e021
 801e00c:	0801e027 	.word	0x0801e027
 801e010:	0801e02f 	.word	0x0801e02f
 801e014:	0801e037 	.word	0x0801e037
 801e018:	0801e047 	.word	0x0801e047
 801e01c:	0801e057 	.word	0x0801e057
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 801e020:	2300      	movs	r3, #0
 801e022:	61fb      	str	r3, [r7, #28]
      break;
 801e024:	e022      	b.n	801e06c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 801e026:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801e02a:	61fb      	str	r3, [r7, #28]
      break;
 801e02c:	e01e      	b.n	801e06c <HAL_SAI_Init+0x188>
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801e02e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e032:	61fb      	str	r3, [r7, #28]
      break;
 801e034:	e01a      	b.n	801e06c <HAL_SAI_Init+0x188>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801e036:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e03a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 801e03c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e03e:	f043 0301 	orr.w	r3, r3, #1
 801e042:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801e044:	e012      	b.n	801e06c <HAL_SAI_Init+0x188>
#endif /* SAI2 */
#if defined(SAI3)
    case SAI_SYNCHRONOUS_EXT_SAI3 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801e046:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e04a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= SAI_GCR_SYNCIN_1;
 801e04c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e04e:	f043 0302 	orr.w	r3, r3, #2
 801e052:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801e054:	e00a      	b.n	801e06c <HAL_SAI_Init+0x188>
#endif /* SAI3 */
#if defined(SAI4)
    case SAI_SYNCHRONOUS_EXT_SAI4 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 801e056:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 801e05a:	61fb      	str	r3, [r7, #28]
      tmpregisterGCR |= (SAI_GCR_SYNCIN_1 | SAI_GCR_SYNCIN_0);
 801e05c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801e05e:	f043 0303 	orr.w	r3, r3, #3
 801e062:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 801e064:	e002      	b.n	801e06c <HAL_SAI_Init+0x188>
#endif /* SAI4 */
    default:
      syncen_bits = 0;
 801e066:	2300      	movs	r3, #0
 801e068:	61fb      	str	r3, [r7, #28]
      break;
 801e06a:	bf00      	nop
  }

  /* Set the SAI Block Synchro Configuration */
  SaiBaseAddress->GCR = tmpregisterGCR;
 801e06c:	69bb      	ldr	r3, [r7, #24]
 801e06e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801e070:	601a      	str	r2, [r3, #0]

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 801e072:	687b      	ldr	r3, [r7, #4]
 801e074:	6a1b      	ldr	r3, [r3, #32]
 801e076:	2b00      	cmp	r3, #0
 801e078:	f000 80c5 	beq.w	801e206 <HAL_SAI_Init+0x322>
  {
    uint32_t freq = 0;
 801e07c:	2300      	movs	r3, #0
 801e07e:	617b      	str	r3, [r7, #20]
    uint32_t tmpval;

    /* In this case, the MCKDIV value is calculated to get AudioFrequency */
    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 801e080:	687b      	ldr	r3, [r7, #4]
 801e082:	681b      	ldr	r3, [r3, #0]
 801e084:	4a37      	ldr	r2, [pc, #220]	@ (801e164 <HAL_SAI_Init+0x280>)
 801e086:	4293      	cmp	r3, r2
 801e088:	d004      	beq.n	801e094 <HAL_SAI_Init+0x1b0>
 801e08a:	687b      	ldr	r3, [r7, #4]
 801e08c:	681b      	ldr	r3, [r3, #0]
 801e08e:	4a37      	ldr	r2, [pc, #220]	@ (801e16c <HAL_SAI_Init+0x288>)
 801e090:	4293      	cmp	r3, r2
 801e092:	d106      	bne.n	801e0a2 <HAL_SAI_Init+0x1be>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 801e094:	f44f 7080 	mov.w	r0, #256	@ 0x100
 801e098:	f04f 0100 	mov.w	r1, #0
 801e09c:	f7fe fc2e 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 801e0a0:	6178      	str	r0, [r7, #20]
    }

#if defined(SAI2)
#if defined(RCC_PERIPHCLK_SAI2)
    if ((hsai->Instance == SAI2_Block_A) || (hsai->Instance == SAI2_Block_B))
 801e0a2:	687b      	ldr	r3, [r7, #4]
 801e0a4:	681b      	ldr	r3, [r3, #0]
 801e0a6:	4a33      	ldr	r2, [pc, #204]	@ (801e174 <HAL_SAI_Init+0x290>)
 801e0a8:	4293      	cmp	r3, r2
 801e0aa:	d004      	beq.n	801e0b6 <HAL_SAI_Init+0x1d2>
 801e0ac:	687b      	ldr	r3, [r7, #4]
 801e0ae:	681b      	ldr	r3, [r3, #0]
 801e0b0:	4a31      	ldr	r2, [pc, #196]	@ (801e178 <HAL_SAI_Init+0x294>)
 801e0b2:	4293      	cmp	r3, r2
 801e0b4:	d106      	bne.n	801e0c4 <HAL_SAI_Init+0x1e0>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 801e0b6:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801e0ba:	f04f 0100 	mov.w	r1, #0
 801e0be:	f7fe fc1d 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 801e0c2:	6178      	str	r0, [r7, #20]
    }
#endif /* RCC_PERIPHCLK_SAI2 */
#endif /* SAI2 */

#if defined(SAI3)
    if ((hsai->Instance == SAI3_Block_A) || (hsai->Instance == SAI3_Block_B))
 801e0c4:	687b      	ldr	r3, [r7, #4]
 801e0c6:	681b      	ldr	r3, [r3, #0]
 801e0c8:	4a2d      	ldr	r2, [pc, #180]	@ (801e180 <HAL_SAI_Init+0x29c>)
 801e0ca:	4293      	cmp	r3, r2
 801e0cc:	d004      	beq.n	801e0d8 <HAL_SAI_Init+0x1f4>
 801e0ce:	687b      	ldr	r3, [r7, #4]
 801e0d0:	681b      	ldr	r3, [r3, #0]
 801e0d2:	4a2c      	ldr	r2, [pc, #176]	@ (801e184 <HAL_SAI_Init+0x2a0>)
 801e0d4:	4293      	cmp	r3, r2
 801e0d6:	d106      	bne.n	801e0e6 <HAL_SAI_Init+0x202>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI3);
 801e0d8:	f44f 7000 	mov.w	r0, #512	@ 0x200
 801e0dc:	f04f 0100 	mov.w	r1, #0
 801e0e0:	f7fe fc0c 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 801e0e4:	6178      	str	r0, [r7, #20]
    }
#endif /* SAI3 */
#if defined(SAI4)
    if (hsai->Instance == SAI4_Block_A)
 801e0e6:	687b      	ldr	r3, [r7, #4]
 801e0e8:	681b      	ldr	r3, [r3, #0]
 801e0ea:	4a1f      	ldr	r2, [pc, #124]	@ (801e168 <HAL_SAI_Init+0x284>)
 801e0ec:	4293      	cmp	r3, r2
 801e0ee:	d106      	bne.n	801e0fe <HAL_SAI_Init+0x21a>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4A);
 801e0f0:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 801e0f4:	f04f 0100 	mov.w	r1, #0
 801e0f8:	f7fe fc00 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 801e0fc:	6178      	str	r0, [r7, #20]
    }
    if (hsai->Instance == SAI4_Block_B)
 801e0fe:	687b      	ldr	r3, [r7, #4]
 801e100:	681b      	ldr	r3, [r3, #0]
 801e102:	4a22      	ldr	r2, [pc, #136]	@ (801e18c <HAL_SAI_Init+0x2a8>)
 801e104:	4293      	cmp	r3, r2
 801e106:	d106      	bne.n	801e116 <HAL_SAI_Init+0x232>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI4B);
 801e108:	f44f 6000 	mov.w	r0, #2048	@ 0x800
 801e10c:	f04f 0100 	mov.w	r1, #0
 801e110:	f7fe fbf4 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 801e114:	6178      	str	r0, [r7, #20]
    /* Configure Master Clock Divider using the following formula :
       - If NODIV = 1 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (FRL + 1))
       - If NODIV = 0 :
         MCKDIV[5:0] = SAI_CK_x / (FS * (OSR + 1) * 256) */
    if (hsai->Init.NoDivider == SAI_MASTERDIVIDER_DISABLE)
 801e116:	687b      	ldr	r3, [r7, #4]
 801e118:	699b      	ldr	r3, [r3, #24]
 801e11a:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801e11e:	d139      	bne.n	801e194 <HAL_SAI_Init+0x2b0>
    {
      /* NODIV = 1 */
      uint32_t tmpframelength;

      if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801e120:	687b      	ldr	r3, [r7, #4]
 801e122:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e124:	2b04      	cmp	r3, #4
 801e126:	d102      	bne.n	801e12e <HAL_SAI_Init+0x24a>
      {
        /* For SPDIF protocol, frame length is set by hardware to 64 */
        tmpframelength = SAI_SPDIF_FRAME_LENGTH;
 801e128:	2340      	movs	r3, #64	@ 0x40
 801e12a:	60fb      	str	r3, [r7, #12]
 801e12c:	e00a      	b.n	801e144 <HAL_SAI_Init+0x260>
      }
      else if (hsai->Init.Protocol == SAI_AC97_PROTOCOL)
 801e12e:	687b      	ldr	r3, [r7, #4]
 801e130:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e132:	2b08      	cmp	r3, #8
 801e134:	d103      	bne.n	801e13e <HAL_SAI_Init+0x25a>
      {
        /* For AC97 protocol, frame length is set by hardware to 256 */
        tmpframelength = SAI_AC97_FRAME_LENGTH;
 801e136:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801e13a:	60fb      	str	r3, [r7, #12]
 801e13c:	e002      	b.n	801e144 <HAL_SAI_Init+0x260>
      }
      else
      {
        /* For free protocol, frame length is set by user */
        tmpframelength = hsai->FrameInit.FrameLength;
 801e13e:	687b      	ldr	r3, [r7, #4]
 801e140:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e142:	60fb      	str	r3, [r7, #12]
      }

      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmpframelength);
 801e144:	697a      	ldr	r2, [r7, #20]
 801e146:	4613      	mov	r3, r2
 801e148:	009b      	lsls	r3, r3, #2
 801e14a:	4413      	add	r3, r2
 801e14c:	005b      	lsls	r3, r3, #1
 801e14e:	4619      	mov	r1, r3
 801e150:	687b      	ldr	r3, [r7, #4]
 801e152:	6a1b      	ldr	r3, [r3, #32]
 801e154:	68fa      	ldr	r2, [r7, #12]
 801e156:	fb02 f303 	mul.w	r3, r2, r3
 801e15a:	fbb1 f3f3 	udiv	r3, r1, r3
 801e15e:	613b      	str	r3, [r7, #16]
 801e160:	e030      	b.n	801e1c4 <HAL_SAI_Init+0x2e0>
 801e162:	bf00      	nop
 801e164:	40015804 	.word	0x40015804
 801e168:	58005404 	.word	0x58005404
 801e16c:	40015824 	.word	0x40015824
 801e170:	40015800 	.word	0x40015800
 801e174:	40015c04 	.word	0x40015c04
 801e178:	40015c24 	.word	0x40015c24
 801e17c:	40015c00 	.word	0x40015c00
 801e180:	40016004 	.word	0x40016004
 801e184:	40016024 	.word	0x40016024
 801e188:	40016000 	.word	0x40016000
 801e18c:	58005424 	.word	0x58005424
 801e190:	58005400 	.word	0x58005400
    }
    else
    {
      /* NODIV = 0 */
      uint32_t tmposr;
      tmposr = (hsai->Init.MckOverSampling == SAI_MCK_OVERSAMPLING_ENABLE) ? 2U : 1U;
 801e194:	687b      	ldr	r3, [r7, #4]
 801e196:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801e198:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801e19c:	d101      	bne.n	801e1a2 <HAL_SAI_Init+0x2be>
 801e19e:	2302      	movs	r3, #2
 801e1a0:	e000      	b.n	801e1a4 <HAL_SAI_Init+0x2c0>
 801e1a2:	2301      	movs	r3, #1
 801e1a4:	60bb      	str	r3, [r7, #8]
      /* (freq x 10) to keep Significant digits */
      tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * tmposr * 256U);
 801e1a6:	697a      	ldr	r2, [r7, #20]
 801e1a8:	4613      	mov	r3, r2
 801e1aa:	009b      	lsls	r3, r3, #2
 801e1ac:	4413      	add	r3, r2
 801e1ae:	005b      	lsls	r3, r3, #1
 801e1b0:	4619      	mov	r1, r3
 801e1b2:	687b      	ldr	r3, [r7, #4]
 801e1b4:	6a1b      	ldr	r3, [r3, #32]
 801e1b6:	68ba      	ldr	r2, [r7, #8]
 801e1b8:	fb02 f303 	mul.w	r3, r2, r3
 801e1bc:	021b      	lsls	r3, r3, #8
 801e1be:	fbb1 f3f3 	udiv	r3, r1, r3
 801e1c2:	613b      	str	r3, [r7, #16]
    }
    hsai->Init.Mckdiv = tmpval / 10U;
 801e1c4:	693b      	ldr	r3, [r7, #16]
 801e1c6:	4a95      	ldr	r2, [pc, #596]	@ (801e41c <HAL_SAI_Init+0x538>)
 801e1c8:	fba2 2303 	umull	r2, r3, r2, r3
 801e1cc:	08da      	lsrs	r2, r3, #3
 801e1ce:	687b      	ldr	r3, [r7, #4]
 801e1d0:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 801e1d2:	6939      	ldr	r1, [r7, #16]
 801e1d4:	4b91      	ldr	r3, [pc, #580]	@ (801e41c <HAL_SAI_Init+0x538>)
 801e1d6:	fba3 2301 	umull	r2, r3, r3, r1
 801e1da:	08da      	lsrs	r2, r3, #3
 801e1dc:	4613      	mov	r3, r2
 801e1de:	009b      	lsls	r3, r3, #2
 801e1e0:	4413      	add	r3, r2
 801e1e2:	005b      	lsls	r3, r3, #1
 801e1e4:	1aca      	subs	r2, r1, r3
 801e1e6:	2a08      	cmp	r2, #8
 801e1e8:	d904      	bls.n	801e1f4 <HAL_SAI_Init+0x310>
    {
      hsai->Init.Mckdiv += 1U;
 801e1ea:	687b      	ldr	r3, [r7, #4]
 801e1ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e1ee:	1c5a      	adds	r2, r3, #1
 801e1f0:	687b      	ldr	r3, [r7, #4]
 801e1f2:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 801e1f4:	687b      	ldr	r3, [r7, #4]
 801e1f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e1f8:	2b04      	cmp	r3, #4
 801e1fa:	d104      	bne.n	801e206 <HAL_SAI_Init+0x322>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 801e1fc:	687b      	ldr	r3, [r7, #4]
 801e1fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e200:	085a      	lsrs	r2, r3, #1
 801e202:	687b      	ldr	r3, [r7, #4]
 801e204:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801e206:	687b      	ldr	r3, [r7, #4]
 801e208:	685b      	ldr	r3, [r3, #4]
 801e20a:	2b00      	cmp	r3, #0
 801e20c:	d003      	beq.n	801e216 <HAL_SAI_Init+0x332>
 801e20e:	687b      	ldr	r3, [r7, #4]
 801e210:	685b      	ldr	r3, [r3, #4]
 801e212:	2b02      	cmp	r3, #2
 801e214:	d109      	bne.n	801e22a <HAL_SAI_Init+0x346>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 801e216:	687b      	ldr	r3, [r7, #4]
 801e218:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e21a:	2b01      	cmp	r3, #1
 801e21c:	d101      	bne.n	801e222 <HAL_SAI_Init+0x33e>
 801e21e:	2300      	movs	r3, #0
 801e220:	e001      	b.n	801e226 <HAL_SAI_Init+0x342>
 801e222:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801e226:	623b      	str	r3, [r7, #32]
 801e228:	e008      	b.n	801e23c <HAL_SAI_Init+0x358>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 801e22a:	687b      	ldr	r3, [r7, #4]
 801e22c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801e22e:	2b01      	cmp	r3, #1
 801e230:	d102      	bne.n	801e238 <HAL_SAI_Init+0x354>
 801e232:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801e236:	e000      	b.n	801e23a <HAL_SAI_Init+0x356>
 801e238:	2300      	movs	r3, #0
 801e23a:	623b      	str	r3, [r7, #32]

  /* SAI Block Configuration -------------------------------------------------*/
  /* SAI CR1 Configuration */
#if defined(SAI_VER_V2_X) /* SAI Peripheral version depends on STM32H7 device revision ID */

  if (HAL_GetREVID() >= REV_ID_B) /* STM32H7xx Rev.B and above */
 801e23c:	f7f3 ffce 	bl	80121dc <HAL_GetREVID>
 801e240:	4603      	mov	r3, r0
 801e242:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801e246:	d331      	bcc.n	801e2ac <HAL_SAI_Init+0x3c8>
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 801e248:	687b      	ldr	r3, [r7, #4]
 801e24a:	681b      	ldr	r3, [r3, #0]
 801e24c:	6819      	ldr	r1, [r3, #0]
 801e24e:	687b      	ldr	r3, [r7, #4]
 801e250:	681a      	ldr	r2, [r3, #0]
 801e252:	4b73      	ldr	r3, [pc, #460]	@ (801e420 <HAL_SAI_Init+0x53c>)
 801e254:	400b      	ands	r3, r1
 801e256:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR |     \
                             SAI_xCR1_MCKEN);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801e258:	687b      	ldr	r3, [r7, #4]
 801e25a:	681b      	ldr	r3, [r3, #0]
 801e25c:	6819      	ldr	r1, [r3, #0]
 801e25e:	687b      	ldr	r3, [r7, #4]
 801e260:	685a      	ldr	r2, [r3, #4]
 801e262:	687b      	ldr	r3, [r7, #4]
 801e264:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e266:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801e268:	687b      	ldr	r3, [r7, #4]
 801e26a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801e26c:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801e26e:	687b      	ldr	r3, [r7, #4]
 801e270:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e272:	431a      	orrs	r2, r3
 801e274:	6a3b      	ldr	r3, [r7, #32]
 801e276:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 801e278:	69fb      	ldr	r3, [r7, #28]
 801e27a:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801e27c:	687b      	ldr	r3, [r7, #4]
 801e27e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 801e280:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801e282:	687b      	ldr	r3, [r7, #4]
 801e284:	695b      	ldr	r3, [r3, #20]
 801e286:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801e288:	687b      	ldr	r3, [r7, #4]
 801e28a:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801e28c:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801e28e:	687b      	ldr	r3, [r7, #4]
 801e290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e292:	051b      	lsls	r3, r3, #20
 801e294:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801e296:	687b      	ldr	r3, [r7, #4]
 801e298:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801e29a:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling | hsai->Init.MckOutput);
 801e29c:	687b      	ldr	r3, [r7, #4]
 801e29e:	691b      	ldr	r3, [r3, #16]
 801e2a0:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801e2a2:	687b      	ldr	r3, [r7, #4]
 801e2a4:	681b      	ldr	r3, [r3, #0]
 801e2a6:	430a      	orrs	r2, r1
 801e2a8:	601a      	str	r2, [r3, #0]
 801e2aa:	e02d      	b.n	801e308 <HAL_SAI_Init+0x424>
  }
  else /* STM32H7xx Rev.Y */
  {
    hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 801e2ac:	687b      	ldr	r3, [r7, #4]
 801e2ae:	681b      	ldr	r3, [r3, #0]
 801e2b0:	6819      	ldr	r1, [r3, #0]
 801e2b2:	687b      	ldr	r3, [r7, #4]
 801e2b4:	681a      	ldr	r2, [r3, #0]
 801e2b6:	4b5b      	ldr	r3, [pc, #364]	@ (801e424 <HAL_SAI_Init+0x540>)
 801e2b8:	400b      	ands	r3, r1
 801e2ba:	6013      	str	r3, [r2, #0]
                             SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                             SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                             SAI_xCR1_NODIV | SAI_xCR1_MCKDIV | SAI_xCR1_OSR);

    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801e2bc:	687b      	ldr	r3, [r7, #4]
 801e2be:	681b      	ldr	r3, [r3, #0]
 801e2c0:	6819      	ldr	r1, [r3, #0]
 801e2c2:	687b      	ldr	r3, [r7, #4]
 801e2c4:	685a      	ldr	r2, [r3, #4]
 801e2c6:	687b      	ldr	r3, [r7, #4]
 801e2c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e2ca:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801e2cc:	687b      	ldr	r3, [r7, #4]
 801e2ce:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801e2d0:	431a      	orrs	r2, r3
                            hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 801e2d2:	687b      	ldr	r3, [r7, #4]
 801e2d4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801e2d6:	431a      	orrs	r2, r3
 801e2d8:	6a3b      	ldr	r3, [r7, #32]
 801e2da:	431a      	orrs	r2, r3
                            ckstr_bits | syncen_bits |                             \
 801e2dc:	69fb      	ldr	r3, [r7, #28]
 801e2de:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801e2e0:	687b      	ldr	r3, [r7, #4]
 801e2e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
                            ckstr_bits | syncen_bits |                             \
 801e2e4:	431a      	orrs	r2, r3
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801e2e6:	687b      	ldr	r3, [r7, #4]
 801e2e8:	695b      	ldr	r3, [r3, #20]
 801e2ea:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801e2ec:	687b      	ldr	r3, [r7, #4]
 801e2ee:	699b      	ldr	r3, [r3, #24]
                            hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 801e2f0:	431a      	orrs	r2, r3
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801e2f2:	687b      	ldr	r3, [r7, #4]
 801e2f4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801e2f6:	051b      	lsls	r3, r3, #20
 801e2f8:	431a      	orrs	r2, r3
                            hsai->Init.MckOverSampling);
 801e2fa:	687b      	ldr	r3, [r7, #4]
 801e2fc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
                            hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
 801e2fe:	431a      	orrs	r2, r3
    hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 801e300:	687b      	ldr	r3, [r7, #4]
 801e302:	681b      	ldr	r3, [r3, #0]
 801e304:	430a      	orrs	r2, r1
 801e306:	601a      	str	r2, [r3, #0]
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling | hsai->Init.MckOutput);
#endif /* SAI_VER_V2_X */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 801e308:	687b      	ldr	r3, [r7, #4]
 801e30a:	681b      	ldr	r3, [r3, #0]
 801e30c:	6859      	ldr	r1, [r3, #4]
 801e30e:	687b      	ldr	r3, [r7, #4]
 801e310:	681a      	ldr	r2, [r3, #0]
 801e312:	4b45      	ldr	r3, [pc, #276]	@ (801e428 <HAL_SAI_Init+0x544>)
 801e314:	400b      	ands	r3, r1
 801e316:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 801e318:	687b      	ldr	r3, [r7, #4]
 801e31a:	681b      	ldr	r3, [r3, #0]
 801e31c:	6859      	ldr	r1, [r3, #4]
 801e31e:	687b      	ldr	r3, [r7, #4]
 801e320:	69da      	ldr	r2, [r3, #28]
 801e322:	687b      	ldr	r3, [r7, #4]
 801e324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801e326:	431a      	orrs	r2, r3
 801e328:	687b      	ldr	r3, [r7, #4]
 801e32a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801e32c:	431a      	orrs	r2, r3
 801e32e:	687b      	ldr	r3, [r7, #4]
 801e330:	681b      	ldr	r3, [r3, #0]
 801e332:	430a      	orrs	r2, r1
 801e334:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 801e336:	687b      	ldr	r3, [r7, #4]
 801e338:	681b      	ldr	r3, [r3, #0]
 801e33a:	6899      	ldr	r1, [r3, #8]
 801e33c:	687b      	ldr	r3, [r7, #4]
 801e33e:	681a      	ldr	r2, [r3, #0]
 801e340:	4b3a      	ldr	r3, [pc, #232]	@ (801e42c <HAL_SAI_Init+0x548>)
 801e342:	400b      	ands	r3, r1
 801e344:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801e346:	687b      	ldr	r3, [r7, #4]
 801e348:	681b      	ldr	r3, [r3, #0]
 801e34a:	6899      	ldr	r1, [r3, #8]
 801e34c:	687b      	ldr	r3, [r7, #4]
 801e34e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e350:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 801e352:	687b      	ldr	r3, [r7, #4]
 801e354:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801e356:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 801e358:	687b      	ldr	r3, [r7, #4]
 801e35a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
                           hsai->FrameInit.FSOffset |
 801e35c:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 801e35e:	687b      	ldr	r3, [r7, #4]
 801e360:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                           hsai->FrameInit.FSDefinition |
 801e362:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 801e364:	687b      	ldr	r3, [r7, #4]
 801e366:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801e368:	3b01      	subs	r3, #1
 801e36a:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 801e36c:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 801e36e:	687b      	ldr	r3, [r7, #4]
 801e370:	681b      	ldr	r3, [r3, #0]
 801e372:	430a      	orrs	r2, r1
 801e374:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 801e376:	687b      	ldr	r3, [r7, #4]
 801e378:	681b      	ldr	r3, [r3, #0]
 801e37a:	68d9      	ldr	r1, [r3, #12]
 801e37c:	687b      	ldr	r3, [r7, #4]
 801e37e:	681a      	ldr	r2, [r3, #0]
 801e380:	f24f 0320 	movw	r3, #61472	@ 0xf020
 801e384:	400b      	ands	r3, r1
 801e386:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801e388:	687b      	ldr	r3, [r7, #4]
 801e38a:	681b      	ldr	r3, [r3, #0]
 801e38c:	68d9      	ldr	r1, [r3, #12]
 801e38e:	687b      	ldr	r3, [r7, #4]
 801e390:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 801e392:	687b      	ldr	r3, [r7, #4]
 801e394:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801e396:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801e398:	687b      	ldr	r3, [r7, #4]
 801e39a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801e39c:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801e39e:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 801e3a0:	687b      	ldr	r3, [r7, #4]
 801e3a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 801e3a4:	3b01      	subs	r3, #1
 801e3a6:	021b      	lsls	r3, r3, #8
 801e3a8:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 801e3aa:	687b      	ldr	r3, [r7, #4]
 801e3ac:	681b      	ldr	r3, [r3, #0]
 801e3ae:	430a      	orrs	r2, r1
 801e3b0:	60da      	str	r2, [r3, #12]

  /* SAI PDM Configuration ---------------------------------------------------*/
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 801e3b2:	687b      	ldr	r3, [r7, #4]
 801e3b4:	681b      	ldr	r3, [r3, #0]
 801e3b6:	4a1e      	ldr	r2, [pc, #120]	@ (801e430 <HAL_SAI_Init+0x54c>)
 801e3b8:	4293      	cmp	r3, r2
 801e3ba:	d004      	beq.n	801e3c6 <HAL_SAI_Init+0x4e2>
 801e3bc:	687b      	ldr	r3, [r7, #4]
 801e3be:	681b      	ldr	r3, [r3, #0]
 801e3c0:	4a1c      	ldr	r2, [pc, #112]	@ (801e434 <HAL_SAI_Init+0x550>)
 801e3c2:	4293      	cmp	r3, r2
 801e3c4:	d119      	bne.n	801e3fa <HAL_SAI_Init+0x516>
#else
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 801e3c6:	69bb      	ldr	r3, [r7, #24]
 801e3c8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e3ca:	f023 0201 	bic.w	r2, r3, #1
 801e3ce:	69bb      	ldr	r3, [r7, #24]
 801e3d0:	645a      	str	r2, [r3, #68]	@ 0x44
    if (hsai->Init.PdmInit.Activation == ENABLE)
 801e3d2:	687b      	ldr	r3, [r7, #4]
 801e3d4:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 801e3d8:	2b01      	cmp	r3, #1
 801e3da:	d10e      	bne.n	801e3fa <HAL_SAI_Init+0x516>
    {
      /* Configure and enable PDM interface */
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 801e3dc:	687b      	ldr	r3, [r7, #4]
 801e3de:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                               ((hsai->Init.PdmInit.MicPairsNbr - 1U) << SAI_PDMCR_MICNBR_Pos));
 801e3e0:	687b      	ldr	r3, [r7, #4]
 801e3e2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801e3e4:	3b01      	subs	r3, #1
 801e3e6:	011b      	lsls	r3, r3, #4
      SaiBaseAddress->PDMCR = (hsai->Init.PdmInit.ClockEnable |
 801e3e8:	431a      	orrs	r2, r3
 801e3ea:	69bb      	ldr	r3, [r7, #24]
 801e3ec:	645a      	str	r2, [r3, #68]	@ 0x44
      SaiBaseAddress->PDMCR |= SAI_PDMCR_PDMEN;
 801e3ee:	69bb      	ldr	r3, [r7, #24]
 801e3f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e3f2:	f043 0201 	orr.w	r2, r3, #1
 801e3f6:	69bb      	ldr	r3, [r7, #24]
 801e3f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801e3fa:	687b      	ldr	r3, [r7, #4]
 801e3fc:	2200      	movs	r2, #0
 801e3fe:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 801e402:	687b      	ldr	r3, [r7, #4]
 801e404:	2201      	movs	r2, #1
 801e406:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 801e40a:	687b      	ldr	r3, [r7, #4]
 801e40c:	2200      	movs	r2, #0
 801e40e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 801e412:	2300      	movs	r3, #0
}
 801e414:	4618      	mov	r0, r3
 801e416:	3728      	adds	r7, #40	@ 0x28
 801e418:	46bd      	mov	sp, r7
 801e41a:	bd80      	pop	{r7, pc}
 801e41c:	cccccccd 	.word	0xcccccccd
 801e420:	f005c010 	.word	0xf005c010
 801e424:	f805c010 	.word	0xf805c010
 801e428:	ffff1ff0 	.word	0xffff1ff0
 801e42c:	fff88000 	.word	0xfff88000
 801e430:	40015804 	.word	0x40015804
 801e434:	58005404 	.word	0x58005404

0801e438 <HAL_SAI_DeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DeInit(SAI_HandleTypeDef *hsai)
{
 801e438:	b580      	push	{r7, lr}
 801e43a:	b084      	sub	sp, #16
 801e43c:	af00      	add	r7, sp, #0
 801e43e:	6078      	str	r0, [r7, #4]
  SAI_TypeDef *SaiBaseAddress;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 801e440:	687b      	ldr	r3, [r7, #4]
 801e442:	2b00      	cmp	r3, #0
 801e444:	d101      	bne.n	801e44a <HAL_SAI_DeInit+0x12>
  {
    return HAL_ERROR;
 801e446:	2301      	movs	r3, #1
 801e448:	e050      	b.n	801e4ec <HAL_SAI_DeInit+0xb4>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 801e44a:	687b      	ldr	r3, [r7, #4]
 801e44c:	2202      	movs	r2, #2
 801e44e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Disabled All interrupt and clear all the flag */
  hsai->Instance->IMR = 0;
 801e452:	687b      	ldr	r3, [r7, #4]
 801e454:	681b      	ldr	r3, [r3, #0]
 801e456:	2200      	movs	r2, #0
 801e458:	611a      	str	r2, [r3, #16]
  hsai->Instance->CLRFR = 0xFFFFFFFFU;
 801e45a:	687b      	ldr	r3, [r7, #4]
 801e45c:	681b      	ldr	r3, [r3, #0]
 801e45e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 801e462:	619a      	str	r2, [r3, #24]

  /* Disable the SAI */
  if (SAI_Disable(hsai) != HAL_OK)
 801e464:	6878      	ldr	r0, [r7, #4]
 801e466:	f000 fab5 	bl	801e9d4 <SAI_Disable>
 801e46a:	4603      	mov	r3, r0
 801e46c:	2b00      	cmp	r3, #0
 801e46e:	d009      	beq.n	801e484 <HAL_SAI_DeInit+0x4c>
  {
    /* Reset SAI state to ready */
    hsai->State = HAL_SAI_STATE_READY;
 801e470:	687b      	ldr	r3, [r7, #4]
 801e472:	2201      	movs	r2, #1
 801e474:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Release Lock */
    __HAL_UNLOCK(hsai);
 801e478:	687b      	ldr	r3, [r7, #4]
 801e47a:	2200      	movs	r2, #0
 801e47c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_ERROR;
 801e480:	2301      	movs	r3, #1
 801e482:	e033      	b.n	801e4ec <HAL_SAI_DeInit+0xb4>
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 801e484:	687b      	ldr	r3, [r7, #4]
 801e486:	681b      	ldr	r3, [r3, #0]
 801e488:	685a      	ldr	r2, [r3, #4]
 801e48a:	687b      	ldr	r3, [r7, #4]
 801e48c:	681b      	ldr	r3, [r3, #0]
 801e48e:	f042 0208 	orr.w	r2, r2, #8
 801e492:	605a      	str	r2, [r3, #4]

  /* Disable SAI PDM interface */
#if defined(SAI4)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI4_Block_A))
 801e494:	687b      	ldr	r3, [r7, #4]
 801e496:	681b      	ldr	r3, [r3, #0]
 801e498:	4a16      	ldr	r2, [pc, #88]	@ (801e4f4 <HAL_SAI_DeInit+0xbc>)
 801e49a:	4293      	cmp	r3, r2
 801e49c:	d004      	beq.n	801e4a8 <HAL_SAI_DeInit+0x70>
 801e49e:	687b      	ldr	r3, [r7, #4]
 801e4a0:	681b      	ldr	r3, [r3, #0]
 801e4a2:	4a15      	ldr	r2, [pc, #84]	@ (801e4f8 <HAL_SAI_DeInit+0xc0>)
 801e4a4:	4293      	cmp	r3, r2
 801e4a6:	d111      	bne.n	801e4cc <HAL_SAI_DeInit+0x94>
  if (hsai->Instance == SAI1_Block_A)
#endif /* SAI4 */
  {
    /* Get the SAI base address according to the SAI handle */
#if defined(SAI4)
    SaiBaseAddress = (hsai->Instance == SAI1_Block_A) ? SAI1 : SAI4;
 801e4a8:	687b      	ldr	r3, [r7, #4]
 801e4aa:	681b      	ldr	r3, [r3, #0]
 801e4ac:	4a11      	ldr	r2, [pc, #68]	@ (801e4f4 <HAL_SAI_DeInit+0xbc>)
 801e4ae:	4293      	cmp	r3, r2
 801e4b0:	d101      	bne.n	801e4b6 <HAL_SAI_DeInit+0x7e>
 801e4b2:	4b12      	ldr	r3, [pc, #72]	@ (801e4fc <HAL_SAI_DeInit+0xc4>)
 801e4b4:	e000      	b.n	801e4b8 <HAL_SAI_DeInit+0x80>
 801e4b6:	4b12      	ldr	r3, [pc, #72]	@ (801e500 <HAL_SAI_DeInit+0xc8>)
 801e4b8:	60fb      	str	r3, [r7, #12]
#else
    SaiBaseAddress = SAI1;
#endif /* SAI4 */

    /* Reset PDM delays */
    SaiBaseAddress->PDMDLY = 0U;
 801e4ba:	68fb      	ldr	r3, [r7, #12]
 801e4bc:	2200      	movs	r2, #0
 801e4be:	649a      	str	r2, [r3, #72]	@ 0x48

    /* Disable PDM interface */
    SaiBaseAddress->PDMCR &= ~(SAI_PDMCR_PDMEN);
 801e4c0:	68fb      	ldr	r3, [r7, #12]
 801e4c2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e4c4:	f023 0201 	bic.w	r2, r3, #1
 801e4c8:	68fb      	ldr	r3, [r7, #12]
 801e4ca:	645a      	str	r2, [r3, #68]	@ 0x44
  {
    hsai->MspDeInitCallback = HAL_SAI_MspDeInit;
  }
  hsai->MspDeInitCallback(hsai);
#else
  HAL_SAI_MspDeInit(hsai);
 801e4cc:	6878      	ldr	r0, [r7, #4]
 801e4ce:	f000 f823 	bl	801e518 <HAL_SAI_MspDeInit>
#endif

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801e4d2:	687b      	ldr	r3, [r7, #4]
 801e4d4:	2200      	movs	r2, #0
 801e4d6:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_RESET;
 801e4da:	687b      	ldr	r3, [r7, #4]
 801e4dc:	2200      	movs	r2, #0
 801e4de:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 801e4e2:	687b      	ldr	r3, [r7, #4]
 801e4e4:	2200      	movs	r2, #0
 801e4e6:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 801e4ea:	2300      	movs	r3, #0
}
 801e4ec:	4618      	mov	r0, r3
 801e4ee:	3710      	adds	r7, #16
 801e4f0:	46bd      	mov	sp, r7
 801e4f2:	bd80      	pop	{r7, pc}
 801e4f4:	40015804 	.word	0x40015804
 801e4f8:	58005404 	.word	0x58005404
 801e4fc:	40015800 	.word	0x40015800
 801e500:	58005400 	.word	0x58005400

0801e504 <HAL_SAI_MspInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspInit(SAI_HandleTypeDef *hsai)
{
 801e504:	b480      	push	{r7}
 801e506:	b083      	sub	sp, #12
 801e508:	af00      	add	r7, sp, #0
 801e50a:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspInit could be implemented in the user file
   */
}
 801e50c:	bf00      	nop
 801e50e:	370c      	adds	r7, #12
 801e510:	46bd      	mov	sp, r7
 801e512:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e516:	4770      	bx	lr

0801e518 <HAL_SAI_MspDeInit>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
__weak void HAL_SAI_MspDeInit(SAI_HandleTypeDef *hsai)
{
 801e518:	b480      	push	{r7}
 801e51a:	b083      	sub	sp, #12
 801e51c:	af00      	add	r7, sp, #0
 801e51e:	6078      	str	r0, [r7, #4]
  UNUSED(hsai);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SAI_MspDeInit could be implemented in the user file
   */
}
 801e520:	bf00      	nop
 801e522:	370c      	adds	r7, #12
 801e524:	46bd      	mov	sp, r7
 801e526:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e52a:	4770      	bx	lr

0801e52c <HAL_SAI_DMAPause>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAPause(SAI_HandleTypeDef *hsai)
{
 801e52c:	b480      	push	{r7}
 801e52e:	b083      	sub	sp, #12
 801e530:	af00      	add	r7, sp, #0
 801e532:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 801e534:	687b      	ldr	r3, [r7, #4]
 801e536:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801e53a:	2b01      	cmp	r3, #1
 801e53c:	d101      	bne.n	801e542 <HAL_SAI_DMAPause+0x16>
 801e53e:	2302      	movs	r3, #2
 801e540:	e010      	b.n	801e564 <HAL_SAI_DMAPause+0x38>
 801e542:	687b      	ldr	r3, [r7, #4]
 801e544:	2201      	movs	r2, #1
 801e546:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Pause the audio file playing by disabling the SAI DMA requests */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801e54a:	687b      	ldr	r3, [r7, #4]
 801e54c:	681b      	ldr	r3, [r3, #0]
 801e54e:	681a      	ldr	r2, [r3, #0]
 801e550:	687b      	ldr	r3, [r7, #4]
 801e552:	681b      	ldr	r3, [r3, #0]
 801e554:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801e558:	601a      	str	r2, [r3, #0]

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 801e55a:	687b      	ldr	r3, [r7, #4]
 801e55c:	2200      	movs	r2, #0
 801e55e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 801e562:	2300      	movs	r3, #0
}
 801e564:	4618      	mov	r0, r3
 801e566:	370c      	adds	r7, #12
 801e568:	46bd      	mov	sp, r7
 801e56a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e56e:	4770      	bx	lr

0801e570 <HAL_SAI_DMAResume>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAResume(SAI_HandleTypeDef *hsai)
{
 801e570:	b480      	push	{r7}
 801e572:	b083      	sub	sp, #12
 801e574:	af00      	add	r7, sp, #0
 801e576:	6078      	str	r0, [r7, #4]
  /* Process Locked */
  __HAL_LOCK(hsai);
 801e578:	687b      	ldr	r3, [r7, #4]
 801e57a:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801e57e:	2b01      	cmp	r3, #1
 801e580:	d101      	bne.n	801e586 <HAL_SAI_DMAResume+0x16>
 801e582:	2302      	movs	r3, #2
 801e584:	e01f      	b.n	801e5c6 <HAL_SAI_DMAResume+0x56>
 801e586:	687b      	ldr	r3, [r7, #4]
 801e588:	2201      	movs	r2, #1
 801e58a:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Enable the SAI DMA requests */
  hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801e58e:	687b      	ldr	r3, [r7, #4]
 801e590:	681b      	ldr	r3, [r3, #0]
 801e592:	681a      	ldr	r2, [r3, #0]
 801e594:	687b      	ldr	r3, [r7, #4]
 801e596:	681b      	ldr	r3, [r3, #0]
 801e598:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801e59c:	601a      	str	r2, [r3, #0]

  /* If the SAI peripheral is still not enabled, enable it */
  if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 801e59e:	687b      	ldr	r3, [r7, #4]
 801e5a0:	681b      	ldr	r3, [r3, #0]
 801e5a2:	681b      	ldr	r3, [r3, #0]
 801e5a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e5a8:	2b00      	cmp	r3, #0
 801e5aa:	d107      	bne.n	801e5bc <HAL_SAI_DMAResume+0x4c>
  {
    /* Enable SAI peripheral */
    __HAL_SAI_ENABLE(hsai);
 801e5ac:	687b      	ldr	r3, [r7, #4]
 801e5ae:	681b      	ldr	r3, [r3, #0]
 801e5b0:	681a      	ldr	r2, [r3, #0]
 801e5b2:	687b      	ldr	r3, [r7, #4]
 801e5b4:	681b      	ldr	r3, [r3, #0]
 801e5b6:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801e5ba:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 801e5bc:	687b      	ldr	r3, [r7, #4]
 801e5be:	2200      	movs	r2, #0
 801e5c0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return HAL_OK;
 801e5c4:	2300      	movs	r3, #0
}
 801e5c6:	4618      	mov	r0, r3
 801e5c8:	370c      	adds	r7, #12
 801e5ca:	46bd      	mov	sp, r7
 801e5cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e5d0:	4770      	bx	lr

0801e5d2 <HAL_SAI_DMAStop>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_DMAStop(SAI_HandleTypeDef *hsai)
{
 801e5d2:	b580      	push	{r7, lr}
 801e5d4:	b084      	sub	sp, #16
 801e5d6:	af00      	add	r7, sp, #0
 801e5d8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801e5da:	2300      	movs	r3, #0
 801e5dc:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(hsai);
 801e5de:	687b      	ldr	r3, [r7, #4]
 801e5e0:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801e5e4:	2b01      	cmp	r3, #1
 801e5e6:	d101      	bne.n	801e5ec <HAL_SAI_DMAStop+0x1a>
 801e5e8:	2302      	movs	r3, #2
 801e5ea:	e06c      	b.n	801e6c6 <HAL_SAI_DMAStop+0xf4>
 801e5ec:	687b      	ldr	r3, [r7, #4]
 801e5ee:	2201      	movs	r2, #1
 801e5f0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  /* Disable SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 801e5f4:	6878      	ldr	r0, [r7, #4]
 801e5f6:	f000 f9ed 	bl	801e9d4 <SAI_Disable>
 801e5fa:	4603      	mov	r3, r0
 801e5fc:	2b00      	cmp	r3, #0
 801e5fe:	d001      	beq.n	801e604 <HAL_SAI_DMAStop+0x32>
  {
    status = HAL_ERROR;
 801e600:	2301      	movs	r3, #1
 801e602:	73fb      	strb	r3, [r7, #15]
  }

  /* Disable the SAI DMA request */
  hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801e604:	687b      	ldr	r3, [r7, #4]
 801e606:	681b      	ldr	r3, [r3, #0]
 801e608:	681a      	ldr	r2, [r3, #0]
 801e60a:	687b      	ldr	r3, [r7, #4]
 801e60c:	681b      	ldr	r3, [r3, #0]
 801e60e:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801e612:	601a      	str	r2, [r3, #0]

  /* Abort the SAI Tx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_TX) && (hsai->hdmatx != NULL))
 801e614:	687b      	ldr	r3, [r7, #4]
 801e616:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801e61a:	b2db      	uxtb	r3, r3
 801e61c:	2b12      	cmp	r3, #18
 801e61e:	d11d      	bne.n	801e65c <HAL_SAI_DMAStop+0x8a>
 801e620:	687b      	ldr	r3, [r7, #4]
 801e622:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e626:	2b00      	cmp	r3, #0
 801e628:	d018      	beq.n	801e65c <HAL_SAI_DMAStop+0x8a>
  {
    if (HAL_DMA_Abort(hsai->hdmatx) != HAL_OK)
 801e62a:	687b      	ldr	r3, [r7, #4]
 801e62c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e630:	4618      	mov	r0, r3
 801e632:	f7f5 fb3d 	bl	8013cb0 <HAL_DMA_Abort>
 801e636:	4603      	mov	r3, r0
 801e638:	2b00      	cmp	r3, #0
 801e63a:	d00f      	beq.n	801e65c <HAL_SAI_DMAStop+0x8a>
    {
      /* If the DMA Tx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmatx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801e63c:	687b      	ldr	r3, [r7, #4]
 801e63e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e642:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e644:	2b80      	cmp	r3, #128	@ 0x80
 801e646:	d009      	beq.n	801e65c <HAL_SAI_DMAStop+0x8a>
      {
        status = HAL_ERROR;
 801e648:	2301      	movs	r3, #1
 801e64a:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801e64c:	687b      	ldr	r3, [r7, #4]
 801e64e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e652:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801e656:	687b      	ldr	r3, [r7, #4]
 801e658:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Abort the SAI Rx DMA Stream */
  if ((hsai->State == HAL_SAI_STATE_BUSY_RX) && (hsai->hdmarx != NULL))
 801e65c:	687b      	ldr	r3, [r7, #4]
 801e65e:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801e662:	b2db      	uxtb	r3, r3
 801e664:	2b22      	cmp	r3, #34	@ 0x22
 801e666:	d11d      	bne.n	801e6a4 <HAL_SAI_DMAStop+0xd2>
 801e668:	687b      	ldr	r3, [r7, #4]
 801e66a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e66e:	2b00      	cmp	r3, #0
 801e670:	d018      	beq.n	801e6a4 <HAL_SAI_DMAStop+0xd2>
  {
    if (HAL_DMA_Abort(hsai->hdmarx) != HAL_OK)
 801e672:	687b      	ldr	r3, [r7, #4]
 801e674:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e678:	4618      	mov	r0, r3
 801e67a:	f7f5 fb19 	bl	8013cb0 <HAL_DMA_Abort>
 801e67e:	4603      	mov	r3, r0
 801e680:	2b00      	cmp	r3, #0
 801e682:	d00f      	beq.n	801e6a4 <HAL_SAI_DMAStop+0xd2>
    {
      /* If the DMA Rx errorCode is different from DMA No Transfer then return Error */
      if (hsai->hdmarx->ErrorCode != HAL_DMA_ERROR_NO_XFER)
 801e684:	687b      	ldr	r3, [r7, #4]
 801e686:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e68a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801e68c:	2b80      	cmp	r3, #128	@ 0x80
 801e68e:	d009      	beq.n	801e6a4 <HAL_SAI_DMAStop+0xd2>
      {
        status = HAL_ERROR;
 801e690:	2301      	movs	r3, #1
 801e692:	73fb      	strb	r3, [r7, #15]
        hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801e694:	687b      	ldr	r3, [r7, #4]
 801e696:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e69a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801e69e:	687b      	ldr	r3, [r7, #4]
 801e6a0:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      }
    }
  }

  /* Flush the fifo */
  SET_BIT(hsai->Instance->CR2, SAI_xCR2_FFLUSH);
 801e6a4:	687b      	ldr	r3, [r7, #4]
 801e6a6:	681b      	ldr	r3, [r3, #0]
 801e6a8:	685a      	ldr	r2, [r3, #4]
 801e6aa:	687b      	ldr	r3, [r7, #4]
 801e6ac:	681b      	ldr	r3, [r3, #0]
 801e6ae:	f042 0208 	orr.w	r2, r2, #8
 801e6b2:	605a      	str	r2, [r3, #4]

  /* Set hsai state to ready */
  hsai->State = HAL_SAI_STATE_READY;
 801e6b4:	687b      	ldr	r3, [r7, #4]
 801e6b6:	2201      	movs	r2, #1
 801e6b8:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

  /* Process Unlocked */
  __HAL_UNLOCK(hsai);
 801e6bc:	687b      	ldr	r3, [r7, #4]
 801e6be:	2200      	movs	r2, #0
 801e6c0:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

  return status;
 801e6c4:	7bfb      	ldrb	r3, [r7, #15]
}
 801e6c6:	4618      	mov	r0, r3
 801e6c8:	3710      	adds	r7, #16
 801e6ca:	46bd      	mov	sp, r7
 801e6cc:	bd80      	pop	{r7, pc}
	...

0801e6d0 <HAL_SAI_Transmit_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Transmit_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 801e6d0:	b580      	push	{r7, lr}
 801e6d2:	b086      	sub	sp, #24
 801e6d4:	af00      	add	r7, sp, #0
 801e6d6:	60f8      	str	r0, [r7, #12]
 801e6d8:	60b9      	str	r1, [r7, #8]
 801e6da:	4613      	mov	r3, r2
 801e6dc:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart = HAL_GetTick();
 801e6de:	f7f3 fd4d 	bl	801217c <HAL_GetTick>
 801e6e2:	6178      	str	r0, [r7, #20]

  if ((pData == NULL) || (Size == 0U))
 801e6e4:	68bb      	ldr	r3, [r7, #8]
 801e6e6:	2b00      	cmp	r3, #0
 801e6e8:	d002      	beq.n	801e6f0 <HAL_SAI_Transmit_DMA+0x20>
 801e6ea:	88fb      	ldrh	r3, [r7, #6]
 801e6ec:	2b00      	cmp	r3, #0
 801e6ee:	d101      	bne.n	801e6f4 <HAL_SAI_Transmit_DMA+0x24>
  {
    return  HAL_ERROR;
 801e6f0:	2301      	movs	r3, #1
 801e6f2:	e098      	b.n	801e826 <HAL_SAI_Transmit_DMA+0x156>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 801e6f4:	68fb      	ldr	r3, [r7, #12]
 801e6f6:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801e6fa:	b2db      	uxtb	r3, r3
 801e6fc:	2b01      	cmp	r3, #1
 801e6fe:	f040 8091 	bne.w	801e824 <HAL_SAI_Transmit_DMA+0x154>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 801e702:	68fb      	ldr	r3, [r7, #12]
 801e704:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801e708:	2b01      	cmp	r3, #1
 801e70a:	d101      	bne.n	801e710 <HAL_SAI_Transmit_DMA+0x40>
 801e70c:	2302      	movs	r3, #2
 801e70e:	e08a      	b.n	801e826 <HAL_SAI_Transmit_DMA+0x156>
 801e710:	68fb      	ldr	r3, [r7, #12]
 801e712:	2201      	movs	r2, #1
 801e714:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 801e718:	68fb      	ldr	r3, [r7, #12]
 801e71a:	68ba      	ldr	r2, [r7, #8]
 801e71c:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 801e71e:	68fb      	ldr	r3, [r7, #12]
 801e720:	88fa      	ldrh	r2, [r7, #6]
 801e722:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 801e726:	68fb      	ldr	r3, [r7, #12]
 801e728:	88fa      	ldrh	r2, [r7, #6]
 801e72a:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801e72e:	68fb      	ldr	r3, [r7, #12]
 801e730:	2200      	movs	r2, #0
 801e732:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_TX;
 801e736:	68fb      	ldr	r3, [r7, #12]
 801e738:	2212      	movs	r2, #18
 801e73a:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Tx DMA Half transfer complete callback */
    hsai->hdmatx->XferHalfCpltCallback = SAI_DMATxHalfCplt;
 801e73e:	68fb      	ldr	r3, [r7, #12]
 801e740:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e744:	4a3a      	ldr	r2, [pc, #232]	@ (801e830 <HAL_SAI_Transmit_DMA+0x160>)
 801e746:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI TxDMA transfer complete callback */
    hsai->hdmatx->XferCpltCallback = SAI_DMATxCplt;
 801e748:	68fb      	ldr	r3, [r7, #12]
 801e74a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e74e:	4a39      	ldr	r2, [pc, #228]	@ (801e834 <HAL_SAI_Transmit_DMA+0x164>)
 801e750:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmatx->XferErrorCallback = SAI_DMAError;
 801e752:	68fb      	ldr	r3, [r7, #12]
 801e754:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e758:	4a37      	ldr	r2, [pc, #220]	@ (801e838 <HAL_SAI_Transmit_DMA+0x168>)
 801e75a:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Tx abort callback */
    hsai->hdmatx->XferAbortCallback = NULL;
 801e75c:	68fb      	ldr	r3, [r7, #12]
 801e75e:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801e762:	2200      	movs	r2, #0
 801e764:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Tx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmatx, (uint32_t)hsai->pBuffPtr, (uint32_t)&hsai->Instance->DR, hsai->XferSize) != HAL_OK)
 801e766:	68fb      	ldr	r3, [r7, #12]
 801e768:	f8d3 0080 	ldr.w	r0, [r3, #128]	@ 0x80
 801e76c:	68fb      	ldr	r3, [r7, #12]
 801e76e:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e770:	4619      	mov	r1, r3
 801e772:	68fb      	ldr	r3, [r7, #12]
 801e774:	681b      	ldr	r3, [r3, #0]
 801e776:	331c      	adds	r3, #28
 801e778:	461a      	mov	r2, r3
 801e77a:	68fb      	ldr	r3, [r7, #12]
 801e77c:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 801e780:	f7f5 f82c 	bl	80137dc <HAL_DMA_Start_IT>
 801e784:	4603      	mov	r3, r0
 801e786:	2b00      	cmp	r3, #0
 801e788:	d005      	beq.n	801e796 <HAL_SAI_Transmit_DMA+0xc6>
    {
      __HAL_UNLOCK(hsai);
 801e78a:	68fb      	ldr	r3, [r7, #12]
 801e78c:	2200      	movs	r2, #0
 801e78e:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 801e792:	2301      	movs	r3, #1
 801e794:	e047      	b.n	801e826 <HAL_SAI_Transmit_DMA+0x156>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801e796:	2100      	movs	r1, #0
 801e798:	68f8      	ldr	r0, [r7, #12]
 801e79a:	f000 f8e3 	bl	801e964 <SAI_InterruptFlag>
 801e79e:	4601      	mov	r1, r0
 801e7a0:	68fb      	ldr	r3, [r7, #12]
 801e7a2:	681b      	ldr	r3, [r3, #0]
 801e7a4:	691a      	ldr	r2, [r3, #16]
 801e7a6:	68fb      	ldr	r3, [r7, #12]
 801e7a8:	681b      	ldr	r3, [r3, #0]
 801e7aa:	430a      	orrs	r2, r1
 801e7ac:	611a      	str	r2, [r3, #16]

    /* Enable SAI Tx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801e7ae:	68fb      	ldr	r3, [r7, #12]
 801e7b0:	681b      	ldr	r3, [r3, #0]
 801e7b2:	681a      	ldr	r2, [r3, #0]
 801e7b4:	68fb      	ldr	r3, [r7, #12]
 801e7b6:	681b      	ldr	r3, [r3, #0]
 801e7b8:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801e7bc:	601a      	str	r2, [r3, #0]

    /* Wait until FIFO is not empty */
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801e7be:	e015      	b.n	801e7ec <HAL_SAI_Transmit_DMA+0x11c>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > SAI_LONG_TIMEOUT)
 801e7c0:	f7f3 fcdc 	bl	801217c <HAL_GetTick>
 801e7c4:	4602      	mov	r2, r0
 801e7c6:	697b      	ldr	r3, [r7, #20]
 801e7c8:	1ad3      	subs	r3, r2, r3
 801e7ca:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 801e7ce:	d90d      	bls.n	801e7ec <HAL_SAI_Transmit_DMA+0x11c>
      {
        /* Update error code */
        hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801e7d0:	68fb      	ldr	r3, [r7, #12]
 801e7d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801e7d6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801e7da:	68fb      	ldr	r3, [r7, #12]
 801e7dc:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

        /* Process Unlocked */
        __HAL_UNLOCK(hsai);
 801e7e0:	68fb      	ldr	r3, [r7, #12]
 801e7e2:	2200      	movs	r2, #0
 801e7e4:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

        return HAL_TIMEOUT;
 801e7e8:	2303      	movs	r3, #3
 801e7ea:	e01c      	b.n	801e826 <HAL_SAI_Transmit_DMA+0x156>
    while ((hsai->Instance->SR & SAI_xSR_FLVL) == SAI_FIFOSTATUS_EMPTY)
 801e7ec:	68fb      	ldr	r3, [r7, #12]
 801e7ee:	681b      	ldr	r3, [r3, #0]
 801e7f0:	695b      	ldr	r3, [r3, #20]
 801e7f2:	f403 23e0 	and.w	r3, r3, #458752	@ 0x70000
 801e7f6:	2b00      	cmp	r3, #0
 801e7f8:	d0e2      	beq.n	801e7c0 <HAL_SAI_Transmit_DMA+0xf0>
      }
    }

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 801e7fa:	68fb      	ldr	r3, [r7, #12]
 801e7fc:	681b      	ldr	r3, [r3, #0]
 801e7fe:	681b      	ldr	r3, [r3, #0]
 801e800:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e804:	2b00      	cmp	r3, #0
 801e806:	d107      	bne.n	801e818 <HAL_SAI_Transmit_DMA+0x148>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 801e808:	68fb      	ldr	r3, [r7, #12]
 801e80a:	681b      	ldr	r3, [r3, #0]
 801e80c:	681a      	ldr	r2, [r3, #0]
 801e80e:	68fb      	ldr	r3, [r7, #12]
 801e810:	681b      	ldr	r3, [r3, #0]
 801e812:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801e816:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 801e818:	68fb      	ldr	r3, [r7, #12]
 801e81a:	2200      	movs	r2, #0
 801e81c:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 801e820:	2300      	movs	r3, #0
 801e822:	e000      	b.n	801e826 <HAL_SAI_Transmit_DMA+0x156>
  }
  else
  {
    return HAL_BUSY;
 801e824:	2302      	movs	r3, #2
  }
}
 801e826:	4618      	mov	r0, r3
 801e828:	3718      	adds	r7, #24
 801e82a:	46bd      	mov	sp, r7
 801e82c:	bd80      	pop	{r7, pc}
 801e82e:	bf00      	nop
 801e830:	0801eaa9 	.word	0x0801eaa9
 801e834:	0801ea49 	.word	0x0801ea49
 801e838:	0801eb41 	.word	0x0801eb41

0801e83c <HAL_SAI_Receive_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Receive_DMA(SAI_HandleTypeDef *hsai, uint8_t *pData, uint16_t Size)
{
 801e83c:	b580      	push	{r7, lr}
 801e83e:	b084      	sub	sp, #16
 801e840:	af00      	add	r7, sp, #0
 801e842:	60f8      	str	r0, [r7, #12]
 801e844:	60b9      	str	r1, [r7, #8]
 801e846:	4613      	mov	r3, r2
 801e848:	80fb      	strh	r3, [r7, #6]

  if ((pData == NULL) || (Size == 0U))
 801e84a:	68bb      	ldr	r3, [r7, #8]
 801e84c:	2b00      	cmp	r3, #0
 801e84e:	d002      	beq.n	801e856 <HAL_SAI_Receive_DMA+0x1a>
 801e850:	88fb      	ldrh	r3, [r7, #6]
 801e852:	2b00      	cmp	r3, #0
 801e854:	d101      	bne.n	801e85a <HAL_SAI_Receive_DMA+0x1e>
  {
    return  HAL_ERROR;
 801e856:	2301      	movs	r3, #1
 801e858:	e079      	b.n	801e94e <HAL_SAI_Receive_DMA+0x112>
  }

  if (hsai->State == HAL_SAI_STATE_READY)
 801e85a:	68fb      	ldr	r3, [r7, #12]
 801e85c:	f893 3091 	ldrb.w	r3, [r3, #145]	@ 0x91
 801e860:	b2db      	uxtb	r3, r3
 801e862:	2b01      	cmp	r3, #1
 801e864:	d172      	bne.n	801e94c <HAL_SAI_Receive_DMA+0x110>
  {
    /* Process Locked */
    __HAL_LOCK(hsai);
 801e866:	68fb      	ldr	r3, [r7, #12]
 801e868:	f893 3090 	ldrb.w	r3, [r3, #144]	@ 0x90
 801e86c:	2b01      	cmp	r3, #1
 801e86e:	d101      	bne.n	801e874 <HAL_SAI_Receive_DMA+0x38>
 801e870:	2302      	movs	r3, #2
 801e872:	e06c      	b.n	801e94e <HAL_SAI_Receive_DMA+0x112>
 801e874:	68fb      	ldr	r3, [r7, #12]
 801e876:	2201      	movs	r2, #1
 801e878:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    hsai->pBuffPtr = pData;
 801e87c:	68fb      	ldr	r3, [r7, #12]
 801e87e:	68ba      	ldr	r2, [r7, #8]
 801e880:	679a      	str	r2, [r3, #120]	@ 0x78
    hsai->XferSize = Size;
 801e882:	68fb      	ldr	r3, [r7, #12]
 801e884:	88fa      	ldrh	r2, [r7, #6]
 801e886:	f8a3 207c 	strh.w	r2, [r3, #124]	@ 0x7c
    hsai->XferCount = Size;
 801e88a:	68fb      	ldr	r3, [r7, #12]
 801e88c:	88fa      	ldrh	r2, [r7, #6]
 801e88e:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e
    hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 801e892:	68fb      	ldr	r3, [r7, #12]
 801e894:	2200      	movs	r2, #0
 801e896:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
    hsai->State = HAL_SAI_STATE_BUSY_RX;
 801e89a:	68fb      	ldr	r3, [r7, #12]
 801e89c:	2222      	movs	r2, #34	@ 0x22
 801e89e:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Set the SAI Rx DMA Half transfer complete callback */
    hsai->hdmarx->XferHalfCpltCallback = SAI_DMARxHalfCplt;
 801e8a2:	68fb      	ldr	r3, [r7, #12]
 801e8a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e8a8:	4a2b      	ldr	r2, [pc, #172]	@ (801e958 <HAL_SAI_Receive_DMA+0x11c>)
 801e8aa:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set the SAI Rx DMA transfer complete callback */
    hsai->hdmarx->XferCpltCallback = SAI_DMARxCplt;
 801e8ac:	68fb      	ldr	r3, [r7, #12]
 801e8ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e8b2:	4a2a      	ldr	r2, [pc, #168]	@ (801e95c <HAL_SAI_Receive_DMA+0x120>)
 801e8b4:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Set the DMA error callback */
    hsai->hdmarx->XferErrorCallback = SAI_DMAError;
 801e8b6:	68fb      	ldr	r3, [r7, #12]
 801e8b8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e8bc:	4a28      	ldr	r2, [pc, #160]	@ (801e960 <HAL_SAI_Receive_DMA+0x124>)
 801e8be:	64da      	str	r2, [r3, #76]	@ 0x4c

    /* Set the DMA Rx abort callback */
    hsai->hdmarx->XferAbortCallback = NULL;
 801e8c0:	68fb      	ldr	r3, [r7, #12]
 801e8c2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 801e8c6:	2200      	movs	r2, #0
 801e8c8:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Enable the Rx DMA Stream */
    if (HAL_DMA_Start_IT(hsai->hdmarx, (uint32_t)&hsai->Instance->DR, (uint32_t)hsai->pBuffPtr, hsai->XferSize) != HAL_OK)
 801e8ca:	68fb      	ldr	r3, [r7, #12]
 801e8cc:	f8d3 0084 	ldr.w	r0, [r3, #132]	@ 0x84
 801e8d0:	68fb      	ldr	r3, [r7, #12]
 801e8d2:	681b      	ldr	r3, [r3, #0]
 801e8d4:	331c      	adds	r3, #28
 801e8d6:	4619      	mov	r1, r3
 801e8d8:	68fb      	ldr	r3, [r7, #12]
 801e8da:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801e8dc:	461a      	mov	r2, r3
 801e8de:	68fb      	ldr	r3, [r7, #12]
 801e8e0:	f8b3 307c 	ldrh.w	r3, [r3, #124]	@ 0x7c
 801e8e4:	f7f4 ff7a 	bl	80137dc <HAL_DMA_Start_IT>
 801e8e8:	4603      	mov	r3, r0
 801e8ea:	2b00      	cmp	r3, #0
 801e8ec:	d005      	beq.n	801e8fa <HAL_SAI_Receive_DMA+0xbe>
    {
      __HAL_UNLOCK(hsai);
 801e8ee:	68fb      	ldr	r3, [r7, #12]
 801e8f0:	2200      	movs	r2, #0
 801e8f2:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90
      return  HAL_ERROR;
 801e8f6:	2301      	movs	r3, #1
 801e8f8:	e029      	b.n	801e94e <HAL_SAI_Receive_DMA+0x112>
    }

    /* Enable the interrupts for error handling */
    __HAL_SAI_ENABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801e8fa:	2100      	movs	r1, #0
 801e8fc:	68f8      	ldr	r0, [r7, #12]
 801e8fe:	f000 f831 	bl	801e964 <SAI_InterruptFlag>
 801e902:	4601      	mov	r1, r0
 801e904:	68fb      	ldr	r3, [r7, #12]
 801e906:	681b      	ldr	r3, [r3, #0]
 801e908:	691a      	ldr	r2, [r3, #16]
 801e90a:	68fb      	ldr	r3, [r7, #12]
 801e90c:	681b      	ldr	r3, [r3, #0]
 801e90e:	430a      	orrs	r2, r1
 801e910:	611a      	str	r2, [r3, #16]

    /* Enable SAI Rx DMA Request */
    hsai->Instance->CR1 |= SAI_xCR1_DMAEN;
 801e912:	68fb      	ldr	r3, [r7, #12]
 801e914:	681b      	ldr	r3, [r3, #0]
 801e916:	681a      	ldr	r2, [r3, #0]
 801e918:	68fb      	ldr	r3, [r7, #12]
 801e91a:	681b      	ldr	r3, [r3, #0]
 801e91c:	f442 3200 	orr.w	r2, r2, #131072	@ 0x20000
 801e920:	601a      	str	r2, [r3, #0]

    /* Check if the SAI is already enabled */
    if ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) == 0U)
 801e922:	68fb      	ldr	r3, [r7, #12]
 801e924:	681b      	ldr	r3, [r3, #0]
 801e926:	681b      	ldr	r3, [r3, #0]
 801e928:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801e92c:	2b00      	cmp	r3, #0
 801e92e:	d107      	bne.n	801e940 <HAL_SAI_Receive_DMA+0x104>
    {
      /* Enable SAI peripheral */
      __HAL_SAI_ENABLE(hsai);
 801e930:	68fb      	ldr	r3, [r7, #12]
 801e932:	681b      	ldr	r3, [r3, #0]
 801e934:	681a      	ldr	r2, [r3, #0]
 801e936:	68fb      	ldr	r3, [r7, #12]
 801e938:	681b      	ldr	r3, [r3, #0]
 801e93a:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 801e93e:	601a      	str	r2, [r3, #0]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hsai);
 801e940:	68fb      	ldr	r3, [r7, #12]
 801e942:	2200      	movs	r2, #0
 801e944:	f883 2090 	strb.w	r2, [r3, #144]	@ 0x90

    return HAL_OK;
 801e948:	2300      	movs	r3, #0
 801e94a:	e000      	b.n	801e94e <HAL_SAI_Receive_DMA+0x112>
  }
  else
  {
    return HAL_BUSY;
 801e94c:	2302      	movs	r3, #2
  }
}
 801e94e:	4618      	mov	r0, r3
 801e950:	3710      	adds	r7, #16
 801e952:	46bd      	mov	sp, r7
 801e954:	bd80      	pop	{r7, pc}
 801e956:	bf00      	nop
 801e958:	0801eb25 	.word	0x0801eb25
 801e95c:	0801eac5 	.word	0x0801eac5
 801e960:	0801eb41 	.word	0x0801eb41

0801e964 <SAI_InterruptFlag>:
  *              the configuration information for SAI module.
  * @param  mode SAI_MODE_DMA or SAI_MODE_IT
  * @retval the list of the IT flag to enable
  */
static uint32_t SAI_InterruptFlag(const SAI_HandleTypeDef *hsai, SAI_ModeTypedef mode)
{
 801e964:	b480      	push	{r7}
 801e966:	b085      	sub	sp, #20
 801e968:	af00      	add	r7, sp, #0
 801e96a:	6078      	str	r0, [r7, #4]
 801e96c:	460b      	mov	r3, r1
 801e96e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmpIT = SAI_IT_OVRUDR;
 801e970:	2301      	movs	r3, #1
 801e972:	60fb      	str	r3, [r7, #12]

  if (mode == SAI_MODE_IT)
 801e974:	78fb      	ldrb	r3, [r7, #3]
 801e976:	2b01      	cmp	r3, #1
 801e978:	d103      	bne.n	801e982 <SAI_InterruptFlag+0x1e>
  {
    tmpIT |= SAI_IT_FREQ;
 801e97a:	68fb      	ldr	r3, [r7, #12]
 801e97c:	f043 0308 	orr.w	r3, r3, #8
 801e980:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801e982:	687b      	ldr	r3, [r7, #4]
 801e984:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801e986:	2b08      	cmp	r3, #8
 801e988:	d10b      	bne.n	801e9a2 <SAI_InterruptFlag+0x3e>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801e98a:	687b      	ldr	r3, [r7, #4]
 801e98c:	685b      	ldr	r3, [r3, #4]
  if ((hsai->Init.Protocol == SAI_AC97_PROTOCOL) &&
 801e98e:	2b03      	cmp	r3, #3
 801e990:	d003      	beq.n	801e99a <SAI_InterruptFlag+0x36>
      ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODEMASTER_RX)))
 801e992:	687b      	ldr	r3, [r7, #4]
 801e994:	685b      	ldr	r3, [r3, #4]
 801e996:	2b01      	cmp	r3, #1
 801e998:	d103      	bne.n	801e9a2 <SAI_InterruptFlag+0x3e>
  {
    tmpIT |= SAI_IT_CNRDY;
 801e99a:	68fb      	ldr	r3, [r7, #12]
 801e99c:	f043 0310 	orr.w	r3, r3, #16
 801e9a0:	60fb      	str	r3, [r7, #12]
  }

  if ((hsai->Init.AudioMode == SAI_MODESLAVE_RX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 801e9a2:	687b      	ldr	r3, [r7, #4]
 801e9a4:	685b      	ldr	r3, [r3, #4]
 801e9a6:	2b03      	cmp	r3, #3
 801e9a8:	d003      	beq.n	801e9b2 <SAI_InterruptFlag+0x4e>
 801e9aa:	687b      	ldr	r3, [r7, #4]
 801e9ac:	685b      	ldr	r3, [r3, #4]
 801e9ae:	2b02      	cmp	r3, #2
 801e9b0:	d104      	bne.n	801e9bc <SAI_InterruptFlag+0x58>
  {
    tmpIT |= SAI_IT_AFSDET | SAI_IT_LFSDET;
 801e9b2:	68fb      	ldr	r3, [r7, #12]
 801e9b4:	f043 0360 	orr.w	r3, r3, #96	@ 0x60
 801e9b8:	60fb      	str	r3, [r7, #12]
 801e9ba:	e003      	b.n	801e9c4 <SAI_InterruptFlag+0x60>
  }
  else
  {
    /* hsai has been configured in master mode */
    tmpIT |= SAI_IT_WCKCFG;
 801e9bc:	68fb      	ldr	r3, [r7, #12]
 801e9be:	f043 0304 	orr.w	r3, r3, #4
 801e9c2:	60fb      	str	r3, [r7, #12]
  }
  return tmpIT;
 801e9c4:	68fb      	ldr	r3, [r7, #12]
}
 801e9c6:	4618      	mov	r0, r3
 801e9c8:	3714      	adds	r7, #20
 801e9ca:	46bd      	mov	sp, r7
 801e9cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801e9d0:	4770      	bx	lr
	...

0801e9d4 <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 801e9d4:	b480      	push	{r7}
 801e9d6:	b085      	sub	sp, #20
 801e9d8:	af00      	add	r7, sp, #0
 801e9da:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 801e9dc:	4b18      	ldr	r3, [pc, #96]	@ (801ea40 <SAI_Disable+0x6c>)
 801e9de:	681b      	ldr	r3, [r3, #0]
 801e9e0:	4a18      	ldr	r2, [pc, #96]	@ (801ea44 <SAI_Disable+0x70>)
 801e9e2:	fba2 2303 	umull	r2, r3, r2, r3
 801e9e6:	0b1b      	lsrs	r3, r3, #12
 801e9e8:	009b      	lsls	r3, r3, #2
 801e9ea:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 801e9ec:	2300      	movs	r3, #0
 801e9ee:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 801e9f0:	687b      	ldr	r3, [r7, #4]
 801e9f2:	681b      	ldr	r3, [r3, #0]
 801e9f4:	681a      	ldr	r2, [r3, #0]
 801e9f6:	687b      	ldr	r3, [r7, #4]
 801e9f8:	681b      	ldr	r3, [r3, #0]
 801e9fa:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 801e9fe:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 801ea00:	68fb      	ldr	r3, [r7, #12]
 801ea02:	2b00      	cmp	r3, #0
 801ea04:	d10a      	bne.n	801ea1c <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 801ea06:	687b      	ldr	r3, [r7, #4]
 801ea08:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801ea0c:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 801ea10:	687b      	ldr	r3, [r7, #4]
 801ea12:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94
      status = HAL_TIMEOUT;
 801ea16:	2303      	movs	r3, #3
 801ea18:	72fb      	strb	r3, [r7, #11]
      break;
 801ea1a:	e009      	b.n	801ea30 <SAI_Disable+0x5c>
    }
    count--;
 801ea1c:	68fb      	ldr	r3, [r7, #12]
 801ea1e:	3b01      	subs	r3, #1
 801ea20:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 801ea22:	687b      	ldr	r3, [r7, #4]
 801ea24:	681b      	ldr	r3, [r3, #0]
 801ea26:	681b      	ldr	r3, [r3, #0]
 801ea28:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801ea2c:	2b00      	cmp	r3, #0
 801ea2e:	d1e7      	bne.n	801ea00 <SAI_Disable+0x2c>

  return status;
 801ea30:	7afb      	ldrb	r3, [r7, #11]
}
 801ea32:	4618      	mov	r0, r3
 801ea34:	3714      	adds	r7, #20
 801ea36:	46bd      	mov	sp, r7
 801ea38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ea3c:	4770      	bx	lr
 801ea3e:	bf00      	nop
 801ea40:	24000400 	.word	0x24000400
 801ea44:	95cbec1b 	.word	0x95cbec1b

0801ea48 <SAI_DMATxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxCplt(DMA_HandleTypeDef *hdma)
{
 801ea48:	b580      	push	{r7, lr}
 801ea4a:	b084      	sub	sp, #16
 801ea4c:	af00      	add	r7, sp, #0
 801ea4e:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801ea50:	687b      	ldr	r3, [r7, #4]
 801ea52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ea54:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801ea56:	687b      	ldr	r3, [r7, #4]
 801ea58:	69db      	ldr	r3, [r3, #28]
 801ea5a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801ea5e:	d01c      	beq.n	801ea9a <SAI_DMATxCplt+0x52>
  {
    hsai->XferCount = 0;
 801ea60:	68fb      	ldr	r3, [r7, #12]
 801ea62:	2200      	movs	r2, #0
 801ea64:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Disable SAI Tx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 801ea68:	68fb      	ldr	r3, [r7, #12]
 801ea6a:	681b      	ldr	r3, [r3, #0]
 801ea6c:	681a      	ldr	r2, [r3, #0]
 801ea6e:	68fb      	ldr	r3, [r7, #12]
 801ea70:	681b      	ldr	r3, [r3, #0]
 801ea72:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801ea76:	601a      	str	r2, [r3, #0]

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801ea78:	2100      	movs	r1, #0
 801ea7a:	68f8      	ldr	r0, [r7, #12]
 801ea7c:	f7ff ff72 	bl	801e964 <SAI_InterruptFlag>
 801ea80:	4603      	mov	r3, r0
 801ea82:	43d9      	mvns	r1, r3
 801ea84:	68fb      	ldr	r3, [r7, #12]
 801ea86:	681b      	ldr	r3, [r3, #0]
 801ea88:	691a      	ldr	r2, [r3, #16]
 801ea8a:	68fb      	ldr	r3, [r7, #12]
 801ea8c:	681b      	ldr	r3, [r3, #0]
 801ea8e:	400a      	ands	r2, r1
 801ea90:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801ea92:	68fb      	ldr	r3, [r7, #12]
 801ea94:	2201      	movs	r2, #1
 801ea96:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxCpltCallback(hsai);
#else
  HAL_SAI_TxCpltCallback(hsai);
 801ea9a:	68f8      	ldr	r0, [r7, #12]
 801ea9c:	f7ed fd06 	bl	800c4ac <HAL_SAI_TxCpltCallback>
#endif
}
 801eaa0:	bf00      	nop
 801eaa2:	3710      	adds	r7, #16
 801eaa4:	46bd      	mov	sp, r7
 801eaa6:	bd80      	pop	{r7, pc}

0801eaa8 <SAI_DMATxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801eaa8:	b580      	push	{r7, lr}
 801eaaa:	b084      	sub	sp, #16
 801eaac:	af00      	add	r7, sp, #0
 801eaae:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801eab0:	687b      	ldr	r3, [r7, #4]
 801eab2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eab4:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->TxHalfCpltCallback(hsai);
#else
  HAL_SAI_TxHalfCpltCallback(hsai);
 801eab6:	68f8      	ldr	r0, [r7, #12]
 801eab8:	f7ed fd03 	bl	800c4c2 <HAL_SAI_TxHalfCpltCallback>
#endif
}
 801eabc:	bf00      	nop
 801eabe:	3710      	adds	r7, #16
 801eac0:	46bd      	mov	sp, r7
 801eac2:	bd80      	pop	{r7, pc}

0801eac4 <SAI_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 801eac4:	b580      	push	{r7, lr}
 801eac6:	b084      	sub	sp, #16
 801eac8:	af00      	add	r7, sp, #0
 801eaca:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801eacc:	687b      	ldr	r3, [r7, #4]
 801eace:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ead0:	60fb      	str	r3, [r7, #12]

  if (hdma->Init.Mode != DMA_CIRCULAR)
 801ead2:	687b      	ldr	r3, [r7, #4]
 801ead4:	69db      	ldr	r3, [r3, #28]
 801ead6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801eada:	d01c      	beq.n	801eb16 <SAI_DMARxCplt+0x52>
  {
    /* Disable Rx DMA Request */
    hsai->Instance->CR1 &= (uint32_t)(~SAI_xCR1_DMAEN);
 801eadc:	68fb      	ldr	r3, [r7, #12]
 801eade:	681b      	ldr	r3, [r3, #0]
 801eae0:	681a      	ldr	r2, [r3, #0]
 801eae2:	68fb      	ldr	r3, [r7, #12]
 801eae4:	681b      	ldr	r3, [r3, #0]
 801eae6:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801eaea:	601a      	str	r2, [r3, #0]
    hsai->XferCount = 0;
 801eaec:	68fb      	ldr	r3, [r7, #12]
 801eaee:	2200      	movs	r2, #0
 801eaf0:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* Stop the interrupts error handling */
    __HAL_SAI_DISABLE_IT(hsai, SAI_InterruptFlag(hsai, SAI_MODE_DMA));
 801eaf4:	2100      	movs	r1, #0
 801eaf6:	68f8      	ldr	r0, [r7, #12]
 801eaf8:	f7ff ff34 	bl	801e964 <SAI_InterruptFlag>
 801eafc:	4603      	mov	r3, r0
 801eafe:	43d9      	mvns	r1, r3
 801eb00:	68fb      	ldr	r3, [r7, #12]
 801eb02:	681b      	ldr	r3, [r3, #0]
 801eb04:	691a      	ldr	r2, [r3, #16]
 801eb06:	68fb      	ldr	r3, [r7, #12]
 801eb08:	681b      	ldr	r3, [r3, #0]
 801eb0a:	400a      	ands	r2, r1
 801eb0c:	611a      	str	r2, [r3, #16]

    hsai->State = HAL_SAI_STATE_READY;
 801eb0e:	68fb      	ldr	r3, [r7, #12]
 801eb10:	2201      	movs	r2, #1
 801eb12:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91
  }
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxCpltCallback(hsai);
#else
  HAL_SAI_RxCpltCallback(hsai);
 801eb16:	68f8      	ldr	r0, [r7, #12]
 801eb18:	f7ee f9cc 	bl	800ceb4 <HAL_SAI_RxCpltCallback>
#endif
}
 801eb1c:	bf00      	nop
 801eb1e:	3710      	adds	r7, #16
 801eb20:	46bd      	mov	sp, r7
 801eb22:	bd80      	pop	{r7, pc}

0801eb24 <SAI_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 801eb24:	b580      	push	{r7, lr}
 801eb26:	b084      	sub	sp, #16
 801eb28:	af00      	add	r7, sp, #0
 801eb2a:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801eb2c:	687b      	ldr	r3, [r7, #4]
 801eb2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb30:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
  hsai->RxHalfCpltCallback(hsai);
#else
  HAL_SAI_RxHalfCpltCallback(hsai);
 801eb32:	68f8      	ldr	r0, [r7, #12]
 801eb34:	f7ee f9a8 	bl	800ce88 <HAL_SAI_RxHalfCpltCallback>
#endif
}
 801eb38:	bf00      	nop
 801eb3a:	3710      	adds	r7, #16
 801eb3c:	46bd      	mov	sp, r7
 801eb3e:	bd80      	pop	{r7, pc}

0801eb40 <SAI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA module.
  * @retval None
  */
static void SAI_DMAError(DMA_HandleTypeDef *hdma)
{
 801eb40:	b580      	push	{r7, lr}
 801eb42:	b084      	sub	sp, #16
 801eb44:	af00      	add	r7, sp, #0
 801eb46:	6078      	str	r0, [r7, #4]
  SAI_HandleTypeDef *hsai = (SAI_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 801eb48:	687b      	ldr	r3, [r7, #4]
 801eb4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eb4c:	60fb      	str	r3, [r7, #12]

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 801eb4e:	6878      	ldr	r0, [r7, #4]
 801eb50:	f7f6 fd3c 	bl	80155cc <HAL_DMA_GetError>
 801eb54:	4603      	mov	r3, r0
 801eb56:	2b02      	cmp	r3, #2
 801eb58:	d01d      	beq.n	801eb96 <SAI_DMAError+0x56>
  {
    /* Set SAI error code */
    hsai->ErrorCode |= HAL_SAI_ERROR_DMA;
 801eb5a:	68fb      	ldr	r3, [r7, #12]
 801eb5c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 801eb60:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 801eb64:	68fb      	ldr	r3, [r7, #12]
 801eb66:	f8c3 2094 	str.w	r2, [r3, #148]	@ 0x94

    /* Disable the SAI DMA request */
    hsai->Instance->CR1 &= ~SAI_xCR1_DMAEN;
 801eb6a:	68fb      	ldr	r3, [r7, #12]
 801eb6c:	681b      	ldr	r3, [r3, #0]
 801eb6e:	681a      	ldr	r2, [r3, #0]
 801eb70:	68fb      	ldr	r3, [r7, #12]
 801eb72:	681b      	ldr	r3, [r3, #0]
 801eb74:	f422 3200 	bic.w	r2, r2, #131072	@ 0x20000
 801eb78:	601a      	str	r2, [r3, #0]

    /* Disable SAI peripheral */
    /* No need to check return value because state will be updated and HAL_SAI_ErrorCallback will be called later */
    (void) SAI_Disable(hsai);
 801eb7a:	68f8      	ldr	r0, [r7, #12]
 801eb7c:	f7ff ff2a 	bl	801e9d4 <SAI_Disable>

    /* Set the SAI state ready to be able to start again the process */
    hsai->State = HAL_SAI_STATE_READY;
 801eb80:	68fb      	ldr	r3, [r7, #12]
 801eb82:	2201      	movs	r2, #1
 801eb84:	f883 2091 	strb.w	r2, [r3, #145]	@ 0x91

    /* Initialize XferCount */
    hsai->XferCount = 0U;
 801eb88:	68fb      	ldr	r3, [r7, #12]
 801eb8a:	2200      	movs	r2, #0
 801eb8c:	f8a3 207e 	strh.w	r2, [r3, #126]	@ 0x7e

    /* SAI error Callback */
#if (USE_HAL_SAI_REGISTER_CALLBACKS == 1)
    hsai->ErrorCallback(hsai);
#else
    HAL_SAI_ErrorCallback(hsai);
 801eb90:	68f8      	ldr	r0, [r7, #12]
 801eb92:	f7ed fca1 	bl	800c4d8 <HAL_SAI_ErrorCallback>
#endif
  }
}
 801eb96:	bf00      	nop
 801eb98:	3710      	adds	r7, #16
 801eb9a:	46bd      	mov	sp, r7
 801eb9c:	bd80      	pop	{r7, pc}

0801eb9e <HAL_SD_Init>:
            SD_HandleTypeDef and create the associated handle.
  * @param  hsd: Pointer to the SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Init(SD_HandleTypeDef *hsd)
{
 801eb9e:	b580      	push	{r7, lr}
 801eba0:	b08a      	sub	sp, #40	@ 0x28
 801eba2:	af00      	add	r7, sp, #0
 801eba4:	6078      	str	r0, [r7, #4]
  uint32_t speedgrade;
  uint32_t unitsize;
  uint32_t tickstart;

  /* Check the SD handle allocation */
  if (hsd == NULL)
 801eba6:	687b      	ldr	r3, [r7, #4]
 801eba8:	2b00      	cmp	r3, #0
 801ebaa:	d101      	bne.n	801ebb0 <HAL_SD_Init+0x12>
  {
    return HAL_ERROR;
 801ebac:	2301      	movs	r3, #1
 801ebae:	e075      	b.n	801ec9c <HAL_SD_Init+0xfe>
  assert_param(IS_SDMMC_CLOCK_POWER_SAVE(hsd->Init.ClockPowerSave));
  assert_param(IS_SDMMC_BUS_WIDE(hsd->Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(hsd->Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(hsd->Init.ClockDiv));

  if (hsd->State == HAL_SD_STATE_RESET)
 801ebb0:	687b      	ldr	r3, [r7, #4]
 801ebb2:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ebb6:	b2db      	uxtb	r3, r3
 801ebb8:	2b00      	cmp	r3, #0
 801ebba:	d105      	bne.n	801ebc8 <HAL_SD_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    hsd->Lock = HAL_UNLOCKED;
 801ebbc:	687b      	ldr	r3, [r7, #4]
 801ebbe:	2200      	movs	r2, #0
 801ebc0:	761a      	strb	r2, [r3, #24]

    /* Init the low level hardware */
    hsd->MspInitCallback(hsd);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_SD_MspInit(hsd);
 801ebc2:	6878      	ldr	r0, [r7, #4]
 801ebc4:	f000 f931 	bl	801ee2a <HAL_SD_MspInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }

  hsd->State = HAL_SD_STATE_PROGRAMMING;
 801ebc8:	687b      	ldr	r3, [r7, #4]
 801ebca:	2204      	movs	r2, #4
 801ebcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  /* Initialize the Card parameters */
  if (HAL_SD_InitCard(hsd) != HAL_OK)
 801ebd0:	6878      	ldr	r0, [r7, #4]
 801ebd2:	f000 f867 	bl	801eca4 <HAL_SD_InitCard>
 801ebd6:	4603      	mov	r3, r0
 801ebd8:	2b00      	cmp	r3, #0
 801ebda:	d001      	beq.n	801ebe0 <HAL_SD_Init+0x42>
  {
    return HAL_ERROR;
 801ebdc:	2301      	movs	r3, #1
 801ebde:	e05d      	b.n	801ec9c <HAL_SD_Init+0xfe>
  }

  if (HAL_SD_GetCardStatus(hsd, &CardStatus) != HAL_OK)
 801ebe0:	f107 0308 	add.w	r3, r7, #8
 801ebe4:	4619      	mov	r1, r3
 801ebe6:	6878      	ldr	r0, [r7, #4]
 801ebe8:	f001 fb0e 	bl	8020208 <HAL_SD_GetCardStatus>
 801ebec:	4603      	mov	r3, r0
 801ebee:	2b00      	cmp	r3, #0
 801ebf0:	d001      	beq.n	801ebf6 <HAL_SD_Init+0x58>
  {
    return HAL_ERROR;
 801ebf2:	2301      	movs	r3, #1
 801ebf4:	e052      	b.n	801ec9c <HAL_SD_Init+0xfe>
  }
  /* Get Initial Card Speed from Card Status*/
  speedgrade = CardStatus.UhsSpeedGrade;
 801ebf6:	7e3b      	ldrb	r3, [r7, #24]
 801ebf8:	b2db      	uxtb	r3, r3
 801ebfa:	627b      	str	r3, [r7, #36]	@ 0x24
  unitsize = CardStatus.UhsAllocationUnitSize;
 801ebfc:	7e7b      	ldrb	r3, [r7, #25]
 801ebfe:	b2db      	uxtb	r3, r3
 801ec00:	623b      	str	r3, [r7, #32]
  if ((hsd->SdCard.CardType == CARD_SDHC_SDXC) && ((speedgrade != 0U) || (unitsize != 0U)))
 801ec02:	687b      	ldr	r3, [r7, #4]
 801ec04:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec06:	2b01      	cmp	r3, #1
 801ec08:	d10a      	bne.n	801ec20 <HAL_SD_Init+0x82>
 801ec0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ec0c:	2b00      	cmp	r3, #0
 801ec0e:	d102      	bne.n	801ec16 <HAL_SD_Init+0x78>
 801ec10:	6a3b      	ldr	r3, [r7, #32]
 801ec12:	2b00      	cmp	r3, #0
 801ec14:	d004      	beq.n	801ec20 <HAL_SD_Init+0x82>
  {
    hsd->SdCard.CardSpeed = CARD_ULTRA_HIGH_SPEED;
 801ec16:	687b      	ldr	r3, [r7, #4]
 801ec18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 801ec1c:	659a      	str	r2, [r3, #88]	@ 0x58
 801ec1e:	e00b      	b.n	801ec38 <HAL_SD_Init+0x9a>
  }
  else
  {
    if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 801ec20:	687b      	ldr	r3, [r7, #4]
 801ec22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ec24:	2b01      	cmp	r3, #1
 801ec26:	d104      	bne.n	801ec32 <HAL_SD_Init+0x94>
    {
      hsd->SdCard.CardSpeed  = CARD_HIGH_SPEED;
 801ec28:	687b      	ldr	r3, [r7, #4]
 801ec2a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801ec2e:	659a      	str	r2, [r3, #88]	@ 0x58
 801ec30:	e002      	b.n	801ec38 <HAL_SD_Init+0x9a>
    }
    else
    {
      hsd->SdCard.CardSpeed  = CARD_NORMAL_SPEED;
 801ec32:	687b      	ldr	r3, [r7, #4]
 801ec34:	2200      	movs	r2, #0
 801ec36:	659a      	str	r2, [r3, #88]	@ 0x58
    }

  }
  /* Configure the bus wide */
  if (HAL_SD_ConfigWideBusOperation(hsd, hsd->Init.BusWide) != HAL_OK)
 801ec38:	687b      	ldr	r3, [r7, #4]
 801ec3a:	68db      	ldr	r3, [r3, #12]
 801ec3c:	4619      	mov	r1, r3
 801ec3e:	6878      	ldr	r0, [r7, #4]
 801ec40:	f001 fba0 	bl	8020384 <HAL_SD_ConfigWideBusOperation>
 801ec44:	4603      	mov	r3, r0
 801ec46:	2b00      	cmp	r3, #0
 801ec48:	d001      	beq.n	801ec4e <HAL_SD_Init+0xb0>
  {
    return HAL_ERROR;
 801ec4a:	2301      	movs	r3, #1
 801ec4c:	e026      	b.n	801ec9c <HAL_SD_Init+0xfe>
  }

  /* Verify that SD card is ready to use after Initialization */
  tickstart = HAL_GetTick();
 801ec4e:	f7f3 fa95 	bl	801217c <HAL_GetTick>
 801ec52:	61f8      	str	r0, [r7, #28]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801ec54:	e011      	b.n	801ec7a <HAL_SD_Init+0xdc>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 801ec56:	f7f3 fa91 	bl	801217c <HAL_GetTick>
 801ec5a:	4602      	mov	r2, r0
 801ec5c:	69fb      	ldr	r3, [r7, #28]
 801ec5e:	1ad3      	subs	r3, r2, r3
 801ec60:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 801ec64:	d109      	bne.n	801ec7a <HAL_SD_Init+0xdc>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 801ec66:	687b      	ldr	r3, [r7, #4]
 801ec68:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 801ec6c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801ec6e:	687b      	ldr	r3, [r7, #4]
 801ec70:	2201      	movs	r2, #1
 801ec72:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 801ec76:	2303      	movs	r3, #3
 801ec78:	e010      	b.n	801ec9c <HAL_SD_Init+0xfe>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 801ec7a:	6878      	ldr	r0, [r7, #4]
 801ec7c:	f001 fd50 	bl	8020720 <HAL_SD_GetCardState>
 801ec80:	4603      	mov	r3, r0
 801ec82:	2b04      	cmp	r3, #4
 801ec84:	d1e7      	bne.n	801ec56 <HAL_SD_Init+0xb8>
    }
  }

  /* Initialize the error code */
  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801ec86:	687b      	ldr	r3, [r7, #4]
 801ec88:	2200      	movs	r2, #0
 801ec8a:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Initialize the SD operation */
  hsd->Context = SD_CONTEXT_NONE;
 801ec8c:	687b      	ldr	r3, [r7, #4]
 801ec8e:	2200      	movs	r2, #0
 801ec90:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Initialize the SD state */
  hsd->State = HAL_SD_STATE_READY;
 801ec92:	687b      	ldr	r3, [r7, #4]
 801ec94:	2201      	movs	r2, #1
 801ec96:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801ec9a:	2300      	movs	r3, #0
}
 801ec9c:	4618      	mov	r0, r3
 801ec9e:	3728      	adds	r7, #40	@ 0x28
 801eca0:	46bd      	mov	sp, r7
 801eca2:	bd80      	pop	{r7, pc}

0801eca4 <HAL_SD_InitCard>:
  * @note   This function initializes the SD card. It could be used when a card
            re-initialization is needed.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_InitCard(SD_HandleTypeDef *hsd)
{
 801eca4:	b590      	push	{r4, r7, lr}
 801eca6:	b08d      	sub	sp, #52	@ 0x34
 801eca8:	af02      	add	r7, sp, #8
 801ecaa:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  SD_InitTypeDef Init = {0U};
 801ecac:	f107 030c 	add.w	r3, r7, #12
 801ecb0:	2200      	movs	r2, #0
 801ecb2:	601a      	str	r2, [r3, #0]
 801ecb4:	605a      	str	r2, [r3, #4]
 801ecb6:	609a      	str	r2, [r3, #8]
 801ecb8:	60da      	str	r2, [r3, #12]
 801ecba:	611a      	str	r2, [r3, #16]
  uint32_t sdmmc_clk;

  /* Default SDMMC peripheral configuration for SD card initialization */
  Init.ClockEdge           = SDMMC_CLOCK_EDGE_RISING;
 801ecbc:	2300      	movs	r3, #0
 801ecbe:	60fb      	str	r3, [r7, #12]
  Init.ClockPowerSave      = SDMMC_CLOCK_POWER_SAVE_DISABLE;
 801ecc0:	2300      	movs	r3, #0
 801ecc2:	613b      	str	r3, [r7, #16]
  Init.BusWide             = SDMMC_BUS_WIDE_1B;
 801ecc4:	2300      	movs	r3, #0
 801ecc6:	617b      	str	r3, [r7, #20]
  Init.HardwareFlowControl = SDMMC_HARDWARE_FLOW_CONTROL_DISABLE;
 801ecc8:	2300      	movs	r3, #0
 801ecca:	61bb      	str	r3, [r7, #24]

  /* Init Clock should be less or equal to 400Khz*/
  sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 801eccc:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 801ecd0:	f04f 0100 	mov.w	r1, #0
 801ecd4:	f7fd fe12 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 801ecd8:	6278      	str	r0, [r7, #36]	@ 0x24
  if (sdmmc_clk == 0U)
 801ecda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d109      	bne.n	801ecf4 <HAL_SD_InitCard+0x50>
  {
    hsd->State = HAL_SD_STATE_READY;
 801ece0:	687b      	ldr	r3, [r7, #4]
 801ece2:	2201      	movs	r2, #1
 801ece4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode = SDMMC_ERROR_INVALID_PARAMETER;
 801ece8:	687b      	ldr	r3, [r7, #4]
 801ecea:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 801ecee:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801ecf0:	2301      	movs	r3, #1
 801ecf2:	e070      	b.n	801edd6 <HAL_SD_InitCard+0x132>
  }
  Init.ClockDiv = sdmmc_clk / (2U * SD_INIT_FREQ);
 801ecf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ecf6:	0a1b      	lsrs	r3, r3, #8
 801ecf8:	4a39      	ldr	r2, [pc, #228]	@ (801ede0 <HAL_SD_InitCard+0x13c>)
 801ecfa:	fba2 2303 	umull	r2, r3, r2, r3
 801ecfe:	091b      	lsrs	r3, r3, #4
 801ed00:	61fb      	str	r3, [r7, #28]
  /* Set Transceiver polarity */
  hsd->Instance->POWER |= SDMMC_POWER_DIRPOL;
#endif /* USE_SD_TRANSCEIVER  */

  /* Initialize SDMMC peripheral interface with default configuration */
  (void)SDMMC_Init(hsd->Instance, Init);
 801ed02:	687b      	ldr	r3, [r7, #4]
 801ed04:	681c      	ldr	r4, [r3, #0]
 801ed06:	466a      	mov	r2, sp
 801ed08:	f107 0318 	add.w	r3, r7, #24
 801ed0c:	e893 0003 	ldmia.w	r3, {r0, r1}
 801ed10:	e882 0003 	stmia.w	r2, {r0, r1}
 801ed14:	f107 030c 	add.w	r3, r7, #12
 801ed18:	cb0e      	ldmia	r3, {r1, r2, r3}
 801ed1a:	4620      	mov	r0, r4
 801ed1c:	f002 fde2 	bl	80218e4 <SDMMC_Init>

  /* Set Power State to ON */
  (void)SDMMC_PowerState_ON(hsd->Instance);
 801ed20:	687b      	ldr	r3, [r7, #4]
 801ed22:	681b      	ldr	r3, [r3, #0]
 801ed24:	4618      	mov	r0, r3
 801ed26:	f002 fe25 	bl	8021974 <SDMMC_PowerState_ON>

  /* wait 74 Cycles: required power up waiting time before starting
     the SD initialization sequence */
  if (Init.ClockDiv != 0U)
 801ed2a:	69fb      	ldr	r3, [r7, #28]
 801ed2c:	2b00      	cmp	r3, #0
 801ed2e:	d005      	beq.n	801ed3c <HAL_SD_InitCard+0x98>
  {
    sdmmc_clk = sdmmc_clk / (2U * Init.ClockDiv);
 801ed30:	69fb      	ldr	r3, [r7, #28]
 801ed32:	005b      	lsls	r3, r3, #1
 801ed34:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801ed36:	fbb2 f3f3 	udiv	r3, r2, r3
 801ed3a:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  if (sdmmc_clk != 0U)
 801ed3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed3e:	2b00      	cmp	r3, #0
 801ed40:	d007      	beq.n	801ed52 <HAL_SD_InitCard+0xae>
  {
    HAL_Delay(1U + (74U * 1000U / (sdmmc_clk)));
 801ed42:	4a28      	ldr	r2, [pc, #160]	@ (801ede4 <HAL_SD_InitCard+0x140>)
 801ed44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ed46:	fbb2 f3f3 	udiv	r3, r2, r3
 801ed4a:	3301      	adds	r3, #1
 801ed4c:	4618      	mov	r0, r3
 801ed4e:	f7f3 fa21 	bl	8012194 <HAL_Delay>
  }

  /* Identify card operating voltage */
  errorstate = SD_PowerON(hsd);
 801ed52:	6878      	ldr	r0, [r7, #4]
 801ed54:	f001 fdd2 	bl	80208fc <SD_PowerON>
 801ed58:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ed5a:	6a3b      	ldr	r3, [r7, #32]
 801ed5c:	2b00      	cmp	r3, #0
 801ed5e:	d00b      	beq.n	801ed78 <HAL_SD_InitCard+0xd4>
  {
    hsd->State = HAL_SD_STATE_READY;
 801ed60:	687b      	ldr	r3, [r7, #4]
 801ed62:	2201      	movs	r2, #1
 801ed64:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801ed68:	687b      	ldr	r3, [r7, #4]
 801ed6a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ed6c:	6a3b      	ldr	r3, [r7, #32]
 801ed6e:	431a      	orrs	r2, r3
 801ed70:	687b      	ldr	r3, [r7, #4]
 801ed72:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801ed74:	2301      	movs	r3, #1
 801ed76:	e02e      	b.n	801edd6 <HAL_SD_InitCard+0x132>
  }

  /* Card initialization */
  errorstate = SD_InitCard(hsd);
 801ed78:	6878      	ldr	r0, [r7, #4]
 801ed7a:	f001 fcf1 	bl	8020760 <SD_InitCard>
 801ed7e:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801ed80:	6a3b      	ldr	r3, [r7, #32]
 801ed82:	2b00      	cmp	r3, #0
 801ed84:	d00b      	beq.n	801ed9e <HAL_SD_InitCard+0xfa>
  {
    hsd->State = HAL_SD_STATE_READY;
 801ed86:	687b      	ldr	r3, [r7, #4]
 801ed88:	2201      	movs	r2, #1
 801ed8a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    hsd->ErrorCode |= errorstate;
 801ed8e:	687b      	ldr	r3, [r7, #4]
 801ed90:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ed92:	6a3b      	ldr	r3, [r7, #32]
 801ed94:	431a      	orrs	r2, r3
 801ed96:	687b      	ldr	r3, [r7, #4]
 801ed98:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801ed9a:	2301      	movs	r3, #1
 801ed9c:	e01b      	b.n	801edd6 <HAL_SD_InitCard+0x132>
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 801ed9e:	687b      	ldr	r3, [r7, #4]
 801eda0:	681b      	ldr	r3, [r3, #0]
 801eda2:	f44f 7100 	mov.w	r1, #512	@ 0x200
 801eda6:	4618      	mov	r0, r3
 801eda8:	f002 fe8a 	bl	8021ac0 <SDMMC_CmdBlockLength>
 801edac:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 801edae:	6a3b      	ldr	r3, [r7, #32]
 801edb0:	2b00      	cmp	r3, #0
 801edb2:	d00f      	beq.n	801edd4 <HAL_SD_InitCard+0x130>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801edb4:	687b      	ldr	r3, [r7, #4]
 801edb6:	681b      	ldr	r3, [r3, #0]
 801edb8:	4a0b      	ldr	r2, [pc, #44]	@ (801ede8 <HAL_SD_InitCard+0x144>)
 801edba:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 801edbc:	687b      	ldr	r3, [r7, #4]
 801edbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801edc0:	6a3b      	ldr	r3, [r7, #32]
 801edc2:	431a      	orrs	r2, r3
 801edc4:	687b      	ldr	r3, [r7, #4]
 801edc6:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 801edc8:	687b      	ldr	r3, [r7, #4]
 801edca:	2201      	movs	r2, #1
 801edcc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 801edd0:	2301      	movs	r3, #1
 801edd2:	e000      	b.n	801edd6 <HAL_SD_InitCard+0x132>
  }

  return HAL_OK;
 801edd4:	2300      	movs	r3, #0
}
 801edd6:	4618      	mov	r0, r3
 801edd8:	372c      	adds	r7, #44	@ 0x2c
 801edda:	46bd      	mov	sp, r7
 801eddc:	bd90      	pop	{r4, r7, pc}
 801edde:	bf00      	nop
 801ede0:	014f8b59 	.word	0x014f8b59
 801ede4:	00012110 	.word	0x00012110
 801ede8:	1fe00fff 	.word	0x1fe00fff

0801edec <HAL_SD_DeInit>:
  * @brief  De-Initializes the SD card.
  * @param  hsd: Pointer to SD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_DeInit(SD_HandleTypeDef *hsd)
{
 801edec:	b580      	push	{r7, lr}
 801edee:	b082      	sub	sp, #8
 801edf0:	af00      	add	r7, sp, #0
 801edf2:	6078      	str	r0, [r7, #4]
  /* Check the SD handle allocation */
  if (hsd == NULL)
 801edf4:	687b      	ldr	r3, [r7, #4]
 801edf6:	2b00      	cmp	r3, #0
 801edf8:	d101      	bne.n	801edfe <HAL_SD_DeInit+0x12>
  {
    return HAL_ERROR;
 801edfa:	2301      	movs	r3, #1
 801edfc:	e011      	b.n	801ee22 <HAL_SD_DeInit+0x36>
  }

  /* Check the parameters */
  assert_param(IS_SDMMC_ALL_INSTANCE(hsd->Instance));

  hsd->State = HAL_SD_STATE_BUSY;
 801edfe:	687b      	ldr	r3, [r7, #4]
 801ee00:	2203      	movs	r2, #3
 801ee02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
  }
#endif /* USE_SD_TRANSCEIVER   */

  /* Set SD power state to off */
  SD_PowerOFF(hsd);
 801ee06:	6878      	ldr	r0, [r7, #4]
 801ee08:	f001 fe06 	bl	8020a18 <SD_PowerOFF>

  /* DeInit the low level hardware */
  hsd->MspDeInitCallback(hsd);
#else
  /* De-Initialize the MSP layer */
  HAL_SD_MspDeInit(hsd);
 801ee0c:	6878      	ldr	r0, [r7, #4]
 801ee0e:	f000 f816 	bl	801ee3e <HAL_SD_MspDeInit>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */

  hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801ee12:	687b      	ldr	r3, [r7, #4]
 801ee14:	2200      	movs	r2, #0
 801ee16:	635a      	str	r2, [r3, #52]	@ 0x34
  hsd->State = HAL_SD_STATE_RESET;
 801ee18:	687b      	ldr	r3, [r7, #4]
 801ee1a:	2200      	movs	r2, #0
 801ee1c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return HAL_OK;
 801ee20:	2300      	movs	r3, #0
}
 801ee22:	4618      	mov	r0, r3
 801ee24:	3708      	adds	r7, #8
 801ee26:	46bd      	mov	sp, r7
 801ee28:	bd80      	pop	{r7, pc}

0801ee2a <HAL_SD_MspInit>:
  * @brief  Initializes the SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspInit(SD_HandleTypeDef *hsd)
{
 801ee2a:	b480      	push	{r7}
 801ee2c:	b083      	sub	sp, #12
 801ee2e:	af00      	add	r7, sp, #0
 801ee30:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspInit could be implemented in the user file
   */
}
 801ee32:	bf00      	nop
 801ee34:	370c      	adds	r7, #12
 801ee36:	46bd      	mov	sp, r7
 801ee38:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee3c:	4770      	bx	lr

0801ee3e <HAL_SD_MspDeInit>:
  * @brief  De-Initialize SD MSP.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
__weak void HAL_SD_MspDeInit(SD_HandleTypeDef *hsd)
{
 801ee3e:	b480      	push	{r7}
 801ee40:	b083      	sub	sp, #12
 801ee42:	af00      	add	r7, sp, #0
 801ee44:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_MspDeInit could be implemented in the user file
   */
}
 801ee46:	bf00      	nop
 801ee48:	370c      	adds	r7, #12
 801ee4a:	46bd      	mov	sp, r7
 801ee4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 801ee50:	4770      	bx	lr
	...

0801ee54 <HAL_SD_ReadBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd, uint32_t NumberOfBlocks,
                                    uint32_t Timeout)
{
 801ee54:	b580      	push	{r7, lr}
 801ee56:	b092      	sub	sp, #72	@ 0x48
 801ee58:	af00      	add	r7, sp, #0
 801ee5a:	60f8      	str	r0, [r7, #12]
 801ee5c:	60b9      	str	r1, [r7, #8]
 801ee5e:	607a      	str	r2, [r7, #4]
 801ee60:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801ee62:	f7f3 f98b 	bl	801217c <HAL_GetTick>
 801ee66:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 801ee68:	687b      	ldr	r3, [r7, #4]
 801ee6a:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint8_t *tempbuff = pData;
 801ee6c:	68bb      	ldr	r3, [r7, #8]
 801ee6e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 801ee70:	68bb      	ldr	r3, [r7, #8]
 801ee72:	2b00      	cmp	r3, #0
 801ee74:	d107      	bne.n	801ee86 <HAL_SD_ReadBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801ee76:	68fb      	ldr	r3, [r7, #12]
 801ee78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ee7a:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801ee7e:	68fb      	ldr	r3, [r7, #12]
 801ee80:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801ee82:	2301      	movs	r3, #1
 801ee84:	e167      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801ee86:	68fb      	ldr	r3, [r7, #12]
 801ee88:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801ee8c:	b2db      	uxtb	r3, r3
 801ee8e:	2b01      	cmp	r3, #1
 801ee90:	f040 815a 	bne.w	801f148 <HAL_SD_ReadBlocks+0x2f4>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801ee94:	68fb      	ldr	r3, [r7, #12]
 801ee96:	2200      	movs	r2, #0
 801ee98:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801ee9a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801ee9c:	683b      	ldr	r3, [r7, #0]
 801ee9e:	441a      	add	r2, r3
 801eea0:	68fb      	ldr	r3, [r7, #12]
 801eea2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801eea4:	429a      	cmp	r2, r3
 801eea6:	d907      	bls.n	801eeb8 <HAL_SD_ReadBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801eea8:	68fb      	ldr	r3, [r7, #12]
 801eeaa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801eeac:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801eeb0:	68fb      	ldr	r3, [r7, #12]
 801eeb2:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801eeb4:	2301      	movs	r3, #1
 801eeb6:	e14e      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801eeb8:	68fb      	ldr	r3, [r7, #12]
 801eeba:	2203      	movs	r2, #3
 801eebc:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801eec0:	68fb      	ldr	r3, [r7, #12]
 801eec2:	681b      	ldr	r3, [r3, #0]
 801eec4:	2200      	movs	r2, #0
 801eec6:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801eec8:	68fb      	ldr	r3, [r7, #12]
 801eeca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801eecc:	2b01      	cmp	r3, #1
 801eece:	d002      	beq.n	801eed6 <HAL_SD_ReadBlocks+0x82>
    {
      add *= BLOCKSIZE;
 801eed0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801eed2:	025b      	lsls	r3, r3, #9
 801eed4:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801eed6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801eeda:	617b      	str	r3, [r7, #20]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801eedc:	683b      	ldr	r3, [r7, #0]
 801eede:	025b      	lsls	r3, r3, #9
 801eee0:	61bb      	str	r3, [r7, #24]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801eee2:	2390      	movs	r3, #144	@ 0x90
 801eee4:	61fb      	str	r3, [r7, #28]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801eee6:	2302      	movs	r3, #2
 801eee8:	623b      	str	r3, [r7, #32]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801eeea:	2300      	movs	r3, #0
 801eeec:	627b      	str	r3, [r7, #36]	@ 0x24
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801eeee:	2300      	movs	r3, #0
 801eef0:	62bb      	str	r3, [r7, #40]	@ 0x28
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801eef2:	68fb      	ldr	r3, [r7, #12]
 801eef4:	681b      	ldr	r3, [r3, #0]
 801eef6:	f107 0214 	add.w	r2, r7, #20
 801eefa:	4611      	mov	r1, r2
 801eefc:	4618      	mov	r0, r3
 801eefe:	f002 fdb3 	bl	8021a68 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801ef02:	68fb      	ldr	r3, [r7, #12]
 801ef04:	681b      	ldr	r3, [r3, #0]
 801ef06:	68da      	ldr	r2, [r3, #12]
 801ef08:	68fb      	ldr	r3, [r7, #12]
 801ef0a:	681b      	ldr	r3, [r3, #0]
 801ef0c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801ef10:	60da      	str	r2, [r3, #12]

    /* Read block(s) in polling mode */
    if (NumberOfBlocks > 1U)
 801ef12:	683b      	ldr	r3, [r7, #0]
 801ef14:	2b01      	cmp	r3, #1
 801ef16:	d90a      	bls.n	801ef2e <HAL_SD_ReadBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_READ_MULTIPLE_BLOCK;
 801ef18:	68fb      	ldr	r3, [r7, #12]
 801ef1a:	2202      	movs	r2, #2
 801ef1c:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801ef1e:	68fb      	ldr	r3, [r7, #12]
 801ef20:	681b      	ldr	r3, [r3, #0]
 801ef22:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ef24:	4618      	mov	r0, r3
 801ef26:	f002 fe11 	bl	8021b4c <SDMMC_CmdReadMultiBlock>
 801ef2a:	6478      	str	r0, [r7, #68]	@ 0x44
 801ef2c:	e009      	b.n	801ef42 <HAL_SD_ReadBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_READ_SINGLE_BLOCK;
 801ef2e:	68fb      	ldr	r3, [r7, #12]
 801ef30:	2201      	movs	r2, #1
 801ef32:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801ef34:	68fb      	ldr	r3, [r7, #12]
 801ef36:	681b      	ldr	r3, [r3, #0]
 801ef38:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801ef3a:	4618      	mov	r0, r3
 801ef3c:	f002 fde3 	bl	8021b06 <SDMMC_CmdReadSingleBlock>
 801ef40:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801ef42:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ef44:	2b00      	cmp	r3, #0
 801ef46:	d012      	beq.n	801ef6e <HAL_SD_ReadBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801ef48:	68fb      	ldr	r3, [r7, #12]
 801ef4a:	681b      	ldr	r3, [r3, #0]
 801ef4c:	4a84      	ldr	r2, [pc, #528]	@ (801f160 <HAL_SD_ReadBlocks+0x30c>)
 801ef4e:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801ef50:	68fb      	ldr	r3, [r7, #12]
 801ef52:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801ef54:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801ef56:	431a      	orrs	r2, r3
 801ef58:	68fb      	ldr	r3, [r7, #12]
 801ef5a:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801ef5c:	68fb      	ldr	r3, [r7, #12]
 801ef5e:	2201      	movs	r2, #1
 801ef60:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801ef64:	68fb      	ldr	r3, [r7, #12]
 801ef66:	2200      	movs	r2, #0
 801ef68:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801ef6a:	2301      	movs	r3, #1
 801ef6c:	e0f3      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
    }

    /* Poll on SDMMC flags */
    dataremaining = config.DataLength;
 801ef6e:	69bb      	ldr	r3, [r7, #24]
 801ef70:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801ef72:	e058      	b.n	801f026 <HAL_SD_ReadBlocks+0x1d2>
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) && (dataremaining >= SDMMC_FIFO_SIZE))
 801ef74:	68fb      	ldr	r3, [r7, #12]
 801ef76:	681b      	ldr	r3, [r3, #0]
 801ef78:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801ef7a:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801ef7e:	2b00      	cmp	r3, #0
 801ef80:	d033      	beq.n	801efea <HAL_SD_ReadBlocks+0x196>
 801ef82:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ef84:	2b1f      	cmp	r3, #31
 801ef86:	d930      	bls.n	801efea <HAL_SD_ReadBlocks+0x196>
      {
        /* Read data from SDMMC Rx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801ef88:	2300      	movs	r3, #0
 801ef8a:	643b      	str	r3, [r7, #64]	@ 0x40
 801ef8c:	e027      	b.n	801efde <HAL_SD_ReadBlocks+0x18a>
        {
          data = SDMMC_ReadFIFO(hsd->Instance);
 801ef8e:	68fb      	ldr	r3, [r7, #12]
 801ef90:	681b      	ldr	r3, [r3, #0]
 801ef92:	4618      	mov	r0, r3
 801ef94:	f002 fcd0 	bl	8021938 <SDMMC_ReadFIFO>
 801ef98:	62f8      	str	r0, [r7, #44]	@ 0x2c
          *tempbuff = (uint8_t)(data & 0xFFU);
 801ef9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801ef9c:	b2da      	uxtb	r2, r3
 801ef9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efa0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801efa2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efa4:	3301      	adds	r3, #1
 801efa6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 8U) & 0xFFU);
 801efa8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efaa:	0a1b      	lsrs	r3, r3, #8
 801efac:	b2da      	uxtb	r2, r3
 801efae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efb0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801efb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efb4:	3301      	adds	r3, #1
 801efb6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 16U) & 0xFFU);
 801efb8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efba:	0c1b      	lsrs	r3, r3, #16
 801efbc:	b2da      	uxtb	r2, r3
 801efbe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efc0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801efc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efc4:	3301      	adds	r3, #1
 801efc6:	637b      	str	r3, [r7, #52]	@ 0x34
          *tempbuff = (uint8_t)((data >> 24U) & 0xFFU);
 801efc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801efca:	0e1b      	lsrs	r3, r3, #24
 801efcc:	b2da      	uxtb	r2, r3
 801efce:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efd0:	701a      	strb	r2, [r3, #0]
          tempbuff++;
 801efd2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801efd4:	3301      	adds	r3, #1
 801efd6:	637b      	str	r3, [r7, #52]	@ 0x34
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801efd8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efda:	3301      	adds	r3, #1
 801efdc:	643b      	str	r3, [r7, #64]	@ 0x40
 801efde:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801efe0:	2b07      	cmp	r3, #7
 801efe2:	d9d4      	bls.n	801ef8e <HAL_SD_ReadBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 801efe4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801efe6:	3b20      	subs	r3, #32
 801efe8:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801efea:	f7f3 f8c7 	bl	801217c <HAL_GetTick>
 801efee:	4602      	mov	r2, r0
 801eff0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801eff2:	1ad3      	subs	r3, r2, r3
 801eff4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801eff6:	429a      	cmp	r2, r3
 801eff8:	d902      	bls.n	801f000 <HAL_SD_ReadBlocks+0x1ac>
 801effa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801effc:	2b00      	cmp	r3, #0
 801effe:	d112      	bne.n	801f026 <HAL_SD_ReadBlocks+0x1d2>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f000:	68fb      	ldr	r3, [r7, #12]
 801f002:	681b      	ldr	r3, [r3, #0]
 801f004:	4a56      	ldr	r2, [pc, #344]	@ (801f160 <HAL_SD_ReadBlocks+0x30c>)
 801f006:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= HAL_SD_ERROR_TIMEOUT;
 801f008:	68fb      	ldr	r3, [r7, #12]
 801f00a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f00c:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 801f010:	68fb      	ldr	r3, [r7, #12]
 801f012:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 801f014:	68fb      	ldr	r3, [r7, #12]
 801f016:	2201      	movs	r2, #1
 801f018:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 801f01c:	68fb      	ldr	r3, [r7, #12]
 801f01e:	2200      	movs	r2, #0
 801f020:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 801f022:	2303      	movs	r3, #3
 801f024:	e097      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 801f026:	68fb      	ldr	r3, [r7, #12]
 801f028:	681b      	ldr	r3, [r3, #0]
 801f02a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f02c:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 801f030:	2b00      	cmp	r3, #0
 801f032:	d09f      	beq.n	801ef74 <HAL_SD_ReadBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801f034:	68fb      	ldr	r3, [r7, #12]
 801f036:	681b      	ldr	r3, [r3, #0]
 801f038:	68da      	ldr	r2, [r3, #12]
 801f03a:	68fb      	ldr	r3, [r7, #12]
 801f03c:	681b      	ldr	r3, [r3, #0]
 801f03e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801f042:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock read */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 801f044:	68fb      	ldr	r3, [r7, #12]
 801f046:	681b      	ldr	r3, [r3, #0]
 801f048:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f04a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f04e:	2b00      	cmp	r3, #0
 801f050:	d022      	beq.n	801f098 <HAL_SD_ReadBlocks+0x244>
 801f052:	683b      	ldr	r3, [r7, #0]
 801f054:	2b01      	cmp	r3, #1
 801f056:	d91f      	bls.n	801f098 <HAL_SD_ReadBlocks+0x244>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 801f058:	68fb      	ldr	r3, [r7, #12]
 801f05a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f05c:	2b03      	cmp	r3, #3
 801f05e:	d01b      	beq.n	801f098 <HAL_SD_ReadBlocks+0x244>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801f060:	68fb      	ldr	r3, [r7, #12]
 801f062:	681b      	ldr	r3, [r3, #0]
 801f064:	4618      	mov	r0, r3
 801f066:	f002 fe43 	bl	8021cf0 <SDMMC_CmdStopTransfer>
 801f06a:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 801f06c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f06e:	2b00      	cmp	r3, #0
 801f070:	d012      	beq.n	801f098 <HAL_SD_ReadBlocks+0x244>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f072:	68fb      	ldr	r3, [r7, #12]
 801f074:	681b      	ldr	r3, [r3, #0]
 801f076:	4a3a      	ldr	r2, [pc, #232]	@ (801f160 <HAL_SD_ReadBlocks+0x30c>)
 801f078:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 801f07a:	68fb      	ldr	r3, [r7, #12]
 801f07c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f07e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f080:	431a      	orrs	r2, r3
 801f082:	68fb      	ldr	r3, [r7, #12]
 801f084:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 801f086:	68fb      	ldr	r3, [r7, #12]
 801f088:	2201      	movs	r2, #1
 801f08a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 801f08e:	68fb      	ldr	r3, [r7, #12]
 801f090:	2200      	movs	r2, #0
 801f092:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 801f094:	2301      	movs	r3, #1
 801f096:	e05e      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801f098:	68fb      	ldr	r3, [r7, #12]
 801f09a:	681b      	ldr	r3, [r3, #0]
 801f09c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f09e:	f003 0308 	and.w	r3, r3, #8
 801f0a2:	2b00      	cmp	r3, #0
 801f0a4:	d012      	beq.n	801f0cc <HAL_SD_ReadBlocks+0x278>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f0a6:	68fb      	ldr	r3, [r7, #12]
 801f0a8:	681b      	ldr	r3, [r3, #0]
 801f0aa:	4a2d      	ldr	r2, [pc, #180]	@ (801f160 <HAL_SD_ReadBlocks+0x30c>)
 801f0ac:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801f0ae:	68fb      	ldr	r3, [r7, #12]
 801f0b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f0b2:	f043 0208 	orr.w	r2, r3, #8
 801f0b6:	68fb      	ldr	r3, [r7, #12]
 801f0b8:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f0ba:	68fb      	ldr	r3, [r7, #12]
 801f0bc:	2201      	movs	r2, #1
 801f0be:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f0c2:	68fb      	ldr	r3, [r7, #12]
 801f0c4:	2200      	movs	r2, #0
 801f0c6:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f0c8:	2301      	movs	r3, #1
 801f0ca:	e044      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f0cc:	68fb      	ldr	r3, [r7, #12]
 801f0ce:	681b      	ldr	r3, [r3, #0]
 801f0d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f0d2:	f003 0302 	and.w	r3, r3, #2
 801f0d6:	2b00      	cmp	r3, #0
 801f0d8:	d012      	beq.n	801f100 <HAL_SD_ReadBlocks+0x2ac>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f0da:	68fb      	ldr	r3, [r7, #12]
 801f0dc:	681b      	ldr	r3, [r3, #0]
 801f0de:	4a20      	ldr	r2, [pc, #128]	@ (801f160 <HAL_SD_ReadBlocks+0x30c>)
 801f0e0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801f0e2:	68fb      	ldr	r3, [r7, #12]
 801f0e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f0e6:	f043 0202 	orr.w	r2, r3, #2
 801f0ea:	68fb      	ldr	r3, [r7, #12]
 801f0ec:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f0ee:	68fb      	ldr	r3, [r7, #12]
 801f0f0:	2201      	movs	r2, #1
 801f0f2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f0f6:	68fb      	ldr	r3, [r7, #12]
 801f0f8:	2200      	movs	r2, #0
 801f0fa:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f0fc:	2301      	movs	r3, #1
 801f0fe:	e02a      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 801f100:	68fb      	ldr	r3, [r7, #12]
 801f102:	681b      	ldr	r3, [r3, #0]
 801f104:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f106:	f003 0320 	and.w	r3, r3, #32
 801f10a:	2b00      	cmp	r3, #0
 801f10c:	d012      	beq.n	801f134 <HAL_SD_ReadBlocks+0x2e0>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f10e:	68fb      	ldr	r3, [r7, #12]
 801f110:	681b      	ldr	r3, [r3, #0]
 801f112:	4a13      	ldr	r2, [pc, #76]	@ (801f160 <HAL_SD_ReadBlocks+0x30c>)
 801f114:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801f116:	68fb      	ldr	r3, [r7, #12]
 801f118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f11a:	f043 0220 	orr.w	r2, r3, #32
 801f11e:	68fb      	ldr	r3, [r7, #12]
 801f120:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f122:	68fb      	ldr	r3, [r7, #12]
 801f124:	2201      	movs	r2, #1
 801f126:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f12a:	68fb      	ldr	r3, [r7, #12]
 801f12c:	2200      	movs	r2, #0
 801f12e:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f130:	2301      	movs	r3, #1
 801f132:	e010      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f134:	68fb      	ldr	r3, [r7, #12]
 801f136:	681b      	ldr	r3, [r3, #0]
 801f138:	4a0a      	ldr	r2, [pc, #40]	@ (801f164 <HAL_SD_ReadBlocks+0x310>)
 801f13a:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 801f13c:	68fb      	ldr	r3, [r7, #12]
 801f13e:	2201      	movs	r2, #1
 801f140:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 801f144:	2300      	movs	r3, #0
 801f146:	e006      	b.n	801f156 <HAL_SD_ReadBlocks+0x302>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801f148:	68fb      	ldr	r3, [r7, #12]
 801f14a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f14c:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801f150:	68fb      	ldr	r3, [r7, #12]
 801f152:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f154:	2301      	movs	r3, #1
  }
}
 801f156:	4618      	mov	r0, r3
 801f158:	3748      	adds	r7, #72	@ 0x48
 801f15a:	46bd      	mov	sp, r7
 801f15c:	bd80      	pop	{r7, pc}
 801f15e:	bf00      	nop
 801f160:	1fe00fff 	.word	0x1fe00fff
 801f164:	18000f3a 	.word	0x18000f3a

0801f168 <HAL_SD_WriteBlocks>:
  * @param  Timeout: Specify timeout value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                     uint32_t NumberOfBlocks, uint32_t Timeout)
{
 801f168:	b580      	push	{r7, lr}
 801f16a:	b092      	sub	sp, #72	@ 0x48
 801f16c:	af00      	add	r7, sp, #0
 801f16e:	60f8      	str	r0, [r7, #12]
 801f170:	60b9      	str	r1, [r7, #8]
 801f172:	607a      	str	r2, [r7, #4]
 801f174:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 801f176:	f7f3 f801 	bl	801217c <HAL_GetTick>
 801f17a:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t count;
  uint32_t data;
  uint32_t dataremaining;
  uint32_t add = BlockAdd;
 801f17c:	687b      	ldr	r3, [r7, #4]
 801f17e:	63bb      	str	r3, [r7, #56]	@ 0x38
  const uint8_t *tempbuff = pData;
 801f180:	68bb      	ldr	r3, [r7, #8]
 801f182:	637b      	str	r3, [r7, #52]	@ 0x34

  if (NULL == pData)
 801f184:	68bb      	ldr	r3, [r7, #8]
 801f186:	2b00      	cmp	r3, #0
 801f188:	d107      	bne.n	801f19a <HAL_SD_WriteBlocks+0x32>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801f18a:	68fb      	ldr	r3, [r7, #12]
 801f18c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f18e:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801f192:	68fb      	ldr	r3, [r7, #12]
 801f194:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f196:	2301      	movs	r3, #1
 801f198:	e16b      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801f19a:	68fb      	ldr	r3, [r7, #12]
 801f19c:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f1a0:	b2db      	uxtb	r3, r3
 801f1a2:	2b01      	cmp	r3, #1
 801f1a4:	f040 815e 	bne.w	801f464 <HAL_SD_WriteBlocks+0x2fc>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801f1a8:	68fb      	ldr	r3, [r7, #12]
 801f1aa:	2200      	movs	r2, #0
 801f1ac:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801f1ae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 801f1b0:	683b      	ldr	r3, [r7, #0]
 801f1b2:	441a      	add	r2, r3
 801f1b4:	68fb      	ldr	r3, [r7, #12]
 801f1b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f1b8:	429a      	cmp	r2, r3
 801f1ba:	d907      	bls.n	801f1cc <HAL_SD_WriteBlocks+0x64>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801f1bc:	68fb      	ldr	r3, [r7, #12]
 801f1be:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f1c0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f1c4:	68fb      	ldr	r3, [r7, #12]
 801f1c6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f1c8:	2301      	movs	r3, #1
 801f1ca:	e152      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801f1cc:	68fb      	ldr	r3, [r7, #12]
 801f1ce:	2203      	movs	r2, #3
 801f1d0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801f1d4:	68fb      	ldr	r3, [r7, #12]
 801f1d6:	681b      	ldr	r3, [r3, #0]
 801f1d8:	2200      	movs	r2, #0
 801f1da:	62da      	str	r2, [r3, #44]	@ 0x2c

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801f1dc:	68fb      	ldr	r3, [r7, #12]
 801f1de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f1e0:	2b01      	cmp	r3, #1
 801f1e2:	d002      	beq.n	801f1ea <HAL_SD_WriteBlocks+0x82>
    {
      add *= BLOCKSIZE;
 801f1e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801f1e6:	025b      	lsls	r3, r3, #9
 801f1e8:	63bb      	str	r3, [r7, #56]	@ 0x38
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f1ea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f1ee:	61bb      	str	r3, [r7, #24]
    config.DataLength    = NumberOfBlocks * BLOCKSIZE;
 801f1f0:	683b      	ldr	r3, [r7, #0]
 801f1f2:	025b      	lsls	r3, r3, #9
 801f1f4:	61fb      	str	r3, [r7, #28]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801f1f6:	2390      	movs	r3, #144	@ 0x90
 801f1f8:	623b      	str	r3, [r7, #32]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801f1fa:	2300      	movs	r3, #0
 801f1fc:	627b      	str	r3, [r7, #36]	@ 0x24
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f1fe:	2300      	movs	r3, #0
 801f200:	62bb      	str	r3, [r7, #40]	@ 0x28
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801f202:	2300      	movs	r3, #0
 801f204:	62fb      	str	r3, [r7, #44]	@ 0x2c
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f206:	68fb      	ldr	r3, [r7, #12]
 801f208:	681b      	ldr	r3, [r3, #0]
 801f20a:	f107 0218 	add.w	r2, r7, #24
 801f20e:	4611      	mov	r1, r2
 801f210:	4618      	mov	r0, r3
 801f212:	f002 fc29 	bl	8021a68 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801f216:	68fb      	ldr	r3, [r7, #12]
 801f218:	681b      	ldr	r3, [r3, #0]
 801f21a:	68da      	ldr	r2, [r3, #12]
 801f21c:	68fb      	ldr	r3, [r7, #12]
 801f21e:	681b      	ldr	r3, [r3, #0]
 801f220:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f224:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801f226:	683b      	ldr	r3, [r7, #0]
 801f228:	2b01      	cmp	r3, #1
 801f22a:	d90a      	bls.n	801f242 <HAL_SD_WriteBlocks+0xda>
    {
      hsd->Context = SD_CONTEXT_WRITE_MULTIPLE_BLOCK;
 801f22c:	68fb      	ldr	r3, [r7, #12]
 801f22e:	2220      	movs	r2, #32
 801f230:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801f232:	68fb      	ldr	r3, [r7, #12]
 801f234:	681b      	ldr	r3, [r3, #0]
 801f236:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f238:	4618      	mov	r0, r3
 801f23a:	f002 fccd 	bl	8021bd8 <SDMMC_CmdWriteMultiBlock>
 801f23e:	6478      	str	r0, [r7, #68]	@ 0x44
 801f240:	e009      	b.n	801f256 <HAL_SD_WriteBlocks+0xee>
    }
    else
    {
      hsd->Context = SD_CONTEXT_WRITE_SINGLE_BLOCK;
 801f242:	68fb      	ldr	r3, [r7, #12]
 801f244:	2210      	movs	r2, #16
 801f246:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801f248:	68fb      	ldr	r3, [r7, #12]
 801f24a:	681b      	ldr	r3, [r3, #0]
 801f24c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 801f24e:	4618      	mov	r0, r3
 801f250:	f002 fc9f 	bl	8021b92 <SDMMC_CmdWriteSingleBlock>
 801f254:	6478      	str	r0, [r7, #68]	@ 0x44
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801f256:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f258:	2b00      	cmp	r3, #0
 801f25a:	d012      	beq.n	801f282 <HAL_SD_WriteBlocks+0x11a>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f25c:	68fb      	ldr	r3, [r7, #12]
 801f25e:	681b      	ldr	r3, [r3, #0]
 801f260:	4a86      	ldr	r2, [pc, #536]	@ (801f47c <HAL_SD_WriteBlocks+0x314>)
 801f262:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801f264:	68fb      	ldr	r3, [r7, #12]
 801f266:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f268:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f26a:	431a      	orrs	r2, r3
 801f26c:	68fb      	ldr	r3, [r7, #12]
 801f26e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f270:	68fb      	ldr	r3, [r7, #12]
 801f272:	2201      	movs	r2, #1
 801f274:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f278:	68fb      	ldr	r3, [r7, #12]
 801f27a:	2200      	movs	r2, #0
 801f27c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f27e:	2301      	movs	r3, #1
 801f280:	e0f7      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
    }

    /* Write block(s) in polling mode */
    dataremaining = config.DataLength;
 801f282:	69fb      	ldr	r3, [r7, #28]
 801f284:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801f286:	e05c      	b.n	801f342 <HAL_SD_WriteBlocks+0x1da>
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) && (dataremaining >= SDMMC_FIFO_SIZE))
 801f288:	68fb      	ldr	r3, [r7, #12]
 801f28a:	681b      	ldr	r3, [r3, #0]
 801f28c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f28e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801f292:	2b00      	cmp	r3, #0
 801f294:	d037      	beq.n	801f306 <HAL_SD_WriteBlocks+0x19e>
 801f296:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f298:	2b1f      	cmp	r3, #31
 801f29a:	d934      	bls.n	801f306 <HAL_SD_WriteBlocks+0x19e>
      {
        /* Write data to SDMMC Tx FIFO */
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801f29c:	2300      	movs	r3, #0
 801f29e:	643b      	str	r3, [r7, #64]	@ 0x40
 801f2a0:	e02b      	b.n	801f2fa <HAL_SD_WriteBlocks+0x192>
        {
          data = (uint32_t)(*tempbuff);
 801f2a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2a4:	781b      	ldrb	r3, [r3, #0]
 801f2a6:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801f2a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2aa:	3301      	adds	r3, #1
 801f2ac:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 8U);
 801f2ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2b0:	781b      	ldrb	r3, [r3, #0]
 801f2b2:	021a      	lsls	r2, r3, #8
 801f2b4:	697b      	ldr	r3, [r7, #20]
 801f2b6:	4313      	orrs	r3, r2
 801f2b8:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801f2ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2bc:	3301      	adds	r3, #1
 801f2be:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 16U);
 801f2c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2c2:	781b      	ldrb	r3, [r3, #0]
 801f2c4:	041a      	lsls	r2, r3, #16
 801f2c6:	697b      	ldr	r3, [r7, #20]
 801f2c8:	4313      	orrs	r3, r2
 801f2ca:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801f2cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2ce:	3301      	adds	r3, #1
 801f2d0:	637b      	str	r3, [r7, #52]	@ 0x34
          data |= ((uint32_t)(*tempbuff) << 24U);
 801f2d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2d4:	781b      	ldrb	r3, [r3, #0]
 801f2d6:	061a      	lsls	r2, r3, #24
 801f2d8:	697b      	ldr	r3, [r7, #20]
 801f2da:	4313      	orrs	r3, r2
 801f2dc:	617b      	str	r3, [r7, #20]
          tempbuff++;
 801f2de:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801f2e0:	3301      	adds	r3, #1
 801f2e2:	637b      	str	r3, [r7, #52]	@ 0x34
          (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 801f2e4:	68fb      	ldr	r3, [r7, #12]
 801f2e6:	681b      	ldr	r3, [r3, #0]
 801f2e8:	f107 0214 	add.w	r2, r7, #20
 801f2ec:	4611      	mov	r1, r2
 801f2ee:	4618      	mov	r0, r3
 801f2f0:	f002 fb2f 	bl	8021952 <SDMMC_WriteFIFO>
        for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 801f2f4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f2f6:	3301      	adds	r3, #1
 801f2f8:	643b      	str	r3, [r7, #64]	@ 0x40
 801f2fa:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801f2fc:	2b07      	cmp	r3, #7
 801f2fe:	d9d0      	bls.n	801f2a2 <HAL_SD_WriteBlocks+0x13a>
        }
        dataremaining -= SDMMC_FIFO_SIZE;
 801f300:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801f302:	3b20      	subs	r3, #32
 801f304:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }

      if (((HAL_GetTick() - tickstart) >=  Timeout) || (Timeout == 0U))
 801f306:	f7f2 ff39 	bl	801217c <HAL_GetTick>
 801f30a:	4602      	mov	r2, r0
 801f30c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801f30e:	1ad3      	subs	r3, r2, r3
 801f310:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 801f312:	429a      	cmp	r2, r3
 801f314:	d902      	bls.n	801f31c <HAL_SD_WriteBlocks+0x1b4>
 801f316:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801f318:	2b00      	cmp	r3, #0
 801f31a:	d112      	bne.n	801f342 <HAL_SD_WriteBlocks+0x1da>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f31c:	68fb      	ldr	r3, [r7, #12]
 801f31e:	681b      	ldr	r3, [r3, #0]
 801f320:	4a56      	ldr	r2, [pc, #344]	@ (801f47c <HAL_SD_WriteBlocks+0x314>)
 801f322:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 801f324:	68fb      	ldr	r3, [r7, #12]
 801f326:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f328:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f32a:	431a      	orrs	r2, r3
 801f32c:	68fb      	ldr	r3, [r7, #12]
 801f32e:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 801f330:	68fb      	ldr	r3, [r7, #12]
 801f332:	2201      	movs	r2, #1
 801f334:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        hsd->Context = SD_CONTEXT_NONE;
 801f338:	68fb      	ldr	r3, [r7, #12]
 801f33a:	2200      	movs	r2, #0
 801f33c:	62da      	str	r2, [r3, #44]	@ 0x2c
        return HAL_TIMEOUT;
 801f33e:	2303      	movs	r3, #3
 801f340:	e097      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT |
 801f342:	68fb      	ldr	r3, [r7, #12]
 801f344:	681b      	ldr	r3, [r3, #0]
 801f346:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f348:	f403 738d 	and.w	r3, r3, #282	@ 0x11a
 801f34c:	2b00      	cmp	r3, #0
 801f34e:	d09b      	beq.n	801f288 <HAL_SD_WriteBlocks+0x120>
      }
    }
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801f350:	68fb      	ldr	r3, [r7, #12]
 801f352:	681b      	ldr	r3, [r3, #0]
 801f354:	68da      	ldr	r2, [r3, #12]
 801f356:	68fb      	ldr	r3, [r7, #12]
 801f358:	681b      	ldr	r3, [r3, #0]
 801f35a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801f35e:	60da      	str	r2, [r3, #12]

    /* Send stop transmission command in case of multiblock write */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) && (NumberOfBlocks > 1U))
 801f360:	68fb      	ldr	r3, [r7, #12]
 801f362:	681b      	ldr	r3, [r3, #0]
 801f364:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f366:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801f36a:	2b00      	cmp	r3, #0
 801f36c:	d022      	beq.n	801f3b4 <HAL_SD_WriteBlocks+0x24c>
 801f36e:	683b      	ldr	r3, [r7, #0]
 801f370:	2b01      	cmp	r3, #1
 801f372:	d91f      	bls.n	801f3b4 <HAL_SD_WriteBlocks+0x24c>
    {
      if (hsd->SdCard.CardType != CARD_SECURED)
 801f374:	68fb      	ldr	r3, [r7, #12]
 801f376:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f378:	2b03      	cmp	r3, #3
 801f37a:	d01b      	beq.n	801f3b4 <HAL_SD_WriteBlocks+0x24c>
      {
        /* Send stop transmission command */
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801f37c:	68fb      	ldr	r3, [r7, #12]
 801f37e:	681b      	ldr	r3, [r3, #0]
 801f380:	4618      	mov	r0, r3
 801f382:	f002 fcb5 	bl	8021cf0 <SDMMC_CmdStopTransfer>
 801f386:	6478      	str	r0, [r7, #68]	@ 0x44
        if (errorstate != HAL_SD_ERROR_NONE)
 801f388:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f38a:	2b00      	cmp	r3, #0
 801f38c:	d012      	beq.n	801f3b4 <HAL_SD_WriteBlocks+0x24c>
        {
          /* Clear all the static flags */
          __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f38e:	68fb      	ldr	r3, [r7, #12]
 801f390:	681b      	ldr	r3, [r3, #0]
 801f392:	4a3a      	ldr	r2, [pc, #232]	@ (801f47c <HAL_SD_WriteBlocks+0x314>)
 801f394:	639a      	str	r2, [r3, #56]	@ 0x38
          hsd->ErrorCode |= errorstate;
 801f396:	68fb      	ldr	r3, [r7, #12]
 801f398:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f39a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801f39c:	431a      	orrs	r2, r3
 801f39e:	68fb      	ldr	r3, [r7, #12]
 801f3a0:	635a      	str	r2, [r3, #52]	@ 0x34
          hsd->State = HAL_SD_STATE_READY;
 801f3a2:	68fb      	ldr	r3, [r7, #12]
 801f3a4:	2201      	movs	r2, #1
 801f3a6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
          hsd->Context = SD_CONTEXT_NONE;
 801f3aa:	68fb      	ldr	r3, [r7, #12]
 801f3ac:	2200      	movs	r2, #0
 801f3ae:	62da      	str	r2, [r3, #44]	@ 0x2c
          return HAL_ERROR;
 801f3b0:	2301      	movs	r3, #1
 801f3b2:	e05e      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
        }
      }
    }

    /* Get error state */
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 801f3b4:	68fb      	ldr	r3, [r7, #12]
 801f3b6:	681b      	ldr	r3, [r3, #0]
 801f3b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f3ba:	f003 0308 	and.w	r3, r3, #8
 801f3be:	2b00      	cmp	r3, #0
 801f3c0:	d012      	beq.n	801f3e8 <HAL_SD_WriteBlocks+0x280>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f3c2:	68fb      	ldr	r3, [r7, #12]
 801f3c4:	681b      	ldr	r3, [r3, #0]
 801f3c6:	4a2d      	ldr	r2, [pc, #180]	@ (801f47c <HAL_SD_WriteBlocks+0x314>)
 801f3c8:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801f3ca:	68fb      	ldr	r3, [r7, #12]
 801f3cc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f3ce:	f043 0208 	orr.w	r2, r3, #8
 801f3d2:	68fb      	ldr	r3, [r7, #12]
 801f3d4:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f3d6:	68fb      	ldr	r3, [r7, #12]
 801f3d8:	2201      	movs	r2, #1
 801f3da:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f3de:	68fb      	ldr	r3, [r7, #12]
 801f3e0:	2200      	movs	r2, #0
 801f3e2:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f3e4:	2301      	movs	r3, #1
 801f3e6:	e044      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 801f3e8:	68fb      	ldr	r3, [r7, #12]
 801f3ea:	681b      	ldr	r3, [r3, #0]
 801f3ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f3ee:	f003 0302 	and.w	r3, r3, #2
 801f3f2:	2b00      	cmp	r3, #0
 801f3f4:	d012      	beq.n	801f41c <HAL_SD_WriteBlocks+0x2b4>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f3f6:	68fb      	ldr	r3, [r7, #12]
 801f3f8:	681b      	ldr	r3, [r3, #0]
 801f3fa:	4a20      	ldr	r2, [pc, #128]	@ (801f47c <HAL_SD_WriteBlocks+0x314>)
 801f3fc:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801f3fe:	68fb      	ldr	r3, [r7, #12]
 801f400:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f402:	f043 0202 	orr.w	r2, r3, #2
 801f406:	68fb      	ldr	r3, [r7, #12]
 801f408:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f40a:	68fb      	ldr	r3, [r7, #12]
 801f40c:	2201      	movs	r2, #1
 801f40e:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f412:	68fb      	ldr	r3, [r7, #12]
 801f414:	2200      	movs	r2, #0
 801f416:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f418:	2301      	movs	r3, #1
 801f41a:	e02a      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXUNDERR))
 801f41c:	68fb      	ldr	r3, [r7, #12]
 801f41e:	681b      	ldr	r3, [r3, #0]
 801f420:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f422:	f003 0310 	and.w	r3, r3, #16
 801f426:	2b00      	cmp	r3, #0
 801f428:	d012      	beq.n	801f450 <HAL_SD_WriteBlocks+0x2e8>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f42a:	68fb      	ldr	r3, [r7, #12]
 801f42c:	681b      	ldr	r3, [r3, #0]
 801f42e:	4a13      	ldr	r2, [pc, #76]	@ (801f47c <HAL_SD_WriteBlocks+0x314>)
 801f430:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801f432:	68fb      	ldr	r3, [r7, #12]
 801f434:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f436:	f043 0210 	orr.w	r2, r3, #16
 801f43a:	68fb      	ldr	r3, [r7, #12]
 801f43c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f43e:	68fb      	ldr	r3, [r7, #12]
 801f440:	2201      	movs	r2, #1
 801f442:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f446:	68fb      	ldr	r3, [r7, #12]
 801f448:	2200      	movs	r2, #0
 801f44a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f44c:	2301      	movs	r3, #1
 801f44e:	e010      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
    {
      /* Nothing to do */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801f450:	68fb      	ldr	r3, [r7, #12]
 801f452:	681b      	ldr	r3, [r3, #0]
 801f454:	4a0a      	ldr	r2, [pc, #40]	@ (801f480 <HAL_SD_WriteBlocks+0x318>)
 801f456:	639a      	str	r2, [r3, #56]	@ 0x38

    hsd->State = HAL_SD_STATE_READY;
 801f458:	68fb      	ldr	r3, [r7, #12]
 801f45a:	2201      	movs	r2, #1
 801f45c:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 801f460:	2300      	movs	r3, #0
 801f462:	e006      	b.n	801f472 <HAL_SD_WriteBlocks+0x30a>
  }
  else
  {
    hsd->ErrorCode |= HAL_SD_ERROR_BUSY;
 801f464:	68fb      	ldr	r3, [r7, #12]
 801f466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f468:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 801f46c:	68fb      	ldr	r3, [r7, #12]
 801f46e:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f470:	2301      	movs	r3, #1
  }
}
 801f472:	4618      	mov	r0, r3
 801f474:	3748      	adds	r7, #72	@ 0x48
 801f476:	46bd      	mov	sp, r7
 801f478:	bd80      	pop	{r7, pc}
 801f47a:	bf00      	nop
 801f47c:	1fe00fff 	.word	0x1fe00fff
 801f480:	18000f3a 	.word	0x18000f3a

0801f484 <HAL_SD_ReadBlocks_IT>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_IT(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                       uint32_t NumberOfBlocks)
{
 801f484:	b580      	push	{r7, lr}
 801f486:	b08c      	sub	sp, #48	@ 0x30
 801f488:	af00      	add	r7, sp, #0
 801f48a:	60f8      	str	r0, [r7, #12]
 801f48c:	60b9      	str	r1, [r7, #8]
 801f48e:	607a      	str	r2, [r7, #4]
 801f490:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801f492:	687b      	ldr	r3, [r7, #4]
 801f494:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801f496:	68bb      	ldr	r3, [r7, #8]
 801f498:	2b00      	cmp	r3, #0
 801f49a:	d107      	bne.n	801f4ac <HAL_SD_ReadBlocks_IT+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801f49c:	68fb      	ldr	r3, [r7, #12]
 801f49e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f4a0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801f4a4:	68fb      	ldr	r3, [r7, #12]
 801f4a6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f4a8:	2301      	movs	r3, #1
 801f4aa:	e085      	b.n	801f5b8 <HAL_SD_ReadBlocks_IT+0x134>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801f4ac:	68fb      	ldr	r3, [r7, #12]
 801f4ae:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f4b2:	b2db      	uxtb	r3, r3
 801f4b4:	2b01      	cmp	r3, #1
 801f4b6:	d17e      	bne.n	801f5b6 <HAL_SD_ReadBlocks_IT+0x132>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801f4b8:	68fb      	ldr	r3, [r7, #12]
 801f4ba:	2200      	movs	r2, #0
 801f4bc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801f4be:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f4c0:	683b      	ldr	r3, [r7, #0]
 801f4c2:	441a      	add	r2, r3
 801f4c4:	68fb      	ldr	r3, [r7, #12]
 801f4c6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f4c8:	429a      	cmp	r2, r3
 801f4ca:	d907      	bls.n	801f4dc <HAL_SD_ReadBlocks_IT+0x58>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801f4cc:	68fb      	ldr	r3, [r7, #12]
 801f4ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f4d0:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f4d4:	68fb      	ldr	r3, [r7, #12]
 801f4d6:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f4d8:	2301      	movs	r3, #1
 801f4da:	e06d      	b.n	801f5b8 <HAL_SD_ReadBlocks_IT+0x134>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801f4dc:	68fb      	ldr	r3, [r7, #12]
 801f4de:	2203      	movs	r2, #3
 801f4e0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801f4e4:	68fb      	ldr	r3, [r7, #12]
 801f4e6:	681b      	ldr	r3, [r3, #0]
 801f4e8:	2200      	movs	r2, #0
 801f4ea:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 801f4ec:	68fb      	ldr	r3, [r7, #12]
 801f4ee:	68ba      	ldr	r2, [r7, #8]
 801f4f0:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801f4f2:	683b      	ldr	r3, [r7, #0]
 801f4f4:	025a      	lsls	r2, r3, #9
 801f4f6:	68fb      	ldr	r3, [r7, #12]
 801f4f8:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801f4fa:	68fb      	ldr	r3, [r7, #12]
 801f4fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f4fe:	2b01      	cmp	r3, #1
 801f500:	d002      	beq.n	801f508 <HAL_SD_ReadBlocks_IT+0x84>
    {
      add *= BLOCKSIZE;
 801f502:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f504:	025b      	lsls	r3, r3, #9
 801f506:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f508:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f50c:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801f50e:	683b      	ldr	r3, [r7, #0]
 801f510:	025b      	lsls	r3, r3, #9
 801f512:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801f514:	2390      	movs	r3, #144	@ 0x90
 801f516:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801f518:	2302      	movs	r3, #2
 801f51a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f51c:	2300      	movs	r3, #0
 801f51e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801f520:	2300      	movs	r3, #0
 801f522:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f524:	68fb      	ldr	r3, [r7, #12]
 801f526:	681b      	ldr	r3, [r3, #0]
 801f528:	f107 0210 	add.w	r2, r7, #16
 801f52c:	4611      	mov	r1, r2
 801f52e:	4618      	mov	r0, r3
 801f530:	f002 fa9a 	bl	8021a68 <SDMMC_ConfigData>
    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801f534:	68fb      	ldr	r3, [r7, #12]
 801f536:	681b      	ldr	r3, [r3, #0]
 801f538:	68da      	ldr	r2, [r3, #12]
 801f53a:	68fb      	ldr	r3, [r7, #12]
 801f53c:	681b      	ldr	r3, [r3, #0]
 801f53e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f542:	60da      	str	r2, [r3, #12]

    /* Read Blocks in IT mode */
    if (NumberOfBlocks > 1U)
 801f544:	683b      	ldr	r3, [r7, #0]
 801f546:	2b01      	cmp	r3, #1
 801f548:	d90a      	bls.n	801f560 <HAL_SD_ReadBlocks_IT+0xdc>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_IT);
 801f54a:	68fb      	ldr	r3, [r7, #12]
 801f54c:	220a      	movs	r2, #10
 801f54e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801f550:	68fb      	ldr	r3, [r7, #12]
 801f552:	681b      	ldr	r3, [r3, #0]
 801f554:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f556:	4618      	mov	r0, r3
 801f558:	f002 faf8 	bl	8021b4c <SDMMC_CmdReadMultiBlock>
 801f55c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801f55e:	e009      	b.n	801f574 <HAL_SD_ReadBlocks_IT+0xf0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_IT);
 801f560:	68fb      	ldr	r3, [r7, #12]
 801f562:	2209      	movs	r2, #9
 801f564:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801f566:	68fb      	ldr	r3, [r7, #12]
 801f568:	681b      	ldr	r3, [r3, #0]
 801f56a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f56c:	4618      	mov	r0, r3
 801f56e:	f002 faca 	bl	8021b06 <SDMMC_CmdReadSingleBlock>
 801f572:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801f574:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f576:	2b00      	cmp	r3, #0
 801f578:	d012      	beq.n	801f5a0 <HAL_SD_ReadBlocks_IT+0x11c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f57a:	68fb      	ldr	r3, [r7, #12]
 801f57c:	681b      	ldr	r3, [r3, #0]
 801f57e:	4a10      	ldr	r2, [pc, #64]	@ (801f5c0 <HAL_SD_ReadBlocks_IT+0x13c>)
 801f580:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801f582:	68fb      	ldr	r3, [r7, #12]
 801f584:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f586:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f588:	431a      	orrs	r2, r3
 801f58a:	68fb      	ldr	r3, [r7, #12]
 801f58c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f58e:	68fb      	ldr	r3, [r7, #12]
 801f590:	2201      	movs	r2, #1
 801f592:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f596:	68fb      	ldr	r3, [r7, #12]
 801f598:	2200      	movs	r2, #0
 801f59a:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f59c:	2301      	movs	r3, #1
 801f59e:	e00b      	b.n	801f5b8 <HAL_SD_ReadBlocks_IT+0x134>
    }

    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND |
 801f5a0:	68fb      	ldr	r3, [r7, #12]
 801f5a2:	681b      	ldr	r3, [r3, #0]
 801f5a4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801f5a6:	68fb      	ldr	r3, [r7, #12]
 801f5a8:	681a      	ldr	r2, [r3, #0]
 801f5aa:	f248 132a 	movw	r3, #33066	@ 0x812a
 801f5ae:	430b      	orrs	r3, r1
 801f5b0:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_FLAG_RXFIFOHF));

    return HAL_OK;
 801f5b2:	2300      	movs	r3, #0
 801f5b4:	e000      	b.n	801f5b8 <HAL_SD_ReadBlocks_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801f5b6:	2302      	movs	r3, #2
  }
}
 801f5b8:	4618      	mov	r0, r3
 801f5ba:	3730      	adds	r7, #48	@ 0x30
 801f5bc:	46bd      	mov	sp, r7
 801f5be:	bd80      	pop	{r7, pc}
 801f5c0:	1fe00fff 	.word	0x1fe00fff

0801f5c4 <HAL_SD_WriteBlocks_IT>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_IT(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 801f5c4:	b580      	push	{r7, lr}
 801f5c6:	b08c      	sub	sp, #48	@ 0x30
 801f5c8:	af00      	add	r7, sp, #0
 801f5ca:	60f8      	str	r0, [r7, #12]
 801f5cc:	60b9      	str	r1, [r7, #8]
 801f5ce:	607a      	str	r2, [r7, #4]
 801f5d0:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801f5d2:	687b      	ldr	r3, [r7, #4]
 801f5d4:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801f5d6:	68bb      	ldr	r3, [r7, #8]
 801f5d8:	2b00      	cmp	r3, #0
 801f5da:	d107      	bne.n	801f5ec <HAL_SD_WriteBlocks_IT+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801f5dc:	68fb      	ldr	r3, [r7, #12]
 801f5de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f5e0:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801f5e4:	68fb      	ldr	r3, [r7, #12]
 801f5e6:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f5e8:	2301      	movs	r3, #1
 801f5ea:	e085      	b.n	801f6f8 <HAL_SD_WriteBlocks_IT+0x134>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801f5ec:	68fb      	ldr	r3, [r7, #12]
 801f5ee:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f5f2:	b2db      	uxtb	r3, r3
 801f5f4:	2b01      	cmp	r3, #1
 801f5f6:	d17e      	bne.n	801f6f6 <HAL_SD_WriteBlocks_IT+0x132>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801f5f8:	68fb      	ldr	r3, [r7, #12]
 801f5fa:	2200      	movs	r2, #0
 801f5fc:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801f5fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f600:	683b      	ldr	r3, [r7, #0]
 801f602:	441a      	add	r2, r3
 801f604:	68fb      	ldr	r3, [r7, #12]
 801f606:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f608:	429a      	cmp	r2, r3
 801f60a:	d907      	bls.n	801f61c <HAL_SD_WriteBlocks_IT+0x58>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801f60c:	68fb      	ldr	r3, [r7, #12]
 801f60e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f610:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f614:	68fb      	ldr	r3, [r7, #12]
 801f616:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f618:	2301      	movs	r3, #1
 801f61a:	e06d      	b.n	801f6f8 <HAL_SD_WriteBlocks_IT+0x134>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801f61c:	68fb      	ldr	r3, [r7, #12]
 801f61e:	2203      	movs	r2, #3
 801f620:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801f624:	68fb      	ldr	r3, [r7, #12]
 801f626:	681b      	ldr	r3, [r3, #0]
 801f628:	2200      	movs	r2, #0
 801f62a:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 801f62c:	68fb      	ldr	r3, [r7, #12]
 801f62e:	68ba      	ldr	r2, [r7, #8]
 801f630:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801f632:	683b      	ldr	r3, [r7, #0]
 801f634:	025a      	lsls	r2, r3, #9
 801f636:	68fb      	ldr	r3, [r7, #12]
 801f638:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801f63a:	68fb      	ldr	r3, [r7, #12]
 801f63c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f63e:	2b01      	cmp	r3, #1
 801f640:	d002      	beq.n	801f648 <HAL_SD_WriteBlocks_IT+0x84>
    {
      add *= BLOCKSIZE;
 801f642:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f644:	025b      	lsls	r3, r3, #9
 801f646:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f648:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f64c:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801f64e:	683b      	ldr	r3, [r7, #0]
 801f650:	025b      	lsls	r3, r3, #9
 801f652:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801f654:	2390      	movs	r3, #144	@ 0x90
 801f656:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801f658:	2300      	movs	r3, #0
 801f65a:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f65c:	2300      	movs	r3, #0
 801f65e:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801f660:	2300      	movs	r3, #0
 801f662:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f664:	68fb      	ldr	r3, [r7, #12]
 801f666:	681b      	ldr	r3, [r3, #0]
 801f668:	f107 0210 	add.w	r2, r7, #16
 801f66c:	4611      	mov	r1, r2
 801f66e:	4618      	mov	r0, r3
 801f670:	f002 f9fa 	bl	8021a68 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801f674:	68fb      	ldr	r3, [r7, #12]
 801f676:	681b      	ldr	r3, [r3, #0]
 801f678:	68da      	ldr	r2, [r3, #12]
 801f67a:	68fb      	ldr	r3, [r7, #12]
 801f67c:	681b      	ldr	r3, [r3, #0]
 801f67e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f682:	60da      	str	r2, [r3, #12]

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801f684:	683b      	ldr	r3, [r7, #0]
 801f686:	2b01      	cmp	r3, #1
 801f688:	d90a      	bls.n	801f6a0 <HAL_SD_WriteBlocks_IT+0xdc>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_IT);
 801f68a:	68fb      	ldr	r3, [r7, #12]
 801f68c:	2228      	movs	r2, #40	@ 0x28
 801f68e:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801f690:	68fb      	ldr	r3, [r7, #12]
 801f692:	681b      	ldr	r3, [r3, #0]
 801f694:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f696:	4618      	mov	r0, r3
 801f698:	f002 fa9e 	bl	8021bd8 <SDMMC_CmdWriteMultiBlock>
 801f69c:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801f69e:	e009      	b.n	801f6b4 <HAL_SD_WriteBlocks_IT+0xf0>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_IT);
 801f6a0:	68fb      	ldr	r3, [r7, #12]
 801f6a2:	2218      	movs	r2, #24
 801f6a4:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801f6a6:	68fb      	ldr	r3, [r7, #12]
 801f6a8:	681b      	ldr	r3, [r3, #0]
 801f6aa:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f6ac:	4618      	mov	r0, r3
 801f6ae:	f002 fa70 	bl	8021b92 <SDMMC_CmdWriteSingleBlock>
 801f6b2:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801f6b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f6b6:	2b00      	cmp	r3, #0
 801f6b8:	d012      	beq.n	801f6e0 <HAL_SD_WriteBlocks_IT+0x11c>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f6ba:	68fb      	ldr	r3, [r7, #12]
 801f6bc:	681b      	ldr	r3, [r3, #0]
 801f6be:	4a10      	ldr	r2, [pc, #64]	@ (801f700 <HAL_SD_WriteBlocks_IT+0x13c>)
 801f6c0:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801f6c2:	68fb      	ldr	r3, [r7, #12]
 801f6c4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f6c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f6c8:	431a      	orrs	r2, r3
 801f6ca:	68fb      	ldr	r3, [r7, #12]
 801f6cc:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f6ce:	68fb      	ldr	r3, [r7, #12]
 801f6d0:	2201      	movs	r2, #1
 801f6d2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f6d6:	68fb      	ldr	r3, [r7, #12]
 801f6d8:	2200      	movs	r2, #0
 801f6da:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f6dc:	2301      	movs	r3, #1
 801f6de:	e00b      	b.n	801f6f8 <HAL_SD_WriteBlocks_IT+0x134>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND |
 801f6e0:	68fb      	ldr	r3, [r7, #12]
 801f6e2:	681b      	ldr	r3, [r3, #0]
 801f6e4:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801f6e6:	68fb      	ldr	r3, [r7, #12]
 801f6e8:	681a      	ldr	r2, [r3, #0]
 801f6ea:	f244 131a 	movw	r3, #16666	@ 0x411a
 801f6ee:	430b      	orrs	r3, r1
 801f6f0:	63d3      	str	r3, [r2, #60]	@ 0x3c
                             SDMMC_FLAG_TXFIFOHE));

    return HAL_OK;
 801f6f2:	2300      	movs	r3, #0
 801f6f4:	e000      	b.n	801f6f8 <HAL_SD_WriteBlocks_IT+0x134>
  }
  else
  {
    return HAL_BUSY;
 801f6f6:	2302      	movs	r3, #2
  }
}
 801f6f8:	4618      	mov	r0, r3
 801f6fa:	3730      	adds	r7, #48	@ 0x30
 801f6fc:	46bd      	mov	sp, r7
 801f6fe:	bd80      	pop	{r7, pc}
 801f700:	1fe00fff 	.word	0x1fe00fff

0801f704 <HAL_SD_ReadBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to read.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ReadBlocks_DMA(SD_HandleTypeDef *hsd, uint8_t *pData, uint32_t BlockAdd,
                                        uint32_t NumberOfBlocks)
{
 801f704:	b580      	push	{r7, lr}
 801f706:	b08c      	sub	sp, #48	@ 0x30
 801f708:	af00      	add	r7, sp, #0
 801f70a:	60f8      	str	r0, [r7, #12]
 801f70c:	60b9      	str	r1, [r7, #8]
 801f70e:	607a      	str	r2, [r7, #4]
 801f710:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801f712:	687b      	ldr	r3, [r7, #4]
 801f714:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801f716:	68bb      	ldr	r3, [r7, #8]
 801f718:	2b00      	cmp	r3, #0
 801f71a:	d107      	bne.n	801f72c <HAL_SD_ReadBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801f71c:	68fb      	ldr	r3, [r7, #12]
 801f71e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f720:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801f724:	68fb      	ldr	r3, [r7, #12]
 801f726:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f728:	2301      	movs	r3, #1
 801f72a:	e08d      	b.n	801f848 <HAL_SD_ReadBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801f72c:	68fb      	ldr	r3, [r7, #12]
 801f72e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f732:	b2db      	uxtb	r3, r3
 801f734:	2b01      	cmp	r3, #1
 801f736:	f040 8086 	bne.w	801f846 <HAL_SD_ReadBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801f73a:	68fb      	ldr	r3, [r7, #12]
 801f73c:	2200      	movs	r2, #0
 801f73e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801f740:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f742:	683b      	ldr	r3, [r7, #0]
 801f744:	441a      	add	r2, r3
 801f746:	68fb      	ldr	r3, [r7, #12]
 801f748:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f74a:	429a      	cmp	r2, r3
 801f74c:	d907      	bls.n	801f75e <HAL_SD_ReadBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801f74e:	68fb      	ldr	r3, [r7, #12]
 801f750:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f752:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f756:	68fb      	ldr	r3, [r7, #12]
 801f758:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f75a:	2301      	movs	r3, #1
 801f75c:	e074      	b.n	801f848 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801f75e:	68fb      	ldr	r3, [r7, #12]
 801f760:	2203      	movs	r2, #3
 801f762:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801f766:	68fb      	ldr	r3, [r7, #12]
 801f768:	681b      	ldr	r3, [r3, #0]
 801f76a:	2200      	movs	r2, #0
 801f76c:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pRxBuffPtr = pData;
 801f76e:	68fb      	ldr	r3, [r7, #12]
 801f770:	68ba      	ldr	r2, [r7, #8]
 801f772:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize = BLOCKSIZE * NumberOfBlocks;
 801f774:	683b      	ldr	r3, [r7, #0]
 801f776:	025a      	lsls	r2, r3, #9
 801f778:	68fb      	ldr	r3, [r7, #12]
 801f77a:	629a      	str	r2, [r3, #40]	@ 0x28

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801f77c:	68fb      	ldr	r3, [r7, #12]
 801f77e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f780:	2b01      	cmp	r3, #1
 801f782:	d002      	beq.n	801f78a <HAL_SD_ReadBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 801f784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f786:	025b      	lsls	r3, r3, #9
 801f788:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f78a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f78e:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801f790:	683b      	ldr	r3, [r7, #0]
 801f792:	025b      	lsls	r3, r3, #9
 801f794:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801f796:	2390      	movs	r3, #144	@ 0x90
 801f798:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 801f79a:	2302      	movs	r3, #2
 801f79c:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f79e:	2300      	movs	r3, #0
 801f7a0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801f7a2:	2300      	movs	r3, #0
 801f7a4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f7a6:	68fb      	ldr	r3, [r7, #12]
 801f7a8:	681b      	ldr	r3, [r3, #0]
 801f7aa:	f107 0210 	add.w	r2, r7, #16
 801f7ae:	4611      	mov	r1, r2
 801f7b0:	4618      	mov	r0, r3
 801f7b2:	f002 f959 	bl	8021a68 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801f7b6:	68fb      	ldr	r3, [r7, #12]
 801f7b8:	681b      	ldr	r3, [r3, #0]
 801f7ba:	68da      	ldr	r2, [r3, #12]
 801f7bc:	68fb      	ldr	r3, [r7, #12]
 801f7be:	681b      	ldr	r3, [r3, #0]
 801f7c0:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f7c4:	60da      	str	r2, [r3, #12]
    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801f7c6:	68fb      	ldr	r3, [r7, #12]
 801f7c8:	681b      	ldr	r3, [r3, #0]
 801f7ca:	68ba      	ldr	r2, [r7, #8]
 801f7cc:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801f7ce:	68fb      	ldr	r3, [r7, #12]
 801f7d0:	681b      	ldr	r3, [r3, #0]
 801f7d2:	2201      	movs	r2, #1
 801f7d4:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Read Blocks in DMA mode */
    if (NumberOfBlocks > 1U)
 801f7d6:	683b      	ldr	r3, [r7, #0]
 801f7d8:	2b01      	cmp	r3, #1
 801f7da:	d90a      	bls.n	801f7f2 <HAL_SD_ReadBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_READ_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801f7dc:	68fb      	ldr	r3, [r7, #12]
 801f7de:	2282      	movs	r2, #130	@ 0x82
 801f7e0:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Multi Block command */
      errorstate = SDMMC_CmdReadMultiBlock(hsd->Instance, add);
 801f7e2:	68fb      	ldr	r3, [r7, #12]
 801f7e4:	681b      	ldr	r3, [r3, #0]
 801f7e6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f7e8:	4618      	mov	r0, r3
 801f7ea:	f002 f9af 	bl	8021b4c <SDMMC_CmdReadMultiBlock>
 801f7ee:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801f7f0:	e009      	b.n	801f806 <HAL_SD_ReadBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_READ_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801f7f2:	68fb      	ldr	r3, [r7, #12]
 801f7f4:	2281      	movs	r2, #129	@ 0x81
 801f7f6:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Read Single Block command */
      errorstate = SDMMC_CmdReadSingleBlock(hsd->Instance, add);
 801f7f8:	68fb      	ldr	r3, [r7, #12]
 801f7fa:	681b      	ldr	r3, [r3, #0]
 801f7fc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f7fe:	4618      	mov	r0, r3
 801f800:	f002 f981 	bl	8021b06 <SDMMC_CmdReadSingleBlock>
 801f804:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801f806:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f808:	2b00      	cmp	r3, #0
 801f80a:	d012      	beq.n	801f832 <HAL_SD_ReadBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f80c:	68fb      	ldr	r3, [r7, #12]
 801f80e:	681b      	ldr	r3, [r3, #0]
 801f810:	4a0f      	ldr	r2, [pc, #60]	@ (801f850 <HAL_SD_ReadBlocks_DMA+0x14c>)
 801f812:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801f814:	68fb      	ldr	r3, [r7, #12]
 801f816:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f818:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f81a:	431a      	orrs	r2, r3
 801f81c:	68fb      	ldr	r3, [r7, #12]
 801f81e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f820:	68fb      	ldr	r3, [r7, #12]
 801f822:	2201      	movs	r2, #1
 801f824:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f828:	68fb      	ldr	r3, [r7, #12]
 801f82a:	2200      	movs	r2, #0
 801f82c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f82e:	2301      	movs	r3, #1
 801f830:	e00a      	b.n	801f848 <HAL_SD_ReadBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_RXOVERR | SDMMC_IT_DATAEND));
 801f832:	68fb      	ldr	r3, [r7, #12]
 801f834:	681b      	ldr	r3, [r3, #0]
 801f836:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f838:	68fb      	ldr	r3, [r7, #12]
 801f83a:	681b      	ldr	r3, [r3, #0]
 801f83c:	f442 7295 	orr.w	r2, r2, #298	@ 0x12a
 801f840:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801f842:	2300      	movs	r3, #0
 801f844:	e000      	b.n	801f848 <HAL_SD_ReadBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801f846:	2302      	movs	r3, #2
  }
}
 801f848:	4618      	mov	r0, r3
 801f84a:	3730      	adds	r7, #48	@ 0x30
 801f84c:	46bd      	mov	sp, r7
 801f84e:	bd80      	pop	{r7, pc}
 801f850:	1fe00fff 	.word	0x1fe00fff

0801f854 <HAL_SD_WriteBlocks_DMA>:
  * @param  NumberOfBlocks: Number of blocks to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_WriteBlocks_DMA(SD_HandleTypeDef *hsd, const uint8_t *pData, uint32_t BlockAdd,
                                         uint32_t NumberOfBlocks)
{
 801f854:	b580      	push	{r7, lr}
 801f856:	b08c      	sub	sp, #48	@ 0x30
 801f858:	af00      	add	r7, sp, #0
 801f85a:	60f8      	str	r0, [r7, #12]
 801f85c:	60b9      	str	r1, [r7, #8]
 801f85e:	607a      	str	r2, [r7, #4]
 801f860:	603b      	str	r3, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t add = BlockAdd;
 801f862:	687b      	ldr	r3, [r7, #4]
 801f864:	62bb      	str	r3, [r7, #40]	@ 0x28

  if (NULL == pData)
 801f866:	68bb      	ldr	r3, [r7, #8]
 801f868:	2b00      	cmp	r3, #0
 801f86a:	d107      	bne.n	801f87c <HAL_SD_WriteBlocks_DMA+0x28>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801f86c:	68fb      	ldr	r3, [r7, #12]
 801f86e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f870:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801f874:	68fb      	ldr	r3, [r7, #12]
 801f876:	635a      	str	r2, [r3, #52]	@ 0x34
    return HAL_ERROR;
 801f878:	2301      	movs	r3, #1
 801f87a:	e08d      	b.n	801f998 <HAL_SD_WriteBlocks_DMA+0x144>
  }

  if (hsd->State == HAL_SD_STATE_READY)
 801f87c:	68fb      	ldr	r3, [r7, #12]
 801f87e:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f882:	b2db      	uxtb	r3, r3
 801f884:	2b01      	cmp	r3, #1
 801f886:	f040 8086 	bne.w	801f996 <HAL_SD_WriteBlocks_DMA+0x142>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801f88a:	68fb      	ldr	r3, [r7, #12]
 801f88c:	2200      	movs	r2, #0
 801f88e:	635a      	str	r2, [r3, #52]	@ 0x34

    if ((add + NumberOfBlocks) > (hsd->SdCard.LogBlockNbr))
 801f890:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801f892:	683b      	ldr	r3, [r7, #0]
 801f894:	441a      	add	r2, r3
 801f896:	68fb      	ldr	r3, [r7, #12]
 801f898:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f89a:	429a      	cmp	r2, r3
 801f89c:	d907      	bls.n	801f8ae <HAL_SD_WriteBlocks_DMA+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801f89e:	68fb      	ldr	r3, [r7, #12]
 801f8a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f8a2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f8a6:	68fb      	ldr	r3, [r7, #12]
 801f8a8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f8aa:	2301      	movs	r3, #1
 801f8ac:	e074      	b.n	801f998 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801f8ae:	68fb      	ldr	r3, [r7, #12]
 801f8b0:	2203      	movs	r2, #3
 801f8b2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Initialize data control register */
    hsd->Instance->DCTRL = 0U;
 801f8b6:	68fb      	ldr	r3, [r7, #12]
 801f8b8:	681b      	ldr	r3, [r3, #0]
 801f8ba:	2200      	movs	r2, #0
 801f8bc:	62da      	str	r2, [r3, #44]	@ 0x2c

    hsd->pTxBuffPtr = pData;
 801f8be:	68fb      	ldr	r3, [r7, #12]
 801f8c0:	68ba      	ldr	r2, [r7, #8]
 801f8c2:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize = BLOCKSIZE * NumberOfBlocks;
 801f8c4:	683b      	ldr	r3, [r7, #0]
 801f8c6:	025a      	lsls	r2, r3, #9
 801f8c8:	68fb      	ldr	r3, [r7, #12]
 801f8ca:	621a      	str	r2, [r3, #32]

    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801f8cc:	68fb      	ldr	r3, [r7, #12]
 801f8ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801f8d0:	2b01      	cmp	r3, #1
 801f8d2:	d002      	beq.n	801f8da <HAL_SD_WriteBlocks_DMA+0x86>
    {
      add *= BLOCKSIZE;
 801f8d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801f8d6:	025b      	lsls	r3, r3, #9
 801f8d8:	62bb      	str	r3, [r7, #40]	@ 0x28
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    config.DataTimeOut   = SDMMC_DATATIMEOUT;
 801f8da:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 801f8de:	613b      	str	r3, [r7, #16]
    config.DataLength    = BLOCKSIZE * NumberOfBlocks;
 801f8e0:	683b      	ldr	r3, [r7, #0]
 801f8e2:	025b      	lsls	r3, r3, #9
 801f8e4:	617b      	str	r3, [r7, #20]
    config.DataBlockSize = SDMMC_DATABLOCK_SIZE_512B;
 801f8e6:	2390      	movs	r3, #144	@ 0x90
 801f8e8:	61bb      	str	r3, [r7, #24]
    config.TransferDir   = SDMMC_TRANSFER_DIR_TO_CARD;
 801f8ea:	2300      	movs	r3, #0
 801f8ec:	61fb      	str	r3, [r7, #28]
    config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 801f8ee:	2300      	movs	r3, #0
 801f8f0:	623b      	str	r3, [r7, #32]
    config.DPSM          = SDMMC_DPSM_DISABLE;
 801f8f2:	2300      	movs	r3, #0
 801f8f4:	627b      	str	r3, [r7, #36]	@ 0x24
    (void)SDMMC_ConfigData(hsd->Instance, &config);
 801f8f6:	68fb      	ldr	r3, [r7, #12]
 801f8f8:	681b      	ldr	r3, [r3, #0]
 801f8fa:	f107 0210 	add.w	r2, r7, #16
 801f8fe:	4611      	mov	r1, r2
 801f900:	4618      	mov	r0, r3
 801f902:	f002 f8b1 	bl	8021a68 <SDMMC_ConfigData>

    __SDMMC_CMDTRANS_ENABLE(hsd->Instance);
 801f906:	68fb      	ldr	r3, [r7, #12]
 801f908:	681b      	ldr	r3, [r3, #0]
 801f90a:	68da      	ldr	r2, [r3, #12]
 801f90c:	68fb      	ldr	r3, [r7, #12]
 801f90e:	681b      	ldr	r3, [r3, #0]
 801f910:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 801f914:	60da      	str	r2, [r3, #12]

    hsd->Instance->IDMABASE0 = (uint32_t) pData ;
 801f916:	68fb      	ldr	r3, [r7, #12]
 801f918:	681b      	ldr	r3, [r3, #0]
 801f91a:	68ba      	ldr	r2, [r7, #8]
 801f91c:	659a      	str	r2, [r3, #88]	@ 0x58
    hsd->Instance->IDMACTRL  = SDMMC_ENABLE_IDMA_SINGLE_BUFF;
 801f91e:	68fb      	ldr	r3, [r7, #12]
 801f920:	681b      	ldr	r3, [r3, #0]
 801f922:	2201      	movs	r2, #1
 801f924:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Write Blocks in Polling mode */
    if (NumberOfBlocks > 1U)
 801f926:	683b      	ldr	r3, [r7, #0]
 801f928:	2b01      	cmp	r3, #1
 801f92a:	d90a      	bls.n	801f942 <HAL_SD_WriteBlocks_DMA+0xee>
    {
      hsd->Context = (SD_CONTEXT_WRITE_MULTIPLE_BLOCK | SD_CONTEXT_DMA);
 801f92c:	68fb      	ldr	r3, [r7, #12]
 801f92e:	22a0      	movs	r2, #160	@ 0xa0
 801f930:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Multi Block command */
      errorstate = SDMMC_CmdWriteMultiBlock(hsd->Instance, add);
 801f932:	68fb      	ldr	r3, [r7, #12]
 801f934:	681b      	ldr	r3, [r3, #0]
 801f936:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f938:	4618      	mov	r0, r3
 801f93a:	f002 f94d 	bl	8021bd8 <SDMMC_CmdWriteMultiBlock>
 801f93e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 801f940:	e009      	b.n	801f956 <HAL_SD_WriteBlocks_DMA+0x102>
    }
    else
    {
      hsd->Context = (SD_CONTEXT_WRITE_SINGLE_BLOCK | SD_CONTEXT_DMA);
 801f942:	68fb      	ldr	r3, [r7, #12]
 801f944:	2290      	movs	r2, #144	@ 0x90
 801f946:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Write Single Block command */
      errorstate = SDMMC_CmdWriteSingleBlock(hsd->Instance, add);
 801f948:	68fb      	ldr	r3, [r7, #12]
 801f94a:	681b      	ldr	r3, [r3, #0]
 801f94c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801f94e:	4618      	mov	r0, r3
 801f950:	f002 f91f 	bl	8021b92 <SDMMC_CmdWriteSingleBlock>
 801f954:	62f8      	str	r0, [r7, #44]	@ 0x2c
    }
    if (errorstate != HAL_SD_ERROR_NONE)
 801f956:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f958:	2b00      	cmp	r3, #0
 801f95a:	d012      	beq.n	801f982 <HAL_SD_WriteBlocks_DMA+0x12e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801f95c:	68fb      	ldr	r3, [r7, #12]
 801f95e:	681b      	ldr	r3, [r3, #0]
 801f960:	4a0f      	ldr	r2, [pc, #60]	@ (801f9a0 <HAL_SD_WriteBlocks_DMA+0x14c>)
 801f962:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801f964:	68fb      	ldr	r3, [r7, #12]
 801f966:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801f968:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801f96a:	431a      	orrs	r2, r3
 801f96c:	68fb      	ldr	r3, [r7, #12]
 801f96e:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801f970:	68fb      	ldr	r3, [r7, #12]
 801f972:	2201      	movs	r2, #1
 801f974:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801f978:	68fb      	ldr	r3, [r7, #12]
 801f97a:	2200      	movs	r2, #0
 801f97c:	62da      	str	r2, [r3, #44]	@ 0x2c
      return HAL_ERROR;
 801f97e:	2301      	movs	r3, #1
 801f980:	e00a      	b.n	801f998 <HAL_SD_WriteBlocks_DMA+0x144>
    }

    /* Enable transfer interrupts */
    __HAL_SD_ENABLE_IT(hsd, (SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | SDMMC_IT_TXUNDERR | SDMMC_IT_DATAEND));
 801f982:	68fb      	ldr	r3, [r7, #12]
 801f984:	681b      	ldr	r3, [r3, #0]
 801f986:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801f988:	68fb      	ldr	r3, [r7, #12]
 801f98a:	681b      	ldr	r3, [r3, #0]
 801f98c:	f442 728d 	orr.w	r2, r2, #282	@ 0x11a
 801f990:	63da      	str	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 801f992:	2300      	movs	r3, #0
 801f994:	e000      	b.n	801f998 <HAL_SD_WriteBlocks_DMA+0x144>
  }
  else
  {
    return HAL_BUSY;
 801f996:	2302      	movs	r3, #2
  }
}
 801f998:	4618      	mov	r0, r3
 801f99a:	3730      	adds	r7, #48	@ 0x30
 801f99c:	46bd      	mov	sp, r7
 801f99e:	bd80      	pop	{r7, pc}
 801f9a0:	1fe00fff 	.word	0x1fe00fff

0801f9a4 <HAL_SD_Erase>:
  * @param  BlockStartAdd: Start Block address
  * @param  BlockEndAdd: End Block address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_Erase(SD_HandleTypeDef *hsd, uint32_t BlockStartAdd, uint32_t BlockEndAdd)
{
 801f9a4:	b580      	push	{r7, lr}
 801f9a6:	b088      	sub	sp, #32
 801f9a8:	af00      	add	r7, sp, #0
 801f9aa:	60f8      	str	r0, [r7, #12]
 801f9ac:	60b9      	str	r1, [r7, #8]
 801f9ae:	607a      	str	r2, [r7, #4]
  uint32_t errorstate;
  uint32_t start_add = BlockStartAdd;
 801f9b0:	68bb      	ldr	r3, [r7, #8]
 801f9b2:	61fb      	str	r3, [r7, #28]
  uint32_t end_add = BlockEndAdd;
 801f9b4:	687b      	ldr	r3, [r7, #4]
 801f9b6:	61bb      	str	r3, [r7, #24]

  if (hsd->State == HAL_SD_STATE_READY)
 801f9b8:	68fb      	ldr	r3, [r7, #12]
 801f9ba:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 801f9be:	b2db      	uxtb	r3, r3
 801f9c0:	2b01      	cmp	r3, #1
 801f9c2:	f040 80b4 	bne.w	801fb2e <HAL_SD_Erase+0x18a>
  {
    hsd->ErrorCode = HAL_SD_ERROR_NONE;
 801f9c6:	68fb      	ldr	r3, [r7, #12]
 801f9c8:	2200      	movs	r2, #0
 801f9ca:	635a      	str	r2, [r3, #52]	@ 0x34

    if (end_add < start_add)
 801f9cc:	69ba      	ldr	r2, [r7, #24]
 801f9ce:	69fb      	ldr	r3, [r7, #28]
 801f9d0:	429a      	cmp	r2, r3
 801f9d2:	d207      	bcs.n	801f9e4 <HAL_SD_Erase+0x40>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 801f9d4:	68fb      	ldr	r3, [r7, #12]
 801f9d6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f9d8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 801f9dc:	68fb      	ldr	r3, [r7, #12]
 801f9de:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f9e0:	2301      	movs	r3, #1
 801f9e2:	e0a5      	b.n	801fb30 <HAL_SD_Erase+0x18c>
    }

    if (end_add > (hsd->SdCard.LogBlockNbr))
 801f9e4:	68fb      	ldr	r3, [r7, #12]
 801f9e6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801f9e8:	69ba      	ldr	r2, [r7, #24]
 801f9ea:	429a      	cmp	r2, r3
 801f9ec:	d907      	bls.n	801f9fe <HAL_SD_Erase+0x5a>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_ADDR_OUT_OF_RANGE;
 801f9ee:	68fb      	ldr	r3, [r7, #12]
 801f9f0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801f9f2:	f043 7200 	orr.w	r2, r3, #33554432	@ 0x2000000
 801f9f6:	68fb      	ldr	r3, [r7, #12]
 801f9f8:	635a      	str	r2, [r3, #52]	@ 0x34
      return HAL_ERROR;
 801f9fa:	2301      	movs	r3, #1
 801f9fc:	e098      	b.n	801fb30 <HAL_SD_Erase+0x18c>
    }

    hsd->State = HAL_SD_STATE_BUSY;
 801f9fe:	68fb      	ldr	r3, [r7, #12]
 801fa00:	2203      	movs	r2, #3
 801fa02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    /* Check if the card command class supports erase command */
    if (((hsd->SdCard.Class) & SDMMC_CCCC_ERASE) == 0U)
 801fa06:	68fb      	ldr	r3, [r7, #12]
 801fa08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801fa0a:	f003 0320 	and.w	r3, r3, #32
 801fa0e:	2b00      	cmp	r3, #0
 801fa10:	d10f      	bne.n	801fa32 <HAL_SD_Erase+0x8e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801fa12:	68fb      	ldr	r3, [r7, #12]
 801fa14:	681b      	ldr	r3, [r3, #0]
 801fa16:	4a48      	ldr	r2, [pc, #288]	@ (801fb38 <HAL_SD_Erase+0x194>)
 801fa18:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 801fa1a:	68fb      	ldr	r3, [r7, #12]
 801fa1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fa1e:	f043 6280 	orr.w	r2, r3, #67108864	@ 0x4000000
 801fa22:	68fb      	ldr	r3, [r7, #12]
 801fa24:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801fa26:	68fb      	ldr	r3, [r7, #12]
 801fa28:	2201      	movs	r2, #1
 801fa2a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801fa2e:	2301      	movs	r3, #1
 801fa30:	e07e      	b.n	801fb30 <HAL_SD_Erase+0x18c>
    }

    if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 801fa32:	68fb      	ldr	r3, [r7, #12]
 801fa34:	681b      	ldr	r3, [r3, #0]
 801fa36:	2100      	movs	r1, #0
 801fa38:	4618      	mov	r0, r3
 801fa3a:	f002 f802 	bl	8021a42 <SDMMC_GetResponse>
 801fa3e:	4603      	mov	r3, r0
 801fa40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801fa44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801fa48:	d10f      	bne.n	801fa6a <HAL_SD_Erase+0xc6>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801fa4a:	68fb      	ldr	r3, [r7, #12]
 801fa4c:	681b      	ldr	r3, [r3, #0]
 801fa4e:	4a3a      	ldr	r2, [pc, #232]	@ (801fb38 <HAL_SD_Erase+0x194>)
 801fa50:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 801fa52:	68fb      	ldr	r3, [r7, #12]
 801fa54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fa56:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 801fa5a:	68fb      	ldr	r3, [r7, #12]
 801fa5c:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801fa5e:	68fb      	ldr	r3, [r7, #12]
 801fa60:	2201      	movs	r2, #1
 801fa62:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801fa66:	2301      	movs	r3, #1
 801fa68:	e062      	b.n	801fb30 <HAL_SD_Erase+0x18c>
    }

    /* Get start and end block for high capacity cards */
    if (hsd->SdCard.CardType != CARD_SDHC_SDXC)
 801fa6a:	68fb      	ldr	r3, [r7, #12]
 801fa6c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fa6e:	2b01      	cmp	r3, #1
 801fa70:	d005      	beq.n	801fa7e <HAL_SD_Erase+0xda>
    {
      start_add *= BLOCKSIZE;
 801fa72:	69fb      	ldr	r3, [r7, #28]
 801fa74:	025b      	lsls	r3, r3, #9
 801fa76:	61fb      	str	r3, [r7, #28]
      end_add   *= BLOCKSIZE;
 801fa78:	69bb      	ldr	r3, [r7, #24]
 801fa7a:	025b      	lsls	r3, r3, #9
 801fa7c:	61bb      	str	r3, [r7, #24]
    }

    /* According to sd-card spec 1.0 ERASE_GROUP_START (CMD32) and erase_group_end(CMD33) */
    if (hsd->SdCard.CardType != CARD_SECURED)
 801fa7e:	68fb      	ldr	r3, [r7, #12]
 801fa80:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801fa82:	2b03      	cmp	r3, #3
 801fa84:	d033      	beq.n	801faee <HAL_SD_Erase+0x14a>
    {
      /* Send CMD32 SD_ERASE_GRP_START with argument as addr  */
      errorstate = SDMMC_CmdSDEraseStartAdd(hsd->Instance, start_add);
 801fa86:	68fb      	ldr	r3, [r7, #12]
 801fa88:	681b      	ldr	r3, [r3, #0]
 801fa8a:	69f9      	ldr	r1, [r7, #28]
 801fa8c:	4618      	mov	r0, r3
 801fa8e:	f002 f8c6 	bl	8021c1e <SDMMC_CmdSDEraseStartAdd>
 801fa92:	6178      	str	r0, [r7, #20]
      if (errorstate != HAL_SD_ERROR_NONE)
 801fa94:	697b      	ldr	r3, [r7, #20]
 801fa96:	2b00      	cmp	r3, #0
 801fa98:	d00f      	beq.n	801faba <HAL_SD_Erase+0x116>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801fa9a:	68fb      	ldr	r3, [r7, #12]
 801fa9c:	681b      	ldr	r3, [r3, #0]
 801fa9e:	4a26      	ldr	r2, [pc, #152]	@ (801fb38 <HAL_SD_Erase+0x194>)
 801faa0:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 801faa2:	68fb      	ldr	r3, [r7, #12]
 801faa4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801faa6:	697b      	ldr	r3, [r7, #20]
 801faa8:	431a      	orrs	r2, r3
 801faaa:	68fb      	ldr	r3, [r7, #12]
 801faac:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 801faae:	68fb      	ldr	r3, [r7, #12]
 801fab0:	2201      	movs	r2, #1
 801fab2:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 801fab6:	2301      	movs	r3, #1
 801fab8:	e03a      	b.n	801fb30 <HAL_SD_Erase+0x18c>
      }

      /* Send CMD33 SD_ERASE_GRP_END with argument as addr  */
      errorstate = SDMMC_CmdSDEraseEndAdd(hsd->Instance, end_add);
 801faba:	68fb      	ldr	r3, [r7, #12]
 801fabc:	681b      	ldr	r3, [r3, #0]
 801fabe:	69b9      	ldr	r1, [r7, #24]
 801fac0:	4618      	mov	r0, r3
 801fac2:	f002 f8cf 	bl	8021c64 <SDMMC_CmdSDEraseEndAdd>
 801fac6:	6178      	str	r0, [r7, #20]
      if (errorstate != HAL_SD_ERROR_NONE)
 801fac8:	697b      	ldr	r3, [r7, #20]
 801faca:	2b00      	cmp	r3, #0
 801facc:	d00f      	beq.n	801faee <HAL_SD_Erase+0x14a>
      {
        /* Clear all the static flags */
        __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801face:	68fb      	ldr	r3, [r7, #12]
 801fad0:	681b      	ldr	r3, [r3, #0]
 801fad2:	4a19      	ldr	r2, [pc, #100]	@ (801fb38 <HAL_SD_Erase+0x194>)
 801fad4:	639a      	str	r2, [r3, #56]	@ 0x38
        hsd->ErrorCode |= errorstate;
 801fad6:	68fb      	ldr	r3, [r7, #12]
 801fad8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fada:	697b      	ldr	r3, [r7, #20]
 801fadc:	431a      	orrs	r2, r3
 801fade:	68fb      	ldr	r3, [r7, #12]
 801fae0:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 801fae2:	68fb      	ldr	r3, [r7, #12]
 801fae4:	2201      	movs	r2, #1
 801fae6:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_ERROR;
 801faea:	2301      	movs	r3, #1
 801faec:	e020      	b.n	801fb30 <HAL_SD_Erase+0x18c>
      }
    }

    /* Send CMD38 ERASE */
    errorstate = SDMMC_CmdErase(hsd->Instance, 0UL);
 801faee:	68fb      	ldr	r3, [r7, #12]
 801faf0:	681b      	ldr	r3, [r3, #0]
 801faf2:	2100      	movs	r1, #0
 801faf4:	4618      	mov	r0, r3
 801faf6:	f002 f8d8 	bl	8021caa <SDMMC_CmdErase>
 801fafa:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 801fafc:	697b      	ldr	r3, [r7, #20]
 801fafe:	2b00      	cmp	r3, #0
 801fb00:	d00f      	beq.n	801fb22 <HAL_SD_Erase+0x17e>
    {
      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 801fb02:	68fb      	ldr	r3, [r7, #12]
 801fb04:	681b      	ldr	r3, [r3, #0]
 801fb06:	4a0c      	ldr	r2, [pc, #48]	@ (801fb38 <HAL_SD_Erase+0x194>)
 801fb08:	639a      	str	r2, [r3, #56]	@ 0x38
      hsd->ErrorCode |= errorstate;
 801fb0a:	68fb      	ldr	r3, [r7, #12]
 801fb0c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fb0e:	697b      	ldr	r3, [r7, #20]
 801fb10:	431a      	orrs	r2, r3
 801fb12:	68fb      	ldr	r3, [r7, #12]
 801fb14:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 801fb16:	68fb      	ldr	r3, [r7, #12]
 801fb18:	2201      	movs	r2, #1
 801fb1a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_ERROR;
 801fb1e:	2301      	movs	r3, #1
 801fb20:	e006      	b.n	801fb30 <HAL_SD_Erase+0x18c>
    }

    hsd->State = HAL_SD_STATE_READY;
 801fb22:	68fb      	ldr	r3, [r7, #12]
 801fb24:	2201      	movs	r2, #1
 801fb26:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

    return HAL_OK;
 801fb2a:	2300      	movs	r3, #0
 801fb2c:	e000      	b.n	801fb30 <HAL_SD_Erase+0x18c>
  }
  else
  {
    return HAL_BUSY;
 801fb2e:	2302      	movs	r3, #2
  }
}
 801fb30:	4618      	mov	r0, r3
 801fb32:	3720      	adds	r7, #32
 801fb34:	46bd      	mov	sp, r7
 801fb36:	bd80      	pop	{r7, pc}
 801fb38:	1fe00fff 	.word	0x1fe00fff

0801fb3c <HAL_SD_IRQHandler>:
  * @brief  This function handles SD card interrupt request.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
void HAL_SD_IRQHandler(SD_HandleTypeDef *hsd)
{
 801fb3c:	b580      	push	{r7, lr}
 801fb3e:	b084      	sub	sp, #16
 801fb40:	af00      	add	r7, sp, #0
 801fb42:	6078      	str	r0, [r7, #4]
  uint32_t errorstate;
  uint32_t context = hsd->Context;
 801fb44:	687b      	ldr	r3, [r7, #4]
 801fb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801fb48:	60fb      	str	r3, [r7, #12]

  /* Check for SDMMC interrupt flags */
  if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801fb4a:	687b      	ldr	r3, [r7, #4]
 801fb4c:	681b      	ldr	r3, [r3, #0]
 801fb4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fb50:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 801fb54:	2b00      	cmp	r3, #0
 801fb56:	d008      	beq.n	801fb6a <HAL_SD_IRQHandler+0x2e>
 801fb58:	68fb      	ldr	r3, [r7, #12]
 801fb5a:	f003 0308 	and.w	r3, r3, #8
 801fb5e:	2b00      	cmp	r3, #0
 801fb60:	d003      	beq.n	801fb6a <HAL_SD_IRQHandler+0x2e>
  {
    SD_Read_IT(hsd);
 801fb62:	6878      	ldr	r0, [r7, #4]
 801fb64:	f001 f9c4 	bl	8020ef0 <SD_Read_IT>
 801fb68:	e19a      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
  }

  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DATAEND) != RESET)
 801fb6a:	687b      	ldr	r3, [r7, #4]
 801fb6c:	681b      	ldr	r3, [r3, #0]
 801fb6e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fb70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801fb74:	2b00      	cmp	r3, #0
 801fb76:	f000 80ac 	beq.w	801fcd2 <HAL_SD_IRQHandler+0x196>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DATAEND);
 801fb7a:	687b      	ldr	r3, [r7, #4]
 801fb7c:	681b      	ldr	r3, [r3, #0]
 801fb7e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801fb82:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND  | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801fb84:	687b      	ldr	r3, [r7, #4]
 801fb86:	681b      	ldr	r3, [r3, #0]
 801fb88:	6bd9      	ldr	r1, [r3, #60]	@ 0x3c
 801fb8a:	687b      	ldr	r3, [r7, #4]
 801fb8c:	681a      	ldr	r2, [r3, #0]
 801fb8e:	4b59      	ldr	r3, [pc, #356]	@ (801fcf4 <HAL_SD_IRQHandler+0x1b8>)
 801fb90:	400b      	ands	r3, r1
 801fb92:	63d3      	str	r3, [r2, #60]	@ 0x3c
                        SDMMC_IT_TXUNDERR | SDMMC_IT_RXOVERR  | SDMMC_IT_TXFIFOHE | \
                        SDMMC_IT_RXFIFOHF);

    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801fb94:	687b      	ldr	r3, [r7, #4]
 801fb96:	681b      	ldr	r3, [r3, #0]
 801fb98:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fb9a:	687b      	ldr	r3, [r7, #4]
 801fb9c:	681b      	ldr	r3, [r3, #0]
 801fb9e:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801fba2:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801fba4:	687b      	ldr	r3, [r7, #4]
 801fba6:	681b      	ldr	r3, [r3, #0]
 801fba8:	68da      	ldr	r2, [r3, #12]
 801fbaa:	687b      	ldr	r3, [r7, #4]
 801fbac:	681b      	ldr	r3, [r3, #0]
 801fbae:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801fbb2:	60da      	str	r2, [r3, #12]

    if ((context & SD_CONTEXT_IT) != 0U)
 801fbb4:	68fb      	ldr	r3, [r7, #12]
 801fbb6:	f003 0308 	and.w	r3, r3, #8
 801fbba:	2b00      	cmp	r3, #0
 801fbbc:	d038      	beq.n	801fc30 <HAL_SD_IRQHandler+0xf4>
    {
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801fbbe:	68fb      	ldr	r3, [r7, #12]
 801fbc0:	f003 0302 	and.w	r3, r3, #2
 801fbc4:	2b00      	cmp	r3, #0
 801fbc6:	d104      	bne.n	801fbd2 <HAL_SD_IRQHandler+0x96>
 801fbc8:	68fb      	ldr	r3, [r7, #12]
 801fbca:	f003 0320 	and.w	r3, r3, #32
 801fbce:	2b00      	cmp	r3, #0
 801fbd0:	d011      	beq.n	801fbf6 <HAL_SD_IRQHandler+0xba>
      {
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801fbd2:	687b      	ldr	r3, [r7, #4]
 801fbd4:	681b      	ldr	r3, [r3, #0]
 801fbd6:	4618      	mov	r0, r3
 801fbd8:	f002 f88a 	bl	8021cf0 <SDMMC_CmdStopTransfer>
 801fbdc:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801fbde:	68bb      	ldr	r3, [r7, #8]
 801fbe0:	2b00      	cmp	r3, #0
 801fbe2:	d008      	beq.n	801fbf6 <HAL_SD_IRQHandler+0xba>
        {
          hsd->ErrorCode |= errorstate;
 801fbe4:	687b      	ldr	r3, [r7, #4]
 801fbe6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fbe8:	68bb      	ldr	r3, [r7, #8]
 801fbea:	431a      	orrs	r2, r3
 801fbec:	687b      	ldr	r3, [r7, #4]
 801fbee:	635a      	str	r2, [r3, #52]	@ 0x34
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
          hsd->ErrorCallback(hsd);
#else
          HAL_SD_ErrorCallback(hsd);
 801fbf0:	6878      	ldr	r0, [r7, #4]
 801fbf2:	f000 f95b 	bl	801feac <HAL_SD_ErrorCallback>
#endif /* USE_HAL_SD_REGISTER_CALLBACKS */
        }
      }

      /* Clear all the static flags */
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801fbf6:	687b      	ldr	r3, [r7, #4]
 801fbf8:	681b      	ldr	r3, [r3, #0]
 801fbfa:	4a3f      	ldr	r2, [pc, #252]	@ (801fcf8 <HAL_SD_IRQHandler+0x1bc>)
 801fbfc:	639a      	str	r2, [r3, #56]	@ 0x38

      hsd->State = HAL_SD_STATE_READY;
 801fbfe:	687b      	ldr	r3, [r7, #4]
 801fc00:	2201      	movs	r2, #1
 801fc02:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801fc06:	687b      	ldr	r3, [r7, #4]
 801fc08:	2200      	movs	r2, #0
 801fc0a:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801fc0c:	68fb      	ldr	r3, [r7, #12]
 801fc0e:	f003 0301 	and.w	r3, r3, #1
 801fc12:	2b00      	cmp	r3, #0
 801fc14:	d104      	bne.n	801fc20 <HAL_SD_IRQHandler+0xe4>
 801fc16:	68fb      	ldr	r3, [r7, #12]
 801fc18:	f003 0302 	and.w	r3, r3, #2
 801fc1c:	2b00      	cmp	r3, #0
 801fc1e:	d003      	beq.n	801fc28 <HAL_SD_IRQHandler+0xec>
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->RxCpltCallback(hsd);
#else
        HAL_SD_RxCpltCallback(hsd);
 801fc20:	6878      	ldr	r0, [r7, #4]
 801fc22:	f7f1 f9a3 	bl	8010f6c <HAL_SD_RxCpltCallback>
 801fc26:	e13b      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
      else
      {
#if defined (USE_HAL_SD_REGISTER_CALLBACKS) && (USE_HAL_SD_REGISTER_CALLBACKS == 1U)
        hsd->TxCpltCallback(hsd);
#else
        HAL_SD_TxCpltCallback(hsd);
 801fc28:	6878      	ldr	r0, [r7, #4]
 801fc2a:	f7f1 f98b 	bl	8010f44 <HAL_SD_TxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 801fc2e:	e137      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801fc30:	68fb      	ldr	r3, [r7, #12]
 801fc32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fc36:	2b00      	cmp	r3, #0
 801fc38:	f000 8132 	beq.w	801fea0 <HAL_SD_IRQHandler+0x364>
      hsd->Instance->DLEN = 0;
 801fc3c:	687b      	ldr	r3, [r7, #4]
 801fc3e:	681b      	ldr	r3, [r3, #0]
 801fc40:	2200      	movs	r2, #0
 801fc42:	629a      	str	r2, [r3, #40]	@ 0x28
      hsd->Instance->DCTRL = 0;
 801fc44:	687b      	ldr	r3, [r7, #4]
 801fc46:	681b      	ldr	r3, [r3, #0]
 801fc48:	2200      	movs	r2, #0
 801fc4a:	62da      	str	r2, [r3, #44]	@ 0x2c
      hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801fc4c:	687b      	ldr	r3, [r7, #4]
 801fc4e:	681b      	ldr	r3, [r3, #0]
 801fc50:	2200      	movs	r2, #0
 801fc52:	651a      	str	r2, [r3, #80]	@ 0x50
      if (((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801fc54:	68fb      	ldr	r3, [r7, #12]
 801fc56:	f003 0302 	and.w	r3, r3, #2
 801fc5a:	2b00      	cmp	r3, #0
 801fc5c:	d104      	bne.n	801fc68 <HAL_SD_IRQHandler+0x12c>
 801fc5e:	68fb      	ldr	r3, [r7, #12]
 801fc60:	f003 0320 	and.w	r3, r3, #32
 801fc64:	2b00      	cmp	r3, #0
 801fc66:	d011      	beq.n	801fc8c <HAL_SD_IRQHandler+0x150>
        errorstate = SDMMC_CmdStopTransfer(hsd->Instance);
 801fc68:	687b      	ldr	r3, [r7, #4]
 801fc6a:	681b      	ldr	r3, [r3, #0]
 801fc6c:	4618      	mov	r0, r3
 801fc6e:	f002 f83f 	bl	8021cf0 <SDMMC_CmdStopTransfer>
 801fc72:	60b8      	str	r0, [r7, #8]
        if (errorstate != HAL_SD_ERROR_NONE)
 801fc74:	68bb      	ldr	r3, [r7, #8]
 801fc76:	2b00      	cmp	r3, #0
 801fc78:	d008      	beq.n	801fc8c <HAL_SD_IRQHandler+0x150>
          hsd->ErrorCode |= errorstate;
 801fc7a:	687b      	ldr	r3, [r7, #4]
 801fc7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 801fc7e:	68bb      	ldr	r3, [r7, #8]
 801fc80:	431a      	orrs	r2, r3
 801fc82:	687b      	ldr	r3, [r7, #4]
 801fc84:	635a      	str	r2, [r3, #52]	@ 0x34
          HAL_SD_ErrorCallback(hsd);
 801fc86:	6878      	ldr	r0, [r7, #4]
 801fc88:	f000 f910 	bl	801feac <HAL_SD_ErrorCallback>
      hsd->State = HAL_SD_STATE_READY;
 801fc8c:	687b      	ldr	r3, [r7, #4]
 801fc8e:	2201      	movs	r2, #1
 801fc90:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801fc94:	687b      	ldr	r3, [r7, #4]
 801fc96:	2200      	movs	r2, #0
 801fc98:	62da      	str	r2, [r3, #44]	@ 0x2c
      if (((context & SD_CONTEXT_WRITE_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U))
 801fc9a:	68fb      	ldr	r3, [r7, #12]
 801fc9c:	f003 0310 	and.w	r3, r3, #16
 801fca0:	2b00      	cmp	r3, #0
 801fca2:	d104      	bne.n	801fcae <HAL_SD_IRQHandler+0x172>
 801fca4:	68fb      	ldr	r3, [r7, #12]
 801fca6:	f003 0320 	and.w	r3, r3, #32
 801fcaa:	2b00      	cmp	r3, #0
 801fcac:	d002      	beq.n	801fcb4 <HAL_SD_IRQHandler+0x178>
        HAL_SD_TxCpltCallback(hsd);
 801fcae:	6878      	ldr	r0, [r7, #4]
 801fcb0:	f7f1 f948 	bl	8010f44 <HAL_SD_TxCpltCallback>
      if (((context & SD_CONTEXT_READ_SINGLE_BLOCK) != 0U) || ((context & SD_CONTEXT_READ_MULTIPLE_BLOCK) != 0U))
 801fcb4:	68fb      	ldr	r3, [r7, #12]
 801fcb6:	f003 0301 	and.w	r3, r3, #1
 801fcba:	2b00      	cmp	r3, #0
 801fcbc:	d105      	bne.n	801fcca <HAL_SD_IRQHandler+0x18e>
 801fcbe:	68fb      	ldr	r3, [r7, #12]
 801fcc0:	f003 0302 	and.w	r3, r3, #2
 801fcc4:	2b00      	cmp	r3, #0
 801fcc6:	f000 80eb 	beq.w	801fea0 <HAL_SD_IRQHandler+0x364>
        HAL_SD_RxCpltCallback(hsd);
 801fcca:	6878      	ldr	r0, [r7, #4]
 801fccc:	f7f1 f94e 	bl	8010f6c <HAL_SD_RxCpltCallback>
}
 801fcd0:	e0e6      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
  else if ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_TXFIFOHE) != RESET) && ((context & SD_CONTEXT_IT) != 0U))
 801fcd2:	687b      	ldr	r3, [r7, #4]
 801fcd4:	681b      	ldr	r3, [r3, #0]
 801fcd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fcd8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801fcdc:	2b00      	cmp	r3, #0
 801fcde:	d00d      	beq.n	801fcfc <HAL_SD_IRQHandler+0x1c0>
 801fce0:	68fb      	ldr	r3, [r7, #12]
 801fce2:	f003 0308 	and.w	r3, r3, #8
 801fce6:	2b00      	cmp	r3, #0
 801fce8:	d008      	beq.n	801fcfc <HAL_SD_IRQHandler+0x1c0>
    SD_Write_IT(hsd);
 801fcea:	6878      	ldr	r0, [r7, #4]
 801fcec:	f001 f946 	bl	8020f7c <SD_Write_IT>
 801fcf0:	e0d6      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
 801fcf2:	bf00      	nop
 801fcf4:	ffff3ec5 	.word	0xffff3ec5
 801fcf8:	18000f3a 	.word	0x18000f3a
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_RXOVERR |
 801fcfc:	687b      	ldr	r3, [r7, #4]
 801fcfe:	681b      	ldr	r3, [r3, #0]
 801fd00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd02:	f003 033a 	and.w	r3, r3, #58	@ 0x3a
 801fd06:	2b00      	cmp	r3, #0
 801fd08:	f000 809d 	beq.w	801fe46 <HAL_SD_IRQHandler+0x30a>
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DCRCFAIL) != RESET)
 801fd0c:	687b      	ldr	r3, [r7, #4]
 801fd0e:	681b      	ldr	r3, [r3, #0]
 801fd10:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd12:	f003 0302 	and.w	r3, r3, #2
 801fd16:	2b00      	cmp	r3, #0
 801fd18:	d005      	beq.n	801fd26 <HAL_SD_IRQHandler+0x1ea>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_CRC_FAIL;
 801fd1a:	687b      	ldr	r3, [r7, #4]
 801fd1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd1e:	f043 0202 	orr.w	r2, r3, #2
 801fd22:	687b      	ldr	r3, [r7, #4]
 801fd24:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_DTIMEOUT) != RESET)
 801fd26:	687b      	ldr	r3, [r7, #4]
 801fd28:	681b      	ldr	r3, [r3, #0]
 801fd2a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd2c:	f003 0308 	and.w	r3, r3, #8
 801fd30:	2b00      	cmp	r3, #0
 801fd32:	d005      	beq.n	801fd40 <HAL_SD_IRQHandler+0x204>
      hsd->ErrorCode |= HAL_SD_ERROR_DATA_TIMEOUT;
 801fd34:	687b      	ldr	r3, [r7, #4]
 801fd36:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd38:	f043 0208 	orr.w	r2, r3, #8
 801fd3c:	687b      	ldr	r3, [r7, #4]
 801fd3e:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_RXOVERR) != RESET)
 801fd40:	687b      	ldr	r3, [r7, #4]
 801fd42:	681b      	ldr	r3, [r3, #0]
 801fd44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd46:	f003 0320 	and.w	r3, r3, #32
 801fd4a:	2b00      	cmp	r3, #0
 801fd4c:	d005      	beq.n	801fd5a <HAL_SD_IRQHandler+0x21e>
      hsd->ErrorCode |= HAL_SD_ERROR_RX_OVERRUN;
 801fd4e:	687b      	ldr	r3, [r7, #4]
 801fd50:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd52:	f043 0220 	orr.w	r2, r3, #32
 801fd56:	687b      	ldr	r3, [r7, #4]
 801fd58:	635a      	str	r2, [r3, #52]	@ 0x34
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_IT_TXUNDERR) != RESET)
 801fd5a:	687b      	ldr	r3, [r7, #4]
 801fd5c:	681b      	ldr	r3, [r3, #0]
 801fd5e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd60:	f003 0310 	and.w	r3, r3, #16
 801fd64:	2b00      	cmp	r3, #0
 801fd66:	d005      	beq.n	801fd74 <HAL_SD_IRQHandler+0x238>
      hsd->ErrorCode |= HAL_SD_ERROR_TX_UNDERRUN;
 801fd68:	687b      	ldr	r3, [r7, #4]
 801fd6a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fd6c:	f043 0210 	orr.w	r2, r3, #16
 801fd70:	687b      	ldr	r3, [r7, #4]
 801fd72:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 801fd74:	687b      	ldr	r3, [r7, #4]
 801fd76:	681b      	ldr	r3, [r3, #0]
 801fd78:	4a4b      	ldr	r2, [pc, #300]	@ (801fea8 <HAL_SD_IRQHandler+0x36c>)
 801fd7a:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_DATAEND | SDMMC_IT_DCRCFAIL | SDMMC_IT_DTIMEOUT | \
 801fd7c:	687b      	ldr	r3, [r7, #4]
 801fd7e:	681b      	ldr	r3, [r3, #0]
 801fd80:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fd82:	687b      	ldr	r3, [r7, #4]
 801fd84:	681b      	ldr	r3, [r3, #0]
 801fd86:	f422 729d 	bic.w	r2, r2, #314	@ 0x13a
 801fd8a:	63da      	str	r2, [r3, #60]	@ 0x3c
    __SDMMC_CMDTRANS_DISABLE(hsd->Instance);
 801fd8c:	687b      	ldr	r3, [r7, #4]
 801fd8e:	681b      	ldr	r3, [r3, #0]
 801fd90:	68da      	ldr	r2, [r3, #12]
 801fd92:	687b      	ldr	r3, [r7, #4]
 801fd94:	681b      	ldr	r3, [r3, #0]
 801fd96:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 801fd9a:	60da      	str	r2, [r3, #12]
    hsd->Instance->DCTRL |= SDMMC_DCTRL_FIFORST;
 801fd9c:	687b      	ldr	r3, [r7, #4]
 801fd9e:	681b      	ldr	r3, [r3, #0]
 801fda0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801fda2:	687b      	ldr	r3, [r7, #4]
 801fda4:	681b      	ldr	r3, [r3, #0]
 801fda6:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 801fdaa:	62da      	str	r2, [r3, #44]	@ 0x2c
    hsd->Instance->CMD |= SDMMC_CMD_CMDSTOP;
 801fdac:	687b      	ldr	r3, [r7, #4]
 801fdae:	681b      	ldr	r3, [r3, #0]
 801fdb0:	68da      	ldr	r2, [r3, #12]
 801fdb2:	687b      	ldr	r3, [r7, #4]
 801fdb4:	681b      	ldr	r3, [r3, #0]
 801fdb6:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 801fdba:	60da      	str	r2, [r3, #12]
    hsd->ErrorCode |= SDMMC_CmdStopTransfer(hsd->Instance);
 801fdbc:	687b      	ldr	r3, [r7, #4]
 801fdbe:	681b      	ldr	r3, [r3, #0]
 801fdc0:	4618      	mov	r0, r3
 801fdc2:	f001 ff95 	bl	8021cf0 <SDMMC_CmdStopTransfer>
 801fdc6:	4602      	mov	r2, r0
 801fdc8:	687b      	ldr	r3, [r7, #4]
 801fdca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fdcc:	431a      	orrs	r2, r3
 801fdce:	687b      	ldr	r3, [r7, #4]
 801fdd0:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->Instance->CMD &= ~(SDMMC_CMD_CMDSTOP);
 801fdd2:	687b      	ldr	r3, [r7, #4]
 801fdd4:	681b      	ldr	r3, [r3, #0]
 801fdd6:	68da      	ldr	r2, [r3, #12]
 801fdd8:	687b      	ldr	r3, [r7, #4]
 801fdda:	681b      	ldr	r3, [r3, #0]
 801fddc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 801fde0:	60da      	str	r2, [r3, #12]
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DABORT);
 801fde2:	687b      	ldr	r3, [r7, #4]
 801fde4:	681b      	ldr	r3, [r3, #0]
 801fde6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801fdea:	639a      	str	r2, [r3, #56]	@ 0x38
    if ((context & SD_CONTEXT_IT) != 0U)
 801fdec:	68fb      	ldr	r3, [r7, #12]
 801fdee:	f003 0308 	and.w	r3, r3, #8
 801fdf2:	2b00      	cmp	r3, #0
 801fdf4:	d00a      	beq.n	801fe0c <HAL_SD_IRQHandler+0x2d0>
      hsd->State = HAL_SD_STATE_READY;
 801fdf6:	687b      	ldr	r3, [r7, #4]
 801fdf8:	2201      	movs	r2, #1
 801fdfa:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      hsd->Context = SD_CONTEXT_NONE;
 801fdfe:	687b      	ldr	r3, [r7, #4]
 801fe00:	2200      	movs	r2, #0
 801fe02:	62da      	str	r2, [r3, #44]	@ 0x2c
      HAL_SD_ErrorCallback(hsd);
 801fe04:	6878      	ldr	r0, [r7, #4]
 801fe06:	f000 f851 	bl	801feac <HAL_SD_ErrorCallback>
}
 801fe0a:	e049      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
    else if ((context & SD_CONTEXT_DMA) != 0U)
 801fe0c:	68fb      	ldr	r3, [r7, #12]
 801fe0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801fe12:	2b00      	cmp	r3, #0
 801fe14:	d044      	beq.n	801fea0 <HAL_SD_IRQHandler+0x364>
      if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 801fe16:	687b      	ldr	r3, [r7, #4]
 801fe18:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fe1a:	2b00      	cmp	r3, #0
 801fe1c:	d040      	beq.n	801fea0 <HAL_SD_IRQHandler+0x364>
        __HAL_SD_DISABLE_IT(hsd, SDMMC_IT_IDMABTC);
 801fe1e:	687b      	ldr	r3, [r7, #4]
 801fe20:	681b      	ldr	r3, [r3, #0]
 801fe22:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 801fe24:	687b      	ldr	r3, [r7, #4]
 801fe26:	681b      	ldr	r3, [r3, #0]
 801fe28:	f022 5280 	bic.w	r2, r2, #268435456	@ 0x10000000
 801fe2c:	63da      	str	r2, [r3, #60]	@ 0x3c
        hsd->Instance->IDMACTRL = SDMMC_DISABLE_IDMA;
 801fe2e:	687b      	ldr	r3, [r7, #4]
 801fe30:	681b      	ldr	r3, [r3, #0]
 801fe32:	2200      	movs	r2, #0
 801fe34:	651a      	str	r2, [r3, #80]	@ 0x50
        hsd->State = HAL_SD_STATE_READY;
 801fe36:	687b      	ldr	r3, [r7, #4]
 801fe38:	2201      	movs	r2, #1
 801fe3a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        HAL_SD_ErrorCallback(hsd);
 801fe3e:	6878      	ldr	r0, [r7, #4]
 801fe40:	f000 f834 	bl	801feac <HAL_SD_ErrorCallback>
}
 801fe44:	e02c      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_IDMABTC) != RESET)
 801fe46:	687b      	ldr	r3, [r7, #4]
 801fe48:	681b      	ldr	r3, [r3, #0]
 801fe4a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801fe4c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801fe50:	2b00      	cmp	r3, #0
 801fe52:	d025      	beq.n	801fea0 <HAL_SD_IRQHandler+0x364>
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_IDMABTC);
 801fe54:	687b      	ldr	r3, [r7, #4]
 801fe56:	681b      	ldr	r3, [r3, #0]
 801fe58:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801fe5c:	639a      	str	r2, [r3, #56]	@ 0x38
    if (READ_BIT(hsd->Instance->IDMACTRL, SDMMC_IDMA_IDMABACT) == 0U)
 801fe5e:	687b      	ldr	r3, [r7, #4]
 801fe60:	681b      	ldr	r3, [r3, #0]
 801fe62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 801fe64:	f003 0304 	and.w	r3, r3, #4
 801fe68:	2b00      	cmp	r3, #0
 801fe6a:	d10c      	bne.n	801fe86 <HAL_SD_IRQHandler+0x34a>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801fe6c:	68fb      	ldr	r3, [r7, #12]
 801fe6e:	f003 0320 	and.w	r3, r3, #32
 801fe72:	2b00      	cmp	r3, #0
 801fe74:	d003      	beq.n	801fe7e <HAL_SD_IRQHandler+0x342>
        HAL_SDEx_Write_DMADoubleBuf1CpltCallback(hsd);
 801fe76:	6878      	ldr	r0, [r7, #4]
 801fe78:	f001 f9b6 	bl	80211e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>
}
 801fe7c:	e010      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf1CpltCallback(hsd);
 801fe7e:	6878      	ldr	r0, [r7, #4]
 801fe80:	f001 f99e 	bl	80211c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>
}
 801fe84:	e00c      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
      if ((context & SD_CONTEXT_WRITE_MULTIPLE_BLOCK) != 0U)
 801fe86:	68fb      	ldr	r3, [r7, #12]
 801fe88:	f003 0320 	and.w	r3, r3, #32
 801fe8c:	2b00      	cmp	r3, #0
 801fe8e:	d003      	beq.n	801fe98 <HAL_SD_IRQHandler+0x35c>
        HAL_SDEx_Write_DMADoubleBuf0CpltCallback(hsd);
 801fe90:	6878      	ldr	r0, [r7, #4]
 801fe92:	f001 f99f 	bl	80211d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>
}
 801fe96:	e003      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
        HAL_SDEx_Read_DMADoubleBuf0CpltCallback(hsd);
 801fe98:	6878      	ldr	r0, [r7, #4]
 801fe9a:	f001 f987 	bl	80211ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>
}
 801fe9e:	e7ff      	b.n	801fea0 <HAL_SD_IRQHandler+0x364>
 801fea0:	bf00      	nop
 801fea2:	3710      	adds	r7, #16
 801fea4:	46bd      	mov	sp, r7
 801fea6:	bd80      	pop	{r7, pc}
 801fea8:	18000f3a 	.word	0x18000f3a

0801feac <HAL_SD_ErrorCallback>:
  * @brief SD error callbacks
  * @param hsd: Pointer SD handle
  * @retval None
  */
__weak void HAL_SD_ErrorCallback(SD_HandleTypeDef *hsd)
{
 801feac:	b480      	push	{r7}
 801feae:	b083      	sub	sp, #12
 801feb0:	af00      	add	r7, sp, #0
 801feb2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SD_ErrorCallback can be implemented in the user file
   */
}
 801feb4:	bf00      	nop
 801feb6:	370c      	adds	r7, #12
 801feb8:	46bd      	mov	sp, r7
 801feba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801febe:	4770      	bx	lr

0801fec0 <HAL_SD_GetCardCSD>:
  * @param  pCSD: Pointer to a HAL_SD_CardCSDTypeDef structure that
  *         contains all CSD register parameters
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardCSD(SD_HandleTypeDef *hsd, HAL_SD_CardCSDTypeDef *pCSD)
{
 801fec0:	b480      	push	{r7}
 801fec2:	b083      	sub	sp, #12
 801fec4:	af00      	add	r7, sp, #0
 801fec6:	6078      	str	r0, [r7, #4]
 801fec8:	6039      	str	r1, [r7, #0]
  pCSD->CSDStruct = (uint8_t)((hsd->CSD[0] & 0xC0000000U) >> 30U);
 801feca:	687b      	ldr	r3, [r7, #4]
 801fecc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fece:	0f9b      	lsrs	r3, r3, #30
 801fed0:	b2da      	uxtb	r2, r3
 801fed2:	683b      	ldr	r3, [r7, #0]
 801fed4:	701a      	strb	r2, [r3, #0]

  pCSD->SysSpecVersion = (uint8_t)((hsd->CSD[0] & 0x3C000000U) >> 26U);
 801fed6:	687b      	ldr	r3, [r7, #4]
 801fed8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801feda:	0e9b      	lsrs	r3, r3, #26
 801fedc:	b2db      	uxtb	r3, r3
 801fede:	f003 030f 	and.w	r3, r3, #15
 801fee2:	b2da      	uxtb	r2, r3
 801fee4:	683b      	ldr	r3, [r7, #0]
 801fee6:	705a      	strb	r2, [r3, #1]

  pCSD->Reserved1 = (uint8_t)((hsd->CSD[0] & 0x03000000U) >> 24U);
 801fee8:	687b      	ldr	r3, [r7, #4]
 801feea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801feec:	0e1b      	lsrs	r3, r3, #24
 801feee:	b2db      	uxtb	r3, r3
 801fef0:	f003 0303 	and.w	r3, r3, #3
 801fef4:	b2da      	uxtb	r2, r3
 801fef6:	683b      	ldr	r3, [r7, #0]
 801fef8:	709a      	strb	r2, [r3, #2]

  pCSD->TAAC = (uint8_t)((hsd->CSD[0] & 0x00FF0000U) >> 16U);
 801fefa:	687b      	ldr	r3, [r7, #4]
 801fefc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801fefe:	0c1b      	lsrs	r3, r3, #16
 801ff00:	b2da      	uxtb	r2, r3
 801ff02:	683b      	ldr	r3, [r7, #0]
 801ff04:	70da      	strb	r2, [r3, #3]

  pCSD->NSAC = (uint8_t)((hsd->CSD[0] & 0x0000FF00U) >> 8U);
 801ff06:	687b      	ldr	r3, [r7, #4]
 801ff08:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ff0a:	0a1b      	lsrs	r3, r3, #8
 801ff0c:	b2da      	uxtb	r2, r3
 801ff0e:	683b      	ldr	r3, [r7, #0]
 801ff10:	711a      	strb	r2, [r3, #4]

  pCSD->MaxBusClkFrec = (uint8_t)(hsd->CSD[0] & 0x000000FFU);
 801ff12:	687b      	ldr	r3, [r7, #4]
 801ff14:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801ff16:	b2da      	uxtb	r2, r3
 801ff18:	683b      	ldr	r3, [r7, #0]
 801ff1a:	715a      	strb	r2, [r3, #5]

  pCSD->CardComdClasses = (uint16_t)((hsd->CSD[1] & 0xFFF00000U) >> 20U);
 801ff1c:	687b      	ldr	r3, [r7, #4]
 801ff1e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff20:	0d1b      	lsrs	r3, r3, #20
 801ff22:	b29a      	uxth	r2, r3
 801ff24:	683b      	ldr	r3, [r7, #0]
 801ff26:	80da      	strh	r2, [r3, #6]

  pCSD->RdBlockLen = (uint8_t)((hsd->CSD[1] & 0x000F0000U) >> 16U);
 801ff28:	687b      	ldr	r3, [r7, #4]
 801ff2a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff2c:	0c1b      	lsrs	r3, r3, #16
 801ff2e:	b2db      	uxtb	r3, r3
 801ff30:	f003 030f 	and.w	r3, r3, #15
 801ff34:	b2da      	uxtb	r2, r3
 801ff36:	683b      	ldr	r3, [r7, #0]
 801ff38:	721a      	strb	r2, [r3, #8]

  pCSD->PartBlockRead   = (uint8_t)((hsd->CSD[1] & 0x00008000U) >> 15U);
 801ff3a:	687b      	ldr	r3, [r7, #4]
 801ff3c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff3e:	0bdb      	lsrs	r3, r3, #15
 801ff40:	b2db      	uxtb	r3, r3
 801ff42:	f003 0301 	and.w	r3, r3, #1
 801ff46:	b2da      	uxtb	r2, r3
 801ff48:	683b      	ldr	r3, [r7, #0]
 801ff4a:	725a      	strb	r2, [r3, #9]

  pCSD->WrBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00004000U) >> 14U);
 801ff4c:	687b      	ldr	r3, [r7, #4]
 801ff4e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff50:	0b9b      	lsrs	r3, r3, #14
 801ff52:	b2db      	uxtb	r3, r3
 801ff54:	f003 0301 	and.w	r3, r3, #1
 801ff58:	b2da      	uxtb	r2, r3
 801ff5a:	683b      	ldr	r3, [r7, #0]
 801ff5c:	729a      	strb	r2, [r3, #10]

  pCSD->RdBlockMisalign = (uint8_t)((hsd->CSD[1] & 0x00002000U) >> 13U);
 801ff5e:	687b      	ldr	r3, [r7, #4]
 801ff60:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff62:	0b5b      	lsrs	r3, r3, #13
 801ff64:	b2db      	uxtb	r3, r3
 801ff66:	f003 0301 	and.w	r3, r3, #1
 801ff6a:	b2da      	uxtb	r2, r3
 801ff6c:	683b      	ldr	r3, [r7, #0]
 801ff6e:	72da      	strb	r2, [r3, #11]

  pCSD->DSRImpl = (uint8_t)((hsd->CSD[1] & 0x00001000U) >> 12U);
 801ff70:	687b      	ldr	r3, [r7, #4]
 801ff72:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff74:	0b1b      	lsrs	r3, r3, #12
 801ff76:	b2db      	uxtb	r3, r3
 801ff78:	f003 0301 	and.w	r3, r3, #1
 801ff7c:	b2da      	uxtb	r2, r3
 801ff7e:	683b      	ldr	r3, [r7, #0]
 801ff80:	731a      	strb	r2, [r3, #12]

  pCSD->Reserved2 = 0U; /*!< Reserved */
 801ff82:	683b      	ldr	r3, [r7, #0]
 801ff84:	2200      	movs	r2, #0
 801ff86:	735a      	strb	r2, [r3, #13]

  if (hsd->SdCard.CardType == CARD_SDSC)
 801ff88:	687b      	ldr	r3, [r7, #4]
 801ff8a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801ff8c:	2b00      	cmp	r3, #0
 801ff8e:	d163      	bne.n	8020058 <HAL_SD_GetCardCSD+0x198>
  {
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x000003FFU) << 2U) | ((hsd->CSD[2] & 0xC0000000U) >> 30U));
 801ff90:	687b      	ldr	r3, [r7, #4]
 801ff92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801ff94:	009a      	lsls	r2, r3, #2
 801ff96:	f640 73fc 	movw	r3, #4092	@ 0xffc
 801ff9a:	4013      	ands	r3, r2
 801ff9c:	687a      	ldr	r2, [r7, #4]
 801ff9e:	6e52      	ldr	r2, [r2, #100]	@ 0x64
 801ffa0:	0f92      	lsrs	r2, r2, #30
 801ffa2:	431a      	orrs	r2, r3
 801ffa4:	683b      	ldr	r3, [r7, #0]
 801ffa6:	611a      	str	r2, [r3, #16]

    pCSD->MaxRdCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x38000000U) >> 27U);
 801ffa8:	687b      	ldr	r3, [r7, #4]
 801ffaa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffac:	0edb      	lsrs	r3, r3, #27
 801ffae:	b2db      	uxtb	r3, r3
 801ffb0:	f003 0307 	and.w	r3, r3, #7
 801ffb4:	b2da      	uxtb	r2, r3
 801ffb6:	683b      	ldr	r3, [r7, #0]
 801ffb8:	751a      	strb	r2, [r3, #20]

    pCSD->MaxRdCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x07000000U) >> 24U);
 801ffba:	687b      	ldr	r3, [r7, #4]
 801ffbc:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffbe:	0e1b      	lsrs	r3, r3, #24
 801ffc0:	b2db      	uxtb	r3, r3
 801ffc2:	f003 0307 	and.w	r3, r3, #7
 801ffc6:	b2da      	uxtb	r2, r3
 801ffc8:	683b      	ldr	r3, [r7, #0]
 801ffca:	755a      	strb	r2, [r3, #21]

    pCSD->MaxWrCurrentVDDMin = (uint8_t)((hsd->CSD[2] & 0x00E00000U) >> 21U);
 801ffcc:	687b      	ldr	r3, [r7, #4]
 801ffce:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffd0:	0d5b      	lsrs	r3, r3, #21
 801ffd2:	b2db      	uxtb	r3, r3
 801ffd4:	f003 0307 	and.w	r3, r3, #7
 801ffd8:	b2da      	uxtb	r2, r3
 801ffda:	683b      	ldr	r3, [r7, #0]
 801ffdc:	759a      	strb	r2, [r3, #22]

    pCSD->MaxWrCurrentVDDMax = (uint8_t)((hsd->CSD[2] & 0x001C0000U) >> 18U);
 801ffde:	687b      	ldr	r3, [r7, #4]
 801ffe0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801ffe2:	0c9b      	lsrs	r3, r3, #18
 801ffe4:	b2db      	uxtb	r3, r3
 801ffe6:	f003 0307 	and.w	r3, r3, #7
 801ffea:	b2da      	uxtb	r2, r3
 801ffec:	683b      	ldr	r3, [r7, #0]
 801ffee:	75da      	strb	r2, [r3, #23]

    pCSD->DeviceSizeMul = (uint8_t)((hsd->CSD[2] & 0x00038000U) >> 15U);
 801fff0:	687b      	ldr	r3, [r7, #4]
 801fff2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801fff4:	0bdb      	lsrs	r3, r3, #15
 801fff6:	b2db      	uxtb	r3, r3
 801fff8:	f003 0307 	and.w	r3, r3, #7
 801fffc:	b2da      	uxtb	r2, r3
 801fffe:	683b      	ldr	r3, [r7, #0]
 8020000:	761a      	strb	r2, [r3, #24]

    hsd->SdCard.BlockNbr  = (pCSD->DeviceSize + 1U) ;
 8020002:	683b      	ldr	r3, [r7, #0]
 8020004:	691b      	ldr	r3, [r3, #16]
 8020006:	1c5a      	adds	r2, r3, #1
 8020008:	687b      	ldr	r3, [r7, #4]
 802000a:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockNbr *= (1UL << ((pCSD->DeviceSizeMul & 0x07U) + 2U));
 802000c:	683b      	ldr	r3, [r7, #0]
 802000e:	7e1b      	ldrb	r3, [r3, #24]
 8020010:	b2db      	uxtb	r3, r3
 8020012:	f003 0307 	and.w	r3, r3, #7
 8020016:	3302      	adds	r3, #2
 8020018:	2201      	movs	r2, #1
 802001a:	fa02 f303 	lsl.w	r3, r2, r3
 802001e:	687a      	ldr	r2, [r7, #4]
 8020020:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8020022:	fb03 f202 	mul.w	r2, r3, r2
 8020026:	687b      	ldr	r3, [r7, #4]
 8020028:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.BlockSize = (1UL << (pCSD->RdBlockLen & 0x0FU));
 802002a:	683b      	ldr	r3, [r7, #0]
 802002c:	7a1b      	ldrb	r3, [r3, #8]
 802002e:	b2db      	uxtb	r3, r3
 8020030:	f003 030f 	and.w	r3, r3, #15
 8020034:	2201      	movs	r2, #1
 8020036:	409a      	lsls	r2, r3
 8020038:	687b      	ldr	r3, [r7, #4]
 802003a:	64da      	str	r2, [r3, #76]	@ 0x4c

    hsd->SdCard.LogBlockNbr = (hsd->SdCard.BlockNbr) * ((hsd->SdCard.BlockSize) / BLOCKSIZE);
 802003c:	687b      	ldr	r3, [r7, #4]
 802003e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8020040:	687a      	ldr	r2, [r7, #4]
 8020042:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8020044:	0a52      	lsrs	r2, r2, #9
 8020046:	fb03 f202 	mul.w	r2, r3, r2
 802004a:	687b      	ldr	r3, [r7, #4]
 802004c:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.LogBlockSize = BLOCKSIZE;
 802004e:	687b      	ldr	r3, [r7, #4]
 8020050:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020054:	655a      	str	r2, [r3, #84]	@ 0x54
 8020056:	e031      	b.n	80200bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else if (hsd->SdCard.CardType == CARD_SDHC_SDXC)
 8020058:	687b      	ldr	r3, [r7, #4]
 802005a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802005c:	2b01      	cmp	r3, #1
 802005e:	d11d      	bne.n	802009c <HAL_SD_GetCardCSD+0x1dc>
  {
    /* Byte 7 */
    pCSD->DeviceSize = (((hsd->CSD[1] & 0x0000003FU) << 16U) | ((hsd->CSD[2] & 0xFFFF0000U) >> 16U));
 8020060:	687b      	ldr	r3, [r7, #4]
 8020062:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8020064:	041b      	lsls	r3, r3, #16
 8020066:	f403 127c 	and.w	r2, r3, #4128768	@ 0x3f0000
 802006a:	687b      	ldr	r3, [r7, #4]
 802006c:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 802006e:	0c1b      	lsrs	r3, r3, #16
 8020070:	431a      	orrs	r2, r3
 8020072:	683b      	ldr	r3, [r7, #0]
 8020074:	611a      	str	r2, [r3, #16]

    hsd->SdCard.BlockNbr = ((pCSD->DeviceSize + 1U) * 1024U);
 8020076:	683b      	ldr	r3, [r7, #0]
 8020078:	691b      	ldr	r3, [r3, #16]
 802007a:	3301      	adds	r3, #1
 802007c:	029a      	lsls	r2, r3, #10
 802007e:	687b      	ldr	r3, [r7, #4]
 8020080:	649a      	str	r2, [r3, #72]	@ 0x48
    hsd->SdCard.LogBlockNbr = hsd->SdCard.BlockNbr;
 8020082:	687b      	ldr	r3, [r7, #4]
 8020084:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8020086:	687b      	ldr	r3, [r7, #4]
 8020088:	651a      	str	r2, [r3, #80]	@ 0x50
    hsd->SdCard.BlockSize = BLOCKSIZE;
 802008a:	687b      	ldr	r3, [r7, #4]
 802008c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8020090:	64da      	str	r2, [r3, #76]	@ 0x4c
    hsd->SdCard.LogBlockSize = hsd->SdCard.BlockSize;
 8020092:	687b      	ldr	r3, [r7, #4]
 8020094:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8020096:	687b      	ldr	r3, [r7, #4]
 8020098:	655a      	str	r2, [r3, #84]	@ 0x54
 802009a:	e00f      	b.n	80200bc <HAL_SD_GetCardCSD+0x1fc>
  }
  else
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802009c:	687b      	ldr	r3, [r7, #4]
 802009e:	681b      	ldr	r3, [r3, #0]
 80200a0:	4a58      	ldr	r2, [pc, #352]	@ (8020204 <HAL_SD_GetCardCSD+0x344>)
 80200a2:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80200a4:	687b      	ldr	r3, [r7, #4]
 80200a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80200a8:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80200ac:	687b      	ldr	r3, [r7, #4]
 80200ae:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 80200b0:	687b      	ldr	r3, [r7, #4]
 80200b2:	2201      	movs	r2, #1
 80200b4:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    return HAL_ERROR;
 80200b8:	2301      	movs	r3, #1
 80200ba:	e09d      	b.n	80201f8 <HAL_SD_GetCardCSD+0x338>
  }

  pCSD->EraseGrSize = (uint8_t)((hsd->CSD[2] & 0x00004000U) >> 14U);
 80200bc:	687b      	ldr	r3, [r7, #4]
 80200be:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80200c0:	0b9b      	lsrs	r3, r3, #14
 80200c2:	b2db      	uxtb	r3, r3
 80200c4:	f003 0301 	and.w	r3, r3, #1
 80200c8:	b2da      	uxtb	r2, r3
 80200ca:	683b      	ldr	r3, [r7, #0]
 80200cc:	765a      	strb	r2, [r3, #25]

  pCSD->EraseGrMul = (uint8_t)((hsd->CSD[2] & 0x00003F80U) >> 7U);
 80200ce:	687b      	ldr	r3, [r7, #4]
 80200d0:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80200d2:	09db      	lsrs	r3, r3, #7
 80200d4:	b2db      	uxtb	r3, r3
 80200d6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80200da:	b2da      	uxtb	r2, r3
 80200dc:	683b      	ldr	r3, [r7, #0]
 80200de:	769a      	strb	r2, [r3, #26]

  pCSD->WrProtectGrSize = (uint8_t)(hsd->CSD[2] & 0x0000007FU);
 80200e0:	687b      	ldr	r3, [r7, #4]
 80200e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80200e4:	b2db      	uxtb	r3, r3
 80200e6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80200ea:	b2da      	uxtb	r2, r3
 80200ec:	683b      	ldr	r3, [r7, #0]
 80200ee:	76da      	strb	r2, [r3, #27]

  pCSD->WrProtectGrEnable = (uint8_t)((hsd->CSD[3] & 0x80000000U) >> 31U);
 80200f0:	687b      	ldr	r3, [r7, #4]
 80200f2:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80200f4:	0fdb      	lsrs	r3, r3, #31
 80200f6:	b2da      	uxtb	r2, r3
 80200f8:	683b      	ldr	r3, [r7, #0]
 80200fa:	771a      	strb	r2, [r3, #28]

  pCSD->ManDeflECC = (uint8_t)((hsd->CSD[3] & 0x60000000U) >> 29U);
 80200fc:	687b      	ldr	r3, [r7, #4]
 80200fe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020100:	0f5b      	lsrs	r3, r3, #29
 8020102:	b2db      	uxtb	r3, r3
 8020104:	f003 0303 	and.w	r3, r3, #3
 8020108:	b2da      	uxtb	r2, r3
 802010a:	683b      	ldr	r3, [r7, #0]
 802010c:	775a      	strb	r2, [r3, #29]

  pCSD->WrSpeedFact = (uint8_t)((hsd->CSD[3] & 0x1C000000U) >> 26U);
 802010e:	687b      	ldr	r3, [r7, #4]
 8020110:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020112:	0e9b      	lsrs	r3, r3, #26
 8020114:	b2db      	uxtb	r3, r3
 8020116:	f003 0307 	and.w	r3, r3, #7
 802011a:	b2da      	uxtb	r2, r3
 802011c:	683b      	ldr	r3, [r7, #0]
 802011e:	779a      	strb	r2, [r3, #30]

  pCSD->MaxWrBlockLen = (uint8_t)((hsd->CSD[3] & 0x03C00000U) >> 22U);
 8020120:	687b      	ldr	r3, [r7, #4]
 8020122:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020124:	0d9b      	lsrs	r3, r3, #22
 8020126:	b2db      	uxtb	r3, r3
 8020128:	f003 030f 	and.w	r3, r3, #15
 802012c:	b2da      	uxtb	r2, r3
 802012e:	683b      	ldr	r3, [r7, #0]
 8020130:	77da      	strb	r2, [r3, #31]

  pCSD->WriteBlockPaPartial = (uint8_t)((hsd->CSD[3] & 0x00200000U) >> 21U);
 8020132:	687b      	ldr	r3, [r7, #4]
 8020134:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020136:	0d5b      	lsrs	r3, r3, #21
 8020138:	b2db      	uxtb	r3, r3
 802013a:	f003 0301 	and.w	r3, r3, #1
 802013e:	b2da      	uxtb	r2, r3
 8020140:	683b      	ldr	r3, [r7, #0]
 8020142:	f883 2020 	strb.w	r2, [r3, #32]

  pCSD->Reserved3 = 0;
 8020146:	683b      	ldr	r3, [r7, #0]
 8020148:	2200      	movs	r2, #0
 802014a:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  pCSD->ContentProtectAppli = (uint8_t)((hsd->CSD[3] & 0x00010000U) >> 16U);
 802014e:	687b      	ldr	r3, [r7, #4]
 8020150:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020152:	0c1b      	lsrs	r3, r3, #16
 8020154:	b2db      	uxtb	r3, r3
 8020156:	f003 0301 	and.w	r3, r3, #1
 802015a:	b2da      	uxtb	r2, r3
 802015c:	683b      	ldr	r3, [r7, #0]
 802015e:	f883 2022 	strb.w	r2, [r3, #34]	@ 0x22

  pCSD->FileFormatGroup = (uint8_t)((hsd->CSD[3] & 0x00008000U) >> 15U);
 8020162:	687b      	ldr	r3, [r7, #4]
 8020164:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8020166:	0bdb      	lsrs	r3, r3, #15
 8020168:	b2db      	uxtb	r3, r3
 802016a:	f003 0301 	and.w	r3, r3, #1
 802016e:	b2da      	uxtb	r2, r3
 8020170:	683b      	ldr	r3, [r7, #0]
 8020172:	f883 2023 	strb.w	r2, [r3, #35]	@ 0x23

  pCSD->CopyFlag = (uint8_t)((hsd->CSD[3] & 0x00004000U) >> 14U);
 8020176:	687b      	ldr	r3, [r7, #4]
 8020178:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802017a:	0b9b      	lsrs	r3, r3, #14
 802017c:	b2db      	uxtb	r3, r3
 802017e:	f003 0301 	and.w	r3, r3, #1
 8020182:	b2da      	uxtb	r2, r3
 8020184:	683b      	ldr	r3, [r7, #0]
 8020186:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  pCSD->PermWrProtect = (uint8_t)((hsd->CSD[3] & 0x00002000U) >> 13U);
 802018a:	687b      	ldr	r3, [r7, #4]
 802018c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 802018e:	0b5b      	lsrs	r3, r3, #13
 8020190:	b2db      	uxtb	r3, r3
 8020192:	f003 0301 	and.w	r3, r3, #1
 8020196:	b2da      	uxtb	r2, r3
 8020198:	683b      	ldr	r3, [r7, #0]
 802019a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  pCSD->TempWrProtect = (uint8_t)((hsd->CSD[3] & 0x00001000U) >> 12U);
 802019e:	687b      	ldr	r3, [r7, #4]
 80201a0:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80201a2:	0b1b      	lsrs	r3, r3, #12
 80201a4:	b2db      	uxtb	r3, r3
 80201a6:	f003 0301 	and.w	r3, r3, #1
 80201aa:	b2da      	uxtb	r2, r3
 80201ac:	683b      	ldr	r3, [r7, #0]
 80201ae:	f883 2026 	strb.w	r2, [r3, #38]	@ 0x26

  pCSD->FileFormat = (uint8_t)((hsd->CSD[3] & 0x00000C00U) >> 10U);
 80201b2:	687b      	ldr	r3, [r7, #4]
 80201b4:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80201b6:	0a9b      	lsrs	r3, r3, #10
 80201b8:	b2db      	uxtb	r3, r3
 80201ba:	f003 0303 	and.w	r3, r3, #3
 80201be:	b2da      	uxtb	r2, r3
 80201c0:	683b      	ldr	r3, [r7, #0]
 80201c2:	f883 2027 	strb.w	r2, [r3, #39]	@ 0x27

  pCSD->ECC = (uint8_t)((hsd->CSD[3] & 0x00000300U) >> 8U);
 80201c6:	687b      	ldr	r3, [r7, #4]
 80201c8:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80201ca:	0a1b      	lsrs	r3, r3, #8
 80201cc:	b2db      	uxtb	r3, r3
 80201ce:	f003 0303 	and.w	r3, r3, #3
 80201d2:	b2da      	uxtb	r2, r3
 80201d4:	683b      	ldr	r3, [r7, #0]
 80201d6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28

  pCSD->CSD_CRC = (uint8_t)((hsd->CSD[3] & 0x000000FEU) >> 1U);
 80201da:	687b      	ldr	r3, [r7, #4]
 80201dc:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80201de:	085b      	lsrs	r3, r3, #1
 80201e0:	b2db      	uxtb	r3, r3
 80201e2:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80201e6:	b2da      	uxtb	r2, r3
 80201e8:	683b      	ldr	r3, [r7, #0]
 80201ea:	f883 2029 	strb.w	r2, [r3, #41]	@ 0x29

  pCSD->Reserved4 = 1;
 80201ee:	683b      	ldr	r3, [r7, #0]
 80201f0:	2201      	movs	r2, #1
 80201f2:	f883 202a 	strb.w	r2, [r3, #42]	@ 0x2a

  return HAL_OK;
 80201f6:	2300      	movs	r3, #0
}
 80201f8:	4618      	mov	r0, r3
 80201fa:	370c      	adds	r7, #12
 80201fc:	46bd      	mov	sp, r7
 80201fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8020202:	4770      	bx	lr
 8020204:	1fe00fff 	.word	0x1fe00fff

08020208 <HAL_SD_GetCardStatus>:
  * @param  pStatus: Pointer to the HAL_SD_CardStatusTypeDef structure that
  *         will contain the SD card status information
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_GetCardStatus(SD_HandleTypeDef *hsd, HAL_SD_CardStatusTypeDef *pStatus)
{
 8020208:	b580      	push	{r7, lr}
 802020a:	b094      	sub	sp, #80	@ 0x50
 802020c:	af00      	add	r7, sp, #0
 802020e:	6078      	str	r0, [r7, #4]
 8020210:	6039      	str	r1, [r7, #0]
  uint32_t sd_status[16];
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 8020212:	2300      	movs	r3, #0
 8020214:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f

  if (hsd->State == HAL_SD_STATE_BUSY)
 8020218:	687b      	ldr	r3, [r7, #4]
 802021a:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 802021e:	b2db      	uxtb	r3, r3
 8020220:	2b03      	cmp	r3, #3
 8020222:	d101      	bne.n	8020228 <HAL_SD_GetCardStatus+0x20>
  {
    return HAL_ERROR;
 8020224:	2301      	movs	r3, #1
 8020226:	e0a7      	b.n	8020378 <HAL_SD_GetCardStatus+0x170>
  }

  errorstate = SD_SendSDStatus(hsd, sd_status);
 8020228:	f107 0308 	add.w	r3, r7, #8
 802022c:	4619      	mov	r1, r3
 802022e:	6878      	ldr	r0, [r7, #4]
 8020230:	f000 fc00 	bl	8020a34 <SD_SendSDStatus>
 8020234:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8020236:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020238:	2b00      	cmp	r3, #0
 802023a:	d011      	beq.n	8020260 <HAL_SD_GetCardStatus+0x58>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802023c:	687b      	ldr	r3, [r7, #4]
 802023e:	681b      	ldr	r3, [r3, #0]
 8020240:	4a4f      	ldr	r2, [pc, #316]	@ (8020380 <HAL_SD_GetCardStatus+0x178>)
 8020242:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8020244:	687b      	ldr	r3, [r7, #4]
 8020246:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020248:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 802024a:	431a      	orrs	r2, r3
 802024c:	687b      	ldr	r3, [r7, #4]
 802024e:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8020250:	687b      	ldr	r3, [r7, #4]
 8020252:	2201      	movs	r2, #1
 8020254:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 8020258:	2301      	movs	r3, #1
 802025a:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 802025e:	e070      	b.n	8020342 <HAL_SD_GetCardStatus+0x13a>
  }
  else
  {
    pStatus->DataBusWidth = (uint8_t)((sd_status[0] & 0xC0U) >> 6U);
 8020260:	68bb      	ldr	r3, [r7, #8]
 8020262:	099b      	lsrs	r3, r3, #6
 8020264:	b2db      	uxtb	r3, r3
 8020266:	f003 0303 	and.w	r3, r3, #3
 802026a:	b2da      	uxtb	r2, r3
 802026c:	683b      	ldr	r3, [r7, #0]
 802026e:	701a      	strb	r2, [r3, #0]

    pStatus->SecuredMode = (uint8_t)((sd_status[0] & 0x20U) >> 5U);
 8020270:	68bb      	ldr	r3, [r7, #8]
 8020272:	095b      	lsrs	r3, r3, #5
 8020274:	b2db      	uxtb	r3, r3
 8020276:	f003 0301 	and.w	r3, r3, #1
 802027a:	b2da      	uxtb	r2, r3
 802027c:	683b      	ldr	r3, [r7, #0]
 802027e:	705a      	strb	r2, [r3, #1]

    pStatus->CardType = (uint16_t)(((sd_status[0] & 0x00FF0000U) >> 8U) | ((sd_status[0] & 0xFF000000U) >> 24U));
 8020280:	68bb      	ldr	r3, [r7, #8]
 8020282:	0a1b      	lsrs	r3, r3, #8
 8020284:	b29b      	uxth	r3, r3
 8020286:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 802028a:	b29a      	uxth	r2, r3
 802028c:	68bb      	ldr	r3, [r7, #8]
 802028e:	0e1b      	lsrs	r3, r3, #24
 8020290:	b29b      	uxth	r3, r3
 8020292:	4313      	orrs	r3, r2
 8020294:	b29a      	uxth	r2, r3
 8020296:	683b      	ldr	r3, [r7, #0]
 8020298:	805a      	strh	r2, [r3, #2]

    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 802029a:	68fb      	ldr	r3, [r7, #12]
 802029c:	061a      	lsls	r2, r3, #24
 802029e:	68fb      	ldr	r3, [r7, #12]
 80202a0:	021b      	lsls	r3, r3, #8
 80202a2:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 80202a6:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80202a8:	68fb      	ldr	r3, [r7, #12]
 80202aa:	0a1b      	lsrs	r3, r3, #8
 80202ac:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80202b0:	431a      	orrs	r2, r3
                                  ((sd_status[1] & 0xFF0000U) >> 8U) | ((sd_status[1] & 0xFF000000U) >> 24U));
 80202b2:	68fb      	ldr	r3, [r7, #12]
 80202b4:	0e1b      	lsrs	r3, r3, #24
 80202b6:	431a      	orrs	r2, r3
    pStatus->ProtectedAreaSize = (((sd_status[1] & 0xFFU) << 24U)    | ((sd_status[1] & 0xFF00U) << 8U) |
 80202b8:	683b      	ldr	r3, [r7, #0]
 80202ba:	605a      	str	r2, [r3, #4]

    pStatus->SpeedClass = (uint8_t)(sd_status[2] & 0xFFU);
 80202bc:	693b      	ldr	r3, [r7, #16]
 80202be:	b2da      	uxtb	r2, r3
 80202c0:	683b      	ldr	r3, [r7, #0]
 80202c2:	721a      	strb	r2, [r3, #8]

    pStatus->PerformanceMove = (uint8_t)((sd_status[2] & 0xFF00U) >> 8U);
 80202c4:	693b      	ldr	r3, [r7, #16]
 80202c6:	0a1b      	lsrs	r3, r3, #8
 80202c8:	b2da      	uxtb	r2, r3
 80202ca:	683b      	ldr	r3, [r7, #0]
 80202cc:	725a      	strb	r2, [r3, #9]

    pStatus->AllocationUnitSize = (uint8_t)((sd_status[2] & 0xF00000U) >> 20U);
 80202ce:	693b      	ldr	r3, [r7, #16]
 80202d0:	0d1b      	lsrs	r3, r3, #20
 80202d2:	b2db      	uxtb	r3, r3
 80202d4:	f003 030f 	and.w	r3, r3, #15
 80202d8:	b2da      	uxtb	r2, r3
 80202da:	683b      	ldr	r3, [r7, #0]
 80202dc:	729a      	strb	r2, [r3, #10]

    pStatus->EraseSize = (uint16_t)(((sd_status[2] & 0xFF000000U) >> 16U) | (sd_status[3] & 0xFFU));
 80202de:	693b      	ldr	r3, [r7, #16]
 80202e0:	0c1b      	lsrs	r3, r3, #16
 80202e2:	b29b      	uxth	r3, r3
 80202e4:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80202e8:	b29a      	uxth	r2, r3
 80202ea:	697b      	ldr	r3, [r7, #20]
 80202ec:	b29b      	uxth	r3, r3
 80202ee:	b2db      	uxtb	r3, r3
 80202f0:	b29b      	uxth	r3, r3
 80202f2:	4313      	orrs	r3, r2
 80202f4:	b29a      	uxth	r2, r3
 80202f6:	683b      	ldr	r3, [r7, #0]
 80202f8:	819a      	strh	r2, [r3, #12]

    pStatus->EraseTimeout = (uint8_t)((sd_status[3] & 0xFC00U) >> 10U);
 80202fa:	697b      	ldr	r3, [r7, #20]
 80202fc:	0a9b      	lsrs	r3, r3, #10
 80202fe:	b2db      	uxtb	r3, r3
 8020300:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8020304:	b2da      	uxtb	r2, r3
 8020306:	683b      	ldr	r3, [r7, #0]
 8020308:	739a      	strb	r2, [r3, #14]

    pStatus->EraseOffset = (uint8_t)((sd_status[3] & 0x0300U) >> 8U);
 802030a:	697b      	ldr	r3, [r7, #20]
 802030c:	0a1b      	lsrs	r3, r3, #8
 802030e:	b2db      	uxtb	r3, r3
 8020310:	f003 0303 	and.w	r3, r3, #3
 8020314:	b2da      	uxtb	r2, r3
 8020316:	683b      	ldr	r3, [r7, #0]
 8020318:	73da      	strb	r2, [r3, #15]

    pStatus->UhsSpeedGrade = (uint8_t)((sd_status[3] & 0x00F0U) >> 4U);
 802031a:	697b      	ldr	r3, [r7, #20]
 802031c:	091b      	lsrs	r3, r3, #4
 802031e:	b2db      	uxtb	r3, r3
 8020320:	f003 030f 	and.w	r3, r3, #15
 8020324:	b2da      	uxtb	r2, r3
 8020326:	683b      	ldr	r3, [r7, #0]
 8020328:	741a      	strb	r2, [r3, #16]
    pStatus->UhsAllocationUnitSize = (uint8_t)(sd_status[3] & 0x000FU) ;
 802032a:	697b      	ldr	r3, [r7, #20]
 802032c:	b2db      	uxtb	r3, r3
 802032e:	f003 030f 	and.w	r3, r3, #15
 8020332:	b2da      	uxtb	r2, r3
 8020334:	683b      	ldr	r3, [r7, #0]
 8020336:	745a      	strb	r2, [r3, #17]
    pStatus->VideoSpeedClass = (uint8_t)((sd_status[4] & 0xFF000000U) >> 24U);
 8020338:	69bb      	ldr	r3, [r7, #24]
 802033a:	0e1b      	lsrs	r3, r3, #24
 802033c:	b2da      	uxtb	r2, r3
 802033e:	683b      	ldr	r3, [r7, #0]
 8020340:	749a      	strb	r2, [r3, #18]
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8020342:	687b      	ldr	r3, [r7, #4]
 8020344:	681b      	ldr	r3, [r3, #0]
 8020346:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802034a:	4618      	mov	r0, r3
 802034c:	f001 fbb8 	bl	8021ac0 <SDMMC_CmdBlockLength>
 8020350:	64b8      	str	r0, [r7, #72]	@ 0x48
  if (errorstate != HAL_SD_ERROR_NONE)
 8020352:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8020354:	2b00      	cmp	r3, #0
 8020356:	d00d      	beq.n	8020374 <HAL_SD_GetCardStatus+0x16c>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8020358:	687b      	ldr	r3, [r7, #4]
 802035a:	681b      	ldr	r3, [r3, #0]
 802035c:	4a08      	ldr	r2, [pc, #32]	@ (8020380 <HAL_SD_GetCardStatus+0x178>)
 802035e:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode = errorstate;
 8020360:	687b      	ldr	r3, [r7, #4]
 8020362:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8020364:	635a      	str	r2, [r3, #52]	@ 0x34
    hsd->State = HAL_SD_STATE_READY;
 8020366:	687b      	ldr	r3, [r7, #4]
 8020368:	2201      	movs	r2, #1
 802036a:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
    status = HAL_ERROR;
 802036e:	2301      	movs	r3, #1
 8020370:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
  }

  return status;
 8020374:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
}
 8020378:	4618      	mov	r0, r3
 802037a:	3750      	adds	r7, #80	@ 0x50
 802037c:	46bd      	mov	sp, r7
 802037e:	bd80      	pop	{r7, pc}
 8020380:	1fe00fff 	.word	0x1fe00fff

08020384 <HAL_SD_ConfigWideBusOperation>:
  *            @arg SDMMC_BUS_WIDE_4B: 4-bit data transfer
  *            @arg SDMMC_BUS_WIDE_1B: 1-bit data transfer
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SD_ConfigWideBusOperation(SD_HandleTypeDef *hsd, uint32_t WideMode)
{
 8020384:	b590      	push	{r4, r7, lr}
 8020386:	b08d      	sub	sp, #52	@ 0x34
 8020388:	af02      	add	r7, sp, #8
 802038a:	6078      	str	r0, [r7, #4]
 802038c:	6039      	str	r1, [r7, #0]
  SDMMC_InitTypeDef Init;
  uint32_t errorstate;
  uint32_t sdmmc_clk;

  HAL_StatusTypeDef status = HAL_OK;
 802038e:	2300      	movs	r3, #0
 8020390:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

  /* Check the parameters */
  assert_param(IS_SDMMC_BUS_WIDE(WideMode));

  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 8020394:	687b      	ldr	r3, [r7, #4]
 8020396:	2203      	movs	r2, #3
 8020398:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  if (hsd->SdCard.CardType != CARD_SECURED)
 802039c:	687b      	ldr	r3, [r7, #4]
 802039e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80203a0:	2b03      	cmp	r3, #3
 80203a2:	d02e      	beq.n	8020402 <HAL_SD_ConfigWideBusOperation+0x7e>
  {
    if (WideMode == SDMMC_BUS_WIDE_8B)
 80203a4:	683b      	ldr	r3, [r7, #0]
 80203a6:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80203aa:	d106      	bne.n	80203ba <HAL_SD_ConfigWideBusOperation+0x36>
    {
      hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80203ac:	687b      	ldr	r3, [r7, #4]
 80203ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203b0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 80203b4:	687b      	ldr	r3, [r7, #4]
 80203b6:	635a      	str	r2, [r3, #52]	@ 0x34
 80203b8:	e029      	b.n	802040e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_4B)
 80203ba:	683b      	ldr	r3, [r7, #0]
 80203bc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80203c0:	d10a      	bne.n	80203d8 <HAL_SD_ConfigWideBusOperation+0x54>
    {
      errorstate = SD_WideBus_Enable(hsd);
 80203c2:	6878      	ldr	r0, [r7, #4]
 80203c4:	f000 fc2e 	bl	8020c24 <SD_WideBus_Enable>
 80203c8:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80203ca:	687b      	ldr	r3, [r7, #4]
 80203cc:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80203ce:	6a3b      	ldr	r3, [r7, #32]
 80203d0:	431a      	orrs	r2, r3
 80203d2:	687b      	ldr	r3, [r7, #4]
 80203d4:	635a      	str	r2, [r3, #52]	@ 0x34
 80203d6:	e01a      	b.n	802040e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else if (WideMode == SDMMC_BUS_WIDE_1B)
 80203d8:	683b      	ldr	r3, [r7, #0]
 80203da:	2b00      	cmp	r3, #0
 80203dc:	d10a      	bne.n	80203f4 <HAL_SD_ConfigWideBusOperation+0x70>
    {
      errorstate = SD_WideBus_Disable(hsd);
 80203de:	6878      	ldr	r0, [r7, #4]
 80203e0:	f000 fc6b 	bl	8020cba <SD_WideBus_Disable>
 80203e4:	6238      	str	r0, [r7, #32]

      hsd->ErrorCode |= errorstate;
 80203e6:	687b      	ldr	r3, [r7, #4]
 80203e8:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80203ea:	6a3b      	ldr	r3, [r7, #32]
 80203ec:	431a      	orrs	r2, r3
 80203ee:	687b      	ldr	r3, [r7, #4]
 80203f0:	635a      	str	r2, [r3, #52]	@ 0x34
 80203f2:	e00c      	b.n	802040e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
    else
    {
      /* WideMode is not a valid argument*/
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 80203f4:	687b      	ldr	r3, [r7, #4]
 80203f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80203f8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80203fc:	687b      	ldr	r3, [r7, #4]
 80203fe:	635a      	str	r2, [r3, #52]	@ 0x34
 8020400:	e005      	b.n	802040e <HAL_SD_ConfigWideBusOperation+0x8a>
    }
  }
  else
  {
    /* SD Card does not support this feature */
    hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020402:	687b      	ldr	r3, [r7, #4]
 8020404:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020406:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 802040a:	687b      	ldr	r3, [r7, #4]
 802040c:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  if (hsd->ErrorCode != HAL_SD_ERROR_NONE)
 802040e:	687b      	ldr	r3, [r7, #4]
 8020410:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020412:	2b00      	cmp	r3, #0
 8020414:	d007      	beq.n	8020426 <HAL_SD_ConfigWideBusOperation+0xa2>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 8020416:	687b      	ldr	r3, [r7, #4]
 8020418:	681b      	ldr	r3, [r3, #0]
 802041a:	4a5f      	ldr	r2, [pc, #380]	@ (8020598 <HAL_SD_ConfigWideBusOperation+0x214>)
 802041c:	639a      	str	r2, [r3, #56]	@ 0x38
    status = HAL_ERROR;
 802041e:	2301      	movs	r3, #1
 8020420:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 8020424:	e096      	b.n	8020554 <HAL_SD_ConfigWideBusOperation+0x1d0>
  }
  else
  {
    sdmmc_clk     = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SDMMC);
 8020426:	f44f 3080 	mov.w	r0, #65536	@ 0x10000
 802042a:	f04f 0100 	mov.w	r1, #0
 802042e:	f7fc fa65 	bl	801c8fc <HAL_RCCEx_GetPeriphCLKFreq>
 8020432:	61f8      	str	r0, [r7, #28]
    if (sdmmc_clk != 0U)
 8020434:	69fb      	ldr	r3, [r7, #28]
 8020436:	2b00      	cmp	r3, #0
 8020438:	f000 8083 	beq.w	8020542 <HAL_SD_ConfigWideBusOperation+0x1be>
    {
      /* Configure the SDMMC peripheral */
      Init.ClockEdge           = hsd->Init.ClockEdge;
 802043c:	687b      	ldr	r3, [r7, #4]
 802043e:	685b      	ldr	r3, [r3, #4]
 8020440:	60bb      	str	r3, [r7, #8]
      Init.ClockPowerSave      = hsd->Init.ClockPowerSave;
 8020442:	687b      	ldr	r3, [r7, #4]
 8020444:	689b      	ldr	r3, [r3, #8]
 8020446:	60fb      	str	r3, [r7, #12]
      Init.BusWide             = WideMode;
 8020448:	683b      	ldr	r3, [r7, #0]
 802044a:	613b      	str	r3, [r7, #16]
      Init.HardwareFlowControl = hsd->Init.HardwareFlowControl;
 802044c:	687b      	ldr	r3, [r7, #4]
 802044e:	691b      	ldr	r3, [r3, #16]
 8020450:	617b      	str	r3, [r7, #20]

      /* Check if user Clock div < Normal speed 25Mhz, no change in Clockdiv */
      if (hsd->Init.ClockDiv >= (sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ)))
 8020452:	687b      	ldr	r3, [r7, #4]
 8020454:	695a      	ldr	r2, [r3, #20]
 8020456:	69fb      	ldr	r3, [r7, #28]
 8020458:	4950      	ldr	r1, [pc, #320]	@ (802059c <HAL_SD_ConfigWideBusOperation+0x218>)
 802045a:	fba1 1303 	umull	r1, r3, r1, r3
 802045e:	0e1b      	lsrs	r3, r3, #24
 8020460:	429a      	cmp	r2, r3
 8020462:	d303      	bcc.n	802046c <HAL_SD_ConfigWideBusOperation+0xe8>
      {
        Init.ClockDiv = hsd->Init.ClockDiv;
 8020464:	687b      	ldr	r3, [r7, #4]
 8020466:	695b      	ldr	r3, [r3, #20]
 8020468:	61bb      	str	r3, [r7, #24]
 802046a:	e05a      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_ULTRA_HIGH_SPEED)
 802046c:	687b      	ldr	r3, [r7, #4]
 802046e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020470:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8020474:	d103      	bne.n	802047e <HAL_SD_ConfigWideBusOperation+0xfa>
      {
        /* UltraHigh speed SD card,user Clock div */
        Init.ClockDiv = hsd->Init.ClockDiv;
 8020476:	687b      	ldr	r3, [r7, #4]
 8020478:	695b      	ldr	r3, [r3, #20]
 802047a:	61bb      	str	r3, [r7, #24]
 802047c:	e051      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
      }
      else if (hsd->SdCard.CardSpeed == CARD_HIGH_SPEED)
 802047e:	687b      	ldr	r3, [r7, #4]
 8020480:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020482:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020486:	d126      	bne.n	80204d6 <HAL_SD_ConfigWideBusOperation+0x152>
      {
        /* High speed SD card, Max Frequency = 50Mhz */
        if (hsd->Init.ClockDiv == 0U)
 8020488:	687b      	ldr	r3, [r7, #4]
 802048a:	695b      	ldr	r3, [r3, #20]
 802048c:	2b00      	cmp	r3, #0
 802048e:	d10e      	bne.n	80204ae <HAL_SD_ConfigWideBusOperation+0x12a>
        {
          if (sdmmc_clk > SD_HIGH_SPEED_FREQ)
 8020490:	69fb      	ldr	r3, [r7, #28]
 8020492:	4a43      	ldr	r2, [pc, #268]	@ (80205a0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 8020494:	4293      	cmp	r3, r2
 8020496:	d906      	bls.n	80204a6 <HAL_SD_ConfigWideBusOperation+0x122>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 8020498:	69fb      	ldr	r3, [r7, #28]
 802049a:	4a40      	ldr	r2, [pc, #256]	@ (802059c <HAL_SD_ConfigWideBusOperation+0x218>)
 802049c:	fba2 2303 	umull	r2, r3, r2, r3
 80204a0:	0e5b      	lsrs	r3, r3, #25
 80204a2:	61bb      	str	r3, [r7, #24]
 80204a4:	e03d      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80204a6:	687b      	ldr	r3, [r7, #4]
 80204a8:	695b      	ldr	r3, [r3, #20]
 80204aa:	61bb      	str	r3, [r7, #24]
 80204ac:	e039      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_HIGH_SPEED_FREQ)
 80204ae:	687b      	ldr	r3, [r7, #4]
 80204b0:	695b      	ldr	r3, [r3, #20]
 80204b2:	005b      	lsls	r3, r3, #1
 80204b4:	69fa      	ldr	r2, [r7, #28]
 80204b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80204ba:	4a39      	ldr	r2, [pc, #228]	@ (80205a0 <HAL_SD_ConfigWideBusOperation+0x21c>)
 80204bc:	4293      	cmp	r3, r2
 80204be:	d906      	bls.n	80204ce <HAL_SD_ConfigWideBusOperation+0x14a>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_HIGH_SPEED_FREQ);
 80204c0:	69fb      	ldr	r3, [r7, #28]
 80204c2:	4a36      	ldr	r2, [pc, #216]	@ (802059c <HAL_SD_ConfigWideBusOperation+0x218>)
 80204c4:	fba2 2303 	umull	r2, r3, r2, r3
 80204c8:	0e5b      	lsrs	r3, r3, #25
 80204ca:	61bb      	str	r3, [r7, #24]
 80204cc:	e029      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80204ce:	687b      	ldr	r3, [r7, #4]
 80204d0:	695b      	ldr	r3, [r3, #20]
 80204d2:	61bb      	str	r3, [r7, #24]
 80204d4:	e025      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
        }
      }
      else
      {
        /* No High speed SD card, Max Frequency = 25Mhz */
        if (hsd->Init.ClockDiv == 0U)
 80204d6:	687b      	ldr	r3, [r7, #4]
 80204d8:	695b      	ldr	r3, [r3, #20]
 80204da:	2b00      	cmp	r3, #0
 80204dc:	d10e      	bne.n	80204fc <HAL_SD_ConfigWideBusOperation+0x178>
        {
          if (sdmmc_clk > SD_NORMAL_SPEED_FREQ)
 80204de:	69fb      	ldr	r3, [r7, #28]
 80204e0:	4a30      	ldr	r2, [pc, #192]	@ (80205a4 <HAL_SD_ConfigWideBusOperation+0x220>)
 80204e2:	4293      	cmp	r3, r2
 80204e4:	d906      	bls.n	80204f4 <HAL_SD_ConfigWideBusOperation+0x170>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 80204e6:	69fb      	ldr	r3, [r7, #28]
 80204e8:	4a2c      	ldr	r2, [pc, #176]	@ (802059c <HAL_SD_ConfigWideBusOperation+0x218>)
 80204ea:	fba2 2303 	umull	r2, r3, r2, r3
 80204ee:	0e1b      	lsrs	r3, r3, #24
 80204f0:	61bb      	str	r3, [r7, #24]
 80204f2:	e016      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 80204f4:	687b      	ldr	r3, [r7, #4]
 80204f6:	695b      	ldr	r3, [r3, #20]
 80204f8:	61bb      	str	r3, [r7, #24]
 80204fa:	e012      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
        }
        else
        {
          if ((sdmmc_clk / (2U * hsd->Init.ClockDiv)) > SD_NORMAL_SPEED_FREQ)
 80204fc:	687b      	ldr	r3, [r7, #4]
 80204fe:	695b      	ldr	r3, [r3, #20]
 8020500:	005b      	lsls	r3, r3, #1
 8020502:	69fa      	ldr	r2, [r7, #28]
 8020504:	fbb2 f3f3 	udiv	r3, r2, r3
 8020508:	4a26      	ldr	r2, [pc, #152]	@ (80205a4 <HAL_SD_ConfigWideBusOperation+0x220>)
 802050a:	4293      	cmp	r3, r2
 802050c:	d906      	bls.n	802051c <HAL_SD_ConfigWideBusOperation+0x198>
          {
            Init.ClockDiv = sdmmc_clk / (2U * SD_NORMAL_SPEED_FREQ);
 802050e:	69fb      	ldr	r3, [r7, #28]
 8020510:	4a22      	ldr	r2, [pc, #136]	@ (802059c <HAL_SD_ConfigWideBusOperation+0x218>)
 8020512:	fba2 2303 	umull	r2, r3, r2, r3
 8020516:	0e1b      	lsrs	r3, r3, #24
 8020518:	61bb      	str	r3, [r7, #24]
 802051a:	e002      	b.n	8020522 <HAL_SD_ConfigWideBusOperation+0x19e>
          }
          else
          {
            Init.ClockDiv = hsd->Init.ClockDiv;
 802051c:	687b      	ldr	r3, [r7, #4]
 802051e:	695b      	ldr	r3, [r3, #20]
 8020520:	61bb      	str	r3, [r7, #24]

#if (USE_SD_TRANSCEIVER != 0U)
      Init.TranceiverPresent = hsd->Init.TranceiverPresent;
#endif /* USE_SD_TRANSCEIVER */

      (void)SDMMC_Init(hsd->Instance, Init);
 8020522:	687b      	ldr	r3, [r7, #4]
 8020524:	681c      	ldr	r4, [r3, #0]
 8020526:	466a      	mov	r2, sp
 8020528:	f107 0314 	add.w	r3, r7, #20
 802052c:	e893 0003 	ldmia.w	r3, {r0, r1}
 8020530:	e882 0003 	stmia.w	r2, {r0, r1}
 8020534:	f107 0308 	add.w	r3, r7, #8
 8020538:	cb0e      	ldmia	r3, {r1, r2, r3}
 802053a:	4620      	mov	r0, r4
 802053c:	f001 f9d2 	bl	80218e4 <SDMMC_Init>
 8020540:	e008      	b.n	8020554 <HAL_SD_ConfigWideBusOperation+0x1d0>
    }
    else
    {
      hsd->ErrorCode |= SDMMC_ERROR_INVALID_PARAMETER;
 8020542:	687b      	ldr	r3, [r7, #4]
 8020544:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020546:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 802054a:	687b      	ldr	r3, [r7, #4]
 802054c:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 802054e:	2301      	movs	r3, #1
 8020550:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 8020554:	687b      	ldr	r3, [r7, #4]
 8020556:	681b      	ldr	r3, [r3, #0]
 8020558:	f44f 7100 	mov.w	r1, #512	@ 0x200
 802055c:	4618      	mov	r0, r3
 802055e:	f001 faaf 	bl	8021ac0 <SDMMC_CmdBlockLength>
 8020562:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020564:	6a3b      	ldr	r3, [r7, #32]
 8020566:	2b00      	cmp	r3, #0
 8020568:	d00c      	beq.n	8020584 <HAL_SD_ConfigWideBusOperation+0x200>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 802056a:	687b      	ldr	r3, [r7, #4]
 802056c:	681b      	ldr	r3, [r3, #0]
 802056e:	4a0a      	ldr	r2, [pc, #40]	@ (8020598 <HAL_SD_ConfigWideBusOperation+0x214>)
 8020570:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 8020572:	687b      	ldr	r3, [r7, #4]
 8020574:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020576:	6a3b      	ldr	r3, [r7, #32]
 8020578:	431a      	orrs	r2, r3
 802057a:	687b      	ldr	r3, [r7, #4]
 802057c:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 802057e:	2301      	movs	r3, #1
 8020580:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8020584:	687b      	ldr	r3, [r7, #4]
 8020586:	2201      	movs	r2, #1
 8020588:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30

  return status;
 802058c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
}
 8020590:	4618      	mov	r0, r3
 8020592:	372c      	adds	r7, #44	@ 0x2c
 8020594:	46bd      	mov	sp, r7
 8020596:	bd90      	pop	{r4, r7, pc}
 8020598:	1fe00fff 	.word	0x1fe00fff
 802059c:	55e63b89 	.word	0x55e63b89
 80205a0:	02faf080 	.word	0x02faf080
 80205a4:	017d7840 	.word	0x017d7840

080205a8 <HAL_SD_ConfigSpeedBusOperation>:
  *            @arg SDMMC_SPEED_MODE_ULTRA: Ultra high speed mode
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_SD_ConfigSpeedBusOperation(SD_HandleTypeDef *hsd, uint32_t SpeedMode)
{
 80205a8:	b580      	push	{r7, lr}
 80205aa:	b086      	sub	sp, #24
 80205ac:	af00      	add	r7, sp, #0
 80205ae:	6078      	str	r0, [r7, #4]
 80205b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t errorstate;
  HAL_StatusTypeDef status = HAL_OK;
 80205b2:	2300      	movs	r3, #0
 80205b4:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_SDMMC_SPEED_MODE(SpeedMode));
  /* Change State */
  hsd->State = HAL_SD_STATE_BUSY;
 80205b6:	687b      	ldr	r3, [r7, #4]
 80205b8:	2203      	movs	r2, #3
 80205ba:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        status = HAL_ERROR;
        break;
    }
  }
#else
  switch (SpeedMode)
 80205be:	683b      	ldr	r3, [r7, #0]
 80205c0:	2b02      	cmp	r3, #2
 80205c2:	d027      	beq.n	8020614 <HAL_SD_ConfigSpeedBusOperation+0x6c>
 80205c4:	683b      	ldr	r3, [r7, #0]
 80205c6:	2b02      	cmp	r3, #2
 80205c8:	d85c      	bhi.n	8020684 <HAL_SD_ConfigSpeedBusOperation+0xdc>
 80205ca:	683b      	ldr	r3, [r7, #0]
 80205cc:	2b00      	cmp	r3, #0
 80205ce:	d003      	beq.n	80205d8 <HAL_SD_ConfigSpeedBusOperation+0x30>
 80205d0:	683b      	ldr	r3, [r7, #0]
 80205d2:	2b01      	cmp	r3, #1
 80205d4:	d046      	beq.n	8020664 <HAL_SD_ConfigSpeedBusOperation+0xbc>
 80205d6:	e055      	b.n	8020684 <HAL_SD_ConfigSpeedBusOperation+0xdc>
  {
    case SDMMC_SPEED_MODE_AUTO:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80205d8:	687b      	ldr	r3, [r7, #4]
 80205da:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80205dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80205e0:	d008      	beq.n	80205f4 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80205e2:	687b      	ldr	r3, [r7, #4]
 80205e4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 80205e6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80205ea:	d003      	beq.n	80205f4 <HAL_SD_ConfigSpeedBusOperation+0x4c>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 80205ec:	687b      	ldr	r3, [r7, #4]
 80205ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 80205f0:	2b01      	cmp	r3, #1
 80205f2:	d150      	bne.n	8020696 <HAL_SD_ConfigSpeedBusOperation+0xee>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 80205f4:	4947      	ldr	r1, [pc, #284]	@ (8020714 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 80205f6:	6878      	ldr	r0, [r7, #4]
 80205f8:	f000 fd0a 	bl	8021010 <SD_SwitchSpeed>
 80205fc:	4603      	mov	r3, r0
 80205fe:	2b00      	cmp	r3, #0
 8020600:	d049      	beq.n	8020696 <HAL_SD_ConfigSpeedBusOperation+0xee>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020602:	687b      	ldr	r3, [r7, #4]
 8020604:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020606:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 802060a:	687b      	ldr	r3, [r7, #4]
 802060c:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 802060e:	2301      	movs	r3, #1
 8020610:	75fb      	strb	r3, [r7, #23]
      }
      else
      {
        /*Nothing to do, Use defaultSpeed */
      }
      break;
 8020612:	e040      	b.n	8020696 <HAL_SD_ConfigSpeedBusOperation+0xee>
    }
    case SDMMC_SPEED_MODE_HIGH:
    {
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8020614:	687b      	ldr	r3, [r7, #4]
 8020616:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8020618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 802061c:	d008      	beq.n	8020630 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 802061e:	687b      	ldr	r3, [r7, #4]
 8020620:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
      if ((hsd->SdCard.CardSpeed  == CARD_ULTRA_HIGH_SPEED) ||
 8020622:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8020626:	d003      	beq.n	8020630 <HAL_SD_ConfigSpeedBusOperation+0x88>
          (hsd->SdCard.CardType == CARD_SDHC_SDXC))
 8020628:	687b      	ldr	r3, [r7, #4]
 802062a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
          (hsd->SdCard.CardSpeed  == CARD_HIGH_SPEED) ||
 802062c:	2b01      	cmp	r3, #1
 802062e:	d10f      	bne.n	8020650 <HAL_SD_ConfigSpeedBusOperation+0xa8>
      {
        /* Enable High Speed */
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8020630:	4938      	ldr	r1, [pc, #224]	@ (8020714 <HAL_SD_ConfigSpeedBusOperation+0x16c>)
 8020632:	6878      	ldr	r0, [r7, #4]
 8020634:	f000 fcec 	bl	8021010 <SD_SwitchSpeed>
 8020638:	4603      	mov	r3, r0
 802063a:	2b00      	cmp	r3, #0
 802063c:	d011      	beq.n	8020662 <HAL_SD_ConfigSpeedBusOperation+0xba>
        {
          hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 802063e:	687b      	ldr	r3, [r7, #4]
 8020640:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020642:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8020646:	687b      	ldr	r3, [r7, #4]
 8020648:	635a      	str	r2, [r3, #52]	@ 0x34
          status = HAL_ERROR;
 802064a:	2301      	movs	r3, #1
 802064c:	75fb      	strb	r3, [r7, #23]
        if (SD_SwitchSpeed(hsd, SDMMC_SDR25_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 802064e:	e008      	b.n	8020662 <HAL_SD_ConfigSpeedBusOperation+0xba>
        }
      }
      else
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020650:	687b      	ldr	r3, [r7, #4]
 8020652:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020654:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8020658:	687b      	ldr	r3, [r7, #4]
 802065a:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 802065c:	2301      	movs	r3, #1
 802065e:	75fb      	strb	r3, [r7, #23]
      }
      break;
 8020660:	e01c      	b.n	802069c <HAL_SD_ConfigSpeedBusOperation+0xf4>
 8020662:	e01b      	b.n	802069c <HAL_SD_ConfigSpeedBusOperation+0xf4>
    }
    case SDMMC_SPEED_MODE_DEFAULT:
    {
      /* Switch to default Speed */
      if (SD_SwitchSpeed(hsd, SDMMC_SDR12_SWITCH_PATTERN) != HAL_SD_ERROR_NONE)
 8020664:	492c      	ldr	r1, [pc, #176]	@ (8020718 <HAL_SD_ConfigSpeedBusOperation+0x170>)
 8020666:	6878      	ldr	r0, [r7, #4]
 8020668:	f000 fcd2 	bl	8021010 <SD_SwitchSpeed>
 802066c:	4603      	mov	r3, r0
 802066e:	2b00      	cmp	r3, #0
 8020670:	d013      	beq.n	802069a <HAL_SD_ConfigSpeedBusOperation+0xf2>
      {
        hsd->ErrorCode |= HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020672:	687b      	ldr	r3, [r7, #4]
 8020674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020676:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 802067a:	687b      	ldr	r3, [r7, #4]
 802067c:	635a      	str	r2, [r3, #52]	@ 0x34
        status = HAL_ERROR;
 802067e:	2301      	movs	r3, #1
 8020680:	75fb      	strb	r3, [r7, #23]
      }

      break;
 8020682:	e00a      	b.n	802069a <HAL_SD_ConfigSpeedBusOperation+0xf2>
    }
    case SDMMC_SPEED_MODE_ULTRA: /*not valid without transceiver*/
    default:
      hsd->ErrorCode |= HAL_SD_ERROR_PARAM;
 8020684:	687b      	ldr	r3, [r7, #4]
 8020686:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020688:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 802068c:	687b      	ldr	r3, [r7, #4]
 802068e:	635a      	str	r2, [r3, #52]	@ 0x34
      status = HAL_ERROR;
 8020690:	2301      	movs	r3, #1
 8020692:	75fb      	strb	r3, [r7, #23]
      break;
 8020694:	e002      	b.n	802069c <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 8020696:	bf00      	nop
 8020698:	e000      	b.n	802069c <HAL_SD_ConfigSpeedBusOperation+0xf4>
      break;
 802069a:	bf00      	nop
  }
#endif /* USE_SD_TRANSCEIVER */

  /* Verify that SD card is ready to use after Speed mode switch*/
  tickstart = HAL_GetTick();
 802069c:	f7f1 fd6e 	bl	801217c <HAL_GetTick>
 80206a0:	6138      	str	r0, [r7, #16]
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80206a2:	e011      	b.n	80206c8 <HAL_SD_ConfigSpeedBusOperation+0x120>
  {
    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 80206a4:	f7f1 fd6a 	bl	801217c <HAL_GetTick>
 80206a8:	4602      	mov	r2, r0
 80206aa:	693b      	ldr	r3, [r7, #16]
 80206ac:	1ad3      	subs	r3, r2, r3
 80206ae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80206b2:	d109      	bne.n	80206c8 <HAL_SD_ConfigSpeedBusOperation+0x120>
    {
      hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 80206b4:	687b      	ldr	r3, [r7, #4]
 80206b6:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80206ba:	635a      	str	r2, [r3, #52]	@ 0x34
      hsd->State = HAL_SD_STATE_READY;
 80206bc:	687b      	ldr	r3, [r7, #4]
 80206be:	2201      	movs	r2, #1
 80206c0:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
      return HAL_TIMEOUT;
 80206c4:	2303      	movs	r3, #3
 80206c6:	e021      	b.n	802070c <HAL_SD_ConfigSpeedBusOperation+0x164>
  while ((HAL_SD_GetCardState(hsd) != HAL_SD_CARD_TRANSFER))
 80206c8:	6878      	ldr	r0, [r7, #4]
 80206ca:	f000 f829 	bl	8020720 <HAL_SD_GetCardState>
 80206ce:	4603      	mov	r3, r0
 80206d0:	2b04      	cmp	r3, #4
 80206d2:	d1e7      	bne.n	80206a4 <HAL_SD_ConfigSpeedBusOperation+0xfc>
    }
  }

  /* Set Block Size for Card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, BLOCKSIZE);
 80206d4:	687b      	ldr	r3, [r7, #4]
 80206d6:	681b      	ldr	r3, [r3, #0]
 80206d8:	f44f 7100 	mov.w	r1, #512	@ 0x200
 80206dc:	4618      	mov	r0, r3
 80206de:	f001 f9ef 	bl	8021ac0 <SDMMC_CmdBlockLength>
 80206e2:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 80206e4:	68fb      	ldr	r3, [r7, #12]
 80206e6:	2b00      	cmp	r3, #0
 80206e8:	d00b      	beq.n	8020702 <HAL_SD_ConfigSpeedBusOperation+0x15a>
  {
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_FLAGS);
 80206ea:	687b      	ldr	r3, [r7, #4]
 80206ec:	681b      	ldr	r3, [r3, #0]
 80206ee:	4a0b      	ldr	r2, [pc, #44]	@ (802071c <HAL_SD_ConfigSpeedBusOperation+0x174>)
 80206f0:	639a      	str	r2, [r3, #56]	@ 0x38
    hsd->ErrorCode |= errorstate;
 80206f2:	687b      	ldr	r3, [r7, #4]
 80206f4:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80206f6:	68fb      	ldr	r3, [r7, #12]
 80206f8:	431a      	orrs	r2, r3
 80206fa:	687b      	ldr	r3, [r7, #4]
 80206fc:	635a      	str	r2, [r3, #52]	@ 0x34
    status = HAL_ERROR;
 80206fe:	2301      	movs	r3, #1
 8020700:	75fb      	strb	r3, [r7, #23]
  }

  /* Change State */
  hsd->State = HAL_SD_STATE_READY;
 8020702:	687b      	ldr	r3, [r7, #4]
 8020704:	2201      	movs	r2, #1
 8020706:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  return status;
 802070a:	7dfb      	ldrb	r3, [r7, #23]
}
 802070c:	4618      	mov	r0, r3
 802070e:	3718      	adds	r7, #24
 8020710:	46bd      	mov	sp, r7
 8020712:	bd80      	pop	{r7, pc}
 8020714:	80ffff01 	.word	0x80ffff01
 8020718:	80ffff00 	.word	0x80ffff00
 802071c:	1fe00fff 	.word	0x1fe00fff

08020720 <HAL_SD_GetCardState>:
  * @brief  Gets the current sd card data state.
  * @param  hsd: pointer to SD handle
  * @retval Card state
  */
HAL_SD_CardStateTypeDef HAL_SD_GetCardState(SD_HandleTypeDef *hsd)
{
 8020720:	b580      	push	{r7, lr}
 8020722:	b086      	sub	sp, #24
 8020724:	af00      	add	r7, sp, #0
 8020726:	6078      	str	r0, [r7, #4]
  uint32_t cardstate;
  uint32_t errorstate;
  uint32_t resp1 = 0;
 8020728:	2300      	movs	r3, #0
 802072a:	60fb      	str	r3, [r7, #12]

  errorstate = SD_SendStatus(hsd, &resp1);
 802072c:	f107 030c 	add.w	r3, r7, #12
 8020730:	4619      	mov	r1, r3
 8020732:	6878      	ldr	r0, [r7, #4]
 8020734:	f000 fa4e 	bl	8020bd4 <SD_SendStatus>
 8020738:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 802073a:	697b      	ldr	r3, [r7, #20]
 802073c:	2b00      	cmp	r3, #0
 802073e:	d005      	beq.n	802074c <HAL_SD_GetCardState+0x2c>
  {
    hsd->ErrorCode |= errorstate;
 8020740:	687b      	ldr	r3, [r7, #4]
 8020742:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020744:	697b      	ldr	r3, [r7, #20]
 8020746:	431a      	orrs	r2, r3
 8020748:	687b      	ldr	r3, [r7, #4]
 802074a:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  cardstate = ((resp1 >> 9U) & 0x0FU);
 802074c:	68fb      	ldr	r3, [r7, #12]
 802074e:	0a5b      	lsrs	r3, r3, #9
 8020750:	f003 030f 	and.w	r3, r3, #15
 8020754:	613b      	str	r3, [r7, #16]

  return (HAL_SD_CardStateTypeDef)cardstate;
 8020756:	693b      	ldr	r3, [r7, #16]
}
 8020758:	4618      	mov	r0, r3
 802075a:	3718      	adds	r7, #24
 802075c:	46bd      	mov	sp, r7
 802075e:	bd80      	pop	{r7, pc}

08020760 <SD_InitCard>:
  * @brief  Initializes the sd card.
  * @param  hsd: Pointer to SD handle
  * @retval SD Card error state
  */
static uint32_t SD_InitCard(SD_HandleTypeDef *hsd)
{
 8020760:	b580      	push	{r7, lr}
 8020762:	b090      	sub	sp, #64	@ 0x40
 8020764:	af00      	add	r7, sp, #0
 8020766:	6078      	str	r0, [r7, #4]
  HAL_SD_CardCSDTypeDef CSD;
  uint32_t errorstate;
  uint16_t sd_rca = 0U;
 8020768:	2300      	movs	r3, #0
 802076a:	817b      	strh	r3, [r7, #10]
  uint32_t tickstart = HAL_GetTick();
 802076c:	f7f1 fd06 	bl	801217c <HAL_GetTick>
 8020770:	63f8      	str	r0, [r7, #60]	@ 0x3c

  /* Check the power State */
  if (SDMMC_GetPowerState(hsd->Instance) == 0U)
 8020772:	687b      	ldr	r3, [r7, #4]
 8020774:	681b      	ldr	r3, [r3, #0]
 8020776:	4618      	mov	r0, r3
 8020778:	f001 f91e 	bl	80219b8 <SDMMC_GetPowerState>
 802077c:	4603      	mov	r3, r0
 802077e:	2b00      	cmp	r3, #0
 8020780:	d102      	bne.n	8020788 <SD_InitCard+0x28>
  {
    /* Power off */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8020782:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8020786:	e0b5      	b.n	80208f4 <SD_InitCard+0x194>
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 8020788:	687b      	ldr	r3, [r7, #4]
 802078a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 802078c:	2b03      	cmp	r3, #3
 802078e:	d02e      	beq.n	80207ee <SD_InitCard+0x8e>
  {
    /* Send CMD2 ALL_SEND_CID */
    errorstate = SDMMC_CmdSendCID(hsd->Instance);
 8020790:	687b      	ldr	r3, [r7, #4]
 8020792:	681b      	ldr	r3, [r3, #0]
 8020794:	4618      	mov	r0, r3
 8020796:	f001 fbd0 	bl	8021f3a <SDMMC_CmdSendCID>
 802079a:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 802079c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802079e:	2b00      	cmp	r3, #0
 80207a0:	d001      	beq.n	80207a6 <SD_InitCard+0x46>
    {
      return errorstate;
 80207a2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80207a4:	e0a6      	b.n	80208f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card identification number data */
      hsd->CID[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80207a6:	687b      	ldr	r3, [r7, #4]
 80207a8:	681b      	ldr	r3, [r3, #0]
 80207aa:	2100      	movs	r1, #0
 80207ac:	4618      	mov	r0, r3
 80207ae:	f001 f948 	bl	8021a42 <SDMMC_GetResponse>
 80207b2:	4602      	mov	r2, r0
 80207b4:	687b      	ldr	r3, [r7, #4]
 80207b6:	66da      	str	r2, [r3, #108]	@ 0x6c
      hsd->CID[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 80207b8:	687b      	ldr	r3, [r7, #4]
 80207ba:	681b      	ldr	r3, [r3, #0]
 80207bc:	2104      	movs	r1, #4
 80207be:	4618      	mov	r0, r3
 80207c0:	f001 f93f 	bl	8021a42 <SDMMC_GetResponse>
 80207c4:	4602      	mov	r2, r0
 80207c6:	687b      	ldr	r3, [r7, #4]
 80207c8:	671a      	str	r2, [r3, #112]	@ 0x70
      hsd->CID[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 80207ca:	687b      	ldr	r3, [r7, #4]
 80207cc:	681b      	ldr	r3, [r3, #0]
 80207ce:	2108      	movs	r1, #8
 80207d0:	4618      	mov	r0, r3
 80207d2:	f001 f936 	bl	8021a42 <SDMMC_GetResponse>
 80207d6:	4602      	mov	r2, r0
 80207d8:	687b      	ldr	r3, [r7, #4]
 80207da:	675a      	str	r2, [r3, #116]	@ 0x74
      hsd->CID[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 80207dc:	687b      	ldr	r3, [r7, #4]
 80207de:	681b      	ldr	r3, [r3, #0]
 80207e0:	210c      	movs	r1, #12
 80207e2:	4618      	mov	r0, r3
 80207e4:	f001 f92d 	bl	8021a42 <SDMMC_GetResponse>
 80207e8:	4602      	mov	r2, r0
 80207ea:	687b      	ldr	r3, [r7, #4]
 80207ec:	679a      	str	r2, [r3, #120]	@ 0x78
    }
  }

  if (hsd->SdCard.CardType != CARD_SECURED)
 80207ee:	687b      	ldr	r3, [r7, #4]
 80207f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80207f2:	2b03      	cmp	r3, #3
 80207f4:	d01d      	beq.n	8020832 <SD_InitCard+0xd2>
  {
    /* Send CMD3 SET_REL_ADDR with argument 0 */
    /* SD Card publishes its RCA. */
    while (sd_rca == 0U)
 80207f6:	e019      	b.n	802082c <SD_InitCard+0xcc>
    {
      errorstate = SDMMC_CmdSetRelAdd(hsd->Instance, &sd_rca);
 80207f8:	687b      	ldr	r3, [r7, #4]
 80207fa:	681b      	ldr	r3, [r3, #0]
 80207fc:	f107 020a 	add.w	r2, r7, #10
 8020800:	4611      	mov	r1, r2
 8020802:	4618      	mov	r0, r3
 8020804:	f001 fbd8 	bl	8021fb8 <SDMMC_CmdSetRelAdd>
 8020808:	63b8      	str	r0, [r7, #56]	@ 0x38
      if (errorstate != HAL_SD_ERROR_NONE)
 802080a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802080c:	2b00      	cmp	r3, #0
 802080e:	d001      	beq.n	8020814 <SD_InitCard+0xb4>
      {
        return errorstate;
 8020810:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020812:	e06f      	b.n	80208f4 <SD_InitCard+0x194>
      }
      if ((HAL_GetTick() - tickstart) >=  SDMMC_CMDTIMEOUT)
 8020814:	f7f1 fcb2 	bl	801217c <HAL_GetTick>
 8020818:	4602      	mov	r2, r0
 802081a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 802081c:	1ad3      	subs	r3, r2, r3
 802081e:	f241 3287 	movw	r2, #4999	@ 0x1387
 8020822:	4293      	cmp	r3, r2
 8020824:	d902      	bls.n	802082c <SD_InitCard+0xcc>
      {
        return HAL_SD_ERROR_TIMEOUT;
 8020826:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802082a:	e063      	b.n	80208f4 <SD_InitCard+0x194>
    while (sd_rca == 0U)
 802082c:	897b      	ldrh	r3, [r7, #10]
 802082e:	2b00      	cmp	r3, #0
 8020830:	d0e2      	beq.n	80207f8 <SD_InitCard+0x98>
      }
    }
  }
  if (hsd->SdCard.CardType != CARD_SECURED)
 8020832:	687b      	ldr	r3, [r7, #4]
 8020834:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8020836:	2b03      	cmp	r3, #3
 8020838:	d036      	beq.n	80208a8 <SD_InitCard+0x148>
  {
    /* Get the SD card RCA */
    hsd->SdCard.RelCardAdd = sd_rca;
 802083a:	897b      	ldrh	r3, [r7, #10]
 802083c:	461a      	mov	r2, r3
 802083e:	687b      	ldr	r3, [r7, #4]
 8020840:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Send CMD9 SEND_CSD with argument as card's RCA */
    errorstate = SDMMC_CmdSendCSD(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020842:	687b      	ldr	r3, [r7, #4]
 8020844:	681a      	ldr	r2, [r3, #0]
 8020846:	687b      	ldr	r3, [r7, #4]
 8020848:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 802084a:	041b      	lsls	r3, r3, #16
 802084c:	4619      	mov	r1, r3
 802084e:	4610      	mov	r0, r2
 8020850:	f001 fb92 	bl	8021f78 <SDMMC_CmdSendCSD>
 8020854:	63b8      	str	r0, [r7, #56]	@ 0x38
    if (errorstate != HAL_SD_ERROR_NONE)
 8020856:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8020858:	2b00      	cmp	r3, #0
 802085a:	d001      	beq.n	8020860 <SD_InitCard+0x100>
    {
      return errorstate;
 802085c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 802085e:	e049      	b.n	80208f4 <SD_InitCard+0x194>
    }
    else
    {
      /* Get Card Specific Data */
      hsd->CSD[0U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8020860:	687b      	ldr	r3, [r7, #4]
 8020862:	681b      	ldr	r3, [r3, #0]
 8020864:	2100      	movs	r1, #0
 8020866:	4618      	mov	r0, r3
 8020868:	f001 f8eb 	bl	8021a42 <SDMMC_GetResponse>
 802086c:	4602      	mov	r2, r0
 802086e:	687b      	ldr	r3, [r7, #4]
 8020870:	65da      	str	r2, [r3, #92]	@ 0x5c
      hsd->CSD[1U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2);
 8020872:	687b      	ldr	r3, [r7, #4]
 8020874:	681b      	ldr	r3, [r3, #0]
 8020876:	2104      	movs	r1, #4
 8020878:	4618      	mov	r0, r3
 802087a:	f001 f8e2 	bl	8021a42 <SDMMC_GetResponse>
 802087e:	4602      	mov	r2, r0
 8020880:	687b      	ldr	r3, [r7, #4]
 8020882:	661a      	str	r2, [r3, #96]	@ 0x60
      hsd->CSD[2U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP3);
 8020884:	687b      	ldr	r3, [r7, #4]
 8020886:	681b      	ldr	r3, [r3, #0]
 8020888:	2108      	movs	r1, #8
 802088a:	4618      	mov	r0, r3
 802088c:	f001 f8d9 	bl	8021a42 <SDMMC_GetResponse>
 8020890:	4602      	mov	r2, r0
 8020892:	687b      	ldr	r3, [r7, #4]
 8020894:	665a      	str	r2, [r3, #100]	@ 0x64
      hsd->CSD[3U] = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP4);
 8020896:	687b      	ldr	r3, [r7, #4]
 8020898:	681b      	ldr	r3, [r3, #0]
 802089a:	210c      	movs	r1, #12
 802089c:	4618      	mov	r0, r3
 802089e:	f001 f8d0 	bl	8021a42 <SDMMC_GetResponse>
 80208a2:	4602      	mov	r2, r0
 80208a4:	687b      	ldr	r3, [r7, #4]
 80208a6:	669a      	str	r2, [r3, #104]	@ 0x68
    }
  }

  /* Get the Card Class */
  hsd->SdCard.Class = (SDMMC_GetResponse(hsd->Instance, SDMMC_RESP2) >> 20U);
 80208a8:	687b      	ldr	r3, [r7, #4]
 80208aa:	681b      	ldr	r3, [r3, #0]
 80208ac:	2104      	movs	r1, #4
 80208ae:	4618      	mov	r0, r3
 80208b0:	f001 f8c7 	bl	8021a42 <SDMMC_GetResponse>
 80208b4:	4603      	mov	r3, r0
 80208b6:	0d1a      	lsrs	r2, r3, #20
 80208b8:	687b      	ldr	r3, [r7, #4]
 80208ba:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Get CSD parameters */
  if (HAL_SD_GetCardCSD(hsd, &CSD) != HAL_OK)
 80208bc:	f107 030c 	add.w	r3, r7, #12
 80208c0:	4619      	mov	r1, r3
 80208c2:	6878      	ldr	r0, [r7, #4]
 80208c4:	f7ff fafc 	bl	801fec0 <HAL_SD_GetCardCSD>
 80208c8:	4603      	mov	r3, r0
 80208ca:	2b00      	cmp	r3, #0
 80208cc:	d002      	beq.n	80208d4 <SD_InitCard+0x174>
  {
    return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80208ce:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80208d2:	e00f      	b.n	80208f4 <SD_InitCard+0x194>
  }

  /* Select the Card */
  errorstate = SDMMC_CmdSelDesel(hsd->Instance, (uint32_t)(((uint32_t)hsd->SdCard.RelCardAdd) << 16U));
 80208d4:	687b      	ldr	r3, [r7, #4]
 80208d6:	681a      	ldr	r2, [r3, #0]
 80208d8:	687b      	ldr	r3, [r7, #4]
 80208da:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80208dc:	041b      	lsls	r3, r3, #16
 80208de:	4619      	mov	r1, r3
 80208e0:	4610      	mov	r0, r2
 80208e2:	f001 fa41 	bl	8021d68 <SDMMC_CmdSelDesel>
 80208e6:	63b8      	str	r0, [r7, #56]	@ 0x38
  if (errorstate != HAL_SD_ERROR_NONE)
 80208e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208ea:	2b00      	cmp	r3, #0
 80208ec:	d001      	beq.n	80208f2 <SD_InitCard+0x192>
  {
    return errorstate;
 80208ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80208f0:	e000      	b.n	80208f4 <SD_InitCard+0x194>
  }

  /* All cards are initialized */
  return HAL_SD_ERROR_NONE;
 80208f2:	2300      	movs	r3, #0
}
 80208f4:	4618      	mov	r0, r3
 80208f6:	3740      	adds	r7, #64	@ 0x40
 80208f8:	46bd      	mov	sp, r7
 80208fa:	bd80      	pop	{r7, pc}

080208fc <SD_PowerON>:
  *         in the SD handle.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_PowerON(SD_HandleTypeDef *hsd)
{
 80208fc:	b580      	push	{r7, lr}
 80208fe:	b086      	sub	sp, #24
 8020900:	af00      	add	r7, sp, #0
 8020902:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8020904:	2300      	movs	r3, #0
 8020906:	60bb      	str	r3, [r7, #8]
  uint32_t response = 0U;
 8020908:	2300      	movs	r3, #0
 802090a:	617b      	str	r3, [r7, #20]
  uint32_t validvoltage = 0U;
 802090c:	2300      	movs	r3, #0
 802090e:	613b      	str	r3, [r7, #16]
#if (USE_SD_TRANSCEIVER != 0U)
  uint32_t tickstart = HAL_GetTick();
#endif /* USE_SD_TRANSCEIVER  */

  /* CMD0: GO_IDLE_STATE */
  errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8020910:	687b      	ldr	r3, [r7, #4]
 8020912:	681b      	ldr	r3, [r3, #0]
 8020914:	4618      	mov	r0, r3
 8020916:	f001 fa4a 	bl	8021dae <SDMMC_CmdGoIdleState>
 802091a:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 802091c:	68fb      	ldr	r3, [r7, #12]
 802091e:	2b00      	cmp	r3, #0
 8020920:	d001      	beq.n	8020926 <SD_PowerON+0x2a>
  {
    return errorstate;
 8020922:	68fb      	ldr	r3, [r7, #12]
 8020924:	e072      	b.n	8020a0c <SD_PowerON+0x110>
  }

  /* CMD8: SEND_IF_COND: Command available only on V2.0 cards */
  errorstate = SDMMC_CmdOperCond(hsd->Instance);
 8020926:	687b      	ldr	r3, [r7, #4]
 8020928:	681b      	ldr	r3, [r3, #0]
 802092a:	4618      	mov	r0, r3
 802092c:	f001 fa5d 	bl	8021dea <SDMMC_CmdOperCond>
 8020930:	60f8      	str	r0, [r7, #12]
  if (errorstate == SDMMC_ERROR_TIMEOUT) /* No response to CMD8 */
 8020932:	68fb      	ldr	r3, [r7, #12]
 8020934:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8020938:	d10d      	bne.n	8020956 <SD_PowerON+0x5a>
  {
    hsd->SdCard.CardVersion = CARD_V1_X;
 802093a:	687b      	ldr	r3, [r7, #4]
 802093c:	2200      	movs	r2, #0
 802093e:	63da      	str	r2, [r3, #60]	@ 0x3c
    /* CMD0: GO_IDLE_STATE */
    errorstate = SDMMC_CmdGoIdleState(hsd->Instance);
 8020940:	687b      	ldr	r3, [r7, #4]
 8020942:	681b      	ldr	r3, [r3, #0]
 8020944:	4618      	mov	r0, r3
 8020946:	f001 fa32 	bl	8021dae <SDMMC_CmdGoIdleState>
 802094a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 802094c:	68fb      	ldr	r3, [r7, #12]
 802094e:	2b00      	cmp	r3, #0
 8020950:	d004      	beq.n	802095c <SD_PowerON+0x60>
    {
      return errorstate;
 8020952:	68fb      	ldr	r3, [r7, #12]
 8020954:	e05a      	b.n	8020a0c <SD_PowerON+0x110>
    }

  }
  else
  {
    hsd->SdCard.CardVersion = CARD_V2_X;
 8020956:	687b      	ldr	r3, [r7, #4]
 8020958:	2201      	movs	r2, #1
 802095a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if (hsd->SdCard.CardVersion == CARD_V2_X)
 802095c:	687b      	ldr	r3, [r7, #4]
 802095e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8020960:	2b01      	cmp	r3, #1
 8020962:	d137      	bne.n	80209d4 <SD_PowerON+0xd8>
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 8020964:	687b      	ldr	r3, [r7, #4]
 8020966:	681b      	ldr	r3, [r3, #0]
 8020968:	2100      	movs	r1, #0
 802096a:	4618      	mov	r0, r3
 802096c:	f001 fa5d 	bl	8021e2a <SDMMC_CmdAppCommand>
 8020970:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020972:	68fb      	ldr	r3, [r7, #12]
 8020974:	2b00      	cmp	r3, #0
 8020976:	d02d      	beq.n	80209d4 <SD_PowerON+0xd8>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 8020978:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 802097c:	e046      	b.n	8020a0c <SD_PowerON+0x110>
  /* SD CARD */
  /* Send ACMD41 SD_APP_OP_COND with Argument 0x80100000 */
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
  {
    /* SEND CMD55 APP_CMD with RCA as 0 */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, 0);
 802097e:	687b      	ldr	r3, [r7, #4]
 8020980:	681b      	ldr	r3, [r3, #0]
 8020982:	2100      	movs	r1, #0
 8020984:	4618      	mov	r0, r3
 8020986:	f001 fa50 	bl	8021e2a <SDMMC_CmdAppCommand>
 802098a:	60f8      	str	r0, [r7, #12]
    if (errorstate != HAL_SD_ERROR_NONE)
 802098c:	68fb      	ldr	r3, [r7, #12]
 802098e:	2b00      	cmp	r3, #0
 8020990:	d001      	beq.n	8020996 <SD_PowerON+0x9a>
    {
      return errorstate;
 8020992:	68fb      	ldr	r3, [r7, #12]
 8020994:	e03a      	b.n	8020a0c <SD_PowerON+0x110>
    }

    /* Send CMD41 */
    errorstate = SDMMC_CmdAppOperCommand(hsd->Instance, SDMMC_VOLTAGE_WINDOW_SD | SDMMC_HIGH_CAPACITY |
 8020996:	687b      	ldr	r3, [r7, #4]
 8020998:	681b      	ldr	r3, [r3, #0]
 802099a:	491e      	ldr	r1, [pc, #120]	@ (8020a14 <SD_PowerON+0x118>)
 802099c:	4618      	mov	r0, r3
 802099e:	f001 fa67 	bl	8021e70 <SDMMC_CmdAppOperCommand>
 80209a2:	60f8      	str	r0, [r7, #12]
                                         SD_SWITCH_1_8V_CAPACITY);
    if (errorstate != HAL_SD_ERROR_NONE)
 80209a4:	68fb      	ldr	r3, [r7, #12]
 80209a6:	2b00      	cmp	r3, #0
 80209a8:	d002      	beq.n	80209b0 <SD_PowerON+0xb4>
    {
      return HAL_SD_ERROR_UNSUPPORTED_FEATURE;
 80209aa:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 80209ae:	e02d      	b.n	8020a0c <SD_PowerON+0x110>
    }

    /* Get command response */
    response = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 80209b0:	687b      	ldr	r3, [r7, #4]
 80209b2:	681b      	ldr	r3, [r3, #0]
 80209b4:	2100      	movs	r1, #0
 80209b6:	4618      	mov	r0, r3
 80209b8:	f001 f843 	bl	8021a42 <SDMMC_GetResponse>
 80209bc:	6178      	str	r0, [r7, #20]

    /* Get operating voltage*/
    validvoltage = (((response >> 31U) == 1U) ? 1U : 0U);
 80209be:	697b      	ldr	r3, [r7, #20]
 80209c0:	0fdb      	lsrs	r3, r3, #31
 80209c2:	2b01      	cmp	r3, #1
 80209c4:	d101      	bne.n	80209ca <SD_PowerON+0xce>
 80209c6:	2301      	movs	r3, #1
 80209c8:	e000      	b.n	80209cc <SD_PowerON+0xd0>
 80209ca:	2300      	movs	r3, #0
 80209cc:	613b      	str	r3, [r7, #16]

    count++;
 80209ce:	68bb      	ldr	r3, [r7, #8]
 80209d0:	3301      	adds	r3, #1
 80209d2:	60bb      	str	r3, [r7, #8]
  while ((count < SDMMC_MAX_VOLT_TRIAL) && (validvoltage == 0U))
 80209d4:	68bb      	ldr	r3, [r7, #8]
 80209d6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80209da:	4293      	cmp	r3, r2
 80209dc:	d802      	bhi.n	80209e4 <SD_PowerON+0xe8>
 80209de:	693b      	ldr	r3, [r7, #16]
 80209e0:	2b00      	cmp	r3, #0
 80209e2:	d0cc      	beq.n	802097e <SD_PowerON+0x82>
  }

  if (count >= SDMMC_MAX_VOLT_TRIAL)
 80209e4:	68bb      	ldr	r3, [r7, #8]
 80209e6:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 80209ea:	4293      	cmp	r3, r2
 80209ec:	d902      	bls.n	80209f4 <SD_PowerON+0xf8>
  {
    return HAL_SD_ERROR_INVALID_VOLTRANGE;
 80209ee:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80209f2:	e00b      	b.n	8020a0c <SD_PowerON+0x110>
  }

  /* Set default card type */
  hsd->SdCard.CardType = CARD_SDSC;
 80209f4:	687b      	ldr	r3, [r7, #4]
 80209f6:	2200      	movs	r2, #0
 80209f8:	639a      	str	r2, [r3, #56]	@ 0x38

  if ((response & SDMMC_HIGH_CAPACITY) == SDMMC_HIGH_CAPACITY)
 80209fa:	697b      	ldr	r3, [r7, #20]
 80209fc:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8020a00:	2b00      	cmp	r3, #0
 8020a02:	d002      	beq.n	8020a0a <SD_PowerON+0x10e>
  {
    hsd->SdCard.CardType = CARD_SDHC_SDXC;
 8020a04:	687b      	ldr	r3, [r7, #4]
 8020a06:	2201      	movs	r2, #1
 8020a08:	639a      	str	r2, [r3, #56]	@ 0x38
      }
    }
#endif /* USE_SD_TRANSCEIVER  */
  }

  return HAL_SD_ERROR_NONE;
 8020a0a:	2300      	movs	r3, #0
}
 8020a0c:	4618      	mov	r0, r3
 8020a0e:	3718      	adds	r7, #24
 8020a10:	46bd      	mov	sp, r7
 8020a12:	bd80      	pop	{r7, pc}
 8020a14:	c1100000 	.word	0xc1100000

08020a18 <SD_PowerOFF>:
  * @brief  Turns the SDMMC output signals off.
  * @param  hsd: Pointer to SD handle
  * @retval None
  */
static void SD_PowerOFF(SD_HandleTypeDef *hsd)
{
 8020a18:	b580      	push	{r7, lr}
 8020a1a:	b082      	sub	sp, #8
 8020a1c:	af00      	add	r7, sp, #0
 8020a1e:	6078      	str	r0, [r7, #4]
  /* Set Power State to OFF */
  (void)SDMMC_PowerState_OFF(hsd->Instance);
 8020a20:	687b      	ldr	r3, [r7, #4]
 8020a22:	681b      	ldr	r3, [r3, #0]
 8020a24:	4618      	mov	r0, r3
 8020a26:	f000 ffb6 	bl	8021996 <SDMMC_PowerState_OFF>
}
 8020a2a:	bf00      	nop
 8020a2c:	3708      	adds	r7, #8
 8020a2e:	46bd      	mov	sp, r7
 8020a30:	bd80      	pop	{r7, pc}
	...

08020a34 <SD_SendSDStatus>:
  * @param  pSDstatus: Pointer to the buffer that will contain the SD card status
  *         SD Status register)
  * @retval error state
  */
static uint32_t SD_SendSDStatus(SD_HandleTypeDef *hsd, uint32_t *pSDstatus)
{
 8020a34:	b580      	push	{r7, lr}
 8020a36:	b08c      	sub	sp, #48	@ 0x30
 8020a38:	af00      	add	r7, sp, #0
 8020a3a:	6078      	str	r0, [r7, #4]
 8020a3c:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8020a3e:	f7f1 fb9d 	bl	801217c <HAL_GetTick>
 8020a42:	6278      	str	r0, [r7, #36]	@ 0x24
  uint32_t count;
  uint32_t *pData = pSDstatus;
 8020a44:	683b      	ldr	r3, [r7, #0]
 8020a46:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check SD response */
  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8020a48:	687b      	ldr	r3, [r7, #4]
 8020a4a:	681b      	ldr	r3, [r3, #0]
 8020a4c:	2100      	movs	r1, #0
 8020a4e:	4618      	mov	r0, r3
 8020a50:	f000 fff7 	bl	8021a42 <SDMMC_GetResponse>
 8020a54:	4603      	mov	r3, r0
 8020a56:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020a5a:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020a5e:	d102      	bne.n	8020a66 <SD_SendSDStatus+0x32>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8020a60:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8020a64:	e0b0      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  }

  /* Set block size for card if it is not equal to current block size for card */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8020a66:	687b      	ldr	r3, [r7, #4]
 8020a68:	681b      	ldr	r3, [r3, #0]
 8020a6a:	2140      	movs	r1, #64	@ 0x40
 8020a6c:	4618      	mov	r0, r3
 8020a6e:	f001 f827 	bl	8021ac0 <SDMMC_CmdBlockLength>
 8020a72:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020a74:	6a3b      	ldr	r3, [r7, #32]
 8020a76:	2b00      	cmp	r3, #0
 8020a78:	d005      	beq.n	8020a86 <SD_SendSDStatus+0x52>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8020a7a:	687b      	ldr	r3, [r7, #4]
 8020a7c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020a7e:	687b      	ldr	r3, [r7, #4]
 8020a80:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8020a82:	6a3b      	ldr	r3, [r7, #32]
 8020a84:	e0a0      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  }

  /* Send CMD55 */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020a86:	687b      	ldr	r3, [r7, #4]
 8020a88:	681a      	ldr	r2, [r3, #0]
 8020a8a:	687b      	ldr	r3, [r7, #4]
 8020a8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020a8e:	041b      	lsls	r3, r3, #16
 8020a90:	4619      	mov	r1, r3
 8020a92:	4610      	mov	r0, r2
 8020a94:	f001 f9c9 	bl	8021e2a <SDMMC_CmdAppCommand>
 8020a98:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020a9a:	6a3b      	ldr	r3, [r7, #32]
 8020a9c:	2b00      	cmp	r3, #0
 8020a9e:	d005      	beq.n	8020aac <SD_SendSDStatus+0x78>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8020aa0:	687b      	ldr	r3, [r7, #4]
 8020aa2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020aa4:	687b      	ldr	r3, [r7, #4]
 8020aa6:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8020aa8:	6a3b      	ldr	r3, [r7, #32]
 8020aaa:	e08d      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  }

  /* Configure the SD DPSM (Data Path State Machine) */
  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8020aac:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020ab0:	60bb      	str	r3, [r7, #8]
  config.DataLength    = 64U;
 8020ab2:	2340      	movs	r3, #64	@ 0x40
 8020ab4:	60fb      	str	r3, [r7, #12]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B;
 8020ab6:	2360      	movs	r3, #96	@ 0x60
 8020ab8:	613b      	str	r3, [r7, #16]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8020aba:	2302      	movs	r3, #2
 8020abc:	617b      	str	r3, [r7, #20]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8020abe:	2300      	movs	r3, #0
 8020ac0:	61bb      	str	r3, [r7, #24]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8020ac2:	2301      	movs	r3, #1
 8020ac4:	61fb      	str	r3, [r7, #28]
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8020ac6:	687b      	ldr	r3, [r7, #4]
 8020ac8:	681b      	ldr	r3, [r3, #0]
 8020aca:	f107 0208 	add.w	r2, r7, #8
 8020ace:	4611      	mov	r1, r2
 8020ad0:	4618      	mov	r0, r3
 8020ad2:	f000 ffc9 	bl	8021a68 <SDMMC_ConfigData>

  /* Send ACMD13 (SD_APP_STAUS)  with argument as card's RCA */
  errorstate = SDMMC_CmdStatusRegister(hsd->Instance);
 8020ad6:	687b      	ldr	r3, [r7, #4]
 8020ad8:	681b      	ldr	r3, [r3, #0]
 8020ada:	4618      	mov	r0, r3
 8020adc:	f001 fab1 	bl	8022042 <SDMMC_CmdStatusRegister>
 8020ae0:	6238      	str	r0, [r7, #32]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020ae2:	6a3b      	ldr	r3, [r7, #32]
 8020ae4:	2b00      	cmp	r3, #0
 8020ae6:	d02b      	beq.n	8020b40 <SD_SendSDStatus+0x10c>
  {
    hsd->ErrorCode |= HAL_SD_ERROR_NONE;
 8020ae8:	687b      	ldr	r3, [r7, #4]
 8020aea:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020aec:	687b      	ldr	r3, [r7, #4]
 8020aee:	635a      	str	r2, [r3, #52]	@ 0x34
    return errorstate;
 8020af0:	6a3b      	ldr	r3, [r7, #32]
 8020af2:	e069      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  }

  /* Get status data */
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
  {
    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 8020af4:	687b      	ldr	r3, [r7, #4]
 8020af6:	681b      	ldr	r3, [r3, #0]
 8020af8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020afa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8020afe:	2b00      	cmp	r3, #0
 8020b00:	d013      	beq.n	8020b2a <SD_SendSDStatus+0xf6>
    {
      for (count = 0U; count < 8U; count++)
 8020b02:	2300      	movs	r3, #0
 8020b04:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020b06:	e00d      	b.n	8020b24 <SD_SendSDStatus+0xf0>
      {
        *pData = SDMMC_ReadFIFO(hsd->Instance);
 8020b08:	687b      	ldr	r3, [r7, #4]
 8020b0a:	681b      	ldr	r3, [r3, #0]
 8020b0c:	4618      	mov	r0, r3
 8020b0e:	f000 ff13 	bl	8021938 <SDMMC_ReadFIFO>
 8020b12:	4602      	mov	r2, r0
 8020b14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b16:	601a      	str	r2, [r3, #0]
        pData++;
 8020b18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b1a:	3304      	adds	r3, #4
 8020b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
      for (count = 0U; count < 8U; count++)
 8020b1e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020b20:	3301      	adds	r3, #1
 8020b22:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8020b24:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020b26:	2b07      	cmp	r3, #7
 8020b28:	d9ee      	bls.n	8020b08 <SD_SendSDStatus+0xd4>
      }
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8020b2a:	f7f1 fb27 	bl	801217c <HAL_GetTick>
 8020b2e:	4602      	mov	r2, r0
 8020b30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020b32:	1ad3      	subs	r3, r2, r3
 8020b34:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020b38:	d102      	bne.n	8020b40 <SD_SendSDStatus+0x10c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8020b3a:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8020b3e:	e043      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DATAEND))
 8020b40:	687b      	ldr	r3, [r7, #4]
 8020b42:	681b      	ldr	r3, [r3, #0]
 8020b44:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020b46:	f403 7395 	and.w	r3, r3, #298	@ 0x12a
 8020b4a:	2b00      	cmp	r3, #0
 8020b4c:	d0d2      	beq.n	8020af4 <SD_SendSDStatus+0xc0>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8020b4e:	687b      	ldr	r3, [r7, #4]
 8020b50:	681b      	ldr	r3, [r3, #0]
 8020b52:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020b54:	f003 0308 	and.w	r3, r3, #8
 8020b58:	2b00      	cmp	r3, #0
 8020b5a:	d001      	beq.n	8020b60 <SD_SendSDStatus+0x12c>
  {
    return HAL_SD_ERROR_DATA_TIMEOUT;
 8020b5c:	2308      	movs	r3, #8
 8020b5e:	e033      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8020b60:	687b      	ldr	r3, [r7, #4]
 8020b62:	681b      	ldr	r3, [r3, #0]
 8020b64:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020b66:	f003 0302 	and.w	r3, r3, #2
 8020b6a:	2b00      	cmp	r3, #0
 8020b6c:	d001      	beq.n	8020b72 <SD_SendSDStatus+0x13e>
  {
    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8020b6e:	2302      	movs	r3, #2
 8020b70:	e02a      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8020b72:	687b      	ldr	r3, [r7, #4]
 8020b74:	681b      	ldr	r3, [r3, #0]
 8020b76:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020b78:	f003 0320 	and.w	r3, r3, #32
 8020b7c:	2b00      	cmp	r3, #0
 8020b7e:	d017      	beq.n	8020bb0 <SD_SendSDStatus+0x17c>
  {
    return HAL_SD_ERROR_RX_OVERRUN;
 8020b80:	2320      	movs	r3, #32
 8020b82:	e021      	b.n	8020bc8 <SD_SendSDStatus+0x194>
    /* Nothing to do */
  }

  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
  {
    *pData = SDMMC_ReadFIFO(hsd->Instance);
 8020b84:	687b      	ldr	r3, [r7, #4]
 8020b86:	681b      	ldr	r3, [r3, #0]
 8020b88:	4618      	mov	r0, r3
 8020b8a:	f000 fed5 	bl	8021938 <SDMMC_ReadFIFO>
 8020b8e:	4602      	mov	r2, r0
 8020b90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b92:	601a      	str	r2, [r3, #0]
    pData++;
 8020b94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020b96:	3304      	adds	r3, #4
 8020b98:	62bb      	str	r3, [r7, #40]	@ 0x28

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8020b9a:	f7f1 faef 	bl	801217c <HAL_GetTick>
 8020b9e:	4602      	mov	r2, r0
 8020ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8020ba2:	1ad3      	subs	r3, r2, r3
 8020ba4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020ba8:	d102      	bne.n	8020bb0 <SD_SendSDStatus+0x17c>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8020baa:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8020bae:	e00b      	b.n	8020bc8 <SD_SendSDStatus+0x194>
  while ((__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DPSMACT)))
 8020bb0:	687b      	ldr	r3, [r7, #4]
 8020bb2:	681b      	ldr	r3, [r3, #0]
 8020bb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020bb6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8020bba:	2b00      	cmp	r3, #0
 8020bbc:	d1e2      	bne.n	8020b84 <SD_SendSDStatus+0x150>
    }
  }

  /* Clear all the static status flags*/
  __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8020bbe:	687b      	ldr	r3, [r7, #4]
 8020bc0:	681b      	ldr	r3, [r3, #0]
 8020bc2:	4a03      	ldr	r2, [pc, #12]	@ (8020bd0 <SD_SendSDStatus+0x19c>)
 8020bc4:	639a      	str	r2, [r3, #56]	@ 0x38

  return HAL_SD_ERROR_NONE;
 8020bc6:	2300      	movs	r3, #0
}
 8020bc8:	4618      	mov	r0, r3
 8020bca:	3730      	adds	r7, #48	@ 0x30
 8020bcc:	46bd      	mov	sp, r7
 8020bce:	bd80      	pop	{r7, pc}
 8020bd0:	18000f3a 	.word	0x18000f3a

08020bd4 <SD_SendStatus>:
  * @param  pCardStatus: pointer to the buffer that will contain the SD card
  *         status (Card Status register)
  * @retval error state
  */
static uint32_t SD_SendStatus(SD_HandleTypeDef *hsd, uint32_t *pCardStatus)
{
 8020bd4:	b580      	push	{r7, lr}
 8020bd6:	b084      	sub	sp, #16
 8020bd8:	af00      	add	r7, sp, #0
 8020bda:	6078      	str	r0, [r7, #4]
 8020bdc:	6039      	str	r1, [r7, #0]
  uint32_t errorstate;

  if (pCardStatus == NULL)
 8020bde:	683b      	ldr	r3, [r7, #0]
 8020be0:	2b00      	cmp	r3, #0
 8020be2:	d102      	bne.n	8020bea <SD_SendStatus+0x16>
  {
    return HAL_SD_ERROR_PARAM;
 8020be4:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8020be8:	e018      	b.n	8020c1c <SD_SendStatus+0x48>
  }

  /* Send Status command */
  errorstate = SDMMC_CmdSendStatus(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020bea:	687b      	ldr	r3, [r7, #4]
 8020bec:	681a      	ldr	r2, [r3, #0]
 8020bee:	687b      	ldr	r3, [r7, #4]
 8020bf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020bf2:	041b      	lsls	r3, r3, #16
 8020bf4:	4619      	mov	r1, r3
 8020bf6:	4610      	mov	r0, r2
 8020bf8:	f001 fa00 	bl	8021ffc <SDMMC_CmdSendStatus>
 8020bfc:	60f8      	str	r0, [r7, #12]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020bfe:	68fb      	ldr	r3, [r7, #12]
 8020c00:	2b00      	cmp	r3, #0
 8020c02:	d001      	beq.n	8020c08 <SD_SendStatus+0x34>
  {
    return errorstate;
 8020c04:	68fb      	ldr	r3, [r7, #12]
 8020c06:	e009      	b.n	8020c1c <SD_SendStatus+0x48>
  }

  /* Get SD card status */
  *pCardStatus = SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1);
 8020c08:	687b      	ldr	r3, [r7, #4]
 8020c0a:	681b      	ldr	r3, [r3, #0]
 8020c0c:	2100      	movs	r1, #0
 8020c0e:	4618      	mov	r0, r3
 8020c10:	f000 ff17 	bl	8021a42 <SDMMC_GetResponse>
 8020c14:	4602      	mov	r2, r0
 8020c16:	683b      	ldr	r3, [r7, #0]
 8020c18:	601a      	str	r2, [r3, #0]

  return HAL_SD_ERROR_NONE;
 8020c1a:	2300      	movs	r3, #0
}
 8020c1c:	4618      	mov	r0, r3
 8020c1e:	3710      	adds	r7, #16
 8020c20:	46bd      	mov	sp, r7
 8020c22:	bd80      	pop	{r7, pc}

08020c24 <SD_WideBus_Enable>:
  * @brief  Enables the SDMMC wide bus mode.
  * @param  hsd: pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Enable(SD_HandleTypeDef *hsd)
{
 8020c24:	b580      	push	{r7, lr}
 8020c26:	b086      	sub	sp, #24
 8020c28:	af00      	add	r7, sp, #0
 8020c2a:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8020c2c:	2300      	movs	r3, #0
 8020c2e:	60fb      	str	r3, [r7, #12]
 8020c30:	2300      	movs	r3, #0
 8020c32:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8020c34:	687b      	ldr	r3, [r7, #4]
 8020c36:	681b      	ldr	r3, [r3, #0]
 8020c38:	2100      	movs	r1, #0
 8020c3a:	4618      	mov	r0, r3
 8020c3c:	f000 ff01 	bl	8021a42 <SDMMC_GetResponse>
 8020c40:	4603      	mov	r3, r0
 8020c42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020c46:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020c4a:	d102      	bne.n	8020c52 <SD_WideBus_Enable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8020c4c:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8020c50:	e02f      	b.n	8020cb2 <SD_WideBus_Enable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8020c52:	f107 030c 	add.w	r3, r7, #12
 8020c56:	4619      	mov	r1, r3
 8020c58:	6878      	ldr	r0, [r7, #4]
 8020c5a:	f000 f879 	bl	8020d50 <SD_FindSCR>
 8020c5e:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020c60:	697b      	ldr	r3, [r7, #20]
 8020c62:	2b00      	cmp	r3, #0
 8020c64:	d001      	beq.n	8020c6a <SD_WideBus_Enable+0x46>
  {
    return errorstate;
 8020c66:	697b      	ldr	r3, [r7, #20]
 8020c68:	e023      	b.n	8020cb2 <SD_WideBus_Enable+0x8e>
  }

  /* If requested card supports wide bus operation */
  if ((scr[1U] & SDMMC_WIDE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8020c6a:	693b      	ldr	r3, [r7, #16]
 8020c6c:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8020c70:	2b00      	cmp	r3, #0
 8020c72:	d01c      	beq.n	8020cae <SD_WideBus_Enable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA.*/
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020c74:	687b      	ldr	r3, [r7, #4]
 8020c76:	681a      	ldr	r2, [r3, #0]
 8020c78:	687b      	ldr	r3, [r7, #4]
 8020c7a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020c7c:	041b      	lsls	r3, r3, #16
 8020c7e:	4619      	mov	r1, r3
 8020c80:	4610      	mov	r0, r2
 8020c82:	f001 f8d2 	bl	8021e2a <SDMMC_CmdAppCommand>
 8020c86:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020c88:	697b      	ldr	r3, [r7, #20]
 8020c8a:	2b00      	cmp	r3, #0
 8020c8c:	d001      	beq.n	8020c92 <SD_WideBus_Enable+0x6e>
    {
      return errorstate;
 8020c8e:	697b      	ldr	r3, [r7, #20]
 8020c90:	e00f      	b.n	8020cb2 <SD_WideBus_Enable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 2 for wide bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 2U);
 8020c92:	687b      	ldr	r3, [r7, #4]
 8020c94:	681b      	ldr	r3, [r3, #0]
 8020c96:	2102      	movs	r1, #2
 8020c98:	4618      	mov	r0, r3
 8020c9a:	f001 f909 	bl	8021eb0 <SDMMC_CmdBusWidth>
 8020c9e:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020ca0:	697b      	ldr	r3, [r7, #20]
 8020ca2:	2b00      	cmp	r3, #0
 8020ca4:	d001      	beq.n	8020caa <SD_WideBus_Enable+0x86>
    {
      return errorstate;
 8020ca6:	697b      	ldr	r3, [r7, #20]
 8020ca8:	e003      	b.n	8020cb2 <SD_WideBus_Enable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8020caa:	2300      	movs	r3, #0
 8020cac:	e001      	b.n	8020cb2 <SD_WideBus_Enable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8020cae:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8020cb2:	4618      	mov	r0, r3
 8020cb4:	3718      	adds	r7, #24
 8020cb6:	46bd      	mov	sp, r7
 8020cb8:	bd80      	pop	{r7, pc}

08020cba <SD_WideBus_Disable>:
  * @brief  Disables the SDMMC wide bus mode.
  * @param  hsd: Pointer to SD handle
  * @retval error state
  */
static uint32_t SD_WideBus_Disable(SD_HandleTypeDef *hsd)
{
 8020cba:	b580      	push	{r7, lr}
 8020cbc:	b086      	sub	sp, #24
 8020cbe:	af00      	add	r7, sp, #0
 8020cc0:	6078      	str	r0, [r7, #4]
  uint32_t scr[2U] = {0UL, 0UL};
 8020cc2:	2300      	movs	r3, #0
 8020cc4:	60fb      	str	r3, [r7, #12]
 8020cc6:	2300      	movs	r3, #0
 8020cc8:	613b      	str	r3, [r7, #16]
  uint32_t errorstate;

  if ((SDMMC_GetResponse(hsd->Instance, SDMMC_RESP1) & SDMMC_CARD_LOCKED) == SDMMC_CARD_LOCKED)
 8020cca:	687b      	ldr	r3, [r7, #4]
 8020ccc:	681b      	ldr	r3, [r3, #0]
 8020cce:	2100      	movs	r1, #0
 8020cd0:	4618      	mov	r0, r3
 8020cd2:	f000 feb6 	bl	8021a42 <SDMMC_GetResponse>
 8020cd6:	4603      	mov	r3, r0
 8020cd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8020cdc:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8020ce0:	d102      	bne.n	8020ce8 <SD_WideBus_Disable+0x2e>
  {
    return HAL_SD_ERROR_LOCK_UNLOCK_FAILED;
 8020ce2:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8020ce6:	e02f      	b.n	8020d48 <SD_WideBus_Disable+0x8e>
  }

  /* Get SCR Register */
  errorstate = SD_FindSCR(hsd, scr);
 8020ce8:	f107 030c 	add.w	r3, r7, #12
 8020cec:	4619      	mov	r1, r3
 8020cee:	6878      	ldr	r0, [r7, #4]
 8020cf0:	f000 f82e 	bl	8020d50 <SD_FindSCR>
 8020cf4:	6178      	str	r0, [r7, #20]
  if (errorstate != HAL_SD_ERROR_NONE)
 8020cf6:	697b      	ldr	r3, [r7, #20]
 8020cf8:	2b00      	cmp	r3, #0
 8020cfa:	d001      	beq.n	8020d00 <SD_WideBus_Disable+0x46>
  {
    return errorstate;
 8020cfc:	697b      	ldr	r3, [r7, #20]
 8020cfe:	e023      	b.n	8020d48 <SD_WideBus_Disable+0x8e>
  }

  /* If requested card supports 1 bit mode operation */
  if ((scr[1U] & SDMMC_SINGLE_BUS_SUPPORT) != SDMMC_ALLZERO)
 8020d00:	693b      	ldr	r3, [r7, #16]
 8020d02:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8020d06:	2b00      	cmp	r3, #0
 8020d08:	d01c      	beq.n	8020d44 <SD_WideBus_Disable+0x8a>
  {
    /* Send CMD55 APP_CMD with argument as card's RCA */
    errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)(hsd->SdCard.RelCardAdd << 16U));
 8020d0a:	687b      	ldr	r3, [r7, #4]
 8020d0c:	681a      	ldr	r2, [r3, #0]
 8020d0e:	687b      	ldr	r3, [r7, #4]
 8020d10:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020d12:	041b      	lsls	r3, r3, #16
 8020d14:	4619      	mov	r1, r3
 8020d16:	4610      	mov	r0, r2
 8020d18:	f001 f887 	bl	8021e2a <SDMMC_CmdAppCommand>
 8020d1c:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020d1e:	697b      	ldr	r3, [r7, #20]
 8020d20:	2b00      	cmp	r3, #0
 8020d22:	d001      	beq.n	8020d28 <SD_WideBus_Disable+0x6e>
    {
      return errorstate;
 8020d24:	697b      	ldr	r3, [r7, #20]
 8020d26:	e00f      	b.n	8020d48 <SD_WideBus_Disable+0x8e>
    }

    /* Send ACMD6 APP_CMD with argument as 0 for single bus mode */
    errorstate = SDMMC_CmdBusWidth(hsd->Instance, 0U);
 8020d28:	687b      	ldr	r3, [r7, #4]
 8020d2a:	681b      	ldr	r3, [r3, #0]
 8020d2c:	2100      	movs	r1, #0
 8020d2e:	4618      	mov	r0, r3
 8020d30:	f001 f8be 	bl	8021eb0 <SDMMC_CmdBusWidth>
 8020d34:	6178      	str	r0, [r7, #20]
    if (errorstate != HAL_SD_ERROR_NONE)
 8020d36:	697b      	ldr	r3, [r7, #20]
 8020d38:	2b00      	cmp	r3, #0
 8020d3a:	d001      	beq.n	8020d40 <SD_WideBus_Disable+0x86>
    {
      return errorstate;
 8020d3c:	697b      	ldr	r3, [r7, #20]
 8020d3e:	e003      	b.n	8020d48 <SD_WideBus_Disable+0x8e>
    }

    return HAL_SD_ERROR_NONE;
 8020d40:	2300      	movs	r3, #0
 8020d42:	e001      	b.n	8020d48 <SD_WideBus_Disable+0x8e>
  }
  else
  {
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 8020d44:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
  }
}
 8020d48:	4618      	mov	r0, r3
 8020d4a:	3718      	adds	r7, #24
 8020d4c:	46bd      	mov	sp, r7
 8020d4e:	bd80      	pop	{r7, pc}

08020d50 <SD_FindSCR>:
  * @param  hsd: Pointer to SD handle
  * @param  pSCR: pointer to the buffer that will contain the SCR value
  * @retval error state
  */
static uint32_t SD_FindSCR(SD_HandleTypeDef *hsd, uint32_t *pSCR)
{
 8020d50:	b580      	push	{r7, lr}
 8020d52:	b08e      	sub	sp, #56	@ 0x38
 8020d54:	af00      	add	r7, sp, #0
 8020d56:	6078      	str	r0, [r7, #4]
 8020d58:	6039      	str	r1, [r7, #0]
  SDMMC_DataInitTypeDef config;
  uint32_t errorstate;
  uint32_t tickstart = HAL_GetTick();
 8020d5a:	f7f1 fa0f 	bl	801217c <HAL_GetTick>
 8020d5e:	6338      	str	r0, [r7, #48]	@ 0x30
  uint32_t index = 0U;
 8020d60:	2300      	movs	r3, #0
 8020d62:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t tempscr[2U] = {0UL, 0UL};
 8020d64:	2300      	movs	r3, #0
 8020d66:	60bb      	str	r3, [r7, #8]
 8020d68:	2300      	movs	r3, #0
 8020d6a:	60fb      	str	r3, [r7, #12]
  uint32_t *scr = pSCR;
 8020d6c:	683b      	ldr	r3, [r7, #0]
 8020d6e:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Set Block Size To 8 Bytes */
  errorstate = SDMMC_CmdBlockLength(hsd->Instance, 8U);
 8020d70:	687b      	ldr	r3, [r7, #4]
 8020d72:	681b      	ldr	r3, [r3, #0]
 8020d74:	2108      	movs	r1, #8
 8020d76:	4618      	mov	r0, r3
 8020d78:	f000 fea2 	bl	8021ac0 <SDMMC_CmdBlockLength>
 8020d7c:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8020d7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020d80:	2b00      	cmp	r3, #0
 8020d82:	d001      	beq.n	8020d88 <SD_FindSCR+0x38>
  {
    return errorstate;
 8020d84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020d86:	e0ad      	b.n	8020ee4 <SD_FindSCR+0x194>
  }

  /* Send CMD55 APP_CMD with argument as card's RCA */
  errorstate = SDMMC_CmdAppCommand(hsd->Instance, (uint32_t)((hsd->SdCard.RelCardAdd) << 16U));
 8020d88:	687b      	ldr	r3, [r7, #4]
 8020d8a:	681a      	ldr	r2, [r3, #0]
 8020d8c:	687b      	ldr	r3, [r7, #4]
 8020d8e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8020d90:	041b      	lsls	r3, r3, #16
 8020d92:	4619      	mov	r1, r3
 8020d94:	4610      	mov	r0, r2
 8020d96:	f001 f848 	bl	8021e2a <SDMMC_CmdAppCommand>
 8020d9a:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8020d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020d9e:	2b00      	cmp	r3, #0
 8020da0:	d001      	beq.n	8020da6 <SD_FindSCR+0x56>
  {
    return errorstate;
 8020da2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020da4:	e09e      	b.n	8020ee4 <SD_FindSCR+0x194>
  }

  config.DataTimeOut   = SDMMC_DATATIMEOUT;
 8020da6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8020daa:	613b      	str	r3, [r7, #16]
  config.DataLength    = 8U;
 8020dac:	2308      	movs	r3, #8
 8020dae:	617b      	str	r3, [r7, #20]
  config.DataBlockSize = SDMMC_DATABLOCK_SIZE_8B;
 8020db0:	2330      	movs	r3, #48	@ 0x30
 8020db2:	61bb      	str	r3, [r7, #24]
  config.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 8020db4:	2302      	movs	r3, #2
 8020db6:	61fb      	str	r3, [r7, #28]
  config.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8020db8:	2300      	movs	r3, #0
 8020dba:	623b      	str	r3, [r7, #32]
  config.DPSM          = SDMMC_DPSM_ENABLE;
 8020dbc:	2301      	movs	r3, #1
 8020dbe:	627b      	str	r3, [r7, #36]	@ 0x24
  (void)SDMMC_ConfigData(hsd->Instance, &config);
 8020dc0:	687b      	ldr	r3, [r7, #4]
 8020dc2:	681b      	ldr	r3, [r3, #0]
 8020dc4:	f107 0210 	add.w	r2, r7, #16
 8020dc8:	4611      	mov	r1, r2
 8020dca:	4618      	mov	r0, r3
 8020dcc:	f000 fe4c 	bl	8021a68 <SDMMC_ConfigData>

  /* Send ACMD51 SD_APP_SEND_SCR with argument as 0 */
  errorstate = SDMMC_CmdSendSCR(hsd->Instance);
 8020dd0:	687b      	ldr	r3, [r7, #4]
 8020dd2:	681b      	ldr	r3, [r3, #0]
 8020dd4:	4618      	mov	r0, r3
 8020dd6:	f001 f88e 	bl	8021ef6 <SDMMC_CmdSendSCR>
 8020dda:	62b8      	str	r0, [r7, #40]	@ 0x28
  if (errorstate != HAL_SD_ERROR_NONE)
 8020ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020dde:	2b00      	cmp	r3, #0
 8020de0:	d027      	beq.n	8020e32 <SD_FindSCR+0xe2>
  {
    return errorstate;
 8020de2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8020de4:	e07e      	b.n	8020ee4 <SD_FindSCR+0x194>
  }

  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                            SDMMC_FLAG_DATAEND))
  {
    if ((!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOE)) && (index == 0U))
 8020de6:	687b      	ldr	r3, [r7, #4]
 8020de8:	681b      	ldr	r3, [r3, #0]
 8020dea:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020dec:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8020df0:	2b00      	cmp	r3, #0
 8020df2:	d113      	bne.n	8020e1c <SD_FindSCR+0xcc>
 8020df4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020df6:	2b00      	cmp	r3, #0
 8020df8:	d110      	bne.n	8020e1c <SD_FindSCR+0xcc>
    {
      tempscr[0] = SDMMC_ReadFIFO(hsd->Instance);
 8020dfa:	687b      	ldr	r3, [r7, #4]
 8020dfc:	681b      	ldr	r3, [r3, #0]
 8020dfe:	4618      	mov	r0, r3
 8020e00:	f000 fd9a 	bl	8021938 <SDMMC_ReadFIFO>
 8020e04:	4603      	mov	r3, r0
 8020e06:	60bb      	str	r3, [r7, #8]
      tempscr[1] = SDMMC_ReadFIFO(hsd->Instance);
 8020e08:	687b      	ldr	r3, [r7, #4]
 8020e0a:	681b      	ldr	r3, [r3, #0]
 8020e0c:	4618      	mov	r0, r3
 8020e0e:	f000 fd93 	bl	8021938 <SDMMC_ReadFIFO>
 8020e12:	4603      	mov	r3, r0
 8020e14:	60fb      	str	r3, [r7, #12]
      index++;
 8020e16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8020e18:	3301      	adds	r3, #1
 8020e1a:	637b      	str	r3, [r7, #52]	@ 0x34
    }

    if ((HAL_GetTick() - tickstart) >=  SDMMC_SWDATATIMEOUT)
 8020e1c:	f7f1 f9ae 	bl	801217c <HAL_GetTick>
 8020e20:	4602      	mov	r2, r0
 8020e22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8020e24:	1ad3      	subs	r3, r2, r3
 8020e26:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8020e2a:	d102      	bne.n	8020e32 <SD_FindSCR+0xe2>
    {
      return HAL_SD_ERROR_TIMEOUT;
 8020e2c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8020e30:	e058      	b.n	8020ee4 <SD_FindSCR+0x194>
  while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 8020e32:	687b      	ldr	r3, [r7, #4]
 8020e34:	681b      	ldr	r3, [r3, #0]
 8020e36:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8020e38:	f240 532a 	movw	r3, #1322	@ 0x52a
 8020e3c:	4013      	ands	r3, r2
 8020e3e:	2b00      	cmp	r3, #0
 8020e40:	d0d1      	beq.n	8020de6 <SD_FindSCR+0x96>
    }
  }

  if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 8020e42:	687b      	ldr	r3, [r7, #4]
 8020e44:	681b      	ldr	r3, [r3, #0]
 8020e46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020e48:	f003 0308 	and.w	r3, r3, #8
 8020e4c:	2b00      	cmp	r3, #0
 8020e4e:	d005      	beq.n	8020e5c <SD_FindSCR+0x10c>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8020e50:	687b      	ldr	r3, [r7, #4]
 8020e52:	681b      	ldr	r3, [r3, #0]
 8020e54:	2208      	movs	r2, #8
 8020e56:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_TIMEOUT;
 8020e58:	2308      	movs	r3, #8
 8020e5a:	e043      	b.n	8020ee4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8020e5c:	687b      	ldr	r3, [r7, #4]
 8020e5e:	681b      	ldr	r3, [r3, #0]
 8020e60:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020e62:	f003 0302 	and.w	r3, r3, #2
 8020e66:	2b00      	cmp	r3, #0
 8020e68:	d005      	beq.n	8020e76 <SD_FindSCR+0x126>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8020e6a:	687b      	ldr	r3, [r7, #4]
 8020e6c:	681b      	ldr	r3, [r3, #0]
 8020e6e:	2202      	movs	r2, #2
 8020e70:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_DATA_CRC_FAIL;
 8020e72:	2302      	movs	r3, #2
 8020e74:	e036      	b.n	8020ee4 <SD_FindSCR+0x194>
  }
  else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8020e76:	687b      	ldr	r3, [r7, #4]
 8020e78:	681b      	ldr	r3, [r3, #0]
 8020e7a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8020e7c:	f003 0320 	and.w	r3, r3, #32
 8020e80:	2b00      	cmp	r3, #0
 8020e82:	d005      	beq.n	8020e90 <SD_FindSCR+0x140>
  {
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8020e84:	687b      	ldr	r3, [r7, #4]
 8020e86:	681b      	ldr	r3, [r3, #0]
 8020e88:	2220      	movs	r2, #32
 8020e8a:	639a      	str	r2, [r3, #56]	@ 0x38

    return HAL_SD_ERROR_RX_OVERRUN;
 8020e8c:	2320      	movs	r3, #32
 8020e8e:	e029      	b.n	8020ee4 <SD_FindSCR+0x194>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8020e90:	687b      	ldr	r3, [r7, #4]
 8020e92:	681b      	ldr	r3, [r3, #0]
 8020e94:	4a15      	ldr	r2, [pc, #84]	@ (8020eec <SD_FindSCR+0x19c>)
 8020e96:	639a      	str	r2, [r3, #56]	@ 0x38

    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8020e98:	68fb      	ldr	r3, [r7, #12]
 8020e9a:	061a      	lsls	r2, r3, #24
 8020e9c:	68fb      	ldr	r3, [r7, #12]
 8020e9e:	021b      	lsls	r3, r3, #8
 8020ea0:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8020ea4:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8020ea6:	68fb      	ldr	r3, [r7, #12]
 8020ea8:	0a1b      	lsrs	r3, r3, #8
 8020eaa:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8020eae:	431a      	orrs	r2, r3
            ((tempscr[1] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[1] & SDMMC_24TO31BITS) >> 24U));
 8020eb0:	68fb      	ldr	r3, [r7, #12]
 8020eb2:	0e1b      	lsrs	r3, r3, #24
 8020eb4:	431a      	orrs	r2, r3
    *scr = (((tempscr[1] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[1] & SDMMC_8TO15BITS) << 8U) | \
 8020eb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020eb8:	601a      	str	r2, [r3, #0]
    scr++;
 8020eba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020ebc:	3304      	adds	r3, #4
 8020ebe:	62fb      	str	r3, [r7, #44]	@ 0x2c
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8020ec0:	68bb      	ldr	r3, [r7, #8]
 8020ec2:	061a      	lsls	r2, r3, #24
 8020ec4:	68bb      	ldr	r3, [r7, #8]
 8020ec6:	021b      	lsls	r3, r3, #8
 8020ec8:	f403 037f 	and.w	r3, r3, #16711680	@ 0xff0000
 8020ecc:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8020ece:	68bb      	ldr	r3, [r7, #8]
 8020ed0:	0a1b      	lsrs	r3, r3, #8
 8020ed2:	f403 437f 	and.w	r3, r3, #65280	@ 0xff00
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8020ed6:	431a      	orrs	r2, r3
            ((tempscr[0] & SDMMC_16TO23BITS) >> 8U) | ((tempscr[0] & SDMMC_24TO31BITS) >> 24U));
 8020ed8:	68bb      	ldr	r3, [r7, #8]
 8020eda:	0e1b      	lsrs	r3, r3, #24
 8020edc:	431a      	orrs	r2, r3
    *scr = (((tempscr[0] & SDMMC_0TO7BITS) << 24U)  | ((tempscr[0] & SDMMC_8TO15BITS) << 8U) | \
 8020ede:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8020ee0:	601a      	str	r2, [r3, #0]

  }

  return HAL_SD_ERROR_NONE;
 8020ee2:	2300      	movs	r3, #0
}
 8020ee4:	4618      	mov	r0, r3
 8020ee6:	3738      	adds	r7, #56	@ 0x38
 8020ee8:	46bd      	mov	sp, r7
 8020eea:	bd80      	pop	{r7, pc}
 8020eec:	18000f3a 	.word	0x18000f3a

08020ef0 <SD_Read_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Read_IT(SD_HandleTypeDef *hsd)
{
 8020ef0:	b580      	push	{r7, lr}
 8020ef2:	b086      	sub	sp, #24
 8020ef4:	af00      	add	r7, sp, #0
 8020ef6:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  uint8_t *tmp;

  tmp = hsd->pRxBuffPtr;
 8020ef8:	687b      	ldr	r3, [r7, #4]
 8020efa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8020efc:	613b      	str	r3, [r7, #16]

  if (hsd->RxXferSize >= SDMMC_FIFO_SIZE)
 8020efe:	687b      	ldr	r3, [r7, #4]
 8020f00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020f02:	2b1f      	cmp	r3, #31
 8020f04:	d936      	bls.n	8020f74 <SD_Read_IT+0x84>
  {
    /* Read data from SDMMC Rx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8020f06:	2300      	movs	r3, #0
 8020f08:	617b      	str	r3, [r7, #20]
 8020f0a:	e027      	b.n	8020f5c <SD_Read_IT+0x6c>
    {
      data = SDMMC_ReadFIFO(hsd->Instance);
 8020f0c:	687b      	ldr	r3, [r7, #4]
 8020f0e:	681b      	ldr	r3, [r3, #0]
 8020f10:	4618      	mov	r0, r3
 8020f12:	f000 fd11 	bl	8021938 <SDMMC_ReadFIFO>
 8020f16:	60f8      	str	r0, [r7, #12]
      *tmp = (uint8_t)(data & 0xFFU);
 8020f18:	68fb      	ldr	r3, [r7, #12]
 8020f1a:	b2da      	uxtb	r2, r3
 8020f1c:	693b      	ldr	r3, [r7, #16]
 8020f1e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8020f20:	693b      	ldr	r3, [r7, #16]
 8020f22:	3301      	adds	r3, #1
 8020f24:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 8U) & 0xFFU);
 8020f26:	68fb      	ldr	r3, [r7, #12]
 8020f28:	0a1b      	lsrs	r3, r3, #8
 8020f2a:	b2da      	uxtb	r2, r3
 8020f2c:	693b      	ldr	r3, [r7, #16]
 8020f2e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8020f30:	693b      	ldr	r3, [r7, #16]
 8020f32:	3301      	adds	r3, #1
 8020f34:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 16U) & 0xFFU);
 8020f36:	68fb      	ldr	r3, [r7, #12]
 8020f38:	0c1b      	lsrs	r3, r3, #16
 8020f3a:	b2da      	uxtb	r2, r3
 8020f3c:	693b      	ldr	r3, [r7, #16]
 8020f3e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8020f40:	693b      	ldr	r3, [r7, #16]
 8020f42:	3301      	adds	r3, #1
 8020f44:	613b      	str	r3, [r7, #16]
      *tmp = (uint8_t)((data >> 24U) & 0xFFU);
 8020f46:	68fb      	ldr	r3, [r7, #12]
 8020f48:	0e1b      	lsrs	r3, r3, #24
 8020f4a:	b2da      	uxtb	r2, r3
 8020f4c:	693b      	ldr	r3, [r7, #16]
 8020f4e:	701a      	strb	r2, [r3, #0]
      tmp++;
 8020f50:	693b      	ldr	r3, [r7, #16]
 8020f52:	3301      	adds	r3, #1
 8020f54:	613b      	str	r3, [r7, #16]
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8020f56:	697b      	ldr	r3, [r7, #20]
 8020f58:	3301      	adds	r3, #1
 8020f5a:	617b      	str	r3, [r7, #20]
 8020f5c:	697b      	ldr	r3, [r7, #20]
 8020f5e:	2b07      	cmp	r3, #7
 8020f60:	d9d4      	bls.n	8020f0c <SD_Read_IT+0x1c>
    }

    hsd->pRxBuffPtr = tmp;
 8020f62:	687b      	ldr	r3, [r7, #4]
 8020f64:	693a      	ldr	r2, [r7, #16]
 8020f66:	625a      	str	r2, [r3, #36]	@ 0x24
    hsd->RxXferSize -= SDMMC_FIFO_SIZE;
 8020f68:	687b      	ldr	r3, [r7, #4]
 8020f6a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8020f6c:	f1a3 0220 	sub.w	r2, r3, #32
 8020f70:	687b      	ldr	r3, [r7, #4]
 8020f72:	629a      	str	r2, [r3, #40]	@ 0x28
  }
}
 8020f74:	bf00      	nop
 8020f76:	3718      	adds	r7, #24
 8020f78:	46bd      	mov	sp, r7
 8020f7a:	bd80      	pop	{r7, pc}

08020f7c <SD_Write_IT>:
  * @param  hsd: pointer to a SD_HandleTypeDef structure that contains
  *              the configuration information.
  * @retval None
  */
static void SD_Write_IT(SD_HandleTypeDef *hsd)
{
 8020f7c:	b580      	push	{r7, lr}
 8020f7e:	b086      	sub	sp, #24
 8020f80:	af00      	add	r7, sp, #0
 8020f82:	6078      	str	r0, [r7, #4]
  uint32_t count;
  uint32_t data;
  const uint8_t *tmp;

  tmp = hsd->pTxBuffPtr;
 8020f84:	687b      	ldr	r3, [r7, #4]
 8020f86:	69db      	ldr	r3, [r3, #28]
 8020f88:	613b      	str	r3, [r7, #16]

  if (hsd->TxXferSize >= SDMMC_FIFO_SIZE)
 8020f8a:	687b      	ldr	r3, [r7, #4]
 8020f8c:	6a1b      	ldr	r3, [r3, #32]
 8020f8e:	2b1f      	cmp	r3, #31
 8020f90:	d93a      	bls.n	8021008 <SD_Write_IT+0x8c>
  {
    /* Write data to SDMMC Tx FIFO */
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8020f92:	2300      	movs	r3, #0
 8020f94:	617b      	str	r3, [r7, #20]
 8020f96:	e02b      	b.n	8020ff0 <SD_Write_IT+0x74>
    {
      data = (uint32_t)(*tmp);
 8020f98:	693b      	ldr	r3, [r7, #16]
 8020f9a:	781b      	ldrb	r3, [r3, #0]
 8020f9c:	60fb      	str	r3, [r7, #12]
      tmp++;
 8020f9e:	693b      	ldr	r3, [r7, #16]
 8020fa0:	3301      	adds	r3, #1
 8020fa2:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 8U);
 8020fa4:	693b      	ldr	r3, [r7, #16]
 8020fa6:	781b      	ldrb	r3, [r3, #0]
 8020fa8:	021a      	lsls	r2, r3, #8
 8020faa:	68fb      	ldr	r3, [r7, #12]
 8020fac:	4313      	orrs	r3, r2
 8020fae:	60fb      	str	r3, [r7, #12]
      tmp++;
 8020fb0:	693b      	ldr	r3, [r7, #16]
 8020fb2:	3301      	adds	r3, #1
 8020fb4:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 16U);
 8020fb6:	693b      	ldr	r3, [r7, #16]
 8020fb8:	781b      	ldrb	r3, [r3, #0]
 8020fba:	041a      	lsls	r2, r3, #16
 8020fbc:	68fb      	ldr	r3, [r7, #12]
 8020fbe:	4313      	orrs	r3, r2
 8020fc0:	60fb      	str	r3, [r7, #12]
      tmp++;
 8020fc2:	693b      	ldr	r3, [r7, #16]
 8020fc4:	3301      	adds	r3, #1
 8020fc6:	613b      	str	r3, [r7, #16]
      data |= ((uint32_t)(*tmp) << 24U);
 8020fc8:	693b      	ldr	r3, [r7, #16]
 8020fca:	781b      	ldrb	r3, [r3, #0]
 8020fcc:	061a      	lsls	r2, r3, #24
 8020fce:	68fb      	ldr	r3, [r7, #12]
 8020fd0:	4313      	orrs	r3, r2
 8020fd2:	60fb      	str	r3, [r7, #12]
      tmp++;
 8020fd4:	693b      	ldr	r3, [r7, #16]
 8020fd6:	3301      	adds	r3, #1
 8020fd8:	613b      	str	r3, [r7, #16]
      (void)SDMMC_WriteFIFO(hsd->Instance, &data);
 8020fda:	687b      	ldr	r3, [r7, #4]
 8020fdc:	681b      	ldr	r3, [r3, #0]
 8020fde:	f107 020c 	add.w	r2, r7, #12
 8020fe2:	4611      	mov	r1, r2
 8020fe4:	4618      	mov	r0, r3
 8020fe6:	f000 fcb4 	bl	8021952 <SDMMC_WriteFIFO>
    for (count = 0U; count < (SDMMC_FIFO_SIZE / 4U); count++)
 8020fea:	697b      	ldr	r3, [r7, #20]
 8020fec:	3301      	adds	r3, #1
 8020fee:	617b      	str	r3, [r7, #20]
 8020ff0:	697b      	ldr	r3, [r7, #20]
 8020ff2:	2b07      	cmp	r3, #7
 8020ff4:	d9d0      	bls.n	8020f98 <SD_Write_IT+0x1c>
    }

    hsd->pTxBuffPtr = tmp;
 8020ff6:	687b      	ldr	r3, [r7, #4]
 8020ff8:	693a      	ldr	r2, [r7, #16]
 8020ffa:	61da      	str	r2, [r3, #28]
    hsd->TxXferSize -= SDMMC_FIFO_SIZE;
 8020ffc:	687b      	ldr	r3, [r7, #4]
 8020ffe:	6a1b      	ldr	r3, [r3, #32]
 8021000:	f1a3 0220 	sub.w	r2, r3, #32
 8021004:	687b      	ldr	r3, [r7, #4]
 8021006:	621a      	str	r2, [r3, #32]
  }
}
 8021008:	bf00      	nop
 802100a:	3718      	adds	r7, #24
 802100c:	46bd      	mov	sp, r7
 802100e:	bd80      	pop	{r7, pc}

08021010 <SD_SwitchSpeed>:
  * @param  hsd: SD handle
  * @param  SwitchSpeedMode: SD speed mode( SDMMC_SDR12_SWITCH_PATTERN, SDMMC_SDR25_SWITCH_PATTERN)
  * @retval SD Card error state
  */
uint32_t SD_SwitchSpeed(SD_HandleTypeDef *hsd, uint32_t SwitchSpeedMode)
{
 8021010:	b590      	push	{r4, r7, lr}
 8021012:	b09d      	sub	sp, #116	@ 0x74
 8021014:	af00      	add	r7, sp, #0
 8021016:	6078      	str	r0, [r7, #4]
 8021018:	6039      	str	r1, [r7, #0]
  uint32_t errorstate = HAL_SD_ERROR_NONE;
 802101a:	2300      	movs	r3, #0
 802101c:	66fb      	str	r3, [r7, #108]	@ 0x6c
  SDMMC_DataInitTypeDef sdmmc_datainitstructure;
  uint32_t SD_hs[16]  = {0};
 802101e:	f107 0308 	add.w	r3, r7, #8
 8021022:	2240      	movs	r2, #64	@ 0x40
 8021024:	2100      	movs	r1, #0
 8021026:	4618      	mov	r0, r3
 8021028:	f004 fc14 	bl	8025854 <memset>
  uint32_t count;
  uint32_t loop = 0 ;
 802102c:	2300      	movs	r3, #0
 802102e:	667b      	str	r3, [r7, #100]	@ 0x64
  uint32_t Timeout = HAL_GetTick();
 8021030:	f7f1 f8a4 	bl	801217c <HAL_GetTick>
 8021034:	6638      	str	r0, [r7, #96]	@ 0x60

  if (hsd->SdCard.CardSpeed == CARD_NORMAL_SPEED)
 8021036:	687b      	ldr	r3, [r7, #4]
 8021038:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 802103a:	2b00      	cmp	r3, #0
 802103c:	d102      	bne.n	8021044 <SD_SwitchSpeed+0x34>
  {
    /* Standard Speed Card <= 12.5Mhz  */
    return HAL_SD_ERROR_REQUEST_NOT_APPLICABLE;
 802103e:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 8021042:	e0ad      	b.n	80211a0 <SD_SwitchSpeed+0x190>
  }

  if (hsd->SdCard.CardSpeed >= CARD_HIGH_SPEED)
 8021044:	687b      	ldr	r3, [r7, #4]
 8021046:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8021048:	2bff      	cmp	r3, #255	@ 0xff
 802104a:	f240 80a8 	bls.w	802119e <SD_SwitchSpeed+0x18e>
  {
    /* Initialize the Data control register */
    hsd->Instance->DCTRL = 0;
 802104e:	687b      	ldr	r3, [r7, #4]
 8021050:	681b      	ldr	r3, [r3, #0]
 8021052:	2200      	movs	r2, #0
 8021054:	62da      	str	r2, [r3, #44]	@ 0x2c
    errorstate = SDMMC_CmdBlockLength(hsd->Instance, 64U);
 8021056:	687b      	ldr	r3, [r7, #4]
 8021058:	681b      	ldr	r3, [r3, #0]
 802105a:	2140      	movs	r1, #64	@ 0x40
 802105c:	4618      	mov	r0, r3
 802105e:	f000 fd2f 	bl	8021ac0 <SDMMC_CmdBlockLength>
 8021062:	66f8      	str	r0, [r7, #108]	@ 0x6c

    if (errorstate != HAL_SD_ERROR_NONE)
 8021064:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8021066:	2b00      	cmp	r3, #0
 8021068:	d001      	beq.n	802106e <SD_SwitchSpeed+0x5e>
    {
      return errorstate;
 802106a:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802106c:	e098      	b.n	80211a0 <SD_SwitchSpeed+0x190>
    }

    /* Configure the SD DPSM (Data Path State Machine) */
    sdmmc_datainitstructure.DataTimeOut   = SDMMC_DATATIMEOUT;
 802106e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8021072:	64bb      	str	r3, [r7, #72]	@ 0x48
    sdmmc_datainitstructure.DataLength    = 64U;
 8021074:	2340      	movs	r3, #64	@ 0x40
 8021076:	64fb      	str	r3, [r7, #76]	@ 0x4c
    sdmmc_datainitstructure.DataBlockSize = SDMMC_DATABLOCK_SIZE_64B ;
 8021078:	2360      	movs	r3, #96	@ 0x60
 802107a:	653b      	str	r3, [r7, #80]	@ 0x50
    sdmmc_datainitstructure.TransferDir   = SDMMC_TRANSFER_DIR_TO_SDMMC;
 802107c:	2302      	movs	r3, #2
 802107e:	657b      	str	r3, [r7, #84]	@ 0x54
    sdmmc_datainitstructure.TransferMode  = SDMMC_TRANSFER_MODE_BLOCK;
 8021080:	2300      	movs	r3, #0
 8021082:	65bb      	str	r3, [r7, #88]	@ 0x58
    sdmmc_datainitstructure.DPSM          = SDMMC_DPSM_ENABLE;
 8021084:	2301      	movs	r3, #1
 8021086:	65fb      	str	r3, [r7, #92]	@ 0x5c

    (void)SDMMC_ConfigData(hsd->Instance, &sdmmc_datainitstructure);
 8021088:	687b      	ldr	r3, [r7, #4]
 802108a:	681b      	ldr	r3, [r3, #0]
 802108c:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8021090:	4611      	mov	r1, r2
 8021092:	4618      	mov	r0, r3
 8021094:	f000 fce8 	bl	8021a68 <SDMMC_ConfigData>

    errorstate = SDMMC_CmdSwitch(hsd->Instance, SwitchSpeedMode);
 8021098:	687b      	ldr	r3, [r7, #4]
 802109a:	681b      	ldr	r3, [r3, #0]
 802109c:	6839      	ldr	r1, [r7, #0]
 802109e:	4618      	mov	r0, r3
 80210a0:	f000 fff1 	bl	8022086 <SDMMC_CmdSwitch>
 80210a4:	66f8      	str	r0, [r7, #108]	@ 0x6c
    if (errorstate != HAL_SD_ERROR_NONE)
 80210a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80210a8:	2b00      	cmp	r3, #0
 80210aa:	d036      	beq.n	802111a <SD_SwitchSpeed+0x10a>
    {
      return errorstate;
 80210ac:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80210ae:	e077      	b.n	80211a0 <SD_SwitchSpeed+0x190>
    }

    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
                              SDMMC_FLAG_DATAEND))
    {
      if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXFIFOHF))
 80210b0:	687b      	ldr	r3, [r7, #4]
 80210b2:	681b      	ldr	r3, [r3, #0]
 80210b4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80210b6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80210ba:	2b00      	cmp	r3, #0
 80210bc:	d01a      	beq.n	80210f4 <SD_SwitchSpeed+0xe4>
      {
        for (count = 0U; count < 8U; count++)
 80210be:	2300      	movs	r3, #0
 80210c0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80210c2:	e011      	b.n	80210e8 <SD_SwitchSpeed+0xd8>
        {
          SD_hs[(8U * loop) + count]  = SDMMC_ReadFIFO(hsd->Instance);
 80210c4:	687b      	ldr	r3, [r7, #4]
 80210c6:	6819      	ldr	r1, [r3, #0]
 80210c8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80210ca:	00da      	lsls	r2, r3, #3
 80210cc:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80210ce:	18d4      	adds	r4, r2, r3
 80210d0:	4608      	mov	r0, r1
 80210d2:	f000 fc31 	bl	8021938 <SDMMC_ReadFIFO>
 80210d6:	4602      	mov	r2, r0
 80210d8:	00a3      	lsls	r3, r4, #2
 80210da:	3370      	adds	r3, #112	@ 0x70
 80210dc:	443b      	add	r3, r7
 80210de:	f843 2c68 	str.w	r2, [r3, #-104]
        for (count = 0U; count < 8U; count++)
 80210e2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80210e4:	3301      	adds	r3, #1
 80210e6:	66bb      	str	r3, [r7, #104]	@ 0x68
 80210e8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80210ea:	2b07      	cmp	r3, #7
 80210ec:	d9ea      	bls.n	80210c4 <SD_SwitchSpeed+0xb4>
        }
        loop ++;
 80210ee:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80210f0:	3301      	adds	r3, #1
 80210f2:	667b      	str	r3, [r7, #100]	@ 0x64
      }
      if ((HAL_GetTick() - Timeout) >=  SDMMC_SWDATATIMEOUT)
 80210f4:	f7f1 f842 	bl	801217c <HAL_GetTick>
 80210f8:	4602      	mov	r2, r0
 80210fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80210fc:	1ad3      	subs	r3, r2, r3
 80210fe:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8021102:	d10a      	bne.n	802111a <SD_SwitchSpeed+0x10a>
      {
        hsd->ErrorCode = HAL_SD_ERROR_TIMEOUT;
 8021104:	687b      	ldr	r3, [r7, #4]
 8021106:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802110a:	635a      	str	r2, [r3, #52]	@ 0x34
        hsd->State = HAL_SD_STATE_READY;
 802110c:	687b      	ldr	r3, [r7, #4]
 802110e:	2201      	movs	r2, #1
 8021110:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
        return HAL_SD_ERROR_TIMEOUT;
 8021114:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8021118:	e042      	b.n	80211a0 <SD_SwitchSpeed+0x190>
    while (!__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR | SDMMC_FLAG_DCRCFAIL | SDMMC_FLAG_DTIMEOUT | SDMMC_FLAG_DBCKEND |
 802111a:	687b      	ldr	r3, [r7, #4]
 802111c:	681b      	ldr	r3, [r3, #0]
 802111e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8021120:	f240 532a 	movw	r3, #1322	@ 0x52a
 8021124:	4013      	ands	r3, r2
 8021126:	2b00      	cmp	r3, #0
 8021128:	d0c2      	beq.n	80210b0 <SD_SwitchSpeed+0xa0>
      }
    }

    if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DTIMEOUT))
 802112a:	687b      	ldr	r3, [r7, #4]
 802112c:	681b      	ldr	r3, [r3, #0]
 802112e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021130:	f003 0308 	and.w	r3, r3, #8
 8021134:	2b00      	cmp	r3, #0
 8021136:	d005      	beq.n	8021144 <SD_SwitchSpeed+0x134>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DTIMEOUT);
 8021138:	687b      	ldr	r3, [r7, #4]
 802113a:	681b      	ldr	r3, [r3, #0]
 802113c:	2208      	movs	r2, #8
 802113e:	639a      	str	r2, [r3, #56]	@ 0x38

      return errorstate;
 8021140:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8021142:	e02d      	b.n	80211a0 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_DCRCFAIL))
 8021144:	687b      	ldr	r3, [r7, #4]
 8021146:	681b      	ldr	r3, [r3, #0]
 8021148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802114a:	f003 0302 	and.w	r3, r3, #2
 802114e:	2b00      	cmp	r3, #0
 8021150:	d007      	beq.n	8021162 <SD_SwitchSpeed+0x152>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_DCRCFAIL);
 8021152:	687b      	ldr	r3, [r7, #4]
 8021154:	681b      	ldr	r3, [r3, #0]
 8021156:	2202      	movs	r2, #2
 8021158:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_DATA_CRC_FAIL;
 802115a:	2302      	movs	r3, #2
 802115c:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 802115e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8021160:	e01e      	b.n	80211a0 <SD_SwitchSpeed+0x190>
    }
    else if (__HAL_SD_GET_FLAG(hsd, SDMMC_FLAG_RXOVERR))
 8021162:	687b      	ldr	r3, [r7, #4]
 8021164:	681b      	ldr	r3, [r3, #0]
 8021166:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8021168:	f003 0320 	and.w	r3, r3, #32
 802116c:	2b00      	cmp	r3, #0
 802116e:	d007      	beq.n	8021180 <SD_SwitchSpeed+0x170>
    {
      __HAL_SD_CLEAR_FLAG(hsd, SDMMC_FLAG_RXOVERR);
 8021170:	687b      	ldr	r3, [r7, #4]
 8021172:	681b      	ldr	r3, [r3, #0]
 8021174:	2220      	movs	r2, #32
 8021176:	639a      	str	r2, [r3, #56]	@ 0x38

      errorstate = SDMMC_ERROR_RX_OVERRUN;
 8021178:	2320      	movs	r3, #32
 802117a:	66fb      	str	r3, [r7, #108]	@ 0x6c

      return errorstate;
 802117c:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 802117e:	e00f      	b.n	80211a0 <SD_SwitchSpeed+0x190>
    {
      /* No error flag set */
    }

    /* Clear all the static flags */
    __HAL_SD_CLEAR_FLAG(hsd, SDMMC_STATIC_DATA_FLAGS);
 8021180:	687b      	ldr	r3, [r7, #4]
 8021182:	681b      	ldr	r3, [r3, #0]
 8021184:	4a08      	ldr	r2, [pc, #32]	@ (80211a8 <SD_SwitchSpeed+0x198>)
 8021186:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Test if the switch mode HS is ok */
    if ((((uint8_t *)SD_hs)[13] & 2U) != 2U)
 8021188:	f107 0308 	add.w	r3, r7, #8
 802118c:	330d      	adds	r3, #13
 802118e:	781b      	ldrb	r3, [r3, #0]
 8021190:	f003 0302 	and.w	r3, r3, #2
 8021194:	2b00      	cmp	r3, #0
 8021196:	d102      	bne.n	802119e <SD_SwitchSpeed+0x18e>
    {
      errorstate = SDMMC_ERROR_UNSUPPORTED_FEATURE;
 8021198:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 802119c:	66fb      	str	r3, [r7, #108]	@ 0x6c
    }

  }

  return errorstate;
 802119e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
}
 80211a0:	4618      	mov	r0, r3
 80211a2:	3774      	adds	r7, #116	@ 0x74
 80211a4:	46bd      	mov	sp, r7
 80211a6:	bd90      	pop	{r4, r7, pc}
 80211a8:	18000f3a 	.word	0x18000f3a

080211ac <HAL_SDEx_Read_DMADoubleBuf0CpltCallback>:
  * @brief Read DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80211ac:	b480      	push	{r7}
 80211ae:	b083      	sub	sp, #12
 80211b0:	af00      	add	r7, sp, #0
 80211b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80211b4:	bf00      	nop
 80211b6:	370c      	adds	r7, #12
 80211b8:	46bd      	mov	sp, r7
 80211ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211be:	4770      	bx	lr

080211c0 <HAL_SDEx_Read_DMADoubleBuf1CpltCallback>:
  * @brief Read DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Read_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80211c0:	b480      	push	{r7}
 80211c2:	b083      	sub	sp, #12
 80211c4:	af00      	add	r7, sp, #0
 80211c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Read_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80211c8:	bf00      	nop
 80211ca:	370c      	adds	r7, #12
 80211cc:	46bd      	mov	sp, r7
 80211ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211d2:	4770      	bx	lr

080211d4 <HAL_SDEx_Write_DMADoubleBuf0CpltCallback>:
  * @brief Write DMA Buffer 0 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf0CpltCallback(SD_HandleTypeDef *hsd)
{
 80211d4:	b480      	push	{r7}
 80211d6:	b083      	sub	sp, #12
 80211d8:	af00      	add	r7, sp, #0
 80211da:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf0CpltCallback can be implemented in the user file
   */
}
 80211dc:	bf00      	nop
 80211de:	370c      	adds	r7, #12
 80211e0:	46bd      	mov	sp, r7
 80211e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211e6:	4770      	bx	lr

080211e8 <HAL_SDEx_Write_DMADoubleBuf1CpltCallback>:
  * @brief Write DMA Buffer 1 Transfer completed callbacks
  * @param hsd: SD handle
  * @retval None
  */
__weak void HAL_SDEx_Write_DMADoubleBuf1CpltCallback(SD_HandleTypeDef *hsd)
{
 80211e8:	b480      	push	{r7}
 80211ea:	b083      	sub	sp, #12
 80211ec:	af00      	add	r7, sp, #0
 80211ee:	6078      	str	r0, [r7, #4]
  UNUSED(hsd);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SDEx_Write_DMADoubleBuf1CpltCallback can be implemented in the user file
   */
}
 80211f0:	bf00      	nop
 80211f2:	370c      	adds	r7, #12
 80211f4:	46bd      	mov	sp, r7
 80211f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80211fa:	4770      	bx	lr

080211fc <HAL_SDRAM_Init>:
  *                the configuration information for SDRAM module.
  * @param  Timing Pointer to SDRAM control timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Init(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_TimingTypeDef *Timing)
{
 80211fc:	b580      	push	{r7, lr}
 80211fe:	b082      	sub	sp, #8
 8021200:	af00      	add	r7, sp, #0
 8021202:	6078      	str	r0, [r7, #4]
 8021204:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM handle parameter */
  if (hsdram == NULL)
 8021206:	687b      	ldr	r3, [r7, #4]
 8021208:	2b00      	cmp	r3, #0
 802120a:	d101      	bne.n	8021210 <HAL_SDRAM_Init+0x14>
  {
    return HAL_ERROR;
 802120c:	2301      	movs	r3, #1
 802120e:	e02b      	b.n	8021268 <HAL_SDRAM_Init+0x6c>
  }

  if (hsdram->State == HAL_SDRAM_STATE_RESET)
 8021210:	687b      	ldr	r3, [r7, #4]
 8021212:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021216:	b2db      	uxtb	r3, r3
 8021218:	2b00      	cmp	r3, #0
 802121a:	d106      	bne.n	802122a <HAL_SDRAM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hsdram->Lock = HAL_UNLOCKED;
 802121c:	687b      	ldr	r3, [r7, #4]
 802121e:	2200      	movs	r2, #0
 8021220:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Init the low level hardware */
    hsdram->MspInitCallback(hsdram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SDRAM_MspInit(hsdram);
 8021224:	6878      	ldr	r0, [r7, #4]
 8021226:	f000 f841 	bl	80212ac <HAL_SDRAM_MspInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
  }

  /* Initialize the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_BUSY;
 802122a:	687b      	ldr	r3, [r7, #4]
 802122c:	2202      	movs	r2, #2
 802122e:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Initialize SDRAM control Interface */
  (void)FMC_SDRAM_Init(hsdram->Instance, &(hsdram->Init));
 8021232:	687b      	ldr	r3, [r7, #4]
 8021234:	681a      	ldr	r2, [r3, #0]
 8021236:	687b      	ldr	r3, [r7, #4]
 8021238:	3304      	adds	r3, #4
 802123a:	4619      	mov	r1, r3
 802123c:	4610      	mov	r0, r2
 802123e:	f000 fa2d 	bl	802169c <FMC_SDRAM_Init>

  /* Initialize SDRAM timing Interface */
  (void)FMC_SDRAM_Timing_Init(hsdram->Instance, Timing, hsdram->Init.SDBank);
 8021242:	687b      	ldr	r3, [r7, #4]
 8021244:	6818      	ldr	r0, [r3, #0]
 8021246:	687b      	ldr	r3, [r7, #4]
 8021248:	685b      	ldr	r3, [r3, #4]
 802124a:	461a      	mov	r2, r3
 802124c:	6839      	ldr	r1, [r7, #0]
 802124e:	f000 fa81 	bl	8021754 <FMC_SDRAM_Timing_Init>

  /* Enable FMC Peripheral */
  __FMC_ENABLE();
 8021252:	4b07      	ldr	r3, [pc, #28]	@ (8021270 <HAL_SDRAM_Init+0x74>)
 8021254:	681b      	ldr	r3, [r3, #0]
 8021256:	4a06      	ldr	r2, [pc, #24]	@ (8021270 <HAL_SDRAM_Init+0x74>)
 8021258:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 802125c:	6013      	str	r3, [r2, #0]
  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802125e:	687b      	ldr	r3, [r7, #4]
 8021260:	2201      	movs	r2, #1
 8021262:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8021266:	2300      	movs	r3, #0
}
 8021268:	4618      	mov	r0, r3
 802126a:	3708      	adds	r7, #8
 802126c:	46bd      	mov	sp, r7
 802126e:	bd80      	pop	{r7, pc}
 8021270:	52004000 	.word	0x52004000

08021274 <HAL_SDRAM_DeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_DeInit(SDRAM_HandleTypeDef *hsdram)
{
 8021274:	b580      	push	{r7, lr}
 8021276:	b082      	sub	sp, #8
 8021278:	af00      	add	r7, sp, #0
 802127a:	6078      	str	r0, [r7, #4]

  /* DeInit the low level hardware */
  hsdram->MspDeInitCallback(hsdram);
#else
  /* Initialize the low level hardware (MSP) */
  HAL_SDRAM_MspDeInit(hsdram);
 802127c:	6878      	ldr	r0, [r7, #4]
 802127e:	f000 f81f 	bl	80212c0 <HAL_SDRAM_MspDeInit>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */

  /* Configure the SDRAM registers with their reset values */
  (void)FMC_SDRAM_DeInit(hsdram->Instance, hsdram->Init.SDBank);
 8021282:	687b      	ldr	r3, [r7, #4]
 8021284:	681a      	ldr	r2, [r3, #0]
 8021286:	687b      	ldr	r3, [r7, #4]
 8021288:	685b      	ldr	r3, [r3, #4]
 802128a:	4619      	mov	r1, r3
 802128c:	4610      	mov	r0, r2
 802128e:	f000 facb 	bl	8021828 <FMC_SDRAM_DeInit>

  /* Reset the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_RESET;
 8021292:	687b      	ldr	r3, [r7, #4]
 8021294:	2200      	movs	r2, #0
 8021296:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

  /* Release Lock */
  __HAL_UNLOCK(hsdram);
 802129a:	687b      	ldr	r3, [r7, #4]
 802129c:	2200      	movs	r2, #0
 802129e:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

  return HAL_OK;
 80212a2:	2300      	movs	r3, #0
}
 80212a4:	4618      	mov	r0, r3
 80212a6:	3708      	adds	r7, #8
 80212a8:	46bd      	mov	sp, r7
 80212aa:	bd80      	pop	{r7, pc}

080212ac <HAL_SDRAM_MspInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspInit(SDRAM_HandleTypeDef *hsdram)
{
 80212ac:	b480      	push	{r7}
 80212ae:	b083      	sub	sp, #12
 80212b0:	af00      	add	r7, sp, #0
 80212b2:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspInit could be implemented in the user file
   */
}
 80212b4:	bf00      	nop
 80212b6:	370c      	adds	r7, #12
 80212b8:	46bd      	mov	sp, r7
 80212ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212be:	4770      	bx	lr

080212c0 <HAL_SDRAM_MspDeInit>:
  * @param  hsdram pointer to a SDRAM_HandleTypeDef structure that contains
  *                the configuration information for SDRAM module.
  * @retval None
  */
__weak void HAL_SDRAM_MspDeInit(SDRAM_HandleTypeDef *hsdram)
{
 80212c0:	b480      	push	{r7}
 80212c2:	b083      	sub	sp, #12
 80212c4:	af00      	add	r7, sp, #0
 80212c6:	6078      	str	r0, [r7, #4]
  UNUSED(hsdram);

  /* NOTE: This function Should not be modified, when the callback is needed,
            the HAL_SDRAM_MspDeInit could be implemented in the user file
   */
}
 80212c8:	bf00      	nop
 80212ca:	370c      	adds	r7, #12
 80212cc:	46bd      	mov	sp, r7
 80212ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80212d2:	4770      	bx	lr

080212d4 <HAL_SDRAM_Read_32b>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 80212d4:	b480      	push	{r7}
 80212d6:	b089      	sub	sp, #36	@ 0x24
 80212d8:	af00      	add	r7, sp, #0
 80212da:	60f8      	str	r0, [r7, #12]
 80212dc:	60b9      	str	r1, [r7, #8]
 80212de:	607a      	str	r2, [r7, #4]
 80212e0:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = (uint32_t *)pAddress;
 80212e2:	68bb      	ldr	r3, [r7, #8]
 80212e4:	61bb      	str	r3, [r7, #24]
  uint32_t *pdestbuff = pDstBuffer;
 80212e6:	687b      	ldr	r3, [r7, #4]
 80212e8:	617b      	str	r3, [r7, #20]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 80212ea:	68fb      	ldr	r3, [r7, #12]
 80212ec:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80212f0:	74fb      	strb	r3, [r7, #19]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 80212f2:	7cfb      	ldrb	r3, [r7, #19]
 80212f4:	2b02      	cmp	r3, #2
 80212f6:	d101      	bne.n	80212fc <HAL_SDRAM_Read_32b+0x28>
  {
    return HAL_BUSY;
 80212f8:	2302      	movs	r3, #2
 80212fa:	e032      	b.n	8021362 <HAL_SDRAM_Read_32b+0x8e>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 80212fc:	7cfb      	ldrb	r3, [r7, #19]
 80212fe:	2b01      	cmp	r3, #1
 8021300:	d002      	beq.n	8021308 <HAL_SDRAM_Read_32b+0x34>
 8021302:	7cfb      	ldrb	r3, [r7, #19]
 8021304:	2b04      	cmp	r3, #4
 8021306:	d12b      	bne.n	8021360 <HAL_SDRAM_Read_32b+0x8c>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 8021308:	68fb      	ldr	r3, [r7, #12]
 802130a:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802130e:	2b01      	cmp	r3, #1
 8021310:	d101      	bne.n	8021316 <HAL_SDRAM_Read_32b+0x42>
 8021312:	2302      	movs	r3, #2
 8021314:	e025      	b.n	8021362 <HAL_SDRAM_Read_32b+0x8e>
 8021316:	68fb      	ldr	r3, [r7, #12]
 8021318:	2201      	movs	r2, #1
 802131a:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802131e:	68fb      	ldr	r3, [r7, #12]
 8021320:	2202      	movs	r2, #2
 8021322:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Read data from source */
    for (size = BufferSize; size != 0U; size--)
 8021326:	683b      	ldr	r3, [r7, #0]
 8021328:	61fb      	str	r3, [r7, #28]
 802132a:	e00c      	b.n	8021346 <HAL_SDRAM_Read_32b+0x72>
    {
      *pdestbuff = *(__IO uint32_t *)pSdramAddress;
 802132c:	69bb      	ldr	r3, [r7, #24]
 802132e:	681a      	ldr	r2, [r3, #0]
 8021330:	697b      	ldr	r3, [r7, #20]
 8021332:	601a      	str	r2, [r3, #0]
      pdestbuff++;
 8021334:	697b      	ldr	r3, [r7, #20]
 8021336:	3304      	adds	r3, #4
 8021338:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 802133a:	69bb      	ldr	r3, [r7, #24]
 802133c:	3304      	adds	r3, #4
 802133e:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 8021340:	69fb      	ldr	r3, [r7, #28]
 8021342:	3b01      	subs	r3, #1
 8021344:	61fb      	str	r3, [r7, #28]
 8021346:	69fb      	ldr	r3, [r7, #28]
 8021348:	2b00      	cmp	r3, #0
 802134a:	d1ef      	bne.n	802132c <HAL_SDRAM_Read_32b+0x58>
    }

    /* Update the SDRAM controller state */
    hsdram->State = state;
 802134c:	68fb      	ldr	r3, [r7, #12]
 802134e:	7cfa      	ldrb	r2, [r7, #19]
 8021350:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 8021354:	68fb      	ldr	r3, [r7, #12]
 8021356:	2200      	movs	r2, #0
 8021358:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 802135c:	2300      	movs	r3, #0
 802135e:	e000      	b.n	8021362 <HAL_SDRAM_Read_32b+0x8e>
    return  HAL_ERROR;
 8021360:	2301      	movs	r3, #1
}
 8021362:	4618      	mov	r0, r3
 8021364:	3724      	adds	r7, #36	@ 0x24
 8021366:	46bd      	mov	sp, r7
 8021368:	f85d 7b04 	ldr.w	r7, [sp], #4
 802136c:	4770      	bx	lr

0802136e <HAL_SDRAM_Write_32b>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_32b(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer,
                                      uint32_t BufferSize)
{
 802136e:	b480      	push	{r7}
 8021370:	b089      	sub	sp, #36	@ 0x24
 8021372:	af00      	add	r7, sp, #0
 8021374:	60f8      	str	r0, [r7, #12]
 8021376:	60b9      	str	r1, [r7, #8]
 8021378:	607a      	str	r2, [r7, #4]
 802137a:	603b      	str	r3, [r7, #0]
  uint32_t size;
  __IO uint32_t *pSdramAddress = pAddress;
 802137c:	68bb      	ldr	r3, [r7, #8]
 802137e:	61bb      	str	r3, [r7, #24]
  uint32_t *psrcbuff = pSrcBuffer;
 8021380:	687b      	ldr	r3, [r7, #4]
 8021382:	617b      	str	r3, [r7, #20]

  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 8021384:	68fb      	ldr	r3, [r7, #12]
 8021386:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802138a:	b2db      	uxtb	r3, r3
 802138c:	2b02      	cmp	r3, #2
 802138e:	d101      	bne.n	8021394 <HAL_SDRAM_Write_32b+0x26>
  {
    return HAL_BUSY;
 8021390:	2302      	movs	r3, #2
 8021392:	e032      	b.n	80213fa <HAL_SDRAM_Write_32b+0x8c>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 8021394:	68fb      	ldr	r3, [r7, #12]
 8021396:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802139a:	b2db      	uxtb	r3, r3
 802139c:	2b01      	cmp	r3, #1
 802139e:	d12b      	bne.n	80213f8 <HAL_SDRAM_Write_32b+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 80213a0:	68fb      	ldr	r3, [r7, #12]
 80213a2:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80213a6:	2b01      	cmp	r3, #1
 80213a8:	d101      	bne.n	80213ae <HAL_SDRAM_Write_32b+0x40>
 80213aa:	2302      	movs	r3, #2
 80213ac:	e025      	b.n	80213fa <HAL_SDRAM_Write_32b+0x8c>
 80213ae:	68fb      	ldr	r3, [r7, #12]
 80213b0:	2201      	movs	r2, #1
 80213b2:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80213b6:	68fb      	ldr	r3, [r7, #12]
 80213b8:	2202      	movs	r2, #2
 80213ba:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Write data to memory */
    for (size = BufferSize; size != 0U; size--)
 80213be:	683b      	ldr	r3, [r7, #0]
 80213c0:	61fb      	str	r3, [r7, #28]
 80213c2:	e00c      	b.n	80213de <HAL_SDRAM_Write_32b+0x70>
    {
      *pSdramAddress = *psrcbuff;
 80213c4:	697b      	ldr	r3, [r7, #20]
 80213c6:	681a      	ldr	r2, [r3, #0]
 80213c8:	69bb      	ldr	r3, [r7, #24]
 80213ca:	601a      	str	r2, [r3, #0]
      psrcbuff++;
 80213cc:	697b      	ldr	r3, [r7, #20]
 80213ce:	3304      	adds	r3, #4
 80213d0:	617b      	str	r3, [r7, #20]
      pSdramAddress++;
 80213d2:	69bb      	ldr	r3, [r7, #24]
 80213d4:	3304      	adds	r3, #4
 80213d6:	61bb      	str	r3, [r7, #24]
    for (size = BufferSize; size != 0U; size--)
 80213d8:	69fb      	ldr	r3, [r7, #28]
 80213da:	3b01      	subs	r3, #1
 80213dc:	61fb      	str	r3, [r7, #28]
 80213de:	69fb      	ldr	r3, [r7, #28]
 80213e0:	2b00      	cmp	r3, #0
 80213e2:	d1ef      	bne.n	80213c4 <HAL_SDRAM_Write_32b+0x56>
    }

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80213e4:	68fb      	ldr	r3, [r7, #12]
 80213e6:	2201      	movs	r2, #1
 80213e8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 80213ec:	68fb      	ldr	r3, [r7, #12]
 80213ee:	2200      	movs	r2, #0
 80213f0:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
  else
  {
    return  HAL_ERROR;
  }

  return HAL_OK;
 80213f4:	2300      	movs	r3, #0
 80213f6:	e000      	b.n	80213fa <HAL_SDRAM_Write_32b+0x8c>
    return  HAL_ERROR;
 80213f8:	2301      	movs	r3, #1
}
 80213fa:	4618      	mov	r0, r3
 80213fc:	3724      	adds	r7, #36	@ 0x24
 80213fe:	46bd      	mov	sp, r7
 8021400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021404:	4770      	bx	lr
	...

08021408 <HAL_SDRAM_Read_DMA>:
  * @param  BufferSize Size of the buffer to read from memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Read_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pDstBuffer,
                                     uint32_t BufferSize)
{
 8021408:	b590      	push	{r4, r7, lr}
 802140a:	b089      	sub	sp, #36	@ 0x24
 802140c:	af02      	add	r7, sp, #8
 802140e:	60f8      	str	r0, [r7, #12]
 8021410:	60b9      	str	r1, [r7, #8]
 8021412:	607a      	str	r2, [r7, #4]
 8021414:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8021416:	68fb      	ldr	r3, [r7, #12]
 8021418:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 802141c:	75bb      	strb	r3, [r7, #22]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 802141e:	7dbb      	ldrb	r3, [r7, #22]
 8021420:	2b02      	cmp	r3, #2
 8021422:	d102      	bne.n	802142a <HAL_SDRAM_Read_DMA+0x22>
  {
    status = HAL_BUSY;
 8021424:	2302      	movs	r3, #2
 8021426:	75fb      	strb	r3, [r7, #23]
 8021428:	e037      	b.n	802149a <HAL_SDRAM_Read_DMA+0x92>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_WRITE_PROTECTED))
 802142a:	7dbb      	ldrb	r3, [r7, #22]
 802142c:	2b01      	cmp	r3, #1
 802142e:	d002      	beq.n	8021436 <HAL_SDRAM_Read_DMA+0x2e>
 8021430:	7dbb      	ldrb	r3, [r7, #22]
 8021432:	2b04      	cmp	r3, #4
 8021434:	d12f      	bne.n	8021496 <HAL_SDRAM_Read_DMA+0x8e>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 8021436:	68fb      	ldr	r3, [r7, #12]
 8021438:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 802143c:	2b01      	cmp	r3, #1
 802143e:	d101      	bne.n	8021444 <HAL_SDRAM_Read_DMA+0x3c>
 8021440:	2302      	movs	r3, #2
 8021442:	e02b      	b.n	802149c <HAL_SDRAM_Read_DMA+0x94>
 8021444:	68fb      	ldr	r3, [r7, #12]
 8021446:	2201      	movs	r2, #1
 8021448:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802144c:	68fb      	ldr	r3, [r7, #12]
 802144e:	2202      	movs	r2, #2
 8021450:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Configure DMA user callbacks */
    if (state == HAL_SDRAM_STATE_READY)
 8021454:	7dbb      	ldrb	r3, [r7, #22]
 8021456:	2b01      	cmp	r3, #1
 8021458:	d104      	bne.n	8021464 <HAL_SDRAM_Read_DMA+0x5c>
    {
      hsdram->hmdma->XferCpltCallback = SDRAM_DMACplt;
 802145a:	68fb      	ldr	r3, [r7, #12]
 802145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 802145e:	4a11      	ldr	r2, [pc, #68]	@ (80214a4 <HAL_SDRAM_Read_DMA+0x9c>)
 8021460:	645a      	str	r2, [r3, #68]	@ 0x44
 8021462:	e003      	b.n	802146c <HAL_SDRAM_Read_DMA+0x64>
    }
    else
    {
      hsdram->hmdma->XferCpltCallback = SDRAM_DMACpltProt;
 8021464:	68fb      	ldr	r3, [r7, #12]
 8021466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021468:	4a0f      	ldr	r2, [pc, #60]	@ (80214a8 <HAL_SDRAM_Read_DMA+0xa0>)
 802146a:	645a      	str	r2, [r3, #68]	@ 0x44
    }
    hsdram->hmdma->XferErrorCallback = SDRAM_DMAError;
 802146c:	68fb      	ldr	r3, [r7, #12]
 802146e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021470:	4a0e      	ldr	r2, [pc, #56]	@ (80214ac <HAL_SDRAM_Read_DMA+0xa4>)
 8021472:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Enable the DMA Stream */
    status = HAL_MDMA_Start_IT(hsdram->hmdma, (uint32_t)pAddress, (uint32_t)pDstBuffer, (uint32_t)(BufferSize * 4U), 1);
 8021474:	68fb      	ldr	r3, [r7, #12]
 8021476:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8021478:	68b9      	ldr	r1, [r7, #8]
 802147a:	687a      	ldr	r2, [r7, #4]
 802147c:	683b      	ldr	r3, [r7, #0]
 802147e:	009b      	lsls	r3, r3, #2
 8021480:	2401      	movs	r4, #1
 8021482:	9400      	str	r4, [sp, #0]
 8021484:	f7f7 fec6 	bl	8019214 <HAL_MDMA_Start_IT>
 8021488:	4603      	mov	r3, r0
 802148a:	75fb      	strb	r3, [r7, #23]

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 802148c:	68fb      	ldr	r3, [r7, #12]
 802148e:	2200      	movs	r2, #0
 8021490:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 8021494:	e001      	b.n	802149a <HAL_SDRAM_Read_DMA+0x92>
  }
  else
  {
    status = HAL_ERROR;
 8021496:	2301      	movs	r3, #1
 8021498:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 802149a:	7dfb      	ldrb	r3, [r7, #23]
}
 802149c:	4618      	mov	r0, r3
 802149e:	371c      	adds	r7, #28
 80214a0:	46bd      	mov	sp, r7
 80214a2:	bd90      	pop	{r4, r7, pc}
 80214a4:	080215ff 	.word	0x080215ff
 80214a8:	08021633 	.word	0x08021633
 80214ac:	08021667 	.word	0x08021667

080214b0 <HAL_SDRAM_Write_DMA>:
  * @param  BufferSize Size of the buffer to write to memory
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_Write_DMA(SDRAM_HandleTypeDef *hsdram, uint32_t *pAddress, uint32_t *pSrcBuffer,
                                      uint32_t BufferSize)
{
 80214b0:	b590      	push	{r4, r7, lr}
 80214b2:	b089      	sub	sp, #36	@ 0x24
 80214b4:	af02      	add	r7, sp, #8
 80214b6:	60f8      	str	r0, [r7, #12]
 80214b8:	60b9      	str	r1, [r7, #8]
 80214ba:	607a      	str	r2, [r7, #4]
 80214bc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status;

  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80214be:	68fb      	ldr	r3, [r7, #12]
 80214c0:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80214c4:	b2db      	uxtb	r3, r3
 80214c6:	2b02      	cmp	r3, #2
 80214c8:	d102      	bne.n	80214d0 <HAL_SDRAM_Write_DMA+0x20>
  {
    status = HAL_BUSY;
 80214ca:	2302      	movs	r3, #2
 80214cc:	75fb      	strb	r3, [r7, #23]
 80214ce:	e02f      	b.n	8021530 <HAL_SDRAM_Write_DMA+0x80>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80214d0:	68fb      	ldr	r3, [r7, #12]
 80214d2:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80214d6:	b2db      	uxtb	r3, r3
 80214d8:	2b01      	cmp	r3, #1
 80214da:	d127      	bne.n	802152c <HAL_SDRAM_Write_DMA+0x7c>
  {
    /* Process Locked */
    __HAL_LOCK(hsdram);
 80214dc:	68fb      	ldr	r3, [r7, #12]
 80214de:	f893 302d 	ldrb.w	r3, [r3, #45]	@ 0x2d
 80214e2:	2b01      	cmp	r3, #1
 80214e4:	d101      	bne.n	80214ea <HAL_SDRAM_Write_DMA+0x3a>
 80214e6:	2302      	movs	r3, #2
 80214e8:	e023      	b.n	8021532 <HAL_SDRAM_Write_DMA+0x82>
 80214ea:	68fb      	ldr	r3, [r7, #12]
 80214ec:	2201      	movs	r2, #1
 80214ee:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d

    /* Update the SDRAM controller state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80214f2:	68fb      	ldr	r3, [r7, #12]
 80214f4:	2202      	movs	r2, #2
 80214f6:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Configure DMA user callbacks */
    hsdram->hmdma->XferCpltCallback = SDRAM_DMACplt;
 80214fa:	68fb      	ldr	r3, [r7, #12]
 80214fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80214fe:	4a0f      	ldr	r2, [pc, #60]	@ (802153c <HAL_SDRAM_Write_DMA+0x8c>)
 8021500:	645a      	str	r2, [r3, #68]	@ 0x44
    hsdram->hmdma->XferErrorCallback = SDRAM_DMAError;
 8021502:	68fb      	ldr	r3, [r7, #12]
 8021504:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8021506:	4a0e      	ldr	r2, [pc, #56]	@ (8021540 <HAL_SDRAM_Write_DMA+0x90>)
 8021508:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Enable the DMA Stream */
    status = HAL_MDMA_Start_IT(hsdram->hmdma, (uint32_t)pSrcBuffer, (uint32_t)pAddress, (uint32_t)(BufferSize * 4U), 1);
 802150a:	68fb      	ldr	r3, [r7, #12]
 802150c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 802150e:	6879      	ldr	r1, [r7, #4]
 8021510:	68ba      	ldr	r2, [r7, #8]
 8021512:	683b      	ldr	r3, [r7, #0]
 8021514:	009b      	lsls	r3, r3, #2
 8021516:	2401      	movs	r4, #1
 8021518:	9400      	str	r4, [sp, #0]
 802151a:	f7f7 fe7b 	bl	8019214 <HAL_MDMA_Start_IT>
 802151e:	4603      	mov	r3, r0
 8021520:	75fb      	strb	r3, [r7, #23]

    /* Process Unlocked */
    __HAL_UNLOCK(hsdram);
 8021522:	68fb      	ldr	r3, [r7, #12]
 8021524:	2200      	movs	r2, #0
 8021526:	f883 202d 	strb.w	r2, [r3, #45]	@ 0x2d
 802152a:	e001      	b.n	8021530 <HAL_SDRAM_Write_DMA+0x80>
  }
  else
  {
    status = HAL_ERROR;
 802152c:	2301      	movs	r3, #1
 802152e:	75fb      	strb	r3, [r7, #23]
  }

  return status;
 8021530:	7dfb      	ldrb	r3, [r7, #23]
}
 8021532:	4618      	mov	r0, r3
 8021534:	371c      	adds	r7, #28
 8021536:	46bd      	mov	sp, r7
 8021538:	bd90      	pop	{r4, r7, pc}
 802153a:	bf00      	nop
 802153c:	080215ff 	.word	0x080215ff
 8021540:	08021667 	.word	0x08021667

08021544 <HAL_SDRAM_SendCommand>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_SendCommand(SDRAM_HandleTypeDef *hsdram, FMC_SDRAM_CommandTypeDef *Command,
                                        uint32_t Timeout)
{
 8021544:	b580      	push	{r7, lr}
 8021546:	b086      	sub	sp, #24
 8021548:	af00      	add	r7, sp, #0
 802154a:	60f8      	str	r0, [r7, #12]
 802154c:	60b9      	str	r1, [r7, #8]
 802154e:	607a      	str	r2, [r7, #4]
  HAL_SDRAM_StateTypeDef state = hsdram->State;
 8021550:	68fb      	ldr	r3, [r7, #12]
 8021552:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 8021556:	75fb      	strb	r3, [r7, #23]

  /* Check the SDRAM controller state */
  if (state == HAL_SDRAM_STATE_BUSY)
 8021558:	7dfb      	ldrb	r3, [r7, #23]
 802155a:	2b02      	cmp	r3, #2
 802155c:	d101      	bne.n	8021562 <HAL_SDRAM_SendCommand+0x1e>
  {
    return HAL_BUSY;
 802155e:	2302      	movs	r3, #2
 8021560:	e021      	b.n	80215a6 <HAL_SDRAM_SendCommand+0x62>
  }
  else if ((state == HAL_SDRAM_STATE_READY) || (state == HAL_SDRAM_STATE_PRECHARGED))
 8021562:	7dfb      	ldrb	r3, [r7, #23]
 8021564:	2b01      	cmp	r3, #1
 8021566:	d002      	beq.n	802156e <HAL_SDRAM_SendCommand+0x2a>
 8021568:	7dfb      	ldrb	r3, [r7, #23]
 802156a:	2b05      	cmp	r3, #5
 802156c:	d118      	bne.n	80215a0 <HAL_SDRAM_SendCommand+0x5c>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 802156e:	68fb      	ldr	r3, [r7, #12]
 8021570:	2202      	movs	r2, #2
 8021572:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Send SDRAM command */
    (void)FMC_SDRAM_SendCommand(hsdram->Instance, Command, Timeout);
 8021576:	68fb      	ldr	r3, [r7, #12]
 8021578:	681b      	ldr	r3, [r3, #0]
 802157a:	687a      	ldr	r2, [r7, #4]
 802157c:	68b9      	ldr	r1, [r7, #8]
 802157e:	4618      	mov	r0, r3
 8021580:	f000 f974 	bl	802186c <FMC_SDRAM_SendCommand>

    /* Update the SDRAM controller state state */
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8021584:	68bb      	ldr	r3, [r7, #8]
 8021586:	681b      	ldr	r3, [r3, #0]
 8021588:	2b02      	cmp	r3, #2
 802158a:	d104      	bne.n	8021596 <HAL_SDRAM_SendCommand+0x52>
    {
      hsdram->State = HAL_SDRAM_STATE_PRECHARGED;
 802158c:	68fb      	ldr	r3, [r7, #12]
 802158e:	2205      	movs	r2, #5
 8021590:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 8021594:	e006      	b.n	80215a4 <HAL_SDRAM_SendCommand+0x60>
    }
    else
    {
      hsdram->State = HAL_SDRAM_STATE_READY;
 8021596:	68fb      	ldr	r3, [r7, #12]
 8021598:	2201      	movs	r2, #1
 802159a:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
    if (Command->CommandMode == FMC_SDRAM_CMD_PALL)
 802159e:	e001      	b.n	80215a4 <HAL_SDRAM_SendCommand+0x60>
    }
  }
  else
  {
    return HAL_ERROR;
 80215a0:	2301      	movs	r3, #1
 80215a2:	e000      	b.n	80215a6 <HAL_SDRAM_SendCommand+0x62>
  }

  return HAL_OK;
 80215a4:	2300      	movs	r3, #0
}
 80215a6:	4618      	mov	r0, r3
 80215a8:	3718      	adds	r7, #24
 80215aa:	46bd      	mov	sp, r7
 80215ac:	bd80      	pop	{r7, pc}

080215ae <HAL_SDRAM_ProgramRefreshRate>:
  *                the configuration information for SDRAM module.
  * @param  RefreshRate The SDRAM refresh rate value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SDRAM_ProgramRefreshRate(SDRAM_HandleTypeDef *hsdram, uint32_t RefreshRate)
{
 80215ae:	b580      	push	{r7, lr}
 80215b0:	b082      	sub	sp, #8
 80215b2:	af00      	add	r7, sp, #0
 80215b4:	6078      	str	r0, [r7, #4]
 80215b6:	6039      	str	r1, [r7, #0]
  /* Check the SDRAM controller state */
  if (hsdram->State == HAL_SDRAM_STATE_BUSY)
 80215b8:	687b      	ldr	r3, [r7, #4]
 80215ba:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80215be:	b2db      	uxtb	r3, r3
 80215c0:	2b02      	cmp	r3, #2
 80215c2:	d101      	bne.n	80215c8 <HAL_SDRAM_ProgramRefreshRate+0x1a>
  {
    return HAL_BUSY;
 80215c4:	2302      	movs	r3, #2
 80215c6:	e016      	b.n	80215f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
  }
  else if (hsdram->State == HAL_SDRAM_STATE_READY)
 80215c8:	687b      	ldr	r3, [r7, #4]
 80215ca:	f893 302c 	ldrb.w	r3, [r3, #44]	@ 0x2c
 80215ce:	b2db      	uxtb	r3, r3
 80215d0:	2b01      	cmp	r3, #1
 80215d2:	d10f      	bne.n	80215f4 <HAL_SDRAM_ProgramRefreshRate+0x46>
  {
    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_BUSY;
 80215d4:	687b      	ldr	r3, [r7, #4]
 80215d6:	2202      	movs	r2, #2
 80215d8:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

    /* Program the refresh rate */
    (void)FMC_SDRAM_ProgramRefreshRate(hsdram->Instance, RefreshRate);
 80215dc:	687b      	ldr	r3, [r7, #4]
 80215de:	681b      	ldr	r3, [r3, #0]
 80215e0:	6839      	ldr	r1, [r7, #0]
 80215e2:	4618      	mov	r0, r3
 80215e4:	f000 f966 	bl	80218b4 <FMC_SDRAM_ProgramRefreshRate>

    /* Update the SDRAM state */
    hsdram->State = HAL_SDRAM_STATE_READY;
 80215e8:	687b      	ldr	r3, [r7, #4]
 80215ea:	2201      	movs	r2, #1
 80215ec:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c
  else
  {
    return HAL_ERROR;
  }

  return HAL_OK;
 80215f0:	2300      	movs	r3, #0
 80215f2:	e000      	b.n	80215f6 <HAL_SDRAM_ProgramRefreshRate+0x48>
    return HAL_ERROR;
 80215f4:	2301      	movs	r3, #1
}
 80215f6:	4618      	mov	r0, r3
 80215f8:	3708      	adds	r7, #8
 80215fa:	46bd      	mov	sp, r7
 80215fc:	bd80      	pop	{r7, pc}

080215fe <SDRAM_DMACplt>:
  * @brief  MDMA SDRAM process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void SDRAM_DMACplt(MDMA_HandleTypeDef *hmdma)
{
 80215fe:	b580      	push	{r7, lr}
 8021600:	b084      	sub	sp, #16
 8021602:	af00      	add	r7, sp, #0
 8021604:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hmdma->Parent);
 8021606:	687b      	ldr	r3, [r7, #4]
 8021608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802160a:	60fb      	str	r3, [r7, #12]

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 802160c:	687b      	ldr	r3, [r7, #4]
 802160e:	681b      	ldr	r3, [r3, #0]
 8021610:	68da      	ldr	r2, [r3, #12]
 8021612:	687b      	ldr	r3, [r7, #4]
 8021614:	681b      	ldr	r3, [r3, #0]
 8021616:	f022 0201 	bic.w	r2, r2, #1
 802161a:	60da      	str	r2, [r3, #12]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_READY;
 802161c:	68fb      	ldr	r3, [r7, #12]
 802161e:	2201      	movs	r2, #1
 8021620:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferCpltCallback(hmdma);
#else
  HAL_SDRAM_DMA_XferCpltCallback(hmdma);
 8021624:	6878      	ldr	r0, [r7, #4]
 8021626:	f7e9 f99f 	bl	800a968 <HAL_SDRAM_DMA_XferCpltCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 802162a:	bf00      	nop
 802162c:	3710      	adds	r7, #16
 802162e:	46bd      	mov	sp, r7
 8021630:	bd80      	pop	{r7, pc}

08021632 <SDRAM_DMACpltProt>:
  * @brief  MDMA SRAM process complete callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void SDRAM_DMACpltProt(MDMA_HandleTypeDef *hmdma)
{
 8021632:	b580      	push	{r7, lr}
 8021634:	b084      	sub	sp, #16
 8021636:	af00      	add	r7, sp, #0
 8021638:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hmdma->Parent);
 802163a:	687b      	ldr	r3, [r7, #4]
 802163c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 802163e:	60fb      	str	r3, [r7, #12]

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8021640:	687b      	ldr	r3, [r7, #4]
 8021642:	681b      	ldr	r3, [r3, #0]
 8021644:	68da      	ldr	r2, [r3, #12]
 8021646:	687b      	ldr	r3, [r7, #4]
 8021648:	681b      	ldr	r3, [r3, #0]
 802164a:	f022 0201 	bic.w	r2, r2, #1
 802164e:	60da      	str	r2, [r3, #12]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_WRITE_PROTECTED;
 8021650:	68fb      	ldr	r3, [r7, #12]
 8021652:	2204      	movs	r2, #4
 8021654:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferCpltCallback(hmdma);
#else
  HAL_SDRAM_DMA_XferCpltCallback(hmdma);
 8021658:	6878      	ldr	r0, [r7, #4]
 802165a:	f7e9 f985 	bl	800a968 <HAL_SDRAM_DMA_XferCpltCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 802165e:	bf00      	nop
 8021660:	3710      	adds	r7, #16
 8021662:	46bd      	mov	sp, r7
 8021664:	bd80      	pop	{r7, pc}

08021666 <SDRAM_DMAError>:
  * @brief  MDMA SDRAM error callback.
  * @param  hmdma : MDMA handle
  * @retval None
  */
static void SDRAM_DMAError(MDMA_HandleTypeDef *hmdma)
{
 8021666:	b580      	push	{r7, lr}
 8021668:	b084      	sub	sp, #16
 802166a:	af00      	add	r7, sp, #0
 802166c:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  SDRAM_HandleTypeDef *hsdram = (SDRAM_HandleTypeDef *)(hmdma->Parent);
 802166e:	687b      	ldr	r3, [r7, #4]
 8021670:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8021672:	60fb      	str	r3, [r7, #12]

  /* Disable the MDMA channel */
  __HAL_MDMA_DISABLE(hmdma);
 8021674:	687b      	ldr	r3, [r7, #4]
 8021676:	681b      	ldr	r3, [r3, #0]
 8021678:	68da      	ldr	r2, [r3, #12]
 802167a:	687b      	ldr	r3, [r7, #4]
 802167c:	681b      	ldr	r3, [r3, #0]
 802167e:	f022 0201 	bic.w	r2, r2, #1
 8021682:	60da      	str	r2, [r3, #12]

  /* Update the SDRAM controller state */
  hsdram->State = HAL_SDRAM_STATE_ERROR;
 8021684:	68fb      	ldr	r3, [r7, #12]
 8021686:	2203      	movs	r2, #3
 8021688:	f883 202c 	strb.w	r2, [r3, #44]	@ 0x2c

#if (USE_HAL_SDRAM_REGISTER_CALLBACKS == 1)
  hsdram->DmaXferErrorCallback(hmdma);
#else
  HAL_SDRAM_DMA_XferErrorCallback(hmdma);
 802168c:	6878      	ldr	r0, [r7, #4]
 802168e:	f7e9 f97b 	bl	800a988 <HAL_SDRAM_DMA_XferErrorCallback>
#endif /* USE_HAL_SDRAM_REGISTER_CALLBACKS */
}
 8021692:	bf00      	nop
 8021694:	3710      	adds	r7, #16
 8021696:	46bd      	mov	sp, r7
 8021698:	bd80      	pop	{r7, pc}
	...

0802169c <FMC_SDRAM_Init>:
  * @param  Device Pointer to SDRAM device instance
  * @param  Init Pointer to SDRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Init(FMC_SDRAM_TypeDef *Device, const FMC_SDRAM_InitTypeDef *Init)
{
 802169c:	b480      	push	{r7}
 802169e:	b083      	sub	sp, #12
 80216a0:	af00      	add	r7, sp, #0
 80216a2:	6078      	str	r0, [r7, #4]
 80216a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_FMC_SDCLOCK_PERIOD(Init->SDClockPeriod));
  assert_param(IS_FMC_READ_BURST(Init->ReadBurst));
  assert_param(IS_FMC_READPIPE_DELAY(Init->ReadPipeDelay));

  /* Set SDRAM bank configuration parameters */
  if (Init->SDBank == FMC_SDRAM_BANK1)
 80216a6:	683b      	ldr	r3, [r7, #0]
 80216a8:	681b      	ldr	r3, [r3, #0]
 80216aa:	2b00      	cmp	r3, #0
 80216ac:	d121      	bne.n	80216f2 <FMC_SDRAM_Init+0x56>
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80216ae:	687b      	ldr	r3, [r7, #4]
 80216b0:	681a      	ldr	r2, [r3, #0]
 80216b2:	4b27      	ldr	r3, [pc, #156]	@ (8021750 <FMC_SDRAM_Init+0xb4>)
 80216b4:	4013      	ands	r3, r2
 80216b6:	683a      	ldr	r2, [r7, #0]
 80216b8:	6851      	ldr	r1, [r2, #4]
 80216ba:	683a      	ldr	r2, [r7, #0]
 80216bc:	6892      	ldr	r2, [r2, #8]
 80216be:	4311      	orrs	r1, r2
 80216c0:	683a      	ldr	r2, [r7, #0]
 80216c2:	68d2      	ldr	r2, [r2, #12]
 80216c4:	4311      	orrs	r1, r2
 80216c6:	683a      	ldr	r2, [r7, #0]
 80216c8:	6912      	ldr	r2, [r2, #16]
 80216ca:	4311      	orrs	r1, r2
 80216cc:	683a      	ldr	r2, [r7, #0]
 80216ce:	6952      	ldr	r2, [r2, #20]
 80216d0:	4311      	orrs	r1, r2
 80216d2:	683a      	ldr	r2, [r7, #0]
 80216d4:	6992      	ldr	r2, [r2, #24]
 80216d6:	4311      	orrs	r1, r2
 80216d8:	683a      	ldr	r2, [r7, #0]
 80216da:	69d2      	ldr	r2, [r2, #28]
 80216dc:	4311      	orrs	r1, r2
 80216de:	683a      	ldr	r2, [r7, #0]
 80216e0:	6a12      	ldr	r2, [r2, #32]
 80216e2:	4311      	orrs	r1, r2
 80216e4:	683a      	ldr	r2, [r7, #0]
 80216e6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80216e8:	430a      	orrs	r2, r1
 80216ea:	431a      	orrs	r2, r3
 80216ec:	687b      	ldr	r3, [r7, #4]
 80216ee:	601a      	str	r2, [r3, #0]
 80216f0:	e026      	b.n	8021740 <FMC_SDRAM_Init+0xa4>
                Init->ReadBurst          |
                Init->ReadPipeDelay));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK1],
 80216f2:	687b      	ldr	r3, [r7, #4]
 80216f4:	681b      	ldr	r3, [r3, #0]
 80216f6:	f423 42f8 	bic.w	r2, r3, #31744	@ 0x7c00
 80216fa:	683b      	ldr	r3, [r7, #0]
 80216fc:	69d9      	ldr	r1, [r3, #28]
 80216fe:	683b      	ldr	r3, [r7, #0]
 8021700:	6a1b      	ldr	r3, [r3, #32]
 8021702:	4319      	orrs	r1, r3
 8021704:	683b      	ldr	r3, [r7, #0]
 8021706:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8021708:	430b      	orrs	r3, r1
 802170a:	431a      	orrs	r2, r3
 802170c:	687b      	ldr	r3, [r7, #4]
 802170e:	601a      	str	r2, [r3, #0]
               FMC_SDCRx_RPIPE,
               (Init->SDClockPeriod      |
                Init->ReadBurst          |
                Init->ReadPipeDelay));

    MODIFY_REG(Device->SDCR[FMC_SDRAM_BANK2],
 8021710:	687b      	ldr	r3, [r7, #4]
 8021712:	685a      	ldr	r2, [r3, #4]
 8021714:	4b0e      	ldr	r3, [pc, #56]	@ (8021750 <FMC_SDRAM_Init+0xb4>)
 8021716:	4013      	ands	r3, r2
 8021718:	683a      	ldr	r2, [r7, #0]
 802171a:	6851      	ldr	r1, [r2, #4]
 802171c:	683a      	ldr	r2, [r7, #0]
 802171e:	6892      	ldr	r2, [r2, #8]
 8021720:	4311      	orrs	r1, r2
 8021722:	683a      	ldr	r2, [r7, #0]
 8021724:	68d2      	ldr	r2, [r2, #12]
 8021726:	4311      	orrs	r1, r2
 8021728:	683a      	ldr	r2, [r7, #0]
 802172a:	6912      	ldr	r2, [r2, #16]
 802172c:	4311      	orrs	r1, r2
 802172e:	683a      	ldr	r2, [r7, #0]
 8021730:	6952      	ldr	r2, [r2, #20]
 8021732:	4311      	orrs	r1, r2
 8021734:	683a      	ldr	r2, [r7, #0]
 8021736:	6992      	ldr	r2, [r2, #24]
 8021738:	430a      	orrs	r2, r1
 802173a:	431a      	orrs	r2, r3
 802173c:	687b      	ldr	r3, [r7, #4]
 802173e:	605a      	str	r2, [r3, #4]
                Init->InternalBankNumber |
                Init->CASLatency         |
                Init->WriteProtection));
  }

  return HAL_OK;
 8021740:	2300      	movs	r3, #0
}
 8021742:	4618      	mov	r0, r3
 8021744:	370c      	adds	r7, #12
 8021746:	46bd      	mov	sp, r7
 8021748:	f85d 7b04 	ldr.w	r7, [sp], #4
 802174c:	4770      	bx	lr
 802174e:	bf00      	nop
 8021750:	ffff8000 	.word	0xffff8000

08021754 <FMC_SDRAM_Timing_Init>:
  * @param  Bank SDRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_Timing_Init(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8021754:	b480      	push	{r7}
 8021756:	b085      	sub	sp, #20
 8021758:	af00      	add	r7, sp, #0
 802175a:	60f8      	str	r0, [r7, #12]
 802175c:	60b9      	str	r1, [r7, #8]
 802175e:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_RP_DELAY(Timing->RPDelay));
  assert_param(IS_FMC_RCD_DELAY(Timing->RCDDelay));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* Set SDRAM device timing parameters */
  if (Bank == FMC_SDRAM_BANK1)
 8021760:	687b      	ldr	r3, [r7, #4]
 8021762:	2b00      	cmp	r3, #0
 8021764:	d128      	bne.n	80217b8 <FMC_SDRAM_Timing_Init+0x64>
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 8021766:	68fb      	ldr	r3, [r7, #12]
 8021768:	689b      	ldr	r3, [r3, #8]
 802176a:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 802176e:	68bb      	ldr	r3, [r7, #8]
 8021770:	681b      	ldr	r3, [r3, #0]
 8021772:	1e59      	subs	r1, r3, #1
 8021774:	68bb      	ldr	r3, [r7, #8]
 8021776:	685b      	ldr	r3, [r3, #4]
 8021778:	3b01      	subs	r3, #1
 802177a:	011b      	lsls	r3, r3, #4
 802177c:	4319      	orrs	r1, r3
 802177e:	68bb      	ldr	r3, [r7, #8]
 8021780:	689b      	ldr	r3, [r3, #8]
 8021782:	3b01      	subs	r3, #1
 8021784:	021b      	lsls	r3, r3, #8
 8021786:	4319      	orrs	r1, r3
 8021788:	68bb      	ldr	r3, [r7, #8]
 802178a:	68db      	ldr	r3, [r3, #12]
 802178c:	3b01      	subs	r3, #1
 802178e:	031b      	lsls	r3, r3, #12
 8021790:	4319      	orrs	r1, r3
 8021792:	68bb      	ldr	r3, [r7, #8]
 8021794:	691b      	ldr	r3, [r3, #16]
 8021796:	3b01      	subs	r3, #1
 8021798:	041b      	lsls	r3, r3, #16
 802179a:	4319      	orrs	r1, r3
 802179c:	68bb      	ldr	r3, [r7, #8]
 802179e:	695b      	ldr	r3, [r3, #20]
 80217a0:	3b01      	subs	r3, #1
 80217a2:	051b      	lsls	r3, r3, #20
 80217a4:	4319      	orrs	r1, r3
 80217a6:	68bb      	ldr	r3, [r7, #8]
 80217a8:	699b      	ldr	r3, [r3, #24]
 80217aa:	3b01      	subs	r3, #1
 80217ac:	061b      	lsls	r3, r3, #24
 80217ae:	430b      	orrs	r3, r1
 80217b0:	431a      	orrs	r2, r3
 80217b2:	68fb      	ldr	r3, [r7, #12]
 80217b4:	609a      	str	r2, [r3, #8]
 80217b6:	e02d      	b.n	8021814 <FMC_SDRAM_Timing_Init+0xc0>
                (((Timing->RPDelay) - 1U)              << FMC_SDTRx_TRP_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }
  else /* FMC_Bank2_SDRAM */
  {
    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK1],
 80217b8:	68fb      	ldr	r3, [r7, #12]
 80217ba:	689a      	ldr	r2, [r3, #8]
 80217bc:	4b19      	ldr	r3, [pc, #100]	@ (8021824 <FMC_SDRAM_Timing_Init+0xd0>)
 80217be:	4013      	ands	r3, r2
 80217c0:	68ba      	ldr	r2, [r7, #8]
 80217c2:	68d2      	ldr	r2, [r2, #12]
 80217c4:	3a01      	subs	r2, #1
 80217c6:	0311      	lsls	r1, r2, #12
 80217c8:	68ba      	ldr	r2, [r7, #8]
 80217ca:	6952      	ldr	r2, [r2, #20]
 80217cc:	3a01      	subs	r2, #1
 80217ce:	0512      	lsls	r2, r2, #20
 80217d0:	430a      	orrs	r2, r1
 80217d2:	431a      	orrs	r2, r3
 80217d4:	68fb      	ldr	r3, [r7, #12]
 80217d6:	609a      	str	r2, [r3, #8]
               FMC_SDTRx_TRC |
               FMC_SDTRx_TRP,
               (((Timing->RowCycleDelay) - 1U)         << FMC_SDTRx_TRC_Pos)  |
               (((Timing->RPDelay) - 1U)               << FMC_SDTRx_TRP_Pos));

    MODIFY_REG(Device->SDTR[FMC_SDRAM_BANK2],
 80217d8:	68fb      	ldr	r3, [r7, #12]
 80217da:	68db      	ldr	r3, [r3, #12]
 80217dc:	f003 4270 	and.w	r2, r3, #4026531840	@ 0xf0000000
 80217e0:	68bb      	ldr	r3, [r7, #8]
 80217e2:	681b      	ldr	r3, [r3, #0]
 80217e4:	1e59      	subs	r1, r3, #1
 80217e6:	68bb      	ldr	r3, [r7, #8]
 80217e8:	685b      	ldr	r3, [r3, #4]
 80217ea:	3b01      	subs	r3, #1
 80217ec:	011b      	lsls	r3, r3, #4
 80217ee:	4319      	orrs	r1, r3
 80217f0:	68bb      	ldr	r3, [r7, #8]
 80217f2:	689b      	ldr	r3, [r3, #8]
 80217f4:	3b01      	subs	r3, #1
 80217f6:	021b      	lsls	r3, r3, #8
 80217f8:	4319      	orrs	r1, r3
 80217fa:	68bb      	ldr	r3, [r7, #8]
 80217fc:	691b      	ldr	r3, [r3, #16]
 80217fe:	3b01      	subs	r3, #1
 8021800:	041b      	lsls	r3, r3, #16
 8021802:	4319      	orrs	r1, r3
 8021804:	68bb      	ldr	r3, [r7, #8]
 8021806:	699b      	ldr	r3, [r3, #24]
 8021808:	3b01      	subs	r3, #1
 802180a:	061b      	lsls	r3, r3, #24
 802180c:	430b      	orrs	r3, r1
 802180e:	431a      	orrs	r2, r3
 8021810:	68fb      	ldr	r3, [r7, #12]
 8021812:	60da      	str	r2, [r3, #12]
                (((Timing->SelfRefreshTime) - 1U)      << FMC_SDTRx_TRAS_Pos) |
                (((Timing->WriteRecoveryTime) - 1U)    << FMC_SDTRx_TWR_Pos)  |
                (((Timing->RCDDelay) - 1U)             << FMC_SDTRx_TRCD_Pos)));
  }

  return HAL_OK;
 8021814:	2300      	movs	r3, #0
}
 8021816:	4618      	mov	r0, r3
 8021818:	3714      	adds	r7, #20
 802181a:	46bd      	mov	sp, r7
 802181c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021820:	4770      	bx	lr
 8021822:	bf00      	nop
 8021824:	ff0f0fff 	.word	0xff0f0fff

08021828 <FMC_SDRAM_DeInit>:
  * @brief  DeInitializes the FMC_SDRAM peripheral
  * @param  Device Pointer to SDRAM device instance
  * @retval HAL status
  */
HAL_StatusTypeDef FMC_SDRAM_DeInit(FMC_SDRAM_TypeDef *Device, uint32_t Bank)
{
 8021828:	b480      	push	{r7}
 802182a:	b083      	sub	sp, #12
 802182c:	af00      	add	r7, sp, #0
 802182e:	6078      	str	r0, [r7, #4]
 8021830:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_SDRAM_BANK(Bank));

  /* De-initialize the SDRAM device */
  Device->SDCR[Bank] = 0x000002D0U;
 8021832:	687b      	ldr	r3, [r7, #4]
 8021834:	683a      	ldr	r2, [r7, #0]
 8021836:	f44f 7134 	mov.w	r1, #720	@ 0x2d0
 802183a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDTR[Bank] = 0x0FFFFFFFU;
 802183e:	687b      	ldr	r3, [r7, #4]
 8021840:	683a      	ldr	r2, [r7, #0]
 8021842:	3202      	adds	r2, #2
 8021844:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8021848:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  Device->SDCMR      = 0x00000000U;
 802184c:	687b      	ldr	r3, [r7, #4]
 802184e:	2200      	movs	r2, #0
 8021850:	611a      	str	r2, [r3, #16]
  Device->SDRTR      = 0x00000000U;
 8021852:	687b      	ldr	r3, [r7, #4]
 8021854:	2200      	movs	r2, #0
 8021856:	615a      	str	r2, [r3, #20]
  Device->SDSR       = 0x00000000U;
 8021858:	687b      	ldr	r3, [r7, #4]
 802185a:	2200      	movs	r2, #0
 802185c:	619a      	str	r2, [r3, #24]

  return HAL_OK;
 802185e:	2300      	movs	r3, #0
}
 8021860:	4618      	mov	r0, r3
 8021862:	370c      	adds	r7, #12
 8021864:	46bd      	mov	sp, r7
 8021866:	f85d 7b04 	ldr.w	r7, [sp], #4
 802186a:	4770      	bx	lr

0802186c <FMC_SDRAM_SendCommand>:
  * @param  Timeout Timeout wait value
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_SendCommand(FMC_SDRAM_TypeDef *Device,
                                        const FMC_SDRAM_CommandTypeDef *Command, uint32_t Timeout)
{
 802186c:	b480      	push	{r7}
 802186e:	b085      	sub	sp, #20
 8021870:	af00      	add	r7, sp, #0
 8021872:	60f8      	str	r0, [r7, #12]
 8021874:	60b9      	str	r1, [r7, #8]
 8021876:	607a      	str	r2, [r7, #4]
  assert_param(IS_FMC_COMMAND_TARGET(Command->CommandTarget));
  assert_param(IS_FMC_AUTOREFRESH_NUMBER(Command->AutoRefreshNumber));
  assert_param(IS_FMC_MODE_REGISTER(Command->ModeRegisterDefinition));

  /* Set command register */
  MODIFY_REG(Device->SDCMR, (FMC_SDCMR_MODE | FMC_SDCMR_CTB2 | FMC_SDCMR_CTB1 | FMC_SDCMR_NRFS | FMC_SDCMR_MRD),
 8021878:	68fb      	ldr	r3, [r7, #12]
 802187a:	691a      	ldr	r2, [r3, #16]
 802187c:	4b0c      	ldr	r3, [pc, #48]	@ (80218b0 <FMC_SDRAM_SendCommand+0x44>)
 802187e:	4013      	ands	r3, r2
 8021880:	68ba      	ldr	r2, [r7, #8]
 8021882:	6811      	ldr	r1, [r2, #0]
 8021884:	68ba      	ldr	r2, [r7, #8]
 8021886:	6852      	ldr	r2, [r2, #4]
 8021888:	4311      	orrs	r1, r2
 802188a:	68ba      	ldr	r2, [r7, #8]
 802188c:	6892      	ldr	r2, [r2, #8]
 802188e:	3a01      	subs	r2, #1
 8021890:	0152      	lsls	r2, r2, #5
 8021892:	4311      	orrs	r1, r2
 8021894:	68ba      	ldr	r2, [r7, #8]
 8021896:	68d2      	ldr	r2, [r2, #12]
 8021898:	0252      	lsls	r2, r2, #9
 802189a:	430a      	orrs	r2, r1
 802189c:	431a      	orrs	r2, r3
 802189e:	68fb      	ldr	r3, [r7, #12]
 80218a0:	611a      	str	r2, [r3, #16]
             ((Command->CommandMode) | (Command->CommandTarget) |
              (((Command->AutoRefreshNumber) - 1U) << FMC_SDCMR_NRFS_Pos) |
              ((Command->ModeRegisterDefinition) << FMC_SDCMR_MRD_Pos)));
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Timeout);
  return HAL_OK;
 80218a2:	2300      	movs	r3, #0
}
 80218a4:	4618      	mov	r0, r3
 80218a6:	3714      	adds	r7, #20
 80218a8:	46bd      	mov	sp, r7
 80218aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218ae:	4770      	bx	lr
 80218b0:	ffc00000 	.word	0xffc00000

080218b4 <FMC_SDRAM_ProgramRefreshRate>:
  * @param  Device Pointer to SDRAM device instance
  * @param  RefreshRate The SDRAM refresh rate value.
  * @retval HAL state
  */
HAL_StatusTypeDef FMC_SDRAM_ProgramRefreshRate(FMC_SDRAM_TypeDef *Device, uint32_t RefreshRate)
{
 80218b4:	b480      	push	{r7}
 80218b6:	b083      	sub	sp, #12
 80218b8:	af00      	add	r7, sp, #0
 80218ba:	6078      	str	r0, [r7, #4]
 80218bc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FMC_SDRAM_DEVICE(Device));
  assert_param(IS_FMC_REFRESH_RATE(RefreshRate));

  /* Set the refresh rate in command register */
  MODIFY_REG(Device->SDRTR, FMC_SDRTR_COUNT, (RefreshRate << FMC_SDRTR_COUNT_Pos));
 80218be:	687b      	ldr	r3, [r7, #4]
 80218c0:	695a      	ldr	r2, [r3, #20]
 80218c2:	4b07      	ldr	r3, [pc, #28]	@ (80218e0 <FMC_SDRAM_ProgramRefreshRate+0x2c>)
 80218c4:	4013      	ands	r3, r2
 80218c6:	683a      	ldr	r2, [r7, #0]
 80218c8:	0052      	lsls	r2, r2, #1
 80218ca:	431a      	orrs	r2, r3
 80218cc:	687b      	ldr	r3, [r7, #4]
 80218ce:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 80218d0:	2300      	movs	r3, #0
}
 80218d2:	4618      	mov	r0, r3
 80218d4:	370c      	adds	r7, #12
 80218d6:	46bd      	mov	sp, r7
 80218d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80218dc:	4770      	bx	lr
 80218de:	bf00      	nop
 80218e0:	ffffc001 	.word	0xffffc001

080218e4 <SDMMC_Init>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Init: SDMMC initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_Init(SDMMC_TypeDef *SDMMCx, SDMMC_InitTypeDef Init)
{
 80218e4:	b084      	sub	sp, #16
 80218e6:	b480      	push	{r7}
 80218e8:	b085      	sub	sp, #20
 80218ea:	af00      	add	r7, sp, #0
 80218ec:	6078      	str	r0, [r7, #4]
 80218ee:	f107 001c 	add.w	r0, r7, #28
 80218f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  uint32_t tmpreg = 0;
 80218f6:	2300      	movs	r3, #0
 80218f8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_BUS_WIDE(Init.BusWide));
  assert_param(IS_SDMMC_HARDWARE_FLOW_CONTROL(Init.HardwareFlowControl));
  assert_param(IS_SDMMC_CLKDIV(Init.ClockDiv));

  /* Set SDMMC configuration parameters */
  tmpreg |= (Init.ClockEdge           | \
 80218fa:	69fa      	ldr	r2, [r7, #28]
             Init.ClockPowerSave      | \
 80218fc:	6a3b      	ldr	r3, [r7, #32]
  tmpreg |= (Init.ClockEdge           | \
 80218fe:	431a      	orrs	r2, r3
             Init.BusWide             | \
 8021900:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
             Init.ClockPowerSave      | \
 8021902:	431a      	orrs	r2, r3
             Init.HardwareFlowControl | \
 8021904:	6abb      	ldr	r3, [r7, #40]	@ 0x28
             Init.BusWide             | \
 8021906:	431a      	orrs	r2, r3
             Init.ClockDiv
 8021908:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
             Init.HardwareFlowControl | \
 802190a:	4313      	orrs	r3, r2
  tmpreg |= (Init.ClockEdge           | \
 802190c:	68fa      	ldr	r2, [r7, #12]
 802190e:	4313      	orrs	r3, r2
 8021910:	60fb      	str	r3, [r7, #12]
            );

  /* Write to SDMMC CLKCR */
  MODIFY_REG(SDMMCx->CLKCR, CLKCR_CLEAR_MASK, tmpreg);
 8021912:	687b      	ldr	r3, [r7, #4]
 8021914:	685a      	ldr	r2, [r3, #4]
 8021916:	4b07      	ldr	r3, [pc, #28]	@ (8021934 <SDMMC_Init+0x50>)
 8021918:	4013      	ands	r3, r2
 802191a:	68fa      	ldr	r2, [r7, #12]
 802191c:	431a      	orrs	r2, r3
 802191e:	687b      	ldr	r3, [r7, #4]
 8021920:	605a      	str	r2, [r3, #4]

  return HAL_OK;
 8021922:	2300      	movs	r3, #0
}
 8021924:	4618      	mov	r0, r3
 8021926:	3714      	adds	r7, #20
 8021928:	46bd      	mov	sp, r7
 802192a:	f85d 7b04 	ldr.w	r7, [sp], #4
 802192e:	b004      	add	sp, #16
 8021930:	4770      	bx	lr
 8021932:	bf00      	nop
 8021934:	ffc02c00 	.word	0xffc02c00

08021938 <SDMMC_ReadFIFO>:
  * @brief  Read data (word) from Rx FIFO in blocking mode (polling)
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_ReadFIFO(const SDMMC_TypeDef *SDMMCx)
{
 8021938:	b480      	push	{r7}
 802193a:	b083      	sub	sp, #12
 802193c:	af00      	add	r7, sp, #0
 802193e:	6078      	str	r0, [r7, #4]
  /* Read data from Rx FIFO */
  return (SDMMCx->FIFO);
 8021940:	687b      	ldr	r3, [r7, #4]
 8021942:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
}
 8021946:	4618      	mov	r0, r3
 8021948:	370c      	adds	r7, #12
 802194a:	46bd      	mov	sp, r7
 802194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021950:	4770      	bx	lr

08021952 <SDMMC_WriteFIFO>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pWriteData: pointer to data to write
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_WriteFIFO(SDMMC_TypeDef *SDMMCx, uint32_t *pWriteData)
{
 8021952:	b480      	push	{r7}
 8021954:	b083      	sub	sp, #12
 8021956:	af00      	add	r7, sp, #0
 8021958:	6078      	str	r0, [r7, #4]
 802195a:	6039      	str	r1, [r7, #0]
  /* Write data to FIFO */
  SDMMCx->FIFO = *pWriteData;
 802195c:	683b      	ldr	r3, [r7, #0]
 802195e:	681a      	ldr	r2, [r3, #0]
 8021960:	687b      	ldr	r3, [r7, #4]
 8021962:	f8c3 2080 	str.w	r2, [r3, #128]	@ 0x80

  return HAL_OK;
 8021966:	2300      	movs	r3, #0
}
 8021968:	4618      	mov	r0, r3
 802196a:	370c      	adds	r7, #12
 802196c:	46bd      	mov	sp, r7
 802196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021972:	4770      	bx	lr

08021974 <SDMMC_PowerState_ON>:
  * @brief  Set SDMMC Power state to ON.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_ON(SDMMC_TypeDef *SDMMCx)
{
 8021974:	b480      	push	{r7}
 8021976:	b083      	sub	sp, #12
 8021978:	af00      	add	r7, sp, #0
 802197a:	6078      	str	r0, [r7, #4]
  /* Set power state to ON */
  SDMMCx->POWER |= SDMMC_POWER_PWRCTRL;
 802197c:	687b      	ldr	r3, [r7, #4]
 802197e:	681b      	ldr	r3, [r3, #0]
 8021980:	f043 0203 	orr.w	r2, r3, #3
 8021984:	687b      	ldr	r3, [r7, #4]
 8021986:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8021988:	2300      	movs	r3, #0
}
 802198a:	4618      	mov	r0, r3
 802198c:	370c      	adds	r7, #12
 802198e:	46bd      	mov	sp, r7
 8021990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021994:	4770      	bx	lr

08021996 <SDMMC_PowerState_OFF>:
  * @brief  Set SDMMC Power state to OFF.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_PowerState_OFF(SDMMC_TypeDef *SDMMCx)
{
 8021996:	b480      	push	{r7}
 8021998:	b083      	sub	sp, #12
 802199a:	af00      	add	r7, sp, #0
 802199c:	6078      	str	r0, [r7, #4]
  /* Set power state to OFF */
  SDMMCx->POWER &= ~(SDMMC_POWER_PWRCTRL);
 802199e:	687b      	ldr	r3, [r7, #4]
 80219a0:	681b      	ldr	r3, [r3, #0]
 80219a2:	f023 0203 	bic.w	r2, r3, #3
 80219a6:	687b      	ldr	r3, [r7, #4]
 80219a8:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80219aa:	2300      	movs	r3, #0
}
 80219ac:	4618      	mov	r0, r3
 80219ae:	370c      	adds	r7, #12
 80219b0:	46bd      	mov	sp, r7
 80219b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219b6:	4770      	bx	lr

080219b8 <SDMMC_GetPowerState>:
  *            - 0x00: Power OFF
  *            - 0x02: Power UP
  *            - 0x03: Power ON
  */
uint32_t SDMMC_GetPowerState(const SDMMC_TypeDef *SDMMCx)
{
 80219b8:	b480      	push	{r7}
 80219ba:	b083      	sub	sp, #12
 80219bc:	af00      	add	r7, sp, #0
 80219be:	6078      	str	r0, [r7, #4]
  return (SDMMCx->POWER & SDMMC_POWER_PWRCTRL);
 80219c0:	687b      	ldr	r3, [r7, #4]
 80219c2:	681b      	ldr	r3, [r3, #0]
 80219c4:	f003 0303 	and.w	r3, r3, #3
}
 80219c8:	4618      	mov	r0, r3
 80219ca:	370c      	adds	r7, #12
 80219cc:	46bd      	mov	sp, r7
 80219ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80219d2:	4770      	bx	lr

080219d4 <SDMMC_SendCommand>:
  * @param  Command: pointer to a SDMMC_CmdInitTypeDef structure that contains
  *         the configuration information for the SDMMC command
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_SendCommand(SDMMC_TypeDef *SDMMCx, const SDMMC_CmdInitTypeDef *Command)
{
 80219d4:	b480      	push	{r7}
 80219d6:	b085      	sub	sp, #20
 80219d8:	af00      	add	r7, sp, #0
 80219da:	6078      	str	r0, [r7, #4]
 80219dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 80219de:	2300      	movs	r3, #0
 80219e0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_RESPONSE(Command->Response));
  assert_param(IS_SDMMC_WAIT(Command->WaitForInterrupt));
  assert_param(IS_SDMMC_CPSM(Command->CPSM));

  /* Set the SDMMC Argument value */
  SDMMCx->ARG = Command->Argument;
 80219e2:	683b      	ldr	r3, [r7, #0]
 80219e4:	681a      	ldr	r2, [r3, #0]
 80219e6:	687b      	ldr	r3, [r7, #4]
 80219e8:	609a      	str	r2, [r3, #8]

  /* Set SDMMC command parameters */
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80219ea:	683b      	ldr	r3, [r7, #0]
 80219ec:	685a      	ldr	r2, [r3, #4]
                       Command->Response         | \
 80219ee:	683b      	ldr	r3, [r7, #0]
 80219f0:	689b      	ldr	r3, [r3, #8]
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 80219f2:	431a      	orrs	r2, r3
                       Command->WaitForInterrupt | \
 80219f4:	683b      	ldr	r3, [r7, #0]
 80219f6:	68db      	ldr	r3, [r3, #12]
                       Command->Response         | \
 80219f8:	431a      	orrs	r2, r3
                       Command->CPSM);
 80219fa:	683b      	ldr	r3, [r7, #0]
 80219fc:	691b      	ldr	r3, [r3, #16]
                       Command->WaitForInterrupt | \
 80219fe:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Command->CmdIndex         | \
 8021a00:	68fa      	ldr	r2, [r7, #12]
 8021a02:	4313      	orrs	r3, r2
 8021a04:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC CMD register */
  MODIFY_REG(SDMMCx->CMD, CMD_CLEAR_MASK, tmpreg);
 8021a06:	687b      	ldr	r3, [r7, #4]
 8021a08:	68da      	ldr	r2, [r3, #12]
 8021a0a:	4b06      	ldr	r3, [pc, #24]	@ (8021a24 <SDMMC_SendCommand+0x50>)
 8021a0c:	4013      	ands	r3, r2
 8021a0e:	68fa      	ldr	r2, [r7, #12]
 8021a10:	431a      	orrs	r2, r3
 8021a12:	687b      	ldr	r3, [r7, #4]
 8021a14:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8021a16:	2300      	movs	r3, #0
}
 8021a18:	4618      	mov	r0, r3
 8021a1a:	3714      	adds	r7, #20
 8021a1c:	46bd      	mov	sp, r7
 8021a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a22:	4770      	bx	lr
 8021a24:	fffee0c0 	.word	0xfffee0c0

08021a28 <SDMMC_GetCommandResponse>:
  * @brief  Return the command index of last command for which response received
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval Command index of the last command response received
  */
uint8_t SDMMC_GetCommandResponse(const SDMMC_TypeDef *SDMMCx)
{
 8021a28:	b480      	push	{r7}
 8021a2a:	b083      	sub	sp, #12
 8021a2c:	af00      	add	r7, sp, #0
 8021a2e:	6078      	str	r0, [r7, #4]
  return (uint8_t)(SDMMCx->RESPCMD);
 8021a30:	687b      	ldr	r3, [r7, #4]
 8021a32:	691b      	ldr	r3, [r3, #16]
 8021a34:	b2db      	uxtb	r3, r3
}
 8021a36:	4618      	mov	r0, r3
 8021a38:	370c      	adds	r7, #12
 8021a3a:	46bd      	mov	sp, r7
 8021a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a40:	4770      	bx	lr

08021a42 <SDMMC_GetResponse>:
  *            @arg SDMMC_RESP3: Response Register 3
  *            @arg SDMMC_RESP4: Response Register 4
  * @retval The Corresponding response register value
  */
uint32_t SDMMC_GetResponse(const SDMMC_TypeDef *SDMMCx, uint32_t Response)
{
 8021a42:	b480      	push	{r7}
 8021a44:	b085      	sub	sp, #20
 8021a46:	af00      	add	r7, sp, #0
 8021a48:	6078      	str	r0, [r7, #4]
 8021a4a:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_SDMMC_RESP(Response));

  /* Get the response */
  tmp = (uint32_t)(&(SDMMCx->RESP1)) + Response;
 8021a4c:	687b      	ldr	r3, [r7, #4]
 8021a4e:	3314      	adds	r3, #20
 8021a50:	461a      	mov	r2, r3
 8021a52:	683b      	ldr	r3, [r7, #0]
 8021a54:	4413      	add	r3, r2
 8021a56:	60fb      	str	r3, [r7, #12]

  return (*(__IO uint32_t *) tmp);
 8021a58:	68fb      	ldr	r3, [r7, #12]
 8021a5a:	681b      	ldr	r3, [r3, #0]
}
 8021a5c:	4618      	mov	r0, r3
 8021a5e:	3714      	adds	r7, #20
 8021a60:	46bd      	mov	sp, r7
 8021a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021a66:	4770      	bx	lr

08021a68 <SDMMC_ConfigData>:
  * @param  Data : pointer to a SDMMC_DataInitTypeDef structure
  *         that contains the configuration information for the SDMMC data.
  * @retval HAL status
  */
HAL_StatusTypeDef SDMMC_ConfigData(SDMMC_TypeDef *SDMMCx, const SDMMC_DataInitTypeDef *Data)
{
 8021a68:	b480      	push	{r7}
 8021a6a:	b085      	sub	sp, #20
 8021a6c:	af00      	add	r7, sp, #0
 8021a6e:	6078      	str	r0, [r7, #4]
 8021a70:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0;
 8021a72:	2300      	movs	r3, #0
 8021a74:	60fb      	str	r3, [r7, #12]
  assert_param(IS_SDMMC_TRANSFER_DIR(Data->TransferDir));
  assert_param(IS_SDMMC_TRANSFER_MODE(Data->TransferMode));
  assert_param(IS_SDMMC_DPSM(Data->DPSM));

  /* Set the SDMMC Data TimeOut value */
  SDMMCx->DTIMER = Data->DataTimeOut;
 8021a76:	683b      	ldr	r3, [r7, #0]
 8021a78:	681a      	ldr	r2, [r3, #0]
 8021a7a:	687b      	ldr	r3, [r7, #4]
 8021a7c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Set the SDMMC DataLength value */
  SDMMCx->DLEN = Data->DataLength;
 8021a7e:	683b      	ldr	r3, [r7, #0]
 8021a80:	685a      	ldr	r2, [r3, #4]
 8021a82:	687b      	ldr	r3, [r7, #4]
 8021a84:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Set the SDMMC data configuration parameters */
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8021a86:	683b      	ldr	r3, [r7, #0]
 8021a88:	689a      	ldr	r2, [r3, #8]
                       Data->TransferDir   | \
 8021a8a:	683b      	ldr	r3, [r7, #0]
 8021a8c:	68db      	ldr	r3, [r3, #12]
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8021a8e:	431a      	orrs	r2, r3
                       Data->TransferMode  | \
 8021a90:	683b      	ldr	r3, [r7, #0]
 8021a92:	691b      	ldr	r3, [r3, #16]
                       Data->TransferDir   | \
 8021a94:	431a      	orrs	r2, r3
                       Data->DPSM);
 8021a96:	683b      	ldr	r3, [r7, #0]
 8021a98:	695b      	ldr	r3, [r3, #20]
                       Data->TransferMode  | \
 8021a9a:	4313      	orrs	r3, r2
  tmpreg |= (uint32_t)(Data->DataBlockSize | \
 8021a9c:	68fa      	ldr	r2, [r7, #12]
 8021a9e:	4313      	orrs	r3, r2
 8021aa0:	60fb      	str	r3, [r7, #12]

  /* Write to SDMMC DCTRL */
  MODIFY_REG(SDMMCx->DCTRL, DCTRL_CLEAR_MASK, tmpreg);
 8021aa2:	687b      	ldr	r3, [r7, #4]
 8021aa4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8021aa6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8021aaa:	68fb      	ldr	r3, [r7, #12]
 8021aac:	431a      	orrs	r2, r3
 8021aae:	687b      	ldr	r3, [r7, #4]
 8021ab0:	62da      	str	r2, [r3, #44]	@ 0x2c

  return HAL_OK;
 8021ab2:	2300      	movs	r3, #0

}
 8021ab4:	4618      	mov	r0, r3
 8021ab6:	3714      	adds	r7, #20
 8021ab8:	46bd      	mov	sp, r7
 8021aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8021abe:	4770      	bx	lr

08021ac0 <SDMMC_CmdBlockLength>:
  * @brief  Send the Data Block Length command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdBlockLength(SDMMC_TypeDef *SDMMCx, uint32_t BlockSize)
{
 8021ac0:	b580      	push	{r7, lr}
 8021ac2:	b088      	sub	sp, #32
 8021ac4:	af00      	add	r7, sp, #0
 8021ac6:	6078      	str	r0, [r7, #4]
 8021ac8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)BlockSize;
 8021aca:	683b      	ldr	r3, [r7, #0]
 8021acc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_BLOCKLEN;
 8021ace:	2310      	movs	r3, #16
 8021ad0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021ad2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021ad6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021ad8:	2300      	movs	r3, #0
 8021ada:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021adc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021ae0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021ae2:	f107 0308 	add.w	r3, r7, #8
 8021ae6:	4619      	mov	r1, r3
 8021ae8:	6878      	ldr	r0, [r7, #4]
 8021aea:	f7ff ff73 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SET_BLOCKLEN, SDMMC_CMDTIMEOUT);
 8021aee:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021af2:	2110      	movs	r1, #16
 8021af4:	6878      	ldr	r0, [r7, #4]
 8021af6:	f000 fae9 	bl	80220cc <SDMMC_GetCmdResp1>
 8021afa:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021afc:	69fb      	ldr	r3, [r7, #28]
}
 8021afe:	4618      	mov	r0, r3
 8021b00:	3720      	adds	r7, #32
 8021b02:	46bd      	mov	sp, r7
 8021b04:	bd80      	pop	{r7, pc}

08021b06 <SDMMC_CmdReadSingleBlock>:
  * @brief  Send the Read Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8021b06:	b580      	push	{r7, lr}
 8021b08:	b088      	sub	sp, #32
 8021b0a:	af00      	add	r7, sp, #0
 8021b0c:	6078      	str	r0, [r7, #4]
 8021b0e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8021b10:	683b      	ldr	r3, [r7, #0]
 8021b12:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_SINGLE_BLOCK;
 8021b14:	2311      	movs	r3, #17
 8021b16:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021b18:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021b1c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021b1e:	2300      	movs	r3, #0
 8021b20:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021b22:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021b26:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021b28:	f107 0308 	add.w	r3, r7, #8
 8021b2c:	4619      	mov	r1, r3
 8021b2e:	6878      	ldr	r0, [r7, #4]
 8021b30:	f7ff ff50 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8021b34:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021b38:	2111      	movs	r1, #17
 8021b3a:	6878      	ldr	r0, [r7, #4]
 8021b3c:	f000 fac6 	bl	80220cc <SDMMC_GetCmdResp1>
 8021b40:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021b42:	69fb      	ldr	r3, [r7, #28]
}
 8021b44:	4618      	mov	r0, r3
 8021b46:	3720      	adds	r7, #32
 8021b48:	46bd      	mov	sp, r7
 8021b4a:	bd80      	pop	{r7, pc}

08021b4c <SDMMC_CmdReadMultiBlock>:
  * @brief  Send the Read Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdReadMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t ReadAdd)
{
 8021b4c:	b580      	push	{r7, lr}
 8021b4e:	b088      	sub	sp, #32
 8021b50:	af00      	add	r7, sp, #0
 8021b52:	6078      	str	r0, [r7, #4]
 8021b54:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)ReadAdd;
 8021b56:	683b      	ldr	r3, [r7, #0]
 8021b58:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_READ_MULT_BLOCK;
 8021b5a:	2312      	movs	r3, #18
 8021b5c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021b5e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021b62:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021b64:	2300      	movs	r3, #0
 8021b66:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021b68:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021b6c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021b6e:	f107 0308 	add.w	r3, r7, #8
 8021b72:	4619      	mov	r1, r3
 8021b74:	6878      	ldr	r0, [r7, #4]
 8021b76:	f7ff ff2d 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_READ_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8021b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021b7e:	2112      	movs	r1, #18
 8021b80:	6878      	ldr	r0, [r7, #4]
 8021b82:	f000 faa3 	bl	80220cc <SDMMC_GetCmdResp1>
 8021b86:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021b88:	69fb      	ldr	r3, [r7, #28]
}
 8021b8a:	4618      	mov	r0, r3
 8021b8c:	3720      	adds	r7, #32
 8021b8e:	46bd      	mov	sp, r7
 8021b90:	bd80      	pop	{r7, pc}

08021b92 <SDMMC_CmdWriteSingleBlock>:
  * @brief  Send the Write Single Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteSingleBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8021b92:	b580      	push	{r7, lr}
 8021b94:	b088      	sub	sp, #32
 8021b96:	af00      	add	r7, sp, #0
 8021b98:	6078      	str	r0, [r7, #4]
 8021b9a:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8021b9c:	683b      	ldr	r3, [r7, #0]
 8021b9e:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_SINGLE_BLOCK;
 8021ba0:	2318      	movs	r3, #24
 8021ba2:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021ba4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021ba8:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021baa:	2300      	movs	r3, #0
 8021bac:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021bae:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021bb2:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021bb4:	f107 0308 	add.w	r3, r7, #8
 8021bb8:	4619      	mov	r1, r3
 8021bba:	6878      	ldr	r0, [r7, #4]
 8021bbc:	f7ff ff0a 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_SINGLE_BLOCK, SDMMC_CMDTIMEOUT);
 8021bc0:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021bc4:	2118      	movs	r1, #24
 8021bc6:	6878      	ldr	r0, [r7, #4]
 8021bc8:	f000 fa80 	bl	80220cc <SDMMC_GetCmdResp1>
 8021bcc:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021bce:	69fb      	ldr	r3, [r7, #28]
}
 8021bd0:	4618      	mov	r0, r3
 8021bd2:	3720      	adds	r7, #32
 8021bd4:	46bd      	mov	sp, r7
 8021bd6:	bd80      	pop	{r7, pc}

08021bd8 <SDMMC_CmdWriteMultiBlock>:
  * @brief  Send the Write Multi Block command and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdWriteMultiBlock(SDMMC_TypeDef *SDMMCx, uint32_t WriteAdd)
{
 8021bd8:	b580      	push	{r7, lr}
 8021bda:	b088      	sub	sp, #32
 8021bdc:	af00      	add	r7, sp, #0
 8021bde:	6078      	str	r0, [r7, #4]
 8021be0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)WriteAdd;
 8021be2:	683b      	ldr	r3, [r7, #0]
 8021be4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_WRITE_MULT_BLOCK;
 8021be6:	2319      	movs	r3, #25
 8021be8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021bea:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021bee:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021bf0:	2300      	movs	r3, #0
 8021bf2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021bf4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021bf8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021bfa:	f107 0308 	add.w	r3, r7, #8
 8021bfe:	4619      	mov	r1, r3
 8021c00:	6878      	ldr	r0, [r7, #4]
 8021c02:	f7ff fee7 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_WRITE_MULT_BLOCK, SDMMC_CMDTIMEOUT);
 8021c06:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021c0a:	2119      	movs	r1, #25
 8021c0c:	6878      	ldr	r0, [r7, #4]
 8021c0e:	f000 fa5d 	bl	80220cc <SDMMC_GetCmdResp1>
 8021c12:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021c14:	69fb      	ldr	r3, [r7, #28]
}
 8021c16:	4618      	mov	r0, r3
 8021c18:	3720      	adds	r7, #32
 8021c1a:	46bd      	mov	sp, r7
 8021c1c:	bd80      	pop	{r7, pc}

08021c1e <SDMMC_CmdSDEraseStartAdd>:
  * @brief  Send the Start Address Erase command for SD and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSDEraseStartAdd(SDMMC_TypeDef *SDMMCx, uint32_t StartAdd)
{
 8021c1e:	b580      	push	{r7, lr}
 8021c20:	b088      	sub	sp, #32
 8021c22:	af00      	add	r7, sp, #0
 8021c24:	6078      	str	r0, [r7, #4]
 8021c26:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)StartAdd;
 8021c28:	683b      	ldr	r3, [r7, #0]
 8021c2a:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_START;
 8021c2c:	2320      	movs	r3, #32
 8021c2e:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021c30:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021c34:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021c36:	2300      	movs	r3, #0
 8021c38:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021c3a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021c3e:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021c40:	f107 0308 	add.w	r3, r7, #8
 8021c44:	4619      	mov	r1, r3
 8021c46:	6878      	ldr	r0, [r7, #4]
 8021c48:	f7ff fec4 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_START, SDMMC_CMDTIMEOUT);
 8021c4c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021c50:	2120      	movs	r1, #32
 8021c52:	6878      	ldr	r0, [r7, #4]
 8021c54:	f000 fa3a 	bl	80220cc <SDMMC_GetCmdResp1>
 8021c58:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021c5a:	69fb      	ldr	r3, [r7, #28]
}
 8021c5c:	4618      	mov	r0, r3
 8021c5e:	3720      	adds	r7, #32
 8021c60:	46bd      	mov	sp, r7
 8021c62:	bd80      	pop	{r7, pc}

08021c64 <SDMMC_CmdSDEraseEndAdd>:
  * @brief  Send the End Address Erase command for SD and check the response
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSDEraseEndAdd(SDMMC_TypeDef *SDMMCx, uint32_t EndAdd)
{
 8021c64:	b580      	push	{r7, lr}
 8021c66:	b088      	sub	sp, #32
 8021c68:	af00      	add	r7, sp, #0
 8021c6a:	6078      	str	r0, [r7, #4]
 8021c6c:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = (uint32_t)EndAdd;
 8021c6e:	683b      	ldr	r3, [r7, #0]
 8021c70:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_ERASE_GRP_END;
 8021c72:	2321      	movs	r3, #33	@ 0x21
 8021c74:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021c76:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021c7a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021c7c:	2300      	movs	r3, #0
 8021c7e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021c80:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021c84:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021c86:	f107 0308 	add.w	r3, r7, #8
 8021c8a:	4619      	mov	r1, r3
 8021c8c:	6878      	ldr	r0, [r7, #4]
 8021c8e:	f7ff fea1 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_ERASE_GRP_END, SDMMC_CMDTIMEOUT);
 8021c92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021c96:	2121      	movs	r1, #33	@ 0x21
 8021c98:	6878      	ldr	r0, [r7, #4]
 8021c9a:	f000 fa17 	bl	80220cc <SDMMC_GetCmdResp1>
 8021c9e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021ca0:	69fb      	ldr	r3, [r7, #28]
}
 8021ca2:	4618      	mov	r0, r3
 8021ca4:	3720      	adds	r7, #32
 8021ca6:	46bd      	mov	sp, r7
 8021ca8:	bd80      	pop	{r7, pc}

08021caa <SDMMC_CmdErase>:
  * @param  SDMMCx Pointer to SDMMC register base
  * @param  EraseType Type of erase to be performed
  * @retval HAL status
  */
uint32_t SDMMC_CmdErase(SDMMC_TypeDef *SDMMCx, uint32_t EraseType)
{
 8021caa:	b580      	push	{r7, lr}
 8021cac:	b088      	sub	sp, #32
 8021cae:	af00      	add	r7, sp, #0
 8021cb0:	6078      	str	r0, [r7, #4]
 8021cb2:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Set Block Size for Card */
  sdmmc_cmdinit.Argument         = EraseType;
 8021cb4:	683b      	ldr	r3, [r7, #0]
 8021cb6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ERASE;
 8021cb8:	2326      	movs	r3, #38	@ 0x26
 8021cba:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021cbc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021cc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021cc2:	2300      	movs	r3, #0
 8021cc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021cc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021cca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021ccc:	f107 0308 	add.w	r3, r7, #8
 8021cd0:	4619      	mov	r1, r3
 8021cd2:	6878      	ldr	r0, [r7, #4]
 8021cd4:	f7ff fe7e 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_ERASE, SDMMC_MAXERASETIMEOUT);
 8021cd8:	f24f 6218 	movw	r2, #63000	@ 0xf618
 8021cdc:	2126      	movs	r1, #38	@ 0x26
 8021cde:	6878      	ldr	r0, [r7, #4]
 8021ce0:	f000 f9f4 	bl	80220cc <SDMMC_GetCmdResp1>
 8021ce4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021ce6:	69fb      	ldr	r3, [r7, #28]
}
 8021ce8:	4618      	mov	r0, r3
 8021cea:	3720      	adds	r7, #32
 8021cec:	46bd      	mov	sp, r7
 8021cee:	bd80      	pop	{r7, pc}

08021cf0 <SDMMC_CmdStopTransfer>:
  * @brief  Send the Stop Transfer command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStopTransfer(SDMMC_TypeDef *SDMMCx)
{
 8021cf0:	b580      	push	{r7, lr}
 8021cf2:	b088      	sub	sp, #32
 8021cf4:	af00      	add	r7, sp, #0
 8021cf6:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD12 STOP_TRANSMISSION  */
  sdmmc_cmdinit.Argument         = 0U;
 8021cf8:	2300      	movs	r3, #0
 8021cfa:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_STOP_TRANSMISSION;
 8021cfc:	230c      	movs	r3, #12
 8021cfe:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021d00:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021d04:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021d06:	2300      	movs	r3, #0
 8021d08:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021d0a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021d0e:	61bb      	str	r3, [r7, #24]

  __SDMMC_CMDSTOP_ENABLE(SDMMCx);
 8021d10:	687b      	ldr	r3, [r7, #4]
 8021d12:	68db      	ldr	r3, [r3, #12]
 8021d14:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8021d18:	687b      	ldr	r3, [r7, #4]
 8021d1a:	60da      	str	r2, [r3, #12]
  __SDMMC_CMDTRANS_DISABLE(SDMMCx);
 8021d1c:	687b      	ldr	r3, [r7, #4]
 8021d1e:	68db      	ldr	r3, [r3, #12]
 8021d20:	f023 0240 	bic.w	r2, r3, #64	@ 0x40
 8021d24:	687b      	ldr	r3, [r7, #4]
 8021d26:	60da      	str	r2, [r3, #12]

  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021d28:	f107 0308 	add.w	r3, r7, #8
 8021d2c:	4619      	mov	r1, r3
 8021d2e:	6878      	ldr	r0, [r7, #4]
 8021d30:	f7ff fe50 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_STOP_TRANSMISSION, SDMMC_STOPTRANSFERTIMEOUT);
 8021d34:	4a0b      	ldr	r2, [pc, #44]	@ (8021d64 <SDMMC_CmdStopTransfer+0x74>)
 8021d36:	210c      	movs	r1, #12
 8021d38:	6878      	ldr	r0, [r7, #4]
 8021d3a:	f000 f9c7 	bl	80220cc <SDMMC_GetCmdResp1>
 8021d3e:	61f8      	str	r0, [r7, #28]

  __SDMMC_CMDSTOP_DISABLE(SDMMCx);
 8021d40:	687b      	ldr	r3, [r7, #4]
 8021d42:	68db      	ldr	r3, [r3, #12]
 8021d44:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8021d48:	687b      	ldr	r3, [r7, #4]
 8021d4a:	60da      	str	r2, [r3, #12]

  /* Ignore Address Out Of Range Error, Not relevant at end of memory */
  if (errorstate == SDMMC_ERROR_ADDR_OUT_OF_RANGE)
 8021d4c:	69fb      	ldr	r3, [r7, #28]
 8021d4e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8021d52:	d101      	bne.n	8021d58 <SDMMC_CmdStopTransfer+0x68>
  {
    errorstate = SDMMC_ERROR_NONE;
 8021d54:	2300      	movs	r3, #0
 8021d56:	61fb      	str	r3, [r7, #28]
  }

  return errorstate;
 8021d58:	69fb      	ldr	r3, [r7, #28]
}
 8021d5a:	4618      	mov	r0, r3
 8021d5c:	3720      	adds	r7, #32
 8021d5e:	46bd      	mov	sp, r7
 8021d60:	bd80      	pop	{r7, pc}
 8021d62:	bf00      	nop
 8021d64:	05f5e100 	.word	0x05f5e100

08021d68 <SDMMC_CmdSelDesel>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  addr: Address of the card to be selected
  * @retval HAL status
  */
uint32_t SDMMC_CmdSelDesel(SDMMC_TypeDef *SDMMCx, uint32_t Addr)
{
 8021d68:	b580      	push	{r7, lr}
 8021d6a:	b088      	sub	sp, #32
 8021d6c:	af00      	add	r7, sp, #0
 8021d6e:	6078      	str	r0, [r7, #4]
 8021d70:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD7 SDMMC_SEL_DESEL_CARD */
  sdmmc_cmdinit.Argument         = (uint32_t)Addr;
 8021d72:	683b      	ldr	r3, [r7, #0]
 8021d74:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEL_DESEL_CARD;
 8021d76:	2307      	movs	r3, #7
 8021d78:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021d7a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021d7e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021d80:	2300      	movs	r3, #0
 8021d82:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021d84:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021d88:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021d8a:	f107 0308 	add.w	r3, r7, #8
 8021d8e:	4619      	mov	r1, r3
 8021d90:	6878      	ldr	r0, [r7, #4]
 8021d92:	f7ff fe1f 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEL_DESEL_CARD, SDMMC_CMDTIMEOUT);
 8021d96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021d9a:	2107      	movs	r1, #7
 8021d9c:	6878      	ldr	r0, [r7, #4]
 8021d9e:	f000 f995 	bl	80220cc <SDMMC_GetCmdResp1>
 8021da2:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021da4:	69fb      	ldr	r3, [r7, #28]
}
 8021da6:	4618      	mov	r0, r3
 8021da8:	3720      	adds	r7, #32
 8021daa:	46bd      	mov	sp, r7
 8021dac:	bd80      	pop	{r7, pc}

08021dae <SDMMC_CmdGoIdleState>:
  * @brief  Send the Go Idle State command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdGoIdleState(SDMMC_TypeDef *SDMMCx)
{
 8021dae:	b580      	push	{r7, lr}
 8021db0:	b088      	sub	sp, #32
 8021db2:	af00      	add	r7, sp, #0
 8021db4:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 8021db6:	2300      	movs	r3, #0
 8021db8:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_GO_IDLE_STATE;
 8021dba:	2300      	movs	r3, #0
 8021dbc:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_NO;
 8021dbe:	2300      	movs	r3, #0
 8021dc0:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021dc2:	2300      	movs	r3, #0
 8021dc4:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021dc6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021dca:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021dcc:	f107 0308 	add.w	r3, r7, #8
 8021dd0:	4619      	mov	r1, r3
 8021dd2:	6878      	ldr	r0, [r7, #4]
 8021dd4:	f7ff fdfe 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdError(SDMMCx);
 8021dd8:	6878      	ldr	r0, [r7, #4]
 8021dda:	f000 fbb9 	bl	8022550 <SDMMC_GetCmdError>
 8021dde:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021de0:	69fb      	ldr	r3, [r7, #28]
}
 8021de2:	4618      	mov	r0, r3
 8021de4:	3720      	adds	r7, #32
 8021de6:	46bd      	mov	sp, r7
 8021de8:	bd80      	pop	{r7, pc}

08021dea <SDMMC_CmdOperCond>:
  * @brief  Send the Operating Condition command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdOperCond(SDMMC_TypeDef *SDMMCx)
{
 8021dea:	b580      	push	{r7, lr}
 8021dec:	b088      	sub	sp, #32
 8021dee:	af00      	add	r7, sp, #0
 8021df0:	6078      	str	r0, [r7, #4]
  /* Send CMD8 to verify SD card interface operating condition */
  /* Argument: - [31:12]: Reserved (shall be set to '0')
  - [11:8]: Supply Voltage (VHS) 0x1 (Range: 2.7-3.6 V)
  - [7:0]: Check Pattern (recommended 0xAA) */
  /* CMD Response: R7 */
  sdmmc_cmdinit.Argument         = SDMMC_CHECK_PATTERN;
 8021df2:	f44f 73d5 	mov.w	r3, #426	@ 0x1aa
 8021df6:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SEND_EXT_CSD;
 8021df8:	2308      	movs	r3, #8
 8021dfa:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021dfc:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021e00:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021e02:	2300      	movs	r3, #0
 8021e04:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021e06:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021e0a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021e0c:	f107 0308 	add.w	r3, r7, #8
 8021e10:	4619      	mov	r1, r3
 8021e12:	6878      	ldr	r0, [r7, #4]
 8021e14:	f7ff fdde 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp7(SDMMCx);
 8021e18:	6878      	ldr	r0, [r7, #4]
 8021e1a:	f000 fb4b 	bl	80224b4 <SDMMC_GetCmdResp7>
 8021e1e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021e20:	69fb      	ldr	r3, [r7, #28]
}
 8021e22:	4618      	mov	r0, r3
 8021e24:	3720      	adds	r7, #32
 8021e26:	46bd      	mov	sp, r7
 8021e28:	bd80      	pop	{r7, pc}

08021e2a <SDMMC_CmdAppCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021e2a:	b580      	push	{r7, lr}
 8021e2c:	b088      	sub	sp, #32
 8021e2e:	af00      	add	r7, sp, #0
 8021e30:	6078      	str	r0, [r7, #4]
 8021e32:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)Argument;
 8021e34:	683b      	ldr	r3, [r7, #0]
 8021e36:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_CMD;
 8021e38:	2337      	movs	r3, #55	@ 0x37
 8021e3a:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021e3c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021e40:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021e42:	2300      	movs	r3, #0
 8021e44:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021e46:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021e4a:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021e4c:	f107 0308 	add.w	r3, r7, #8
 8021e50:	4619      	mov	r1, r3
 8021e52:	6878      	ldr	r0, [r7, #4]
 8021e54:	f7ff fdbe 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  /* If there is a HAL_ERROR, it is a MMC card, else
  it is a SD card: SD card 2.0 (voltage range mismatch)
     or SD card 1.x */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_CMD, SDMMC_CMDTIMEOUT);
 8021e58:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021e5c:	2137      	movs	r1, #55	@ 0x37
 8021e5e:	6878      	ldr	r0, [r7, #4]
 8021e60:	f000 f934 	bl	80220cc <SDMMC_GetCmdResp1>
 8021e64:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021e66:	69fb      	ldr	r3, [r7, #28]
}
 8021e68:	4618      	mov	r0, r3
 8021e6a:	3720      	adds	r7, #32
 8021e6c:	46bd      	mov	sp, r7
 8021e6e:	bd80      	pop	{r7, pc}

08021e70 <SDMMC_CmdAppOperCommand>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdAppOperCommand(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021e70:	b580      	push	{r7, lr}
 8021e72:	b088      	sub	sp, #32
 8021e74:	af00      	add	r7, sp, #0
 8021e76:	6078      	str	r0, [r7, #4]
 8021e78:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8021e7a:	683b      	ldr	r3, [r7, #0]
 8021e7c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_OP_COND;
 8021e7e:	2329      	movs	r3, #41	@ 0x29
 8021e80:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021e82:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021e86:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021e88:	2300      	movs	r3, #0
 8021e8a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021e8c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021e90:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021e92:	f107 0308 	add.w	r3, r7, #8
 8021e96:	4619      	mov	r1, r3
 8021e98:	6878      	ldr	r0, [r7, #4]
 8021e9a:	f7ff fd9b 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp3(SDMMCx);
 8021e9e:	6878      	ldr	r0, [r7, #4]
 8021ea0:	f000 fa50 	bl	8022344 <SDMMC_GetCmdResp3>
 8021ea4:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021ea6:	69fb      	ldr	r3, [r7, #28]
}
 8021ea8:	4618      	mov	r0, r3
 8021eaa:	3720      	adds	r7, #32
 8021eac:	46bd      	mov	sp, r7
 8021eae:	bd80      	pop	{r7, pc}

08021eb0 <SDMMC_CmdBusWidth>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  BusWidth: BusWidth
  * @retval HAL status
  */
uint32_t SDMMC_CmdBusWidth(SDMMC_TypeDef *SDMMCx, uint32_t BusWidth)
{
 8021eb0:	b580      	push	{r7, lr}
 8021eb2:	b088      	sub	sp, #32
 8021eb4:	af00      	add	r7, sp, #0
 8021eb6:	6078      	str	r0, [r7, #4]
 8021eb8:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = (uint32_t)BusWidth;
 8021eba:	683b      	ldr	r3, [r7, #0]
 8021ebc:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_APP_SD_SET_BUSWIDTH;
 8021ebe:	2306      	movs	r3, #6
 8021ec0:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021ec2:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021ec6:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021ec8:	2300      	movs	r3, #0
 8021eca:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021ecc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021ed0:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021ed2:	f107 0308 	add.w	r3, r7, #8
 8021ed6:	4619      	mov	r1, r3
 8021ed8:	6878      	ldr	r0, [r7, #4]
 8021eda:	f7ff fd7b 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_APP_SD_SET_BUSWIDTH, SDMMC_CMDTIMEOUT);
 8021ede:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021ee2:	2106      	movs	r1, #6
 8021ee4:	6878      	ldr	r0, [r7, #4]
 8021ee6:	f000 f8f1 	bl	80220cc <SDMMC_GetCmdResp1>
 8021eea:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021eec:	69fb      	ldr	r3, [r7, #28]
}
 8021eee:	4618      	mov	r0, r3
 8021ef0:	3720      	adds	r7, #32
 8021ef2:	46bd      	mov	sp, r7
 8021ef4:	bd80      	pop	{r7, pc}

08021ef6 <SDMMC_CmdSendSCR>:
  * @brief  Send the Send SCR command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendSCR(SDMMC_TypeDef *SDMMCx)
{
 8021ef6:	b580      	push	{r7, lr}
 8021ef8:	b088      	sub	sp, #32
 8021efa:	af00      	add	r7, sp, #0
 8021efc:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD51 SD_APP_SEND_SCR */
  sdmmc_cmdinit.Argument         = 0U;
 8021efe:	2300      	movs	r3, #0
 8021f00:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_SEND_SCR;
 8021f02:	2333      	movs	r3, #51	@ 0x33
 8021f04:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021f06:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021f0a:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021f0c:	2300      	movs	r3, #0
 8021f0e:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021f10:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021f14:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021f16:	f107 0308 	add.w	r3, r7, #8
 8021f1a:	4619      	mov	r1, r3
 8021f1c:	6878      	ldr	r0, [r7, #4]
 8021f1e:	f7ff fd59 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_SEND_SCR, SDMMC_CMDTIMEOUT);
 8021f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8021f26:	2133      	movs	r1, #51	@ 0x33
 8021f28:	6878      	ldr	r0, [r7, #4]
 8021f2a:	f000 f8cf 	bl	80220cc <SDMMC_GetCmdResp1>
 8021f2e:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021f30:	69fb      	ldr	r3, [r7, #28]
}
 8021f32:	4618      	mov	r0, r3
 8021f34:	3720      	adds	r7, #32
 8021f36:	46bd      	mov	sp, r7
 8021f38:	bd80      	pop	{r7, pc}

08021f3a <SDMMC_CmdSendCID>:
  * @brief  Send the Send CID command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCID(SDMMC_TypeDef *SDMMCx)
{
 8021f3a:	b580      	push	{r7, lr}
 8021f3c:	b088      	sub	sp, #32
 8021f3e:	af00      	add	r7, sp, #0
 8021f40:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD2 ALL_SEND_CID */
  sdmmc_cmdinit.Argument         = 0U;
 8021f42:	2300      	movs	r3, #0
 8021f44:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_ALL_SEND_CID;
 8021f46:	2302      	movs	r3, #2
 8021f48:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8021f4a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8021f4e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021f50:	2300      	movs	r3, #0
 8021f52:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021f54:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021f58:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021f5a:	f107 0308 	add.w	r3, r7, #8
 8021f5e:	4619      	mov	r1, r3
 8021f60:	6878      	ldr	r0, [r7, #4]
 8021f62:	f7ff fd37 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021f66:	6878      	ldr	r0, [r7, #4]
 8021f68:	f000 f9a2 	bl	80222b0 <SDMMC_GetCmdResp2>
 8021f6c:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021f6e:	69fb      	ldr	r3, [r7, #28]
}
 8021f70:	4618      	mov	r0, r3
 8021f72:	3720      	adds	r7, #32
 8021f74:	46bd      	mov	sp, r7
 8021f76:	bd80      	pop	{r7, pc}

08021f78 <SDMMC_CmdSendCSD>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendCSD(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021f78:	b580      	push	{r7, lr}
 8021f7a:	b088      	sub	sp, #32
 8021f7c:	af00      	add	r7, sp, #0
 8021f7e:	6078      	str	r0, [r7, #4]
 8021f80:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD9 SEND_CSD */
  sdmmc_cmdinit.Argument         = Argument;
 8021f82:	683b      	ldr	r3, [r7, #0]
 8021f84:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_CSD;
 8021f86:	2309      	movs	r3, #9
 8021f88:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_LONG;
 8021f8a:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8021f8e:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021f90:	2300      	movs	r3, #0
 8021f92:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021f94:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021f98:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021f9a:	f107 0308 	add.w	r3, r7, #8
 8021f9e:	4619      	mov	r1, r3
 8021fa0:	6878      	ldr	r0, [r7, #4]
 8021fa2:	f7ff fd17 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp2(SDMMCx);
 8021fa6:	6878      	ldr	r0, [r7, #4]
 8021fa8:	f000 f982 	bl	80222b0 <SDMMC_GetCmdResp2>
 8021fac:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021fae:	69fb      	ldr	r3, [r7, #28]
}
 8021fb0:	4618      	mov	r0, r3
 8021fb2:	3720      	adds	r7, #32
 8021fb4:	46bd      	mov	sp, r7
 8021fb6:	bd80      	pop	{r7, pc}

08021fb8 <SDMMC_CmdSetRelAdd>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  pRCA: Card RCA
  * @retval HAL status
  */
uint32_t SDMMC_CmdSetRelAdd(SDMMC_TypeDef *SDMMCx, uint16_t *pRCA)
{
 8021fb8:	b580      	push	{r7, lr}
 8021fba:	b088      	sub	sp, #32
 8021fbc:	af00      	add	r7, sp, #0
 8021fbe:	6078      	str	r0, [r7, #4]
 8021fc0:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD3 SD_CMD_SET_REL_ADDR */
  sdmmc_cmdinit.Argument         = 0U;
 8021fc2:	2300      	movs	r3, #0
 8021fc4:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SET_REL_ADDR;
 8021fc6:	2303      	movs	r3, #3
 8021fc8:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8021fca:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8021fce:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8021fd0:	2300      	movs	r3, #0
 8021fd2:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8021fd4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8021fd8:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8021fda:	f107 0308 	add.w	r3, r7, #8
 8021fde:	4619      	mov	r1, r3
 8021fe0:	6878      	ldr	r0, [r7, #4]
 8021fe2:	f7ff fcf7 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp6(SDMMCx, SDMMC_CMD_SET_REL_ADDR, pRCA);
 8021fe6:	683a      	ldr	r2, [r7, #0]
 8021fe8:	2103      	movs	r1, #3
 8021fea:	6878      	ldr	r0, [r7, #4]
 8021fec:	f000 f9ea 	bl	80223c4 <SDMMC_GetCmdResp6>
 8021ff0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8021ff2:	69fb      	ldr	r3, [r7, #28]
}
 8021ff4:	4618      	mov	r0, r3
 8021ff6:	3720      	adds	r7, #32
 8021ff8:	46bd      	mov	sp, r7
 8021ffa:	bd80      	pop	{r7, pc}

08021ffc <SDMMC_CmdSendStatus>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @param  Argument: Command Argument
  * @retval HAL status
  */
uint32_t SDMMC_CmdSendStatus(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8021ffc:	b580      	push	{r7, lr}
 8021ffe:	b088      	sub	sp, #32
 8022000:	af00      	add	r7, sp, #0
 8022002:	6078      	str	r0, [r7, #4]
 8022004:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = Argument;
 8022006:	683b      	ldr	r3, [r7, #0]
 8022008:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SEND_STATUS;
 802200a:	230d      	movs	r3, #13
 802200c:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 802200e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022012:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022014:	2300      	movs	r3, #0
 8022016:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 8022018:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 802201c:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 802201e:	f107 0308 	add.w	r3, r7, #8
 8022022:	4619      	mov	r1, r3
 8022024:	6878      	ldr	r0, [r7, #4]
 8022026:	f7ff fcd5 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SEND_STATUS, SDMMC_CMDTIMEOUT);
 802202a:	f241 3288 	movw	r2, #5000	@ 0x1388
 802202e:	210d      	movs	r1, #13
 8022030:	6878      	ldr	r0, [r7, #4]
 8022032:	f000 f84b 	bl	80220cc <SDMMC_GetCmdResp1>
 8022036:	61f8      	str	r0, [r7, #28]

  return errorstate;
 8022038:	69fb      	ldr	r3, [r7, #28]
}
 802203a:	4618      	mov	r0, r3
 802203c:	3720      	adds	r7, #32
 802203e:	46bd      	mov	sp, r7
 8022040:	bd80      	pop	{r7, pc}

08022042 <SDMMC_CmdStatusRegister>:
  * @brief  Send the Status register command and check the response.
  * @param  SDMMCx: Pointer to SDMMC register base
  * @retval HAL status
  */
uint32_t SDMMC_CmdStatusRegister(SDMMC_TypeDef *SDMMCx)
{
 8022042:	b580      	push	{r7, lr}
 8022044:	b088      	sub	sp, #32
 8022046:	af00      	add	r7, sp, #0
 8022048:	6078      	str	r0, [r7, #4]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  sdmmc_cmdinit.Argument         = 0U;
 802204a:	2300      	movs	r3, #0
 802204c:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_SD_APP_STATUS;
 802204e:	230d      	movs	r3, #13
 8022050:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022052:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8022056:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 8022058:	2300      	movs	r3, #0
 802205a:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 802205c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022060:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 8022062:	f107 0308 	add.w	r3, r7, #8
 8022066:	4619      	mov	r1, r3
 8022068:	6878      	ldr	r0, [r7, #4]
 802206a:	f7ff fcb3 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_SD_APP_STATUS, SDMMC_CMDTIMEOUT);
 802206e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022072:	210d      	movs	r1, #13
 8022074:	6878      	ldr	r0, [r7, #4]
 8022076:	f000 f829 	bl	80220cc <SDMMC_GetCmdResp1>
 802207a:	61f8      	str	r0, [r7, #28]

  return errorstate;
 802207c:	69fb      	ldr	r3, [r7, #28]
}
 802207e:	4618      	mov	r0, r3
 8022080:	3720      	adds	r7, #32
 8022082:	46bd      	mov	sp, r7
 8022084:	bd80      	pop	{r7, pc}

08022086 <SDMMC_CmdSwitch>:
  * @param  SDMMCx: Pointer to SDMMC register base
  * @parame Argument: Argument used for the command
  * @retval HAL status
  */
uint32_t SDMMC_CmdSwitch(SDMMC_TypeDef *SDMMCx, uint32_t Argument)
{
 8022086:	b580      	push	{r7, lr}
 8022088:	b088      	sub	sp, #32
 802208a:	af00      	add	r7, sp, #0
 802208c:	6078      	str	r0, [r7, #4]
 802208e:	6039      	str	r1, [r7, #0]
  SDMMC_CmdInitTypeDef  sdmmc_cmdinit;
  uint32_t errorstate;

  /* Send CMD6 to activate SDR50 Mode and Power Limit 1.44W */
  /* CMD Response: R1 */
  sdmmc_cmdinit.Argument         = Argument; /* SDMMC_SDR25_SWITCH_PATTERN*/
 8022090:	683b      	ldr	r3, [r7, #0]
 8022092:	60bb      	str	r3, [r7, #8]
  sdmmc_cmdinit.CmdIndex         = SDMMC_CMD_HS_SWITCH;
 8022094:	2306      	movs	r3, #6
 8022096:	60fb      	str	r3, [r7, #12]
  sdmmc_cmdinit.Response         = SDMMC_RESPONSE_SHORT;
 8022098:	f44f 7380 	mov.w	r3, #256	@ 0x100
 802209c:	613b      	str	r3, [r7, #16]
  sdmmc_cmdinit.WaitForInterrupt = SDMMC_WAIT_NO;
 802209e:	2300      	movs	r3, #0
 80220a0:	617b      	str	r3, [r7, #20]
  sdmmc_cmdinit.CPSM             = SDMMC_CPSM_ENABLE;
 80220a2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80220a6:	61bb      	str	r3, [r7, #24]
  (void)SDMMC_SendCommand(SDMMCx, &sdmmc_cmdinit);
 80220a8:	f107 0308 	add.w	r3, r7, #8
 80220ac:	4619      	mov	r1, r3
 80220ae:	6878      	ldr	r0, [r7, #4]
 80220b0:	f7ff fc90 	bl	80219d4 <SDMMC_SendCommand>

  /* Check for error conditions */
  errorstate = SDMMC_GetCmdResp1(SDMMCx, SDMMC_CMD_HS_SWITCH, SDMMC_CMDTIMEOUT);
 80220b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80220b8:	2106      	movs	r1, #6
 80220ba:	6878      	ldr	r0, [r7, #4]
 80220bc:	f000 f806 	bl	80220cc <SDMMC_GetCmdResp1>
 80220c0:	61f8      	str	r0, [r7, #28]

  return errorstate;
 80220c2:	69fb      	ldr	r3, [r7, #28]
}
 80220c4:	4618      	mov	r0, r3
 80220c6:	3720      	adds	r7, #32
 80220c8:	46bd      	mov	sp, r7
 80220ca:	bd80      	pop	{r7, pc}

080220cc <SDMMC_GetCmdResp1>:
  * @param  hsd: SD handle
  * @param  SD_CMD: The sent command index
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp1(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint32_t Timeout)
{
 80220cc:	b580      	push	{r7, lr}
 80220ce:	b088      	sub	sp, #32
 80220d0:	af00      	add	r7, sp, #0
 80220d2:	60f8      	str	r0, [r7, #12]
 80220d4:	460b      	mov	r3, r1
 80220d6:	607a      	str	r2, [r7, #4]
 80220d8:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The Timeout is expressed in ms */
  uint32_t count = Timeout * (SystemCoreClock / 8U / 1000U);
 80220da:	4b70      	ldr	r3, [pc, #448]	@ (802229c <SDMMC_GetCmdResp1+0x1d0>)
 80220dc:	681b      	ldr	r3, [r3, #0]
 80220de:	4a70      	ldr	r2, [pc, #448]	@ (80222a0 <SDMMC_GetCmdResp1+0x1d4>)
 80220e0:	fba2 2303 	umull	r2, r3, r2, r3
 80220e4:	0a5a      	lsrs	r2, r3, #9
 80220e6:	687b      	ldr	r3, [r7, #4]
 80220e8:	fb02 f303 	mul.w	r3, r2, r3
 80220ec:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80220ee:	69fb      	ldr	r3, [r7, #28]
 80220f0:	1e5a      	subs	r2, r3, #1
 80220f2:	61fa      	str	r2, [r7, #28]
 80220f4:	2b00      	cmp	r3, #0
 80220f6:	d102      	bne.n	80220fe <SDMMC_GetCmdResp1+0x32>
    {
      return SDMMC_ERROR_TIMEOUT;
 80220f8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80220fc:	e0c9      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
    }
    sta_reg = SDMMCx->STA;
 80220fe:	68fb      	ldr	r3, [r7, #12]
 8022100:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022102:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT |
 8022104:	69ba      	ldr	r2, [r7, #24]
 8022106:	4b67      	ldr	r3, [pc, #412]	@ (80222a4 <SDMMC_GetCmdResp1+0x1d8>)
 8022108:	4013      	ands	r3, r2
                        SDMMC_FLAG_BUSYD0END)) == 0U) || ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 802210a:	2b00      	cmp	r3, #0
 802210c:	d0ef      	beq.n	80220ee <SDMMC_GetCmdResp1+0x22>
 802210e:	69bb      	ldr	r3, [r7, #24]
 8022110:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022114:	2b00      	cmp	r3, #0
 8022116:	d1ea      	bne.n	80220ee <SDMMC_GetCmdResp1+0x22>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022118:	68fb      	ldr	r3, [r7, #12]
 802211a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802211c:	f003 0304 	and.w	r3, r3, #4
 8022120:	2b00      	cmp	r3, #0
 8022122:	d004      	beq.n	802212e <SDMMC_GetCmdResp1+0x62>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022124:	68fb      	ldr	r3, [r7, #12]
 8022126:	2204      	movs	r2, #4
 8022128:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802212a:	2304      	movs	r3, #4
 802212c:	e0b1      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802212e:	68fb      	ldr	r3, [r7, #12]
 8022130:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022132:	f003 0301 	and.w	r3, r3, #1
 8022136:	2b00      	cmp	r3, #0
 8022138:	d004      	beq.n	8022144 <SDMMC_GetCmdResp1+0x78>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802213a:	68fb      	ldr	r3, [r7, #12]
 802213c:	2201      	movs	r2, #1
 802213e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022140:	2301      	movs	r3, #1
 8022142:	e0a6      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  {
    /* Nothing to do */
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022144:	68fb      	ldr	r3, [r7, #12]
 8022146:	4a58      	ldr	r2, [pc, #352]	@ (80222a8 <SDMMC_GetCmdResp1+0x1dc>)
 8022148:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802214a:	68f8      	ldr	r0, [r7, #12]
 802214c:	f7ff fc6c 	bl	8021a28 <SDMMC_GetCommandResponse>
 8022150:	4603      	mov	r3, r0
 8022152:	461a      	mov	r2, r3
 8022154:	7afb      	ldrb	r3, [r7, #11]
 8022156:	4293      	cmp	r3, r2
 8022158:	d001      	beq.n	802215e <SDMMC_GetCmdResp1+0x92>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802215a:	2301      	movs	r3, #1
 802215c:	e099      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }

  /* We have received response, retrieve it for analysis  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 802215e:	2100      	movs	r1, #0
 8022160:	68f8      	ldr	r0, [r7, #12]
 8022162:	f7ff fc6e 	bl	8021a42 <SDMMC_GetResponse>
 8022166:	6178      	str	r0, [r7, #20]

  if ((response_r1 & SDMMC_OCR_ERRORBITS) == SDMMC_ALLZERO)
 8022168:	697a      	ldr	r2, [r7, #20]
 802216a:	4b50      	ldr	r3, [pc, #320]	@ (80222ac <SDMMC_GetCmdResp1+0x1e0>)
 802216c:	4013      	ands	r3, r2
 802216e:	2b00      	cmp	r3, #0
 8022170:	d101      	bne.n	8022176 <SDMMC_GetCmdResp1+0xaa>
  {
    return SDMMC_ERROR_NONE;
 8022172:	2300      	movs	r3, #0
 8022174:	e08d      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_OUT_OF_RANGE) == SDMMC_OCR_ADDR_OUT_OF_RANGE)
 8022176:	697b      	ldr	r3, [r7, #20]
 8022178:	2b00      	cmp	r3, #0
 802217a:	da02      	bge.n	8022182 <SDMMC_GetCmdResp1+0xb6>
  {
    return SDMMC_ERROR_ADDR_OUT_OF_RANGE;
 802217c:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8022180:	e087      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ADDR_MISALIGNED) == SDMMC_OCR_ADDR_MISALIGNED)
 8022182:	697b      	ldr	r3, [r7, #20]
 8022184:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8022188:	2b00      	cmp	r3, #0
 802218a:	d001      	beq.n	8022190 <SDMMC_GetCmdResp1+0xc4>
  {
    return SDMMC_ERROR_ADDR_MISALIGNED;
 802218c:	2340      	movs	r3, #64	@ 0x40
 802218e:	e080      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BLOCK_LEN_ERR) == SDMMC_OCR_BLOCK_LEN_ERR)
 8022190:	697b      	ldr	r3, [r7, #20]
 8022192:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8022196:	2b00      	cmp	r3, #0
 8022198:	d001      	beq.n	802219e <SDMMC_GetCmdResp1+0xd2>
  {
    return SDMMC_ERROR_BLOCK_LEN_ERR;
 802219a:	2380      	movs	r3, #128	@ 0x80
 802219c:	e079      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_SEQ_ERR) == SDMMC_OCR_ERASE_SEQ_ERR)
 802219e:	697b      	ldr	r3, [r7, #20]
 80221a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80221a4:	2b00      	cmp	r3, #0
 80221a6:	d002      	beq.n	80221ae <SDMMC_GetCmdResp1+0xe2>
  {
    return SDMMC_ERROR_ERASE_SEQ_ERR;
 80221a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80221ac:	e071      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_BAD_ERASE_PARAM) == SDMMC_OCR_BAD_ERASE_PARAM)
 80221ae:	697b      	ldr	r3, [r7, #20]
 80221b0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80221b4:	2b00      	cmp	r3, #0
 80221b6:	d002      	beq.n	80221be <SDMMC_GetCmdResp1+0xf2>
  {
    return SDMMC_ERROR_BAD_ERASE_PARAM;
 80221b8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80221bc:	e069      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WRITE_PROT_VIOLATION) == SDMMC_OCR_WRITE_PROT_VIOLATION)
 80221be:	697b      	ldr	r3, [r7, #20]
 80221c0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80221c4:	2b00      	cmp	r3, #0
 80221c6:	d002      	beq.n	80221ce <SDMMC_GetCmdResp1+0x102>
  {
    return SDMMC_ERROR_WRITE_PROT_VIOLATION;
 80221c8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80221cc:	e061      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_LOCK_UNLOCK_FAILED) == SDMMC_OCR_LOCK_UNLOCK_FAILED)
 80221ce:	697b      	ldr	r3, [r7, #20]
 80221d0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80221d4:	2b00      	cmp	r3, #0
 80221d6:	d002      	beq.n	80221de <SDMMC_GetCmdResp1+0x112>
  {
    return SDMMC_ERROR_LOCK_UNLOCK_FAILED;
 80221d8:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80221dc:	e059      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_COM_CRC_FAILED) == SDMMC_OCR_COM_CRC_FAILED)
 80221de:	697b      	ldr	r3, [r7, #20]
 80221e0:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80221e4:	2b00      	cmp	r3, #0
 80221e6:	d002      	beq.n	80221ee <SDMMC_GetCmdResp1+0x122>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 80221e8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80221ec:	e051      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ILLEGAL_CMD) == SDMMC_OCR_ILLEGAL_CMD)
 80221ee:	697b      	ldr	r3, [r7, #20]
 80221f0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80221f4:	2b00      	cmp	r3, #0
 80221f6:	d002      	beq.n	80221fe <SDMMC_GetCmdResp1+0x132>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 80221f8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80221fc:	e049      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_FAILED) == SDMMC_OCR_CARD_ECC_FAILED)
 80221fe:	697b      	ldr	r3, [r7, #20]
 8022200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8022204:	2b00      	cmp	r3, #0
 8022206:	d002      	beq.n	802220e <SDMMC_GetCmdResp1+0x142>
  {
    return SDMMC_ERROR_CARD_ECC_FAILED;
 8022208:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 802220c:	e041      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CC_ERROR) == SDMMC_OCR_CC_ERROR)
 802220e:	697b      	ldr	r3, [r7, #20]
 8022210:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8022214:	2b00      	cmp	r3, #0
 8022216:	d002      	beq.n	802221e <SDMMC_GetCmdResp1+0x152>
  {
    return SDMMC_ERROR_CC_ERR;
 8022218:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 802221c:	e039      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_READ_UNDERRUN) == SDMMC_OCR_STREAM_READ_UNDERRUN)
 802221e:	697b      	ldr	r3, [r7, #20]
 8022220:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8022224:	2b00      	cmp	r3, #0
 8022226:	d002      	beq.n	802222e <SDMMC_GetCmdResp1+0x162>
  {
    return SDMMC_ERROR_STREAM_READ_UNDERRUN;
 8022228:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 802222c:	e031      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_STREAM_WRITE_OVERRUN) == SDMMC_OCR_STREAM_WRITE_OVERRUN)
 802222e:	697b      	ldr	r3, [r7, #20]
 8022230:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8022234:	2b00      	cmp	r3, #0
 8022236:	d002      	beq.n	802223e <SDMMC_GetCmdResp1+0x172>
  {
    return SDMMC_ERROR_STREAM_WRITE_OVERRUN;
 8022238:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 802223c:	e029      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CID_CSD_OVERWRITE) == SDMMC_OCR_CID_CSD_OVERWRITE)
 802223e:	697b      	ldr	r3, [r7, #20]
 8022240:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8022244:	2b00      	cmp	r3, #0
 8022246:	d002      	beq.n	802224e <SDMMC_GetCmdResp1+0x182>
  {
    return SDMMC_ERROR_CID_CSD_OVERWRITE;
 8022248:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 802224c:	e021      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_WP_ERASE_SKIP) == SDMMC_OCR_WP_ERASE_SKIP)
 802224e:	697b      	ldr	r3, [r7, #20]
 8022250:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8022254:	2b00      	cmp	r3, #0
 8022256:	d002      	beq.n	802225e <SDMMC_GetCmdResp1+0x192>
  {
    return SDMMC_ERROR_WP_ERASE_SKIP;
 8022258:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 802225c:	e019      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_CARD_ECC_DISABLED) == SDMMC_OCR_CARD_ECC_DISABLED)
 802225e:	697b      	ldr	r3, [r7, #20]
 8022260:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022264:	2b00      	cmp	r3, #0
 8022266:	d002      	beq.n	802226e <SDMMC_GetCmdResp1+0x1a2>
  {
    return SDMMC_ERROR_CARD_ECC_DISABLED;
 8022268:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 802226c:	e011      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_ERASE_RESET) == SDMMC_OCR_ERASE_RESET)
 802226e:	697b      	ldr	r3, [r7, #20]
 8022270:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8022274:	2b00      	cmp	r3, #0
 8022276:	d002      	beq.n	802227e <SDMMC_GetCmdResp1+0x1b2>
  {
    return SDMMC_ERROR_ERASE_RESET;
 8022278:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 802227c:	e009      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else if ((response_r1 & SDMMC_OCR_AKE_SEQ_ERROR) == SDMMC_OCR_AKE_SEQ_ERROR)
 802227e:	697b      	ldr	r3, [r7, #20]
 8022280:	f003 0308 	and.w	r3, r3, #8
 8022284:	2b00      	cmp	r3, #0
 8022286:	d002      	beq.n	802228e <SDMMC_GetCmdResp1+0x1c2>
  {
    return SDMMC_ERROR_AKE_SEQ_ERR;
 8022288:	f44f 0300 	mov.w	r3, #8388608	@ 0x800000
 802228c:	e001      	b.n	8022292 <SDMMC_GetCmdResp1+0x1c6>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802228e:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 8022292:	4618      	mov	r0, r3
 8022294:	3720      	adds	r7, #32
 8022296:	46bd      	mov	sp, r7
 8022298:	bd80      	pop	{r7, pc}
 802229a:	bf00      	nop
 802229c:	24000400 	.word	0x24000400
 80222a0:	10624dd3 	.word	0x10624dd3
 80222a4:	00200045 	.word	0x00200045
 80222a8:	002000c5 	.word	0x002000c5
 80222ac:	fdffe008 	.word	0xfdffe008

080222b0 <SDMMC_GetCmdResp2>:
  * @brief  Checks for error conditions for R2 (CID or CSD) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp2(SDMMC_TypeDef *SDMMCx)
{
 80222b0:	b480      	push	{r7}
 80222b2:	b085      	sub	sp, #20
 80222b4:	af00      	add	r7, sp, #0
 80222b6:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80222b8:	4b1f      	ldr	r3, [pc, #124]	@ (8022338 <SDMMC_GetCmdResp2+0x88>)
 80222ba:	681b      	ldr	r3, [r3, #0]
 80222bc:	4a1f      	ldr	r2, [pc, #124]	@ (802233c <SDMMC_GetCmdResp2+0x8c>)
 80222be:	fba2 2303 	umull	r2, r3, r2, r3
 80222c2:	0a5b      	lsrs	r3, r3, #9
 80222c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80222c8:	fb02 f303 	mul.w	r3, r2, r3
 80222cc:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80222ce:	68fb      	ldr	r3, [r7, #12]
 80222d0:	1e5a      	subs	r2, r3, #1
 80222d2:	60fa      	str	r2, [r7, #12]
 80222d4:	2b00      	cmp	r3, #0
 80222d6:	d102      	bne.n	80222de <SDMMC_GetCmdResp2+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80222d8:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80222dc:	e026      	b.n	802232c <SDMMC_GetCmdResp2+0x7c>
    }
    sta_reg = SDMMCx->STA;
 80222de:	687b      	ldr	r3, [r7, #4]
 80222e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80222e2:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80222e4:	68bb      	ldr	r3, [r7, #8]
 80222e6:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80222ea:	2b00      	cmp	r3, #0
 80222ec:	d0ef      	beq.n	80222ce <SDMMC_GetCmdResp2+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80222ee:	68bb      	ldr	r3, [r7, #8]
 80222f0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80222f4:	2b00      	cmp	r3, #0
 80222f6:	d1ea      	bne.n	80222ce <SDMMC_GetCmdResp2+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80222f8:	687b      	ldr	r3, [r7, #4]
 80222fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80222fc:	f003 0304 	and.w	r3, r3, #4
 8022300:	2b00      	cmp	r3, #0
 8022302:	d004      	beq.n	802230e <SDMMC_GetCmdResp2+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022304:	687b      	ldr	r3, [r7, #4]
 8022306:	2204      	movs	r2, #4
 8022308:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802230a:	2304      	movs	r3, #4
 802230c:	e00e      	b.n	802232c <SDMMC_GetCmdResp2+0x7c>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 802230e:	687b      	ldr	r3, [r7, #4]
 8022310:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022312:	f003 0301 	and.w	r3, r3, #1
 8022316:	2b00      	cmp	r3, #0
 8022318:	d004      	beq.n	8022324 <SDMMC_GetCmdResp2+0x74>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802231a:	687b      	ldr	r3, [r7, #4]
 802231c:	2201      	movs	r2, #1
 802231e:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022320:	2301      	movs	r3, #1
 8022322:	e003      	b.n	802232c <SDMMC_GetCmdResp2+0x7c>
  }
  else
  {
    /* No error flag set */
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022324:	687b      	ldr	r3, [r7, #4]
 8022326:	4a06      	ldr	r2, [pc, #24]	@ (8022340 <SDMMC_GetCmdResp2+0x90>)
 8022328:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 802232a:	2300      	movs	r3, #0
}
 802232c:	4618      	mov	r0, r3
 802232e:	3714      	adds	r7, #20
 8022330:	46bd      	mov	sp, r7
 8022332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022336:	4770      	bx	lr
 8022338:	24000400 	.word	0x24000400
 802233c:	10624dd3 	.word	0x10624dd3
 8022340:	002000c5 	.word	0x002000c5

08022344 <SDMMC_GetCmdResp3>:
  * @brief  Checks for error conditions for R3 (OCR) response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp3(SDMMC_TypeDef *SDMMCx)
{
 8022344:	b480      	push	{r7}
 8022346:	b085      	sub	sp, #20
 8022348:	af00      	add	r7, sp, #0
 802234a:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 802234c:	4b1a      	ldr	r3, [pc, #104]	@ (80223b8 <SDMMC_GetCmdResp3+0x74>)
 802234e:	681b      	ldr	r3, [r3, #0]
 8022350:	4a1a      	ldr	r2, [pc, #104]	@ (80223bc <SDMMC_GetCmdResp3+0x78>)
 8022352:	fba2 2303 	umull	r2, r3, r2, r3
 8022356:	0a5b      	lsrs	r3, r3, #9
 8022358:	f241 3288 	movw	r2, #5000	@ 0x1388
 802235c:	fb02 f303 	mul.w	r3, r2, r3
 8022360:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 8022362:	68fb      	ldr	r3, [r7, #12]
 8022364:	1e5a      	subs	r2, r3, #1
 8022366:	60fa      	str	r2, [r7, #12]
 8022368:	2b00      	cmp	r3, #0
 802236a:	d102      	bne.n	8022372 <SDMMC_GetCmdResp3+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 802236c:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 8022370:	e01b      	b.n	80223aa <SDMMC_GetCmdResp3+0x66>
    }
    sta_reg = SDMMCx->STA;
 8022372:	687b      	ldr	r3, [r7, #4]
 8022374:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022376:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022378:	68bb      	ldr	r3, [r7, #8]
 802237a:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 802237e:	2b00      	cmp	r3, #0
 8022380:	d0ef      	beq.n	8022362 <SDMMC_GetCmdResp3+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8022382:	68bb      	ldr	r3, [r7, #8]
 8022384:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 8022388:	2b00      	cmp	r3, #0
 802238a:	d1ea      	bne.n	8022362 <SDMMC_GetCmdResp3+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 802238c:	687b      	ldr	r3, [r7, #4]
 802238e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022390:	f003 0304 	and.w	r3, r3, #4
 8022394:	2b00      	cmp	r3, #0
 8022396:	d004      	beq.n	80223a2 <SDMMC_GetCmdResp3+0x5e>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022398:	687b      	ldr	r3, [r7, #4]
 802239a:	2204      	movs	r2, #4
 802239c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802239e:	2304      	movs	r3, #4
 80223a0:	e003      	b.n	80223aa <SDMMC_GetCmdResp3+0x66>
  }
  else
  {
    /* Clear all the static flags */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 80223a2:	687b      	ldr	r3, [r7, #4]
 80223a4:	4a06      	ldr	r2, [pc, #24]	@ (80223c0 <SDMMC_GetCmdResp3+0x7c>)
 80223a6:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 80223a8:	2300      	movs	r3, #0
}
 80223aa:	4618      	mov	r0, r3
 80223ac:	3714      	adds	r7, #20
 80223ae:	46bd      	mov	sp, r7
 80223b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80223b4:	4770      	bx	lr
 80223b6:	bf00      	nop
 80223b8:	24000400 	.word	0x24000400
 80223bc:	10624dd3 	.word	0x10624dd3
 80223c0:	002000c5 	.word	0x002000c5

080223c4 <SDMMC_GetCmdResp6>:
  * @param  pRCA: Pointer to the variable that will contain the SD card relative
  *         address RCA
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp6(SDMMC_TypeDef *SDMMCx, uint8_t SD_CMD, uint16_t *pRCA)
{
 80223c4:	b580      	push	{r7, lr}
 80223c6:	b088      	sub	sp, #32
 80223c8:	af00      	add	r7, sp, #0
 80223ca:	60f8      	str	r0, [r7, #12]
 80223cc:	460b      	mov	r3, r1
 80223ce:	607a      	str	r2, [r7, #4]
 80223d0:	72fb      	strb	r3, [r7, #11]
  uint32_t response_r1;
  uint32_t sta_reg;

  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80223d2:	4b35      	ldr	r3, [pc, #212]	@ (80224a8 <SDMMC_GetCmdResp6+0xe4>)
 80223d4:	681b      	ldr	r3, [r3, #0]
 80223d6:	4a35      	ldr	r2, [pc, #212]	@ (80224ac <SDMMC_GetCmdResp6+0xe8>)
 80223d8:	fba2 2303 	umull	r2, r3, r2, r3
 80223dc:	0a5b      	lsrs	r3, r3, #9
 80223de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80223e2:	fb02 f303 	mul.w	r3, r2, r3
 80223e6:	61fb      	str	r3, [r7, #28]

  do
  {
    if (count-- == 0U)
 80223e8:	69fb      	ldr	r3, [r7, #28]
 80223ea:	1e5a      	subs	r2, r3, #1
 80223ec:	61fa      	str	r2, [r7, #28]
 80223ee:	2b00      	cmp	r3, #0
 80223f0:	d102      	bne.n	80223f8 <SDMMC_GetCmdResp6+0x34>
    {
      return SDMMC_ERROR_TIMEOUT;
 80223f2:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80223f6:	e052      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
    }
    sta_reg = SDMMCx->STA;
 80223f8:	68fb      	ldr	r3, [r7, #12]
 80223fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80223fc:	61bb      	str	r3, [r7, #24]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80223fe:	69bb      	ldr	r3, [r7, #24]
 8022400:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 8022404:	2b00      	cmp	r3, #0
 8022406:	d0ef      	beq.n	80223e8 <SDMMC_GetCmdResp6+0x24>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 8022408:	69bb      	ldr	r3, [r7, #24]
 802240a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 802240e:	2b00      	cmp	r3, #0
 8022410:	d1ea      	bne.n	80223e8 <SDMMC_GetCmdResp6+0x24>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 8022412:	68fb      	ldr	r3, [r7, #12]
 8022414:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022416:	f003 0304 	and.w	r3, r3, #4
 802241a:	2b00      	cmp	r3, #0
 802241c:	d004      	beq.n	8022428 <SDMMC_GetCmdResp6+0x64>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 802241e:	68fb      	ldr	r3, [r7, #12]
 8022420:	2204      	movs	r2, #4
 8022422:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 8022424:	2304      	movs	r3, #4
 8022426:	e03a      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
  }
  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022428:	68fb      	ldr	r3, [r7, #12]
 802242a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802242c:	f003 0301 	and.w	r3, r3, #1
 8022430:	2b00      	cmp	r3, #0
 8022432:	d004      	beq.n	802243e <SDMMC_GetCmdResp6+0x7a>
  {
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 8022434:	68fb      	ldr	r3, [r7, #12]
 8022436:	2201      	movs	r2, #1
 8022438:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 802243a:	2301      	movs	r3, #1
 802243c:	e02f      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
  {
    /* Nothing to do */
  }

  /* Check response received is of desired command */
  if (SDMMC_GetCommandResponse(SDMMCx) != SD_CMD)
 802243e:	68f8      	ldr	r0, [r7, #12]
 8022440:	f7ff faf2 	bl	8021a28 <SDMMC_GetCommandResponse>
 8022444:	4603      	mov	r3, r0
 8022446:	461a      	mov	r2, r3
 8022448:	7afb      	ldrb	r3, [r7, #11]
 802244a:	4293      	cmp	r3, r2
 802244c:	d001      	beq.n	8022452 <SDMMC_GetCmdResp6+0x8e>
  {
    return SDMMC_ERROR_CMD_CRC_FAIL;
 802244e:	2301      	movs	r3, #1
 8022450:	e025      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
  }

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 8022452:	68fb      	ldr	r3, [r7, #12]
 8022454:	4a16      	ldr	r2, [pc, #88]	@ (80224b0 <SDMMC_GetCmdResp6+0xec>)
 8022456:	639a      	str	r2, [r3, #56]	@ 0x38

  /* We have received response, retrieve it.  */
  response_r1 = SDMMC_GetResponse(SDMMCx, SDMMC_RESP1);
 8022458:	2100      	movs	r1, #0
 802245a:	68f8      	ldr	r0, [r7, #12]
 802245c:	f7ff faf1 	bl	8021a42 <SDMMC_GetResponse>
 8022460:	6178      	str	r0, [r7, #20]

  if ((response_r1 & (SDMMC_R6_GENERAL_UNKNOWN_ERROR | SDMMC_R6_ILLEGAL_CMD |
 8022462:	697b      	ldr	r3, [r7, #20]
 8022464:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 8022468:	2b00      	cmp	r3, #0
 802246a:	d106      	bne.n	802247a <SDMMC_GetCmdResp6+0xb6>
                      SDMMC_R6_COM_CRC_FAILED)) == SDMMC_ALLZERO)
  {
    *pRCA = (uint16_t)(response_r1 >> 16);
 802246c:	697b      	ldr	r3, [r7, #20]
 802246e:	0c1b      	lsrs	r3, r3, #16
 8022470:	b29a      	uxth	r2, r3
 8022472:	687b      	ldr	r3, [r7, #4]
 8022474:	801a      	strh	r2, [r3, #0]

    return SDMMC_ERROR_NONE;
 8022476:	2300      	movs	r3, #0
 8022478:	e011      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_ILLEGAL_CMD) == SDMMC_R6_ILLEGAL_CMD)
 802247a:	697b      	ldr	r3, [r7, #20]
 802247c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8022480:	2b00      	cmp	r3, #0
 8022482:	d002      	beq.n	802248a <SDMMC_GetCmdResp6+0xc6>
  {
    return SDMMC_ERROR_ILLEGAL_CMD;
 8022484:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8022488:	e009      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
  }
  else if ((response_r1 & SDMMC_R6_COM_CRC_FAILED) == SDMMC_R6_COM_CRC_FAILED)
 802248a:	697b      	ldr	r3, [r7, #20]
 802248c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8022490:	2b00      	cmp	r3, #0
 8022492:	d002      	beq.n	802249a <SDMMC_GetCmdResp6+0xd6>
  {
    return SDMMC_ERROR_COM_CRC_FAILED;
 8022494:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8022498:	e001      	b.n	802249e <SDMMC_GetCmdResp6+0xda>
  }
  else
  {
    return SDMMC_ERROR_GENERAL_UNKNOWN_ERR;
 802249a:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
  }
}
 802249e:	4618      	mov	r0, r3
 80224a0:	3720      	adds	r7, #32
 80224a2:	46bd      	mov	sp, r7
 80224a4:	bd80      	pop	{r7, pc}
 80224a6:	bf00      	nop
 80224a8:	24000400 	.word	0x24000400
 80224ac:	10624dd3 	.word	0x10624dd3
 80224b0:	002000c5 	.word	0x002000c5

080224b4 <SDMMC_GetCmdResp7>:
  * @brief  Checks for error conditions for R7 response.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
uint32_t SDMMC_GetCmdResp7(SDMMC_TypeDef *SDMMCx)
{
 80224b4:	b480      	push	{r7}
 80224b6:	b085      	sub	sp, #20
 80224b8:	af00      	add	r7, sp, #0
 80224ba:	6078      	str	r0, [r7, #4]
  uint32_t sta_reg;
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 80224bc:	4b22      	ldr	r3, [pc, #136]	@ (8022548 <SDMMC_GetCmdResp7+0x94>)
 80224be:	681b      	ldr	r3, [r3, #0]
 80224c0:	4a22      	ldr	r2, [pc, #136]	@ (802254c <SDMMC_GetCmdResp7+0x98>)
 80224c2:	fba2 2303 	umull	r2, r3, r2, r3
 80224c6:	0a5b      	lsrs	r3, r3, #9
 80224c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80224cc:	fb02 f303 	mul.w	r3, r2, r3
 80224d0:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 80224d2:	68fb      	ldr	r3, [r7, #12]
 80224d4:	1e5a      	subs	r2, r3, #1
 80224d6:	60fa      	str	r2, [r7, #12]
 80224d8:	2b00      	cmp	r3, #0
 80224da:	d102      	bne.n	80224e2 <SDMMC_GetCmdResp7+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 80224dc:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 80224e0:	e02c      	b.n	802253c <SDMMC_GetCmdResp7+0x88>
    }
    sta_reg = SDMMCx->STA;
 80224e2:	687b      	ldr	r3, [r7, #4]
 80224e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80224e6:	60bb      	str	r3, [r7, #8]
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80224e8:	68bb      	ldr	r3, [r7, #8]
 80224ea:	f003 0345 	and.w	r3, r3, #69	@ 0x45
 80224ee:	2b00      	cmp	r3, #0
 80224f0:	d0ef      	beq.n	80224d2 <SDMMC_GetCmdResp7+0x1e>
           ((sta_reg & SDMMC_FLAG_CMDACT) != 0U));
 80224f2:	68bb      	ldr	r3, [r7, #8]
 80224f4:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  } while (((sta_reg & (SDMMC_FLAG_CCRCFAIL | SDMMC_FLAG_CMDREND | SDMMC_FLAG_CTIMEOUT)) == 0U) ||
 80224f8:	2b00      	cmp	r3, #0
 80224fa:	d1ea      	bne.n	80224d2 <SDMMC_GetCmdResp7+0x1e>

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT))
 80224fc:	687b      	ldr	r3, [r7, #4]
 80224fe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022500:	f003 0304 	and.w	r3, r3, #4
 8022504:	2b00      	cmp	r3, #0
 8022506:	d004      	beq.n	8022512 <SDMMC_GetCmdResp7+0x5e>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CTIMEOUT);
 8022508:	687b      	ldr	r3, [r7, #4]
 802250a:	2204      	movs	r2, #4
 802250c:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_RSP_TIMEOUT;
 802250e:	2304      	movs	r3, #4
 8022510:	e014      	b.n	802253c <SDMMC_GetCmdResp7+0x88>
  }

  else if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL))
 8022512:	687b      	ldr	r3, [r7, #4]
 8022514:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022516:	f003 0301 	and.w	r3, r3, #1
 802251a:	2b00      	cmp	r3, #0
 802251c:	d004      	beq.n	8022528 <SDMMC_GetCmdResp7+0x74>
  {
    /* Card is not SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CCRCFAIL);
 802251e:	687b      	ldr	r3, [r7, #4]
 8022520:	2201      	movs	r2, #1
 8022522:	639a      	str	r2, [r3, #56]	@ 0x38

    return SDMMC_ERROR_CMD_CRC_FAIL;
 8022524:	2301      	movs	r3, #1
 8022526:	e009      	b.n	802253c <SDMMC_GetCmdResp7+0x88>
  else
  {
    /* Nothing to do */
  }

  if (__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDREND))
 8022528:	687b      	ldr	r3, [r7, #4]
 802252a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 802252c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8022530:	2b00      	cmp	r3, #0
 8022532:	d002      	beq.n	802253a <SDMMC_GetCmdResp7+0x86>
  {
    /* Card is SD V2.0 compliant */
    __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_FLAG_CMDREND);
 8022534:	687b      	ldr	r3, [r7, #4]
 8022536:	2240      	movs	r2, #64	@ 0x40
 8022538:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  return SDMMC_ERROR_NONE;
 802253a:	2300      	movs	r3, #0

}
 802253c:	4618      	mov	r0, r3
 802253e:	3714      	adds	r7, #20
 8022540:	46bd      	mov	sp, r7
 8022542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022546:	4770      	bx	lr
 8022548:	24000400 	.word	0x24000400
 802254c:	10624dd3 	.word	0x10624dd3

08022550 <SDMMC_GetCmdError>:
  * @brief  Checks for error conditions for CMD0.
  * @param  hsd: SD handle
  * @retval SD Card error state
  */
static uint32_t SDMMC_GetCmdError(SDMMC_TypeDef *SDMMCx)
{
 8022550:	b480      	push	{r7}
 8022552:	b085      	sub	sp, #20
 8022554:	af00      	add	r7, sp, #0
 8022556:	6078      	str	r0, [r7, #4]
  /* 8 is the number of required instructions cycles for the below loop statement.
  The SDMMC_CMDTIMEOUT is expressed in ms */
  uint32_t count = SDMMC_CMDTIMEOUT * (SystemCoreClock / 8U / 1000U);
 8022558:	4b11      	ldr	r3, [pc, #68]	@ (80225a0 <SDMMC_GetCmdError+0x50>)
 802255a:	681b      	ldr	r3, [r3, #0]
 802255c:	4a11      	ldr	r2, [pc, #68]	@ (80225a4 <SDMMC_GetCmdError+0x54>)
 802255e:	fba2 2303 	umull	r2, r3, r2, r3
 8022562:	0a5b      	lsrs	r3, r3, #9
 8022564:	f241 3288 	movw	r2, #5000	@ 0x1388
 8022568:	fb02 f303 	mul.w	r3, r2, r3
 802256c:	60fb      	str	r3, [r7, #12]

  do
  {
    if (count-- == 0U)
 802256e:	68fb      	ldr	r3, [r7, #12]
 8022570:	1e5a      	subs	r2, r3, #1
 8022572:	60fa      	str	r2, [r7, #12]
 8022574:	2b00      	cmp	r3, #0
 8022576:	d102      	bne.n	802257e <SDMMC_GetCmdError+0x2e>
    {
      return SDMMC_ERROR_TIMEOUT;
 8022578:	f04f 4300 	mov.w	r3, #2147483648	@ 0x80000000
 802257c:	e009      	b.n	8022592 <SDMMC_GetCmdError+0x42>
    }

  } while (!__SDMMC_GET_FLAG(SDMMCx, SDMMC_FLAG_CMDSENT));
 802257e:	687b      	ldr	r3, [r7, #4]
 8022580:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8022582:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8022586:	2b00      	cmp	r3, #0
 8022588:	d0f1      	beq.n	802256e <SDMMC_GetCmdError+0x1e>

  /* Clear all the static flags */
  __SDMMC_CLEAR_FLAG(SDMMCx, SDMMC_STATIC_CMD_FLAGS);
 802258a:	687b      	ldr	r3, [r7, #4]
 802258c:	4a06      	ldr	r2, [pc, #24]	@ (80225a8 <SDMMC_GetCmdError+0x58>)
 802258e:	639a      	str	r2, [r3, #56]	@ 0x38

  return SDMMC_ERROR_NONE;
 8022590:	2300      	movs	r3, #0
}
 8022592:	4618      	mov	r0, r3
 8022594:	3714      	adds	r7, #20
 8022596:	46bd      	mov	sp, r7
 8022598:	f85d 7b04 	ldr.w	r7, [sp], #4
 802259c:	4770      	bx	lr
 802259e:	bf00      	nop
 80225a0:	24000400 	.word	0x24000400
 80225a4:	10624dd3 	.word	0x10624dd3
 80225a8:	002000c5 	.word	0x002000c5

080225ac <UTIL_LCD_SetFuncDriver>:
/**
  * @brief  Link board LCD drivers to STM32 LCD Utility drivers
  * @param  pDrv Structure of LCD functions
  */
void UTIL_LCD_SetFuncDriver(const LCD_UTILS_Drv_t *pDrv)
{
 80225ac:	b580      	push	{r7, lr}
 80225ae:	b082      	sub	sp, #8
 80225b0:	af00      	add	r7, sp, #0
 80225b2:	6078      	str	r0, [r7, #4]
  FuncDriver.DrawBitmap     = pDrv->DrawBitmap;
 80225b4:	687b      	ldr	r3, [r7, #4]
 80225b6:	681b      	ldr	r3, [r3, #0]
 80225b8:	4a22      	ldr	r2, [pc, #136]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225ba:	6013      	str	r3, [r2, #0]
  FuncDriver.FillRGBRect    = pDrv->FillRGBRect;
 80225bc:	687b      	ldr	r3, [r7, #4]
 80225be:	685b      	ldr	r3, [r3, #4]
 80225c0:	4a20      	ldr	r2, [pc, #128]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225c2:	6053      	str	r3, [r2, #4]
  FuncDriver.DrawHLine      = pDrv->DrawHLine;
 80225c4:	687b      	ldr	r3, [r7, #4]
 80225c6:	689b      	ldr	r3, [r3, #8]
 80225c8:	4a1e      	ldr	r2, [pc, #120]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225ca:	6093      	str	r3, [r2, #8]
  FuncDriver.DrawVLine      = pDrv->DrawVLine;
 80225cc:	687b      	ldr	r3, [r7, #4]
 80225ce:	68db      	ldr	r3, [r3, #12]
 80225d0:	4a1c      	ldr	r2, [pc, #112]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225d2:	60d3      	str	r3, [r2, #12]
  FuncDriver.FillRect       = pDrv->FillRect;
 80225d4:	687b      	ldr	r3, [r7, #4]
 80225d6:	691b      	ldr	r3, [r3, #16]
 80225d8:	4a1a      	ldr	r2, [pc, #104]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225da:	6113      	str	r3, [r2, #16]
  FuncDriver.GetPixel       = pDrv->GetPixel;
 80225dc:	687b      	ldr	r3, [r7, #4]
 80225de:	695b      	ldr	r3, [r3, #20]
 80225e0:	4a18      	ldr	r2, [pc, #96]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225e2:	6153      	str	r3, [r2, #20]
  FuncDriver.SetPixel       = pDrv->SetPixel;
 80225e4:	687b      	ldr	r3, [r7, #4]
 80225e6:	699b      	ldr	r3, [r3, #24]
 80225e8:	4a16      	ldr	r2, [pc, #88]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225ea:	6193      	str	r3, [r2, #24]
  FuncDriver.GetXSize       = pDrv->GetXSize;
 80225ec:	687b      	ldr	r3, [r7, #4]
 80225ee:	69db      	ldr	r3, [r3, #28]
 80225f0:	4a14      	ldr	r2, [pc, #80]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225f2:	61d3      	str	r3, [r2, #28]
  FuncDriver.GetYSize       = pDrv->GetYSize;
 80225f4:	687b      	ldr	r3, [r7, #4]
 80225f6:	6a1b      	ldr	r3, [r3, #32]
 80225f8:	4a12      	ldr	r2, [pc, #72]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 80225fa:	6213      	str	r3, [r2, #32]
  FuncDriver.SetLayer       = pDrv->SetLayer;
 80225fc:	687b      	ldr	r3, [r7, #4]
 80225fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8022600:	4a10      	ldr	r2, [pc, #64]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 8022602:	6253      	str	r3, [r2, #36]	@ 0x24
  FuncDriver.GetFormat      = pDrv->GetFormat;
 8022604:	687b      	ldr	r3, [r7, #4]
 8022606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022608:	4a0e      	ldr	r2, [pc, #56]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 802260a:	6293      	str	r3, [r2, #40]	@ 0x28

  DrawProp->LcdLayer = 0;
 802260c:	4b0e      	ldr	r3, [pc, #56]	@ (8022648 <UTIL_LCD_SetFuncDriver+0x9c>)
 802260e:	2200      	movs	r2, #0
 8022610:	60da      	str	r2, [r3, #12]
  DrawProp->LcdDevice = 0;
 8022612:	4b0d      	ldr	r3, [pc, #52]	@ (8022648 <UTIL_LCD_SetFuncDriver+0x9c>)
 8022614:	2200      	movs	r2, #0
 8022616:	611a      	str	r2, [r3, #16]
  FuncDriver.GetXSize(0, &DrawProp->LcdXsize);
 8022618:	4b0a      	ldr	r3, [pc, #40]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 802261a:	69db      	ldr	r3, [r3, #28]
 802261c:	4a0b      	ldr	r2, [pc, #44]	@ (802264c <UTIL_LCD_SetFuncDriver+0xa0>)
 802261e:	4611      	mov	r1, r2
 8022620:	2000      	movs	r0, #0
 8022622:	4798      	blx	r3
  FuncDriver.GetYSize(0, &DrawProp->LcdYsize);
 8022624:	4b07      	ldr	r3, [pc, #28]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 8022626:	6a1b      	ldr	r3, [r3, #32]
 8022628:	4a09      	ldr	r2, [pc, #36]	@ (8022650 <UTIL_LCD_SetFuncDriver+0xa4>)
 802262a:	4611      	mov	r1, r2
 802262c:	2000      	movs	r0, #0
 802262e:	4798      	blx	r3
  FuncDriver.GetFormat(0, &DrawProp->LcdPixelFormat);
 8022630:	4b04      	ldr	r3, [pc, #16]	@ (8022644 <UTIL_LCD_SetFuncDriver+0x98>)
 8022632:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8022634:	4a07      	ldr	r2, [pc, #28]	@ (8022654 <UTIL_LCD_SetFuncDriver+0xa8>)
 8022636:	4611      	mov	r1, r2
 8022638:	2000      	movs	r0, #0
 802263a:	4798      	blx	r3
}
 802263c:	bf00      	nop
 802263e:	3708      	adds	r7, #8
 8022640:	46bd      	mov	sp, r7
 8022642:	bd80      	pop	{r7, pc}
 8022644:	24008a38 	.word	0x24008a38
 8022648:	240089f8 	.word	0x240089f8
 802264c:	24008a0c 	.word	0x24008a0c
 8022650:	24008a10 	.word	0x24008a10
 8022654:	24008a14 	.word	0x24008a14

08022658 <UTIL_LCD_SetTextColor>:
/**
  * @brief  Sets the LCD text color.
  * @param  Color  Text color code
  */
void UTIL_LCD_SetTextColor(uint32_t Color)
{
 8022658:	b480      	push	{r7}
 802265a:	b083      	sub	sp, #12
 802265c:	af00      	add	r7, sp, #0
 802265e:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].TextColor = Color;
 8022660:	4b06      	ldr	r3, [pc, #24]	@ (802267c <UTIL_LCD_SetTextColor+0x24>)
 8022662:	68db      	ldr	r3, [r3, #12]
 8022664:	4a05      	ldr	r2, [pc, #20]	@ (802267c <UTIL_LCD_SetTextColor+0x24>)
 8022666:	015b      	lsls	r3, r3, #5
 8022668:	4413      	add	r3, r2
 802266a:	687a      	ldr	r2, [r7, #4]
 802266c:	601a      	str	r2, [r3, #0]
}
 802266e:	bf00      	nop
 8022670:	370c      	adds	r7, #12
 8022672:	46bd      	mov	sp, r7
 8022674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8022678:	4770      	bx	lr
 802267a:	bf00      	nop
 802267c:	240089f8 	.word	0x240089f8

08022680 <UTIL_LCD_SetBackColor>:
/**
  * @brief  Sets the LCD background color.
  * @param  Color  Layer background color code
  */
void UTIL_LCD_SetBackColor(uint32_t Color)
{
 8022680:	b480      	push	{r7}
 8022682:	b083      	sub	sp, #12
 8022684:	af00      	add	r7, sp, #0
 8022686:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].BackColor = Color;
 8022688:	4b06      	ldr	r3, [pc, #24]	@ (80226a4 <UTIL_LCD_SetBackColor+0x24>)
 802268a:	68db      	ldr	r3, [r3, #12]
 802268c:	4a05      	ldr	r2, [pc, #20]	@ (80226a4 <UTIL_LCD_SetBackColor+0x24>)
 802268e:	015b      	lsls	r3, r3, #5
 8022690:	4413      	add	r3, r2
 8022692:	3304      	adds	r3, #4
 8022694:	687a      	ldr	r2, [r7, #4]
 8022696:	601a      	str	r2, [r3, #0]
}
 8022698:	bf00      	nop
 802269a:	370c      	adds	r7, #12
 802269c:	46bd      	mov	sp, r7
 802269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226a2:	4770      	bx	lr
 80226a4:	240089f8 	.word	0x240089f8

080226a8 <UTIL_LCD_SetFont>:
/**
  * @brief  Sets the LCD text font.
  * @param  fonts  Layer font to be used
  */
void UTIL_LCD_SetFont(sFONT *fonts)
{
 80226a8:	b480      	push	{r7}
 80226aa:	b083      	sub	sp, #12
 80226ac:	af00      	add	r7, sp, #0
 80226ae:	6078      	str	r0, [r7, #4]
  DrawProp[DrawProp->LcdLayer].pFont = fonts;
 80226b0:	4b06      	ldr	r3, [pc, #24]	@ (80226cc <UTIL_LCD_SetFont+0x24>)
 80226b2:	68db      	ldr	r3, [r3, #12]
 80226b4:	4a05      	ldr	r2, [pc, #20]	@ (80226cc <UTIL_LCD_SetFont+0x24>)
 80226b6:	015b      	lsls	r3, r3, #5
 80226b8:	4413      	add	r3, r2
 80226ba:	3308      	adds	r3, #8
 80226bc:	687a      	ldr	r2, [r7, #4]
 80226be:	601a      	str	r2, [r3, #0]
}
 80226c0:	bf00      	nop
 80226c2:	370c      	adds	r7, #12
 80226c4:	46bd      	mov	sp, r7
 80226c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226ca:	4770      	bx	lr
 80226cc:	240089f8 	.word	0x240089f8

080226d0 <UTIL_LCD_GetFont>:
/**
  * @brief  Gets the LCD text font.
  * @retval Used layer font
  */
sFONT *UTIL_LCD_GetFont(void)
{
 80226d0:	b480      	push	{r7}
 80226d2:	af00      	add	r7, sp, #0
  return DrawProp[DrawProp->LcdLayer].pFont;
 80226d4:	4b05      	ldr	r3, [pc, #20]	@ (80226ec <UTIL_LCD_GetFont+0x1c>)
 80226d6:	68db      	ldr	r3, [r3, #12]
 80226d8:	4a04      	ldr	r2, [pc, #16]	@ (80226ec <UTIL_LCD_GetFont+0x1c>)
 80226da:	015b      	lsls	r3, r3, #5
 80226dc:	4413      	add	r3, r2
 80226de:	3308      	adds	r3, #8
 80226e0:	681b      	ldr	r3, [r3, #0]
}
 80226e2:	4618      	mov	r0, r3
 80226e4:	46bd      	mov	sp, r7
 80226e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80226ea:	4770      	bx	lr
 80226ec:	240089f8 	.word	0x240089f8

080226f0 <UTIL_LCD_FillRGBRect>:
  * @param  Xpos    X position
  * @param  Ypos    Y position
  * @param  Length  Line length
  */
void UTIL_LCD_FillRGBRect(uint32_t Xpos, uint32_t Ypos, uint8_t *pData, uint32_t Width, uint32_t Height)
{
 80226f0:	b590      	push	{r4, r7, lr}
 80226f2:	b087      	sub	sp, #28
 80226f4:	af02      	add	r7, sp, #8
 80226f6:	60f8      	str	r0, [r7, #12]
 80226f8:	60b9      	str	r1, [r7, #8]
 80226fa:	607a      	str	r2, [r7, #4]
 80226fc:	603b      	str	r3, [r7, #0]
  /* Write RGB rectangle data */
  FuncDriver.FillRGBRect(DrawProp->LcdDevice, Xpos, Ypos, pData, Width, Height);
 80226fe:	4b08      	ldr	r3, [pc, #32]	@ (8022720 <UTIL_LCD_FillRGBRect+0x30>)
 8022700:	685c      	ldr	r4, [r3, #4]
 8022702:	4b08      	ldr	r3, [pc, #32]	@ (8022724 <UTIL_LCD_FillRGBRect+0x34>)
 8022704:	6918      	ldr	r0, [r3, #16]
 8022706:	6a3b      	ldr	r3, [r7, #32]
 8022708:	9301      	str	r3, [sp, #4]
 802270a:	683b      	ldr	r3, [r7, #0]
 802270c:	9300      	str	r3, [sp, #0]
 802270e:	687b      	ldr	r3, [r7, #4]
 8022710:	68ba      	ldr	r2, [r7, #8]
 8022712:	68f9      	ldr	r1, [r7, #12]
 8022714:	47a0      	blx	r4
}
 8022716:	bf00      	nop
 8022718:	3714      	adds	r7, #20
 802271a:	46bd      	mov	sp, r7
 802271c:	bd90      	pop	{r4, r7, pc}
 802271e:	bf00      	nop
 8022720:	24008a38 	.word	0x24008a38
 8022724:	240089f8 	.word	0x240089f8

08022728 <UTIL_LCD_DrawHLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawHLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8022728:	b590      	push	{r4, r7, lr}
 802272a:	b087      	sub	sp, #28
 802272c:	af02      	add	r7, sp, #8
 802272e:	60f8      	str	r0, [r7, #12]
 8022730:	60b9      	str	r1, [r7, #8]
 8022732:	607a      	str	r2, [r7, #4]
 8022734:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8022736:	4b15      	ldr	r3, [pc, #84]	@ (802278c <UTIL_LCD_DrawHLine+0x64>)
 8022738:	69db      	ldr	r3, [r3, #28]
 802273a:	2b02      	cmp	r3, #2
 802273c:	d118      	bne.n	8022770 <UTIL_LCD_DrawHLine+0x48>
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 802273e:	4b14      	ldr	r3, [pc, #80]	@ (8022790 <UTIL_LCD_DrawHLine+0x68>)
 8022740:	689c      	ldr	r4, [r3, #8]
 8022742:	4b12      	ldr	r3, [pc, #72]	@ (802278c <UTIL_LCD_DrawHLine+0x64>)
 8022744:	6918      	ldr	r0, [r3, #16]
 8022746:	683b      	ldr	r3, [r7, #0]
 8022748:	08db      	lsrs	r3, r3, #3
 802274a:	f003 021f 	and.w	r2, r3, #31
 802274e:	683b      	ldr	r3, [r7, #0]
 8022750:	0a9b      	lsrs	r3, r3, #10
 8022752:	015b      	lsls	r3, r3, #5
 8022754:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022758:	431a      	orrs	r2, r3
 802275a:	683b      	ldr	r3, [r7, #0]
 802275c:	0cdb      	lsrs	r3, r3, #19
 802275e:	02db      	lsls	r3, r3, #11
 8022760:	b29b      	uxth	r3, r3
 8022762:	4313      	orrs	r3, r2
 8022764:	9300      	str	r3, [sp, #0]
 8022766:	687b      	ldr	r3, [r7, #4]
 8022768:	68ba      	ldr	r2, [r7, #8]
 802276a:	68f9      	ldr	r1, [r7, #12]
 802276c:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 802276e:	e009      	b.n	8022784 <UTIL_LCD_DrawHLine+0x5c>
    FuncDriver.DrawHLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 8022770:	4b07      	ldr	r3, [pc, #28]	@ (8022790 <UTIL_LCD_DrawHLine+0x68>)
 8022772:	689c      	ldr	r4, [r3, #8]
 8022774:	4b05      	ldr	r3, [pc, #20]	@ (802278c <UTIL_LCD_DrawHLine+0x64>)
 8022776:	6918      	ldr	r0, [r3, #16]
 8022778:	683b      	ldr	r3, [r7, #0]
 802277a:	9300      	str	r3, [sp, #0]
 802277c:	687b      	ldr	r3, [r7, #4]
 802277e:	68ba      	ldr	r2, [r7, #8]
 8022780:	68f9      	ldr	r1, [r7, #12]
 8022782:	47a0      	blx	r4
}
 8022784:	bf00      	nop
 8022786:	3714      	adds	r7, #20
 8022788:	46bd      	mov	sp, r7
 802278a:	bd90      	pop	{r4, r7, pc}
 802278c:	240089f8 	.word	0x240089f8
 8022790:	24008a38 	.word	0x24008a38

08022794 <UTIL_LCD_DrawVLine>:
  * @param  Ypos    Y position
  * @param  Length  Line length
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawVLine(uint32_t Xpos, uint32_t Ypos, uint32_t Length, uint32_t Color)
{
 8022794:	b590      	push	{r4, r7, lr}
 8022796:	b087      	sub	sp, #28
 8022798:	af02      	add	r7, sp, #8
 802279a:	60f8      	str	r0, [r7, #12]
 802279c:	60b9      	str	r1, [r7, #8]
 802279e:	607a      	str	r2, [r7, #4]
 80227a0:	603b      	str	r3, [r7, #0]
  /* Write line */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80227a2:	4b15      	ldr	r3, [pc, #84]	@ (80227f8 <UTIL_LCD_DrawVLine+0x64>)
 80227a4:	69db      	ldr	r3, [r3, #28]
 80227a6:	2b02      	cmp	r3, #2
 80227a8:	d118      	bne.n	80227dc <UTIL_LCD_DrawVLine+0x48>
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, CONVERTARGB88882RGB565(Color));
 80227aa:	4b14      	ldr	r3, [pc, #80]	@ (80227fc <UTIL_LCD_DrawVLine+0x68>)
 80227ac:	68dc      	ldr	r4, [r3, #12]
 80227ae:	4b12      	ldr	r3, [pc, #72]	@ (80227f8 <UTIL_LCD_DrawVLine+0x64>)
 80227b0:	6918      	ldr	r0, [r3, #16]
 80227b2:	683b      	ldr	r3, [r7, #0]
 80227b4:	08db      	lsrs	r3, r3, #3
 80227b6:	f003 021f 	and.w	r2, r3, #31
 80227ba:	683b      	ldr	r3, [r7, #0]
 80227bc:	0a9b      	lsrs	r3, r3, #10
 80227be:	015b      	lsls	r3, r3, #5
 80227c0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80227c4:	431a      	orrs	r2, r3
 80227c6:	683b      	ldr	r3, [r7, #0]
 80227c8:	0cdb      	lsrs	r3, r3, #19
 80227ca:	02db      	lsls	r3, r3, #11
 80227cc:	b29b      	uxth	r3, r3
 80227ce:	4313      	orrs	r3, r2
 80227d0:	9300      	str	r3, [sp, #0]
 80227d2:	687b      	ldr	r3, [r7, #4]
 80227d4:	68ba      	ldr	r2, [r7, #8]
 80227d6:	68f9      	ldr	r1, [r7, #12]
 80227d8:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
  }
}
 80227da:	e009      	b.n	80227f0 <UTIL_LCD_DrawVLine+0x5c>
    FuncDriver.DrawVLine(DrawProp->LcdDevice, Xpos, Ypos, Length, Color);
 80227dc:	4b07      	ldr	r3, [pc, #28]	@ (80227fc <UTIL_LCD_DrawVLine+0x68>)
 80227de:	68dc      	ldr	r4, [r3, #12]
 80227e0:	4b05      	ldr	r3, [pc, #20]	@ (80227f8 <UTIL_LCD_DrawVLine+0x64>)
 80227e2:	6918      	ldr	r0, [r3, #16]
 80227e4:	683b      	ldr	r3, [r7, #0]
 80227e6:	9300      	str	r3, [sp, #0]
 80227e8:	687b      	ldr	r3, [r7, #4]
 80227ea:	68ba      	ldr	r2, [r7, #8]
 80227ec:	68f9      	ldr	r1, [r7, #12]
 80227ee:	47a0      	blx	r4
}
 80227f0:	bf00      	nop
 80227f2:	3714      	adds	r7, #20
 80227f4:	46bd      	mov	sp, r7
 80227f6:	bd90      	pop	{r4, r7, pc}
 80227f8:	240089f8 	.word	0x240089f8
 80227fc:	24008a38 	.word	0x24008a38

08022800 <UTIL_LCD_SetPixel>:
  * @param  Xpos     X position
  * @param  Ypos     Y position
  * @param  Color    Pixel color
  */
void UTIL_LCD_SetPixel(uint16_t Xpos, uint16_t Ypos, uint32_t Color)
{
 8022800:	b5b0      	push	{r4, r5, r7, lr}
 8022802:	b082      	sub	sp, #8
 8022804:	af00      	add	r7, sp, #0
 8022806:	4603      	mov	r3, r0
 8022808:	603a      	str	r2, [r7, #0]
 802280a:	80fb      	strh	r3, [r7, #6]
 802280c:	460b      	mov	r3, r1
 802280e:	80bb      	strh	r3, [r7, #4]
  /* Set Pixel */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 8022810:	4b13      	ldr	r3, [pc, #76]	@ (8022860 <UTIL_LCD_SetPixel+0x60>)
 8022812:	69db      	ldr	r3, [r3, #28]
 8022814:	2b02      	cmp	r3, #2
 8022816:	d117      	bne.n	8022848 <UTIL_LCD_SetPixel+0x48>
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, CONVERTARGB88882RGB565(Color));
 8022818:	4b12      	ldr	r3, [pc, #72]	@ (8022864 <UTIL_LCD_SetPixel+0x64>)
 802281a:	699c      	ldr	r4, [r3, #24]
 802281c:	4b10      	ldr	r3, [pc, #64]	@ (8022860 <UTIL_LCD_SetPixel+0x60>)
 802281e:	6918      	ldr	r0, [r3, #16]
 8022820:	88f9      	ldrh	r1, [r7, #6]
 8022822:	88bd      	ldrh	r5, [r7, #4]
 8022824:	683b      	ldr	r3, [r7, #0]
 8022826:	08db      	lsrs	r3, r3, #3
 8022828:	f003 021f 	and.w	r2, r3, #31
 802282c:	683b      	ldr	r3, [r7, #0]
 802282e:	0a9b      	lsrs	r3, r3, #10
 8022830:	015b      	lsls	r3, r3, #5
 8022832:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 8022836:	431a      	orrs	r2, r3
 8022838:	683b      	ldr	r3, [r7, #0]
 802283a:	0cdb      	lsrs	r3, r3, #19
 802283c:	02db      	lsls	r3, r3, #11
 802283e:	b29b      	uxth	r3, r3
 8022840:	4313      	orrs	r3, r2
 8022842:	462a      	mov	r2, r5
 8022844:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
  }
}
 8022846:	e007      	b.n	8022858 <UTIL_LCD_SetPixel+0x58>
    FuncDriver.SetPixel(DrawProp->LcdDevice, Xpos, Ypos, Color);
 8022848:	4b06      	ldr	r3, [pc, #24]	@ (8022864 <UTIL_LCD_SetPixel+0x64>)
 802284a:	699c      	ldr	r4, [r3, #24]
 802284c:	4b04      	ldr	r3, [pc, #16]	@ (8022860 <UTIL_LCD_SetPixel+0x60>)
 802284e:	6918      	ldr	r0, [r3, #16]
 8022850:	88f9      	ldrh	r1, [r7, #6]
 8022852:	88ba      	ldrh	r2, [r7, #4]
 8022854:	683b      	ldr	r3, [r7, #0]
 8022856:	47a0      	blx	r4
}
 8022858:	bf00      	nop
 802285a:	3708      	adds	r7, #8
 802285c:	46bd      	mov	sp, r7
 802285e:	bdb0      	pop	{r4, r5, r7, pc}
 8022860:	240089f8 	.word	0x240089f8
 8022864:	24008a38 	.word	0x24008a38

08022868 <UTIL_LCD_Clear>:
/**
  * @brief  Clears the whole currently active layer of LTDC.
  * @param  Color  Color of the background
  */
void UTIL_LCD_Clear(uint32_t Color)
{
 8022868:	b580      	push	{r7, lr}
 802286a:	b084      	sub	sp, #16
 802286c:	af02      	add	r7, sp, #8
 802286e:	6078      	str	r0, [r7, #4]
  /* Clear the LCD */
  UTIL_LCD_FillRect(0, 0, DrawProp->LcdXsize, DrawProp->LcdYsize, Color);
 8022870:	4b07      	ldr	r3, [pc, #28]	@ (8022890 <UTIL_LCD_Clear+0x28>)
 8022872:	695a      	ldr	r2, [r3, #20]
 8022874:	4b06      	ldr	r3, [pc, #24]	@ (8022890 <UTIL_LCD_Clear+0x28>)
 8022876:	6999      	ldr	r1, [r3, #24]
 8022878:	687b      	ldr	r3, [r7, #4]
 802287a:	9300      	str	r3, [sp, #0]
 802287c:	460b      	mov	r3, r1
 802287e:	2100      	movs	r1, #0
 8022880:	2000      	movs	r0, #0
 8022882:	f000 fc17 	bl	80230b4 <UTIL_LCD_FillRect>
}
 8022886:	bf00      	nop
 8022888:	3708      	adds	r7, #8
 802288a:	46bd      	mov	sp, r7
 802288c:	bd80      	pop	{r7, pc}
 802288e:	bf00      	nop
 8022890:	240089f8 	.word	0x240089f8

08022894 <UTIL_LCD_DisplayChar>:
  * @param  Ypos Line where to display the character shape.
  * @param  Ascii Character ascii code
  *           This parameter must be a number between Min_Data = 0x20 and Max_Data = 0x7E
  */
void UTIL_LCD_DisplayChar(uint32_t Xpos, uint32_t Ypos, uint8_t Ascii)
{
 8022894:	b580      	push	{r7, lr}
 8022896:	b084      	sub	sp, #16
 8022898:	af00      	add	r7, sp, #0
 802289a:	60f8      	str	r0, [r7, #12]
 802289c:	60b9      	str	r1, [r7, #8]
 802289e:	4613      	mov	r3, r2
 80228a0:	71fb      	strb	r3, [r7, #7]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80228a2:	4b16      	ldr	r3, [pc, #88]	@ (80228fc <UTIL_LCD_DisplayChar+0x68>)
 80228a4:	68db      	ldr	r3, [r3, #12]
 80228a6:	4a15      	ldr	r2, [pc, #84]	@ (80228fc <UTIL_LCD_DisplayChar+0x68>)
 80228a8:	015b      	lsls	r3, r3, #5
 80228aa:	4413      	add	r3, r2
 80228ac:	3308      	adds	r3, #8
 80228ae:	681b      	ldr	r3, [r3, #0]
 80228b0:	681a      	ldr	r2, [r3, #0]
 80228b2:	79fb      	ldrb	r3, [r7, #7]
 80228b4:	3b20      	subs	r3, #32
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80228b6:	4911      	ldr	r1, [pc, #68]	@ (80228fc <UTIL_LCD_DisplayChar+0x68>)
 80228b8:	68c9      	ldr	r1, [r1, #12]
 80228ba:	4810      	ldr	r0, [pc, #64]	@ (80228fc <UTIL_LCD_DisplayChar+0x68>)
 80228bc:	0149      	lsls	r1, r1, #5
 80228be:	4401      	add	r1, r0
 80228c0:	3108      	adds	r1, #8
 80228c2:	6809      	ldr	r1, [r1, #0]
 80228c4:	88c9      	ldrh	r1, [r1, #6]
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80228c6:	fb03 f101 	mul.w	r1, r3, r1
  DrawProp[DrawProp->LcdLayer].pFont->Height * ((DrawProp[DrawProp->LcdLayer].pFont->Width + 7) / 8)]);
 80228ca:	4b0c      	ldr	r3, [pc, #48]	@ (80228fc <UTIL_LCD_DisplayChar+0x68>)
 80228cc:	68db      	ldr	r3, [r3, #12]
 80228ce:	480b      	ldr	r0, [pc, #44]	@ (80228fc <UTIL_LCD_DisplayChar+0x68>)
 80228d0:	015b      	lsls	r3, r3, #5
 80228d2:	4403      	add	r3, r0
 80228d4:	3308      	adds	r3, #8
 80228d6:	681b      	ldr	r3, [r3, #0]
 80228d8:	889b      	ldrh	r3, [r3, #4]
 80228da:	3307      	adds	r3, #7
 80228dc:	2b00      	cmp	r3, #0
 80228de:	da00      	bge.n	80228e2 <UTIL_LCD_DisplayChar+0x4e>
 80228e0:	3307      	adds	r3, #7
 80228e2:	10db      	asrs	r3, r3, #3
 80228e4:	fb01 f303 	mul.w	r3, r1, r3
  DrawChar(Xpos, Ypos, &DrawProp[DrawProp->LcdLayer].pFont->table[(Ascii-' ') *\
 80228e8:	4413      	add	r3, r2
 80228ea:	461a      	mov	r2, r3
 80228ec:	68b9      	ldr	r1, [r7, #8]
 80228ee:	68f8      	ldr	r0, [r7, #12]
 80228f0:	f000 fe96 	bl	8023620 <DrawChar>
}
 80228f4:	bf00      	nop
 80228f6:	3710      	adds	r7, #16
 80228f8:	46bd      	mov	sp, r7
 80228fa:	bd80      	pop	{r7, pc}
 80228fc:	240089f8 	.word	0x240089f8

08022900 <UTIL_LCD_DisplayStringAt>:
  *            @arg  CENTER_MODE
  *            @arg  RIGHT_MODE
  *            @arg  LEFT_MODE
  */
void UTIL_LCD_DisplayStringAt(uint32_t Xpos, uint32_t Ypos, uint8_t *Text, Text_AlignModeTypdef Mode)
{
 8022900:	b580      	push	{r7, lr}
 8022902:	b08a      	sub	sp, #40	@ 0x28
 8022904:	af00      	add	r7, sp, #0
 8022906:	60f8      	str	r0, [r7, #12]
 8022908:	60b9      	str	r1, [r7, #8]
 802290a:	607a      	str	r2, [r7, #4]
 802290c:	70fb      	strb	r3, [r7, #3]
  uint32_t refcolumn = 1, i = 0;
 802290e:	2301      	movs	r3, #1
 8022910:	627b      	str	r3, [r7, #36]	@ 0x24
 8022912:	2300      	movs	r3, #0
 8022914:	623b      	str	r3, [r7, #32]
  uint32_t size = 0, xsize = 0;
 8022916:	2300      	movs	r3, #0
 8022918:	61fb      	str	r3, [r7, #28]
 802291a:	2300      	movs	r3, #0
 802291c:	617b      	str	r3, [r7, #20]
  uint8_t  *ptr = Text;
 802291e:	687b      	ldr	r3, [r7, #4]
 8022920:	61bb      	str	r3, [r7, #24]

  /* Get the text size */
  while (*ptr++) size ++ ;
 8022922:	e002      	b.n	802292a <UTIL_LCD_DisplayStringAt+0x2a>
 8022924:	69fb      	ldr	r3, [r7, #28]
 8022926:	3301      	adds	r3, #1
 8022928:	61fb      	str	r3, [r7, #28]
 802292a:	69bb      	ldr	r3, [r7, #24]
 802292c:	1c5a      	adds	r2, r3, #1
 802292e:	61ba      	str	r2, [r7, #24]
 8022930:	781b      	ldrb	r3, [r3, #0]
 8022932:	2b00      	cmp	r3, #0
 8022934:	d1f6      	bne.n	8022924 <UTIL_LCD_DisplayStringAt+0x24>

  /* Characters number per line */
  xsize = (DrawProp->LcdXsize/DrawProp[DrawProp->LcdLayer].pFont->Width);
 8022936:	4b48      	ldr	r3, [pc, #288]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022938:	695b      	ldr	r3, [r3, #20]
 802293a:	4a47      	ldr	r2, [pc, #284]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 802293c:	68d2      	ldr	r2, [r2, #12]
 802293e:	4946      	ldr	r1, [pc, #280]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022940:	0152      	lsls	r2, r2, #5
 8022942:	440a      	add	r2, r1
 8022944:	3208      	adds	r2, #8
 8022946:	6812      	ldr	r2, [r2, #0]
 8022948:	8892      	ldrh	r2, [r2, #4]
 802294a:	fbb3 f3f2 	udiv	r3, r3, r2
 802294e:	617b      	str	r3, [r7, #20]

  switch (Mode)
 8022950:	78fb      	ldrb	r3, [r7, #3]
 8022952:	2b03      	cmp	r3, #3
 8022954:	d018      	beq.n	8022988 <UTIL_LCD_DisplayStringAt+0x88>
 8022956:	2b03      	cmp	r3, #3
 8022958:	dc2a      	bgt.n	80229b0 <UTIL_LCD_DisplayStringAt+0xb0>
 802295a:	2b01      	cmp	r3, #1
 802295c:	d002      	beq.n	8022964 <UTIL_LCD_DisplayStringAt+0x64>
 802295e:	2b02      	cmp	r3, #2
 8022960:	d015      	beq.n	802298e <UTIL_LCD_DisplayStringAt+0x8e>
 8022962:	e025      	b.n	80229b0 <UTIL_LCD_DisplayStringAt+0xb0>
  {
  case CENTER_MODE:
    {
      refcolumn = Xpos + ((xsize - size)* DrawProp[DrawProp->LcdLayer].pFont->Width) / 2;
 8022964:	697a      	ldr	r2, [r7, #20]
 8022966:	69fb      	ldr	r3, [r7, #28]
 8022968:	1ad3      	subs	r3, r2, r3
 802296a:	4a3b      	ldr	r2, [pc, #236]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 802296c:	68d2      	ldr	r2, [r2, #12]
 802296e:	493a      	ldr	r1, [pc, #232]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022970:	0152      	lsls	r2, r2, #5
 8022972:	440a      	add	r2, r1
 8022974:	3208      	adds	r2, #8
 8022976:	6812      	ldr	r2, [r2, #0]
 8022978:	8892      	ldrh	r2, [r2, #4]
 802297a:	fb02 f303 	mul.w	r3, r2, r3
 802297e:	085b      	lsrs	r3, r3, #1
 8022980:	68fa      	ldr	r2, [r7, #12]
 8022982:	4413      	add	r3, r2
 8022984:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 8022986:	e016      	b.n	80229b6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case LEFT_MODE:
    {
      refcolumn = Xpos;
 8022988:	68fb      	ldr	r3, [r7, #12]
 802298a:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 802298c:	e013      	b.n	80229b6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  case RIGHT_MODE:
    {
      refcolumn = - Xpos + ((xsize - size)*DrawProp[DrawProp->LcdLayer].pFont->Width);
 802298e:	697a      	ldr	r2, [r7, #20]
 8022990:	69fb      	ldr	r3, [r7, #28]
 8022992:	1ad3      	subs	r3, r2, r3
 8022994:	4a30      	ldr	r2, [pc, #192]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022996:	68d2      	ldr	r2, [r2, #12]
 8022998:	492f      	ldr	r1, [pc, #188]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 802299a:	0152      	lsls	r2, r2, #5
 802299c:	440a      	add	r2, r1
 802299e:	3208      	adds	r2, #8
 80229a0:	6812      	ldr	r2, [r2, #0]
 80229a2:	8892      	ldrh	r2, [r2, #4]
 80229a4:	fb03 f202 	mul.w	r2, r3, r2
 80229a8:	68fb      	ldr	r3, [r7, #12]
 80229aa:	1ad3      	subs	r3, r2, r3
 80229ac:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80229ae:	e002      	b.n	80229b6 <UTIL_LCD_DisplayStringAt+0xb6>
    }
  default:
    {
      refcolumn = Xpos;
 80229b0:	68fb      	ldr	r3, [r7, #12]
 80229b2:	627b      	str	r3, [r7, #36]	@ 0x24
      break;
 80229b4:	bf00      	nop
    }
  }

  /* Check that the Start column is located in the screen */
  if ((refcolumn < 1) || (refcolumn >= 0x8000))
 80229b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229b8:	2b00      	cmp	r3, #0
 80229ba:	d003      	beq.n	80229c4 <UTIL_LCD_DisplayStringAt+0xc4>
 80229bc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229be:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80229c2:	d31b      	bcc.n	80229fc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    refcolumn = 1;
 80229c4:	2301      	movs	r3, #1
 80229c6:	627b      	str	r3, [r7, #36]	@ 0x24
  }

  /* Send the string character by character on LCD */
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80229c8:	e018      	b.n	80229fc <UTIL_LCD_DisplayStringAt+0xfc>
  {
    /* Display one character on LCD */
    UTIL_LCD_DisplayChar(refcolumn, Ypos, *Text);
 80229ca:	687b      	ldr	r3, [r7, #4]
 80229cc:	781b      	ldrb	r3, [r3, #0]
 80229ce:	461a      	mov	r2, r3
 80229d0:	68b9      	ldr	r1, [r7, #8]
 80229d2:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80229d4:	f7ff ff5e 	bl	8022894 <UTIL_LCD_DisplayChar>
    /* Decrement the column position by 16 */
    refcolumn += DrawProp[DrawProp->LcdLayer].pFont->Width;
 80229d8:	4b1f      	ldr	r3, [pc, #124]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 80229da:	68db      	ldr	r3, [r3, #12]
 80229dc:	4a1e      	ldr	r2, [pc, #120]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 80229de:	015b      	lsls	r3, r3, #5
 80229e0:	4413      	add	r3, r2
 80229e2:	3308      	adds	r3, #8
 80229e4:	681b      	ldr	r3, [r3, #0]
 80229e6:	889b      	ldrh	r3, [r3, #4]
 80229e8:	461a      	mov	r2, r3
 80229ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80229ec:	4413      	add	r3, r2
 80229ee:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Point on the next character */
    Text++;
 80229f0:	687b      	ldr	r3, [r7, #4]
 80229f2:	3301      	adds	r3, #1
 80229f4:	607b      	str	r3, [r7, #4]
    i++;
 80229f6:	6a3b      	ldr	r3, [r7, #32]
 80229f8:	3301      	adds	r3, #1
 80229fa:	623b      	str	r3, [r7, #32]
  while ((*Text != 0) & (((DrawProp->LcdXsize - (i*DrawProp[DrawProp->LcdLayer].pFont->Width)) & 0xFFFF) >= DrawProp[DrawProp->LcdLayer].pFont->Width))
 80229fc:	687b      	ldr	r3, [r7, #4]
 80229fe:	781b      	ldrb	r3, [r3, #0]
 8022a00:	2b00      	cmp	r3, #0
 8022a02:	bf14      	ite	ne
 8022a04:	2301      	movne	r3, #1
 8022a06:	2300      	moveq	r3, #0
 8022a08:	b2da      	uxtb	r2, r3
 8022a0a:	4b13      	ldr	r3, [pc, #76]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022a0c:	6959      	ldr	r1, [r3, #20]
 8022a0e:	4b12      	ldr	r3, [pc, #72]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022a10:	68db      	ldr	r3, [r3, #12]
 8022a12:	4811      	ldr	r0, [pc, #68]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022a14:	015b      	lsls	r3, r3, #5
 8022a16:	4403      	add	r3, r0
 8022a18:	3308      	adds	r3, #8
 8022a1a:	681b      	ldr	r3, [r3, #0]
 8022a1c:	889b      	ldrh	r3, [r3, #4]
 8022a1e:	4618      	mov	r0, r3
 8022a20:	6a3b      	ldr	r3, [r7, #32]
 8022a22:	fb00 f303 	mul.w	r3, r0, r3
 8022a26:	1acb      	subs	r3, r1, r3
 8022a28:	b29b      	uxth	r3, r3
 8022a2a:	490b      	ldr	r1, [pc, #44]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022a2c:	68c9      	ldr	r1, [r1, #12]
 8022a2e:	480a      	ldr	r0, [pc, #40]	@ (8022a58 <UTIL_LCD_DisplayStringAt+0x158>)
 8022a30:	0149      	lsls	r1, r1, #5
 8022a32:	4401      	add	r1, r0
 8022a34:	3108      	adds	r1, #8
 8022a36:	6809      	ldr	r1, [r1, #0]
 8022a38:	8889      	ldrh	r1, [r1, #4]
 8022a3a:	428b      	cmp	r3, r1
 8022a3c:	bf2c      	ite	cs
 8022a3e:	2301      	movcs	r3, #1
 8022a40:	2300      	movcc	r3, #0
 8022a42:	b2db      	uxtb	r3, r3
 8022a44:	4013      	ands	r3, r2
 8022a46:	b2db      	uxtb	r3, r3
 8022a48:	2b00      	cmp	r3, #0
 8022a4a:	d1be      	bne.n	80229ca <UTIL_LCD_DisplayStringAt+0xca>
  }
}
 8022a4c:	bf00      	nop
 8022a4e:	bf00      	nop
 8022a50:	3728      	adds	r7, #40	@ 0x28
 8022a52:	46bd      	mov	sp, r7
 8022a54:	bd80      	pop	{r7, pc}
 8022a56:	bf00      	nop
 8022a58:	240089f8 	.word	0x240089f8

08022a5c <UTIL_LCD_DrawLine>:
  * @param  Xpos2 Point 2 X position
  * @param  Ypos2 Point 2 Y position
  * @param  Color Draw color
  */
void UTIL_LCD_DrawLine(uint32_t Xpos1, uint32_t Ypos1, uint32_t Xpos2, uint32_t Ypos2, uint32_t Color)
{
 8022a5c:	b580      	push	{r7, lr}
 8022a5e:	b08e      	sub	sp, #56	@ 0x38
 8022a60:	af00      	add	r7, sp, #0
 8022a62:	60f8      	str	r0, [r7, #12]
 8022a64:	60b9      	str	r1, [r7, #8]
 8022a66:	607a      	str	r2, [r7, #4]
 8022a68:	603b      	str	r3, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 8022a6a:	2300      	movs	r3, #0
 8022a6c:	843b      	strh	r3, [r7, #32]
 8022a6e:	2300      	movs	r3, #0
 8022a70:	83fb      	strh	r3, [r7, #30]
 8022a72:	2300      	movs	r3, #0
 8022a74:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8022a76:	2300      	movs	r3, #0
 8022a78:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8022a7a:	2300      	movs	r3, #0
 8022a7c:	867b      	strh	r3, [r7, #50]	@ 0x32
 8022a7e:	2300      	movs	r3, #0
 8022a80:	863b      	strh	r3, [r7, #48]	@ 0x30
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 8022a82:	2300      	movs	r3, #0
 8022a84:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8022a86:	2300      	movs	r3, #0
 8022a88:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8022a8a:	2300      	movs	r3, #0
 8022a8c:	857b      	strh	r3, [r7, #42]	@ 0x2a
 8022a8e:	2300      	movs	r3, #0
 8022a90:	853b      	strh	r3, [r7, #40]	@ 0x28
 8022a92:	2300      	movs	r3, #0
 8022a94:	84fb      	strh	r3, [r7, #38]	@ 0x26
 8022a96:	2300      	movs	r3, #0
 8022a98:	84bb      	strh	r3, [r7, #36]	@ 0x24
  curpixel = 0;
 8022a9a:	2300      	movs	r3, #0
 8022a9c:	847b      	strh	r3, [r7, #34]	@ 0x22
  int32_t x_diff, y_diff;

  x_diff = Xpos2 - Xpos1;
 8022a9e:	687a      	ldr	r2, [r7, #4]
 8022aa0:	68fb      	ldr	r3, [r7, #12]
 8022aa2:	1ad3      	subs	r3, r2, r3
 8022aa4:	61bb      	str	r3, [r7, #24]
  y_diff = Ypos2 - Ypos1;
 8022aa6:	683a      	ldr	r2, [r7, #0]
 8022aa8:	68bb      	ldr	r3, [r7, #8]
 8022aaa:	1ad3      	subs	r3, r2, r3
 8022aac:	617b      	str	r3, [r7, #20]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 8022aae:	69bb      	ldr	r3, [r7, #24]
 8022ab0:	2b00      	cmp	r3, #0
 8022ab2:	bfb8      	it	lt
 8022ab4:	425b      	neglt	r3, r3
 8022ab6:	843b      	strh	r3, [r7, #32]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8022ab8:	697b      	ldr	r3, [r7, #20]
 8022aba:	2b00      	cmp	r3, #0
 8022abc:	bfb8      	it	lt
 8022abe:	425b      	neglt	r3, r3
 8022ac0:	83fb      	strh	r3, [r7, #30]
  x = Xpos1;                       /* Start x off at the first pixel */
 8022ac2:	68fb      	ldr	r3, [r7, #12]
 8022ac4:	86fb      	strh	r3, [r7, #54]	@ 0x36
  y = Ypos1;                       /* Start y off at the first pixel */
 8022ac6:	68bb      	ldr	r3, [r7, #8]
 8022ac8:	86bb      	strh	r3, [r7, #52]	@ 0x34

  if (Xpos2 >= Xpos1)                 /* The x-values are increasing */
 8022aca:	687a      	ldr	r2, [r7, #4]
 8022acc:	68fb      	ldr	r3, [r7, #12]
 8022ace:	429a      	cmp	r2, r3
 8022ad0:	d304      	bcc.n	8022adc <UTIL_LCD_DrawLine+0x80>
  {
    xinc1 = 1;
 8022ad2:	2301      	movs	r3, #1
 8022ad4:	867b      	strh	r3, [r7, #50]	@ 0x32
    xinc2 = 1;
 8022ad6:	2301      	movs	r3, #1
 8022ad8:	863b      	strh	r3, [r7, #48]	@ 0x30
 8022ada:	e005      	b.n	8022ae8 <UTIL_LCD_DrawLine+0x8c>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8022adc:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022ae0:	867b      	strh	r3, [r7, #50]	@ 0x32
    xinc2 = -1;
 8022ae2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022ae6:	863b      	strh	r3, [r7, #48]	@ 0x30
  }

  if (Ypos2 >= Ypos1)                 /* The y-values are increasing */
 8022ae8:	683a      	ldr	r2, [r7, #0]
 8022aea:	68bb      	ldr	r3, [r7, #8]
 8022aec:	429a      	cmp	r2, r3
 8022aee:	d304      	bcc.n	8022afa <UTIL_LCD_DrawLine+0x9e>
  {
    yinc1 = 1;
 8022af0:	2301      	movs	r3, #1
 8022af2:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    yinc2 = 1;
 8022af4:	2301      	movs	r3, #1
 8022af6:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 8022af8:	e005      	b.n	8022b06 <UTIL_LCD_DrawLine+0xaa>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8022afa:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022afe:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    yinc2 = -1;
 8022b00:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8022b04:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 8022b06:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8022b0a:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8022b0e:	429a      	cmp	r2, r3
 8022b10:	db11      	blt.n	8022b36 <UTIL_LCD_DrawLine+0xda>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 8022b12:	2300      	movs	r3, #0
 8022b14:	867b      	strh	r3, [r7, #50]	@ 0x32
    yinc2 = 0;                  /* Don't change the y for every iteration */
 8022b16:	2300      	movs	r3, #0
 8022b18:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    den = deltax;
 8022b1a:	8c3b      	ldrh	r3, [r7, #32]
 8022b1c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    num = deltax / 2;
 8022b1e:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8022b22:	2b00      	cmp	r3, #0
 8022b24:	da00      	bge.n	8022b28 <UTIL_LCD_DrawLine+0xcc>
 8022b26:	3301      	adds	r3, #1
 8022b28:	105b      	asrs	r3, r3, #1
 8022b2a:	853b      	strh	r3, [r7, #40]	@ 0x28
    numadd = deltay;
 8022b2c:	8bfb      	ldrh	r3, [r7, #30]
 8022b2e:	84fb      	strh	r3, [r7, #38]	@ 0x26
    numpixels = deltax;         /* There are more x-values than y-values */
 8022b30:	8c3b      	ldrh	r3, [r7, #32]
 8022b32:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8022b34:	e010      	b.n	8022b58 <UTIL_LCD_DrawLine+0xfc>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 8022b36:	2300      	movs	r3, #0
 8022b38:	863b      	strh	r3, [r7, #48]	@ 0x30
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 8022b3a:	2300      	movs	r3, #0
 8022b3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    den = deltay;
 8022b3e:	8bfb      	ldrh	r3, [r7, #30]
 8022b40:	857b      	strh	r3, [r7, #42]	@ 0x2a
    num = deltay / 2;
 8022b42:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8022b46:	2b00      	cmp	r3, #0
 8022b48:	da00      	bge.n	8022b4c <UTIL_LCD_DrawLine+0xf0>
 8022b4a:	3301      	adds	r3, #1
 8022b4c:	105b      	asrs	r3, r3, #1
 8022b4e:	853b      	strh	r3, [r7, #40]	@ 0x28
    numadd = deltax;
 8022b50:	8c3b      	ldrh	r3, [r7, #32]
 8022b52:	84fb      	strh	r3, [r7, #38]	@ 0x26
    numpixels = deltay;         /* There are more y-values than x-values */
 8022b54:	8bfb      	ldrh	r3, [r7, #30]
 8022b56:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8022b58:	2300      	movs	r3, #0
 8022b5a:	847b      	strh	r3, [r7, #34]	@ 0x22
 8022b5c:	e02f      	b.n	8022bbe <UTIL_LCD_DrawLine+0x162>
  {
    UTIL_LCD_SetPixel(x, y, Color);   /* Draw the current pixel */
 8022b5e:	8efb      	ldrh	r3, [r7, #54]	@ 0x36
 8022b60:	8eb9      	ldrh	r1, [r7, #52]	@ 0x34
 8022b62:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8022b64:	4618      	mov	r0, r3
 8022b66:	f7ff fe4b 	bl	8022800 <UTIL_LCD_SetPixel>
    num += numadd;                            /* Increase the numerator by the top of the fraction */
 8022b6a:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8022b6c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8022b6e:	4413      	add	r3, r2
 8022b70:	b29b      	uxth	r3, r3
 8022b72:	853b      	strh	r3, [r7, #40]	@ 0x28
    if (num >= den)                           /* Check if numerator >= denominator */
 8022b74:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8022b78:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8022b7c:	429a      	cmp	r2, r3
 8022b7e:	db0e      	blt.n	8022b9e <UTIL_LCD_DrawLine+0x142>
    {
      num -= den;                             /* Calculate the new numerator value */
 8022b80:	8d3a      	ldrh	r2, [r7, #40]	@ 0x28
 8022b82:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8022b84:	1ad3      	subs	r3, r2, r3
 8022b86:	b29b      	uxth	r3, r3
 8022b88:	853b      	strh	r3, [r7, #40]	@ 0x28
      x += xinc1;                             /* Change the x as appropriate */
 8022b8a:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8022b8c:	8e7b      	ldrh	r3, [r7, #50]	@ 0x32
 8022b8e:	4413      	add	r3, r2
 8022b90:	b29b      	uxth	r3, r3
 8022b92:	86fb      	strh	r3, [r7, #54]	@ 0x36
      y += yinc1;                             /* Change the y as appropriate */
 8022b94:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8022b96:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8022b98:	4413      	add	r3, r2
 8022b9a:	b29b      	uxth	r3, r3
 8022b9c:	86bb      	strh	r3, [r7, #52]	@ 0x34
    }
    x += xinc2;                               /* Change the x as appropriate */
 8022b9e:	8efa      	ldrh	r2, [r7, #54]	@ 0x36
 8022ba0:	8e3b      	ldrh	r3, [r7, #48]	@ 0x30
 8022ba2:	4413      	add	r3, r2
 8022ba4:	b29b      	uxth	r3, r3
 8022ba6:	86fb      	strh	r3, [r7, #54]	@ 0x36
    y += yinc2;                               /* Change the y as appropriate */
 8022ba8:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8022baa:	8dbb      	ldrh	r3, [r7, #44]	@ 0x2c
 8022bac:	4413      	add	r3, r2
 8022bae:	b29b      	uxth	r3, r3
 8022bb0:	86bb      	strh	r3, [r7, #52]	@ 0x34
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8022bb2:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8022bb6:	b29b      	uxth	r3, r3
 8022bb8:	3301      	adds	r3, #1
 8022bba:	b29b      	uxth	r3, r3
 8022bbc:	847b      	strh	r3, [r7, #34]	@ 0x22
 8022bbe:	f9b7 2022 	ldrsh.w	r2, [r7, #34]	@ 0x22
 8022bc2:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8022bc6:	429a      	cmp	r2, r3
 8022bc8:	ddc9      	ble.n	8022b5e <UTIL_LCD_DrawLine+0x102>
  }
}
 8022bca:	bf00      	nop
 8022bcc:	bf00      	nop
 8022bce:	3738      	adds	r7, #56	@ 0x38
 8022bd0:	46bd      	mov	sp, r7
 8022bd2:	bd80      	pop	{r7, pc}

08022bd4 <UTIL_LCD_DrawRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_DrawRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 8022bd4:	b580      	push	{r7, lr}
 8022bd6:	b084      	sub	sp, #16
 8022bd8:	af00      	add	r7, sp, #0
 8022bda:	60f8      	str	r0, [r7, #12]
 8022bdc:	60b9      	str	r1, [r7, #8]
 8022bde:	607a      	str	r2, [r7, #4]
 8022be0:	603b      	str	r3, [r7, #0]
  /* Draw horizontal lines */
  UTIL_LCD_DrawHLine(Xpos, Ypos, Width, Color);
 8022be2:	69bb      	ldr	r3, [r7, #24]
 8022be4:	687a      	ldr	r2, [r7, #4]
 8022be6:	68b9      	ldr	r1, [r7, #8]
 8022be8:	68f8      	ldr	r0, [r7, #12]
 8022bea:	f7ff fd9d 	bl	8022728 <UTIL_LCD_DrawHLine>
  UTIL_LCD_DrawHLine(Xpos, (Ypos+ Height - 1U), Width, Color);
 8022bee:	68ba      	ldr	r2, [r7, #8]
 8022bf0:	683b      	ldr	r3, [r7, #0]
 8022bf2:	4413      	add	r3, r2
 8022bf4:	1e59      	subs	r1, r3, #1
 8022bf6:	69bb      	ldr	r3, [r7, #24]
 8022bf8:	687a      	ldr	r2, [r7, #4]
 8022bfa:	68f8      	ldr	r0, [r7, #12]
 8022bfc:	f7ff fd94 	bl	8022728 <UTIL_LCD_DrawHLine>

  /* Draw vertical lines */
  UTIL_LCD_DrawVLine(Xpos, Ypos, Height, Color);
 8022c00:	69bb      	ldr	r3, [r7, #24]
 8022c02:	683a      	ldr	r2, [r7, #0]
 8022c04:	68b9      	ldr	r1, [r7, #8]
 8022c06:	68f8      	ldr	r0, [r7, #12]
 8022c08:	f7ff fdc4 	bl	8022794 <UTIL_LCD_DrawVLine>
  UTIL_LCD_DrawVLine((Xpos + Width - 1U), Ypos, Height, Color);
 8022c0c:	68fa      	ldr	r2, [r7, #12]
 8022c0e:	687b      	ldr	r3, [r7, #4]
 8022c10:	4413      	add	r3, r2
 8022c12:	1e58      	subs	r0, r3, #1
 8022c14:	69bb      	ldr	r3, [r7, #24]
 8022c16:	683a      	ldr	r2, [r7, #0]
 8022c18:	68b9      	ldr	r1, [r7, #8]
 8022c1a:	f7ff fdbb 	bl	8022794 <UTIL_LCD_DrawVLine>
}
 8022c1e:	bf00      	nop
 8022c20:	3710      	adds	r7, #16
 8022c22:	46bd      	mov	sp, r7
 8022c24:	bd80      	pop	{r7, pc}
	...

08022c28 <UTIL_LCD_DrawCircle>:
  * @param  Ypos    Y position
  * @param  Radius  Circle radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8022c28:	b580      	push	{r7, lr}
 8022c2a:	b088      	sub	sp, #32
 8022c2c:	af00      	add	r7, sp, #0
 8022c2e:	60f8      	str	r0, [r7, #12]
 8022c30:	60b9      	str	r1, [r7, #8]
 8022c32:	607a      	str	r2, [r7, #4]
 8022c34:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8022c36:	687b      	ldr	r3, [r7, #4]
 8022c38:	005b      	lsls	r3, r3, #1
 8022c3a:	f1c3 0303 	rsb	r3, r3, #3
 8022c3e:	61fb      	str	r3, [r7, #28]
  current_x = 0;
 8022c40:	2300      	movs	r3, #0
 8022c42:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8022c44:	687b      	ldr	r3, [r7, #4]
 8022c46:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8022c48:	e0eb      	b.n	8022e22 <UTIL_LCD_DrawCircle+0x1fa>
  {
    if((Ypos - current_y) < DrawProp->LcdYsize)
 8022c4a:	68ba      	ldr	r2, [r7, #8]
 8022c4c:	697b      	ldr	r3, [r7, #20]
 8022c4e:	1ad2      	subs	r2, r2, r3
 8022c50:	4b79      	ldr	r3, [pc, #484]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022c52:	699b      	ldr	r3, [r3, #24]
 8022c54:	429a      	cmp	r2, r3
 8022c56:	d22d      	bcs.n	8022cb4 <UTIL_LCD_DrawCircle+0x8c>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8022c58:	68fa      	ldr	r2, [r7, #12]
 8022c5a:	69bb      	ldr	r3, [r7, #24]
 8022c5c:	441a      	add	r2, r3
 8022c5e:	4b76      	ldr	r3, [pc, #472]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022c60:	695b      	ldr	r3, [r3, #20]
 8022c62:	429a      	cmp	r2, r3
 8022c64:	d20f      	bcs.n	8022c86 <UTIL_LCD_DrawCircle+0x5e>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos - current_y), Color);
 8022c66:	68fb      	ldr	r3, [r7, #12]
 8022c68:	b29a      	uxth	r2, r3
 8022c6a:	69bb      	ldr	r3, [r7, #24]
 8022c6c:	b29b      	uxth	r3, r3
 8022c6e:	4413      	add	r3, r2
 8022c70:	b298      	uxth	r0, r3
 8022c72:	68bb      	ldr	r3, [r7, #8]
 8022c74:	b29a      	uxth	r2, r3
 8022c76:	697b      	ldr	r3, [r7, #20]
 8022c78:	b29b      	uxth	r3, r3
 8022c7a:	1ad3      	subs	r3, r2, r3
 8022c7c:	b29b      	uxth	r3, r3
 8022c7e:	683a      	ldr	r2, [r7, #0]
 8022c80:	4619      	mov	r1, r3
 8022c82:	f7ff fdbd 	bl	8022800 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8022c86:	68fa      	ldr	r2, [r7, #12]
 8022c88:	69bb      	ldr	r3, [r7, #24]
 8022c8a:	1ad2      	subs	r2, r2, r3
 8022c8c:	4b6a      	ldr	r3, [pc, #424]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022c8e:	695b      	ldr	r3, [r3, #20]
 8022c90:	429a      	cmp	r2, r3
 8022c92:	d20f      	bcs.n	8022cb4 <UTIL_LCD_DrawCircle+0x8c>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos - current_y), Color);
 8022c94:	68fb      	ldr	r3, [r7, #12]
 8022c96:	b29a      	uxth	r2, r3
 8022c98:	69bb      	ldr	r3, [r7, #24]
 8022c9a:	b29b      	uxth	r3, r3
 8022c9c:	1ad3      	subs	r3, r2, r3
 8022c9e:	b298      	uxth	r0, r3
 8022ca0:	68bb      	ldr	r3, [r7, #8]
 8022ca2:	b29a      	uxth	r2, r3
 8022ca4:	697b      	ldr	r3, [r7, #20]
 8022ca6:	b29b      	uxth	r3, r3
 8022ca8:	1ad3      	subs	r3, r2, r3
 8022caa:	b29b      	uxth	r3, r3
 8022cac:	683a      	ldr	r2, [r7, #0]
 8022cae:	4619      	mov	r1, r3
 8022cb0:	f7ff fda6 	bl	8022800 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos - current_x) < DrawProp->LcdYsize)
 8022cb4:	68ba      	ldr	r2, [r7, #8]
 8022cb6:	69bb      	ldr	r3, [r7, #24]
 8022cb8:	1ad2      	subs	r2, r2, r3
 8022cba:	4b5f      	ldr	r3, [pc, #380]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022cbc:	699b      	ldr	r3, [r3, #24]
 8022cbe:	429a      	cmp	r2, r3
 8022cc0:	d22d      	bcs.n	8022d1e <UTIL_LCD_DrawCircle+0xf6>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8022cc2:	68fa      	ldr	r2, [r7, #12]
 8022cc4:	697b      	ldr	r3, [r7, #20]
 8022cc6:	441a      	add	r2, r3
 8022cc8:	4b5b      	ldr	r3, [pc, #364]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022cca:	695b      	ldr	r3, [r3, #20]
 8022ccc:	429a      	cmp	r2, r3
 8022cce:	d20f      	bcs.n	8022cf0 <UTIL_LCD_DrawCircle+0xc8>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos - current_x), Color);
 8022cd0:	68fb      	ldr	r3, [r7, #12]
 8022cd2:	b29a      	uxth	r2, r3
 8022cd4:	697b      	ldr	r3, [r7, #20]
 8022cd6:	b29b      	uxth	r3, r3
 8022cd8:	4413      	add	r3, r2
 8022cda:	b298      	uxth	r0, r3
 8022cdc:	68bb      	ldr	r3, [r7, #8]
 8022cde:	b29a      	uxth	r2, r3
 8022ce0:	69bb      	ldr	r3, [r7, #24]
 8022ce2:	b29b      	uxth	r3, r3
 8022ce4:	1ad3      	subs	r3, r2, r3
 8022ce6:	b29b      	uxth	r3, r3
 8022ce8:	683a      	ldr	r2, [r7, #0]
 8022cea:	4619      	mov	r1, r3
 8022cec:	f7ff fd88 	bl	8022800 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8022cf0:	68fa      	ldr	r2, [r7, #12]
 8022cf2:	697b      	ldr	r3, [r7, #20]
 8022cf4:	1ad2      	subs	r2, r2, r3
 8022cf6:	4b50      	ldr	r3, [pc, #320]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022cf8:	695b      	ldr	r3, [r3, #20]
 8022cfa:	429a      	cmp	r2, r3
 8022cfc:	d20f      	bcs.n	8022d1e <UTIL_LCD_DrawCircle+0xf6>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos - current_x), Color);
 8022cfe:	68fb      	ldr	r3, [r7, #12]
 8022d00:	b29a      	uxth	r2, r3
 8022d02:	697b      	ldr	r3, [r7, #20]
 8022d04:	b29b      	uxth	r3, r3
 8022d06:	1ad3      	subs	r3, r2, r3
 8022d08:	b298      	uxth	r0, r3
 8022d0a:	68bb      	ldr	r3, [r7, #8]
 8022d0c:	b29a      	uxth	r2, r3
 8022d0e:	69bb      	ldr	r3, [r7, #24]
 8022d10:	b29b      	uxth	r3, r3
 8022d12:	1ad3      	subs	r3, r2, r3
 8022d14:	b29b      	uxth	r3, r3
 8022d16:	683a      	ldr	r2, [r7, #0]
 8022d18:	4619      	mov	r1, r3
 8022d1a:	f7ff fd71 	bl	8022800 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_y) < DrawProp->LcdYsize)
 8022d1e:	68ba      	ldr	r2, [r7, #8]
 8022d20:	697b      	ldr	r3, [r7, #20]
 8022d22:	441a      	add	r2, r3
 8022d24:	4b44      	ldr	r3, [pc, #272]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022d26:	699b      	ldr	r3, [r3, #24]
 8022d28:	429a      	cmp	r2, r3
 8022d2a:	d22d      	bcs.n	8022d88 <UTIL_LCD_DrawCircle+0x160>
    {
      if((Xpos + current_x) < DrawProp->LcdXsize)
 8022d2c:	68fa      	ldr	r2, [r7, #12]
 8022d2e:	69bb      	ldr	r3, [r7, #24]
 8022d30:	441a      	add	r2, r3
 8022d32:	4b41      	ldr	r3, [pc, #260]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022d34:	695b      	ldr	r3, [r3, #20]
 8022d36:	429a      	cmp	r2, r3
 8022d38:	d20f      	bcs.n	8022d5a <UTIL_LCD_DrawCircle+0x132>
      {
        UTIL_LCD_SetPixel((Xpos + current_x), (Ypos + current_y), Color);
 8022d3a:	68fb      	ldr	r3, [r7, #12]
 8022d3c:	b29a      	uxth	r2, r3
 8022d3e:	69bb      	ldr	r3, [r7, #24]
 8022d40:	b29b      	uxth	r3, r3
 8022d42:	4413      	add	r3, r2
 8022d44:	b298      	uxth	r0, r3
 8022d46:	68bb      	ldr	r3, [r7, #8]
 8022d48:	b29a      	uxth	r2, r3
 8022d4a:	697b      	ldr	r3, [r7, #20]
 8022d4c:	b29b      	uxth	r3, r3
 8022d4e:	4413      	add	r3, r2
 8022d50:	b29b      	uxth	r3, r3
 8022d52:	683a      	ldr	r2, [r7, #0]
 8022d54:	4619      	mov	r1, r3
 8022d56:	f7ff fd53 	bl	8022800 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_x) < DrawProp->LcdXsize)
 8022d5a:	68fa      	ldr	r2, [r7, #12]
 8022d5c:	69bb      	ldr	r3, [r7, #24]
 8022d5e:	1ad2      	subs	r2, r2, r3
 8022d60:	4b35      	ldr	r3, [pc, #212]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022d62:	695b      	ldr	r3, [r3, #20]
 8022d64:	429a      	cmp	r2, r3
 8022d66:	d20f      	bcs.n	8022d88 <UTIL_LCD_DrawCircle+0x160>
      {
        UTIL_LCD_SetPixel((Xpos - current_x), (Ypos + current_y), Color);
 8022d68:	68fb      	ldr	r3, [r7, #12]
 8022d6a:	b29a      	uxth	r2, r3
 8022d6c:	69bb      	ldr	r3, [r7, #24]
 8022d6e:	b29b      	uxth	r3, r3
 8022d70:	1ad3      	subs	r3, r2, r3
 8022d72:	b298      	uxth	r0, r3
 8022d74:	68bb      	ldr	r3, [r7, #8]
 8022d76:	b29a      	uxth	r2, r3
 8022d78:	697b      	ldr	r3, [r7, #20]
 8022d7a:	b29b      	uxth	r3, r3
 8022d7c:	4413      	add	r3, r2
 8022d7e:	b29b      	uxth	r3, r3
 8022d80:	683a      	ldr	r2, [r7, #0]
 8022d82:	4619      	mov	r1, r3
 8022d84:	f7ff fd3c 	bl	8022800 <UTIL_LCD_SetPixel>
      }
    }

    if((Ypos + current_x) < DrawProp->LcdYsize)
 8022d88:	68ba      	ldr	r2, [r7, #8]
 8022d8a:	69bb      	ldr	r3, [r7, #24]
 8022d8c:	441a      	add	r2, r3
 8022d8e:	4b2a      	ldr	r3, [pc, #168]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022d90:	699b      	ldr	r3, [r3, #24]
 8022d92:	429a      	cmp	r2, r3
 8022d94:	d22d      	bcs.n	8022df2 <UTIL_LCD_DrawCircle+0x1ca>
    {
      if((Xpos + current_y) < DrawProp->LcdXsize)
 8022d96:	68fa      	ldr	r2, [r7, #12]
 8022d98:	697b      	ldr	r3, [r7, #20]
 8022d9a:	441a      	add	r2, r3
 8022d9c:	4b26      	ldr	r3, [pc, #152]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022d9e:	695b      	ldr	r3, [r3, #20]
 8022da0:	429a      	cmp	r2, r3
 8022da2:	d20f      	bcs.n	8022dc4 <UTIL_LCD_DrawCircle+0x19c>
      {
        UTIL_LCD_SetPixel((Xpos + current_y), (Ypos + current_x), Color);
 8022da4:	68fb      	ldr	r3, [r7, #12]
 8022da6:	b29a      	uxth	r2, r3
 8022da8:	697b      	ldr	r3, [r7, #20]
 8022daa:	b29b      	uxth	r3, r3
 8022dac:	4413      	add	r3, r2
 8022dae:	b298      	uxth	r0, r3
 8022db0:	68bb      	ldr	r3, [r7, #8]
 8022db2:	b29a      	uxth	r2, r3
 8022db4:	69bb      	ldr	r3, [r7, #24]
 8022db6:	b29b      	uxth	r3, r3
 8022db8:	4413      	add	r3, r2
 8022dba:	b29b      	uxth	r3, r3
 8022dbc:	683a      	ldr	r2, [r7, #0]
 8022dbe:	4619      	mov	r1, r3
 8022dc0:	f7ff fd1e 	bl	8022800 <UTIL_LCD_SetPixel>
      }
      if((Xpos - current_y) < DrawProp->LcdXsize)
 8022dc4:	68fa      	ldr	r2, [r7, #12]
 8022dc6:	697b      	ldr	r3, [r7, #20]
 8022dc8:	1ad2      	subs	r2, r2, r3
 8022dca:	4b1b      	ldr	r3, [pc, #108]	@ (8022e38 <UTIL_LCD_DrawCircle+0x210>)
 8022dcc:	695b      	ldr	r3, [r3, #20]
 8022dce:	429a      	cmp	r2, r3
 8022dd0:	d20f      	bcs.n	8022df2 <UTIL_LCD_DrawCircle+0x1ca>
      {
        UTIL_LCD_SetPixel((Xpos - current_y), (Ypos + current_x), Color);
 8022dd2:	68fb      	ldr	r3, [r7, #12]
 8022dd4:	b29a      	uxth	r2, r3
 8022dd6:	697b      	ldr	r3, [r7, #20]
 8022dd8:	b29b      	uxth	r3, r3
 8022dda:	1ad3      	subs	r3, r2, r3
 8022ddc:	b298      	uxth	r0, r3
 8022dde:	68bb      	ldr	r3, [r7, #8]
 8022de0:	b29a      	uxth	r2, r3
 8022de2:	69bb      	ldr	r3, [r7, #24]
 8022de4:	b29b      	uxth	r3, r3
 8022de6:	4413      	add	r3, r2
 8022de8:	b29b      	uxth	r3, r3
 8022dea:	683a      	ldr	r2, [r7, #0]
 8022dec:	4619      	mov	r1, r3
 8022dee:	f7ff fd07 	bl	8022800 <UTIL_LCD_SetPixel>
      }
    }

    if (decision < 0)
 8022df2:	69fb      	ldr	r3, [r7, #28]
 8022df4:	2b00      	cmp	r3, #0
 8022df6:	da06      	bge.n	8022e06 <UTIL_LCD_DrawCircle+0x1de>
    {
      decision += (current_x << 2) + 6;
 8022df8:	69bb      	ldr	r3, [r7, #24]
 8022dfa:	009a      	lsls	r2, r3, #2
 8022dfc:	69fb      	ldr	r3, [r7, #28]
 8022dfe:	4413      	add	r3, r2
 8022e00:	3306      	adds	r3, #6
 8022e02:	61fb      	str	r3, [r7, #28]
 8022e04:	e00a      	b.n	8022e1c <UTIL_LCD_DrawCircle+0x1f4>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8022e06:	69ba      	ldr	r2, [r7, #24]
 8022e08:	697b      	ldr	r3, [r7, #20]
 8022e0a:	1ad3      	subs	r3, r2, r3
 8022e0c:	009a      	lsls	r2, r3, #2
 8022e0e:	69fb      	ldr	r3, [r7, #28]
 8022e10:	4413      	add	r3, r2
 8022e12:	330a      	adds	r3, #10
 8022e14:	61fb      	str	r3, [r7, #28]
      current_y--;
 8022e16:	697b      	ldr	r3, [r7, #20]
 8022e18:	3b01      	subs	r3, #1
 8022e1a:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 8022e1c:	69bb      	ldr	r3, [r7, #24]
 8022e1e:	3301      	adds	r3, #1
 8022e20:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8022e22:	69ba      	ldr	r2, [r7, #24]
 8022e24:	697b      	ldr	r3, [r7, #20]
 8022e26:	429a      	cmp	r2, r3
 8022e28:	f67f af0f 	bls.w	8022c4a <UTIL_LCD_DrawCircle+0x22>
  }
}
 8022e2c:	bf00      	nop
 8022e2e:	bf00      	nop
 8022e30:	3720      	adds	r7, #32
 8022e32:	46bd      	mov	sp, r7
 8022e34:	bd80      	pop	{r7, pc}
 8022e36:	bf00      	nop
 8022e38:	240089f8 	.word	0x240089f8

08022e3c <UTIL_LCD_DrawPolygon>:
  * @param  Points      Pointer to the points array
  * @param  PointCount  Number of points
  * @param  Color       Draw color
  */
void UTIL_LCD_DrawPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
{
 8022e3c:	b590      	push	{r4, r7, lr}
 8022e3e:	b089      	sub	sp, #36	@ 0x24
 8022e40:	af02      	add	r7, sp, #8
 8022e42:	60f8      	str	r0, [r7, #12]
 8022e44:	60b9      	str	r1, [r7, #8]
 8022e46:	607a      	str	r2, [r7, #4]
  int16_t x_pos = 0, y_pos = 0;
 8022e48:	2300      	movs	r3, #0
 8022e4a:	82fb      	strh	r3, [r7, #22]
 8022e4c:	2300      	movs	r3, #0
 8022e4e:	82bb      	strh	r3, [r7, #20]

  if(PointCount < 2)
 8022e50:	68bb      	ldr	r3, [r7, #8]
 8022e52:	2b01      	cmp	r3, #1
 8022e54:	d943      	bls.n	8022ede <UTIL_LCD_DrawPolygon+0xa2>
  {
    return;
  }

  UTIL_LCD_DrawLine(Points->X, Points->Y, (Points+PointCount-1)->X, (Points+PointCount-1)->Y, Color);
 8022e56:	68fb      	ldr	r3, [r7, #12]
 8022e58:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022e5c:	4618      	mov	r0, r3
 8022e5e:	68fb      	ldr	r3, [r7, #12]
 8022e60:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e64:	4619      	mov	r1, r3
 8022e66:	68ba      	ldr	r2, [r7, #8]
 8022e68:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8022e6c:	4413      	add	r3, r2
 8022e6e:	009b      	lsls	r3, r3, #2
 8022e70:	68fa      	ldr	r2, [r7, #12]
 8022e72:	4413      	add	r3, r2
 8022e74:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022e78:	461c      	mov	r4, r3
 8022e7a:	68ba      	ldr	r2, [r7, #8]
 8022e7c:	f06f 4340 	mvn.w	r3, #3221225472	@ 0xc0000000
 8022e80:	4413      	add	r3, r2
 8022e82:	009b      	lsls	r3, r3, #2
 8022e84:	68fa      	ldr	r2, [r7, #12]
 8022e86:	4413      	add	r3, r2
 8022e88:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022e8c:	461a      	mov	r2, r3
 8022e8e:	687b      	ldr	r3, [r7, #4]
 8022e90:	9300      	str	r3, [sp, #0]
 8022e92:	4613      	mov	r3, r2
 8022e94:	4622      	mov	r2, r4
 8022e96:	f7ff fde1 	bl	8022a5c <UTIL_LCD_DrawLine>

  while(--PointCount)
 8022e9a:	e019      	b.n	8022ed0 <UTIL_LCD_DrawPolygon+0x94>
  {
    x_pos = Points->X;
 8022e9c:	68fb      	ldr	r3, [r7, #12]
 8022e9e:	881b      	ldrh	r3, [r3, #0]
 8022ea0:	82fb      	strh	r3, [r7, #22]
    y_pos = Points->Y;
 8022ea2:	68fb      	ldr	r3, [r7, #12]
 8022ea4:	885b      	ldrh	r3, [r3, #2]
 8022ea6:	82bb      	strh	r3, [r7, #20]
    Points++;
 8022ea8:	68fb      	ldr	r3, [r7, #12]
 8022eaa:	3304      	adds	r3, #4
 8022eac:	60fb      	str	r3, [r7, #12]
    UTIL_LCD_DrawLine(x_pos, y_pos, Points->X, Points->Y, Color);
 8022eae:	f9b7 0016 	ldrsh.w	r0, [r7, #22]
 8022eb2:	f9b7 1014 	ldrsh.w	r1, [r7, #20]
 8022eb6:	68fb      	ldr	r3, [r7, #12]
 8022eb8:	f9b3 3000 	ldrsh.w	r3, [r3]
 8022ebc:	461a      	mov	r2, r3
 8022ebe:	68fb      	ldr	r3, [r7, #12]
 8022ec0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8022ec4:	461c      	mov	r4, r3
 8022ec6:	687b      	ldr	r3, [r7, #4]
 8022ec8:	9300      	str	r3, [sp, #0]
 8022eca:	4623      	mov	r3, r4
 8022ecc:	f7ff fdc6 	bl	8022a5c <UTIL_LCD_DrawLine>
  while(--PointCount)
 8022ed0:	68bb      	ldr	r3, [r7, #8]
 8022ed2:	3b01      	subs	r3, #1
 8022ed4:	60bb      	str	r3, [r7, #8]
 8022ed6:	68bb      	ldr	r3, [r7, #8]
 8022ed8:	2b00      	cmp	r3, #0
 8022eda:	d1df      	bne.n	8022e9c <UTIL_LCD_DrawPolygon+0x60>
 8022edc:	e000      	b.n	8022ee0 <UTIL_LCD_DrawPolygon+0xa4>
    return;
 8022ede:	bf00      	nop
  }
}
 8022ee0:	371c      	adds	r7, #28
 8022ee2:	46bd      	mov	sp, r7
 8022ee4:	bd90      	pop	{r4, r7, pc}

08022ee6 <UTIL_LCD_DrawEllipse>:
  * @param  XRadius Ellipse X radius
  * @param  YRadius Ellipse Y radius
  * @param  Color   Draw color
  */
void UTIL_LCD_DrawEllipse(int Xpos, int Ypos, int XRadius, int YRadius, uint32_t Color)
{
 8022ee6:	b580      	push	{r7, lr}
 8022ee8:	b08c      	sub	sp, #48	@ 0x30
 8022eea:	af00      	add	r7, sp, #0
 8022eec:	60f8      	str	r0, [r7, #12]
 8022eee:	60b9      	str	r1, [r7, #8]
 8022ef0:	607a      	str	r2, [r7, #4]
 8022ef2:	603b      	str	r3, [r7, #0]
  int x_pos = 0, y_pos = -YRadius, err = 2-2*XRadius, e2;
 8022ef4:	2300      	movs	r3, #0
 8022ef6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8022ef8:	683b      	ldr	r3, [r7, #0]
 8022efa:	425b      	negs	r3, r3
 8022efc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8022efe:	687b      	ldr	r3, [r7, #4]
 8022f00:	f1c3 0301 	rsb	r3, r3, #1
 8022f04:	005b      	lsls	r3, r3, #1
 8022f06:	627b      	str	r3, [r7, #36]	@ 0x24
  float k = 0, rad1 = 0, rad2 = 0;
 8022f08:	f04f 0300 	mov.w	r3, #0
 8022f0c:	61fb      	str	r3, [r7, #28]
 8022f0e:	f04f 0300 	mov.w	r3, #0
 8022f12:	61bb      	str	r3, [r7, #24]
 8022f14:	f04f 0300 	mov.w	r3, #0
 8022f18:	617b      	str	r3, [r7, #20]

  rad1 = XRadius;
 8022f1a:	687b      	ldr	r3, [r7, #4]
 8022f1c:	ee07 3a90 	vmov	s15, r3
 8022f20:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022f24:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
 8022f28:	683b      	ldr	r3, [r7, #0]
 8022f2a:	ee07 3a90 	vmov	s15, r3
 8022f2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8022f32:	edc7 7a05 	vstr	s15, [r7, #20]

  k = (float)(rad2/rad1);
 8022f36:	edd7 6a05 	vldr	s13, [r7, #20]
 8022f3a:	ed97 7a06 	vldr	s14, [r7, #24]
 8022f3e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022f42:	edc7 7a07 	vstr	s15, [r7, #28]

  do
  {
    UTIL_LCD_SetPixel((Xpos-(uint32_t)(x_pos/k)), (Ypos + y_pos), Color);
 8022f46:	68fb      	ldr	r3, [r7, #12]
 8022f48:	b29a      	uxth	r2, r3
 8022f4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022f4c:	ee07 3a90 	vmov	s15, r3
 8022f50:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022f54:	ed97 7a07 	vldr	s14, [r7, #28]
 8022f58:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022f5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022f60:	ee17 3a90 	vmov	r3, s15
 8022f64:	b29b      	uxth	r3, r3
 8022f66:	1ad3      	subs	r3, r2, r3
 8022f68:	b298      	uxth	r0, r3
 8022f6a:	68bb      	ldr	r3, [r7, #8]
 8022f6c:	b29a      	uxth	r2, r3
 8022f6e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022f70:	b29b      	uxth	r3, r3
 8022f72:	4413      	add	r3, r2
 8022f74:	b29b      	uxth	r3, r3
 8022f76:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8022f78:	4619      	mov	r1, r3
 8022f7a:	f7ff fc41 	bl	8022800 <UTIL_LCD_SetPixel>
    UTIL_LCD_SetPixel((Xpos+(uint32_t)(x_pos/k)), (Ypos + y_pos), Color);
 8022f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022f80:	ee07 3a90 	vmov	s15, r3
 8022f84:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022f88:	ed97 7a07 	vldr	s14, [r7, #28]
 8022f8c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022f90:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022f94:	ee17 3a90 	vmov	r3, s15
 8022f98:	b29a      	uxth	r2, r3
 8022f9a:	68fb      	ldr	r3, [r7, #12]
 8022f9c:	b29b      	uxth	r3, r3
 8022f9e:	4413      	add	r3, r2
 8022fa0:	b298      	uxth	r0, r3
 8022fa2:	68bb      	ldr	r3, [r7, #8]
 8022fa4:	b29a      	uxth	r2, r3
 8022fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022fa8:	b29b      	uxth	r3, r3
 8022faa:	4413      	add	r3, r2
 8022fac:	b29b      	uxth	r3, r3
 8022fae:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8022fb0:	4619      	mov	r1, r3
 8022fb2:	f7ff fc25 	bl	8022800 <UTIL_LCD_SetPixel>
    UTIL_LCD_SetPixel((Xpos+(uint32_t)(x_pos/k)), (Ypos - y_pos), Color);
 8022fb6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022fb8:	ee07 3a90 	vmov	s15, r3
 8022fbc:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022fc0:	ed97 7a07 	vldr	s14, [r7, #28]
 8022fc4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8022fc8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8022fcc:	ee17 3a90 	vmov	r3, s15
 8022fd0:	b29a      	uxth	r2, r3
 8022fd2:	68fb      	ldr	r3, [r7, #12]
 8022fd4:	b29b      	uxth	r3, r3
 8022fd6:	4413      	add	r3, r2
 8022fd8:	b298      	uxth	r0, r3
 8022fda:	68bb      	ldr	r3, [r7, #8]
 8022fdc:	b29a      	uxth	r2, r3
 8022fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8022fe0:	b29b      	uxth	r3, r3
 8022fe2:	1ad3      	subs	r3, r2, r3
 8022fe4:	b29b      	uxth	r3, r3
 8022fe6:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8022fe8:	4619      	mov	r1, r3
 8022fea:	f7ff fc09 	bl	8022800 <UTIL_LCD_SetPixel>
    UTIL_LCD_SetPixel((Xpos-(uint32_t)(x_pos/k)), (Ypos - y_pos), Color);
 8022fee:	68fb      	ldr	r3, [r7, #12]
 8022ff0:	b29a      	uxth	r2, r3
 8022ff2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8022ff4:	ee07 3a90 	vmov	s15, r3
 8022ff8:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8022ffc:	ed97 7a07 	vldr	s14, [r7, #28]
 8023000:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023004:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023008:	ee17 3a90 	vmov	r3, s15
 802300c:	b29b      	uxth	r3, r3
 802300e:	1ad3      	subs	r3, r2, r3
 8023010:	b298      	uxth	r0, r3
 8023012:	68bb      	ldr	r3, [r7, #8]
 8023014:	b29a      	uxth	r2, r3
 8023016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023018:	b29b      	uxth	r3, r3
 802301a:	1ad3      	subs	r3, r2, r3
 802301c:	b29b      	uxth	r3, r3
 802301e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023020:	4619      	mov	r1, r3
 8023022:	f7ff fbed 	bl	8022800 <UTIL_LCD_SetPixel>

    e2 = err;
 8023026:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8023028:	623b      	str	r3, [r7, #32]
    if (e2 <= x_pos)
 802302a:	6a3a      	ldr	r2, [r7, #32]
 802302c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802302e:	429a      	cmp	r2, r3
 8023030:	dc13      	bgt.n	802305a <UTIL_LCD_DrawEllipse+0x174>
    {
      err += ++x_pos*2+1;
 8023032:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023034:	3301      	adds	r3, #1
 8023036:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8023038:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802303a:	005b      	lsls	r3, r3, #1
 802303c:	3301      	adds	r3, #1
 802303e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023040:	4413      	add	r3, r2
 8023042:	627b      	str	r3, [r7, #36]	@ 0x24
      if (-y_pos == x_pos && e2 <= y_pos) e2 = 0;
 8023044:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023046:	425b      	negs	r3, r3
 8023048:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802304a:	429a      	cmp	r2, r3
 802304c:	d105      	bne.n	802305a <UTIL_LCD_DrawEllipse+0x174>
 802304e:	6a3a      	ldr	r2, [r7, #32]
 8023050:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023052:	429a      	cmp	r2, r3
 8023054:	dc01      	bgt.n	802305a <UTIL_LCD_DrawEllipse+0x174>
 8023056:	2300      	movs	r3, #0
 8023058:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y_pos)
 802305a:	6a3a      	ldr	r2, [r7, #32]
 802305c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802305e:	429a      	cmp	r2, r3
 8023060:	dd08      	ble.n	8023074 <UTIL_LCD_DrawEllipse+0x18e>
    {
      err += ++y_pos*2+1;
 8023062:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023064:	3301      	adds	r3, #1
 8023066:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023068:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802306a:	005b      	lsls	r3, r3, #1
 802306c:	3301      	adds	r3, #1
 802306e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8023070:	4413      	add	r3, r2
 8023072:	627b      	str	r3, [r7, #36]	@ 0x24
    }
  }while (y_pos <= 0);
 8023074:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023076:	2b00      	cmp	r3, #0
 8023078:	f77f af65 	ble.w	8022f46 <UTIL_LCD_DrawEllipse+0x60>
}
 802307c:	bf00      	nop
 802307e:	bf00      	nop
 8023080:	3730      	adds	r7, #48	@ 0x30
 8023082:	46bd      	mov	sp, r7
 8023084:	bd80      	pop	{r7, pc}
	...

08023088 <UTIL_LCD_DrawBitmap>:
  * @param  Xpos  Bmp X position in the LCD
  * @param  Ypos  Bmp Y position in the LCD
  * @param  pData Pointer to Bmp picture address in the internal Flash
  */
void UTIL_LCD_DrawBitmap(uint32_t Xpos, uint32_t Ypos, uint8_t *pData)
{
 8023088:	b590      	push	{r4, r7, lr}
 802308a:	b085      	sub	sp, #20
 802308c:	af00      	add	r7, sp, #0
 802308e:	60f8      	str	r0, [r7, #12]
 8023090:	60b9      	str	r1, [r7, #8]
 8023092:	607a      	str	r2, [r7, #4]
  FuncDriver.DrawBitmap(DrawProp->LcdDevice, Xpos, Ypos, pData);
 8023094:	4b05      	ldr	r3, [pc, #20]	@ (80230ac <UTIL_LCD_DrawBitmap+0x24>)
 8023096:	681c      	ldr	r4, [r3, #0]
 8023098:	4b05      	ldr	r3, [pc, #20]	@ (80230b0 <UTIL_LCD_DrawBitmap+0x28>)
 802309a:	6918      	ldr	r0, [r3, #16]
 802309c:	687b      	ldr	r3, [r7, #4]
 802309e:	68ba      	ldr	r2, [r7, #8]
 80230a0:	68f9      	ldr	r1, [r7, #12]
 80230a2:	47a0      	blx	r4
}
 80230a4:	bf00      	nop
 80230a6:	3714      	adds	r7, #20
 80230a8:	46bd      	mov	sp, r7
 80230aa:	bd90      	pop	{r4, r7, pc}
 80230ac:	24008a38 	.word	0x24008a38
 80230b0:	240089f8 	.word	0x240089f8

080230b4 <UTIL_LCD_FillRect>:
  * @param  Width  Rectangle width
  * @param  Height Rectangle height
  * @param  Color  Draw color
  */
void UTIL_LCD_FillRect(uint32_t Xpos, uint32_t Ypos, uint32_t Width, uint32_t Height, uint32_t Color)
{
 80230b4:	b590      	push	{r4, r7, lr}
 80230b6:	b087      	sub	sp, #28
 80230b8:	af02      	add	r7, sp, #8
 80230ba:	60f8      	str	r0, [r7, #12]
 80230bc:	60b9      	str	r1, [r7, #8]
 80230be:	607a      	str	r2, [r7, #4]
 80230c0:	603b      	str	r3, [r7, #0]
  /* Fill the rectangle */
  if(DrawProp->LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80230c2:	4b17      	ldr	r3, [pc, #92]	@ (8023120 <UTIL_LCD_FillRect+0x6c>)
 80230c4:	69db      	ldr	r3, [r3, #28]
 80230c6:	2b02      	cmp	r3, #2
 80230c8:	d11a      	bne.n	8023100 <UTIL_LCD_FillRect+0x4c>
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, CONVERTARGB88882RGB565(Color));
 80230ca:	4b16      	ldr	r3, [pc, #88]	@ (8023124 <UTIL_LCD_FillRect+0x70>)
 80230cc:	691c      	ldr	r4, [r3, #16]
 80230ce:	4b14      	ldr	r3, [pc, #80]	@ (8023120 <UTIL_LCD_FillRect+0x6c>)
 80230d0:	6918      	ldr	r0, [r3, #16]
 80230d2:	6a3b      	ldr	r3, [r7, #32]
 80230d4:	08db      	lsrs	r3, r3, #3
 80230d6:	f003 021f 	and.w	r2, r3, #31
 80230da:	6a3b      	ldr	r3, [r7, #32]
 80230dc:	0a9b      	lsrs	r3, r3, #10
 80230de:	015b      	lsls	r3, r3, #5
 80230e0:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80230e4:	431a      	orrs	r2, r3
 80230e6:	6a3b      	ldr	r3, [r7, #32]
 80230e8:	0cdb      	lsrs	r3, r3, #19
 80230ea:	02db      	lsls	r3, r3, #11
 80230ec:	b29b      	uxth	r3, r3
 80230ee:	4313      	orrs	r3, r2
 80230f0:	9301      	str	r3, [sp, #4]
 80230f2:	683b      	ldr	r3, [r7, #0]
 80230f4:	9300      	str	r3, [sp, #0]
 80230f6:	687b      	ldr	r3, [r7, #4]
 80230f8:	68ba      	ldr	r2, [r7, #8]
 80230fa:	68f9      	ldr	r1, [r7, #12]
 80230fc:	47a0      	blx	r4
  }
  else
  {
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
  }
}
 80230fe:	e00b      	b.n	8023118 <UTIL_LCD_FillRect+0x64>
    FuncDriver.FillRect(DrawProp->LcdDevice, Xpos, Ypos, Width, Height, Color);
 8023100:	4b08      	ldr	r3, [pc, #32]	@ (8023124 <UTIL_LCD_FillRect+0x70>)
 8023102:	691c      	ldr	r4, [r3, #16]
 8023104:	4b06      	ldr	r3, [pc, #24]	@ (8023120 <UTIL_LCD_FillRect+0x6c>)
 8023106:	6918      	ldr	r0, [r3, #16]
 8023108:	6a3b      	ldr	r3, [r7, #32]
 802310a:	9301      	str	r3, [sp, #4]
 802310c:	683b      	ldr	r3, [r7, #0]
 802310e:	9300      	str	r3, [sp, #0]
 8023110:	687b      	ldr	r3, [r7, #4]
 8023112:	68ba      	ldr	r2, [r7, #8]
 8023114:	68f9      	ldr	r1, [r7, #12]
 8023116:	47a0      	blx	r4
}
 8023118:	bf00      	nop
 802311a:	3714      	adds	r7, #20
 802311c:	46bd      	mov	sp, r7
 802311e:	bd90      	pop	{r4, r7, pc}
 8023120:	240089f8 	.word	0x240089f8
 8023124:	24008a38 	.word	0x24008a38

08023128 <UTIL_LCD_FillCircle>:
  * @param  Ypos   Y position
  * @param  Radius Circle radius
  * @param  Color  Draw color
  */
void UTIL_LCD_FillCircle(uint32_t Xpos, uint32_t Ypos, uint32_t Radius, uint32_t Color)
{
 8023128:	b580      	push	{r7, lr}
 802312a:	b088      	sub	sp, #32
 802312c:	af00      	add	r7, sp, #0
 802312e:	60f8      	str	r0, [r7, #12]
 8023130:	60b9      	str	r1, [r7, #8]
 8023132:	607a      	str	r2, [r7, #4]
 8023134:	603b      	str	r3, [r7, #0]
  int32_t   decision;  /* Decision Variable */
  uint32_t  current_x; /* Current X Value */
  uint32_t  current_y; /* Current Y Value */

  decision = 3 - (Radius << 1);
 8023136:	687b      	ldr	r3, [r7, #4]
 8023138:	005b      	lsls	r3, r3, #1
 802313a:	f1c3 0303 	rsb	r3, r3, #3
 802313e:	61fb      	str	r3, [r7, #28]

  current_x = 0;
 8023140:	2300      	movs	r3, #0
 8023142:	61bb      	str	r3, [r7, #24]
  current_y = Radius;
 8023144:	687b      	ldr	r3, [r7, #4]
 8023146:	617b      	str	r3, [r7, #20]

  while (current_x <= current_y)
 8023148:	e08b      	b.n	8023262 <UTIL_LCD_FillCircle+0x13a>
  {
    if(current_y > 0)
 802314a:	697b      	ldr	r3, [r7, #20]
 802314c:	2b00      	cmp	r3, #0
 802314e:	d036      	beq.n	80231be <UTIL_LCD_FillCircle+0x96>
    {
      if(current_y >= Xpos)
 8023150:	697a      	ldr	r2, [r7, #20]
 8023152:	68fb      	ldr	r3, [r7, #12]
 8023154:	429a      	cmp	r2, r3
 8023156:	d31c      	bcc.n	8023192 <UTIL_LCD_FillCircle+0x6a>
      {
        UTIL_LCD_DrawHLine(0, Ypos + current_x, 2*current_y - (current_y - Xpos), Color);
 8023158:	68ba      	ldr	r2, [r7, #8]
 802315a:	69bb      	ldr	r3, [r7, #24]
 802315c:	18d0      	adds	r0, r2, r3
 802315e:	697b      	ldr	r3, [r7, #20]
 8023160:	005a      	lsls	r2, r3, #1
 8023162:	68f9      	ldr	r1, [r7, #12]
 8023164:	697b      	ldr	r3, [r7, #20]
 8023166:	1acb      	subs	r3, r1, r3
 8023168:	441a      	add	r2, r3
 802316a:	683b      	ldr	r3, [r7, #0]
 802316c:	4601      	mov	r1, r0
 802316e:	2000      	movs	r0, #0
 8023170:	f7ff fada 	bl	8022728 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos - current_x, 2*current_y - (current_y - Xpos), Color);
 8023174:	68ba      	ldr	r2, [r7, #8]
 8023176:	69bb      	ldr	r3, [r7, #24]
 8023178:	1ad0      	subs	r0, r2, r3
 802317a:	697b      	ldr	r3, [r7, #20]
 802317c:	005a      	lsls	r2, r3, #1
 802317e:	68f9      	ldr	r1, [r7, #12]
 8023180:	697b      	ldr	r3, [r7, #20]
 8023182:	1acb      	subs	r3, r1, r3
 8023184:	441a      	add	r2, r3
 8023186:	683b      	ldr	r3, [r7, #0]
 8023188:	4601      	mov	r1, r0
 802318a:	2000      	movs	r0, #0
 802318c:	f7ff facc 	bl	8022728 <UTIL_LCD_DrawHLine>
 8023190:	e015      	b.n	80231be <UTIL_LCD_FillCircle+0x96>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos + current_x, 2*current_y, Color);
 8023192:	68fa      	ldr	r2, [r7, #12]
 8023194:	697b      	ldr	r3, [r7, #20]
 8023196:	1ad0      	subs	r0, r2, r3
 8023198:	68ba      	ldr	r2, [r7, #8]
 802319a:	69bb      	ldr	r3, [r7, #24]
 802319c:	18d1      	adds	r1, r2, r3
 802319e:	697b      	ldr	r3, [r7, #20]
 80231a0:	005a      	lsls	r2, r3, #1
 80231a2:	683b      	ldr	r3, [r7, #0]
 80231a4:	f7ff fac0 	bl	8022728 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_y, Ypos - current_x, 2*current_y, Color);
 80231a8:	68fa      	ldr	r2, [r7, #12]
 80231aa:	697b      	ldr	r3, [r7, #20]
 80231ac:	1ad0      	subs	r0, r2, r3
 80231ae:	68ba      	ldr	r2, [r7, #8]
 80231b0:	69bb      	ldr	r3, [r7, #24]
 80231b2:	1ad1      	subs	r1, r2, r3
 80231b4:	697b      	ldr	r3, [r7, #20]
 80231b6:	005a      	lsls	r2, r3, #1
 80231b8:	683b      	ldr	r3, [r7, #0]
 80231ba:	f7ff fab5 	bl	8022728 <UTIL_LCD_DrawHLine>
      }
    }

    if(current_x > 0)
 80231be:	69bb      	ldr	r3, [r7, #24]
 80231c0:	2b00      	cmp	r3, #0
 80231c2:	d036      	beq.n	8023232 <UTIL_LCD_FillCircle+0x10a>
    {
      if(current_x >= Xpos)
 80231c4:	69ba      	ldr	r2, [r7, #24]
 80231c6:	68fb      	ldr	r3, [r7, #12]
 80231c8:	429a      	cmp	r2, r3
 80231ca:	d31c      	bcc.n	8023206 <UTIL_LCD_FillCircle+0xde>
      {
        UTIL_LCD_DrawHLine(0, Ypos - current_y, 2*current_x - (current_x - Xpos), Color);
 80231cc:	68ba      	ldr	r2, [r7, #8]
 80231ce:	697b      	ldr	r3, [r7, #20]
 80231d0:	1ad0      	subs	r0, r2, r3
 80231d2:	69bb      	ldr	r3, [r7, #24]
 80231d4:	005a      	lsls	r2, r3, #1
 80231d6:	68f9      	ldr	r1, [r7, #12]
 80231d8:	69bb      	ldr	r3, [r7, #24]
 80231da:	1acb      	subs	r3, r1, r3
 80231dc:	441a      	add	r2, r3
 80231de:	683b      	ldr	r3, [r7, #0]
 80231e0:	4601      	mov	r1, r0
 80231e2:	2000      	movs	r0, #0
 80231e4:	f7ff faa0 	bl	8022728 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(0, Ypos + current_y, 2*current_x - (current_x - Xpos), Color);
 80231e8:	68ba      	ldr	r2, [r7, #8]
 80231ea:	697b      	ldr	r3, [r7, #20]
 80231ec:	18d0      	adds	r0, r2, r3
 80231ee:	69bb      	ldr	r3, [r7, #24]
 80231f0:	005a      	lsls	r2, r3, #1
 80231f2:	68f9      	ldr	r1, [r7, #12]
 80231f4:	69bb      	ldr	r3, [r7, #24]
 80231f6:	1acb      	subs	r3, r1, r3
 80231f8:	441a      	add	r2, r3
 80231fa:	683b      	ldr	r3, [r7, #0]
 80231fc:	4601      	mov	r1, r0
 80231fe:	2000      	movs	r0, #0
 8023200:	f7ff fa92 	bl	8022728 <UTIL_LCD_DrawHLine>
 8023204:	e015      	b.n	8023232 <UTIL_LCD_FillCircle+0x10a>
      }
      else
      {
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos - current_y, 2*current_x, Color);
 8023206:	68fa      	ldr	r2, [r7, #12]
 8023208:	69bb      	ldr	r3, [r7, #24]
 802320a:	1ad0      	subs	r0, r2, r3
 802320c:	68ba      	ldr	r2, [r7, #8]
 802320e:	697b      	ldr	r3, [r7, #20]
 8023210:	1ad1      	subs	r1, r2, r3
 8023212:	69bb      	ldr	r3, [r7, #24]
 8023214:	005a      	lsls	r2, r3, #1
 8023216:	683b      	ldr	r3, [r7, #0]
 8023218:	f7ff fa86 	bl	8022728 <UTIL_LCD_DrawHLine>
        UTIL_LCD_DrawHLine(Xpos - current_x, Ypos + current_y, 2*current_x, Color);
 802321c:	68fa      	ldr	r2, [r7, #12]
 802321e:	69bb      	ldr	r3, [r7, #24]
 8023220:	1ad0      	subs	r0, r2, r3
 8023222:	68ba      	ldr	r2, [r7, #8]
 8023224:	697b      	ldr	r3, [r7, #20]
 8023226:	18d1      	adds	r1, r2, r3
 8023228:	69bb      	ldr	r3, [r7, #24]
 802322a:	005a      	lsls	r2, r3, #1
 802322c:	683b      	ldr	r3, [r7, #0]
 802322e:	f7ff fa7b 	bl	8022728 <UTIL_LCD_DrawHLine>
      }
    }
    if (decision < 0)
 8023232:	69fb      	ldr	r3, [r7, #28]
 8023234:	2b00      	cmp	r3, #0
 8023236:	da06      	bge.n	8023246 <UTIL_LCD_FillCircle+0x11e>
    {
      decision += (current_x << 2) + 6;
 8023238:	69bb      	ldr	r3, [r7, #24]
 802323a:	009a      	lsls	r2, r3, #2
 802323c:	69fb      	ldr	r3, [r7, #28]
 802323e:	4413      	add	r3, r2
 8023240:	3306      	adds	r3, #6
 8023242:	61fb      	str	r3, [r7, #28]
 8023244:	e00a      	b.n	802325c <UTIL_LCD_FillCircle+0x134>
    }
    else
    {
      decision += ((current_x - current_y) << 2) + 10;
 8023246:	69ba      	ldr	r2, [r7, #24]
 8023248:	697b      	ldr	r3, [r7, #20]
 802324a:	1ad3      	subs	r3, r2, r3
 802324c:	009a      	lsls	r2, r3, #2
 802324e:	69fb      	ldr	r3, [r7, #28]
 8023250:	4413      	add	r3, r2
 8023252:	330a      	adds	r3, #10
 8023254:	61fb      	str	r3, [r7, #28]
      current_y--;
 8023256:	697b      	ldr	r3, [r7, #20]
 8023258:	3b01      	subs	r3, #1
 802325a:	617b      	str	r3, [r7, #20]
    }
    current_x++;
 802325c:	69bb      	ldr	r3, [r7, #24]
 802325e:	3301      	adds	r3, #1
 8023260:	61bb      	str	r3, [r7, #24]
  while (current_x <= current_y)
 8023262:	69ba      	ldr	r2, [r7, #24]
 8023264:	697b      	ldr	r3, [r7, #20]
 8023266:	429a      	cmp	r2, r3
 8023268:	f67f af6f 	bls.w	802314a <UTIL_LCD_FillCircle+0x22>
  }

  UTIL_LCD_DrawCircle(Xpos, Ypos, Radius, Color);
 802326c:	683b      	ldr	r3, [r7, #0]
 802326e:	687a      	ldr	r2, [r7, #4]
 8023270:	68b9      	ldr	r1, [r7, #8]
 8023272:	68f8      	ldr	r0, [r7, #12]
 8023274:	f7ff fcd8 	bl	8022c28 <UTIL_LCD_DrawCircle>
}
 8023278:	bf00      	nop
 802327a:	3720      	adds	r7, #32
 802327c:	46bd      	mov	sp, r7
 802327e:	bd80      	pop	{r7, pc}

08023280 <UTIL_LCD_FillPolygon>:
  * @param  Points     Pointer to the points array
  * @param  PointCount Number of points
  * @param  Color      Draw color
  */
void UTIL_LCD_FillPolygon(pPoint Points, uint32_t PointCount, uint32_t Color)
{
 8023280:	b580      	push	{r7, lr}
 8023282:	b094      	sub	sp, #80	@ 0x50
 8023284:	af00      	add	r7, sp, #0
 8023286:	60f8      	str	r0, [r7, #12]
 8023288:	60b9      	str	r1, [r7, #8]
 802328a:	607a      	str	r2, [r7, #4]
  int16_t X = 0, Y = 0, X2 = 0, Y2 = 0, x_center = 0, y_center = 0, x_first = 0, y_first = 0, pixel_x = 0, pixel_y = 0, counter = 0;
 802328c:	2300      	movs	r3, #0
 802328e:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8023290:	2300      	movs	r3, #0
 8023292:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8023294:	2300      	movs	r3, #0
 8023296:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 802329a:	2300      	movs	r3, #0
 802329c:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
 80232a0:	2300      	movs	r3, #0
 80232a2:	867b      	strh	r3, [r7, #50]	@ 0x32
 80232a4:	2300      	movs	r3, #0
 80232a6:	863b      	strh	r3, [r7, #48]	@ 0x30
 80232a8:	2300      	movs	r3, #0
 80232aa:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80232ac:	2300      	movs	r3, #0
 80232ae:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80232b0:	2300      	movs	r3, #0
 80232b2:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80232b4:	2300      	movs	r3, #0
 80232b6:	853b      	strh	r3, [r7, #40]	@ 0x28
 80232b8:	2300      	movs	r3, #0
 80232ba:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
  uint32_t  image_left = 0, image_right = 0, image_top = 0, image_bottom = 0;
 80232be:	2300      	movs	r3, #0
 80232c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80232c2:	2300      	movs	r3, #0
 80232c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80232c6:	2300      	movs	r3, #0
 80232c8:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80232ca:	2300      	movs	r3, #0
 80232cc:	63bb      	str	r3, [r7, #56]	@ 0x38
  Triangle_Positions_t positions;

  image_left = image_right = Points->X;
 80232ce:	68fb      	ldr	r3, [r7, #12]
 80232d0:	f9b3 3000 	ldrsh.w	r3, [r3]
 80232d4:	643b      	str	r3, [r7, #64]	@ 0x40
 80232d6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80232d8:	647b      	str	r3, [r7, #68]	@ 0x44
  image_top= image_bottom = Points->Y;
 80232da:	68fb      	ldr	r3, [r7, #12]
 80232dc:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80232e0:	63bb      	str	r3, [r7, #56]	@ 0x38
 80232e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80232e4:	63fb      	str	r3, [r7, #60]	@ 0x3c

  for(counter = 1; counter < PointCount; counter++)
 80232e6:	2301      	movs	r3, #1
 80232e8:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 80232ec:	e034      	b.n	8023358 <UTIL_LCD_FillPolygon+0xd8>
  {
    pixel_x = POLY_X(counter);
 80232ee:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 80232f2:	009b      	lsls	r3, r3, #2
 80232f4:	68fa      	ldr	r2, [r7, #12]
 80232f6:	4413      	add	r3, r2
 80232f8:	881b      	ldrh	r3, [r3, #0]
 80232fa:	857b      	strh	r3, [r7, #42]	@ 0x2a
    if(pixel_x < image_left)
 80232fc:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8023300:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8023302:	429a      	cmp	r2, r3
 8023304:	d902      	bls.n	802330c <UTIL_LCD_FillPolygon+0x8c>
    {
      image_left = pixel_x;
 8023306:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 802330a:	647b      	str	r3, [r7, #68]	@ 0x44
    }
    if(pixel_x > image_right)
 802330c:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 8023310:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8023312:	429a      	cmp	r2, r3
 8023314:	d202      	bcs.n	802331c <UTIL_LCD_FillPolygon+0x9c>
    {
      image_right = pixel_x;
 8023316:	f9b7 302a 	ldrsh.w	r3, [r7, #42]	@ 0x2a
 802331a:	643b      	str	r3, [r7, #64]	@ 0x40
    }

    pixel_y = POLY_Y(counter);
 802331c:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 8023320:	009b      	lsls	r3, r3, #2
 8023322:	68fa      	ldr	r2, [r7, #12]
 8023324:	4413      	add	r3, r2
 8023326:	885b      	ldrh	r3, [r3, #2]
 8023328:	853b      	strh	r3, [r7, #40]	@ 0x28
    if(pixel_y < image_top)
 802332a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 802332e:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8023330:	429a      	cmp	r2, r3
 8023332:	d902      	bls.n	802333a <UTIL_LCD_FillPolygon+0xba>
    {
      image_top = pixel_y;
 8023334:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8023338:	63fb      	str	r3, [r7, #60]	@ 0x3c
    }
    if(pixel_y > image_bottom)
 802333a:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 802333e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023340:	429a      	cmp	r2, r3
 8023342:	d202      	bcs.n	802334a <UTIL_LCD_FillPolygon+0xca>
    {
      image_bottom = pixel_y;
 8023344:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 8023348:	63bb      	str	r3, [r7, #56]	@ 0x38
  for(counter = 1; counter < PointCount; counter++)
 802334a:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 802334e:	b29b      	uxth	r3, r3
 8023350:	3301      	adds	r3, #1
 8023352:	b29b      	uxth	r3, r3
 8023354:	f8a7 304a 	strh.w	r3, [r7, #74]	@ 0x4a
 8023358:	f9b7 304a 	ldrsh.w	r3, [r7, #74]	@ 0x4a
 802335c:	68ba      	ldr	r2, [r7, #8]
 802335e:	429a      	cmp	r2, r3
 8023360:	d8c5      	bhi.n	80232ee <UTIL_LCD_FillPolygon+0x6e>
    }
  }

  if(PointCount < 2)
 8023362:	68bb      	ldr	r3, [r7, #8]
 8023364:	2b01      	cmp	r3, #1
 8023366:	f240 80ad 	bls.w	80234c4 <UTIL_LCD_FillPolygon+0x244>
  {
    return;
  }

  x_center = (image_left + image_right)/2;
 802336a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 802336c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 802336e:	4413      	add	r3, r2
 8023370:	085b      	lsrs	r3, r3, #1
 8023372:	867b      	strh	r3, [r7, #50]	@ 0x32
  y_center = (image_bottom + image_top)/2;
 8023374:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8023376:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8023378:	4413      	add	r3, r2
 802337a:	085b      	lsrs	r3, r3, #1
 802337c:	863b      	strh	r3, [r7, #48]	@ 0x30

  x_first = Points->X;
 802337e:	68fb      	ldr	r3, [r7, #12]
 8023380:	881b      	ldrh	r3, [r3, #0]
 8023382:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  y_first = Points->Y;
 8023384:	68fb      	ldr	r3, [r7, #12]
 8023386:	885b      	ldrh	r3, [r3, #2]
 8023388:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  while(--PointCount)
 802338a:	e052      	b.n	8023432 <UTIL_LCD_FillPolygon+0x1b2>
  {
    X = Points->X;
 802338c:	68fb      	ldr	r3, [r7, #12]
 802338e:	881b      	ldrh	r3, [r3, #0]
 8023390:	86fb      	strh	r3, [r7, #54]	@ 0x36
    Y = Points->Y;
 8023392:	68fb      	ldr	r3, [r7, #12]
 8023394:	885b      	ldrh	r3, [r3, #2]
 8023396:	86bb      	strh	r3, [r7, #52]	@ 0x34
    Points++;
 8023398:	68fb      	ldr	r3, [r7, #12]
 802339a:	3304      	adds	r3, #4
 802339c:	60fb      	str	r3, [r7, #12]
    X2 = Points->X;
 802339e:	68fb      	ldr	r3, [r7, #12]
 80233a0:	881b      	ldrh	r3, [r3, #0]
 80233a2:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
    Y2 = Points->Y;
 80233a6:	68fb      	ldr	r3, [r7, #12]
 80233a8:	885b      	ldrh	r3, [r3, #2]
 80233aa:	f8a7 304c 	strh.w	r3, [r7, #76]	@ 0x4c
    positions.x1 = X;
 80233ae:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80233b2:	613b      	str	r3, [r7, #16]
    positions.y1 = Y;
 80233b4:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80233b8:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 80233ba:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80233be:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 80233c0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80233c4:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 80233c6:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80233ca:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 80233cc:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80233d0:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80233d2:	f107 0310 	add.w	r3, r7, #16
 80233d6:	6879      	ldr	r1, [r7, #4]
 80233d8:	4618      	mov	r0, r3
 80233da:	f000 fa7b 	bl	80238d4 <FillTriangle>

    positions.x2 = x_center;
 80233de:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80233e2:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 80233e4:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 80233e8:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 80233ea:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80233ee:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 80233f0:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80233f4:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80233f6:	f107 0310 	add.w	r3, r7, #16
 80233fa:	6879      	ldr	r1, [r7, #4]
 80233fc:	4618      	mov	r0, r3
 80233fe:	f000 fa69 	bl	80238d4 <FillTriangle>

    positions.x1 = x_center;
 8023402:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8023406:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 8023408:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 802340c:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 802340e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 8023412:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8023414:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8023418:	61fb      	str	r3, [r7, #28]
    positions.x3 = X;
 802341a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 802341e:	623b      	str	r3, [r7, #32]
    positions.y3 = Y;
 8023420:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8023424:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8023426:	f107 0310 	add.w	r3, r7, #16
 802342a:	6879      	ldr	r1, [r7, #4]
 802342c:	4618      	mov	r0, r3
 802342e:	f000 fa51 	bl	80238d4 <FillTriangle>
  while(--PointCount)
 8023432:	68bb      	ldr	r3, [r7, #8]
 8023434:	3b01      	subs	r3, #1
 8023436:	60bb      	str	r3, [r7, #8]
 8023438:	68bb      	ldr	r3, [r7, #8]
 802343a:	2b00      	cmp	r3, #0
 802343c:	d1a6      	bne.n	802338c <UTIL_LCD_FillPolygon+0x10c>
  }

    positions.x1 = x_first;
 802343e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 8023442:	613b      	str	r3, [r7, #16]
    positions.y1 = y_first;
 8023444:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 8023448:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 802344a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 802344e:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 8023450:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8023454:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_center;
 8023456:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 802345a:	623b      	str	r3, [r7, #32]
    positions.y3 = y_center;
 802345c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8023460:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8023462:	f107 0310 	add.w	r3, r7, #16
 8023466:	6879      	ldr	r1, [r7, #4]
 8023468:	4618      	mov	r0, r3
 802346a:	f000 fa33 	bl	80238d4 <FillTriangle>

    positions.x2 = x_center;
 802346e:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8023472:	61bb      	str	r3, [r7, #24]
    positions.y2 = y_center;
 8023474:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 8023478:	61fb      	str	r3, [r7, #28]
    positions.x3 = X2;
 802347a:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 802347e:	623b      	str	r3, [r7, #32]
    positions.y3 = Y2;
 8023480:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 8023484:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 8023486:	f107 0310 	add.w	r3, r7, #16
 802348a:	6879      	ldr	r1, [r7, #4]
 802348c:	4618      	mov	r0, r3
 802348e:	f000 fa21 	bl	80238d4 <FillTriangle>

    positions.x1 = x_center;
 8023492:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8023496:	613b      	str	r3, [r7, #16]
    positions.y1 = y_center;
 8023498:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 802349c:	617b      	str	r3, [r7, #20]
    positions.x2 = X2;
 802349e:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	@ 0x4e
 80234a2:	61bb      	str	r3, [r7, #24]
    positions.y2 = Y2;
 80234a4:	f9b7 304c 	ldrsh.w	r3, [r7, #76]	@ 0x4c
 80234a8:	61fb      	str	r3, [r7, #28]
    positions.x3 = x_first;
 80234aa:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	@ 0x2e
 80234ae:	623b      	str	r3, [r7, #32]
    positions.y3 = y_first;
 80234b0:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	@ 0x2c
 80234b4:	627b      	str	r3, [r7, #36]	@ 0x24
    FillTriangle(&positions, Color);
 80234b6:	f107 0310 	add.w	r3, r7, #16
 80234ba:	6879      	ldr	r1, [r7, #4]
 80234bc:	4618      	mov	r0, r3
 80234be:	f000 fa09 	bl	80238d4 <FillTriangle>
 80234c2:	e000      	b.n	80234c6 <UTIL_LCD_FillPolygon+0x246>
    return;
 80234c4:	bf00      	nop
}
 80234c6:	3750      	adds	r7, #80	@ 0x50
 80234c8:	46bd      	mov	sp, r7
 80234ca:	bd80      	pop	{r7, pc}

080234cc <UTIL_LCD_FillEllipse>:
  * @param  XRadius Ellipse X radius
  * @param  YRadius Ellipse Y radius
  * @param  Color   Draw color
  */
void UTIL_LCD_FillEllipse(int Xpos, int Ypos, int XRadius, int YRadius, uint32_t Color)
{
 80234cc:	b580      	push	{r7, lr}
 80234ce:	b08c      	sub	sp, #48	@ 0x30
 80234d0:	af00      	add	r7, sp, #0
 80234d2:	60f8      	str	r0, [r7, #12]
 80234d4:	60b9      	str	r1, [r7, #8]
 80234d6:	607a      	str	r2, [r7, #4]
 80234d8:	603b      	str	r3, [r7, #0]
  int x_pos = 0, y_pos = -YRadius, err = 2-2*XRadius, e2;
 80234da:	2300      	movs	r3, #0
 80234dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80234de:	683b      	ldr	r3, [r7, #0]
 80234e0:	425b      	negs	r3, r3
 80234e2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80234e4:	687b      	ldr	r3, [r7, #4]
 80234e6:	f1c3 0301 	rsb	r3, r3, #1
 80234ea:	005b      	lsls	r3, r3, #1
 80234ec:	627b      	str	r3, [r7, #36]	@ 0x24
  float k = 0, rad1 = 0, rad2 = 0;
 80234ee:	f04f 0300 	mov.w	r3, #0
 80234f2:	61fb      	str	r3, [r7, #28]
 80234f4:	f04f 0300 	mov.w	r3, #0
 80234f8:	61bb      	str	r3, [r7, #24]
 80234fa:	f04f 0300 	mov.w	r3, #0
 80234fe:	617b      	str	r3, [r7, #20]

  rad1 = XRadius;
 8023500:	687b      	ldr	r3, [r7, #4]
 8023502:	ee07 3a90 	vmov	s15, r3
 8023506:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802350a:	edc7 7a06 	vstr	s15, [r7, #24]
  rad2 = YRadius;
 802350e:	683b      	ldr	r3, [r7, #0]
 8023510:	ee07 3a90 	vmov	s15, r3
 8023514:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8023518:	edc7 7a05 	vstr	s15, [r7, #20]

  k = (float)(rad2/rad1);
 802351c:	edd7 6a05 	vldr	s13, [r7, #20]
 8023520:	ed97 7a06 	vldr	s14, [r7, #24]
 8023524:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023528:	edc7 7a07 	vstr	s15, [r7, #28]

  do
  {
    UTIL_LCD_DrawHLine((Xpos-(uint32_t)(x_pos/k)), (Ypos + y_pos), (2*(uint32_t)(x_pos/k) + 1), Color);
 802352c:	68fb      	ldr	r3, [r7, #12]
 802352e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8023530:	ee07 2a90 	vmov	s15, r2
 8023534:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8023538:	ed97 7a07 	vldr	s14, [r7, #28]
 802353c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023540:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023544:	ee17 2a90 	vmov	r2, s15
 8023548:	1a98      	subs	r0, r3, r2
 802354a:	68ba      	ldr	r2, [r7, #8]
 802354c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 802354e:	4413      	add	r3, r2
 8023550:	4619      	mov	r1, r3
 8023552:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8023554:	ee07 3a90 	vmov	s15, r3
 8023558:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 802355c:	ed97 7a07 	vldr	s14, [r7, #28]
 8023560:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8023564:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8023568:	ee17 3a90 	vmov	r3, s15
 802356c:	005b      	lsls	r3, r3, #1
 802356e:	1c5a      	adds	r2, r3, #1
 8023570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8023572:	f7ff f8d9 	bl	8022728 <UTIL_LCD_DrawHLine>
    UTIL_LCD_DrawHLine((Xpos-(uint32_t)(x_pos/k)), (Ypos - y_pos), (2*(uint32_t)(x_pos/k) + 1), Color);
 8023576:	68fb      	ldr	r3, [r7, #12]
 8023578:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 802357a:	ee07 2a90 	vmov	s15, r2
 802357e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8023582:	ed97 7a07 	vldr	s14, [r7, #28]
 8023586:	eec6 7a87 	vdiv.f32	s15, s13, s14
 802358a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 802358e:	ee17 2a90 	vmov	r2, s15
 8023592:	1a98      	subs	r0, r3, r2
 8023594:	68ba      	ldr	r2, [r7, #8]
 8023596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023598:	1ad3      	subs	r3, r2, r3
 802359a:	4619      	mov	r1, r3
 802359c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 802359e:	ee07 3a90 	vmov	s15, r3
 80235a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80235a6:	ed97 7a07 	vldr	s14, [r7, #28]
 80235aa:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80235ae:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80235b2:	ee17 3a90 	vmov	r3, s15
 80235b6:	005b      	lsls	r3, r3, #1
 80235b8:	1c5a      	adds	r2, r3, #1
 80235ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80235bc:	f7ff f8b4 	bl	8022728 <UTIL_LCD_DrawHLine>

    e2 = err;
 80235c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80235c2:	623b      	str	r3, [r7, #32]
    if (e2 <= x_pos)
 80235c4:	6a3a      	ldr	r2, [r7, #32]
 80235c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235c8:	429a      	cmp	r2, r3
 80235ca:	dc13      	bgt.n	80235f4 <UTIL_LCD_FillEllipse+0x128>
    {
      err += ++x_pos*2+1;
 80235cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235ce:	3301      	adds	r3, #1
 80235d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80235d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80235d4:	005b      	lsls	r3, r3, #1
 80235d6:	3301      	adds	r3, #1
 80235d8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80235da:	4413      	add	r3, r2
 80235dc:	627b      	str	r3, [r7, #36]	@ 0x24
      if (-y_pos == x_pos && e2 <= y_pos) e2 = 0;
 80235de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235e0:	425b      	negs	r3, r3
 80235e2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80235e4:	429a      	cmp	r2, r3
 80235e6:	d105      	bne.n	80235f4 <UTIL_LCD_FillEllipse+0x128>
 80235e8:	6a3a      	ldr	r2, [r7, #32]
 80235ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235ec:	429a      	cmp	r2, r3
 80235ee:	dc01      	bgt.n	80235f4 <UTIL_LCD_FillEllipse+0x128>
 80235f0:	2300      	movs	r3, #0
 80235f2:	623b      	str	r3, [r7, #32]
    }
    if (e2 > y_pos) err += ++y_pos*2+1;
 80235f4:	6a3a      	ldr	r2, [r7, #32]
 80235f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235f8:	429a      	cmp	r2, r3
 80235fa:	dd08      	ble.n	802360e <UTIL_LCD_FillEllipse+0x142>
 80235fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80235fe:	3301      	adds	r3, #1
 8023600:	62bb      	str	r3, [r7, #40]	@ 0x28
 8023602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023604:	005b      	lsls	r3, r3, #1
 8023606:	3301      	adds	r3, #1
 8023608:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 802360a:	4413      	add	r3, r2
 802360c:	627b      	str	r3, [r7, #36]	@ 0x24
  }
  while (y_pos <= 0);
 802360e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8023610:	2b00      	cmp	r3, #0
 8023612:	dd8b      	ble.n	802352c <UTIL_LCD_FillEllipse+0x60>
}
 8023614:	bf00      	nop
 8023616:	bf00      	nop
 8023618:	3730      	adds	r7, #48	@ 0x30
 802361a:	46bd      	mov	sp, r7
 802361c:	bd80      	pop	{r7, pc}
	...

08023620 <DrawChar>:
  * @param  Xpos  Line where to display the character shape
  * @param  Ypos  Start column address
  * @param  pData Pointer to the character data
  */
static void DrawChar(uint32_t Xpos, uint32_t Ypos, const uint8_t *pData)
{
 8023620:	b580      	push	{r7, lr}
 8023622:	b0b2      	sub	sp, #200	@ 0xc8
 8023624:	af02      	add	r7, sp, #8
 8023626:	60f8      	str	r0, [r7, #12]
 8023628:	60b9      	str	r1, [r7, #8]
 802362a:	607a      	str	r2, [r7, #4]
  uint32_t i = 0, j = 0, offset;
 802362c:	2300      	movs	r3, #0
 802362e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8023632:	2300      	movs	r3, #0
 8023634:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
  uint32_t height, width;
  uint8_t  *pchar;
  uint32_t line;

  height = DrawProp[DrawProp->LcdLayer].pFont->Height;
 8023638:	4ba5      	ldr	r3, [pc, #660]	@ (80238d0 <DrawChar+0x2b0>)
 802363a:	68db      	ldr	r3, [r3, #12]
 802363c:	4aa4      	ldr	r2, [pc, #656]	@ (80238d0 <DrawChar+0x2b0>)
 802363e:	015b      	lsls	r3, r3, #5
 8023640:	4413      	add	r3, r2
 8023642:	3308      	adds	r3, #8
 8023644:	681b      	ldr	r3, [r3, #0]
 8023646:	88db      	ldrh	r3, [r3, #6]
 8023648:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
  width  = DrawProp[DrawProp->LcdLayer].pFont->Width;
 802364c:	4ba0      	ldr	r3, [pc, #640]	@ (80238d0 <DrawChar+0x2b0>)
 802364e:	68db      	ldr	r3, [r3, #12]
 8023650:	4a9f      	ldr	r2, [pc, #636]	@ (80238d0 <DrawChar+0x2b0>)
 8023652:	015b      	lsls	r3, r3, #5
 8023654:	4413      	add	r3, r2
 8023656:	3308      	adds	r3, #8
 8023658:	681b      	ldr	r3, [r3, #0]
 802365a:	889b      	ldrh	r3, [r3, #4]
 802365c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint16_t rgb565[24];
  uint32_t argb8888[24];

  offset =  8 *((width + 7)/8) -  width ;
 8023660:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023664:	3307      	adds	r3, #7
 8023666:	f023 0207 	bic.w	r2, r3, #7
 802366a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 802366e:	1ad3      	subs	r3, r2, r3
 8023670:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  for(i = 0; i < height; i++)
 8023674:	2300      	movs	r3, #0
 8023676:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 802367a:	e11c      	b.n	80238b6 <DrawChar+0x296>
  {
    pchar = ((uint8_t *)pData + (width + 7)/8 * i);
 802367c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023680:	3307      	adds	r3, #7
 8023682:	08db      	lsrs	r3, r3, #3
 8023684:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8023688:	fb02 f303 	mul.w	r3, r2, r3
 802368c:	687a      	ldr	r2, [r7, #4]
 802368e:	4413      	add	r3, r2
 8023690:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

    switch(((width + 7)/8))
 8023694:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023698:	3307      	adds	r3, #7
 802369a:	08db      	lsrs	r3, r3, #3
 802369c:	2b01      	cmp	r3, #1
 802369e:	d002      	beq.n	80236a6 <DrawChar+0x86>
 80236a0:	2b02      	cmp	r3, #2
 80236a2:	d006      	beq.n	80236b2 <DrawChar+0x92>
 80236a4:	e011      	b.n	80236ca <DrawChar+0xaa>
    {

    case 1:
      line =  pchar[0];
 80236a6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80236aa:	781b      	ldrb	r3, [r3, #0]
 80236ac:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80236b0:	e01d      	b.n	80236ee <DrawChar+0xce>

    case 2:
      line =  (pchar[0]<< 8) | pchar[1];
 80236b2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80236b6:	781b      	ldrb	r3, [r3, #0]
 80236b8:	021b      	lsls	r3, r3, #8
 80236ba:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80236be:	3201      	adds	r2, #1
 80236c0:	7812      	ldrb	r2, [r2, #0]
 80236c2:	4313      	orrs	r3, r2
 80236c4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80236c8:	e011      	b.n	80236ee <DrawChar+0xce>

    case 3:
    default:
      line =  (pchar[0]<< 16) | (pchar[1]<< 8) | pchar[2];
 80236ca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80236ce:	781b      	ldrb	r3, [r3, #0]
 80236d0:	041a      	lsls	r2, r3, #16
 80236d2:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80236d6:	3301      	adds	r3, #1
 80236d8:	781b      	ldrb	r3, [r3, #0]
 80236da:	021b      	lsls	r3, r3, #8
 80236dc:	4313      	orrs	r3, r2
 80236de:	f8d7 20a4 	ldr.w	r2, [r7, #164]	@ 0xa4
 80236e2:	3202      	adds	r2, #2
 80236e4:	7812      	ldrb	r2, [r2, #0]
 80236e6:	4313      	orrs	r3, r2
 80236e8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      break;
 80236ec:	bf00      	nop
    }

    if(DrawProp[DrawProp->LcdLayer].LcdPixelFormat == LCD_PIXEL_FORMAT_RGB565)
 80236ee:	4b78      	ldr	r3, [pc, #480]	@ (80238d0 <DrawChar+0x2b0>)
 80236f0:	68db      	ldr	r3, [r3, #12]
 80236f2:	4a77      	ldr	r2, [pc, #476]	@ (80238d0 <DrawChar+0x2b0>)
 80236f4:	015b      	lsls	r3, r3, #5
 80236f6:	4413      	add	r3, r2
 80236f8:	331c      	adds	r3, #28
 80236fa:	681b      	ldr	r3, [r3, #0]
 80236fc:	2b02      	cmp	r3, #2
 80236fe:	f040 808c 	bne.w	802381a <DrawChar+0x1fa>
    {
      for (j = 0; j < width; j++)
 8023702:	2300      	movs	r3, #0
 8023704:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8023708:	e074      	b.n	80237f4 <DrawChar+0x1d4>
      {
        if(line & (1 << (width- j + offset- 1)))
 802370a:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 802370e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023712:	1ad2      	subs	r2, r2, r3
 8023714:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8023718:	4413      	add	r3, r2
 802371a:	3b01      	subs	r3, #1
 802371c:	2201      	movs	r2, #1
 802371e:	fa02 f303 	lsl.w	r3, r2, r3
 8023722:	461a      	mov	r2, r3
 8023724:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023728:	4013      	ands	r3, r2
 802372a:	2b00      	cmp	r3, #0
 802372c:	d02d      	beq.n	802378a <DrawChar+0x16a>
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].TextColor);
 802372e:	4b68      	ldr	r3, [pc, #416]	@ (80238d0 <DrawChar+0x2b0>)
 8023730:	68db      	ldr	r3, [r3, #12]
 8023732:	4a67      	ldr	r2, [pc, #412]	@ (80238d0 <DrawChar+0x2b0>)
 8023734:	015b      	lsls	r3, r3, #5
 8023736:	4413      	add	r3, r2
 8023738:	681b      	ldr	r3, [r3, #0]
 802373a:	08db      	lsrs	r3, r3, #3
 802373c:	b29b      	uxth	r3, r3
 802373e:	f003 031f 	and.w	r3, r3, #31
 8023742:	b29a      	uxth	r2, r3
 8023744:	4b62      	ldr	r3, [pc, #392]	@ (80238d0 <DrawChar+0x2b0>)
 8023746:	68db      	ldr	r3, [r3, #12]
 8023748:	4961      	ldr	r1, [pc, #388]	@ (80238d0 <DrawChar+0x2b0>)
 802374a:	015b      	lsls	r3, r3, #5
 802374c:	440b      	add	r3, r1
 802374e:	681b      	ldr	r3, [r3, #0]
 8023750:	0a9b      	lsrs	r3, r3, #10
 8023752:	b29b      	uxth	r3, r3
 8023754:	015b      	lsls	r3, r3, #5
 8023756:	b29b      	uxth	r3, r3
 8023758:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 802375c:	b29b      	uxth	r3, r3
 802375e:	4313      	orrs	r3, r2
 8023760:	b29a      	uxth	r2, r3
 8023762:	4b5b      	ldr	r3, [pc, #364]	@ (80238d0 <DrawChar+0x2b0>)
 8023764:	68db      	ldr	r3, [r3, #12]
 8023766:	495a      	ldr	r1, [pc, #360]	@ (80238d0 <DrawChar+0x2b0>)
 8023768:	015b      	lsls	r3, r3, #5
 802376a:	440b      	add	r3, r1
 802376c:	681b      	ldr	r3, [r3, #0]
 802376e:	0cdb      	lsrs	r3, r3, #19
 8023770:	b29b      	uxth	r3, r3
 8023772:	02db      	lsls	r3, r3, #11
 8023774:	b29b      	uxth	r3, r3
 8023776:	4313      	orrs	r3, r2
 8023778:	b29a      	uxth	r2, r3
 802377a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802377e:	005b      	lsls	r3, r3, #1
 8023780:	33c0      	adds	r3, #192	@ 0xc0
 8023782:	443b      	add	r3, r7
 8023784:	f823 2c4c 	strh.w	r2, [r3, #-76]
 8023788:	e02f      	b.n	80237ea <DrawChar+0x1ca>
        }
        else
        {
          rgb565[j] = CONVERTARGB88882RGB565(DrawProp[DrawProp->LcdLayer].BackColor);
 802378a:	4b51      	ldr	r3, [pc, #324]	@ (80238d0 <DrawChar+0x2b0>)
 802378c:	68db      	ldr	r3, [r3, #12]
 802378e:	4a50      	ldr	r2, [pc, #320]	@ (80238d0 <DrawChar+0x2b0>)
 8023790:	015b      	lsls	r3, r3, #5
 8023792:	4413      	add	r3, r2
 8023794:	3304      	adds	r3, #4
 8023796:	681b      	ldr	r3, [r3, #0]
 8023798:	08db      	lsrs	r3, r3, #3
 802379a:	b29b      	uxth	r3, r3
 802379c:	f003 031f 	and.w	r3, r3, #31
 80237a0:	b29a      	uxth	r2, r3
 80237a2:	4b4b      	ldr	r3, [pc, #300]	@ (80238d0 <DrawChar+0x2b0>)
 80237a4:	68db      	ldr	r3, [r3, #12]
 80237a6:	494a      	ldr	r1, [pc, #296]	@ (80238d0 <DrawChar+0x2b0>)
 80237a8:	015b      	lsls	r3, r3, #5
 80237aa:	440b      	add	r3, r1
 80237ac:	3304      	adds	r3, #4
 80237ae:	681b      	ldr	r3, [r3, #0]
 80237b0:	0a9b      	lsrs	r3, r3, #10
 80237b2:	b29b      	uxth	r3, r3
 80237b4:	015b      	lsls	r3, r3, #5
 80237b6:	b29b      	uxth	r3, r3
 80237b8:	f403 63fc 	and.w	r3, r3, #2016	@ 0x7e0
 80237bc:	b29b      	uxth	r3, r3
 80237be:	4313      	orrs	r3, r2
 80237c0:	b29a      	uxth	r2, r3
 80237c2:	4b43      	ldr	r3, [pc, #268]	@ (80238d0 <DrawChar+0x2b0>)
 80237c4:	68db      	ldr	r3, [r3, #12]
 80237c6:	4942      	ldr	r1, [pc, #264]	@ (80238d0 <DrawChar+0x2b0>)
 80237c8:	015b      	lsls	r3, r3, #5
 80237ca:	440b      	add	r3, r1
 80237cc:	3304      	adds	r3, #4
 80237ce:	681b      	ldr	r3, [r3, #0]
 80237d0:	0cdb      	lsrs	r3, r3, #19
 80237d2:	b29b      	uxth	r3, r3
 80237d4:	02db      	lsls	r3, r3, #11
 80237d6:	b29b      	uxth	r3, r3
 80237d8:	4313      	orrs	r3, r2
 80237da:	b29a      	uxth	r2, r3
 80237dc:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80237e0:	005b      	lsls	r3, r3, #1
 80237e2:	33c0      	adds	r3, #192	@ 0xc0
 80237e4:	443b      	add	r3, r7
 80237e6:	f823 2c4c 	strh.w	r2, [r3, #-76]
      for (j = 0; j < width; j++)
 80237ea:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80237ee:	3301      	adds	r3, #1
 80237f0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80237f4:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80237f8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80237fc:	429a      	cmp	r2, r3
 80237fe:	d384      	bcc.n	802370a <DrawChar+0xea>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&rgb565[0], width, 1);
 8023800:	68b9      	ldr	r1, [r7, #8]
 8023802:	1c4b      	adds	r3, r1, #1
 8023804:	60bb      	str	r3, [r7, #8]
 8023806:	f107 0274 	add.w	r2, r7, #116	@ 0x74
 802380a:	2301      	movs	r3, #1
 802380c:	9300      	str	r3, [sp, #0]
 802380e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023812:	68f8      	ldr	r0, [r7, #12]
 8023814:	f7fe ff6c 	bl	80226f0 <UTIL_LCD_FillRGBRect>
 8023818:	e048      	b.n	80238ac <DrawChar+0x28c>
    }
    else
    {
      for (j = 0; j < width; j++)
 802381a:	2300      	movs	r3, #0
 802381c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8023820:	e032      	b.n	8023888 <DrawChar+0x268>
      {
        if(line & (1 << (width- j + offset- 1)))
 8023822:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8023826:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 802382a:	1ad2      	subs	r2, r2, r3
 802382c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8023830:	4413      	add	r3, r2
 8023832:	3b01      	subs	r3, #1
 8023834:	2201      	movs	r2, #1
 8023836:	fa02 f303 	lsl.w	r3, r2, r3
 802383a:	461a      	mov	r2, r3
 802383c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8023840:	4013      	ands	r3, r2
 8023842:	2b00      	cmp	r3, #0
 8023844:	d00d      	beq.n	8023862 <DrawChar+0x242>
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].TextColor;
 8023846:	4b22      	ldr	r3, [pc, #136]	@ (80238d0 <DrawChar+0x2b0>)
 8023848:	68db      	ldr	r3, [r3, #12]
 802384a:	4a21      	ldr	r2, [pc, #132]	@ (80238d0 <DrawChar+0x2b0>)
 802384c:	015b      	lsls	r3, r3, #5
 802384e:	4413      	add	r3, r2
 8023850:	681a      	ldr	r2, [r3, #0]
 8023852:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023856:	009b      	lsls	r3, r3, #2
 8023858:	33c0      	adds	r3, #192	@ 0xc0
 802385a:	443b      	add	r3, r7
 802385c:	f843 2cac 	str.w	r2, [r3, #-172]
 8023860:	e00d      	b.n	802387e <DrawChar+0x25e>
        }
        else
        {
          argb8888[j] = DrawProp[DrawProp->LcdLayer].BackColor;
 8023862:	4b1b      	ldr	r3, [pc, #108]	@ (80238d0 <DrawChar+0x2b0>)
 8023864:	68db      	ldr	r3, [r3, #12]
 8023866:	4a1a      	ldr	r2, [pc, #104]	@ (80238d0 <DrawChar+0x2b0>)
 8023868:	015b      	lsls	r3, r3, #5
 802386a:	4413      	add	r3, r2
 802386c:	3304      	adds	r3, #4
 802386e:	681a      	ldr	r2, [r3, #0]
 8023870:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023874:	009b      	lsls	r3, r3, #2
 8023876:	33c0      	adds	r3, #192	@ 0xc0
 8023878:	443b      	add	r3, r7
 802387a:	f843 2cac 	str.w	r2, [r3, #-172]
      for (j = 0; j < width; j++)
 802387e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8023882:	3301      	adds	r3, #1
 8023884:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8023888:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 802388c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8023890:	429a      	cmp	r2, r3
 8023892:	d3c6      	bcc.n	8023822 <DrawChar+0x202>
        }
      }
      UTIL_LCD_FillRGBRect(Xpos,  Ypos++, (uint8_t*)&argb8888[0], width, 1);
 8023894:	68b9      	ldr	r1, [r7, #8]
 8023896:	1c4b      	adds	r3, r1, #1
 8023898:	60bb      	str	r3, [r7, #8]
 802389a:	f107 0214 	add.w	r2, r7, #20
 802389e:	2301      	movs	r3, #1
 80238a0:	9300      	str	r3, [sp, #0]
 80238a2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80238a6:	68f8      	ldr	r0, [r7, #12]
 80238a8:	f7fe ff22 	bl	80226f0 <UTIL_LCD_FillRGBRect>
  for(i = 0; i < height; i++)
 80238ac:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 80238b0:	3301      	adds	r3, #1
 80238b2:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 80238b6:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 80238ba:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 80238be:	429a      	cmp	r2, r3
 80238c0:	f4ff aedc 	bcc.w	802367c <DrawChar+0x5c>
    }
  }
}
 80238c4:	bf00      	nop
 80238c6:	bf00      	nop
 80238c8:	37c0      	adds	r7, #192	@ 0xc0
 80238ca:	46bd      	mov	sp, r7
 80238cc:	bd80      	pop	{r7, pc}
 80238ce:	bf00      	nop
 80238d0:	240089f8 	.word	0x240089f8

080238d4 <FillTriangle>:
  * @brief  Fills a triangle (between 3 points).
  * @param  Positions  pointer to riangle coordinates
  * @param  Color      Draw color
  */
static void FillTriangle(Triangle_Positions_t *Positions, uint32_t Color)
{
 80238d4:	b590      	push	{r4, r7, lr}
 80238d6:	b08f      	sub	sp, #60	@ 0x3c
 80238d8:	af02      	add	r7, sp, #8
 80238da:	6078      	str	r0, [r7, #4]
 80238dc:	6039      	str	r1, [r7, #0]
  int16_t deltax = 0, deltay = 0, x = 0, y = 0, xinc1 = 0, xinc2 = 0,
 80238de:	2300      	movs	r3, #0
 80238e0:	833b      	strh	r3, [r7, #24]
 80238e2:	2300      	movs	r3, #0
 80238e4:	82fb      	strh	r3, [r7, #22]
 80238e6:	2300      	movs	r3, #0
 80238e8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80238ea:	2300      	movs	r3, #0
 80238ec:	85bb      	strh	r3, [r7, #44]	@ 0x2c
 80238ee:	2300      	movs	r3, #0
 80238f0:	857b      	strh	r3, [r7, #42]	@ 0x2a
 80238f2:	2300      	movs	r3, #0
 80238f4:	853b      	strh	r3, [r7, #40]	@ 0x28
  yinc1 = 0, yinc2 = 0, den = 0, num = 0, numadd = 0, numpixels = 0,
 80238f6:	2300      	movs	r3, #0
 80238f8:	84fb      	strh	r3, [r7, #38]	@ 0x26
 80238fa:	2300      	movs	r3, #0
 80238fc:	84bb      	strh	r3, [r7, #36]	@ 0x24
 80238fe:	2300      	movs	r3, #0
 8023900:	847b      	strh	r3, [r7, #34]	@ 0x22
 8023902:	2300      	movs	r3, #0
 8023904:	843b      	strh	r3, [r7, #32]
 8023906:	2300      	movs	r3, #0
 8023908:	83fb      	strh	r3, [r7, #30]
 802390a:	2300      	movs	r3, #0
 802390c:	83bb      	strh	r3, [r7, #28]
  curpixel = 0;
 802390e:	2300      	movs	r3, #0
 8023910:	837b      	strh	r3, [r7, #26]
  int32_t x_diff, y_diff;

  x_diff = Positions->x2 - Positions->x1;
 8023912:	687b      	ldr	r3, [r7, #4]
 8023914:	689a      	ldr	r2, [r3, #8]
 8023916:	687b      	ldr	r3, [r7, #4]
 8023918:	681b      	ldr	r3, [r3, #0]
 802391a:	1ad3      	subs	r3, r2, r3
 802391c:	613b      	str	r3, [r7, #16]
  y_diff = Positions->y2 - Positions->y1;
 802391e:	687b      	ldr	r3, [r7, #4]
 8023920:	68da      	ldr	r2, [r3, #12]
 8023922:	687b      	ldr	r3, [r7, #4]
 8023924:	685b      	ldr	r3, [r3, #4]
 8023926:	1ad3      	subs	r3, r2, r3
 8023928:	60fb      	str	r3, [r7, #12]

  deltax = ABS(x_diff);         /* The absolute difference between the x's */
 802392a:	693b      	ldr	r3, [r7, #16]
 802392c:	2b00      	cmp	r3, #0
 802392e:	bfb8      	it	lt
 8023930:	425b      	neglt	r3, r3
 8023932:	833b      	strh	r3, [r7, #24]
  deltay = ABS(y_diff);         /* The absolute difference between the y's */
 8023934:	68fb      	ldr	r3, [r7, #12]
 8023936:	2b00      	cmp	r3, #0
 8023938:	bfb8      	it	lt
 802393a:	425b      	neglt	r3, r3
 802393c:	82fb      	strh	r3, [r7, #22]
  x = Positions->x1;                       /* Start x off at the first pixel */
 802393e:	687b      	ldr	r3, [r7, #4]
 8023940:	681b      	ldr	r3, [r3, #0]
 8023942:	85fb      	strh	r3, [r7, #46]	@ 0x2e
  y = Positions->y1;                       /* Start y off at the first pixel */
 8023944:	687b      	ldr	r3, [r7, #4]
 8023946:	685b      	ldr	r3, [r3, #4]
 8023948:	85bb      	strh	r3, [r7, #44]	@ 0x2c

  if (Positions->x2 >= Positions->x1)                 /* The x-values are increasing */
 802394a:	687b      	ldr	r3, [r7, #4]
 802394c:	689a      	ldr	r2, [r3, #8]
 802394e:	687b      	ldr	r3, [r7, #4]
 8023950:	681b      	ldr	r3, [r3, #0]
 8023952:	429a      	cmp	r2, r3
 8023954:	d304      	bcc.n	8023960 <FillTriangle+0x8c>
  {
    xinc1 = 1;
 8023956:	2301      	movs	r3, #1
 8023958:	857b      	strh	r3, [r7, #42]	@ 0x2a
    xinc2 = 1;
 802395a:	2301      	movs	r3, #1
 802395c:	853b      	strh	r3, [r7, #40]	@ 0x28
 802395e:	e005      	b.n	802396c <FillTriangle+0x98>
  }
  else                          /* The x-values are decreasing */
  {
    xinc1 = -1;
 8023960:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023964:	857b      	strh	r3, [r7, #42]	@ 0x2a
    xinc2 = -1;
 8023966:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802396a:	853b      	strh	r3, [r7, #40]	@ 0x28
  }

  if (Positions->y2 >= Positions->y1)                 /* The y-values are increasing */
 802396c:	687b      	ldr	r3, [r7, #4]
 802396e:	68da      	ldr	r2, [r3, #12]
 8023970:	687b      	ldr	r3, [r7, #4]
 8023972:	685b      	ldr	r3, [r3, #4]
 8023974:	429a      	cmp	r2, r3
 8023976:	d304      	bcc.n	8023982 <FillTriangle+0xae>
  {
    yinc1 = 1;
 8023978:	2301      	movs	r3, #1
 802397a:	84fb      	strh	r3, [r7, #38]	@ 0x26
    yinc2 = 1;
 802397c:	2301      	movs	r3, #1
 802397e:	84bb      	strh	r3, [r7, #36]	@ 0x24
 8023980:	e005      	b.n	802398e <FillTriangle+0xba>
  }
  else                          /* The y-values are decreasing */
  {
    yinc1 = -1;
 8023982:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8023986:	84fb      	strh	r3, [r7, #38]	@ 0x26
    yinc2 = -1;
 8023988:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 802398c:	84bb      	strh	r3, [r7, #36]	@ 0x24
  }

  if (deltax >= deltay)         /* There is at least one x-value for every y-value */
 802398e:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8023992:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8023996:	429a      	cmp	r2, r3
 8023998:	db11      	blt.n	80239be <FillTriangle+0xea>
  {
    xinc1 = 0;                  /* Don't change the x when numerator >= denominator */
 802399a:	2300      	movs	r3, #0
 802399c:	857b      	strh	r3, [r7, #42]	@ 0x2a
    yinc2 = 0;                  /* Don't change the y for every iteration */
 802399e:	2300      	movs	r3, #0
 80239a0:	84bb      	strh	r3, [r7, #36]	@ 0x24
    den = deltax;
 80239a2:	8b3b      	ldrh	r3, [r7, #24]
 80239a4:	847b      	strh	r3, [r7, #34]	@ 0x22
    num = deltax / 2;
 80239a6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80239aa:	2b00      	cmp	r3, #0
 80239ac:	da00      	bge.n	80239b0 <FillTriangle+0xdc>
 80239ae:	3301      	adds	r3, #1
 80239b0:	105b      	asrs	r3, r3, #1
 80239b2:	843b      	strh	r3, [r7, #32]
    numadd = deltay;
 80239b4:	8afb      	ldrh	r3, [r7, #22]
 80239b6:	83fb      	strh	r3, [r7, #30]
    numpixels = deltax;         /* There are more x-values than y-values */
 80239b8:	8b3b      	ldrh	r3, [r7, #24]
 80239ba:	83bb      	strh	r3, [r7, #28]
 80239bc:	e010      	b.n	80239e0 <FillTriangle+0x10c>
  }
  else                          /* There is at least one y-value for every x-value */
  {
    xinc2 = 0;                  /* Don't change the x for every iteration */
 80239be:	2300      	movs	r3, #0
 80239c0:	853b      	strh	r3, [r7, #40]	@ 0x28
    yinc1 = 0;                  /* Don't change the y when numerator >= denominator */
 80239c2:	2300      	movs	r3, #0
 80239c4:	84fb      	strh	r3, [r7, #38]	@ 0x26
    den = deltay;
 80239c6:	8afb      	ldrh	r3, [r7, #22]
 80239c8:	847b      	strh	r3, [r7, #34]	@ 0x22
    num = deltay / 2;
 80239ca:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80239ce:	2b00      	cmp	r3, #0
 80239d0:	da00      	bge.n	80239d4 <FillTriangle+0x100>
 80239d2:	3301      	adds	r3, #1
 80239d4:	105b      	asrs	r3, r3, #1
 80239d6:	843b      	strh	r3, [r7, #32]
    numadd = deltax;
 80239d8:	8b3b      	ldrh	r3, [r7, #24]
 80239da:	83fb      	strh	r3, [r7, #30]
    numpixels = deltay;         /* There are more y-values than x-values */
 80239dc:	8afb      	ldrh	r3, [r7, #22]
 80239de:	83bb      	strh	r3, [r7, #28]
  }

  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 80239e0:	2300      	movs	r3, #0
 80239e2:	837b      	strh	r3, [r7, #26]
 80239e4:	e036      	b.n	8023a54 <FillTriangle+0x180>
  {
    UTIL_LCD_DrawLine(x, y, Positions->x3, Positions->y3, Color);
 80239e6:	f9b7 002e 	ldrsh.w	r0, [r7, #46]	@ 0x2e
 80239ea:	f9b7 102c 	ldrsh.w	r1, [r7, #44]	@ 0x2c
 80239ee:	687b      	ldr	r3, [r7, #4]
 80239f0:	691a      	ldr	r2, [r3, #16]
 80239f2:	687b      	ldr	r3, [r7, #4]
 80239f4:	695c      	ldr	r4, [r3, #20]
 80239f6:	683b      	ldr	r3, [r7, #0]
 80239f8:	9300      	str	r3, [sp, #0]
 80239fa:	4623      	mov	r3, r4
 80239fc:	f7ff f82e 	bl	8022a5c <UTIL_LCD_DrawLine>

    num += numadd;              /* Increase the numerator by the top of the fraction */
 8023a00:	8c3a      	ldrh	r2, [r7, #32]
 8023a02:	8bfb      	ldrh	r3, [r7, #30]
 8023a04:	4413      	add	r3, r2
 8023a06:	b29b      	uxth	r3, r3
 8023a08:	843b      	strh	r3, [r7, #32]
    if (num >= den)             /* Check if numerator >= denominator */
 8023a0a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8023a0e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 8023a12:	429a      	cmp	r2, r3
 8023a14:	db0e      	blt.n	8023a34 <FillTriangle+0x160>
    {
      num -= den;               /* Calculate the new numerator value */
 8023a16:	8c3a      	ldrh	r2, [r7, #32]
 8023a18:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8023a1a:	1ad3      	subs	r3, r2, r3
 8023a1c:	b29b      	uxth	r3, r3
 8023a1e:	843b      	strh	r3, [r7, #32]
      x += xinc1;               /* Change the x as appropriate */
 8023a20:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8023a22:	8d7b      	ldrh	r3, [r7, #42]	@ 0x2a
 8023a24:	4413      	add	r3, r2
 8023a26:	b29b      	uxth	r3, r3
 8023a28:	85fb      	strh	r3, [r7, #46]	@ 0x2e
      y += yinc1;               /* Change the y as appropriate */
 8023a2a:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8023a2c:	8cfb      	ldrh	r3, [r7, #38]	@ 0x26
 8023a2e:	4413      	add	r3, r2
 8023a30:	b29b      	uxth	r3, r3
 8023a32:	85bb      	strh	r3, [r7, #44]	@ 0x2c
    }
    x += xinc2;                 /* Change the x as appropriate */
 8023a34:	8dfa      	ldrh	r2, [r7, #46]	@ 0x2e
 8023a36:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 8023a38:	4413      	add	r3, r2
 8023a3a:	b29b      	uxth	r3, r3
 8023a3c:	85fb      	strh	r3, [r7, #46]	@ 0x2e
    y += yinc2;                 /* Change the y as appropriate */
 8023a3e:	8dba      	ldrh	r2, [r7, #44]	@ 0x2c
 8023a40:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8023a42:	4413      	add	r3, r2
 8023a44:	b29b      	uxth	r3, r3
 8023a46:	85bb      	strh	r3, [r7, #44]	@ 0x2c
  for (curpixel = 0; curpixel <= numpixels; curpixel++)
 8023a48:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8023a4c:	b29b      	uxth	r3, r3
 8023a4e:	3301      	adds	r3, #1
 8023a50:	b29b      	uxth	r3, r3
 8023a52:	837b      	strh	r3, [r7, #26]
 8023a54:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 8023a58:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 8023a5c:	429a      	cmp	r2, r3
 8023a5e:	ddc2      	ble.n	80239e6 <FillTriangle+0x112>
  }
}
 8023a60:	bf00      	nop
 8023a62:	bf00      	nop
 8023a64:	3734      	adds	r7, #52	@ 0x34
 8023a66:	46bd      	mov	sp, r7
 8023a68:	bd90      	pop	{r4, r7, pc}
	...

08023a6c <D16_GENERIC>:
 8023a6c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023a70:	b087      	sub	sp, #28
 8023a72:	6993      	ldr	r3, [r2, #24]
 8023a74:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8023a76:	9101      	str	r1, [sp, #4]
 8023a78:	68d1      	ldr	r1, [r2, #12]
 8023a7a:	9304      	str	r3, [sp, #16]
 8023a7c:	9105      	str	r1, [sp, #20]
 8023a7e:	6914      	ldr	r4, [r2, #16]
 8023a80:	f8d2 a014 	ldr.w	sl, [r2, #20]
 8023a84:	69d3      	ldr	r3, [r2, #28]
 8023a86:	f8d2 e008 	ldr.w	lr, [r2, #8]
 8023a8a:	f8d2 8030 	ldr.w	r8, [r2, #48]	@ 0x30
 8023a8e:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8023a90:	2d00      	cmp	r5, #0
 8023a92:	d05e      	beq.n	8023b52 <D16_GENERIC+0xe6>
 8023a94:	f001 0510 	and.w	r5, r1, #16
 8023a98:	f001 0120 	and.w	r1, r1, #32
 8023a9c:	f8df c0d8 	ldr.w	ip, [pc, #216]	@ 8023b78 <D16_GENERIC+0x10c>
 8023aa0:	46c1      	mov	r9, r8
 8023aa2:	9103      	str	r1, [sp, #12]
 8023aa4:	2100      	movs	r1, #0
 8023aa6:	9502      	str	r5, [sp, #8]
 8023aa8:	e048      	b.n	8023b3c <D16_GENERIC+0xd0>
 8023aaa:	5d87      	ldrb	r7, [r0, r6]
 8023aac:	7805      	ldrb	r5, [r0, #0]
 8023aae:	eb00 0046 	add.w	r0, r0, r6, lsl #1
 8023ab2:	eb05 2707 	add.w	r7, r5, r7, lsl #8
 8023ab6:	b2fe      	uxtb	r6, r7
 8023ab8:	f3c7 2707 	ubfx	r7, r7, #8, #8
 8023abc:	f85c 5026 	ldr.w	r5, [ip, r6, lsl #2]
 8023ac0:	f85c 6027 	ldr.w	r6, [ip, r7, lsl #2]
 8023ac4:	441d      	add	r5, r3
 8023ac6:	eb06 2395 	add.w	r3, r6, r5, lsr #10
 8023aca:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8023ace:	f3c3 0609 	ubfx	r6, r3, #0, #10
 8023ad2:	0a9b      	lsrs	r3, r3, #10
 8023ad4:	ea46 4605 	orr.w	r6, r6, r5, lsl #16
 8023ad8:	4d25      	ldr	r5, [pc, #148]	@ (8023b70 <D16_GENERIC+0x104>)
 8023ada:	fb26 e505 	smlad	r5, r6, r5, lr
 8023ade:	4f25      	ldr	r7, [pc, #148]	@ (8023b74 <D16_GENERIC+0x108>)
 8023ae0:	fb26 fe07 	smuad	lr, r6, r7
 8023ae4:	9e02      	ldr	r6, [sp, #8]
 8023ae6:	f101 0801 	add.w	r8, r1, #1
 8023aea:	f5a5 6500 	sub.w	r5, r5, #2048	@ 0x800
 8023aee:	b186      	cbz	r6, 8023b12 <D16_GENERIC+0xa6>
 8023af0:	442c      	add	r4, r5
 8023af2:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8023af6:	eba4 040a 	sub.w	r4, r4, sl
 8023afa:	46aa      	mov	sl, r5
 8023afc:	17e7      	asrs	r7, r4, #31
 8023afe:	fba4 450b 	umull	r4, r5, r4, fp
 8023b02:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8023b06:	fb0b 5507 	mla	r5, fp, r7, r5
 8023b0a:	f145 0500 	adc.w	r5, r5, #0
 8023b0e:	006c      	lsls	r4, r5, #1
 8023b10:	4625      	mov	r5, r4
 8023b12:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8023b16:	042d      	lsls	r5, r5, #16
 8023b18:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8023b1c:	2700      	movs	r7, #0
 8023b1e:	fb01 fb0b 	mul.w	fp, r1, fp
 8023b22:	fa1f f188 	uxth.w	r1, r8
 8023b26:	fbc9 6705 	smlal	r6, r7, r9, r5
 8023b2a:	9e01      	ldr	r6, [sp, #4]
 8023b2c:	10bd      	asrs	r5, r7, #2
 8023b2e:	f305 050f 	ssat	r5, #16, r5
 8023b32:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8023b36:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8023b38:	428d      	cmp	r5, r1
 8023b3a:	d90a      	bls.n	8023b52 <D16_GENERIC+0xe6>
 8023b3c:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8023b3e:	2d01      	cmp	r5, #1
 8023b40:	b2ee      	uxtb	r6, r5
 8023b42:	d1b2      	bne.n	8023aaa <D16_GENERIC+0x3e>
 8023b44:	9d03      	ldr	r5, [sp, #12]
 8023b46:	f850 7b02 	ldr.w	r7, [r0], #2
 8023b4a:	2d00      	cmp	r5, #0
 8023b4c:	d0b3      	beq.n	8023ab6 <D16_GENERIC+0x4a>
 8023b4e:	ba7f      	rev16	r7, r7
 8023b50:	e7b1      	b.n	8023ab6 <D16_GENERIC+0x4a>
 8023b52:	2000      	movs	r0, #0
 8023b54:	9905      	ldr	r1, [sp, #20]
 8023b56:	61d3      	str	r3, [r2, #28]
 8023b58:	9b04      	ldr	r3, [sp, #16]
 8023b5a:	f8c2 e008 	str.w	lr, [r2, #8]
 8023b5e:	60d1      	str	r1, [r2, #12]
 8023b60:	6114      	str	r4, [r2, #16]
 8023b62:	f8c2 a014 	str.w	sl, [r2, #20]
 8023b66:	6193      	str	r3, [r2, #24]
 8023b68:	b007      	add	sp, #28
 8023b6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023b6e:	bf00      	nop
 8023b70:	00030001 	.word	0x00030001
 8023b74:	00010003 	.word	0x00010003
 8023b78:	24000000 	.word	0x24000000

08023b7c <D24_GENERIC>:
 8023b7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023b80:	6953      	ldr	r3, [r2, #20]
 8023b82:	b087      	sub	sp, #28
 8023b84:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8023b86:	9301      	str	r3, [sp, #4]
 8023b88:	6993      	ldr	r3, [r2, #24]
 8023b8a:	9102      	str	r1, [sp, #8]
 8023b8c:	9305      	str	r3, [sp, #20]
 8023b8e:	6914      	ldr	r4, [r2, #16]
 8023b90:	69d1      	ldr	r1, [r2, #28]
 8023b92:	6893      	ldr	r3, [r2, #8]
 8023b94:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8023b98:	f8d2 a030 	ldr.w	sl, [r2, #48]	@ 0x30
 8023b9c:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8023b9e:	2e00      	cmp	r6, #0
 8023ba0:	f000 808c 	beq.w	8023cbc <D24_GENERIC+0x140>
 8023ba4:	f005 0610 	and.w	r6, r5, #16
 8023ba8:	f005 0520 	and.w	r5, r5, #32
 8023bac:	f04f 0e00 	mov.w	lr, #0
 8023bb0:	f8df c140 	ldr.w	ip, [pc, #320]	@ 8023cf4 <D24_GENERIC+0x178>
 8023bb4:	9603      	str	r6, [sp, #12]
 8023bb6:	9504      	str	r5, [sp, #16]
 8023bb8:	e061      	b.n	8023c7e <D24_GENERIC+0x102>
 8023bba:	f810 5016 	ldrb.w	r5, [r0, r6, lsl #1]
 8023bbe:	eb00 0646 	add.w	r6, r0, r6, lsl #1
 8023bc2:	f810 b007 	ldrb.w	fp, [r0, r7]
 8023bc6:	042d      	lsls	r5, r5, #16
 8023bc8:	f890 9000 	ldrb.w	r9, [r0]
 8023bcc:	19f0      	adds	r0, r6, r7
 8023bce:	eb05 250b 	add.w	r5, r5, fp, lsl #8
 8023bd2:	44a9      	add	r9, r5
 8023bd4:	fa5f f689 	uxtb.w	r6, r9
 8023bd8:	f3c9 2707 	ubfx	r7, r9, #8, #8
 8023bdc:	ea4f 4919 	mov.w	r9, r9, lsr #16
 8023be0:	f85c 6026 	ldr.w	r6, [ip, r6, lsl #2]
 8023be4:	f85c 7027 	ldr.w	r7, [ip, r7, lsl #2]
 8023be8:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8023bec:	f85c 1029 	ldr.w	r1, [ip, r9, lsl #2]
 8023bf0:	eb07 2796 	add.w	r7, r7, r6, lsr #10
 8023bf4:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8023bf8:	f3c7 0509 	ubfx	r5, r7, #0, #10
 8023bfc:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8023c00:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8023c04:	4d39      	ldr	r5, [pc, #228]	@ (8023cec <D24_GENERIC+0x170>)
 8023c06:	fb26 8705 	smlad	r7, r6, r5, r8
 8023c0a:	4d39      	ldr	r5, [pc, #228]	@ (8023cf0 <D24_GENERIC+0x174>)
 8023c0c:	fb26 3805 	smlad	r8, r6, r5, r3
 8023c10:	f3c1 0309 	ubfx	r3, r1, #0, #10
 8023c14:	eb03 0b43 	add.w	fp, r3, r3, lsl #1
 8023c18:	2301      	movs	r3, #1
 8023c1a:	eb08 084b 	add.w	r8, r8, fp, lsl #1
 8023c1e:	fb26 f603 	smuad	r6, r6, r3
 8023c22:	eb0e 0903 	add.w	r9, lr, r3
 8023c26:	eb0b 0306 	add.w	r3, fp, r6
 8023c2a:	9e03      	ldr	r6, [sp, #12]
 8023c2c:	f5a7 55d8 	sub.w	r5, r7, #6912	@ 0x1b00
 8023c30:	b186      	cbz	r6, 8023c54 <D24_GENERIC+0xd8>
 8023c32:	442c      	add	r4, r5
 8023c34:	9e01      	ldr	r6, [sp, #4]
 8023c36:	f8d2 b020 	ldr.w	fp, [r2, #32]
 8023c3a:	1ba4      	subs	r4, r4, r6
 8023c3c:	9501      	str	r5, [sp, #4]
 8023c3e:	17e7      	asrs	r7, r4, #31
 8023c40:	fba4 450b 	umull	r4, r5, r4, fp
 8023c44:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8023c48:	fb0b 5507 	mla	r5, fp, r7, r5
 8023c4c:	f145 0500 	adc.w	r5, r5, #0
 8023c50:	006c      	lsls	r4, r5, #1
 8023c52:	4625      	mov	r5, r4
 8023c54:	f8b2 b028 	ldrh.w	fp, [r2, #40]	@ 0x28
 8023c58:	03ad      	lsls	r5, r5, #14
 8023c5a:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8023c5e:	2700      	movs	r7, #0
 8023c60:	fb0e fb0b 	mul.w	fp, lr, fp
 8023c64:	fa1f fe89 	uxth.w	lr, r9
 8023c68:	fbca 6705 	smlal	r6, r7, sl, r5
 8023c6c:	9e02      	ldr	r6, [sp, #8]
 8023c6e:	10bd      	asrs	r5, r7, #2
 8023c70:	f305 050f 	ssat	r5, #16, r5
 8023c74:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8023c78:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8023c7a:	4575      	cmp	r5, lr
 8023c7c:	d91e      	bls.n	8023cbc <D24_GENERIC+0x140>
 8023c7e:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8023c80:	b2ef      	uxtb	r7, r5
 8023c82:	2d01      	cmp	r5, #1
 8023c84:	b23e      	sxth	r6, r7
 8023c86:	d198      	bne.n	8023bba <D24_GENERIC+0x3e>
 8023c88:	9d04      	ldr	r5, [sp, #16]
 8023c8a:	b16d      	cbz	r5, 8023ca8 <D24_GENERIC+0x12c>
 8023c8c:	f01e 0f01 	tst.w	lr, #1
 8023c90:	d121      	bne.n	8023cd6 <D24_GENERIC+0x15a>
 8023c92:	7805      	ldrb	r5, [r0, #0]
 8023c94:	3002      	adds	r0, #2
 8023c96:	f890 9001 	ldrb.w	r9, [r0, #1]
 8023c9a:	022d      	lsls	r5, r5, #8
 8023c9c:	f810 6c01 	ldrb.w	r6, [r0, #-1]
 8023ca0:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 8023ca4:	44b1      	add	r9, r6
 8023ca6:	e795      	b.n	8023bd4 <D24_GENERIC+0x58>
 8023ca8:	7846      	ldrb	r6, [r0, #1]
 8023caa:	f890 9002 	ldrb.w	r9, [r0, #2]
 8023cae:	0236      	lsls	r6, r6, #8
 8023cb0:	f810 5b03 	ldrb.w	r5, [r0], #3
 8023cb4:	eb06 4909 	add.w	r9, r6, r9, lsl #16
 8023cb8:	44a9      	add	r9, r5
 8023cba:	e78b      	b.n	8023bd4 <D24_GENERIC+0x58>
 8023cbc:	6093      	str	r3, [r2, #8]
 8023cbe:	2000      	movs	r0, #0
 8023cc0:	9b01      	ldr	r3, [sp, #4]
 8023cc2:	f8c2 800c 	str.w	r8, [r2, #12]
 8023cc6:	6153      	str	r3, [r2, #20]
 8023cc8:	9b05      	ldr	r3, [sp, #20]
 8023cca:	61d1      	str	r1, [r2, #28]
 8023ccc:	6114      	str	r4, [r2, #16]
 8023cce:	6193      	str	r3, [r2, #24]
 8023cd0:	b007      	add	sp, #28
 8023cd2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023cd6:	78c5      	ldrb	r5, [r0, #3]
 8023cd8:	f890 9002 	ldrb.w	r9, [r0, #2]
 8023cdc:	022d      	lsls	r5, r5, #8
 8023cde:	f810 6b04 	ldrb.w	r6, [r0], #4
 8023ce2:	eb05 4909 	add.w	r9, r5, r9, lsl #16
 8023ce6:	44b1      	add	r9, r6
 8023ce8:	e774      	b.n	8023bd4 <D24_GENERIC+0x58>
 8023cea:	bf00      	nop
 8023cec:	00030001 	.word	0x00030001
 8023cf0:	00060007 	.word	0x00060007
 8023cf4:	24000000 	.word	0x24000000

08023cf8 <D32_GENERIC>:
 8023cf8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023cfc:	6953      	ldr	r3, [r2, #20]
 8023cfe:	b087      	sub	sp, #28
 8023d00:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8023d02:	9300      	str	r3, [sp, #0]
 8023d04:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8023d06:	6993      	ldr	r3, [r2, #24]
 8023d08:	9102      	str	r1, [sp, #8]
 8023d0a:	9305      	str	r3, [sp, #20]
 8023d0c:	9501      	str	r5, [sp, #4]
 8023d0e:	6914      	ldr	r4, [r2, #16]
 8023d10:	69d1      	ldr	r1, [r2, #28]
 8023d12:	6893      	ldr	r3, [r2, #8]
 8023d14:	f8d2 800c 	ldr.w	r8, [r2, #12]
 8023d18:	6b55      	ldr	r5, [r2, #52]	@ 0x34
 8023d1a:	2e00      	cmp	r6, #0
 8023d1c:	f000 8098 	beq.w	8023e50 <D32_GENERIC+0x158>
 8023d20:	f005 0610 	and.w	r6, r5, #16
 8023d24:	f005 0520 	and.w	r5, r5, #32
 8023d28:	f04f 0c00 	mov.w	ip, #0
 8023d2c:	f8df e14c 	ldr.w	lr, [pc, #332]	@ 8023e7c <D32_GENERIC+0x184>
 8023d30:	9603      	str	r6, [sp, #12]
 8023d32:	9504      	str	r5, [sp, #16]
 8023d34:	e078      	b.n	8023e28 <D32_GENERIC+0x130>
 8023d36:	eb00 0905 	add.w	r9, r0, r5
 8023d3a:	f810 b005 	ldrb.w	fp, [r0, r5]
 8023d3e:	f810 a006 	ldrb.w	sl, [r0, r6]
 8023d42:	f819 5007 	ldrb.w	r5, [r9, r7]
 8023d46:	444f      	add	r7, r9
 8023d48:	f890 9000 	ldrb.w	r9, [r0]
 8023d4c:	042d      	lsls	r5, r5, #16
 8023d4e:	eb07 0046 	add.w	r0, r7, r6, lsl #1
 8023d52:	eb05 650b 	add.w	r5, r5, fp, lsl #24
 8023d56:	eb05 250a 	add.w	r5, r5, sl, lsl #8
 8023d5a:	44a9      	add	r9, r5
 8023d5c:	fa5f f789 	uxtb.w	r7, r9
 8023d60:	f3c9 2507 	ubfx	r5, r9, #8, #8
 8023d64:	f3c9 4607 	ubfx	r6, r9, #16, #8
 8023d68:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8023d6c:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 8023d70:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8023d74:	eb07 2191 	add.w	r1, r7, r1, lsr #10
 8023d78:	f85e 6026 	ldr.w	r6, [lr, r6, lsl #2]
 8023d7c:	f85e 7029 	ldr.w	r7, [lr, r9, lsl #2]
 8023d80:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 8023d84:	f3c1 0909 	ubfx	r9, r1, #0, #10
 8023d88:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8023d8c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8023d90:	eb07 2196 	add.w	r1, r7, r6, lsr #10
 8023d94:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8023d98:	ea45 4909 	orr.w	r9, r5, r9, lsl #16
 8023d9c:	f3c1 0509 	ubfx	r5, r1, #0, #10
 8023da0:	ea45 4606 	orr.w	r6, r5, r6, lsl #16
 8023da4:	4d31      	ldr	r5, [pc, #196]	@ (8023e6c <D32_GENERIC+0x174>)
 8023da6:	fb29 8805 	smlad	r8, r9, r5, r8
 8023daa:	f44f 3580 	mov.w	r5, #65536	@ 0x10000
 8023dae:	fb26 8705 	smlad	r7, r6, r5, r8
 8023db2:	4d2f      	ldr	r5, [pc, #188]	@ (8023e70 <D32_GENERIC+0x178>)
 8023db4:	fb29 3305 	smlad	r3, r9, r5, r3
 8023db8:	4d2e      	ldr	r5, [pc, #184]	@ (8023e74 <D32_GENERIC+0x17c>)
 8023dba:	fb26 3805 	smlad	r8, r6, r5, r3
 8023dbe:	2301      	movs	r3, #1
 8023dc0:	fb29 f903 	smuad	r9, r9, r3
 8023dc4:	4b2c      	ldr	r3, [pc, #176]	@ (8023e78 <D32_GENERIC+0x180>)
 8023dc6:	fb26 9303 	smlad	r3, r6, r3, r9
 8023dca:	9e03      	ldr	r6, [sp, #12]
 8023dcc:	f10c 0901 	add.w	r9, ip, #1
 8023dd0:	f5a7 4580 	sub.w	r5, r7, #16384	@ 0x4000
 8023dd4:	b186      	cbz	r6, 8023df8 <D32_GENERIC+0x100>
 8023dd6:	442c      	add	r4, r5
 8023dd8:	9e00      	ldr	r6, [sp, #0]
 8023dda:	f8d2 a020 	ldr.w	sl, [r2, #32]
 8023dde:	1ba4      	subs	r4, r4, r6
 8023de0:	9500      	str	r5, [sp, #0]
 8023de2:	17e7      	asrs	r7, r4, #31
 8023de4:	fba4 450a 	umull	r4, r5, r4, sl
 8023de8:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8023dec:	fb0a 5507 	mla	r5, sl, r7, r5
 8023df0:	f145 0500 	adc.w	r5, r5, #0
 8023df4:	006c      	lsls	r4, r5, #1
 8023df6:	4625      	mov	r5, r4
 8023df8:	f8b2 a028 	ldrh.w	sl, [r2, #40]	@ 0x28
 8023dfc:	036d      	lsls	r5, r5, #13
 8023dfe:	9f01      	ldr	r7, [sp, #4]
 8023e00:	fb0c fb0a 	mul.w	fp, ip, sl
 8023e04:	fa1f fc89 	uxth.w	ip, r9
 8023e08:	f04f 0a00 	mov.w	sl, #0
 8023e0c:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8023e10:	9e02      	ldr	r6, [sp, #8]
 8023e12:	fbc7 9a05 	smlal	r9, sl, r7, r5
 8023e16:	4657      	mov	r7, sl
 8023e18:	10bd      	asrs	r5, r7, #2
 8023e1a:	f305 050f 	ssat	r5, #16, r5
 8023e1e:	f826 501b 	strh.w	r5, [r6, fp, lsl #1]
 8023e22:	8cd5      	ldrh	r5, [r2, #38]	@ 0x26
 8023e24:	4565      	cmp	r5, ip
 8023e26:	d913      	bls.n	8023e50 <D32_GENERIC+0x158>
 8023e28:	8d55      	ldrh	r5, [r2, #42]	@ 0x2a
 8023e2a:	b2ee      	uxtb	r6, r5
 8023e2c:	2d01      	cmp	r5, #1
 8023e2e:	f1c6 0700 	rsb	r7, r6, #0
 8023e32:	eb06 0546 	add.w	r5, r6, r6, lsl #1
 8023e36:	f47f af7e 	bne.w	8023d36 <D32_GENERIC+0x3e>
 8023e3a:	1d05      	adds	r5, r0, #4
 8023e3c:	f8d0 9000 	ldr.w	r9, [r0]
 8023e40:	9804      	ldr	r0, [sp, #16]
 8023e42:	b118      	cbz	r0, 8023e4c <D32_GENERIC+0x154>
 8023e44:	fa99 f999 	rev16.w	r9, r9
 8023e48:	4628      	mov	r0, r5
 8023e4a:	e787      	b.n	8023d5c <D32_GENERIC+0x64>
 8023e4c:	4628      	mov	r0, r5
 8023e4e:	e785      	b.n	8023d5c <D32_GENERIC+0x64>
 8023e50:	6093      	str	r3, [r2, #8]
 8023e52:	2000      	movs	r0, #0
 8023e54:	9b00      	ldr	r3, [sp, #0]
 8023e56:	f8c2 800c 	str.w	r8, [r2, #12]
 8023e5a:	6153      	str	r3, [r2, #20]
 8023e5c:	9b05      	ldr	r3, [sp, #20]
 8023e5e:	61d1      	str	r1, [r2, #28]
 8023e60:	6114      	str	r4, [r2, #16]
 8023e62:	6193      	str	r3, [r2, #24]
 8023e64:	b007      	add	sp, #28
 8023e66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8023e6a:	bf00      	nop
 8023e6c:	00060003 	.word	0x00060003
 8023e70:	000a000c 	.word	0x000a000c
 8023e74:	000c000a 	.word	0x000c000a
 8023e78:	00030006 	.word	0x00030006
 8023e7c:	24000000 	.word	0x24000000

08023e80 <D48_GENERIC>:
 8023e80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8023e84:	6913      	ldr	r3, [r2, #16]
 8023e86:	b08b      	sub	sp, #44	@ 0x2c
 8023e88:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8023e8a:	9106      	str	r1, [sp, #24]
 8023e8c:	9303      	str	r3, [sp, #12]
 8023e8e:	68d1      	ldr	r1, [r2, #12]
 8023e90:	6953      	ldr	r3, [r2, #20]
 8023e92:	9101      	str	r1, [sp, #4]
 8023e94:	9304      	str	r3, [sp, #16]
 8023e96:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 8023e98:	6993      	ldr	r3, [r2, #24]
 8023e9a:	9105      	str	r1, [sp, #20]
 8023e9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8023e9e:	69d6      	ldr	r6, [r2, #28]
 8023ea0:	6893      	ldr	r3, [r2, #8]
 8023ea2:	6b51      	ldr	r1, [r2, #52]	@ 0x34
 8023ea4:	2c00      	cmp	r4, #0
 8023ea6:	f000 80c6 	beq.w	8024036 <D48_GENERIC+0x1b6>
 8023eaa:	f001 0410 	and.w	r4, r1, #16
 8023eae:	f001 0120 	and.w	r1, r1, #32
 8023eb2:	2700      	movs	r7, #0
 8023eb4:	9302      	str	r3, [sp, #8]
 8023eb6:	9108      	str	r1, [sp, #32]
 8023eb8:	9407      	str	r4, [sp, #28]
 8023eba:	4966      	ldr	r1, [pc, #408]	@ (8024054 <D48_GENERIC+0x1d4>)
 8023ebc:	e0a6      	b.n	802400c <D48_GENERIC+0x18c>
 8023ebe:	eb00 0e08 	add.w	lr, r0, r8
 8023ec2:	f810 a008 	ldrb.w	sl, [r0, r8]
 8023ec6:	f810 9005 	ldrb.w	r9, [r0, r5]
 8023eca:	f81e 400c 	ldrb.w	r4, [lr, ip]
 8023ece:	44e6      	add	lr, ip
 8023ed0:	f890 b000 	ldrb.w	fp, [r0]
 8023ed4:	0420      	lsls	r0, r4, #16
 8023ed6:	eb0e 0408 	add.w	r4, lr, r8
 8023eda:	f81e e008 	ldrb.w	lr, [lr, r8]
 8023ede:	eb00 6a0a 	add.w	sl, r0, sl, lsl #24
 8023ee2:	f814 800c 	ldrb.w	r8, [r4, ip]
 8023ee6:	44a4      	add	ip, r4
 8023ee8:	eb0a 2a09 	add.w	sl, sl, r9, lsl #8
 8023eec:	eb08 2e0e 	add.w	lr, r8, lr, lsl #8
 8023ef0:	eb0a 040b 	add.w	r4, sl, fp
 8023ef4:	eb0c 0045 	add.w	r0, ip, r5, lsl #1
 8023ef8:	fa5f f884 	uxtb.w	r8, r4
 8023efc:	f3c4 2507 	ubfx	r5, r4, #8, #8
 8023f00:	f3c4 4907 	ubfx	r9, r4, #16, #8
 8023f04:	ea4f 6b14 	mov.w	fp, r4, lsr #24
 8023f08:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8023f0c:	fa5f fc8e 	uxtb.w	ip, lr
 8023f10:	f851 5025 	ldr.w	r5, [r1, r5, lsl #2]
 8023f14:	f3ce 2e07 	ubfx	lr, lr, #8, #8
 8023f18:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 8023f1c:	f851 6029 	ldr.w	r6, [r1, r9, lsl #2]
 8023f20:	f851 402b 	ldr.w	r4, [r1, fp, lsl #2]
 8023f24:	eb05 2598 	add.w	r5, r5, r8, lsr #10
 8023f28:	f851 c02c 	ldr.w	ip, [r1, ip, lsl #2]
 8023f2c:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8023f30:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8023f34:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8023f38:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8023f3c:	9b01      	ldr	r3, [sp, #4]
 8023f3e:	eb04 2496 	add.w	r4, r4, r6, lsr #10
 8023f42:	f3c6 0909 	ubfx	r9, r6, #0, #10
 8023f46:	ea45 4808 	orr.w	r8, r5, r8, lsl #16
 8023f4a:	eb0c 2c94 	add.w	ip, ip, r4, lsr #10
 8023f4e:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8023f52:	eb0e 269c 	add.w	r6, lr, ip, lsr #10
 8023f56:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8023f5a:	ea44 4409 	orr.w	r4, r4, r9, lsl #16
 8023f5e:	f3c6 0509 	ubfx	r5, r6, #0, #10
 8023f62:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
 8023f66:	4d3c      	ldr	r5, [pc, #240]	@ (8024058 <D48_GENERIC+0x1d8>)
 8023f68:	fb28 3a05 	smlad	sl, r8, r5, r3
 8023f6c:	4b3b      	ldr	r3, [pc, #236]	@ (802405c <D48_GENERIC+0x1dc>)
 8023f6e:	fb24 aa03 	smlad	sl, r4, r3, sl
 8023f72:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8023f76:	fb2c aa03 	smlad	sl, ip, r3, sl
 8023f7a:	4b39      	ldr	r3, [pc, #228]	@ (8024060 <D48_GENERIC+0x1e0>)
 8023f7c:	9d02      	ldr	r5, [sp, #8]
 8023f7e:	fb28 5303 	smlad	r3, r8, r3, r5
 8023f82:	f04f 151b 	mov.w	r5, #1769499	@ 0x1b001b
 8023f86:	fb24 3305 	smlad	r3, r4, r5, r3
 8023f8a:	4d36      	ldr	r5, [pc, #216]	@ (8024064 <D48_GENERIC+0x1e4>)
 8023f8c:	fb2c 3305 	smlad	r3, ip, r5, r3
 8023f90:	2501      	movs	r5, #1
 8023f92:	9301      	str	r3, [sp, #4]
 8023f94:	fb28 f805 	smuad	r8, r8, r5
 8023f98:	4b33      	ldr	r3, [pc, #204]	@ (8024068 <D48_GENERIC+0x1e8>)
 8023f9a:	fb24 8403 	smlad	r4, r4, r3, r8
 8023f9e:	4b33      	ldr	r3, [pc, #204]	@ (802406c <D48_GENERIC+0x1ec>)
 8023fa0:	fb2c 4303 	smlad	r3, ip, r3, r4
 8023fa4:	9302      	str	r3, [sp, #8]
 8023fa6:	eb07 0e05 	add.w	lr, r7, r5
 8023faa:	9b07      	ldr	r3, [sp, #28]
 8023fac:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 8023fb0:	b1ab      	cbz	r3, 8023fde <D48_GENERIC+0x15e>
 8023fb2:	9b03      	ldr	r3, [sp, #12]
 8023fb4:	f8d2 c020 	ldr.w	ip, [r2, #32]
 8023fb8:	4453      	add	r3, sl
 8023fba:	461c      	mov	r4, r3
 8023fbc:	9b04      	ldr	r3, [sp, #16]
 8023fbe:	f8cd a010 	str.w	sl, [sp, #16]
 8023fc2:	1ae4      	subs	r4, r4, r3
 8023fc4:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8023fc8:	fba4 450c 	umull	r4, r5, r4, ip
 8023fcc:	fb0c 5509 	mla	r5, ip, r9, r5
 8023fd0:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8023fd4:	f145 0500 	adc.w	r5, r5, #0
 8023fd8:	006b      	lsls	r3, r5, #1
 8023fda:	469a      	mov	sl, r3
 8023fdc:	9303      	str	r3, [sp, #12]
 8023fde:	f8b2 c028 	ldrh.w	ip, [r2, #40]	@ 0x28
 8023fe2:	ea4f 2aca 	mov.w	sl, sl, lsl #11
 8023fe6:	9b05      	ldr	r3, [sp, #20]
 8023fe8:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8023fec:	2500      	movs	r5, #0
 8023fee:	fb07 fc0c 	mul.w	ip, r7, ip
 8023ff2:	fa1f f78e 	uxth.w	r7, lr
 8023ff6:	fbc3 450a 	smlal	r4, r5, r3, sl
 8023ffa:	9b06      	ldr	r3, [sp, #24]
 8023ffc:	10ac      	asrs	r4, r5, #2
 8023ffe:	f304 040f 	ssat	r4, #16, r4
 8024002:	f823 401c 	strh.w	r4, [r3, ip, lsl #1]
 8024006:	8cd4      	ldrh	r4, [r2, #38]	@ 0x26
 8024008:	42bc      	cmp	r4, r7
 802400a:	d913      	bls.n	8024034 <D48_GENERIC+0x1b4>
 802400c:	8d54      	ldrh	r4, [r2, #42]	@ 0x2a
 802400e:	b2e5      	uxtb	r5, r4
 8024010:	2c01      	cmp	r4, #1
 8024012:	eb05 0845 	add.w	r8, r5, r5, lsl #1
 8024016:	f1c5 0c00 	rsb	ip, r5, #0
 802401a:	f47f af50 	bne.w	8023ebe <D48_GENERIC+0x3e>
 802401e:	9b08      	ldr	r3, [sp, #32]
 8024020:	e890 4010 	ldmia.w	r0, {r4, lr}
 8024024:	3006      	adds	r0, #6
 8024026:	2b00      	cmp	r3, #0
 8024028:	f43f af66 	beq.w	8023ef8 <D48_GENERIC+0x78>
 802402c:	ba64      	rev16	r4, r4
 802402e:	fa9e fe9e 	rev16.w	lr, lr
 8024032:	e761      	b.n	8023ef8 <D48_GENERIC+0x78>
 8024034:	9b02      	ldr	r3, [sp, #8]
 8024036:	6093      	str	r3, [r2, #8]
 8024038:	2000      	movs	r0, #0
 802403a:	9b01      	ldr	r3, [sp, #4]
 802403c:	61d6      	str	r6, [r2, #28]
 802403e:	60d3      	str	r3, [r2, #12]
 8024040:	9b03      	ldr	r3, [sp, #12]
 8024042:	6113      	str	r3, [r2, #16]
 8024044:	9b04      	ldr	r3, [sp, #16]
 8024046:	6153      	str	r3, [r2, #20]
 8024048:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 802404a:	6193      	str	r3, [r2, #24]
 802404c:	b00b      	add	sp, #44	@ 0x2c
 802404e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024052:	bf00      	nop
 8024054:	24000000 	.word	0x24000000
 8024058:	000f000a 	.word	0x000f000a
 802405c:	00060003 	.word	0x00060003
 8024060:	00150019 	.word	0x00150019
 8024064:	00190015 	.word	0x00190015
 8024068:	00030006 	.word	0x00030006
 802406c:	000a000f 	.word	0x000a000f

08024070 <D64_GENERIC>:
 8024070:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024074:	6913      	ldr	r3, [r2, #16]
 8024076:	b089      	sub	sp, #36	@ 0x24
 8024078:	68d5      	ldr	r5, [r2, #12]
 802407a:	9302      	str	r3, [sp, #8]
 802407c:	6953      	ldr	r3, [r2, #20]
 802407e:	462e      	mov	r6, r5
 8024080:	9105      	str	r1, [sp, #20]
 8024082:	9303      	str	r3, [sp, #12]
 8024084:	6b15      	ldr	r5, [r2, #48]	@ 0x30
 8024086:	6993      	ldr	r3, [r2, #24]
 8024088:	8cd1      	ldrh	r1, [r2, #38]	@ 0x26
 802408a:	9307      	str	r3, [sp, #28]
 802408c:	69d4      	ldr	r4, [r2, #28]
 802408e:	6893      	ldr	r3, [r2, #8]
 8024090:	9504      	str	r5, [sp, #16]
 8024092:	2900      	cmp	r1, #0
 8024094:	f000 80e5 	beq.w	8024262 <D64_GENERIC+0x1f2>
 8024098:	6a11      	ldr	r1, [r2, #32]
 802409a:	2500      	movs	r5, #0
 802409c:	46b3      	mov	fp, r6
 802409e:	9301      	str	r3, [sp, #4]
 80240a0:	9106      	str	r1, [sp, #24]
 80240a2:	4976      	ldr	r1, [pc, #472]	@ (802427c <D64_GENERIC+0x20c>)
 80240a4:	e0c7      	b.n	8024236 <D64_GENERIC+0x1c6>
 80240a6:	eb0c 084c 	add.w	r8, ip, ip, lsl #1
 80240aa:	f1cc 0e00 	rsb	lr, ip, #0
 80240ae:	f890 9000 	ldrb.w	r9, [r0]
 80240b2:	eb00 0708 	add.w	r7, r0, r8
 80240b6:	f810 6008 	ldrb.w	r6, [r0, r8]
 80240ba:	eb07 0a4e 	add.w	sl, r7, lr, lsl #1
 80240be:	f817 000e 	ldrb.w	r0, [r7, lr]
 80240c2:	f817 301e 	ldrb.w	r3, [r7, lr, lsl #1]
 80240c6:	eb0a 0748 	add.w	r7, sl, r8, lsl #1
 80240ca:	f81a a018 	ldrb.w	sl, [sl, r8, lsl #1]
 80240ce:	ea4f 4800 	mov.w	r8, r0, lsl #16
 80240d2:	f817 000e 	ldrb.w	r0, [r7, lr]
 80240d6:	eb08 6606 	add.w	r6, r8, r6, lsl #24
 80240da:	f817 801e 	ldrb.w	r8, [r7, lr, lsl #1]
 80240de:	0400      	lsls	r0, r0, #16
 80240e0:	4477      	add	r7, lr
 80240e2:	eb06 2603 	add.w	r6, r6, r3, lsl #8
 80240e6:	eb00 600a 	add.w	r0, r0, sl, lsl #24
 80240ea:	f817 a01e 	ldrb.w	sl, [r7, lr, lsl #1]
 80240ee:	eb07 074e 	add.w	r7, r7, lr, lsl #1
 80240f2:	444e      	add	r6, r9
 80240f4:	eb00 2808 	add.w	r8, r0, r8, lsl #8
 80240f8:	eb07 008c 	add.w	r0, r7, ip, lsl #2
 80240fc:	44c2      	add	sl, r8
 80240fe:	b2f7      	uxtb	r7, r6
 8024100:	f3c6 2807 	ubfx	r8, r6, #8, #8
 8024104:	f3c6 4c07 	ubfx	ip, r6, #16, #8
 8024108:	0e36      	lsrs	r6, r6, #24
 802410a:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 802410e:	fa5f fe8a 	uxtb.w	lr, sl
 8024112:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 8024116:	f3ca 2907 	ubfx	r9, sl, #8, #8
 802411a:	443c      	add	r4, r7
 802411c:	f851 702c 	ldr.w	r7, [r1, ip, lsl #2]
 8024120:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8024124:	eb08 2894 	add.w	r8, r8, r4, lsr #10
 8024128:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 802412c:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8024130:	4b53      	ldr	r3, [pc, #332]	@ (8024280 <D64_GENERIC+0x210>)
 8024132:	eb07 2c98 	add.w	ip, r7, r8, lsr #10
 8024136:	f3c8 0809 	ubfx	r8, r8, #0, #10
 802413a:	f851 7029 	ldr.w	r7, [r1, r9, lsl #2]
 802413e:	eb06 269c 	add.w	r6, r6, ip, lsr #10
 8024142:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8024146:	ea48 4804 	orr.w	r8, r8, r4, lsl #16
 802414a:	f3ca 4407 	ubfx	r4, sl, #16, #8
 802414e:	eb0e 2e96 	add.w	lr, lr, r6, lsr #10
 8024152:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8024156:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 802415a:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
 802415e:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8024162:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8024166:	f851 902a 	ldr.w	r9, [r1, sl, lsl #2]
 802416a:	ea46 460c 	orr.w	r6, r6, ip, lsl #16
 802416e:	eb04 2a97 	add.w	sl, r4, r7, lsr #10
 8024172:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8024176:	eb09 299a 	add.w	r9, r9, sl, lsr #10
 802417a:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 802417e:	ea47 4e0e 	orr.w	lr, r7, lr, lsl #16
 8024182:	f3c9 0709 	ubfx	r7, r9, #0, #10
 8024186:	ea4f 2499 	mov.w	r4, r9, lsr #10
 802418a:	ea47 4a0a 	orr.w	sl, r7, sl, lsl #16
 802418e:	fb28 b903 	smlad	r9, r8, r3, fp
 8024192:	4b3c      	ldr	r3, [pc, #240]	@ (8024284 <D64_GENERIC+0x214>)
 8024194:	fb26 9903 	smlad	r9, r6, r3, r9
 8024198:	4b3b      	ldr	r3, [pc, #236]	@ (8024288 <D64_GENERIC+0x218>)
 802419a:	fb2e 9703 	smlad	r7, lr, r3, r9
 802419e:	f44f 3980 	mov.w	r9, #65536	@ 0x10000
 80241a2:	fb2a 7909 	smlad	r9, sl, r9, r7
 80241a6:	4b39      	ldr	r3, [pc, #228]	@ (802428c <D64_GENERIC+0x21c>)
 80241a8:	9f01      	ldr	r7, [sp, #4]
 80241aa:	fb28 7303 	smlad	r3, r8, r3, r7
 80241ae:	4f37      	ldr	r7, [pc, #220]	@ (802428c <D64_GENERIC+0x21c>)
 80241b0:	fb2a 3317 	smladx	r3, sl, r7, r3
 80241b4:	4f36      	ldr	r7, [pc, #216]	@ (8024290 <D64_GENERIC+0x220>)
 80241b6:	fb26 3307 	smlad	r3, r6, r7, r3
 80241ba:	fb2e 3b17 	smladx	fp, lr, r7, r3
 80241be:	f04f 0c01 	mov.w	ip, #1
 80241c2:	fb28 f80c 	smuad	r8, r8, ip
 80241c6:	4b33      	ldr	r3, [pc, #204]	@ (8024294 <D64_GENERIC+0x224>)
 80241c8:	fb26 8603 	smlad	r6, r6, r3, r8
 80241cc:	4b32      	ldr	r3, [pc, #200]	@ (8024298 <D64_GENERIC+0x228>)
 80241ce:	fb2e 6e03 	smlad	lr, lr, r3, r6
 80241d2:	4b32      	ldr	r3, [pc, #200]	@ (802429c <D64_GENERIC+0x22c>)
 80241d4:	fb2a e303 	smlad	r3, sl, r3, lr
 80241d8:	9301      	str	r3, [sp, #4]
 80241da:	f5a9 3900 	sub.w	r9, r9, #131072	@ 0x20000
 80241de:	9b06      	ldr	r3, [sp, #24]
 80241e0:	b19b      	cbz	r3, 802420a <D64_GENERIC+0x19a>
 80241e2:	9e02      	ldr	r6, [sp, #8]
 80241e4:	9f03      	ldr	r7, [sp, #12]
 80241e6:	444e      	add	r6, r9
 80241e8:	f8cd 900c 	str.w	r9, [sp, #12]
 80241ec:	1bf6      	subs	r6, r6, r7
 80241ee:	ea4f 79e6 	mov.w	r9, r6, asr #31
 80241f2:	fba6 6703 	umull	r6, r7, r6, r3
 80241f6:	fb03 7709 	mla	r7, r3, r9, r7
 80241fa:	f116 4600 	adds.w	r6, r6, #2147483648	@ 0x80000000
 80241fe:	f147 0700 	adc.w	r7, r7, #0
 8024202:	fa07 f30c 	lsl.w	r3, r7, ip
 8024206:	4699      	mov	r9, r3
 8024208:	9302      	str	r3, [sp, #8]
 802420a:	f8b2 e028 	ldrh.w	lr, [r2, #40]	@ 0x28
 802420e:	ea4f 2989 	mov.w	r9, r9, lsl #10
 8024212:	9b04      	ldr	r3, [sp, #16]
 8024214:	f04f 4600 	mov.w	r6, #2147483648	@ 0x80000000
 8024218:	2700      	movs	r7, #0
 802421a:	fb05 fe0e 	mul.w	lr, r5, lr
 802421e:	3501      	adds	r5, #1
 8024220:	fbc3 6709 	smlal	r6, r7, r3, r9
 8024224:	9b05      	ldr	r3, [sp, #20]
 8024226:	10be      	asrs	r6, r7, #2
 8024228:	f306 060f 	ssat	r6, #16, r6
 802422c:	f823 601e 	strh.w	r6, [r3, lr, lsl #1]
 8024230:	8cd6      	ldrh	r6, [r2, #38]	@ 0x26
 8024232:	42ae      	cmp	r6, r5
 8024234:	dd13      	ble.n	802425e <D64_GENERIC+0x1ee>
 8024236:	f8b2 c02a 	ldrh.w	ip, [r2, #42]	@ 0x2a
 802423a:	f1bc 0f01 	cmp.w	ip, #1
 802423e:	f47f af32 	bne.w	80240a6 <D64_GENERIC+0x36>
 8024242:	6b57      	ldr	r7, [r2, #52]	@ 0x34
 8024244:	f100 0e08 	add.w	lr, r0, #8
 8024248:	06bb      	lsls	r3, r7, #26
 802424a:	e890 0440 	ldmia.w	r0, {r6, sl}
 802424e:	d504      	bpl.n	802425a <D64_GENERIC+0x1ea>
 8024250:	ba76      	rev16	r6, r6
 8024252:	fa9a fa9a 	rev16.w	sl, sl
 8024256:	4670      	mov	r0, lr
 8024258:	e751      	b.n	80240fe <D64_GENERIC+0x8e>
 802425a:	4670      	mov	r0, lr
 802425c:	e74f      	b.n	80240fe <D64_GENERIC+0x8e>
 802425e:	465e      	mov	r6, fp
 8024260:	9b01      	ldr	r3, [sp, #4]
 8024262:	6093      	str	r3, [r2, #8]
 8024264:	2000      	movs	r0, #0
 8024266:	9b02      	ldr	r3, [sp, #8]
 8024268:	60d6      	str	r6, [r2, #12]
 802426a:	6113      	str	r3, [r2, #16]
 802426c:	9b03      	ldr	r3, [sp, #12]
 802426e:	61d4      	str	r4, [r2, #28]
 8024270:	6153      	str	r3, [r2, #20]
 8024272:	9b07      	ldr	r3, [sp, #28]
 8024274:	6193      	str	r3, [r2, #24]
 8024276:	b009      	add	sp, #36	@ 0x24
 8024278:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802427c:	24000000 	.word	0x24000000
 8024280:	001c0015 	.word	0x001c0015
 8024284:	000f000a 	.word	0x000f000a
 8024288:	00060003 	.word	0x00060003
 802428c:	0024002a 	.word	0x0024002a
 8024290:	002e0030 	.word	0x002e0030
 8024294:	00030006 	.word	0x00030006
 8024298:	000a000f 	.word	0x000a000f
 802429c:	0015001c 	.word	0x0015001c

080242a0 <D80_GENERIC>:
 80242a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80242a4:	b08b      	sub	sp, #44	@ 0x2c
 80242a6:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80242a8:	9107      	str	r1, [sp, #28]
 80242aa:	6911      	ldr	r1, [r2, #16]
 80242ac:	9104      	str	r1, [sp, #16]
 80242ae:	6951      	ldr	r1, [r2, #20]
 80242b0:	9105      	str	r1, [sp, #20]
 80242b2:	6991      	ldr	r1, [r2, #24]
 80242b4:	9109      	str	r1, [sp, #36]	@ 0x24
 80242b6:	69d1      	ldr	r1, [r2, #28]
 80242b8:	9101      	str	r1, [sp, #4]
 80242ba:	6891      	ldr	r1, [r2, #8]
 80242bc:	9103      	str	r1, [sp, #12]
 80242be:	68d1      	ldr	r1, [r2, #12]
 80242c0:	9102      	str	r1, [sp, #8]
 80242c2:	6b11      	ldr	r1, [r2, #48]	@ 0x30
 80242c4:	9106      	str	r1, [sp, #24]
 80242c6:	2b00      	cmp	r3, #0
 80242c8:	f000 810d 	beq.w	80244e6 <D80_GENERIC+0x246>
 80242cc:	6a13      	ldr	r3, [r2, #32]
 80242ce:	f04f 0800 	mov.w	r8, #0
 80242d2:	f8df e264 	ldr.w	lr, [pc, #612]	@ 8024538 <D80_GENERIC+0x298>
 80242d6:	9308      	str	r3, [sp, #32]
 80242d8:	9200      	str	r2, [sp, #0]
 80242da:	e0ee      	b.n	80244ba <D80_GENERIC+0x21a>
 80242dc:	b2db      	uxtb	r3, r3
 80242de:	f890 c000 	ldrb.w	ip, [r0]
 80242e2:	b219      	sxth	r1, r3
 80242e4:	425c      	negs	r4, r3
 80242e6:	f810 9003 	ldrb.w	r9, [r0, r3]
 80242ea:	004e      	lsls	r6, r1, #1
 80242ec:	eb01 0581 	add.w	r5, r1, r1, lsl #2
 80242f0:	4431      	add	r1, r6
 80242f2:	1843      	adds	r3, r0, r1
 80242f4:	f810 b001 	ldrb.w	fp, [r0, r1]
 80242f8:	1919      	adds	r1, r3, r4
 80242fa:	5d1b      	ldrb	r3, [r3, r4]
 80242fc:	1948      	adds	r0, r1, r5
 80242fe:	f811 a005 	ldrb.w	sl, [r1, r5]
 8024302:	041b      	lsls	r3, r3, #16
 8024304:	1907      	adds	r7, r0, r4
 8024306:	5d01      	ldrb	r1, [r0, r4]
 8024308:	eb03 630b 	add.w	r3, r3, fp, lsl #24
 802430c:	f810 0014 	ldrb.w	r0, [r0, r4, lsl #1]
 8024310:	eb07 0b44 	add.w	fp, r7, r4, lsl #1
 8024314:	f817 7014 	ldrb.w	r7, [r7, r4, lsl #1]
 8024318:	0409      	lsls	r1, r1, #16
 802431a:	eb03 2309 	add.w	r3, r3, r9, lsl #8
 802431e:	eb0b 0905 	add.w	r9, fp, r5
 8024322:	eb01 610a 	add.w	r1, r1, sl, lsl #24
 8024326:	f81b 5005 	ldrb.w	r5, [fp, r5]
 802432a:	eb09 0b04 	add.w	fp, r9, r4
 802432e:	f819 4004 	ldrb.w	r4, [r9, r4]
 8024332:	eb01 2100 	add.w	r1, r1, r0, lsl #8
 8024336:	4463      	add	r3, ip
 8024338:	eb0b 0006 	add.w	r0, fp, r6
 802433c:	eb04 2505 	add.w	r5, r4, r5, lsl #8
 8024340:	4439      	add	r1, r7
 8024342:	f3c3 2407 	ubfx	r4, r3, #8, #8
 8024346:	b2df      	uxtb	r7, r3
 8024348:	f3c3 4607 	ubfx	r6, r3, #16, #8
 802434c:	ea4f 6c13 	mov.w	ip, r3, lsr #24
 8024350:	f85e 3027 	ldr.w	r3, [lr, r7, lsl #2]
 8024354:	fa5f fa81 	uxtb.w	sl, r1
 8024358:	f85e 7024 	ldr.w	r7, [lr, r4, lsl #2]
 802435c:	9c01      	ldr	r4, [sp, #4]
 802435e:	f85e 9026 	ldr.w	r9, [lr, r6, lsl #2]
 8024362:	441c      	add	r4, r3
 8024364:	f85e 602c 	ldr.w	r6, [lr, ip, lsl #2]
 8024368:	f85e c02a 	ldr.w	ip, [lr, sl, lsl #2]
 802436c:	f3c5 2a07 	ubfx	sl, r5, #8, #8
 8024370:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 8024374:	f3c4 0309 	ubfx	r3, r4, #0, #10
 8024378:	f3c1 2407 	ubfx	r4, r1, #8, #8
 802437c:	b2ed      	uxtb	r5, r5
 802437e:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8024382:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8024386:	f85e 4024 	ldr.w	r4, [lr, r4, lsl #2]
 802438a:	eb06 2699 	add.w	r6, r6, r9, lsr #10
 802438e:	f85e 5025 	ldr.w	r5, [lr, r5, lsl #2]
 8024392:	ea47 4303 	orr.w	r3, r7, r3, lsl #16
 8024396:	f3c1 4707 	ubfx	r7, r1, #16, #8
 802439a:	eb0c 2c96 	add.w	ip, ip, r6, lsr #10
 802439e:	f85e a02a 	ldr.w	sl, [lr, sl, lsl #2]
 80243a2:	f85e 7027 	ldr.w	r7, [lr, r7, lsl #2]
 80243a6:	0e09      	lsrs	r1, r1, #24
 80243a8:	eb04 249c 	add.w	r4, r4, ip, lsr #10
 80243ac:	f3c9 0909 	ubfx	r9, r9, #0, #10
 80243b0:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
 80243b4:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 80243b8:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80243bc:	f3c6 0609 	ubfx	r6, r6, #0, #10
 80243c0:	f3c4 0409 	ubfx	r4, r4, #0, #10
 80243c4:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 80243c8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80243cc:	ea46 4609 	orr.w	r6, r6, r9, lsl #16
 80243d0:	eb05 2591 	add.w	r5, r5, r1, lsr #10
 80243d4:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80243d8:	ea44 440c 	orr.w	r4, r4, ip, lsl #16
 80243dc:	eb0a 2a95 	add.w	sl, sl, r5, lsr #10
 80243e0:	f3c5 0509 	ubfx	r5, r5, #0, #10
 80243e4:	ea41 4107 	orr.w	r1, r1, r7, lsl #16
 80243e8:	ea4f 229a 	mov.w	r2, sl, lsr #10
 80243ec:	f3ca 0709 	ubfx	r7, sl, #0, #10
 80243f0:	9201      	str	r2, [sp, #4]
 80243f2:	ea47 4505 	orr.w	r5, r7, r5, lsl #16
 80243f6:	4a44      	ldr	r2, [pc, #272]	@ (8024508 <D80_GENERIC+0x268>)
 80243f8:	9f02      	ldr	r7, [sp, #8]
 80243fa:	fb23 7a02 	smlad	sl, r3, r2, r7
 80243fe:	4a43      	ldr	r2, [pc, #268]	@ (802450c <D80_GENERIC+0x26c>)
 8024400:	fb26 aa02 	smlad	sl, r6, r2, sl
 8024404:	4a42      	ldr	r2, [pc, #264]	@ (8024510 <D80_GENERIC+0x270>)
 8024406:	fb24 aa02 	smlad	sl, r4, r2, sl
 802440a:	4a42      	ldr	r2, [pc, #264]	@ (8024514 <D80_GENERIC+0x274>)
 802440c:	fb21 a702 	smlad	r7, r1, r2, sl
 8024410:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8024414:	fb25 7a0a 	smlad	sl, r5, sl, r7
 8024418:	4a3f      	ldr	r2, [pc, #252]	@ (8024518 <D80_GENERIC+0x278>)
 802441a:	9f03      	ldr	r7, [sp, #12]
 802441c:	fb23 7c02 	smlad	ip, r3, r2, r7
 8024420:	4a3e      	ldr	r2, [pc, #248]	@ (802451c <D80_GENERIC+0x27c>)
 8024422:	fb26 cc02 	smlad	ip, r6, r2, ip
 8024426:	f04f 174b 	mov.w	r7, #4915275	@ 0x4b004b
 802442a:	fb24 c707 	smlad	r7, r4, r7, ip
 802442e:	4a3c      	ldr	r2, [pc, #240]	@ (8024520 <D80_GENERIC+0x280>)
 8024430:	fb21 7702 	smlad	r7, r1, r2, r7
 8024434:	4a3b      	ldr	r2, [pc, #236]	@ (8024524 <D80_GENERIC+0x284>)
 8024436:	fb25 7202 	smlad	r2, r5, r2, r7
 802443a:	f04f 0901 	mov.w	r9, #1
 802443e:	9202      	str	r2, [sp, #8]
 8024440:	fb23 f909 	smuad	r9, r3, r9
 8024444:	4b38      	ldr	r3, [pc, #224]	@ (8024528 <D80_GENERIC+0x288>)
 8024446:	fb26 9603 	smlad	r6, r6, r3, r9
 802444a:	4f38      	ldr	r7, [pc, #224]	@ (802452c <D80_GENERIC+0x28c>)
 802444c:	fb24 6407 	smlad	r4, r4, r7, r6
 8024450:	4f37      	ldr	r7, [pc, #220]	@ (8024530 <D80_GENERIC+0x290>)
 8024452:	fb21 4707 	smlad	r7, r1, r7, r4
 8024456:	4937      	ldr	r1, [pc, #220]	@ (8024534 <D80_GENERIC+0x294>)
 8024458:	fb25 7301 	smlad	r3, r5, r1, r7
 802445c:	9303      	str	r3, [sp, #12]
 802445e:	f5aa 3a7a 	sub.w	sl, sl, #256000	@ 0x3e800
 8024462:	9b08      	ldr	r3, [sp, #32]
 8024464:	b193      	cbz	r3, 802448c <D80_GENERIC+0x1ec>
 8024466:	9a04      	ldr	r2, [sp, #16]
 8024468:	4452      	add	r2, sl
 802446a:	4614      	mov	r4, r2
 802446c:	9a05      	ldr	r2, [sp, #20]
 802446e:	f8cd a014 	str.w	sl, [sp, #20]
 8024472:	1aa4      	subs	r4, r4, r2
 8024474:	17e7      	asrs	r7, r4, #31
 8024476:	fba4 4503 	umull	r4, r5, r4, r3
 802447a:	fb03 5507 	mla	r5, r3, r7, r5
 802447e:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8024482:	f145 0500 	adc.w	r5, r5, #0
 8024486:	006b      	lsls	r3, r5, #1
 8024488:	469a      	mov	sl, r3
 802448a:	9304      	str	r3, [sp, #16]
 802448c:	9e00      	ldr	r6, [sp, #0]
 802448e:	ea4f 2a4a 	mov.w	sl, sl, lsl #9
 8024492:	9a06      	ldr	r2, [sp, #24]
 8024494:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 8024498:	8d33      	ldrh	r3, [r6, #40]	@ 0x28
 802449a:	2500      	movs	r5, #0
 802449c:	fb08 f303 	mul.w	r3, r8, r3
 80244a0:	fbc2 450a 	smlal	r4, r5, r2, sl
 80244a4:	9a07      	ldr	r2, [sp, #28]
 80244a6:	f108 0801 	add.w	r8, r8, #1
 80244aa:	10a9      	asrs	r1, r5, #2
 80244ac:	f301 010f 	ssat	r1, #16, r1
 80244b0:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 80244b4:	8cf3      	ldrh	r3, [r6, #38]	@ 0x26
 80244b6:	4543      	cmp	r3, r8
 80244b8:	dd14      	ble.n	80244e4 <D80_GENERIC+0x244>
 80244ba:	9b00      	ldr	r3, [sp, #0]
 80244bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80244be:	2b01      	cmp	r3, #1
 80244c0:	f47f af0c 	bne.w	80242dc <D80_GENERIC+0x3c>
 80244c4:	9b00      	ldr	r3, [sp, #0]
 80244c6:	300a      	adds	r0, #10
 80244c8:	f850 1c06 	ldr.w	r1, [r0, #-6]
 80244cc:	6b5e      	ldr	r6, [r3, #52]	@ 0x34
 80244ce:	f850 5c02 	ldr.w	r5, [r0, #-2]
 80244d2:	06b2      	lsls	r2, r6, #26
 80244d4:	f850 3c0a 	ldr.w	r3, [r0, #-10]
 80244d8:	f57f af33 	bpl.w	8024342 <D80_GENERIC+0xa2>
 80244dc:	ba5b      	rev16	r3, r3
 80244de:	ba49      	rev16	r1, r1
 80244e0:	ba6d      	rev16	r5, r5
 80244e2:	e72e      	b.n	8024342 <D80_GENERIC+0xa2>
 80244e4:	4632      	mov	r2, r6
 80244e6:	9b03      	ldr	r3, [sp, #12]
 80244e8:	2000      	movs	r0, #0
 80244ea:	6093      	str	r3, [r2, #8]
 80244ec:	9b02      	ldr	r3, [sp, #8]
 80244ee:	60d3      	str	r3, [r2, #12]
 80244f0:	9b01      	ldr	r3, [sp, #4]
 80244f2:	61d3      	str	r3, [r2, #28]
 80244f4:	9b04      	ldr	r3, [sp, #16]
 80244f6:	6113      	str	r3, [r2, #16]
 80244f8:	9b05      	ldr	r3, [sp, #20]
 80244fa:	6153      	str	r3, [r2, #20]
 80244fc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80244fe:	6193      	str	r3, [r2, #24]
 8024500:	b00b      	add	sp, #44	@ 0x2c
 8024502:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024506:	bf00      	nop
 8024508:	002d0024 	.word	0x002d0024
 802450c:	001c0015 	.word	0x001c0015
 8024510:	000f000a 	.word	0x000f000a
 8024514:	00060003 	.word	0x00060003
 8024518:	0037003f 	.word	0x0037003f
 802451c:	00450049 	.word	0x00450049
 8024520:	00490045 	.word	0x00490045
 8024524:	003f0037 	.word	0x003f0037
 8024528:	00030006 	.word	0x00030006
 802452c:	000a000f 	.word	0x000a000f
 8024530:	0015001c 	.word	0x0015001c
 8024534:	0024002d 	.word	0x0024002d
 8024538:	24000000 	.word	0x24000000

0802453c <D128_GENERIC>:
 802453c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024540:	b08d      	sub	sp, #52	@ 0x34
 8024542:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 8024544:	9201      	str	r2, [sp, #4]
 8024546:	9109      	str	r1, [sp, #36]	@ 0x24
 8024548:	4611      	mov	r1, r2
 802454a:	6912      	ldr	r2, [r2, #16]
 802454c:	9206      	str	r2, [sp, #24]
 802454e:	460a      	mov	r2, r1
 8024550:	6949      	ldr	r1, [r1, #20]
 8024552:	4614      	mov	r4, r2
 8024554:	9107      	str	r1, [sp, #28]
 8024556:	4611      	mov	r1, r2
 8024558:	6992      	ldr	r2, [r2, #24]
 802455a:	f8d1 a01c 	ldr.w	sl, [r1, #28]
 802455e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8024560:	68e2      	ldr	r2, [r4, #12]
 8024562:	6889      	ldr	r1, [r1, #8]
 8024564:	9202      	str	r2, [sp, #8]
 8024566:	6b22      	ldr	r2, [r4, #48]	@ 0x30
 8024568:	9103      	str	r1, [sp, #12]
 802456a:	9208      	str	r2, [sp, #32]
 802456c:	2b00      	cmp	r3, #0
 802456e:	f000 8180 	beq.w	8024872 <D128_GENERIC+0x336>
 8024572:	6a23      	ldr	r3, [r4, #32]
 8024574:	4681      	mov	r9, r0
 8024576:	49c8      	ldr	r1, [pc, #800]	@ (8024898 <D128_GENERIC+0x35c>)
 8024578:	930a      	str	r3, [sp, #40]	@ 0x28
 802457a:	2300      	movs	r3, #0
 802457c:	f8cd a010 	str.w	sl, [sp, #16]
 8024580:	9305      	str	r3, [sp, #20]
 8024582:	e15d      	b.n	8024840 <D128_GENERIC+0x304>
 8024584:	b2d2      	uxtb	r2, r2
 8024586:	f899 b000 	ldrb.w	fp, [r9]
 802458a:	b213      	sxth	r3, r2
 802458c:	4255      	negs	r5, r2
 802458e:	f819 0002 	ldrb.w	r0, [r9, r2]
 8024592:	eb03 0243 	add.w	r2, r3, r3, lsl #1
 8024596:	009f      	lsls	r7, r3, #2
 8024598:	eb09 0402 	add.w	r4, r9, r2
 802459c:	ebc3 06c3 	rsb	r6, r3, r3, lsl #3
 80245a0:	f819 8002 	ldrb.w	r8, [r9, r2]
 80245a4:	443b      	add	r3, r7
 80245a6:	1962      	adds	r2, r4, r5
 80245a8:	5d64      	ldrb	r4, [r4, r5]
 80245aa:	eb02 0e03 	add.w	lr, r2, r3
 80245ae:	0424      	lsls	r4, r4, #16
 80245b0:	5cd3      	ldrb	r3, [r2, r3]
 80245b2:	eb0e 0c05 	add.w	ip, lr, r5
 80245b6:	f81e 9015 	ldrb.w	r9, [lr, r5, lsl #1]
 80245ba:	f81e 2005 	ldrb.w	r2, [lr, r5]
 80245be:	eb04 6408 	add.w	r4, r4, r8, lsl #24
 80245c2:	eb0c 0e45 	add.w	lr, ip, r5, lsl #1
 80245c6:	f81c 8015 	ldrb.w	r8, [ip, r5, lsl #1]
 80245ca:	eb04 2400 	add.w	r4, r4, r0, lsl #8
 80245ce:	eb0e 0c06 	add.w	ip, lr, r6
 80245d2:	f81e a006 	ldrb.w	sl, [lr, r6]
 80245d6:	0412      	lsls	r2, r2, #16
 80245d8:	445c      	add	r4, fp
 80245da:	eb0c 0e05 	add.w	lr, ip, r5
 80245de:	eb02 6203 	add.w	r2, r2, r3, lsl #24
 80245e2:	f81c 3005 	ldrb.w	r3, [ip, r5]
 80245e6:	eb0e 0045 	add.w	r0, lr, r5, lsl #1
 80245ea:	f81c c015 	ldrb.w	ip, [ip, r5, lsl #1]
 80245ee:	041b      	lsls	r3, r3, #16
 80245f0:	f81e e015 	ldrb.w	lr, [lr, r5, lsl #1]
 80245f4:	eb00 0b06 	add.w	fp, r0, r6
 80245f8:	5d80      	ldrb	r0, [r0, r6]
 80245fa:	eb03 630a 	add.w	r3, r3, sl, lsl #24
 80245fe:	f81b 6005 	ldrb.w	r6, [fp, r5]
 8024602:	eb0b 0a05 	add.w	sl, fp, r5
 8024606:	f81b b015 	ldrb.w	fp, [fp, r5, lsl #1]
 802460a:	eb02 2209 	add.w	r2, r2, r9, lsl #8
 802460e:	0436      	lsls	r6, r6, #16
 8024610:	eb0a 0945 	add.w	r9, sl, r5, lsl #1
 8024614:	f81a 5015 	ldrb.w	r5, [sl, r5, lsl #1]
 8024618:	eb06 6600 	add.w	r6, r6, r0, lsl #24
 802461c:	4442      	add	r2, r8
 802461e:	eb03 230c 	add.w	r3, r3, ip, lsl #8
 8024622:	44b9      	add	r9, r7
 8024624:	eb06 260b 	add.w	r6, r6, fp, lsl #8
 8024628:	4473      	add	r3, lr
 802462a:	442e      	add	r6, r5
 802462c:	f3c4 2007 	ubfx	r0, r4, #8, #8
 8024630:	b2e7      	uxtb	r7, r4
 8024632:	f3c4 4507 	ubfx	r5, r4, #16, #8
 8024636:	0e24      	lsrs	r4, r4, #24
 8024638:	f851 b020 	ldr.w	fp, [r1, r0, lsl #2]
 802463c:	fa5f fe82 	uxtb.w	lr, r2
 8024640:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8024644:	f3c2 2a07 	ubfx	sl, r2, #8, #8
 8024648:	9804      	ldr	r0, [sp, #16]
 802464a:	f851 c025 	ldr.w	ip, [r1, r5, lsl #2]
 802464e:	4438      	add	r0, r7
 8024650:	f851 5024 	ldr.w	r5, [r1, r4, lsl #2]
 8024654:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
 8024658:	f3c2 4707 	ubfx	r7, r2, #16, #8
 802465c:	4680      	mov	r8, r0
 802465e:	eb0b 2090 	add.w	r0, fp, r0, lsr #10
 8024662:	f851 402a 	ldr.w	r4, [r1, sl, lsl #2]
 8024666:	0e12      	lsrs	r2, r2, #24
 8024668:	eb0c 2c90 	add.w	ip, ip, r0, lsr #10
 802466c:	f851 7027 	ldr.w	r7, [r1, r7, lsl #2]
 8024670:	fa5f fa83 	uxtb.w	sl, r3
 8024674:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 8024678:	eb05 259c 	add.w	r5, r5, ip, lsr #10
 802467c:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8024680:	f851 b02a 	ldr.w	fp, [r1, sl, lsl #2]
 8024684:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8024688:	eb0e 2e95 	add.w	lr, lr, r5, lsr #10
 802468c:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8024690:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8024694:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8024698:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 802469c:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
 80246a0:	f3c3 2c07 	ubfx	ip, r3, #8, #8
 80246a4:	eb07 2794 	add.w	r7, r7, r4, lsr #10
 80246a8:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80246ac:	f3c4 0809 	ubfx	r8, r4, #0, #10
 80246b0:	eb02 2297 	add.w	r2, r2, r7, lsr #10
 80246b4:	f851 402c 	ldr.w	r4, [r1, ip, lsl #2]
 80246b8:	f3c3 4c07 	ubfx	ip, r3, #16, #8
 80246bc:	0e1b      	lsrs	r3, r3, #24
 80246be:	eb0b 2b92 	add.w	fp, fp, r2, lsr #10
 80246c2:	f3c7 0709 	ubfx	r7, r7, #0, #10
 80246c6:	f851 a02c 	ldr.w	sl, [r1, ip, lsl #2]
 80246ca:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80246ce:	eb04 2c9b 	add.w	ip, r4, fp, lsr #10
 80246d2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80246d6:	ea48 4e0e 	orr.w	lr, r8, lr, lsl #16
 80246da:	f3cb 0b09 	ubfx	fp, fp, #0, #10
 80246de:	eb0a 2a9c 	add.w	sl, sl, ip, lsr #10
 80246e2:	f3cc 0409 	ubfx	r4, ip, #0, #10
 80246e6:	fa5f f886 	uxtb.w	r8, r6
 80246ea:	eb03 239a 	add.w	r3, r3, sl, lsr #10
 80246ee:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80246f2:	f851 8028 	ldr.w	r8, [r1, r8, lsl #2]
 80246f6:	ea42 4707 	orr.w	r7, r2, r7, lsl #16
 80246fa:	f3c6 2207 	ubfx	r2, r6, #8, #8
 80246fe:	ea44 4b0b 	orr.w	fp, r4, fp, lsl #16
 8024702:	eb08 2893 	add.w	r8, r8, r3, lsr #10
 8024706:	f3c6 4407 	ubfx	r4, r6, #16, #8
 802470a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
 802470e:	0e36      	lsrs	r6, r6, #24
 8024710:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
 8024714:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8024718:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 802471c:	f851 6026 	ldr.w	r6, [r1, r6, lsl #2]
 8024720:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8024724:	ea43 4a0a 	orr.w	sl, r3, sl, lsl #16
 8024728:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 802472c:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8024730:	eb06 2694 	add.w	r6, r6, r4, lsr #10
 8024734:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8024738:	ea42 4808 	orr.w	r8, r2, r8, lsl #16
 802473c:	f3c6 0309 	ubfx	r3, r6, #0, #10
 8024740:	0ab2      	lsrs	r2, r6, #10
 8024742:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8024746:	9204      	str	r2, [sp, #16]
 8024748:	9c02      	ldr	r4, [sp, #8]
 802474a:	4a54      	ldr	r2, [pc, #336]	@ (802489c <D128_GENERIC+0x360>)
 802474c:	fb20 4602 	smlad	r6, r0, r2, r4
 8024750:	4a53      	ldr	r2, [pc, #332]	@ (80248a0 <D128_GENERIC+0x364>)
 8024752:	fb25 6602 	smlad	r6, r5, r2, r6
 8024756:	4a53      	ldr	r2, [pc, #332]	@ (80248a4 <D128_GENERIC+0x368>)
 8024758:	fb2e 6602 	smlad	r6, lr, r2, r6
 802475c:	4a52      	ldr	r2, [pc, #328]	@ (80248a8 <D128_GENERIC+0x36c>)
 802475e:	fb27 6602 	smlad	r6, r7, r2, r6
 8024762:	4a52      	ldr	r2, [pc, #328]	@ (80248ac <D128_GENERIC+0x370>)
 8024764:	fb2b 6602 	smlad	r6, fp, r2, r6
 8024768:	4a51      	ldr	r2, [pc, #324]	@ (80248b0 <D128_GENERIC+0x374>)
 802476a:	fb2a 6602 	smlad	r6, sl, r2, r6
 802476e:	4a51      	ldr	r2, [pc, #324]	@ (80248b4 <D128_GENERIC+0x378>)
 8024770:	fb28 6202 	smlad	r2, r8, r2, r6
 8024774:	f44f 3680 	mov.w	r6, #65536	@ 0x10000
 8024778:	fb23 2606 	smlad	r6, r3, r6, r2
 802477c:	4a4e      	ldr	r2, [pc, #312]	@ (80248b8 <D128_GENERIC+0x37c>)
 802477e:	9c03      	ldr	r4, [sp, #12]
 8024780:	fb20 4202 	smlad	r2, r0, r2, r4
 8024784:	4c4d      	ldr	r4, [pc, #308]	@ (80248bc <D128_GENERIC+0x380>)
 8024786:	fb25 2404 	smlad	r4, r5, r4, r2
 802478a:	4a4d      	ldr	r2, [pc, #308]	@ (80248c0 <D128_GENERIC+0x384>)
 802478c:	fb2e 4202 	smlad	r2, lr, r2, r4
 8024790:	4c4c      	ldr	r4, [pc, #304]	@ (80248c4 <D128_GENERIC+0x388>)
 8024792:	fb27 2204 	smlad	r2, r7, r4, r2
 8024796:	4c4c      	ldr	r4, [pc, #304]	@ (80248c8 <D128_GENERIC+0x38c>)
 8024798:	fb2b 2404 	smlad	r4, fp, r4, r2
 802479c:	4a4b      	ldr	r2, [pc, #300]	@ (80248cc <D128_GENERIC+0x390>)
 802479e:	fb2a 4402 	smlad	r4, sl, r2, r4
 80247a2:	4a4b      	ldr	r2, [pc, #300]	@ (80248d0 <D128_GENERIC+0x394>)
 80247a4:	fb28 4202 	smlad	r2, r8, r2, r4
 80247a8:	4c4a      	ldr	r4, [pc, #296]	@ (80248d4 <D128_GENERIC+0x398>)
 80247aa:	fb23 2204 	smlad	r2, r3, r4, r2
 80247ae:	f04f 0c01 	mov.w	ip, #1
 80247b2:	9202      	str	r2, [sp, #8]
 80247b4:	fb20 f00c 	smuad	r0, r0, ip
 80247b8:	4a47      	ldr	r2, [pc, #284]	@ (80248d8 <D128_GENERIC+0x39c>)
 80247ba:	fb25 0502 	smlad	r5, r5, r2, r0
 80247be:	4a47      	ldr	r2, [pc, #284]	@ (80248dc <D128_GENERIC+0x3a0>)
 80247c0:	fb2e 5e02 	smlad	lr, lr, r2, r5
 80247c4:	4a46      	ldr	r2, [pc, #280]	@ (80248e0 <D128_GENERIC+0x3a4>)
 80247c6:	fb27 e202 	smlad	r2, r7, r2, lr
 80247ca:	4c46      	ldr	r4, [pc, #280]	@ (80248e4 <D128_GENERIC+0x3a8>)
 80247cc:	fb2b 2204 	smlad	r2, fp, r4, r2
 80247d0:	4c45      	ldr	r4, [pc, #276]	@ (80248e8 <D128_GENERIC+0x3ac>)
 80247d2:	fb2a 2204 	smlad	r2, sl, r4, r2
 80247d6:	4c45      	ldr	r4, [pc, #276]	@ (80248ec <D128_GENERIC+0x3b0>)
 80247d8:	fb28 2204 	smlad	r2, r8, r4, r2
 80247dc:	4c44      	ldr	r4, [pc, #272]	@ (80248f0 <D128_GENERIC+0x3b4>)
 80247de:	fb23 2304 	smlad	r3, r3, r4, r2
 80247e2:	9303      	str	r3, [sp, #12]
 80247e4:	f5a6 1680 	sub.w	r6, r6, #1048576	@ 0x100000
 80247e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80247ea:	b193      	cbz	r3, 8024812 <D128_GENERIC+0x2d6>
 80247ec:	9a06      	ldr	r2, [sp, #24]
 80247ee:	9807      	ldr	r0, [sp, #28]
 80247f0:	4432      	add	r2, r6
 80247f2:	9607      	str	r6, [sp, #28]
 80247f4:	461e      	mov	r6, r3
 80247f6:	1a12      	subs	r2, r2, r0
 80247f8:	17d5      	asrs	r5, r2, #31
 80247fa:	fba2 2303 	umull	r2, r3, r2, r3
 80247fe:	fb06 3305 	mla	r3, r6, r5, r3
 8024802:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8024806:	f143 0300 	adc.w	r3, r3, #0
 802480a:	fa03 f30c 	lsl.w	r3, r3, ip
 802480e:	461e      	mov	r6, r3
 8024810:	9306      	str	r3, [sp, #24]
 8024812:	9c01      	ldr	r4, [sp, #4]
 8024814:	01f6      	lsls	r6, r6, #7
 8024816:	9d05      	ldr	r5, [sp, #20]
 8024818:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 802481c:	8d20      	ldrh	r0, [r4, #40]	@ 0x28
 802481e:	2300      	movs	r3, #0
 8024820:	9f08      	ldr	r7, [sp, #32]
 8024822:	fb05 f000 	mul.w	r0, r5, r0
 8024826:	3501      	adds	r5, #1
 8024828:	fbc7 2306 	smlal	r2, r3, r7, r6
 802482c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 802482e:	109b      	asrs	r3, r3, #2
 8024830:	9505      	str	r5, [sp, #20]
 8024832:	f303 030f 	ssat	r3, #16, r3
 8024836:	f822 3010 	strh.w	r3, [r2, r0, lsl #1]
 802483a:	8ce3      	ldrh	r3, [r4, #38]	@ 0x26
 802483c:	42ab      	cmp	r3, r5
 802483e:	dd16      	ble.n	802486e <D128_GENERIC+0x332>
 8024840:	9b01      	ldr	r3, [sp, #4]
 8024842:	8d5a      	ldrh	r2, [r3, #42]	@ 0x2a
 8024844:	2a01      	cmp	r2, #1
 8024846:	f47f ae9d 	bne.w	8024584 <D128_GENERIC+0x48>
 802484a:	6b58      	ldr	r0, [r3, #52]	@ 0x34
 802484c:	f109 0204 	add.w	r2, r9, #4
 8024850:	f109 0510 	add.w	r5, r9, #16
 8024854:	f8d9 4000 	ldr.w	r4, [r9]
 8024858:	0680      	lsls	r0, r0, #26
 802485a:	ca4c      	ldmia	r2, {r2, r3, r6}
 802485c:	d505      	bpl.n	802486a <D128_GENERIC+0x32e>
 802485e:	ba64      	rev16	r4, r4
 8024860:	ba52      	rev16	r2, r2
 8024862:	ba5b      	rev16	r3, r3
 8024864:	ba76      	rev16	r6, r6
 8024866:	46a9      	mov	r9, r5
 8024868:	e6e0      	b.n	802462c <D128_GENERIC+0xf0>
 802486a:	46a9      	mov	r9, r5
 802486c:	e6de      	b.n	802462c <D128_GENERIC+0xf0>
 802486e:	f8dd a010 	ldr.w	sl, [sp, #16]
 8024872:	9a01      	ldr	r2, [sp, #4]
 8024874:	2000      	movs	r0, #0
 8024876:	9903      	ldr	r1, [sp, #12]
 8024878:	4613      	mov	r3, r2
 802487a:	f8c2 a01c 	str.w	sl, [r2, #28]
 802487e:	6091      	str	r1, [r2, #8]
 8024880:	9902      	ldr	r1, [sp, #8]
 8024882:	60d1      	str	r1, [r2, #12]
 8024884:	9907      	ldr	r1, [sp, #28]
 8024886:	9a06      	ldr	r2, [sp, #24]
 8024888:	6159      	str	r1, [r3, #20]
 802488a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 802488c:	611a      	str	r2, [r3, #16]
 802488e:	6199      	str	r1, [r3, #24]
 8024890:	b00d      	add	sp, #52	@ 0x34
 8024892:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024896:	bf00      	nop
 8024898:	24000000 	.word	0x24000000
 802489c:	00780069 	.word	0x00780069
 80248a0:	005b004e 	.word	0x005b004e
 80248a4:	00420037 	.word	0x00420037
 80248a8:	002d0024 	.word	0x002d0024
 80248ac:	001c0015 	.word	0x001c0015
 80248b0:	000f000a 	.word	0x000f000a
 80248b4:	00060003 	.word	0x00060003
 80248b8:	00880096 	.word	0x00880096
 80248bc:	00a200ac 	.word	0x00a200ac
 80248c0:	00b400ba 	.word	0x00b400ba
 80248c4:	00be00c0 	.word	0x00be00c0
 80248c8:	00c000be 	.word	0x00c000be
 80248cc:	00ba00b4 	.word	0x00ba00b4
 80248d0:	00ac00a2 	.word	0x00ac00a2
 80248d4:	00960088 	.word	0x00960088
 80248d8:	00030006 	.word	0x00030006
 80248dc:	000a000f 	.word	0x000a000f
 80248e0:	0015001c 	.word	0x0015001c
 80248e4:	0024002d 	.word	0x0024002d
 80248e8:	00370042 	.word	0x00370042
 80248ec:	004e005b 	.word	0x004e005b
 80248f0:	00690078 	.word	0x00690078

080248f4 <D16_1CH_HTONS_VOL_HP>:
 80248f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80248f8:	4692      	mov	sl, r2
 80248fa:	b087      	sub	sp, #28
 80248fc:	4681      	mov	r9, r0
 80248fe:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8024900:	f8da 3018 	ldr.w	r3, [sl, #24]
 8024904:	f8da 000c 	ldr.w	r0, [sl, #12]
 8024908:	9303      	str	r3, [sp, #12]
 802490a:	f8da 6010 	ldr.w	r6, [sl, #16]
 802490e:	f8da 5014 	ldr.w	r5, [sl, #20]
 8024912:	f8da 301c 	ldr.w	r3, [sl, #28]
 8024916:	f8da 4008 	ldr.w	r4, [sl, #8]
 802491a:	9004      	str	r0, [sp, #16]
 802491c:	f8da b030 	ldr.w	fp, [sl, #48]	@ 0x30
 8024920:	f8da e020 	ldr.w	lr, [sl, #32]
 8024924:	2a00      	cmp	r2, #0
 8024926:	d05a      	beq.n	80249de <D16_1CH_HTONS_VOL_HP+0xea>
 8024928:	f1a1 0802 	sub.w	r8, r1, #2
 802492c:	eb09 0242 	add.w	r2, r9, r2, lsl #1
 8024930:	f8cd b008 	str.w	fp, [sp, #8]
 8024934:	46cb      	mov	fp, r9
 8024936:	f8cd a014 	str.w	sl, [sp, #20]
 802493a:	46c2      	mov	sl, r8
 802493c:	f8df c0ac 	ldr.w	ip, [pc, #172]	@ 80249ec <D16_1CH_HTONS_VOL_HP+0xf8>
 8024940:	9201      	str	r2, [sp, #4]
 8024942:	f85b 2b02 	ldr.w	r2, [fp], #2
 8024946:	ba52      	rev16	r2, r2
 8024948:	b2d0      	uxtb	r0, r2
 802494a:	f3c2 2107 	ubfx	r1, r2, #8, #8
 802494e:	f85c 2020 	ldr.w	r2, [ip, r0, lsl #2]
 8024952:	f85c 0021 	ldr.w	r0, [ip, r1, lsl #2]
 8024956:	4413      	add	r3, r2
 8024958:	eb00 2093 	add.w	r0, r0, r3, lsr #10
 802495c:	f3c3 0209 	ubfx	r2, r3, #0, #10
 8024960:	f3c0 0109 	ubfx	r1, r0, #0, #10
 8024964:	0a83      	lsrs	r3, r0, #10
 8024966:	ea41 4202 	orr.w	r2, r1, r2, lsl #16
 802496a:	491e      	ldr	r1, [pc, #120]	@ (80249e4 <D16_1CH_HTONS_VOL_HP+0xf0>)
 802496c:	fb22 4101 	smlad	r1, r2, r1, r4
 8024970:	481d      	ldr	r0, [pc, #116]	@ (80249e8 <D16_1CH_HTONS_VOL_HP+0xf4>)
 8024972:	fb22 f400 	smuad	r4, r2, r0
 8024976:	f5a1 6200 	sub.w	r2, r1, #2048	@ 0x800
 802497a:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 802497e:	f04f 0900 	mov.w	r9, #0
 8024982:	1990      	adds	r0, r2, r6
 8024984:	1b40      	subs	r0, r0, r5
 8024986:	4615      	mov	r5, r2
 8024988:	17c7      	asrs	r7, r0, #31
 802498a:	fba0 010e 	umull	r0, r1, r0, lr
 802498e:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8024992:	fb0e 1107 	mla	r1, lr, r7, r1
 8024996:	f141 0100 	adc.w	r1, r1, #0
 802499a:	0448      	lsls	r0, r1, #17
 802499c:	004e      	lsls	r6, r1, #1
 802499e:	9902      	ldr	r1, [sp, #8]
 80249a0:	fbc0 8901 	smlal	r8, r9, r0, r1
 80249a4:	ea4f 01a9 	mov.w	r1, r9, asr #2
 80249a8:	f301 010f 	ssat	r1, #16, r1
 80249ac:	f82a 1f02 	strh.w	r1, [sl, #2]!
 80249b0:	9901      	ldr	r1, [sp, #4]
 80249b2:	458b      	cmp	fp, r1
 80249b4:	d1c5      	bne.n	8024942 <D16_1CH_HTONS_VOL_HP+0x4e>
 80249b6:	f8dd a014 	ldr.w	sl, [sp, #20]
 80249ba:	9904      	ldr	r1, [sp, #16]
 80249bc:	2000      	movs	r0, #0
 80249be:	f8ca 301c 	str.w	r3, [sl, #28]
 80249c2:	9b03      	ldr	r3, [sp, #12]
 80249c4:	f8ca 4008 	str.w	r4, [sl, #8]
 80249c8:	f8ca 100c 	str.w	r1, [sl, #12]
 80249cc:	f8ca 6010 	str.w	r6, [sl, #16]
 80249d0:	f8ca 2014 	str.w	r2, [sl, #20]
 80249d4:	f8ca 3018 	str.w	r3, [sl, #24]
 80249d8:	b007      	add	sp, #28
 80249da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80249de:	462a      	mov	r2, r5
 80249e0:	4601      	mov	r1, r0
 80249e2:	e7eb      	b.n	80249bc <D16_1CH_HTONS_VOL_HP+0xc8>
 80249e4:	00030001 	.word	0x00030001
 80249e8:	00010003 	.word	0x00010003
 80249ec:	24000000 	.word	0x24000000

080249f0 <D24_1CH_HTONS_VOL_HP>:
 80249f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80249f4:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80249f6:	b087      	sub	sp, #28
 80249f8:	4616      	mov	r6, r2
 80249fa:	6914      	ldr	r4, [r2, #16]
 80249fc:	9302      	str	r3, [sp, #8]
 80249fe:	9205      	str	r2, [sp, #20]
 8024a00:	f8d2 9014 	ldr.w	r9, [r2, #20]
 8024a04:	6b37      	ldr	r7, [r6, #48]	@ 0x30
 8024a06:	6992      	ldr	r2, [r2, #24]
 8024a08:	9d02      	ldr	r5, [sp, #8]
 8024a0a:	9204      	str	r2, [sp, #16]
 8024a0c:	68b3      	ldr	r3, [r6, #8]
 8024a0e:	69f2      	ldr	r2, [r6, #28]
 8024a10:	f8d6 800c 	ldr.w	r8, [r6, #12]
 8024a14:	9703      	str	r7, [sp, #12]
 8024a16:	f8d6 a020 	ldr.w	sl, [r6, #32]
 8024a1a:	2d00      	cmp	r5, #0
 8024a1c:	d076      	beq.n	8024b0c <D24_1CH_HTONS_VOL_HP+0x11c>
 8024a1e:	f04f 0e00 	mov.w	lr, #0
 8024a22:	f1a1 0b02 	sub.w	fp, r1, #2
 8024a26:	f8df c0f4 	ldr.w	ip, [pc, #244]	@ 8024b1c <D24_1CH_HTONS_VOL_HP+0x12c>
 8024a2a:	f8cd 8004 	str.w	r8, [sp, #4]
 8024a2e:	e052      	b.n	8024ad6 <D24_1CH_HTONS_VOL_HP+0xe6>
 8024a30:	7801      	ldrb	r1, [r0, #0]
 8024a32:	3002      	adds	r0, #2
 8024a34:	7847      	ldrb	r7, [r0, #1]
 8024a36:	0209      	lsls	r1, r1, #8
 8024a38:	f810 5c01 	ldrb.w	r5, [r0, #-1]
 8024a3c:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 8024a40:	442f      	add	r7, r5
 8024a42:	b2fd      	uxtb	r5, r7
 8024a44:	f3c7 2107 	ubfx	r1, r7, #8, #8
 8024a48:	0c3f      	lsrs	r7, r7, #16
 8024a4a:	f85c 5025 	ldr.w	r5, [ip, r5, lsl #2]
 8024a4e:	f85c 6021 	ldr.w	r6, [ip, r1, lsl #2]
 8024a52:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8024a56:	f85c 2027 	ldr.w	r2, [ip, r7, lsl #2]
 8024a5a:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8024a5e:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8024a62:	f3c6 0109 	ubfx	r1, r6, #0, #10
 8024a66:	eb02 2296 	add.w	r2, r2, r6, lsr #10
 8024a6a:	9e01      	ldr	r6, [sp, #4]
 8024a6c:	ea41 4505 	orr.w	r5, r1, r5, lsl #16
 8024a70:	4928      	ldr	r1, [pc, #160]	@ (8024b14 <D24_1CH_HTONS_VOL_HP+0x124>)
 8024a72:	fb25 6701 	smlad	r7, r5, r1, r6
 8024a76:	4928      	ldr	r1, [pc, #160]	@ (8024b18 <D24_1CH_HTONS_VOL_HP+0x128>)
 8024a78:	fb25 3801 	smlad	r8, r5, r1, r3
 8024a7c:	f3c2 0309 	ubfx	r3, r2, #0, #10
 8024a80:	eb03 0643 	add.w	r6, r3, r3, lsl #1
 8024a84:	eb08 0346 	add.w	r3, r8, r6, lsl #1
 8024a88:	9301      	str	r3, [sp, #4]
 8024a8a:	2301      	movs	r3, #1
 8024a8c:	fb25 f503 	smuad	r5, r5, r3
 8024a90:	f5a7 51d8 	sub.w	r1, r7, #6912	@ 0x1b00
 8024a94:	449e      	add	lr, r3
 8024a96:	1973      	adds	r3, r6, r5
 8024a98:	f04f 0800 	mov.w	r8, #0
 8024a9c:	440c      	add	r4, r1
 8024a9e:	eba4 0409 	sub.w	r4, r4, r9
 8024aa2:	4689      	mov	r9, r1
 8024aa4:	17e7      	asrs	r7, r4, #31
 8024aa6:	fba4 450a 	umull	r4, r5, r4, sl
 8024aaa:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8024aae:	fb0a 5507 	mla	r5, sl, r7, r5
 8024ab2:	f04f 4700 	mov.w	r7, #2147483648	@ 0x80000000
 8024ab6:	f145 0500 	adc.w	r5, r5, #0
 8024aba:	03ee      	lsls	r6, r5, #15
 8024abc:	006c      	lsls	r4, r5, #1
 8024abe:	9d03      	ldr	r5, [sp, #12]
 8024ac0:	fbc5 7806 	smlal	r7, r8, r5, r6
 8024ac4:	4647      	mov	r7, r8
 8024ac6:	10bd      	asrs	r5, r7, #2
 8024ac8:	f305 050f 	ssat	r5, #16, r5
 8024acc:	f82b 5f02 	strh.w	r5, [fp, #2]!
 8024ad0:	9d02      	ldr	r5, [sp, #8]
 8024ad2:	45ae      	cmp	lr, r5
 8024ad4:	d00b      	beq.n	8024aee <D24_1CH_HTONS_VOL_HP+0xfe>
 8024ad6:	f01e 0f01 	tst.w	lr, #1
 8024ada:	d0a9      	beq.n	8024a30 <D24_1CH_HTONS_VOL_HP+0x40>
 8024adc:	78c1      	ldrb	r1, [r0, #3]
 8024ade:	7887      	ldrb	r7, [r0, #2]
 8024ae0:	0209      	lsls	r1, r1, #8
 8024ae2:	f810 5b04 	ldrb.w	r5, [r0], #4
 8024ae6:	eb01 4707 	add.w	r7, r1, r7, lsl #16
 8024aea:	442f      	add	r7, r5
 8024aec:	e7a9      	b.n	8024a42 <D24_1CH_HTONS_VOL_HP+0x52>
 8024aee:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8024af2:	9d05      	ldr	r5, [sp, #20]
 8024af4:	2000      	movs	r0, #0
 8024af6:	6169      	str	r1, [r5, #20]
 8024af8:	9904      	ldr	r1, [sp, #16]
 8024afa:	60ab      	str	r3, [r5, #8]
 8024afc:	f8c5 800c 	str.w	r8, [r5, #12]
 8024b00:	61ea      	str	r2, [r5, #28]
 8024b02:	612c      	str	r4, [r5, #16]
 8024b04:	61a9      	str	r1, [r5, #24]
 8024b06:	b007      	add	sp, #28
 8024b08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024b0c:	4649      	mov	r1, r9
 8024b0e:	4635      	mov	r5, r6
 8024b10:	e7f0      	b.n	8024af4 <D24_1CH_HTONS_VOL_HP+0x104>
 8024b12:	bf00      	nop
 8024b14:	00030001 	.word	0x00030001
 8024b18:	00060007 	.word	0x00060007
 8024b1c:	24000000 	.word	0x24000000

08024b20 <D32_1CH_HTONS_VOL_HP>:
 8024b20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024b24:	4693      	mov	fp, r2
 8024b26:	b087      	sub	sp, #28
 8024b28:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8024b2a:	f8db 3018 	ldr.w	r3, [fp, #24]
 8024b2e:	f8db 5030 	ldr.w	r5, [fp, #48]	@ 0x30
 8024b32:	9304      	str	r3, [sp, #16]
 8024b34:	f8db 4010 	ldr.w	r4, [fp, #16]
 8024b38:	f8db c014 	ldr.w	ip, [fp, #20]
 8024b3c:	f8db 601c 	ldr.w	r6, [fp, #28]
 8024b40:	f8db 3008 	ldr.w	r3, [fp, #8]
 8024b44:	f8db e00c 	ldr.w	lr, [fp, #12]
 8024b48:	9502      	str	r5, [sp, #8]
 8024b4a:	f8db a020 	ldr.w	sl, [fp, #32]
 8024b4e:	2a00      	cmp	r2, #0
 8024b50:	d07d      	beq.n	8024c4e <D32_1CH_HTONS_VOL_HP+0x12e>
 8024b52:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8024b56:	9101      	str	r1, [sp, #4]
 8024b58:	f8cd b014 	str.w	fp, [sp, #20]
 8024b5c:	4621      	mov	r1, r4
 8024b5e:	4f3d      	ldr	r7, [pc, #244]	@ (8024c54 <D32_1CH_HTONS_VOL_HP+0x134>)
 8024b60:	4693      	mov	fp, r2
 8024b62:	f8cd a00c 	str.w	sl, [sp, #12]
 8024b66:	f850 2b04 	ldr.w	r2, [r0], #4
 8024b6a:	fa92 f992 	rev16.w	r9, r2
 8024b6e:	fa5f f889 	uxtb.w	r8, r9
 8024b72:	f3c9 2207 	ubfx	r2, r9, #8, #8
 8024b76:	f3c9 4507 	ubfx	r5, r9, #16, #8
 8024b7a:	ea4f 6919 	mov.w	r9, r9, lsr #24
 8024b7e:	f857 8028 	ldr.w	r8, [r7, r8, lsl #2]
 8024b82:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
 8024b86:	eb08 2896 	add.w	r8, r8, r6, lsr #10
 8024b8a:	f857 5025 	ldr.w	r5, [r7, r5, lsl #2]
 8024b8e:	f857 6029 	ldr.w	r6, [r7, r9, lsl #2]
 8024b92:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8024b96:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8024b9a:	4c2f      	ldr	r4, [pc, #188]	@ (8024c58 <D32_1CH_HTONS_VOL_HP+0x138>)
 8024b9c:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8024ba0:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8024ba4:	eb06 2695 	add.w	r6, r6, r5, lsr #10
 8024ba8:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8024bac:	ea42 4208 	orr.w	r2, r2, r8, lsl #16
 8024bb0:	f3c6 0809 	ubfx	r8, r6, #0, #10
 8024bb4:	ea48 4505 	orr.w	r5, r8, r5, lsl #16
 8024bb8:	fb22 ee04 	smlad	lr, r2, r4, lr
 8024bbc:	f44f 3480 	mov.w	r4, #65536	@ 0x10000
 8024bc0:	fb25 e904 	smlad	r9, r5, r4, lr
 8024bc4:	4c25      	ldr	r4, [pc, #148]	@ (8024c5c <D32_1CH_HTONS_VOL_HP+0x13c>)
 8024bc6:	fb22 3e04 	smlad	lr, r2, r4, r3
 8024bca:	4b25      	ldr	r3, [pc, #148]	@ (8024c60 <D32_1CH_HTONS_VOL_HP+0x140>)
 8024bcc:	fb25 ee03 	smlad	lr, r5, r3, lr
 8024bd0:	2301      	movs	r3, #1
 8024bd2:	fb22 f203 	smuad	r2, r2, r3
 8024bd6:	4b23      	ldr	r3, [pc, #140]	@ (8024c64 <D32_1CH_HTONS_VOL_HP+0x144>)
 8024bd8:	fb25 2303 	smlad	r3, r5, r3, r2
 8024bdc:	f5a9 4280 	sub.w	r2, r9, #16384	@ 0x4000
 8024be0:	f04f 0a00 	mov.w	sl, #0
 8024be4:	4411      	add	r1, r2
 8024be6:	eba1 040c 	sub.w	r4, r1, ip
 8024bea:	9903      	ldr	r1, [sp, #12]
 8024bec:	4694      	mov	ip, r2
 8024bee:	ea4f 79e4 	mov.w	r9, r4, asr #31
 8024bf2:	fba4 4501 	umull	r4, r5, r4, r1
 8024bf6:	fb01 5509 	mla	r5, r1, r9, r5
 8024bfa:	f114 4400 	adds.w	r4, r4, #2147483648	@ 0x80000000
 8024bfe:	f04f 4900 	mov.w	r9, #2147483648	@ 0x80000000
 8024c02:	9c02      	ldr	r4, [sp, #8]
 8024c04:	f145 0500 	adc.w	r5, r5, #0
 8024c08:	ea4f 3885 	mov.w	r8, r5, lsl #14
 8024c0c:	0069      	lsls	r1, r5, #1
 8024c0e:	fbc8 9a04 	smlal	r9, sl, r8, r4
 8024c12:	9c01      	ldr	r4, [sp, #4]
 8024c14:	ea4f 05aa 	mov.w	r5, sl, asr #2
 8024c18:	f305 050f 	ssat	r5, #16, r5
 8024c1c:	f824 5b02 	strh.w	r5, [r4], #2
 8024c20:	455c      	cmp	r4, fp
 8024c22:	9401      	str	r4, [sp, #4]
 8024c24:	d19f      	bne.n	8024b66 <D32_1CH_HTONS_VOL_HP+0x46>
 8024c26:	460c      	mov	r4, r1
 8024c28:	f8dd b014 	ldr.w	fp, [sp, #20]
 8024c2c:	f8cb 3008 	str.w	r3, [fp, #8]
 8024c30:	2000      	movs	r0, #0
 8024c32:	9b04      	ldr	r3, [sp, #16]
 8024c34:	f8cb e00c 	str.w	lr, [fp, #12]
 8024c38:	f8cb 601c 	str.w	r6, [fp, #28]
 8024c3c:	f8cb 4010 	str.w	r4, [fp, #16]
 8024c40:	f8cb 2014 	str.w	r2, [fp, #20]
 8024c44:	f8cb 3018 	str.w	r3, [fp, #24]
 8024c48:	b007      	add	sp, #28
 8024c4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024c4e:	4662      	mov	r2, ip
 8024c50:	e7ec      	b.n	8024c2c <D32_1CH_HTONS_VOL_HP+0x10c>
 8024c52:	bf00      	nop
 8024c54:	24000000 	.word	0x24000000
 8024c58:	00060003 	.word	0x00060003
 8024c5c:	000a000c 	.word	0x000a000c
 8024c60:	000c000a 	.word	0x000c000a
 8024c64:	00030006 	.word	0x00030006

08024c68 <D48_1CH_HTONS_VOL_HP>:
 8024c68:	4613      	mov	r3, r2
 8024c6a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024c6e:	461c      	mov	r4, r3
 8024c70:	b087      	sub	sp, #28
 8024c72:	4680      	mov	r8, r0
 8024c74:	691e      	ldr	r6, [r3, #16]
 8024c76:	4610      	mov	r0, r2
 8024c78:	f8d3 9014 	ldr.w	r9, [r3, #20]
 8024c7c:	699b      	ldr	r3, [r3, #24]
 8024c7e:	9205      	str	r2, [sp, #20]
 8024c80:	9304      	str	r3, [sp, #16]
 8024c82:	69c5      	ldr	r5, [r0, #28]
 8024c84:	6883      	ldr	r3, [r0, #8]
 8024c86:	f8d0 e00c 	ldr.w	lr, [r0, #12]
 8024c8a:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8024c8c:	6b00      	ldr	r0, [r0, #48]	@ 0x30
 8024c8e:	f8d4 b020 	ldr.w	fp, [r4, #32]
 8024c92:	9002      	str	r0, [sp, #8]
 8024c94:	2a00      	cmp	r2, #0
 8024c96:	f000 8097 	beq.w	8024dc8 <D48_1CH_HTONS_VOL_HP+0x160>
 8024c9a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8024c9e:	468c      	mov	ip, r1
 8024ca0:	4c4a      	ldr	r4, [pc, #296]	@ (8024dcc <D48_1CH_HTONS_VOL_HP+0x164>)
 8024ca2:	4619      	mov	r1, r3
 8024ca4:	4640      	mov	r0, r8
 8024ca6:	9203      	str	r2, [sp, #12]
 8024ca8:	f8cd 9004 	str.w	r9, [sp, #4]
 8024cac:	6803      	ldr	r3, [r0, #0]
 8024cae:	3006      	adds	r0, #6
 8024cb0:	f850 2c02 	ldr.w	r2, [r0, #-2]
 8024cb4:	ba5b      	rev16	r3, r3
 8024cb6:	fa92 fa92 	rev16.w	sl, r2
 8024cba:	fa5f f883 	uxtb.w	r8, r3
 8024cbe:	f3c3 2707 	ubfx	r7, r3, #8, #8
 8024cc2:	f3c3 4207 	ubfx	r2, r3, #16, #8
 8024cc6:	0e1b      	lsrs	r3, r3, #24
 8024cc8:	f854 9028 	ldr.w	r9, [r4, r8, lsl #2]
 8024ccc:	f854 7027 	ldr.w	r7, [r4, r7, lsl #2]
 8024cd0:	eb09 2995 	add.w	r9, r9, r5, lsr #10
 8024cd4:	f854 5022 	ldr.w	r5, [r4, r2, lsl #2]
 8024cd8:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
 8024cdc:	fa5f f28a 	uxtb.w	r2, sl
 8024ce0:	eb07 2799 	add.w	r7, r7, r9, lsr #10
 8024ce4:	f3ca 2a07 	ubfx	sl, sl, #8, #8
 8024ce8:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8024cec:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8024cf0:	eb05 2897 	add.w	r8, r5, r7, lsr #10
 8024cf4:	f854 502a 	ldr.w	r5, [r4, sl, lsl #2]
 8024cf8:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8024cfc:	eb03 2398 	add.w	r3, r3, r8, lsr #10
 8024d00:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8024d04:	ea47 4709 	orr.w	r7, r7, r9, lsl #16
 8024d08:	eb02 2293 	add.w	r2, r2, r3, lsr #10
 8024d0c:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8024d10:	eb05 2592 	add.w	r5, r5, r2, lsr #10
 8024d14:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8024d18:	ea43 4808 	orr.w	r8, r3, r8, lsl #16
 8024d1c:	f3c5 0309 	ubfx	r3, r5, #0, #10
 8024d20:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
 8024d24:	4b2a      	ldr	r3, [pc, #168]	@ (8024dd0 <D48_1CH_HTONS_VOL_HP+0x168>)
 8024d26:	fb27 ea03 	smlad	sl, r7, r3, lr
 8024d2a:	4b2a      	ldr	r3, [pc, #168]	@ (8024dd4 <D48_1CH_HTONS_VOL_HP+0x16c>)
 8024d2c:	fb28 aa03 	smlad	sl, r8, r3, sl
 8024d30:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8024d34:	fb22 aa03 	smlad	sl, r2, r3, sl
 8024d38:	4b27      	ldr	r3, [pc, #156]	@ (8024dd8 <D48_1CH_HTONS_VOL_HP+0x170>)
 8024d3a:	fb27 1e03 	smlad	lr, r7, r3, r1
 8024d3e:	f04f 131b 	mov.w	r3, #1769499	@ 0x1b001b
 8024d42:	fb28 ee03 	smlad	lr, r8, r3, lr
 8024d46:	4b25      	ldr	r3, [pc, #148]	@ (8024ddc <D48_1CH_HTONS_VOL_HP+0x174>)
 8024d48:	fb22 ee03 	smlad	lr, r2, r3, lr
 8024d4c:	f04f 0901 	mov.w	r9, #1
 8024d50:	fb27 f709 	smuad	r7, r7, r9
 8024d54:	4b22      	ldr	r3, [pc, #136]	@ (8024de0 <D48_1CH_HTONS_VOL_HP+0x178>)
 8024d56:	fb28 7803 	smlad	r8, r8, r3, r7
 8024d5a:	4b22      	ldr	r3, [pc, #136]	@ (8024de4 <D48_1CH_HTONS_VOL_HP+0x17c>)
 8024d5c:	fb22 8103 	smlad	r1, r2, r3, r8
 8024d60:	f5aa 4a58 	sub.w	sl, sl, #55296	@ 0xd800
 8024d64:	9b01      	ldr	r3, [sp, #4]
 8024d66:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8024d6a:	eb0a 0206 	add.w	r2, sl, r6
 8024d6e:	f8cd a004 	str.w	sl, [sp, #4]
 8024d72:	1ad2      	subs	r2, r2, r3
 8024d74:	17d7      	asrs	r7, r2, #31
 8024d76:	fba2 230b 	umull	r2, r3, r2, fp
 8024d7a:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8024d7e:	fb0b 3307 	mla	r3, fp, r7, r3
 8024d82:	f143 0300 	adc.w	r3, r3, #0
 8024d86:	031a      	lsls	r2, r3, #12
 8024d88:	fa03 f609 	lsl.w	r6, r3, r9
 8024d8c:	9b02      	ldr	r3, [sp, #8]
 8024d8e:	f04f 0900 	mov.w	r9, #0
 8024d92:	fbc2 8903 	smlal	r8, r9, r2, r3
 8024d96:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8024d9a:	f303 030f 	ssat	r3, #16, r3
 8024d9e:	f82c 3b02 	strh.w	r3, [ip], #2
 8024da2:	9b03      	ldr	r3, [sp, #12]
 8024da4:	459c      	cmp	ip, r3
 8024da6:	d181      	bne.n	8024cac <D48_1CH_HTONS_VOL_HP+0x44>
 8024da8:	460b      	mov	r3, r1
 8024daa:	9905      	ldr	r1, [sp, #20]
 8024dac:	2000      	movs	r0, #0
 8024dae:	460a      	mov	r2, r1
 8024db0:	608b      	str	r3, [r1, #8]
 8024db2:	f8c1 e00c 	str.w	lr, [r1, #12]
 8024db6:	61cd      	str	r5, [r1, #28]
 8024db8:	610e      	str	r6, [r1, #16]
 8024dba:	f8c1 a014 	str.w	sl, [r1, #20]
 8024dbe:	9904      	ldr	r1, [sp, #16]
 8024dc0:	6191      	str	r1, [r2, #24]
 8024dc2:	b007      	add	sp, #28
 8024dc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024dc8:	46ca      	mov	sl, r9
 8024dca:	e7ee      	b.n	8024daa <D48_1CH_HTONS_VOL_HP+0x142>
 8024dcc:	24000000 	.word	0x24000000
 8024dd0:	000f000a 	.word	0x000f000a
 8024dd4:	00060003 	.word	0x00060003
 8024dd8:	00150019 	.word	0x00150019
 8024ddc:	00190015 	.word	0x00190015
 8024de0:	00030006 	.word	0x00030006
 8024de4:	000a000f 	.word	0x000a000f

08024de8 <D64_1CH_HTONS_VOL_HP>:
 8024de8:	4613      	mov	r3, r2
 8024dea:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024dee:	f8d3 c014 	ldr.w	ip, [r3, #20]
 8024df2:	461d      	mov	r5, r3
 8024df4:	b087      	sub	sp, #28
 8024df6:	699b      	ldr	r3, [r3, #24]
 8024df8:	462e      	mov	r6, r5
 8024dfa:	69ef      	ldr	r7, [r5, #28]
 8024dfc:	9304      	str	r3, [sp, #16]
 8024dfe:	4614      	mov	r4, r2
 8024e00:	68ab      	ldr	r3, [r5, #8]
 8024e02:	f8d5 e00c 	ldr.w	lr, [r5, #12]
 8024e06:	6b2d      	ldr	r5, [r5, #48]	@ 0x30
 8024e08:	9205      	str	r2, [sp, #20]
 8024e0a:	9501      	str	r5, [sp, #4]
 8024e0c:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8024e0e:	6a35      	ldr	r5, [r6, #32]
 8024e10:	6924      	ldr	r4, [r4, #16]
 8024e12:	9502      	str	r5, [sp, #8]
 8024e14:	2a00      	cmp	r2, #0
 8024e16:	f000 80ae 	beq.w	8024f76 <D64_1CH_HTONS_VOL_HP+0x18e>
 8024e1a:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8024e1e:	4e57      	ldr	r6, [pc, #348]	@ (8024f7c <D64_1CH_HTONS_VOL_HP+0x194>)
 8024e20:	461d      	mov	r5, r3
 8024e22:	9203      	str	r2, [sp, #12]
 8024e24:	f850 2b08 	ldr.w	r2, [r0], #8
 8024e28:	f850 3c04 	ldr.w	r3, [r0, #-4]
 8024e2c:	fa92 f892 	rev16.w	r8, r2
 8024e30:	fa93 fb93 	rev16.w	fp, r3
 8024e34:	fa5f f288 	uxtb.w	r2, r8
 8024e38:	f3c8 2907 	ubfx	r9, r8, #8, #8
 8024e3c:	f3c8 4307 	ubfx	r3, r8, #16, #8
 8024e40:	ea4f 6818 	mov.w	r8, r8, lsr #24
 8024e44:	f856 a022 	ldr.w	sl, [r6, r2, lsl #2]
 8024e48:	fa5f f28b 	uxtb.w	r2, fp
 8024e4c:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 8024e50:	4457      	add	r7, sl
 8024e52:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024e56:	f856 8028 	ldr.w	r8, [r6, r8, lsl #2]
 8024e5a:	eb09 2997 	add.w	r9, r9, r7, lsr #10
 8024e5e:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8024e62:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8024e66:	eb03 2a99 	add.w	sl, r3, r9, lsr #10
 8024e6a:	f3cb 2307 	ubfx	r3, fp, #8, #8
 8024e6e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8024e72:	eb08 289a 	add.w	r8, r8, sl, lsr #10
 8024e76:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 8024e7a:	ea49 4907 	orr.w	r9, r9, r7, lsl #16
 8024e7e:	f3cb 4707 	ubfx	r7, fp, #16, #8
 8024e82:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 8024e86:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8024e8a:	f856 7027 	ldr.w	r7, [r6, r7, lsl #2]
 8024e8e:	ea4f 6b1b 	mov.w	fp, fp, lsr #24
 8024e92:	eb03 2392 	add.w	r3, r3, r2, lsr #10
 8024e96:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8024e9a:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8024e9e:	f3c2 0209 	ubfx	r2, r2, #0, #10
 8024ea2:	eb07 2793 	add.w	r7, r7, r3, lsr #10
 8024ea6:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8024eaa:	ea48 480a 	orr.w	r8, r8, sl, lsl #16
 8024eae:	eb0b 2b97 	add.w	fp, fp, r7, lsr #10
 8024eb2:	f3c7 0a09 	ubfx	sl, r7, #0, #10
 8024eb6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8024eba:	f3cb 0209 	ubfx	r2, fp, #0, #10
 8024ebe:	ea4f 279b 	mov.w	r7, fp, lsr #10
 8024ec2:	ea42 4b0a 	orr.w	fp, r2, sl, lsl #16
 8024ec6:	4a2e      	ldr	r2, [pc, #184]	@ (8024f80 <D64_1CH_HTONS_VOL_HP+0x198>)
 8024ec8:	fb29 ee02 	smlad	lr, r9, r2, lr
 8024ecc:	4a2d      	ldr	r2, [pc, #180]	@ (8024f84 <D64_1CH_HTONS_VOL_HP+0x19c>)
 8024ece:	fb28 ee02 	smlad	lr, r8, r2, lr
 8024ed2:	4a2d      	ldr	r2, [pc, #180]	@ (8024f88 <D64_1CH_HTONS_VOL_HP+0x1a0>)
 8024ed4:	fb23 ee02 	smlad	lr, r3, r2, lr
 8024ed8:	f44f 3a80 	mov.w	sl, #65536	@ 0x10000
 8024edc:	fb2b ea0a 	smlad	sl, fp, sl, lr
 8024ee0:	4a2a      	ldr	r2, [pc, #168]	@ (8024f8c <D64_1CH_HTONS_VOL_HP+0x1a4>)
 8024ee2:	fb29 5e02 	smlad	lr, r9, r2, r5
 8024ee6:	fb2b ee12 	smladx	lr, fp, r2, lr
 8024eea:	4a29      	ldr	r2, [pc, #164]	@ (8024f90 <D64_1CH_HTONS_VOL_HP+0x1a8>)
 8024eec:	fb28 ee02 	smlad	lr, r8, r2, lr
 8024ef0:	fb23 ee12 	smladx	lr, r3, r2, lr
 8024ef4:	2501      	movs	r5, #1
 8024ef6:	fb29 f905 	smuad	r9, r9, r5
 8024efa:	4a26      	ldr	r2, [pc, #152]	@ (8024f94 <D64_1CH_HTONS_VOL_HP+0x1ac>)
 8024efc:	fb28 9802 	smlad	r8, r8, r2, r9
 8024f00:	4a25      	ldr	r2, [pc, #148]	@ (8024f98 <D64_1CH_HTONS_VOL_HP+0x1b0>)
 8024f02:	fb23 8302 	smlad	r3, r3, r2, r8
 8024f06:	4a25      	ldr	r2, [pc, #148]	@ (8024f9c <D64_1CH_HTONS_VOL_HP+0x1b4>)
 8024f08:	fb2b 3502 	smlad	r5, fp, r2, r3
 8024f0c:	f5aa 3a00 	sub.w	sl, sl, #131072	@ 0x20000
 8024f10:	f04f 4800 	mov.w	r8, #2147483648	@ 0x80000000
 8024f14:	eb0a 0204 	add.w	r2, sl, r4
 8024f18:	9c02      	ldr	r4, [sp, #8]
 8024f1a:	eba2 020c 	sub.w	r2, r2, ip
 8024f1e:	46d4      	mov	ip, sl
 8024f20:	ea4f 79e2 	mov.w	r9, r2, asr #31
 8024f24:	fba2 2304 	umull	r2, r3, r2, r4
 8024f28:	fb04 3309 	mla	r3, r4, r9, r3
 8024f2c:	f112 4200 	adds.w	r2, r2, #2147483648	@ 0x80000000
 8024f30:	f04f 0900 	mov.w	r9, #0
 8024f34:	f143 0300 	adc.w	r3, r3, #0
 8024f38:	02da      	lsls	r2, r3, #11
 8024f3a:	005c      	lsls	r4, r3, #1
 8024f3c:	9b01      	ldr	r3, [sp, #4]
 8024f3e:	fbc3 8902 	smlal	r8, r9, r3, r2
 8024f42:	ea4f 03a9 	mov.w	r3, r9, asr #2
 8024f46:	f303 030f 	ssat	r3, #16, r3
 8024f4a:	f821 3b02 	strh.w	r3, [r1], #2
 8024f4e:	9b03      	ldr	r3, [sp, #12]
 8024f50:	4299      	cmp	r1, r3
 8024f52:	f47f af67 	bne.w	8024e24 <D64_1CH_HTONS_VOL_HP+0x3c>
 8024f56:	462b      	mov	r3, r5
 8024f58:	9905      	ldr	r1, [sp, #20]
 8024f5a:	2000      	movs	r0, #0
 8024f5c:	460a      	mov	r2, r1
 8024f5e:	608b      	str	r3, [r1, #8]
 8024f60:	f8c1 e00c 	str.w	lr, [r1, #12]
 8024f64:	61cf      	str	r7, [r1, #28]
 8024f66:	610c      	str	r4, [r1, #16]
 8024f68:	f8c1 a014 	str.w	sl, [r1, #20]
 8024f6c:	9904      	ldr	r1, [sp, #16]
 8024f6e:	6191      	str	r1, [r2, #24]
 8024f70:	b007      	add	sp, #28
 8024f72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8024f76:	46e2      	mov	sl, ip
 8024f78:	e7ee      	b.n	8024f58 <D64_1CH_HTONS_VOL_HP+0x170>
 8024f7a:	bf00      	nop
 8024f7c:	24000000 	.word	0x24000000
 8024f80:	001c0015 	.word	0x001c0015
 8024f84:	000f000a 	.word	0x000f000a
 8024f88:	00060003 	.word	0x00060003
 8024f8c:	0024002a 	.word	0x0024002a
 8024f90:	002e0030 	.word	0x002e0030
 8024f94:	00030006 	.word	0x00030006
 8024f98:	000a000f 	.word	0x000a000f
 8024f9c:	0015001c 	.word	0x0015001c

08024fa0 <D80_1CH_HTONS_VOL_HP>:
 8024fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8024fa4:	4614      	mov	r4, r2
 8024fa6:	b089      	sub	sp, #36	@ 0x24
 8024fa8:	4613      	mov	r3, r2
 8024faa:	6924      	ldr	r4, [r4, #16]
 8024fac:	461d      	mov	r5, r3
 8024fae:	9207      	str	r2, [sp, #28]
 8024fb0:	9401      	str	r4, [sp, #4]
 8024fb2:	461c      	mov	r4, r3
 8024fb4:	695b      	ldr	r3, [r3, #20]
 8024fb6:	68a7      	ldr	r7, [r4, #8]
 8024fb8:	9302      	str	r3, [sp, #8]
 8024fba:	69a3      	ldr	r3, [r4, #24]
 8024fbc:	f8d4 e00c 	ldr.w	lr, [r4, #12]
 8024fc0:	9306      	str	r3, [sp, #24]
 8024fc2:	69e3      	ldr	r3, [r4, #28]
 8024fc4:	6b24      	ldr	r4, [r4, #48]	@ 0x30
 8024fc6:	8cd2      	ldrh	r2, [r2, #38]	@ 0x26
 8024fc8:	9403      	str	r4, [sp, #12]
 8024fca:	6a2c      	ldr	r4, [r5, #32]
 8024fcc:	9404      	str	r4, [sp, #16]
 8024fce:	2a00      	cmp	r2, #0
 8024fd0:	f000 80ca 	beq.w	8025168 <D80_1CH_HTONS_VOL_HP+0x1c8>
 8024fd4:	eb01 0242 	add.w	r2, r1, r2, lsl #1
 8024fd8:	4e64      	ldr	r6, [pc, #400]	@ (802516c <D80_1CH_HTONS_VOL_HP+0x1cc>)
 8024fda:	468c      	mov	ip, r1
 8024fdc:	4682      	mov	sl, r0
 8024fde:	9205      	str	r2, [sp, #20]
 8024fe0:	f8da 2008 	ldr.w	r2, [sl, #8]
 8024fe4:	e89a 0011 	ldmia.w	sl, {r0, r4}
 8024fe8:	f10a 0a0a 	add.w	sl, sl, #10
 8024fec:	ba40      	rev16	r0, r0
 8024fee:	ba64      	rev16	r4, r4
 8024ff0:	fa92 f992 	rev16.w	r9, r2
 8024ff4:	b2c5      	uxtb	r5, r0
 8024ff6:	f3c0 2107 	ubfx	r1, r0, #8, #8
 8024ffa:	f3c0 4207 	ubfx	r2, r0, #16, #8
 8024ffe:	0e00      	lsrs	r0, r0, #24
 8025000:	f856 8025 	ldr.w	r8, [r6, r5, lsl #2]
 8025004:	b2e5      	uxtb	r5, r4
 8025006:	f856 1021 	ldr.w	r1, [r6, r1, lsl #2]
 802500a:	f3c4 4b07 	ubfx	fp, r4, #16, #8
 802500e:	4443      	add	r3, r8
 8025010:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8025014:	f856 0020 	ldr.w	r0, [r6, r0, lsl #2]
 8025018:	eb01 2193 	add.w	r1, r1, r3, lsr #10
 802501c:	f856 5025 	ldr.w	r5, [r6, r5, lsl #2]
 8025020:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025024:	eb02 2891 	add.w	r8, r2, r1, lsr #10
 8025028:	f3c4 2207 	ubfx	r2, r4, #8, #8
 802502c:	f3c1 0109 	ubfx	r1, r1, #0, #10
 8025030:	eb00 2098 	add.w	r0, r0, r8, lsr #10
 8025034:	f856 2022 	ldr.w	r2, [r6, r2, lsl #2]
 8025038:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 802503c:	f3c8 0809 	ubfx	r8, r8, #0, #10
 8025040:	eb05 2590 	add.w	r5, r5, r0, lsr #10
 8025044:	f3c0 0009 	ubfx	r0, r0, #0, #10
 8025048:	0e23      	lsrs	r3, r4, #24
 802504a:	f856 402b 	ldr.w	r4, [r6, fp, lsl #2]
 802504e:	eb02 2295 	add.w	r2, r2, r5, lsr #10
 8025052:	f3c9 2b07 	ubfx	fp, r9, #8, #8
 8025056:	f856 3023 	ldr.w	r3, [r6, r3, lsl #2]
 802505a:	fa5f f989 	uxtb.w	r9, r9
 802505e:	eb04 2492 	add.w	r4, r4, r2, lsr #10
 8025062:	f856 b02b 	ldr.w	fp, [r6, fp, lsl #2]
 8025066:	f856 9029 	ldr.w	r9, [r6, r9, lsl #2]
 802506a:	f3c2 0209 	ubfx	r2, r2, #0, #10
 802506e:	eb03 2394 	add.w	r3, r3, r4, lsr #10
 8025072:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8025076:	f3c4 0409 	ubfx	r4, r4, #0, #10
 802507a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 802507e:	eb09 2993 	add.w	r9, r9, r3, lsr #10
 8025082:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8025086:	ea42 4505 	orr.w	r5, r2, r5, lsl #16
 802508a:	eb0b 2b99 	add.w	fp, fp, r9, lsr #10
 802508e:	f3c9 0909 	ubfx	r9, r9, #0, #10
 8025092:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8025096:	f3cb 0209 	ubfx	r2, fp, #0, #10
 802509a:	ea4f 239b 	mov.w	r3, fp, lsr #10
 802509e:	ea42 4909 	orr.w	r9, r2, r9, lsl #16
 80250a2:	4a33      	ldr	r2, [pc, #204]	@ (8025170 <D80_1CH_HTONS_VOL_HP+0x1d0>)
 80250a4:	fb21 ee02 	smlad	lr, r1, r2, lr
 80250a8:	4a32      	ldr	r2, [pc, #200]	@ (8025174 <D80_1CH_HTONS_VOL_HP+0x1d4>)
 80250aa:	fb20 ee02 	smlad	lr, r0, r2, lr
 80250ae:	4a32      	ldr	r2, [pc, #200]	@ (8025178 <D80_1CH_HTONS_VOL_HP+0x1d8>)
 80250b0:	fb25 ee02 	smlad	lr, r5, r2, lr
 80250b4:	4a31      	ldr	r2, [pc, #196]	@ (802517c <D80_1CH_HTONS_VOL_HP+0x1dc>)
 80250b6:	fb24 ee02 	smlad	lr, r4, r2, lr
 80250ba:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80250be:	fb29 eb02 	smlad	fp, r9, r2, lr
 80250c2:	4a2f      	ldr	r2, [pc, #188]	@ (8025180 <D80_1CH_HTONS_VOL_HP+0x1e0>)
 80250c4:	fb21 7702 	smlad	r7, r1, r2, r7
 80250c8:	4a2e      	ldr	r2, [pc, #184]	@ (8025184 <D80_1CH_HTONS_VOL_HP+0x1e4>)
 80250ca:	fb20 7702 	smlad	r7, r0, r2, r7
 80250ce:	f04f 1e4b 	mov.w	lr, #4915275	@ 0x4b004b
 80250d2:	fb25 7e0e 	smlad	lr, r5, lr, r7
 80250d6:	4a2c      	ldr	r2, [pc, #176]	@ (8025188 <D80_1CH_HTONS_VOL_HP+0x1e8>)
 80250d8:	fb24 ee02 	smlad	lr, r4, r2, lr
 80250dc:	4a2b      	ldr	r2, [pc, #172]	@ (802518c <D80_1CH_HTONS_VOL_HP+0x1ec>)
 80250de:	fb29 ee02 	smlad	lr, r9, r2, lr
 80250e2:	f04f 0801 	mov.w	r8, #1
 80250e6:	fb21 f808 	smuad	r8, r1, r8
 80250ea:	4a29      	ldr	r2, [pc, #164]	@ (8025190 <D80_1CH_HTONS_VOL_HP+0x1f0>)
 80250ec:	fb20 8002 	smlad	r0, r0, r2, r8
 80250f0:	4a28      	ldr	r2, [pc, #160]	@ (8025194 <D80_1CH_HTONS_VOL_HP+0x1f4>)
 80250f2:	fb25 0002 	smlad	r0, r5, r2, r0
 80250f6:	4a28      	ldr	r2, [pc, #160]	@ (8025198 <D80_1CH_HTONS_VOL_HP+0x1f8>)
 80250f8:	fb24 0402 	smlad	r4, r4, r2, r0
 80250fc:	4f27      	ldr	r7, [pc, #156]	@ (802519c <D80_1CH_HTONS_VOL_HP+0x1fc>)
 80250fe:	fb29 4707 	smlad	r7, r9, r7, r4
 8025102:	f5ab 327a 	sub.w	r2, fp, #256000	@ 0x3e800
 8025106:	9901      	ldr	r1, [sp, #4]
 8025108:	9c04      	ldr	r4, [sp, #16]
 802510a:	2500      	movs	r5, #0
 802510c:	4411      	add	r1, r2
 802510e:	4608      	mov	r0, r1
 8025110:	9902      	ldr	r1, [sp, #8]
 8025112:	9202      	str	r2, [sp, #8]
 8025114:	1a40      	subs	r0, r0, r1
 8025116:	ea4f 79e0 	mov.w	r9, r0, asr #31
 802511a:	fba0 0104 	umull	r0, r1, r0, r4
 802511e:	f110 4000 	adds.w	r0, r0, #2147483648	@ 0x80000000
 8025122:	fb04 1109 	mla	r1, r4, r9, r1
 8025126:	f04f 4400 	mov.w	r4, #2147483648	@ 0x80000000
 802512a:	f141 0100 	adc.w	r1, r1, #0
 802512e:	0288      	lsls	r0, r1, #10
 8025130:	0049      	lsls	r1, r1, #1
 8025132:	9101      	str	r1, [sp, #4]
 8025134:	9903      	ldr	r1, [sp, #12]
 8025136:	fbc1 4500 	smlal	r4, r5, r1, r0
 802513a:	10a9      	asrs	r1, r5, #2
 802513c:	f301 010f 	ssat	r1, #16, r1
 8025140:	f82c 1b02 	strh.w	r1, [ip], #2
 8025144:	9905      	ldr	r1, [sp, #20]
 8025146:	458c      	cmp	ip, r1
 8025148:	f47f af4a 	bne.w	8024fe0 <D80_1CH_HTONS_VOL_HP+0x40>
 802514c:	9c07      	ldr	r4, [sp, #28]
 802514e:	2000      	movs	r0, #0
 8025150:	9901      	ldr	r1, [sp, #4]
 8025152:	6162      	str	r2, [r4, #20]
 8025154:	9a06      	ldr	r2, [sp, #24]
 8025156:	60a7      	str	r7, [r4, #8]
 8025158:	f8c4 e00c 	str.w	lr, [r4, #12]
 802515c:	61e3      	str	r3, [r4, #28]
 802515e:	6121      	str	r1, [r4, #16]
 8025160:	61a2      	str	r2, [r4, #24]
 8025162:	b009      	add	sp, #36	@ 0x24
 8025164:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8025168:	9a02      	ldr	r2, [sp, #8]
 802516a:	e7ef      	b.n	802514c <D80_1CH_HTONS_VOL_HP+0x1ac>
 802516c:	24000000 	.word	0x24000000
 8025170:	002d0024 	.word	0x002d0024
 8025174:	001c0015 	.word	0x001c0015
 8025178:	000f000a 	.word	0x000f000a
 802517c:	00060003 	.word	0x00060003
 8025180:	0037003f 	.word	0x0037003f
 8025184:	00450049 	.word	0x00450049
 8025188:	00490045 	.word	0x00490045
 802518c:	003f0037 	.word	0x003f0037
 8025190:	00030006 	.word	0x00030006
 8025194:	000a000f 	.word	0x000a000f
 8025198:	0015001c 	.word	0x0015001c
 802519c:	0024002d 	.word	0x0024002d

080251a0 <D128_1CH_HTONS_VOL_HP>:
 80251a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80251a4:	b08d      	sub	sp, #52	@ 0x34
 80251a6:	4614      	mov	r4, r2
 80251a8:	8cd3      	ldrh	r3, [r2, #38]	@ 0x26
 80251aa:	920b      	str	r2, [sp, #44]	@ 0x2c
 80251ac:	6912      	ldr	r2, [r2, #16]
 80251ae:	9202      	str	r2, [sp, #8]
 80251b0:	4622      	mov	r2, r4
 80251b2:	6964      	ldr	r4, [r4, #20]
 80251b4:	4615      	mov	r5, r2
 80251b6:	9405      	str	r4, [sp, #20]
 80251b8:	4614      	mov	r4, r2
 80251ba:	6992      	ldr	r2, [r2, #24]
 80251bc:	f8d4 e01c 	ldr.w	lr, [r4, #28]
 80251c0:	920a      	str	r2, [sp, #40]	@ 0x28
 80251c2:	68ea      	ldr	r2, [r5, #12]
 80251c4:	68a4      	ldr	r4, [r4, #8]
 80251c6:	9203      	str	r2, [sp, #12]
 80251c8:	6b2a      	ldr	r2, [r5, #48]	@ 0x30
 80251ca:	9404      	str	r4, [sp, #16]
 80251cc:	9207      	str	r2, [sp, #28]
 80251ce:	6a2a      	ldr	r2, [r5, #32]
 80251d0:	9208      	str	r2, [sp, #32]
 80251d2:	2b00      	cmp	r3, #0
 80251d4:	f000 8129 	beq.w	802542a <D128_1CH_HTONS_VOL_HP+0x28a>
 80251d8:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 80251dc:	f100 0b10 	add.w	fp, r0, #16
 80251e0:	f8df 92a0 	ldr.w	r9, [pc, #672]	@ 8025484 <D128_1CH_HTONS_VOL_HP+0x2e4>
 80251e4:	9106      	str	r1, [sp, #24]
 80251e6:	9309      	str	r3, [sp, #36]	@ 0x24
 80251e8:	f1ab 0010 	sub.w	r0, fp, #16
 80251ec:	f85b 1c04 	ldr.w	r1, [fp, #-4]
 80251f0:	c80d      	ldmia	r0, {r0, r2, r3}
 80251f2:	ba40      	rev16	r0, r0
 80251f4:	ba52      	rev16	r2, r2
 80251f6:	ba5b      	rev16	r3, r3
 80251f8:	fa91 fc91 	rev16.w	ip, r1
 80251fc:	b2c5      	uxtb	r5, r0
 80251fe:	f3c0 2407 	ubfx	r4, r0, #8, #8
 8025202:	f3c0 4107 	ubfx	r1, r0, #16, #8
 8025206:	0e00      	lsrs	r0, r0, #24
 8025208:	f859 6025 	ldr.w	r6, [r9, r5, lsl #2]
 802520c:	b2d5      	uxtb	r5, r2
 802520e:	f859 7024 	ldr.w	r7, [r9, r4, lsl #2]
 8025212:	f3c2 2407 	ubfx	r4, r2, #8, #8
 8025216:	44b6      	add	lr, r6
 8025218:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 802521c:	f859 6020 	ldr.w	r6, [r9, r0, lsl #2]
 8025220:	f3c2 4007 	ubfx	r0, r2, #16, #8
 8025224:	eb07 279e 	add.w	r7, r7, lr, lsr #10
 8025228:	f859 a025 	ldr.w	sl, [r9, r5, lsl #2]
 802522c:	f859 5024 	ldr.w	r5, [r9, r4, lsl #2]
 8025230:	0e12      	lsrs	r2, r2, #24
 8025232:	eb01 2197 	add.w	r1, r1, r7, lsr #10
 8025236:	f859 0020 	ldr.w	r0, [r9, r0, lsl #2]
 802523a:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 802523e:	f3c7 0709 	ubfx	r7, r7, #0, #10
 8025242:	eb06 2691 	add.w	r6, r6, r1, lsr #10
 8025246:	f859 4022 	ldr.w	r4, [r9, r2, lsl #2]
 802524a:	f3c1 0109 	ubfx	r1, r1, #0, #10
 802524e:	b2da      	uxtb	r2, r3
 8025250:	eb0a 2a96 	add.w	sl, sl, r6, lsr #10
 8025254:	f3c6 0609 	ubfx	r6, r6, #0, #10
 8025258:	ea47 470e 	orr.w	r7, r7, lr, lsl #16
 802525c:	f859 2022 	ldr.w	r2, [r9, r2, lsl #2]
 8025260:	eb05 259a 	add.w	r5, r5, sl, lsr #10
 8025264:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 8025268:	ea46 4601 	orr.w	r6, r6, r1, lsl #16
 802526c:	f3c3 2107 	ubfx	r1, r3, #8, #8
 8025270:	eb00 2e95 	add.w	lr, r0, r5, lsr #10
 8025274:	f3c5 0509 	ubfx	r5, r5, #0, #10
 8025278:	f859 8021 	ldr.w	r8, [r9, r1, lsl #2]
 802527c:	f3c3 4107 	ubfx	r1, r3, #16, #8
 8025280:	eb04 249e 	add.w	r4, r4, lr, lsr #10
 8025284:	f3ce 0e09 	ubfx	lr, lr, #0, #10
 8025288:	f859 0021 	ldr.w	r0, [r9, r1, lsl #2]
 802528c:	0e1b      	lsrs	r3, r3, #24
 802528e:	eb02 2294 	add.w	r2, r2, r4, lsr #10
 8025292:	f3c4 0409 	ubfx	r4, r4, #0, #10
 8025296:	f859 1023 	ldr.w	r1, [r9, r3, lsl #2]
 802529a:	ea45 450a 	orr.w	r5, r5, sl, lsl #16
 802529e:	eb08 2892 	add.w	r8, r8, r2, lsr #10
 80252a2:	f3c2 0209 	ubfx	r2, r2, #0, #10
 80252a6:	fa5f f38c 	uxtb.w	r3, ip
 80252aa:	eb00 2a98 	add.w	sl, r0, r8, lsr #10
 80252ae:	f3c8 0009 	ubfx	r0, r8, #0, #10
 80252b2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80252b6:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 80252ba:	eb01 219a 	add.w	r1, r1, sl, lsr #10
 80252be:	f3cc 2e07 	ubfx	lr, ip, #8, #8
 80252c2:	ea40 4002 	orr.w	r0, r0, r2, lsl #16
 80252c6:	f3ca 0a09 	ubfx	sl, sl, #0, #10
 80252ca:	eb03 2891 	add.w	r8, r3, r1, lsr #10
 80252ce:	f859 202e 	ldr.w	r2, [r9, lr, lsl #2]
 80252d2:	f3cc 4307 	ubfx	r3, ip, #16, #8
 80252d6:	ea4f 6e1c 	mov.w	lr, ip, lsr #24
 80252da:	eb02 2298 	add.w	r2, r2, r8, lsr #10
 80252de:	f3c8 0809 	ubfx	r8, r8, #0, #10
 80252e2:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 80252e6:	f3c1 0109 	ubfx	r1, r1, #0, #10
 80252ea:	f859 e02e 	ldr.w	lr, [r9, lr, lsl #2]
 80252ee:	eb03 2c92 	add.w	ip, r3, r2, lsr #10
 80252f2:	f3c2 0309 	ubfx	r3, r2, #0, #10
 80252f6:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 80252fa:	ea43 4208 	orr.w	r2, r3, r8, lsl #16
 80252fe:	9b03      	ldr	r3, [sp, #12]
 8025300:	eb0e 2e9c 	add.w	lr, lr, ip, lsr #10
 8025304:	f3cc 0c09 	ubfx	ip, ip, #0, #10
 8025308:	9201      	str	r2, [sp, #4]
 802530a:	f3ce 0209 	ubfx	r2, lr, #0, #10
 802530e:	ea4f 2e9e 	mov.w	lr, lr, lsr #10
 8025312:	ea42 4c0c 	orr.w	ip, r2, ip, lsl #16
 8025316:	4a46      	ldr	r2, [pc, #280]	@ (8025430 <D128_1CH_HTONS_VOL_HP+0x290>)
 8025318:	fb27 3802 	smlad	r8, r7, r2, r3
 802531c:	4b45      	ldr	r3, [pc, #276]	@ (8025434 <D128_1CH_HTONS_VOL_HP+0x294>)
 802531e:	fb26 8803 	smlad	r8, r6, r3, r8
 8025322:	4b45      	ldr	r3, [pc, #276]	@ (8025438 <D128_1CH_HTONS_VOL_HP+0x298>)
 8025324:	fb25 8803 	smlad	r8, r5, r3, r8
 8025328:	4b44      	ldr	r3, [pc, #272]	@ (802543c <D128_1CH_HTONS_VOL_HP+0x29c>)
 802532a:	fb24 8803 	smlad	r8, r4, r3, r8
 802532e:	4b44      	ldr	r3, [pc, #272]	@ (8025440 <D128_1CH_HTONS_VOL_HP+0x2a0>)
 8025330:	fb20 8803 	smlad	r8, r0, r3, r8
 8025334:	4b43      	ldr	r3, [pc, #268]	@ (8025444 <D128_1CH_HTONS_VOL_HP+0x2a4>)
 8025336:	fb21 8803 	smlad	r8, r1, r3, r8
 802533a:	4b43      	ldr	r3, [pc, #268]	@ (8025448 <D128_1CH_HTONS_VOL_HP+0x2a8>)
 802533c:	9a01      	ldr	r2, [sp, #4]
 802533e:	fb22 8203 	smlad	r2, r2, r3, r8
 8025342:	f44f 3880 	mov.w	r8, #65536	@ 0x10000
 8025346:	fb2c 2808 	smlad	r8, ip, r8, r2
 802534a:	4b40      	ldr	r3, [pc, #256]	@ (802544c <D128_1CH_HTONS_VOL_HP+0x2ac>)
 802534c:	9a04      	ldr	r2, [sp, #16]
 802534e:	fb27 2a03 	smlad	sl, r7, r3, r2
 8025352:	4b3f      	ldr	r3, [pc, #252]	@ (8025450 <D128_1CH_HTONS_VOL_HP+0x2b0>)
 8025354:	fb26 aa03 	smlad	sl, r6, r3, sl
 8025358:	4a3e      	ldr	r2, [pc, #248]	@ (8025454 <D128_1CH_HTONS_VOL_HP+0x2b4>)
 802535a:	fb25 aa02 	smlad	sl, r5, r2, sl
 802535e:	4a3e      	ldr	r2, [pc, #248]	@ (8025458 <D128_1CH_HTONS_VOL_HP+0x2b8>)
 8025360:	fb24 aa02 	smlad	sl, r4, r2, sl
 8025364:	4a3d      	ldr	r2, [pc, #244]	@ (802545c <D128_1CH_HTONS_VOL_HP+0x2bc>)
 8025366:	fb20 aa02 	smlad	sl, r0, r2, sl
 802536a:	4a3d      	ldr	r2, [pc, #244]	@ (8025460 <D128_1CH_HTONS_VOL_HP+0x2c0>)
 802536c:	fb21 aa02 	smlad	sl, r1, r2, sl
 8025370:	4a3c      	ldr	r2, [pc, #240]	@ (8025464 <D128_1CH_HTONS_VOL_HP+0x2c4>)
 8025372:	9b01      	ldr	r3, [sp, #4]
 8025374:	fb23 a202 	smlad	r2, r3, r2, sl
 8025378:	f8df a10c 	ldr.w	sl, [pc, #268]	@ 8025488 <D128_1CH_HTONS_VOL_HP+0x2e8>
 802537c:	fb2c 230a 	smlad	r3, ip, sl, r2
 8025380:	2201      	movs	r2, #1
 8025382:	9303      	str	r3, [sp, #12]
 8025384:	fb27 f702 	smuad	r7, r7, r2
 8025388:	4a37      	ldr	r2, [pc, #220]	@ (8025468 <D128_1CH_HTONS_VOL_HP+0x2c8>)
 802538a:	fb26 7702 	smlad	r7, r6, r2, r7
 802538e:	4a37      	ldr	r2, [pc, #220]	@ (802546c <D128_1CH_HTONS_VOL_HP+0x2cc>)
 8025390:	fb25 7702 	smlad	r7, r5, r2, r7
 8025394:	4a36      	ldr	r2, [pc, #216]	@ (8025470 <D128_1CH_HTONS_VOL_HP+0x2d0>)
 8025396:	fb24 7702 	smlad	r7, r4, r2, r7
 802539a:	4a36      	ldr	r2, [pc, #216]	@ (8025474 <D128_1CH_HTONS_VOL_HP+0x2d4>)
 802539c:	fb20 7702 	smlad	r7, r0, r2, r7
 80253a0:	4a35      	ldr	r2, [pc, #212]	@ (8025478 <D128_1CH_HTONS_VOL_HP+0x2d8>)
 80253a2:	fb21 7702 	smlad	r7, r1, r2, r7
 80253a6:	4a35      	ldr	r2, [pc, #212]	@ (802547c <D128_1CH_HTONS_VOL_HP+0x2dc>)
 80253a8:	9b01      	ldr	r3, [sp, #4]
 80253aa:	fb23 7202 	smlad	r2, r3, r2, r7
 80253ae:	4b34      	ldr	r3, [pc, #208]	@ (8025480 <D128_1CH_HTONS_VOL_HP+0x2e0>)
 80253b0:	fb2c 2303 	smlad	r3, ip, r3, r2
 80253b4:	f5a8 1880 	sub.w	r8, r8, #1048576	@ 0x100000
 80253b8:	9304      	str	r3, [sp, #16]
 80253ba:	9b02      	ldr	r3, [sp, #8]
 80253bc:	f04f 4000 	mov.w	r0, #2147483648	@ 0x80000000
 80253c0:	9e08      	ldr	r6, [sp, #32]
 80253c2:	2100      	movs	r1, #0
 80253c4:	4443      	add	r3, r8
 80253c6:	f10b 0b10 	add.w	fp, fp, #16
 80253ca:	461a      	mov	r2, r3
 80253cc:	9b05      	ldr	r3, [sp, #20]
 80253ce:	f8cd 8014 	str.w	r8, [sp, #20]
 80253d2:	1ad2      	subs	r2, r2, r3
 80253d4:	17d5      	asrs	r5, r2, #31
 80253d6:	fba2 2306 	umull	r2, r3, r2, r6
 80253da:	1812      	adds	r2, r2, r0
 80253dc:	fb06 3305 	mla	r3, r6, r5, r3
 80253e0:	414b      	adcs	r3, r1
 80253e2:	021a      	lsls	r2, r3, #8
 80253e4:	005b      	lsls	r3, r3, #1
 80253e6:	9302      	str	r3, [sp, #8]
 80253e8:	9b07      	ldr	r3, [sp, #28]
 80253ea:	fbc3 0102 	smlal	r0, r1, r3, r2
 80253ee:	9a06      	ldr	r2, [sp, #24]
 80253f0:	108b      	asrs	r3, r1, #2
 80253f2:	f303 030f 	ssat	r3, #16, r3
 80253f6:	f822 3b02 	strh.w	r3, [r2], #2
 80253fa:	4613      	mov	r3, r2
 80253fc:	9206      	str	r2, [sp, #24]
 80253fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025400:	4293      	cmp	r3, r2
 8025402:	f47f aef1 	bne.w	80251e8 <D128_1CH_HTONS_VOL_HP+0x48>
 8025406:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8025408:	2000      	movs	r0, #0
 802540a:	9904      	ldr	r1, [sp, #16]
 802540c:	4613      	mov	r3, r2
 802540e:	f8c2 e01c 	str.w	lr, [r2, #28]
 8025412:	6091      	str	r1, [r2, #8]
 8025414:	9903      	ldr	r1, [sp, #12]
 8025416:	60d1      	str	r1, [r2, #12]
 8025418:	9a02      	ldr	r2, [sp, #8]
 802541a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 802541c:	611a      	str	r2, [r3, #16]
 802541e:	f8c3 8014 	str.w	r8, [r3, #20]
 8025422:	6199      	str	r1, [r3, #24]
 8025424:	b00d      	add	sp, #52	@ 0x34
 8025426:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 802542a:	f8dd 8014 	ldr.w	r8, [sp, #20]
 802542e:	e7ea      	b.n	8025406 <D128_1CH_HTONS_VOL_HP+0x266>
 8025430:	00780069 	.word	0x00780069
 8025434:	005b004e 	.word	0x005b004e
 8025438:	00420037 	.word	0x00420037
 802543c:	002d0024 	.word	0x002d0024
 8025440:	001c0015 	.word	0x001c0015
 8025444:	000f000a 	.word	0x000f000a
 8025448:	00060003 	.word	0x00060003
 802544c:	00880096 	.word	0x00880096
 8025450:	00a200ac 	.word	0x00a200ac
 8025454:	00b400ba 	.word	0x00b400ba
 8025458:	00be00c0 	.word	0x00be00c0
 802545c:	00c000be 	.word	0x00c000be
 8025460:	00ba00b4 	.word	0x00ba00b4
 8025464:	00ac00a2 	.word	0x00ac00a2
 8025468:	00030006 	.word	0x00030006
 802546c:	000a000f 	.word	0x000a000f
 8025470:	0015001c 	.word	0x0015001c
 8025474:	0024002d 	.word	0x0024002d
 8025478:	00370042 	.word	0x00370042
 802547c:	004e005b 	.word	0x004e005b
 8025480:	00690078 	.word	0x00690078
 8025484:	24000000 	.word	0x24000000
 8025488:	00960088 	.word	0x00960088

0802548c <PDM_Filter_Init>:
 802548c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 802548e:	2240      	movs	r2, #64	@ 0x40
 8025490:	4604      	mov	r4, r0
 8025492:	2100      	movs	r1, #0
 8025494:	300c      	adds	r0, #12
 8025496:	f000 f9dd 	bl	8025854 <memset>
 802549a:	4939      	ldr	r1, [pc, #228]	@ (8025580 <PDM_Filter_Init+0xf4>)
 802549c:	4839      	ldr	r0, [pc, #228]	@ (8025584 <PDM_Filter_Init+0xf8>)
 802549e:	f000 f977 	bl	8025790 <CRC_Lock>
 80254a2:	2300      	movs	r3, #0
 80254a4:	2801      	cmp	r0, #1
 80254a6:	8820      	ldrh	r0, [r4, #0]
 80254a8:	4a35      	ldr	r2, [pc, #212]	@ (8025580 <PDM_Filter_Init+0xf4>)
 80254aa:	8965      	ldrh	r5, [r4, #10]
 80254ac:	bf18      	it	ne
 80254ae:	461a      	movne	r2, r3
 80254b0:	8921      	ldrh	r1, [r4, #8]
 80254b2:	2801      	cmp	r0, #1
 80254b4:	86a5      	strh	r5, [r4, #52]	@ 0x34
 80254b6:	6462      	str	r2, [r4, #68]	@ 0x44
 80254b8:	86e1      	strh	r1, [r4, #54]	@ 0x36
 80254ba:	61a3      	str	r3, [r4, #24]
 80254bc:	6123      	str	r3, [r4, #16]
 80254be:	6163      	str	r3, [r4, #20]
 80254c0:	60e3      	str	r3, [r4, #12]
 80254c2:	6263      	str	r3, [r4, #36]	@ 0x24
 80254c4:	61e3      	str	r3, [r4, #28]
 80254c6:	6223      	str	r3, [r4, #32]
 80254c8:	6423      	str	r3, [r4, #64]	@ 0x40
 80254ca:	d91c      	bls.n	8025506 <PDM_Filter_Init+0x7a>
 80254cc:	2003      	movs	r0, #3
 80254ce:	2302      	movs	r3, #2
 80254d0:	8862      	ldrh	r2, [r4, #2]
 80254d2:	2a01      	cmp	r2, #1
 80254d4:	d914      	bls.n	8025500 <PDM_Filter_Init+0x74>
 80254d6:	2140      	movs	r1, #64	@ 0x40
 80254d8:	2300      	movs	r3, #0
 80254da:	6b62      	ldr	r2, [r4, #52]	@ 0x34
 80254dc:	f1b2 1f01 	cmp.w	r2, #65537	@ 0x10001
 80254e0:	d00b      	beq.n	80254fa <PDM_Filter_Init+0x6e>
 80254e2:	6862      	ldr	r2, [r4, #4]
 80254e4:	b11a      	cbz	r2, 80254ee <PDM_Filter_Init+0x62>
 80254e6:	f043 0310 	orr.w	r3, r3, #16
 80254ea:	62e2      	str	r2, [r4, #44]	@ 0x2c
 80254ec:	6423      	str	r3, [r4, #64]	@ 0x40
 80254ee:	2200      	movs	r2, #0
 80254f0:	8722      	strh	r2, [r4, #56]	@ 0x38
 80254f2:	b908      	cbnz	r0, 80254f8 <PDM_Filter_Init+0x6c>
 80254f4:	3380      	adds	r3, #128	@ 0x80
 80254f6:	6423      	str	r3, [r4, #64]	@ 0x40
 80254f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80254fa:	460b      	mov	r3, r1
 80254fc:	6421      	str	r1, [r4, #64]	@ 0x40
 80254fe:	e7f0      	b.n	80254e2 <PDM_Filter_Init+0x56>
 8025500:	d008      	beq.n	8025514 <PDM_Filter_Init+0x88>
 8025502:	4618      	mov	r0, r3
 8025504:	e7e7      	b.n	80254d6 <PDM_Filter_Init+0x4a>
 8025506:	4d20      	ldr	r5, [pc, #128]	@ (8025588 <PDM_Filter_Init+0xfc>)
 8025508:	782a      	ldrb	r2, [r5, #0]
 802550a:	d009      	beq.n	8025520 <PDM_Filter_Init+0x94>
 802550c:	2a01      	cmp	r2, #1
 802550e:	d020      	beq.n	8025552 <PDM_Filter_Init+0xc6>
 8025510:	2001      	movs	r0, #1
 8025512:	e7dd      	b.n	80254d0 <PDM_Filter_Init+0x44>
 8025514:	2220      	movs	r2, #32
 8025516:	4618      	mov	r0, r3
 8025518:	2160      	movs	r1, #96	@ 0x60
 802551a:	6422      	str	r2, [r4, #64]	@ 0x40
 802551c:	4613      	mov	r3, r2
 802551e:	e7dc      	b.n	80254da <PDM_Filter_Init+0x4e>
 8025520:	2a00      	cmp	r2, #0
 8025522:	d1d5      	bne.n	80254d0 <PDM_Filter_Init+0x44>
 8025524:	4919      	ldr	r1, [pc, #100]	@ (802558c <PDM_Filter_Init+0x100>)
 8025526:	f8df e06c 	ldr.w	lr, [pc, #108]	@ 8025594 <PDM_Filter_Init+0x108>
 802552a:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 802552e:	4e18      	ldr	r6, [pc, #96]	@ (8025590 <PDM_Filter_Init+0x104>)
 8025530:	684a      	ldr	r2, [r1, #4]
 8025532:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8025536:	ea02 0006 	and.w	r0, r2, r6
 802553a:	f3c2 5209 	ubfx	r2, r2, #20, #10
 802553e:	4303      	orrs	r3, r0
 8025540:	4413      	add	r3, r2
 8025542:	f841 3f04 	str.w	r3, [r1, #4]!
 8025546:	428f      	cmp	r7, r1
 8025548:	d1f2      	bne.n	8025530 <PDM_Filter_Init+0xa4>
 802554a:	2001      	movs	r0, #1
 802554c:	2300      	movs	r3, #0
 802554e:	7028      	strb	r0, [r5, #0]
 8025550:	e7be      	b.n	80254d0 <PDM_Filter_Init+0x44>
 8025552:	490e      	ldr	r1, [pc, #56]	@ (802558c <PDM_Filter_Init+0x100>)
 8025554:	f8df e03c 	ldr.w	lr, [pc, #60]	@ 8025594 <PDM_Filter_Init+0x108>
 8025558:	f501 6780 	add.w	r7, r1, #1024	@ 0x400
 802555c:	4e0c      	ldr	r6, [pc, #48]	@ (8025590 <PDM_Filter_Init+0x104>)
 802555e:	684a      	ldr	r2, [r1, #4]
 8025560:	ea0e 5302 	and.w	r3, lr, r2, lsl #20
 8025564:	ea02 0006 	and.w	r0, r2, r6
 8025568:	f3c2 5209 	ubfx	r2, r2, #20, #10
 802556c:	4303      	orrs	r3, r0
 802556e:	4413      	add	r3, r2
 8025570:	f841 3f04 	str.w	r3, [r1, #4]!
 8025574:	428f      	cmp	r7, r1
 8025576:	d1f2      	bne.n	802555e <PDM_Filter_Init+0xd2>
 8025578:	2300      	movs	r3, #0
 802557a:	2001      	movs	r0, #1
 802557c:	702b      	strb	r3, [r5, #0]
 802557e:	e7a7      	b.n	80254d0 <PDM_Filter_Init+0x44>
 8025580:	b5e8b5cd 	.word	0xb5e8b5cd
 8025584:	f407a5c2 	.word	0xf407a5c2
 8025588:	24000cdc 	.word	0x24000cdc
 802558c:	23fffffc 	.word	0x23fffffc
 8025590:	000ffc00 	.word	0x000ffc00
 8025594:	3ff00000 	.word	0x3ff00000

08025598 <PDM_Filter_setConfig>:
 8025598:	b570      	push	{r4, r5, r6, lr}
 802559a:	460e      	mov	r6, r1
 802559c:	6c01      	ldr	r1, [r0, #64]	@ 0x40
 802559e:	4604      	mov	r4, r0
 80255a0:	8832      	ldrh	r2, [r6, #0]
 80255a2:	f421 7080 	bic.w	r0, r1, #256	@ 0x100
 80255a6:	1e53      	subs	r3, r2, #1
 80255a8:	2b06      	cmp	r3, #6
 80255aa:	ed2d 8b04 	vpush	{d8-d9}
 80255ae:	6420      	str	r0, [r4, #64]	@ 0x40
 80255b0:	d91b      	bls.n	80255ea <PDM_Filter_setConfig+0x52>
 80255b2:	2508      	movs	r5, #8
 80255b4:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 80255b8:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80255bc:	4299      	cmp	r1, r3
 80255be:	d07b      	beq.n	80256b8 <PDM_Filter_setConfig+0x120>
 80255c0:	f113 0f0c 	cmn.w	r3, #12
 80255c4:	db29      	blt.n	802561a <PDM_Filter_setConfig+0x82>
 80255c6:	2b33      	cmp	r3, #51	@ 0x33
 80255c8:	dd2c      	ble.n	8025624 <PDM_Filter_setConfig+0x8c>
 80255ca:	2333      	movs	r3, #51	@ 0x33
 80255cc:	3540      	adds	r5, #64	@ 0x40
 80255ce:	80b3      	strh	r3, [r6, #4]
 80255d0:	8622      	strh	r2, [r4, #48]	@ 0x30
 80255d2:	8873      	ldrh	r3, [r6, #2]
 80255d4:	8663      	strh	r3, [r4, #50]	@ 0x32
 80255d6:	b925      	cbnz	r5, 80255e2 <PDM_Filter_setConfig+0x4a>
 80255d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80255da:	2500      	movs	r5, #0
 80255dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80255e0:	6423      	str	r3, [r4, #64]	@ 0x40
 80255e2:	4628      	mov	r0, r5
 80255e4:	ecbd 8b04 	vpop	{d8-d9}
 80255e8:	bd70      	pop	{r4, r5, r6, pc}
 80255ea:	8e23      	ldrh	r3, [r4, #48]	@ 0x30
 80255ec:	4293      	cmp	r3, r2
 80255ee:	d04a      	beq.n	8025686 <PDM_Filter_setConfig+0xee>
 80255f0:	4b4e      	ldr	r3, [pc, #312]	@ (802572c <PDM_Filter_setConfig+0x194>)
 80255f2:	400b      	ands	r3, r1
 80255f4:	4313      	orrs	r3, r2
 80255f6:	f003 0170 	and.w	r1, r3, #112	@ 0x70
 80255fa:	6423      	str	r3, [r4, #64]	@ 0x40
 80255fc:	f003 030f 	and.w	r3, r3, #15
 8025600:	2970      	cmp	r1, #112	@ 0x70
 8025602:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 8025606:	d04a      	beq.n	802569e <PDM_Filter_setConfig+0x106>
 8025608:	2b06      	cmp	r3, #6
 802560a:	f200 808d 	bhi.w	8025728 <PDM_Filter_setConfig+0x190>
 802560e:	e8df f003 	tbb	[pc, r3]
 8025612:	6467      	.short	0x6467
 8025614:	6a6d7073 	.word	0x6a6d7073
 8025618:	5a          	.byte	0x5a
 8025619:	00          	.byte	0x00
 802561a:	f64f 73f4 	movw	r3, #65524	@ 0xfff4
 802561e:	3540      	adds	r5, #64	@ 0x40
 8025620:	80b3      	strh	r3, [r6, #4]
 8025622:	e7d5      	b.n	80255d0 <PDM_Filter_setConfig+0x38>
 8025624:	6c22      	ldr	r2, [r4, #64]	@ 0x40
 8025626:	f002 020f 	and.w	r2, r2, #15
 802562a:	3a01      	subs	r2, #1
 802562c:	2a06      	cmp	r2, #6
 802562e:	d83e      	bhi.n	80256ae <PDM_Filter_setConfig+0x116>
 8025630:	493f      	ldr	r1, [pc, #252]	@ (8025730 <PDM_Filter_setConfig+0x198>)
 8025632:	eb01 0282 	add.w	r2, r1, r2, lsl #2
 8025636:	ed92 9a00 	vldr	s18, [r2]
 802563a:	ed92 8a07 	vldr	s16, [r2, #28]
 802563e:	ee07 3a90 	vmov	s15, r3
 8025642:	eef3 0a04 	vmov.f32	s1, #52	@ 0x41a00000  20.0
 8025646:	eeb2 0a04 	vmov.f32	s0, #36	@ 0x41200000  10.0
 802564a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 802564e:	eec7 0aa0 	vdiv.f32	s1, s15, s1
 8025652:	f000 fd95 	bl	8026180 <powf>
 8025656:	eddf 0a37 	vldr	s1, [pc, #220]	@ 8025734 <PDM_Filter_setConfig+0x19c>
 802565a:	eef0 8a40 	vmov.f32	s17, s0
 802565e:	ee70 0ac9 	vsub.f32	s1, s1, s18
 8025662:	eeb0 0a00 	vmov.f32	s0, #0	@ 0x40000000  2.0
 8025666:	f000 fd8b 	bl	8026180 <powf>
 802566a:	ee28 8a28 	vmul.f32	s16, s16, s17
 802566e:	88b3      	ldrh	r3, [r6, #4]
 8025670:	8832      	ldrh	r2, [r6, #0]
 8025672:	ee28 8a00 	vmul.f32	s16, s16, s0
 8025676:	8723      	strh	r3, [r4, #56]	@ 0x38
 8025678:	feb8 8a48 	vrinta.f32	s16, s16
 802567c:	eebc 8ac8 	vcvt.u32.f32	s16, s16
 8025680:	ed84 8a0f 	vstr	s16, [r4, #60]	@ 0x3c
 8025684:	e7a4      	b.n	80255d0 <PDM_Filter_setConfig+0x38>
 8025686:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 802568a:	f9b4 1038 	ldrsh.w	r1, [r4, #56]	@ 0x38
 802568e:	4299      	cmp	r1, r3
 8025690:	d016      	beq.n	80256c0 <PDM_Filter_setConfig+0x128>
 8025692:	f113 0f0c 	cmn.w	r3, #12
 8025696:	f04f 0500 	mov.w	r5, #0
 802569a:	da94      	bge.n	80255c6 <PDM_Filter_setConfig+0x2e>
 802569c:	e7bd      	b.n	802561a <PDM_Filter_setConfig+0x82>
 802569e:	2b06      	cmp	r3, #6
 80256a0:	d842      	bhi.n	8025728 <PDM_Filter_setConfig+0x190>
 80256a2:	e8df f003 	tbb	[pc, r3]
 80256a6:	3b3e      	.short	0x3b3e
 80256a8:	2f323538 	.word	0x2f323538
 80256ac:	2c          	.byte	0x2c
 80256ad:	00          	.byte	0x00
 80256ae:	ed9f 8a22 	vldr	s16, [pc, #136]	@ 8025738 <PDM_Filter_setConfig+0x1a0>
 80256b2:	eeb0 9a48 	vmov.f32	s18, s16
 80256b6:	e7c2      	b.n	802563e <PDM_Filter_setConfig+0xa6>
 80256b8:	8e21      	ldrh	r1, [r4, #48]	@ 0x30
 80256ba:	4291      	cmp	r1, r2
 80256bc:	d180      	bne.n	80255c0 <PDM_Filter_setConfig+0x28>
 80256be:	e788      	b.n	80255d2 <PDM_Filter_setConfig+0x3a>
 80256c0:	8873      	ldrh	r3, [r6, #2]
 80256c2:	8663      	strh	r3, [r4, #50]	@ 0x32
 80256c4:	e788      	b.n	80255d8 <PDM_Filter_setConfig+0x40>
 80256c6:	4b1d      	ldr	r3, [pc, #116]	@ (802573c <PDM_Filter_setConfig+0x1a4>)
 80256c8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256ca:	f9b6 3004 	ldrsh.w	r3, [r6, #4]
 80256ce:	2500      	movs	r5, #0
 80256d0:	f113 0f0c 	cmn.w	r3, #12
 80256d4:	f6bf af77 	bge.w	80255c6 <PDM_Filter_setConfig+0x2e>
 80256d8:	e79f      	b.n	802561a <PDM_Filter_setConfig+0x82>
 80256da:	4b19      	ldr	r3, [pc, #100]	@ (8025740 <PDM_Filter_setConfig+0x1a8>)
 80256dc:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256de:	e7f4      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 80256e0:	4b18      	ldr	r3, [pc, #96]	@ (8025744 <PDM_Filter_setConfig+0x1ac>)
 80256e2:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256e4:	e7f1      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 80256e6:	4b18      	ldr	r3, [pc, #96]	@ (8025748 <PDM_Filter_setConfig+0x1b0>)
 80256e8:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256ea:	e7ee      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 80256ec:	4b17      	ldr	r3, [pc, #92]	@ (802574c <PDM_Filter_setConfig+0x1b4>)
 80256ee:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256f0:	e7eb      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 80256f2:	4b17      	ldr	r3, [pc, #92]	@ (8025750 <PDM_Filter_setConfig+0x1b8>)
 80256f4:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256f6:	e7e8      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 80256f8:	4b16      	ldr	r3, [pc, #88]	@ (8025754 <PDM_Filter_setConfig+0x1bc>)
 80256fa:	64a3      	str	r3, [r4, #72]	@ 0x48
 80256fc:	e7e5      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 80256fe:	4b16      	ldr	r3, [pc, #88]	@ (8025758 <PDM_Filter_setConfig+0x1c0>)
 8025700:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025702:	e7e2      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 8025704:	4b15      	ldr	r3, [pc, #84]	@ (802575c <PDM_Filter_setConfig+0x1c4>)
 8025706:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025708:	e7df      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 802570a:	4b15      	ldr	r3, [pc, #84]	@ (8025760 <PDM_Filter_setConfig+0x1c8>)
 802570c:	64a3      	str	r3, [r4, #72]	@ 0x48
 802570e:	e7dc      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 8025710:	4b14      	ldr	r3, [pc, #80]	@ (8025764 <PDM_Filter_setConfig+0x1cc>)
 8025712:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025714:	e7d9      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 8025716:	4b14      	ldr	r3, [pc, #80]	@ (8025768 <PDM_Filter_setConfig+0x1d0>)
 8025718:	64a3      	str	r3, [r4, #72]	@ 0x48
 802571a:	e7d6      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 802571c:	4b13      	ldr	r3, [pc, #76]	@ (802576c <PDM_Filter_setConfig+0x1d4>)
 802571e:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025720:	e7d3      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 8025722:	4b13      	ldr	r3, [pc, #76]	@ (8025770 <PDM_Filter_setConfig+0x1d8>)
 8025724:	64a3      	str	r3, [r4, #72]	@ 0x48
 8025726:	e7d0      	b.n	80256ca <PDM_Filter_setConfig+0x132>
 8025728:	2500      	movs	r5, #0
 802572a:	e743      	b.n	80255b4 <PDM_Filter_setConfig+0x1c>
 802572c:	fffffef0 	.word	0xfffffef0
 8025730:	0802746c 	.word	0x0802746c
 8025734:	42000000 	.word	0x42000000
 8025738:	00000000 	.word	0x00000000
 802573c:	08023cf9 	.word	0x08023cf9
 8025740:	08024071 	.word	0x08024071
 8025744:	08023e81 	.word	0x08023e81
 8025748:	08023b7d 	.word	0x08023b7d
 802574c:	08023a6d 	.word	0x08023a6d
 8025750:	0802453d 	.word	0x0802453d
 8025754:	080242a1 	.word	0x080242a1
 8025758:	08024b21 	.word	0x08024b21
 802575c:	080249f1 	.word	0x080249f1
 8025760:	080248f5 	.word	0x080248f5
 8025764:	080251a1 	.word	0x080251a1
 8025768:	08024fa1 	.word	0x08024fa1
 802576c:	08024de9 	.word	0x08024de9
 8025770:	08024c69 	.word	0x08024c69

08025774 <PDM_Filter>:
 8025774:	6c13      	ldr	r3, [r2, #64]	@ 0x40
 8025776:	f413 7f80 	tst.w	r3, #256	@ 0x100
 802577a:	d105      	bne.n	8025788 <PDM_Filter+0x14>
 802577c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8025780:	bf14      	ite	ne
 8025782:	2020      	movne	r0, #32
 8025784:	2030      	moveq	r0, #48	@ 0x30
 8025786:	4770      	bx	lr
 8025788:	6c93      	ldr	r3, [r2, #72]	@ 0x48
 802578a:	320c      	adds	r2, #12
 802578c:	4718      	bx	r3
 802578e:	bf00      	nop

08025790 <CRC_Lock>:
 8025790:	4a18      	ldr	r2, [pc, #96]	@ (80257f4 <CRC_Lock+0x64>)
 8025792:	6813      	ldr	r3, [r2, #0]
 8025794:	b410      	push	{r4}
 8025796:	f023 0301 	bic.w	r3, r3, #1
 802579a:	4c17      	ldr	r4, [pc, #92]	@ (80257f8 <CRC_Lock+0x68>)
 802579c:	6013      	str	r3, [r2, #0]
 802579e:	6823      	ldr	r3, [r4, #0]
 80257a0:	b933      	cbnz	r3, 80257b0 <CRC_Lock+0x20>
 80257a2:	4b16      	ldr	r3, [pc, #88]	@ (80257fc <CRC_Lock+0x6c>)
 80257a4:	681b      	ldr	r3, [r3, #0]
 80257a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80257aa:	f5b3 6f8a 	cmp.w	r3, #1104	@ 0x450
 80257ae:	d010      	beq.n	80257d2 <CRC_Lock+0x42>
 80257b0:	4b13      	ldr	r3, [pc, #76]	@ (8025800 <CRC_Lock+0x70>)
 80257b2:	2401      	movs	r4, #1
 80257b4:	461a      	mov	r2, r3
 80257b6:	601c      	str	r4, [r3, #0]
 80257b8:	6813      	ldr	r3, [r2, #0]
 80257ba:	2b00      	cmp	r3, #0
 80257bc:	d1fc      	bne.n	80257b8 <CRC_Lock+0x28>
 80257be:	4b11      	ldr	r3, [pc, #68]	@ (8025804 <CRC_Lock+0x74>)
 80257c0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80257c4:	6018      	str	r0, [r3, #0]
 80257c6:	6818      	ldr	r0, [r3, #0]
 80257c8:	1a08      	subs	r0, r1, r0
 80257ca:	fab0 f080 	clz	r0, r0
 80257ce:	0940      	lsrs	r0, r0, #5
 80257d0:	4770      	bx	lr
 80257d2:	4b0d      	ldr	r3, [pc, #52]	@ (8025808 <CRC_Lock+0x78>)
 80257d4:	2401      	movs	r4, #1
 80257d6:	461a      	mov	r2, r3
 80257d8:	601c      	str	r4, [r3, #0]
 80257da:	6813      	ldr	r3, [r2, #0]
 80257dc:	2b00      	cmp	r3, #0
 80257de:	d1fc      	bne.n	80257da <CRC_Lock+0x4a>
 80257e0:	4b0a      	ldr	r3, [pc, #40]	@ (802580c <CRC_Lock+0x7c>)
 80257e2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80257e6:	6018      	str	r0, [r3, #0]
 80257e8:	6818      	ldr	r0, [r3, #0]
 80257ea:	1a40      	subs	r0, r0, r1
 80257ec:	fab0 f080 	clz	r0, r0
 80257f0:	0940      	lsrs	r0, r0, #5
 80257f2:	4770      	bx	lr
 80257f4:	e0002000 	.word	0xe0002000
 80257f8:	e0042000 	.word	0xe0042000
 80257fc:	5c001000 	.word	0x5c001000
 8025800:	40023008 	.word	0x40023008
 8025804:	40023000 	.word	0x40023000
 8025808:	58024c08 	.word	0x58024c08
 802580c:	58024c00 	.word	0x58024c00

08025810 <siprintf>:
 8025810:	b40e      	push	{r1, r2, r3}
 8025812:	b510      	push	{r4, lr}
 8025814:	b09d      	sub	sp, #116	@ 0x74
 8025816:	ab1f      	add	r3, sp, #124	@ 0x7c
 8025818:	9002      	str	r0, [sp, #8]
 802581a:	9006      	str	r0, [sp, #24]
 802581c:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8025820:	480a      	ldr	r0, [pc, #40]	@ (802584c <siprintf+0x3c>)
 8025822:	9107      	str	r1, [sp, #28]
 8025824:	9104      	str	r1, [sp, #16]
 8025826:	490a      	ldr	r1, [pc, #40]	@ (8025850 <siprintf+0x40>)
 8025828:	f853 2b04 	ldr.w	r2, [r3], #4
 802582c:	9105      	str	r1, [sp, #20]
 802582e:	2400      	movs	r4, #0
 8025830:	a902      	add	r1, sp, #8
 8025832:	6800      	ldr	r0, [r0, #0]
 8025834:	9301      	str	r3, [sp, #4]
 8025836:	941b      	str	r4, [sp, #108]	@ 0x6c
 8025838:	f000 f8aa 	bl	8025990 <_svfiprintf_r>
 802583c:	9b02      	ldr	r3, [sp, #8]
 802583e:	701c      	strb	r4, [r3, #0]
 8025840:	b01d      	add	sp, #116	@ 0x74
 8025842:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8025846:	b003      	add	sp, #12
 8025848:	4770      	bx	lr
 802584a:	bf00      	nop
 802584c:	24000a64 	.word	0x24000a64
 8025850:	ffff0208 	.word	0xffff0208

08025854 <memset>:
 8025854:	4402      	add	r2, r0
 8025856:	4603      	mov	r3, r0
 8025858:	4293      	cmp	r3, r2
 802585a:	d100      	bne.n	802585e <memset+0xa>
 802585c:	4770      	bx	lr
 802585e:	f803 1b01 	strb.w	r1, [r3], #1
 8025862:	e7f9      	b.n	8025858 <memset+0x4>

08025864 <__errno>:
 8025864:	4b01      	ldr	r3, [pc, #4]	@ (802586c <__errno+0x8>)
 8025866:	6818      	ldr	r0, [r3, #0]
 8025868:	4770      	bx	lr
 802586a:	bf00      	nop
 802586c:	24000a64 	.word	0x24000a64

08025870 <__libc_init_array>:
 8025870:	b570      	push	{r4, r5, r6, lr}
 8025872:	4d0d      	ldr	r5, [pc, #52]	@ (80258a8 <__libc_init_array+0x38>)
 8025874:	4c0d      	ldr	r4, [pc, #52]	@ (80258ac <__libc_init_array+0x3c>)
 8025876:	1b64      	subs	r4, r4, r5
 8025878:	10a4      	asrs	r4, r4, #2
 802587a:	2600      	movs	r6, #0
 802587c:	42a6      	cmp	r6, r4
 802587e:	d109      	bne.n	8025894 <__libc_init_array+0x24>
 8025880:	4d0b      	ldr	r5, [pc, #44]	@ (80258b0 <__libc_init_array+0x40>)
 8025882:	4c0c      	ldr	r4, [pc, #48]	@ (80258b4 <__libc_init_array+0x44>)
 8025884:	f000 fe2a 	bl	80264dc <_init>
 8025888:	1b64      	subs	r4, r4, r5
 802588a:	10a4      	asrs	r4, r4, #2
 802588c:	2600      	movs	r6, #0
 802588e:	42a6      	cmp	r6, r4
 8025890:	d105      	bne.n	802589e <__libc_init_array+0x2e>
 8025892:	bd70      	pop	{r4, r5, r6, pc}
 8025894:	f855 3b04 	ldr.w	r3, [r5], #4
 8025898:	4798      	blx	r3
 802589a:	3601      	adds	r6, #1
 802589c:	e7ee      	b.n	802587c <__libc_init_array+0xc>
 802589e:	f855 3b04 	ldr.w	r3, [r5], #4
 80258a2:	4798      	blx	r3
 80258a4:	3601      	adds	r6, #1
 80258a6:	e7f2      	b.n	802588e <__libc_init_array+0x1e>
 80258a8:	0802dfe0 	.word	0x0802dfe0
 80258ac:	0802dfe0 	.word	0x0802dfe0
 80258b0:	0802dfe0 	.word	0x0802dfe0
 80258b4:	0802dfe4 	.word	0x0802dfe4

080258b8 <__retarget_lock_acquire_recursive>:
 80258b8:	4770      	bx	lr

080258ba <__retarget_lock_release_recursive>:
 80258ba:	4770      	bx	lr

080258bc <memcpy>:
 80258bc:	440a      	add	r2, r1
 80258be:	4291      	cmp	r1, r2
 80258c0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80258c4:	d100      	bne.n	80258c8 <memcpy+0xc>
 80258c6:	4770      	bx	lr
 80258c8:	b510      	push	{r4, lr}
 80258ca:	f811 4b01 	ldrb.w	r4, [r1], #1
 80258ce:	f803 4f01 	strb.w	r4, [r3, #1]!
 80258d2:	4291      	cmp	r1, r2
 80258d4:	d1f9      	bne.n	80258ca <memcpy+0xe>
 80258d6:	bd10      	pop	{r4, pc}

080258d8 <__ssputs_r>:
 80258d8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80258dc:	688e      	ldr	r6, [r1, #8]
 80258de:	461f      	mov	r7, r3
 80258e0:	42be      	cmp	r6, r7
 80258e2:	680b      	ldr	r3, [r1, #0]
 80258e4:	4682      	mov	sl, r0
 80258e6:	460c      	mov	r4, r1
 80258e8:	4690      	mov	r8, r2
 80258ea:	d82d      	bhi.n	8025948 <__ssputs_r+0x70>
 80258ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80258f0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80258f4:	d026      	beq.n	8025944 <__ssputs_r+0x6c>
 80258f6:	6965      	ldr	r5, [r4, #20]
 80258f8:	6909      	ldr	r1, [r1, #16]
 80258fa:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80258fe:	eba3 0901 	sub.w	r9, r3, r1
 8025902:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8025906:	1c7b      	adds	r3, r7, #1
 8025908:	444b      	add	r3, r9
 802590a:	106d      	asrs	r5, r5, #1
 802590c:	429d      	cmp	r5, r3
 802590e:	bf38      	it	cc
 8025910:	461d      	movcc	r5, r3
 8025912:	0553      	lsls	r3, r2, #21
 8025914:	d527      	bpl.n	8025966 <__ssputs_r+0x8e>
 8025916:	4629      	mov	r1, r5
 8025918:	f000 f958 	bl	8025bcc <_malloc_r>
 802591c:	4606      	mov	r6, r0
 802591e:	b360      	cbz	r0, 802597a <__ssputs_r+0xa2>
 8025920:	6921      	ldr	r1, [r4, #16]
 8025922:	464a      	mov	r2, r9
 8025924:	f7ff ffca 	bl	80258bc <memcpy>
 8025928:	89a3      	ldrh	r3, [r4, #12]
 802592a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 802592e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8025932:	81a3      	strh	r3, [r4, #12]
 8025934:	6126      	str	r6, [r4, #16]
 8025936:	6165      	str	r5, [r4, #20]
 8025938:	444e      	add	r6, r9
 802593a:	eba5 0509 	sub.w	r5, r5, r9
 802593e:	6026      	str	r6, [r4, #0]
 8025940:	60a5      	str	r5, [r4, #8]
 8025942:	463e      	mov	r6, r7
 8025944:	42be      	cmp	r6, r7
 8025946:	d900      	bls.n	802594a <__ssputs_r+0x72>
 8025948:	463e      	mov	r6, r7
 802594a:	6820      	ldr	r0, [r4, #0]
 802594c:	4632      	mov	r2, r6
 802594e:	4641      	mov	r1, r8
 8025950:	f000 fb82 	bl	8026058 <memmove>
 8025954:	68a3      	ldr	r3, [r4, #8]
 8025956:	1b9b      	subs	r3, r3, r6
 8025958:	60a3      	str	r3, [r4, #8]
 802595a:	6823      	ldr	r3, [r4, #0]
 802595c:	4433      	add	r3, r6
 802595e:	6023      	str	r3, [r4, #0]
 8025960:	2000      	movs	r0, #0
 8025962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025966:	462a      	mov	r2, r5
 8025968:	f000 fb48 	bl	8025ffc <_realloc_r>
 802596c:	4606      	mov	r6, r0
 802596e:	2800      	cmp	r0, #0
 8025970:	d1e0      	bne.n	8025934 <__ssputs_r+0x5c>
 8025972:	6921      	ldr	r1, [r4, #16]
 8025974:	4650      	mov	r0, sl
 8025976:	f000 fb99 	bl	80260ac <_free_r>
 802597a:	230c      	movs	r3, #12
 802597c:	f8ca 3000 	str.w	r3, [sl]
 8025980:	89a3      	ldrh	r3, [r4, #12]
 8025982:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8025986:	81a3      	strh	r3, [r4, #12]
 8025988:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 802598c:	e7e9      	b.n	8025962 <__ssputs_r+0x8a>
	...

08025990 <_svfiprintf_r>:
 8025990:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8025994:	4698      	mov	r8, r3
 8025996:	898b      	ldrh	r3, [r1, #12]
 8025998:	061b      	lsls	r3, r3, #24
 802599a:	b09d      	sub	sp, #116	@ 0x74
 802599c:	4607      	mov	r7, r0
 802599e:	460d      	mov	r5, r1
 80259a0:	4614      	mov	r4, r2
 80259a2:	d510      	bpl.n	80259c6 <_svfiprintf_r+0x36>
 80259a4:	690b      	ldr	r3, [r1, #16]
 80259a6:	b973      	cbnz	r3, 80259c6 <_svfiprintf_r+0x36>
 80259a8:	2140      	movs	r1, #64	@ 0x40
 80259aa:	f000 f90f 	bl	8025bcc <_malloc_r>
 80259ae:	6028      	str	r0, [r5, #0]
 80259b0:	6128      	str	r0, [r5, #16]
 80259b2:	b930      	cbnz	r0, 80259c2 <_svfiprintf_r+0x32>
 80259b4:	230c      	movs	r3, #12
 80259b6:	603b      	str	r3, [r7, #0]
 80259b8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80259bc:	b01d      	add	sp, #116	@ 0x74
 80259be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80259c2:	2340      	movs	r3, #64	@ 0x40
 80259c4:	616b      	str	r3, [r5, #20]
 80259c6:	2300      	movs	r3, #0
 80259c8:	9309      	str	r3, [sp, #36]	@ 0x24
 80259ca:	2320      	movs	r3, #32
 80259cc:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80259d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80259d4:	2330      	movs	r3, #48	@ 0x30
 80259d6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8025b74 <_svfiprintf_r+0x1e4>
 80259da:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80259de:	f04f 0901 	mov.w	r9, #1
 80259e2:	4623      	mov	r3, r4
 80259e4:	469a      	mov	sl, r3
 80259e6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80259ea:	b10a      	cbz	r2, 80259f0 <_svfiprintf_r+0x60>
 80259ec:	2a25      	cmp	r2, #37	@ 0x25
 80259ee:	d1f9      	bne.n	80259e4 <_svfiprintf_r+0x54>
 80259f0:	ebba 0b04 	subs.w	fp, sl, r4
 80259f4:	d00b      	beq.n	8025a0e <_svfiprintf_r+0x7e>
 80259f6:	465b      	mov	r3, fp
 80259f8:	4622      	mov	r2, r4
 80259fa:	4629      	mov	r1, r5
 80259fc:	4638      	mov	r0, r7
 80259fe:	f7ff ff6b 	bl	80258d8 <__ssputs_r>
 8025a02:	3001      	adds	r0, #1
 8025a04:	f000 80a7 	beq.w	8025b56 <_svfiprintf_r+0x1c6>
 8025a08:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8025a0a:	445a      	add	r2, fp
 8025a0c:	9209      	str	r2, [sp, #36]	@ 0x24
 8025a0e:	f89a 3000 	ldrb.w	r3, [sl]
 8025a12:	2b00      	cmp	r3, #0
 8025a14:	f000 809f 	beq.w	8025b56 <_svfiprintf_r+0x1c6>
 8025a18:	2300      	movs	r3, #0
 8025a1a:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8025a1e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8025a22:	f10a 0a01 	add.w	sl, sl, #1
 8025a26:	9304      	str	r3, [sp, #16]
 8025a28:	9307      	str	r3, [sp, #28]
 8025a2a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8025a2e:	931a      	str	r3, [sp, #104]	@ 0x68
 8025a30:	4654      	mov	r4, sl
 8025a32:	2205      	movs	r2, #5
 8025a34:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025a38:	484e      	ldr	r0, [pc, #312]	@ (8025b74 <_svfiprintf_r+0x1e4>)
 8025a3a:	f7da fc51 	bl	80002e0 <memchr>
 8025a3e:	9a04      	ldr	r2, [sp, #16]
 8025a40:	b9d8      	cbnz	r0, 8025a7a <_svfiprintf_r+0xea>
 8025a42:	06d0      	lsls	r0, r2, #27
 8025a44:	bf44      	itt	mi
 8025a46:	2320      	movmi	r3, #32
 8025a48:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025a4c:	0711      	lsls	r1, r2, #28
 8025a4e:	bf44      	itt	mi
 8025a50:	232b      	movmi	r3, #43	@ 0x2b
 8025a52:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8025a56:	f89a 3000 	ldrb.w	r3, [sl]
 8025a5a:	2b2a      	cmp	r3, #42	@ 0x2a
 8025a5c:	d015      	beq.n	8025a8a <_svfiprintf_r+0xfa>
 8025a5e:	9a07      	ldr	r2, [sp, #28]
 8025a60:	4654      	mov	r4, sl
 8025a62:	2000      	movs	r0, #0
 8025a64:	f04f 0c0a 	mov.w	ip, #10
 8025a68:	4621      	mov	r1, r4
 8025a6a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8025a6e:	3b30      	subs	r3, #48	@ 0x30
 8025a70:	2b09      	cmp	r3, #9
 8025a72:	d94b      	bls.n	8025b0c <_svfiprintf_r+0x17c>
 8025a74:	b1b0      	cbz	r0, 8025aa4 <_svfiprintf_r+0x114>
 8025a76:	9207      	str	r2, [sp, #28]
 8025a78:	e014      	b.n	8025aa4 <_svfiprintf_r+0x114>
 8025a7a:	eba0 0308 	sub.w	r3, r0, r8
 8025a7e:	fa09 f303 	lsl.w	r3, r9, r3
 8025a82:	4313      	orrs	r3, r2
 8025a84:	9304      	str	r3, [sp, #16]
 8025a86:	46a2      	mov	sl, r4
 8025a88:	e7d2      	b.n	8025a30 <_svfiprintf_r+0xa0>
 8025a8a:	9b03      	ldr	r3, [sp, #12]
 8025a8c:	1d19      	adds	r1, r3, #4
 8025a8e:	681b      	ldr	r3, [r3, #0]
 8025a90:	9103      	str	r1, [sp, #12]
 8025a92:	2b00      	cmp	r3, #0
 8025a94:	bfbb      	ittet	lt
 8025a96:	425b      	neglt	r3, r3
 8025a98:	f042 0202 	orrlt.w	r2, r2, #2
 8025a9c:	9307      	strge	r3, [sp, #28]
 8025a9e:	9307      	strlt	r3, [sp, #28]
 8025aa0:	bfb8      	it	lt
 8025aa2:	9204      	strlt	r2, [sp, #16]
 8025aa4:	7823      	ldrb	r3, [r4, #0]
 8025aa6:	2b2e      	cmp	r3, #46	@ 0x2e
 8025aa8:	d10a      	bne.n	8025ac0 <_svfiprintf_r+0x130>
 8025aaa:	7863      	ldrb	r3, [r4, #1]
 8025aac:	2b2a      	cmp	r3, #42	@ 0x2a
 8025aae:	d132      	bne.n	8025b16 <_svfiprintf_r+0x186>
 8025ab0:	9b03      	ldr	r3, [sp, #12]
 8025ab2:	1d1a      	adds	r2, r3, #4
 8025ab4:	681b      	ldr	r3, [r3, #0]
 8025ab6:	9203      	str	r2, [sp, #12]
 8025ab8:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8025abc:	3402      	adds	r4, #2
 8025abe:	9305      	str	r3, [sp, #20]
 8025ac0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8025b84 <_svfiprintf_r+0x1f4>
 8025ac4:	7821      	ldrb	r1, [r4, #0]
 8025ac6:	2203      	movs	r2, #3
 8025ac8:	4650      	mov	r0, sl
 8025aca:	f7da fc09 	bl	80002e0 <memchr>
 8025ace:	b138      	cbz	r0, 8025ae0 <_svfiprintf_r+0x150>
 8025ad0:	9b04      	ldr	r3, [sp, #16]
 8025ad2:	eba0 000a 	sub.w	r0, r0, sl
 8025ad6:	2240      	movs	r2, #64	@ 0x40
 8025ad8:	4082      	lsls	r2, r0
 8025ada:	4313      	orrs	r3, r2
 8025adc:	3401      	adds	r4, #1
 8025ade:	9304      	str	r3, [sp, #16]
 8025ae0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8025ae4:	4824      	ldr	r0, [pc, #144]	@ (8025b78 <_svfiprintf_r+0x1e8>)
 8025ae6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8025aea:	2206      	movs	r2, #6
 8025aec:	f7da fbf8 	bl	80002e0 <memchr>
 8025af0:	2800      	cmp	r0, #0
 8025af2:	d036      	beq.n	8025b62 <_svfiprintf_r+0x1d2>
 8025af4:	4b21      	ldr	r3, [pc, #132]	@ (8025b7c <_svfiprintf_r+0x1ec>)
 8025af6:	bb1b      	cbnz	r3, 8025b40 <_svfiprintf_r+0x1b0>
 8025af8:	9b03      	ldr	r3, [sp, #12]
 8025afa:	3307      	adds	r3, #7
 8025afc:	f023 0307 	bic.w	r3, r3, #7
 8025b00:	3308      	adds	r3, #8
 8025b02:	9303      	str	r3, [sp, #12]
 8025b04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8025b06:	4433      	add	r3, r6
 8025b08:	9309      	str	r3, [sp, #36]	@ 0x24
 8025b0a:	e76a      	b.n	80259e2 <_svfiprintf_r+0x52>
 8025b0c:	fb0c 3202 	mla	r2, ip, r2, r3
 8025b10:	460c      	mov	r4, r1
 8025b12:	2001      	movs	r0, #1
 8025b14:	e7a8      	b.n	8025a68 <_svfiprintf_r+0xd8>
 8025b16:	2300      	movs	r3, #0
 8025b18:	3401      	adds	r4, #1
 8025b1a:	9305      	str	r3, [sp, #20]
 8025b1c:	4619      	mov	r1, r3
 8025b1e:	f04f 0c0a 	mov.w	ip, #10
 8025b22:	4620      	mov	r0, r4
 8025b24:	f810 2b01 	ldrb.w	r2, [r0], #1
 8025b28:	3a30      	subs	r2, #48	@ 0x30
 8025b2a:	2a09      	cmp	r2, #9
 8025b2c:	d903      	bls.n	8025b36 <_svfiprintf_r+0x1a6>
 8025b2e:	2b00      	cmp	r3, #0
 8025b30:	d0c6      	beq.n	8025ac0 <_svfiprintf_r+0x130>
 8025b32:	9105      	str	r1, [sp, #20]
 8025b34:	e7c4      	b.n	8025ac0 <_svfiprintf_r+0x130>
 8025b36:	fb0c 2101 	mla	r1, ip, r1, r2
 8025b3a:	4604      	mov	r4, r0
 8025b3c:	2301      	movs	r3, #1
 8025b3e:	e7f0      	b.n	8025b22 <_svfiprintf_r+0x192>
 8025b40:	ab03      	add	r3, sp, #12
 8025b42:	9300      	str	r3, [sp, #0]
 8025b44:	462a      	mov	r2, r5
 8025b46:	4b0e      	ldr	r3, [pc, #56]	@ (8025b80 <_svfiprintf_r+0x1f0>)
 8025b48:	a904      	add	r1, sp, #16
 8025b4a:	4638      	mov	r0, r7
 8025b4c:	f3af 8000 	nop.w
 8025b50:	1c42      	adds	r2, r0, #1
 8025b52:	4606      	mov	r6, r0
 8025b54:	d1d6      	bne.n	8025b04 <_svfiprintf_r+0x174>
 8025b56:	89ab      	ldrh	r3, [r5, #12]
 8025b58:	065b      	lsls	r3, r3, #25
 8025b5a:	f53f af2d 	bmi.w	80259b8 <_svfiprintf_r+0x28>
 8025b5e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8025b60:	e72c      	b.n	80259bc <_svfiprintf_r+0x2c>
 8025b62:	ab03      	add	r3, sp, #12
 8025b64:	9300      	str	r3, [sp, #0]
 8025b66:	462a      	mov	r2, r5
 8025b68:	4b05      	ldr	r3, [pc, #20]	@ (8025b80 <_svfiprintf_r+0x1f0>)
 8025b6a:	a904      	add	r1, sp, #16
 8025b6c:	4638      	mov	r0, r7
 8025b6e:	f000 f91b 	bl	8025da8 <_printf_i>
 8025b72:	e7ed      	b.n	8025b50 <_svfiprintf_r+0x1c0>
 8025b74:	0802dd30 	.word	0x0802dd30
 8025b78:	0802dd3a 	.word	0x0802dd3a
 8025b7c:	00000000 	.word	0x00000000
 8025b80:	080258d9 	.word	0x080258d9
 8025b84:	0802dd36 	.word	0x0802dd36

08025b88 <sbrk_aligned>:
 8025b88:	b570      	push	{r4, r5, r6, lr}
 8025b8a:	4e0f      	ldr	r6, [pc, #60]	@ (8025bc8 <sbrk_aligned+0x40>)
 8025b8c:	460c      	mov	r4, r1
 8025b8e:	6831      	ldr	r1, [r6, #0]
 8025b90:	4605      	mov	r5, r0
 8025b92:	b911      	cbnz	r1, 8025b9a <sbrk_aligned+0x12>
 8025b94:	f000 fa7a 	bl	802608c <_sbrk_r>
 8025b98:	6030      	str	r0, [r6, #0]
 8025b9a:	4621      	mov	r1, r4
 8025b9c:	4628      	mov	r0, r5
 8025b9e:	f000 fa75 	bl	802608c <_sbrk_r>
 8025ba2:	1c43      	adds	r3, r0, #1
 8025ba4:	d103      	bne.n	8025bae <sbrk_aligned+0x26>
 8025ba6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8025baa:	4620      	mov	r0, r4
 8025bac:	bd70      	pop	{r4, r5, r6, pc}
 8025bae:	1cc4      	adds	r4, r0, #3
 8025bb0:	f024 0403 	bic.w	r4, r4, #3
 8025bb4:	42a0      	cmp	r0, r4
 8025bb6:	d0f8      	beq.n	8025baa <sbrk_aligned+0x22>
 8025bb8:	1a21      	subs	r1, r4, r0
 8025bba:	4628      	mov	r0, r5
 8025bbc:	f000 fa66 	bl	802608c <_sbrk_r>
 8025bc0:	3001      	adds	r0, #1
 8025bc2:	d1f2      	bne.n	8025baa <sbrk_aligned+0x22>
 8025bc4:	e7ef      	b.n	8025ba6 <sbrk_aligned+0x1e>
 8025bc6:	bf00      	nop
 8025bc8:	24008ba0 	.word	0x24008ba0

08025bcc <_malloc_r>:
 8025bcc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8025bd0:	1ccd      	adds	r5, r1, #3
 8025bd2:	f025 0503 	bic.w	r5, r5, #3
 8025bd6:	3508      	adds	r5, #8
 8025bd8:	2d0c      	cmp	r5, #12
 8025bda:	bf38      	it	cc
 8025bdc:	250c      	movcc	r5, #12
 8025bde:	2d00      	cmp	r5, #0
 8025be0:	4606      	mov	r6, r0
 8025be2:	db01      	blt.n	8025be8 <_malloc_r+0x1c>
 8025be4:	42a9      	cmp	r1, r5
 8025be6:	d904      	bls.n	8025bf2 <_malloc_r+0x26>
 8025be8:	230c      	movs	r3, #12
 8025bea:	6033      	str	r3, [r6, #0]
 8025bec:	2000      	movs	r0, #0
 8025bee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8025bf2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8025cc8 <_malloc_r+0xfc>
 8025bf6:	f000 f9f5 	bl	8025fe4 <__malloc_lock>
 8025bfa:	f8d8 3000 	ldr.w	r3, [r8]
 8025bfe:	461c      	mov	r4, r3
 8025c00:	bb44      	cbnz	r4, 8025c54 <_malloc_r+0x88>
 8025c02:	4629      	mov	r1, r5
 8025c04:	4630      	mov	r0, r6
 8025c06:	f7ff ffbf 	bl	8025b88 <sbrk_aligned>
 8025c0a:	1c43      	adds	r3, r0, #1
 8025c0c:	4604      	mov	r4, r0
 8025c0e:	d158      	bne.n	8025cc2 <_malloc_r+0xf6>
 8025c10:	f8d8 4000 	ldr.w	r4, [r8]
 8025c14:	4627      	mov	r7, r4
 8025c16:	2f00      	cmp	r7, #0
 8025c18:	d143      	bne.n	8025ca2 <_malloc_r+0xd6>
 8025c1a:	2c00      	cmp	r4, #0
 8025c1c:	d04b      	beq.n	8025cb6 <_malloc_r+0xea>
 8025c1e:	6823      	ldr	r3, [r4, #0]
 8025c20:	4639      	mov	r1, r7
 8025c22:	4630      	mov	r0, r6
 8025c24:	eb04 0903 	add.w	r9, r4, r3
 8025c28:	f000 fa30 	bl	802608c <_sbrk_r>
 8025c2c:	4581      	cmp	r9, r0
 8025c2e:	d142      	bne.n	8025cb6 <_malloc_r+0xea>
 8025c30:	6821      	ldr	r1, [r4, #0]
 8025c32:	1a6d      	subs	r5, r5, r1
 8025c34:	4629      	mov	r1, r5
 8025c36:	4630      	mov	r0, r6
 8025c38:	f7ff ffa6 	bl	8025b88 <sbrk_aligned>
 8025c3c:	3001      	adds	r0, #1
 8025c3e:	d03a      	beq.n	8025cb6 <_malloc_r+0xea>
 8025c40:	6823      	ldr	r3, [r4, #0]
 8025c42:	442b      	add	r3, r5
 8025c44:	6023      	str	r3, [r4, #0]
 8025c46:	f8d8 3000 	ldr.w	r3, [r8]
 8025c4a:	685a      	ldr	r2, [r3, #4]
 8025c4c:	bb62      	cbnz	r2, 8025ca8 <_malloc_r+0xdc>
 8025c4e:	f8c8 7000 	str.w	r7, [r8]
 8025c52:	e00f      	b.n	8025c74 <_malloc_r+0xa8>
 8025c54:	6822      	ldr	r2, [r4, #0]
 8025c56:	1b52      	subs	r2, r2, r5
 8025c58:	d420      	bmi.n	8025c9c <_malloc_r+0xd0>
 8025c5a:	2a0b      	cmp	r2, #11
 8025c5c:	d917      	bls.n	8025c8e <_malloc_r+0xc2>
 8025c5e:	1961      	adds	r1, r4, r5
 8025c60:	42a3      	cmp	r3, r4
 8025c62:	6025      	str	r5, [r4, #0]
 8025c64:	bf18      	it	ne
 8025c66:	6059      	strne	r1, [r3, #4]
 8025c68:	6863      	ldr	r3, [r4, #4]
 8025c6a:	bf08      	it	eq
 8025c6c:	f8c8 1000 	streq.w	r1, [r8]
 8025c70:	5162      	str	r2, [r4, r5]
 8025c72:	604b      	str	r3, [r1, #4]
 8025c74:	4630      	mov	r0, r6
 8025c76:	f000 f9bb 	bl	8025ff0 <__malloc_unlock>
 8025c7a:	f104 000b 	add.w	r0, r4, #11
 8025c7e:	1d23      	adds	r3, r4, #4
 8025c80:	f020 0007 	bic.w	r0, r0, #7
 8025c84:	1ac2      	subs	r2, r0, r3
 8025c86:	bf1c      	itt	ne
 8025c88:	1a1b      	subne	r3, r3, r0
 8025c8a:	50a3      	strne	r3, [r4, r2]
 8025c8c:	e7af      	b.n	8025bee <_malloc_r+0x22>
 8025c8e:	6862      	ldr	r2, [r4, #4]
 8025c90:	42a3      	cmp	r3, r4
 8025c92:	bf0c      	ite	eq
 8025c94:	f8c8 2000 	streq.w	r2, [r8]
 8025c98:	605a      	strne	r2, [r3, #4]
 8025c9a:	e7eb      	b.n	8025c74 <_malloc_r+0xa8>
 8025c9c:	4623      	mov	r3, r4
 8025c9e:	6864      	ldr	r4, [r4, #4]
 8025ca0:	e7ae      	b.n	8025c00 <_malloc_r+0x34>
 8025ca2:	463c      	mov	r4, r7
 8025ca4:	687f      	ldr	r7, [r7, #4]
 8025ca6:	e7b6      	b.n	8025c16 <_malloc_r+0x4a>
 8025ca8:	461a      	mov	r2, r3
 8025caa:	685b      	ldr	r3, [r3, #4]
 8025cac:	42a3      	cmp	r3, r4
 8025cae:	d1fb      	bne.n	8025ca8 <_malloc_r+0xdc>
 8025cb0:	2300      	movs	r3, #0
 8025cb2:	6053      	str	r3, [r2, #4]
 8025cb4:	e7de      	b.n	8025c74 <_malloc_r+0xa8>
 8025cb6:	230c      	movs	r3, #12
 8025cb8:	6033      	str	r3, [r6, #0]
 8025cba:	4630      	mov	r0, r6
 8025cbc:	f000 f998 	bl	8025ff0 <__malloc_unlock>
 8025cc0:	e794      	b.n	8025bec <_malloc_r+0x20>
 8025cc2:	6005      	str	r5, [r0, #0]
 8025cc4:	e7d6      	b.n	8025c74 <_malloc_r+0xa8>
 8025cc6:	bf00      	nop
 8025cc8:	24008ba4 	.word	0x24008ba4

08025ccc <_printf_common>:
 8025ccc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8025cd0:	4616      	mov	r6, r2
 8025cd2:	4698      	mov	r8, r3
 8025cd4:	688a      	ldr	r2, [r1, #8]
 8025cd6:	690b      	ldr	r3, [r1, #16]
 8025cd8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8025cdc:	4293      	cmp	r3, r2
 8025cde:	bfb8      	it	lt
 8025ce0:	4613      	movlt	r3, r2
 8025ce2:	6033      	str	r3, [r6, #0]
 8025ce4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8025ce8:	4607      	mov	r7, r0
 8025cea:	460c      	mov	r4, r1
 8025cec:	b10a      	cbz	r2, 8025cf2 <_printf_common+0x26>
 8025cee:	3301      	adds	r3, #1
 8025cf0:	6033      	str	r3, [r6, #0]
 8025cf2:	6823      	ldr	r3, [r4, #0]
 8025cf4:	0699      	lsls	r1, r3, #26
 8025cf6:	bf42      	ittt	mi
 8025cf8:	6833      	ldrmi	r3, [r6, #0]
 8025cfa:	3302      	addmi	r3, #2
 8025cfc:	6033      	strmi	r3, [r6, #0]
 8025cfe:	6825      	ldr	r5, [r4, #0]
 8025d00:	f015 0506 	ands.w	r5, r5, #6
 8025d04:	d106      	bne.n	8025d14 <_printf_common+0x48>
 8025d06:	f104 0a19 	add.w	sl, r4, #25
 8025d0a:	68e3      	ldr	r3, [r4, #12]
 8025d0c:	6832      	ldr	r2, [r6, #0]
 8025d0e:	1a9b      	subs	r3, r3, r2
 8025d10:	42ab      	cmp	r3, r5
 8025d12:	dc26      	bgt.n	8025d62 <_printf_common+0x96>
 8025d14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8025d18:	6822      	ldr	r2, [r4, #0]
 8025d1a:	3b00      	subs	r3, #0
 8025d1c:	bf18      	it	ne
 8025d1e:	2301      	movne	r3, #1
 8025d20:	0692      	lsls	r2, r2, #26
 8025d22:	d42b      	bmi.n	8025d7c <_printf_common+0xb0>
 8025d24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8025d28:	4641      	mov	r1, r8
 8025d2a:	4638      	mov	r0, r7
 8025d2c:	47c8      	blx	r9
 8025d2e:	3001      	adds	r0, #1
 8025d30:	d01e      	beq.n	8025d70 <_printf_common+0xa4>
 8025d32:	6823      	ldr	r3, [r4, #0]
 8025d34:	6922      	ldr	r2, [r4, #16]
 8025d36:	f003 0306 	and.w	r3, r3, #6
 8025d3a:	2b04      	cmp	r3, #4
 8025d3c:	bf02      	ittt	eq
 8025d3e:	68e5      	ldreq	r5, [r4, #12]
 8025d40:	6833      	ldreq	r3, [r6, #0]
 8025d42:	1aed      	subeq	r5, r5, r3
 8025d44:	68a3      	ldr	r3, [r4, #8]
 8025d46:	bf0c      	ite	eq
 8025d48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8025d4c:	2500      	movne	r5, #0
 8025d4e:	4293      	cmp	r3, r2
 8025d50:	bfc4      	itt	gt
 8025d52:	1a9b      	subgt	r3, r3, r2
 8025d54:	18ed      	addgt	r5, r5, r3
 8025d56:	2600      	movs	r6, #0
 8025d58:	341a      	adds	r4, #26
 8025d5a:	42b5      	cmp	r5, r6
 8025d5c:	d11a      	bne.n	8025d94 <_printf_common+0xc8>
 8025d5e:	2000      	movs	r0, #0
 8025d60:	e008      	b.n	8025d74 <_printf_common+0xa8>
 8025d62:	2301      	movs	r3, #1
 8025d64:	4652      	mov	r2, sl
 8025d66:	4641      	mov	r1, r8
 8025d68:	4638      	mov	r0, r7
 8025d6a:	47c8      	blx	r9
 8025d6c:	3001      	adds	r0, #1
 8025d6e:	d103      	bne.n	8025d78 <_printf_common+0xac>
 8025d70:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025d74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025d78:	3501      	adds	r5, #1
 8025d7a:	e7c6      	b.n	8025d0a <_printf_common+0x3e>
 8025d7c:	18e1      	adds	r1, r4, r3
 8025d7e:	1c5a      	adds	r2, r3, #1
 8025d80:	2030      	movs	r0, #48	@ 0x30
 8025d82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8025d86:	4422      	add	r2, r4
 8025d88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8025d8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8025d90:	3302      	adds	r3, #2
 8025d92:	e7c7      	b.n	8025d24 <_printf_common+0x58>
 8025d94:	2301      	movs	r3, #1
 8025d96:	4622      	mov	r2, r4
 8025d98:	4641      	mov	r1, r8
 8025d9a:	4638      	mov	r0, r7
 8025d9c:	47c8      	blx	r9
 8025d9e:	3001      	adds	r0, #1
 8025da0:	d0e6      	beq.n	8025d70 <_printf_common+0xa4>
 8025da2:	3601      	adds	r6, #1
 8025da4:	e7d9      	b.n	8025d5a <_printf_common+0x8e>
	...

08025da8 <_printf_i>:
 8025da8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8025dac:	7e0f      	ldrb	r7, [r1, #24]
 8025dae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8025db0:	2f78      	cmp	r7, #120	@ 0x78
 8025db2:	4691      	mov	r9, r2
 8025db4:	4680      	mov	r8, r0
 8025db6:	460c      	mov	r4, r1
 8025db8:	469a      	mov	sl, r3
 8025dba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8025dbe:	d807      	bhi.n	8025dd0 <_printf_i+0x28>
 8025dc0:	2f62      	cmp	r7, #98	@ 0x62
 8025dc2:	d80a      	bhi.n	8025dda <_printf_i+0x32>
 8025dc4:	2f00      	cmp	r7, #0
 8025dc6:	f000 80d1 	beq.w	8025f6c <_printf_i+0x1c4>
 8025dca:	2f58      	cmp	r7, #88	@ 0x58
 8025dcc:	f000 80b8 	beq.w	8025f40 <_printf_i+0x198>
 8025dd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025dd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8025dd8:	e03a      	b.n	8025e50 <_printf_i+0xa8>
 8025dda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8025dde:	2b15      	cmp	r3, #21
 8025de0:	d8f6      	bhi.n	8025dd0 <_printf_i+0x28>
 8025de2:	a101      	add	r1, pc, #4	@ (adr r1, 8025de8 <_printf_i+0x40>)
 8025de4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8025de8:	08025e41 	.word	0x08025e41
 8025dec:	08025e55 	.word	0x08025e55
 8025df0:	08025dd1 	.word	0x08025dd1
 8025df4:	08025dd1 	.word	0x08025dd1
 8025df8:	08025dd1 	.word	0x08025dd1
 8025dfc:	08025dd1 	.word	0x08025dd1
 8025e00:	08025e55 	.word	0x08025e55
 8025e04:	08025dd1 	.word	0x08025dd1
 8025e08:	08025dd1 	.word	0x08025dd1
 8025e0c:	08025dd1 	.word	0x08025dd1
 8025e10:	08025dd1 	.word	0x08025dd1
 8025e14:	08025f53 	.word	0x08025f53
 8025e18:	08025e7f 	.word	0x08025e7f
 8025e1c:	08025f0d 	.word	0x08025f0d
 8025e20:	08025dd1 	.word	0x08025dd1
 8025e24:	08025dd1 	.word	0x08025dd1
 8025e28:	08025f75 	.word	0x08025f75
 8025e2c:	08025dd1 	.word	0x08025dd1
 8025e30:	08025e7f 	.word	0x08025e7f
 8025e34:	08025dd1 	.word	0x08025dd1
 8025e38:	08025dd1 	.word	0x08025dd1
 8025e3c:	08025f15 	.word	0x08025f15
 8025e40:	6833      	ldr	r3, [r6, #0]
 8025e42:	1d1a      	adds	r2, r3, #4
 8025e44:	681b      	ldr	r3, [r3, #0]
 8025e46:	6032      	str	r2, [r6, #0]
 8025e48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8025e4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8025e50:	2301      	movs	r3, #1
 8025e52:	e09c      	b.n	8025f8e <_printf_i+0x1e6>
 8025e54:	6833      	ldr	r3, [r6, #0]
 8025e56:	6820      	ldr	r0, [r4, #0]
 8025e58:	1d19      	adds	r1, r3, #4
 8025e5a:	6031      	str	r1, [r6, #0]
 8025e5c:	0606      	lsls	r6, r0, #24
 8025e5e:	d501      	bpl.n	8025e64 <_printf_i+0xbc>
 8025e60:	681d      	ldr	r5, [r3, #0]
 8025e62:	e003      	b.n	8025e6c <_printf_i+0xc4>
 8025e64:	0645      	lsls	r5, r0, #25
 8025e66:	d5fb      	bpl.n	8025e60 <_printf_i+0xb8>
 8025e68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8025e6c:	2d00      	cmp	r5, #0
 8025e6e:	da03      	bge.n	8025e78 <_printf_i+0xd0>
 8025e70:	232d      	movs	r3, #45	@ 0x2d
 8025e72:	426d      	negs	r5, r5
 8025e74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025e78:	4858      	ldr	r0, [pc, #352]	@ (8025fdc <_printf_i+0x234>)
 8025e7a:	230a      	movs	r3, #10
 8025e7c:	e011      	b.n	8025ea2 <_printf_i+0xfa>
 8025e7e:	6821      	ldr	r1, [r4, #0]
 8025e80:	6833      	ldr	r3, [r6, #0]
 8025e82:	0608      	lsls	r0, r1, #24
 8025e84:	f853 5b04 	ldr.w	r5, [r3], #4
 8025e88:	d402      	bmi.n	8025e90 <_printf_i+0xe8>
 8025e8a:	0649      	lsls	r1, r1, #25
 8025e8c:	bf48      	it	mi
 8025e8e:	b2ad      	uxthmi	r5, r5
 8025e90:	2f6f      	cmp	r7, #111	@ 0x6f
 8025e92:	4852      	ldr	r0, [pc, #328]	@ (8025fdc <_printf_i+0x234>)
 8025e94:	6033      	str	r3, [r6, #0]
 8025e96:	bf14      	ite	ne
 8025e98:	230a      	movne	r3, #10
 8025e9a:	2308      	moveq	r3, #8
 8025e9c:	2100      	movs	r1, #0
 8025e9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8025ea2:	6866      	ldr	r6, [r4, #4]
 8025ea4:	60a6      	str	r6, [r4, #8]
 8025ea6:	2e00      	cmp	r6, #0
 8025ea8:	db05      	blt.n	8025eb6 <_printf_i+0x10e>
 8025eaa:	6821      	ldr	r1, [r4, #0]
 8025eac:	432e      	orrs	r6, r5
 8025eae:	f021 0104 	bic.w	r1, r1, #4
 8025eb2:	6021      	str	r1, [r4, #0]
 8025eb4:	d04b      	beq.n	8025f4e <_printf_i+0x1a6>
 8025eb6:	4616      	mov	r6, r2
 8025eb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8025ebc:	fb03 5711 	mls	r7, r3, r1, r5
 8025ec0:	5dc7      	ldrb	r7, [r0, r7]
 8025ec2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8025ec6:	462f      	mov	r7, r5
 8025ec8:	42bb      	cmp	r3, r7
 8025eca:	460d      	mov	r5, r1
 8025ecc:	d9f4      	bls.n	8025eb8 <_printf_i+0x110>
 8025ece:	2b08      	cmp	r3, #8
 8025ed0:	d10b      	bne.n	8025eea <_printf_i+0x142>
 8025ed2:	6823      	ldr	r3, [r4, #0]
 8025ed4:	07df      	lsls	r7, r3, #31
 8025ed6:	d508      	bpl.n	8025eea <_printf_i+0x142>
 8025ed8:	6923      	ldr	r3, [r4, #16]
 8025eda:	6861      	ldr	r1, [r4, #4]
 8025edc:	4299      	cmp	r1, r3
 8025ede:	bfde      	ittt	le
 8025ee0:	2330      	movle	r3, #48	@ 0x30
 8025ee2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8025ee6:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8025eea:	1b92      	subs	r2, r2, r6
 8025eec:	6122      	str	r2, [r4, #16]
 8025eee:	f8cd a000 	str.w	sl, [sp]
 8025ef2:	464b      	mov	r3, r9
 8025ef4:	aa03      	add	r2, sp, #12
 8025ef6:	4621      	mov	r1, r4
 8025ef8:	4640      	mov	r0, r8
 8025efa:	f7ff fee7 	bl	8025ccc <_printf_common>
 8025efe:	3001      	adds	r0, #1
 8025f00:	d14a      	bne.n	8025f98 <_printf_i+0x1f0>
 8025f02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8025f06:	b004      	add	sp, #16
 8025f08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8025f0c:	6823      	ldr	r3, [r4, #0]
 8025f0e:	f043 0320 	orr.w	r3, r3, #32
 8025f12:	6023      	str	r3, [r4, #0]
 8025f14:	4832      	ldr	r0, [pc, #200]	@ (8025fe0 <_printf_i+0x238>)
 8025f16:	2778      	movs	r7, #120	@ 0x78
 8025f18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8025f1c:	6823      	ldr	r3, [r4, #0]
 8025f1e:	6831      	ldr	r1, [r6, #0]
 8025f20:	061f      	lsls	r7, r3, #24
 8025f22:	f851 5b04 	ldr.w	r5, [r1], #4
 8025f26:	d402      	bmi.n	8025f2e <_printf_i+0x186>
 8025f28:	065f      	lsls	r7, r3, #25
 8025f2a:	bf48      	it	mi
 8025f2c:	b2ad      	uxthmi	r5, r5
 8025f2e:	6031      	str	r1, [r6, #0]
 8025f30:	07d9      	lsls	r1, r3, #31
 8025f32:	bf44      	itt	mi
 8025f34:	f043 0320 	orrmi.w	r3, r3, #32
 8025f38:	6023      	strmi	r3, [r4, #0]
 8025f3a:	b11d      	cbz	r5, 8025f44 <_printf_i+0x19c>
 8025f3c:	2310      	movs	r3, #16
 8025f3e:	e7ad      	b.n	8025e9c <_printf_i+0xf4>
 8025f40:	4826      	ldr	r0, [pc, #152]	@ (8025fdc <_printf_i+0x234>)
 8025f42:	e7e9      	b.n	8025f18 <_printf_i+0x170>
 8025f44:	6823      	ldr	r3, [r4, #0]
 8025f46:	f023 0320 	bic.w	r3, r3, #32
 8025f4a:	6023      	str	r3, [r4, #0]
 8025f4c:	e7f6      	b.n	8025f3c <_printf_i+0x194>
 8025f4e:	4616      	mov	r6, r2
 8025f50:	e7bd      	b.n	8025ece <_printf_i+0x126>
 8025f52:	6833      	ldr	r3, [r6, #0]
 8025f54:	6825      	ldr	r5, [r4, #0]
 8025f56:	6961      	ldr	r1, [r4, #20]
 8025f58:	1d18      	adds	r0, r3, #4
 8025f5a:	6030      	str	r0, [r6, #0]
 8025f5c:	062e      	lsls	r6, r5, #24
 8025f5e:	681b      	ldr	r3, [r3, #0]
 8025f60:	d501      	bpl.n	8025f66 <_printf_i+0x1be>
 8025f62:	6019      	str	r1, [r3, #0]
 8025f64:	e002      	b.n	8025f6c <_printf_i+0x1c4>
 8025f66:	0668      	lsls	r0, r5, #25
 8025f68:	d5fb      	bpl.n	8025f62 <_printf_i+0x1ba>
 8025f6a:	8019      	strh	r1, [r3, #0]
 8025f6c:	2300      	movs	r3, #0
 8025f6e:	6123      	str	r3, [r4, #16]
 8025f70:	4616      	mov	r6, r2
 8025f72:	e7bc      	b.n	8025eee <_printf_i+0x146>
 8025f74:	6833      	ldr	r3, [r6, #0]
 8025f76:	1d1a      	adds	r2, r3, #4
 8025f78:	6032      	str	r2, [r6, #0]
 8025f7a:	681e      	ldr	r6, [r3, #0]
 8025f7c:	6862      	ldr	r2, [r4, #4]
 8025f7e:	2100      	movs	r1, #0
 8025f80:	4630      	mov	r0, r6
 8025f82:	f7da f9ad 	bl	80002e0 <memchr>
 8025f86:	b108      	cbz	r0, 8025f8c <_printf_i+0x1e4>
 8025f88:	1b80      	subs	r0, r0, r6
 8025f8a:	6060      	str	r0, [r4, #4]
 8025f8c:	6863      	ldr	r3, [r4, #4]
 8025f8e:	6123      	str	r3, [r4, #16]
 8025f90:	2300      	movs	r3, #0
 8025f92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8025f96:	e7aa      	b.n	8025eee <_printf_i+0x146>
 8025f98:	6923      	ldr	r3, [r4, #16]
 8025f9a:	4632      	mov	r2, r6
 8025f9c:	4649      	mov	r1, r9
 8025f9e:	4640      	mov	r0, r8
 8025fa0:	47d0      	blx	sl
 8025fa2:	3001      	adds	r0, #1
 8025fa4:	d0ad      	beq.n	8025f02 <_printf_i+0x15a>
 8025fa6:	6823      	ldr	r3, [r4, #0]
 8025fa8:	079b      	lsls	r3, r3, #30
 8025faa:	d413      	bmi.n	8025fd4 <_printf_i+0x22c>
 8025fac:	68e0      	ldr	r0, [r4, #12]
 8025fae:	9b03      	ldr	r3, [sp, #12]
 8025fb0:	4298      	cmp	r0, r3
 8025fb2:	bfb8      	it	lt
 8025fb4:	4618      	movlt	r0, r3
 8025fb6:	e7a6      	b.n	8025f06 <_printf_i+0x15e>
 8025fb8:	2301      	movs	r3, #1
 8025fba:	4632      	mov	r2, r6
 8025fbc:	4649      	mov	r1, r9
 8025fbe:	4640      	mov	r0, r8
 8025fc0:	47d0      	blx	sl
 8025fc2:	3001      	adds	r0, #1
 8025fc4:	d09d      	beq.n	8025f02 <_printf_i+0x15a>
 8025fc6:	3501      	adds	r5, #1
 8025fc8:	68e3      	ldr	r3, [r4, #12]
 8025fca:	9903      	ldr	r1, [sp, #12]
 8025fcc:	1a5b      	subs	r3, r3, r1
 8025fce:	42ab      	cmp	r3, r5
 8025fd0:	dcf2      	bgt.n	8025fb8 <_printf_i+0x210>
 8025fd2:	e7eb      	b.n	8025fac <_printf_i+0x204>
 8025fd4:	2500      	movs	r5, #0
 8025fd6:	f104 0619 	add.w	r6, r4, #25
 8025fda:	e7f5      	b.n	8025fc8 <_printf_i+0x220>
 8025fdc:	0802dd41 	.word	0x0802dd41
 8025fe0:	0802dd52 	.word	0x0802dd52

08025fe4 <__malloc_lock>:
 8025fe4:	4801      	ldr	r0, [pc, #4]	@ (8025fec <__malloc_lock+0x8>)
 8025fe6:	f7ff bc67 	b.w	80258b8 <__retarget_lock_acquire_recursive>
 8025fea:	bf00      	nop
 8025fec:	24008b9c 	.word	0x24008b9c

08025ff0 <__malloc_unlock>:
 8025ff0:	4801      	ldr	r0, [pc, #4]	@ (8025ff8 <__malloc_unlock+0x8>)
 8025ff2:	f7ff bc62 	b.w	80258ba <__retarget_lock_release_recursive>
 8025ff6:	bf00      	nop
 8025ff8:	24008b9c 	.word	0x24008b9c

08025ffc <_realloc_r>:
 8025ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8026000:	4607      	mov	r7, r0
 8026002:	4614      	mov	r4, r2
 8026004:	460d      	mov	r5, r1
 8026006:	b921      	cbnz	r1, 8026012 <_realloc_r+0x16>
 8026008:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 802600c:	4611      	mov	r1, r2
 802600e:	f7ff bddd 	b.w	8025bcc <_malloc_r>
 8026012:	b92a      	cbnz	r2, 8026020 <_realloc_r+0x24>
 8026014:	f000 f84a 	bl	80260ac <_free_r>
 8026018:	4625      	mov	r5, r4
 802601a:	4628      	mov	r0, r5
 802601c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8026020:	f000 f88e 	bl	8026140 <_malloc_usable_size_r>
 8026024:	4284      	cmp	r4, r0
 8026026:	4606      	mov	r6, r0
 8026028:	d802      	bhi.n	8026030 <_realloc_r+0x34>
 802602a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 802602e:	d8f4      	bhi.n	802601a <_realloc_r+0x1e>
 8026030:	4621      	mov	r1, r4
 8026032:	4638      	mov	r0, r7
 8026034:	f7ff fdca 	bl	8025bcc <_malloc_r>
 8026038:	4680      	mov	r8, r0
 802603a:	b908      	cbnz	r0, 8026040 <_realloc_r+0x44>
 802603c:	4645      	mov	r5, r8
 802603e:	e7ec      	b.n	802601a <_realloc_r+0x1e>
 8026040:	42b4      	cmp	r4, r6
 8026042:	4622      	mov	r2, r4
 8026044:	4629      	mov	r1, r5
 8026046:	bf28      	it	cs
 8026048:	4632      	movcs	r2, r6
 802604a:	f7ff fc37 	bl	80258bc <memcpy>
 802604e:	4629      	mov	r1, r5
 8026050:	4638      	mov	r0, r7
 8026052:	f000 f82b 	bl	80260ac <_free_r>
 8026056:	e7f1      	b.n	802603c <_realloc_r+0x40>

08026058 <memmove>:
 8026058:	4288      	cmp	r0, r1
 802605a:	b510      	push	{r4, lr}
 802605c:	eb01 0402 	add.w	r4, r1, r2
 8026060:	d902      	bls.n	8026068 <memmove+0x10>
 8026062:	4284      	cmp	r4, r0
 8026064:	4623      	mov	r3, r4
 8026066:	d807      	bhi.n	8026078 <memmove+0x20>
 8026068:	1e43      	subs	r3, r0, #1
 802606a:	42a1      	cmp	r1, r4
 802606c:	d008      	beq.n	8026080 <memmove+0x28>
 802606e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8026072:	f803 2f01 	strb.w	r2, [r3, #1]!
 8026076:	e7f8      	b.n	802606a <memmove+0x12>
 8026078:	4402      	add	r2, r0
 802607a:	4601      	mov	r1, r0
 802607c:	428a      	cmp	r2, r1
 802607e:	d100      	bne.n	8026082 <memmove+0x2a>
 8026080:	bd10      	pop	{r4, pc}
 8026082:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8026086:	f802 4d01 	strb.w	r4, [r2, #-1]!
 802608a:	e7f7      	b.n	802607c <memmove+0x24>

0802608c <_sbrk_r>:
 802608c:	b538      	push	{r3, r4, r5, lr}
 802608e:	4d06      	ldr	r5, [pc, #24]	@ (80260a8 <_sbrk_r+0x1c>)
 8026090:	2300      	movs	r3, #0
 8026092:	4604      	mov	r4, r0
 8026094:	4608      	mov	r0, r1
 8026096:	602b      	str	r3, [r5, #0]
 8026098:	f7e4 fd24 	bl	800aae4 <_sbrk>
 802609c:	1c43      	adds	r3, r0, #1
 802609e:	d102      	bne.n	80260a6 <_sbrk_r+0x1a>
 80260a0:	682b      	ldr	r3, [r5, #0]
 80260a2:	b103      	cbz	r3, 80260a6 <_sbrk_r+0x1a>
 80260a4:	6023      	str	r3, [r4, #0]
 80260a6:	bd38      	pop	{r3, r4, r5, pc}
 80260a8:	24008ba8 	.word	0x24008ba8

080260ac <_free_r>:
 80260ac:	b538      	push	{r3, r4, r5, lr}
 80260ae:	4605      	mov	r5, r0
 80260b0:	2900      	cmp	r1, #0
 80260b2:	d041      	beq.n	8026138 <_free_r+0x8c>
 80260b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80260b8:	1f0c      	subs	r4, r1, #4
 80260ba:	2b00      	cmp	r3, #0
 80260bc:	bfb8      	it	lt
 80260be:	18e4      	addlt	r4, r4, r3
 80260c0:	f7ff ff90 	bl	8025fe4 <__malloc_lock>
 80260c4:	4a1d      	ldr	r2, [pc, #116]	@ (802613c <_free_r+0x90>)
 80260c6:	6813      	ldr	r3, [r2, #0]
 80260c8:	b933      	cbnz	r3, 80260d8 <_free_r+0x2c>
 80260ca:	6063      	str	r3, [r4, #4]
 80260cc:	6014      	str	r4, [r2, #0]
 80260ce:	4628      	mov	r0, r5
 80260d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80260d4:	f7ff bf8c 	b.w	8025ff0 <__malloc_unlock>
 80260d8:	42a3      	cmp	r3, r4
 80260da:	d908      	bls.n	80260ee <_free_r+0x42>
 80260dc:	6820      	ldr	r0, [r4, #0]
 80260de:	1821      	adds	r1, r4, r0
 80260e0:	428b      	cmp	r3, r1
 80260e2:	bf01      	itttt	eq
 80260e4:	6819      	ldreq	r1, [r3, #0]
 80260e6:	685b      	ldreq	r3, [r3, #4]
 80260e8:	1809      	addeq	r1, r1, r0
 80260ea:	6021      	streq	r1, [r4, #0]
 80260ec:	e7ed      	b.n	80260ca <_free_r+0x1e>
 80260ee:	461a      	mov	r2, r3
 80260f0:	685b      	ldr	r3, [r3, #4]
 80260f2:	b10b      	cbz	r3, 80260f8 <_free_r+0x4c>
 80260f4:	42a3      	cmp	r3, r4
 80260f6:	d9fa      	bls.n	80260ee <_free_r+0x42>
 80260f8:	6811      	ldr	r1, [r2, #0]
 80260fa:	1850      	adds	r0, r2, r1
 80260fc:	42a0      	cmp	r0, r4
 80260fe:	d10b      	bne.n	8026118 <_free_r+0x6c>
 8026100:	6820      	ldr	r0, [r4, #0]
 8026102:	4401      	add	r1, r0
 8026104:	1850      	adds	r0, r2, r1
 8026106:	4283      	cmp	r3, r0
 8026108:	6011      	str	r1, [r2, #0]
 802610a:	d1e0      	bne.n	80260ce <_free_r+0x22>
 802610c:	6818      	ldr	r0, [r3, #0]
 802610e:	685b      	ldr	r3, [r3, #4]
 8026110:	6053      	str	r3, [r2, #4]
 8026112:	4408      	add	r0, r1
 8026114:	6010      	str	r0, [r2, #0]
 8026116:	e7da      	b.n	80260ce <_free_r+0x22>
 8026118:	d902      	bls.n	8026120 <_free_r+0x74>
 802611a:	230c      	movs	r3, #12
 802611c:	602b      	str	r3, [r5, #0]
 802611e:	e7d6      	b.n	80260ce <_free_r+0x22>
 8026120:	6820      	ldr	r0, [r4, #0]
 8026122:	1821      	adds	r1, r4, r0
 8026124:	428b      	cmp	r3, r1
 8026126:	bf04      	itt	eq
 8026128:	6819      	ldreq	r1, [r3, #0]
 802612a:	685b      	ldreq	r3, [r3, #4]
 802612c:	6063      	str	r3, [r4, #4]
 802612e:	bf04      	itt	eq
 8026130:	1809      	addeq	r1, r1, r0
 8026132:	6021      	streq	r1, [r4, #0]
 8026134:	6054      	str	r4, [r2, #4]
 8026136:	e7ca      	b.n	80260ce <_free_r+0x22>
 8026138:	bd38      	pop	{r3, r4, r5, pc}
 802613a:	bf00      	nop
 802613c:	24008ba4 	.word	0x24008ba4

08026140 <_malloc_usable_size_r>:
 8026140:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8026144:	1f18      	subs	r0, r3, #4
 8026146:	2b00      	cmp	r3, #0
 8026148:	bfbc      	itt	lt
 802614a:	580b      	ldrlt	r3, [r1, r0]
 802614c:	18c0      	addlt	r0, r0, r3
 802614e:	4770      	bx	lr

08026150 <checkint>:
 8026150:	f3c0 53c7 	ubfx	r3, r0, #23, #8
 8026154:	2b7e      	cmp	r3, #126	@ 0x7e
 8026156:	d910      	bls.n	802617a <checkint+0x2a>
 8026158:	2b96      	cmp	r3, #150	@ 0x96
 802615a:	d80c      	bhi.n	8026176 <checkint+0x26>
 802615c:	2201      	movs	r2, #1
 802615e:	f1c3 0396 	rsb	r3, r3, #150	@ 0x96
 8026162:	fa02 f303 	lsl.w	r3, r2, r3
 8026166:	1e5a      	subs	r2, r3, #1
 8026168:	4202      	tst	r2, r0
 802616a:	d106      	bne.n	802617a <checkint+0x2a>
 802616c:	4203      	tst	r3, r0
 802616e:	bf14      	ite	ne
 8026170:	2001      	movne	r0, #1
 8026172:	2002      	moveq	r0, #2
 8026174:	4770      	bx	lr
 8026176:	2002      	movs	r0, #2
 8026178:	4770      	bx	lr
 802617a:	2000      	movs	r0, #0
 802617c:	4770      	bx	lr
	...

08026180 <powf>:
 8026180:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8026182:	ee10 1a10 	vmov	r1, s0
 8026186:	ee10 4a90 	vmov	r4, s1
 802618a:	f5a1 0200 	sub.w	r2, r1, #8388608	@ 0x800000
 802618e:	0063      	lsls	r3, r4, #1
 8026190:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8026194:	eef0 7a40 	vmov.f32	s15, s0
 8026198:	eeb0 7a60 	vmov.f32	s14, s1
 802619c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80261a0:	f06f 7280 	mvn.w	r2, #16777216	@ 0x1000000
 80261a4:	d252      	bcs.n	802624c <powf+0xcc>
 80261a6:	4290      	cmp	r0, r2
 80261a8:	d258      	bcs.n	802625c <powf+0xdc>
 80261aa:	2000      	movs	r0, #0
 80261ac:	f101 4340 	add.w	r3, r1, #3221225472	@ 0xc0000000
 80261b0:	f503 034d 	add.w	r3, r3, #13434880	@ 0xcd0000
 80261b4:	4a9e      	ldr	r2, [pc, #632]	@ (8026430 <powf+0x2b0>)
 80261b6:	eebf 2b00 	vmov.f64	d2, #240	@ 0xbf800000 -1.0
 80261ba:	f3c3 44c3 	ubfx	r4, r3, #19, #4
 80261be:	f36f 0316 	bfc	r3, #0, #23
 80261c2:	1ac9      	subs	r1, r1, r3
 80261c4:	eb02 1404 	add.w	r4, r2, r4, lsl #4
 80261c8:	ee07 1a90 	vmov	s15, r1
 80261cc:	ed94 5b02 	vldr	d5, [r4, #8]
 80261d0:	ed94 4b00 	vldr	d4, [r4]
 80261d4:	15db      	asrs	r3, r3, #23
 80261d6:	eeb7 6ae7 	vcvt.f64.f32	d6, s15
 80261da:	ee07 3a90 	vmov	s15, r3
 80261de:	eea4 2b06 	vfma.f64	d2, d4, d6
 80261e2:	ed92 1b42 	vldr	d1, [r2, #264]	@ 0x108
 80261e6:	ee22 4b02 	vmul.f64	d4, d2, d2
 80261ea:	ee24 0b04 	vmul.f64	d0, d4, d4
 80261ee:	eeb8 6be7 	vcvt.f64.s32	d6, s15
 80261f2:	ee36 6b05 	vadd.f64	d6, d6, d5
 80261f6:	ed92 5b40 	vldr	d5, [r2, #256]	@ 0x100
 80261fa:	ed92 3b44 	vldr	d3, [r2, #272]	@ 0x110
 80261fe:	eea2 1b05 	vfma.f64	d1, d2, d5
 8026202:	ed92 5b46 	vldr	d5, [r2, #280]	@ 0x118
 8026206:	eea2 5b03 	vfma.f64	d5, d2, d3
 802620a:	ed92 3b48 	vldr	d3, [r2, #288]	@ 0x120
 802620e:	eeb7 7ac7 	vcvt.f64.f32	d7, s14
 8026212:	eea2 6b03 	vfma.f64	d6, d2, d3
 8026216:	eea4 6b05 	vfma.f64	d6, d4, d5
 802621a:	eea1 6b00 	vfma.f64	d6, d1, d0
 802621e:	ee27 7b06 	vmul.f64	d7, d7, d6
 8026222:	ee17 3a90 	vmov	r3, s15
 8026226:	f3c3 32cf 	ubfx	r2, r3, #15, #16
 802622a:	f248 03bf 	movw	r3, #32959	@ 0x80bf
 802622e:	429a      	cmp	r2, r3
 8026230:	f0c0 8098 	bcc.w	8026364 <powf+0x1e4>
 8026234:	ed9f 6b76 	vldr	d6, [pc, #472]	@ 8026410 <powf+0x290>
 8026238:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802623c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026240:	dd79      	ble.n	8026336 <powf+0x1b6>
 8026242:	b003      	add	sp, #12
 8026244:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026248:	f000 b920 	b.w	802648c <__math_oflowf>
 802624c:	4290      	cmp	r0, r2
 802624e:	d330      	bcc.n	80262b2 <powf+0x132>
 8026250:	b12b      	cbz	r3, 802625e <powf+0xde>
 8026252:	0049      	lsls	r1, r1, #1
 8026254:	f1b1 4f7f 	cmp.w	r1, #4278190080	@ 0xff000000
 8026258:	d808      	bhi.n	802626c <powf+0xec>
 802625a:	e015      	b.n	8026288 <powf+0x108>
 802625c:	b953      	cbnz	r3, 8026274 <powf+0xf4>
 802625e:	f481 0180 	eor.w	r1, r1, #4194304	@ 0x400000
 8026262:	0049      	lsls	r1, r1, #1
 8026264:	f511 0f00 	cmn.w	r1, #8388608	@ 0x800000
 8026268:	f240 80ca 	bls.w	8026400 <powf+0x280>
 802626c:	ee37 0a87 	vadd.f32	s0, s15, s14
 8026270:	b003      	add	sp, #12
 8026272:	bd30      	pop	{r4, r5, pc}
 8026274:	f1b1 5f7e 	cmp.w	r1, #1065353216	@ 0x3f800000
 8026278:	d105      	bne.n	8026286 <powf+0x106>
 802627a:	f484 0480 	eor.w	r4, r4, #4194304	@ 0x400000
 802627e:	0064      	lsls	r4, r4, #1
 8026280:	f514 0f00 	cmn.w	r4, #8388608	@ 0x800000
 8026284:	e7f0      	b.n	8026268 <powf+0xe8>
 8026286:	0049      	lsls	r1, r1, #1
 8026288:	f1b3 4f7f 	cmp.w	r3, #4278190080	@ 0xff000000
 802628c:	d1ee      	bne.n	802626c <powf+0xec>
 802628e:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 8026292:	f000 80b5 	beq.w	8026400 <powf+0x280>
 8026296:	f1b1 4ffe 	cmp.w	r1, #2130706432	@ 0x7f000000
 802629a:	ea6f 0404 	mvn.w	r4, r4
 802629e:	bf34      	ite	cc
 80262a0:	2100      	movcc	r1, #0
 80262a2:	2101      	movcs	r1, #1
 80262a4:	0fe4      	lsrs	r4, r4, #31
 80262a6:	42a1      	cmp	r1, r4
 80262a8:	f040 80ad 	bne.w	8026406 <powf+0x286>
 80262ac:	ee27 0a07 	vmul.f32	s0, s14, s14
 80262b0:	e7de      	b.n	8026270 <powf+0xf0>
 80262b2:	004d      	lsls	r5, r1, #1
 80262b4:	1e6b      	subs	r3, r5, #1
 80262b6:	4293      	cmp	r3, r2
 80262b8:	d31b      	bcc.n	80262f2 <powf+0x172>
 80262ba:	2900      	cmp	r1, #0
 80262bc:	ee20 0a00 	vmul.f32	s0, s0, s0
 80262c0:	da0e      	bge.n	80262e0 <powf+0x160>
 80262c2:	4620      	mov	r0, r4
 80262c4:	f7ff ff44 	bl	8026150 <checkint>
 80262c8:	2801      	cmp	r0, #1
 80262ca:	d109      	bne.n	80262e0 <powf+0x160>
 80262cc:	eeb1 0a40 	vneg.f32	s0, s0
 80262d0:	b945      	cbnz	r5, 80262e4 <powf+0x164>
 80262d2:	2c00      	cmp	r4, #0
 80262d4:	dacc      	bge.n	8026270 <powf+0xf0>
 80262d6:	b003      	add	sp, #12
 80262d8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80262dc:	f000 b8dc 	b.w	8026498 <__math_divzerof>
 80262e0:	2000      	movs	r0, #0
 80262e2:	e7f5      	b.n	80262d0 <powf+0x150>
 80262e4:	2c00      	cmp	r4, #0
 80262e6:	dac3      	bge.n	8026270 <powf+0xf0>
 80262e8:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80262ec:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80262f0:	e7be      	b.n	8026270 <powf+0xf0>
 80262f2:	2900      	cmp	r1, #0
 80262f4:	da1d      	bge.n	8026332 <powf+0x1b2>
 80262f6:	4620      	mov	r0, r4
 80262f8:	f7ff ff2a 	bl	8026150 <checkint>
 80262fc:	b920      	cbnz	r0, 8026308 <powf+0x188>
 80262fe:	b003      	add	sp, #12
 8026300:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8026304:	f000 b8da 	b.w	80264bc <__math_invalidf>
 8026308:	1e43      	subs	r3, r0, #1
 802630a:	4258      	negs	r0, r3
 802630c:	4158      	adcs	r0, r3
 802630e:	0400      	lsls	r0, r0, #16
 8026310:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8026314:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8026318:	f4bf af48 	bcs.w	80261ac <powf+0x2c>
 802631c:	eddf 6a45 	vldr	s13, [pc, #276]	@ 8026434 <powf+0x2b4>
 8026320:	ee27 0aa6 	vmul.f32	s0, s15, s13
 8026324:	ee10 3a10 	vmov	r3, s0
 8026328:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 802632c:	f1a3 6138 	sub.w	r1, r3, #192937984	@ 0xb800000
 8026330:	e73c      	b.n	80261ac <powf+0x2c>
 8026332:	2000      	movs	r0, #0
 8026334:	e7ee      	b.n	8026314 <powf+0x194>
 8026336:	ed9f 6b38 	vldr	d6, [pc, #224]	@ 8026418 <powf+0x298>
 802633a:	eeb4 7bc6 	vcmpe.f64	d7, d6
 802633e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026342:	dd45      	ble.n	80263d0 <powf+0x250>
 8026344:	f04f 534c 	mov.w	r3, #855638016	@ 0x33000000
 8026348:	b3d0      	cbz	r0, 80263c0 <powf+0x240>
 802634a:	9301      	str	r3, [sp, #4]
 802634c:	eddd 6a01 	vldr	s13, [sp, #4]
 8026350:	eebf 6a00 	vmov.f32	s12, #240	@ 0xbf800000 -1.0
 8026354:	ee76 6a66 	vsub.f32	s13, s12, s13
 8026358:	eef4 6a46 	vcmp.f32	s13, s12
 802635c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8026360:	f47f af6f 	bne.w	8026242 <powf+0xc2>
 8026364:	eeb7 0b00 	vmov.f64	d0, #112	@ 0x3f800000  1.0
 8026368:	4b33      	ldr	r3, [pc, #204]	@ (8026438 <powf+0x2b8>)
 802636a:	ed93 5b40 	vldr	d5, [r3, #256]	@ 0x100
 802636e:	ee37 6b05 	vadd.f64	d6, d7, d5
 8026372:	ee16 2a10 	vmov	r2, s12
 8026376:	ee36 6b45 	vsub.f64	d6, d6, d5
 802637a:	f002 011f 	and.w	r1, r2, #31
 802637e:	ee37 7b46 	vsub.f64	d7, d7, d6
 8026382:	ed93 5b42 	vldr	d5, [r3, #264]	@ 0x108
 8026386:	ee27 4b07 	vmul.f64	d4, d7, d7
 802638a:	ed93 6b44 	vldr	d6, [r3, #272]	@ 0x110
 802638e:	eb03 05c1 	add.w	r5, r3, r1, lsl #3
 8026392:	f853 4031 	ldr.w	r4, [r3, r1, lsl #3]
 8026396:	eea7 6b05 	vfma.f64	d6, d7, d5
 802639a:	686d      	ldr	r5, [r5, #4]
 802639c:	ed93 5b46 	vldr	d5, [r3, #280]	@ 0x118
 80263a0:	1880      	adds	r0, r0, r2
 80263a2:	2100      	movs	r1, #0
 80263a4:	190a      	adds	r2, r1, r4
 80263a6:	eb05 33c0 	add.w	r3, r5, r0, lsl #15
 80263aa:	eea7 0b05 	vfma.f64	d0, d7, d5
 80263ae:	ec43 2b17 	vmov	d7, r2, r3
 80263b2:	eea6 0b04 	vfma.f64	d0, d6, d4
 80263b6:	ee20 0b07 	vmul.f64	d0, d0, d7
 80263ba:	eeb7 0bc0 	vcvt.f32.f64	s0, d0
 80263be:	e757      	b.n	8026270 <powf+0xf0>
 80263c0:	9300      	str	r3, [sp, #0]
 80263c2:	eddd 6a00 	vldr	s13, [sp]
 80263c6:	eeb7 6a00 	vmov.f32	s12, #112	@ 0x3f800000  1.0
 80263ca:	ee76 6a86 	vadd.f32	s13, s13, s12
 80263ce:	e7c3      	b.n	8026358 <powf+0x1d8>
 80263d0:	ed9f 6b13 	vldr	d6, [pc, #76]	@ 8026420 <powf+0x2a0>
 80263d4:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80263d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263dc:	d804      	bhi.n	80263e8 <powf+0x268>
 80263de:	b003      	add	sp, #12
 80263e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80263e4:	f000 b846 	b.w	8026474 <__math_uflowf>
 80263e8:	ed9f 6b0f 	vldr	d6, [pc, #60]	@ 8026428 <powf+0x2a8>
 80263ec:	eeb4 7bc6 	vcmpe.f64	d7, d6
 80263f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80263f4:	d5b6      	bpl.n	8026364 <powf+0x1e4>
 80263f6:	b003      	add	sp, #12
 80263f8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80263fc:	f000 b840 	b.w	8026480 <__math_may_uflowf>
 8026400:	eeb7 0a00 	vmov.f32	s0, #112	@ 0x3f800000  1.0
 8026404:	e734      	b.n	8026270 <powf+0xf0>
 8026406:	ed9f 0a0d 	vldr	s0, [pc, #52]	@ 802643c <powf+0x2bc>
 802640a:	e731      	b.n	8026270 <powf+0xf0>
 802640c:	f3af 8000 	nop.w
 8026410:	ffd1d571 	.word	0xffd1d571
 8026414:	405fffff 	.word	0x405fffff
 8026418:	ffa3aae2 	.word	0xffa3aae2
 802641c:	405fffff 	.word	0x405fffff
 8026420:	00000000 	.word	0x00000000
 8026424:	c062c000 	.word	0xc062c000
 8026428:	00000000 	.word	0x00000000
 802642c:	c062a000 	.word	0xc062a000
 8026430:	0802deb0 	.word	0x0802deb0
 8026434:	4b000000 	.word	0x4b000000
 8026438:	0802dd68 	.word	0x0802dd68
 802643c:	00000000 	.word	0x00000000

08026440 <with_errnof>:
 8026440:	b510      	push	{r4, lr}
 8026442:	ed2d 8b02 	vpush	{d8}
 8026446:	eeb0 8a40 	vmov.f32	s16, s0
 802644a:	4604      	mov	r4, r0
 802644c:	f7ff fa0a 	bl	8025864 <__errno>
 8026450:	eeb0 0a48 	vmov.f32	s0, s16
 8026454:	ecbd 8b02 	vpop	{d8}
 8026458:	6004      	str	r4, [r0, #0]
 802645a:	bd10      	pop	{r4, pc}

0802645c <xflowf>:
 802645c:	b130      	cbz	r0, 802646c <xflowf+0x10>
 802645e:	eef1 7a40 	vneg.f32	s15, s0
 8026462:	ee27 0a80 	vmul.f32	s0, s15, s0
 8026466:	2022      	movs	r0, #34	@ 0x22
 8026468:	f7ff bfea 	b.w	8026440 <with_errnof>
 802646c:	eef0 7a40 	vmov.f32	s15, s0
 8026470:	e7f7      	b.n	8026462 <xflowf+0x6>
	...

08026474 <__math_uflowf>:
 8026474:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 802647c <__math_uflowf+0x8>
 8026478:	f7ff bff0 	b.w	802645c <xflowf>
 802647c:	10000000 	.word	0x10000000

08026480 <__math_may_uflowf>:
 8026480:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8026488 <__math_may_uflowf+0x8>
 8026484:	f7ff bfea 	b.w	802645c <xflowf>
 8026488:	1a200000 	.word	0x1a200000

0802648c <__math_oflowf>:
 802648c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 8026494 <__math_oflowf+0x8>
 8026490:	f7ff bfe4 	b.w	802645c <xflowf>
 8026494:	70000000 	.word	0x70000000

08026498 <__math_divzerof>:
 8026498:	ed9f 0a07 	vldr	s0, [pc, #28]	@ 80264b8 <__math_divzerof+0x20>
 802649c:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 80264a0:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 80264a4:	2800      	cmp	r0, #0
 80264a6:	f04f 0022 	mov.w	r0, #34	@ 0x22
 80264aa:	fe47 7a87 	vseleq.f32	s15, s15, s14
 80264ae:	ee87 0a80 	vdiv.f32	s0, s15, s0
 80264b2:	f7ff bfc5 	b.w	8026440 <with_errnof>
 80264b6:	bf00      	nop
 80264b8:	00000000 	.word	0x00000000

080264bc <__math_invalidf>:
 80264bc:	eef0 7a40 	vmov.f32	s15, s0
 80264c0:	ee30 7a40 	vsub.f32	s14, s0, s0
 80264c4:	eef4 7a67 	vcmp.f32	s15, s15
 80264c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80264cc:	ee87 0a07 	vdiv.f32	s0, s14, s14
 80264d0:	d602      	bvs.n	80264d8 <__math_invalidf+0x1c>
 80264d2:	2021      	movs	r0, #33	@ 0x21
 80264d4:	f7ff bfb4 	b.w	8026440 <with_errnof>
 80264d8:	4770      	bx	lr
	...

080264dc <_init>:
 80264dc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264de:	bf00      	nop
 80264e0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80264e2:	bc08      	pop	{r3}
 80264e4:	469e      	mov	lr, r3
 80264e6:	4770      	bx	lr

080264e8 <_fini>:
 80264e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80264ea:	bf00      	nop
 80264ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80264ee:	bc08      	pop	{r3}
 80264f0:	469e      	mov	lr, r3
 80264f2:	4770      	bx	lr
